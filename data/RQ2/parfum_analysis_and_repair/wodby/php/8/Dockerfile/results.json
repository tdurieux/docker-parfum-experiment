{
  "startTime": 1674251333234,
  "endTime": 1674251335097,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 198,
        "lineEnd": 198,
        "columnStart": 4,
        "columnEnd": 127
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 200,
        "lineEnd": 200,
        "columnStart": 4,
        "columnEnd": 127
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 268,
        "lineEnd": 268,
        "columnStart": 8,
        "columnEnd": 110
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "ARG PHP_VER\n\nFROM php:${PHP_VER}-fpm-alpine3.15\n\nARG PHP_DEV\n\nARG PECL_HTTP_PROXY\n\nARG WODBY_USER_ID=1000\nARG WODBY_GROUP_ID=1000\n\nENV PHP_DEV=\"${PHP_DEV}\"\n\nENV APP_ROOT=\"/var/www/html\" \\\n    CONF_DIR=\"/var/www/conf\" \\\n    FILES_DIR=\"/mnt/files\"\n\nENV PATH=\"${PATH}:/home/wodby/.composer/vendor/bin:${APP_ROOT}/vendor/bin:${APP_ROOT}/bin\" \\\n    SSHD_HOST_KEYS_DIR=\"/etc/ssh\" \\\n    ENV=\"/home/wodby/.shrc\" \\\n    \\\n    GIT_USER_EMAIL=\"wodby@example.com\" \\\n    GIT_USER_NAME=\"wodby\"\n\nARG TARGETPLATFORM\nARG TARGETARCH\n\nRUN set -xe; \\\n\n    # Delete existing user/group if uid/gid occupied.\n    existing_group=$(getent group \"${WODBY_GROUP_ID}\" | cut -d: -f1); \\\n    if [[ -n \"${existing_group}\" ]]; then delgroup \"${existing_group}\"; fi; \\\n    existing_user=$(getent passwd \"${WODBY_USER_ID}\" | cut -d: -f1); \\\n    if [[ -n \"${existing_user}\" ]]; then deluser \"${existing_user}\"; fi; \\\n\n\tapk add --update --no-cache shadow; \\\n\tgroupadd -g \"${WODBY_GROUP_ID}\" wodby; \\\n\tuseradd  -u \"${WODBY_USER_ID}\" -m -s /bin/bash -g wodby wodby; \\\n\tadduser wodby www-data; \\\n\tsed -i '/^wodby/s/!/*/' /etc/shadow; \\\n\n    apk add --update --no-cache -t .wodby-php-run-deps \\\n        bash \\\n        brotli-libs \\\n        c-client \\\n        curl \\\n        fcgi \\\n        findutils \\\n        freetype \\\n        git \\\n        gmp \\\n        gzip \\\n        icu-libs \\\n        imagemagick\\\n        jpegoptim \\\n        less \\\n        libbz2 \\\n        libevent \\\n        libjpeg-turbo \\\n        libjpeg-turbo-utils \\\n        libldap \\\n        libltdl \\\n        libmemcached-libs \\\n        libmcrypt \\\n        libpng \\\n        librdkafka \\\n        libsmbclient \\\n        libuuid \\\n        libwebp \\\n        libxml2 \\\n        libxslt \\\n        libzip \\\n        make \\\n        mariadb-client \\\n        mariadb-connector-c \\\n        nano \\\n        openssh \\\n        openssh-client \\\n        patch \\\n\t    pngquant \\\n        postgresql-client \\\n        rabbitmq-c \\\n        rsync \\\n        sqlite \\\n        ssmtp \\\n        su-exec \\\n        sudo \\\n        tar \\\n        tidyhtml-libs \\\n        # todo: move out tig and tmux to -dev version.\n        tig \\\n        tmux \\\n        unzip \\\n        wget \\\n        yaml; \\\n\n    if [[ -n \"${PHP_DEV}\" ]]; then \\\n        apk add --update --no-cache -t .wodby-php-dev-run-deps yarn; \\\n    fi; \\\n\n    apk add --update --no-cache -t .wodby-php-build-deps \\\n        autoconf \\\n        automake \\\n        cmake \\\n        brotli-dev \\\n        build-base \\\n        bzip2-dev \\\n        freetype-dev \\\n        go \\\n        gmp-dev \\\n        icu-dev \\\n        imagemagick-dev \\\n        imap-dev \\\n        jpeg-dev \\\n        krb5-dev \\\n        libevent-dev \\\n        libgcrypt-dev \\\n        libjpeg-turbo-dev \\\n        libmemcached-dev \\\n        libmcrypt-dev \\\n        libpng-dev \\\n        librdkafka-dev \\\n        libtool \\\n        libwebp-dev \\\n        libxslt-dev \\\n        libzip-dev \\\n        linux-headers \\\n        openldap-dev \\\n        openssl-dev \\\n        pcre-dev \\\n        postgresql-dev \\\n        rabbitmq-c-dev \\\n        samba-dev \\\n        tidyhtml-dev \\\n        unixodbc-dev \\\n        yaml-dev; \\\n\n    # Install redis-cli.\n    apk add --update --no-cache redis; \\\n    mv /usr/bin/redis-cli /tmp/; \\\n    apk del --purge redis; \\\n    deluser redis; \\\n    mv /tmp/redis-cli /usr/bin; \\\n\n    # Download helper scripts.\n    dockerplatform=${TARGETPLATFORM:-linux/amd64}; \\\n    gotpl_url=\"https://github.com/wodby/gotpl/releases/download/0.3.3/gotpl-${dockerplatform/\\//-}.tar.gz\"; \\\n    wget -qO- \"${gotpl_url}\" | tar xz --no-same-owner -C /usr/local/bin; \\\n    git clone https://github.com/wodby/alpine /tmp/alpine; \\\n    cd /tmp/alpine; \\\n    latest=$(git describe --abbrev=0 --tags); \\\n    git checkout \"${latest}\"; \\\n    mv /tmp/alpine/bin/* /usr/local/bin; \\\n\n    docker-php-source extract; \\\n    cp /usr/src/php/php.ini-production \"${PHP_INI_DIR}/php.ini\"; \\\n\n    docker-php-ext-install \\\n        bcmath \\\n        bz2 \\\n        calendar \\\n        exif \\\n        gmp \\\n        intl \\\n        ldap \\\n        mysqli \\\n        opcache \\\n        pcntl \\\n        pdo_mysql \\\n        pdo_pgsql \\\n        pgsql \\\n        soap \\\n        sockets \\\n        tidy \\\n        xsl \\\n        zip; \\\n\n    # GD\n    docker-php-ext-configure gd \\\n                --with-webp \\\n                --with-freetype \\\n                --with-jpeg; \\\n    NPROC=$(getconf _NPROCESSORS_ONLN); \\\n    docker-php-ext-install \"-j${NPROC}\" gd; \\\n\n    # IMAP\n    PHP_OPENSSL=yes docker-php-ext-configure imap \\\n        --with-kerberos \\\n        --with-imap-ssl; \\\n    docker-php-ext-install \"-j${NPROC}\" imap; \\\n\n    pecl config-set php_ini \"${PHP_INI_DIR}/php.ini\"; \\\n    if [[ -n \"${PECL_HTTP_PROXY}\" ]]; then \\\n        # Using pear as pecl throw errors: https://blog.flowl.info/2015/peclpear-behind-proxy-how-to/\n        pear config-set http_proxy \"${PECL_HTTP_PROXY}\"; \\\n    fi; \\\n\n    # Microsoft ODBC driver for SQL Server\n    curl -f -O https://download.microsoft.com/download/e/4/e/e4e67866-dffd-428c-aac7-8d28ddafb39b/msodbcsql17_17.6.1.1-1_amd64.apk && \\\n    apk add --allow-untrusted msodbcsql17_17.6.1.1-1_amd64.apk; \\\n    curl -f -O https://download.microsoft.com/download/e/4/e/e4e67866-dffd-428c-aac7-8d28ddafb39b/mssql-tools_17.6.1.1-1_amd64.apk && \\\n    apk add --allow-untrusted mssql-tools_17.6.1.1-1_amd64.apk; \\\n    rm ./*.apk; \\\n\n    pecl install \\\n        apcu-5.1.21 \\\n        amqp-1.11.0 \\\n        ast-1.0.16 \\\n        ds-1.4.0 \\\n        event-3.0.6 \\\n#        grpc-1.34.0 \\\n        igbinary-3.2.7 \\\n        imagick-3.7.0 \\\n        memcached-3.2.0 \\\n        mongodb-1.13.0 \\\n        oauth-2.0.7 \\\n        pdo_sqlsrv-5.10.1 \\\n        pcov \\\n        rdkafka-6.0.1 \\\n        redis-5.3.7 \\\n        sqlsrv-5.10.1 \\\n        smbclient-1.0.6 \\\n        uploadprogress-2.0.2 \\\n        uuid-1.2.0 \\\n        xdebug-3.1.5 \\\n        xhprof-2.3.5 \\\n        yaml-2.2.2; \\\n\n    docker-php-ext-enable \\\n        apcu \\\n        amqp \\\n        ast \\\n        ds \\\n        event \\\n        igbinary \\\n        imagick \\\n#        grpc \\\n        memcached \\\n        mongodb \\\n        oauth \\\n        pdo_sqlsrv \\\n        pcov \\\n        rdkafka \\\n        redis \\\n        smbclient \\\n        sqlsrv \\\n        uploadprogress \\\n        uuid \\\n        xdebug \\\n        xhprof \\\n        yaml; \\\n\n    if [[ \"${PHP_VERSION:0:3}\" == \"8.0\" ]]; then \\\n        pecl install mcrypt-1.0.4; \\\n        docker-php-ext-enable mcrypt; \\\n    fi; \\\n    # Event extension should be loaded after sockets.\n    # http://osmanov-dev-notes.blogspot.com/2013/07/fixing-php-start-up-error-unable-to.html\n    mv /usr/local/etc/php/conf.d/docker-php-ext-event.ini /usr/local/etc/php/conf.d/z-docker-php-ext-event.ini; \\\n\n    # Blackfire extension.\n    mkdir -p /tmp/blackfire; \\\n    version=$(php -r \"echo PHP_MAJOR_VERSION.PHP_MINOR_VERSION;\"); \\\n    blackfire_url=\"https://blackfire.io/api/v1/releases/probe/php/alpine/${TARGETARCH}/${version}\"; \\\n    wget -qO- \"${blackfire_url}\" | tar xz --no-same-owner -C /tmp/blackfire; \\\n    mv /tmp/blackfire/blackfire-*.so $(php -r \"echo ini_get('extension_dir');\")/blackfire.so; \\\n    if [[ -n \"${PHP_DEV}\" ]]; then \\\n        mkdir -p /tmp/blackfire; \\\n        curl -f -L \"https://packages.blackfire.io/binaries/blackfire/2.10.0/blackfire-linux_${TARGETARCH}.tar.gz\" | tar zxp -C /tmp/blackfire; \\\n        mv /tmp/blackfire/blackfire /usr/local/bin/blackfire; \\\n        rm -Rf /tmp/blackfire; \\\n    fi; \\\n\n    # NewRelic extension and agent.\n    git clone https://github.com/newrelic/newrelic-php-agent /tmp/newrelic; \\\n    cd /tmp/newrelic; \\\n    make all; \\\n    make agent-install; \\\n    mv bin/daemon /usr/bin/newrelic-daemon; \\\n    mkdir -p /var/log/newrelic/; \\\n    chown -R www-data:www-data /var/log/newrelic/; \\\n    chmod -R 775 /var/log/newrelic/; \\\n\n    # Brotli extension.\n    brotli_ext_ver=\"0.13.1\"; \\\n    mkdir -p /usr/src/php/ext/brotli; \\\n    brotli_url=\"https://github.com/kjdev/php-ext-brotli/archive/refs/tags/${brotli_ext_ver}.tar.gz\"; \\\n    wget -qO- \"${brotli_url}\" | tar xz --strip-components=1 -C /usr/src/php/ext/brotli; \\\n    docker-php-ext-configure brotli --with-libbrotli; \\\n    docker-php-ext-install brotli; \\\n\n    wget -qO- https://getcomposer.org/installer | php -- --install-dir=/usr/local/bin --filename=composer; \\\n\n    # Install Walter (deprecated).\n    walter_ver=\"1.4.0\"; \\\n    walter_url=\"https://github.com/walter-cd/walter/releases/download/v${walter_ver}/walter_${walter_ver}_linux_amd64.tar.gz\"; \\\n    wget -qO- \"${walter_url}\" | tar xz -C /tmp/; \\\n    mv /tmp/walter_linux_amd64/walter /usr/local/bin; \\\n\n    { \\\n        echo 'export PS1=\"\\u@${WODBY_APP_NAME:-php}.${WODBY_ENVIRONMENT_NAME:-container}:\\w $ \"'; \\\n        # Make sure PATH is the same for ssh sessions.\n        echo \"export PATH=${PATH}\"; \\\n    } | tee /home/wodby/.shrc; \\\n\n    cp /home/wodby/.shrc /home/wodby/.bashrc; \\\n    cp /home/wodby/.shrc /home/wodby/.bash_profile; \\\n\n    { \\\n        echo 'Defaults env_keep += \"APP_ROOT FILES_DIR\"' ; \\\n        \\\n        if [[ -n \"${PHP_DEV}\" ]]; then \\\n            echo 'wodby ALL=(root) NOPASSWD:SETENV:ALL'; \\\n        else \\\n            echo -n 'wodby ALL=(root) NOPASSWD:SETENV: ' ; \\\n            echo -n '/usr/local/bin/files_chmod, ' ; \\\n            echo -n '/usr/local/bin/files_chown, ' ; \\\n            echo -n '/usr/local/bin/files_sync, ' ; \\\n            echo -n '/usr/local/bin/gen_ssh_keys, ' ; \\\n            echo -n '/usr/local/bin/init_container, ' ; \\\n            echo -n '/usr/local/bin/migrate, ' ; \\\n            echo -n '/usr/local/sbin/php-fpm, ' ; \\\n            echo -n '/usr/sbin/sshd, ' ; \\\n            echo '/usr/sbin/crond' ; \\\n        fi; \\\n    } | tee /etc/sudoers.d/wodby; \\\n\n    echo \"TLS_CACERTDIR /etc/ssl/certs/\" >> /etc/openldap/ldap.conf; \\\n\n    install -o wodby -g wodby -d \\\n        \"${APP_ROOT}\" \\\n        \"${CONF_DIR}\" \\\n        /home/wodby/.ssh; \\\n\n    install -o www-data -g www-data -d \\\n        \"${FILES_DIR}/public\" \\\n        \"${FILES_DIR}/private\" \\\n        \"${FILES_DIR}/sessions\" \\\n        \"${FILES_DIR}/xhprof\" \\\n        \"${FILES_DIR}/xdebug\" \\\n        /home/www-data/.ssh; \\\n\n    chmod -R 775 \"${FILES_DIR}\"; \\\n    chown -R wodby:wodby \\\n        \"${PHP_INI_DIR}/conf.d\" \\\n        /usr/local/etc/php-fpm.d \\\n        /etc/ssmtp/ssmtp.conf \\\n        /home/wodby/.[^.]*; \\\n\n    touch /etc/ssh/sshd_config /etc/gitconfig; \\\n    chown wodby: /etc/ssh/sshd_config /etc/gitconfig; \\\n    chown wodby:wodby /usr/local/bin/ /usr/local/bin/composer; \\\n\n    rm /etc/crontabs/root; \\\n    # deprecated: remove in favor of bind mounts.\n    touch /etc/crontabs/www-data; \\\n    chown root:www-data /etc/crontabs/www-data; \\\n    chmod 660 /etc/crontabs/www-data; \\\n\n    su-exec wodby composer clear-cache; \\\n    docker-php-source delete; \\\n    apk del --purge .wodby-php-build-deps; \\\n    pecl clear-cache; \\\n\n    rm -rf \\\n        /usr/src/php/ext/ast \\\n        /usr/src/php/ext/uploadprogress \\\n        /usr/include/php \\\n        /usr/lib/php/build \\\n        /tmp/* \\\n        /root/.composer \\\n        /var/cache/apk/*; \\\n\n    if [[ -z \"${PHP_DEV}\" ]]; then \\\n        rm -rf /usr/src/php.tar.xz; \\\n    fi\n\nUSER wodby\n\nWORKDIR ${APP_ROOT}\nEXPOSE 9000\n\nCOPY templates /etc/gotpl/\nCOPY docker-entrypoint.sh /\nCOPY bin /usr/local/bin/\n\nENTRYPOINT [\"/docker-entrypoint.sh\"]\nCMD [\"sudo\", \"-E\", \"php-fpm\"]\n"
}