{
  "startTime": 1674253459090,
  "endTime": 1674253461068,
  "originalSmells": [
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 83,
        "lineEnd": 83,
        "columnStart": 4,
        "columnEnd": 61
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 139,
        "lineEnd": 185,
        "columnStart": 4,
        "columnEnd": 62
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 136,
        "lineEnd": 136,
        "columnStart": 4,
        "columnEnd": 38
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "ARG BASE_IMAGE_TAG\n\nFROM wodby/alpine:${BASE_IMAGE_TAG}\n\nARG NGINX_VER\n\nARG WODBY_USER_ID=1000\nARG WODBY_GROUP_ID=1000\n\nENV NGINX_VER=\"${NGINX_VER}\" \\\n    APP_ROOT=\"/var/www/html\" \\\n    FILES_DIR=\"/mnt/files\" \\\n    NGINX_VHOST_PRESET=\"html\"\n\nCOPY patches /tmp/patches\n\nRUN set -ex; \\\n\n    nginx_up_ver=\"0.9.1\"; \\\n    ngx_modsecurity_ver=\"1.0.0\"; \\\n    modsecurity_ver=\"3.0.4\"; \\\n    owasp_crs_ver=\"3.1.0\"; \\\n    brotli_commit='9aec15e2aa6feea2113119ba06460af70ab3ea62'; \\\n    vts_commit='3c6cf41315bfcb48c35a3a0be81ddba6d0d01dac'; \\\n\n    addgroup -S nginx; \\\n    adduser -S -D -H -h /var/cache/nginx -s /sbin/nologin -G nginx nginx; \\\n\n\taddgroup -g \"${WODBY_GROUP_ID}\" -S wodby; \\\n\tadduser -u \"${WODBY_USER_ID}\" -D -S -s /bin/bash -G wodby wodby; \\\n\tsed -i '/^wodby/s/!/*/' /etc/shadow; \\\n\techo \"PS1='\\w\\$ '\" >> /home/wodby/.bashrc; \\\n\n    apk add --update --no-cache -t .tools \\\n        findutils \\\n        make \\\n        nghttp2 \\\n        sudo; \\\n\n    apk add --update --no-cache -t .nginx-build-deps \\\n        apr-dev \\\n        apr-util-dev \\\n        build-base \\\n        brotli-dev \\\n        gd-dev \\\n        git \\\n        gnupg \\\n        gperf \\\n        icu-dev \\\n        libjpeg-turbo-dev \\\n        libpng-dev \\\n        libressl-dev \\\n        libtool \\\n        libxslt-dev \\\n        linux-headers \\\n        pcre-dev \\\n        zlib-dev; \\\n\n     apk add --no-cache -t .libmodsecurity-build-deps \\\n        autoconf \\\n        automake \\\n        bison \\\n        curl \\\n        flex \\\n        g++ \\\n        git \\\n        libmaxminddb-dev \\\n        libstdc++ \\\n        libtool \\\n        libxml2-dev \\\n        pcre-dev \\\n        rsync \\\n        sed \\\n        yajl \\\n        yajl-dev; \\\n\n    # Modsecurity lib.\n    cd /tmp; \\\n    git clone --depth 1 -b \"v${modsecurity_ver}\" --single-branch https://github.com/SpiderLabs/ModSecurity; \\\n    cd ModSecurity; \\\n    git submodule init; \\\n    git submodule update; \\\n    ./build.sh; \\\n    ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --disable-doxygen-doc --disable-doxygen-html; \\\n    make -j$(getconf _NPROCESSORS_ONLN); \\\n    make install; \\\n    mkdir -p /etc/nginx/modsecurity/; \\\n    mv modsecurity.conf-recommended /etc/nginx/modsecurity/recommended.conf; \\\n    sed -i 's/SecRuleEngine DetectionOnly/SecRuleEngine On/' /etc/nginx/modsecurity/recommended.conf; \\\n    cp unicode.mapping /etc/nginx/modsecurity/; \\\n    rsync -a --links /usr/local/modsecurity/lib/libmodsecurity.so* /usr/local/lib/; \\\n\n    # Brotli.\n    cd /tmp; \\\n    git clone --depth 10 --single-branch https://github.com/google/ngx_brotli; \\\n    cd /tmp/ngx_brotli; \\\n    git checkout ${brotli_commit}; \\\n\n    # Get ngx modsecurity module.\n    mkdir -p /tmp/ngx_http_modsecurity_module; \\\n    ver=\"${ngx_modsecurity_ver}\"; \\\n    url=\"https://github.com/SpiderLabs/ModSecurity-nginx/releases/download/v${ver}/modsecurity-nginx-v${ver}.tar.gz\"; \\\n    wget -qO- \"${url}\" | tar xz --strip-components=1 -C /tmp/ngx_http_modsecurity_module; \\\n\n    # OWASP.\n    wget -qO- \"https://github.com/SpiderLabs/owasp-modsecurity-crs/archive/v${owasp_crs_ver}.tar.gz\" | tar xz -C /tmp; \\\n    cd /tmp/owasp-modsecurity-crs-*; \\\n    sed -i \"s#SecRule REQUEST_COOKIES|#SecRule REQUEST_URI|REQUEST_COOKIES|#\" rules/REQUEST-941-APPLICATION-ATTACK-XSS.conf; \\\n    mkdir -p /etc/nginx/modsecurity/crs/; \\\n    mv crs-setup.conf.example /etc/nginx/modsecurity/crs/setup.conf; \\\n    mv rules /etc/nginx/modsecurity/crs; \\\n\n    # Get ngx upload progress module. \\\n    mkdir -p /tmp/ngx_http_uploadprogress_module; \\\n    url=\"https://github.com/masterzen/nginx-upload-progress-module/archive/v${nginx_up_ver}.tar.gz\"; \\\n    wget -qO- \"${url}\" | tar xz --strip-components=1 -C /tmp/ngx_http_uploadprogress_module; \\\n    if [[ \"${NGINX_VER}\" == 1.23* ]]; then \\\n        cd /tmp/ngx_http_uploadprogress_module; \\\n        patch -p1 -i /tmp/patches/1.23/uploadprogress.patch; \\\n    fi; \\\n\n    # Keys were changed since 1.22.\n    if [[ \"${NGINX_VER}\" == 1.19* || \"${NGINX_VER}\" == 1.20* || \"${NGINX_VER}\" == 1.21* ]]; then \\\n        export GPG_KEYS=B0F4253373F8F6F510D42178520A9993A1C052F8; \\\n    else \\\n        export GPG_KEYS=13C82A63B603576156E30A4EA0EA981B66B0D967; \\\n    fi; \\\n    # Get VTS module \\\n    git clone https://github.com/vozlt/nginx-module-vts.git /tmp/nginx_module_vts; \\\n    cd /tmp/nginx_module_vts; \\\n    git checkout ${vts_commit}; \\\n\n    # Download nginx.\n    curl -fSL \"https://nginx.org/download/nginx-${NGINX_VER}.tar.gz\" -o /tmp/nginx.tar.gz; \\\n    curl -fSL \"https://nginx.org/download/nginx-${NGINX_VER}.tar.gz.asc\"  -o /tmp/nginx.tar.gz.asc; \\\n    gpg_verify /tmp/nginx.tar.gz.asc /tmp/nginx.tar.gz; \\\n    tar zxf /tmp/nginx.tar.gz -C /tmp; rm /tmp/nginx.tar.gz \\\n\n    cd \"/tmp/nginx-${NGINX_VER}\"; \\\n    ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" \\\n        --prefix=/usr/share/nginx \\\n        --sbin-path=/usr/sbin/nginx \\\n        --modules-path=/usr/lib/nginx/modules \\\n        --conf-path=/etc/nginx/nginx.conf \\\n        --pid-path=/var/run/nginx/nginx.pid \\\n        --lock-path=/var/run/nginx/nginx.lock \\\n        --http-client-body-temp-path=/var/cache/nginx/client_temp \\\n        --http-proxy-temp-path=/var/cache/nginx/proxy_temp \\\n        --http-fastcgi-temp-path=/var/cache/nginx/fastcgi_temp \\\n        --http-uwsgi-temp-path=/var/cache/nginx/uwsgi_temp \\\n        --http-scgi-temp-path=/var/cache/nginx/scgi_temp \\\n        --user=nginx \\\n        --group=nginx \\\n        --with-compat \\\n        --with-file-aio \\\n        --with-http_addition_module \\\n        --with-http_auth_request_module \\\n        --with-http_dav_module \\\n        --with-http_flv_module \\\n        --with-http_gunzip_module \\\n        --with-http_gzip_static_module \\\n\t\t--with-http_image_filter_module=dynamic \\\n        --with-http_mp4_module \\\n        --with-http_random_index_module \\\n        --with-http_realip_module \\\n        --with-http_secure_link_module \\\n\t\t--with-http_slice_module \\\n        --with-http_ssl_module \\\n        --with-http_stub_status_module \\\n        --with-http_sub_module \\\n        --with-http_v2_module \\\n\t\t--with-http_xslt_module=dynamic \\\n        --with-ipv6 \\\n        --with-ld-opt=\"-Wl,-z,relro,--start-group -lapr-1 -laprutil-1 -licudata -licuuc -lpng -lturbojpeg -ljpeg\" \\\n        --with-mail \\\n        --with-mail_ssl_module \\\n        --with-pcre-jit \\\n        --with-stream \\\n        --with-stream_ssl_module \\\n\t\t--with-stream_ssl_preread_module \\\n\t\t--with-stream_realip_module \\\n        --with-threads \\\n        --add-module=/tmp/ngx_http_uploadprogress_module \\\n        --add-module=/tmp/ngx_brotli \\\n        --add-module=/tmp/nginx_module_vts \\\n        --add-dynamic-module=/tmp/ngx_http_modsecurity_module; \\\n\n    make -j$(getconf _NPROCESSORS_ONLN); \\\n    make install; \\\n    mkdir -p /usr/share/nginx/modules; \\\n\n    install -g wodby -o wodby -d \\\n        \"${APP_ROOT}\" \\\n        \"${FILES_DIR}\" \\\n        /etc/nginx/conf.d \\\n        /var/cache/nginx \\\n        /var/lib/nginx; \\\n\n    touch /etc/nginx/upstream.conf; \\\n    chown -R wodby:wodby /etc/nginx; \\\n\n    install -m 400 -d /etc/nginx/pki; \\\n    strip /usr/sbin/nginx*; \\\n    strip /usr/lib/nginx/modules/*.so; \\\n    strip /usr/local/lib/libmodsecurity.so*; \\\n\n    for i in /usr/lib/nginx/modules/*.so; do ln -s \"${i}\" /usr/share/nginx/modules/; done; \\\n\n\trunDeps=\"$( \\\n\t\tscanelf --needed --nobanner --format '%n#p' /usr/sbin/nginx /usr/local/modsecurity/lib/*.so /usr/lib/nginx/modules/*.so /tmp/envsubst \\\n\t\t\t| tr ',' '\\n' \\\n\t\t\t| sort -u \\\n\t\t\t| awk 'system(\"[ -e /usr/local/lib/\" $1 \" ]\") == 0 { next } { print \"so:\" $1 }' \\\n\t)\"; \\\n\tapk add --no-cache --virtual .nginx-rundeps $runDeps; \\\n\n    # Script to fix volumes permissions via sudo.\n    echo \"find ${APP_ROOT} ${FILES_DIR} -maxdepth 0 -uid 0 -type d -exec chown wodby:wodby {} +\" > /usr/local/bin/init_volumes; \\\n    chmod +x /usr/local/bin/init_volumes; \\\n\n    { \\\n        echo -n 'wodby ALL=(root) NOPASSWD:SETENV: ' ; \\\n        echo -n '/usr/local/bin/init_volumes, ' ; \\\n        echo '/usr/sbin/nginx' ; \\\n    } | tee /etc/sudoers.d/wodby; \\\n\n    chown wodby:wodby /usr/share/nginx/html/50x.html; \\\n\n    apk del --purge .nginx-build-deps .libmodsecurity-build-deps; \\\n    rm -rf \\\n        /tmp/* \\\n        /usr/local/modsecurity \\\n        /var/cache/apk/* ;\n\nUSER wodby\n\nCOPY bin /usr/local/bin\nCOPY templates /etc/gotpl/\nCOPY docker-entrypoint.sh /\n\nWORKDIR $APP_ROOT\nEXPOSE 80\n\nENTRYPOINT [\"/docker-entrypoint.sh\"]\nCMD [\"sudo\", \"nginx\"]\n"
}