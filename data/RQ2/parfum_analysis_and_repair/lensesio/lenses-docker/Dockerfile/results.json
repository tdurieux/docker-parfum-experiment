{
  "startTime": 1674251999440,
  "endTime": 1674252001049,
  "originalSmells": [
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 0,
        "lineEnd": 0,
        "columnStart": 4,
        "columnEnd": 60
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 66,
        "lineEnd": 71,
        "columnStart": 22,
        "columnEnd": 12
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# Lenses Archive\nARG LENSES_ARCHIVE=remote\nARG AD_URL=https://archive.lenses.io/lenses/4.3/lenses-4.3.8-linux64.tar.gz\n# Lenses Cli\nARG LENSESCLI_ARCHIVE=remote\nARG LC_VERSION=\"4.3.6\"\nARG LC_URL=\"https://archive.lenses.io/lenses/4.3/cli/lenses-cli-linux-amd64-$LC_VERSION.tar.gz\"\n\n# This is the default image we use for installing Lenses\nFROM alpine as archive_remote\nONBUILD ARG AD_UN\nONBUILD ARG AD_PW\nONBUILD ARG AD_URL\nONBUILD RUN apk add --no-cache wget \\\n        && echo \"progress = dot:giga\" | tee /etc/wgetrc \\\n        && mkdir -p /opt  \\\n        && echo \"$AD_URL $AD_FILENAME\" \\\n        && if [ -z \"$AD_URL\" ]; then exit 0; fi && wget $AD_UN $AD_PW \"$AD_URL\" -O /lenses.tgz \\\n        && tar xf /lenses.tgz -C /opt \\\n        && rm /lenses.tgz\n\n# This image gets Lenses from a local file instead of a remote URL\nFROM alpine as archive_local\nONBUILD ARG AD_FILENAME\nONBUILD RUN mkdir -p /opt\nONBUILD ADD $AD_FILENAME /opt\n\n# This image gets a custom Lenses frontend from a local file\nFROM archive_local as archive_local_with_ui\nONBUILD ARG UI_FILENAME\nONBUILD ADD $UI_FILENAME /opt\nONBUILD RUN rm -rf /opt/lenses/ui \\\n            && mv /opt/dist /opt/lenses/ui \\\n            && sed \\\n                 -e \"s/export LENSESUI_REVISION=.*/export LENSESUI_REVISION=$(cat /opt/lenses/ui/build.info | cut -f 2 -d ' ')/\" \\\n                 -i /opt/lenses/bin/lenses\n\n# This image is here to just trigger the build of any of the above 3 images\nFROM archive_${LENSES_ARCHIVE} as archive\n\n# This is the default image we use for installing lenses-cli\nFROM alpine as lenses_cli_remote\nONBUILD ARG CAD_UN\nONBUILD ARG CAD_PW\nONBUILD ARG LC_VERSION\nONBUILD ARG LC_URL\nONBUILD RUN wget $CAD_UN $CAD_PW \"$LC_URL\" -O /lenses-cli.tgz \\\n          && tar xzf /lenses-cli.tgz --strip-components=1 -C /usr/bin/ lenses-cli-linux-amd64-$LC_VERSION/lenses-cli \\\n          && rm -f /lenses-cli.tgz\n\n# This image gets Lenses from a local file instead of a remote URL\nFROM alpine as lenses_cli_local\nONBUILD ARG LC_FILENAME\nONBUILD RUN mkdir -p /lenses-cli\nONBUILD COPY $LC_FILENAME /lenses-cli.tgz\n \\\nRUN tar xzf /lenses-cli.tgz --strip-components=1 -C /usr/bin && rm /lenses-cli.tgzONBUILD\n\n# This image is here to just trigger the build of any of the above 3 images\nARG LENSESCLI_ARCHIVE\nFROM lenses_cli_${LENSESCLI_ARCHIVE} as lenses_cli\n\n# The final Lenses image\nFROM debian:bullseye\nMAINTAINER Marios Andreopoulos <marios@lenses.io>\n\n# Update, install tooling and some basic setup\nRUN apt-get update && apt-get install --no-install-recommends -y \\\n        curl \\\n        default-jre-headless \\\n        gosu \\\n        netcat \\\n        wget \\\n    && rm -rf /var/lib/apt/lists/* \\\n    && echo \"progress = dot:giga\" | tee /etc/wgetrc \\\n    && wget https://gitlab.com/andmarios/checkport/uploads/3903dcaeae16cd2d6156213d22f23509/checkport \\\n            -O /usr/local/bin/checkport \\\n    && wget https://github.com/Yelp/dumb-init/releases/download/v1.2.0/dumb-init_1.2.0_amd64 \\\n            -O /usr/local/bin/dumb-init \\\n    && chmod +755 /usr/local/bin/checkport /usr/local/bin/dumb-init \\\n    && echo 'export PS1=\"\\[\\033[1;31m\\]\\u\\[\\033[1;33m\\]@\\[\\033[1;34m\\]lenses \\[\\033[1;36m\\]\\W\\[\\033[1;0m\\] $ \"' \\\n            | tee -a /root/.bashrc >> /etc/bash.bashrc \\\n    && mkdir -p /mnt/settings /mnt/secrets\n\n# Add jmx_exporter\nARG FAST_DATA_AGENT_URL=https://archive.landoop.com/tools/fast_data_monitoring/fast_data_monitoring-2.1.tar.gz\nRUN mkdir -p /opt/landoop/ \\\n    && wget \"$FAST_DATA_AGENT_URL\" -O /fda.tgz \\\n    && tar xf /fda.tgz -C /opt/landoop \\\n    && rm /fda.tgz\n\n# Add fastdata-sd\nARG FASTDATA_SD_URL=https://archive.landoop.com/tools/fastdata-sd/fastdata-sd.tar.gz\nRUN wget \"$FASTDATA_SD_URL\" -O /fdsd.tgz \\\n    && tar xf /fdsd.tgz -C /usr/local/bin \\\n    && rm /fdsd.tgz\n\nADD setup.sh debug-setup.sh service-discovery.sh /usr/local/bin/\nRUN chmod +x /usr/local/bin/setup.sh /usr/local/bin/debug-setup.sh /usr/local/bin/service-discovery.sh\nCOPY /filesystem /\n\n# PLACEHOLDER: This line can be used to inject code if needed, please do not remove #\n\n# Add Lenses\nCOPY --from=archive /opt /opt\n\n# Add Lenses CLI\nARG LC_VERSION\nCOPY --from=lenses_cli /usr/bin/lenses-cli /usr/bin/lenses-cli\n\nARG BUILD_BRANCH\nARG BUILD_COMMIT\nARG BUILD_TIME\nARG DOCKER_REPO=local\nRUN grep 'export LENSES_REVISION'      /opt/lenses/bin/lenses | sed -e 's/export //' | tee /build.info \\\n    && grep 'export LENSESUI_REVISION' /opt/lenses/bin/lenses | sed -e 's/export //' | tee -a /build.info \\\n    && grep 'export LENSES_VERSION'    /opt/lenses/bin/lenses | sed -e 's/export //' | tee -a /build.info \\\n    && echo \"BUILD_BRANCH=${BUILD_BRANCH}\"  | tee -a /build.info \\\n    && echo \"BUILD_COMMIT=${BUILD_COMMIT}\"  | tee -a /build.info \\\n    && echo \"BUILD_TIME=${BUILD_TIME}\"      | tee -a /build.info \\\n    && echo \"DOCKER_REPO=${DOCKER_REPO}\"    | tee -a /build.info\n\nEXPOSE 9991\n\nWORKDIR /\nRUN mkdir -p /data /data/kafka-streams-state /data/log /data/plugins /data/storage \\\n    && chmod -R 777 /data\nVOLUME [\"/data/kafka-streams-state\", \"/data/log\", \"/data/plugins\", \"/data/storage\"]\n\nENTRYPOINT [\"/usr/local/bin/dumb-init\", \"--\"]\nCMD [\"/usr/local/bin/setup.sh\"]\n"
}