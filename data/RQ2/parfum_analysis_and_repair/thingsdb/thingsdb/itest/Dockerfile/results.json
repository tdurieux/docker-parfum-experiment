{
  "startTime": 1674251160409,
  "endTime": 1674251160891,
  "originalSmells": [
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 36,
        "lineEnd": 36,
        "columnStart": 4,
        "columnEnd": 35
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 2,
        "lineEnd": 8,
        "columnStart": 4,
        "columnEnd": 23
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 24,
        "lineEnd": 29,
        "columnStart": 4,
        "columnEnd": 20
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 2,
        "lineEnd": 8,
        "columnStart": 4,
        "columnEnd": 23
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 24,
        "lineEnd": 29,
        "columnStart": 4,
        "columnEnd": 20
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM ubuntu:20.04 as builder\nRUN apt-get update && \\\n    apt-get install --no-install-recommends -y \\\n        git \\\n        libuv1-dev \\\n        libpcre2-dev \\\n        libyajl-dev \\\n        libcurl4-nss-dev \\\n        build-essential && rm -rf /var/lib/apt/lists/*;\nRUN git clone https://github.com/cesbit/libcleri.git /tmp/libcleri && \\\n    cd /tmp/libcleri/Release && \\\n    make clean && \\\n    make && \\\n    make install\nCOPY ./main.c ./main.c\nCOPY ./src/ ./src/\nCOPY ./inc/ ./inc/\nCOPY ./Release/ ./Release/\nRUN cd ./Release && \\\n    make clean && \\\n    CFLAGS=\"-Werror -Winline\" make\n\nFROM python\nRUN apt-get update && \\\n    apt-get install --no-install-recommends -y \\\n        valgrind \\\n        libuv1 \\\n        libpcre2-8-0 \\\n        libyajl2 \\\n        libcurl3-nss && rm -rf /var/lib/apt/lists/*;\nCOPY --from=builder ./Release/thingsdb /Release/thingsdb\nCOPY --from=builder /usr/lib/libcleri* /usr/lib/\nCOPY ./itest/ /itest/\nCOPY ./inc/doc.h /inc/doc.h\nCOPY ./libcurl.supp /libcurl.supp\nWORKDIR /itest\nRUN pip install --no-cache-dir -r requirements.txt\nENV THINGSDB_BIN /Release/thingsdb\nCMD [ \"python\", \"run_all_tests.py\" ]\n"
}