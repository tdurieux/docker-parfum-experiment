{
  "startTime": 1674247032665,
  "endTime": 1674247038947,
  "originalSmells": [
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 13,
        "lineEnd": 13,
        "columnStart": 4,
        "columnEnd": 29
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 32,
        "lineEnd": 32,
        "columnStart": 4,
        "columnEnd": 30
      }
    },
    {
      "rule": "aptGetInstallUseY",
      "position": {
        "lineStart": 38,
        "lineEnd": 38,
        "columnStart": 4,
        "columnEnd": 27
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 6,
        "lineEnd": 6,
        "columnStart": 1,
        "columnEnd": 37
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 8,
        "lineEnd": 8,
        "columnStart": 1,
        "columnEnd": 23
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 10,
        "lineEnd": 10,
        "columnStart": 1,
        "columnEnd": 28
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 29,
        "lineEnd": 29,
        "columnStart": 4,
        "columnEnd": 61
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 38,
        "lineEnd": 38,
        "columnStart": 4,
        "columnEnd": 27
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 29,
        "lineEnd": 29,
        "columnStart": 4,
        "columnEnd": 61
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 38,
        "lineEnd": 38,
        "columnStart": 4,
        "columnEnd": 27
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 6,
        "lineEnd": 6,
        "columnStart": 1,
        "columnEnd": 37
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 8,
        "lineEnd": 8,
        "columnStart": 1,
        "columnEnd": 23
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 10,
        "lineEnd": 10,
        "columnStart": 1,
        "columnEnd": 28
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 29,
        "lineEnd": 29,
        "columnStart": 4,
        "columnEnd": 61
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 38,
        "lineEnd": 38,
        "columnStart": 4,
        "columnEnd": 27
      }
    }
  ],
  "repairedSmells": [
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 29,
        "lineEnd": 29,
        "columnStart": 4,
        "columnEnd": 85
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 38,
        "lineEnd": 38,
        "columnStart": 4,
        "columnEnd": 54
      }
    }
  ],
  "repairedDockerfile": "FROM ubuntu:latest\n# avr-gcc is using glibc which is not available in alpine => ubuntu\n\n# install ubuntu packages for platformio\nRUN apt-get update && \\\n\t# install python 2\n\tapt-get install --no-install-recommends -y python-pip python && \\\n\t# install git\n\tapt-get install --no-install-recommends -y git && \\\n\t# delivers lsusb for checking / troubleshooting usb ports\n\tapt-get install --no-install-recommends -y usbutils && rm -rf /var/lib/apt/lists/*;\n\n# install platformio\nRUN pip install --no-cache-dir -U platformio\n\n# clone repo\nRUN cd /home && \\\n\tgit clone https://github.com/grimmpp/audiobox-for-kids.git\n\n\n### BUILD CODE for Arduino Nano\n#\n# run platformio: download all dependencies and build projects\nRUN cd /home/audiobox-for-kids && pio run -v\n\n\n### Install google text to speech (mp3)\n#\n# install packages for google_speech\nRUN apt-get install --no-install-recommends -y python3 python3-pip sox libsox-fmt-mp3 && rm -rf /var/lib/apt/lists/*;\n#\n# install google's text to speech\nRUN pip3 install --no-cache-dir google_speech\n\n\n### Generate German System Sounds\n#\n# set language to German | needed for special characters\nRUN apt-get install -y --no-install-recommends locales && rm -rf /var/lib/apt/lists/*;\nRUN locale-gen de_DE\nRUN locale-gen de_DE.UTF-8\nENV LANG de_DE.UTF-8\nENV LANGUAGE de_DE:de\nENV LC_ALL de_DE.UTF-8\n\n# Generate German mp3-files\nRUN cd /home/audiobox-for-kids/systemSounds && \\\n\tchmod 777 ./createSystemSounds_google_de.sh && \\\n\t./createSystemSounds_google_de.sh\n\n# Generate English mp3-files\nRUN cd /home/audiobox-for-kids/systemSounds && \\\n\tchmod 777 ./createSystemSounds_google_en.sh && \\\n\t./createSystemSounds_google_en.sh\n\n\n### Change into this folder:\n## cd docker\n##\n### Run to build docker image:\n## docker build -t audiobox .\n##\n### Start container containing repo + built arduino SW + generated mp3 files:\n## docker run -it audiobox\n\n\n### if you want to upload the code to arduino run\n### if you use docker toolbox enable usb first in virtualbox in your VM settings. PIO will detect automatically the right usb port.\n##\n## docker run -it --privileged audiobox\n## Inside the container: cd /home/audiobox && pio run -v -t upload\n##\n### OR (the following starts the container, executes the pio upload command, and stops the container agian)\n##\n## docker run --privileged -w /home/audiobox audiobox pio run -v -t upload\n\n\n### alternatively use existing git repo from host.\n### The following starts the container and mounts your working dir from the host.:\n##\n## docker run -it -v /c/Users/User/Documents/AudioBoxForKids/AudioBoxForKids:/home/audiobox -w /home/audiobox audiobox\n"
}