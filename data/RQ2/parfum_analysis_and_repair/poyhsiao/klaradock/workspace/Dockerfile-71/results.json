{
  "startTime": 1674217752994,
  "endTime": 1674217754650,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 162,
        "lineEnd": 162,
        "columnStart": 4,
        "columnEnd": 43
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 228,
        "lineEnd": 228,
        "columnStart": 4,
        "columnEnd": 80
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 267,
        "lineEnd": 267,
        "columnStart": 8,
        "columnEnd": 50
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 269,
        "lineEnd": 269,
        "columnStart": 8,
        "columnEnd": 50
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 300,
        "lineEnd": 300,
        "columnStart": 4,
        "columnEnd": 121
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 511,
        "lineEnd": 511,
        "columnStart": 5,
        "columnEnd": 70
      }
    },
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 233,
        "lineEnd": 233,
        "columnStart": 8,
        "columnEnd": 41
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 446,
        "lineEnd": 446,
        "columnStart": 11,
        "columnEnd": 22
      }
    },
    {
      "rule": "aptGetInstallUseY",
      "position": {
        "lineStart": 165,
        "lineEnd": 165,
        "columnStart": 4,
        "columnEnd": 35
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 68,
        "lineEnd": 68,
        "columnStart": 2,
        "columnEnd": 44
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 80,
        "lineEnd": 81,
        "columnStart": 4,
        "columnEnd": 1
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 143,
        "lineEnd": 143,
        "columnStart": 4,
        "columnEnd": 45
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 165,
        "lineEnd": 165,
        "columnStart": 4,
        "columnEnd": 35
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 298,
        "lineEnd": 298,
        "columnStart": 4,
        "columnEnd": 32
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 329,
        "lineEnd": 329,
        "columnStart": 7,
        "columnEnd": 60
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 422,
        "lineEnd": 422,
        "columnStart": 8,
        "columnEnd": 127
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 535,
        "lineEnd": 535,
        "columnStart": 4,
        "columnEnd": 35
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 548,
        "lineEnd": 548,
        "columnStart": 4,
        "columnEnd": 40
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 80,
        "lineEnd": 81,
        "columnStart": 4,
        "columnEnd": 1
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 68,
        "lineEnd": 68,
        "columnStart": 2,
        "columnEnd": 44
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 80,
        "lineEnd": 81,
        "columnStart": 4,
        "columnEnd": 1
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 143,
        "lineEnd": 143,
        "columnStart": 4,
        "columnEnd": 45
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 165,
        "lineEnd": 165,
        "columnStart": 4,
        "columnEnd": 35
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 298,
        "lineEnd": 298,
        "columnStart": 4,
        "columnEnd": 32
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 329,
        "lineEnd": 329,
        "columnStart": 7,
        "columnEnd": 60
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 422,
        "lineEnd": 422,
        "columnStart": 8,
        "columnEnd": 127
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 535,
        "lineEnd": 535,
        "columnStart": 4,
        "columnEnd": 35
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 548,
        "lineEnd": 548,
        "columnStart": 4,
        "columnEnd": 40
      }
    }
  ],
  "repairedSmells": [
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 78,
        "lineEnd": 79,
        "columnStart": 4,
        "columnEnd": 1
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 298,
        "lineEnd": 298,
        "columnStart": 4,
        "columnEnd": 56
      }
    }
  ],
  "repairedDockerfile": "#\n#--------------------------------------------------------------------------\n# Image Setup\n#--------------------------------------------------------------------------\n#\n# To edit the 'workspace' base Image, visit its repository on Github\n#    https://github.com/Laradock/workspace\n#\n# To change its version, see the available Tags on the Docker Hub:\n#    https://hub.docker.com/r/laradock/workspace/tags/\n#\n# Note: Base Image name format {image-tag}-{php-version}\n#\n\nFROM laradock/workspace:1.8-71\n\nMAINTAINER Mahmoud Zalt <mahmoud@zalt.me>\n\n#\n#--------------------------------------------------------------------------\n# Mandatory Software's Installation\n#--------------------------------------------------------------------------\n#\n# Mandatory Software's such as (\"php7.1-cli\", \"git\", \"vim\", ....) are\n# installed on the base image 'laradock/workspace' image. If you want\n# to add more Software's or remove existing one, you need to edit the\n# base image (https://github.com/Laradock/workspace).\n#\n\n#\n#--------------------------------------------------------------------------\n# Optional Software's Installation\n#--------------------------------------------------------------------------\n#\n# Optional Software's will only be installed if you set them to `true`\n# in the `docker-compose.yml` before the build.\n# Example:\n#   - INSTALL_NODE=false\n#   - ...\n#\n\n#####################################\n# Non-Root User:\n#####################################\n\n# Add a non-root user to prevent files being created with root permissions on host machine.\nARG PUID=1000\nARG PGID=1000\n\nENV PUID ${PUID}\nENV PGID ${PGID}\n\nRUN groupadd -g ${PGID} laradock && \\\n    useradd -u ${PUID} -g laradock -m laradock && \\\n    apt-get update -yqq\n\n#####################################\n# SOAP:\n#####################################\nUSER root\n\nARG INSTALL_SOAP=false\nENV INSTALL_SOAP ${INSTALL_SOAP}\n\nRUN if [ ${INSTALL_SOAP} = true ]; then \\\n  add-apt-repository -y ppa:ondrej/php && \\\n  apt-get update -yqq && \\\n  apt-get -y --no-install-recommends install libxml2-dev php7.1-soap \\\n; rm -rf /var/lib/apt/lists/*; fi\n\n#####################################\n# PHP GMP\n#####################################\n\nARG INSTALL_GMP=false\nENV INSTALL_GMP ${INSTALL_GMP}\n\nRUN if [ ${INSTALL_GMP} = true ]; then \\\n    apt-get -y --no-install-recommends install php-gmp \\\n; rm -rf /var/lib/apt/lists/*; fi\n\n#####################################\n# Set Timezone\n#####################################\n\nARG TZ=UTC\nENV TZ ${TZ}\nRUN ln -snf /usr/share/zoneinfo/$TZ /etc/localtime && echo $TZ > /etc/timezone\n\n#####################################\n# Composer:\n#####################################\n\n# Add the composer.json\nCOPY ./composer.json /home/laradock/.composer/composer.json\n\n# Make sure that ~/.composer belongs to laradock\nRUN chown -R laradock:laradock /home/laradock/.composer\nUSER laradock\n\n# Check if global install need to be ran\nARG COMPOSER_GLOBAL_INSTALL=false\nENV COMPOSER_GLOBAL_INSTALL ${COMPOSER_GLOBAL_INSTALL}\nRUN if [ ${COMPOSER_GLOBAL_INSTALL} = true ]; then \\\n    # run the install\n    composer global install \\\n;fi\n\n#####################################\n# Crontab\n#####################################\nUSER root\n\nCOPY ./crontab /etc/cron.d\nRUN chmod -R 644 /etc/cron.d\n\n#####################################\n# User Aliases\n#####################################\n\nUSER laradock\nCOPY ./aliases.sh /home/laradock/aliases.sh\nRUN echo \"\" >> ~/.bashrc && \\\n    echo \"# Load Custom Aliases\" >> ~/.bashrc && \\\n    echo \"source /home/laradock/aliases.sh\" >> ~/.bashrc && \\\n    echo \"\" >> ~/.bashrc\n\nUSER root\nRUN echo \"\" >> ~/.bashrc && \\\n    echo \"# Load Custom Aliases\" >> ~/.bashrc && \\\n    echo \"source /home/laradock/aliases.sh\" >> ~/.bashrc && \\\n    echo \"\" >> ~/.bashrc\n\n#####################################\n# xDebug:\n#####################################\n\nARG INSTALL_XDEBUG=false\nRUN if [ ${INSTALL_XDEBUG} = true ]; then \\\n    apt-get update && \\\n    apt-get install --no-install-recommends -y --force-yes php-xdebug && \\\n    sed -i 's/^;//g' /etc/php/7.1/cli/conf.d/20-xdebug.ini && \\\n    echo \"alias phpunit='php -dzend_extension=xdebug.so /var/www/vendor/bin/phpunit'\" >> ~/.bashrc \\\n; rm -rf /var/lib/apt/lists/*; fi\n# ADD for REMOTE debugging\nCOPY ./xdebug.ini /etc/php/7.1/cli/conf.d/xdebug.ini\n\n#####################################\n# Blackfire:\n#####################################\n\nARG INSTALL_BLACKFIRE=false\nARG BLACKFIRE_CLIENT_ID\nARG BLACKFIRE_CLIENT_TOKEN\n\nENV BLACKFIRE_CLIENT_ID ${BLACKFIRE_CLIENT_ID}\nENV BLACKFIRE_CLIENT_TOKEN ${BLACKFIRE_CLIENT_TOKEN}\n\nRUN if [ ${INSTALL_XDEBUG} = false -a ${INSTALL_BLACKFIRE} = true ]; then \\\n    curl -f -L https://packagecloud.io/gpg.key | apt-key add - && \\\n    echo \"deb http://packages.blackfire.io/debian any main\" | tee /etc/apt/sources.list.d/blackfire.list && \\\n    apt-get update -yqq && \\\n    apt-get install -y --no-install-recommends blackfire-agent \\\n; rm -rf /var/lib/apt/lists/*; fi\n\n#####################################\n# ssh:\n#####################################\nARG INSTALL_WORKSPACE_SSH=false\nENV INSTALL_WORKSPACE_SSH ${INSTALL_WORKSPACE_SSH}\n\nADD insecure_id_rsa /tmp/id_rsa\nADD insecure_id_rsa.pub /tmp/id_rsa.pub\n\nRUN if [ ${INSTALL_WORKSPACE_SSH} = true ]; then \\\n    rm -f /etc/service/sshd/down && \\\n    cat /tmp/id_rsa.pub >> /root/.ssh/authorized_keys \\\n        && cat /tmp/id_rsa.pub >> /root/.ssh/id_rsa.pub \\\n        && cat /tmp/id_rsa >> /root/.ssh/id_rsa \\\n        && rm -f /tmp/id_rsa* \\\n        && chmod 644 /root/.ssh/authorized_keys /root/.ssh/id_rsa.pub \\\n    && chmod 400 /root/.ssh/id_rsa \\\n;fi\n\n#####################################\n# MongoDB:\n#####################################\n\n# Check if Mongo needs to be installed\nARG INSTALL_MONGO=false\nENV INSTALL_MONGO ${INSTALL_MONGO}\nRUN if [ ${INSTALL_MONGO} = true ]; then \\\n    # Install the mongodb extension\n    pecl install mongodb && \\\n    echo \"extension=mongodb.so\" >> /etc/php/7.1/cli/conf.d/30-mongodb.ini \\\n;fi\n\n#####################################\n# Drush:\n#####################################\nUSER root\nENV DRUSH_VERSION 8.1.2\nARG INSTALL_DRUSH=false\nENV INSTALL_DRUSH ${INSTALL_DRUSH}\nRUN if [ ${INSTALL_DRUSH} = true ]; then \\\n    # Install Drush 8 with the phar file.\n    curl -fsSL -o /usr/local/bin/drush https://github.com/drush-ops/drush/releases/download/$DRUSH_VERSION/drush.phar | bash && \\\n    chmod +x /usr/local/bin/drush && \\\n    drush core-status \\\n;fi\n\nUSER laradock\n\n#####################################\n# Node / NVM:\n#####################################\n\n# Check if NVM needs to be installed\nARG NODE_VERSION=stable\nENV NODE_VERSION ${NODE_VERSION}\nARG INSTALL_NODE=false\nENV INSTALL_NODE ${INSTALL_NODE}\nENV NVM_DIR /home/laradock/.nvm\nRUN if [ ${INSTALL_NODE} = true ]; then \\\n    curl -f -o- https://raw.githubusercontent.com/creationix/nvm/v0.33.1/install.sh | bash && \\\n        . $NVM_DIR/nvm.sh && \\\n        nvm install ${NODE_VERSION} && \\\n        nvm use ${NODE_VERSION} && \\\n        nvm alias ${NODE_VERSION} && \\\n        npm install -g gulp bower vue-cli \\\n; npm cache clean --force; fi\n\n# Wouldn't execute when added to the RUN statement in the above block\n# Source NVM when loading bash since ~/.profile isn't loaded on non-login shell\nRUN if [ ${INSTALL_NODE} = true ]; then \\\n    echo \"\" >> ~/.bashrc && \\\n    echo 'export NVM_DIR=\"$HOME/.nvm\"' >> ~/.bashrc && \\\n    echo '[ -s \"$NVM_DIR/nvm.sh\" ] && . \"$NVM_DIR/nvm.sh\"  # This loads nvm' >> ~/.bashrc \\\n;fi\n\n# Add NVM binaries to root's .bashrc\nUSER root\n\nRUN if [ ${INSTALL_NODE} = true ]; then \\\n    echo \"\" >> ~/.bashrc && \\\n    echo 'export NVM_DIR=\"/home/laradock/.nvm\"' >> ~/.bashrc && \\\n    echo '[ -s \"$NVM_DIR/nvm.sh\" ] && . \"$NVM_DIR/nvm.sh\"  # This loads nvm' >> ~/.bashrc \\\n;fi\n\n#####################################\n# YARN:\n#####################################\n\nUSER laradock\n\nARG INSTALL_YARN=false\nENV INSTALL_YARN ${INSTALL_YARN}\nARG YARN_VERSION=latest\nENV YARN_VERSION ${YARN_VERSION}\n\nRUN if [ ${INSTALL_YARN} = true ]; then \\\n    [ -s \"$NVM_DIR/nvm.sh\" ] && . \"$NVM_DIR/nvm.sh\" && \\\n    if [ ${YARN_VERSION} = \"latest\" ]; then \\\n        curl -f -o- -L https://yarnpkg.com/install.sh | bash; \\\n    else \\\n        curl -f -o- -L https://yarnpkg.com/install.sh | bash -s -- --version ${YARN_VERSION}; \\\n    fi && \\\n    echo \"\" >> ~/.bashrc && \\\n    echo 'export PATH=\"$HOME/.yarn/bin:$PATH\"' >> ~/.bashrc \\\n; else \\\n        curl -f -o- -L https://yarnpkg.com/install.sh | bash -s -- --version ${YARN_VERSION}; \\\n    fi \\\n\n\n fi\n\n# Add YARN binaries to root's .bashrc\nUSER root\n\nRUN if [ ${INSTALL_YARN} = true ]; then \\\n    echo \"\" >> ~/.bashrc && \\\n    echo 'export YARN_DIR=\"/home/laradock/.yarn\"' >> ~/.bashrc && \\\n    echo 'export PATH=\"$YARN_DIR/bin:$PATH\"' >> ~/.bashrc \\\n;fi\n\n#####################################\n# PHP Aerospike:\n#####################################\nUSER root\n\nARG INSTALL_AEROSPIKE=false\nENV INSTALL_AEROSPIKE ${INSTALL_AEROSPIKE}\n\n# Copy aerospike configration for remote debugging\nCOPY ./aerospike.ini /etc/php/7.1/cli/conf.d/aerospike.ini\n\nRUN if [ ${INSTALL_AEROSPIKE} = true ]; then \\\n    apt-get update -yqq && \\\n    apt-get -y --no-install-recommends install sudo wget && \\\n\n    # In -f ta l he php aerospike extension \\\n    cu l -L -o /tmp/aerospike-client \\\n    && mkdir -p aerospike-client-php \\\n    && tar -C aerospike-client-php -zxvf /tmp/aerospike-client-php.tar.gz --strip 1 \\\n    && ( \\\n        cd aerospike-client-php/src/aerospike \\\n        && phpize \\\n        && ./build.sh \\\n    \n    ) \\\n    ; rm -rf /var/lib/apt/lists/*; fi\n\nRUN if [ ${INSTALL_AEROSPIKE} = false ]; then \\\n    rm /etc/php/7.1/cli/conf.d/aerospike.ini \\\n;fi\n\n#####################################\n# PHP V8JS:\n#####################################\nUSER root\n\nARG INSTALL_V8JS=false\nENV INSTALL_V8JS ${INSTALL_V8JS}\n\nRUN if [ ${INSTALL_V8JS} = true ]; then \\\n    add-apt-repository -y ppa:pinepain/libv8-5.4 \\\n    && apt-get update -yqq \\\n    && apt-get install --no-install-recommends -y php-xml php-dev php-pear libv8-5.4 \\\n    && pecl install v8js \\\n    && echo \"extension=v8js.so\" >> /etc/php/7.1/cli/php.ini \\\n; rm -rf /var/lib/apt/lists/*; fi\n\n#####################################\n# Non-root user : PHPUnit path\n#####################################\n\n# add ./vendor/bin to non-root user's bashrc (needed for phpunit)\nUSER laradock\n\nRUN echo \"\" >> ~/.bashrc && \\\n    echo 'export PATH=\"/var/www/vendor/bin:$PATH\"' >> ~/.bashrc\n\n#####################################\n# Laravel Artisan Alias\n#####################################\nUSER root\n\nRUN echo \"\" >> ~/.bashrc && \\\n    echo 'alias art=\"php artisan\"' >> ~/.bashrc\n\n#####################################\n# Laravel Envoy:\n#####################################\nUSER laradock\n\nARG INSTALL_LARAVEL_ENVOY=true\nENV INSTALL_LARAVEL_ENVOY ${INSTALL_LARAVEL_ENVOY}\n\nRUN if [ ${INSTALL_LARAVEL_ENVOY} = true ]; then \\\n    # Install the Laravel Envoy\n    composer global require \"laravel/envoy=~1.0\" \\\n;fi\n\n#####################################\n# Deployer:\n#####################################\nUSER laradock\n\nARG INSTALL_DEPLOYER=false\nENV INSTALL_DEPLOYER ${INSTALL_DEPLOYER}\n\nRUN if [ ${INSTALL_DEPLOYER} = true ]; then \\\n    # Install the Deployer\n    composer global require \"deployer/deployer\" \\\n;fi\n\n#####################################\n# Linuxbrew:\n#####################################\nUSER root\n\nARG INSTALL_LINUXBREW=true\nENV INSTALL_LINUXBREW ${INSTALL_LINUXBREW}\n\nRUN if [ ${INSTALL_LINUXBREW} = true ]; then \\\n\n    # Preparation\n    apt-get upgrade -y && \\\n    apt-get install -y build-essential make cmake scons curl git \\\n      ruby autoconf automake autoconf-archive \\\n      gettext libtool flex bison \\\n      libbz2-dev libcurl4-openssl-dev \\\n      libexpat-dev libncurses-dev && \\\n\n    # Install the Linuxbrew\n    git clone --depth=1 https://github.com/Homebrew/linuxbrew.git ~/.linuxbrew && \\\n\n    echo \"\" >> ~/.bashrc && \\\n    echo 'export PKG_CONFIG_PATH\"=/usr/local/lib/pkgconfig:/usr/local/lib64/pkgconfig:/usr/lib64/pkgconfig:/usr/lib/pkgconfig:/usr/lib/x86_64-linux-gnu/pkgconfig:/usr/lib64/pkgconfig:/usr/share/pkgconfig:$PKG_CONFIG_PATH\"' >> ~/.bashrc && \\\n\n    # Setup linuxbrew\n    echo 'export LINUXBREWHOME=\"$HOME/.linuxbrew\"' >> ~/.bashrc && \\\n    echo 'export PATH=\"$LINUXBREWHOME/bin:$PATH\"' >> ~/.bashrc && \\\n    echo 'export MANPATH=\"$LINUXBREWHOME/man:$MANPATH\"' >> ~/.bashrc && \\\n    echo 'export PKG_CONFIG_PATH=\"$LINUXBREWHOME/lib64/pkgconfig:$LINUXBREWHOME/lib/pkgconfig:$PKG_CONFIG_PATH\"' >> ~/.bashrc && \\\n    echo 'export LD_LIBRARY_PATH=\"$LINUXBREWHOME/lib64:$LINUXBREWHOME/lib:$LD_LIBRARY_PATH\"' >> ~/.bashrc \\\n;fi\n\n#####################################\n# SQL SERVER:\n#####################################\nARG INSTALL_MSSQL=true\nENV INSTALL_MSSQL ${INSTALL_MSSQL}\n\nRUN if [ ${INSTALL_MSSQL} = true ]; then \\\n        cd / && \\\n        apt-get update -yqq && \\\n        apt-get install --no-install-recommends -y --force-yes wget apt-transport-https curl freetds-common libsybdb5 freetds-bin unixodbc unixodbc-dev && \\\n        \n    #####################################\n    #  The following steps were taken from\n    #  Microsoft's github account:\n    #  https://github.com/Microsoft/msphpsql/wiki/Dockerfile-for-getting-pdo_sqlsrv-for-PHP-7.0-on-Debian-in-3-ways\n    #####################################\n\n    # Add PHP 7 repository\n    # for De ia \\\n    d System upgrade\n        cd / && \\\n        ec o \"deb http://packages.dotdeb.org jessie all\" \\\n        | tee /etc/apt/ \\\n        && wget -qO- https://w \\\n        | pt-key add - \\\n            && apt-get update -yqq \\\n        && apt-get upgrade -qq && \\\n\n    stall UnixODBC \\\n    mpile odbc_config as it is not part of unixodbc package\n        cd / && \\\n        ap -get update -yqq && \\\n        ap -get install - \\\n        un xodbc libgs --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" 3 dbci st devscripts d \\\n        && dget -u -x http://http.debian.net/debia /p \\\n            && cd unixodbc-*/ \\\n        && ./configure && make && make install \\\n        && cp -v ./exe/odbc_config \\\n       \n    # Fake uname for install.sh\n        printf '#!/bin/bash\\nif [ \"$*\" == \"-p\" ]; then echo \"x86_64\"; else /bin/uname \"$@\"; fi' \\\n        | te  / \\\n        && chmod +x /usr/local/bin/uname && \\\n\n    cr soft ODBC Driver 13 for Linux \\\n    te  There's a copy \\\n        cd / && \\\n        wg t -nv -O msodbcsql-13.0.0.0.tar.gz \\\n        \"h tps://meetsstorenew.blob.core.w \\\n        && tar -xf msodbcsql-13.0.0.0.tar.gz \\\n            && cd msodbcsql-*/ \\\n        && ldd lib64/libmsodbcsql-13.0.so.0.0 \\\n        && ./install.sh install --accept-license \\\n        && ls -l /opt/microsoft/msodbcsql/ \\\n        && odbcinst -q -d -n OD \\\n\n        \n    #####################################\n    # Install sqlsrv y pdo_sqlsrv\n    # extensions: \\\n    ## ################################## \\\n\n    pe l install sqlsrv-4.0.8 && \\\n    pe l install pdo_sqlsrv-4.0.8 && \\\n    ; rm -rf /var/lib/apt/lists/*; fi\n\n#####################################\n# Minio:\n#####################################\nUSER root\nARG INSTALL_MC=false\nENV INSTALL_MC ${INSTALL_MC}\n\nCOPY mc/config.json /root/.mc/config.json\n\nRUN if [ ${INSTALL_MC} = true ]; then\\\n    curl -fsSL -o /usr/local/bin/mc https://dl.minio.io/client/mc/release/linux-amd64/mc && \\\n    chmod +x /usr/local/bin/mc \\\n;fi\n\n#####################################\n# Symfony:\n#####################################\nUSER root\nARG INSTALL_SYMFONY=false\nENV INSTALL_SYMFONY ${INSTALL_SYMFONY}\nRUN if [ ${INSTALL_SYMFONY} = true ]; then \\\n\n  mk ir - -f  /us /local/bin \\\n  && curl -LsS https://symfony.com/in \\\n  && chmod a+x /usr/lo\n  \\\n  # Symfony 3 alias \\\n\n\n\n  ; fi\n\n#####################################\n# MySQL client\n#####################################\nUSER root\n\nARG INSTALL_MYSQL_CLIENT=false\nENV INSTALL_MYSQL_CLIENT ${INSTALL_MYSQL_CLIENT}\n\nRUN if [ ${INSTALL_MYSQL_CLIENT} = true ]; then \\\n    apt-get update && \\\n    apt-get install --no-install-recommends -y mysql-client \\\n; rm -rf /var/lib/apt/lists/*; fi\n\n#####################################\n# PostgreSQL client\n#####################################\nUSER root\n\nARG INSTALL_PGSQL_CLIENT=false\nENV INSTALL_PGSQL_CLIENT ${INSTALL_PGSQL_CLIENT}\n\nRUN if [ ${INSTALL_PGSQL_CLIENT} = true ]; then \\\n    apt-get update && \\\n    apt-get install --no-install-recommends -y postgresql-client \\\n; rm -rf /var/lib/apt/lists/*; fi\n\n#\n#--------------------------------------------------------------------------\n# Final Touch\n#--------------------------------------------------------------------------\n#\n\n# Clean up\nUSER root\nRUN apt-get clean && \\\n    rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*\n\n# Set default work directory\nWORKDIR /var/www\n"
}