diff --git a/Users/tdurieux/git/dinghy-experiment/data/evaluation/dockerfiles/poyhsiao/klaradock/php-fpm/Dockerfile-70 b/Users/tdurieux/git/dinghy-experiment/data/evaluation/dockerfile_repair_results/poyhsiao/klaradock/php-fpm/Dockerfile-70/repaired.Dockerfile
index 1dfa189..329dbd8 100644
--- a/Users/tdurieux/git/dinghy-experiment/data/evaluation/dockerfiles/poyhsiao/klaradock/php-fpm/Dockerfile-70
+++ b/Users/tdurieux/git/dinghy-experiment/data/evaluation/dockerfile_repair_results/poyhsiao/klaradock/php-fpm/Dockerfile-70/repaired.Dockerfile
@@ -44,11 +44,10 @@ MAINTAINER Mahmoud Zalt <mahmoud@zalt.me>
 
 ARG INSTALL_SOAP=false
 RUN if [ ${INSTALL_SOAP} = true ]; then \
-    # Install the soap extension
     apt-get update -yqq && \
-    apt-get -y install libxml2-dev php-soap && \
+    apt-get -y --no-install-recommends install libxml2-dev php-soap && \
     docker-php-ext-install soap \
-;fi
+; rm -rf /var/lib/apt/lists/*; fi
 
 #####################################
 # PHP GMP
@@ -58,13 +57,12 @@ ARG INSTALL_GMP=false
 ENV INSTALL_GMP ${INSTALL_GMP}
 
 RUN if [ ${INSTALL_GMP} = true ]; then \
-    # Install GMP extension
     apt-get update -yqq && \
-    apt-get -y install libgmp-dev && \
+    apt-get -y --no-install-recommends install libgmp-dev && \
     docker-php-ext-configure gmp && \
     docker-php-ext-install gmp && \
     docker-php-ext-enable gmp \
-;fi
+; rm -rf /var/lib/apt/lists/*; fi
 
 #####################################
 # xDebug:
@@ -87,11 +85,11 @@ COPY ./xdebug.ini /usr/local/etc/php/conf.d/xdebug.ini
 ARG INSTALL_BLACKFIRE=false
 RUN if [ ${INSTALL_XDEBUG} = false -a ${INSTALL_BLACKFIRE} = true ]; then \
     version=$(php -r "echo PHP_MAJOR_VERSION.PHP_MINOR_VERSION;") \
-    && curl -A "Docker" -o /tmp/blackfire-probe.tar.gz -D - -L -s https://blackfire.io/api/v1/releases/probe/php/linux/amd64/$version \
+    && curl -f -A "Docker" -o /tmp/blackfire-probe.tar.gz -D - -L -s https://blackfire.io/api/v1/releases/probe/php/linux/amd64/$version \
     && tar zxpf /tmp/blackfire-probe.tar.gz -C /tmp \
     && mv /tmp/blackfire-*.so $(php -r "echo ini_get('extension_dir');")/blackfire.so \
     && printf "extension=blackfire.so\nblackfire.agent_socket=tcp://blackfire:8707\n" > $PHP_INI_DIR/conf.d/blackfire.ini \
-;fi
+; rm /tmp/blackfire-probe.tar.gzfi
 
 #####################################
 # PHP REDIS EXTENSION FOR PHP 7
@@ -154,21 +152,19 @@ RUN if [ ${INSTALL_BCMATH} = true ]; then \
 
 ARG INSTALL_MEMCACHED=false
 RUN if [ ${INSTALL_MEMCACHED} = true ]; then \
-    # Install the php memcached extension
-    curl -L -o /tmp/memcached.tar.gz "https://github.com/php-memcached-dev/php-memcached/archive/php7.tar.gz" \
+    curl -f -L -o /tmp/memcached.tar.gz "https://github.com/php-memcached-dev/php-memcached/archive/php7.tar.gz" \
     && mkdir -p memcached \
     && tar -C memcached -zxvf /tmp/memcached.tar.gz --strip 1 \
-    && ( \
-        cd memcached \
+    && ( cd memcached \
         && phpize \
-        && ./configure \
+        && ./configure --build="$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)" \
         && make -j$(nproc) \
-        && make install \
-    ) \
+        && make install) \
+
     && rm -r memcached \
     && rm /tmp/memcached.tar.gz \
     && docker-php-ext-enable memcached \
-;fi
+; fi
 
 #####################################
 # Exif:
@@ -189,8 +185,7 @@ ENV INSTALL_AEROSPIKE ${INSTALL_AEROSPIKE}
 # Copy aerospike configration for remote debugging
 COPY ./aerospike.ini /usr/local/etc/php/conf.d/aerospike.ini
 RUN if [ ${INSTALL_AEROSPIKE} = true ]; then \
-    # Install the php aerospike extension
-    curl -L -o /tmp/aerospike-client-php.tar.gz "https://github.com/aerospike/aerospike-client-php/archive/3.4.14.tar.gz" \
+    curl -f -L -o /tmp/aerospike-client-php.tar.gz "https://github.com/aerospike/aerospike-client-php/archive/3.4.14.tar.gz" \
     && mkdir -p aerospike-client-php \
     && tar -C aerospike-client-php -zxvf /tmp/aerospike-client-php.tar.gz --strip 1 \
     && ( \
@@ -201,7 +196,7 @@ RUN if [ ${INSTALL_AEROSPIKE} = true ]; then \
     ) \
     && rm /tmp/aerospike-client-php.tar.gz \
     && docker-php-ext-enable aerospike \
-;fi
+; fi
 
 #####################################
 # Opcache:
@@ -239,12 +234,11 @@ RUN if [ ${INSTALL_TOKENIZER} = true ]; then \
 
 ARG INSTALL_INTL=false
 RUN if [ ${INSTALL_INTL} = true ]; then \
-    # Install intl and requirements
     apt-get update -yqq && \
-    apt-get install -y zlib1g-dev libicu-dev g++ && \
+    apt-get install --no-install-recommends -y zlib1g-dev libicu-dev g++ && \
     docker-php-ext-configure intl && \
     docker-php-ext-install intl \
-;fi
+; rm -rf /var/lib/apt/lists/*; fi
 
 #####################################
 # GHOSTSCRIPT:
@@ -252,13 +246,11 @@ RUN if [ ${INSTALL_INTL} = true ]; then \
 
 ARG INSTALL_GHOSTSCRIPT=false
 RUN if [ ${INSTALL_GHOSTSCRIPT} = true ]; then \
-    # Install the ghostscript extension
-    # for PDF editing
     apt-get update -yqq \
-    && apt-get install -y \
+    && apt-get install --no-install-recommends -y \
     poppler-utils \
     ghostscript \
-;fi
+; rm -rf /var/lib/apt/lists/*; fi
 
 #####################################
 # LDAP:
@@ -267,10 +259,10 @@ RUN if [ ${INSTALL_GHOSTSCRIPT} = true ]; then \
 ARG INSTALL_LDAP=false
 RUN if [ ${INSTALL_LDAP} = true ]; then \
     apt-get update -yqq && \
-    apt-get install -y libldap2-dev && \
+    apt-get install --no-install-recommends -y libldap2-dev && \
     docker-php-ext-configure ldap --with-libdir=lib/x86_64-linux-gnu/ && \
     docker-php-ext-install ldap \
-;fi
+; rm -rf /var/lib/apt/lists/*; fi
 
 #####################################
 # ImageMagick
@@ -278,27 +270,26 @@ RUN if [ ${INSTALL_LDAP} = true ]; then \
 
 ARG INSTALL_IMAGICK=false
 RUN if [ ${INSTALL_IMAGICK} ]; then \
-  # Add source src
   echo "deb-src http://deb.debian.org/debian jessie main" >> /etc/apt/sources.list && \
   echo "deb-src http://deb.debian.org/debian jessie-updates main" >> /etc/apt/sources.list && \
   echo "deb-src http://security.debian.org jessie/updates main" >> /etc/apt/sources.list && \
   # Update and build required
   apt-get update && \
   apt-get build-dep imagemagick -y && \
-  apt-get install libwebp-dev -y && \
+  apt-get install --no-install-recommends libwebp-dev -y && \
   # Ready and go
   mkdir /tmp/imagemagick && \
   cd /tmp/imagemagick && \
-  curl -L -o ImageMagick.tar.gz http://www.imagemagick.org/download/ImageMagick.tar.gz && \
+  curl -f -L -o ImageMagick.tar.gz https://www.imagemagick.org/download/ImageMagick.tar.gz && \
   tar xf ImageMagick*.tar.gz && \
   cd ImageMagic* && \
-  ./configure --prefix=/usr --without-x && \
+  ./configure --build="$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)" --prefix=/usr --without-x && \
   make && \
   make install && \
   # Install php ext
   pecl install imagick && \
   docker-php-ext-enable imagick \
-;fi
+; rm ImageMagick*.tar.gz rm -rf /var/lib/apt/lists/*; fi
 
 #####################################
 # SQL SERVER:
@@ -307,11 +298,8 @@ ARG INSTALL_MSSQL=false
 ENV INSTALL_MSSQL ${INSTALL_MSSQL}
 
 RUN if [ ${INSTALL_MSSQL} = true ]; then \
-    #####################################
-    # Install Depenencies:
-    #####################################
         apt-get update -yqq && \
-        apt-get install -y --force-yes wget apt-transport-https curl freetds-common libsybdb5 freetds-bin unixodbc unixodbc-dev && \
+        apt-get install --no-install-recommends -y --force-yes wget apt-transport-https curl freetds-common libsybdb5 freetds-bin unixodbc unixodbc-dev && \
 
     #####################################
     #  The following steps were taken from
@@ -332,11 +320,11 @@ RUN if [ ${INSTALL_MSSQL} = true ]; then \
     # Install UnixODBC
     # Compile odbc_config as it is not part of unixodbc package
         apt-get update -yqq && \
-        apt-get install -y whiptail \
+        apt-get install --no-install-recommends -y whiptail \
         unixodbc libgss3 odbcinst devscripts debhelper dh-exec dh-autoreconf libreadline-dev libltdl-dev \
         && dget -u -x http://http.debian.net/debian/pool/main/u/unixodbc/unixodbc_2.3.1-3.dsc \
         && cd unixodbc-*/ \
-        && ./configure && make && make install \
+        && ./configure --build="$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)" && make && make install \
         && cp -v ./exe/odbc_config /usr/local/bin/ && \
 
     # Fake uname for install.sh
@@ -368,12 +356,12 @@ RUN if [ ${INSTALL_MSSQL} = true ]; then \
     # Set locales for the container
     #####################################
 
-    apt-get install -y locales \
+    apt-get install --no-install-recommends -y locales \
     && echo "en_US.UTF-8 UTF-8" > /etc/locale.gen \
     && locale-gen \
     && echo "extension=sqlsrv.so" > /usr/local/etc/php/conf.d/20-sqlsrv.ini \
     && echo "extension=pdo_sqlsrv.so" > /usr/local/etc/php/conf.d/20-pdo_sqlsrv.ini \
-;fi
+; rm msodbcsql-13.0.0.0.tar.gz rm -rf /var/lib/apt/lists/*; fi
 
 #
 #--------------------------------------------------------------------------