{
  "startTime": 1674249100204,
  "endTime": 1674249102098,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 89,
        "lineEnd": 89,
        "columnStart": 7,
        "columnEnd": 133
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 157,
        "lineEnd": 157,
        "columnStart": 4,
        "columnEnd": 109
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 192,
        "lineEnd": 192,
        "columnStart": 4,
        "columnEnd": 121
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 291,
        "lineEnd": 291,
        "columnStart": 2,
        "columnEnd": 86
      }
    },
    {
      "rule": "curlUseHttpsUrl",
      "position": {
        "lineStart": 291,
        "lineEnd": 291,
        "columnStart": 2,
        "columnEnd": 86
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 163,
        "lineEnd": 163,
        "columnStart": 11,
        "columnEnd": 22
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 294,
        "lineEnd": 294,
        "columnStart": 2,
        "columnEnd": 39
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 338,
        "lineEnd": 338,
        "columnStart": 11,
        "columnEnd": 22
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 90,
        "lineEnd": 90,
        "columnStart": 7,
        "columnEnd": 51
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 292,
        "lineEnd": 292,
        "columnStart": 2,
        "columnEnd": 28
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 350,
        "lineEnd": 350,
        "columnStart": 11,
        "columnEnd": 44
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 48,
        "lineEnd": 48,
        "columnStart": 4,
        "columnEnd": 43
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 62,
        "lineEnd": 62,
        "columnStart": 4,
        "columnEnd": 33
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 243,
        "lineEnd": 243,
        "columnStart": 4,
        "columnEnd": 48
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 257,
        "lineEnd": 259,
        "columnStart": 7,
        "columnEnd": 15
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 269,
        "lineEnd": 269,
        "columnStart": 4,
        "columnEnd": 35
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 287,
        "lineEnd": 287,
        "columnStart": 2,
        "columnEnd": 32
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 313,
        "lineEnd": 313,
        "columnStart": 8,
        "columnEnd": 127
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 334,
        "lineEnd": 335,
        "columnStart": 8,
        "columnEnd": 104
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 370,
        "lineEnd": 370,
        "columnStart": 4,
        "columnEnd": 30
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 48,
        "lineEnd": 48,
        "columnStart": 4,
        "columnEnd": 43
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 62,
        "lineEnd": 62,
        "columnStart": 4,
        "columnEnd": 33
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 243,
        "lineEnd": 243,
        "columnStart": 4,
        "columnEnd": 48
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 257,
        "lineEnd": 259,
        "columnStart": 7,
        "columnEnd": 15
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 269,
        "lineEnd": 269,
        "columnStart": 4,
        "columnEnd": 35
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 287,
        "lineEnd": 287,
        "columnStart": 2,
        "columnEnd": 32
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 313,
        "lineEnd": 313,
        "columnStart": 8,
        "columnEnd": 127
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 334,
        "lineEnd": 335,
        "columnStart": 8,
        "columnEnd": 104
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 370,
        "lineEnd": 370,
        "columnStart": 4,
        "columnEnd": 30
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "#\n#--------------------------------------------------------------------------\n# Image Setup\n#--------------------------------------------------------------------------\n#\n# To edit the 'php-fpm' base Image, visit its repository on Github\n#    https://github.com/Laradock/php-fpm\n#\n# To change its version, see the available Tags on the Docker Hub:\n#    https://hub.docker.com/r/laradock/php-fpm/tags/\n#\n# Note: Base Image name format {image-tag}-{php-version}\n#\n\nFROM laradock/php-fpm:1.4-70\n\nMAINTAINER Mahmoud Zalt <mahmoud@zalt.me>\n\n#\n#--------------------------------------------------------------------------\n# Mandatory Software's Installation\n#--------------------------------------------------------------------------\n#\n# Mandatory Software's such as (\"mcrypt\", \"pdo_mysql\", \"libssl-dev\", ....)\n# are installed on the base image 'laradock/php-fpm' image. If you want\n# to add more Software's or remove existing one, you need to edit the\n# base image (https://github.com/Laradock/php-fpm).\n#\n\n#\n#--------------------------------------------------------------------------\n# Optional Software's Installation\n#--------------------------------------------------------------------------\n#\n# Optional Software's will only be installed if you set them to `true`\n# in the `docker-compose.yml` before the build.\n# Example:\n#   - INSTALL_ZIP_ARCHIVE=true\n#\n\n#####################################\n# SOAP:\n#####################################\n\nARG INSTALL_SOAP=false\nRUN if [ ${INSTALL_SOAP} = true ]; then \\\n    apt-get update -yqq && \\\n    apt-get -y --no-install-recommends install libxml2-dev php-soap && \\\n    docker-php-ext-install soap \\\n; rm -rf /var/lib/apt/lists/*; fi\n\n#####################################\n# PHP GMP\n#####################################\n\nARG INSTALL_GMP=false\nENV INSTALL_GMP ${INSTALL_GMP}\n\nRUN if [ ${INSTALL_GMP} = true ]; then \\\n    apt-get update -yqq && \\\n    apt-get -y --no-install-recommends install libgmp-dev && \\\n    docker-php-ext-configure gmp && \\\n    docker-php-ext-install gmp && \\\n    docker-php-ext-enable gmp \\\n; rm -rf /var/lib/apt/lists/*; fi\n\n#####################################\n# xDebug:\n#####################################\n\nARG INSTALL_XDEBUG=false\nRUN if [ ${INSTALL_XDEBUG} = true ]; then \\\n    # Install the xdebug extension\n    pecl install xdebug && \\\n    docker-php-ext-enable xdebug \\\n;fi\n\n# Copy xdebug configration for remote debugging\nCOPY ./xdebug.ini /usr/local/etc/php/conf.d/xdebug.ini\n\n#####################################\n# Blackfire:\n#####################################\n\nARG INSTALL_BLACKFIRE=false\nRUN if [ ${INSTALL_XDEBUG} = false -a ${INSTALL_BLACKFIRE} = true ]; then \\\n    version=$(php -r \"echo PHP_MAJOR_VERSION.PHP_MINOR_VERSION;\") \\\n    && curl -f -A \"Docker\" -o /tmp/blackfire-probe.tar.gz -D - -L -s https://blackfire.io/api/v1/releases/probe/php/linux/amd64/$version \\\n    && tar zxpf /tmp/blackfire-probe.tar.gz -C /tmp \\\n    && mv /tmp/blackfire-*.so $(php -r \"echo ini_get('extension_dir');\")/blackfire.so \\\n    && printf \"extension=blackfire.so\\nblackfire.agent_socket=tcp://blackfire:8707\\n\" > $PHP_INI_DIR/conf.d/blackfire.ini \\\n; rm /tmp/blackfire-probe.tar.gzfi\n\n#####################################\n# PHP REDIS EXTENSION FOR PHP 7\n#####################################\n\nARG INSTALL_PHPREDIS=false\nRUN if [ ${INSTALL_PHPREDIS} = true ]; then \\\n    # Install Php Redis Extension\n    pecl install -o -f redis \\\n    &&  rm -rf /tmp/pear \\\n    &&  docker-php-ext-enable redis \\\n;fi\n\n#####################################\n# Swoole EXTENSION FOR PHP 7\n#####################################\n\nARG INSTALL_SWOOLE=false\nRUN if [ ${INSTALL_SWOOLE} = true ]; then \\\n    # Install Php Swoole Extension\n    pecl install swoole \\\n    &&  docker-php-ext-enable swoole \\\n;fi\n\n#####################################\n# MongoDB:\n#####################################\n\nARG INSTALL_MONGO=false\n\nRUN if [ ${INSTALL_MONGO} = true ]; then \\\n    # Install the mongodb extension\n    pecl install mongodb && \\\n    docker-php-ext-enable mongodb \\\n;fi\n\n#####################################\n# ZipArchive:\n#####################################\n\nARG INSTALL_ZIP_ARCHIVE=false\nRUN if [ ${INSTALL_ZIP_ARCHIVE} = true ]; then \\\n    # Install the zip extension\n    docker-php-ext-install zip \\\n;fi\n\n#####################################\n# bcmath:\n#####################################\n\nARG INSTALL_BCMATH=false\nRUN if [ ${INSTALL_BCMATH} = true ]; then \\\n    # Install the bcmath extension\n    docker-php-ext-install bcmath \\\n;fi\n\n#####################################\n# PHP Memcached:\n#####################################\n\nARG INSTALL_MEMCACHED=false\nRUN if [ ${INSTALL_MEMCACHED} = true ]; then \\\n    curl -f -L -o /tmp/memcached.tar.gz \"https://github.com/php-memcached-dev/php-memcached/archive/php7.tar.gz\" \\\n    && mkdir -p memcached \\\n    && tar -C memcached -zxvf /tmp/memcached.tar.gz --strip 1 \\\n    && ( cd memcached \\\n        && phpize \\\n        && ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" \\\n        && make -j$(nproc) \\\n        && make install) \\\n\n    && rm -r memcached \\\n    && rm /tmp/memcached.tar.gz \\\n    && docker-php-ext-enable memcached \\\n; fi\n\n#####################################\n# Exif:\n#####################################\n\nARG INSTALL_EXIF=false\nRUN if [ ${INSTALL_EXIF} = true ]; then \\\n    # Enable Exif PHP extentions requirements\n    docker-php-ext-install exif \\\n;fi\n\n#####################################\n# PHP Aerospike:\n#####################################\n\nARG INSTALL_AEROSPIKE=false\nENV INSTALL_AEROSPIKE ${INSTALL_AEROSPIKE}\n# Copy aerospike configration for remote debugging\nCOPY ./aerospike.ini /usr/local/etc/php/conf.d/aerospike.ini\nRUN if [ ${INSTALL_AEROSPIKE} = true ]; then \\\n    curl -f -L -o /tmp/aerospike-client-php.tar.gz \"https://github.com/aerospike/aerospike-client-php/archive/3.4.14.tar.gz\" \\\n    && mkdir -p aerospike-client-php \\\n    && tar -C aerospike-client-php -zxvf /tmp/aerospike-client-php.tar.gz --strip 1 \\\n    && ( \\\n        cd aerospike-client-php/src/aerospike \\\n        && phpize \\\n        && ./build.sh \\\n        && make install \\\n    ) \\\n    && rm /tmp/aerospike-client-php.tar.gz \\\n    && docker-php-ext-enable aerospike \\\n; fi\n\n#####################################\n# Opcache:\n#####################################\n\nARG INSTALL_OPCACHE=false\nRUN if [ ${INSTALL_OPCACHE} = true ]; then \\\n    docker-php-ext-install opcache \\\n;fi\n\n# Copy opcache configration\nCOPY ./opcache.ini /usr/local/etc/php/conf.d/opcache.ini\n\n#####################################\n# Mysqli Modifications:\n#####################################\n\nARG INSTALL_MYSQLI=false\nRUN if [ ${INSTALL_MYSQLI} = true ]; then \\\n    docker-php-ext-install mysqli \\\n;fi\n\n#####################################\n# Tokenizer Modifications:\n#####################################\n\nARG INSTALL_TOKENIZER=false\nRUN if [ ${INSTALL_TOKENIZER} = true ]; then \\\n    docker-php-ext-install tokenizer \\\n;fi\n\n#####################################\n# Human Language and Character Encoding Support:\n#####################################\n\nARG INSTALL_INTL=false\nRUN if [ ${INSTALL_INTL} = true ]; then \\\n    apt-get update -yqq && \\\n    apt-get install --no-install-recommends -y zlib1g-dev libicu-dev g++ && \\\n    docker-php-ext-configure intl && \\\n    docker-php-ext-install intl \\\n; rm -rf /var/lib/apt/lists/*; fi\n\n#####################################\n# GHOSTSCRIPT:\n#####################################\n\nARG INSTALL_GHOSTSCRIPT=false\nRUN if [ ${INSTALL_GHOSTSCRIPT} = true ]; then \\\n    apt-get update -yqq \\\n    && apt-get install --no-install-recommends -y \\\n    poppler-utils \\\n    ghostscript \\\n; rm -rf /var/lib/apt/lists/*; fi\n\n#####################################\n# LDAP:\n#####################################\n\nARG INSTALL_LDAP=false\nRUN if [ ${INSTALL_LDAP} = true ]; then \\\n    apt-get update -yqq && \\\n    apt-get install --no-install-recommends -y libldap2-dev && \\\n    docker-php-ext-configure ldap --with-libdir=lib/x86_64-linux-gnu/ && \\\n    docker-php-ext-install ldap \\\n; rm -rf /var/lib/apt/lists/*; fi\n\n#####################################\n# ImageMagick\n#####################################\n\nARG INSTALL_IMAGICK=false\nRUN if [ ${INSTALL_IMAGICK} ]; then \\\n  echo \"deb-src http://deb.debian.org/debian jessie main\" >> /etc/apt/sources.list && \\\n  echo \"deb-src http://deb.debian.org/debian jessie-updates main\" >> /etc/apt/sources.list && \\\n  echo \"deb-src http://security.debian.org jessie/updates main\" >> /etc/apt/sources.list && \\\n  # Update and build required\n  apt-get update && \\\n  apt-get build-dep imagemagick -y && \\\n  apt-get install --no-install-recommends libwebp-dev -y && \\\n  # Ready and go\n  mkdir /tmp/imagemagick && \\\n  cd /tmp/imagemagick && \\\n  curl -f -L -o ImageMagick.tar.gz https://www.imagemagick.org/download/ImageMagick.tar.gz && \\\n  tar xf ImageMagick*.tar.gz && \\\n  cd ImageMagic* && \\\n  ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --prefix=/usr --without-x && \\\n  make && \\\n  make install && \\\n  # Install php ext\n  pecl install imagick && \\\n  docker-php-ext-enable imagick \\\n; rm ImageMagick*.tar.gz rm -rf /var/lib/apt/lists/*; fi\n\n#####################################\n# SQL SERVER:\n#####################################\nARG INSTALL_MSSQL=false\nENV INSTALL_MSSQL ${INSTALL_MSSQL}\n\nRUN if [ ${INSTALL_MSSQL} = true ]; then \\\n        apt-get update -yqq && \\\n        apt-get install --no-install-recommends -y --force-yes wget apt-transport-https curl freetds-common libsybdb5 freetds-bin unixodbc unixodbc-dev && \\\n\n    #####################################\n    #  The following steps were taken from\n    #  Microsoft's github account:\n    #  https://github.com/Microsoft/msphpsql/wiki/Dockerfile-for-getting-pdo_sqlsrv-for-PHP-7.0-on-Debian-in-3-ways\n    #####################################\n\n    # Add PHP 7 repository\n    # for Debian jessie\n    # And System upgrade\n        echo \"deb http://packages.dotdeb.org jessie all\" \\\n        | tee /etc/apt/sources.list.d/dotdeb.list \\\n        && wget -qO- https://www.dotdeb.org/dotdeb.gpg \\\n        | apt-key add - \\\n        && apt-get update -yqq \\\n        && apt-get upgrade -qq && \\\n\n    # Install UnixODBC\n    # Compile odbc_config as it is not part of unixodbc package\n        apt-get update -yqq && \\\n        apt-get install --no-install-recommends -y whiptail \\\n        unixodbc libgss3 odbcinst devscripts debhelper dh-exec dh-autoreconf libreadline-dev libltdl-dev \\\n        && dget -u -x http://http.debian.net/debian/pool/main/u/unixodbc/unixodbc_2.3.1-3.dsc \\\n        && cd unixodbc-*/ \\\n        && ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" && make && make install \\\n        && cp -v ./exe/odbc_config /usr/local/bin/ && \\\n\n    # Fake uname for install.sh\n        printf '#!/bin/bash\\nif [ \"$*\" == \"-p\" ]; then echo \"x86_64\"; else /bin/uname \"$@\"; fi' \\\n        | tee /usr/local/bin/uname \\\n        && chmod +x /usr/local/bin/uname && \\\n\n    # Microsoft ODBC Driver 13 for Linux\n    # Note: There's a copy of this tar on my hubiC\n        wget -nv -O msodbcsql-13.0.0.0.tar.gz \\\n        \"https://meetsstorenew.blob.core.windows.net/contianerhd/Ubuntu%2013.0%20Tar/msodbcsql-13.0.0.0.tar.gz?st=2016-10-18T17%3A29%3A00Z&se=2022-10-19T17%3A29%3A00Z&sp=rl&sv=2015-04-05&sr=b&sig=cDwPfrouVeIQf0vi%2BnKt%2BzX8Z8caIYvRCmicDL5oknY%3D\" \\\n        && tar -xf msodbcsql-13.0.0.0.tar.gz \\\n        && cd msodbcsql-*/ \\\n        && ldd lib64/libmsodbcsql-13.0.so.0.0 \\\n        && ./install.sh install --accept-license \\\n        && ls -l /opt/microsoft/msodbcsql/ \\\n        && odbcinst -q -d -n \"ODBC Driver 13 for SQL Server\" && \\\n\n\n    #####################################\n    # Install sqlsrv y pdo_sqlsrv\n    # extensions:\n    #####################################\n\n    pecl install sqlsrv-4.0.8 && \\\n    pecl install pdo_sqlsrv-4.0.8 && \\\n\n    #####################################\n    # Set locales for the container\n    #####################################\n\n    apt-get install --no-install-recommends -y locales \\\n    && echo \"en_US.UTF-8 UTF-8\" > /etc/locale.gen \\\n    && locale-gen \\\n    && echo \"extension=sqlsrv.so\" > /usr/local/etc/php/conf.d/20-sqlsrv.ini \\\n    && echo \"extension=pdo_sqlsrv.so\" > /usr/local/etc/php/conf.d/20-pdo_sqlsrv.ini \\\n; rm msodbcsql-13.0.0.0.tar.gz rm -rf /var/lib/apt/lists/*; fi\n\n#\n#--------------------------------------------------------------------------\n# Final Touch\n#--------------------------------------------------------------------------\n#\n\nADD ./laravel.ini /usr/local/etc/php/conf.d/\nADD ./laravel.pool.conf /usr/local/etc/php-fpm.d/\n\n#RUN rm -r /var/lib/apt/lists/*\n\nRUN usermod -u 1000 www-data\n\nWORKDIR /var/www\n\nCMD [\"php-fpm\"]\n\nEXPOSE 9000\n"
}