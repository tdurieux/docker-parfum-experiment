diff --git a/Users/tdurieux/git/dinghy-experiment/data/evaluation/dockerfiles/poyhsiao/klaradock/jenkins/Dockerfile b/Users/tdurieux/git/dinghy-experiment/data/evaluation/dockerfile_repair_results/poyhsiao/klaradock/jenkins/Dockerfile/repaired.Dockerfile
index 63480c7..05e61d0 100644
--- a/Users/tdurieux/git/dinghy-experiment/data/evaluation/dockerfiles/poyhsiao/klaradock/jenkins/Dockerfile
+++ b/Users/tdurieux/git/dinghy-experiment/data/evaluation/dockerfile_repair_results/poyhsiao/klaradock/jenkins/Dockerfile/repaired.Dockerfile
@@ -1,6 +1,6 @@
 FROM openjdk:8-jdk
 
-RUN apt-get update && apt-get install -y git curl && rm -rf /var/lib/apt/lists/*
+RUN apt-get update && apt-get install --no-install-recommends -y git curl && rm -rf /var/lib/apt/lists/*
 
 ENV JENKINS_HOME /var/jenkins_home
 ENV JENKINS_SLAVE_AGENT_PORT 50000
@@ -11,24 +11,24 @@ ARG uid=1000
 ARG gid=1000
 
 # Jenkins is run with user `jenkins`, uid = 1000
-# If you bind mount a volume from the host or a data container, 
+# If you bind mount a volume from the host or a data container,
 # ensure you use the same uid
 RUN groupadd -g ${gid} ${group} \
     && useradd -d "$JENKINS_HOME" -u ${uid} -g ${gid} -m -s /bin/bash ${user}
 
-# Jenkins home directory is a volume, so configuration and build history 
+# Jenkins home directory is a volume, so configuration and build history
 # can be persisted and survive image upgrades
 VOLUME /var/jenkins_home
 
-# `/usr/share/jenkins/ref/` contains all reference configuration we want 
-# to set on a fresh new installation. Use it to bundle additional plugins 
+# `/usr/share/jenkins/ref/` contains all reference configuration we want
+# to set on a fresh new installation. Use it to bundle additional plugins
 # or config file with your custom jenkins Docker image.
 RUN mkdir -p /usr/share/jenkins/ref/init.groovy.d
 
 ENV TINI_VERSION 0.13.2
 ENV TINI_SHA afbf8de8a63ce8e4f18cb3f34dfdbbd354af68a1
 
-# Use tini as subreaper in Docker container to adopt zombie processes 
+# Use tini as subreaper in Docker container to adopt zombie processes
 RUN curl -fsSL https://github.com/krallin/tini/releases/download/v${TINI_VERSION}/tini-static-amd64 -o /bin/tini && chmod +x /bin/tini \
   && echo "$TINI_SHA  /bin/tini" | sha1sum -c -
 
@@ -44,7 +44,7 @@ ARG JENKINS_SHA=a25b9a314ca9e76f9673da7309e1882e32674223
 # Can be used to customize where jenkins.war get downloaded from
 ARG JENKINS_URL=https://repo.jenkins-ci.org/public/org/jenkins-ci/main/jenkins-war/${JENKINS_VERSION}/jenkins-war-${JENKINS_VERSION}.war
 
-# could use ADD but this one does not check Last-Modified header neither does it allow to control checksum 
+# could use ADD but this one does not check Last-Modified header neither does it allow to control checksum
 # see https://github.com/docker/docker/issues/8331
 RUN curl -fsSL ${JENKINS_URL} -o /usr/share/jenkins/jenkins.war \
   && echo "${JENKINS_SHA}  /usr/share/jenkins/jenkins.war" | sha1sum -c -
@@ -59,7 +59,7 @@ RUN chown -R ${user} "$JENKINS_HOME" /usr/share/jenkins/ref
 ARG DOCKER_GID=998
 
 RUN groupadd -g ${DOCKER_GID} docker \
-  && curl -sSL https://get.docker.com/ | sh \
+  && curl -f -sSL https://get.docker.com/ | sh \
   && apt-get -q autoremove \
   && apt-get -q clean -y \
   && rm -rf /var/lib/apt/lists/* /var/cache/apt/*.bin
@@ -67,11 +67,11 @@ RUN groupadd -g ${DOCKER_GID} docker \
 # Install Docker-in-Docker from git@github.com:jpetazzo/dind.git
 # RUN apt-get update -qq && apt-get install -qqy apt-transport-https ca-certificates curl lxc iptables
 # Install Docker from Docker Inc. repositories.
-RUN apt-get install -y curl && curl -sSL https://get.docker.com/ | sh
+RUN apt-get install --no-install-recommends -y curl && curl -f -sSL https://get.docker.com/ | sh && rm -rf /var/lib/apt/lists/*;
 RUN usermod -aG docker jenkins
 
 # Install Docker-Compose
-RUN curl -L "https://github.com/docker/compose/releases/download/1.10.0/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
+RUN curl -f -L "https://github.com/docker/compose/releases/download/1.10.0/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
 RUN chmod +x /usr/local/bin/docker-compose