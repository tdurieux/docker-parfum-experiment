{
  "startTime": 1674254726799,
  "endTime": 1674254727552,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 9,
        "lineEnd": 9,
        "columnStart": 4,
        "columnEnd": 91
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# Start from golang base image\nFROM golang:1.18.2-alpine3.15 as builder\n\n# Install git. (alpine image does not have git in it)\nRUN apk update && apk add --no-cache git curl\n\n# Set current working directory\nWORKDIR /app\n\nRUN curl -f -L https://github.com/yt-dlp/yt-dlp/releases/latest/download/yt-dlp -o /app/yt-dlp\nRUN chmod a+x /app/yt-dlp\n\n# Note here: To avoid downloading dependencies every time we\n# build image. Here, we are caching all the dependencies by\n# first copying go.mod and go.sum files and downloading them,\n# to be used every time we build the image if the dependencies\n# are not changed.\n\n# Copy go mod and sum files\nCOPY go.mod ./\nCOPY go.sum ./\n\n# Download all dependencies.\nRUN go mod download\n\n# Now, copy the source code\nCOPY . .\n\n# Note here: CGO_ENABLED is disabled for cross system compilation\n# It is also a common best practise.\n\n# Build the application.\nRUN CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build -o ./bin/gropple .\n\n# Finally our multi-stage to build a small image\n# Start a new stage from scratch\nFROM alpine:3.15.4\n\n# Copy the Pre-built binary file\nCOPY --from=builder /app/bin/gropple .\nCOPY --from=builder /app/yt-dlp /bin/\n\n# Install things we need to support yt-dlp\nRUN apk update && apk add --no-cache python3 ffmpeg\n\n# Run executable\nCMD [\"./gropple\", \"--config-path\", \"/config/gropple.json\"]\n"
}