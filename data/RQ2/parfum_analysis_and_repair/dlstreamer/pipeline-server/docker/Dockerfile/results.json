{
  "startTime": 1674255181634,
  "endTime": 1674255182420,
  "originalSmells": [
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 50,
        "lineEnd": 50,
        "columnStart": 53,
        "columnEnd": 87
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 50,
        "lineEnd": 50,
        "columnStart": 53,
        "columnEnd": 87
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "#\n# Copyright (C) 2019-2020 Intel Corporation.\n#\n# SPDX-License-Identifier: BSD-3-Clause\n#\n\nARG BASE=dlstreamer-pipeline-server-gstreamer-base\nARG MODELS_COMMAND=do_not_copy_models\nARG PIPELINES_COMMAND=do_not_copy_pipelines\nARG FINAL_STAGE=dlstreamer-pipeline-server-environment\n\n########################################################\n# First stage installs dlstreamer-pipeline-server and its dependencies on top of a compatible Media Analytics Base.\n# See documentation for more details on requirements for the Media Analytics Base.\n\nFROM ${BASE} as dlstreamer-pipeline-server\nARG FRAMEWORK=gstreamer\n\n# Multi-License Disclaimer\nRUN echo \"IMPORTANT: This script will build third party components licensed under various open source licenses into your container images. The terms under which those components may be used and distributed can be found with the license document that is provided with those components. Please familiarize yourself with those terms to ensure your distribution of those components complies with the terms of those licenses.\"\n\n# Switching to root user to create user and install packages\nUSER root\n\n# Dependencies for OpenVINO\nARG BASE=dlstreamer-pipeline-server-gstreamer-base\nENV PIPELINE_SERVER_BASE=${BASE}\nSHELL [\"/bin/bash\", \"-c\"]\n\n# Creating user pipeline-server and adding it to groups \"video\" and \"users\" to use GPU and VPU\nARG USER=pipeline-server\nRUN useradd -ms /bin/bash -G video,audio,users ${USER} -d /home/pipeline-server && \\\n    chown ${USER} -R /home/pipeline-server /root\n\n# Install boost library required for HDDL plugin\nRUN if [[ ${PIPELINE_SERVER_BASE} == *\"openvino/ubuntu20_data_runtime\"* || ${PIPELINE_SERVER_BASE} == *\"intel/dlstreamer\"* ]]; then \\\n    DEBIAN_FRONTEND=noninteractive apt-get update && \\\n    apt-get install -y -q --no-install-recommends \\\n    libboost-program-options1.71.0 && \\\n    apt-get clean && \\\n    rm -rf /var/lib/apt/lists/* ;\\\n    fi\n\nRUN DEBIAN_FRONTEND=noninteractive apt-get update && \\\n    apt-get install -y -q --no-install-recommends \\\n    gstreamer1.0-nice \\\n    python3-pip && \\\n    apt-get clean && \\\n    rm -rf /var/lib/apt/lists/* ;\n\nRUN DEBIAN_FRONTEND=noninteractive apt-get update && apt-get install --no-install-recommends -y libjemalloc-dev && rm -rf /var/lib/apt/lists/*;\n\n# Install GStreamer packages not present dlstreamer base image\nRUN if [[ ${PIPELINE_SERVER_BASE} == *\"dlstreamer\"* ]]; then \\\n    DEBIAN_FRONTEND=noninteractive apt-get update && \\\n    apt-get install -y -q --no-install-recommends \\\n    gstreamer1.0-plugins-good \\\n    gstreamer1.0-alsa \\\n    gstreamer1.0-libav \\\n    gstreamer1.0-plugins-bad \\\n    gstreamer1.0-plugins-ugly \\\n    gstreamer1.0-tools \\\n    gstreamer1.0-vaapi \\\n    gstreamer1.0-x \\\n    libgstreamer-plugins-bad1.0-0 \\\n    libgstreamer-plugins-base1.0-dev \\\n    libgstreamer1.0-dev && \\\n    apt-get clean && \\\n    rm -rf /var/lib/apt/lists/* ;\\\n    fi\n\nRUN DEBIAN_FRONTEND=noninteractive apt-get update && \\\n    apt-get upgrade -y -q && \\\n    apt-get dist-upgrade -y -q && \\\n    apt-get clean && \\\n    rm -rf /var/lib/apt/lists/* ;\n\nCOPY ./requirements.txt /\nRUN pip3 install --upgrade pip --no-cache-dir -r /requirements.txt\nRUN rm -f /requirements.txt\n\n# Pipeline Server Python Modules\nCOPY ./server /home/pipeline-server/server\nCOPY ./client /home/pipeline-server/client\n\n# Copy GVA Python extensions\nCOPY ./extensions /home/pipeline-server/extensions\n\n# Media Analytics Framework set via environment variable\nENV FRAMEWORK=${FRAMEWORK}\nWORKDIR /home/pipeline-server\n########################################################\n\n########################################################\n# Second stage copies models from build context if specified via build argument\n# Selective copy is controlled via creating a stage with and without the copy command.\n# The stage used in the final image is controlled via the build argument MODEL_COMMAND.\n\n# Creates a stage that does not copy models\nFROM dlstreamer-pipeline-server as do_not_copy_models\n\n# Creates a stage that copies models from the build context\nFROM dlstreamer-pipeline-server as copy_models\nONBUILD ARG PS_MODELS_PATH\nONBUILD ENV PS_MODELS_PATH=${PS_MODELS_PATH}\nONBUILD COPY $PS_MODELS_PATH /home/pipeline-server/models\n\n# Stage that is used is controlled via MODELS_COMMAND build argument\nFROM ${MODELS_COMMAND} as dlstreamer-pipeline-server-with-models\n########################################################\n\n########################################################\n# Third stage copies pipelines from build context if specified via build argument.\n# Selective copy is controlled via creating a stage with and without the copy command.\n# The stage used in the final image is controlled via the build argument PIPELINES_COMMAND.\n\n# Creates a stage that does not copy pipelines\nFROM dlstreamer-pipeline-server-with-models as do_not_copy_pipelines\n\n# Creates a stage that copies pipelines from the build context\nFROM dlstreamer-pipeline-server-with-models as copy_pipelines\nONBUILD ARG PS_PIPELINES_PATH\nONBUILD ENV PS_PIPELINES_PATH=${PS_PIPELINES_PATH}\nONBUILD COPY ${PS_PIPELINES_PATH} /home/pipeline-server/pipelines\n\n# Stage that is used is controlled via PIPELINES_COMMAND build argument\nFROM ${PIPELINES_COMMAND} as dlstreamer-pipeline-server-with-models-and-pipelines\n########################################################\n\n########################################################\n# Fourth stage creates the final image either with a default command or with a default entrypoint.\n# Final stage is controlled by the FINAL_STAGE build argument.\n\nFROM dlstreamer-pipeline-server-with-models-and-pipelines as dlstreamer-pipeline-server-library\nONBUILD RUN rm -rf /home/pipeline-server/server/__main__.py\nONBUILD RUN rm -rf /home/pipeline-server/server/rest_api\n\nFROM dlstreamer-pipeline-server-with-models-and-pipelines as dlstreamer-pipeline-server-service\n\n# Dependencies installed via pip\nONBUILD COPY ./requirements.service.txt /\nONBUILD RUN pip3 install  --no-cache-dir -r /requirements.service.txt\nONBUILD RUN rm -f /requirements.service.txt\n\n# WebRTC specific dependencies installed via pip\nONBUILD COPY ./requirements.webrtc.txt /\nONBUILD RUN if [[ ${FRAMEWORK} == \"gstreamer\" ]]; then \\\n       pip3 install  --no-cache-dir -r /requirements.webrtc.txt; \\\n   fi\nONBUILD RUN rm -f /requirements.webrtc.txt\n\nONBUILD ENTRYPOINT [\"python3\", \"-m\", \"server\"]\n\nFROM ${FINAL_STAGE} as deploy\n\nARG USER=pipeline-server\n\nENV HOME=/home/pipeline-server\nENV PYTHONPATH=/home/pipeline-server:$PYTHONPATH\nENV GST_PLUGIN_PATH=$GST_PLUGIN_PATH:/usr/lib/x86_64-linux-gnu/gstreamer-1.0/\nENV LD_PRELOAD=libjemalloc.so\n\nENV cl_cache_dir=/home/.cl_cache\nRUN mkdir -p -m g+s $cl_cache_dir && chown ${USER}:users $cl_cache_dir\n\n# Prepare XDG_RUNTIME_DIR\nENV XDG_RUNTIME_DIR=/home/.xdg_runtime_dir\nRUN mkdir -p -m g+s $XDG_RUNTIME_DIR && chown ${USER}:users $XDG_RUNTIME_DIR\n\nUSER ${USER}\n"
}