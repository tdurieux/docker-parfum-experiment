{
  "startTime": 1674248257273,
  "endTime": 1674248258471,
  "originalSmells": [
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 22,
        "lineEnd": 22,
        "columnStart": 8,
        "columnEnd": 37
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 26,
        "lineEnd": 26,
        "columnStart": 8,
        "columnEnd": 99
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 22,
        "lineEnd": 22,
        "columnStart": 8,
        "columnEnd": 37
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 26,
        "lineEnd": 26,
        "columnStart": 8,
        "columnEnd": 99
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 22,
        "lineEnd": 22,
        "columnStart": 8,
        "columnEnd": 37
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 26,
        "lineEnd": 26,
        "columnStart": 8,
        "columnEnd": 99
      }
    }
  ],
  "repairedSmells": [
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 22,
        "lineEnd": 22,
        "columnStart": 8,
        "columnEnd": 61
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 26,
        "lineEnd": 26,
        "columnStart": 8,
        "columnEnd": 123
      }
    }
  ],
  "repairedDockerfile": "FROM stackbrew/debian:wheezy\n\n[[ updateApt ]]\n[[ addUserFiles ]]\n\nWORKDIR [[ .Container.GetFirstMountedDir ]]\n\n[[ $version := (.Container.GetCustomValue \"version\" \"2.1.2\") ]]\n[[ $serverType := (.Container.GetCustomValue \"serverType\" \"standalone\") ]]\n\n[[ installRvm ]]\n\n# Install nodejs\n[[ .Container.SetCustomValue \"nodeVersion\" \"0.10.20\"]]\n[[ installNodeJS ]]\n\n# Install custom gems\n[[range (.Container.GetCustomValue \"gems\")]]\n    RUN gem install [[.]]\n[[end]]\n\n[[ if eq $serverType \"apache\"]]\n    RUN apt-get install --no-install-recommends -y -f apache2 && rm -rf /var/lib/apt/lists/*;\n    RUN a2enmod actions alias\n    RUN service apache2 reload\n\n    RUN apt-get install --no-install-recommends -y -f libcurl4-openssl-dev apache2-threaded-dev libapr1-dev libaprutil1-dev && rm -rf /var/lib/apt/lists/*;\n        RUN /bin/bash -l -c 'gem install passenger bundler execjs'\n        RUN /bin/bash -l -c 'passenger-install-apache2-module --auto'\n\n        RUN print \"LoadModule passenger_module /usr/local/rvm/gems/ruby-[[ $version ]]/gems/passenger-4.0.44/buildout/apache2/mod_passenger.so \\n<IfModule mod_passenger.c>\\nPassengerRoot /usr/local/rvm/gems/ruby-[[ $version ]]/gems/passenger-4.0.44 \\nPassengerDefaultRuby /usr/local/rvm/gems/ruby-[[ $version ]]/wrappers/ruby \\n</IfModule>\" > /etc/apache2/mods-available/passenger.load\n        RUN a2enmod passenger\n\n        ADD 000-default /etc/apache2/sites-enabled/000-default\n        ADD ports.conf /etc/apache2/ports.conf\n[[ end ]]\n\n# Add setup script\nADD setup.sh /root/setup.sh\nRUN chmod +x /root/setup.sh\n\n# Add custom setup script\n[[ beforeAfterScripts ]]\n\n[[ if .EmptyCmd ]]\nCMD /bin/bash\n[[ else ]]\nCMD [[ if (.Container.HasBeforeScript) ]] /bin/bash /root/before-setup.sh && [[end]] /bin/bash /root/setup.sh \\\n    [[ if (.Container.HasAfterScript) ]] && /bin/bash /root/after-setup.sh \\[[end]]\n    && /etc/init.d/apache2 start \\\n    && /bin/bash\n[[ end ]]\n"
}