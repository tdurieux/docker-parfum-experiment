{
  "startTime": 1674216447701,
  "endTime": 1674216448576,
  "originalSmells": [
    {
      "rule": "yarnCacheCleanAfterInstall",
      "position": {
        "lineStart": 38,
        "lineEnd": 38,
        "columnStart": 4,
        "columnEnd": 16
      }
    },
    {
      "rule": "yarnCacheCleanAfterInstall",
      "position": {
        "lineStart": 40,
        "lineEnd": 40,
        "columnStart": 4,
        "columnEnd": 16
      }
    },
    {
      "rule": "yarnCacheCleanAfterInstall",
      "position": {
        "lineStart": 42,
        "lineEnd": 42,
        "columnStart": 4,
        "columnEnd": 29
      }
    }
  ],
  "repairedSmells": [
    {
      "rule": "yarnCacheCleanAfterInstall",
      "position": {
        "lineStart": 58,
        "lineEnd": 58,
        "columnStart": 31,
        "columnEnd": 47
      }
    }
  ],
  "repairedDockerfile": "# Note: this Dockerfile is executed with the root of the staticdeploy monorepo\n# as context\nFROM node:14-alpine\n\nWORKDIR /opt/staticdeploy\n\n# Copy files\nCOPY package.json lerna.json yarn.lock tsconfig.json ./\n\nCOPY management-console/package.json management-console/tsconfig.json ./management-console/\nCOPY management-console/public ./management-console/public/\nCOPY management-console/src ./management-console/src/\nCOPY core/package.json core/tsconfig.json core/tsconfig.browser.json ./core/\nCOPY core/src ./core/src/\nCOPY http-adapters/package.json http-adapters/tsconfig.json ./http-adapters/\nCOPY http-adapters/src ./http-adapters/src/\nCOPY jwt-authentication-strategy/package.json jwt-authentication-strategy/tsconfig.json ./jwt-authentication-strategy/\nCOPY jwt-authentication-strategy/src ./jwt-authentication-strategy/src/\nCOPY memory-storages/package.json memory-storages/tsconfig.json ./memory-storages/\nCOPY memory-storages/src ./memory-storages/src/\nCOPY oidc-authentication-strategy/package.json oidc-authentication-strategy/tsconfig.json ./oidc-authentication-strategy/\nCOPY oidc-authentication-strategy/src ./oidc-authentication-strategy/src/\nCOPY pg-s3-storages/package.json pg-s3-storages/tsconfig.json ./pg-s3-storages/\nCOPY pg-s3-storages/src ./pg-s3-storages/src/\nCOPY sdk/package.json sdk/tsconfig.json sdk/tsconfig.browser.json ./sdk/\nCOPY sdk/src ./sdk/src/\nCOPY serve-static/package.json serve-static/tsconfig.json ./serve-static/\nCOPY serve-static/src ./serve-static/src/\nCOPY storages-test-suite/package.json storages-test-suite/tsconfig.json ./storages-test-suite/\nCOPY storages-test-suite/src ./storages-test-suite/src/\nCOPY tar-archiver/package.json tar-archiver/tsconfig.json ./tar-archiver/\nCOPY tar-archiver/src ./tar-archiver/src/\nCOPY staticdeploy/package.json staticdeploy/tsconfig.json ./staticdeploy/\nCOPY staticdeploy/typings ./staticdeploy/typings/\nCOPY staticdeploy/src ./staticdeploy/src/\n\n# Install dependencies. Don't use --frozen-lockfile since some subprojets were\n# excluded, causing changes to yarn.lock on install\nRUN yarn install && \\\n    # Compile code\n    yarn compile && \\\n    # Remove dev dependencies\n    yarn install --production && \\\n    # Remove unecessary files\n    rm yarn.lock tsconfig.json && \\\n    rm -r management-console/tsconfig.json management-console/public management-console/src && \\\n    rm -r core/tsconfig.json core/tsconfig.browser.json core/src && \\\n    rm -r http-adapters/tsconfig.json http-adapters/src && \\\n    rm -r jwt-authentication-strategy/tsconfig.json jwt-authentication-strategy/src && \\\n    rm -r memory-storages/tsconfig.json memory-storages/src && \\\n    rm -r oidc-authentication-strategy/tsconfig.json oidc-authentication-strategy/src && \\\n    rm -r pg-s3-storages/tsconfig.json pg-s3-storages/src && \\\n    rm -r sdk/tsconfig.json sdk/tsconfig.browser.json sdk/src && \\\n    rm -r serve-static/tsconfig.json serve-static/src && \\\n    rm -r storages-test-suite && \\\n    rm -r tar-archiver/tsconfig.json tar-archiver/src && \\\n    rm -r staticdeploy/tsconfig.json staticdeploy/src staticdeploy/typings && \\\n    # Install curl for performing healthchecks\n    apk add --no-cache curl && yarn cache clean;\n\n# Configure listening port\nENV PORT 80\nEXPOSE 80\n\n# Configure healthcheck\nHEALTHCHECK CMD curl -f -H \"Host: $MANAGEMENT_HOSTNAME\" http://localhost:$PORT/api/health || exit 1\n\n# Set start command\nWORKDIR /opt/staticdeploy/staticdeploy\nCMD [ \"yarn\", \"start\" ]\n"
}