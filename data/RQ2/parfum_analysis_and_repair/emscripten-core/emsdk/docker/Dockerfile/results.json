{
  "startTime": 1674252025243,
  "endTime": 1674252026115,
  "originalSmells": [
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 10,
        "lineEnd": 17,
        "columnStart": 7,
        "columnEnd": 19
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM ubuntu:focal AS stage_build\n\nARG EMSCRIPTEN_VERSION=tot\nENV EMSDK /emsdk\n\n# ------------------------------------------------------------------------------\n\nRUN echo \"## Start building\" \\\n    && echo \"## Update and install packages\" \\\n    && apt-get -qq -y update \\\n    && apt-get -qq install -y --no-install-recommends \\\n        binutils \\\n        build-essential \\\n        ca-certificates \\\n        file \\\n        git \\\n        python3 \\\n        python3-pip \\\n    && echo \"## Done\" && rm -rf /var/lib/apt/lists/*;\n\n# Copy the contents of this repository to the container\nCOPY . ${EMSDK}\n\nRUN echo \"## Install Emscripten\" \\\n    && cd ${EMSDK} \\\n    && ./emsdk install ${EMSCRIPTEN_VERSION} \\\n    && echo \"## Done\"\n\n# This generates configuration that contains all valid paths according to installed SDK\n# TODO(sbc): We should be able to use just emcc -v here but it doesn't\n# currently create the sanity file.\nRUN cd ${EMSDK} \\\n    && echo \"## Generate standard configuration\" \\\n    && ./emsdk activate ${EMSCRIPTEN_VERSION} \\\n    && chmod 777 ${EMSDK}/upstream/emscripten \\\n    && chmod -R 777 ${EMSDK}/upstream/emscripten/cache \\\n    && echo \"int main() { return 0; }\" > hello.c \\\n    && ${EMSDK}/upstream/emscripten/emcc -c hello.c \\\n    && cat ${EMSDK}/upstream/emscripten/cache/sanity.txt \\\n    && echo \"## Done\"\n\n# Cleanup Emscripten installation and strip some symbols\nRUN echo \"## Aggressive optimization: Remove debug symbols\" \\\n    && cd ${EMSDK} && . ./emsdk_env.sh \\\n    # Remove debugging symbols from embedded node (extra 7MB)\n    && strip -s `which node` \\\n    # Tests consume ~80MB disc space\n    && rm -fr ${EMSDK}/upstream/emscripten/tests \\\n    # Fastcomp is not supported\n    && rm -fr ${EMSDK}/upstream/fastcomp \\\n    # strip out symbols from clang (~extra 50MB disc space)\n    && find ${EMSDK}/upstream/bin -type f -exec strip -s {} + || true \\\n    && echo \"## Done\"\n\n# ------------------------------------------------------------------------------\n# -------------------------------- STAGE DEPLOY --------------------------------\n# ------------------------------------------------------------------------------\n\nFROM ubuntu:focal AS stage_deploy\n\nCOPY --from=stage_build /emsdk /emsdk\n\n# Fallback in case Emscripten isn't activated.\n# This will let use tools offered by this image inside other Docker images\n# (sub-stages) or with custom / no entrypoint\nENV EMSDK=/emsdk \\\n    EM_CONFIG=/emsdk/.emscripten \\\n    EMSDK_NODE=/emsdk/node/14.18.2_64bit/bin/node \\\n    PATH=\"/emsdk:/emsdk/upstream/emscripten:/emsdk/upstream/bin:/emsdk/node/14.18.2_64bit/bin:${PATH}\"\n\n# ------------------------------------------------------------------------------\n# Create a 'standard` 1000:1000 user\n# Thanks to that this image can be executed as non-root user and created files\n# will not require root access level on host machine Please note that this\n# solution even if widely spread (i.e. Node.js uses it) is far from perfect as\n# user 1000:1000 might not exist on host machine, and in this case running any\n# docker image will cause other random problems (mostly due `$HOME` pointing to\n# `/`)\nRUN echo \"## Create emscripten user (1000:1000)\" \\\n    && groupadd --gid 1000 emscripten \\\n    && useradd --uid 1000 --gid emscripten --shell /bin/bash --create-home emscripten \\\n    && echo \"umask 0000\" >> /etc/bash.bashrc \\\n    && echo \". /emsdk/emsdk_env.sh\" >> /etc/bash.bashrc \\\n    && echo \"## Done\"\n\n# ------------------------------------------------------------------------------\n\nRUN echo \"## Update and install packages\" \\\n    && apt-get -qq -y update \\\n    # Somewhere in here apt sets up tzdata which asks for your time zone and blocks\n    # waiting for the answer which you can't give as docker build doesn't read from\n    # the terninal. The env vars set here avoid the interactive prompt and set the TZ.\n    && DEBIAN_FRONTEND=\"noninteractive\" TZ=\"America/San_Francisco\" apt-get -qq install -y --no-install-recommends \\\n        sudo \\\n        libxml2 \\\n        ca-certificates \\\n        python3 \\\n        python3-pip \\\n        wget \\\n        curl \\\n        zip \\\n        unzip \\\n        git \\\n        git-lfs \\\n        ssh-client \\\n        build-essential \\\n        make \\\n        ant \\\n        libidn11 \\\n        cmake \\\n        openjdk-11-jre-headless \\\n    # Standard Cleanup on Debian images\n    && apt-get -y clean \\\n    && apt-get -y autoclean \\\n    && apt-get -y autoremove \\\n    && rm -rf /var/lib/apt/lists/* \\\n    && rm -rf /var/cache/debconf/*-old \\\n    && rm -rf /usr/share/doc/* \\\n    && rm -rf /usr/share/man/?? \\\n    && rm -rf /usr/share/man/??_* \\\n    && echo \"## Done\"\n\n# ------------------------------------------------------------------------------\n# Use commonly used /src as working directory\nWORKDIR /src\n\nLABEL maintainer=\"kontakt@trzeci.eu\" \\\n      org.label-schema.name=\"emscripten\" \\\n      org.label-schema.description=\"The official container with Emscripten SDK\" \\\n      org.label-schema.url=\"https://emscripten.org\" \\\n      org.label-schema.vcs-url=\"https://github.com/emscripten-core/emsdk\" \\\n      org.label-schema.docker.dockerfile=\"/docker/Dockerfile\"\n\n# ------------------------------------------------------------------------------\n"
}