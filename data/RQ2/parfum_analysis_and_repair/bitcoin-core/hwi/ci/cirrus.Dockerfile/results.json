{
  "startTime": 1674217135345,
  "endTime": 1674217136086,
  "originalSmells": [
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 41,
        "lineEnd": 41,
        "columnStart": 4,
        "columnEnd": 29
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 4,
        "lineEnd": 39,
        "columnStart": 4,
        "columnEnd": 8
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 4,
        "lineEnd": 39,
        "columnStart": 4,
        "columnEnd": 8
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 4,
        "lineEnd": 39,
        "columnStart": 4,
        "columnEnd": 8
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM python:3.6\n\nENV DEBIAN_FRONTEND=noninteractive\nRUN apt-get update && apt-get install --no-install-recommends -y \\\n    autotools-dev \\\n    automake \\\n    bsdmainutils \\\n    build-essential \\\n    ccache \\\n    clang \\\n    cmake \\\n    curl \\\n    cython3 \\\n    gcc-arm-none-eabi \\\n    gcc-arm-linux-gnueabihf \\\n    git \\\n    libboost-system-dev \\\n    libboost-filesystem-dev \\\n    libboost-chrono-dev \\\n    libboost-test-dev \\\n    libboost-thread-dev \\\n    libc6-dev-armhf-cross \\\n    libdb-dev \\\n    libdb++-dev \\\n    libevent-dev \\\n    libgcrypt20-dev \\\n    libnewlib-arm-none-eabi \\\n    libpcsclite-dev \\\n    libsdl2-dev \\\n    libsdl2-image-dev \\\n    libssl-dev \\\n    libtool \\\n    libudev-dev \\\n    libusb-1.0-0-dev \\\n    ninja-build \\\n    pkg-config \\\n    protobuf-compiler \\\n    qemu-user-static \\\n    swig && rm -rf /var/lib/apt/lists/*;\n\nRUN pip install --no-cache-dir poetry flake8\nRUN wget https://static.rust-lang.org/rustup/dist/x86_64-unknown-linux-gnu/rustup-init\nRUN chmod +x rustup-init && ./rustup-init -y\nENV PATH=\"/root/.cargo/bin:$PATH\"\n\n####################\n# Local build/test steps\n# -----------------\n# To install all simulators/tests locally, uncomment the block below,\n# then build the docker image and interactively run the tests\n# as needed.\n# e.g.,\n# docker build -f ci/cirrus.Dockerfile -t hwi_test .\n# docker run -it --entrypoint /bin/bash hwi_test\n# cd test; poetry run ./run_tests.py --ledger --coldcard --interface=cli --device-only\n####################\n\n####################\n#ENV EMAIL=email\n#COPY pyproject.toml pyproject.toml\n#RUN poetry run pip install construct pyelftools mnemonic jsonschema\n#\n## Set up environments first to take advantage of layer caching\n#RUN mkdir test\n#COPY test/setup_environment.sh test/setup_environment.sh\n#COPY test/data/coldcard-multisig.patch test/data/coldcard-multisig.patch\n## One by one to allow for intermediate caching of successful builds\n#RUN cd test; ./setup_environment.sh --trezor-1\n#RUN cd test; ./setup_environment.sh --trezor-t\n#RUN cd test; ./setup_environment.sh --coldcard\n#RUN cd test; ./setup_environment.sh --bitbox01\n#RUN cd test; ./setup_environment.sh --ledger\n#RUN cd test; ./setup_environment.sh --keepkey\n#RUN cd test; ./setup_environment.sh --jade\n#RUN cd test; ./setup_environment.sh --bitcoind\n#\n## Once everything has been built, put rest of files in place\n## which have higher turn-over.\n#COPY test/ test/\n#COPY hwi.py hwi-qt.py README.md /\n#COPY hwilib/ /hwilib/\n#RUN poetry install\n#\n####################\n\nENV LC_ALL=C.UTF-8\nENV LANG=C.UTF-8\nENV LANGUAGE=C.UTF-8\n"
}