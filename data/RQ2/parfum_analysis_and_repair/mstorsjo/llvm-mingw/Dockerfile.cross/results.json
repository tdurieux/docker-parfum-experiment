{
  "startTime": 1674253864438,
  "endTime": 1674253865064,
  "originalSmells": [
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 14,
        "lineEnd": 14,
        "columnStart": 4,
        "columnEnd": 58
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# Cross compile an llvm-mingw toolchain for windows.\n#\n# This needs to be built with --build-arg BASE=<image>, where image is the name\n# of a docker image that contains a working llvm-mingw cross compiler\n# from a similar enough version.\n#\n# This builds LLVM and all other build tools that need to run on the target\n# platform, but just copies over the runtime libraries from the existing\n# toolchain in the base docker image.\n\nARG BASE=mstorsjo/llvm-mingw:dev\nFROM $BASE\n\nRUN apt-get update -qq && \\\n    apt-get install --no-install-recommends -qqy libltdl-dev swig autoconf-archive && \\\n    apt-get clean -y && \\\n    rm -rf /var/lib/apt/lists/*\n\nCOPY build-python.sh .\n\nARG WITH_PYTHON\n\nRUN if [ -n \"$WITH_PYTHON\" ]; then \\\n        ./build-python.sh /opt/python; \\\n    fi\n\nENV PATH=/opt/python/bin:$PATH\n\nARG CROSS_ARCH=x86_64\nENV CROSS_TOOLCHAIN_PREFIX=/opt/llvm-mingw-$CROSS_ARCH\n\nENV HOST=$CROSS_ARCH-w64-mingw32\n\nRUN if [ -n \"$WITH_PYTHON\" ]; then \\\n        ./build-python.sh $CROSS_TOOLCHAIN_PREFIX/python --host=$HOST && \\\n        mkdir -p $CROSS_TOOLCHAIN_PREFIX/bin && \\\n        cp $CROSS_TOOLCHAIN_PREFIX/python/bin/*.dll $CROSS_TOOLCHAIN_PREFIX/bin; \\\n    fi\n\nARG FULL_LLVM\n\nCOPY build-llvm.sh .\nRUN if [ -n \"$WITH_PYTHON\" ]; then ARG=\"--with-python\"; fi && \\\n    ./build-llvm.sh $CROSS_TOOLCHAIN_PREFIX --host=$HOST $ARG\n\nCOPY build-lldb-mi.sh .\nRUN ./build-lldb-mi.sh $CROSS_TOOLCHAIN_PREFIX --host=$HOST\n\nCOPY strip-llvm.sh .\nRUN ./strip-llvm.sh $CROSS_TOOLCHAIN_PREFIX --host=$HOST\n\nARG TOOLCHAIN_ARCHS=\"i686 x86_64 armv7 aarch64\"\n\nCOPY build-mingw-w64.sh build-mingw-w64-tools.sh ./\nRUN ./build-mingw-w64-tools.sh $CROSS_TOOLCHAIN_PREFIX --skip-include-triplet-prefix --host=$HOST\n\nCOPY wrappers/*.sh wrappers/*.c wrappers/*.h ./wrappers/\nCOPY install-wrappers.sh .\nRUN ./install-wrappers.sh $CROSS_TOOLCHAIN_PREFIX --host=$HOST\n\nCOPY prepare-cross-toolchain.sh .\nRUN ./prepare-cross-toolchain.sh $TOOLCHAIN_PREFIX $CROSS_TOOLCHAIN_PREFIX $CROSS_ARCH\n\nCOPY build-make.sh .\nRUN ./build-make.sh $CROSS_TOOLCHAIN_PREFIX --host=$HOST\n\nARG TAG\nRUN ln -s $CROSS_TOOLCHAIN_PREFIX llvm-mingw-$TAG$CROSS_ARCH && \\\n    zip -9r /llvm-mingw-$TAG$CROSS_ARCH.zip llvm-mingw-$TAG$CROSS_ARCH && \\\n    ls -lh /llvm-mingw-$TAG$CROSS_ARCH.zip\n"
}