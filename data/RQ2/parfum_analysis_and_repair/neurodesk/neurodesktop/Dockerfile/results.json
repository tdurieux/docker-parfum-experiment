{
  "startTime": 1674221077610,
  "endTime": 1674221080279,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 82,
        "lineEnd": 82,
        "columnStart": 4,
        "columnEnd": 58
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 201,
        "lineEnd": 201,
        "columnStart": 14,
        "columnEnd": 118
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 228,
        "lineEnd": 228,
        "columnStart": 20,
        "columnEnd": 113
      }
    },
    {
      "rule": "wgetUseHttpsUrl",
      "position": {
        "lineStart": 93,
        "lineEnd": 93,
        "columnStart": 4,
        "columnEnd": 62
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 313,
        "lineEnd": 313,
        "columnStart": 4,
        "columnEnd": 33
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 72,
        "lineEnd": 72,
        "columnStart": 7,
        "columnEnd": 46
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 215,
        "lineEnd": 215,
        "columnStart": 7,
        "columnEnd": 61
      }
    },
    {
      "rule": "gpgUseBatchFlag",
      "position": {
        "lineStart": 82,
        "lineEnd": 82,
        "columnStart": 61,
        "columnEnd": 90
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# Create final image\nFROM ubuntu:20.04\n\n# Install base image dependancies\nRUN apt-get update \\\n    && DEBIAN_FRONTEND=noninteractive apt-get install --no-install-recommends -y \\\n        locales \\\n        sudo \\\n        wget \\\n        ca-certificates \\\n        make \\\n        gcc \\\n        g++ \\\n        openjdk-11-jre \\\n        libpng-dev \\\n        libjpeg-turbo8-dev \\\n        libcairo2-dev \\\n        libtool-bin \\\n        libossp-uuid-dev \\\n        libwebp-dev \\\n        lxde \\\n        openssh-server \\\n        libpango1.0-dev \\\n        libssh2-1-dev \\\n        libssl-dev \\\n        openssh-server \\\n        libvncserver-dev \\\n        libxt6 \\\n        xauth \\\n        xorg \\\n        freerdp2-dev \\\n        xrdp \\\n        xauth \\\n        xorg \\\n        xorgxrdp \\\n        tigervnc-standalone-server \\\n        tigervnc-common \\\n        lxterminal \\\n        lxrandr \\\n        curl \\\n        gpg \\\n        software-properties-common \\\n        dirmngr \\\n        gpg-agent \\\n    && rm -rf /var/lib/apt/lists/*\n\n# Set locale\nRUN sed -i -e 's/# en_US.UTF-8 UTF-8/en_US.UTF-8 UTF-8/' /etc/locale.gen \\\n    && locale-gen\nENV LANG en_US.UTF-8\nENV LANGUAGE en_US:en\nENV LC_ALL en_US.UTF-8\n\n# Install Apache Tomcat\nARG TOMCAT_REL=\"9\"\nARG TOMCAT_VERSION=\"9.0.58\"\nRUN wget -q https://archive.apache.org/dist/tomcat/tomcat-${TOMCAT_REL}/v${TOMCAT_VERSION}/bin/apache-tomcat-${TOMCAT_VERSION}.tar.gz -P /tmp \\\n    && tar -xf /tmp/apache-tomcat-${TOMCAT_VERSION}.tar.gz -C /tmp \\\n    && rm -rf /tmp/apache-tomcat-${TOMCAT_VERSION}.tar.gz \\\n    && mv /tmp/apache-tomcat-${TOMCAT_VERSION} /usr/local/tomcat \\\n    && mv /usr/local/tomcat/webapps /usr/local/tomcat/webapps.dist \\\n    && mkdir /usr/local/tomcat/webapps \\\n    && sh -c 'chmod +x /usr/local/tomcat/bin/*.sh'\n\n# Install Apache Guacamole\nARG GUACAMOLE_VERSION=\"1.4.0\"\nWORKDIR /etc/guacamole\nRUN wget -q \"https://apache.mirror.digitalpacific.com.au/guacamole/${GUACAMOLE_VERSION}/binary/guacamole-${GUACAMOLE_VERSION}.war\" -O /usr/local/tomcat/webapps/ROOT.war \\\n    && wget -q \"https://apache.mirror.digitalpacific.com.au/guacamole/${GUACAMOLE_VERSION}/source/guacamole-server-${GUACAMOLE_VERSION}.tar.gz\" -O /etc/guacamole/guacamole-server-${GUACAMOLE_VERSION}.tar.gz \\\n    && tar xvf /etc/guacamole/guacamole-server-${GUACAMOLE_VERSION}.tar.gz \\\n    && rm -rf /etc/guacamole/guacamole-server-${GUACAMOLE_VERSION}.tar.gz \\\n    && cd /etc/guacamole/guacamole-server-${GUACAMOLE_VERSION} \\\n    && ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --with-init-dir=/etc/init.d \\\n    && make \\\n    && make install \\\n    && ldconfig \\\n    && rm -r /etc/guacamole/guacamole-server-${GUACAMOLE_VERSION}*\n\n# Create Guacamole configurations (user-mapping.xml gets filled in the startup.sh script)\nRUN echo \"user-mapping: /etc/guacamole/user-mapping.xml\" > /etc/guacamole/guacamole.properties\n\n# Add Visual Studio code and nextcloud client\nRUN curl -f https://packages.microsoft.com/keys/microsoft.asc | gpg --batch --dearmor > microsoft.gpg \\\n    && mv microsoft.gpg /etc/apt/trusted.gpg.d/microsoft.gpg \\\n    && echo \"deb [arch=amd64] http://packages.microsoft.com/repos/vscode stable main\" | tee /etc/apt/sources.list.d/vs-code.list \\\n    && add-apt-repository ppa:nextcloud-devs/client\n\n# Add CVMFS\nRUN wget -q https://ecsft.cern.ch/dist/cvmfs/cvmfs-release/cvmfs-release-latest_all.deb -O /tmp/cvmfs-release-latest_all.deb \\\n    && dpkg -i /tmp/cvmfs-release-latest_all.deb \\\n    && rm /tmp/cvmfs-release-latest_all.deb\n\n# Add datalad\nRUN wget -q -O- https://neuro.debian.net/lists/focal.us-nh.full | sudo tee /etc/apt/sources.list.d/neurodebian.sources.list\nRUN apt-key adv --recv-keys --keyserver hkps://keyserver.ubuntu.com 0xA5D32F012649A5A9\n\n# Install basic tools\nRUN apt-get update \\\n    && DEBIAN_FRONTEND=noninteractive apt-get install --no-install-recommends -y \\\n        cryptsetup \\\n        squashfs-tools \\\n        lua-bit32 \\\n        lua-filesystem \\\n        lua-json \\\n        lua-lpeg \\\n        lua-posix \\\n        lua-term \\\n        lua5.2 \\\n        lmod \\\n        aria2 \\\n        code \\\n        emacs \\\n        gedit \\\n        htop \\\n        imagemagick \\\n        less \\\n        nano \\\n        openssh-client \\\n        rsync \\\n        screen \\\n        tree \\\n        vim \\\n        gcc \\\n        graphviz \\\n        libzstd1 \\\n        libgfortran5 \\\n        zlib1g-dev \\\n        zip \\\n        unzip \\\n        nextcloud-client \\\n        iputils-ping \\\n        sshfs \\\n        build-essential \\\n        uuid-dev \\\n        libgpgme-dev \\\n        squashfs-tools \\\n        libseccomp-dev \\\n        pkg-config \\\n        git \\\n        cryptsetup-bin\\\n        lsb-release \\\n        cvmfs \\\n        rclone \\\n        davfs2 \\\n        owncloud-client \\\n        firefox \\\n        gnome-keyring \\\n        xdg-utils \\\n        libpci3 \\\n        tk \\\n        tcllib \\\n        datalad \\\n        python3-pip \\\n        python3 \\\n        lxtask \\\n        qdirstat \\\n    && rm -rf /var/lib/apt/lists/* \\\n    && rm /etc/apt/sources.list.d/vs-code.list\n\n# Configure CVMFS\nRUN mkdir -p /etc/cvmfs/keys/ardc.edu.au/ \\\n    && echo \"-----BEGIN PUBLIC KEY-----\" | sudo tee /etc/cvmfs/keys/ardc.edu.au/neurodesk.ardc.edu.au.pub \\\n    && echo \"MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAwUPEmxDp217SAtZxaBep\" | sudo tee -a /etc/cvmfs/keys/ardc.edu.au/neurodesk.ardc.edu.au.pub \\\n    && echo \"Bi2TQcLoh5AJ//HSIz68ypjOGFjwExGlHb95Frhu1SpcH5OASbV+jJ60oEBLi3sD\" | sudo tee -a /etc/cvmfs/keys/ardc.edu.au/neurodesk.ardc.edu.au.pub \\\n    && echo \"qA6rGYt9kVi90lWvEjQnhBkPb0uWcp1gNqQAUocybCzHvoiG3fUzAe259CrK09qR\" | sudo tee -a /etc/cvmfs/keys/ardc.edu.au/neurodesk.ardc.edu.au.pub \\\n    && echo \"pX8sZhgK3eHlfx4ycyMiIQeg66AHlgVCJ2fKa6fl1vnh6adJEPULmn6vZnevvUke\" | sudo tee -a /etc/cvmfs/keys/ardc.edu.au/neurodesk.ardc.edu.au.pub \\\n    && echo \"I6U1VcYTKm5dPMrOlY/fGimKlyWvivzVv1laa5TAR2Dt4CfdQncOz+rkXmWjLjkD\" | sudo tee -a /etc/cvmfs/keys/ardc.edu.au/neurodesk.ardc.edu.au.pub \\\n    && echo \"87WMiTgtKybsmMLb2yCGSgLSArlSWhbMA0MaZSzAwE9PJKCCMvTANo5644zc8jBe\" | sudo tee -a /etc/cvmfs/keys/ardc.edu.au/neurodesk.ardc.edu.au.pub \\\n    && echo \"NQIDAQAB\" | sudo tee -a /etc/cvmfs/keys/ardc.edu.au/neurodesk.ardc.edu.au.pub \\\n    && echo \"-----END PUBLIC KEY-----\" | sudo tee -a /etc/cvmfs/keys/ardc.edu.au/neurodesk.ardc.edu.au.pub \\\n    && echo \"CVMFS_USE_GEOAPI=yes\" | sudo tee /etc/cvmfs/config.d/neurodesk.ardc.edu.au.conf \\\n    && echo 'CVMFS_SERVER_URL=\"http://cvmfs.neurodesk.org/cvmfs/@fqrn@;http://cvmfs-ashburn.neurodesk.org/cvmfs/@fqrn@;http://cvmfs-zurich.neurodesk.org/cvmfs/@fqrn@;http://cvmfs-toronto.neurodesk.org/cvmfs/@fqrn@;http://cvmfs-frankfurt.neurodesk.org/cvmfs/@fqrn@;http://cvmfs-sydney.neurodesk.org/cvmfs/@fqrn@;http://cvmfs-brisbane.neurodesk.org/cvmfs/@fqrn@\"' | sudo tee -a /etc/cvmfs/config.d/neurodesk.ardc.edu.au.conf \\\n    && echo 'CVMFS_KEYS_DIR=\"/etc/cvmfs/keys/ardc.edu.au/\"' | sudo tee -a /etc/cvmfs/config.d/neurodesk.ardc.edu.au.conf \\\n    && echo \"CVMFS_HTTP_PROXY=DIRECT\" | sudo tee  /etc/cvmfs/default.local \\\n    && echo \"CVMFS_QUOTA_LIMIT=5000\" | sudo tee -a  /etc/cvmfs/default.local \\\n    && cvmfs_config setup\n\n# Add module script\nCOPY ./config/module.sh /usr/share/\n\n# This should be installed in miniconda environment\n# # Install nipype\n# RUN pip3 install nipype \\\n#     && rm -rf /root/.cache/pip \\\n#     && rm -rf /home/ubuntu/.cache/\n\n# Configure shortcuts for tiling of windows and other openbox desktop mods\nCOPY ./config/rc.xml /etc/xdg/openbox\n\n# Configure ITKsnap\nCOPY ./config/.itksnap.org /etc/skel/.itksnap.org\nCOPY ./config/mimeapps.list /etc/skel/.config/mimeapps.list\n\n# Apply custom bottom panel configuration\nCOPY ./config/panel /etc/skel/.config/lxpanel/LXDE/panels/panel\n\n# Allow the root user to access the sshfs mount\n# https://github.com/NeuroDesk/neurodesk/issues/47\nRUN sed -i 's/#user_allow_other/user_allow_other/g' /etc/fuse.conf\n\n# Fetch singularity bind mount list\nRUN mkdir -p $( curl -f https://raw.githubusercontent.com/NeuroDesk/neurocontainers/master/recipes/globalMountPointList.txt)\n\n# Install singularity\nARG GO_VERSION=\"1.17.2\"\nARG SINGULARITY_VERSION=\"3.9.3\"\nRUN export VERSION=${GO_VERSION} OS=linux ARCH=amd64 \\\n    && wget -q https://dl.google.com/go/go$VERSION.$OS-$ARCH.tar.gz \\\n    && sudo tar -C /usr/local -xzvf go$VERSION.$OS-$ARCH.tar.gz \\\n    && rm go$VERSION.$OS-$ARCH.tar.gz \\\n    && export GOPATH=${HOME}/go \\\n    && export PATH=/usr/local/go/bin:${PATH}:${GOPATH}/bin \\\n    && mkdir -p $GOPATH/src/github.com/sylabs \\\n    && cd $GOPATH/src/github.com/sylabs \\\n    && wget -q https://github.com/sylabs/singularity/releases/download/v${SINGULARITY_VERSION}/singularity-ce-${SINGULARITY_VERSION}.tar.gz \\\n    && tar -xzvf singularity-ce-${SINGULARITY_VERSION}.tar.gz \\\n    && cd singularity-ce-${SINGULARITY_VERSION} \\\n    && ./mconfig --prefix=/usr/local/singularity \\\n    && make -C builddir \\\n    && make -C builddir install \\\n    && cd .. \\\n    && rm -rf singularity-ce-${SINGULARITY_VERSION} \\\n    && rm -rf /usr/local/go $GOPATH \\\n    && ln -s /usr/local/singularity/bin/singularity /bin/ && rm singularity-ce-${SINGULARITY_VERSION}.tar.gz\n\n# Setup module system & singularity\nCOPY ./config/.bashrc /tmp/.bashrc\nRUN cat /tmp/.bashrc >> /etc/skel/.bashrc && rm /tmp/.bashrc \\\n    && directories=$( curl -f https://raw.githubusercontent.com/NeuroDesk/caid/master/recipes/globalMountPointList.txt) \\\n    && mounts=`echo $directories | sed 's/ /,/g'` \\\n    && echo \"export SINGULARITY_BINDPATH=${mounts},/neurodesktop-storage\" >> /etc/skel/.bashrc\n\n# add Globus client (requires tk and tcllib -> installed earlier to speed up build)\nWORKDIR /opt/globusconnectpersonal\nRUN wget -q https://downloads.globus.org/globus-connect-personal/linux/stable/globusconnectpersonal-latest.tgz \\\n    && tar xzf globusconnectpersonal-latest.tgz \\\n    && rm -rf globusconnectpersonal-latest.tgz\n\n# Desktop styling\nCOPY config/desktop_wallpaper.jpg /usr/share/lxde/wallpapers/desktop_wallpaper.jpg\nCOPY config/pcmanfm.conf /etc/xdg/pcmanfm/LXDE/pcmanfm.conf\nCOPY config/lxterminal.conf /usr/share/lxterminal/lxterminal.conf\n\n# Change firefox home\nRUN echo 'pref(\"browser.startup.homepage\", \"http://neurodesk.github.io\", locked);' >> /etc/firefox/syspref.js \\\n    && echo 'pref(\"browser.startup.firstrunSkipsHomepage\", true, locked);' >> /etc/firefox/syspref.js \\\n    && echo 'pref(\"startup.homepage_welcome_url\", \"http://neurodesk.github.io\", locked);' >> /etc/firefox/syspref.js \\\n    && echo 'pref(\"browser.aboutwelcome.enabled\", true, locked);' >> /etc/firefox/syspref.js\n\n# Create link to persistent storage on Desktop (This needs to happen before the users gets created!)\nRUN mkdir -p /etc/skel/Desktop/ \\\n    && ln -s /neurodesktop-storage /etc/skel/Desktop/storage \\\n    && ln -s /neurodesktop-storage /etc/skel/neurodesktop-storage\n\n# Create shorter link to persistent storage /neurodesktop-storage\nRUN ln -s /neurodesktop-storage /storage\n\n# Add checkversion script\nCOPY ./config/checkversion.sh /usr/share/\n# Add CheckVersion script\nCOPY ./config/CheckVersion.desktop /etc/skel/Desktop\n\n# Create user account with password-less sudo abilities and vnc user\nRUN addgroup --gid 9001 user \\\n    && useradd -s /bin/bash -g user -G sudo -m user \\\n    && /usr/bin/printf '%s\\n%s\\n' 'password' 'password'| passwd user \\\n    && echo \"user ALL=(ALL) NOPASSWD:ALL\" >> /etc/sudoers \\\n    && mkdir /home/user/.vnc \\\n    && chown user /home/user/.vnc \\\n    && /usr/bin/printf '%s\\n%s\\n%s\\n' 'password' 'password' 'n' | su user -c vncpasswd \\\n    && echo -n 'password\\npassword\\nn\\n' | su user -c vncpasswd\n\n# Install Julia\n# WORKDIR /opt\n# ARG JULIA_VERSION='1.6.1'\n# ARG JULIA_MAIN_VERSION='1.6'\n# RUN wget https://julialang-s3.julialang.org/bin/linux/x64/${JULIA_MAIN_VERSION}/julia-${JULIA_VERSION}-linux-x86_64.tar.gz \\\n#     && tar zxvf julia-${JULIA_VERSION}-linux-x86_64.tar.gz \\\n#     && rm -rf julia-${JULIA_VERSION}-linux-x86_64.tar.gz \\\n#     && ln -s /opt/julia-${JULIA_VERSION} /opt/julia-latest\n# ENV PATH=$PATH:/opt/julia-${JULIA_VERSION}/bin\n\nUSER user\nWORKDIR /home/user\n\n# Install vscode extensions and configure vscode for miniconda and julia\nENV DONT_PROMPT_WSL_INSTALL=1\n# RUN code --install-extension julialang.language-julia \\\n#     && code --install-extension ms-python.python \\\n#     && code --install-extension ms-python.vscode-pylance \\\n#     && code --install-extension ms-toolsai.jupyter \\\n#     && code --install-extension ms-toolsai.jupyter-keymap \\\n#     && code --install-extension ms-toolsai.jupyter-renderers\nCOPY config/vscode/settings.json /home/user/.config/Code/User/settings.json\n\n# Add libfm script\nRUN mkdir -p /home/user/.config/libfm\nCOPY ./config/libfm.conf /home/user/.config/libfm\n\nRUN touch /home/user/.sudo_as_admin_successful\n\n# This doesn't work if we install extensions - can we do this in the startup file and move the folder over once the persistent storage?\n# # Link vscode config to persistant storage\n# RUN mkdir -p /home/user/.config \\\n#     && ln -s /neurodesktop-storage/.config/Code .config/Code \\\n#     && ln -s /neurodesktop-storage/.vscode .vscode\n\n# RUN wget https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh \\\n#     && bash Miniconda3-latest-Linux-x86_64.sh -b \\\n#     && rm Miniconda3-latest-Linux-x86_64.sh \\\n#     && miniconda3/bin/conda init\n\n# Add datalad-container to the conda environment\nRUN pip install --no-cache-dir datalad-container\n\n# Setup git\nRUN git config --global user.email \"user@neurodesk.github.io\"\nRUN git config --global user.name \"Neurodesk User\"\n\nUSER root\n\n# make vs code settings editable for user\nRUN chown user /home/user/.config/Code/ -R\n\n# Add entrypoint script\nCOPY config/startup.sh /startup.sh\nRUN chmod +x /startup.sh\n\nWORKDIR /neurodesktop-storage\n\n# Enable entrypoint\nENTRYPOINT [\"sudo\", \"-E\", \"/startup.sh\"]\n\n# Install neurocommand\nADD \"http://api.github.com/repos/NeuroDesk/neurocommand/commits/main\" /tmp/skipcache\nRUN rm /tmp/skipcache \\\n    && git clone https://github.com/NeuroDesk/neurocommand.git /neurocommand \\\n    && cd /neurocommand \\\n    && bash build.sh --lxde --edit \\\n    && bash install.sh \\\n    && ln -s /neurodesktop-storage/containers /neurocommand/local/containers\n"
}