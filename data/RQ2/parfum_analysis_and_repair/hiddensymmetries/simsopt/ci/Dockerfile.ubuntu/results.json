{
  "startTime": 1674246855256,
  "endTime": 1674246859376,
  "originalSmells": [
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 18,
        "lineEnd": 18,
        "columnStart": 4,
        "columnEnd": 15
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 16,
        "lineEnd": 16,
        "columnStart": 4,
        "columnEnd": 33
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 5,
        "lineEnd": 7,
        "columnStart": 4,
        "columnEnd": 40
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 81,
        "lineEnd": 83,
        "columnStart": 4,
        "columnEnd": 28
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 5,
        "lineEnd": 7,
        "columnStart": 4,
        "columnEnd": 40
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 81,
        "lineEnd": 83,
        "columnStart": 4,
        "columnEnd": 28
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# First stage\n# ===================================\nFROM ubuntu:20.04 as intermediate\n\nRUN apt update && \\\n    DEBIAN_FRONTEND=noninteractive apt-get --no-install-recommends install -y build-essential gfortran git m4 wget cmake \\\n    libopenblas-dev libfftw3-dev libhdf5-dev libhdf5-serial-dev libnetcdf-dev libnetcdff-dev libgl1-mesa-dev \\\n    python3-dev python3-pip python3-venv && rm -rf /var/lib/apt/lists/*;\n\n# Install mpich manually\nWORKDIR /src\nARG mpich=3.3\nARG mpich_prefix=mpich-$mpich\n\nRUN \\\n    wget https://www.mpich.org/static/downloads/$mpich/$mpich_prefix.tar.gz && \\\n    tar xvzf $mpich_prefix.tar.gz   && \\\n    cd $mpich_prefix && \\\n    ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" && \\\n    make -j 4 && \\\n    make install && \\\n    make clean && \\\n    cd .. && \\\n    rm -rf $mpich_prefix && rm $mpich_prefix.tar.gz\n\nRUN /sbin/ldconfig\n\nRUN \\\n    git clone --depth 1 https://github.com/Reference-ScaLAPACK/scalapack.git /src/scalapack && \\\n    cd /src/scalapack && \\\n    CC=mpicc F77=mpif77 FC=mpif90 CXX=mpicxx cmake -DBUILD_SHARED_LIBS=ON -S . -B build && \\\n    cd build && \\\n    make -j 4 && \\\n    cmake --install . && \\\n    cd ../..  && \\\n    rm -rf scalapack\n\nRUN /sbin/ldconfig\n\nRUN python3 -m pip install wheel\nRUN python3 -m venv /venv/\n\nRUN /venv/bin/pip install -U pip\nRUN /venv/bin/python -m pip install numpy scipy jax jaxlib f90nml mpi4py jupyter notebook ipython qsc sympy scikit-build ninja \"pybind11[global]\" cmake\nRUN /venv/bin/pip install git+https://github.com/zhucaoxiang/f90wrap\nENV PATH=\"/venv/bin:${PATH}\"\n\nRUN git clone --depth 1 https://github.com/PrincetonUniversity/SPEC.git /src/SPEC && \\\n    cd /src/SPEC   &&  \\\n    /venv/bin/python setup.py bdist_wheel && \\\n    /venv/bin/pip install -v dist/*.whl\n\nRUN git clone --depth 1 https://github.com/hiddenSymmetries/VMEC2000.git /src/VMEC && \\\n    cd /src/VMEC && \\\n    cp cmake/machines/ubuntu.json cmake_config_file.json && \\\n    /venv/bin/pip install  .\n\nRUN /venv/bin/pip install h5py pyoculus py_spec\nRUN /venv/bin/pip install vtk==9.0.1 pyqt5 matplotlib pyevtk plotly\nRUN /venv/bin/pip install mayavi\nRUN /venv/bin/pip install  git+https://github.com/hiddenSymmetries/booz_xform\nRUN /venv/bin/pip install  git+https://github.com/hiddenSymmetries/virtual-casing\n\nENV CI=True\nRUN git clone --recurse-submodules https://github.com/hiddenSymmetries/simsopt.git /src/simsopt && \\\n    cd /src/simsopt && \\\n    git fetch --tags --all && \\\n    /venv/bin/pip install  -v .\n\n\n# Second stage\n# ===================================\nFROM ubuntu:20.04\n\nLABEL maintainer.name=\"Bharat Medasani\" \\\n      maintainer.email=\"mbkumar.at.gmail\" \\\n      developers=\"Hidden Symmetries Team\" \\\n      version=\"0.07\" \\\n      description=\"Docker file for simsopt container based on ubuntu image\"\n\nRUN apt update && \\\n    DEBIAN_FRONTEND=noninteractive apt-get --no-install-recommends install -y m4 vim emacs nano git wget \\\n    libfftw3-dev libopenblas-dev libhdf5-serial-dev libnetcdf-dev libnetcdff-dev libgl1-mesa-dev \\\n    python3-dev python3-venv && rm -rf /var/lib/apt/lists/*;\n\nCOPY --from=intermediate /venv /venv\nCOPY --from=intermediate /usr/local /usr/local\nRUN /sbin/ldconfig\nCOPY entrypoint.sh /venv/bin\n\n#env PATH=$PATH:/venv/bin\n# ENV OMPI_ALLOW_RUN_AS_ROOT=1 OMPI_ALLOW_RUN_AS_ROOT_CONFIRM=1\nENTRYPOINT [\"bash\", \"/venv/bin/entrypoint.sh\"]\nCMD [\"bash\"]\n"
}