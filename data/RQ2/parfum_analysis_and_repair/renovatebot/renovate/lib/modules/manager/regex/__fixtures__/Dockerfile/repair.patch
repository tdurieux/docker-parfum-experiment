diff --git a/Users/tdurieux/git/dinghy-experiment/data/evaluation/dockerfiles/renovatebot/renovate/lib/modules/manager/regex/__fixtures__/Dockerfile b/Users/tdurieux/git/dinghy-experiment/data/evaluation/dockerfile_repair_results/renovatebot/renovate/lib/modules/manager/regex/__fixtures__/Dockerfile/repaired.Dockerfile
index cac5d01..d407934 100644
--- a/Users/tdurieux/git/dinghy-experiment/data/evaluation/dockerfiles/renovatebot/renovate/lib/modules/manager/regex/__fixtures__/Dockerfile
+++ b/Users/tdurieux/git/dinghy-experiment/data/evaluation/dockerfile_repair_results/renovatebot/renovate/lib/modules/manager/regex/__fixtures__/Dockerfile/repaired.Dockerfile
@@ -3,13 +3,13 @@ FROM amd64/node:10.19.0@sha256:a9d108f82e34c84e6e2a9901fda2048b9f5a40f614c3ea134
 COPY package.json .
 COPY yarn.lock .
 COPY tools tools
-RUN yarn install --frozen-lockfile
+RUN yarn install --frozen-lockfile && yarn cache clean;
 
 COPY lib lib
 COPY tsconfig.json tsconfig.json
 COPY tsconfig.app.json tsconfig.app.json
 
-RUN yarn build:docker
+RUN yarn build:docker && yarn cache clean;
 
 
 FROM amd64/ubuntu:18.04@sha256:0925d086715714114c1988f7c947db94064fd385e171a63c07730f1fa014e6f9
@@ -26,14 +26,14 @@ ENV LC_ALL=C.UTF-8
 ENV LANG=C.UTF-8
 
 RUN apt-get update && \
-  apt-get install -y gpg curl wget unzip xz-utils openssh-client bsdtar build-essential openjdk-11-jre-headless dirmngr && \
+  apt-get install --no-install-recommends -y gpg curl wget unzip xz-utils openssh-client bsdtar build-essential openjdk-11-jre-headless dirmngr && \
   rm -rf /var/lib/apt/lists/*
 
 # The git version of ubuntu 18.04 is too old to sort ref tags properly (see #5477), so update it to the latest stable version
 RUN echo "deb http://ppa.launchpad.net/git-core/ppa/ubuntu bionic main\ndeb-src http://ppa.launchpad.net/git-core/ppa/ubuntu bionic main" > /etc/apt/sources.list.d/git.list && \
   apt-key adv --keyserver keyserver.ubuntu.com --recv-keys E1DD270288B4E6030699E45FA1715D88E1DF1F24 && \
   apt-get update && \
-  apt-get -y install git && \
+  apt-get -y --no-install-recommends install git && \
   rm -rf /var/lib/apt/lists/*
 
 ## Gradle (needs java-jre, installed above)
@@ -59,8 +59,8 @@ RUN ARCH= && dpkgArch="$(dpkg --print-architecture)" \
   arm64) ARCH='arm64';; \
   armhf) ARCH='armv7l';; \
   i386) ARCH='x86';; \
-  *) echo "unsupported architecture"; exit 1 ;; \
-  esac \
+  * echo "unsupported  architecture"; exit 1;; \
+esac \
   # gpg keys listed at https://github.com/nodejs/node#release-keys
   && set -ex \
   && for key in \
@@ -74,12 +74,14 @@ RUN ARCH= && dpkgArch="$(dpkg --print-architecture)" \
   8FCCA13FEF1D0C2E91008E09770F7A9A5AE15600 \
   4ED778F539E3634C779C87C6D7062848A1AB005C \
   A48C2BEE680E841632CD4E44F07496B3EB3C1762 \
-  B9E2F5981AA6E0CD28160D9FF13993A75599653C \
-  ; do \
-  gpg --batch --keyserver hkp://p80.pool.sks-keyservers.net:80 --recv-keys "$key" || \
-  gpg --batch --keyserver hkp://ipv4.pool.sks-keyservers.net --recv-keys "$key" || \
-  gpg --batch --keyserver hkp://pgp.mit.edu:80 --recv-keys "$key" ; \
-  done \
+  B9E2F5981AA6E0CD28160D9FF13993A75599653C; do \
+  
+
+  gpg --batch --keyserver hkp://p80.ha.pool.sks-keyservers.net:80 --recv-keys "$key" || \
+  gpg --batch --keyserver hkp://ipv4.ha.pool.sks-keyservers.net --recv-keys "$key" || \
+  gpg --batch --keyserver hkp://pgp.mit.edu:80 --recv-keys "$key"; \
+ done \
+
   && curl -fsSLO --compressed "https://nodejs.org/dist/v$NODE_VERSION/node-v$NODE_VERSION-linux-$ARCH.tar.xz" \
   && curl -fsSLO --compressed "https://nodejs.org/dist/v$NODE_VERSION/SHASUMS256.txt.asc" \
   && gpg --batch --decrypt --output SHASUMS256.txt SHASUMS256.txt.asc \
@@ -93,7 +95,7 @@ RUN ARCH= && dpkgArch="$(dpkg --print-architecture)" \
 # Erlang
 
 RUN cd /tmp && \
-  curl https://packages.erlang-solutions.com/erlang-solutions_1.0_all.deb -o erlang-solutions_1.0_all.deb && \
+  curl -f https://packages.erlang-solutions.com/erlang-solutions_1.0_all.deb -o erlang-solutions_1.0_all.deb && \
   dpkg -i erlang-solutions_1.0_all.deb && \
   rm -f erlang-solutions_1.0_all.deb
 
@@ -101,14 +103,14 @@ ENV ERLANG_VERSION=22.0.2-1
 
 RUN apt-get update && \
   apt-cache policy esl-erlang && \
-  apt-get install -y esl-erlang=1:$ERLANG_VERSION && \
+  apt-get install --no-install-recommends -y esl-erlang=1:$ERLANG_VERSION && \
   rm -rf /var/lib/apt/lists/*
 
 # Elixir
 
 ENV ELIXIR_VERSION=1.8.2
 
-RUN curl -L https://github.com/elixir-lang/elixir/releases/download/v${ELIXIR_VERSION}/Precompiled.zip -o Precompiled.zip && \
+RUN curl -f -L https://github.com/elixir-lang/elixir/releases/download/v${ELIXIR_VERSION}/Precompiled.zip -o Precompiled.zip && \
   mkdir -p /opt/elixir-${ELIXIR_VERSION}/ && \
   unzip Precompiled.zip -d /opt/elixir-${ELIXIR_VERSION}/ && \
   rm Precompiled.zip
@@ -117,7 +119,7 @@ ENV PATH=$PATH:/opt/elixir-${ELIXIR_VERSION}/bin
 
 # PHP Composer
 
-RUN apt-get update && apt-get install -y php-cli php-mbstring && \
+RUN apt-get update && apt-get install --no-install-recommends -y php-cli php-mbstring && \
   rm -rf /var/lib/apt/lists/*
 
 ENV COMPOSER_VERSION=1.9.3 # github-releases/composer/composer
@@ -128,7 +130,7 @@ RUN chmod +x /usr/local/bin/composer
 
 # Go Modules
 
-RUN apt-get update && apt-get install -y bzr mercurial && \
+RUN apt-get update && apt-get install --no-install-recommends -y bzr mercurial && \
   rm -rf /var/lib/apt/lists/*
 
 ENV GOLANG_VERSION=1.13.4
@@ -151,7 +153,7 @@ ENV CGO_ENABLED=0
 
 # Python
 
-RUN apt-get update && apt-get install -y python3.8-dev python3.8-venv python3-distutils && \
+RUN apt-get update && apt-get install --no-install-recommends -y python3.8-dev python3.8-venv python3-distutils && \
   rm -rf /var/lib/apt/lists/*
 
 RUN rm -fr /usr/bin/python3 && ln /usr/bin/python3.8 /usr/bin/python3
@@ -159,10 +161,10 @@ RUN rm -rf /usr/bin/python && ln /usr/bin/python3.8 /usr/bin/python
 
 # Pip
 
-RUN curl --silent https://bootstrap.pypa.io/get-pip.py | python
+RUN curl -f --silent https://bootstrap.pypa.io/get-pip.py | python
 
 # CocoaPods
-RUN apt-get update && apt-get install -y ruby ruby2.5-dev && rm -rf /var/lib/apt/lists/*
+RUN apt-get update && apt-get install --no-install-recommends -y ruby ruby2.5-dev && rm -rf /var/lib/apt/lists/*
 RUN ruby --version
 ENV COCOAPODS_VERSION=1.9.0 # rubygems/cocoapods&versioning=ruby
 RUN gem install --no-rdoc --no-ri cocoapods -v ${COCOAPODS_VERSION}
@@ -210,13 +212,13 @@ RUN mix local.rebar --force
 
 ENV PATH="${HOME}/.local/bin:$PATH"
 
-RUN pip install --user pipenv
+RUN pip install --no-cache-dir --user pipenv
 
 # Poetry
 
 ENV POETRY_VERSION=1.0.0 # github-releases/python-poetry/poetry
 
-RUN curl -sSL https://raw.githubusercontent.com/python-poetry/poetry/master/get-poetry.py | python - --version ${POETRY_VERSION}
+RUN curl -f -sSL https://raw.githubusercontent.com/python-poetry/poetry/master/get-poetry.py | python - --version ${POETRY_VERSION}
 
 ENV PATH="${HOME}/.poetry/bin:$PATH"
 RUN poetry config virtualenvs.in-project false
@@ -225,19 +227,19 @@ RUN poetry config virtualenvs.in-project false
 
 ENV NPM_VERSION=6.10.2 # npm/npm
 
-RUN npm install -g npm@$NPM_VERSION
+RUN npm install -g npm@$NPM_VERSION && npm cache clean --force;
 
 # Yarn
 
 ENV YARN_VERSION=1.19.1 # npm/yarn
 
-RUN curl -o- -L https://yarnpkg.com/install.sh | bash -s -- --version ${YARN_VERSION}
+RUN curl -f -o- -L https://yarnpkg.com/install.sh | bash -s -- --version ${YARN_VERSION}
 
 ENV PATH="${HOME}/.yarn/bin:${HOME}/.config/yarn/global/node_modules/.bin:$PATH"
 
 COPY package.json .
 COPY yarn.lock .
-RUN yarn install --production --frozen-lockfile && yarn cache clean
+RUN yarn install --production --frozen-lockfile && yarn cache clean && yarn cache clean;
 RUN rm -f yarn.lock
 COPY --from=tsbuild dist dist
 COPY bin bin