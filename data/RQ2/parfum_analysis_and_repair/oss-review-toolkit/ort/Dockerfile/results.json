{
  "startTime": 1674254257386,
  "endTime": 1674254258799,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 78,
        "lineEnd": 78,
        "columnStart": 4,
        "columnEnd": 123
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 79,
        "lineEnd": 79,
        "columnStart": 4,
        "columnEnd": 50
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 127,
        "lineEnd": 127,
        "columnStart": 4,
        "columnEnd": 90
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 134,
        "lineEnd": 134,
        "columnStart": 4,
        "columnEnd": 72
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 138,
        "lineEnd": 138,
        "columnStart": 4,
        "columnEnd": 86
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 139,
        "lineEnd": 139,
        "columnStart": 4,
        "columnEnd": 120
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 141,
        "lineEnd": 141,
        "columnStart": 4,
        "columnEnd": 110
      }
    },
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 130,
        "lineEnd": 130,
        "columnStart": 4,
        "columnEnd": 81
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 162,
        "lineEnd": 162,
        "columnStart": 4,
        "columnEnd": 74
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# Copyright (C) 2020 Bosch Software Innovations GmbH\n# Copyright (C) 2021-2022 Bosch.IO GmbH\n# Copyright (C) 2021 Alliander N.V.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n#\n# SPDX-License-Identifier: Apache-2.0\n# License-Filename: LICENSE\n\n# Set this to the version ORT should report.\nARG ORT_VERSION=\"DOCKER-SNAPSHOT\"\n\n# Set this to a directory containing CRT-files for custom certificates that ORT and all build tools should know about.\nARG CRT_FILES=\"\"\n\n# Set this to the ScanCode version to use.\nARG SCANCODE_VERSION=\"30.1.0\"\n\nFROM eclipse-temurin:11-jdk-focal AS build\n\nCOPY . /usr/local/src/ort\n\nWORKDIR /usr/local/src/ort\n\n# Gradle build.\nARG ORT_VERSION\nRUN --mount=type=cache,target=/tmp/.gradle/ \\\n    export GRADLE_USER_HOME=/tmp/.gradle/ && \\\n    scripts/import_proxy_certs.sh && \\\n    scripts/set_gradle_proxy.sh && \\\n    sed -i -r 's,(^distributionUrl=)(.+)-all\\.zip$,\\1\\2-bin.zip,' gradle/wrapper/gradle-wrapper.properties && \\\n    sed -i -r '/distributionSha256Sum=[0-9a-f]{64}/d' gradle/wrapper/gradle-wrapper.properties && \\\n    ./gradlew --no-daemon --stacktrace -Pversion=$ORT_VERSION :cli:distTar :helper-cli:startScripts\n\nFROM eclipse-temurin:11-jdk-focal AS run\n\nENV \\\n    # Package manager versions.\n    BOWER_VERSION=1.8.12 \\\n    CARGO_VERSION=0.60.0ubuntu1-0ubuntu1~20.04.1 \\\n    COCOAPODS_VERSION=1.11.2 \\\n    COMPOSER_VERSION=1.10.1-1 \\\n    CONAN_VERSION=1.48.1 \\\n    GO_DEP_VERSION=0.5.4 \\\n    GO_VERSION=1.18.3 \\\n    HASKELL_STACK_VERSION=2.1.3 \\\n    NPM_VERSION=8.5.0 \\\n    PYTHON_PIPENV_VERSION=2018.11.26 \\\n    PYTHON_POETRY_VERSION=1.1.13 \\\n    PYTHON_VIRTUALENV_VERSION=15.1.0 \\\n    SBT_VERSION=1.6.1 \\\n    YARN_VERSION=1.22.10 \\\n    # SDK versions.\n    ANDROID_SDK_VERSION=6858069 \\\n    # Installation directories.\n    ANDROID_HOME=/opt/android-sdk \\\n    GOPATH=/tmp/go\n\nENV DEBIAN_FRONTEND=noninteractive \\\n    PATH=\"$PATH:$GOPATH/bin:/opt/go/bin:/opt/ort/bin\"\n\n# Apt install commands.\nRUN --mount=type=cache,target=/var/cache/apt--mount=type=cache,target=/var/lib/apt \\\n    apt-get update && \\\n    apt-get install -y --no-install-recommends ca-certificates gnupg software-properties-common && \\\n    echo \"deb https://repo.scala-sbt.org/scalasbt/debian all main\" | tee -a /etc/apt/sources.list.d/sbt.list && \\\n    curl -f -ksS \"https://keyserver.ubuntu.com/pks/lookup?op=get&options=mr&search=0x2EE0EA64E40A89B84B2DF73499E82A75642AC823\" | apt-key adv --import - && \\\n    curl -f -sL https://deb.nodesource.com/setup_16.x | bash - && \\\n    add-apt-repository -y ppa:git-core/ppa && \\\n    apt-get update && \\\n    apt-get install -y --no-install-recommends \\\n        # Install general tools required by this Dockerfile.\n        lib32stdc++6 \\\n        libffi-dev \\\n        libgmp-dev \\\n        libxext6 \\\n        libxi6 \\\n        libxrender1 \\\n        libxtst6 \\\n        make \\\n        netbase \\\n        openssh-client \\\n        unzip \\\n        xz-utils \\\n        zlib1g-dev \\\n        # Install VCS tools (no specific versions required here).\n        cvs \\\n        git \\\n        mercurial \\\n        subversion \\\n        # Install package managers (in versions known to work).\n        cargo=$CARGO_VERSION \\\n        composer=$COMPOSER_VERSION \\\n        nodejs \\\n        python-dev \\\n        python-setuptools \\\n        python3-dev \\\n        python3-pip \\\n        python3-setuptools \\\n        ruby-dev \\\n        sbt=$SBT_VERSION \\\n    && \\\n    rm -rf /var/lib/apt/lists/*\n\nCOPY scripts/*.sh /opt/ort/bin/\n\nARG CRT_FILES\nCOPY \"$CRT_FILES\" /tmp/certificates/\n\n# Custom install commands.\nRUN /opt/ort/bin/import_proxy_certs.sh && \\\n    if [ -n \"$CRT_FILES\" ]; then \\\n      /opt/ort/bin/import_certificates.sh /tmp/certificates/; \\\n    fi && \\\n    # Install VCS tools (no specific versions required here).\n    curl -f -ksS https://storage.googleapis.com/git-repo-downloads/repo > /usr/local/bin/repo && \\\n    chmod a+x /usr/local/bin/repo && \\\n    # Install package managers (in versions known to work).\n    npm install --global npm@$NPM_VERSION bower@$BOWER_VERSION yarn@$YARN_VERSION && \\\n    pip install --no-cache-dir wheel && \\\n    pip install --no-cache-dir conan==$CONAN_VERSION poetry==$PYTHON_POETRY_VERSION pipenv==$PYTHON_PIPENV_VERSION virtualenv==$PYTHON_VIRTUALENV_VERSION && \\\n    # Install golang in order to have `go mod` as package manager.\n    curl -f -ksSO https://dl.google.com/go/go$GO_VERSION.linux-amd64.tar.gz && \\\n    tar -C /opt -xzf go$GO_VERSION.linux-amd64.tar.gz && \\\n    rm go$GO_VERSION.linux-amd64.tar.gz && \\\n    export GOBIN=/opt/go/bin && \\\n    curl -f -ksS https://raw.githubusercontent.com/golang/dep/v$GO_DEP_VERSION/install.sh | sh && \\\n    curl -f -ksS https://raw.githubusercontent.com/commercialhaskell/stack/v$HASKELL_STACK_VERSION/etc/scripts/get-stack.sh | sh && \\\n    # Install SDKs required for analysis.\n    curl -f -Os https://dl.google.com/android/repository/commandlinetools-linux-${ANDROID_SDK_VERSION}_latest.zip && \\\n    unzip -q commandlinetools-linux-${ANDROID_SDK_VERSION}_latest.zip -d $ANDROID_HOME && \\\n    rm commandlinetools-linux-${ANDROID_SDK_VERSION}_latest.zip && \\\n    PROXY_HOST_AND_PORT=${https_proxy#*://} && \\\n    if [ -n \"$PROXY_HOST_AND_PORT\" ]; then \\\n        # While sdkmanager uses HTTPS by default, the proxy type is still called \"http\".\n        SDK_MANAGER_PROXY_OPTIONS=\"--proxy=http --proxy_host=${PROXY_HOST_AND_PORT%:*} --proxy_port=${PROXY_HOST_AND_PORT##*:}\"; \\\n    fi && \\\n    yes | $ANDROID_HOME/cmdline-tools/bin/sdkmanager $SDK_MANAGER_PROXY_OPTIONS --sdk_root=$ANDROID_HOME \"platform-tools\" && \\\n    chmod -R o+w $ANDROID_HOME && \\\n    # Install 'CocoaPods'.\n    gem install cocoapods -v $COCOAPODS_VERSION && npm cache clean --force;\n\n# Add scanners (in versions known to work).\nARG SCANCODE_VERSION\nRUN pip install --no-cache-dir scancode-toolkit==$SCANCODE_VERSION\n\nFROM run AS dist\n\nARG ORT_VERSION\nRUN --mount=type=bind,from=build,source=/usr/local/src/ort/cli/build/distributions/ort-$ORT_VERSION.tar,target=/opt/ort.tar \\\n    tar xf /opt/ort.tar -C /opt/ort --exclude=\"*.bat\" --strip-components 1 && \\\n    /opt/ort/bin/ort requirements && rm /opt/ort.tar\n\nCOPY --from=build /usr/local/src/ort/helper-cli/build/scripts/orth /opt/ort/bin/\nCOPY --from=build /usr/local/src/ort/helper-cli/build/libs/helper-cli-$ORT_VERSION.jar /opt/ort/lib/\n\nENTRYPOINT [\"/opt/ort/bin/ort\"]\n"
}