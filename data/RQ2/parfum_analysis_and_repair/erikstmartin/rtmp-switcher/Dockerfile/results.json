{
  "startTime": 1674248988002,
  "endTime": 1674248988798,
  "originalSmells": [
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 53,
        "lineEnd": 55,
        "columnStart": 4,
        "columnEnd": 50
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 24,
        "lineEnd": 24,
        "columnStart": 4,
        "columnEnd": 50
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 53,
        "lineEnd": 55,
        "columnStart": 4,
        "columnEnd": 50
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 4,
        "lineEnd": 22,
        "columnStart": 22,
        "columnEnd": 18
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 24,
        "lineEnd": 24,
        "columnStart": 4,
        "columnEnd": 50
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 53,
        "lineEnd": 55,
        "columnStart": 4,
        "columnEnd": 50
      }
    }
  ],
  "repairedSmells": [
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 24,
        "lineEnd": 24,
        "columnStart": 4,
        "columnEnd": 50
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 53,
        "lineEnd": 55,
        "columnStart": 4,
        "columnEnd": 50
      }
    }
  ],
  "repairedDockerfile": "FROM nvidia/cuda:11.1-devel-ubuntu20.04 AS build\nRUN apt-get update\n\nRUN echo 'debconf debconf/frontend select Noninteractive' | debconf-set-selections\nRUN apt-get update && apt-get -y --no-install-recommends install \\\n    curl \\\n    openssl \\\n    libssl-dev \\\n    build-essential \\\n    autopoint \\\n    pkg-config \\\n    python3.8 \\\n    git \\\n    unzip \\\n    autoconf \\\n    automake \\\n    libtool \\\n    gstreamer-1.0 \\\n    gstreamer1.0-tools \\\n    libgstreamer-plugins-base1.0-dev \\\n    libnvidia-encode-455 \\\n    libnvidia-decode-455 \\\n    libfdk-aac-dev && rm -rf /var/lib/apt/lists/*;\n\nRUN apt-get -y --no-install-recommends install vim && rm -rf /var/lib/apt/lists/*;\n\nWORKDIR /build/gstreamer\nCOPY build_gst_plugins.sh ./\n\nRUN ./build_gst_plugins.sh\n\n# Install Rust\nRUN curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs -sSf | \\\n      sh -s -- --default-toolchain stable -y\nENV PATH=\"/root/.cargo/bin:${PATH}\"\n\n# create a new empty shell project\nRUN USER=root cargo new --bin /rtmp-switcher\nWORKDIR /rtmp-switcher\n\nCOPY ./Cargo.lock ./Cargo.lock\nCOPY ./Cargo.toml ./Cargo.toml\n\nRUN cargo build --release\nRUN rm src/*.rs\n\nCOPY src ./src\nRUN cargo build --release\n\n# TODO: Install dot (graphviz)\nFROM nvidia/cuda:11.1-runtime-ubuntu20.04\nRUN echo 'debconf debconf/frontend select Noninteractive' | debconf-set-selections\nRUN apt-get update\nRUN apt-get install --no-install-recommends -y libgstreamer1.0-0 gstreamer1.0-plugins-base libgstreamer-plugins-base1.0-dev gstreamer1.0-plugins-good \\\ngstreamer1.0-plugins-bad libgstreamer-plugins-bad1.0-0 gstreamer1.0-plugins-ugly gstreamer1.0-libav gstreamer1.0-doc \\\ngstreamer1.0-tools gstreamer1.0-x fdkaac wget kmod && rm -rf /var/lib/apt/lists/*;\nWORKDIR /build\n# TODO: Is there another way to get libnvcuvid.so and libcuda.so\nRUN wget https://us.download.nvidia.com/XFree86/Linux-x86_64/455.28/NVIDIA-Linux-x86_64-455.28.run && \\\n  chmod +x ./NVIDIA-Linux-x86_64-455.28.run && \\\n  ./NVIDIA-Linux-x86_64-455.28.run -q -a -b --ui none --no-nvidia-modprobe --no-kernel-module\nCOPY --from=build /rtmp-switcher/target/release/switcher /usr/bin/rtmp-switcher\nCOPY --from=build /usr/local/lib/gstreamer-1.0 /usr/lib/x86_64-linux-gnu/gstreamer-1.0\nCMD [\"rtmp-switcher\"]\n"
}