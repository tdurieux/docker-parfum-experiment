{
  "startTime": 1674249763634,
  "endTime": 1674249764456,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 38,
        "lineEnd": 38,
        "columnStart": 4,
        "columnEnd": 50
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 40,
        "lineEnd": 42,
        "columnStart": 4,
        "columnEnd": 79
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM nginx:1.23.0-alpine\nLABEL maintainer=\"Jonas Alfredsson <jonas.alfredsson@protonmail.com>\"\n\nENV CERTBOT_DNS_AUTHENTICATORS \\\n    cloudflare \\\n    cloudxns \\\n    digitalocean \\\n    dnsimple \\\n    dnsmadeeasy \\\n    gehirn \\\n    google \\\n    linode \\\n    luadns \\\n    nsone \\\n    ovh \\\n    rfc2136 \\\n    route53 \\\n    sakuracloud\n\n# Do a single run command to make the intermediary containers smaller.\nRUN set -ex && \\\n# Install packages necessary during the build phase (for all architectures).\n    apk add --no-cache \\\n        bash \\\n        cargo \\\n        curl \\\n        findutils \\\n        libffi \\\n        libffi-dev \\\n        libressl \\\n        libressl-dev \\\n        ncurses \\\n        procps \\\n        python3 \\\n        python3-dev \\\n        sed \\\n    && \\\n# Install the latest version of PIP, Setuptools and Wheel.\n    curl -f -L 'https://bootstrap.pypa.io/get-pip.py' | python3 && \\\n# Install certbot.\n    pip3 install --no-cache-dir -U cffi certbot \\\n# And the supported extra authenticators\n        $(echo $CERTBOT_DNS_AUTHENTICATORS | sed 's/\\(^\\| \\)/\\1certbot-dns-/g') \\\n    && \\\n# Remove everything that is no longer necessary.\n    apk del \\\n        cargo \\\n        curl \\\n        libffi-dev \\\n        libressl-dev \\\n        python3-dev \\\n    && \\\n    rm -rf /root/.cache && \\\n    rm -rf /root/.cargo && \\\n# Create new directories and set correct permissions.\n    mkdir -p /var/www/letsencrypt && \\\n    mkdir -p /etc/nginx/user_conf.d && \\\n    chown 82:82 -R /var/www \\\n    && \\\n# Symlink libressl so it is invoked when \"openssl\" is called by the scripts.\n    ln -s /usr/bin/libressl /usr/bin/openssl \\\n    && \\\n# Make sure there are no surprise config files inside the config folder.\n    rm -f /etc/nginx/conf.d/*\n\n# Copy in our \"default\" Nginx server configurations, which make sure that the\n# ACME challenge requests are correctly forwarded to certbot and then redirects\n# everything else to HTTPS.\nCOPY nginx_conf.d/ /etc/nginx/conf.d/\n\n# Copy in all our scripts and make them executable.\nCOPY scripts/ /scripts\nRUN chmod +x -R /scripts && \\\n# Make so that the parent's entrypoint script is properly triggered (issue #21).\n    sed -ri '/^if \\[ \"\\$1\" = \"nginx\" -o \"\\$1\" = \"nginx-debug\" \\]; then$/,${s//if echo \"$1\" | grep -q \"nginx\"; then/;b};$q1' /docker-entrypoint.sh\n\n# Create a volume to have persistent storage for the obtained certificates.\nVOLUME /etc/letsencrypt\n\n# The Nginx parent Docker image already expose port 80, so we only need to add\n# port 443 here.\nEXPOSE 443\n\n# Change the container's start command to launch our Nginx and certbot\n# management script.\nCMD [ \"/scripts/start_nginx_certbot.sh\" ]\n"
}