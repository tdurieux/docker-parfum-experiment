{
  "startTime": 1674221076781,
  "endTime": 1674221078774,
  "originalSmells": [
    {
      "rule": "apkAddUseNoCache",
      "position": {
        "lineStart": 23,
        "lineEnd": 23,
        "columnStart": 4,
        "columnEnd": 28
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# Dockerfile\n\n## 前言\n本例讲述了使用dockerfile做一个简单的python网页程序。\n\n## 例子文件\n\n* 四个文件 \n```\n../flask-app/\n├── Dockerfile\n├── app.py\n├── requirements.txt\n└── templates\n    └── index.html\n```\n\n* Dockerfile \n```dockerfile\n# our base image\nFROM alpine:3.5\n\n# Install python and pip\nRUN apk add --no-cache --update py2-pip\n\n# install Python modules needed by the Python app\nCOPY requirements.txt /usr/src/app/\nRUN pip install --no-cache-dir -r /usr/src/app/requirements.txt\n\n# copy files required for the app to run\nCOPY app.py /usr/src/app/\nCOPY templates/index.html /usr/src/app/templates/\n\n# tell the port number the container should expose\nEXPOSE 5000\n\n# run the application\nCMD [\"python\", \"/usr/src/app/app.py\"]\n```\n\n\n* app.py \n```python\nfrom flask import Flask, render_template\nimport random\n\napp = Flask(__name__)\n\n# list of cat images\nimages = [\n    \"http://ak-hdl.buzzfed.com/static/2013-10/enhanced/webdr05/15/9/anigif_enhanced-buzz-26388-1381844103-11.gif\",\n    \"http://ak-hdl.buzzfed.com/static/2013-10/enhanced/webdr01/15/9/anigif_enhanced-buzz-31540-1381844535-8.gif\",\n    \"http://ak-hdl.buzzfed.com/static/2013-10/enhanced/webdr05/15/9/anigif_enhanced-buzz-26390-1381844163-18.gif\",\n    \"http://ak-hdl.buzzfed.com/static/2013-10/enhanced/webdr06/15/10/anigif_enhanced-buzz-1376-1381846217-0.gif\",\n    \"http://ak-hdl.buzzfed.com/static/2013-10/enhanced/webdr03/15/9/anigif_enhanced-buzz-3391-1381844336-26.gif\",\n    \"http://ak-hdl.buzzfed.com/static/2013-10/enhanced/webdr06/15/10/anigif_enhanced-buzz-29111-1381845968-0.gif\",\n    \"http://ak-hdl.buzzfed.com/static/2013-10/enhanced/webdr03/15/9/anigif_enhanced-buzz-3409-1381844582-13.gif\",\n    \"http://ak-hdl.buzzfed.com/static/2013-10/enhanced/webdr02/15/9/anigif_enhanced-buzz-19667-1381844937-10.gif\",\n    \"http://ak-hdl.buzzfed.com/static/2013-10/enhanced/webdr05/15/9/anigif_enhanced-buzz-26358-1381845043-13.gif\",\n    \"http://ak-hdl.buzzfed.com/static/2013-10/enhanced/webdr06/15/9/anigif_enhanced-buzz-18774-1381844645-6.gif\",\n    \"http://ak-hdl.buzzfed.com/static/2013-10/enhanced/webdr06/15/9/anigif_enhanced-buzz-25158-1381844793-0.gif\",\n    \"http://ak-hdl.buzzfed.com/static/2013-10/enhanced/webdr03/15/10/anigif_enhanced-buzz-11980-1381846269-1.gif\"\n]\n\n@app.route('/')\ndef index():\n    url = random.choice(images)\n    return render_template('index.html', url=url)\n\nif __name__ == \"__main__\":\n    app.run(host=\"0.0.0.0\")\n```\n\n* requirements.txt \n```\nFlask==0.10.1\n```\n* index.html\n```html\n<html>\n  <head>\n    <style type=\"text/css\">\n      body {\n        background: black;\n        color: white;\n      }\n      div.container {\n        max-width: 500px;\n        margin: 100px auto;\n        border: 20px solid white;\n        padding: 10px;\n        text-align: center;\n      }\n      h4 {\n        text-transform: uppercase;\n      }\n    </style>\n  </head>\n  <body>\n    <div class=\"container\">\n      <h4>Cat Gif of the day</h4>\n      <img src=\"{{url}}\" />\n      <p><small>Courtesy: <a href=\"http://www.buzzfeed.com/copyranter/the-best-cat-gif-post-in-the-history-of-cat-gifs\">Buzzfeed</a></small></p>\n    </div>\n  </body>\n</html>\n```\n\n## 执行命令\n\n* 编译镜像  \n```\n$ docker build -t <YOUR_USERNAME>/myfirstapp .\n```\n\n* 运行镜像    \n```\n$ docker run -p 8888:5000 --name myfirstapp YOUR_USERNAME/myfirstapp\n```\n\n* 推送镜像到服务器  \n```\ndocker login                            # 使用你的账户登陆dockerhub\ndocker push YOUR_USERNAME/myfirstapp    # 推送到服务器\n```\n\n* 如果后续不再使用可以停止容器，删除镜像  \n```\n$ docker stop myfirstapp            # 停止容器\n$ docker rm myfirstapp              # 删除镜像\n```\n或者 \n```\n$ docker rm -f myfirstapp           # 强制删除镜像\n```\n\n## Dockerfile讲解\n\n下面是一些关于dockerfile的基础使用的一些总结：\n\n* FROM 位于Dockerfile的开始位置，Dockerfile都必须从FROM命令开始.镜像是按层建立的意味着我们可以在一个镜像的基础上建立另外一个镜像.FROM就帮我们定义了一个基础景象，参数是基础镜像的名字，此外我们可以添加Docker cloud用户名，以及维护者以及镜像版本;格式为``username/imagename:version``.\n\n* RUN 是用赖建设我们创造的镜像，对于每个RUN命令，Docker将会执行命令，然后创建一个新的层的镜像，这种机制下我们可以很容易的回滚镜像的状态，RUN的格式是RUN命令加上一个完整格式的shell命令(e.g., RUN mkdir /user/local/foo). 这将会自动在/bin/sh shell中执行，我们可以定义一个不同的Shell，方法如: RUN /bin/bash -c 'mkdir /user/local/foo'。如果需要执行多个命令可以``RUN /bin/sh -c 'cd /usr/share/nginx/html/ && npm install'``,如果需要加更多命令，直接在末尾``'``前添加``&& your cmd``即可。\n\n* COPY 复制本地文件到容器中去；\n\n* CMD 该命令定义了将会在容容器启动后执行的一些命令，和RUN不同的是这条命令不会创建一个新的层，而只会简单的执行命令，每个Dockerfile/image只能又一个cmd命令，如果你想执行多个命令，最好的方法是使用cmd运行一个搅拌，CMD需要我们告诉他在哪里执行这个命令，和RUN不同，CMD例子如下：\n```\n  CMD [\"python\", \"./app.py\"]\n\n  CMD [\"/bin/bash\", \"echo\", \"Hello World\"]\n```\n\n* EXPOSE 暴露一个端口对外提供服务器，它的信息可以通过``$ docker inspect <container-id>``命令获取.\n\n* PUSH 推送镜像到云上去，也可以推送到我们的私有云上去；\n\n如果希望了解更多的dockerfile的编写知识，可以看[Best practices for writing Dockerfiles](https://docs.docker.com/develop/develop-images/dockerfile_best-practices/)\n"
}