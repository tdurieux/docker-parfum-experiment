{
  "startTime": 1674249412988,
  "endTime": 1674249413693,
  "originalSmells": [
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 11,
        "lineEnd": 11,
        "columnStart": 4,
        "columnEnd": 78
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "###################### Image with build tools to compile wheels ###############\nFROM ubuntu:20.04 as wheels\nENV DEBIAN_FRONTEND=noninteractive\n\nLABEL Description=\"Dallinger base docker image\" Version=\"1.0\"\n\nEXPOSE 5000\n\n# Install build dependencies\nRUN apt-get update && \\\n    apt-get install --no-install-recommends -y libpq-dev python3-pip python3-dev enchant tzdata pandoc && \\\n    python3 -m pip install -U pip && \\\n    rm -rf /var/lib/apt/lists/*\n\nCOPY constraints.txt requirements.txt /dallinger/\nWORKDIR /dallinger\n\nRUN --mount=type=cache,target=/root/.cache/pip \\\n    mkdir /wheelhouse && \\\n    python3 -m pip wheel --wheel-dir=/wheelhouse -r requirements.txt -c constraints.txt\n\n\n###################### Dallinger base image ###################################\nFROM ubuntu:20.04 as dallinger\nENV DEBIAN_FRONTEND=noninteractive\nLABEL org.opencontainers.image.source https://github.com/Dallinger/Dallinger\n\n# Install runtime dependencies\nRUN apt-get update && \\\n    apt-get install -y libpq5 python3-pip enchant tzdata --no-install-recommends && \\\n    python3 -m pip install -U pip && \\\n    rm -rf /var/lib/apt/lists/*\n\nCOPY constraints.txt requirements.txt /dallinger/\nWORKDIR /dallinger\n\nRUN --mount=type=bind,source=/wheelhouse,from=wheels,target=/wheelhouse \\\n    (ls -l /wheelhouse || (echo 'You need to enable docker buildkit to build dallinger: DOCKER_BUILDKIT=1' && false) ) &&\\\n    python3 -m pip install --find-links file:///wheelhouse -r requirements.txt -c constraints.txt\n\nCOPY . /dallinger\nRUN python3 -m pip install --find-links file:///wheelhouse -e .[data]\n\n# Add two ENV variables as a fix when using python3, to prevent this error:\n# Click will abort further execution because Python 3 was configured\n# to use ASCII as encoding for the environment.\n# Consult http://click.pocoo.org/python3/for mitigation steps.\nENV LC_ALL C.UTF-8\nENV LANG C.UTF-8\n\nCMD /bin/bash\n\n###################### Dallinger bot image ####################################\nFROM dallinger as dallinger-bot\nENV DEBIAN_FRONTEND=noninteractive\nLABEL org.opencontainers.image.source https://github.com/Dallinger/Dallinger\n\nRUN --mount=type=cache,target=/chromedownload \\\n    apt update && \\\n    `# We install busybox to be able to use wget and later unzip, and to minimize image size` \\\n    apt install -y busybox && \\\n    ([ -f /chromedownload/google-chrome-stable_current_amd64.deb ] || busybox wget https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb -O /chromedownload/google-chrome-stable_current_amd64.deb) &&  \\\n    apt install -y --no-install-recommends /chromedownload/google-chrome-stable_current_amd64.deb && \\\n    rm -rf /var/lib/apt/lists/*\n\nRUN OUR_CHROME_VERSION=$(google-chrome --version |sed \"s/Google Chrome //;s/ //;s/\\.[^.]*$//\") && \\\n    echo Finding the chromedriver version to install for chrome $OUR_CHROME_VERSION && \\\n    CHROMEDRIVER_VERSION=$(busybox wget -O - https://chromedriver.storage.googleapis.com/LATEST_RELEASE_${OUR_CHROME_VERSION}) && \\\n    echo Installing chromedriver $CHROMEDRIVER_VERSION && \\\n    busybox wget https://chromedriver.storage.googleapis.com/${CHROMEDRIVER_VERSION}/chromedriver_linux64.zip -O /tmp/chromedriver_linux64.zip && \\\n    busybox unzip /tmp/chromedriver_linux64.zip -d /usr/local/bin/ && \\\n    rm /tmp/chromedriver_linux64.zip\n"
}