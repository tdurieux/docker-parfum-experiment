{
  "startTime": 1674254208185,
  "endTime": 1674254208997,
  "originalSmells": [
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 74,
        "lineEnd": 74,
        "columnStart": 4,
        "columnEnd": 62
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 75,
        "lineEnd": 75,
        "columnStart": 4,
        "columnEnd": 29
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 77,
        "lineEnd": 77,
        "columnStart": 4,
        "columnEnd": 76
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 78,
        "lineEnd": 78,
        "columnStart": 4,
        "columnEnd": 34
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 88,
        "lineEnd": 88,
        "columnStart": 4,
        "columnEnd": 28
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 95,
        "lineEnd": 95,
        "columnStart": 4,
        "columnEnd": 33
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 7,
        "lineEnd": 37,
        "columnStart": 40,
        "columnEnd": 10
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 50,
        "lineEnd": 50,
        "columnStart": 7,
        "columnEnd": 35
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 7,
        "lineEnd": 37,
        "columnStart": 40,
        "columnEnd": 10
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 50,
        "lineEnd": 50,
        "columnStart": 7,
        "columnEnd": 35
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM ubuntu:20.04\nMAINTAINER Soo Lee (duplexa@gmail.com)\n\n\n# general updates & installing necessary Linux components\nENV DEBIAN_FRONTEND=noninteractive\nENV TZ=Etc/UTC\nRUN apt update -y && apt upgrade -y && apt install --no-install-recommends -y \\\n    apt-transport-https \\\n    bzip2 \\\n    ca-certificates \\\n    cron \\\n    curl \\\n    fuse \\\n    gcc \\\n    g++ \\\n    git \\\n    less \\\n    locales \\\n    make \\\n    python3 \\\n    python3-pip \\\n    time \\\n    unzip \\\n    vim \\\n    wget \\\n    software-properties-common \\\n    build-essential \\\n    libssl-dev \\\n    libwww-perl \\\n    libdatetime-perl \\\n    uuid-dev \\\n    libgpgme11-dev \\\n    squashfs-tools \\\n    libseccomp-dev \\\n    pkg-config \\\n    openjdk-8-jre-headless \\\n    nodejs && rm -rf /var/lib/apt/lists/*;\n\nRUN ln -s /usr/bin/python3.8 /usr/bin/python\n#RUN ln -s /usr/bin/pip3 /usr/bin/pip\n\nWORKDIR /usr/local/bin\n\n# docker inside docker\nRUN curl -fsSL https://download.docker.com/linux/ubuntu/gpg | apt-key add - \\\n    && apt-key fingerprint 0EBFCD88 \\\n    && add-apt-repository \"deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable\"\nRUN apt-get update -y \\\n    && apt-cache policy docker-ce \\\n    && apt-get install --no-install-recommends -y docker-ce && rm -rf /var/lib/apt/lists/*;\n\n# singularity\nRUN wget https://golang.org/dl/go1.16.6.linux-amd64.tar.gz && \\\n    tar -xzf go1.16.6.linux-amd64.tar.gz && \\\n    rm go1.16.6.linux-amd64.tar.gz\nRUN export SINGULARITY_VERSION=3.8.1 && \\\n    export PATH=/usr/local/bin/go/bin/:$PATH && \\\n    wget https://github.com/sylabs/singularity/releases/download/v${SINGULARITY_VERSION}/singularity-ce-${SINGULARITY_VERSION}.tar.gz && \\\n    tar -xzf singularity-ce-${SINGULARITY_VERSION}.tar.gz && \\\n    rm singularity-ce-${SINGULARITY_VERSION}.tar.gz && \\\n    cd singularity-ce-${SINGULARITY_VERSION} && \\\n    ./mconfig && \\\n    make -C ./builddir && \\\n    make -C ./builddir install && \\\n    cd .. && \\\n    rm -rf go && \\\n    rm -rf singularity-ce-${SINGULARITY_VERSION}\n\n# goofys\n# RUN curl -O -L http://bit.ly/goofys-latest && chmod +x goofys-latest  # latest is not latest\nRUN wget https://github.com/kahing/goofys/releases/download/v0.24.0/goofys && chmod +x goofys\n\n# python packages\nRUN pip install --no-cache-dir boto3==1.15 awscli==1.18.152 botocore==1.18.11\nRUN pip install --no-cache-dir psutil==5.7.3\n#RUN pip install schema-salad==2.7.20180514132321 cwltool==1.0.20180525185854  # old set up, doesn't work for python3\nRUN pip install --no-cache-dir schema-salad==7.0.20200811075006 cwltool==3.0.20201017180608\nRUN pip install --no-cache-dir ec2metadata==2.0.1\n\n# cromwell for WDL 1.0\nRUN wget https://github.com/broadinstitute/cromwell/releases/download/53.1/cromwell-53.1.jar && \\\n    ln -s cromwell-53.1.jar cromwell.jar\n# Old cromwell for WDL draft-2\nRUN wget https://github.com/broadinstitute/cromwell/releases/download/35/cromwell-35.jar\nRUN wget https://github.com/broadinstitute/cromwell/blob/develop/LICENSE.txt  # cromwell license\n\n# Caper - uses cromwell 59 under the hood\nRUN pip install --no-cache-dir caper==1.6.3\n\n# awsf scripts\nCOPY run.sh .\nCOPY cron.sh .\nRUN chmod +x run.sh cron.sh\nARG version\nRUN pip install --no-cache-dir tibanna==$version\n\n# Move default docker daemon location to mounted EBS\nCOPY daemon.json /etc/docker/daemon.json\n\n\n# supporting UTF-8\nRUN locale-gen \"en_US.UTF-8\" && update-locale LC_ALL=\"en_US.UTF-8\"\nENV LC_ALL=en_US.UTF-8\n\nCMD [\"bash\"]\n"
}