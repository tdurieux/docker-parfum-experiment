{
  "startTime": 1674255914655,
  "endTime": 1674255915791,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 40,
        "lineEnd": 40,
        "columnStart": 4,
        "columnEnd": 47
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 41,
        "lineEnd": 41,
        "columnStart": 4,
        "columnEnd": 83
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 45,
        "lineEnd": 45,
        "columnStart": 4,
        "columnEnd": 77
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 39,
        "lineEnd": 39,
        "columnStart": 4,
        "columnEnd": 29
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 37,
        "lineEnd": 38,
        "columnStart": 4,
        "columnEnd": 73
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 50,
        "lineEnd": 50,
        "columnStart": 22,
        "columnEnd": 80
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# Fourfront (Production) Dockerfile\n# Based off of the cgap-portal Dockerfile\n\n# Debian Buster with Python 3.8.13\nFROM python:3.8.13-slim-buster\n\nMAINTAINER William Ronchetti \"william_ronchetti@hms.harvard.edu\"\n\n# Build Arguments\nARG INI_BASE\nENV INI_BASE=${INI_BASE:-\"fourfront_any_alpha.ini\"}\n\n# Configure (global) Env\n# Note that some important versions are pinned in this statement\nENV NGINX_USER=nginx \\\n    DEBIAN_FRONTEND=noninteractive \\\n    CRYPTOGRAPHY_DONT_BUILD_RUST=1 \\\n    PYTHONFAULTHANDLER=1 \\\n    PYTHONUNBUFFERED=1 \\\n    PYTHONHASHSEED=random \\\n    PIP_NO_CACHE_DIR=off \\\n    PIP_DISABLE_PIP_VERSION_CHECK=on \\\n    PIP_DEFAULT_TIMEOUT=100 \\\n    NVM_VERSION=v0.39.1 \\\n    NODE_VERSION=16.14.0\n\n# Configure Python3.7 venv\nENV VIRTUAL_ENV=/opt/venv\nRUN python -m venv /opt/venv\nENV PATH=\"$VIRTUAL_ENV/bin:$PATH\"\n\n# Install system level dependencies (poetry, nvm, nginx)\n# Note that the ordering of these operations is intentional to minimize package footprint\nWORKDIR /home/nginx/.nvm\nENV NVM_DIR=/home/nginx/.nvm\nCOPY deploy/docker/production/install_nginx.sh /\nRUN apt-get update && apt-get upgrade -y && \\\n    apt-get install -y --no-install-recommends vim emacs net-tools ca-certificates build-essential \\\n    gcc zlib1g-dev postgresql-client libpq-dev git make curl libmagic-dev && \\\n    pip install --no-cache-dir --upgrade pip && \\\n    curl -f -sSL https://install.python-poetry.org | POETRY_HOME=/opt/venv python - && \\\n    curl -f -o- https://raw.githubusercontent.com/nvm-sh/nvm/${NVM_VERSION}/install.sh | bash && \\\n    . \"$NVM_DIR/nvm.sh\" && nvm install ${NODE_VERSION} && \\\n    nvm use v${NODE_VERSION} && \\\n    nvm alias default v${NODE_VERSION} && \\\n    curl -f -o aws-ip-ranges.json https://ip-ranges.amazonaws.com/ip-ranges.json && \\\n    bash /install_nginx.sh && \\\n    chown -R nginx:nginx /opt/venv && \\\n    mkdir -p /home/nginx/fourfront && \\\n    mv aws-ip-ranges.json /home/nginx/fourfront/aws-ip-ranges.json && \\\n    apt-get update && apt-get install -y --no-install-recommends ca-certificates && \\\n    apt-get clean && rm -rf /var/lib/apt/lists/*;\n\n# Link, verify installations\nENV PATH=\"/home/nginx/.nvm/versions/node/v${NODE_VERSION}/bin/:${PATH}\"\n#RUN node --version\n#RUN npm --version\n#RUN nginx --version\n\n# Build application\nWORKDIR /home/nginx/fourfront\n\n# Do the back-end dependency install\nCOPY pyproject.toml .\nCOPY poetry.lock .\nRUN poetry install --no-root --no-dev\n\n# Do the front-end dependency install\nCOPY package.json .\nCOPY package-lock.json .\nRUN npm ci --no-fund --no-progress --no-optional --no-audit --python=/opt/venv/bin/python\n\n# Copy over the rest of the code\nCOPY . .\n\n# Build remaining back-end\nRUN poetry install && \\\n    python setup_eb.py develop && \\\n    make fix-dist-info\n\n# Build front-end, remove node_modules when done\nENV NODE_ENV=production\nRUN npm run build && \\\n    npm run build-scss && \\\n    rm -rf node_modules/\n\n# Copy config files in\n# Remove default configuration from Nginx\nRUN rm /etc/nginx/nginx.conf && \\\n    rm /etc/nginx/conf.d/default.conf\nCOPY deploy/docker/production/nginx.conf /etc/nginx/nginx.conf\n\n# nginx filesystem setup\nRUN chown -R nginx:nginx /var/cache/nginx && \\\n    chown -R nginx:nginx /var/log/nginx && \\\n    chown -R nginx:nginx /etc/nginx/conf.d && \\\n    touch /var/run/nginx.pid && \\\n    chown -R nginx:nginx /var/run/nginx.pid && \\\n    rm -f /var/log/nginx/* && \\\n    touch /var/log/nginx/access.log && \\\n    chown -R nginx:nginx /var/log/nginx/access.log && \\\n    touch /var/log/nginx/error.log && \\\n    chown -R nginx:nginx /var/log/nginx/error.log && \\\n    mkdir -p /data/nginx/cache && \\\n    chown -R nginx:nginx /data/nginx/cache\n\n# Pull all required files\n# Note that *.ini must match the env name in secrets manager!\n# Note that deploy/docker/production/entrypoint.sh resolves which entrypoint to run\n# based on env variable \"application_type\".\nCOPY deploy/docker/local/docker_development.ini development.ini\nCOPY deploy/docker/local/entrypoint.bash entrypoint_local.bash\nRUN chown nginx:nginx development.ini && \\\n    chmod +x entrypoint_local.bash\n\n# Production setup\nRUN touch production.ini && chown nginx:nginx production.ini && \\\n    touch session-secret.b64 && chown nginx:nginx session-secret.b64 && chown nginx:nginx poetry.toml && \\\n    touch supervisord.log && chown nginx:nginx supervisord.log && \\\n    touch supervisord.sock && chown nginx:nginx supervisord.sock && \\\n    touch supervisord.pid && chown nginx:nginx supervisord.pid\nCOPY deploy/docker/production/$INI_BASE deploy/ini_files/.\nCOPY deploy/docker/production/entrypoint.bash .\nCOPY deploy/docker/production/entrypoint_portal.bash .\nCOPY deploy/docker/production/entrypoint_deployment.bash .\nCOPY deploy/docker/production/entrypoint_indexer.bash .\nCOPY deploy/docker/production/supervisord.conf .\n# Note that fourfront does not have an ingester\n# COPY deploy/docker/production/entrypoint_ingester.sh .\nCOPY deploy/docker/production/assume_identity.py .\nRUN chmod +x entrypoint.bash && \\\n    chmod +x entrypoint_deployment.bash && \\\n    chmod +x entrypoint_deployment.bash && \\\n    chmod +x entrypoint_indexer.bash && \\\n    chmod +x assume_identity.py\nEXPOSE 8000\n\n# Container does not run as root\nUSER nginx\n\nENTRYPOINT [\"/home/nginx/fourfront/entrypoint.bash\"]\n"
}