{
  "startTime": 1674255989030,
  "endTime": 1674255989596,
  "originalSmells": [
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 24,
        "lineEnd": 24,
        "columnStart": 40,
        "columnEnd": 95
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 8,
        "lineEnd": 8,
        "columnStart": 5,
        "columnEnd": 53
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 49,
        "lineEnd": 49,
        "columnStart": 22,
        "columnEnd": 44
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "ARG branch=latest\nARG base=cccs/assemblyline\nFROM $base:$branch as builder\nARG version\nARG branch\n\nUSER root\nRUN apt-get update \\\n  && apt-get install --no-install-recommends -yy build-essential libfuzzy-dev \\\n  && rm -rf /var/lib/apt/lists/*\n\n# install pip packages, as assemblyline so they go into our .local with the ones already there\nUSER assemblyline\nRUN touch /tmp/before-pip\nCOPY setup.py dist* dist/\nRUN pip install --no-cache-dir -f dist --user \\\n  assemblyline-core==$version \\\n  assemblyline-service-client==$version \\\n  assemblyline-v4-service==$version \\\n  assemblyline-client \\\n  gunicorn flask gitpython \\\n  && rm -rf ~/.cache/pip\n\n# If this is a latest rather than stable build, try to push for unstable packages of assemblyline dependencies\nRUN if [ \"${branch}\" = \"latest\" ]; then \\\n pip install --no-cache-dir --user --upgrade --pre assemblyline-client; fi\n\n# Remove files that existed before the pip install so that our copy command below doesn't take a snapshot of\n# files that already exist in the base image\nRUN find /var/lib/assemblyline/.local -type f ! -newer /tmp/before-pip -delete\n\n# Switch back to root and change the ownership of the files to be copied due to bitbucket pipeline uid nonsense\nUSER root\nRUN chown root:root -R /var/lib/assemblyline/.local\n\n# Restart a new image, this time the output one\nARG base=cccs/assemblyline\nFROM $base:$branch\n\n# Get the updated local dir from builder\nCOPY --chown=assemblyline:assemblyline --from=builder /var/lib/assemblyline/.local /var/lib/assemblyline/.local\n\n# Setup environment varibles\nENV PYTHONPATH /opt/al_service\nENV SERVICE_API_HOST http://al_service_server:5003\nENV SERVICE_API_KEY ThisIsARandomAuthKey...ChangeMe!\nENV CONTAINER_MODE true\n\nUSER root\n# Install git binary for gitpython pip package\nRUN apt-get update && apt-get install --no-install-recommends -y git && rm -rf /var/lib/apt/lists/*\n\n# Create directory for service\nRUN mkdir -p /opt/al_service\nRUN touch /opt/al_service/__init__.py\nCOPY docker/process_handler.py /etc/\n\n# Create directory for service updates\nRUN mkdir /updates\nRUN chown -R assemblyline:assemblyline /updates\n\nUSER assemblyline\nCMD [\"python\", \"/etc/process_handler.py\"]\n"
}