{
  "startTime": 1674216512499,
  "endTime": 1674216514264,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 187,
        "lineEnd": 187,
        "columnStart": 7,
        "columnEnd": 127
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 190,
        "lineEnd": 190,
        "columnStart": 7,
        "columnEnd": 185
      }
    },
    {
      "rule": "curlUseHttpsUrl",
      "position": {
        "lineStart": 187,
        "lineEnd": 187,
        "columnStart": 7,
        "columnEnd": 127
      }
    },
    {
      "rule": "curlUseHttpsUrl",
      "position": {
        "lineStart": 190,
        "lineEnd": 190,
        "columnStart": 7,
        "columnEnd": 185
      }
    },
    {
      "rule": "aptGetInstallUseY",
      "position": {
        "lineStart": 193,
        "lineEnd": 193,
        "columnStart": 7,
        "columnEnd": 25
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 268,
        "lineEnd": 268,
        "columnStart": 67,
        "columnEnd": 129
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 268,
        "lineEnd": 268,
        "columnStart": 371,
        "columnEnd": 448
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 268,
        "lineEnd": 268,
        "columnStart": 67,
        "columnEnd": 129
      }
    }
  ],
  "repairedSmells": [
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 268,
        "lineEnd": 268,
        "columnStart": 45,
        "columnEnd": 131
      }
    }
  ],
  "repairedDockerfile": "# Generated by: Neurodocker version 0+unknown\n# Latest release: Neurodocker version 0.7.0\n#\n# Thank you for using Neurodocker. If you discover any issues\n# or ways to improve this software, please submit an issue or\n# pull request on our GitHub repository:\n#\n#     https://github.com/ReproNim/neurodocker\n#\n\nFROM ubuntu:bionic-20201119\n\nUSER root\n\nARG DEBIAN_FRONTEND=\"noninteractive\"\n\nENV LANG=\"en_US.UTF-8\" \\\n    LC_ALL=\"en_US.UTF-8\" \\\n    ND_ENTRYPOINT=\"/neurodocker/startup.sh\"\nRUN export ND_ENTRYPOINT=\"/neurodocker/startup.sh\" \\\n    && apt-get update -qq \\\n    && apt-get install -y -q --no-install-recommends \\\n           apt-utils \\\n           bzip2 \\\n           ca-certificates \\\n           curl \\\n           locales \\\n           unzip \\\n    && apt-get clean \\\n    && rm -rf /var/lib/apt/lists/* \\\n    && sed -i -e 's/# en_US.UTF-8 UTF-8/en_US.UTF-8 UTF-8/' /etc/locale.gen \\\n    && dpkg-reconfigure --frontend=noninteractive locales \\\n    && update-locale LANG=\"en_US.UTF-8\" \\\n    && chmod 777 /opt && chmod a+s /opt \\\n    && mkdir -p /neurodocker \\\n    && if [ ! -f \"$ND_ENTRYPOINT\" ]; then \\\n         echo '#!/usr/bin/env bash' >> \"$ND_ENTRYPOINT\" \\\n    &&   echo 'set -e' >> \"$ND_ENTRYPOINT\" \\\n    &&   echo 'export USER=\"${USER:=`whoami`}\"' >> \"$ND_ENTRYPOINT\" \\\n    &&   echo 'if [ -n \"$1\" ]; then \"$@\"; else /usr/bin/env bash; fi' >> \"$ND_ENTRYPOINT\"; \\\n    fi \\\n    && chmod -R 777 /neurodocker && chmod a+s /neurodocker\n\nENTRYPOINT [\"/neurodocker/startup.sh\"]\n\nRUN apt-get update -qq \\\n    && apt-get install -y -q --no-install-recommends \\\n           gcc g++ lsb-core bsdtar jq libopenblas-dev tree openjdk-8-jdk libstdc++6 \\\n    && apt-get clean \\\n    && rm -rf /var/lib/apt/lists/*\n\nENV PATH=\"/opt/dcm2niix-v1.0.20190902/bin:$PATH\"\nRUN apt-get update -qq \\\n    && apt-get install -y -q --no-install-recommends \\\n           cmake \\\n           g++ \\\n           gcc \\\n           git \\\n           make \\\n           pigz \\\n           zlib1g-dev \\\n    && apt-get clean \\\n    && rm -rf /var/lib/apt/lists/* \\\n    && git clone https://github.com/rordenlab/dcm2niix /tmp/dcm2niix \\\n    && cd /tmp/dcm2niix \\\n    && git fetch --tags \\\n    && git checkout v1.0.20190902 \\\n    && mkdir /tmp/dcm2niix/build \\\n    && cd /tmp/dcm2niix/build \\\n    && cmake  -DCMAKE_INSTALL_PREFIX:PATH=/opt/dcm2niix-v1.0.20190902 .. \\\n    && make \\\n    && make install \\\n    && rm -rf /tmp/dcm2niix\n\nENV FSLDIR=\"/opt/fsl-6.0.0\" \\\n    PATH=\"/opt/fsl-6.0.0/bin:$PATH\" \\\n    FSLOUTPUTTYPE=\"NIFTI_GZ\" \\\n    FSLMULTIFILEQUIT=\"TRUE\" \\\n    FSLTCLSH=\"/opt/fsl-6.0.0/bin/fsltclsh\" \\\n    FSLWISH=\"/opt/fsl-6.0.0/bin/fslwish\" \\\n    FSLLOCKDIR=\"\" \\\n    FSLMACHINELIST=\"\" \\\n    FSLREMOTECALL=\"\" \\\n    FSLGECUDAQ=\"cuda.q\"\nRUN apt-get update -qq \\\n    && apt-get install -y -q --no-install-recommends \\\n           bc \\\n           dc \\\n           file \\\n           libfontconfig1 \\\n           libfreetype6 \\\n           libgl1-mesa-dev \\\n           libgl1-mesa-dri \\\n           libglu1-mesa-dev \\\n           libgomp1 \\\n           libice6 \\\n           libxcursor1 \\\n           libxft2 \\\n           libxinerama1 \\\n           libxrandr2 \\\n           libxrender1 \\\n           libxt6 \\\n           sudo \\\n           wget \\\n    && apt-get clean \\\n    && rm -rf /var/lib/apt/lists/* \\\n    && echo \"Downloading FSL ...\" \\\n    && mkdir -p /opt/fsl-6.0.0 \\\n    && curl -fsSL --retry 5 https://fsl.fmrib.ox.ac.uk/fsldownloads/fsl-6.0.0-centos6_64.tar.gz \\\n    | tar -xz -C /opt/fsl-6.0.0 --strip-components 1 \\\n    && sed -i '$iecho Some packages in this Docker container are non-free' $ND_ENTRYPOINT \\\n    && sed -i '$iecho If you are considering commercial use of this container, please consult the relevant license:' $ND_ENTRYPOINT \\\n    && sed -i '$iecho https://fsl.fmrib.ox.ac.uk/fsl/fslwiki/Licence' $ND_ENTRYPOINT \\\n    && sed -i '$isource $FSLDIR/etc/fslconf/fsl.sh' $ND_ENTRYPOINT\n\nRUN bash -c 'bash /opt/fsl-6.0.0/etc/fslconf/fslpython_install.sh -f /opt/fsl-6.0.0'\n\nENV FREESURFER_HOME=\"/opt/freesurfer-6.0.0\" \\\n    PATH=\"/opt/freesurfer-6.0.0/bin:$PATH\"\nRUN apt-get update -qq \\\n    && apt-get install -y -q --no-install-recommends \\\n           bc \\\n           libgomp1 \\\n           libxmu6 \\\n           libxt6 \\\n           perl \\\n           tcsh \\\n    && apt-get clean \\\n    && rm -rf /var/lib/apt/lists/* \\\n    && echo \"Downloading FreeSurfer ...\" \\\n    && mkdir -p /opt/freesurfer-6.0.0 \\\n    && curl -fsSL --retry 5 ftp://surfer.nmr.mgh.harvard.edu/pub/dist/freesurfer/6.0.0/freesurfer-Linux-centos6_x86_64-stable-pub-v6.0.0.tar.gz \\\n    | tar -xz -C /opt/freesurfer-6.0.0 --strip-components 1 \\\n         --exclude='freesurfer/average/mult-comp-cor' \\\n         --exclude='freesurfer/lib/cuda' \\\n         --exclude='freesurfer/lib/qt' \\\n         --exclude='freesurfer/subjects/V1_average' \\\n         --exclude='freesurfer/subjects/bert' \\\n         --exclude='freesurfer/subjects/cvs_avg35' \\\n         --exclude='freesurfer/subjects/cvs_avg35_inMNI152' \\\n         --exclude='freesurfer/subjects/fsaverage3' \\\n         --exclude='freesurfer/subjects/fsaverage4' \\\n         --exclude='freesurfer/subjects/fsaverage5' \\\n         --exclude='freesurfer/subjects/fsaverage6' \\\n         --exclude='freesurfer/subjects/fsaverage_sym' \\\n         --exclude='freesurfer/trctrain' \\\n    && sed -i '$isource \"/opt/freesurfer-6.0.0/SetUpFreeSurfer.sh\"' \"$ND_ENTRYPOINT\"\n\nENV LD_LIBRARY_PATH=\"$LD_LIBRARY_PATH:/usr/lib/x86_64-linux-gnu:/opt/matlabmcr-2017b/v93/runtime/glnxa64:/opt/matlabmcr-2017b/v93/bin/glnxa64:/opt/matlabmcr-2017b/v93/sys/os/glnxa64:/opt/matlabmcr-2017b/v93/extern/bin/glnxa64\" \\\n    MATLABCMD=\"/opt/matlabmcr-2017b/v93/toolbox/matlab\"\nRUN export TMPDIR=\"$(mktemp -d)\" \\\n    && apt-get update -qq \\\n    && apt-get install -y -q --no-install-recommends \\\n           bc \\\n           libncurses5 \\\n           libxext6 \\\n           libxmu6 \\\n           libxpm-dev \\\n           libxt6 \\\n    && apt-get clean \\\n    && rm -rf /var/lib/apt/lists/* \\\n    && echo \"Downloading MATLAB Compiler Runtime ...\" \\\n    && curl -fsSL --retry 5 -o \"$TMPDIR/mcr.zip\" https://ssd.mathworks.com/supportfiles/downloads/R2017b/deployment_files/R2017b/installers/glnxa64/MCR_R2017b_glnxa64_installer.zip \\\n    && unzip -q \"$TMPDIR/mcr.zip\" -d \"$TMPDIR/mcrtmp\" \\\n    && \"$TMPDIR/mcrtmp/install\" -destinationFolder /opt/matlabmcr-2017b -mode silent -agreeToLicense yes \\\n    && rm -rf \"$TMPDIR\" \\\n    && unset TMPDIR\n\nENV PATH=\"/opt/afni-latest:$PATH\" \\\n    AFNI_PLUGINPATH=\"/opt/afni-latest\"\nRUN apt-get update -qq \\\n    && apt-get install -y -q --no-install-recommends \\\n           ed \\\n           gsl-bin \\\n           libglib2.0-0 \\\n           libglu1-mesa-dev \\\n           libglw1-mesa \\\n           libgomp1 \\\n           libjpeg62 \\\n           libxm4 \\\n           multiarch-support \\\n           netpbm \\\n           tcsh \\\n           xfonts-base \\\n           xvfb \\\n    && apt-get clean \\\n    && rm -rf /var/lib/apt/lists/* \\\n    && curl -f -sSL --retry 5 -o /tmp/toinstall.deb https://mirrors.kernel.org/debian/pool/main/libx/libxp/libxp6_1.0.2-2_amd64.deb \\\n    && dpkg -i /tmp/toinstall.deb \\\n    && rm /tmp/toinstall.deb \\\n    && curl -f -sSL --retry 5 -o /tmp/toinstall.deb https://snapshot.debian.org/archive/debian-security/20160113T213056Z/pool/updates/main/libp/libpng/libpng12-0_1.2.49-1%2Bdeb7u2_amd64.deb \\\n    && dpkg -i /tmp/toinstall.deb \\\n    && rm /tmp/toinstall.deb \\\n    && apt-get install -y -f \\\n    && apt-get clean \\\n    && rm -rf /var/lib/apt/lists/* \\\n    && gsl2_path=\"$(find / -name 'libgsl.so.19' || printf '')\" \\\n    && if [ -n \"$gsl2_path\" ]; then \\\n         ln -sfv \"$gsl2_path\" \"$(dirname $gsl2_path)/libgsl.so.0\"; \\\n    fi \\\n    && ldconfig \\\n    && echo \"Downloading AFNI ...\" \\\n    && mkdir -p /opt/afni-latest \\\n    && curl -fsSL --retry 5 https://afni.nimh.nih.gov/pub/dist/tgz/linux_openmp_64.tgz \\\n    | tar -xz -C /opt/afni-latest --strip-components 1\n\nENV ANTSPATH=\"/opt/ants-2.3.4\" \\\n    PATH=\"/opt/ants-2.3.4:$PATH\"\nRUN echo \"Downloading ANTs ...\" \\\n    && mkdir -p /opt/ants-2.3.4 \\\n    && curl -fsSL --retry 5 https://dl.dropbox.com/s/gwf51ykkk5bifyj/ants-Linux-centos6_x86_64-v2.3.4.tar.gz \\\n    | tar -xz -C /opt/ants-2.3.4 --strip-components 1\n\nRUN bash -c 'apt-get update && apt-get install -y gnupg2 && wget -O- http://neuro.debian.net/lists/xenial.de-fzj.full | tee /etc/apt/sources.list.d/neurodebian.sources.list && apt-key adv --recv-keys --keyserver hkps://keyserver.ubuntu.com 0xA5D32F012649A5A9 && apt-get update && apt-get install -y connectome-workbench=1.3.2-2~nd16.04+1'\n\nRUN bash -c 'cd /opt/ && wget http://www.fmrib.ox.ac.uk/~steve/ftp/fix1.068.tar.gz && tar xvfz fix1.068.tar.gz && rm fix1.068.tar.gz'\n\nRUN test \"$(getent passwd mica)\" || useradd --no-user-group --create-home --shell /bin/bash mica\nUSER mica\n\nENV CONDA_DIR=\"/opt/miniconda-latest\" \\\n    PATH=\"/opt/miniconda-latest/bin:$PATH\"\nRUN export PATH=\"/opt/miniconda-latest/bin:$PATH\" \\\n    && echo \"Downloading Miniconda installer ...\" \\\n    && conda_installer=\"/tmp/miniconda.sh\" \\\n    && curl -fsSL --retry 5 -o \"$conda_installer\" https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh \\\n    && bash \"$conda_installer\" -b -p /opt/miniconda-latest \\\n    && rm -f \"$conda_installer\" \\\n    && conda update -yq -nbase conda \\\n    && conda config --system --prepend channels conda-forge \\\n    && conda config --system --set auto_update_conda false \\\n    && conda config --system --set show_channel_urls true \\\n    && sync && conda clean -y --all && sync \\\n    && conda create -y -q --name micapipe \\\n    && conda install -y -q --name micapipe \\\n           \"python=3.7\" \\\n           \"certifi==2020.6.20\" \\\n           \"cycler==0.10.0\" \\\n           \"joblib==0.16.0\" \\\n           \"kiwisolver==1.2.0\" \\\n           \"matplotlib==3.3.1\" \\\n           \"nibabel==3.1.1\" \\\n           \"nilearn\" \\\n           \"numpy==1.19.1\" \\\n           \"packaging==20.4\" \\\n           \"pandas==1.1.1\" \\\n           \"pillow==7.2.0\" \\\n           \"pyparsing==2.4.7\" \\\n           \"python-dateutil==2.8.1\" \\\n           \"pytz==2020.1\" \\\n           \"scikit-learn==0.23.2\" \\\n           \"scipy==1.5.2\" \\\n           \"six==1.15.0\" \\\n           \"threadpoolctl==2.1.0\" \\\n           \"vtk==9.0.1\" \\\n    && sync && conda clean -y --all && sync \\\n    && bash -c \"source activate micapipe \\\n    &&   pip install --no-cache-dir  \\\n             \"brainspace==0.1.1\"\\\n             \"argparse==1.1\"\" \\\n    && rm -rf ~/.cache/pip/* \\\n    && sync \\\n    && sed -i '$isource activate micapipe' $ND_ENTRYPOINT\n\nRUN bash -c 'source activate micapipe && conda install -c mrtrix3 mrtrix3==3.0.1 && pip install git+https://github.com/MICA-MNI/ENIGMA.git'\n\nUSER root\n\nRUN set -uex; LD_LIBRARY_PATH=/lib64/:$PATH; apt install --no-install-recommends -y software-properties-common apt-transport-https; apt-key adv --keyserver keyserver.ubuntu.com --recv-keys E298A3A825C0D65DFD57CBB651716619E084DAB9; add-apt-repository 'deb https://cloud.r-project.org/bin/linux/ubuntu bionic-cran35/'; apt update; apt install --no-install-recommends -y r-base libblas-dev liblapack-dev gfortran g++ libgl1-mesa-glx; rm -rf /var/lib/apt/lists/*;\n\nRUN bash -c 'wget https://www.dropbox.com/s/47lu1nojrderls1/install_R_env.sh?dl=0 -O /opt/install_R_env.sh && \\\n                    bash /opt/install_R_env.sh && cd /opt/afni-latest && rPkgsInstall -pkgs ALL'\n\nCOPY [\".\", \"/opt/micapipe\"]\n\nRUN bash -c 'cd /opt/micapipe && mv fix_settings.sh /opt/fix1.068/settings.sh && mv fsl_conf/* /opt/fsl-6.0.0/etc/flirtsch/'\n\n\nRUN bash -c 'mv /opt/micapipe/surfaces/fsaverage5 /opt/freesurfer-6.0.0/subjects'\n\nWORKDIR /home/mica\n\nENV MICAPIPE=\"/opt/micapipe\"\n\nRUN sed -i '$isource /opt/freesurfer-6.0.0/SetUpFreeSurfer.sh' $ND_ENTRYPOINT\n\nRUN sed -i '$iexport FIXPATH=/opt/fix && export PATH=\"${FIXPATH}:${PATH}\"' $ND_ENTRYPOINT\n\nENTRYPOINT [\"/neurodocker/startup.sh\", \"/opt/micapipe/mica-pipe\"]"
}