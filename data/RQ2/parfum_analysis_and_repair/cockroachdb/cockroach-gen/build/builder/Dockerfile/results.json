{
  "startTime": 1674251746786,
  "endTime": 1674251749434,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 152,
        "lineEnd": 152,
        "columnStart": 4,
        "columnEnd": 50
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 92,
        "lineEnd": 92,
        "columnStart": 4,
        "columnEnd": 15
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 182,
        "lineEnd": 182,
        "columnStart": 4,
        "columnEnd": 15
      }
    },
    {
      "rule": "sha256sumEchoOneSpaces",
      "position": {
        "lineStart": 51,
        "lineEnd": 51,
        "columnStart": 4,
        "columnEnd": 125
      }
    },
    {
      "rule": "sha256sumEchoOneSpaces",
      "position": {
        "lineStart": 53,
        "lineEnd": 53,
        "columnStart": 4,
        "columnEnd": 119
      }
    },
    {
      "rule": "sha256sumEchoOneSpaces",
      "position": {
        "lineStart": 55,
        "lineEnd": 55,
        "columnStart": 4,
        "columnEnd": 121
      }
    },
    {
      "rule": "sha256sumEchoOneSpaces",
      "position": {
        "lineStart": 57,
        "lineEnd": 57,
        "columnStart": 4,
        "columnEnd": 124
      }
    },
    {
      "rule": "sha256sumEchoOneSpaces",
      "position": {
        "lineStart": 59,
        "lineEnd": 59,
        "columnStart": 4,
        "columnEnd": 118
      }
    },
    {
      "rule": "sha256sumEchoOneSpaces",
      "position": {
        "lineStart": 105,
        "lineEnd": 105,
        "columnStart": 4,
        "columnEnd": 105
      }
    },
    {
      "rule": "sha256sumEchoOneSpaces",
      "position": {
        "lineStart": 206,
        "lineEnd": 206,
        "columnStart": 5,
        "columnEnd": 112
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 177,
        "lineEnd": 177,
        "columnStart": 4,
        "columnEnd": 129
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 115,
        "lineEnd": 115,
        "columnStart": 4,
        "columnEnd": 84
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 177,
        "lineEnd": 177,
        "columnStart": 4,
        "columnEnd": 129
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 22,
        "lineEnd": 45,
        "columnStart": 4,
        "columnEnd": 11
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 115,
        "lineEnd": 115,
        "columnStart": 4,
        "columnEnd": 84
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 154,
        "lineEnd": 165,
        "columnStart": 4,
        "columnEnd": 9
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 177,
        "lineEnd": 177,
        "columnStart": 4,
        "columnEnd": 129
      }
    }
  ],
  "repairedSmells": [
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 115,
        "lineEnd": 115,
        "columnStart": 4,
        "columnEnd": 84
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 177,
        "lineEnd": 177,
        "columnStart": 4,
        "columnEnd": 153
      }
    }
  ],
  "repairedDockerfile": "FROM ubuntu:focal-20210119\n# If you update the base image above, make sure to also update\n# build/toolchains/toolchainbuild/buildtoolchains.sh accordingly.\n\n# This is the CockroachDB \"builder\" image, which bundles cross-compiling\n# toolchains that can build CockroachDB on all supported platforms.\n\n# autoconf - c-deps: jemalloc\n# automake - sed build\n# autopoint - sed build\n# bison - CRDB build system\n# clang-10 - compiler\n# cmake - c-deps: geos, protobuf, et al.\n# gcc/g++ - host builds\n# gettext - sed build\n# gnupg2 - for apt\n# libncurses-dev - CRDB build system\n# make - CRDB build system\n# python3,python3-venv - awscli install\n# rsync - sed build\n# texinfo - sed build\nRUN apt-get update \\\n && DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends \\\n    apt-transport-https \\\n    autoconf \\\n    automake \\\n    autopoint \\\n    bison \\\n    ca-certificates \\\n    clang-10 \\\n    cmake \\\n    curl \\\n    gcc \\\n    g++ \\\n    gettext \\\n    git \\\n    gnupg2 \\\n    libncurses-dev \\\n    make \\\n    patch \\\n    patchelf \\\n    python-is-python3 \\\n    python3 \\\n    python3.8-venv \\\n    rsync \\\n    texinfo \\\n && apt-get clean \\\n && update-alternatives --install /usr/bin/clang clang /usr/bin/clang-10 100 \\\n    --slave /usr/bin/clang++ clang++ /usr/bin/clang++-10 && rm -rf /var/lib/apt/lists/*;\n\nRUN curl -fsSL https://storage.googleapis.com/public-bazel-artifacts/toolchains/crosstool-ng/20210601-231954/aarch64-unknown-linux-gnu.tar.gz -o aarch64-unknown-linux-gnu.tar.gz \\\n && echo 'ed7ebe618794c0a64aec742d1bf9274302f86a8a81505758c97dc99dab5fd6ab  aarch64-unknown-linux-gnu.tar.gz' | sha256sum -c - \\\n && curl -fsSL https://storage.googleapis.com/public-bazel-artifacts/toolchains/crosstool-ng/20210601-231954/s390x-ibm-linux-gnu.tar.gz -o s390x-ibm-linux-gnu.tar.gz \\\n && echo '93c34d3111e38882fd88f38df33243c52466f703d78e7dd8ac0260c9e1ca35c6  s390x-ibm-linux-gnu.tar.gz' | sha256sum -c - \\\n && curl -fsSL https://storage.googleapis.com/public-bazel-artifacts/toolchains/crosstool-ng/20210601-231954/x86_64-apple-darwin19.tar.gz -o x86_64-apple-darwin19.tar.gz \\\n && echo '79ecc64d57f05cc4eccb3e57ce19fe016a3ba24c00fbe2435650f58168df8937  x86_64-apple-darwin19.tar.gz' | sha256sum -c - \\\n && curl -fsSL https://storage.googleapis.com/public-bazel-artifacts/toolchains/crosstool-ng/20210601-231954/x86_64-unknown-linux-gnu.tar.gz -o x86_64-unknown-linux-gnu.tar.gz \\\n && echo '38f06a929fcc3d1405fe229aa8bc30e57ca78312f4e07e10a68cd3568a64412e  x86_64-unknown-linux-gnu.tar.gz' | sha256sum -c - \\\n && curl -fsSL https://storage.googleapis.com/public-bazel-artifacts/toolchains/crosstool-ng/20210601-231954/x86_64-w64-mingw32.tar.gz -o x86_64-w64-mingw32.tar.gz \\\n && echo '6900b96f7bbd86ba96c4c9704eab6fcb2241fdb5df0a8b9cb3416505a6ef19f7  x86_64-w64-mingw32.tar.gz' | sha256sum -c - \\\n && echo *.tar.gz | xargs -n1 tar -xzf \\\n && rm *.tar.gz\n\n# libtapi is required for later versions of MacOSX.\nRUN git clone https://github.com/tpoechtrager/apple-libtapi.git \\\n    && cd apple-libtapi \\\n    && git checkout a66284251b46d591ee4a0cb4cf561b92a0c138d8 \\\n    && ./build.sh \\\n    && ./install.sh \\\n    && cd .. \\\n    && rm -rf apple-libtapi\n\nRUN mkdir -p /usr/local/lib/ccache \\\n && ln -s /usr/bin/ccache /usr/local/lib/ccache/x86_64-unknown-linux-gnu-cc \\\n && ln -s /usr/bin/ccache /usr/local/lib/ccache/x86_64-unknown-linux-gnu-c++ \\\n && ln -s /usr/bin/ccache /usr/local/lib/ccache/x86_64-w64-mingw32-cc \\\n && ln -s /usr/bin/ccache /usr/local/lib/ccache/x86_64-w64-mingw32-c++ \\\n && ln -s /usr/bin/ccache /usr/local/lib/ccache/aarch64-unknown-linux-gnu-cc \\\n && ln -s /usr/bin/ccache /usr/local/lib/ccache/aarch64-unknown-linux-gnu-c++ \\\n && ln -s /usr/bin/ccache /usr/local/lib/ccache/s390x-ibm-linux-gnu-c++ \\\n && ln -s /usr/bin/ccache /usr/local/lib/ccache/s390x-ibm-linux-gnu-cc \\\n && ln -s /usr/bin/ccache /usr/local/lib/ccache/x86_64-apple-darwin19-cc \\\n && ln -s /usr/bin/ccache /usr/local/lib/ccache/x86_64-apple-darwin19-c++\n\nENV PATH $PATH:/x-tools/x86_64-unknown-linux-gnu/bin:/x-tools/x86_64-w64-mingw32/bin:/x-tools/aarch64-unknown-linux-gnu/bin:/x-tools/s390x-ibm-linux-gnu/bin:/x-tools/x86_64-apple-darwin19/bin\n\n# Compile GNU sed from source to pick up an unreleased change that buffers\n# output. This speeds up compiles on Docker for Mac by *minutes*.\nRUN git clone git://git.sv.gnu.org/sed \\\n && cd sed \\\n && git checkout 8e52c0aff039f0a88127ca131b060050c107b0e2 \\\n && ./bootstrap \\\n && ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" \\\n && make \\\n && make install \\\n && cd .. \\\n && rm -rf sed\n\n# We need a newer version of cmake.\n#\n# NOTE: When upgrading cmake, bump the rebuild counters in\n# c-deps/*-rebuild to force recreating the makefiles. This prevents\n# strange build errors caused by those makefiles depending on the\n# installed version of cmake.\nRUN curl -fsSL https://github.com/Kitware/CMake/releases/download/v3.20.3/cmake-3.20.3-linux-x86_64.tar.gz -o cmake.tar.gz \\\n && echo '97bf730372f9900b2dfb9206fccbcf92f5c7f3b502148b832e77451aa0f9e0e6  cmake.tar.gz' | sha256sum -c - \\\n && tar --strip-components=1 -C /usr -xzf cmake.tar.gz \\\n && rm cmake.tar.gz\n\n# Compile Go from source so that CC defaults to clang instead of gcc. This\n# requires a Go toolchain to bootstrap.\n#\n# NB: care needs to be taken when updating this version because earlier\n# releases of Go will no longer be run in CI once it is changed. Consider\n# bumping the minimum allowed version of Go in /build/go-version-check.sh.\nRUN DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends golang \\\n && curl -fsSL https://storage.googleapis.com/golang/go1.17.11.src.tar.gz -o golang.tar.gz \\\n && echo 'ac2649a65944c6a5abe55054000eee3d77196880da36a3555f62e06540e8eb54  golang.tar.gz' | sha256sum -c - \\\n && tar -C /usr/local -xzf golang.tar.gz \\\n && rm golang.tar.gz \\\n && cd /usr/local/go/src \\\n && GOROOT_BOOTSTRAP=$(go env GOROOT) CC=clang CXX=clang++ ./make.bash && rm -rf /var/lib/apt/lists/*;\n\nENV GOPATH /go\nENV PATH $GOPATH/bin:/usr/local/go/bin:$PATH\n\nRUN mkdir -p \"$GOPATH/src\" \"$GOPATH/bin\" && chmod -R 777 \"$GOPATH\"\nWORKDIR $GOPATH\n\nRUN chmod -R a+w $(go env GOTOOLDIR)\n\n# Allow Go support files in gdb.\nRUN echo \"add-auto-load-safe-path $(go env GOROOT)/src/runtime/runtime-gdb.py\" > ~/.gdbinit\n\n# ccache - speed up C and C++ compilation\n# lsof - roachprod monitor\n# netcat - roachprod monitor\n# netbase - /etc/services etc\n# nodejs - ui\n# openjdk-8-jre - railroad diagram generation\n# google-cloud-sdk - roachprod acceptance tests\n# yarn - ui\n# chrome - ui\n# unzip - for installing awscli\nRUN curl -fsSL https://deb.nodesource.com/gpgkey/nodesource.gpg.key | apt-key add - \\\n && echo 'deb https://deb.nodesource.com/node_16.x focal main' | tee /etc/apt/sources.list.d/nodesource.list \\\n && curl -fsSL https://dl.yarnpkg.com/debian/pubkey.gpg | apt-key add - \\\n && echo 'deb https://dl.yarnpkg.com/debian/ stable main' | tee /etc/apt/sources.list.d/yarn.list \\\n && curl -fsSL https://packages.cloud.google.com/apt/doc/apt-key.gpg | apt-key add - \\\n && echo 'deb https://packages.cloud.google.com/apt cloud-sdk main' | tee /etc/apt/sources.list.d/gcloud.list \\\n && curl -fsSL https://dl-ssl.google.com/linux/linux_signing_key.pub | apt-key add - \\\n && echo \"deb [arch=amd64] https://dl.google.com/linux/chrome/deb/ stable main\" | tee /etc/apt/sources.list.d/google.list \\\n && curl -f https://bazel.build/bazel-release.pub.gpg | apt-key add - \\\n && apt-get update \\\n && DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends \\\n    ccache \\\n    google-cloud-sdk \\\n    lsof \\\n    netcat \\\n    netbase \\\n    nodejs \\\n    openjdk-8-jre \\\n    openssh-client \\\n    yarn \\\n    google-chrome-stable \\\n    unzip && rm -rf /var/lib/apt/lists/*;\n\n# awscli - roachtests\n# NB: we don't use apt-get because we need an up to date version of awscli\n# If you update the below, you should probably also update build/bazelbuilder/Dockerfile.\nRUN curl -fsSL \"https://awscli.amazonaws.com/awscli-exe-linux-x86_64-2.0.30.zip\" -o \"awscliv2.zip\" && \\\n echo \"7ee475f22c1b35cc9e53affbf96a9ffce91706e154a9441d0d39cbf8366b718e  awscliv2.zip\" | sha256sum -c - && \\\n unzip awscliv2.zip && \\\n ./aws/install && \\\n rm -rf aws awscliv2.zip\n\n# git - Upgrade to a more modern version\nRUN DEBIAN_FRONTEND=noninteractive apt-get --no-install-recommends install dh-autoreconf libcurl4-gnutls-dev libexpat1-dev gettext libz-dev libssl-dev -y && \\\n    curl -fsSL https://github.com/git/git/archive/v2.29.2.zip -o \"git-2.29.2.zip\" && \\\n    unzip \"git-2.29.2.zip\" && \\\n    cd git-2.29.2 && \\\n    make configure && \\\n    ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" && \\\n    make && \\\n    make install && \\\n    cd .. && \\\n    rm -rf git-2.29.2.zip git-2.29.2 && rm -rf /var/lib/apt/lists/*;\n\nENV PATH /opt/backtrace/bin:$PATH\n\nRUN apt-get purge -y \\\n    apt-transport-https \\\n    automake \\\n    autopoint \\\n    gettext \\\n    golang \\\n    rsync \\\n    texinfo \\\n && apt-get autoremove -y\n\nRUN rm -rf /tmp/* /var/lib/apt/lists/*\n\nRUN ln -s /go/src/github.com/cockroachdb/cockroach/build/builder/mkrelease.sh /usr/local/bin/mkrelease \\\n  && ln -s /usr/bin/bazel-3.6.0 /usr/bin/bazel\n\nRUN curl -fsSL https://github.com/benesch/autouseradd/releases/download/1.2.0/autouseradd-1.2.0-amd64.tar.gz -o autouseradd.tar.gz \\\n  && echo 'f7b0cf67564044c31ffc5e84c961726098b88b0296a57c84421659d56434a365  autouseradd.tar.gz' | sha256sum -c - \\\n  && tar xzf autouseradd.tar.gz -C / --strip-components 1 \\\n  && chmod +x /usr/local/bin/autouseradd \\\n  && rm autouseradd.tar.gz\n\nCOPY entrypoint.sh /usr/local/bin\n\nENTRYPOINT [\"autouseradd\", \"--user\", \"roach\", \"--no-create-home\", \"--\", \"entrypoint.sh\"]\n"
}