{
  "startTime": 1674215306776,
  "endTime": 1674215307611,
  "originalSmells": [
    {
      "rule": "yarnCacheCleanAfterInstall",
      "position": {
        "lineStart": 19,
        "lineEnd": 19,
        "columnStart": 4,
        "columnEnd": 8
      }
    },
    {
      "rule": "yarnCacheCleanAfterInstall",
      "position": {
        "lineStart": 21,
        "lineEnd": 21,
        "columnStart": 4,
        "columnEnd": 14
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 80,
        "lineEnd": 93,
        "columnStart": 3,
        "columnEnd": 23
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 111,
        "lineEnd": 119,
        "columnStart": 2,
        "columnEnd": 42
      }
    },
    {
      "rule": "apkAddUseNoCache",
      "position": {
        "lineStart": 37,
        "lineEnd": 71,
        "columnStart": 4,
        "columnEnd": 9
      }
    },
    {
      "rule": "apkAddUseNoCache",
      "position": {
        "lineStart": 132,
        "lineEnd": 151,
        "columnStart": 4,
        "columnEnd": 6
      }
    }
  ],
  "repairedSmells": [
    {
      "rule": "yarnCacheCleanAfterInstall",
      "position": {
        "lineStart": 19,
        "lineEnd": 19,
        "columnStart": 12,
        "columnEnd": 28
      }
    },
    {
      "rule": "yarnCacheCleanAfterInstall",
      "position": {
        "lineStart": 21,
        "lineEnd": 21,
        "columnStart": 18,
        "columnEnd": 34
      }
    }
  ],
  "repairedDockerfile": "# set the base image\n# n/b: for production, node is only used for building\n# the static Html and javascript files\n# as react creates static html and js files after build\n# these are what will be served by nginx\n# use alias build to be easier to refer this container elsewhere\n# e.g inside nginx container\nFROM node:12.22.1-alpine3.12\n# set working directory\n# this is the working folder in the container\n# from which the app will be running from\nWORKDIR /app\n# copy everything to /app directory\n# as opposed to on dev, in prod everything is copied to docker\nCOPY ./webtools/ /app\n# add the node_modules folder to $PATH\nENV PATH /app/node_modules/.bin:$PATH\n\n# install and cache dependencies\nRUN yarn && yarn cache clean;\n#build the project for production\nRUN yarn build && yarn cache clean;\n\n##############################\n# Build the NGINX-build image.\nFROM alpine:3.11\nARG NGINX_VERSION=1.15.1\nARG NGINX_RTMP_VERSION=1.2.1\n\nARG FFMPEG_VERSION=earshot-v0.1\n\nARG PREFIX=/opt/ffmpeg\nARG LD_LIBRARY_PATH=/opt/ffmpeg/lib\nARG MAKEFLAGS=\"-j4\"\n\n\n# Build dependencies.\nRUN apk add --no-cache --update \\\n  build-base \\\n  coreutils \\\n  freetype-dev \\\n  gcc \\\n  lame-dev \\\n  libogg-dev \\\n  libass \\\n  libass-dev \\\n  libvpx-dev \\\n  libvorbis-dev \\\n  libwebp-dev \\\n  libtheora-dev \\\n  opus-dev \\\n  openssl \\\n  openssl-dev \\\n  pkgconf \\\n  pkgconfig \\\n  rtmpdump-dev \\\n  wget \\\n  x264-dev \\\n  x265-dev \\\n  yasm \\\n  ca-certificates \\\n  curl \\\n  libc-dev \\\n  libgcc \\\n  linux-headers \\\n  make \\\n  musl-dev \\\n  pcre \\\n  pcre-dev \\\n  zlib-dev \\\n  inotify-tools \\\n  certbot\n\n# Get FFmpeg source.\nRUN cd /tmp/ && \\\n  wget https://github.com/EnvelopSound/ffmpeg/archive/${FFMPEG_VERSION}.tar.gz && \\\n  tar zxf ${FFMPEG_VERSION}.tar.gz && rm ${FFMPEG_VERSION}.tar.gz\n\n# Compile ffmpeg.\nRUN cd /tmp/FFmpeg-${FFMPEG_VERSION} && \\\n   ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" \\\n   --enable-version3 \\\n   --enable-gpl \\\n   --enable-nonfree \\\n   --enable-small \\\n   --enable-libx264 \\\n   --enable-libopus \\\n   --disable-debug \\\n   --disable-doc \\\n   --disable-ffplay \\\n   --extra-cflags=\"-I${PREFIX}/include\" \\\n   --extra-ldflags=\"-L${PREFIX}/lib\" \\\n   --extra-libs=\"-lpthread -lm\" \\\n   --prefix=\"${PREFIX}\" && \\\n    make && make install && make distclean\n\n#COPY /tmp/FFmpeg-${FFMPEG_VERSION}/build/ffmpeg /usr/local/bin/\n\n# Get nginx source.\nRUN cd /tmp && \\\n  wget https://nginx.org/download/nginx-${NGINX_VERSION}.tar.gz && \\\n  tar zxf nginx-${NGINX_VERSION}.tar.gz && \\\n  rm nginx-${NGINX_VERSION}.tar.gz\n\n# Get nginx-rtmp module.\nRUN cd /tmp && \\\n  wget https://github.com/arut/nginx-rtmp-module/archive/v${NGINX_RTMP_VERSION}.tar.gz && \\\n  tar zxf v${NGINX_RTMP_VERSION}.tar.gz && rm v${NGINX_RTMP_VERSION}.tar.gz\n\n# Compile nginx with nginx-rtmp module.\nRUN cd /tmp/nginx-${NGINX_VERSION} && \\\n  ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" \\\n  --prefix=/usr/local/nginx \\\n  --add-module=/tmp/nginx-rtmp-module-${NGINX_RTMP_VERSION} \\\n  --conf-path=/etc/nginx/nginx.conf \\\n  --with-threads \\\n  --with-file-aio \\\n  --with-http_ssl_module \\\n  --with-debug \\\n  --with-cc-opt=\"-Wimplicit-fallthrough=0\" && \\\n  cd /tmp/nginx-${NGINX_VERSION} && make && make install\n\n##########################\n# Build the release image.\nFROM alpine:3.11\nLABEL MAINTAINER Alfred Gutierrez <alf.g.jr@gmail.com>\n\n# Set default ports.\nENV HTTP_PORT 80\nENV HTTPS_PORT 443\nENV RTMP_PORT 1935\n\nRUN apk add --no-cache --update \\\n  ca-certificates \\\n  gettext \\\n  openssl \\\n  pcre \\\n  lame \\\n  libogg \\\n  curl \\\n  libass \\\n  libvpx \\\n  libvorbis \\\n  libwebp \\\n  libtheora \\\n  opus \\\n  rtmpdump \\\n  x264-dev \\\n  x265-dev \\\n  inotify-tools \\\n  certbot \\\n  sudo\n\nCOPY --from=1 /opt/ffmpeg/bin/ffmpeg /usr/local/bin\nCOPY --from=1 /usr/local/nginx /usr/local/nginx\nCOPY --from=1 /etc/nginx /etc/nginx\n\n# Add NGINX path, config and static files.\nENV PATH \"${PATH}:/usr/local/nginx/sbin\"\nADD nginx-transcoder/nginx.conf /etc/nginx/nginx.conf.template\nADD nginx-transcoder/nginx-no-ssl.conf /etc/nginx/nginx-no-ssl.conf.template\nADD nginx-transcoder/static /www/static\n\n# Cleanup.\nRUN rm -rf /var/cache/* /tmp/*\n\n# Copy special FFMPEG build for alpine\n# Uses pkviet's pce2 fork which supports PCE headers in RTMP\n# This is required to properly decode 16.0 RTMP from OBS-ME\n#\n# https://github.com/pkviet/FFmpeg\n\nCOPY --from=0 /app/build /www/webtools\n\nEXPOSE 1935\nEXPOSE 8000\n\n# Add the nginx user since we don't want to run as root\nRUN set -x ; \\\n    addgroup -g 82 nginx ; \\\n    adduser -u 82 -D -h /home/nginx -s /bin/sh -G nginx nginx && exit 0 ; exit 1\n\nCOPY nginx-transcoder/entrypoint.sh nginx-letsencrypt\nCOPY nginx-transcoder/certbot.sh certbot.sh\nCOPY nginx-transcoder/ssl-options/ /etc/ssl-options\nRUN chmod +x nginx-letsencrypt && \\\n    chmod +x certbot.sh\n\n#CMD rm -rf /opt/data && mkdir -p /opt/data/dash && chown nginx /opt/data/dash && chmod 777 /opt/data/dash && mkdir -p /www && \\\n#  envsubst \"$(env | sed -e 's/=.*//' -e 's/^/\\$/g')\" < \\\n#  /etc/nginx/nginx.conf.template > /etc/nginx/nginx.conf && \\\n#nginx\n# SSL usage\nENTRYPOINT [\"./nginx-letsencrypt\"]\n"
}