{
  "startTime": 1674247985668,
  "endTime": 1674247986666,
  "originalSmells": [
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 100,
        "lineEnd": 100,
        "columnStart": 4,
        "columnEnd": 30
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 119,
        "lineEnd": 119,
        "columnStart": 4,
        "columnEnd": 45
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 93,
        "lineEnd": 93,
        "columnStart": 3,
        "columnEnd": 29
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 10,
        "lineEnd": 11,
        "columnStart": 22,
        "columnEnd": 31
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 19,
        "lineEnd": 19,
        "columnStart": 22,
        "columnEnd": 65
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 35,
        "lineEnd": 45,
        "columnStart": 4,
        "columnEnd": 21
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 53,
        "lineEnd": 53,
        "columnStart": 4,
        "columnEnd": 37
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 71,
        "lineEnd": 80,
        "columnStart": 22,
        "columnEnd": 7
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 35,
        "lineEnd": 45,
        "columnStart": 4,
        "columnEnd": 21
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 53,
        "lineEnd": 53,
        "columnStart": 4,
        "columnEnd": 37
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 10,
        "lineEnd": 11,
        "columnStart": 22,
        "columnEnd": 31
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 19,
        "lineEnd": 19,
        "columnStart": 22,
        "columnEnd": 65
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 35,
        "lineEnd": 45,
        "columnStart": 4,
        "columnEnd": 21
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 53,
        "lineEnd": 53,
        "columnStart": 4,
        "columnEnd": 37
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 71,
        "lineEnd": 80,
        "columnStart": 22,
        "columnEnd": 7
      }
    }
  ],
  "repairedSmells": [
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 35,
        "lineEnd": 45,
        "columnStart": 4,
        "columnEnd": 21
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 53,
        "lineEnd": 53,
        "columnStart": 4,
        "columnEnd": 61
      }
    }
  ],
  "repairedDockerfile": "# Installs maskcam on a BalenaOS container (devkit or Photon)\nFROM balenalib/jetson-nano-ubuntu:20210201\n\n# Don't prompt with any configuration questions\nENV DEBIAN_FRONTEND noninteractive\n\n# Switch the nvidia apt source repos and\n# install some utilities\n\nRUN \\\n    apt-get update && apt-get install --no-install-recommends -y \\\n    lbzip2 wget tar python3 git && rm -rf /var/lib/apt/lists/*;\n\nENV UDEV=1\n\n# Download and install BSP binaries for L4T 32.4.2\n# This is mostly from Balena's Alan Boris at:\n# https://github.com/balena-io-playground/jetson-nano-sample-new/blob/master/CUDA/Dockerfile\n\nRUN apt-get update && apt-get install --no-install-recommends -y wget tar python3 libegl1 && \\\n    wget https://developer.nvidia.com/embedded/L4T/r32_Release_v4.2/t210ref_release_aarch64/Tegra210_Linux_R32.4.2_aarch64.tbz2 && \\\n    tar xf Tegra210_Linux_R32.4.2_aarch64.tbz2 && \\\n    cd Linux_for_Tegra && \\\n    sed -i 's/config.tbz2\\\"/config.tbz2\\\" --exclude=etc\\/hosts --exclude=etc\\/hostname/g' apply_binaries.sh && \\\n    sed -i 's/install --owner=root --group=root \\\"${QEMU_BIN}\\\" \\\"${L4T_ROOTFS_DIR}\\/usr\\/bin\\/\\\"/#install --owner=root --group=root \\\"${QEMU_BIN}\\\" \\\"${L4T_ROOTFS_DIR}\\/usr\\/bin\\/\\\"/g' nv_tegra/nv-apply-debs.sh && \\\n    sed -i 's/LC_ALL=C chroot . mount -t proc none \\/proc/ /g' nv_tegra/nv-apply-debs.sh && \\\n    sed -i 's/umount ${L4T_ROOTFS_DIR}\\/proc/ /g' nv_tegra/nv-apply-debs.sh && \\\n    sed -i 's/chroot . \\//  /g' nv_tegra/nv-apply-debs.sh && \\\n    ./apply_binaries.sh -r / --target-overlay && cd .. && \\\n    rm -rf Tegra210_Linux_R32.4.2_aarch64.tbz2 && \\\n    rm -rf Linux_for_Tegra && \\\n    echo \"/usr/lib/aarch64-linux-gnu/tegra\" > /etc/ld.so.conf.d/nvidia-tegra.conf && \\\n    echo \"/usr/lib/aarch64-linux-gnu/tegra-egl\" > /etc/ld.so.conf.d/nvidia-tegra-egl.conf && ldconfig && rm -rf /var/lib/apt/lists/*;\n\n# Install GStreamer and remove unnecessary files\nRUN apt-get install --no-install-recommends -y \\\n    libssl1.0.0 \\\n    libgstreamer1.0-0 \\\n    gstreamer1.0-tools \\\n    gstreamer1.0-plugins-good \\\n    gstreamer1.0-plugins-bad \\\n    gstreamer1.0-plugins-ugly \\\n    gstreamer1.0-libav \\\n    libgstrtspserver-1.0-0 \\\n    libjansson4=2.11-1 \\\n    cuda-toolkit-10-2 && \\\n    ldconfig && rm -rf /var/lib/apt/lists/*;\nRUN \\\n  rm -rf /usr/src/nvidia/graphics_demos \\\n     /usr/local/cuda-10.2/samples \\\n     /usr/local/cuda-10.2/doc\n\n# Install DeepStream\nRUN apt-get install --no-install-recommends -y deepstream-5.0 && \\\n  rm -rf /opt/nvidia/deepstream/deepstream-5.0/samples \\\n     /usr/lib/aarch64-linux-gnu/libcudnn_static_v8.a \\\n     /usr/lib/aarch64-linux-gnu/libcudnn_cnn_infer_static_v8.a \\\n     /usr/lib/aarch64-linux-gnu/libnvinfer_static.a \\\n     /usr/lib/aarch64-linux-gnu/libcudnn_adv_infer_static_v8.a \\\n     /usr/lib/aarch64-linux-gnu/libcublas_static.a \\\n     /usr/lib/aarch64-linux-gnu/libcudnn_adv_train_static_v8.a \\\n     /usr/lib/aarch64-linux-gnu/libcudnn_ops_infer_static_v8.a \\\n     /usr/lib/aarch64-linux-gnu/libcublasLt_static.a \\\n     /usr/lib/aarch64-linux-gnu/libcudnn_cnn_train_static_v8.a \\\n     /usr/lib/aarch64-linux-gnu/libcudnn_ops_train_static_v8.a \\\n     /usr/lib/aarch64-linux-gnu/libmyelin_compiler_static.a \\\n     /usr/lib/aarch64-linux-gnu/libmyelin_executor_static.a \\\n     /usr/lib/aarch64-linux-gnu/libnvinfer_plugin_static.a && \\\n     ldconfig && rm -rf /var/lib/apt/lists/*;\n\n# Install system-level python3 packages\nRUN apt-get update && apt-get install --no-install-recommends -y \\\n  gir1.2-gst-rtsp-server-1.0 \\\n  python3-pip \\\n  python3-opencv \\\n  python3-libnvinfer \\\n  python3-scipy \\\n  cython3 \\\n  python3-sklearn \\\n  python-gi-dev \\\n  unzip && ldconfig && rm -rf /var/lib/apt/lists/*;\n\n# These system-level packages don't provide egg-info files, add them manually so that pip knows\nCOPY docker/opencv_python-3.2.0.egg-info /usr/lib/python3/dist-packages/\nCOPY docker/scikit-learn-0.19.1.egg-info /usr/lib/python3/dist-packages/\n\n# Install gst-python (python bindings for GStreamer)\nRUN \\\n   export GST_CFLAGS=\"-pthread -I/usr/include/gstreamer-1.0 -I/usr/include/glib-2.0 -I/usr/lib/x86_64-linux-gnu/glib-2.0/include\" && \\\n   export GST_LIBS=\"-lgstreamer-1.0 -lgobject-2.0 -lglib-2.0\" && \\\n   git clone https://github.com/GStreamer/gst-python.git && \\\n   cd gst-python && git checkout 1a8f48a && \\\n   ./autogen.sh PYTHON=python3 && \\\n   ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" PYTHON=python3 && \\\n   make && make install\n\n# Install pyds (python bindings for DeepStream)\nRUN cd /opt/nvidia/deepstream/deepstream-5.0/lib && python3 setup.py install\n\n# Upgrade here to avoid re-running on code changes\nRUN pip3 install --no-cache-dir --upgrade pip\n\n# ---- Below steps are run before copying full maskcam code to allow layer caching ----\n\n# Compile YOLOv4 plugin for DeepStream\nCOPY deepstream_plugin_yolov4 /deepstream_plugin_yolov4\nENV CUDA_VER=10.2\nRUN cd /deepstream_plugin_yolov4 && make\n\n# Get TensorRT engine (pretrained YOLOv4-tiny)\n# Model trained on smaller dataset\n# RUN wget -P / https://maskcam.s3.us-east-2.amazonaws.com/facemask_y4tiny_1024_608_fp16.trt\n\n# Model trained on bigger dataset, merged with MAFA, WiderFace, Kaggle Medical Masks and FDDB\nRUN wget -P / https://maskcam.s3.us-east-2.amazonaws.com/maskcam_y4t_1024_608_fp16.trt\n# RUN wget -P / https://maskcam.s3.us-east-2.amazonaws.com/maskcam_y4t_1120_640_fp16.trt\n\n# Install requirements with pinned versions\nCOPY requirements.txt /maskcam_requirements.txt\nRUN pip3 install --no-cache-dir -r /maskcam_requirements.txt\n\n# ---- Note: all layers below this will be re-generated each time code changes ----\n# Copy full maskcam code\nCOPY . /opt/maskcam_1.0/\nWORKDIR /opt/maskcam_1.0\n\n# Move pre-copied files to their maskcam location\n# NOTE: Ignoring errors with `exit 0` to avoid breaking on balena livepush\nRUN rm -r deepstream_plugin_yolov4 && mv /deepstream_plugin_yolov4 . ; exit 0\nRUN mv /*.trt yolo/ ; exit 0\n\n# Preload library to avoids Gst errors \"cannot allocate memory in static TLS block\"\nENV LD_PRELOAD=/usr/lib/aarch64-linux-gnu/libgomp.so.1\n\n# Un-pinned versions of maskcam requirements (comment pip3 install above before this)\n# RUN pip3 install -r requirements.in -c docker/constraints.docker\n\nRUN chmod +x docker/start.sh\nRUN chmod +x maskcam_run.py\nCMD [\"docker/start.sh\"]\n"
}