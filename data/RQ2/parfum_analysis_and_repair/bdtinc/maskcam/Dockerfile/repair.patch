diff --git a/Users/tdurieux/git/dinghy-experiment/data/evaluation/dockerfiles/bdtinc/maskcam/Dockerfile b/Users/tdurieux/git/dinghy-experiment/data/evaluation/dockerfile_repair_results/bdtinc/maskcam/Dockerfile/repaired.Dockerfile
index 5a3e936..d8873c5 100644
--- a/Users/tdurieux/git/dinghy-experiment/data/evaluation/dockerfiles/bdtinc/maskcam/Dockerfile
+++ b/Users/tdurieux/git/dinghy-experiment/data/evaluation/dockerfile_repair_results/bdtinc/maskcam/Dockerfile/repaired.Dockerfile
@@ -8,8 +8,8 @@ ENV DEBIAN_FRONTEND noninteractive
 # install some utilities
 
 RUN \
-    apt-get update && apt-get install -y \
-    lbzip2 wget tar python3 git
+    apt-get update && apt-get install --no-install-recommends -y \
+    lbzip2 wget tar python3 git && rm -rf /var/lib/apt/lists/*;
 
 ENV UDEV=1
 
@@ -17,7 +17,7 @@ ENV UDEV=1
 # This is mostly from Balena's Alan Boris at:
 # https://github.com/balena-io-playground/jetson-nano-sample-new/blob/master/CUDA/Dockerfile
 
-RUN apt-get update && apt-get install -y wget tar python3 libegl1 && \
+RUN apt-get update && apt-get install --no-install-recommends -y wget tar python3 libegl1 && \
     wget https://developer.nvidia.com/embedded/L4T/r32_Release_v4.2/t210ref_release_aarch64/Tegra210_Linux_R32.4.2_aarch64.tbz2 && \
     tar xf Tegra210_Linux_R32.4.2_aarch64.tbz2 && \
     cd Linux_for_Tegra && \
@@ -30,10 +30,10 @@ RUN apt-get update && apt-get install -y wget tar python3 libegl1 && \
     rm -rf Tegra210_Linux_R32.4.2_aarch64.tbz2 && \
     rm -rf Linux_for_Tegra && \
     echo "/usr/lib/aarch64-linux-gnu/tegra" > /etc/ld.so.conf.d/nvidia-tegra.conf && \
-    echo "/usr/lib/aarch64-linux-gnu/tegra-egl" > /etc/ld.so.conf.d/nvidia-tegra-egl.conf && ldconfig
+    echo "/usr/lib/aarch64-linux-gnu/tegra-egl" > /etc/ld.so.conf.d/nvidia-tegra-egl.conf && ldconfig && rm -rf /var/lib/apt/lists/*;
 
 # Install GStreamer and remove unnecessary files
-RUN apt-get install -y \
+RUN apt-get install --no-install-recommends -y \
     libssl1.0.0 \
     libgstreamer1.0-0 \
     gstreamer1.0-tools \
@@ -44,14 +44,14 @@ RUN apt-get install -y \
     libgstrtspserver-1.0-0 \
     libjansson4=2.11-1 \
     cuda-toolkit-10-2 && \
-    ldconfig
+    ldconfig && rm -rf /var/lib/apt/lists/*;
 RUN \
   rm -rf /usr/src/nvidia/graphics_demos \
      /usr/local/cuda-10.2/samples \
-     /usr/local/cuda-10.2/doc 
+     /usr/local/cuda-10.2/doc
 
 # Install DeepStream
-RUN apt-get install -y deepstream-5.0 && \
+RUN apt-get install --no-install-recommends -y deepstream-5.0 && \
   rm -rf /opt/nvidia/deepstream/deepstream-5.0/samples \
      /usr/lib/aarch64-linux-gnu/libcudnn_static_v8.a \
      /usr/lib/aarch64-linux-gnu/libcudnn_cnn_infer_static_v8.a \
@@ -66,10 +66,10 @@ RUN apt-get install -y deepstream-5.0 && \
      /usr/lib/aarch64-linux-gnu/libmyelin_compiler_static.a \
      /usr/lib/aarch64-linux-gnu/libmyelin_executor_static.a \
      /usr/lib/aarch64-linux-gnu/libnvinfer_plugin_static.a && \
-     ldconfig
+     ldconfig && rm -rf /var/lib/apt/lists/*;
 
 # Install system-level python3 packages
-RUN apt-get update && apt-get install -y \
+RUN apt-get update && apt-get install --no-install-recommends -y \
   gir1.2-gst-rtsp-server-1.0 \
   python3-pip \
   python3-opencv \
@@ -78,7 +78,7 @@ RUN apt-get update && apt-get install -y \
   cython3 \
   python3-sklearn \
   python-gi-dev \
-  unzip && ldconfig
+  unzip && ldconfig && rm -rf /var/lib/apt/lists/*;
 
 # These system-level packages don't provide egg-info files, add them manually so that pip knows
 COPY docker/opencv_python-3.2.0.egg-info /usr/lib/python3/dist-packages/
@@ -91,14 +91,14 @@ RUN \
    git clone https://github.com/GStreamer/gst-python.git && \
    cd gst-python && git checkout 1a8f48a && \
    ./autogen.sh PYTHON=python3 && \
-   ./configure PYTHON=python3 && \
+   ./configure --build="$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)" PYTHON=python3 && \
    make && make install
 
 # Install pyds (python bindings for DeepStream)
 RUN cd /opt/nvidia/deepstream/deepstream-5.0/lib && python3 setup.py install
 
 # Upgrade here to avoid re-running on code changes
-RUN pip3 install --upgrade pip
+RUN pip3 install --no-cache-dir --upgrade pip
 
 # ---- Below steps are run before copying full maskcam code to allow layer caching ----
 
@@ -117,7 +117,7 @@ RUN wget -P / https://maskcam.s3.us-east-2.amazonaws.com/maskcam_y4t_1024_608_fp
 
 # Install requirements with pinned versions
 COPY requirements.txt /maskcam_requirements.txt
-RUN pip3 install -r /maskcam_requirements.txt
+RUN pip3 install --no-cache-dir -r /maskcam_requirements.txt
 
 # ---- Note: all layers below this will be re-generated each time code changes ----
 # Copy full maskcam code