{
  "startTime": 1674246492901,
  "endTime": 1674246493891,
  "originalSmells": [
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 8,
        "lineEnd": 8,
        "columnStart": 13,
        "columnEnd": 24
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# Install dependencies only when needed\nFROM node:14-alpine AS deps\nARG NODE_CONFIG_ENV=default\nENV NODE_CONFIG_ENV=${NODE_CONFIG_ENV}\nRUN apk add --no-cache libc6-compat\nWORKDIR /app\nCOPY ./package*.json ./fe/\n# COPY crowdsource-ui/. ./ui/\nRUN cd fe && npm install && cd .. && npm cache clean --force;\n# RUN cd ui && npm install && npm run gulp -- --env=${NODE_CONFIG_ENV}\n\n# Rebuild the source code only when needed\nFROM node:14-alpine AS builder\nARG NODE_CONFIG_ENV=default\nENV NODE_CONFIG_ENV=${NODE_CONFIG_ENV}\nENV NODE_ENV production\nENV NEXT_TELEMETRY_DISABLED 1\nWORKDIR /app\nCOPY ./ .\nCOPY --from=deps /app/fe/node_modules ./node_modules/\n# COPY --from=deps /app/ui/target ./target/\nRUN npm run build:docker\n\n# Production image, copy all the files and run next\nFROM node:14-alpine AS runner\nARG NODE_CONFIG_ENV=default\nENV NODE_CONFIG_ENV=${NODE_CONFIG_ENV}\nENV NODE_ENV production\nENV NEXT_TELEMETRY_DISABLED 1\nWORKDIR /app\n\nRUN addgroup -g 1001 -S nodejs\nRUN adduser -S nextjs -u 1001\n\n# You only need to copy next.config.js if you are NOT using the default configuration\nCOPY --from=builder /app/next.config.js ./\nCOPY --from=builder /app/next-i18next.config.js ./\nCOPY --from=builder /app/server.docker.js ./\nCOPY --from=builder /app/config ./config\n# COPY --from=builder /app/target ./target\nCOPY --from=builder /app/public ./public\nCOPY --from=builder --chown=nextjs:nodejs /app/.next ./.next\nCOPY --from=builder /app/node_modules ./node_modules\nCOPY --from=builder /app/package.json ./package.json\n\nUSER nextjs\n\nEXPOSE 3000\n\nCMD [\"npm\", \"run\", \"start:docker\"]\n"
}