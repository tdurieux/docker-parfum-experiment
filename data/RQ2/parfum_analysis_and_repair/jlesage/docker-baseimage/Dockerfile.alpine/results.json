{
  "startTime": 1674250804935,
  "endTime": 1674250806122,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 36,
        "lineEnd": 36,
        "columnStart": 4,
        "columnEnd": 27
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 107,
        "lineEnd": 107,
        "columnStart": 4,
        "columnEnd": 32
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 110,
        "lineEnd": 110,
        "columnStart": 4,
        "columnEnd": 73
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "#\n# baseimage Dockerfile\n#\n# https://github.com/jlesage/docker-baseimage\n#\n\nARG BASEIMAGE=unknown\n\n# Pull base image.\nFROM ${BASEIMAGE}\n\n# Define s6 overlay related variables.\nARG S6_OVERLAY_ARCH=x86_64\nARG S6_OVERLAY_VERSION=1.21.4.0\nARG S6_OVERLAY_URL=https://github.com/just-containers/s6-overlay/releases/download/v${S6_OVERLAY_VERSION}/s6-overlay-${S6_OVERLAY_ARCH}.tar.gz\n\n# Define GLIBC related variables.\nARG GLIBC_INSTALL=0\nARG GLIBC_ARCH=x86_64\nARG GLIBC_VERSION=2.31-r0\nARG GLIBC_URL=https://github.com/jlesage/glibc-bin-multiarch/releases/download/${GLIBC_VERSION}/glibc-bin-${GLIBC_VERSION}-${GLIBC_ARCH}.tar.gz\nARG GLIBC_LOCALE_INPUT=en_US\nARG GLIBC_LOCALE_CHARMAP=UTF-8\nARG GLIBC_LOCALE=${GLIBC_LOCALE_INPUT}.${GLIBC_LOCALE_CHARMAP}\n\n# Define working directory.\nWORKDIR /tmp\n\n# Copy helpers.\nCOPY helpers/* /usr/local/bin/\n\n# Install glibc if needed.\nRUN \\\n    test \"${GLIBC_INSTALL}\" -eq 0 || ( add-pkg --virtual build-dependencies curl binutils alpine-sdk && \\\n    # Download and install glibc.\n    curl -f -# -L ${GLIBC_URL} | tar xz -C / && \\\n    # Strip symbols.\n    find /usr/glibc-compat/bin -type f -exec strip {} ';' && \\\n    find /usr/glibc-compat/sbin -type f -exec strip {} ';' && \\\n    find /usr/glibc-compat/lib -type f -exec strip {} ';' && \\\n    # Create /etc/nsswitch.conf.\n    echo -n \"hosts: files mdns4_minimal [NOTFOUND=return] dns mdns4\" > /etc/nsswitch.conf && \\\n    # Create /usr/glibc-compat/etc/ld.so.conf\n    echo \"# libc default configuration\" >> /usr/glibc-compat/etc/ld.so.conf && \\\n    echo \"/usr/local/lib\" >> /usr/glibc-compat/etc/ld.so.conf && \\\n    echo \"/usr/glibc-compat/lib\" >> /usr/glibc-compat/etc/ld.so.conf && \\\n    echo \"/usr/lib\" >> /usr/glibc-compat/etc/ld.so.conf && \\\n    echo \"/lib\" >> /usr/glibc-compat/etc/ld.so.conf && \\\n    # Create required symbolic links.\n    mkdir -p /lib /lib64 /usr/glibc-compat/lib/locale && \\\n    ln -s /usr/glibc-compat/lib/ld-linux-x86-64.so.2 /lib/ld-linux-x86-64.so.2 && \\\n    ln -s /usr/glibc-compat/lib/ld-linux-x86-64.so.2 /lib64/ld-linux-x86-64.so.2 && \\\n    ln -s /usr/glibc-compat/etc/ld.so.cache /etc/ld.so.cache && \\\n    # Run ldconfig.\n    /usr/glibc-compat/sbin/ldconfig && \\\n    # Generate locale.\n    /usr/glibc-compat/bin/localedef --inputfile ${GLIBC_LOCALE_INPUT} \\\n                                    --charmap ${GLIBC_LOCALE_CHARMAP} \\\n                                    ${GLIBC_LOCALE} && \\\n    # Timezone support.\n    ln -s /usr/share/zoneinfo /usr/glibc-compat/share/zoneinfo && \\\n    # Add apk trigger.  This is needed so that ldconfig is called automatically\n    # after apk installs libraries.\n    echo 'pkgname=glibc-ldconfig-trigger' >> APKBUILD && \\\n    echo 'pkgver=1.0' >> APKBUILD && \\\n    echo 'pkgrel=0' >> APKBUILD && \\\n    echo 'pkgdesc=\"Dummy package that installs trigger for glibc ldconfig\"' >> APKBUILD && \\\n    echo 'url=\"https://github.com/jlesage/docker-baseimage\"' >> APKBUILD && \\\n    echo 'arch=\"noarch\"' >> APKBUILD && \\\n    echo 'license=\"GPL\"' >> APKBUILD && \\\n    echo 'makedepends=\"\"' >> APKBUILD && \\\n    echo 'depends=\"\"' >> APKBUILD && \\\n    echo 'install=\"\"' >> APKBUILD && \\\n    echo 'subpackages=\"\"' >> APKBUILD && \\\n    echo 'source=\"\"' >> APKBUILD && \\\n    echo 'triggers=\"$pkgname.trigger=/lib:/usr/lib:/usr/glibc-compat/lib\"' >> APKBUILD && \\\n    echo 'package() {' >> APKBUILD && \\\n    echo '        mkdir -p \"$pkgdir\"' >> APKBUILD && \\\n    echo '}' >> APKBUILD && \\\n    echo '#!/bin/sh' >> glibc-ldconfig-trigger.trigger && \\\n    echo '/usr/glibc-compat/sbin/ldconfig' >> glibc-ldconfig-trigger.trigger && \\\n    chmod +x glibc-ldconfig-trigger.trigger && \\\n    adduser -D -G abuild -s /bin/sh abuild && \\\n    su abuild -c \"abuild-keygen -a -n\" && \\\n    su abuild -c \"abuild\" && \\\n    cp /home/abuild/packages/*/glibc-ldconfig-trigger-1.0-r0.apk . && \\\n    apk --no-cache --allow-untrusted add glibc-ldconfig-trigger-1.0-r0.apk && \\\n    deluser --remove-home abuild && \\\n    # Remove unneeded stuff.\n    rm /usr/glibc-compat/etc/rpc && \\\n    rm /usr/glibc-compat/lib/*.a && \\\n    rm -r /usr/glibc-compat/lib/audit && \\\n    rm -r /usr/glibc-compat/lib/gconv && \\\n    rm -r /usr/glibc-compat/lib/getconf && \\\n    rm -r /usr/glibc-compat/include && \\\n    rm -r /usr/glibc-compat/share/locale && \\\n    rm -r /usr/glibc-compat/share/i18n && \\\n    rm -r /usr/glibc-compat/var && \\\n    # Cleanup\n    del-pkg build-dependencies && \\\n    rm -rf /tmp/* /tmp/.[!.]*)\n\n# Install s6 overlay.\nRUN \\\n    add-pkg --virtual build-dependencies curl tar patch && \\\n    echo \"Downloading s6-overlay...\" && \\\n    curl -f -# -L ${S6_OVERLAY_URL} | tar -xz -C / && \\\n    # Services dependencies support.\n    echo \"Patching s6-overlay...\" && \\\n    curl -f -# -L https://github.com/jlesage/s6-overlay/commit/d151c41.patch | patch -d / -p3 && \\\n    chmod +x \\\n        /etc/s6/services/.s6-svscan/SIGHUP \\\n        /etc/s6/services/.s6-svscan/SIGINT \\\n        /etc/s6/services/.s6-svscan/SIGQUIT \\\n        /etc/s6/services/.s6-svscan/SIGTERM \\\n        /usr/bin/sv-getdeps \\\n        && \\\n    # Cleanup\n    del-pkg build-dependencies && \\\n    rm -rf /tmp/* /tmp/.[!.]*\n\n# Install system packages.\nRUN \\\n    add-pkg \\\n        # For timezone support\n        tzdata \\\n        # For 'groupmod' command\n        shadow\n\n# Save some defaults.\nRUN \\\n    mkdir /defaults && \\\n    cp /etc/passwd /defaults/ && \\\n    cp /etc/group /defaults/ && \\\n    cp /etc/shadow /defaults/\n\n# Add files.\nCOPY rootfs/ /\n\n# Set environment variables.\nENV LANG=${GLIBC_LOCALE} \\\n    S6_BEHAVIOUR_IF_STAGE2_FAILS=3 \\\n    S6_SERVICE_DEPS=1 \\\n    USER_ID=1000 \\\n    GROUP_ID=1000 \\\n    APP_NAME=DockerApp \\\n    APP_USER=app \\\n    XDG_DATA_HOME=/config/xdg/data \\\n    XDG_CONFIG_HOME=/config/xdg/config \\\n    XDG_CACHE_HOME=/config/xdg/cache \\\n    XDG_RUNTIME_DIR=/tmp/run/user/app\n\n# Define mountable directories.\nVOLUME [\"/config\"]\n\n# Define default command.\n# Use S6 overlay init system.\nCMD [\"/init\"]\n\n# Metadata.\nARG IMAGE_VERSION=unknown\nLABEL \\\n      org.label-schema.name=\"baseimage\" \\\n      org.label-schema.description=\"A minimal docker baseimage to ease creation of long-lived application containers\" \\\n      org.label-schema.version=\"${IMAGE_VERSION}\" \\\n      org.label-schema.vcs-url=\"https://github.com/jlesage/docker-baseimage\" \\\n      org.label-schema.schema-version=\"1.0\"\n"
}