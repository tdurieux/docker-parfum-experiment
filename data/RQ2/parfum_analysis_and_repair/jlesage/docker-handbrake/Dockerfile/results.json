{
  "startTime": 1674252267239,
  "endTime": 1674252269076,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 104,
        "lineEnd": 104,
        "columnStart": 4,
        "columnEnd": 26
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 108,
        "lineEnd": 108,
        "columnStart": 4,
        "columnEnd": 27
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 112,
        "lineEnd": 112,
        "columnStart": 4,
        "columnEnd": 40
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 116,
        "lineEnd": 116,
        "columnStart": 4,
        "columnEnd": 28
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 120,
        "lineEnd": 120,
        "columnStart": 4,
        "columnEnd": 40
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 124,
        "lineEnd": 124,
        "columnStart": 4,
        "columnEnd": 37
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 128,
        "lineEnd": 128,
        "columnStart": 4,
        "columnEnd": 46
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 136,
        "lineEnd": 136,
        "columnStart": 8,
        "columnEnd": 35
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 203,
        "lineEnd": 203,
        "columnStart": 4,
        "columnEnd": 118
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 299,
        "lineEnd": 299,
        "columnStart": 4,
        "columnEnd": 25
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 146,
        "lineEnd": 153,
        "columnStart": 4,
        "columnEnd": 24
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 160,
        "lineEnd": 170,
        "columnStart": 4,
        "columnEnd": 51
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 178,
        "lineEnd": 178,
        "columnStart": 4,
        "columnEnd": 15
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 245,
        "lineEnd": 252,
        "columnStart": 4,
        "columnEnd": 24
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 302,
        "lineEnd": 307,
        "columnStart": 4,
        "columnEnd": 21
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "#\n# handbrake Dockerfile\n#\n# https://github.com/jlesage/docker-handbrake\n#\n\n# Pull base image.\nFROM jlesage/baseimage-gui:alpine-3.14-v3.5.8\n\n# Docker image version is provided via build arg.\nARG DOCKER_IMAGE_VERSION=unknown\n\n# Define software versions.\n# NOTE: x264 doesn't do releases.  We track branch \"stable\":\n#   https://code.videolan.org/videolan/x264/-/tree/stable.\nARG HANDBRAKE_VERSION=1.5.1\nARG X264_VERSION=5db6aa6cab1b146e07b60cc1736a01f21da01154\nARG LIBVA_VERSION=2.14.0\nARG INTEL_VAAPI_DRIVER_VERSION=2.4.1\nARG GMMLIB_VERSION=22.1.4\nARG INTEL_MEDIA_DRIVER_VERSION=22.3.1\nARG INTEL_MEDIA_SDK_VERSION=22.3.0\nARG INTEL_ONEVPL_GPU_RUNTIME_VERSION=22.3.2\nARG YAD_VERSION=7.3\n\n# Define software download URLs.\nARG HANDBRAKE_URL=https://github.com/HandBrake/HandBrake/releases/download/${HANDBRAKE_VERSION}/HandBrake-${HANDBRAKE_VERSION}-source.tar.bz2\nARG X264_URL=https://code.videolan.org/videolan/x264/-/archive/${X264_VERSION}/x264-${X264_VERSION}.tar.gz\nARG LIBVA_URL=https://github.com/intel/libva/releases/download/${LIBVA_VERSION}/libva-${LIBVA_VERSION}.tar.bz2\nARG INTEL_VAAPI_DRIVER_URL=https://github.com/intel/intel-vaapi-driver/releases/download/${INTEL_VAAPI_DRIVER_VERSION}/intel-vaapi-driver-${INTEL_VAAPI_DRIVER_VERSION}.tar.bz2\nARG GMMLIB_URL=https://github.com/intel/gmmlib/archive/intel-gmmlib-${GMMLIB_VERSION}.tar.gz\nARG INTEL_MEDIA_DRIVER_URL=https://github.com/intel/media-driver/archive/intel-media-${INTEL_MEDIA_DRIVER_VERSION}.tar.gz\nARG INTEL_MEDIA_SDK_URL=https://github.com/Intel-Media-SDK/MediaSDK/archive/intel-mediasdk-${INTEL_MEDIA_SDK_VERSION}.tar.gz\nARG INTEL_ONEVPL_GPU_RUNTIME_URL=https://github.com/oneapi-src/oneVPL-intel-gpu/archive/refs/tags/intel-onevpl-${INTEL_ONEVPL_GPU_RUNTIME_VERSION}.tar.gz\nARG YAD_URL=https://github.com/v1cont/yad/releases/download/v${YAD_VERSION}/yad-${YAD_VERSION}.tar.xz\n\n# Other build arguments.\n\n# Set to 'max' to keep debug symbols.\nARG HANDBRAKE_DEBUG_MODE=none\n\n# Define working directory.\nWORKDIR /tmp\n\n# Compile HandBrake, libva and Intel Media SDK.\nRUN \\\n    add-pkg --virtual build-dependencies \\\n        # build tools.\n        curl \\\n        build-base \\\n        yasm \\\n        autoconf \\\n        cmake \\\n        automake \\\n        libtool \\\n        m4 \\\n        patch \\\n        coreutils \\\n        tar \\\n        file \\\n        python2 \\\n        linux-headers \\\n        intltool \\\n        git \\\n        diffutils \\\n        bash \\\n        nasm \\\n        meson \\\n        # misc libraries\n        jansson-dev \\\n        libxml2-dev \\\n        libpciaccess-dev \\\n        xz-dev \\\n        numactl-dev \\\n        libjpeg-turbo-dev \\\n        # media libraries\n        libsamplerate-dev \\\n        libass-dev \\\n        # media codecs\n        libtheora-dev \\\n        lame-dev \\\n        opus-dev \\\n        libvorbis-dev \\\n        speex-dev \\\n        libvpx-dev \\\n        # gtk\n        gtk+3.0-dev \\\n        dbus-glib-dev \\\n        libnotify-dev \\\n        libgudev-dev \\\n        && \\\n    # Set same default compilation flags as abuild.\n    export CFLAGS=\"-Os -fomit-frame-pointer\" && \\\n    export CXXFLAGS=\"$CFLAGS\" && \\\n    export CPPFLAGS=\"$CFLAGS\" && \\\n    export LDFLAGS=\"-Wl,--as-needed\" && \\\n    if [ \"${HANDBRAKE_DEBUG_MODE}\" = \"none\" ]; then \\\n        CMAKE_BUILD_TYPE=Release; \\\n    else \\\n        CMAKE_BUILD_TYPE=Debug; \\\n    fi && \\\n    # Download x264 sources.\n    echo \"Downloading x264 sources...\" && \\\n    mkdir x264 && \\\n    curl -f -# -L ${X264_URL} | tar xz --strip 1 -C x264 && \\\n    # Download libva sources.\n    echo \"Downloading libva sources...\" && \\\n    mkdir libva && \\\n    curl -f -# -L ${LIBVA_URL} | tar xj --strip 1 -C libva && \\\n    # Download Intel VAAPI driver sources.\n    echo \"Downloading Intel VAAPI driver sources...\" && \\\n    mkdir intel-vaapi-driver && \\\n    curl -f -# -L ${INTEL_VAAPI_DRIVER_URL} | tar xj --strip 1 -C intel-vaapi-driver && \\\n    # Download gmmlib sources.\n    echo \"Downloading gmmlib sources...\" && \\\n    mkdir gmmlib && \\\n    curl -f -# -L ${GMMLIB_URL} | tar xz --strip 1 -C gmmlib && \\\n    # Download Intel Media driver.\n    echo \"Downloading Intel Media driver sources...\" && \\\n    mkdir intel-media-driver && \\\n    curl -f -# -L ${INTEL_MEDIA_DRIVER_URL} | tar xz --strip 1 -C intel-media-driver && \\\n    # Download Intel Media SDK sources.\n    echo \"Downloading Intel Media SDK sources...\" && \\\n    mkdir MediaSDK && \\\n    curl -f -# -L ${INTEL_MEDIA_SDK_URL} | tar xz --strip 1 -C MediaSDK && \\\n    # Download Intel OneVPL GPU Runtime sources.\n    echo \"\" && \\\n    mkdir oneVPL-intel-gpu && \\\n    curl -f -# -L ${INTEL_ONEVPL_GPU_RUNTIME_URL} | tar xz --strip 1 -C oneVPL-intel-gpu && \\\n    # Download HandBrake sources.\n    echo \"Downloading HandBrake sources...\" && \\\n    if echo \"${HANDBRAKE_URL}\" | grep -q '\\.git$';then \\\n        git clone ${HANDBRAKE_URL} HandBrake && \\\n        git -C HandBrake checkout \"${HANDBRAKE_VERSION}\"; \\\n    else \\\n        mkdir HandBrake && \\\n        curl -f -# -L ${HANDBRAKE_URL} | tar xj --strip 1 -C HandBrake; \\\n    fi && \\\n    # Compile x264.\n    echo \"Compiling x264...\" && \\\n    cd x264 && \\\n    if [ \"${HANDBRAKE_DEBUG_MODE}\" = \"none\" ]; then \\\n        X264_CMAKE_OPTS=--enable-strip; \\\n    else \\\n        X264_CMAKE_OPTS=--enable-debug; \\\n    fi && \\\n    CFLAGS=\"${CFLAGS/-Os/}\" ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" \\\n        --prefix=/usr \\\n        --enable-shared \\\n        --disable-static \\\n        --enable-pic \\\n        --disable-cli \\\n        --extra-cflags=-fno-aggressive-loop-optimizations \\\n        $X264_CMAKE_OPTS \\\n        && \\\n    make -j$(nproc) install && \\\n    cd ../ && \\\n    # Compile libva.\n    echo \"Compiling libva...\" && \\\n    cd libva && \\\n    ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" \\\n        --prefix=/usr \\\n        --mandir=/tmp/libva-man \\\n        --infodir=/tmp/liva-info \\\n        --localstatedir=/var \\\n        --enable-x11 \\\n        --disable-glx \\\n        --disable-wayland \\\n        --disable-static \\\n        --enable-shared \\\n        --with-drivers-path=/opt/intel/mediasdk/lib \\\n        && \\\n    make -j$(nproc) && \\\n    make install && \\\n    cd ../ && \\\n    # Compile Intel VAAPI driver.\n    echo \"Compiling Intel VAAPI driver...\" && \\\n    cd intel-vaapi-driver && \\\n    ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" && \\\n    make -j$(nproc) && \\\n    make install && \\\n    cd .. && \\\n    # Compile Intel Media driver.\n    echo \"Compiling Intel Media driver...\" && \\\n    add-pkg libexecinfo-dev && \\\n    cd intel-media-driver && \\\n    mkdir build && cd build && \\\n    cmake \\\n        -Wno-dev \\\n        -DBUILD_TYPE=Release \\\n        -DCMAKE_INSTALL_PREFIX=/opt/intel/mediasdk \\\n        -DLIBVA_DRIVERS_PATH=/opt/intel/mediasdk/lib \\\n        -DINSTALL_DRIVER_SYSCONF=OFF \\\n        -DMEDIA_RUN_TEST_SUITE=OFF \\\n        -DSKIP_GMM_CHECK=ON \\\n        ../ && \\\n    make -j$(nproc) && \\\n    make install && \\\n    cd .. && \\\n    cd .. && \\\n    # Compile Intel Media SDK.\n    echo \"Compiling Intel Media SDK...\" && \\\n    cd MediaSDK && \\\n    curl -f -# -L https://raw.githubusercontent.com/jlesage/docker-handbrake/master/intel-media-sdk-debug-no-assert.patch | patch -p1 && \\\n    mkdir build && \\\n    cd build && \\\n    if [ \"${HANDBRAKE_DEBUG_MODE}\" = \"none\" ]; then \\\n        INTEL_MEDIA_SDK_BUILD_TYPE=RELEASE; \\\n    else \\\n        INTEL_MEDIA_SDK_BUILD_TYPE=DEBUG; \\\n    fi && \\\n    cmake \\\n        -DCMAKE_BUILD_TYPE=$INTEL_MEDIA_SDK_BUILD_TYPE \\\n        # HandBrake's libmfx is looking at /opt/intel/mediasdk/plugins for MFX plugins.\n        -DMFX_PLUGINS_DIR=/opt/intel/mediasdk/plugins \\\n        -DMFX_PLUGINS_CONF_DIR=/opt/intel/mediasdk/plugins \\\n        -DENABLE_OPENCL=OFF \\\n        -DENABLE_X11_DRI3=OFF \\\n        -DENABLE_WAYLAND=OFF \\\n        -DBUILD_DISPATCHER=ON \\\n        -DENABLE_ITT=OFF \\\n        -DENABLE_TEXTLOG=OFF \\\n        -DENABLE_STAT=OFF \\\n        -DBUILD_SAMPLES=OFF \\\n         .. && \\\n    make -j$(nproc) && \\\n    make install && \\\n    cd .. && \\\n    cd .. && \\\n    # Compile Intel OneVPL GPU Runtime.\n    echo \"Compiling Intel oneVPL GPU Runtime...\" && \\\n    cd oneVPL-intel-gpu && \\\n    mkdir build && \\\n    cd build && \\\n    cmake \\\n        -DCMAKE_BUILD_TYPE=Release \\\n        -DCMAKE_INSTALL_LIBDIR=lib \\\n        .. && \\\n    make -j$(nproc) && \\\n    make install && \\\n    cd .. && \\\n    cd .. && \\\n    # Compile HandBrake.\n    echo \"Compiling HandBrake...\" && \\\n    cd HandBrake && \\\n    ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --prefix=/usr \\\n                --debug=$HANDBRAKE_DEBUG_MODE \\\n                --disable-gtk-update-checks \\\n                --enable-fdk-aac \\\n                --enable-x265 \\\n                --enable-qsv \\\n                --launch-jobs=$(nproc) \\\n                --launch \\\n                && \\\n    make --directory=build install && \\\n    cd .. && \\\n    # Strip symbols.\n    if [ \"${HANDBRAKE_DEBUG_MODE}\" = \"none\" ]; then \\\n        find /usr/lib -type f -name \"libva*.so*\" -exec strip -s {} ';'; \\\n        find /opt/intel/mediasdk -type f -name \"*.so*\" -exec strip -s {} ';'; \\\n        strip -s /usr/bin/ghb; \\\n        strip -s /usr/bin/HandBrakeCLI; \\\n    fi && \\\n    # HandBrake is looking for libmfx-gen.so under /opt/intel/mediasdk/lib64.\n    ln -s lib /opt/intel/mediasdk/lib64 && \\\n    # Cleanup.\n    del-pkg build-dependencies && \\\n    rm -r \\\n        /usr/lib/libva*.la \\\n        /opt/intel/mediasdk/include \\\n        /opt/intel/mediasdk/lib/pkgconfig \\\n        # HandBrake already include a statically-linked version of libmfx.\n        /opt/intel/mediasdk/lib64/libmfx.* \\\n        /opt/intel/mediasdk/lib/libigfxcmrt.so* \\\n        /usr/lib/pkgconfig/libva*.pc \\\n        /usr/lib/pkgconfig/x264.pc \\\n        /usr/include \\\n        && \\\n    rm -rf /tmp/* /tmp/.[!.]*\n\n# Install YAD.\n# NOTE: YAD is compiled manually because the version on the Alpine repository\n#       pulls too much dependencies.\nRUN \\\n\n    add-pkg --virtual build-dependencies \\\n        build-base \\\n        curl \\\n        intltool \\\n        gtk+3.0-dev \\\n        && \\\n    # Set same default compilation flags as abuild.\n    export CFLAGS=\"-Os -fomit-frame-pointer\" && \\\n    export CXXFLAGS=\"$CFLAGS\" && \\\n    export CPPFLAGS=\"$CFLAGS\" && \\\n    export LDFLAGS=\"-Wl,--as-needed\" && \\\n    # Download.\n    mkdir yad && \\\n    echo \"Downloading YAD package...\" && \\\n    curl -f -# -L ${YAD_URL} | tar xJ --strip 1  -C yad && \\\n    # Compile.\n    cd yad && \\\n    ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" \\\n        --prefix=/usr \\\n        --enable-standalone \\\n        --disable-icon-browser \\\n        --disable-html \\\n        --disable-pfd \\\n        && \\\n    make && make install && \\\n    strip /usr/bin/yad && \\\n    cd .. && \\\n    # Cleanup.\n    del-pkg build-dependencies && \\\n    rm -rf /tmp/* /tmp/.[!.]*\n\n# Install dependencies.\nRUN \\\n    add-pkg \\\n        gtk+3.0 \\\n        libgudev \\\n        dbus-glib \\\n        libnotify \\\n        libsamplerate \\\n        libass \\\n        jansson \\\n        xz \\\n        numactl \\\n        # Media codecs:\n        libtheora \\\n        lame \\\n        opus \\\n        libvorbis \\\n        speex \\\n        libvpx \\\n        # For QSV detection\n        pciutils \\\n        # To read encrypted DVDs\n        libdvdcss \\\n        # For main, big icons:\n        librsvg \\\n        # For all other small icons:\n        adwaita-icon-theme \\\n        # For optical drive listing:\n        lsscsi \\\n        # For watchfolder\n        bash \\\n        coreutils \\\n        findutils \\\n        expect\n\n# Adjust the openbox config.\nRUN \\\n    # Maximize only the main/initial window.\n    sed-patch 's/<application type=\"normal\">/<application type=\"normal\" title=\"HandBrake\">/' \\\n        /etc/xdg/openbox/rc.xml && \\\n    # Make sure the main window is always in the background.\n    sed-patch '/<application type=\"normal\" title=\"HandBrake\">/a \\    <layer>below</layer>' \\\n        /etc/xdg/openbox/rc.xml\n\n# Generate and install favicons.\nRUN \\\n    APP_ICON_URL=https://raw.githubusercontent.com/jlesage/docker-templates/master/jlesage/images/handbrake-icon.png && \\\n    install_app_icon.sh \"$APP_ICON_URL\"\n\n# Add files.\nCOPY rootfs/ /\n\n# Set environment variables.\nENV APP_NAME=\"HandBrake\" \\\n    AUTOMATED_CONVERSION_PRESET=\"General/Very Fast 1080p30\" \\\n    AUTOMATED_CONVERSION_FORMAT=\"mp4\"\n\n# Define mountable directories.\nVOLUME [\"/config\"]\nVOLUME [\"/storage\"]\nVOLUME [\"/output\"]\nVOLUME [\"/watch\"]\n\n# Metadata.\nLABEL \\\n      org.label-schema.name=\"handbrake\" \\\n      org.label-schema.description=\"Docker container for HandBrake\" \\\n      org.label-schema.version=\"$DOCKER_IMAGE_VERSION\" \\\n      org.label-schema.vcs-url=\"https://github.com/jlesage/docker-handbrake\" \\\n      org.label-schema.schema-version=\"1.0\"\n"
}