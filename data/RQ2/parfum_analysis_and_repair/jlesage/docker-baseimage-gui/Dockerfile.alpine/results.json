{
  "startTime": 1674252837123,
  "endTime": 1674252839155,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 56,
        "lineEnd": 56,
        "columnStart": 4,
        "columnEnd": 35
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 57,
        "lineEnd": 57,
        "columnStart": 4,
        "columnEnd": 29
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 93,
        "lineEnd": 93,
        "columnStart": 4,
        "columnEnd": 29
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 133,
        "lineEnd": 133,
        "columnStart": 4,
        "columnEnd": 28
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 161,
        "lineEnd": 161,
        "columnStart": 4,
        "columnEnd": 35
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 166,
        "lineEnd": 166,
        "columnStart": 4,
        "columnEnd": 37
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 171,
        "lineEnd": 171,
        "columnStart": 4,
        "columnEnd": 60
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 172,
        "lineEnd": 172,
        "columnStart": 4,
        "columnEnd": 90
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 70,
        "lineEnd": 70,
        "columnStart": 4,
        "columnEnd": 99
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 96,
        "lineEnd": 96,
        "columnStart": 4,
        "columnEnd": 15
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "#\n# baseimage-gui Dockerfile\n#\n# https://github.com/jlesage/docker-baseimage-gui\n#\n\nARG BASEIMAGE=unknown\n\n# Pull base image.\nFROM ${BASEIMAGE}\n\n# Define software versions.\nARG LIBVNCSERVER_VERSION=9029b86\nARG X11VNC_VERSION=29597a9\nARG STUNNEL_VERSION=5.44\nARG NOVNC_VERSION=fa559b3\nARG BOOTSTRAP_VERSION=3.3.7\nARG FONTAWESOME_VERSION=4.7.0\nARG JQUERY_VERSION=3.2.1\nARG JQUERY_UI_TOUCH_PUNCH_VERSION=4bc0091\n\n# Define software download URLs.\nARG LIBVNCSERVER_URL=https://github.com/jlesage/libvncserver/archive/${LIBVNCSERVER_VERSION}.tar.gz\nARG X11VNC_URL=https://github.com/jlesage/x11vnc/archive/${X11VNC_VERSION}.tar.gz\nARG STUNNEL_URL=https://www.stunnel.org/archive/5.x/stunnel-${STUNNEL_VERSION}.tar.gz\nARG NOVNC_URL=https://github.com/jlesage/novnc/archive/${NOVNC_VERSION}.tar.gz\nARG BOOTSTRAP_URL=https://github.com/twbs/bootstrap/releases/download/v${BOOTSTRAP_VERSION}/bootstrap-${BOOTSTRAP_VERSION}-dist.zip\nARG FONTAWESOME_URL=https://fontawesome.com/v${FONTAWESOME_VERSION}/assets/font-awesome-${FONTAWESOME_VERSION}.zip\nARG JQUERY_URL=https://code.jquery.com/jquery-${JQUERY_VERSION}.min.js\nARG JQUERY_UI_TOUCH_PUNCH_URL=https://raw.github.com/furf/jquery-ui-touch-punch/${JQUERY_UI_TOUCH_PUNCH_VERSION}/jquery.ui.touch-punch.min.js\n\n# Define working directory.\nWORKDIR /tmp\n\n# Compile x11vnc.\nRUN \\\n    add-pkg --virtual build-dependencies \\\n            curl \\\n            build-base \\\n            autoconf \\\n            automake \\\n            libtool \\\n            libx11-dev \\\n            libxtst-dev \\\n            libjpeg-turbo-dev \\\n            libpng-dev \\\n            libxinerama-dev \\\n            libxdamage-dev \\\n            libxcomposite-dev \\\n            libxcursor-dev \\\n            libxrandr-dev \\\n            libxfixes-dev \\\n            libice-dev \\\n            && \\\n    # Download sources\n    mkdir libvncserver x11vnc && \\\n    curl -f -sS -L ${LIBVNCSERVER_URL} | tar -xz --strip 1 -C libvncserver && \\\n    curl -f -sS -L ${X11VNC_URL} | tar -xz --strip 1 -C x11vnc && \\\n    # Compile libvncserver\n    cd libvncserver && \\\n    ./autogen.sh --prefix=/tmp/install && \\\n    make install && \\\n    cd .. && \\\n    # Compile x11vnc\n    cd x11vnc && \\\n    sed-patch 's|^MUTEX(|extern MUTEX(|g' src/util.h && \\\n    sed-patch '/#ifdef LIBVNCSERVER_HAVE_LIBPTHREAD/a MUTEX(pointerMutex);' src/util.c && \\\n    sed-patch '/#ifdef LIBVNCSERVER_HAVE_LIBPTHREAD/a MUTEX(inputMutex);' src/util.c && \\\n    sed-patch '/#ifdef LIBVNCSERVER_HAVE_LIBPTHREAD/a MUTEX(clientMutex);' src/util.c && \\\n    autoreconf -v --install && \\\n    PKG_CONFIG_PATH=/tmp/install/lib/pkgconfig/ ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --prefix=/tmp/install --with-websockets && \\\n    make install && \\\n    cd .. && \\\n    # Install libraries\n    strip install/lib/libvnc*.so && \\\n    cp -P install/lib/libvncserver.so* /usr/lib/ && \\\n    cp -P install/lib/libvncclient.so* /usr/lib/ && \\\n    # Install binaries\n    strip install/bin/x11vnc && \\\n    cp install/bin/x11vnc /usr/bin/ && \\\n    # Cleanup\n    del-pkg build-dependencies && \\\n    rm -rf /tmp/* /tmp/.[!.]*\n\n# Compile stunnel\nRUN \\\n    add-pkg --virtual build-dependencies \\\n            curl \\\n            build-base \\\n            openssl-dev \\\n            && \\\n    # Download sources\n    mkdir stunnel && \\\n    curl -f -# -L ${STUNNEL_URL} | tar -xz --strip 1 -C stunnel && \\\n    # Compile stunnel\n    cd stunnel && \\\n    ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" && \\\n    make && \\\n    find . && \\\n    cd .. && \\\n    # Install binaries\n    strip stunnel/src/stunnel && \\\n    cp -v stunnel/src/stunnel /usr/bin/ && \\\n    # Cleanup\n    del-pkg build-dependencies && \\\n    rm -rf /tmp/* /tmp/.[!.]*\n\n# Install packages.\nRUN \\\n    add-pkg \\\n        # X11 VNC server dependencies\n        openssl \\\n        libxtst \\\n        libxi \\\n        libjpeg-turbo \\\n        libxcomposite \\\n        libxdamage \\\n        # X virtual framebuffer display server\n        xvfb \\\n        xdpyinfo \\\n        # Openbox window manager\n        openbox \\\n        xsetroot \\\n        # Font\n        font-croscore && \\\n    # Remove some unneeded stuff.\n    rm -rf /var/cache/fontconfig/*\n\n# Install noVNC.\nRUN \\\n    NODEJS_NPM=$(apk -q --no-cache search npm | head -n1) && \\\n    add-pkg --virtual build-dependencies curl ${NODEJS_NPM:-nodejs} && \\\n    mkdir noVNC && \\\n    curl -f -sS -L ${NOVNC_URL} | tar -xz --strip 1 -C noVNC && \\\n    mkdir -p /opt/novnc/include && \\\n    mkdir -p /opt/novnc/js && \\\n    mkdir -p /opt/novnc/css && \\\n    NOVNC_CORE=\"\\\n        noVNC/include/util.js \\\n        noVNC/include/webutil.js \\\n        noVNC/include/base64.js \\\n        noVNC/include/websock.js \\\n        noVNC/include/des.js \\\n        noVNC/include/keysymdef.js \\\n        noVNC/include/keyboard.js \\\n        noVNC/include/input.js \\\n        noVNC/include/display.js \\\n        noVNC/include/rfb.js \\\n        noVNC/include/keysym.js \\\n        noVNC/include/inflator.js \\\n    \" && \\\n    cp -v $NOVNC_CORE /opt/novnc/include/ && \\\n    # Minify noVNC core JS files\n    env HOME=/tmp npm install --cache /tmp/.npm uglify-js source-map && \\\n    ./node_modules/uglify-js/bin/uglifyjs \\\n        --compress --mangle --source-map \\\n        --output /opt/novnc/js/novnc-core.min.js -- $NOVNC_CORE && \\\n    env HOME=/tmp npm uninstall --cache /tmp/.npm uglify-js source-map && \\\n    sed-patch 's|\"noVNC/|\"/|g' /opt/novnc/js/novnc-core.min.js.map && \\\n    echo -e \"\\n//# sourceMappingURL=/js/novnc-core.min.js.map\" >> /opt/novnc/js/novnc-core.min.js && \\\n    # Install Bootstrap\n    curl -f -sS -L -O ${BOOTSTRAP_URL} && \\\n    unzip bootstrap-${BOOTSTRAP_VERSION}-dist.zip && \\\n    cp -v bootstrap-${BOOTSTRAP_VERSION}-dist/css/bootstrap.min.css /opt/novnc/css/ && \\\n    cp -v bootstrap-${BOOTSTRAP_VERSION}-dist/js/bootstrap.min.js /opt/novnc/js/ && \\\n    # Install Font Awesome\n    curl -f -sS -L -O ${FONTAWESOME_URL} && \\\n    unzip font-awesome-${FONTAWESOME_VERSION}.zip && \\\n    cp -vr font-awesome-${FONTAWESOME_VERSION}/fonts /opt/novnc/ && \\\n    cp -v font-awesome-${FONTAWESOME_VERSION}/css/font-awesome.min.css /opt/novnc/css/ && \\\n    # Install JQuery\n    curl -f -sS -L -o /opt/novnc/js/jquery.min.js ${JQUERY_URL} && \\\n    curl -f -sS -L -o /opt/novnc/js/jquery.ui.touch-punch.min.js ${JQUERY_UI_TOUCH_PUNCH_URL} && \\\n    # Cleanup\n    del-pkg build-dependencies && \\\n    rm -rf /tmp/* /tmp/.[!.]*\n\n# Install nginx.\nRUN \\\n    add-pkg nginx && \\\n    rm /etc/nginx/nginx.conf \\\n       /etc/logrotate.d/nginx \\\n       && \\\n    rm -f /etc/init.d/nginx \\\n    rm -r /etc/nginx/conf.d \\\n          /etc/nginx/modules \\\n          /var/lib/nginx/* \\\n          /var/log/nginx \\\n          /var/www \\\n          && \\\n    ln -s /config/log/nginx /var/lib/nginx/logs && \\\n    if [ -d /var/tmp/nginx ]; then \\\n        # alpine 3.6\n        rm -r /var/tmp/nginx && \\\n        ln -s /tmp/nginx /var/tmp/nginx; \\\n    else \\\n        # alpine 3.5\n        ln -s /tmp/nginx /var/lib/nginx/tmp; \\\n    fi && \\\n    # Adjust user under which nginx will run.\n    userdel nginx && \\\n    groupdel www-data && \\\n    useradd --system \\\n            --home-dir /dev/null \\\n            --no-create-home \\\n            --shell /sbin/nologin \\\n            nginx && \\\n    # Users/groups changed, save them.\n    cp /etc/passwd /defaults/ && \\\n    cp /etc/group /defaults && \\\n    # Generate default DH params.\n    echo \"Generating default DH parameters (2048 bits)...\" && \\\n    env HOME=/tmp openssl dhparam \\\n        -out \"/defaults/dhparam.pem\" \\\n        2048 \\\n        > /dev/null 2>&1 && \\\n    rm -rf /tmp/* /tmp/.[!.]*\n\n# Add files.\nCOPY rootfs/ /\n\n# Set version to CSS and JavaScript file URLs.\nRUN sed-patch \"s/UNIQUE_VERSION/$(date | md5sum | cut -c1-10)/g\" /opt/novnc/index.vnc\n\n# Minify noVNC UI JS files\nRUN \\\n    NODEJS_NPM=$(apk -q --no-cache search npm | head -n1) && \\\n    add-pkg --virtual build-dependencies ${NODEJS_NPM:-nodejs} && \\\n    NOVNC_UI=\"\\\n        /opt/novnc/app/modulemgr.js \\\n        /opt/novnc/app/ui.js \\\n        /opt/novnc/app/modules/hideablenavbar.js \\\n        /opt/novnc/app/modules/dynamicappname.js \\\n        /opt/novnc/app/modules/password.js \\\n        /opt/novnc/app/modules/clipboard.js \\\n        /opt/novnc/app/modules/autoscaling.js \\\n        /opt/novnc/app/modules/clipping.js \\\n        /opt/novnc/app/modules/viewportdrag.js \\\n        /opt/novnc/app/modules/fullscreen.js \\\n        /opt/novnc/app/modules/virtualkeyboard.js \\\n        /opt/novnc/app/modules/rightclick.js \\\n    \" && \\\n    env HOME=/tmp npm install --cache /tmp/.npm uglify-js && \\\n    ./node_modules/uglify-js/bin/uglifyjs \\\n        --compress --mangle --source-map \\\n        --output /opt/novnc/js/novnc-ui.min.js -- $NOVNC_UI && \\\n    env HOME=/tmp npm uninstall --cache /tmp/.npm uglify-js && \\\n    echo -e \"\\n//# sourceMappingURL=/js/novnc-ui.min.js.map\" >> /opt/novnc/js/novnc-ui.min.js && \\\n    sed-patch 's/\\/opt\\/novnc//g' /opt/novnc/js/novnc-ui.min.js.map && \\\n    # Cleanup\n    del-pkg build-dependencies && \\\n    rm -rf /tmp/* /tmp/.[!.]*\n\n# Generate and install favicons.\nRUN \\\n    APP_ICON_URL=https://github.com/jlesage/docker-templates/raw/master/jlesage/images/generic-app-icon.png && \\\n    install_app_icon.sh \"$APP_ICON_URL\"\n\n# Set environment variables.\nENV DISPLAY=:0 \\\n    DISPLAY_WIDTH=1280 \\\n    DISPLAY_HEIGHT=768\n\n# Expose ports.\n#   - 5800: VNC web interface\n#   - 5900: VNC\nEXPOSE 5800 5900\n\n# Metadata.\nARG IMAGE_VERSION=unknown\nLABEL \\\n      org.label-schema.name=\"baseimage-gui\" \\\n      org.label-schema.description=\"A minimal docker baseimage to ease creation of X graphical application containers\" \\\n      org.label-schema.version=\"${IMAGE_VERSION}\" \\\n      org.label-schema.vcs-url=\"https://github.com/jlesage/docker-baseimage-gui\" \\\n      org.label-schema.schema-version=\"1.0\"\n"
}