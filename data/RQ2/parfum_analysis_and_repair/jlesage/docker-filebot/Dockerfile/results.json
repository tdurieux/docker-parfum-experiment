{
  "startTime": 1674249810635,
  "endTime": 1674249811902,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 52,
        "lineEnd": 52,
        "columnStart": 4,
        "columnEnd": 29
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 82,
        "lineEnd": 82,
        "columnStart": 4,
        "columnEnd": 34
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 88,
        "lineEnd": 88,
        "columnStart": 4,
        "columnEnd": 110
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 167,
        "lineEnd": 167,
        "columnStart": 4,
        "columnEnd": 33
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "#\n# filebot Dockerfile\n#\n# https://github.com/jlesage/docker-filebot\n#\n\n# Build unrar.  It has been moved to non-free since Alpine 3.15.\n# https://wiki.alpinelinux.org/wiki/Release_Notes_for_Alpine_3.15.0#unrar_moved_to_non-free\nFROM jlesage/alpine-abuild:3.15 AS unrar\nWORKDIR /tmp\nRUN \\\n    mkdir /tmp/aport && \\\n    cd /tmp/aport && \\\n    git init && \\\n    git remote add origin https://git.alpinelinux.org/aports && \\\n    git config core.sparsecheckout true && \\\n    echo \"non-free/unrar/*\" >> .git/info/sparse-checkout && \\\n    git pull origin 3.15-stable && \\\n    PKG_SRC_DIR=/tmp/aport/non-free/unrar && \\\n    PKG_DST_DIR=/tmp/unrar-pkg && \\\n    mkdir \"$PKG_DST_DIR\" && \\\n    /bin/start-build -r && \\\n    rm /tmp/unrar-pkg/*-doc-* && \\\n    mkdir /tmp/unrar-install && \\\n    tar xf /tmp/unrar-pkg/unrar-*.apk -C /tmp/unrar-install\n\n# Pull base image.\nFROM jlesage/baseimage-gui:alpine-3.15-v3.5.8\n\n# Docker image version is provided via build arg.\nARG DOCKER_IMAGE_VERSION=unknown\n\n# Define software versions.\nARG FILEBOT_VERSION=4.9.6\nARG CHROMAPRINT_VERSION=1.5.1\nARG MEDIAINFOLIB_VERSION=21.09\nARG YAD_VERSION=10.1\n\n# Define software download URLs.\nARG FILEBOT_URL=https://get.filebot.net/filebot/FileBot_${FILEBOT_VERSION}/FileBot_${FILEBOT_VERSION}-portable.tar.xz\nARG CHROMAPRINT_URL=https://github.com/acoustid/chromaprint/archive/v${CHROMAPRINT_VERSION}.tar.gz\nARG MEDIAINFOLIB_URL=https://mediaarea.net/download/source/libmediainfo/${MEDIAINFOLIB_VERSION}/libmediainfo_${MEDIAINFOLIB_VERSION}.tar.xz\nARG YAD_URL=https://github.com/v1cont/yad/releases/download/v${YAD_VERSION}/yad-${YAD_VERSION}.tar.xz\n\n# Define working directory.\nWORKDIR /tmp\n\n# Install FileBot.\nRUN \\\n    add-pkg --virtual build-dependencies curl && \\\n    mkdir filebot && \\\n    # Download sources.\n    curl -f -# -L ${FILEBOT_URL} | tar xJ -C filebot && \\\n    # Install.\n    mkdir /opt/filebot && \\\n    cp -Rv filebot/jar /opt/filebot/ && \\\n    # Cleanup.\n    del-pkg build-dependencies && \\\n    rm -rf /tmp/* /tmp/.[!.]*\n\n# Compile and install MediaInfo library.\nRUN \\\n\n    add-pkg --virtual build-dependencies \\\n        build-base \\\n        curl \\\n        cmake \\\n        automake \\\n        autoconf \\\n        libtool \\\n        curl-dev \\\n        libzen-dev \\\n        tinyxml2-dev \\\n        && \\\n    # Set same default compilation flags as abuild.\n    export CFLAGS=\"-Os -fomit-frame-pointer\" && \\\n    export CXXFLAGS=\"$CFLAGS\" && \\\n    export CPPFLAGS=\"$CFLAGS\" && \\\n    export LDFLAGS=\"-Wl,--as-needed\" && \\\n    # Download MediaInfoLib.\n    echo \"Downloading MediaInfoLib package...\" && \\\n    mkdir MediaInfoLib && \\\n    curl -f -# -L ${MEDIAINFOLIB_URL} | tar xJ --strip 1 -C MediaInfoLib && \\\n    rm -r \\\n        MediaInfoLib/Project/MS* \\\n        MediaInfoLib/Project/zlib \\\n        MediaInfoLib/Source/ThirdParty/tinyxml2 \\\n        && \\\n    curl -f -# -L https://github.com/MediaArea/MediaInfoLib/commit/cd6d5cb1cfe03d4fcef8fd38decd04765c19890a.patch | patch -p1 -d MediaInfoLib && \\\n    # Compile MediaInfoLib.\n    echo \"Compiling MediaInfoLib...\" && \\\n    cd MediaInfoLib/Project/CMake && \\\n    cmake -DCMAKE_BUILD_TYPE=None \\\n          -DCMAKE_INSTALL_PREFIX=/usr \\\n          -DCMAKE_VERBOSE_MAKEFILE=OFF \\\n          -DBUILD_SHARED_LIBS=ON \\\n          && \\\n    make -j$(nproc) && \\\n    make DESTDIR=/tmp/libmediainfo-install install && \\\n    cd ../../../ && \\\n    # Install MediaInfoLib.\n    cp -av /tmp/libmediainfo-install/usr/lib/libmediainfo.so* /usr/lib/ && \\\n    # Strip.\n    strip -v /usr/lib/libmediainfo.so.*.* && \\\n    cd ../ && \\\n    # Cleanup.\n    del-pkg build-dependencies && \\\n    rm -rf /tmp/* /tmp/.[!.]*\n\n# Install dependencies.\nRUN \\\n    add-pkg \\\n        bash \\\n        p7zip \\\n        findutils \\\n        coreutils \\\n        curl \\\n        gtk+3.0 \\\n        ttf-dejavu \\\n        adwaita-icon-theme \\\n        openjdk17-jre \\\n        java-jna-native \\\n        # For chromaprint (fpcalc)\n        ffmpeg-libs \\\n        # For libmediainfo.\n        libzen \\\n        libcurl \\\n        tinyxml2 \\\n        # Used by Filebot as the open file window.\n        zenity \\\n        && \\\n    # Remove unneeded icons.\n    rm -r /usr/share/icons/Adwaita/cursors && \\\n    find /usr/share/icons/Adwaita -type f -name \"*.svg\" -delete && \\\n    find /usr/share/icons/Adwaita -type f -name \"*.png\" \\\n        ! -path \"*/mimetypes/*\" \\\n        ! -name bookmark-new-symbolic.symbolic.png \\\n        ! -name dialog-information.png \\\n        ! -name dialog-warning.png \\\n        ! -name document-open-recent-symbolic.symbolic.png \\\n        ! -name drive-harddisk.png \\\n        ! -name drive-harddisk-symbolic.symbolic.png \\\n        ! -name folder-new-symbolic.symbolic.png \\\n        ! -name image-missing.png \\\n        ! -name list-add-symbolic.symbolic.png \\\n        ! -name media-eject-symbolic.symbolic.png \\\n        ! -name pan-up-symbolic.symbolic.png \\\n        ! -name pan-down-symbolic.symbolic.png \\\n        ! -name pan-end-symbolic.symbolic.png \\\n        ! -name pan-start-symbolic.symbolic.png \\\n        ! -name user-desktop-symbolic.symbolic.png \\\n        ! -name user-home.png \\\n        ! -name user-home-symbolic.symbolic.png \\\n        ! -name user-trash-symbolic.symbolic.png \\\n        -delete\n\n# Build and install chromaprint (fpcalc) for AcousItD.\nRUN \\\n    add-pkg --virtual build-dependencies \\\n        build-base \\\n        cmake \\\n        curl \\\n        ffmpeg-dev \\\n        fftw-dev \\\n        && \\\n    # Download.\n    mkdir chromaprint && \\\n    curl -f -# -L ${CHROMAPRINT_URL} | tar xz --strip 1 -C chromaprint && \\\n    # Compile.\n    cd chromaprint && \\\n    mkdir build && cd build && \\\n    cmake \\\n        -DCMAKE_INSTALL_PREFIX=/usr \\\n        -DCMAKE_BUILD_TYPE=Release \\\n        -DBUILD_SHARED_LIBS=OFF \\\n        -DBUILD_TOOLS=ON \\\n        -DBUILD_TESTS=OFF \\\n        .. && \\\n    make -j$(nproc) && \\\n    make DESTDIR=/tmp/chromaprint-install install && \\\n    cd .. && \\\n    cd .. && \\\n    cp -v /tmp/chromaprint-install/usr/bin/fpcalc /usr/bin/ && \\\n    strip /usr/bin/fpcalc && \\\n    # Cleanup.\n    del-pkg build-dependencies && \\\n    rm -rf /tmp/* /tmp/.[!.]*\n\n# Adjust the openbox config.\nRUN \\\n    # Maximize only the main window.\n    sed-patch 's/<application type=\"normal\">/<application type=\"normal\" title=\"FileBot \\*\">/' \\\n        /etc/xdg/openbox/rc.xml && \\\n    # Make sure the main window is always in the background.\n    sed-patch '/<application type=\"normal\" title=\"FileBot \\*\">/a \\    <layer>below</layer>' \\\n        /etc/xdg/openbox/rc.xml\n\n# Generate and install favicons.\nRUN \\\n    APP_ICON_URL=https://raw.githubusercontent.com/jlesage/docker-templates/master/jlesage/images/filebot-icon.png && \\\n    install_app_icon.sh \"$APP_ICON_URL\"\n\n# Add files.\nCOPY rootfs/ /\nCOPY --from=unrar /tmp/unrar-install/usr/bin/unrar /usr/bin/\n\n# Set environment variables.\nENV APP_NAME=\"FileBot\" \\\n    USE_FILEBOT_BETA=\"0\" \\\n    OPENSUBTITLES_USERNAME= \\\n    OPENSUBTITLES_PASSWORD= \\\n    AMC_INTERVAL=\"1800\" \\\n    AMC_INPUT_STABLE_TIME=\"10\" \\\n    AMC_ACTION=\"test\" \\\n    AMC_CONFLICT=\"auto\" \\\n    AMC_MATCH_MODE=\"opportunistic\" \\\n    AMC_ARTWORK=\"n\" \\\n    AMC_LANG=\"English\" \\\n    AMC_MUSIC_FORMAT=\"{plex}\" \\\n    AMC_MOVIE_FORMAT=\"{plex}\" \\\n    AMC_SERIES_FORMAT=\"{plex}\" \\\n    AMC_ANIME_FORMAT=\"{plex}\" \\\n    AMC_PROCESS_MUSIC=\"y\" \\\n    AMC_SUBTITLE_LANG= \\\n    AMC_CUSTOM_OPTIONS= \\\n    AMC_INPUT_DIR=/watch \\\n    AMC_OUTPUT_DIR=/output\n\n# Define mountable directories.\nVOLUME [\"/config\"]\nVOLUME [\"/storage\"]\nVOLUME [\"/watch\"]\nVOLUME [\"/output\"]\n\n# Metadata.\nLABEL \\\n      org.label-schema.name=\"filebot\" \\\n      org.label-schema.description=\"Docker container for FileBot\" \\\n      org.label-schema.version=\"$DOCKER_IMAGE_VERSION\" \\\n      org.label-schema.vcs-url=\"https://github.com/jlesage/docker-filebot\" \\\n      org.label-schema.schema-version=\"1.0\"\n"
}