{
  "startTime": 1674218861730,
  "endTime": 1674218863120,
  "originalSmells": [
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 66,
        "lineEnd": 66,
        "columnStart": 4,
        "columnEnd": 15
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# ================ #\n#    Base Stage    #\n# ================ #\n\nFROM node:16-buster-slim as base\n\nWORKDIR /opt/app\n\nENV HUSKY=0\nENV CI=true\n\nRUN apt-get update && \\\r\n    apt-get upgrade -y --no-install-recommends && \\\r\n    apt-get install -y --no-install-recommends build-essential python3 libfontconfig1 dumb-init && \\\r\n    apt-get clean && \\\r\n    rm -rf /var/lib/apt/lists/*\n\n# ------------------------------------ #\n#   Conditional steps for end-users    #\n# ------------------------------------ #\n\n# Enable one of the following depending on whether you use yarn or npm, then remove the other one\n# COPY --chown=node:node yarn.lock .\n# COPY --chown=node:node package-lock.json .\n\n# If you use Yarn v3 then enable the following lines:\n# COPY --chown=node:node .yarnrc.yml .\n# COPY --chown=node:node .yarn/ .yarn/\n\n# If you have an additional \"tsconfig.base.json\" file then enable the following line:\n# COPY --chown=node:node tsconfig.base.json tsconfig.base.json\n\n# If you require additional NodeJS flags then specify them here\nENV NODE_OPTIONS=\"--enable-source-maps\"\n\n# ---------------------------------------- #\n#   End Conditional steps for end-users    #\n# ---------------------------------------- #\n\nCOPY --chown=node:node package.json .\nCOPY --chown=node:node tsconfig.json .\n\nRUN sed -i 's/\"prepare\": \"husky install\\( .github\\/husky\\)\\?\"/\"prepare\": \"\"/' ./package.json\n\nENTRYPOINT [\"dumb-init\", \"--\"]\n\n# =================== #\n#  Development Stage  #\n# =================== #\n\n# Development, used for development only (defaults to watch command)\nFROM base as development\n\nENV NODE_ENV=\"development\"\n\nUSER node\n\nCMD [ \"npm\", \"run\", \"docker:watch\"]\n\n# ================ #\n#   Builder Stage  #\n# ================ #\n\n# Build stage for production\nFROM base as build\n\nRUN npm install && npm cache clean --force;\n\nCOPY . /opt/app\n\nRUN npm run build\n\n# ==================== #\n#   Production Stage   #\n# ==================== #\n\n# Production image used to  run the bot in production, only contains node_modules & dist contents.\nFROM base as production\n\nENV NODE_ENV=\"production\"\n\nCOPY --from=build /opt/app/dist /opt/app/dist\nCOPY --from=build /opt/app/node_modules /opt/app/node_modules\nCOPY --from=build /opt/app/package.json /opt/app/package.json\n\nRUN chown node:node /opt/app/\n\nUSER node\n\nCMD [ \"npm\", \"run\", \"start\"]\n"
}