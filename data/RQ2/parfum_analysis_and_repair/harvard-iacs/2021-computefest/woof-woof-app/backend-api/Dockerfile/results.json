{
  "startTime": 1674254028660,
  "endTime": 1674254029659,
  "originalSmells": [
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 28,
        "lineEnd": 28,
        "columnStart": 4,
        "columnEnd": 22
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# Use the official Debian-hosted Python image\nFROM python:3.8-slim-buster\n\nARG DEBIAN_PACKAGES=\"build-essential git\"\n\n# Prevent apt from showing prompts\nENV DEBIAN_FRONTEND=noninteractive\n\n# Python wants UTF-8 locale\nENV LANG=C.UTF-8\n\n# Tell pipenv where the shell is. This allows us to use \"pipenv shell\" as a\n# container entry point.\nENV PYENV_SHELL=/bin/bash\n\n# Tell Python to disable buffering so we don't lose any logs.\nENV PYTHONUNBUFFERED=1\n\n# Ensure we have an up to date baseline, install dependencies and\n# create a user so we don't run the app as root\nRUN set -ex; \\\n    for i in $(seq 1 8); do mkdir -p \"/usr/share/man/man${i}\"; done && \\\n    apt-get update && \\\n    apt-get upgrade -y && \\\n    apt-get install -y --no-install-recommends $DEBIAN_PACKAGES && \\\n    apt-get clean && \\\n    rm -rf /var/lib/apt/lists/* && \\\n    pip install --no-cache-dir --upgrade pip && \\\n    pip install --no-cache-dir pipenv && \\\n    useradd -ms /bin/bash app -d /home/app -u 1000 -p \"$(openssl passwd -1 Passw0rd)\" && \\\n    mkdir -p /app && \\\n    chown app:app /app\n\nEXPOSE 9000\n\n# Switch to the new user\nUSER app\nWORKDIR /app\n\n# Install python packages\nADD --chown=app:app Pipfile Pipfile.lock /app/\n\nRUN pipenv sync\n\n# Add the rest of the source code. This is done last so we don't invalidate all\n# layers when we change a line of code.\nADD --chown=app:app . /app\n\n# Entry point\nENTRYPOINT [\"/bin/bash\",\"./docker-entrypoint.sh\"]"
}