{
  "startTime": 1674252039449,
  "endTime": 1674252040445,
  "originalSmells": [
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 39,
        "lineEnd": 39,
        "columnStart": 4,
        "columnEnd": 76
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM alpine:3\n\nUSER root\n\nENV HOME /home\nENV APP_DIR $HOME/docker/app\n\n# http://pkg-shadow.alioth.debian.org/features.php\nENV TEMPORARY_DEPENDENCIES='shadow'\nRUN apk --no-cache add bash ${TEMPORARY_DEPENDENCIES}\n\n# add user as per: https://docs.docker.com/engine/userguide/eng-image/dockerfile_best-practices/#user\nRUN groupadd -r docker && useradd --no-log-init -r -g docker docker\nRUN chown -R docker $HOME\n\nRUN apk --no-cache add \\\n    nodejs-current \\\n    nodejs-current-npm \\\n    # clean up obsolete files\n    && rm -rf /tmp/* /root/.npm\n\n# clean no longer needed dependencies\nRUN apk del ${TEMPORARY_DEPENDENCIES}\n\n# create directories\nRUN mkdir -p $APP_DIR\nRUN mkdir -p $APP_DIR/tests_output/screenshots\nRUN chown -R docker $APP_DIR\n\nWORKDIR $APP_DIR\n\nCOPY --chown=docker:docker package.json package-lock.json ./\n\n# switch to docker user to ensure correct permissions for npm dependencies\nUSER docker\n\n# `npm ci` actually enforces the package-lock and is way faster!\n# See https://docs.npmjs.com/cli/ci.html\nRUN npm ci --ignore-scripts --unsafe-perm --loglevel warn --no-progress || \\\n    npm install --ignore-scripts --unsafe-perm --loglevel warn --no-progress && npm cache clean --force;\n\nUSER root\n\n# add rest of repo to image (doing this after installing npm dependencies\n# makes for a faster development workflow because only a change to package*.json\n# will force docker to rebuild the \"npm install\" layer above)\nCOPY --chown=docker:docker . ./\n\nENV NODE_ENV=test\nENV TESTS_DIRECTORY=tests\nENV PATH=\"${PATH}:${APP_DIR}/node_modules/nightwatch/bin\"\n\nUSER docker\n"
}