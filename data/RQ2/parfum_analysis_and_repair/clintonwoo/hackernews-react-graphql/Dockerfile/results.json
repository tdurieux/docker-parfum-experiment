{
  "startTime": 1674252242658,
  "endTime": 1674252243644,
  "originalSmells": [
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 12,
        "lineEnd": 12,
        "columnStart": 4,
        "columnEnd": 34
      }
    },
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 35,
        "lineEnd": 35,
        "columnStart": 4,
        "columnEnd": 27
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# DEV BUILD STEP\nFROM node:14.17-alpine3.13 as devBuild\nWORKDIR /app\n\n# Log the npm config and env variables\nENV NODE_ENV=production\nRUN npm config ls\nRUN env\n\n# Install dependencies first so docker caches them\nCOPY package.json package-lock.json /app/\nRUN ls -a\nRUN npm install --production=false && npm cache clean --force;\n\n# Copy the source code and build\nCOPY . .\nRUN npm run build:prod\nRUN ls -a\n\n# PROD BUILD STEP\nFROM node:14.17-alpine3.13\n\n# Create an app directory on the container\nWORKDIR /app\nENV NODE_ENV=production\n\n# Project copy build, install only prod dependencies\nCOPY --from=devBuild /app/dist ./dist\nCOPY --from=devBuild /app/.next ./.next\nCOPY --from=devBuild /app/public ./public\nCOPY --from=devBuild /app/next.config.js ./next.config.js\nCOPY package.json package-lock.json healthcheck.js ./\n\nRUN ls -a\n\nRUN npm install --only=prod && npm cache clean --force;\n\nRUN npx next telemetry disable\n\n# Expose the container port to the OS\n# docker run takes -p argument to forward this port to network\nEXPOSE 3000\n\n# Start the application\nCMD npm run start:prod\n\nHEALTHCHECK --interval=30s --timeout=12s --start-period=30s \\  \n  CMD node /healthcheck.js\n"
}