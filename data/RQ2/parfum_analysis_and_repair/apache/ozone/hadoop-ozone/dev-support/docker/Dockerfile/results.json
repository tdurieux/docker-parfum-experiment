{
  "startTime": 1674220230365,
  "endTime": 1674220231397,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 25,
        "lineEnd": 25,
        "columnStart": 4,
        "columnEnd": 105
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 30,
        "lineEnd": 30,
        "columnStart": 4,
        "columnEnd": 130
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 34,
        "lineEnd": 34,
        "columnStart": 4,
        "columnEnd": 30
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 37,
        "lineEnd": 37,
        "columnStart": 4,
        "columnEnd": 29
      }
    },
    {
      "rule": "apkAddUseNoCache",
      "position": {
        "lineStart": 21,
        "lineEnd": 21,
        "columnStart": 4,
        "columnEnd": 29
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# Licensed to the Apache Software Foundation (ASF) under one or more\n# contributor license agreements.  See the NOTICE file distributed with\n# this work for additional information regarding copyright ownership.\n# The ASF licenses this file to You under the Apache License, Version 2.0\n# (the \"License\"); you may not use this file except in compliance with\n# the License.  You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\nFROM alpine\nRUN apk add --update --no-cache bash alpine-sdk maven grep openjdk8 py-pip rsync procps autoconf automake libtool findutils python3-dev libffi-dev openssl-dev gcc libc-dev rust cargo make\n\n#Install real glibc\nRUN apk --no-cache add ca-certificates wget && \\\n    wget -q -O /etc/apk/keys/sgerrand.rsa.pub https://alpine-pkgs.sgerrand.com/sgerrand.rsa.pub && \\\n    wget https://github.com/sgerrand/alpine-pkg-glibc/releases/download/2.33-r0/glibc-2.33-r0.apk && \\\n    apk add --no-cache glibc-2.33-r0.apk\n\n#Spotbugs install\nRUN mkdir -p /opt && \\\n    curl -f -sL https://repo.maven.apache.org/maven2/com/github/spotbugs/spotbugs/3.1.12/spotbugs-3.1.12.tgz | tar -xz && \\\n    mv spotbugs-* /opt/spotbugs\n\n#Install apache-ant\nRUN mkdir -p /opt && \\\n    curl -f -sL 'https://www.apache.org/dyn/mirrors/mirrors.cgi?action=download&filename=/ant/binaries/apache-ant-1.10.11-bin.tar.gz' | tar -xz && \\\n       mv apache-ant* /opt/ant\n\n#Install docker-compose\nRUN pip install --no-cache-dir docker-compose\n\n#Install pytest==2.8.7\nRUN pip install --no-cache-dir pytest==2.8.7\n\nENV PATH=$PATH:/opt/spotbugs/bin\n\nRUN addgroup -g 1000 default && \\\n   for i in $(seq 1 2000); do adduser jenkins$i -u $i -G default -h /tmp/ -H -D; done\n\n#This is a very huge local maven cache. Usually the mvn repository is not safe to be\n#shared between builds as concurrent installls are not handled very well\n#A simple workaround is to provide all the required 3rd party lib in the docker image\n#It will be cached by docker, and any additional dependency can be downloaded, artifacts\n#can be installed\nUSER jenkins1000\nRUN cd /tmp && \\\n   git clone --depth=1 https://gitbox.apache.org/repos/asf/ozone.git -b master && \\\n   cd /tmp/ozone && \\\n   mvn package dependency:go-offline -DskipTests -pl :ozone-dist -am && \\\n   rm -rf /tmp/.m2/repository/org/apache/ozone/hdds* && \\\n   rm -rf /tmp/.m2/repository/org/apache/ozone/ozone* && \\\n   find /tmp/.m2/repository -exec chmod o+wx {} \\;\n"
}