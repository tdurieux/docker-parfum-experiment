{
  "startTime": 1674216257963,
  "endTime": 1674216259223,
  "originalSmells": [
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 133,
        "lineEnd": 133,
        "columnStart": 4,
        "columnEnd": 105
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# Licensed to the Apache Software Foundation (ASF) under one\n# or more contributor license agreements. See the NOTICE file\n# distributed with this work for additional information\n# regarding copyright ownership. The ASF licenses this file\n# to you under the Apache License, Version 2.0 (the\n# \"License\"); you may not use this file except in compliance\n# with the License. You may obtain a copy of the License at\n#\n#   http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing,\n# software distributed under the License is distributed on an\n# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n# KIND, either express or implied. See the License for the\n# specific language governing permissions and limitations\n# under the License.\n#\n\nARG BASE_ALPINE_IMAGE=\"alpine:3.13\"\n\n# Build image\nFROM ${BASE_ALPINE_IMAGE} AS build\nLABEL maintainer=\"Apache NiFi <dev@nifi.apache.org>\"\n\nARG MINIFI_VERSION\nARG UID=1000\nARG GID=1000\n\n# PDH and WEL extensions and not listed as they are Windows specific\n# SYSTEMD extension is turned OFF explicitly as it has no use in an alpine container\nARG ENABLE_ALL=OFF\nARG ENABLE_PYTHON=OFF\nARG ENABLE_OPS=ON\nARG ENABLE_JNI=OFF\nARG ENABLE_OPENCV=OFF\nARG ENABLE_OPC=OFF\nARG ENABLE_GPS=OFF\nARG ENABLE_COAP=OFF\nARG ENABLE_SQL=OFF\nARG ENABLE_MQTT=OFF\nARG ENABLE_PCAP=OFF\nARG ENABLE_LIBRDKAFKA=OFF\nARG ENABLE_SENSORS=OFF\nARG ENABLE_USB_CAMERA=OFF\nARG ENABLE_TENSORFLOW=OFF\nARG ENABLE_AWS=OFF\nARG ENABLE_BUSTACHE=OFF\nARG ENABLE_SFTP=OFF\nARG ENABLE_OPENWSMAN=OFF\nARG ENABLE_AZURE=OFF\nARG ENABLE_ENCRYPT_CONFIG=ON\nARG ENABLE_NANOFI=OFF\nARG ENABLE_SPLUNK=OFF\nARG ENABLE_GCP=OFF\nARG ENABLE_ELASTICSEARCH=OFF\nARG ENABLE_TEST_PROCESSORS=OFF\nARG DISABLE_CURL=OFF\nARG DISABLE_JEMALLOC=ON\nARG DISABLE_CIVET=OFF\nARG DISABLE_EXPRESSION_LANGUAGE=OFF\nARG DISABLE_ROCKSDB=OFF\nARG DISABLE_LIBARCHIVE=OFF\nARG DISABLE_LZMA=OFF\nARG DISABLE_BZIP2=OFF\nARG ENABLE_SCRIPTING=OFF\nARG DISABLE_PYTHON_SCRIPTING=\nARG ENABLE_LUA_SCRIPTING=\nARG ENABLE_KUBERNETES=OFF\nARG ENABLE_PROCFS=OFF\nARG ENABLE_PROMETHEUS=OFF\nARG DISABLE_CONTROLLER=OFF\nARG CMAKE_BUILD_TYPE=Release\n\n# Install the system dependencies needed for a build\nRUN apk --no-cache add gcc \\\n  g++ \\\n  make \\\n  bison \\\n  flex \\\n  flex-dev \\\n  linux-headers \\\n  maven \\\n  openjdk8-jre-base \\\n  openjdk8 \\\n  autoconf \\\n  automake \\\n  libtool \\\n  curl-dev \\\n  cmake \\\n  git \\\n  patch \\\n  libpcap-dev \\\n  libpng-dev \\\n  libusb-dev \\\n  gpsd-dev \\\n  python3-dev \\\n  boost-dev \\\n  doxygen \\\n  ccache \\\n  lua-dev\n\nENV USER minificpp\nENV MINIFI_BASE_DIR /opt/minifi\nENV JAVA_HOME /usr/lib/jvm/default-jvm\nENV PATH ${PATH}:/usr/lib/jvm/default-jvm/bin\nENV MINIFI_HOME $MINIFI_BASE_DIR/nifi-minifi-cpp-${MINIFI_VERSION}\nENV MINIFI_VERSION ${MINIFI_VERSION}\n\n# Setup minificpp user\nRUN addgroup -g ${GID} ${USER} && adduser -u ${UID} -D -G ${USER} -g \"\" ${USER} && \\\n    install -d -o ${USER} -g ${USER} ${MINIFI_BASE_DIR}\nCOPY --chown=${USER}:${USER} . ${MINIFI_BASE_DIR}\nRUN if [ -d \"${MINIFI_BASE_DIR}/.ccache\" ]; then mv ${MINIFI_BASE_DIR}/.ccache /home/${USER}/.ccache; fi\n\nUSER ${USER}\n\nENV PATH /usr/lib/ccache/bin:${PATH}\nRUN mkdir ${MINIFI_BASE_DIR}/build\nWORKDIR ${MINIFI_BASE_DIR}/build\nRUN cmake -DSTATIC_BUILD= -DSKIP_TESTS=true -DENABLE_ALL=\"${ENABLE_ALL}\" -DENABLE_PYTHON=\"${ENABLE_PYTHON}\" -DENABLE_OPS=\"${ENABLE_OPS}\" \\\n    -DENABLE_JNI=\"${ENABLE_JNI}\" -DENABLE_OPENCV=\"${ENABLE_OPENCV}\" -DENABLE_OPC=\"${ENABLE_OPC}\" -DENABLE_GPS=\"${ENABLE_GPS}\" \\\n    -DENABLE_COAP=\"${ENABLE_COAP}\" -DENABLE_SQL=\"${ENABLE_SQL}\" -DENABLE_MQTT=\"${ENABLE_MQTT}\" -DENABLE_PCAP=\"${ENABLE_PCAP}\" \\\n    -DENABLE_LIBRDKAFKA=\"${ENABLE_LIBRDKAFKA}\" -DENABLE_SENSORS=\"${ENABLE_SENSORS}\" -DENABLE_USB_CAMERA=\"${ENABLE_USB_CAMERA}\" \\\n    -DENABLE_TENSORFLOW=\"${ENABLE_TENSORFLOW}\" -DENABLE_AWS=\"${ENABLE_AWS}\" -DENABLE_BUSTACHE=\"${ENABLE_BUSTACHE}\" -DENABLE_SFTP=\"${ENABLE_SFTP}\" \\\n    -DENABLE_OPENWSMAN=\"${ENABLE_OPENWSMAN}\" -DENABLE_AZURE=\"${ENABLE_AZURE}\" -DENABLE_NANOFI=${ENABLE_NANOFI} -DENABLE_SYSTEMD=OFF \\\n    -DDISABLE_CURL=\"${DISABLE_CURL}\" -DDISABLE_JEMALLOC=\"${DISABLE_JEMALLOC}\" -DDISABLE_CIVET=\"${DISABLE_CIVET}\" -DENABLE_SPLUNK=${ENABLE_SPLUNK} \\\n    -DENABLE_TEST_PROCESSORS=\"${ENABLE_TEST_PROCESSORS}\" -DDISABLE_EXPRESSION_LANGUAGE=\"${DISABLE_EXPRESSION_LANGUAGE}\" -DDISABLE_ROCKSDB=\"${DISABLE_ROCKSDB}\" \\\n    -DDISABLE_LIBARCHIVE=\"${DISABLE_LIBARCHIVE}\" -DDISABLE_LZMA=\"${DISABLE_LZMA}\" -DDISABLE_BZIP2=\"${DISABLE_BZIP2}\" \\\n    -DENABLE_SCRIPTING=\"${ENABLE_SCRIPTING}\" -DDISABLE_PYTHON_SCRIPTING=\"${DISABLE_PYTHON_SCRIPTING}\" -DENABLE_LUA_SCRIPTING=\"${ENABLE_LUA_SCRIPTING}\" \\\n    -DENABLE_KUBERNETES=\"${ENABLE_KUBERNETES}\" -DENABLE_GCP=\"${ENABLE_GCP}\" -DENABLE_PROCFS=\"${ENABLE_PROCFS}\" -DENABLE_PROMETHEUS=\"${ENABLE_PROMETHEUS}\" \\\n    -DENABLE_ELASTICSEARCH=\"${ENABLE_ELASTICSEARCH}\" -DDISABLE_CONTROLLER=\"${DISABLE_CONTROLLER}\" -DENABLE_ENCRYPT_CONFIG=\"${ENABLE_ENCRYPT_CONFIG}\" \\\n    -DAWS_ENABLE_UNITY_BUILD=OFF -DEXCLUDE_BOOST=ON -DCMAKE_BUILD_TYPE=\"${CMAKE_BUILD_TYPE}\" .. && \\\n    make -j \"$(nproc)\" package && \\\n    tar -xzvf \"${MINIFI_BASE_DIR}/build/nifi-minifi-cpp-${MINIFI_VERSION}.tar.gz\" -C \"${MINIFI_BASE_DIR}\" && rm \"${MINIFI_BASE_DIR}/build/nifi-minifi-cpp-${MINIFI_VERSION}.tar.gz\"\n\n\n# Release image\nFROM ${BASE_ALPINE_IMAGE} AS release\nLABEL maintainer=\"Apache NiFi <dev@nifi.apache.org>\"\n\nARG UID=1000\nARG GID=1000\nARG MINIFI_VERSION\n\nARG ENABLE_GPS=OFF\nARG ENABLE_JNI=OFF\nARG ENABLE_PCAP=OFF\nARG ENABLE_USB_CAMERA=OFF\nARG ENABLE_OPENCV=OFF\nARG ENABLE_PYTHON=OFF\nARG ENABLE_BUSTACHE=OFF\nARG ENABLE_SCRIPTING=OFF\nARG DISABLE_PYTHON_SCRIPTING=\nARG ENABLE_LUA_SCRIPTING=\nARG ENABLE_KUBERNETES=OFF\n\n# Add testing repo for rocksdb\nRUN echo 'http://dl-cdn.alpinelinux.org/alpine/edge/testing' >> /etc/apk/repositories\n\nENV USER minificpp\nENV MINIFI_BASE_DIR /opt/minifi\nENV MINIFI_HOME ${MINIFI_BASE_DIR}/minifi-current\nENV MINIFI_VERSIONED_HOME ${MINIFI_BASE_DIR}/nifi-minifi-cpp-${MINIFI_VERSION}\nENV JAVA_HOME /usr/lib/jvm/default-jvm\nENV PATH ${PATH}:/usr/lib/jvm/default-jvm/bin\n\nRUN addgroup -g ${GID} ${USER} && adduser -u ${UID} -D -G ${USER} -g \"\" ${USER} && \\\n    install -d -o ${USER} -g ${USER} ${MINIFI_BASE_DIR} && ln -s ${MINIFI_VERSIONED_HOME} ${MINIFI_HOME} && \\\n    apk add --no-cache libstdc++ tzdata alpine-conf && \\\n    if [ \"$ENABLE_GPS\" = \"ON\" ]; then apk add --no-cache gpsd; fi && \\\n    if [ \"$ENABLE_JNI\" = \"ON\" ]; then apk add --no-cache openjdk8-jre-base; fi && \\\n    if [ \"$ENABLE_PCAP\" = \"ON\" ]; then apk add --no-cache libpcap; fi && \\\n    if [ \"$ENABLE_USB_CAMERA\" = \"ON\" ]; then apk add --no-cache libpng libusb; fi && \\\n    if [ \"$ENABLE_OPENCV\" = \"ON\" ] || [ \"$ENABLE_BUSTACHE\" = \"ON\" ]; then apk add --no-cache boost; fi && \\\n    if [ \"$ENABLE_SCRIPTING\" = \"ON\" ] && [ -n \"$ENABLE_LUA_SCRIPTING\" ]; then apk add --no-cache lua; fi && \\\n    if [ \"$ENABLE_SCRIPTING\" = \"ON\" ] && [ -z \"$DISABLE_PYTHON_SCRIPTING\" ]; then apk add --no-cache python3; fi\n\n# Copy built minifi distribution from builder\nCOPY --from=build --chown=${USER}:${USER} ${MINIFI_VERSIONED_HOME} ${MINIFI_HOME}\nCOPY --from=build --chown=${USER}:${USER} ${MINIFI_BASE_DIR}/docker/conf/minifi-log.properties ${MINIFI_HOME}/conf/minifi-log.properties\nRUN setup-timezone -z UTC\n\nUSER ${USER}\nWORKDIR ${MINIFI_HOME}\n\n# Start MiNiFi CPP in the foreground\nCMD [\"./bin/minifi.sh\", \"run\"]\n"
}