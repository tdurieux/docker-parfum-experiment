{
  "startTime": 1674251681201,
  "endTime": 1674251682125,
  "originalSmells": [
    {
      "rule": "yumInstallRmVarCacheYum",
      "position": {
        "lineStart": 31,
        "lineEnd": 32,
        "columnStart": 4,
        "columnEnd": 108
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# Licensed to the Apache Software Foundation (ASF) under one\n# or more contributor license agreements. See the NOTICE file\n# distributed with this work for additional information\n# regarding copyright ownership. The ASF licenses this file\n# to you under the Apache License, Version 2.0 (the\n# \"License\"); you may not use this file except in compliance\n# with the License. You may obtain a copy of the License at\n#\n#   http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing,\n# software distributed under the License is distributed on an\n# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n# KIND, either express or implied. See the License for the\n# specific language governing permissions and limitations\n# under the License.\n#\n\n# First stage: the build environment\nFROM fedora:34 AS build_deps\nLABEL maintainer=\"Apache NiFi <dev@nifi.apache.org>\"\n\nARG MINIFI_VERSION\n\n# Install the system dependencies needed for a build\n\nENV MINIFI_BASE_DIR /opt/minifi\nENV MINIFI_HOME $MINIFI_BASE_DIR/nifi-minifi-cpp-$MINIFI_VERSION\n\nRUN echo \"fastestmirror=True\" | tee -a /etc/dnf/dnf.conf\nRUN for iter in {1..10}; do yum update -y && \\\n    yum -y install java-1.8.0-openjdk java-1.8.0-openjdk-devel flex bison make patch sudo git which maven libtool autoconf automake java-1.8.0-openjdk java-1.8.0-openjdk-devel sudo \\\n    git which maven make libarchive boost-devel lua-devel libusb-devel libpng-devel gpsd-devel libpcap-devel && \\\n    yum clean all && exit_code=0 && break || exit_code=$? && echo \"yum error: retry $iter in 10s\" && sleep 10; done; rm -rf /var/cache/yum \\\n    (exit $exit_code)\n\nRUN mkdir -p $MINIFI_BASE_DIR\nCOPY . ${MINIFI_BASE_DIR}\n\n\nFROM build_deps AS release\nARG ENABLE_ALL=OFF\nARG ENABLE_PYTHON=OFF\nARG ENABLE_OPS=ON\nARG ENABLE_JNI=OFF\nARG ENABLE_OPENCV=OFF\nARG ENABLE_OPC=OFF\nARG ENABLE_GPS=OFF\nARG ENABLE_COAP=OFF\nARG ENABLE_SQL=ON\nARG ENABLE_MQTT=ON\nARG ENABLE_PCAP=OFF\nARG ENABLE_LIBRDKAFKA=ON\nARG ENABLE_SENSORS=OFF\nARG ENABLE_USB_CAMERA=OFF\nARG ENABLE_TENSORFLOW=OFF\nARG ENABLE_AWS=ON\nARG ENABLE_BUSTACHE=OFF\nARG ENABLE_SFTP=OFF\nARG ENABLE_OPENWSMAN=OFF\nARG ENABLE_AZURE=ON\nARG ENABLE_ENCRYPT_CONFIG=ON\nARG ENABLE_NANOFI=OFF\nARG ENABLE_SPLUNK=ON\nARG ENABLE_GCP=ON\nARG ENABLE_ELASTICSEARCH=OFF\nARG ENABLE_SYSTEMD=ON\nARG DISABLE_CURL=OFF\nARG DISABLE_JEMALLOC=ON\nARG DISABLE_CIVET=OFF\nARG DISABLE_EXPRESSION_LANGUAGE=OFF\nARG DISABLE_ROCKSDB=OFF\nARG DISABLE_LIBARCHIVE=OFF\nARG DISABLE_LZMA=OFF\nARG DISABLE_BZIP2=OFF\nARG ENABLE_SCRIPTING=OFF\nARG DISABLE_PYTHON_SCRIPTING=ON\nARG ENABLE_LUA_SCRIPTING=ON\nARG ENABLE_KUBERNETES=OFF\nARG ENABLE_PROCFS=OFF\nARG ENABLE_PROMETHEUS=OFF\nARG DISABLE_CONTROLLER=OFF\nARG CMAKE_BUILD_TYPE=Release\n# Perform the build\nRUN cd $MINIFI_BASE_DIR \\\n\t&& ./bootstrap.sh -e \\\n\t&& rm -rf build \\\n\t&& mkdir build \\\n\t&& cd build \\\n    && cmake3 -DSTATIC_BUILD= -DSKIP_TESTS=true -DENABLE_ALL=\"${ENABLE_ALL}\" -DENABLE_PYTHON=\"${ENABLE_PYTHON}\" -DENABLE_OPS=\"${ENABLE_OPS}\" \\\n    -DENABLE_JNI=\"${ENABLE_JNI}\" -DENABLE_OPENCV=\"${ENABLE_OPENCV}\" -DENABLE_OPC=\"${ENABLE_OPC}\" -DENABLE_GPS=\"${ENABLE_GPS}\" \\\n    -DENABLE_COAP=\"${ENABLE_COAP}\" -DENABLE_SQL=\"${ENABLE_SQL}\" -DENABLE_MQTT=\"${ENABLE_MQTT}\" -DENABLE_PCAP=\"${ENABLE_PCAP}\" \\\n    -DENABLE_LIBRDKAFKA=\"${ENABLE_LIBRDKAFKA}\" -DENABLE_SENSORS=\"${ENABLE_SENSORS}\" -DENABLE_USB_CAMERA=\"${ENABLE_USB_CAMERA}\" \\\n    -DENABLE_TENSORFLOW=\"${ENABLE_TENSORFLOW}\" -DENABLE_AWS=\"${ENABLE_AWS}\" -DENABLE_BUSTACHE=\"${ENABLE_BUSTACHE}\" -DENABLE_SFTP=\"${ENABLE_SFTP}\" \\\n    -DENABLE_OPENWSMAN=\"${ENABLE_OPENWSMAN}\" -DENABLE_AZURE=\"${ENABLE_AZURE}\" -DENABLE_NANOFI=${ENABLE_NANOFI} -DENABLE_SYSTEMD=\"${ENABLE_SYSTEMD}\" \\\n    -DDISABLE_CURL=\"${DISABLE_CURL}\" -DDISABLE_JEMALLOC=\"${DISABLE_JEMALLOC}\" -DDISABLE_CIVET=\"${DISABLE_CIVET}\" -DENABLE_SPLUNK=${ENABLE_SPLUNK} \\\n    -DENABLE_TEST_PROCESSORS=OFF -DDISABLE_EXPRESSION_LANGUAGE=\"${DISABLE_EXPRESSION_LANGUAGE}\" -DDISABLE_ROCKSDB=\"${DISABLE_ROCKSDB}\" \\\n    -DDISABLE_LIBARCHIVE=\"${DISABLE_LIBARCHIVE}\" -DDISABLE_LZMA=\"${DISABLE_LZMA}\" -DDISABLE_BZIP2=\"${DISABLE_BZIP2}\" \\\n    -DENABLE_SCRIPTING=\"${ENABLE_SCRIPTING}\" -DDISABLE_PYTHON_SCRIPTING=\"${DISABLE_PYTHON_SCRIPTING}\" -DENABLE_LUA_SCRIPTING=\"${ENABLE_LUA_SCRIPTING}\" \\\n    -DENABLE_KUBERNETES=\"${ENABLE_KUBERNETES}\" -DENABLE_GCP=\"${ENABLE_GCP}\" -DENABLE_PROCFS=\"${ENABLE_PROCFS}\" -DENABLE_PROMETHEUS=\"${ENABLE_PROMETHEUS}\" \\\n    -DENABLE_ELASTICSEARCH=\"${ENABLE_ELASTICSEARCH}\" -DDISABLE_CONTROLLER=\"${DISABLE_CONTROLLER}\" -DENABLE_ENCRYPT_CONFIG=\"${ENABLE_ENCRYPT_CONFIG}\" \\\n    -DAWS_ENABLE_UNITY_BUILD=OFF -DEXCLUDE_BOOST=ON -DCMAKE_BUILD_TYPE=\"${CMAKE_BUILD_TYPE}\" .. \\\n    && make -j \"$(nproc)\" package\n\n"
}