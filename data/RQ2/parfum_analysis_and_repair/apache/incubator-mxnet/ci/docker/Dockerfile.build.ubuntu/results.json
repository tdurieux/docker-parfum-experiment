{
  "startTime": 1674250204644,
  "endTime": 1674250205670,
  "originalSmells": [
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 123,
        "lineEnd": 123,
        "columnStart": 4,
        "columnEnd": 29
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 132,
        "lineEnd": 132,
        "columnStart": 4,
        "columnEnd": 37
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 40,
        "lineEnd": 40,
        "columnStart": 4,
        "columnEnd": 54
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 45,
        "lineEnd": 92,
        "columnStart": 4,
        "columnEnd": 16
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 162,
        "lineEnd": 162,
        "columnStart": 8,
        "columnEnd": 79
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 169,
        "lineEnd": 172,
        "columnStart": 8,
        "columnEnd": 63
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# -*- mode: dockerfile -*-\n# Licensed to the Apache Software Foundation (ASF) under one\n# or more contributor license agreements.  See the NOTICE file\n# distributed with this work for additional information\n# regarding copyright ownership.  The ASF licenses this file\n# to you under the Apache License, Version 2.0 (the\n# \"License\"); you may not use this file except in compliance\n# with the License.  You may obtain a copy of the License at\n#\n#   http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing,\n# software distributed under the License is distributed on an\n# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n# KIND, either express or implied.  See the License for the\n# specific language governing permissions and limitations\n# under the License.\n#\n# Dockerfile for Ubuntu based builds.\n#\n# See docker-compose.yml for supported BASE_IMAGE ARGs and targets.\n\n####################################################################################################\n# The Dockerfile uses a dynamic BASE_IMAGE (for example ubuntu:20.04\n# nvidia/cuda:11.1-cudnn8-devel-ubuntu20.04 etc).\n# On top of BASE_IMAGE we install all dependencies shared by all MXNet build\n# environments into a \"base\" target. At the end of this file, we can specialize\n# \"base\" for specific usecases. The target built by docker can be selected via\n# \"--target\" option or docker-compose.yml\n####################################################################################################\nARG BASE_IMAGE\nFROM $BASE_IMAGE AS base\n\nWORKDIR /work/deps\n\nSHELL [\"/bin/bash\", \"-c\"]\nRUN export DEBIAN_FRONTEND=noninteractive && \\\n    export OS_RELEASE=\"$(cat /etc/os-release)\" && \\\n    apt-get clean && \\\n    apt-get update && \\\n    apt-get install --no-install-recommends -y wget software-properties-common && \\\n    wget -qO - wget https://apt.repos.intel.com/intel-gpg-keys/GPG-PUB-KEY-INTEL-SW-PRODUCTS.PUB -O - | apt-key add -; \\\n    add-apt-repository \"deb https://apt.repos.intel.com/oneapi all main\"; \\\n    INTEL_MKL=\"-2022.0.2\"; \\\n    apt-get update && \\\n    apt-get install --no-install-recommends -y \\\n        ## Utilities\n        curl \\\n        zip \\\n        unzip \\\n        pandoc \\\n        ## Development tools\n        build-essential \\\n        ninja-build \\\n        git \\\n        protobuf-compiler \\\n        libprotobuf-dev \\\n        default-jdk \\\n        clang-6.0 \\\n        clang-format \\\n        python-yaml \\\n        clang-10 \\\n        clang-tidy-10 \\\n        g++ \\\n        g++-7 \\\n        g++-8 \\\n        intel-oneapi-mkl${INTEL_MKL} \\\n        intel-oneapi-mkl-devel${INTEL_MKL} \\\n        libomp-dev \\\n        ## Dependencies\n        libgomp1 \\\n        libturbojpeg0-dev \\\n        libcurl4-openssl-dev \\\n        libatlas-base-dev \\\n        libzmq3-dev \\\n        libopencv-dev \\\n        libxml2-dev \\\n        # BytePS\n        numactl \\\n        libnuma-dev \\\n        ## Frontend languages\n        # Python\n        python3 \\\n        python3-pip \\\n        ## Documentation\n        doxygen \\\n        pandoc \\\n        ## Build-dependencies for ccache 3.7.9\n        autoconf \\\n        gperf \\\n        libb2-dev \\\n        libzstd-dev \\\n        gfortran && \\\n    rm -rf /var/lib/apt/lists/* && \\\n    add-apt-repository -r \"deb https://apt.repos.intel.com/oneapi all main\"\n\n# Build OpenBLAS from source\nRUN export LIBRARY_PATH=$LIBRARY_PATH:/usr/lib/gcc/x86_64-linux-gnu/7/ && \\\n    mkdir ~/openblas && \\\n    cd ~/openblas && \\\n    OPENBLAS_VERSION=0.3.10 && \\\n    wget \\\n        https://github.com/xianyi/OpenBLAS/archive/v${OPENBLAS_VERSION}.zip \\\n        -O openblas.zip && \\\n    unzip -q openblas.zip -d . && \\\n    cd OpenBLAS-${OPENBLAS_VERSION} && \\\n    CXX=\"clang++-6.0 -fPIC\" CC=\"clang-6.0 -fPIC\" make -j DYNAMIC_ARCH=1 DYNAMIC_OLDER=1 \\\n        USE_OPENMP=0 INTERFACE64=1 BINARY=64 && \\\n    make PREFIX=/usr/local/openblas-clang install && \\\n    cd .. && \\\n    rm -rf OpenBLAS-${OPENBLAS_VERSION} && \\\n    unzip -q openblas.zip -d . && \\\n    cd OpenBLAS-${OPENBLAS_VERSION} && \\\n    CXX=\"g++ -fPIC\" CC=\"gcc -fPIC\" make -j DYNAMIC_ARCH=1 DYNAMIC_OLDER=1 \\\n        USE_OPENMP=1 INTERFACE64=1 BINARY=64 && \\\n    make PREFIX=/usr/local install\n\n# ccache 3.7.9 has fixes for caching nvcc outputs\nRUN cd /usr/local/src && \\\n    git clone --recursive https://github.com/ccache/ccache.git && \\\n    cd ccache && \\\n    git checkout v3.7.9 && \\\n    ./autogen.sh && \\\n    ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --disable-man && \\\n    make -j$(nproc) && \\\n    make install && \\\n    cd /usr/local/src && \\\n    rm -rf ccache\n\n# RAT License Checker tool\nRUN cd /usr/local/src && \\\n    wget https://archive.apache.org/dist/creadur/apache-rat-0.13/apache-rat-0.13-bin.tar.gz && \\\n    tar xf apache-rat-0.13-bin.tar.gz && rm apache-rat-0.13-bin.tar.gz\n\n# Python & cmake\nCOPY install/requirements /work/\nRUN python3 -m pip install --upgrade pip && \\\n    python3 -m pip install cmake==3.16.6 && \\\n    python3 -m pip install -r /work/requirements\n\nARG USER_ID=0\nCOPY install/docker_filepermissions.sh /work/\nRUN /work/docker_filepermissions.sh\n\nENV PYTHONPATH=./python/\nWORKDIR /work/mxnet\n\nCOPY runtime_functions.sh /work/\n\n####################################################################################################\n# Specialize base image to install more gpu specific dependencies.\n# The target built by docker can be selected via \"--target\" option or docker-compose.yml\n####################################################################################################\nFROM base as gpu\n\n# Install TensorRT\n# Use bash as it has better support for string comparisons in if clauses\nSHELL [\"/bin/bash\", \"-c\"]\n# We need to redeclare ARG due to\n# https://docs.docker.com/engine/reference/builder/#understand-how-arg-and-from-interact\nARG BASE_IMAGE\nRUN apt-get update && \\\n        apt-get install --no-install-recommends -y --allow-change-held-packages libcudnn8 libcudnn8-dev && \\\n        rm -rf /var/lib/apt/lists/*\n\nARG TRT_VERSION\nRUN if [ ! -z \"${TRT_VERSION}\" ]; then \\\n        apt-get update && \\\n        TRT_MAJOR_VERSION=$(echo $TRT_VERSION | cut -d. -f 1) && \\\n        apt-get install --no-install-recommends -y libnvinfer${TRT_MAJOR_VERSION}=${TRT_VERSION} \\\n                           libnvinfer-dev=${TRT_VERSION} \\\n                           libnvinfer-plugin${TRT_MAJOR_VERSION}=${TRT_VERSION} \\\n                           libnvinfer-plugin-dev=${TRT_VERSION}; \\\n        rm -rf /var/lib/apt/lists/*; \\\n    fi\n\n\n"
}