{
  "startTime": 1674253979534,
  "endTime": 1674253981586,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 42,
        "lineEnd": 42,
        "columnStart": 4,
        "columnEnd": 72
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 86,
        "lineEnd": 86,
        "columnStart": 2,
        "columnEnd": 137
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 95,
        "lineEnd": 95,
        "columnStart": 2,
        "columnEnd": 141
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 105,
        "lineEnd": 105,
        "columnStart": 2,
        "columnEnd": 120
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 114,
        "lineEnd": 114,
        "columnStart": 2,
        "columnEnd": 123
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 123,
        "lineEnd": 123,
        "columnStart": 2,
        "columnEnd": 84
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 132,
        "lineEnd": 132,
        "columnStart": 2,
        "columnEnd": 141
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 136,
        "lineEnd": 136,
        "columnStart": 2,
        "columnEnd": 143
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 140,
        "lineEnd": 140,
        "columnStart": 2,
        "columnEnd": 143
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 145,
        "lineEnd": 145,
        "columnStart": 5,
        "columnEnd": 137
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 146,
        "lineEnd": 146,
        "columnStart": 5,
        "columnEnd": 141
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 147,
        "lineEnd": 147,
        "columnStart": 5,
        "columnEnd": 141
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 148,
        "lineEnd": 148,
        "columnStart": 5,
        "columnEnd": 141
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 149,
        "lineEnd": 149,
        "columnStart": 5,
        "columnEnd": 147
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 150,
        "lineEnd": 150,
        "columnStart": 5,
        "columnEnd": 151
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 151,
        "lineEnd": 151,
        "columnStart": 5,
        "columnEnd": 151
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 152,
        "lineEnd": 152,
        "columnStart": 5,
        "columnEnd": 151
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 172,
        "lineEnd": 172,
        "columnStart": 2,
        "columnEnd": 117
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 175,
        "lineEnd": 175,
        "columnStart": 2,
        "columnEnd": 109
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 178,
        "lineEnd": 178,
        "columnStart": 2,
        "columnEnd": 114
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 261,
        "lineEnd": 261,
        "columnStart": 4,
        "columnEnd": 33
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 314,
        "lineEnd": 314,
        "columnStart": 4,
        "columnEnd": 24
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 321,
        "lineEnd": 321,
        "columnStart": 4,
        "columnEnd": 24
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 46,
        "lineEnd": 46,
        "columnStart": 5,
        "columnEnd": 113
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 51,
        "lineEnd": 51,
        "columnStart": 5,
        "columnEnd": 67
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 18,
        "lineEnd": 20,
        "columnStart": 26,
        "columnEnd": 10
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 27,
        "lineEnd": 36,
        "columnStart": 26,
        "columnEnd": 5
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 159,
        "lineEnd": 168,
        "columnStart": 26,
        "columnEnd": 6
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 18,
        "lineEnd": 20,
        "columnStart": 26,
        "columnEnd": 10
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 27,
        "lineEnd": 36,
        "columnStart": 26,
        "columnEnd": 5
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 159,
        "lineEnd": 168,
        "columnStart": 26,
        "columnEnd": 6
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# Licensed to the Apache Software Foundation (ASF) under one or more\n# contributor license agreements.  See the NOTICE file distributed with\n# this work for additional information regarding copyright ownership.  The\n# ASF licenses this file to you under the Apache License, Version 2.0 (the\n# \"License\"); you may not use this file except in compliance with the\n# License.  You may obtain a copy of the License at\n#\n#   http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the\n# License for the specific language governing permissions and limitations\n# under the License.\n\nFROM ubuntu:20.04 AS builder-base\n# NOTE WE ARE NOT REMOVEING APT CACHE.\n# This should only be used for temp build images that artifacts will be copied from\nRUN apt-get update -qq && apt-get install --no-install-recommends -y -qq \\\n  curl \\\n  xz-utils && rm -rf /var/lib/apt/lists/*;\n\n###############################################################################\n# Base image that should be used to prepare tools from nuttx-tools\n###############################################################################\nFROM builder-base AS nuttx-tools\n\nRUN apt-get update -qq && DEBIAN_FRONTEND=\"noninteractive\" apt-get --no-install-recommends install -y -qq \\\n  flex \\\n  bison \\\n  gperf \\\n  libncurses5-dev \\\n  make \\\n  cmake \\\n  g++ \\\n  gawk \\\n  git && rm -rf /var/lib/apt/lists/*;\n\nRUN mkdir /tools\nWORKDIR /tools\n\nRUN mkdir -p /tools/nuttx-tools\nRUN curl -f -s -L https://bitbucket.org/nuttx/tools/get/9ad3e1ee75c7.tar.gz \\\n  | tar -C nuttx-tools --strip-components=1 -xz\n\nRUN cd nuttx-tools/kconfig-frontends \\\n  && ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --enable-mconf --disable-gconf --disable-qconf --enable-static --prefix=/tools/kconfig-frontends \\\n  && make install\n\nRUN cd nuttx-tools \\\n  && mkdir genromfs \\\n  && tar -C genromfs --strip-components=1 -xf genromfs-0.5.2.tar.gz \\\n  && cd genromfs \\\n  && make install PREFIX=/tools/genromfs && rm genromfs-0.5.2.tar.gz\n\nRUN mkdir bloaty -p \\\n  && git clone --depth 1 --branch v1.1 https://github.com/google/bloaty bloaty \\\n  && cd bloaty \\\n  && cmake -DCMAKE_SYSTEM_PREFIX_PATH=/tools/bloaty \\\n  && make install\n\n# Install Rust and targets supported from NuttX\nENV RUST_HOME=/tools/rust\nENV CARGO_HOME=$RUST_HOME/cargo\nENV RUSTUP_HOME=$RUST_HOME/rustup\nRUN mkdir -p $CARGO_HOME \\\n  && curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y \\\n  && $CARGO_HOME/bin/rustup target add thumbv6m-none-eabi \\\n  && $CARGO_HOME/bin/rustup target add thumbv7m-none-eabi\n\nCMD [ \"/bin/bash\" ]\n\n###############################################################################\n# Base image that should be used to prepare arch build images\n###############################################################################\nFROM builder-base AS nuttx-toolchain-base\n\nRUN mkdir /tools\nWORKDIR /tools\n\n###############################################################################\n# Build image for tool required by ARM builds\n###############################################################################\nFROM nuttx-toolchain-base AS nuttx-toolchain-arm\n# Download the latest ARM GCC toolchain prebuilt by ARM\nRUN mkdir gcc-arm-none-eabi && \\\n  curl -f -s -L \"https://developer.arm.com/-/media/Files/downloads/gnu-rm/10.3-2021.10/gcc-arm-none-eabi-10.3-2021.10-x86_64-linux.tar.bz2\" \\\n  | tar -C gcc-arm-none-eabi --strip-components 1 -xj\n\n###############################################################################\n# Build image for tool required by ARM64 builds\n###############################################################################\nFROM nuttx-toolchain-base AS nuttx-toolchain-arm64\n# Download the latest ARM64 GCC toolchain prebuilt by ARM\nRUN mkdir gcc-aarch64-none-elf && \\\n  curl -f -s -L \"https://developer.arm.com/-/media/Files/downloads/gnu/11.2-2022.02/binrel/gcc-arm-11.2-2022.02-x86_64-aarch64-none-elf.tar.xz\" \\\n  | tar -C gcc-aarch64-none-elf --strip-components 1 -xJ\n\n###############################################################################\n# Build image for tool required by Pinguino builds\n###############################################################################\nFROM nuttx-toolchain-base AS nuttx-toolchain-pinguino\n# Download the pinguino compilers. Note this includes both 8bit and 32bit\n# toolchains and builds for multiple host systems. Only copy what is needed.\nRUN mkdir pinguino-compilers && \\\n  curl -f -s -L \"https://github.com/PinguinoIDE/pinguino-compilers/archive/62db5158d7f6d41c6fadb05de81cc31dd81a1958.tar.gz\" \\\n  | tar -C pinguino-compilers --strip-components=2 --wildcards -xz */linux64\n\n###############################################################################\n# Build image for tool required by RISCV builds\n###############################################################################\nFROM nuttx-toolchain-base AS nuttx-toolchain-riscv\n# Download the latest RISCV GCC toolchain prebuilt by SiFive\nRUN mkdir riscv64-unknown-elf-gcc && \\\n  curl -f -s -L \"https://static.dev.sifive.com/dev-tools/riscv64-unknown-elf-gcc-8.3.0-2019.08.0-x86_64-linux-ubuntu14.tar.gz\" \\\n  | tar -C riscv64-unknown-elf-gcc --strip-components 1 -xz\n\n###############################################################################\n# Build image for tool required by SPARC builds\n###############################################################################\nFROM nuttx-toolchain-base AS nuttx-toolchain-sparc\n# Download the SPARC GCC toolchain prebuilt by Gaisler\nRUN mkdir sparc-gaisler-elf-gcc && \\\n  curl -f -s -L \"https://www.gaisler.com/anonftp/bcc2/bin/bcc-2.1.0-gcc-linux64.tar.xz\" \\\n  | tar -C sparc-gaisler-elf-gcc --strip-components 1 -xJ\n\n###############################################################################\n# Build image for tool required by ESP32 builds\n###############################################################################\nFROM nuttx-toolchain-base AS nuttx-toolchain-esp32\n# Download the latest ESP32 GCC toolchain prebuilt by Espressif\nRUN mkdir -p xtensa-esp32-elf-gcc && \\\n  curl -f -s -L \"https://github.com/espressif/crosstool-NG/releases/download/esp-2021r1/xtensa-esp32-elf-gcc8_4_0-esp-2021r1-linux-amd64.tar.gz\" \\\n  | tar -C xtensa-esp32-elf-gcc --strip-components 1 -xz\n\nRUN mkdir -p xtensa-esp32s2-elf-gcc && \\\n  curl -f -s -L \"https://github.com/espressif/crosstool-NG/releases/download/esp-2021r1/xtensa-esp32s2-elf-gcc8_4_0-esp-2021r1-linux-amd64.tar.gz\" \\\n  | tar -C xtensa-esp32s2-elf-gcc --strip-components 1 -xz\n\nRUN mkdir -p xtensa-esp32s3-elf-gcc && \\\n  curl -f -s -L \"https://github.com/espressif/crosstool-NG/releases/download/esp-2021r1/xtensa-esp32s3-elf-gcc8_4_0-esp-2021r1-linux-amd64.tar.gz\" \\\n  | tar -C xtensa-esp32s3-elf-gcc --strip-components 1 -xz\n\nRUN echo \"ESP Binaries: 2022/01/26\"\nRUN mkdir -p /tools/blobs && cd /tools/blobs \\\n  && curl -f -s -L \"https://github.com/espressif/esp-nuttx-bootloader/releases/download/latest/bootloader-esp32.bin\" -o bootloader-esp32.bin \\\n  && curl -f -s -L \"https://github.com/espressif/esp-nuttx-bootloader/releases/download/latest/bootloader-esp32c3.bin\" -o bootloader-esp32c3.bin \\\n  && curl -f -s -L \"https://github.com/espressif/esp-nuttx-bootloader/releases/download/latest/bootloader-esp32s2.bin\" -o bootloader-esp32s2.bin \\\n  && curl -f -s -L \"https://github.com/espressif/esp-nuttx-bootloader/releases/download/latest/bootloader-esp32s3.bin\" -o bootloader-esp32s3.bin \\\n  && curl -f -s -L \"https://github.com/espressif/esp-nuttx-bootloader/releases/download/latest/partition-table-esp32.bin\" -o partition-table-esp32.bin \\\n  && curl -f -s -L \"https://github.com/espressif/esp-nuttx-bootloader/releases/download/latest/partition-table-esp32c3.bin\" -o partition-table-esp32c3.bin \\\n  && curl -f -s -L \"https://github.com/espressif/esp-nuttx-bootloader/releases/download/latest/partition-table-esp32s2.bin\" -o partition-table-esp32s2.bin \\\n  && curl -f -s -L \"https://github.com/espressif/esp-nuttx-bootloader/releases/download/latest/partition-table-esp32s3.bin\" -o partition-table-esp32s3.bin\n\n###############################################################################\n# Build image for tool required by Renesas builds\n###############################################################################\nFROM nuttx-toolchain-base AS nuttx-toolchain-renesas\n# Build Renesas RX GCC toolchain\nRUN apt-get update -qq && DEBIAN_FRONTEND=\"noninteractive\" apt-get --no-install-recommends install -y -qq \\\n  flex \\\n  bison \\\n  texinfo \\\n  libncurses5-dev \\\n  m4 \\\n  make \\\n  gcc \\\n  g++ \\\n  wget && rm -rf /var/lib/apt/lists/*;\n\n# Download toolchain source code\nRUN mkdir -p /tools/renesas-tools/source/binutils && \\\n  curl -f -s -L \"https://gcc-renesas.com/downloads/d.php?f=rx/binutils/4.8.4.201803-gnurx/rx_binutils2.24_2018Q3.tar.gz\" \\\n  | tar -C renesas-tools/source/binutils --strip-components=1 -xz\nRUN mkdir -p /tools/renesas-tools/source/gcc && \\\n  curl -f -s -L \"https://gcc-renesas.com/downloads/d.php?f=rx/gcc/4.8.4.201803-gnurx/rx_gcc_4.8.4_2018Q3.tar.gz\" \\\n  | tar -C renesas-tools/source/gcc --strip-components=1 -xz\nRUN mkdir -p /tools/renesas-tools/source/newlib && \\\n  curl -f -s -L \"https://gcc-renesas.com/downloads/d.php?f=rx/newlib/4.8.4.201803-gnurx/rx_newlib2.2.0_2018Q3.tar.gz\" \\\n  | tar -C renesas-tools/source/newlib --strip-components=1 -xz\n\n# Install binutils\nRUN cd renesas-tools/source/binutils && \\\n  chmod +x ./configure ./mkinstalldirs && \\\n  mkdir -p /tools/renesas-tools/build/binutils && cd /tools/renesas-tools/build/binutils && \\\n  /tools/renesas-tools/source/binutils/configure --target=rx-elf --prefix=/tools/renesas-toolchain/rx-elf-gcc --disable-werror &&\\\n  make && make install\nENV PATH=\"/tools/renesas-toolchain/rx-elf-gcc/bin:$PATH\"\n\n# Install gcc\nRUN cd renesas-tools/source/gcc && \\\n  chmod +x ./contrib/download_prerequisites ./configure ./move-if-change ./libgcc/mkheader.sh && \\\n  ./contrib/download_prerequisites && \\\n  sed -i '1s/^/@documentencoding ISO-8859-1\\n/' ./gcc/doc/gcc.texi && \\\n  sed -i 's/@tex/\\n&/g' ./gcc/doc/gcc.texi && sed -i 's/@end tex/\\n&/g' ./gcc/doc/gcc.texi && \\\n  mkdir -p /tools/renesas-tools/build/gcc && cd /tools/renesas-tools/build/gcc && \\\n  /tools/renesas-tools/source/gcc/configure --target=rx-elf --prefix=/tools/renesas-toolchain/rx-elf-gcc \\\n  --disable-shared --disable-multilib --disable-libssp --disable-libstdcxx-pch --disable-werror --enable-lto \\\n  --enable-gold --with-pkgversion=GCC_Build_1.02 --with-newlib --enable-languages=c && \\\n  make && make install\nENV PATH=\"/tools/renesas-toolchain/rx-elf-gcc/bin:$PATH\"\n\n# Install newlib\nRUN cd renesas-tools/source/newlib && \\\n  chmod +x ./configure && \\\n  mkdir -p /tools/renesas-tools/build/newlib && cd /tools/renesas-tools/build/newlib && \\\n  /tools/renesas-tools/source/newlib/configure --target=rx-elf --prefix=/tools/renesas-toolchain/rx-elf-gcc && \\  \n  make && make install\nRUN cd /tools/renesas-tools/build/gcc && \\\n  make && make install\n\n###############################################################################\n# Final Docker image used for running CI system.  This includes all toolchains\n# supported by the CI system.\n###############################################################################\nFROM ubuntu:20.04\nLABEL maintainer=\"dev@nuttx.apache.org\"\n\nRUN dpkg --add-architecture i386\n# This is used for the final images so make sure to not store apt cache\n# Note: xtensa-esp32-elf-gdb is linked to libpython2.7\nRUN apt-get update -qq && DEBIAN_FRONTEND=\"noninteractive\" apt-get install -y -qq --no-install-recommends \\\n  -o APT::Immediate-Configure=0 \\\n  avr-libc \\\n  build-essential \\\n  ccache \\\n  cmake \\\n  curl \\\n  gcc \\\n  gcc-avr \\\n  gcc-multilib \\\n  gettext \\\n  git \\\n  lib32z1-dev \\\n  libc6-dev-i386 \\\n  libasound2-dev libasound2-dev:i386 \\\n  libcurl4-openssl-dev \\\n  libpulse-dev libpulse-dev:i386 \\\n  libpython2.7 \\\n  libx11-dev libx11-dev:i386 \\\n  libxext-dev libxext-dev:i386 \\\n  linux-libc-dev:i386 \\\n  linux-headers-generic \\\n  ninja-build \\\n  python3 \\\n  python3-pip \\\n  python-is-python3 \\\n  u-boot-tools \\\n  unzip \\\n  wget \\\n  xxd \\\n  && rm -rf /var/lib/apt/lists/*\n\n# Configure out base setup for adding python packages\nENV PIP_DISABLE_PIP_VERSION_CHECK=true\n# This disables the cache with value 0. We do not want caching as it\n# increases the images size.\nENV PIP_NO_CACHE_DIR=0\n# We are using the minimal python installation from the system so include\n# setuptools and also wheel so we can use the binary releases of packages\n# instead of requiring them to be compiled.\nRUN pip3 install --no-cache-dir setuptools wheel\n\nRUN mkdir /tools\nWORKDIR /tools\n\n# Pull in the tools we just built for nuttx\nCOPY --from=nuttx-tools /tools/genromfs/ /tools/genromfs/\nENV PATH=\"/tools/genromfs/usr/bin:$PATH\"\nCOPY --from=nuttx-tools /tools/kconfig-frontends/ kconfig-frontends/\nENV PATH=\"/tools/kconfig-frontends/bin:$PATH\"\nCOPY --from=nuttx-tools /tools/bloaty/ bloaty/\nENV PATH=\"/tools/bloaty/bin:$PATH\"\n\n# Pull in the Rust toolchain including supported targets\nCOPY --from=nuttx-tools /tools/rust/ /tools/rust/\nENV CARGO_HOME=/tools/rust/cargo\nENV RUSTUP_HOME=/tools/rust/rustup\nENV PATH=\"/tools/rust/cargo/bin:$PATH\"\n\n# ARM toolchain\nCOPY --from=nuttx-toolchain-arm /tools/gcc-arm-none-eabi/ gcc-arm-none-eabi/\nENV PATH=\"/tools/gcc-arm-none-eabi/bin:$PATH\"\n\n# ARM64 toolchain\nCOPY --from=nuttx-toolchain-arm64 /tools/gcc-aarch64-none-elf/ gcc-aarch64-none-elf/\nENV PATH=\"/tools/gcc-aarch64-none-elf/bin:$PATH\"\n\n# MIPS toolchain\nCOPY --from=nuttx-toolchain-pinguino /tools/pinguino-compilers/p32/ pinguino-compilers/p32/\nENV PATH=\"/tools/pinguino-compilers/p32/bin:$PATH\"\n\n# RISCV toolchain\nCOPY --from=nuttx-toolchain-riscv /tools/riscv64-unknown-elf-gcc/ riscv64-unknown-elf-gcc/\nENV PATH=\"/tools/riscv64-unknown-elf-gcc/bin:$PATH\"\n\n# SPARC toolchain\nCOPY --from=nuttx-toolchain-sparc /tools/sparc-gaisler-elf-gcc/ sparc-gaisler-elf-gcc/\nENV PATH=\"/tools/sparc-gaisler-elf-gcc/bin:$PATH\"\n\n# ESP32 toolchain\nCOPY --from=nuttx-toolchain-esp32 /tools/xtensa-esp32-elf-gcc/ xtensa-esp32-elf-gcc/\nENV PATH=\"/tools/xtensa-esp32-elf-gcc/bin:$PATH\"\n\n# ESP32-S2 toolchain\nCOPY --from=nuttx-toolchain-esp32 /tools/xtensa-esp32s2-elf-gcc/ xtensa-esp32s2-elf-gcc/\nENV PATH=\"/tools/xtensa-esp32s2-elf-gcc/bin:$PATH\"\n\n# ESP32-S3 toolchain\nCOPY --from=nuttx-toolchain-esp32 /tools/xtensa-esp32s3-elf-gcc/ xtensa-esp32s3-elf-gcc/\nENV PATH=\"/tools/xtensa-esp32s3-elf-gcc/bin:$PATH\"\n\nRUN mkdir -p /tools/blobs/esp-bins\nCOPY --from=nuttx-toolchain-esp32 /tools/blobs/* /tools/blobs/esp-bins/\nRUN pip3 install --no-cache-dir esptool\n\n# Renesas toolchain\nCOPY --from=nuttx-toolchain-renesas /tools/renesas-toolchain/rx-elf-gcc/ renesas-toolchain/rx-elf-gcc/\nENV PATH=\"/tools/renesas-toolchain/rx-elf-gcc/bin:$PATH\"\n\n# MCUboot's tool for image signing and key management\nRUN pip3 install --no-cache-dir imgtool\n\n# Configure ccache\nRUN mkdir -p /tools/ccache/bin && \\\n  ln -sf `which ccache` /tools/ccache/bin/cc && \\\n  ln -sf `which ccache` /tools/ccache/bin/c++ && \\\n  ln -sf `which ccache` /tools/ccache/bin/clang && \\\n  ln -sf `which ccache` /tools/ccache/bin/clang++ && \\\n  ln -sf `which ccache` /tools/ccache/bin/gcc && \\\n  ln -sf `which ccache` /tools/ccache/bin/g++ && \\\n  ln -sf `which ccache` /tools/ccache/bin/arm-none-eabi-gcc && \\\n  ln -sf `which ccache` /tools/ccache/bin/arm-none-eabi-g++ && \\\n  ln -sf `which ccache` /tools/ccache/bin/aarch64-none-elf-gcc && \\\n  ln -sf `which ccache` /tools/ccache/bin/aarch64-none-elf-g++ && \\\n  ln -sf `which ccache` /tools/ccache/bin/p32-gcc && \\\n  ln -sf `which ccache` /tools/ccache/bin/riscv64-unknown-elf-gcc && \\\n  ln -sf `which ccache` /tools/ccache/bin/riscv64-unknown-elf-g++ && \\\n  ln -sf `which ccache` /tools/ccache/bin/sparc-gaisler-elf-gcc && \\\n  ln -sf `which ccache` /tools/ccache/bin/sparc-gaisler-elf-g++ && \\\n  ln -sf `which ccache` /tools/ccache/bin/xtensa-esp32-elf-gcc && \\\n  ln -sf `which ccache` /tools/ccache/bin/xtensa-esp32-elf-g++ && \\\n  ln -sf `which ccache` /tools/ccache/bin/xtensa-esp32s2-elf-gcc && \\\n  ln -sf `which ccache` /tools/ccache/bin/xtensa-esp32s2-elf-g++ && \\\n  ln -sf `which ccache` /tools/ccache/bin/xtensa-esp32s3-elf-gcc && \\\n  ln -sf `which ccache` /tools/ccache/bin/xtensa-esp32s3-elf-g++ && \\\n  ln -sf `which ccache` /tools/ccache/bin/avr-gcc && \\\n  ln -sf `which ccache` /tools/ccache/bin/avr-g++ && \\\n  ln -sf `which ccache` /tools/ccache/bin/rx-elf-gcc\nENV PATH=\"/tools/ccache/bin:$PATH\"\n\nCMD [ \"/bin/bash\" ]\n"
}