{
  "startTime": 1674220248975,
  "endTime": 1674220251456,
  "originalSmells": [
    {
      "rule": "curlUseHttpsUrl",
      "position": {
        "lineStart": 116,
        "lineEnd": 116,
        "columnStart": 4,
        "columnEnd": 117
      }
    },
    {
      "rule": "wgetUseHttpsUrl",
      "position": {
        "lineStart": 49,
        "lineEnd": 49,
        "columnStart": 4,
        "columnEnd": 76
      }
    },
    {
      "rule": "wgetUseHttpsUrl",
      "position": {
        "lineStart": 135,
        "lineEnd": 135,
        "columnStart": 4,
        "columnEnd": 80
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 38,
        "lineEnd": 38,
        "columnStart": 7,
        "columnEnd": 18
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 51,
        "lineEnd": 51,
        "columnStart": 30,
        "columnEnd": 41
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 139,
        "lineEnd": 139,
        "columnStart": 7,
        "columnEnd": 56
      }
    },
    {
      "rule": "yumInstallRmVarCacheYum",
      "position": {
        "lineStart": 102,
        "lineEnd": 102,
        "columnStart": 4,
        "columnEnd": 21
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 36,
        "lineEnd": 36,
        "columnStart": 7,
        "columnEnd": 43
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 42,
        "lineEnd": 42,
        "columnStart": 7,
        "columnEnd": 57
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 50,
        "lineEnd": 50,
        "columnStart": 7,
        "columnEnd": 47
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 137,
        "lineEnd": 137,
        "columnStart": 7,
        "columnEnd": 33
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# Licensed to the Apache Software Foundation (ASF) under one\n# or more contributor license agreements.  See the NOTICE file\n# distributed with this work for additional information\n# regarding copyright ownership.  The ASF licenses this file\n# to you under the Apache License, Version 2.0 (the\n# \"License\"); you may not use this file except in compliance\n# with the License.  You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n\n# The latest tag uses gcc 9, which is too high for nvcc.\n# The following tag uses gcc 8, which works with nvcc.\nFROM quay.io/pypa/manylinux2014_x86_64:2020-05-01-b37d76b\n\n# install dependencies\nRUN yum install -y \\\n    protobuf-devel \\\n    openblas-devel \\\n    # git \\\n    wget \\\n    openssh-server \\\n    pcre-devel \\\n    cmake \\\n    rpm-build rpmdevtools \\\n    && yum clean all \\\n    && rm -rf /var/cache/yum/*\n\n# install glog into /usr/local/include/glog /usr/local/lib\nRUN wget https://github.com/google/glog/archive/v0.3.5.tar.gz -P /tmp/\\\n    && tar zxf /tmp/v0.3.5.tar.gz  -C /tmp/ \\\n    && cd /tmp/glog-0.3.5 \\\n    && ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" && make && make install && cd .. && rm -rf glog-0.3.5 && rm /tmp/v0.3.5.tar.gz\n\n# install dnnl into /usr/local/include  /usr/local/lib\nRUN wget https://github.com/intel/mkl-dnn/releases/download/v1.1/dnnl_lnx_1.1.0_cpu_gomp.tgz -P /tmp/ \\\n    && tar zxf /tmp/dnnl_lnx_1.1.0_cpu_gomp.tgz  -C /tmp/ \\\n    && cp -r -H /tmp/dnnl_lnx_1.1.0_cpu_gomp/lib/lib* /usr/local/lib/ \\\n    && cp -r -H /tmp/dnnl_lnx_1.1.0_cpu_gomp/include/* /usr/local/include/ \\\n    && rm -rf /tmp/dnnl_lnx_1.1.0_cpu_gomp && rm /tmp/dnnl_lnx_1.1.0_cpu_gomp.tgz\n# ENV DNNL_ROOT /root/dnnl_lnx_1.1.0_cpu_gomp/\n\n# install swig into /usr/local/bin\nRUN wget https://prdownloads.sourceforge.net/swig/swig-3.0.12.tar.gz -P /tmp/ \\\n    && tar zxf /tmp/swig-3.0.12.tar.gz -C /tmp/ \\\n    && cd /tmp/swig-3.0.12 && ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" && make && make install && cd .. && rm -rf swig-3.0.12 && rm /tmp/swig-3.0.12.tar.gz\n\n# numpy and python versions should be matched;\n# twine works for all python versions\nRUN /opt/python/cp36-cp36m/bin/pip install numpy twine\nRUN /opt/python/cp37-cp37m/bin/pip install numpy\nRUN /opt/python/cp38-cp38/bin/pip install numpy\n\n# install cuda and cudnn\n# Refer to https://gitlab.com/nvidia/container-images/cuda/-/tree/master/dist for other cuda and cudnn versions\n# 10.2-base-centos7\nRUN NVIDIA_GPGKEY_SUM=d1be581509378368edeec8c1eb2958702feedf3bc3d17011adbf24efacce4ab5 && \\\n    curl -fsSL https://developer.download.nvidia.com/compute/cuda/repos/rhel7/x86_64/7fa2af80.pub | sed '/^Version/d' > /etc/pki/rpm-gpg/RPM-GPG-KEY-NVIDIA && \\\n    echo \"$NVIDIA_GPGKEY_SUM  /etc/pki/rpm-gpg/RPM-GPG-KEY-NVIDIA\" | sha256sum -c --strict  -\nCOPY cuda.repo /etc/yum.repos.d/cuda.repo\nENV CUDA_VERSION 10.2.89\nENV CUDA_PKG_VERSION 10-2-$CUDA_VERSION-1\n# For libraries in the cuda-compat-* package: https://docs.nvidia.com/cuda/eula/index.html#attachment-a\nRUN yum install -y \\\n    cuda-cudart-$CUDA_PKG_VERSION \\\n    cuda-compat-10-2 \\\n    && ln -s cuda-10.2 /usr/local/cuda && \\\n    rm -rf /var/cache/yum/*\n\n# nvidia-docker 1.0\nRUN echo \"/usr/local/nvidia/lib\" >> /etc/ld.so.conf.d/nvidia.conf && \\\n    echo \"/usr/local/nvidia/lib64\" >> /etc/ld.so.conf.d/nvidia.conf\nENV PATH /usr/local/nvidia/bin:/usr/local/cuda/bin:${PATH}\nENV LD_LIBRARY_PATH /usr/local/nvidia/lib:/usr/local/nvidia/lib64:$LD_LIBRARY_PATH\n\n# nvidia-container-runtime\nENV NVIDIA_VISIBLE_DEVICES all\nENV NVIDIA_DRIVER_CAPABILITIES compute,utility\nENV NVIDIA_REQUIRE_CUDA \"cuda>=10.2 brand=tesla,driver>=396,driver<397 brand=tesla,driver>=410,driver<411 brand=tesla,driver>=418,driver<419 brand=tesla,driver>=440,driver<441\"\n\n# 10.2-runtime-centos7\nRUN yum install -y \\\n    cuda-libraries-$CUDA_PKG_VERSION \\\n    cuda-nvtx-$CUDA_PKG_VERSION \\\n    libcublas10-10.2.2.89-1 \\\n    && rm -rf /var/cache/yum/*\n\n\n# 10.2-devel-centos7\nRUN yum install -y \\\n    cuda-nvml-dev-$CUDA_PKG_VERSION \\\n    cuda-command-line-tools-$CUDA_PKG_VERSION \\\n    cuda-cudart-dev-$CUDA_PKG_VERSION \\\n    cuda-libraries-dev-$CUDA_PKG_VERSION \\\n    cuda-minimal-build-$CUDA_PKG_VERSION \\\n    && rm -rf /var/cache/yum/*\nRUN yum install -y xz && NCCL_DOWNLOAD_SUM=a9ee790c3fc64b0ecbb00db92eddc1525552eda10a8656ff4b7380f66d81bda1 && \\\n    curl -fsSL https://developer.download.nvidia.com/compute/redist/nccl/v2.7/nccl_2.7.3-1+cuda10.2_x86_64.txz -O && \\\n    echo \"$NCCL_DOWNLOAD_SUM  nccl_2.7.3-1+cuda10.2_x86_64.txz\" | sha256sum -c - && \\\n    unxz nccl_2.7.3-1+cuda10.2_x86_64.txz && \\\n    tar --no-same-owner --keep-old-files --no-overwrite-dir -xvf  nccl_2.7.3-1+cuda10.2_x86_64.tar -C /usr/local/cuda/include/ --strip-components=2 --wildcards '*/include/*' && \\\n    tar --no-same-owner --keep-old-files --no-overwrite-dir -xvf  nccl_2.7.3-1+cuda10.2_x86_64.tar -C /usr/local/cuda/lib64/ --strip-components=2 --wildcards '*/lib/libnccl.so' && \\\n    rm -f nccl_2.7.3-1+cuda10.2_x86_64.tar && \\\n    ldconfig && rm -rf /var/cache/yum\nENV LIBRARY_PATH /usr/local/cuda/lib64/stubs\n\n# 10.2-cudnn7-devel-centos7\nENV CUDNN_VERSION 7.6.5.32\n# cuDNN license: https://developer.nvidia.com/cudnn/license_agreement\nRUN CUDNN_DOWNLOAD_SUM=600267f2caaed2fd58eb214ba669d8ea35f396a7d19b94822e6b36f9f7088c20 && \\\n    curl -fsSL https://developer.download.nvidia.com/compute/redist/cudnn/v7.6.5/cudnn-10.2-linux-x64-v7.6.5.32.tgz -O && \\\n    echo \"$CUDNN_DOWNLOAD_SUM  cudnn-10.2-linux-x64-v7.6.5.32.tgz\" | sha256sum -c - && \\\n    tar --no-same-owner -xzf cudnn-10.2-linux-x64-v7.6.5.32.tgz -C /usr/local && \\\n    rm cudnn-10.2-linux-x64-v7.6.5.32.tgz && \\\n    ldconfig\n\n# install nccl for distributed training\nRUN git clone https://github.com/NVIDIA/nccl.git $HOME/nccl \\\n    && cd $HOME/nccl \\\n    && git checkout v2.4.8-1 \\\n    && make BUILDDIR=/usr/local/ -j$(nproc) src.build \\\n    && rm -rf /usr/local/obj \\\n    && rm -rf $HOME/nccl\n\n# install cnmem to /usr/local/include  /usr/local/lib\nRUN git clone https://github.com/NVIDIA/cnmem.git cnmem \\\n    && cd cnmem && mkdir build && cd build && cmake .. && make && make install && cd ../.. && rm -rf cnmem\n\n# install mpich /usr/local/include   /usr/local/lib\nRUN wget https://www.mpich.org/static/downloads/3.3.2/mpich-3.3.2.tar.gz -P $HOME \\\n    && cd $HOME \\\n    && tar xfz mpich-3.3.2.tar.gz \\\n    && cd mpich-3.3.2 \\\n    && ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --prefix=/usr/local --disable-fortran \\\n    && make && make install && cd .. && rm -rf mpich-3.3.2 && rm mpich-3.3.2.tar.gz\n"
}