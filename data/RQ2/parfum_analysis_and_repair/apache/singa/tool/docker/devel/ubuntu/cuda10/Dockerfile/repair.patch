diff --git a/Users/tdurieux/git/dinghy-experiment/data/evaluation/dockerfiles/apache/singa/tool/docker/devel/ubuntu/cuda10/Dockerfile b/Users/tdurieux/git/dinghy-experiment/data/evaluation/dockerfile_repair_results/apache/singa/tool/docker/devel/ubuntu/cuda10/Dockerfile/repaired.Dockerfile
index 5560f8a..923b13c 100644
--- a/Users/tdurieux/git/dinghy-experiment/data/evaluation/dockerfiles/apache/singa/tool/docker/devel/ubuntu/cuda10/Dockerfile
+++ b/Users/tdurieux/git/dinghy-experiment/data/evaluation/dockerfile_repair_results/apache/singa/tool/docker/devel/ubuntu/cuda10/Dockerfile/repaired.Dockerfile
@@ -14,7 +14,7 @@
 # See the License for the specific language governing permissions and
 # limitations under the License.
 #
-# 
+#
 # Change tags to build with different cuda/cudnn versions:
 FROM nvidia/cuda:10.0-devel-ubuntu18.04
 
@@ -48,7 +48,7 @@ RUN apt-get update \
     && apt-get autoremove \
     && apt-get autoclean \
     && rm -rf /var/lib/apt/lists/* \
-    && pip3 install -U --no-cache \
+    && pip3 install --no-cache-dir -U --no-cache \
     tqdm \
     wheel \
     numpy \
@@ -61,11 +61,11 @@ RUN apt-get update \
 # install cmake to correctly find Cuda 10
 RUN wget https://github.com/Kitware/CMake/releases/download/v3.12.2/cmake-3.12.2.tar.gz -P /tmp/ \
     && tar zxf /tmp/cmake-3.12.2.tar.gz -C /tmp/ \
-    && cd /tmp/cmake-3.12.2/ && ./bootstrap && make -j4 && make install
+    && cd /tmp/cmake-3.12.2/ && ./bootstrap && make -j4 && make install && rm /tmp/cmake-3.12.2.tar.gz
 
 # install dnnl
 RUN wget https://github.com/intel/mkl-dnn/releases/download/v1.1/dnnl_lnx_1.1.0_cpu_gomp.tgz -P /tmp/ \
-    && tar zxf /tmp/dnnl_lnx_1.1.0_cpu_gomp.tgz -C /root
+    && tar zxf /tmp/dnnl_lnx_1.1.0_cpu_gomp.tgz -C /root && rm /tmp/dnnl_lnx_1.1.0_cpu_gomp.tgz
 ENV DNNL_ROOT /root/dnnl_lnx_1.1.0_cpu_gomp/
 
 # config ssh service
@@ -81,19 +81,19 @@ RUN git clone https://github.com/NVIDIA/nccl.git $HOME/nccl \
     && git checkout v2.4.8-1 \
     && make -j src.build \
     && apt-get update \
-    && apt install build-essential devscripts debhelper fakeroot -y \
+    && apt install --no-install-recommends build-essential devscripts debhelper fakeroot -y \
     && make pkg.debian.build \
     && dpkg -i build/pkg/deb/libnccl2_2.4.8-1+cuda10.0_amd64.deb \
-    && dpkg -i build/pkg/deb/libnccl-dev_2.4.8-1+cuda10.0_amd64.deb
+    && dpkg -i build/pkg/deb/libnccl-dev_2.4.8-1+cuda10.0_amd64.deb && rm -rf /var/lib/apt/lists/*;
 
 # build mpiexec
-RUN wget http://www.mpich.org/static/downloads/3.3.2/mpich-3.3.2.tar.gz -P $HOME \
+RUN wget https://www.mpich.org/static/downloads/3.3.2/mpich-3.3.2.tar.gz -P $HOME \
     && cd $HOME \
     && tar xfz mpich-3.3.2.tar.gz \
     && cd mpich-3.3.2 \
-    && ./configure --prefix=$HOME/mpich-3.3.2/build --disable-fortran 2>&1 | tee c.txt \
+    && ./configure --build="$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)" --prefix=$HOME/mpich-3.3.2/build --disable-fortran 2>&1 | tee c.txt \
     && make 2>&1 | tee m.txt \
-    && make install 2>&1 | tee mi.txt
+    && make install 2>&1 | tee mi.txt && rm mpich-3.3.2.tar.gz
 ENV PATH=/root/mpich-3.3.2/build/bin:$PATH
 
 # build singa