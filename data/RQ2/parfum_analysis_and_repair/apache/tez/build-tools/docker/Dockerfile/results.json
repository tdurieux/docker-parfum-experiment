{
  "startTime": 1674247924680,
  "endTime": 1674247926107,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 102,
        "lineEnd": 104,
        "columnStart": 7,
        "columnEnd": 29
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 117,
        "lineEnd": 118,
        "columnStart": 4,
        "columnEnd": 105
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 130,
        "lineEnd": 132,
        "columnStart": 4,
        "columnEnd": 24
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 142,
        "lineEnd": 144,
        "columnStart": 4,
        "columnEnd": 19
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 230,
        "lineEnd": 230,
        "columnStart": 7,
        "columnEnd": 72
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 247,
        "lineEnd": 247,
        "columnStart": 4,
        "columnEnd": 51
      }
    },
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 251,
        "lineEnd": 253,
        "columnStart": 7,
        "columnEnd": 31
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 233,
        "lineEnd": 237,
        "columnStart": 7,
        "columnEnd": 24
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 107,
        "lineEnd": 107,
        "columnStart": 5,
        "columnEnd": 39
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 105,
        "lineEnd": 105,
        "columnStart": 7,
        "columnEnd": 77
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 248,
        "lineEnd": 248,
        "columnStart": 7,
        "columnEnd": 59
      }
    }
  ],
  "repairedSmells": [
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 248,
        "lineEnd": 248,
        "columnStart": 7,
        "columnEnd": 59
      }
    }
  ],
  "repairedDockerfile": "#\n# Licensed to the Apache Software Foundation (ASF) under one\n# or more contributor license agreements.  See the NOTICE file\n# distributed with this work for additional information\n# regarding copyright ownership.  The ASF licenses this file\n# to you under the Apache License, Version 2.0 (the\n# \"License\"); you may not use this file except in compliance\n# with the License.  You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n###############\n#\n# Apache Yetus Dockerfile for Apache Tez\n# NOTE: This file is compatible with Docker BuildKit. It will work\n#       with standard docker build, but it is a lot faster\n#       if BuildKit is enabled.\n#\n###############\n\nFROM ubuntu:focal AS tezbase\n\nWORKDIR /root\nSHELL [\"/bin/bash\", \"-o\", \"pipefail\", \"-c\"]\n\nENV DEBIAN_FRONTEND noninteractive\nENV DEBCONF_TERSE true\n\n######\n# Install some basic Apache Yetus requirements\n# some git repos need ssh-client so do it too\n# Adding libffi-dev for all the programming languages\n# that take advantage of it.\n######\n# hadolint ignore=DL3008\nRUN apt-get -q update && apt-get -q install --no-install-recommends -y \\\n    apt-transport-https \\\n    apt-utils \\\n    ca-certificates \\\n    curl \\\n    dirmngr \\\n    git \\\n    gpg \\\n    gpg-agent \\\n    libffi-dev \\\n    locales \\\n    make \\\n    pkg-config \\\n    rsync \\\n    software-properties-common \\\n    ssh-client \\\n    xz-utils \\\n    && apt-get clean \\\n    && rm -rf /var/lib/apt/lists/*\n\n###\n# Set the locale\n###\nRUN locale-gen en_US.UTF-8\nENV LANG en_US.UTF-8\nENV LANGUAGE en_US:en\nENV LC_ALL en_US.UTF-8\n\n####\n# Install GNU C/C++ (everything generally needs this)\n####\n# hadolint ignore=DL3008\nRUN apt-get -q update && apt-get -q install --no-install-recommends -y \\\n        g++ \\\n        gcc \\\n        libc-dev \\\n    && apt-get clean \\\n    && rm -rf /var/lib/apt/lists/*\n\n###\n# Install golang as part of base so we can do each\n# helper utility in parallel. go bins are typically\n# statically linked, so this is perfectly safe.\n###\n# hadolint ignore=DL3008\nRUN add-apt-repository -y ppa:longsleep/golang-backports \\\n    && apt-get -q update \\\n    && apt-get -q install --no-install-recommends -y golang-go \\\n    && apt-get clean \\\n    && rm -rf /var/lib/apt/lists/*\n\n############\n# Fetch all of the non-conflicting bits in parallel\n#############\n\n######\n# Install Google Protobuf 2.5.0\n######\nFROM tezbase AS protobuf250\nSHELL [\"/bin/bash\", \"-o\", \"pipefail\", \"-c\"]\nRUN mkdir -p /opt/protobuf-src \\\n    && curl -f -L -s -S \\\n      https://github.com/google/protobuf/releases/download/v2.5.0/protobuf-2.5.0.tar.gz \\\n      -o /opt/protobuf.tar.gz \\\n    && tar xzf /opt/protobuf.tar.gz --strip-components 1 -C /opt/protobuf-src && rm /opt/protobuf.tar.gz\nWORKDIR /opt/protobuf-src\nRUN ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --prefix=/opt/protobuf \\\n    && make install\nWORKDIR /root\nRUN rm -rf /opt/protobuf-src\n\n####\n# Install shellcheck (shell script lint)\n####\nFROM tezbase AS shellcheck\nSHELL [\"/bin/bash\", \"-o\", \"pipefail\", \"-c\"]\nRUN curl -f -sSL \\\n    https://github.com/koalaman/shellcheck/releases/download/v0.7.1/shellcheck-v0.7.1.linux.x86_64.tar.xz \\\n        | tar --strip-components 1 --wildcards -xJf - '*/shellcheck' \\\n    && chmod a+rx shellcheck \\\n    && mv shellcheck /bin/shellcheck \\\n    && shasum -a 512 /bin/shellcheck \\\n    | awk '$1!=\"aae813283d49f18f95a205dca1c5184267d07534a08abc952ebea1958fee06f8a0207373b6770a083079ba875458ea9da443f2b9910a50dcd93b935048bc14f5\" {exit(1)}'\n\n####\n# Install hadolint (dockerfile lint)\n####\nFROM tezbase AS hadolint\nSHELL [\"/bin/bash\", \"-o\", \"pipefail\", \"-c\"]\nRUN curl -f -sSL \\\n        https://github.com/hadolint/hadolint/releases/download/v1.18.0/hadolint-Linux-x86_64 \\\n        -o /bin/hadolint \\\n    && chmod a+rx /bin/hadolint \\\n    && shasum -a 512 /bin/hadolint \\\n    | awk '$1!=\"df27253d374c143a606483b07a26234ac7b4bca40b4eba53e79609c81aa70146e7d5c145f90dcec71d6d1aad1048b7d9d2de68d92284f48a735d04d19c5c5559\" {exit(1)}'\n\n####\n# Install buf (protobuf lint)\n####\nFROM tezbase AS buf\nSHELL [\"/bin/bash\", \"-o\", \"pipefail\", \"-c\"]\nRUN curl -f -sSL \\\n      https://github.com/bufbuild/buf/releases/download/v0.21.0/buf-Linux-x86_64.tar.gz \\\n      -o buf.tar.gz \\\n    && shasum -a 256 buf.tar.gz \\\n    | awk '$1!=\"95aba62ac0ecc5a9120cc58c65cdcc85038633a816bddfe8398c5ae3b32803f1\" {exit(1)}' \\\n    && tar -xzf buf.tar.gz -C /usr/local --strip-components 1 \\\n    && rm buf.tar.gz\n\n########\n#\n#\n# Content that needs to be installed in order due to packages...\n#\n#\n########\n\nFROM tezbase\nSHELL [\"/bin/bash\", \"-o\", \"pipefail\", \"-c\"]\n\n####\n# Install java (first, since we want to dicate what form of Java)\n####\n\n####\n# OpenJDK 8\n####\n# hadolint ignore=DL3008\nRUN apt-get -q update && apt-get -q install --no-install-recommends -y openjdk-8-jdk-headless \\\n    && apt-get clean \\\n    && rm -rf /var/lib/apt/lists/*\n\n####\n# OpenJDK 11 (but keeps default to JDK8)\n# NOTE: This default only works when Apache Yetus is launched\n# _in_ the container and not outside of it!\n####\n# hadolint ignore=DL3008\nRUN apt-get -q update && apt-get -q install --no-install-recommends -y default-jre-headless openjdk-11-jdk-headless \\\n    && apt-get clean \\\n    && rm -rf /var/lib/apt/lists/* \\\n    && update-java-alternatives -s java-1.8.0-openjdk-amd64 \\\n    && rm -f /usr/lib/jvm/default-java \\\n    && ln -s java-8-openjdk-amd64 /usr/lib/jvm/default-java\nENV JAVA_HOME /usr/lib/jvm/java-8-openjdk-amd64\n\n######\n# Install findbugs\n######\n# hadolint ignore=DL3008\nRUN apt-get -q update && apt-get -q install --no-install-recommends -y findbugs \\\n    && apt-get clean \\\n    && rm -rf /var/lib/apt/lists/*\nENV FINDBUGS_HOME /usr\n\n######\n# Install maven\n######\n# hadolint ignore=DL3008\nRUN apt-get -q update && apt-get -q install --no-install-recommends -y maven \\\n    && apt-get clean \\\n    && rm -rf /var/lib/apt/lists/*\n\n######\n# Install python3 and pylint3\n# astroid and pylint go hand-in-hand.  Upgrade both at the same time.\n######\n# hadolint ignore=DL3008,DL3013\nRUN apt-get -q update && apt-get -q install --no-install-recommends -y \\\n        python3 \\\n        python3-bcrypt \\\n        python3-cffi \\\n        python3-cryptography \\\n        python3-dateutil \\\n        python3-dev \\\n        python3-dev \\\n        python3-isort \\\n        python3-dockerpty \\\n        python3-nacl \\\n        python3-pyrsistent \\\n        python3-setuptools \\\n        python3-setuptools \\\n        python3-singledispatch \\\n        python3-six \\\n        python3-wheel \\\n        python3-wrapt \\\n        python3-yaml \\\n    && apt-get clean \\\n    && rm -rf /var/lib/apt/lists/* \\\n    && curl -f -sSL https://bootstrap.pypa.io/get-pip.py -o /tmp/get-pip.py \\\n    && python3 /tmp/get-pip.py \\\n    && rm /usr/local/bin/pip /tmp/get-pip.py \\\n    && pip3 install --no-cache-dir -v \\\n        astroid==2.4.2 \\\n        codespell==2.0 \\\n        pylint==2.5.3 \\\n        yamllint==1.24.2 \\\n    && rm -rf /root/.cache \\\n    && mv /usr/local/bin/pylint /usr/local/bin/pylint3\nRUN ln -s /usr/local/bin/pylint3 /usr/local/bin/pylint\nRUN ln -s /usr/local/bin/pip3 /usr/local/bin/pip\n\n###\n# Install npm and JSHint\n###\n# hadolint ignore=DL3008\nRUN curl -f -sSL https://deb.nodesource.com/setup_14.x | bash - \\\n    && apt-get -q install --no-install-recommends -y nodejs \\\n    && apt-get clean \\\n    && rm -rf /var/lib/apt/lists/* \\\n    && npm install -g \\\n        jshint@2.12.0 \\\n        markdownlint-cli@0.23.2 \\\n    && rm -rf /root/.npm && npm cache clean --force;\n\n#####\n# Now all the stuff that was built in parallel\n#####\n\nCOPY --from=shellcheck /bin/shellcheck /bin/shellcheck\nCOPY --from=hadolint /bin/hadolint /bin/hadolint\nCOPY --from=buf /usr/local/bin/buf /usr/local/bin/buf\nCOPY --from=protobuf250 /opt/protobuf /opt/protobuf\n\nENV PROTOBUF_HOME /opt/protobuf\nENV PROTOC_PATH /opt/protobuf/bin/protoc\nENV PATH \"${PATH}:/opt/protobuf/bin\"\n\n####\n# YETUS CUT HERE\n# Magic text above! Everything from here on is ignored\n# by Yetus, so could include anything not needed\n# by your testing environment\n###\n"
}