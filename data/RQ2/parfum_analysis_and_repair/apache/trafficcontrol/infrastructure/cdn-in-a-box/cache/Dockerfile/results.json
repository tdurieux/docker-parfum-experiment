{
  "startTime": 1674248375121,
  "endTime": 1674248376076,
  "originalSmells": [
    {
      "rule": "yumInstallRmVarCacheYum",
      "position": {
        "lineStart": 35,
        "lineEnd": 35,
        "columnStart": 8,
        "columnEnd": 26
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# Licensed to the Apache Software Foundation (ASF) under one\n# or more contributor license agreements.  See the NOTICE file\n# distributed with this work for additional information\n# regarding copyright ownership.  The ASF licenses this file\n# to you under the Apache License, Version 2.0 (the\n# \"License\"); you may not use this file except in compliance\n# with the License.  You may obtain a copy of the License at\n#\n#   http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing,\n# software distributed under the License is distributed on an\n# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n# KIND, either express or implied.  See the License for the\n# specific language governing permissions and limitations\n# under the License.\n\n############################################################\n# Dockerfile to build Edge-Tier Cache container images for\n# Apache Traffic Control\n# Based on Rocky Linux 8\n############################################################\n\n    # Change BASE_IMAGE to centos when RHEL_VERSION=7\nARG BASE_IMAGE=rockylinux \\\n    RHEL_VERSION=8\nFROM ${BASE_IMAGE}:${RHEL_VERSION} AS common-traffic-server-dependencies\nARG RHEL_VERSION=8\n# Makes RHEL_VERSION available at runtime\nENV RHEL_VERSION=\"$RHEL_VERSION\"\n\n# The /traffic_ops_data volume is included to set the ATS RPM version in the MID profile.\nVOLUME /traffic_ops_data\n\nRUN if [[ \"${RHEL_VERSION%%.*}\" -eq 7 ]]; then \\\n        yum -y install dnf || exit 1; rm -rf /var/cache/yum \\\n    fi\n\nEXPOSE 80\n\nRUN dnf -y install epel-release && \\\n    if [[ \"${RHEL_VERSION%%.*}\" -lt 8 ]]; then \\\n        additional_packages='perl(URI)' || \\\n        exit 1; \\\n    else \\\n        additional_packages='' || \\\n        exit 1; \\\n    fi && \\\n    dnf -y install              \\\n        brotli                  \\\n        # find is required by to-access.sh\n        findutils               \\\n        GeoIP                   \\\n        git                     \\\n        groff-base              \\\n        hwloc                   \\\n        # jansson is required by the ATS TSB RPM\n        jansson                 \\\n        kyotocabinet-libs       \\\n        libmaxminddb            \\\n        libtool-ltdl            \\\n        libunwind               \\\n        # luajit is required by the ATS TSB RPM\n        luajit                  \\\n        lzo                     \\\n        make                    \\\n        numactl-libs            \\\n        openssl                 \\\n        perl                    \\\n        tcl                     \\\n        $additional_packages\n\nRUN dnf install -y bind-utils kyotocabinet-libs initscripts iproute net-tools nmap-ncat gettext autoconf automake libtool gcc-c++ cronie glibc-devel openssl-devel && \\\n    dnf install -y jq logrotate && \\\n    dnf clean all\n\nFROM common-traffic-server-dependencies AS common-cache-config-layers\n\nCOPY infrastructure/cdn-in-a-box/cache/trafficserver.rpm /trafficserver.rpm\nCOPY traffic_server/plugins/astats_over_http/astats_over_http.c traffic_server/plugins/astats_over_http/Makefile.am /\n\nRUN set -o errexit -o nounset -o xtrace; \\\n    rpm -Uvh /trafficserver.rpm; \\\n    if [[ -e /trafficserver-devel.rpm ]]; then \\\n        rpm -Uvh /trafficserver-devel.rpm; \\\n    fi; \\\n    PATH+=:/opt/trafficserver/bin; \\\n    tsxs -v -c astats_over_http.c -o astats_over_http.so && \\\n    tsxs -v -o astats_over_http.so -i && \\\n    dnf remove -y gcc-c++ glibc-devel autoconf automake libtool && \\\n    rm -f /astats_over_http.c /Makefile.am\n\nRUN set -o errexit -o nounset -o pipefail -o xtrace && \\\n    # The ssl directory needs to exist or the first sslkey file will be skipped on badass\n    etc_trafficserver=\"$(rpm -qpl trafficserver.rpm | grep '/etc/trafficserver$')\"; \\\n    if [[ ! -e \"${etc_trafficserver}/ssl\" ]]; then \\\n        echo 'Creating ssl directory...'; \\\n        mkdir \"${etc_trafficserver}/ssl\"; \\\n    fi; \\\n    # trafficserver needs different ownership than the trafficserver RPM sets\n    chown -R ats:ats \"$etc_trafficserver\"\n\nWORKDIR /opt\n\nCOPY infrastructure/cdn-in-a-box/cache/traffic_ops_ort.crontab /etc/cron.d/traffic_ops_ort-cron-template\nCOPY infrastructure/cdn-in-a-box/cache/traffic_ops_ort.logrotate /etc/logrotate.d/ort\n\nCOPY infrastructure/cdn-in-a-box/cache/run.sh infrastructure/cdn-in-a-box/traffic_ops/to-access.sh infrastructure/cdn-in-a-box/enroller/server_template.json /\n\nCOPY infrastructure/cdn-in-a-box/dns/set-dns.sh \\\n     infrastructure/cdn-in-a-box/dns/insert-self-into-dns.sh \\\n     /usr/local/sbin/\n# Copy systemctl.sh to /usr/bin specifically because t3c runs /bin/systemctl by absolute path\nCOPY infrastructure/cdn-in-a-box/cache/systemctl.sh /usr/bin/systemctl\n\nARG ORT_RPM=infrastructure/cdn-in-a-box/cache/trafficcontrol-cache-config.rpm\nCOPY $ORT_RPM /\nRUN rpm -Uvh /$(basename $ORT_RPM) &&\\\n    rm /$(basename $ORT_RPM)\nCMD /run.sh\n\nFROM common-traffic-server-dependencies AS get-delve\nRUN dnf -y install golang && \\\n    go install github.com/go-delve/delve/cmd/dlv@latest\n\nFROM common-cache-config-layers AS mid\nENV CACHE_TYPE=mid\nCOPY infrastructure/cdn-in-a-box/mid/init.d/ /opt/init.d/\n\nFROM mid AS mid-debug\nCOPY --from=get-delve /root/go/bin /usr/bin\nCOPY infrastructure/cdn-in-a-box/cache/init-debug-scripts.sh /opt/init.d/\n\nFROM common-cache-config-layers AS edge\nENV CACHE_TYPE=edge\nCOPY infrastructure/cdn-in-a-box/edge/init.d/ /opt/init.d/\n\nFROM edge AS edge-debug\nCOPY --from=get-delve /root/go/bin /usr/bin\nCOPY infrastructure/cdn-in-a-box/cache/init-debug-scripts.sh /opt/init.d/\n\n# Makes the default target skip the edge-debug stage\nFROM edge\n"
}