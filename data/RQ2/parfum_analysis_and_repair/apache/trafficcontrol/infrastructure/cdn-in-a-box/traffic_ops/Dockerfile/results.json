{
  "startTime": 1674255713848,
  "endTime": 1674255715102,
  "originalSmells": [
    {
      "rule": "yumInstallRmVarCacheYum",
      "position": {
        "lineStart": 33,
        "lineEnd": 33,
        "columnStart": 2,
        "columnEnd": 20
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# Licensed to the Apache Software Foundation (ASF) under one\n# or more contributor license agreements.  See the NOTICE file\n# distributed with this work for additional information\n# regarding copyright ownership.  The ASF licenses this file\n# to you under the Apache License, Version 2.0 (the\n# \"License\"); you may not use this file except in compliance\n# with the License.  You may obtain a copy of the License at\n#\n#   http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing,\n# software distributed under the License is distributed on an\n# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n# KIND, either express or implied.  See the License for the\n# specific language governing permissions and limitations\n# under the License.\n\n############################################################\n# Dockerfile to build Traffic Ops container images\n# Based on Rocky Linux 8\n############################################################\n\n    # Change BASE_IMAGE to centos when RHEL_VERSION=7\nARG BASE_IMAGE=rockylinux \\\n    RHEL_VERSION=8\nFROM ${BASE_IMAGE}:${RHEL_VERSION} as trafficops-dependencies\nARG RHEL_VERSION=8\n# Makes RHEL_VERSION available in later layers without needing to specify it again\nENV RHEL_VERSION=\"$RHEL_VERSION\"\n\nVOLUME /traffic_ops_data\n\nRUN if [[ \"${RHEL_VERSION%%.*}\" -eq 7 ]]; then \\\n\t\tyum -y install dnf || exit 1; rm -rf /var/cache/yum \\\n\tfi\n\nRUN set -o nounset -o errexit && \\\n\tmkdir -p /etc/cron.d; \\\n\tif [[ \"${RHEL_VERSION%%.*}\" -eq 7 ]]; then \\\n\t\tuse_repo=''; \\\n\t\tenable_repo=''; \\\n\telse \\\n\t\tuse_repo='--repo=pgdg13'; \\\n\t\tenable_repo='--enablerepo=powertools'; \\\n\tfi; \\\n\tdnf -y install \"https://download.postgresql.org/pub/repos/yum/reporpms/EL-${RHEL_VERSION%%.*}-x86_64/pgdg-redhat-repo-latest.noarch.rpm\"; \\\n\tdnf -y install epel-release libicu; \\\n\tdnf -y $use_repo -- install postgresql13; \\\n\tdnf -y $enable_repo install \\\n\t\tbind-utils           \\\n\t\t# find is required by to-access.sh\n\t\tfindutils            \\\n\t\tgettext              \\\n\t\t# ip commands is used in set-to-ips-from-dns.sh\n\t\tiproute              \\\n\t\tisomd5sum            \\\n\t\tjq                   \\\n\t\tnet-tools            \\\n\t\tnmap-ncat            \\\n\t\topenssl              \\\n\t\t# rsync is used to copy certs in \"Shared SSL certificate generation\" step\n\t\trsync                \\\n\n\t\t# Traffic Ops dependencies (Not all needed for CDN in a Box, but all\n\t\t# required by the Traffic Ops RPM)\n\t\tcpanminus            \\\n\t\texpat-devel          \\\n\t\tlibcap               \\\n\t\tlibcurl-devel        \\\n\t\tlibidn-devel         \\\n\t\tlibpcap-devel        \\\n\t\tmkisofs              \\\n\t\topenssl-devel        \\\n\t\tperl-core            \\\n\t\tperl-Crypt-ScryptKDF \\\n\t\tperl-DBD-Pg          \\\n\t\tperl-DBI             \\\n\t\tperl-Digest-SHA1     \\\n\t\tperl-JSON            \\\n\t\tperl-libwww-perl     \\\n\t\tperl-TermReadKey     \\\n\t\tperl-Test-CPAN-Meta  \\\n\t\tperl-WWW-Curl;       \\\n\tdnf clean all\n\nFROM trafficops-dependencies AS trafficops\n\nEXPOSE 443\n\nWORKDIR /opt/traffic_ops/app\n\nADD infrastructure/cdn-in-a-box/traffic_ops_data /traffic_ops_data\n\n# Override TRAFFIC_OPS_RPM arg to use a different one using --build-arg TRAFFIC_OPS_RPM=...  Can be local file or http://...\n#\nARG TRAFFIC_OPS_RPM=infrastructure/cdn-in-a-box/traffic_ops/traffic_ops.rpm\n\nCOPY $TRAFFIC_OPS_RPM /traffic_ops.rpm\nRUN rpm -Uvh /traffic_ops.rpm && \\\n\trm /traffic_ops.rpm\n\nCOPY infrastructure/cdn-in-a-box/enroller/server_template.json \\\n\tinfrastructure/cdn-in-a-box/traffic_ops/config.sh \\\n\tinfrastructure/cdn-in-a-box/traffic_ops/run-go.sh \\\n\tinfrastructure/cdn-in-a-box/traffic_ops/to-access.sh \\\n\tinfrastructure/cdn-in-a-box/dns/insert-self-into-dns.sh \\\n\tinfrastructure/cdn-in-a-box/dns/set-dns.sh \\\n\tinfrastructure/cdn-in-a-box/traffic_ops/set-to-ips-from-dns.sh \\\n\tinfrastructure/cdn-in-a-box/traffic_ops/generate-certs.sh \\\n\tinfrastructure/cdn-in-a-box/traffic_ops/trafficops-init.sh \\\n\tinfrastructure/cdn-in-a-box/variables.env \\\n\t/\n\nEXPOSE 443\nCMD /run-go.sh\nHEALTHCHECK --interval=10s --timeout=1s \\\n\tCMD bash -c 'source /to-access.sh && [[ \"$(curl -sk \"https://${TO_FQDN}/api/${TO_API_VERSION}/ping\" | jq .ping)\" == \\\"pong\\\" ]]'\n\nFROM trafficops-dependencies as get-delve\n\nRUN dnf -y install golang && \\\n    go install github.com/go-delve/delve/cmd/dlv@latest\n\nFROM trafficops AS trafficops-debug\nCOPY --from=get-delve /root/go/bin /usr/bin\nCOPY infrastructure/cdn-in-a-box/traffic_ops/tv.conf conf/production/\n\n# Makes the default target skip the trafficops-debug stage\nFROM trafficops\n"
}