{
  "startTime": 1674254349207,
  "endTime": 1674254351158,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 121,
        "lineEnd": 121,
        "columnStart": 4,
        "columnEnd": 144
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 122,
        "lineEnd": 122,
        "columnStart": 7,
        "columnEnd": 157
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 137,
        "lineEnd": 138,
        "columnStart": 4,
        "columnEnd": 140
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 149,
        "lineEnd": 151,
        "columnStart": 45,
        "columnEnd": 24
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 161,
        "lineEnd": 163,
        "columnStart": 4,
        "columnEnd": 19
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 268,
        "lineEnd": 268,
        "columnStart": 4,
        "columnEnd": 58
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 284,
        "lineEnd": 286,
        "columnStart": 4,
        "columnEnd": 84
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 291,
        "lineEnd": 293,
        "columnStart": 7,
        "columnEnd": 47
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 295,
        "lineEnd": 297,
        "columnStart": 7,
        "columnEnd": 89
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 343,
        "lineEnd": 343,
        "columnStart": 7,
        "columnEnd": 72
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 389,
        "lineEnd": 389,
        "columnStart": 4,
        "columnEnd": 51
      }
    },
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 393,
        "lineEnd": 396,
        "columnStart": 7,
        "columnEnd": 50
      }
    },
    {
      "rule": "gpgUseBatchFlag",
      "position": {
        "lineStart": 294,
        "lineEnd": 294,
        "columnStart": 7,
        "columnEnd": 24
      }
    },
    {
      "rule": "gpgUseBatchFlag",
      "position": {
        "lineStart": 298,
        "lineEnd": 298,
        "columnStart": 7,
        "columnEnd": 41
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 390,
        "lineEnd": 390,
        "columnStart": 7,
        "columnEnd": 59
      }
    }
  ],
  "repairedSmells": [
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 390,
        "lineEnd": 390,
        "columnStart": 7,
        "columnEnd": 59
      }
    }
  ],
  "repairedDockerfile": "# Licensed to the Apache Software Foundation (ASF) under one\n# or more contributor license agreements.  See the NOTICE file\n# distributed with this work for additional information\n# regarding copyright ownership.  The ASF licenses this file\n# to you under the Apache License, Version 2.0 (the\n# \"License\"); you may not use this file except in compliance\n# with the License.  You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n###############\n#\n# Example Apache Yetus Dockerfile that includes all functionality supported\n# as well as enough bits to build and release Apache Yetus itself.\n#\n###############\n\nFROM ubuntu:focal AS yetusbase\n\n## NOTE to committers: if this gets moved from Xenial to something else, be\n## sure to also fix the gpg link in asf-site-src as appropriate\n\nWORKDIR /root\nSHELL [\"/bin/bash\", \"-o\", \"pipefail\", \"-c\"]\n\nENV DEBIAN_FRONTEND noninteractive\nENV DEBCONF_TERSE true\n\n######\n# Install some basic Apache Yetus requirements\n# some git repos need ssh-client so do it too\n# Adding libffi-dev for all the programming languages\n# that take advantage of it. Also throw in\n# xmllint here since so much links against libxml anyway.\n######\n# hadolint ignore=DL3008\nRUN apt-get -q update && apt-get -q install --no-install-recommends -y \\\n        apt-transport-https \\\n        apt-utils \\\n        ca-certificates \\\n        curl \\\n        dirmngr \\\n        git \\\n        gpg \\\n        gpg-agent \\\n        libffi-dev \\\n        libxml2-utils \\\n        locales \\\n        pkg-config \\\n        rsync \\\n        software-properties-common \\\n        ssh-client \\\n        xz-utils \\\n    && apt-get clean \\\n    && rm -rf /var/lib/apt/lists/*\n\n###\n# Set the locale\n###\n#hadolint ignore=DL3059\nRUN locale-gen en_US.UTF-8\nENV LANG en_US.UTF-8\nENV LANGUAGE en_US:en\nENV LC_ALL en_US.UTF-8\n\n####\n# Install GNU C/C++ and GNU make (everything generally needs this)\n####\n# hadolint ignore=DL3008\nRUN apt-get -q update && apt-get -q install --no-install-recommends -y \\\n        g++ \\\n        gcc \\\n        libc-dev \\\n        make \\\n    && apt-get clean \\\n    && rm -rf /var/lib/apt/lists/*\n\n###\n# Install golang as part of base so we can do each\n# helper utility in parallel. go bins are typically\n# statically linked, so this is perfectly safe.\n###\n# hadolint ignore=DL3008,DL3059\nRUN add-apt-repository -y ppa:longsleep/golang-backports \\\n    && apt-get -q update \\\n    && apt-get -q install --no-install-recommends -y golang-go \\\n    && apt-get clean \\\n    && rm -rf /var/lib/apt/lists/*\n\n############\n# Fetch all of the non-conflicting bits in parallel\n#############\n\n####\n# Install Apache Creadur RAT jar\n####\nFROM yetusbase AS yetusapacherat\nARG APACHE_RAT_VERSION=0.13\nSHELL [\"/bin/bash\", \"-o\", \"pipefail\", \"-c\"]\nRUN mkdir -p /opt/apache-rat \\\n    && curl -f -s -L -o /tmp/rat.tgz \\\n        \"https://dlcdn.apache.org/creadur/apache-rat-$APACHE_RAT_VERSION/apache-rat-$APACHE_RAT_VERSION-bin.tar.gz\" \\\n    && shasum -a 512 /tmp/rat.tgz \\\n        | awk '$1!=\"2c1e12eace7b80a9b6373c2f5080fbf63d3fa8d9248f3a17bd05de961cd3ca3c4549817b8b7320a84f0c323194edad0abdb86bdfec3976227a228e2143e14a54\" {exit(1)}' \\\n    && tar --strip-components 1 -C /opt/apache-rat -xpzf /tmp/rat.tgz \\\n    && rm /tmp/rat.tgz \\\n    && mv /opt/apache-rat/apache-rat-$APACHE_RAT_VERSION.jar /opt/apache-rat/apache-rat.jar\n\n#####\n# Install SpotBugs\n#####\nFROM yetusbase AS yetusspotbugs\nARG SPOTBUGS_VERSION=4.6.0\nSHELL [\"/bin/bash\", \"-o\", \"pipefail\", \"-c\"]\nRUN curl -f -sSL https://repo.maven.apache.org/maven2/com/github/spotbugs/spotbugs/$SPOTBUGS_VERSION/spotbugs-$SPOTBUGS_VERSION.tgz -o spotbugs.tgz \\\n    && curl -f -sSL https://repo.maven.apache.org/maven2/com/github/spotbugs/spotbugs/$SPOTBUGS_VERSION/spotbugs-$SPOTBUGS_VERSION.tgz.sha1 -o spotbugs.tgz.sha1 \\\n    && echo -n \"  spotbugs.tgz\" >> spotbugs.tgz.sha1 \\\n    && shasum -c spotbugs.tgz.sha1 \\\n    && mkdir -p /opt/spotbugs \\\n    && tar -C /opt/spotbugs --strip-components 1 -xpf spotbugs.tgz \\\n    && rm spotbugs.tgz spotbugs.tgz.sha1 \\\n    && chmod a+rx /opt/spotbugs/bin/*\n## NOTE: SPOTBUGS_HOME is set below\n\n####\n# Install shellcheck (shell script lint)\n####\nFROM yetusbase AS yetusshellcheck\nARG SHELLCHECK_VERSION=0.8.0\nSHELL [\"/bin/bash\", \"-o\", \"pipefail\", \"-c\"]\nRUN curl -f -sSL \\\n    https://github.com/koalaman/shellcheck/releases/download/v$SHELLCHECK_VERSION/shellcheck-v$SHELLCHECK_VERSION.linux.\"$(uname -m)\".tar.xz \\\n        | tar --strip-components 1 --wildcards -xJf - '*/shellcheck' \\\n    && chmod a+rx shellcheck \\\n    && mv shellcheck /bin/shellcheck\n\n####\n# Install hadolint (dockerfile lint)\n####\nFROM yetusbase AS yetushadolint\nARG HADOLINT_VERSION=2.10.0\nSHELL [\"/bin/bash\", \"-o\", \"pipefail\", \"-c\"]\nRUN if [[ \"$(uname -m)\" == \"x86_64\" ]]; then \\\n curl -f -sSL \\\n        https://github.com/hadolint/hadolint/releases/download/v$HADOLINT_VERSION/hadolint-Linux-\"$(uname -m)\" \\\n        -o /bin/hadolint \\\n    && chmod a+rx /bin/hadolint; \\\n    else touch /bin/hadolint; fi\n\n####\n# Install buf (protobuf lint)\n####\nFROM yetusbase AS yetusbuf\nARG BUF_VERSION=1.3.1\nSHELL [\"/bin/bash\", \"-o\", \"pipefail\", \"-c\"]\nRUN curl -f -sSL \\\n      https://github.com/bufbuild/buf/releases/download/v$BUF_VERSION/buf-Linux-\"$(uname -m)\".tar.gz \\\n      -o buf.tar.gz \\\n    && tar -xzf buf.tar.gz -C /usr/local --strip-components 1 \\\n    && rm buf.tar.gz\n\n####\n# Install bats (TAP-capable unit testing for shell scripts)\n####\nFROM yetusbase AS yetusbats\nARG BATS_VERSION=1.6.0\nSHELL [\"/bin/bash\", \"-o\", \"pipefail\", \"-c\"]\nRUN git clone --branch v$BATS_VERSION \\\n      https://github.com/bats-core/bats-core.git \\\n      /tmp/bats-core \\\n    && /tmp/bats-core/install.sh /opt/bats \\\n    && rm -rf /tmp/bats-core\n\n####\n# revive (golint on steroids)\n####\nFROM yetusbase AS yetusrevive\nSHELL [\"/bin/bash\", \"-o\", \"pipefail\", \"-c\"]\nRUN go install github.com/mgechev/revive@latest\n\n\n####\n# checkmake (Makefile linter)\n#\n# requires go 1.15 as of 2021-03-02\n#\n####\nFROM yetusbase AS yetuscheckmake\nARG CHECKMAKE_VERSION=0.2.1\nSHELL [\"/bin/bash\", \"-o\", \"pipefail\", \"-c\"]\nENV BUILDER_NAME='Apache Yetus'\nENV BUILDER_EMAIL='dev@apache.yetus.org'\nRUN git clone \\\n      https://github.com/mrtazz/checkmake.git /tmp/checkmake \\\n    && git -C /tmp/checkmake checkout $CHECKMAKE_VERSION \\\n    && GOOS=linux CGO_ENABLED=0 make -C /tmp/checkmake binaries \\\n    && make -C /tmp/checkmake test\n\n####\n# golangci-lint (Multi-tool golang linter)\n####\nFROM yetusbase as yetusgolangci\nARG GOLANGCILINT_VERSION=1.45.2\nSHELL [\"/bin/bash\", \"-o\", \"pipefail\", \"-c\"]\nRUN go install github.com/golangci/golangci-lint/cmd/golangci-lint@v$GOLANGCILINT_VERSION\n\n########\n#\n#\n# Content that needs to be installed in order due to packages...\n#\n#\n########\n\nFROM yetusbase\nSHELL [\"/bin/bash\", \"-o\", \"pipefail\", \"-c\"]\n\n####\n# Install java (first, since we want to dicate what form of Java)\n####\n\n####\n# OpenJDK 11\n# NOTE: This default only works when Apache Yetus is launched\n# _in_ the container and not outside of it!\n####\n# hadolint ignore=DL3008,DL3059\nRUN apt-get -q update && apt-get -q install --no-install-recommends -y default-jre-headless openjdk-11-jdk-headless \\\n    && apt-get clean \\\n    && rm -rf /var/lib/apt/lists/*\n# this var will get yetus_abs'd when run under precommit so should be relatively safe\nENV JAVA_HOME /usr/lib/jvm/default-java\nENV SPOTBUGS_HOME /opt/spotbugs\n\n####\n# Install ant\n####\n# hadolint ignore=DL3008\nRUN apt-get -q update && apt-get -q install --no-install-recommends -y ant \\\n    && apt-get clean \\\n    && rm -rf /var/lib/apt/lists/*\n\n####\n# Install GNU automake and related\n####\n# hadolint ignore=DL3008,DL3059\nRUN apt-get -q update && apt-get -q install --no-install-recommends -y autoconf automake libtool \\\n    && apt-get clean \\\n    && rm -rf /var/lib/apt/lists/*\n\n####\n# Install cmake\n####\n# hadolint ignore=DL3008,DL3059\nRUN apt-get -q update && apt-get -q install --no-install-recommends -y cmake \\\n    && apt-get clean \\\n    && rm -rf /var/lib/apt/lists/*\n\n###\n# Install docker\n###\n# hadolint ignore=DL3059\nRUN curl -f -sSL https://download.docker.com/linux/ubuntu/gpg | apt-key add -\n# hadolint ignore=DL3008,DL3059\nRUN add-apt-repository -y \\\n   \"deb [arch=$(dpkg --print-architecture)] https://download.docker.com/linux/ubuntu \\\n   $(lsb_release -cs) \\\n   stable\" \\\n    && apt-get -q update && apt-get -q install --no-install-recommends -y docker-ce \\\n    && apt-get clean \\\n    && rm -rf /var/lib/apt/lists/*\n\n######\n# Install maven\n######\n# hadolint ignore=DL3008,DL3059\nARG MVN_VERSION=3.8.5\nARG MVN_TGZ=apache-maven-$MVN_VERSION-bin.tar.gz\nRUN curl -f -sSL \\\n        -o $MVN_TGZ \\\n        https://archive.apache.org/dist/maven/maven-3/$MVN_VERSION/binaries/$MVN_TGZ \\\n    && tar xzpf $MVN_TGZ \\\n    && mkdir -p /opt \\\n    && mv apache-maven-$MVN_VERSION /opt \\\n    && ln -s /opt/apache-maven-$MVN_VERSION/bin/mvn /bin \\\n    && curl -f -sSL \\\n        -o KEYS \\\n        https://downloads.apache.org/maven/KEYS \\\n    && gpg --batch --import KEYS \\\n    && curl -f -sSL \\\n        -o $MVN_TGZ.asc \\\n         https://archive.apache.org/dist/maven/maven-3/$MVN_VERSION/binaries/$MVN_TGZ.asc \\\n    && gpg --batch --verify $MVN_TGZ.asc $MVN_TGZ \\\n    && rm -rf $MVN_TGZ* /root/.gnupg KEYS\n\n######\n# Install perl\n######\n# hadolint ignore=DL3008,DL3059\nRUN apt-get -q update && apt-get -q install --no-install-recommends -y \\\n        perl \\\n        libperl-critic-perl \\\n    && apt-get clean \\\n    && rm -rf /var/lib/apt/lists/*\n\n######\n# Install python3 and pylint3\n# astroid and pylint go hand-in-hand.  Upgrade both at the same time.\n######\nARG PY3_ANSIBLE_VERSION=5.5.0\nARG PY3_ANSIBLELINT_VERSION=6.0.2\nARG PY3_ASTROID_VERSION=2.11.2\nARG PY3_CODESPELL_VERSION=2.1.0\nARG PY3_DETECT_SECRETS=1.2.0\nARG PY3_DOCKER_COMPOSE=1.29.2\nARG PY3_PYLINT_VERSION=2.13.4\nARG PY3_YAMLLINT_VERSION=1.26.3\n# hadolint ignore=DL3008\nRUN apt-get -q update && apt-get -q install --no-install-recommends -y \\\n        python3 \\\n        python3-bcrypt \\\n        python3-cffi \\\n        python3-cryptography \\\n        python3-dateutil \\\n        python3-dev \\\n        python3-isort \\\n        python3-dockerpty \\\n        python3-nacl \\\n        python3-pyrsistent \\\n        python3-setuptools \\\n        python3-singledispatch \\\n        python3-six \\\n        python3-wheel \\\n        python3-wrapt \\\n        python3-yaml \\\n    && apt-get clean \\\n    && rm -rf /var/lib/apt/lists/* \\\n    && curl -f -sSL https://bootstrap.pypa.io/get-pip.py -o /tmp/get-pip.py \\\n    && python3 /tmp/get-pip.py \\\n    && rm /usr/local/bin/pip /tmp/get-pip.py \\\n    && pip3 install --no-cache-dir -v \\\n        ansible==$PY3_ANSIBLE_VERSION \\\n        ansible-lint==$PY3_ANSIBLELINT_VERSION \\\n        astroid==$PY3_ASTROID_VERSION \\\n        codespell==$PY3_CODESPELL_VERSION \\\n        detect-secrets==$PY3_DETECT_SECRETS \\\n        docker-compose==$PY3_DOCKER_COMPOSE \\\n        pylint==$PY3_PYLINT_VERSION \\\n        yamllint==$PY3_YAMLLINT_VERSION \\\n    && rm -rf /root/.cache \\\n    && mv /usr/local/bin/pylint /usr/local/bin/pylint3 \\\n    && ln -s /usr/local/bin/pylint3 /usr/local/bin/pylint \\\n    && ln -s /usr/local/bin/pip3 /usr/local/bin/pip\n\n####\n# Install ruby and associated bits\n###\nARG RUBY_BUNDLER_VERSION=2.3.10\nARG RUBY_RAKE_VERSION=13.0.6\nARG RUBY_RUBOCOP_VERSION=1.26.1\n# hadolint ignore=DL3008\nRUN echo 'gem: --no-rdoc --no-ri' >> /root/.gemrc \\\n    && apt-get -q update && apt-get -q install --no-install-recommends -y \\\n       ruby \\\n       ruby-dev \\\n    && apt-get clean \\\n    && rm -rf /var/lib/apt/lists/* \\\n    && gem install bundler -v $RUBY_BUNDLER_VERSION \\\n    && gem install rake -v $RUBY_RAKE_VERSION \\\n    && gem install rubocop -v $RUBY_RUBOCOP_VERSION \\\n    && rm -rf /root/.gem\n# set some reasonable defaults for ruby\n# user's can always override these as needed\nENV PATH ${PATH}:/var/tmp/.bundler-gems/bin\nENV BUNDLE_PATH /var/tmp/.bundler-gems\n\n###\n# Install npm and JSHint\n###\nARG JSHINT_VERSION=2.13.4\nARG MARKDOWNLINTCLI_VERSION=0.31.1\nARG JSONLINT_VERSION=1.6.0\n# hadolint ignore=DL3008\nRUN curl -f -sSL https://deb.nodesource.com/setup_14.x | bash - \\\n    && apt-get -q install --no-install-recommends -y nodejs \\\n    && apt-get clean \\\n    && rm -rf /var/lib/apt/lists/* \\\n    && npm install -g \\\n        jshint@$JSHINT_VERSION \\\n        jsonlint@$JSONLINT_VERSION \\\n        markdownlint-cli@0$MARKDOWNLINTCLI_VERSION \\\n    && rm -rf /root/.npm && npm cache clean --force;\n\n#####\n# Now all the stuff that was built in parallel\n#####\n\nCOPY --from=yetusapacherat /opt/apache-rat /opt/apache-rat\nCOPY --from=yetusspotbugs /opt/spotbugs /opt/spotbugs\nCOPY --from=yetusshellcheck /bin/shellcheck /bin/shellcheck\nCOPY --from=yetushadolint /bin/hadolint /bin/hadolint\nCOPY --from=yetusbuf /usr/local/bin/buf /usr/local/bin/buf\nCOPY --from=yetusbats /opt/bats /opt/bats\nRUN ln -s /opt/bats/bin/bats /usr/local/bin/bats\n\nCOPY --from=yetusrevive /root/go/bin/* /usr/local/bin\nCOPY --from=yetuscheckmake /tmp/checkmake/checkmake /usr/local/bin\nCOPY --from=yetusgolangci /root/go/bin/* /usr/local/bin\n\n####\n# YETUS CUT HERE\n# Magic text above! Everything from here on is ignored\n# by Yetus, so could include anything not needed\n# by your testing environment\n###\n"
}