{
  "startTime": 1674214950857,
  "endTime": 1674214952039,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 117,
        "lineEnd": 117,
        "columnStart": 7,
        "columnEnd": 64
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 111,
        "lineEnd": 111,
        "columnStart": 4,
        "columnEnd": 43
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 41,
        "lineEnd": 41,
        "columnStart": 7,
        "columnEnd": 78
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "#\n# Licensed to the Apache Software Foundation (ASF) under one\n# or more contributor license agreements.  See the NOTICE file\n# distributed with this work for additional information\n# regarding copyright ownership.  The ASF licenses this file\n# to you under the Apache License, Version 2.0 (the\n# \"License\"); you may not use this file except in compliance\n# with the License.  You may obtain a copy of the License at\n#\n# http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n#\n\n# Dockerfile for installing the necessary dependencies for building Drill.\n# See BUILDING.txt.\n\nFROM ubuntu:20.04\n\nARG DEBIAN_FRONTEND=noninteractive\n\nWORKDIR /root\n\nSHELL [\"/bin/bash\", \"-o\", \"pipefail\", \"-c\"]\n\n#####\n# Disable suggests/recommends\n#####\nRUN echo APT::Install-Recommends \"0\"\\; > /etc/apt/apt.conf.d/10disableextras\nRUN echo APT::Install-Suggests \"0\"\\; >>  /etc/apt/apt.conf.d/10disableextras\n\nENV DEBIAN_FRONTEND noninteractive\nENV DEBCONF_TERSE true\n\n\n# hadolint ignore=DL3008\nRUN apt -q update \\\n    && apt install --no-install-recommends -y software-properties-common apt-utils apt-transport-https \\\n    # Repo for different Python versions\n    && add-apt-repository -y ppa:deadsnakes/ppa \\\n    && apt-get -q install -y --no-install-recommends \\\n        ant \\\n        bats \\\n        bash-completion \\\n        build-essential \\\n        bzip2 \\\n        ca-certificates \\\n        clang \\\n        cmake \\\n        curl \\\n        docker.io \\\n        doxygen \\\n        findbugs \\\n        fuse \\\n        g++ \\\n        gcc \\\n        git \\\n        gnupg-agent \\\n        libaio1 \\\n        libbcprov-java \\\n        libbz2-dev \\\n        libcurl4-openssl-dev \\\n        libfuse-dev \\\n        libnuma-dev \\\n        libncurses5 \\\n        libprotobuf-dev \\\n        libprotoc-dev \\\n        libsasl2-dev \\\n        libsnappy-dev \\\n        libssl-dev \\\n        libtool \\\n        libzstd-dev \\\n        locales \\\n        make \\\n        maven \\\n#        openjdk-11-jdk \\\n        openjdk-8-jdk \\\n        pinentry-curses \\\n        pkg-config \\\n        python \\\n        python2.7 \\\n#        python-pip \\\n        python-pkg-resources \\\n        python-setuptools \\\n#        python-wheel \\\n        python3-setuptools \\\n        python3-pip \\\n        python3.5 \\\n        python3.6 \\\n        python3.7 \\\n        python2.7 \\\n        virtualenv \\\n        tox \\\n        rsync \\\n        shellcheck \\\n        software-properties-common \\\n        sudo \\\n        valgrind \\\n        vim \\\n        wget \\\n        zlib1g-dev \\\n    && apt-get clean \\\n    && rm -rf /var/lib/apt/lists/*\n\n###\n# Install grpcio-tools mypy-protobuf for `python3 sdks/python/setup.py sdist` to work\n###\nRUN pip3 install --no-cache-dir grpcio-tools mypy-protobuf\n\n###\n# Install Go\n###\nRUN mkdir -p /goroot \\\n    && curl -f https://dl.google.com/go/go1.15.2.linux-amd64.tar.gz | tar xvzf - -C /goroot --strip-components=1 \\\n    && chmod a+rwX -R /goroot\n\n# Set environment variables for Go\nENV GOROOT /goroot\nENV GOPATH /gopath\nENV PATH $GOROOT/bin:$GOPATH/bin:$PATH\nCMD go get github.com/linkedin/goavro\n\n###\n# Miscelaneous fixes...\n###\n# Turns out some build tools use 'time' and in this docker image this is no longer\n# an executable but ONLY an internal command of bash\nCOPY time.sh /usr/bin/time\nRUN chmod 755 /usr/bin/time\n\n# Force the complete use of Java 8\nRUN apt remove -y openjdk-11-jre openjdk-11-jre-headless\nENV JAVA_HOME /usr/lib/jvm/java-8-openjdk-amd64/\n\n\n###\n# Avoid out of memory errors in builds\n###\nENV MAVEN_OPTS -Xmx4g -XX:MaxPermSize=512m\n\n###\n# Add a welcome message and environment checks.\n###\nRUN mkdir /scripts\nCOPY drill_env_checks.sh /scripts/drill_env_checks.sh\nCOPY bashcolors.sh      /scripts/bashcolors.sh\nRUN chmod 755 /scripts /scripts/drill_env_checks.sh /scripts/bashcolors.sh\n\n# hadolint ignore=SC2016\nRUN echo '. /etc/bash_completion'        >> /root/.bash_aliases\nRUN echo '. /scripts/drill_env_checks.sh' >> /root/.bash_aliases\n"
}