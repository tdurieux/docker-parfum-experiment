{
  "startTime": 1674250328757,
  "endTime": 1674250330259,
  "originalSmells": [
    {
      "rule": "wgetUseHttpsUrl",
      "position": {
        "lineStart": 427,
        "lineEnd": 427,
        "columnStart": 4,
        "columnEnd": 131
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 257,
        "lineEnd": 257,
        "columnStart": 2,
        "columnEnd": 40
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 321,
        "lineEnd": 321,
        "columnStart": 4,
        "columnEnd": 42
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 323,
        "lineEnd": 323,
        "columnStart": 7,
        "columnEnd": 46
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 528,
        "lineEnd": 528,
        "columnStart": 4,
        "columnEnd": 28
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# Licensed to the Apache Software Foundation (ASF) under one\n# or more contributor license agreements.  See the NOTICE file\n# distributed with this work for additional information\n# regarding copyright ownership.  The ASF licenses this file\n# to you under the Apache License, Version 2.0 (the\n# \"License\"); you may not use this file except in compliance\n# with the License.  You may obtain a copy of the License at\n#\n#   http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing,\n# software distributed under the License is distributed on an\n# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n# KIND, either express or implied.  See the License for the\n# specific language governing permissions and limitations\n# under the License.\n\n# This docker file defines a multistage build that supports creating\n# various docker images for Apache Kudu development.\n#\n# Note: When editing this file, please follow the best practices laid out here:\n#   https://docs.docker.com/develop/develop-images/dockerfile_best-practices\n#\n# Note: This file uses the shared label namespace for common labels. See:\n#   http://label-schema.org/rc1/\n\n# Base OS Image Arguments.\n# ARGs defined before the first FROM, thus outside of any build-stage, are global.\nARG RUNTIME_BASE_OS\nARG DEV_BASE_OS\n\n#\n# ---- Runtime ----\n# Builds a base image that has all the runtime libraries for Kudu pre-installed.\n#\nFROM $RUNTIME_BASE_OS as runtime\n\n# Copy the license and notice files into the image\n# so that it is propagated to all derived runtime images.\nCOPY ./LICENSE.txt /NOTICES/LICENSE.txt\nCOPY ./NOTICE.txt /NOTICES/NOTICE.txt\n\nCOPY ./docker/bootstrap-runtime-env.sh /\nRUN ./bootstrap-runtime-env.sh && rm bootstrap-runtime-env.sh\n\n# Common label arguments.\n# VCS_REF is not specified to improve docker caching.\nARG DOCKERFILE\nARG MAINTAINER\nARG URL\nARG VCS_TYPE\nARG VCS_URL\nARG VERSION\n\nLABEL org.label-schema.name=\"Apache Kudu Runtime Base\" \\\n      org.label-schema.description=\"A base image that has all the runtime libraries for Kudu pre-installed.\" \\\n      # Common labels.\n      org.label-schema.dockerfile=$DOCKERFILE \\\n      org.label-schema.maintainer=$MAINTAINER \\\n      org.label-schema.url=$URL \\\n      org.label-schema.vcs-type=$VCS_TYPE \\\n      org.label-schema.vcs-url=$VCS_URL \\\n      org.label-schema.version=$VERSION\n\n# Entry point to bash.\nCMD [\"/bin/bash\"]\n\n#\n# ---- Dev ----\n# Builds a base image that has all the development libraries for Kudu pre-installed.\n#\nFROM $DEV_BASE_OS as dev\n\n# Copy the license and notice files into the image\n# so that it is propagated to all derived dev images.\nCOPY ./LICENSE.txt /NOTICES/LICENSE.txt\nCOPY ./NOTICE.txt /NOTICES/NOTICE.txt\n\nCOPY ./docker/bootstrap-dev-env.sh /\nCOPY ./docker/bootstrap-java-env.sh /\nCOPY ./docker/bootstrap-python-env.sh /\nRUN ./bootstrap-dev-env.sh \\\n  && ./bootstrap-java-env.sh \\\n  && ./bootstrap-python-env.sh \\\n  && rm bootstrap-dev-env.sh \\\n  && rm bootstrap-java-env.sh \\\n  && rm bootstrap-python-env.sh\n\nENV PATH /usr/lib/ccache:/usr/lib64/ccache/:$PATH\n\n# Entry point to bash.\nCMD [\"/bin/bash\"]\n\n# Common label arguments.\n# VCS_REF is not specified to improve docker caching.\nARG DOCKERFILE\nARG MAINTAINER\nARG URL\nARG VCS_TYPE\nARG VCS_URL\nARG VERSION\n\nLABEL org.label-schema.name=\"Apache Kudu Development Base\" \\\n      org.label-schema.description=\"A base image that has all the development libraries for Kudu pre-installed.\" \\\n      # Common labels.\n      org.label-schema.dockerfile=$DOCKERFILE \\\n      org.label-schema.maintainer=$MAINTAINER \\\n      org.label-schema.url=$URL \\\n      org.label-schema.vcs-type=$VCS_TYPE \\\n      org.label-schema.vcs-url=$VCS_URL \\\n      org.label-schema.version=$VERSION\n\n#\n# ---- Thirdparty ----\n# Builds an image that has Kudu's thirdparty dependencies built.\n# This is done in its own stage so that docker can cache it and only\n# run it when thirdparty has changes.\n#\nFROM dev AS thirdparty\n\nARG BUILD_DIR=\"/kudu\"\n\nENV UID=1000\nENV GID=1000\n\n# Setup the kudu user and create the neccessary directories.\n# We do this before copying any files othwerwise the image size is doubled by the chown change.\nRUN groupadd -g ${GID} kudu || groupmod -n kudu $(getent group ${GID} | cut -d: -f1) \\\n    && useradd --shell /bin/bash -u ${UID} -g ${GID} -m kudu \\\n    && echo 'kudu ALL=(ALL) NOPASSWD:ALL' >> /etc/sudoers \\\n    && mkdir -p ${BUILD_DIR} && chown -R kudu:kudu ${BUILD_DIR}\n# Run the build as the kudu user.\nUSER kudu\n\nWORKDIR ${BUILD_DIR}\n# We only copy the needed files for thirdparty so docker can handle caching.\nCOPY --chown=kudu:kudu ./thirdparty thirdparty\nCOPY --chown=kudu:kudu ./build-support/enable_devtoolset.sh \\\n  ./build-support/enable_devtoolset_inner.sh \\\n  build-support/\nCOPY --chown=kudu:kudu ./build-support/ccache-clang build-support/ccache-clang\nCOPY --chown=kudu:kudu ./build-support/ccache-devtoolset-8 build-support/ccache-devtoolset-8\n# We explicitly set UID/GID due to https://github.com/moby/buildkit/issues/1237\n# Hard coded UID/GID are required due to https://github.com/moby/buildkit/issues/815\nRUN --mount=type=cache,id=ccache,uid=1000,gid=1000,target=/home/kudu/.ccache \\\n  build-support/enable_devtoolset.sh \\\n  thirdparty/build-if-necessary.sh \\\n  # Remove the files left behind that we don't need.\n  # Remove all the source files except the hadoop, hive, postgresql, ranger, and sentry sources\n  # which are pre-built and symlinked into the installed/common/opt directory.\n  && find thirdparty/src/* -maxdepth 0 -type d  \\\n    \\( ! -name 'hadoop-*' ! -name 'hive-*' ! -name 'postgresql-*' ! -name 'ranger-*' ! -name 'sentry-*' \\) \\\n    -prune -exec rm -rf {} \\; \\\n  # Remove all the build files except the llvm build which is symlinked into\n  # the clang-toolchain directory.\n  && find thirdparty/build/* -maxdepth 0 -type d ! -name 'llvm-*' -prune -exec rm -rf {} \\;\n\n# Common label arguments.\n# VCS_REF is not specified to improve docker caching.\nARG DOCKERFILE\nARG MAINTAINER\nARG URL\nARG VCS_REF\nARG VCS_TYPE\nARG VCS_URL\nARG VERSION\n\n# Entry point to bash.\nCMD [\"/bin/bash\"]\n\nLABEL name=\"Apache Kudu Thirdparty\" \\\n      description=\"An image that has Kudu's thirdparty dependencies pre-built.\" \\\n      # Common labels.\n      org.label-schema.dockerfile=$DOCKERFILE \\\n      org.label-schema.maintainer=$MAINTAINER \\\n      org.label-schema.url=$URL \\\n      org.label-schema.vcs-type=$VCS_TYPE \\\n      org.label-schema.vcs-url=$VCS_URL \\\n      org.label-schema.version=$VERSION\n\n#\n# ---- Build ----\n# Builds an image that has the Kudu source code pre-built.\n# This is useful for generating a small runtime image,\n# but can also be a useful base development image.\n#\nFROM thirdparty AS build\n\nARG BUILD_DIR=\"/kudu\"\nARG BUILD_TYPE=release\nARG LINK_TYPE=static\nARG STRIP=1\nARG PARALLEL=4\n# This is a common label argument, but also used in the build invocation.\nARG VCS_REF\n\nENV UID=1000\nENV GID=1000\n\n# Use the bash shell for all RUN commands.\nSHELL [\"/bin/bash\", \"-c\"]\n# Run the build as the kudu user.\nUSER kudu\n\nWORKDIR ${BUILD_DIR}\n# Copy the C++ build source.\n# We copy the minimal source to optimize docker cache hits.\nCOPY --chown=kudu:kudu ./build-support build-support\nCOPY --chown=kudu:kudu ./docs/support docs/support\nCOPY --chown=kudu:kudu ./cmake_modules cmake_modules\nCOPY --chown=kudu:kudu ./examples/cpp examples/cpp\nCOPY --chown=kudu:kudu ./src src\nCOPY --chown=kudu:kudu ./CMakeLists.txt ./version.txt ./\n\n# Copy the java build source.\n# Some parts of the C++ build depend on Java code.\nCOPY --chown=kudu:kudu ./java ${BUILD_DIR}/java\n\n# Build the c++ code.\nWORKDIR ${BUILD_DIR}/build/$BUILD_TYPE\n# Enable the Gradle build cache in the C++ build.\nENV GRADLE_FLAGS=\"--build-cache\"\n# Ensure we don't rebuild thirdparty. Instead let docker handle caching.\nENV NO_REBUILD_THIRDPARTY=1\n# We explicitly set UID/GID due to https://github.com/moby/buildkit/issues/1237\n# Hard coded UID/GID are required due to https://github.com/moby/buildkit/issues/815\nRUN --mount=type=cache,id=ccache,uid=1000,gid=1000,target=/home/kudu/.ccache \\\n  --mount=type=cache,id=gradle-cache,uid=1000,gid=1000,target=/home/kudu/.gradle \\\n  ../../build-support/enable_devtoolset.sh \\\n  ../../thirdparty/installed/common/bin/cmake \\\n  -DCMAKE_BUILD_TYPE=$BUILD_TYPE \\\n  -DKUDU_LINK=$LINK_TYPE \\\n  -DKUDU_GIT_HASH=$VCS_REF \\\n  # The release build is massive with tests built.\n  -DNO_TESTS=1 \\\n  ../.. \\\n  && make -j${PARALLEL} \\\n  # Install the client libraries for the python build to use.\n  # TODO: Use custom install location when the python build can be configured to use it.\n  && sudo make install \\\n  # Strip the binaries to reduce the images size.\n  && if [ \"$STRIP\" == \"1\" ]; then find \"bin\" -name \"kudu*\" -type f -exec strip {} \\;; fi \\\n  # Strip the client libraries to reduce the images size\n  && if [[ \"$STRIP\" == \"1\" ]]; then find \"/usr/local\" -name \"libkudu*\" -type f -exec strip {} \\;; fi\n\n# Build the java code.\nWORKDIR ${BUILD_DIR}/java\nRUN --mount=type=cache,id=gradle-cache,uid=1000,gid=1000,target=/home/kudu/.gradle \\\n  ./gradlew jar --build-cache\n\n# Copy the python build source.\nCOPY --chown=kudu:kudu ./python ${BUILD_DIR}/python\n# Build the python code.\nWORKDIR ${BUILD_DIR}/python\nRUN --mount=type=cache,id=ccache,uid=1000,gid=1000,target=/home/kudu/.ccache \\\n  pip install --no-cache-dir --user -r requirements.txt \\\n  && python setup.py sdist\n\n# Copy any remaining source files.\nWORKDIR ${BUILD_DIR}\nCOPY --chown=kudu:kudu . ${BUILD_DIR}\n\n# Entry point to bash.\nCMD [\"/bin/bash\"]\n\n# Common label arguments.\nARG DOCKERFILE\nARG MAINTAINER\nARG URL\nARG VCS_TYPE\nARG VCS_URL\nARG VERSION\n\nLABEL name=\"Apache Kudu Build\" \\\n      description=\"An image that has the Kudu source code pre-built.\" \\\n      org.apache.kudu.build.type=$BUILD_TYPE \\\n      org.apache.kudu.build.link=$LINK_TYPE \\\n      org.apache.kudu.build.stripped=$STRIP \\\n      # Common labels.\n      org.label-schema.dockerfile=$DOCKERFILE \\\n      org.label-schema.maintainer=$MAINTAINER \\\n      org.label-schema.url=$URL \\\n      org.label-schema.vcs-ref=$VCS_REF \\\n      org.label-schema.vcs-type=$VCS_TYPE \\\n      org.label-schema.vcs-url=$VCS_URL \\\n      org.label-schema.version=$VERSION\n\n#\n# ---- Kudu Python ----\n# Builds a runtime image with the Kudu python client pre-installed.\n#\nFROM runtime AS kudu-python\n\nARG BUILD_DIR=\"/kudu\"\nARG INSTALL_DIR=\"/opt/kudu\"\n\nENV UID=1000\nENV GID=1000\n\n# Setup the kudu user and create the neccessary directories.\n# We do this before copying any files othwerwise the image size is doubled by the chown change.\nRUN groupadd -g ${GID} kudu || groupmod -n kudu $(getent group ${GID} | cut -d: -f1) \\\n    && useradd --shell /bin/bash -u ${UID} -g ${GID} -m kudu \\\n    && mkdir -p ${INSTALL_DIR} && chown -R kudu:kudu ${INSTALL_DIR}\n\nCOPY ./docker/bootstrap-python-env.sh /\nRUN ./bootstrap-python-env.sh \\\n  && rm bootstrap-python-env.sh\n\n# Install as the kudu user.\nUSER kudu\n\nENV LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/usr/local/lib64\nWORKDIR $INSTALL_DIR/python\n# Copy the requirements file.\nCOPY ./python/requirements.txt requirements.txt\nCOPY --chown=kudu:kudu --from=build /usr/local/lib/libkudu_client* /usr/local/lib/\nCOPY --chown=kudu:kudu --from=build /usr/local/include/kudu /usr/local/include/kudu\nCOPY --chown=kudu:kudu --from=build ${BUILD_DIR}/python/dist/kudu-python-*.tar.gz .\nRUN pip install --no-cache-dir --user -r requirements.txt \\\n    && rm -rf requirements.txt \\\n    && pip install --no-cache-dir --user kudu-python-*.tar.gz \\\n    && rm -rf kudu-python-*.tar.gz\n\n# Entry point to Python.\nCMD [\"python\"]\n\nARG DOCKERFILE\nARG MAINTAINER\nARG URL\nARG VCS_REF\nARG VCS_TYPE\nARG VCS_URL\nARG VERSION\n\nLABEL org.label-schema.name=\"Apache Kudu Python Client\" \\\n      org.label-schema.description=\"An image with the Kudu Python client pre-installed.\" \\\n      # Common labels.\n      org.label-schema.dockerfile=$DOCKERFILE \\\n      org.label-schema.maintainer=$MAINTAINER \\\n      org.label-schema.url=$URL \\\n      org.label-schema.vcs-ref=$VCS_REF \\\n      org.label-schema.vcs-type=$VCS_TYPE \\\n      org.label-schema.vcs-url=$VCS_URL \\\n      org.label-schema.version=$VERSION\n\n#\n# ---- Kudu ----\n# Builds a runtime image with the Kudu binaries pre-installed.\n#\nFROM runtime AS kudu\n\nARG BUILD_DIR=\"/kudu\"\nARG INSTALL_DIR=\"/opt/kudu\"\nARG DATA_DIR=\"/var/lib/kudu\"\n\nENV UID=1000\nENV GID=1000\n\n# Setup the kudu user and create the neccessary directories.\n# We do this before copying any files othwerwise the image size is doubled by the chown change.\nRUN groupadd -g ${GID} kudu || groupmod -n kudu $(getent group ${GID} | cut -d: -f1) \\\n    && useradd --shell /bin/bash -u ${UID} -g ${GID} -m kudu \\\n    && mkdir -p ${INSTALL_DIR} && chown -R kudu:kudu ${INSTALL_DIR} \\\n    && mkdir -p ${DATA_DIR} && chown -R kudu:kudu ${DATA_DIR}\n\n# Copy the binaries.\nWORKDIR $INSTALL_DIR/bin\nCOPY --chown=kudu:kudu --from=build ${BUILD_DIR}/build/latest/bin/kudu ./\n# Add to the binaries to the path.\nENV PATH=$INSTALL_DIR/bin/:$PATH\n\n# Copy the web files.\nWORKDIR $INSTALL_DIR\nCOPY --chown=kudu:kudu --from=build ${BUILD_DIR}/www ./www\n\n# Copy the entrypoint script.\nCOPY --chown=kudu:kudu ./docker/kudu-entrypoint.sh /\n\nUSER kudu\n# Add the entrypoint.\nENTRYPOINT [\"/kudu-entrypoint.sh\"]\nCMD [\"help\"]\n\n# Common label arguments.\nARG DOCKERFILE\nARG MAINTAINER\nARG URL\nARG VCS_REF\nARG VCS_TYPE\nARG VCS_URL\nARG VERSION\n\nLABEL name=\"Apache Kudu\" \\\n      description=\"An image with the Kudu binaries and clients pre-installed.\" \\\n      org.apache.kudu.build.type=$BUILD_TYPE \\\n      # Common labels.\n      org.label-schema.dockerfile=$DOCKERFILE \\\n      org.label-schema.maintainer=$MAINTAINER \\\n      org.label-schema.url=$URL \\\n      org.label-schema.vcs-ref=$VCS_REF \\\n      org.label-schema.vcs-type=$VCS_TYPE \\\n      org.label-schema.vcs-url=$VCS_URL \\\n      org.label-schema.version=$VERSION\n\n#\n# ---- Impala Build ----\n# Builds an image that has the Impala source code pre-built.\n# This is useful for generating a small runtime image.\n#\nFROM dev AS impala-build\n\nARG IMPALA_VERSION=\"3.4.0\"\n\n# Use the bash shell for all RUN commands.\nSHELL [\"/bin/bash\", \"-c\"]\n\n# Install Maven.\nCOPY ./docker/bootstrap-maven-env.sh /\nRUN ./bootstrap-maven-env.sh \\\n  && rm bootstrap-maven-env.sh\n\nWORKDIR /impala\n\n# Download and un-tar an Impala source release.\nRUN wget -nv https://archive.apache.org/dist/impala/${IMPALA_VERSION}/apache-impala-${IMPALA_VERSION}.tar.gz -O apache-impala.tar.gz \\\n  && tar -xzf apache-impala.tar.gz --strip-components=1 \\\n  && rm apache-impala.tar.gz\n\n# Build Impala\nRUN source bin/impala-config.sh \\\n  && ./buildall.sh -release -noclean -notests \\\n  && docker/setup_build_context.py\n\n# Copy to the expected install location in the runtime image.\n# This helps avoid issues where docker won't follow symbolic links on copy.\nRUN mkdir /opt/impala \\\n  && cp -Lr /impala/docker/build_context/release/bin /opt/impala/bin \\\n  && cp -Lr /impala/docker/build_context/release/lib /opt/impala/lib \\\n  && cp -Lr /impala/docker/build_context/release/www /opt/impala/www \\\n  && cp -Lr /impala/toolchain/cdh_components-*/hive-* /opt/hive \\\n  && cp -Lr /impala/toolchain/cdh_components-*/hadoop-* /opt/hadoop\n\n# Common label arguments.\nARG DOCKERFILE\nARG MAINTAINER\nARG URL\nARG VCS_REF\nARG VCS_TYPE\nARG VCS_URL\nARG VERSION\n\nLABEL name=\"Apache Impala Build\" \\\n      description=\"An image that has the Impala source code pre-built.\" \\\n      org.apache.kudu.impala.version=$IMPALA_VERSION \\\n      # Common labels.\n      org.label-schema.dockerfile=$DOCKERFILE \\\n      org.label-schema.maintainer=$MAINTAINER \\\n      org.label-schema.url=$URL \\\n      org.label-schema.vcs-ref=$VCS_REF \\\n      org.label-schema.vcs-type=$VCS_TYPE \\\n      org.label-schema.vcs-url=$VCS_URL \\\n      org.label-schema.version=$VERSION\n\n#\n# ---- Kudu Impala ----\n# Builds a runtime image with the Impala binaries pre-installed.\n# This image is only for use with the Kudu Quickstart.\n#\nFROM runtime AS impala\n\nARG DATA_DIR=\"/var/lib/impala\"\nARG IMPALA_VERSION=\"3.3.0\"\n\nENV UID=1001\nENV GID=1001\n\nENV IMPALA_HOME=\"/opt/impala\"\nENV HIVE_HOME=\"/opt/hive\"\nENV HIVE_CONF_DIR=\"/etc/hive/conf\"\nENV HADOOP_HOME=\"/opt/hadoop\"\nENV HADOOP_CONF_DIR=\"/etc/hadoop/conf\"\n\n# Setup the impala user and create the neccessary directories.\n# We do this before copying any files othwerwise the image size is doubled by the chown change.\nRUN groupadd -g ${GID} impala || groupmod -n impala $(getent group ${GID} | cut -d: -f1) \\\n    && useradd --shell /bin/bash -u ${UID} -g ${GID} -m impala \\\n    && mkdir -p ${IMPALA_HOME} && chown -R impala:impala ${IMPALA_HOME} \\\n    && mkdir -p ${HIVE_HOME} && chown -R impala:impala ${HIVE_HOME} \\\n    && mkdir -p ${HADOOP_HOME} && chown -R impala:impala ${HADOOP_HOME} \\\n    && mkdir -p ${DATA_DIR} && chown -R impala:impala ${DATA_DIR}\n\n# Copy the Impala install.\nWORKDIR $IMPALA_HOME\nCOPY --chown=impala:impala --from=impala-build /opt/impala ./\n# Symlink here instead of in setup_build_context to avoid duplicate binaries.\nWORKDIR $IMPALA_HOME/bin\nRUN ln -s impalad statestored && ln -s impalad catalogd\n\n# Copy the Hive install.\nWORKDIR $HIVE_HOME\nCOPY --chown=impala:impala --from=impala-build /opt/hive ./\n\n# Copy the Hadoop install.\nWORKDIR $HADOOP_HOME\nCOPY --chown=impala:impala --from=impala-build /opt/hadoop ./\n\n# Add to the binaries to the path.\nENV PATH=$IMPALA_HOME/bin/:$PATH\nENV PATH=$HIVE_HOME/bin/:$PATH\nENV PATH=$HADOOP_HOME/bin/:$PATH\n\n# Copy the impala config files.\nCOPY ./docker/impala/etc /etc\n\nWORKDIR /\n# Install Java.\nCOPY ./docker/bootstrap-java-env.sh /\nRUN ./bootstrap-java-env.sh \\\n  && rm bootstrap-java-env.sh\n# Install Python.\nCOPY ./docker/bootstrap-python-env.sh /\nRUN ./bootstrap-python-env.sh \\\n  && rm bootstrap-python-env.sh\n# Install the impala-shell.\n# TODO(ghenke): Install from the impala-build image.\nRUN pip install --no-cache-dir impala-shell\n\n# Copy the entrypoint script.\nWORKDIR $IMPALA_HOME/bin\nCOPY --chown=impala:impala ./docker/impala-entrypoint.sh /\n\nUSER impala\n# Add the entrypoint.\nENTRYPOINT [\"/impala-entrypoint.sh\"]\nCMD [\"help\"]\n\n# Common label arguments.\nARG DOCKERFILE\nARG MAINTAINER\nARG URL\nARG VCS_REF\nARG VCS_TYPE\nARG VCS_URL\nARG VERSION\n\nLABEL name=\"Apache Impala\" \\\n      description=\"An image with the Impala binaries pre-installed. This image is only for use with the Kudu Quickstart.\" \\\n      org.apache.kudu.impala.version=$IMPALA_VERSION \\\n      # Common labels.\n      org.label-schema.dockerfile=$DOCKERFILE \\\n      org.label-schema.maintainer=$MAINTAINER \\\n      org.label-schema.url=$URL \\\n      org.label-schema.vcs-ref=$VCS_REF \\\n      org.label-schema.vcs-type=$VCS_TYPE \\\n      org.label-schema.vcs-url=$VCS_URL \\\n      org.label-schema.version=$VERSION\n"
}