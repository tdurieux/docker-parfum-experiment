{
  "startTime": 1674215092322,
  "endTime": 1674215093130,
  "originalSmells": [
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 35,
        "lineEnd": 35,
        "columnStart": 4,
        "columnEnd": 33
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 26,
        "lineEnd": 26,
        "columnStart": 7,
        "columnEnd": 55
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 99,
        "lineEnd": 99,
        "columnStart": 11,
        "columnEnd": 27
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# Based on https://github.com/apache/superset/blob/1.5.0/Dockerfile\n\n######################################################################\n# PY stage that simply does a pip install on our requirements\n######################################################################\nARG PY_VER=3.8.12\nFROM python:${PY_VER} AS superset-py\n\nRUN mkdir /app \\\n        && apt-get update -y \\\n        && apt-get install -y --no-install-recommends \\\n            build-essential \\\n            default-libmysqlclient-dev \\\n            libpq-dev \\\n            libsasl2-dev \\\n            libecpg-dev \\\n        && rm -rf /var/lib/apt/lists/*\n\n# First, we just wanna install requirements, which will allow us to utilize the cache\n# in order to only build if and only if requirements change\nCOPY ./repo/requirements/*.txt  /app/requirements/\nCOPY repo/setup.py repo/MANIFEST.in repo/README.md /app/\nCOPY repo/superset-frontend/package.json /app/superset-frontend/\nRUN cd /app \\\n    && mkdir -p superset/static \\\n    && touch superset/static/version_info.json \\\n    && pip install --no-cache-dir --no-cache -r requirements/local.txt\n\n\n######################################################################\n# Node stage to deal with static asset construction\n######################################################################\nFROM node:16 AS superset-node\n\nARG NPM_VER=7\nRUN npm install -g npm@${NPM_VER} && npm cache clean --force;\n\nARG NPM_BUILD_CMD=\"build\"\nENV BUILD_CMD=${NPM_BUILD_CMD}\n\n# NPM ci first, as to NOT invalidate previous steps except for when package.json changes\nRUN mkdir -p /app/superset-frontend\nRUN mkdir -p /app/superset/assets\nCOPY ./repo/docker/frontend-mem-nag.sh /\nCOPY ./repo/superset-frontend/ /app/superset-frontend/\n\n# Add our boxplot\nCOPY ./box-plot-overrides /app/superset-frontend/plugins/plugin-chart-echarts/\nRUN rm -f /app/superset-frontend/plugins/plugin-chart-echarts/src/BoxPlot/controlPanel.ts\n\nRUN /frontend-mem-nag.sh \\\n        && cd /app/superset-frontend \\\n        && npm ci\n\n# This seems to be the most expensive step\nRUN cd /app/superset-frontend \\\n        && npm run ${BUILD_CMD} \\\n        && rm -rf node_modules\n\n\n######################################################################\n# Final lean image...\n######################################################################\nARG PY_VER=3.8.12\nFROM python:${PY_VER} AS lean\n\nENV LANG=C.UTF-8 \\\n    LC_ALL=C.UTF-8 \\\n    FLASK_ENV=production \\\n    FLASK_APP=\"superset.app:create_app()\" \\\n    PYTHONPATH=\"/app/pythonpath\" \\\n    SUPERSET_HOME=\"/app/superset_home\" \\\n    SUPERSET_PORT=8088\n\nRUN mkdir -p ${PYTHONPATH} \\\n        && useradd --user-group -d ${SUPERSET_HOME} -m --no-log-init --shell /bin/bash superset \\\n        && apt-get update -y \\\n        && apt-get install -y --no-install-recommends \\\n            build-essential \\\n            default-libmysqlclient-dev \\\n            libsasl2-modules-gssapi-mit \\\n            libpq-dev \\\n            libecpg-dev \\\n        && rm -rf /var/lib/apt/lists/*\n\n# Copying configs. No need for a volume\nCOPY ./repo/docker/pythonpath_dev/superset_config.py ./superset_config_docker.py /app/pythonpath_docker/\n\nCOPY --from=superset-py /usr/local/lib/python3.8/site-packages/ /usr/local/lib/python3.8/site-packages/\n# Copying site-packages doesn't move the CLIs, so let's copy them one by one\nCOPY --from=superset-py /usr/local/bin/gunicorn /usr/local/bin/celery /usr/local/bin/flask /usr/bin/\nCOPY --from=superset-node /app/superset/static/assets /app/superset/static/assets\nCOPY --from=superset-node /app/superset-frontend /app/superset-frontend\n\n## Lastly, let's install superset itself\nCOPY repo/superset /app/superset\nCOPY repo/setup.py repo/MANIFEST.in repo/README.md /app/\nRUN cd /app \\\n        && chown -R superset:superset * \\\n        && pip install --no-cache-dir -e . \\\n        && flask fab babel-compile --target superset/translations\n\nCOPY ./repo/docker/run-server.sh /usr/bin/\n# copy scripts to start containers to avoid volumes\nCOPY ./repo/docker/docker-bootstrap.sh ./repo/docker/docker-init.sh /app/docker/\n\nRUN chmod a+x /usr/bin/run-server.sh\n\nWORKDIR /app\n\nUSER superset\n\nHEALTHCHECK CMD curl -f \"http://localhost:$SUPERSET_PORT/health\"\n\nEXPOSE ${SUPERSET_PORT}\n\nCMD /usr/bin/run-server.sh\n"
}