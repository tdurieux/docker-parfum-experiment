{
  "startTime": 1674252688978,
  "endTime": 1674252689658,
  "originalSmells": [
    {
      "rule": "yarnCacheCleanAfterInstall",
      "position": {
        "lineStart": 7,
        "lineEnd": 7,
        "columnStart": 4,
        "columnEnd": 16
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 18,
        "lineEnd": 18,
        "columnStart": 4,
        "columnEnd": 38
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 16,
        "lineEnd": 16,
        "columnStart": 22,
        "columnEnd": 121
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 16,
        "lineEnd": 16,
        "columnStart": 22,
        "columnEnd": 121
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# FOR FRONT-END DEPLOYMENT... (REACT)\nFROM node:16-alpine as build-step\nWORKDIR /app\nENV PATH /app/client/node_modules/.bin:$PATH\nCOPY yarn.lock ./\nCOPY client ./client\nWORKDIR /app/client\nRUN yarn install && yarn cache clean;\nRUN yarn build\n\n# FOR BACK-END DEPLOYMENT... (FLASK)\nFROM python:3.10.4-slim\nWORKDIR /\n# Don't forget \"--from\"! It acts as a bridge that connects two seperate stages\nCOPY --from=build-step app ./app\nWORKDIR /app\nRUN apt-get update && apt-get install --no-install-recommends -y python3-dev gfortran libopenblas-dev libxc-dev libscalapack-mpi-dev libfftw3-dev && rm -rf /var/lib/apt/lists/*;\nCOPY requirements.txt ./\nRUN pip3 install --no-cache-dir -r ./requirements.txt\n# Pretty much pass everything in the root folder except for the client folder, as we do NOT want to overwrite the pre-generated client folder that is already in the ./app folder\nCOPY electron_visualized.py .flaskenv ./\nCOPY server ./server\nEXPOSE 5000\nENTRYPOINT [\"python\"]\nCMD [\"electron_visualized.py\"]\n\n# THIS IS CALLED MULTI-STAGE BUILDING IN DOCKER"
}