{
  "startTime": 1674252616003,
  "endTime": 1674252616792,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 39,
        "lineEnd": 39,
        "columnStart": 5,
        "columnEnd": 126
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 12,
        "lineEnd": 13,
        "columnStart": 7,
        "columnEnd": 56
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 24,
        "lineEnd": 30,
        "columnStart": 7,
        "columnEnd": 37
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 42,
        "lineEnd": 57,
        "columnStart": 7,
        "columnEnd": 37
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# rebuild in #33610\n# docker build -t clickhouse/test-base .\nARG FROM_TAG=latest\nFROM clickhouse/test-util:$FROM_TAG\n\n# ARG for quick switch to a given ubuntu mirror\nARG apt_archive=\"http://archive.ubuntu.com\"\nRUN sed -i \"s|http://archive.ubuntu.com|$apt_archive|g\" /etc/apt/sources.list\n\nENV DEBIAN_FRONTEND=noninteractive LLVM_VERSION=14\n\nRUN apt-get update \\\n    && apt-get install ca-certificates lsb-release wget gnupg apt-transport-https \\\n        --yes --no-install-recommends --verbose-versions \\\n    && export LLVM_PUBKEY_HASH=\"bda960a8da687a275a2078d43c111d66b1c6a893a3275271beedf266c1ff4a0cdecb429c7a5cccf9f486ea7aa43fd27f\" \\\n    && wget -nv -O /tmp/llvm-snapshot.gpg.key https://apt.llvm.org/llvm-snapshot.gpg.key \\\n    && echo \"${LLVM_PUBKEY_HASH} /tmp/llvm-snapshot.gpg.key\" | sha384sum -c \\\n    && apt-key add /tmp/llvm-snapshot.gpg.key \\\n    && export CODENAME=\"$(lsb_release --codename --short | tr 'A-Z' 'a-z')\" \\\n    && echo \"deb [trusted=yes] http://apt.llvm.org/${CODENAME}/ llvm-toolchain-${CODENAME}-${LLVM_VERSION} main\" >> \\\n        /etc/apt/sources.list && rm -rf /var/lib/apt/lists/*;\n\n# initial packages\nRUN apt-get update \\\n    && apt-get install \\\n        bash \\\n        fakeroot \\\n        ccache \\\n        curl \\\n        software-properties-common \\\n        --yes --no-install-recommends && rm -rf /var/lib/apt/lists/*;\n\n# Architecture of the image when BuildKit/buildx is used\nARG TARGETARCH\n\n# Special dpkg-deb (https://github.com/ClickHouse-Extras/dpkg) version which is able\n# to compress files using pigz (https://zlib.net/pigz/) instead of gzip.\n# Significantly increase deb packaging speed and compatible with old systems\nRUN arch=${TARGETARCH:-amd64} \\\n  && curl -f -Lo /usr/bin/dpkg-deb https://github.com/ClickHouse-Extras/dpkg/releases/download/1.21.1-clickhouse/dpkg-deb-${arch}\n\nRUN apt-get update \\\n    && apt-get install \\\n        clang-${LLVM_VERSION} \\\n        debhelper \\\n        devscripts \\\n        gdb  \\\n        git \\\n        gperf \\\n        lcov \\\n        llvm-${LLVM_VERSION} \\\n        moreutils \\\n        perl \\\n        pigz \\\n        pkg-config \\\n        tzdata \\\n        pv \\\n        --yes --no-install-recommends && rm -rf /var/lib/apt/lists/*;\n\n# Sanitizer options for services (clickhouse-server)\n# Set resident memory limit for TSAN to 45GiB (46080MiB) to avoid OOMs in Stress tests\n# and MEMORY_LIMIT_EXCEEDED exceptions in Functional tests (total memory limit in Functional tests is ~55.24 GiB).\n# TSAN will flush shadow memory when reaching this limit.\n# It may cause false-negatives, but it's better than OOM.\nRUN echo \"TSAN_OPTIONS='verbosity=1000 halt_on_error=1 history_size=7 memory_limit_mb=46080'\" >> /etc/environment; \\\n  echo \"UBSAN_OPTIONS='print_stacktrace=1'\" >> /etc/environment; \\\n  echo \"MSAN_OPTIONS='abort_on_error=1 poison_in_dtor=1'\" >> /etc/environment; \\\n  echo \"LSAN_OPTIONS='suppressions=/usr/share/clickhouse-test/config/lsan_suppressions.txt'\" >> /etc/environment; \\\n  ln -s /usr/lib/llvm-${LLVM_VERSION}/bin/llvm-symbolizer /usr/bin/llvm-symbolizer;\n# Sanitizer options for current shell (not current, but the one that will be spawned on \"docker run\")\n# (but w/o verbosity for TSAN, otherwise test.reference will not match)\nENV TSAN_OPTIONS='halt_on_error=1 history_size=7 memory_limit_mb=46080'\nENV UBSAN_OPTIONS='print_stacktrace=1'\nENV MSAN_OPTIONS='abort_on_error=1 poison_in_dtor=1'\n\nENV TZ=Europe/Moscow\nRUN ln -snf \"/usr/share/zoneinfo/$TZ\" /etc/localtime && echo \"$TZ\" > /etc/timezone\n\nCMD sleep 1\n"
}