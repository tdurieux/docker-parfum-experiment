{
  "startTime": 1674252930068,
  "endTime": 1674252931507,
  "originalSmells": [
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 11,
        "lineEnd": 18,
        "columnStart": 7,
        "columnEnd": 14
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM ubuntu:20.04\n\n# see https://github.com/moby/moby/issues/4032#issuecomment-192327844\nARG DEBIAN_FRONTEND=noninteractive\n\n# ARG for quick switch to a given ubuntu mirror\nARG apt_archive=\"http://archive.ubuntu.com\"\nRUN sed -i \"s|http://archive.ubuntu.com|${apt_archive}|g\" /etc/apt/sources.list \\\n    && groupadd -r clickhouse --gid=101 \\\n    && useradd -r -g clickhouse --uid=101 --home-dir=/var/lib/clickhouse --shell=/bin/bash clickhouse \\\n    && apt-get update \\\n    && apt-get install --yes --no-install-recommends \\\n        apt-transport-https \\\n        ca-certificates \\\n        dirmngr \\\n        gnupg \\\n        locales \\\n        wget \\\n        tzdata \\\n    && apt-get clean && rm -rf /var/lib/apt/lists/*;\n\nARG REPO_CHANNEL=\"stable\"\nARG REPOSITORY=\"deb https://packages.clickhouse.com/deb ${REPO_CHANNEL} main\"\nARG VERSION=22.6.1.*\nARG PACKAGES=\"clickhouse-client clickhouse-server clickhouse-common-static\"\n\n# set non-empty deb_location_url url to create a docker image\n# from debs created by CI build, for example:\n# docker build . --network host --build-arg version=\"21.4.1.6282\" --build-arg deb_location_url=\"https://clickhouse-builds.s3.yandex.net/21852/069cfbff388b3d478d1a16dc7060b48073f5d522/clickhouse_build_check/clang-11_relwithdebuginfo_none_bundled_unsplitted_disable_False_deb/\" -t filimonovq/clickhouse-server:pr21852\nARG deb_location_url=\"\"\n\n# set non-empty single_binary_location_url to create docker image\n# from a single binary url (useful for non-standard builds - with sanitizers, for arm64).\n# for example (run on aarch64 server):\n# docker build . --network host --build-arg single_binary_location_url=\"https://builds.clickhouse.com/master/aarch64/clickhouse\" -t altinity/clickhouse-server:master-testing-arm\n# note: clickhouse-odbc-bridge is not supported there.\nARG single_binary_location_url=\"\"\n\n# user/group precreated explicitly with fixed uid/gid on purpose.\n# It is especially important for rootless containers: in that case entrypoint\n# can't do chown and owners of mounted volumes should be configured externally.\n# We do that in advance at the begining of Dockerfile before any packages will be\n# installed to prevent picking those uid / gid by some unrelated software.\n# The same uid / gid (101) is used both for alpine and ubuntu.\n\nARG TARGETARCH\n\nRUN arch=${TARGETARCH:-amd64} \\\n    && if [ -n \"${deb_location_url}\" ]; then \\\n        echo \"installing from custom url with deb packages: ${deb_location_url}\" \\\n        rm -rf /tmp/clickhouse_debs \\\n        && mkdir -p /tmp/clickhouse_debs \\\n        && for package in ${PACKAGES}; do \\\n            { wget --progress=bar:force:noscroll \"${deb_location_url}/${package}_${VERSION}_${arch}.deb\" -P /tmp/clickhouse_debs || \\\n                wget --progress=bar:force:noscroll \"${deb_location_url}/${package}_${VERSION}_all.deb\" -P /tmp/clickhouse_debs ; } \\\n            || exit 1 \\\n        ; done \\\n        && dpkg -i /tmp/clickhouse_debs/*.deb ; \\\n    elif [ -n \"${single_binary_location_url}\" ]; then \\\n        echo \"installing from single binary url: ${single_binary_location_url}\" \\\n        && rm -rf /tmp/clickhouse_binary \\\n        && mkdir -p /tmp/clickhouse_binary \\\n        && wget --progress=bar:force:noscroll \"${single_binary_location_url}\" -O /tmp/clickhouse_binary/clickhouse \\\n        && chmod +x /tmp/clickhouse_binary/clickhouse \\\n        && /tmp/clickhouse_binary/clickhouse install --user \"clickhouse\" --group \"clickhouse\" ; \\\n    else \\\n        mkdir -p /etc/apt/sources.list.d \\\n        && apt-key adv --keyserver keyserver.ubuntu.com --recv 8919F6BD2B48D754 \\\n        && echo ${REPOSITORY} > /etc/apt/sources.list.d/clickhouse.list \\\n        && echo \"installing from repository: ${REPOSITORY}\" \\\n        && apt-get update \\\n        && apt-get --yes -o \"Dpkg::Options::=--force-confdef\" -o \"Dpkg::Options::=--force-confold\" upgrade \\\n        && for package in ${PACKAGES}; do \\\n            packages=\"${packages} ${package}=${VERSION}\" \\\n        ; done \\\n        && apt-get install --allow-unauthenticated --yes --no-install-recommends ${packages} || exit 1 \\\n    ; fi \\\n    && clickhouse-local -q 'SELECT * FROM system.build_options' \\\n    && rm -rf \\\n        /var/lib/apt/lists/* \\\n        /var/cache/debconf \\\n        /tmp/* \\\n    && mkdir -p /var/lib/clickhouse /var/log/clickhouse-server /etc/clickhouse-server /etc/clickhouse-client \\\n    && chmod ugo+Xrw -R /var/lib/clickhouse /var/log/clickhouse-server /etc/clickhouse-server /etc/clickhouse-client\n\n# we need to allow \"others\" access to clickhouse folder, because docker container\n# can be started with arbitrary uid (openshift usecase)\n\nRUN locale-gen en_US.UTF-8\nENV LANG en_US.UTF-8\nENV LANGUAGE en_US:en\nENV LC_ALL en_US.UTF-8\nENV TZ UTC\n\nRUN mkdir /docker-entrypoint-initdb.d\n\nCOPY docker_related_config.xml /etc/clickhouse-server/config.d/\nCOPY entrypoint.sh /entrypoint.sh\nRUN chmod +x /entrypoint.sh\n\nEXPOSE 9000 8123 9009\nVOLUME /var/lib/clickhouse\n\nENV CLICKHOUSE_CONFIG /etc/clickhouse-server/config.xml\n\nENTRYPOINT [\"/entrypoint.sh\"]\n"
}