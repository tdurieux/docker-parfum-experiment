{
  "startTime": 1674246769278,
  "endTime": 1674246773843,
  "originalSmells": [
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 67,
        "lineEnd": 67,
        "columnStart": 4,
        "columnEnd": 28
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 79,
        "lineEnd": 79,
        "columnStart": 4,
        "columnEnd": 59
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 51,
        "lineEnd": 65,
        "columnStart": 4,
        "columnEnd": 47
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 51,
        "lineEnd": 65,
        "columnStart": 4,
        "columnEnd": 47
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 92,
        "lineEnd": 92,
        "columnStart": 22,
        "columnEnd": 92
      }
    }
  ],
  "repairedSmells": [
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 51,
        "lineEnd": 65,
        "columnStart": 4,
        "columnEnd": 47
      }
    }
  ],
  "repairedDockerfile": "# rizin docker\n# ========\n#\n# Requires 400MB of free disk space\n#\n# Build docker image with:\n# $ docker build -t rizin:latest .\n# To enable rz-asm plugins based on binutils, pass '--build-arg with_ARCH_as=1' to the build command.\n# Supported ARCHs are arm32, arm64, ppc. Each ARCH should be passed in a separate '--build-arg'.\n#\n# Run the docker image:\n# $ docker images\n# $ export DOCKER_IMAGE_ID=$(docker images --format '{{.ID}}' -f 'label=rizin')\n# $ docker run -ti --cap-drop=ALL rizin:latest\n#\n# Once you quit the bash session get the container id with:\n# $ docker ps -a | grep bash\n#\n# To get into that shell again just type:\n# $ docker start -ai <containedid>\n#\n# To share those images:\n# $ docker export <containerid> | xz > container.xz\n# $ xz -d < container.xz | docker import -\n#\n#\n# If you willing to debug a program within Docker, you should run it with CAP_SYS_PTRACE:\n#\n# $ docker run -it --cap-drop=ALL --cap-add=SYS_PTRACE rizin:latest\n# $ rizin -d /bin/true\n#\n\nFROM debian:10\n\n# rz-pipe python version\nARG RZ_PIPE_PY_VERSION=master\n# rz-ghidra version\nARG RZ_GHIDRA_VERSION=dev\n\nARG with_arm32_as\nARG with_arm64_as\nARG with_ppc_as\n\nENV RZ_PIPE_PY_VERSION ${RZ_PIPE_PY_VERSION}\nENV RZ_GHIDRA_VERSION ${RZ_GHIDRA_VERSION}\n\nRUN echo -e \"Building versions:\\n\\\n\tRZ_PIPE_PY_VERSION=${RZ_PIPE_PY_VERSION}\\\n\tRZ_GHIDRA_VERSION=${RZ_GHIDRA_VERSION}\"\n\nRUN apt-get update\nRUN apt-get install -y --no-install-recommends \\\n\tcmake \\\n\tgcc \\\n\tcpp \\\n\tg++ \\\n\tgit \\\n\tmake \\\n\tpkg-config \\\n\tlibc-dev-bin libc6-dev linux-libc-dev \\\n\tpython3-pip \\\n\tpython3-setuptools \\\n\tpython3-wheel \\\n\t${with_arm64_as:+binutils-aarch64-linux-gnu} \\\n\t${with_arm32_as:+binutils-arm-linux-gnueabi} \\\n\t${with_ppc_as:+binutils-powerpc64le-linux-gnu} && rm -rf /var/lib/apt/lists/*;\n\nRUN pip3 install --no-cache-dir meson ninja\n\n# Build rizin in a volume to minimize space used by build\nCOPY . /tmp/rizin/\n\nWORKDIR /tmp/rizin\nRUN meson --prefix=/usr -Dinstall_sigdb=true /tmp/build && \\\n\tmeson compile -C /tmp/build && \\\n\tmeson install --destdir /tmp/rizin-install -C /tmp/build\n\nWORKDIR /tmp\nRUN git clone -b \"$RZ_PIPE_PY_VERSION\" https://github.com/rizinorg/rz-pipe\nRUN pip3 install --no-cache-dir --root=/tmp/rizin-install ./rz-pipe/python\n\nWORKDIR /tmp\nRUN git clone --recurse-submodules -b \"$RZ_GHIDRA_VERSION\" https://github.com/rizinorg/rz-ghidra\nWORKDIR /tmp/rz-ghidra\nRUN cmake -DCMAKE_PREFIX_PATH=/tmp/rizin-install/usr -DCMAKE_INSTALL_PREFIX=/usr -B build && cmake --build build && DESTDIR=/tmp/rizin-install cmake --build build --target install\n\nFROM debian:10\nENV RZ_ARM64_AS=${with_arm64_as:+aarch64-linux-gnu-as}\nENV RZ_ARM32_AS=${with_arm32_as:+arm-linux-gnueabi-as}\nENV RZ_PPC_AS=${with_ppc_as:+powerpc64le-linux-gnu-as}\n\nRUN useradd -m rizin\nRUN apt-get update && apt-get install -y --no-install-recommends ca-certificates git python3 && rm -rf /var/lib/apt/lists/*;\n\nUSER rizin\nWORKDIR /home/rizin\nENV HOME /home/rizin\n\nCOPY --from=0 /tmp/rizin-install/ /\n\nRUN rz-pm init && rz-pm update\n\nCMD [\"/bin/bash\"]\n"
}