{
  "startTime": 1674252955794,
  "endTime": 1674252957016,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 39,
        "lineEnd": 39,
        "columnStart": 4,
        "columnEnd": 50
      }
    },
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 53,
        "lineEnd": 53,
        "columnStart": 4,
        "columnEnd": 26
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 25,
        "lineEnd": 25,
        "columnStart": 0,
        "columnEnd": 50
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 7,
        "lineEnd": 14,
        "columnStart": 0,
        "columnEnd": 3
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 31,
        "lineEnd": 31,
        "columnStart": 0,
        "columnEnd": 24
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 40,
        "lineEnd": 40,
        "columnStart": 0,
        "columnEnd": 21
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 40,
        "lineEnd": 40,
        "columnStart": 0,
        "columnEnd": 21
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 7,
        "lineEnd": 14,
        "columnStart": 0,
        "columnEnd": 3
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 31,
        "lineEnd": 31,
        "columnStart": 0,
        "columnEnd": 24
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 40,
        "lineEnd": 40,
        "columnStart": 0,
        "columnEnd": 21
      }
    }
  ],
  "repairedSmells": [
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 40,
        "lineEnd": 40,
        "columnStart": 1,
        "columnEnd": 46
      }
    }
  ],
  "repairedDockerfile": "FROM ubuntu:20.04 as base\n\n# make clear that it is a noninteractive session\nRUN echo 'debconf debconf/frontend select Noninteractive' | debconf-set-selections\n\nRUN apt clean && \\\napt update && \\\n apt install --no-install-recommends -y \\\nsoftware-properties-common \\\nbuild-essential \\\nwget \\\npython3-pip \\\nlocales \\\ncurl \\\ngit && rm -rf /var/lib/apt/lists/*;\n\n# # TODO: see if any locale issues arise\n# # RUN sed -i -e 's/# en_US.UTF-8 UTF-8/en_US.UTF-8 UTF-8/' /etc/locale.gen && \\\n# #     locale-gen\n# # ENV LANG en_US.UTF-8 \n# # ENV LANGUAGE en_US:en \n# # ENV LC_ALL en_US.UTF-8 \n\nRUN cd /tmp && \\\nwget https://dl.google.com/go/go1.14.2.linux-amd64.tar.gz && \\\ntar -C /usr/local -xzf go1.14.2.linux-amd64.tar.gz && rm go1.14.2.linux-amd64.tar.gz\nENV PATH /usr/local/go/bin:${PATH}\n\n# Install Python3.7 from ppa (for fast speed)\nRUN add-apt-repository ppa:deadsnakes/ppa && \\\napt update && \\\n apt install --no-install-recommends -y python3.7 && rm -rf /var/lib/apt/lists/*;\n\n# copy over all files to /home/source/\nWORKDIR /home/source/\nCOPY . /home/source/\n\n# install python + dependencies + nodejs\n# apt install -y python3-tk && \\\nRUN curl -f -sL https://deb.nodesource.com/setup_10.x | bash - && \\\n apt install --no-install-recommends -y nodejs && rm -rf /var/lib/apt/lists/*;\n\nRUN python3.7 -m pip install --upgrade pip numpy pandas matplotlib scipy scikit-learn\n\n# python3.7 -m pip install tensorflow\n\n# TODO: think about how to run terminal-server, probably multiple terminal-servers with parameters (one for each workspace)\n# create /home/run/ directory to run terminal nodejs project from\nRUN mkdir /home/run/\nCOPY ./terminal-server/ /home/run/terminal-server/\n\n# install required NPM packages for term.js\nWORKDIR /home/run/terminal-server/\nRUN npm install --no-cache && npm cache clean --force;\n\n# create work directory\nRUN mkdir /home/user/\n\n# set working directory to source to install go dependencies\nWORKDIR /home/source/\n\nRUN go get -d -v ./...\n\n# build manager.go once to speed up consecutive go builds\nWORKDIR /home/source/proxy/\nRUN go build manager.go\nRUN rm ./manager\n\n# expose ports\nEXPOSE 8080\n\nWORKDIR /home/source/proxy/\n\nCMD [\"bash\",\"run-manager-proxy.sh\"]\n"
}