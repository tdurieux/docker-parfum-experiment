{
  "startTime": 1674220403773,
  "endTime": 1674220405053,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 109,
        "lineEnd": 109,
        "columnStart": 4,
        "columnEnd": 68
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 110,
        "lineEnd": 110,
        "columnStart": 65,
        "columnEnd": 114
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 143,
        "lineEnd": 143,
        "columnStart": 4,
        "columnEnd": 80
      }
    },
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 152,
        "lineEnd": 153,
        "columnStart": 8,
        "columnEnd": 9
      }
    },
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 155,
        "lineEnd": 156,
        "columnStart": 8,
        "columnEnd": 9
      }
    },
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 158,
        "lineEnd": 159,
        "columnStart": 8,
        "columnEnd": 9
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 62,
        "lineEnd": 62,
        "columnStart": 4,
        "columnEnd": 33
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 71,
        "lineEnd": 71,
        "columnStart": 4,
        "columnEnd": 48
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 83,
        "lineEnd": 83,
        "columnStart": 4,
        "columnEnd": 62
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 62,
        "lineEnd": 62,
        "columnStart": 4,
        "columnEnd": 33
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 71,
        "lineEnd": 71,
        "columnStart": 4,
        "columnEnd": 48
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 62,
        "lineEnd": 62,
        "columnStart": 4,
        "columnEnd": 33
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 71,
        "lineEnd": 71,
        "columnStart": 4,
        "columnEnd": 48
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 83,
        "lineEnd": 83,
        "columnStart": 4,
        "columnEnd": 62
      }
    }
  ],
  "repairedSmells": [
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 62,
        "lineEnd": 62,
        "columnStart": 4,
        "columnEnd": 57
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 71,
        "lineEnd": 71,
        "columnStart": 4,
        "columnEnd": 72
      }
    }
  ],
  "repairedDockerfile": "ARG PHP_VERSION\nFROM php:${PHP_VERSION}-fpm\n\n\n# Set Environment Variables\nENV DEBIAN_FRONTEND noninteractive\n\n#\n#--------------------------------------------------------------------------\n# Software's Installation\n#--------------------------------------------------------------------------\n#\n# Installing tools and PHP extentions using \"apt\", \"docker-php\", \"pecl\",\n#\n\nRUN docker-php-ext-install bcmath tokenizer mysqli exif\n\n\n\n# Install \"curl\", \"libmemcached-dev\", \"libpq-dev\", \"libjpeg-dev\",\n#         \"libpng-dev\", \"libfreetype6-dev\", \"libssl-dev\", \"libmcrypt-dev\",\nRUN set -eux; \\\n    apt-get update; \\\n    apt-get upgrade -y; \\\n    apt-get install -y --no-install-recommends \\\n            curl \\\n            libmemcached-dev \\\n            libz-dev \\\n            libpq-dev \\\n            libjpeg-dev \\\n            libpng-dev \\\n            libfreetype6-dev \\\n            libssl-dev \\\n            libmcrypt-dev \\\n            jpegoptim optipng pngquant gifsicle \\\n            supervisor \\\n            postgresql-client \\\n            xvfb libfontconfig wkhtmltopdf \\\n            git \\\n            cron \\\n            libonig-dev; \\\n    rm -rf /var/lib/apt/lists/*\n\nRUN set -eux; \\\n    # Install the PHP pdo_mysql extention\n    docker-php-ext-install pdo_mysql; \\\n    # Install the PHP pdo_pgsql extention\n    docker-php-ext-install pdo_pgsql; \\\n    # Install the PHP gd library\n    docker-php-ext-configure gd \\\n            --prefix=/usr \\\n            --with-jpeg \\\n            --with-freetype; \\\n    docker-php-ext-install gd; \\\n    php -r 'var_dump(gd_info());'\n\nRUN apt-get update;\n\n###########################################################################\n# ZipArchive:\n###########################################################################\n\nRUN apt-get install --no-install-recommends libzip-dev -y && \\\n    docker-php-ext-configure zip && \\\n    docker-php-ext-install zip; rm -rf /var/lib/apt/lists/*;\n\n###########################################################################\n# Human Language and Character Encoding Support:\n###########################################################################\n\n\nRUN apt-get install --no-install-recommends -y zlib1g-dev libicu-dev g++ && \\\n    docker-php-ext-configure intl && \\\n    docker-php-ext-install intl; rm -rf /var/lib/apt/lists/*;\n\n\n###########################################################################\n# ImageMagick:\n###########################################################################\n\nUSER root\n\nRUN apt update && \\\n    apt install --no-install-recommends -y imagemagick libmagickwand-dev --fix-missing && \\\n    pecl install imagick && \\\n    docker-php-ext-enable imagick; rm -rf /var/lib/apt/lists/*;\n\n###########################################################################\n# Caddy:\n###########################################################################\n\nARG CADDY_VERSION=\"0.10.11\"\n\nRUN curl --silent --show-error --fail --location \\\n      --header \"Accept: application/tar+gzip, application/x-gzip, application/octet-stream\" -o - \\\n      \"https://github.com/mholt/caddy/releases/download/v${CADDY_VERSION}/caddy_v${CADDY_VERSION}_linux_amd64.tar.gz\" \\\n    | tar --no-same-owner -C /usr/bin -xz \\\n     && chmod 0755 /usr/bin/caddy \\\n     && /usr/bin/caddy -version\n\n\n\n#\n############################################################################\n## Composer\n############################################################################\n\nUSER root\n\nRUN curl -f -sS https://getcomposer.org/installer -o composer-setup.php\nRUN php -r \"if (hash_file('SHA384', 'composer-setup.php') === '$( curl -f -sS https://composer.github.io/installer.sig)') { echo 'Installer verified'; } else { echo 'Installer corrupt'; unlink('composer-setup.php'); } echo PHP_EOL;\"\nRUN php composer-setup.php --install-dir=/usr/local/bin --filename=composer\n\nARG COMPOSER_REPO_PACKAGIST\nENV COMPOSER_REPO_PACKAGIST ${COMPOSER_REPO_PACKAGIST}\n\n# Export composer vendor path\nRUN echo \"\" >> ~/.bashrc && \\\n    echo 'export PATH=\"~/.composer/vendor/bin:$PATH\"' >> ~/.bashrc\n# Nova CMS credentials\nARG NOVA_USERNAME\nARG NOVA_PASSWORD\nRUN composer global config http-basic.nova.laravel.com ${NOVA_USERNAME} ${NOVA_PASSWORD}\n\n\n\n###########################################################################\n# Node / NVM:\n###########################################################################\n\n# Check if NVM needs to be installed\nARG NODE_VERSION=12\nENV NODE_VERSION ${NODE_VERSION}\nARG INSTALL_NODE=true\nARG INSTALL_NPM_GULP=false\nARG INSTALL_NPM_BOWER=false\nARG INSTALL_NPM_VUE_CLI=false\nARG NPM_REGISTRY\nENV NPM_REGISTRY ${NPM_REGISTRY}\nENV NVM_DIR /home/laradock/.nvm\n\nRUN if [ ${INSTALL_NODE} = true ]; then \\\n    curl -f -o- https://raw.githubusercontent.com/creationix/nvm/v0.33.8/install.sh | bash \\\n        && . $NVM_DIR/nvm.sh \\\n        && nvm install ${NODE_VERSION} \\\n        && nvm use ${NODE_VERSION} \\\n        && nvm alias ${NODE_VERSION} \\\n        && if [ ${NPM_REGISTRY} ]; then \\\n        npm config set registry ${NPM_REGISTRY} \\\n        ;fi \\\n        && if [ ${INSTALL_NPM_GULP} = true ]; then \\\n        npm install -g gulp \\\n        ; npm cache clean --force; fi \\\n        && if [ ${INSTALL_NPM_BOWER} = true ]; then \\\n        npm install -g bower \\\n        ; npm cache clean --force; fi \\\n        && if [ ${INSTALL_NPM_VUE_CLI} = true ]; then \\\n        npm install -g @vue/cli \\\n        ; npm cache clean --force; fi \\\n        && ln -s `npm bin --global` /home/laradock/.node-bin \\\n; fi\n\n# Wouldn't execute when added to the RUN statement in the above block\n# Source NVM when loading bash since ~/.profile isn't loaded on non-login shell\nRUN if [ ${INSTALL_NODE} = true ]; then \\\n    echo \"\" >> ~/.bashrc && \\\n    echo 'export NVM_DIR=\"$HOME/.nvm\"' >> ~/.bashrc && \\\n    echo '[ -s \"$NVM_DIR/nvm.sh\" ] && . \"$NVM_DIR/nvm.sh\"  # This loads nvm' >> ~/.bashrc \\\n;fi\n\n# Add NVM binaries to root's .bashrc\nUSER root\n\nRUN if [ ${INSTALL_NODE} = true ]; then \\\n    echo \"\" >> ~/.bashrc && \\\n    echo 'export NVM_DIR=\"/home/laradock/.nvm\"' >> ~/.bashrc && \\\n    echo '[ -s \"$NVM_DIR/nvm.sh\" ] && . \"$NVM_DIR/nvm.sh\"  # This loads nvm' >> ~/.bashrc \\\n;fi\n\n# Add PATH for node\nENV PATH $PATH:/home/laradock/.node-bin\n\nRUN if [ ${NPM_REGISTRY} ]; then \\\n    . ~/.bashrc && npm config set registry ${NPM_REGISTRY} \\\n;fi\n\n\n#\n## You need to install:\n## configs for php, caddy, supervisor\n## copy projects files inside image\n## composer install (not as easy as it seems\n## cache routes, configs, create storage link\n## run endpoint\n## expose ports\n## So, you need flagstudio/laraflag:latest on gitlab resitry. Ask Misha for more info.\n"
}