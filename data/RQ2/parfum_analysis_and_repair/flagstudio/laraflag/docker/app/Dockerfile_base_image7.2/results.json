{
  "startTime": 1674252271839,
  "endTime": 1674252272918,
  "originalSmells": [
    {
      "rule": "apkAddUseNoCache",
      "position": {
        "lineStart": 132,
        "lineEnd": 132,
        "columnStart": 4,
        "columnEnd": 20
      }
    },
    {
      "rule": "apkAddUseNoCache",
      "position": {
        "lineStart": 151,
        "lineEnd": 151,
        "columnStart": 4,
        "columnEnd": 41
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "ARG PHP_VERSION\nFROM php:${PHP_VERSION}-fpm-alpine\n\n#\n#--------------------------------------------------------------------------\n# Some ebala for PHP\n#--------------------------------------------------------------------------\n#\n\n\nRUN apk --update --no-cache add wget \\\n#  apt-utils \\\n  curl \\\n  git \\\n  build-base \\\n  libmemcached-dev \\\n  libmcrypt-dev \\\n  libxml2-dev \\\n  zlib-dev \\\n  autoconf \\\n  cyrus-sasl-dev \\\n  libgsasl-dev \\\n  supervisor \\\n  libzip-dev \\\n  icu-dev \\\n#  zlib1g-dev \\\n#  libicu-dev \\\n  g++ \\\n#  libmagickwand-dev \\\n  imagemagick \\\n  # wkhtmltopdf\n  xvfb \\\n  # Additionnal dependencies for better rendering\n  ttf-freefont \\\n  fontconfig \\\n  dbus \\\n  bash \\\n  libpng \\\n  libpng-dev \\\n  libjpeg-turbo-dev \\\n  libwebp-dev zlib-dev \\\n  freetype-dev \\\n\n  libxpm-dev && \\\n\n\n# For wkhtmltopdf\n    apk add qt5-qtbase-dev \\\n            wkhtmltopdf \\\n            --no-cache \\\n            --repository http://dl-3.alpinelinux.org/alpine/edge/testing/ \\\n            --allow-untrusted \\\n    && \\\n\n    # Wrapper for xvfb\n    mv /usr/bin/wkhtmltopdf /usr/bin/wkhtmltopdf-origin && \\\n    echo $'#!/usr/bin/env sh\\n\\\nXvfb :0 -screen 0 1024x768x24 -ac +extension GLX +render -noreset & \\n\\\nDISPLAY=:0.0 wkhtmltopdf-origin $@ \\n\\\nkillall Xvfb\\\n' > /usr/bin/wkhtmltopdf && \\\n    chmod +x /usr/bin/wkhtmltopdf && \\\n\n    apk del libpng-dev libjpeg-turbo-dev libwebp-dev zlib-dev libxpm-dev\n\n# For Imagick\nRUN set -ex \\\n    && apk add --no-cache --virtual .phpize-deps $PHPIZE_DEPS imagemagick-dev libtool \\\n    && export CFLAGS=\"$PHP_CFLAGS\" CPPFLAGS=\"$PHP_CPPFLAGS\" LDFLAGS=\"$PHP_LDFLAGS\" \\\n    && pecl install imagick-3.4.3 \\\n    && docker-php-ext-enable imagick \\\n    && apk add --no-cache --virtual .imagick-runtime-deps imagemagick \\\n    && apk del .phpize-deps\n\nRUN docker-php-ext-install mysqli mbstring pdo pdo_mysql tokenizer xml pcntl bcmath intl zip exif gd && \\\n    docker-php-ext-configure zip --with-libzip\n\n# GD library\n\nRUN apk update \\\n    && apk upgrade \\\n    && apk add --no-cache \\\n        freetype \\\n        libpng \\\n        libjpeg-turbo \\\n        freetype-dev \\\n        libpng-dev \\\n        jpeg-dev \\\n        libjpeg \\\n        libjpeg-turbo-dev\n\nRUN docker-php-ext-configure gd \\\n        --with-freetype-dir=/usr/lib/ \\\n        --with-png-dir=/usr/lib/ \\\n        --with-jpeg-dir=/usr/lib/ \\\n        --with-gd\n\nRUN NUMPROC=$(grep -c ^processor /proc/cpuinfo 2>/dev/null || 1) \\\n    && docker-php-ext-install -j${NUMPROC} gd\n\n# Memcached\n\nRUN pecl channel-update pecl.php.net && \\\n    pecl install memcached mcrypt-1.0.1 && \\\n    docker-php-ext-enable memcached\n\n#\n#--------------------------------------------------------------------------\n# Some govno for Caddy web server\n#--------------------------------------------------------------------------\n#\nARG VERSION=\"0.10.11\"\n\nRUN apk update && apk upgrade \\\n  && apk add --no-cache openssh-client git \\\n  && apk add --no-cache --virtual .build-dependencies tar curl\n\nRUN curl --silent --show-error --fail --location \\\n      --header \"Accept: application/tar+gzip, application/x-gzip, application/octet-stream\" -o - \\\n      \"https://github.com/mholt/caddy/releases/download/v${VERSION}/caddy_v${VERSION}_linux_amd64.tar.gz\" \\\n    | tar --no-same-owner -C /usr/bin -xz \\\n && chmod 0755 /usr/bin/caddy \\\n && /usr/bin/caddy -version \\\n && apk del .build-dependencies\n\n\n\n###########################################################################\n# Composer\n###########################################################################\n\nUSER root\nRUN apk add --no-cache composer\n\nARG COMPOSER_REPO_PACKAGIST\nENV COMPOSER_REPO_PACKAGIST ${COMPOSER_REPO_PACKAGIST}\n\n# Export composer vendor path\nRUN echo \"\" >> ~/.bashrc && \\\n    echo 'export PATH=\"~/.composer/vendor/bin:$PATH\"' >> ~/.bashrc\nRUN composer global require hirak/prestissimo\n# Nova CMS credentials\nARG NOVA_USERNAME\nARG NOVA_PASSWORD\nRUN composer global config http-basic.nova.laravel.com ${NOVA_USERNAME} ${NOVA_PASSWORD}\n\n\n###########################################################################\n# NPM\n###########################################################################\n\nRUN apk add --no-cache python make automake autoconf\nRUN apk add  --no-cache --repository http://dl-cdn.alpinelinux.org/alpine/v3.7/main/ nodejs=8.9.3-r1\n\n\n# You need to install:\n# configs for php, caddy, supervisor\n# copy projects files inside image\n# composer install (not as easy as it seems\n# cache routes, configs, create storage link\n# run endpoint\n# expose ports\n# So, you need flagstudio/laraflag:latest on gitlab resitry. Ask Misha for more info.\n"
}