diff --git a/Users/tdurieux/git/dinghy-experiment/data/evaluation/dockerfiles/chapuni/llvm-project/libcxx/utils/ci/Dockerfile b/Users/tdurieux/git/dinghy-experiment/data/evaluation/dockerfile_repair_results/chapuni/llvm-project/libcxx/utils/ci/Dockerfile/repaired.Dockerfile
index 63f7472..a541790 100644
--- a/Users/tdurieux/git/dinghy-experiment/data/evaluation/dockerfiles/chapuni/llvm-project/libcxx/utils/ci/Dockerfile
+++ b/Users/tdurieux/git/dinghy-experiment/data/evaluation/dockerfile_repair_results/chapuni/llvm-project/libcxx/utils/ci/Dockerfile/repaired.Dockerfile
@@ -42,14 +42,14 @@ FROM ubuntu:bionic
 # Make sure apt-get doesn't try to prompt for stuff like our time zone, etc.
 ENV DEBIAN_FRONTEND=noninteractive
 
-RUN apt-get update && apt-get install -y bash curl
+RUN apt-get update && apt-get install --no-install-recommends -y bash curl && rm -rf /var/lib/apt/lists/*;
 
 # Install various tools used by the build or the test suite
-RUN apt-get update && apt-get install -y ninja-build python3 python3-sphinx python3-distutils git gdb
-RUN apt-get update && apt-get install -y libc6-dev-i386 # Required to cross-compile to 32 bits
+RUN apt-get update && apt-get install --no-install-recommends -y ninja-build python3 python3-sphinx python3-distutils git gdb && rm -rf /var/lib/apt/lists/*;
+RUN apt-get update && apt-get install --no-install-recommends -y libc6-dev-i386 && rm -rf /var/lib/apt/lists/*;
 
 # Install the most recently released LLVM
-RUN apt-get update && apt-get install -y lsb-release wget software-properties-common
+RUN apt-get update && apt-get install --no-install-recommends -y lsb-release wget software-properties-common && rm -rf /var/lib/apt/lists/*;
 RUN wget https://apt.llvm.org/llvm.sh -O /tmp/llvm.sh
 RUN bash /tmp/llvm.sh
 RUN LLVM_VERSION=$(find /usr/bin -regex '^.+/clang-[0-9.]+$') && LLVM_VERSION=${LLVM_VERSION#*clang-} && echo "LLVM_VERSION=$LLVM_VERSION" > /tmp/env.sh
@@ -63,13 +63,13 @@ RUN . /tmp/env.sh && ln -s /usr/bin/clang++-${LLVM_TOT_VERSION} /usr/bin/clang++
 RUN . /tmp/env.sh && ln -s /usr/bin/clang-${LLVM_TOT_VERSION} /usr/bin/clang-tot && [ -e $(readlink /usr/bin/clang-tot) ]
 
 # Install clang-format
-RUN . /tmp/env.sh && apt-get install -y clang-format-$LLVM_VERSION
+RUN . /tmp/env.sh && apt-get install --no-install-recommends -y clang-format-$LLVM_VERSION && rm -rf /var/lib/apt/lists/*;
 RUN ln -s $(find /usr/bin -regex '^.+/clang-format-[0-9.]+$') /usr/bin/clang-format && [ -e $(readlink /usr/bin/clang-format) ]
 RUN ln -s $(find /usr/bin -regex '^.+/git-clang-format-[0-9.]+$') /usr/bin/git-clang-format && [ -e $(readlink /usr/bin/git-clang-format) ]
 
 # Install a recent GCC
 RUN add-apt-repository ppa:ubuntu-toolchain-r/test
-RUN apt-get update && apt install -y gcc-10 g++-10
+RUN apt-get update && apt install --no-install-recommends -y gcc-10 g++-10 && rm -rf /var/lib/apt/lists/*;
 RUN ln -f -s /usr/bin/g++-10 /usr/bin/g++ && [ -e $(readlink /usr/bin/g++) ]
 RUN ln -f -s /usr/bin/gcc-10 /usr/bin/gcc && [ -e $(readlink /usr/bin/gcc) ]
 
@@ -80,7 +80,7 @@ RUN rm /tmp/install-cmake.sh
 
 # Change the user to a non-root user, since some of the libc++ tests
 # (e.g. filesystem) require running as non-root. Also setup passwordless sudo.
-RUN apt-get update && apt-get install -y sudo
+RUN apt-get update && apt-get install --no-install-recommends -y sudo && rm -rf /var/lib/apt/lists/*;
 RUN echo "ALL ALL = (ALL) NOPASSWD: ALL" >> /etc/sudoers
 RUN useradd --create-home libcxx-builder
 USER libcxx-builder
@@ -88,7 +88,7 @@ WORKDIR /home/libcxx-builder
 
 # Install the Buildkite agent and dependencies. This must be done as non-root
 # for the Buildkite agent to be installed in a path where we can find it.
-RUN bash -c "$(curl -sL https://raw.githubusercontent.com/buildkite/agent/master/install.sh)"
+RUN bash -c "$( curl -f -sL https://raw.githubusercontent.com/buildkite/agent/master/install.sh)" -f
 ENV PATH="${PATH}:/home/libcxx-builder/.buildkite-agent/bin"
 
 # By default, start the Buildkite agent (this requires a token).