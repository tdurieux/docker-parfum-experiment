{
  "startTime": 1674249629072,
  "endTime": 1674249630335,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 36,
        "lineEnd": 36,
        "columnStart": 4,
        "columnEnd": 77
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 13,
        "lineEnd": 13,
        "columnStart": 4,
        "columnEnd": 42
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 52,
        "lineEnd": 52,
        "columnStart": 11,
        "columnEnd": 37
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 9,
        "lineEnd": 9,
        "columnStart": 4,
        "columnEnd": 66
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 9,
        "lineEnd": 9,
        "columnStart": 4,
        "columnEnd": 66
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 50,
        "lineEnd": 51,
        "columnStart": 29,
        "columnEnd": 51
      }
    }
  ],
  "repairedSmells": [
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 9,
        "lineEnd": 9,
        "columnStart": 4,
        "columnEnd": 66
      }
    }
  ],
  "repairedDockerfile": "# multi stage to build tube archivist\n# first stage to build python wheel, copy into final image\n\n\n# First stage to build python wheel\nFROM python:3.10.5-slim-bullseye AS builder\nARG TARGETPLATFORM\n\nRUN apt-get update\nRUN apt-get install -y --no-install-recommends build-essential gcc && rm -rf /var/lib/apt/lists/*;\n\n# install requirements\nCOPY ./tubearchivist/requirements.txt /requirements.txt\nRUN pip install --no-cache-dir --user -r requirements.txt\n\n# build final image\nFROM python:3.10.5-slim-bullseye as tubearchivist\n\nARG TARGETPLATFORM\nARG INSTALL_DEBUG\n\nENV PYTHONUNBUFFERED 1\n\n# copy build requirements\nCOPY --from=builder /root/.local /root/.local\nENV PATH=/root/.local/bin:$PATH\n\n# install distro packages needed\nRUN apt-get clean && apt-get -y update && apt-get -y install --no-install-recommends \\\n    nginx \\\n    atomicparsley \\\n    curl \\\n    xz-utils && rm -rf /var/lib/apt/lists/*\n\n# get newest patched ffmpeg and ffprobe builds for amd64 fall back to repo ffmpeg for arm64\nRUN if [ \"$TARGETPLATFORM\" = \"linux/amd64\" ] ; then \\\n    curl -f -s https://api.github.com/repos/yt-dlp/FFmpeg-Builds/releases/latest \\\n        | grep browser_download_url \\\n        | grep \".*master.*linux64.*tar.xz\" \\\n        | cut -d '\"' -f 4 \\\n        | xargs curl -L --output ffmpeg.tar.xz && \\\n        tar -xf ffmpeg.tar.xz --strip-components=2 --no-anchored -C /usr/bin/ \"ffmpeg\" && \\\n        tar -xf ffmpeg.tar.xz --strip-components=2 --no-anchored -C /usr/bin/ \"ffprobe\" && \\\n        rm ffmpeg.tar.xz \\\n    ; elif [ \"$TARGETPLATFORM\" = \"linux/arm64\" ] ; then \\\n        apt-get -y update && apt-get -y install --no-install-recommends ffmpeg && rm -rf /var/lib/apt/lists/* \\\n    ; fi\n\n# install debug tools for testing environment\nRUN if [ \"$INSTALL_DEBUG\" ] ; then \\\n        apt-get -y update && apt-get -y install --no-install-recommends \\\n        vim htop bmon net-tools iputils-ping procps \\\n        && pip install --no-cache-dir --user ipython \\\n    ; rm -rf /var/lib/apt/lists/*; fi\n\n# make folders\nRUN mkdir /cache\nRUN mkdir /youtube\nRUN mkdir /app\n\n# copy config files\nCOPY docker_assets/nginx.conf /etc/nginx/sites-available/default\n\n# copy application into container\nCOPY ./tubearchivist /app\nCOPY ./docker_assets/run.sh /app\nCOPY ./docker_assets/uwsgi.ini /app\n\n# volumes\nVOLUME /cache\nVOLUME /youtube\n\n# start\nWORKDIR /app\nEXPOSE 8000\n\nRUN chmod +x ./run.sh\n\nCMD [\"./run.sh\"]\n"
}