{
  "startTime": 1674256071881,
  "endTime": 1674256072678,
  "originalSmells": [
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 34,
        "lineEnd": 34,
        "columnStart": 4,
        "columnEnd": 40
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 56,
        "lineEnd": 56,
        "columnStart": 4,
        "columnEnd": 46
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 23,
        "lineEnd": 31,
        "columnStart": 22,
        "columnEnd": 4
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM ubuntu:focal as app\nMAINTAINER sre@edx.org\n\n\n# Packages installed:\n\n# language-pack-en locales; ubuntu locale support so that system utilities have a consistent\n# language and time zone.\n\n# python; ubuntu doesnt ship with python, so this is the python we will use to run the application\n\n# python3-pip; install pip to install application requirements.txt files\n\n# libmysqlclient-dev; to install header files needed to use native C implementation for\n# MySQL-python for performance gains.\n\n# libssl-dev; # mysqlclient wont install without this.\n\n# python3-dev; to install header files for python extensions; much wheel-building depends on this\n\n# gcc; for compiling python extensions distributed with python packages like mysql-client\n\n# If you add a package here please include a comment above describing what it is used for\nRUN apt-get update && apt-get -qy install --no-install-recommends \\\n language-pack-en \\\n locales \\\n python3.8 \\\n python3-pip \\\n libmysqlclient-dev \\\n libssl-dev \\\n python3-dev \\\n gcc && rm -rf /var/lib/apt/lists/*;\n\n\nRUN pip install --no-cache-dir --upgrade pip setuptools\n# delete apt package lists because we do not need them inflating our image\nRUN rm -rf /var/lib/apt/lists/*\n\nRUN ln -s /usr/bin/python3 /usr/bin/python\n\nRUN locale-gen en_US.UTF-8\nENV LANG en_US.UTF-8\nENV LANGUAGE en_US:en\nENV LC_ALL en_US.UTF-8\nENV DJANGO_SETTINGS_MODULE {{cookiecutter.project_name}}.settings.production\n\nEXPOSE {{cookiecutter.port}}\nRUN useradd -m --shell /bin/false app\n\nWORKDIR /edx/app/{{cookiecutter.repo_name}}\n\n# Copy the requirements explicitly even though we copy everything below\n# this prevents the image cache from busting unless the dependencies have changed.\nCOPY requirements/production.txt /edx/app/{{cookiecutter.repo_name}}/requirements/production.txt\n\n# Dependencies are installed as root so they cannot be modified by the application user.\nRUN pip install --no-cache-dir -r requirements/production.txt\n\nRUN mkdir -p /edx/var/log\n\n# Code is owned by root so it cannot be modified by the application user.\n# So we copy it before changing users.\nUSER app\n\n# Gunicorn 19 does not log to stdout or stderr by default. Once we are past gunicorn 19, the logging to STDOUT need not be specified.\nCMD gunicorn --workers=2 --name {{cookiecutter.repo_name}} -c /edx/app/{{cookiecutter.repo_name}}/{{cookiecutter.project_name}}/docker_gunicorn_configuration.py --log-file - --max-requests=1000 {{cookiecutter.project_name}}.wsgi:application\n\n# This line is after the requirements so that changes to the code will not\n# bust the image cache\nCOPY . /edx/app/{{cookiecutter.repo_name}}\n"
}