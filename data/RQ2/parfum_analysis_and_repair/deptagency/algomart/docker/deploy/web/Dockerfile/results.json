{
  "startTime": 1674250222663,
  "endTime": 1674250223728,
  "originalSmells": [
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 43,
        "lineEnd": 43,
        "columnStart": 2,
        "columnEnd": 61
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 4,
        "lineEnd": 4,
        "columnStart": 18,
        "columnEnd": 40
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 4,
        "lineEnd": 4,
        "columnStart": 18,
        "columnEnd": 40
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# Install dependencies only when needed\nFROM node:16-bullseye AS deps\n# Check https://github.com/nodejs/docker-node/tree/b4117f9333da4138b03a546ec926ef50a31506c3#nodealpine to understand why libc6-compat might be needed.\n# RUN apk add --no-cache libc6-compat python2 make g++\nRUN apt update && apt install --no-install-recommends -y python2 && rm -rf /var/lib/apt/lists/*;\nRUN npm config set python python2 && \\\n  npm config set legacy-peer-deps true\nWORKDIR /app\nCOPY package.json package-lock.json ./\nRUN npm ci\n\n\n# Rebuild the source code only when needed\nFROM node:16-bullseye AS builder\nWORKDIR /app\nCOPY --from=deps /app/node_modules ./node_modules\nCOPY ./package.json ./package-lock.json ./workspace.json ./tsconfig.base.json ./nx.json ./babel.config.json ./\nCOPY ./libs ./libs\nCOPY ./apps/cms/project.json ./apps/cms/project.json\nCOPY ./apps/api/project.json ./apps/api/project.json\nCOPY ./apps/scribe/project.json ./apps/scribe/project.json\nCOPY ./apps/web-e2e/project.json ./apps/web-e2e/project.json\nCOPY ./apps/web ./apps/web\nENV NEXT_TELEMETRY_DISABLED 1\nRUN npx nx run web:build:production\n\n\n# Production image, copy all the files and run next\nFROM node:16-bullseye-slim AS runner\nWORKDIR /app\n\nENV NODE_ENV production\nENV NEXT_TELEMETRY_DISABLED 1\n\nRUN addgroup --system --gid 1001 nodejs && \\\n  adduser --system --uid 1001 algomart && \\\n  npm config set legacy-peer-deps true\n\nCOPY --from=builder /app/node_modules/ ./node_modules/\nCOPY --from=builder --chown=algomart:nodejs /app/dist/apps/web/ ./\n\nRUN npm install --no-package-lock --production && \\\n  npm cache clear --force && \\\n  npm install --no-package-lock --verbose --unsafe-perm sharp && npm cache clean --force;\n\nCOPY ./docker/deploy/web/run.sh .\n\nUSER algomart\n\nCMD [\"./run.sh\"]\n"
}