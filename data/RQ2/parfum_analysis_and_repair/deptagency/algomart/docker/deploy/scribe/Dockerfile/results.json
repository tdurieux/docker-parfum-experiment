{
  "startTime": 1674255940275,
  "endTime": 1674255941069,
  "originalSmells": [
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 42,
        "lineEnd": 42,
        "columnStart": 2,
        "columnEnd": 50
      }
    },
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 43,
        "lineEnd": 43,
        "columnStart": 2,
        "columnEnd": 58
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 5,
        "lineEnd": 5,
        "columnStart": 18,
        "columnEnd": 40
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 5,
        "lineEnd": 5,
        "columnStart": 18,
        "columnEnd": 40
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# Install dependencies only when needed\nFROM node:16-bullseye AS deps\n# Check https://github.com/nodejs/docker-node/tree/b4117f9333da4138b03a546ec926ef50a31506c3#nodealpine to understand why libc6-compat might be needed.\n# RUN apk add --no-cache libc6-compat python2 make g++\n# RUN npm config set python python2\nRUN apt update && apt install --no-install-recommends -y python2 && rm -rf /var/lib/apt/lists/*;\nRUN npm config set python python2 && \\\n  npm config set legacy-peer-deps true\nWORKDIR /app\nCOPY package.json package-lock.json ./\nRUN npm ci\n\n\n# Rebuild the source code only when needed\nFROM node:16-bullseye AS builder\nWORKDIR /app\nCOPY --from=deps /app/node_modules ./node_modules\nCOPY ./package.json ./package-lock.json ./workspace.json ./tsconfig.base.json ./nx.json ./babel.config.json ./\nCOPY ./libs ./libs\nCOPY ./apps/cms/project.json ./apps/cms/project.json\nCOPY ./apps/api/project.json ./apps/api/project.json\nCOPY ./apps/web/project.json ./apps/web/project.json\nCOPY ./apps/web-e2e/project.json ./apps/web-e2e/project.json\nCOPY ./apps/scribe ./apps/scribe\nRUN npx nx run scribe:build:production\n\n\n# Production image, copy all the files and run scribe\nFROM node:16-bullseye-slim AS runner\nWORKDIR /app\n\nENV NODE_ENV production\n\nRUN addgroup --system --gid 1001 nodejs && \\\n  adduser --system --uid 1001 algomart && \\\n  npm config set legacy-peer-deps true\n\n# Copy it all... unable to copy just part of the files as we'll need \"everything\" to apply the migrations\nCOPY --from=builder --chown=algomart:nodejs /app/ .\n\nWORKDIR /app/dist/apps/scribe\nRUN npm set-script prepare \"\" && \\\n  npm install --no-package-lock --legacy-peer-deps && \\\n  npm install tslib@2 pino-pretty@7 pg@8 --no-package-lock && npm cache clean --force;\n\nCOPY ./docker/deploy/scribe/run.sh .\n\nUSER algomart\n\nCMD [\"./run.sh\"]\n"
}