{
  "startTime": 1674252492750,
  "endTime": 1674252494168,
  "originalSmells": [
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 3,
        "lineEnd": 3,
        "columnStart": 22,
        "columnEnd": 96
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 3,
        "lineEnd": 3,
        "columnStart": 22,
        "columnEnd": 96
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM docker.io/library/rust:1.49@sha256:a50165ea96983c21832578afb1c8c028674c965bc1ed43b607871b1f362e06a5 AS build\n\nRUN apt-get update && apt-get install --no-install-recommends -y libssl-dev libudev-dev pkg-config zlib1g-dev llvm clang && rm -rf /var/lib/apt/lists/*;\nRUN rustup component add rustfmt\nRUN rustup default nightly-2022-01-02\n\nWORKDIR /usr/src/bridge\n\n# Support additional root CAs\nCOPY devnet_setup.sh cert.pem* /certs/\n# Debian\nRUN if [ -e /certs/cert.pem ]; then cp /certs/cert.pem /etc/ssl/certs/ca-certificates.crt; fi\n\nRUN cargo install wasm-pack --vers 0.9.1\n\nENV RUST_LOG=\"solana_runtime::system_instruction_processor=trace,solana_runtime::message_processor=trace,solana_bpf_loader=debug,solana_rbpf=debug\"\nENV EMITTER_ADDRESS=\"11111111111111111111111111111115\"\nENV BRIDGE_ADDRESS=\"Bridge1p5gheXUvJ6jGWGeCsgPKgnE3YgdGKRVCMY9o\"\n\nCOPY bridge bridge\nCOPY modules modules\nCOPY solitaire solitaire\nCOPY migration migration\n\n# wasm-bindgen 0.2.74 generates JavaScript bindings for SystemInstruction exported from solana-program 1.9.4.\n# The generated JavaScript references a non-existent function (wasm.__wbg_systeminstruction_free) that leads\n# to an attempted import error when importing the wasm packed for bundler. SystemInstruction isn't used in the sdk,\n# so we remove the non-existent function reference as a workaround.\nARG SED_REMOVE_INVALID_REFERENCE=\"/^\\s*wasm.__wbg_systeminstruction_free(ptr);$/d\"\n\n# TODO: it appears that wasm-pack ignores our lockfiles even with --locked\n\n# Compile Wormhole\nRUN --mount=type=cache,target=/root/.cache \\\n\t--mount=type=cache,target=target \\\n    cd bridge/program && /usr/local/cargo/bin/wasm-pack build --target bundler -d bundler -- --features wasm --locked && \\\n    cd bundler && sed -i $SED_REMOVE_INVALID_REFERENCE bridge_bg.js\n\nRUN --mount=type=cache,target=/root/.cache \\\n\t--mount=type=cache,target=target \\\n    cd bridge/program && /usr/local/cargo/bin/wasm-pack build --target nodejs -d nodejs -- --features wasm --locked\n\n# Compile Token Bridge\nRUN --mount=type=cache,target=/root/.cache \\\n\t--mount=type=cache,target=target \\\n    cd modules/token_bridge/program && /usr/local/cargo/bin/wasm-pack build --target bundler -d bundler -- --features wasm --locked && \\\n    cd bundler && sed -i $SED_REMOVE_INVALID_REFERENCE token_bridge_bg.js\n\nRUN --mount=type=cache,target=/root/.cache \\\n\t--mount=type=cache,target=target \\\n    cd modules/token_bridge/program && /usr/local/cargo/bin/wasm-pack build --target nodejs -d nodejs -- --features wasm --locked\n\n# Compile Migration\nRUN --mount=type=cache,target=/root/.cache \\\n\t--mount=type=cache,target=target \\\n    cd migration && /usr/local/cargo/bin/wasm-pack build --target bundler -d bundler -- --features wasm --locked && \\\n    cd bundler && sed -i $SED_REMOVE_INVALID_REFERENCE wormhole_migration_bg.js\n\nRUN --mount=type=cache,target=/root/.cache \\\n\t--mount=type=cache,target=target \\\n    cd migration && /usr/local/cargo/bin/wasm-pack build --target nodejs -d nodejs -- --features wasm --locked\n\n# Compile NFT Bridge\nRUN --mount=type=cache,target=/root/.cache \\\n\t--mount=type=cache,target=target \\\n    cd modules/nft_bridge/program && /usr/local/cargo/bin/wasm-pack build --target bundler -d bundler -- --features wasm --locked && \\\n    cd bundler && sed -i $SED_REMOVE_INVALID_REFERENCE nft_bridge_bg.js\n\nRUN --mount=type=cache,target=/root/.cache \\\n\t--mount=type=cache,target=target \\\n    cd modules/nft_bridge/program && /usr/local/cargo/bin/wasm-pack build --target nodejs -d nodejs -- --features wasm --locked\n\nFROM scratch AS export\n\nCOPY --from=build /usr/src/bridge/bridge/program/bundler sdk/js-wasm/src/core\nCOPY --from=build /usr/src/bridge/modules/token_bridge/program/bundler sdk/js-wasm/src/token\nCOPY --from=build /usr/src/bridge/migration/bundler sdk/js-wasm/src/migration\nCOPY --from=build /usr/src/bridge/modules/nft_bridge/program/bundler sdk/js-wasm/src/nft\n\nCOPY --from=build /usr/src/bridge/bridge/program/nodejs sdk/js-wasm/src/core-node\nCOPY --from=build /usr/src/bridge/modules/token_bridge/program/nodejs sdk/js-wasm/src/token-node\nCOPY --from=build /usr/src/bridge/migration/nodejs sdk/js-wasm/src/migration-node\nCOPY --from=build /usr/src/bridge/modules/nft_bridge/program/nodejs sdk/js-wasm/src/nft-node\n"
}