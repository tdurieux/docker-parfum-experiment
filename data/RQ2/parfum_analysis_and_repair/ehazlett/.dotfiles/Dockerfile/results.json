{
  "startTime": 1674248094448,
  "endTime": 1674248095876,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 113,
        "lineEnd": 113,
        "columnStart": 4,
        "columnEnd": 121
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 54,
        "lineEnd": 54,
        "columnStart": 20,
        "columnEnd": 175
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 100,
        "lineEnd": 100,
        "columnStart": 4,
        "columnEnd": 15
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 3,
        "lineEnd": 44,
        "columnStart": 22,
        "columnEnd": 24
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 3,
        "lineEnd": 44,
        "columnStart": 22,
        "columnEnd": 24
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM ubuntu:18.04\nMAINTAINER evan hazlett <ejhazlett@gmail.com>\nENV DEBIAN_FRONTEND noninteractive\nRUN apt-get update && apt-get install --no-install-recommends -y \\\n    build-essential \\\n    bash-completion \\\n    gcc \\\n    dnsutils \\\n    git-core \\\n    make \\\n    bc \\\n    jq \\\n    bzr \\\n    man-db \\\n    locales \\\n    python \\\n    python-dev \\\n    python-setuptools \\\n    autoconf \\\n    gawk \\\n    libtool \\\n    libncurses5-dev \\\n    libssl-dev \\\n    mercurial \\\n    aufs-tools \\\n    libbz2-dev \\\n    libreadline-dev \\\n    gettext \\\n    htop \\\n    tmux \\\n    wget \\\n    sysstat \\\n    curl \\\n    sudo \\\n    socat \\\n    ctags \\\n    libsqlite3-dev \\\n    libdevmapper-dev \\\n    rng-tools \\\n    s3cmd \\\n    libapparmor1 \\\n    libseccomp2 \\\n    apache2-utils \\\n    unzip \\\n    libcurl4-openssl-dev && rm -rf /var/lib/apt/lists/*;\n\n# base config\nENV CONTAINER_USER hatter\nRUN useradd $CONTAINER_USER\nRUN echo \"ALL            ALL = (ALL) NOPASSWD: ALL\" >> /etc/sudoers\nRUN cp /usr/share/zoneinfo/America/Indianapolis /etc/localtime\n\n# vim\nRUN git clone https://github.com/vim/vim /tmp/vim\nRUN ( cd /tmp/vim && ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --prefix=/usr/local --enable-gui=no --without-x --disable-nls --enable-multibyte --with-tlib=ncurses --enable-pythoninterp --with-features=huge && make install)\n\n# go\nENV GO_VERSION 1.11.1\nRUN wget https://storage.googleapis.com/golang/go$GO_VERSION.linux-amd64.tar.gz -O /tmp/go.tar.gz && \\\n    tar -C /usr/local -xvf /tmp/go.tar.gz && rm /tmp/go.tar.gz\n\nWORKDIR /home/$CONTAINER_USER\nENV HOME /home/$CONTAINER_USER\nENV SHELL /bin/bash\nCOPY . $HOME/.dotfiles\nRUN (cd $HOME/.dotfiles && git submodule init && git submodule update --recursive)\n\n# env config\nRUN mkdir -p $HOME/.ssh && \\\n    ln -sf $HOME/.dotfiles/vim $HOME/.vim && \\\n    ln -sf $HOME/.dotfiles/bashrc $HOME/.bashrc && \\\n    ln -sf $HOME/.dotfiles/vimrc $HOME/.vimrc && \\\n    sed -i 's/^colorscheme.*//g' $HOME/.dotfiles/vimrc && \\\n    vim +PluginInstall +qall > /dev/null 2>&1\n\nRUN (cd $HOME/.dotfiles && git checkout vimrc && \\\n    ln -sf $HOME/.dotfiles/gitconfig $HOME/.gitconfig && \\\n    ln -sf $HOME/.dotfiles/ssh_config $HOME/.ssh/config && \\\n    chown $CONTAINER_USER:$CONTAINER_USER $HOME/.ssh/config && \\\n    chmod 600 $HOME/.ssh/config && \\\n    ln -sf $HOME/.dotfiles/known_hosts $HOME/.ssh/known_hosts && \\\n    ln -sf $HOME/.dotfiles/tmux.conf $HOME/.tmux.conf)\n\n# go config\nENV GOROOT /usr/local/go\nENV GOPATH $HOME/dev/gocode\nENV PATH /usr/local/go/bin:$GOPATH/bin:$PATH\n\n# go tools\nRUN go get -v golang.org/x/tools/present && \\\n    go get -v golang.org/x/tools/cmd/goimports && \\\n    go get -v golang.org/x/lint/golint && \\\n    go get -v github.com/LK4D4/vndr && \\\n    go get -v github.com/stevvooe/protobuild && \\\n    go get -v github.com/mdempsky/gocode\n\n# proto\nRUN git clone https://github.com/google/protobuf /tmp/protobuf && \\\n    cd /tmp/protobuf && \\\n    ./autogen.sh && \\\n    ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" && make install\nRUN go get -v github.com/golang/protobuf/protoc-gen-go\nRUN go get -v github.com/gogo/protobuf/protoc-gen-gofast\nRUN go get -v github.com/gogo/protobuf/proto\nRUN go get -v github.com/gogo/protobuf/gogoproto\nRUN go get -v github.com/gogo/protobuf/protoc-gen-gogo\nRUN go get -v github.com/gogo/protobuf/protoc-gen-gogofast\n\n# nvm\nRUN cd $HOME && git clone https://github.com/creationix/nvm .nvm\n\n# latest docker binary\nENV DOCKER_VERSION 18.06.1-ce\nRUN curl -f -sSL https://download.docker.com/linux/static/edge/x86_64/docker-${DOCKER_VERSION}.tgz -o /tmp/docker-latest.tgz && \\\n    tar zxf /tmp/docker-latest.tgz -C /usr/local/bin --strip 1 && \\\n    rm -rf /tmp/docker-latest.tgz\n\n# perms\nRUN chown -R $CONTAINER_USER:$CONTAINER_USER $HOME && \\\n    groupadd -g 2000 docker && \\\n    usermod -aG docker $CONTAINER_USER && \\\n    usermod -aG users $CONTAINER_USER && \\\n    usermod -aG staff $CONTAINER_USER\n\nVOLUME /home/$CONTAINER_USER\n\n# user\nUSER $CONTAINER_USER\nCMD [\"bash\"]\n"
}