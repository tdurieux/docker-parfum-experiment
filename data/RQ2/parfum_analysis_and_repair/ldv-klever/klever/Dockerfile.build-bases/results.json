{
  "startTime": 1674253799197,
  "endTime": 1674253800159,
  "originalSmells": [
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 30,
        "lineEnd": 30,
        "columnStart": 4,
        "columnEnd": 36
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 68,
        "lineEnd": 68,
        "columnStart": 4,
        "columnEnd": 69
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 27,
        "lineEnd": 28,
        "columnStart": 7,
        "columnEnd": 76
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 27,
        "lineEnd": 28,
        "columnStart": 7,
        "columnEnd": 76
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# This Dockerfile is intended only for generating build bases necessary for testing Klever. Even though it deploys\n# Klever partially, you can not use it for performing actual verification.\n\n# Debian 9 is necessary to enable building of rather outdated versions of the Linux kernel. It does not prevent using\n# generated build bases at verification on new versions of various Linux distributions.\nFROM debian:9\n\nENV KLEVER_SRC_DIR /usr/src/klever/\nENV KLEVER_DEPLOY_DIR /usr/local/\n\nENV GCC_48_SRC_DIR build bases/gcc48/\nENV GCC_48_DEPLOY_DIR /usr/local/gcc48/\nENV LINUX_STABLE_SRC_DIR build bases/linux-stable/\nENV LINUX_STABLE_DEPLOY_DIR /usr/src/linux-stable/\nENV BUSYBOX_SRC_DIR build bases/busybox/\nENV BUSYBOX_DEPLOY_DIR /usr/src/busybox/\nENV BUILD_BASES_DIR /usr/src/build bases/\n\nENV WORK_DIR /usr/src/\n\n# Copy GCC 4.8 binaries and Git repositories with the Linux kernel stable and BusyBox.\nCOPY $GCC_48_SRC_DIR $GCC_48_DEPLOY_DIR\nCOPY $LINUX_STABLE_SRC_DIR $LINUX_STABLE_DEPLOY_DIR\nCOPY $BUSYBOX_SRC_DIR $BUSYBOX_DEPLOY_DIR\n\n# Install build-time dependencies for Klever, the Linux kernel and BusyBox.\nRUN apt-get update \\\n    && apt-get install --no-install-recommends -y bc bison cmake flex gettext git graphviz libc6-dev-i386 libelf-dev libssl-dev make nginx \\\n               postgresql python3-dev python3-pip rabbitmq-server unzip wget && rm -rf /var/lib/apt/lists/*;\nRUN wget -q https://forge.ispras.ru/attachments/download/7251/python-3.7.6.tar.xz\nRUN tar -C / -xf python-3.7.6.tar.xz && rm python-3.7.6.tar.xz\n\n# Deploy semi-functional Klever. We need only some commands, e.g. klever-build, test cases and several addons.\nCOPY .git $KLEVER_SRC_DIR/.git\nWORKDIR $KLEVER_SRC_DIR\nRUN git checkout -q HEAD\nRUN git checkout .\n# We did not prepare Python 3.10 for Debian 9. Allow to use Python 3.7.\nRUN sed -i s/3\\.10/3\\.7/ setup.py\n# There is not Django 4+ for Python 3.7. It is not an issue since we are not going to run complete Klever.\nRUN sed -i s/Django==4\\.0\\.3// setup.py\nRUN sed -i s/Django==4\\.0\\.3// requirements.txt\nRUN /usr/local/python3-klever/bin/python3 -m venv $KLEVER_SRC_DIR/venv\nRUN $KLEVER_SRC_DIR/venv/bin/python -m pip install --upgrade pip wheel setuptools setuptools_scm\nRUN $KLEVER_SRC_DIR/venv/bin/python -m pip install -r requirements.txt -e .\nRUN $KLEVER_SRC_DIR/venv/bin/klever-deploy-local --deployment-directory $KLEVER_DEPLOY_DIR \\\n    --install-only-klever-addons install development\n\n# Generate build bases.\nWORKDIR $WORK_DIR\nRUN mkdir -p \"$BUILD_BASES_DIR/linux\" \"$BUILD_BASES_DIR/userspace\"\nRUN $KLEVER_SRC_DIR/venv/bin/klever-build \\\n    \"linux/testing/common models/gcc63\" \\\n    \"linux/testing/environment model specifications/gcc63\" \\\n    \"linux/validation/bugs found by Klever\" \\\n    \"linux/validation/fixed bugs found by Klever\" \\\n    \"userspace/busybox applets sample\"\nENV PATH=\"${GCC_48_DEPLOY_DIR}/bin:${PATH}\"\nRUN $KLEVER_SRC_DIR/venv/bin/klever-build \\\n    \"linux/loadable kernel modules sample\" \\\n    \"linux/loadable kernel modules sample arm\" \\\n    \"linux/loadable kernel modules sample arm64\" \\\n    \"linux/testing/common models/gcc48\" \\\n    \"linux/testing/decomposition strategies\" \\\n    \"linux/testing/environment model specifications/gcc48\" \\\n    \"linux/testing/requirement specifications\" \\\n    \"linux/testing/verifiers\" \\\n    \"linux/validation/2014 stable branch bugs\"\nRUN tar -C \"$BUILD_BASES_DIR\" -cJf build-bases.tar.xz linux userspace && rm build-bases.tar.xz\n\n# You can find the resulting archive with generated build bases in /usr/src/build-bases.tar.xz.\n"
}