{
  "startTime": 1674255627595,
  "endTime": 1674255628559,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 64,
        "lineEnd": 64,
        "columnStart": 51,
        "columnEnd": 98
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM debian:buster\n\n# arg that specifies the image name (for debugging)\nARG IMAGE_ARG\n\n# arg that specifies the go version to install\nARG GO_VERSION\n\n# add envs:\n# - so we can debug with the image name:tag\n# - adding gsutil etc. to path (where we will install them)\n# - disabling prompts when installing gsutil etc.\n# - hinting that we are in a docker container\nENV KRTE_IMAGE=${IMAGE_ARG} \\\n    GOPATH=/home/go \\\n    PATH=/home/go/bin:/usr/local/go/bin:${PATH} \\\n    KIND_VERSION=0.11.1 \\\n    DOCKER_COMPOSE_VERSION=1.29.1 \\\n    CONTAINER=docker\n\nSHELL [\"/bin/bash\", \"-o\", \"pipefail\", \"-c\"]\n\n# Install tools needed to:\n# - install docker\n# - build kind (dockerized)\n# - build kubernetes (dockerized, or with bazel)\n#\n# TODO: the `sed` is a bit of a hack, look into alternatives.\n# Why this exists: `docker service start` on debian runs a `cgroupfs_mount` method,\n# We're already inside docker though so we can be sure these are already mounted.\n# Trying to remount these makes for a very noisy error block in the beginning of\n# the pod logs, so we just comment out the call to it... :shrug:\nRUN echo \"Installing Packages ...\" \\\n        && apt-get update \\\n        && apt-get install -y --no-install-recommends \\\n            apt-transport-https \\\n            build-essential \\\n            ca-certificates \\\n            curl \\\n            file \\\n            git \\\n            gnupg2 \\\n            kmod \\\n            lsb-release \\\n            mercurial \\\n            pkg-config \\\n            procps \\\n            python3 \\\n            python3-dev \\\n            python3-pip \\\n            python3-setuptools \\\n            rsync \\\n            software-properties-common \\\n            unzip \\\n            jq \\\n        && python3 -m pip install --no-cache-dir --upgrade pip \\\n        && rm -rf /var/lib/apt/lists/* \\\n    && echo \"Installing Go ...\" \\\n        && export GO_TARBALL=\"go${GO_VERSION}.linux-amd64.tar.gz\"\\\n        && curl -fsSL \"https://golang.org/dl/${GO_TARBALL}\" --output \"${GO_TARBALL}\" \\\n        && tar xzf \"${GO_TARBALL}\" -C /usr/local \\\n        && rm \"${GO_TARBALL}\"\\\n        && mkdir -p \"${GOPATH}/bin\" \\\n    && echo \"Installing kubectl, helm ...\" \\\n        && curl -fsSL \"https://dl.k8s.io/release/$( curl -f -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl\" --output /usr/local/bin/kubectl \\\n        && chmod 755 /usr/local/bin/kubectl \\\n        && ln -s /usr/local/bin/kubectl /usr/bin/kubectl \\\n        && curl -fsSL -o get_helm.sh https://raw.githubusercontent.com/helm/helm/master/scripts/get-helm-3 \\\n        && chmod 700 get_helm.sh \\\n        && ./get_helm.sh \\\n        && rm ./get_helm.sh \\\n    && echo \"Installing Docker ...\" \\\n        && curl -fsSL \"https://download.docker.com/linux/$(. /etc/os-release; echo \"$ID\")/gpg\" | apt-key add - \\\n        && add-apt-repository \\\n            \"deb [arch=amd64] https://download.docker.com/linux/$(. /etc/os-release; echo \"$ID\") \\\n            $(lsb_release -cs) stable\" \\\n        && apt-get update \\\n        && apt-get install -y --no-install-recommends docker-ce \\\n        && rm -rf /var/lib/apt/lists/* \\\n        && sed -i 's/cgroupfs_mount$/#cgroupfs_mount\\n/' /etc/init.d/docker \\\n    && echo \"Installing Docker Compose ...\" \\\n        && curl -fsSL \"https://github.com/docker/compose/releases/download/${DOCKER_COMPOSE_VERSION}/docker-compose-$(uname -s)-$(uname -m)\" -o /usr/local/bin/docker-compose \\\n        && chmod +x /usr/local/bin/docker-compose \\\n        && ln -s /usr/local/bin/docker-compose /usr/bin/docker-compose \\\n    && echo \"Installing KinD ...\" \\\n        && curl -fsSL -o /usr/local/bin/kind \"https://kind.sigs.k8s.io/dl/v${KIND_VERSION}/kind-linux-amd64\" \\\n        && chmod +x /usr/local/bin/kind \\\n    && echo \"Ensuring Legacy Iptables ...\" \\\n        && update-alternatives --set iptables /usr/sbin/iptables-legacy \\\n        && update-alternatives --set ip6tables /usr/sbin/ip6tables-legacy\n\n# copy in image utility scripts\nCOPY wrapper.sh /usr/local/bin/\n\n# entrypoint is our wrapper script, in Prow you will need to explicitly re-specify this\nENTRYPOINT [\"wrapper.sh\"]\n# volume for docker in docker, use an emptyDir in Prow\nVOLUME [\"/var/lib/docker\"]\n"
}