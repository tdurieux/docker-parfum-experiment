{
  "startTime": 1674252761961,
  "endTime": 1674252762703,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 45,
        "lineEnd": 45,
        "columnStart": 4,
        "columnEnd": 100
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 161,
        "lineEnd": 161,
        "columnStart": 4,
        "columnEnd": 40
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 162,
        "lineEnd": 162,
        "columnStart": 4,
        "columnEnd": 58
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 165,
        "lineEnd": 165,
        "columnStart": 4,
        "columnEnd": 61
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 120,
        "lineEnd": 120,
        "columnStart": 4,
        "columnEnd": 15
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 8,
        "lineEnd": 39,
        "columnStart": 22,
        "columnEnd": 18
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# Please refer to the USING documentation, \"Dockerfile for building from source\"\n\n# Need devel version cause we need /usr/include/cudnn.h\nFROM nvidia/cuda:10.1-cudnn7-devel-ubuntu18.04\n\n# >> START Install base software\n\n# Get basic packages\nRUN apt-get update && apt-get install -y --no-install-recommends \\\n        apt-utils \\\n        bash-completion \\\n        build-essential \\\n        ca-certificates \\\n        cmake \\\n        curl \\\n        g++ \\\n        gcc \\\n        git \\\n        libbz2-dev \\\n        libboost-all-dev \\\n        libgsm1-dev \\\n        libopusfile0 \\\n        libltdl-dev \\\n        liblzma-dev \\\n        libmagic-dev \\\n        libpng-dev \\\n        libsox-fmt-mp3 \\\n        libsox-dev \\\n        locales \\\n        openjdk-8-jdk \\\n        pkg-config \\\n        python3 \\\n        python3-dev \\\n        python3-pip \\\n        python3-wheel \\\n        python3-numpy \\\n        sox \\\n        unzip \\\n        wget \\\n        zlib1g-dev && rm -rf /var/lib/apt/lists/*;\n\nRUN update-alternatives --install /usr/bin/pip pip /usr/bin/pip3 1\nRUN update-alternatives --install /usr/bin/python python /usr/bin/python3 1\n\n# Install Bazel\nRUN curl -f -LO \"https://github.com/bazelbuild/bazelisk/releases/download/v1.10.1/bazelisk-linux-amd64\" && \\\n    mv bazelisk-linux-amd64 /usr/bin/bazel && \\\n    chmod +x /usr/bin/bazel\n\n# Try and free some space\nRUN rm -rf /var/lib/apt/lists/*\n\n# << END Install base software\n\n# >> START Configure Tensorflow Build\n\n# GPU Environment Setup\nENV TF_NEED_ROCM 0\nENV TF_NEED_OPENCL_SYCL 0\nENV TF_NEED_OPENCL 0\nENV TF_NEED_CUDA 1\nENV TF_CUDA_PATHS \"/usr,/usr/local/cuda-10.1,/usr/lib/x86_64-linux-gnu/\"\nENV TF_CUDA_VERSION 10.1\nENV TF_CUDNN_VERSION 7.6\nENV TF_CUDA_COMPUTE_CAPABILITIES 6.0\nENV TF_NCCL_VERSION 2.8\n\n# Common Environment Setup\nENV TF_BUILD_CONTAINER_TYPE GPU\nENV TF_BUILD_OPTIONS OPT\nENV TF_BUILD_DISABLE_GCP 1\nENV TF_BUILD_ENABLE_XLA 0\nENV TF_BUILD_PYTHON_VERSION PYTHON3\nENV TF_BUILD_IS_OPT OPT\nENV TF_BUILD_IS_PIP PIP\n\n# Other Parameters\nENV CC_OPT_FLAGS -mavx -mavx2 -msse4.1 -msse4.2 -mfma\nENV TF_NEED_GCP 0\nENV TF_NEED_HDFS 0\nENV TF_NEED_JEMALLOC 1\nENV TF_NEED_OPENCL 0\nENV TF_CUDA_CLANG 0\nENV TF_NEED_MKL 0\nENV TF_ENABLE_XLA 0\nENV TF_NEED_AWS 0\nENV TF_NEED_KAFKA 0\nENV TF_NEED_NGRAPH 0\nENV TF_DOWNLOAD_CLANG 0\nENV TF_NEED_TENSORRT 0\nENV TF_NEED_GDR 0\nENV TF_NEED_VERBS 0\nENV TF_NEED_OPENCL_SYCL 0\n\nENV PYTHON_BIN_PATH /usr/bin/python3.6\nENV PYTHON_LIB_PATH /usr/local/lib/python3.6/dist-packages\n\n# << END Configure Tensorflow Build\n\n# >> START Configure Bazel\n\n# Running bazel inside a `docker build` command causes trouble, cf:\n#   https://github.com/bazelbuild/bazel/issues/134\n# The easiest solution is to set up a bazelrc file forcing --batch.\nRUN echo \"startup --batch\" >>/etc/bazel.bazelrc\n# Similarly, we need to workaround sandboxing issues:\n#   https://github.com/bazelbuild/bazel/issues/418\nRUN echo \"build --spawn_strategy=standalone --genrule_strategy=standalone\" \\\n    >>/etc/bazel.bazelrc\n\n# << END Configure Bazel\n\nWORKDIR /\nCOPY . /STT/\n\n# >> START Build and bind\n\nWORKDIR /STT/tensorflow\n\n# Fix for not found script https://github.com/tensorflow/tensorflow/issues/471\nRUN ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\"\n\n# Using CPU optimizations:\n# -mtune=generic -march=x86-64 -msse -msse2 -msse3 -msse4.1 -msse4.2 -mavx.\n# Adding --config=cuda flag to build using CUDA.\n\n# passing LD_LIBRARY_PATH is required cause Bazel doesn't pickup it from environment\n\n# Build STT\n\nRUN bazel build \\\n\t--verbose_failures \\\n\t--workspace_status_command=\"bash native_client/bazel_workspace_status_cmd.sh\" \\\n\t-c opt \\\n\t--copt=-mtune=generic \\\n\t--copt=-march=x86-64 \\\n\t--copt=-msse \\\n\t--copt=-msse2 \\\n\t--copt=-msse3 \\\n\t--copt=-msse4.1 \\\n\t--copt=-msse4.2 \\\n\t--copt=-mavx \\\n\t--config=noaws \\\n\t--config=nogcp \\\n\t--config=nohdfs \\\n\t--config=nonccl \\\n\t//native_client:libstt.so\n\n# Copy built libs to /STT/native_client\nRUN cp bazel-bin/native_client/libstt.so bazel-bin/native_client/libkenlm.so /STT/native_client/\n\n# Build client.cc and install Python client and decoder bindings\nENV TFDIR /STT/tensorflow\n\nRUN nproc\n\nWORKDIR /STT/native_client\nRUN make NUM_PROCESSES=$(nproc) stt\n\nWORKDIR /STT\nRUN cd native_client/python && make NUM_PROCESSES=$(nproc) bindings\nRUN pip3 install --no-cache-dir -U pip setuptools wheel\nRUN pip3 install --no-cache-dir --upgrade native_client/python/dist/*.whl\n\nRUN cd native_client/ctcdecode && make NUM_PROCESSES=$(nproc) bindings\nRUN pip3 install --no-cache-dir --upgrade native_client/ctcdecode/dist/*.whl\n\n# << END Build and bind\n\n# Allow Python printing utf-8\nENV PYTHONIOENCODING UTF-8\n\n# Build KenLM in /STT/native_client/kenlm folder\nWORKDIR /STT/native_client\nRUN rm -rf kenlm && \\\n\tgit clone https://github.com/kpu/kenlm && \\\n\tcd kenlm && \\\n\tgit checkout 87e85e66c99ceff1fab2500a7c60c01da7315eec && \\\n\tmkdir -p build && \\\n\tcd build && \\\n\tcmake .. && \\\n\tmake -j $(nproc)\n\n# Done\nWORKDIR /STT\n"
}