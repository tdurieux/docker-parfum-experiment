{
  "startTime": 1674250164019,
  "endTime": 1674250164955,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 11,
        "lineEnd": 11,
        "columnStart": 4,
        "columnEnd": 89
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "#############\n# Dependencies\n# This base stage just installs the dependencies required for production\n# without any development deps.\nARG PYTHON_VER=3.8\n\nFROM python:${PYTHON_VER} AS base\n\nWORKDIR /usr/src/app\n\n# Install poetry for dep management\nRUN curl -f -sSL https://raw.githubusercontent.com/python-poetry/poetry/master/get-poetry.py | python\nENV PATH=\"$PATH:/root/.poetry/bin\"\nRUN poetry config virtualenvs.create false\n\n# Install project manifest\nCOPY poetry.lock pyproject.toml ./\n\n# Install production dependencies\nRUN poetry install --no-dev --no-root\n\n############\n# Unit Tests\n#\n# This test stage runs true unit tests (no outside services) at build time, as\n# well as enforcing codestyle and performing fast syntax checks. It is built\n# into an image with docker-compose for running the full test suite.\nFROM base AS test_spauto\n\nCOPY . .\n# # Install full dependencies\n# # Copy in only pyproject.toml/poetry.lock to help with caching this layer if no updates to dependencies\nCOPY pyproject.toml poetry.lock ./\n# --no-root declares not to install the project package since we're wanting to take advantage of caching dependency installation\n# and the project is copied in and installed after this step\nRUN poetry install --no-interaction --no-ansi --no-root\n\n############\n# Runs all necessary linting and code checks\nRUN echo 'Running Flake8' && \\\n    flake8 . && \\\n    echo 'Running Black' && \\\n    black --check --diff . && \\\n    echo 'Running Yamllint' && \\\n    yamllint . && \\\n    echo 'Running pydocstyle' && \\\n    pydocstyle .\n\n#############\nFROM base as spauto\n\nWORKDIR /usr/src/app/\n\nCOPY pyproject.toml poetry.lock ./\n\n# Get a copy of all the files from the test stage\nCOPY --from=test_spauto /usr/src/app /usr/src/app\n\nENTRYPOINT [\"pytest\", \"--disable-pytest-warnings\", \"tests\"]\n"
}