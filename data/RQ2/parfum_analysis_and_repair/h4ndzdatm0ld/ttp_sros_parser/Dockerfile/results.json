{
  "startTime": 1674253454683,
  "endTime": 1674253455528,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 11,
        "lineEnd": 11,
        "columnStart": 4,
        "columnEnd": 89
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "#############\n# Dependencies\n#\n#  This base stage just installs the dependencies required for production\n#  without any development deps.\nARG PYTHON_VER=3.8\nFROM python:${PYTHON_VER} AS base\n\nWORKDIR /usr/src/app\n\n# Install poetry for dep management\nRUN curl -f -sSL https://raw.githubusercontent.com/python-poetry/poetry/master/get-poetry.py | python\nENV PATH=\"$PATH:/root/.poetry/bin\"\nRUN poetry config virtualenvs.create false\n\n# Install project manifest\nCOPY pyproject.toml poetry.lock ./\n\nRUN poetry install --no-root\n\n############\n# Unit Tests\n#\n# This test stage runs true unit tests (no outside services) at build time, as\n# well as enforcing codestyle and performing fast syntax checks. It is built\n# into an image with docker-compose for running the full test suite.\nFROM base AS test\n\nCOPY . .\n\nRUN poetry install --no-interaction\n\n############\n# Linting\n#\n# Runs all necessary linting and code checks\nRUN echo 'Running Flake8' && \\\n    flake8 . && \\\n    echo 'Running Black' && \\\n    black --check --diff . && \\\n    echo 'Running Pylint' && \\\n    find . -name '*.py' | xargs pylint  && \\\n    echo 'Running Yamllint' && \\\n    yamllint . && \\\n    echo 'Running pydocstyle' && \\\n    pydocstyle . && \\\n    echo 'Running Bandit' && \\\n    bandit --recursive ./ --configfile .bandit.yml\n\nRUN pytest --color yes -vvv tests\n\n# Run full test suite including integration\nENTRYPOINT [\"pytest\"]\n\n# Default to running colorful, verbose pytests\nCMD [\"--cov=ttp_sros_parser\", \"--color=yes\", \"-vvv\"]\n"
}