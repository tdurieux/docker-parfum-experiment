{
  "startTime": 1674250204985,
  "endTime": 1674250206262,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 84,
        "lineEnd": 84,
        "columnStart": 18,
        "columnEnd": 70
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 85,
        "lineEnd": 85,
        "columnStart": 4,
        "columnEnd": 116
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 45,
        "lineEnd": 45,
        "columnStart": 4,
        "columnEnd": 50
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 43,
        "lineEnd": 43,
        "columnStart": 4,
        "columnEnd": 26
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 23,
        "lineEnd": 23,
        "columnStart": 4,
        "columnEnd": 40
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 28,
        "lineEnd": 29,
        "columnStart": 4,
        "columnEnd": 103
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 83,
        "lineEnd": 83,
        "columnStart": 4,
        "columnEnd": 41
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 23,
        "lineEnd": 23,
        "columnStart": 4,
        "columnEnd": 40
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 83,
        "lineEnd": 83,
        "columnStart": 4,
        "columnEnd": 41
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 83,
        "lineEnd": 83,
        "columnStart": 4,
        "columnEnd": 41
      }
    }
  ],
  "repairedSmells": [
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 23,
        "lineEnd": 23,
        "columnStart": 4,
        "columnEnd": 64
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 83,
        "lineEnd": 83,
        "columnStart": 4,
        "columnEnd": 65
      }
    }
  ],
  "repairedDockerfile": "# Copyright (c) 2019 Intel Corporation\n# Licensed to the Apache Software Foundation (ASF) under one or more\n# contributor license agreements.  See the NOTICE file distributed with\n# this work for additional information regarding copyright ownership.\n# The ASF licenses this file to You under the Apache License, Version 2.0\n# (the \"License\"); you may not use this file except in compliance with\n# the License.  You may obtain a copy of the License at\n#\n#    http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n#\n\n# Ported kubernetes spark image to Ubuntu\n\nFROM ubuntu:18.04\n\n# Install jdk\nRUN apt update -yqq\nRUN apt install --no-install-recommends -y locales openjdk-8-jdk && rm -rf /var/lib/apt/lists/* \\\n    && localedef -i en_US -c -f UTF-8 -A /usr/share/locale/locale.alias en_US.UTF-8\n\n# Install all the essentials\nRUN apt-get update --fix-missing && \\\n    apt-get install --no-install-recommends -y numactl wget curl bzip2 ca-certificates libglib2.0-0 libxext6 libsm6 libxrender1 \\\n                       git mercurial subversion build-essential openssh-server openssh-client net-tools && \\\n    apt-get clean && \\\n    rm -rf /var/lib/apt/lists/*\n\nENV LANG en_US.utf8\nENV JAVA_HOME /usr/lib/jvm/java-8-openjdk-amd64\nENV PATH $JAVA_HOME/bin:$PATH\nENV PATH /opt/conda/bin:$PATH\nENV OPENMPI_VERSION 3.1\n\n# Install openMPI\nRUN mkdir /tmp/openmpi && \\\n    cd /tmp/openmpi && \\\n    wget --quiet https://www.open-mpi.org/software/ompi/v${OPENMPI_VERSION}/downloads/openmpi-${OPENMPI_VERSION}.2.tar.gz -O openmpi.tar.gz && \\\n    tar zxf openmpi.tar.gz && \\\n    cd openmpi-3.1.2 && \\\n    ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --enable-orterun-prefix-by-default && \\\n    make -j $(nproc) all && \\\n    make install && \\\n    ldconfig && \\\n    rm -rf /tmp/openmpi && rm openmpi.tar.gz\n\n# Install miniconda\nRUN wget --quiet https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh -O ~/miniconda.sh && \\\n    /bin/bash ~/miniconda.sh -b -p /opt/conda && \\\n    rm ~/miniconda.sh && \\\n    ln -s /opt/conda/etc/profile.d/conda.sh /etc/profile.d/conda.sh && \\\n    echo \". /opt/conda/etc/profile.d/conda.sh\" >> ~/.bashrc && \\\n    echo \"conda activate base\" >> ~/.bashrc\n\n# Install tf & keras using conda in the virtual_environment:tf_env\nSHELL [\"/bin/bash\", \"-c\"]\nRUN conda update -n base -c defaults conda && \\\n    conda create -n tf_env\nRUN conda install -n tf_env -y -c anaconda \\\n    pip tensorflow keras nltk\n\nRUN echo \"conda activate tf_env\" >> ~/.bashrc && \\\n    conda install -n tf_env -y -c conda-forge clangdev\n\nRUN source ~/.bashrc\nRUN HOROVOD_WITH_TENSORFLOW=1 /opt/conda/envs/tf_env/bin/pip install --no-cache-dir horovod\n\n# openMPI sane defaults:\nRUN echo \"hwloc_base_binding_policy = none\" >> /usr/local/etc/openmpi-mca-params.conf && \\\n    echo \"rmaps_base_mapping_policy = slot\" >> /usr/local/etc/openmpi-mca-params.conf && \\\n    echo \"btl_tcp_if_exclude = lo,docker0\" >> /usr/local/etc/openmpi-mca-params.conf\n\n# Allow OpenSSH to talk to containers without asking for confirmation\nRUN cat /etc/ssh/ssh_config | grep -v StrictHostKeyChecking > /etc/ssh/ssh_config.new && \\\n    echo \"    StrictHostKeyChecking no\" >> /etc/ssh/ssh_config.new && \\\n    mv /etc/ssh/ssh_config.new /etc/ssh/ssh_config\n\n# Install tini\nRUN apt-get install --no-install-recommends -y curl grep sed dpkg && \\\n    TINI_VERSION=$( curl -f https://github.com/krallin/tini/releases/latest | grep -o \"/v.*\\\"\" | sed 's:^..\\(.*\\).$:\\1:') && echo ${TINI_VERSION} && \\\n    curl -f -L \"https://github.com/krallin/tini/releases/download/v${TINI_VERSION}/tini_${TINI_VERSION}.deb\" > tini.deb && \\\n    dpkg -i tini.deb && \\\n    rm tini.deb && \\\n    apt clean && rm -rf /var/lib/apt/lists/*;\n\n# This is needed to match the original entrypoint.sh file.\nRUN cp /usr/bin/tini /sbin\n\n# Begin: Installing spark\nARG spark_jars=jars\nARG img_path=kubernetes/dockerfiles\nARG k8s_tests=kubernetes/tests\n\n# Before building the docker image, first build and make a Spark distribution following\n# the instructions in http://spark.apache.org/docs/latest/building-spark.html.\n# If this docker file is being used in the context of building your images from a Spark\n# distribution, the docker build command should be invoked from the top level directory\n# of the Spark distribution. E.g.:\n# docker build -t spark:latest -f kubernetes/dockerfiles/spark/ubuntu18.04/Dockerfile .\n\nRUN mkdir -p /opt/spark && \\\n    mkdir -p /opt/spark/work-dir && \\\n    touch /opt/spark/RELEASE && \\\n    rm /bin/sh && \\\n    ln -sv /bin/bash /bin/sh && \\\n    echo \"auth required pam_wheel.so use_uid\" >> /etc/pam.d/su && \\\n    chgrp root /etc/passwd && chmod ug+rw /etc/passwd\n\n\nCOPY ${spark_jars} /opt/spark/jars\nCOPY bin /opt/spark/bin\nCOPY sbin /opt/spark/sbin\nCOPY ${img_path}/spark/entrypoint.sh /opt/\nCOPY examples /opt/spark/examples\nCOPY ${k8s_tests} /opt/spark/tests\nCOPY data /opt/spark/data\nENV SPARK_HOME /opt/spark\n\nRUN mkdir /opt/spark/python\nCOPY python/pyspark /opt/spark/python/pyspark\nCOPY python/lib /opt/spark/python/lib\nENV PYTHONPATH /opt/spark/python/lib/pyspark.zip:/opt/spark/python/lib/py4j-*.zip\n\nWORKDIR /opt/spark/work-dir\n\nENTRYPOINT [ \"/opt/entrypoint.sh\" ]\n\n# End: Installing spark\n"
}