{
  "startTime": 1674255960294,
  "endTime": 1674255961440,
  "originalSmells": [
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 15,
        "lineEnd": 15,
        "columnStart": 25,
        "columnEnd": 91
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 34,
        "lineEnd": 34,
        "columnStart": 25,
        "columnEnd": 99
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM debian:bullseye-slim as fetch-ziti-artifacts\n\n# This build stage grabs artifacts that are copied into the final image.\n# It uses the same base as the final image to maximize docker cache hits.\n\nARG ARTIFACTS_DIR=./build/programs/ziti-edge-tunnel\n# e.g. linux\n#ARG TARGETARCH\n# e.g. v7 (OS variant)\n#ARG TARGETOS\n# e.g. arm\n# TARGETVARIANT\n\nWORKDIR /tmp\n\nRUN apt-get -q update && apt-get -q install -y --no-install-recommends curl ca-certificates && rm -rf /var/lib/apt/lists/*;\n# workaround for `openssl rehash` not working on arm.\nRUN /bin/bash -c \"if ! compgen -G '/etc/ssl/certs/*.[0-9]' > /dev/null; then c_rehash /etc/ssl/certs; fi\"\n\n#COPY ${ARTIFACTS_DIR}/${TARGETARCH}/${TARGETOS}/ziti-edge-tunnel .\nCOPY ${ARTIFACTS_DIR}/ziti-edge-tunnel .\n\n################\n#\n#  Main Image\n#\n################\n\nFROM debian:bullseye-slim\n\nARG DOCKER_BUILD_DIR=./docker\nARG ZITI_TUNNELER_BIN=ziti-edge-tunnel\n\nRUN mkdir -p /usr/local/bin /etc/ssl/certs\nRUN apt-get -q update && apt-get -q install -y --no-install-recommends iproute2 libsystemd0 openssl && rm -rf /var/lib/apt/lists/*;\nCOPY --from=fetch-ziti-artifacts /etc/ssl/certs/ca-certificates.crt /etc/ssl/certs\nCOPY --from=fetch-ziti-artifacts /tmp/${ZITI_TUNNELER_BIN} /usr/local/bin\nCOPY ${DOCKER_BUILD_DIR}/docker-entrypoint.sh /\nRUN chmod +x /docker-entrypoint.sh\nRUN mkdir -p /ziti-edge-tunnel\n\nENTRYPOINT [ \"/docker-entrypoint.sh\" ]\nCMD [ \"run\" ]\n"
}