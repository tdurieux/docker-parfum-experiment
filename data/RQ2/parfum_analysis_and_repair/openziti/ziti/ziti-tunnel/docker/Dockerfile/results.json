{
  "startTime": 1674218492427,
  "endTime": 1674218492894,
  "originalSmells": [
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 14,
        "lineEnd": 14,
        "columnStart": 25,
        "columnEnd": 91
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 30,
        "lineEnd": 30,
        "columnStart": 25,
        "columnEnd": 79
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM debian:buster-slim as fetch-ziti-artifacts\n\n# This build stage grabs artifacts that are copied into the final image.\n# It uses the same base as the final image to maximize docker cache hits.\n\nARG ZITI_VERSION\n\nARG ARTIFACTORY_TOKEN\nARG ARTIFACTORY_BASE_URL=\"https://netfoundry.jfrog.io/netfoundry\"\n# to fetch snapshots from the \"feature-0.5\" branch, set ZITI_REPO=\"ziti-snapshot/feature-0.5\"\nARG ARTIFACTORY_REPO=\"ziti-release\"\n\nWORKDIR /tmp\n\nRUN apt-get -q update && apt-get -q install -y --no-install-recommends curl ca-certificates && rm -rf /var/lib/apt/lists/*;\n# workaround for `openssl rehash` not working on arm.\nRUN /bin/bash -c \"if ! compgen -G '/etc/ssl/certs/*.[0-9]' > /dev/null; then c_rehash /etc/ssl/certs; fi\"\n\nCOPY fetch-ziti-bins.sh .\nRUN bash ./fetch-ziti-bins.sh ziti-tunnel\n\n################\n#\n#  Main Image\n#\n################\n\nFROM debian:buster-slim\n\nRUN mkdir -p /usr/local/bin /etc/ssl/certs\nRUN apt-get -q update && apt-get -q install -y --no-install-recommends iptables && rm -rf /var/lib/apt/lists/*;\nCOPY --from=fetch-ziti-artifacts /etc/ssl/certs/ca-certificates.crt /etc/ssl/certs\nCOPY --from=fetch-ziti-artifacts /tmp/ziti-tunnel /usr/local/bin\nCOPY ./docker-entrypoint.sh /\nRUN chmod +x /docker-entrypoint.sh\n\nENTRYPOINT [ \"/docker-entrypoint.sh\" ]\nCMD [ \"run\" ]\n"
}