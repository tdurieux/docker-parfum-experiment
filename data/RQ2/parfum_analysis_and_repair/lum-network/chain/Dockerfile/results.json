{
  "startTime": 1674215814075,
  "endTime": 1674215814644,
  "originalSmells": [
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 29,
        "lineEnd": 29,
        "columnStart": 4,
        "columnEnd": 28
      }
    },
    {
      "rule": "apkAddUseNoCache",
      "position": {
        "lineStart": 28,
        "lineEnd": 28,
        "columnStart": 4,
        "columnEnd": 68
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# Build image\nFROM golang:1.18-alpine AS build-env\n\n# Setup\nENV PACKAGES curl make git libc-dev bash gcc linux-headers eudev-dev python3 curl nano lz4 jq\n\n# Set working directory for the build\nWORKDIR /go/src/github.com/lum-network/chain\n\n# Add source files\nCOPY . .\n\n# Display used go version\nRUN go version\n\n# Patch any issue with go mod file\nRUN go mod tidy && go mod download\n\n# Install minimum necessary dependencies, build Cosmos SDK, remove packages\nRUN apk add --no-cache $PACKAGES && make install\n\n# Final image\nFROM alpine:edge\n\n# Specify used env\nENV CHAIN /chain\n\n# Install dependencies\nRUN apk add --no-cache --update ca-certificates zip python3 py3-pip curl jq lz4\nRUN pip3 install --no-cache-dir pyyaml toml\n\nRUN addgroup chain && adduser -S -G chain chain -h \"$CHAIN\"\n\n# Escalate to user\nUSER chain\n\n# Change the working directory to the env\nWORKDIR $CHAIN\n\n# Copy over binaries from the build-env\nCOPY --from=build-env /go/bin/lumd /usr/bin/lumd\n\n# Add the scripts\nCOPY --from=build-env /go/src/github.com/lum-network/chain/scripts/init_node.py /usr/bin/init_node.py\nCOPY --from=build-env /go/src/github.com/lum-network/chain/scripts/apply_default_config.py /usr/bin/apply_default_config.py\nCOPY --from=build-env /go/src/github.com/lum-network/chain/scripts/apply_pruning_config.py /usr/bin/apply_pruning_config.py\nCOPY --from=build-env /go/src/github.com/lum-network/chain/scripts/apply_rpc_node_config.py /usr/bin/apply_rpc_node_config.py\nCOPY --from=build-env /go/src/github.com/lum-network/chain/scripts/apply_statesync_params.py /usr/bin/apply_statesync_params.py\n\n# Run lumd by default, omit entrypoint to ease using container with chaincli\nCMD [\"lumd\"]"
}