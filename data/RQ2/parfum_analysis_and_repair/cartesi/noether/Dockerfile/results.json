{
  "startTime": 1674255667235,
  "endTime": 1674255667692,
  "originalSmells": [
    {
      "rule": "yarnCacheCleanAfterInstall",
      "position": {
        "lineStart": 20,
        "lineEnd": 20,
        "columnStart": 4,
        "columnEnd": 34
      }
    },
    {
      "rule": "yarnCacheCleanAfterInstall",
      "position": {
        "lineStart": 36,
        "lineEnd": 36,
        "columnStart": 4,
        "columnEnd": 34
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "#\n# Base stage.\n# This stage installs common and required dependencies for next stages\n#\nFROM node:16.10.0-alpine AS base\n\nRUN apk add --no-cache git python3 make g++\n\n#\n# Builder stage.\n# This stage compile our TypeScript to get the JavaScript code\n#\nFROM base AS builder\n\nWORKDIR /usr/src/app\n\nCOPY package.json ./\nCOPY yarn.lock ./\nCOPY tsconfig.json ./\nCOPY tsconfig.prod.json ./\nRUN yarn install --frozen-lockfile && yarn cache clean;\nCOPY ./src ./src\nRUN yarn run build\n\n#\n# Production stage.\n# This stage gets back the JavaScript code from builder stage\n# It will also install the production package only\n#\nFROM base\n\nWORKDIR /app\nENV NODE_ENV=production\n\nCOPY package.json ./\nCOPY yarn.lock ./\nRUN yarn install --frozen-lockfile && yarn cache clean;\n\n## We just need the build to execute the command\nCOPY --from=builder /usr/src/app/dist ./dist\nENTRYPOINT [\"node\", \"/app/dist/index.js\"]\n"
}