{
  "startTime": 1674252176929,
  "endTime": 1674252177996,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 44,
        "lineEnd": 44,
        "columnStart": 4,
        "columnEnd": 56
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 74,
        "lineEnd": 74,
        "columnStart": 4,
        "columnEnd": 102
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 75,
        "lineEnd": 75,
        "columnStart": 4,
        "columnEnd": 24
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 76,
        "lineEnd": 76,
        "columnStart": 4,
        "columnEnd": 24
      }
    },
    {
      "rule": "gemUpdateSystemRmRootGem",
      "position": {
        "lineStart": 34,
        "lineEnd": 34,
        "columnStart": 7,
        "columnEnd": 26
      }
    },
    {
      "rule": "gemUpdateSystemRmRootGem",
      "position": {
        "lineStart": 72,
        "lineEnd": 72,
        "columnStart": 4,
        "columnEnd": 23
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM ruby:3.0.2-alpine3.12 AS builder\nLABEL maintainer=\"Rapid7\"\n\nARG BUNDLER_CONFIG_ARGS=\"set clean 'true' set no-cache 'true' set system 'true' set without 'development test coverage'\"\nENV APP_HOME=/usr/src/metasploit-framework\nENV TOOLS_HOME=/usr/src/tools\nENV BUNDLE_IGNORE_MESSAGES=\"true\"\nWORKDIR $APP_HOME\n\nCOPY Gemfile* metasploit-framework.gemspec Rakefile $APP_HOME/\nCOPY lib/metasploit/framework/version.rb $APP_HOME/lib/metasploit/framework/version.rb\nCOPY lib/metasploit/framework/rails_version_constraint.rb $APP_HOME/lib/metasploit/framework/rails_version_constraint.rb\nCOPY lib/msf/util/helper.rb $APP_HOME/lib/msf/util/helper.rb\n\nRUN apk add --no-cache \\\n      autoconf \\\n      bash \\\n      bison \\\n      build-base \\\n      curl \\\n      ruby-dev \\\n      openssl-dev \\\n      readline-dev \\\n      sqlite-dev \\\n      postgresql-dev \\\n      libpcap-dev \\\n      libxml2-dev \\\n      libxslt-dev \\\n      yaml-dev \\\n      zlib-dev \\\n      ncurses-dev \\\n      git \\\n      go \\\n    && echo \"gem: --no-document\" > /etc/gemrc \\\n    && gem update --system \\\n    && bundle config $BUNDLER_ARGS \\\n    && bundle install --jobs=8 \\\n    # temp fix for https://github.com/bundler/bundler/issues/6680\n    && rm -rf /usr/local/bundle/cache \\\n    # needed so non root users can read content of the bundle \\\n    && chmod -R a+r /usr/local/bundle && rm -rf /root/.gem;\n\nRUN mkdir -p $TOOLS_HOME/bin && \\\n    cd $TOOLS_HOME/bin && \\\n    curl -f -O https://dl.google.com/go/go1.11.2.src.tar.gz && \\\n    tar -zxf go1.11.2.src.tar.gz && \\\n    rm go1.11.2.src.tar.gz && \\\n    cd go/src && \\\n    ./make.bash\n\nFROM ruby:3.0.2-alpine3.12\nLABEL maintainer=\"Rapid7\"\n\nENV APP_HOME=/usr/src/metasploit-framework\nENV TOOLS_HOME=/usr/src/tools\nENV NMAP_PRIVILEGED=\"\"\nENV METASPLOIT_GROUP=metasploit\n\n# used for the copy command\nRUN addgroup -S $METASPLOIT_GROUP\n\nRUN apk add --no-cache bash sqlite-libs nmap nmap-scripts nmap-nselibs postgresql-libs python2 python3 py3-pip ncurses libcap su-exec alpine-sdk python2-dev openssl-dev nasm mingw-w64-gcc\n\nRUN /usr/sbin/setcap cap_net_raw,cap_net_bind_service=+eip $(which ruby)\nRUN /usr/sbin/setcap cap_net_raw,cap_net_bind_service=+eip $(which nmap)\n\nCOPY --from=builder /usr/local/bundle /usr/local/bundle\nRUN chown -R root:metasploit /usr/local/bundle\nCOPY . $APP_HOME/\nCOPY --from=builder $TOOLS_HOME $TOOLS_HOME\nRUN chown -R root:metasploit $APP_HOME/\nRUN chmod 664 $APP_HOME/Gemfile.lock\nRUN gem update --system && rm -rf /root/.gem;\nRUN cp -f $APP_HOME/docker/database.yml $APP_HOME/config/database.yml\nRUN curl -f -L -O https://github.com/pypa/get-pip/raw/3843bff3a0a61da5b63ea0b7d34794c5c51a2f11/get-pip.py && python get-pip.py && rm get-pip.py\nRUN pip install --no-cache-dir impacket\nRUN pip install --no-cache-dir requests\n\nENV GOPATH=$TOOLS_HOME/go\nENV GOROOT=$TOOLS_HOME/bin/go\nENV PATH=${PATH}:${GOPATH}/bin:${GOROOT}/bin\n\nWORKDIR $APP_HOME\n\n# we need this entrypoint to dynamically create a user\n# matching the hosts UID and GID so we can mount something\n# from the users home directory. If the IDs don't match\n# it results in access denied errors.\nENTRYPOINT [\"docker/entrypoint.sh\"]\n\nCMD [\"./msfconsole\", \"-r\", \"docker/msfconsole.rc\", \"-y\", \"$APP_HOME/config/database.yml\"]\n"
}