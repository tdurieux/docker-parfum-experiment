{
  "startTime": 1674250902744,
  "endTime": 1674250903398,
  "originalSmells": [
    {
      "rule": "apkAddUseNoCache",
      "position": {
        "lineStart": 23,
        "lineEnd": 23,
        "columnStart": 4,
        "columnEnd": 45
      }
    },
    {
      "rule": "apkAddUseNoCache",
      "position": {
        "lineStart": 24,
        "lineEnd": 24,
        "columnStart": 4,
        "columnEnd": 55
      }
    },
    {
      "rule": "apkAddUseNoCache",
      "position": {
        "lineStart": 25,
        "lineEnd": 25,
        "columnStart": 4,
        "columnEnd": 41
      }
    },
    {
      "rule": "apkAddUseNoCache",
      "position": {
        "lineStart": 26,
        "lineEnd": 26,
        "columnStart": 4,
        "columnEnd": 29
      }
    },
    {
      "rule": "apkAddUseNoCache",
      "position": {
        "lineStart": 28,
        "lineEnd": 28,
        "columnStart": 4,
        "columnEnd": 22
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# Use: docker build . -t darkfi:alpine${alpine_ver}_rust${rust_ver} -f ./contrib/docker/Dockerfile.alpine\n#   optionally with: --build-arg ALPINE_VER=$alpine_ver --build-arg RUST_VER=$rust_ver\n# The wallet test fail problem (see below) was the same for alpine {3.14,3.15,3.16} and rust {1.60,1.61,1.62}\n\nARG RUST_VER=1.62\nARG ALPINE_VER=3.16\n\nFROM rust:${RUST_VER}-alpine${ALPINE_VER}\n\nARG RUST_VER\nARG ALPINE_VER\n\nRUN echo \"=======================================================\" \\\n    &&echo \"===>>>>> The following error will occur during the test::\" \\\n    && echo \"process didn't exit successfully: /opt/darkfi/target/release/deps/darkfi-7ff55152bc1bdc59 (signal: 11, SIGSEGV: invalid memory reference)\" \\\n    && echo \"rust ${RUST_VER} / alpine ${ALPINE_VER}\" \\\n    && rustc -V && cargo -V \\\n    && cat /etc/os-release  \\\n    && echo \"====>>>>> wait 30 sec to continue; CTRL+C to break\" \\\n    && sleep 30\n\nRUN apk update\n\nRUN apk add --no-cache cmake jq wget clang curl gcc make\nRUN apk add --no-cache llvm-dev openssl-dev expat-dev freetype-dev\nRUN apk add --no-cache libudev-zero-dev libgudev-dev\nRUN apk add --no-cache pkgconf clang-dev\n\nRUN apk add --no-cache build-base\n\n# musl-dev was enough, maybe libc-dev too\n\nRUN mkdir /opt/darkfi\n\nCOPY . /opt/darkfi\n\nWORKDIR /opt/darkfi\n\nRUN make clean\n\nRUN rm -rf ./target/*\n\nRUN make -j test\n\n"
}