{
  "startTime": 1674253832646,
  "endTime": 1674253833809,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 11,
        "lineEnd": 11,
        "columnStart": 7,
        "columnEnd": 53
      }
    },
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 13,
        "lineEnd": 13,
        "columnStart": 7,
        "columnEnd": 26
      }
    },
    {
      "rule": "yarnCacheCleanAfterInstall",
      "position": {
        "lineStart": 29,
        "lineEnd": 29,
        "columnStart": 4,
        "columnEnd": 52
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 7,
        "lineEnd": 7,
        "columnStart": 22,
        "columnEnd": 68
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 12,
        "lineEnd": 12,
        "columnStart": 7,
        "columnEnd": 32
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 86,
        "lineEnd": 87,
        "columnStart": 22,
        "columnEnd": 29
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 7,
        "lineEnd": 7,
        "columnStart": 22,
        "columnEnd": 68
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "ARG build_dir=firefly\nARG target=firefly:warAll\nARG env=local\nARG BranchOverride=''\n\nFROM openjdk:17-jdk-slim-buster AS deps\n\nRUN apt-get update && apt-get install --no-install-recommends -y curl git htmldoc unzip wget && rm -rf /var/lib/apt/lists/*;\n\nRUN apt-get update \\\n# use node v12.x. may not be available via apt-get \\\n    && curl -f -sL https://deb.nodesource.com/setup_12.x | bash - \\\n    && apt-get install --no-install-recommends -y nodejs \\\n    && npm install yarn -g \\\n# gradle version 17.4  Not available via apt-get\n    && cd /usr/local \\\n    && wget  -q https://services.gradle.org/distributions/gradle-7.4-bin.zip \\\n    && unzip -q gradle-7.4-bin.zip \\\n    && ln -sf /usr/local/gradle-7.4/bin/gradle /usr/local/bin/ \\\n    && rm gradle-7.4-bin.zip \\\n# cleanup\n    && rm -rf /var/lib/apt/lists/*; npm cache clean --force;\n\nWORKDIR \"/opt/work\"\n\nFROM deps AS node_module\n\nWORKDIR \"/opt/work/lib\"\nCOPY firefly/package.json firefly/yarn.lock ./\nRUN yarn install --ignore-platform --frozen-lockfile && yarn cache clean;\n\n\nFROM node_module AS builder\n\nARG build_dir\nARG target\nARG env\nARG BranchOverride\n\nWORKDIR /opt/work\nCOPY . .\nCOPY --from=node_module /opt/work/lib/node_modules ./firefly/node_modules\n\nWORKDIR /opt/work/${build_dir}\nENV GRADLE_OPTS=\"-Dorg.gradle.daemon=false -Dorg.gradle.internal.launcher.welcomeMessageEnabled=false\"\nRUN gradle -Penv=${env} -PBranchOverride=${BranchOverride} ${target}\n\n\n# Beginning of runtime image script\n\n# Description:\n# A tomcat application server running as UID 91(tomcat) by default.\n# It's designed to support running as a different user via -u or --user param.\n#\n#-----------------------------------------------------------------------------\n# To build: docker build -t ipac/firefly --build-arg IMAGE_NAME=ipac/firefly .\n# For help in running: docker run --rm  ipac/firefly --help\n#-----------------------------------------------------------------------------\n#\n# Below are predefined directories Firefly uses during runtime.\n# Mount these directories to an external volume or to the host filesystem if you would like it\n# to persists beyond the container's lifecycle.\n#\n# Firefly mountPaths:\n# /firefly/config           : used to override application properties\n# /firefly/workarea         : work area for temporary files\n# /firefly/shared-workarea  : work area for files that are shared between multiple instances of the application\n# /firefly/logs             : logs directory\n# /firefly/logs/statistics  : directory for statistics logs\n# /firefly/alerts           : alerts monitor will watch this directory for application alerts\n# /external                 : default external data directory visible to Firefly\n\n\nFROM tomcat:9.0-jdk17-openjdk-buster\n\nARG build_dir\nARG user=tomcat\nARG group=tomcat\nARG uid=91\nARG gid=91\n\n\n# - add packages: vim, wget, etc\n# - add any other standard apt packages here\n# - this is a big part of the layer so do it early\n# - emacs removed because it is so big: to readd emacs: emacs-nox\nRUN apt-get update && apt-get install --no-install-recommends -y \\\n        vim procps wget unzip \\\n        && rm -rf /var/lib/apt/lists/*;\n\n# These are the users replaceable environment variables, basically runtime arguments\n#          - Set the available memory on the command line with --memory=\"4g\"\n#          - You can change MAX_RAM_PERCENT on the command line with -e \"MAX_RAM_PERCENT=80\"\n#          - also- User name and password to use admin\n#          - PROPS could be used to pass any properties\n\nENV INIT_RAM_PERCENT=10\\\n    MAX_RAM_PERCENT=100\\\n    JVM_CORES=0\\\n    ADMIN_USER=admin\\\n    ADMIN_PASSWORD='' \\\n    DEBUG=false \\\n    CLEANUP_INTERVAL=12h \\\n    PROPS=''\n\n# ----------------------------------------------------------\n# ----------------------------------------------------------\n# Overide the following from the command line:\n#          INIT_RAM_PERCENT, MAX_RAM_PERCENT,\n#          ADMIN_USER, ADMIN_PASSWORD,\n#          DEBUG, PROPS\n# ----------------------------------------------------------\n# ----------------------------------------------------------\n\nARG IMAGE_NAME=''\n\nENV JPDA_ADDRESS=*:5050 \\\n    VISUALIZE_FITS_SEARCH_PATH='' \\\n    BUILD_TIME_NAME=${IMAGE_NAME} \\\n    START_MODE=run\n\nWORKDIR ${CATALINA_HOME}\n\n# set up directory protections, copy stuff around, add tomcat user and group\nRUN mkdir -p conf/Catalina/localhost /local/www /firefly/config /firefly/workarea /firefly/shared-workarea /firefly/logs/statistics /firefly/alerts \\\n  && groupadd -g ${gid} ${group} && useradd -u ${uid} -g ${group} -s /bin/sh ${user} \\\n  && rm -r logs && ln -s /firefly/logs logs\n\n# These are the file that are executed at startup: start tomcat, logging, help, etc\nCOPY firefly/docker/*.sh firefly/docker/*.txt ${CATALINA_HOME}/\n\n# Tomcat config files, tomcat-users is for the admin username and password\n# context.xml set delegate to true for we can use the classpath of tomcat\nCOPY firefly/docker/tomcat-users.xml conf/\nCOPY firefly/docker/local.xml conf/Catalina/localhost\n\n#copy all wars, typically there should only be one\nCOPY --from=builder /opt/work/${build_dir}/build/dist/*.war ${CATALINA_HOME}/webapps/\n\n# extract all war files into tomcat's webapps; mod log4j to have log sent to stdout as well\nWORKDIR ${CATALINA_HOME}/webapps\nRUN for n in *.war; do \\\n    war_dir=`basename $n .war`; \\\n    mkdir -p $war_dir; \\\n    unzip -oqd $war_dir $n; \\\n    sed -E -i.bak 's/##out--//' $war_dir/WEB-INF/classes/log4j2.properties; \\\n    done\n\n# Add permission to files and directories needed for runtime\n# increase max header size to avoid failing on large auth token\nWORKDIR ${CATALINA_HOME}\nRUN chmod a+x *.sh \\\n  && chmod -R a+w *.txt temp work /local/www /firefly \\\n  && sed -i 's/Connector port=\"8080\"/Connector maxHttpHeaderSize=\"24576\" port=\"8080\"/g' ${CATALINA_HOME}/conf/server.xml\n\n# 8080 - http,  5050 - debug\nEXPOSE 8080 5050\n\nUSER tomcat\n\n#CMD [\"/bin/bash\", \"./launchTomcat.sh\"]\nENTRYPOINT [\"/bin/bash\", \"-c\", \"./launchTomcat.sh ${*}\", \"--\"]\n"
}