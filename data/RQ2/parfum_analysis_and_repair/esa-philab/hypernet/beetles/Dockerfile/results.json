{
  "startTime": 1674219608308,
  "endTime": 1674219608993,
  "originalSmells": [
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 21,
        "lineEnd": 21,
        "columnStart": 7,
        "columnEnd": 117
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 12,
        "lineEnd": 12,
        "columnStart": 7,
        "columnEnd": 50
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 23,
        "lineEnd": 23,
        "columnStart": 28,
        "columnEnd": 85
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 23,
        "lineEnd": 23,
        "columnStart": 28,
        "columnEnd": 85
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "ARG cuda_version=10.0\n\nFROM hub.kplabs.pl/cudaconda:${cuda_version}.1-runtime\n\nADD environment.yml environment.yml\nRUN conda env update -f environment.yml\n\n# Make RUN commands use the new environment:\nSHELL [\"conda\", \"run\", \"-n\", \"decent\", \"/bin/bash\", \"-c\"]\n\n# Install CUDnn\nRUN wget -O cudnn-10.0-linux-x64-v7.4.1.5.tgz -nv \"https://jug.kplabs.pl/file/kUvED8duLU/iV9OSru55E\" \\\n    && tar -xzvf cudnn-10.0-linux-x64-v7.4.1.5.tgz \\\n    && mkdir usr/local/cuda-10.0/include \\\n    && cp -P cuda/include/cudnn.h usr/local/cuda-10.0/include \\\n    && cp -P cuda/lib64/libcudnn* usr/local/cuda-10.0/lib64 \\\n    && chmod a+r usr/local/cuda-10.0/include/cudnn.h /usr/local/cuda-10.0/lib64/libcudnn* && rm cudnn-10.0-linux-x64-v7.4.1.5.tgz\n\n# Download DNNDK and install it\nRUN wget -O xilinx_dnndk_v3.1.tar.gz -nv \"https://jug.kplabs.pl/file/cZfqhhaqYz/I53ZXbZyA1\" \\\n    && tar -xf xilinx_dnndk_v3.1.tar.gz && rm -rf xilinx_dnndk_v3.1.tar.gz \\\n    && pip install --no-cache-dir xilinx_dnndk_v3.1/host_x86/decent-tf/ubuntu18.04/tensorflow_gpu-1.12.0-cp36-cp36m-linux_x86_64.whl \\\n    && cd xilinx_dnndk_v3.1/host_x86 && ./install.sh \\\n    && apt-get -y update && apt-get install --no-install-recommends -y --force-yes libgomp1 jq openssh-client && rm -rf /var/lib/apt/lists/*;\n\n#Add earth.kplabs.pl to known_host\nRUN ssh -o StrictHostKeyChecking=accept-new earth.kplabs.pl || true\n\n# Create workspace\nRUN mkdir /workspace\nWORKDIR /workspace\n\nADD ml_intuition ml_intuition\nADD cloud_detection cloud_detection\nADD scripts scripts\nADD tests tests\nADD .git .git\nVOLUME \"/workspace/parameters\"\n\nENV PARAMETERS_DIR \"/workspace/parameters\"\nENV WORK_DIR \"/workspace/work\"\n\nENV PATH /opt/conda/envs/decent/bin:$PATH\n\nENTRYPOINT [\"/bin/bash\", \"-c\"]\n"
}