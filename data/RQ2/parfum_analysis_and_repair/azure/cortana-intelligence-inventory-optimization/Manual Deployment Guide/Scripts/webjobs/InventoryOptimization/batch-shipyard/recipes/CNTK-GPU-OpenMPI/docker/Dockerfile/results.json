{
  "startTime": 1674218754382,
  "endTime": 1674218755920,
  "originalSmells": [
    {
      "rule": "wgetUseHttpsUrl",
      "position": {
        "lineStart": 56,
        "lineEnd": 56,
        "columnStart": 4,
        "columnEnd": 69
      }
    },
    {
      "rule": "wgetUseHttpsUrl",
      "position": {
        "lineStart": 154,
        "lineEnd": 154,
        "columnStart": 4,
        "columnEnd": 84
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 58,
        "lineEnd": 58,
        "columnStart": 4,
        "columnEnd": 35
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 67,
        "lineEnd": 67,
        "columnStart": 4,
        "columnEnd": 35
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 110,
        "lineEnd": 110,
        "columnStart": 4,
        "columnEnd": 97
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 146,
        "lineEnd": 146,
        "columnStart": 4,
        "columnEnd": 60
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 156,
        "lineEnd": 156,
        "columnStart": 4,
        "columnEnd": 46
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# Dockerfile for CNTK-GPU-OpenMPI for use with Batch Shipyard on Azure Batch\n\nFROM nvidia/cuda:8.0-cudnn5-devel\nMAINTAINER Fred Park <https://github.com/Azure/batch-shipyard>\n\n# install base system\nCOPY ssh_config /root/.ssh/config\nRUN apt-get update && apt-get install -y --no-install-recommends \\\n        autotools-dev \\\n        build-essential \\\n        cmake \\\n        git \\\n        g++-multilib \\\n        gcc-multilib \\\n        gfortran-multilib \\\n        libavcodec-dev \\\n        libavformat-dev \\\n        libjasper-dev \\\n        libjpeg-dev \\\n        libpng-dev \\\n        liblapacke-dev \\\n        libswscale-dev \\\n        libtiff-dev \\\n        pkg-config \\\n        wget \\\n        zlib1g-dev \\\n        # Protobuf\n        ca-certificates \\\n        curl \\\n        unzip \\\n        # For Kaldi\n        autoconf \\\n        automake \\\n        libtool \\\n        python-dev \\\n        subversion \\\n        # For Kaldi's dependencies\n        libapr1 libaprutil1 libltdl-dev libltdl7 libserf-1-1 libsigsegv2 libsvn1 m4 \\\n        # For SWIG\n        libpcre++-dev \\\n        # batch-shipyard deps\n        openssh-server \\\n        openssh-client && \\\n    rm -rf /var/lib/apt/lists/* && \\\n    curl -fSsL https://bootstrap.pypa.io/get-pip.py | python && \\\n    mkdir /var/run/sshd && \\\n    ssh-keygen -A && \\\n    sed -i 's/PermitRootLogin without-password/PermitRootLogin yes/' /etc/ssh/sshd_config && \\\n    sed 's@session\\s*required\\s*pam_loginuid.so@session optional pam_loginuid.so@g' -i /etc/pam.d/sshd && \\\n    ssh-keygen -f /root/.ssh/id_rsa -t rsa -N '' && \\\n    chmod 600 /root/.ssh/config && \\\n    chmod 700 /root/.ssh && \\\n    cp /root/.ssh/id_rsa.pub /root/.ssh/authorized_keys\n\n# build and install libzip, openmpi, boost, opencv, openblas, protobuf\nRUN LIBZIP_VERSION=1.1.3 && \\\n    wget -q -O - https://nih.at/libzip/libzip-${LIBZIP_VERSION}.tar.gz | tar -xzf - && \\\n    cd libzip-${LIBZIP_VERSION} && \\\n    ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --prefix=/usr/local && \\\n    make -j\"$(nproc)\" install && \\\n    ldconfig /usr/local/lib && \\\n    cd .. && \\\n    rm -rf /libzip-${LIBZIP_VERSION} && \\\n    # openmpi\n    OPENMPI_VERSION=1.10.4 && \\\n    wget -q -O - https://www.open-mpi.org/software/ompi/v1.10/downloads/openmpi-${OPENMPI_VERSION}.tar.gz | tar -xzf - && \\\n    cd openmpi-${OPENMPI_VERSION} && \\\n    ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --prefix=/usr/local && \\\n    make -j\"$(nproc)\" install && \\\n    ldconfig /usr/local/lib && \\\n    cd .. && \\\n    rm -rf /openmpi-${OPENMPI_VERSION} && \\\n    # boost\n    BOOST_VERSION=1_60_0 && \\\n    BOOST_DOTTED_VERSION=$(echo $BOOST_VERSION | tr _ .) && \\\n    wget -q -O - https://sourceforge.net/projects/boost/files/boost/${BOOST_DOTTED_VERSION}/boost_${BOOST_VERSION}.tar.gz/download | tar -xzf - && \\\n    cd boost_${BOOST_VERSION} && \\\n    ./bootstrap.sh --prefix=/usr/local --with-libraries=filesystem,system,test && \\\n    ./b2 -d0 -j\"$(nproc)\" install && \\\n    ldconfig /usr/local/lib && \\\n    cd .. && \\\n    rm -rf /boost_${BOOST_VERSION} && \\\n    # openblas\n    OPENBLAS_VERSION=0.2.19 && \\\n    wget -q -O - https://github.com/xianyi/OpenBLAS/archive/v${OPENBLAS_VERSION}.tar.gz | tar -xzf - && \\\n    cd OpenBLAS-${OPENBLAS_VERSION} && \\\n    make -j\"$(nproc)\" USE_OPENMP=1 | tee make.log && \\\n    grep -qF 'OpenBLAS build complete. (BLAS CBLAS LAPACK LAPACKE)' make.log && \\\n    grep -qF 'Use OpenMP in the multithreading.' make.log && \\\n    make PREFIX=/usr/local/openblas install && \\\n    ldconfig /usr/local/openblas && \\\n    cd .. && \\\n    rm -rf /OpenBLAS-${OPENBLAS_VERSION} && \\\n    # opencv\n    OPENCV_VERSION=3.1.0 && \\\n    wget -q -O - https://github.com/opencv/opencv/archive/${OPENCV_VERSION}.tar.gz | tar -xzf - && \\\n    cd opencv-${OPENCV_VERSION} && \\\n    # fix graphcuts and CUDA8\n    sed -i -e 's/^#if !defined (HAVE_CUDA) || defined (CUDA_DISABLER)/#if !defined (HAVE_CUDA) || defined (CUDA_DISABLER) || (CUDART_VERSION >= 8000)/' modules/cudalegacy/src/graphcuts.cpp && \\\n    cmake -DCUDA_ARCH_BIN=\"3.7 5.2\" -DCUDA_ARCH_PTX=\"3.7 5.2\" -DCMAKE_BUILD_TYPE=RELEASE -DCMAKE_INSTALL_PREFIX=/usr/local/opencv-${OPENCV_VERSION} . && \\\n    make -j\"$(nproc)\" install && \\\n    ldconfig /usr/local/lib && \\\n    cd .. && \\\n    rm -rf /opencv-${OPENCV_VERSION} && \\\n    # protocol buffers\n    PROTOBUF_VERSION=3.1.0 \\\n    PROTOBUF_STRING=protobuf-$PROTOBUF_VERSION && \\\n    wget -O - --no-verbose https://github.com/google/protobuf/archive/v${PROTOBUF_VERSION}.tar.gz | tar -xzf - && \\\n    cd $PROTOBUF_STRING && \\\n    ./autogen.sh && \\\n    ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" CFLAGS=-fPIC CXXFLAGS=-fPIC --disable-shared --prefix=/usr/local/$PROTOBUF_STRING && \\\n    make -j $(nproc) install && \\\n    cd .. && \\\n    rm -rf $PROTOBUF_STRING\n\n# set env vars\nENV KALDI_VERSION=c024e8aa\nENV PATH=/root/anaconda3/envs/cntk-py34/bin:/usr/local/bin:/usr/local/mpi/bin:/cntk/build/gpu-mkl/release/bin:${PATH} \\\n    KALDI_PATH=/usr/local/kaldi-$KALDI_VERSION \\\n    BLAS=/usr/local/openblas/lib/libopenblas.so \\\n    LAPACK=/usr/local/openblas/lib/libopenblas.so \\\n    PYTHONPATH=/cntk/bindings/python:$PYTHONPATH \\\n    LD_LIBRARY_PATH=/usr/local/openblas/lib:/usr/local/nvidia/lib64:/usr/local/cuda/lib64:/usr/local/cuda/lib64/stubs:/cntk/bindings/python/cntk/libs:$LD_LIBRARY_PATH\nENV CNTK_CUDA_CODEGEN_RELEASE=\"\\\n        -gencode arch=compute_37,code=sm_37 \\\n        -gencode arch=compute_37,code=compute_37 \\\n        -gencode arch=compute_52,code=sm_52 \\\n        -gencode arch=compute_52,code=compute_52\"\n\n# install cub, fix symlinks, install cntk custom mkl, kaldi, swig and anaconda\nRUN CUB_VERSION=1.4.1 && \\\n    wget -q -O - https://codeload.github.com/NVlabs/cub/tar.gz/${CUB_VERSION} | tar -xzf - -C /usr/local && \\\n    # fix symlinks\n    ln -s /usr/local/cuda/lib64/stubs/libnvidia-ml.so /usr/local/cuda/lib64/stubs/libnvidia-ml.so.1 && \\\n    # custom mkl\n    mkdir /usr/local/CNTKCustomMKL && \\\n    wget --no-verbose -O - https://www.cntk.ai/mkl/CNTKCustomMKL-Linux-2.tgz | \\\n    tar -xzf - -C /usr/local/CNTKCustomMKL && \\\n    # kaldi\n    mkdir $KALDI_PATH && \\\n    wget --no-verbose -O - https://github.com/kaldi-asr/kaldi/archive/$KALDI_VERSION.tar.gz | tar -xzf - --strip-components=1 -C $KALDI_PATH && \\\n    cd $KALDI_PATH/tools && \\\n    perl -pi -e 's/^# (OPENFST_VERSION = 1.4.1)$/\\1/' Makefile && \\\n    /bin/bash extras/check_dependencies.sh && \\\n    make -j $(nproc) all && \\\n    cd ../src && \\\n    ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --openblas-root=/usr/local/openblas --shared && \\\n    make -j $(nproc) depend && \\\n    make -j $(nproc) all && \\\n    find $KALDI_PATH -name '*.o' -print0 | xargs -0 rm && \\\n    for dir in $KALDI_PATH/src/*bin; do make -C $dir clean; done && \\\n    # SWIG\n    SWIG_VERSION=3.0.10 && \\\n    cd /root && \\\n    wget -q https://prdownloads.sourceforge.net/swig/swig-${SWIG_VERSION}.tar.gz -O - | tar xvfz - && \\\n    cd swig-${SWIG_VERSION} && \\\n    ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --without-java --without-perl5 && \\\n    make -j$(nproc) && \\\n    make install && \\\n    cd .. && \\\n    rm -rf swig-${SWIG_VERSION} && \\\n    # Anaconda\n    wget -q https://repo.continuum.io/archive/Anaconda3-4.2.0-Linux-x86_64.sh && \\\n    bash Anaconda3-4.2.0-Linux-x86_64.sh -b && \\\n    rm -f Anaconda3-4.2.0-Linux-x86_64.sh && \\\n    # update ldconfig\n    ldconfig /usr/local/lib\n\n# build cntk\nWORKDIR /cntk\nRUN CNTK_VERSION=v2.0.beta4.0 && \\\n    git clone --depth=1 --recursive -b ${CNTK_VERSION} https://github.com/Microsoft/CNTK.git . && \\\n\t# set Anaconda environment\n    /root/anaconda3/bin/conda env create -p /root/anaconda3/envs/cntk-py34/ \\\n\t\t--file /cntk/Scripts/install/linux/conda-linux-cntk-py34-environment.yml && \\\n    # build gpu-mkl only\n    CONFIGURE_OPTS=\"\\\n      --1bitsgd=yes \\\n      --with-cuda=/usr/local/cuda \\\n      --with-gdk-include=/usr/local/cuda/include \\\n      --with-gdk-nvml-lib=/usr/local/cuda/lib64/stubs \\\n      --with-kaldi=${KALDI_PATH} \\\n      --with-py34-path=/root/anaconda3/envs/cntk-py34 \\\n      --with-cudnn=/usr/local\" && \\\n    mkdir -p build-mkl/gpu/release && \\\n    cd build-mkl/gpu/release && \\\n    ../../../configure $CONFIGURE_OPTS --with-mkl=/usr/local/CNTKCustomMKL && \\\n    make -j\"$(nproc)\" all && \\\n    rm -rf /cntk/build-mkl/gpu/release/.build && \\\n    # add LD_LIBRARY_PATH to root\n    echo LD_LIBRARY_PATH=${LD_LIBRARY_PATH}:'$LD_LIBRARY_PATH' >> /root/.bashrc\n\n# copy script to run convnet mnist\nCOPY run_convnet_mnist_gpu.sh /cntk\n\n# set ssh command\nEXPOSE 23\nCMD [\"/usr/sbin/sshd\", \"-D\", \"-p\", \"23\"]\n"
}