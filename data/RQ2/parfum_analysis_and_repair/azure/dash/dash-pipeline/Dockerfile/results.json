{
  "startTime": 1674248614571,
  "endTime": 1674248615243,
  "originalSmells": [
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 76,
        "lineEnd": 76,
        "columnStart": 4,
        "columnEnd": 22
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 70,
        "lineEnd": 70,
        "columnStart": 4,
        "columnEnd": 102
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 99,
        "lineEnd": 99,
        "columnStart": 4,
        "columnEnd": 112
      }
    },
    {
      "rule": "aptGetInstallUseY",
      "position": {
        "lineStart": 97,
        "lineEnd": 97,
        "columnStart": 4,
        "columnEnd": 73
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 47,
        "lineEnd": 47,
        "columnStart": 22,
        "columnEnd": 90
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 97,
        "lineEnd": 97,
        "columnStart": 4,
        "columnEnd": 73
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM p4lang/behavioral-model:no-pi\nLABEL maintainer=\"SONIC-DASH Community\"\nLABEL description=\"DASH pipeline P4 Behavioral Model and toolchain\"\n\n# Configure make to run as many parallel jobs as cores available\nARG available_processors\nARG MAKEFLAGS=-j$available_processors\n\n\n# Select the compiler to use.\n# We install the default version of GCC (GCC 9), as well as clang 8 and clang 10.\nARG sswitch_grpc=yes\nARG CC=gcc\nARG CXX=g++\nENV TZ=America/Los_Angeles\nRUN ln -snf /usr/share/zoneinfo/$TZ /etc/localtime && echo $TZ > /etc/timezone\n\nENV GIT_SSL_NO_VERIFY=true\n\nENV PI_DEPS automake \\\n            build-essential \\\n            clang-8 \\\n            clang-10 \\\n            clang-format-8 \\\n            g++ \\\n            libboost-dev \\\n            libboost-system-dev \\\n            libboost-thread-dev \\\n            libtool \\\n            libtool-bin \\\n            pkg-config \\\n            libreadline-dev \\\n            libpcap-dev \\\n            libmicrohttpd-dev \\\n            doxygen \\\n            valgrind \\\n                vim \\\n                git-core \\\n                python3 \\\n                cmake \\\n                python3-pip\nENV PI_RUNTIME_DEPS libboost-system1.71.0 \\\n                    libboost-thread1.71.0 \\\n                    libpcap0.8 \\\n                    python3 \\\n                    python-is-python3\n\nRUN apt-get update && apt-get install -y --no-install-recommends $PI_DEPS $PI_RUNTIME_DEPS && rm -rf /var/lib/apt/lists/*;\n\nRUN cd / && git clone --depth=1 -b v1.43.2 https://github.com/google/grpc.git && \\\n    cd grpc/ && \\\n    git submodule update --init --recursive && \\\n    mkdir -p cmake/build && \\\n    cd cmake/build && \\\n    cmake -DBUILD_SHARED_LIBS=ON -DgRPC_INSTALL=ON --parallel 1 ../.. && \\\n    make  && \\\n    make install && \\\n    cd / && \\\n    rm -rf grpc\n\nENV LD_LIBRARY_PATH=/usr/local/lib\n\nWORKDIR /\n# COPY proto/sysrepo/docker_entry_point.sh /docker_entry_point.sh\n# COPY . /PI/\nRUN git clone https://github.com/p4lang/PI\nWORKDIR /PI/\nRUN git submodule update --init --recursive\nRUN apt-get update && \\\n    ./autogen.sh && \\\n    ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --enable-Werror --with-bmv2 --with-proto --with-cli --with-internal-rpc --with-sysrepo && \\\n    ./proto/sysrepo/install_yangs.sh && \\\n    make && \\\n    make install\n\n\nRUN pip install --no-cache-dir jinja2\n\nENV DEBIAN_FRONTEND noninteractive\n\nENV BM_RUNTIME_DEPS libboost-program-options1.71.0 \\\n                    libboost-system1.71.0 \\\n                    libboost-filesystem1.71.0 \\\n                    libboost-thread1.71.0 \\\n                    libgmp10 \\\n                    libpcap0.8 \\\n                    python3 \\\n                    python-is-python3 \\\n                    sudo\n\nWORKDIR /\n\nRUN git clone https://github.com/p4lang/behavioral-model.git\n\nWORKDIR /behavioral-model/\n\nRUN apt-get update -qq && \\\n    apt-get install -y -qq --no-install-recommends $BM_DEPS $BM_RUNTIME_DEPS && \\\n    ./autogen.sh && \\\n    ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --with-pdfixed --with-pi --with-stress-tests --enable-debugger --enable-coverage --enable-Werror && \\\n    make && \\\n    make install && rm -rf /var/lib/apt/lists/*;\n\nWORKDIR /\n\nARG user\nARG uid\nARG guid\nARG hostname\n\nENV BUILD_HOSTNAME $hostname\nENV USER $user\n\nRUN groupadd -f -r -g $guid g$user\n\nRUN useradd $user -l -u $uid -g $guid -d /var/$user -m -s /bin/bash\n\nRUN echo \"$user ALL=(ALL) NOPASSWD:ALL\" >>/etc/sudoers\n\nUSER $user\n"
}