diff --git a/Users/tdurieux/git/dinghy-experiment/data/evaluation/dockerfiles/azure/azure-iot-sdk-c/jenkins/raspberrypi/Dockerfile b/Users/tdurieux/git/dinghy-experiment/data/evaluation/dockerfile_repair_results/azure/azure-iot-sdk-c/jenkins/raspberrypi/Dockerfile/repaired.Dockerfile
index b2e4b5e..c040f04 100644
--- a/Users/tdurieux/git/dinghy-experiment/data/evaluation/dockerfiles/azure/azure-iot-sdk-c/jenkins/raspberrypi/Dockerfile
+++ b/Users/tdurieux/git/dinghy-experiment/data/evaluation/dockerfile_repair_results/azure/azure-iot-sdk-c/jenkins/raspberrypi/Dockerfile/repaired.Dockerfile
@@ -12,7 +12,7 @@ FROM debian:stretch
 RUN apt update && apt -y upgrade
 
 # Install wget git cmake xz-utils
-RUN apt install --fix-missing -y wget git build-essential cmake xz-utils ca-certificates pkg-config uuid-dev
+RUN apt install --no-install-recommends --fix-missing -y wget git build-essential cmake xz-utils ca-certificates pkg-config uuid-dev && rm -rf /var/lib/apt/lists/*;
 
 ENV WORK_ROOT=/toolchain
 WORKDIR ${WORK_ROOT}
@@ -21,7 +21,7 @@ WORKDIR ${WORK_ROOT}
 ########## LINARO INSTALL ##########
 ENV LINARO_SOURCE=gcc-linaro-7.4.1-2019.02-x86_64_arm-linux-gnueabihf
 RUN wget https://releases.linaro.org/components/toolchain/binaries/7.4-2019.02/arm-linux-gnueabihf/${LINARO_SOURCE}.tar.xz
-RUN tar -xvf ${LINARO_SOURCE}.tar.xz
+RUN tar -xvf ${LINARO_SOURCE}.tar.xz && rm ${LINARO_SOURCE}.tar.xz
 
 # Set up environment variables for builds
 
@@ -46,7 +46,7 @@ ENV STAGING_DIR=${TOOLCHAIN_SYSROOT}
 # Download OpenSSL source and expand it
 ENV OPENSSL_SOURCE=openssl-1.1.1f
 RUN wget https://www.openssl.org/source/${OPENSSL_SOURCE}.tar.gz
-RUN tar -xvf ${OPENSSL_SOURCE}.tar.gz
+RUN tar -xvf ${OPENSSL_SOURCE}.tar.gz && rm ${OPENSSL_SOURCE}.tar.gz
 
 # Build OpenSSL
 
@@ -60,8 +60,8 @@ WORKDIR /${WORK_ROOT}
 ########## CURL INSTALL ##########
 # Download cURL source and expand it
 ENV CURL_SOURCE=curl-7.64.1
-RUN wget http://curl.haxx.se/download/${CURL_SOURCE}.tar.gz
-RUN tar -xvf ${CURL_SOURCE}.tar.gz
+RUN wget https://curl.haxx.se/download/${CURL_SOURCE}.tar.gz
+RUN tar -xvf ${CURL_SOURCE}.tar.gz && rm ${CURL_SOURCE}.tar.gz
 
 # Build cURL
 # we need to set the path for openssl with --with-ssl=...
@@ -77,11 +77,11 @@ WORKDIR /${WORK_ROOT}
 # Download the Linux utilities for libuuid and expand it
 ENV UTIL_LINUX_SOURCE=util-linux-2.33-rc2
 RUN wget https://mirrors.edge.kernel.org/pub/linux/utils/util-linux/v2.33/${UTIL_LINUX_SOURCE}.tar.gz
-RUN tar -xvf ${UTIL_LINUX_SOURCE}.tar.gz
+RUN tar -xvf ${UTIL_LINUX_SOURCE}.tar.gz && rm ${UTIL_LINUX_SOURCE}.tar.gz
 
 # Build uuid
 WORKDIR /${WORK_ROOT}/${UTIL_LINUX_SOURCE}
-RUN ./configure --prefix=${TOOLCHAIN_PREFIX} --with-sysroot=${TOOLCHAIN_SYSROOT} --target=${TOOLCHAIN_NAME} --host=${TOOLCHAIN_NAME} --disable-all-programs  --disable-bash-completion --enable-libuuid
+RUN ./configure --build="$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)" --prefix=${TOOLCHAIN_PREFIX} --with-sysroot=${TOOLCHAIN_SYSROOT} --target=${TOOLCHAIN_NAME} --host=${TOOLCHAIN_NAME} --disable-all-programs --disable-bash-completion --enable-libuuid
 RUN make
 RUN make install
 WORKDIR /${WORK_ROOT}
@@ -132,7 +132,7 @@ RUN if [ -s /patchfile ]; then git apply --index /patchfile; fi
 
 RUN git submodule update --init
 
-WORKDIR /sdk/cmake 
+WORKDIR /sdk/cmake
 RUN if [ -f "CMakeCache.txt" ]; then rm CMakeCache.txt; fi
 RUN cmake ..
 RUN make -j 2