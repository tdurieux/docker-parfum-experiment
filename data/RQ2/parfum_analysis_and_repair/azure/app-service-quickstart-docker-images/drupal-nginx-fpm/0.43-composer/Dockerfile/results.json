{
  "startTime": 1674254783132,
  "endTime": 1674254787726,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 50,
        "lineEnd": 50,
        "columnStart": 7,
        "columnEnd": 105
      }
    },
    {
      "rule": "apkAddUseNoCache",
      "position": {
        "lineStart": 78,
        "lineEnd": 78,
        "columnStart": 4,
        "columnEnd": 54
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM appsvcorg/nginx-fpm:0.4\nMAINTAINER Azure App Service Container Images <appsvc-images@microsoft.com>\n# ========\n# ENV vars\n# ========\n#\nENV DOCKER_BUILD_HOME \"/dockerbuild\"\n# drupal\nENV DRUPAL_HOME \"/home/site/wwwroot\"\n# mariadb\nENV MARIADB_DATA_DIR \"/home/data/mysql\"\nENV MARIADB_LOG_DIR \"/home/LogFiles/mysql\"\n# phpmyadmin\nENV PHPMYADMIN_SOURCE \"/usr/src/phpmyadmin\"\nENV PHPMYADMIN_HOME \"/home/phpmyadmin\"\n#nginx\nENV NGINX_LOG_DIR \"/home/LogFiles/nginx\"\n#php\nENV PHP_HOME \"/usr/local/etc/php\"\nENV PHP_CONF_DIR $PHP_HOME\nENV PHP_CONF_FILE $PHP_CONF_DIR\"/php.ini\"\n#redis\nENV PHPREDIS_VERSION 3.1.2\n# Composer\n# Updation: https://getcomposer.org/download/\nENV COMPOSER_DOWNLOAD_URL \"https://getcomposer.org/installer\"\nENV COMPOSER_ALLOW_SUPERUSER 1\nENV COMPOSER_HOME /home/.composer\nENV COMPOSER_VERSION \"1.6.1\"\n# SHA384SUM https://composer.github.io/installer.sha384sum\nENV COMPOSER_SETUP_SHA 544e09ee996cdf60ece3804abc52599c22b1f40f4323403c44d44fdfdd586475ca9813a858088ffbc1f233e9b180f061\n# ====================\n# Download and Install\n# ~. essentials\n# 1. Drupal\n# ====================\nRUN mkdir -p $DOCKER_BUILD_HOME\nWORKDIR $DOCKER_BUILD_HOME\n# --------\n# ~. essentials\n# --------\nRUN set -ex \\\n    && apk update \\\n    && apk add --no-cache redis \\\n# --------\n# ~. PHP extensions\n# --------\n# install the PHP extensions we need\n# postgresql-dev is needed for https://bugs.alpinelinux.org/issues/3642\n    && docker-php-source extract \\\n    && curl -f -L -o /tmp/redis.tar.gz https://github.com/phpredis/phpredis/archive/$PHPREDIS_VERSION.tar.gz \\\n    && tar xfz /tmp/redis.tar.gz \\\n    && rm -r /tmp/redis.tar.gz \\\n    && mv phpredis-$PHPREDIS_VERSION /usr/src/php/ext/redis\nRUN set -ex \\\n\t&& apk add --no-cache --virtual .build-deps \\\n\t\tcoreutils \\\n\t\tfreetype-dev \\\n\t\tlibjpeg-turbo-dev \\\n\t\tlibpng-dev \\\n\t\tpostgresql-dev \\\n\t&& docker-php-ext-configure gd \\\n\t\t--with-freetype-dir=/usr/include/ \\\n\t\t--with-jpeg-dir=/usr/include/ \\\n\t\t--with-png-dir=/usr/include/ \\\n\t&& docker-php-ext-install -j \"$(nproc)\" \\\n\t\tgd \\\n\t\topcache \\\n\t\tpdo_mysql \\\n\t\tpdo_pgsql \\\n\t\tzip \\\n\t\tredis \\\n\t&& runDeps=\"$( \\\n\t\tscanelf --needed --nobanner --format '%n#p' --recursive /usr/local \\\n\t\t\t| tr ',' '\\n' \\\n\t\t\t| sort -u \\\n\t\t\t| awk 'system(\"[ -e /usr/local/lib/\" $1 \" ]\") == 0 { next } { print \"so:\" $1 }' \\\n\t)\" \\\n\t&& apk add --no-cache --virtual .drupal-phpexts-rundeps $runDeps \\\n\t&& apk del .build-deps \\\n\t&& docker-php-source delete\n# -------------\n# 1. Drupal\n# -------------\n# Install by Git\n# ----------\n# 2. composer\n# ----------\nRUN set -ex \\\n    && php -r \"readfile('https://getcomposer.org/installer');\" > /tmp/composer-setup.php \\\n    && php -r \"if (hash('SHA384', file_get_contents('/tmp/composer-setup.php')) === getenv('COMPOSER_SETUP_SHA')) { echo 'Installer verified'; } else { echo 'Installer corrupt'; unlink('/tmp/composer-setup.php'); echo PHP_EOL; exit(1); } echo PHP_EOL;\" \\\n   \t&& mkdir -p /composer/bin \\\n    && php /tmp/composer-setup.php --install-dir=/usr/local/bin/ --filename=composer --version=${COMPOSER_VERSION} \\\n    && rm /tmp/composer-setup.php \\\n# ----------\n# 3. drush\n# ----------\n# Installed in entrypoint.sh    \n# ----------\n# ~. clean up\n# ----------\n\t&& apk update \\\n\t&& apk upgrade \\\n\t&& rm -rf /var/cache/apk/*\n# =========\n# Configure\n# =========\nWORKDIR $DRUPAL_HOME\nRUN rm -rf $DOCKER_BUILD_HOME\n# nginx\nCOPY nginx.conf /etc/nginx/nginx.conf\nCOPY default.conf /etc/nginx/conf.d/default.conf\n# opcache\nCOPY opcache-recommended.ini /usr/local/etc/php/conf.d/opcache-recommended.ini\n# phpmyadmin\nCOPY phpmyadmin-default.conf $PHPMYADMIN_SOURCE/phpmyadmin-default.conf\n# =====\n# final\n# =====\nCOPY entrypoint.sh /usr/local/bin/\nRUN chmod +x /usr/local/bin/entrypoint.sh\nEXPOSE 2222 80\nENTRYPOINT [\"entrypoint.sh\"]\n"
}