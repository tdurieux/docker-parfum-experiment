{
  "startTime": 1674215865643,
  "endTime": 1674215867343,
  "originalSmells": [
    {
      "rule": "wgetUseHttpsUrl",
      "position": {
        "lineStart": 30,
        "lineEnd": 30,
        "columnStart": 4,
        "columnEnd": 47
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 141,
        "lineEnd": 141,
        "columnStart": 4,
        "columnEnd": 36
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 148,
        "lineEnd": 148,
        "columnStart": 4,
        "columnEnd": 23
      }
    },
    {
      "rule": "gpgUseBatchFlag",
      "position": {
        "lineStart": 132,
        "lineEnd": 132,
        "columnStart": 2,
        "columnEnd": 82
      }
    }
  ],
  "repairedSmells": [
    {
      "rule": "rmRecursiveAfterMktempD",
      "position": {
        "lineStart": 123,
        "lineEnd": 123,
        "columnStart": 24,
        "columnEnd": 33
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 141,
        "lineEnd": 141,
        "columnStart": 4,
        "columnEnd": 94
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 148,
        "lineEnd": 148,
        "columnStart": 4,
        "columnEnd": 81
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 138,
        "lineEnd": 138,
        "columnStart": 4,
        "columnEnd": 37
      }
    },
    {
      "rule": "gpgUseBatchFlag",
      "position": {
        "lineStart": 131,
        "lineEnd": 131,
        "columnStart": 2,
        "columnEnd": 90
      }
    },
    {
      "rule": "gpgUseBatchFlag",
      "position": {
        "lineStart": 135,
        "lineEnd": 135,
        "columnStart": 1,
        "columnEnd": 51
      }
    }
  ],
  "repairedDockerfile": "FROM php:7.2.11-fpm-alpine3.7\nMAINTAINER Azure App Service Container Images <appsvc-images@microsoft.com>\n# ========\n# ENV vars\n# ========\n# ssh\nENV SSH_PASSWD \"root:Docker!\"\n#nginx\nENV NGINX_VERSION 1.14.0\nENV NGINX_LOG_DIR \"/home/LogFiles/nginx\"\n#php\nENV PHP_HOME \"/usr/local/etc/php\"\nENV PHP_CONF_DIR $PHP_HOME\nENV PHP_CONF_FILE $PHP_CONF_DIR\"/php.ini\"\n# mariadb\nENV MARIADB_DATA_DIR \"/home/data/mysql\"\nENV MARIADB_LOG_DIR \"/home/LogFiles/mysql\"\n# phpmyadmin\nENV PHPMYADMIN_SOURCE \"/usr/src/phpmyadmin\"\nENV PHPMYADMIN_HOME \"/var/www/phpmyadmin\"\n#Web Site Home\nENV HOME_SITE \"/var/www/html\"\n\n# --------\n# ~. tools\n# --------\nRUN set -ex \\\n    && apk update \\\n    && apk add --no-cache openssl git net-tools tcpdump tcptraceroute vim curl wget bash\\\n\t&& cd /usr/bin \\\n\t&& wget https://www.vdberg.org/~richard/tcpping \\\n\t&& chmod 777 tcpping \\\n# ========\n# install the PHP extensions we need and xdebug\n# ========\n    && apk add --no-cache --virtual build-dependencies icu-dev \\\n    libxml2-dev freetype-dev libpng-dev libjpeg-turbo-dev g++ make autoconf \\\n    && docker-php-source extract \\\n    && pecl install xdebug-beta \\\n    && docker-php-ext-install mysqli \\\n    && docker-php-source delete \\\n    && apk del build-dependencies \\\n    && apk del libmcrypt-dev \\\n# ------\n# ssh\n# ------\n    && apk add --no-cache openssh-server \\\n    && echo \"$SSH_PASSWD\" | chpasswd \\\n# ------\n# mariadb\n# ------\n    && apk add --no-cache mariadb mariadb-client \\\n#---------------\n# openrc service\n#---------------\n   && apk add --no-cache openrc \\\n   && sed -i 's/\"cgroup_add_service/\" # cgroup_add_service/g' /lib/rc/sh/openrc-run.sh\n# ----------\n# Nginx\n# ----------  \nRUN GPG_KEYS=B0F4253373F8F6F510D42178520A9993A1C052F8 \\\n\t&& CONFIG=\"\\\n\t\t--prefix=/etc/nginx \\\n\t\t--sbin-path=/usr/sbin/nginx \\\n\t\t--modules-path=/usr/lib/nginx/modules \\\n\t\t--conf-path=/etc/nginx/nginx.conf \\\n\t\t--error-log-path=/var/log/nginx/error.log \\\n\t\t--http-log-path=/var/log/nginx/access.log \\\n\t\t--pid-path=/var/run/nginx.pid \\\n\t\t--lock-path=/var/run/nginx.lock \\\n\t\t--http-client-body-temp-path=/var/cache/nginx/client_temp \\\n\t\t--http-proxy-temp-path=/var/cache/nginx/proxy_temp \\\n\t\t--http-fastcgi-temp-path=/var/cache/nginx/fastcgi_temp \\\n\t\t--http-uwsgi-temp-path=/var/cache/nginx/uwsgi_temp \\\n\t\t--http-scgi-temp-path=/var/cache/nginx/scgi_temp \\\n\t\t--user=nginx \\\n\t\t--group=nginx \\\n\t\t--with-http_ssl_module \\\n\t\t--with-http_realip_module \\\n\t\t--with-http_addition_module \\\n\t\t--with-http_sub_module \\\n\t\t--with-http_dav_module \\\n\t\t--with-http_flv_module \\\n\t\t--with-http_mp4_module \\\n\t\t--with-http_gunzip_module \\\n\t\t--with-http_gzip_static_module \\\n\t\t--with-http_random_index_module \\\n\t\t--with-http_secure_link_module \\\n\t\t--with-http_stub_status_module \\\n\t\t--with-http_auth_request_module \\\n\t\t--with-http_xslt_module=dynamic \\\n\t\t--with-http_image_filter_module=dynamic \\\n\t\t--with-http_geoip_module=dynamic \\\n\t\t--with-threads \\\n\t\t--with-stream \\\n\t\t--with-stream_ssl_module \\\n\t\t--with-stream_ssl_preread_module \\\n\t\t--with-stream_realip_module \\\n\t\t--with-stream_geoip_module=dynamic \\\n\t\t--with-http_slice_module \\\n\t\t--with-mail \\\n\t\t--with-mail_ssl_module \\\n\t\t--with-compat \\\n\t\t--with-file-aio \\\n\t\t--with-http_v2_module \\\n\t\" \\\n\t&& addgroup -S nginx \\\n\t&& adduser -D -S -h /var/cache/nginx -s /sbin/nologin -G nginx nginx \\\n\t&& apk add --no-cache --virtual .build-deps \\\n\t\tgcc \\\n\t\tlibc-dev \\\n\t\tmake \\\n\t\topenssl-dev \\\n\t\tpcre-dev \\\n\t\tzlib-dev \\\n\t\tlinux-headers \\\n\t\tcurl \\\n\t\tgnupg \\\n\t\tlibxslt-dev \\\n\t\tgd-dev \\\n\t\tgeoip-dev \\\n\t&& curl -fSL https://nginx.org/download/nginx-$NGINX_VERSION.tar.gz -o nginx.tar.gz \\\n\t&& curl -fSL https://nginx.org/download/nginx-$NGINX_VERSION.tar.gz.asc  -o nginx.tar.gz.asc \\\n\t&& export GNUPGHOME=\"$(mktemp -d)\" \\\n\t&& found=''; \\\n\tfor server in \\\n\t\tha.pool.sks-keyservers.net \\\n\t\thkp://keyserver.ubuntu.com:80 \\\n\t\thkp://p80.pool.sks-keyservers.net:80 \\\n\t\tpgp.mit.edu; do \\\n\t\t\t\n\t\n\t\techo \"Fetching GPG key $GPG_KEYS from $server\"; \\\n\t\tgpg --batch --keyserver \"$server\" --keyserver-options timeout=10 --recv-keys \"$GPG_KEYS\" && found=yes && break; \\\n\tdone \\\n\t; \\\n\ttest -z \"$found\" && echo >&2 \"error: failed to fetch GPG key $GPG_KEYS\" && exit 1; \\\n\tgpg --batch --verify nginx.tar.gz.asc nginx.tar.gz \\\n\t&& rm -rf \"$GNUPGHOME\" nginx.tar.gz.asc \\\n\t&& mkdir -p /usr/src \\\n\t&& tar -zxC /usr/src -f nginx.tar.gz \\\n\t&& rm nginx.tar.gz \\\n\t&& cd /usr/src/nginx-$NGINX_VERSION \\\n\t&& ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" $CONFIG --with-debug \\\n\t&& make -j$(getconf _NPROCESSORS_ONLN) \\\n\t&& mv objs/nginx objs/nginx-debug \\\n\t&& mv objs/ngx_http_xslt_filter_module.so objs/ngx_http_xslt_filter_module-debug.so \\\n\t&& mv objs/ngx_http_image_filter_module.so objs/ngx_http_image_filter_module-debug.so \\\n\t&& mv objs/ngx_http_geoip_module.so objs/ngx_http_geoip_module-debug.so \\\n\t&& mv objs/ngx_stream_geoip_module.so objs/ngx_stream_geoip_module-debug.so \\\n\t&& ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" $CONFIG \\\n\t&& make -j$(getconf _NPROCESSORS_ONLN) \\\n\t&& make install \\\n\t&& rm -rf /etc/nginx/html/ \\\n\t&& mkdir /etc/nginx/conf.d/ \\\n\t&& mkdir -p /usr/share/nginx/html/ \\\n\t&& install -m644 html/index.html /usr/share/nginx/html/ \\\n\t&& install -m644 html/50x.html /usr/share/nginx/html/ \\\n\t&& install -m755 objs/nginx-debug /usr/sbin/nginx-debug \\\n\t&& install -m755 objs/ngx_http_xslt_filter_module-debug.so /usr/lib/nginx/modules/ngx_http_xslt_filter_module-debug.so \\\n\t&& install -m755 objs/ngx_http_image_filter_module-debug.so /usr/lib/nginx/modules/ngx_http_image_filter_module-debug.so \\\n\t&& install -m755 objs/ngx_http_geoip_module-debug.so /usr/lib/nginx/modules/ngx_http_geoip_module-debug.so \\\n\t&& install -m755 objs/ngx_stream_geoip_module-debug.so /usr/lib/nginx/modules/ngx_stream_geoip_module-debug.so \\\n\t&& ln -s ../../usr/lib/nginx/modules /etc/nginx/modules \\\n\t&& strip /usr/sbin/nginx* \\\n\t&& strip /usr/lib/nginx/modules/*.so \\\n\t&& rm -rf /usr/src/nginx-$NGINX_VERSION \\\n\n\t# Bring in gettext so we can get `envsubst`, then throw\n\t# the rest away. To do this, we need to install `gettext`\n\t# then move `envsubst` out of the way so `gettext` can\n\t# be deleted completely, then move `envsubst` back.\n\t&& apk add --no-cache --virtual .gettext gettext \\\n\t&& mv /usr/bin/envsubst /tmp/ \\\n\n\t&& runDeps=\"$( \\\n\t\tscanelf --needed --nobanner --format '%n#p' /usr/sbin/nginx /usr/lib/nginx/modules/*.so /tmp/envsubst \\\n\t\t\t| tr ',' '\\n' \\\n\t\t\t| sort -u \\\n\t\t\t| awk 'system(\"[ -e /usr/local/lib/\" $1 \" ]\") == 0 { next } { print \"so:\" $1 }' \\\n\t)\" \\\n\t&& apk add --no-cache --virtual .nginx-rundeps $runDeps \\\n\t&& apk del .build-deps \\\n\t&& apk del .gettext \\\n\t&& mv /tmp/envsubst /usr/local/bin/ \\\n\n\t# Bring in tzdata so users could set the timezones through the environment\n\t# variables\n\t&& apk add --no-cache tzdata \\\n\n\t# forward request and error logs to docker log collector\n\t&& ln -sf /dev/stdout /var/log/nginx/access.log \\\n\t&& ln -sf /dev/stderr /var/log/nginx/error.log\n# -------------\n# phpmyadmin\n# -------------\nRUN mkdir -p $PHPMYADMIN_SOURCE\nCOPY phpMyAdmin.tar.gz $PHPMYADMIN_SOURCE/phpMyAdmin.tar.gz\n# ----------\n# ~. upgrade/clean up\n# ----------\nRUN set -ex \\\n\t&& apk update \\\n\t&& apk upgrade \\\n\t&& rm -rf /var/cache/apk/* \\\n    && rm -rf /tmp/*\n# =========\n# Configure\n# =========\nRUN set -ex\\\n    # && test ! -d /var/www \n\t&& mkdir -p /var/www \\\n\t&& chown -R www-data:www-data /var/www \\\t\n\t##\n\t&& rm -rf /var/log/mysql \\\n\t&& ln -s $MARIADB_LOG_DIR /var/log/mysql \\\n\t##\n\t&& rm -rf /var/log/nginx \\\n\t&& ln -s $NGINX_LOG_DIR /var/log/nginx\n\t##\n    # && ln -s ${HOME_SITE} /var/www/html \\\n    ##\t\n    # && ln -s ${PHPMYADMIN_HOME} /var/www/phpmyadmin\n#\t\n# ssh\nCOPY sshd_config /etc/ssh/\n# php\nCOPY php.ini /usr/local/etc/php/php.ini\nCOPY xdebug.ini /usr/local/etc/php/conf.d/xdebug.ini\nCOPY www.conf /usr/local/etc/php/conf.d/www.conf\nCOPY zz-docker.conf /usr/local/etc/php-fpm.d/zz-docker.conf\n# nginx\nCOPY nginx.conf /etc/nginx/nginx.conf\n#COPY default.conf /etc/nginx/conf.d/default.conf\nCOPY hostingstart.html /var/www/html/index.html\n# phpmyadmin\nCOPY phpmyadmin-config.inc.php $PHPMYADMIN_SOURCE/\nCOPY mariadb.cnf /etc/mysql/\nCOPY phpmyadmin-default.conf $PHPMYADMIN_SOURCE/phpmyadmin-default.conf\nRUN \\\n   echo \"<?php phpinfo();\" > /var/www/html/index.php\n# =====\n# final\n# =====\nCOPY init_container.sh /usr/local/bin/\nRUN chmod +x /usr/local/bin/init_container.sh\nEXPOSE 2222 80\nENTRYPOINT [\"init_container.sh\"]\n"
}