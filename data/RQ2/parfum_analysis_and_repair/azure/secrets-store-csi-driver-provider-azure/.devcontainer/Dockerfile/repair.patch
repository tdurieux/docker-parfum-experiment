diff --git a/Users/tdurieux/git/dinghy-experiment/data/evaluation/dockerfiles/azure/secrets-store-csi-driver-provider-azure/.devcontainer/Dockerfile b/Users/tdurieux/git/dinghy-experiment/data/evaluation/dockerfile_repair_results/azure/secrets-store-csi-driver-provider-azure/.devcontainer/Dockerfile/repaired.Dockerfile
index 5f35854..f79a531 100644
--- a/Users/tdurieux/git/dinghy-experiment/data/evaluation/dockerfiles/azure/secrets-store-csi-driver-provider-azure/.devcontainer/Dockerfile
+++ b/Users/tdurieux/git/dinghy-experiment/data/evaluation/dockerfile_repair_results/azure/secrets-store-csi-driver-provider-azure/.devcontainer/Dockerfile/repaired.Dockerfile
@@ -1,40 +1,40 @@
-#-------------------------------------------------------------------------------------------------------------
-# Copyright (c) Microsoft Corporation. All rights reserved.
-# Licensed under the MIT License. See https://go.microsoft.com/fwlink/?linkid=2090316 for license information.
-#-------------------------------------------------------------------------------------------------------------
-FROM golang:1.18
-
-# Avoid warnings by switching to noninteractive
-ENV DEBIAN_FRONTEND=noninteractive
-# JQ Version
-ENV JQ_VERSION='1.6'
-# Helm Version
-ARG HELM_VERSION=3.7.0
-#Kind Version
-ARG KIND_VERSION=0.12.0
-# Kubernetes Version for Kubectl
-ARG KUBERNETES_VERSION=1.22.2
-
-# This Dockerfile adds a non-root user with sudo access. Use the "remoteUser"
-# property in devcontainer.json to use it. On Linux, the container user's GID/UIDs
-# will be updated to match your local UID/GID (when using the dockerFile property).
-# See https://aka.ms/vscode-remote/containers/non-root-user for details.
-ARG USERNAME=vscode
-ARG USER_UID=1000
-ARG USER_GID=$USER_UID
-
-# Configure apt, install packages and tools
-RUN apt-get update \
-  && apt-get install -y apt-transport-https \
-  && apt-get -y install --no-install-recommends apt-utils gettext-base dnsutils dialog 2>&1 \
+#-------------------------------------------------------------------------------------------------------------
+# Copyright (c) Microsoft Corporation. All rights reserved.
+# Licensed under the MIT License. See https://go.microsoft.com/fwlink/?linkid=2090316 for license information.
+#-------------------------------------------------------------------------------------------------------------
+FROM golang:1.18
+
+# Avoid warnings by switching to noninteractive
+ENV DEBIAN_FRONTEND=noninteractive
+# JQ Version
+ENV JQ_VERSION='1.6'
+# Helm Version
+ARG HELM_VERSION=3.7.0
+#Kind Version
+ARG KIND_VERSION=0.12.0
+# Kubernetes Version for Kubectl
+ARG KUBERNETES_VERSION=1.22.2
+
+# This Dockerfile adds a non-root user with sudo access. Use the "remoteUser"
+# property in devcontainer.json to use it. On Linux, the container user's GID/UIDs
+# will be updated to match your local UID/GID (when using the dockerFile property).
+# See https://aka.ms/vscode-remote/containers/non-root-user for details.
+ARG USERNAME=vscode
+ARG USER_UID=1000
+ARG USER_GID=$USER_UID
+
+# Configure apt, install packages and tools
+RUN apt-get update \
+  && apt-get install --no-install-recommends -y apt-transport-https \
+  && apt-get -y install --no-install-recommends apt-utils gettext-base dnsutils dialog 2>&1 \
   #
   # Verify git, process tools, lsb-release (common in install instructions for CLIs) installed
-  && apt-get -y install git openssh-client vim less iproute2 procps lsb-release \
+  && apt-get -y --no-install-recommends install git openssh-client vim less iproute2 procps lsb-release \
   #
   # Install Go tools w/module support
-  && mkdir -p /tmp/gotools \
-  && cd /tmp/gotools \
-  && GO111MODULE=on go get -v golang.org/x/tools/gopls@latest 2>&1 \
+  && mkdir -p /tmp/gotools \
+  && cd /tmp/gotools \
+  && GO111MODULE=on go get -v golang.org/x/tools/gopls@latest 2>&1 \
   && GO111MODULE=on go get -v \
   honnef.co/go/tools/...@latest \
   golang.org/x/tools/cmd/gorename@latest \
@@ -55,77 +55,77 @@ RUN apt-get update \
   github.com/zmb3/gogetdoc@latest \
   github.com/fatih/gomodifytags@latest  \
   github.com/mgechev/revive@latest  \
-  github.com/go-delve/delve/cmd/dlv@latest 2>&1 \
+  github.com/go-delve/delve/cmd/dlv@latest 2>&1 \
   #
   # Install Go tools w/o module support
-  && go install github.com/golangci/golangci-lint/cmd/golangci-lint@latest 2>&1 \
+  && go install github.com/golangci/golangci-lint/cmd/golangci-lint@latest 2>&1 \
   #
   # Create a non-root user to use if preferred - see https://aka.ms/vscode-remote/containers/non-root-user.
-  && groupadd --gid $USER_GID $USERNAME \
-  && useradd -s /bin/bash --uid $USER_UID --gid $USER_GID -m $USERNAME \
+  && groupadd --gid $USER_GID $USERNAME \
+  && useradd -s /bin/bash --uid $USER_UID --gid $USER_GID -m $USERNAME \
   # [Optional] Add sudo support
-  && apt-get install -y sudo \
-  && echo $USERNAME ALL=\(root\) NOPASSWD:ALL > /etc/sudoers.d/$USERNAME \
-  && chmod 0440 /etc/sudoers.d/$USERNAME \
+  && apt-get install --no-install-recommends -y sudo \
+  && echo $USERNAME ALL=\(root\) NOPASSWD:ALL > /etc/sudoers.d/$USERNAME \
+  && chmod 0440 /etc/sudoers.d/$USERNAME \
   # Add write permission for /go/pkg
-  && chmod -R a+w /go/pkg
-
-
-# Install jq utility
+  && chmod -R a+w /go/pkg && rm -rf /var/lib/apt/lists/*;
+
+
+# Install jq utility
 RUN wget --no-check-certificate https://raw.githubusercontent.com/stedolan/jq/master/sig/jq-release.key -O /tmp/jq-release.key && \
   wget --no-check-certificate https://raw.githubusercontent.com/stedolan/jq/master/sig/v${JQ_VERSION}/jq-linux64.asc -O /tmp/jq-linux64.asc && \
-  wget --no-check-certificate https://github.com/stedolan/jq/releases/download/jq-${JQ_VERSION}/jq-linux64 -O /tmp/jq-linux64 && \
-  gpg --import /tmp/jq-release.key && \
-  gpg --verify /tmp/jq-linux64.asc /tmp/jq-linux64 && \
-  cp /tmp/jq-linux64 /usr/bin/jq && \
-  chmod +x /usr/bin/jq && \
-  rm -f /tmp/jq-release.key && \
-  rm -f /tmp/jq-linux64.asc && \
-  rm -f /tmp/jq-linux64
-
+  wget --no-check-certificate https://github.com/stedolan/jq/releases/download/jq-${JQ_VERSION}/jq-linux64 -O /tmp/jq-linux64 && \
+  gpg --batch --import /tmp/jq-release.key && \
+  gpg --batch --verify /tmp/jq-linux64.asc /tmp/jq-linux64 && \
+  cp /tmp/jq-linux64 /usr/bin/jq && \
+  chmod +x /usr/bin/jq && \
+  rm -f /tmp/jq-release.key && \
+  rm -f /tmp/jq-linux64.asc && \
+  rm -f /tmp/jq-linux64
+
 RUN wget https://github.com/mikefarah/yq/releases/download/3.3.0/yq_linux_amd64 -O /tmp/yq_linux_amd64 \
   && cp /tmp/yq_linux_amd64 /usr/bin/yq \
   && chmod +x /usr/bin/yq \
-  && rm -rf /tmp/yq_linux_amd64
-
-# Install Docker CE CLI
-RUN apt-get install -y apt-transport-https ca-certificates curl gnupg-agent software-properties-common lsb-release \
-  && curl -fsSL https://download.docker.com/linux/$(lsb_release -is | tr '[:upper:]' '[:lower:]')/gpg | (OUT=$(apt-key add - 2>&1) || echo $OUT) \
-  && add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/$(lsb_release -is | tr '[:upper:]' '[:lower:]') $(lsb_release -cs) stable" \
-  && apt-get update \
-  && apt-get install -y docker-ce-cli
-
-# Install Azure CLI
-RUN apt-get install -y apt-transport-https curl gnupg2 lsb-release \
-  && echo "deb [arch=amd64] https://packages.microsoft.com/repos/azure-cli/ $(lsb_release -cs) main" > /etc/apt/sources.list.d/azure-cli.list \
-  && curl -sL https://packages.microsoft.com/keys/microsoft.asc | apt-key add - 2>/dev/null \
-  && apt-get update \
-  && apt-get install -y azure-cli
-
-# Install Helm
-RUN mkdir -p /tmp/downloads/helm \
-  && curl -sL -o /tmp/downloads/helm.tar.gz https://get.helm.sh/helm-v${HELM_VERSION}-linux-amd64.tar.gz \
-  && tar -C /tmp/downloads/helm -zxvf /tmp/downloads/helm.tar.gz \
-  && mv /tmp/downloads/helm/linux-amd64/helm /usr/local/bin
-
-# Install Kubectl
-RUN curl -LO https://storage.googleapis.com/kubernetes-release/release/v${KUBERNETES_VERSION}/bin/linux/amd64/kubectl \
-  && chmod +x ./kubectl \
-  && mv kubectl /usr/bin/kubectl
-
-# Install Kind
-RUN curl -LO https://github.com/kubernetes-sigs/kind/releases/download/v${KIND_VERSION}/kind-linux-amd64 \
-  && chmod +x ./kind-linux-amd64 \
-  && mv ./kind-linux-amd64 /usr/bin/kind
-
-# clean up
+  && rm -rf /tmp/yq_linux_amd64
+
+# Install Docker CE CLI
+RUN apt-get install --no-install-recommends -y apt-transport-https ca-certificates curl gnupg-agent software-properties-common lsb-release \
+  && curl -fsSL https://download.docker.com/linux/$(lsb_release -is | tr '[:upper:]' '[:lower:]')/gpg | (OUT=$(apt-key add - 2>&1) || echo $OUT) \
+  && add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/$(lsb_release -is | tr '[:upper:]' '[:lower:]') $(lsb_release -cs) stable" \
+  && apt-get update \
+  && apt-get install --no-install-recommends -y docker-ce-cli && rm -rf /var/lib/apt/lists/*;
+
+# Install Azure CLI
+RUN apt-get install --no-install-recommends -y apt-transport-https curl gnupg2 lsb-release \
+  && echo "deb [arch=amd64] https://packages.microsoft.com/repos/azure-cli/ $(lsb_release -cs) main" > /etc/apt/sources.list.d/azure-cli.list \
+  && curl -f -sL https://packages.microsoft.com/keys/microsoft.asc | apt-key add - 2>/dev/null \
+  && apt-get update \
+  && apt-get install --no-install-recommends -y azure-cli && rm -rf /var/lib/apt/lists/*;
+
+# Install Helm
+RUN mkdir -p /tmp/downloads/helm \
+  && curl -f -sL -o /tmp/downloads/helm.tar.gz https://get.helm.sh/helm-v${HELM_VERSION}-linux-amd64.tar.gz \
+  && tar -C /tmp/downloads/helm -zxvf /tmp/downloads/helm.tar.gz \
+  && mv /tmp/downloads/helm/linux-amd64/helm /usr/local/bin && rm /tmp/downloads/helm.tar.gz
+
+# Install Kubectl
+RUN curl -f -LO https://storage.googleapis.com/kubernetes-release/release/v${KUBERNETES_VERSION}/bin/linux/amd64/kubectl \
+  && chmod +x ./kubectl \
+  && mv kubectl /usr/bin/kubectl
+
+# Install Kind
+RUN curl -f -LO https://github.com/kubernetes-sigs/kind/releases/download/v${KIND_VERSION}/kind-linux-amd64 \
+  && chmod +x ./kind-linux-amd64 \
+  && mv ./kind-linux-amd64 /usr/bin/kind
+
+# clean up
 RUN apt-get autoremove -y \
   && apt-get clean -y \
   && rm -rf /var/lib/apt/lists/* /go/src /tmp/gotools\
-  && rm -rf /tmp/downloads
-
-# Update this to "on" or "off" as appropriate
-ENV GO111MODULE=on
-
-# Switch back to dialog for any ad-hoc use of apt-get
-ENV DEBIAN_FRONTEND=dialog
+  && rm -rf /tmp/downloads
+
+# Update this to "on" or "off" as appropriate
+ENV GO111MODULE=on
+
+# Switch back to dialog for any ad-hoc use of apt-get
+ENV DEBIAN_FRONTEND=dialog