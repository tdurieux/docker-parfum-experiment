{
  "startTime": 1674220828969,
  "endTime": 1674220830492,
  "originalSmells": [
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 17,
        "lineEnd": 17,
        "columnStart": 4,
        "columnEnd": 28
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 17,
        "lineEnd": 17,
        "columnStart": 4,
        "columnEnd": 28
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 17,
        "lineEnd": 17,
        "columnStart": 4,
        "columnEnd": 28
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "{% from \"dockers/dockerfile-macros.j2\" import install_debian_packages, install_python_wheels, copy_files %}\nFROM docker-config-engine-bullseye-{{DOCKER_USERNAME}}:{{DOCKER_USERTAG}}\n\nARG docker_container_name\nARG image_version\nRUN [ -f /etc/rsyslog.conf ] && sed -ri \"s/%syslogtag%/$docker_container_name#%syslogtag%/;\" /etc/rsyslog.conf\n\n# Make apt-get non-interactive\nENV DEBIAN_FRONTEND=noninteractive\n\n# Pass the image_version to container\nENV IMAGE_VERSION=$image_version\n\n# Update apt's cache of available packages\nRUN apt-get update && apt-get -y --no-install-recommends install radvd && rm -rf /var/lib/apt/lists/*; # Install radvd Debian package\n\n\n{% if docker_router_advertiser_debs.strip() -%}\n# Copy built Debian packages\n{{ copy_files(\"debs/\", docker_router_advertiser_debs.split(' '), \"/debs/\") }}\n\n# Install built Debian packages and implicitly install their dependencies\n{{ install_debian_packages(docker_router_advertiser_debs.split(' ')) }}\n{%- endif %}\n\n# Clean up\nRUN apt-get clean -y        && \\\n    apt-get autoclean -y    && \\\n    apt-get autoremove -y   && \\\n    rm -rf /debs\n\nCOPY [\"start.sh\", \"/usr/bin/\"]\nCOPY [\"docker-init.sh\", \"/usr/bin/\"]\nCOPY [\"radvd.conf.j2\", \"wait_for_link.sh.j2\", \"docker-router-advertiser.supervisord.conf.j2\", \"/usr/share/sonic/templates/\"]\nCOPY [\"files/supervisor-proc-exit-listener\", \"/usr/bin\"]\nCOPY [\"critical_processes\", \"/etc/supervisor\"]\n\nENTRYPOINT [\"/usr/bin/docker-init.sh\"]\n"
}