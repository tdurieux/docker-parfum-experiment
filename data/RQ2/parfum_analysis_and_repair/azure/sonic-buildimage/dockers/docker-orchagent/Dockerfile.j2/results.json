{
  "startTime": 1674250700964,
  "endTime": 1674250701590,
  "originalSmells": [
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 34,
        "lineEnd": 36,
        "columnStart": 4,
        "columnEnd": 26
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 10,
        "lineEnd": 24,
        "columnStart": 4,
        "columnEnd": 19
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 28,
        "lineEnd": 30,
        "columnStart": 4,
        "columnEnd": 20
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 28,
        "lineEnd": 30,
        "columnStart": 4,
        "columnEnd": 20
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 10,
        "lineEnd": 24,
        "columnStart": 4,
        "columnEnd": 19
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 28,
        "lineEnd": 30,
        "columnStart": 4,
        "columnEnd": 20
      }
    }
  ],
  "repairedSmells": [
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 28,
        "lineEnd": 30,
        "columnStart": 4,
        "columnEnd": 20
      }
    }
  ],
  "repairedDockerfile": "{% from \"dockers/dockerfile-macros.j2\" import install_debian_packages, install_python_wheels, copy_files %}\nFROM docker-swss-layer-bullseye-{{DOCKER_USERNAME}}:{{DOCKER_USERTAG}}\n\nARG docker_container_name\nRUN [ -f /etc/rsyslog.conf ] && sed -ri \"s/%syslogtag%/$docker_container_name#%syslogtag%/;\" /etc/rsyslog.conf\n\n# Make apt-get non-interactive\nENV DEBIAN_FRONTEND=noninteractive\n\nRUN apt-get update && \\\n    apt-get install --no-install-recommends -f -y \\\n        ifupdown \\\n        arping \\\n        iproute2 \\\n        ndisc6 \\\n        tcpdump \\\n        libelf1 \\\n        libmnl0 \\\n        bridge-utils \\\n        conntrack \\\n        ndppd \\\n        pciutils \\\n\n        build-essential \\\n        python3-dev && rm -rf /var/lib/apt/lists/*;\n\n{% if ( CONFIGURED_ARCH == \"armhf\" or CONFIGURED_ARCH == \"arm64\" ) %}\n# Fix for gcc/python/iputils-ping not found in arm docker\nRUN apt-get install --no-install-recommends -y \\\n        gcc \\\n        iputils-ping && rm -rf /var/lib/apt/lists/*;\n{% endif %}\n\n# Dependencies of restore_neighbors.py\nRUN pip3 install --no-cache-dir \\\n         pyroute2==0.5.14 \\\n         netifaces==0.10.9\n\n{% if ( CONFIGURED_ARCH == \"armhf\" or CONFIGURED_ARCH == \"arm64\" ) %}\n# Remove installed gcc\nRUN apt-get remove -y gcc\n{% endif %}\n\n{% if docker_orchagent_debs.strip() -%}\n# Copy locally-built Debian package dependencies\n{{ copy_files(\"debs/\", docker_orchagent_debs.split(' '), \"/debs/\") }}\n\n# Install locally-built Debian packages and implicitly install their dependencies\n{{ install_debian_packages(docker_orchagent_debs.split(' ')) }}\n{%- endif %}\n\n{% if docker_orchagent_whls.strip() -%}\n# Copy locally-built Python wheel dependencies\n{{ copy_files(\"python-wheels/\", docker_orchagent_whls.split(' '), \"/python-wheels/\") }}\n\n# Install locally-built Python wheel dependencies\n{{ install_python_wheels(docker_orchagent_whls.split(' ')) }}\n{% endif %}\n\n# Clean up\nRUN apt-get purge -y          \\\n        build-essential       \\\n        python3-dev        && \\\n    apt-get clean -y       && \\\n    apt-get autoclean -y   && \\\n    apt-get autoremove -y  && \\\n    rm -rf /debs ~/.cache\n\nCOPY [\"files/arp_update\", \"/usr/bin\"]\nCOPY [\"arp_update.conf\", \"files/arp_update_vars.j2\", \"/usr/share/sonic/templates/\"]\nCOPY [\"ndppd.conf\", \"/usr/share/sonic/templates/\"]\nCOPY [\"enable_counters.py\", \"tunnel_packet_handler.py\", \"/usr/bin/\"]\nCOPY [\"orchagent.sh\", \"swssconfig.sh\", \"buffermgrd.sh\", \"/usr/bin/\"]\nCOPY [\"files/supervisor-proc-exit-listener\", \"/usr/bin\"]\n\n# Copy all Jinja2 template files into the templates folder\nCOPY [\"*.j2\", \"/usr/share/sonic/templates/\"]\n\nRUN sonic-cfggen -a \"{\\\"ENABLE_ASAN\\\":\\\"{{ENABLE_ASAN}}\\\"}\" -t /usr/share/sonic/templates/docker-init.j2 > /usr/bin/docker-init.sh\nRUN rm -f /usr/share/sonic/templates/docker-init.j2\nRUN chmod 755 /usr/bin/docker-init.sh\n\nENTRYPOINT [\"/usr/bin/docker-init.sh\"]\n"
}