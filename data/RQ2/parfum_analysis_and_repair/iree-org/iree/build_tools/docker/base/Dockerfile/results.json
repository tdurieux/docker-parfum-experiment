{
  "startTime": 1674247096496,
  "endTime": 1674247100553,
  "originalSmells": [
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 147,
        "lineEnd": 147,
        "columnStart": 5,
        "columnEnd": 80
      }
    },
    {
      "rule": "gpgUseBatchFlag",
      "position": {
        "lineStart": 83,
        "lineEnd": 83,
        "columnStart": 4,
        "columnEnd": 44
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 20,
        "lineEnd": 47,
        "columnStart": 5,
        "columnEnd": 12
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 88,
        "lineEnd": 88,
        "columnStart": 5,
        "columnEnd": 49
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 105,
        "lineEnd": 107,
        "columnStart": 5,
        "columnEnd": 17
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 109,
        "lineEnd": 114,
        "columnStart": 5,
        "columnEnd": 18
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 176,
        "lineEnd": 176,
        "columnStart": 5,
        "columnEnd": 35
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 20,
        "lineEnd": 47,
        "columnStart": 5,
        "columnEnd": 12
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 88,
        "lineEnd": 88,
        "columnStart": 5,
        "columnEnd": 49
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 105,
        "lineEnd": 107,
        "columnStart": 5,
        "columnEnd": 17
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 109,
        "lineEnd": 114,
        "columnStart": 5,
        "columnEnd": 18
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 176,
        "lineEnd": 176,
        "columnStart": 5,
        "columnEnd": 35
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# Copyright 2020 The IREE Authors\n#\n# Licensed under the Apache License v2.0 with LLVM Exceptions.\n# See https://llvm.org/LICENSE.txt for license information.\n# SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception\n\nFROM ubuntu@sha256:fd25e706f3dea2a5ff705dbc3353cf37f08307798f3e360a13e9385840f73fb3\n\n# Disable apt-key parse waring. If someone knows how to do whatever the \"proper\"\n# thing is then feel free. The warning complains about parsing apt-key output,\n# which we're not even doing.\nARG APT_KEY_DONT_WARN_ON_DANGEROUS_USAGE=1\n\n######## Basic stuff ########\n# Default compiler environment variables for IREE.\n# Matches the version of clang installed below.\nENV CC /usr/bin/clang-9\nENV CXX /usr/bin/clang++-9\n\nRUN apt-get update \\\n  && apt-get install --no-install-recommends -y \\\n    # For updating IREE's submodules.\n    git \\\n    # Install our minimum supported clang version.\n    clang-9 \\\n    lld-9 \\\n    # IREE transitive dependencies\n    libsdl2-dev \\\n    libssl-dev \\\n    # A much better CMake builder\n    ninja-build \\\n    # For building child images. Best practices would tell us to use multi-stage\n    # builds (https://docs.docker.com/develop/develop-images/multistage-build/)\n    # but it turns out that Dockerfile is a thoroughly non-composable awful\n    # format and that doesn't actually work that well. These deps are pretty\n    # small.\n    unzip \\\n    wget \\\n    gnupg2 \\\n    # Needed for installing Bazel, per https://bazel.build/install/ubuntu\n    apt-transport-https \\\n    curl \\\n    gnupg \\\n    # Needed for building lld with Bazel (as currently configured)\n    libxml2-dev \\\n    # Optional for tools like llvm-symbolizer, which we could build from\n    # source but would rather just have available ahead of time\n    llvm-dev \\\n    # Someone is welcome to tell me a better way to just install lld-9 as lld\n    # (lld=9 doesn't work)\n    && ln -s lld-9 /usr/bin/lld \\\n    && ln -s ld.lld-9 /usr/bin/ld.lld && rm -rf /var/lib/apt/lists/*;\n\n######## CMake ########\nWORKDIR /install-cmake\n\n# These are separate args because there's no way to strip the patch version off\n# to get the /usr/share path.\n# See https://github.com/moby/moby/issues/41383\nARG CMAKE_MAJOR_VERSION=3\nARG CMAKE_MINOR_VERSION=21\nARG CMAKE_PATCH_VERSION=6\n\nENV CMAKE_VERSION=\"${CMAKE_MAJOR_VERSION}.${CMAKE_MINOR_VERSION}.${CMAKE_PATCH_VERSION}\"\n\n# Install our CMake version, which may be ahead of apt-get's version.\nRUN wget \"https://github.com/Kitware/CMake/releases/download/v${CMAKE_VERSION?}/cmake-${CMAKE_VERSION?}-Linux-x86_64.sh\" \\\n    && chmod +x \"./cmake-${CMAKE_VERSION?}-Linux-x86_64.sh\" \\\n    && \"./cmake-${CMAKE_VERSION?}-Linux-x86_64.sh\" --skip-license --prefix=/usr/  \\\n    && rm -rf /install-cmake\n\n##############\n\n######## Bazel ########\nWORKDIR /install-bazel\n# Making a required Bazel version change? Most images derive from this one\n# and will get it automatically. However these don't. Please update them as\n# well:\n#   manylinux2014_x86_64-release\nARG BAZEL_VERSION=5.1.0\n\n# https://bazel.build/install/ubuntu\nRUN curl -fsSL https://bazel.build/bazel-release.pub.gpg \\\n  | gpg --batch --dearmor >bazel-archive-keyring.gpg \\\n  && mv bazel-archive-keyring.gpg /usr/share/keyrings \\\n  && echo \"deb [arch=amd64 signed-by=/usr/share/keyrings/bazel-archive-keyring.gpg] https://storage.googleapis.com/bazel-apt stable jdk1.8\" \\\n  | tee /etc/apt/sources.list.d/bazel.list \\\n  && apt-get update \\\n  && apt-get install --no-install-recommends -y \"bazel=${BAZEL_VERSION?}\" \\\n  && rm -rf /install-bazel && rm -rf /var/lib/apt/lists/*;\n\n##############\n\n######## Python ########\n# Note that we use --ignore-installed when installing packages that may have\n# been auto-installed by the OS package manager (i.e. PyYAML is often an\n# implicit OS-level dep). This should not break so long as we do not\n# subsequently reinstall it on the OS side. Failing to do this will yield a\n# hard error with pip along the lines of:\n#   Cannot uninstall 'PyYAML'. It is a distutils installed project and thus we\n#   cannot accurately determine which files belong to it which would lead to\n#   only a partial uninstall.\nWORKDIR /install-python\n\nRUN apt-get update \\\n  && apt-get install --no-install-recommends -y \\\n    python3.7 \\\n    python3.7-dev \\\n  && update-alternatives --install /usr/bin/python3 python3 /usr/bin/python3.7 1 \\\n  && apt-get install --no-install-recommends -y \\\n    python3-pip \\\n    python3-setuptools \\\n    python3-distutils \\\n    python3-venv \\\n    python3.7-venv \\\n  && python3 -m pip install --upgrade pip>=21.3 \\\n  && python3 -m pip install --upgrade setuptools \\\n  # Versions for things required to build IREE should match the minimum versions\n  # in runtime/bindings/python/iree/runtime/build_requirements.txt\n  && python3 -m pip install --ignore-installed \\\n    # For building\n    numpy==1.19.4 \\\n    PyYAML==5.4.1 \\\n    wheel==0.36.2 \\\n    pybind11==2.8.0 \\\n    # For scripting only\n    requests && rm -rf /var/lib/apt/lists/*;\n\nENV PYTHON_BIN /usr/bin/python3\n\n##############\n\n######## IREE CUDA DEPS ########\nCOPY fetch_cuda_deps.sh /usr/local/bin\nRUN /usr/local/bin/fetch_cuda_deps.sh /usr/local/iree_cuda_deps\nENV IREE_CUDA_DEPS_DIR=\"/usr/local/iree_cuda_deps\"\n##############\n\n######## Vulkan ########\nWORKDIR /install-vulkan\nARG VULKAN_SDK_VERSION=1.2.154.0\n\nRUN wget -q \\\n  # This file disappeared from the canonical source:\n  # \"https://sdk.lunarg.com/sdk/download/${VULKAN_SDK_VERSION?}/linux/vulkansdk-linux-${VULKAN_SDK_VERSION?}.tar.gz\"\n  \"https://storage.googleapis.com/iree-shared-files/vulkansdk-linux-${VULKAN_SDK_VERSION?}.tar.gz\" \\\n  && mkdir -p /opt/vulkan-sdk \\\n  && tar -xzf \"vulkansdk-linux-${VULKAN_SDK_VERSION?}.tar.gz\" -C /opt/vulkan-sdk \\\n  && rm -rf /install-vulkan && rm \"vulkansdk-linux-${VULKAN_SDK_VERSION?}.tar.gz\"\nWORKDIR /\n\nENV VULKAN_SDK=\"/opt/vulkan-sdk/${VULKAN_SDK_VERSION}/x86_64\"\n\nENV PATH=\"${VULKAN_SDK}/bin:$PATH\"\n\n# Symlink the Vulkan loader to a system library directory. This is needed to\n# allow Vulkan applications to find the Vulkan loader. It also avoids using\n# LD_LIBRARY_PATH, which is not supported well by Docker.\nRUN ln -s \"${VULKAN_SDK}/lib/libvulkan.so\" /usr/lib/x86_64-linux-gnu/ \\\n  && ln -s \"${VULKAN_SDK}/lib/libvulkan.so.1\" /usr/lib/x86_64-linux-gnu/\n\n##############\n\n\n######## GCC ########\nWORKDIR /\n\n# Avoid apt-add-repository, which requires software-properties-common, which is\n# a rabbit hole of python version compatibility issues. See\n# https://mondwan.blogspot.com/2018/05/alternative-for-add-apt-repository-for.html\n# We use gcc-9 because it's what manylinux had (at time of authorship) and\n# we don't aim to support older versions. We need a more modern lld to handle\n# --push-state flags\nRUN echo \"deb http://ppa.launchpad.net/ubuntu-toolchain-r/test/ubuntu bionic main\" >> /etc/apt/sources.list  \\\n  && apt-key adv --keyserver keyserver.ubuntu.com --recv-keys 1E9377A2BA9EF27F \\\n  && apt-get update \\\n  && apt-get install --no-install-recommends -y gcc-9 g++-9 && rm -rf /var/lib/apt/lists/*;\n\n##############\n\nWORKDIR /\n"
}