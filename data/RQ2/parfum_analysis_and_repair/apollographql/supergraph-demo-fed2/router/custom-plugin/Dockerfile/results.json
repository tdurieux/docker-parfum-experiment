{
  "startTime": 1674249534650,
  "endTime": 1674249535155,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 4,
        "lineEnd": 4,
        "columnStart": 4,
        "columnEnd": 76
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 3,
        "lineEnd": 3,
        "columnStart": 4,
        "columnEnd": 23
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 3,
        "lineEnd": 3,
        "columnStart": 4,
        "columnEnd": 23
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 3,
        "lineEnd": 3,
        "columnStart": 4,
        "columnEnd": 23
      }
    }
  ],
  "repairedSmells": [
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 3,
        "lineEnd": 3,
        "columnStart": 4,
        "columnEnd": 47
      }
    }
  ],
  "repairedDockerfile": "FROM --platform=linux/amd64 rust:1.62 as build\n\nENV NODE_VERSION=16.13.0\nRUN apt install --no-install-recommends -y curl && rm -rf /var/lib/apt/lists/*;\nRUN curl -f -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.0/install.sh | bash\nENV NVM_DIR=/root/.nvm\nRUN . \"$NVM_DIR/nvm.sh\" && nvm install ${NODE_VERSION}\nRUN . \"$NVM_DIR/nvm.sh\" && nvm use v${NODE_VERSION}\nRUN . \"$NVM_DIR/nvm.sh\" && nvm alias default v${NODE_VERSION}\nENV PATH=\"/root/.nvm/versions/node/v${NODE_VERSION}/bin/:${PATH}\"\nRUN node --version\nRUN npm --version\n\nENV RUST_BACKTRACE=full\n\n# create a new empty shell project\nRUN USER=root cargo new --bin acme_router\n\nWORKDIR /acme_router\n\nRUN rustup component add rustfmt\n\n# copy over your manifests\nCOPY ./Cargo.lock ./Cargo.lock\nCOPY ./Cargo.toml ./Cargo.toml\n\n# this build step will cache your dependencies\nRUN cargo build --release\nRUN rm src/*.rs\n\n# copy your source tree\nCOPY ./src ./src\n\n# build for release\nRUN rm ./target/release/deps/acme_router*\nRUN cargo build --release\n\nRUN mkdir -p /dist/config && mkdir -p /dist/schema\n\n# our final image uses distroless, which is more secure by default\nFROM --platform=linux/amd64 gcr.io/distroless/cc-debian11\n\n# if you want bin/sh you'll want a distro that includes it instead\n#FROM --platform=linux/amd64 debian:bullseye\n\n# copy the build artifact from the build stage\nCOPY --from=build /dist /dist\nCOPY --from=build --chown=root:root /acme_router/target/release/acme_router /dist\n\nWORKDIR /dist\n\n# for faster docker shutdown\nSTOPSIGNAL SIGINT\n\n# set the startup command to run your binary\n# note: if you want sh you can override the entrypoint using docker run -it --entrypoint=sh my-router-image\nENTRYPOINT [\"./acme_router\"]\n\n"
}