{
  "startTime": 1674250517467,
  "endTime": 1674250518578,
  "originalSmells": [
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 13,
        "lineEnd": 13,
        "columnStart": 4,
        "columnEnd": 71
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 19,
        "lineEnd": 19,
        "columnStart": 4,
        "columnEnd": 233
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 13,
        "lineEnd": 13,
        "columnStart": 4,
        "columnEnd": 71
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 19,
        "lineEnd": 19,
        "columnStart": 4,
        "columnEnd": 233
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM ubuntu:20.04 as builder\n\nENV SHELL /bin/bash\nENV BASH_ENV /etc/bash.bashrc\nENV DEBIAN_FRONTEND noninteractive\nENV PATH /opt/rocm/bin:/opt/conda/bin:${PATH}\nENV LD_LIBRARY_PATH /opt/rocm/lib:${LD_LIBRARY_PATH}\nENV CMAKE_PREFIX_PATH /opt/rocm\n\nWORKDIR /tmp/build\n\nRUN apt-get update && \\\n    apt-get dist-upgrade -y && \\\n    apt-get install --no-install-recommends -y software-properties-common wget curl gnupg2 kmod && \\\n    wget -q -O - https://repo.radeon.com/rocm/rocm.gpg.key | apt-key add - && \\\n    add-apt-repository -u -y ppa:ubuntu-toolchain-r/test && \\\n    echo 'deb [arch=amd64] https://repo.radeon.com/rocm/apt/4.3/ ubuntu main' | tee /etc/apt/sources.list.d/rocm.list && \\\n    apt-get update && \\\n    apt-get dist-upgrade -y && \\\n    apt-get install --no-install-recommends -y build-essential python3 google-perftools likwid git-core bash-completion rocm-dev libnuma-dev libboost1.71-all-dev libtbb-dev libgoogle-perftools-dev libunwind-dev libmpich-dev libpapi-dev libpfm4-dev libdw-dev && rm -rf /var/lib/apt/lists/*;\n\nSHELL [ \"/bin/bash\", \"--login\", \"-c\" ]\n\nENV CC=cc\nENV CXX=hipcc\nENV FC=gfortran\n\nRUN wget https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh -O miniconda.sh && \\\n    bash miniconda.sh -b -p /opt/conda && \\\n    conda init bash && \\\n    conda config --set always_yes no --set changeps1 no && \\\n    conda update -y -c defaults -n base conda && \\\n    conda install -y -n base -c conda-forge -c defaults python=3.8 cmake=3.20.5 scikit-build numpy matplotlib-base pillow cython pip\n\nRUN git clone https://github.com/NERSC/timemory.git timemory-source && \\\n    which -a python && \\\n    cd timemory-source && \\\n    python setup.py install \\\n        --enable-{caliper,hip,likwid,gotcha,mpi,gperftools,papi,perfetto,kokkos,kokkos-config,dyninst,build-dyninst} \\\n        --build-type=RelWithDebInfo \\\n        -G Unix\\ Makefiles \\\n        -j 12 \\\n        -- -DDYNINST_BUILD_{ELFUTILS,LIBIBERTY}=ON -DCALIPER_WITH_{LIBUNWIND,LIBDW,LIBPFM,SAMPLER,MPI,MPIT,ROCM,PAPI}=ON && \\\n    python -m pip install -r .requirements/runtime.txt && \\\n    python -m pip install -r .requirements/mpi_runtime.txt\n\nRUN apt-get autoclean && \\\n    apt-get autoremove --purge && \\\n    conda clean -a -y && \\\n    rm -rf /tmp/*\n\n# Bare OS image to run the installed executables\nFROM ubuntu:20.04\n\nCOPY --from=builder / /\n\nRUN echo 'export PS1=\"\\[$(tput bold)\\]\\[$(tput setaf 1)\\][timemory]\\[$(tput setaf 2)\\] \\u\\[$(tput sgr0)\\]:\\w $ \\[$(tput sgr0)\\]\"' >> ~/.bashrc\n\nENV HOME /home\nENV LANG en_US.UTF-8\nENV LANGUAGE en_US\nENV LC_ALL C\nENV SHELL /bin/bash\nENV BASH_ENV /etc/bash.bashrc\nENV DEBIAN_FRONTEND noninteractive\n\nWORKDIR /home\nSHELL [ \"/bin/bash\", \"--login\", \"-c\" ]\n\n# ENTRYPOINT [ \"/runtime-entrypoint.sh\" ]\nENTRYPOINT [\"/bin/bash\", \"--rcfile\", \"/etc/profile\", \"-l\"]\n"
}