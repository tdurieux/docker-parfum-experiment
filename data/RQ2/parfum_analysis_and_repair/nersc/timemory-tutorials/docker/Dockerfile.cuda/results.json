{
  "startTime": 1674251349784,
  "endTime": 1674251350784,
  "originalSmells": [
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 12,
        "lineEnd": 12,
        "columnStart": 4,
        "columnEnd": 66
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 20,
        "lineEnd": 20,
        "columnStart": 4,
        "columnEnd": 219
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 12,
        "lineEnd": 12,
        "columnStart": 4,
        "columnEnd": 66
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 20,
        "lineEnd": 20,
        "columnStart": 4,
        "columnEnd": 219
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM ubuntu:20.04 as builder\n\nENV SHELL /bin/bash\nENV BASH_ENV /etc/bash.bashrc\nENV DEBIAN_FRONTEND noninteractive\nENV PATH /usr/local/cuda/bin:/opt/conda/bin:${PATH}\nENV LD_LIBRARY_PATH /usr/local/cuda/lib:${LD_LIBRARY_PATH}\n\nWORKDIR /tmp/build\n\nRUN apt-get update && \\\n    apt-get dist-upgrade -y && \\\n    apt-get install --no-install-recommends -y software-properties-common wget curl gnupg2 && \\\n    wget -O /etc/apt/preferences.d/cuda-repository-pin-600 https://developer.download.nvidia.com/compute/cuda/repos/ubuntu2004/x86_64/cuda-ubuntu2004.pin && \\\n    wget https://developer.download.nvidia.com/compute/cuda/11.4.0/local_installers/cuda-repo-ubuntu2004-11-4-local_11.4.0-470.42.01-1_amd64.deb && \\\n    dpkg -i cuda-repo-ubuntu2004-11-4-local_11.4.0-470.42.01-1_amd64.deb && \\\n    apt-key add /var/cuda-repo-ubuntu2004-11-4-local/7fa2af80.pub && \\\n    add-apt-repository -u -y ppa:ubuntu-toolchain-r/test && \\\n    apt-get update && \\\n    apt-get dist-upgrade -y && \\\n    apt-get install --no-install-recommends -y build-essential python3 google-perftools likwid git-core bash-completion cuda libboost1.71-all-dev libtbb-dev libgoogle-perftools-dev libunwind-dev libopenmpi-dev libpapi-dev libpfm4-dev libdw-dev && rm -rf /var/lib/apt/lists/*;\n\nSHELL [ \"/bin/bash\", \"--login\", \"-c\" ]\n\nENV CC=cc\nENV CXX=c++\nENV FC=gfortran\nENV CUDACXX=nvcc\n\nRUN wget https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh -O miniconda.sh && \\\n    bash miniconda.sh -b -p /opt/conda && \\\n    conda init bash && \\\n    conda config --set always_yes no --set changeps1 no && \\\n    conda update -y -c defaults -n base conda && \\\n    conda install -y -n base -c conda-forge -c defaults python=3.8 cmake=3.20.5 scikit-build numpy matplotlib-base pillow cython pip\n\nRUN git clone https://github.com/NERSC/timemory.git timemory-source && \\\n    which -a python && \\\n    cd timemory-source && \\\n    python setup.py install \\\n        --enable-{caliper,cuda,cupti,likwid,gotcha,mpi,gperftools,papi,perfetto,dyninst,build-dyninst} \\\n        --build-type=RelWithDebInfo \\\n        -G Unix\\ Makefiles \\\n        -j 12 \\\n        -- -DDYNINST_BUILD_{ELFUTILS,LIBIBERTY}=ON -DCALIPER_WITH_{LIBUNWIND,LIBDW,LIBPFM,SAMPLER,MPI,MPIT,NVTX,PAPI}=ON && \\\n    python -m pip install -r .requirements/runtime.txt && \\\n    python -m pip install -r .requirements/mpi_runtime.txt\n\nRUN apt-get autoclean && \\\n    apt-get autoremove --purge && \\\n    conda clean -a -y && \\\n    rm -rf /tmp/*\n\n# Bare OS image to run the installed executables\nFROM ubuntu:20.04\n\nCOPY --from=builder / /\n\nRUN echo 'export PS1=\"\\[$(tput bold)\\]\\[$(tput setaf 1)\\][timemory]\\[$(tput setaf 2)\\] \\u\\[$(tput sgr0)\\]:\\w $ \\[$(tput sgr0)\\]\"' >> ~/.bashrc && \\\n    cp ~/.bashrc /etc/profile.d/x10_bashrc.sh\n\nENV LANG en_US.UTF-8\nENV LANGUAGE en_US\nENV LC_ALL C\nENV SHELL /bin/bash\nENV BASH_ENV /etc/bash.bashrc\nENV DEBIAN_FRONTEND noninteractive\n\nENV PATH /opt/conda/bin:${PATH}:/usr/local/cuda/bin\nENV CUDA_HOME \"/usr/local/cuda-11.4\"\nENV NVIDIA_REQUIRE_CUDA \"cuda>=11.4\"\nENV NVIDIA_VISIBLE_DEVICES \"all\"\nENV NVIDIA_DRIVER_CAPABILITIES \"compute,utility\"\n\nWORKDIR /home\nSHELL [ \"/bin/bash\", \"--login\", \"-c\" ]\n\nENTRYPOINT [\"/bin/bash\", \"--rcfile\", \"/etc/profile\", \"-l\"]\n"
}