{
  "startTime": 1674250173978,
  "endTime": 1674250175879,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 82,
        "lineEnd": 82,
        "columnStart": 7,
        "columnEnd": 73
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 143,
        "lineEnd": 143,
        "columnStart": 30,
        "columnEnd": 147
      }
    },
    {
      "rule": "curlUseHttpsUrl",
      "position": {
        "lineStart": 82,
        "lineEnd": 82,
        "columnStart": 7,
        "columnEnd": 73
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 167,
        "lineEnd": 174,
        "columnStart": 7,
        "columnEnd": 69
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 32,
        "lineEnd": 32,
        "columnStart": 7,
        "columnEnd": 84
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 223,
        "lineEnd": 223,
        "columnStart": 4,
        "columnEnd": 71
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 32,
        "lineEnd": 32,
        "columnStart": 7,
        "columnEnd": 84
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 41,
        "lineEnd": 45,
        "columnStart": 7,
        "columnEnd": 42
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 50,
        "lineEnd": 57,
        "columnStart": 7,
        "columnEnd": 48
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 87,
        "lineEnd": 87,
        "columnStart": 7,
        "columnEnd": 76
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 208,
        "lineEnd": 210,
        "columnStart": 4,
        "columnEnd": 34
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 214,
        "lineEnd": 220,
        "columnStart": 4,
        "columnEnd": 51
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 223,
        "lineEnd": 223,
        "columnStart": 4,
        "columnEnd": 71
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "##\n# osgeo/gdal:ubuntu-small\n\n# This file is available at the option of the licensee under:\n# Public domain\n# or licensed under X/MIT (LICENSE.TXT) Copyright 2019 Even Rouault <even.rouault@spatialys.com>\n\nARG PROJ_INSTALL_PREFIX=/usr/local\nARG BASE_IMAGE=ubuntu:20.04\nARG TARGET_BASE_IMAGE=ubuntu:20.04\n\nFROM $BASE_IMAGE as builder\n\n# Derived from osgeo/proj by Howard Butler <howard@hobu.co>\nLABEL maintainer=\"Even Rouault <even.rouault@spatialys.com>\"\n\nARG TARGET_ARCH=\nRUN echo ${TARGET_ARCH}\nCOPY ./bh-set-envvars.sh /buildscripts/bh-set-envvars.sh\n\nRUN . /buildscripts/bh-set-envvars.sh \\\n    && if test \"${TARGET_ARCH}\" != \"\"; then \\\n    rm -f /etc/apt/sources.list \\\n    && echo \"deb [arch=amd64] http://us.archive.ubuntu.com/ubuntu/ focal main restricted universe multiverse\" >> /etc/apt/sources.list \\\n    && echo \"deb [arch=amd64] http://us.archive.ubuntu.com/ubuntu/ focal-updates main restricted universe multiverse\" >> /etc/apt/sources.list \\\n    && echo \"deb [arch=amd64] http://us.archive.ubuntu.com/ubuntu/ focal-backports main restricted universe multiverse\" >> /etc/apt/sources.list \\\n    && echo \"deb [arch=amd64] http://security.ubuntu.com/ubuntu focal-security main restricted universe multiverse\" >> /etc/apt/sources.list \\\n    && echo \"deb [arch=${TARGET_ARCH}] http://ports.ubuntu.com/ubuntu-ports/ focal main restricted universe multiverse\" >> /etc/apt/sources.list \\\n    && echo \"deb [arch=${TARGET_ARCH}] http://ports.ubuntu.com/ubuntu-ports/ focal-updates main restricted universe multiverse\" >> /etc/apt/sources.list \\\n    && echo \"deb [arch=${TARGET_ARCH}] http://ports.ubuntu.com/ubuntu-ports/ focal-security main restricted universe multiverse\" >> /etc/apt/sources.list \\\n    && dpkg --add-architecture ${TARGET_ARCH} \\\n    && apt-get update -y \\\n    && DEBIAN_FRONTEND=noninteractive apt-get --no-install-recommends install -y g++-9-${GCC_ARCH}-linux-gnu \\\n    && ln -s ${GCC_ARCH}-linux-gnu-gcc-9 /usr/bin/${GCC_ARCH}-linux-gnu-gcc \\\n    && ln -s ${GCC_ARCH}-linux-gnu-g++-9 /usr/bin/${GCC_ARCH}-linux-gnu-g++; rm -rf /var/lib/apt/lists/*; \\\n    fi\n\n# Setup build env for PROJ\nUSER root\nRUN . /buildscripts/bh-set-envvars.sh \\\n    && apt-get update -y \\\n    && DEBIAN_FRONTEND=noninteractive apt-get install -y --fix-missing --no-install-recommends \\\n            build-essential ca-certificates \\\n            git make cmake wget unzip libtool automake \\\n            zlib1g-dev${APT_ARCH_SUFFIX} libsqlite3-dev${APT_ARCH_SUFFIX} pkg-config sqlite3 libcurl4-gnutls-dev${APT_ARCH_SUFFIX} \\\n            libtiff5-dev${APT_ARCH_SUFFIX} && rm -rf /var/lib/apt/lists/*;\n\n# Setup build env for GDAL\nRUN . /buildscripts/bh-set-envvars.sh \\\n    && apt-get update -y \\\n    && DEBIAN_FRONTEND=noninteractive apt-get install -y --fix-missing --no-install-recommends \\\n       python3-dev${APT_ARCH_SUFFIX} python3-numpy${APT_ARCH_SUFFIX} python3-setuptools${APT_ARCH_SUFFIX} \\\n       libjpeg-dev${APT_ARCH_SUFFIX} libgeos-dev${APT_ARCH_SUFFIX} \\\n       libexpat-dev${APT_ARCH_SUFFIX} libxerces-c-dev${APT_ARCH_SUFFIX} \\\n       libwebp-dev${APT_ARCH_SUFFIX} libpng-dev${APT_ARCH_SUFFIX} \\\n       libzstd-dev${APT_ARCH_SUFFIX} bash zip curl \\\n       libpq-dev${APT_ARCH_SUFFIX} libssl-dev${APT_ARCH_SUFFIX} libopenjp2-7-dev${APT_ARCH_SUFFIX} \\\n       autoconf automake sqlite3 bash-completion && rm -rf /var/lib/apt/lists/*;\n\n# Build openjpeg\nARG OPENJPEG_VERSION=\nRUN . /buildscripts/bh-set-envvars.sh \\\n    && if test \"${OPENJPEG_VERSION}\" != \"\"; then ( \\\n    wget -q https://github.com/uclouvain/openjpeg/archive/v${OPENJPEG_VERSION}.tar.gz \\\n    && tar xzf v${OPENJPEG_VERSION}.tar.gz \\\n    && rm -f v${OPENJPEG_VERSION}.tar.gz \\\n    && cd openjpeg-${OPENJPEG_VERSION} \\\n    && cmake . -DBUILD_SHARED_LIBS=ON  -DBUILD_STATIC_LIBS=OFF -DCMAKE_BUILD_TYPE=Release \\\n        -DCMAKE_INSTALL_PREFIX=/usr \\\n    && make -j$(nproc) \\\n    && make install \\\n    && mkdir -p /build_thirdparty/usr/lib \\\n    && cp -P /usr/lib/libopenjp2*.so* /build_thirdparty/usr/lib \\\n    && for i in /build_thirdparty/usr/lib/*; do strip -s $i 2>/dev/null || /bin/true; done \\\n    && cd .. \\\n    && rm -rf openjpeg-${OPENJPEG_VERSION} \\\n    ); fi\n\nARG PROJ_INSTALL_PREFIX\nARG PROJ_DATUMGRID_LATEST_LAST_MODIFIED\nRUN \\\n    mkdir -p /build_projgrids/${PROJ_INSTALL_PREFIX}/share/proj \\\n    && curl -f -LOs https://download.osgeo.org/proj/proj-datumgrid-latest.zip \\\n    && unzip -q -j -u -o proj-datumgrid-latest.zip  -d /build_projgrids/${PROJ_INSTALL_PREFIX}/share/proj \\\n    && rm -f *.zip\n\nRUN apt-get update -y \\\n    && apt-get install -y --fix-missing --no-install-recommends rsync ccache && rm -rf /var/lib/apt/lists/*;\nARG RSYNC_REMOTE\n\n# Build PROJ\nARG PROJ_VERSION=master\nRUN . /buildscripts/bh-set-envvars.sh \\\n    && mkdir proj \\\n    && wget -q https://github.com/OSGeo/PROJ/archive/${PROJ_VERSION}.tar.gz -O - \\\n        | tar xz -C proj --strip-components=1 \\\n    && cd proj \\\n    && if test \"${RSYNC_REMOTE}\" != \"\"; then \\\n        echo \"Downloading cache...\"; \\\n        rsync -ra ${RSYNC_REMOTE}/proj/${GCC_ARCH}/ $HOME/; \\\n        echo \"Finished\"; \\\n        export CC=\"ccache ${GCC_ARCH}-linux-gnu-gcc\"; \\\n        export CXX=\"ccache ${GCC_ARCH}-linux-gnu-g++\"; \\\n        export PROJ_DB_CACHE_DIR=\"$HOME/.ccache\"; \\\n        ccache -M 100M; \\\n    fi \\\n    && CFLAGS='-DPROJ_RENAME_SYMBOLS -O2' CXXFLAGS='-DPROJ_RENAME_SYMBOLS -DPROJ_INTERNAL_CPP_NAMESPACE -O2' \\\n        cmake . \\\n        -DBUILD_SHARED_LIBS=ON \\\n        -DCMAKE_BUILD_TYPE=Release \\\n        -DCMAKE_INSTALL_PREFIX=${PROJ_INSTALL_PREFIX} \\\n        -DBUILD_TESTING=OFF \\\n    && make -j$(nproc) \\\n    && make install DESTDIR=\"/build\" \\\n    && if test \"${RSYNC_REMOTE}\" != \"\"; then \\\n        ccache -s; \\\n        echo \"Uploading cache...\"; \\\n        rsync -ra --delete $HOME/.ccache ${RSYNC_REMOTE}/proj/${GCC_ARCH}/; \\\n        echo \"Finished\"; \\\n        rm -rf $HOME/.ccache; \\\n        unset CC; \\\n        unset CXX; \\\n    fi \\\n    && cd .. \\\n    && rm -rf proj \\\n    && PROJ_SO=$(readlink -f /build${PROJ_INSTALL_PREFIX}/lib/libproj.so | awk 'BEGIN {FS=\"libproj.so.\"} {print $2}') \\\n    && PROJ_SO_FIRST=$(echo $PROJ_SO | awk 'BEGIN {FS=\".\"} {print $1}') \\\n    && mv /build${PROJ_INSTALL_PREFIX}/lib/libproj.so.${PROJ_SO} /build${PROJ_INSTALL_PREFIX}/lib/libinternalproj.so.${PROJ_SO} \\\n    && ln -s libinternalproj.so.${PROJ_SO} /build${PROJ_INSTALL_PREFIX}/lib/libinternalproj.so.${PROJ_SO_FIRST} \\\n    && ln -s libinternalproj.so.${PROJ_SO} /build${PROJ_INSTALL_PREFIX}/lib/libinternalproj.so \\\n    && rm /build${PROJ_INSTALL_PREFIX}/lib/libproj.*  \\\n    && ln -s libinternalproj.so.${PROJ_SO} /build${PROJ_INSTALL_PREFIX}/lib/libproj.so.${PROJ_SO_FIRST} \\\n    && ${GCC_ARCH}-linux-gnu-strip -s /build${PROJ_INSTALL_PREFIX}/lib/libinternalproj.so.${PROJ_SO} \\\n    && for i in /build${PROJ_INSTALL_PREFIX}/bin/*; do ${GCC_ARCH}-linux-gnu-strip -s $i 2>/dev/null || /bin/true; done\n\n# Build GDAL\nARG GDAL_VERSION=master\nARG GDAL_RELEASE_DATE\nARG GDAL_BUILD_IS_RELEASE\nARG GDAL_REPOSITORY=OSGeo/gdal\n\nRUN . /buildscripts/bh-set-envvars.sh \\\n    && if test \"${GDAL_VERSION}\" = \"master\"; then \\\n        export GDAL_VERSION=$( curl -f -Ls https://api.github.com/repos/${GDAL_REPOSITORY}/commits/HEAD -H \"Accept: application/vnd.github.VERSION.sha\"); \\\n        export GDAL_RELEASE_DATE=$(date \"+%Y%m%d\"); \\\n    fi \\\n    && if test \"x${GDAL_BUILD_IS_RELEASE:-}\" = \"x\"; then \\\n        export GDAL_SHA1SUM=${GDAL_VERSION}; \\\n    fi \\\n    && mkdir gdal \\\n    && wget -q https://github.com/${GDAL_REPOSITORY}/archive/${GDAL_VERSION}.tar.gz -O - \\\n        | tar xz -C gdal --strip-components=1 \\\n    && cd gdal/gdal \\\n    && ./autogen.sh \\\n    && if test \"${RSYNC_REMOTE}\" != \"\"; then \\\n        echo \"Downloading cache...\"; \\\n        rsync -ra ${RSYNC_REMOTE}/gdal/${GCC_ARCH}/ $HOME/; \\\n        echo \"Finished\"; \\\n        # Little trick to avoid issues with Python bindings\n        printf \"#!/bin/sh\\nccache %s-linux-gnu-gcc \\$*\" \"${GCC_ARCH}\" > ccache_gcc.sh; \\\n        chmod +x ccache_gcc.sh; \\\n        printf \"#!/bin/sh\\nccache %s-linux-gnu-g++ \\$*\" \"${GCC_ARCH}\" > ccache_g++.sh; \\\n        chmod +x ccache_g++.sh; \\\n        export CC=$PWD/ccache_gcc.sh; \\\n        export CXX=$PWD/ccache_g++.sh; \\\n        ccache -M 1G; \\\n    fi \\\n    && LDFLAGS=\"-L/build${PROJ_INSTALL_PREFIX}/lib -linternalproj\" \\\n    ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" \\\n    --prefix=/usr --sysconfdir=/etc \"${WITH_HOST}\" --without-libtool \\\n    --with-hide-internal-symbols \\\n    --with-jpeg12 \\\n    --with-python \\\n    --with-webp --with-proj=/build${PROJ_INSTALL_PREFIX} \\\n    --with-libtiff=internal --with-rename-internal-libtiff-symbols \\\n    --with-geotiff=internal --with-rename-internal-libgeotiff-symbols \\\n    && make -j$(nproc) \\\n    && make install DESTDIR=\"/build\" \\\n    && if test \"${RSYNC_REMOTE}\" != \"\"; then \\\n        ccache -s; \\\n        echo \"Uploading cache...\"; \\\n        rsync -ra --delete $HOME/.ccache ${RSYNC_REMOTE}/gdal/${GCC_ARCH}/; \\\n        echo \"Finished\"; \\\n        rm -rf $HOME/.ccache; \\\n        unset CC; \\\n        unset CXX; \\\n    fi \\\n    && cd ../.. \\\n    && rm -rf gdal \\\n    && mkdir -p /build_gdal_python/usr/lib \\\n    && mkdir -p /build_gdal_python/usr/bin \\\n    && mkdir -p /build_gdal_version_changing/usr/include \\\n    && mv /build/usr/lib/python*            /build_gdal_python/usr/lib \\\n    && mv /build/usr/lib                    /build_gdal_version_changing/usr \\\n    && mv /build/usr/include/gdal_version.h /build_gdal_version_changing/usr/include \\\n    && mv /build/usr/bin/*.py               /build_gdal_python/usr/bin \\\n    && mv /build/usr/bin                    /build_gdal_version_changing/usr \\\n    && for i in /build_gdal_version_changing/usr/lib/*; do ${GCC_ARCH}-linux-gnu-strip -s $i 2>/dev/null || /bin/true; done \\\n    && for i in /build_gdal_python/usr/lib/python3/dist-packages/osgeo/*.so; do ${GCC_ARCH}-linux-gnu-strip -s $i 2>/dev/null || /bin/true; done \\\n    && for i in /build_gdal_version_changing/usr/bin/*; do ${GCC_ARCH}-linux-gnu-strip -s $i 2>/dev/null || /bin/true; done\n\n# Build final image\nFROM $TARGET_BASE_IMAGE as runner\n\nUSER root\nRUN date\n\n# PROJ dependencies\nRUN apt-get update; \\\n    DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends \\\n        libsqlite3-0 libtiff5 libcurl4 \\\n        curl unzip ca-certificates && rm -rf /var/lib/apt/lists/*;\n\n# GDAL dependencies\nRUN apt-get update -y; \\\n    DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends \\\n        python3-numpy libpython3.8 \\\n        libjpeg-turbo8 libgeos-3.8.0 libgeos-c1v5 \\\n        libexpat1 \\\n        libxerces-c3.2 \\\n        libwebp6 libpng16-16 \\\n        libzstd1 bash libpq5 libssl1.1 libopenjp2-7 && rm -rf /var/lib/apt/lists/*;\n\nRUN apt-get update; \\\n    DEBIAN_FRONTEND=noninteractive apt-get --no-install-recommends install -y python-is-python3 && rm -rf /var/lib/apt/lists/*;\n\n# Order layers starting with less frequently varying ones\n# Only used for custom libopenjp2\n# COPY --from=builder  /build_thirdparty/usr/ /usr/\n\nCOPY --from=builder  /build_projgrids/usr/ /usr/\n\nARG PROJ_INSTALL_PREFIX\nCOPY --from=builder  /build${PROJ_INSTALL_PREFIX}/share/proj/ ${PROJ_INSTALL_PREFIX}/share/proj/\nCOPY --from=builder  /build${PROJ_INSTALL_PREFIX}/include/ ${PROJ_INSTALL_PREFIX}/include/\nCOPY --from=builder  /build${PROJ_INSTALL_PREFIX}/bin/ ${PROJ_INSTALL_PREFIX}/bin/\nCOPY --from=builder  /build${PROJ_INSTALL_PREFIX}/lib/ ${PROJ_INSTALL_PREFIX}/lib/\n\nCOPY --from=builder  /build/usr/share/gdal/ /usr/share/gdal/\nCOPY --from=builder  /build/usr/include/ /usr/include/\nCOPY --from=builder  /build_gdal_python/usr/ /usr/\nCOPY --from=builder  /build_gdal_version_changing/usr/ /usr/\n\nRUN ldconfig\n"
}