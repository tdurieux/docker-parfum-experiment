{
  "startTime": 1674249441900,
  "endTime": 1674249444084,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 19,
        "lineEnd": 19,
        "columnStart": 7,
        "columnEnd": 73
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 246,
        "lineEnd": 246,
        "columnStart": 30,
        "columnEnd": 147
      }
    },
    {
      "rule": "curlUseHttpsUrl",
      "position": {
        "lineStart": 19,
        "lineEnd": 19,
        "columnStart": 7,
        "columnEnd": 73
      }
    },
    {
      "rule": "wgetUseHttpsUrl",
      "position": {
        "lineStart": 204,
        "lineEnd": 204,
        "columnStart": 4,
        "columnEnd": 87
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 74,
        "lineEnd": 74,
        "columnStart": 7,
        "columnEnd": 60
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 91,
        "lineEnd": 92,
        "columnStart": 7,
        "columnEnd": 60
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 218,
        "lineEnd": 218,
        "columnStart": 7,
        "columnEnd": 66
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 290,
        "lineEnd": 298,
        "columnStart": 7,
        "columnEnd": 17
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "##\n# osgeo/gdal:alpine-normal\n\n# This file is available at the option of the licensee under:\n# Public domain\n# or licensed under X/MIT (LICENSE.TXT) Copyright 2019 Even Rouault <even.rouault@spatialys.com>\n\nARG ALPINE_VERSION=3.14\nFROM alpine:${ALPINE_VERSION} as builder\n\n# Derived from osgeo/proj by Howard Butler <howard@hobu.co>\nLABEL maintainer=\"Even Rouault <even.rouault@spatialys.com>\"\n\n# Setup build env for PROJ\nRUN apk add --no-cache  wget curl unzip make libtool autoconf automake pkgconfig g++ sqlite sqlite-dev\n\nARG PROJ_DATUMGRID_LATEST_LAST_MODIFIED\nRUN \\\n    mkdir -p /build_projgrids/usr/share/proj \\\n    && curl -f -LOs https://download.osgeo.org/proj/proj-datumgrid-latest.zip \\\n    && unzip -q -j -u -o proj-datumgrid-latest.zip  -d /build_projgrids/usr/share/proj \\\n    && rm -f *.zip\n\n# For PROJ and GDAL\nARG POPPLER_DEV=poppler-dev\nRUN apk add --no-cache \\\n    linux-headers \\\n    curl-dev tiff-dev \\\n    zlib-dev zstd-dev xz-dev snappy-dev \\\n    libjpeg-turbo-dev libpng-dev openjpeg-dev libwebp-dev expat-dev \\\n    py3-numpy-dev python3-dev py3-setuptools py3-numpy \\\n    ${POPPLER_DEV} postgresql-dev \\\n    openexr-dev libheif-dev xerces-c-dev geos-dev cfitsio-dev \\\n    netcdf-dev hdf5-dev freexl-dev \\\n    lz4-dev \\\n    # For spatialite (and GDAL)\n    libxml2-dev \\\n    && mkdir -p /build_thirdparty/usr/lib\n\n# Build blosc\nARG BLOSC_VERSION=1.21.0\nRUN if test \"${BLOSC_VERSION}\" != \"\"; then ( \\\n    apk add --no-cache cmake \\\n    && wget -q https://github.com/Blosc/c-blosc/archive/refs/tags/v${BLOSC_VERSION}.tar.gz \\\n    && tar xzf v${BLOSC_VERSION}.tar.gz \\\n    && rm -f v${BLOSC_VERSION}.tar.gz \\\n    && cd c-blosc-${BLOSC_VERSION} \\\n    && cmake . \\\n        -DCMAKE_BUILD_TYPE=Release \\\n        -DCMAKE_INSTALL_PREFIX=/usr \\\n        -DBUILD_SHARED=ON \\\n        -DBUILD_STATIC=OFF \\\n        -DBUILD_BENCHMARKS=OFF \\\n        -DBUILD_FUZZERS=OFF \\\n        -DBUILD_TESTS=OFF \\\n        -DPREFER_EXTERNAL_LZ4=ON \\\n        -DPREFER_EXTERNAL_ZLIB=ON \\\n        -DPREFER_EXTERNAL_ZSTD=ON \\\n        -DDEACTIVATE_SNAPPY=OFF \\\n    && make -j$(nproc) \\\n    && make install \\\n    && cp -P /usr/lib/libblosc*.so* /build_thirdparty/usr/lib \\\n    && for i in /build_thirdparty/usr/lib/*; do strip -s $i 2>/dev/null || /bin/true; done \\\n    && cd .. \\\n    && rm -rf c-blosc-${BLOSC_VERSION} \\\n    ); fi\n\n# Build szip\nARG SZIP_VERSION=2.1.1\nRUN if test \"${SZIP_VERSION}\" != \"\"; then \\\n( wget -q https://support.hdfgroup.org/ftp/lib-external/szip/${SZIP_VERSION}/src/szip-${SZIP_VERSION}.tar.gz \\\n    && tar xzf szip-${SZIP_VERSION}.tar.gz \\\n    && rm -f szip-${SZIP_VERSION}.tar.gz \\\n    && cd szip-${SZIP_VERSION} \\\n    && CFLAGS=-O2 ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --prefix=/usr --disable-static \\\n    && make -j$(nproc) \\\n    && make install \\\n    && cp -P /usr/lib/libsz*.so* /build_thirdparty/usr/lib \\\n    && for i in /build_thirdparty/usr/lib/*; do strip -s $i 2>/dev/null || /bin/true; done \\\n    && cd .. \\\n    && rm -rf szip-${SZIP_VERSION}) \\\n    fi\n\n# Build hdf4\nARG HDF4_VERSION=4.2.15\nRUN if test \"${HDF4_VERSION}\" != \"\" -a \"$(uname -m)\" = \"x86_64\"; then \\\n( apk add --no-cache byacc flex portablexdr-dev \\\n    && mkdir hdf4 \\\n    && wget -q https://support.hdfgroup.org/ftp/HDF/releases/HDF${HDF4_VERSION}/src/hdf-${HDF4_VERSION}.tar.gz -O - \\\n        | tar xz -C hdf4 --strip-components=1 \\\n    && cd hdf4 \\\n    && LDFLAGS=-lportablexdr ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --prefix=/usr --enable-shared --disable-static \\\n        --with-szlib=/usr --disable-fortran --disable-netcdf \\\n    && make -j$(nproc) \\\n    && make install \\\n    && cp -P /usr/lib/libdf*.so* /build_thirdparty/usr/lib \\\n    && cp -P /usr/lib/libmfhdf*.so* /build_thirdparty/usr/lib \\\n    && for i in /build_thirdparty/usr/lib/*; do strip -s $i 2>/dev/null || /bin/true; done \\\n    && cd .. \\\n    && rm -rf hdf4 \\\n    && apk del byacc flex portablexdr-dev) \\\n    fi\n\n# Build likbkea\nARG KEA_VERSION=1.4.13\nRUN if test \"${KEA_VERSION}\" != \"\"; then ( \\\n    apk add --no-cache cmake \\\n    && wget -q https://github.com/ubarsc/kealib/archive/kealib-${KEA_VERSION}.zip \\\n    && unzip -q kealib-${KEA_VERSION}.zip \\\n    && rm -f kealib-${KEA_VERSION}.zip \\\n    && cd kealib-kealib-${KEA_VERSION} \\\n    && cmake . -DBUILD_SHARED_LIBS=ON -DCMAKE_BUILD_TYPE=Release \\\n        -DCMAKE_INSTALL_PREFIX=/usr -DHDF5_INCLUDE_DIR=/usr/include/hdf5 \\\n        -DHDF5_LIB_PATH=/usr/lib -DLIBKEA_WITH_GDAL=OFF \\\n    && make -j$(nproc) \\\n    && make install \\\n    && cd .. \\\n    && rm -rf kealib-kealib-${KEA_VERSION} \\\n    && cp -P /usr/lib/libkea*.so* /build_thirdparty/usr/lib \\\n    && for i in /build_thirdparty/usr/lib/*; do strip -s $i 2>/dev/null || /bin/true; done \\\n    && apk del cmake \\\n    ); fi\n\n# Build openjpeg\n# ARG OPENJPEG_VERSION=2.3.1\nRUN if test \"${OPENJPEG_VERSION}\" != \"\"; then ( \\\n    apk add --no-cache cmake \\\n    && wget -q https://github.com/uclouvain/openjpeg/archive/v${OPENJPEG_VERSION}.tar.gz \\\n    && tar xzf v${OPENJPEG_VERSION}.tar.gz \\\n    && rm -f v${OPENJPEG_VERSION}.tar.gz \\\n    && cd openjpeg-${OPENJPEG_VERSION} \\\n    && cmake . -DBUILD_SHARED_LIBS=ON  -DBUILD_STATIC_LIBS=OFF -DCMAKE_BUILD_TYPE=Release \\\n        -DCMAKE_INSTALL_PREFIX=/usr \\\n    && make -j$(nproc) \\\n    && make install \\\n    && rm -f /usr/lib/libopenjp2.so.2.3.0 \\\n    && cp -P /usr/lib/libopenjp2*.so* /build_thirdparty/usr/lib \\\n    && for i in /build_thirdparty/usr/lib/*; do strip -s $i 2>/dev/null || /bin/true; done \\\n    && cd .. \\\n    && rm -rf openjpeg-${OPENJPEG_VERSION} \\\n    && apk del cmake \\\n    ); fi\n\n# Build libdeflate\nARG LIBDEFLATE_VERSION=1.7\nRUN if test \"${LIBDEFLATE_VERSION}\" != \"\"; then ( \\\n    mkdir libdeflate \\\n    && wget -q https://github.com/ebiggers/libdeflate/archive/v${LIBDEFLATE_VERSION}.tar.gz -O - \\\n        | tar xz -C libdeflate --strip-components=1 \\\n    && cd libdeflate \\\n    && make -j$(nproc) PREFIX=/usr install \\\n    && cp -P /usr/lib/libdeflate.so* /build_thirdparty/usr/lib \\\n    && for i in /build_thirdparty/usr/lib/*; do strip -s $i 2>/dev/null || /bin/true; done \\\n    && cd .. \\\n    && rm -rf libdeflate \\\n    ); fi\n\nRUN apk add --no-cache rsync ccache\nARG RSYNC_REMOTE\n\n# Build PROJ\nARG PROJ_VERSION=master\nRUN mkdir proj \\\n    && apk add --no-cache cmake \\\n    && wget -q https://github.com/OSGeo/PROJ/archive/${PROJ_VERSION}.tar.gz -O - \\\n        | tar xz -C proj --strip-components=1 \\\n    && cd proj \\\n    && if test \"${RSYNC_REMOTE}\" != \"\"; then \\\n        echo \"Downloading cache...\"; \\\n        rsync -ra ${RSYNC_REMOTE}/proj/$(uname -m)/ $HOME/; \\\n        echo \"Finished\"; \\\n        export CC=\"ccache gcc\"; \\\n        export CXX=\"ccache g++\"; \\\n        mkdir -p \"$HOME/.ccache\"; \\\n        export PROJ_DB_CACHE_DIR=\"$HOME/.ccache\"; \\\n        ccache -M 100M; \\\n    fi \\\n    && cmake . \\\n        -DBUILD_SHARED_LIBS=ON \\\n        -DCMAKE_BUILD_TYPE=Release \\\n        -DCMAKE_INSTALL_PREFIX=/usr \\\n        -DENABLE_IPO=ON \\\n        -DBUILD_TESTING=OFF \\\n    && make -j$(nproc) \\\n    && make install \\\n    && make install DESTDIR=\"/build_proj\" \\\n    && if test \"${RSYNC_REMOTE}\" != \"\"; then \\\n        ccache -s; \\\n        echo \"Uploading cache...\"; \\\n        rsync -ra --delete $HOME/.ccache ${RSYNC_REMOTE}/proj/$(uname -m)/; \\\n        echo \"Finished\"; \\\n        rm -rf $HOME/.ccache; \\\n        unset CC; \\\n        unset CXX; \\\n    fi \\\n    && cd .. \\\n    && rm -rf proj \\\n    && for i in /build_proj/usr/lib/*; do strip -s $i 2>/dev/null || /bin/true; done \\\n    && for i in /build_proj/usr/bin/*; do strip -s $i 2>/dev/null || /bin/true; done \\\n    && apk del cmake\n\n# Build spatialite\nARG SPATIALITE_VERSION=5.0.1\nRUN if test \"${SPATIALITE_VERSION}\" != \"\" -a \"$(uname -m)\" = \"x86_64\"; then \\\n( wget -q https://www.gaia-gis.it/gaia-sins/libspatialite-${SPATIALITE_VERSION}.tar.gz \\\n    && tar xzf libspatialite-${SPATIALITE_VERSION}.tar.gz \\\n    && rm -f libspatialite-${SPATIALITE_VERSION}.tar.gz \\\n    && cd libspatialite-${SPATIALITE_VERSION} \\\n    && apk add --no-cache minizip-dev \\\n    && if test \"${RSYNC_REMOTE}\" != \"\"; then \\\n        echo \"Downloading cache...\"; \\\n        rsync -ra ${RSYNC_REMOTE}/spatialite/ $HOME/; \\\n        echo \"Finished\"; \\\n        export CC=\"ccache gcc\"; \\\n        export CXX=\"ccache g++\"; \\\n        mkdir -p \"$HOME/.ccache\"; \\\n        ccache -M 100M; \\\n    fi \\\n    && ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --prefix=/usr --disable-static --disable-rttopo \\\n    && make -j$(nproc) \\\n    && make install \\\n    && if test \"${RSYNC_REMOTE}\" != \"\"; then \\\n        ccache -s; \\\n        echo \"Uploading cache...\"; \\\n        rsync -ra --delete $HOME/.ccache ${RSYNC_REMOTE}/spatialite/; \\\n        echo \"Finished\"; \\\n        rm -rf $HOME/.ccache; \\\n        unset CC; \\\n        unset CXX; \\\n    fi \\\n    && mkdir -p /build_spatialite/usr/lib \\\n    && cp -P /usr/lib/libspatialite*.so* /build_spatialite/usr/lib \\\n    && for i in /build_spatialite/usr/lib/*; do strip -s $i 2>/dev/null || /bin/true; done \\\n    && cd .. \\\n    && rm -rf libspatialite-${SPATIALITE_VERSION}) \\\n    else \\\n        mkdir -p /build_spatialite/usr/lib; \\\n    fi\n\n# Build GDAL\nARG GDAL_VERSION=master\nARG GDAL_RELEASE_DATE\nARG GDAL_BUILD_IS_RELEASE\nARG GDAL_REPOSITORY=OSGeo/gdal\n\nRUN if test \"${GDAL_VERSION}\" = \"master\"; then \\\n        export GDAL_VERSION=$( curl -f -Ls https://api.github.com/repos/${GDAL_REPOSITORY}/commits/HEAD -H \"Accept: application/vnd.github.VERSION.sha\"); \\\n        export GDAL_RELEASE_DATE=$(date \"+%Y%m%d\"); \\\n    fi \\\n    && if test \"x${GDAL_BUILD_IS_RELEASE}\" = \"x\"; then \\\n        export GDAL_SHA1SUM=${GDAL_VERSION}; \\\n    fi \\\n    && export GDAL_EXTRA_ARGS=\"\" \\\n    && export GDAL_EXTRA_ARGS=\"--with-geos ${GDAL_EXTRA_ARGS}\" \\\n    && if test \"${XERCESC_VERSION}\" != \"\"; then \\\n        export GDAL_EXTRA_ARGS=\"--with-xerces ${GDAL_EXTRA_ARGS}\"; \\\n    fi \\\n    && if test \"${HDF4_VERSION}\" != \"\" -a \"$(uname -m)\" = \"x86_64\"; then \\\n        apk add --no-cache portablexdr-dev \\\n        && export LDFLAGS=\"-lportablexdr ${LDFLAGS}\" \\\n        && export GDAL_EXTRA_ARGS=\"--with-hdf4 ${GDAL_EXTRA_ARGS}\"; \\\n    fi \\\n    && export GDAL_EXTRA_ARGS=\"--with-hdf5 ${GDAL_EXTRA_ARGS}\" \\\n    && export GDAL_EXTRA_ARGS=\"--with-netcdf ${GDAL_EXTRA_ARGS}\" \\\n    && if test \"${SPATIALITE_VERSION}\" != \"\" -a \"$(uname -m)\" = \"x86_64\"; then \\\n        export GDAL_EXTRA_ARGS=\"--with-spatialite ${GDAL_EXTRA_ARGS}\"; \\\n    fi \\\n    && if test \"${POPPLER_DEV}\" != \"\"; then \\\n        export GDAL_EXTRA_ARGS=\"--with-poppler ${GDAL_EXTRA_ARGS}\"; \\\n    fi \\\n    && echo ${GDAL_EXTRA_ARGS} \\\n    && mkdir gdal \\\n    && wget -q https://github.com/${GDAL_REPOSITORY}/archive/${GDAL_VERSION}.tar.gz -O - \\\n        | tar xz -C gdal --strip-components=1 \\\n    && cd gdal/gdal \\\n    && if test \"${RSYNC_REMOTE}\" != \"\"; then \\\n        echo \"Downloading cache...\"; \\\n        rsync -ra ${RSYNC_REMOTE}/gdal/$(uname -m)/ $HOME/; \\\n        echo \"Finished\"; \\\n        # Little trick to avoid issues with Python bindings\n        printf \"#!/bin/sh\\nccache gcc \\$*\" > ccache_gcc.sh; \\\n        chmod +x ccache_gcc.sh; \\\n        printf \"#!/bin/sh\\nccache g++ \\$*\" > ccache_g++.sh; \\\n        chmod +x ccache_g++.sh; \\\n        export CC=$PWD/ccache_gcc.sh; \\\n        export CXX=$PWD/ccache_g++.sh; \\\n        mkdir -p \"$HOME/.ccache\"; \\\n        ccache -M 1G; \\\n    fi \\\n    && ./autogen.sh \\\n    && ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --prefix=/usr --sysconfdir=/etc --without-libtool \\\n    --with-hide-internal-symbols \\\n    --with-liblzma \\\n    --with-proj=/usr \\\n    --with-libtiff=internal --with-rename-internal-libtiff-symbols \\\n    --with-geotiff=internal --with-rename-internal-libgeotiff-symbols \\\n    # --enable-lto\n    ${GDAL_EXTRA_ARGS} \\ # --enable-lto\n\n    --with-python \\\n    && make -j$(nproc) \\\n    && make install DESTDIR=\"/build\" \\\n    && (cd apps && make -j$(nproc) multireadtest && cp multireadtest /build/usr/bin) \\\n    && if test \"${RSYNC_REMOTE}\" != \"\"; then \\\n        ccache -s; \\\n        echo \"Uploading cache...\"; \\\n        rsync -ra --delete $HOME/.ccache ${RSYNC_REMOTE}/gdal/$(uname -m)/; \\\n        echo \"Finished\"; \\\n        rm -rf $HOME/.ccache; \\\n        unset CC; \\\n        unset CXX; \\\n    fi \\\n    && cd ../.. \\\n    && rm -rf gdal \\\n    && mkdir -p /build_gdal_python/usr/lib \\\n    && mkdir -p /build_gdal_python/usr/bin \\\n    && mkdir -p /build_gdal_version_changing/usr/include \\\n    && export py_version=$(python3 -c \"import sys; print(str(sys.version_info.major) + '.' + str(sys.version_info.minor))\") \\\n    && mv /build/usr/lib/python${py_version} /build_gdal_python/usr/lib \\\n    && mv /build/usr/lib                    /build_gdal_version_changing/usr \\\n    && mv /build/usr/include/gdal_version.h /build_gdal_version_changing/usr/include \\\n    && mv /build/usr/bin/*.py               /build_gdal_python/usr/bin \\\n    && mv /build/usr/bin                    /build_gdal_version_changing/usr \\\n    && for i in /build_gdal_version_changing/usr/lib/*; do strip -s $i 2>/dev/null || /bin/true; done \\\n    && for i in /build_gdal_python/usr/lib/python${py_version}/site-packages/osgeo/*.so; do strip -s $i 2>/dev/null || /bin/true; done \\\n    && for i in /build_gdal_version_changing/usr/bin/*; do strip -s $i 2>/dev/null || /bin/true; done \\\n    # Remove resource files of uncompiled drivers\n    && (for i in \\\n            # unused\n            /build/usr/share/gdal/*.svg \\\n            # unused\n            /build/usr/share/gdal/*.png \\\n       ;do rm $i; done)\n\n# Build final image\nFROM alpine:${ALPINE_VERSION} as runner\n\nRUN date\n\nARG POPPLER=poppler\nRUN apk add --no-cache \\\n        libstdc++ \\\n        sqlite-libs \\\n        libcurl tiff \\\n        zlib zstd-libs xz-libs snappy \\\n        libjpeg-turbo libpng libwebp expat \\\n        icu-libs \\\n        python3 py3-numpy ${POPPLER} pcre libpq libxml2 portablexdr openjpeg \\\n        netcdf hdf5 freexl \\\n        openexr libheif xerces-c geos cfitsio minizip \\\n        lz4-libs \\\n    # Remove /usr/lib/libopenjp2.so.2.3.0 since we are building v2.3.1 manually\n    # && rm -f /usr/lib/libopenjp2.so.2.3.0 \\\n    # libturbojpeg.so is not used by GDAL. Only libjpeg.so*\n    && rm -f /usr/lib/libturbojpeg.so* \\\n    # libpoppler-cpp.so is not used by GDAL. Only libpoppler.so*\n    && rm -f /usr/lib/libpoppler-cpp.so* \\\n    # Only libwebp.so is used by GDAL\n    && rm -f /usr/lib/libwebpmux.so* /usr/lib/libwebpdemux.so* /usr/lib/libwebpdecoder.so* \\\n    && ln -s /usr/bin/python3 /usr/bin/python\n\n# Order layers starting with less frequently varying ones\nCOPY --from=builder  /build_thirdparty/usr/ /usr/\n\nCOPY --from=builder  /build_projgrids/usr/ /usr/\n\nCOPY --from=builder  /build_spatialite/usr/ /usr/\n\nCOPY --from=builder  /build_proj/usr/share/proj/ /usr/share/proj/\nCOPY --from=builder  /build_proj/usr/include/ /usr/include/\nCOPY --from=builder  /build_proj/usr/bin/ /usr/bin/\nCOPY --from=builder  /build_proj/usr/lib/ /usr/lib/\n\nCOPY --from=builder  /build/usr/share/gdal/ /usr/share/gdal/\nCOPY --from=builder  /build/usr/include/ /usr/include/\nCOPY --from=builder  /build_gdal_python/usr/ /usr/\nCOPY --from=builder  /build_gdal_version_changing/usr/ /usr/\n"
}