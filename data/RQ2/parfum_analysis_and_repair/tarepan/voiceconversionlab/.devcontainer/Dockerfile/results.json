{
  "startTime": 1674252527511,
  "endTime": 1674252528503,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 42,
        "lineEnd": 42,
        "columnStart": 7,
        "columnEnd": 62
      }
    },
    {
      "rule": "sha256sumEchoOneSpaces",
      "position": {
        "lineStart": 43,
        "lineEnd": 43,
        "columnStart": 52,
        "columnEnd": 118
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 36,
        "lineEnd": 36,
        "columnStart": 7,
        "columnEnd": 30
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# Node version should match with GitHub Actions workflows\nFROM node:12\n\n# This Dockerfile adds a non-root user with sudo access. Use the \"remoteUser\"\n# property in devcontainer.json to use it. On Linux, the container user's GID/UIDs\n# will be updated to match your local UID/GID (when using the dockerFile property).\n# See https://aka.ms/vscode-remote/containers/non-root-user for details.\nARG USERNAME=vscode\nARG USER_UID=1011\nARG USER_GID=$USER_UID\n\n# Docker script args, location, and expected SHA - SHA generated on release\nARG DOCKER_SCRIPT_SOURCE=\"https://raw.githubusercontent.com/microsoft/vscode-dev-containers/master/script-library/docker-debian.sh\"\nARG DOCKER_SCRIPT_SHA=\"dev-mode\"\nARG ENABLE_NONROOT_DOCKER=\"true\"\nARG SOURCE_SOCKET=/var/run/docker-host.sock\nARG TARGET_SOCKET=/var/run/docker.sock\n\nRUN apt-get update \\\n    && export DEBIAN_FRONTEND=noninteractive \\\n    # Verify common dependencies and utilities are installed\n    && apt-get -y install --no-install-recommends apt-utils dialog git openssh-client curl less iproute2 procps 2>&1 \\\n    #\n    # Create a non-root user to use if not already available - see https://aka.ms/vscode-remote/containers/non-root-user. \\\n    && if [ $(getent passwd $USERNAME) ];then \\\n    # If exists, see if we need to tweak the GID/UID\n    if [ \"$USER_GID\" != \"1011\" ] || [ \"$USER_UID\" != \"1011\" ]; then \\\n    groupmod --gid $USER_GID $USERNAME \\\n    && usermod --uid $USER_UID --gid $USER_GID $USERNAME \\\n    && chown -R $USER_UID:$USER_GID /home/$USERNAME; \\\n    fi; \\\n    else \\\n\n    groupadd --gid $USER_GID $USERNAME \\\n    && useradd -s /bin/bash --uid $USER_UID --gid $USER_GID -m $USERNAME \\\n    # Add sudo support for the non-root user \\\n    && apt-get install --no-install-recommends -y sudo \\\n    && echo $USERNAME ALL=\\(root\\) NOPASSWD:ALL > /etc/sudoers.d/$USERNAME \\\n    && chmod 0440 /etc/sudoers.d/$USERNAME; \\\n    fi \\\n    #\n    # Use Docker script from script library to set things up\n    && curl -f -sSL $DOCKER_SCRIPT_SOURCE -o /tmp/docker-setup.sh \\\n    && ( [ \"${DOCKER_SCRIPT_SHA}\" = \"dev-mode\" ] || ( echo \"${DOCKER_SCRIPT_SHA}  */tmp/docker-setup.sh\" | sha256sum -c -)) \\\n    && /bin/bash /tmp/docker-setup.sh \"${ENABLE_NONROOT_DOCKER}\" \"${SOURCE_SOCKET}\" \"${TARGET_SOCKET}\" \"${USERNAME}\" \\\n    && rm /tmp/docker-setup.sh \\\n    #\n    # Clean up\n    && apt-get autoremove -y \\\n    && apt-get clean -y \\\n    && rm -rf /var/lib/apt/lists/*\n\n# Setting the ENTRYPOINT to docker-init.sh will configure non-root access to\n# the Docker socket if \"overrideCommand\": false is set in devcontainer.json.\n# The script will also execute CMD if you need to alter startup behaviors.\nENTRYPOINT [ \"/usr/local/share/docker-init.sh\" ]\nCMD [ \"sleep\", \"infinity\" ]"
}