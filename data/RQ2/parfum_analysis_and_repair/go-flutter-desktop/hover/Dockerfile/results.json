{
  "startTime": 1674254762294,
  "endTime": 1674254763830,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 39,
        "lineEnd": 39,
        "columnStart": 4,
        "columnEnd": 110
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 20,
        "lineEnd": 20,
        "columnStart": 4,
        "columnEnd": 20
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 5,
        "lineEnd": 6,
        "columnStart": 7,
        "columnEnd": 22
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 13,
        "lineEnd": 14,
        "columnStart": 4,
        "columnEnd": 57
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 26,
        "lineEnd": 27,
        "columnStart": 4,
        "columnEnd": 17
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 36,
        "lineEnd": 37,
        "columnStart": 4,
        "columnEnd": 9
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 49,
        "lineEnd": 50,
        "columnStart": 7,
        "columnEnd": 126
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 61,
        "lineEnd": 75,
        "columnStart": 4,
        "columnEnd": 18
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 5,
        "lineEnd": 6,
        "columnStart": 7,
        "columnEnd": 22
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 13,
        "lineEnd": 14,
        "columnStart": 4,
        "columnEnd": 57
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 26,
        "lineEnd": 27,
        "columnStart": 4,
        "columnEnd": 17
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 36,
        "lineEnd": 37,
        "columnStart": 4,
        "columnEnd": 9
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 49,
        "lineEnd": 50,
        "columnStart": 7,
        "columnEnd": 126
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM snapcore/snapcraft AS snapcraft\n# Using multi-stage dockerfile to obtain snapcraft binary\n\nFROM ubuntu:groovy AS flutterbuilder\nRUN apt-get update \\\n    && apt-get install --no-install-recommends -y \\\n        git curl unzip && rm -rf /var/lib/apt/lists/*;\n# Install Flutter from the beta channel\nRUN git clone --single-branch --depth=1 --branch beta https://github.com/flutter/flutter /opt/flutter 2>&1 \\\n    && /opt/flutter/bin/flutter doctor -v\n\nFROM ubuntu:groovy AS xarbuilder\nRUN apt-get update \\\n\t&& apt-get install --no-install-recommends -y \\\n\t\tgit libssl-dev libxml2-dev make g++ autoconf zlib1g-dev && rm -rf /var/lib/apt/lists/*;\n# Needed to patch configure.ac per https://github.com/mackyle/xar/issues/18\nRUN git clone --single-branch --depth=1 --branch xar-1.6.1 https://github.com/mackyle/xar 2>&1 \\\n\t&& cd xar/xar \\\n\t&& sed -i \"s/AC_CHECK_LIB(\\[crypto\\], \\[OpenSSL_add_all_ciphers\\], , \\[have_libcrypto=\\\"0\\\"\\])/AC_CHECK_LIB(\\[crypto\\], \\[OPENSSL_init_crypto\\], , \\[have_libcrypto=\\\"0\\\"\\])/\" configure.ac \\\n\t&& ./autogen.sh --noconfigure \\\n\t&& ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" 2>&1 \\\n\t&& make 2>&1 \\\n\t&& make install 2>&1\n\nFROM ubuntu:groovy AS bomutilsbuilder\nRUN apt-get update \\\n\t&& apt-get install --no-install-recommends -y \\\n\t\t\t\t\tgit make g++ && rm -rf /var/lib/apt/lists/*;\nRUN git clone --single-branch --depth=1 --branch 0.2 https://github.com/hogliux/bomutils 2>&1 \\\n\t&& cd bomutils \\\n\t&& make 2>&1 \\\n\t&& make install 2>&1\n\n# Fixed using https://github.com/AppImage/AppImageKit/issues/828\nFROM ubuntu:groovy as appimagebuilder\nRUN apt-get update \\\n\t&& apt-get install --no-install-recommends -y \\\n\t\t\t\t\tcurl && rm -rf /var/lib/apt/lists/*;\nRUN cd /opt \\\n\t&& curl -f -LO https://github.com/AppImage/AppImageKit/releases/download/continuous/appimagetool-x86_64.AppImage \\\n\t&& chmod a+x appimagetool-x86_64.AppImage \\\n\t&& sed 's|AI\\x02|\\x00\\x00\\x00|g' -i appimagetool-x86_64.AppImage \\\n\t&& ./appimagetool-x86_64.AppImage --appimage-extract \\\n\t&& mv squashfs-root appimagetool\n\n# groovy ships with a too old meson version\nFROM ubuntu:groovy AS pacmanbuilder\nENV DEBIAN_FRONTEND=noninteractive\nRUN apt-get update \\\n    && apt-get install --no-install-recommends -y \\\n        git meson python3 python3-pip python3-setuptools python3-wheel ninja-build gcc pkg-config m4 libarchive-dev libssl-dev && rm -rf /var/lib/apt/lists/*;\nRUN cd /tmp \\\n    && git clone https://git.archlinux.org/pacman.git --depth=1 --branch=v5.2.2 2>&1  \\\n    && cd pacman \\\n    && meson setup builddir \\\n    && meson install -C builddir\n\nFROM dockercore/golang-cross:1.13.15 AS hover\n\n# Install dependencies via apt\nRUN apt-get update \\\n\t&& apt-get install --no-install-recommends -y \\\n\t\t\t\t\t# dependencies for compiling linux\n\t\tlibgl1-mesa-dev xorg-dev \\\n\t\t# dependencies for compiling windows\n\t\twine \\\n\t\t# dependencies for darwin-dmg\n\t\tgenisoimage \\\n\t\t# dependencies for darwin-pkg\n\t\tcpio git \\\n\t\t# dependencies for linux-rpm\n\t\trpm \\\n\t\t# dependencies for linux-pkg\n\t\tfakeroot bsdtar \\\n\t\t# dependencies for windows-msi\n\t\twixl imagemagick \\\n\t&& rm -rf /var/lib/apt/lists/*\n\nCOPY --from=snapcraft /snap /snap\nENV PATH=\"/snap/bin:$PATH\"\nENV SNAP=\"/snap/snapcraft/current\"\nENV SNAP_NAME=\"snapcraft\"\nENV SNAP_ARCH=\"amd64\"\n\nCOPY --from=xarbuilder /usr/local/bin/xar /usr/local/bin/xar\nCOPY --from=xarbuilder /usr/local/lib/libxar.so.1 /usr/local/lib/libxar.so.1\nCOPY --from=xarbuilder /usr/lib/x86_64-linux-gnu/libcrypto.so.1.1 /usr/lib/x86_64-linux-gnu/libcrypto.so.1.1\n\nCOPY --from=bomutilsbuilder /usr/bin/mkbom /usr/bin/mkbom\n# Probably shouldn't do that, but it works and nothing breaks\nCOPY --from=bomutilsbuilder /usr/lib/x86_64-linux-gnu/libstdc++.so.6 /usr/lib/x86_64-linux-gnu/libstdc++.so.6\n\nCOPY --from=appimagebuilder /opt/appimagetool /opt/appimagetool\nENV PATH=/opt/appimagetool/usr/bin:$PATH\n\nCOPY --from=pacmanbuilder /usr/bin/makepkg /usr/bin/makepkg\nCOPY --from=pacmanbuilder /usr/bin/pacman /usr/bin/pacman\nCOPY --from=pacmanbuilder /etc/makepkg.conf /etc/makepkg.conf\nCOPY --from=pacmanbuilder /etc/pacman.conf /etc/pacman.conf\nCOPY --from=pacmanbuilder /usr/share/makepkg /usr/share/makepkg\nCOPY --from=pacmanbuilder /usr/share/pacman /usr/share/pacman\nCOPY --from=pacmanbuilder /var/lib/pacman /var/lib/pacman\nCOPY --from=pacmanbuilder /usr/lib/x86_64-linux-gnu/libalpm.so.12 /usr/lib/x86_64-linux-gnu/libalpm.so.12\nRUN ln -sf /bin/bash /usr/bin/bash\nRUN sed -i \"s/OPTIONS=(strip /OPTIONS=(/g\" /etc/makepkg.conf\nRUN sed -i \"s/#XferCommand/XferCommand/g\" /etc/pacman.conf\n# This makes makepkg believe we are not root. Bypassing the root check is ok, because we are in a container\nENV EUID=1\n\n# Create symlink for darwin-dmg\nRUN ln -s $(which genisoimage) /usr/bin/mkisofs\n\nCOPY --from=flutterbuilder /opt/flutter /opt/flutter\nRUN ln -sf /opt/flutter/bin/flutter /usr/bin/flutter\n\n# Build hover\nWORKDIR /go/src/app\nCOPY . .\nRUN go get -d -v ./... 2>&1\nRUN go install -v ./... 2>&1\n\nCOPY docker/hover-safe.sh /usr/local/bin/hover-safe.sh\n\n# Prepare engines\nENV CGO_LDFLAGS=\"-L~/.cache/hover/engine/linux-release/\"\nENV CGO_LDFLAGS=\"$CGO_LDFLAGS -L~/.cache/hover/engine/linux-debug_unopt/\"\nENV CGO_LDFLAGS=\"$CGO_LDFLAGS -L~/.cache/hover/engine/linux-profile/\"\nENV CGO_LDFLAGS=\"$CGO_LDFLAGS -L~/.cache/hover/engine/windows-release/\"\nENV CGO_LDFLAGS=\"$CGO_LDFLAGS -L~/.cache/hover/engine/windows-debug_unopt/\"\nENV CGO_LDFLAGS=\"$CGO_LDFLAGS -L~/.cache/hover/engine/windows-profile/\"\nENV CGO_LDFLAGS=\"$CGO_LDFLAGS -L~/.cache/hover/engine/darwin-debug_unopt/\"\n\nWORKDIR /app\n"
}