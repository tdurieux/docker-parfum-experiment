{
  "startTime": 1674220595944,
  "endTime": 1674220597144,
  "originalSmells": [
    {
      "rule": "rmRecursiveAfterMktempD",
      "position": {
        "lineStart": 69,
        "lineEnd": 69,
        "columnStart": 8,
        "columnEnd": 17
      }
    },
    {
      "rule": "wgetUseHttpsUrl",
      "position": {
        "lineStart": 49,
        "lineEnd": 49,
        "columnStart": 4,
        "columnEnd": 76
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 50,
        "lineEnd": 50,
        "columnStart": 4,
        "columnEnd": 35
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 22,
        "lineEnd": 22,
        "columnStart": 4,
        "columnEnd": 30
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 25,
        "lineEnd": 25,
        "columnStart": 4,
        "columnEnd": 49
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 29,
        "lineEnd": 40,
        "columnStart": 4,
        "columnEnd": 8
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 44,
        "lineEnd": 44,
        "columnStart": 4,
        "columnEnd": 35
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 56,
        "lineEnd": 56,
        "columnStart": 4,
        "columnEnd": 58
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 64,
        "lineEnd": 64,
        "columnStart": 22,
        "columnEnd": 67
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 93,
        "lineEnd": 93,
        "columnStart": 4,
        "columnEnd": 135
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 22,
        "lineEnd": 22,
        "columnStart": 4,
        "columnEnd": 30
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 25,
        "lineEnd": 25,
        "columnStart": 4,
        "columnEnd": 49
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 29,
        "lineEnd": 40,
        "columnStart": 4,
        "columnEnd": 8
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 44,
        "lineEnd": 44,
        "columnStart": 4,
        "columnEnd": 35
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 56,
        "lineEnd": 56,
        "columnStart": 4,
        "columnEnd": 58
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 93,
        "lineEnd": 93,
        "columnStart": 4,
        "columnEnd": 135
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 18,
        "lineEnd": 18,
        "columnStart": 53,
        "columnEnd": 111
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 22,
        "lineEnd": 22,
        "columnStart": 4,
        "columnEnd": 30
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 25,
        "lineEnd": 25,
        "columnStart": 4,
        "columnEnd": 49
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 29,
        "lineEnd": 40,
        "columnStart": 4,
        "columnEnd": 8
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 44,
        "lineEnd": 44,
        "columnStart": 4,
        "columnEnd": 35
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 56,
        "lineEnd": 56,
        "columnStart": 4,
        "columnEnd": 58
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 64,
        "lineEnd": 64,
        "columnStart": 22,
        "columnEnd": 67
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 93,
        "lineEnd": 93,
        "columnStart": 4,
        "columnEnd": 135
      }
    }
  ],
  "repairedSmells": [
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 22,
        "lineEnd": 22,
        "columnStart": 4,
        "columnEnd": 54
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 25,
        "lineEnd": 25,
        "columnStart": 4,
        "columnEnd": 73
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 29,
        "lineEnd": 39,
        "columnStart": 4,
        "columnEnd": 8
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 44,
        "lineEnd": 44,
        "columnStart": 4,
        "columnEnd": 59
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 56,
        "lineEnd": 56,
        "columnStart": 4,
        "columnEnd": 82
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 91,
        "lineEnd": 91,
        "columnStart": 4,
        "columnEnd": 159
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 29,
        "lineEnd": 39,
        "columnStart": 4,
        "columnEnd": 8
      }
    }
  ],
  "repairedDockerfile": "### This dockerfile sets up an Ubuntu 18.04 environment from scratch\n### that is sufficient to *run* Agora (but not to build it).\n\n### Note: Dockerfile best practices include:\n###  * Combine apt-get update and install into the same RUN line.\n###  * Always use \"apt-get\" and not \"apt\", because \"apt\" is for an interactive CLI view.\n###  * Always use \"apt-get install -y\" to ensure that \"Yes\" is auto-chosen for installation.\n\nFROM ubuntu:18.04\nLABEL author=t-keboo@microsoft.com\n\n\n# Basic set up for ubuntu image\n# Remove some warnings about deb pkg manager\n# See the following links:\n# * https://github.com/phusion/baseimage-docker/issues/58\n# * https://github.com/phusion/baseimage-docker/issues/319#issuecomment-245857919\nENV DEBIAN_FRONTEND noninteractive\nRUN DEBIAN_FRONTEND=noninteractive apt-get update && apt-get install -y --no-install-recommends apt-utils gnupg && rm -rf /var/lib/apt/lists/*;\n# RUN echo 'debconf debconf/frontend select Noninteractive' | debconf-set-selections\n\n# Just for convenience purposes\nRUN apt-get install --no-install-recommends -y vim gdb && rm -rf /var/lib/apt/lists/*;\n\n# Required for downloading and building the source packages below\nRUN apt-get -y --no-install-recommends install -y g++ cmake make wget git && rm -rf /var/lib/apt/lists/*;\n\n# Needed to build and run Agora.\n# Currently I'm not sure if *all* of these are needed to *run* Agora, but some are.\nRUN apt-get -y --no-install-recommends install -y \\\n    libgflags-dev \\\n    liblapack-dev \\\n    libblas-dev \\\n    libboost-all-dev \\\n\n    nlohmann-json-dev \\\n    python-numpy \\\n    python-pyqt5 \\\n    libnuma-dev \\\n    libpython-dev \\\n    swig && rm -rf /var/lib/apt/lists/*;\n\n\n# Install gtest and gflags\nRUN apt-get install --no-install-recommends -y libgtest-dev && rm -rf /var/lib/apt/lists/*;\nRUN (cd /usr/src/gtest && cmake . && make && mv libg* /usr/lib/)\n\n\n# Build and install armadillo\nRUN wget https://sourceforge.net/projects/arma/files/armadillo-9.300.2.tar.xz\nRUN tar xf armadillo-9.300.2.tar.xz && rm armadillo-9.300.2.tar.xz\nRUN (cd armadillo-9.300.2; cmake .; make -j8; make install)\nRUN rm -rf armadillo*\n\n\n# Set up Intel MKL\nRUN apt-get install --no-install-recommends -y apt-transport-https ca-certificates && rm -rf /var/lib/apt/lists/*;\nRUN ( \\\n    cd /tmp; \\\n    wget https://apt.repos.intel.com/intel-gpg-keys/GPG-PUB-KEY-INTEL-SW-PRODUCTS-2019.PUB; \\\n    apt-key add GPG-PUB-KEY-INTEL-SW-PRODUCTS-2019.PUB; \\\n    rm GPG-PUB-KEY-INTEL-SW-PRODUCTS-2019.PUB; \\\n    sh -c 'echo deb https://apt.repos.intel.com/mkl all main > /etc/apt/sources.list.d/intel-mkl.list'; \\\n)\nRUN apt-get update && apt-get install --no-install-recommends -y intel-mkl-64bit-2020.0-088 && rm -rf /var/lib/apt/lists/*;\n\n\n# Set up SoapySDR\nRUN ( cd `mktemp -d`; \\\n    git clone --depth=1 https://github.com/pothosware/SoapySDR.git; \\\n    cd SoapySDR; \\\n    mkdir build; \\\n    cd build; \\\n    cmake ..; \\\n    make -j8; \\\n    make install; \\\n    ldconfig;) && rm -rf -d\n\n# Install Mellanox OFED Infiniband driver (unnecessary due to upstreamed drivers)\n# RUN ( \\\n#     apt-get install -y linux-headers-4.15.0-111-generic; \\\n#     cd /tmp; \\\n#     wget http://content.mellanox.com/ofed/MLNX_OFED-5.1-0.6.6.0/MLNX_OFED_LINUX-5.1-0.6.6.0-ubuntu18.04-x86_64.tgz; \\\n#     tar zxvf MLNX_OFED_LINUX-5.1-0.6.6.0-ubuntu18.04-x86_64.tgz; \\\n#     echo \"deb file:/tmp/MLNX_OFED_LINUX-5.1-0.6.6.0-ubuntu18.04-x86_64/DEBS ./\" > /etc/apt/sources.list.d/mlnx_ofed.list; \\\n#     wget -qO - http://www.mellanox.com/downloads/ofed/RPM-GPG-KEY-Mellanox | apt-key add - ; \\\n#     apt-get update; \\\n#     apt-get install -y mlnx-ofed-all; \\\n#     apt-get install -y mlnx-ofed-dpdk-upstream-libs; \\\n# )\n# Add support for Infiniband, Mellanox verbs, rdma, etc\nRUN apt-get install --no-install-recommends -y libibverbs-dev libibverbs1 rdma-core ibverbs-utils libibumad3 libibumad-dev libibmad-dev libibmad5 libibnetdisc5 && rm -rf /var/lib/apt/lists/*;\n\n\n# Undo the noninteractive DEBIAN_FRONTEND from the beginning of this file\nENV DEBIAN_FRONTEND teletype\n\n\n# Copy in our relevant build files. (\"test\" is optional)\nCOPY build/   Agora/build/\nCOPY data/    Agora/data/\nCOPY test/    Agora/test/\nCOPY run_*.sh Agora/\n\n# Copy the FlexRAN files\nCOPY FlexRAN-FEC-SDK-19-04/ /opt/\n\n# Set up the intel MKL compiler variables (shell environment vars) so that Agora can run.\n# This is only really needed when logging into the container via a remote bash shell and manually running commands.\n# Note that this will NOT take effect if a docker CMD or kubernetes command is used directly.\nRUN echo \"source /opt/intel/compilers_and_libraries/linux/bin/compilervars.sh intel64\" >> ~/.bashrc\n\n\n# Finally, do something, e.g., run Agora.\n# TODO, e.g., CMD ./build/agora data/tddconfig-sim-ul.json\n\n# This command is for debugging/testing; it makes the container run forever so we can remote into it.\n# It's better to do this using a kubernetes command instead.\n# CMD exec /bin/bash -c \"trap : TERM INT; sleep infinity & wait\"\n"
}