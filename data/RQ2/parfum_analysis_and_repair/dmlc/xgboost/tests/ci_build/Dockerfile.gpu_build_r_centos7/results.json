{
  "startTime": 1674251120118,
  "endTime": 1674251121168,
  "originalSmells": [
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 31,
        "lineEnd": 31,
        "columnStart": 4,
        "columnEnd": 54
      }
    },
    {
      "rule": "yumInstallRmVarCacheYum",
      "position": {
        "lineStart": 9,
        "lineEnd": 9,
        "columnStart": 4,
        "columnEnd": 50
      }
    },
    {
      "rule": "yumInstallRmVarCacheYum",
      "position": {
        "lineStart": 12,
        "lineEnd": 17,
        "columnStart": 4,
        "columnEnd": 68
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 29,
        "lineEnd": 29,
        "columnStart": 4,
        "columnEnd": 25
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "ARG CUDA_VERSION_ARG\nFROM nvidia/cuda:$CUDA_VERSION_ARG-devel-centos7\nARG CUDA_VERSION_ARG\n\n# Install all basic requirements\nRUN \\\n    rpm --erase gpg-pubkey-7fa2af80* && \\\n    curl -fsSL https://developer.download.nvidia.com/compute/cuda/repos/rhel7/x86_64/D42D0685.pub | sed '/^Version/d' \\\n        > /etc/pki/rpm-gpg/RPM-GPG-KEY-NVIDIA && \\\n    yum install -y epel-release centos-release-scl && \\\n    yum-config-manager --enable centos-sclo-rh-testing && \\\n    yum -y update && \\\n    yum install -y tar unzip wget xz git which ninja-build readline-devel libX11-devel libXt-devel \\\n                   xorg-x11-server-devel openssl-devel zlib-devel bzip2-devel xz-devel \\\n                   pcre-devel libcurl-devel texlive-* \\\n                   devtoolset-8-gcc devtoolset-8-binutils devtoolset-8-gcc-c++ \\\n                   devtoolset-8-gcc-gfortran devtoolset-8-libquadmath-devel \\\n                   devtoolset-8-runtime devtoolset-8-libstdc++-devel && rm -rf /var/cache/yum\n\nENV PATH=/opt/python/bin:/usr/local/ninja:/opt/software/packages/bin:/opt/R/3.3.0/bin:$PATH\nENV LD_LIBRARY_PATH=/opt/software/packages/lib:/opt/R/3.3.0/lib64:$LD_LIBRARY_PATH\nENV CC=/opt/rh/devtoolset-8/root/usr/bin/gcc\nENV CXX=/opt/rh/devtoolset-8/root/usr/bin/c++\nENV CPP=/opt/rh/devtoolset-8/root/usr/bin/cpp\nENV F77=/opt/rh/devtoolset-8/root/usr/bin/gfortran\n\n# R 3.3.0\nRUN \\\n    wget -nv -nc https://cran.r-project.org/src/base/R-3/R-3.3.0.tar.gz  && \\\n    tar xf R-3.3.0.tar.gz  && \\\n    cd R-3.3.0 && \\\n    ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --prefix=/opt/R/3.3.0 --enable-R-shlib && \\\n    make -j$(nproc) && \\\n    make install && \\\n    # Python\n    wget -nv -nc -O Miniconda3.sh https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh && \\\n    bash Miniconda3.sh -b -p /opt/python && \\\n    /opt/python/bin/python -m pip install auditwheel awscli && \\\n    # CMake\n    wget -nv -nc https://cmake.org/files/v3.14/cmake-3.14.0-Linux-x86_64.sh --no-check-certificate && \\\n    bash cmake-3.14.0-Linux-x86_64.sh --skip-license --prefix=/usr && rm R-3.3.0.tar.gz\n\nENV GOSU_VERSION 1.10\n\n# Install lightweight sudo (not bound to TTY)\nRUN set -ex; \\\n    wget -nv -nc -O /usr/local/bin/gosu \"https://github.com/tianon/gosu/releases/download/$GOSU_VERSION/gosu-amd64\" && \\\n    chmod +x /usr/local/bin/gosu && \\\n    gosu nobody true\n\n# Default entry-point to use if running locally\n# It will preserve attributes of created files\nCOPY entrypoint.sh /scripts/\n\nWORKDIR /workspace\nENTRYPOINT [\"/scripts/entrypoint.sh\"]\n"
}