{
  "startTime": 1674255120486,
  "endTime": 1674255122134,
  "originalSmells": [
    {
      "rule": "mkdirUsrSrcThenRemove",
      "position": {
        "lineStart": 82,
        "lineEnd": 82,
        "columnStart": 8,
        "columnEnd": 35
      }
    },
    {
      "rule": "mkdirUsrSrcThenRemove",
      "position": {
        "lineStart": 132,
        "lineEnd": 132,
        "columnStart": 8,
        "columnEnd": 35
      }
    },
    {
      "rule": "mkdirUsrSrcThenRemove",
      "position": {
        "lineStart": 182,
        "lineEnd": 182,
        "columnStart": 8,
        "columnEnd": 35
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 12,
        "lineEnd": 12,
        "columnStart": 4,
        "columnEnd": 62
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 49,
        "lineEnd": 51,
        "columnStart": 4,
        "columnEnd": 43
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 232,
        "lineEnd": 232,
        "columnStart": 4,
        "columnEnd": 62
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 240,
        "lineEnd": 246,
        "columnStart": 25,
        "columnEnd": 8
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# use debian stable as default distribution\nARG DISTRO=stable\nARG VENDOR=debian\n\n###############################################################################\n# Prepare apt config and eventually repackage\nFROM ${VENDOR}:${DISTRO} AS tool-builder\n\nARG DISTRO\nENV DEBIAN_FRONTEND noninteractive\n\nRUN apt-get -y update && \\\n    apt-get install -y --no-install-recommends ca-certificates && rm -rf /var/lib/apt/lists/*;\n\n###############################################################################\n# For older distros: Add backports packages needed\n#  * debhelper dwz libdebhelper-perl: build tool releate update\n#  * lintian: to keep an acceptable recent version\n#  * linux-libc-dev: acrn-dm needs >= 4.20 for udmabuf UAPI\nRUN REPOBASE=$(cat /etc/apt/sources.list | grep -v -E '^#' | head -1 | awk '{print $3}') && \\\n    eval $(cat /etc/os-release) && \\\n    if [ -n \"${VERSION_CODENAME}\" ]; then \\\n        DISTRONAME=${VERSION_CODENAME}; \\\n    else \\\n        DISTRONAME=${REPOBASE}; \\\n    fi && \\\n    case ${DISTRONAME} in \\\n        buster) \\\n            echo \"deb https://deb.debian.org/debian ${DISTRONAME}-backports main\" > /etc/apt/sources.list.d/${DISTRONAME}-backports.list; \\\n            for p in debhelper dwz libdebhelper-perl lintian linux-libc-dev; do \\\n                (echo \"Package: $p\"; \\\n                 echo \"Pin: release a=${DISTRONAME}-backports\"; \\\n                 echo \"Pin-Priority: 900\"; \\\n                 echo \"\") >> /etc/apt/preferences.d/pin-${DISTRONAME}-backports; \\\n            done; \\\n            ;; \\\n        focal) \\\n            for p in debhelper dwz libdebhelper-perl lintian; do \\\n                (echo \"Package: $p\"; \\\n                 echo \"Pin: release a=${DISTRONAME}-backports\"; \\\n                 echo \"Pin-Priority: 900\"; \\\n                 echo \"\") >> /etc/apt/preferences.d/pin-${DISTRONAME}-backports; \\\n            done; \\\n            ;; \\\n    esac\n\n###############################################################################\n# Install packages needed for git buildpackage based build\nRUN apt-get -y update && \\\n    apt-get install -y --no-install-recommends \\\n        build-essential git-buildpackage devscripts dpkg-dev equivs \\\n        lintian sudo apt-utils pristine-tar && rm -rf /var/lib/apt/lists/*;\n\n\n###############################################################################\n# Repackage packages\n\n# prepare local apt repo for backported packages\nRUN mkdir -p /opt/apt && cd /opt/apt && \\\n    echo \"Origin: ACRN Local Build\" > .Release.header && \\\n    echo \"Label: acrn-local-build\" >> .Release.header && \\\n    apt-ftparchive packages . > Packages && \\\n    apt-ftparchive sources . > Sources && \\\n    (cat .Release.header && apt-ftparchive release .) > Release && \\\n    echo \"deb [trusted=yes] file:/opt/apt ./\" > /etc/apt/sources.list.d/acrn-local.list && \\\n    echo \"deb-src [trusted=yes] file:/opt/apt ./\" >> /etc/apt/sources.list.d/acrn-local.list && \\\n    touch /etc/apt/preferences.d/pin-acrn\n\n# setup git config for temporary use\nRUN git config --global user.name \"ACRN Debian Package Build\" && \\\n    git config --global user.email \"acrn-dev@lists.projectacrn.org\"\n\n# elementpath >=2.5.0\nRUN NEEDEDVERSION=\"2.5.0\"; \\\n    PKGVERSION=$(apt-cache policy python3-elementpath | grep \"Candidate:\" | awk '{ print $2}'); \\\n    if [ -z \"${PKGVERSION}\" -o \"${NEEDEDVERSION}\" != \"$(echo ${NEEDEDVERSION}\\\\n${PKGVERSION} | sort -V | head -n1)\" ]; then \\\n        srcpkg=\"elementpath\" && \\\n        url=\"https://salsa.debian.org/debian/${srcpkg}.git\" && \\\n        upstream_tag=\"upstream/${NEEDEDVERSION}\" && \\\n        debian_tag=\"debian/${NEEDEDVERSION}-1\" && \\\n        debian_branch=\"master\" && \\\n        upstream_branch=\"upstream\" && \\\n        mkdir -p /usr/src/${srcpkg} && cd /usr/src/${srcpkg} && \\\n        git init && git remote add origin ${url} && \\\n        git fetch origin --depth 1 refs/tags/${upstream_tag}:refs/tags/${upstream_tag} && \\\n        git fetch origin --depth 1 refs/tags/${debian_tag}:refs/tags/${debian_tag} && \\\n        if git show ${debian_tag}:debian | grep -qw gbp.conf; then \\\n            pristine_tar=$(git show ${debian_tag}:debian/gbp.conf | awk -F \"=\" '/pristine-tar/ {print $2}' | tr '[:upper:]' '[:lower:]' | xargs); \\\n            if [ \"${pristine_tar}\" = \"true\" ]; then \\\n                git fetch origin pristine-tar; git branch -t pristine-tar origin/pristine-tar; \\\n            fi; \\\n            debian_branch=$(git show ${debian_tag}:debian/gbp.conf | awk -F \"=\" '/debian-branch/ {print $2}' | xargs) && \\\n            if [ -z \"${debian_branch}\" ]; then \\\n                debian_branch=\"master\"; \\\n            fi; \\\n            upstream_branch=$(git show ${debian_tag}:debian/gbp.conf | awk -F \"=\" '/upstream-branch/ {print $2}' | xargs) && \\\n            if [ -z \"${upstream_branch}\" ]; then \\\n                upstream_branch=\"upstream\"; \\\n            fi; \\\n        fi && \\\n        git checkout -b ${upstream_branch} ${upstream_tag} && \\\n        git checkout -b ${debian_branch} ${debian_tag} && \\\n        mk-build-deps --tool='apt-get -o Debug::pkgProblemResolver=yes --no-install-recommends --yes' --install debian/control --remove && \\\n        rm -f $(dpkg-parsechangelog -Ssource)-build-deps_$(dpkg-parsechangelog -Sversion)_*.* && \\\n        DEB_BUILD_OPTIONS=\"nocheck\" gbp buildpackage -F -us -uc  && \\\n        for p in $(grep -E '^Package:' debian/control | awk '{print $2}'); do \\\n            echo \"Package: $p\" >> /etc/apt/preferences.d/pin-acrn; \\\n            echo \"Pin: release l=acrn-local-build\" >> /etc/apt/preferences.d/pin-acrn; \\\n            echo \"Pin-Priority: 900\" >> /etc/apt/preferences.d/pin-acrn; \\\n            echo \"\" >> /etc/apt/preferences.d/pin-acrn; \\\n        done && \\\n        cd /usr/src && \\\n        mv *.deb /opt/apt && \\\n        mv ${srcpkg}_*.dsc /opt/apt && \\\n        mv ${srcpkg}_*.tar.* /opt/apt && \\\n        cd /opt/apt && \\\n        apt-ftparchive packages . > Packages && \\\n        apt-ftparchive sources . > Sources && \\\n        (cat .Release.header && apt-ftparchive release .) > Release && \\\n        apt-get update -y; rm -rf /usr/src/ \\\n    fi\n\n# xmlschema >=1.10.0\nRUN NEEDEDVERSION=\"1.10.0\"; \\\n    PKGVERSION=$(apt-cache policy python3-xmlschema | grep \"Candidate:\" | awk '{ print $2}'); \\\n    if [ -z \"${PKGVERSION}\" -o \"${NEEDEDVERSION}\" != \"$(echo ${NEEDEDVERSION}\\\\n${PKGVERSION} | sort -V | head -n1)\" ]; then \\\n        srcpkg=\"xmlschema\" && \\\n        url=\"https://salsa.debian.org/python-team/packages/python-${srcpkg}.git\" && \\\n        upstream_tag=\"upstream/${NEEDEDVERSION}\" && \\\n        debian_tag=\"debian/${NEEDEDVERSION}-1\" && \\\n        debian_branch=\"master\" && \\\n        upstream_branch=\"upstream\" && \\\n        mkdir -p /usr/src/${srcpkg} && cd /usr/src/${srcpkg} && \\\n        git init && git remote add origin ${url} && \\\n        git fetch origin --depth 1 refs/tags/${upstream_tag}:refs/tags/${upstream_tag} && \\\n        git fetch origin --depth 1 refs/tags/${debian_tag}:refs/tags/${debian_tag} && \\\n        if git show ${debian_tag}:debian | grep -qw gbp.conf; then \\\n            pristine_tar=$(git show ${debian_tag}:debian/gbp.conf | awk -F \"=\" '/pristine-tar/ {print $2}' | tr '[:upper:]' '[:lower:]' | xargs); \\\n            if [ \"${pristine_tar}\" = \"true\" ]; then \\\n                git fetch origin pristine-tar; git branch -t pristine-tar origin/pristine-tar; \\\n            fi; \\\n            debian_branch=$(git show ${debian_tag}:debian/gbp.conf | awk -F \"=\" '/debian-branch/ {print $2}' | xargs) && \\\n            if [ -z \"${debian_branch}\" ]; then \\\n                debian_branch=\"master\"; \\\n            fi; \\\n            upstream_branch=$(git show ${debian_tag}:debian/gbp.conf | awk -F \"=\" '/upstream-branch/ {print $2}' | xargs) && \\\n            if [ -z \"${upstream_branch}\" ]; then \\\n                upstream_branch=\"upstream\"; \\\n            fi; \\\n        fi && \\\n        git checkout -b ${upstream_branch} ${upstream_tag} && \\\n        git checkout -b ${debian_branch} ${debian_tag} && \\\n        mk-build-deps --tool='apt-get -o Debug::pkgProblemResolver=yes --no-install-recommends --yes' --install debian/control --remove && \\\n        rm -f $(dpkg-parsechangelog -Ssource)-build-deps_$(dpkg-parsechangelog -Sversion)_*.* && \\\n        DEB_BUILD_OPTIONS=\"nocheck\" gbp buildpackage -F -us -uc  && \\\n        for p in $(grep -E '^Package:' debian/control | awk '{print $2}'); do \\\n            echo \"Package: $p\" >> /etc/apt/preferences.d/pin-acrn; \\\n            echo \"Pin: release l=acrn-local-build\" >> /etc/apt/preferences.d/pin-acrn; \\\n            echo \"Pin-Priority: 900\" >> /etc/apt/preferences.d/pin-acrn; \\\n            echo \"\" >> /etc/apt/preferences.d/pin-acrn; \\\n        done && \\\n        cd /usr/src && \\\n        mv *.deb /opt/apt && \\\n        mv python-${srcpkg}_*.dsc /opt/apt && \\\n        mv python-${srcpkg}_*.tar.* /opt/apt && \\\n        cd /opt/apt && \\\n        apt-ftparchive packages . > Packages && \\\n        apt-ftparchive sources . > Sources && \\\n        (cat .Release.header && apt-ftparchive release .) > Release && \\\n        apt-get update -y; rm -rf /usr/src/ \\\n    fi\n\n# acpica-unix >= 20200925\nRUN NEEDEDVERSION=\"20200925\"; \\\n    PKGVERSION=$(apt-cache policy acpica-tools | grep \"Candidate:\" | awk '{ print $2}'); \\\n    if [ -z \"${PKGVERSION}\" -o \"${NEEDEDVERSION}\" != \"$(echo ${NEEDEDVERSION}\\\\n${PKGVERSION} | sort -V | head -n1)\" ]; then \\\n        srcpkg=\"acpica-unix\" && \\\n        url=\"https://github.com/ahs3/acpica-tools\" && \\\n        upstream_tag=\"upstream/${NEEDEDVERSION}\" && \\\n        debian_tag=\"debian/${NEEDEDVERSION}-1\" && \\\n        debian_branch=\"master\" && \\\n        upstream_branch=\"upstream\" && \\\n        mkdir -p /usr/src/${srcpkg} && cd /usr/src/${srcpkg} && \\\n        git init && git remote add origin ${url} && \\\n        git fetch origin --depth 1 refs/tags/${upstream_tag}:refs/tags/${upstream_tag} && \\\n        git fetch origin --depth 1 refs/tags/${debian_tag}:refs/tags/${debian_tag} && \\\n        if git show ${debian_tag}:debian | grep -qw gbp.conf; then \\\n            pristine_tar=$(git show ${debian_tag}:debian/gbp.conf | awk -F \"=\" '/pristine-tar/ {print $2}' | tr '[:upper:]' '[:lower:]' | xargs); \\\n            if [ \"${pristine_tar}\" = \"true\" ]; then \\\n                git fetch origin pristine-tar; git branch -t pristine-tar origin/pristine-tar; \\\n            fi; \\\n            debian_branch=$(git show ${debian_tag}:debian/gbp.conf | awk -F \"=\" '/debian-branch/ {print $2}' | xargs) && \\\n            if [ -z \"${debian_branch}\" ]; then \\\n                debian_branch=\"master\"; \\\n            fi; \\\n            upstream_branch=$(git show ${debian_tag}:debian/gbp.conf | awk -F \"=\" '/upstream-branch/ {print $2}' | xargs) && \\\n            if [ -z \"${upstream_branch}\" ]; then \\\n                upstream_branch=\"upstream\"; \\\n            fi; \\\n        fi && \\\n        git checkout -b ${upstream_branch} ${upstream_tag} && \\\n        git checkout -b ${debian_branch} ${debian_tag} && \\\n        mk-build-deps --tool='apt-get -o Debug::pkgProblemResolver=yes --no-install-recommends --yes' --install debian/control --remove && \\\n        rm -f $(dpkg-parsechangelog -Ssource)-build-deps_$(dpkg-parsechangelog -Sversion)_*.* && \\\n        DEB_BUILD_OPTIONS=\"nocheck\" gbp buildpackage -F -us -uc  && \\\n        for p in $(grep -E '^Package:' debian/control | awk '{print $2}'); do \\\n            echo \"Package: $p\" >> /etc/apt/preferences.d/pin-acrn; \\\n            echo \"Pin: release l=acrn-local-build\" >> /etc/apt/preferences.d/pin-acrn; \\\n            echo \"Pin-Priority: 900\" >> /etc/apt/preferences.d/pin-acrn; \\\n            echo \"\" >> /etc/apt/preferences.d/pin-acrn; \\\n        done && \\\n        cd /usr/src && \\\n        mv *.deb /opt/apt && \\\n        mv ${srcpkg}_*.dsc /opt/apt && \\\n        mv ${srcpkg}_*.tar.* /opt/apt && \\\n        cd /opt/apt && \\\n        apt-ftparchive packages . > Packages && \\\n        apt-ftparchive sources . > Sources && \\\n        (cat .Release.header && apt-ftparchive release .) > Release && \\\n        apt-get update -y; rm -rf /usr/src/ \\\n    fi\n\n###############################################################################\n# the final image\nFROM ${VENDOR}:${DISTRO}\n\nARG VENDOR\nARG DISTRO\n\nENV DEBIAN_FRONTEND=noninteractive\n\nRUN apt-get -y update && \\\n    apt-get install -y --no-install-recommends ca-certificates && rm -rf /var/lib/apt/lists/*;\n\nCOPY --from=tool-builder /etc/apt/sources.list.d/* /etc/apt/sources.list.d/\nCOPY --from=tool-builder /etc/apt/preferences.d/* /etc/apt/preferences.d/\nCOPY --from=tool-builder /opt/apt /opt/apt\n\n###############################################################################\n# Install build script requirements\nRUN apt-get -y update && apt-get install -y --no-install-recommends \\\n    devscripts \\\n    equivs \\\n    git-buildpackage \\\n    lintian \\\n    apt-utils \\\n    sudo && rm -rf /var/lib/apt/lists/*;\n\n###############################################################################\n# pre-install build dependencies\nCOPY debian-control-${VENDOR}-${DISTRO} /tmp/debian-control\nRUN tmpdir=$(mktemp -d) && cd ${tmpdir} && \\\n    mk-build-deps --tool='apt-get -o Debug::pkgProblemResolver=yes --no-install-recommends --yes' --install /tmp/debian-control && \\\n    cd / && rm -rf ${tmpdir}\n\n###############################################################################\n# cleanup apt cache\nRUN apt-get clean && rm -rf /var/lib/apt/lists/*\n\n\n###############################################################################\n# Mount the topdir of the Debian git repository at /source\nVOLUME /source/\nWORKDIR /source/\n\n###############################################################################\n# Get default settings and helper scripts\nADD gbp.conf /etc/git-buildpackage/\nADD debian-pkg-build.sh /usr/local/bin/debian-pkg-build.sh\nADD create-apt-repo.sh /usr/local/bin/create-apt-repo.sh\nADD lintian.sh /usr/local/bin/lintian.sh\n\n"
}