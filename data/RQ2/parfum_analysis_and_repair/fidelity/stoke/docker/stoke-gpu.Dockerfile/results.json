{
  "startTime": 1674220405686,
  "endTime": 1674220407042,
  "originalSmells": [
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 95,
        "lineEnd": 95,
        "columnStart": 4,
        "columnEnd": 113
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 80,
        "lineEnd": 80,
        "columnStart": 22,
        "columnEnd": 105
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "############\n# BASE IMAGE\n############\n# Pull from the base ubuntu image w/ the correct ARCH and CUDA\nFROM nvidia/cuda:11.1-base-ubuntu18.04 as base\n\n##########\n# ENV VARS\n##########\nENV LANG C.UTF-8\nENV PYTHONDONTWRITEBYTECODE 1\nENV PYTHONUNBUFFERED 1\n\n######################\n# INSTALL DEPENDENCIES\n######################\n# Use bash instead of sh\n# Needed for string substitution\nSHELL [\"/bin/bash\", \"-c\"]\n# All CUDA dependencies\nRUN apt-get update && apt-get install -y --no-install-recommends \\\n        build-essential \\\n        cuda-command-line-tools-11-1 \\\n        cuda-libraries-11-1 \\\n        libcudnn8=8.1.0.77-1+cuda11.2 \\\n        libnccl2=2.8.4-1+cuda11.1 \\\n        && apt-get clean && \\\n        rm -rf /var/lib/apt/lists/*\n\n# All CUDA-dev dependencies\nRUN apt-get update && apt-get install -y --no-install-recommends \\\n        cuda-libraries-dev-11-1 \\\n        cuda-compiler-11-1 \\\n        libcudnn8-dev=8.1.0.77-1+cuda11.2 \\\n        libnccl-dev=2.8.4-1+cuda11.1 \\\n        && apt-get clean && \\\n        rm -rf /var/lib/apt/lists/*\n\n# Pickup additional dependencies\nRUN apt-get update && apt-get install -y --no-install-recommends \\\n        ca-certificates \\\n        cmake \\\n        curl \\\n        g++-7 \\\n        git \\\n        ibverbs-providers \\\n        libfreetype6-dev \\\n        libhdf5-serial-dev \\\n        libibverbs1 \\\n        libjpeg-dev \\\n        libpng-dev \\\n        librdmacm1 \\\n        libsndfile1 \\\n        libzmq3-dev \\\n        openssh-client \\\n        pkg-config \\\n        software-properties-common \\\n        unzip \\\n        vim \\\n        wget \\\n        && apt-get clean && \\\n        rm -rf /var/lib/apt/lists/*\n\n# For CUDA profiling, TensorFlow requires CUPTI.\nENV LD_LIBRARY_PATH /usr/local/cuda/extras/CUPTI/lib64:/usr/local/cuda/lib64:$LD_LIBRARY_PATH\n\n# Link the libcuda stub and reconfigure dynamic linker run-time bindings\nRUN ln -s /usr/local/cuda/lib64/stubs/libcuda.so /usr/local/cuda/lib64/stubs/libcuda.so.1 \\\n    && echo \"/usr/local/cuda/lib64/stubs\" > /etc/ld.so.conf.d/z-cuda-stubs.conf \\\n    && ldconfig\n\n# Download public key for github.com\nRUN mkdir -p -m 0600 ~/.ssh && ssh-keyscan github.com >> ~/.ssh/known_hosts\n\n############\n# PIP/Python\n############\n# Add deadsnakes which has all Python versions\nRUN add-apt-repository ppa:deadsnakes/ppa\n# Install python X.X-dev and pip via apt-get\nRUN apt-get update && apt-get install --no-install-recommends -y python3.8-dev python3.8-distutils python3-pip python3-setuptools && \\\n    apt-get clean && \\\n    rm -rf /var/lib/apt/lists/*\n# Create the symlink to the correct version of python X.X\nRUN update-alternatives --install /usr/bin/python3 python3 /usr/bin/python3.8 2\n# Upgrade pip -- this will link the pip cmd to the correct version of python X.X\nRUN python3.8 -m pip --no-cache-dir install --upgrade pip\n# Upgrade setuptools\nRUN pip --no-cache-dir install --upgrade setuptools\n# Some tools expect a \"python\" binary\nRUN ln -s $(which python3.8) /usr/local/bin/python\n\n################\n# PYTORCH -- GPU\n################\nRUN pip install --no-cache-dir torch==1.8.1+cu111 torchvision==0.9.1+cu111 -f https://download.pytorch.org/whl/torch_stable.html\n\n################\n# HOROVOD -- GPU\n################\nRUN ldconfig /usr/local/cuda/targets/x86_64-linux/lib/stubs\nRUN HOROVOD_GPU_OPERATIONS=NCCL HOROVOD_WITH_PYTORCH=1 pip install --no-cache-dir horovod[pytorch] && ldconfig\n\n#############\n# NVIDIA APEX\n#############\nWORKDIR /usr/src/code/\nRUN git clone https://github.com/NVIDIA/apex\nWORKDIR /usr/src/code/apex\nRUN pip install -v --no-cache-dir --global-option=\"--cpp_ext\" --global-option=\"--cuda_ext\" ./\n\n# Install stoke w/o MPI support\nRUN pip install --no-cache-dir --trusted-host pypi.python.org stoke"
}