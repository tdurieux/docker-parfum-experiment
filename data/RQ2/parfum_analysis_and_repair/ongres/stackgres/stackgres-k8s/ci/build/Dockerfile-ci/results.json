{
  "startTime": 1674255666741,
  "endTime": 1674255667802,
  "originalSmells": [
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 30,
        "lineEnd": 30,
        "columnStart": 8,
        "columnEnd": 32
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 15,
        "lineEnd": 24,
        "columnStart": 9,
        "columnEnd": 24
      }
    },
    {
      "rule": "apkAddUseNoCache",
      "position": {
        "lineStart": 10,
        "lineEnd": 10,
        "columnStart": 7,
        "columnEnd": 72
      }
    },
    {
      "rule": "apkAddUseNoCache",
      "position": {
        "lineStart": 11,
        "lineEnd": 12,
        "columnStart": 8,
        "columnEnd": 63
      }
    },
    {
      "rule": "apkAddUseNoCache",
      "position": {
        "lineStart": 29,
        "lineEnd": 29,
        "columnStart": 8,
        "columnEnd": 23
      }
    },
    {
      "rule": "apkAddUseNoCache",
      "position": {
        "lineStart": 32,
        "lineEnd": 32,
        "columnStart": 8,
        "columnEnd": 19
      }
    },
    {
      "rule": "apkAddUseNoCache",
      "position": {
        "lineStart": 33,
        "lineEnd": 33,
        "columnStart": 8,
        "columnEnd": 18
      }
    },
    {
      "rule": "apkAddUseNoCache",
      "position": {
        "lineStart": 45,
        "lineEnd": 45,
        "columnStart": 8,
        "columnEnd": 23
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "####\n# This Dockerfile is used in order to build a container that runs the StackGres ITs\n#\n# Build the image with:\n#\n# docker build -f stackgres-k8s/ci/build/Dockerfile-ci -t registry.gitlab.com/ongresinc/stackgres/ci-amd64:1.11 stackgres-k8s/ci/build/\n#\n###\n\nFROM docker.io/docker:20.10\n   RUN apk add --no-cache coreutils gnupg openssl jq curl bash zsh sed libc6-compat\n    RUN apk add --no-cache attr-dev e2fsprogs-dev glib-dev libtirpc-dev openssl-dev util-linux-dev \\\n      gcc libc-dev make automake autoconf libtool linux-headers\n    RUN wget -q https://github.com/zfsonlinux/zfs/releases/download/zfs-0.8.4/zfs-0.8.4.tar.gz -O -|tar xz\n    RUN cd zfs-0.8.4 \\\n      && ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --prefix=/usr \\\n        --with-tirpc \\\n        --sysconfdir=/etc \\\n        --mandir=/usr/share/man \\\n        --infodir=/usr/share/info \\\n        --localstatedir=/var \\\n        --with-config=user \\\n        --with-udevdir=/lib/udev \\\n        --disable-systemd \\\n        --disable-static \\\n      && make install\n    RUN uname -a | grep -qxF aarch64 \\\n      || wget -q -O /bin/yajsv https://github.com/neilpa/yajsv/releases/download/v1.4.0/yajsv.linux.amd64\n    RUN chmod a+x /bin/yajsv\n    RUN apk add --no-cache py3-pip\n    RUN pip3 install --no-cache-dir yamllint yq\n    RUN mkdir -p \"$HOME/.docker\"; echo '{\"experimental\":\"enabled\"}' > \"$HOME/.docker/config.json\"\n    RUN apk add --no-cache git\n    RUN apk add --no-cache xz\n    RUN mkdir -p ~/.docker/cli-plugins\n    RUN wget -q -O ~/.docker/cli-plugins/docker-buildx \"https://github.com/docker/buildx/releases/download/v0.7.1/buildx-v0.7.1.linux-$(uname -m | grep -qxF aarch64 && echo arm64 || echo amd64)\"\n    RUN chmod a+x ~/.docker/cli-plugins/docker-buildx\n    RUN echo '{\"experimental\":\"enabled\"}' > ~/.docker/config.json\n    RUN wget -q -O /bin/kubectl \"https://dl.k8s.io/release/v1.21.3/bin/linux/$(uname -m | grep -qxF aarch64 && echo arm64 || echo amd64)/kubectl\"\n    RUN chmod a+x /bin/kubectl\n    RUN wget -q -O /bin/kind \"https://github.com/kubernetes-sigs/kind/releases/download/v0.11.1/kind-linux-$(uname -m | grep -qxF aarch64 && echo arm64 || echo amd64)\"\n    RUN chmod a+x /bin/kind\n    RUN wget -q -O /bin/k3d \"https://github.com/rancher/k3d/releases/download/v4.4.7/k3d-linux-$(uname -m | grep -qxF aarch64 && echo arm64 || echo amd64)\"\n    RUN chmod a+x /bin/k3d\n    RUN wget -q \"https://get.helm.sh/helm-v3.7.2-linux-$(uname -m | grep -qxF aarch64 && echo arm64 || echo amd64).tar.gz\" -O -|tar xz --strip-components=1 -C /bin -f - \"linux-$(uname -m | grep -qxF aarch64 && echo arm64 || echo amd64)/helm\"\n    RUN apk add --no-cache aws-cli\n"
}