{
  "startTime": 1674246695130,
  "endTime": 1674246696391,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 33,
        "lineEnd": 34,
        "columnStart": 4,
        "columnEnd": 103
      }
    },
    {
      "rule": "wgetUseHttpsUrl",
      "position": {
        "lineStart": 52,
        "lineEnd": 53,
        "columnStart": 4,
        "columnEnd": 99
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 56,
        "lineEnd": 56,
        "columnStart": 4,
        "columnEnd": 51
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 11,
        "lineEnd": 11,
        "columnStart": 4,
        "columnEnd": 36
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 20,
        "lineEnd": 20,
        "columnStart": 25,
        "columnEnd": 51
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 29,
        "lineEnd": 29,
        "columnStart": 23,
        "columnEnd": 51
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 11,
        "lineEnd": 11,
        "columnStart": 4,
        "columnEnd": 36
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 14,
        "lineEnd": 15,
        "columnStart": 4,
        "columnEnd": 86
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 11,
        "lineEnd": 11,
        "columnStart": 4,
        "columnEnd": 36
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 14,
        "lineEnd": 15,
        "columnStart": 4,
        "columnEnd": 86
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 20,
        "lineEnd": 20,
        "columnStart": 25,
        "columnEnd": 51
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 29,
        "lineEnd": 29,
        "columnStart": 23,
        "columnEnd": 51
      }
    }
  ],
  "repairedSmells": [
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 11,
        "lineEnd": 11,
        "columnStart": 4,
        "columnEnd": 60
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 14,
        "lineEnd": 15,
        "columnStart": 4,
        "columnEnd": 86
      }
    }
  ],
  "repairedDockerfile": "FROM ubuntu:19.04\nENV DEBIAN_FRONTEND noninteractive\nENV JAVA_VERSION=8 \\\n    JAVA_UPDATE=131 \\\n    JAVA_BUILD=11 \\\n    JAVA_HOME=\"/usr/lib/jvm/default-jvm\"\n\n# update dpkg repositories and install tools\nRUN apt-get update\n#--------------------------------------------\n#------------ Open JDK\nRUN apt-get install --no-install-recommends -y openjdk-8-jdk && rm -rf /var/lib/apt/lists/*;\n#--------------------------------------------\n#------------ Tools for Jenkins and apt-get to use SSL Repositorys\nRUN apt-get install -y --no-install-recommends apt-utils git wget curl graphviz \\\n    apt-transport-https ca-certificates software-properties-common gpg-agent zip unzip && rm -rf /var/lib/apt/lists/*;\n#-----------------------------------------------\n#---------------  Ansible\n#-----------------------------------------------\nRUN  apt-add-repository ppa:ansible/ansible 2>/dev/null\nRUN apt-get update && apt-get -y --no-install-recommends install ansible && rm -rf /var/lib/apt/lists/*;\n#--------------------------------------------\n#------------ Docker\n#--------------------------------------------\nRUN echo\nRUN curl -fsSL https://download.docker.com/linux/ubuntu/gpg > docker-public-key && \\\n    apt-key add docker-public-key && \\\n    rm docker-public-key\nRUN add-apt-repository \"deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) edge test\" && \\\n     apt-get update && apt-get install --no-install-recommends -y docker-ce && rm -rf /var/lib/apt/lists/*;\n#--------------------------------------------\n#------------ Docker Compose\n#--------------------------------------------\nRUN curl -f -o /usr/bin/docker-compose -L \\\n    \"https://github.com/docker/compose/releases/download/1.21.2/docker-compose-$(uname -s)-$(uname -m)\" \\\n    && chmod +x /usr/bin/docker-compose\n\n#--------------------------------------------\n#------------ Jenkins with jdk-8\n#--------------------------------------------\n\nENV JAVA_HOME /usr/lib/jvm/java-8-openjdk-amd64\n\n# This is the line for the Jenkins prefix to set to get access with nginx and a\n# comfortable path like http://<yourhost>/jenins... remember\n# to set the location in the  reverse-proxy.conf if you change this\n\nENV JENKINS_OPTS=\"--webroot=/var/cache/jenkins/war --prefix=/jenkins\"\nENV GIT_SSL_NO_VERIFY=1\n#----------------------------------------\n#  Maven\n#----------------------------------------\nRUN wget --no-verbose -O /tmp/apache-maven-3.5.3.tar.gz \\\n          https://archive.apache.org/dist/maven/maven-3/3.5.3/binaries/apache-maven-3.5.3-bin.tar.gz\n# verify checksum and install maven\nRUN echo \"51025855d5a7456fc1a67666fbef29de /tmp/apache-maven-3.5.3.tar.gz\" | md5sum -c && \\\n    tar xzf /tmp/apache-maven-3.5.3.tar.gz -C /opt/ && ln -s /opt/apache-maven-3.5.3 /opt/maven && rm /tmp/apache-maven-3.5.3.tar.gz\n\nENV MAVEN_HOME /opt/maven\nENV PATH $MAVEN_HOME/bin:$JAVA_HOME/bin:$PATH\n\nRUN rm -rf /opt/java/src.zip && \\\n    rm -rf /tmp/$filename && \\\n    rm -f  /tmp/apache-maven-3.5.3.tar.gz\n\n\n#------------------------------\n# install Jenkins\n#------------------------------\nENV JENKINS_HOME /var/jenkins_home\nENV JENKINS_SLAVE_AGENT_PORT 50000\nARG user=jenkins\nARG group=jenkins\nARG uid=1000\nARG gid=1000\n# Jenkins is run with user `jenkins`, uid = 1000 If you bind mount a volume from the host or a data container,  ensure you use the same uid\nRUN groupadd -g ${gid} ${group} && useradd -d \"$JENKINS_HOME\" -u ${uid} -g ${gid} -m -s /bin/bash ${user}\n# Jenkins home directory is a volume, so configuration and build history\n# can be persisted and survive image upgrades\n\nRUN mkdir -p /usr/share/jenkins/ref/init.groovy.d && mkdir /tmp\n\nVOLUME /var/jenkins_home\n\nENV TINI_VERSION 0.18.0\nENV TINI_SHA eadb9d6e2dc960655481d78a92d2c8bc021861045987ccd3e27c7eae5af0cf33\n# Use tini as subreaper in Docker container to adopt zombie processes\nRUN curl -fsSL https://github.com/krallin/tini/releases/download/v${TINI_VERSION}/tini-static-amd64 -o /bin/tini && chmod +x /bin/tini \\\n  && echo \"$TINI_SHA  /bin/tini\" | sha256sum -c -\n\n# jenkins version being bundled in this docker image\n# This is the latest stable version define in file ../.env\nARG JENKINS_LTS_VERSION\nRUN echo JENKINS_LTS_VERSION=${JENKINS_LTS_VERSION}\n\n#### jenkins.war checksum, download will be validated using it\nARG JENKINS_URL=http://updates.jenkins-ci.org/download/war/${JENKINS_LTS_VERSION}/jenkins.war\n# could use ADD but this one does not check Last-Modified header neither does it allow to control checksum  see https://github.com/docker/docker/issues/8331\nRUN echo Download from ${JENKINS_URL} && curl -fL ${JENKINS_URL} -o /usr/share/jenkins/jenkins.war\n\n###### # Copy all Cached plugins ...\nCOPY Plugins/${JENKINS_LTS_VERSION}/* /usr/share/jenkins/ref/plugins/\n\nENV JENKINS_UC https://updates.jenkins.io\nENV JENKINS_UC_EXPERIMENTAL=https://updates.jenkins.io/experimental\nRUN chown -R ${user} \"$JENKINS_HOME\" /usr/share/jenkins/ref\n\n# for main web interface, reversed-proxied by nginx\nEXPOSE 8080\nENV COPY_REFERENCE_FILE_LOG $JENKINS_HOME/copy_reference_file.log\nUSER ${user}\nCOPY jenkins-support /usr/local/bin/jenkins-support\nCOPY jenkins.sh /usr/local/bin/jenkins.sh\nENV JAVA_OPTIONS=\"-Djava.awt.headless=true -Dhudson.security.csrf.requestfield=crumb -Djenkins.install.runSetupWizard=false\"\n\nENTRYPOINT [\"/bin/tini\", \"--\", \"/usr/local/bin/jenkins.sh\"]\n#-------------------------------------------------------------------------\n# if you need a list of all your actual plugins use this to\n# get all Plugins from an existing Jenins without Version (latest is used)\n#--------------------------------------------------------------------------\n# JENKINS_HOST=username:password@myhost.com:port\n# curl -sSL \"http://$JENKINS_HOST/pluginManager/api/xml?depth=1&xpath=/*/*/shortName|/*/*/version&wrapper=plugins\" | \\\n#  perl -pe 's/.*?<shortName>([\\w-]+).*?<version>([^<]+)()(<\\/\\w+>)+/\\1 \\2\\n/g'|sed 's/ /:/ ' | awk -F: '{ print $1 }' | sort'\n# ----------------------------------------------------\n# Prevent Setup Wizard .. all Plugins copied before\nRUN echo ${JENKINS_LTS_VERSION}  > /usr/share/jenkins/ref/jenkins.install.UpgradeWizard.state\nRUN echo ${JENKINS_LTS_VERSION} > /usr/share/jenkins/ref/jenkins.install.InstallUtil.lastExecVersion\n\nUSER root\n\nRUN apt-get clean autoremove && rm -rf /var/lib/apt/lists/*\n"
}