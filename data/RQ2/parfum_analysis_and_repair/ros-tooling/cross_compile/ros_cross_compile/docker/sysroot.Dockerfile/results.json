{
  "startTime": 1674249370252,
  "endTime": 1674249371352,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 38,
        "lineEnd": 38,
        "columnStart": 6,
        "columnEnd": 126
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 42,
        "lineEnd": 42,
        "columnStart": 6,
        "columnEnd": 76
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# This file describes an image that has everything necessary installed to build a target ROS workspace\n# It uses QEmu user-mode emulation to perform dependency installation and build\n# Assumptions: qemu-user-static directory is present in docker build context\n\nARG BASE_IMAGE\nFROM ${BASE_IMAGE}\n\nARG ROS_VERSION\n\nSHELL [\"/bin/bash\", \"-c\"]\n\nCOPY bin/* /usr/bin/\n\n# Set timezone\nRUN echo 'Etc/UTC' > /etc/timezone && \\\n    ln -sf /usr/share/zoneinfo/Etc/UTC /etc/localtime\n\nRUN apt-get update && apt-get install --no-install-recommends -y \\\n        tzdata \\\n        locales \\\n    && rm -rf /var/lib/apt/lists/*\n\n# Set locale\nRUN echo 'en_US.UTF-8 UTF-8' >> /etc/locale.gen && \\\n    locale-gen && \\\n    update-locale LC_ALL=en_US.UTF-8 LANG=en_US.UTF-8\nENV LANG en_US.UTF-8\nENV LC_ALL C.UTF-8\n\n# Add the ros apt repo\nRUN apt-get update && apt-get install --no-install-recommends -y \\\n        ca-certificates \\\n        curl \\\n        dirmngr \\\n        gnupg2 \\\n        lsb-release \\\n    && rm -rf /var/lib/apt/lists/*\nRUN if [[ \"${ROS_VERSION}\" == \"ros2\" ]]; then \\\n      curl -f -sSL https://raw.githubusercontent.com/ros/rosdistro/master/ros.key -o /usr/share/keyrings/ros-archive-keyring.gpg; \\\n      echo \"deb [signed-by=/usr/share/keyrings/ros-archive-keyring.gpg] http://packages.ros.org/${ROS_VERSION}/ubuntu `lsb_release -cs` main\" | \\\n          tee /etc/apt/sources.list.d/ros2.list > /dev/null; \\\n    else \\\n      curl -f -s https://raw.githubusercontent.com/ros/rosdistro/master/ros.asc | apt-key add -; \\\n      echo \"deb http://packages.ros.org/${ROS_VERSION}/ubuntu `lsb_release -cs` main\" \\\n          > /etc/apt/sources.list.d/${ROS_VERSION}-latest.list; \\\n    fi\n\n# ROS dependencies\nRUN apt-get update && apt-get install --no-install-recommends -y \\\n      build-essential \\\n      cmake \\\n      python3-colcon-common-extensions \\\n      python3-colcon-mixin \\\n      python3-dev \\\n      python3-pip \\\n    && rm -rf /var/lib/apt/lists/*\n\nRUN python3 -m pip install -U \\\n    setuptools\n\n# Install some pip packages needed for testing ROS 2\nRUN if [[ \"${ROS_VERSION}\" == \"ros2\" ]]; then \\\n    python3 -m pip install -U \\\n    flake8 \\\n    flake8-blind-except \\\n    flake8-builtins \\\n    flake8-class-newline \\\n    flake8-comprehensions \\\n    flake8-deprecated \\\n    flake8-docstrings \\\n    flake8-import-order \\\n    flake8-quotes \\\n    pytest-repeat \\\n    pytest-rerunfailures \\\n    pytest \\\n    pytest-cov \\\n    pytest-runner \\\n  ; fi\n\n# Install Fast-RTPS dependencies for ROS 2\nRUN if [[ \"${ROS_VERSION}\" == \"ros2\" ]]; then \\\n    apt-get update && apt-get install --no-install-recommends -y \\\n        libasio-dev \\\n        libtinyxml2-dev \\\n    && rm -rf /var/lib/apt/lists/* \\\n  ; fi\n\n# Run arbitrary user setup (copy data and run script)\nCOPY user-custom-data/ custom-data/\nCOPY user-custom-setup .\nRUN chmod +x ./user-custom-setup && \\\n    ./user-custom-setup && \\\n    rm -rf /var/lib/apt/lists/*\n\n# Use generated rosdep installation script\nCOPY install_rosdeps.sh .\nRUN chmod +x install_rosdeps.sh\nRUN export DEBIAN_FRONTEND=noninteractive && apt-get update && \\\n    ./install_rosdeps.sh && \\\n    rm -rf /var/lib/apt/lists/*\n\n# Copy colcon defaults config and set COLCON_DEFAULTS_FILE\nCOPY defaults.yaml /root\nENV COLCON_DEFAULTS_FILE=/root/defaults.yaml\n\n# Set up build tools for the workspace\nCOPY mixins/ mixins/\nRUN colcon mixin add cc_mixin file://$(pwd)/mixins/index.yaml && colcon mixin update cc_mixin\n# In case the workspace did not actually install any dependencies, add these for uniformity\nCOPY build_workspace.sh /root\nWORKDIR /ros_ws\nCOPY user-custom-post-build /\nRUN chmod +x /user-custom-post-build\nENTRYPOINT [\"/root/build_workspace.sh\"]\n"
}