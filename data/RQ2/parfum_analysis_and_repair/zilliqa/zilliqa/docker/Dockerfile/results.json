{
  "startTime": 1674254669156,
  "endTime": 1674254670174,
  "originalSmells": [
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 179,
        "lineEnd": 179,
        "columnStart": 4,
        "columnEnd": 22
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 22,
        "lineEnd": 22,
        "columnStart": 22,
        "columnEnd": 58
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 23,
        "lineEnd": 23,
        "columnStart": 0,
        "columnEnd": 22
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 24,
        "lineEnd": 24,
        "columnStart": 0,
        "columnEnd": 23
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 25,
        "lineEnd": 25,
        "columnStart": 0,
        "columnEnd": 34
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 26,
        "lineEnd": 26,
        "columnStart": 0,
        "columnEnd": 29
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 27,
        "lineEnd": 27,
        "columnStart": 0,
        "columnEnd": 29
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 41,
        "lineEnd": 41,
        "columnStart": 7,
        "columnEnd": 52
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 138,
        "lineEnd": 138,
        "columnStart": 7,
        "columnEnd": 52
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 22,
        "lineEnd": 22,
        "columnStart": 22,
        "columnEnd": 58
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 23,
        "lineEnd": 23,
        "columnStart": 0,
        "columnEnd": 22
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 24,
        "lineEnd": 24,
        "columnStart": 0,
        "columnEnd": 23
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 25,
        "lineEnd": 25,
        "columnStart": 0,
        "columnEnd": 34
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 26,
        "lineEnd": 26,
        "columnStart": 0,
        "columnEnd": 29
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 27,
        "lineEnd": 27,
        "columnStart": 0,
        "columnEnd": 29
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# Copyright (C) 2019 Zilliqa\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation, either version 3 of the License, or\n# (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with this program.  If not, see <https://www.gnu.org/licenses/>.\n#\n\nARG BASE=zilliqa/scilla:v0.11.0\nFROM ${BASE} AS scilla\n# run a copy -L to unfold the symlinkes, and strip all exes\nRUN mkdir -p /scilla/0/bin2/ && cp -L /scilla/0/bin/* /scilla/0/bin2/ && strip /scilla/0/bin2/*\n\nFROM ubuntu:18.04 as rust_builder\nRUN apt-get update && apt-get install --no-install-recommends -y protobuf-compiler && \\\n apt-get install --no-install-recommends -y git && \\\n apt-get install --no-install-recommends -y curl && \\\n apt-get install --no-install-recommends -y build-essential && \\\n apt-get install --no-install-recommends -y pkg-config && \\\n apt-get install --no-install-recommends -y libssl-dev && \\\ncurl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs -o install_script.sh && \\\nsh install_script.sh -y && rm -rf /var/lib/apt/lists/*;\nENV PATH=\"/root/.cargo/bin:${PATH}\"\nRUN git clone https://github.com/Zilliqa/evm-ds /evm-ds && \\\n    cd /evm-ds && \\\n    cargo build --verbose --release --package evm-ds && \\\n    cargo test --verbose --release --package evm-ds\n\n\n# start from a new ubuntu environment as builder for zilliqa, make sure the deps is consistent with those in the runner image\nFROM ubuntu:18.04 AS builder\n# Format guideline: one package per line and keep them alphabetically sorted\nRUN apt-get update \\\n    && apt-get install --no-install-recommends -y software-properties-common \\\n    && apt-get update && apt-get install -y --no-install-recommends \\\n    autoconf \\\n    build-essential \\\n    ca-certificates \\\n    cmake \\\n    wget \\\n    # curl is not a build dependency\n    curl \\\n    git \\\n    golang \\\n    # rysnc bydefault gets installed with opam package of scilla.Better to explicitly\n    # mention again as installation candidate\n    rsync \\\n    libboost-filesystem-dev \\\n    libboost-program-options-dev \\\n    libboost-system-dev \\\n    libboost-test-dev \\\n    libboost-python-dev \\\n    libcurl4-openssl-dev \\\n    libevent-dev \\\n    libjsoncpp-dev \\\n    libjsonrpccpp-dev \\\n    libleveldb-dev \\\n    libmicrohttpd-dev \\\n    libminiupnpc-dev \\\n    libsnappy-dev \\\n    libssl-dev \\\n    libtool \\\n    ocl-icd-opencl-dev \\\n    pkg-config \\\n    python3-dev \\\n    python3-pip \\\n    python3-setuptools \\\n    libsecp256k1-dev \\\n    && rm -rf /var/lib/apt/lists/*\n\n# Install cmake 3.19\nRUN wget https://github.com/Kitware/CMake/releases/download/v3.19.3/cmake-3.19.3-Linux-x86_64.sh \\\n    && mkdir -p \"${HOME}\"/.local \\\n    && bash ./cmake-3.19.3-Linux-x86_64.sh --skip-license --prefix=\"${HOME}\"/.local/\n\n# Include path to refer to latest version of cmake\nENV PATH=\"/root/.local/bin:${PATH}\"\n\nRUN cmake --version \\\n    && rm cmake-3.19.3-Linux-x86_64.sh\n\n# Manually input tag or commit, can be overwritten by docker build-args\nARG COMMIT_OR_TAG=v8.2.0-alpha.0\nARG REPO=https://github.com/Zilliqa/Zilliqa.git\nARG SOURCE_DIR=/zilliqa\nARG BUILD_DIR=/build\nARG INSTALL_DIR=/usr/local\nARG BUILD_TYPE=RelWithDebInfo\nARG EXTRA_CMAKE_ARGS=\nARG MONGO_INSTALL_DIR=${BUILD_DIR}/mongo\n\nRUN git clone ${REPO} ${SOURCE_DIR} \\\n    && git -C ${SOURCE_DIR} checkout ${COMMIT_OR_TAG} \\\n    && cmake -H${SOURCE_DIR} -B${BUILD_DIR} -DCMAKE_BUILD_TYPE=${BUILD_TYPE} \\\n    -DCMAKE_INSTALL_PREFIX=${INSTALL_DIR} ${EXTRA_CMAKE_ARGS} \\\n    && cmake --build ${BUILD_DIR} -- -j$(nproc) \\\n    && cmake --build ${BUILD_DIR} --target install \\\n    && echo \"built files:\" && ls -lh ${BUILD_DIR} && echo \"installed libs:\" && ls -lh ${INSTALL_DIR}/lib \\\n    && echo \"mongo files:\" && ls -lh ${MONGO_INSTALL_DIR}/lib \\\n    # strip all exes\n    && strip /usr/local/bin/grepperf \\\n       /usr/local/bin/zilliqad \\\n       /usr/local/bin/genkeypair \\\n       /usr/local/bin/signmultisig \\\n       /usr/local/bin/verifymultisig \\\n       /usr/local/bin/getpub \\\n       /usr/local/bin/getaddr \\\n       /usr/local/bin/genaccounts \\\n       /usr/local/bin/sendcmd \\\n       /usr/local/bin/gentxn \\\n       /usr/local/bin/restore \\\n       /usr/local/bin/gensigninitialds \\\n       /usr/local/bin/validateDB \\\n       /usr/local/bin/genTxnBodiesFromS3 \\\n       /usr/local/bin/getnetworkhistory \\\n       /usr/local/bin/isolatedServer \\\n       /usr/local/bin/getrewardhistory \\\n    #    /usr/local/bin/zilliqa \\\n       /usr/local/bin/data_migrate \\\n       /usr/local/lib/libSchnorr.so \\\n       /usr/local/lib/libCryptoUtils.so \\\n       /usr/local/lib/libNAT.so \\\n       /usr/local/lib/libCommon.so \\\n       /usr/local/lib/libTrie.so\n\n# start from a new ubuntu as the runner image\nFROM ubuntu:18.04\n\n# install all necessary libraries\nRUN apt-get update \\\n    && apt-get install --no-install-recommends -y software-properties-common \\\n    && apt-get update && apt-get install -y --no-install-recommends \\\n    # libs\n    ca-certificates \\\n    libboost-filesystem-dev \\\n    libboost-program-options-dev \\\n    libboost-system-dev \\\n    libboost-test-dev \\\n    libboost-python-dev \\\n    libcurl4-openssl-dev \\\n    libevent-dev \\\n    libjsoncpp-dev \\\n    libjsonrpccpp-dev \\\n    libleveldb-dev \\\n    libmicrohttpd-dev \\\n    libminiupnpc-dev \\\n    libsnappy-dev \\\n    libssl-dev \\\n    libtool \\\n    ocl-icd-opencl-dev \\\n    pkg-config \\\n    python3-dev \\\n    python3-pip \\\n    python3-setuptools \\\n    libsecp256k1-dev \\\n    # tools\n    curl \\\n    dnsutils \\\n    gdb \\\n    git \\\n    less \\\n    logrotate \\\n    net-tools \\\n    rsync \\\n    rsyslog \\\n    trickle \\\n    vim \\\n    && rm -rf /var/lib/apt/lists/*\n\n# install all necessary libraries for python\nCOPY requirements3.txt ./\nRUN pip3 install --no-cache-dir wheel \\\n    && pip3 install --no-cache-dir -r requirements3.txt \\\n    && update-alternatives --install /usr/bin/python python /usr/bin/python3 10\n\n# make dirs fro scilla and zilliqa\nRUN mkdir -p \\\n    /scilla/0/bin /scilla/0/src/stdlib \\\n    /zilliqa/scripts\n\nARG INSTALL_DIR=/usr/local\nARG MONGO_INSTALL_DIR=/build/mongo\n\n# pour in scilla binaries\nCOPY --from=scilla  /scilla/0/bin2            /scilla/0/bin\n# pour in scilla conntract stdlibs\nCOPY --from=scilla  /scilla/0/src/stdlib     /scilla/0/src/stdlib\n# pour in zilliqa scripts\nCOPY --from=builder /zilliqa/scripts         /zilliqa/scripts\n# pour in zilliqa binaries and dynnamic libs\nCOPY --from=builder ${INSTALL_DIR}/bin/*     ${INSTALL_DIR}/bin/\nCOPY --from=builder ${INSTALL_DIR}/lib/*.so* ${INSTALL_DIR}/lib/\nCOPY --from=builder ${MONGO_INSTALL_DIR}/lib/*.so* ${INSTALL_DIR}/lib/\nCOPY --from=rust_builder /evm-ds/target/release/evm-ds ${INSTALL_DIR}/bin/\n\nADD https://github.com/krallin/tini/releases/latest/download/tini /tini\n\nENV LD_LIBRARY_PATH=${INSTALL_DIR}/lib:${MONGO_INSTALL_DIR}/lib\n\nENTRYPOINT [\"/bin/bash\"]\n"
}