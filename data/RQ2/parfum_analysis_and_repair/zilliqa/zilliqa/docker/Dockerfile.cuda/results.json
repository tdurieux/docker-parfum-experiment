{
  "startTime": 1674255223246,
  "endTime": 1674255224582,
  "originalSmells": [
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 58,
        "lineEnd": 58,
        "columnStart": 7,
        "columnEnd": 45
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 22,
        "lineEnd": 22,
        "columnStart": 7,
        "columnEnd": 52
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# Copyright (C) 2019 Zilliqa\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation, either version 3 of the License, or\n# (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with this program.  If not, see <https://www.gnu.org/licenses/>.\n#\n\nFROM zilliqa/scilla:v0.11.0\n\nCOPY requirements3.cuda.txt ./\n\n# Format guideline: one package per line and keep them alphabetically sorted\nRUN apt-get update \\\n    && apt-get install --no-install-recommends -y software-properties-common \\\n    && apt-get update && apt-get install -y --no-install-recommends \\\n    autoconf \\\n    build-essential \\\n    ca-certificates \\\n    cmake \\\n    wget \\\n    # curl is not a build dependency\n    curl \\\n    git \\\n    golang \\\n    # currently rysnc bydefault gets installed with opam package of scilla.Better to explicitly\n    # mention again as installation candidate\n    rsync \\\n    libboost-filesystem-dev \\\n    libboost-program-options-dev \\\n    libboost-system-dev \\\n    libboost-test-dev \\\n    libboost-python-dev \\\n    python3-dev \\\n    libcurl4-openssl-dev \\\n    libevent-dev \\\n    libjsoncpp-dev \\\n    libjsonrpccpp-dev \\\n    libleveldb-dev \\\n    libmicrohttpd-dev \\\n    libminiupnpc-dev \\\n    libsnappy-dev \\\n    libssl-dev \\\n    libtool \\\n    ocl-icd-opencl-dev \\\n    pkg-config \\\n    python3-setuptools \\\n    python3-pip \\\n    libsecp256k1-dev \\\n    && rm -rf /var/lib/apt/lists/* \\\n    && pip3 install --no-cache-dir -r requirements3.cuda.txt\n\n# Install cmake 3.19\nRUN wget https://github.com/Kitware/CMake/releases/download/v3.19.3/cmake-3.19.3-Linux-x86_64.sh \\\n    && mkdir -p \"${HOME}\"/.local \\\n    && bash ./cmake-3.19.3-Linux-x86_64.sh --skip-license --prefix=\"${HOME}\"/.local/\n\n# Include path to refer to latest version of cmake\nENV PATH=\"/root/.local/bin:${PATH}\"\n\nRUN cmake --version \\\n    && rm cmake-3.19.3-Linux-x86_64.sh\n\nRUN update-alternatives --install /usr/bin/python python /usr/bin/python3 10\n\n############################### CUDA Installation ##############################\n# taken from https://gitlab.com/nvidia/container-images/cuda/-/blob/master/dist/ubuntu18.04/10.0/base/Dockerfile\nRUN apt-get update && apt-get install -y --no-install-recommends \\\ngnupg2 curl ca-certificates && \\\n    curl -fsSL https://developer.download.nvidia.com/compute/cuda/repos/ubuntu1804/x86_64/7fa2af80.pub | apt-key add - && \\\n    echo \"deb https://developer.download.nvidia.com/compute/cuda/repos/ubuntu1804/x86_64 /\" > /etc/apt/sources.list.d/cuda.list && \\\n    echo \"deb https://developer.download.nvidia.com/compute/machine-learning/repos/ubuntu1804/x86_64 /\" > /etc/apt/sources.list.d/nvidia-ml.list && \\\n    apt-get purge --autoremove -y curl && \\\nrm -rf /var/lib/apt/lists/*\n\nENV CUDA_VERSION 10.0.130\n\nENV CUDA_PKG_VERSION 10-0=$CUDA_VERSION-1\n\n# For libraries in the cuda-compat-* package: https://docs.nvidia.com/cuda/eula/index.html#attachment-a\nRUN apt-get update && apt-get install -y --no-install-recommends \\\n        cuda-cudart-$CUDA_PKG_VERSION \\\ncuda-compat-10-0 && \\\nln -s cuda-10.0 /usr/local/cuda && \\\n    rm -rf /var/lib/apt/lists/*\n\n# Required for nvidia-docker v1\nRUN echo \"/usr/local/nvidia/lib\" >> /etc/ld.so.conf.d/nvidia.conf && \\\n    echo \"/usr/local/nvidia/lib64\" >> /etc/ld.so.conf.d/nvidia.conf\n\nENV PATH /usr/local/nvidia/bin:/usr/local/cuda/bin:${PATH}\nENV LD_LIBRARY_PATH /usr/local/nvidia/lib:/usr/local/nvidia/lib64\n\n# nvidia-container-runtime\nENV NVIDIA_VISIBLE_DEVICES all\nENV NVIDIA_DRIVER_CAPABILITIES compute,utility\nENV NVIDIA_REQUIRE_CUDA \"cuda>=10.0 brand=tesla,driver>=384,driver<385 brand=tesla,driver>=410,driver<411\"\n\n#taken from https://gitlab.com/nvidia/container-images/cuda/-/blob/master/dist/ubuntu18.04/10.0/runtime/Dockerfile\nENV NCCL_VERSION 2.4.8\n\nRUN apt-get update && apt-get install -y --no-install-recommends \\\n    cuda-libraries-$CUDA_PKG_VERSION \\\ncuda-nvtx-$CUDA_PKG_VERSION \\\nlibnccl2=$NCCL_VERSION-1+cuda10.0 && \\\n    apt-mark hold libnccl2 && \\\n    rm -rf /var/lib/apt/lists/*\n\n\n# taken from https://gitlab.com/nvidia/container-images/cuda/-/blob/master/dist/ubuntu18.04/10.0/devel/Dockerfile\n\nRUN apt-get update && apt-get install -y --no-install-recommends \\\n        cuda-nvml-dev-$CUDA_PKG_VERSION \\\n        cuda-command-line-tools-$CUDA_PKG_VERSION \\\ncuda-libraries-dev-$CUDA_PKG_VERSION \\\n        cuda-minimal-build-$CUDA_PKG_VERSION \\\n        libnccl-dev=$NCCL_VERSION-1+cuda10.0 \\\n&& \\\n    rm -rf /var/lib/apt/lists/*\n\nENV LIBRARY_PATH /usr/local/cuda/lib64/stubs\n\n####################### End of CUDA Installation ###############################\n\nARG ZILLIQA_VERSION=v8.2.0-alpha.0\nARG REPO=https://github.com/Zilliqa/Zilliqa.git\nARG SOURCE_DIR=/zilliqa\nARG BUILD_DIR=/build\nARG INSTALL_DIR=/usr/local\nARG BUILD_TYPE=RelWithDebInfo\nARG EXTRA_CMAKE_ARGS=\"-DCUDA_MINE=1\"\n\nRUN git clone -b ${ZILLIQA_VERSION} --depth 1 ${REPO} ${SOURCE_DIR} \\\n    && cmake -H${SOURCE_DIR} -B${BUILD_DIR} -DCMAKE_BUILD_TYPE=${BUILD_TYPE} \\\n        -DCMAKE_INSTALL_PREFIX=${INSTALL_DIR} ${EXTRA_CMAKE_ARGS} \\\n    && cmake --build ${BUILD_DIR} -- -j$(nproc) \\\n    && cmake --build ${BUILD_DIR} --target install \\\n    && rm -rf ${BUILD_DIR}\n\nENV LD_LIBRARY_PATH=${INSTALL_DIR}/lib\n\nENTRYPOINT [\"/bin/bash\"]\n"
}