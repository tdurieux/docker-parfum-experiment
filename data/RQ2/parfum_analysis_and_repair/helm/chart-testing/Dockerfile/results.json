{
  "startTime": 1674217560003,
  "endTime": 1674217560967,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 27,
        "lineEnd": 27,
        "columnStart": 4,
        "columnEnd": 117
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 40,
        "lineEnd": 40,
        "columnStart": 7,
        "columnEnd": 74
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 11,
        "lineEnd": 11,
        "columnStart": 4,
        "columnEnd": 37
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 16,
        "lineEnd": 16,
        "columnStart": 4,
        "columnEnd": 45
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 21,
        "lineEnd": 21,
        "columnStart": 4,
        "columnEnd": 41
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM alpine:3.15\n\nRUN apk --no-cache add \\\n    bash \\\n    curl>7.77.0-r0 \\\n    git \\\n    libc6-compat \\\n    openssh-client \\\n    py3-pip \\\n    py3-wheel \\\n    python3 && \\\n    pip install --no-cache-dir --upgrade pip==21.0.1\n\n# Install a YAML Linter\nARG yamllint_version=1.26.3\nLABEL yamllint_version=$yamllint_version\nRUN pip install --no-cache-dir \"yamllint==$yamllint_version\"\n\n# Install Yamale YAML schema validator\nARG yamale_version=4.0.0\nLABEL yamale_version=$yamale_version\nRUN pip install --no-cache-dir \"yamale==$yamale_version\"\n\nARG TARGETPLATFORM\n# Install kubectl\nARG kubectl_version=v1.23.6\nLABEL kubectl_version=$kubectl_version\nRUN curl -f -LO \"https://storage.googleapis.com/kubernetes-release/release/$kubectl_version/bin/$TARGETPLATFORM/kubectl\" && \\\n    chmod +x kubectl && \\\n    mv kubectl /usr/local/bin/\n\n# Install Helm\nARG helm_version=v3.9.0\nLABEL helm_version=$helm_version\nRUN targetArch=$(echo $TARGETPLATFORM | cut -f2 -d '/') \\\n    && if [ ${targetArch} = \"amd64\" ]; then \\\n    HELM_ARCH=\"linux-amd64\"; \\\nelif [ ${targetArch} = \"arm64\" ]; then \\\n    HELM_ARCH=\"linux-arm64\"; \\\nfi \\\n    && curl -f -LO \"https://get.helm.sh/helm-$helm_version-$HELM_ARCH.tar.gz\" \\\n    && mkdir -p \"/usr/local/helm-$helm_version\" \\\n    && tar -xzf \"helm-$helm_version-$HELM_ARCH.tar.gz\" -C \"/usr/local/helm-$helm_version\" \\\n    && ln -s \"/usr/local/helm-$helm_version/$HELM_ARCH/helm\" /usr/local/bin/helm \\\n    && rm -f \"helm-$helm_version-$HELM_ARCH.tar.gz\"\n\nCOPY ./etc/chart_schema.yaml /etc/ct/chart_schema.yaml\nCOPY ./etc/lintconf.yaml /etc/ct/lintconf.yaml\nCOPY ct /usr/local/bin/ct\n# Ensure that the binary is available on path and is executable\nRUN ct --help\n"
}