{
  "startTime": 1674249463148,
  "endTime": 1674249463843,
  "originalSmells": [
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 24,
        "lineEnd": 24,
        "columnStart": 22,
        "columnEnd": 45
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 24,
        "lineEnd": 24,
        "columnStart": 22,
        "columnEnd": 45
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# This a Dockerfile with multi-platform support, build (pull/run) it via:\n# * Setup qemu for non-native platforms (to be done once):\n#       `docker run --privileged --rm tonistiigi/binfmt --install all`\n# * Setup buildx as default docker builder (to be done once):\n#       `docker buildx install`\n# * Build with without `--platform ...` arg (TARGETPLATFORM=BUILDPLATFORM):\n#       `docker build .`\n# * Build a single platform image:\n#       `docker build --platform linux/amd64 .`\n# * Build a multi-platform image:\n#       `docker build --platform linux/amd64,linux/arm64 .`\n# See also:\n# * https://docs.docker.com/buildx/working-with-buildx/\n# * https://www.docker.com/blog/faster-multi-platform-builds-dockerfile-cross-compilation-guide/\n\n# built-in arg set via `docker build --platform $TARGETPLATFORM ...` or TARGETPLATFORM=BUILDPLATFORM\nFROM --platform=$TARGETPLATFORM debian:buster-slim AS buildbase\n\n# built-in arg set by `docker build --platform linux/$TARGETARCH ...`\nARG TARGETARCH\nARG CONDA_VERSION=latest\n\nWORKDIR /tmp\n\nRUN apt-get update && apt-get install --no-install-recommends -y wget && rm -rf /var/lib/apt/lists/*;\n\nRUN if [ \"${TARGETARCH}\" = \"amd64\" ]; then \\\n        MINICONDA_URL=\"https://repo.anaconda.com/miniconda/Miniconda3-${CONDA_VERSION}-Linux-x86_64.sh\"; \\\n    elif [ \"${TARGETARCH}\" = \"s390x\" ]; then \\\n        MINICONDA_URL=\"https://repo.anaconda.com/miniconda/Miniconda3-${CONDA_VERSION}-Linux-s390x.sh\"; \\\n    elif [ \"${TARGETARCH}\" = \"arm64\" ]; then \\\n        MINICONDA_URL=\"https://repo.anaconda.com/miniconda/Miniconda3-${CONDA_VERSION}-Linux-aarch64.sh\"; \\\n    elif [ \"${TARGETARCH}\" = \"ppc64le\" ]; then \\\n        MINICONDA_URL=\"https://repo.anaconda.com/miniconda/Miniconda3-${CONDA_VERSION}-Linux-ppc64le.sh\"; \\\n    else \\\n        echo \"Not supported target architecture: ${TARGETARCH}\"; \\\n        exit 1; \\\n    fi && \\\n    wget --quiet $MINICONDA_URL -O ~/miniconda.sh && \\\n    /bin/bash ~/miniconda.sh -b -p /opt/conda && \\\n    rm ~/miniconda.sh && \\\n    /opt/conda/bin/conda clean --all --yes\n\nFROM --platform=$TARGETPLATFORM debian:buster-slim\n\nENV LANG=C.UTF-8 LC_ALL=C.UTF-8\nENV PATH /opt/conda/bin:$PATH\n\nCOPY dev/linux/setup.sh /tmp\nRUN bash /tmp/setup.sh\n\nCOPY --from=buildbase /opt/conda /opt/conda\n\nARG python_version=3.9\n\nCOPY ./tests/requirements.txt /tmp\n\n# conda and test dependencies\nRUN /opt/conda/bin/conda install --update-all -y -c defaults \\\n    python=$python_version \\\n    --file /tmp/requirements.txt && \\\n    /opt/conda/bin/conda clean --all --yes\n\n# Make /opt/conda world-writable to allow hardlinks during tests\nRUN chmod -R o+w /opt/conda/pkgs/*-*-*\n\nUSER test_user\n\nWORKDIR /opt/conda-src\n\nENTRYPOINT [\"/usr/bin/tini\", \"--\"]\nCMD [\"/bin/bash\"]\n"
}