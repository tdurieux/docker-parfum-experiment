{
  "startTime": 1674219520948,
  "endTime": 1674219521895,
  "originalSmells": [
    {
      "rule": "apkAddUseNoCache",
      "position": {
        "lineStart": 18,
        "lineEnd": 18,
        "columnStart": 4,
        "columnEnd": 29
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "ARG ELIXIR_IMAGE_VERSION=<%= elixir_version %>\nARG ERLANG_IMAGE_VERSION=<%= erlang_version %>\nARG RELEASE_IMAGE_VERSION=<%= alpine_version %>\n\nFROM hexpm/elixir:${ELIXIR_IMAGE_VERSION}-erlang-${ERLANG_IMAGE_VERSION}-alpine-${RELEASE_IMAGE_VERSION} AS build\n\nRUN apk update && \\\n    apk upgrade --no-cache && \\\n    apk add --no-cache \\\n      nodejs \\\n      npm \\\n      git \\\n      build-base && \\\n    mix local.rebar --force && \\\n    mix local.hex --force\n<%= if web_project? do %>\nRUN wget -q -O /etc/apk/keys/sgerrand.rsa.pub https://alpine-pkgs.sgerrand.com/sgerrand.rsa.pub\nRUN wget https://github.com/sgerrand/alpine-pkg-glibc/releases/download/2.34-r0/glibc-2.34-r0.apk\nRUN apk add --no-cache glibc-2.34-r0.apk\n<% end %>\nWORKDIR /app\n\nCOPY . .\n\nENV MIX_ENV=prod\n\nRUN mix do deps.get, deps.compile, compile\n<%= if web_project? do %>\nRUN cd assets && \\\n\t\tnpm ci --progress=false --no-audit --loglevel=error\n\nENV NODE_ENV=production\n\nRUN mix assets.deploy\n<% end %>\nRUN mix release\n\n#\n# Release\n#\nFROM alpine:${RELEASE_IMAGE_VERSION} AS app\n\nRUN apk update && \\\n    apk add --no-cache \\\n    libstdc++ \\\n    libgcc \\\n    bash \\\n    openssl-dev\n\nWORKDIR /opt/app\nEXPOSE 4000\n\nRUN addgroup -g 1000 appuser && \\\n\t\tadduser -u 1000 -G appuser -g appuser -s /bin/sh -D appuser && \\\n\t\tchown 1000:1000 /opt/app\n\nCOPY --from=build --chown=1000:1000 /app/_build/prod/rel/<%= otp_app %> ./\nCOPY bin/start.sh ./bin/start.sh\n\nUSER appuser\n\nCMD bin/start.sh\n"
}