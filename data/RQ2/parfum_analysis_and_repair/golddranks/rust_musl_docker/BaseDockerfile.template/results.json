{
  "startTime": 1674214908933,
  "endTime": 1674214909754,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 131,
        "lineEnd": 131,
        "columnStart": 4,
        "columnEnd": 69
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 132,
        "lineEnd": 132,
        "columnStart": 4,
        "columnEnd": 95
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 133,
        "lineEnd": 133,
        "columnStart": 4,
        "columnEnd": 48
      }
    },
    {
      "rule": "curlUseHttpsUrl",
      "position": {
        "lineStart": 131,
        "lineEnd": 131,
        "columnStart": 4,
        "columnEnd": 69
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 146,
        "lineEnd": 146,
        "columnStart": 4,
        "columnEnd": 110
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 167,
        "lineEnd": 167,
        "columnStart": 4,
        "columnEnd": 162
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM debian:stretch\nMAINTAINER Pyry Kontio <pyry.kontio@drasa.eu>\nUSER root\n\n# NOTES TO MYSELF AND OTHERS TOO. THEY MIGHT BE HELPFUL,\n# since this took me too long to figure out.\n\n# This image is for building apps in Rust nightly for musl target.\n# It contains the needed libraries to be able to build Diesel and Rocket.\n# Setting up the build environment isn't actually easy at all â€“ because\n# Diesel and Rocket use code-generating compiler plugins, they plugins\n# must be able to run in the host environment, whereas we want the final build\n# to be a statically linked musl build. So we need to set up the environment\n# doubly and ensure that the libraries are compatible and the correct libraries\n# are selected.\n\n# This dockerfile is easy to build with associated build.sh script.\n# While building, it assembles the build environment for compiling static musl binaries.\n# The pain of static compiling is the native dependencies,\n# but with correct configuration, it should be all right.\n# You need to download the C libraries, build the sources with appropriate\n# settings and check from the appropriate Rust crates (usually named something-sys)\n# how they are going to present the linking flags to Cargo.\n# Read the build.rs files of those crates. Usually you need to set some\n# environment variables that affect how the build.rs build scripts work.\n\n# Note: if build.rs doesn't provide options for static linking\n# and/or cross-compiling, forking the crate, cargo-patching it\n# and adding that functionality is a thing! It helps everyone.\n# The build.rs scripts provide the linking flags to cargo by printing some\n# instructions like `println!(\"cargo:rustc-link-lib=static={}\", lib);`,\n# where lib is the libname as passed to linker [pq, ssl, crypto etc.].)\n# Remember to contribute to upstream too!\n\n# Note about compiler plugins.\n# The compiler plugins run in the HOST environment alongside the compiler,\n# whereas the compiled binary is of the TARGET environment.\n# In this image, HOST is x86_64-unknown-linux-musl\n# and TARGET is x86_64-unknown-linux-gnu.\n# Additionally compiler plugins are dynamically linked.\n# This all means that you need to have installed both\n# dynamically linked HOST libraries for compiler plugins\n# and statically linked TARGET libraries for linking.\n\n# Note about the OpenSSL version:\n# The version is configurable. I tried using 1.1.0 briefly,\n# but it introduced some problems with its stricter cert checking,\n# so now the build.sh defaults to 1.0.2. This can be easily changed, however,\n# and the build environment fully supports building 1.1.0.\n\n# Note about the distro version:\n# Debian Stretch (9) introduced GCC that defaults to position-independent code.\n# The support for linking PIE code statically was added to Rust recently (2017-08-25).\n# Before that it used to link the libraries statically, but still produce\n# a dynamic looking executable (a binary with a reference to the dynamic loader),\n# which partially defeats the purpose.\n# No support is guaranteed for older Rust nightlies than that.\n\n# USAGE:\n# When run, this image compiles can be used to compile static musl builds,\n# presenting the --target=x86_64-unknown-linux-musl flag to cargo. (-vv) is\n# also recommended for debugging purposes, as static linking and\n# cross-compiling builds break easily in my experience.\n# It is recommended to mount not only the work directory, but also the\n# `~/.cargo/git` and `~/.cargo/registry` directories as it enables better caching.\n\n# Example of using the built container to build Rust executables:\n# (from command line in the project directory)\n#\n# docker run -it --rm \\\n#    -v $PWD:/workdir \\\n#    -v ~/.cargo/git:/root/.cargo/git \\\n#    -v ~/.cargo/registry:/root/.cargo/registry \\\n#    golddranks/rust_musl_docker:nightly-2017-08-21 \\\n#    cargo build --release -vv --target=x86_64-unknown-linux-musl\n\n\n\n# Installing packages - WHY THESE PACKAGES?\n# musl itself:\n#   musl-dev, musl-tools\n# optional utilities for debugging inside the container:\n#   file - for inspecting built files (whether they are actually static)\n#   nano - a text editor\n#   git - because basically every Rust project uses it\n#   zlib1g-dev, cmake, libssl-dev - needed for building cargo-tree which helps visualizing the build deps\n#   libssl-dev - needed for dynamically linking (for diesel code generation) the libpq crate\n# needed utilities for downloading, installing and building everything\n# (diesel, rocket and their dependencies, mainly libpq and openssl):\n#   curl, g++, make, pkgconf - these are needed by many libraries\n#   linux-headers-amd64 - needed for building openssl 1.1\n#   ca-certificates - for openssl & curl.\n#   xutils-dev because it contains makedepend with is used by openssl build system\n#   libpq-dev - needed for dynamically linking (for diesel code generation) the libpq crate\n\nRUN apt-get update && \\\n  apt-get install -y \\\n  musl-dev \\\n  musl-tools \\\n  file \\\n  nano \\\n  git \\\n  zlib1g-dev \\\n  cmake \\\n  make \\\n  g++ \\\n  curl \\\n  pkgconf \\\n  linux-headers-amd64 \\\n  ca-certificates \\\n  xutils-dev \\\n  libpq-dev \\\n  libssl-dev \\ \n  --no-install-recommends && \\\n  rm -rf /var/lib/apt/lists/*\n\n# Setting the musl prefix where the statically linked C libs are installed\n# Setting the workdir for building the C libs (we will later set another one for the Rust project)\nENV MUSL_PREFIX=/musl\nRUN mkdir /workdir && mkdir $MUSL_PREFIX\nWORKDIR /libworkdir\n\n# OpenSSL 1.1 needs some linux headers to exists. They aren't installed by\n# default to the directory of musl includes, so we must link them.\n# OpenSSL 1.0 doesn't need these, but they won't do any harm.\nRUN ln -s /usr/include/x86_64-linux-gnu/asm /usr/include/x86_64-linux-musl/asm && \\\n    ln -s /usr/include/asm-generic /usr/include/x86_64-linux-musl/asm-generic && \\\n    ln -s /usr/include/linux /usr/include/x86_64-linux-musl/linux\n\n# Let's download the libraries so we don't have to do this everytime when\n# debugging failing builds.\nRUN curl -f -sL https://www.openssl.org/source/openssl-OPENSSL_VER.tar.gz | tar xz\nRUN curl -f -sL https://ftp.postgresql.org/pub/source/vPOSTGRES_VER/postgresql-POSTGRES_VER.tar.gz | tar xz\nRUN curl -f -sL https://zlib.net/zlib-1.2.11.tar.gz | tar xz\n\n# Note that since Debian Stretch, gcc builds position-independent executables.\n# The compilation will fail without flags \"-fPIE\" (which is for the compiler)\n# and \"-pie\" (which is for the linker).\n\n# The LDFLAGS and CFLAGS are set so that it finds the libraries we built earlier\n# with the prefix /musl. (System musl libraries don't a have common prefix,\n# they are found, for example in /usr/lib/x86_64-linux-musl, and includes in\n# /usr/include/x86_64-linux-musl) This allows the libraries we build later\n# to find the libraries we've built earlier. zlib doesn't depend on anything,\n# but we'll set the flags for every one for consistency.\nRUN cd zlib-1.2.11 && \\\n    CC=\"musl-gcc -fPIE -pie\" LDFLAGS=\"-L/musl/lib/\" CFLAGS=\"-I/musl/include\" ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --prefix=$MUSL_PREFIX && \\\n    make -j$(nproc) && make install\n\n# OpenSSL needs to be built with no-async because otherwise the build is going\n# to crash with missing symbols. (Apparently it uses some stuff that musl doesn't have by default.)\n# Note that OpenSSL has their own build system, they don't use autotools.\n# This makes the settings a bit non-standard.\n# Again, we use \"-fPIE -pie\" and set the flags.\nRUN cd openssl-OPENSSL_VER && \\\n    CC=\"musl-gcc -fPIE -pie\" LDFLAGS=\"-L/musl/lib/\" CFLAGS=\"-I/musl/include\" ./Configure no-shared no-async --prefix=$MUSL_PREFIX --openssldir=$MUSL_PREFIX/ssl linux-x86_64 && \\\n    make depend && make -j$(nproc) && make install\n\n# Adding out library path to /etc/ld-musl-x86_64.path allows the dynamic linker\n# to find musl libraries built by us. The configure script of postgres will\n# fail without this, since it tests dynamic linking even if ne don't need it.\nRUN echo \"/musl/lib\" >> /etc/ld-musl-x86_64.path\n\n# Again, we use \"-fPIE -pie\" and set the flags.\n# Readline is disabled, because we are too lazy to build musl-compatible one by ourselves.\n\nRUN cd postgresql-POSTGRES_VER && \\\n    CC=\"musl-gcc -fPIE -pie\" LDFLAGS=\"-L/musl/lib/\" CFLAGS=\"-I/musl/include\" ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --prefix=$MUSL_PREFIX --host=x86_64-unknown-linux-musl --without-readline && \\\n    make -j$(nproc) && make install"
}