{
  "startTime": 1674249096848,
  "endTime": 1674249097818,
  "originalSmells": [
    {
      "rule": "wgetUseHttpsUrl",
      "position": {
        "lineStart": 43,
        "lineEnd": 43,
        "columnStart": 4,
        "columnEnd": 105
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 44,
        "lineEnd": 44,
        "columnStart": 4,
        "columnEnd": 28
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM ubuntu:20.04\n\n# Defining the timezone to Europe/Paris, which is required by apt\n# Updating packages' repo & installing only the needed packages:\n#   - GL & X11 as needed graphical dependencies\n#   - CMake, Make, GCC & Clang to build RaZ, and lcov to output code coverage\n#   - xz-utils to uncompress Emscripten\n#   - Python 3.X to use Emscripten\n#   - Doxygen & Dot to generate the documentation\n#   - OpenAL to handle the audio part\n#   - Wget to download the FBX SDK\n#   - Xvfb to launch a headless server (allows GL context initialisation without a screen)\n#   - Rubygems to get the 'gem' command, used to download coveralls-lcov, and git to fetch info needed by coveralls-lcov\n# Cleaning the apt lists & removing lists' cache entries to save image space\n#   - See: https://docs.docker.com/develop/develop-images/dockerfile_best-practices/#run\n# Downloading coveralls-lcov to upload coverage to Coveralls\nRUN ln -snf /usr/share/zoneinfo/Europe/Paris /etc/localtime && echo Europe/Paris > /etc/timezone && \\\n    apt-get update && \\\n    apt-get install -y --no-install-recommends \\\n        libglew-dev libxi-dev libxcursor-dev libxrandr-dev libxinerama-dev libxxf86vm-dev \\\n        cmake make gcc-8 g++-8 clang-7 lcov \\\n        xz-utils \\\n        python3 \\\n        doxygen python3-pydot python3-pydot-ng \\\n        libopenal-dev \\\n        wget \\\n        xvfb \\\n        rubygems git && \\\n    apt-get clean && \\\n    rm -rf /var/lib/apt/lists/* && \\\n    gem install coveralls-lcov\n\n# Setting alternatives to map gcc, g++ & gcov to gcc-8, g++-8 & gcov-8, and clang & clang++ to clang-7 & clang++-7\nRUN update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-8 60 --slave /usr/bin/g++ g++ /usr/bin/g++-8 && \\\n    update-alternatives --install /usr/bin/gcov gcov /usr/bin/gcov-8 60 && \\\n    update-alternatives --install /usr/bin/clang clang /usr/bin/clang-7 60 --slave /usr/bin/clang++ clang++ /usr/bin/clang++-7\n\n# Downloading & installing Emscripten, to build RaZ in WebAssembly\nRUN git clone https://github.com/emscripten-core/emsdk.git && \\\n    ./emsdk/emsdk install latest && ./emsdk/emsdk activate latest\n\n# Installing the FBX SDK\n# The installation asks for software user agreement (send 'yes'), then afterwards if the README file should be opened (send 'n')\nRUN wget https://download.autodesk.com/us/fbx/2019/2019.0/fbx20190_fbxsdk_linux.tar.gz -O ./fbx_sdk.tar.gz && \\\n    tar xvf ./fbx_sdk.tar.gz && \\\n    chmod +x ./fbx20190_fbxsdk_linux && \\\n    printf 'yes\\nn' | ./fbx20190_fbxsdk_linux /usr && rm ./fbx_sdk.tar.gz\n\nWORKDIR /RaZ\n"
}