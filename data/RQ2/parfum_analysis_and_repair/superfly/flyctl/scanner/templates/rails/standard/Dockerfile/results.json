{
  "startTime": 1674252552115,
  "endTime": 1674252552881,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 25,
        "lineEnd": 25,
        "columnStart": 4,
        "columnEnd": 29
      }
    },
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 59,
        "lineEnd": 59,
        "columnStart": 4,
        "columnEnd": 16
      }
    },
    {
      "rule": "yarnCacheCleanAfterInstall",
      "position": {
        "lineStart": 57,
        "lineEnd": 57,
        "columnStart": 4,
        "columnEnd": 17
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 41,
        "lineEnd": 41,
        "columnStart": 4,
        "columnEnd": 62
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 72,
        "lineEnd": 73,
        "columnStart": 4,
        "columnEnd": 20
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "ARG RUBY_VERSION=2.7.3\nARG VARIANT=jemalloc-slim\nFROM quay.io/evl.ms/fullstaq-ruby:${RUBY_VERSION}-${VARIANT} as base\n\nARG NODE_VERSION=16\nARG BUNDLER_VERSION=2.3.9\n\nARG RAILS_ENV=production\nENV RAILS_ENV=${RAILS_ENV}\n\nENV RAILS_SERVE_STATIC_FILES true\nENV RAILS_LOG_TO_STDOUT true\n\nARG BUNDLE_WITHOUT=development:test\nARG BUNDLE_PATH=vendor/bundle\nENV BUNDLE_PATH ${BUNDLE_PATH}\nENV BUNDLE_WITHOUT ${BUNDLE_WITHOUT}\n\nRUN mkdir /app\nWORKDIR /app\nRUN mkdir -p tmp/pids\n\nSHELL [\"/bin/bash\", \"-c\"]\n\nRUN curl -f https://get.volta.sh | bash\n\nENV BASH_ENV ~/.bashrc\nENV VOLTA_HOME /root/.volta\nENV PATH $VOLTA_HOME/bin:/usr/local/bin:$PATH\n\nRUN volta install node@${NODE_VERSION} && volta install yarn\n\nFROM base as build_deps\n\nARG DEV_PACKAGES=\"git build-essential libpq-dev wget vim curl gzip xz-utils libsqlite3-dev\"\nENV DEV_PACKAGES ${DEV_PACKAGES}\n\nRUN --mount=type=cache,id=dev-apt-cache,sharing=locked,target=/var/cache/apt \\\n    --mount=type=cache,id=dev-apt-lib,sharing=locked,target=/var/lib/apt \\\n    apt-get update -qq && \\\n    apt-get install --no-install-recommends -y ${DEV_PACKAGES} \\\n    && rm -rf /var/lib/apt/lists /var/cache/apt/archives && rm -rf /var/lib/apt/lists/*;\n\nFROM build_deps as gems\n\nRUN gem install -N bundler -v ${BUNDLER_VERSION}\n\nCOPY Gemfile* ./\nRUN bundle install &&  rm -rf vendor/bundle/ruby/*/cache\n\nFROM build_deps as node_modules\n\nCOPY package*json ./\nCOPY yarn.* ./\n\nRUN if [ -f \"yarn.lock\" ]; then \\\n    yarn install; yarn cache clean; \\\n    elif [ -f \"package-lock.json\" ]; then \\\n    npm install; npm cache clean --force; \\\n    else \\\n    mkdir node_modules; \\\n    fi\n\nFROM base\n\nARG PROD_PACKAGES=\"postgresql-client file vim curl gzip libsqlite3-0\"\nENV PROD_PACKAGES=${PROD_PACKAGES}\n\nRUN --mount=type=cache,id=prod-apt-cache,sharing=locked,target=/var/cache/apt \\\n    --mount=type=cache,id=prod-apt-lib,sharing=locked,target=/var/lib/apt \\\n    apt-get update -qq && \\\n    apt-get install --no-install-recommends -y \\\n    ${PROD_PACKAGES} \\\n    && rm -rf /var/lib/apt/lists /var/cache/apt/archives && rm -rf /var/lib/apt/lists/*;\n\nCOPY --from=gems /app /app\nCOPY --from=node_modules /app/node_modules /app/node_modules\n\nENV SECRET_KEY_BASE 1\n\nCOPY . .\n\nRUN bundle exec rails assets:precompile\n\nENV PORT 8080\n\nARG SERVER_COMMAND=\"bundle exec puma -C config/puma.rb\"\nENV SERVER_COMMAND ${SERVER_COMMAND}\nCMD ${SERVER_COMMAND}\n"
}