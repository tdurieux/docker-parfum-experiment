{
  "startTime": 1674249904530,
  "endTime": 1674249905199,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 81,
        "lineEnd": 81,
        "columnStart": 4,
        "columnEnd": 128
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 13,
        "lineEnd": 30,
        "columnStart": 7,
        "columnEnd": 14
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# We need the CUDA base dockerfile to enable GPU rendering\n# on hosts with GPUs.\n# The image below is a pinned version of nvidia/cuda:9.1-cudnn7-devel-ubuntu16.04 (from Jan 2018)\n# If updating the base image, be sure to test on GPU since it has broken in the past.\nFROM nvidia/cuda:10.1-cudnn7-devel-ubuntu16.04\n\nSHELL [\"/bin/bash\", \"-c\"]\n\n##########################################################\n### System dependencies\n##########################################################\n\nRUN apt-get update -q \\\n    && DEBIAN_FRONTEND=noninteractive apt-get --no-install-recommends install -y \\\n    cmake \\\n    curl \\\n    git \\\n    libav-tools \\\n    libgl1-mesa-dev \\\n    libgl1-mesa-glx \\\n    libglew-dev \\\n    libosmesa6-dev \\\n    net-tools \\\n    software-properties-common \\\n    swig \\\n    unzip \\\n    vim \\\n    wget \\\n    xpra \\\n    xserver-xorg-dev \\\n    zlib1g-dev \\\n    && apt-get clean \\\n    && rm -rf /var/lib/apt/lists/*\n\nENV LANG C.UTF-8\n\nCOPY ./azure/files/Xdummy /usr/local/bin/Xdummy\nRUN chmod +x /usr/local/bin/Xdummy\n\n# Workaround for https://bugs.launchpad.net/ubuntu/+source/nvidia-graphics-drivers-375/+bug/1674677\nCOPY ./azure/files/10_nvidia.json /usr/share/glvnd/egl_vendor.d/10_nvidia.json\nCOPY ./environment.yml /opt/environment.yml\n\nENV LD_LIBRARY_PATH /usr/local/nvidia/lib64:${LD_LIBRARY_PATH}\n\n##########################################################\n### MuJoCo\n##########################################################\n# Note: ~ is an alias for /root\nRUN mkdir -p /root/.mujoco \\\n    && wget https://www.roboti.us/download/mujoco200_linux.zip -O mujoco.zip \\\n    && unzip mujoco.zip -d /root/.mujoco \\\n    && rm mujoco.zip\nRUN mkdir -p /root/.mujoco \\\n    && wget https://www.roboti.us/download/mjpro150_linux.zip -O mujoco.zip \\\n    && unzip mujoco.zip -d /root/.mujoco \\\n    && rm mujoco.zip\nRUN ln -s /root/.mujoco/mujoco200_linux /root/.mujoco/mujoco200\nENV LD_LIBRARY_PATH /root/.mujoco/mjpro150/bin:${LD_LIBRARY_PATH}\nENV LD_LIBRARY_PATH /root/.mujoco/mujoco200/bin:${LD_LIBRARY_PATH}\nENV LD_LIBRARY_PATH /root/.mujoco/mujoco200_linux/bin:${LD_LIBRARY_PATH}\nCOPY ./azure/files/mjkey.txt /root/.mujoco\n\n##########################################################\n### Example Python Installation\n##########################################################\nENV PATH /opt/conda/bin:$PATH\nRUN wget --quiet https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh -O /tmp/miniconda.sh && \\\n    /bin/bash /tmp/miniconda.sh -b -p /opt/conda && \\\n    rm /tmp/miniconda.sh && \\\n    ln -s /opt/conda/etc/profile.d/conda.sh /etc/profile.d/conda.sh && \\\n    echo \". /opt/conda/etc/profile.d/conda.sh\" >> /etc/bash.bashrc\n\nRUN conda update -y --name base conda && conda clean --all -y\n\nRUN conda env create -f /opt/environment.yml\nENV PATH /opt/conda/envs/trajectory/bin:$PATH\n\n##########################################################\n### gym sometimes has this patchelf issue\n##########################################################\nRUN curl -f -o /usr/local/bin/patchelf https://s3-us-west-2.amazonaws.com/openai-sci-artifacts/manual-builds/patchelf_0.9_amd64.elf \\\n    && chmod +x /usr/local/bin/patchelf\n# RUN pip install gym[all]==0.12.5\n\nRUN echo \"source activate /opt/conda/envs/trajectory && export PYTHONPATH=$PYTHONPATH:/home/code && export CUDA_VISIBLE_DEVICES=0\" >> ~/.bashrc\nRUN source ~/.bashrc\n"
}