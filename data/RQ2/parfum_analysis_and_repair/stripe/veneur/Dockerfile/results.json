{
  "startTime": 1674249072146,
  "endTime": 1674249073835,
  "originalSmells": [
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 9,
        "lineEnd": 9,
        "columnStart": 4,
        "columnEnd": 26
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 9,
        "lineEnd": 9,
        "columnStart": 4,
        "columnEnd": 26
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 9,
        "lineEnd": 9,
        "columnStart": 4,
        "columnEnd": 26
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# For running Veneur under Docker, you probably want either the pre-built images\n# published at https://hub.docker.com/r/stripe/veneur/\n# or the Dockerfiles in https://github.com/stripe/veneur/tree/master/public-docker-images\nFROM golang:1.18\nLABEL maintainer=\"The Stripe Observability Team <support@stripe.com>\"\n\nENV GOPATH=/go\nENV GO111MODULE=on\nRUN apt-get update && apt-get install --no-install-recommends -y zip && rm -rf /var/lib/apt/lists/*;\nRUN go install github.com/gogo/protobuf/protoc-gen-gogofaster@v1.2.1 && \\\n    go install golang.org/x/tools/cmd/stringer@v0.1.7 && \\\n    go install github.com/golang/mock/mockgen@v1.6.0\nWORKDIR /protoc\nRUN wget https://github.com/google/protobuf/releases/download/v3.1.0/protoc-3.1.0-linux-x86_64.zip\nRUN unzip protoc-3.1.0-linux-x86_64.zip\nRUN cp bin/protoc /usr/bin/protoc\nRUN chmod 777 /usr/bin/protoc\n\nWORKDIR /veneur\nADD . /veneur\n\n# If running locally, ignore any changes since\n# the last commit\nRUN git reset --hard HEAD && git status\n\n# Unlike the travis build file, we do NOT need to\n# ignore changes to protobuf-generated output\n# because we are guaranteed only one version of Go\n# used to build protoc-gen-go\nRUN go generate\n# Exclude vendor from gofmt checks.\nRUN mv vendor ../ && gofmt -w . && mv ../vendor .\n\n# Stage any changes caused by go generate and gofmt,\n# then confirm that there are no staged changes.\n#\n# If `go generate` or `gofmt` yielded any changes,\n# this will fail with an error message like \"too many arguments\"\n# or \"M: binary operator expected\"\n# Due to overlayfs peculiarities, running git diff-index without --cached\n# won't work, because it'll compare the mtimes (which have changed), and\n# therefore reports that the file may have changed (ie, a series of 0s)\n# See https://github.com/stripe/veneur/pull/110#discussion_r92843581\nRUN git add .\n# The output will be empty unless the build fails, in which case this\n# information is helpful in debugging\nRUN git diff --cached\nRUN git diff-index --cached --exit-code HEAD\n\nRUN mkdir -p /build\nRUN go test -race -v -timeout 60s -ldflags \"-X github.com/stripe/veneur/v14/util/build.VERSION=$(git rev-parse HEAD) -X github.com/stripe/veneur/v14/util/build.BUILD_DATE=$(date +%s)\" ./...\nCMD cp -r henson /build/ && env GOBIN=/build go install -a -v -ldflags \"-X github.com/stripe/veneur/v14/util/build.VERSION=$(git rev-parse HEAD) -X github.com/stripe/veneur/v14/util/build.BUILD_DATE=$(date +%s)\" ./cmd/...\n"
}