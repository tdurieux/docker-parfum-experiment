{
  "startTime": 1674255167576,
  "endTime": 1674255168592,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 52,
        "lineEnd": 52,
        "columnStart": 9,
        "columnEnd": 95
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 63,
        "lineEnd": 63,
        "columnStart": 190,
        "columnEnd": 350
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 64,
        "lineEnd": 64,
        "columnStart": 243,
        "columnEnd": 357
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 52,
        "lineEnd": 52,
        "columnStart": 152,
        "columnEnd": 171
      }
    },
    {
      "rule": "gpgUseBatchFlag",
      "position": {
        "lineStart": 58,
        "lineEnd": 58,
        "columnStart": 68,
        "columnEnd": 113
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM ubuntu:focal\nLABEL maintainer=\"myoung34@my.apsu.edu\"\n\nARG DUMB_INIT_VERSION=\"1.2.2\"\nARG GIT_CORE_PPA_KEY=\"A1715D88E1DF1F24\"\n\nENV DOCKER_COMPOSE_VERSION=\"1.27.4\"\nENV LANG=en_US.UTF-8\nENV LANGUAGE=en_US.UTF-8\nENV LC_ALL=en_US.UTF-8\nSHELL [\"/bin/bash\", \"-o\", \"pipefail\", \"-c\"]\nENV DEBIAN_FRONTEND=noninteractive\n# hadolint ignore=DL3003,DL4001,SC2086\nRUN echo en_US.UTF-8 UTF-8 >> /etc/locale.gen \\\n  && apt-get update \\\n  && apt-get install -y --no-install-recommends gnupg \\\n  && apt-key adv --keyserver keyserver.ubuntu.com --recv-keys ${GIT_CORE_PPA_KEY} \\\n  && apt-get update \\\n  && apt-get install -y --no-install-recommends \\\n    gnupg \\\n    lsb-release \\\n    curl \\\n    tar \\\n    unzip \\\n    apt-transport-https \\\n    ca-certificates \\\n    sudo \\\n    gpg-agent \\\n    software-properties-common \\\n    build-essential \\\n    zlib1g-dev \\\n    zstd \\\n    gettext \\\n    libcurl4-openssl-dev \\\n    inetutils-ping \\\n    jq \\\n    wget \\\n    dirmngr \\\n    openssh-client \\\n    locales \\\n    python3-pip \\\n    python3-setuptools \\\n    python3 \\\n    dumb-init \\\n    nodejs \\\n    rsync \\\n  && sed -e 's/Defaults.*env_reset/Defaults env_keep = \"HTTP_PROXY HTTPS_PROXY NO_PROXY FTP_PROXY http_proxy https_proxy no_proxy ftp_proxy\"/' -i /etc/sudoers \\\n  && echo deb http://ppa.launchpad.net/git-core/ppa/ubuntu $([[ $(grep -E '^ID=' /etc/os-release | sed 's/.*=//g') == \"ubuntu\" ]] && (grep VERSION_CODENAME /etc/os-release | sed 's/.*=//g') || echo bionic) main>/etc/apt/sources.list.d/git-core.list \\\n  && apt-get update \\\n  && ( apt-get install -y --no-install-recommends git || apt-get install -t stable -y --no-install-recommends git || apt-get install -y --no-install-recommends git=1:2.33.1-0ppa1~ubuntu18.04.1 git-man=1:2.33.1-0ppa1~ubuntu18.04.1 ) \\\n  && ( [[ $(apt-cache search -n liblttng-ust0 | awk '{print $1}') == \"liblttng-ust0\" ]] && apt-get install -y --no-install-recommends liblttng-ust0 || : ) \\\n  && ( [[ $(apt-cache search -n liblttng-ust1 | awk '{print $1}') == \"liblttng-ust1\" ]] && apt-get install -y --no-install-recommends liblttng-ust1 || : ) \\\n  && ( ( curl -f \"https://awscli.amazonaws.com/awscli-exe-linux-$(uname -m).zip\" -o \"awscliv2.zip\" && unzip awscliv2.zip -d /tmp/ && /tmp/aws/install) || pip3 install --no-cache-dir awscli) \\\n  # Determine the Distro name (Debian, Ubuntu, etc)\n  && distro=$(lsb_release -is | awk '{print tolower($0)}') \\\n  # Determine the Distro version (bullseye, xenial, etc)\n  # Note: sid is aliased to bullseye, because Docker doesn't have a matching apt repo\n  && mkdir -p /etc/apt/keyrings \\\n  && ( curl -fsSL https://download.docker.com/linux/${distro}/gpg | gpg --batch --dearmor -o /etc/apt/keyrings/docker.gpg) \\\n  && version=$(lsb_release -cs | awk '{gsub(\"sid\", \"bullseye\"); print $0}') \\\n  && ( echo \"deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/${distro} ${version} stable\" | tee /etc/apt/sources.list.d/docker.list > /dev/null ) \\\n  && apt-get update \\\n  && apt-get install -y docker-ce docker-ce-cli containerd.io --no-install-recommends --allow-unauthenticated \\\n  && ( [[ $(lscpu -J | jq -r '.lscpu[] | select(.field == \"Vendor ID:\") | .data') == \"ARM\" ]] && echo \"Not installing docker-compose. See https://github.com/docker/compose/issues/6831\" || ( curl -f -sL \"https://github.com/docker/compose/releases/download/${DOCKER_COMPOSE_VERSION}/docker-compose-$(uname -s)-$(uname -m)\" -o /usr/local/bin/docker-compose && chmod +x /usr/local/bin/docker-compose)) \\\n  && ( [[ $(lsb_release --codename | cut -f2) == \"focal\" ]] && ( echo \"deb https://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/stable/xUbuntu_20.04/ /\" | tee /etc/apt/sources.list.d/devel:kubic:libcontainers:stable.list && curl -f -L \"https://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/stable/xUbuntu_20.04/Release.key\" | apt-key add - && apt-get update) || :) \\\n  && ( [[ $(lsb_release --codename | cut -f2) == \"focal\" || $(lsb_release --codename | cut -f2) == \"jammy\" ||  $(lsb_release --codename | cut -f2) == \"sid\" ||  $(lsb_release --codename | cut -f2) == \"bullseye\" ]] && apt-get install -y --no-install-recommends podman buildah skopeo || : ) \\\n  && ( [[ $(lsb_release --codename | cut -f2) == \"jammy\" ]] && echo \"Ubuntu Jammy is marked as beta. Please see https://github.com/actions/virtual-environments/issues/5490\" || : ) \\\n  && rm -rf /var/lib/apt/lists/* \\\n  && rm -rf /tmp/*\n"
}