{
  "startTime": 1674221185150,
  "endTime": 1674221186075,
  "originalSmells": [
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 28,
        "lineEnd": 28,
        "columnStart": 4,
        "columnEnd": 39
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 59,
        "lineEnd": 59,
        "columnStart": 4,
        "columnEnd": 56
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# SPDX-FileCopyrightText: 2019â€“2022 Pynguin Contributors\n#\n# SPDX-License-Identifier: LGPL-3.0-or-later\n\n###############################################################################\n# Dockerfile to build a Docker container image for Pynguin.                   #\n# This is a multi-stage image, i.e., it first builds the Pynguin tar-ball     #\n# from the sources and installs it in a later stage for execution.            #\n# The image is built in a way that it accepts all command-line parameters for #\n# Pynguin as parameters to Docker's `run` command.                            #\n###############################################################################\n\n# Build stage for Pynguin\nFROM python:3.10.5-slim-bullseye AS build\nMAINTAINER Stephan Lukasczyk <stephan@lukasczyk.me>\nENV POETRY_VERSION \"1.1.13\"\n\nWORKDIR /pynguin-build\n\n# Python shall not write the byte code to *.pyc files; they cannot be cached between\n# runs of the container anyway, hence we save the required time and resources for that\nENV PYTHONDONTWRITEBYTECODE 1\n# Prevent Python from buffering output that is written to STDOUT/STDERR; this allows to\n# monitor the output in real time\nENV PYTHONUNBUFFERED 1\n\nCOPY . .\n\nRUN pip install --no-cache-dir poetry==$POETRY_VERSION \\\n    && poetry config virtualenvs.create false \\\n    && poetry build\n\n\n# Execution stage for Pynguin\nFROM python:3.10.5-slim-bullseye AS execute\n\n# Set environment variables\n# Set the Pynguin version\nENV PYNGUIN_VERSION \"0.25.1\"\n# Pynguin requires to set the variable to show it that the user is aware that running\n# Pynguin executes third-party code, which could cause arbitrary harm to the system.\n# By setting the variable, the user acknowledges that they are aware of this.  In the\n# container this is not too much of an issue (if we forget about breaking out of the\n# container and similar things, of course).\nENV PYNGUIN_DANGER_AWARE \"\"\n# Python shall not write the byte code to *.pyc files; they cannot be cached between\n# runs of the container anyway, hence we save the required time and resources for that\nENV PYTHONDONTWRITEBYTECODE 1\n# Prevent Python from buffering output that is written to STDOUT/STDERR; this allows to\n# monitor the output in real time\nENV PYTHONUNBUFFERED 1\n# Disable random hash seeding for reproducible runs\nENV PYTHONHASHSEED 0\n\nWORKDIR /pynguin\n\nCOPY --from=build /pynguin-build/dist/pynguin-$PYNGUIN_VERSION.tar.gz .\nCOPY --from=build /pynguin-build/pynguin-docker.sh .\n\nRUN pip install --no-cache-dir /pynguin/pynguin-$PYNGUIN_VERSION.tar.gz\n\nENTRYPOINT [\"/pynguin/pynguin-docker.sh\"]\nCMD []\n"
}