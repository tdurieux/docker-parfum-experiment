{
  "startTime": 1674252967041,
  "endTime": 1674252968757,
  "originalSmells": [
    {
      "rule": "wgetUseHttpsUrl",
      "position": {
        "lineStart": 186,
        "lineEnd": 186,
        "columnStart": 1,
        "columnEnd": 111
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 124,
        "lineEnd": 124,
        "columnStart": 1,
        "columnEnd": 12
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 135,
        "lineEnd": 141,
        "columnStart": 1,
        "columnEnd": 76
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 149,
        "lineEnd": 155,
        "columnStart": 1,
        "columnEnd": 84
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 163,
        "lineEnd": 169,
        "columnStart": 1,
        "columnEnd": 76
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 187,
        "lineEnd": 187,
        "columnStart": 1,
        "columnEnd": 234
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 194,
        "lineEnd": 194,
        "columnStart": 1,
        "columnEnd": 12
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 203,
        "lineEnd": 203,
        "columnStart": 1,
        "columnEnd": 12
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 213,
        "lineEnd": 213,
        "columnStart": 1,
        "columnEnd": 12
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 12,
        "lineEnd": 12,
        "columnStart": 22,
        "columnEnd": 61
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 33,
        "lineEnd": 113,
        "columnStart": 22,
        "columnEnd": 4
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# SPDX-License-Identifier: GPL-2.0+\n# This Dockerfile is used to build an image containing basic stuff to be used\n# to build U-Boot and run our test suites.\n\nFROM ubuntu:focal-20220302\nMAINTAINER Tom Rini <trini@konsulko.com>\nLABEL Description=\" This image is for building U-Boot inside a container\"\n\n# Make sure apt is happy\nENV DEBIAN_FRONTEND=noninteractive\n\n# Add LLVM repository\nRUN apt-get update && apt-get install --no-install-recommends -y gnupg2 wget xz-utils && rm -rf /var/lib/apt/lists/*\nRUN wget -O - https://apt.llvm.org/llvm-snapshot.gpg.key | apt-key add -\nRUN echo deb http://apt.llvm.org/focal/ llvm-toolchain-focal-13 main | tee /etc/apt/sources.list.d/llvm.list\n\n# Manually install the kernel.org \"Crosstool\" based toolchains for gcc-11.1.0\nRUN wget -O - https://mirrors.edge.kernel.org/pub/tools/crosstool/files/bin/x86_64/11.1.0/x86_64-gcc-11.1.0-nolibc-aarch64-linux.tar.xz | tar -C /opt -xJ\nRUN wget -O - https://mirrors.edge.kernel.org/pub/tools/crosstool/files/bin/x86_64/11.1.0/x86_64-gcc-11.1.0-nolibc-arm-linux-gnueabi.tar.xz | tar -C /opt -xJ\nRUN wget -O - https://mirrors.edge.kernel.org/pub/tools/crosstool/files/bin/x86_64/11.1.0/x86_64-gcc-11.1.0-nolibc-i386-linux.tar.xz | tar -C /opt -xJ\nRUN wget -O - https://mirrors.edge.kernel.org/pub/tools/crosstool/files/bin/x86_64/11.1.0/x86_64-gcc-11.1.0-nolibc-m68k-linux.tar.xz | tar -C /opt -xJ\nRUN wget -O - https://mirrors.edge.kernel.org/pub/tools/crosstool/files/bin/x86_64/11.1.0/x86_64-gcc-11.1.0-nolibc-mips-linux.tar.xz | tar -C /opt -xJ\nRUN wget -O - https://mirrors.edge.kernel.org/pub/tools/crosstool/files/bin/x86_64/11.1.0/x86_64-gcc-11.1.0-nolibc-microblaze-linux.tar.xz | tar -C /opt -xJ\nRUN wget -O - https://mirrors.edge.kernel.org/pub/tools/crosstool/files/bin/x86_64/11.1.0/x86_64-gcc-11.1.0-nolibc-nios2-linux.tar.xz | tar -C /opt -xJ\nRUN wget -O - https://mirrors.edge.kernel.org/pub/tools/crosstool/files/bin/x86_64/11.1.0/x86_64-gcc-11.1.0-nolibc-powerpc-linux.tar.xz | tar -C /opt -xJ\nRUN wget -O - https://mirrors.edge.kernel.org/pub/tools/crosstool/files/bin/x86_64/11.1.0/x86_64-gcc-11.1.0-nolibc-riscv64-linux.tar.xz | tar -C /opt -xJ\nRUN wget -O - https://mirrors.edge.kernel.org/pub/tools/crosstool/files/bin/x86_64/11.1.0/x86_64-gcc-11.1.0-nolibc-sh2-linux.tar.xz | tar -C /opt -xJ\n\n# Manually install other toolchains\nRUN wget -O - https://github.com/foss-xtensa/toolchain/releases/download/2020.07/x86_64-2020.07-xtensa-dc233c-elf.tar.gz | tar -C /opt -xz\nRUN wget -O - https://github.com/foss-for-synopsys-dwc-arc-processors/toolchain/releases/download/arc-2021.03-release/arc_gnu_2021.03_prebuilt_uclibc_le_archs_linux_install.tar.gz | tar --no-same-owner -C /opt -xz\n\n# Update and install things from apt now\nRUN apt-get update && apt-get install --no-install-recommends -y \\\n\tautomake \\\n\tautopoint \\\n\tbc \\\n\tbinutils-dev \\\n\tbison \\\n\tbuild-essential \\\n\tclang-13 \\\n\tcoreutils \\\n\tcpio \\\n\tcppcheck \\\n\tcurl \\\n\tdevice-tree-compiler \\\n\tdosfstools \\\n\te2fsprogs \\\n\tefitools \\\n\terofs-utils \\\n\texpect \\\n\tfakeroot \\\n\tflex \\\n\tgawk \\\n\tgdisk \\\n\tgit \\\n\tgnu-efi \\\n\tgnutls-dev \\\n\tgraphviz \\\n\tgrub-efi-amd64-bin \\\n\tgrub-efi-ia32-bin \\\n\thelp2man \\\n\tiasl \\\n\timagemagick \\\n\tiputils-ping \\\n\tlibconfuse-dev \\\n\tlibgit2-dev \\\n\tlibjson-glib-dev \\\n\tlibguestfs-tools \\\n\tlibgnutls28-dev \\\n\tlibgnutls30 \\\n\tliblz4-tool \\\n\tlibpixman-1-dev \\\n\tlibpython3-dev \\\n\tlibsdl1.2-dev \\\n\tlibsdl2-dev \\\n\tlibseccomp-dev \\\n\tlibssl-dev \\\n\tlibtool \\\n\tlibudev-dev \\\n\tlibusb-1.0-0-dev \\\n\tlinux-image-kvm \\\n\tlzma-alone \\\n\tlzop \\\n\tmount \\\n\tmtd-utils \\\n\tmtools \\\n\tnet-tools \\\n\tninja-build \\\n\topenssl \\\n\tpicocom \\\n\tparted \\\n\tpkg-config \\\n\tpython-is-python3 \\\n\tpython2.7 \\\n\tpython3 \\\n\tpython3-dev \\\n\tpython3-pip \\\n\tpython3-sphinx \\\n\tpython3-virtualenv \\\n\trpm2cpio \\\n\tsbsigntool \\\n\tsloccount \\\n\tsocat \\\n\tsofthsm2 \\\n\tsparse \\\n\tsrecord \\\n\tsudo \\\n\tswig \\\n\tutil-linux \\\n\tuuid-dev \\\n\tvirtualenv \\\n\txxd \\\n\tzip \\\n\t&& rm -rf /var/lib/apt/lists/*\n\n# Make kernels readable for libguestfs tools to work correctly\nRUN chmod +r /boot/vmlinu*\n\n# Manually install a new enough version of sbsigntools (must be v0.9.4 or later)\nRUN git clone https://git.kernel.org/pub/scm/linux/kernel/git/jejb/sbsigntools.git /tmp/sbsigntools && \\\n\tcd /tmp/sbsigntools && \\\n\tgit checkout -b latest v0.9.4 && \\\n\t./autogen.sh && \\\n\t./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" && \\\n\tmake && \\\n\tmake install && \\\n\trm -rf /tmp/sbsigntools\n\n# Build GRUB UEFI targets for ARM & RISC-V, 32-bit and 64-bit\nRUN git clone git://git.savannah.gnu.org/grub.git /tmp/grub && \\\n\tcd /tmp/grub && \\\n\tgit checkout grub-2.06 && \\\n\t./bootstrap && \\\n\tmkdir -p /opt/grub && \\\n\t./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --target=aarch64 --with-platform=efi \\\n\tCC=gcc \\\n\tTARGET_CC=/opt/gcc-11.1.0-nolibc/aarch64-linux/bin/aarch64-linux-gcc \\\n\tTARGET_OBJCOPY=/opt/gcc-11.1.0-nolibc/aarch64-linux/bin/aarch64-linux-objcopy \\\n\tTARGET_STRIP=/opt/gcc-11.1.0-nolibc/aarch64-linux/bin/aarch64-linux-strip \\\n\tTARGET_NM=/opt/gcc-11.1.0-nolibc/aarch64-linux/bin/aarch64-linux-nm \\\n\tTARGET_RANLIB=/opt/gcc-11.1.0-nolibc/aarch64-linux/bin/aarch64-linux-ranlib && \\\n\tmake && \\\n\t./grub-mkimage -O arm64-efi -o /opt/grub/grubaa64.efi --prefix= -d \\\n\tgrub-core cat chain configfile echo efinet ext2 fat halt help linux \\\n\tlsefisystab loadenv lvm minicmd normal part_msdos part_gpt reboot \\\n\tsearch search_fs_file search_fs_uuid search_label serial sleep test \\\n\ttrue && \\\n\tmake clean && \\\n\t./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --target=arm --with-platform=efi \\\n\tCC=gcc \\\n\tTARGET_CC=/opt/gcc-11.1.0-nolibc/arm-linux-gnueabi/bin/arm-linux-gnueabi-gcc \\\n\tTARGET_OBJCOPY=/opt/gcc-11.1.0-nolibc/arm-linux-gnueabi/bin/arm-linux-gnueabi-objcopy \\\n\tTARGET_STRIP=/opt/gcc-11.1.0-nolibc/arm-linux-gnueabi/bin/arm-linux-gnueabi-strip \\\n\tTARGET_NM=/opt/gcc-11.1.0-nolibc/arm-linux-gnueabi/bin/arm-linux-gnueabi-nm \\\n\tTARGET_RANLIB=/opt/gcc-11.1.0-nolibc/arm-linux-gnueabi/bin/arm-linux-gnueabi-ranlib && \\\n\tmake && \\\n\t./grub-mkimage -O arm-efi -o /opt/grub/grubarm.efi --prefix= -d \\\n\tgrub-core cat chain configfile echo efinet ext2 fat halt help linux \\\n\tlsefisystab loadenv lvm minicmd normal part_msdos part_gpt reboot \\\n\tsearch search_fs_file search_fs_uuid search_label serial sleep test \\\n\ttrue && \\\n\tmake clean && \\\n\t./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --target=riscv64 --with-platform=efi \\\n\tCC=gcc \\\n\tTARGET_CC=/opt/gcc-11.1.0-nolibc/riscv64-linux/bin/riscv64-linux-gcc \\\n\tTARGET_OBJCOPY=/opt/gcc-11.1.0-nolibc/riscv64-linux/bin/riscv64-linux-objcopy \\\n\tTARGET_STRIP=/opt/gcc-11.1.0-nolibc/riscv64-linux/bin/riscv64-linux-strip \\\n\tTARGET_NM=/opt/gcc-11.1.0-nolibc/riscv64-linux/bin/riscv64-linux-nm \\\n\tTARGET_RANLIB=/opt/gcc-11.1.0-nolibc/riscv64-linux/bin/riscv64-linux-ranlib && \\\n\tmake && \\\n\t./grub-mkimage -O riscv64-efi -o /opt/grub/grubriscv64.efi --prefix= -d \\\n\tgrub-core cat chain configfile echo efinet ext2 fat halt help linux \\\n\tlsefisystab loadenv lvm minicmd normal part_msdos part_gpt reboot \\\n\tsearch search_fs_file search_fs_uuid search_label serial sleep test \\\n\ttrue && \\\n\trm -rf /tmp/grub\n\nRUN git clone git://git.qemu.org/qemu.git /tmp/qemu && \\\n\tcd /tmp/qemu && \\\n\tgit submodule update --init dtc && \\\n\tgit checkout v6.1.0 && \\\n\t# config user.name and user.email to make 'git am' happy\n\tgit config user.name u-boot && \\\n\tgit config user.email u-boot@denx.de && \\\n\t# manually apply the bug fix for QEMU 6.1.0 Xilinx Zynq UART emulation codes\n\twget -O - https://patchwork.ozlabs.org/project/qemu-devel/patch/20210823020813.25192-2-bmeng.cn@gmail.com/mbox/ | git am && \\\n\t./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --prefix=/opt/qemu --target-list=\"aarch64-softmmu,arm-softmmu,i386-softmmu,mips-softmmu,mips64-softmmu,mips64el-softmmu,mipsel-softmmu,ppc-softmmu,riscv32-softmmu,riscv64-softmmu,sh4-softmmu,x86_64-softmmu,xtensa-softmmu\" && \\\n\tmake -j$(nproc) all install && \\\n\trm -rf /tmp/qemu\n\n# Build genimage (required by some targets to generate disk images)\nRUN wget -O - https://github.com/pengutronix/genimage/releases/download/v14/genimage-14.tar.xz | tar -C /tmp -xJ && \\\n\tcd /tmp/genimage-14 && \\\n\t./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" && \\\n\tmake -j$(nproc) && \\\n\tmake install && \\\n\trm -rf /tmp/genimage-14\n\n# Build libtpms\nRUN git clone https://github.com/stefanberger/libtpms /tmp/libtpms && \\\n\tcd /tmp/libtpms && \\\n\t./autogen.sh && \\\n\t./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" && \\\n\tmake -j$(nproc) && \\\n\tmake install && \\\n\tldconfig && \\\n\trm -rf /tmp/libtpms\n\n# Build swtpm\nRUN git clone https://github.com/stefanberger/swtpm /tmp/swtpm && \\\n\tcd /tmp/swtpm && \\\n\t./autogen.sh && \\\n\t./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" && \\\n\tmake -j$(nproc) && \\\n\tmake install && \\\n\trm -rf /tmp/swtpm\n\n# Create our user/group\nRUN echo uboot ALL=NOPASSWD: ALL > /etc/sudoers.d/uboot\nRUN useradd -m -U uboot\nUSER uboot:uboot\n\n# Create the buildman config file\nRUN /bin/echo -e \"[toolchain]\\nroot = /usr\" > ~/.buildman\nRUN /bin/echo -e \"kernelorg = /opt/gcc-11.1.0-nolibc/*\" >> ~/.buildman\nRUN /bin/echo -e \"arc = /opt/arc_gnu_2021.03_prebuilt_uclibc_le_archs_linux_install\" >> ~/.buildman\nRUN /bin/echo -e \"\\n[toolchain-prefix]\\nxtensa = /opt/2020.07/xtensa-dc233c-elf/bin/xtensa-dc233c-elf-\" >> ~/.buildman;\nRUN /bin/echo -e \"\\n[toolchain-alias]\\nsh = sh2\" >> ~/.buildman\nRUN /bin/echo -e \"\\nriscv = riscv64\" >> ~/.buildman\nRUN /bin/echo -e \"\\nsandbox = x86_64\" >> ~/.buildman\nRUN /bin/echo -e \"\\nx86 = i386\" >> ~/.buildman;\n"
}