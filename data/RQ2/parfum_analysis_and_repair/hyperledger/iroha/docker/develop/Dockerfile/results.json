{
  "startTime": 1674252246846,
  "endTime": 1674252248119,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 42,
        "lineEnd": 42,
        "columnStart": 4,
        "columnEnd": 84
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 68,
        "lineEnd": 68,
        "columnStart": 4,
        "columnEnd": 143
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 76,
        "lineEnd": 76,
        "columnStart": 4,
        "columnEnd": 174
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 95,
        "lineEnd": 95,
        "columnStart": 4,
        "columnEnd": 152
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 89,
        "lineEnd": 89,
        "columnStart": 4,
        "columnEnd": 34
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 90,
        "lineEnd": 90,
        "columnStart": 4,
        "columnEnd": 52
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 96,
        "lineEnd": 96,
        "columnStart": 4,
        "columnEnd": 73
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 81,
        "lineEnd": 81,
        "columnStart": 4,
        "columnEnd": 37
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM ubuntu:20.04\n\n# number of concurrent threads during build\n# usage: docker build --build-arg PARALLELISM=8 -t name/name .\nARG PARALLELISM=1\n\nENV IROHA_HOME /opt/iroha\nENV IROHA_BUILD /opt/iroha/build\n\nRUN apt-get update && \\\n    apt-get -y --no-install-recommends install apt-utils software-properties-common wget gpg-agent; \\\n    apt-get -y clean && \\\n    rm -rf /var/lib/apt/lists/*\n\nRUN set -e; \\\n    apt-get update && \\\n    apt-get -y --no-install-recommends install libtool \\\n        # compilers (gcc-9, gcc-10)\n        build-essential g++-9 g++-10 cmake ninja-build \\\n        # CI dependencies\n        git ssh tar gzip ca-certificates gnupg \\\n        # code coverage\n        lcov \\\n        # Python3\n        python3-pip python-is-python3 \\\n        # other\n        curl file gdb gdbserver ccache python3-dev libssl-dev \\\n        gcovr cppcheck doxygen rsync graphviz graphviz-dev unzip vim zip pkg-config; \\\n    apt-get -y clean && \\\n    rm -rf /var/lib/apt/lists/*\n\n# compiler clang-10 and libc++ only on x86_64, for debug purpose\nRUN set -e; \\\n    if [ `uname -m` = \"x86_64\" ]; then \\\n      apt-get update && \\\n      apt-get -y --no-install-recommends install \\\n        clang-10 lldb-10 lld-10 libc++-10-dev libc++abi-10-dev clang-format-7; \\\n      apt-get -y clean && \\\n      rm -rf /var/lib/apt/lists/*; \\\n    fi\n\n# golang stuff\nRUN curl -f https://dl.google.com/go/go1.14.2.linux-$(dpkg --print-architecture).tar.gz | tar -C /opt -xz\nENV GOPATH=/opt/gopath\nRUN mkdir ${GOPATH}\nENV PATH=${PATH}:/opt/go/bin:${GOPATH}/bin\nRUN go get github.com/golang/protobuf/protoc-gen-go\n\n## pip3 contains fresher versions of packages than apt\nRUN pip3 install --no-cache-dir cmake ninja\n\n# install dependencies\nCOPY vcpkg /tmp/vcpkg-vars\nRUN set -xe; \\\n    case \"$(uname -m)\" in  arm*|s390*|ppc64*)  export VCPKG_FORCE_SYSTEM_BINARIES=1 ;; esac; \\\n    /tmp/vcpkg-vars/build_iroha_deps.sh /tmp/vcpkg /tmp/vcpkg-vars; \\\n    /tmp/vcpkg/vcpkg export $(/tmp/vcpkg/vcpkg list | cut -d':' -f1 | tr '\\n' ' ') --raw --output=dependencies; \\\n    mv /tmp/vcpkg/dependencies /opt/dependencies; \\\n    chmod +x /opt/dependencies/installed/*/tools/protobuf/protoc*; \\\n    unset VCPKG_FORCE_SYSTEM_BINARIES; \\\n    rm -rf /tmp/vcpkg*\n    ##NOTE Newer packages like libpq may require newer cmake version, and will fail with no sanity error message when VCPKG_FORCE_SYSTEM_BINARIES=1;\n    ##NOTE But vcpkg on platforms arm,s390,ppc64 require VCPKG_FORCE_SYSTEM_BINARIES=1\n\n# install sonar cli\nENV SONAR_CLI_VERSION=3.3.0.1492\nRUN set -e; \\\n    mkdir -p /opt/sonar; \\\n    curl -f -L -o /tmp/sonar.zip https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-${SONAR_CLI_VERSION}-linux.zip; \\\n    unzip -o -d /tmp/sonar-scanner /tmp/sonar.zip; \\\n    mv /tmp/sonar-scanner/sonar-scanner-${SONAR_CLI_VERSION}-linux /opt/sonar/scanner; \\\n    ln -s -f /opt/sonar/scanner/bin/sonar-scanner /usr/local/bin/sonar-scanner; \\\n    rm -rf /tmp/sonar*\n\n# fetch lcov reports converter\nRUN set -e; \\\n    curl -f -L -o /tmp/lcov_cobertura.py https://raw.githubusercontent.com/eriwen/lcov-to-cobertura-xml/8c55cd11f80a21e7e46f20f8c81fcde0bf11f5e5/lcov_cobertura/lcov_cobertura.py\n\n# OpenJRE 8\nRUN set -e; \\\n    apt-get update; \\\n    apt-get -y --no-install-recommends install openjdk-8-jre; \\\n    apt-get -y clean && \\\n    rm -rf /var/lib/apt/lists/*; \\\n    java -version\n\n# python bindings dependencies\nRUN set -e; \\\n    export GRPC_PYTHON_BUILD_SYSTEM_OPENSSL=1; \\\n    pip3 install --no-cache-dir setuptools wheel; \\\n    pip3 install --no-cache-dir grpcio_tools pysha3 iroha==0.0.5.4; \\\n    unset GRPC_PYTHON_BUILD_SYSTEM_OPENSSL\n\n# install rust\nRUN set -e; \\\n    curl -f -L -o /tmp/rust-1.37.0-$(uname -m)-unknown-linux-gnu.tar.gz https://static.rust-lang.org/dist/rust-1.37.0-$(uname -m)-unknown-linux-gnu.tar.gz; \\\n    tar xf /tmp/rust-1.37.0-$(uname -m)-unknown-linux-gnu.tar.gz -C /tmp; rm /tmp/rust-1.37.0-$( uname -m)-unknown-linux-gnu.tar.gz \\\n    /tmp/rust-1.37.0-$(uname -m)-unknown-linux-gnu/install.sh; \\\n    rm -rf /tmp/rust-1.37.0-$(uname -m)-unknown-linux-gnu*\n\n# non-interactive adduser\n#   -m = create home dir\n#   -s = set default shell\n#   iroha-ci = username\n#   -u = userid, default for Ubuntu is 1000\n#   -U = create a group same as username\n#   no password\nRUN useradd -ms /bin/bash iroha-ci -u 1000 -U\n\nWORKDIR /opt/iroha\nRUN set -e; \\\n    chmod -R 777 /opt/iroha; \\\n    mkdir -p /tmp/ccache -m 777; \\\n    ccache --clear\n\n\nUSER iroha-ci\nENV CMAKE_TOOLCHAIN_FILE /opt/dependencies/scripts/buildsystems/vcpkg.cmake\nCMD [\"/bin/bash\"]\n"
}