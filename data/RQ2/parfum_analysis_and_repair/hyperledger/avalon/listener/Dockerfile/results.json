{
  "startTime": 1674254724050,
  "endTime": 1674254724602,
  "originalSmells": [
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 153,
        "lineEnd": 153,
        "columnStart": 7,
        "columnEnd": 30
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# Copyright 2020 Intel Corporation\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n# ------------------------------------------------------------------------------\n\n# -------------=== listener build ===-------------\n\nARG IMAGE\nFROM $IMAGE as base_image\nARG DISTRO\nCOPY ./scripts/install_packages /project/avalon/scripts/\nRUN packages=\"\"; \\\n    pip_packages=\"\"; \\\n    if [ \"$DISTRO\" = \"bionic\" ] ; then \\\n      DEBIAN_FRONTEND=noninteractive \\\n      packages=\"$packages ca-certificates python3-requests python3-toml python3-colorlog python3-twisted\"; \\\n    elif [ \"$DISTRO\" = \"centos\" ] ; then \\\n      packages=\"$packages python3\" \\\n      pip_packages=\"$pip_packages toml colorlog twisted requests\"; \\\n      /project/avalon/scripts/install_packages -c install -q \"epel-release\"; \\\n    fi; \\\n    /project/avalon/scripts/install_packages -c install -q \"$packages\" -p \"$pip_packages\"\n\n# Make Python3 default\nRUN ln -sf /usr/bin/python3 /usr/bin/python\n\n# -------------=== python build ===-------------\n\n#Build python intermediate docker image\nFROM $IMAGE as python_image\nARG DISTRO\n\nCOPY ./scripts/install_packages /project/avalon/scripts/\n\n# Add necessary packages\nRUN packages=\"pkg-config python3-pip make\" \\\n    pip_packages=\"setuptools\"; \\\n    if [ \"$DISTRO\" = \"bionic\" ] ; then \\\n      packages=\"ca-certificates $packages python3-dev\"; \\\n    elif [ \"$DISTRO\" = \"centos\" ] ; then \\\n      packages=\"$packages python3-devel\" \\\n      pip_packages=\"$pip_packages wheel\"; \\\n    fi; \\\n    /project/avalon/scripts/install_packages -c install -q \"$packages\" -p \"$pip_packages\"\n\n\n# -------------=== common/python build ===-------------\n\n#Build common/python intermediate docker image\nFROM python_image as common_python_image\n\nCOPY VERSION /project/avalon/\nCOPY ./bin /project/avalon/bin\n\nENV TCF_HOME=/project/avalon\n\nCOPY ./common/python /project/avalon/common/python\n\nWORKDIR /project/avalon/common/python\n\nRUN echo \"Building Avalon Common Python\\n\" \\\n && make\n\n# -------------=== common/crypto_utils build ===-------------\n\n#Build common/crypto_utils intermediate docker image\nFROM python_image as common_crypto_utils_image\n\nCOPY VERSION /project/avalon/\nCOPY ./bin /project/avalon/bin\n\nENV TCF_HOME=/project/avalon\n\nCOPY ./common/crypto_utils /project/avalon/common/crypto_utils\n\nWORKDIR /project/avalon/common/crypto_utils\n\nRUN echo \"Building Avalon Common Crypto Python\\n\" \\\n && make\n\n# -------------=== Avalon SDK build ===-------------\n\n#Build Avalon SDK intermediate docker image\nFROM python_image as avalon_sdk_image\n\nCOPY VERSION /project/avalon/\nCOPY ./bin /project/avalon/bin\nCOPY ./sdk /project/avalon/sdk\n\nENV TCF_HOME=/project/avalon\n\nWORKDIR /project/avalon/sdk\n\n#install Avalon SDK  package.\nRUN echo \"Building Avalon SDK\\n\" \\\n && make\n\n\n#Build Avalon Listener intermediate docker image\nFROM python_image as build_image\n\nENV TCF_HOME=/project/avalon\n\nCOPY VERSION /project/avalon/\nCOPY ./bin /project/avalon/bin\nCOPY ./config/tcs_config.toml /project/avalon/config/\nCOPY ./listener /project/avalon/listener\n\n\n# Build Avalon Listener module next.\n\nWORKDIR /project/avalon/listener/\n\nRUN echo \"Building avalon listener\\n\" \\\n  && make\n\n# Build final image and install modules\nFROM base_image as final_image\nARG DISTRO\nCOPY ./scripts/install_packages /project/avalon/scripts/\n\nENV TCF_HOME=/project/avalon\n\nWORKDIR /project/avalon/listener\n\nCOPY ./listener/listener_config.toml /project/avalon/listener/listener_config.toml\nCOPY ./config/tcs_config.toml /project/avalon/config/\n# Copy Python build artifacts\nCOPY --from=common_python_image /project/avalon/common/python/dist/*.whl dist/\nCOPY --from=common_crypto_utils_image /project/avalon/common/crypto_utils/dist/*.whl dist/\nCOPY --from=avalon_sdk_image /project/avalon/sdk/dist/*.whl dist/\nCOPY --from=build_image /project/avalon/listener/dist/*.whl dist/\n\n# Installing wheel file requires python3-pip package.\n# But python3-pip package will increase size of final docker image.\n# So remove python3-pip package and dependencies after installing wheel file.\nRUN packages=\"\"; \\\n    pip_packages=\"json-rpc pyzmq jsonschema coverage pycryptodomex ecdsa\"; \\\n    if [ \"$DISTRO\" = \"bionic\" ] ; then \\\n      packages=\"$packages python3-pip\"; \\\n    fi; \\\n    /project/avalon/scripts/install_packages -c install -q \"$packages\" -p \"$pip_packages\" \\\n    && echo \"Install Common Python, Crypto, Listener and SDK packages\\n\" \\\n    && pip3 install --no-cache-dir dist/*.whl \\\n    && if [ \"$DISTRO\" = \"bionic\" ] ; then \\\n         echo \"Remove unused packages from image\\n\" \\\n         /project/avalon/scripts/install_packages -c uninstall -q \"$packages\"; \\\n       fi\n"
}