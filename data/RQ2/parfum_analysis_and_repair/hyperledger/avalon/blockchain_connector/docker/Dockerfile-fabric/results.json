{
  "startTime": 1674253667783,
  "endTime": 1674253668469,
  "originalSmells": [
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 190,
        "lineEnd": 190,
        "columnStart": 7,
        "columnEnd": 30
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 175,
        "lineEnd": 175,
        "columnStart": 9,
        "columnEnd": 20
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 173,
        "lineEnd": 173,
        "columnStart": 9,
        "columnEnd": 35
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# Copyright 2020 Intel Corporation\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n# ------------------------------------------------------------------------------\n\nARG IMAGE\nFROM $IMAGE as base_image\nARG DISTRO\nCOPY ./scripts/install_packages /project/avalon/scripts/\nRUN packages=\"\"; \\\n    pip_packages=\"\"; \\\n    if [ \"$DISTRO\" = \"bionic\" ] ; then \\\n      DEBIAN_FRONTEND=noninteractive \\\n      packages=\"$packages ca-certificates python3-requests python3-toml python3-colorlog python3-twisted\"; \\\n    elif [ \"$DISTRO\" = \"centos\" ] ; then \\\n      packages=\"$packages python3\" \\\n      pip_packages=\"$pip_packages toml colorlog twisted requests\"; \\\n      /project/avalon/scripts/install_packages -c install -q \"epel-release\"; \\\n    fi; \\\n    /project/avalon/scripts/install_packages -c install -q \"$packages\" -p \"$pip_packages\"\n\n# Make Python3 default\nRUN ln -sf /usr/bin/python3 /usr/bin/python\n\n# -------------=== python build ===-------------\n\n#Build python intermediate docker image\nFROM $IMAGE as python_image\nARG DISTRO\n\nCOPY ./scripts/install_packages /project/avalon/scripts/\n\n# Add necessary packages\nRUN packages=\"ca-certificates pkg-config python3-pip make\" \\\n    pip_packages=\"setuptools jsonschema\"; \\\n    if [ \"$DISTRO\" = \"bionic\" ] ; then \\\n      packages=\"$packages python3-dev\"; \\\n    elif [ \"$DISTRO\" = \"centos\" ] ; then \\\n      packages=\"$packages python3-devel\" \\\n      pip_packages=\"$pip_packages wheel\"; \\\n    fi; \\\n    /project/avalon/scripts/install_packages -c install -q \"$packages\" -p \"$pip_packages\"\n\n# -------------=== common/python build ===-------------\n\n#Build common/python intermediate docker image\nFROM python_image as common_python_image\n\nCOPY VERSION /project/avalon/\nCOPY ./bin /project/avalon/bin\n\nENV TCF_HOME=/project/avalon\n\nCOPY ./common/python /project/avalon/common/python\n\nWORKDIR /project/avalon/common/python\n\nRUN echo \"Building Avalon Common Python\\n\" \\\n && make\n\n\n# -------------=== common/crypto_utils build ===-------------\n\n#Build common/crypto_utils intermediate docker image\nFROM python_image as common_crypto_utils_image\n\nCOPY VERSION /project/avalon/\nCOPY ./bin /project/avalon/bin\n\nENV TCF_HOME=/project/avalon\n\nCOPY ./common/crypto_utils /project/avalon/common/crypto_utils\n\nWORKDIR /project/avalon/common/crypto_utils\n\nRUN echo \"Building Avalon Common Crypto Python\\n\" \\\n && make\n\n\n# -------------=== Avalon SDK build ===-------------\n\n#Build Avalon SDK intermediate docker image\nFROM python_image as avalon_sdk_image\n\nCOPY VERSION /project/avalon/\nCOPY ./bin /project/avalon/bin\nCOPY ./sdk /project/avalon/sdk\n\nENV TCF_HOME=/project/avalon\n\nWORKDIR /project/avalon/sdk\n\n#install Avalon SDK  package.\nRUN echo \"Building Avalon SDK\\n\" \\\n && make\n\n\n# Build Avalon blockchain connector docker image\nFROM python_image as build_image\nARG DISTRO\n\n# Add necessary packages to build\nRUN packages=\"cmake git swig\"; \\\n    pip_packages=\"nest_asyncio\"; \\\n    if [ \"$DISTRO\" = \"bionic\" ] ; then \\\n      packages=\"$packages protobuf-compiler libprotobuf-dev software-properties-common dh-autoreconf ocaml xxd ocamlbuild\"; \\\n    elif [ \"$DISTRO\" = \"centos\" ] ; then \\\n      packages=\"$packages libcurl-devel gcc-c++ which\"; \\\n    fi; \\\n    /project/avalon/scripts/install_packages -c install -q \"$packages\" -p \"$pip_packages\"\n\nRUN if [ \"$DISTRO\" = \"centos\" ] ; then \\\n      /project/avalon/scripts/install_packages -c install -q \"epel-release\"; \\\n      dnf -y --enablerepo=powertools install protobuf-devel yum-utils ocaml ocaml-ocamlbuild dh-autoreconf; \\\n    fi\n\nCOPY VERSION /project/avalon/\nCOPY ./bin /project/avalon/bin\nCOPY ./blockchain_connector /project/avalon/blockchain_connector\n\n# Copy Python build artifacts\nCOPY --from=common_python_image /project/avalon/common/python/dist/*.whl dist/\nCOPY --from=avalon_sdk_image /project/avalon/sdk/dist/*.whl dist/\n\n# Install fabric python sdk\nRUN git clone https://github.com/hyperledger/fabric-sdk-py.git \\\n  && cd fabric-sdk-py \\\n  && make install\n\nWORKDIR /project/avalon/blockchain_connector/common\n# install blockchain common connector module\nRUN echo \"Build common connector module\" \\\n   && make\n\n\nWORKDIR /project/avalon/blockchain_connector/fabric\n# install fabric connector module\nRUN echo \"Build fabric connector module\" \\\n   && make\n\n# Build final image and install modules\nFROM base_image as final_image\nARG DISTRO\n\nENV TCF_HOME=/project/avalon\n\nWORKDIR /project/avalon/blockchain_connector\n\nCOPY --from=build_image /usr/local/ /usr/local\n# Copy Python build artifacts\nCOPY --from=common_python_image /project/avalon/common/python/dist/*.whl dist/\nCOPY --from=avalon_sdk_image /project/avalon/sdk/dist/*.whl dist/\nCOPY --from=common_crypto_utils_image /project/avalon/common/crypto_utils/dist/*.whl dist/\nCOPY --from=build_image /project/avalon/blockchain_connector/common/dist/*.whl dist/\nCOPY --from=build_image /project/avalon/blockchain_connector/fabric/dist/*.whl dist/\nCOPY ./sdk/avalon_sdk/tcf_connector.toml /project/avalon/sdk/avalon_sdk/\n\nRUN if [ \"$DISTRO\" = \"centos\" ] ; then \\\n      dnf remove -y python3; \\\n      packages=\"openssl-devel wget make gcc\"; \\\n      /project/avalon/scripts/install_packages -c install -q \"$packages\"; \\\n      cd /tmp \\\n      && wget https://www.python.org/ftp/python/3.6.9/Python-3.6.9.tgz \\\n      && tar -xvzf Python-3.6.9.tgz \\\n      && cd Python-3.6.9 \\\n      && ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" \\\n      && make \\\n      && make install; rm Python-3.6.9.tgz \\\n    fi\n\n# Installing wheel file requires python3-pip package.\n# python3-pip package will increase size of final docker image.\n# So remove python3-pip package and dependencies.\nRUN packages=\"\"; \\\n    pip_packages=\"pycryptodomex ecdsa\"; \\\n    if [ \"$DISTRO\" = \"bionic\" ] ; then \\\n      packages=\"$packages python3-pip\"; \\\n    fi; \\\n    /project/avalon/scripts/install_packages -c install -q \"$packages\" -p \"$pip_packages\" \\\n    && echo \"Install Common Python, SDK & Blockchain_connector packages\\n\" \\\n    && pip3 install --no-cache-dir dist/*.whl \\\n    && if [ \"$DISTRO\" = \"bionic\" ] ; then \\\n         echo \"Remove unused packages from image\\n\" \\\n         /project/avalon/scripts/install_packages -c uninstall -q \"$packages\"; \\\n       fi\n"
}