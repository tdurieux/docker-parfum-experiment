{
  "startTime": 1674254483455,
  "endTime": 1674254484164,
  "originalSmells": [
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 43,
        "lineEnd": 43,
        "columnStart": 4,
        "columnEnd": 38
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 68,
        "lineEnd": 68,
        "columnStart": 4,
        "columnEnd": 27
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 150,
        "lineEnd": 150,
        "columnStart": 4,
        "columnEnd": 71
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 32,
        "lineEnd": 38,
        "columnStart": 4,
        "columnEnd": 15
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 58,
        "lineEnd": 63,
        "columnStart": 4,
        "columnEnd": 8
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 96,
        "lineEnd": 97,
        "columnStart": 4,
        "columnEnd": 8
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 137,
        "lineEnd": 137,
        "columnStart": 4,
        "columnEnd": 37
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 32,
        "lineEnd": 38,
        "columnStart": 4,
        "columnEnd": 15
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 58,
        "lineEnd": 63,
        "columnStart": 4,
        "columnEnd": 8
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 96,
        "lineEnd": 97,
        "columnStart": 4,
        "columnEnd": 8
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# Copyright 2020 Intel Corporation\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n# ------------------------------------------------------------------------------\n\n# Description:\n#   Builds the environment needed to build Avalon Graphene Enclave manager.\n#\n#  Configuration (build) parameters\n#  - proxy configuration: https_proxy http_proxy ftp_proxy\n#  - sgx_mode:\n#\n\n# -------------=== build avalon Enclave Manager image ===-------------\n# Build base docker image\nFROM ubuntu:bionic as base_image\n\n# Ignore timezone prompt in apt\nENV DEBIAN_FRONTEND=noninteractive\n\n# Add necessary packages\nRUN apt-get update \\\n && apt-get install --no-install-recommends -y -q \\\n    ca-certificates \\\n    python3-toml \\\n    python3-requests \\\n    python3-colorlog \\\n    python3-twisted \\\n    python3-pip \\\n && apt-get clean && rm -rf /var/lib/apt/lists/*;\n\n# Install setuptools packages using pip because\n# these are not available in apt repository.\nRUN pip3 install --no-cache-dir setuptools jsonschema\n\n# Make Python3 default\nRUN ln -sf /usr/bin/python3 /usr/bin/python\n\n\n\n# -------------=== python build ===-------------\n\n# Build python intermediate docker image\nFROM ubuntu:bionic as python_image\n\n\n# Add necessary packages\nRUN apt-get update \\\n && apt-get install --no-install-recommends -y -q \\\n    ca-certificates \\\n    pkg-config \\\n    python3-pip \\\n    python3-dev \\\n    make \\\n && apt-get clean && rm -rf /var/lib/apt/lists/*;\n\n# Install setuptools packages using pip because\n# these are not available in apt repository.\nRUN pip3 install --no-cache-dir setuptools\n\n\n\n# -------------=== common/python build ===-------------\n\n# Build common/python intermediate docker image\nFROM python_image as common_python_image\n\nCOPY VERSION /project/avalon/\nCOPY ./bin /project/avalon/bin\n\nENV TCF_HOME=/project/avalon\n\nCOPY ./common/python /project/avalon/common/python\n\nWORKDIR /project/avalon/common/python\n\nRUN echo \"Building Avalon Common Python\\n\" \\\n && make\n\n\n# -------------=== common/crypto_utils build ===-------------\n\n# Build common/crypto_utils intermediate docker image\nFROM python_image as common_crypto_utils_image\n\nRUN apt-get update \\\n && apt-get install --no-install-recommends -y -q \\\n    swig && rm -rf /var/lib/apt/lists/*;\n\nCOPY VERSION /project/avalon/\nCOPY ./bin /project/avalon/bin\n\nENV TCF_HOME=/project/avalon\n\nCOPY ./common/crypto_utils /project/avalon/common/crypto_utils\n\nWORKDIR /project/avalon/common/crypto_utils\n\nRUN echo \"Building Avalon Common Crypto Python\\n\" \\\n && make\n\n\n# -------------=== Avalon SDK build ===-------------\n\n# Build Avalon SDK intermediate docker image\nFROM python_image as avalon_sdk_image\n\nCOPY VERSION /project/avalon/\nCOPY ./bin /project/avalon/bin\nCOPY ./sdk /project/avalon/sdk\n\nENV TCF_HOME=/project/avalon\n\nWORKDIR /project/avalon/sdk\n\n# install Avalon SDK  package.\nRUN echo \"Building Avalon SDK\\n\" \\\n && make\n\n\n# Build Avalon Graphene manager intermediate image\nFROM base_image as build_image\n\nENV TCF_HOME=/project/avalon\nWORKDIR /project/avalon/enclave_manager\n\nRUN apt-get update \\\n && apt-get install --no-install-recommends -y -q python3-pip \\\n && apt-get clean \\\n && rm -rf /var/lib/apt/lists/*\n\nCOPY VERSION /project/avalon/\nCOPY ./bin /project/avalon/bin\n\n# Copy Python build artifacts\nCOPY --from=common_python_image /project/avalon/common/python/dist/*.whl dist/\nCOPY --from=common_crypto_utils_image /project/avalon/common/crypto_utils/dist/*.whl dist/\nCOPY --from=avalon_sdk_image /project/avalon/sdk/dist/*.whl dist/\n\nRUN echo \"Install common/python and sdk packages\\n\" \\\n && pip3 install --no-cache-dir dist/*.whl json-rpc pyzmq coverage pycryptodomex ecdsa\n\n\n# Build Avalon Graphene Enclave Manager docker image\nFROM build_image as final_image\n\nARG ENCLAVE_TYPE\nENV ENCLAVE_TYPE=${ENCLAVE_TYPE}\nENV TCF_HOME=/project/avalon\n\nCOPY ./config/graphene_wpe_config.toml /project/avalon/config/\nCOPY ./config/graphene_config.toml /project/avalon/config/\nCOPY ./config/tcs_config.toml /project/avalon/config/\nCOPY ./enclave_manager/setup_${ENCLAVE_TYPE}.py /project/avalon/enclave_manager/\nCOPY ./enclave_manager/avalon_enclave_manager/attestation_common /project/avalon/enclave_manager/avalon_enclave_manager/attestation_common\nCOPY ./enclave_manager/Makefile-graphene /project/avalon/enclave_manager/\nCOPY ./enclave_manager/avalon_enclave_manager/*.py /project/avalon/enclave_manager/avalon_enclave_manager/\nCOPY ./enclave_manager/avalon_enclave_manager/${ENCLAVE_TYPE} /project/avalon/enclave_manager/avalon_enclave_manager/${ENCLAVE_TYPE}\nCOPY ./enclave_manager/avalon_enclave_manager/wpe_common /project/avalon/enclave_manager/avalon_enclave_manager/wpe_common\nCOPY ./wpe_mr_enclave.txt /project/avalon/\n\n\nWORKDIR /project/avalon/enclave_manager\n\nRUN if [ \"${ENCLAVE_TYPE}\" != \"graphene_wpe\" ]; then rm -rf ./avalon_enclave_manager/wpe_common ./config/graphene_wpe_config.toml; fi\n\nRUN echo \"Build and Install Avalon Graphene Enclave Manager\" \\\n  && make -f Makefile-graphene \\\n  && make -f Makefile-graphene install\n\n"
}