{
  "startTime": 1674255727488,
  "endTime": 1674255729033,
  "originalSmells": [
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 278,
        "lineEnd": 278,
        "columnStart": 4,
        "columnEnd": 71
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 83,
        "lineEnd": 83,
        "columnStart": 4,
        "columnEnd": 40
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 195,
        "lineEnd": 195,
        "columnStart": 9,
        "columnEnd": 40
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 171,
        "lineEnd": 183,
        "columnStart": 9,
        "columnEnd": 27
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# Copyright 2020 Intel Corporation\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n# ------------------------------------------------------------------------------\n\n# Description:\n#   Builds the environment needed to build Avalon Intel SGX Enclave manager.\n#\n#  Configuration (build) parameters\n#  - proxy configuration: https_proxy http_proxy ftp_proxy\n#  - sgx_mode:\n#\n\n# -------------=== build avalon Enclave Manager image ===-------------\n\nARG IMAGE\nFROM $IMAGE as base_image\nARG DISTRO\nCOPY ./scripts/install_packages /project/avalon/scripts/\nRUN packages=\"\"; \\\n    pip_packages=\"\"; \\\n    if [ \"$DISTRO\" = \"bionic\" ] ; then \\\n      DEBIAN_FRONTEND=noninteractive \\\n      packages=\"$packages ca-certificates python3-requests python3-toml python3-colorlog python3-twisted\"; \\\n    elif [ \"$DISTRO\" = \"centos\" ] ; then \\\n      packages=\"$packages python3\" \\\n      pip_packages=\"$pip_packages toml colorlog twisted requests\"; \\\n      /project/avalon/scripts/install_packages -c install -q \"epel-release\"; \\\n    fi; \\\n    /project/avalon/scripts/install_packages -c install -q \"$packages\" -p \"$pip_packages\"\n\n# Make Python3 default\nRUN ln -sf /usr/bin/python3 /usr/bin/python\n\n# -------------=== python build ===-------------\n\n#Build python intermediate docker image\nFROM $IMAGE as python_image\nARG DISTRO\n\nCOPY ./scripts/install_packages /project/avalon/scripts/\n\n# Add necessary packages\nRUN packages=\"pkg-config python3-pip make\" \\\n    pip_packages=\"setuptools\"; \\\n    if [ \"$DISTRO\" = \"bionic\" ] ; then \\\n      packages=\"ca-certificates $packages python3-dev\"; \\\n    elif [ \"$DISTRO\" = \"centos\" ] ; then \\\n      packages=\"$packages python3-devel\" \\\n      pip_packages=\"$pip_packages wheel\"; \\\n    fi; \\\n    /project/avalon/scripts/install_packages -c install -q \"$packages\" -p \"$pip_packages\"\n\n\n# -------------=== Build openssl_image ===-------------\n\n#Build openssl intermediate docker image\nFROM $IMAGE as openssl_image\nARG DISTRO\n\nCOPY ./scripts/install_packages /project/avalon/scripts/\n\nRUN packages=\"ca-certificates pkg-config make wget tar\"; \\\n    if [ \"$DISTRO\" = \"centos\" ] ; then \\\n      packages=\"$packages perl gcc\"; \\\n    fi; \\\n    /project/avalon/scripts/install_packages -c install -q \"$packages\"\n\nWORKDIR /tmp\n\n# Build (\"Untrusted\") OpenSSL\nRUN OPENSSL_VER=1.1.1g \\\n && wget https://www.openssl.org/source/openssl-$OPENSSL_VER.tar.gz \\\n && tar -zxf openssl-$OPENSSL_VER.tar.gz \\\n && cd openssl-$OPENSSL_VER/ \\\n && ./config \\\n && THREADS=8 \\\n && make -j$THREADS \\\n && make test \\\n && make install -j$THREADS && rm openssl-$OPENSSL_VER.tar.gz\n\n# Created an empty /usr/local/lib64 dir for bionic, because in case of centos\n# we need to COPY /usr/local/lib64 for openssl artifacts which will fail for bionic\n# as bionic doesn't have this directory.\nRUN if [ \"$DISTRO\" = \"bionic\" ] ; then \\\n      mkdir /usr/local/lib64; \\\n    fi\n\n# -------------=== common/python build ===-------------\n\n#Build common/python intermediate docker image\nFROM python_image as common_python_image\n\nCOPY VERSION /project/avalon/\nCOPY ./bin /project/avalon/bin\n\nENV TCF_HOME=/project/avalon\n\nCOPY ./common/python /project/avalon/common/python\n\nWORKDIR /project/avalon/common/python\n\nRUN echo \"Building Avalon Common Python\\n\" \\\n && make\n\n\n\n# -------------=== Avalon SDK build ===-------------\n\n#Build Avalon SDK intermediate docker image\nFROM python_image as avalon_sdk_image\n\nCOPY VERSION /project/avalon/\nCOPY ./bin /project/avalon/bin\nCOPY ./sdk /project/avalon/sdk\n\nENV TCF_HOME=/project/avalon\n\nWORKDIR /project/avalon/sdk\n\n#install Avalon SDK  package.\nRUN echo \"Building Avalon SDK\\n\" \\\n && make\n\n\n\n#Build Avalon Enclave Manager docker image\nFROM base_image as build_image\nARG DISTRO\n\nCOPY ./scripts/install_packages /project/avalon/scripts/\n\nRUN packages=\"pkg-config cmake make git swig wget tar curl unzip\" \\\n    && pip_packages=\"setuptools jsonschema\"; \\\n    if [ \"$DISTRO\" = \"bionic\" ] ; then \\\n      packages=\"$packages ca-certificates build-essential software-properties-common python3-pip libprotobuf-dev dh-autoreconf ocaml xxd ocamlbuild\"; \\\n    elif [ \"$DISTRO\" = \"centos\" ] ; then \\\n      packages=\"$packages perl gcc python3-devel libcurl-devel python3-wheel\"; \\\n    fi; \\\n    /project/avalon/scripts/install_packages -c install -q \"$packages\" -p \"$pip_packages\"\n\nRUN if [ \"$DISTRO\" = \"centos\" ] ; then \\\n      dnf -y --enablerepo=powertools install protobuf-devel yum-utils ocaml ocaml-ocamlbuild dh-autoreconf \\\n      && yum groupinstall 'Development Tools' -y \\\n      && alternatives --set python /usr/bin/python3; \\\n    fi\n\n\n# Intel SGX common library and SDK are installed in /opt/intel directory.\n# Installation of Intel SGX libsgx-common packages requires\n# /etc/init directory. In the Docker image this directory doesn't exist.\n# Hence creating /etc/init directory.\nRUN mkdir -p /opt/intel \\\n && mkdir -p /etc/init\nWORKDIR /opt/intel\n\nRUN if [ \"$DISTRO\" = \"bionic\" ] ; then \\\n      echo 'deb [arch=amd64] https://download.01.org/intel-sgx/sgx_repo/ubuntu bionic main' | tee /etc/apt/sources.list.d/intel-sgx.list \\\n      && wget -qO - https://download.01.org/intel-sgx/sgx_repo/ubuntu/intel-sgx-deb.key | apt-key add \\\n      && apt-get update \\\n      && apt-get install --no-install-recommends -y -q \\\n         libsgx-enclave-common \\\n         libsgx-launch \\\n         libsgx-urts \\\n         libsgx-epid \\\n         libsgx-quote-ex \\\n         libsgx-dcap-default-qpl \\\n         libsgx-dcap-ql \\\n         libsgx-dcap-ql-dev \\\n         libsgx-ae-qve \\\n         libsgx-dcap-quote-verify \\\n         libsgx-dcap-quote-verify-dev \\\n         libsgx-uae-service \\\n      && apt-get clean \\\n      && rm -rf /var/lib/apt/lists/* \\\n\n      && SGX_SDK_FILE=sgx_linux_x64_sdk_2.10.100.2.bin \\\n      && wget https://download.01.org/intel-sgx/sgx-linux/2.10/distro/ubuntu18.04-server/$SGX_SDK_FILE \\\n      && echo \"yes\" | bash ./$SGX_SDK_FILE \\\n      && rm $SGX_SDK_FILE \\\n      && echo \". /opt/intel/sgxsdk/environment\" >> /etc/environment; \\\n\n    elif [ \"$DISTRO\" = \"centos\" ] ; then \\\n      wget https://download.01.org/intel-sgx/sgx-dcap/1.8/linux/distro/centos8.1-server/sgx_rpm_local_repo.tgz \\\n      && tar -xvf sgx_rpm_local_repo.tgz \\\n      && yum-config-manager --add-repo file:///opt/intel/sgx_rpm_local_repo \\\n      && yum --nogpgcheck install -y \\\n         libsgx-launch \\\n         libsgx-epid \\\n         libsgx-quote-ex \\\n         libsgx-urts \\\n         libsgx-dcap-default-qpl \\\n         libsgx-dcap-ql \\\n         libsgx-dcap-ql-dev \\\n         libsgx-ae-qve \\\n         libsgx-dcap-quote-verify \\\n         libsgx-dcap-quote-verify-dev \\\n         libsgx-uae-service; rm sgx_rpm_local_repo.tgz \\\n      cd /opt/intel \\\n      && wget https://download.01.org/intel-sgx/sgx-linux/2.10/distro/centos8.1-server/sgx_linux_x64_sdk_2.10.100.2.bin \\\n      && chmod +x sgx_linux_x64_sdk_2.10.100.2.bin \\\n      && echo \"yes\" | bash ./sgx_linux_x64_sdk_2.10.100.2.bin \\\n      && echo \". /opt/intel/sgxsdk/environment\" >> /etc/environment; \\\n    fi\n\n# Configure QPL to use self-signed cert for local PCCS\nCOPY docker/pccs/sgx_default_qcnl.conf /etc/sgx_default_qcnl.conf    \n\n# Copy openssl build artifacts from openssl_image\nENV OPENSSL_VER=1.1.1g\n\nCOPY --from=openssl_image /usr/local/ssl /usr/local/ssl\nCOPY --from=openssl_image /usr/local/bin /usr/local/bin\nCOPY --from=openssl_image /usr/local/include /usr/local/include\nCOPY --from=openssl_image /usr/local/lib /usr/local/lib\n# In case of openssl, artifacts are installed at /usr/local/lib64\nCOPY --from=openssl_image /usr/local/lib64 /usr/local/lib64\nCOPY --from=openssl_image /tmp/openssl-$OPENSSL_VER.tar.gz /tmp/\n\n# Build (\"trusted\") Intel SGX OpenSSL\n# Note: This will compile in HW or SIM mode depending on the\n\n# Note: This will compile in HW or SIM mode depending on the\n# availability of /dev/isgx and /var/run/aesmd/aesm.socket\n\nWORKDIR /tmp\n\n# Using specific Intel SGX SSL tag \"lin_2.10_1.1.1g\" corresponding to\n# openSSL version 1.1.1g\n# Intel SGX SSL is compiled with mitigation tools to address vulnerabilities\n# found in earlier versions of SGX as documented in SGX SDK install guide\n# https://github.com/intel/linux-sgx\n# Mitigations tool tar ball is downloaded, extracted and copied to /usr/local/bin\n\nRUN platform=\"\"; \\\n    if [ \"$DISTRO\" = \"bionic\" ] ; then \\\n      platform=\"ubuntu18.04\"; \\\n    elif [ \"$DISTRO\" = \"centos\" ] ; then \\\n      platform=\"centos8.1\"; \\\n    fi; \\\n    ldconfig \\\n    && ln -s /etc/ssl/certs/* /usr/local/ssl/certs/ \\\n    && MITIGATION_TOOLS=as.ld.objdump.gold.r2.tar.gz \\\n    && wget https://download.01.org/intel-sgx/sgx-linux/2.10/$MITIGATION_TOOLS \\\n    && tar -xvf $MITIGATION_TOOLS \\\n    && cp external/toolset/$platform/* /usr/local/bin/ \\\n    && rm $MITIGATION_TOOLS \\\n    && git clone -b lin_2.10_1.1.1g https://github.com/intel/intel-sgx-ssl.git  \\\n    && . /opt/intel/sgxsdk/environment \\\n    && (cd intel-sgx-ssl/openssl_source; mv /tmp/openssl-$OPENSSL_VER.tar.gz . ) \\\n    && (cd intel-sgx-ssl/Linux; \\\n    if ([ -c /dev/isgx ] && [ -S /var/run/aesmd/aesm.socket ]); then SGX_MODE=HW; \\\n    else SGX_MODE=SIM; \\\n    fi; \\\n    make SGX_MODE=${SGX_MODE} DESTDIR=/opt/intel/sgxssl all test ) \\\n    && (cd intel-sgx-ssl/Linux; make install ) \\\n    && rm -rf /tmp/intel-sgx-ssl \\\n    && echo \"SGX_SSL=/opt/intel/sgxssl\" >> /etc/environment\n\n# Docker build won't progress if host _dev folder not removed\nRUN rm -rf /project/avalon/tools/build/_dev\n\n# Copy Python build artifacts\nCOPY --from=common_python_image /project/avalon/common/python/dist/*.whl dist/\nCOPY --from=avalon_sdk_image /project/avalon/sdk/dist/*.whl dist/\n\nRUN echo \"Install common/python and sdk packages\\n\" \\\n && pip3 install --no-cache-dir dist/*.whl json-rpc pyzmq coverage pycryptodomex ecdsa\n\n\nARG SGX_MODE\nARG MAKECLEAN\nARG TCF_DEBUG_BUILD\nARG ENCLAVE_TYPE\nARG WORKLOADS\nARG ATTESTATION_TYPE\n\n# Environment setup\nENV TCF_HOME=/project/avalon\nENV SGX_SSL=/opt/intel/sgxssl\nENV SGX_SDK=/opt/intel/sgxsdk\nENV PATH=$PATH:$SGX_SDK/bin:$SGX_SDK/bin/x64\nENV PKG_CONFIG_PATH=$PKG_CONFIG_PATH:$SGX_SDK/pkgconfig\nENV LD_LIBRARY_PATH=$LD_LIBRARY_PATH:$SGX_SDK/sdk_libs\nENV TCF_ENCLAVE_CODE_SIGN_PEM=\"$TCF_HOME/enclave.pem\"\n# For centos, /usr/local/lib64/pkgconfig/ path be included in PKG_CONFIG_PATH\nENV PKG_CONFIG_PATH=$PKG_CONFIG_PATH:/usr/local/lib64/pkgconfig/\n\nRUN openssl genrsa -3 -out $TCF_HOME/enclave.pem 3072\n\nCOPY ./examples/apps /project/avalon/examples/apps\nCOPY ./common/cpp /project/avalon/common/cpp\nCOPY ./tc/sgx/trusted_worker_manager/enclave/kme/workload /project/avalon/tc/sgx/trusted_worker_manager/enclave/kme/workload\nCOPY ./tc/sgx/trusted_worker_manager /project/avalon/tc/sgx/trusted_worker_manager\nCOPY ./common/crypto_utils /project/avalon/common/crypto_utils\nCOPY ./enclave_manager /project/avalon/enclave_manager\nCOPY ./common/sgx_workload /project/avalon/common/sgx_workload\nCOPY ./bin /project/avalon/bin\nCOPY ./VERSION /project/avalon/VERSION\nCOPY ./scripts/generate_mrenclave.sh /project/avalon/scripts/generate_mrenclave.sh\nCOPY ./config /project/avalon/config\nWORKDIR /project/avalon/common/sgx_workload\n\nRUN mkdir -p build \\\n  && cd build \\\n  && cmake .. \\\n  && make\n\n# Directory apps contains Intel SGX workloads which need to be built\n# and linked to the Intel SGX enclave\nRUN if [ \"$ENCLAVE_TYPE\" != \"kme\" ] ; then \\\n        cd /project/avalon/examples/apps; \\\n        mkdir -p build; \\\n        cd build; \\\n        cmake ..; \\\n        make; \\\n    fi\n\n# Build Key Management Enclave workload which will be\n# linked to enclave shared library\nRUN if [ \"$ENCLAVE_TYPE\" = \"kme\" ] ; then \\\n        cd /project/avalon/tc/sgx/trusted_worker_manager/enclave/kme/workload; \\\n\tmkdir -p build; \\\n        cd build; \\\n        cmake ..; \\\n        make; \\\n    fi\n\nWORKDIR /project/avalon/common/cpp\n\nRUN mkdir -p build \\\n  && cd build \\\n  && cmake .. \\\n  && make\n\nWORKDIR /project/avalon/tc/sgx/trusted_worker_manager/common\n\nRUN mkdir -p build \\\n  && cd build \\\n  && cmake .. \\\n  && make\n\nWORKDIR /project/avalon/tc/sgx/trusted_worker_manager/enclave\n\nRUN mkdir -p build \\\n  && cd build \\\n  && cmake .. \\\n  && make\n\nWORKDIR /project/avalon/tc/sgx/trusted_worker_manager/enclave_untrusted/enclave_bridge\n\nRUN mkdir -p build \\\n  && cd build \\\n  && cmake .. \\\n  && make\n\nWORKDIR /project/avalon/common/crypto_utils\n\nRUN make && make install\n\nWORKDIR /project/avalon/enclave_manager\n\nRUN echo \"Build and Install avalon enclave manager\" \\\n  && make && make install\n\n"
}