{
  "startTime": 1674254785353,
  "endTime": 1674254786904,
  "originalSmells": [
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 361,
        "lineEnd": 361,
        "columnStart": 7,
        "columnEnd": 30
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 285,
        "lineEnd": 285,
        "columnStart": 9,
        "columnEnd": 20
      }
    },
    {
      "rule": "yumInstallRmVarCacheYum",
      "position": {
        "lineStart": 311,
        "lineEnd": 311,
        "columnStart": 4,
        "columnEnd": 29
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 85,
        "lineEnd": 85,
        "columnStart": 4,
        "columnEnd": 40
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 142,
        "lineEnd": 142,
        "columnStart": 6,
        "columnEnd": 38
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 222,
        "lineEnd": 222,
        "columnStart": 6,
        "columnEnd": 38
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 283,
        "lineEnd": 283,
        "columnStart": 9,
        "columnEnd": 35
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 313,
        "lineEnd": 313,
        "columnStart": 4,
        "columnEnd": 36
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# Copyright 2020 Intel Corporation\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n# ------------------------------------------------------------------------------\n\n# Description:\n#   Builds the environment needed to build Avalon shell.\n#\n#  Configuration (build) parameters\n#  - proxy configuration: https_proxy http_proxy ftp_proxy\n#\n# Build:\n#   $ docker build docker -f docker/Dockerfile -t avalon-shell-dev\n#   if behind a proxy, you might want to add also below options\n#   --build-arg https_proxy=$https_proxy --build-arg http_proxy=$http_proxy --build-arg ftp_proxy=$ftp_proxy\n\n# -------------=== build avalon shell image ===-------------\nARG IMAGE\nFROM $IMAGE as base_image\nARG DISTRO\n\nCOPY ./scripts/install_packages /project/avalon/scripts/\n\nRUN packages=\"wget tar\"; \\\n    pip_packages=\"\"; \\\n    if [ \"$DISTRO\" = \"bionic\" ] ; then \\\n      DEBIAN_FRONTEND=noninteractive \\\n      packages=\"$packages software-properties-common python3-toml python3-colorlog python3-twisted python3-requests\"; \\\n    elif [ \"$DISTRO\" = \"centos\" ] ; then \\\n      packages=\"$packages python3-pip\" \\\n      pip_packages=\"$pip_packages toml colorlog twisted requests\"; \\\n    fi; \\\n    /project/avalon/scripts/install_packages -c install -q \"$packages\" -p \"$pip_packages\"\n\n# Make Python3 default\nRUN ln -sf /usr/bin/python3 /usr/bin/python\n\n\n# -------------=== python build ===-------------\n\n#Build python intermediate docker image\nFROM $IMAGE as python_image\nARG DISTRO\n\nCOPY ./scripts/install_packages /project/avalon/scripts/\n\n# Add necessary packages\nRUN packages=\"ca-certificates pkg-config python3-pip make wget tar\" \\\n    pip_packages=\"setuptools\"; \\\n    if [ \"$DISTRO\" = \"bionic\" ] ; then \\\n      packages=\"$packages python3-dev\"; \\\n    elif [ \"$DISTRO\" = \"centos\" ] ; then \\\n      packages=\"$packages python3-devel\" \\\n      pip_packages=\"$pip_packages wheel\"; \\\n    fi; \\\n    /project/avalon/scripts/install_packages -c install -q \"$packages\" -p \"$pip_packages\"\n\n# -------------=== Build openssl_image ===-------------\n\nFROM $IMAGE as openssl_image\nARG DISTRO\n\nCOPY ./scripts/install_packages /project/avalon/scripts/\n\nRUN packages=\"ca-certificates pkg-config make wget tar\"; \\\n    if [ \"$DISTRO\" = \"centos\" ] ; then \\\n      packages=\"$packages perl gcc\"; \\\n    fi; \\\n    /project/avalon/scripts/install_packages -c install -q \"$packages\"\n\nWORKDIR /tmp\n\n# Build (\"Untrusted\") OpenSSL\nRUN OPENSSL_VER=1.1.1g \\\n && wget https://www.openssl.org/source/openssl-$OPENSSL_VER.tar.gz \\\n && tar -zxf openssl-$OPENSSL_VER.tar.gz \\\n && cd openssl-$OPENSSL_VER/ \\\n && ./config \\\n && THREADS=8 \\\n && make -j$THREADS \\\n && make test \\\n && make install -j$THREADS && rm openssl-$OPENSSL_VER.tar.gz\n\n# Created an empty /usr/local/lib64 dir for bionic, because in case of centos\n# we need to COPY /usr/local/lib64 for openssl artifacts which will fail for bionic\n# as bionic doesn't have this directory.\nRUN if [ \"$DISTRO\" = \"bionic\" ] ; then \\\n      mkdir /usr/local/lib64; \\\n    fi\n\n# -------------=== common/cpp build ===-------------\n\n#Build common/cpp intermediate docker image\nFROM $IMAGE as common_cpp_image\nARG DISTRO\nCOPY ./scripts/install_packages /project/avalon/scripts/\n\nRUN packages=\"pkg-config make cmake wget tar\"; \\\n    if [ \"$DISTRO\" = \"centos\" ] ; then \\\n      packages=\"$packages gcc gcc-c++ yum-utils\"; \\\n    fi; \\\n    /project/avalon/scripts/install_packages -c install -q \"$packages\"\n\n# Copy openssl build artifacts from openssl_image\nCOPY --from=openssl_image /usr/local/ssl /usr/local/ssl\nCOPY --from=openssl_image /usr/local/bin /usr/local/bin\nCOPY --from=openssl_image /usr/local/include /usr/local/include\nCOPY --from=openssl_image /usr/local/lib /usr/local/lib\n# In case of openssl, artifacts are installed at /usr/local/lib64\nCOPY --from=openssl_image /usr/local/lib64 /usr/local/lib64\n\nRUN ldconfig \\\n && ln -s /etc/ssl/certs/* /usr/local/ssl/certs/\n\nRUN mkdir -p /opt/intel/\nWORKDIR /opt/intel/\nRUN SGX_SDK_FILE=sgx_linux_x64_sdk_2.11.100.2.bin \\\n  && wget https://download.01.org/intel-sgx/sgx-linux/2.11/distro/ubuntu18.04-server/$SGX_SDK_FILE \\\n  && chmod +x ./$SGX_SDK_FILE \\\n  && echo \"yes\" | bash ./$SGX_SDK_FILE \\\n  && rm $SGX_SDK_FILE \\\n  && echo \". /opt/intel/sgxsdk/environment\" >> /etc/environment\n\nRUN packages=\"libsgx-dcap-ql-dev libsgx-dcap-quote-verify libsgx-dcap-quote-verify-dev\"; \\\n    if [ \"$DISTRO\" = \"bionic\" ] ;then \\\n      # Add Intel SGX repo to apt sources and install Intel SGX PSW packages\n      echo 'deb [arch=amd64] https://download.01.org/intel-sgx/sgx_repo/ubuntu bionic main' | tee /etc/apt/sources.list.d/intel-sgx.list; \\\n      wget -qO - https://download.01.org/intel-sgx/sgx_repo/ubuntu/intel-sgx-deb.key | apt-key add - ; \\\n      apt-get update; \\\n      /project/avalon/scripts/install_packages -c install -q \"$packages\"; \\\n    elif [ \"$DISTRO\" = \"centos\" ] ; then \\\n      wget https://download.01.org/intel-sgx/sgx-dcap/1.8/linux/distro/centos8.1-server/sgx_rpm_local_repo.tgz; \\\n      tar -xvf sgx_rpm_local_repo.tgz; rm sgx_rpm_local_repo.tgz \\\n      yum-config-manager --add-repo file:///opt/intel/sgx_rpm_local_repo; \\\n      yum --nogpgcheck install -y libsgx-dcap-ql-devel \\\n      libsgx-dcap-quote-verify \\\n      libsgx-dcap-quote-verify-devel; \\\n    fi;\n\nENV TCF_HOME=/project/avalon\n\n# For centos, /usr/local/lib64/pkgconfig/ path be included in PKG_CONFIG_PATH\nENV PKG_CONFIG_PATH=$PKG_CONFIG_PATH:/usr/local/lib64/pkgconfig/\n\nCOPY ./common/cpp /project/avalon/common/cpp\n\nWORKDIR /project/avalon/common/cpp\n\nRUN mkdir -p build \\\n  && cd build \\\n  && cmake .. -DUNTRUSTED_ONLY=1 \\\n  && make\n\n\n# -------------=== common/python build ===-------------\n\n#Build common/python intermediate docker image\nFROM python_image as common_python_image\n\nCOPY VERSION /project/avalon/\nCOPY ./bin /project/avalon/bin\n\nENV TCF_HOME=/project/avalon\n\nCOPY ./common/python /project/avalon/common/python\n\nWORKDIR /project/avalon/common/python\n\nRUN echo \"Building Avalon Common Python\\n\" \\\n && make\n\n\n# -------------=== common/crypto_utils build ===-------------\n\n#Build common/crypto_utils intermediate docker image\nFROM python_image as common_crypto_utils_image\nARG DISTRO\nCOPY ./scripts/install_packages /project/avalon/scripts/\n\nRUN packages=\"swig\"; \\\n    if [ \"$DISTRO\" = \"centos\" ] ; then \\\n      packages=\"$packages make gcc gcc-c++ yum-utils\"; \\\n    fi; \\\n    /project/avalon/scripts/install_packages -c install -q \"$packages\"\n\n# Copy openssl build artifacts from openssl_image\nCOPY --from=openssl_image /usr/local/ssl /usr/local/ssl\nCOPY --from=openssl_image /usr/local/bin /usr/local/bin\nCOPY --from=openssl_image /usr/local/include /usr/local/include\nCOPY --from=openssl_image /usr/local/lib /usr/local/lib\n# In case of openssl, artifacts are installed at /usr/local/lib64\nCOPY --from=openssl_image /usr/local/lib64 /usr/local/lib64\n\nRUN ldconfig \\\n && ln -s /etc/ssl/certs/* /usr/local/ssl/certs/\n\nCOPY --from=common_cpp_image /project/avalon/common/cpp/build /project/avalon/common/cpp/build\nCOPY VERSION /project/avalon/\nCOPY ./bin /project/avalon/bin\nCOPY ./common/cpp /project/avalon/common/cpp\n\nWORKDIR /opt/intel\n\nRUN packages=\"libsgx-dcap-ql-dev libsgx-dcap-quote-verify libsgx-dcap-quote-verify-dev\"; \\\n    if [ \"$DISTRO\" = \"bionic\" ] ;then \\\n      # Add Intel SGX repo to apt sources and install Intel SGX PSW packages\n      echo 'deb [arch=amd64] https://download.01.org/intel-sgx/sgx_repo/ubuntu bionic main' | tee /etc/apt/sources.list.d/intel-sgx.list; \\\n      wget -qO - https://download.01.org/intel-sgx/sgx_repo/ubuntu/intel-sgx-deb.key | apt-key add - ; \\\n      apt-get update; \\\n      /project/avalon/scripts/install_packages -c install -q \"$packages\"; \\\n    elif [ \"$DISTRO\" = \"centos\" ] ; then \\\n      wget https://download.01.org/intel-sgx/sgx-dcap/1.8/linux/distro/centos8.1-server/sgx_rpm_local_repo.tgz; \\\n      tar -xvf sgx_rpm_local_repo.tgz; rm sgx_rpm_local_repo.tgz \\\n      yum-config-manager --add-repo file:///opt/intel/sgx_rpm_local_repo; \\\n      yum --nogpgcheck install -y libsgx-dcap-ql-devel \\\n      libsgx-dcap-quote-verify \\\n      libsgx-dcap-quote-verify-devel; \\\n    fi;\n\nENV TCF_HOME=/project/avalon\n\n# For centos, /usr/local/lib64/pkgconfig/ path be included in PKG_CONFIG_PATH\nENV PKG_CONFIG_PATH=$PKG_CONFIG_PATH:/usr/local/lib64/pkgconfig/\n\nCOPY ./common/crypto_utils /project/avalon/common/crypto_utils\n\nWORKDIR /project/avalon/common/crypto_utils\n\nRUN echo \"Building Avalon Common Crypto Python\\n\" \\\n && make\n\nCOPY ./common/verify_report_utils/ /project/avalon/common/verify_report_utils/\n\nWORKDIR /project/avalon/common/verify_report_utils/ias\n\nRUN echo \"Building Avalon Verify IAS Report Utils\\n\" \\\n && make\n\nWORKDIR /project/avalon/common/verify_report_utils/dcap\n\nRUN echo \"Building Avalon Verify DCAP Report Utils\\n\" \\\n && make\n\n# -------------=== Avalon SDK build ===-------------\n\n#Build Avalon SDK intermediate docker image\nFROM python_image as avalon_sdk_image\n\nCOPY VERSION /project/avalon/\nCOPY ./bin /project/avalon/bin\nCOPY ./sdk /project/avalon/sdk\n\nENV TCF_HOME=/project/avalon\n\nWORKDIR /project/avalon/sdk\n\n#install Avalon SDK  package.\nRUN echo \"Building Avalon SDK\\n\" \\\n && make\n\n\n\n# Build Final image and install dependent modules\nFROM base_image as final_image\nARG DISTRO\nCOPY ./scripts/install_packages /project/avalon/scripts/\n\nRUN if [ \"$DISTRO\" = \"centos\" ] ; then \\\n      dnf remove -y python3-pip; \\\n      packages=\"openssl-devel wget make gcc\"; \\\n      /project/avalon/scripts/install_packages -c install -q \"$packages\"; \\\n      cd /tmp \\\n      && wget https://www.python.org/ftp/python/3.6.9/Python-3.6.9.tgz \\\n      && tar -xvzf Python-3.6.9.tgz \\\n      && cd Python-3.6.9 \\\n      && ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" \\\n      && make \\\n      && make install; rm Python-3.6.9.tgz \\\n    fi\n\nRUN packages=\"git\"; \\\n    pip_packages=\"json-rpc web3 py-solc-x nose2 virtualenv fastapi==0.27.* grpcio-tools==1.21.* uvicorn==0.7.* git+https://github.com/hyperledger/fabric-sdk-py.git nest_asyncio\"; \\\n    if [ \"$DISTRO\" = \"bionic\" ] ; then \\\n      packages=\"python3-pip $packages\"; \\\n    elif [ \"$DISTRO\" = \"centos\" ] ; then \\\n      packages=\"$packages gcc-c++ which\"; \\\n    fi; \\\n    /project/avalon/scripts/install_packages -c install -q \"$packages\" -p \"$pip_packages\"; \\\n    if [ \"$DISTRO\" = \"bionic\" ] ; then \\\n      /project/avalon/scripts/install_packages -c uninstall -q \"python3-pip\"; \\\n    fi\n\nWORKDIR /opt/intel/\nRUN packages=\"wget tar libsgx-dcap-default-qpl libsgx-dcap-quote-verify\"; \\\n  if [ \"$DISTRO\" = \"bionic\" ] ;then \\\n    # Add Intel SGX repo to apt sources and install Intel SGX PSW packages\n    echo 'deb [arch=amd64] https://download.01.org/intel-sgx/sgx_repo/ubuntu bionic main' | tee /etc/apt/sources.list.d/intel-sgx.list; \\\n    wget -qO - https://download.01.org/intel-sgx/sgx_repo/ubuntu/intel-sgx-deb.key | apt-key add - ; \\\n    apt-get update; \\\n    /project/avalon/scripts/install_packages -c install -q \"$packages\"; \\\n  elif [ \"$DISTRO\" = \"centos\" ] ; then \\\n    yum install -y yum-utils; rm -rf /var/cache/yum \\\n    wget https://download.01.org/intel-sgx/sgx-dcap/1.8/linux/distro/centos8.1-server/sgx_rpm_local_repo.tgz; \\\n    tar -xvf sgx_rpm_local_repo.tgz; rm sgx_rpm_local_repo.tgz \\\n    yum-config-manager --add-repo file:///opt/intel/sgx_rpm_local_repo; \\\n    yum --nogpgcheck install -y libsgx-dcap-default-qpl \\\n      libsgx-dcap-ql \\\n      libsgx-dcap-quote-verify; \\\n  fi;\n\nRUN python3 -m solcx.install v0.5.15\n\nARG DISPLAY\nARG XAUTHORITY\n\n#Environment setup\nENV TCF_HOME=/project/avalon\n# Set display, replace value with [IP address of host]:0\nENV DISPLAY=:0\n\nWORKDIR /project/avalon/\n\nCOPY ./tools/run_tests.sh /project/avalon/tools/\nCOPY ./tools/run_proxy_model_tests.sh /project/avalon/tools/\nCOPY ./docker/k8s/propose_requests.sh /project/avalon/docker/k8s/\nCOPY ./config/tcs_config.toml /project/avalon/config/\nCOPY ./tests /project/avalon/tests\nCOPY ./sdk/avalon_sdk/tcf_connector.toml /project/avalon/sdk/avalon_sdk/\nCOPY ./examples/apps/ /project/avalon/examples/apps\nCOPY ./sdk/avalon_sdk/connector/blockchains/ethereum/contracts /project/avalon/sdk/avalon_sdk/connector/blockchains/ethereum/contracts\n\n# Copy Python build artifacts\nCOPY --from=common_python_image /project/avalon/common/python/dist/*.whl dist/\nCOPY --from=common_crypto_utils_image /project/avalon/common/crypto_utils/dist/*.whl dist/\nCOPY --from=common_crypto_utils_image /project/avalon/common/verify_report_utils/ias/dist/*.whl dist/\nCOPY --from=common_crypto_utils_image /project/avalon/common/verify_report_utils/dcap/dist/*.whl dist/\nCOPY --from=avalon_sdk_image /project/avalon/sdk/dist/*.whl dist/\n\n# Configure QPL to use self-signed cert for local PCCS\nCOPY docker/pccs/sgx_default_qcnl.conf /etc/sgx_default_qcnl.conf\n\n# Installing wheel file requires python3-pip package.\n# But python3-pip package will increase size of final docker image.\n# So remove python3-pip package and dependencies after installing wheel file.\nRUN packages=\"\"; \\\n    pip_packages=\"pycryptodomex ecdsa\"; \\\n    if [ \"$DISTRO\" = \"bionic\" ] ; then \\\n      packages=\"$packages python3-pip\"; \\\n   fi; \\\n    /project/avalon/scripts/install_packages -c install -q \"$packages\" -p \"$pip_packages\" \\\n    && echo \"Install Common Python and SDK packages\\n\" \\\n    && pip3 install --no-cache-dir dist/*.whl \\\n    && if [ \"$DISTRO\" = \"bionic\" ] ; then \\\n         echo \"Remove unused packages from image\\n\" \\\n         /project/avalon/scripts/install_packages -c uninstall -q \"$packages\"; \\\n       fi\n\n"
}