{
  "startTime": 1674253373438,
  "endTime": 1674253374289,
  "originalSmells": [
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 22,
        "lineEnd": 22,
        "columnStart": 4,
        "columnEnd": 58
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 30,
        "lineEnd": 30,
        "columnStart": 4,
        "columnEnd": 30
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 49,
        "lineEnd": 49,
        "columnStart": 4,
        "columnEnd": 40
      }
    },
    {
      "rule": "apkAddUseNoCache",
      "position": {
        "lineStart": 14,
        "lineEnd": 14,
        "columnStart": 4,
        "columnEnd": 71
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# We need to use the older, more stable v18 here because of\n# https://github.com/docker-library/docker/issues/170\nFROM docker:20.10.3-dind\n\nARG FABRIC_VERSION=2.2.0\nARG CA_VERSION=1.4.9\nARG COUCH_VERSION_FABRIC=0.4\nARG COUCH_VERSION=3.1.1\n\nWORKDIR /\n\nRUN apk update\n\n# Install dependencies of Docker Compose\nRUN apk add --no-cache py-pip python3-dev libffi-dev openssl-dev gcc libc-dev make\n\n# Install python/pip - We need this because DinD 18.x has Python 2\n# And we cannot upgrade to DinD 19 because of\n# https://github.com/docker-library/docker/issues/170\nENV PYTHONUNBUFFERED=1\nRUN apk add --update --no-cache python3 && ln -sf python3 /usr/bin/python\nRUN python3 -m ensurepip\nRUN pip3 install --no-cache-dir --no-cache --upgrade \"pip>=21\" setuptools\n\n# Without this the docker-compose installation crashes, complaining about\n# a lack of rust compiler...\n# RUN pip install setuptools_rust\nENV CRYPTOGRAPHY_DONT_BUILD_RUST=1\n\n# Install Docker Compose which is a dependency of Fabric Samples\nRUN pip install --no-cache-dir docker-compose\n\n# Need git to clone the sources of the Fabric Samples repository from GitHub\nRUN apk add --no-cache git\n\n# Fabric Samples needs bash, sh is not good enough here\nRUN apk add --no-cache bash\n\n# Need curl to download the Fabric bootstrap script\nRUN apk add --no-cache curl\n\n# The file binary is used to inspect exectubles when debugging container image issues\nRUN apk add --no-cache file\n\n# Need NodeJS tooling for the Typescript contracts\nRUN apk add --no-cache npm nodejs\n\n# Download and setup path variables for Go\nRUN wget https://golang.org/dl/go1.15.5.linux-amd64.tar.gz\nRUN tar -xvf go1.15.5.linux-amd64.tar.gz && rm go1.15.5.linux-amd64.tar.gz\nRUN mv go /usr/local\nENV GOROOT=/usr/local/go\nENV GOPATH=/usr/local/go\nENV PATH=$PATH:$GOPATH/bin\n\n# Needed because the Fabric binaries need the GNU libc dynamic linker to be executed\n# and alpine does not have that by default\n# @see https://askubuntu.com/a/1035037/1008695\n# @see https://github.com/gliderlabs/docker-alpine/issues/219#issuecomment-254741346\nRUN apk add --no-cache libc6-compat\n\nENV CACTUS_CFG_PATH=/etc/hyperledger/cactus\nRUN mkdir -p $CACTUS_CFG_PATH\n# OpenSSH - need to have it so we can shell in and install/instantiate contracts\nRUN apk add --no-cache openssh augeas\n\n# Configure the OpenSSH server we just installed\nRUN augtool 'set /files/etc/ssh/sshd_config/AuthorizedKeysFile \".ssh/authorized_keys /etc/authorized_keys/%u\"'\nRUN augtool 'set /files/etc/ssh/sshd_config/PermitRootLogin yes'\nRUN augtool 'set /files/etc/ssh/sshd_config/PasswordAuthentication no'\nRUN augtool 'set /files/etc/ssh/sshd_config/PermitEmptyPasswords no'\nRUN augtool 'set /files/etc/ssh/sshd_config/Port 22'\nRUN augtool 'set /files/etc/ssh/sshd_config/LogLevel DEBUG2'\nRUN augtool 'set /files/etc/ssh/sshd_config/LoginGraceTime 10'\n# Create the server's key - without this sshd will refuse to start\nRUN ssh-keygen -A\n\n# Generate an RSA keypair on the fly to avoid having to hardcode one in the image\n# which technically does not pose a security threat since this is only a development\n# image, but we do it like this anyway.\nRUN mkdir ~/.ssh\nRUN chmod 700 ~/.ssh/\nRUN touch ~/.ssh/authorized_keys\nRUN [\"/bin/bash\", \"-c\", \"ssh-keygen -t rsa -N '' -f $CACTUS_CFG_PATH/fabric-aio-image <<< y\"]\nRUN mv $CACTUS_CFG_PATH/fabric-aio-image $CACTUS_CFG_PATH/fabric-aio-image.key\nRUN cp $CACTUS_CFG_PATH/fabric-aio-image.pub ~/.ssh/authorized_keys\n\n# OpenSSH Server (needed for chaincode deployment )\nEXPOSE 22\n\n# supervisord web ui/dashboard\nEXPOSE 9001\n\n# peer1.org2.example.com\nEXPOSE 10051\n\n# peer0.org1.example.com\nEXPOSE 7051\n\n# peer0.org2.example.com\nEXPOSE 9051\n\n# peer1.org1.example.com\nEXPOSE 8051\n\n# orderer.example.com\nEXPOSE 7050\n\n# ca_peerOrg1\nEXPOSE 7054\n\n# ca_peerOrg2\nEXPOSE 8054\n\n# couchdb0, couchdb1, couchdb2, couchdb3\nEXPOSE 5984 6984 7984 8984\n\nRUN apk add --no-cache util-linux\n\n# FIXME - make it so that SSHd does not need this to work\nRUN echo \"root:$(uuidgen)\" | chpasswd\n\nRUN curl -sSL https://raw.githubusercontent.com/cloudflare/semver_bash/c1133faf0efe17767b654b213f212c326df73fa3/semver.sh > /semver.sh\nRUN chmod +x /semver.sh\n\n# jq is needed by the /download-frozen-image-v2.sh script to pre-fetch docker images without docker.\nRUN apk add --no-cache jq\n\n# Get the utility script that can pre-fetch the Fabric docker images without\n# a functioning Docker daemon available which we do not have at image build\n# time so have to resort to manually get the Fabric images insteadd of just saying\n# \"docker pull hyperledger/fabric...\" etc.\n# The reason to jump trough these hoops is to speed up the boot time of the\n# container which won't have to download the images at container startup since\n# they'll have been cached already at build time.\nRUN curl -sSL https://raw.githubusercontent.com/moby/moby/dedf8528a51c6db40686ed6676e9486d1ed5f9c0/contrib/download-frozen-image-v2.sh > /download-frozen-image-v2.sh\nRUN chmod +x /download-frozen-image-v2.sh\n\nRUN mkdir -p /etc/hyperledger/fabric/fabric-peer/\nRUN mkdir -p /etc/hyperledger/fabric/fabric-orderer/\nRUN mkdir -p /etc/hyperledger/fabric/fabric-ccenv/\nRUN mkdir -p /etc/hyperledger/fabric/fabric-nodeenv/\nRUN mkdir -p /etc/hyperledger/fabric/fabric-tools/\nRUN mkdir -p /etc/hyperledger/fabric/fabric-baseos/\nRUN mkdir -p /etc/hyperledger/fabric/fabric-ca/\nRUN mkdir -p /etc/hyperledger/fabric/fabric-couchdb/\nRUN mkdir -p /etc/couchdb/\n\nRUN /download-frozen-image-v2.sh /etc/hyperledger/fabric/fabric-peer/ hyperledger/fabric-peer:${FABRIC_VERSION}\nRUN /download-frozen-image-v2.sh /etc/hyperledger/fabric/fabric-orderer/ hyperledger/fabric-orderer:${FABRIC_VERSION}\nRUN /download-frozen-image-v2.sh /etc/hyperledger/fabric/fabric-ccenv/ hyperledger/fabric-ccenv:${FABRIC_VERSION}\nRUN /download-frozen-image-v2.sh /etc/hyperledger/fabric/fabric-nodeenv/ hyperledger/fabric-nodeenv:${FABRIC_VERSION}\nRUN /download-frozen-image-v2.sh /etc/hyperledger/fabric/fabric-tools/ hyperledger/fabric-tools:${FABRIC_VERSION}\nRUN /download-frozen-image-v2.sh /etc/hyperledger/fabric/fabric-baseos/ hyperledger/fabric-baseos:${FABRIC_VERSION}\nRUN /download-frozen-image-v2.sh /etc/hyperledger/fabric/fabric-ca/ hyperledger/fabric-ca:${CA_VERSION}\nRUN /download-frozen-image-v2.sh /etc/hyperledger/fabric/fabric-couchdb/ hyperledger/fabric-couchdb:${COUCH_VERSION_FABRIC}\nRUN /download-frozen-image-v2.sh /etc/couchdb/ couchdb:${COUCH_VERSION}\n\n# Download and execute the Fabric bootstrap script, but instruct it with the -d\n# flag to avoid pulling docker images because during the build phase of this image\n# there is no docker daemon running yet\nRUN curl -sSL https://raw.githubusercontent.com/hyperledger/fabric/54e27a66812845985c5c067d7f5244a05c6e719b/scripts/bootstrap.sh > /bootstrap.sh\nRUN chmod +x bootstrap.sh\n# Run the bootstrap here so that at least we can pre-fetch the git clone and the binary downloads resulting in\n# faster container startup speed since these steps will not have to be done, only the docker image pulls.\nRUN /bootstrap.sh ${FABRIC_VERSION} ${CA_VERSION} -d\n\n# Install supervisord because we need to run the docker daemon and also the fabric network\n# meaning that we have multiple processes to run.\nRUN apk add --no-cache supervisor\n\nCOPY supervisord.conf /etc/supervisord.conf\nCOPY run-fabric-network.sh /\nCOPY healthcheck.sh /\n\nENV FABRIC_CFG_PATH=/fabric-samples/config/\nENV CORE_PEER_TLS_ENABLED=true\nENV CORE_PEER_LOCALMSPID=\"Org1MSP\"\nENV CORE_PEER_TLS_ROOTCERT_FILE=/fabric-samples/test-network/organizations/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/tls/ca.crt\nENV CORE_PEER_MSPCONFIGPATH=/fabric-samples/test-network/organizations/peerOrganizations/org1.example.com/users/Admin@org1.example.com/msp\nENV CORE_PEER_ADDRESS=localhost:7051\nENV COMPOSE_PROJECT_NAME=cactusfabrictestnetwork\nENV FABRIC_VERSION=${FABRIC_VERSION}\nENV CA_VERSION=${CA_VERSION}\nENV COUCH_VERSION_FABRIC=${COUCH_VERSION_FABRIC}\nENV COUCH_VERSION=${COUCH_VERSION}\n\n# Extend the parent image's entrypoint\n# https://superuser.com/questions/1459466/can-i-add-an-additional-docker-entrypoint-script\nENTRYPOINT [\"/usr/bin/supervisord\"]\nCMD [\"--configuration\", \"/etc/supervisord.conf\", \"--nodaemon\"]\n\n# We consider the container healthy once the default example asset-transfer contract has been deployed\n# and is responsive to queries as well\nHEALTHCHECK --interval=1s --timeout=5s --start-period=60s --retries=300 CMD ./healthcheck.sh\n"
}