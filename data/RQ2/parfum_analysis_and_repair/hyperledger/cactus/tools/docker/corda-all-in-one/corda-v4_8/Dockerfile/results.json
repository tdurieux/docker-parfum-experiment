{
  "startTime": 1674248975014,
  "endTime": 1674248975925,
  "originalSmells": [
    {
      "rule": "apkAddUseNoCache",
      "position": {
        "lineStart": 13,
        "lineEnd": 13,
        "columnStart": 4,
        "columnEnd": 71
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM docker:20.10.2-dind\n\n# cordaVersion=4.8.5\n# cordaCoreVersion=4.8.5\nARG SAMPLES_KOTLIN_SHA=1504878ce446555bd861bbe4dd3d1154e905a07f\nARG SAMPLES_KOTLIN_CORDAPP_SUB_DIR_PATH=\"./Advanced/obligation-cordapp/\"\nARG CORDA_TOOLS_SHELL_CLI_VERSION=4.8\n\nWORKDIR /\n\nRUN apk update\n\n# Install dependencies of Docker Compose\nRUN apk add --no-cache py-pip python3-dev libffi-dev openssl-dev gcc libc-dev make\n\n# Install git so we can check out the kotlin-samples repo of Corda\nRUN apk add --no-cache git\n\n# Fabric Samples needs bash, sh is not good enough here\nRUN apk add --no-cache bash\n\n# Need curl to run healthchecks\nRUN apk add --no-cache curl\n\n# The file binary is used to inspect exectubles when debugging container image issues\nRUN apk add --no-cache file\n\nRUN apk add --no-cache openjdk8\n\n# Need gradle to execute the corda sample app setup commands\nRUN apk add --no-cache gradle\n\nENV CACTUS_CFG_PATH=/etc/hyperledger/cactus\nRUN mkdir -p $CACTUS_CFG_PATH\n\n# OpenSSH - need to have it so we can shell in and install/instantiate contracts and troubleshoot\nRUN apk add --no-cache openssh augeas\n\n# Configure the OpenSSH server we just installed\nRUN augtool 'set /files/etc/ssh/sshd_config/AuthorizedKeysFile \".ssh/authorized_keys /etc/authorized_keys/%u\"'\nRUN augtool 'set /files/etc/ssh/sshd_config/PermitRootLogin yes'\nRUN augtool 'set /files/etc/ssh/sshd_config/PasswordAuthentication yes'\nRUN augtool 'set /files/etc/ssh/sshd_config/PermitEmptyPasswords yes'\nRUN augtool 'set /files/etc/ssh/sshd_config/Port 22'\nRUN augtool 'set /files/etc/ssh/sshd_config/LogLevel DEBUG2'\nRUN augtool 'set /files/etc/ssh/sshd_config/LoginGraceTime 10'\n# Create the server's key - without this sshd will refuse to start\nRUN ssh-keygen -A\n\n# Generate an RSA keypair on the fly to avoid having to hardcode one in the image\n# which technically does not pose a security threat since this is only a development\n# image, but we do it like this anyway.\nRUN mkdir ~/.ssh\nRUN chmod 700 ~/.ssh/\nRUN touch ~/.ssh/authorized_keys\nRUN [\"/bin/bash\", \"-c\", \"ssh-keygen -t rsa -N '' -f $CACTUS_CFG_PATH/corda-aio-image <<< y\"]\nRUN mv $CACTUS_CFG_PATH/corda-aio-image $CACTUS_CFG_PATH/corda-aio-image.key\nRUN cp $CACTUS_CFG_PATH/corda-aio-image.pub ~/.ssh/authorized_keys\n\n# RUN tr -dc A-Za-z0-9 </dev/urandom | head -c 20 > /root-password.txt\n# RUN cat /root-password.txt | chpasswd\nRUN echo \"root:root\" | chpasswd\n\nRUN curl https://software.r3.com/artifactory/corda-releases/net/corda/corda-tools-shell-cli/${CORDA_TOOLS_SHELL_CLI_VERSION}/corda-tools-shell-cli-${CORDA_TOOLS_SHELL_CLI_VERSION}-all.jar --output /corda-tools-shell-cli-all.jar\n# This is what makes the \"corda-shell\" alias avaialble on the terminal\nRUN java -jar /corda-tools-shell-cli-all.jar install-shell-extensions\n\nRUN git clone https://github.com/corda/samples-kotlin.git\nWORKDIR /samples-kotlin\nRUN git checkout ${SAMPLES_KOTLIN_SHA}\n\nWORKDIR /samples-kotlin/${SAMPLES_KOTLIN_CORDAPP_SUB_DIR_PATH}\n\n# Install supervisord because we need to run the docker daemon and also the corda network\n# meaning that we have multiple processes to run.\nRUN apk add --no-cache supervisor\n\nRUN ./gradlew build deployNodes\n\n# OpenSSH server\nEXPOSE 22\n\n# supervisord web ui/dashboard\nEXPOSE 9001\n\n# Notary RPC\nEXPOSE 10003\n\n# Party A RPC\nEXPOSE 10008\n\n# Party B RPC\nEXPOSE 10011\n\n# Party C RPC\nEXPOSE 10014\n\n# Corda IOU Web GUIs for Node A,B,C\n# EXPOSE 10009 10012 10015\n\n# Jolokia for Party A,B,C and Notary\nEXPOSE 7005 7006 7007 7008\n\n# P2P messaging (localhost bound), RPC, admin RPC\n# EXPOSE 10002 10003 10103\n# EXPOSE 10007 10008 10108\n# EXPOSE 10010 10011 10111\n# EXPOSE 10013 10014 10114\n\nCOPY supervisord.conf /etc/supervisord.conf\nCOPY run-party-a-server.sh /\nCOPY run-party-b-server.sh /\nCOPY run-party-c-server.sh /\nCOPY run-party-a-node.sh /\nCOPY run-party-b-node.sh /\nCOPY run-party-c-node.sh /\nCOPY run-notary-node.sh /\nCOPY healthcheck.sh /\n\n# By default we only run the absolute minimum which is a single party's node.\n# For more complex tests everything else can also be enabled via the env vars\n# below so that if needed there is 2 parties, a notary and a dedicated web server\n# for all 3 of those nodes.\n# \"Web server\" => the same one as in the official corda samples-kotlin repo\nENV PARTY_A_NODE_ENABLED=\"true\"\nENV PARTY_A_WEB_SRV_ENABLED=\"false\"\n\nENV PARTY_B_NODE_ENABLED=\"true\"\nENV PARTY_B_WEB_SRV_ENABLED=\"false\"\n\nENV PARTY_C_NODE_ENABLED=\"true\"\nENV PARTY_C_WEB_SRV_ENABLED=\"false\"\n\nENV NOTARY_NODE_ENABLED=\"true\"\n\n# Extend the parent image's entrypoint\n# https://superuser.com/questions/1459466/can-i-add-an-additional-docker-entrypoint-script\nENTRYPOINT [\"/usr/bin/supervisord\"]\nCMD [\"--configuration\", \"/etc/supervisord.conf\", \"--nodaemon\"]\n\n# We consider the container healthy once the default example fabcar contract has been deployed\n# and is responsive to queries as well\nHEALTHCHECK --interval=1s --timeout=5s --start-period=5s --retries=180 CMD /healthcheck.sh\n"
}