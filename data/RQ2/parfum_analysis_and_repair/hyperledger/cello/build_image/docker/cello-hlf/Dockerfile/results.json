{
  "startTime": 1674255065183,
  "endTime": 1674255066397,
  "originalSmells": [
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 86,
        "lineEnd": 86,
        "columnStart": 11,
        "columnEnd": 35
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 87,
        "lineEnd": 87,
        "columnStart": 11,
        "columnEnd": 33
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 82,
        "lineEnd": 82,
        "columnStart": 11,
        "columnEnd": 73
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 83,
        "lineEnd": 83,
        "columnStart": 11,
        "columnEnd": 97
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 84,
        "lineEnd": 84,
        "columnStart": 11,
        "columnEnd": 41
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 85,
        "lineEnd": 85,
        "columnStart": 11,
        "columnEnd": 47
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 82,
        "lineEnd": 82,
        "columnStart": 11,
        "columnEnd": 73
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 83,
        "lineEnd": 83,
        "columnStart": 11,
        "columnEnd": 97
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 84,
        "lineEnd": 84,
        "columnStart": 11,
        "columnEnd": 41
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 85,
        "lineEnd": 85,
        "columnStart": 11,
        "columnEnd": 47
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# https://github.com/yeasy/docker-hyperledger-fabric\n#\n# Dockerfile for Hyperledger fabric all-in-one development and experiments, including:\n# * fabric-peer\n# * fabric-orderer\n# * fabric-ca\n# * cryptogen\n# * configtxgen\n# * configtxlator\n# * gotools\n\n# If you only need quickly deploy a fabric network, please see\n# * yeasy/hyperledger-fabric-peer\n# * yeasy/hyperledger-fabric-orderer\n# * yeasy/hyperledger-fabric-ca\n\n# Workdir is set to $GOPATH/src/github.com/hyperledger/fabric\n# Data is stored under /var/hyperledger/production\n\nFROM golang:1.14\nLABEL version=2.2.0\n\n# Orderer, peer, ca, operation api\nEXPOSE 7050 7051 7054 8443 9443\n\nENV DEBIAN_FRONTEND noninteractive\n\n# Only useful for this Dockerfile\nENV FABRIC_ROOT=$GOPATH/src/github.com/hyperledger/fabric \\\n    FABRIC_CA_ROOT=$GOPATH/src/github.com/hyperledger/fabric-ca\n\n# BASE_VERSION is used in metadata.Version as major version\nENV BASE_VERSION=2.2.0\n\n# PROJECT_VERSION is required in core.yaml for fabric-baseos and fabric-ccenv\nENV PROJECT_VERSION=2.2.0\nENV HLF_CA_VERSION=1.4.8\n\n# generic environment (core.yaml) for builder and runtime: e.g., builder: $(DOCKER_NS)/fabric-ccenv:$(TWO_DIGIT_VERSION), golang, java, node\nENV DOCKER_NS=hyperledger\nENV TWO_DIGIT_VERSION=2.2\n\nENV BASE_DOCKER_NS=hyperledger\nENV LD_FLAGS=\"-X github.com/hyperledger/fabric/common/metadata.Version=${PROJECT_VERSION} \\\n              -X github.com/hyperledger/fabric/common/metadata.BaseDockerLabel=org.hyperledger.fabric \\\n              -X github.com/hyperledger/fabric/common/metadata.DockerNamespace=hyperledger \\\n              -X github.com/hyperledger/fabric/common/metadata.BaseDockerNamespace=hyperledger\"\n\n# -X github.com/hyperledger/fabric/common/metadata.Experimental=true \\\n# -linkmode external -extldflags '-static -lpthread'\"\n\n# peer envs. DONOT combine in one line as the former variable won't work on-the-fly\nENV FABRIC_CFG_PATH=/etc/hyperledger/fabric\n\n# peer env\nENV CORE_PEER_MSPCONFIGPATH=$FABRIC_CFG_PATH/msp \\\n    FABRIC_LOGGING_SPEC=DEBUG\n\n# orderer env\nENV ORDERER_GENERAL_LOCALMSPDIR=$FABRIC_CFG_PATH/msp \\\n    ORDERER_GENERAL_LISTENADDRESS=0.0.0.0 \\\n    ORDERER_GENERAL_GENESISPROFILE=TwoOrgsOrdererGenesis\n\n# ca env. ca-server and ca-client will check the following env in order, to get the home cfg path\nENV FABRIC_CA_HOME=/etc/hyperledger/fabric-ca-server \\\n    FABRIC_CA_SERVER_HOME=/etc/hyperledger/fabric-ca-server \\\n    FABRIC_CA_CLIENT_HOME=/root/.fabric-ca-client \\\n    CA_CFG_PATH=/etc/hyperledger/fabric-ca\n\nRUN mkdir -p /var/hyperledger/production \\\n        $GOPATH/src/github.com/hyperledger \\\n        $FABRIC_CFG_PATH \\\n        $FABRIC_CFG_PATH/crypto-config \\\n        $FABRIC_CA_SERVER_HOME \\\n        $FABRIC_CA_CLIENT_HOME \\\n        $CA_CFG_PATH \\\n        /chaincode/input \\\n        /chaincode/output \\\n        /var/hyperledger/fabric-ca-server\n\n# Install development dependencies\nRUN apt-get update \\\n        && apt-get install --no-install-recommends -y apt-utils python3-dev docker-compose-plugin \\\n        && apt-get install --no-install-recommends -y libsnappy-dev zlib1g-dev libbz2-dev libyaml-dev libltdl-dev libtool \\\n        && apt-get install --no-install-recommends -y python3-pip \\\n        && apt-get install --no-install-recommends -y vim tree jq unzip \\\n        && pip3 install --no-cache-dir behave nose \\\n        && pip3 install --no-cache-dir pyinotify \\\n        && rm -rf /var/cache/apt && rm -rf /var/lib/apt/lists/*;\n\n# Install yq to update config for fabric-ca\nRUN wget -O /go/bin/yq https://github.com/mikefarah/yq/releases/download/2.4.1/yq_linux_amd64 \\\n        && chmod a+x /go/bin/yq\n\n# install gotools\nRUN go get github.com/golang/protobuf/protoc-gen-go \\\n        && go get github.com/maxbrunsfeld/counterfeiter \\\n        && go get github.com/axw/gocov/... \\\n        && go get github.com/AlekSi/gocov-xml \\\n        && go get golang.org/x/tools/cmd/goimports \\\n        && go get golang.org/x/lint/golint \\\n        && go get github.com/estesp/manifest-tool/... \\\n        && go get github.com/client9/misspell/cmd/misspell \\\n        && go get github.com/onsi/ginkgo/ginkgo\n\n# Clone the Hyperledger Fabric code and cp sample config files\nRUN cd $GOPATH/src/github.com/hyperledger \\\n        && wget https://github.com/hyperledger/fabric/archive/v${PROJECT_VERSION}.zip \\\n        && unzip v${PROJECT_VERSION}.zip \\\n        && rm v${PROJECT_VERSION}.zip \\\n        && mv fabric-${PROJECT_VERSION} fabric \\\n        && echo \"*                hard    nofile          65536\" >> /etc/security/limits.conf \\\n        && echo \"*                soft    nofile          8192\" >> /etc/security/limits.conf \\\n        && cp -r $FABRIC_ROOT/sampleconfig/* $FABRIC_CFG_PATH/\n\n# Add external fabric chaincode dependencies\nRUN go get github.com/hyperledger/fabric-chaincode-go/shim \\\n        && go get github.com/hyperledger/fabric-protos-go/peer\n\n# Install configtxgen, cryptogen, configtxlator, discover and idemixgen\nRUN cd $FABRIC_ROOT/ \\\n        && CGO_CFLAGS=\" \" go install -tags \"\" github.com/hyperledger/fabric/cmd/configtxgen \\\n        && CGO_CFLAGS=\" \" go install -tags \"\" github.com/hyperledger/fabric/cmd/cryptogen \\\n        && CGO_CFLAGS=\" \" go install -tags \"\" github.com/hyperledger/fabric/cmd/configtxlator \\\n        && CGO_CFLAGS=\" \" go install -tags \"\" -ldflags \"-X github.com/hyperledger/fabric/cmd/discover/metadata.Version=${PROJECT_VERSION}\" github.com/hyperledger/fabric/cmd/discover \\\n        && CGO_CFLAGS=\" \" go install -tags \"\" github.com/hyperledger/fabric/cmd/idemixgen\n\n# Install fabric peer\nRUN CGO_CFLAGS=\" \" go install -tags \"\" -ldflags \"$LD_FLAGS\" github.com/hyperledger/fabric/cmd/peer \\\n        && go clean\n\n# Install fabric orderer\nRUN CGO_CFLAGS=\" \" go install -tags \"\" -ldflags \"$LD_FLAGS\" github.com/hyperledger/fabric/cmd/orderer \\\n        && go clean\n\n#ADD crypto-config $FABRIC_CFG_PATH/crypto-config\n\n# Install fabric-ca\nRUN cd $GOPATH/src/github.com/hyperledger \\\n        && wget https://github.com/hyperledger/fabric-ca/archive/v${HLF_CA_VERSION}.zip \\\n        && unzip v${HLF_CA_VERSION}.zip \\\n        && rm v${HLF_CA_VERSION}.zip \\\n        && mv fabric-ca-${HLF_CA_VERSION} fabric-ca \\\n# This will install fabric-ca-server and fabric-ca-client into $GOPATH/bin/\n        && go install -ldflags \"-X github.com/hyperledger/fabric-ca/lib/metadata.Version=$PROJECT_VERSION -linkmode external -extldflags '-static -lpthread'\" github.com/hyperledger/fabric-ca/cmd/... \\\n# Copy example ca and key files\n#&& cp $FABRIC_CA_ROOT/images/fabric-ca/payload/*.pem $FABRIC_CA_HOME/ \\\n        && go clean\n\n# This is useful to debug local code with mapping inside\nVOLUME $GOPATH/src/github.com/hyperledger\n# The data and config dir, can map external one with -v\nVOLUME /var/hyperledger\nVOLUME $FABRIC_CFG_PATH\nVOLUME $FABRIC_CA_SERVER_HOME\nVOLUME $FABRIC_CA_CLIENT_HOME\n\n# Useful scripts for quickly compiling local code\nADD scripts/ /tmp/\n\n# Remove the go pkg files in case polluting debugging env\nRUN bash /tmp/clean_pkg.sh\n\n# Temporarily fix the `go list` complain problem, which is required in chaincode packaging, see core/chaincode/platforms/golang/platform.go#GetDepoymentPayload\nENV GOROOT=/usr/local/go\n\nWORKDIR $FABRIC_ROOT\n\n# This is only a workaround for current hard-coded problem when using as fabric-baseimage.\nRUN ln -s $GOPATH /opt/gopath\n\nLABEL org.hyperledger.fabric.version=${PROJECT_VERSION}\n"
}