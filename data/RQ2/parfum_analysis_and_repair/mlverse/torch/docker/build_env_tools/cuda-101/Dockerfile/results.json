{
  "startTime": 1674249556731,
  "endTime": 1674249558676,
  "originalSmells": [
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 31,
        "lineEnd": 37,
        "columnStart": 5,
        "columnEnd": 141
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 28,
        "lineEnd": 28,
        "columnStart": 5,
        "columnEnd": 39
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 120,
        "lineEnd": 120,
        "columnStart": 5,
        "columnEnd": 46
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 167,
        "lineEnd": 167,
        "columnStart": 22,
        "columnEnd": 65
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 77,
        "lineEnd": 78,
        "columnStart": 22,
        "columnEnd": 68
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 150,
        "lineEnd": 152,
        "columnStart": 26,
        "columnEnd": 51
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 167,
        "lineEnd": 167,
        "columnStart": 22,
        "columnEnd": 65
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM nvidia/cuda:10.1-cudnn7-devel-ubuntu18.04\n\nARG ROOT_PASSWD\nARG PASSWD\n\n# Set up R(Reference rocker/r-ver)\nARG R_VERSION_FULL=4.1.0\nARG R_VERSION=4\nENV CRAN=${CRAN:-https://cran.rstudio.com}\nENV LC_ALL=en_US.UTF-8\nENV LANG=en_US.UTF-8\nENV TERM=xterm\nENV DEBIAN_FRONTEND=noninteractive  \n\nRUN apt-get update && apt-get install -y --no-install-recommends bash-completion libbz2-dev \\\n    ca-certificates file fonts-texgyre g++ gfortran gsfonts libblas-dev libbz2-1.0 libcurl4 \\\n    libcurl4-openssl-dev libjpeg-dev liblzma-dev libopenblas-dev libpangocairo-1.0-0 libpcre2-dev \\\n    libpcre3 libpng16-16 libreadline-dev libtiff5 liblzma5 locales make unzip wget xorg-dev zip zlib1g libpq5 \\\n  && BUILDDEPS=\"curl default-jdk libbz2-dev libcairo2-dev libcurl4-openssl-dev libpango1.0-dev libjpeg-dev \\\n    libicu-dev libpcre3-dev libpng-dev libreadline-dev libtiff5-dev liblzma-dev libx11-dev libxt-dev perl \\\n    tcl8.6-dev tk8.6-dev texinfo texlive-extra-utils texlive-fonts-recommended texlive-fonts-extra \\\n    texlive-latex-recommended x11proto-core-dev xauth xfonts-base xvfb zlib1g-dev\" \\\n  && echo \"en_US.UTF-8 UTF-8\" >> /etc/locale.gen && locale-gen en_US.utf8 && /usr/sbin/update-locale LANG=en_US.UTF-8 \\\n  && apt-get install -y --no-install-recommends $BUILDDEPS \\\n  && cd tmp/ \\\n## Download source code\n  &&  wget https://cran.r-project.org/src/base/R-${R_VERSION}/R-${R_VERSION_FULL}.tar.gz \\\n## Extract source code\n  && tar -xf R-${R_VERSION_FULL}.tar.gz \\\n  && cd R-${R_VERSION_FULL} \\\n## Set compiler flags \\\n  && R_PAPERSIZE=letter \\\n    R_BATCHSAVE=\"--no-save --no-restore\" R_BROWSER=xdg-open PAGER=/usr/bin/pager PERL=/usr/bin/perl R_UNZIPCMD=/usr/bin/unzip \\\n    R_ZIPCMD=/usr/bin/zip R_PRINTCMD=/usr/bin/lpr LIBnn=lib AWK=/usr/bin/awk \\\n    CFLAGS=\"-g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g\" \\\n    CXXFLAGS=\"-g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g\" \\\n\n    ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" \\\n\n\n\n\n## Configure options\n    --enable-R-shlib --enable-memory-profiling --with-readline --with-blas --with-tcltk --disable-nls --with-recommended-packages \\\n## Build and install\n  && make \\\n  && make install \\\n## Add a library directory (for user-installed packages)\n  && mkdir -p /usr/local/lib/R/site-library \\\n  && chown root:staff /usr/local/lib/R/site-library \\\n  && chmod g+ws /usr/local/lib/R/site-library \\\n## Fix library path\n  && sed -i '/^R_LIBS_USER=.*$/d' /usr/local/lib/R/etc/Renviron \\\n  && echo \"R_LIBS_USER=\\${R_LIBS_USER-'/usr/local/lib/R/site-library'}\" >> /usr/local/lib/R/etc/Renviron \\\n  && echo \"R_LIBS=\\${R_LIBS-'/usr/local/lib/R/site-library:/usr/local/lib/R/library:/usr/lib/R/library'}\" >> /usr/local/lib/R/etc/Renviron \\\n## Set configured CRAN mirror\n  && if [ -z \"$BUILD_DATE\" ]; then MRAN=$CRAN; \\\n    else MRAN=https://mran.microsoft.com/snapshot/${BUILD_DATE}; fi \\\n  && echo MRAN=$MRAN >> /etc/environment \\\n  && echo \"options(repos = c(CRAN='$MRAN'), download.file.method = 'libcurl')\" >> /usr/local/lib/R/etc/Rprofile.site \\\n## Use littler installation scripts\n  && Rscript -e \"install.packages(c('littler', 'docopt'), repo = '$CRAN')\" \\\n  && ln -s /usr/local/lib/R/site-library/littler/examples/install2.r /usr/local/bin/install2.r \\\n  && ln -s /usr/local/lib/R/site-library/littler/examples/installGithub.r /usr/local/bin/installGithub.r \\\n  && ln -s /usr/local/lib/R/site-library/littler/bin/r /usr/local/bin/r \\\n## Clean up from R source install\n  && cd / \\\n  && rm -rf /tmp/* \\\n  && rm -rf /var/lib/apt/lists/* && rm R-${R_VERSION_FULL}.tar.gz\n\n# Set up RStudio(Reference rocker/rstudio)\nARG RSTUDIO_VERSION\nENV RSTUDIO_VERSION=${RSTUDIO_VERSION:-1.4.1717}\nARG S6_VERSION\nARG PANDOC_TEMPLATES_VERSION\nENV S6_VERSION=${S6_VERSION:-v1.21.7.0}\nENV S6_BEHAVIOUR_IF_STAGE2_FAILS=2\nENV PATH=/usr/lib/rstudio-server/bin:$PATH\nENV PANDOC_TEMPLATES_VERSION=${PANDOC_TEMPLATES_VERSION:-2.9}\n\n## Download and install RStudio server & dependencies\n## Attempts to get detect latest version, otherwise falls back to version given in $VER\n## Symlink pandoc, pandoc-citeproc so they are available system-wide\nRUN apt-get update && apt-get install -y --no-install-recommends git libapparmor1 libclang-dev libedit2 libssl-dev \\\n  lsb-release multiarch-support psmisc procps python-setuptools sudo \\\n  && if [ -z \"$RSTUDIO_VERSION\" ]; \\\n    then RSTUDIO_URL=\"https://www.rstudio.org/download/latest/stable/server/bionic/rstudio-server-latest-amd64.deb\"; \\\n    else RSTUDIO_URL=\"http://download2.rstudio.org/server/bionic/amd64/rstudio-server-${RSTUDIO_VERSION}-amd64.deb\"; fi \\\n  && wget -q $RSTUDIO_URL \\\n  && dpkg -i rstudio-server-*-amd64.deb \\\n  && rm rstudio-server-*-amd64.deb \\\n## Symlink pandoc & standard pandoc templates for use system-wide\n  && ln -s /usr/lib/rstudio-server/bin/pandoc/pandoc /usr/local/bin \\\n  && ln -s /usr/lib/rstudio-server/bin/pandoc/pandoc-citeproc /usr/local/bin \\\n  && git clone --recursive --branch ${PANDOC_TEMPLATES_VERSION} https://github.com/jgm/pandoc-templates \\\n  && mkdir -p /opt/pandoc/templates \\\n  && cp -r pandoc-templates*/* /opt/pandoc/templates && rm -rf pandoc-templates* \\\n  && mkdir /root/.pandoc && ln -s /opt/pandoc/templates /root/.pandoc/templates \\\n  && apt-get clean \\\n  && rm -rf /var/lib/apt/lists/ \\\n## RStudio wants an /etc/R, will populate from $R_HOME/etc\n  && mkdir -p /etc/R \\\n## Write config files in $R_HOME/etc\n  && echo '\\n\\\n    \\n# Configure httr to perform out-of-band authentication if HTTR_LOCALHOST \\\n    \\n# is not set since a redirect to localhost may not work depending upon \\\n    \\n# where this Docker container is running. \\\n    \\nif(is.na(Sys.getenv(\"HTTR_LOCALHOST\", unset=NA))) { \\\n    \\n  options(httr_oob_default = TRUE) \\\n    \\n}' >> /usr/local/lib/R/etc/Rprofile.site \\\n  && echo \"PATH=${PATH}\" >> /usr/local/lib/R/etc/Renviron \\\n## Need to configure non-root user for RStudio\n  && useradd rstudio \\\n  && echo \"rstudio:rstudio\" | chpasswd \\\n  && mkdir /home/rstudio \\\n  && chown rstudio:rstudio /home/rstudio \\\n  && addgroup rstudio staff \\\n## Prevent rstudio from deciding to use /usr/bin/R if a user apt-get installs a package\n  &&  echo 'rsession-which-r=/usr/local/bin/R' >> /etc/rstudio/rserver.conf \\\n## use more robust file locking to avoid errors when using shared volumes:\n  && echo 'lock-type=advisory' >> /etc/rstudio/file-locks \\\n## configure git not to request password each time\n  && git config --system credential.helper 'cache --timeout=3600' \\\n  && git config --system push.default simple \\\n## Set up S6 init system\n  && wget -P /tmp/ https://github.com/just-containers/s6-overlay/releases/download/${S6_VERSION}/s6-overlay-amd64.tar.gz \\\n  && tar xzf /tmp/s6-overlay-amd64.tar.gz -C / \\\n  && mkdir -p /etc/services.d/rstudio \\\n  && echo '#!/usr/bin/with-contenv bash \\\n          \\n## load /etc/environment vars first: \\\n  \t\t  \\n for line in $( cat /etc/environment ) ; do export $line ; done \\\n          \\n exec /usr/lib/rstudio-server/bin/rserver --server-daemonize 0' \\\n          > /etc/services.d/rstudio/run \\\n  && echo '#!/bin/bash \\\n          \\n rstudio-server stop' \\\n          > /etc/services.d/rstudio/finish \\\n  && mkdir -p /home/rstudio/.rstudio/monitored/user-settings \\\n  && echo 'alwaysSaveHistory=\"0\" \\\n          \\nloadRData=\"0\" \\\n          \\nsaveAction=\"0\"' \\\n          > /home/rstudio/.rstudio/monitored/user-settings/user-settings \\\n  && chown -R rstudio:rstudio /home/rstudio/.rstudio && rm /tmp/s6-overlay-amd64.tar.gz && rm -rf /var/lib/apt/lists/*;\n\nRUN wget -P /etc/cont-init.d/ -O userconf https://github.com/rocker-org/rocker-versioned/blob/master/rstudio/userconf.sh\n\n## running with \"-e ADD=shiny\" adds shiny server\nRUN wget -P /etc/cont-init.d/ -O add https://github.com/rocker-org/rocker-versioned/blob/master/rstudio/add_shiny.sh\nRUN wget -P /etc/rstudio/ https://github.com/rocker-org/rocker-versioned/blob/master/rstudio/disable_auth_rserver.conf\nRUN wget -P /usr/lib/rstudio-server/bin/ -O pam-helper https://github.com/rocker-org/rocker-versioned/blob/master/rstudio/pam-helper.sh\n\nEXPOSE 8787\n\n## automatically link a shared volume for kitematic users\nVOLUME /home/rstudio/kitematic\n\n# Install some requires(Reference rocker/tidyverse)\nRUN apt-get update -qq && apt-get -y --no-install-recommends install \\\n  libxml2-dev libcairo2-dev libsqlite-dev libmariadbd-dev libmariadbclient-dev \\\n  libpq-dev libssh2-1-dev unixodbc-dev libsasl2-dev \\\n  && Rscript -e \"install.packages(c('tidyverse', 'dplyr', 'devtools', 'formatR', \\\n        'remotes', 'selectr', 'caTools', 'BiocManager'))\" && rm -rf /var/lib/apt/lists/*;\n\n# Set up localize(Reference tokyor/rstudio)\n# Change environment to Japanese(Character and DateTime)\n# If you would like to use Japanese version of this env\n# ENV LANG ja_JP.UTF-8\n# ENV LC_ALL ja_JP.UTF-8\n# RUN sed -i '$d' /etc/locale.gen && echo \"ja_JP.UTF-8 UTF-8\" >> /etc/locale.gen \\\n#   && locale-gen ja_JP.UTF-8 && /usr/sbin/update-locale LANG=ja_JP.UTF-8 LANGUAGE=\"ja_JP:ja\"\n# RUN /bin/bash -c \"source /etc/default/locale\"\n# RUN ln -sf  /usr/share/zoneinfo/Asia/Tokyo /etc/localtime\n\n# Install ipaexfont and some requires\nRUN apt-get update && apt-get install --no-install-recommends -y fonts-ipaexfont vim curl && rm -rf /var/lib/apt/lists/*;\n\n# Install packages\nRUN Rscript -e \"install.packages(c('githubinstall', 'ranger'))\"\n\n# Install torch for R\nRUN Rscript -e \"install.packages('torch')\"\nRUN Rscript -e \"remotes::install_github('mlverse/torchvision')\"\nRUN echo 'root:'${ROOT_PASSWD} | chpasswd\nRUN echo 'rstudio:'${PASSWD} | chpasswd\nRUN echo \"rstudio ALL=(ALL:ALL) ALL\" >> /etc/sudoers\nRUN gpasswd -a rstudio sudo\n\nCMD [\"/init\"]\n"
}