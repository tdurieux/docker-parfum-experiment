{
  "startTime": 1674250319891,
  "endTime": 1674250321545,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 86,
        "lineEnd": 86,
        "columnStart": 2,
        "columnEnd": 70
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 101,
        "lineEnd": 101,
        "columnStart": 2,
        "columnEnd": 68
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 216,
        "lineEnd": 216,
        "columnStart": 2,
        "columnEnd": 93
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 244,
        "lineEnd": 244,
        "columnStart": 2,
        "columnEnd": 24
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 245,
        "lineEnd": 245,
        "columnStart": 2,
        "columnEnd": 20
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 254,
        "lineEnd": 255,
        "columnStart": 73,
        "columnEnd": 35
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 260,
        "lineEnd": 261,
        "columnStart": 73,
        "columnEnd": 22
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 263,
        "lineEnd": 264,
        "columnStart": 73,
        "columnEnd": 25
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 266,
        "lineEnd": 267,
        "columnStart": 73,
        "columnEnd": 21
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 269,
        "lineEnd": 270,
        "columnStart": 73,
        "columnEnd": 20
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 278,
        "lineEnd": 279,
        "columnStart": 73,
        "columnEnd": 16
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 292,
        "lineEnd": 292,
        "columnStart": 2,
        "columnEnd": 16
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 379,
        "lineEnd": 379,
        "columnStart": 2,
        "columnEnd": 25
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM ##DevImage## AS dev\nLABEL maintainer \"Samuel Antao <samuel.antao@ibm.com>\"\n\n#\n# install GCC\n#\nRUN set -eux ; \\\n  apt-get update; \\\n  apt-get install -y --no-install-recommends \\\n    gcc-8 \\\n    g++-8 \\\n    gfortran-8 \\\n    ; \\\n  rm -rf /var/lib/apt/lists/* ; \\\n  update-alternatives \\\n    --install /usr/bin/gcc gcc /usr/bin/gcc-8 80 \\\n    --slave /usr/bin/g++ g++ /usr/bin/g++-8 \\\n    --slave /usr/bin/gfortran gfortran /usr/bin/gfortran-8 \\\n    --slave /usr/bin/gcov gcov /usr/bin/gcov-8\n\n#   \n# install OpenMPI\n#\nRUN set -eux ; \\\n  apt-get update; \\\n  apt-get install -y --no-install-recommends \\\n    openmpi-bin \\\n    ; \\\n  rm -rf /var/lib/apt/lists/*\n\nENV OMPI_CC gcc\nENV OMPI_CXX g++\nENV OMPI_F77 gfortran\nENV OMPI_FC gfortran\n\n\n#   \n# Point to CUDA libs\n#\nENV CUDADIR=/usr/local/cuda\n\n#   \n# install java\n#\nRUN set -eux ; \\\n  apt-get update; \\\n  apt-get install -y --no-install-recommends \\\n     openjdk-8-jdk-headless \\\n    ; \\\n  rm -rf /var/lib/apt/lists/*\n\n#   \n# install extra utilities\n#\nRUN set -eux ; \\\n  apt-get update; \\\n  apt-get install -y --no-install-recommends \\\n    curl \\\n    less \\\n    nano \\\n    cmake \\\n    git \\\n    libjpeg9-dev \\\n    zip \\\n    unzip \\\n    ; \\\n  rm -rf /var/lib/apt/lists/*\n\n#\n# Path to install all packages including anaconda.\n#\nENV InstallPath /opt/user\n\nRUN set -eux ; \\\n  groupadd -r user --gid=1000  ; \\\n  useradd -m -r -g user --uid=1000 --home-dir=$InstallPath --shell=/bin/bash user\n\nUSER user:user\nWORKDIR $InstallPath\n\n#\n# Install miniconda\n#\nRUN set -eux ; \\\n  cd $InstallPath ; \\\n  MinicondaInstallFile=Miniconda3-py37_4.8.3-Linux-$(uname -m).sh ; \\\n  curl -f -LO https://repo.continuum.io/miniconda/$MinicondaInstallFile; \\\n  if [ $(uname -m) = ppc64le ] ; then \\\n    echo \"bcd33ea9240e2720ec004af43194c3fe6d39581e4a957a26621e00c232ca5ca1  $MinicondaInstallFile\" | sha256sum -c - ; \\\n  else \\\n    echo \"bb2e3cedd2e78a8bb6872ab3ab5b1266a90f8c7004a22d8dc2ea5effeb6a439a  $MinicondaInstallFile\" | sha256sum -c - ; \\\n  fi ; \\\n  bash $MinicondaInstallFile -f -b -p $InstallPath/miniconda3 ; \\\n  rm -rf $MinicondaInstallFile\n\n#\n# Install antlr4 and test\n#\nRUN set -eux ; \\\n  mkdir $InstallPath/antlr4 ; \\\n  cd $InstallPath/antlr4 ; \\\n  curl -f -LO https://www.antlr.org/download/antlr-4.7.2-complete.jar; \\\n  echo \"6852386d7975eff29171dae002cc223251510d35f291ae277948f381a7b380b4  antlr-4.7.2-complete.jar\" | sha256sum -c - ; \\\n  echo \"#!/bin/bash\" >> antlr4 ; \\\n  echo \"export CLASSPATH=\\\".:$(pwd)/antlr-4.7.2-complete.jar:\\$CLASSPATH\\\"\" >> antlr4 ; \\\n  echo \"java -Xmx8192M -cp \\\"$(pwd)/antlr-4.7.2-complete.jar:\\$CLASSPATH\\\" org.antlr.v4.Tool \\$@\" >> antlr4 ; \\\n  chmod +x antlr4\n\nENV PATH $InstallPath/antlr4:$PATH\n\nRUN set -eux ; \\\n  antlr4\n\n#\n# Install MAGMA\n#\nRUN set -eux ; \\\n  cd $InstallPath ; \\\n  . miniconda3/bin/activate ; \\\n  conda create -y -n magma python=3.7 ; \\\n  conda activate magma ; \\\n  conda install -y openblas\n\nENV OPENBLASDIR $InstallPath/miniconda3/envs/magma\n\nRUN set -eux ; \\\n  cd $InstallPath ; \\\n  . miniconda3/bin/activate ; \\\n  conda activate magma ; \\\n  mkdir -p $InstallPath/magma/install ; \\\n  cd $InstallPath/magma/install ; \\\n  git clone https://bitbucket.org/icl/magma  ; \\\n  cd magma ; \\\n  git checkout -b v2.5.3 v2.5.3 ; \\\n  sed 's/#GPU_TARGET.*/GPU_TARGET ?= Kepler Pascal Volta/g' \\\n    make.inc-examples/make.inc.openblas > make.inc ; \\\n  make lib -j ; \\\n  make sparse-lib -j ; \\\n  make install prefix=$InstallPath/magma ; \\\n  cd ; rm -rf $InstallPath/magma/install\n\nENV MAGMA_HOME $InstallPath/magma\n\n#\n# Install fxdiv\n#\nRUN set -eux ; \\\n  mkdir -p $InstallPath/fxdiv/install/obj ; \\\n  cd $InstallPath/fxdiv/install ; \\\n  git clone https://github.com/Maratyszcza/FXdiv ; \\\n  cd obj ; \\\n  cmake -DCMAKE_INSTALL_PREFIX=$InstallPath/fxdiv ../FXdiv ; \\\n  make -j ; \\\n  make -j install ; \\\n  rm -rf $InstallPath/fxdiv/install\n\nENV C_INCLUDE_PATH $InstallPath/fxdiv/include\nENV CPLUS_INCLUDE_PATH $InstallPath/fxdiv/include\nENV LIBRARY_PATH $InstallPath/fxdiv/lib64\n\n#\n# Install pytorch\n#\nCOPY pytorch-v1.5.0.patch $InstallPath\nRUN set -eux ; \\\n  cd $InstallPath ; \\\n  . miniconda3/bin/activate ; \\\n  conda create -y -n pytorch python=3.7\n\nRUN set -eux ; \\\n  cd $InstallPath ; \\\n  . miniconda3/bin/activate ; \\\n  conda activate pytorch ; \\\n  git clone --single-branch -b v1.5.0 --recursive https://github.com/pytorch/pytorch pytorch-v1.5.0 ; \\\n  cd pytorch*/ ; \\\n  git apply < $InstallPath/pytorch-v1.5.0.patch ; \\\n  git submodule sync ; \\\n  git submodule update --init --recursive ; \\\n  conda install -y numpy ninja pyyaml setuptools cffi openblas; \\\n  if [ $(uname -m) = x86_64 ] ; then \\\n    conda install -y mkl mkl-include ; \\\n  fi ; \\\n  export CMAKE_PREFIX_PATH=${CONDA_PREFIX:-\"$(dirname $(which conda))/../\"} ; \\\n  export TORCH_CUDA_ARCH_LIST=\"3.7;6.0;7.0\" ; \\\n  python setup.py install ; \\\n  cd ; \\\n  rm -rf $InstallPath/pytorch-v1.5.0.patch\n\n#\n# Install pytorch-vision and test\n#\nRUN set -eux ; \\\n  cd $InstallPath ; \\\n  . miniconda3/bin/activate ; \\\n  conda activate pytorch ; \\\n  git clone --single-branch -b v0.6.0 --recursive https://github.com/pytorch/vision pytorch-vision-v0.6.0 ; \\\n  cd pytorch-vision*/ ; \\\n  export FORCE_CUDA=1 ; \\\n  export TORCH_CUDA_ARCH_LIST=\"3.7;6.0;7.0\" ; \\\n  python setup.py install ; \\\n  cd ; \\\n  true\n\n#\n# Install deepppl dependencies\n#\nRUN set -eux ; \\\n  cd $InstallPath ; \\\n  . miniconda3/bin/activate ; \\\n  conda create -y --name deepppl --clone pytorch\n\n# Install bazel needed to install JAX\nRUN set -eux ; \\\n  cd $InstallPath ; . miniconda3/bin/activate ; conda activate deepppl ; \\\n  mkdir -p $InstallPath/bazel/install ; \\\n  cd $InstallPath/bazel/install ; \\\n  curl -f -LO https://github.com/bazelbuild/bazel/releases/download/3.5.0/bazel-3.5.0-dist.zip; \\\n  echo \"334429059cf82e222ca8a9d9dbbd26f8e1eb308613463c2b8655dd4201b127ec  bazel-3.5.0-dist.zip\" | sha256sum -c - ; \\\n  unzip bazel-3.5.0-dist.zip ; \\\n  env EXTRA_BAZEL_ARGS=\"--host_javabase=@local_jdk//:jdk\" bash ./compile.sh ; \\\n  cd ; \\\n  mv $InstallPath/bazel/install/output/bazel $InstallPath/bazel ; \\\n  rm -rf $InstallPath/bazel/install\n\nENV PATH=$InstallPath/bazel:$PATH\n\n# Install required python packages for JAX\nRUN set -eux ; \\\n  cd $InstallPath ; . miniconda3/bin/activate ; conda activate deepppl ; \\\n  conda install -y scipy cython six\n\n# Install JAX\nCOPY jax-v0.1.51.patch $InstallPath\nRUN set -eux ; \\\n  cd $InstallPath ; . miniconda3/bin/activate ; conda activate deepppl ; \\\n  git clone --single-branch -b jaxlib-v0.1.51 https://github.com/google/jax ; \\\n  cd jax ; \\\n  git apply < $InstallPath/jax-v0.1.51.patch ; \\\n  python build/build.py \\\n    --enable_march_native false \\\n    --enable_mkl_dnn false \\\n    --cudnn_path /usr \\\n    --enable_cuda true \\\n    --cuda_compute_capabilities 3.5,3.7,6.0,7.0 ; \\\n  pip install --no-cache-dir -e build; \\\n  pip install --no-cache-dir -e .; \\\n  cd $InstallPath ; \\\n  true\n\n# Already installed dependencies:\n#   numpy (pytorch dependency)\n#   pytorch (from source)\n#   pytorch-vision (from source)\nRUN set -eux ; \\\n  cd $InstallPath ; . miniconda3/bin/activate ; conda activate deepppl ; pip install --no-cache-dir \\\n    'antlr4-python3-runtime==4.7.2'\nRUN set -eux ; \\\n  cd $InstallPath ; . miniconda3/bin/activate ; conda activate deepppl ; conda install -y \\\n    'astor==0.7.1'\nRUN set -eux ; \\\n  cd $InstallPath ; . miniconda3/bin/activate ; conda activate deepppl ; pip install --no-cache-dir \\\n    'astpretty==1.2.1'\nRUN set -eux ; \\\n  cd $InstallPath ; . miniconda3/bin/activate ; conda activate deepppl ; pip install --no-cache-dir \\\n    'observations==0.1.4'\nRUN set -eux ; \\\n  cd $InstallPath ; . miniconda3/bin/activate ; conda activate deepppl ; pip install --no-cache-dir \\\n    'pyro-ppl==1.3.1'\nRUN set -eux ; \\\n  cd $InstallPath ; . miniconda3/bin/activate ; conda activate deepppl ; pip install --no-cache-dir \\\n    'numpyro==0.3.0'\nRUN set -eux ; \\\n  cd $InstallPath ; . miniconda3/bin/activate ; conda activate deepppl ; conda install -y \\\n    'pytest>=3.6.1'\nRUN set -eux ; \\\n  cd $InstallPath ; . miniconda3/bin/activate ; conda activate deepppl ; conda install -y \\\n    'requests>=2.20.0'\nRUN set -eux ; \\\n  cd $InstallPath ; . miniconda3/bin/activate ; conda activate deepppl ; pip install --no-cache-dir \\\n    'ipdb>=0.11'\nRUN set -eux ; \\\n  cd $InstallPath ; . miniconda3/bin/activate ; conda activate deepppl ; conda install -y \\\n    'matplotlib>=2.2.2'\nRUN set -eux ; \\\n  cd $InstallPath ; . miniconda3/bin/activate ; conda activate deepppl ; conda install -y \\\n    'pandas>=0.25.1'\n\nRUN set -eux ; \\\n  cd $InstallPath ; . miniconda3/bin/activate ; conda activate deepppl ; \\\n  git clone https://github.com/deepppl/deepppl ; \\\n  cd deepppl/deepppl ; \\\n  make -j ; \\\n  pip install --no-cache-dir ..\n\n# Remove pytorch environment as it was cloned to deepppl one.\nRUN set -eux ; \\\n  cd $InstallPath ; \\\n  . miniconda3/bin/activate ; \\\n  conda env remove -y -n pytorch \n\n##########################################################################################\nFROM ##BaseImage##\nLABEL maintainer \"Samuel Antao <samuel.antao@ibm.com>\"\n\n#\n# install system dependencies\n#\nRUN set -eux ; \\\n  apt-get update; \\\n  apt-get install -y --no-install-recommends \\\n    gcc-8 \\\n    g++-8 \\\n    gfortran-8 \\\n    openmpi-bin \\\n    openjdk-8-jre-headless \\\n    curl \\\n    less \\\n    nano \\\n    libjpeg9 \\\n    zip \\\n    unzip \\\n    ; \\\n  rm -rf /var/lib/apt/lists/* ; \\\n  update-alternatives \\\n    --install /usr/bin/gcc gcc /usr/bin/gcc-8 80 \\\n    --slave /usr/bin/g++ g++ /usr/bin/g++-8 \\\n    --slave /usr/bin/gfortran gfortran /usr/bin/gfortran-8 \\\n    --slave /usr/bin/gcov gcov /usr/bin/gcov-8\n\n\nENV OMPI_CC gcc\nENV OMPI_CXX g++\nENV OMPI_F77 gfortran\nENV OMPI_FC gfortran\n\n#   \n# Point to CUDA libs\n#\nENV CUDADIR=/usr/local/cuda\n\n#\n# Path to install all packages including anaconda.\n#\nENV InstallPath /opt/user\n\nRUN set -eux ; \\\n  groupadd -r user --gid=1000  ; \\\n  useradd -m -r -g user --uid=1000 --home-dir=$InstallPath --shell=/bin/bash user\n\nUSER user:user\nWORKDIR $InstallPath\n\n# Copy the relevant bits - pytorch is installed in miniconda so not need to copy it over\n# separately.\nCOPY --chown=user:user --from=dev /opt/user/antlr4 /opt/user/antlr4\n\nCOPY --chown=user:user --from=dev /opt/user/deepppl /opt/user/deepppl\n\nCOPY --chown=user:user --from=dev /opt/user/fxdiv /opt/user/fxdiv\n\nRUN set -eux ; \\\n  mkdir $InstallPath/jax\nCOPY --chown=user:user --from=dev /opt/user/jax/build /opt/user/jax/build\nCOPY --chown=user:user --from=dev /opt/user/jax/jaxlib /opt/user/jax/jaxlib\nCOPY --chown=user:user --from=dev /opt/user/jax/jax /opt/user/jax/jax\nCOPY --chown=user:user --from=dev /opt/user/jax/jax.egg-info /opt/user/jax/jax.egg-info\n\nCOPY --chown=user:user --from=dev /opt/user/magma /opt/user/magma\n\nCOPY --chown=user:user --from=dev /opt/user/miniconda3 /opt/user/miniconda3\n\n\n# Install notebook in miniconda\nRUN set -eux ; \\\n  cd $InstallPath ; . miniconda3/bin/activate ; conda activate deepppl ; \\\n  conda install -y jupyter\n\nRUN set -eux ; \\\n  cd $InstallPath ; . miniconda3/bin/activate ; conda activate deepppl ; \\\n  pip install --no-cache-dir torchdiffeq\n\n# In x86_64 we need LD_LIBRARY_PATH to point to MKL.\nENV LD_LIBRARY_PATH $InstallPath/miniconda3/envs/deepppl/lib\n\n# Copy example notebook\nCOPY notebook $InstallPath/notebook\n\nEXPOSE 8888 \n\nWORKDIR $InstallPath/notebook\nCMD set -eux ; \\\n  cd $InstallPath ; . miniconda3/bin/activate ; conda activate deepppl ; \\\n  nvidia-smi ; \\\n  jupyter-notebook --ip=0.0.0.0 --port=8888\n\n\n"
}