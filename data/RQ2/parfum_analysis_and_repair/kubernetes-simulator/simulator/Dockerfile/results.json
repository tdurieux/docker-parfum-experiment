{
  "startTime": 1674255004914,
  "endTime": 1674255006401,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 11,
        "lineEnd": 11,
        "columnStart": 7,
        "columnEnd": 53
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 26,
        "lineEnd": 26,
        "columnStart": 7,
        "columnEnd": 84
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 52,
        "lineEnd": 53,
        "columnStart": 4,
        "columnEnd": 26
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 57,
        "lineEnd": 58,
        "columnStart": 4,
        "columnEnd": 26
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 62,
        "lineEnd": 63,
        "columnStart": 4,
        "columnEnd": 31
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 67,
        "lineEnd": 68,
        "columnStart": 4,
        "columnEnd": 34
      }
    },
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 78,
        "lineEnd": 78,
        "columnStart": 4,
        "columnEnd": 15
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 27,
        "lineEnd": 27,
        "columnStart": 7,
        "columnEnd": 72
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 8,
        "lineEnd": 10,
        "columnStart": 7,
        "columnEnd": 30
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 13,
        "lineEnd": 19,
        "columnStart": 7,
        "columnEnd": 9
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 116,
        "lineEnd": 123,
        "columnStart": 7,
        "columnEnd": 9
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "#---------------------------------------#\n# Dependencies, Linting & JS unit tests #\n#---------------------------------------#\nFROM debian:buster-slim AS dependencies\n\n# We're using sh not bash at this point\n# hadolint ignore=DL4006\nRUN apt-get update                                                                    \\\n    && DEBIAN_FRONTEND=noninteractive apt-get install  -y --no-install-recommends     \\\n    curl                                                                              \\\n    software-properties-common \\\n    && curl -f -sL https://deb.nodesource.com/setup_13.x | bash - \\\n    && apt-get update \\\n    && DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends      \\\n    build-essential                                                                   \\\n    ca-certificates                                                                   \\\n    git                                                                               \\\n    nodejs                                                                            \\\n    shellcheck                                                                        \\\n    unzip && rm -rf /var/lib/apt/lists/*;\n\n# Download and save golang latest for use in other layers and install\nARG GO_INSTALL_VERSION=1.13.7\n# hadolint ignore=DL3003,DL3010\nRUN mkdir /downloads                                                  \\\n    && cd /downloads \\\n    && curl -f -sLO https://dl.google.com/go/go${GO_INSTALL_VERSION}.linux-amd64.tar.gz \\\n    && tar -C /usr/local -xzf go${GO_INSTALL_VERSION}.linux-amd64.tar.gz && rm go${GO_INSTALL_VERSION}.linux-amd64.tar.gz\n\nENV PATH $PATH:/usr/local/go/bin\n\n# Install terraform\nENV GOPATH /go\nENV PATH $PATH:/go/bin\n\nENV GO111MODULE on\nRUN mkdir -p /go/ && \\\n    go get github.com/hashicorp/terraform/tools/terraform-bundle@v0.13.3\n\nCOPY ./terraform/deployments/AWS/terraform-bundle.hcl .\nRUN terraform-bundle package terraform-bundle.hcl && \\\n    mkdir -p terraform-bundle                     && \\\n    unzip -d terraform-bundle terraform_*.zip\n\n# Default configuration for dep\nARG JQ_VERSION=1.6\nARG YQ_VERSION=3.4.1\nARG GOSS_VERSION=v0.3.7\nARG HADOLINT_VERSION=v1.16.3\nARG lint_user=lint\n\n# Install JQ\nRUN curl -f -sL https://github.com/stedolan/jq/releases/download/jq-${JQ_VERSION}/jq-linux64 \\\n      -o /usr/local/bin/jq \\\n    && chmod +x /usr/local/bin/jq\n\n## Install YQ\nRUN curl -f -sL https://github.com/mikefarah/yq/releases/download/${YQ_VERSION}/yq_linux_amd64 \\\n      -o /usr/local/bin/yq \\\n    && chmod +x /usr/local/bin/yq\n\n## Install Goss\nRUN curl -f -sL https://github.com/aelsabbahy/goss/releases/download/${GOSS_VERSION}/goss-linux-amd64 \\\n         -o /usr/local/bin/goss \\\n    && chmod +rx /usr/local/bin/goss\n\n# Install Hadolint and setup non-root lint user\nRUN curl -f -sL https://github.com/hadolint/hadolint/releases/download/${HADOLINT_VERSION}/hadolint-Linux-x86_64 \\\n        -o /usr/local/bin/hadolint \\\n    && chmod +x /usr/local/bin/hadolint \\\n    && useradd -ms /bin/bash ${lint_user} \\\n    && mkdir /app\n\nWORKDIR /app/scenario-tools\n\nCOPY --chown=1000 ./tools/scenario-tools/ /app/scenario-tools/\n\n# Run javascript linting and unit tests\nRUN npm install \\\n    && npm test && npm cache clean --force;\n\nWORKDIR /app\n\n# Copy Dockerfiles, hadolint config and scripts\nCOPY --chown=1000 scripts/ /app/scripts/\nCOPY --chown=1000 attack/ /app/attack/\nCOPY --chown=1000 simulation-scripts/ /app/simulation-scripts/\nCOPY --chown=1000 kubesim /app/kubesim\nCOPY --chown=1000 Dockerfile .hadolint.yaml /app/\nCOPY --chown=1000 terraform/modules/AWS/Bastion/bashrc /app/Bastion/bashrc\nCOPY --chown=1000 terraform/modules/AWS/InternalHost/bashrc /app/InternalHost/bashrc\nCOPY --chown=1000 terraform/modules/AWS/Kubernetes/bashrc /app/Kubernetes/bashrc\nCOPY --chown=1000 launch-files/bashrc /app/launch-files/bashrc\n\nUSER ${lint_user}\n\n# Lint Dockerfiles & shell scripts\nRUN hadolint Dockerfile &&                       \\\n    hadolint attack/Dockerfile &&                \\\n    shellcheck scripts/* &&                      \\\n    shellcheck attack/scripts/* &&               \\\n    shellcheck simulation-scripts/perturb.sh &&  \\\n    shellcheck kubesim &&                        \\\n    shellcheck Bastion/bashrc &&                 \\\n    shellcheck InternalHost/bashrc &&            \\\n    shellcheck Kubernetes/bashrc &&              \\\n    shellcheck launch-files/bashrc\n\nWORKDIR /app/scenario-tools\n\n#-----------------------#\n# Golang Build and Test #\n#-----------------------#\nFROM debian:buster-slim AS build-and-test\n\nRUN apt-get update \\\n    && DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends \\\n    awscli                                                                       \\\n    build-essential                                                              \\\n    ca-certificates                                                              \\\n    curl                                                                         \\\n    git                                                                          \\\n    openssh-client                                                               \\\n    unzip && rm -rf /var/lib/apt/lists/*;\n\n# Install golang version downloaded in dependency stage\nCOPY --from=dependencies /terraform-bundle/* /usr/local/bin/\n# hadolint ignore=DL3010\nCOPY --from=dependencies /downloads/go*.linux-amd64.tar.gz .\n# We want to minimise layers to keep the build fast\n# hadolint ignore=DL3010\nRUN tar -C /usr/local -xzf go*.linux-amd64.tar.gz \\\n    && rm go*.linux-amd64.tar.gz\nENV PATH $PATH:/usr/local/go/bin\n\n# Setup non-root build user\nARG build_user=build\nRUN useradd -ms /bin/bash ${build_user} \\\n# Create golang src directory\n    &&  mkdir -p /go/src/github.com/kubernetes-simulator/simulator \\\n# Create an empty public kubesim directory the tests\n    && mkdir -p /home/${build_user}/.kubesim                            \\\n# Create module cache and copy manifest files\n    &&  mkdir -p /home/${build_user}/go/pkg/mod\n\nCOPY ./go.* /go/src/github.com/kubernetes-simulator/simulator/\n\n# Give ownership of module cache and src tree to build user\nRUN chown -R ${build_user}:${build_user} /go/src/github.com/kubernetes-simulator/simulator \\\n    && chown -R ${build_user}:${build_user} /home/${build_user}\n\n# Run all build and test steps as build user\nUSER ${build_user}\n\n# Install golang module dependencies before copying source to cache them in their own layer\nWORKDIR /go/src/github.com/kubernetes-simulator/simulator\n\n# Add the full source tree\nCOPY --chown=1000 Makefile /go/src/github.com/kubernetes-simulator/simulator/\nCOPY --chown=1000 prelude.mk /go/src/github.com/kubernetes-simulator/simulator/\nCOPY --chown=1000 main.go /go/src/github.com/kubernetes-simulator/simulator/\nCOPY --chown=1000 pkg/  /go/src/github.com/kubernetes-simulator/simulator/pkg\nCOPY --chown=1000 cmd/  /go/src/github.com/kubernetes-simulator/simulator/cmd\nCOPY --chown=1000 test/  /go/src/github.com/kubernetes-simulator/simulator/test\n\nWORKDIR /go/src/github.com/kubernetes-simulator/simulator/\n\n# TODO: (rem) why is this owned by root after the earlier chmod?\nUSER root\n# We're using sh not bash at this point\n# hadolint ignore=DL4006\nRUN chown -R ${build_user}:${build_user} /go/src/github.com/kubernetes-simulator/simulator/ \\\n    && curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s -- -b /usr/local/bin v1.22.2\n\nUSER ${build_user}\n\n# Golang build and test\nWORKDIR /go/src/github.com/kubernetes-simulator/simulator\nRUN make test-unit\n\n#------------------#\n# Launch Container #\n#------------------#\nFROM debian:buster-slim\n\nRUN apt-get update                                                               \\\n    && DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends \\\n    awscli                                                                       \\\n    bash                                                                         \\\n    bash-completion                                                              \\\n    bzip2                                                                        \\\n    ca-certificates                                                              \\\n    curl                                                                         \\\n    file                                                                         \\\n    gettext-base                                                                 \\\n    gnupg                                                                        \\\n    lsb-release                                                                  \\\n    make                                                                         \\\n    openssh-client                                                               \\\n    tcl                                                                          \\\n    tcl-expect                                                                   \\\n && rm -rf /var/lib/apt/lists/*\n\n# Install golang version downloaded in dependency stage\nCOPY --from=dependencies /terraform-bundle/* /usr/local/bin/\n# hadolint ignore=DL3010\nCOPY --from=dependencies /downloads/go*.linux-amd64.tar.gz .\nRUN tar -C /usr/local -xzf go*.linux-amd64.tar.gz \\\n    && rm go*.linux-amd64.tar.gz\nENV PATH $PATH:/usr/local/go/bin\n\n# Add login message\nCOPY ./scripts/launch-motd /usr/local/bin/launch-motd\nRUN echo '[ ! -z \"$TERM\" ] && source /usr/local/bin/launch-motd' >> /etc/bash.bashrc\n\n# Use 3rd party dependencies from build\nCOPY --from=dependencies /usr/local/bin/jq /usr/local/bin/jq\nCOPY --from=dependencies /usr/local/bin/yq /usr/local/bin/yq\nCOPY --from=dependencies /usr/local/bin/goss /usr/local/bin/goss\nCOPY --from=dependencies /terraform-bundle/* /usr/local/bin/\n\n# Copy statically linked simulator binary\nCOPY --from=build-and-test /go/src/github.com/kubernetes-simulator/simulator/dist/simulator /usr/local/bin/simulator\n\n# Setup non-root launch user\nARG launch_user=launch\nRUN useradd -ms /bin/bash ${launch_user} \\\n    && mkdir /app                        \\\n    && chown -R ${launch_user}:${launch_user} /app \\\n    && mkdir -p /home/${launch_user}/.kubesim \\\n    && chown -R ${launch_user}:${launch_user} /home/${launch_user}/.kubesim\n\n# Copy acceptance and smoke tests\nCOPY --chown=1000 --from=build-and-test /go/src/github.com/kubernetes-simulator/simulator/test/ /app/test/\n\n\nWORKDIR /app\n\n# Add terraform and perturb/scenario scripts to the image and goss.yaml to verify the container\nARG config_file=\"./launch-files/simulator.yaml\"\nCOPY --chown=1000 ./terraform/ ./terraform/\nCOPY --chown=1000 ./simulation-scripts/ ./simulation-scripts/\nCOPY --chown=1000                     \\\n  ./launch-files/goss.yaml            \\\n  ./launch-files/launch-entrypoint.sh \\\n  ./launch-files/test-acceptance.sh   \\\n  ./\nCOPY --chown=1000 ./launch-files/bash_aliases /home/launch/.bash_aliases\nCOPY --chown=1000 ./launch-files/inputrc /home/launch/.inputrc\nCOPY --chown=1000 ${config_file} /home/launch/.kubesim/\n\nCOPY --chown=1000 launch-files/bashrc /home/launch/.bashrc\n\nENV SIMULATOR_SCENARIOS_DIR=/app/simulation-scripts/ \\\n    SIMULATOR_TF_DIR=/app/terraform/deployments/AWS \\\n    DISABLE_CHECKPOINT=true\n\nUSER ${launch_user}\n\nSTOPSIGNAL SIGTERM\n\nENTRYPOINT [ \"./launch-entrypoint.sh\" ]\n"
}