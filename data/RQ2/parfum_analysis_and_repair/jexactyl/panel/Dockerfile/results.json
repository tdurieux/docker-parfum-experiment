{
  "startTime": 1674251688401,
  "endTime": 1674251689713,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 19,
        "lineEnd": 19,
        "columnStart": 7,
        "columnEnd": 49
      }
    },
    {
      "rule": "yarnCacheCleanAfterInstall",
      "position": {
        "lineStart": 7,
        "lineEnd": 7,
        "columnStart": 4,
        "columnEnd": 34
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# Stage 0:\n# Build the assets that are needed for the frontend. This build stage is then discarded\n# since we won't need NodeJS anymore in the future. This Docker image ships a final production\n# level distribution of Pterodactyl.\nFROM --platform=$TARGETOS/$TARGETARCH mhart/alpine-node:14\nWORKDIR /app\nCOPY . ./\nRUN yarn install --frozen-lockfile \\\n    && yarn run build:production && yarn cache clean;\n\n# Stage 1:\n# Build the actual container with all of the needed PHP dependencies that will run the application.\nFROM --platform=$TARGETOS/$TARGETARCH php:7.4-fpm-alpine\nWORKDIR /app\nCOPY . ./\nCOPY --from=0 /app/public/assets ./public/assets\nRUN apk add --no-cache --update ca-certificates dcron curl git supervisor tar unzip nginx libpng-dev libxml2-dev libzip-dev certbot certbot-nginx \\\n    && docker-php-ext-configure zip \\\n    && docker-php-ext-install bcmath gd pdo_mysql zip \\\n    && curl -f -sS https://getcomposer.org/installer | php -- --install-dir=/usr/local/bin --filename=composer \\\n    && cp .env.example .env \\\n    && mkdir -p bootstrap/cache/ storage/logs storage/framework/sessions storage/framework/views storage/framework/cache \\\n    && chmod 777 -R bootstrap storage \\\n    && composer install --no-dev --optimize-autoloader \\\n    && rm -rf .env bootstrap/cache/*.php \\\n    && chown -R nginx:nginx .\n\nRUN rm /usr/local/etc/php-fpm.conf \\\n    && echo \"* * * * * /usr/local/bin/php /app/artisan schedule:run >> /dev/null 2>&1\" >> /var/spool/cron/crontabs/root \\\n    && echo \"0 23 * * * certbot renew --nginx --quiet\" >> /var/spool/cron/crontabs/root \\\n    && sed -i s/ssl_session_cache/#ssl_session_cache/g /etc/nginx/nginx.conf \\\n    && mkdir -p /var/run/php /var/run/nginx\n\nCOPY .github/docker/default.conf /etc/nginx/http.d/default.conf\nCOPY .github/docker/www.conf /usr/local/etc/php-fpm.conf\nCOPY .github/docker/supervisord.conf /etc/supervisord.conf\n\nEXPOSE 80 443\nENTRYPOINT [ \"/bin/ash\", \".github/docker/entrypoint.sh\" ]\nCMD [ \"supervisord\", \"-n\", \"-c\", \"/etc/supervisord.conf\" ]\n"
}