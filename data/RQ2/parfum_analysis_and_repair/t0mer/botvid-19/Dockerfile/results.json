{
  "startTime": 1674251045925,
  "endTime": 1674251046791,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 34,
        "lineEnd": 34,
        "columnStart": 4,
        "columnEnd": 135
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 41,
        "lineEnd": 41,
        "columnStart": 4,
        "columnEnd": 71
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 81,
        "lineEnd": 81,
        "columnStart": 26,
        "columnEnd": 85
      }
    },
    {
      "rule": "curlUseHttpsUrl",
      "position": {
        "lineStart": 34,
        "lineEnd": 34,
        "columnStart": 4,
        "columnEnd": 135
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 24,
        "lineEnd": 24,
        "columnStart": 4,
        "columnEnd": 31
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 25,
        "lineEnd": 25,
        "columnStart": 4,
        "columnEnd": 35
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 26,
        "lineEnd": 26,
        "columnStart": 4,
        "columnEnd": 35
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 27,
        "lineEnd": 27,
        "columnStart": 4,
        "columnEnd": 36
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 44,
        "lineEnd": 44,
        "columnStart": 4,
        "columnEnd": 45
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM python\n\nENV DEBIAN_FRONTEND noninteractive\nENV DEBCONF_NONINTERACTIVE_SEEN true\nENV API_KEY \"\"\nENV PYTHONIOENCODING=utf-8\nENV LANG=C.UTF-8\n\n# Set timezone\nRUN echo \"Asia/Jerusalem\" > /etc/timezone && \\\n    dpkg-reconfigure --frontend noninteractive tzdata\n\n# Create a default user\nRUN groupadd --system automation && \\\n    useradd --system --create-home --gid automation --groups audio,video automation && \\\n    mkdir --parents /home/automation/reports && \\\n    chown --recursive automation:automation /home/automation\n\n# Update the repositories\n# Install dependencies\n# Install utilities\n# Install XVFB and TinyWM\n# Install fonts\nRUN apt-get -yqq update && \\\n    apt-get -yqq --no-install-recommends install gnupg2 && \\\n    apt-get -yqq --no-install-recommends install supervisor && \\\n    apt-get -yqq --no-install-recommends install curl unzip && \\\n    apt-get -yqq --no-install-recommends install xvfb tinywm && \\\n    rm -rf /var/lib/apt/lists/*\n\n# Install Chrome WebDriver\n#CHROMEDRIVER_VERSION=`curl -sS chromedriver.storage.googleapis.com/LATEST_RELEASE`\nRUN CHROMEDRIVER_VERSION=86.0.4240.22 && \\\n    mkdir -p /opt/chromedriver-$CHROMEDRIVER_VERSION && \\\n    curl -f -sS -o /tmp/chromedriver_linux64.zip https://chromedriver.storage.googleapis.com/$CHROMEDRIVER_VERSION/chromedriver_linux64.zip && \\\n    unzip -qq /tmp/chromedriver_linux64.zip -d /opt/chromedriver-$CHROMEDRIVER_VERSION && \\\n    rm /tmp/chromedriver_linux64.zip && \\\n    chmod +x /opt/chromedriver-$CHROMEDRIVER_VERSION/chromedriver && \\\n    ln -fs /opt/chromedriver-$CHROMEDRIVER_VERSION/chromedriver /usr/local/bin/chromedriver\n\n# Install Google Chrome\nRUN curl -f -sS -o - https://dl-ssl.google.com/linux/linux_signing_key.pub | apt-key add - && \\\n    echo \"deb http://dl.google.com/linux/chrome/deb/ stable main\" >> /etc/apt/sources.list.d/google-chrome.list && \\\n    apt-get -yqq update && \\\n    apt-get -yqq --no-install-recommends install google-chrome-stable && \\\n    rm -rf /var/lib/apt/lists/*\n\n# Default configuration\nENV DISPLAY :20.0\nENV SCREEN_GEOMETRY \"1440x900x24\"\nENV CHROMEDRIVER_PORT 4444\nENV CHROMEDRIVER_WHITELISTED_IPS \"127.0.0.1\"\nENV CHROMEDRIVER_URL_BASE ''\nENV CHROMEDRIVER_EXTRA_ARGS ''\n\nRUN pip install selenium --no-cache-dir && \\\n    pip install telepot --no-cache-dir && \\\n    pip install pyyaml --no-cache-dir && \\\n    pip install python-dotenv --no-cache-dir && \\\n    pip install loguru --no-cache-dir\n\nRUN mkdir -p /opt/dockerbot \\\n    mkdir -p /opt/dockerbot/config \\\n    mkdir -p /opt/dockerbot/images \\\n    mkdir -p /var/log/supervisor\n\nCOPY config.yml /opt/dockerbot/config\nCOPY config.yml /etc\nCOPY workers/Health_Statements.py /opt/dockerbot\nCOPY workers/Mashov_Health_Statements.py /opt/dockerbot\nCOPY workers/Webtop_Health_Statements.py /opt/dockerbot\nCOPY workers/Infogan_Health_Statements.py /opt/dockerbot\nCOPY workers/Amdocs_Health_Statements.py /opt/dockerbot\nCOPY helpers.py /opt/dockerbot\nCOPY dockerbot.py /opt/dockerbot\nCOPY supervisord.conf /etc/supervisor/conf.d/supervisord.conf\nCOPY please_sign.jpg /opt/dockerbot\nCOPY No-Trespassing.gif /opt/dockerbot\n\nVOLUME [ \"/opt/config\" ]\n\nRUN CHROMEDRIVER_VERSION=$( curl -f -sS chromedriver.storage.googleapis.com/LATEST_RELEASE) && \\\n    echo \"export CHROME_VERSION=86.0.4240.22\" >> /root/.bashrc && \\\n    echo 'export PATH=/opt/chromedriver-${CHROME_VERSION}:$PATH' >> /root/.bashrc\n\nCMD [\"/usr/bin/supervisord\"]\n#ENTRYPOINT [\"/usr/bin/python\", \"/opt/dockerbot/dockerbot.py\"]\n"
}