{
  "startTime": 1674256060490,
  "endTime": 1674256061770,
  "originalSmells": [
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 13,
        "lineEnd": 13,
        "columnStart": 7,
        "columnEnd": 104
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 13,
        "lineEnd": 13,
        "columnStart": 7,
        "columnEnd": 104
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# Shared arguments\nARG USERNAME=\"vscode\"\nARG USER_UID=1000\nARG USER_GID=$USER_UID\n\nFROM ubuntu:20.04 AS gadgetron_baseimage\n\nARG USERNAME\nARG USER_UID\nARG USER_GID\nARG HOME=/home/$USERNAME\n\nRUN apt-get update \\\n    && DEBIAN_FRONTEND=noninteractive apt-get --no-install-recommends install -y sudo wget git-core rsync curl net-tools libxml2 \\\n    && apt-get clean && rm -rf /var/lib/apt/lists/*;\n\n# Create the user\nRUN groupadd --gid $USER_GID $USERNAME \\\n    && useradd --uid $USER_UID --gid $USER_GID -m $USERNAME -s /bin/bash \\\n    #\n    # [Optional] Add sudo support. Omit if you don't need to install software after connecting.\n    && echo $USERNAME ALL=\\(root\\) NOPASSWD:ALL > /etc/sudoers.d/$USERNAME \\\n    && chmod 0440 /etc/sudoers.d/$USERNAME\n\n# The version of conda to use\nARG CONDA_VERSION=4.11.0\n\n# Based on https://github.com/ContinuumIO/docker-images/blob/master/miniconda3/debian/Dockerfile.\n# We also install conda-lock.\nRUN wget --quiet https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh -O miniconda.sh \\\n    && mkdir -p /opt \\\n    && sh miniconda.sh -b -p /opt/conda \\\n    && ln -s /opt/conda/etc/profile.d/conda.sh /etc/profile.d/conda.sh \\\n    && find /opt/conda/ -follow -type f -name '*.a' -delete \\\n    && find /opt/conda/ -follow -type f -name '*.js.map' -delete \\\n    && [ -z \"$CONDA_VERSION\" ] || /opt/conda/bin/conda install -n base conda=$CONDA_VERSION \\\n    && /opt/conda/bin/conda install -c conda-forge -n base conda-lock \\\n    && /opt/conda/bin/conda clean -afy \\\n    && groupadd -r conda --gid 900 \\\n    && usermod -aG conda ${USERNAME} \\\n    && chown -R :conda /opt/conda \\\n    && chmod -R g+w /opt/conda \\\n    && find /opt -type d | xargs -n 1 chmod g+s\n\n# Copy environment, which will be filtered for later staged\nCOPY --chown=$USER_UID:conda environment.yml /tmp/build/\n\n# Create mount points for tests\nRUN mkdir -p /test && chown ${USER_UID}:${USER_GID} /test\nVOLUME /test\n\n# Add a section to /etc/bash.bashrc that ensures that a section is present at the end of ~/.bashrc.\n# We can't just write to .bashrc from here because it will be overwritten if the vscode user has\n# opted to use their own dotfiles repo. The dotfiles repo is cloned after the postCreateCommand\n# in the devcontainer.json file is executed.\nRUN echo \"\\n\\\nif ! grep -q \\\"^source /opt/conda/etc/profile.d/conda.sh\\\" ${HOME}/.bashrc; then\\n\\\n\techo \\\"source /opt/conda/etc/profile.d/conda.sh\\\" >> ${HOME}/.bashrc\\n\\\n\techo \\\"conda activate $(grep 'name:' /tmp/build/environment.yml | awk '{print $2}')\\\" >> ${HOME}/.bashrc\\n\\\nfi\\n\" >> /etc/bash.bashrc\n\nENV TINI_VERSION v0.19.0\nADD https://github.com/krallin/tini/releases/download/${TINI_VERSION}/tini /tini\nRUN chmod +x /tini\n\nFROM gadgetron_baseimage AS gadgetron_dev_cuda\nARG USER_UID\nUSER ${USER_UID}\nRUN grep -v \"#.*\\<NOFILTER\\>\" /tmp/build/environment.yml > /tmp/build/filtered_environment.yml\nRUN umask 0002 && /opt/conda/bin/conda env create -f /tmp/build/filtered_environment.yml && /opt/conda/bin/conda clean -afy && sudo chown -R :conda /opt/conda\nUSER root\n\nFROM gadgetron_baseimage AS gadgetron_dev_nocuda\nARG USER_UID\nUSER ${USER_UID}\nRUN grep -v \"#.*\\<cuda\\>\" /tmp/build/environment.yml > /tmp/build/filtered_environment.yml\nRUN umask 0002 && /opt/conda/bin/conda env create -f /tmp/build/filtered_environment.yml && /opt/conda/bin/conda clean -afy && sudo chown -R :conda /opt/conda\nUSER root\n\nFROM gadgetron_dev_cuda AS gadgetron_cudabuild\nARG USER_UID\nUSER ${USER_UID}\nWORKDIR /opt\nRUN sudo chown $USER_UID:$USER_GID /opt && mkdir -p /opt/code/gadgetron && mkdir -p /opt/package\nCOPY --chown=$USER_UID:conda . /opt/code/gadgetron/\nSHELL [\"/bin/bash\", \"-c\"]\nRUN . /opt/conda/etc/profile.d/conda.sh && umask 0002 && conda activate gadgetron && sh -x && \\\n    cd /opt/code/gadgetron && \\\n    mkdir build && \\\n    cd build && \\\n    cmake ../ -GNinja -DUSE_MKL=ON -DCMAKE_INSTALL_PREFIX=/opt/package && \\\n    ninja && \\\n    ninja install\n\nFROM gadgetron_dev_nocuda AS gadgetron_nocudabuild\nARG USER_UID\nUSER ${USER_UID}\nWORKDIR /opt\nRUN sudo chown $USER_UID:$USER_GID /opt && mkdir -p /opt/code/gadgetron && mkdir -p /opt/package\nCOPY --chown=$USER_UID:conda . /opt/code/gadgetron/\nSHELL [\"/bin/bash\", \"-c\"]\nRUN . /opt/conda/etc/profile.d/conda.sh && umask 0002 && conda activate gadgetron && sh -x && \\\n    cd /opt/code/gadgetron && \\\n    mkdir build && \\\n    cd build && \\\n    cmake ../ -GNinja -DUSE_MKL=ON -DCMAKE_INSTALL_PREFIX=/opt/package && \\\n    ninja && \\\n    ninja install\n\nFROM gadgetron_baseimage AS gadgetron_rt_cuda\nARG USER_UID\nUSER ${USER_UID}\nRUN grep -v \"#.*\\<dev\\>\" /tmp/build/environment.yml > /tmp/build/filtered_environment.yml\nRUN umask 0002 && /opt/conda/bin/conda env create -f /tmp/build/filtered_environment.yml && /opt/conda/bin/conda clean -afy && sudo chown -R :conda /opt/conda\nCOPY --from=gadgetron_cudabuild --chown=$USER_UID:conda /opt/package /opt/conda/envs/gadgetron/\nCOPY --from=gadgetron_cudabuild --chown=$USER_UID:conda /opt/code/gadgetron/docker/entrypoint.sh /opt/\nRUN chmod +x /opt/entrypoint.sh\nRUN sudo mkdir -p /opt/integration-test && sudo chown ${USER_GID}:${USER_UID} /opt/integration-test\nCOPY --from=gadgetron_cudabuild --chown=$USER_UID:conda /opt/code/gadgetron/test/integration /opt/integration-test/\nENTRYPOINT [ \"/tini\", \"--\", \"/opt/entrypoint.sh\" ]\n\nFROM gadgetron_baseimage AS gadgetron_rt_nocuda\nARG USER_UID\nUSER ${USER_UID}\nRUN grep -v \"#.*\\<cuda\\|dev\\>\" /tmp/build/environment.yml > /tmp/build/filtered_environment.yml\nRUN umask 0002 && /opt/conda/bin/conda env create -f /tmp/build/filtered_environment.yml && /opt/conda/bin/conda clean -afy && sudo chown -R :conda /opt/conda\nCOPY --from=gadgetron_nocudabuild --chown=$USER_UID:conda /opt/package /opt/conda/envs/gadgetron/\nCOPY --from=gadgetron_nocudabuild --chown=$USER_UID:conda /opt/code/gadgetron/docker/entrypoint.sh /opt/\nRUN chmod +x /opt/entrypoint.sh\nRUN sudo mkdir -p /opt/integration-test && sudo chown ${USER_GID}:${USER_UID} /opt/integration-test\nCOPY --from=gadgetron_nocudabuild --chown=$USER_UID:conda /opt/code/gadgetron/test/integration /opt/integration-test/\nENTRYPOINT [ \"/tini\", \"--\", \"/opt/entrypoint.sh\" ]\n"
}