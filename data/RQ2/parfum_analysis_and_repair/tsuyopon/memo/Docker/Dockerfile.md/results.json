{
  "startTime": 1674250716723,
  "endTime": 1674250717568,
  "originalSmells": [
    {
      "rule": "yumInstallRmVarCacheYum",
      "position": {
        "lineStart": 43,
        "lineEnd": 43,
        "columnStart": 4,
        "columnEnd": 24
      }
    },
    {
      "rule": "yumInstallRmVarCacheYum",
      "position": {
        "lineStart": 130,
        "lineEnd": 130,
        "columnStart": 4,
        "columnEnd": 24
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# 概要\nDockerfileに指定できる値についてまとめています。\n\nDockerfile への記法についてはリファレンスも参考のこと\n- https://docs.docker.jp/engine/reference/builder.html\n\n# 詳細\n\n### コマンド\nDockerfileでは以下のコマンドを利用することができます。\n```\nFROM ... ベースとなるイメージ\nRUN ... docker build 時に実行するコマンド\nCMD ... docker run 時に実行するコマンド\nENTRYPOINT ... docker run 時に実行するコマンド\nMAINTAINER ... 作者情報\nLABEL ... ラベル情報(メタデータ)\nEXPOSE ... 公開ポート番号\nENV ... 環境変数\nARG ... 一時変数\nCOPY ... ホストからコンテナへのファイルコピー\nADD ... ホストからコンテナへのファイルコピー\nVOLUME ... ボリューム\nUSER ... 実行ユーザ\nSHELL ... シェル指定\nWORKDIR ... ワークディレクトリ(コンテナログイン時のディレクトリを指定する)\nONBUILD ... ビルド時に実行するコマンド\nSTOPSIGNAL ... コンテナ終了時に送信されるシグナル\nHEALTHCHECK ... ヘルスチェック\n```\n- 参考: http://www.tohoho-web.com/docker/dockerfile.html\n\n\n\n### FROM\nこのイメージをベースにしてこれから記述するコマンドを実施するという意味です。\n```\nFROM centos:centos7\n```\n\n### RUN\nFROMで指定したイメージにパッケージをインストールする場合にはRUNを用います。\n```\nRUN yum -y install httpd && rm -rf /var/cache/yum\n```\n\n### COPY\nDockerイメージ内にコピーしたいファイルを指定します。\n以下の例では、hoge.txtをDockerイメージ上の/tmpにコピーします。\n```\nFROM centos:centos7\n\nCOPY hoge.txt /tmp\n```\n\n### ADD\n\nADDはCOPYと似ていますが、以下の2点で異なります。\n- URL指定が可能である\n- tarアーカイブでgzip、bzip2、xzで圧縮されていた場合、自動で展開される\n\n\nhoge.tar.gzは展開して/tmpに配置されます。\n```\nFROM centos:centos7\n\nADD hoge.tar.gz /tmp\n```\n\nまた、次のようにURL上のファイルを指定することもできるます。\n```\nFROM centos:centos7\n\nADD http://ftp.meisei-u.ac.jp/mirror/apache/dist/tomcat/tomcat-8/v8.5.54/bin/apache-tomcat-8.5.54.tar.gz /tmp\n```\n\n### CMD\ndocker runコマンドで実行する際のコマンドを指定します。コマンド内のスペースはカンマで区切ります。\n```\nFROM centos:centos7\n\nCMD [\"free\",\"-t\"]\n```\n\n### ENTRYPOINT\n\ndocker runコマンドで実行する際のコマンドを指定します。\nCMDとの違いとしては、ENTRYPOINTでは、docker run時にENTRYPOINTで指定したコマンドの引数が追加できます。では、dockerrun時に-hオプションを追加してみます。\n\n```\nFROM centos:centos7\n\nCMD [\"-h\"]\nENTRYPOINT [\"free\",\"-t\"]\n```\n\n### ENV\ndocker buildでイメージを作成する際に指定する環境変数を定義することができます\n```\nFROM centos:centos7\n\nENV hoge=fuga\n\nRUN echo $hoge\n```\n\n実行結果は以下の通り\n```\n$ docker build -t envtest .\nSending build context to Docker daemon  2.048kB\nStep 1/3 : FROM centos:centos7\n ---> 5e35e350aded\nStep 2/3 : ENV hoge=fuga\n ---> Using cache\n ---> d910a6b78848\nStep 3/3 : RUN echo $hoge\n ---> Running in 5624ad7d6184\nfuga\nRemoving intermediate container 5624ad7d6184\n ---> 1fb0ac8cba93\nSuccessfully built 1fb0ac8cba93\nSuccessfully tagged envtest:latest\n```\n\n### EXPOSE\nDockerコンテナ内で公開するポートを指定します。\n例えば、Apacheのコンテナを作成して80番ポートを公開するときは以下のようにDockerfileを作成します。\n```\nFROM centos:centos7\n\nRUN yum install -y httpd && rm -rf /var/cache/yum\n\nEXPOSE 80\nCMD [\"apachectl\", \"-D\", \"FOREGROUND\"]\n```\n\n### USER\n実行ユーザーを指定することができます。\n```\nFROM centos:centos7\n\nRUN adduser nobody\n\nUSER nobody\n\nRUN echo \"hoge\" > /tmp/hoge.txt\n```\n\n"
}