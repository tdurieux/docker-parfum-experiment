{
  "startTime": 1674256159092,
  "endTime": 1674256160093,
  "originalSmells": [
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 7,
        "lineEnd": 7,
        "columnStart": 4,
        "columnEnd": 24
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 27,
        "lineEnd": 27,
        "columnStart": 4,
        "columnEnd": 35
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 37,
        "lineEnd": 37,
        "columnStart": 6,
        "columnEnd": 54
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 40,
        "lineEnd": 40,
        "columnStart": 4,
        "columnEnd": 20
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 6,
        "lineEnd": 6,
        "columnStart": 59,
        "columnEnd": 125
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# build stage\nFROM --platform=$BUILDPLATFORM node:16-buster as frontend-build-stage\n\nARG BUILDARCH\nWORKDIR /app\nCOPY frontend/ .\nRUN if [ \"$BUILDARCH\" != \"amd64\" ]; then \\\n apt-get update && apt-get install -y build-essential python3 --no-install-recommends; rm -rf /var/lib/apt/lists/*; fi\nRUN npm install -g npm@8 && npm ci && npm cache clean --force;\nRUN npm run docker:build\n\nFROM python:3.9-buster as backend-build-stage\n\nARG TARGETARCH\nARG ROTKI_VERSION\nENV PACKAGE_FALLBACK_VERSION=$ROTKI_VERSION\nARG PYINSTALLER_VERSION=v5.2\nRUN python3 -m venv /opt/venv\nENV PATH=\"/opt/venv/bin:$PATH\"\n\nRUN if [ \"$TARGETARCH\" != \"amd64\" ]; then curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y; fi\nENV PATH=\"/root/.cargo/bin:${PATH}\"\nRUN if [ \"$TARGETARCH\" != \"amd64\" ]; then rustup default nightly-2021-03-24; fi\n\nRUN python3 -m pip install --upgrade pip setuptools wheel\nCOPY ./requirements.txt /app/requirements.txt\n\nWORKDIR /app\nRUN pip install --no-cache-dir -r requirements.txt\n\nCOPY . /app\n\nRUN if [ \"$TARGETARCH\" != \"amd64\" ];then \\\n      git clone https://github.com/pyinstaller/pyinstaller.git && \\\n      cd pyinstaller && git checkout ${PYINSTALLER_VERSION} && \\\n      cd bootloader && ./waf all && cd .. && \\\n      python setup.py install; \\\n    else \\\n      pip install --no-cache-dir pyinstaller==${PYINSTALLER_VERSION}; \\\n    fi\n\nRUN pip install --no-cache-dir -e . && \\\n    python -c \"import sys;from rotkehlchen.db.misc import detect_sqlcipher_version; version = detect_sqlcipher_version();sys.exit(0) if version == 4 else sys.exit(1)\" && \\\n    PYTHONOPTIMIZE=2 pyinstaller --noconfirm --clean --exclude-module debugimporter --distpath /tmp/dist rotkehlchen.spec\n\nFROM nginx:1.21 as runtime\n\nLABEL maintainer=\"Rotki Solutions GmbH <info@rotki.com>\"\n\nARG REVISION\nARG ROTKI_VERSION\nENV REVISION=$REVISION\nENV ROTKI_VERSION=$ROTKI_VERSION\n\nRUN apt-get update && \\\n    apt-get install -y procps python3 --no-install-recommends && \\\n    apt-get clean && \\\n    rm -rf /var/lib/apt/lists/*\n\nCOPY --from=backend-build-stage /tmp/dist /opt/rotki\nCOPY --from=frontend-build-stage /app/app/dist /opt/rotki/frontend\n\nRUN APP=$(find \"/opt/rotki\" -name \"rotki-core-*-linux\"  | head -n 1) && \\\n    echo \"${APP}\" && \\\n    ln -s \"${APP}\" /usr/sbin/rotki\n\nVOLUME [\"/data\", \"/logs\", \"/config\"]\n\nEXPOSE 80\n\nCOPY ./packaging/docker/nginx.conf /etc/nginx/conf.d/default.conf\nCOPY ./packaging/docker/entrypoint.py /opt/rotki\nCMD [\"sh\", \"-c\", \"/opt/rotki/entrypoint.py\"]\n\nHEALTHCHECK CMD curl --fail http://localhost/api/1/ping || exit 1\n"
}