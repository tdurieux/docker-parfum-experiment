{
  "startTime": 1674250111928,
  "endTime": 1674250112900,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 6,
        "lineEnd": 6,
        "columnStart": 4,
        "columnEnd": 50
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 44,
        "lineEnd": 44,
        "columnStart": 39,
        "columnEnd": 71
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 11,
        "lineEnd": 17,
        "columnStart": 4,
        "columnEnd": 33
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 11,
        "lineEnd": 17,
        "columnStart": 4,
        "columnEnd": 33
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM tensorflow/tensorflow:2.6.0-gpu-jupyter\n\n# Ignore all interactive dialog during apt-get update\nENV DEBIAN_FRONTEND noninteractive\n\n# nodejs source\nRUN curl -f -sL https://deb.nodesource.com/setup_12.x | bash -\n\n# Install linux package\nRUN apt-mark hold libcudnn* cuda*; \\\n    apt-get update && apt-get upgrade -y; \\\n    apt-get install --no-install-recommends -y \\\n        build-essential gcc gfortran libgfortran3 \\\n        libproj-dev proj-data proj-bin libgeos-dev \\\n        libx11-dev libx11-xcb-dev xorg openbox \\\n        openssh-server \\\n        sudo vim git nodejs ffmpeg \\\n        htop iotop screen reptyr; rm -rf /var/lib/apt/lists/*;\n\n# Add all user into sudoers\nRUN echo '%staff   ALL=(ALL:ALL) ALL' >> /etc/sudoers;\n\n# Install python packages in requirements.txt\nCOPY requirements.txt /tmp/\nRUN python -m pip install --upgrade pip; \\\n    python -m pip install shapely --no-binary shapely; \\\n    python -m pip --no-cache-dir install --upgrade --requirement /tmp/requirements.txt;\n\n# Install development related python packages in requirements_dev.txt\nCOPY requirements_dev.txt /tmp/\nRUN python -m pip --no-cache-dir install --upgrade --requirement /tmp/requirements_dev.txt;\n\n# Jupyter Lab interactive plot\nRUN jupyter labextension install @jupyter-widgets/jupyterlab-manager --no-build; \\\n    jupyter labextension install jupyter-matplotlib --no-build; \\\n    jupyter lab build;\n\n# Change jupyter python kernel\nRUN sed -i 's/\\/usr\\/bin\\/python3/\\/usr\\/local\\/bin\\/python/g' /usr/local/share/jupyter/kernels/python3/kernel.json;\n\n# Install SEISAN\nRUN mkdir /opt/seismo;\nCOPY docker/seisan/seisan_v11_linux_64.tar.gz /opt/seismo/\nWORKDIR /opt/seismo\nRUN gunzip seisan_v11_linux_64.tar.gz; tar xvf seisan_v11_linux_64.tar; rm seisan_v11_linux_64.tar \\\n    sed -i 's/SEISARCH=\"linux64\"/SEISARCH=\"gfortran\"/g' /opt/seismo/COM/SEISAN.bash; \\\n    sed -i 's/SEISAN_TOP=\"\\/home\\/s2000\\/seismo\"/SEISAN_TOP=\"\\/opt\\/seismo\"/g' /opt/seismo/COM/SEISAN.bash; \\\n    chmod 777 -R /opt/seismo\n\n# Fix X11 forwarding request failed on channel 0\nRUN sed -i 's/#X11UseLocalhost yes/X11UseLocalhost no/g' /etc/ssh/sshd_config;\n\n# SSH login fix. Otherwise user is kicked off after login\nRUN mkdir /var/run/sshd; \\\n    sed -i 's/PermitRootLogin prohibit-password/PermitRootLogin yes/' /etc/ssh/sshd_config; \\\n    sed -i 's@session\\s*required\\s*pam_loginuid.so@session optional pam_loginuid.so@g' /etc/pam.d/sshd;\n\n# Hide server profile form docker container, only which written into '/etc/profile' will be seen\nENV NOTVISIBLE \"in users profile\"\nRUN echo \"export VISIBLE=now\" >> /etc/profile;\n\n# Set CUDA path and SeisBlue source code path\nRUN echo \"export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/usr/local/cuda/lib64:/usr/local/cuda/extras/CUPTI/lib64\" >> /etc/profile; \\\n    echo \"export PYTHONPATH=$PYTHONPATH:/SeisBlue\" >> /etc/profile;\n\n# Delete tensorflow login message for sftp login by replacing default .bashrc\nRUN mv /etc/bash.bashrc /etc/bash.bashrc.old; \\\n    cp /etc/skel/.bashrc /etc/bash.bashrc;\n\n# Add SEISAN to bashrc\nRUN echo 'source /opt/seismo/COM/SEISAN.bash' >> /etc/bash.bashrc; \\\n    echo 'alias select=\"/home/user/seismo/PRO/select\"' >> /etc/bash.bashrc;\n\n# Open SSH port 22 and make SSHD standby for incoming connection\nEXPOSE 22\nCMD [\"/usr/sbin/sshd\", \"-D\"]\n"
}