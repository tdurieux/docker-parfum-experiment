{
  "startTime": 1674255248230,
  "endTime": 1674255249756,
  "originalSmells": [
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 61,
        "lineEnd": 61,
        "columnStart": 4,
        "columnEnd": 59
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 16,
        "lineEnd": 24,
        "columnStart": 8,
        "columnEnd": 38
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 8,
        "lineEnd": 9,
        "columnStart": 4,
        "columnEnd": 55
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 16,
        "lineEnd": 24,
        "columnStart": 8,
        "columnEnd": 38
      }
    }
  ],
  "repairedSmells": [
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 16,
        "lineEnd": 24,
        "columnStart": 8,
        "columnEnd": 38
      }
    }
  ],
  "repairedDockerfile": "ARG BASE=debian:bullseye\n\nFROM $BASE\n\n# We use bash instead of /bin/sh as ESP-IDF doesn't support /bin/sh\nSHELL [\"/bin/bash\", \"-c\"]\n\nRUN apt-get update && \\\n    apt-get install -y --no-install-recommends \\\n        apt-utils wget software-properties-common gnupg && rm -rf /var/lib/apt/lists/*;\n\nRUN wget -O - https://apt.llvm.org/llvm-snapshot.gpg.key | apt-key add -; \\\n    add-apt-repository \"deb http://apt.llvm.org/bullseye/ llvm-toolchain-bullseye-11 main\";\n\nRUN env DEBIAN_FRONTEND=noninteractive \\\n        apt-get update; \\\n        apt-get install -y --no-install-recommends \\\n        git ssh rsync tar \\\n        clang-11 llvm-11 clang-tidy-11 libc++-11-dev libc++abi-11-dev \\\n        gcc-10 g++-10 \\\n        cmake make ninja-build valgrind gdb \\\n        python3 python3-pip python3-venv \\\n        doxygen graphviz \\\n        libarmadillo-dev libvtk7-dev libvtk7-qt-dev qtdeclarative5-dev \\\n        gazebo libgazebo-dev libz3-dev && rm -rf /var/lib/apt/lists/*;\n\nRUN for i in `dpkg-query -L llvm-11 | cut -d: -f2 | grep '/usr/bin/[^/]*-11'`; do F=`echo $i | sed 's/-11$//'`; test -f $F || { echo $F; ln -s $i $F; }; done\nRUN for i in `dpkg-query -L clang-11 | cut -d: -f2 | grep '/usr/bin/[^/]*-11'`; do F=`echo $i | sed 's/-11$//'`; test -f $F || { echo $F; ln -s $i $F; }; done\nRUN for i in `dpkg-query -L clang-tidy-11 | cut -d: -f2 | grep '/usr/bin/[^/]*-11'`; do F=`echo $i | sed 's/-11//'`; test -f $F || { echo $F; ln -s $i $F; }; done\nRUN for i in `dpkg-query -L gcc-10 | cut -d: -f2 | grep '/usr/bin/[^/].*-10'`; do F=`echo $i | sed 's/-10$//'`; test -f $F || { echo $F; ln -s $i $F; }; done\nRUN for i in `dpkg-query -L g++-10 | cut -d: -f2 | grep '/usr/bin/[^/].*-10'`; do F=`echo $i | sed 's/-10$//'`; test -f $F || { echo $F; ln -s $i $F; }; done\n\nRUN clang++ --version\nRUN g++ --version\nRUN llvm-cov --version\nRUN gcov --version\nRUN clang-tidy --version\n\n# Install ARM Toolchain for STM32\nRUN cd /tmp && \\\n    wget https://developer.arm.com/-/media/Files/downloads/gnu-rm/10.3-2021.10/gcc-arm-none-eabi-10.3-2021.10-x86_64-linux.tar.bz2 && \\\n    tar -xf gcc-arm-none-eabi-10.3-2021.10-x86_64-linux.tar.bz2 --directory /opt && \\\n    cd /tmp && \\\n    rm gcc-arm-none-eabi-10.3-2021.10-x86_64-linux.tar.bz2\nENV PATH=\"/opt/gcc-arm-none-eabi-10.3-2021.10/bin:${PATH}\"\nRUN arm-none-eabi-g++ --version\nRUN arm-none-eabi-gcc --version\n\n# Install Xtensa Toolchan for ESP32\nENV ROFI_TOOLS_PATH=/opt/esp32\nRUN mkdir -p $ROFI_TOOLS_PATH && \\\n    IDF_PATH=$ROFI_TOOLS_PATH/esp-idf && \\\n    git clone --depth 1 --branch v4.3.2 --recursive \\\n            https://github.com/espressif/esp-idf.git $IDF_PATH\nRUN export IDF_PATH=$ROFI_TOOLS_PATH/esp-idf && \\\n    export IDF_TOOLS_PATH=$ROFI_TOOLS_PATH/esp-tools && \\\n    echo $IDF_PATH, $IDF_TOOLS_PATH && \\\n    $IDF_PATH/install.sh && \\\n    # When we use IDF, it brings python venv; thus if we want to build doc,\n    # we have to install spinx and breathe into the venv\n    . $IDF_PATH/export.sh && \\\n    pip install --no-cache-dir sphinx breathe myst_parser sphinx_rtd_theme\n\n# Newer Ubuntu (21.10) miss libdl.so which is (probably) required by VTK.\n# This is a temporary work-around until we migrate to VTK 9.\nRUN if [ ! -e /usr/lib/x86_64-linux-gnu/libdl.so ] ; then \\\n        ln -s /usr/lib/x86_64-linux-gnu/libdl.so.2 /usr/lib/x86_64-linux-gnu/libdl.so; \\\n    fi\n\nRUN ldconfig\n\nCMD [\"bash\"]\n"
}