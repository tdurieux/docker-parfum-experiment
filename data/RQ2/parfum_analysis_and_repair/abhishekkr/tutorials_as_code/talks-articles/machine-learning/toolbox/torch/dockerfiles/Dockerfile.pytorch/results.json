{
  "startTime": 1674255248763,
  "endTime": 1674255249359,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 10,
        "lineEnd": 10,
        "columnStart": 4,
        "columnEnd": 82
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 32,
        "lineEnd": 32,
        "columnStart": 4,
        "columnEnd": 97
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 58,
        "lineEnd": 58,
        "columnStart": 4,
        "columnEnd": 26
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 61,
        "lineEnd": 61,
        "columnStart": 4,
        "columnEnd": 61
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 69,
        "lineEnd": 69,
        "columnStart": 4,
        "columnEnd": 24
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 3,
        "lineEnd": 6,
        "columnStart": 22,
        "columnEnd": 8
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM ubuntu:16.04\n\n# Install curl and sudo\nRUN apt-get update && apt-get install --no-install-recommends -y \\\n    curl \\\n    ca-certificates \\\n    sudo \\\n && rm -rf /var/lib/apt/lists/*\n\n# Use Tini as the init process with PID 1\nRUN curl -f -Lso /tini https://github.com/krallin/tini/releases/download/v0.14.0/tini \\\n && chmod +x /tini\nENTRYPOINT [\"/tini\", \"--\"]\n\n# Create a working directory\nRUN mkdir /app\nWORKDIR /app\n\n# Create a non-root user and switch to it\nRUN adduser --disabled-password --gecos '' --shell /bin/bash user \\\n && chown -R user:user /app\nRUN echo \"user ALL=(ALL) NOPASSWD:ALL\" > /etc/sudoers.d/90-user\nUSER user\n\n# Install Git, bzip2, and X11 client\nRUN sudo apt-get update && sudo apt-get install -y --no-install-recommends \\\n    git \\\n    bzip2 \\\n    libx11-6 \\\n && sudo rm -rf /var/lib/apt/lists/*\n\n# Install Miniconda\nRUN curl -f -so ~/miniconda.sh https://repo.continuum.io/miniconda/Miniconda3-4.3.14-Linux-x86_64.sh \\\n && chmod +x ~/miniconda.sh \\\n && ~/miniconda.sh -b -p ~/miniconda \\\n && rm ~/miniconda.sh\n\n# Create a Python 3.6 environment\nRUN /home/user/miniconda/bin/conda install conda-build \\\n && /home/user/miniconda/bin/conda create -y --name pytorch-py36 \\\n    python=3.6.0 numpy pyyaml scipy ipython mkl \\\n && /home/user/miniconda/bin/conda clean -ya\nENV PATH=/home/user/miniconda/envs/pytorch-py36/bin:$PATH \\\n    CONDA_DEFAULT_ENV=pytorch-py36 \\\n    CONDA_PREFIX=/home/user/miniconda/envs/pytorch-py36\n\n# No CUDA-specific steps\nENV NO_CUDA=1\n\n# Install PyTorch and Torchvision\nRUN conda install -y --name pytorch-py36 -c soumith \\\n    pytorch=0.2.0 torchvision=0.1.9 \\\n && conda clean -ya\n\n# Install HDF5 Python bindings\nRUN conda install -y --name pytorch-py36 \\\n    h5py \\\n && conda clean -ya\nRUN pip install --no-cache-dir h5py-cache\n\n# Install Torchnet, a high-level framework for PyTorch\nRUN pip install --no-cache-dir git+https://github.com/pytorch/tnt.git@master\n\n# Install Requests, a Python library for making HTTP requests\nRUN conda install -y --name pytorch-py36 requests && conda clean -ya\n\n# Install Graphviz\nRUN conda install -y --name pytorch-py36 graphviz=2.38.0 \\\n && conda clean -ya\nRUN pip install --no-cache-dir graphviz\n\n# Install OpenCV3 Python bindings\nRUN sudo apt-get update && sudo apt-get install -y --no-install-recommends \\\n    libgtk2.0-0 \\\n    libcanberra-gtk-module \\\n && sudo rm -rf /var/lib/apt/lists/*\nRUN conda install -y --name pytorch-py36 -c menpo opencv3 \\\n && conda clean -ya\n\n# Set the default command to python3\nCMD [\"python3\"]\n"
}