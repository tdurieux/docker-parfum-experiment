{
  "startTime": 1674250994321,
  "endTime": 1674250995704,
  "originalSmells": [
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 16,
        "lineEnd": 16,
        "columnStart": 4,
        "columnEnd": 49
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 56,
        "lineEnd": 56,
        "columnStart": 4,
        "columnEnd": 57
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 16,
        "lineEnd": 16,
        "columnStart": 4,
        "columnEnd": 49
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 21,
        "lineEnd": 21,
        "columnStart": 7,
        "columnEnd": 70
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 56,
        "lineEnd": 56,
        "columnStart": 4,
        "columnEnd": 57
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "################################################################################\n##\n## EGroupware FPM container using Ubuntu 18.04 and PHP 7.3 from ondrej/php PPA\n##\n################################################################################\nFROM ubuntu:20.04\nMAINTAINER rb@egroupware.org\n\nARG VERSION=dev-master\nARG PHP_VERSION=7.4\n\n# keeping build-arg in environment for entrypoint.sh\nENV VERSION=$VERSION\nENV PHP_VERSION=$PHP_VERSION\n\nRUN apt-get update \\\n\t&& apt-get install --no-install-recommends -y software-properties-common \\\n\t&& LC_ALL=C.UTF-8 add-apt-repository -y ppa:ondrej/php \\\n\t&& apt-get update \\\n\t&& bash -c \"apt-get install -y php$PHP_VERSION-{cli,mysql,gd,xsl,bz2,opcache,tidy,zip,bcmath,mbstring,smbclient,ldap,curl,fpm,pgsql,gmp,memcached}\" \\\n\t# php8.{0,1}-apcu recommends (not needed) php-apcu-bc, which cause PHP 7.4 to be installed :(\n    && apt-get install --no-install-recommends -y php$PHP_VERSION-apcu \\\n\t&& bash -c \"[[ $PHP_VERSION =~ ^8\\..* ]] || apt-get install -y php$PHP_VERSION-json\" \\\n\t# fpm and php.ini settings\n\t&& sed -e 's/^;\\?listen \\?=.*/listen = 9000/g' \\\n\t\t-e '/allowed_clients/d' \\\n\t\t-e '/pm.max_children/s/=.*/= 80/' \\\n\t\t-e '/pm.start_servers/s/=.*/= 10/' \\\n\t\t-e '/pm.min_spare_servers/s/=.*/= 10/' \\\n\t\t-e '/pm.max_spare_servers/s/=.*/= 20/' \\\n\t\t-e '/catch_workers_output/s/^;/;/' \\\n\t\t-e '/error_log/d' \\\n\t\t-e 's/^;\\?pm.max_requests =.*/pm.max_requests = 30/' \\\n\t\t-e 's/^;\\?php_admin_value\\[memory_limit\\].*/php_admin_value[memory_limit] = 172M/' \\\n\t\t-e 's/^;\\?request_terminate_timeout.*/request_terminate_timeout = 70m/' \\\n\t\t-i /etc/php/$PHP_VERSION/fpm/pool.d/www.conf \\\n\t&& sed \t-e 's/^;\\?session.gc_maxlifetime.*/session.gc_maxlifetime=14400/g' \\\n\t\t-e 's|^;\\?date.timezone.*|date.timezone = UTC|g' \\\n\t\t-e 's|^;\\?sys_temp_dir.*|sys_temp_dir = /tmp|g' \\\n\t\t-e 's|^;\\?disable_functions.*|disable_functions = exec,passthru,shell_exec,system,proc_open,popen|g' \\\n\t\t-e 's|^;\\?max_execution_time \\?=.*|max_execution_time = 90|g' \\\n\t\t-e 's|^;\\?upload_max_filesize \\?=.*|upload_max_filesize = 64M|g' \\\n\t\t-e 's|^;\\?post_max_size \\?=.*|post_max_size = 65M|g' \\\n\t\t-e 's|^;\\?max_input_vars \\?=.*|max_input_vars = 2000|g' \\\n\t\t-e 's|^;\\?zlib.output_compression \\?=.*|zlib.output_compression = On|g' \\\n\t\t-e 's|^;\\?opcache.validate_timestamps \\?=.*|opcache.validate_timestamps=0|g' \\\n\t\t-i /etc/php/$PHP_VERSION/fpm/php.ini \\\n\t&& sed \t-e 's|^;\\?date.timezone.*|date.timezone = UTC|g' \\\n\t\t-e 's|^;\\?sys_temp_dir.*|sys_temp_dir = /tmp|g' \\\n\t\t-i /etc/php/$PHP_VERSION/cli/php.ini \\\n\t# create directory for pid file\n\t&& mkdir -p /run/php \\\n\t# send logs to stderr to be viewed by docker logs\n\t&& ln -s /dev/stderr /var/log/php$PHP_VERSION-fpm.log \\\n\t&& update-alternatives --install /usr/sbin/php-fpm php-fpm /usr/sbin/php-fpm$PHP_VERSION 5 \\\n\t# install tools to build EGroupware\n\t&& apt-get install --no-install-recommends -y rsync npm zip curl sudo cron patch \\\n\t&& npm install -g grunt-cli \\\n\t&& bash -c \\\n'EXPECTED_SIGNATURE=$(curl https://composer.github.io/installer.sig); \\\ncurl https://getcomposer.org/installer > composer-setup.php; \\\nACTUAL_SIGNATURE=$(php -r \"echo hash_file(\\\"sha384\\\", \\\"composer-setup.php\\\");\"); \\\nif [ \"$EXPECTED_SIGNATURE\" != \"$ACTUAL_SIGNATURE\" ]; \\\nthen \\\n    >&2 echo \"ERROR: Invalid Composer installer signature\"; \\\n    RESULT=1; \\\nelse \\\n\tphp composer-setup.php --quiet --install-dir /usr/local/bin; \\\n\tRESULT=$?; \\\nfi; \\\nrm composer-setup.php; \\\nexit $RESULT' \\\n\t&& cd /usr/share \\\n    # not all dependencies already allow PHP 8.x, thought what we use from them works\n    && bash -c \"[[ $PHP_VERSION  =~ ^8\\..* ]]\" && COMPOSER_EXTRA=--ignore-platform-reqs || true \\\n\t&& composer.phar create-project $COMPOSER_EXTRA --prefer-dist --no-scripts --no-dev egroupware/egroupware:$VERSION \\\n\t&& cd egroupware \\\n\t&& npm install \\\n\t&& grunt \\\n\t# clean up and remove caches\n\t&& composer.phar clear-cache \\\n\t&& rm -f /usr/local/bin/composer.phar \\\n\t&& npm uninstall -g grunt-cli \\\n\t&& npm cache clear --force \\\n\t&& apt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false npm zip \\\n\t&& apt-get clean \\\n\t# create data directory\n\t&& mkdir -p /var/lib/egroupware/default/files/sqlfs \\\n\t&& mkdir -p /var/lib/egroupware/default/backup \\\n\t&& chown -R www-data:www-data /var/lib/egroupware \\\n\t&& chmod 700 /var/lib/egroupware/ \\\n\t&& ln -s /var/lib/egroupware/header.inc.php /usr/share/egroupware \\\n\t# create directory for push config\n\t&& mkdir -p /var/lib/egroupware-push \\\n    && chown -R www-data:www-data /var/lib/egroupware-push \\\n    && ln -s /var/lib/egroupware-push/config.inc.php /usr/share/egroupware/swoolepush \\\n\t# install cron-job and disable fallback async service and ability to switch them off in admin\n\t&& sed 's/apache/www-data/' doc/rpm-build/egroupware.cron > /etc/cron.d/egroupware \\\n\t&& patch -p1 < doc/rpm-build/asyncservice.patch \\\n\t# disable certificate checks for LDAP as most LDAP and AD servers have no \"valid\" cert\n\t&& echo \"TLS_REQCERT never\" >> /etc/ldap/ldap.conf \\\n\t# mv sources to a different directory so entrypoint can rsync them to volumn for both nginx and fpm\n\t&& mv /usr/share/egroupware /usr/share/egroupware-sources && rm -rf /var/lib/apt/lists/*;\n\nVOLUME /usr/share/egroupware\nVOLUME /var/lib/egroupware\nVOLUME /var/lib/php/sessions\nVOLUME /var/lib/egroupware-push\n\nEXPOSE 9000\n\nADD entrypoint.sh /\n\nCMD [\"php-fpm\", \"--nodaemonize\"]\nENTRYPOINT [\"/entrypoint.sh\"]"
}