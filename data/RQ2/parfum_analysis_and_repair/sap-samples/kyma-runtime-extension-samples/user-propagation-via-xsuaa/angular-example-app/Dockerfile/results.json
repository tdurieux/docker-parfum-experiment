{
  "startTime": 1674253279066,
  "endTime": 1674253279716,
  "originalSmells": [
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 7,
        "lineEnd": 7,
        "columnStart": 4,
        "columnEnd": 31
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# This Dockerfile must be execute with higher context, because firstly we have to create react components lib with local changes.\n# If you want to build image without local changes of react components, delete 16 line of code.\n\nFROM node:14.8.0-alpine3.11 as builder\n\nCOPY package.json package-lock.json ./\n\nRUN npm install -g @angular/cli && npm cache clean --force;\n\n## Storing node modules on a separate layer will prevent unnecessary npm installs at each build\n\nRUN npm ci && mkdir /ng-app && mv ./node_modules ./ng-app\n\nWORKDIR /ng-app\n\nCOPY . .\n\nRUN npm run ng build -- --output-path=dist\n\nRUN ls -l /ng-app/dist/assets\n\n### STAGE 2: Setup ###\n\nFROM nginx:1.14.1-alpine\n\n## Copy our default nginx config\nCOPY nginx.conf /etc/nginx/conf.d/default.conf\n\n## Remove default nginx website\nRUN rm -rf /usr/share/nginx/html/*\n\n## From ‘builder’ stage copy over the artifacts in dist folder to default nginx public folder\nCOPY --from=builder /ng-app/dist /usr/share/nginx/html\n\nEXPOSE 80\n\n## CMD [\"nginx\", \"-g\", \"daemon off;\"]\n\n# When the container starts, replace the env.js with values from environment variables\nCMD [\"/bin/sh\",  \"-c\",  \"envsubst < /usr/share/nginx/html/assets/env.template.js > /usr/share/nginx/html/assets/env.js && exec nginx -g 'daemon off;'\"]"
}