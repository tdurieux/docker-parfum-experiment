{
  "startTime": 1674248911449,
  "endTime": 1674248912428,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 55,
        "lineEnd": 55,
        "columnStart": 4,
        "columnEnd": 115
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 55,
        "lineEnd": 55,
        "columnStart": 42,
        "columnEnd": 89
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "##################################################################################################################################################\n# LICENSE\n# This Dockerfile is provided under the LICENSE defined in the Github repository\n# at https://github.com/SAP-samples/btp-setup-automator\n##################################################################################################################################################\n# STARTING WITH ALL THE SAP TOOLS FIRST\n##################################################################################################################################################\nFROM alpine:3 AS base\nENV ARCH=linux-amd64\nENV TOOLS_URL=tools.hana.ondemand.com\nENV CPCLI_URL=cpcli.cf.eu10.hana.ondemand.com\n\n## Install necessary packages to donwload and install tools\nRUN echo \"http://dl-4.alpinelinux.org/alpine/edge/community\" >> /etc/apk/repositories \\\n    && apk update \\\n    && apk upgrade \\\n    && apk add --no-cache curl jq \\\n    && update-ca-certificates\n\n##########################################################################################\n# Retrieve the CloudFoundry CLI\n##########################################################################################\nFROM cloudfoundry/cli:8.3.0 as cf_cli\n\n##########################################################################################\n## Retrieve the SAP btp CLI\n## Latest is always at https://tools.hana.ondemand.com/additional/btp-cli-linux-amd64-latest.tar.gz\n## Currently we look at https://cpcli.cf.eu10.hana.ondemand.com/actuator/info to find out what the\n## latest supported version on the server side is and use that, specifically.\n##########################################################################################\nFROM base AS btp_cli\nSHELL [\"/bin/ash\", \"-eo\", \"pipefail\", \"-c\"]\nWORKDIR /tmp/tools\n#RUN BTP_CLI_VERSION=\"$(curl --silent --url \"https://$CPCLI_URL/actuator/info\" | jq --raw-output '.app.version')\" \\\nRUN BTP_CLI_VERSION=\"2.18.0\" \\\n  && curl --fail --silent --location --cookie eula_3_1_agreed=\"$TOOLS_URL/developer-license-3_1.txt\" \\\n    --url \"https://$TOOLS_URL/additional/btp-cli-$ARCH-$BTP_CLI_VERSION.tar.gz\" \\\n    | tar -xzf - --strip-components 1 \"$ARCH/btp\"\n\n########################################################################################\n# Retrieve the MTA build tool\n########################################################################################\nFROM base AS mta_build_tool\nSHELL [\"/bin/ash\", \"-eo\", \"pipefail\", \"-c\"]\nWORKDIR /tmp/tools\nRUN MBT_VERSION=\"1.2.10\" \\\n  && curl --fail --silent --location --url \"https://github.com/SAP/cloud-mta-build-tool/releases/download/v${MBT_VERSION}/cloud-mta-build-tool_${MBT_VERSION}_Linux_amd64.tar.gz\" \\\n    | tar -xzf - mbt\n\n########################################################################################\n# Retrieve the Kubernetes CLI, krew and OIDC Plugin (needed for Kyma)\n########################################################################################\nFROM base as kubectl_cli\nSHELL [\"/bin/ash\", \"-eo\", \"pipefail\", \"-c\"]\nWORKDIR /tmp/tools\nRUN curl -f -LO \"https://dl.k8s.io/release/$( curl -f -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl\" \\\n&& chmod +x ./kubectl\n\n########################################################################################\n# Retrieve the helm package manager\n########################################################################################\nFROM base as helm_cli\nSHELL [\"/bin/ash\", \"-eo\", \"pipefail\", \"-c\"]\nWORKDIR /tmp/tools\nRUN apk update upgrade \\\n&& apk add --no-cache bash openssl \\\n&& curl -fsSL -o get_helm.sh https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 \\\n&& chmod 700 get_helm.sh \\\n&& ./get_helm.sh\n\n########################################################################################\n# Bring the tools together into the final base stage\n########################################################################################\nFROM alpine:3 as tools\nWORKDIR /usr/local/bin\nCOPY --from=cf_cli                 /usr/local/bin/cf8 .\nCOPY --from=btp_cli                /tmp/tools/ .\nCOPY --from=mta_build_tool         /tmp/tools/ .\nCOPY --from=kubectl_cli            /tmp/tools/ .\nCOPY --from=helm_cli               /usr/local/bin/helm .\nARG BTPSA_VERSION_GIT_ARG=default\n\n##################################################################################################################################################\n# Now putting all pieces together\n##################################################################################################################################################\nFROM python:3.9-alpine3.16 AS final_build\nENV USERNAME=user\nENV HOME_FOLDER /home/$USERNAME\nENV LIBS_FOLDER $HOME_FOLDER/libs\nENV CONTAINER_NAME=btp-setup-automator\nCOPY config/python/requirements.txt /tmp/pip-tmp/requirements.txt\n\n# Add config folders according to https://specifications.freedesktop.org/basedir-spec/basedir-spec-latest.html\nENV XDG_CONFIG_HOME=$HOME_FOLDER/.config\nENV XDG_DATA_HOME=$HOME_FOLDER/.local/share\nENV XDG_STATE_HOME=$HOME_FOLDER/.local/state\n\nENV CF_HOME=$XDG_CONFIG_HOME/cf\nENV BTP_CLIENTCONFIG=$XDG_CONFIG_HOME/btp/config.json\n\nARG BTPSA_VERSION_GIT_ARG=unknown\nENV BTPSA_VERSION_GIT $BTPSA_VERSION_GIT_ARG\n\nRUN adduser \\\n    --disabled-password \\\n    --gecos \"\" \\\n    --home \"$HOME_FOLDER\" \\\n    --no-create-home \\\n    \"$USERNAME\" \\\n    && apk update \\\n    && apk upgrade \\\n    && apk add --no-cache \\\n               bash \\\n               coreutils \\\n               curl \\\n               git \\\n               jq \\\n               make \\\n               nodejs \\\n               npm \\\n               sudo \\\n    && pip install --no-cache-dir -r /tmp/pip-tmp/requirements.txt \\\n    && rm -rf /tmp/pip-tmp \\\n    ## Set the right timezone in the container image\n    && cp /usr/share/zoneinfo/Europe/Berlin /etc/localtime \\\n##########################################################################################\n# Install CAP CDS \n# - currently (Jun 7th, 2022) it's no longer possible to install CDS\n# - to be determined what the root cause is (seems related to deprecation of v1.x Cloud SDK)\n##########################################################################################\n    && npm install -g @sap/cds-dk --allow-root \\\n    && npm cache clean --force \\\n##########################################################################################\n# Add user to sudo user\n##########################################################################################\n    && echo $USERNAME ALL=\\(root\\) NOPASSWD:ALL > /etc/sudoers.d/$USERNAME \\\n    && chmod 0440 /etc/sudoers.d/$USERNAME\n\n##########################################################################################\n# Fill the image with the necessary resources\n##########################################################################################\nUSER $USERNAME\nWORKDIR $HOME_FOLDER\n\n## Copy all necessary executables from the tools stage\n#COPY --chown=root:root --from=tools /usr/local/bin/cf  /usr/local/bin\nCOPY --chown=root:root --from=tools /usr/local/bin/cf8  /usr/local/bin/cf\nCOPY --chown=root:root --from=tools /usr/local/bin/btp /usr/local/bin\nCOPY --chown=root:root --from=tools /usr/local/bin/mbt /usr/local/bin\nCOPY --chown=root:root --from=tools /usr/local/bin/kubectl /usr/local/bin\nCOPY --chown=root:root --from=tools /usr/local/bin/helm /usr/local/bin\n\n## Install the CF plugin for deploying MTAs on Cloudfoundry\nRUN cf install-plugin -f https://github.com/cloudfoundry-incubator/multiapps-cli-plugin/releases/latest/download/multiapps-plugin.linux32\n\n## Install krew and the oidc-login plugin\nRUN    OS=\"$(uname | tr '[:upper:]' '[:lower:]')\" \\\n    && ARCH=\"$(uname -m | sed -e 's/x86_64/amd64/' -e 's/\\(arm\\)\\(64\\)\\?.*/\\1\\2/' -e 's/aarch64$/arm64/')\" \\ \n    && KREW=\"krew-${OS}_${ARCH}\" \\\n    && curl -fsSLO \"https://github.com/kubernetes-sigs/krew/releases/latest/download/${KREW}.tar.gz\" \\\n    && tar zxvf \"${KREW}.tar.gz\" \\\n    && rm -rf \"${KREW}.tar.gz\" \\\n    && ./\"${KREW}\" install krew \\\n    && PATH=\"$HOME/.krew/bin:$PATH\" \\\n    && kubectl krew install oidc-login \\\n    && rm -rf ./\"${KREW}\"\n# Set the path to the krew binary\nENV PATH \"$PATH:$HOME_FOLDER/.krew/bin\"\n\n## Copy over the all necessary resources\nCOPY --chown=$USERNAME:$USERNAME usecases/              $HOME_FOLDER/usecases/\nCOPY --chown=$USERNAME:$USERNAME tests/                 $HOME_FOLDER/tests/\n\nCOPY --chown=$USERNAME:$USERNAME README.md              $HOME_FOLDER/\nCOPY --chown=$USERNAME:$USERNAME parameters.json        $HOME_FOLDER/\nCOPY --chown=$USERNAME:$USERNAME docs                   $HOME_FOLDER/docs\nCOPY --chown=$USERNAME:$USERNAME libs/python/btpsa      $HOME_FOLDER/\nCOPY --chown=$USERNAME:$USERNAME libs/python/generator  $HOME_FOLDER/\nCOPY --chown=$USERNAME:$USERNAME libs/python/btp_cli.py $LIBS_FOLDER/python/\nCOPY --chown=$USERNAME:$USERNAME libs/python/helper*.py $LIBS_FOLDER/python/\nCOPY --chown=$USERNAME:$USERNAME libs/*.json            $LIBS_FOLDER/\n\nCOPY --chown=$USERNAME:$USERNAME config/                $HOME_FOLDER/config/\n\nCOPY --chown=$USERNAME:$USERNAME .reuse                 $HOME_FOLDER/.reuse\nCOPY --chown=$USERNAME:$USERNAME LICENSES               $HOME_FOLDER/LICENSES\nCOPY --chown=$USERNAME:$USERNAME LICENSE                $HOME_FOLDER/\n\n# Copy over some vscode settings to install the pyhton plugins\nCOPY --chown=$USERNAME:$USERNAME .vscode                    $HOME_FOLDER/.vscode/\n\n# For using outside of VS Code context:\nCMD [\"bash\"]\n"
}