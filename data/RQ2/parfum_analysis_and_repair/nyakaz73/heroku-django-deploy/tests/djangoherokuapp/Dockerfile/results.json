{
  "startTime": 1674254116633,
  "endTime": 1674254117776,
  "originalSmells": [
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 17,
        "lineEnd": 17,
        "columnStart": 7,
        "columnEnd": 27
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 25,
        "lineEnd": 25,
        "columnStart": 4,
        "columnEnd": 35
      }
    },
    {
      "rule": "apkAddUseNoCache",
      "position": {
        "lineStart": 15,
        "lineEnd": 15,
        "columnStart": 7,
        "columnEnd": 60
      }
    },
    {
      "rule": "apkAddUseNoCache",
      "position": {
        "lineStart": 16,
        "lineEnd": 16,
        "columnStart": 7,
        "columnEnd": 29
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "#pull official base image\nFROM python:3.8-alpine\n\n#set work directory\nWORKDIR /app\n\n#set environment variables\n#Prevents Python from writing pyc files to disc\nENV PYTHONDONTWRITEBYTECODE 1\n#Prevents Python from buffering stdout and stderr\nENV PYTHONUNBUFFERED 1\nENV DEBUG 0\n\n#install psycopg2\nRUN apk update \\\n    && apk add --no-cache --virtual build-deps gcc python3-dev musl-dev \\\n    && apk add --no-cache postgresql-dev \\\n    && pip install --no-cache-dir psycopg2 \\\n    && apk del build-deps\n\n#install zlib to alliw Pillow wheel build\n#RUN apk add zlib-dev jpeg-dev gcc musl-dev\n\n#install dependencies\nCOPY ./requirements.txt .\nRUN pip install --no-cache-dir -r requirements.txt\n\n#copy entrypoint.sh and make it executable\n#COPY ./entrypoint.sh .\n#RUN chmod +x entrypoint.sh\n\n# copy project\nCOPY . .\n\n#run entrypoint.sh\n#ENTRYPOINT [ \"/app/entrypoint.prod.sh\" ]\n\n#comment out since we are now using docker compose to with postgres service to build the image\n#collect static files\nRUN python manage.py collectstatic --noinput\n\n#make migrations and migrate\nRUN python manage.py makemigrations && python manage.py migrate\n\n# add and run as non-root user BEST PRACTICES EPS when deploting to heroku as it uses non root user\nRUN adduser -D myuser\nUSER myuser\n\n# run gunicorn  Gunicorn 'Green Unicorn' is a Python WSGI HTTP Server for UNIX. It's a pre-fork worker model.\nCMD gunicorn djangoherokuapp.wsgi:application --bind 0.0.0.0:$PORT\n"
}