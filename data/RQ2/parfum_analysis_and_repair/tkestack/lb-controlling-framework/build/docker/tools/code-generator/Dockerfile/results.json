{
  "startTime": 1674256071287,
  "endTime": 1674256072220,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 23,
        "lineEnd": 23,
        "columnStart": 4,
        "columnEnd": 32
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 26,
        "lineEnd": 26,
        "columnStart": 4,
        "columnEnd": 48
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# Tencent is pleased to support the open source community by making TKEStack\n# available.\n#\n# Copyright (C) 2012-2019 Tencent. All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use\n# this file except in compliance with the License. You may obtain a copy of the\n# License at\n#\n# https://opensource.org/licenses/Apache-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n# WARRANTIES OF ANY KIND, either express or implied.  See the License for the\n# specific language governing permissions and limitations under the License.\n\nFROM golang:1.12.12-alpine3.10\n\nRUN apk add --update --no-cache autoconf automake libtool zlib-dev build-base curl git\n\n# Install the protobuf\nENV PROTOBUF_VERSION 3.10.0\nENV PROTOBUF_URL=https://github.com/protocolbuffers/protobuf/archive/v${PROTOBUF_VERSION}.tar.gz\nRUN curl -f -L ${PROTOBUF_URL} -o - | tar -xz -C /tmp\nRUN cd /tmp/protobuf-* && \\\n    ./autogen.sh && \\\n    ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --disable-shared --enable-static && \\\n    make --silent -j `nproc` install-strip\nRUN cd /tmp && rm -rf protobuf-$PROTOBUF_VERSION \\\n    && protoc --version\n\nENV GOPATH=/go\n\n# Clone the kubernetes\nENV KUBERNETES_VERSION 1.12.7\nRUN mkdir -p $GOPATH/src/k8s.io \\\n  && git clone -b v$KUBERNETES_VERSION --single-branch https://github.com/kubernetes/kubernetes.git $GOPATH/src/k8s.io/kubernetes\nRUN apk add --update --no-cache rsync file patch\nRUN cd $GOPATH/src/k8s.io/kubernetes \\\n  && make WHAT=\"cmd/genswaggertypedocs vendor/k8s.io/code-generator/cmd/defaulter-gen vendor/k8s.io/code-generator/cmd/client-gen vendor/k8s.io/code-generator/cmd/lister-gen vendor/k8s.io/code-generator/cmd/informer-gen vendor/k8s.io/code-generator/cmd/deepcopy-gen vendor/k8s.io/code-generator/cmd/conversion-gen vendor/k8s.io/code-generator/cmd/go-to-protobuf vendor/k8s.io/code-generator/cmd/go-to-protobuf/protoc-gen-gogo\"\nRUN ln -s $GOPATH/src/k8s.io/kubernetes/vendor/k8s.io/apimachinery $GOPATH/src/k8s.io/apimachinery \\\n  && ln -s $GOPATH/src/k8s.io/kubernetes/vendor/k8s.io/api $GOPATH/src/k8s.io/api\n\n# work around 64MB tmpfs size in Docker 1.6\nENV TMPDIR /tmp.k8s\nRUN mkdir $TMPDIR \\\n  && chmod a+rwx $TMPDIR \\\n  && chmod o+t $TMPDIR\n\n# Get the code coverage tool and goimports\nRUN go get golang.org/x/tools/cmd/cover \\\n           golang.org/x/tools/cmd/goimports \\\n    && go clean -cache\n\nWORKDIR \"$GOPATH/src/k8s.io/kubernetes\"\nADD code.sh /root/\nADD boilerplate.go.txt /root/\nRUN chmod +x /root/code.sh\n\n"
}