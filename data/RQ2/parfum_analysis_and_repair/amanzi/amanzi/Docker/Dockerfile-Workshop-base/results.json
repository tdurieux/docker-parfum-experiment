{
  "startTime": 1674216449578,
  "endTime": 1674216450377,
  "originalSmells": [
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 79,
        "lineEnd": 79,
        "columnStart": 4,
        "columnEnd": 45
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 111,
        "lineEnd": 111,
        "columnStart": 4,
        "columnEnd": 35
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 17,
        "lineEnd": 49,
        "columnStart": 4,
        "columnEnd": 8
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 17,
        "lineEnd": 49,
        "columnStart": 4,
        "columnEnd": 8
      }
    }
  ],
  "repairedSmells": [
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 17,
        "lineEnd": 34,
        "columnStart": 4,
        "columnEnd": 18
      }
    }
  ],
  "repairedDockerfile": "#FROM continuumio/miniconda3\nFROM ubuntu:20.04\n\nLABEL Description=\"Amanzi/ATS/WatershedWorkflow/TINerator Docker container\"\n\nENV DEBIAN_FRONTEND noninteractive\nENV DEBCONF_NONINTERACTIVE_SEEN true\n\nENV LANG=C.UTF-8 LC_ALL=C.UTF-8 \\\n    https_proxy=$https_proxy \\\n    http_proxy=$http_proxy \\\n    DIR_BUILD=${HOME}/.build \\\n    DIR_INSTALL=${HOME}/.install\n\nENV PATH /opt/conda/bin:$PATH\n\nRUN apt-get update --fix-missing && \\\n    apt-get install --no-install-recommends -y \\\n\n    # Shared \\\n    apt-u \\\n    pat \\\n    g++ \\\n    gfo \\\n    git \\\n    make \\\n    cmake \\\n    ema \\\n    vim \\\n    curl \\\n    wget \\\n    libz-de \\\n    op \\\n    m4 \\\n    bzip2 \\\n    ca-certificate\n    \\\n    # Ama \\\n    groff \\\n    mpich \\\n    libblas-dev \\\n    liblapack- \\\n    libmpich-d \\\n    libssl-dev \\\n    zlib1g-dev \\\n    libcurl4-op \\\n\n    # TIN \\\n    libgdal-dev \\\n    unzi  \\\n    bison \\\n    libgl1-mesa-glx \\ && rm -rf /var/lib/apt/lists/*;\n\n# =================================================== #\n# Build Miniconda =================================== #\n# =================================================== #\nRUN wget --quiet https://repo.anaconda.com/miniconda/Miniconda3-4.5.11-Linux-x86_64.sh -O ~/miniconda.sh && \\\n    /bin/bash ~/miniconda.sh -b -p /opt/conda && \\\n    rm ~/miniconda.sh && \\\n    /opt/conda/bin/conda clean -tipsy && \\\n    ln -s /opt/conda/etc/profile.d/conda.sh /etc/profile.d/conda.sh && \\\n    echo \". /opt/conda/etc/profile.d/conda.sh\" >> ~/.bashrc && \\\n    echo \"conda activate base\" >> ~/.bashrc\n\nENV TINI_VERSION v0.16.1\nADD https://github.com/krallin/tini/releases/download/${TINI_VERSION}/tini /usr/bin/tini\nRUN chmod +x /usr/bin/tini\n\nENTRYPOINT [ \"/usr/bin/tini\", \"--\" ]\n\nRUN . /opt/conda/etc/profile.d/conda.sh && conda activate base\n\n# =================================================== #\n# Build Watershed Workflow ========================== #\n# =================================================== #\nWORKDIR ${DIR_BUILD}\nRUN pip install --no-cache-dir GDAL==`gdal-config --version` && \\\n    conda install -c conda-forge boost && \\\n    pip --no-cache-dir install --upgrade \\\n       fiona \\\n       rasterio \\\n       shapely \\\n       pyproj \\\n       && \\\n    git clone https://github.com/ecoon/meshpy.git --depth 1 && \\\n    cd meshpy && \\\n    ./configure.py \\\n        --python-exe=${CONDA_DIR}/bin/python \\\n        --boost-inc-dir=${CONDA_DIR}/include \\\n        --boost-lib-dir=${CONDA_DIR}/lib \\\n        --boost-python-libname=boost_python39 \\\n        --disable-static \\\n        --enable-shared \\\n        && \\\n    python setup.py build && \\\n    python setup.py install && \\\n    cd .. && \\\n    \n    # IDEAL-OCTO-WAFFLE\n\nENV PYTHONPATH=${DIR_BUILD}:${PYTHONPATH}\n\n# =================================================== #\n# Build TINerator =================================== #\n# =================================================== #\nRUN git clone https://github.com/lanl/tinerator.git ${DIR_BUILD}/tinerator --depth 1 && \\\n    cd ${DIR_BUILD}/tinerator && \\\n    pip install --no-cache-dir -r requirements.txt && \\\n    ./tpls/build-tpls.sh -A -M\n\nENV PYTHONPATH=${DIR_BUILD}/tpls/seacas/install/lib:${PYTHONPATH}\n\n# =================================================== #\n# Build Amanzi/ATS ================================== #\n# =================================================== #\nENV AMANZI_PREFIX=${DIR_INSTALL} \\\n    AMANZI_INSTALL_DIR=${DIR_INSTALL}/amanzi \\\n    AMANZI_TPLS_DIR=${DIR_INSTALL}/tpls \\\n    AMANZI_SRC_DIR=${DIR_BUILD}/amanzi \\\n    ATS_SRC_DIR=${DIR_BUILD}/amanzi/src/physics/ats\n    #AMANZI_PETSC_LIBS=$AMANZI_TPLS_DIR/petsc-${petsc_ver}/lib \\\n    #AMANZI_TRILINOS_LIBS=$AMANZI_TPLS_DIR/trilinos-${trilinos_ver}/lib \\\n    #AMANZI_SEACAS_LIBS=$AMANZI_TPLS_DIR/SEACAS/lib\n\nRUN git clone https://github.com/amanzi/amanzi.git ${DIR_BUILD}/amanzi --depth 1 && \\\n    cd ${DIR_BUILD}/amanzi/\nRUN ./bootstrap.sh --prefix=${AMANZI_PREFIX} \\\n   --parallel=4 \\\n   # --opt \\\n   --amanzi-build-dir=${DIR_BUILD}/amanzi \\\n   --tpl-build-dir=${DIR_BUILD}/tpls \\\n   --tpl-download-dir=${DIR_BUILD}/tpls/Downloads \\\n   # --disable-build_amanzi \\\n   # --disable-build_user_guide \\\n   # --enable-shared \\\n   # --enable-structured \\\n   # --enable-unstructured \\\n   # --enable-silo \\\n   # --enable-alquimia \\\n   # --enable-pflotran \\\n   # --enable-crunchtope \\\n   # --enable-pf_clm \\\n   --with-mpi=/usr \\\n   --with-c-compiler=$(which mpicc) \\\n   --with-cxx-compiler=$(which mpicxx) \\\n   --with-fort-compiler=$(which mpif90) \\\n   && git checkout master \\\n   && rm -r ${DIR_BUILD}\n\nENV PATH=${DIR_INSTALL}/install/tools/bin:${PATH}\nCMD [\"/bin/bash\"]\n"
}