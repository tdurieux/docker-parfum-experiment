{
  "startTime": 1674255462440,
  "endTime": 1674255464166,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 66,
        "lineEnd": 66,
        "columnStart": 8,
        "columnEnd": 74
      }
    },
    {
      "rule": "wgetUseHttpsUrl",
      "position": {
        "lineStart": 34,
        "lineEnd": 34,
        "columnStart": 11,
        "columnEnd": 95
      }
    },
    {
      "rule": "wgetUseHttpsUrl",
      "position": {
        "lineStart": 76,
        "lineEnd": 76,
        "columnStart": 11,
        "columnEnd": 148
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 28,
        "lineEnd": 28,
        "columnStart": 11,
        "columnEnd": 22
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 41,
        "lineEnd": 41,
        "columnStart": 11,
        "columnEnd": 153
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 60,
        "lineEnd": 60,
        "columnStart": 8,
        "columnEnd": 41
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 69,
        "lineEnd": 69,
        "columnStart": 8,
        "columnEnd": 106
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 92,
        "lineEnd": 92,
        "columnStart": 11,
        "columnEnd": 76
      }
    },
    {
      "rule": "yumInstallRmVarCacheYum",
      "position": {
        "lineStart": 17,
        "lineEnd": 17,
        "columnStart": 4,
        "columnEnd": 95
      }
    },
    {
      "rule": "yumInstallRmVarCacheYum",
      "position": {
        "lineStart": 20,
        "lineEnd": 20,
        "columnStart": 4,
        "columnEnd": 314
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM centos:7\n\nLABEL maintainer=\"Federico Pereira <fpereira@cnsoluciones.com>\"\n\nENV MSMTP='false'\n\nADD https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm /usr/src\nADD https://mirror.webtatic.com/yum/el7/webtatic-release.rpm /usr/src\nCOPY irontec.repo /etc/yum.repos.d/\n\nRUN yum -y update\n\nRUN cd /usr/src \\\n        && rpm -Uvh /usr/src/epel-release-latest-7.noarch.rpm \\\n        && rpm -Uvh /usr/src/webtatic-release.rpm\n\nRUN yum -y groupinstall core base \"Development Tools\" \\\n\t&& yum -y install unixODBC unixODBC-devel libtool-ltdl libtool-ltdl-devel mysql-connector-odbc \\\n        && yum clean all && rm -rf /var/cache/yum\n\nRUN yum -y install ncurses-devel sendmail ssmtp sox lame newt-devel libxml2-devel libtiff-devel audiofile-devel gtk2-devel subversion kernel-devel git crontabs cronie cronie-anacron wget vim uuid-devel sqlite-devel net-tools gnutls-devel python-devel texinfo libuuid-devel mc wget htop screen sudo nfs-utils sngrep && yum clean all && rm -rf /var/cache/yum\n\nRUN cd /usr/src \\\n        && wget -O jansson.tar.gz https://github.com/akheron/jansson/archive/v2.13.1.tar.gz \\\n        && tar xfz jansson.tar.gz \\\n        && rm -f jansson.tar.gz \\\n        && cd jansson-* \\\n        && autoreconf -i \\\n        && ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" \\\n        && make \\\n        && make install \\\n        && rm -r /usr/src/jansson*\n\nRUN cd /usr/src \\\n        && wget https://downloads.asterisk.org/pub/telephony/asterisk/asterisk-16-current.tar.gz \\\n        && tar xfz asterisk-* \\\n        && rm -f asterisk-*.tar.gz \\\n\t&& mv asterisk-* asterisk \\\n        && cd asterisk \\\n        && contrib/scripts/get_mp3_source.sh \\\n        && contrib/scripts/install_prereq install \\\n        && ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --libdir=/usr/lib64 --prefix=/usr --with-pjproject-bundled --with-jansson-bundled --with-ssl=ssl --with-srtp CFLAGS='-O2 -DNDEBUG' \\\n        && make menuselect/menuselect menuselect-tree menuselect.makeopts \\\n        && menuselect/menuselect --disable BUILD_NATIVE --enable app_confbridge --disable app_fax --enable app_macro --enable codec_silk --enable format_mp3 --enable BETTER_BACKTRACES \\\n        && make \\\n        && make install \\\n\t&& make samples \\\n        && make config \\\n\t&& cp -fra contrib/scripts/ast_tls_cert /usr/local/sbin/ast_tls_cert && mkdir -p /etc/asterisk/keys \\\n        && echo \"asterisk -rvvvvvvvvvv\" > /usr/local/sbin/a \\\n\t&& chmod 777 -R /usr/local/sbin/ \\\n        && ldconfig \\\n\t&& rm -fr /etc/asterisk/res_odbc.conf \\\n\t&& rm -fr /etc/asterisk/manager.conf\n\n#### Add G729 Codecs\nRUN git clone https://github.com/BelledonneCommunications/bcg729 /usr/src/bcg729 ; \\\n        cd /usr/src/bcg729 ; \\\n        git checkout tags/$BCG729_VERSION ; \\\n        ./autogen.sh ; \\\n        ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --libdir=/usr/lib64; \\\n        make ; \\\n        make install ; \\\n        rm -fr /usr/src/bcg729 ; \\\n\n        mkdir -p /usr/src/asterisk-g72x ; \\\n        curl -f https://bitbucket.org/arkadi/asterisk-g72x/get/default.tar.gz | tar xvfz - --strip 1 -C /usr/src/asterisk-g72x; \\\n        cd /usr/src/asterisk-g72x ; \\\n        ./autogen.sh ; \\\n        ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --libdir=/usr/lib64 --with-bcg729 --with-asterisk${ASTERISK_VERSION}0 --enable-penryn; \\\n        make ; \\\n        make install ; \\\n        rm -fr /usr/src/asterisk-g72x\n\n### Add Opus codecs\nRUN cd /usr/src \\\n        && wget -O codec_opus.tar.gz https://downloads.digium.com/pub/telephony/codec_opus/asterisk-16.0/x86-64/codec_opus-16.0_current-x86_64.tar.gz \\\n        && tar -xvzf codec_opus.tar.gz \\\n        && rm -f codec_opus.tar.gz \\\n        && cd codec_opus-16* \\\n        && cp codec_opus.so /usr/lib64/asterisk/modules \\\n        && cp format_ogg_opus.so /usr/lib64/asterisk/modules \\\n        && cp codec_opus_config-en_US.xml /var/lib/asterisk/documentation/thirdparty \\\n        && rm -fr /usr/src/codec_opus*\n\n### CLIENT VOSK SERVER ASR\nRUN cd /usr/src \\\n        && wget -O vosk-asterisk.tar.gz https://github.com/iperfex-team/vosk-asterisk/archive/vosk-asterisk.tar.gz \\\n        && tar -xvzf vosk-asterisk.tar.gz \\\n        && rm -f vosk-asterisk.tar.gz \\\n        && cd vosk-asterisk-vosk-asterisk \\\n        && ./bootstrap \\\n        && ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --with-asterisk=/usr/src/asterisk --prefix=/usr/lib64 \\\n        && make \\\n\t&& make install \\\n        && cp conf/res-speech-vosk.conf /etc/asterisk/res-speech-vosk.conf \\\n\t&& cp /usr/lib64/lib/asterisk/modules/res_speech_vosk.so /usr/lib64/asterisk/modules \\\n\t&& rm -fr /usr/lib64/etc/asterisk/res-speech-vosk.conf \\\n        && rm -fr /usr/src/vosk-asterisk-vosk-asterisk \\\n\t&& rm -fr /usr/lib64/lib/asterisk/modules \\\n        && rm -r /usr/src/asterisk\n\n\nEXPOSE 5038 4445 3306 5060 5061 5160 5161 4569 8088 8089 10000-20000/udp 10000-20000/tcp\n\n#automatic backup\nVOLUME [ \"/backup\" ]\n\n#asterisk etc\nVOLUME [ \"/etc/asterisk\" ]\n#asterisk sounds\nVOLUME [ \"/var/lib/asterisk/sounds\" ]\n#asterisk voicemail\nVOLUME [ \"/var/spool/asterisk/voicemail\" ]\n#asterisk monitor\nVOLUME [ \"/var/spool/asterisk/monitor\" ]\n\n#RUN DOCKER SCRIPT\nCOPY docker-entrypoint.sh /\nRUN chmod +x /docker-entrypoint.sh\n\nCOPY ./config/etc /etc\n\n#mount\nRUN cp -fra /etc/asterisk /etc/asterisk.org \\\n        && cp -fra /var/lib/asterisk/sounds /var/lib/asterisk/sounds.org \\\n        && cp -fra /var/spool/asterisk/voicemail /var/spool/asterisk/voicemail.org\n\nWORKDIR /etc/asterisk\nENTRYPOINT [\"/docker-entrypoint.sh\"]\n"
}