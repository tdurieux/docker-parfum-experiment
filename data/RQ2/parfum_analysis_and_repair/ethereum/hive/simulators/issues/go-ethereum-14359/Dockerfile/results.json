{
  "startTime": 1674248308731,
  "endTime": 1674248309930,
  "originalSmells": [
    {
      "rule": "apkAddUseNoCache",
      "position": {
        "lineStart": 22,
        "lineEnd": 22,
        "columnStart": 4,
        "columnEnd": 33
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# This is a regression test to cover a go-ethereum issue where the Ethereum net\n# ID was represented with multiple different types (int, uint32 and uint64) in\n# different code paths, causing nodes to be unable to connect to each other if\n# the network ID was larger that maxuint32.\n#\n# Details in https://github.com/ethereum/go-ethereum/issues/14359\n#\n# The test starts up a network of two nodesand checks that they can successfully\n# connect to each other.\nFROM alpine:latest\n\n# Build a bootnode to cross-discover the two plain nodes\nRUN \\\n  apk add --update go git make gcc musl-dev linux-headers     && \\\n  git clone --depth 1 https://github.com/ethereum/go-ethereum && \\\n  (cd go-ethereum && make all)                                && \\\n  cp go-ethereum/build/bin/bootnode /bootnode                 && \\\n  apk del go git make gcc musl-dev                            && \\\n  rm -rf /go-ethereum && rm -rf /var/cache/apk/*\n\n# Install curl to allow controlling the simulator as well as to interact with the\n# client via HTTP-RPC.\nRUN apk add --no-cache --update bash curl jq\n\n# Configure the initial setup for the individual nodes\nADD genesis.json /genesis.json\n\n# Add the simulation controller\nADD simulator.sh /simulator.sh\nRUN chmod +x /simulator.sh\n\nENTRYPOINT [\"/simulator.sh\"]\n"
}