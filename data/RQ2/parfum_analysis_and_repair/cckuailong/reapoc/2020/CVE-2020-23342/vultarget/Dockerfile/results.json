{
  "startTime": 1674248776239,
  "endTime": 1674248777132,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 49,
        "lineEnd": 49,
        "columnStart": 7,
        "columnEnd": 49
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 9,
        "lineEnd": 9,
        "columnStart": 22,
        "columnEnd": 48
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 9,
        "lineEnd": 9,
        "columnStart": 79,
        "columnEnd": 117
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 39,
        "lineEnd": 39,
        "columnStart": 7,
        "columnEnd": 238
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 31,
        "lineEnd": 31,
        "columnStart": 4,
        "columnEnd": 58
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 9,
        "lineEnd": 9,
        "columnStart": 22,
        "columnEnd": 48
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 9,
        "lineEnd": 9,
        "columnStart": 79,
        "columnEnd": 117
      }
    }
  ],
  "repairedSmells": [
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 31,
        "lineEnd": 31,
        "columnStart": 4,
        "columnEnd": 58
      }
    }
  ],
  "repairedDockerfile": "FROM ubuntu:xenial\n# 基础镜像是Ubuntu16.04-xenial\nMAINTAINER dxy\n# 设置生成这个镜像的作者\n\nADD sources.list /etc/apt/\n# 换源\nENV OS_LOCALE=\"en_US.UTF-8\"\n\nRUN apt-get update && apt-get install --no-install-recommends -y locales && locale-gen ${OS_LOCALE} && apt-get install --no-install-recommends -y apt-transport-https && rm -rf /var/lib/apt/lists/*;\n# xenial系统区域语言设置为中文\n\nENV LANG=${OS_LOCALE} \\\n    LANGUAGE=${OS_LOCALE} \\\n    LC_ALL=${OS_LOCALE} \\\n    DEBIAN_FRONTEND=noninteractive\n# DEBIAN_FRONTEND告知操作系统应该从哪儿获得用户输入。设置为”noninteractive”意味着可以直接运行命令，无需向用户请求输入\n#（所有操作都是非交互式的）这在运行apt-get命令的时候格外有用，因为它会不停的提示用户进行到了哪步并且需要不断确认。\n# 非交互模式会选择默认的选项并以最快的速度完成构建。\n# https://blog.csdn.net/oguro/article/details/102840215\n\nENV APACHE_CONF_DIR=/etc/apache2 \\\n    PHP_CONF_DIR=/etc/php/7 \\\n    PHP_DATA_DIR=/var/lib/php\n\nCOPY entrypoint.sh /sbin/entrypoint.sh\n# 将本地的文件or文件夹复制到镜像中的指定路径下\n\nRUN \\\n\n    BUILD_DEPS='software-properties-common python-software-properties' \\\n\t&& apt-get install --no-install-recommends -y $BUILD_DEPS \\\n\t&& add-apt-repository -y ppa:ondrej/php \\\n\t&& add-apt-repository -y ppa:ondrej/apache2 \\\n    # PPA是Personal Package Archives个人软件包文档,只有Ubuntu用户可以用，所有的PPA都是寄存在 launchpad.net网站上。\n    # add-apt-repository向apt-get的source.list中添加新的下载源\n    && find /etc/apt/sources.list.d/ -type f -name \"ondrej-ubuntu-php-xenial.list\" -exec sed -i.bak -r 's#deb(-src)?\\s*http(s)?://ppa.launchpad.net#deb\\1 https\\2://launchpad.proxy.ustclug.org#ig' {} \\;\\\t\n    && find /etc/apt/sources.list.d/ -type f -name \"ondrej-ubuntu-apache2-xenial.list\" -exec sed -i.bak -r 's#deb(-src)?\\s*http(s)?://ppa.launchpad.net#deb\\1 https\\2://launchpad.proxy.ustclug.org#ig' {} \\;\\\n    && apt-get update \\\n    && apt-get install --no-install-recommends -y git vim unzip curl apache2 php7.1-mbstring php7.1-mcrypt php7.1-curl php7.1-json php7.1-pdo php7.1-gd php7.1-intl php7.1-opcache libapache2-mod-php7.1 php7.1-cli php7.1-readline php7.1-pgsql php7.1-mysql php-pear \\\n# Apache settings 网页服务器 设置\n    && cp /dev/null ${APACHE_CONF_DIR}/conf-available/other-vhosts-access-log.conf \\\n    # 清空 other-vhosts-access-log.conf\n    && rm ${APACHE_CONF_DIR}/sites-enabled/000-default.conf ${APACHE_CONF_DIR}/sites-available/000-default.conf \\\n    #　删除000-default.conf\n    && a2enmod rewrite php7.1 \\\n    # 重启php7\n# PHP settings\n\t&& phpenmod mcrypt \\\n    && curl -f -sS https://getcomposer.org/installer | php -- --version=1.6.4 --install-dir=/usr/local/bin --filename=composer \\\n# Cleaning 主要是为了减少最终镜像的大小\n\t&& apt-get purge -y --auto-remove $BUILD_DEPS \\\n\t&& apt-get autoremove -y \\\n    # apt-get purge 会同时清除软件包和软件的配置文件\n    # 删除为了满足其他软件包的依赖而安装的，但现在不再需要的软件包。\n\t&& rm -rf /var/lib/apt/lists/* \\\n    # 安装软件包和清理缓存需要在同一条RUN语句中执行，因为每一条RUN语句都会增加一层，\n    # 把apt-get和rm -rf /var/lib/apt/lists/*放在同一条RUN 清理apt-get产生的缓存\n# Forward request and error logs to docker log collector\n\t&& ln -sf /dev/stdout /var/log/apache2/access.log \\\n\t&& ln -sf /dev/stderr /var/log/apache2/error.log \\\n#　用户权限设置\n    #chmod 755 设置用户的权限为：\n    #1.文件所有者可读可写可执行 2.与文件所有者同属一个用户组的其他用户可读可执行 3.其它用户组可读可执行\n\t&& chmod 755 /sbin/entrypoint.sh \\\n    && chown www-data:www-data ${PHP_DATA_DIR} -Rf\n    # 将目录下的所有文件、子目录的所有者改成www-data\n\nCOPY ./configs/apache2.conf ${APACHE_CONF_DIR}/apache2.conf\nCOPY ./configs/app.conf ${APACHE_CONF_DIR}/sites-enabled/app.conf\nCOPY ./configs/php.ini  ${PHP_CONF_DIR}/apache2/conf.d/custom.ini\n\nCOPY ./anchor-cms/ /var/www/app/\nRUN chmod 777 /var/www/app\nRUN chmod 777 /var/www/app/anchor\nRUN chmod 777 /var/www/app/anchor/config\nRUN chmod 777 /var/www/app/content\nRUN chmod 777 /var/www/app/install\n\nWORKDIR /var/www/app/\n\nEXPOSE 80\n\nCMD [\"/sbin/entrypoint.sh\"]"
}