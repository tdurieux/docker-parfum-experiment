{
  "startTime": 1674251055306,
  "endTime": 1674251055990,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 33,
        "lineEnd": 33,
        "columnStart": 4,
        "columnEnd": 126
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 34,
        "lineEnd": 34,
        "columnStart": 7,
        "columnEnd": 137
      }
    },
    {
      "rule": "gpgUseBatchFlag",
      "position": {
        "lineStart": 31,
        "lineEnd": 31,
        "columnStart": 46,
        "columnEnd": 133
      }
    },
    {
      "rule": "gpgUseBatchFlag",
      "position": {
        "lineStart": 35,
        "lineEnd": 35,
        "columnStart": 7,
        "columnEnd": 43
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "ARG PYTHON_IMAGE\nFROM ${PYTHON_IMAGE}\n\nRUN apt-get -qq update && apt-get -qq -y --no-install-recommends install \\\n    ca-certificates \\\n    curl \\\n    docker.io \\\n    libsasl2-dev \\\n    netcat \\\n    openjdk-11-jdk \\\n    sudo \\\n    zip &&\\\n    rm -rf /var/lib/apt/lists/*\n\nARG UID={${UID}:-1001}\nENV USER_ID=${LOCAL_USER_ID:-${UID}}\n\nRUN echo '{\"storage-driver\": \"vfs\"}' > /etc/docker/daemon.json\n\n# setup user\nRUN useradd --shell /bin/bash -u $USER_ID --gid 0 --non-unique --comment \"\" --create-home user\nRUN usermod -a -G sudo user\nRUN usermod -a -G docker user\nRUN echo \"user ALL=(ALL) NOPASSWD: ALL\" > /etc/sudoers.d/user\n\n\n# connection to ha.pool.sks-keyservers.net fails sometimes, so let's retry with couple different servers\nRUN for server in $(shuf -e ha.pool.sks-keyservers.net \\\n                            hkp://p80.pool.sks-keyservers.net:80 \\\n                            keyserver.ubuntu.com \\\n                            hkp://keyserver.ubuntu.com:80 \\\n                            pgp.mit.edu); do gpg --batch --no-tty --keyserver \"$server\" --recv-keys B42F6819007F00F88E364FD4036A9C25BF357DD4 && s=0 && break || s=$?; done; (exit $s)\n\nRUN curl -f -o /usr/local/bin/gosu -sSL \"https://github.com/tianon/gosu/releases/download/1.14/gosu-$(dpkg --print-architecture)\" \\\n    && curl -f -o /usr/local/bin/gosu.asc -sSL \"https://github.com/tianon/gosu/releases/download/1.14/gosu-$(dpkg --print-architecture).asc\" \\\n    && gpg --batch --verify /usr/local/bin/gosu.asc \\\n    && rm /usr/local/bin/gosu.asc \\\n    && chmod +x /usr/local/bin/gosu\n\nCOPY tests/entrypoint.sh /usr/local/bin/entrypoint.sh\n\nCOPY requirements.txt /\n\n# if we're in a pypy image, link pypy/pypy3 to /usr/local/bin/python\nRUN if command -v pypy3; then ln -s $(command -v pypy3) /usr/local/bin/python; elif command -v pypy; then ln -s $(command -v pypy) /usr/local/bin/python; fi\n\nRUN chmod +x /usr/local/bin/entrypoint.sh\n\nWORKDIR /app\n\nENTRYPOINT [\"/usr/local/bin/entrypoint.sh\"]\n"
}