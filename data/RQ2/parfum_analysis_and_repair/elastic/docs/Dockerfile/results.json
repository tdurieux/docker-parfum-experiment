{
  "startTime": 1674248213897,
  "endTime": 1674248214932,
  "originalSmells": [
    {
      "rule": "yarnCacheCleanAfterInstall",
      "position": {
        "lineStart": 59,
        "lineEnd": 59,
        "columnStart": 4,
        "columnEnd": 47
      }
    },
    {
      "rule": "yarnCacheCleanAfterInstall",
      "position": {
        "lineStart": 111,
        "lineEnd": 111,
        "columnStart": 4,
        "columnEnd": 34
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 103,
        "lineEnd": 108,
        "columnStart": 4,
        "columnEnd": 15
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# This builds a \"base\" image that contains dependencies that are required at\n# runtime *and* to install dependencies like `ruby`. Then it builds images that\n# intall those dependencies. Then it builds a \"final\" image that copies the\n# dependencies and installs package that it needs at runtime. Compared to\n# installing everything in one go this shrinks the \"final\" docker image by\n# about 50%, mostly because we don't need things like `gcc` and `ruby-dev` in\n# the \"final\" image.\n\n# Debian builds the docs about 20% faster than alpine. The image is larger\n# and takes longer to build but that is worth it.\nFROM bitnami/minideb:buster AS base\n\n# TODO install_packages calls apt-get update and then nukes the list files after. We should avoid multiple calls to apt-get update.....\n# We could probably fix this by running the update and installs ourself with `RUN --mount type=cache` but that is \"experimental\"\n\nRUN install_packages apt-transport-https gnupg2 ca-certificates\nCOPY .docker/apt/keys/nodesource.gpg /\nRUN apt-key add /nodesource.gpg\nCOPY .docker/apt/sources.list.d/nodesource.list /etc/apt/sources.list.d/\nRUN install_packages \\\n  build-essential python2 \\\n    # needed for compiling native modules on ARM\n  nodejs ruby \\\n    # Used both to install dependencies and at run time\n  bash less \\\n    # Just in case you have to shell into the image\n  locales\n    # Deal with utf-8 characters properly\nRUN echo 'en_US.UTF-8 UTF-8' > /etc/locale.gen && locale-gen\nENV LANG en_US.UTF-8\nENV LANGUAGE en_US:en\nENV LC_ALL en_US.UTF-8\n\n\nFROM base AS ruby_deps\nRUN install_packages \\\n  bundler \\\n    # Fetches ruby dependencies\n  ruby-dev make cmake gcc libc-dev patch\n    # Required to compile some of the native dependencies\nRUN bundle config --global silence_root_warning 1\nCOPY Gemfile* /\n# --frozen forces us to regenerate Gemfile.lock locally before using it in\n# docker which lets us lock the versions in place.\nRUN bundle install --binstubs --system --frozen --without test\nCOPY .docker/asciidoctor_2_0_10.patch /\nRUN cd /var/lib/gems/2.5.0/gems/asciidoctor-2.0.10 && patch -p1 < /asciidoctor_2_0_10.patch\n\n\nFROM base AS node_deps\nCOPY .docker/apt/keys/yarn.gpg /\nRUN apt-key add /yarn.gpg\nCOPY .docker/apt/sources.list.d/yarn.list /etc/apt/sources.list.d/\nRUN install_packages yarn=1.21.1-1\nCOPY package.json /\nCOPY yarn.lock /\nENV YARN_CACHE_FOLDER=/tmp/.yarn-cache\n# --frozen-lockfile forces us to regenerate yarn.lock locally before using it\n# in docker which lets us lock the versions in place.\nRUN yarn install --frozen-lockfile --production && yarn cache clean;\n\n\n# This is the image we use to build the docs. We build on it in other\n# Dockerfiles to make the images to serve previews and air gapped docs.\nFROM base AS build\nLABEL MAINTAINERS=\"Nik Everett <nik@elastic.co>\"\nRUN install_packages \\\n  git \\\n    # Clone source repositories and commit to destination repositories\n  libnss-wrapper \\\n    # Used to clean up user id differences in the docker image.\n  make \\\n    # Used by the tests\n  nginx \\\n    # Serves docs during tests and when the container is used for \"preview\" or\n    # \"air gapped\" docs\n  openssh-client \\\n    # Used by git\n  openssh-server \\\n    # Used to forward git authentication to the image on OSX\n  perl-base \\\n    # The \"glue\" of the docs build is written in perl\n  libcapture-tiny-perl \\\n  libfile-copy-recursive-perl \\\n  libparallel-forkmanager-perl \\\n  libpath-class-perl \\\n  libxml-libxml-perl \\\n  libyaml-perl\n    # Perl libraries used by the docs build\n\nCOPY --from=node_deps /node_modules /node_modules\nCOPY --from=ruby_deps /var/lib/gems /var/lib/gems\nCOPY --from=ruby_deps /usr/local/bin/asciidoctor /usr/local/bin/asciidoctor\n\n# We mount these directories with tmpfs so we can write to them so they\n# have to be empty. So we delete them.\nRUN rm -rf /var/log/nginx && rm -rf /run/nginx\n\n\n##### Everything below this run tests\nFROM base AS py_test\n# There's not a published wheel for yamale, so we need setuptools and wheel\nRUN install_packages python3 python3-pip python3-setuptools python3-wheel\nRUN pip3 install --no-cache-dir \\\n  beautifulsoup4==4.8.1 \\\n  lxml==4.4.2 \\\n  pycodestyle==2.5.0 \\\n  yamale==3.0.1 \\\n  pyyaml==5.3.1\n\nFROM node_deps AS node_test\nRUN yarn install --frozen-lockfile && yarn cache clean;\n\nFROM ruby_deps AS ruby_test\nRUN bundle install --binstubs --system --frozen --with test\n\nFROM build AS integ_test\nCOPY --from=node_test /node_modules /node_modules\nCOPY --from=ruby_test /var/lib/gems /var/lib/gems\nCOPY --from=ruby_test /usr/local/bin/rspec /usr/local/bin/rspec\nCOPY --from=ruby_test /usr/local/bin/rubocop /usr/local/bin/rubocop\n\nFROM py_test AS diff_tool\nRUN install_packages git\n"
}