{
  "startTime": 1674215393025,
  "endTime": 1674215394368,
  "originalSmells": [
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 43,
        "lineEnd": 43,
        "columnStart": 4,
        "columnEnd": 35
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 51,
        "lineEnd": 51,
        "columnStart": 33,
        "columnEnd": 57
      }
    },
    {
      "rule": "yumInstallRmVarCacheYum",
      "position": {
        "lineStart": 12,
        "lineEnd": 12,
        "columnStart": 4,
        "columnEnd": 31
      }
    },
    {
      "rule": "yumInstallRmVarCacheYum",
      "position": {
        "lineStart": 13,
        "lineEnd": 13,
        "columnStart": 4,
        "columnEnd": 25
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n# or more contributor license agreements. Licensed under the Elastic License\n# 2.0 and the following additional limitation. Functionality enabled by the\n# files subject to the Elastic License 2.0 may only be used in production when\n# invoked by an Elasticsearch process with a license key installed that permits\n# use of machine learning features. You may not use this file except in\n# compliance with the Elastic License 2.0 and the foregoing additional\n# limitation.\n\n# syntax=docker/dockerfile:1.3\nFROM docker.elastic.co/ml-dev/ml-linux-build:24 as builder\n\nRUN yum install -y epel-release && \\\n    yum install -y ccache && \\\n    ln -s /bin/ccache /usr/lib64/ccache/g++ && rm -rf /var/cache/yum\nENV PATH=\"/usr/lib64/ccache:${PATH}\"\nENV CCACHE_SLOPPINESS=\"file_stat_matches,pch_defines,time_macros,include_file_mtime,include_file_ctime,system_headers\"\n\nCOPY . /ml-cpp\nWORKDIR /ml-cpp\nENV CPP_SRC_HOME=/ml-cpp\nENV LD_LIBRARY_PATH=/usr/local/gcc103/lib/:/usr/local/gcc103/lib64/\n\nRUN --mount=type=cache,target=/root/.ccache \\\n    . ./set_env.sh &&  \\\n    cmake -B cmake-build-relwithdebinfo && \\\n    cmake --build cmake-build-relwithdebinfo --config Release -t install -j`nproc` && \\\n    find build/distribution/platform/linux-x86_64/lib ! -name libMl*.so -type f -exec rm -f {} + && \\\n    dev-tools/strip_binaries.sh\n\n\n##############################################\nFROM docker.elastic.co/ml-dev/ml-linux-jupyter-build:1\n\nCOPY --from=builder /usr/local/gcc103 /usr/local/gcc103\nENV LD_LIBRARY_PATH=/usr/local/gcc103/lib/:/usr/local/gcc103/lib64/\n\nCOPY jupyter/requirements.txt jupyter/Makefile /root/\nRUN --mount=type=cache,target=/root/.cache/pip \\\n    cd /root && \\\n    python3 -m venv env && \\\n    source env/bin/activate && \\\n    python -m pip install -U --force-reinstall pip && \\\n    pip install --no-cache-dir -r requirements.txt && \\\n    jupyter notebook --generate-config && \\\n    openssl req -x509 -nodes -days 365 -newkey rsa:2048 -subj \"/C=US/ST=Denial/L=Springfield/O=Dis/CN=www.example.com\" -keyout mykey.key -out mycert.pem\n\nCOPY jupyter/config.ini  /root/\nCOPY jupyter/docker/jupyter_notebook_config.py /root/.jupyter/jupyter_notebook_config.py\nCOPY jupyter/notebooks /root/notebooks\nCOPY jupyter/src /root/src\nRUN source env/bin/activate && pip install --no-cache-dir -e /root/src\nCOPY jupyter/scripts /root/scripts\n\nCOPY --from=builder /ml-cpp/build/distribution/platform/linux-x86_64 /ml-cpp\n\nENTRYPOINT [\"/root/env/bin/jupyter\", \"notebook\"]\n"
}