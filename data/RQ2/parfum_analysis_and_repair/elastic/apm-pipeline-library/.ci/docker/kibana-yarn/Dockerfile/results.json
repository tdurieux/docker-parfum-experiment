{
  "startTime": 1674246362648,
  "endTime": 1674246363766,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 37,
        "lineEnd": 37,
        "columnStart": 4,
        "columnEnd": 76
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 70,
        "lineEnd": 70,
        "columnStart": 4,
        "columnEnd": 146
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 72,
        "lineEnd": 72,
        "columnStart": 4,
        "columnEnd": 150
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "ARG NODE_VERSION=16.14.2\nFROM node:${NODE_VERSION}-bullseye AS src\n\n# 19846019a2841428b8564d9ad5dfd56334e41277\n# main\n# FIXME for PR the checkout and the fetch are diferents git fetch origin refs/pull/124994/head -> git checkout origin/PR/124994\nARG BRANCH=main\n\nRUN chown node:0 /usr/local /usr/local/bin /usr/local/lib /usr/local/share\n\nUSER node\n\nENV HOME=/home/node\nENV NVM_DIR=${HOME}/.nvm\nENV NODE_OPTIONS= --max-old-space-size=4096\nENV FORCE_COLOR=1\nENV BABEL_DISABLE_CACHE=false\nENV BAZEL_CACHE_MODE=read\nENV DISABLE_BOOTSTRAP_VALIDATION=true\n\nWORKDIR /home/node\nRUN git clone --depth 1 --branch main --single-branch --jobs 5 https://github.com/elastic/kibana.git \\\n  && git config --global user.email \"none@example.com\" \\\n  && git config --global user.name \"None\"\n\nWORKDIR /home/node/kibana\nRUN git --version && echo 1\nRUN git fetch --depth 1 --jobs 5 origin \"${BRANCH}\" \\\n  && cat .git/FETCH_HEAD \\\n  && git checkout \"${BRANCH}\" -b \"freeze_branch\" \\\n  && cat .git/FETCH_HEAD \\\n  && git log -1 FETCH_HEAD --pretty=%h \\\n  && cat .git/FETCH_HEAD\n\nRUN git log -1 FETCH_HEAD --pretty=%h\nRUN git merge-base HEAD FETCH_HEAD\n\nRUN curl -f -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.0/install.sh | bash\nRUN . \"${NVM_DIR}/nvm.sh\" \\\n  && nvm install $(cat .node-version) \\\n  && nvm alias default $(cat .node-version)\n\nRUN . \"${NVM_DIR}/nvm.sh\" \\\n  && yarn kbn bootstrap --prefer-offline --no-audit --link-duplicates\n\nRUN . \"${NVM_DIR}/nvm.sh\" \\\n  && yarn kbn clean\n\nWORKDIR /home/node\nRUN rm -fr kibana\n\nFROM docker:20.10.14 AS docker\nFROM docker/buildx-bin:0.8.1 AS buildx\nFROM node:${NODE_VERSION}-bullseye\n\nUSER node\nENV HOME=/home/node\nENV NVM_DIR=${HOME}/.nvm\nENV NODE_OPTIONS= --max-old-space-size=4096\nENV FORCE_COLOR=1\nENV BABEL_DISABLE_CACHE=true\n\nCOPY --from=src ${HOME} ${HOME}\nUSER root\nRUN chown node:0 /usr/local /usr/local/bin /usr/local/lib /usr/local/share\nRUN echo \". \\\"${NVM_DIR}/nvm.sh\\\"\" > ${HOME}/.bashrc\n\n# Install Docker\nCOPY --from=docker /usr/local/bin/docker /usr/local/bin/docker\nCOPY --from=buildx /buildx /usr/libexec/docker/cli-plugins/docker-buildx\nRUN curl -f -sSL \"https://github.com/docker/compose/releases/download/1.29.2/docker-compose-$(uname -s)-$(uname -m)\" -o /usr/local/bin/docker-compose \\\n  && chmod +x /usr/local/bin/docker-compose\nRUN curl -f -sSL https://github.com/docker/compose/releases/download/v2.2.3/docker-compose-linux-x86_64 -o /usr/libexec/docker/cli-plugins/docker-compose \\\n  && chmod +x /usr/libexec/docker/cli-plugins/docker-compose\nRUN (docker version || true) && (docker-compose version || true) && docker buildx version && docker compose version\n\nUSER node\nWORKDIR ${HOME}\n\nEXPOSE 5601\nENTRYPOINT [\"/bin/bash\", \"-l\", \"-c\"]\nCMD [\"/bin/bash\"]\n"
}