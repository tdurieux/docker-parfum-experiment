{
  "startTime": 1674248180603,
  "endTime": 1674248182011,
  "originalSmells": [
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 88,
        "lineEnd": 88,
        "columnStart": 4,
        "columnEnd": 59
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 127,
        "lineEnd": 127,
        "columnStart": 6,
        "columnEnd": 80
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 122,
        "lineEnd": 122,
        "columnStart": 9,
        "columnEnd": 59
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "################################################################################\n# This Dockerfile was generated from the template at distribution/src/docker/Dockerfile\n#\n# Beginning of multi stage Dockerfile\n################################################################################\n\n<% /*\n  This file is passed through Groovy's SimpleTemplateEngine, so dollars and backslashes\n  have to be escaped in order for them to appear in the final Dockerfile. You\n  can also comment out blocks, like this one. See:\n\n  https://docs.groovy-lang.org/latest/html/api/groovy/text/SimpleTemplateEngine.html\n\n  We use control-flow tags in this file to conditionally render the content. The\n  layout/presentation here has been adjusted so that it looks reasonable when rendered,\n  at the slight expense of how it looks here.\n\n  Note that this file is also filtered to squash together newlines, so we can\n  add as many newlines here as necessary to improve legibility.\n*/ %>\n\n<% if (docker_base == 'iron_bank') { %>\nARG BASE_REGISTRY=registry1.dso.mil\nARG BASE_IMAGE=ironbank/redhat/ubi/ubi8\nARG BASE_TAG=8.6\n<% } %>\n\n################################################################################\n# Build stage 1 `builder`:\n# Extract Elasticsearch artifact\n################################################################################\n\nFROM ${base_image} AS builder\n\n<% if (docker_base == 'iron_bank') { %>\n# `tini` is a tiny but valid init for containers. This is used to cleanly\n# control how ES and any child processes are shut down.\nCOPY tini /bin/tini\nRUN chmod 0555 /bin/tini\n\n<% } else { %>\n\n# Install required packages to extract the Elasticsearch distribution\n<% if (docker_base == 'default' || docker_base == 'cloud') { %>\nRUN <%= retry.loop(package_manager, \"${package_manager} update && DEBIAN_FRONTEND=noninteractive ${package_manager} install -y curl \") %>\n<% } else { %>\nRUN <%= retry.loop(package_manager, \"${package_manager} install -y findutils tar gzip\") %>\n<% } %>\n\n# `tini` is a tiny but valid init for containers. This is used to cleanly\n# control how ES and any child processes are shut down.\n#\n# The tini GitHub page gives instructions for verifying the binary using\n# gpg, but the keyservers are slow to return the key and this can fail the\n# build. Instead, we check the binary against the published checksum.\nRUN set -eux ; \\\\\n    tini_bin=\"\" ; \\\\\n    case \"\\$(arch)\" in \\\\\n        aarch64) tini_bin='tini-arm64' ;; \\\\\n        x86_64)  tini_bin='tini-amd64' ;; \\\\\n        *) echo >&2 ; echo >&2 \"Unsupported architecture \\$(arch)\" ; echo >&2 ; exit 1 ;; \\\\\n    esac ; \\\\\n    curl --retry 10 -S -L -O https://github.com/krallin/tini/releases/download/v0.19.0/\\${tini_bin} ; \\\\\n    curl --retry 10 -S -L -O https://github.com/krallin/tini/releases/download/v0.19.0/\\${tini_bin}.sha256sum ; \\\\\n    sha256sum -c \\${tini_bin}.sha256sum ; \\\\\n    rm \\${tini_bin}.sha256sum ; \\\\\n    mv \\${tini_bin} /bin/tini ; \\\\\n    chmod 0555 /bin/tini\n\n<% } %>\n\nRUN mkdir /usr/share/elasticsearch\nWORKDIR /usr/share/elasticsearch\n\n<% if (docker_base == \"iron_bank\") {\n  // Iron Bank always copies the local artifact. It uses `arch` from the\n  // template context variables.\n%>\nCOPY elasticsearch-${version}-linux-${arch}.tar.gz /tmp/elasticsearch.tar.gz\n<% } else {\n  // Fetch the appropriate Elasticsearch distribution for this architecture.\n  // Keep this command on one line - it is replaced with a `COPY` during local builds.\n  // It uses the `arch` shell command to fetch the correct distro for the build machine,\n  // which is needed for Docker Hub builds.\n%>\nRUN curl --retry 10 -S -L --output /tmp/elasticsearch.tar.gz https://artifacts-no-kpi.elastic.co/downloads/elasticsearch/elasticsearch-${version}-linux-\\$(arch).tar.gz\n<% } %>\n\nRUN tar -zxf /tmp/elasticsearch.tar.gz --strip-components=1 && rm /tmp/elasticsearch.tar.gz\n\n# The distribution includes a `config` directory, no need to create it\nCOPY ${config_dir}/elasticsearch.yml config/\nCOPY ${config_dir}/log4j2.properties config/log4j2.docker.properties\n\n#  1. Configure the distribution for Docker\n#  2. Create required directory\n#  3. Move the distribution's default logging config aside\n#  4. Move the generated docker logging config so that it is the default\n#  5. Reset permissions on all directories\n#  6. Reset permissions on all files\n#  7. Make CLI tools executable\n#  8. Make some directories writable. `bin` must be writable because\n#     plugins can install their own CLI utilities.\n#  9. Make some files writable\nRUN sed -i -e 's/ES_DISTRIBUTION_TYPE=tar/ES_DISTRIBUTION_TYPE=docker/' bin/elasticsearch-env && \\\\\n    mkdir data && \\\\\n    mv config/log4j2.properties config/log4j2.file.properties && \\\\\n    mv config/log4j2.docker.properties config/log4j2.properties && \\\\\n    find . -type d -exec chmod 0555 {} + && \\\\\n    find . -type f -exec chmod 0444 {} + && \\\\\n    chmod 0555 bin/* jdk/bin/* jdk/lib/jspawnhelper modules/x-pack-ml/platform/linux-*/bin/* && \\\\\n    chmod 0775 bin config config/jvm.options.d data logs plugins && \\\\\n    find config -type f -exec chmod 0664 {} +\n\n<% if (docker_base == \"cloud\") { %>\nCOPY filebeat-${version}.tar.gz metricbeat-${version}.tar.gz /tmp/\nRUN set -eux ; \\\\\n    for beat in filebeat metricbeat; do\\\\\n      if [ ! -s /tmp/\\$beat-${version}.tar.gz ]; then \\\\\n        echo \"/tmp/\\$beat-${version}.tar.gz is empty - cannot uncompress\" 2>&1 ; \\\\\n        exit 1 ; \\\\\n      fi ; \\\\\n      if ! tar tf /tmp/\\$beat-${version}.tar.gz >/dev/null; then \\\\\n        echo \"/tmp/\\$beat-${version}.tar.gz is corrupt - cannot uncompress\" 2>&1 ; \\\\\n        exit 1 ; \\\\\n      fi ; \\\\\n      mkdir -p /opt/\\$beat ; \\\\\n      tar xf /tmp/\\$beat-${version}.tar.gz -C /opt/\\$beat --strip-components=1 ; \\\\\n    done && rm /tmp/\\$beat-${version}.tar.gz\n\n# Add plugins infrastructure\nRUN mkdir -p /opt/plugins/archive\nRUN chmod -R 0555 /opt/plugins\n<% } %>\n\n################################################################################\n# Build stage 2 (the actual Elasticsearch image):\n#\n# Copy elasticsearch from stage 1\n# Add entrypoint\n################################################################################\n\nFROM ${base_image}\n\n<% if (docker_base == \"iron_bank\") { %>\n<%\n/* Reviews of the Iron Bank Dockerfile said that they preferred simpler */\n/* scripting so this version doesn't have the retry loop featured below. */\n%>\nRUN ${package_manager} update --setopt=tsflags=nodocs -y && \\\\\n    ${package_manager} install --setopt=tsflags=nodocs -y \\\\\n      nc shadow-utils zip findutils unzip procps-ng && \\\\\n    ${package_manager} clean all\n\n<% } else if (docker_base == \"default\" || docker_base == \"cloud\") { %>\n\n# Change default shell to bash, then install required packages with retries.\nRUN yes no | dpkg-reconfigure dash && \\\\\n    <%= retry.loop(\n    package_manager,\n      \"export DEBIAN_FRONTEND=noninteractive && \\n\" +\n      \"      ${package_manager} update && \\n\" +\n      \"      ${package_manager} upgrade -y && \\n\" +\n      \"      ${package_manager} install -y --no-install-recommends \\n\" +\n      \"        ca-certificates curl netcat p11-kit unzip zip ${docker_base == 'cloud' ? 'wget' : '' } && \\n\" +\n      \"      ${package_manager} clean && \\n\" +\n      \"      rm -rf /var/lib/apt/lists/*\"\n  ) %>\n\n<% } else { %>\n\nRUN <%= retry.loop(\n    package_manager,\n      \"${package_manager} update --setopt=tsflags=nodocs -y && \\n\" +\n      \"      ${package_manager} install --setopt=tsflags=nodocs -y \\n\" +\n      \"        nc shadow-utils zip unzip findutils procps-ng && \\n\" +\n      \"      ${package_manager} clean all\"\n    ) %>\n\n<% } %>\n\n\n<% if (docker_base == \"default\" || docker_base == \"cloud\") { %>\nRUN groupadd -g 1000 elasticsearch && \\\\\n    adduser --uid 1000 --gid 1000 --home /usr/share/elasticsearch elasticsearch && \\\\\n    adduser elasticsearch root && \\\\\n    chown -R 0:0 /usr/share/elasticsearch\n<% } else { %>\nRUN groupadd -g 1000 elasticsearch && \\\\\n    adduser -u 1000 -g 1000 -G 0 -d /usr/share/elasticsearch elasticsearch && \\\\\n    chown -R 0:0 /usr/share/elasticsearch\n<% } %>\n\nENV ELASTIC_CONTAINER true\n\nWORKDIR /usr/share/elasticsearch\n\nCOPY --from=builder --chown=0:0 /usr/share/elasticsearch /usr/share/elasticsearch\nCOPY --from=builder --chown=0:0 /bin/tini /bin/tini\n\n<% if (docker_base == 'cloud') { %>\nCOPY --from=builder --chown=0:0 /opt /opt\n<% } %>\n\nENV PATH /usr/share/elasticsearch/bin:\\$PATH\n\nCOPY ${bin_dir}/docker-entrypoint.sh /usr/local/bin/docker-entrypoint.sh\n\n# 1. Sync the user and group permissions of /etc/passwd\n# 2. Set correct permissions of the entrypoint\n# 3. Ensure that there are no files with setuid or setgid, in order to mitigate \"stackclash\" attacks.\n#    We've already run this in previous layers so it ought to be a no-op.\n# 4. Replace OpenJDK's built-in CA certificate keystore with the one from the OS\n#    vendor. The latter is superior in several ways.\n#    REF: https://github.com/elastic/elasticsearch-docker/issues/171\n# 5. Tighten up permissions on the ES home dir (the permissions of the contents are handled earlier)\n# 6. You can't install plugins that include configuration when running as `elasticsearch` and the `config`\n#    dir is owned by `root`, because the installed tries to manipulate the permissions on the plugin's\n#    config directory.\nRUN chmod g=u /etc/passwd && \\\\\n    chmod 0555 /usr/local/bin/docker-entrypoint.sh && \\\\\n    find / -xdev -perm -4000 -exec chmod ug-s {} + && \\\\\n    chmod 0775 /usr/share/elasticsearch && \\\\\n    chown elasticsearch bin config config/jvm.options.d data logs plugins\n\n<% if (docker_base == 'default' || docker_base == 'cloud') { %>\n# Update \"cacerts\" bundle to use Ubuntu's CA certificates (and make sure it\n# stays up-to-date with changes to Ubuntu's store)\nCOPY bin/docker-openjdk /etc/ca-certificates/update.d/docker-openjdk\nRUN /etc/ca-certificates/update.d/docker-openjdk\n<% } else { %>\nRUN ln -sf /etc/pki/ca-trust/extracted/java/cacerts /usr/share/elasticsearch/jdk/lib/security/cacerts\n<% } %>\n\nEXPOSE 9200 9300\n\n<% if (docker_base != 'iron_bank') { %>\nLABEL org.label-schema.build-date=\"${build_date}\" \\\\\n  org.label-schema.license=\"${license}\" \\\\\n  org.label-schema.name=\"Elasticsearch\" \\\\\n  org.label-schema.schema-version=\"1.0\" \\\\\n  org.label-schema.url=\"https://www.elastic.co/products/elasticsearch\" \\\\\n  org.label-schema.usage=\"https://www.elastic.co/guide/en/elasticsearch/reference/index.html\" \\\\\n  org.label-schema.vcs-ref=\"${git_revision}\" \\\\\n  org.label-schema.vcs-url=\"https://github.com/elastic/elasticsearch\" \\\\\n  org.label-schema.vendor=\"Elastic\" \\\\\n  org.label-schema.version=\"${version}\" \\\\\n  org.opencontainers.image.created=\"${build_date}\" \\\\\n  org.opencontainers.image.documentation=\"https://www.elastic.co/guide/en/elasticsearch/reference/index.html\" \\\\\n  org.opencontainers.image.licenses=\"${license}\" \\\\\n  org.opencontainers.image.revision=\"${git_revision}\" \\\\\n  org.opencontainers.image.source=\"https://github.com/elastic/elasticsearch\" \\\\\n  org.opencontainers.image.title=\"Elasticsearch\" \\\\\n  org.opencontainers.image.url=\"https://www.elastic.co/products/elasticsearch\" \\\\\n  org.opencontainers.image.vendor=\"Elastic\" \\\\\n  org.opencontainers.image.version=\"${version}\"\n<% } %>\n\n<% if (docker_base == 'ubi') { %>\nLABEL name=\"Elasticsearch\" \\\\\n  maintainer=\"infra@elastic.co\" \\\\\n  vendor=\"Elastic\" \\\\\n  version=\"${version}\" \\\\\n  release=\"1\" \\\\\n  summary=\"Elasticsearch\" \\\\\n  description=\"You know, for search.\"\n<% } %>\n\n<% if (docker_base == 'ubi') { %>\nRUN mkdir /licenses && cp LICENSE.txt /licenses/LICENSE\n<% } else if (docker_base == 'iron_bank') { %>\nRUN mkdir /licenses && cp LICENSE.txt /licenses/LICENSE\nCOPY LICENSE /licenses/LICENSE.addendum\n<% } %>\n\n<% if (docker_base == \"cloud\") { %>\nENTRYPOINT [\"/bin/tini\", \"--\"]\nCMD [\"/app/elasticsearch.sh\"]\n# Generate a stub command that will be overwritten at runtime\nRUN mkdir /app && \\\\\n    echo -e '#!/bin/bash\\\\nexec /usr/local/bin/docker-entrypoint.sh eswrapper' > /app/elasticsearch.sh && \\\\\n    chmod 0555 /app/elasticsearch.sh\n\n<% } else { %>\n# Our actual entrypoint is `tini`, a minimal but functional init program. It\n# calls the entrypoint we provide, while correctly forwarding signals.\nENTRYPOINT [\"/bin/tini\", \"--\", \"/usr/local/bin/docker-entrypoint.sh\"]\n# Dummy overridable parameter parsed by entrypoint\nCMD [\"eswrapper\"]\n<% } %>\n\nUSER elasticsearch:root\n\n<% if (docker_base == 'iron_bank') { %>\nHEALTHCHECK --interval=10s --timeout=5s --start-period=1m --retries=5 CMD curl -I -f --max-time 5 http://localhost:9200 || exit 1\n<% } %>\n\n################################################################################\n# End of multi-stage Dockerfile\n################################################################################\n"
}