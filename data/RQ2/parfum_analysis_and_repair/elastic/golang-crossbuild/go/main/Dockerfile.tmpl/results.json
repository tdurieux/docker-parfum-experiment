{
  "startTime": 1674249702010,
  "endTime": 1674249702721,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 62,
        "lineEnd": 62,
        "columnStart": 4,
        "columnEnd": 82
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 68,
        "lineEnd": 68,
        "columnStart": 5,
        "columnEnd": 106
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 56,
        "lineEnd": 56,
        "columnStart": 4,
        "columnEnd": 99
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 59,
        "lineEnd": 59,
        "columnStart": 5,
        "columnEnd": 71
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 24,
        "lineEnd": 27,
        "columnStart": 4,
        "columnEnd": 22
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 30,
        "lineEnd": 31,
        "columnStart": 4,
        "columnEnd": 23
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 36,
        "lineEnd": 37,
        "columnStart": 4,
        "columnEnd": 17
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 8,
        "lineEnd": 20,
        "columnStart": 7,
        "columnEnd": 13
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 24,
        "lineEnd": 27,
        "columnStart": 4,
        "columnEnd": 22
      }
    }
  ],
  "repairedSmells": [
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 24,
        "lineEnd": 27,
        "columnStart": 4,
        "columnEnd": 22
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 30,
        "lineEnd": 31,
        "columnStart": 4,
        "columnEnd": 23
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 36,
        "lineEnd": 37,
        "columnStart": 4,
        "columnEnd": 17
      }
    }
  ],
  "repairedDockerfile": "ARG REPOSITORY\nARG VERSION\nARG TAG_EXTENSION=''\nFROM ${REPOSITORY}/golang-crossbuild:${VERSION}-base${TAG_EXTENSION}\n\nRUN \\\n    dpkg --add-architecture i386 \\\n    && apt-get -o Acquire::Check-Valid-Until=false update \\\n    && apt-get install -qq -y --no-install-recommends --allow-unauthenticated \\\n        clang \\\n        g++ \\\n        gcc \\\n        gcc-multilib \\\n        libc6-dev \\\n        libc6-dev-i386 \\\n        linux-libc-dev:i386 \\\n        mingw-w64 \\\n        mingw-w64-tools \\\n        patch \\\n        xz-utils \\\n        unzip && rm -rf /var/lib/apt/lists/*;\n\n{{- if ne .DEBIAN_VERSION \"7\" }}\n#Â librpm-dev\nRUN apt install -y --no-install-recommends --allow-unauthenticated\\\n        librpm-dev \\\n        libxml2-dev \\\n        libsqlite3-dev && rm -rf /var/lib/apt/lists/*;\n\n# libsystemd-dev\nRUN apt install -y --no-install-recommends --allow-unauthenticated\\\n         libsystemd-dev\n{{- end }}\n\n{{- if or (eq .DEBIAN_VERSION \"9\") (eq .DEBIAN_VERSION \"10\") (eq .DEBIAN_VERSION \"11\") }}\n# msitools\nRUN apt install -y --no-install-recommends --allow-unauthenticated\\\n         msitools\n{{- end }}\n\nRUN rm -rf /var/lib/apt/lists/*\n\nCOPY rootfs /\n\n# Basic test\nRUN cd / \\\n  && gcc helloWorld.c -o helloWorld \\\n  && file helloWorld \\\n  && readelf -h helloWorld \\\n  && file helloWorld | cut -d \",\" -f 2 | grep -c 'x86-64' \\\n  && rm helloWorld.c helloWorld\n\nRUN cd /libpcap/libpcap-1.8.1 \\\n  && cp -R /libpcap/libpcap-1.8.1 /libpcap/libpcap-1.8.1-i386 \\\n  && cp -R /libpcap/libpcap-1.8.1 /libpcap/libpcap-1.8.1-amd64 \\\n  && cd /libpcap/libpcap-1.8.1-i386 \\\n\t&& CFLAGS=\"-m32\" LDFLAGS=\"-m32\" ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --enable-usb=no --enable-bluetooth=no --enable-dbus=no \\\n\t&& make \\\n  && cd /libpcap/libpcap-1.8.1-amd64 \\\n  && ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --enable-usb=no --enable-bluetooth=no --enable-dbus=no \\\n  && make\n\nRUN curl -f -sSLO https://storage.googleapis.com/obs-ci-cache/beats/WpdPack_4_1_2.zip \\\n  && mkdir -p /libpcap/win \\\n  && echo \"ea799cf2f26e4afb1892938070fd2b1ca37ce5cf75fec4349247df12b784edbd  WpdPack_4_1_2.zip\" | sha256sum -c - \\\n  && unzip WpdPack_4_1_2.zip -d /libpcap/win \\\n  && rm WpdPack_4_1_2.zip \\\n  && cd /libpcap/win/WpdPack \\\n  && curl -f -sSLO https://raw.githubusercontent.com/elastic/beats/master/packetbeat/lib/windows-64/wpcap.dll \\\n  && echo \"0948518b229fb502b9c063966fc3afafbb749241a1c184f6eb7d532e00bce1d8  wpcap.dll\" | sha256sum -c - \\\n  && gendef wpcap.dll \\\n  && x86_64-w64-mingw32-dlltool \\\n    --as-flags=--64 \\\n    -m i386:x86-64 \\\n    -k \\\n    --output-lib /libpcap/win/WpdPack/Lib/x64/libwpcap.a \\\n    --input-def /libpcap/win/WpdPack/wpcap.def\n\n# Build-time metadata as defined at http://label-schema.org.\nARG BUILD_DATE\nARG IMAGE\nARG VCS_REF\nARG VCS_URL\nLABEL org.label-schema.build-date=$BUILD_DATE \\\n      org.label-schema.name=$IMAGE \\\n      org.label-schema.vcs-ref=$VCS_REF \\\n      org.label-schema.vcs-url=$VCS_URL \\\n      org.label-schema.schema-version=\"1.0\"\n"
}