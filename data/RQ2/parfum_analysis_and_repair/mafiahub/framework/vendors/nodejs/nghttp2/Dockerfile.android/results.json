{
  "startTime": 1674254726260,
  "endTime": 1674254727189,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 31,
        "lineEnd": 31,
        "columnStart": 4,
        "columnEnd": 97
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 69,
        "lineEnd": 69,
        "columnStart": 4,
        "columnEnd": 77
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 79,
        "lineEnd": 79,
        "columnStart": 4,
        "columnEnd": 77
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 80,
        "lineEnd": 80,
        "columnStart": 4,
        "columnEnd": 141
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 97,
        "lineEnd": 97,
        "columnStart": 4,
        "columnEnd": 108
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 117,
        "lineEnd": 117,
        "columnStart": 4,
        "columnEnd": 75
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 102,
        "lineEnd": 112,
        "columnStart": 4,
        "columnEnd": 12
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 24,
        "lineEnd": 27,
        "columnStart": 4,
        "columnEnd": 25
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 24,
        "lineEnd": 27,
        "columnStart": 4,
        "columnEnd": 25
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# Dockerfile to build nghttp2 android binary\n#\n# $ sudo docker build -t nghttp2-android - < Dockerfile.android\n#\n# After successful build, android binaries are located under\n# /root/build/nghttp2.  You can copy the binary using docker cp.  For\n# example, to copy nghttpx binary to host file system location\n# /path/to/dest, do this:\n#\n# $ sudo docker run -v /path/to/dest:/out nghttp2-android cp /root/build/nghttp2/src/nghttpx /out\n\n\n# Only use standalone-toolchain for reduce size\nFROM ubuntu:xenial\nMAINTAINER Tatsuhiro Tsujikawa\nENV ANDROID_HOME /root\nENV TOOLCHAIN $ANDROID_HOME/toolchain\nENV PATH $TOOLCHAIN/bin:$PATH\n\nENV NDK_VERSION r14b\n\nWORKDIR /root\nRUN apt-get update && \\\n    apt-get install --no-install-recommends -y unzip make binutils autoconf \\\n      automake autotools-dev libtool pkg-config git \\\n      curl dpkg-dev libxml2-dev genisoimage libc6-i386 \\\n      lib32stdc++6 python && \\\n    rm -rf /var/cache/apk/* && rm -rf /var/lib/apt/lists/*;\n\n# Install toolchain\nRUN curl -f -L -O https://dl.google.com/android/repository/android-ndk-$NDK_VERSION-linux-x86_64.zip && \\\n   unzip -q android-ndk-$NDK_VERSION-linux-x86_64.zip && \\\n   rm android-ndk-$NDK_VERSION-linux-x86_64.zip && \\\n   mkdir -p $ANDROID_HOME/toolchain && \\\n   $ANDROID_HOME/android-ndk-$NDK_VERSION/build/tools/make-standalone-toolchain.sh \\\n       --install-dir=$ANDROID_HOME/toolchain \\\n       --toolchain=arm-linux-androideabi-4.9 \\\n       --force && \\\n   rm -r android-ndk-$NDK_VERSION\n\nENV PREFIX /root/usr/local\n\n# Setup version of libraries\nENV OPENSSL_VERSION 1.0.2d\nENV SPDYLAY_VERSION v1.4.0\nENV LIBEV_VERSION 4.19\nENV ZLIB_VERSION 1.2.8\nENV CARES_VERSION 1.13.0\nENV NGHTTP2_VERSION v1.24.0\n\nWORKDIR /root/build\nRUN git clone https://github.com/tatsuhiro-t/spdylay -b $SPDYLAY_VERSION --depth 1\nWORKDIR /root/build/spdylay\nRUN autoreconf -i && \\\n    ./configure \\\n    --disable-shared \\\n    --host=arm-linux-androideabi \\\n    --build=`dpkg-architecture -qDEB_BUILD_GNU_TYPE` \\\n    --prefix=$PREFIX \\\n    --without-libxml2 \\\n    --disable-src \\\n    --disable-examples \\\n    CPPFLAGS=\"-I$PREFIX/include\" \\\n    PKG_CONFIG_LIBDIR=\"$PREFIX/lib/pkgconfig\" \\\n    LDFLAGS=\"-L$PREFIX/lib\" && \\\n    make install\n\nWORKDIR /root/build\nRUN curl -f -L -O https://www.openssl.org/source/openssl-$OPENSSL_VERSION.tar.gz && \\\n    tar xf openssl-$OPENSSL_VERSION.tar.gz && \\\n    rm openssl-$OPENSSL_VERSION.tar.gz\n\nWORKDIR /root/build/openssl-$OPENSSL_VERSION\nRUN export CROSS_COMPILE=$TOOLCHAIN/bin/arm-linux-androideabi- && \\\n    ./Configure --prefix=$PREFIX android && \\\n    make && make install_sw\n\nWORKDIR /root/build\nRUN curl -f -L -O http://dist.schmorp.de/libev/Attic/libev-$LIBEV_VERSION.tar.gz && \\\n    curl -f -L -O https://gist.github.com/tatsuhiro-t/48c45f08950f587180ed/raw/80a8f003b5d1091eae497c5995bbaa68096e739b/libev-4.19-android.patch && \\\n    tar xf libev-$LIBEV_VERSION.tar.gz && \\\n    rm libev-$LIBEV_VERSION.tar.gz\n\nWORKDIR /root/build/libev-$LIBEV_VERSION\nRUN patch -p1 < ../libev-4.19-android.patch && \\\n    ./configure \\\n    --host=arm-linux-androideabi \\\n    --build=`dpkg-architecture -qDEB_BUILD_GNU_TYPE` \\\n    --prefix=$PREFIX \\\n    --disable-shared \\\n    --enable-static \\\n    CPPFLAGS=-I$PREFIX/include \\\n    LDFLAGS=-L$PREFIX/lib && \\\n    make install\n\nWORKDIR /root/build\nRUN curl -f -L -O https://downloads.sourceforge.net/project/libpng/zlib/$ZLIB_VERSION/zlib-$ZLIB_VERSION.tar.gz && \\\n    tar xf zlib-$ZLIB_VERSION.tar.gz && \\\n    rm zlib-$ZLIB_VERSION.tar.gz\n\nWORKDIR /root/build/zlib-$ZLIB_VERSION\nRUN HOST=arm-linux-androideabi \\\n    CC=$HOST-gcc \\\n    AR=$HOST-ar \\\n    LD=$HOST-ld \\\n    RANLIB=$HOST-ranlib \\\n    STRIP=$HOST-strip \\\n    ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" \\\n\n\n\n\n\n\n    --prefix=$PREFIX \\\n    --libdir=$PREFIX/lib \\\n    --includedir=$PREFIX/include \\\n    --static && \\\n    make install\n\n\nWORKDIR /root/build\nRUN curl -f -L -O https://c-ares.haxx.se/download/c-ares-$CARES_VERSION.tar.gz && \\\n    tar xf c-ares-$CARES_VERSION.tar.gz && \\\n    rm c-ares-$CARES_VERSION.tar.gz\n\nWORKDIR /root/build/c-ares-$CARES_VERSION\nRUN ./configure \\\n      --host=arm-linux-androideabi \\\n      --build=`dpkg-architecture -qDEB_BUILD_GNU_TYPE` \\\n      --prefix=$PREFIX \\\n      --disable-shared && \\\n    make install\n\nWORKDIR /root/build\nRUN git clone https://github.com/nghttp2/nghttp2 -b $NGHTTP2_VERSION --depth 1\nWORKDIR /root/build/nghttp2\nRUN autoreconf -i && \\\n    ./configure \\\n    --enable-app \\\n    --disable-shared \\\n    --host=arm-linux-androideabi \\\n    --build=`dpkg-architecture -qDEB_BUILD_GNU_TYPE` \\\n    --with-xml-prefix=\"$PREFIX\" \\\n    --without-libxml2 \\\n    --disable-python-bindings \\\n    --disable-examples \\\n    --disable-threads \\\n      CC=\"$TOOLCHAIN\"/bin/arm-linux-androideabi-clang \\\n      CXX=\"$TOOLCHAIN\"/bin/arm-linux-androideabi-clang++ \\\n      CPPFLAGS=\"-fPIE -I$PREFIX/include\" \\\n      PKG_CONFIG_LIBDIR=\"$PREFIX/lib/pkgconfig\" \\\n      LDFLAGS=\"-fPIE -pie -L$PREFIX/lib\" && \\\n    make && \\\n    arm-linux-androideabi-strip src/nghttpx src/nghttpd src/nghttp\n"
}