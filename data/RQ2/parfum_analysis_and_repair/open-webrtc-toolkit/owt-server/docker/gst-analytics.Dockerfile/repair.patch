diff --git a/Users/tdurieux/git/dinghy-experiment/data/evaluation/dockerfiles/open-webrtc-toolkit/owt-server/docker/gst-analytics.Dockerfile b/Users/tdurieux/git/dinghy-experiment/data/evaluation/dockerfile_repair_results/open-webrtc-toolkit/owt-server/docker/gst-analytics.Dockerfile/repaired.Dockerfile
index dd695a4..0218f56 100644
--- a/Users/tdurieux/git/dinghy-experiment/data/evaluation/dockerfiles/open-webrtc-toolkit/owt-server/docker/gst-analytics.Dockerfile
+++ b/Users/tdurieux/git/dinghy-experiment/data/evaluation/dockerfile_repair_results/open-webrtc-toolkit/owt-server/docker/gst-analytics.Dockerfile/repaired.Dockerfile
@@ -46,10 +46,10 @@ RUN DEBIAN_FRONTEND=noninteractive apt-get update && \
 # Build x264
 ARG X264_VER=stable
 ARG X264_REPO=https://github.com/mirror/x264
-RUN  git clone ${X264_REPO} && \
+RUN git clone ${X264_REPO} && \
      cd x264 && \
      git checkout ${X264_VER} && \
-     ./configure --prefix="/usr" --libdir=/usr/lib/x86_64-linux-gnu --enable-shared && \
+     ./configure --build="$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)" --prefix="/usr" --libdir=/usr/lib/x86_64-linux-gnu --enable-shared && \
      make -j $(nproc) && \
      make install DESTDIR="/home/build" && \
      make install
@@ -138,7 +138,7 @@ RUN tar xvf build/src/gstreamer-${GST_VERSION}.tar.xz && \
     build/ && \
     ninja -C build && \
     DESTDIR=/home/build meson install -C build/ && \
-    meson install -C build/
+    meson install -C build/ && rm build/src/gstreamer-${GST_VERSION}.tar.xz
 
 # ORC Acceleration
 ARG GST_ORC_VERSION=0.4.31
@@ -158,7 +158,7 @@ RUN tar xvf build/src/orc-${GST_ORC_VERSION}.tar.xz && \
     build/ && \
     ninja -C build && \
     DESTDIR=/home/build meson install -C build/ && \
-    meson install -C build/
+    meson install -C build/ && rm build/src/orc-${GST_ORC_VERSION}.tar.xz
 
 
 # GStreamer Base plugins
@@ -203,7 +203,7 @@ RUN tar xvf build/src/gst-plugins-base-${GST_VERSION}.tar.xz && \
     build/ && \
     ninja -C build && \
     DESTDIR=/home/build meson install -C build/ && \
-    meson install -C build/
+    meson install -C build/ && rm build/src/gst-plugins-base-${GST_VERSION}.tar.xz
 
 
 # GStreamer Good plugins
@@ -254,7 +254,7 @@ RUN tar xvf build/src/gst-plugins-good-${GST_VERSION}.tar.xz && \
     build/ && \
     ninja -C build && \
     DESTDIR=/home/build meson install -C build/ && \
-    meson install -C build/
+    meson install -C build/ && rm build/src/gst-plugins-good-${GST_VERSION}.tar.xz
 
 
 # GStreamer Bad plugins
@@ -337,7 +337,7 @@ RUN tar xvf build/src/gst-plugins-bad-${GST_VERSION}.tar.xz && \
     build/ && \
     ninja -C build && \
     DESTDIR=/home/build meson install -C build/ && \
-    meson install -C build/
+    meson install -C build/ && rm build/src/gst-plugins-bad-${GST_VERSION}.tar.xz
 
 # Build the gstreamer plugin ugly set
 RUN DEBIAN_FRONTEND=noninteractive apt-get update && \
@@ -372,20 +372,20 @@ RUN tar xvf build/src/gst-plugins-ugly-${GST_VERSION}.tar.xz && \
     build/ && \
     ninja -C build && \
     DESTDIR=/home/build meson install -C build/ && \
-    meson install -C build/
+    meson install -C build/ && rm build/src/gst-plugins-ugly-${GST_VERSION}.tar.xz
 
 
 # FFmpeg
 RUN DEBIAN_FRONTEND=noninteractive apt-get update && \
     apt-get install -y -q --no-install-recommends \
         bzip2 \
-        autoconf
+        autoconf && rm -rf /var/lib/apt/lists/*;
 
 RUN mkdir ffmpeg_sources && cd ffmpeg_sources && \
     wget -O - https://www.nasm.us/pub/nasm/releasebuilds/2.14.02/nasm-2.14.02.tar.bz2 | tar xj && \
     cd nasm-2.14.02 && \
     ./autogen.sh && \
-    ./configure --prefix=${PREFIX} --bindir="${PREFIX}/bin" && \
+    ./configure --build="$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)" --prefix=${PREFIX} --bindir="${PREFIX}/bin" && \
     make && make install
 
 RUN wget https://ffmpeg.org/releases/ffmpeg-4.2.2.tar.gz -O build/src/ffmpeg-4.2.2.tar.gz
@@ -393,7 +393,8 @@ RUN cd ffmpeg_sources && \
     tar xvf /home/build/src/ffmpeg-4.2.2.tar.gz && \
     cd ffmpeg-4.2.2 && \
     PATH="${PREFIX}/bin:$PATH" PKG_CONFIG_PATH="${PREFIX}/lib/pkgconfig" \
-    ./configure \
+    ./configure --build="$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)" \
+
         --disable-gpl \
         --enable-pic \
         --disable-shared \
@@ -406,7 +407,7 @@ RUN cd ffmpeg_sources && \
         --bindir="${PREFIX}/bin" \
         --disable-vaapi && \
     make -j $(nproc) && \
-    make install
+    make install && rm /home/build/src/ffmpeg-4.2.2.tar.gz
 
 # Build gst-libav
 ARG GST_PLUGIN_LIBAV_REPO=https://gstreamer.freedesktop.org/src/gst-libav/gst-libav-${GST_VERSION}.tar.xz
@@ -426,7 +427,7 @@ RUN tar xvf build/src/gst-libav-${GST_VERSION}.tar.xz && \
     build/ && \
     ninja -C build && \
     DESTDIR=/home/build meson install -C build/ && \
-    meson install -C build/
+    meson install -C build/ && rm build/src/gst-libav-${GST_VERSION}.tar.xz
 
 ENV PKG_CONFIG_PATH=/opt/intel/mediasdk/lib64/pkgconfig:${PKG_CONFIG_PATH}
 ENV LIBRARY_PATH=/opt/intel/mediasdk/lib64:${LIBRARY_PATH}
@@ -464,7 +465,7 @@ RUN tar xvf build/src/gstreamer-vaapi-${GST_VERSION}.tar.xz && \
     build/ && \
     ninja -C build && \
     DESTDIR=/home/build meson install -C build/ && \
-    meson install -C build/
+    meson install -C build/ && rm build/src/gstreamer-vaapi-${GST_VERSION}.tar.xz
 
 # gst-python
 RUN DEBIAN_FRONTEND=noninteractive apt-get update && \
@@ -486,7 +487,7 @@ RUN tar xvf build/src/gst-python-${GST_VERSION}.tar.xz && \
     build/ && \
     ninja -C build && \
     DESTDIR=/home/build meson install -C build/ && \
-    meson install -C build/
+    meson install -C build/ && rm build/src/gst-python-${GST_VERSION}.tar.xz
 
 ENV GI_TYPELIB_PATH=${LIBDIR}/girepository-1.0
 
@@ -494,9 +495,9 @@ ENV PYTHONPATH=${PREFIX}/lib/python3.6/site-packages:${PYTHONPATH}
 
 ARG NODE_VERSION=10.21.0
 ARG NODE_REPO=https://nodejs.org/dist/v${NODE_VERSION}/node-v${NODE_VERSION}.tar.gz
-RUN  wget -O - ${NODE_REPO} | tar -xz && ls && \
+RUN wget -O - ${NODE_REPO} | tar -xz && ls && \
      cd node-v${NODE_VERSION} && \
-     ./configure && \
+     ./configure --build="$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)" && \
      make -j4 && \
      make install DESTDIR=/home/build && rm -rf node-v${NODE_VERSION}
 
@@ -506,7 +507,7 @@ WORKDIR /home
 
 ARG OpenVINO_VERSION=2021.1.110
 
-RUN DEBIAN_FRONTEND=noninteractive apt-get update && apt-get install -y -q --no-install-recommends cpio
+RUN DEBIAN_FRONTEND=noninteractive apt-get update && apt-get install -y -q --no-install-recommends cpio && rm -rf /var/lib/apt/lists/*;
 
 COPY l_openvino_toolkit_p_${OpenVINO_VERSION}.tgz .
 
@@ -515,7 +516,7 @@ RUN tar -xvzf l_openvino_toolkit_p_${OpenVINO_VERSION}.tgz && \
     sed -i 's#decline#accept#g' silent.cfg && \
     sed -i 's#COMPONENTS=DEFAULTS#COMPONENTS=intel-openvino-ie-sdk-ubuntu-bionic__x86_64;intel-openvino-ie-rt-cpu-ubuntu-bionic__x86_64;intel-openvino-ie-rt-gpu-ubuntu-bionic__x86_64;intel-openvino-ie-rt-vpu-ubuntu-bionic__x86_64;intel-openvino-ie-rt-gna-ubuntu-bionic__x86_64;intel-openvino-ie-rt-hddl-ubuntu-bionic__x86_64;intel-openvino-opencv-lib-ubuntu-bionic__x86_64#g' silent.cfg && \
     ./install.sh -s silent.cfg && \
-    cd .. && rm -rf l_openvino_toolkit_p_${OpenVINO_VERSION}
+    cd .. && rm -rf l_openvino_toolkit_p_${OpenVINO_VERSION} && rm l_openvino_toolkit_p_${OpenVINO_VERSION}.tgz
 
 ARG IE_DIR=/home/build/opt/intel/dldt/inference-engine
 
@@ -543,7 +544,7 @@ LABEL Vendor="Intel Corporation"
 WORKDIR /root
 
 # Prerequisites
-RUN apt-get update && apt-get install -y -q --no-install-recommends git make gcc g++ libglib2.0-dev pkg-config libboost-regex-dev libboost-thread-dev libboost-system-dev liblog4cxx-dev rabbitmq-server mongodb openjdk-8-jre curl libboost-test-dev nasm yasm gyp libx11-dev libkrb5-dev intel-gpu-tools m4 autoconf libtool automake cmake libfreetype6-dev sudo wget lsb-release
+RUN apt-get update && apt-get install -y -q --no-install-recommends git make gcc g++ libglib2.0-dev pkg-config libboost-regex-dev libboost-thread-dev libboost-system-dev liblog4cxx-dev rabbitmq-server mongodb openjdk-8-jre curl libboost-test-dev nasm yasm gyp libx11-dev libkrb5-dev intel-gpu-tools m4 autoconf libtool automake cmake libfreetype6-dev sudo wget lsb-release && rm -rf /var/lib/apt/lists/*;
 
 
 # Install
@@ -560,7 +561,7 @@ ENV LD_LIBRARY_PATH=/opt/intel/dldt/inference-engine/external/tbb/lib:/opt/intel
 
 # Build OWT specific modules
 
-# 1. Clone OWT server source code 
+# 1. Clone OWT server source code
 # 2. Clone licode source code and patch
 # 3. Clone webrtc source code and patch
 RUN git config --global user.email "you@example.com" && \
@@ -570,8 +571,8 @@ RUN git config --global user.email "you@example.com" && \
 
     # Get js client sdk for owt
 RUN cd /home && git clone -b ${OWT_BRANCH} ${OWT_SDK_REPO} && \
-    cd owt-client-javascript/scripts && git reset --hard ${OWT_TAG} && npm install -g grunt-cli node-gyp@6.1.0 && npm install && grunt
- 
+    cd owt-client-javascript/scripts && git reset --hard ${OWT_TAG} && npm install -g grunt-cli node-gyp@6.1.0 && npm install && grunt && npm cache clean --force;
+
     #Build and pack owt
 RUN cd ${SERVER_PATH} && ./scripts/build.js -t mcu -r -c && \
     ./scripts/pack.js -t all --install-module --no-pseudo --with-ffmpeg -f -p /home/owt-client-javascript/dist/samples/conference
@@ -611,7 +612,7 @@ RUN apt-get update && DEBIAN_FRONTEND=noninteractive apt-get install -y -q --no-
     libva-dev libxrandr-dev libudev-dev liblog4cxx-dev gstreamer1.0-plugins-ugly rabbitmq-server mongodb sudo\
     \
     && useradd -m owt && echo "owt:owt" | chpasswd && adduser owt sudo \
-    && rm -rf /var/lib/apt/lists/* 
+    && rm -rf /var/lib/apt/lists/*
 
 # Install