{
  "startTime": 1674254844742,
  "endTime": 1674254848382,
  "originalSmells": [
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 572,
        "lineEnd": 572,
        "columnStart": 71,
        "columnEnd": 110
      }
    },
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 572,
        "lineEnd": 572,
        "columnStart": 114,
        "columnEnd": 125
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 51,
        "lineEnd": 51,
        "columnStart": 5,
        "columnEnd": 83
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 387,
        "lineEnd": 387,
        "columnStart": 4,
        "columnEnd": 59
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 394,
        "lineEnd": 406,
        "columnStart": 4,
        "columnEnd": 23
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 498,
        "lineEnd": 498,
        "columnStart": 5,
        "columnEnd": 16
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 125,
        "lineEnd": 125,
        "columnStart": 4,
        "columnEnd": 53
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 146,
        "lineEnd": 146,
        "columnStart": 4,
        "columnEnd": 51
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 189,
        "lineEnd": 189,
        "columnStart": 4,
        "columnEnd": 60
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 240,
        "lineEnd": 240,
        "columnStart": 4,
        "columnEnd": 60
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 316,
        "lineEnd": 316,
        "columnStart": 4,
        "columnEnd": 59
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 353,
        "lineEnd": 353,
        "columnStart": 4,
        "columnEnd": 60
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 392,
        "lineEnd": 392,
        "columnStart": 4,
        "columnEnd": 47
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 413,
        "lineEnd": 413,
        "columnStart": 4,
        "columnEnd": 53
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 450,
        "lineEnd": 450,
        "columnStart": 4,
        "columnEnd": 59
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 477,
        "lineEnd": 477,
        "columnStart": 4,
        "columnEnd": 54
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 512,
        "lineEnd": 512,
        "columnStart": 4,
        "columnEnd": 58
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 379,
        "lineEnd": 381,
        "columnStart": 4,
        "columnEnd": 16
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 508,
        "lineEnd": 508,
        "columnStart": 53,
        "columnEnd": 103
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 545,
        "lineEnd": 545,
        "columnStart": 22,
        "columnEnd": 372
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# ==============================================================================\n# Copyright (C) 2018-2020 Intel Corporation\n#\n# SPDX-License-Identifier: MIT\n# ==============================================================================\nARG dldt=dldt-binaries\nARG gst=gst-internal\nARG OpenVINO_VERSION\n\nFROM ubuntu:18.04 AS base\nWORKDIR /home\n\n# COMMON BUILD TOOLS\nRUN DEBIAN_FRONTEND=noninteractive apt-get update && \\\n    apt-get install -y -q --no-install-recommends \\\n        ca-certificates \\\n        cmake \\\n        build-essential \\\n        automake \\\n        autoconf \\\n        libtool \\\n        make \\\n        git \\\n        wget \\\n        pciutils \\\n        cpio \\\n        libtool \\\n        lsb-release \\\n        ca-certificates \\\n        pkg-config \\\n        bison \\\n        flex \\\n        libcurl4-gnutls-dev \\\n        zlib1g-dev \\\n        nasm \\\n        yasm \\\n        libx11-dev \\\n        xorg-dev \\\n        libgl1-mesa-dev \\\n        openbox \\\n        python3 \\\n        python3-pip \\\n        python3-setuptools && \\\n    rm -rf /var/lib/apt/lists/*\n\n# Build x264\nARG X264_VER=stable\nARG X264_REPO=https://github.com/mirror/x264\nRUN git clone ${X264_REPO} && \\\n     cd x264 && \\\n     git checkout ${X264_VER} && \\\n     ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --prefix=\"/usr\" --libdir=/usr/lib/x86_64-linux-gnu --enable-shared && \\\n     make -j $(nproc) && \\\n     make install DESTDIR=\"/home/build\" && \\\n     make install\n\n# Build Intel(R) Media SDK\nARG MSDK_REPO=https://github.com/Intel-Media-SDK/MediaSDK/releases/download/intel-mediasdk-19.3.1/MediaStack.tar.gz\nRUN wget -O - ${MSDK_REPO} | tar xz && \\\n    cd MediaStack && \\\n    \\\n    cp -r opt/ /home/build && \\\n    cp -r etc/ /home/build && \\\n    \\\n    cp -a opt/. /opt/ && \\\n    cp -a etc/. /opt/ && \\\n    ldconfig\n\nENV PKG_CONFIG_PATH=/usr/lib/x86_64-linux-gnu/pkgconfig:/opt/intel/mediasdk/lib64/pkgconfig\nENV LIBRARY_PATH=/opt/intel/mediasdk/lib64:/usr/lib:${LIBRARY_PATH}\nENV LIBVA_DRIVERS_PATH=/opt/intel/mediasdk/lib64\nENV LIBVA_DRIVER_NAME=iHD\nENV GST_VAAPI_ALL_DRIVERS=1\n\n# clinfo needs to be installed after build directory is copied over\nRUN mkdir neo && cd neo && \\\n    wget https://github.com/intel/compute-runtime/releases/download/19.31.13700/intel-gmmlib_19.2.3_amd64.deb && \\\n    wget https://github.com/intel/compute-runtime/releases/download/19.31.13700/intel-igc-core_1.0.10-2364_amd64.deb && \\\n    wget https://github.com/intel/compute-runtime/releases/download/19.31.13700/intel-igc-opencl_1.0.10-2364_amd64.deb && \\\n    wget https://github.com/intel/compute-runtime/releases/download/19.31.13700/intel-opencl_19.31.13700_amd64.deb && \\\n    wget https://github.com/intel/compute-runtime/releases/download/19.31.13700/intel-ocloc_19.31.13700_amd64.deb && \\\n    dpkg -i *.deb && \\\n    dpkg-deb -x intel-gmmlib_19.2.3_amd64.deb /home/build/ && \\\n    dpkg-deb -x intel-igc-core_1.0.10-2364_amd64.deb /home/build/ && \\\n    dpkg-deb -x intel-igc-opencl_1.0.10-2364_amd64.deb /home/build/ && \\\n    dpkg-deb -x intel-opencl_19.31.13700_amd64.deb /home/build/ && \\\n    dpkg-deb -x intel-ocloc_19.31.13700_amd64.deb /home/build/ && \\\n    cp -a /home/build/. /\n\n\nFROM base AS gst-internal\nWORKDIR /home\n\n# GStreamer core\nRUN DEBIAN_FRONTEND=noninteractive apt-get update && \\\n    apt-get install --no-install-recommends -q -y \\\n        libglib2.0-dev \\\n        libgmp-dev \\\n        libgsl-dev \\\n        gobject-introspection \\\n        libcap-dev \\\n        libcap2-bin \\\n        gettext \\\n        libgirepository1.0-dev && \\\n    rm -rf /var/lib/apt/lists/* && \\\n    pip3 install --no-cache-dir meson ninja\n\nARG PACKAGE_ORIGIN=\"https://gstreamer.freedesktop.org\"\n\nARG PREFIX=/usr\nARG LIBDIR=/usr/lib/x86_64-linux-gnu\nARG LIBEXECDIR=/usr/lib/x86_64-linux-gnu\n\nARG GST_VERSION=1.16.2\nARG BUILD_TYPE=release\n\nENV GSTREAMER_LIB_DIR=${LIBDIR}\nENV LIBRARY_PATH=${GSTREAMER_LIB_DIR}:${GSTREAMER_LIB_DIR}/gstreamer-1.0:${LIBRARY_PATH}\nENV LD_LIBRARY_PATH=${LIBRARY_PATH}\nENV PKG_CONFIG_PATH=${GSTREAMER_LIB_DIR}/pkgconfig\n\nRUN mkdir -p build/src\n\nARG GST_REPO=https://gstreamer.freedesktop.org/src/gstreamer/gstreamer-${GST_VERSION}.tar.xz\nRUN wget ${GST_REPO} -O build/src/gstreamer-${GST_VERSION}.tar.xz\nRUN tar xvf build/src/gstreamer-${GST_VERSION}.tar.xz && \\\n    cd gstreamer-${GST_VERSION} && \\\n    PKG_CONFIG_PATH=$PWD/build/pkgconfig meson \\\n        -Dexamples=disabled \\\n        -Dtests=disabled \\\n        -Dbenchmarks=disabled \\\n        -Dgtk_doc=disabled \\\n        -Dpackage-origin=\"${PACKAGE_ORIGIN}\" \\\n        --buildtype=${BUILD_TYPE} \\\n        --prefix=${PREFIX} \\\n        --libdir=${LIBDIR} \\\n        --libexecdir=${LIBEXECDIR} \\\n    build/ && \\\n    ninja -C build && \\\n    DESTDIR=/home/build meson install -C build/ && \\\n    meson install -C build/ && rm build/src/gstreamer-${GST_VERSION}.tar.xz\n\n# ORC Acceleration\nARG GST_ORC_VERSION=0.4.31\nARG GST_ORC_REPO=https://gstreamer.freedesktop.org/src/orc/orc-${GST_ORC_VERSION}.tar.xz\nRUN wget ${GST_ORC_REPO} -O build/src/orc-${GST_ORC_VERSION}.tar.xz\nRUN tar xvf build/src/orc-${GST_ORC_VERSION}.tar.xz && \\\n    cd orc-${GST_ORC_VERSION} && \\\n    meson \\\n        -Dexamples=disabled \\\n        -Dtests=disabled \\\n        -Dbenchmarks=disabled \\\n        -Dgtk_doc=disabled \\\n        -Dorc-test=disabled \\\n        --prefix=${PREFIX} \\\n        --libdir=${LIBDIR} \\\n        --libexecdir=${LIBEXECDIR} \\\n    build/ && \\\n    ninja -C build && \\\n    DESTDIR=/home/build meson install -C build/ && \\\n    meson install -C build/ && rm build/src/orc-${GST_ORC_VERSION}.tar.xz\n\n\n# GStreamer Base plugins\nRUN DEBIAN_FRONTEND=noninteractive apt-get update && \\\n    apt-get install -y -q --no-install-recommends \\\n        libx11-dev \\\n        iso-codes \\\n        libegl1-mesa-dev \\\n        libgles2-mesa-dev \\\n        libgl-dev \\\n        gudev-1.0 \\\n        libtheora-dev \\\n        libcdparanoia-dev \\\n        libpango1.0-dev \\\n        libgbm-dev \\\n        libasound2-dev \\\n        libjpeg-dev \\\n        libvisual-0.4-dev \\\n        libxv-dev \\\n        libopus-dev \\\n        libgraphene-1.0-dev \\\n        libvorbis-dev && \\\n    rm -rf /var/lib/apt/lists/*\n\n\n# Build the gstreamer plugin base\nARG GST_PLUGIN_BASE_REPO=https://gstreamer.freedesktop.org/src/gst-plugins-base/gst-plugins-base-${GST_VERSION}.tar.xz\nRUN wget ${GST_PLUGIN_BASE_REPO} -O build/src/gst-plugins-base-${GST_VERSION}.tar.xz\nRUN tar xvf build/src/gst-plugins-base-${GST_VERSION}.tar.xz && \\\n    cd gst-plugins-base-${GST_VERSION} && \\\n    PKG_CONFIG_PATH=$PWD/build/pkgconfig:${PKG_CONFIG_PATH} meson \\\n        -Dexamples=disabled \\\n        -Dtests=disabled \\\n        -Dgtk_doc=disabled \\\n        -Dnls=disabled \\\n        -Dgl=disabled \\\n        -Dpackage-origin=\"${PACKAGE_ORIGIN}\" \\\n        --buildtype=${BUILD_TYPE} \\\n        --prefix=${PREFIX} \\\n        --libdir=${LIBDIR} \\\n        --libexecdir=${LIBEXECDIR} \\\n    build/ && \\\n    ninja -C build && \\\n    DESTDIR=/home/build meson install -C build/ && \\\n    meson install -C build/ && rm build/src/gst-plugins-base-${GST_VERSION}.tar.xz\n\n\n# GStreamer Good plugins\nRUN DEBIAN_FRONTEND=noninteractive apt-get update && \\\n    apt-get install -y -q --no-install-recommends \\\n        libbz2-dev \\\n        libv4l-dev \\\n        libaa1-dev \\\n        libflac-dev \\\n        libgdk-pixbuf2.0-dev \\\n        libmp3lame-dev \\\n        libcaca-dev \\\n        libdv4-dev \\\n        libmpg123-dev \\\n        libraw1394-dev \\\n        libavc1394-dev \\\n        libiec61883-dev \\\n        libpulse-dev \\\n        libsoup2.4-dev \\\n        libspeex-dev \\\n        libtag-extras-dev \\\n        libtwolame-dev \\\n        libwavpack-dev && \\\n    rm -rf /var/lib/apt/lists/*\n\nARG GST_PLUGIN_GOOD_REPO=https://gstreamer.freedesktop.org/src/gst-plugins-good/gst-plugins-good-${GST_VERSION}.tar.xz\n\n# Lines below extract patch needed for Smart City Sample (OVS use case). Patch is applied before building gst-plugins-good\nRUN  mkdir gst-plugins-good-${GST_VERSION} && \\\n    git clone https://github.com/GStreamer/gst-plugins-good.git && \\\n    cd gst-plugins-good && \\\n    git diff 080eba64de68161026f2b451033d6b455cb92a05 37d22186ffb29a830e8aad2e4d6456484e716fe7 > ../gst-plugins-good-${GST_VERSION}/rtpjitterbuffer-fix.patch\n\nRUN wget ${GST_PLUGIN_GOOD_REPO} -O build/src/gst-plugins-good-${GST_VERSION}.tar.xz\nRUN tar xvf build/src/gst-plugins-good-${GST_VERSION}.tar.xz && \\\n    cd gst-plugins-good-${GST_VERSION}  && \\\n    patch -p1 < rtpjitterbuffer-fix.patch && \\\n    PKG_CONFIG_PATH=$PWD/build/pkgconfig:${PKG_CONFIG_PATH} meson \\\n        -Dexamples=disabled \\\n        -Dtests=disabled \\\n        -Dgtk_doc=disabled \\\n        -Dnls=disabled \\\n        -Dpackage-origin=\"${PACKAGE_ORIGIN}\" \\\n        --buildtype=${BUILD_TYPE} \\\n        --prefix=${PREFIX} \\\n        --libdir=${LIBDIR} \\\n        --libexecdir=${LIBEXECDIR} \\\n    build/ && \\\n    ninja -C build && \\\n    DESTDIR=/home/build meson install -C build/ && \\\n    meson install -C build/ && rm build/src/gst-plugins-good-${GST_VERSION}.tar.xz\n\n\n# GStreamer Bad plugins\nRUN DEBIAN_FRONTEND=noninteractive apt-get update && \\\n    apt-get install -y -q --no-install-recommends \\\n        libbluetooth-dev \\\n        libusb-1.0.0-dev \\\n        libass-dev \\\n        libbs2b-dev \\\n        libchromaprint-dev \\\n        liblcms2-dev \\\n        libssh2-1-dev \\\n        libdc1394-22-dev \\\n        libdirectfb-dev \\\n        libssh-dev \\\n        libdca-dev \\\n        libfaac-dev \\\n        libfdk-aac-dev \\\n        flite1-dev \\\n        libfluidsynth-dev \\\n        libgme-dev \\\n        libgsm1-dev \\\n        nettle-dev \\\n        libkate-dev \\\n        liblrdf0-dev \\\n        libde265-dev \\\n        libmjpegtools-dev \\\n        libmms-dev \\\n        libmodplug-dev \\\n        libmpcdec-dev \\\n        libneon27-dev \\\n        libopenal-dev \\\n        libopenexr-dev \\\n        libopenjp2-7-dev \\\n        libopenmpt-dev \\\n        libopenni2-dev \\\n        libdvdnav-dev \\\n        librtmp-dev \\\n        librsvg2-dev \\\n        libsbc-dev \\\n        libsndfile1-dev \\\n        libsoundtouch-dev \\\n        libspandsp-dev \\\n        libsrtp2-dev \\\n        libzvbi-dev \\\n        libvo-aacenc-dev \\\n        libvo-amrwbenc-dev \\\n        libwebrtc-audio-processing-dev \\\n        libwebp-dev \\\n        libwildmidi-dev \\\n        libzbar-dev \\\n        libnice-dev \\\n        libxkbcommon-dev && \\\n    rm -rf /var/lib/apt/lists/*\n\n# Uninstalled dependencies: opencv, opencv4, libmfx(waiting intelMSDK), wayland(low version), vdpau\n\nARG GST_PLUGIN_BAD_REPO=https://gstreamer.freedesktop.org/src/gst-plugins-bad/gst-plugins-bad-${GST_VERSION}.tar.xz\nRUN wget ${GST_PLUGIN_BAD_REPO} -O build/src/gst-plugins-bad-${GST_VERSION}.tar.xz\nRUN tar xvf build/src/gst-plugins-bad-${GST_VERSION}.tar.xz && \\\n    cd gst-plugins-bad-${GST_VERSION} && \\\n    PKG_CONFIG_PATH=$PWD/build/pkgconfig:${PKG_CONFIG_PATH} meson \\\n        -Dexamples=disabled \\\n        -Dtests=disabled \\\n        -Ddoc=disabled \\\n        -Dnls=disabled \\\n        -Dx265=disabled \\\n        -Dyadif=disabled \\\n        -Dresindvd=disabled \\\n        -Dmplex=disabled \\\n        -Ddts=disabled \\\n        -Dofa=disabled \\\n        -Dfaad=disabled \\\n        -Dmpeg2enc=disabled \\\n        -Dpackage-origin=\"${PACKAGE_ORIGIN}\" \\\n        --buildtype=${BUILD_TYPE} \\\n        --prefix=${PREFIX} \\\n        --libdir=${LIBDIR} \\\n        --libexecdir=${LIBEXECDIR} \\\n    build/ && \\\n    ninja -C build && \\\n    DESTDIR=/home/build meson install -C build/ && \\\n    meson install -C build/ && rm build/src/gst-plugins-bad-${GST_VERSION}.tar.xz\n\n# Build the gstreamer plugin ugly set\nRUN DEBIAN_FRONTEND=noninteractive apt-get update && \\\n    apt-get install -y -q --no-install-recommends \\\n        libmpeg2-4-dev \\\n        libopencore-amrnb-dev \\\n        libopencore-amrwb-dev \\\n        liba52-0.7.4-dev \\\n    && rm -rf /var/lib/apt/lists/*\n\nARG GST_PLUGIN_UGLY_REPO=https://gstreamer.freedesktop.org/src/gst-plugins-ugly/gst-plugins-ugly-${GST_VERSION}.tar.xz\n\nRUN wget ${GST_PLUGIN_UGLY_REPO} -O build/src/gst-plugins-ugly-${GST_VERSION}.tar.xz\nRUN tar xvf build/src/gst-plugins-ugly-${GST_VERSION}.tar.xz && \\\n    cd gst-plugins-ugly-${GST_VERSION}  && \\\n    PKG_CONFIG_PATH=$PWD/build/pkgconfig:${PKG_CONFIG_PATH} meson \\\n        -Dexamples=disabled \\\n        -Dtests=disabled \\\n        -Dgtk_doc=disabled \\\n        -Dnls=disabled \\\n        -Dcdio=disabled \\\n        -Dsid=disabled \\\n        -Dmpeg2dec=disabled \\\n        -Ddvdread=disabled \\\n        -Da52dec=disabled \\\n        -Dx264=disabled \\\n        -Dpackage-origin=\"${PACKAGE_ORIGIN}\" \\\n        --buildtype=${BUILD_TYPE} \\\n        --prefix=${PREFIX} \\\n        --libdir=${LIBDIR} \\\n        --libexecdir=${LIBEXECDIR} \\\n    build/ && \\\n    ninja -C build && \\\n    DESTDIR=/home/build meson install -C build/ && \\\n    meson install -C build/ && rm build/src/gst-plugins-ugly-${GST_VERSION}.tar.xz\n\n\n# FFmpeg\nRUN DEBIAN_FRONTEND=noninteractive apt-get update && \\\n    apt-get install -y -q --no-install-recommends \\\n        bzip2 \\\n        autoconf && rm -rf /var/lib/apt/lists/*;\n\nRUN mkdir ffmpeg_sources && cd ffmpeg_sources && \\\n    wget -O - https://www.nasm.us/pub/nasm/releasebuilds/2.14.02/nasm-2.14.02.tar.bz2 | tar xj && \\\n    cd nasm-2.14.02 && \\\n    ./autogen.sh && \\\n    ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --prefix=${PREFIX} --bindir=\"${PREFIX}/bin\" && \\\n    make && make install\n\nRUN wget https://ffmpeg.org/releases/ffmpeg-4.2.2.tar.gz -O build/src/ffmpeg-4.2.2.tar.gz\nRUN cd ffmpeg_sources && \\\n    tar xvf /home/build/src/ffmpeg-4.2.2.tar.gz && \\\n    cd ffmpeg-4.2.2 && \\\n    PATH=\"${PREFIX}/bin:$PATH\" PKG_CONFIG_PATH=\"${PREFIX}/lib/pkgconfig\" \\\n    ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" \\\n\n        --disable-gpl \\\n        --enable-pic \\\n        --disable-shared \\\n        --enable-static \\\n        --prefix=${PREFIX} \\\n        --extra-cflags=\"-I${PREFIX}/include\" \\\n        --extra-ldflags=\"-L${PREFIX}/lib\" \\\n        --extra-libs=-lpthread \\\n        --extra-libs=-lm \\\n        --bindir=\"${PREFIX}/bin\" \\\n        --disable-vaapi && \\\n    make -j $(nproc) && \\\n    make install && rm /home/build/src/ffmpeg-4.2.2.tar.gz\n\n# Build gst-libav\nARG GST_PLUGIN_LIBAV_REPO=https://gstreamer.freedesktop.org/src/gst-libav/gst-libav-${GST_VERSION}.tar.xz\nRUN wget ${GST_PLUGIN_LIBAV_REPO} -O build/src/gst-libav-${GST_VERSION}.tar.xz\nRUN tar xvf build/src/gst-libav-${GST_VERSION}.tar.xz && \\\n    cd gst-libav-${GST_VERSION} && \\\n    PKG_CONFIG_PATH=$PWD/build/pkgconfig:${PREFIX}/lib/pkgconfig:${PKG_CONFIG_PATH} meson \\\n        -Dexamples=disabled \\\n        -Dtests=disabled \\\n        -Dgtk_doc=disabled \\\n        -Dnls=disabled \\\n        -Dpackage-origin=\"${PACKAGE_ORIGIN}\" \\\n        --buildtype=${BUILD_TYPE} \\\n        --prefix=${PREFIX} \\\n        --libdir=${LIBDIR} \\\n        --libexecdir=${LIBEXECDIR} \\\n    build/ && \\\n    ninja -C build && \\\n    DESTDIR=/home/build meson install -C build/ && \\\n    meson install -C build/ && rm build/src/gst-libav-${GST_VERSION}.tar.xz\n\nENV PKG_CONFIG_PATH=/opt/intel/mediasdk/lib64/pkgconfig:${PKG_CONFIG_PATH}\nENV LIBRARY_PATH=/opt/intel/mediasdk/lib64:${LIBRARY_PATH}\nENV LD_LIBRARY_PATH=/opt/intel/mediasdk/lib64:${LD_LIBRARY_PATH}\nENV LIBVA_DRIVERS_PATH=/opt/intel/mediasdk/lib64\nENV LIBVA_DRIVER_NAME=iHD\n\n# Build gstreamer plugin vaapi\nARG GST_PLUGIN_VAAPI_REPO=https://gstreamer.freedesktop.org/src/gstreamer-vaapi/gstreamer-vaapi-${GST_VERSION}.tar.xz\n\nENV GST_VAAPI_ALL_DRIVERS=1\n\nRUN DEBIAN_FRONTEND=noninteractive apt-get update && \\\n    apt-get install -y -q --no-install-recommends \\\n        libva-dev \\\n        libxrandr-dev \\\n        libudev-dev && \\\n    rm -rf /var/lib/apt/lists/*\n\nARG GSTREAMER_VAAPI_PATCH_URL=https://raw.githubusercontent.com/opencv/gst-video-analytics/master/patches/gstreamer-vaapi/vasurface_qdata.patch\nRUN wget ${GST_PLUGIN_VAAPI_REPO} -O build/src/gstreamer-vaapi-${GST_VERSION}.tar.xz\nRUN tar xvf build/src/gstreamer-vaapi-${GST_VERSION}.tar.xz && \\\n    cd gstreamer-vaapi-${GST_VERSION} && \\\n    wget -O - ${GSTREAMER_VAAPI_PATCH_URL} | git apply && \\\n    PKG_CONFIG_PATH=$PWD/build/pkgconfig:${PKG_CONFIG_PATH} meson \\\n        -Dexamples=disabled \\\n        -Dtests=disabled \\\n        -Dgtk_doc=disabled \\\n        -Dnls=disabled \\\n        -Dpackage-origin=\"${PACKAGE_ORIGIN}\" \\\n        --buildtype=${BUILD_TYPE} \\\n        --prefix=${PREFIX} \\\n        --libdir=${LIBDIR} \\\n        --libexecdir=${LIBEXECDIR} \\\n    build/ && \\\n    ninja -C build && \\\n    DESTDIR=/home/build meson install -C build/ && \\\n    meson install -C build/ && rm build/src/gstreamer-vaapi-${GST_VERSION}.tar.xz\n\n# gst-python\nRUN DEBIAN_FRONTEND=noninteractive apt-get update && \\\n    apt-get install --no-install-recommends -y \\\n        python-gi-dev \\\n        python3-dev && \\\n    rm -rf /var/lib/apt/lists/*\n\nARG GST_PYTHON_REPO=https://gstreamer.freedesktop.org/src/gst-python/gst-python-${GST_VERSION}.tar.xz\nRUN wget ${GST_PYTHON_REPO} -O build/src/gst-python-${GST_VERSION}.tar.xz\nRUN tar xvf build/src/gst-python-${GST_VERSION}.tar.xz && \\\n    cd gst-python-${GST_VERSION} && \\\n    PKG_CONFIG_PATH=$PWD/build/pkgconfig:${PKG_CONFIG_PATH} meson \\\n        -Dpython=python3 \\\n        --buildtype=${BUILD_TYPE} \\\n        --prefix=${PREFIX} \\\n        --libdir=${LIBDIR} \\\n        --libexecdir=${LIBEXECDIR} \\\n    build/ && \\\n    ninja -C build && \\\n    DESTDIR=/home/build meson install -C build/ && \\\n    meson install -C build/ && rm build/src/gst-python-${GST_VERSION}.tar.xz\n\nENV GI_TYPELIB_PATH=${LIBDIR}/girepository-1.0\n\nENV PYTHONPATH=${PREFIX}/lib/python3.6/site-packages:${PYTHONPATH}\n\nARG NODE_VERSION=10.21.0\nARG NODE_REPO=https://nodejs.org/dist/v${NODE_VERSION}/node-v${NODE_VERSION}.tar.gz\nRUN wget -O - ${NODE_REPO} | tar -xz && ls && \\\n     cd node-v${NODE_VERSION} && \\\n     ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" && \\\n     make -j4 && \\\n     make install DESTDIR=/home/build && rm -rf node-v${NODE_VERSION}\n\n\nFROM base AS dldt-binaries\nWORKDIR /home\n\nARG OpenVINO_VERSION=2021.1.110\n\nRUN DEBIAN_FRONTEND=noninteractive apt-get update && apt-get install -y -q --no-install-recommends cpio && rm -rf /var/lib/apt/lists/*;\n\nCOPY l_openvino_toolkit_p_${OpenVINO_VERSION}.tgz .\n\nRUN tar -xvzf l_openvino_toolkit_p_${OpenVINO_VERSION}.tgz && \\\n    cd l_openvino_toolkit_p_${OpenVINO_VERSION} && \\\n    sed -i 's#decline#accept#g' silent.cfg && \\\n    sed -i 's#COMPONENTS=DEFAULTS#COMPONENTS=intel-openvino-ie-sdk-ubuntu-bionic__x86_64;intel-openvino-ie-rt-cpu-ubuntu-bionic__x86_64;intel-openvino-ie-rt-gpu-ubuntu-bionic__x86_64;intel-openvino-ie-rt-vpu-ubuntu-bionic__x86_64;intel-openvino-ie-rt-gna-ubuntu-bionic__x86_64;intel-openvino-ie-rt-hddl-ubuntu-bionic__x86_64;intel-openvino-opencv-lib-ubuntu-bionic__x86_64#g' silent.cfg && \\\n    ./install.sh -s silent.cfg && \\\n    cd .. && rm -rf l_openvino_toolkit_p_${OpenVINO_VERSION} && rm l_openvino_toolkit_p_${OpenVINO_VERSION}.tgz\n\nARG IE_DIR=/home/build/opt/intel/dldt/inference-engine\n\nRUN mkdir -p ${IE_DIR}/include && \\\n    cp -r /opt/intel/openvino_2021/inference_engine/include/* ${IE_DIR}/include && \\\n    mkdir -p ${IE_DIR}/lib/intel64 && \\\n    cp -r /opt/intel/openvino_2021/inference_engine/lib/intel64/* ${IE_DIR}/lib/intel64 && \\\n    mkdir -p ${IE_DIR}/share && \\\n    cp -r  /opt/intel/openvino_2021/inference_engine/share/* ${IE_DIR}/share/ && \\\n    mkdir -p ${IE_DIR}/external/ && \\\n    cp -r /opt/intel/openvino_2021/inference_engine/external/* ${IE_DIR}/external && \\\n    mkdir -p ${IE_DIR}/external/opencv && \\\n    cp -r /opt/intel/openvino_2021/opencv/* ${IE_DIR}/external/opencv/ && \\\n    mkdir -p ${IE_DIR}/external/ngraph && \\\n    cp -r /opt/intel/openvino_2021/deployment_tools/ngraph/* ${IE_DIR}/external/ngraph/\n\n\nFROM ${dldt} AS dldt-build\n\nFROM ${gst} AS gst-build\n\nFROM ubuntu:18.04 AS owt-build\nLABEL Description=\"This is the base image for GSTREAMER & DLDT Ubuntu 18.04 LTS\"\nLABEL Vendor=\"Intel Corporation\"\nWORKDIR /root\n\n# Prerequisites\nRUN apt-get update && apt-get install -y -q --no-install-recommends git make gcc g++ libglib2.0-dev pkg-config libboost-regex-dev libboost-thread-dev libboost-system-dev liblog4cxx-dev rabbitmq-server mongodb openjdk-8-jre curl libboost-test-dev nasm yasm gyp libx11-dev libkrb5-dev intel-gpu-tools m4 autoconf libtool automake cmake libfreetype6-dev sudo wget lsb-release && rm -rf /var/lib/apt/lists/*;\n\n\n# Install\nCOPY --from=dldt-build /home/build /\nCOPY --from=gst-build /home/build /\n\nWORKDIR /home\nARG OWTSERVER_REPO=https://github.com/open-webrtc-toolkit/owt-server.git\nARG SERVER_PATH=/home/owt-server\nARG OWT_SDK_REPO=https://github.com/open-webrtc-toolkit/owt-client-javascript.git\nARG OWT_BRANCH=\"master\"\nARG OWT_TAG=\"v5.0\"\nENV LD_LIBRARY_PATH=/opt/intel/dldt/inference-engine/external/tbb/lib:/opt/intel/dldt/inference-engine/lib/intel64/\n\n# Build OWT specific modules\n\n# 1. Clone OWT server source code\n# 2. Clone licode source code and patch\n# 3. Clone webrtc source code and patch\nRUN git config --global user.email \"you@example.com\" && \\\n    git config --global user.name \"Your Name\" && \\\n    git clone -b ${OWT_BRANCH} ${OWTSERVER_REPO} && \\\n    cd /home/owt-server && git reset --hard ${OWT_TAG} && ./scripts/installDepsUnattended.sh --disable-nonfree\n\n    # Get js client sdk for owt\nRUN cd /home && git clone -b ${OWT_BRANCH} ${OWT_SDK_REPO} && \\\n    cd owt-client-javascript/scripts && git reset --hard ${OWT_TAG} && npm install -g grunt-cli node-gyp@6.1.0 && npm install && grunt && npm cache clean --force;\n\n    #Build and pack owt\nRUN cd ${SERVER_PATH} && ./scripts/build.js -t mcu -r -c && \\\n    ./scripts/pack.js -t all --install-module --no-pseudo --with-ffmpeg -f -p /home/owt-client-javascript/dist/samples/conference\n\n\n\nFROM ubuntu:18.04 AS owt-run\nLABEL Description=\"This is the base image for GSTREAMER & DLDT Ubuntu 18.04 LTS\"\nLABEL Vendor=\"Intel Corporation\"\nWORKDIR /home\n\n# Prerequisites\nRUN apt-get update && DEBIAN_FRONTEND=noninteractive apt-get install -y -q --no-install-recommends \\\n    libusb-1.0-0-dev libboost-all-dev libgtk2.0-dev python-yaml \\\n    \\\n    clinfo libboost-all-dev libjson-c-dev \\\n    build-essential cmake ocl-icd-opencl-dev wget gcovr vim git gdb ca-certificates libssl-dev uuid-dev \\\n    libgirepository1.0-dev \\\n    python3-dev python3-wheel python3-pip python3-setuptools python-gi-dev python-yaml \\\n    \\\n    libglib2.0-dev libgmp-dev libgsl-dev gobject-introspection libcap-dev libcap2-bin gettext \\\n    \\\n    libx11-dev iso-codes libegl1-mesa-dev libgles2-mesa-dev libgl-dev gudev-1.0 libtheora-dev libcdparanoia-dev libpango1.0-dev libgbm-dev libasound2-dev libjpeg-dev \\\n    libvisual-0.4-dev libxv-dev libopus-dev libgraphene-1.0-dev libvorbis-dev \\\n    \\\n    libbz2-dev libv4l-dev libaa1-dev libflac-dev libgdk-pixbuf2.0-dev libmp3lame-dev libcaca-dev libdv4-dev libmpg123-dev libraw1394-dev libavc1394-dev libiec61883-dev \\\n    libpulse-dev libsoup2.4-dev libspeex-dev libtag-extras-dev libtwolame-dev libwavpack-dev \\\n    \\\n    libbluetooth-dev libusb-1.0.0-dev libass-dev libbs2b-dev libchromaprint-dev liblcms2-dev libssh2-1-dev libdc1394-22-dev libdirectfb-dev libssh-dev libdca-dev \\\n    libfaac-dev libfdk-aac-dev flite1-dev libfluidsynth-dev libgme-dev libgsm1-dev nettle-dev libkate-dev liblrdf0-dev libde265-dev libmjpegtools-dev libmms-dev \\\n    libmodplug-dev libmpcdec-dev libneon27-dev libopenal-dev libopenexr-dev libopenjp2-7-dev libopenmpt-dev libopenni2-dev libdvdnav-dev librtmp-dev librsvg2-dev \\\n    libsbc-dev libsndfile1-dev libsoundtouch-dev libspandsp-dev libsrtp2-dev libzvbi-dev libvo-aacenc-dev libvo-amrwbenc-dev libwebrtc-audio-processing-dev libwebp-dev \\\n    libwildmidi-dev libzbar-dev libnice-dev libxkbcommon-dev \\\n    \\\n    libmpeg2-4-dev libopencore-amrnb-dev libopencore-amrwb-dev liba52-0.7.4-dev \\\n    \\\n    libva-dev libxrandr-dev libudev-dev liblog4cxx-dev gstreamer1.0-plugins-ugly rabbitmq-server mongodb sudo\\\n    \\\n    && useradd -m owt && echo \"owt:owt\" | chpasswd && adduser owt sudo \\\n    && rm -rf /var/lib/apt/lists/*\n\n# Install\n\nARG LIBDIR=/usr/lib/x86_64-linux-gnu\n\nRUN echo \"\\\n/usr/local/lib\\n\\\n${LIBDIR}/gstreamer-1.0\\n\\\n/opt/intel/dldt/inference-engine/lib/intel64/\\n\\\n/opt/intel/dldt/inference-engine/external/tbb/lib\\n\\\n/opt/intel/dldt/inference-engine/external/mkltiny_lnx/lib\\n\\\n/opt/intel/dldt/inference-engine/external/vpu/hddl/lib\\n\\\n/opt/intel/dldt/inference-engine/external/opencv/lib/\\n\\\n/opt/intel/dldt/inference-engine/external/ngraph/lib\" > /etc/ld.so.conf.d/opencv-dldt-gst.conf && ldconfig\n\nENV GI_TYPELIB_PATH=${LIBDIR}/girepository-1.0\n\nENV PKG_CONFIG_PATH=/usr/lib/x86_64-linux-gnu/pkgconfig:/opt/intel/mediasdk/lib64/pkgconfig:${PKG_CONFIG_PATH}\nENV InferenceEngine_DIR=/opt/intel/dldt/inference-engine/share\nENV OpenCV_DIR=/opt/intel/dldt/inference-engine/external/opencv/cmake\nENV LIBRARY_PATH=/opt/intel/mediasdk/lib64:/usr/lib:${LIBRARY_PATH}\nENV PATH=/usr/bin:/opt/intel/mediasdk/bin:${PATH}\n\nENV LIBVA_DRIVERS_PATH=/opt/intel/mediasdk/lib64\nENV LIBVA_DRIVER_NAME=iHD\nENV GST_VAAPI_ALL_DRIVERS=1\nENV DISPLAY=:0.0\nENV LD_LIBRARY_PATH=/opt/intel/dldt/inference-engine/external/hddl/lib\nENV HDDL_INSTALL_DIR=/opt/intel/dldt/inference-engine/external/hddl\n\nARG GIT_INFO\nARG SOURCE_REV\nARG DLSTREAMER_VERSION=1.2.1\nARG DLSTREAM_SOURCE_REPO=https://github.com/openvinotoolkit/dlstreamer_gst/archive/v${DLSTREAMER_VERSION}.tar.gz\n\nCOPY --chown=owt:owt --from=dldt-build /home/build /\nCOPY --chown=owt:owt --from=gst-build /home/build /\nCOPY --chown=owt:owt --from=owt-build /home/owt-server/dist /home/owt\nCOPY --chown=owt:owt analyticspage /home/analyticspage\nARG ENABLE_PAHO_INSTALLATION=false\nARG ENABLE_RDKAFKA_INSTALLATION=false\nARG BUILD_TYPE=Release\nARG EXTERNAL_GVA_BUILD_FLAGS\n\nRUN wget ${DLSTREAM_SOURCE_REPO} && tar zxf v${DLSTREAMER_VERSION}.tar.gz &&  mv dlstreamer_gst-${DLSTREAMER_VERSION} gst-video-analytics \\\n        && mkdir -p gst-video-analytics/build \\\n        && pwd && ls gst-video-analytics \\\n        && cd gst-video-analytics/build \\\n        && cmake \\\n        -DCMAKE_BUILD_TYPE=${BUILD_TYPE} \\\n        -DCMAKE_INSTALL_PREFIX=/usr \\\n        -DVERSION_PATCH=${SOURCE_REV} \\\n        -DGIT_INFO=${GIT_INFO} \\\n        -DBUILD_SHARED_LIBS=ON \\\n        ${EXTERNAL_GVA_BUILD_FLAGS} \\\n        .. \\\n        && make -j $(nproc) \\\n        && make install \\\n        && rm /home/v${DLSTREAMER_VERSION}.tar.gz\n\nRUN cp /home/analyticspage/index.js /home/owt/apps/current_app/public/scripts/ \\\n    && cp /home/analyticspage/rest-sample.js /home/owt/apps/current_app/public/scripts/ \\\n    && cp /home/analyticspage/index.html /home/owt/apps/current_app/public/ \\\n    && cp /home/analyticspage/samplertcservice.js /home/owt/apps/current_app \\\n    && cp -r /home/gst-video-analytics/build/intel64/Release/lib/* /usr/lib/gstreamer-1.0/\n\nUSER owt\n\nARG CUSTOM_IE_DIR=/opt/intel/dldt/inference-engine\nARG CUSTOM_IE_LIBDIR=${CUSTOM_IE_DIR}/lib/intel64\nENV LD_LIBRARY_PATH=/usr/lib/gstreamer-1.0/:/opt/intel/dldt/inference-engine/lib/intel64/:/opt/intel/dldt/inference-engine/external/tbb/lib/:/opt/intel/dldt/inference-engine/external/opencv/lib/:/opt/intel/dldt/inference-engine/external/ngraph/lib/:${LD_LIBRARY_PATH}\n\nENV GST_PLUGIN_PATH=/usr/lib/gstreamer-1.0/:${GST_PLUGIN_PATH}\nENV PYTHONPATH=/home/gst-video-analytics/python:$PYTHONPATH\n"
}