{
  "startTime": 1674250214082,
  "endTime": 1674250215845,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 79,
        "lineEnd": 79,
        "columnStart": 4,
        "columnEnd": 53
      }
    },
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 165,
        "lineEnd": 165,
        "columnStart": 4,
        "columnEnd": 77
      }
    },
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 166,
        "lineEnd": 166,
        "columnStart": 21,
        "columnEnd": 36
      }
    },
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 200,
        "lineEnd": 200,
        "columnStart": 108,
        "columnEnd": 119
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 30,
        "lineEnd": 30,
        "columnStart": 4,
        "columnEnd": 78
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 68,
        "lineEnd": 68,
        "columnStart": 4,
        "columnEnd": 78
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 84,
        "lineEnd": 84,
        "columnStart": 4,
        "columnEnd": 90
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 100,
        "lineEnd": 100,
        "columnStart": 4,
        "columnEnd": 165
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 80,
        "lineEnd": 80,
        "columnStart": 4,
        "columnEnd": 39
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 110,
        "lineEnd": 110,
        "columnStart": 4,
        "columnEnd": 44
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 203,
        "lineEnd": 203,
        "columnStart": 139,
        "columnEnd": 155
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 222,
        "lineEnd": 222,
        "columnStart": 4,
        "columnEnd": 44
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 10,
        "lineEnd": 10,
        "columnStart": 53,
        "columnEnd": 335
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 19,
        "lineEnd": 19,
        "columnStart": 22,
        "columnEnd": 82
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 77,
        "lineEnd": 77,
        "columnStart": 22,
        "columnEnd": 72
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 155,
        "lineEnd": 155,
        "columnStart": 22,
        "columnEnd": 201
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 219,
        "lineEnd": 219,
        "columnStart": 22,
        "columnEnd": 216
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "################################\n# OWT WebRTC server\n#\n# Base image Ubuntu 18.04\n\n\nFROM ubuntu:18.04 AS owt-build\nWORKDIR /home\n\n# COMMON BUILD TOOLS\nRUN DEBIAN_FRONTEND=noninteractive apt-get update && apt-get install -y -q --no-install-recommends build-essential autoconf make git wget pciutils cpio libtool lsb-release ca-certificates pkg-config bison flex libcurl4-gnutls-dev zlib1g-dev nasm yasm m4 autoconf libtool automake cmake libfreetype6-dev libgstreamer-plugins-base1.0-dev && rm -rf /var/lib/apt/lists/*;\n\n\n# Build libnice\nARG NICE_VER=\"0.1.4\"\nARG NICE_REPO=http://nice.freedesktop.org/releases/libnice-${NICE_VER}.tar.gz\nARG LIBNICE_PATCH_VER=\"5.0\"\nARG LIBNICE_PATCH_REPO=https://github.com/open-webrtc-toolkit/owt-server/archive/v${LIBNICE_PATCH_VER}.tar.gz\n\nRUN apt-get update && apt-get install -y -q --no-install-recommends libglib2.0-dev && rm -rf /var/lib/apt/lists/*;\n\nRUN wget -O - ${NICE_REPO} | tar xz && \\\n    cd libnice-${NICE_VER} && \\\n    wget -O - ${LIBNICE_PATCH_REPO} | tar xz  && \\\n    patch -p1 < owt-server-${LIBNICE_PATCH_VER}/scripts/patches/libnice014-agentlock.patch && \\\n    patch -p1 < owt-server-${LIBNICE_PATCH_VER}/scripts/patches/libnice014-agentlock-plus.patch && \\\n    patch -p1 < owt-server-${LIBNICE_PATCH_VER}/scripts/patches/libnice014-removecandidate.patch && \\\n    patch -p1 < owt-server-${LIBNICE_PATCH_VER}/scripts/patches/libnice014-keepalive.patch && \\\n    patch -p1 < owt-server-${LIBNICE_PATCH_VER}/scripts/patches/libnice014-startcheck.patch && \\\n    patch -p1 < owt-server-${LIBNICE_PATCH_VER}/scripts/patches/libnice014-closelock.patch && \\\n    ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --prefix=\"/usr/local\" --libdir=/usr/local/lib/x86_64-linux-gnu && \\\n    make -s V=0 && \\\n    make install\n\n\n# Build open ssl\nARG OPENSSL_VER=\"1.1.1j\"\nARG OPENSSL_REPO=https://www.openssl.org/source/openssl-${OPENSSL_VER}.tar.gz\n\nRUN wget -O - ${OPENSSL_REPO} | tar xz && \\\n    cd openssl-${OPENSSL_VER} && \\\n    ./config no-ssl3 --prefix=/usr/local/ssl --openssldir=/usr/local/ssl -Wl,-rpath=/usr/local/ssl/lib -fPIC && \\\n    make depend && \\\n    make -s V=0  && \\\n    make install\n\n\n# Build libre\nARG LIBRE_VER=\"v0.5.0\"\nARG LIBRE_REPO=https://github.com/creytiv/re.git\n\nRUN git clone ${LIBRE_REPO} && \\\n    cd re && \\\n    git checkout ${LIBRE_VER} && \\\n    make SYSROOT_ALT=\"/usr\" RELEASE=1 && \\\n    make install SYSROOT_ALT=\"/usr\" RELEASE=1 PREFIX=\"/usr\"\n\n\n# Build usrsctp\nARG USRSCTP_VERSION=\"30d7f1bd0b58499e1e1f2415e84d76d951665dc8\"\nARG USRSCTP_FILE=\"${USRSCTP_VERSION}.tar.gz\"\nARG USRSCTP_EXTRACT=\"usrsctp-${USRSCTP_VERSION}\"\nARG USRSCTP_URL=\"https://github.com/sctplab/usrsctp/archive/${USRSCTP_FILE}\"\n\nRUN wget -O - ${USRSCTP_URL} | tar xz && \\\n    mv ${USRSCTP_EXTRACT} usrsctp && \\\n    cd usrsctp && \\\n    ./bootstrap && \\\n    ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --prefix=\"/usr/local\" --libdir=/usr/local/lib/x86_64-linux-gnu && \\\n    make && \\\n    make install\n\n\n# Build libsrtp2\nARG SRTP2_VER=\"2.1.0\"\nARG SRTP2_REPO=https://codeload.github.com/cisco/libsrtp/tar.gz/v${SRTP2_VER}\n\nRUN apt-get update && apt-get install -y -q --no-install-recommends curl && rm -rf /var/lib/apt/lists/*;\n\nRUN curl -f -o libsrtp-${SRTP2_VER}.tar.gz ${SRTP2_REPO} && \\\n    tar xzf libsrtp-${SRTP2_VER}.tar.gz && \\\n    cd libsrtp-${SRTP2_VER} && \\\n    export PKG_CONFIG_PATH=\"/usr/local/lib/x86_64-linux-gnu/pkgconfig\" && \\\n    export CFLAGS=\"-fPIC\" && \\\n    ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --enable-openssl --prefix=\"/usr/local\" --with-openssl-dir=\"/usr/local/ssl\" && \\\n    make -s V=0 && \\\n    make install && rm libsrtp-${SRTP2_VER}.tar.gz\n\n\n# Fetch FFmpeg source\nARG FFMPEG_VER=\"4.1.3\"\nARG FFMPEG_DIR=\"ffmpeg-${FFMPEG_VER}\"\nARG FFMPEG_SRC=\"${FFMPEG_DIR}.tar.bz2\"\nARG FFMPEG_SRC_URL=\"http://ffmpeg.org/releases/${FFMPEG_SRC}\"\n\nRUN wget ${FFMPEG_SRC_URL} && tar xf ${FFMPEG_SRC} && mv ${FFMPEG_DIR} FFmpeg && \\\n    cd FFmpeg  ;\n# Compile FFmpeg\nRUN cd /home/FFmpeg && \\\n    export PKG_CONFIG_PATH=\"/usr/local/lib/x86_64-linux-gnu/pkgconfig\" && \\\n    ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --prefix=\"/usr/local\" --libdir=/usr/local/lib/x86_64-linux-gnu --enable-shared --disable-static --disable-libvpx --disable-vaapi --enable-libfreetype && \\\n    make -j8 && \\\n    make install\n\n\n# Install node\nARG NODE_VER=v14.19.0\nARG NODE_REPO=https://nodejs.org/dist/${NODE_VER}/node-${NODE_VER}-linux-x64.tar.xz\n\nRUN wget ${NODE_REPO} && \\\n    tar xf node-${NODE_VER}-linux-x64.tar.xz && \\\n    cp node-*/* /usr/local -rf && rm -rf node-* && rm node-${NODE_VER}-linux-x64.tar.xz\n\n\n# Fetch SVT-HEVC\nARG SVT_HEVC_VER=v1.3.0\nARG SVT_HEVC_REPO=https://github.com/intel/SVT-HEVC\n\nRUN git clone ${SVT_HEVC_REPO} && \\\n    cd SVT-HEVC/Build/linux && \\\n    export PKG_CONFIG_PATH=\"/usr/local/lib/x86_64-linux-gnu/pkgconfig\" && \\\n    git checkout ${SVT_HEVC_VER} && \\\n    mkdir -p ../../Bin/Release && \\\n    cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=/usr/local -DCMAKE_INSTALL_LIBDIR=lib/x86_64-linux-gnu -DCMAKE_ASM_NASM_COMPILER=yasm ../.. && \\\n    make -j8 && \\\n    make install\n\n\n# Install json_hpp\nARG JSON_VER=v3.6.1\nARG JSON_LINK=https://github.com/nlohmann/json/releases/download/${JSON_VER}/json.hpp\n\nRUN wget -c ${JSON_LINK} && mv json.hpp /usr/include/\n\n\n# Build OWT specific modules\nARG OWTSERVER_REPO=https://github.com/open-webrtc-toolkit/owt-server.git\nARG OPENH264_MAJOR=1\nARG OPENH264_MINOR=7\nARG OPENH264_SOVER=4\nARG OPENH264_SOURCENAME=v${OPENH264_MAJOR}.${OPENH264_MINOR}.0.tar.gz\nARG OPENH264_SOURCE=https://github.com/cisco/openh264/archive/v${OPENH264_MAJOR}.${OPENH264_MINOR}.0.tar.gz\nARG OPENH264_BINARYNAME=libopenh264-${OPENH264_MAJOR}.${OPENH264_MINOR}.0-linux64.${OPENH264_SOVER}.so\nARG OPENH264_BINARY=https://github.com/cisco/openh264/releases/download/v${OPENH264_MAJOR}.${OPENH264_MINOR}.0/${OPENH264_BINARYNAME}.bz2\nARG LICODE_COMMIT=\"8b4692c88f1fc24dedad66b4f40b1f3d804b50ca\"\nARG LICODE_REPO=https://github.com/lynckia/licode.git\nARG WEBRTC_REPO=https://github.com/open-webrtc-toolkit/owt-deps-webrtc.git\nARG SVT_VER=v1.3.0\nARG SVT_REPO=https://github.com/intel/SVT-HEVC.git\nARG SERVER_PATH=/home/owt-server\nARG OWT_SDK_REPO=https://github.com/open-webrtc-toolkit/owt-client-javascript.git\nARG OWT_BRANCH=master\nARG IMG_APP_PATH=/app_data/\nENV APP_PATH=${IMG_APP_PATH}\n\nRUN apt-get update && apt-get install -y -q --no-install-recommends python libglib2.0-dev rabbitmq-server mongodb libboost-thread-dev libboost-system-dev liblog4cxx-dev libgstreamer-plugins-base1.0-dev && rm -rf /var/lib/apt/lists/*;\n\n# 1. Clone OWT server source code\n# 2. Clone licode source code and patch\n# 3. Clone webrtc source code and patch\nRUN git config --global user.email \"you@example.com\" && \\\n    git config --global user.name \"Your Name\" && \\\n    git clone --depth=1 -b ${OWT_BRANCH} ${OWTSERVER_REPO} && \\\n\n    # Install node modules for owt\n    npm install -g --loglevel error node-gyp@6.1.0 grunt-cli underscore jsdoc && \\\n    cd owt-server && npm install nan && \\\n\n    # Get openh264 for owt\n    cd third_party && \\\n    mkdir openh264 && cd openh264 && \\\n    wget ${OPENH264_SOURCE} && \\\n    wget ${OPENH264_BINARY} && \\\n    tar xzf ${OPENH264_SOURCENAME} openh264-${OPENH264_MAJOR}.${OPENH264_MINOR}.0/codec/api && \\\n    ln -s -v openh264-${OPENH264_MAJOR}.${OPENH264_MINOR}.0/codec codec && \\\n    bzip2 -d ${OPENH264_BINARYNAME}.bz2 && \\\n    ln -s -v ${OPENH264_BINARYNAME} libopenh264.so.${OPENH264_SOVER} && \\\n    ln -s -v libopenh264.so.${OPENH264_SOVER} libopenh264.so && \\\n    echo 'const char* stub() {return \"this is a stub lib\";}' > pseudo-openh264.cpp && \\\n    gcc pseudo-openh264.cpp -fPIC -shared -o pseudo-openh264.so && npm cache clean --force;\n\n# Get licode for owt\nRUN cd ${SERVER_PATH}/third_party && git clone ${LICODE_REPO} && \\\n    cd licode && \\\n    git reset --hard ${LICODE_COMMIT} && \\\n    git am ${SERVER_PATH}/scripts/patches/licode/*.patch\n\n# Install webrtc for owt\nRUN cd ${SERVER_PATH}/third_party && mkdir webrtc  && cd webrtc &&\\\n    export GIT_SSL_NO_VERIFY=1 && \\\n    git clone -b 59-server ${WEBRTC_REPO} src && \\\n    ./src/tools-woogeen/install.sh && \\\n    ./src/tools-woogeen/build.sh\n\n# Install webrtc88 for owt\nRUN mkdir ${SERVER_PATH}/third_party/webrtc-m88 && \\\n    cd ${SERVER_PATH}/third_party/webrtc-m88 && \\\n    /bin/bash ${SERVER_PATH}/scripts/installWebrtc.sh\n\n# Get js client sdk for owt\nRUN cd /home && git clone --depth=1 -b ${OWT_BRANCH} ${OWT_SDK_REPO} && cd owt-client-javascript/scripts && npm install && grunt  && \\\n    mkdir ${SERVER_PATH}/third_party/quic-lib && \\\n    export LD_LIBRARY_PATH=/usr/local/lib/x86_64-linux-gnu && \\\n    cd ${SERVER_PATH}/third_party/quic-lib && wget https://github.com/open-webrtc-toolkit/owt-deps-quic/releases/download/v0.1/dist.tgz && tar xzf dist.tgz && \\\n    #Build and pack owt\n    cd ${SERVER_PATH} && export PKG_CONFIG_PATH=/usr/local/lib/x86_64-linux-gnu/pkgconfig && ./scripts/build.js -t mcu-all -lp /usr/local/ssl/lib -ip /usr/local/ssl/include -r -c && \\\n    ./scripts/pack.js -t all --install-module --no-pseudo --app-path /home/owt-client-javascript/dist/samples/conference && npm cache clean --force; && rm dist.tgz\n\n\nFROM ubuntu:18.04 AS owt-run\nLABEL Description=\"This is the image for building OWT on Ubuntu 18.04\"\nLABEL Vendor=\"Intel Corporation\"\nWORKDIR /home\n\n# Prerequisites\n# Install node\nARG NODE_VER=v14.19.0\nARG NODE_REPO=https://nodejs.org/dist/${NODE_VER}/node-${NODE_VER}-linux-x64.tar.xz\n\nRUN apt-get update && apt-get install -y -q --no-install-recommends ca-certificates wget xz-utils rabbitmq-server mongodb libboost-system-dev libboost-thread-dev liblog4cxx-dev libglib2.0-0 libfreetype6-dev curl sudo && rm -rf /var/lib/apt/lists/*;\n\nRUN wget ${NODE_REPO} && \\\n    tar xf node-${NODE_VER}-linux-x64.tar.xz && \\\n    cp node-*/* /usr/local -rf && rm -rf node-* && rm node-${NODE_VER}-linux-x64.tar.xz\n\nRUN useradd -m owt && echo \"owt:owt\" | chpasswd && adduser owt sudo\n\nCOPY --chown=owt:owt --from=owt-build /home/owt-server/dist /home/owt\nCOPY --chown=owt:owt startowt.sh /home/\n\nUSER owt\n\nCMD /bin/bash\nENV LD_LIBRARY_PATH=${LD_LIBRARY_PATH}:/usr/local/lib/x86_64-linux-gnu\n"
}