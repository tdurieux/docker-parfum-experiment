{
  "startTime": 1674251528429,
  "endTime": 1674251529100,
  "originalSmells": [
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 65,
        "lineEnd": 65,
        "columnStart": 4,
        "columnEnd": 30
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 66,
        "lineEnd": 66,
        "columnStart": 4,
        "columnEnd": 49
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 77,
        "lineEnd": 77,
        "columnStart": 5,
        "columnEnd": 16
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 74,
        "lineEnd": 74,
        "columnStart": 5,
        "columnEnd": 27
      }
    },
    {
      "rule": "gpgUseBatchFlag",
      "position": {
        "lineStart": 34,
        "lineEnd": 34,
        "columnStart": 100,
        "columnEnd": 113
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 70,
        "lineEnd": 70,
        "columnStart": 4,
        "columnEnd": 55
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 70,
        "lineEnd": 70,
        "columnStart": 4,
        "columnEnd": 55
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 27,
        "lineEnd": 32,
        "columnStart": 18,
        "columnEnd": 9
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 37,
        "lineEnd": 53,
        "columnStart": 18,
        "columnEnd": 9
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 70,
        "lineEnd": 70,
        "columnStart": 4,
        "columnEnd": 55
      }
    }
  ],
  "repairedSmells": [
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 70,
        "lineEnd": 70,
        "columnStart": 4,
        "columnEnd": 79
      }
    }
  ],
  "repairedDockerfile": "# this image contains the dependencies of slips\n# to save time in CI\n# This image doesn't have slips installed, we'll be doing this from .github/workflows/CI-staging.yml\n# this image doesn't have node.js requirements and doesn't support kalipso\n# because it's only used for unit testing,\n# and we don't have unit tests for kalipso yet\n\nFROM ubuntu\n\n# To avoid user interaction when installing libraries\nENV DEBIAN_FRONTEND=noninteractive\n\n# Blocking module requirement to avoid using sudo\nENV IS_IN_A_DOCKER_CONTAINER True\n\n# When using github actions, we build and run this image but we have no control over\n# the running options, for example we can't use --cap-add NET_ADMIN\n# so all blocking module unit tests will fail because we don't have admin privs\n# we use this environment variable to check if we're running this image (this means slips is\n# running in github actions) we disable the blocking module unit tests\nENV IS_DEPENDENCY_IMAGE True\n\n# destionation dir for slips inside the container\nENV SLIPS_DIR /Slips\n\n\n# Install wget and add Zeek repository to our sources.\nRUN apt update && apt install -y --no-install-recommends \\\n    wget \\\n    ca-certificates \\\n    git \\\n    curl \\\n    gnupg \\\n && echo 'deb http://download.opensuse.org/repositories/security:/zeek/xUbuntu_20.04/ /' | tee /etc/apt/sources.list.d/security:zeek.list \\\n && curl -fsSL https://download.opensuse.org/repositories/security:zeek/xUbuntu_20.04/Release.key | gpg --batch --dearmor | tee /etc/apt/trusted.gpg.d/security_zeek.gpg > /dev/null && rm -rf /var/lib/apt/lists/*;\n\n# Install Slips dependencies.\nRUN apt update && apt install -y --no-install-recommends \\\n    python3 \\\n    redis-server \\\n    zeek \\\n    python3-pip \\\n    python3-certifi \\\n    python3-dev \\\n    build-essential \\\n    file \\\n    lsof \\\n    net-tools \\\n    iproute2 \\\n    iptables \\\n    python3-tzlocal \\\n    nfdump \\\n    tshark \\\n    whois \\\n && ln -s /opt/zeek/bin/zeek /usr/local/bin/bro && rm -rf /var/lib/apt/lists/*;\n\n\n# Install python dependencies\n\n# you should build the image using\n# docker build --no-cache -t slips_dependencies -f docker/dependency-image/Dockerfile .\n# or this step won't be able to find requirements.txt\nCOPY requirements.txt ${SLIPS_DIR}/\n\n# Upgrade pip3 and install slips requirements\nRUN pip3 install --no-cache-dir --upgrade pip\nRUN pip3 install --no-cache-dir -r ${SLIPS_DIR}/requirements.txt\n\n\n# Requirements for compiling yara\nRUN apt install --no-install-recommends -y automake libtool make gcc pkg-config && rm -rf /var/lib/apt/lists/*;\n\n# Compile and install YARA\nRUN wget https://github.com/VirusTotal/yara/archive/refs/tags/v4.1.3.tar.gz \\\n  && tar -zxf v4.1.3.tar.gz \\\n  && cd yara-4.1.3 \\\n  && ./bootstrap.sh \\\n  && ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" \\\n  && make \\\n  && make install && rm v4.1.3.tar.gz\n\nCMD redis-server --daemonize yes && /bin/bash"
}