{
  "startTime": 1674217033822,
  "endTime": 1674217035132,
  "originalSmells": [
    {
      "rule": "yumInstallRmVarCacheYum",
      "position": {
        "lineStart": 15,
        "lineEnd": 15,
        "columnStart": 4,
        "columnEnd": 89
      }
    },
    {
      "rule": "yumInstallRmVarCacheYum",
      "position": {
        "lineStart": 17,
        "lineEnd": 24,
        "columnStart": 4,
        "columnEnd": 150
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM amazonlinux:2\n\nLABEL maintainer=\"Anton Lokhmotov <anton@dividiti.com>\"\n\n# Use the Bash shell.\nSHELL [\"/bin/bash\", \"-c\"]\n\n# Allow stepping into the Bash shell interactively.\nENTRYPOINT [\"/bin/bash\", \"-c\"]\n\n# Install known system dependencies and immediately clean up to make the image smaller.\n# CK needs: git, wget, zip, unzip.\n# FLAC needs: tar, xz.\n# Speech Recognition program needs: sndfile-devel.\n# Glow needs: everything else (libssl-devel should be removed).\nRUN yum install -y https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm\\\n && yum upgrade -y\\\n && yum install -y\\\n python3 python3-pip python3-devel\\\n gcc gcc-c++\\\n make which patch vim\\\n git wget zip unzip\\\n tar xz\\\n libsndfile-devel\\\n graphviz libpng-devel ninja-build double-conversion-devel libevent-devel jemalloc-devel libxcb-devel openssl-devel bzip2-devel libffi-devel libatomic \\\n && yum clean all && rm -rf /var/cache/yum\n\n# Glow expects 'ninja' but distro provides 'ninja-build'. Hence, the workaround equivalent to:\n# $ ln -s /usr/bin/ninja-build /usr/bin/ninja\nRUN update-alternatives --install /usr/bin/ninja ninja /usr/bin/ninja-build 10\n\n# Create non-root user.\nRUN useradd --create-home --user-group --shell /bin/bash dvdt\nUSER dvdt:dvdt\nWORKDIR /home/dvdt\n\n# Install Collective Knowledge (CK).\nENV CK_ROOT=/home/dvdt/CK \\\n    CK_REPOS=/home/dvdt/CK_REPOS \\\n    CK_TOOLS=/home/dvdt/CK_TOOLS \\\n    PATH=${CK_ROOT}/bin:/home/dvdt/.local/bin:${PATH} \\\n    CK_PYTHON=python3.7 \\\n    CK_CC=gcc \\\n    GIT_USER=\"dividiti\" \\\n    GIT_EMAIL=\"info@dividiti.com\" \\\n    LANG=C.UTF-8\nRUN mkdir -p ${CK_ROOT} ${CK_REPOS} ${CK_TOOLS}\nRUN git config --global user.name ${GIT_USER} && git config --global user.email ${GIT_EMAIL}\nRUN git clone https://github.com/ctuning/ck.git ${CK_ROOT}\nRUN cd ${CK_ROOT} \\\n && ${CK_PYTHON} setup.py install --user \\\n && ${CK_PYTHON} -c \"import ck.kernel as ck; print ('Collective Knowledge v%s' % ck.__version__)\"\n\n# Pull CK repositories (including ck-env, ck-autotuning and ck-tensorflow).\nRUN ck pull repo:ck-mlperf\nRUN ck pull repo:ck-pytorch\n\n# Use generic Linux settings with dummy frequency setting scripts.\nRUN ck detect platform.os --platform_init_uoa=generic-linux-dummy\n\n#-----------------------------------------------------------------------------#\n# Step 1. Install C++ dependencies (FLAC, SoX).\n#-----------------------------------------------------------------------------#\n# Detect C/C++ compiler (gcc).\nRUN ck detect soft:compiler.gcc --full_path=`which ${CK_CC}`\n# Install preprocessing dependencies (FLAC, SoX).\nRUN ck install package --tags=tool,flac\nRUN ck install package --tags=tool,sox\n#-----------------------------------------------------------------------------#\n\n\n#-----------------------------------------------------------------------------#\n# Step 2. Install Python dependencies (pip, Torch, SoX, pandas, Abseil, wheel).\n#-----------------------------------------------------------------------------#\n# Install the latest Python package installer (pip).\nRUN ${CK_PYTHON} -m pip install --ignore-installed pip setuptools --user\n# Detect Python interpreter (\"compiler\").\nRUN ck detect soft:compiler.python --full_path=`which ${CK_PYTHON}`\n# Install PyTorch.\nRUN ck install package --tags=python-package,torch\n# Install preprocessing dependencies (SoX, pandas).\nRUN ck install package --tags=python-package,sox\nRUN ck install package --tags=python-package,pandas\n# Install LoadGen dependencies (Abseil, wheel).\nRUN ck install package --tags=python-package,absl\nRUN ${CK_PYTHON} -m pip install --user wheel\n# Install other program dependencies.\n# NB: Fix numba version: https://github.com/librosa/librosa/issues/1160\nRUN ${CK_PYTHON} -m pip install --user tqdm toml unidecode inflect sndfile librosa numba==0.48\n#-----------------------------------------------------------------------------#\n\n\n#-----------------------------------------------------------------------------#\n# Step 3. Download the official MLPerf Inference RNNT dataset (LibriSpeech\n# dev-clean) and preprocess it to wav.\n#-----------------------------------------------------------------------------#\nRUN ck install package --tags=dataset,speech-recognition,dev-clean,original\n# NB: Can ignore the lzma related warning.\nRUN ck install package --tags=dataset,speech-recognition,dev-clean,preprocessed\n#-----------------------------------------------------------------------------#\n\n\n#-----------------------------------------------------------------------------#\n# Step 4. Download the official MLPerf Inference RNNT model.\n#-----------------------------------------------------------------------------#\nRUN ck install package --tags=model,pytorch,rnnt\n#-----------------------------------------------------------------------------#\n\n\n#-----------------------------------------------------------------------------#\n# Step 5. Download the MLPerf Inference repo with dividiti's RNNT tweaks,\n# and build the Python LoadGen API.\n#-----------------------------------------------------------------------------#\nRUN ck install package --tags=mlperf,inference,source,dividiti.rnnt\nRUN ck install package --tags=python-package,loadgen\n#-----------------------------------------------------------------------------#\n\n\n#-----------------------------------------------------------------------------#\n# Step 6. Install explicit Glow dependencies. Take care to compile with GCC.\n#-----------------------------------------------------------------------------#\nRUN ck install package --tags=tool,cmake,v3.14.3               --dep_add_tags.compiler=gcc\nRUN ck install package --tags=lib,gflags,v2.2.0                --dep_add_tags.compiler=gcc\nRUN ck install package --tags=lib,glog,v0.3.5                  --dep_add_tags.compiler=gcc\nRUN ck install package --tags=lib,boost,v1.65.1,without-python --dep_add_tags.compiler=gcc\nRUN ck install package --tags=lib,protobuf-host,v3.5.1         --dep_add_tags.host-compiler=gcc\nRUN ck install package --tags=lib,fmt                          --dep_add_tags.compiler=gcc\nRUN ck install package --tags=compiler,llvm,source,v8          --dep_add_tags.compiler=gcc\nRUN ck install package --tags=compiler,glow                    --dep_add_tags.compiler=gcc\n#-----------------------------------------------------------------------------#\n\n\n#-----------------------------------------------------------------------------#\n# Step 7.Install Glow plugins for the Pre-, Post- and Dec-RNNs.\n#-----------------------------------------------------------------------------#\nRUN ck install package --tags=nntest,plugin,rnnt-pre,orig,glow  --dep_add_tags.compiler=gcc\nRUN ck install package --tags=nntest,plugin,rnnt-post,orig,glow --dep_add_tags.compiler=gcc\nRUN ck install package --tags=nntest,plugin,rnnt-dec,orig,glow  --dep_add_tags.compiler=gcc\nRUN ${CK_PYTHON} -m pip install torchvision --user\nRUN ck run program:speech-recognition-pytorch --cmd_key=performance \\\n--env.CK_RNNT_MAX_DURATION=2 \\\n--env.CK_RNNT_PRE=orig  --env.CK_RNNT_PRE_BACKEND=glow  \\\n--env.CK_RNNT_POST=orig --env.CK_RNNT_POST_BACKEND=glow \\\n--env.CK_RNNT_DEC=orig  --env.CK_RNNT_DEC_BACKEND=glow  \\\n--skip_print_timers\n#-----------------------------------------------------------------------------#\n\n\n#-----------------------------------------------------------------------------#\n# Run the Speech Recognition RNNT program in the accuracy mode.\n#-----------------------------------------------------------------------------#\nCMD [\"ck run program:speech-recognition-pytorch --cmd_key=accuracy --skip_print_timers\"]\n"
}