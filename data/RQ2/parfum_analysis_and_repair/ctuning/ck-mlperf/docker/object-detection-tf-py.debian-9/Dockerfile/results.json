{
  "startTime": 1674256156883,
  "endTime": 1674256157473,
  "originalSmells": [
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 15,
        "lineEnd": 15,
        "columnStart": 4,
        "columnEnd": 28
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 17,
        "lineEnd": 22,
        "columnStart": 4,
        "columnEnd": 4
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 15,
        "lineEnd": 15,
        "columnStart": 4,
        "columnEnd": 28
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 17,
        "lineEnd": 22,
        "columnStart": 4,
        "columnEnd": 4
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM debian:9\n\nLABEL maintainer=\"Anton Lokhmotov <anton@dividiti.com>\"\n\n# Use the Bash shell.\nSHELL [\"/bin/bash\", \"-c\"]\n\n# Allow stepping into the Bash shell interactively.\nENTRYPOINT [\"/bin/bash\", \"-c\"]\n\n# Install known system dependencies and immediately clean up to make the image smaller.\n# CK needs: git, wget, zip.\n# TF needs: curl.\n# TensorFlow Object Detection API needs ProtoBuf 3.0 which needs CMake.\nRUN apt update -y \\\n && apt install --no-install-recommends -y apt-utils \\\n && apt upgrade -y \\\n && apt install --no-install-recommends -y \\\n git wget zip libz-dev \\\n curl \\\n cmake \\\n python3 python3-pip \\\n vim \\\n && apt clean && rm -rf /var/lib/apt/lists/*;\n\n# Create non-root user.\nRUN useradd --create-home --user-group --shell /bin/bash dvdt\nUSER dvdt:dvdt\nWORKDIR /home/dvdt\n\n# Install Collective Knowledge (CK).\nENV CK_ROOT=/home/dvdt/CK \\\n    CK_REPOS=/home/dvdt/CK_REPOS \\\n    CK_TOOLS=/home/dvdt/CK_TOOLS \\\n    PATH=${CK_ROOT}/bin:/home/dvdt/.local/bin:${PATH} \\\n    CK_PYTHON=python3 \\\n    CK_CC=gcc \\\n    GIT_USER=\"dividiti\" \\\n    GIT_EMAIL=\"info@dividiti.com\" \\\n    LANG=C.UTF-8\nRUN mkdir -p ${CK_ROOT} ${CK_REPOS} ${CK_TOOLS}\nRUN git config --global user.name ${GIT_USER} && git config --global user.email ${GIT_EMAIL}\nRUN git clone https://github.com/ctuning/ck.git ${CK_ROOT}\nRUN cd ${CK_ROOT} \\\n && ${CK_PYTHON} setup.py install --user \\\n && ${CK_PYTHON} -c \"import ck.kernel as ck; print ('Collective Knowledge v%s' % ck.__version__)\"\n\n# Pull CK repositories (including ck-env, ck-autotuning and ck-tensorflow).\nRUN ck pull repo:ck-mlperf\n\n# Use generic Linux settings with dummy frequency setting scripts.\nRUN ck detect platform.os --platform_init_uoa=generic-linux-dummy\n\n# Detect C/C++ compiler (gcc).\nRUN ck detect soft:compiler.gcc --full_path=`which ${CK_CC}`\n\n# Detect Python.\nRUN ck detect soft:compiler.python --full_path=`which ${CK_PYTHON}`\n# Install the latest Python package installer (pip) and some dependencies.\nRUN ${CK_PYTHON} -m pip install --ignore-installed pip setuptools --user\n\n# Install Python dependencies.\nRUN ck install package --tags=lib,python-package,numpy\nRUN ck install package --tags=lib,python-package,scipy --force_version=1.2.1\nRUN ck install package --tags=lib,python-package,pillow\nRUN ck install package --tags=lib,python-package,matplotlib\nRUN ck install package --tags=lib,python-package,cython\nRUN ck show env --tags=python-package\n\nRUN ${CK_PYTHON} -m pip install gast --user\nRUN ${CK_PYTHON} -m pip install astor --user\nRUN ${CK_PYTHON} -m pip install termcolor --user\nRUN ${CK_PYTHON} -m pip install tensorflow-estimator==1.13.0 --user\nRUN ${CK_PYTHON} -m pip install keras_applications==1.0.4 --no-deps --user\nRUN ${CK_PYTHON} -m pip install keras_preprocessing==1.0.2 --no-deps --user\n# Install Python COCO API.\nRUN ck install package --tags=tool,coco,api\n\n# Install TF.\nRUN ck install package:lib-tensorflow-1.13.1-cpu\n\n# Remove useless API files to free up space.\nRUN ck virtual env --tags=tensorflow,api --shell_cmd=\\\n'cd $CK_ENV_TENSORFLOW_MODELS; mv object_detection ..; rm * -r; mv ../object_detection .; cd ..; rm official -rf; rm samples -rf; rm tutorials -rf;rm .git -rf'\n\n# Download the COCO 2017 validation dataset (5,000 images) to the default path.\nRUN echo | ck install package --tags=object-detection,dataset,coco.2017,val,original,full\\\n && ck virtual env --tags=object-detection,dataset,coco.2017,val,original,full --shell_cmd=\\\n'rm $CK_ENV_DATASET_COCO_LABELS_DIR/*train2017.json'\n\n# Download the SSD-MobileNet TF models (non-quantized and quantized).\nRUN ck install package --tags=model,tf,object-detection,mlperf,ssd-mobilenet,non-quantized\nRUN ck install package --tags=model,tf,object-detection,mlperf,ssd-mobilenet,quantized,finetuned\n\n# Run the Object Detection TF-Python program\n# with the non-quantized SSD-MobileNet model\n# on the first 50 images of the COCO 2017 validation dataset.\nCMD [\"ck run program:object-detection-tf-py --env.CK_BATCH_COUNT=50 --dep_add_tags.weights=ssd-mobilenet,non-quantized\"]\n"
}