{
  "startTime": 1674251512509,
  "endTime": 1674251513323,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 27,
        "lineEnd": 27,
        "columnStart": 32,
        "columnEnd": 119
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 31,
        "lineEnd": 31,
        "columnStart": 44,
        "columnEnd": 192
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 53,
        "lineEnd": 53,
        "columnStart": 4,
        "columnEnd": 26
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 83,
        "lineEnd": 83,
        "columnStart": 4,
        "columnEnd": 61
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 84,
        "lineEnd": 84,
        "columnStart": 4,
        "columnEnd": 66
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 50,
        "lineEnd": 50,
        "columnStart": 4,
        "columnEnd": 39
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 50,
        "lineEnd": 50,
        "columnStart": 4,
        "columnEnd": 39
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 13,
        "lineEnd": 16,
        "columnStart": 22,
        "columnEnd": 21
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 37,
        "lineEnd": 46,
        "columnStart": 22,
        "columnEnd": 16
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 50,
        "lineEnd": 50,
        "columnStart": 4,
        "columnEnd": 39
      }
    }
  ],
  "repairedSmells": [
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 50,
        "lineEnd": 50,
        "columnStart": 4,
        "columnEnd": 63
      }
    }
  ],
  "repairedDockerfile": "####################\n# base image setup #\n####################\n# clang works with 20.04\nFROM ubuntu:20.04\n\n# https://github.com/moby/moby/issues/27988\n# This is to prevent the keyboard interaction\n# Another way is to install dialog apt-utils packages first, but I just use echo so that we install less packages\nRUN echo 'debconf debconf/frontend select Noninteractive' | debconf-set-selections\n\n# We first install necessary packages for file manipulation,\n# this helps reduce turn around time for adding packages\nRUN apt-get update && apt-get install -y -q --no-install-recommends \\\n      curl \\\n      xz-utils \\\n      ca-certificates && rm -rf /var/lib/apt/lists/*;\n\n# Copy necessary files and install necessary dependencies in opt\nWORKDIR /tmp\n\n# Set up llvm/clang\n# in /tmp now\nENV CLANG_VERSION=13.0.0\nENV TARGET_ARCH=linux64\n\n# run systemc\nRUN mkdir /opt/systemc-2.3.3 && curl -f -L https://github.com/rseac/systemc-travisci-cache/raw/master/systemc-2.3.3.tar.gz \\\n      | tar -xzC /tmp/ \\\n      && mv systemc-2.3.3/systemc/* /opt/systemc-2.3.3 \\\n      && rm -rf systemc-2.3.3 \\\n      && mkdir /opt/clang-$CLANG_VERSION && curl -f -L https://github.com/llvm/llvm-project/releases/download/llvmorg-$CLANG_VERSION/clang+llvm-$CLANG_VERSION-x86_64-linux-gnu-ubuntu-20.04.tar.xz \\\n      | tar -xJC /tmp/ \\\n      && mv clang+llvm-$CLANG_VERSION-x86_64-linux-gnu-ubuntu-20.04/* /opt/clang-$CLANG_VERSION/ \\\n      && rm -rf /tmp/*\n\n# Install other requirements\nRUN apt-get update && apt-get install -y -q --no-install-recommends \\\n  g++ \\\n  cmake \\\n  ccache \\\n  ninja-build \\\n  python3 \\\n  python3-pip \\\n  git \\\n  libz-dev \\\n  libncurses-dev && rm -rf /var/lib/apt/lists/*;\n\n\n# Install doxygen and graphviz\nRUN apt-get install --no-install-recommends -y doxygen graphviz && rm -rf /var/lib/apt/lists/*;\n\n# Install sphinx\nRUN pip3 install --no-cache-dir -U sphinx\n\n# Set up environment variables across images\nENV SYSTEMC=/opt/systemc-2.3.3\nENV CXX=g++\nENV CC=gcc\n\nENV LLVM_INSTALL_DIR=/opt/clang-$CLANG_VERSION\nENV LLVMCONFIG=$LLVM_INSTALL_DIR/bin/llvm-config\nENV LLVM_LD_FLAGS=-L$LLVM_INSTALL_DIR/lib\nENV LLVM_CXX_FLAGS=\"-I/home/travis/build/rseac/systemc-clang/DEPENDS/clang-$CLANG_VERSION/include  -fPIC -fvisibility-inlines-hidden -std=c++17 -Wall -Wextra -Wno-unused-parameter -Wwrite-strings -Wcast-qual -Wmissing-field-initializers -pedantic -Wno-long-long -Wnon-virtual-dtor -Wdelete-non-virtual-dtor -ffunction-sections -fdata-sections -O3 -DNDEBUG  -fno-exceptions -fno-rtti -D_GNU_SOURCE -fvisibility-inlines-hidden -Wsign-compare\"\nENV LLVM_LIBS=\"-lLLVMLTO -lLLVMPasses -lLLVMObjCARCOpts -lLLVMSymbolize -lLLVMDebugInfoPDB -lLLVMDebugInfoDWARF -lLLVMMIRParser -lLLVMFuzzMutate -lLLVMCoverage -lLLVMTableGen -lLLVMDlltoolDriver -lLLVMOrcJIT -lLLVMXCoreDisassembler -lLLVMXCoreCodeGen -lLLVMXCoreDesc -lLLVMXCoreInfo -lLLVMXCoreAsmPrinter -lLLVMSystemZDisassembler -lLLVMSystemZCodeGen -lLLVMSystemZAsmParser -lLLVMSystemZDesc -lLLVMSystemZInfo -lLLVMSystemZAsmPrinter -lLLVMSparcDisassembler -lLLVMSparcCodeGen -lLLVMSparcAsmParser -lLLVMSparcDesc -lLLVMSparcInfo -lLLVMSparcAsmPrinter -lLLVMPowerPCDisassembler -lLLVMPowerPCCodeGen -lLLVMPowerPCAsmParser -lLLVMPowerPCDesc -lLLVMPowerPCInfo -lLLVMPowerPCAsmPrinter -lLLVMNVPTXCodeGen -lLLVMNVPTXDesc -lLLVMNVPTXInfo -lLLVMNVPTXAsmPrinter -lLLVMMSP430CodeGen -lLLVMMSP430Desc -lLLVMMSP430Info -lLLVMMSP430AsmPrinter -lLLVMMipsDisassembler -lLLVMMipsCodeGen -lLLVMMipsAsmParser -lLLVMMipsDesc -lLLVMMipsInfo -lLLVMMipsAsmPrinter -lLLVMLanaiDisassembler -lLLVMLanaiCodeGen -lLLVMLanaiAsmParser -lLLVMLanaiDesc -lLLVMLanaiAsmPrinter -lLLVMLanaiInfo -lLLVMHexagonDisassembler -lLLVMHexagonCodeGen -lLLVMHexagonAsmParser -lLLVMHexagonDesc -lLLVMHexagonInfo -lLLVMBPFDisassembler -lLLVMBPFCodeGen -lLLVMBPFAsmParser -lLLVMBPFDesc -lLLVMBPFInfo -lLLVMBPFAsmPrinter -lLLVMARMDisassembler -lLLVMARMCodeGen -lLLVMARMAsmParser -lLLVMARMDesc -lLLVMARMInfo -lLLVMARMAsmPrinter -lLLVMARMUtils -lLLVMAMDGPUDisassembler -lLLVMAMDGPUCodeGen -lLLVMAMDGPUAsmParser -lLLVMAMDGPUDesc -lLLVMAMDGPUInfo -lLLVMAMDGPUAsmPrinter -lLLVMAMDGPUUtils -lLLVMAArch64Disassembler -lLLVMAArch64CodeGen -lLLVMAArch64AsmParser -lLLVMAArch64Desc -lLLVMAArch64Info -lLLVMAArch64AsmPrinter -lLLVMAArch64Utils -lLLVMObjectYAML -lLLVMLibDriver -lLLVMOption -lLLVMWindowsManifest -lLLVMX86Disassembler -lLLVMX86AsmParser -lLLVMX86CodeGen -lLLVMGlobalISel -lLLVMSelectionDAG -lLLVMAsmPrinter -lLLVMX86Desc -lLLVMMCDisassembler -lLLVMX86Info -lLLVMX86AsmPrinter -lLLVMX86Utils -lLLVMMCJIT -lLLVMLineEditor -lLLVMInterpreter -lLLVMExecutionEngine -lLLVMRuntimeDyld -lLLVMCodeGen -lLLVMTarget -lLLVMCoroutines -lLLVMipo -lLLVMInstrumentation -lLLVMVectorize -lLLVMScalarOpts -lLLVMLinker -lLLVMIRReader -lLLVMAsmParser -lLLVMInstCombine -lLLVMBitWriter -lLLVMAggressiveInstCombine -lLLVMTransformUtils -lLLVMAnalysis -lLLVMProfileData -lLLVMObject -lLLVMMCParser -lLLVMMC -lLLVMDebugInfoCodeView -lLLVMDebugInfoMSF -lLLVMBitReader -lLLVMCore -lLLVMBinaryFormat -lLLVMSupport -lLLVMDemangle\"\n\nWORKDIR /\n\n##################################\n# finished setting up base image #\n##################################\n\n# The following setup will be dependent on usage (either development or test)\n# Ideally, we would use a multistage docker file, but we won't save much space as the unzipped clang is very large\n\n# The build directory\nENV SYSTEMC_CLANG_BUILD_DIR=/systemc-clang-build\n# The source directory\nENV SYSTEMC_CLANG=/systemc-clang\nWORKDIR /systemc-clang-build\n#COPY scripts/build-travis.sh /systemc-clang-build\nCOPY requirements.txt /systemc-clang-build\nCOPY docs/source/requirements.txt /systemc-clang-build/requirements-docs.txt\nRUN pip3 install --no-cache-dir -r $SYSTEMC_CLANG_BUILD_DIR/requirements.txt\nRUN pip3 install --no-cache-dir -r $SYSTEMC_CLANG_BUILD_DIR/requirements-docs.txt\n# RUN cmake ../systemc-clang -DHDL=ON -DENABLE_VERILOG_TESTS=OFF -DENABLE_TESTS=ON -G \"Ninja\" && ninja\n"
}