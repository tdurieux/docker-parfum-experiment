{
  "startTime": 1674249565690,
  "endTime": 1674249567234,
  "originalSmells": [
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 6,
        "lineEnd": 6,
        "columnStart": 4,
        "columnEnd": 15
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 28,
        "lineEnd": 28,
        "columnStart": 4,
        "columnEnd": 37
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# build environment\nFROM node:12-alpine as react-build\nARG CONFIGFILE\nWORKDIR /app\nCOPY . ./\nENV CONFIGFILE $CONFIGFILE\nRUN npm install && npm cache clean --force;\nRUN npm run build-only\n\n# Use the official lightweight Python image.\n# https://hub.docker.com/_/python\nFROM python:3.8-slim\nARG CONFIGFILE\n\n# Allow statements and log messages to immediately appear in the Knative logs\nENV PYTHONUNBUFFERED True\n\n# Copy local code to the container image.\nWORKDIR /opt\nCOPY ./config ./config\nCOPY ./static_data ./static_data\nCOPY ./src/constants/ ./constants\n\n# Copy local code to the container image.\nCOPY ./services/server /app\nWORKDIR /app\n\n# Install production dependencies.\nRUN pip install --no-cache-dir -r ./requirements.txt\n\nCOPY --from=react-build /app/dist ./cg_server/dist\n# COPY ./dist ./dist\n\nENV FLASK_ENV production\nENV PORT 8080\nENV CONFIGFILE /opt/$CONFIGFILE\nENV STATIC_DATA_PATH /opt/static_data\nENV CONSTANTSFILE /opt/constants/defs.json\n\n# Run the web service on container startup. Here we use the gunicorn\n# webserver, with one worker process and 8 threads.\n# For environments with multiple CPU cores, increase the number of workers\n# to be equal to the cores available.\nCMD exec gunicorn --bind :$PORT --workers 1 --threads 8 --timeout 0 cg_server.main:app\n"
}