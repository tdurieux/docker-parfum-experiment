{
  "startTime": 1674254642288,
  "endTime": 1674254643679,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 25,
        "lineEnd": 25,
        "columnStart": 4,
        "columnEnd": 62
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 35,
        "lineEnd": 35,
        "columnStart": 15,
        "columnEnd": 91
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 37,
        "lineEnd": 37,
        "columnStart": 4,
        "columnEnd": 106
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 43,
        "lineEnd": 43,
        "columnStart": 4,
        "columnEnd": 85
      }
    },
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 62,
        "lineEnd": 62,
        "columnStart": 4,
        "columnEnd": 23
      }
    },
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 95,
        "lineEnd": 95,
        "columnStart": 4,
        "columnEnd": 42
      }
    },
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 96,
        "lineEnd": 96,
        "columnStart": 4,
        "columnEnd": 33
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 21,
        "lineEnd": 21,
        "columnStart": 4,
        "columnEnd": 26
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 21,
        "lineEnd": 21,
        "columnStart": 4,
        "columnEnd": 26
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 17,
        "lineEnd": 19,
        "columnStart": 22,
        "columnEnd": 64
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 21,
        "lineEnd": 21,
        "columnStart": 4,
        "columnEnd": 26
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 27,
        "lineEnd": 27,
        "columnStart": 22,
        "columnEnd": 84
      }
    }
  ],
  "repairedSmells": [
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 21,
        "lineEnd": 21,
        "columnStart": 4,
        "columnEnd": 50
      }
    }
  ],
  "repairedDockerfile": "# Opstrace CI runs on Buildkite agents. These build agents run a slim Linux\n# distribution and can run Docker containers. Anything run by CI is meant to be\n# executed in a Docker container on one of the Buildkite agents. The image\n# defined by this Dockerfile here is supposed to provide all dependencies\n# required by opstrace CI. Specifically, `make ci-<TARGET>` is run by CI in\n# a container started from this image.\n# Note that the individual developer can also build and make use of this\n# container image during development.\nFROM debian:buster-slim\n\n# - moreutils, for `chronic` and `ts`.\n# - make, for running make targets in the container\n# - git, for interacting with the current checkout.\n# - gettext-base for envsubst\n# - uuid-runtime for uuidgen used by ci_events\n# - netcat for debugging\n# - tree, because we love nature\nRUN apt-get update && apt-get install -y -q --no-install-recommends \\\n    uuid-runtime rsync curl gnupg2 git make jq moreutils netcat-openbsd \\\n    build-essential gettext-base ca-certificates unzip less tree && rm -rf /var/lib/apt/lists/*;\n\nRUN apt-get install --no-install-recommends hub -y && rm -rf /var/lib/apt/lists/*;\n# gcloud CLI, for managing GCP\nRUN echo \"deb [signed-by=/usr/share/keyrings/cloud.google.gpg] http://packages.cloud.google.com/apt cloud-sdk main\" | \\\n    tee -a /etc/apt/sources.list.d/google-cloud-sdk.list\nRUN curl -f https://packages.cloud.google.com/apt/doc/apt-key.gpg | \\\n    apt-key --keyring /usr/share/keyrings/cloud.google.gpg add -\nRUN apt-get update && apt-get install -y -q --no-install-recommends google-cloud-sdk && rm -rf /var/lib/apt/lists/*;\nRUN apt-get -y autoclean\n\nRUN gcloud config set core/disable_usage_reporting true && \\\n    gcloud config set component_manager/disable_update_check true && \\\n    gcloud config set metrics/environment github_docker_image\n\n# Install kubectl, discover current stable version dynamically.\nRUN KVERSION=$( curl -f -s https://storage.googleapis.com/kubernetes-release/release/stable.txt) && \\\n    echo \"install kubectl ${KVERSION}\" && \\\n    curl -f -LO https://storage.googleapis.com/kubernetes-release/release/${KVERSION}/bin/linux/amd64/kubectl\nRUN chmod +x ./kubectl && mv ./kubectl /usr/local/bin/kubectl\n\n# AWS CLI, for fetching data from S3. Mount this into the container: ~/.aws\n# (the BK agent's home dir has AWS credentials set up for accessing our S3 BK\n# bucket.)\nRUN curl -f \"https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip\" -o \"awscliv2.zip\" && \\\n    unzip -q awscliv2.zip && \\\n    ./aws/install && \\\n    rm awscliv2.zip\n\n# - NodeJS and npm, for compiling and running opstrace CLI / controller\n# - Install NodeJS via nvm, analogue to local dev setup\nENV NODE_VERSION v16.4.2\nENV NVM_DIR /nvm\nRUN mkdir $NVM_DIR && git clone https://github.com/nvm-sh/nvm.git \"${NVM_DIR}\"\nRUN cd \"${NVM_DIR}\" && git checkout v0.37.2\nRUN . \"${NVM_DIR}\"/nvm.sh && nvm install \"${NODE_VERSION}\"\n\n# Put `node` and `npm` into PATH, for subsequent RUN statements but also for\n# all commands later on run in the container.\nENV NODE_PATH=$NVM_DIR/versions/node/$NODE_VERSION/lib/node_modules\nENV PATH=$NVM_DIR/versions/node/$NODE_VERSION/bin:$PATH\n\n# Moving target for now, on purpose.\nRUN npm install -g yarn && npm cache clean --force;\n\n# Make build log have explicit confirmation of versions in use.\nRUN node --version\nRUN yarn --version\n\n# Hackish, but simple and reliable method for making `node` and `npm`\n# executable by any user while also making sure that their \"global\" state is\n# not going to be modified (no write access).\nRUN chmod -R o+rx \"${NVM_DIR}\"\n\n# Set up the Docker binaries so that within the container we can manage\n# containers running on the host with the `docker` CLI (the host's Docker\n# socket is going to be mounted in).\nRUN curl -fsSLO https://download.docker.com/linux/static/stable/x86_64/docker-19.03.14.tgz && \\\n    tar --strip-components=1 -xvzf docker-19.03.14.tgz -C /usr/local/bin && \\\n    rm -f docker-19.03.14.tgz\n\n# Set up golang. Required to run golanglint-ci in the linter step.\nENV GOLANG_VERSION 1.17\nRUN curl -fsSLO https://golang.org/dl/go${GOLANG_VERSION}.linux-amd64.tar.gz && \\\n    tar -xzf go${GOLANG_VERSION}.linux-amd64.tar.gz -C /usr/local/ && \\\n    rm -f go${GOLANG_VERSION}.linux-amd64.tar.gz\n\nENV GOPATH /go\n\nENV PATH /usr/local/go/bin:$GOPATH/bin:$PATH\n\n# Set up golanglint-ci in the container image.\nRUN curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | \\\n    sh -s -- -b /usr/local/bin v1.41.1\n\n# Set up markdownlint in the container image so that we can lint right away! :)\nRUN npm install -g markdownlint-cli@0.28.1 && npm cache clean --force;\nRUN npm install -g prettier@2.3.2 && npm cache clean --force;\n\nRUN markdownlint --version\nRUN prettier --version\n\n# Set up `addlicense` so that we can use that right away. Install it to\n# /usr/local.\nRUN (cd /tmp && GOPATH=/usr/local/ go get github.com/google/addlicense)\n\n#RUN mkdir /tmp/yarninstall\nCOPY package.json yarn.lock /\n\n# Register build args, set defaults. GID and UID are expected to be overridden\n# in CI.\nARG CIUNAME=ciuser\nARG CIUID=1000\nARG CIGID=1000\n\n# Switch user to the same user that is used when running the image.\n# This is so that /node_modules is writable.\nRUN mkdir /node_modules && chmod 777 /node_modules\nRUN echo \"set up user $CIUNAME / $CIUID in group $CIGID\"\nRUN groupadd -g $CIGID -o $CIUNAME\nRUN useradd -m -u $CIUID -g $CIGID -o -s /bin/bash $CIUNAME\nUSER $CIUNAME\n\nRUN cd / && yarn --frozen-lockfile\n# check if this command works\nRUN yarn wsrun -c lint\n\nRUN echo \"biggest dirs\"\nRUN cd / && du -ha . | sort -r -h | head -n 50 || true\n# show which cache dir is really configured\nRUN yarn cache dir\n"
}