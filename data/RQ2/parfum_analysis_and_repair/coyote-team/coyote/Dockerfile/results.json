{
  "startTime": 1674250864723,
  "endTime": 1674250865522,
  "originalSmells": [
    {
      "rule": "yarnCacheCleanAfterInstall",
      "position": {
        "lineStart": 36,
        "lineEnd": 36,
        "columnStart": 4,
        "columnEnd": 16
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM ruby:2.7.6-alpine3.15\n\nWORKDIR /coyote\n\nARG bundle_without=\"development test\"\n\nRUN apk update \\\n  && apk upgrade \\\n  && apk add --update --no-cache --virtual .gyp python2 make g++ \\\n  build-base \\\n  git \\\n  libxml2-dev \\\n  libxslt-dev \\\n  nodejs \\\n  postgresql-client \\\n  postgresql-dev \\\n  ruby-json \\\n  shared-mime-info \\\n  tzdata \\\n  yaml-dev \\\n  yarn\n\n# Copy all dependency files\nADD Gemfile Gemfile.lock package.json yarn.lock ./\n\n# Install (and clean) Gem dependencies\nRUN gem install bundler:`tail -1 Gemfile.lock | xargs` --no-document --conservative\nRUN bundle config --global frozen 1 \\\n  && bundle config set without \"${bundle_without}\" \\\n  && bundle config build.nokogiri --use-system-libraries \\\n  && bundle install --jobs=$(getconf _NPROCESSORS_ONLN) \\\n  && rm -rf /usr/local/bundle/cache/*.gem \\\n  && find /usr/local/bundle/gems/ -name \"*.c\" -delete \\\n  && find /usr/local/bundle/gems/ -name \"*.o\" -delete\n\n# Install JavaScript dependencies\nRUN yarn install && yarn cache clean;\n\n# Accept the remainder of the args (prevents rebuilding gems when we don't need to)\n# ARG database_url\nARG env=\"production\"\n# ARG base_key\n# ARG master_key\n# ARG staging_key\n\n# ENV DATABASE_URL ${database_url}\nENV RAILS_ENV ${env:-\"production\"}\nENV RACK_ENV ${RAILS_ENV}\nENV NODE_ENV ${RAILS_ENV}\nENV RAILS_LOG_TO_STDOUT 1\n# ENV RAILS_BASE_KEY ${base_key}\n# ENV RAILS_MASTER_KEY ${master_key}\n# ENV RAILS_STAGING_KEY ${staging_key}\nENV PORT 3000\n\n# Copy and configure the app\nADD . ./\nRUN if [ \"$RAILS_ENV\" = \"production\" ]; then bundle exec rails assets:precompile && bundle exec rails assets:precompile:pages; fi\n\n# Launch!\nEXPOSE $PORT\nCMD ./bin/release && bundle exec puma -C config/puma.rb\n"
}