{
  "startTime": 1674248591493,
  "endTime": 1674248592344,
  "originalSmells": [
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 10,
        "lineEnd": 10,
        "columnStart": 4,
        "columnEnd": 24
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# Multi-stage build\n\n# 1: Build l'application\nFROM node:10.15-alpine as build\n\nRUN mkdir /srv/web\nWORKDIR /srv/web\n\nCOPY ./package.json package.json\n\nRUN npm install --silent && npm cache clean --force;\n\nCOPY . .\n\nRUN npm run build\n\n# 2: Copier le proxy\nFROM pierrezemb/gostatic:latest@sha256:27a9d727b2d17ef9cc14bc2fd361771a16fea175c17348b61e4ac5541f3c64ff \\\n as proxy\n\n# 3: Rebase sur busybox avec (spécifiquement) glibc pour Go\n# Busybox est nécessaire pour avoir un shell pour interpréter les variables\n# d'environnement dans le ENTRYPOINT\nFROM busybox:glibc\n\ncopy --from=proxy /goStatic .\n\nWORKDIR /\n\nEXPOSE 8080\n\n# Exposer une variable de build pour les adresses de CORS\nARG CORS_URLS='http://localhost:5000, http://api:5000'\nENV CORS_URLS CORS_URLS\n\nCOPY --from=build /srv/web/build .\n\n# 4: Exposer l'application builder sous un dossier avec un mini serveur web static\nENTRYPOINT /goStatic -path \".\" -fallback \"./index.html\" -port \"8080\" \\\n                     -append-header \"Access-Control-Allow-Methods: GET, POST, OPTIONS\" \\\n                     -append-header \"Access-Control-Allow-Origin: ${CORS_URLS}\"\n"
}