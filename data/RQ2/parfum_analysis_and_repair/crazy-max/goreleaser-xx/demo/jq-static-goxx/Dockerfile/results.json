{
  "startTime": 1674256130795,
  "endTime": 1674256131428,
  "originalSmells": [
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 18,
        "lineEnd": 18,
        "columnStart": 4,
        "columnEnd": 53
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 18,
        "lineEnd": 18,
        "columnStart": 4,
        "columnEnd": 53
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 18,
        "lineEnd": 18,
        "columnStart": 4,
        "columnEnd": 53
      }
    }
  ],
  "repairedSmells": [
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 16,
        "lineEnd": 16,
        "columnStart": 4,
        "columnEnd": 77
      }
    }
  ],
  "repairedDockerfile": "ARG GO_VERSION=1.17\nARG GORELEASER_XX_BASE=crazymax/goreleaser-xx:edge\nARG JQ_VERSION=\"jq-1.6\"\n\nFROM --platform=$BUILDPLATFORM ${GORELEASER_XX_BASE} AS goreleaser-xx\nFROM --platform=$BUILDPLATFORM crazymax/osxcross:11.3 AS osxcross\nFROM --platform=$BUILDPLATFORM crazymax/goxx:${GO_VERSION} AS base\nCOPY --from=osxcross /osxcross /osxcross\nCOPY --from=goreleaser-xx / /\nRUN goxx-apt-get install --no-install-recommends -y git\nENV GO111MODULE=auto\nENV CGO_ENABLED=1\nENV OSXCROSS_MP_INC=1\nWORKDIR /src\n\nFROM base AS libjq-linux\nRUN apt-get install --no-install-recommends -y autoconf automake flex libtool && rm -rf /var/lib/apt/lists/*;\nARG TARGETPLATFORM\nRUN --mount=type=cache,sharing=private,target=/var/cache/apt \\\n  --mount=type=cache,sharing=private,target=/var/lib/apt/lists \\\n  goxx-apt-get install -y binutils gcc pkg-config\nWORKDIR /usr/local/src/jq\nARG JQ_VERSION\nRUN <<EOT\nset -e\ngit clone --depth 1 --recurse-submodules --shallow-submodules -b $JQ_VERSION https://github.com/stedolan/jq.git .\nHOST_TRIPLE=$(. goxx-env && echo $GOXX_TRIPLE)\nBUILD_TRIPLE=$(TARGETPLATFORM= . goxx-env && echo $GOXX_TRIPLE)\nautoreconf -fi\nCC=\"$HOST_TRIPLE-gcc\" ./configure \\\n  --prefix=/usr/$HOST_TRIPLE \\\n  --host=$HOST_TRIPLE \\\n  --build=$BUILD_TRIPLE \\\n  --target=$BUILD_TRIPLE \\\n  --disable-maintainer-mode \\\n  --disable-docs \\\n  --enable-all-static \\\n  --with-oniguruma\nmake\nmake -j$(nproc) LDFLAGS=-all-static install DESTDIR=\"/out\"\nEOT\n\nFROM scratch AS libjq-dummy\nWORKDIR /out\n\nFROM libjq-dummy AS libjq-windows\nFROM libjq-dummy AS libjq-darwin\nFROM libjq-${TARGETOS} AS libjq\n\nFROM base AS build\nCOPY --from=libjq /out /\nARG TARGETPLATFORM\nRUN --mount=type=cache,sharing=private,target=/var/cache/apt \\\n  --mount=type=cache,sharing=private,target=/var/lib/apt/lists \\\n  goxx-apt-get install -y binutils gcc pkg-config\nRUN goxx-macports --static install jq\nRUN --mount=type=bind,source=.,rw \\\n  --mount=type=cache,target=/root/.cache <<EOT\nset -e\nEXTLDFLAGS=\"-v\"\nif [ \"$(. goxx-env && echo $GOOS)\" = \"linux\" ]; then\n  EXTLDFLAGS=\"$EXTLDFLAGS -static\"\n  export CGO_CFLAGS=\"-lm -g -O2\"\n  export CGO_LDFLAGS=\"-lm -g -O2\"\nfi\ngoreleaser-xx --debug \\\n  --config=\".goreleaser.yml\" \\\n  --name=\"jq-static-goxx\" \\\n  --dist=\"/out\" \\\n  --main=\".\" \\\n  --ldflags=\"-s -w -extldflags '$EXTLDFLAGS'\" \\\n  --tags=\"netgo\" \\\n  --files=\"README.md\"\nEOT\n\nFROM scratch AS artifact\nCOPY --from=build /out /\n\nFROM scratch\nCOPY --from=build /usr/local/bin/jq-static-goxx /jq-static-goxx\nENTRYPOINT [ \"/jq-static-goxx\" ]\n"
}