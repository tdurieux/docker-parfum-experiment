{
  "startTime": 1674255616459,
  "endTime": 1674255617932,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 110,
        "lineEnd": 110,
        "columnStart": 4,
        "columnEnd": 68
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 118,
        "lineEnd": 118,
        "columnStart": 4,
        "columnEnd": 32
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 43,
        "lineEnd": 43,
        "columnStart": 4,
        "columnEnd": 266
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 60,
        "lineEnd": 60,
        "columnStart": 4,
        "columnEnd": 110
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 84,
        "lineEnd": 84,
        "columnStart": 4,
        "columnEnd": 26
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 23,
        "lineEnd": 26,
        "columnStart": 4,
        "columnEnd": 28
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 93,
        "lineEnd": 93,
        "columnStart": 4,
        "columnEnd": 54
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 99,
        "lineEnd": 99,
        "columnStart": 4,
        "columnEnd": 48
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 93,
        "lineEnd": 93,
        "columnStart": 4,
        "columnEnd": 54
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 99,
        "lineEnd": 99,
        "columnStart": 4,
        "columnEnd": 48
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 23,
        "lineEnd": 26,
        "columnStart": 4,
        "columnEnd": 28
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 93,
        "lineEnd": 93,
        "columnStart": 4,
        "columnEnd": 54
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 99,
        "lineEnd": 99,
        "columnStart": 4,
        "columnEnd": 48
      }
    }
  ],
  "repairedSmells": [
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 93,
        "lineEnd": 93,
        "columnStart": 4,
        "columnEnd": 78
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 99,
        "lineEnd": 99,
        "columnStart": 4,
        "columnEnd": 72
      }
    }
  ],
  "repairedDockerfile": "# This Dockerfile aims to make building Hubble v4 packages easier.\n# Starting with version 4 building osquery is removed from individual Dockerfiles to its own.\n# osquery needs to be built once. Resulting tar file can be used in hubblev4 Dockerfiles.\n# Before building hubble, build osquery using a Dockerfile in pkg/osquery/ directory.\n# To build this image: 1. copy previously built osquery_4hubble.x86_64.tar to directory with this Dockerfile\n#                      2. docker build -t <image_name> --build-arg HUBBLE_CHECKOUT=<tag or commit> --build-arg HUBBLE_VERSION=<Hubble Version> .\n# The resulting image is ready to build and run pyinstaller on container start that should\n# create hubble<version>-debian.tar.gz in the /data directory inside the container.\n# Mount /data volume into a directory on the host to access the package.\n# To run the container:  docker run -it --rm -v `pwd`:/data <image_name>\n\nFROM debian:11\n\nRUN apt-get update \\\n && apt-get -y upgrade \\\n && apt-get clean \\\n && rm -rf /var/cache/apt\n\n# paths that hubble or hubble parts need in the package\nRUN mkdir -p /etc/hubble/hubble.d /opt/hubble /opt/osquery /var/log/hubble_osquery/backuplogs\n\n# install packages that should be needed for ligbit2 compilation and successful pyinstaller run\nRUN apt-get update \\\n && apt-get -y --no-install-recommends install git curl \\\n    libffi-dev libssl-dev libyaml-dev libssh2-1 libssh2-1-dev autoconf automake libtool \\\n    libxml2-dev libxslt1-dev zlib1g-dev cmake gcc wget openssl \\\n    python3-pip python3-cffi \\\n && apt-get clean \\\n && rm -rf /var/cache/apt && rm -rf /var/lib/apt/lists/*;\n\n# libcurl install start\n# install libcurl to avoid depending on host version\n# requires autoconf libtool libssh2-devel zlib-devel autoconf\nENV LIBCURL_SRC_URL=https://github.com/curl/curl.git\nENV LIBCURL_SRC_VERSION=curl-7_64_1\nENV LIBCURL_TEMP=/tmp/libcurl\nENV PATH=/opt/hubble/bin/:/opt/hubble/include:/opt/hubble/lib:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin\nRUN mkdir -p \"$LIBCURL_TEMP\" \\\n && cd \"$LIBCURL_TEMP\" \\\n && git clone \"$LIBCURL_SRC_URL\" \\\n && cd curl \\\n && git checkout \"$LIBCURL_SRC_VERSION\" \\\n && ./buildconf \\\n && ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --prefix=/opt/hubble --disable-ldap --without-nss --disable-manual --disable-gopher --disable-smtp --disable-smb --disable-imap --disable-pop3 --disable-tftp --disable-telnet --disable-dict --disable-ldaps --disable-ldap --disable-rtsp --with-libssh2 \\\n && make \\\n && make install \\\n && rm -rf \"$LIBCURL_TEMP\"\n\n# git install start\n# install git so that git package won't be a package dependency\n# requires make git libcurl-devel autoconf zlib-devel gcc\nENV GIT_SRC_URL=https://github.com/git/git.git\nENV GIT_SRC_VERSION=v2.21.0\nENV GITTEMP=/tmp/gittemp\nRUN mkdir -p \"$GITTEMP\" \\\n && cd \"$GITTEMP\" \\\n && git clone \"$GIT_SRC_URL\" \\\n && cd git \\\n && git checkout \"$GIT_SRC_VERSION\" \\\n && make configure \\\n && ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --prefix=/opt/hubble --with-tcltk=no --with-expat=no --with-python=no --with-curl=/opt/hubble \\\n && echo \"NO_TCLTK=YesPlease\" >> config.mak.autogen \\\n && echo \"NO_PERL=YesPlease\" >> config.mak.autogen \\\n && sed -i '0,/^NO_GETTEXT/s/^NO_GETTEXT.*/NO_GETTEXT=YesPlease/' config.mak.autogen \\\n && make \\\n && make install \\\n && rm -rf \"$GITTEMP\"\n\n# clean up of /opt/hubble\nRUN rm /opt/hubble/bin/curl* \\\n && rm -rf /opt/hubble/include /opt/hubble/share\n\n# libgit2 install start\n# must precede pyinstaller requirements\nENV LIBGIT2_SRC_VERSION=1.1.0\nENV LIBGIT2_SRC_URL=https://github.com/libgit2/libgit2/archive/v${LIBGIT2_SRC_VERSION}.tar.gz\n# it turns out github provided release files can change. so even though the\n# code hopefully hasn't changed, the hash has.\nENV LIBGIT2_SRC_SHA256=41a6d5d740fd608674c7db8685685f45535323e73e784062cf000a633d420d1e\nENV LIBGIT2TEMP=/tmp/libgit2temp\nRUN mkdir -p \"$LIBGIT2TEMP\" \\\n && cd \"$LIBGIT2TEMP\" \\\n && wget -q \"$LIBGIT2_SRC_URL\" -O libgit2.tar.gz \\\n && echo \"$LIBGIT2_SRC_SHA256  libgit2.tar.gz\" | sha256sum -c - \\\n && tar xzf libgit2.tar.gz \\\n && cd libgit2-\"$LIBGIT2_SRC_VERSION\"/ \\\n && export LIBGIT2=/usr/local/ \\\n && cmake . -DCMAKE_INSTALL_PREFIX=$LIBGIT2 \\\n && make \\\n && make install \\\n && rm -rf \"$LIBGIT2TEMP\" && rm libgit2.tar.gz\n\n# fpm package making requirements start\nRUN apt-get install --no-install-recommends -y ruby ruby-dev rubygems gcc make \\\n && gem install --no-document ffi --version 1.12.2 \\\n && gem install --no-document fpm \\\n && apt-get clean \\\n && rm -rf /var/cache/apt && rm -rf /var/lib/apt/lists/*;\n\nRUN apt-get install --no-install-recommends -y libbz2-dev libsqlite3-dev \\\n && apt-get clean \\\n && rm -rf /var/cache/apt && rm -rf /var/lib/apt/lists/*;\n\n# use pyenv\nARG PYENV_VERSION=3.7.9\nENV PYENV_INSTALLER_URL=https://raw.githubusercontent.com/pyenv/pyenv-installer/master/bin/pyenv-installer\nENV PYENV_ROOT=/opt/hubble/pyenv\nENV PATH=$PYENV_ROOT/bin:$PATH\nENV PYTHON_CONFIGURE_OPTS=\"--enable-shared\"\nRUN umask 022 \\\n && curl -f -s -S -L \"$PYENV_INSTALLER_URL\" -o /usr/bin/pyenv-installer \\\n && chmod 0755 /usr/bin/pyenv-installer \\\n && /usr/bin/pyenv-installer \\\n && eval \"$(pyenv init --path)\" \\\n && pyenv install $PYENV_VERSION \\\n && pyenv global $PYENV_VERSION\n\nRUN eval \"$(pyenv init --path)\" \\\n && pip -v --no-cache-dir install --upgrade pip\n\n# pyinstaller start\n# commands specified for ENTRYPOINT and CMD are executed when the container is run, not when the image is built\n# use the following variables to choose the version of hubble\nARG HUBBLE_CHECKOUT=v4.5.0\nARG HUBBLE_VERSION=4.5.0\nARG HUBBLE_GIT_URL=https://github.com/hubblestack/hubble.git\nENV HUBBLE_ITERATION=1\nENV HUBBLE_URL=https://github.com/hubblestack/hubble\nENV HUBBLE_SRC_PATH=/hubble_src\nENV _HOOK_DIR=\"./pkg/\"\nENV _BINARY_LOG_LEVEL=\"INFO\"\nENV _INCLUDE_PATH=\"\"\nENV LD_LIBRARY_PATH=/opt/hubble/lib:/lib:/lib64:/usr/lib:/usr/lib64:/usr/local/lib:/usr/local/lib64\nENV HUBBLE_CHECKOUT=$HUBBLE_CHECKOUT\nENV HUBBLE_VERSION=$HUBBLE_VERSION\nENV HUBBLE_GIT_URL=$HUBBLE_GIT_URL\n\n# leaving this blank will cause the entrypoint to look for either osquery_4hubble.tar\n# or osquery_4_hubble.$(uname -m).tar\nARG OSQUERY_TAR_FILENAME=\nENV OSQUERY_TAR_FILENAME=$OSQUERY_TAR_FILENAME\n\nVOLUME /data\nWORKDIR /hubble_build\nCOPY entrypoint.sh /entrypoint.sh\nENTRYPOINT [ \"/bin/bash\", \"/entrypoint.sh\" ]\n"
}