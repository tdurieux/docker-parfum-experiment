diff --git a/Users/tdurieux/git/dinghy-experiment/data/evaluation/dockerfiles/hubblestack/hubble/pkg/dev/debian10/Dockerfile b/Users/tdurieux/git/dinghy-experiment/data/evaluation/dockerfile_repair_results/hubblestack/hubble/pkg/dev/debian10/Dockerfile/repaired.Dockerfile
index 5f2e67a..e7fece3 100644
--- a/Users/tdurieux/git/dinghy-experiment/data/evaluation/dockerfiles/hubblestack/hubble/pkg/dev/debian10/Dockerfile
+++ b/Users/tdurieux/git/dinghy-experiment/data/evaluation/dockerfile_repair_results/hubblestack/hubble/pkg/dev/debian10/Dockerfile/repaired.Dockerfile
@@ -21,13 +21,13 @@ RUN mkdir -p /etc/hubble/hubble.d /opt/hubble /opt/osquery /var/log/hubble_osque
 
 # install packages that should be needed for ligbit2 compilation and successful pyinstaller run
 RUN apt-get update \
- && apt-get -y install git curl \
+ && apt-get -y --no-install-recommends install git curl \
     python-dev libffi-dev libssl-dev libyaml-dev libssh2-1 libssh2-1-dev autoconf automake libtool \
     libxml2-dev libxslt1-dev python-cffi \
-    zlib1g-dev cmake python-setuptools  \
+    zlib1g-dev cmake python-setuptools \
     gcc wget python-pip openssl \
  && apt-get clean \
- && rm -rf /var/cache/apt
+ && rm -rf /var/cache/apt && rm -rf /var/lib/apt/lists/*;
 
 # libcurl install start
 # install libcurl to avoid depending on host version
@@ -42,7 +42,7 @@ RUN mkdir -p "$LIBCURL_TEMP" \
  && cd curl \
  && git checkout "$LIBCURL_SRC_VERSION" \
  && ./buildconf \
- && ./configure --prefix=/opt/hubble --disable-ldap --without-nss --disable-manual --disable-gopher --disable-smtp --disable-smb --disable-imap --disable-pop3 --disable-tftp --disable-telnet --disable-dict --disable-ldaps --disable-ldap --disable-rtsp --with-libssh2 \
+ && ./configure --build="$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)" --prefix=/opt/hubble --disable-ldap --without-nss --disable-manual --disable-gopher --disable-smtp --disable-smb --disable-imap --disable-pop3 --disable-tftp --disable-telnet --disable-dict --disable-ldaps --disable-ldap --disable-rtsp --with-libssh2 \
  && make \
  && make install \
  && rm -rf "$LIBCURL_TEMP"
@@ -59,7 +59,7 @@ RUN mkdir -p "$GITTEMP" \
  && cd git \
  && git checkout "$GIT_SRC_VERSION" \
  && make configure \
- && ./configure --prefix=/opt/hubble --with-tcltk=no --with-expat=no --with-python=no  --with-curl=/opt/hubble \
+ && ./configure --build="$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)" --prefix=/opt/hubble --with-tcltk=no --with-expat=no --with-python=no --with-curl=/opt/hubble \
  && echo "NO_TCLTK=YesPlease" >> config.mak.autogen \
  && echo "NO_PERL=YesPlease" >> config.mak.autogen \
  && sed -i '0,/^NO_GETTEXT/s/^NO_GETTEXT.*/NO_GETTEXT=YesPlease/' config.mak.autogen \
@@ -89,18 +89,18 @@ RUN mkdir -p "$LIBGIT2TEMP" \
  && cmake . -DCMAKE_INSTALL_PREFIX=$LIBGIT2 \
  && make \
  && make install \
- && rm -rf "$LIBGIT2TEMP"
+ && rm -rf "$LIBGIT2TEMP" && rm libgit2.tar.gz
 
 # fpm package making requirements start
-RUN apt-get install -y ruby ruby-dev rubygems gcc make \
+RUN apt-get install --no-install-recommends -y ruby ruby-dev rubygems gcc make \
  && gem install --no-ri --no-rdoc ffi --version 1.12.2 \
  && gem install --no-ri --no-rdoc fpm \
  && apt-get clean \
- && rm -rf /var/cache/apt
+ && rm -rf /var/cache/apt && rm -rf /var/lib/apt/lists/*;
 
-RUN apt-get install -y libbz2-dev libsqlite3-dev \
+RUN apt-get install --no-install-recommends -y libbz2-dev libsqlite3-dev \
  && apt-get clean \
- && rm -rf /var/cache/apt
+ && rm -rf /var/cache/apt && rm -rf /var/lib/apt/lists/*;
 
 # use pyenv
 ARG PYENV_VERSION=3.7.9
@@ -109,7 +109,7 @@ ENV PYENV_ROOT=/opt/hubble/pyenv
 ENV PATH=$PYENV_ROOT/bin:$PATH
 ENV PYTHON_CONFIGURE_OPTS="--enable-shared"
 RUN umask 022 \
- && curl -s -S -L "$PYENV_INSTALLER_URL" -o /usr/bin/pyenv-installer \
+ && curl -f -s -S -L "$PYENV_INSTALLER_URL" -o /usr/bin/pyenv-installer \
  && chmod 0755 /usr/bin/pyenv-installer \
  && /usr/bin/pyenv-installer \
  && eval "$(pyenv init --path)" \
@@ -117,7 +117,7 @@ RUN umask 022 \
  && pyenv global $PYENV_VERSION
 
 RUN eval "$(pyenv init --path)" \
- && pip -v install --upgrade pip
+ && pip -v --no-cache-dir install --upgrade pip
 
 # pyinstaller start
 # commands specified for ENTRYPOINT and CMD are executed when the container is run, not when the image is built