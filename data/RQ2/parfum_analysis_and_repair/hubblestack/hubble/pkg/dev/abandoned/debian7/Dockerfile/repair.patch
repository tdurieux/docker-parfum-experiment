diff --git a/Users/tdurieux/git/dinghy-experiment/data/evaluation/dockerfiles/hubblestack/hubble/pkg/dev/abandoned/debian7/Dockerfile b/Users/tdurieux/git/dinghy-experiment/data/evaluation/dockerfile_repair_results/hubblestack/hubble/pkg/dev/abandoned/debian7/Dockerfile/repaired.Dockerfile
index e2ecbdc..a491168 100644
--- a/Users/tdurieux/git/dinghy-experiment/data/evaluation/dockerfiles/hubblestack/hubble/pkg/dev/abandoned/debian7/Dockerfile
+++ b/Users/tdurieux/git/dinghy-experiment/data/evaluation/dockerfile_repair_results/hubblestack/hubble/pkg/dev/abandoned/debian7/Dockerfile/repaired.Dockerfile
@@ -44,14 +44,14 @@ RUN mkdir -p /etc/hubble/hubble.d /opt/hubble /opt/osquery /var/log/hubble_osque
 #must precede osquery as at the moment, osquery won't build without patchelf
 ENV PATCHELF_GIT_URL=https://github.com/NixOS/patchelf.git
 ENV PATCHELF_TEMP=/tmp/patchelf
-RUN apt-get -y install autoconf git make g++
+RUN apt-get -y --no-install-recommends install autoconf git make g++ && rm -rf /var/lib/apt/lists/*;
 RUN mkdir -p "$PATCHELF_TEMP" \
  && cd "$PATCHELF_TEMP" \
  && git clone "$PATCHELF_GIT_URL" \
  && cd patchelf \
  && sed -i 's/serial-tests/parallel-tests/' configure.ac \
  && ./bootstrap.sh \
- && ./configure \
+ && ./configure --build="$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)" \
  && make \
  && make install
 
@@ -59,7 +59,7 @@ RUN mkdir -p "$PATCHELF_TEMP" \
 #osquery should be built first since requirements for other packages can interfere with osquery dependencies
 #to build, osquery scripts want sudo and a user to sudo with.
 ENV OSQUERY_BUILD_USER=osquerybuilder
-RUN apt-get -y install git make python ruby sudo locales curl
+RUN apt-get -y --no-install-recommends install git make python ruby sudo locales curl && rm -rf /var/lib/apt/lists/*;
 RUN useradd --shell /bin/bash --create-home --user-group --groups sudo "$OSQUERY_BUILD_USER" \
  && sed -i 's/^%sudo.*/%sudo\ ALL=\(ALL\)\ NOPASSWD:\ ALL/' /etc/sudoers
 COPY --from=osquery /osquery /home/"$OSQUERY_BUILD_USER"/osquery
@@ -91,11 +91,11 @@ RUN ls -lahR /opt/osquery/ && /opt/osquery/osqueryi --version
 
 #install packages that should be needed for ligbit2 compilation and successful pyinstaller run
 RUN apt-get update \
- && apt-get -y install  \
+ && apt-get -y --no-install-recommends install \
                python-dev libffi-dev libssl-dev libyaml-dev libssh2-1 libssh2-1-dev autoconf automake libtool \
                libxml2-dev libxslt1-dev zlib1g-dev \
                gcc wget openssl \
- && apt-get clean
+ && apt-get clean && rm -rf /var/lib/apt/lists/*;
 
 #cmake install start
 #must precede libgit2 due to old version of cmake included with debian7 that has openssl version parsing bug
@@ -112,7 +112,7 @@ RUN mkdir -p "$CMAKE_TEMP" \
  && cd cmake-"$CMAKE_SRC_VERSION" \
  && ./bootstrap \
  && make \
- && make install
+ && make install && rm cmake.src.tar.gz
 
 #libcurl install start
 #install libcurl to avoid depending on host version
@@ -127,7 +127,7 @@ RUN mkdir -p "$LIBCURL_TEMP" \
  && cd curl \
  && git checkout "$LIBCURL_SRC_VERSION" \
  && ./buildconf \
- && ./configure --prefix=/opt/hubble --disable-ldap --without-nss --disable-manual --disable-gopher --disable-smtp --disable-smb --disable-imap --disable-pop3 --disable-tftp --disable-telnet --disable-dict --disable-ldaps --disable-ldap --disable-rtsp --with-libssh2 \
+ && ./configure --build="$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)" --prefix=/opt/hubble --disable-ldap --without-nss --disable-manual --disable-gopher --disable-smtp --disable-smb --disable-imap --disable-pop3 --disable-tftp --disable-telnet --disable-dict --disable-ldaps --disable-ldap --disable-rtsp --with-libssh2 \
  && make \
  && make install
 
@@ -143,7 +143,7 @@ RUN mkdir -p "$GITTEMP" \
  && cd git \
  && git checkout "$GIT_SRC_VERSION" \
  && make configure \
- && ./configure --prefix=/opt/hubble --with-tcltk=no --with-expat=no --with-python=no  --with-curl=/opt/hubble \
+ && ./configure --build="$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)" --prefix=/opt/hubble --with-tcltk=no --with-expat=no --with-python=no --with-curl=/opt/hubble \
  && echo "NO_TCLTK=YesPlease" >> config.mak.autogen \
  && echo "NO_PERL=YesPlease" >> config.mak.autogen \
  && sed -i '0,/^NO_GETTEXT/s/^NO_GETTEXT.*/NO_GETTEXT=YesPlease/' config.mak.autogen \
@@ -171,7 +171,7 @@ RUN mkdir -p "$LIBGIT2TEMP" \
  && export LIBGIT2=/usr/local/ \
  && cmake . -DCMAKE_INSTALL_PREFIX=$LIBGIT2 \
  && make \
- && make install
+ && make install && rm libgit2.tar.gz
 
 # use pyenv
 ARG PYENV_VERSION=3.7.9
@@ -179,7 +179,7 @@ ENV PYENV_INSTALLER_URL=https://raw.githubusercontent.com/pyenv/pyenv-installer/
 ENV PYENV_ROOT=/usr/local/pyenv
 ENV PATH=$PYENV_ROOT/bin:$PATH
 RUN umask 022 \
- && curl -s -S -L "$PYENV_INSTALLER_URL" -o /usr/bin/pyenv-installer \
+ && curl -f -s -S -L "$PYENV_INSTALLER_URL" -o /usr/bin/pyenv-installer \
  && chmod 0755 /usr/bin/pyenv-installer \
  && /usr/bin/pyenv-installer \
  && eval "$(pyenv init -)" \
@@ -188,12 +188,12 @@ RUN umask 022 \
 
 COPY pyinstaller-requirements.txt /
 RUN eval "$(pyenv init -)" \
- && pip -v install --upgrade pip \
- && pip -v install -r pyinstaller-requirements.txt
+ && pip -v --no-cache-dir install --upgrade pip \
+ && pip -v --no-cache-dir install -r pyinstaller-requirements.txt
 
 #deb package making requirements start
-RUN apt-get install -y ruby ruby-dev rubygems gcc make \
- && gem install --no-ri --no-rdoc fpm
+RUN apt-get install --no-install-recommends -y ruby ruby-dev rubygems gcc make \
+ && gem install --no-ri --no-rdoc fpm && rm -rf /var/lib/apt/lists/*;
 
 #pyinstaller start
 #commands specified for ENTRYPOINT and CMD are executed when the container is run, not when the image is built