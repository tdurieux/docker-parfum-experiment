{
  "startTime": 1674250172824,
  "endTime": 1674250173848,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 27,
        "lineEnd": 27,
        "columnStart": 4,
        "columnEnd": 84
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 81,
        "lineEnd": 81,
        "columnStart": 7,
        "columnEnd": 85
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 49,
        "lineEnd": 49,
        "columnStart": 4,
        "columnEnd": 22
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 50,
        "lineEnd": 50,
        "columnStart": 22,
        "columnEnd": 49
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 50,
        "lineEnd": 50,
        "columnStart": 22,
        "columnEnd": 49
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# Generated by Porcupine\n# Modelled after Neurodocker v0.2.0-dev. https://github.com/kaczmarj/neurodocker\n\nFROM timvanmourik/porcupine\n\n#----------------------------------------------------------\n# Install common dependencies and create default entrypoint\n#----------------------------------------------------------\nARG DEBIAN_FRONTEND=noninteractive\nENV LANG=\"C.UTF-8\" \\\n    LC_ALL=\"C\" \\\n    ND_ENTRYPOINT=\"/porcupine/startup.sh\"\nRUN apt-get update -qq && apt-get install -yq --no-install-recommends  \\\n    \tbzip2 ca-certificates curl unzip \\\n    && apt-get clean \\\n    && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/* \\\n    && chmod 777 /opt && chmod a+s /opt \\\n    && mkdir /porcupine \\\n    && echo '#!/usr/bin/env bash' >> $ND_ENTRYPOINT \\\n    && echo 'set +x' >> $ND_ENTRYPOINT \\\n    && echo 'if [ -z \"$*\" ]; then /usr/bin/env bash; else $*; fi' >> $ND_ENTRYPOINT \\\n    && chmod -R 777 /porcupine && chmod a+s /porcupine\nENTRYPOINT [\"/porcupine/startup.sh\"]\n\n#---------------\n# Install Nipype\n#---------------\nRUN curl -f -sSLO https://repo.continuum.io/miniconda/Miniconda3-4.3.11-Linux-x86_64.sh && \\\n    bash Miniconda3-4.3.11-Linux-x86_64.sh -b -p /usr/local/miniconda && \\\n    rm Miniconda3-4.3.11-Linux-x86_64.sh\n\nENV PATH=/usr/local/miniconda/bin:$PATH \\\n    LANG=C.UTF-8 \\\n    LC_ALL=C.UTF-8\n\n# Installing precomputed python packages\nRUN conda install -y mkl=2017.0.1 mkl-service &&  \\\n    conda install -y numpy=1.12.0 \\\n                     scipy=0.18.1 \\\n                     scikit-learn=0.18.1 \\\n                     matplotlib=2.0.0 \\\n                     pandas=0.19.2 \\\n                     libxml2=2.9.4 \\\n                     libxslt=1.1.29\\\n                     traits=4.6.0 \\\n                     boto\n\nRUN chmod +x /usr/local/miniconda/bin/* && conda clean --all -y\nRUN echo 'export PATH=/usr/local/miniconda/bin:$PATH' >> /etc/profile\nRUN pip install --no-cache-dir nipype\nRUN apt-get update && apt-get install --no-install-recommends -y graphviz && rm -rf /var/lib/apt/lists/*;\n#--------------------\n# Install AFNI latest\n#--------------------\nENV PATH=/opt/afni:$PATH\nRUN apt-get update -qq && apt-get install -yq --no-install-recommends ed gsl-bin libglu1-mesa-dev libglib2.0-0 libglw1-mesa \\\n    libgomp1 libjpeg62 libxm4 netpbm tcsh xfonts-base xvfb \\\n    && libs_path=/usr/lib/x86_64-linux-gnu \\\n    && if [ -f $libs_path/libgsl.so.19 ]; then \\\n           ln $libs_path/libgsl.so.19 $libs_path/libgsl.so.0; \\\n       fi \\\n    # Install libxp (not in all ubuntu/debian repositories) \\\n    && apt-get install -yq --no-install-recommends libxp6 \\\n    || /bin/bash -c \" \\\n       curl --retry 5 -o /tmp/libxp6.deb -sSL http://mirrors.kernel.org/debian/pool/main/libx/libxp/libxp6_1.0.2-2_amd64.deb \\\n       && dpkg -i /tmp/libxp6.deb && rm -f /tmp/libxp6.deb\" \\\n    # Install libpng12 (not in all ubuntu/debian repositories) \\\n    && apt-get install -yq --no-install-recommends libpng12-0 \\\n    || /bin/bash -c \" \\\n       curl -o /tmp/libpng12.deb -sSL http://mirrors.kernel.org/debian/pool/main/libp/libpng/libpng12-0_1.2.49-1%2Bdeb7u2_amd64.deb \\\n       && dpkg -i /tmp/libpng12.deb && rm -f /tmp/libpng12.deb\" \\\n    # Install R \\\n    && apt-get install -yq --no-install-recommends \\\n    \tr-base-dev r-cran-rmpi \\\n     || /bin/bash -c \" \\\n        curl -o /tmp/install_R.sh -sSL https://gist.githubusercontent.com/kaczmarj/8e3792ae1af70b03788163c44f453b43/raw/0577c62e4771236adf0191c826a25249eb69a130/R_installer_debian_ubuntu.sh \\\n        && /bin/bash /tmp/install_R.sh\" \\\n    && apt-get clean \\\n    && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/* \\\n    && echo \"Downloading AFNI ...\" \\\n    && mkdir -p /opt/afni \\\n    && curl -f -sSL --retry 5 https://afni.nimh.nih.gov/pub/dist/tgz/linux_openmp_64.tgz \\\n    | tar zx -C /opt/afni --strip-components=1 \\\n    && /opt/afni/rPkgsInstall -pkgs ALL \\\n    && rm -rf /tmp/*\n\n#--------------------------------\n# Add custom analysis file as CMD\n#--------------------------------\nADD ./porcupine_generated_pipeline.py /run.py\nCMD [\"python\", \"/run.py\"]\n"
}