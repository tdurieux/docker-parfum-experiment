{
  "startTime": 1674248947922,
  "endTime": 1674248948605,
  "originalSmells": [
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 17,
        "lineEnd": 35,
        "columnStart": 25,
        "columnEnd": 15
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 17,
        "lineEnd": 35,
        "columnStart": 25,
        "columnEnd": 15
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# Dockerfile.linux-image.build\n#------------------------------------------------------------------------------------------\n# Dockerfile to create a Linux Ubuntu Image for Testing from you current local branch.\n# You can use this to create a local image then run it.\n# --- This is for Development and Testing Purposes Only. ---\n#\n# - Usage: In Visual Studio Code when Docker Extensions are Installed\n# - you can right click this file and select build.  Or From the command Line:\n# $ docker build --pull --rm -f \"Dockerfile.linux-image.build\" -t oblivion2xrm:latest \".\"\n# - To start-up the image you can use \"docker-compose up\" OR run the following command:\n# $ docker run -t -dit oblivion2xrm\n#------------------------------------------------------------------------------------------\n\n# Get the Latest base Ubuntu image from Docker Hub\nFROM ubuntu:latest\n\n# Update apps on the base image\nRUN apt-get -y update && apt-get install --no-install-recommends -y \\\n# ----------------------\n# Install Dependencies\n# ----------------------\n# Debugging, good to have a local editor, and git for changes\n    nano \\\n    git \\\n# Build Essentials for the Compiler\n    software-properties-common ca-certificates wget curl ssh \\\n    build-essential \\\n# Build Application Dependencies\n    libyaml-cpp-dev \\\n    libssh-dev \\\n    libboost-all-dev \\\n    libsqlite3-dev \\\n    uuid-dev \\\n    libunittest++-dev \\\n# Terminal Setup - Encodings and Locales needed\n    locales-all \\\n    && apt-get -y autoclean && rm -rf /var/lib/apt/lists/*;\n\n\n# Setup Enviroment Variables for locales\nENV LANG C.UTF-8\nENV LC_ALL C.UTF-8\n\n# Copy the current folder base project to the Docker Container.\nCOPY . /usr/src/Oblivion2-XRM\n\n# Specify the working directory on the Container\nWORKDIR /usr/src/Oblivion2-XRM/linux\nRUN mkdir -p ./Debug\n\n# ----------------------\n# Build The System\n# ----------------------\n\n# Build the SQLite Wrapper Dependency\nRUN make -f SqliteWrapped.mk\n\n# SQLITE Wrapped - Setup Compiled Header File for other Modules to use.\nRUN cat ../sqlitewrap/IError.h ../sqlitewrap/StderrLog.h ../sqlitewrap/SysLogs.h ../sqlitewrap/Database.h ../sqlitewrap/Query.h > ./Debug/libSqliteWrapped.h\n\n# Build the Main XRM Server And Helper Apps Along with Unit Tests\nRUN make -f xrm-menu-convert.mk\nRUN make -f xrm-menu-prompt-convert.mk\nRUN make -f xrm-unittest.mk\nRUN make -f xrm-server.mk\n\n# Switch to the Debug Directory, and copy executables to the Build folder.\nWORKDIR /usr/src/Oblivion2-XRM/linux/Debug\nRUN cp ./xrm-menu-convert ../../build\nRUN cp ./xrm-menu-prompt-convert ../../build\nRUN cp ./xrm-unittest ../../build\nRUN cp ./xrm-server ../../build\n\n# Update permissions to avoid any issues, this runs as root, so should revisit this\n# However, this is a development image/build so not for prodution use.\nWORKDIR /usr/src/Oblivion2-XRM\nRUN chmod 077 * -R\n\n# -------------------------------------------------------------------------------\n# Startup the BBS when the container starts\n# -------------------------------------------------------------------------------\nWORKDIR /usr/src/Oblivion2-XRM/build\nENTRYPOINT [\"./xrm-server\"]"
}