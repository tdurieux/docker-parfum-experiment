{
  "startTime": 1674252162950,
  "endTime": 1674252164048,
  "originalSmells": [
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 57,
        "lineEnd": 57,
        "columnStart": 4,
        "columnEnd": 36
      }
    },
    {
      "rule": "apkAddUseNoCache",
      "position": {
        "lineStart": 15,
        "lineEnd": 15,
        "columnStart": 18,
        "columnEnd": 65
      }
    },
    {
      "rule": "apkAddUseNoCache",
      "position": {
        "lineStart": 18,
        "lineEnd": 18,
        "columnStart": 4,
        "columnEnd": 92
      }
    },
    {
      "rule": "apkAddUseNoCache",
      "position": {
        "lineStart": 19,
        "lineEnd": 19,
        "columnStart": 4,
        "columnEnd": 89
      }
    },
    {
      "rule": "apkAddUseNoCache",
      "position": {
        "lineStart": 54,
        "lineEnd": 54,
        "columnStart": 18,
        "columnEnd": 31
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "###########\n# BUILDER #\n###########\n\n# pull official base image\nFROM python:3.8.3-alpine as builder\n\n# set work directory\nWORKDIR /usr/src/app\n\n# set environment variables\nENV PYTHONDONTWRITEBYTECODE 1\nENV PYTHONUNBUFFERED 1\n\n# install psycopg2 dependencies\nRUN apk update && apk add --no-cache postgresql-dev gcc python3-dev musl-dev\n\n# install Pillow dependencies\nRUN apk --update --no-cache add libxml2-dev libxslt-dev libffi-dev gcc musl-dev libgcc openssl-dev curl\nRUN apk add --no-cache jpeg-dev zlib-dev freetype-dev lcms2-dev openjpeg-dev tiff-dev tk-dev tcl-dev\n\n# lint\n#RUN pip install --upgrade pip\n#RUN pip install flake8\n#COPY . .\n#RUN flake8 --ignore=E501,F401 .\n\n# install dependencies\nCOPY ./requirements.txt .\nRUN pip wheel --no-cache-dir --no-deps --wheel-dir /usr/src/app/wheels -r requirements.txt\n\n\n#########\n# FINAL #\n#########\n\n# pull official base image\nFROM python:3.8.3-alpine\n\n# create directory for the app user\nRUN mkdir -p /home/app\n\n# create the app user\nRUN addgroup -S app && adduser -S app -G app\n\n# create the appropriate directories\nENV HOME=/home/app\nENV APP_HOME=/home/app/web\nRUN mkdir $APP_HOME\nRUN mkdir $APP_HOME/staticfiles\nRUN mkdir $APP_HOME/mediafiles\nWORKDIR $APP_HOME\n\n# install dependencies\nRUN apk update && apk add --no-cache libpq\nCOPY --from=builder /usr/src/app/wheels /wheels\nCOPY --from=builder /usr/src/app/requirements.txt .\nRUN pip install --no-cache-dir --no-cache /wheels/*\n\n# copy entrypoint-prod.sh\nCOPY ./entrypoint.prod.sh $APP_HOME\n\n# copy project\nCOPY . $APP_HOME\n\n# chown all the files to the app user\nRUN chown -R app:app $APP_HOME\n\n# change to the app user\nUSER app\n\n# run entrypoint.prod.sh\nENTRYPOINT [\"/home/app/web/entrypoint.prod.sh\"]\n"
}