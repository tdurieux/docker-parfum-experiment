{
  "startTime": 1674246751435,
  "endTime": 1674246752864,
  "originalSmells": [
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 12,
        "lineEnd": 24,
        "columnStart": 21,
        "columnEnd": 2
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 32,
        "lineEnd": 70,
        "columnStart": 25,
        "columnEnd": 2
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 76,
        "lineEnd": 78,
        "columnStart": 25,
        "columnEnd": 2
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 136,
        "lineEnd": 136,
        "columnStart": 25,
        "columnEnd": 58
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 153,
        "lineEnd": 163,
        "columnStart": 25,
        "columnEnd": 2
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 208,
        "lineEnd": 211,
        "columnStart": 25,
        "columnEnd": 2
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 229,
        "lineEnd": 246,
        "columnStart": 25,
        "columnEnd": 2
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 262,
        "lineEnd": 268,
        "columnStart": 4,
        "columnEnd": 8
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 280,
        "lineEnd": 280,
        "columnStart": 1,
        "columnEnd": 33
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 12,
        "lineEnd": 24,
        "columnStart": 21,
        "columnEnd": 2
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 32,
        "lineEnd": 70,
        "columnStart": 25,
        "columnEnd": 2
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 76,
        "lineEnd": 78,
        "columnStart": 25,
        "columnEnd": 2
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 136,
        "lineEnd": 136,
        "columnStart": 25,
        "columnEnd": 58
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 153,
        "lineEnd": 163,
        "columnStart": 25,
        "columnEnd": 2
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 208,
        "lineEnd": 211,
        "columnStart": 25,
        "columnEnd": 2
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 229,
        "lineEnd": 246,
        "columnStart": 25,
        "columnEnd": 2
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 262,
        "lineEnd": 268,
        "columnStart": 4,
        "columnEnd": 8
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 280,
        "lineEnd": 280,
        "columnStart": 1,
        "columnEnd": 33
      }
    }
  ],
  "repairedSmells": [
    {
      "rule": "aptGetInstallUseY",
      "position": {
        "lineStart": 32,
        "lineEnd": 54,
        "columnStart": 25,
        "columnEnd": 15
      }
    }
  ],
  "repairedDockerfile": "LABEL maintainer=\"Manuel Moos <z-man@users.sf.net>\"\n\n# ###########################\n# common ground\n# ###########################\n\nFROM base as commonground\n\n# record libraries present in base system, install things we know we need\nRUN ls /usr/lib/*.so* /usr/lib/x86_64-linux-gnu/*.so* /usr/lib/i386-linux-gnu/*.so* \\\n           /lib/*.so*     /lib/x86_64-linux-gnu/*.so*     /lib/i386-linux-gnu/*.so* \\ \n    2>/dev/null | sed -e s,.*/,, > /usr/base_library_list && \\\napt-get -y update && apt-get install --no-install-recommends \\\ncurl \\\ng++ \\\ngit \\\nmake \\\nlibboost-dev \\\nlibboost-thread-dev \\\nlibprotobuf-dev \\\n\nlibzthread-dev \\\nprotobuf-compiler \\\nrecode \\\n-y && rm -rf /var/lib/apt/lists/*;\n\n# #####################################\n# client and server build dependencies\n# #####################################\n\nFROM commonground as armabuild_base\n# full build dependencies\nRUN apt-get -y update && apt-get install --no-install-recommends \\\nbison \\\ncurl \\\ndesktop-file-utils \\\nfile \\\ng++ \\\ngit \\\nmake \\\nlibasound2-dev \\\nlibboost-dev \\\nlibboost-thread-dev \\\nlibfile-mimeinfo-perl \\\nlibfreetype6-dev \\\nlibftgl-dev \\\nlibgl1-mesa-dev \\\nlibglew-dev \\\nlibglu1-mesa-dev \\\nlibjpeg-dev \\\nlibmodplug-dev \\\nlibogg-dev \\\nlibpng-dev \\\nlibpulse-dev \\\nlibprotobuf-dev \\\n\n\n\nlibsndio-dev \\\nlibvorbis-dev \\\npkg-config \\\nrecode \\\nlibxcursor-dev \\\nlibxi-dev \\\nlibxinerama-dev \\\nlibxml2 \\\nlibxrandr-dev \\\nlibxv-dev \\\nlibx11-dev \\\nprotobuf-compiler \\\n-y && rm -rf /var/lib/apt/lists/*;\n\n# copy appimage tools\nCOPY appimage/* /usr/bin/\n\n# optional: appstream\nRUN apt-get -y update && apt-get install --no-install-recommends \\\nappstream \\\n-y || true && rm -rf /var/lib/apt/lists/*;\n\nFROM armabuild_base as armabuild\n\n#RUN apt-get -y update\n#RUN apt-get install \\\n#libmikmod2-dev \\\n#libreadline-dev \\\n#libtool \\\n#dh-autoreconf \\\n #dpkg-dev \\\n#libflac-dev \\\n#libfluidsynth-dev \\\n#libmikmod2-dev \\\n#libmpg123-dev \\\n#libopus-dev \\\n#libopusfile-dev \\\n#libogg-dev \\\n #libtool \\\n#libvorbis-dev \\\n#-y\n\n# for debugging, do the manual builds one at a time\n\n# install our version of libxml2\n#COPY build_libxml2.sh .\n#RUN ./build_libxml2.sh libxml2-2.9.10 && rm ./build_libxml2.sh\n\n# install our version of libsdl\n#COPY build_libsdl.sh ./\n#RUN ./build_libsdl.sh SDL2-2.0.4 && rm ./build_libsdl.sh\n\n# install our version of libsdl_image\n#COPY build_libsdl_image.sh .\n#RUN ./build_libsdl_image.sh SDL2_image-2.0.1 && rm ./build_libsdl_image.sh\n\n# install our version of libsdl_mixer\n#COPY build_libsdl_mixer.sh .\n#RUN ./build_libsdl_mixer.sh SDL2_mixer-2.0.1 && rm ./build_libsdl_mixer.sh\n\n# for production: do all manual builds in one go, set up builder user\nCOPY build*.sh *.patch ./\nRUN ./build_libxml2.sh libxml2-2.9.10 && rm ./build_libxml2.sh && \\\n    ./build_libsdl.sh SDL2-2.0.4 && rm ./build_libsdl.sh && \\\n    ./build_libsdl_image.sh SDL2_image-2.0.1 && rm ./build_libsdl_image.sh && \\\n    ./build_libsdl_mixer.sh SDL2_mixer-2.0.1 && rm ./build_libsdl_mixer.sh && \\\n    useradd builder && mkdir -p /home/builder && chown builder:builder /home/builder # && chmod 777 /home/builder\n\n# set up rest of builder user\nWORKDIR /home/builder\nUSER builder\n\n# ###########################\n# hack in zthread-config\n# ###########################\n\n# the source image here must match the steam one\nFROM amd64/ubuntu:16.04 as zthreadsource\nRUN apt-get -y update && apt-get install --no-install-recommends libzthread-dev -y && rm -rf /var/lib/apt/lists/*;\n\nFROM armabuild_base as zthreaddest\nCOPY --from=zthreadsource /usr/bin/zthread-config /usr/bin/\n\nFROM zthreaddest as armabuild_zthreadconfig\n# set up builder user\nRUN useradd builder && mkdir -p /home/builder && chown builder:builder /home/builder # && chmod 777 /home/builder\nWORKDIR /home/builder\nUSER builder\n\n# ###########################\n# debian build dependencies\n# ###########################\n\nFROM armabuild_base as armadeb_base\n# more build dependencies\nRUN apt-get -y update && apt-get install --no-install-recommends \\\ndebhelper \\\ndh-systemd \\\ndevscripts \\\nlibsdl2-dev \\\nlibsdl2-image-dev \\\nlibsdl2-mixer-dev \\\nlibxml2-dev \\\nlptools \\\nxdg-utils \\\n-y && rm -rf /var/lib/apt/lists/*;\n\nFROM armadeb_base as armadeb\n# set up builder user\nRUN useradd builder && mkdir -p /home/builder && chown builder:builder /home/builder # && chmod 777 /home/builder\nWORKDIR /home/builder\nUSER builder\n\n# ###########################\n# bootstrap dependencies (ubuntu base)\n# ###########################\n\nFROM docker:19.03.0 as armaroot_alpine\n\nRUN apk add \\\nautoconf \\\nautomake \\\nbash \\\nbison \\\nboost-dev \\\nboost-thread \\\ngit \\\ng++ \\\nmake \\\nlibxml2-dev \\\nprotobuf-dev \\\npkgconfig \\\npython3 \\\npy3-packaging \\\ntar \\\nrecode \\\nzip \\\n--no-cache\n\n#FROM armaroot_alpine_base AS armaroot_alpine\n# set up builder user\n#RUN useradd builder; mkdir -p /home/builder; chown builder:builder /home/builder # && chmod 777 /home/builder\n#WORKDIR /home/builder\n#USER builder\n\n# ###########################\n# deploy dependencies\n# ###########################\n\nFROM armabuild_base as armadeploy_base\nRUN apt-get -y update && apt-get install --no-install-recommends \\\n0install-core \\\npandoc \\\n-y && rm -rf /var/lib/apt/lists/*;\n\nFROM armadeploy_base as armadeploy\n# set up builder user\nRUN useradd builder && mkdir -p /home/builder && chown builder:builder /home/builder # && chmod 777 /home/builder\nWORKDIR /home/builder\nUSER builder\n# pre-load 0publish and feedlint\nRUN export TERM=linux && \\\n0launch -c 'http://0install.net/2006/interfaces/0publish' --version && \\\n0launch -c 'http://0install.net/2007/interfaces/FeedLint.xml' --version && \\\ngit config --global push.default simple\n\n# ###########################\n# bootstrap dependencies (ubuntu base)\n# ###########################\n\nFROM commonground as bootstrap_ubuntu_base\nRUN apt-get -y update && apt-get install --no-install-recommends \\\nautoconf \\\nautomake \\\n\ng++ \\\ngit \\\nmake \\\nlibboost-dev \\\nlibboost-thread-dev \\\nlibprotobuf-dev \\\nlibxml2-dev \\\nlibzthread-dev \\\npkg-config \\\nprotobuf-compiler \\\npython3 \\\nrecode \\\nzip \\\n-y && rm -rf /var/lib/apt/lists/*;\n\n#FROM bootstrap_ubuntu_base AS bootstrap_ubuntu\n# set up builder user\n#RUN useradd builder; mkdir -p /home/builder; chown builder:builder /home/builder # && chmod 777 /home/builder\n#WORKDIR /home/builder\n#USER builder\n\n# ###########################\n# docker dependencies (ubuntu base)\n# ###########################\n\nFROM bootstrap_ubuntu_base as armaroot_ubuntu_base\n\n# prepare for repository\nRUN apt-get -y update && \\\n    apt-get install --no-install-recommends \\\n      apt-transport-https \\\n      ca-certificates \\\n      curl \\\n      gnupg-agent \\\n      software-properties-common \\\n      -y && rm -rf /var/lib/apt/lists/*;\n\n# set up repository\nRUN   curl -fsSL https://download.docker.com/linux/ubuntu/gpg | apt-key add - && \\\n      apt-key fingerprint 0EBFCD88 | grep \"9DC8 5822 9FC7 DD38 854A  E2D8 8D81 803C 0EBF CD88\" && \\\n      add-apt-repository \\\n        \"deb [arch=amd64] https://download.docker.com/linux/ubuntu \\\n   \t$(lsb_release -cs) \\\n\tstable\"\n\n# install docker\nRUN apt-get update -y && \\\n\tapt-get install --no-install-recommends -y docker-ce-cli && rm -rf /var/lib/apt/lists/*;\n\n# full install would be\n#RUN\tapt-get update -y && \\\n#\tapt-get install -y docker-ce docker-ce-cli containerd.io\n\nFROM armaroot_ubuntu_base AS armaroot_ubuntu\nRUN mkdir -p /home/builder\nWORKDIR /home/builder\n\n# set up builder user, suid docker so we can actually use it\n#RUN chmod u+s /usr/bin/docker && \\\n#RUN  useradd builder && \\\n#     mkdir -p /home/builder && \\\n#     chown builder:builder /home/builder # && chmod 777 /home/builder\n#WORKDIR /home/builder\n#USER builder\n\n# suid on docker is required because there is no safe way to\n# bind-mound the docker control socket as usable by the builder user.\n# so the only other way I can think of to make docker usable from\n# inside the container is to keep everything in it running as root.\n\n"
}