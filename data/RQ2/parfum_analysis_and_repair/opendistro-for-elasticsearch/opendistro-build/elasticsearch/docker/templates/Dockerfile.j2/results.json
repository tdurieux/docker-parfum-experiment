{
  "startTime": 1674253222360,
  "endTime": 1674253224142,
  "originalSmells": [
    {
      "rule": "yumInstallRmVarCacheYum",
      "position": {
        "lineStart": 46,
        "lineEnd": 46,
        "columnStart": 7,
        "columnEnd": 46
      }
    },
    {
      "rule": "yumInstallRmVarCacheYum",
      "position": {
        "lineStart": 142,
        "lineEnd": 142,
        "columnStart": 2,
        "columnEnd": 29
      }
    },
    {
      "rule": "yumInstallRmVarCacheYum",
      "position": {
        "lineStart": 144,
        "lineEnd": 152,
        "columnStart": 2,
        "columnEnd": 23
      }
    },
    {
      "rule": "yumInstallRmVarCacheYum",
      "position": {
        "lineStart": 157,
        "lineEnd": 157,
        "columnStart": 4,
        "columnEnd": 38
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\").\n# You may not use this file except in compliance with the License.\n# A copy of the License is located at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# or in the \"license\" file accompanying this file. This file is distributed\n# on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n# express or implied. See the License for the specific language governing\n# permissions and limitations under the License.\n\n# Description:\n# Dockerfile for building the docker image for open distro for elasticsearch\n#\n# This file was generated from the template at templates/Dockerfile.j2\n\n################################################################################\n# This Dockerfile was generated from the template at templates/Dockerfile.j2\n#\n# Beginning of multi stage Dockerfile\n################################################################################\n\n{% set tarball = 'elasticsearch-oss-%s-linux-x86_64.tar.gz' % elastic_version -%}\n\n{% if artifacts_dir %}\n{% set artifact_repo_url = 'file:///%s' % artifacts_dir -%}\n{% endif %}\n################################################################################\n# Build stage 0 `prep_es_files`:\n# Extract elasticsearch artifact\n# Install required plugins\n# Set gid=0 and make group perms==owner perms\n################################################################################\n\nFROM centos:7 AS prep_es_files\n\nRUN date && echo OD_VERSION {{version_tag}} ES_VERSION {{elastic_version}}\n\nENV PATH /usr/share/elasticsearch/bin:$PATH\n## Old methods, save here for possible revert\n#RUN curl -s  https://download.java.net/java/GA/jdk12.0.2/e482c34c86bd4bf8b56c0b35558996b9/10/GPL/openjdk-12.0.2_linux-x64_bin.tar.gz | tar -C /opt -zxf -\n#ENV JAVA_HOME /opt/jdk-12.0.2\nRUN yum -y update \\\n    && yum -y groupinstall \"Development Tools\" \\\n    && yum install -y unzip glibc.x86_64 cmake \\\n    && yum clean all && rm -rf /var/cache/yum\n\nRUN groupadd -g 1000 elasticsearch && \\\n    adduser -u 1000 -g 1000 -d /usr/share/elasticsearch elasticsearch\n\nUSER 1000\n{% if artifacts_dir %}\nCOPY --chown=1000:0 {{ '%s/' % artifacts_dir }} {{ artifacts_dir }}\n{% endif %}\n\nRUN rm -rf /tmp/plugins && mkdir /tmp/plugins\nADD plugins /tmp/plugins/\n\n################################################################################\n\n# Set WORKDIR here\nWORKDIR /usr/share/elasticsearch\n\n# Download and extract defined ES version.\nRUN curl -fsSL {{ elastic_artifacts_url }}/{{ tarball }} | \\\n    tar zx --strip-components=1\n\nRUN set -ex && for esdirs in config data logs; do \\\n        mkdir -p \"$esdirs\"; \\\n    done\n\n## Related to jdk version in docker, use the bundled one instead of jdk 12 here\nUSER 0\nRUN cp -rp /usr/share/elasticsearch/jdk /opt/jdk\nENV JAVA_HOME /opt/jdk\nENV PATH $PATH:$JAVA_HOME/bin\nRUN java -version && echo CURR_DIR && pwd\n\n# Compile the C-library for kNN\nUSER 1000\nRUN set -ex; \\\n    export KNN_VERSION=`git ls-remote --tags \"https://github.com/opendistro-for-elasticsearch/k-NN\" v* | grep $(echo {{version_tag}} | sed -E \"s/.[0-9]+$//g\") | grep -oh \"v[0-9.]*\" | sort | tail -n 1` \\\n    && git ls-remote --tags https://github.com/opendistro-for-elasticsearch/k-NN.git v* \\\n    && echo KNN_VERSION $KNN_VERSION \\\n    && git clone --recursive --branch $KNN_VERSION https://github.com/opendistro-for-elasticsearch/k-NN.git /usr/share/elasticsearch/k-NN \\\n    && cd /usr/share/elasticsearch/k-NN/jni \\\n    && sed -i 's/-march=native/-march=x86-64/g' external/nmslib/similarity_search/CMakeLists.txt \\\n    && cmake . \\\n    && make \\\n    && mkdir /tmp/jni/ && cp release/*.so /tmp/jni/ && ls -ltr /tmp/jni/ \\\n    && rm -rf /usr/share/elasticsearch/k-NN\n\n# Bust cache for wgets\nENV BUST_CACHE {{ bust_cache }}\n\n# Install the required modules\n#RUN for plugin_path in {{ plugin_url_paths }}; do \\\nRUN for plugin_path in `cat /tmp/plugins/plugins_elasticsearch.list`; do \\\n      elasticsearch-plugin install --batch file:/tmp/plugins/$plugin_path; \\\n    done\n\n# Pull performance analyzer agent(RCA) from the plugin directory out into ESHOME and make the agent executable.\nRUN perf_dir=`ls -p plugins/ | grep performance`; \\\n    rca_dir=`ls -p plugins/$perf_dir | grep rca/`; \\\n    perf_rca_dir=plugins/$perf_dir$rca_dir; \\\n    echo perf_rca_dir $perf_rca_dir; \\\n    if [ -d \"$perf_rca_dir\" ]; then \\\n    mv -v $perf_rca_dir ./ && \\\n    chmod 755 performance-analyzer-rca/pa_bin/performance-analyzer-agent; fi\n\n# Make the certificate installer script executable. This script has to be executed before ES is started.\nRUN security=`ls -p plugins/ | grep security` && \\\n    if [ ! -z \"$security\" ]; then chmod +x plugins/$security/tools/install_demo_configuration.sh; echo \"Security plugin installed\"; \\\n    else echo \"Security plugin is not yet installed\"; fi\n\nCOPY --chown=1000:0 elasticsearch.yml log4j2.properties config/\n\nUSER 0\n\n# Set gid to 0 for opendistroforelasticsearch and make group permission similar to that of user\nRUN chown -R elasticsearch:0 . && \\\n    chmod -R g=u /usr/share/elasticsearch\n\nRUN pfa=`ls -p plugins/ | grep performance` && \\ \n    if [ ! -z \"$pfa\" ]; then chmod 755 plugins/$pfa/pa_bin/performance-analyzer-agent; echo \"Performance Analyzer plugin installed\"; \\\n    else echo \"Performace Analyzer plugin is not yet installed\"; fi\n\nRUN chmod -R 755 /dev/shm\n################################################################################\n# Build stage 1 (the actual opendistroforelasticsearch image):\n# Copy opendistroforelasticsearch from stage 0\n# Add entrypoint\n################################################################################\n\nFROM centos:7\n\nENV ELASTIC_CONTAINER true\n\nRUN \\\n  rpm --rebuilddb && yum clean all && \\\n  yum install -y epel-release && \\\n  yum update -y && \\\n  yum install -y \\\n                  iproute \\\n                  python-setuptools \\\n                  hostname \\\n                  inotify-tools \\\n                  yum-utils \\\n                  which \\\n                  jq \\\n                  rsync && \\\n  yum clean all && \\\n  easy_install supervisor && rm -rf /var/cache/yum\n\nRUN yum update -y && \\\n    yum install -y nc unzip wget which && \\\n    yum clean all && rm -rf /var/cache/yum\nCOPY CENTOS_LICENSING.txt /root\n##COPY --from=prep_es_files --chown=1000:0 /opt/jdk-12.0.2 /opt/jdk-12.0.2\n\nCOPY --from=prep_es_files --chown=1000:0 /opt/jdk /opt/jdk\nENV JAVA_HOME /opt/jdk\nENV PATH $PATH:$JAVA_HOME/bin\nRUN java -version\n\n# Replace OpenJDK's built-in CA certificate keystore with the one from the OS\n# vendor. The latter is superior in several ways.\n##RUN ln -sf /etc/pki/ca-trust/extracted/java/cacerts /opt/jdk-12.0.2/lib/security/cacerts\nRUN ln -sf /etc/pki/ca-trust/extracted/java/cacerts $JAVA_HOME/lib/security/cacerts\n\n\nRUN mkdir /usr/share/elasticsearch && \\\n    groupadd -g 1000 elasticsearch && \\\n    adduser -u 1000 -g 1000 -G 0 -d /usr/share/elasticsearch elasticsearch && \\\n    chmod 0775 /usr/share/elasticsearch && \\\n    chgrp 0 /usr/share/elasticsearch\n\nRUN mkdir -p /usr/share/supervisor/performance_analyzer/ && \\\n    chown 1000 /usr/share/supervisor/performance_analyzer\n\nWORKDIR /usr/share/elasticsearch\nCOPY --from=prep_es_files --chown=1000:0 /usr/share/elasticsearch /usr/share/elasticsearch\nCOPY --from=prep_es_files /tmp/jni/libKNNIndex*.so /usr/lib\n\nENV PATH /usr/share/elasticsearch/bin:$PATH\n\nADD --chown=1000:0 bin/docker-entrypoint.sh /usr/local/bin/docker-entrypoint.sh\n\n# Openshift overrides USER and uses ones with randomly uid>1024 and gid=0\n# Allow ENTRYPOINT (and ES) to run even with a different user\nRUN chgrp 0 /usr/local/bin/docker-entrypoint.sh && \\\n    chmod g=u /etc/passwd && \\\n    chmod 0775 /usr/local/bin/docker-entrypoint.sh\n\nEXPOSE 9200 9300 9600 9650\n\nLABEL org.label-schema.schema-version=\"1.0\" \\\n  org.label-schema.name=\"opendistroforelasticsearch\" \\\n  org.label-schema.version=\"{{ version_tag }}\" \\\n  org.label-schema.url=\"https://opendistro.github.io\" \\\n  org.label-schema.vcs-url=\"https://github.com/opendistro-for-elasticsearch/opendistro-build\" \\\n  org.label-schema.license=\"Apache-2.0\" \\\n  org.label-schema.vendor=\"Amazon\" \\\n  org.label-schema.build-date=\"{{ build_date }}\"\n\nENTRYPOINT [\"/usr/local/bin/docker-entrypoint.sh\"]\n# Dummy overridable parameter parsed by entrypoint\nCMD [\"eswrapper\"]\n\n################################################################################\n# End of multi-stage Dockerfile\n################################################################################\n"
}