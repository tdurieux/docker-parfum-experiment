diff --git a/Users/tdurieux/git/dinghy-experiment/data/evaluation/dockerfiles/cox-automotive/alks-cli/test.Dockerfile b/Users/tdurieux/git/dinghy-experiment/data/evaluation/dockerfile_repair_results/cox-automotive/alks-cli/test.Dockerfile/repaired.Dockerfile
index 47f7734..a5691ac 100644
--- a/Users/tdurieux/git/dinghy-experiment/data/evaluation/dockerfiles/cox-automotive/alks-cli/test.Dockerfile
+++ b/Users/tdurieux/git/dinghy-experiment/data/evaluation/dockerfile_repair_results/cox-automotive/alks-cli/test.Dockerfile/repaired.Dockerfile
@@ -1,10 +1,10 @@
 FROM ubuntu:latest
 
 RUN DEBIAN_FRONTEND=noninteractive apt update
-RUN DEBIAN_FRONTEND=noninteractive apt install -y libsecret-1-dev curl
-RUN curl -L https://raw.githubusercontent.com/tj/n/master/bin/n -o /usr/local/bin/n && chmod +x /usr/local/bin/n
+RUN DEBIAN_FRONTEND=noninteractive apt --no-install-recommends install -y libsecret-1-dev curl && rm -rf /var/lib/apt/lists/*;
+RUN curl -f -L https://raw.githubusercontent.com/tj/n/master/bin/n -o /usr/local/bin/n && chmod +x /usr/local/bin/n
 RUN n v14
-RUN apt install -y gnome-keyring dbus-x11
+RUN apt install --no-install-recommends -y gnome-keyring dbus-x11 && rm -rf /var/lib/apt/lists/*;
 
 # Start the gnome keyring daemon when a bash session is initialized (requires passing --privileged when calling `docker run`)
 RUN echo '[ -z "$GNOME_KEYRING_CONTROL" ] && eval $(echo letmein | gnome-keyring-daemon --unlock | sed -e "s/^/export /g")' > /root/.bashrc
@@ -14,15 +14,15 @@ COPY . /root/alks-cli
 WORKDIR /root/alks-cli
 
 # keytar has a postinstall script that builds a binary and that build process needs some basic permissions to run.
-# When running `npm install` as root, npm switches to the `nobody` user (which has zero permissions) before executing 
-# npm install scripts for security reasons to prevent install scripts from basically being able to run with root access. 
-# This doesn't happen when running as any other user, so when running `npm install` as root you need to pass the 
-# --unsafe-perm=true option to prevent npm from switching user to `nobody`. 
-# 
-# For the record, the permission that keytar needs is the ability to scan for a folder that it's supposed to create, so I 
+# When running `npm install` as root, npm switches to the `nobody` user (which has zero permissions) before executing
+# npm install scripts for security reasons to prevent install scripts from basically being able to run with root access.
+# This doesn't happen when running as any other user, so when running `npm install` as root you need to pass the
+# --unsafe-perm=true option to prevent npm from switching user to `nobody`.
+#
+# For the record, the permission that keytar needs is the ability to scan for a folder that it's supposed to create, so I
 # really hate that we have to do this for something so small but I could find no other way, aside from manually running
 # `npm run build` inside the `node_modules/keytar` folder - Ben W.
-RUN npm install --unsafe-perm=true . -g
+RUN npm install --unsafe-perm=true . -g && npm cache clean --force;
 
 # Start a dbus session and then run /bash/bash as the callback
 ENTRYPOINT [ "dbus-run-session", "--", "/bin/bash" ]
\ No newline at end of file