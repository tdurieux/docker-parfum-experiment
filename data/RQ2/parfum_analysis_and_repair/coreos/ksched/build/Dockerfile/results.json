{
  "startTime": 1674254664866,
  "endTime": 1674254665664,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 18,
        "lineEnd": 18,
        "columnStart": 16,
        "columnEnd": 86
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 18,
        "lineEnd": 18,
        "columnStart": 90,
        "columnEnd": 123
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 7,
        "lineEnd": 7,
        "columnStart": 4,
        "columnEnd": 200
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 7,
        "lineEnd": 7,
        "columnStart": 4,
        "columnEnd": 200
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 7,
        "lineEnd": 7,
        "columnStart": 4,
        "columnEnd": 200
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# This image will setup the container for compiling and running the ksched binary\n# The flowlessly solver is already set up in the location needed by ksched\n\n# Prepare base image\nFROM ubuntu:14.04\nMAINTAINER Haseeb Tariq <haseeb.tariq@coreos.com>\nRUN apt-get update && apt-get --yes --no-install-recommends --force-yes install git-all build-essential cmake libgflags2 libgflags-dev libgoogle-glog0 libgoogle-glog-dev libboost-all-dev curl wget autoconf automake libtool curl make g++ unzip && rm -rf /var/lib/apt/lists/*;\n\n# Set up the solver binary in the location \"/usr/local/bin/flowlessly/\" hardcoded in the placement/solver\nRUN cd /root && git clone https://github.com/hasbro17/Flowlessly.git && cd /root/Flowlessly && cmake . && make\nRUN mkdir -p /usr/local/bin/flowlessly/ && cp /root/Flowlessly/build/flow_scheduler /usr/local/bin/flowlessly/\n\n# Enivronment variables for Go\nRUN echo \"export PATH=$PATH:/usr/local/go/bin:/root/go-workspace/bin\" >> ~/.bashrc\nRUN echo \"export GOPATH=/root/go-workspace\" >> ~/.bashrc\n\n# Install Go and set up workspace for compiling binary\nRUN cd /root && curl -f -O https://storage.googleapis.com/golang/go1.6.linux-amd64.tar.gz && tar -xvf go1.6.linux-amd64.tar.gz && mv go /usr/local && rm go1.6.linux-amd64.tar.gz\nRUN mkdir -p /root/go-workspace/src/github.com/coreos\n\n# Set up kubernetes in go workspace\nRUN mkdir /root/go-workspace/src/k8s.io && cd /root/go-workspace/src/github.com/ && git clone https://github.com/kubernetes/kubernetes.git && mv /root/go-workspace/src/github.com/kubernetes /root/go-workspace/src/k8s.io/\n\n# Set up proto stuff\nRUN cd /root && mkdir proto-bin && cd proto-bin && wget \"https://github.com/google/protobuf/releases/download/v3.0.0/protoc-3.0.0-linux-x86_64.zip\" && unzip protoc-3.0.0-linux-x86_64.zip && cp bin/protoc /usr/local/bin/protoc\n\n# Add an init file to clone and build the ksched repo from the mirror repo github.com/hasbro17/ksched-mirror\n# TODO change the init script to clone github.com/coreos/ksched once the repo is public\nADD init.sh /root/init.sh\n\n# After this point, to run the scheduler you would still need to\n# 1. Run the container on the k8s master node in host networking mode\n# 2. Run the init script to clone and build the scheduler\n"
}