diff --git a/Users/tdurieux/git/dinghy-experiment/data/evaluation/dockerfiles/coreos/ksched/build/Dockerfile b/Users/tdurieux/git/dinghy-experiment/data/evaluation/dockerfile_repair_results/coreos/ksched/build/Dockerfile/repaired.Dockerfile
index c90ed1a..4809618 100644
--- a/Users/tdurieux/git/dinghy-experiment/data/evaluation/dockerfiles/coreos/ksched/build/Dockerfile
+++ b/Users/tdurieux/git/dinghy-experiment/data/evaluation/dockerfile_repair_results/coreos/ksched/build/Dockerfile/repaired.Dockerfile
@@ -4,8 +4,7 @@
 # Prepare base image
 FROM ubuntu:14.04
 MAINTAINER Haseeb Tariq <haseeb.tariq@coreos.com>
-RUN apt-get update
-RUN apt-get --yes --force-yes install git-all build-essential cmake libgflags2 libgflags-dev libgoogle-glog0 libgoogle-glog-dev libboost-all-dev curl wget autoconf automake libtool curl make g++ unzip
+RUN apt-get update && apt-get --yes --no-install-recommends --force-yes install git-all build-essential cmake libgflags2 libgflags-dev libgoogle-glog0 libgoogle-glog-dev libboost-all-dev curl wget autoconf automake libtool curl make g++ unzip && rm -rf /var/lib/apt/lists/*;
 
 # Set up the solver binary in the location "/usr/local/bin/flowlessly/" hardcoded in the placement/solver
 RUN cd /root && git clone https://github.com/hasbro17/Flowlessly.git && cd /root/Flowlessly && cmake . && make
@@ -16,7 +15,7 @@ RUN echo "export PATH=$PATH:/usr/local/go/bin:/root/go-workspace/bin" >> ~/.bash
 RUN echo "export GOPATH=/root/go-workspace" >> ~/.bashrc
 
 # Install Go and set up workspace for compiling binary
-RUN cd /root && curl -O https://storage.googleapis.com/golang/go1.6.linux-amd64.tar.gz && tar -xvf go1.6.linux-amd64.tar.gz && mv go /usr/local
+RUN cd /root && curl -f -O https://storage.googleapis.com/golang/go1.6.linux-amd64.tar.gz && tar -xvf go1.6.linux-amd64.tar.gz && mv go /usr/local && rm go1.6.linux-amd64.tar.gz
 RUN mkdir -p /root/go-workspace/src/github.com/coreos
 
 # Set up kubernetes in go workspace
@@ -29,6 +28,6 @@ RUN cd /root && mkdir proto-bin && cd proto-bin && wget "https://github.com/goog
 # TODO change the init script to clone github.com/coreos/ksched once the repo is public
 ADD init.sh /root/init.sh
 
-# After this point, to run the scheduler you would still need to 
+# After this point, to run the scheduler you would still need to
 # 1. Run the container on the k8s master node in host networking mode
 # 2. Run the init script to clone and build the scheduler