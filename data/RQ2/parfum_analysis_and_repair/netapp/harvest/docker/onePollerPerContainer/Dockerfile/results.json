{
  "startTime": 1674250958490,
  "endTime": 1674250959682,
  "originalSmells": [
    {
      "rule": "apkAddUseNoCache",
      "position": {
        "lineStart": 2,
        "lineEnd": 2,
        "columnStart": 4,
        "columnEnd": 16
      }
    },
    {
      "rule": "apkAddUseNoCache",
      "position": {
        "lineStart": 2,
        "lineEnd": 2,
        "columnStart": 20,
        "columnEnd": 80
      }
    },
    {
      "rule": "apkAddUseNoCache",
      "position": {
        "lineStart": 30,
        "lineEnd": 30,
        "columnStart": 4,
        "columnEnd": 16
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM golang:alpine as golangAlpine\n\nRUN apk add --no-cache curl && apk add --no-cache --virtual build-dependencies build-base gcc git bash\n\nARG INSTALL_DIR=/opt/harvest\nARG BUILD_DIR=/opt/home\nARG VERSION=2.0\nARG RELEASE=nightly\nARG GIT_TOKEN\nARG ASUP_MAKE_TARGET=build\n\n# Set the Current Working Directory inside the container\nWORKDIR $BUILD_DIR\n\nRUN mkdir -p $INSTALL_DIR\n\nCOPY . .\n\nRUN if [[ -n \"$ASUP_MAKE_TARGET\" && -n \"$GIT_TOKEN\" ]]; then \\\nmake build asup VERSION=$VERSION RELEASE=$RELEASE ASUP_MAKE_TARGET=$ASUP_MAKE_TARGET GIT_TOKEN=$GIT_TOKEN ; \\\nelse \\\nmake build VERSION=$VERSION RELEASE=$RELEASE BIN_PLATFORM=alpine ;\\\nfi\n\nRUN cp -a $BUILD_DIR/harvest.yml $INSTALL_DIR/harvest.yml\n\nRUN cp -aR bin $BUILD_DIR/conf $BUILD_DIR/docs $BUILD_DIR/grafana $BUILD_DIR/autosupport $INSTALL_DIR\n\nFROM alpine:latest\n\nRUN apk add --no-cache bash\n\nARG INSTALL_DIR=/opt/harvest\nCOPY --from=golangAlpine $INSTALL_DIR $INSTALL_DIR\nWORKDIR $INSTALL_DIR\n\nENTRYPOINT [\"bin/poller\"]\n#CMD [ \"--config\", \"harvest.yml\", \"--loglevel\", \"2\"]\n"
}