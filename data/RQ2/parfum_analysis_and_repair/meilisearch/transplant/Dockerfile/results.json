{
  "startTime": 1674215762204,
  "endTime": 1674215764554,
  "originalSmells": [
    {
      "rule": "apkAddUseNoCache",
      "position": {
        "lineStart": 4,
        "lineEnd": 4,
        "columnStart": 8,
        "columnEnd": 20
      }
    },
    {
      "rule": "apkAddUseNoCache",
      "position": {
        "lineStart": 5,
        "lineEnd": 5,
        "columnStart": 8,
        "columnEnd": 26
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# Compile\nFROM    alpine:3.14 AS compiler\n\nRUN     apk update --quiet\nRUN apk add --no-cache curl\nRUN apk add --no-cache build-base\n\nRUN     curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y\n\nWORKDIR /meilisearch\n\nCOPY    Cargo.lock .\nCOPY    Cargo.toml .\n\nCOPY    meilisearch-error/Cargo.toml meilisearch-error/\nCOPY    meilisearch-http/Cargo.toml meilisearch-http/\n\nENV     RUSTFLAGS=\"-C target-feature=-crt-static\"\n\n# Create dummy main.rs files for each workspace member to be able to compile all the dependencies\nRUN     find . -type d -name \"meilisearch-*\" | xargs -I{} sh -c 'mkdir {}/src; echo \"fn main() { }\" > {}/src/main.rs;'\n# Use `cargo build` instead of `cargo vendor` because we need to not only download but compile dependencies too\nRUN     $HOME/.cargo/bin/cargo build --release\n# Cleanup dummy main.rs files\nRUN     find . -path \"*/src/main.rs\" -delete\n\nARG     COMMIT_SHA\nARG     COMMIT_DATE\nENV     COMMIT_SHA=${COMMIT_SHA} COMMIT_DATE=${COMMIT_DATE}\n\nCOPY    . .\nRUN     $HOME/.cargo/bin/cargo build --release\n\n# Run\nFROM    alpine:3.14\n\nRUN     apk add -q --no-cache libgcc tini\n\nCOPY    --from=compiler /meilisearch/target/release/meilisearch .\n\nENV     MEILI_HTTP_ADDR 0.0.0.0:7700\nEXPOSE  7700/tcp\n\nENTRYPOINT [\"tini\", \"--\"]\nCMD     ./meilisearch\n"
}