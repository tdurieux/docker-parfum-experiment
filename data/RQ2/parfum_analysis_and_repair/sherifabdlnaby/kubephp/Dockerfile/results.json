{
  "startTime": 1674248952542,
  "endTime": 1674248953546,
  "originalSmells": [
    {
      "rule": "apkAddUseNoCache",
      "position": {
        "lineStart": 67,
        "lineEnd": 67,
        "columnStart": 2,
        "columnEnd": 66
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# ---------------------------------------------- Build Time Arguments --------------------------------------------------\nARG PHP_VERSION=\"8.1\"\nARG PHP_ALPINE_VERSION=\"3.16\"\nARG NGINX_VERSION=\"1.21\"\nARG COMPOSER_VERSION=\"2\"\nARG XDEBUG_VERSION=\"3.1.3\"\nARG COMPOSER_AUTH\nARG APP_BASE_DIR=\".\"\n\n# -------------------------------------------------- Composer Image ----------------------------------------------------\n\nFROM composer:${COMPOSER_VERSION} as composer\n\n# ======================================================================================================================\n#                                                   --- Base ---\n# ---------------  This stage install needed extenstions, plugins and add all needed configurations  -------------------\n# ======================================================================================================================\n\nFROM php:${PHP_VERSION}-fpm-alpine${PHP_ALPINE_VERSION} AS base\n\n# Required Args ( inherited from start of file, or passed at build )\nARG XDEBUG_VERSION\n\n# Maintainer label\nLABEL maintainer=\"sherifabdlnaby@gmail.com\"\n\n# Set SHELL flags for RUN commands to allow -e and pipefail\n# Rationale: https://github.com/hadolint/hadolint/wiki/DL4006\nSHELL [\"/bin/ash\", \"-eo\", \"pipefail\", \"-c\"]\n\n# ------------------------------------- Install Packages Needed Inside Base Image --------------------------------------\n\nRUN RUNTIME_DEPS=\"tini fcgi\"; \\\n    SECURITY_UPGRADES=\"curl\"; \\\n    apk add --no-cache --upgrade ${RUNTIME_DEPS} ${SECURITY_UPGRADES}\n\n# ---------------------------------------- Install / Enable PHP Extensions ---------------------------------------------\n\n\nRUN apk add --no-cache --virtual .build-deps \\\n      $PHPIZE_DEPS  \\\n      libzip-dev    \\\n      icu-dev       \\\n # PHP Extensions --------------------------------- \\\n && docker-php-ext-install -j$(nproc) \\\n      intl        \\\n      opcache     \\\n      pdo_mysql   \\\n      zip         \\\n # Pecl Extensions -------------------------------- \\\n && pecl install apcu && docker-php-ext-enable apcu \\\n # ---------------------------------------------------------------------\n # Install Xdebug at this step to make editing dev image cache-friendly, we delete xdebug from production image later\n && pecl install xdebug-${XDEBUG_VERSION} \\\n # Cleanup ---------------------------------------- \\\n && rm -r /tmp/pear; \\\n # - Detect Runtime Dependencies of the installed extensions. \\\n # - src: https://github.com/docker-library/wordpress/blob/master/latest/php8.0/fpm-alpine/Dockerfile \\\n    out=\"$(php -r 'exit(0);')\"; \\\n\t\t[ -z \"$out\" ]; err=\"$(php -r 'exit(0);' 3>&1 1>&2 2>&3)\"; \\\n\t\t[ -z \"$err\" ]; extDir=\"$(php -r 'echo ini_get(\"extension_dir\");')\"; \\\n\t\t[ -d \"$extDir\" ]; \\\n\t\trunDeps=\"$( \\\n\t\t\tscanelf --needed --nobanner --format '%n#p' --recursive \"$extDir\" \\\n\t\t\t\t| tr ',' '\\n' | sort -u | awk 'system(\"[ -e /usr/local/lib/\" $1 \" ]\") == 0 { next } { print \"so:\" $1 }' \\\n\t\t)\"; \\\n\t\t# Save Runtime Deps in a virtual deps\n\t\tapk add --no-cache --no-network --virtual .php-extensions-rundeps $runDeps; \\\n\t\t# Uninstall Everything we Installed (minus the runtime Deps)\n\t\tapk del --no-network .build-deps; \\\n\t\t# check for output like \"PHP Warning:  PHP Startup: Unable to load dynamic library 'foo' (tried: ...)\n\t\terr=\"$(php --version 3>&1 1>&2 2>&3)\"; [ -z \"$err\" ]\n# -----------------------------------------------\n\n# ------------------------------------------------- Permissions --------------------------------------------------------\n\n# - Clean bundled config/users & recreate them with UID 1000 for docker compatability in dev container.\n# - Create composer directories (since we run as non-root later)\n# - Add Default Config\nRUN deluser --remove-home www-data && adduser -u1000 -D www-data && rm -rf /var/www /usr/local/etc/php-fpm.d/* && \\\n    mkdir -p /var/www/.composer /app && chown -R www-data:www-data /app /var/www/.composer; \\\n# ------------------------------------------------ PHP Configuration ---------------------------------------------------\n    mv \"$PHP_INI_DIR/php.ini-production\" \"$PHP_INI_DIR/php.ini\"\n\n# Add in Base PHP Config\nCOPY docker/php/base-*   $PHP_INI_DIR/conf.d\n\n# ---------------------------------------------- PHP FPM Configuration -------------------------------------------------\n\n# PHP-FPM config\nCOPY docker/fpm/*.conf  /usr/local/etc/php-fpm.d/\n\n\n# --------------------------------------------------- Scripts ----------------------------------------------------------\n\nCOPY docker/entrypoint/*-base docker/post-build/*-base docker/pre-run/*-base \\\n     docker/fpm/healthcheck-fpm\t\t\\\n     docker/scripts/command-loop*\t\\\n     # to\n     /usr/local/bin/\n\nRUN  chmod +x /usr/local/bin/*-base /usr/local/bin/healthcheck-fpm /usr/local/bin/command-loop*\n\n# ---------------------------------------------------- Composer --------------------------------------------------------\n\nCOPY --from=composer /usr/bin/composer /usr/bin/composer\n\n# ----------------------------------------------------- MISC -----------------------------------------------------------\n\nWORKDIR /app\nUSER www-data\n\n# Common PHP Frameworks Env Variables\nENV APP_ENV prod\nENV APP_DEBUG 0\n\n# Validate FPM config (must use the non-root user)\nRUN php-fpm -t\n\n# ---------------------------------------------------- HEALTH ----------------------------------------------------------\n\nHEALTHCHECK CMD [\"healthcheck-fpm\"]\n\n# -------------------------------------------------- ENTRYPOINT --------------------------------------------------------\n\nENTRYPOINT [\"entrypoint-base\"]\nCMD [\"php-fpm\"]\n\n# ======================================================================================================================\n#                                                  --- Vendor ---\n# ---------------  This stage will install composer runtime dependinces and install app dependinces.  ------------------\n# ======================================================================================================================\n\nFROM composer as vendor\n\nARG PHP_VERSION\nARG COMPOSER_AUTH\nARG APP_BASE_DIR\n\n# A Json Object with remote repository token to clone private Repos with composer\n# Reference: https://getcomposer.org/doc/03-cli.md#composer-auth\nENV COMPOSER_AUTH $COMPOSER_AUTH\n\nWORKDIR /app\n\n# Copy Dependencies files\nCOPY $APP_BASE_DIR/composer.json composer.json\nCOPY $APP_BASE_DIR/composer.lock composer.lock\n\n# Set PHP Version of the Image\nRUN composer config platform.php ${PHP_VERSION}; \\\n    # Install Dependencies\n    composer install -n --no-progress --ignore-platform-reqs --no-dev --prefer-dist --no-scripts --no-autoloader\n\n# ======================================================================================================================\n# ==============================================  PRODUCTION IMAGE  ====================================================\n#                                                   --- PROD ---\n# ======================================================================================================================\n\nFROM base AS app\n\nARG APP_BASE_DIR\nUSER root\n\n# Copy Prod Scripts && delete xdebug\nCOPY docker/entrypoint/*-prod docker/post-build/*-prod docker/pre-run/*-prod \\\n     # to\n     /usr/local/bin/\n\nRUN  chmod +x /usr/local/bin/*-prod && pecl uninstall xdebug\n\nUSER www-data\n\n# ----------------------------------------------- Production Config -----------------------------------------------------\n\n# Copy Vendor\nCOPY --chown=www-data:www-data --from=vendor /app/vendor /app/vendor\n\n# Copy App Code\nCOPY --chown=www-data:www-data $APP_BASE_DIR/ .\n\n## Run Composer Install again\n## ( this time to run post-install scripts, autoloader, and post-autoload scripts using one command )\nRUN composer install --optimize-autoloader --apcu-autoloader --no-dev -n --no-progress && \\\n    composer check-platform-reqs && \\\n    post-build-base && post-build-prod\n\nENTRYPOINT [\"entrypoint-prod\"]\nCMD [\"php-fpm\"]\n\n# ======================================================================================================================\n# ==============================================  DEVELOPMENT IMAGE  ===================================================\n#                                                   --- DEV ---\n# ======================================================================================================================\n\nFROM base as app-dev\n\n\nENV APP_ENV dev\nENV APP_DEBUG 1\n\n# Switch root to install stuff\nUSER root\n\n# For Composer Installs\nRUN apk --no-cache add git openssh bash; \\\n # Enable Xdebug\n docker-php-ext-enable xdebug\n\n# For Xdebuger to work, it needs the docker host IP\n# - in Mac AND Windows, `host.docker.internal` resolve to Docker host IP\n# - in Linux, `172.17.0.1` is the host IP\n# By default, `host.docker.internal` is set as extra host in docker-compose.yml, so it also works in Linux without any\n# additional setting. This env is reserved for people who want to customize their own compose configuration.\nENV XDEBUG_CLIENT_HOST=\"host.docker.internal\"\n\n# ---------------------------------------------------- Scripts ---------------------------------------------------------\n\n# Copy Dev Scripts\nCOPY docker/php/dev-*   $PHP_INI_DIR/conf.d/\nCOPY docker/entrypoint/*-dev  docker/post-build/*-dev docker/pre-run/*-dev \\\n     # to\n     /usr/local/bin/\n\nRUN chmod +x /usr/local/bin/*-dev; \\\n    mv \"$PHP_INI_DIR/php.ini-development\" \"$PHP_INI_DIR/php.ini\"\n\nUSER www-data\n# ------------------------------------------------- Entry Point --------------------------------------------------------\n\n# Entrypoints\nENTRYPOINT [\"entrypoint-dev\"]\nCMD [\"php-fpm\"]\n\n\n# ======================================================================================================================\n# ======================================================================================================================\n#                                                  --- NGINX ---\n# ======================================================================================================================\n# ======================================================================================================================\nFROM nginx:${NGINX_VERSION}-alpine AS nginx\n\nRUN rm -rf /var/www/* /etc/nginx/conf.d/* && adduser -u 1000 -D -S -G www-data www-data\nCOPY docker/nginx/nginx-*   /usr/local/bin/\nCOPY docker/nginx/          /etc/nginx/\nRUN chown -R www-data /etc/nginx/ && chmod +x /usr/local/bin/nginx-*\n\n# The PHP-FPM Host\n## Localhost is the sensible default assuming image run on a k8S Pod\nENV PHP_FPM_HOST \"localhost\"\nENV PHP_FPM_PORT \"9000\"\nENV NGINX_LOG_FORMAT \"json\"\n\n# For Documentation\nEXPOSE 8080\n\n# Switch User\nUSER www-data\n\n# Add Healthcheck\nHEALTHCHECK CMD [\"nginx-healthcheck\"]\n\n# Add Entrypoint\nENTRYPOINT [\"nginx-entrypoint\"]\n\n# ======================================================================================================================\n#                                                 --- NGINX PROD ---\n# ======================================================================================================================\n\nFROM nginx AS web\n\nUSER root\n\nRUN SECURITY_UPGRADES=\"curl\"; \\\n    apk add --no-cache --upgrade ${SECURITY_UPGRADES}\n\nUSER www-data\n\n# Copy Public folder + Assets that's going to be served from Nginx\nCOPY --chown=www-data:www-data --from=app /app/public /app/public\n\n# ======================================================================================================================\n#                                                 --- NGINX DEV ---\n# ======================================================================================================================\nFROM nginx AS web-dev\n\nENV NGINX_LOG_FORMAT \"combined\"\n\nCOPY --chown=www-data:www-data docker/nginx/dev/*.conf   /etc/nginx/conf.d/\nCOPY --chown=www-data:www-data docker/nginx/dev/certs/   /etc/nginx/certs/\n"
}