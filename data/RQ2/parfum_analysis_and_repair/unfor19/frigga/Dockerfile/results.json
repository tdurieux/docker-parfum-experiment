{
  "startTime": 1674254243135,
  "endTime": 1674254243743,
  "originalSmells": [
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 28,
        "lineEnd": 28,
        "columnStart": 4,
        "columnEnd": 29
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 29,
        "lineEnd": 29,
        "columnStart": 4,
        "columnEnd": 69
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 36,
        "lineEnd": 36,
        "columnStart": 4,
        "columnEnd": 63
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "### --------------------------------------------------------------------\n### Docker Build Arguments\n### Available only during Docker build - `docker build --build-arg ...`\n### --------------------------------------------------------------------\nARG ALPINE_VERSION=\"3.13\"\nARG PYTHON_VERSION=\"3.9.1\"\nARG APP_NAME=\"frigga\"\nARG APP_PYTHON_USERBASE=\"/frigga\"\nARG APP_USER_NAME=\"appuser\"\nARG APP_USER_ID=\"1000\"\nARG APP_GROUP_NAME=\"appgroup\"\nARG APP_GROUP_ID=\"1000\"\n### --------------------------------------------------------------------\n\n\n### --------------------------------------------------------------------\n### Build Stage\n### --------------------------------------------------------------------\nFROM python:\"$PYTHON_VERSION\"-alpine\"${ALPINE_VERSION}\" as build\n\nARG APP_PYTHON_USERBASE\n\n# Define env vars\nENV PIP_DISABLE_PIP_VERSION_CHECK=1 \\\n    PYTHONUSERBASE=\"$APP_PYTHON_USERBASE\" \\\n    PATH=\"${APP_PYTHON_USERBASE}/bin:${PATH}\"\n\n# Upgrade pip and then install build tools\nRUN pip install --no-cache-dir --upgrade pip && \\\n    pip install --no-cache-dir --upgrade wheel setuptools wheel check-wheel-contents\n\n# Define workdir\nWORKDIR \"$APP_PYTHON_USERBASE\"\n\n# Copy and install requirements - better caching\nCOPY requirements.txt .\nRUN pip install --no-cache-dir -r \"requirements.txt\" --no-warn-script-location\n\n# Copy the application from Docker build context to WORKDIR\nCOPY . .\n\nARG GITHUB_SHA\nENV GITHUB_SHA=${GITHUB_SHA}\n\n# Build the application, validate wheel contents and install the application\nRUN \\\n    python setup.py bdist_wheel && \\\n    find dist/ -type f -name *.whl \\\n    -exec check-wheel-contents {} \\; \\\n    -exec pip install --prefix=\"/dist\" -r \"requirements.txt\" --ignore-installed --no-warn-script-location {} \\;\n\nWORKDIR /dist/\n\n# For debugging the Build Stage\nCMD [\"bash\"]\n### --------------------------------------------------------------------\n\n\n### --------------------------------------------------------------------\n### App Stage\n### --------------------------------------------------------------------\nFROM python:\"$PYTHON_VERSION\"-alpine\"${ALPINE_VERSION}\" as app\n\n# Fetch values from ARGs that were declared at the top of this file\nARG APP_NAME\nARG APP_PYTHON_USERBASE\nARG APP_USER_ID\nARG APP_USER_NAME\nARG APP_GROUP_ID\nARG APP_GROUP_NAME\n\n# Define env vars\nENV HOME=\"$APP_PYTHON_USERBASE\" \\\n    PYTHONUSERBASE=\"$APP_PYTHON_USERBASE\" \\\n    APP_NAME=\"$APP_NAME\" \\\n    PYTHONUNBUFFERED=0\nENV PATH=\"${PYTHONUSERBASE}/bin:${PATH}\"\n\n# Define workdir\nWORKDIR \"$PYTHONUSERBASE\"\n\n# Run as a non-root user\nRUN \\\n    addgroup -g \"${APP_GROUP_ID}\" \"${APP_GROUP_NAME}\" && \\\n    adduser -H -D -u \"$APP_USER_ID\" -G \"$APP_GROUP_NAME\" \"$APP_USER_NAME\" && \\\n    chown -R \"$APP_USER_ID\":\"$APP_GROUP_ID\" \"$PYTHONUSERBASE\"\nUSER \"$APP_USER_NAME\"\n\n# Copy artifacts from Build Stage\nCOPY --from=build --chown=\"$APP_USER_NAME\":\"$APP_GROUP_ID\" /dist/ \"$PYTHONUSERBASE\"/\n\n# The container runs the application, or any other supplied command, such as \"bash\" or \"echo hello\"\n# CMD python -m ${APP_NAME}\n\n# Use ENTRYPOINT instead CMD to force the container to start the application\nENTRYPOINT [\"frigga\"]\n### --------------------------------------------------------------------\n"
}