{
  "startTime": 1674255256234,
  "endTime": 1674255257094,
  "originalSmells": [
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 27,
        "lineEnd": 27,
        "columnStart": 4,
        "columnEnd": 29
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 28,
        "lineEnd": 28,
        "columnStart": 4,
        "columnEnd": 69
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 39,
        "lineEnd": 39,
        "columnStart": 4,
        "columnEnd": 44
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 19,
        "lineEnd": 19,
        "columnStart": 22,
        "columnEnd": 63
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 19,
        "lineEnd": 19,
        "columnStart": 22,
        "columnEnd": 63
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "### --------------------------------------------------------------------\n### Docker Build Arguments\n### Available only during Docker build - `docker build --build-arg ...`\n### --------------------------------------------------------------------\nARG PYTHON_VERSION=\"3.9.0\"\nARG APP_NAME=\"githubsecrets\"\nARG APP_ARTIFACT_DIR=\"artifact/\"\nARG APP_PYTHON_USERBASE=\"/githubsecrets\"\nARG APP_HOME_DIR=\"/app\"\nARG APP_USER_NAME=\"appuser\"\nARG APP_GROUP_ID=\"appgroup\"\n### --------------------------------------------------------------------\n\n\n### --------------------------------------------------------------------\n### Build Stage\n### --------------------------------------------------------------------\nFROM python:$PYTHON_VERSION-slim as build\n\nRUN apt-get update && apt-get install --no-install-recommends -y libdbus-glib-1-dev gcc && rm -rf /var/lib/apt/lists/*;\n\nARG APP_PYTHON_USERBASE\n\n# Define env vars\nENV PIP_DISABLE_PIP_VERSION_CHECK=1\n\n# Upgrade pip and then install build tools\nRUN pip install --no-cache-dir --upgrade pip && \\\n    pip install --no-cache-dir --upgrade wheel setuptools wheel check-wheel-contents\n\n# Define workdir\nWORKDIR $APP_PYTHON_USERBASE\n\n\nENV PYTHONUSERBASE=\"${APP_PYTHON_USERBASE}\"\nENV PATH=\"${APP_PYTHON_USERBASE}/bin:${PATH}\"\n\n# Copy and install requirements - better caching\nCOPY requirements.txt .\nRUN pip install --no-cache-dir --user -r \"requirements.txt\"\n\n# Copy the application from Docker build context to WORKDIR\nCOPY . .\n\n# Build the application, validate wheel contents and install the application\nRUN python setup.py bdist_wheel && \\\n    find dist/ -type f -name *.whl \\\n    -exec check-wheel-contents {} \\; \\\n    -exec pip install --user {} \\;\n\nWORKDIR /dist/\nRUN mv ${APP_PYTHON_USERBASE}/bin ${APP_PYTHON_USERBASE}/lib ./\n\n# For debugging the Build Stage\nCMD [\"bash\"]\n### --------------------------------------------------------------------\n\n\n### --------------------------------------------------------------------\n### App Stage\n### --------------------------------------------------------------------\nFROM python:$PYTHON_VERSION-slim as app\n\n# Fetch values from ARGs that were declared at the top of this file\nARG APP_NAME\nARG APP_ARTIFACT_DIR\nARG APP_PYTHON_USERBASE\nARG APP_HOME_DIR\nARG APP_USER_NAME\nARG APP_GROUP_ID\n\n# Define workdir\nENV HOME=\"${APP_HOME_DIR}\"\nENV PYTHONUSERBASE=\"${APP_PYTHON_USERBASE}\"\nWORKDIR \"${APP_PYTHON_USERBASE}\"\n\n# Define env vars\nENV APP_NAME=\"${APP_NAME}\"\nENV PIP_DISABLE_PIP_VERSION_CHECK=1\nENV PIP_NO_CACHE_DIR=1\nENV PATH=\"${APP_PYTHON_USERBASE}/bin:${PATH}\"\n\n# Run as a non-root user\nRUN mkdir \"${APP_HOME_DIR}\" && \\\n    addgroup \"${APP_GROUP_ID}\" && \\\n    useradd \"${APP_USER_NAME}\" --gid \"${APP_GROUP_ID}\" --home-dir \"${HOME}\" && \\\n    mkdir \"${APP_ARTIFACT_DIR}\" && \\\n    chown -R ${APP_USER_NAME} ${APP_PYTHON_USERBASE} ${HOME}\nUSER \"${APP_USER_NAME}\"\n\n# Copy artifacts from Build Stage\nCOPY --from=build /dist/ \"${APP_PYTHON_USERBASE}\"/\n\n# The container runs the application, or any other supplied command, such as \"bash\" or \"echo hello\"\n# CMD python -m ${APP_NAME}\n\n# Use ENTRYPOINT instead CMD to force the container to start the application\nENTRYPOINT [\"ghs\"]\n### --------------------------------------------------------------------"
}