{
  "startTime": 1674248399796,
  "endTime": 1674248400342,
  "originalSmells": [
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 8,
        "lineEnd": 8,
        "columnStart": 4,
        "columnEnd": 15
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 2,
        "lineEnd": 2,
        "columnStart": 22,
        "columnEnd": 61
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 2,
        "lineEnd": 2,
        "columnStart": 22,
        "columnEnd": 61
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM node:16\n\nRUN apt-get update && apt-get -y --no-install-recommends install -qq --force-yes cron && rm -rf /var/lib/apt/lists/*;\n\nWORKDIR /network-monitoring\n\n# Install app dependencies from package.json. If modules are not included in the package.json file enter a RUN command. E.g. RUN npm install <module-name>\nCOPY package.json /network-monitoring/\nRUN npm install && npm cache clean --force;\n\nCOPY . .\n\n# Copy hello-cron file to the cron.d directory\nCOPY network-monitoring-cron /etc/cron.d/network-monitoring-cron\n\n# Give exeuction rights to entrypoint script\nRUN chmod 0744 /network-monitoring/new_job.sh\n\n# Give execution rights on the cron job\nRUN chmod 0644 /etc/cron.d/network-monitoring-cron\n\n# Apply cron job\nRUN crontab /etc/cron.d/network-monitoring-cron\n\n# Create the log file to be able to run tail\nRUN touch /var/log/cron.log\n\n# Run the command on container startup\nCMD [\"cron\", \"&&\", \"tail\", \"-f\", \"/var/log/cron.log\"]\n"
}