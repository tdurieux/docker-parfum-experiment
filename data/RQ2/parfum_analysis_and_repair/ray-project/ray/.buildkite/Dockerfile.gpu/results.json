{
  "startTime": 1674249712602,
  "endTime": 1674249713675,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 47,
        "lineEnd": 47,
        "columnStart": 4,
        "columnEnd": 35
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 33,
        "lineEnd": 39,
        "columnStart": 4,
        "columnEnd": 26
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 33,
        "lineEnd": 39,
        "columnStart": 4,
        "columnEnd": 26
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 33,
        "lineEnd": 39,
        "columnStart": 4,
        "columnEnd": 26
      }
    }
  ],
  "repairedSmells": [
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 33,
        "lineEnd": 39,
        "columnStart": 4,
        "columnEnd": 26
      }
    }
  ],
  "repairedDockerfile": "FROM nvidia/cuda:11.2.0-cudnn8-devel-ubuntu20.04\n\nARG REMOTE_CACHE_URL\nARG BUILDKITE_PULL_REQUEST\nARG BUILDKITE_COMMIT\nARG BUILDKITE_PULL_REQUEST_BASE_BRANCH\nARG PYTHON=3.7\n\nENV DEBIAN_FRONTEND=noninteractive\nENV TZ=America/Los_Angeles\n\nENV BUILDKITE=true\nENV CI=true\nENV PYTHON=$PYTHON\nENV RAY_USE_RANDOM_PORTS=1\nENV RAY_DEFAULT_BUILD=1\nENV RAY_INSTALL_JAVA=1\nENV BUILDKITE_PULL_REQUEST=${BUILDKITE_PULL_REQUEST}\nENV BUILDKITE_COMMIT=${BUILDKITE_COMMIT}\nENV BUILDKITE_PULL_REQUEST_BASE_BRANCH=${BUILDKITE_PULL_REQUEST_BASE_BRANCH}\n# For wheel build\n# https://github.com/docker-library/docker/blob/master/20.10/docker-entrypoint.sh\nENV DOCKER_TLS_CERTDIR=/certs\nENV DOCKER_HOST=tcp://docker:2376\nENV DOCKER_TLS_VERIFY=1\nENV DOCKER_CERT_PATH=/certs/client\nENV TRAVIS_COMMIT=${BUILDKITE_COMMIT}\nENV BUILDKITE_BAZEL_CACHE_URL=${REMOTE_CACHE_URL}\n\nRUN apt-key adv --fetch-keys https://developer.download.nvidia.com/compute/cuda/repos/ubuntu1804/x86_64/3bf863cc.pub\nRUN apt-key adv --fetch-keys https://developer.download.nvidia.com/compute/machine-learning/repos/ubuntu1804/x86_64/7fa2af80.pub\n\nRUN apt-get update -qq && apt-get upgrade -qq\nRUN apt-get install --no-install-recommends -y -qq \\\n    curl python-is-python3 git build-essential \\\n    sudo unzip unrar apt-utils dialog tzdata wget rsync \\\n    language-pack-en tmux cmake gdb vim htop \\\n    libgtk2.0-dev zlib1g-dev libgl1-mesa-dev maven \\\n    openjdk-8-jre openjdk-8-jdk clang-format-12 jq \\\n    clang-tidy-12 clang-12 && rm -rf /var/lib/apt/lists/*;\n# Make using GCC 9 explicit.\nRUN update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-9 90 --slave /usr/bin/g++ g++ /usr/bin/g++-9 \\\n    --slave /usr/bin/gcov gcov /usr/bin/gcov-9\nRUN ln -s /usr/bin/clang-format-12 /usr/bin/clang-format && \\\n    ln -s /usr/bin/clang-tidy-12 /usr/bin/clang-tidy && \\\n    ln -s /usr/bin/clang-12 /usr/bin/clang\n\nRUN curl -f -o- https://get.docker.com | sh\n\n# System conf for tests\nRUN locale -a\nENV LC_ALL=en_US.utf8\nENV LANG=en_US.utf8\nRUN echo \"ulimit -c 0\" >> /root/.bashrc\n\n# Setup Bazel caches\nRUN (echo \"build --remote_cache=${REMOTE_CACHE_URL}\" >> /root/.bazelrc); \\\n    (if [ \"${BUILDKITE_PULL_REQUEST}\" != \"false\" ]; then (echo \"build --remote_upload_local_results=false\" >> /root/.bazelrc); fi); \\\n    cat /root/.bazelrc\n\nRUN mkdir /ray\nWORKDIR /ray\n\n# Below should be re-run each time\nCOPY . .\nRUN ./ci/ci.sh init\nRUN bash --login -i ./ci/ci.sh build\n\nRUN bash --login -i ./ci/env/install-dependencies.sh\n\n# Run determine test to run\nRUN bash --login -i -c \"python ./ci/pipeline/determine_tests_to_run.py --output=json > affected_set.json\"\nRUN cat affected_set.json\n"
}