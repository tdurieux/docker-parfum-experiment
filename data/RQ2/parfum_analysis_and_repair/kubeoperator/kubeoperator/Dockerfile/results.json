{
  "startTime": 1674255959261,
  "endTime": 1674255960064,
  "originalSmells": [
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 50,
        "lineEnd": 50,
        "columnStart": 7,
        "columnEnd": 32
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 53,
        "lineEnd": 53,
        "columnStart": 77,
        "columnEnd": 125
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 57,
        "lineEnd": 57,
        "columnStart": 110,
        "columnEnd": 154
      }
    },
    {
      "rule": "aptGetInstallUseY",
      "position": {
        "lineStart": 13,
        "lineEnd": 13,
        "columnStart": 22,
        "columnEnd": 43
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 13,
        "lineEnd": 13,
        "columnStart": 22,
        "columnEnd": 43
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 39,
        "lineEnd": 39,
        "columnStart": 4,
        "columnEnd": 49
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 13,
        "lineEnd": 13,
        "columnStart": 22,
        "columnEnd": 43
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 39,
        "lineEnd": 39,
        "columnStart": 4,
        "columnEnd": 49
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM golang:1.16 as stage-build\nLABEL stage=stage-build\nWORKDIR /build/ko\nARG GOPROXY\nARG GOARCH\nARG XPACK\n\nENV GO111MODULE=on \\\n    GOPROXY=$GOPROXY \\\n    CGO_ENABLED=1 \\\n    GOOS=linux \\\n    GOARCH=$GOARCH\n\nRUN apt-get update && apt-get install -y --no-install-recommends unzip && rm -rf /var/lib/apt/lists/*;\n\nCOPY go.mod go.sum ./\nRUN go mod download\n\nRUN cd /tmp \\\n    && wget https://kubeoperator.oss-cn-beijing.aliyuncs.com/go-bindata/v3.1.3/go-bindata.zip \\\n    && unzip go-bindata.zip  \\\n    && cd go-bindata-3.1.3 \\\n    && go build \\\n    && cd go-bindata \\\n    && go build \\\n    && cp go-bindata /go/bin\n\nRUN export PATH=$PATH:$GOPATH/bin\n\nCOPY . .\nRUN make build_server_linux GOARCH=$GOARCH\n\nRUN if [ \"$XPACK\" = \"yes\" ] ; then  cd xpack && sed -i 's/ ..\\/KubeOperator/ \\..\\/..\\/ko/g' go.mod && make build_linux GOARCH=$GOARCH && cp -r dist/* ../dist/  ; fi\n\nFROM ubuntu:20.04\nARG GOARCH\n\nRUN apt-get update && \\\n    apt -y upgrade && \\\n    apt-get -y --no-install-recommends install wget curl git iputils-ping && rm -rf /var/lib/apt/lists/*;\nRUN setcap cap_net_raw=+ep /bin/ping\n\nWORKDIR /usr/local/bin\n\nRUN wget https://fit2cloud-support.oss-cn-beijing.aliyuncs.com/xpack-license/validator_linux_$GOARCH && chmod +x validator_linux_$GOARCH\nRUN wget https://kubeoperator.oss-cn-beijing.aliyuncs.com/ko-encrypt/encrypt_linux_$GOARCH && chmod +x encrypt_linux_$GOARCH\n\nWORKDIR /tmp\n\nRUN wget https://kubeoperator.oss-cn-beijing.aliyuncs.com/polaris/4.1.0/polaris.tar.gz \\\n    && tar zxvf ./polaris.tar.gz \\\n    && mv ./polaris-4.1.0/checks/ /checks && rm ./polaris.tar.gz\n\nRUN wget https://dl.k8s.io/v1.18.6/kubernetes-client-linux-$GOARCH.tar.gz && tar -zvxf kubernetes-client-linux-$GOARCH.tar.gz \\\n    && cp ./kubernetes/client/bin/* /usr/local/bin \\\n    && chmod +x /usr/local/bin/kubectl && rm kubernetes-client-linux-$GOARCH.tar.gz\n\nRUN wget https://kubeoperator.oss-cn-beijing.aliyuncs.com/velero/v1.7.1/velero-v1.7.1-linux-$GOARCH.tar.gz && tar -zxvf velero-v1.7.1-linux-$GOARCH.tar.gz \\\n    && cp ./velero-v1.7.1-linux-$GOARCH/velero /usr/local/bin \\\n    && chmod +x /usr/local/bin/velero && rm velero-v1.7.1-linux-$GOARCH.tar.gz\n\nWORKDIR /\n\nCOPY --from=stage-build /build/ko/dist/etc /etc/\nCOPY --from=stage-build /usr/local/go/lib/time/zoneinfo.zip /opt/zoneinfo.zip\nENV ZONEINFO /opt/zoneinfo.zip\n\nCOPY --from=stage-build /build/ko/dist/etc /etc/\nCOPY --from=stage-build /build/ko/dist/usr /usr/\n\nEXPOSE 8080\n\nCMD [\"ko-server\"]\n"
}