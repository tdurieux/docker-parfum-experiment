{
  "startTime": 1674256314806,
  "endTime": 1674256315881,
  "originalSmells": [
    {
      "rule": "mkdirUsrSrcThenRemove",
      "position": {
        "lineStart": 58,
        "lineEnd": 58,
        "columnStart": 4,
        "columnEnd": 35
      }
    },
    {
      "rule": "mkdirUsrSrcThenRemove",
      "position": {
        "lineStart": 256,
        "lineEnd": 256,
        "columnStart": 4,
        "columnEnd": 35
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 43,
        "lineEnd": 52,
        "columnStart": 1,
        "columnEnd": 20
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 152,
        "lineEnd": 152,
        "columnStart": 4,
        "columnEnd": 86
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 250,
        "lineEnd": 250,
        "columnStart": 4,
        "columnEnd": 102
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "###############################################################################\n# Contains all of the ilios src code for use in other containers\n###############################################################################\nFROM scratch as src\nCOPY composer.* symfony.lock LICENSE /src/app/\nCOPY config /src/app/config/\nCOPY custom /src/app/custom/\nCOPY src /src/app/src/\nCOPY templates /src/app/templates/\nCOPY migrations /src/app/migrations/\nCOPY bin/console /src/app/bin/\nCOPY public/index.php /src/app/public/\nCOPY public/theme-overrides/ /src/app/public/theme-overrides/\n\n###############################################################################\n# Nginx Configured to Run Ilios from an FPM host\n###############################################################################\nFROM nginx:1.19-alpine as nginx\nLABEL maintainer=\"Ilios Project Team <support@iliosproject.org>\"\nCOPY --from=src /src/app /srv/app/\nCOPY docker/nginx.conf.template /etc/nginx/templates/default.conf.template\n\n# Setup PHP servers in ENV so we can round robin easily\nENV FPM_CONTAINERS=fpm:9000\n# Docker builtin nameserver\nENV NGINX_NAMESERVERS=127.0.0.11\n\nARG ILIOS_VERSION=\"v0.1.0\"\nRUN echo ${ILIOS_VERSION} > /srv/app/VERSION\nHEALTHCHECK --interval=5s CMD /usr/bin/nc -vz -w1 localhost 80\n\n###############################################################################\n# Dependencies we need in all PHP containers\n# Production ready composer pacakges installed\n###############################################################################\nFROM php:8.1-fpm as php-base\nLABEL maintainer=\"Ilios Project Team <support@iliosproject.org>\"\nCOPY --from=composer:latest /usr/bin/composer /usr/bin/composer\nCOPY --from=src /src/app /srv/app/\n\n# configure PHP extensions required for Ilios and delete the source files after install\nRUN set -eux; \\\n\tapt-get update; \\\n\tapt-get install --no-install-recommends -y \\\n        libldap2-dev \\\n        libldap-common \\\n        zlib1g-dev \\\n        libicu-dev \\\n        libzip-dev \\\n        libzip4 \\\n        unzip \\\n        acl \\\n        libfcgi-bin; \\\n    docker-php-ext-configure ldap; \\\n    docker-php-ext-install ldap; \\\n    docker-php-ext-install zip; \\\n    docker-php-ext-install pdo_mysql; \\\n    docker-php-ext-install intl; \\\n    mkdir -p /usr/src/php/ext/apcu; rm -rf /usr/src/php/ext/apcu \\\n    curl -fsSL https://pecl.php.net/get/apcu | tar xvz -C \"/usr/src/php/ext/apcu\" --strip 1; \\\n    docker-php-ext-install apcu; \\\n    docker-php-ext-enable apcu; \\\n    pecl install redis \\\n    && docker-php-ext-enable redis; \\\n    docker-php-ext-enable opcache; \\\n    rm -rf /var/lib/apt/lists/*; \\\n    rm -rf /tmp/pear; \\\n    # remove the apt source files to save space\n    apt-get purge libldap2-dev zlib1g-dev libicu-dev -y; \\\n    apt-get autoremove -y;\n\nENV \\\nAPP_ENV=prod \\\nAPP_DEBUG=false \\\nILIOS_DATABASE_URL=\"sqlite:///%kernel.project_dir%/var/data.db\" \\\nILIOS_FILE_SYSTEM_STORAGE_PATH=\"/srv/app/var/tmp/ilios-storage/\" \\\nMAILER_DSN=null://null \\\nILIOS_LOCALE=en \\\nILIOS_SECRET=ThisTokenIsNotSoSecretChangeIt \\\nILIOS_REQUIRE_SECURE_CONNECTION=false \\\nMESSENGER_TRANSPORT_DSN=doctrine://default\n\n# https://getcomposer.org/doc/03-cli.md#composer-allow-superuser\nENV COMPOSER_ALLOW_SUPERUSER=1\n\nENV PATH=\"${PATH}:/root/.composer/vendor/bin\"\nWORKDIR /srv/app\nRUN /usr/bin/touch .env\nRUN set -eux; \\\n\tmkdir -p var/cache var/log; \\\n\tcomposer install --prefer-dist --no-dev --no-progress --no-scripts --no-interaction; \\\n\tcomposer dump-autoload --classmap-authoritative --no-dev; \\\n\tcomposer symfony:dump-env prod; \\\n\tcomposer run-script --no-dev post-install-cmd; \\\n\tchmod +x bin/console; \\\n    bin/console cache:warmup; \\\n    sync\nVOLUME /srv/app/var\n\nARG ILIOS_VERSION=\"v0.1.0\"\nRUN echo ${ILIOS_VERSION} > VERSION\n\nCOPY docker/fpm/symfony.prod.ini $PHP_INI_DIR/conf.d/symfony.ini\nCOPY docker/fpm/ilios.ini $PHP_INI_DIR/conf.d/ilios.ini\nRUN ln -sf \"$PHP_INI_DIR/php.ini-production\" \"$PHP_INI_DIR/php.ini\"\n\nCOPY docker/fpm/zz-docker.conf /usr/local/etc/php-fpm.d/zz-docker.conf\n\nCOPY docker/fpm/docker-entrypoint.sh /usr/local/bin/docker-entrypoint\nRUN chmod +x /usr/local/bin/docker-entrypoint\n\nENTRYPOINT [\"docker-entrypoint\"]\nCMD [\"php-fpm\"]\n\n###############################################################################\n# FPM configured to run ilios\n# Really just a wrapper around php-base, but here in case we need to modify it\n###############################################################################\nFROM php-base as fpm\nLABEL maintainer=\"Ilios Project Team <support@iliosproject.org>\"\nCOPY docker/fpm/docker-healthcheck.sh /usr/local/bin/docker-healthcheck\nRUN chmod +x /usr/local/bin/docker-healthcheck\n\nHEALTHCHECK --timeout=1s --retries=10 CMD [\"docker-healthcheck\"]\n\n###############################################################################\n# FPM configured for development\n# Runs a dev environment and composer dependencies\n###############################################################################\nFROM fpm as fpm-dev\nLABEL maintainer=\"Ilios Project Team <support@iliosproject.org>\"\nENV APP_ENV dev\nENV APP_DEBUG true\nCOPY docker/fpm/symfony.dev.ini $PHP_INI_DIR/conf.d/symfony.ini\nRUN ln -sf \"$PHP_INI_DIR/php.ini-development\" \"$PHP_INI_DIR/php.ini\"\nRUN set -eux; \\\n\tcomposer install --prefer-dist --no-progress --no-interaction; \\\n    rm -f .env.local.php; \\\n    composer run-script --no-dev post-install-cmd; \\\n    bin/console cache:warmup; \\\n    sync\n\n###############################################################################\n# Admin container, allows SSH access so it can be deployed as a bastion server\n###############################################################################\nFROM php-base as admin\nLABEL maintainer=\"Ilios Project Team <support@iliosproject.org>\"\n\n# semi-colon seperates list of github users that can SSH in\nENV GITHUB_ACCOUNT_SSH_USERS=''\n\nRUN apt-get update && \\\n    apt-get install --no-install-recommends -y wget openssh-server sudo netcat default-mysql-client vim telnet && \\\n    rm -rf /var/lib/apt/lists/* && \\\n    apt-get autoremove -y\n\n# This doesn't get created automatically, don't know why\nRUN mkdir /run/sshd\n\n# Remove password based authentication for SSH\nRUN sed -i 's/#PasswordAuthentication yes/PasswordAuthentication no/' /etc/ssh/sshd_config\n\n# Pass environmental variables to SSH sessions\nRUN sed -i 's/#PermitUserEnvironment no/PermitUserEnvironment yes/' /etc/ssh/sshd_config\n\n# allow users in the sudo group to do wo without a password\nRUN /bin/echo \"%sudo ALL=(ALL) NOPASSWD: ALL\" > /etc/sudoers.d/no-password-group\n\nCOPY docker/admin-entrypoint /entrypoint\n\n# expose the ssh port\nEXPOSE 22\nENTRYPOINT /entrypoint\n\nHEALTHCHECK CMD nc -vz 127.0.0.1 22 || exit 1\n\n###############################################################################\n# Single purpose container to updates the frontend\n# Can be run on a schedule as needed and MUST share /srv/app with the\n# fpm and nginx containers in order to provide the shared static files that\n# have to be in sync\n###############################################################################\nFROM php-base as update-frontend\nENTRYPOINT [\"bin/console\"]\nCMD [\"ilios:update-frontend\"]\n\n###############################################################################\n# Single purpose container that starts a message consumer\n# Should be setup to run and restart itself when it shuts down which it will\n# do every hour\n###############################################################################\nFROM php-base as consume-messages\nENTRYPOINT bin/console ilios:wait-for-database; \\\n           bin/console ilios:wait-for-index; \\\n           bin/console messenger:consume async\n\n###############################################################################\n# MySQL configured as needed for Ilios\n###############################################################################\nFROM mysql:8.0-oracle as mysql\nLABEL maintainer=\"Ilios Project Team <support@iliosproject.org>\"\nENV MYSQL_RANDOM_ROOT_PASSWORD yes\nCOPY docker/mysql.cnf /etc/mysql/conf.d/ilios.cnf\nRUN chmod 755 /etc/mysql/conf.d/ilios.cnf\n\n###############################################################################\n# Setup a mysql server running the demo database for use in development\n###############################################################################\nFROM mysql as mysql-demo\nLABEL maintainer=\"Ilios Project Team <support@iliosproject.org>\"\nENV MYSQL_USER ilios\nENV MYSQL_PASSWORD ilios\nENV MYSQL_DATABASE ilios\nENV DEMO_DATABASE_LOCATION https://s3-us-west-2.amazonaws.com/ilios-demo-db.iliosproject.org/latest_db/ilios3_demosite_db.sql.gz\nRUN set -eux; \\\n\tmicrodnf install -y wget; \\\n\tmicrodnf clean all;\nCOPY docker/fetch-demo-database.sh /fetch-demo-database.sh\nRUN /bin/bash /fetch-demo-database.sh\n\n###############################################################################\n# Setup elasticsearch with the plugins we needed\n###############################################################################\nFROM elasticsearch:7.13.1 as elasticsearch\nLABEL maintainer=\"Ilios Project Team <support@iliosproject.org>\"\nRUN bin/elasticsearch-plugin install -b ingest-attachment\n\n###############################################################################\n# Setup redis with needed config\n###############################################################################\nFROM redis:7-alpine as redis\nLABEL maintainer=\"Ilios Project Team <support@iliosproject.org>\"\nCOPY docker/redis/redis.conf /usr/local/etc/redis/redis.conf\nCMD [ \"redis-server\", \"/usr/local/etc/redis/redis.conf\" ]\n\n###############################################################################\n# Our original and still relevant apache based runtime, includes everything in\n# a single container\n###############################################################################\nFROM php:8.1-apache as php-apache\nLABEL maintainer=\"Ilios Project Team <support@iliosproject.org>\"\nCOPY --from=composer:latest /usr/bin/composer /usr/bin/composer\nCOPY --from=src /src/app /var/www/ilios\n#Copy .htaccess files which are not included in src image\nCOPY ./public/.htaccess /var/www/ilios/public\nCOPY ./src/.htaccess /var/www/ilios/src\n\n# configure Apache and the PHP extensions required for Ilios and delete the source files after install\nRUN set -eux; \\\n\tapt-get update; \\\n    apt-get install --no-install-recommends acl libldap2-dev libldap-common zlib1g-dev libicu-dev libzip-dev libzip4 unzip -y; \\\n    docker-php-ext-configure ldap; \\\n    docker-php-ext-install ldap; \\\n    docker-php-ext-install zip; \\\n    docker-php-ext-install pdo_mysql; \\\n    docker-php-ext-install intl; \\\n    mkdir -p /usr/src/php/ext/apcu; rm -rf /usr/src/php/ext/apcu \\\n    curl -fsSL https://pecl.php.net/get/apcu | tar xvz -C \"/usr/src/php/ext/apcu\" --strip 1; \\\n    docker-php-ext-install apcu; \\\n    docker-php-ext-enable opcache; \\\n    pecl install redis \\\n    && docker-php-ext-enable redis; \\\n    # enable modules\n    a2enmod rewrite mpm_prefork deflate headers; \\\n    rm -rf /var/lib/apt/lists/*; \\\n    rm -rf /tmp/pear; \\\n    # remove the apt source files to save space\n    apt-get purge libldap2-dev zlib1g-dev libicu-dev -y; \\\n    apt-get autoremove -y;\n\nCOPY ./docker/php.ini $PHP_INI_DIR\nCOPY ./docker/apache.conf /etc/apache2/sites-available/000-default.conf\n\n# add our own entrypoint scripts\nCOPY docker/php-apache-entrypoint /usr/local/bin/\n\nENV \\\nCOMPOSER_HOME=/tmp \\\nAPP_ENV=prod \\\nAPP_DEBUG=false \\\nMAILER_DSN=null://null \\\nILIOS_DATABASE_URL=\"sqlite:///%kernel.project_dir%/var/data.db\" \\\nILIOS_LOCALE=en \\\nILIOS_SECRET=ThisTokenIsNotSoSecretChangeIt \\\nILIOS_REQUIRE_SECURE_CONNECTION=false \\\nMESSENGER_TRANSPORT_DSN=doctrine://default\n\nWORKDIR /var/www/ilios\nRUN /usr/bin/touch .env\nRUN /usr/bin/composer install \\\n    --prefer-dist \\\n    --no-dev \\\n    --no-progress \\\n    --no-interaction \\\n    --no-suggest \\\n    --classmap-authoritative \\\n    #creates an empty env.php file, real ENV values will control the app\n    && /usr/bin/composer dump-env prod \\\n    && composer run-script --no-dev post-install-cmd\n\nARG ILIOS_VERSION=\"v0.1.0\"\nRUN echo ${ILIOS_VERSION} > VERSION\n\nUSER root\nENTRYPOINT [\"php-apache-entrypoint\"]\nCMD [\"apache2-foreground\"]\nEXPOSE 80\n"
}