{
  "startTime": 1674254793540,
  "endTime": 1674254794765,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 13,
        "lineEnd": 13,
        "columnStart": 7,
        "columnEnd": 107
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 25,
        "lineEnd": 25,
        "columnStart": 7,
        "columnEnd": 90
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 38,
        "lineEnd": 38,
        "columnStart": 7,
        "columnEnd": 91
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 51,
        "lineEnd": 51,
        "columnStart": 7,
        "columnEnd": 90
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 64,
        "lineEnd": 64,
        "columnStart": 7,
        "columnEnd": 125
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 78,
        "lineEnd": 78,
        "columnStart": 7,
        "columnEnd": 105
      }
    },
    {
      "rule": "curlUseHttpsUrl",
      "position": {
        "lineStart": 25,
        "lineEnd": 25,
        "columnStart": 7,
        "columnEnd": 90
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 43,
        "lineEnd": 43,
        "columnStart": 7,
        "columnEnd": 18
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 56,
        "lineEnd": 56,
        "columnStart": 7,
        "columnEnd": 18
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 68,
        "lineEnd": 68,
        "columnStart": 7,
        "columnEnd": 18
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 82,
        "lineEnd": 82,
        "columnStart": 7,
        "columnEnd": 18
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 4,
        "lineEnd": 7,
        "columnStart": 4,
        "columnEnd": 11
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 107,
        "lineEnd": 107,
        "columnStart": 7,
        "columnEnd": 67
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 4,
        "lineEnd": 7,
        "columnStart": 4,
        "columnEnd": 11
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 107,
        "lineEnd": 107,
        "columnStart": 7,
        "columnEnd": 67
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM ubuntu:18.04 as shrimpdemo-build\n\n# Prepare build environment\nRUN apt-get update && \\\n    apt-get -qq --no-install-recommends -y install gcc g++ ruby \\\n    cmake autoconf curl wget libpcre3-dev pkg-config \\\n    libjpeg-dev libpng-dev libgif-dev \\\n    libtool && rm -rf /var/lib/apt/lists/*;\nRUN gem install Mxx_ru\n\nARG NASM_VERSION=2.13.03\nRUN echo \"*** Installing NASM-\"${NASM-VERSION} \\\n    && cd /tmp \\\n    && curl -f -s -O -L https://www.nasm.us/pub/nasm/releasebuilds/${NASM_VERSION}/nasm-${NASM_VERSION}.tar.gz \\\n    && tar xzf nasm-${NASM_VERSION}.tar.gz \\\n    && rm /tmp/nasm-${NASM_VERSION}.tar.gz \\\n    && cd /tmp/nasm-${NASM_VERSION} \\\n    && sh configure \\\n    && make all -j4 \\\n    && make install \\\n    && rm -rf /tmp/nasm-${NASM_VERSION}\n\nARG x265_VERSION=2.8\nRUN echo \"*** Installing x265-\"${x265_VERSION} \\\n    && cd /tmp \\\n    && curl -f -s -O -L https://ftp.videolan.org/pub/videolan/x265/x265_${x265_VERSION}.tar.gz \\\n    && tar xzf x265_${x265_VERSION}.tar.gz \\\n    && rm /tmp/x265_${x265_VERSION}.tar.gz \\\n    && cd /tmp/x265_${x265_VERSION}/build/linux \\\n    && cmake ../../source \\\n    && make -j4 \\\n    && make install \\\n    && rm -rf /tmp/x265_${x265_VERSION}\n\nARG libde265_VERSION=1.0.3\nARG libde265_ARCHIVE=v${libde265_VERSION}\nRUN echo \"*** Installing libde265-\"${libde265_VERSION} \\\n    && cd /tmp \\\n    && curl -f -s -O -L https://github.com/strukturag/libde265/archive/${libde265_ARCHIVE}.zip \\\n    && unzip ${libde265_ARCHIVE}.zip \\\n    && rm /tmp/${libde265_ARCHIVE}.zip \\\n    && cd /tmp/libde265-${libde265_VERSION} \\\n    && ./autogen.sh \\\n    && ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" \\\n    && make -j4 \\\n    && make install \\\n    && rm -rf /tmp/libde265-${libde265_VERSION}\n\nARG libheif_VERSION=1.3.2\nRUN echo \"*** Installing libheif-\"${libheif_VERSION} \\\n    && cd /tmp \\\n    && curl -f -s -O -L https://github.com/strukturag/libheif/archive/v${libheif_VERSION}.zip \\\n    && unzip v${libheif_VERSION}.zip \\\n    && rm /tmp/v${libheif_VERSION}.zip \\\n    && cd /tmp/libheif-${libheif_VERSION} \\\n    && ./autogen.sh \\\n    && ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" \\\n    && make -j4 \\\n    && make install \\\n    && rm -rf /tmp/libheif-${libheif_VERSION}\n\nARG libwebp_VERSION=1.0.0\nRUN echo \"*** Installing libwebp-\"${libwebp_VERSION} \\\n    && cd /tmp \\\n    && curl -f -s -O -L https://storage.googleapis.com/downloads.webmproject.org/releases/webp/libwebp-${libwebp_VERSION}.tar.gz \\\n    && tar xzf libwebp-${libwebp_VERSION}.tar.gz \\\n    && rm /tmp/libwebp-${libwebp_VERSION}.tar.gz \\\n    && cd /tmp/libwebp-${libwebp_VERSION} \\\n    && ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" \\\n    && make -j4 \\\n    && make install \\\n    && rm -rf /tmp/libwebp-${libwebp_VERSION}\n\nARG ImageMagick_VERSION=7.0.7\nARG ImageMagick_PATCH=39\nARG ImageMagick_FullVersion=${ImageMagick_VERSION}-${ImageMagick_PATCH}\nRUN echo \"*** Installing ImageMagick-\"${ImageMagick_FullVersion} \\\n    && cd /tmp \\\n    && curl -f -s -O -L https://github.com/ImageMagick/ImageMagick/archive/${ImageMagick_FullVersion}.tar.gz \\\n    && tar xzf ${ImageMagick_FullVersion}.tar.gz \\\n    && rm /tmp/${ImageMagick_FullVersion}.tar.gz \\\n    && cd /tmp/ImageMagick-${ImageMagick_FullVersion} \\\n    && ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" \\\n    && make -j4 \\\n    && make install \\\n    && ldconfig \\\n    && rm -rf /tmp/ImageMagick-${ImageMagick_FullVersion} \\\n    && convert -version\n\nRUN mkdir /tmp/shrimp-dev\nCOPY externals.rb /tmp/shrimp-dev\nCOPY dev /tmp/shrimp-dev/dev\n\nRUN echo \"*** Building Shrimp ***\" \\\n    && cd /tmp/shrimp-dev \\\n    && mxxruexternals \\\n\t && cd dev \\\n\t && MXX_RU_CPP_TOOLSET=gcc_linux ruby shrimp/app/prj.rb --mxx-cpp-release \\\n\t && cp target/release/shrimp.app /root \\\n\t && cd /root \\\n\t && rm -rf /tmp/shrimp-dev\n\nFROM ubuntu:18.04 as shrimpdemo\n\nARG ImageMagick_VERSION=7.0.7\n\nRUN apt-get update \\\n    && apt-get -qq --no-install-recommends -y install libjpeg8 libpng16-16 libgif7 libgomp1 && rm -rf /var/lib/apt/lists/*;\n\nCOPY --from=shrimpdemo-build /root/shrimp.app /root\n\nCOPY --from=shrimpdemo-build /usr/local/etc/ImageMagick-7 /usr/local/etc/ImageMagick-7\n\nCOPY --from=shrimpdemo-build /usr/local/lib/ImageMagick-${ImageMagick_VERSION} /usr/local/lib/ImageMagick-${ImageMagick_VERSION}\n\nCOPY --from=shrimpdemo-build /usr/local/lib/lib*.so /usr/local/lib/\n\nRUN ldconfig\n\n\n# Shrimp runs on port 80.\nEXPOSE 80\nWORKDIR /root\n\n# Start Shrimp server\nCMD ~/shrimp.app -a 0.0.0.0 -p 80 -i ~/images\n\n"
}