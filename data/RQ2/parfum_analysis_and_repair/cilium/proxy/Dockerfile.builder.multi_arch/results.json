{
  "startTime": 1674255341407,
  "endTime": 1674255342067,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 53,
        "lineEnd": 53,
        "columnStart": 13,
        "columnEnd": 112
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 51,
        "lineEnd": 51,
        "columnStart": 31,
        "columnEnd": 126
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 54,
        "lineEnd": 54,
        "columnStart": 31,
        "columnEnd": 86
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 51,
        "lineEnd": 51,
        "columnStart": 31,
        "columnEnd": 126
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 54,
        "lineEnd": 54,
        "columnStart": 31,
        "columnEnd": 86
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "#\n# Builder dependencies. This takes a long time to build from scratch!\n# Also note that if build fails due to C++ internal error or similar,\n# it is possible that the image build needs more RAM than available by\n# default on non-Linux docker installs.\n#\n# Using cilium-builder as the base to ensure libc etc. are in sync.\n#\n# The base image here should be multi-arched beforehand when used for non-amd64\n# platforms, e.g, arm64 platform.\n#\nFROM quay.io/cilium/cilium-builder:2020-05-05 as builder\n\nLABEL maintainer=\"maintainer@cilium.io\"\n\nARG ARCH=amd64\n\nWORKDIR /go/src/github.com/cilium/cilium/envoy\nCOPY . ./\n\n#\n# Additional Envoy Build dependencies\n#\nRUN apt-get update \\\n    && DEBIAN_FRONTEND=noninteractive apt-get upgrade -y --no-install-recommends \\\n\t&& DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends \\\n\t\tautomake \\\n\t\tcmake \\\n\t\tg++ \\\n\t\tgit \\\n\t\tlibtool \\\n\t\tmake \\\n\t\tninja-build \\\n\t\tpython3 \\\n\t\tpython \\\n\t\twget \\\n\t\tzip \\\n\t&& apt-get clean \\\n\t&& rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*\n\n#\n# Install Bazel\n#\nRUN export BAZEL_VERSION=`cat .bazelversion` \\\n        && if [ \"$ARCH\" = \"amd64\" ] ;then \\\n\t     curl -sfL https://github.com/bazelbuild/bazel/releases/download/${BAZEL_VERSION}/bazel-${BAZEL_VERSION}-installer-linux-x86_64.sh -o bazel-${BAZEL_VERSION}-installer-linux-x86_64.sh \\\n\t     && chmod +x bazel-${BAZEL_VERSION}-installer-linux-x86_64.sh \\\n\t     && ./bazel-${BAZEL_VERSION}-installer-linux-x86_64.sh \\\n\t     && mv /usr/local/bin/bazel /usr/bin \\\n\t     && rm bazel-${BAZEL_VERSION}-installer-linux-x86_64.sh ; \\\n           elif [ \"$ARCH\" = \"arm64\" ] ; then \\\n             apt-get update && DEBIAN_FRONTEND=noninteractive apt-get --no-install-recommends install -y curl unzip zip build-essential openjdk-11-jdk && \\\n             echo \"deb https://download.opensuse.org/repositories/home:/mrostecki:/bazel/xUbuntu_20.04/ /\" > /etc/apt/sources.list.d/bazel.list && \\\n             curl -f -L https://download.opensuse.org/repositories/home:/mrostecki:/bazel/xUbuntu_20.04/Release.key | apt-key add - && \\\n             apt-get update && DEBIAN_FRONTEND=noninteractive apt-get --no-install-recommends install -y bazel; rm -rf /var/lib/apt/lists/*; \\\n           fi\n\n\n#\n# Build and keep the cache\n#\nRUN make BAZEL_BUILD_OPTS=--jobs=5 PKG_BUILD=1 ./bazel-bin/cilium-envoy && rm ./bazel-bin/cilium-envoy\n\n#\n# Absolutely nothing after making envoy deps!\n#\n"
}