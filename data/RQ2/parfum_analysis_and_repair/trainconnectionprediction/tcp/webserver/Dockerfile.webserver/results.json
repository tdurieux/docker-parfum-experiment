{
  "startTime": 1674254443912,
  "endTime": 1674254444754,
  "originalSmells": [
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 39,
        "lineEnd": 39,
        "columnStart": 4,
        "columnEnd": 15
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 30,
        "lineEnd": 30,
        "columnStart": 4,
        "columnEnd": 29
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 30,
        "lineEnd": 30,
        "columnStart": 33,
        "columnEnd": 54
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 32,
        "lineEnd": 32,
        "columnStart": 4,
        "columnEnd": 35
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 16,
        "lineEnd": 16,
        "columnStart": 4,
        "columnEnd": 42
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 17,
        "lineEnd": 17,
        "columnStart": 4,
        "columnEnd": 34
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 54,
        "lineEnd": 54,
        "columnStart": 4,
        "columnEnd": 34
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 16,
        "lineEnd": 16,
        "columnStart": 4,
        "columnEnd": 42
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 17,
        "lineEnd": 17,
        "columnStart": 4,
        "columnEnd": 34
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 54,
        "lineEnd": 54,
        "columnStart": 4,
        "columnEnd": 34
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 16,
        "lineEnd": 16,
        "columnStart": 4,
        "columnEnd": 42
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 17,
        "lineEnd": 17,
        "columnStart": 4,
        "columnEnd": 34
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 54,
        "lineEnd": 54,
        "columnStart": 4,
        "columnEnd": 34
      }
    }
  ],
  "repairedSmells": [
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 15,
        "lineEnd": 15,
        "columnStart": 4,
        "columnEnd": 66
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 16,
        "lineEnd": 16,
        "columnStart": 4,
        "columnEnd": 58
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 53,
        "lineEnd": 53,
        "columnStart": 4,
        "columnEnd": 58
      }
    }
  ],
  "repairedDockerfile": "# To test the container locally you can run:\n# docker build -f webserver/Dockerfile.webserver . -t webserver\n# docker run -p 5000:5000 -v $(pwd)/config_docker.py:/mnt/config/config.py-v $(pwd)/cache:/usr/src/app/cache webserver\n# Though I would suggest that you have a seperate config for docker\n# If not so replace -v $(pwd)/config_docker.py:/mnt/config/config.py with -v $(pwd)/config.py:/mnt/config/config.py\n\n# This build file is from https://www.rockyourcode.com/create-a-multi-stage-docker-build-for-python-flask-and-postgres/\nFROM osgeo/proj:8.2.0 as proj\n\n\n## Base image\nFROM python:3.10 AS compile-image\n\n# Install dependencies (libgeos in order for cartopy to work)\nRUN apt-get update\nRUN apt-get install --no-install-recommends -y gcc build-essential && rm -rf /var/lib/apt/lists/*;\nRUN apt-get install --no-install-recommends -y libgeos-dev && rm -rf /var/lib/apt/lists/*;\n\nCOPY --from=proj  /usr/share/proj/ /usr/share/proj/\nCOPY --from=proj  /usr/include/ /usr/include/\nCOPY --from=proj  /usr/bin/ /usr/bin/\nCOPY --from=proj  /usr/lib/ /usr/lib/\n\n## Virtualenv\nENV VIRTUAL_ENV=/opt/venv\nRUN python3 -m venv $VIRTUAL_ENV\nENV PATH=\"$VIRTUAL_ENV/bin:$PATH\"\n\n## Add and install requirements\nRUN pip install --no-cache-dir --upgrade pip && pip install --no-cache-dir pip-tools\nCOPY ./webserver/requirements.txt requirements.txt\nRUN pip install --no-cache-dir -r requirements.txt\n\n\n# Complie website\nFROM node:14-alpine as node-image\nWORKDIR /app\nCOPY ./webserver/website/package*.json ./\nRUN npm install && npm cache clean --force;\nCOPY ./webserver/website/ .\nRUN npm run build\n\n\n## runtime-image\nFROM python:3.10 AS runtime-image\n\nCOPY --from=proj  /usr/share/proj/ /usr/share/proj/\nCOPY --from=proj  /usr/include/ /usr/include/\nCOPY --from=proj  /usr/bin/ /usr/bin/\nCOPY --from=proj  /usr/lib/ /usr/lib/\n\n# Install dependencies (libgeos in order for cartopy to work)\nRUN apt-get update\nRUN apt-get install --no-install-recommends -y libgeos-dev && rm -rf /var/lib/apt/lists/*;\n\n## Virtualenv\nENV VIRTUAL_ENV=/opt/venv\nRUN python3 -m venv $VIRTUAL_ENV\nENV PATH=\"$VIRTUAL_ENV/bin:$PATH\"\n\n## Copy Python dependencies from build image\nCOPY --from=compile-image /opt/venv /opt/venv\n\n## set working directory\nWORKDIR /usr/src/app\n\n## Add User (a security measure)\n# We have to set a static user id, so that the user can read the files in virtual volumes\n# We use system accounts, but it's just symbolic\nRUN addgroup --system --gid 420 tcp && adduser --system --no-create-home --uid 420 --gid 420 tcp\n\n## Add webserver and librays\nCOPY ./webserver/ /usr/src/app/webserver/\nCOPY ./helpers/ /usr/src/app/helpers/\nCOPY ./database/ /usr/src/app/database/\nCOPY ./data_analysis/ /usr/src/app/data_analysis\nCOPY ./webserverconfig.py /usr/src/app/webserverconfig.py\n\n## Copy website\nCOPY --from=node-image /app/dist /usr/src/app/webserver/website/dist/\n\n## Switch to non-root user\n# for some reason doing this before the copy results in weird permissions # && chmod -R 775 /usr/src/app/\nRUN chown -R tcp:tcp /usr/src/app/\nUSER tcp\n\n## Set environment variables\nENV PYTHONDONTWRITEBYTECODE 1\nENV PYTHONUNBUFFERED 1\nENV PATH=\"/opt/venv/bin:$PATH\"\nENV MPLCONFIGDIR=\"/usr/src/app/cache\"\n\nEXPOSE 5000\n\nCMD [\"gunicorn\",\"-b 0.0.0.0:5000\", \"webserver:create_app()\", \"-t 200\"]\n"
}