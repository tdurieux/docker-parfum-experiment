{
  "startTime": 1674252770685,
  "endTime": 1674252771244,
  "originalSmells": [
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 20,
        "lineEnd": 20,
        "columnStart": 4,
        "columnEnd": 29
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 24,
        "lineEnd": 24,
        "columnStart": 4,
        "columnEnd": 35
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# To test the container locally you can run:\n# DOCKER_BUILDKIT=1 docker build -f update_butler/Dockerfile.update_butler . -t update_butler\n# docker run -v $(pwd)/config.py:/usr/src/app/config.py -v $(pwd)/cache:/usr/src/app/cache update_butler\n# Though I would suggest that you have a seperate config for docker\n# If not so replace -v $(pwd)/config_docker.py:/usr/src/app/config.py with -v $(pwd)/config.py:/usr/src/app/config.py\n\n# This build file is from https://www.rockyourcode.com/create-a-multi-stage-docker-build-for-python-flask-and-postgres/\n\nFROM osgeo/proj:8.2.0 as proj\n\n## Base image\nFROM python:3.10 AS compile-image\n\n## Virtualenv\nENV VIRTUAL_ENV=/opt/venv\nRUN python3 -m venv $VIRTUAL_ENV\nENV PATH=\"$VIRTUAL_ENV/bin:$PATH\"\n\n## Add and install requirements\nRUN pip install --no-cache-dir --upgrade pip\nCOPY ./update_butler/requirements.txt requirements.txt\n# RUN pip install pip-tools\n# RUN pip-compile requirements.txt > requirements.txt && pip-sync\nRUN pip install --no-cache-dir -r requirements.txt\n\n## Build-image\nFROM python:3.10 AS runtime-image\n\nCOPY --from=proj  /usr/share/proj/ /usr/share/proj/\nCOPY --from=proj  /usr/include/ /usr/include/\nCOPY --from=proj  /usr/bin/ /usr/bin/\nCOPY --from=proj  /usr/lib/ /usr/lib/\n\n## Copy Python dependencies from build image\nCOPY --from=compile-image /opt/venv /opt/venv\n\n## Set working directory\nWORKDIR /usr/src/app\n\n## Add User (a security measure)\n# We have to set a static user id, so that the user can read the files in virtual volumes\n# We use system accounts, but it's just symbolic\nRUN addgroup --system --gid 420 tcp && adduser --system --no-create-home --uid 420 --gid 420 tcp\n\n## Add webserver and librays\nCOPY ./helpers/ /usr/src/app/helpers/\nCOPY ./database/ /usr/src/app/database/\nCOPY ./data_analysis/ /usr/src/app/data_analysis/\nCOPY ./rtd_crawler/ /usr/src/app/rtd_crawler/\nCOPY ./update_butler/ /usr/src/app/update_butler/\n# Cache should be mounted seperatly\n# COPY ./cache/ /usr/src/app/cache/\n# Don't leak our secrets, pls\n# COPY ./config.py /usr/src/app/config.py\n\n## Switch to non-root user\n# for some reason doing this before the copy results in weird permissions # && chmod -R 775 /usr/src/app/\nRUN chown -R tcp:tcp /usr/src/app/\nUSER tcp\n\n## Set environment variables\nENV PYTHONDONTWRITEBYTECODE 1\nENV PYTHONUNBUFFERED 1\nENV PATH=\"/opt/venv/bin:$PATH\"\n\nCMD [\"python\", \"update_butler\"]\n"
}