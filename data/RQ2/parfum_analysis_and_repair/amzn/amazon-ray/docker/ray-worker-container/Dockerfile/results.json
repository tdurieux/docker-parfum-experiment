{
  "startTime": 1674215754960,
  "endTime": 1674215756149,
  "originalSmells": [
    {
      "rule": "aptGetInstallUseY",
      "position": {
        "lineStart": 62,
        "lineEnd": 62,
        "columnStart": 16,
        "columnEnd": 39
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 13,
        "lineEnd": 13,
        "columnStart": 7,
        "columnEnd": 37
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 18,
        "lineEnd": 30,
        "columnStart": 12,
        "columnEnd": 13
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 62,
        "lineEnd": 62,
        "columnStart": 16,
        "columnEnd": 39
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 69,
        "lineEnd": 69,
        "columnStart": 7,
        "columnEnd": 72
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 74,
        "lineEnd": 74,
        "columnStart": 7,
        "columnEnd": 37
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "ARG BASE_IMAGE=\"ubuntu:21.04\"\nFROM ${BASE_IMAGE}\n# FROM directive resets ARG\nARG BASE_IMAGE\n# If this arg is not \"autoscaler\" then no autoscaler requirements will be included\nARG AUTOSCALER=\"autoscaler\"\nENV TZ=America/Los_Angeles\n\nENV PATH \"/root/anaconda3/bin:$PATH\"\nARG DEBIAN_FRONTEND=noninteractive\nARG PYTHON_VERSION=3.7.7\n\nRUN apt-get update -y \\\n    && apt-get install --no-install-recommends -y sudo tzdata \\\n    && rm -rf /var/lib/apt/lists/* \\\n    && apt-get clean\n\nRUN apt-get update -y && sudo apt-get upgrade -y \\\n    && sudo apt-get install --no-install-recommends -y \\\n        git \\\n        wget \\\n        cmake \\\n        g++ \\\n        zlib1g-dev \\\n        $(if [ \"$AUTOSCALER\" = \"autoscaler\" ]; then echo \\\n        tmux \\\n        screen \\\n        rsync \\\n        openssh-client \\\n        gnupg; fi) \\\n        unzip \\\n    && wget \\\n        --quiet \"https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh\" \\\n        -O /tmp/miniconda.sh \\\n    && /bin/bash /tmp/miniconda.sh -b -u -p $HOME/anaconda3 \\\n    && $HOME/anaconda3/bin/conda init \\\n    && echo 'export PATH=$HOME/anaconda3/bin:$PATH' >> /root/.bashrc \\\n    && rm /tmp/miniconda.sh \\\n    && $HOME/anaconda3/bin/conda install -y \\\n        libgcc python=$PYTHON_VERSION \\\n    && $HOME/anaconda3/bin/conda clean -y --all \\\n    && $HOME/anaconda3/bin/pip install --no-cache-dir \\\n        flatbuffers \\\n        cython==0.29.0 \\\n        numpy==1.15.4 \\\n        psutil \\\n        blist \\\n    # blist is needed for numpy (which is re-installed when ray is installed)\n    # To avoid the following error on Jenkins:\n    # AttributeError: 'numpy.ufunc' object has no attribute '__module__'\n    && $HOME/anaconda3/bin/pip uninstall -y dask \\\n    # We install cmake temporarily to get psutil, blist\n    && sudo apt-get autoremove -y cmake zlib1g-dev \\\n        # We keep g++ on GPU images, because uninstalling removes CUDA Devel tooling\n        $(if [ \"$BASE_IMAGE\" = \"ubuntu:focal\" ]; then echo \\\n        g++; fi) \\\n    # Either install kubectl or remove wget\n    && ( if [ \"$AUTOSCALER\" = \"autoscaler\" ]; \\\n        then \\\n        wget -O - -q https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key add - \\\n        && sudo touch /etc/apt/sources.list.d/kubernetes.list \\\n        && echo \"deb http://apt.kubernetes.io/ kubernetes-xenial main\" | sudo tee -a /etc/apt/sources.list.d/kubernetes.list \\\n        && sudo apt-get update \\\n        && sudo apt-get install -y --no-install-recommends kubectl; \\\n    else sudo apt-get autoremove -y wget; \\\n    fi; ) \\\n    && sudo rm -rf /var/lib/apt/lists/* \\\n    && sudo apt-get clean\n\nRUN apt-get update -y \\\n    && apt-get install --no-install-recommends -y gnupg curl golang wget make git libseccomp-dev \\\n    #&& . /etc/os-release \\\n    #&& echo \"deb https://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/stable/xUbuntu_${VERSION_ID}/ /\" | tee /etc/apt/sources.list.d/devel:kubic:libcontainers:stable.list \\\n    #&& curl -L https://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/stable/xUbuntu_${VERSION_ID}/Release.key | apt-key add - \\\n    #&& apt-get update \\\n    && apt-get -y --no-install-recommends install podman runc \\\n    && rm -rf /var/lib/apt/lists/* \\\n    && apt-get clean\n\nARG WHEEL_PATH\nARG FIND_LINKS_PATH=\".whl\"\n# For Click\nENV LC_ALL=C.UTF-8\nENV LANG=C.UTF-8\nCOPY $WHEEL_PATH .\nCOPY $FIND_LINKS_PATH $FIND_LINKS_PATH\nRUN $HOME/anaconda3/bin/pip --no-cache-dir install `basename $WHEEL_PATH`[all] \\\n--find-links $FIND_LINKS_PATH && sudo rm `basename $WHEEL_PATH`\n"
}