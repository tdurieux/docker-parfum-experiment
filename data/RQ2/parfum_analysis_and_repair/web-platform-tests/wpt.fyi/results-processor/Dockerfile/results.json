{
  "startTime": 1674252939724,
  "endTime": 1674252940490,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 9,
        "lineEnd": 9,
        "columnStart": 4,
        "columnEnd": 60
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 26,
        "lineEnd": 26,
        "columnStart": 4,
        "columnEnd": 35
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 7,
        "lineEnd": 7,
        "columnStart": 25,
        "columnEnd": 58
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 7,
        "lineEnd": 7,
        "columnStart": 25,
        "columnEnd": 58
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM gcr.io/google-appengine/python\n\n# Default WORKDIR: /home/vmagent/app (/app symlinks to this)\n\n# Install runtime dependencies.\n# python-crcmod for faster gsutil checksum\n# https://cloud.google.com/storage/docs/gsutil/commands/rsync#slow-checksums\nRUN apt-get update -q && apt-get install --no-install-recommends -qy python-crcmod && apt-get clean && rm -rf /var/lib/apt/lists/*;\n# gcloud SDK\nRUN curl -f -s https://sdk.cloud.google.com > install-gcloud.sh\nRUN bash install-gcloud.sh --disable-prompts --install-dir=/opt > /dev/null\nENV PATH=/opt/google-cloud-sdk/bin:$PATH\nRUN gcloud config set disable_usage_reporting false\n# This file caches whether we are running on GCE. When created during the image\n# building process, the file says False (because images aren't built on GCE),\n# which makes gcloud & gsutil fail to use the default service account in this\n# container until the cache expires (~5 minutes).\nRUN rm -f $HOME/.config/gcloud/gce\n\n# Setup and activate virtualenv.\nRUN virtualenv -p python3.7 /env\nENV VIRTUAL_ENV /env\nENV PATH /env/bin:$PATH\n\n# Install Python dependencies.\nADD requirements.txt /app/\nRUN pip install --no-cache-dir -r requirements.txt\n\nADD . /app/\n# The number of workers should always be 2: one for processing tasks, the other\n# for responding health checks. Scale the service by increasing the number of\n# instances instead.\n# The timeout for gunicorn should be significantly longer than the timeout in\n# main.py for liveness checks, because when things go wrong we'd like AppEngine\n# to restart a fresh Docker instance instead of having gunicorn to restart the\n# worker (which would require extra cleanup/recovery logic).\nCMD exec gunicorn --bind :$PORT --timeout 7200 --workers 2 main:app\n"
}