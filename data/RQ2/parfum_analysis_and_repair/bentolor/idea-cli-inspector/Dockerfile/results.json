{
  "startTime": 1674219730636,
  "endTime": 1674219731650,
  "originalSmells": [
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 12,
        "lineEnd": 13,
        "columnStart": 27,
        "columnEnd": 39
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# Docker-based IntelliJ IDEA Inspections using idea-cli-inspector\n#\n# NOTE:\n#  This Dockerfile provides quite a bunch of commented-out statements\n#  as template for creatng your own, derived docker image in case i.e.\n#  you want to use the Ultimate edition or need additional build tools.\n#\nFROM        adoptopenjdk:11-jdk-hotspot\nMAINTAINER  Benjamin Schmid <dockerhub@benjamin-schmid.de>\nLABEL maintainer=\"Benjamin Schmid <dockerhub@benjamin-schmid.de>\"\n\n# First install some basic tools to get them or their latest versions (wget, apt).\nRUN apt-get update -q && apt-get install --no-install-recommends -q -y wget sudo locales zip unzip git \\\n            libxtst6 libxrender1 libxi6 && \\\n    apt-get autoremove --purge -y && apt-get clean && \\\n    rm /var/lib/apt/lists/*.* && rm -fr /tmp/* /var/tmp/*\n\n# The default locale is POSIX which breaks UTF-8 based javac files\n# NOTE:\n#    This only taked effect for user root. Check home/ideainspect/.bashrc for main user\n#    environment variables\nRUN locale-gen en_US.UTF-8 && update-locale en_US.UTF8\nENV LANG \"en_US.UTF-8\"\nENV LC_MESSAGES \"C\"\n\n# Provide a non-privileged user for running IntelliJ\nRUN useradd -mUs /bin/bash ideainspect\n\n# Install SDKMAN!\nRUN sudo -u ideainspect sh -c 'curl -s \"https://get.sdkman.io\" | bash'\n\n# Install Groovy Lang\nRUN sudo -u ideainspect bash -ci 'shopt -s expand_aliases ; sdk install groovy'\n\n# --------------- Install Oracle Java PPAs\n#RUN echo \"deb http://ppa.launchpad.net/webupd8team/java/ubuntu xenial main\" | tee /etc/apt/sources.list.d/webupd8team-java.list\n#RUN apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys EEA14886\n#RUN echo \"deb http://ppa.launchpad.net/linuxuprising/java/ubuntu xenial main\" | tee /etc/apt/sources.list.d/linuxuprising-java.list\n#RUN apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys 73C3DB2A\n#\n# Mark Oracle license accepted\n#RUN echo debconf shared/accepted-oracle-license-v1-1 select true | debconf-set-selections\n#RUN echo debconf shared/accepted-oracle-license-v1-1 seen true | debconf-set-selections\n#RUN echo oracle-java10-installer shared/accepted-oracle-license-v1-1 select true | debconf-set-selections\n#\n# Install Java 8, Java 10, Groovy, mongodb-client & graphviz via package repository\n#RUN apt-get update && \\\n#    apt-get install -y --no-install-recommends \\\n#                       oracle-java8-installer \\\n#                       oracle-java8-set-default \\\n#                       oracle-java8-unlimited-jce-policy \\\n#                       oracle-java10-installer \\\n#                       && \\\n#    apt-get autoremove --purge -y && \\\n#    apt-get clean && \\\n#    rm -fr /var/cache/oracle-jdk* && \\\n#    rm /var/lib/apt/lists/*.* && \\\n#    rm -fr /tmp/* /var/tmp/*\n#\n#\n# --------------- Install Android SDK Tools\n#RUN mkdir -p /srv/android-sdk && cd /srv/android-sdk && \\\n#    wget -nv https://dl.google.com/android/repository/sdk-tools-linux-4333796.zip && \\\n#    echo \"92ffee5a1d98d856634e8b71132e8a95d96c83a63fde1099be3d86df3106def9  sdk-tools-linux-4333796.zip\" | sha256sum -c - && \\\n#    unzip -q sdk-tools-linux-4333796.zip && \\\n#    rm sdk-tools-linux-4333796.zip && \\\n#    find /srv/android-sdk -executable  -type f -exec chmod o+x \\{\\} \\;\n#\n# Install Android SDKs & Build Tools\n#RUN yes | /srv/android-sdk/tools/bin/sdkmanager --licenses > /dev/null && \\\n#    /srv/android-sdk/tools/bin/sdkmanager \"platforms;android-26\" \"platforms;android-27\" \"build-tools;26.0.3\" \"build-tools;27.0.3\" \"platform-tools\" > /dev/null\n#\n# --------------- Install 8.x node - this does an implicit apt-get update!\n#RUN ( curl -sL https://deb.nodesource.com/setup_8.x | bash - ) && \\\n#    apt-get install -y nodejs && \\\n#    apt-get clean && \\\n#    rm /var/lib/apt/lists/*.* && \\\n#    rm -fr /tmp/* /var/tmp/*\n\n#\n# Install IntelliJ IDEA\n#\n# IMPORTANT NOTES\n#\n# 1. V_IDEA_EDITION defines, which edition to build. Use C for Community or U for Ultimate\n#\n# 2. IDEA_CONFDIR is depending on the edition & version:\n#    I.e. its .IdeaIC2018.3 for the 2018.3 Community edition and .IntelliJIdea2018.3 for the same ultimate dition\n#\n# 3. The first run to pre-populate the indexes won't work with ultimate edition, yet. This is due to outstanding features in\n#    the current Docker daemon. See https://github.com/moby/buildkit/issues/763\n#\nENV V_IDEA 2021.1.3\nENV V_IDEA_EDITION C\nENV IDEA_CONFDIR .IntelliJIdea2021.1\n# For Ultimate it is: ENV IDEA_CONFDIR .IntelliJIdea2019.2\nRUN cd /srv && \\\n    wget -nv https://download.jetbrains.com/idea/ideaI$V_IDEA_EDITION-$V_IDEA.tar.gz && \\\n    tar xf ideaI$V_IDEA_EDITION-$V_IDEA.tar.gz && \\\n    ln -s idea-I$V_IDEA_EDITION-* idea.latest && \\\n    # The idea-cli-inspector needs write access to the IDEA bin directory as a hack for scope\n    chown -R ideainspect:ideainspect /srv/idea.latest/bin && \\\n    mkdir /home/ideainspect/$IDEA_CONFDIR && \\\n    ln -s /home/ideainspect/$IDEA_CONFDIR idea.config.latest && \\\n    rm ideaI$V_IDEA_EDITION-$V_IDEA.tar.gz\n\n# Point inspector to the new home\n# NOTE: This only takes effect for user `root`. For user ideainspect check home/ideainspect/.bashrc\nENV IDEA_HOME /srv/idea.latest\n\n# Copy files into container\nCOPY /idea-cli-inspector /\nCOPY /docker-entrypoint.sh /\n\n# Bash Environments & Default IDEA config\nCOPY /home /home\nRUN chown -R ideainspect:ideainspect /home/ideainspect\n\n# Prepare a sample project\nCOPY / /project\nRUN chown -R ideainspect:ideainspect /project\n\n# Initial run to populate index i.e. for JDKs. This should reduce startup times.\n# NOTE: This won't run for Ultimate Edition, as a licence key is missing during execution and current docker\n#       version provide no means to inject secrets during build time. JUST COMMENT IT OUT FOR NOW IN CASE OF ISSUES\nRUN [ \"/docker-entrypoint.sh\", \"-r\", \"/project\" ]\n#\n#\n#  At some time this might work, by providing the idea.key as a secret during build time:\n#RUN --mount=type=secret,id=idea.key,target=/srv/idea.config.latest/idea.key,required,mode=0444 [ \"/docker-entrypoint.sh\", \"-r\",\"/project\" ]\n#\n#  To get this working you need to:\n#   1. add th following line on the very top of this file\n#         # syntax = docker/dockerfile:experimental\n#   2. Build the image with BuildKit enabled:\n#       DOCKER_BUILDKIT=1 docker build --secret id=idea.key,src=/home/ben/.IntelliJIdea2018.3/config/idea.key \\\n#                                          -t bentolor/idea-cli-inspector .\n#\n\n# Provide an entry point script which also creates starts Bamboo with a\n# dedicated user\nENTRYPOINT [\"/docker-entrypoint.sh\"]\n\n# Define default command.\n#CMD [\"--help\"]\n"
}