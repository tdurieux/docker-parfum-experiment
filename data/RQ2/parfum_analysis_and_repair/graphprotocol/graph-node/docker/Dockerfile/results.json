{
  "startTime": 1674250573825,
  "endTime": 1674250574926,
  "originalSmells": [
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 16,
        "lineEnd": 16,
        "columnStart": 25,
        "columnEnd": 49
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 77,
        "lineEnd": 77,
        "columnStart": 7,
        "columnEnd": 58
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 88,
        "lineEnd": 88,
        "columnStart": 7,
        "columnEnd": 52
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 16,
        "lineEnd": 16,
        "columnStart": 25,
        "columnEnd": 49
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 77,
        "lineEnd": 77,
        "columnStart": 7,
        "columnEnd": 58
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 88,
        "lineEnd": 88,
        "columnStart": 7,
        "columnEnd": 52
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# Full build with debuginfo for graph-node\n#\n# The expectation if that the docker build uses the parent directory as PWD\n# by running something like the following\n#   docker build --target STAGE -f docker/Dockerfile .\n\nFROM rust:buster as graph-node-build\n\nARG COMMIT_SHA=unknown\nARG REPO_NAME=unknown\nARG BRANCH_NAME=unknown\nARG TAG_NAME=unknown\n\nADD . /graph-node\n\nRUN cd /graph-node \\\n    && apt-get update && apt-get install --no-install-recommends -y cmake \\\n    && rustup component add rustfmt \\\n    && RUSTFLAGS=\"-g\" cargo install --locked --path node \\\n    && cargo clean \\\n    && objcopy --only-keep-debug /usr/local/cargo/bin/graph-node /usr/local/cargo/bin/graph-node.debug \\\n    && strip -g /usr/local/cargo/bin/graph-node \\\n    && strip -g /usr/local/cargo/bin/graphman \\\n    && cd /usr/local/cargo/bin \\\n    && objcopy --add-gnu-debuglink=graph-node.debug graph-node \\\n    && echo \"REPO_NAME='$REPO_NAME'\" > /etc/image-info \\\n    && echo \"TAG_NAME='$TAG_NAME'\" >> /etc/image-info \\\n    && echo \"BRANCH_NAME='$BRANCH_NAME'\" >> /etc/image-info \\\n    && echo \"COMMIT_SHA='$COMMIT_SHA'\" >> /etc/image-info \\\n    && echo \"CARGO_VERSION='$(cargo --version)'\" >> /etc/image-info \\\n    && echo \"RUST_VERSION='$(rustc --version)'\" >> /etc/image-info && rm -rf /var/lib/apt/lists/*;\n\n# The graph-node runtime image with only the executable\nFROM debian:buster-slim as graph-node\nENV RUST_LOG \"\"\nENV GRAPH_LOG \"\"\nENV EARLY_LOG_CHUNK_SIZE \"\"\nENV ETHEREUM_RPC_PARALLEL_REQUESTS \"\"\nENV ETHEREUM_BLOCK_CHUNK_SIZE \"\"\n\nENV postgres_host \"\"\nENV postgres_user \"\"\nENV postgres_pass \"\"\nENV postgres_db \"\"\n# The full URL to the IPFS node\nENV ipfs \"\"\n# The etherum network(s) to connect to. Set this to a space-separated\n# list of the networks where each entry has the form NAME:URL\nENV ethereum \"\"\n# The role the node should have, one of index-node, query-node, or\n# combined-node\nENV node_role \"combined-node\"\n# The name of this node\nENV node_id \"default\"\n# The ethereum network polling interval  (in milliseconds)\nENV ethereum_polling_interval \"\"\n\n# The location of an optional configuration file for graph-node, as\n# described in ../docs/config.md\n# Using a configuration file is experimental, and the file format may\n# change in backwards-incompatible ways\nENV GRAPH_NODE_CONFIG \"\"\n\n# Disable core dumps; this is useful for query nodes with large caches. Set\n# this to anything to disable coredumps (via 'ulimit -c 0')\nENV disable_core_dumps \"\"\n\n# HTTP port\nEXPOSE 8000\n# WebSocket port\nEXPOSE 8001\n# JSON-RPC port\nEXPOSE 8020\n# Indexing status port\nEXPOSE 8030\n\nRUN apt-get update \\\n    && apt-get install --no-install-recommends -y libpq-dev ca-certificates netcat && rm -rf /var/lib/apt/lists/*;\n\nADD docker/wait_for docker/start /usr/local/bin/\nCOPY --from=graph-node-build /usr/local/cargo/bin/graph-node /usr/local/cargo/bin/graphman /usr/local/bin/\nCOPY --from=graph-node-build /etc/image-info /etc/image-info\nCOPY docker/Dockerfile /Dockerfile\nCMD start\n\n# Debug image to access core dumps\nFROM graph-node-build as graph-node-debug\nRUN apt-get update \\\n    && apt-get install --no-install-recommends -y curl gdb postgresql-client && rm -rf /var/lib/apt/lists/*;\n\nCOPY docker/Dockerfile /Dockerfile\nCOPY docker/bin/* /usr/local/bin/\n"
}