{
  "startTime": 1674219211058,
  "endTime": 1674219212738,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 92,
        "lineEnd": 92,
        "columnStart": 5,
        "columnEnd": 164
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 94,
        "lineEnd": 94,
        "columnStart": 5,
        "columnEnd": 97
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "#\n# Following comments have been shamelessly copied from https://github.com/pytorch/pytorch/blob/master/Dockerfile\n#\n# NOTE: To build this you will need a docker version > 18.06 with\n#       experimental enabled and DOCKER_BUILDKIT=1\n#\n#       If you do not use buildkit you are not going to have a good time\n#\n#       For reference:\n#           https://docs.docker.com/develop/develop-images/build_enhancements\n\nARG BASE_IMAGE=ubuntu:18.04\nARG BUILD_TYPE=dev\nFROM ${BASE_IMAGE} AS compile-image\n\nARG BASE_IMAGE\nARG BRANCH_NAME=master\nARG MACHINE_TYPE=cpu\nARG BRANCH_NAME_KF=master\nENV PYTHONUNBUFFERED TRUE\n\n# Workaround from https://github.com/NVIDIA/nvidia-docker/issues/1632\nRUN apt-key del 7fa2af80\nRUN apt-key adv --fetch-keys https://developer.download.nvidia.com/compute/cuda/repos/ubuntu2004/x86_64/3bf863cc.pub\nRUN apt-key adv --fetch-keys https://developer.download.nvidia.com/compute/machine-learning/repos/ubuntu2004/x86_64/7fa2af80.pub\n\nRUN --mount=type=cache,id=apt-dev,target=/var/cache/apt \\\n  apt-get update && \\\n  DEBIAN_FRONTEND=noninteractive apt-get install --no-install-recommends -y \\\n  fakeroot \\\n  ca-certificates \\\n  dpkg-dev \\\n  g++ \\\n  git \\\n  python3.8-dev \\\n  python3-pip \\\n  build-essential \\\n  openjdk-11-jdk \\\n  curl \\\n  vim \\\n  && rm -rf /var/lib/apt/lists/* \\\n  && cd /tmp \\\n\nRUN update-alternatives --remove python /usr/bin/python \\\n  && update-alternatives --install /usr/bin/python python /usr/bin/python3.8 1\n\n#ADD \"https://www.random.org/cgi-bin/randbyte?nbytes=10&format=h\" skipcache\nRUN python -m pip install -U pip setuptools\n\n# Build Dev Image\nFROM compile-image AS dev-image\nARG MACHINE_TYPE=cpu\nARG CUDA_VERSION\nRUN if [ \"$MACHINE_TYPE\" = \"gpu\" ]; then export USE_CUDA=1; fi \\\n  && git clone https://github.com/pytorch/serve.git \\\n  && cd serve \\\n  && git checkout ${BRANCH_NAME} \\\n  && if [ -z \"$CUDA_VERSION\" ]; then python ts_scripts/install_dependencies.py --environment=dev; else python ts_scripts/install_dependencies.py --environment=dev  --cuda $CUDA_VERSION; fi \\\n  && python ts_scripts/install_from_src.py \\\n  && python -m pip install captum transformers kserve \\\n  && python -m pip install . \\\n  && useradd -m model-server \\\n  && mkdir -p /home/model-server/tmp \\\n  && cp kubernetes/kserve/dockerd-entrypoint.sh /usr/local/bin/dockerd-entrypoint.sh \\\n  && chmod +x /usr/local/bin/dockerd-entrypoint.sh \\\n  && chown -R model-server /home/model-server \\\n  && cp -R kubernetes/kserve/kserve_wrapper /home/model-server/kserve_wrapper \\\n  && cp kubernetes/kserve/config.properties /home/model-server/config.properties \\\n  && mkdir /home/model-server/model-store && chown -R model-server /home/model-server/model-store\n\nEXPOSE 8080 8081 8082\nUSER model-server\nWORKDIR /home/model-server\nENV TEMP=/home/model-server/tmp\nENTRYPOINT [\"/usr/local/bin/dockerd-entrypoint.sh\"]\n\n# Build CodeBuild Image\nFROM compile-image AS codebuild-image\nENV JAVA_VERSION=11 \\\n  JAVA_HOME=\"/usr/lib/jvm/java-11-openjdk-amd64\" \\\n  JDK_HOME=\"/usr/lib/jvm/java-11-openjdk-amd64\" \\\n  JRE_HOME=\"/usr/lib/jvm/java-11-openjdk-amd64\" \\\n  ANT_VERSION=1.10.3 \\\n  MAVEN_HOME=\"/opt/maven\" \\\n  MAVEN_VERSION=3.5.4 \\\n  MAVEN_CONFIG=\"/root/.m2\" \\\n  MAVEN_DOWNLOAD_SHA1=\"22cac91b3557586bb1eba326f2f7727543ff15e3\"\n\n# Install Maven\nRUN set -ex \\\n  && mkdir -p $MAVEN_HOME \\\n  && curl -f -LSso /var/tmp/apache-maven-$MAVEN_VERSION-bin.tar.gz https://apache.org/dist/maven/maven-3/$MAVEN_VERSION/binaries/apache-maven-$MAVEN_VERSION-bin.tar.gz \\\n  && echo \"$MAVEN_DOWNLOAD_SHA1 /var/tmp/apache-maven-$MAVEN_VERSION-bin.tar.gz\" | sha1sum -c - \\\n  && tar xzvf /var/tmp/apache-maven-$MAVEN_VERSION-bin.tar.gz -C $MAVEN_HOME --strip-components=1 \\\n  && update-alternatives --install /usr/bin/mvn mvn /opt/maven/bin/mvn 10000 \\\n  && mkdir -p $MAVEN_CONFIG && rm /var/tmp/apache-maven-$MAVEN_VERSION-bin.tar.gz\n\nFROM ${BUILD_TYPE}-image AS final-image\nARG BUILD_TYPE\nRUN echo \"${BUILD_TYPE} image creation completed\"\n"
}