{
  "startTime": 1674252326107,
  "endTime": 1674252327332,
  "originalSmells": [
    {
      "rule": "wgetUseHttpsUrl",
      "position": {
        "lineStart": 19,
        "lineEnd": 19,
        "columnStart": 4,
        "columnEnd": 78
      }
    },
    {
      "rule": "yumInstallRmVarCacheYum",
      "position": {
        "lineStart": 12,
        "lineEnd": 12,
        "columnStart": 4,
        "columnEnd": 85
      }
    },
    {
      "rule": "yumInstallRmVarCacheYum",
      "position": {
        "lineStart": 13,
        "lineEnd": 13,
        "columnStart": 4,
        "columnEnd": 47
      }
    },
    {
      "rule": "yumInstallRmVarCacheYum",
      "position": {
        "lineStart": 15,
        "lineEnd": 15,
        "columnStart": 4,
        "columnEnd": 184
      }
    },
    {
      "rule": "yumInstallRmVarCacheYum",
      "position": {
        "lineStart": 24,
        "lineEnd": 24,
        "columnStart": 4,
        "columnEnd": 25
      }
    },
    {
      "rule": "yumInstallRmVarCacheYum",
      "position": {
        "lineStart": 27,
        "lineEnd": 27,
        "columnStart": 4,
        "columnEnd": 49
      }
    },
    {
      "rule": "yumInstallRmVarCacheYum",
      "position": {
        "lineStart": 88,
        "lineEnd": 106,
        "columnStart": 4,
        "columnEnd": 12
      }
    },
    {
      "rule": "yumInstallRmVarCacheYum",
      "position": {
        "lineStart": 107,
        "lineEnd": 109,
        "columnStart": 4,
        "columnEnd": 74
      }
    },
    {
      "rule": "yumInstallRmVarCacheYum",
      "position": {
        "lineStart": 138,
        "lineEnd": 138,
        "columnStart": 4,
        "columnEnd": 47
      }
    },
    {
      "rule": "yumInstallRmVarCacheYum",
      "position": {
        "lineStart": 140,
        "lineEnd": 140,
        "columnStart": 4,
        "columnEnd": 184
      }
    },
    {
      "rule": "yumInstallRmVarCacheYum",
      "position": {
        "lineStart": 145,
        "lineEnd": 145,
        "columnStart": 4,
        "columnEnd": 25
      }
    },
    {
      "rule": "yumInstallRmVarCacheYum",
      "position": {
        "lineStart": 149,
        "lineEnd": 149,
        "columnStart": 4,
        "columnEnd": 98
      }
    },
    {
      "rule": "yumInstallRmVarCacheYum",
      "position": {
        "lineStart": 150,
        "lineEnd": 150,
        "columnStart": 4,
        "columnEnd": 30
      }
    },
    {
      "rule": "yumInstallRmVarCacheYum",
      "position": {
        "lineStart": 170,
        "lineEnd": 170,
        "columnStart": 4,
        "columnEnd": 25
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "ARG ROCM_VERSION=3.7\nARG BASE_CUDA_VERSION=10.1\n\nARG GPU_IMAGE=nvidia/cuda:${BASE_CUDA_VERSION}-devel-centos7\nFROM centos:7 as base\n\nENV LC_ALL en_US.UTF-8\nENV LANG en_US.UTF-8\nENV LANGUAGE en_US.UTF-8\n\nARG DEVTOOLSET_VERSION=9\nRUN yum install -y wget curl perl util-linux xz bzip2 git patch which perl zlib-devel && rm -rf /var/cache/yum\nRUN yum install -y yum-utils centos-release-scl && rm -rf /var/cache/yum\nRUN yum-config-manager --enable rhel-server-rhscl-7-rpms\nRUN yum install -y devtoolset-${DEVTOOLSET_VERSION}-gcc devtoolset-${DEVTOOLSET_VERSION}-gcc-c++ devtoolset-${DEVTOOLSET_VERSION}-gcc-gfortran devtoolset-${DEVTOOLSET_VERSION}-binutils && rm -rf /var/cache/yum\nENV PATH=/opt/rh/devtoolset-${DEVTOOLSET_VERSION}/root/usr/bin:$PATH\nENV LD_LIBRARY_PATH=/opt/rh/devtoolset-${DEVTOOLSET_VERSION}/root/usr/lib64:/opt/rh/devtoolset-${DEVTOOLSET_VERSION}/root/usr/lib:$LD_LIBRARY_PATH\n\nRUN wget https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm && \\\n    rpm -ivh epel-release-latest-7.noarch.rpm && \\\n    rm -f epel-release-latest-7.noarch.rpm\n\n# cmake\nRUN yum install -y cmake3 && \\\n    ln -s /usr/bin/cmake3 /usr/bin/cmake && rm -rf /var/cache/yum\n\nRUN yum install -y autoconf aclocal automake make && rm -rf /var/cache/yum\n\nFROM base as openssl\n# Install openssl (this must precede `build python` step)\n# (In order to have a proper SSL module, Python is compiled\n# against a recent openssl [see env vars above], which is linked\n# statically. We delete openssl afterwards.)\nADD ./common/install_openssl.sh install_openssl.sh\nRUN bash ./install_openssl.sh && rm install_openssl.sh\n\nFROM base as python\n# build python\nCOPY manywheel/build_scripts /build_scripts\nADD ./common/install_cpython.sh /build_scripts/install_cpython.sh\nRUN bash build_scripts/build.sh && rm -r build_scripts\n\n# remove unncessary python versions\nRUN rm -rf /opt/python/cp26-cp26m /opt/_internal/cpython-2.6.9-ucs2\nRUN rm -rf /opt/python/cp26-cp26mu /opt/_internal/cpython-2.6.9-ucs4\nRUN rm -rf /opt/python/cp33-cp33m /opt/_internal/cpython-3.3.6\nRUN rm -rf /opt/python/cp34-cp34m /opt/_internal/cpython-3.4.6\n\nFROM base as cuda\nARG BASE_CUDA_VERSION=10.2\n# Install CUDA\nADD ./common/install_cuda.sh install_cuda.sh\nRUN bash ./install_cuda.sh ${BASE_CUDA_VERSION} && rm install_cuda.sh\n\nFROM base as intel\n# MKL\nADD ./common/install_mkl.sh install_mkl.sh\nRUN bash ./install_mkl.sh && rm install_mkl.sh\n\n# EPEL for cmake\nFROM base as patchelf\n# Install patchelf\nADD ./common/install_patchelf.sh install_patchelf.sh\nRUN bash ./install_patchelf.sh && rm install_patchelf.sh\nRUN cp $(which patchelf) /patchelf\n\nFROM base as magma\nARG BASE_CUDA_VERSION=10.2\n# Install magma\nADD ./common/install_magma.sh install_magma.sh\nRUN bash ./install_magma.sh ${BASE_CUDA_VERSION} && rm install_magma.sh\n\nFROM base as jni\n# Install java jni header\nADD ./common/install_jni.sh install_jni.sh\nADD ./java/jni.h jni.h\nRUN bash ./install_jni.sh && rm install_jni.sh\n\nFROM base as libpng\n# Install libpng\nADD ./common/install_libpng.sh install_libpng.sh\nRUN bash ./install_libpng.sh && rm install_libpng.sh\n\nFROM ${GPU_IMAGE} as common\nENV LC_ALL en_US.UTF-8\nENV LANG en_US.UTF-8\nENV LANGUAGE en_US.UTF-8\nRUN yum install -y \\\n        aclocal \\\n        autoconf \\\n        automake \\\n        bison \\\n        bzip2 \\\n        curl \\\n        diffutils \\\n        file \\\n        git \\\n        make \\\n        patch \\\n        perl \\\n        unzip \\\n        util-linux \\\n        wget \\\n        which \\\n        xz \\\n        yasm && rm -rf /var/cache/yum\nRUN yum install -y \\\n    https://repo.ius.io/ius-release-el7.rpm \\\n    https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm && rm -rf /var/cache/yum\nRUN yum swap -y git git236-core\n# git236+ would refuse to run git commands in repos owned by other users\n# Which causes version check to fail, as pytorch repo is bind-mounted into the image\n# Override this behaviour by treating every folder as safe\n# For more details see https://github.com/pytorch/pytorch/issues/78659#issuecomment-1144107327\nRUN git config --global --add safe.directory \"*\"\n\nENV SSL_CERT_FILE=/opt/_internal/certs.pem\n# Install LLVM version\nCOPY --from=pytorch/llvm:9.0.1 /opt/llvm                             /opt/llvm\nCOPY --from=pytorch/llvm:9.0.1 /opt/llvm_no_cxx11_abi                /opt/llvm_no_cxx11_abi\nCOPY --from=openssl            /opt/openssl                          /opt/openssl\nCOPY --from=python             /opt/python                           /opt/python\nCOPY --from=python             /opt/_internal                        /opt/_internal\nCOPY --from=python             /opt/python/cp37-cp37m/bin/auditwheel /usr/local/bin/auditwheel\nCOPY --from=intel              /opt/intel                            /opt/intel\nCOPY --from=patchelf           /usr/local/bin/patchelf               /usr/local/bin/patchelf\nCOPY --from=jni                /usr/local/include/jni.h              /usr/local/include/jni.h\nCOPY --from=libpng             /usr/local/bin/png*                   /usr/local/bin/\nCOPY --from=libpng             /usr/local/bin/libpng*                /usr/local/bin/\nCOPY --from=libpng             /usr/local/include/png*               /usr/local/include/\nCOPY --from=libpng             /usr/local/include/libpng*            /usr/local/include/\nCOPY --from=libpng             /usr/local/lib/libpng*                /usr/local/lib/\nCOPY --from=libpng             /usr/local/lib/pkgconfig              /usr/local/lib/pkgconfig\n\nFROM common as cpu_final\nARG BASE_CUDA_VERSION=10.1\nARG DEVTOOLSET_VERSION=9\nRUN yum install -y yum-utils centos-release-scl && rm -rf /var/cache/yum\nRUN yum-config-manager --enable rhel-server-rhscl-7-rpms\nRUN yum install -y devtoolset-${DEVTOOLSET_VERSION}-gcc devtoolset-${DEVTOOLSET_VERSION}-gcc-c++ devtoolset-${DEVTOOLSET_VERSION}-gcc-gfortran devtoolset-${DEVTOOLSET_VERSION}-binutils && rm -rf /var/cache/yum\nENV PATH=/opt/rh/devtoolset-${DEVTOOLSET_VERSION}/root/usr/bin:$PATH\nENV LD_LIBRARY_PATH=/opt/rh/devtoolset-${DEVTOOLSET_VERSION}/root/usr/lib64:/opt/rh/devtoolset-${DEVTOOLSET_VERSION}/root/usr/lib:$LD_LIBRARY_PATH\n\n# cmake\nRUN yum install -y cmake3 && \\\n    ln -s /usr/bin/cmake3 /usr/bin/cmake && rm -rf /var/cache/yum\n\n# ninja\nRUN yum install -y http://repo.okay.com.mx/centos/7/x86_64/release/okay-release-1-5.el7.noarch.rpm && rm -rf /var/cache/yum\nRUN yum install -y ninja-build && rm -rf /var/cache/yum\n\nFROM cpu_final as cuda_final\nRUN rm -rf /usr/local/cuda-${BASE_CUDA_VERSION}\nCOPY --from=cuda     /usr/local/cuda-${BASE_CUDA_VERSION}  /usr/local/cuda-${BASE_CUDA_VERSION}\nCOPY --from=magma    /usr/local/cuda-${BASE_CUDA_VERSION}  /usr/local/cuda-${BASE_CUDA_VERSION}\n\nFROM common as rocm_final\nARG ROCM_VERSION=3.7\nARG PYTORCH_ROCM_ARCH\nENV PYTORCH_ROCM_ARCH ${PYTORCH_ROCM_ARCH}\n# Install ROCm\nADD ./common/install_rocm.sh install_rocm.sh\nRUN ROCM_VERSION=${ROCM_VERSION} bash ./install_rocm.sh && rm install_rocm.sh\nADD ./common/install_rocm_drm.sh install_rocm_drm.sh\nRUN bash ./install_rocm_drm.sh && rm install_rocm_drm.sh\nADD ./common/install_rocm_magma.sh install_rocm_magma.sh\nRUN bash ./install_rocm_magma.sh && rm install_rocm_magma.sh\n# cmake is already installed inside the rocm base image, but both 2 and 3 exist\n# cmake3 is needed for the later MIOpen custom build, so that step is last.\nRUN yum install -y cmake3 && \\\n    rm -f /usr/bin/cmake && \\\n    ln -s /usr/bin/cmake3 /usr/bin/cmake && rm -rf /var/cache/yum\nADD ./common/install_miopen.sh install_miopen.sh\nRUN bash ./install_miopen.sh ${ROCM_VERSION} && rm install_miopen.sh\n"
}