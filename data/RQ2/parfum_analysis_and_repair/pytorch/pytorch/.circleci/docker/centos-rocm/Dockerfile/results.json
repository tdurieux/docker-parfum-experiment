{
  "startTime": 1674217103090,
  "endTime": 1674217103954,
  "originalSmells": [
    {
      "rule": "yumInstallRmVarCacheYum",
      "position": {
        "lineStart": 20,
        "lineEnd": 20,
        "columnStart": 4,
        "columnEnd": 96
      }
    },
    {
      "rule": "yumInstallRmVarCacheYum",
      "position": {
        "lineStart": 21,
        "lineEnd": 21,
        "columnStart": 4,
        "columnEnd": 22
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "ARG CENTOS_VERSION\n\nFROM centos:${CENTOS_VERSION}\n\nARG CENTOS_VERSION\n\n# Set AMD gpu targets to build for\nARG PYTORCH_ROCM_ARCH\nENV PYTORCH_ROCM_ARCH ${PYTORCH_ROCM_ARCH}\n\n# Install required packages to build Caffe2\n\n# Install common dependencies (so that this step can be cached separately)\nARG EC2\nADD ./common/install_base.sh install_base.sh\nRUN bash ./install_base.sh && rm install_base.sh\n\n# Update CentOS git version\nRUN yum -y remove git\nRUN yum -y remove git-*\nRUN yum -y install https://packages.endpoint.com/rhel/7/os/x86_64/endpoint-repo-1.9-1.x86_64.rpm && rm -rf /var/cache/yum\nRUN yum install -y git && rm -rf /var/cache/yum\n\n# Install devtoolset\nARG DEVTOOLSET_VERSION\nADD ./common/install_devtoolset.sh install_devtoolset.sh\nRUN bash ./install_devtoolset.sh && rm install_devtoolset.sh\nENV BASH_ENV \"/etc/profile\"\n\n# (optional) Install non-default glibc version\nARG GLIBC_VERSION\nADD ./common/install_glibc.sh install_glibc.sh\nRUN if [ -n \"${GLIBC_VERSION}\" ]; then bash ./install_glibc.sh; fi\nRUN rm install_glibc.sh\n\n# Install user\nADD ./common/install_user.sh install_user.sh\nRUN bash ./install_user.sh && rm install_user.sh\n\n# Install conda and other packages (e.g., numpy, pytest)\nENV PATH /opt/conda/bin:$PATH\nARG ANACONDA_PYTHON_VERSION\nADD requirements-ci.txt /opt/conda/requirements-ci.txt\nADD ./common/install_conda.sh install_conda.sh\nRUN bash ./install_conda.sh && rm install_conda.sh\nRUN rm /opt/conda/requirements-ci.txt\n\n# (optional) Install protobuf for ONNX\nARG PROTOBUF\nADD ./common/install_protobuf.sh install_protobuf.sh\nRUN if [ -n \"${PROTOBUF}\" ]; then bash ./install_protobuf.sh; fi\nRUN rm install_protobuf.sh\nENV INSTALLED_PROTOBUF ${PROTOBUF}\n\n# (optional) Install database packages like LMDB and LevelDB\nARG DB\nADD ./common/install_db.sh install_db.sh\nRUN if [ -n \"${DB}\" ]; then bash ./install_db.sh; fi\nRUN rm install_db.sh\nENV INSTALLED_DB ${DB}\n\n# (optional) Install vision packages like OpenCV and ffmpeg\nARG VISION\nADD ./common/install_vision.sh install_vision.sh\nRUN if [ -n \"${VISION}\" ]; then bash ./install_vision.sh; fi\nRUN rm install_vision.sh\nENV INSTALLED_VISION ${VISION}\n\n# Install rocm\nARG ROCM_VERSION\nADD ./common/install_rocm.sh install_rocm.sh\nRUN bash ./install_rocm.sh\nRUN rm install_rocm.sh\nENV PATH /opt/rocm/bin:$PATH\nENV PATH /opt/rocm/hcc/bin:$PATH\nENV PATH /opt/rocm/hip/bin:$PATH\nENV PATH /opt/rocm/opencl/bin:$PATH\nENV PATH /opt/rocm/llvm/bin:$PATH\nENV MAGMA_HOME /opt/rocm/magma\nENV LANG en_US.utf8\nENV LC_ALL en_US.utf8\n\n# (optional) Install non-default CMake version\nARG CMAKE_VERSION\nADD ./common/install_cmake.sh install_cmake.sh\nRUN if [ -n \"${CMAKE_VERSION}\" ]; then bash ./install_cmake.sh; fi\nRUN rm install_cmake.sh\n\n# (optional) Install non-default Ninja version\nARG NINJA_VERSION\nADD ./common/install_ninja.sh install_ninja.sh\nRUN if [ -n \"${NINJA_VERSION}\" ]; then bash ./install_ninja.sh; fi\nRUN rm install_ninja.sh\n\n# Install ccache/sccache (do this last, so we get priority in PATH)\nADD ./common/install_cache.sh install_cache.sh\nENV PATH /opt/cache/bin:$PATH\nRUN bash ./install_cache.sh && rm install_cache.sh\n\n# Include BUILD_ENVIRONMENT environment variable in image\nARG BUILD_ENVIRONMENT\nENV BUILD_ENVIRONMENT ${BUILD_ENVIRONMENT}\n\nUSER jenkins\nCMD [\"bash\"]\n"
}