{
  "startTime": 1674218093168,
  "endTime": 1674218094320,
  "originalSmells": [
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 28,
        "lineEnd": 28,
        "columnStart": 4,
        "columnEnd": 44
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# This Dockerfile is used for docker-based deployments to Azure for both preview environments and production\n\n# --------------------------------------------------------------------------------\n# BASE IMAGE\n# --------------------------------------------------------------------------------\nFROM node:16.15.0-alpine@sha256:1a9a71ea86aad332aa7740316d4111ee1bd4e890df47d3b5eff3e5bded3b3d10 as base\n\n# This directory is owned by the node user\nARG APP_HOME=/home/node/app\n\n# Make sure we don't run anything as the root user\nUSER node\n\nWORKDIR $APP_HOME\n\n\n# ---------------\n# ALL DEPS\n# ---------------\nFROM base as all_deps\n\nCOPY --chown=node:node package.json package-lock.json ./\n\nRUN npm ci --no-optional --registry https://registry.npmjs.org/\n\n# For Next.js v12+\n# This the appropriate necessary extra for node:16-alpine\n# Other options are https://www.npmjs.com/search?q=%40next%2Fswc\nRUN npm i @next/swc-linux-x64-musl --no-save && npm cache clean --force;\n\n\n# ---------------\n# PROD DEPS\n# ---------------\nFROM all_deps as prod_deps\n\nRUN npm prune --production\n\n\n# ---------------\n# BUILDER\n# ---------------\nFROM all_deps as builder\n\nCOPY stylesheets ./stylesheets\nCOPY pages ./pages\nCOPY components ./components\nCOPY lib ./lib\n# Certain content is necessary for being able to build\nCOPY content/index.md ./content/index.md\nCOPY content/rest ./content/rest\nCOPY data ./data\n\nCOPY next.config.js ./next.config.js\nCOPY tsconfig.json ./tsconfig.json\n\nRUN npm run build\n\n# --------------------------------------------------------------------------------\n# PREVIEW IMAGE - no translations\n# --------------------------------------------------------------------------------\n\nFROM base as preview\n\n# Copy just prod dependencies\nCOPY --chown=node:node --from=prod_deps $APP_HOME/node_modules $APP_HOME/node_modules\n\n# Copy our front-end code\nCOPY --chown=node:node --from=builder $APP_HOME/.next $APP_HOME/.next\n\n# We should always be running in production mode\nENV NODE_ENV production\n\n# Whether to hide iframes, add warnings to external links\nENV AIRGAP false\n\n# Preferred port for server.mjs\nENV PORT 4000\n\nENV ENABLED_LANGUAGES \"en\"\n\n# This makes it possible to set `--build-arg BUILD_SHA=abc123`\n# and it then becomes available as an environment variable in the docker run.\nARG BUILD_SHA\nENV BUILD_SHA=$BUILD_SHA\n\n# Copy only what's needed to run the server\nCOPY --chown=node:node package.json ./\nCOPY --chown=node:node assets ./assets\nCOPY --chown=node:node includes ./includes\nCOPY --chown=node:node content ./content\nCOPY --chown=node:node lib ./lib\nCOPY --chown=node:node middleware ./middleware\nCOPY --chown=node:node feature-flags.json ./\nCOPY --chown=node:node data ./data\nCOPY --chown=node:node next.config.js ./\nCOPY --chown=node:node server.mjs ./server.mjs\nCOPY --chown=node:node start-server.mjs ./start-server.mjs\n\nEXPOSE $PORT\n\nCMD [\"node\", \"server.mjs\"]\n\n# --------------------------------------------------------------------------------\n# PRODUCTION IMAGE - includes all translations\n# --------------------------------------------------------------------------------\nFROM preview as production\n\n# Copy in all translations\nCOPY --chown=node:node translations ./translations\n"
}