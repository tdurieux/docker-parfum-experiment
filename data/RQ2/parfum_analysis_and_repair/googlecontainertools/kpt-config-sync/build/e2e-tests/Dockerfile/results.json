{
  "startTime": 1674254263529,
  "endTime": 1674254264162,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 62,
        "lineEnd": 63,
        "columnStart": 4,
        "columnEnd": 31
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 98,
        "lineEnd": 98,
        "columnStart": 4,
        "columnEnd": 90
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 117,
        "lineEnd": 117,
        "columnStart": 4,
        "columnEnd": 65
      }
    },
    {
      "rule": "sha256sumEchoOneSpaces",
      "position": {
        "lineStart": 65,
        "lineEnd": 66,
        "columnStart": 4,
        "columnEnd": 21
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 68,
        "lineEnd": 68,
        "columnStart": 4,
        "columnEnd": 55
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 60,
        "lineEnd": 60,
        "columnStart": 22,
        "columnEnd": 52
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 80,
        "lineEnd": 90,
        "columnStart": 5,
        "columnEnd": 7
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 120,
        "lineEnd": 120,
        "columnStart": 5,
        "columnEnd": 41
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 60,
        "lineEnd": 60,
        "columnStart": 22,
        "columnEnd": 52
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 80,
        "lineEnd": 90,
        "columnStart": 5,
        "columnEnd": 7
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 120,
        "lineEnd": 120,
        "columnStart": 5,
        "columnEnd": 41
      }
    },
    {
      "rule": "apkAddUseNoCache",
      "position": {
        "lineStart": 38,
        "lineEnd": 38,
        "columnStart": 4,
        "columnEnd": 53
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# Copyright 2022 Google LLC\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n# *** WARNING ***\n# This image is built once and reused on repeated test runs.  If you make a\n# change here, you *must* rebuild the image and push it to the Nomos container\n# registry so that new test runs see the updated image.  This is not ideal but\n# we don't have a better approach at the moment.\n#\n# To rebuild and push the image, run:\n#     make push-e2e-tests\n\n# Build intermediate image for tools\n# When adding helper binaries, ensure to build from a specific commit ID, rather\n# than a tag or a branch, so that rebuilds are reproducible. See examples below\n# on how.\nFROM golang:1.17.7-alpine AS build-base\nRUN apk add --no-cache bash coreutils git gcc g++ libc-dev unzip\n\nENV GO111MODULE=on\n# Build static binaries only.\nENV CGO_ENABLED=0\n\n# tap2junit converts TAP testing output to jUnit\n# v0.0.4\nRUN go install github.com/filmil/tap2junit/cmd/tap2junit@afa095c33668ed9abcaeaee5cf0f27f67e96908c\n\n# gotopt2 parses command line options\n# v0.1.2\nRUN go install github.com/filmil/gotopt2/cmd/gotopt2@v0.1.2\n\n# kind can run kubernetes clusters in docker\n# v0.10.0\nRUN go install sigs.k8s.io/kind@v0.10.0\n\n# Build intermediate image for gcloud / kubectl\nFROM marketplace.gcr.io/google/ubuntu1804 as gcloud-install\n\nENV PATH /opt/gcloud/google-cloud-sdk/bin:$PATH\nRUN apt-get update && apt-get install --no-install-recommends -y curl python && rm -rf /var/lib/apt/lists/*;\nARG DL_GOOGLE_COM=\"https://dl.google.com/dl/cloudsdk/channels/rapid/downloads\"\nRUN curl -f ${DL_GOOGLE_COM}/google-cloud-sdk-255.0.0-linux-x86_64.tar.gz \\\n\t> /tmp/google-cloud-sdk.tar.gz\n# Verify SHA256 sum for the downloaded archive for reproducibility.\nRUN echo \"18fcbc81b3b095ff5ef92fd41286a045f782c18d99a976c0621140a8fde3fbad  /tmp/google-cloud-sdk.tar.gz\" | \\\n\t\tsha256sum --check -\nRUN mkdir -p /opt/gcloud && \\\n    tar -C /opt/gcloud -xf /tmp/google-cloud-sdk.tar.gz && \\\n    /opt/gcloud/google-cloud-sdk/install.sh --quiet && \\\n    gcloud components install alpha beta && rm /tmp/google-cloud-sdk.tar.gz\n\n# Build e2e image\nFROM marketplace.gcr.io/google/ubuntu1804 as e2e-base\n\nENV DEBIAN_FRONTEND=noninteractive\n\n# Install system stuff\nRUN apt-get update \\\n  && apt-get upgrade -y \\\n  && apt-get install --no-install-recommends -y \\\n  apt-transport-https \\\n  apt-utils \\\n  curl \\\n  git \\\n  jq \\\n  libtap-formatter-junit-perl \\\n  net-tools \\\n  python \\\n  software-properties-common \\\n  unzip && rm -rf /var/lib/apt/lists/*;\n\n# Add Tini, note that the gpg variant of pulling tini is problematic on prow.\nENV TINI_VERSION v0.19.0\n#ADD https://github.com/krallin/tini/releases/download/${TINI_VERSION}/tini /tini\n#ADD https://github.com/krallin/tini/releases/download/${TINI_VERSION}/tini.asc /tini.asc\n#RUN gpg --batch --keyserver hkp://p80.pool.sks-keyservers.net:80 --recv-keys 595E85A6B1B4779EA4DAAEC70B588DFF0527A9B7 \\\n# && gpg --batch --verify /tini.asc /tini\nRUN curl -f -L https://github.com/krallin/tini/releases/download/${TINI_VERSION}/tini > /tini \\\n  && echo \"93dcc18adc78c65a028a84799ecf8ad40c936fdfc5f2a57b1acda5a8117fa82c  /tini\" | sha256sum --check \\\n  && chmod +x /tini\n\nARG UNAME\nARG UID\nARG GID\n\n# The existence of a valid UID, GID and UNAME (USER) is required for programs\n# that expect a \"regular\" unix environment, for example 'git'.\nRUN bash -c 'echo UID=${UID}; GID=${GID}; UNAME=${UNAME}'\n\n# This is needed to get build going on any environment with a nonprivileged\n# user.  Turns out that on go/prow, the build is ran as root, so no need for\n# any such setup.  Hence is done conditionally.\nRUN bash -c '[ $GID == 0 ] || groupadd -or -g $GID grp '\nRUN bash -c '[ $UID == 0 ] || useradd -u $UID -G $GID $UNAME'\n\n# Install a specific version of kubectl\nRUN curl -f -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | apt-key add - \\\n  && echo \"deb http://apt.kubernetes.io/ kubernetes-xenial main\" > /etc/apt/sources.list.d/kubernetes.list \\\n  && apt-get update \\\n  && apt-get install --no-install-recommends -y kubectl=1.20.4-00 && rm -rf /var/lib/apt/lists/*;\n\n# Copy installed gcloud into image\nCOPY --from=gcloud-install /opt/gcloud/google-cloud-sdk /opt/gcloud/google-cloud-sdk\nENV PATH /opt/gcloud/google-cloud-sdk/bin:$PATH\n\n# Copy the filmil stuff (gotopt2 and tap2junit) into /opt/bin then add it to\n# the PATH env var\nCOPY --from=build-base /go/bin /opt/bin\nENV PATH /opt/bin:$PATH\n\nENV GIT_CONFIG_NOGLOBAL 1\nENV GIT_CONFIG_NOSYSTEM 1\n\n# The e2e.sh launcher mounts $REPO/.output/go at /opt/testing/go.  Add the\n# mounted go binary output dir to the PATH env var to expose the nomos command\n# to tests so they don't have to use the absolute path to the binary.\nENV PATH /opt/testing/go/bin/linux_amd64:$PATH\n\nENV USER $UNAME\nUSER $UNAME\n\nWORKDIR /opt/testing/nomos\n\n# tini (especially with -g) does correct handling of signals (like Ctrl+C) that you don't\n# get by running a shell script as the entrypoint. If this were removed, Ctrl+C wouldn't\n# work.\nENTRYPOINT [\"/tini\", \"-g\", \"--\"]\n"
}