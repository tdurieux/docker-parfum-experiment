{
  "startTime": 1674252562346,
  "endTime": 1674252563386,
  "originalSmells": [
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 36,
        "lineEnd": 42,
        "columnStart": 5,
        "columnEnd": 7
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# To build for multiple different platforms with the same docker image\n# you need to rebuild this image with https://github.com/game-ci/docker/releases/tag/v0.15 or newer (with https://github.com/game-ci/docker/pull/116)\n# e.g. for 2020.3.19f1 version with linux, windows, android and mac support:\n# --build-arg version=\"2020.3.19f1\"\n# --build-arg changeSet=\"68f137dc9bbe\"                # you can find changeSet value in release announcement, e.g. https://unity3d.com/unity/whats-new/2020.3.19 has \"Unity Hub\" link unityhub://2020.3.19f1/68f137dc9bbe\n# --build-arg module=\"windows-mono android mac-mono\"  # linux support is already included by default\n# use an image with only windows-mono support as an example until the images with multiple modules are available on dockerhub\nARG EDITOR_DOCKER_IMAGE=unityci/editor:ubuntu-2020.3.19f1-windows-mono-0.15.0\nFROM ${EDITOR_DOCKER_IMAGE}\n\n# install dependencies:\n# libvulkan1:\n#     - is loaded by Unity during the build\n#     - Unity would use llvmpipe renderer when missing as in:\n#       [vulkan] LoadVulkanLibrary libvulkan.so.1\n#       [vulkan] LoadVulkanLibrary failed to load libvulkan.so.1Vulkan detection: 0)\n# mesa-vulkan-drivers:\n#     - is needed for libvulkan1 to work\n#     - otherwise vulkaninfo fails with:\n#       vulkan-tools-1.2.131.1+dfsg1/vulkaninfo/vulkaninfo.h:371: failed with ERROR_INCOMPATIBLE_DRIVER)\n# osslsigncode:\n#     - is needed by build-simulator.sh script when building for windows:\n#       Jenkins/build-simulator.sh:    osslsigncode sign\n# uuid-runtime:\n#     - needed to generate IMAGE_UUID:\n#       Jenkins/Dockerfile:IMAGE_UUID=\\\"$(uuidgen)\\\"\"\n# vulkan-tools:\n#     - used to be vulkan-utils in 18.04 ubuntu\n#     - usefull to test that docker image can initialize vulkan with `vulkaninfo`\n#     - but it doesn't work without mesa-vulkan-drivers, so install it only to verify Vulkan\n# zip:\n#     - is needed by build-simulator.sh script:\n#       Jenkins/build-simulator.sh:zip -r /mnt/${BUILD_OUTPUT}.zip ${BUILD_OUTPUT}\n\nRUN set -ex \\\n  && apt-get update \\\n  && DEBIAN_FRONTEND=noninteractive apt-get install --no-install-recommends -y \\\n    libvulkan1 \\\n    mesa-vulkan-drivers \\\n    osslsigncode \\\n    uuid-runtime \\\n    vulkan-tools \\\n    zip \\\n  && apt-get clean && rm -rf /var/lib/apt/lists/*;\n\n# Don't use Xvfb and call Unity directly (we run it on servers with Xorg running and DISPLAY set), show /opt/unity/image-info-lgsvl.source content before calling Unity\nRUN sed -i 's#xvfb-run -ae /dev/stdout \"$UNITY_PATH/Editor/Unity\" -batchmode \"$@\"#echo \"Running Unity Editor from docker image:\" \\&\\& cat /opt/unity/image-info-lgsvl.source \\&\\& echo \"/opt/unity/Editor/Unity \\\"$@\\\"\" \\&\\& /opt/unity/Editor/Unity \"$@\"#g' /usr/bin/unity-editor\n\n# NB. This is overwritten when launched by docker with --gpus=N option\n# or Kubernetes with resources.limits.nvidia.com/gpu=N XXX <= confirm not overridden by K8s if not specified.\nENV NVIDIA_VISIBLE_DEVICES all\n# Including \"utility\" to get nvidia-smi\nENV NVIDIA_DRIVER_CAPABILITIES graphics,display,utility\n\nADD \"https://gitlab.com/nvidia/container-images/vulkan/raw/master/nvidia_icd.json\" /etc/vulkan/icd.d/nvidia_icd.json\nRUN chmod 644 /etc/vulkan/icd.d/nvidia_icd.json\n\nARG UNITY_VERSION=(unknown)\nARG EDITOR_DOCKER_IMAGE=(unknown)\nARG IMAGE_TAG=(unknown)\nARG image_git_describe=(unknown)\n\nRUN /bin/echo -e \"IMAGE_APP=\\\"unity-editor-simulator\\\"\\n\\\nIMAGE_CREATED_BY=\\\"Jenkinsfile\\\"\\n\\\nIMAGE_CREATED_FROM=\\\"${image_git_describe}\\\"\\n\\\nIMAGE_CREATED_ON=\\\"$(date --iso-8601=seconds --utc)\\\"\\n\\\nIMAGE_UNITY_VERSION=\\\"${UNITY_VERSION}\\\"\\n\\\nIMAGE_EDITOR_DOCKER_IMAGE=\\\"${EDITOR_DOCKER_IMAGE}\\\"\\n\\\nIMAGE_TAG=\\\"${IMAGE_TAG}\\\"\\n\\\n# Increment IMAGE_INTERFACE_VERSION whenever changes to the image require that the launcher be updated.\\n\\\nIMAGE_INTERFACE_VERSION=\\\"1\\\"\\n\\\nIMAGE_UUID=\\\"$(uuidgen)\\\"\" \\\n  >> /opt/unity/image-info-lgsvl.source \\\n  && echo \"unity image-info-lgsvl.source:\" \\\n  && cat /opt/unity/image-info-lgsvl.source\n"
}