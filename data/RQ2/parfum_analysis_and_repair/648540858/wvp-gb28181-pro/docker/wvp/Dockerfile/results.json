{
  "startTime": 1674248814438,
  "endTime": 1674248815667,
  "originalSmells": [
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 18,
        "lineEnd": 18,
        "columnStart": 8,
        "columnEnd": 19
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 7,
        "lineEnd": 8,
        "columnStart": 8,
        "columnEnd": 44
      }
    },
    {
      "rule": "ruleAptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 73,
        "lineEnd": 73,
        "columnStart": 8,
        "columnEnd": 110
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM ubuntu:20.04   as   build\n\nARG gitUrl=\"https://gitee.com/pan648540858\"\nARG zlmGitUrl=\"https://gitee.com/xia-chu/ZLMediaKit\"\n\nRUN export DEBIAN_FRONTEND=noninteractive &&\\\n        apt-get update && \\\n        apt-get install -y --no-install-recommends openjdk-11-jre git maven nodejs npm build-essential \\\n        cmake ca-certificates openssl ffmpeg && \\\n        mkdir -p /opt/wvp/config /opt/wvp/heapdump /opt/wvp/config /opt/assist/config /opt/assist/heapdump /opt/media/www/record && rm -rf /var/lib/apt/lists/*;\n\nRUN cd /home && \\\n        git clone \"${gitUrl}/maven.git\" && \\\n        cp maven/settings.xml /usr/share/maven/conf/\n\nRUN cd /home && \\\n        git clone \"${gitUrl}/wvp-GB28181-pro.git\"\nRUN cd /home/wvp-GB28181-pro/web_src && \\\n        npm install && \\\n        npm run build && npm cache clean --force;\nRUN cd /home/wvp-GB28181-pro && \\\n        mvn clean package -Dmaven.test.skip=true && \\\n        cp /home/wvp-GB28181-pro/target/*.jar /opt/wvp/ && \\\n        cp /home/wvp-GB28181-pro/src/main/resources/application-docker.yml /opt/wvp/config/application.yml\n\nRUN cd /home && \\\n\t\tgit clone \"${gitUrl}/wvp-pro-assist.git\"\nRUN cd /home/wvp-pro-assist && \\\n\tgit reset --hard 58f1a79136a55a7cd1593c95b56ddadcc2225b61 && \\\n        mvn clean package -Dmaven.test.skip=true && \\\n        cp /home/wvp-pro-assist/target/*.jar /opt/assist/ && \\\n        cp /home/wvp-pro-assist/src/main/resources/application-dev.yml /opt/assist/config/application.yml\n\nRUN cd /home && \\\n        git clone --depth=1 \"${zlmGitUrl}\"\nRUN cd /home/ZLMediaKit && \\\n        git submodule update --init --recursive && \\\n        mkdir -p build release/linux/Release/ &&\\\n        cd build && \\\n        cmake -DCMAKE_BUILD_TYPE=Release .. && \\\n        make -j4 && \\\n        rm -rf ../release/linux/Release/config.ini && \\\n        cp -r ../release/linux/Release/* /opt/media\n\nRUN cd /opt/wvp && \\\n        echo '#!/bin/bash' > run.sh && \\\n        echo 'echo ${WVP_IP}' >> run.sh && \\\n        echo 'echo ${WVP_CONFIG}' >> run.sh && \\\n        echo 'cd /opt/assist' >> run.sh && \\\n        echo 'nohup java ${ASSIST_JVM_CONFIG} -XX:+HeapDumpOnOutOfMemoryError -XX:HeapDumpPath=/opt/assist/heapdump/ -jar *.jar --spring.config.location=/opt/assist/config/application.yml --userSettings.record=/opt/media/www/record/  --media.record-assist-port=18081 ${ASSIST_CONFIG} &' >> run.sh && \\\n        echo 'nohup /opt/media/MediaServer -d -m 3 &' >> run.sh && \\\n        echo 'cd /opt/wvp' >> run.sh && \\\n        echo 'java ${WVP_JVM_CONFIG} -XX:+HeapDumpOnOutOfMemoryError -XX:HeapDumpPath=/opt/wvp/heapdump/ -jar *.jar --spring.config.location=/opt/wvp/config/application.yml --media.record-assist-port=18081 ${WVP_CONFIG}' >> run.sh && \\\n        chmod +x run.sh\n\nFROM ubuntu:20.04\n\nEXPOSE 18080/tcp\nEXPOSE 5060/tcp\nEXPOSE 5060/udp\nEXPOSE 6379/tcp\nEXPOSE 18081/tcp\nEXPOSE 80/tcp\nEXPOSE 1935/tcp\nEXPOSE 554/tcp\nEXPOSE 554/udp\nEXPOSE 30000-30500/tcp\nEXPOSE 30000-30500/udp\n\nENV LC_ALL zh_CN.UTF-8\n\nRUN export DEBIAN_FRONTEND=noninteractive &&\\\n        apt-get update && \\\n        apt-get install -y --no-install-recommends openjdk-11-jre ca-certificates ffmpeg language-pack-zh-hans && \\\n        apt-get autoremove -y && \\\n        apt-get clean -y && \\\n        rm -rf /var/lib/apt/lists/*dic && rm -rf /var/lib/apt/lists/*;\n\nCOPY --from=build /opt /opt\nWORKDIR /opt/wvp\nCMD [\"sh\", \"run.sh\"]\n"
}