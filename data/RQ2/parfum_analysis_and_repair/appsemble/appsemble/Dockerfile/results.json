{
  "startTime": 1674255147998,
  "endTime": 1674255148767,
  "originalSmells": [
    {
      "rule": "yarnCacheCleanAfterInstall",
      "position": {
        "lineStart": 7,
        "lineEnd": 7,
        "columnStart": 4,
        "columnEnd": 43
      }
    },
    {
      "rule": "yarnCacheCleanAfterInstall",
      "position": {
        "lineStart": 8,
        "lineEnd": 8,
        "columnStart": 4,
        "columnEnd": 41
      }
    },
    {
      "rule": "yarnCacheCleanAfterInstall",
      "position": {
        "lineStart": 9,
        "lineEnd": 9,
        "columnStart": 4,
        "columnEnd": 43
      }
    },
    {
      "rule": "yarnCacheCleanAfterInstall",
      "position": {
        "lineStart": 10,
        "lineEnd": 10,
        "columnStart": 4,
        "columnEnd": 48
      }
    },
    {
      "rule": "yarnCacheCleanAfterInstall",
      "position": {
        "lineStart": 11,
        "lineEnd": 11,
        "columnStart": 4,
        "columnEnd": 44
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# Build production files\nFROM node:18-bullseye-slim AS build\nWORKDIR /app\nCOPY . .\nRUN yarn --frozen-lockfile\nRUN yarn install-chrome-dependencies\nRUN yarn scripts build\nRUN yarn workspace @appsemble/types prepack && yarn cache clean;\nRUN yarn workspace @appsemble/sdk prepack && yarn cache clean;\nRUN yarn workspace @appsemble/utils prepack && yarn cache clean;\nRUN yarn workspace @appsemble/node-utils prepack && yarn cache clean;\nRUN yarn workspace @appsemble/server prepack && yarn cache clean;\n\n# Install production dependencies\nFROM node:18-bullseye-slim AS prod\nWORKDIR /app\nCOPY --from=build /app/packages/node-utils packages/node-utils\nCOPY --from=build /app/packages/sdk packages/sdk\nCOPY --from=build /app/packages/server packages/server\nCOPY --from=build /app/packages/types packages/types\nCOPY --from=build /app/packages/utils packages/utils\nCOPY --from=build /app/package.json package.json\nCOPY --from=build /app/yarn.lock yarn.lock\nRUN yarn --frozen-lockfile --production\nRUN find . -name '*.ts' -delete\nRUN rm -r yarn.lock\n\n# Setup the production docker image.\nFROM node:18-bullseye-slim\nARG version=0.20.11\nARG date\n\nCOPY --from=prod /app /app\nCOPY --from=build /app/dist /app/dist\nCOPY i18n /app/i18n\nRUN ln -s /app/packages/server/bin.js /usr/bin/appsemble\nWORKDIR /app\n# By default colors aren’t detected within a Docker container. Let’s assume at least simple colors\n# are supported by those who inspect the logs.\n# https://www.npmjs.com/package/chalk#chalksupportscolor\nENV FORCE_COLOR 1\nENV NODE_ENV production\nUSER node\nENTRYPOINT [\"appsemble\"]\nCMD [\"start\"]\nHEALTHCHECK CMD [\"appsemble\", \"health\"]\nEXPOSE 9999\nLABEL io.artifacthub.package.alternative-locations registry.gitlab.com/appsemble/appsemble:${version}\nLABEL io.artifacthub.package.keywords app,apps,appsemble,framework,low-code,lowcode\nLABEL io.artifacthub.package.license LGPL-3.0-only\nLABEL io.artifacthub.package.logo-url https://charts.appsemble.com/icon.svg\nLABEL io.artifacthub.package.readme-url https://gitlab.com/appsemble/appsemble/-/raw/${version}/packages/server/README.md\nLABEL org.opencontainers.image.created ${date}\nLABEL org.opencontainers.image.description The open source low-code app building platform\nLABEL org.opencontainers.image.documentation https://appsemble.app/docs\nLABEL org.opencontainers.image.source https://gitlab.com/appsemble/appsemble/-/tree/${version}\nLABEL org.opencontainers.image.title Appsemble\nLABEL org.opencontainers.image.vendor Appsemble\nLABEL org.opencontainers.image.version ${version}\n"
}