{
  "startTime": 1674250980527,
  "endTime": 1674250981669,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 238,
        "lineEnd": 238,
        "columnStart": 1,
        "columnEnd": 52
      }
    },
    {
      "rule": "mkdirUsrSrcThenRemove",
      "position": {
        "lineStart": 240,
        "lineEnd": 240,
        "columnStart": 1,
        "columnEnd": 23
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "{{\n\tdef is_alpine:\n\t\tenv.variant | index(\"alpine\")\n-}}\n# from https://downloads.joomla.org/technical-requirements\nFROM php:{{ env.phpVersion }}-{{ env.variant }}\nLABEL maintainer=\"{{ env.joomlaMaintainers }}\"\n\n# Disable remote database security requirements.\nENV JOOMLA_INSTALLATION_DISABLE_LOCALHOST_CHECK=1\n{{ if is_alpine then ( -}}\nRUN set -eux; \\\n\tapk add --no-cache \\\n# in theory, docker-entrypoint.sh is POSIX-compliant, but priority is a working, consistent image\n\t\tbash \\\n# Ghostscript is required for rendering PDF previews\n\t\tghostscript \\\n# Alpine package for \"imagemagick\" contains ~120 .so files\n\t\timagemagick \\\n\t;\n{{ ) else ( -}}\nRUN set -eux; \\\n\tapt-get update; \\\n\tapt-get install -y --no-install-recommends \\\n# Ghostscript is required for rendering PDF previews\n\t\tghostscript \\\n\t; \\\n\trm -rf /var/lib/apt/lists/*\n{{ ) end -}}\n\n# install the PHP extensions we need.\nRUN set -ex; \\\n\t\\\n{{ if is_alpine then ( -}}\n\tapk add --no-cache --virtual .build-deps \\\n\t\t$PHPIZE_DEPS \\\n\t\tautoconf \\\n\t\tbzip2-dev \\\n\t\tgmp-dev \\\n{{ if env.version == \"4.1\" then ( -}}\n\t\ticu-dev \\\n{{ ) else \"\" end -}}\n\t\tfreetype-dev \\\n\t\timagemagick-dev \\\n\t\tlibjpeg-turbo-dev \\\n{{ if env.version == \"3.10\" then ( -}}\n\t\tlibmcrypt-dev \\\n{{ ) else \"\" end -}}\n\t\tlibmemcached-dev \\\n\t\tlibpng-dev \\\n\t\tlibwebp-dev \\\n\t\tlibzip-dev \\\n\t\topenldap-dev \\\n\t\tpcre-dev \\\n\t\tpostgresql-dev \\\n\t; \\\n{{ ) else ( -}}\n\tsavedAptMark=\"$(apt-mark showmanual)\"; \\\n\t\\\n\tapt-get update; \\\n\tapt-get install -y --no-install-recommends \\\n\t\tlibbz2-dev \\\n\t\tlibgmp-dev \\\n{{ if env.version == \"4.1\" then ( -}}\n\t\tlibicu-dev \\\n{{ ) else \"\" end -}}\n\t\tlibfreetype6-dev \\\n\t\tlibjpeg-dev \\\n\t\tlibldap2-dev \\\n{{ if env.version == \"3.10\" then ( -}}\n\t\tlibmcrypt-dev \\\n{{ ) else \"\" end -}}\n\t\tlibmemcached-dev \\\n\t\tlibmagickwand-dev \\\n\t\tlibpq-dev \\\n\t\tlibpng-dev \\\n\t\tlibwebp-dev \\\n\t\tlibzip-dev \\\n\t; \\\n{{ ) end -}}\n\t\\\n\tdocker-php-ext-configure gd \\\n\t\t--with-freetype \\\n\t\t--with-jpeg \\\n\t\t--with-webp \\\n\t; \\\n{{ if is_alpine then ( -}}\n\tdocker-php-ext-configure ldap; \\\n{{ ) else ( -}}\n\tdebMultiarch=\"$(dpkg-architecture --query DEB_BUILD_MULTIARCH)\"; \\\n\tdocker-php-ext-configure ldap --with-libdir=\"lib/$debMultiarch\"; \\\n{{ ) end -}}\n\tdocker-php-ext-install -j \"$(nproc)\" \\\n\t\tbz2 \\\n\t\tbcmath \\\n\t\texif \\\n\t\tgd \\\n\t\tgmp \\\n{{ if env.version == \"4.1\" then ( -}}\n\t\tintl \\\n{{ ) else \"\" end -}}\n\t\tldap \\\n\t\tmysqli \\\n\t\tpdo_mysql \\\n\t\tpdo_pgsql \\\n\t\tpgsql \\\n\t\tzip \\\n\t; \\\n{{ if is_alpine then ( -}}\n# WARNING: imagick is likely not supported on Alpine: https://github.com/Imagick/imagick/issues/328\n{{ ) else \"\" end -}}\n# https://pecl.php.net/package/imagick\n\tpecl install imagick-3.6.0; \\\n\tdocker-php-ext-enable imagick; \\\n\trm -r /tmp/pear; \\\n\t\\\n# some misbehaving extensions end up outputting to stdout\n\tout=\"$(php -r 'exit(0);')\"; \\\n\t[ -z \"$out\" ]; \\\n\terr=\"$(php -r 'exit(0);' 3>&1 1>&2 2>&3)\"; \\\n\t[ -z \"$err\" ]; \\\n\t\\\n\textDir=\"$(php -r 'echo ini_get(\"extension_dir\");')\"; \\\n\t[ -d \"$extDir\" ]; \\\n{{ if is_alpine then ( -}}\n\t\\\n# pecl will claim success even if one install fails, so we need to perform each install separately\n\tpecl install APCu-{{ env.pecl_APCu }}; \\\n{{ if env.version == \"3.10\" then ( -}}\n\tpecl install mcrypt-{{ env.pecl_mcrypt }}; \\\n{{ ) else \"\" end -}}\n\tpecl install memcached-{{ env.pecl_memcached }}; \\\n\tpecl install redis-{{ env.pecl_redis }}; \\\n\t\\\n\tdocker-php-ext-enable \\\n\t\tapcu \\\n{{ if env.version == \"3.10\" then ( -}}\n\t\tmcrypt \\\n{{ ) else \"\" end -}}\n\t\tmemcached \\\n\t\tredis \\\n\t; \\\n\trm -r /tmp/pear; \\\n\t\\\n\trunDeps=\"$( \\\n\t\tscanelf --needed --nobanner --format '%n#p' --recursive \"$extDir\" \\\n\t\t\t| tr ',' '\\n' \\\n\t\t\t| sort -u \\\n\t\t\t| awk 'system(\"[ -e /usr/local/lib/\" $1 \" ]\") == 0 { next } { print \"so:\" $1 }' \\\n\t)\"; \\\n\tapk add --no-network --virtual .joomla-phpexts-rundeps $runDeps; \\\n\tapk del --no-network .build-deps; \\\n{{ ) else ( -}}\n# pecl will claim success even if one install fails, so we need to perform each install separately\n\tpecl install APCu-{{ env.pecl_APCu }}; \\\n\tpecl install memcached-{{ env.pecl_memcached }}; \\\n\tpecl install redis-{{ env.pecl_redis }}; \\\n\t\\\n\tdocker-php-ext-enable \\\n\t\tapcu \\\n\t\tmemcached \\\n\t\tredis \\\n\t; \\\n\trm -r /tmp/pear; \\\n\t\\\n# reset apt-mark's \"manual\" list so that \"purge --auto-remove\" will remove all build dependencies\n\tapt-mark auto '.*' > /dev/null; \\\n\tapt-mark manual $savedAptMark; \\\n\tldd \"$extDir\"/*.so \\\n\t\t| awk '/=>/ { print $3 }' \\\n\t\t| sort -u \\\n\t\t| xargs -r dpkg-query -S \\\n\t\t| cut -d: -f1 \\\n\t\t| sort -u \\\n\t\t| xargs -rt apt-mark manual; \\\n\t\\\n\tapt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false; \\\n\trm -rf /var/lib/apt/lists/*; \\\n{{ ) end -}}\n\t\\\n\t! { ldd \"$extDir\"/*.so | grep 'not found'; }; \\\n# check for output like \"PHP Warning:  PHP Startup: Unable to load dynamic library 'foo' (tried: ...)\n\terr=\"$(php --version 3>&1 1>&2 2>&3)\"; \\\n\t[ -z \"$err\" ]\n\n# set recommended PHP.ini settings\n# see https://secure.php.net/manual/en/opcache.installation.php\nRUN set -eux; \\\n\tdocker-php-ext-enable opcache; \\\n\t{ \\\n\t\techo 'opcache.memory_consumption=128'; \\\n\t\techo 'opcache.interned_strings_buffer=8'; \\\n\t\techo 'opcache.max_accelerated_files=4000'; \\\n\t\techo 'opcache.revalidate_freq=2'; \\\n\t\techo 'opcache.fast_shutdown=1'; \\\n\t} > /usr/local/etc/php/conf.d/opcache-recommended.ini\n# set recommended error logging\nRUN { \\\n# https://www.php.net/manual/en/errorfunc.constants.php\n\t\techo 'error_reporting = E_ERROR | E_WARNING | E_PARSE | E_CORE_ERROR | E_CORE_WARNING | E_COMPILE_ERROR | E_COMPILE_WARNING | E_RECOVERABLE_ERROR'; \\\n\t\techo 'display_errors = Off'; \\\n\t\techo 'display_startup_errors = Off'; \\\n\t\techo 'log_errors = On'; \\\n\t\techo 'error_log = /dev/stderr'; \\\n\t\techo 'log_errors_max_len = 1024'; \\\n\t\techo 'ignore_repeated_errors = On'; \\\n\t\techo 'ignore_repeated_source = Off'; \\\n\t\techo 'html_errors = Off'; \\\n\t} > /usr/local/etc/php/conf.d/error-logging.ini\n{{ if env.variant == \"apache\" then ( -}}\n\nRUN set -eux; \\\n\ta2enmod rewrite expires; \\\n\t\\\n# https://httpd.apache.org/docs/2.4/mod/mod_remoteip.html\n\ta2enmod remoteip; \\\n\t{ \\\n\t\techo 'RemoteIPHeader X-Forwarded-For'; \\\n# these IP ranges are reserved for \"private\" use and should thus *usually* be safe inside Docker\n\t\techo 'RemoteIPTrustedProxy 10.0.0.0/8'; \\\n\t\techo 'RemoteIPTrustedProxy 172.16.0.0/12'; \\\n\t\techo 'RemoteIPTrustedProxy 192.168.0.0/16'; \\\n\t\techo 'RemoteIPTrustedProxy 169.254.0.0/16'; \\\n\t\techo 'RemoteIPTrustedProxy 127.0.0.0/8'; \\\n\t} > /etc/apache2/conf-available/remoteip.conf; \\\n\ta2enconf remoteip; \\\n# (replace all instances of \"%h\" with \"%a\" in LogFormat)\n\tfind /etc/apache2 -type f -name '*.conf' -exec sed -ri 's/([[:space:]]*LogFormat[[:space:]]+\"[^\"]*)%h([^\"]*\")/\\1%a\\2/g' '{}' +\n{{ ) else \"\" end -}}\n\nVOLUME /var/www/html\n\n# Define Joomla version and expected SHA512 signature\nENV JOOMLA_VERSION {{ env.joomlaVersion }}\nENV JOOMLA_SHA512 {{ env.joomlaSha512 }}\n\n# Download package and extract to web volume\nRUN set -ex; \\\n\tcurl -f -o joomla.tar.bz2 -SL {{ env.joomlaPackage }}; \\\n\techo \"$JOOMLA_SHA512 *joomla.tar.bz2\" | sha512sum -c -; \\\n\tmkdir /usr/src/joomla; rm -rf /usr/src/joomla \\\n\ttar -xf joomla.tar.bz2 -C /usr/src/joomla; \\\n\trm joomla.tar.bz2; \\\n\tchown -R www-data:www-data /usr/src/joomla\n\n# Copy init scripts\nCOPY docker-entrypoint.sh /entrypoint.sh\nCOPY makedb.php /makedb.php\n\nENTRYPOINT [\"/entrypoint.sh\"]\n{{ if env.variant == \"apache\" then ( -}}\nCMD [\"apache2-foreground\"]\n{{ ) else ( }}\nCMD [\"php-fpm\"]\n{{ ) end -}}\n\n\n"
}