{
  "startTime": 1674219163910,
  "endTime": 1674219164923,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 35,
        "lineEnd": 35,
        "columnStart": 4,
        "columnEnd": 42
      }
    },
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 4,
        "lineEnd": 4,
        "columnStart": 4,
        "columnEnd": 15
      }
    },
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 60,
        "lineEnd": 60,
        "columnStart": 4,
        "columnEnd": 28
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 12,
        "lineEnd": 12,
        "columnStart": 5,
        "columnEnd": 54
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# Our first stage, that is the Builder\nFROM node:16-alpine AS builder\nWORKDIR /app\nCOPY . .\nRUN npm install && npm cache clean --force;\nRUN npm run clean\nRUN npm run build\n\n# Our Second stage, that creates an image for production\nFROM node:16-buster-slim AS runtime\n\nRUN apt-get update && \\\n     apt-get install --no-install-recommends -y curl gnupg lsb-release jq tini && \\\n# # install github cli\n# # https://github.com/cli/cli/blob/trunk/docs/install_linux.md\n#     echo \"deb https://cli.github.com/packages buster main\" > /etc/apt/sources.list.d/gh.list && \\\n#     apt-key adv --keyserver keyserver.ubuntu.com --recv-key C99B11DEB97541F0 && \\\n#     apt-get update && \\\n#     apt-get install -y --no-install-recommends \\\n#         gh  && \\\n# apt clean up\n    apt-get autoremove -y && \\\n    apt-get clean && \\\n    rm -rf /var/lib/apt/lists/*\n\n\n\n# install kubectl\n# RUN curl -L -o /usr/local/bin/kubectl  \\\n#      \"https://storage.googleapis.com/kubernetes-release/release/$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/amd64/kubectl\" && \\\n#      chmod +x /usr/local/bin/kubectl\n\n# install gcloud and kubectl\nWORKDIR /home/nonroot/\nENV CLOUDSDK_INSTALL_DIR /usr/local/gcloud\nRUN curl -f -sSL https://sdk.cloud.google.com | bash\nENV PATH $PATH:/usr/local/gcloud/google-cloud-sdk/bin\nRUN gcloud components install kubectl\n\n# Non-root user for security purposes.\n#\n# UIDs below 10,000 are a security risk, as a container breakout could result\n# in the container being ran as a more privileged user on the host kernel with\n# the same UID.\n#\n# Static GID/UID is also useful for chown'ing files outside the container where\n# such a user does not exist.\nRUN groupadd --gid 10001 nonroot && \\\n    useradd  --home-dir /home/nonroot \\\n             --create-home \\\n             --shell /bin/bash \\\n             --gid nonroot \\\n             --groups nonroot \\\n             --uid 10000 nonroot\n\nWORKDIR /home/nonroot/zombie-net\nCOPY --from=builder ./app/dist ./dist\nCOPY static-configs ./static-configs\nCOPY scripts ./scripts\nCOPY package* ./\nRUN npm install --production && npm cache clean --force;\nRUN chown -R nonroot. /home/nonroot\n\n# Change `cli` permissions and link to easy call\nRUN chmod +x ./dist/cli.js\nRUN ln -s /home/nonroot/zombie-net/dist/cli.js /usr/local/bin/zombie\n\n# Dependency for run test script when run inside container\nRUN mkdir -p /var/log/zombie-net\nRUN chown -R nonroot. /var/log/zombie-net\nRUN mkdir -p /etc/zombie-net\nRUN chown -R nonroot. /etc/zombie-net\n\n# Use the non-root user to run our application\n# Tell run test script that it runs in container\nENV RUN_IN_CONTAINER 1\nUSER nonroot\n# Tini allows us to avoid several Docker edge cases, see https://github.com/krallin/tini.\nENTRYPOINT [\"tini\", \"--\", \"bash\"]\n\n"
}