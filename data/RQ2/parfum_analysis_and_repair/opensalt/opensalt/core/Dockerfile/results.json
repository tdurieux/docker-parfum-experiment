{
  "startTime": 1674253315704,
  "endTime": 1674253316532,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 44,
        "lineEnd": 44,
        "columnStart": 4,
        "columnEnd": 142
      }
    },
    {
      "rule": "yarnCacheCleanAfterInstall",
      "position": {
        "lineStart": 14,
        "lineEnd": 14,
        "columnStart": 4,
        "columnEnd": 34
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# the different stages of this Dockerfile are meant to be built into separate images\n# https://docs.docker.com/develop/develop-images/multistage-build/#stop-at-a-specific-build-stage\n# https://docs.docker.com/compose/compose-file/#target\n\nARG NODE_VERSION=14\nARG PHP_VERSION=8.1\nARG CADDY_VERSION=2\n#=======================================================================\nFROM node:${NODE_VERSION}-alpine AS salt_core_js_build\n\nUSER node\nWORKDIR /srv/core\n\nCOPY package.json yarn.lock ./\nRUN yarn install --non-interactive && yarn cache clean;\n\nCOPY webpack.config.js ./\nCOPY assets ./assets/\n\nRUN mkdir -p public/build \\\n  && ./node_modules/.bin/encore production\n\n# https://docs.docker.com/engine/reference/builder/#understand-how-arg-and-from-interact\n#=======================================================================\n# \"php\" stage\nFROM php:${PHP_VERSION}-fpm-alpine AS salt_core_php\n\n# persistent / runtime deps\nRUN apk add --no-cache \\\n\t\tacl \\\n\t\tbash \\\n\t\tfcgi \\\n\t\tfile \\\n\t\tgettext \\\n\t\tgit \\\n\t\tgnu-libiconv \\\n\t;\n\n# install gnu-libiconv and set LD_PRELOAD env to make iconv work fully on Alpine image.\n# see https://github.com/docker-library/php/issues/240#issuecomment-763112749\nENV LD_PRELOAD /usr/lib/preloadable_libiconv.so\n\n\nARG DOCKERIZE_VERSION=v0.6.1\nRUN curl -f -LsS https://github.com/jwilder/dockerize/releases/download/$DOCKERIZE_VERSION/dockerize-alpine-linux-amd64-$DOCKERIZE_VERSION.tar.gz \\\n\t\t\t| tar -C /usr/local/bin -xzvf -\n\nARG APCU_VERSION=5.1.21\n\nRUN set -eux; \\\n\tapk add --no-cache --virtual .build-deps \\\n\t\t$PHPIZE_DEPS \\\n\t\tbzip2-dev \\\n\t\ticu-dev \\\n\t\tlibpng-dev \\\n\t\tlibzip-dev \\\n\t\tmysql-dev \\\n\t\tzlib-dev \\\n\t; \\\n\t\\\n\tdocker-php-ext-configure zip; \\\n\tdocker-php-ext-install -j$(nproc) \\\n\t\tbcmath \\\n\t\tbz2 \\\n\t\tgd \\\n\t\tintl \\\n\t\tmysqli \\\n\t\topcache \\\n\t\tpcntl \\\n\t\tpdo_mysql \\\n\t\tzip \\\n\t; \\\n\tpecl install \\\n\t\tapcu-${APCU_VERSION} \\\n\t; \\\n\tpecl clear-cache; \\\n\tdocker-php-ext-enable \\\n\t\tapcu \\\n\t\topcache \\\n\t; \\\n\t\\\n\trunDeps=\"$( \\\n\t\tscanelf --needed --nobanner --format '%n#p' --recursive /usr/local/lib/php/extensions \\\n\t\t\t| tr ',' '\\n' \\\n\t\t\t| sort -u \\\n\t\t\t| awk 'system(\"[ -e /usr/local/lib/\" $1 \" ]\") == 0 { next } { print \"so:\" $1 }' \\\n\t)\"; \\\n\tapk add --no-cache --virtual .api-phpexts-rundeps $runDeps; \\\n\t\\\n\tapk del .build-deps\n\nCOPY docker/php/docker-healthcheck.sh /usr/local/bin/docker-healthcheck\nRUN chmod +x /usr/local/bin/docker-healthcheck\nHEALTHCHECK --interval=10s --timeout=3s --retries=3 --start-period=30s CMD [\"docker-healthcheck\"]\n\n#COPY docker/php/docker-entrypoint.sh /usr/local/bin/docker-entrypoint\n#RUN chmod +x /usr/local/bin/docker-entrypoint\n#ENTRYPOINT [\"docker-entrypoint\"]\n\n# Install symfony-cli\n#ARG SYMFONY_CLI_VERSION=4.21.6\n#RUN curl -LsS https://github.com/symfony/cli/releases/download/v$SYMFONY_CLI_VERSION/symfony_linux_amd64  -o /usr/local/bin/symfony \\\n#    && chmod a+x /usr/local/bin/symfony \\\n#\t&& symfony self-update -y\n\n# Install and configure composer\nCOPY --from=composer:2 /usr/bin/composer /usr/bin/composer\n\n# https://getcomposer.org/doc/03-cli.md#composer-allow-superuser\nENV COMPOSER_ALLOW_SUPERUSER=1 \\\n    PATH=\"${PATH}:/root/.composer/vendor/bin\" \\\n    COMPOSER_MEMORY_LIMIT=-1\n#    PATH=/composer/vendor/bin:$PATH\n#    COMPOSER_HOME=/composer\n\nRUN ln -s $PHP_INI_DIR/php.ini-production $PHP_INI_DIR/php.ini\nCOPY docker/php/conf.d/*.ini $PHP_INI_DIR/conf.d/\nCOPY docker/php/php-fpm.d/zz-docker.conf /usr/local/etc/php-fpm.d/zz-docker.conf\n\n#RUN composer global require \\\n#        maglnet/composer-require-checker \\\n#        insolita/unused-scanner \\\n#            --prefer-dist --no-progress --no-suggest --classmap-authoritative \\\n#        && composer clear-cache \\\n#\t&& chmod -R a+w ${COMPOSER_HOME}\n\nWORKDIR /srv/core\n\n#=======================================================================\n# \"php\" stage\nFROM salt_core_php AS salt_core_vendors\n\n# prevent the reinstallation of vendors at every changes in the source code\nCOPY composer.json composer.lock symfony.lock ./\nRUN set -eux; \\\n\tcomposer install --no-interaction --prefer-dist --no-autoloader --no-scripts --no-progress; \\\n\tcomposer clear-cache\n\n#=======================================================================\n# Squash the COPY layers into 1 layer\nFROM salt_core_php AS salt_code_layer\n\n# build for production\nARG APP_ENV=prod\n\n# copy only specifically what we need\nCOPY .env \\\n     composer.json composer.lock symfony.lock \\\n     package.json webpack.config.js yarn.lock \\\n     codeception.dist.yml \\\n\t ./\nCOPY bin/ bin/\nCOPY config/ config/\nCOPY migrations/ migrations/\nCOPY public/ public/\nCOPY src/ src/\nCOPY templates/ templates/\nCOPY translations/ translations/\nCOPY tests/ tests/\n\nCOPY --from=salt_core_vendors /srv/core/vendor/ ./vendor/\n# hack to avoid \"Service 'php' failed to build : failed to export image: failed to create image: failed to get layer sha256:38c02bf8b1bff96084338f7e6835b713185e091467e11f08001d41375f078e0e: layer does not exist\"\n# as mentioned in https://github.com/moby/moby/issues/37965#issuecomment-426853382\nRUN true\nCOPY --from=salt_core_js_build /srv/core/public/ ./public/\n\nRUN set -eux; \\\n\tmkdir -p var/cache var/log; \\\n\tchmod 777 var/cache var/log; \\\n\tmkdir -p public/attachments; \\\n\tchmod 777 public/attachments; \\\n\tchmod 777 tests/_output tests/_data tests/_support/_generated; \\\n\tchmod +x bin/console-real; sync; \\\n\tcomposer dump-autoload --no-interaction --classmap-authoritative; \\\n\tcomposer dump-env prod; \\\n\tcomposer run-script post-install-cmd\n\nARG VERSION=3.2.0\nARG BUILD_NUMBER=x\nARG BUILD_DATE=0\nARG COMMIT=unknown\n\nRUN echo ${VERSION}.${BUILD_NUMBER} > public/version.txt ; \\\n    echo ${VERSION}.${BUILD_NUMBER}+${BUILD_DATE}.${COMMIT} > public/revision.txt\n\n#=======================================================================\nFROM salt_core_php AS salt_core_app\n\nENV SYMFONY_PHPUNIT_VERSION=9\n\nARG VERSION=3.2.0\nARG BUILD_NUMBER=x\nARG BUILD_DATE=0\nARG COMMIT=unknown\n\nLABEL org.opencontainers.title=\"OpenSALT PHP Application\" \\\n      org.opencontainers.source=\"https://github.com/opensalt/opensalt\" \\\n      org.opencontainers.version=${VERSION}.${BUILD_NUMBER}+${BUILD_DATE}.${COMMIT}\n\nCOPY --from=salt_code_layer /srv/core/ ./\n\nVOLUME /srv/core/var\nVOLUME /srv/core/public/attachments\n\nUSER www-data\n\n#=======================================================================\nFROM salt_core_app as salt_core_dev\n\nARG XDEBUG_VERSION=3.1.4\n\nUSER root\nRUN set -eux; \\\n\tapk add --no-cache --virtual .build-deps $PHPIZE_DEPS; \\\n\tpecl install xdebug-$XDEBUG_VERSION; \\\n\tdocker-php-ext-enable xdebug; \\\n\tapk del .build-deps\n\nUSER www-data\n\n#=======================================================================\nFROM caddy:${CADDY_VERSION}-builder-alpine AS salt_core_caddy_builder\n\n# install Mercure and Vulcain modules\nARG XCADDY_SKIP_CLEANUP=0\nRUN xcaddy build \\\n    --with github.com/dunglas/mercure \\\n    --with github.com/dunglas/mercure/caddy \\\n    --with github.com/dunglas/vulcain \\\n    --with github.com/dunglas/vulcain/caddy\n\n#=======================================================================\nFROM caddy:${CADDY_VERSION} AS salt_core_caddy\n\nRUN addgroup -g 1001 caddy; \\\n    adduser -u 1001 -G caddy -D -s /sbin/nologin \\\n        -g \"Default Application User\" caddy\n\nCOPY --from=salt_core_caddy_builder /usr/bin/caddy /usr/bin/caddy\nCOPY docker/caddy/Caddyfile /etc/caddy/Caddyfile\nCOPY docker/caddy/docker-healthcheck /usr/local/bin/\nRUN chmod +x /usr/local/bin/docker-healthcheck\nHEALTHCHECK --interval=10s --timeout=3s --retries=3 --start-period=30s CMD [\"docker-healthcheck\"]\n\nRUN mkdir -p /data/caddy /config/caddy ;\\\n    chown -R caddy:caddy /data/caddy /config/caddy\n\nARG VERSION=3.2.0\nARG BUILD_NUMBER=x\nARG BUILD_DATE=0\nARG COMMIT=unknown\n\nLABEL org.opencontainers.title=\"OpenSALT Web Server\" \\\n      org.opencontainers.source=\"https://github.com/opensalt/opensalt\" \\\n      org.opencontainers.version=${VERSION}.${BUILD_NUMBER}+${BUILD_DATE}.${COMMIT}\n\nWORKDIR /srv/core\nVOLUME /data/caddy\nVOLUME /config/caddy\n\nCOPY --from=salt_core_app /srv/core/public public/\n\nUSER caddy\n"
}