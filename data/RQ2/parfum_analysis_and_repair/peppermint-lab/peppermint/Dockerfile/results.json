{
  "startTime": 1674254512261,
  "endTime": 1674254513288,
  "originalSmells": [
    {
      "rule": "yarnCacheCleanAfterInstall",
      "position": {
        "lineStart": 9,
        "lineEnd": 9,
        "columnStart": 4,
        "columnEnd": 34
      }
    },
    {
      "rule": "yarnCacheCleanAfterInstall",
      "position": {
        "lineStart": 27,
        "lineEnd": 27,
        "columnStart": 4,
        "columnEnd": 81
      }
    },
    {
      "rule": "yarnCacheCleanAfterInstall",
      "position": {
        "lineStart": 28,
        "lineEnd": 28,
        "columnStart": 4,
        "columnEnd": 22
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM node:14-alpine AS deps\n\nRUN apk add --no-cache libc6-compat\n\n# Copy over ONLY the package.json and yarn.lock\n# so that this `yarn install` layer is only recomputed\n# if these dependency files change. Nice speed hack!\nWORKDIR /app\nCOPY package.json yarn.lock ./\nRUN yarn install --frozen-lockfile && yarn cache clean;\n\n# Now we make a container to handle our Build\nFROM node:14-alpine AS BUILD_IMAGE\n\n# Set up our work directory again\nWORKDIR /app\n\n# Bring over the deps we installed and now also\n# the rest of the source code to build the Next\n# server for production\nCOPY --from=deps /app/node_modules ./node_modules\nCOPY . .\nRUN yarn build\n\n# Remove all the development dependencies since we don't\n# need them to run the actual server.\nRUN rm -rf node_modules\nRUN yarn install --production --frozen-lockfile --ignore-scripts --prefer-offline && yarn cache clean;\nRUN yarn remove bcrypt && yarn add bcrypt && yarn cache clean;\nRUN yarn add --dev typescript @types/node --network-timeout 1000000 && yarn add prisma -g --network-timeout 1000000\n\n\nFROM node:14-alpine\n\nRUN apk update\nRUN apk add --no-cache bash\n\nRUN addgroup -g 1001 -S nodejs\nRUN adduser -S nextjs -u 1001\n\nWORKDIR /app\nCOPY --from=BUILD_IMAGE --chown=nextjs:nodejs /app/package.json /app/yarn.lock ./\nCOPY --from=BUILD_IMAGE --chown=nextjs:nodejs /app/node_modules ./node_modules\nCOPY --from=BUILD_IMAGE --chown=nextjs:nodejs /app/public ./public\nCOPY --from=BUILD_IMAGE --chown=nextjs:nodejs /app/.next ./.next\nCOPY --from=BUILD_IMAGE --chown=nextjs:nodejs /app/start.sh ./\nCOPY --from=BUILD_IMAGE --chown=nextjs:nodejs /app/prisma ./prisma\nCOPY --from=BUILD_IMAGE --chown=nextjs:nodejs /app/.env ./\n\nCOPY --from=BUILD_IMAGE --chown=nextjs:nodejs /app/next.config.js  ./\n\nENV NODE_ENV production\nENV PORT 5001\nEXPOSE 5001\n\nCMD bash -C './start.sh';'bash'"
}