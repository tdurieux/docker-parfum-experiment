{
  "startTime": 1674253256216,
  "endTime": 1674253256964,
  "originalSmells": [
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 99,
        "lineEnd": 99,
        "columnStart": 4,
        "columnEnd": 42
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 100,
        "lineEnd": 100,
        "columnStart": 4,
        "columnEnd": 54
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "ARG BASEOS\nARG BASEVER\nARG PG_FULL\nARG PREFIX\nARG BASE_IMAGE_NAME\nFROM ${PREFIX}/${BASE_IMAGE_NAME}:${BASEOS}-${PG_FULL}-${BASEVER}\n\n# For RHEL8 all arguments used in main code has to be specified after FROM\nARG PG_FULL\nARG BASEOS\nARG DFSET\nARG PACKAGER\n\n# ===== Early lines ordered for leveraging cache, reorder carefully =====\nARG PG_MAJOR\n# Needed due to lack of environment substitution trick on ADD\nARG PG_LBL\n\nRUN ${PACKAGER} -y install --nodocs \\\n\t--disablerepo=crunchypg* \\\n\t--enablerepo=\"crunchypg${PG_LBL}\" \\\n\tpostgresql${PG_LBL} \\\n && ${PACKAGER} -y clean all\n\n# Preserving PGVERSION out of paranoia\nENV PGROOT=\"/usr/pgsql-${PG_MAJOR}\" PGVERSION=\"${PG_MAJOR}\"\n\nARG PATRONI_VER\nARG BACKREST_VER\n\n# Separate yum run matching postgres-ha image, leverages cached layer\nRUN if [ \"$DFSET\" = \"centos\" ] ; then \\\n        ${PACKAGER} -y install --nodocs \\\n        \t--setopt=skip_missing_names_on_install=False \\\n        \topenssh-clients \\\n        \topenssh-server \\\n        \tpgaudit${PG_MAJOR//.} \\\n        \tpgaudit${PG_MAJOR//.}_set_user \\\n        \tpg_partman_${PG_MAJOR//.} \\\n        \tpg_cron_${PG_MAJOR//.} \\\n        \tcrunchy-backrest-${BACKREST_VER} \\\n        \tpostgresql${PG_MAJOR//.}-contrib \\\n        \tpostgresql${PG_MAJOR//.}-server \\\n        \tpostgresql${PG_MAJOR//.}-plpython* \\\n        \tpgnodemx${PG_MAJOR//.} \\\n        \t$( printf '11\\n'${PG_MAJOR} | sort -VC && echo postgresql${PG_MAJOR}-llvmjit ) \\\n        \tpsmisc \\\n        \tpython3-pip \\\n        \tpython3-psutil \\\n        \tpython3-psycopg2 \\\n        \trsync \\\n        \t$( printf '11\\n'${PG_MAJOR} | sort -VC && echo timescaledb_${PG_MAJOR} ) \\\n        \twal2json_${PG_MAJOR//.} \\\n        \tfile \\\n        \tgettext \\\n        \thostname \\\n        \tprocps-ng \\\n        \tpgaudit_analyze \\\n        \tunzip \\\n        \tbzip2 \\\n        \tlz4 \\\n\t\t\tkrb5-workstation \\\n        && ${PACKAGER} -y clean all ; \\\nelse \\\n        ${PACKAGER} -y install --nodocs \\\n\t\t--enablerepo=\"epel\" \\\n\t\topenssh-clients \\\n\t\topenssh-server \\\n\t\tpgaudit${PG_MAJOR//.} \\\n\t\tpgaudit${PG_MAJOR//.}_set_user \\\n\t\tpg_partman_${PG_MAJOR//.} \\\n\t\tpg_cron_${PG_MAJOR//.} \\\n\t\tcrunchy-backrest-${BACKREST_VER} \\\n\t\tpostgresql${PG_MAJOR//.}-contrib \\\n\t\tpostgresql${PG_MAJOR//.}-server \\\n\t\tpostgresql${PG_MAJOR//.}-plpython* \\\n\t\tpgnodemx${PG_MAJOR//.} \\\n\t\t$( printf '11\\n'${PG_MAJOR} | sort -VC && echo postgresql${PG_MAJOR}-llvmjit ) \\\n\t\tpsmisc \\\n\t\tpython3-pip \\\n\t\tpython3-psutil \\\n\t\tpython3-psycopg2 \\\n\t\trsync \\\n\t\t$( printf '11\\n'${PG_MAJOR} | sort -VC && echo timescaledb_${PG_MAJOR} ) \\\n\t\twal2json_${PG_MAJOR//.} \\\n\t\tfile \\\n\t\tunzip \\\n\t\ttar \\\n\t\tbzip2 \\\n\t\tlz4 \\\n\t\tkrb5-workstation \\\n\t&& ${PACKAGER} -y install --nodocs \\\n\t\t--setopt=tsflags='' \\\n\t\t--enablerepo=\"epel\" \\\n\t\tpgaudit_analyze \\\n\t&& ${PACKAGER} -y clean all --enablerepo=\"epel\" ; \\\nfi\n\n# install patroni for Kube\nRUN pip3 install --no-cache-dir --upgrade python-dateutil \\\n\t&& pip3 install --no-cache-dir patroni[kubernetes]==\"${PATRONI_VER}\"\n\nENV PATH=\"${PGROOT}/bin:${PATH}\"\n\nLABEL name=\"postgres\" \\\n\tsummary=\"Crunchy PostgreSQL ${PG_FULL}\" \\\n\tdescription=\"Postgres ready for production: high availability, disaster recovery, monitoring, security, and performance. Works with PGO, the open source Postgres Operator from Crunchy Data.\" \\\n\tio.k8s.description=\"Crunchy PostgreSQL is ready for production: the trusted open source distribution of PostgreSQL. Works with PGO, the open source Postgres Operator from Crunchy Data.\" \\\n\tio.k8s.display-name=\"Crunchy PostgreSQL\" \\\n\tio.openshift.tags=\"postgresql,postgres,postgis,sql,nosql,database,ha,crunchy\" \\\n\tpostgresql.version.major=\"${PG_MAJOR}\" \\\n\tpostgresql.version=\"${PG_FULL}\"\n\n# set up crunchy directory\nRUN mkdir -p /opt/crunchy/bin /opt/crunchy/conf /pgdata /pgwal /pgconf /backrestrepo\n\nRUN chown -R postgres:postgres /opt/crunchy /var/lib/pgsql \\\n\t\t/pgdata /pgwal /pgconf /backrestrepo &&  \\\n\tchmod -R g=u /opt/crunchy /var/lib/pgsql \\\n\t\t/pgdata /pgwal /pgconf /backrestrepo\n\n# open up the postgres port\nEXPOSE 5432\n\nADD bin/postgres_common /opt/crunchy/bin\nADD bin/common /opt/crunchy/bin\nADD conf/postgres_common /opt/crunchy/conf\nADD tools/pgmonitor/postgres_exporter/common /opt/crunchy/bin/modules/pgexporter\nADD tools/pgmonitor/postgres_exporter/linux /opt/crunchy/bin/modules/pgexporter\n\nRUN mkdir /.ssh && chown 26:0 /.ssh && chmod g+rwx /.ssh && rm -f /run/nologin\n\n# remove the default spool directory so that pgBackRest does not attempt to look there when\n# performing a restore (pgBackRest will not have permissions to access to this dir in all envs)\nRUN rm -rf /var/spool/pgbackrest\n\n# add volumes to allow override of pg_hba.conf and postgresql.conf\n# add volumes to allow storage of postgres WAL segment files\n# add volumes to locate WAL files to recover with\n# add volumes for pgbackrest to write to\n# The VOLUME directive must appear after all RUN directives to ensure the proper\n# volume permissions are applied when building the image\nVOLUME [\"/pgdata\", \"/pgwal\", \"/pgconf\", \"/backrestrepo\", \"/sshd\"]\n\n# Defines a unique directory name that will be utilized by the nss_wrapper in the UID script\nENV NSS_WRAPPER_SUBDIR=\"postgres\"\n\nENTRYPOINT [\"/opt/crunchy/bin/uid_postgres.sh\"]\n\nUSER 26\n\nCMD [\"/opt/crunchy/bin/start.sh\"]\n"
}