{"repository":"https://github.com/mmb/meme_captain_web","dockerfilePath":"Dockerfile","startTime":1672200154055,"clone":{"stdout":"","stderr":"Cloning into '/tmp/dinghy-analysis/mmb/meme_captain_web'...\n","error":null,"commit":"731eeeeaa15f0336638db03b21b90c621b0e93ff"},"originalBuild":{"startTimestamp":1672200155233,"endTimestamp":1672200231240,"error":{"code":1,"killed":false,"signal":null,"cmd":"docker build --no-cache --force-rm -t meme_captain_web:latest -f /tmp/dinghy-analysis/mmb/meme_captain_web/Dockerfile ."},"stdout":"Sending build context to Docker daemon  2.317MB\r\r\nStep 1/11 : FROM mm62/meme-captain-web-deps\nlatest: Pulling from mm62/meme-captain-web-deps\nef0380f84d05: Pulling fs layer\n39f6a1eefe81: Pulling fs layer\n4aa256b667b1: Pulling fs layer\n4afbf1cca37a: Pulling fs layer\n7fff2f6c1b5e: Pulling fs layer\n3799bbf0478f: Pulling fs layer\n44210b067c44: Pulling fs layer\n4afbf1cca37a: Waiting\n7fff2f6c1b5e: Waiting\n3799bbf0478f: Waiting\n44210b067c44: Waiting\n39f6a1eefe81: Verifying Checksum\n39f6a1eefe81: Download complete\nef0380f84d05: Verifying Checksum\nef0380f84d05: Download complete\n4afbf1cca37a: Verifying Checksum\n4afbf1cca37a: Download complete\n7fff2f6c1b5e: Verifying Checksum\n7fff2f6c1b5e: Download complete\n3799bbf0478f: Verifying Checksum\n3799bbf0478f: Download complete\n44210b067c44: Verifying Checksum\n44210b067c44: Download complete\n4aa256b667b1: Verifying Checksum\n4aa256b667b1: Download complete\nef0380f84d05: Pull complete\n39f6a1eefe81: Pull complete\n4aa256b667b1: Pull complete\n4afbf1cca37a: Pull complete\n7fff2f6c1b5e: Pull complete\n3799bbf0478f: Pull complete\n44210b067c44: Pull complete\nDigest: sha256:f4234edc42f6a8aad5a922bdcfa3b1da2b99d2424f22636150b59edbb04a3ba5\nStatus: Downloaded newer image for mm62/meme-captain-web-deps:latest\n ---> 4265995573c1\nStep 2/11 : MAINTAINER matthewm@boedicker.org\n ---> Running in 09edbf17fa0e\nRemoving intermediate container 09edbf17fa0e\n ---> 9faaa1319d8b\nStep 3/11 : COPY . /app\n ---> 0c3e84063228\nStep 4/11 : WORKDIR /app\n ---> Running in 6de723c151ff\nRemoving intermediate container 6de723c151ff\n ---> caeb1c41a271\nStep 5/11 : RUN /usr/local/sbin/varnishd -C -f docker/default.vcl\n ---> Running in 0665798ab667\n\u001b[91m/* ---===### include/vdef.h ###===--- */\n\n/*-\n * Copyright (c) 2006 Verdens Gang AS\n * Copyright (c) 2012 Fastly Inc\n * Copyright (c) 2006-2015 Varnish Software AS\n * All rights reserved.\n *\n * Author: Poul-Henning Kamp <phk@phk.freebsd.dk>\n * Author: Rogier 'DocWilco' Mulhuijzen <rogier@fastly.com>\n *\n * Inspired by FreeBSD's <sys/cdefs.h>\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions\n * are met:\n * 1. Redistributions of source code must retain the above copyright\n *    notice, this list of conditions and the following disclaimer.\n * 2. Redistributions in binary form must reproduce the above copyright\n *    notice, this list of conditions and the following disclaimer in the\n *    documentation and/or other materials provided with the distribution.\n *\n * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND\n * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n * ARE DISCLAIMED.  IN NO EVENT SHALL AUTHOR OR CONTRIBUTORS BE LIABLE\n * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS\n * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)\n * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT\n * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY\n * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n * SUCH DAMAGE.\n *\n */\n\n#ifndef VDEF_H_INCLUDED\n#define VDEF_H_INCLUDED\n\n/* Safe printf into a fixed-size buffer */\n#define bprintf(buf, fmt, ...)\t\t\t\t\t\t\\\n\tdo {\t\t\t\t\t\t\t\t\\\n\t\tassert(snprintf(buf, sizeof buf, fmt, __VA_ARGS__)\t\\\n\t\t    < sizeof buf);\t\t\t\t\t\\\n\t} while (0)\n\n/* Safe printf into a fixed-size buffer */\n#define vbprintf(buf, fmt, ap)\t\t\t\t\t\t\\\n\tdo {\t\t\t\t\t\t\t\t\\\n\t\tassert(vsnprintf(buf, sizeof buf, fmt, ap)\t\t\\\n\t\t    < sizeof buf);\t\t\t\t\t\\\n\t} while (0)\n\n/* Close and discard filedescriptor */\n#define closefd(fdp)\t\t\t\t\\\n\tdo {\t\t\t\t\t\\\n\t\tassert(*(fdp) >= 0);\t\t\\\n\t\tAZ(close(*(fdp)));\t\t\\\n\t\t*(fdp) = -1;\t\t\t\\\n\t} while (0)\n\n#ifndef __GNUC_PREREQ\n# if defined __GNUC__ && defined __GNUC_MINOR__\n#  define __GNUC_PREREQ(maj, min) \\\n\t(__GNUC__ > (maj) || (__GNUC__ == (maj) && __GNUC_MINOR__ >= (min)))\n# else\n#  define __GNUC_PREREQ(maj, min) 0\n# endif\n#endif\n\n#ifdef __printflike\n#  define __v_printflike(f,a) __printflike(f,a)\n#elif __GNUC_PREREQ(2, 95) || defined(__INTEL_COMPILER)\n#  define __v_printflike(f,a) __attribute__((format(printf, f, a)))\n#else\n#  define __v_printflike(f,a)\n#endif\n\n/*********************************************************************\n * Pointer alignment magic\n */\n\n#if defined(__sparc__)\n/* NB: Overbroad test for 32bit userland on 64bit SPARC cpus. */\n#  define PALGN\t    (sizeof(double) - 1)\t/* size of alignment */\n#else\n#  define PALGN\t    (sizeof(void *) - 1)\t/* size of alignment */\n#endif\n#define PAOK(p)\t    (((uintptr_t)(p) & PALGN) == 0)\t/* is aligned */\n#define PRNDDN(p)   ((uintptr_t)(p) & ~PALGN)\t\t/* Round down */\n#define PRNDUP(p)   (((uintptr_t)(p) + PALGN) & ~PALGN)\t/* Round up */\n\n/*********************************************************************\n * To be used as little as possible to wash off const/volatile etc.\n */\n#define TRUST_ME(ptr)\t((void*)(uintptr_t)(ptr))\n\n/**********************************************************************\n * Generic power-2 rounding macros\n */\n\n#define PWR2(x)     ((((x)-1UL)&(x))==0)\t\t/* Is a power of two */\n#define RDN2(x, y)  ((x)&(~((uintptr_t)(y)-1UL)))\t/* PWR2(y) true */\n#define RUP2(x, y)  (((x)+((y)-1))&(~((uintptr_t)(y)-1UL))) /* PWR2(y) true */\n\n/**********************************************************************\n * FlexeLint and compiler shutuppery\n */\n\n/*\n * In OO-light situations, functions have to match their prototype\n * even if that means not const'ing a const'able argument.\n * The typedef should be specified as argument to the macro.\n */\n#define __match_proto__(xxx)\t\t/*lint -e{818} */\n\n/*\n * State variables may change value before we have considered the\n * previous value\n */\n#define __state_variable__(varname)\tvarname /*lint -esym(838,varname) */\n\n#ifdef __SUNPRO_C\n#define NEEDLESS(s)\t\t{}\n#define __unused\n#else\n#define NEEDLESS(s)\t\ts\n#endif\n\n#endif /* VDEF_H_INCLUDED */\n\n/* ---===### include/vcl.h ###===--- */\n\n/*\n * NB:  This file is machine generated, DO NOT EDIT!\n *\n * Edit and run lib/libvcc/generate.py instead.\n */\n\n\nstruct vrt_ctx;\n#define VRT_CTX const struct vrt_ctx *ctx\nstruct req;\nstruct busyobj;\nstruct ws;\nstruct cli;\nstruct worker;\n\nenum vcl_event_e {\n\tVCL_EVENT_LOAD,\n\tVCL_EVENT_WARM,\n\tVCL_EVENT_COLD,\n\tVCL_EVENT_DISCARD,\n};\n\ntypedef int vcl_event_f(VRT_CTX, enum vcl_event_e);\ntypedef int vcl_init_f(VRT_CTX);\ntypedef void vcl_fini_f(VRT_CTX);\ntypedef void vcl_func_f(VRT_CTX);\n\n/* VCL Methods */\n#define VCL_MET_RECV\t\t\t(1U << 1)\n#define VCL_MET_PIPE\t\t\t(1U << 2)\n#define VCL_MET_PASS\t\t\t(1U << 3)\n#define VCL_MET_HASH\t\t\t(1U << 4)\n#define VCL_MET_PURGE\t\t\t(1U << 5)\n#define VCL_MET_MISS\t\t\t(1U << 6)\n#define VCL_MET_HIT\t\t\t(1U << 7)\n#define VCL_MET_DELIVER\t\t\t(1U << 8)\n#define VCL_MET_SYNTH\t\t\t(1U << 9)\n#define VCL_MET_BACKEND_FETCH\t\t(1U << 10)\n#define VCL_MET_BACKEND_RESPONSE\t(1U << 11)\n#define VCL_MET_BACKEND_ERROR\t\t(1U << 12)\n#define VCL_MET_INIT\t\t\t(1U << 13)\n#define VCL_MET_FINI\t\t\t(1U << 14)\n\n#define VCL_MET_MAX\t\t\t15\n\n#define VCL_MET_MASK\t\t\t0x7fff\n\n/* VCL Returns */\n#define VCL_RET_ABANDON\t\t\t1\n#define VCL_RET_DELIVER\t\t\t2\n#define VCL_RET_FAIL\t\t\t3\n#define VCL_RET_FETCH\t\t\t4\n#define VCL_RET_HASH\t\t\t5\n#define VCL_RET_LOOKUP\t\t\t6\n#define VCL_RET_MISS\t\t\t7\n#define VCL_RET_OK\t\t\t8\n#define VCL_RET_PASS\t\t\t9\n#define VCL_RET_PIPE\t\t\t10\n#define VCL_RET_PURGE\t\t\t11\n#define VCL_RET_RESTART\t\t\t12\n#define VCL_RET_RETRY\t\t\t13\n#define VCL_RET_SYNTH\t\t\t14\n#define VCL_RET_VCL\t\t\t15\n\n#define VCL_RET_MAX\t\t\t16\n\nstruct VCL_conf {\n\tunsigned\t\t\tmagic;\n#define VCL_CONF_MAGIC\t\t\t0x7406c509\t/* from /dev/random */\n\n\tstruct director\t\t\t**default_director;\n\tconst struct vrt_backend_probe\t*default_probe;\n\tunsigned\t\t\tnref;\n\tstruct vrt_ref\t\t\t*ref;\n\n\tunsigned\t\t\tnsrc;\n\tconst char\t\t\t**srcname;\n\tconst char\t\t\t**srcbody;\n\n\tvcl_event_f\t\t\t*event_vcl;\n\tvcl_func_f\t*recv_func;\n\tvcl_func_f\t*pipe_func;\n\tvcl_func_f\t*pass_func;\n\tvcl_func_f\t*hash_func;\n\tvcl_func_f\t*purge_func;\n\tvcl_func_f\t*miss_func;\n\tvcl_func_f\t*hit_func;\n\tvcl_func_f\t*deliver_func;\n\tvcl_func_f\t*synth_func;\n\tvcl_func_f\t*backend_fetch_func;\n\tvcl_func_f\t*backend_response_func;\n\tvcl_func_f\t*backend_error_func;\n\tvcl_func_f\t*init_func;\n\tvcl_func_f\t*fini_func;\n\n};\n\n/* ---===### include/vrt.h ###===--- */\n\n/*-\n * Copyright (c) 2006 Verdens Gang AS\n * Copyright (c) 2006-2015 Varnish Software AS\n * All rights reserved.\n *\n * Author: Poul-Henning Kamp <phk@phk.freebsd.dk>\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions\n * are met:\n * 1. Redistributions of source code must retain the above copyright\n *    notice, this list of conditions and the following disclaimer.\n * 2. Redistributions in binary form must reproduce the above copyright\n *    notice, this list of conditions and the following disclaimer in the\n *    documentation and/or other materials provided with the distribution.\n *\n * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND\n * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n * ARE DISCLAIMED.  IN NO EVENT SHALL AUTHOR OR CONTRIBUTORS BE LIABLE\n * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS\n * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)\n * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT\n * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY\n * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n * SUCH DAMAGE.\n *\n * Runtime support for compiled VCL programs and VMODs.\n *\n * NB: When this file is changed, lib/libvcc/generate.py *MUST* be rerun.\n */\n\n/***********************************************************************\n * Major and minor VRT API versions.\n *\n * Whenever something is added, increment MINOR version\n * Whenever something is deleted or changed in a way which is not\n * binary/load-time compatible, increment MAJOR version\n *\n *\n * 6.1 (unreleased):\n *\thttp_CollectHdrSep added\n * 6.0 (2017-03-15):\n *\tVRT_hit_for_pass added\n *\tVRT_ipcmp added\n *\tVRT_Vmod_Init signature changed\n *\tVRT_vcl_lookup removed\n *\tVRT_vcl_get added\n *\tVRT_vcl_rel added\n *\tVRT_fail added\n *\tWS_Reset and WS_Snapshot signatures changed\n *\tWS_Front added\n *\tWS_ReserveLumps added\n *\tWS_Inside added\n *\tWS_Assert_Allocated added\n * 5.0:\n *\tVarnish 5.0 release \"better safe than sorry\" bump\n * 4.0:\n *\tVCL_BYTES changed to long long\n *\tVRT_CacheReqBody changed signature\n * 3.2:\n *\tvrt_backend grew .proxy_header field\n *\tvrt_ctx grew .sp field.\n *\tvrt_acl type added\n */\n\n#define VRT_MAJOR_VERSION\t6U\n\n#define VRT_MINOR_VERSION\t0U\n\n\n/***********************************************************************/\n\n#ifdef __v_printflike\n#  define __vrt_printflike(a,b) __v_printflike(a,b)\n#else\n#  define __vrt_printflike(a,b)\n#endif\n\nstruct VCL_conf;\nstruct vrt_acl;\nstruct busyobj;\nstruct director;\nstruct http;\nstruct req;\nstruct stevedore;\nstruct suckaddr;\nstruct vcl;\nstruct vmod;\nstruct vsb;\nstruct vsl_log;\nstruct ws;\n\n/***********************************************************************\n * This is the central definition of the mapping from VCL types to\n * C-types.  The python scripts read these from here.\n * (alphabetic order)\n */\n\ntypedef const struct vrt_acl *\t\t\tVCL_ACL;\ntypedef const struct director *\t\t\tVCL_BACKEND;\ntypedef const struct vmod_priv *\t\tVCL_BLOB;\ntypedef const char *\t\t\t\tVCL_BODY;\ntypedef unsigned\t\t\t\tVCL_BOOL;\ntypedef long long\t\t\t\tVCL_BYTES;\ntypedef double\t\t\t\t\tVCL_DURATION;\ntypedef const char *\t\t\t\tVCL_ENUM;\ntypedef const struct gethdr_s *\t\t\tVCL_HEADER;\ntypedef struct http *\t\t\t\tVCL_HTTP;\ntypedef void\t\t\t\t\tVCL_INSTANCE;\ntypedef long\t\t\t\t\tVCL_INT;\ntypedef const struct suckaddr *\t\t\tVCL_IP;\ntypedef const struct vrt_backend_probe *\tVCL_PROBE;\ntypedef double\t\t\t\t\tVCL_REAL;\ntypedef const struct stevedore *\t\tVCL_STEVEDORE;\ntypedef const char *\t\t\t\tVCL_STRING;\ntypedef double\t\t\t\t\tVCL_TIME;\ntypedef struct vcl *\t\t\t\tVCL_VCL;\ntypedef void\t\t\t\t\tVCL_VOID;\n\n/***********************************************************************\n * This is the composite argument we pass to compiled VCL and VRT\n * functions.\n */\n\nstruct vrt_ctx {\n\tunsigned\t\t\tmagic;\n#define VRT_CTX_MAGIC\t\t\t0x6bb8f0db\n\n\tunsigned\t\t\tmethod;\n\tunsigned\t\t\t*handling;\n\n\tstruct vsb\t\t\t*msg;\t// Only in ...init()\n\tstruct vsl_log\t\t\t*vsl;\n\tstruct vcl\t\t\t*vcl;\n\tstruct ws\t\t\t*ws;\n\n\tstruct sess\t\t\t*sp;\n\n\tstruct req\t\t\t*req;\n\tstruct http\t\t\t*http_req;\n\tstruct http\t\t\t*http_req_top;\n\tstruct http\t\t\t*http_resp;\n\n\tstruct busyobj\t\t\t*bo;\n\tstruct http\t\t\t*http_bereq;\n\tstruct http\t\t\t*http_beresp;\n\n\tdouble\t\t\t\tnow;\n\n\t/*\n\t * method specific argument:\n\t *    hash:\t\tstruct SHA256Context\n\t *    synth+error:\tstruct vsb *\n\t */\n\tvoid\t\t\t\t*specific;\n};\n\n#define VRT_CTX\t\tconst struct vrt_ctx *ctx\n\n/***********************************************************************/\n\nstruct vmod_data {\n\t/* The version/id fields must be first, they protect the rest */\n\tunsigned\t\t\tvrt_major;\n\tunsigned\t\t\tvrt_minor;\n\tconst char\t\t\t*file_id;\n\n\tconst char\t\t\t*name;\n\tconst void\t\t\t*func;\n\tint\t\t\t\tfunc_len;\n\tconst char\t\t\t*proto;\n\tconst char\t\t\t* const *spec;\n\tconst char\t\t\t*abi;\n};\n\n/***********************************************************************/\n\nenum gethdr_e { HDR_REQ, HDR_REQ_TOP, HDR_RESP, HDR_OBJ, HDR_BEREQ,\n\t\tHDR_BERESP };\n\nstruct gethdr_s {\n\tenum gethdr_e\twhere;\n\tconst char\t*what;\n};\n\nextern const void * const vrt_magic_string_end;\nextern const void * const vrt_magic_string_unset;\n\n/***********************************************************************\n * We want the VCC to spit this structs out as const, but when VMODs\n * come up with them we want to clone them into malloc'ed space which\n * we can free again.\n * We collect all the knowledge here by macroizing the fields and make\n * a macro for handling them all.\n * See also:  cache_backend.h & cache_backend_cfg.c\n * One of those things...\n */\n\n#define VRT_BACKEND_FIELDS(rigid)\t\t\t\t\\\n\trigid char\t\t\t*vcl_name;\t\t\\\n\trigid char\t\t\t*ipv4_addr;\t\t\\\n\trigid char\t\t\t*ipv6_addr;\t\t\\\n\trigid char\t\t\t*port;\t\t\t\\\n\trigid char\t\t\t*hosthdr;\t\t\\\n\tdouble\t\t\t\tconnect_timeout;\t\\\n\tdouble\t\t\t\tfirst_byte_timeout;\t\\\n\tdouble\t\t\t\tbetween_bytes_timeout;\t\\\n\tunsigned\t\t\tmax_connections;\t\\\n\tunsigned\t\t\tproxy_header;\n\n#define VRT_BACKEND_HANDLE()\t\t\t\\\n\tdo {\t\t\t\t\t\\\n\t\tDA(vcl_name);\t\t\t\\\n\t\tDA(ipv4_addr);\t\t\t\\\n\t\tDA(ipv6_addr);\t\t\t\\\n\t\tDA(port);\t\t\t\\\n\t\tDA(hosthdr);\t\t\t\\\n\t\tDN(connect_timeout);\t\t\\\n\t\tDN(first_byte_timeout);\t\t\\\n\t\tDN(between_bytes_timeout);\t\\\n\t\tDN(max_connections);\t\t\\\n\t\tDN(proxy_header);\t\t\\\n\t} while(0)\n\nstruct vrt_backend {\n\tunsigned\t\t\tmagic;\n#define VRT_BACKEND_MAGIC\t\t0x4799ce6b\n\tVRT_BACKEND_FIELDS(const)\n\tconst struct suckaddr\t\t*ipv4_suckaddr;\n\tconst struct suckaddr\t\t*ipv6_suckaddr;\n\tconst struct vrt_backend_probe\t*probe;\n};\n\n#define VRT_BACKEND_PROBE_FIELDS(rigid)\t\t\t\t\\\n\tdouble\t\t\t\ttimeout;\t\t\\\n\tdouble\t\t\t\tinterval;\t\t\\\n\tunsigned\t\t\texp_status;\t\t\\\n\tunsigned\t\t\twindow;\t\t\t\\\n\tunsigned\t\t\tthreshold;\t\t\\\n\tunsigned\t\t\tinitial;\n\n#define VRT_BACKEND_PROBE_HANDLE()\t\t\\\n\tdo {\t\t\t\t\t\\\n\t\tDN(timeout);\t\t\t\\\n\t\tDN(interval);\t\t\t\\\n\t\tDN(exp_status);\t\t\t\\\n\t\tDN(window);\t\t\t\\\n\t\tDN(threshold);\t\t\t\\\n\t\tDN(initial);\t\t\t\\\n\t} while (0)\n\nstruct vrt_backend_probe {\n\tunsigned\t\t\tmagic;\n#define VRT_BACKEND_PROBE_MAGIC\t\t0x84998490\n\tconst char\t\t\t*url;\n\tconst char\t\t\t*request;\n\tVRT_BACKEND_PROBE_FIELDS(const)\n};\n\n/***********************************************************************/\n\n/*\n * other stuff.\n * XXX: document when bored\n */\n\nstruct vrt_ref {\n\tunsigned\tsource;\n\tunsigned\toffset;\n\tunsigned\tline;\n\tunsigned\tpos;\n\tconst char\t*token;\n};\n\n/* ACL related */\n#define VRT_ACL_MAXADDR\t\t16\t/* max(IPv4, IPv6) */\n\ntypedef int acl_match_f(VRT_CTX, const VCL_IP);\n\nstruct vrt_acl {\n\tunsigned\tmagic;\n#define VRT_ACL_MAGIC\t0x78329d96\n\tacl_match_f\t*match;\n};\n\nvoid VRT_acl_log(VRT_CTX, const char *msg);\nint VRT_acl_match(VRT_CTX, VCL_ACL, VCL_IP);\n\n/* req related */\n\nVCL_BYTES VRT_CacheReqBody(VRT_CTX, VCL_BYTES maxsize);\n\n/* Regexp related */\nvoid VRT_re_init(void **, const char *);\nvoid VRT_re_fini(void *);\nint VRT_re_match(VRT_CTX, const char *, void *re);\nconst char *VRT_regsub(VRT_CTX, int all, const char *, void *, const char *);\n\nvoid VRT_ban_string(VRT_CTX, const char *);\nvoid VRT_purge(VRT_CTX, double ttl, double grace, double keep);\n\nvoid VRT_count(VRT_CTX, unsigned);\nvoid VRT_synth(VRT_CTX, unsigned, const char *);\nvoid VRT_hit_for_pass(VRT_CTX, VCL_DURATION);\n\nstruct http *VRT_selecthttp(VRT_CTX, enum gethdr_e);\nconst char *VRT_GetHdr(VRT_CTX, const struct gethdr_s *);\nvoid VRT_SetHdr(VRT_CTX, const struct gethdr_s *, const char *, ...);\nvoid VRT_handling(VRT_CTX, unsigned hand);\nvoid VRT_fail(VRT_CTX, const char *fmt, ...) __vrt_printflike(2,3);\n\nvoid VRT_hashdata(VRT_CTX, const char *str, ...);\n\n/* Simple stuff */\nint VRT_strcmp(const char *s1, const char *s2);\nvoid VRT_memmove(void *dst, const void *src, unsigned len);\nint VRT_ipcmp(const struct suckaddr *sua1, const struct suckaddr *sua2);\n\nvoid VRT_Rollback(VRT_CTX, const struct http *);\n\n/* Synthetic pages */\nvoid VRT_synth_page(VRT_CTX, const char *, ...);\n\n/* Backend related */\nstruct director *VRT_new_backend(VRT_CTX, const struct vrt_backend *);\nvoid VRT_delete_backend(VRT_CTX, struct director **);\n\n/* Suckaddr related */\nint VRT_VSA_GetPtr(const struct suckaddr *sua, const unsigned char ** dst);\n\n/* VMOD/Modules related */\nint VRT_Vmod_Init(VRT_CTX, struct vmod **hdl, void *ptr, int len,\n    const char *nm, const char *path, const char *file_id, const char *backup);\nvoid VRT_Vmod_Fini(struct vmod **hdl);\n\n/* VCL program related */\nVCL_VCL VRT_vcl_get(VRT_CTX, const char *);\nvoid VRT_vcl_rel(VRT_CTX, VCL_VCL);\nvoid VRT_vcl_select(VRT_CTX, VCL_VCL);\n\nstruct vmod_priv;\ntypedef void vmod_priv_free_f(void *);\nstruct vmod_priv {\n\tvoid\t\t\t*priv;\n\tint\t\t\tlen;\n\tvmod_priv_free_f\t*free;\n};\n\n#ifdef VCL_RET_MAX\ntypedef int vmod_event_f(VRT_CTX, struct vmod_priv *, enum vcl_event_e);\n#endif\n\nstruct vclref;\nstruct vclref * VRT_ref_vcl(VRT_CTX, const char *);\nvoid VRT_rel_vcl(VRT_CTX, struct vclref **);\n\nvoid VRT_priv_fini(const struct vmod_priv *p);\nstruct vmod_priv *VRT_priv_task(VRT_CTX, void *vmod_id);\nstruct vmod_priv *VRT_priv_top(VRT_CTX, void *vmod_id);\n\n/* Stevedore related functions */\nint VRT_Stv(const char *nm);\nVCL_STEVEDORE VRT_stevedore(const char *nm);\n\n/* Convert things to string */\n\nchar *VRT_IP_string(VRT_CTX, VCL_IP);\nchar *VRT_INT_string(VRT_CTX, VCL_INT);\nchar *VRT_REAL_string(VRT_CTX, VCL_REAL);\nchar *VRT_TIME_string(VRT_CTX, VCL_TIME);\nconst char *VRT_BOOL_string(VCL_BOOL);\nconst char *VRT_BACKEND_string(VCL_BACKEND);\nconst char *VRT_STEVEDORE_string(VCL_STEVEDORE);\nconst char *VRT_CollectString(VRT_CTX, const char *p, ...);\n\n/* ---===### include/vrt_obj.h ###===--- */\n\n/*\n * NB:  This file is machine generated, DO NOT EDIT!\n *\n * Edit and run lib/libvcc/generate.py instead.\n */\n\n\nVCL_HTTP VRT_r_bereq(VRT_CTX);\n\nVCL_BACKEND VRT_r_bereq_backend(VRT_CTX);\nvoid VRT_l_bereq_backend(VRT_CTX, VCL_BACKEND);\n\nVCL_DURATION VRT_r_bereq_between_bytes_timeout(VRT_CTX);\nvoid VRT_l_bereq_between_bytes_timeout(VRT_CTX, VCL_DURATION);\n\nvoid VRT_l_bereq_body(VRT_CTX, const char *, ...);\n\nVCL_DURATION VRT_r_bereq_connect_timeout(VRT_CTX);\nvoid VRT_l_bereq_connect_timeout(VRT_CTX, VCL_DURATION);\n\nVCL_DURATION VRT_r_bereq_first_byte_timeout(VRT_CTX);\nvoid VRT_l_bereq_first_byte_timeout(VRT_CTX, VCL_DURATION);\n\n\nVCL_STRING VRT_r_bereq_method(VRT_CTX);\nvoid VRT_l_bereq_method(VRT_CTX, const char *, ...);\n\nVCL_STRING VRT_r_bereq_proto(VRT_CTX);\nvoid VRT_l_bereq_proto(VRT_CTX, const char *, ...);\n\nVCL_INT VRT_r_bereq_retries(VRT_CTX);\n\nVCL_BOOL VRT_r_bereq_uncacheable(VRT_CTX);\n\nVCL_STRING VRT_r_bereq_url(VRT_CTX);\nvoid VRT_l_bereq_url(VRT_CTX, const char *, ...);\n\nVCL_STRING VRT_r_bereq_xid(VRT_CTX);\n\nVCL_HTTP VRT_r_beresp(VRT_CTX);\n\nVCL_DURATION VRT_r_beresp_age(VRT_CTX);\n\nVCL_BACKEND VRT_r_beresp_backend(VRT_CTX);\n\nVCL_IP VRT_r_beresp_backend_ip(VRT_CTX);\n\nVCL_STRING VRT_r_beresp_backend_name(VRT_CTX);\n\nvoid VRT_l_beresp_body(VRT_CTX, const char *, ...);\n\nVCL_BOOL VRT_r_beresp_do_esi(VRT_CTX);\nvoid VRT_l_beresp_do_esi(VRT_CTX, VCL_BOOL);\n\nVCL_BOOL VRT_r_beresp_do_gunzip(VRT_CTX);\nvoid VRT_l_beresp_do_gunzip(VRT_CTX, VCL_BOOL);\n\nVCL_BOOL VRT_r_beresp_do_gzip(VRT_CTX);\nvoid VRT_l_beresp_do_gzip(VRT_CTX, VCL_BOOL);\n\nVCL_BOOL VRT_r_beresp_do_stream(VRT_CTX);\nvoid VRT_l_beresp_do_stream(VRT_CTX, VCL_BOOL);\n\nVCL_DURATION VRT_r_beresp_grace(VRT_CTX);\nvoid VRT_l_beresp_grace(VRT_CTX, VCL_DURATION);\n\n\nVCL_DURATION VRT_r_beresp_keep(VRT_CTX);\nvoid VRT_l_beresp_keep(VRT_CTX, VCL_DURATION);\n\nVCL_STRING VRT_r_beresp_proto(VRT_CTX);\nvoid VRT_l_beresp_proto(VRT_CTX, const char *, ...);\n\nVCL_STRING VRT_r_beresp_reason(VRT_CTX);\nvoid VRT_l_beresp_reason(VRT_CTX, const char *, ...);\n\nVCL_INT VRT_r_beresp_status(VRT_CTX);\nvoid VRT_l_beresp_status(VRT_CTX, VCL_INT);\n\nVCL_STEVEDORE VRT_r_beresp_storage(VRT_CTX);\nvoid VRT_l_beresp_storage(VRT_CTX, VCL_STEVEDORE);\n\nVCL_STRING VRT_r_beresp_storage_hint(VRT_CTX);\nvoid VRT_l_beresp_storage_hint(VRT_CTX, const char *, ...);\n\nVCL_DURATION VRT_r_beresp_ttl(VRT_CTX);\nvoid VRT_l_beresp_ttl(VRT_CTX, VCL_DURATION);\n\nVCL_BOOL VRT_r_beresp_uncacheable(VRT_CTX);\nvoid VRT_l_beresp_uncacheable(VRT_CTX, VCL_BOOL);\n\nVCL_BOOL VRT_r_beresp_was_304(VRT_CTX);\n\nVCL_STRING VRT_r_client_identity(VRT_CTX);\nvoid VRT_l_client_identity(VRT_CTX, const char *, ...);\n\nVCL_IP VRT_r_client_ip(VRT_CTX);\n\nVCL_IP VRT_r_local_ip(VRT_CTX);\n\nVCL_TIME VRT_r_now(VRT_CTX);\n\nVCL_DURATION VRT_r_obj_age(VRT_CTX);\n\nVCL_DURATION VRT_r_obj_grace(VRT_CTX);\n\nVCL_INT VRT_r_obj_hits(VRT_CTX);\n\n\nVCL_DURATION VRT_r_obj_keep(VRT_CTX);\n\nVCL_STRING VRT_r_obj_proto(VRT_CTX);\n\nVCL_STRING VRT_r_obj_reason(VRT_CTX);\n\nVCL_INT VRT_r_obj_status(VRT_CTX);\n\nVCL_DURATION VRT_r_obj_ttl(VRT_CTX);\n\nVCL_BOOL VRT_r_obj_uncacheable(VRT_CTX);\n\nVCL_IP VRT_r_remote_ip(VRT_CTX);\n\nVCL_HTTP VRT_r_req(VRT_CTX);\n\nVCL_BACKEND VRT_r_req_backend_hint(VRT_CTX);\nvoid VRT_l_req_backend_hint(VRT_CTX, VCL_BACKEND);\n\nVCL_BOOL VRT_r_req_can_gzip(VRT_CTX);\n\nVCL_BOOL VRT_r_req_esi(VRT_CTX);\nvoid VRT_l_req_esi(VRT_CTX, VCL_BOOL);\n\nVCL_INT VRT_r_req_esi_level(VRT_CTX);\n\nVCL_BOOL VRT_r_req_hash_always_miss(VRT_CTX);\nvoid VRT_l_req_hash_always_miss(VRT_CTX, VCL_BOOL);\n\nVCL_BOOL VRT_r_req_hash_ignore_busy(VRT_CTX);\nvoid VRT_l_req_hash_ignore_busy(VRT_CTX, VCL_BOOL);\n\n\nVCL_STRING VRT_r_req_method(VRT_CTX);\nvoid VRT_l_req_method(VRT_CTX, const char *, ...);\n\nVCL_STRING VRT_r_req_proto(VRT_CTX);\nvoid VRT_l_req_proto(VRT_CTX, const char *, ...);\n\nVCL_INT VRT_r_req_restarts(VRT_CTX);\n\nVCL_STEVEDORE VRT_r_req_storage(VRT_CTX);\nvoid VRT_l_req_storage(VRT_CTX, VCL_STEVEDORE);\n\nVCL_DURATION VRT_r_req_ttl(VRT_CTX);\nvoid VRT_l_req_ttl(VRT_CTX, VCL_DURATION);\n\nVCL_STRING VRT_r_req_url(VRT_CTX);\nvoid VRT_l_req_url(VRT_CTX, const char *, ...);\n\nVCL_STRING VRT_r_req_xid(VRT_CTX);\n\n\nVCL_STRING VRT_r_req_top_method(VRT_CTX);\n\nVCL_STRING VRT_r_req_top_proto(VRT_CTX);\n\nVCL_STRING VRT_r_req_top_url(VRT_CTX);\n\nVCL_HTTP VRT_r_resp(VRT_CTX);\n\nvoid VRT_l_resp_body(VRT_CTX, const char *, ...);\n\n\nVCL_BOOL VRT_r_resp_is_streaming(VRT_CTX);\n\nVCL_STRING VRT_r_resp_proto(VRT_CTX);\nvoid VRT_l_resp_proto(VRT_CTX, const char *, ...);\n\nVCL_STRING VRT_r_resp_reason(VRT_CTX);\nvoid VRT_l_resp_reason(VRT_CTX, const char *, ...);\n\nVCL_INT VRT_r_resp_status(VRT_CTX);\nvoid VRT_l_resp_status(VRT_CTX, VCL_INT);\n\nVCL_STRING VRT_r_server_hostname(VRT_CTX);\n\nVCL_STRING VRT_r_server_identity(VRT_CTX);\n\nVCL_IP VRT_r_server_ip(VRT_CTX);\nlong long VRT_Stv_free_space(const char *);\nlong long VRT_Stv_used_space(const char *);\nunsigned VRT_Stv_happy(const char *);\n\n/* ---===### Source Code ###===---*/\n\n#define VGC_NSRCS 2\n\nstatic const char *srcname[VGC_NSRCS] = {\n\t\"docker/default.vcl\",\n\t\"Builtin\",\n};\n\nstatic const char *srcbody[2] = {\n    /* \"docker/default.vcl\"*/\n\t\"vcl 4.0;\\n\"\n\t\"\\n\"\n\t\"backend default {\\n\"\n\t\"  .host = \\\"127.0.0.1\\\";\\n\"\n\t\"  .port = \\\"9292\\\";\\n\"\n\t\"}\\n\"\n\t\"\\n\"\n\t\"sub vcl_recv {\\n\"\n\t\"  if (req.method == \\\"GET\\\" &&\\n\"\n\t\"      req.url ~ \\\"^/((gend|src)_thumbs/\\\\d+|(gend|src)_images/[\\\\w-]{6,}\\\\.(bmp|gif|jpg|png))$\\\") {\\n\"\n\t\"      unset req.http.Cookie;\\n\"\n\t\"  }\\n\"\n\t\"}\\n\"\n\t\"\",\n    /* \"Builtin\"*/\n\t\"/*-\\n\"\n\t\" * Copyright (c) 2006 Verdens Gang AS\\n\"\n\t\" * Copyright (c) 2006-2015 Varnish Software AS\\n\"\n\t\" * All rights reserved.\\n\"\n\t\" *\\n\"\n\t\" * Author: Poul-Henning Kamp <phk@phk.freebsd.dk>\\n\"\n\t\" *\\n\"\n\t\" * Redistribution and use in source and binary forms, with or without\\n\"\n\t\" * modification, are permitted provided that the following conditions\\n\"\n\t\" * are met:\\n\"\n\t\" * 1. Redistributions of source code must retain the above copyright\\n\"\n\t\" *    notice, this list of conditions and the following disclaimer.\\n\"\n\t\" * 2. Redistributions in binary form must reproduce the above copyright\\n\"\n\t\" *    notice, this list of conditions and the following disclaimer in the\\n\"\n\t\" *    documentation and/or other materials provided with the distribution.\\n\"\n\t\" *\\n\"\n\t\" * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND\\n\"\n\t\" * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\\n\"\n\t\" * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\\n\"\n\t\" * ARE DISCLAIMED.  IN NO EVENT SHALL AUTHOR OR CONTRIBUTORS BE LIABLE\\n\"\n\t\" * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\\n\"\n\t\" * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS\\n\"\n\t\" * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)\\n\"\n\t\" * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT\\n\"\n\t\" * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY\\n\"\n\t\" * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\\n\"\n\t\" * SUCH DAMAGE.\\n\"\n\t\" *\\n\"\n\t\" * This is the builtin VCL code\\n\"\n\t\" */\\n\"\n\t\"\\n\"\n\t\"vcl 4.0;\\n\"\n\t\"\\n\"\n\t\"#######################################################################\\n\"\n\t\"# Client side\\n\"\n\t\"\\n\"\n\t\"sub vcl_recv {\\n\"\n\t\"    if (req.method == \\\"PRI\\\") {\\n\"\n\t\"\\t/* This will never happen in properly formed traffic (see: RFC7540) */\\n\"\n\t\"\\treturn (synth(405));\\n\"\n\t\"    }\\n\"\n\t\"    if (req.method != \\\"GET\\\" &&\\n\"\n\t\"      req.method != \\\"HEAD\\\" &&\\n\"\n\t\"      req.method != \\\"PUT\\\" &&\\n\"\n\t\"      req.method != \\\"POST\\\" &&\\n\"\n\t\"      req.method != \\\"TRACE\\\" &&\\n\"\n\t\"      req.method != \\\"OPTIONS\\\" &&\\n\"\n\t\"      req.method != \\\"DELETE\\\" &&\\n\"\n\t\"      req.method != \\\"PATCH\\\") {\\n\"\n\t\"        /* Non-RFC2616 or CONNECT which is weird. */\\n\"\n\t\"        return (pipe);\\n\"\n\t\"    }\\n\"\n\t\"\\n\"\n\t\"    if (req.method != \\\"GET\\\" && req.method != \\\"HEAD\\\") {\\n\"\n\t\"        /* We only deal with GET and HEAD by default */\\n\"\n\t\"        return (pass);\\n\"\n\t\"    }\\n\"\n\t\"    if (req.http.Authorization || req.http.Cookie) {\\n\"\n\t\"        /* Not cacheable by default */\\n\"\n\t\"        return (pass);\\n\"\n\t\"    }\\n\"\n\t\"    return (hash);\\n\"\n\t\"}\\n\"\n\t\"\\n\"\n\t\"sub vcl_pipe {\\n\"\n\t\"    # By default Connection: close is set on all piped requests, to stop\\n\"\n\t\"    # connection reuse from sending future requests directly to the\\n\"\n\t\"    # (potentially) wrong backend. If you do want this to happen, you can undo\\n\"\n\t\"    # it here.\\n\"\n\t\"    # unset bereq.http.connection;\\n\"\n\t\"    return (pipe);\\n\"\n\t\"}\\n\"\n\t\"\\n\"\n\t\"sub vcl_pass {\\n\"\n\t\"    return (fetch);\\n\"\n\t\"}\\n\"\n\t\"\\n\"\n\t\"sub vcl_hash {\\n\"\n\t\"    hash_data(req.url);\\n\"\n\t\"    if (req.http.host) {\\n\"\n\t\"        hash_data(req.http.host);\\n\"\n\t\"    } else {\\n\"\n\t\"        hash_data(server.ip);\\n\"\n\t\"    }\\n\"\n\t\"    return (lookup);\\n\"\n\t\"}\\n\"\n\t\"\\n\"\n\t\"sub vcl_purge {\\n\"\n\t\"    return (synth(200, \\\"Purged\\\"));\\n\"\n\t\"}\\n\"\n\t\"\\n\"\n\t\"sub vcl_hit {\\n\"\n\t\"    if (obj.ttl >= 0s) {\\n\"\n\t\"        // A pure unadulterated hit, deliver it\\n\"\n\t\"        return (deliver);\\n\"\n\t\"    }\\n\"\n\t\"    if (obj.ttl + obj.grace > 0s) {\\n\"\n\t\"        // Object is in grace, deliver it\\n\"\n\t\"        // Automatically triggers a background fetch\\n\"\n\t\"        return (deliver);\\n\"\n\t\"    }\\n\"\n\t\"    // fetch & deliver once we get the result\\n\"\n\t\"    return (miss);\\n\"\n\t\"}\\n\"\n\t\"\\n\"\n\t\"sub vcl_miss {\\n\"\n\t\"    return (fetch);\\n\"\n\t\"}\\n\"\n\t\"\\n\"\n\t\"sub vcl_deliver {\\n\"\n\t\"    return (deliver);\\n\"\n\t\"}\\n\"\n\t\"\\n\"\n\t\"/*\\n\"\n\t\" * We can come here \\\"invisibly\\\" with the following errors: 500 & 503\\n\"\n\t\" */\\n\"\n\t\"sub vcl_synth {\\n\"\n\t\"    set resp.http.Content-Type = \\\"text/html; charset=utf-8\\\";\\n\"\n\t\"    set resp.http.Retry-After = \\\"5\\\";\\n\"\n\t\"    set resp.body = {\\\"<!DOCTYPE html>\\n\"\n\t\"<html>\\n\"\n\t\"  <head>\\n\"\n\t\"    <title>\\\"} + resp.status + \\\" \\\" + resp.reason + {\\\"</title>\\n\"\n\t\"  </head>\\n\"\n\t\"  <body>\\n\"\n\t\"    <h1>Error \\\"} + resp.status + \\\" \\\" + resp.reason + {\\\"</h1>\\n\"\n\t\"    <p>\\\"} + resp.reason + {\\\"</p>\\n\"\n\t\"    <h3>Guru Meditation:</h3>\\n\"\n\t\"    <p>XID: \\\"} + req.xid + {\\\"</p>\\n\"\n\t\"    <hr>\\n\"\n\t\"    <p>Varnish cache server</p>\\n\"\n\t\"  </body>\\n\"\n\t\"</html>\\n\"\n\t\"\\\"};\\n\"\n\t\"    return (deliver);\\n\"\n\t\"}\\n\"\n\t\"\\n\"\n\t\"#######################################################################\\n\"\n\t\"# Backend Fetch\\n\"\n\t\"\\n\"\n\t\"sub vcl_backend_fetch {\\n\"\n\t\"    if (bereq.method == \\\"GET\\\") {\\n\"\n\t\"        unset bereq.body;\\n\"\n\t\"    }\\n\"\n\t\"    return (fetch);\\n\"\n\t\"}\\n\"\n\t\"\\n\"\n\t\"sub vcl_backend_response {\\n\"\n\t\"    if (bereq.uncacheable) {\\n\"\n\t\"        return (deliver);\\n\"\n\t\"    } else if (beresp.ttl <= 0s ||\\n\"\n\t\"      beresp.http.Set-Cookie ||\\n\"\n\t\"      beresp.http.Surrogate-control ~ \\\"no-store\\\" ||\\n\"\n\t\"      (!beresp.http.Surrogate-Control &&\\n\"\n\t\"        beresp.http.Cache-Control ~ \\\"no-cache|no-store|private\\\") ||\\n\"\n\t\"      beresp.http.Vary == \\\"*\\\") {\\n\"\n\t\"        # Mark as \\\"Hit-For-Miss\\\" for the next 2 minutes\\n\"\n\t\"        set beresp.ttl = 120s;\\n\"\n\t\"        set beresp.uncacheable = true;\\n\"\n\t\"    }\\n\"\n\t\"    return (deliver);\\n\"\n\t\"}\\n\"\n\t\"\\n\"\n\t\"sub vcl_backend_error {\\n\"\n\t\"    set beresp.http.Content-Type = \\\"text/html; charset=utf-8\\\";\\n\"\n\t\"    set beresp.http.Retry-After = \\\"5\\\";\\n\"\n\t\"    set beresp.body = {\\\"<!DOCTYPE html>\\n\"\n\t\"<html>\\n\"\n\t\"  <head>\\n\"\n\t\"    <title>\\\"} + beresp.status + \\\" \\\" + beresp.reason + {\\\"</title>\\n\"\n\t\"  </head>\\n\"\n\t\"  <body>\\n\"\n\t\"    <h1>Error \\\"} + beresp.status + \\\" \\\" + beresp.reason + {\\\"</h1>\\n\"\n\t\"    <p>\\\"} + beresp.reason + {\\\"</p>\\n\"\n\t\"    <h3>Guru Meditation:</h3>\\n\"\n\t\"    <p>XID: \\\"} + bereq.xid + {\\\"</p>\\n\"\n\t\"    <hr>\\n\"\n\t\"    <p>Varnish cache server</p>\\n\"\n\t\"  </body>\\n\"\n\t\"</html>\\n\"\n\t\"\\\"};\\n\"\n\t\"    return (deliver);\\n\"\n\t\"}\\n\"\n\t\"\\n\"\n\t\"#######################################################################\\n\"\n\t\"# Housekeeping\\n\"\n\t\"\\n\"\n\t\"sub vcl_init {\\n\"\n\t\"    return (ok);\\n\"\n\t\"}\\n\"\n\t\"\\n\"\n\t\"sub vcl_fini {\\n\"\n\t\"    return (ok);\\n\"\n\t\"}\\n\"\n\t\"\",\n};\n\n/* ---===### Location Counters ###===---*/\n\n#define VGC_NREFS 37\n\nstatic struct vrt_ref VGC_ref[VGC_NREFS] = {\n  [  1] = { 0,       89,    9,   3,  \"if\" },\n  [  2] = { 0,      217,   11,   7,  \"unset\" },\n  [  3] = { 0,      244,   13,   1,  \"}\" },\n  [  4] = { 1,     1605,   38,   5,  \"if\" },\n  [  5] = { 1,     1705,   40,   9,  \"return\" },\n  [  6] = { 1,     1736,   42,   5,  \"if\" },\n  [  7] = { 1,     2040,   51,   9,  \"return\" },\n  [  8] = { 1,     2066,   54,   5,  \"if\" },\n  [  9] = { 1,     2181,   56,   9,  \"return\" },\n  [ 10] = { 1,     2206,   58,   5,  \"if\" },\n  [ 11] = { 1,     2302,   60,   9,  \"return\" },\n  [ 12] = { 1,     2327,   62,   5,  \"return\" },\n  [ 13] = { 1,     2634,   71,   5,  \"return\" },\n  [ 14] = { 1,     2671,   75,   5,  \"return\" },\n  [ 15] = { 1,     2709,   79,   5,  \"hash_data\" },\n  [ 16] = { 1,     2762,   81,   9,  \"hash_data\" },\n  [ 17] = { 1,     2809,   83,   9,  \"hash_data\" },\n  [ 18] = { 1,     2881,   89,   5,  \"return\" },\n  [ 19] = { 1,     2933,   93,   5,  \"if\" },\n  [ 20] = { 1,     3010,   95,   9,  \"return\" },\n  [ 21] = { 1,     3038,   97,   5,  \"if\" },\n  [ 22] = { 1,     3173,  100,   9,  \"return\" },\n  [ 23] = { 1,     3247,  103,   5,  \"return\" },\n  [ 24] = { 1,     3284,  107,   5,  \"return\" },\n  [ 25] = { 1,     3325,  111,   5,  \"return\" },\n  [ 26] = { 1,     3442,  118,   5,  \"set\" },\n  [ 27] = { 1,     4033,  142,   5,  \"if\" },\n  [ 28] = { 1,     4070,  143,   9,  \"unset\" },\n  [ 29] = { 1,     4098,  145,   5,  \"return\" },\n  [ 30] = { 1,     4148,  149,   5,  \"if\" },\n  [ 31] = { 1,     4181,  150,   9,  \"return\" },\n  [ 32] = { 1,     4524,  158,   9,  \"set\" },\n  [ 33] = { 1,     4596,  161,   5,  \"return\" },\n  [ 34] = { 1,     4645,  165,   5,  \"set\" },\n  [ 35] = { 1,     5244,  189,   5,  \"return\" },\n  [ 36] = { 1,     5279,  193,   5,  \"return\" },\n};\n\n/* ---===### VCC generated .h code ###===---*/\n\nextern const struct VCL_conf VCL_conf;\n\nstatic struct director *vgc_backend_default;\n\n/* \"127.0.0.1 9292\" -> 127.0.0.1 */\nstatic const unsigned long long suckaddr_0[4] = {\n    0x4c2400024b1e9335ULL,\n    0x000000000100007fULL,\n    0x0000000000000000ULL,\n    0x0000000000000000ULL\n};\n\nstatic const struct vrt_backend vgc_dir_priv_vgc_backend_default = {\n\t.magic = VRT_BACKEND_MAGIC,\n\t.vcl_name = \"default\",\n\t.ipv4_suckaddr = (const struct suckaddr *)(const void*)suckaddr_0,\n\t.ipv4_addr = \"127.0.0.1\",\n\t.port = \"9292\",\n\t.hosthdr = \"127.0.0.1\",\n};\nstatic void *VGC_re_1;\nstatic const struct gethdr_s VGC_HDR_REQ_Cookie =\n    { HDR_REQ, \"\\007Cookie:\"};\nstatic const struct gethdr_s VGC_HDR_REQ_Authorization =\n    { HDR_REQ, \"\\016Authorization:\"};\nstatic const struct gethdr_s VGC_HDR_REQ_host =\n    { HDR_REQ, \"\\005host:\"};\nstatic const struct gethdr_s VGC_HDR_RESP_Content_2d_Type =\n    { HDR_RESP, \"\\015Content-Type:\"};\nstatic const struct gethdr_s VGC_HDR_RESP_Retry_2d_After =\n    { HDR_RESP, \"\\014Retry-After:\"};\nstatic const struct gethdr_s VGC_HDR_BERESP_Set_2d_Cookie =\n    { HDR_BERESP, \"\\013Set-Cookie:\"};\nstatic const struct gethdr_s VGC_HDR_BERESP_Surrogate_2d_control =\n    { HDR_BERESP, \"\\022Surrogate-control:\"};\nstatic void *VGC_re_2;\nstatic const struct gethdr_s VGC_HDR_BERESP_Surrogate_2d_Control =\n    { HDR_BERESP, \"\\022Surrogate-Control:\"};\nstatic const struct gethdr_s VGC_HDR_BERESP_Cache_2d_Control =\n    { HDR_BERESP, \"\\016Cache-Control:\"};\nstatic void *VGC_re_3;\nstatic const struct gethdr_s VGC_HDR_BERESP_Vary =\n    { HDR_BERESP, \"\\005Vary:\"};\nstatic const struct gethdr_s VGC_HDR_BERESP_Content_2d_Type =\n    { HDR_BERESP, \"\\015Content-Type:\"};\nstatic const struct gethdr_s VGC_HDR_BERESP_Retry_2d_After =\n    { HDR_BERESP, \"\\014Retry-After:\"};\n\nvoid __match_proto__(vcl_func_f) VGC_function_vcl_backend_error(VRT_CTX);\nvoid __match_proto__(vcl_func_f) VGC_f\u001b[0m\u001b[91munction_vcl_backend_fetch(VRT_CTX);\nvoid __match_proto__(vcl_func_f) VGC_function_vcl_backend_response(VRT_CTX);\nvoid __match_proto__(vcl_func_f) VGC_function_vcl_deliver(VRT_CTX);\nvoid __match_proto__(vcl_func_f) VGC_function_vcl_fini(VRT_CTX);\nvoid __match_proto__(vcl_func_f) VGC_function_vcl_hash(VRT_CTX);\nvoid __match_proto__(vcl_func_f) VGC_function_vcl_hit(VRT_CTX);\nvoid __match_proto__(vcl_func_f) VGC_function_vcl_init(VRT_CTX);\nvoid __match_proto__(vcl_func_f) VGC_function_vcl_miss(VRT_CTX);\nvoid __match_proto__(vcl_func_f) VGC_function_vcl_pass(VRT_CTX);\nvoid __match_proto__(vcl_func_f) VGC_function_vcl_pipe(VRT_CTX);\nvoid __match_proto__(vcl_func_f) VGC_function_vcl_purge(VRT_CTX);\nvoid __match_proto__(vcl_func_f) VGC_function_vcl_recv(VRT_CTX);\nvoid __match_proto__(vcl_func_f) VGC_function_vcl_synth(VRT_CTX);\n\nstatic unsigned vgc_inistep;\nstatic unsigned vgc_warmupstep;\n\n/* ---===### VCC generated .c code ###===---*/\n\nvoid __match_proto__(vcl_func_f)\nVGC_function_vcl_backend_error(VRT_CTX)\n{\n  /* ... from ('Builtin' Line 164 Pos 5) */\n  {\n    {\n      VRT_count(ctx, 34);\n      VRT_SetHdr(ctx, &VGC_HDR_BERESP_Content_2d_Type,\n        \"text/html; charset=utf-8\",\n          vrt_magic_string_end\n      );\n      if (*ctx->handling) return;\n      VRT_SetHdr(ctx, &VGC_HDR_BERESP_Retry_2d_After,\n        \"5\",\n          vrt_magic_string_end\n      );\n      if (*ctx->handling) return;\n      VRT_l_beresp_body(ctx, \n        \"<!DOCTYPE html>\\n\"\n          \t\"<html>\\n\"\n          \t\"  <head>\\n\"\n          \t\"    <title>\",\n          VRT_INT_string(ctx, VRT_r_beresp_status(ctx)),\n          \" \",\n          VRT_r_beresp_reason(ctx),\n          \"</title>\\n\"\n          \t\"  </head>\\n\"\n          \t\"  <body>\\n\"\n          \t\"    <h1>Error \",\n          VRT_INT_string(ctx, VRT_r_beresp_status(ctx)),\n          \" \",\n          VRT_r_beresp_reason(ctx),\n          \"</h1>\\n\"\n          \t\"    <p>\",\n          VRT_r_beresp_reason(ctx),\n          \"</p>\\n\"\n          \t\"    <h3>Guru Meditation:</h3>\\n\"\n          \t\"    <p>XID: \",\n          VRT_r_bereq_xid(ctx),\n          \"</p>\\n\"\n          \t\"    <hr>\\n\"\n          \t\"    <p>Varnish cache server</p>\\n\"\n          \t\"  </body>\\n\"\n          \t\"</html>\\n\"\n          \t\"\",\n          vrt_magic_string_end\n      );\n      if (*ctx->handling) return;\n      VRT_handling(ctx, VCL_RET_DELIVER);\n      if (*ctx->handling) return;\n    }\n  }\n}\n\nvoid __match_proto__(vcl_func_f)\nVGC_function_vcl_backend_fetch(VRT_CTX)\n{\n  /* ... from ('Builtin' Line 141 Pos 5) */\n  {\n    {\n      VRT_count(ctx, 27);\n      if (\n        !VRT_strcmp(VRT_r_bereq_method(ctx), \"GET\")\n      )\n        {\n          VRT_count(ctx, 28);\n          VRT_l_bereq_body(ctx, vrt_magic_string_unset);\n          if (*ctx->handling) return;\n        }\n      VRT_count(ctx, 29);\n      if (*ctx->handling) return;\n      VRT_handling(ctx, VCL_RET_FETCH);\n      if (*ctx->handling) return;\n    }\n  }\n}\n\nvoid __match_proto__(vcl_func_f)\nVGC_function_vcl_backend_response(VRT_CTX)\n{\n  /* ... from ('Builtin' Line 148 Pos 5) */\n  {\n    {\n      VRT_count(ctx, 30);\n      if (\n        VRT_r_bereq_uncacheable(ctx)\n      )\n        {\n          VRT_count(ctx, 31);\n          VRT_handling(ctx, VCL_RET_DELIVER);\n          if (*ctx->handling) return;\n        }\n      else if (\n        (\n          (VRT_r_beresp_ttl(ctx) <= 0)||\n          (VRT_GetHdr(ctx, &VGC_HDR_BERESP_Set_2d_Cookie) != 0)||\n          VRT_re_match(ctx, VRT_GetHdr(ctx, &VGC_HDR_BERESP_Surrogate_2d_control), VGC_re_2)||\n          ((\n            !((VRT_GetHdr(ctx, &VGC_HDR_BERESP_Surrogate_2d_Control) != 0))&&\n            VRT_re_match(ctx, VRT_GetHdr(ctx, &VGC_HDR_BERESP_Cache_2d_Control), VGC_re_3)))||\n          !VRT_strcmp(VRT_GetHdr(ctx, &VGC_HDR_BERESP_Vary), \"*\"))\n      )\n        {\n          VRT_count(ctx, 32);\n          VRT_l_beresp_ttl(ctx, \n            120\n          );\n          if (*ctx->handling) return;\n          VRT_l_beresp_uncacheable(ctx, \n            (0==0)\n          );\n          if (*ctx->handling) return;\n        }\n      VRT_count(ctx, 33);\n      if (*ctx->handling) return;\n      VRT_handling(ctx, VCL_RET_DELIVER);\n      if (*ctx->handling) return;\n    }\n  }\n}\n\nvoid __match_proto__(vcl_func_f)\nVGC_function_vcl_deliver(VRT_CTX)\n{\n  /* ... from ('Builtin' Line 110 Pos 5) */\n  {\n    {\n      VRT_count(ctx, 25);\n      VRT_handling(ctx, VCL_RET_DELIVER);\n      if (*ctx->handling) return;\n    }\n  }\n}\n\nvoid __match_proto__(vcl_func_f)\nVGC_function_vcl_fini(VRT_CTX)\n{\n  /* ... from ('Builtin' Line 192 Pos 5) */\n  {\n    {\n      VRT_count(ctx, 36);\n      VRT_handling(ctx, VCL_RET_OK);\n      if (*ctx->handling) return;\n    }\n  }\n}\n\nvoid __match_proto__(vcl_func_f)\nVGC_function_vcl_hash(VRT_CTX)\n{\n  /* ... from ('Builtin' Line 78 Pos 5) */\n  {\n    {\n      VRT_count(ctx, 15);\n      VRT_hashdata(ctx,\n        VRT_r_req_url(ctx),\n        vrt_magic_string_end\n      );\n      if (*ctx->handling) return;\n      if (\n        (VRT_GetHdr(ctx, &VGC_HDR_REQ_host) != 0)\n      )\n        {\n          VRT_count(ctx, 16);\n          VRT_hashdata(ctx,\n            VRT_GetHdr(ctx, &VGC_HDR_REQ_host),\n            vrt_magic_string_end\n          );\n          if (*ctx->handling) return;\n        }\n      else\n        {\n          VRT_count(ctx, 17);\n          VRT_hashdata(ctx,\n            VRT_IP_string(ctx, VRT_r_server_ip(ctx)),\n            vrt_magic_string_end\n          );\n          if (*ctx->handling) return;\n        }\n      if (*ctx->handling) return;\n      VRT_handling(ctx, VCL_RET_LOOKUP);\n      if (*ctx->handling) return;\n    }\n  }\n}\n\nvoid __match_proto__(vcl_func_f)\nVGC_function_vcl_hit(VRT_CTX)\n{\n  /* ... from ('Builtin' Line 92 Pos 5) */\n  {\n    {\n      VRT_count(ctx, 19);\n      if (\n        (VRT_r_obj_ttl(ctx) >= 0)\n      )\n        {\n          VRT_count(ctx, 20);\n          VRT_handling(ctx, VCL_RET_DELIVER);\n          if (*ctx->handling) return;\n        }\n      VRT_count(ctx, 21);\n      if (*ctx->handling) return;\n      if (\n        ((VRT_r_obj_ttl(ctx) + VRT_r_obj_grace(ctx)) > 0)\n      )\n        {\n          VRT_count(ctx, 22);\n          VRT_handling(ctx, VCL_RET_DELIVER);\n          if (*ctx->handling) return;\n        }\n      VRT_count(ctx, 23);\n      if (*ctx->handling) return;\n      VRT_handling(ctx, VCL_RET_MISS);\n      if (*ctx->handling) return;\n    }\n  }\n}\n\nvoid __match_proto__(vcl_func_f)\nVGC_function_vcl_init(VRT_CTX)\n{\n  /* ... from ('Builtin' Line 188 Pos 5) */\n  {\n    {\n      VRT_count(ctx, 35);\n      VRT_handling(ctx, VCL_RET_OK);\n      if (*ctx->handling) return;\n    }\n  }\n  return;\n}\n\nvoid __match_proto__(vcl_func_f)\nVGC_function_vcl_miss(VRT_CTX)\n{\n  /* ... from ('Builtin' Line 106 Pos 5) */\n  {\n    {\n      VRT_count(ctx, 24);\n      VRT_handling(ctx, VCL_RET_FETCH);\n      if (*ctx->handling) return;\n    }\n  }\n}\n\nvoid __match_proto__(vcl_func_f)\nVGC_function_vcl_pass(VRT_CTX)\n{\n  /* ... from ('Builtin' Line 74 Pos 5) */\n  {\n    {\n      VRT_count(ctx, 14);\n      VRT_handling(ctx, VCL_RET_FETCH);\n      if (*ctx->handling) return;\n    }\n  }\n}\n\nvoid __match_proto__(vcl_func_f)\nVGC_function_vcl_pipe(VRT_CTX)\n{\n  /* ... from ('Builtin' Line 65 Pos 5) */\n  {\n    {\n      VRT_count(ctx, 13);\n      VRT_handling(ctx, VCL_RET_PIPE);\n      if (*ctx->handling) return;\n    }\n  }\n}\n\nvoid __match_proto__(vcl_func_f)\nVGC_function_vcl_purge(VRT_CTX)\n{\n  /* ... from ('Builtin' Line 88 Pos 5) */\n  {\n    {\n      VRT_count(ctx, 18);\n      VRT_synth(ctx,\n        200\n        ,\n        \"Purged\"\n      );\n      VRT_handling(ctx, VCL_RET_SYNTH);\n      if (*ctx->handling) return;\n    }\n  }\n}\n\nvoid __match_proto__(vcl_func_f)\nVGC_function_vcl_recv(VRT_CTX)\n{\n  /* ... from ('docker/default.vcl' Line 8 Pos 5) */\n  {\n    {\n      VRT_count(ctx, 1);\n      if (\n        (\n          !VRT_strcmp(VRT_r_req_method(ctx), \"GET\")&&\n          VRT_re_match(ctx, VRT_r_req_url(ctx), VGC_re_1))\n      )\n        {\n          VRT_count(ctx, 2);\n          VRT_SetHdr(ctx, &VGC_HDR_REQ_Cookie,vrt_magic_string_unset);\n          if (*ctx->handling) return;\n        }\n      VRT_count(ctx, 3);\n      if (*ctx->handling) return;\n    }\n  }\n  /* ... from ('Builtin' Line 37 Pos 5) */\n  {\n    {\n      VRT_count(ctx, 4);\n      if (\n        !VRT_strcmp(VRT_r_req_method(ctx), \"PRI\")\n      )\n        {\n          VRT_count(ctx, 5);\n          VRT_synth(ctx,\n            405\n            ,\n            (const char*)0\n          );\n          VRT_handling(ctx, VCL_RET_SYNTH);\n          if (*ctx->handling) return;\n        }\n      VRT_count(ctx, 6);\n      if (*ctx->handling) return;\n      if (\n        (\n          VRT_strcmp(VRT_r_req_method(ctx), \"GET\")&&\n          VRT_strcmp(VRT_r_req_method(ctx), \"HEAD\")&&\n          VRT_strcmp(VRT_r_req_method(ctx), \"PUT\")&&\n          VRT_strcmp(VRT_r_req_method(ctx), \"POST\")&&\n          VRT_strcmp(VRT_r_req_method(ctx), \"TRACE\")&&\n          VRT_strcmp(VRT_r_req_method(ctx), \"OPTIONS\")&&\n          VRT_strcmp(VRT_r_req_method(ctx), \"DELETE\")&&\n          VRT_strcmp(VRT_r_req_method(ctx), \"PATCH\"))\n      )\n        {\n          VRT_count(ctx, 7);\n          VRT_handling(ctx, VCL_RET_PIPE);\n          if (*ctx->handling) return;\n        }\n      VRT_count(ctx, 8);\n      if (*ctx->handling) return;\n      if (\n        (\n          VRT_strcmp(VRT_r_req_method(ctx), \"GET\")&&\n          VRT_strcmp(VRT_r_req_method(ctx), \"HEAD\"))\n      )\n        {\n          VRT_count(ctx, 9);\n          VRT_handling(ctx, VCL_RET_PASS);\n          if (*ctx->handling) return;\n        }\n      VRT_count(ctx, 10);\n      if (*ctx->handling) return;\n      if (\n        (\n          (VRT_GetHdr(ctx, &VGC_HDR_REQ_Authorization) != 0)||\n          (VRT_GetHdr(ctx, &VGC_HDR_REQ_Cookie) != 0))\n      )\n        {\n          VRT_count(ctx, 11);\n          VRT_handling(ctx, VCL_RET_PASS);\n          if (*ctx->handling) return;\n        }\n      VRT_count(ctx, 12);\n      if (*ctx->handling) return;\n      VRT_handling(ctx, VCL_RET_HASH);\n      if (*ctx->handling) return;\n    }\n  }\n}\n\nvoid __match_proto__(vcl_func_f)\nVGC_function_vcl_synth(VRT_CTX)\n{\n  /* ... from ('Builtin' Line 117 Pos 5) */\n  {\n    {\n      VRT_count(ctx, 26);\n      VRT_SetHdr(ctx, &VGC_HDR_RESP_Content_2d_Type,\n        \"text/html; charset=utf-8\",\n          vrt_magic_string_end\n      );\n      if (*ctx->handling) return;\n      VRT_SetHdr(ctx, &VGC_HDR_RESP_Retry_2d_After,\n        \"5\",\n          vrt_magic_string_end\n      );\n      if (*ctx->handling) return;\n      VRT_l_resp_body(ctx, \n        \"<!DOCTYPE html>\\n\"\n          \t\"<html>\\n\"\n          \t\"  <head>\\n\"\n          \t\"    <title>\",\n          VRT_INT_string(ctx, VRT_r_resp_status(ctx)),\n          \" \",\n          VRT_r_resp_reason(ctx),\n          \"</title>\\n\"\n          \t\"  </head>\\n\"\n          \t\"  <body>\\n\"\n          \t\"    <h1>Error \",\n          VRT_INT_string(ctx, VRT_r_resp_status(ctx)),\n          \" \",\n          VRT_r_resp_reason(ctx),\n          \"</h1>\\n\"\n          \t\"    <p>\",\n          VRT_r_resp_reason(ctx),\n          \"</p>\\n\"\n          \t\"    <h3>Guru Meditation:</h3>\\n\"\n          \t\"    <p>XID: \",\n          VRT_r_req_xid(ctx),\n          \"</p>\\n\"\n          \t\"    <hr>\\n\"\n          \t\"    <p>Varnish cache server</p>\\n\"\n          \t\"  </body>\\n\"\n          \t\"</html>\\n\"\n          \t\"\",\n          vrt_magic_string_end\n      );\n      if (*ctx->handling) return;\n      VRT_handling(ctx, VCL_RET_DELIVER);\n      if (*ctx->handling) return;\n    }\n  }\n}\n\nstatic int\nVGC_Load(VRT_CTX)\n{\n\n\tvgc_inistep = 0;\n\n\t/* 1 */\n\tvgc_backend_default =\n\t    VRT_new_backend(ctx, &vgc_dir_priv_vgc_backend_default);\n\tvgc_inistep = 1;\n\n\t/* 2 */\n\tVRT_re_init(&VGC_re_1, \"^/((gend|src)_thumbs/\\\\d+|(gend|src)_images/[\\\\w-]{6,}\\\\.(bmp|gif|jpg|png))$\");\n\tvgc_inistep = 2;\n\n\t/* 3 */\n\tVRT_re_init(&VGC_re_2, \"no-store\");\n\tvgc_inistep = 3;\n\n\t/* 4 */\n\tVRT_re_init(&VGC_re_3, \"no-cache|no-store|private\");\n\tvgc_inistep = 4;\n\n\t/* 5 */\n\tVGC_function_vcl_init(ctx);\n\tvgc_inistep = 5;\n\n\treturn(0);\n}\n\nstatic int\nVGC_Discard(VRT_CTX)\n{\n\n\tswitch (vgc_inistep) {\n\n\t\tcase 5 :\n\t\t\tVGC_function_vcl_fini(ctx);\n\t\t\t/* FALLTHROUGH */\n\t\tcase 4 :\n\t\t\tVRT_re_fini(VGC_re_3);\n\t\t\t/* FALLTHROUGH */\n\t\tcase 3 :\n\t\t\tVRT_re_fini(VGC_re_2);\n\t\t\t/* FALLTHROUGH */\n\t\tcase 2 :\n\t\t\tVRT_re_fini(VGC_re_1);\n\t\t\t/* FALLTHROUGH */\n\t}\n\treturn (0);\n}\n\nstatic int\nVGC_Event(VRT_CTX, enum vcl_event_e ev)\n{\n\tif (ev == VCL_EVENT_LOAD)\n\t\treturn (VGC_Load(ctx));\n\tif (ev == VCL_EVENT_DISCARD)\n\t\treturn (VGC_Discard(ctx));\n\n\t(void)vgc_warmupstep;\n\treturn (0);\n}\n\nconst struct VCL_conf VCL_conf = {\n\t.magic = VCL_CONF_MAGIC,\n\t.event_vcl = VGC_Event,\n\t.default_director = &vgc_backend_default,\n\t.ref = VGC_ref,\n\t.nref = VGC_NREFS,\n\t.nsrc = VGC_NSRCS,\n\t.srcname = srcname,\n\t.srcbody = srcbody,\n\t.backend_error_func = VGC_function_vcl_backend_error,\n\t.backend_fetch_func = VGC_function_vcl_backend_fetch,\n\t.backend_response_func = VGC_function_vcl_backend_response,\n\t.deliver_func = VGC_function_vcl_deliver,\n\t.fini_func = VGC_function_vcl_fini,\n\t.hash_func = VGC_function_vcl_hash,\n\t.hit_func = VGC_function_vcl_hit,\n\t.init_func = VGC_function_vcl_init,\n\t.miss_func = VGC_function_vcl_miss,\n\t.pass_func = VGC_function_vcl_pass,\n\t.pipe_func = VGC_function_vcl_pipe,\n\t.purge_func = VGC_function_vcl_purge,\n\t.recv_func = VGC_function_vcl_recv,\n\t.synth_func = VGC_function_vcl_synth,\n};\n\n/*\n * Symbol Table\n *\n * var      HTTP      bereq\n * var      BACKEND   bereq.backend\n * var      DURATION  bereq.between_bytes_timeout\n * var      BODY      bereq.body\n * var      DURATION  bereq.connect_timeout\n * var      DURATION  bereq.first_byte_timeout\n * none     HEADER    bereq.http*\n * var      STRING    bereq.method\n * var      STRING    bereq.proto\n * var      INT       bereq.retries\n * var      BOOL      bereq.uncacheable\n * var      STRING    bereq.url\n * var      STRING    bereq.xid\n * var      HTTP      beresp\n * var      DURATION  beresp.age\n * var      BACKEND   beresp.backend\n * var      IP        beresp.backend.ip\n * var      STRING    beresp.backend.name\n * var      BODY      beresp.body\n * var      BOOL      beresp.do_esi\n * var      BOOL      beresp.do_gunzip\n * var      BOOL      beresp.do_gzip\n * var      BOOL      beresp.do_stream\n * var      DURATION  beresp.grace\n * none     HEADER    beresp.http*\n * var      HEADER    beresp.http.Cache-Control\n * var      HEADER    beresp.http.Content-Type\n * var      HEADER    beresp.http.Retry-After\n * var      HEADER    beresp.http.Set-Cookie\n * var      HEADER    beresp.http.Surrogate-Control\n * var      HEADER    beresp.http.Surrogate-control\n * var      HEADER    beresp.http.Vary\n * var      DURATION  beresp.keep\n * var      STRING    beresp.proto\n * var      STRING    beresp.reason\n * var      INT       beresp.status\n * var      STEVEDORE beresp.storage\n * var      STRING    beresp.storage_hint\n * var      DURATION  beresp.ttl\n * var      BOOL      beresp.uncacheable\n * var      BOOL      beresp.was_304\n * none               client\n * var      STRING    client.identity\n * var      IP        client.ip\n * backend  BACKEND   default\n * func               false\n * none               local\n * var      IP        local.ip\n * var      TIME      now\n * none               obj\n * var      DURATION  obj.age\n * var      DURATION  obj.grace\n * var      INT       obj.hits\n * none     HEADER    obj.http*\n * var      DURATION  obj.keep\n * var      STRING    obj.proto\n * var      STRING    obj.reason\n * var      INT       obj.status\n * var      DURATION  obj.ttl\n * var      BOOL      obj.uncacheable\n * func               regsub\n * func               regsuball\n * none               remote\n * var      IP        remote.ip\n * var      HTTP      req\n * var      BACKEND   req.backend_hint\n * var      BOOL      req.can_gzip\n * var      BOOL      req.esi\n * var      INT       req.esi_level\n * var      BOOL      req.hash_always_miss\n * var      BOOL      req.hash_ignore_busy\n * none     HEADER    req.http*\n * var      HEADER    req.http.Authorization\n * var      HEADER    req.http.Cookie\n * var      HEADER    req.http.host\n * var      STRING    req.method\n * var      STRING    req.proto\n * var      INT       req.restarts\n * var      STEVEDORE req.storage\n * var      DURATION  req.ttl\n * var      STRING    req.url\n * var      STRING    req.xid\n * none               req_top\n * none     HEADER    req_top.http*\n * var      STRING    req_top.method\n * var      STRING    req_top.proto\n * var      STRING    req_top.url\n * var      HTTP      resp\n * var      BODY      resp.body\n * none     HEADER    resp.http*\n * var      HEADER    resp.http.Content-Type\n * var      HEADER    resp.http.Retry-After\n * var      BOOL      resp.is_streaming\n * var      STRING    resp.proto\n * var      STRING    resp.reason\n * var      INT       resp.status\n * none               server\n * var      STRING    server.hostname\n * var      STRING    server.identity\n * var      IP        server.ip\n * none               storage\n * var      STEVEDORE storage.Transient\n * var      BYTES     storage.Transient.free_space\n * var      BOOL      storage.Transient.happy\n * var      BYTES     storage.Transient.used_space\n * var      STEVEDORE storage.s0\n * var      BYTES     storage.s0.free_space\n * var      BOOL      storage.s0.happy\n * var      BYTES     storage.s0.used_space\n * func               true\n * sub                vcl_backend_error\n * sub                vcl_backend_fetch\n * sub                vcl_backend_response\n * sub                vcl_deliver\n * sub                vcl_fini\n * sub                vcl_hash\n * sub                vcl_hit\n * sub                vcl_init\n * sub                vcl_miss\n * sub                vcl_pass\n * sub                vcl_pipe\n * sub                vcl_purge\n * sub                vcl_recv\n * sub                vcl_synth\n*/\n\n\n\u001b[0mRemoving intermediate container 0665798ab667\n ---> d8f7210a698c\nStep 6/11 : ENV RAILS_SERVE_STATIC_FILES true\n ---> Running in f0884ac6a84c\nRemoving intermediate container f0884ac6a84c\n ---> 3c9a3d4b5a86\nStep 7/11 : RUN export LDFLAGS=-lMagickWand-6.Q16   && gem update --system   && bundle install      --without=development test      --jobs=4      --retry=3   && bundle exec rake     assets:precompile     RAILS_ENV=production\n ---> Running in 6709cb778663\n\u001b[91mERROR:  Error installing rubygems-update:\n\trubygems-update requires Ruby version >= 2.6.0.\n\u001b[0m\u001b[91mERROR:  While executing gem ... (NoMethodError)\n    undefined method `version' for nil:NilClass\n\u001b[0mUpdating rubygems-update\nRemoving intermediate container 6709cb778663\n","stderr":"The command '/bin/sh -c export LDFLAGS=-lMagickWand-6.Q16   && gem update --system   && bundle install      --without=development test      --jobs=4      --retry=3   && bundle exec rake     assets:precompile     RAILS_ENV=production' returned a non-zero code: 1\n"},"endTime":1672200231344}