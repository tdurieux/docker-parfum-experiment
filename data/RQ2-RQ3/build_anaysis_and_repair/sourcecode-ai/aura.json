{"repository":"https://github.com/sourcecode-ai/aura","dockerfilePath":"Dockerfile","startTime":1673036325136,"endTime":1673036431992,"clone":{"startTime":1673036325137,"stdout":"","stderr":"Cloning into '/tmp/dinghy-analysis/sourcecode-ai/aura'...\n","error":null,"endTime":1673036326523,"commit":"99964a9038a0f313412cdcc5d3857147fb067b7a"},"originalBuild":{"startTime":1673036326585,"endTime":1673036431919,"error":{"code":1,"killed":false,"signal":null,"cmd":"docker build --no-cache --force-rm -t aura:latest -f /tmp/dinghy-analysis/sourcecode-ai/aura/Dockerfile ."},"stdout":"Sending build context to Docker daemon  21.38MB\r\r\nStep 1/34 : ARG pythonver=3.10\nStep 2/34 : ARG alpinever=3.15\nStep 3/34 : FROM python:${pythonver}-alpine${alpinever} AS aura-base\n3.10-alpine3.15: Pulling from library/python\n9621f1afde84: Already exists\n7dcbe358f5cf: Pulling fs layer\n998125783b5b: Pulling fs layer\n1e58433d9d1f: Pulling fs layer\n8814b3eaaa66: Pulling fs layer\n8814b3eaaa66: Waiting\n1e58433d9d1f: Verifying Checksum\n1e58433d9d1f: Download complete\n7dcbe358f5cf: Verifying Checksum\n7dcbe358f5cf: Download complete\n998125783b5b: Verifying Checksum\n998125783b5b: Download complete\n7dcbe358f5cf: Pull complete\n8814b3eaaa66: Verifying Checksum\n8814b3eaaa66: Download complete\n998125783b5b: Pull complete\n1e58433d9d1f: Pull complete\n8814b3eaaa66: Pull complete\nDigest: sha256:4cbe559428e1a13d10469578aee527f3c9f46894486dd9ba8f6f536887657712\nStatus: Downloaded newer image for python:3.10-alpine3.15\n ---> a6719df949a1\nStep 4/34 : ENV PATH=\"/root/.local/bin:${PATH}\"\n ---> Running in f08b05a50c22\nRemoving intermediate container f08b05a50c22\n ---> 8b91b852b025\nStep 5/34 : ENV CRYPTOGRAPHY_DONT_BUILD_RUST=1\n ---> Running in d63732c7cbf7\nRemoving intermediate container d63732c7cbf7\n ---> ed8df3fd0b78\nStep 6/34 : RUN addgroup analysis && adduser -S -G analysis analysis && mkdir /analyzer\n ---> Running in 53ef71510a1e\nRemoving intermediate container 53ef71510a1e\n ---> a725ab8be444\nStep 7/34 : ADD files/install_poetry.sh /analyzer\n ---> e623601d2442\nStep 8/34 : RUN apk add --no-cache     python2     curl     automake     file-dev     openssl-dev     autoconf     libtool     build-base     libffi-dev     rust     cargo     git &&     /analyzer/install_poetry.sh\n ---> Running in b1a356570f88\nfetch https://dl-cdn.alpinelinux.org/alpine/v3.15/main/x86_64/APKINDEX.tar.gz\nfetch https://dl-cdn.alpinelinux.org/alpine/v3.15/community/x86_64/APKINDEX.tar.gz\n(1/49) Upgrading libcrypto1.1 (1.1.1q-r0 -> 1.1.1s-r1)\n(2/49) Upgrading libssl1.1 (1.1.1q-r0 -> 1.1.1s-r1)\n(3/49) Installing m4 (1.4.18-r2)\n(4/49) Installing perl (5.34.0-r1)\n(5/49) Installing autoconf (2.71-r0)\n(6/49) Installing automake (1.16.4-r1)\n(7/49) Installing libgcc (10.3.1_git20211027-r0)\n(8/49) Installing libstdc++ (10.3.1_git20211027-r0)\n(9/49) Installing binutils (2.37-r3)\n(10/49) Installing libmagic (5.41-r0)\n(11/49) Installing file (5.41-r0)\n(12/49) Installing libgomp (10.3.1_git20211027-r0)\n(13/49) Installing libatomic (10.3.1_git20211027-r0)\n(14/49) Installing libgphobos (10.3.1_git20211027-r0)\n(15/49) Installing gmp (6.2.1-r1)\n(16/49) Installing isl22 (0.22-r0)\n(17/49) Installing mpfr4 (4.1.0-r0)\n(18/49) Installing mpc1 (1.2.1-r0)\n(19/49) Installing gcc (10.3.1_git20211027-r0)\n(20/49) Installing musl-dev (1.2.2-r7)\n(21/49) Installing libc-dev (0.7.2-r3)\n(22/49) Installing g++ (10.3.1_git20211027-r0)\n(23/49) Installing make (4.3-r0)\n(24/49) Installing fortify-headers (1.1-r1)\n(25/49) Installing patch (2.7.6-r7)\n(26/49) Installing build-base (0.5-r3)\n(27/49) Installing rust-stdlib (1.56.1-r0)\n(28/49) Installing libxml2 (2.9.14-r2)\n(29/49) Installing llvm12-libs (12.0.1-r0)\n(30/49) Installing rust (1.56.1-r0)\n(31/49) Installing brotli-libs (1.0.9-r5)\n(32/49) Installing nghttp2-libs (1.46.0-r0)\n(33/49) Installing libcurl (7.80.0-r5)\n(34/49) Installing cargo (1.56.1-r0)\n(35/49) Installing curl (7.80.0-r5)\n(36/49) Installing pkgconf (1.8.0-r0)\n(37/49) Installing file-dev (5.41-r0)\n(38/49) Installing pcre2 (10.40-r0)\n(39/49) Installing git (2.34.5-r0)\n(40/49) Installing perl-error (0.17029-r1)\n(41/49) Installing perl-git (2.34.5-r0)\n(42/49) Installing git-perl (2.34.5-r0)\n(43/49) Installing linux-headers (5.10.41-r0)\n(44/49) Installing libffi-dev (3.4.2-r1)\n(45/49) Installing bash (5.1.16-r0)\nExecuting bash-5.1.16-r0.post-install\n(46/49) Installing libltdl (2.4.6-r7)\n(47/49) Installing libtool (2.4.6-r7)\n(48/49) Installing openssl-dev (1.1.1s-r1)\n(49/49) Installing python2 (2.7.18-r4)\nExecuting busybox-1.34.1-r7.trigger\nOK: 1016 MiB in 83 packages\nRetrieving Poetry metadata\n\n# Welcome to Poetry!\n\nThis will download and install the latest version of Poetry,\na dependency and package manager for Python.\n\nIt will add the `poetry` command to Poetry's bin directory, located at:\n\n/root/.local/bin\n\nYou can uninstall at any time by executing this script with the --uninstall option,\nand these changes will be reverted.\n\nInstalling Poetry (1.3.1)\nInstalling Poetry (1.3.1): Creating environment\nInstalling Poetry (1.3.1): Installing Poetry\nInstalling Poetry (1.3.1): Creating script\nInstalling Poetry (1.3.1): Done\n\nPoetry (1.3.1) is installed now. Great!\n\nYou can test that everything is set up by executing:\n\n`poetry --version`\n\nRemoving intermediate container b1a356570f88\n ---> 0b7a01b0603b\nStep 9/34 : WORKDIR /analyzer\n ---> Running in 74223e451373\nRemoving intermediate container 74223e451373\n ---> 8e0f31ad92e6\nStep 10/34 : FROM aura-base AS aura-lite\n ---> 8e0f31ad92e6\nStep 11/34 : WORKDIR /analyzer\n ---> Running in 7bd95b3543b6\nRemoving intermediate container 7bd95b3543b6\n ---> 196a8dc208fe\nStep 12/34 : ADD custom_analyzer.py     entrypoint.sh     LICENSE.txt     README.rst     pyproject.toml     poetry.lock     /analyzer/\n ---> adf090ae36eb\nStep 13/34 : ADD aura /analyzer/aura\n ---> aa306fb1c50f\nStep 14/34 : ADD tests /analyzer/tests\n ---> 487c8d6bc52b\nStep 15/34 : ENV AURA_NO_CACHE=true\n ---> Running in 5ba8347382a6\nRemoving intermediate container 5ba8347382a6\n ---> 41e7f392be28\nStep 16/34 : RUN --mount=type=cache,mode=0755,target=/root/.cache poetry build &&    cd dist && export WHEEL_NAME=$(ls|grep .whl) && pip install $WHEEL_NAME &&    python -c \"import aura;\"  &&    find /analyzer -name '*.pyc' -delete -print &&    chmod +x /analyzer/entrypoint.sh &&    chmod 777 -R /analyzer  &&    cd /analyzer &&    aura update\n","stderr":"the --mount option requires BuildKit. Refer to https://docs.docker.com/go/buildkit/ to learn how to build images with BuildKit enabled\n"}}