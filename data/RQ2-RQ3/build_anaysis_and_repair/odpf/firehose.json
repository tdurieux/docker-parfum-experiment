{"repository":"https://github.com/odpf/firehose","dockerfilePath":"Dockerfile","startTime":1672091400535,"clone":{"stdout":"","stderr":"Cloning into '/tmp/dinghy-analysis/odpf/firehose'...\n","error":null,"commit":"c1782fe42c6e1a1d6870b401fb5874cb8f8021bc"},"originalBuild":{"startTimestamp":1672091402564,"endTimestamp":1672091689453,"error":null,"stdout":"Sending build context to Docker daemon   18.7MB\r\r\nStep 1/12 : FROM adoptopenjdk:8-jdk-openj9 AS GRADLE_BUILD\n8-jdk-openj9: Pulling from library/adoptopenjdk\nf3ef4ff62e0d: Pulling fs layer\n706b9b9c1c44: Pulling fs layer\n1a53b0e22d89: Pulling fs layer\n909a719c4fc9: Pulling fs layer\n706b9b9c1c44: Verifying Checksum\n706b9b9c1c44: Download complete\nf3ef4ff62e0d: Verifying Checksum\nf3ef4ff62e0d: Download complete\n909a719c4fc9: Verifying Checksum\n909a719c4fc9: Download complete\n1a53b0e22d89: Verifying Checksum\n1a53b0e22d89: Download complete\nf3ef4ff62e0d: Pull complete\n706b9b9c1c44: Pull complete\n1a53b0e22d89: Pull complete\n909a719c4fc9: Pull complete\nDigest: sha256:5cfa50232686cd442e375aed2566695c6219e9c9283e01ab68d8851f55de7bc6\nStatus: Downloaded newer image for adoptopenjdk:8-jdk-openj9\n ---> 5d9196077960\nStep 2/12 : RUN mkdir -p ./build/libs/\n ---> Running in e301e6c98be4\nRemoving intermediate container e301e6c98be4\n ---> 9c7bf9624316\nStep 3/12 : RUN curl -L http://search.maven.org/remotecontent?filepath=org/jolokia/jolokia-jvm/1.6.2/jolokia-jvm-1.6.2-agent.jar -o ./jolokia-jvm-agent.jar\n ---> Running in fff3ad095ecc\n\u001b[91m  % Total    % Received % Xferd  Ave\u001b[0m\u001b[91mrage Speed   Time    Ti\u001b[0m\u001b[91mme \u001b[0m\u001b[91m    \u001b[0m\u001b[91mTime\u001b[0m\u001b[91m  C\u001b[0m\u001b[91murre\u001b[0m\u001b[91mnt\n            \u001b[0m\u001b[91m            \u001b[0m\u001b[91m       \u001b[0m\u001b[91m  Dload\u001b[0m\u001b[91m  Upload   Tot\u001b[0m\u001b[91mal  \u001b[0m\u001b[91m Spent \u001b[0m\u001b[91m   Left  S\u001b[0m\u001b[91mpeed\n\u001b[0m\u001b[91m\r  \u001b[0m\u001b[91m0  \u001b[0m\u001b[91m   0\u001b[0m\u001b[91m   \u001b[0m\u001b[91m 0     \u001b[0m\u001b[91m0    0 \u001b[0m\u001b[91m    0      \u001b[0m\u001b[91m0      0 --\u001b[0m\u001b[91m:--\u001b[0m\u001b[91m:--\u001b[0m\u001b[91m --:--\u001b[0m\u001b[91m:-- --:-\u001b[0m\u001b[91m-:-- \u001b[0m\u001b[91m    \u001b[0m\u001b[91m0\u001b[0m\u001b[91m\r100   138  100   138    \u001b[0m\u001b[91m0     0    563\u001b[0m\u001b[91m  \u001b[0m\u001b[91m    0\u001b[0m\u001b[91m --:--:-- \u001b[0m\u001b[91m--\u001b[0m\u001b[91m:--:-\u001b[0m\u001b[91m- --:--:--   \u001b[0m\u001b[91m563\n\u001b[0m\u001b[91m\r100  454k  100  454k    0     0  1593k      0 --:--:-- -\u001b[0m\u001b[91m-:--:-- --:--:--\u001b[0m\u001b[91m 1593\u001b[0m\u001b[91mk\n\u001b[0mRemoving intermediate container fff3ad095ecc\n ---> f2f530d3bb25\nStep 4/12 : COPY ./ ./\n ---> 58c928bf78cb\nStep 5/12 : RUN ./gradlew build\n ---> Running in b78f704c2d56\nDownloading https://services.gradle.org/distributions/gradle-7.2-all.zip\n..............10%...............20%...............30%...............40%...............50%...............60%...............70%...............80%...............90%...............100%\n\nWelcome to Gradle 7.2!\n\nHere are the highlights of this release:\n - Toolchain support for Scala\n - More cache hits when Java source files have platform-specific line endings\n - More resilient remote HTTP build cache behavior\n\nFor more details see https://docs.gradle.org/7.2/release-notes.html\n\nStarting a Gradle Daemon (subsequent builds will be faster)\n> Task :extractIncludeProto\n> Task :extractProto\n> Task :generateProto\n\n> Task :compileJava\n\u001b[91mNote: Some input files use or override a deprecated API.\n\u001b[0m\u001b[91mNote: Recompile with -Xlint:deprecation for details.\n\u001b[0m\u001b[91mNote: Some input files use unchecked or unsafe operations.\n\u001b[0m\u001b[91mNote: Recompile with -Xlint:unchecked for details.\n\u001b[0m\n> Task :processResources\n> Task :classes\n> Task :jar\n> Task :assemble\n> Task :checkstyleMain\n> Task :extractIncludeTestProto\n> Task :extractTestProto\n> Task :generateTestProto\n\n> Task :compileTestJava\n\u001b[91mNote: Some input files use or override a deprecated API.\n\u001b[0m\u001b[91mNote: Recompile with -Xlint:deprecation for details.\n\u001b[0m\u001b[91mNote: Some input files use unchecked or unsafe operations.\n\u001b[0m\u001b[91mNote: Recompile with -Xlint:unchecked for details.\n\u001b[0m\n> Task :processTestResources\nExecution optimizations have been disabled for task ':processTestResources' to ensure correctness due to the following reasons:\n  - Gradle detected a problem with the following location: '/src/test/resources'. Reason: Task ':processTestResources' uses this output of task ':generateProto' without declaring an explicit or implicit dependency. This can lead to incorrect results being produced, depending on what order the tasks are executed. Please refer to https://docs.gradle.org/7.2/userguide/validation_problems.html#implicit_dependency for more details about this problem.\n  - Gradle detected a problem with the following location: '/src/test/resources'. Reason: Task ':processTestResources' uses this output of task ':generateTestProto' without declaring an explicit or implicit dependency. This can lead to incorrect results being produced, depending on what order the tasks are executed. Please refer to https://docs.gradle.org/7.2/userguide/validation_problems.html#implicit_dependency for more details about this problem.\n\n> Task :testClasses\n> Task :checkstyleTest\n\n> Task :test\nRunning test: Test shouldThrowExceptionForInvalidProtoClass(io.odpf.firehose.proto.ProtoMessageTest)\n\nio.odpf.firehose.proto.ProtoMessageTest > shouldThrowExceptionForInvalidProtoClass PASSED\nRunning test: Test shouldThrowExceptionForCorruptedEsbMessages(io.odpf.firehose.proto.ProtoMessageTest)\n\nio.odpf.firehose.proto.ProtoMessageTest > shouldThrowExceptionForCorruptedEsbMessages PASSED\nRunning test: Test shouldGetFieldValueBasedOnIndex(io.odpf.firehose.proto.ProtoMessageTest)\n\nio.odpf.firehose.proto.ProtoMessageTest > shouldGetFieldValueBasedOnIndex PASSED\nRunning test: Test shouldThrowExceptionForUnknownClass(io.odpf.firehose.proto.ProtoMessageTest)\n\nio.odpf.firehose.proto.ProtoMessageTest > shouldThrowExceptionForUnknownClass PASSED\nRunning test: Test shouldReturnFalseWhenRootIsNull(io.odpf.firehose.proto.ProtoUtilTest)\n\nio.odpf.firehose.proto.ProtoUtilTest > shouldReturnFalseWhenRootIsNull PASSED\nRunning test: Test shouldReturnFalseWhenNoUnknownFieldsExist(io.odpf.firehose.proto.ProtoUtilTest)\n\nio.odpf.firehose.proto.ProtoUtilTest > shouldReturnFalseWhenNoUnknownFieldsExist PASSED\nRunning test: Test shouldReturnTrueWhenUnknownFieldsExistOnNestedChildFields(io.odpf.firehose.proto.ProtoUtilTest)\n\nio.odpf.firehose.proto.ProtoUtilTest > shouldReturnTrueWhenUnknownFieldsExistOnNestedChildFields PASSED\nRunning test: Test shouldReturnTrueWhenUnknownFieldsExistOnRootLevelFields(io.odpf.firehose.proto.ProtoUtilTest)\n\nio.odpf.firehose.proto.ProtoUtilTest > shouldReturnTrueWhenUnknownFieldsExistOnRootLevelFields PASSED\nRunning test: Test shouldThrowIOExceptionWhenMessageContainsConfiguredError(io.odpf.firehose.sinkdecorator.SinkWithFailHandlerTest)\n\nio.odpf.firehose.sinkdecorator.SinkWithFailHandlerTest > shouldThrowIOExceptionWhenMessageContainsConfiguredError PASSED\nRunning test: Test shouldNotThrowIOExceptionWhenConfigIsNotSet(io.odpf.firehose.sinkdecorator.SinkWithFailHandlerTest)\n\nio.odpf.firehose.sinkdecorator.SinkWithFailHandlerTest > shouldNotThrowIOExceptionWhenConfigIsNotSet PASSED\nRunning test: Test shouldRetryWriteMessagesToDlqUntilRetryMessagesEmpty(io.odpf.firehose.sinkdecorator.SinkWithDlqTest)\n\nio.odpf.firehose.sinkdecorator.SinkWithDlqTest > shouldRetryWriteMessagesToDlqUntilRetryMessagesEmpty PASSED\nRunning test: Test shouldNotThrowIOExceptionWhenFailOnMaxRetryAttemptDisabled(io.odpf.firehose.sinkdecorator.SinkWithDlqTest)\n\nio.odpf.firehose.sinkdecorator.SinkWithDlqTest > shouldNotThrowIOExceptionWhenFailOnMaxRetryAttemptDisabled PASSED\nRunning test: Test shouldWriteDlqMessagesWhenErrorTypesConfigured(io.odpf.firehose.sinkdecorator.SinkWithDlqTest)\n\nio.odpf.firehose.sinkdecorator.SinkWithDlqTest > shouldWriteDlqMessagesWhenErrorTypesConfigured PASSED\nRunning test: Test shouldThrowIOExceptionWhenExceedMaxRetryAttemptsButButHasFailedToBeDlqProcessedMessages(io.odpf.firehose.sinkdecorator.SinkWithDlqTest)\n\nio.odpf.firehose.sinkdecorator.SinkWithDlqTest > shouldThrowIOExceptionWhenExceedMaxRetryAttemptsButButHasFailedToBeDlqProcessedMessages PASSED\nRunning test: Test shouldNotRegisterAndCommitOffsetWhenNoMessagesIsProcessedByDLQ(io.odpf.firehose.sinkdecorator.SinkWithDlqTest)\n\nio.odpf.firehose.sinkdecorator.SinkWithDlqTest > shouldNotRegisterAndCommitOffsetWhenNoMessagesIsProcessedByDLQ PASSED\nRunning test: Test shouldInstrumentFailure(io.odpf.firehose.sinkdecorator.SinkWithDlqTest)\n\nio.odpf.firehose.sinkdecorator.SinkWithDlqTest > shouldInstrumentFailure PASSED\nRunning test: Test shouldCommitOffsetsOfDlqMessagesWhenSinkManageOffset(io.odpf.firehose.sinkdecorator.SinkWithDlqTest)\n\nio.odpf.firehose.sinkdecorator.SinkWithDlqTest > shouldCommitOffsetsOfDlqMessagesWhenSinkManageOffset PASSED\nRunning test: Test shouldWriteToDLQWriter(io.odpf.firehose.sinkdecorator.SinkWithDlqTest)\n\nio.odpf.firehose.sinkdecorator.SinkWithDlqTest > shouldWriteToDLQWriter PASSED\nRunning test: Test shouldNotWriteToDLQWhenDlqMessagesIsEmpty(io.odpf.firehose.sinkdecorator.SinkWithDlqTest)\n\nio.odpf.firehose.sinkdecorator.SinkWithDlqTest > shouldNotWriteToDLQWhenDlqMessagesIsEmpty PASSED\nRunning test: Test shouldThrowIOExceptionWhenWriterThrowIOException(io.odpf.firehose.sinkdecorator.SinkWithDlqTest)\n\nio.odpf.firehose.sinkdecorator.SinkWithDlqTest > shouldThrowIOExceptionWhenWriterThrowIOException PASSED\nRunning test: Test shouldBackoffExponentially(io.odpf.firehose.sinkdecorator.ExponentialBackOffProviderTest)\n\nio.odpf.firehose.sinkdecorator.ExponentialBackOffProviderTest > shouldBackoffExponentially PASSED\nRunning test: Test shouldRecordStatsForBackOffTime(io.odpf.firehose.sinkdecorator.ExponentialBackOffProviderTest)\n\nio.odpf.firehose.sinkdecorator.ExponentialBackOffProviderTest > shouldRecordStatsForBackOffTime PASSED\nRunning test: Test shouldBeWithinMaxBackoffTime(io.odpf.firehose.sinkdecorator.ExponentialBackOffProviderTest)\n\nio.odpf.firehose.sinkdecorator.ExponentialBackOffProviderTest > shouldBeWithinMaxBackoffTime PASSED\nRunning test: Test shouldSleepForBackOffTimeOnFirstRetry(io.odpf.firehose.sinkdecorator.ExponentialBackOffProviderTest)\n\nio.odpf.firehose.sinkdecorator.ExponentialBackOffProviderTest > shouldSleepForBackOffTimeOnFirstRetry PASSED\nRunning test: Test shouldIgnoreMessages(io.odpf.firehose.sinkdecorator.SinkFinalTest)\n\nio.odpf.firehose.sinkdecorator.SinkFinalTest > shouldIgnoreMessages PASSED\nRunning test: Test shouldRetryUntilSuccess(io.odpf.firehose.sinkdecorator.SinkWithRetryTest)\n\nio.odpf.firehose.sinkdecorator.SinkWithRetryTest > shouldRetryUntilSuccess PASSED\nRunning test: Test shouldThrowIOExceptionWhenExceedMaximumRetryAttempts(io.odpf.firehose.sinkdecorator.SinkWithRetryTest)\n\nio.odpf.firehose.sinkdecorator.SinkWithRetryTest > shouldThrowIOExceptionWhenExceedMaximumRetryAttempts PASSED\nRunning test: Test shouldReturnEmptyListIfSuperReturnsEmptyList(io.odpf.firehose.sinkdecorator.SinkWithRetryTest)\n\nio.odpf.firehose.sinkdecorator.SinkWithRetryTest > shouldReturnEmptyListIfSuperReturnsEmptyList PASSED\nRunning test: Test shouldRetryForNumberOfAttemptsAndSendEmptyMessageOnSuccess(io.odpf.firehose.sinkdecorator.SinkWithRetryTest)\n\nio.odpf.firehose.sinkdecorator.SinkWithRetryTest > shouldRetryForNumberOfAttemptsAndSendEmptyMessageOnSuccess PASSED\nRunning test: Test shouldLogRetriesMessagesForJsonInput(io.odpf.firehose.sinkdecorator.SinkWithRetryTest)\n\nio.odpf.firehose.sinkdecorator.SinkWithRetryTest > shouldLogRetriesMessagesForJsonInput PASSED\nRunning test: Test shouldLogRetriesMessages(io.odpf.firehose.sinkdecorator.SinkWithRetryTest)\n\nio.odpf.firehose.sinkdecorator.SinkWithRetryTest > shouldLogRetriesMessages PASSED\nRunning test: Test shouldRetryMessagesWhenErrorTypesConfigured(io.odpf.firehose.sinkdecorator.SinkWithRetryTest)\n\nio.odpf.firehose.sinkdecorator.SinkWithRetryTest > shouldRetryMessagesWhenErrorTypesConfigured PASSED\nRunning test: Test shouldAddInstrumentationForRetryFailures(io.odpf.firehose.sinkdecorator.SinkWithRetryTest)\n\nio.odpf.firehose.sinkdecorator.SinkWithRetryTest > shouldAddInstrumentationForRetryFailures PASSED\nRunning test: Test shouldRetryForNumberOfAttemptsIfSuperReturnsEsbMessages(io.odpf.firehose.sinkdecorator.SinkWithRetryTest)\n\nio.odpf.firehose.sinkdecorator.SinkWithRetryTest > shouldRetryForNumberOfAttemptsIfSuperReturnsEsbMessages PASSED\nRunning test: Test shouldAddInstrumentationForRetry(io.odpf.firehose.sinkdecorator.SinkWithRetryTest)\n\nio.odpf.firehose.sinkdecorator.SinkWithRetryTest > shouldAddInstrumentationForRetry PASSED\nRunning test: Test shouldAddOffsetsForFilteredMessages(io.odpf.firehose.consumer.FirehoseAsyncConsumerTest)\n\nio.odpf.firehose.consumer.FirehoseAsyncConsumerTest > shouldAddOffsetsForFilteredMessages PASSED\nRunning test: Test shouldThrowExceptionIfSinkTaskFails(io.odpf.firehose.consumer.FirehoseAsyncConsumerTest)\n\nio.odpf.firehose.consumer.FirehoseAsyncConsumerTest > shouldThrowExceptionIfSinkTaskFails PASSED\nRunning test: Test shouldCallSetCommittableForDoneFutures(io.odpf.firehose.consumer.FirehoseAsyncConsumerTest)\n\nio.odpf.firehose.consumer.FirehoseAsyncConsumerTest > shouldCallSetCommittableForDoneFutures PASSED\nRunning test: Test shouldPushMessagesInParallel(io.odpf.firehose.consumer.FirehoseAsyncConsumerTest)\n\nio.odpf.firehose.consumer.FirehoseAsyncConsumerTest > shouldPushMessagesInParallel PASSED\nRunning test: Test shouldPartitiondMessages(io.odpf.firehose.consumer.FirehoseFilterTest)\n\nio.odpf.firehose.consumer.FirehoseFilterTest > shouldPartitiondMessages PASSED\nRunning test: Test shouldReturnAllMessages(io.odpf.firehose.consumer.FirehoseFilterTest)\n\nio.odpf.firehose.consumer.FirehoseFilterTest > shouldReturnAllMessages PASSED\nRunning test: Test shouldCommitWithoutDelay(io.odpf.firehose.consumer.ConsumerAndOffsetManagerTest)\n\nio.odpf.firehose.consumer.ConsumerAndOffsetManagerTest > shouldCommitWithoutDelay PASSED\nRunning test: Test shouldCommitAfterDelay(io.odpf.firehose.consumer.ConsumerAndOffsetManagerTest)\n\nio.odpf.firehose.consumer.ConsumerAndOffsetManagerTest > shouldCommitAfterDelay PASSED\nRunning test: Test shouldCommitToKafka(io.odpf.firehose.consumer.ConsumerAndOffsetManagerTest)\n\nio.odpf.firehose.consumer.ConsumerAndOffsetManagerTest > shouldCommitToKafka PASSED\nRunning test: Test shouldCommitToKafkaWithSinkManagesOwnOffsets(io.odpf.firehose.consumer.ConsumerAndOffsetManagerTest)\n\nio.odpf.firehose.consumer.ConsumerAndOffsetManagerTest > shouldCommitToKafkaWithSinkManagesOwnOffsets PASSED\nRunning test: Test shouldCaptureNonFatalError(io.odpf.firehose.consumer.kafka.FirehoseKafkaConsumerTest)\n\nio.odpf.firehose.consumer.kafka.FirehoseKafkaConsumerTest > shouldCaptureNonFatalError PASSED\nRunning test: Test shouldCallAsyncCommitWithOffsets(io.odpf.firehose.consumer.kafka.FirehoseKafkaConsumerTest)\n\nio.odpf.firehose.consumer.kafka.FirehoseKafkaConsumerTest > shouldCallAsyncCommitWithOffsets PASSED\nRunning test: Test shouldrecordStatsFromEsbLog(io.odpf.firehose.consumer.kafka.FirehoseKafkaConsumerTest)\n\nio.odpf.firehose.consumer.kafka.FirehoseKafkaConsumerTest > shouldrecordStatsFromEsbLog PASSED\nRunning test: Test shouldCommitLatestOffsetsWithAsyncCommit(io.odpf.firehose.consumer.kafka.FirehoseKafkaConsumerTest)\n\nio.odpf.firehose.consumer.kafka.FirehoseKafkaConsumerTest > shouldCommitLatestOffsetsWithAsyncCommit PASSED\nRunning test: Test shouldAsyncCommit(io.odpf.firehose.consumer.kafka.FirehoseKafkaConsumerTest)\n\nio.odpf.firehose.consumer.kafka.FirehoseKafkaConsumerTest > shouldAsyncCommit PASSED\nRunning test: Test shouldCallCommit(io.odpf.firehose.consumer.kafka.FirehoseKafkaConsumerTest)\n\nio.odpf.firehose.consumer.kafka.FirehoseKafkaConsumerTest > shouldCallCommit PASSED\nRunning test: Test getsMessagesFromEsbLogWithHeadersIfKafkaHeadersAreSet(io.odpf.firehose.consumer.kafka.FirehoseKafkaConsumerTest)\n\nio.odpf.firehose.consumer.kafka.FirehoseKafkaConsumerTest > getsMessagesFromEsbLogWithHeadersIfKafkaHeadersAreSet PASSED\nRunning test: Test shouldCallCloseOnConsumer(io.odpf.firehose.consumer.kafka.FirehoseKafkaConsumerTest)\n\nio.odpf.firehose.consumer.kafka.FirehoseKafkaConsumerTest > shouldCallCloseOnConsumer PASSED\nRunning test: Test shouldCommitLatestOffsets(io.odpf.firehose.consumer.kafka.FirehoseKafkaConsumerTest)\n\nio.odpf.firehose.consumer.kafka.FirehoseKafkaConsumerTest > shouldCommitLatestOffsets PASSED\nRunning test: Test shouldSuppressExceptionOnClose(io.odpf.firehose.consumer.kafka.FirehoseKafkaConsumerTest)\n\nio.odpf.firehose.consumer.kafka.FirehoseKafkaConsumerTest > shouldSuppressExceptionOnClose PASSED\nRunning test: Test getsMessagesFromEsbLog(io.odpf.firehose.consumer.kafka.FirehoseKafkaConsumerTest)\n\nio.odpf.firehose.consumer.kafka.FirehoseKafkaConsumerTest > getsMessagesFromEsbLog PASSED\nRunning test: Test shouldAddMultipleTopicPartitions(io.odpf.firehose.consumer.kafka.OffsetManagerTest)\n\nio.odpf.firehose.consumer.kafka.OffsetManagerTest > shouldAddMultipleTopicPartitions PASSED\nRunning test: Test shouldCompactAndFetch(io.odpf.firehose.consumer.kafka.OffsetManagerTest)\n\nio.odpf.firehose.consumer.kafka.OffsetManagerTest > shouldCompactAndFetch PASSED\nRunning test: Test shouldAddMultipleBatches(io.odpf.firehose.consumer.kafka.OffsetManagerTest)\n\nio.odpf.firehose.consumer.kafka.OffsetManagerTest > shouldAddMultipleBatches PASSED\nRunning test: Test testCommitBatch(io.odpf.firehose.consumer.kafka.OffsetManagerTest)\n\nio.odpf.firehose.consumer.kafka.OffsetManagerTest > testCommitBatch PASSED\nRunning test: Test shouldAddOffsetToBatch(io.odpf.firehose.consumer.kafka.OffsetManagerTest)\n\nio.odpf.firehose.consumer.kafka.OffsetManagerTest > shouldAddOffsetToBatch PASSED\nRunning test: Test shouldReturnCommittableOffset(io.odpf.firehose.consumer.kafka.OffsetManagerTest)\n\nio.odpf.firehose.consumer.kafka.OffsetManagerTest > shouldReturnCommittableOffset PASSED\nRunning test: Test shouldCallTracerWithTheSpan(io.odpf.firehose.consumer.FirehoseSyncConsumerTest)\n\nio.odpf.firehose.consumer.FirehoseSyncConsumerTest > shouldCallTracerWithTheSpan PASSED\nRunning test: Test shouldProcessPartitions(io.odpf.firehose.consumer.FirehoseSyncConsumerTest)\n\nio.odpf.firehose.consumer.FirehoseSyncConsumerTest > shouldProcessPartitions PASSED\nRunning test: Test shouldProcessEmptyPartitions(io.odpf.firehose.consumer.FirehoseSyncConsumerTest)\n\nio.odpf.firehose.consumer.FirehoseSyncConsumerTest > shouldProcessEmptyPartitions PASSED\nRunning test: Test shouldAddOffsetsForInvalidMessages(io.odpf.firehose.consumer.FirehoseSyncConsumerTest)\n\nio.odpf.firehose.consumer.FirehoseSyncConsumerTest > shouldAddOffsetsForInvalidMessages PASSED\nRunning test: Test shouldCloseConsumerIfConsumerIsNotNull(io.odpf.firehose.consumer.FirehoseSyncConsumerTest)\n\nio.odpf.firehose.consumer.FirehoseSyncConsumerTest > shouldCloseConsumerIfConsumerIsNotNull PASSED\nRunning test: Test shouldNotCloseConsumerIfConsumerIsNull(io.odpf.firehose.consumer.FirehoseSyncConsumerTest)\n\nio.odpf.firehose.consumer.FirehoseSyncConsumerTest > shouldNotCloseConsumerIfConsumerIsNull PASSED\nRunning test: Test shouldSendNoOfMessagesReceivedCount(io.odpf.firehose.consumer.FirehoseSyncConsumerTest)\n\nio.odpf.firehose.consumer.FirehoseSyncConsumerTest > shouldSendNoOfMessagesReceivedCount PASSED\nRunning test: Test shouldProperlySerializeMessageToTemplateWithAsItIs(io.odpf.firehose.serializer.MessageToTemplatizedJsonTest)\n\nio.odpf.firehose.serializer.MessageToTemplatizedJsonTest > shouldProperlySerializeMessageToTemplateWithAsItIs PASSED\nRunning test: Test shouldFailForNonJsonTemplate(io.odpf.firehose.serializer.MessageToTemplatizedJsonTest)\n\nio.odpf.firehose.serializer.MessageToTemplatizedJsonTest > shouldFailForNonJsonTemplate PASSED\nRunning test: Test shouldDoRegexMatchingToReplaceThingsFromProtobuf(io.odpf.firehose.serializer.MessageToTemplatizedJsonTest)\n\nio.odpf.firehose.serializer.MessageToTemplatizedJsonTest > shouldDoRegexMatchingToReplaceThingsFromProtobuf PASSED\nRunning test: Test shouldThrowIfNoPathsFoundInTheProto(io.odpf.firehose.serializer.MessageToTemplatizedJsonTest)\n\nio.odpf.firehose.serializer.MessageToTemplatizedJsonTest > shouldThrowIfNoPathsFoundInTheProto PASSED\nRunning test: Test shouldLogPaths(io.odpf.firehose.serializer.MessageToTemplatizedJsonTest)\n\nio.odpf.firehose.serializer.MessageToTemplatizedJsonTest > shouldLogPaths PASSED\nRunning test: Test shouldProperlySerializeMessageToTemplateWithSingleUnknownField(io.odpf.firehose.serializer.MessageToTemplatizedJsonTest)\n\nio.odpf.firehose.serializer.MessageToTemplatizedJsonTest > shouldProperlySerializeMessageToTemplateWithSingleUnknownField PASSED\nRunning test: Test shouldSerializeWhenKeyIsEmptyWithTimestampsAsSimpleDateFormatWhenFlagIsEnabled(io.odpf.firehose.serializer.MessageToJsonTest)\n\nio.odpf.firehose.serializer.MessageToJsonTest > shouldSerializeWhenKeyIsEmptyWithTimestampsAsSimpleDateFormatWhenFlagIsEnabled PASSED\nRunning test: Test shouldWrappedSerializedJsonInArrayWithTimestampsAsSimpleDateFormatWhenFlagsAreEnabled(io.odpf.firehose.serializer.MessageToJsonTest)\n\nio.odpf.firehose.serializer.MessageToJsonTest > shouldWrappedSerializedJsonInArrayWithTimestampsAsSimpleDateFormatWhenFlagsAreEnabled PASSED\nRunning test: Test shouldProperlySerializeEsbMessage(io.odpf.firehose.serializer.MessageToJsonTest)\n\nio.odpf.firehose.serializer.MessageToJsonTest > shouldProperlySerializeEsbMessage PASSED\nRunning test: Test shouldSerializeWhenKeyIsEmptyWithTimestampsAsISOFormatWhenFlagIsDisabled(io.odpf.firehose.serializer.MessageToJsonTest)\n\nio.odpf.firehose.serializer.MessageToJsonTest > shouldSerializeWhenKeyIsEmptyWithTimestampsAsISOFormatWhenFlagIsDisabled PASSED\nRunning test: Test shouldSerializeWhenKeyIsMissing(io.odpf.firehose.serializer.MessageToJsonTest)\n\nio.odpf.firehose.serializer.MessageToJsonTest > shouldSerializeWhenKeyIsMissing PASSED\nRunning test: Test shouldReturnTheTimestampFieldsInISOFormatIfSimpleDateFormatIsDisabled(io.odpf.firehose.serializer.MessageToJsonTest)\n\nio.odpf.firehose.serializer.MessageToJsonTest > shouldReturnTheTimestampFieldsInISOFormatIfSimpleDateFormatIsDisabled PASSED\nRunning test: Test shouldWrapProtoByteInsideJson(io.odpf.firehose.serializer.JsonWrappedProtoByteTest)\n\nio.odpf.firehose.serializer.JsonWrappedProtoByteTest > shouldWrapProtoByteInsideJson PASSED\nRunning test: Test shouldCreateSpanWhenTheHeadersIsEmptyAndTracingIsEnabled(io.odpf.firehose.tracer.SinkTracerTest)\n\nio.odpf.firehose.tracer.SinkTracerTest > shouldCreateSpanWhenTheHeadersIsEmptyAndTracingIsEnabled PASSED\nRunning test: Test shouldCloseTheSpan(io.odpf.firehose.tracer.SinkTracerTest)\n\nio.odpf.firehose.tracer.SinkTracerTest > shouldCloseTheSpan PASSED\nRunning test: Test shouldNotCreateSpanWhenTheHeadersIsEmptyAndTracingIsDisabled(io.odpf.firehose.tracer.SinkTracerTest)\n\nio.odpf.firehose.tracer.SinkTracerTest > shouldNotCreateSpanWhenTheHeadersIsEmptyAndTracingIsDisabled PASSED\nRunning test: Test shouldWriteMessagesWithoutErrorInfoToObjectStorage(io.odpf.firehose.sink.dlq.blobstorage.BlobStorageDlqWriterTest)\n\nio.odpf.firehose.sink.dlq.blobstorage.BlobStorageDlqWriterTest > shouldWriteMessagesWithoutErrorInfoToObjectStorage PASSED\nRunning test: Test shouldThrowIOExceptionWhenWriteFileThrowIOException(io.odpf.firehose.sink.dlq.blobstorage.BlobStorageDlqWriterTest)\n\nio.odpf.firehose.sink.dlq.blobstorage.BlobStorageDlqWriterTest > shouldThrowIOExceptionWhenWriteFileThrowIOException PASSED\nRunning test: Test shouldWriteMessageErrorTypesToObjectStorage(io.odpf.firehose.sink.dlq.blobstorage.BlobStorageDlqWriterTest)\n\nio.odpf.firehose.sink.dlq.blobstorage.BlobStorageDlqWriterTest > shouldWriteMessageErrorTypesToObjectStorage PASSED\nRunning test: Test shouldWriteMessagesToLog(io.odpf.firehose.sink.dlq.LogDlqWriterTest)\n\nio.odpf.firehose.sink.dlq.LogDlqWriterTest > shouldWriteMessagesToLog PASSED\nRunning test: Test shouldWriteMessagesToLogWhenValueIsNull(io.odpf.firehose.sink.dlq.LogDlqWriterTest)\n\nio.odpf.firehose.sink.dlq.LogDlqWriterTest > shouldWriteMessagesToLogWhenValueIsNull PASSED\nRunning test: Test shouldWriteMessagesToLogWhenErrorInfoIsNull(io.odpf.firehose.sink.dlq.LogDlqWriterTest)\n\nio.odpf.firehose.sink.dlq.LogDlqWriterTest > shouldWriteMessagesToLogWhenErrorInfoIsNull PASSED\nRunning test: Test shouldWriteMessagesToLogWhenKeyIsNull(io.odpf.firehose.sink.dlq.LogDlqWriterTest)\n\nio.odpf.firehose.sink.dlq.LogDlqWriterTest > shouldWriteMessagesToLogWhenKeyIsNull PASSED\nRunning test: Test shouldWriteMessagesToLogWhenErrorInfoExceptionIsNull(io.odpf.firehose.sink.dlq.LogDlqWriterTest)\n\nio.odpf.firehose.sink.dlq.LogDlqWriterTest > shouldWriteMessagesToLogWhenErrorInfoExceptionIsNull PASSED\nRunning test: Test shouldReturnFailedMessagesWhenExceptionThrown(io.odpf.firehose.sink.dlq.KafkaDlqWriterTest)\n\nio.odpf.firehose.sink.dlq.KafkaDlqWriterTest > shouldReturnFailedMessagesWhenExceptionThrown PASSED\nRunning test: Test shouldReturnEmptyListWhenWriteEmptyMessages(io.odpf.firehose.sink.dlq.KafkaDlqWriterTest)\n\nio.odpf.firehose.sink.dlq.KafkaDlqWriterTest > shouldReturnEmptyListWhenWriteEmptyMessages PASSED\nRunning test: Test shouldSendWithCorrectArgumentsIfHeadersAreSet(io.odpf.firehose.sink.dlq.KafkaDlqWriterTest)\n\nio.odpf.firehose.sink.dlq.KafkaDlqWriterTest > shouldSendWithCorrectArgumentsIfHeadersAreSet PASSED\nRunning test: Test shouldRecordMessagesToBeSendToKafkaRetryQueue(io.odpf.firehose.sink.dlq.KafkaDlqWriterTest)\n\nio.odpf.firehose.sink.dlq.KafkaDlqWriterTest > shouldRecordMessagesToBeSendToKafkaRetryQueue PASSED\nRunning test: Test shouldSendWithCorrectArgumentsIfHeadersAreNotSet(io.odpf.firehose.sink.dlq.KafkaDlqWriterTest)\n\nio.odpf.firehose.sink.dlq.KafkaDlqWriterTest > shouldSendWithCorrectArgumentsIfHeadersAreNotSet PASSED\nRunning test: Test shouldWriteToKafkaProducer(io.odpf.firehose.sink.dlq.KafkaDlqWriterTest)\n\nio.odpf.firehose.sink.dlq.KafkaDlqWriterTest > shouldWriteToKafkaProducer PASSED\nRunning test: Test shouldThrowExceptionWhenCreateMongoClientWithNullUsername(io.odpf.firehose.sink.mongodb.MongoSinkFactoryTest)\n\nio.odpf.firehose.sink.mongodb.MongoSinkFactoryTest > shouldThrowExceptionWhenCreateMongoClientWithNullUsername PASSED\nRunning test: Test shouldCreateMongoClientWithNoAuthentication(io.odpf.firehose.sink.mongodb.MongoSinkFactoryTest)\n\nio.odpf.firehose.sink.mongodb.MongoSinkFactoryTest > shouldCreateMongoClientWithNoAuthentication PASSED\nRunning test: Test shouldCreateMongoClientWithValidAuthentication(io.odpf.firehose.sink.mongodb.MongoSinkFactoryTest)\n\nio.odpf.firehose.sink.mongodb.MongoSinkFactoryTest > shouldCreateMongoClientWithValidAuthentication PASSED\nRunning test: Test shouldThrowExceptionWhenCreateMongoClientWithNullPassword(io.odpf.firehose.sink.mongodb.MongoSinkFactoryTest)\n\nio.odpf.firehose.sink.mongodb.MongoSinkFactoryTest > shouldThrowExceptionWhenCreateMongoClientWithNullPassword PASSED\nRunning test: Test shouldThrowExceptionWhenCreateMongoClientWithNullAuthDB(io.odpf.firehose.sink.mongodb.MongoSinkFactoryTest)\n\nio.odpf.firehose.sink.mongodb.MongoSinkFactoryTest > shouldThrowExceptionWhenCreateMongoClientWithNullAuthDB PASSED\nRunning test: Test shouldReturnReplaceOneModelForJsonMessageType(io.odpf.firehose.sink.mongodb.request.MongoUpsertRequestHandlerTest)\n\nio.odpf.firehose.sink.mongodb.request.MongoUpsertRequestHandlerTest > shouldReturnReplaceOneModelForJsonMessageType PASSED\nRunning test: Test shouldThrowExceptionForInvalidKey(io.odpf.firehose.sink.mongodb.request.MongoUpsertRequestHandlerTest)\n\nio.odpf.firehose.sink.mongodb.request.MongoUpsertRequestHandlerTest > shouldThrowExceptionForInvalidKey PASSED\nRunning test: Test shouldReturnInsertOneModelForNullPrimaryKey(io.odpf.firehose.sink.mongodb.request.MongoUpsertRequestHandlerTest)\n\nio.odpf.firehose.sink.mongodb.request.MongoUpsertRequestHandlerTest > shouldReturnInsertOneModelForNullPrimaryKey PASSED\nRunning test: Test shouldReturnReplaceOneModelForProtoMessageType(io.odpf.firehose.sink.mongodb.request.MongoUpsertRequestHandlerTest)\n\nio.odpf.firehose.sink.mongodb.request.MongoUpsertRequestHandlerTest > shouldReturnReplaceOneModelForProtoMessageType PASSED\nRunning test: Test shouldReturnModelWithCorrectPayloadForProtoMessageType(io.odpf.firehose.sink.mongodb.request.MongoUpsertRequestHandlerTest)\n\nio.odpf.firehose.sink.mongodb.request.MongoUpsertRequestHandlerTest > shouldReturnModelWithCorrectPayloadForProtoMessageType PASSED\nRunning test: Test shouldReturnReplaceOneModelWithCorrectPayloadForJsonMessageType(io.odpf.firehose.sink.mongodb.request.MongoUpsertRequestHandlerTest)\n\nio.odpf.firehose.sink.mongodb.request.MongoUpsertRequestHandlerTest > shouldReturnReplaceOneModelWithCorrectPayloadForJsonMessageType PASSED\nRunning test: Test shouldReturnTrueForUpsertMode(io.odpf.firehose.sink.mongodb.request.MongoUpsertRequestHandlerTest)\n\nio.odpf.firehose.sink.mongodb.request.MongoUpsertRequestHandlerTest > shouldReturnTrueForUpsertMode PASSED\nRunning test: Test shouldThrowJSONParseExceptionForInvalidJson(io.odpf.firehose.sink.mongodb.request.MongoUpsertRequestHandlerTest)\n\nio.odpf.firehose.sink.mongodb.request.MongoUpsertRequestHandlerTest > shouldThrowJSONParseExceptionForInvalidJson PASSED\nRunning test: Test shouldReturnFalseForUpdateOnlyMode(io.odpf.firehose.sink.mongodb.request.MongoUpsertRequestHandlerTest)\n\nio.odpf.firehose.sink.mongodb.request.MongoUpsertRequestHandlerTest > shouldReturnFalseForUpdateOnlyMode PASSED\nRunning test: Test shouldReturnInsertOneModelWithCorrectPayloadForJsonMessageType(io.odpf.firehose.sink.mongodb.request.MongoUpsertRequestHandlerTest)\n\nio.odpf.firehose.sink.mongodb.request.MongoUpsertRequestHandlerTest > shouldReturnInsertOneModelWithCorrectPayloadForJsonMessageType PASSED\nRunning test: Test shouldReturnReplaceOneModelForJsonMessageType(io.odpf.firehose.sink.mongodb.request.MongoUpdateRequestHandlerTest)\n\nio.odpf.firehose.sink.mongodb.request.MongoUpdateRequestHandlerTest > shouldReturnReplaceOneModelForJsonMessageType PASSED\nRunning test: Test shouldThrowExceptionForInvalidKey(io.odpf.firehose.sink.mongodb.request.MongoUpdateRequestHandlerTest)\n\nio.odpf.firehose.sink.mongodb.request.MongoUpdateRequestHandlerTest > shouldThrowExceptionForInvalidKey PASSED\nRunning test: Test shouldReturnReplaceOneModelForProtoMessageType(io.odpf.firehose.sink.mongodb.request.MongoUpdateRequestHandlerTest)\n\nio.odpf.firehose.sink.mongodb.request.MongoUpdateRequestHandlerTest > shouldReturnReplaceOneModelForProtoMessageType PASSED\nRunning test: Test shouldReturnTrueForUpdateOnlyMode(io.odpf.firehose.sink.mongodb.request.MongoUpdateRequestHandlerTest)\n\nio.odpf.firehose.sink.mongodb.request.MongoUpdateRequestHandlerTest > shouldReturnTrueForUpdateOnlyMode PASSED\nRunning test: Test shouldReturnModelWithCorrectPayloadForProtoMessageType(io.odpf.firehose.sink.mongodb.request.MongoUpdateRequestHandlerTest)\n\nio.odpf.firehose.sink.mongodb.request.MongoUpdateRequestHandlerTest > shouldReturnModelWithCorrectPayloadForProtoMessageType PASSED\nRunning test: Test shouldReturnFalseForInsertOrUpdateMode(io.odpf.firehose.sink.mongodb.request.MongoUpdateRequestHandlerTest)\n\nio.odpf.firehose.sink.mongodb.request.MongoUpdateRequestHandlerTest > shouldReturnFalseForInsertOrUpdateMode PASSED\nRunning test: Test shouldThrowJSONParseExceptionForInvalidJson(io.odpf.firehose.sink.mongodb.request.MongoUpdateRequestHandlerTest)\n\nio.odpf.firehose.sink.mongodb.request.MongoUpdateRequestHandlerTest > shouldThrowJSONParseExceptionForInvalidJson PASSED\nRunning test: Test shouldReturnModelWithCorrectPayloadForJsonMessageType(io.odpf.firehose.sink.mongodb.request.MongoUpdateRequestHandlerTest)\n\nio.odpf.firehose.sink.mongodb.request.MongoUpdateRequestHandlerTest > shouldReturnModelWithCorrectPayloadForJsonMessageType PASSED\nRunning test: Test shouldThrowNullPointerExceptionForNullPrimaryKey(io.odpf.firehose.sink.mongodb.request.MongoUpdateRequestHandlerTest)\n\nio.odpf.firehose.sink.mongodb.request.MongoUpdateRequestHandlerTest > shouldThrowNullPointerExceptionForNullPrimaryKey PASSED\nRunning test: Test shouldReturnMongoRequestHandler(io.odpf.firehose.sink.mongodb.request.MongoRequestHandlerFactoryTest)\n\nio.odpf.firehose.sink.mongodb.request.MongoRequestHandlerFactoryTest > shouldReturnMongoRequestHandler PASSED\nRunning test: Test shouldReturnUpsertRequestHandler(io.odpf.firehose.sink.mongodb.request.MongoRequestHandlerFactoryTest)\n\nio.odpf.firehose.sink.mongodb.request.MongoRequestHandlerFactoryTest > shouldReturnUpsertRequestHandler PASSED\nRunning test: Test shouldThrowExceptionWhenCreateUpdateRequestHandlerWhenPrimaryKeyNotSpecified(io.odpf.firehose.sink.mongodb.request.MongoRequestHandlerFactoryTest)\n\nio.odpf.firehose.sink.mongodb.request.MongoRequestHandlerFactoryTest > shouldThrowExceptionWhenCreateUpdateRequestHandlerWhenPrimaryKeyNotSpecified PASSED\nRunning test: Test shouldCreateUpsertRequestHandlerWhenPrimaryKeyNotSpecified(io.odpf.firehose.sink.mongodb.request.MongoRequestHandlerFactoryTest)\n\nio.odpf.firehose.sink.mongodb.request.MongoRequestHandlerFactoryTest > shouldCreateUpsertRequestHandlerWhenPrimaryKeyNotSpecified PASSED\nRunning test: Test shouldThrowExceptionWhenInvalidRecordParserMode(io.odpf.firehose.sink.mongodb.request.MongoRequestHandlerFactoryTest)\n\nio.odpf.firehose.sink.mongodb.request.MongoRequestHandlerFactoryTest > shouldThrowExceptionWhenInvalidRecordParserMode PASSED\nRunning test: Test shouldReturnUpdateRequestHandler(io.odpf.firehose.sink.mongodb.request.MongoRequestHandlerFactoryTest)\n\nio.odpf.firehose.sink.mongodb.request.MongoRequestHandlerFactoryTest > shouldReturnUpdateRequestHandler PASSED\nRunning test: Test shouldThrowExceptionIfHostAndPortNotProvidedProperly(io.odpf.firehose.sink.mongodb.util.MongoSinkFactoryUtilTest)\n\nio.odpf.firehose.sink.mongodb.util.MongoSinkFactoryUtilTest > shouldThrowExceptionIfHostAndPortNotProvidedProperly PASSED\nRunning test: Test shouldThrowIllegalArgumentExceptionForEmptyMongoConnectionURLs(io.odpf.firehose.sink.mongodb.util.MongoSinkFactoryUtilTest)\n\nio.odpf.firehose.sink.mongodb.util.MongoSinkFactoryUtilTest > shouldThrowIllegalArgumentExceptionForEmptyMongoConnectionURLs PASSED\nRunning test: Test shouldGetServerAddressesForValidMongoConnectionURLsWithSpacesInBetween(io.odpf.firehose.sink.mongodb.util.MongoSinkFactoryUtilTest)\n\nio.odpf.firehose.sink.mongodb.util.MongoSinkFactoryUtilTest > shouldGetServerAddressesForValidMongoConnectionURLsWithSpacesInBetween PASSED\nRunning test: Test shouldThrowIllegalArgumentExceptionWhenServerPortInvalid(io.odpf.firehose.sink.mongodb.util.MongoSinkFactoryUtilTest)\n\nio.odpf.firehose.sink.mongodb.util.MongoSinkFactoryUtilTest > shouldThrowIllegalArgumentExceptionWhenServerPortInvalid PASSED\nRunning test: Test shouldThrowIllegalArgumentExceptionForEmptyHost(io.odpf.firehose.sink.mongodb.util.MongoSinkFactoryUtilTest)\n\nio.odpf.firehose.sink.mongodb.util.MongoSinkFactoryUtilTest > shouldThrowIllegalArgumentExceptionForEmptyHost PASSED\nRunning test: Test shouldThrowIllegalArgumentExceptionForEmptyPort(io.odpf.firehose.sink.mongodb.util.MongoSinkFactoryUtilTest)\n\nio.odpf.firehose.sink.mongodb.util.MongoSinkFactoryUtilTest > shouldThrowIllegalArgumentExceptionForEmptyPort PASSED\nRunning test: Test shouldGetServerAddressForIPInMongoConnectionURLs(io.odpf.firehose.sink.mongodb.util.MongoSinkFactoryUtilTest)\n\nio.odpf.firehose.sink.mongodb.util.MongoSinkFactoryUtilTest > shouldGetServerAddressForIPInMongoConnectionURLs PASSED\nRunning test: Test shouldThrowIllegalArgumentExceptionForNullMongoConnectionURLs(io.odpf.firehose.sink.mongodb.util.MongoSinkFactoryUtilTest)\n\nio.odpf.firehose.sink.mongodb.util.MongoSinkFactoryUtilTest > shouldThrowIllegalArgumentExceptionForNullMongoConnectionURLs PASSED\nRunning test: Test shouldGetServerAddressesForValidMongoConnectionURLs(io.odpf.firehose.sink.mongodb.util.MongoSinkFactoryUtilTest)\n\nio.odpf.firehose.sink.mongodb.util.MongoSinkFactoryUtilTest > shouldGetServerAddressesForValidMongoConnectionURLs PASSED\nRunning test: Test shouldGetCorrectRequestsForEachMessageInEsbMessagesList(io.odpf.firehose.sink.mongodb.MongoSinkTest)\n\nio.odpf.firehose.sink.mongodb.MongoSinkTest > shouldGetCorrectRequestsForEachMessageInEsbMessagesList PASSED\nRunning test: Test shouldReturnEmptyListWhenBulRequestSucceeds(io.odpf.firehose.sink.mongodb.MongoSinkTest)\n\nio.odpf.firehose.sink.mongodb.MongoSinkTest > shouldReturnEmptyListWhenBulRequestSucceeds PASSED\nRunning test: Test shouldReturnFailedMessagesWhenBulkRequestFailed(io.odpf.firehose.sink.mongodb.MongoSinkTest)\n\nio.odpf.firehose.sink.mongodb.MongoSinkTest > shouldReturnFailedMessagesWhenBulkRequestFailed PASSED\nRunning test: Test shouldGetRequestForEachMessageInEsbMessagesList(io.odpf.firehose.sink.mongodb.MongoSinkTest)\n\nio.odpf.firehose.sink.mongodb.MongoSinkTest > shouldGetRequestForEachMessageInEsbMessagesList PASSED\nRunning test: Test shouldLogBulkRequestPartiallySucceededWhenPrimaryKeyNotFoundForSomeMessages(io.odpf.firehose.sink.mongodb.client.MongoSinkClientTest)\n\nio.odpf.firehose.sink.mongodb.client.MongoSinkClientTest > shouldLogBulkRequestPartiallySucceededWhenPrimaryKeyNotFoundForSomeMessages PASSED\nRunning test: Test shouldIncrementFailureCounterTagWhenPrimaryKeyNotFoundInUpdateOnlyMode(io.odpf.firehose.sink.mongodb.client.MongoSinkClientTest)\n\nio.odpf.firehose.sink.mongodb.client.MongoSinkClientTest > shouldIncrementFailureCounterTagWhenPrimaryKeyNotFoundInUpdateOnlyMode PASSED\nRunning test: Test shouldLogBulkRequestFailedWhenPrimaryKeyNotFoundForAllMessages(io.odpf.firehose.sink.mongodb.client.MongoSinkClientTest)\n\nio.odpf.firehose.sink.mongodb.client.MongoSinkClientTest > shouldLogBulkRequestFailedWhenPrimaryKeyNotFoundForAllMessages PASSED\nRunning test: Test shouldReturnNonBlacklistedErrorsIfNoneOfTheFailuresBelongToBlacklist(io.odpf.firehose.sink.mongodb.client.MongoSinkClientTest)\n\nio.odpf.firehose.sink.mongodb.client.MongoSinkClientTest > shouldReturnNonBlacklistedErrorsIfNoneOfTheFailuresBelongToBlacklist PASSED\nRunning test: Test shouldLogBulkRequestFailedWhenBulkResponsesHasFailures(io.odpf.firehose.sink.mongodb.client.MongoSinkClientTest)\n\nio.odpf.firehose.sink.mongodb.client.MongoSinkClientTest > shouldLogBulkRequestFailedWhenBulkResponsesHasFailures PASSED\nRunning test: Test shouldReturnNonBlacklistedErrorsIfSomeOfTheFailuresDontBelongToBlacklist(io.odpf.firehose.sink.mongodb.client.MongoSinkClientTest)\n\nio.odpf.firehose.sink.mongodb.client.MongoSinkClientTest > shouldReturnNonBlacklistedErrorsIfSomeOfTheFailuresDontBelongToBlacklist PASSED\nRunning test: Test shouldReturnEmptyArrayListWhenBulkResponseExecutedSuccessfully(io.odpf.firehose.sink.mongodb.client.MongoSinkClientTest)\n\nio.odpf.firehose.sink.mongodb.client.MongoSinkClientTest > shouldReturnEmptyArrayListWhenBulkResponseExecutedSuccessfully PASSED\nRunning test: Test shouldLogBulkRequestsNotAcknowledgedWhenNoAcknowledgementReceived(io.odpf.firehose.sink.mongodb.client.MongoSinkClientTest)\n\nio.odpf.firehose.sink.mongodb.client.MongoSinkClientTest > shouldLogBulkRequestsNotAcknowledgedWhenNoAcknowledgementReceived PASSED\nRunning test: Test shouldReportTelemetryIfTheResponsesBelongToBlacklistStatusCode(io.odpf.firehose.sink.mongodb.client.MongoSinkClientTest)\n\nio.odpf.firehose.sink.mongodb.client.MongoSinkClientTest > shouldReportTelemetryIfTheResponsesBelongToBlacklistStatusCode PASSED\nRunning test: Test shouldLogBulkRequestsSucceededWhenNoFailuresForUpdateOnly(io.odpf.firehose.sink.mongodb.client.MongoSinkClientTest)\n\nio.odpf.firehose.sink.mongodb.client.MongoSinkClientTest > shouldLogBulkRequestsSucceededWhenNoFailuresForUpdateOnly PASSED\nRunning test: Test shouldIncrementInsertedCounterTagOnSuccessfulInsertionInUpsertMode(io.odpf.firehose.sink.mongodb.client.MongoSinkClientTest)\n\nio.odpf.firehose.sink.mongodb.client.MongoSinkClientTest > shouldIncrementInsertedCounterTagOnSuccessfulInsertionInUpsertMode PASSED\nRunning test: Test shouldNotLogBulkRequestFailedWhenBulkResponsesHasNoFailures(io.odpf.firehose.sink.mongodb.client.MongoSinkClientTest)\n\nio.odpf.firehose.sink.mongodb.client.MongoSinkClientTest > shouldNotLogBulkRequestFailedWhenBulkResponsesHasNoFailures PASSED\nRunning test: Test shouldIncrementInsertedCounterTagOnSuccessfulInsertion(io.odpf.firehose.sink.mongodb.client.MongoSinkClientTest)\n\nio.odpf.firehose.sink.mongodb.client.MongoSinkClientTest > shouldIncrementInsertedCounterTagOnSuccessfulInsertion PASSED\nRunning test: Test shouldReturnNonBlacklistedErrorsWhenBulkResponseHasFailuresAndEmptyBlacklist(io.odpf.firehose.sink.mongodb.client.MongoSinkClientTest)\n\nio.odpf.firehose.sink.mongodb.client.MongoSinkClientTest > shouldReturnNonBlacklistedErrorsWhenBulkResponseHasFailuresAndEmptyBlacklist PASSED\nRunning test: Test shouldIncrementUpdatedCounterTagOnSuccessfulUpdation(io.odpf.firehose.sink.mongodb.client.MongoSinkClientTest)\n\nio.odpf.firehose.sink.mongodb.client.MongoSinkClientTest > shouldIncrementUpdatedCounterTagOnSuccessfulUpdation PASSED\nRunning test: Test shouldLogBulkRequestsSucceededWhenNoFailuresForInsertOnly(io.odpf.firehose.sink.mongodb.client.MongoSinkClientTest)\n\nio.odpf.firehose.sink.mongodb.client.MongoSinkClientTest > shouldLogBulkRequestsSucceededWhenNoFailuresForInsertOnly PASSED\nRunning test: Test shouldLogBulkRequestsSucceededWhenNoFailuresForBothUpdateAndInsert(io.odpf.firehose.sink.mongodb.client.MongoSinkClientTest)\n\nio.odpf.firehose.sink.mongodb.client.MongoSinkClientTest > shouldLogBulkRequestsSucceededWhenNoFailuresForBothUpdateAndInsert PASSED\nRunning test: Test shouldReportTelemetryIfSomeOfTheFailuresDontBelongToBlacklist(io.odpf.firehose.sink.mongodb.client.MongoSinkClientTest)\n\nio.odpf.firehose.sink.mongodb.client.MongoSinkClientTest > shouldReportTelemetryIfSomeOfTheFailuresDontBelongToBlacklist PASSED\nRunning test: Test shouldReturnBlackListRetryStatusCodesAsList(io.odpf.firehose.sink.mongodb.client.MongoSinkClientUtilTest)\n\nio.odpf.firehose.sink.mongodb.client.MongoSinkClientUtilTest > shouldReturnBlackListRetryStatusCodesAsList PASSED\nRunning test: Test shouldThrowExceptionWhenNullDatabaseName(io.odpf.firehose.sink.mongodb.client.MongoSinkClientUtilTest)\n\nio.odpf.firehose.sink.mongodb.client.MongoSinkClientUtilTest > shouldThrowExceptionWhenNullDatabaseName PASSED\nRunning test: Test shouldThrowExceptionWhenStatusCodesHaveInvalidCharacters(io.odpf.firehose.sink.mongodb.client.MongoSinkClientUtilTest)\n\nio.odpf.firehose.sink.mongodb.client.MongoSinkClientUtilTest > shouldThrowExceptionWhenStatusCodesHaveInvalidCharacters PASSED\nRunning test: Test shouldThrowExceptionWhenSomeOfTheStatusCodesNotAnInteger(io.odpf.firehose.sink.mongodb.client.MongoSinkClientUtilTest)\n\nio.odpf.firehose.sink.mongodb.client.MongoSinkClientUtilTest > shouldThrowExceptionWhenSomeOfTheStatusCodesNotAnInteger PASSED\nRunning test: Test shouldThrowExceptionWhenStatusCodeNotAnInteger(io.odpf.firehose.sink.mongodb.client.MongoSinkClientUtilTest)\n\nio.odpf.firehose.sink.mongodb.client.MongoSinkClientUtilTest > shouldThrowExceptionWhenStatusCodeNotAnInteger PASSED\nRunning test: Test shouldReturnMultipleEmptyBlackListStatusCodesAsEmptyList(io.odpf.firehose.sink.mongodb.client.MongoSinkClientUtilTest)\n\nio.odpf.firehose.sink.mongodb.client.MongoSinkClientUtilTest > shouldReturnMultipleEmptyBlackListStatusCodesAsEmptyList PASSED\nRunning test: Test shouldReturnEmptyBlackListRetryStatusCodesAsEmptyList(io.odpf.firehose.sink.mongodb.client.MongoSinkClientUtilTest)\n\nio.odpf.firehose.sink.mongodb.client.MongoSinkClientUtilTest > shouldReturnEmptyBlackListRetryStatusCodesAsEmptyList PASSED\nRunning test: Test shouldThrowExceptionWhenNullCollectionName(io.odpf.firehose.sink.mongodb.client.MongoSinkClientUtilTest)\n\nio.odpf.firehose.sink.mongodb.client.MongoSinkClientUtilTest > shouldThrowExceptionWhenNullCollectionName PASSED\nRunning test: Test shouldThrowExceptionWhenAllStatusCodesNotAnInteger(io.odpf.firehose.sink.mongodb.client.MongoSinkClientUtilTest)\n\nio.odpf.firehose.sink.mongodb.client.MongoSinkClientUtilTest > shouldThrowExceptionWhenAllStatusCodesNotAnInteger PASSED\nRunning test: Test shouldReturnRequestWithCorrectRoutingValueForJsonMessageType(io.odpf.firehose.sink.elasticsearch.request.ESUpdateRequestHandlerTest)\n\nio.odpf.firehose.sink.elasticsearch.request.ESUpdateRequestHandlerTest > shouldReturnRequestWithCorrectRoutingValueForJsonMessageType PASSED\nRunning test: Test shouldReturnRequestWithNullRoutingValueWhenNoFieldNameIsProvidedForJsonMessageType(io.odpf.firehose.sink.elasticsearch.request.ESUpdateRequestHandlerTest)\n\nio.odpf.firehose.sink.elasticsearch.request.ESUpdateRequestHandlerTest > shouldReturnRequestWithNullRoutingValueWhenNoFieldNameIsProvidedForJsonMessageType PASSED\nRunning test: Test shouldReturnUpdateRequestHandlerForJsonMessageType(io.odpf.firehose.sink.elasticsearch.request.ESUpdateRequestHandlerTest)\n\nio.odpf.firehose.sink.elasticsearch.request.ESUpdateRequestHandlerTest > shouldReturnUpdateRequestHandlerForJsonMessageType PASSED\nRunning test: Test shouldReturnRequestWithCorrectIdIndexAndTypeForJsonMessageType(io.odpf.firehose.sink.elasticsearch.request.ESUpdateRequestHandlerTest)\n\nio.odpf.firehose.sink.elasticsearch.request.ESUpdateRequestHandlerTest > shouldReturnRequestWithCorrectIdIndexAndTypeForJsonMessageType PASSED\nRunning test: Test shouldThrowExceptionForInvalidKey(io.odpf.firehose.sink.elasticsearch.request.ESUpdateRequestHandlerTest)\n\nio.odpf.firehose.sink.elasticsearch.request.ESUpdateRequestHandlerTest > shouldThrowExceptionForInvalidKey PASSED\nRunning test: Test shouldReturnRequestWithNullRoutingValueWhenNoFieldNameProvidedForProtoMessageType(io.odpf.firehose.sink.elasticsearch.request.ESUpdateRequestHandlerTest)\n\nio.odpf.firehose.sink.elasticsearch.request.ESUpdateRequestHandlerTest > shouldReturnRequestWithNullRoutingValueWhenNoFieldNameProvidedForProtoMessageType PASSED\nRunning test: Test shouldReturnTrueForUpdateOnlyMode(io.odpf.firehose.sink.elasticsearch.request.ESUpdateRequestHandlerTest)\n\nio.odpf.firehose.sink.elasticsearch.request.ESUpdateRequestHandlerTest > shouldReturnTrueForUpdateOnlyMode PASSED\nRunning test: Test shouldReturnFalseForInsertOrUpdateMode(io.odpf.firehose.sink.elasticsearch.request.ESUpdateRequestHandlerTest)\n\nio.odpf.firehose.sink.elasticsearch.request.ESUpdateRequestHandlerTest > shouldReturnFalseForInsertOrUpdateMode PASSED\nRunning test: Test shouldReturnRequestWithCorrectPayloadForProtoMessageType(io.odpf.firehose.sink.elasticsearch.request.ESUpdateRequestHandlerTest)\n\nio.odpf.firehose.sink.elasticsearch.request.ESUpdateRequestHandlerTest > shouldReturnRequestWithCorrectPayloadForProtoMessageType PASSED\nRunning test: Test shouldReturnRequestWithCorrectContentTypeForProtoMessageType(io.odpf.firehose.sink.elasticsearch.request.ESUpdateRequestHandlerTest)\n\nio.odpf.firehose.sink.elasticsearch.request.ESUpdateRequestHandlerTest > shouldReturnRequestWithCorrectContentTypeForProtoMessageType PASSED\nRunning test: Test shouldThrowJSONParseExceptionForInvalidJson(io.odpf.firehose.sink.elasticsearch.request.ESUpdateRequestHandlerTest)\n\nio.odpf.firehose.sink.elasticsearch.request.ESUpdateRequestHandlerTest > shouldThrowJSONParseExceptionForInvalidJson PASSED\nRunning test: Test shouldReturnRequestWithCorrectContentTypeForJsonMessageType(io.odpf.firehose.sink.elasticsearch.request.ESUpdateRequestHandlerTest)\n\nio.odpf.firehose.sink.elasticsearch.request.ESUpdateRequestHandlerTest > shouldReturnRequestWithCorrectContentTypeForJsonMessageType PASSED\nRunning test: Test shouldReturnRequestWithCorrectRoutingValueForProtoMessageType(io.odpf.firehose.sink.elasticsearch.request.ESUpdateRequestHandlerTest)\n\nio.odpf.firehose.sink.elasticsearch.request.ESUpdateRequestHandlerTest > shouldReturnRequestWithCorrectRoutingValueForProtoMessageType PASSED\nRunning test: Test shouldReturnRequestWithCorrectPayloadForJsonMessageType(io.odpf.firehose.sink.elasticsearch.request.ESUpdateRequestHandlerTest)\n\nio.odpf.firehose.sink.elasticsearch.request.ESUpdateRequestHandlerTest > shouldReturnRequestWithCorrectPayloadForJsonMessageType PASSED\nRunning test: Test shouldReturnUpdateRequestHandlerForProtoMessageType(io.odpf.firehose.sink.elasticsearch.request.ESUpdateRequestHandlerTest)\n\nio.odpf.firehose.sink.elasticsearch.request.ESUpdateRequestHandlerTest > shouldReturnUpdateRequestHandlerForProtoMessageType PASSED\nRunning test: Test shouldReturnRequestWithCorrectIdIndexAndTypeForProtoMessageType(io.odpf.firehose.sink.elasticsearch.request.ESUpdateRequestHandlerTest)\n\nio.odpf.firehose.sink.elasticsearch.request.ESUpdateRequestHandlerTest > shouldReturnRequestWithCorrectIdIndexAndTypeForProtoMessageType PASSED\nRunning test: Test shouldReturnInsertRequestHandler(io.odpf.firehose.sink.elasticsearch.request.EsRequestHandlerFactoryTest)\n\nio.odpf.firehose.sink.elasticsearch.request.EsRequestHandlerFactoryTest > shouldReturnInsertRequestHandler PASSED\nRunning test: Test shouldReturnUpdateRequestHandler(io.odpf.firehose.sink.elasticsearch.request.EsRequestHandlerFactoryTest)\n\nio.odpf.firehose.sink.elasticsearch.request.EsRequestHandlerFactoryTest > shouldReturnUpdateRequestHandler PASSED\nRunning test: Test shouldReturnRequestWithCorrectRoutingValueForJsonMessageType(io.odpf.firehose.sink.elasticsearch.request.ESUpsertRequestHandlerTest)\n\nio.odpf.firehose.sink.elasticsearch.request.ESUpsertRequestHandlerTest > shouldReturnRequestWithCorrectRoutingValueForJsonMessageType PASSED\nRunning test: Test shouldReturnRequestWithNullRoutingValueForProtoMessageType(io.odpf.firehose.sink.elasticsearch.request.ESUpsertRequestHandlerTest)\n\nio.odpf.firehose.sink.elasticsearch.request.ESUpsertRequestHandlerTest > shouldReturnRequestWithNullRoutingValueForProtoMessageType PASSED\nRunning test: Test shouldReturnRequestWithNullRoutingValueWhenNoFieldNameIsProvidedForJsonMessageType(io.odpf.firehose.sink.elasticsearch.request.ESUpsertRequestHandlerTest)\n\nio.odpf.firehose.sink.elasticsearch.request.ESUpsertRequestHandlerTest > shouldReturnRequestWithNullRoutingValueWhenNoFieldNameIsProvidedForJsonMessageType PASSED\nRunning test: Test shouldReturnRequestWithCorrectIdIndexAndTypeForJsonMessageType(io.odpf.firehose.sink.elasticsearch.request.ESUpsertRequestHandlerTest)\n\nio.odpf.firehose.sink.elasticsearch.request.ESUpsertRequestHandlerTest > shouldReturnRequestWithCorrectIdIndexAndTypeForJsonMessageType PASSED\nRunning test: Test shouldThrowExceptionForInvalidKey(io.odpf.firehose.sink.elasticsearch.request.ESUpsertRequestHandlerTest)\n\nio.odpf.firehose.sink.elasticsearch.request.ESUpsertRequestHandlerTest > shouldThrowExceptionForInvalidKey PASSED\nRunning test: Test shouldReturnInsertRequestHandlerForProtoMessageType(io.odpf.firehose.sink.elasticsearch.request.ESUpsertRequestHandlerTest)\n\nio.odpf.firehose.sink.elasticsearch.request.ESUpsertRequestHandlerTest > shouldReturnInsertRequestHandlerForProtoMessageType PASSED\nRunning test: Test shouldReturnRequestWithCorrectPayloadForProtoMessageType(io.odpf.firehose.sink.elasticsearch.request.ESUpsertRequestHandlerTest)\n\nio.odpf.firehose.sink.elasticsearch.request.ESUpsertRequestHandlerTest > shouldReturnRequestWithCorrectPayloadForProtoMessageType PASSED\nRunning test: Test shouldReturnRequestWithCorrectContentTypeForProtoMessageType(io.odpf.firehose.sink.elasticsearch.request.ESUpsertRequestHandlerTest)\n\nio.odpf.firehose.sink.elasticsearch.request.ESUpsertRequestHandlerTest > shouldReturnRequestWithCorrectContentTypeForProtoMessageType PASSED\nRunning test: Test shouldReturnInsertRequestHandlerForJsonMessageType(io.odpf.firehose.sink.elasticsearch.request.ESUpsertRequestHandlerTest)\n\nio.odpf.firehose.sink.elasticsearch.request.ESUpsertRequestHandlerTest > shouldReturnInsertRequestHandlerForJsonMessageType PASSED\nRunning test: Test shouldThrowJSONParseExceptionForInvalidJson(io.odpf.firehose.sink.elasticsearch.request.ESUpsertRequestHandlerTest)\n\nio.odpf.firehose.sink.elasticsearch.request.ESUpsertRequestHandlerTest > shouldThrowJSONParseExceptionForInvalidJson PASSED\nRunning test: Test shouldReturnRequestWithCorrectContentTypeForJsonMessageType(io.odpf.firehose.sink.elasticsearch.request.ESUpsertRequestHandlerTest)\n\nio.odpf.firehose.sink.elasticsearch.request.ESUpsertRequestHandlerTest > shouldReturnRequestWithCorrectContentTypeForJsonMessageType PASSED\nRunning test: Test shouldReturnRequestWithCorrectRoutingValueForProtoMessageType(io.odpf.firehose.sink.elasticsearch.request.ESUpsertRequestHandlerTest)\n\nio.odpf.firehose.sink.elasticsearch.request.ESUpsertRequestHandlerTest > shouldReturnRequestWithCorrectRoutingValueForProtoMessageType PASSED\nRunning test: Test shouldReturnFalseForUpdateOnlyMode(io.odpf.firehose.sink.elasticsearch.request.ESUpsertRequestHandlerTest)\n\nio.odpf.firehose.sink.elasticsearch.request.ESUpsertRequestHandlerTest > shouldReturnFalseForUpdateOnlyMode PASSED\nRunning test: Test shouldReturnRequestWithCorrectPayloadForJsonMessageType(io.odpf.firehose.sink.elasticsearch.request.ESUpsertRequestHandlerTest)\n\nio.odpf.firehose.sink.elasticsearch.request.ESUpsertRequestHandlerTest > shouldReturnRequestWithCorrectPayloadForJsonMessageType PASSED\nRunning test: Test shouldReturnTrueForInsertMode(io.odpf.firehose.sink.elasticsearch.request.ESUpsertRequestHandlerTest)\n\nio.odpf.firehose.sink.elasticsearch.request.ESUpsertRequestHandlerTest > shouldReturnTrueForInsertMode PASSED\nRunning test: Test shouldReturnRequestWithCorrectIdIndexAndTypeForProtoMessageType(io.odpf.firehose.sink.elasticsearch.request.ESUpsertRequestHandlerTest)\n\nio.odpf.firehose.sink.elasticsearch.request.ESUpsertRequestHandlerTest > shouldReturnRequestWithCorrectIdIndexAndTypeForProtoMessageType PASSED\nRunning test: Test shouldThrowExceptionIfHostAndPortNotProvidedProperly(io.odpf.firehose.sink.elasticsearch.EsSinkFactoryTest)\n\nio.odpf.firehose.sink.elasticsearch.EsSinkFactoryTest > shouldThrowExceptionIfHostAndPortNotProvidedProperly PASSED\nRunning test: Test shouldThrowIllegalArgumentExceptionForEmptyHostName(io.odpf.firehose.sink.elasticsearch.EsSinkFactoryTest)\n\nio.odpf.firehose.sink.elasticsearch.EsSinkFactoryTest > shouldThrowIllegalArgumentExceptionForEmptyHostName PASSED\nRunning test: Test shouldReturnBlackListRetryStatusCodesAsList(io.odpf.firehose.sink.elasticsearch.EsSinkFactoryTest)\n\nio.odpf.firehose.sink.elasticsearch.EsSinkFactoryTest > shouldReturnBlackListRetryStatusCodesAsList PASSED\nRunning test: Test shouldCreateESSink(io.odpf.firehose.sink.elasticsearch.EsSinkFactoryTest)\n\nio.odpf.firehose.sink.elasticsearch.EsSinkFactoryTest > shouldCreateESSink PASSED\nRunning test: Test shouldThrowIllegalArgumentExceptionForEmptyPort(io.odpf.firehose.sink.elasticsearch.EsSinkFactoryTest)\n\nio.odpf.firehose.sink.elasticsearch.EsSinkFactoryTest > shouldThrowIllegalArgumentExceptionForEmptyPort PASSED\nRunning test: Test shouldThrowIllegalArgumentExceptionForNullESConnectionURLs(io.odpf.firehose.sink.elasticsearch.EsSinkFactoryTest)\n\nio.odpf.firehose.sink.elasticsearch.EsSinkFactoryTest > shouldThrowIllegalArgumentExceptionForNullESConnectionURLs PASSED\nRunning test: Test shouldGetHttpHostsForValidESConnectionURLs(io.odpf.firehose.sink.elasticsearch.EsSinkFactoryTest)\n\nio.odpf.firehose.sink.elasticsearch.EsSinkFactoryTest > shouldGetHttpHostsForValidESConnectionURLs PASSED\nRunning test: Test shouldReturnEmptyBlackListRetryStatusCodesAsEmptyList(io.odpf.firehose.sink.elasticsearch.EsSinkFactoryTest)\n\nio.odpf.firehose.sink.elasticsearch.EsSinkFactoryTest > shouldReturnEmptyBlackListRetryStatusCodesAsEmptyList PASSED\nRunning test: Test shouldThrowIllegalArgumentExceptionForEmptyESConnectionURLs(io.odpf.firehose.sink.elasticsearch.EsSinkFactoryTest)\n\nio.odpf.firehose.sink.elasticsearch.EsSinkFactoryTest > shouldThrowIllegalArgumentExceptionForEmptyESConnectionURLs PASSED\nRunning test: Test shouldGetHttpHostsForValidESConnectionURLsWithSpacesInBetween(io.odpf.firehose.sink.elasticsearch.EsSinkFactoryTest)\n\nio.odpf.firehose.sink.elasticsearch.EsSinkFactoryTest > shouldGetHttpHostsForValidESConnectionURLsWithSpacesInBetween PASSED\nRunning test: Test shouldGetHttpHostsForIPInESConnectionURLs(io.odpf.firehose.sink.elasticsearch.EsSinkFactoryTest)\n\nio.odpf.firehose.sink.elasticsearch.EsSinkFactoryTest > shouldGetHttpHostsForIPInESConnectionURLs PASSED\nRunning test: Test shouldThrowNeedToRetryExceptionWhenBulkResponseHasFailuresExceptMentionedInBlacklist(io.odpf.firehose.sink.elasticsearch.EsSinkTest)\n\nio.odpf.firehose.sink.elasticsearch.EsSinkTest > shouldThrowNeedToRetryExceptionWhenBulkResponseHasFailuresExceptMentionedInBlacklist PASSED\nRunning test: Test shouldThrowNeedToRetryExceptionIfSomeOfTheFailuresDontBelongToBlacklist(io.odpf.firehose.sink.elasticsearch.EsSinkTest)\n\nio.odpf.firehose.sink.elasticsearch.EsSinkTest > shouldThrowNeedToRetryExceptionIfSomeOfTheFailuresDontBelongToBlacklist PASSED\nRunning test: Test shouldNotLogBulkRequestFailedWhenBulkResponsesHasNotFailures(io.odpf.firehose.sink.elasticsearch.EsSinkTest)\n\nio.odpf.firehose.sink.elasticsearch.EsSinkTest > shouldNotLogBulkRequestFailedWhenBulkResponsesHasNotFailures PASSED\nRunning test: Test shouldLogBulkRequestFailedWhenBulkResponsesHasFailures(io.odpf.firehose.sink.elasticsearch.EsSinkTest)\n\nio.odpf.firehose.sink.elasticsearch.EsSinkTest > shouldLogBulkRequestFailedWhenBulkResponsesHasFailures PASSED\nRunning test: Test shouldReturnEmptyArrayListWhenBulkResponseExecutedSuccessfully(io.odpf.firehose.sink.elasticsearch.EsSinkTest)\n\nio.odpf.firehose.sink.elasticsearch.EsSinkTest > shouldReturnEmptyArrayListWhenBulkResponseExecutedSuccessfully PASSED\nRunning test: Test shouldReportTelemetryIfTheResponsesBelongToBlacklistStatusCode(io.odpf.firehose.sink.elasticsearch.EsSinkTest)\n\nio.odpf.firehose.sink.elasticsearch.EsSinkTest > shouldReportTelemetryIfTheResponsesBelongToBlacklistStatusCode PASSED\nRunning test: Test shouldReturnEsbMessagesListWhenBulkResponseHasFailuresWithStatusOtherThanBlacklist(io.odpf.firehose.sink.elasticsearch.EsSinkTest)\n\nio.odpf.firehose.sink.elasticsearch.EsSinkTest > shouldReturnEsbMessagesListWhenBulkResponseHasFailuresWithStatusOtherThanBlacklist PASSED\nRunning test: Test shouldReturnEsbMessagesListWhenBulkResponseHasFailuresAndEmptyBlacklist(io.odpf.firehose.sink.elasticsearch.EsSinkTest)\n\nio.odpf.firehose.sink.elasticsearch.EsSinkTest > shouldReturnEsbMessagesListWhenBulkResponseHasFailuresAndEmptyBlacklist PASSED\nRunning test: Test shouldGetRequestForEachMessageInEsbMessagesList(io.odpf.firehose.sink.elasticsearch.EsSinkTest)\n\nio.odpf.firehose.sink.elasticsearch.EsSinkTest > shouldGetRequestForEachMessageInEsbMessagesList PASSED\nRunning test: Test shouldReturnEmptyMessageListIfAllTheResponsesBelongToBlacklistStatusCode(io.odpf.firehose.sink.elasticsearch.EsSinkTest)\n\nio.odpf.firehose.sink.elasticsearch.EsSinkTest > shouldReturnEmptyMessageListIfAllTheResponsesBelongToBlacklistStatusCode PASSED\nRunning test: Test shouldCreatePromSink(io.odpf.firehose.sink.prometheus.PromSinkFactoryTest)\n\nio.odpf.firehose.sink.prometheus.PromSinkFactoryTest > shouldCreatePromSink PASSED\nRunning test: Test shouldProperlyBuildMessages(io.odpf.firehose.sink.prometheus.request.PromRequestTest)\n\nio.odpf.firehose.sink.prometheus.request.PromRequestTest > shouldProperlyBuildMessages PASSED\nRunning test: Test shouldCreateNotNullRequest(io.odpf.firehose.sink.prometheus.request.PromRequestCreatorTest)\n\nio.odpf.firehose.sink.prometheus.request.PromRequestCreatorTest > shouldCreateNotNullRequest PASSED\nRunning test: Test testMessageWithDurationIsBuiltIntoMillis(io.odpf.firehose.sink.prometheus.builder.TimeSeriesBuilderTest)\n\nio.odpf.firehose.sink.prometheus.builder.TimeSeriesBuilderTest > testMessageWithDurationIsBuiltIntoMillis PASSED\nRunning test: Test testMessageWithEmptyMetricProtoMappingConfig(io.odpf.firehose.sink.prometheus.builder.TimeSeriesBuilderTest)\n\nio.odpf.firehose.sink.prometheus.builder.TimeSeriesBuilderTest > testMessageWithEmptyMetricProtoMappingConfig PASSED\nRunning test: Test testMultipleMetricWithMultipleLabels(io.odpf.firehose.sink.prometheus.builder.TimeSeriesBuilderTest)\n\nio.odpf.firehose.sink.prometheus.builder.TimeSeriesBuilderTest > testMultipleMetricWithMultipleLabels PASSED\nRunning test: Test testMessageWithEnum(io.odpf.firehose.sink.prometheus.builder.TimeSeriesBuilderTest)\n\nio.odpf.firehose.sink.prometheus.builder.TimeSeriesBuilderTest > testMessageWithEnum PASSED\nRunning test: Test testMessageWithNestedSchemaForMetrics(io.odpf.firehose.sink.prometheus.builder.TimeSeriesBuilderTest)\n\nio.odpf.firehose.sink.prometheus.builder.TimeSeriesBuilderTest > testMessageWithNestedSchemaForMetrics PASSED\nRunning test: Test testMessageWithNestedSchemaForLabels(io.odpf.firehose.sink.prometheus.builder.TimeSeriesBuilderTest)\n\nio.odpf.firehose.sink.prometheus.builder.TimeSeriesBuilderTest > testMessageWithNestedSchemaForLabels PASSED\nRunning test: Test testMessageWithMetricTimestampUsingIngestionTimestamp(io.odpf.firehose.sink.prometheus.builder.TimeSeriesBuilderTest)\n\nio.odpf.firehose.sink.prometheus.builder.TimeSeriesBuilderTest > testMessageWithMetricTimestampUsingIngestionTimestamp PASSED\nRunning test: Test testMessageWithTimestampIsBuiltIntoMillis(io.odpf.firehose.sink.prometheus.builder.TimeSeriesBuilderTest)\n\nio.odpf.firehose.sink.prometheus.builder.TimeSeriesBuilderTest > testMessageWithTimestampIsBuiltIntoMillis PASSED\nRunning test: Test testMessageWithEmptyLabelProtoMappingConfig(io.odpf.firehose.sink.prometheus.builder.TimeSeriesBuilderTest)\n\nio.odpf.firehose.sink.prometheus.builder.TimeSeriesBuilderTest > testMessageWithEmptyLabelProtoMappingConfig PASSED\nRunning test: Test testMessageWithEmptyFieldIndex(io.odpf.firehose.sink.prometheus.builder.TimeSeriesBuilderTest)\n\nio.odpf.firehose.sink.prometheus.builder.TimeSeriesBuilderTest > testMessageWithEmptyFieldIndex PASSED\nRunning test: Test testSingleMetricWithMultipleLabels(io.odpf.firehose.sink.prometheus.builder.TimeSeriesBuilderTest)\n\nio.odpf.firehose.sink.prometheus.builder.TimeSeriesBuilderTest > testSingleMetricWithMultipleLabels PASSED\nRunning test: Test testMessageWithNestedMetricsWithNestedLabels(io.odpf.firehose.sink.prometheus.builder.TimeSeriesBuilderTest)\n\nio.odpf.firehose.sink.prometheus.builder.TimeSeriesBuilderTest > testMessageWithNestedMetricsWithNestedLabels PASSED\nRunning test: Test shouldReturnWriteRequest(io.odpf.firehose.sink.prometheus.builder.WriteRequestBuilderTest)\n\nio.odpf.firehose.sink.prometheus.builder.WriteRequestBuilderTest > shouldReturnWriteRequest PASSED\nRunning test: Test shouldReturnEmptyRequest(io.odpf.firehose.sink.prometheus.builder.WriteRequestBuilderTest)\n\nio.odpf.firehose.sink.prometheus.builder.WriteRequestBuilderTest > shouldReturnEmptyRequest PASSED\nRunning test: Test shouldThrowException(io.odpf.firehose.sink.prometheus.builder.WriteRequestBuilderTest)\n\nio.odpf.firehose.sink.prometheus.builder.WriteRequestBuilderTest > shouldThrowException PASSED\nRunning test: Test shouldReturnWriteRequestWithSortedTimeSeries(io.odpf.firehose.sink.prometheus.builder.WriteRequestBuilderTest)\n\nio.odpf.firehose.sink.prometheus.builder.WriteRequestBuilderTest > shouldReturnWriteRequestWithSortedTimeSeries PASSED\nRunning test: Test shouldGetNestedMetricListFromMessage(io.odpf.firehose.sink.prometheus.builder.TimeSeriesBuilderUtilsTest)\n\nio.odpf.firehose.sink.prometheus.builder.TimeSeriesBuilderUtilsTest > shouldGetNestedMetricListFromMessage PASSED\nRunning test: Test shouldGetMetricListFromMessage(io.odpf.firehose.sink.prometheus.builder.TimeSeriesBuilderUtilsTest)\n\nio.odpf.firehose.sink.prometheus.builder.TimeSeriesBuilderUtilsTest > shouldGetMetricListFromMessage PASSED\nRunning test: Test shouldGetNestedLabelListFromMessage(io.odpf.firehose.sink.prometheus.builder.TimeSeriesBuilderUtilsTest)\n\nio.odpf.firehose.sink.prometheus.builder.TimeSeriesBuilderUtilsTest > shouldGetNestedLabelListFromMessage PASSED\nRunning test: Test shouldGetLabelsFromMessage(io.odpf.firehose.sink.prometheus.builder.TimeSeriesBuilderUtilsTest)\n\nio.odpf.firehose.sink.prometheus.builder.TimeSeriesBuilderUtilsTest > shouldGetLabelsFromMessage PASSED\nRunning test: Test shouldParseWithRequiredPromHeadersInBetween(io.odpf.firehose.sink.prometheus.builder.HeaderBuilderTest)\n\nio.odpf.firehose.sink.prometheus.builder.HeaderBuilderTest > shouldParseWithRequiredPromHeadersInBetween PASSED\nRunning test: Test shouldGenerateBaseHeader(io.odpf.firehose.sink.prometheus.builder.HeaderBuilderTest)\n\nio.odpf.firehose.sink.prometheus.builder.HeaderBuilderTest > shouldGenerateBaseHeader PASSED\nRunning test: Test shouldAddBaseHeaderPerMessageIfNotParameterized(io.odpf.firehose.sink.prometheus.builder.HeaderBuilderTest)\n\nio.odpf.firehose.sink.prometheus.builder.HeaderBuilderTest > shouldAddBaseHeaderPerMessageIfNotParameterized PASSED\nRunning test: Test shouldHandleMultipleHeader(io.odpf.firehose.sink.prometheus.builder.HeaderBuilderTest)\n\nio.odpf.firehose.sink.prometheus.builder.HeaderBuilderTest > shouldHandleMultipleHeader PASSED\nRunning test: Test shouldNotThrowNullPointerExceptionWhenHeaderConfigEmpty(io.odpf.firehose.sink.prometheus.builder.HeaderBuilderTest)\n\nio.odpf.firehose.sink.prometheus.builder.HeaderBuilderTest > shouldNotThrowNullPointerExceptionWhenHeaderConfigEmpty PASSED\nRunning test: Test shouldCreateSnappyCompressedByteArrayEntity(io.odpf.firehose.sink.prometheus.builder.RequestEntityBuilderTest)\n\nio.odpf.firehose.sink.prometheus.builder.RequestEntityBuilderTest > shouldCreateSnappyCompressedByteArrayEntity PASSED\nRunning test: Test shouldCloseStencilClient(io.odpf.firehose.sink.prometheus.PromSinkTest)\n\nio.odpf.firehose.sink.prometheus.PromSinkTest > shouldCloseStencilClient PASSED\nRunning test: Test shouldNotCaptureDroppedMessagesMetricsIfStatusCodeIs200(io.odpf.firehose.sink.prometheus.PromSinkTest)\n\nio.odpf.firehose.sink.prometheus.PromSinkTest > shouldNotCaptureDroppedMessagesMetricsIfStatusCodeIs200 PASSED\nRunning test: Test shouldNotCaptureDroppedMessagesMetricsIfStatusCodeIs201(io.odpf.firehose.sink.prometheus.PromSinkTest)\n\nio.odpf.firehose.sink.prometheus.PromSinkTest > shouldNotCaptureDroppedMessagesMetricsIfStatusCodeIs201 PASSED\nRunning test: Test shouldThrowNeedToRetryExceptionWhenResponseCodeIsGivenRange(io.odpf.firehose.sink.prometheus.PromSinkTest)\n\nio.odpf.firehose.sink.prometheus.PromSinkTest > shouldThrowNeedToRetryExceptionWhenResponseCodeIsGivenRange PASSED\nRunning test: Test shouldReadSnappyCompressedContent(io.odpf.firehose.sink.prometheus.PromSinkTest)\n\nio.odpf.firehose.sink.prometheus.PromSinkTest > shouldReadSnappyCompressedContent PASSED\nRunning test: Test shouldNotCaptureDroppedMessagesMetricsIfInStatusCodeRange(io.odpf.firehose.sink.prometheus.PromSinkTest)\n\nio.odpf.firehose.sink.prometheus.PromSinkTest > shouldNotCaptureDroppedMessagesMetricsIfInStatusCodeRange PASSED\nRunning test: Test shouldPrepareRequestDuringPreparationAndCallItDuringExecution(io.odpf.firehose.sink.prometheus.PromSinkTest)\n\nio.odpf.firehose.sink.prometheus.PromSinkTest > shouldPrepareRequestDuringPreparationAndCallItDuringExecution PASSED\nRunning test: Test shouldNotLogEntireRequestIfNotInStatusCodeRange(io.odpf.firehose.sink.prometheus.PromSinkTest)\n\nio.odpf.firehose.sink.prometheus.PromSinkTest > shouldNotLogEntireRequestIfNotInStatusCodeRange PASSED\nRunning test: Test shouldThrowNeedToRetryExceptionWhenResponseCodeIsNull(io.odpf.firehose.sink.prometheus.PromSinkTest)\n\nio.odpf.firehose.sink.prometheus.PromSinkTest > shouldThrowNeedToRetryExceptionWhenResponseCodeIsNull PASSED\nRunning test: Test shouldCatchURISyntaxExceptionAndThrowIOException(io.odpf.firehose.sink.prometheus.PromSinkTest)\n\nio.odpf.firehose.sink.prometheus.PromSinkTest > shouldCatchURISyntaxExceptionAndThrowIOException PASSED\nRunning test: Test shouldLogEntireRequestIfInStatusCodeRangeAndCaptureDroppedMessages(io.odpf.firehose.sink.prometheus.PromSinkTest)\n\nio.odpf.firehose.sink.prometheus.PromSinkTest > shouldLogEntireRequestIfInStatusCodeRangeAndCaptureDroppedMessages PASSED\nRunning test: Test shouldLogConnectionClosing(io.odpf.firehose.sink.prometheus.PromSinkTest)\n\nio.odpf.firehose.sink.prometheus.PromSinkTest > shouldLogConnectionClosing PASSED\nRunning test: Test shouldCaptureDroppedMessagesMetricsIfNotInStatusCodeRange(io.odpf.firehose.sink.prometheus.PromSinkTest)\n\nio.odpf.firehose.sink.prometheus.PromSinkTest > shouldCaptureDroppedMessagesMetricsIfNotInStatusCodeRange PASSED\nRunning test: Test shouldCaptureResponseStatusCount(io.odpf.firehose.sink.prometheus.PromSinkTest)\n\nio.odpf.firehose.sink.prometheus.PromSinkTest > shouldCaptureResponseStatusCount PASSED\nRunning test: Test shouldCallStorage(io.odpf.firehose.sink.common.s3.S3Test)\n\nio.odpf.firehose.sink.common.s3.S3Test > shouldCallStorage PASSED\nRunning test: Test shouldThrowException(io.odpf.firehose.sink.common.s3.S3Test)\n\nio.odpf.firehose.sink.common.s3.S3Test > shouldThrowException PASSED\nRunning test: Test shouldParseKeyWhenKafkaMessageParserModeSetToKey(io.odpf.firehose.sink.common.KeyOrMessageParserTest)\n\nio.odpf.firehose.sink.common.KeyOrMessageParserTest > shouldParseKeyWhenKafkaMessageParserModeSetToKey PASSED\nRunning test: Test shouldParseMessageByDefault(io.odpf.firehose.sink.common.KeyOrMessageParserTest)\n\nio.odpf.firehose.sink.common.KeyOrMessageParserTest > shouldParseMessageByDefault PASSED\nRunning test: Test shouldCallStorage(io.odpf.firehose.sink.common.gcs.GoogleCloudStorageTest)\n\nio.odpf.firehose.sink.common.gcs.GoogleCloudStorageTest > shouldCallStorage PASSED\nRunning test: Test shouldThrowBlobStorageException(io.odpf.firehose.sink.common.gcs.GoogleCloudStorageTest)\n\nio.odpf.firehose.sink.common.gcs.GoogleCloudStorageTest > shouldThrowBlobStorageException PASSED\nRunning test: Test shouldCloseStencilClient(io.odpf.firehose.sink.influxdb.InfluxSinkTest)\n\nio.odpf.firehose.sink.influxdb.InfluxSinkTest > shouldCloseStencilClient PASSED\nRunning test: Test shouldLogDataPointAndBatchPoints(io.odpf.firehose.sink.influxdb.InfluxSinkTest)\n\nio.odpf.firehose.sink.influxdb.InfluxSinkTest > shouldLogDataPointAndBatchPoints PASSED\nRunning test: Test shouldThrowExceptionOnEmptyFieldNameIndexMapping(io.odpf.firehose.sink.influxdb.InfluxSinkTest)\n\nio.odpf.firehose.sink.influxdb.InfluxSinkTest > shouldThrowExceptionOnEmptyFieldNameIndexMapping PASSED\nRunning test: Test shouldPushTagsAsStringValues(io.odpf.firehose.sink.influxdb.InfluxSinkTest)\n\nio.odpf.firehose.sink.influxdb.InfluxSinkTest > shouldPushTagsAsStringValues PASSED\nRunning test: Test shouldLogWhenClosingConnection(io.odpf.firehose.sink.influxdb.InfluxSinkTest)\n\nio.odpf.firehose.sink.influxdb.InfluxSinkTest > shouldLogWhenClosingConnection PASSED\nRunning test: Test shouldPrepareBatchPoints(io.odpf.firehose.sink.influxdb.InfluxSinkTest)\n\nio.odpf.firehose.sink.influxdb.InfluxSinkTest > shouldPrepareBatchPoints PASSED\nRunning test: Test shouldPushMessagesWithType(io.odpf.firehose.sink.influxdb.InfluxSinkTest)\n\nio.odpf.firehose.sink.influxdb.InfluxSinkTest > shouldPushMessagesWithType PASSED\nRunning test: Test testMessageWithDurationIsBuiltIntoMillis(io.odpf.firehose.sink.influxdb.builder.PointBuilderTest)\n\nio.odpf.firehose.sink.influxdb.builder.PointBuilderTest > testMessageWithDurationIsBuiltIntoMillis PASSED\nRunning test: Test testMessageWithEnum(io.odpf.firehose.sink.influxdb.builder.PointBuilderTest)\n\nio.odpf.firehose.sink.influxdb.builder.PointBuilderTest > testMessageWithEnum PASSED\nRunning test: Test testMessageWithNestedSchemaForFields(io.odpf.firehose.sink.influxdb.builder.PointBuilderTest)\n\nio.odpf.firehose.sink.influxdb.builder.PointBuilderTest > testMessageWithNestedSchemaForFields PASSED\nRunning test: Test testMessageWithNestedSchemaForTags(io.odpf.firehose.sink.influxdb.builder.PointBuilderTest)\n\nio.odpf.firehose.sink.influxdb.builder.PointBuilderTest > testMessageWithNestedSchemaForTags PASSED\nRunning test: Test testMessageWithTimestampIsBuiltIntoMillis(io.odpf.firehose.sink.influxdb.builder.PointBuilderTest)\n\nio.odpf.firehose.sink.influxdb.builder.PointBuilderTest > testMessageWithTimestampIsBuiltIntoMillis PASSED\nRunning test: Test shouldProcessException(io.odpf.firehose.sink.AbstractSinkTest)\n\nio.odpf.firehose.sink.AbstractSinkTest > shouldProcessException PASSED\nRunning test: Test shouldProcessFailedMessages(io.odpf.firehose.sink.AbstractSinkTest)\n\nio.odpf.firehose.sink.AbstractSinkTest > shouldProcessFailedMessages PASSED\nRunning test: Test shouldProcessExceptionInPrepare(io.odpf.firehose.sink.AbstractSinkTest)\n\nio.odpf.firehose.sink.AbstractSinkTest > shouldProcessExceptionInPrepare PASSED\nRunning test: Test shouldProcessMessages(io.odpf.firehose.sink.AbstractSinkTest)\n\nio.odpf.firehose.sink.AbstractSinkTest > shouldProcessMessages PASSED\nRunning test: Test shouldNotCaptureSinkExecutionTelemetry(io.odpf.firehose.sink.AbstractSinkTest)\n\nio.odpf.firehose.sink.AbstractSinkTest > shouldNotCaptureSinkExecutionTelemetry PASSED\nRunning test: Test shouldReturnEmptyListOfMessagesWhenSuccess(io.odpf.firehose.sink.GenericOdpfSinkTest)\n\nio.odpf.firehose.sink.GenericOdpfSinkTest > shouldReturnEmptyListOfMessagesWhenSuccess PASSED\nRunning test: Test shouldReturnFailedMessages(io.odpf.firehose.sink.GenericOdpfSinkTest)\n\nio.odpf.firehose.sink.GenericOdpfSinkTest > shouldReturnFailedMessages PASSED\nRunning test: Test shouldAddMetadataColumns(io.odpf.firehose.sink.bigquery.BigquerySinkUtilsTest)\n\nio.odpf.firehose.sink.bigquery.BigquerySinkUtilsTest > shouldAddMetadataColumns PASSED\nRunning test: Test shouldGetRowIdCreator(io.odpf.firehose.sink.bigquery.BigquerySinkUtilsTest)\n\nio.odpf.firehose.sink.bigquery.BigquerySinkUtilsTest > shouldGetRowIdCreator PASSED\nRunning test: Test shouldAddSinkConnectorConfigs(io.odpf.firehose.sink.SinkFactoryUtilsTest)\n\nio.odpf.firehose.sink.SinkFactoryUtilsTest > shouldAddSinkConnectorConfigs PASSED\nRunning test: Test shouldReturnMessageThatCausedDeserializerException(io.odpf.firehose.sink.blob.BlobSinkTest)\n\nio.odpf.firehose.sink.blob.BlobSinkTest > shouldReturnMessageThatCausedDeserializerException PASSED\nRunning test: Test shouldReturnCommittableOffsets(io.odpf.firehose.sink.blob.BlobSinkTest)\n\nio.odpf.firehose.sink.blob.BlobSinkTest > shouldReturnCommittableOffsets PASSED\nRunning test: Test shouldThrowWriterIOExceptionWhenWritingRecordThrowIOException(io.odpf.firehose.sink.blob.BlobSinkTest)\n\nio.odpf.firehose.sink.blob.BlobSinkTest > shouldThrowWriterIOExceptionWhenWritingRecordThrowIOException PASSED\nRunning test: Test shouldReturnMessagesWhenMessagesHasErrorCausedByUnknownFields(io.odpf.firehose.sink.blob.BlobSinkTest)\n\nio.odpf.firehose.sink.blob.BlobSinkTest > shouldReturnMessagesWhenMessagesHasErrorCausedByUnknownFields PASSED\nRunning test: Test shouldReturnMessagesWhenMessagesHasErrorCausedByEmptyMessageException(io.odpf.firehose.sink.blob.BlobSinkTest)\n\nio.odpf.firehose.sink.blob.BlobSinkTest > shouldReturnMessagesWhenMessagesHasErrorCausedByEmptyMessageException PASSED\nRunning test: Test shouldWriteRecords(io.odpf.firehose.sink.blob.BlobSinkTest)\n\nio.odpf.firehose.sink.blob.BlobSinkTest > shouldWriteRecords PASSED\nRunning test: Test shouldManageOffset(io.odpf.firehose.sink.blob.BlobSinkTest)\n\nio.odpf.firehose.sink.blob.BlobSinkTest > shouldManageOffset PASSED\nRunning test: Test shouldGenerateMessageDefinition(io.odpf.firehose.sink.blob.proto.NestedKafkaMetadataProtoMessageTest)\n\nio.odpf.firehose.sink.blob.proto.NestedKafkaMetadataProtoMessageTest > shouldGenerateMessageDefinition PASSED\nRunning test: Test shouldCreateDynamicMessage(io.odpf.firehose.sink.blob.proto.NestedKafkaMetadataProtoMessageTest)\n\nio.odpf.firehose.sink.blob.proto.NestedKafkaMetadataProtoMessageTest > shouldCreateDynamicMessage PASSED\nRunning test: Test shouldGenerateMessageDefinition(io.odpf.firehose.sink.blob.proto.TimestampMetadataProtoMessageTest)\n\nio.odpf.firehose.sink.blob.proto.TimestampMetadataProtoMessageTest > shouldGenerateMessageDefinition PASSED\nRunning test: Test shouldCreateDynamicMessage(io.odpf.firehose.sink.blob.proto.TimestampMetadataProtoMessageTest)\n\nio.odpf.firehose.sink.blob.proto.TimestampMetadataProtoMessageTest > shouldCreateDynamicMessage PASSED\nRunning test: Test shouldCreateKafkaMetadataMessageDefinition(io.odpf.firehose.sink.blob.proto.KafkaMetadataProtoMessageTest)\n\nio.odpf.firehose.sink.blob.proto.KafkaMetadataProtoMessageTest > shouldCreateKafkaMetadataMessageDefinition PASSED\nRunning test: Test shouldCreateKafkaMetadataDynamicMessage(io.odpf.firehose.sink.blob.proto.KafkaMetadataProtoMessageTest)\n\nio.odpf.firehose.sink.blob.proto.KafkaMetadataProtoMessageTest > shouldCreateKafkaMetadataDynamicMessage PASSED\nRunning test: Test shouldCreateDescriptors(io.odpf.firehose.sink.blob.proto.KafkaMetadataProtoFirehoseMessageUtilsTest)\n\nio.odpf.firehose.sink.blob.proto.KafkaMetadataProtoFirehoseMessageUtilsTest > shouldCreateDescriptors PASSED\nRunning test: Test shouldCreateFileDescriptor(io.odpf.firehose.sink.blob.proto.KafkaMetadataProtoFirehoseMessageUtilsTest)\n\nio.odpf.firehose.sink.blob.proto.KafkaMetadataProtoFirehoseMessageUtilsTest > shouldCreateFileDescriptor PASSED\nRunning test: Test shouldCreateDescriptorsForNestedMetadata(io.odpf.firehose.sink.blob.proto.KafkaMetadataProtoFirehoseMessageUtilsTest)\n\nio.odpf.firehose.sink.blob.proto.KafkaMetadataProtoFirehoseMessageUtilsTest > shouldCreateDescriptorsForNestedMetadata PASSED\nRunning test: Test shouldThrowIOExceptionWhenWriteThrowsException(io.odpf.firehose.sink.blob.writer.WriterOrchestratorTest)\n\nio.odpf.firehose.sink.blob.writer.WriterOrchestratorTest > shouldThrowIOExceptionWhenWriteThrowsException PASSED\nRunning test: Test shouldThrowIOExceptionWhenOpenNewWriterFailed(io.odpf.firehose.sink.blob.writer.WriterOrchestratorTest)\n\nio.odpf.firehose.sink.blob.writer.WriterOrchestratorTest > shouldThrowIOExceptionWhenOpenNewWriterFailed PASSED\nRunning test: Test shouldCreateLocalFileWriter(io.odpf.firehose.sink.blob.writer.WriterOrchestratorTest)\n\nio.odpf.firehose.sink.blob.writer.WriterOrchestratorTest > shouldCreateLocalFileWriter PASSED\nRunning test: Test shouldGetEmptyFlushedPath(io.odpf.firehose.sink.blob.writer.WriterOrchestratorTest)\n\nio.odpf.firehose.sink.blob.writer.WriterOrchestratorTest > shouldGetEmptyFlushedPath PASSED\nRunning test: Test shouldCreateMultipleWriterBasedOnPartition(io.odpf.firehose.sink.blob.writer.WriterOrchestratorTest)\n\nio.odpf.firehose.sink.blob.writer.WriterOrchestratorTest > shouldCreateMultipleWriterBasedOnPartition PASSED\nRunning test: Test shouldCheckForObjectStorageWriterCompletion(io.odpf.firehose.sink.blob.writer.WriterOrchestratorStatusTest)\n\nio.odpf.firehose.sink.blob.writer.WriterOrchestratorStatusTest > shouldCheckForObjectStorageWriterCompletion PASSED\nRunning test: Test shouldCheckForObjectStorageCompletionWithException(io.odpf.firehose.sink.blob.writer.WriterOrchestratorStatusTest)\n\nio.odpf.firehose.sink.blob.writer.WriterOrchestratorStatusTest > shouldCheckForObjectStorageCompletionWithException PASSED\nRunning test: Test shouldCheckForLocalWriterCompletionWithException(io.odpf.firehose.sink.blob.writer.WriterOrchestratorStatusTest)\n\nio.odpf.firehose.sink.blob.writer.WriterOrchestratorStatusTest > shouldCheckForLocalWriterCompletionWithException PASSED\nRunning test: Test shouldCheckForLocalWriterCompletion(io.odpf.firehose.sink.blob.writer.WriterOrchestratorStatusTest)\n\nio.odpf.firehose.sink.blob.writer.WriterOrchestratorStatusTest > shouldCheckForLocalWriterCompletion PASSED\nRunning test: Test shouldNeedRotateWhenWriterDataSizeGreaterThanEqualToMaxFileSize(io.odpf.firehose.sink.blob.writer.local.policy.SizeBasedRotatingPolicyTest)\n\nio.odpf.firehose.sink.blob.writer.local.policy.SizeBasedRotatingPolicyTest > shouldNeedRotateWhenWriterDataSizeGreaterThanEqualToMaxFileSize PASSED\nRunning test: Test shouldNotNeedRotateWhenSizeBelowTheLimit(io.odpf.firehose.sink.blob.writer.local.policy.SizeBasedRotatingPolicyTest)\n\nio.odpf.firehose.sink.blob.writer.local.policy.SizeBasedRotatingPolicyTest > shouldNotNeedRotateWhenSizeBelowTheLimit PASSED\nRunning test: Test shouldThrowExceptionIfInvalid(io.odpf.firehose.sink.blob.writer.local.policy.SizeBasedRotatingPolicyTest)\n\nio.odpf.firehose.sink.blob.writer.local.policy.SizeBasedRotatingPolicyTest > shouldThrowExceptionIfInvalid PASSED\nRunning test: Test shouldNotRotateWhenElapsedTimeLessThanMaxRotatingDuration(io.odpf.firehose.sink.blob.writer.local.policy.TimeBasedRotatingPolicyTest)\n\nio.odpf.firehose.sink.blob.writer.local.policy.TimeBasedRotatingPolicyTest > shouldNotRotateWhenElapsedTimeLessThanMaxRotatingDuration PASSED\nRunning test: Test shouldRotateWhenElapsedTimeGreaterThanMaxRotatingDuration(io.odpf.firehose.sink.blob.writer.local.policy.TimeBasedRotatingPolicyTest)\n\nio.odpf.firehose.sink.blob.writer.local.policy.TimeBasedRotatingPolicyTest > shouldRotateWhenElapsedTimeGreaterThanMaxRotatingDuration PASSED\nRunning test: Test shouldThrowExceptionIfInvalid(io.odpf.firehose.sink.blob.writer.local.policy.TimeBasedRotatingPolicyTest)\n\nio.odpf.firehose.sink.blob.writer.local.policy.TimeBasedRotatingPolicyTest > shouldThrowExceptionIfInvalid PASSED\nRunning test: Test shouldDeleteFiles(io.odpf.firehose.sink.blob.writer.local.LocalStorageTest)\n\nio.odpf.firehose.sink.blob.writer.local.LocalStorageTest > shouldDeleteFiles PASSED\nRunning test: Test shouldCreatePartitioningPathForNestedKafkaMetadata(io.odpf.firehose.sink.blob.writer.local.TimePartitionedPathUtilsTest)\n\nio.odpf.firehose.sink.blob.writer.local.TimePartitionedPathUtilsTest > shouldCreatePartitioningPathForNestedKafkaMetadata PASSED\nRunning test: Test shouldCreatePartitionPathWhenKafkaMetadataIsNotNested(io.odpf.firehose.sink.blob.writer.local.TimePartitionedPathUtilsTest)\n\nio.odpf.firehose.sink.blob.writer.local.TimePartitionedPathUtilsTest > shouldCreatePartitionPathWhenKafkaMetadataIsNotNested PASSED\nRunning test: Test shouldCreateNonePartitioningPath(io.odpf.firehose.sink.blob.writer.local.TimePartitionedPathUtilsTest)\n\nio.odpf.firehose.sink.blob.writer.local.TimePartitionedPathUtilsTest > shouldCreateNonePartitioningPath PASSED\nRunning test: Test shouldCreateHourPartitioningPath(io.odpf.firehose.sink.blob.writer.local.TimePartitionedPathUtilsTest)\n\nio.odpf.firehose.sink.blob.writer.local.TimePartitionedPathUtilsTest > shouldCreateHourPartitioningPath PASSED\nRunning test: Test shouldCreateDayPartitioningPath(io.odpf.firehose.sink.blob.writer.local.TimePartitionedPathUtilsTest)\n\nio.odpf.firehose.sink.blob.writer.local.TimePartitionedPathUtilsTest > shouldCreateDayPartitioningPath PASSED\nRunning test: Test shouldRecordMetricOfFileSizeInBytes(io.odpf.firehose.sink.blob.writer.local.LocalFileCheckerTest)\n\nio.odpf.firehose.sink.blob.writer.local.LocalFileCheckerTest > shouldRecordMetricOfFileSizeInBytes PASSED\nRunning test: Test shouldRemoveFromMapIfCloseFails(io.odpf.firehose.sink.blob.writer.local.LocalFileCheckerTest)\n\nio.odpf.firehose.sink.blob.writer.local.LocalFileCheckerTest > shouldRemoveFromMapIfCloseFails PASSED\nRunning test: Test shouldProduceFileMeta(io.odpf.firehose.sink.blob.writer.local.LocalFileCheckerTest)\n\nio.odpf.firehose.sink.blob.writer.local.LocalFileCheckerTest > shouldProduceFileMeta PASSED\nRunning test: Test shouldRotateSomeBasedOnPolicy(io.odpf.firehose.sink.blob.writer.local.LocalFileCheckerTest)\n\nio.odpf.firehose.sink.blob.writer.local.LocalFileCheckerTest > shouldRotateSomeBasedOnPolicy PASSED\nRunning test: Test shouldCaptureValueOfFileOpenCount(io.odpf.firehose.sink.blob.writer.local.LocalFileCheckerTest)\n\nio.odpf.firehose.sink.blob.writer.local.LocalFileCheckerTest > shouldCaptureValueOfFileOpenCount PASSED\nRunning test: Test shouldRecordMetricOfSuccessfullyClosedFiles(io.odpf.firehose.sink.blob.writer.local.LocalFileCheckerTest)\n\nio.odpf.firehose.sink.blob.writer.local.LocalFileCheckerTest > shouldRecordMetricOfSuccessfullyClosedFiles PASSED\nRunning test: Test shouldNotRotateBaseOnPolicy(io.odpf.firehose.sink.blob.writer.local.LocalFileCheckerTest)\n\nio.odpf.firehose.sink.blob.writer.local.LocalFileCheckerTest > shouldNotRotateBaseOnPolicy PASSED\nRunning test: Test shouldRecordMetricOfClosingTimeDuration(io.odpf.firehose.sink.blob.writer.local.LocalFileCheckerTest)\n\nio.odpf.firehose.sink.blob.writer.local.LocalFileCheckerTest > shouldRecordMetricOfClosingTimeDuration PASSED\nRunning test: Test shouldRecordMetricOfFailedClosedFiles(io.odpf.firehose.sink.blob.writer.local.LocalFileCheckerTest)\n\nio.odpf.firehose.sink.blob.writer.local.LocalFileCheckerTest > shouldRecordMetricOfFailedClosedFiles PASSED\nRunning test: Test shouldRotateBasedOnPolicy(io.odpf.firehose.sink.blob.writer.local.LocalFileCheckerTest)\n\nio.odpf.firehose.sink.blob.writer.local.LocalFileCheckerTest > shouldRotateBasedOnPolicy PASSED\nRunning test: Test shouldFilterFinishedFuture(io.odpf.firehose.sink.blob.writer.remote.BlobStorageWriterFutureHandlerTest)\n\nio.odpf.firehose.sink.blob.writer.remote.BlobStorageWriterFutureHandlerTest > shouldFilterFinishedFuture PASSED\nRunning test: Test shouldNotFilterUnfinishedFuture(io.odpf.firehose.sink.blob.writer.remote.BlobStorageWriterFutureHandlerTest)\n\nio.odpf.firehose.sink.blob.writer.remote.BlobStorageWriterFutureHandlerTest > shouldNotFilterUnfinishedFuture PASSED\nRunning test: Test shouldThrowException(io.odpf.firehose.sink.blob.writer.remote.BlobStorageWriterFutureHandlerTest)\n\nio.odpf.firehose.sink.blob.writer.remote.BlobStorageWriterFutureHandlerTest > shouldThrowException PASSED\nRunning test: Test shouldThrowFailedException(io.odpf.firehose.sink.blob.writer.remote.BlobStorageCheckerTest)\n\nio.odpf.firehose.sink.blob.writer.remote.BlobStorageCheckerTest > shouldThrowFailedException PASSED\nRunning test: Test shouldAddToFlushedIfUploadIsFinished(io.odpf.firehose.sink.blob.writer.remote.BlobStorageCheckerTest)\n\nio.odpf.firehose.sink.blob.writer.remote.BlobStorageCheckerTest > shouldAddToFlushedIfUploadIsFinished PASSED\nRunning test: Test shouldRecordMetricOfUploadFailedCountWhenUploadFutureThrowsInterruptedException(io.odpf.firehose.sink.blob.writer.remote.BlobStorageCheckerTest)\n\nio.odpf.firehose.sink.blob.writer.remote.BlobStorageCheckerTest > shouldRecordMetricOfUploadFailedCountWhenUploadFutureThrowsInterruptedException PASSED\nRunning test: Test shouldRecordMetricOfFileUploadedCount(io.odpf.firehose.sink.blob.writer.remote.BlobStorageCheckerTest)\n\nio.odpf.firehose.sink.blob.writer.remote.BlobStorageCheckerTest > shouldRecordMetricOfFileUploadedCount PASSED\nRunning test: Test shouldRecordMetricOfUploadDuration(io.odpf.firehose.sink.blob.writer.remote.BlobStorageCheckerTest)\n\nio.odpf.firehose.sink.blob.writer.remote.BlobStorageCheckerTest > shouldRecordMetricOfUploadDuration PASSED\nRunning test: Test shouldNotAddToFlushedIfUploadIsStillRunning(io.odpf.firehose.sink.blob.writer.remote.BlobStorageCheckerTest)\n\nio.odpf.firehose.sink.blob.writer.remote.BlobStorageCheckerTest > shouldNotAddToFlushedIfUploadIsStillRunning PASSED\nRunning test: Test shouldRecordMetricOfFileUploadBytes(io.odpf.firehose.sink.blob.writer.remote.BlobStorageCheckerTest)\n\nio.odpf.firehose.sink.blob.writer.remote.BlobStorageCheckerTest > shouldRecordMetricOfFileUploadBytes PASSED\nRunning test: Test shouldGetTimeStampFromMessage(io.odpf.firehose.sink.blob.message.RecordTest)\n\nio.odpf.firehose.sink.blob.message.RecordTest > shouldGetTimeStampFromMessage PASSED\nRunning test: Test shouldGetTopicFromMetaData(io.odpf.firehose.sink.blob.message.RecordTest)\n\nio.odpf.firehose.sink.blob.message.RecordTest > shouldGetTopicFromMetaData PASSED\nRunning test: Test shouldGetTopicFromNestedMetaData(io.odpf.firehose.sink.blob.message.RecordTest)\n\nio.odpf.firehose.sink.blob.message.RecordTest > shouldGetTopicFromNestedMetaData PASSED\nRunning test: Test shouldCreateKafkaDynamicMessageWhenMetadataIsNested(io.odpf.firehose.sink.blob.message.KafkaMetadataUtilsTest)\n\nio.odpf.firehose.sink.blob.message.KafkaMetadataUtilsTest > shouldCreateKafkaDynamicMessageWhenMetadataIsNested PASSED\nRunning test: Test shouldCreateKafkaMetadataDynamicMessage(io.odpf.firehose.sink.blob.message.KafkaMetadataUtilsTest)\n\nio.odpf.firehose.sink.blob.message.KafkaMetadataUtilsTest > shouldCreateKafkaMetadataDynamicMessage PASSED\nRunning test: Test shouldNotThrowExceptionWhenUnknownFieldExistWhenConfigIsNotSet(io.odpf.firehose.sink.blob.message.MessageDeSerializerTest)\n\nio.odpf.firehose.sink.blob.message.MessageDeSerializerTest > shouldNotThrowExceptionWhenUnknownFieldExistWhenConfigIsNotSet PASSED\nRunning test: Test shouldThrowExceptionWhenLogMessageIsNull(io.odpf.firehose.sink.blob.message.MessageDeSerializerTest)\n\nio.odpf.firehose.sink.blob.message.MessageDeSerializerTest > shouldThrowExceptionWhenLogMessageIsNull PASSED\nRunning test: Test shouldCreateRecord(io.odpf.firehose.sink.blob.message.MessageDeSerializerTest)\n\nio.odpf.firehose.sink.blob.message.MessageDeSerializerTest > shouldCreateRecord PASSED\nRunning test: Test shouldThrowExceptionWhenLogMessageIsEmpty(io.odpf.firehose.sink.blob.message.MessageDeSerializerTest)\n\nio.odpf.firehose.sink.blob.message.MessageDeSerializerTest > shouldThrowExceptionWhenLogMessageIsEmpty PASSED\nRunning test: Test shouldThrowDeserializerExceptionWhenProtoParsingThrowException(io.odpf.firehose.sink.blob.message.MessageDeSerializerTest)\n\nio.odpf.firehose.sink.blob.message.MessageDeSerializerTest > shouldThrowDeserializerExceptionWhenProtoParsingThrowException PASSED\nRunning test: Test shouldAlwaysCreateRecordWithMetadata(io.odpf.firehose.sink.blob.message.MessageDeSerializerTest)\n\nio.odpf.firehose.sink.blob.message.MessageDeSerializerTest > shouldAlwaysCreateRecordWithMetadata PASSED\nRunning test: Test shouldThrowExceptionWhenUnknownFieldExist(io.odpf.firehose.sink.blob.message.MessageDeSerializerTest)\n\nio.odpf.firehose.sink.blob.message.MessageDeSerializerTest > shouldThrowExceptionWhenUnknownFieldExist PASSED\nRunning test: Test shouldNotSubmitTask(io.odpf.firehose.sink.SinkPoolTest)\n\nio.odpf.firehose.sink.SinkPoolTest > shouldNotSubmitTask PASSED\nRunning test: Test shouldFetchFinishedFutures(io.odpf.firehose.sink.SinkPoolTest)\n\nio.odpf.firehose.sink.SinkPoolTest > shouldFetchFinishedFutures PASSED\nRunning test: Test shouldSubmitTask(io.odpf.firehose.sink.SinkPoolTest)\n\nio.odpf.firehose.sink.SinkPoolTest > shouldSubmitTask PASSED\nRunning test: Test shouldUseKafkaRecordKey(io.odpf.firehose.sink.jdbc.QueryTemplateTest)\n\nio.odpf.firehose.sink.jdbc.QueryTemplateTest > shouldUseKafkaRecordKey PASSED\nRunning test: Test shouldUseKafkaRecordMessage(io.odpf.firehose.sink.jdbc.QueryTemplateTest)\n\nio.odpf.firehose.sink.jdbc.QueryTemplateTest > shouldUseKafkaRecordMessage PASSED\nRunning test: Test shouldAddNestedColumnsToQuery(io.odpf.firehose.sink.jdbc.QueryTemplateTest)\n\nio.odpf.firehose.sink.jdbc.QueryTemplateTest > shouldAddNestedColumnsToQuery PASSED\nRunning test: Test shouldNotUpdateWhenAllColumnsAreInUniqueSet(io.odpf.firehose.sink.jdbc.QueryTemplateTest)\n\nio.odpf.firehose.sink.jdbc.QueryTemplateTest > shouldNotUpdateWhenAllColumnsAreInUniqueSet PASSED\nRunning test: Test shouldUseSingleUniqueKeyColumnForOnConflictResolution(io.odpf.firehose.sink.jdbc.QueryTemplateTest)\n\nio.odpf.firehose.sink.jdbc.QueryTemplateTest > shouldUseSingleUniqueKeyColumnForOnConflictResolution PASSED\nRunning test: Test shouldUseMultipleUniqueKeyColumnForOnConflictResolution(io.odpf.firehose.sink.jdbc.QueryTemplateTest)\n\nio.odpf.firehose.sink.jdbc.QueryTemplateTest > shouldUseMultipleUniqueKeyColumnForOnConflictResolution PASSED\nRunning test: Test shouldDoSimpleInsertWhenNoUniqueKeysArePresent(io.odpf.firehose.sink.jdbc.QueryTemplateTest)\n\nio.odpf.firehose.sink.jdbc.QueryTemplateTest > shouldDoSimpleInsertWhenNoUniqueKeysArePresent PASSED\nRunning test: Test nestedMessageWithNestedPropertiesShouldBeMapped(io.odpf.firehose.sink.jdbc.ProtoToFieldMapperTest)\n\nio.odpf.firehose.sink.jdbc.ProtoToFieldMapperTest > nestedMessageWithNestedPropertiesShouldBeMapped PASSED\nRunning test: Test shouldThrowClassNotFoundExceptionOnInvalidClasName(io.odpf.firehose.sink.jdbc.ProtoToFieldMapperTest)\n\nio.odpf.firehose.sink.jdbc.ProtoToFieldMapperTest > shouldThrowClassNotFoundExceptionOnInvalidClasName PASSED\nRunning test: Test shouldContainNanoSecondsInTimestamp(io.odpf.firehose.sink.jdbc.ProtoToFieldMapperTest)\n\nio.odpf.firehose.sink.jdbc.ProtoToFieldMapperTest > shouldContainNanoSecondsInTimestamp PASSED\nRunning test: Test messageWithMapShouldBeConvertedToJson(io.odpf.firehose.sink.jdbc.ProtoToFieldMapperTest)\n\nio.odpf.firehose.sink.jdbc.ProtoToFieldMapperTest > messageWithMapShouldBeConvertedToJson PASSED\nRunning test: Test getFieldAtIndex(io.odpf.firehose.sink.jdbc.ProtoToFieldMapperTest)\n\nio.odpf.firehose.sink.jdbc.ProtoToFieldMapperTest > getFieldAtIndex PASSED\nRunning test: Test nestedRepeatedMessageShouldBeJson(io.odpf.firehose.sink.jdbc.ProtoToFieldMapperTest)\n\nio.odpf.firehose.sink.jdbc.ProtoToFieldMapperTest > nestedRepeatedMessageShouldBeJson PASSED\nRunning test: Test nestedRepeatedEmptyMessageShouldBeEmptyJson(io.odpf.firehose.sink.jdbc.ProtoToFieldMapperTest)\n\nio.odpf.firehose.sink.jdbc.ProtoToFieldMapperTest > nestedRepeatedEmptyMessageShouldBeEmptyJson PASSED\nRunning test: Test getField(io.odpf.firehose.sink.jdbc.ProtoToFieldMapperTest)\n\nio.odpf.firehose.sink.jdbc.ProtoToFieldMapperTest > getField PASSED\nRunning test: Test shouldCloseStencilClient(io.odpf.firehose.sink.jdbc.JdbcSinkTest)\n\nio.odpf.firehose.sink.jdbc.JdbcSinkTest > shouldCloseStencilClient PASSED\nRunning test: Test shouldPrepareBatchForQueries(io.odpf.firehose.sink.jdbc.JdbcSinkTest)\n\nio.odpf.firehose.sink.jdbc.JdbcSinkTest > shouldPrepareBatchForQueries PASSED\nRunning test: Test shouldReturnEmptyListWhenNoException(io.odpf.firehose.sink.jdbc.JdbcSinkTest)\n\nio.odpf.firehose.sink.jdbc.JdbcSinkTest > shouldReturnEmptyListWhenNoException PASSED\nRunning test: Test shouldReleaseConnectionOnException(io.odpf.firehose.sink.jdbc.JdbcSinkTest)\n\nio.odpf.firehose.sink.jdbc.JdbcSinkTest > shouldReleaseConnectionOnException PASSED\nRunning test: Test shouldLogQueryString(io.odpf.firehose.sink.jdbc.JdbcSinkTest)\n\nio.odpf.firehose.sink.jdbc.JdbcSinkTest > shouldLogQueryString PASSED\nRunning test: Test shouldUseBatchForPushMessage(io.odpf.firehose.sink.jdbc.JdbcSinkTest)\n\nio.odpf.firehose.sink.jdbc.JdbcSinkTest > shouldUseBatchForPushMessage PASSED\nRunning test: Test shouldNotReleaseConnectionWhenNull(io.odpf.firehose.sink.jdbc.JdbcSinkTest)\n\nio.odpf.firehose.sink.jdbc.JdbcSinkTest > shouldNotReleaseConnectionWhenNull PASSED\nRunning test: Test shouldCloseConnectionPool(io.odpf.firehose.sink.jdbc.JdbcSinkTest)\n\nio.odpf.firehose.sink.jdbc.JdbcSinkTest > shouldCloseConnectionPool PASSED\nRunning test: Test shouldPopulateQueryString(io.odpf.firehose.sink.jdbc.JdbcSinkTest)\n\nio.odpf.firehose.sink.jdbc.JdbcSinkTest > shouldPopulateQueryString PASSED\nRunning test: Test shouldReleaseConnectionAfterSuccessfulQuery(io.odpf.firehose.sink.jdbc.JdbcSinkTest)\n\nio.odpf.firehose.sink.jdbc.JdbcSinkTest > shouldReleaseConnectionAfterSuccessfulQuery PASSED\nRunning test: Test shouldLogDbResponse(io.odpf.firehose.sink.jdbc.JdbcSinkTest)\n\nio.odpf.firehose.sink.jdbc.JdbcSinkTest > shouldLogDbResponse PASSED\nRunning test: Test shouldCallStartExecutionBeforeCaptureSuccessAttempt(io.odpf.firehose.sink.jdbc.JdbcSinkTest)\n\nio.odpf.firehose.sink.jdbc.JdbcSinkTest > shouldCallStartExecutionBeforeCaptureSuccessAttempt PASSED\nRunning test: Test shouldLogWhenClosingConnection(io.odpf.firehose.sink.jdbc.JdbcSinkTest)\n\nio.odpf.firehose.sink.jdbc.JdbcSinkTest > shouldLogWhenClosingConnection PASSED\nRunning test: Test shouldThrowIOExceptionWhenFailToClose(io.odpf.firehose.sink.jdbc.JdbcSinkTest)\n\nio.odpf.firehose.sink.jdbc.JdbcSinkTest > shouldThrowIOExceptionWhenFailToClose PASSED\nRunning test: Test shouldGetConnectionFromDataSource(io.odpf.firehose.sink.jdbc.HikariJdbcConnectionPoolTest)\n\nio.odpf.firehose.sink.jdbc.HikariJdbcConnectionPoolTest > shouldGetConnectionFromDataSource PASSED\nRunning test: Test shouldCloseTheConnectionWhenReleased(io.odpf.firehose.sink.jdbc.HikariJdbcConnectionPoolTest)\n\nio.odpf.firehose.sink.jdbc.HikariJdbcConnectionPoolTest > shouldCloseTheConnectionWhenReleased PASSED\nRunning test: Test shouldCloseDataSourceWhenShutdown(io.odpf.firehose.sink.jdbc.HikariJdbcConnectionPoolTest)\n\nio.odpf.firehose.sink.jdbc.HikariJdbcConnectionPoolTest > shouldCloseDataSourceWhenShutdown PASSED\nRunning test: Test shouldParseTheMapFieldAsString(io.odpf.firehose.sink.jdbc.field.JdbcMapFieldTest)\n\nio.odpf.firehose.sink.jdbc.field.JdbcMapFieldTest > shouldParseTheMapFieldAsString PASSED\nRunning test: Test shouldParseTheMapFieldWithEmptyValueAsString(io.odpf.firehose.sink.jdbc.field.JdbcMapFieldTest)\n\nio.odpf.firehose.sink.jdbc.field.JdbcMapFieldTest > shouldParseTheMapFieldWithEmptyValueAsString PASSED\nRunning test: Test shouldBeAbleToParseStringFields(io.odpf.firehose.sink.jdbc.field.JdbcMapFieldTest)\n\nio.odpf.firehose.sink.jdbc.field.JdbcMapFieldTest > shouldBeAbleToParseStringFields PASSED\nRunning test: Test shouldBeAbleToParseMapFields(io.odpf.firehose.sink.jdbc.field.JdbcMapFieldTest)\n\nio.odpf.firehose.sink.jdbc.field.JdbcMapFieldTest > shouldBeAbleToParseMapFields PASSED\nRunning test: Test shouldParseTheTimestampFieldAsString(io.odpf.firehose.sink.jdbc.field.message.DBTimestampFieldTest)\n\nio.odpf.firehose.sink.jdbc.field.message.DBTimestampFieldTest > shouldParseTheTimestampFieldAsString PASSED\nRunning test: Test shouldBeAbleToParseTimestampFields(io.odpf.firehose.sink.jdbc.field.message.DBTimestampFieldTest)\n\nio.odpf.firehose.sink.jdbc.field.message.DBTimestampFieldTest > shouldBeAbleToParseTimestampFields PASSED\nRunning test: Test shouldNotBeAbleToParseStringFields(io.odpf.firehose.sink.jdbc.field.message.DBTimestampFieldTest)\n\nio.odpf.firehose.sink.jdbc.field.message.DBTimestampFieldTest > shouldNotBeAbleToParseStringFields PASSED\nRunning test: Test shouldParseTheMessageFieldAsString(io.odpf.firehose.sink.jdbc.field.message.DBDefaultMessageFieldTest)\n\nio.odpf.firehose.sink.jdbc.field.message.DBDefaultMessageFieldTest > shouldParseTheMessageFieldAsString PASSED\nRunning test: Test shouldNotBeAbleToParseNormalFields(io.odpf.firehose.sink.jdbc.field.message.DBDefaultMessageFieldTest)\n\nio.odpf.firehose.sink.jdbc.field.message.DBDefaultMessageFieldTest > shouldNotBeAbleToParseNormalFields PASSED\nRunning test: Test shouldBeAbleToParseMessageFields(io.odpf.firehose.sink.jdbc.field.message.DBDefaultMessageFieldTest)\n\nio.odpf.firehose.sink.jdbc.field.message.DBDefaultMessageFieldTest > shouldBeAbleToParseMessageFields PASSED\nRunning test: Test shouldNotBeAbleToParseStringFields(io.odpf.firehose.sink.jdbc.field.message.DBCollectionFieldTest)\n\nio.odpf.firehose.sink.jdbc.field.message.DBCollectionFieldTest > shouldNotBeAbleToParseStringFields PASSED\nRunning test: Test shouldBeAbleToParseCollectionFields(io.odpf.firehose.sink.jdbc.field.message.DBCollectionFieldTest)\n\nio.odpf.firehose.sink.jdbc.field.message.DBCollectionFieldTest > shouldBeAbleToParseCollectionFields PASSED\nRunning test: Test shouldParseTheCollectionFieldAsString(io.odpf.firehose.sink.jdbc.field.message.DBCollectionFieldTest)\n\nio.odpf.firehose.sink.jdbc.field.message.DBCollectionFieldTest > shouldParseTheCollectionFieldAsString PASSED\nRunning test: Test shouldCreateChannelPoolWithHostAndPort(io.odpf.firehose.sink.grpc.GrpcSinkFactoryTest)\n\nio.odpf.firehose.sink.grpc.GrpcSinkFactoryTest > shouldCreateChannelPoolWithHostAndPort PASSED\nRunning test: Test shouldCloseStencilClient(io.odpf.firehose.sink.grpc.GrpcSinkTest)\n\nio.odpf.firehose.sink.grpc.GrpcSinkTest > shouldCloseStencilClient PASSED\nRunning test: Test shouldReturnBackListOfFailedMessages(io.odpf.firehose.sink.grpc.GrpcSinkTest)\n\nio.odpf.firehose.sink.grpc.GrpcSinkTest > shouldReturnBackListOfFailedMessages PASSED\nRunning test: Test shouldLogWhenClosingConnection(io.odpf.firehose.sink.grpc.GrpcSinkTest)\n\nio.odpf.firehose.sink.grpc.GrpcSinkTest > shouldLogWhenClosingConnection PASSED\nRunning test: Test shouldWriteToSink(io.odpf.firehose.sink.grpc.GrpcSinkTest)\n\nio.odpf.firehose.sink.grpc.GrpcSinkTest > shouldWriteToSink PASSED\nRunning test: Test shouldReturnErrorWhenGrpcException(io.odpf.firehose.sink.grpc.GrpcClientTest)\n\nio.odpf.firehose.sink.grpc.GrpcClientTest > shouldReturnErrorWhenGrpcException PASSED\nRunning test: Test shouldCallTheGivenRpcMethodAndGetErrorResponse(io.odpf.firehose.sink.grpc.GrpcClientTest)\n\nio.odpf.firehose.sink.grpc.GrpcClientTest > shouldCallTheGivenRpcMethodAndGetErrorResponse PASSED\nRunning test: Test shouldCallTheGivenRpcMethodAndGetSuccessResponse(io.odpf.firehose.sink.grpc.GrpcClientTest)\n\nio.odpf.firehose.sink.grpc.GrpcClientTest > shouldCallTheGivenRpcMethodAndGetSuccessResponse PASSED\nRunning test: Test shouldCallTheGivenRpcMethodWithHeaders(io.odpf.firehose.sink.grpc.GrpcClientTest)\n\nio.odpf.firehose.sink.grpc.GrpcClientTest > shouldCallTheGivenRpcMethodWithHeaders PASSED\nRunning test: Test shouldReturnErrorWhenBytesAreNull(io.odpf.firehose.sink.grpc.GrpcClientTest)\n\nio.odpf.firehose.sink.grpc.GrpcClientTest > shouldReturnErrorWhenBytesAreNull PASSED\nRunning test: Test shouldNotWrapEntityIfNotSet(io.odpf.firehose.sink.http.request.entity.RequestEntityBuilderTest)\n\nio.odpf.firehose.sink.http.request.entity.RequestEntityBuilderTest > shouldNotWrapEntityIfNotSet PASSED\nRunning test: Test shouldCreateStringEntity(io.odpf.firehose.sink.http.request.entity.RequestEntityBuilderTest)\n\nio.odpf.firehose.sink.http.request.entity.RequestEntityBuilderTest > shouldCreateStringEntity PASSED\nRunning test: Test shouldWrapEntityIfSet(io.odpf.firehose.sink.http.request.entity.RequestEntityBuilderTest)\n\nio.odpf.firehose.sink.http.request.entity.RequestEntityBuilderTest > shouldWrapEntityIfSet PASSED\nRunning test: Test shouldWrapMessageToASingleRequest(io.odpf.firehose.sink.http.request.create.BatchRequestCreatorTest)\n\nio.odpf.firehose.sink.http.request.create.BatchRequestCreatorTest > shouldWrapMessageToASingleRequest PASSED\nRunning test: Test shouldProperlyBuildRequests(io.odpf.firehose.sink.http.request.create.BatchRequestCreatorTest)\n\nio.odpf.firehose.sink.http.request.create.BatchRequestCreatorTest > shouldProperlyBuildRequests PASSED\nRunning test: Test shouldWrapMessageToASingleRequestWhenPostRequest(io.odpf.firehose.sink.http.request.create.BatchRequestCreatorTest)\n\nio.odpf.firehose.sink.http.request.create.BatchRequestCreatorTest > shouldWrapMessageToASingleRequestWhenPostRequest PASSED\nRunning test: Test shouldSetRequestPropertiesOnlyOnce(io.odpf.firehose.sink.http.request.create.BatchRequestCreatorTest)\n\nio.odpf.firehose.sink.http.request.create.BatchRequestCreatorTest > shouldSetRequestPropertiesOnlyOnce PASSED\nRunning test: Test shouldWrapMessagesToASingleRequest(io.odpf.firehose.sink.http.request.create.BatchRequestCreatorTest)\n\nio.odpf.firehose.sink.http.request.create.BatchRequestCreatorTest > shouldWrapMessagesToASingleRequest PASSED\nRunning test: Test shouldWrapMessageToASingleRequestWhenPatchRequest(io.odpf.firehose.sink.http.request.create.BatchRequestCreatorTest)\n\nio.odpf.firehose.sink.http.request.create.BatchRequestCreatorTest > shouldWrapMessageToASingleRequestWhenPatchRequest PASSED\nRunning test: Test shouldSetRequestPropertiesMultipleTimes(io.odpf.firehose.sink.http.request.create.IndividualRequestCreatorTest)\n\nio.odpf.firehose.sink.http.request.create.IndividualRequestCreatorTest > shouldSetRequestPropertiesMultipleTimes PASSED\nRunning test: Test shouldNotWrapEntityToArrayIfNot(io.odpf.firehose.sink.http.request.create.IndividualRequestCreatorTest)\n\nio.odpf.firehose.sink.http.request.create.IndividualRequestCreatorTest > shouldNotWrapEntityToArrayIfNot PASSED\nRunning test: Test shouldProduceIndividualRequests(io.odpf.firehose.sink.http.request.create.IndividualRequestCreatorTest)\n\nio.odpf.firehose.sink.http.request.create.IndividualRequestCreatorTest > shouldProduceIndividualRequests PASSED\nRunning test: Test shouldWrapEntityToArrayIfSet(io.odpf.firehose.sink.http.request.create.IndividualRequestCreatorTest)\n\nio.odpf.firehose.sink.http.request.create.IndividualRequestCreatorTest > shouldWrapEntityToArrayIfSet PASSED\nRunning test: Test shouldProduceIndividualRequestsWhenPatchRequest(io.odpf.firehose.sink.http.request.create.IndividualRequestCreatorTest)\n\nio.odpf.firehose.sink.http.request.create.IndividualRequestCreatorTest > shouldProduceIndividualRequestsWhenPatchRequest PASSED\nRunning test: Test shouldProduceIndividualRequestsWhenPUTRequest(io.odpf.firehose.sink.http.request.create.IndividualRequestCreatorTest)\n\nio.odpf.firehose.sink.http.request.create.IndividualRequestCreatorTest > shouldProduceIndividualRequestsWhenPUTRequest PASSED\nRunning test: Test shouldAddParamMapToUri(io.odpf.firehose.sink.http.request.uri.UriBuilderTest)\n\nio.odpf.firehose.sink.http.request.uri.UriBuilderTest > shouldAddParamMapToUri PASSED\nRunning test: Test shouldUseLogKeyWhenSourceParamTypeIsKey(io.odpf.firehose.sink.http.request.uri.UriBuilderTest)\n\nio.odpf.firehose.sink.http.request.uri.UriBuilderTest > shouldUseLogKeyWhenSourceParamTypeIsKey PASSED\nRunning test: Test shouldHandleMultipleParam(io.odpf.firehose.sink.http.request.uri.UriBuilderTest)\n\nio.odpf.firehose.sink.http.request.uri.UriBuilderTest > shouldHandleMultipleParam PASSED\nRunning test: Test shouldUseLogMessageWhenSourceParamTypeIsMessage(io.odpf.firehose.sink.http.request.uri.UriBuilderTest)\n\nio.odpf.firehose.sink.http.request.uri.UriBuilderTest > shouldUseLogMessageWhenSourceParamTypeIsMessage PASSED\nRunning test: Test shouldReturnParsedURIInstanceBasedOnBaseUrlForDynamicURLs(io.odpf.firehose.sink.http.request.uri.UriBuilderTest)\n\nio.odpf.firehose.sink.http.request.uri.UriBuilderTest > shouldReturnParsedURIInstanceBasedOnBaseUrlForDynamicURLs PASSED\nRunning test: Test shouldReturnURIInstanceBasedOnBaseUrl(io.odpf.firehose.sink.http.request.uri.UriBuilderTest)\n\nio.odpf.firehose.sink.http.request.uri.UriBuilderTest > shouldReturnURIInstanceBasedOnBaseUrl PASSED\nRunning test: Test shouldReturnTheServiceUrlAsItIsWhenServiceUrlIsNotParametrizedAndParserModeIsMessage(io.odpf.firehose.sink.http.request.uri.UriParserTest)\n\nio.odpf.firehose.sink.http.request.uri.UriParserTest > shouldReturnTheServiceUrlAsItIsWhenServiceUrlIsNotParametrizedAndParserModeIsMessage PASSED\nRunning test: Test shouldThrowIllegalArgumentExceptionWhenEmptyServiceUrlIsProvided(io.odpf.firehose.sink.http.request.uri.UriParserTest)\n\nio.odpf.firehose.sink.http.request.uri.UriParserTest > shouldThrowIllegalArgumentExceptionWhenEmptyServiceUrlIsProvided PASSED\nRunning test: Test shouldSetTheFloatValueInServiceUrlFromGivenProtoIndexWhenServiceUrlIsParametrizedAndParserModeIsMessage(io.odpf.firehose.sink.http.request.uri.UriParserTest)\n\nio.odpf.firehose.sink.http.request.uri.UriParserTest > shouldSetTheFloatValueInServiceUrlFromGivenProtoIndexWhenServiceUrlIsParametrizedAndParserModeIsMessage PASSED\nRunning test: Test shouldSetTheValueInServiceUrlFromGivenProtoIndexWhenServiceUrlIsParametrizedAndParserModeIsKey(io.odpf.firehose.sink.http.request.uri.UriParserTest)\n\nio.odpf.firehose.sink.http.request.uri.UriParserTest > shouldSetTheValueInServiceUrlFromGivenProtoIndexWhenServiceUrlIsParametrizedAndParserModeIsKey PASSED\nRunning test: Test shouldThrowInvalidConfigurationExceptionWhenNoUrlAndArgumentsAreProvided(io.odpf.firehose.sink.http.request.uri.UriParserTest)\n\nio.odpf.firehose.sink.http.request.uri.UriParserTest > shouldThrowInvalidConfigurationExceptionWhenNoUrlAndArgumentsAreProvided PASSED\nRunning test: Test shouldSetTheValueInServiceUrlFromGivenProtoIndexWhenServiceUrlIsParametrizedAndParserModeIsMessage(io.odpf.firehose.sink.http.request.uri.UriParserTest)\n\nio.odpf.firehose.sink.http.request.uri.UriParserTest > shouldSetTheValueInServiceUrlFromGivenProtoIndexWhenServiceUrlIsParametrizedAndParserModeIsMessage PASSED\nRunning test: Test shouldSetTheLongValueInServiceUrlFromGivenProtoIndexWhenServiceUrlIsParametrizedAndParserModeIsMessage(io.odpf.firehose.sink.http.request.uri.UriParserTest)\n\nio.odpf.firehose.sink.http.request.uri.UriParserTest > shouldSetTheLongValueInServiceUrlFromGivenProtoIndexWhenServiceUrlIsParametrizedAndParserModeIsMessage PASSED\nRunning test: Test shouldCatchInvalidProtocolBufferExceptionFromProtoParserAndThrowIllegalArgumentException(io.odpf.firehose.sink.http.request.uri.UriParserTest)\n\nio.odpf.firehose.sink.http.request.uri.UriParserTest > shouldCatchInvalidProtocolBufferExceptionFromProtoParserAndThrowIllegalArgumentException PASSED\nRunning test: Test shouldCatchNumberFormatExceptionAndThrowIllegalArgumentsException(io.odpf.firehose.sink.http.request.uri.UriParserTest)\n\nio.odpf.firehose.sink.http.request.uri.UriParserTest > shouldCatchNumberFormatExceptionAndThrowIllegalArgumentsException PASSED\nRunning test: Test shouldReturnTheServiceUrlAsItIsWhenServiceUrlIsNotParametrizedAndParserModeIsKey(io.odpf.firehose.sink.http.request.uri.UriParserTest)\n\nio.odpf.firehose.sink.http.request.uri.UriParserTest > shouldReturnTheServiceUrlAsItIsWhenServiceUrlIsNotParametrizedAndParserModeIsKey PASSED\nRunning test: Test shouldThrowIllegalArgumentsExceptionWhenDescriptorIsNotFoundForTheProtoIndexProvided(io.odpf.firehose.sink.http.request.uri.UriParserTest)\n\nio.odpf.firehose.sink.http.request.uri.UriParserTest > shouldThrowIllegalArgumentsExceptionWhenDescriptorIsNotFoundForTheProtoIndexProvided PASSED\nRunning test: Test shouldReturnSerializedValueOfMessage(io.odpf.firehose.sink.http.request.body.JsonBodyTest)\n\nio.odpf.firehose.sink.http.request.body.JsonBodyTest > shouldReturnSerializedValueOfMessage PASSED\nRunning test: Test shouldReturnSameSizeOfBodyAsEsbMessage(io.odpf.firehose.sink.http.request.body.JsonBodyTest)\n\nio.odpf.firehose.sink.http.request.body.JsonBodyTest > shouldReturnSameSizeOfBodyAsEsbMessage PASSED\nRunning test: Test shouldReturnBatchRequestWhenPrameterSourceIsDisabledAndServiceUrlIsConstant(io.odpf.firehose.sink.http.request.RequestFactoryTest)\n\nio.odpf.firehose.sink.http.request.RequestFactoryTest > shouldReturnBatchRequestWhenPrameterSourceIsDisabledAndServiceUrlIsConstant PASSED\nRunning test: Test shouldReturnParameterizedRequstWhenParameterSourceIsNotDisableAndPlacementTypeIsQuery(io.odpf.firehose.sink.http.request.RequestFactoryTest)\n\nio.odpf.firehose.sink.http.request.RequestFactoryTest > shouldReturnParameterizedRequstWhenParameterSourceIsNotDisableAndPlacementTypeIsQuery PASSED\nRunning test: Test shouldReturnParameterizedRequstWhenParameterSourceIsNotDisableAndPlacementTypeIsHeader(io.odpf.firehose.sink.http.request.RequestFactoryTest)\n\nio.odpf.firehose.sink.http.request.RequestFactoryTest > shouldReturnParameterizedRequstWhenParameterSourceIsNotDisableAndPlacementTypeIsHeader PASSED\nRunning test: Test shouldReturnDynamicUrlRequestWhenPrameterSourceIsDisabledAndServiceUrlIsNotParametrised(io.odpf.firehose.sink.http.request.RequestFactoryTest)\n\nio.odpf.firehose.sink.http.request.RequestFactoryTest > shouldReturnDynamicUrlRequestWhenPrameterSourceIsDisabledAndServiceUrlIsNotParametrised PASSED\nRunning test: Test shouldGenerateBaseHeader(io.odpf.firehose.sink.http.request.header.HeaderBuilderTest)\n\nio.odpf.firehose.sink.http.request.header.HeaderBuilderTest > shouldGenerateBaseHeader PASSED\nRunning test: Test shouldParseWithNilHeadersInBetween(io.odpf.firehose.sink.http.request.header.HeaderBuilderTest)\n\nio.odpf.firehose.sink.http.request.header.HeaderBuilderTest > shouldParseWithNilHeadersInBetween PASSED\nRunning test: Test shouldUseLogMessageWhenSourceTypeIsMessage(io.odpf.firehose.sink.http.request.header.HeaderBuilderTest)\n\nio.odpf.firehose.sink.http.request.header.HeaderBuilderTest > shouldUseLogMessageWhenSourceTypeIsMessage PASSED\nRunning test: Test shouldAddBaseHeaderPerMessageIfNotParameterized(io.odpf.firehose.sink.http.request.header.HeaderBuilderTest)\n\nio.odpf.firehose.sink.http.request.header.HeaderBuilderTest > shouldAddBaseHeaderPerMessageIfNotParameterized PASSED\nRunning test: Test shouldUseLogKeyWhenSourceTypeIsKey(io.odpf.firehose.sink.http.request.header.HeaderBuilderTest)\n\nio.odpf.firehose.sink.http.request.header.HeaderBuilderTest > shouldUseLogKeyWhenSourceTypeIsKey PASSED\nRunning test: Test shouldKeepBaseHeadersAndAddExtraHeaderAsItIsProvideInTheConfig(io.odpf.firehose.sink.http.request.header.HeaderBuilderTest)\n\nio.odpf.firehose.sink.http.request.header.HeaderBuilderTest > shouldKeepBaseHeadersAndAddExtraHeaderAsItIsProvideInTheConfig PASSED\nRunning test: Test shouldHandleMultipleHeader(io.odpf.firehose.sink.http.request.header.HeaderBuilderTest)\n\nio.odpf.firehose.sink.http.request.header.HeaderBuilderTest > shouldHandleMultipleHeader PASSED\nRunning test: Test shouldNotThrowNullPointerExceptionWhenHeaderConfigEmpty(io.odpf.firehose.sink.http.request.header.HeaderBuilderTest)\n\nio.odpf.firehose.sink.http.request.header.HeaderBuilderTest > shouldNotThrowNullPointerExceptionWhenHeaderConfigEmpty PASSED\nRunning test: Test shouldHaveExtraParameterizedHeaderIfParameterizedHeaderEnabled(io.odpf.firehose.sink.http.request.header.HeaderBuilderTest)\n\nio.odpf.firehose.sink.http.request.header.HeaderBuilderTest > shouldHaveExtraParameterizedHeaderIfParameterizedHeaderEnabled PASSED\nRunning test: Test shouldProcessMessagesIndividually(io.odpf.firehose.sink.http.request.types.ParameterizedHeaderRequestTest)\n\nio.odpf.firehose.sink.http.request.types.ParameterizedHeaderRequestTest > shouldProcessMessagesIndividually PASSED\nRunning test: Test shouldNotProcessTemplatesIfAbsent(io.odpf.firehose.sink.http.request.types.ParameterizedHeaderRequestTest)\n\nio.odpf.firehose.sink.http.request.types.ParameterizedHeaderRequestTest > shouldNotProcessTemplatesIfAbsent PASSED\nRunning test: Test shouldProcessForParametrizedHeaders(io.odpf.firehose.sink.http.request.types.ParameterizedHeaderRequestTest)\n\nio.odpf.firehose.sink.http.request.types.ParameterizedHeaderRequestTest > shouldProcessForParametrizedHeaders PASSED\nRunning test: Test shouldProcessTemplatesIfPresent(io.odpf.firehose.sink.http.request.types.ParameterizedHeaderRequestTest)\n\nio.odpf.firehose.sink.http.request.types.ParameterizedHeaderRequestTest > shouldProcessTemplatesIfPresent PASSED\nRunning test: Test shouldCheckForTemplateWhileBuilding(io.odpf.firehose.sink.http.request.types.ParameterizedHeaderRequestTest)\n\nio.odpf.firehose.sink.http.request.types.ParameterizedHeaderRequestTest > shouldCheckForTemplateWhileBuilding PASSED\nRunning test: Test shouldNotProcessIfParameterPlacedInQuery(io.odpf.firehose.sink.http.request.types.ParameterizedHeaderRequestTest)\n\nio.odpf.firehose.sink.http.request.types.ParameterizedHeaderRequestTest > shouldNotProcessIfParameterPlacedInQuery PASSED\nRunning test: Test shouldNotProcessIfParameterPlacementDisabled(io.odpf.firehose.sink.http.request.types.ParameterizedHeaderRequestTest)\n\nio.odpf.firehose.sink.http.request.types.ParameterizedHeaderRequestTest > shouldNotProcessIfParameterPlacementDisabled PASSED\nRunning test: Test shouldNotProcessTemplatesIfAbsent(io.odpf.firehose.sink.http.request.types.SimpleRequestTest)\n\nio.odpf.firehose.sink.http.request.types.SimpleRequestTest > shouldNotProcessTemplatesIfAbsent PASSED\nRunning test: Test shouldProcessBaseCase(io.odpf.firehose.sink.http.request.types.SimpleRequestTest)\n\nio.odpf.firehose.sink.http.request.types.SimpleRequestTest > shouldProcessBaseCase PASSED\nRunning test: Test shouldCheckTemplateAvailabilityForSettingRequestStrategy(io.odpf.firehose.sink.http.request.types.SimpleRequestTest)\n\nio.odpf.firehose.sink.http.request.types.SimpleRequestTest > shouldCheckTemplateAvailabilityForSettingRequestStrategy PASSED\nRunning test: Test shouldProcessMessagesInBatchIfTemplateDisabled(io.odpf.firehose.sink.http.request.types.SimpleRequestTest)\n\nio.odpf.firehose.sink.http.request.types.SimpleRequestTest > shouldProcessMessagesInBatchIfTemplateDisabled PASSED\nRunning test: Test shouldProcessTemplatesIfPresent(io.odpf.firehose.sink.http.request.types.SimpleRequestTest)\n\nio.odpf.firehose.sink.http.request.types.SimpleRequestTest > shouldProcessTemplatesIfPresent PASSED\nRunning test: Test shouldNotProcessForDyanamicURL(io.odpf.firehose.sink.http.request.types.SimpleRequestTest)\n\nio.odpf.firehose.sink.http.request.types.SimpleRequestTest > shouldNotProcessForDyanamicURL PASSED\nRunning test: Test shouldNotProcessIfParameterIsEnabled(io.odpf.firehose.sink.http.request.types.SimpleRequestTest)\n\nio.odpf.firehose.sink.http.request.types.SimpleRequestTest > shouldNotProcessIfParameterIsEnabled PASSED\nRunning test: Test shouldProcessMessagesIndividuallyIfTemplateEnabled(io.odpf.firehose.sink.http.request.types.SimpleRequestTest)\n\nio.odpf.firehose.sink.http.request.types.SimpleRequestTest > shouldProcessMessagesIndividuallyIfTemplateEnabled PASSED\nRunning test: Test shouldProcessMessagesIndividually(io.odpf.firehose.sink.http.request.types.DynamicUrlRequestTest)\n\nio.odpf.firehose.sink.http.request.types.DynamicUrlRequestTest > shouldProcessMessagesIndividually PASSED\nRunning test: Test shouldNotProcessTemplatesIfAbsent(io.odpf.firehose.sink.http.request.types.DynamicUrlRequestTest)\n\nio.odpf.firehose.sink.http.request.types.DynamicUrlRequestTest > shouldNotProcessTemplatesIfAbsent PASSED\nRunning test: Test shouldProcessForDynamicURI(io.odpf.firehose.sink.http.request.types.DynamicUrlRequestTest)\n\nio.odpf.firehose.sink.http.request.types.DynamicUrlRequestTest > shouldProcessForDynamicURI PASSED\nRunning test: Test shouldProcessTemplatesIfPresent(io.odpf.firehose.sink.http.request.types.DynamicUrlRequestTest)\n\nio.odpf.firehose.sink.http.request.types.DynamicUrlRequestTest > shouldProcessTemplatesIfPresent PASSED\nRunning test: Test shouldCheckForTemplateWhileBuilding(io.odpf.firehose.sink.http.request.types.DynamicUrlRequestTest)\n\nio.odpf.firehose.sink.http.request.types.DynamicUrlRequestTest > shouldCheckForTemplateWhileBuilding PASSED\nRunning test: Test shouldNotProcessForBaseCase(io.odpf.firehose.sink.http.request.types.DynamicUrlRequestTest)\n\nio.odpf.firehose.sink.http.request.types.DynamicUrlRequestTest > shouldNotProcessForBaseCase PASSED\nRunning test: Test shouldNotProcessIfParameterIsEnabled(io.odpf.firehose.sink.http.request.types.DynamicUrlRequestTest)\n\nio.odpf.firehose.sink.http.request.types.DynamicUrlRequestTest > shouldNotProcessIfParameterIsEnabled PASSED\nRunning test: Test shouldProcessMessagesIndividually(io.odpf.firehose.sink.http.request.types.ParameterizedUriRequestTest)\n\nio.odpf.firehose.sink.http.request.types.ParameterizedUriRequestTest > shouldProcessMessagesIndividually PASSED\nRunning test: Test shouldProcessForParametrizedQuery(io.odpf.firehose.sink.http.request.types.ParameterizedUriRequestTest)\n\nio.odpf.firehose.sink.http.request.types.ParameterizedUriRequestTest > shouldProcessForParametrizedQuery PASSED\nRunning test: Test shouldNotProcessTemplatesIfAbsent(io.odpf.firehose.sink.http.request.types.ParameterizedUriRequestTest)\n\nio.odpf.firehose.sink.http.request.types.ParameterizedUriRequestTest > shouldNotProcessTemplatesIfAbsent PASSED\nRunning test: Test shouldNotProcessIfParameterPlacedInHeader(io.odpf.firehose.sink.http.request.types.ParameterizedUriRequestTest)\n\nio.odpf.firehose.sink.http.request.types.ParameterizedUriRequestTest > shouldNotProcessIfParameterPlacedInHeader PASSED\nRunning test: Test shouldProcessTemplatesIfPresent(io.odpf.firehose.sink.http.request.types.ParameterizedUriRequestTest)\n\nio.odpf.firehose.sink.http.request.types.ParameterizedUriRequestTest > shouldProcessTemplatesIfPresent PASSED\nRunning test: Test shouldCheckForTemplateWhileBuilding(io.odpf.firehose.sink.http.request.types.ParameterizedUriRequestTest)\n\nio.odpf.firehose.sink.http.request.types.ParameterizedUriRequestTest > shouldCheckForTemplateWhileBuilding PASSED\nRunning test: Test shouldNotProcessIfParameterPlacementDisabled(io.odpf.firehose.sink.http.request.types.ParameterizedUriRequestTest)\n\nio.odpf.firehose.sink.http.request.types.ParameterizedUriRequestTest > shouldNotProcessIfParameterPlacementDisabled PASSED\nRunning test: Test shouldCloseStencilClient(io.odpf.firehose.sink.http.HttpSinkTest)\n\nio.odpf.firehose.sink.http.HttpSinkTest > shouldCloseStencilClient PASSED\nRunning test: Test shouldNotCaptureDroppedMessagesMetricsIfStatusCodeIs200(io.odpf.firehose.sink.http.HttpSinkTest)\n\nio.odpf.firehose.sink.http.HttpSinkTest > shouldNotCaptureDroppedMessagesMetricsIfStatusCodeIs200 PASSED\nRunning test: Test shouldNotCaptureDroppedMessagesMetricsIfStatusCodeIs201(io.odpf.firehose.sink.http.HttpSinkTest)\n\nio.odpf.firehose.sink.http.HttpSinkTest > shouldNotCaptureDroppedMessagesMetricsIfStatusCodeIs201 PASSED\nRunning test: Test shouldThrowNeedToRetryExceptionWhenResponseCodeIsGivenRange(io.odpf.firehose.sink.http.HttpSinkTest)\n\nio.odpf.firehose.sink.http.HttpSinkTest > shouldThrowNeedToRetryExceptionWhenResponseCodeIsGivenRange PASSED\nRunning test: Test shouldLogEntireRequestIfInStatusCodeRangeWithBatchRequestAndCaptureDroppedMessages(io.odpf.firehose.sink.http.HttpSinkTest)\n\nio.odpf.firehose.sink.http.HttpSinkTest > shouldLogEntireRequestIfInStatusCodeRangeWithBatchRequestAndCaptureDroppedMessages PASSED\nRunning test: Test shouldLogEntireRequestIfInStatusCodeRangeWithIndividualRequestAndCaptureDroppedMessages(io.odpf.firehose.sink.http.HttpSinkTest)\n\nio.odpf.firehose.sink.http.HttpSinkTest > shouldLogEntireRequestIfInStatusCodeRangeWithIndividualRequestAndCaptureDroppedMessages PASSED\nRunning test: Test shouldLogEntireRequestIfInStatusCodeRangeWithSingleListRequestBodyAndCaptureDroppedMessages(io.odpf.firehose.sink.http.HttpSinkTest)\n\nio.odpf.firehose.sink.http.HttpSinkTest > shouldLogEntireRequestIfInStatusCodeRangeWithSingleListRequestBodyAndCaptureDroppedMessages PASSED\nRunning test: Test shouldNotCaptureDroppedMessagesMetricsIfInStatusCodeRange(io.odpf.firehose.sink.http.HttpSinkTest)\n\nio.odpf.firehose.sink.http.HttpSinkTest > shouldNotCaptureDroppedMessagesMetricsIfInStatusCodeRange PASSED\nRunning test: Test shouldNotLogEntireRequestIfNotInStatusCodeRange(io.odpf.firehose.sink.http.HttpSinkTest)\n\nio.odpf.firehose.sink.http.HttpSinkTest > shouldNotLogEntireRequestIfNotInStatusCodeRange PASSED\nRunning test: Test shouldThrowNeedToRetryExceptionWhenResponseIsNull(io.odpf.firehose.sink.http.HttpSinkTest)\n\nio.odpf.firehose.sink.http.HttpSinkTest > shouldThrowNeedToRetryExceptionWhenResponseIsNull PASSED\nRunning test: Test shouldLogResponseBodyWhenDebugIsEnabledAndNonNullResponse(io.odpf.firehose.sink.http.HttpSinkTest)\n\nio.odpf.firehose.sink.http.HttpSinkTest > shouldLogResponseBodyWhenDebugIsEnabledAndNonNullResponse PASSED\nRunning test: Test shouldCallHttpClientWithProperRequest(io.odpf.firehose.sink.http.HttpSinkTest)\n\nio.odpf.firehose.sink.http.HttpSinkTest > shouldCallHttpClientWithProperRequest PASSED\nRunning test: Test shouldCatchURISyntaxExceptionAndThrowIOException(io.odpf.firehose.sink.http.HttpSinkTest)\n\nio.odpf.firehose.sink.http.HttpSinkTest > shouldCatchURISyntaxExceptionAndThrowIOException PASSED\nRunning test: Test shouldNotLogResponseBodyWhenDebugIsEnabledWithNullHttpResponseEntity(io.odpf.firehose.sink.http.HttpSinkTest)\n\nio.odpf.firehose.sink.http.HttpSinkTest > shouldNotLogResponseBodyWhenDebugIsEnabledWithNullHttpResponseEntity PASSED\nRunning test: Test shouldLogConnectionClosing(io.odpf.firehose.sink.http.HttpSinkTest)\n\nio.odpf.firehose.sink.http.HttpSinkTest > shouldLogConnectionClosing PASSED\nRunning test: Test shouldThrowNeedToRetryExceptionWhenResponseStatusCodeIsZero(io.odpf.firehose.sink.http.HttpSinkTest)\n\nio.odpf.firehose.sink.http.HttpSinkTest > shouldThrowNeedToRetryExceptionWhenResponseStatusCodeIsZero PASSED\nRunning test: Test shouldCaptureDroppedMessagesMetricsIfNotInStatusCodeRange(io.odpf.firehose.sink.http.HttpSinkTest)\n\nio.odpf.firehose.sink.http.HttpSinkTest > shouldCaptureDroppedMessagesMetricsIfNotInStatusCodeRange PASSED\nRunning test: Test shouldCaptureResponseStatusCount(io.odpf.firehose.sink.http.HttpSinkTest)\n\nio.odpf.firehose.sink.http.HttpSinkTest > shouldCaptureResponseStatusCount PASSED\nRunning test: Test shouldReturnTrueWhenExpireTimeIsLessThan60Sec(io.odpf.firehose.sink.http.auth.OAuth2AccessTokenTest)\n\nio.odpf.firehose.sink.http.auth.OAuth2AccessTokenTest > shouldReturnTrueWhenExpireTimeIsLessThan60Sec PASSED\nRunning test: Test shouldReturnExpirationTimeAsPassedInParamaters(io.odpf.firehose.sink.http.auth.OAuth2AccessTokenTest)\n\nio.odpf.firehose.sink.http.auth.OAuth2AccessTokenTest > shouldReturnExpirationTimeAsPassedInParamaters PASSED\nRunning test: Test shouldReturnFalseWhenExpireTimeIsMoreThan60Sec(io.odpf.firehose.sink.http.auth.OAuth2AccessTokenTest)\n\nio.odpf.firehose.sink.http.auth.OAuth2AccessTokenTest > shouldReturnFalseWhenExpireTimeIsMoreThan60Sec PASSED\nRunning test: Test shouldReturnTrueWhenExpireTimeIs60Sec(io.odpf.firehose.sink.http.auth.OAuth2AccessTokenTest)\n\nio.odpf.firehose.sink.http.auth.OAuth2AccessTokenTest > shouldReturnTrueWhenExpireTimeIs60Sec PASSED\nRunning test: Test shouldReturnDefaultExpirationTimeWhenNotPassedInParamaters(io.odpf.firehose.sink.http.auth.OAuth2AccessTokenTest)\n\nio.odpf.firehose.sink.http.auth.OAuth2AccessTokenTest > shouldReturnDefaultExpirationTimeWhenNotPassedInParamaters PASSED\nRunning test: Test shouldThrowOAuth2ExceptionIfResponseReturnedIsNon2XX(io.odpf.firehose.sink.http.auth.OAuth2ClientTest)\n\nio.odpf.firehose.sink.http.auth.OAuth2ClientTest > shouldThrowOAuth2ExceptionIfResponseReturnedIsNon2XX PASSED\nRunning test: Test shouldReturnOAuth2AccessTokenIfResponseReturnedIs200(io.odpf.firehose.sink.http.auth.OAuth2ClientTest)\n\nio.odpf.firehose.sink.http.auth.OAuth2ClientTest > shouldReturnOAuth2AccessTokenIfResponseReturnedIs200 PASSED\nRunning test: Test shouldReturnOAuth2AccessTokenIfResponseReturnedIs201(io.odpf.firehose.sink.http.auth.OAuth2ClientTest)\n\nio.odpf.firehose.sink.http.auth.OAuth2ClientTest > shouldReturnOAuth2AccessTokenIfResponseReturnedIs201 PASSED\nRunning test: Test shouldNotThrowExceptionWhenServerHasOAuthException(io.odpf.firehose.sink.http.auth.OAuth2CredentialTest)\n\nio.odpf.firehose.sink.http.auth.OAuth2CredentialTest > shouldNotThrowExceptionWhenServerHasOAuthException PASSED\nRunning test: Test shouldRequestTokenWhenTokenIsExpiring(io.odpf.firehose.sink.http.auth.OAuth2CredentialTest)\n\nio.odpf.firehose.sink.http.auth.OAuth2CredentialTest > shouldRequestTokenWhenTokenIsExpiring PASSED\nRunning test: Test shouldUseDefaultExpirationWhenAccessTokenIsIncomplete(io.odpf.firehose.sink.http.auth.OAuth2CredentialTest)\n\nio.odpf.firehose.sink.http.auth.OAuth2CredentialTest > shouldUseDefaultExpirationWhenAccessTokenIsIncomplete PASSED\nRunning test: Test shouldReuseTokenWhenTokenExist(io.odpf.firehose.sink.http.auth.OAuth2CredentialTest)\n\nio.odpf.firehose.sink.http.auth.OAuth2CredentialTest > shouldReuseTokenWhenTokenExist PASSED\nRunning test: Test shouldEmbedBearerToken(io.odpf.firehose.sink.http.auth.OAuth2CredentialTest)\n\nio.odpf.firehose.sink.http.auth.OAuth2CredentialTest > shouldEmbedBearerToken PASSED\nRunning test: Test shouldClearTokenWhenServerReturnedHTTP401(io.odpf.firehose.sink.http.auth.OAuth2CredentialTest)\n\nio.odpf.firehose.sink.http.auth.OAuth2CredentialTest > shouldClearTokenWhenServerReturnedHTTP401 PASSED\nRunning test: Test shouldNotThrowExceptionWhenServerHasOAuthTimeout(io.odpf.firehose.sink.http.auth.OAuth2CredentialTest)\n\nio.odpf.firehose.sink.http.auth.OAuth2CredentialTest > shouldNotThrowExceptionWhenServerHasOAuthTimeout PASSED\nRunning test: Test shouldThrowExceptionWhenServerHasJsonException(io.odpf.firehose.sink.http.auth.OAuth2CredentialTest)\n\nio.odpf.firehose.sink.http.auth.OAuth2CredentialTest > shouldThrowExceptionWhenServerHasJsonException PASSED\nRunning test: Test shouldRequestTokenWhenTokenIsExpired(io.odpf.firehose.sink.http.auth.OAuth2CredentialTest)\n\nio.odpf.firehose.sink.http.auth.OAuth2CredentialTest > shouldRequestTokenWhenTokenIsExpired PASSED\nRunning test: Test shouldThrowExceptionWhenServerHasJsonExceptionOkHttp(io.odpf.firehose.sink.http.auth.OAuth2CredentialTest)\n\nio.odpf.firehose.sink.http.auth.OAuth2CredentialTest > shouldThrowExceptionWhenServerHasJsonExceptionOkHttp PASSED\nRunning test: Test shouldNotEmbedAccessTokenIfGoAuthDisabled(io.odpf.firehose.sink.http.HttpSinkFactoryTest)\n\nio.odpf.firehose.sink.http.HttpSinkFactoryTest > shouldNotEmbedAccessTokenIfGoAuthDisabled PASSED\nRunning test: Test shouldEmbedAccessTokenIfGoAuthEnabled(io.odpf.firehose.sink.http.HttpSinkFactoryTest)\n\nio.odpf.firehose.sink.http.HttpSinkFactoryTest > shouldEmbedAccessTokenIfGoAuthEnabled PASSED\nRunning test: Test shouldReturnJsonSinkTypeFromUpperCaseInput(io.odpf.firehose.config.HttpSinkDataFormatTypeConverterTest)\n\nio.odpf.firehose.config.HttpSinkDataFormatTypeConverterTest > shouldReturnJsonSinkTypeFromUpperCaseInput PASSED\nRunning test: Test shouldReturnProtoSinkTypeFromInput(io.odpf.firehose.config.HttpSinkDataFormatTypeConverterTest)\n\nio.odpf.firehose.config.HttpSinkDataFormatTypeConverterTest > shouldReturnProtoSinkTypeFromInput PASSED\nRunning test: Test shouldReturnJsonSinkTypeFromMixedCaseInput(io.odpf.firehose.config.HttpSinkDataFormatTypeConverterTest)\n\nio.odpf.firehose.config.HttpSinkDataFormatTypeConverterTest > shouldReturnJsonSinkTypeFromMixedCaseInput PASSED\nRunning test: Test shouldReturnJsonSinkTypeFromLowerCaseInput(io.odpf.firehose.config.HttpSinkDataFormatTypeConverterTest)\n\nio.odpf.firehose.config.HttpSinkDataFormatTypeConverterTest > shouldReturnJsonSinkTypeFromLowerCaseInput PASSED\nRunning test: Test shouldThrowOnIllegalArgument(io.odpf.firehose.config.HttpSinkDataFormatTypeConverterTest)\n\nio.odpf.firehose.config.HttpSinkDataFormatTypeConverterTest > shouldThrowOnIllegalArgument PASSED\nRunning test: Test shouldConvertRangeToHashMap(io.odpf.firehose.config.RangeToHashMapConverterTest)\n\nio.odpf.firehose.config.RangeToHashMapConverterTest > shouldConvertRangeToHashMap PASSED\nRunning test: Test shouldConvertRangesToHashMap(io.odpf.firehose.config.RangeToHashMapConverterTest)\n\nio.odpf.firehose.config.RangeToHashMapConverterTest > shouldConvertRangesToHashMap PASSED\nRunning test: Test shouldParseConfigForDLQ(io.odpf.firehose.config.GCSConfigTest)\n\nio.odpf.firehose.config.GCSConfigTest > shouldParseConfigForDLQ PASSED\nRunning test: Test shouldParseConfigForSink(io.odpf.firehose.config.GCSConfigTest)\n\nio.odpf.firehose.config.GCSConfigTest > shouldParseConfigForSink PASSED\nRunning test: Test shouldParseConfigForDLQ(io.odpf.firehose.config.S3ConfigTest)\n\nio.odpf.firehose.config.S3ConfigTest > shouldParseConfigForDLQ PASSED\nRunning test: Test shouldParseConfigForSink(io.odpf.firehose.config.S3ConfigTest)\n\nio.odpf.firehose.config.S3ConfigTest > shouldParseConfigForSink PASSED\nRunning test: Test shouldConvertSchemaTypeWithLowerCase(io.odpf.firehose.config.converter.InputSchemaTypeConverterTest)\n\nio.odpf.firehose.config.converter.InputSchemaTypeConverterTest > shouldConvertSchemaTypeWithLowerCase PASSED\nRunning test: Test shouldConvertSchemaType(io.odpf.firehose.config.converter.InputSchemaTypeConverterTest)\n\nio.odpf.firehose.config.converter.InputSchemaTypeConverterTest > shouldConvertSchemaType PASSED\nRunning test: Test testConvertIfFetchHeadersValueEmpty(io.odpf.firehose.config.converter.SchemaRegistryHeadersConverterTest)\n\nio.odpf.firehose.config.converter.SchemaRegistryHeadersConverterTest > testConvertIfFetchHeadersValueEmpty PASSED\nRunning test: Test shouldReturnZeroIfPropertyNotMentioned(io.odpf.firehose.config.converter.SchemaRegistryHeadersConverterTest)\n\nio.odpf.firehose.config.converter.SchemaRegistryHeadersConverterTest > shouldReturnZeroIfPropertyNotMentioned PASSED\nRunning test: Test shouldConvertHeaderKeyValuesWithHeaderObject(io.odpf.firehose.config.converter.SchemaRegistryHeadersConverterTest)\n\nio.odpf.firehose.config.converter.SchemaRegistryHeadersConverterTest > shouldConvertHeaderKeyValuesWithHeaderObject PASSED\nRunning test: Test shouldConvertDoublyNestedJSONToNestedProperties(io.odpf.firehose.config.ProtoIndexToFieldMapConverterTest)\n\nio.odpf.firehose.config.ProtoIndexToFieldMapConverterTest > shouldConvertDoublyNestedJSONToNestedProperties PASSED\nRunning test: Test shouldNotProcessEmptyStringAsProperties(io.odpf.firehose.config.ProtoIndexToFieldMapConverterTest)\n\nio.odpf.firehose.config.ProtoIndexToFieldMapConverterTest > shouldNotProcessEmptyStringAsProperties PASSED\nRunning test: Test shouldConvertJSONConfigToProperties(io.odpf.firehose.config.ProtoIndexToFieldMapConverterTest)\n\nio.odpf.firehose.config.ProtoIndexToFieldMapConverterTest > shouldConvertJSONConfigToProperties PASSED\nRunning test: Test shouldValidateJsonConfigForDuplicates(io.odpf.firehose.config.ProtoIndexToFieldMapConverterTest)\n\nio.odpf.firehose.config.ProtoIndexToFieldMapConverterTest > shouldValidateJsonConfigForDuplicates PASSED\nRunning test: Test shouldNotProcessNullStringAsProperties(io.odpf.firehose.config.ProtoIndexToFieldMapConverterTest)\n\nio.odpf.firehose.config.ProtoIndexToFieldMapConverterTest > shouldNotProcessNullStringAsProperties PASSED\nRunning test: Test shouldConvertNestedJSONToNestedProperties(io.odpf.firehose.config.ProtoIndexToFieldMapConverterTest)\n\nio.odpf.firehose.config.ProtoIndexToFieldMapConverterTest > shouldConvertNestedJSONToNestedProperties PASSED\nRunning test: Test shouldValidateJsonConfigForDuplicatesInNestedJsons(io.odpf.firehose.config.ProtoIndexToFieldMapConverterTest)\n\nio.odpf.firehose.config.ProtoIndexToFieldMapConverterTest > shouldValidateJsonConfigForDuplicatesInNestedJsons PASSED\nRunning test: Test shouldFilterMessage(io.odpf.firehose.error.ErrorHandlerTest)\n\nio.odpf.firehose.error.ErrorHandlerTest > shouldFilterMessage PASSED\nRunning test: Test shouldFilterMessageIfErrorInfoIsNull(io.odpf.firehose.error.ErrorHandlerTest)\n\nio.odpf.firehose.error.ErrorHandlerTest > shouldFilterMessageIfErrorInfoIsNull PASSED\nRunning test: Test shouldSplitBasedOnType(io.odpf.firehose.error.ErrorHandlerTest)\n\nio.odpf.firehose.error.ErrorHandlerTest > shouldSplitBasedOnType PASSED\nRunning test: Test shouldReturnKafkaEnvVarsPositive(io.odpf.firehose.parser.KafkaEnvironmentVariablesTest)\n\nio.odpf.firehose.parser.KafkaEnvironmentVariablesTest > shouldReturnKafkaEnvVarsPositive PASSED\nRunning test: Test shouldReturnKafkaEnvVarsNegative(io.odpf.firehose.parser.KafkaEnvironmentVariablesTest)\n\nio.odpf.firehose.parser.KafkaEnvironmentVariablesTest > shouldReturnKafkaEnvVarsNegative PASSED\nRunning test: Test shouldReturnEmptyCollectionOnNullEnvVars(io.odpf.firehose.parser.KafkaEnvironmentVariablesTest)\n\nio.odpf.firehose.parser.KafkaEnvironmentVariablesTest > shouldReturnEmptyCollectionOnNullEnvVars PASSED\nRunning test: Test shouldReturnEmptyCollectionOnEmptyEnvVars(io.odpf.firehose.parser.KafkaEnvironmentVariablesTest)\n\nio.odpf.firehose.parser.KafkaEnvironmentVariablesTest > shouldReturnEmptyCollectionOnEmptyEnvVars PASSED\nRunning test: Test shouldFilterEsbMessages(io.odpf.firehose.filter.jexl.JexlFilterTest)\n\nio.odpf.firehose.filter.jexl.JexlFilterTest > shouldFilterEsbMessages PASSED\nRunning test: Test shouldThrowExceptionOnInvalidFilterExpression(io.odpf.firehose.filter.jexl.JexlFilterTest)\n\nio.odpf.firehose.filter.jexl.JexlFilterTest > shouldThrowExceptionOnInvalidFilterExpression PASSED\nRunning test: Test shouldLogFilterTypeIfFilterTypeIsNotNone(io.odpf.firehose.filter.jexl.JexlFilterTest)\n\nio.odpf.firehose.filter.jexl.JexlFilterTest > shouldLogFilterTypeIfFilterTypeIsNotNone PASSED\nRunning test: Test shouldNotFilterEsbMessagesForEmptyBooleanValues(io.odpf.firehose.filter.jexl.JexlFilterTest)\n\nio.odpf.firehose.filter.jexl.JexlFilterTest > shouldNotFilterEsbMessagesForEmptyBooleanValues PASSED\nRunning test: Test shouldLogNoFilterSelected(io.odpf.firehose.filter.NoOpFilterTest)\n\nio.odpf.firehose.filter.NoOpFilterTest > shouldLogNoFilterSelected PASSED\nRunning test: Test shouldReturnInputListOfMessagesForJsonMessageType(io.odpf.firehose.filter.NoOpFilterTest)\n\nio.odpf.firehose.filter.NoOpFilterTest > shouldReturnInputListOfMessagesForJsonMessageType PASSED\nRunning test: Test shouldReturnInputListOfMessagesForProtobufMessageType(io.odpf.firehose.filter.NoOpFilterTest)\n\nio.odpf.firehose.filter.NoOpFilterTest > shouldReturnInputListOfMessagesForProtobufMessageType PASSED\nRunning test: Test shouldNotThrowIllegalArgumentExceptionForValidFilterConfig(io.odpf.firehose.filter.json.JsonFilterUtilTest)\n\nio.odpf.firehose.filter.json.JsonFilterUtilTest > shouldNotThrowIllegalArgumentExceptionForValidFilterConfig PASSED\nRunning test: Test shouldThrowExceptionForNullProtoSchemaClassForProtobufMessageFormat(io.odpf.firehose.filter.json.JsonFilterUtilTest)\n\nio.odpf.firehose.filter.json.JsonFilterUtilTest > shouldThrowExceptionForNullProtoSchemaClassForProtobufMessageFormat PASSED\nRunning test: Test shouldLogFilterConfigsForInvalidConfiguration(io.odpf.firehose.filter.json.JsonFilterUtilTest)\n\nio.odpf.firehose.filter.json.JsonFilterUtilTest > shouldLogFilterConfigsForInvalidConfiguration PASSED\nRunning test: Test shouldThrowIllegalArgumentExceptionForNullMessageFormat(io.odpf.firehose.filter.json.JsonFilterUtilTest)\n\nio.odpf.firehose.filter.json.JsonFilterUtilTest > shouldThrowIllegalArgumentExceptionForNullMessageFormat PASSED\nRunning test: Test shouldLogFilterConfigsForValidConfiguration(io.odpf.firehose.filter.json.JsonFilterUtilTest)\n\nio.odpf.firehose.filter.json.JsonFilterUtilTest > shouldLogFilterConfigsForValidConfiguration PASSED\nRunning test: Test shouldThrowIllegalArgumentExceptionForNullJsonSchema(io.odpf.firehose.filter.json.JsonFilterUtilTest)\n\nio.odpf.firehose.filter.json.JsonFilterUtilTest > shouldThrowIllegalArgumentExceptionForNullJsonSchema PASSED\nRunning test: Test shouldThrowExceptionWhenJsonMessageInvalid(io.odpf.firehose.filter.json.JsonFilterTest)\n\nio.odpf.firehose.filter.json.JsonFilterTest > shouldThrowExceptionWhenJsonMessageInvalid PASSED\nRunning test: Test shouldLogCauseToFilterOutMessageForJsonMessageFormat(io.odpf.firehose.filter.json.JsonFilterTest)\n\nio.odpf.firehose.filter.json.JsonFilterTest > shouldLogCauseToFilterOutMessageForJsonMessageFormat PASSED\nRunning test: Test shouldNotFilterProtobufMessagesWhenEmptyJSONSchema(io.odpf.firehose.filter.json.JsonFilterTest)\n\nio.odpf.firehose.filter.json.JsonFilterTest > shouldNotFilterProtobufMessagesWhenEmptyJSONSchema PASSED\nRunning test: Test shouldFilterEsbMessagesForProtobufMessageType(io.odpf.firehose.filter.json.JsonFilterTest)\n\nio.odpf.firehose.filter.json.JsonFilterTest > shouldFilterEsbMessagesForProtobufMessageType PASSED\nRunning test: Test shouldNotFilterJsonMessagesWhenEmptyJSONSchema(io.odpf.firehose.filter.json.JsonFilterTest)\n\nio.odpf.firehose.filter.json.JsonFilterTest > shouldNotFilterJsonMessagesWhenEmptyJSONSchema PASSED\nRunning test: Test shouldNotFilterEsbMessagesForEmptyBooleanValuesForProtobufMessageType(io.odpf.firehose.filter.json.JsonFilterTest)\n\nio.odpf.firehose.filter.json.JsonFilterTest > shouldNotFilterEsbMessagesForEmptyBooleanValuesForProtobufMessageType PASSED\nRunning test: Test shouldLogCauseToFilterOutMessageForProtobufMessageFormat(io.odpf.firehose.filter.json.JsonFilterTest)\n\nio.odpf.firehose.filter.json.JsonFilterTest > shouldLogCauseToFilterOutMessageForProtobufMessageFormat PASSED\nRunning test: Test shouldThrowExceptionWhenProtobufMessageInvalid(io.odpf.firehose.filter.json.JsonFilterTest)\n\nio.odpf.firehose.filter.json.JsonFilterTest > shouldThrowExceptionWhenProtobufMessageInvalid PASSED\nRunning test: Test shouldThrowExceptionWhenProtoSchemaClassInvalid(io.odpf.firehose.filter.json.JsonFilterTest)\n\nio.odpf.firehose.filter.json.JsonFilterTest > shouldThrowExceptionWhenProtoSchemaClassInvalid PASSED\nRunning test: Test shouldFilterMessagesWithNestedFieldsForProtobufMessageType(io.odpf.firehose.filter.json.JsonFilterTest)\n\nio.odpf.firehose.filter.json.JsonFilterTest > shouldFilterMessagesWithNestedFieldsForProtobufMessageType PASSED\nRunning test: Test shouldFilterEsbMessagesForJsonMessageType(io.odpf.firehose.filter.json.JsonFilterTest)\n\nio.odpf.firehose.filter.json.JsonFilterTest > shouldFilterEsbMessagesForJsonMessageType PASSED\nRunning test: Test shouldCapturePartitionProcessTime(io.odpf.firehose.metrics.FirehoseInstrumentationTest)\n\nio.odpf.firehose.metrics.FirehoseInstrumentationTest > shouldCapturePartitionProcessTime PASSED\nRunning test: Test shouldCaptureLatencyAcrossFirehose(io.odpf.firehose.metrics.FirehoseInstrumentationTest)\n\nio.odpf.firehose.metrics.FirehoseInstrumentationTest > shouldCaptureLatencyAcrossFirehose PASSED\nRunning test: Test shouldCaptureGlobalMetrics(io.odpf.firehose.metrics.FirehoseInstrumentationTest)\n\nio.odpf.firehose.metrics.FirehoseInstrumentationTest > shouldCaptureGlobalMetrics PASSED\nRunning test: Test shouldReturnStartExecutionTime(io.odpf.firehose.metrics.FirehoseInstrumentationTest)\n\nio.odpf.firehose.metrics.FirehoseInstrumentationTest > shouldReturnStartExecutionTime PASSED\nRunning test: Test shouldClose(io.odpf.firehose.metrics.FirehoseInstrumentationTest)\n\nio.odpf.firehose.metrics.FirehoseInstrumentationTest > shouldClose PASSED\nRunning test: Test shouldLogStringTemplate(io.odpf.firehose.metrics.FirehoseInstrumentationTest)\n\nio.odpf.firehose.metrics.FirehoseInstrumentationTest > shouldLogStringTemplate PASSED\nRunning test: Test shouldCaptureFatalErrorWithStringTemplate(io.odpf.firehose.metrics.FirehoseInstrumentationTest)\n\nio.odpf.firehose.metrics.FirehoseInstrumentationTest > shouldCaptureFatalErrorWithStringTemplate PASSED\nRunning test: Test shouldLogDebugStringTemplate(io.odpf.firehose.metrics.FirehoseInstrumentationTest)\n\nio.odpf.firehose.metrics.FirehoseInstrumentationTest > shouldLogDebugStringTemplate PASSED\nRunning test: Test shouldSetStartExecutionTime(io.odpf.firehose.metrics.FirehoseInstrumentationTest)\n\nio.odpf.firehose.metrics.FirehoseInstrumentationTest > shouldSetStartExecutionTime PASSED\nRunning test: Test shouldCaptureLifetimeTillSink(io.odpf.firehose.metrics.FirehoseInstrumentationTest)\n\nio.odpf.firehose.metrics.FirehoseInstrumentationTest > shouldCaptureLifetimeTillSink PASSED\nRunning test: Test shouldCaptureNonFatalErrorWithStringTemplate(io.odpf.firehose.metrics.FirehoseInstrumentationTest)\n\nio.odpf.firehose.metrics.FirehoseInstrumentationTest > shouldCaptureNonFatalErrorWithStringTemplate PASSED\nRunning test: Test shouldCaptureNonFatalErrorWithStringMessage(io.odpf.firehose.metrics.FirehoseInstrumentationTest)\n\nio.odpf.firehose.metrics.FirehoseInstrumentationTest > shouldCaptureNonFatalErrorWithStringMessage PASSED\nRunning test: Test shouldIncrementCounter(io.odpf.firehose.metrics.FirehoseInstrumentationTest)\n\nio.odpf.firehose.metrics.FirehoseInstrumentationTest > shouldIncrementCounter PASSED\nRunning test: Test shouldCapturePulledMessageHistogram(io.odpf.firehose.metrics.FirehoseInstrumentationTest)\n\nio.odpf.firehose.metrics.FirehoseInstrumentationTest > shouldCapturePulledMessageHistogram PASSED\nRunning test: Test shouldCaptureBackoffSleepTime(io.odpf.firehose.metrics.FirehoseInstrumentationTest)\n\nio.odpf.firehose.metrics.FirehoseInstrumentationTest > shouldCaptureBackoffSleepTime PASSED\nRunning test: Test shouldLogString(io.odpf.firehose.metrics.FirehoseInstrumentationTest)\n\nio.odpf.firehose.metrics.FirehoseInstrumentationTest > shouldLogString PASSED\nRunning test: Test shouldCaptureFatalErrorWithStringMessage(io.odpf.firehose.metrics.FirehoseInstrumentationTest)\n\nio.odpf.firehose.metrics.FirehoseInstrumentationTest > shouldCaptureFatalErrorWithStringMessage PASSED\nRunning test: Test shouldIncrementCounterWithTags(io.odpf.firehose.metrics.FirehoseInstrumentationTest)\n\nio.odpf.firehose.metrics.FirehoseInstrumentationTest > shouldIncrementCounterWithTags PASSED\nRunning test: Test shouldLogWarnStringTemplate(io.odpf.firehose.metrics.FirehoseInstrumentationTest)\n\nio.odpf.firehose.metrics.FirehoseInstrumentationTest > shouldLogWarnStringTemplate PASSED\nRunning test: Test shouldLogErrorStringTemplate(io.odpf.firehose.metrics.FirehoseInstrumentationTest)\n\nio.odpf.firehose.metrics.FirehoseInstrumentationTest > shouldLogErrorStringTemplate PASSED\nRunning test: Test shouldCaptureFilteredMessageCount(io.odpf.firehose.metrics.FirehoseInstrumentationTest)\n\nio.odpf.firehose.metrics.FirehoseInstrumentationTest > shouldCaptureFilteredMessageCount PASSED\nRunning test: Test shouldCaptureCountWithTags(io.odpf.firehose.metrics.FirehoseInstrumentationTest)\n\nio.odpf.firehose.metrics.FirehoseInstrumentationTest > shouldCaptureCountWithTags PASSED\nRunning test: Test shouldReturnProperTimestamp(io.odpf.firehose.converter.ProtoTimeConverterTest)\n\nio.odpf.firehose.converter.ProtoTimeConverterTest > shouldReturnProperTimestamp PASSED\nRunning test: Test shouldReturnProperTimestampForOnlySeconds(io.odpf.firehose.converter.ProtoTimeConverterTest)\n\nio.odpf.firehose.converter.ProtoTimeConverterTest > shouldReturnProperTimestampForOnlySeconds PASSED\nRunning test: Test shouldExecuteTaskUntilStopped(io.odpf.firehose.launch.TaskTest)\n\nio.odpf.firehose.launch.TaskTest > shouldExecuteTaskUntilStopped SKIPPED\nRunning test: Test shouldExecuteTaskWithParallelism(io.odpf.firehose.launch.TaskTest)\n\nio.odpf.firehose.launch.TaskTest > shouldExecuteTaskWithParallelism PASSED\nRunning test: Test shouldReturnEmptyList(io.odpf.firehose.message.FirehoseMessageUtilsTest)\n\nio.odpf.firehose.message.FirehoseMessageUtilsTest > shouldReturnEmptyList PASSED\nRunning test: Test shouldConvertToOdpfMessage(io.odpf.firehose.message.FirehoseMessageUtilsTest)\n\nio.odpf.firehose.message.FirehoseMessageUtilsTest > shouldConvertToOdpfMessage PASSED\nRunning test: Test encodesKeyToBase64(io.odpf.firehose.message.MessageTest)\n\nio.odpf.firehose.message.MessageTest > encodesKeyToBase64 PASSED\nRunning test: Test nullKeyGetsEncoded(io.odpf.firehose.message.MessageTest)\n\nio.odpf.firehose.message.MessageTest > nullKeyGetsEncoded PASSED\nRunning test: Test shouldSetDefaultError(io.odpf.firehose.message.MessageTest)\n\nio.odpf.firehose.message.MessageTest > shouldSetDefaultError PASSED\nRunning test: Test emptyKeyGetsEncoded(io.odpf.firehose.message.MessageTest)\n\nio.odpf.firehose.message.MessageTest > emptyKeyGetsEncoded PASSED\nRunning test: Test encodesValueToBase64(io.odpf.firehose.message.MessageTest)\n\nio.odpf.firehose.message.MessageTest > encodesValueToBase64 PASSED\n\n> Task :jacocoTestCoverageVerification\n> Task :jacocoTestReport\n> Task :check\n> Task :build\n\nDeprecated Gradle features were used in this build, making it incompatible with Gradle 8.0.\n\nYou can use '--warning-mode all' to show the individual deprecation warnings and determine if they come from your own scripts or plugins.\n\nSee https://docs.gradle.org/7.2/userguide/command_line_interface.html#sec:command_line_warnings\n\nExecution optimizations have been disabled for 1 invalid unit(s) of work during this build to ensure correctness.\nPlease consult deprecation warnings for more details.\n\nBUILD SUCCESSFUL in 3m 29s\n16 actionable tasks: 16 executed\nRemoving intermediate container b78f704c2d56\n ---> e1c55d0424f0\nStep 6/12 : FROM openjdk:8-jre\n8-jre: Pulling from library/openjdk\n001c52e26ad5: Pulling fs layer\nd9d4b9b6e964: Pulling fs layer\n2068746827ec: Pulling fs layer\n8510da692cda: Pulling fs layer\nc34215579d03: Pulling fs layer\n73d77b4774a9: Pulling fs layer\n8510da692cda: Waiting\nc34215579d03: Waiting\nd9d4b9b6e964: Verifying Checksum\nd9d4b9b6e964: Download complete\n2068746827ec: Verifying Checksum\n2068746827ec: Download complete\n8510da692cda: Verifying Checksum\n8510da692cda: Download complete\n001c52e26ad5: Verifying Checksum\n001c52e26ad5: Download complete\nc34215579d03: Verifying Checksum\nc34215579d03: Download complete\n73d77b4774a9: Verifying Checksum\n73d77b4774a9: Download complete\n001c52e26ad5: Pull complete\nd9d4b9b6e964: Pull complete\n2068746827ec: Pull complete\n8510da692cda: Pull complete\nc34215579d03: Pull complete\n73d77b4774a9: Pull complete\nDigest: sha256:667a15e7bc533a90fb39ddb7e5bed63162ac3c13a97e6c698bf4f139f51b7d33\nStatus: Downloaded newer image for openjdk:8-jre\n ---> 0c14a0e20aa3\nStep 7/12 : COPY --from=GRADLE_BUILD ./build/libs/ /opt/firehose/bin\n ---> 38c2b4c2cc31\nStep 8/12 : COPY --from=GRADLE_BUILD ./jolokia-jvm-agent.jar /opt/firehose\n ---> c352f0508cc3\nStep 9/12 : COPY --from=GRADLE_BUILD ./src/main/resources/log4j.xml /opt/firehose/etc/log4j.xml\n ---> 95c9b53dcf67\nStep 10/12 : COPY --from=GRADLE_BUILD ./src/main/resources/logback.xml /opt/firehose/etc/logback.xml\n ---> ed633ad633e3\nStep 11/12 : WORKDIR /opt/firehose\n ---> Running in 64daeebc2cd4\nRemoving intermediate container 64daeebc2cd4\n ---> 0b92191552c0\nStep 12/12 : CMD [\"java\", \"-cp\", \"bin/*:/work-dir/*\", \"io.odpf.firehose.launch.Main\", \"-server\", \"-Dlogback.configurationFile=etc/firehose/logback.xml\", \"-Xloggc:/var/log/firehose\"]\n ---> Running in e5923290f562\nRemoving intermediate container e5923290f562\n ---> 2b30d8e78de8\nSuccessfully built 2b30d8e78de8\nSuccessfully tagged firehose:latest\n","stderr":"","imageSize":418902666},"repair":{"violations":[{"name":"curlUseFlagF","position":{"start":2,"end":2,"columnStart":4,"columnEnd":143}},{"name":"curlUseHttpsUrl","position":{"start":2,"end":2,"columnStart":4,"columnEnd":143}}],"repairedDockerfile":"FROM adoptopenjdk:8-jdk-openj9 AS GRADLE_BUILD\nRUN mkdir -p ./build/libs/\nRUN curl -f -L https://search.maven.org/remotecontent?filepath=org/jolokia/jolokia-jvm/1.6.2/jolokia-jvm-1.6.2-agent.jar -o ./jolokia-jvm-agent.jar\nCOPY ./ ./\nRUN ./gradlew build\n\nFROM openjdk:8-jre\nCOPY --from=GRADLE_BUILD ./build/libs/ /opt/firehose/bin\nCOPY --from=GRADLE_BUILD ./jolokia-jvm-agent.jar /opt/firehose\nCOPY --from=GRADLE_BUILD ./src/main/resources/log4j.xml /opt/firehose/etc/log4j.xml\nCOPY --from=GRADLE_BUILD ./src/main/resources/logback.xml /opt/firehose/etc/logback.xml\nWORKDIR /opt/firehose\nCMD [\"java\", \"-cp\", \"bin/*:/work-dir/*\", \"io.odpf.firehose.launch.Main\", \"-server\", \"-Dlogback.configurationFile=etc/firehose/logback.xml\", \"-Xloggc:/var/log/firehose\"]\n"},"repairedBuild":{"startTimestamp":1672091689736,"endTimestamp":1672091934204,"error":null,"stdout":"Sending build context to Docker daemon   18.7MB\r\r\nStep 1/12 : FROM adoptopenjdk:8-jdk-openj9 AS GRADLE_BUILD\n ---> 5d9196077960\nStep 2/12 : RUN mkdir -p ./build/libs/\n ---> Running in e6d4e66540d8\nRemoving intermediate container e6d4e66540d8\n ---> 1f3188c88e44\nStep 3/12 : RUN curl -f -L https://search.maven.org/remotecontent?filepath=org/jolokia/jolokia-jvm/1.6.2/jolokia-jvm-1.6.2-agent.jar -o ./jolokia-jvm-agent.jar\n ---> Running in 02710bd94a07\n\u001b[91m  % Total    % Received \u001b[0m\u001b[91m% Xferd  Average Speed  \u001b[0m\u001b[91m Time    Ti\u001b[0m\u001b[91mme     Tim\u001b[0m\u001b[91me  Curr\u001b[0m\u001b[91ment\n    \u001b[0m\u001b[91m   \u001b[0m\u001b[91m   \u001b[0m\u001b[91m      \u001b[0m\u001b[91m         \u001b[0m\u001b[91m   \u001b[0m\u001b[91m    \u001b[0m\u001b[91m Dl\u001b[0m\u001b[91moad\u001b[0m\u001b[91m  Upload \u001b[0m\u001b[91m  Total   Sp\u001b[0m\u001b[91ment  \u001b[0m\u001b[91m  Left  Spe\u001b[0m\u001b[91med\n\r  0  \u001b[0m\u001b[91m  \u001b[0m\u001b[91m 0    0    \u001b[0m\u001b[91m 0    0   \u001b[0m\u001b[91m  0  \u001b[0m\u001b[91m    0\u001b[0m\u001b[91m      0 --\u001b[0m\u001b[91m:--:-\u001b[0m\u001b[91m- --\u001b[0m\u001b[91m:--:-- --\u001b[0m\u001b[91m:--:-\u001b[0m\u001b[91m- \u001b[0m\u001b[91m  \u001b[0m\u001b[91m  \u001b[0m\u001b[91m0\u001b[0m\u001b[91m\r  0     0    0     0    0     0      0      0 --:--:-- --:--:-- --:--:--     \u001b[0m\u001b[91m0\u001b[0m\u001b[91m\r100   138  100   138    0     0    288     \u001b[0m\u001b[91m 0 --:--:-- --:-\u001b[0m\u001b[91m-:-- --:-\u001b[0m\u001b[91m-:-\u001b[0m\u001b[91m-   \u001b[0m\u001b[91m287\n\u001b[0m\u001b[91m\r100  454k  100  454k    0  \u001b[0m\u001b[91m   0   881k      0\u001b[0m\u001b[91m --:--:-- --\u001b[0m\u001b[91m:--:-- --:\u001b[0m\u001b[91m--:-\u001b[0m\u001b[91m-  \u001b[0m\u001b[91m881\u001b[0m\u001b[91mk\n\u001b[0mRemoving intermediate container 02710bd94a07\n ---> bb6f0bcbde97\nStep 4/12 : COPY ./ ./\n ---> c281573ee349\nStep 5/12 : RUN ./gradlew build\n ---> Running in e43a8e3e86bd\nDownloading https://services.gradle.org/distributions/gradle-7.2-all.zip\n..............10%...............20%...............30%...............40%...............50%...............60%...............70%...............80%...............90%...............100%\n\nWelcome to Gradle 7.2!\n\nHere are the highlights of this release:\n - Toolchain support for Scala\n - More cache hits when Java source files have platform-specific line endings\n - More resilient remote HTTP build cache behavior\n\nFor more details see https://docs.gradle.org/7.2/release-notes.html\n\nStarting a Gradle Daemon (subsequent builds will be faster)\n> Task :extractIncludeProto\n> Task :extractProto\n> Task :generateProto\n\n> Task :compileJava\n\u001b[91mNote: Some input files use or override a deprecated API.\n\u001b[0m\u001b[91mNote: Recompile with -Xlint:deprecation for details.\n\u001b[0m\u001b[91mNote: Some input files use unchecked or unsafe operations.\n\u001b[0m\u001b[91mNote: Recompile with -Xlint:unchecked for details.\n\u001b[0m\n> Task :processResources\n> Task :classes\n> Task :jar\n> Task :assemble\n> Task :checkstyleMain\n> Task :extractIncludeTestProto\n> Task :extractTestProto\n> Task :generateTestProto\n\n> Task :compileTestJava\n\u001b[91mNote: Some input files use or override a deprecated API.\nNote: Recompile with -Xlint:deprecation for details.\nNote: Some input files use unchecked or unsafe operations.\nNote: Recompile with -Xlint:unchecked for details.\n\u001b[0m\n> Task :processTestResources\nExecution optimizations have been disabled for task ':processTestResources' to ensure correctness due to the following reasons:\n  - Gradle detected a problem with the following location: '/src/test/resources'. Reason: Task ':processTestResources' uses this output of task ':generateProto' without declaring an explicit or implicit dependency. This can lead to incorrect results being produced, depending on what order the tasks are executed. Please refer to https://docs.gradle.org/7.2/userguide/validation_problems.html#implicit_dependency for more details about this problem.\n  - Gradle detected a problem with the following location: '/src/test/resources'. Reason: Task ':processTestResources' uses this output of task ':generateTestProto' without declaring an explicit or implicit dependency. This can lead to incorrect results being produced, depending on what order the tasks are executed. Please refer to https://docs.gradle.org/7.2/userguide/validation_problems.html#implicit_dependency for more details about this problem.\n\n> Task :testClasses\n> Task :checkstyleTest\n\n> Task :test\nRunning test: Test shouldThrowExceptionForInvalidProtoClass(io.odpf.firehose.proto.ProtoMessageTest)\n\nio.odpf.firehose.proto.ProtoMessageTest > shouldThrowExceptionForInvalidProtoClass PASSED\nRunning test: Test shouldThrowExceptionForCorruptedEsbMessages(io.odpf.firehose.proto.ProtoMessageTest)\n\nio.odpf.firehose.proto.ProtoMessageTest > shouldThrowExceptionForCorruptedEsbMessages PASSED\nRunning test: Test shouldGetFieldValueBasedOnIndex(io.odpf.firehose.proto.ProtoMessageTest)\n\nio.odpf.firehose.proto.ProtoMessageTest > shouldGetFieldValueBasedOnIndex PASSED\nRunning test: Test shouldThrowExceptionForUnknownClass(io.odpf.firehose.proto.ProtoMessageTest)\n\nio.odpf.firehose.proto.ProtoMessageTest > shouldThrowExceptionForUnknownClass PASSED\nRunning test: Test shouldReturnFalseWhenRootIsNull(io.odpf.firehose.proto.ProtoUtilTest)\n\nio.odpf.firehose.proto.ProtoUtilTest > shouldReturnFalseWhenRootIsNull PASSED\nRunning test: Test shouldReturnFalseWhenNoUnknownFieldsExist(io.odpf.firehose.proto.ProtoUtilTest)\n\nio.odpf.firehose.proto.ProtoUtilTest > shouldReturnFalseWhenNoUnknownFieldsExist PASSED\nRunning test: Test shouldReturnTrueWhenUnknownFieldsExistOnNestedChildFields(io.odpf.firehose.proto.ProtoUtilTest)\n\nio.odpf.firehose.proto.ProtoUtilTest > shouldReturnTrueWhenUnknownFieldsExistOnNestedChildFields PASSED\nRunning test: Test shouldReturnTrueWhenUnknownFieldsExistOnRootLevelFields(io.odpf.firehose.proto.ProtoUtilTest)\n\nio.odpf.firehose.proto.ProtoUtilTest > shouldReturnTrueWhenUnknownFieldsExistOnRootLevelFields PASSED\nRunning test: Test shouldThrowIOExceptionWhenMessageContainsConfiguredError(io.odpf.firehose.sinkdecorator.SinkWithFailHandlerTest)\n\nio.odpf.firehose.sinkdecorator.SinkWithFailHandlerTest > shouldThrowIOExceptionWhenMessageContainsConfiguredError PASSED\nRunning test: Test shouldNotThrowIOExceptionWhenConfigIsNotSet(io.odpf.firehose.sinkdecorator.SinkWithFailHandlerTest)\n\nio.odpf.firehose.sinkdecorator.SinkWithFailHandlerTest > shouldNotThrowIOExceptionWhenConfigIsNotSet PASSED\nRunning test: Test shouldRetryWriteMessagesToDlqUntilRetryMessagesEmpty(io.odpf.firehose.sinkdecorator.SinkWithDlqTest)\n\nio.odpf.firehose.sinkdecorator.SinkWithDlqTest > shouldRetryWriteMessagesToDlqUntilRetryMessagesEmpty PASSED\nRunning test: Test shouldNotThrowIOExceptionWhenFailOnMaxRetryAttemptDisabled(io.odpf.firehose.sinkdecorator.SinkWithDlqTest)\n\nio.odpf.firehose.sinkdecorator.SinkWithDlqTest > shouldNotThrowIOExceptionWhenFailOnMaxRetryAttemptDisabled PASSED\nRunning test: Test shouldWriteDlqMessagesWhenErrorTypesConfigured(io.odpf.firehose.sinkdecorator.SinkWithDlqTest)\n\nio.odpf.firehose.sinkdecorator.SinkWithDlqTest > shouldWriteDlqMessagesWhenErrorTypesConfigured PASSED\nRunning test: Test shouldThrowIOExceptionWhenExceedMaxRetryAttemptsButButHasFailedToBeDlqProcessedMessages(io.odpf.firehose.sinkdecorator.SinkWithDlqTest)\n\nio.odpf.firehose.sinkdecorator.SinkWithDlqTest > shouldThrowIOExceptionWhenExceedMaxRetryAttemptsButButHasFailedToBeDlqProcessedMessages PASSED\nRunning test: Test shouldNotRegisterAndCommitOffsetWhenNoMessagesIsProcessedByDLQ(io.odpf.firehose.sinkdecorator.SinkWithDlqTest)\n\nio.odpf.firehose.sinkdecorator.SinkWithDlqTest > shouldNotRegisterAndCommitOffsetWhenNoMessagesIsProcessedByDLQ PASSED\nRunning test: Test shouldInstrumentFailure(io.odpf.firehose.sinkdecorator.SinkWithDlqTest)\n\nio.odpf.firehose.sinkdecorator.SinkWithDlqTest > shouldInstrumentFailure PASSED\nRunning test: Test shouldCommitOffsetsOfDlqMessagesWhenSinkManageOffset(io.odpf.firehose.sinkdecorator.SinkWithDlqTest)\n\nio.odpf.firehose.sinkdecorator.SinkWithDlqTest > shouldCommitOffsetsOfDlqMessagesWhenSinkManageOffset PASSED\nRunning test: Test shouldWriteToDLQWriter(io.odpf.firehose.sinkdecorator.SinkWithDlqTest)\n\nio.odpf.firehose.sinkdecorator.SinkWithDlqTest > shouldWriteToDLQWriter PASSED\nRunning test: Test shouldNotWriteToDLQWhenDlqMessagesIsEmpty(io.odpf.firehose.sinkdecorator.SinkWithDlqTest)\n\nio.odpf.firehose.sinkdecorator.SinkWithDlqTest > shouldNotWriteToDLQWhenDlqMessagesIsEmpty PASSED\nRunning test: Test shouldThrowIOExceptionWhenWriterThrowIOException(io.odpf.firehose.sinkdecorator.SinkWithDlqTest)\n\nio.odpf.firehose.sinkdecorator.SinkWithDlqTest > shouldThrowIOExceptionWhenWriterThrowIOException PASSED\nRunning test: Test shouldBackoffExponentially(io.odpf.firehose.sinkdecorator.ExponentialBackOffProviderTest)\n\nio.odpf.firehose.sinkdecorator.ExponentialBackOffProviderTest > shouldBackoffExponentially PASSED\nRunning test: Test shouldRecordStatsForBackOffTime(io.odpf.firehose.sinkdecorator.ExponentialBackOffProviderTest)\n\nio.odpf.firehose.sinkdecorator.ExponentialBackOffProviderTest > shouldRecordStatsForBackOffTime PASSED\nRunning test: Test shouldBeWithinMaxBackoffTime(io.odpf.firehose.sinkdecorator.ExponentialBackOffProviderTest)\n\nio.odpf.firehose.sinkdecorator.ExponentialBackOffProviderTest > shouldBeWithinMaxBackoffTime PASSED\nRunning test: Test shouldSleepForBackOffTimeOnFirstRetry(io.odpf.firehose.sinkdecorator.ExponentialBackOffProviderTest)\n\nio.odpf.firehose.sinkdecorator.ExponentialBackOffProviderTest > shouldSleepForBackOffTimeOnFirstRetry PASSED\nRunning test: Test shouldIgnoreMessages(io.odpf.firehose.sinkdecorator.SinkFinalTest)\n\nio.odpf.firehose.sinkdecorator.SinkFinalTest > shouldIgnoreMessages PASSED\nRunning test: Test shouldRetryUntilSuccess(io.odpf.firehose.sinkdecorator.SinkWithRetryTest)\n\nio.odpf.firehose.sinkdecorator.SinkWithRetryTest > shouldRetryUntilSuccess PASSED\nRunning test: Test shouldThrowIOExceptionWhenExceedMaximumRetryAttempts(io.odpf.firehose.sinkdecorator.SinkWithRetryTest)\n\nio.odpf.firehose.sinkdecorator.SinkWithRetryTest > shouldThrowIOExceptionWhenExceedMaximumRetryAttempts PASSED\nRunning test: Test shouldReturnEmptyListIfSuperReturnsEmptyList(io.odpf.firehose.sinkdecorator.SinkWithRetryTest)\n\nio.odpf.firehose.sinkdecorator.SinkWithRetryTest > shouldReturnEmptyListIfSuperReturnsEmptyList PASSED\nRunning test: Test shouldRetryForNumberOfAttemptsAndSendEmptyMessageOnSuccess(io.odpf.firehose.sinkdecorator.SinkWithRetryTest)\n\nio.odpf.firehose.sinkdecorator.SinkWithRetryTest > shouldRetryForNumberOfAttemptsAndSendEmptyMessageOnSuccess PASSED\nRunning test: Test shouldLogRetriesMessagesForJsonInput(io.odpf.firehose.sinkdecorator.SinkWithRetryTest)\n\nio.odpf.firehose.sinkdecorator.SinkWithRetryTest > shouldLogRetriesMessagesForJsonInput PASSED\nRunning test: Test shouldLogRetriesMessages(io.odpf.firehose.sinkdecorator.SinkWithRetryTest)\n\nio.odpf.firehose.sinkdecorator.SinkWithRetryTest > shouldLogRetriesMessages PASSED\nRunning test: Test shouldRetryMessagesWhenErrorTypesConfigured(io.odpf.firehose.sinkdecorator.SinkWithRetryTest)\n\nio.odpf.firehose.sinkdecorator.SinkWithRetryTest > shouldRetryMessagesWhenErrorTypesConfigured PASSED\nRunning test: Test shouldAddInstrumentationForRetryFailures(io.odpf.firehose.sinkdecorator.SinkWithRetryTest)\n\nio.odpf.firehose.sinkdecorator.SinkWithRetryTest > shouldAddInstrumentationForRetryFailures PASSED\nRunning test: Test shouldRetryForNumberOfAttemptsIfSuperReturnsEsbMessages(io.odpf.firehose.sinkdecorator.SinkWithRetryTest)\n\nio.odpf.firehose.sinkdecorator.SinkWithRetryTest > shouldRetryForNumberOfAttemptsIfSuperReturnsEsbMessages PASSED\nRunning test: Test shouldAddInstrumentationForRetry(io.odpf.firehose.sinkdecorator.SinkWithRetryTest)\n\nio.odpf.firehose.sinkdecorator.SinkWithRetryTest > shouldAddInstrumentationForRetry PASSED\nRunning test: Test shouldAddOffsetsForFilteredMessages(io.odpf.firehose.consumer.FirehoseAsyncConsumerTest)\n\nio.odpf.firehose.consumer.FirehoseAsyncConsumerTest > shouldAddOffsetsForFilteredMessages PASSED\nRunning test: Test shouldThrowExceptionIfSinkTaskFails(io.odpf.firehose.consumer.FirehoseAsyncConsumerTest)\n\nio.odpf.firehose.consumer.FirehoseAsyncConsumerTest > shouldThrowExceptionIfSinkTaskFails PASSED\nRunning test: Test shouldCallSetCommittableForDoneFutures(io.odpf.firehose.consumer.FirehoseAsyncConsumerTest)\n\nio.odpf.firehose.consumer.FirehoseAsyncConsumerTest > shouldCallSetCommittableForDoneFutures PASSED\nRunning test: Test shouldPushMessagesInParallel(io.odpf.firehose.consumer.FirehoseAsyncConsumerTest)\n\nio.odpf.firehose.consumer.FirehoseAsyncConsumerTest > shouldPushMessagesInParallel PASSED\nRunning test: Test shouldPartitiondMessages(io.odpf.firehose.consumer.FirehoseFilterTest)\n\nio.odpf.firehose.consumer.FirehoseFilterTest > shouldPartitiondMessages PASSED\nRunning test: Test shouldReturnAllMessages(io.odpf.firehose.consumer.FirehoseFilterTest)\n\nio.odpf.firehose.consumer.FirehoseFilterTest > shouldReturnAllMessages PASSED\nRunning test: Test shouldCommitWithoutDelay(io.odpf.firehose.consumer.ConsumerAndOffsetManagerTest)\n\nio.odpf.firehose.consumer.ConsumerAndOffsetManagerTest > shouldCommitWithoutDelay PASSED\nRunning test: Test shouldCommitAfterDelay(io.odpf.firehose.consumer.ConsumerAndOffsetManagerTest)\n\nio.odpf.firehose.consumer.ConsumerAndOffsetManagerTest > shouldCommitAfterDelay PASSED\nRunning test: Test shouldCommitToKafka(io.odpf.firehose.consumer.ConsumerAndOffsetManagerTest)\n\nio.odpf.firehose.consumer.ConsumerAndOffsetManagerTest > shouldCommitToKafka PASSED\nRunning test: Test shouldCommitToKafkaWithSinkManagesOwnOffsets(io.odpf.firehose.consumer.ConsumerAndOffsetManagerTest)\n\nio.odpf.firehose.consumer.ConsumerAndOffsetManagerTest > shouldCommitToKafkaWithSinkManagesOwnOffsets PASSED\nRunning test: Test shouldCaptureNonFatalError(io.odpf.firehose.consumer.kafka.FirehoseKafkaConsumerTest)\n\nio.odpf.firehose.consumer.kafka.FirehoseKafkaConsumerTest > shouldCaptureNonFatalError PASSED\nRunning test: Test shouldCallAsyncCommitWithOffsets(io.odpf.firehose.consumer.kafka.FirehoseKafkaConsumerTest)\n\nio.odpf.firehose.consumer.kafka.FirehoseKafkaConsumerTest > shouldCallAsyncCommitWithOffsets PASSED\nRunning test: Test shouldrecordStatsFromEsbLog(io.odpf.firehose.consumer.kafka.FirehoseKafkaConsumerTest)\n\nio.odpf.firehose.consumer.kafka.FirehoseKafkaConsumerTest > shouldrecordStatsFromEsbLog PASSED\nRunning test: Test shouldCommitLatestOffsetsWithAsyncCommit(io.odpf.firehose.consumer.kafka.FirehoseKafkaConsumerTest)\n\nio.odpf.firehose.consumer.kafka.FirehoseKafkaConsumerTest > shouldCommitLatestOffsetsWithAsyncCommit PASSED\nRunning test: Test shouldAsyncCommit(io.odpf.firehose.consumer.kafka.FirehoseKafkaConsumerTest)\n\nio.odpf.firehose.consumer.kafka.FirehoseKafkaConsumerTest > shouldAsyncCommit PASSED\nRunning test: Test shouldCallCommit(io.odpf.firehose.consumer.kafka.FirehoseKafkaConsumerTest)\n\nio.odpf.firehose.consumer.kafka.FirehoseKafkaConsumerTest > shouldCallCommit PASSED\nRunning test: Test getsMessagesFromEsbLogWithHeadersIfKafkaHeadersAreSet(io.odpf.firehose.consumer.kafka.FirehoseKafkaConsumerTest)\n\nio.odpf.firehose.consumer.kafka.FirehoseKafkaConsumerTest > getsMessagesFromEsbLogWithHeadersIfKafkaHeadersAreSet PASSED\nRunning test: Test shouldCallCloseOnConsumer(io.odpf.firehose.consumer.kafka.FirehoseKafkaConsumerTest)\n\nio.odpf.firehose.consumer.kafka.FirehoseKafkaConsumerTest > shouldCallCloseOnConsumer PASSED\nRunning test: Test shouldCommitLatestOffsets(io.odpf.firehose.consumer.kafka.FirehoseKafkaConsumerTest)\n\nio.odpf.firehose.consumer.kafka.FirehoseKafkaConsumerTest > shouldCommitLatestOffsets PASSED\nRunning test: Test shouldSuppressExceptionOnClose(io.odpf.firehose.consumer.kafka.FirehoseKafkaConsumerTest)\n\nio.odpf.firehose.consumer.kafka.FirehoseKafkaConsumerTest > shouldSuppressExceptionOnClose PASSED\nRunning test: Test getsMessagesFromEsbLog(io.odpf.firehose.consumer.kafka.FirehoseKafkaConsumerTest)\n\nio.odpf.firehose.consumer.kafka.FirehoseKafkaConsumerTest > getsMessagesFromEsbLog PASSED\nRunning test: Test shouldAddMultipleTopicPartitions(io.odpf.firehose.consumer.kafka.OffsetManagerTest)\n\nio.odpf.firehose.consumer.kafka.OffsetManagerTest > shouldAddMultipleTopicPartitions PASSED\nRunning test: Test shouldCompactAndFetch(io.odpf.firehose.consumer.kafka.OffsetManagerTest)\n\nio.odpf.firehose.consumer.kafka.OffsetManagerTest > shouldCompactAndFetch PASSED\nRunning test: Test shouldAddMultipleBatches(io.odpf.firehose.consumer.kafka.OffsetManagerTest)\n\nio.odpf.firehose.consumer.kafka.OffsetManagerTest > shouldAddMultipleBatches PASSED\nRunning test: Test testCommitBatch(io.odpf.firehose.consumer.kafka.OffsetManagerTest)\n\nio.odpf.firehose.consumer.kafka.OffsetManagerTest > testCommitBatch PASSED\nRunning test: Test shouldAddOffsetToBatch(io.odpf.firehose.consumer.kafka.OffsetManagerTest)\n\nio.odpf.firehose.consumer.kafka.OffsetManagerTest > shouldAddOffsetToBatch PASSED\nRunning test: Test shouldReturnCommittableOffset(io.odpf.firehose.consumer.kafka.OffsetManagerTest)\n\nio.odpf.firehose.consumer.kafka.OffsetManagerTest > shouldReturnCommittableOffset PASSED\nRunning test: Test shouldCallTracerWithTheSpan(io.odpf.firehose.consumer.FirehoseSyncConsumerTest)\n\nio.odpf.firehose.consumer.FirehoseSyncConsumerTest > shouldCallTracerWithTheSpan PASSED\nRunning test: Test shouldProcessPartitions(io.odpf.firehose.consumer.FirehoseSyncConsumerTest)\n\nio.odpf.firehose.consumer.FirehoseSyncConsumerTest > shouldProcessPartitions PASSED\nRunning test: Test shouldProcessEmptyPartitions(io.odpf.firehose.consumer.FirehoseSyncConsumerTest)\n\nio.odpf.firehose.consumer.FirehoseSyncConsumerTest > shouldProcessEmptyPartitions PASSED\nRunning test: Test shouldAddOffsetsForInvalidMessages(io.odpf.firehose.consumer.FirehoseSyncConsumerTest)\n\nio.odpf.firehose.consumer.FirehoseSyncConsumerTest > shouldAddOffsetsForInvalidMessages PASSED\nRunning test: Test shouldCloseConsumerIfConsumerIsNotNull(io.odpf.firehose.consumer.FirehoseSyncConsumerTest)\n\nio.odpf.firehose.consumer.FirehoseSyncConsumerTest > shouldCloseConsumerIfConsumerIsNotNull PASSED\nRunning test: Test shouldNotCloseConsumerIfConsumerIsNull(io.odpf.firehose.consumer.FirehoseSyncConsumerTest)\n\nio.odpf.firehose.consumer.FirehoseSyncConsumerTest > shouldNotCloseConsumerIfConsumerIsNull PASSED\nRunning test: Test shouldSendNoOfMessagesReceivedCount(io.odpf.firehose.consumer.FirehoseSyncConsumerTest)\n\nio.odpf.firehose.consumer.FirehoseSyncConsumerTest > shouldSendNoOfMessagesReceivedCount PASSED\nRunning test: Test shouldProperlySerializeMessageToTemplateWithAsItIs(io.odpf.firehose.serializer.MessageToTemplatizedJsonTest)\n\nio.odpf.firehose.serializer.MessageToTemplatizedJsonTest > shouldProperlySerializeMessageToTemplateWithAsItIs PASSED\nRunning test: Test shouldFailForNonJsonTemplate(io.odpf.firehose.serializer.MessageToTemplatizedJsonTest)\n\nio.odpf.firehose.serializer.MessageToTemplatizedJsonTest > shouldFailForNonJsonTemplate PASSED\nRunning test: Test shouldDoRegexMatchingToReplaceThingsFromProtobuf(io.odpf.firehose.serializer.MessageToTemplatizedJsonTest)\n\nio.odpf.firehose.serializer.MessageToTemplatizedJsonTest > shouldDoRegexMatchingToReplaceThingsFromProtobuf PASSED\nRunning test: Test shouldThrowIfNoPathsFoundInTheProto(io.odpf.firehose.serializer.MessageToTemplatizedJsonTest)\n\nio.odpf.firehose.serializer.MessageToTemplatizedJsonTest > shouldThrowIfNoPathsFoundInTheProto PASSED\nRunning test: Test shouldLogPaths(io.odpf.firehose.serializer.MessageToTemplatizedJsonTest)\n\nio.odpf.firehose.serializer.MessageToTemplatizedJsonTest > shouldLogPaths PASSED\nRunning test: Test shouldProperlySerializeMessageToTemplateWithSingleUnknownField(io.odpf.firehose.serializer.MessageToTemplatizedJsonTest)\n\nio.odpf.firehose.serializer.MessageToTemplatizedJsonTest > shouldProperlySerializeMessageToTemplateWithSingleUnknownField PASSED\nRunning test: Test shouldSerializeWhenKeyIsEmptyWithTimestampsAsSimpleDateFormatWhenFlagIsEnabled(io.odpf.firehose.serializer.MessageToJsonTest)\n\nio.odpf.firehose.serializer.MessageToJsonTest > shouldSerializeWhenKeyIsEmptyWithTimestampsAsSimpleDateFormatWhenFlagIsEnabled PASSED\nRunning test: Test shouldWrappedSerializedJsonInArrayWithTimestampsAsSimpleDateFormatWhenFlagsAreEnabled(io.odpf.firehose.serializer.MessageToJsonTest)\n\nio.odpf.firehose.serializer.MessageToJsonTest > shouldWrappedSerializedJsonInArrayWithTimestampsAsSimpleDateFormatWhenFlagsAreEnabled PASSED\nRunning test: Test shouldProperlySerializeEsbMessage(io.odpf.firehose.serializer.MessageToJsonTest)\n\nio.odpf.firehose.serializer.MessageToJsonTest > shouldProperlySerializeEsbMessage PASSED\nRunning test: Test shouldSerializeWhenKeyIsEmptyWithTimestampsAsISOFormatWhenFlagIsDisabled(io.odpf.firehose.serializer.MessageToJsonTest)\n\nio.odpf.firehose.serializer.MessageToJsonTest > shouldSerializeWhenKeyIsEmptyWithTimestampsAsISOFormatWhenFlagIsDisabled PASSED\nRunning test: Test shouldSerializeWhenKeyIsMissing(io.odpf.firehose.serializer.MessageToJsonTest)\n\nio.odpf.firehose.serializer.MessageToJsonTest > shouldSerializeWhenKeyIsMissing PASSED\nRunning test: Test shouldReturnTheTimestampFieldsInISOFormatIfSimpleDateFormatIsDisabled(io.odpf.firehose.serializer.MessageToJsonTest)\n\nio.odpf.firehose.serializer.MessageToJsonTest > shouldReturnTheTimestampFieldsInISOFormatIfSimpleDateFormatIsDisabled PASSED\nRunning test: Test shouldWrapProtoByteInsideJson(io.odpf.firehose.serializer.JsonWrappedProtoByteTest)\n\nio.odpf.firehose.serializer.JsonWrappedProtoByteTest > shouldWrapProtoByteInsideJson PASSED\nRunning test: Test shouldCreateSpanWhenTheHeadersIsEmptyAndTracingIsEnabled(io.odpf.firehose.tracer.SinkTracerTest)\n\nio.odpf.firehose.tracer.SinkTracerTest > shouldCreateSpanWhenTheHeadersIsEmptyAndTracingIsEnabled PASSED\nRunning test: Test shouldCloseTheSpan(io.odpf.firehose.tracer.SinkTracerTest)\n\nio.odpf.firehose.tracer.SinkTracerTest > shouldCloseTheSpan PASSED\nRunning test: Test shouldNotCreateSpanWhenTheHeadersIsEmptyAndTracingIsDisabled(io.odpf.firehose.tracer.SinkTracerTest)\n\nio.odpf.firehose.tracer.SinkTracerTest > shouldNotCreateSpanWhenTheHeadersIsEmptyAndTracingIsDisabled PASSED\nRunning test: Test shouldWriteMessagesWithoutErrorInfoToObjectStorage(io.odpf.firehose.sink.dlq.blobstorage.BlobStorageDlqWriterTest)\n\nio.odpf.firehose.sink.dlq.blobstorage.BlobStorageDlqWriterTest > shouldWriteMessagesWithoutErrorInfoToObjectStorage PASSED\nRunning test: Test shouldThrowIOExceptionWhenWriteFileThrowIOException(io.odpf.firehose.sink.dlq.blobstorage.BlobStorageDlqWriterTest)\n\nio.odpf.firehose.sink.dlq.blobstorage.BlobStorageDlqWriterTest > shouldThrowIOExceptionWhenWriteFileThrowIOException PASSED\nRunning test: Test shouldWriteMessageErrorTypesToObjectStorage(io.odpf.firehose.sink.dlq.blobstorage.BlobStorageDlqWriterTest)\n\nio.odpf.firehose.sink.dlq.blobstorage.BlobStorageDlqWriterTest > shouldWriteMessageErrorTypesToObjectStorage PASSED\nRunning test: Test shouldWriteMessagesToLog(io.odpf.firehose.sink.dlq.LogDlqWriterTest)\n\nio.odpf.firehose.sink.dlq.LogDlqWriterTest > shouldWriteMessagesToLog PASSED\nRunning test: Test shouldWriteMessagesToLogWhenValueIsNull(io.odpf.firehose.sink.dlq.LogDlqWriterTest)\n\nio.odpf.firehose.sink.dlq.LogDlqWriterTest > shouldWriteMessagesToLogWhenValueIsNull PASSED\nRunning test: Test shouldWriteMessagesToLogWhenErrorInfoIsNull(io.odpf.firehose.sink.dlq.LogDlqWriterTest)\n\nio.odpf.firehose.sink.dlq.LogDlqWriterTest > shouldWriteMessagesToLogWhenErrorInfoIsNull PASSED\nRunning test: Test shouldWriteMessagesToLogWhenKeyIsNull(io.odpf.firehose.sink.dlq.LogDlqWriterTest)\n\nio.odpf.firehose.sink.dlq.LogDlqWriterTest > shouldWriteMessagesToLogWhenKeyIsNull PASSED\nRunning test: Test shouldWriteMessagesToLogWhenErrorInfoExceptionIsNull(io.odpf.firehose.sink.dlq.LogDlqWriterTest)\n\nio.odpf.firehose.sink.dlq.LogDlqWriterTest > shouldWriteMessagesToLogWhenErrorInfoExceptionIsNull PASSED\nRunning test: Test shouldReturnFailedMessagesWhenExceptionThrown(io.odpf.firehose.sink.dlq.KafkaDlqWriterTest)\n\nio.odpf.firehose.sink.dlq.KafkaDlqWriterTest > shouldReturnFailedMessagesWhenExceptionThrown PASSED\nRunning test: Test shouldReturnEmptyListWhenWriteEmptyMessages(io.odpf.firehose.sink.dlq.KafkaDlqWriterTest)\n\nio.odpf.firehose.sink.dlq.KafkaDlqWriterTest > shouldReturnEmptyListWhenWriteEmptyMessages PASSED\nRunning test: Test shouldSendWithCorrectArgumentsIfHeadersAreSet(io.odpf.firehose.sink.dlq.KafkaDlqWriterTest)\n\nio.odpf.firehose.sink.dlq.KafkaDlqWriterTest > shouldSendWithCorrectArgumentsIfHeadersAreSet PASSED\nRunning test: Test shouldRecordMessagesToBeSendToKafkaRetryQueue(io.odpf.firehose.sink.dlq.KafkaDlqWriterTest)\n\nio.odpf.firehose.sink.dlq.KafkaDlqWriterTest > shouldRecordMessagesToBeSendToKafkaRetryQueue PASSED\nRunning test: Test shouldSendWithCorrectArgumentsIfHeadersAreNotSet(io.odpf.firehose.sink.dlq.KafkaDlqWriterTest)\n\nio.odpf.firehose.sink.dlq.KafkaDlqWriterTest > shouldSendWithCorrectArgumentsIfHeadersAreNotSet PASSED\nRunning test: Test shouldWriteToKafkaProducer(io.odpf.firehose.sink.dlq.KafkaDlqWriterTest)\n\nio.odpf.firehose.sink.dlq.KafkaDlqWriterTest > shouldWriteToKafkaProducer PASSED\nRunning test: Test shouldThrowExceptionWhenCreateMongoClientWithNullUsername(io.odpf.firehose.sink.mongodb.MongoSinkFactoryTest)\n\nio.odpf.firehose.sink.mongodb.MongoSinkFactoryTest > shouldThrowExceptionWhenCreateMongoClientWithNullUsername PASSED\nRunning test: Test shouldCreateMongoClientWithNoAuthentication(io.odpf.firehose.sink.mongodb.MongoSinkFactoryTest)\n\nio.odpf.firehose.sink.mongodb.MongoSinkFactoryTest > shouldCreateMongoClientWithNoAuthentication PASSED\nRunning test: Test shouldCreateMongoClientWithValidAuthentication(io.odpf.firehose.sink.mongodb.MongoSinkFactoryTest)\n\nio.odpf.firehose.sink.mongodb.MongoSinkFactoryTest > shouldCreateMongoClientWithValidAuthentication PASSED\nRunning test: Test shouldThrowExceptionWhenCreateMongoClientWithNullPassword(io.odpf.firehose.sink.mongodb.MongoSinkFactoryTest)\n\nio.odpf.firehose.sink.mongodb.MongoSinkFactoryTest > shouldThrowExceptionWhenCreateMongoClientWithNullPassword PASSED\nRunning test: Test shouldThrowExceptionWhenCreateMongoClientWithNullAuthDB(io.odpf.firehose.sink.mongodb.MongoSinkFactoryTest)\n\nio.odpf.firehose.sink.mongodb.MongoSinkFactoryTest > shouldThrowExceptionWhenCreateMongoClientWithNullAuthDB PASSED\nRunning test: Test shouldReturnReplaceOneModelForJsonMessageType(io.odpf.firehose.sink.mongodb.request.MongoUpsertRequestHandlerTest)\n\nio.odpf.firehose.sink.mongodb.request.MongoUpsertRequestHandlerTest > shouldReturnReplaceOneModelForJsonMessageType PASSED\nRunning test: Test shouldThrowExceptionForInvalidKey(io.odpf.firehose.sink.mongodb.request.MongoUpsertRequestHandlerTest)\n\nio.odpf.firehose.sink.mongodb.request.MongoUpsertRequestHandlerTest > shouldThrowExceptionForInvalidKey PASSED\nRunning test: Test shouldReturnInsertOneModelForNullPrimaryKey(io.odpf.firehose.sink.mongodb.request.MongoUpsertRequestHandlerTest)\n\nio.odpf.firehose.sink.mongodb.request.MongoUpsertRequestHandlerTest > shouldReturnInsertOneModelForNullPrimaryKey PASSED\nRunning test: Test shouldReturnReplaceOneModelForProtoMessageType(io.odpf.firehose.sink.mongodb.request.MongoUpsertRequestHandlerTest)\n\nio.odpf.firehose.sink.mongodb.request.MongoUpsertRequestHandlerTest > shouldReturnReplaceOneModelForProtoMessageType PASSED\nRunning test: Test shouldReturnModelWithCorrectPayloadForProtoMessageType(io.odpf.firehose.sink.mongodb.request.MongoUpsertRequestHandlerTest)\n\nio.odpf.firehose.sink.mongodb.request.MongoUpsertRequestHandlerTest > shouldReturnModelWithCorrectPayloadForProtoMessageType PASSED\nRunning test: Test shouldReturnReplaceOneModelWithCorrectPayloadForJsonMessageType(io.odpf.firehose.sink.mongodb.request.MongoUpsertRequestHandlerTest)\n\nio.odpf.firehose.sink.mongodb.request.MongoUpsertRequestHandlerTest > shouldReturnReplaceOneModelWithCorrectPayloadForJsonMessageType PASSED\nRunning test: Test shouldReturnTrueForUpsertMode(io.odpf.firehose.sink.mongodb.request.MongoUpsertRequestHandlerTest)\n\nio.odpf.firehose.sink.mongodb.request.MongoUpsertRequestHandlerTest > shouldReturnTrueForUpsertMode PASSED\nRunning test: Test shouldThrowJSONParseExceptionForInvalidJson(io.odpf.firehose.sink.mongodb.request.MongoUpsertRequestHandlerTest)\n\nio.odpf.firehose.sink.mongodb.request.MongoUpsertRequestHandlerTest > shouldThrowJSONParseExceptionForInvalidJson PASSED\nRunning test: Test shouldReturnFalseForUpdateOnlyMode(io.odpf.firehose.sink.mongodb.request.MongoUpsertRequestHandlerTest)\n\nio.odpf.firehose.sink.mongodb.request.MongoUpsertRequestHandlerTest > shouldReturnFalseForUpdateOnlyMode PASSED\nRunning test: Test shouldReturnInsertOneModelWithCorrectPayloadForJsonMessageType(io.odpf.firehose.sink.mongodb.request.MongoUpsertRequestHandlerTest)\n\nio.odpf.firehose.sink.mongodb.request.MongoUpsertRequestHandlerTest > shouldReturnInsertOneModelWithCorrectPayloadForJsonMessageType PASSED\nRunning test: Test shouldReturnReplaceOneModelForJsonMessageType(io.odpf.firehose.sink.mongodb.request.MongoUpdateRequestHandlerTest)\n\nio.odpf.firehose.sink.mongodb.request.MongoUpdateRequestHandlerTest > shouldReturnReplaceOneModelForJsonMessageType PASSED\nRunning test: Test shouldThrowExceptionForInvalidKey(io.odpf.firehose.sink.mongodb.request.MongoUpdateRequestHandlerTest)\n\nio.odpf.firehose.sink.mongodb.request.MongoUpdateRequestHandlerTest > shouldThrowExceptionForInvalidKey PASSED\nRunning test: Test shouldReturnReplaceOneModelForProtoMessageType(io.odpf.firehose.sink.mongodb.request.MongoUpdateRequestHandlerTest)\n\nio.odpf.firehose.sink.mongodb.request.MongoUpdateRequestHandlerTest > shouldReturnReplaceOneModelForProtoMessageType PASSED\nRunning test: Test shouldReturnTrueForUpdateOnlyMode(io.odpf.firehose.sink.mongodb.request.MongoUpdateRequestHandlerTest)\n\nio.odpf.firehose.sink.mongodb.request.MongoUpdateRequestHandlerTest > shouldReturnTrueForUpdateOnlyMode PASSED\nRunning test: Test shouldReturnModelWithCorrectPayloadForProtoMessageType(io.odpf.firehose.sink.mongodb.request.MongoUpdateRequestHandlerTest)\n\nio.odpf.firehose.sink.mongodb.request.MongoUpdateRequestHandlerTest > shouldReturnModelWithCorrectPayloadForProtoMessageType PASSED\nRunning test: Test shouldReturnFalseForInsertOrUpdateMode(io.odpf.firehose.sink.mongodb.request.MongoUpdateRequestHandlerTest)\n\nio.odpf.firehose.sink.mongodb.request.MongoUpdateRequestHandlerTest > shouldReturnFalseForInsertOrUpdateMode PASSED\nRunning test: Test shouldThrowJSONParseExceptionForInvalidJson(io.odpf.firehose.sink.mongodb.request.MongoUpdateRequestHandlerTest)\n\nio.odpf.firehose.sink.mongodb.request.MongoUpdateRequestHandlerTest > shouldThrowJSONParseExceptionForInvalidJson PASSED\nRunning test: Test shouldReturnModelWithCorrectPayloadForJsonMessageType(io.odpf.firehose.sink.mongodb.request.MongoUpdateRequestHandlerTest)\n\nio.odpf.firehose.sink.mongodb.request.MongoUpdateRequestHandlerTest > shouldReturnModelWithCorrectPayloadForJsonMessageType PASSED\nRunning test: Test shouldThrowNullPointerExceptionForNullPrimaryKey(io.odpf.firehose.sink.mongodb.request.MongoUpdateRequestHandlerTest)\n\nio.odpf.firehose.sink.mongodb.request.MongoUpdateRequestHandlerTest > shouldThrowNullPointerExceptionForNullPrimaryKey PASSED\nRunning test: Test shouldReturnMongoRequestHandler(io.odpf.firehose.sink.mongodb.request.MongoRequestHandlerFactoryTest)\n\nio.odpf.firehose.sink.mongodb.request.MongoRequestHandlerFactoryTest > shouldReturnMongoRequestHandler PASSED\nRunning test: Test shouldReturnUpsertRequestHandler(io.odpf.firehose.sink.mongodb.request.MongoRequestHandlerFactoryTest)\n\nio.odpf.firehose.sink.mongodb.request.MongoRequestHandlerFactoryTest > shouldReturnUpsertRequestHandler PASSED\nRunning test: Test shouldThrowExceptionWhenCreateUpdateRequestHandlerWhenPrimaryKeyNotSpecified(io.odpf.firehose.sink.mongodb.request.MongoRequestHandlerFactoryTest)\n\nio.odpf.firehose.sink.mongodb.request.MongoRequestHandlerFactoryTest > shouldThrowExceptionWhenCreateUpdateRequestHandlerWhenPrimaryKeyNotSpecified PASSED\nRunning test: Test shouldCreateUpsertRequestHandlerWhenPrimaryKeyNotSpecified(io.odpf.firehose.sink.mongodb.request.MongoRequestHandlerFactoryTest)\n\nio.odpf.firehose.sink.mongodb.request.MongoRequestHandlerFactoryTest > shouldCreateUpsertRequestHandlerWhenPrimaryKeyNotSpecified PASSED\nRunning test: Test shouldThrowExceptionWhenInvalidRecordParserMode(io.odpf.firehose.sink.mongodb.request.MongoRequestHandlerFactoryTest)\n\nio.odpf.firehose.sink.mongodb.request.MongoRequestHandlerFactoryTest > shouldThrowExceptionWhenInvalidRecordParserMode PASSED\nRunning test: Test shouldReturnUpdateRequestHandler(io.odpf.firehose.sink.mongodb.request.MongoRequestHandlerFactoryTest)\n\nio.odpf.firehose.sink.mongodb.request.MongoRequestHandlerFactoryTest > shouldReturnUpdateRequestHandler PASSED\nRunning test: Test shouldThrowExceptionIfHostAndPortNotProvidedProperly(io.odpf.firehose.sink.mongodb.util.MongoSinkFactoryUtilTest)\n\nio.odpf.firehose.sink.mongodb.util.MongoSinkFactoryUtilTest > shouldThrowExceptionIfHostAndPortNotProvidedProperly PASSED\nRunning test: Test shouldThrowIllegalArgumentExceptionForEmptyMongoConnectionURLs(io.odpf.firehose.sink.mongodb.util.MongoSinkFactoryUtilTest)\n\nio.odpf.firehose.sink.mongodb.util.MongoSinkFactoryUtilTest > shouldThrowIllegalArgumentExceptionForEmptyMongoConnectionURLs PASSED\nRunning test: Test shouldGetServerAddressesForValidMongoConnectionURLsWithSpacesInBetween(io.odpf.firehose.sink.mongodb.util.MongoSinkFactoryUtilTest)\n\nio.odpf.firehose.sink.mongodb.util.MongoSinkFactoryUtilTest > shouldGetServerAddressesForValidMongoConnectionURLsWithSpacesInBetween PASSED\nRunning test: Test shouldThrowIllegalArgumentExceptionWhenServerPortInvalid(io.odpf.firehose.sink.mongodb.util.MongoSinkFactoryUtilTest)\n\nio.odpf.firehose.sink.mongodb.util.MongoSinkFactoryUtilTest > shouldThrowIllegalArgumentExceptionWhenServerPortInvalid PASSED\nRunning test: Test shouldThrowIllegalArgumentExceptionForEmptyHost(io.odpf.firehose.sink.mongodb.util.MongoSinkFactoryUtilTest)\n\nio.odpf.firehose.sink.mongodb.util.MongoSinkFactoryUtilTest > shouldThrowIllegalArgumentExceptionForEmptyHost PASSED\nRunning test: Test shouldThrowIllegalArgumentExceptionForEmptyPort(io.odpf.firehose.sink.mongodb.util.MongoSinkFactoryUtilTest)\n\nio.odpf.firehose.sink.mongodb.util.MongoSinkFactoryUtilTest > shouldThrowIllegalArgumentExceptionForEmptyPort PASSED\nRunning test: Test shouldGetServerAddressForIPInMongoConnectionURLs(io.odpf.firehose.sink.mongodb.util.MongoSinkFactoryUtilTest)\n\nio.odpf.firehose.sink.mongodb.util.MongoSinkFactoryUtilTest > shouldGetServerAddressForIPInMongoConnectionURLs PASSED\nRunning test: Test shouldThrowIllegalArgumentExceptionForNullMongoConnectionURLs(io.odpf.firehose.sink.mongodb.util.MongoSinkFactoryUtilTest)\n\nio.odpf.firehose.sink.mongodb.util.MongoSinkFactoryUtilTest > shouldThrowIllegalArgumentExceptionForNullMongoConnectionURLs PASSED\nRunning test: Test shouldGetServerAddressesForValidMongoConnectionURLs(io.odpf.firehose.sink.mongodb.util.MongoSinkFactoryUtilTest)\n\nio.odpf.firehose.sink.mongodb.util.MongoSinkFactoryUtilTest > shouldGetServerAddressesForValidMongoConnectionURLs PASSED\nRunning test: Test shouldGetCorrectRequestsForEachMessageInEsbMessagesList(io.odpf.firehose.sink.mongodb.MongoSinkTest)\n\nio.odpf.firehose.sink.mongodb.MongoSinkTest > shouldGetCorrectRequestsForEachMessageInEsbMessagesList PASSED\nRunning test: Test shouldReturnEmptyListWhenBulRequestSucceeds(io.odpf.firehose.sink.mongodb.MongoSinkTest)\n\nio.odpf.firehose.sink.mongodb.MongoSinkTest > shouldReturnEmptyListWhenBulRequestSucceeds PASSED\nRunning test: Test shouldReturnFailedMessagesWhenBulkRequestFailed(io.odpf.firehose.sink.mongodb.MongoSinkTest)\n\nio.odpf.firehose.sink.mongodb.MongoSinkTest > shouldReturnFailedMessagesWhenBulkRequestFailed PASSED\nRunning test: Test shouldGetRequestForEachMessageInEsbMessagesList(io.odpf.firehose.sink.mongodb.MongoSinkTest)\n\nio.odpf.firehose.sink.mongodb.MongoSinkTest > shouldGetRequestForEachMessageInEsbMessagesList PASSED\nRunning test: Test shouldLogBulkRequestPartiallySucceededWhenPrimaryKeyNotFoundForSomeMessages(io.odpf.firehose.sink.mongodb.client.MongoSinkClientTest)\n\nio.odpf.firehose.sink.mongodb.client.MongoSinkClientTest > shouldLogBulkRequestPartiallySucceededWhenPrimaryKeyNotFoundForSomeMessages PASSED\nRunning test: Test shouldIncrementFailureCounterTagWhenPrimaryKeyNotFoundInUpdateOnlyMode(io.odpf.firehose.sink.mongodb.client.MongoSinkClientTest)\n\nio.odpf.firehose.sink.mongodb.client.MongoSinkClientTest > shouldIncrementFailureCounterTagWhenPrimaryKeyNotFoundInUpdateOnlyMode PASSED\nRunning test: Test shouldLogBulkRequestFailedWhenPrimaryKeyNotFoundForAllMessages(io.odpf.firehose.sink.mongodb.client.MongoSinkClientTest)\n\nio.odpf.firehose.sink.mongodb.client.MongoSinkClientTest > shouldLogBulkRequestFailedWhenPrimaryKeyNotFoundForAllMessages PASSED\nRunning test: Test shouldReturnNonBlacklistedErrorsIfNoneOfTheFailuresBelongToBlacklist(io.odpf.firehose.sink.mongodb.client.MongoSinkClientTest)\n\nio.odpf.firehose.sink.mongodb.client.MongoSinkClientTest > shouldReturnNonBlacklistedErrorsIfNoneOfTheFailuresBelongToBlacklist PASSED\nRunning test: Test shouldLogBulkRequestFailedWhenBulkResponsesHasFailures(io.odpf.firehose.sink.mongodb.client.MongoSinkClientTest)\n\nio.odpf.firehose.sink.mongodb.client.MongoSinkClientTest > shouldLogBulkRequestFailedWhenBulkResponsesHasFailures PASSED\nRunning test: Test shouldReturnNonBlacklistedErrorsIfSomeOfTheFailuresDontBelongToBlacklist(io.odpf.firehose.sink.mongodb.client.MongoSinkClientTest)\n\nio.odpf.firehose.sink.mongodb.client.MongoSinkClientTest > shouldReturnNonBlacklistedErrorsIfSomeOfTheFailuresDontBelongToBlacklist PASSED\nRunning test: Test shouldReturnEmptyArrayListWhenBulkResponseExecutedSuccessfully(io.odpf.firehose.sink.mongodb.client.MongoSinkClientTest)\n\nio.odpf.firehose.sink.mongodb.client.MongoSinkClientTest > shouldReturnEmptyArrayListWhenBulkResponseExecutedSuccessfully PASSED\nRunning test: Test shouldLogBulkRequestsNotAcknowledgedWhenNoAcknowledgementReceived(io.odpf.firehose.sink.mongodb.client.MongoSinkClientTest)\n\nio.odpf.firehose.sink.mongodb.client.MongoSinkClientTest > shouldLogBulkRequestsNotAcknowledgedWhenNoAcknowledgementReceived PASSED\nRunning test: Test shouldReportTelemetryIfTheResponsesBelongToBlacklistStatusCode(io.odpf.firehose.sink.mongodb.client.MongoSinkClientTest)\n\nio.odpf.firehose.sink.mongodb.client.MongoSinkClientTest > shouldReportTelemetryIfTheResponsesBelongToBlacklistStatusCode PASSED\nRunning test: Test shouldLogBulkRequestsSucceededWhenNoFailuresForUpdateOnly(io.odpf.firehose.sink.mongodb.client.MongoSinkClientTest)\n\nio.odpf.firehose.sink.mongodb.client.MongoSinkClientTest > shouldLogBulkRequestsSucceededWhenNoFailuresForUpdateOnly PASSED\nRunning test: Test shouldIncrementInsertedCounterTagOnSuccessfulInsertionInUpsertMode(io.odpf.firehose.sink.mongodb.client.MongoSinkClientTest)\n\nio.odpf.firehose.sink.mongodb.client.MongoSinkClientTest > shouldIncrementInsertedCounterTagOnSuccessfulInsertionInUpsertMode PASSED\nRunning test: Test shouldNotLogBulkRequestFailedWhenBulkResponsesHasNoFailures(io.odpf.firehose.sink.mongodb.client.MongoSinkClientTest)\n\nio.odpf.firehose.sink.mongodb.client.MongoSinkClientTest > shouldNotLogBulkRequestFailedWhenBulkResponsesHasNoFailures PASSED\nRunning test: Test shouldIncrementInsertedCounterTagOnSuccessfulInsertion(io.odpf.firehose.sink.mongodb.client.MongoSinkClientTest)\n\nio.odpf.firehose.sink.mongodb.client.MongoSinkClientTest > shouldIncrementInsertedCounterTagOnSuccessfulInsertion PASSED\nRunning test: Test shouldReturnNonBlacklistedErrorsWhenBulkResponseHasFailuresAndEmptyBlacklist(io.odpf.firehose.sink.mongodb.client.MongoSinkClientTest)\n\nio.odpf.firehose.sink.mongodb.client.MongoSinkClientTest > shouldReturnNonBlacklistedErrorsWhenBulkResponseHasFailuresAndEmptyBlacklist PASSED\nRunning test: Test shouldIncrementUpdatedCounterTagOnSuccessfulUpdation(io.odpf.firehose.sink.mongodb.client.MongoSinkClientTest)\n\nio.odpf.firehose.sink.mongodb.client.MongoSinkClientTest > shouldIncrementUpdatedCounterTagOnSuccessfulUpdation PASSED\nRunning test: Test shouldLogBulkRequestsSucceededWhenNoFailuresForInsertOnly(io.odpf.firehose.sink.mongodb.client.MongoSinkClientTest)\n\nio.odpf.firehose.sink.mongodb.client.MongoSinkClientTest > shouldLogBulkRequestsSucceededWhenNoFailuresForInsertOnly PASSED\nRunning test: Test shouldLogBulkRequestsSucceededWhenNoFailuresForBothUpdateAndInsert(io.odpf.firehose.sink.mongodb.client.MongoSinkClientTest)\n\nio.odpf.firehose.sink.mongodb.client.MongoSinkClientTest > shouldLogBulkRequestsSucceededWhenNoFailuresForBothUpdateAndInsert PASSED\nRunning test: Test shouldReportTelemetryIfSomeOfTheFailuresDontBelongToBlacklist(io.odpf.firehose.sink.mongodb.client.MongoSinkClientTest)\n\nio.odpf.firehose.sink.mongodb.client.MongoSinkClientTest > shouldReportTelemetryIfSomeOfTheFailuresDontBelongToBlacklist PASSED\nRunning test: Test shouldReturnBlackListRetryStatusCodesAsList(io.odpf.firehose.sink.mongodb.client.MongoSinkClientUtilTest)\n\nio.odpf.firehose.sink.mongodb.client.MongoSinkClientUtilTest > shouldReturnBlackListRetryStatusCodesAsList PASSED\nRunning test: Test shouldThrowExceptionWhenNullDatabaseName(io.odpf.firehose.sink.mongodb.client.MongoSinkClientUtilTest)\n\nio.odpf.firehose.sink.mongodb.client.MongoSinkClientUtilTest > shouldThrowExceptionWhenNullDatabaseName PASSED\nRunning test: Test shouldThrowExceptionWhenStatusCodesHaveInvalidCharacters(io.odpf.firehose.sink.mongodb.client.MongoSinkClientUtilTest)\n\nio.odpf.firehose.sink.mongodb.client.MongoSinkClientUtilTest > shouldThrowExceptionWhenStatusCodesHaveInvalidCharacters PASSED\nRunning test: Test shouldThrowExceptionWhenSomeOfTheStatusCodesNotAnInteger(io.odpf.firehose.sink.mongodb.client.MongoSinkClientUtilTest)\n\nio.odpf.firehose.sink.mongodb.client.MongoSinkClientUtilTest > shouldThrowExceptionWhenSomeOfTheStatusCodesNotAnInteger PASSED\nRunning test: Test shouldThrowExceptionWhenStatusCodeNotAnInteger(io.odpf.firehose.sink.mongodb.client.MongoSinkClientUtilTest)\n\nio.odpf.firehose.sink.mongodb.client.MongoSinkClientUtilTest > shouldThrowExceptionWhenStatusCodeNotAnInteger PASSED\nRunning test: Test shouldReturnMultipleEmptyBlackListStatusCodesAsEmptyList(io.odpf.firehose.sink.mongodb.client.MongoSinkClientUtilTest)\n\nio.odpf.firehose.sink.mongodb.client.MongoSinkClientUtilTest > shouldReturnMultipleEmptyBlackListStatusCodesAsEmptyList PASSED\nRunning test: Test shouldReturnEmptyBlackListRetryStatusCodesAsEmptyList(io.odpf.firehose.sink.mongodb.client.MongoSinkClientUtilTest)\n\nio.odpf.firehose.sink.mongodb.client.MongoSinkClientUtilTest > shouldReturnEmptyBlackListRetryStatusCodesAsEmptyList PASSED\nRunning test: Test shouldThrowExceptionWhenNullCollectionName(io.odpf.firehose.sink.mongodb.client.MongoSinkClientUtilTest)\n\nio.odpf.firehose.sink.mongodb.client.MongoSinkClientUtilTest > shouldThrowExceptionWhenNullCollectionName PASSED\nRunning test: Test shouldThrowExceptionWhenAllStatusCodesNotAnInteger(io.odpf.firehose.sink.mongodb.client.MongoSinkClientUtilTest)\n\nio.odpf.firehose.sink.mongodb.client.MongoSinkClientUtilTest > shouldThrowExceptionWhenAllStatusCodesNotAnInteger PASSED\nRunning test: Test shouldReturnRequestWithCorrectRoutingValueForJsonMessageType(io.odpf.firehose.sink.elasticsearch.request.ESUpdateRequestHandlerTest)\n\nio.odpf.firehose.sink.elasticsearch.request.ESUpdateRequestHandlerTest > shouldReturnRequestWithCorrectRoutingValueForJsonMessageType PASSED\nRunning test: Test shouldReturnRequestWithNullRoutingValueWhenNoFieldNameIsProvidedForJsonMessageType(io.odpf.firehose.sink.elasticsearch.request.ESUpdateRequestHandlerTest)\n\nio.odpf.firehose.sink.elasticsearch.request.ESUpdateRequestHandlerTest > shouldReturnRequestWithNullRoutingValueWhenNoFieldNameIsProvidedForJsonMessageType PASSED\nRunning test: Test shouldReturnUpdateRequestHandlerForJsonMessageType(io.odpf.firehose.sink.elasticsearch.request.ESUpdateRequestHandlerTest)\n\nio.odpf.firehose.sink.elasticsearch.request.ESUpdateRequestHandlerTest > shouldReturnUpdateRequestHandlerForJsonMessageType PASSED\nRunning test: Test shouldReturnRequestWithCorrectIdIndexAndTypeForJsonMessageType(io.odpf.firehose.sink.elasticsearch.request.ESUpdateRequestHandlerTest)\n\nio.odpf.firehose.sink.elasticsearch.request.ESUpdateRequestHandlerTest > shouldReturnRequestWithCorrectIdIndexAndTypeForJsonMessageType PASSED\nRunning test: Test shouldThrowExceptionForInvalidKey(io.odpf.firehose.sink.elasticsearch.request.ESUpdateRequestHandlerTest)\n\nio.odpf.firehose.sink.elasticsearch.request.ESUpdateRequestHandlerTest > shouldThrowExceptionForInvalidKey PASSED\nRunning test: Test shouldReturnRequestWithNullRoutingValueWhenNoFieldNameProvidedForProtoMessageType(io.odpf.firehose.sink.elasticsearch.request.ESUpdateRequestHandlerTest)\n\nio.odpf.firehose.sink.elasticsearch.request.ESUpdateRequestHandlerTest > shouldReturnRequestWithNullRoutingValueWhenNoFieldNameProvidedForProtoMessageType PASSED\nRunning test: Test shouldReturnTrueForUpdateOnlyMode(io.odpf.firehose.sink.elasticsearch.request.ESUpdateRequestHandlerTest)\n\nio.odpf.firehose.sink.elasticsearch.request.ESUpdateRequestHandlerTest > shouldReturnTrueForUpdateOnlyMode PASSED\nRunning test: Test shouldReturnFalseForInsertOrUpdateMode(io.odpf.firehose.sink.elasticsearch.request.ESUpdateRequestHandlerTest)\n\nio.odpf.firehose.sink.elasticsearch.request.ESUpdateRequestHandlerTest > shouldReturnFalseForInsertOrUpdateMode PASSED\nRunning test: Test shouldReturnRequestWithCorrectPayloadForProtoMessageType(io.odpf.firehose.sink.elasticsearch.request.ESUpdateRequestHandlerTest)\n\nio.odpf.firehose.sink.elasticsearch.request.ESUpdateRequestHandlerTest > shouldReturnRequestWithCorrectPayloadForProtoMessageType PASSED\nRunning test: Test shouldReturnRequestWithCorrectContentTypeForProtoMessageType(io.odpf.firehose.sink.elasticsearch.request.ESUpdateRequestHandlerTest)\n\nio.odpf.firehose.sink.elasticsearch.request.ESUpdateRequestHandlerTest > shouldReturnRequestWithCorrectContentTypeForProtoMessageType PASSED\nRunning test: Test shouldThrowJSONParseExceptionForInvalidJson(io.odpf.firehose.sink.elasticsearch.request.ESUpdateRequestHandlerTest)\n\nio.odpf.firehose.sink.elasticsearch.request.ESUpdateRequestHandlerTest > shouldThrowJSONParseExceptionForInvalidJson PASSED\nRunning test: Test shouldReturnRequestWithCorrectContentTypeForJsonMessageType(io.odpf.firehose.sink.elasticsearch.request.ESUpdateRequestHandlerTest)\n\nio.odpf.firehose.sink.elasticsearch.request.ESUpdateRequestHandlerTest > shouldReturnRequestWithCorrectContentTypeForJsonMessageType PASSED\nRunning test: Test shouldReturnRequestWithCorrectRoutingValueForProtoMessageType(io.odpf.firehose.sink.elasticsearch.request.ESUpdateRequestHandlerTest)\n\nio.odpf.firehose.sink.elasticsearch.request.ESUpdateRequestHandlerTest > shouldReturnRequestWithCorrectRoutingValueForProtoMessageType PASSED\nRunning test: Test shouldReturnRequestWithCorrectPayloadForJsonMessageType(io.odpf.firehose.sink.elasticsearch.request.ESUpdateRequestHandlerTest)\n\nio.odpf.firehose.sink.elasticsearch.request.ESUpdateRequestHandlerTest > shouldReturnRequestWithCorrectPayloadForJsonMessageType PASSED\nRunning test: Test shouldReturnUpdateRequestHandlerForProtoMessageType(io.odpf.firehose.sink.elasticsearch.request.ESUpdateRequestHandlerTest)\n\nio.odpf.firehose.sink.elasticsearch.request.ESUpdateRequestHandlerTest > shouldReturnUpdateRequestHandlerForProtoMessageType PASSED\nRunning test: Test shouldReturnRequestWithCorrectIdIndexAndTypeForProtoMessageType(io.odpf.firehose.sink.elasticsearch.request.ESUpdateRequestHandlerTest)\n\nio.odpf.firehose.sink.elasticsearch.request.ESUpdateRequestHandlerTest > shouldReturnRequestWithCorrectIdIndexAndTypeForProtoMessageType PASSED\nRunning test: Test shouldReturnInsertRequestHandler(io.odpf.firehose.sink.elasticsearch.request.EsRequestHandlerFactoryTest)\n\nio.odpf.firehose.sink.elasticsearch.request.EsRequestHandlerFactoryTest > shouldReturnInsertRequestHandler PASSED\nRunning test: Test shouldReturnUpdateRequestHandler(io.odpf.firehose.sink.elasticsearch.request.EsRequestHandlerFactoryTest)\n\nio.odpf.firehose.sink.elasticsearch.request.EsRequestHandlerFactoryTest > shouldReturnUpdateRequestHandler PASSED\nRunning test: Test shouldReturnRequestWithCorrectRoutingValueForJsonMessageType(io.odpf.firehose.sink.elasticsearch.request.ESUpsertRequestHandlerTest)\n\nio.odpf.firehose.sink.elasticsearch.request.ESUpsertRequestHandlerTest > shouldReturnRequestWithCorrectRoutingValueForJsonMessageType PASSED\nRunning test: Test shouldReturnRequestWithNullRoutingValueForProtoMessageType(io.odpf.firehose.sink.elasticsearch.request.ESUpsertRequestHandlerTest)\n\nio.odpf.firehose.sink.elasticsearch.request.ESUpsertRequestHandlerTest > shouldReturnRequestWithNullRoutingValueForProtoMessageType PASSED\nRunning test: Test shouldReturnRequestWithNullRoutingValueWhenNoFieldNameIsProvidedForJsonMessageType(io.odpf.firehose.sink.elasticsearch.request.ESUpsertRequestHandlerTest)\n\nio.odpf.firehose.sink.elasticsearch.request.ESUpsertRequestHandlerTest > shouldReturnRequestWithNullRoutingValueWhenNoFieldNameIsProvidedForJsonMessageType PASSED\nRunning test: Test shouldReturnRequestWithCorrectIdIndexAndTypeForJsonMessageType(io.odpf.firehose.sink.elasticsearch.request.ESUpsertRequestHandlerTest)\n\nio.odpf.firehose.sink.elasticsearch.request.ESUpsertRequestHandlerTest > shouldReturnRequestWithCorrectIdIndexAndTypeForJsonMessageType PASSED\nRunning test: Test shouldThrowExceptionForInvalidKey(io.odpf.firehose.sink.elasticsearch.request.ESUpsertRequestHandlerTest)\n\nio.odpf.firehose.sink.elasticsearch.request.ESUpsertRequestHandlerTest > shouldThrowExceptionForInvalidKey PASSED\nRunning test: Test shouldReturnInsertRequestHandlerForProtoMessageType(io.odpf.firehose.sink.elasticsearch.request.ESUpsertRequestHandlerTest)\n\nio.odpf.firehose.sink.elasticsearch.request.ESUpsertRequestHandlerTest > shouldReturnInsertRequestHandlerForProtoMessageType PASSED\nRunning test: Test shouldReturnRequestWithCorrectPayloadForProtoMessageType(io.odpf.firehose.sink.elasticsearch.request.ESUpsertRequestHandlerTest)\n\nio.odpf.firehose.sink.elasticsearch.request.ESUpsertRequestHandlerTest > shouldReturnRequestWithCorrectPayloadForProtoMessageType PASSED\nRunning test: Test shouldReturnRequestWithCorrectContentTypeForProtoMessageType(io.odpf.firehose.sink.elasticsearch.request.ESUpsertRequestHandlerTest)\n\nio.odpf.firehose.sink.elasticsearch.request.ESUpsertRequestHandlerTest > shouldReturnRequestWithCorrectContentTypeForProtoMessageType PASSED\nRunning test: Test shouldReturnInsertRequestHandlerForJsonMessageType(io.odpf.firehose.sink.elasticsearch.request.ESUpsertRequestHandlerTest)\n\nio.odpf.firehose.sink.elasticsearch.request.ESUpsertRequestHandlerTest > shouldReturnInsertRequestHandlerForJsonMessageType PASSED\nRunning test: Test shouldThrowJSONParseExceptionForInvalidJson(io.odpf.firehose.sink.elasticsearch.request.ESUpsertRequestHandlerTest)\n\nio.odpf.firehose.sink.elasticsearch.request.ESUpsertRequestHandlerTest > shouldThrowJSONParseExceptionForInvalidJson PASSED\nRunning test: Test shouldReturnRequestWithCorrectContentTypeForJsonMessageType(io.odpf.firehose.sink.elasticsearch.request.ESUpsertRequestHandlerTest)\n\nio.odpf.firehose.sink.elasticsearch.request.ESUpsertRequestHandlerTest > shouldReturnRequestWithCorrectContentTypeForJsonMessageType PASSED\nRunning test: Test shouldReturnRequestWithCorrectRoutingValueForProtoMessageType(io.odpf.firehose.sink.elasticsearch.request.ESUpsertRequestHandlerTest)\n\nio.odpf.firehose.sink.elasticsearch.request.ESUpsertRequestHandlerTest > shouldReturnRequestWithCorrectRoutingValueForProtoMessageType PASSED\nRunning test: Test shouldReturnFalseForUpdateOnlyMode(io.odpf.firehose.sink.elasticsearch.request.ESUpsertRequestHandlerTest)\n\nio.odpf.firehose.sink.elasticsearch.request.ESUpsertRequestHandlerTest > shouldReturnFalseForUpdateOnlyMode PASSED\nRunning test: Test shouldReturnRequestWithCorrectPayloadForJsonMessageType(io.odpf.firehose.sink.elasticsearch.request.ESUpsertRequestHandlerTest)\n\nio.odpf.firehose.sink.elasticsearch.request.ESUpsertRequestHandlerTest > shouldReturnRequestWithCorrectPayloadForJsonMessageType PASSED\nRunning test: Test shouldReturnTrueForInsertMode(io.odpf.firehose.sink.elasticsearch.request.ESUpsertRequestHandlerTest)\n\nio.odpf.firehose.sink.elasticsearch.request.ESUpsertRequestHandlerTest > shouldReturnTrueForInsertMode PASSED\nRunning test: Test shouldReturnRequestWithCorrectIdIndexAndTypeForProtoMessageType(io.odpf.firehose.sink.elasticsearch.request.ESUpsertRequestHandlerTest)\n\nio.odpf.firehose.sink.elasticsearch.request.ESUpsertRequestHandlerTest > shouldReturnRequestWithCorrectIdIndexAndTypeForProtoMessageType PASSED\nRunning test: Test shouldThrowExceptionIfHostAndPortNotProvidedProperly(io.odpf.firehose.sink.elasticsearch.EsSinkFactoryTest)\n\nio.odpf.firehose.sink.elasticsearch.EsSinkFactoryTest > shouldThrowExceptionIfHostAndPortNotProvidedProperly PASSED\nRunning test: Test shouldThrowIllegalArgumentExceptionForEmptyHostName(io.odpf.firehose.sink.elasticsearch.EsSinkFactoryTest)\n\nio.odpf.firehose.sink.elasticsearch.EsSinkFactoryTest > shouldThrowIllegalArgumentExceptionForEmptyHostName PASSED\nRunning test: Test shouldReturnBlackListRetryStatusCodesAsList(io.odpf.firehose.sink.elasticsearch.EsSinkFactoryTest)\n\nio.odpf.firehose.sink.elasticsearch.EsSinkFactoryTest > shouldReturnBlackListRetryStatusCodesAsList PASSED\nRunning test: Test shouldCreateESSink(io.odpf.firehose.sink.elasticsearch.EsSinkFactoryTest)\n\nio.odpf.firehose.sink.elasticsearch.EsSinkFactoryTest > shouldCreateESSink PASSED\nRunning test: Test shouldThrowIllegalArgumentExceptionForEmptyPort(io.odpf.firehose.sink.elasticsearch.EsSinkFactoryTest)\n\nio.odpf.firehose.sink.elasticsearch.EsSinkFactoryTest > shouldThrowIllegalArgumentExceptionForEmptyPort PASSED\nRunning test: Test shouldThrowIllegalArgumentExceptionForNullESConnectionURLs(io.odpf.firehose.sink.elasticsearch.EsSinkFactoryTest)\n\nio.odpf.firehose.sink.elasticsearch.EsSinkFactoryTest > shouldThrowIllegalArgumentExceptionForNullESConnectionURLs PASSED\nRunning test: Test shouldGetHttpHostsForValidESConnectionURLs(io.odpf.firehose.sink.elasticsearch.EsSinkFactoryTest)\n\nio.odpf.firehose.sink.elasticsearch.EsSinkFactoryTest > shouldGetHttpHostsForValidESConnectionURLs PASSED\nRunning test: Test shouldReturnEmptyBlackListRetryStatusCodesAsEmptyList(io.odpf.firehose.sink.elasticsearch.EsSinkFactoryTest)\n\nio.odpf.firehose.sink.elasticsearch.EsSinkFactoryTest > shouldReturnEmptyBlackListRetryStatusCodesAsEmptyList PASSED\nRunning test: Test shouldThrowIllegalArgumentExceptionForEmptyESConnectionURLs(io.odpf.firehose.sink.elasticsearch.EsSinkFactoryTest)\n\nio.odpf.firehose.sink.elasticsearch.EsSinkFactoryTest > shouldThrowIllegalArgumentExceptionForEmptyESConnectionURLs PASSED\nRunning test: Test shouldGetHttpHostsForValidESConnectionURLsWithSpacesInBetween(io.odpf.firehose.sink.elasticsearch.EsSinkFactoryTest)\n\nio.odpf.firehose.sink.elasticsearch.EsSinkFactoryTest > shouldGetHttpHostsForValidESConnectionURLsWithSpacesInBetween PASSED\nRunning test: Test shouldGetHttpHostsForIPInESConnectionURLs(io.odpf.firehose.sink.elasticsearch.EsSinkFactoryTest)\n\nio.odpf.firehose.sink.elasticsearch.EsSinkFactoryTest > shouldGetHttpHostsForIPInESConnectionURLs PASSED\nRunning test: Test shouldThrowNeedToRetryExceptionWhenBulkResponseHasFailuresExceptMentionedInBlacklist(io.odpf.firehose.sink.elasticsearch.EsSinkTest)\n\nio.odpf.firehose.sink.elasticsearch.EsSinkTest > shouldThrowNeedToRetryExceptionWhenBulkResponseHasFailuresExceptMentionedInBlacklist PASSED\nRunning test: Test shouldThrowNeedToRetryExceptionIfSomeOfTheFailuresDontBelongToBlacklist(io.odpf.firehose.sink.elasticsearch.EsSinkTest)\n\nio.odpf.firehose.sink.elasticsearch.EsSinkTest > shouldThrowNeedToRetryExceptionIfSomeOfTheFailuresDontBelongToBlacklist PASSED\nRunning test: Test shouldNotLogBulkRequestFailedWhenBulkResponsesHasNotFailures(io.odpf.firehose.sink.elasticsearch.EsSinkTest)\n\nio.odpf.firehose.sink.elasticsearch.EsSinkTest > shouldNotLogBulkRequestFailedWhenBulkResponsesHasNotFailures PASSED\nRunning test: Test shouldLogBulkRequestFailedWhenBulkResponsesHasFailures(io.odpf.firehose.sink.elasticsearch.EsSinkTest)\n\nio.odpf.firehose.sink.elasticsearch.EsSinkTest > shouldLogBulkRequestFailedWhenBulkResponsesHasFailures PASSED\nRunning test: Test shouldReturnEmptyArrayListWhenBulkResponseExecutedSuccessfully(io.odpf.firehose.sink.elasticsearch.EsSinkTest)\n\nio.odpf.firehose.sink.elasticsearch.EsSinkTest > shouldReturnEmptyArrayListWhenBulkResponseExecutedSuccessfully PASSED\nRunning test: Test shouldReportTelemetryIfTheResponsesBelongToBlacklistStatusCode(io.odpf.firehose.sink.elasticsearch.EsSinkTest)\n\nio.odpf.firehose.sink.elasticsearch.EsSinkTest > shouldReportTelemetryIfTheResponsesBelongToBlacklistStatusCode PASSED\nRunning test: Test shouldReturnEsbMessagesListWhenBulkResponseHasFailuresWithStatusOtherThanBlacklist(io.odpf.firehose.sink.elasticsearch.EsSinkTest)\n\nio.odpf.firehose.sink.elasticsearch.EsSinkTest > shouldReturnEsbMessagesListWhenBulkResponseHasFailuresWithStatusOtherThanBlacklist PASSED\nRunning test: Test shouldReturnEsbMessagesListWhenBulkResponseHasFailuresAndEmptyBlacklist(io.odpf.firehose.sink.elasticsearch.EsSinkTest)\n\nio.odpf.firehose.sink.elasticsearch.EsSinkTest > shouldReturnEsbMessagesListWhenBulkResponseHasFailuresAndEmptyBlacklist PASSED\nRunning test: Test shouldGetRequestForEachMessageInEsbMessagesList(io.odpf.firehose.sink.elasticsearch.EsSinkTest)\n\nio.odpf.firehose.sink.elasticsearch.EsSinkTest > shouldGetRequestForEachMessageInEsbMessagesList PASSED\nRunning test: Test shouldReturnEmptyMessageListIfAllTheResponsesBelongToBlacklistStatusCode(io.odpf.firehose.sink.elasticsearch.EsSinkTest)\n\nio.odpf.firehose.sink.elasticsearch.EsSinkTest > shouldReturnEmptyMessageListIfAllTheResponsesBelongToBlacklistStatusCode PASSED\nRunning test: Test shouldCreatePromSink(io.odpf.firehose.sink.prometheus.PromSinkFactoryTest)\n\nio.odpf.firehose.sink.prometheus.PromSinkFactoryTest > shouldCreatePromSink PASSED\nRunning test: Test shouldProperlyBuildMessages(io.odpf.firehose.sink.prometheus.request.PromRequestTest)\n\nio.odpf.firehose.sink.prometheus.request.PromRequestTest > shouldProperlyBuildMessages PASSED\nRunning test: Test shouldCreateNotNullRequest(io.odpf.firehose.sink.prometheus.request.PromRequestCreatorTest)\n\nio.odpf.firehose.sink.prometheus.request.PromRequestCreatorTest > shouldCreateNotNullRequest PASSED\nRunning test: Test testMessageWithDurationIsBuiltIntoMillis(io.odpf.firehose.sink.prometheus.builder.TimeSeriesBuilderTest)\n\nio.odpf.firehose.sink.prometheus.builder.TimeSeriesBuilderTest > testMessageWithDurationIsBuiltIntoMillis PASSED\nRunning test: Test testMessageWithEmptyMetricProtoMappingConfig(io.odpf.firehose.sink.prometheus.builder.TimeSeriesBuilderTest)\n\nio.odpf.firehose.sink.prometheus.builder.TimeSeriesBuilderTest > testMessageWithEmptyMetricProtoMappingConfig PASSED\nRunning test: Test testMultipleMetricWithMultipleLabels(io.odpf.firehose.sink.prometheus.builder.TimeSeriesBuilderTest)\n\nio.odpf.firehose.sink.prometheus.builder.TimeSeriesBuilderTest > testMultipleMetricWithMultipleLabels PASSED\nRunning test: Test testMessageWithEnum(io.odpf.firehose.sink.prometheus.builder.TimeSeriesBuilderTest)\n\nio.odpf.firehose.sink.prometheus.builder.TimeSeriesBuilderTest > testMessageWithEnum PASSED\nRunning test: Test testMessageWithNestedSchemaForMetrics(io.odpf.firehose.sink.prometheus.builder.TimeSeriesBuilderTest)\n\nio.odpf.firehose.sink.prometheus.builder.TimeSeriesBuilderTest > testMessageWithNestedSchemaForMetrics PASSED\nRunning test: Test testMessageWithNestedSchemaForLabels(io.odpf.firehose.sink.prometheus.builder.TimeSeriesBuilderTest)\n\nio.odpf.firehose.sink.prometheus.builder.TimeSeriesBuilderTest > testMessageWithNestedSchemaForLabels PASSED\nRunning test: Test testMessageWithMetricTimestampUsingIngestionTimestamp(io.odpf.firehose.sink.prometheus.builder.TimeSeriesBuilderTest)\n\nio.odpf.firehose.sink.prometheus.builder.TimeSeriesBuilderTest > testMessageWithMetricTimestampUsingIngestionTimestamp PASSED\nRunning test: Test testMessageWithTimestampIsBuiltIntoMillis(io.odpf.firehose.sink.prometheus.builder.TimeSeriesBuilderTest)\n\nio.odpf.firehose.sink.prometheus.builder.TimeSeriesBuilderTest > testMessageWithTimestampIsBuiltIntoMillis PASSED\nRunning test: Test testMessageWithEmptyLabelProtoMappingConfig(io.odpf.firehose.sink.prometheus.builder.TimeSeriesBuilderTest)\n\nio.odpf.firehose.sink.prometheus.builder.TimeSeriesBuilderTest > testMessageWithEmptyLabelProtoMappingConfig PASSED\nRunning test: Test testMessageWithEmptyFieldIndex(io.odpf.firehose.sink.prometheus.builder.TimeSeriesBuilderTest)\n\nio.odpf.firehose.sink.prometheus.builder.TimeSeriesBuilderTest > testMessageWithEmptyFieldIndex PASSED\nRunning test: Test testSingleMetricWithMultipleLabels(io.odpf.firehose.sink.prometheus.builder.TimeSeriesBuilderTest)\n\nio.odpf.firehose.sink.prometheus.builder.TimeSeriesBuilderTest > testSingleMetricWithMultipleLabels PASSED\nRunning test: Test testMessageWithNestedMetricsWithNestedLabels(io.odpf.firehose.sink.prometheus.builder.TimeSeriesBuilderTest)\n\nio.odpf.firehose.sink.prometheus.builder.TimeSeriesBuilderTest > testMessageWithNestedMetricsWithNestedLabels PASSED\nRunning test: Test shouldReturnWriteRequest(io.odpf.firehose.sink.prometheus.builder.WriteRequestBuilderTest)\n\nio.odpf.firehose.sink.prometheus.builder.WriteRequestBuilderTest > shouldReturnWriteRequest PASSED\nRunning test: Test shouldReturnEmptyRequest(io.odpf.firehose.sink.prometheus.builder.WriteRequestBuilderTest)\n\nio.odpf.firehose.sink.prometheus.builder.WriteRequestBuilderTest > shouldReturnEmptyRequest PASSED\nRunning test: Test shouldThrowException(io.odpf.firehose.sink.prometheus.builder.WriteRequestBuilderTest)\n\nio.odpf.firehose.sink.prometheus.builder.WriteRequestBuilderTest > shouldThrowException PASSED\nRunning test: Test shouldReturnWriteRequestWithSortedTimeSeries(io.odpf.firehose.sink.prometheus.builder.WriteRequestBuilderTest)\n\nio.odpf.firehose.sink.prometheus.builder.WriteRequestBuilderTest > shouldReturnWriteRequestWithSortedTimeSeries PASSED\nRunning test: Test shouldGetNestedMetricListFromMessage(io.odpf.firehose.sink.prometheus.builder.TimeSeriesBuilderUtilsTest)\n\nio.odpf.firehose.sink.prometheus.builder.TimeSeriesBuilderUtilsTest > shouldGetNestedMetricListFromMessage PASSED\nRunning test: Test shouldGetMetricListFromMessage(io.odpf.firehose.sink.prometheus.builder.TimeSeriesBuilderUtilsTest)\n\nio.odpf.firehose.sink.prometheus.builder.TimeSeriesBuilderUtilsTest > shouldGetMetricListFromMessage PASSED\nRunning test: Test shouldGetNestedLabelListFromMessage(io.odpf.firehose.sink.prometheus.builder.TimeSeriesBuilderUtilsTest)\n\nio.odpf.firehose.sink.prometheus.builder.TimeSeriesBuilderUtilsTest > shouldGetNestedLabelListFromMessage PASSED\nRunning test: Test shouldGetLabelsFromMessage(io.odpf.firehose.sink.prometheus.builder.TimeSeriesBuilderUtilsTest)\n\nio.odpf.firehose.sink.prometheus.builder.TimeSeriesBuilderUtilsTest > shouldGetLabelsFromMessage PASSED\nRunning test: Test shouldParseWithRequiredPromHeadersInBetween(io.odpf.firehose.sink.prometheus.builder.HeaderBuilderTest)\n\nio.odpf.firehose.sink.prometheus.builder.HeaderBuilderTest > shouldParseWithRequiredPromHeadersInBetween PASSED\nRunning test: Test shouldGenerateBaseHeader(io.odpf.firehose.sink.prometheus.builder.HeaderBuilderTest)\n\nio.odpf.firehose.sink.prometheus.builder.HeaderBuilderTest > shouldGenerateBaseHeader PASSED\nRunning test: Test shouldAddBaseHeaderPerMessageIfNotParameterized(io.odpf.firehose.sink.prometheus.builder.HeaderBuilderTest)\n\nio.odpf.firehose.sink.prometheus.builder.HeaderBuilderTest > shouldAddBaseHeaderPerMessageIfNotParameterized PASSED\nRunning test: Test shouldHandleMultipleHeader(io.odpf.firehose.sink.prometheus.builder.HeaderBuilderTest)\n\nio.odpf.firehose.sink.prometheus.builder.HeaderBuilderTest > shouldHandleMultipleHeader PASSED\nRunning test: Test shouldNotThrowNullPointerExceptionWhenHeaderConfigEmpty(io.odpf.firehose.sink.prometheus.builder.HeaderBuilderTest)\n\nio.odpf.firehose.sink.prometheus.builder.HeaderBuilderTest > shouldNotThrowNullPointerExceptionWhenHeaderConfigEmpty PASSED\nRunning test: Test shouldCreateSnappyCompressedByteArrayEntity(io.odpf.firehose.sink.prometheus.builder.RequestEntityBuilderTest)\n\nio.odpf.firehose.sink.prometheus.builder.RequestEntityBuilderTest > shouldCreateSnappyCompressedByteArrayEntity PASSED\nRunning test: Test shouldCloseStencilClient(io.odpf.firehose.sink.prometheus.PromSinkTest)\n\nio.odpf.firehose.sink.prometheus.PromSinkTest > shouldCloseStencilClient PASSED\nRunning test: Test shouldNotCaptureDroppedMessagesMetricsIfStatusCodeIs200(io.odpf.firehose.sink.prometheus.PromSinkTest)\n\nio.odpf.firehose.sink.prometheus.PromSinkTest > shouldNotCaptureDroppedMessagesMetricsIfStatusCodeIs200 PASSED\nRunning test: Test shouldNotCaptureDroppedMessagesMetricsIfStatusCodeIs201(io.odpf.firehose.sink.prometheus.PromSinkTest)\n\nio.odpf.firehose.sink.prometheus.PromSinkTest > shouldNotCaptureDroppedMessagesMetricsIfStatusCodeIs201 PASSED\nRunning test: Test shouldThrowNeedToRetryExceptionWhenResponseCodeIsGivenRange(io.odpf.firehose.sink.prometheus.PromSinkTest)\n\nio.odpf.firehose.sink.prometheus.PromSinkTest > shouldThrowNeedToRetryExceptionWhenResponseCodeIsGivenRange PASSED\nRunning test: Test shouldReadSnappyCompressedContent(io.odpf.firehose.sink.prometheus.PromSinkTest)\n\nio.odpf.firehose.sink.prometheus.PromSinkTest > shouldReadSnappyCompressedContent PASSED\nRunning test: Test shouldNotCaptureDroppedMessagesMetricsIfInStatusCodeRange(io.odpf.firehose.sink.prometheus.PromSinkTest)\n\nio.odpf.firehose.sink.prometheus.PromSinkTest > shouldNotCaptureDroppedMessagesMetricsIfInStatusCodeRange PASSED\nRunning test: Test shouldPrepareRequestDuringPreparationAndCallItDuringExecution(io.odpf.firehose.sink.prometheus.PromSinkTest)\n\nio.odpf.firehose.sink.prometheus.PromSinkTest > shouldPrepareRequestDuringPreparationAndCallItDuringExecution PASSED\nRunning test: Test shouldNotLogEntireRequestIfNotInStatusCodeRange(io.odpf.firehose.sink.prometheus.PromSinkTest)\n\nio.odpf.firehose.sink.prometheus.PromSinkTest > shouldNotLogEntireRequestIfNotInStatusCodeRange PASSED\nRunning test: Test shouldThrowNeedToRetryExceptionWhenResponseCodeIsNull(io.odpf.firehose.sink.prometheus.PromSinkTest)\n\nio.odpf.firehose.sink.prometheus.PromSinkTest > shouldThrowNeedToRetryExceptionWhenResponseCodeIsNull PASSED\nRunning test: Test shouldCatchURISyntaxExceptionAndThrowIOException(io.odpf.firehose.sink.prometheus.PromSinkTest)\n\nio.odpf.firehose.sink.prometheus.PromSinkTest > shouldCatchURISyntaxExceptionAndThrowIOException PASSED\nRunning test: Test shouldLogEntireRequestIfInStatusCodeRangeAndCaptureDroppedMessages(io.odpf.firehose.sink.prometheus.PromSinkTest)\n\nio.odpf.firehose.sink.prometheus.PromSinkTest > shouldLogEntireRequestIfInStatusCodeRangeAndCaptureDroppedMessages PASSED\nRunning test: Test shouldLogConnectionClosing(io.odpf.firehose.sink.prometheus.PromSinkTest)\n\nio.odpf.firehose.sink.prometheus.PromSinkTest > shouldLogConnectionClosing PASSED\nRunning test: Test shouldCaptureDroppedMessagesMetricsIfNotInStatusCodeRange(io.odpf.firehose.sink.prometheus.PromSinkTest)\n\nio.odpf.firehose.sink.prometheus.PromSinkTest > shouldCaptureDroppedMessagesMetricsIfNotInStatusCodeRange PASSED\nRunning test: Test shouldCaptureResponseStatusCount(io.odpf.firehose.sink.prometheus.PromSinkTest)\n\nio.odpf.firehose.sink.prometheus.PromSinkTest > shouldCaptureResponseStatusCount PASSED\nRunning test: Test shouldCallStorage(io.odpf.firehose.sink.common.s3.S3Test)\n\nio.odpf.firehose.sink.common.s3.S3Test > shouldCallStorage PASSED\nRunning test: Test shouldThrowException(io.odpf.firehose.sink.common.s3.S3Test)\n\nio.odpf.firehose.sink.common.s3.S3Test > shouldThrowException PASSED\nRunning test: Test shouldParseKeyWhenKafkaMessageParserModeSetToKey(io.odpf.firehose.sink.common.KeyOrMessageParserTest)\n\nio.odpf.firehose.sink.common.KeyOrMessageParserTest > shouldParseKeyWhenKafkaMessageParserModeSetToKey PASSED\nRunning test: Test shouldParseMessageByDefault(io.odpf.firehose.sink.common.KeyOrMessageParserTest)\n\nio.odpf.firehose.sink.common.KeyOrMessageParserTest > shouldParseMessageByDefault PASSED\nRunning test: Test shouldCallStorage(io.odpf.firehose.sink.common.gcs.GoogleCloudStorageTest)\n\nio.odpf.firehose.sink.common.gcs.GoogleCloudStorageTest > shouldCallStorage PASSED\nRunning test: Test shouldThrowBlobStorageException(io.odpf.firehose.sink.common.gcs.GoogleCloudStorageTest)\n\nio.odpf.firehose.sink.common.gcs.GoogleCloudStorageTest > shouldThrowBlobStorageException PASSED\nRunning test: Test shouldCloseStencilClient(io.odpf.firehose.sink.influxdb.InfluxSinkTest)\n\nio.odpf.firehose.sink.influxdb.InfluxSinkTest > shouldCloseStencilClient PASSED\nRunning test: Test shouldLogDataPointAndBatchPoints(io.odpf.firehose.sink.influxdb.InfluxSinkTest)\n\nio.odpf.firehose.sink.influxdb.InfluxSinkTest > shouldLogDataPointAndBatchPoints PASSED\nRunning test: Test shouldThrowExceptionOnEmptyFieldNameIndexMapping(io.odpf.firehose.sink.influxdb.InfluxSinkTest)\n\nio.odpf.firehose.sink.influxdb.InfluxSinkTest > shouldThrowExceptionOnEmptyFieldNameIndexMapping PASSED\nRunning test: Test shouldPushTagsAsStringValues(io.odpf.firehose.sink.influxdb.InfluxSinkTest)\n\nio.odpf.firehose.sink.influxdb.InfluxSinkTest > shouldPushTagsAsStringValues PASSED\nRunning test: Test shouldLogWhenClosingConnection(io.odpf.firehose.sink.influxdb.InfluxSinkTest)\n\nio.odpf.firehose.sink.influxdb.InfluxSinkTest > shouldLogWhenClosingConnection PASSED\nRunning test: Test shouldPrepareBatchPoints(io.odpf.firehose.sink.influxdb.InfluxSinkTest)\n\nio.odpf.firehose.sink.influxdb.InfluxSinkTest > shouldPrepareBatchPoints PASSED\nRunning test: Test shouldPushMessagesWithType(io.odpf.firehose.sink.influxdb.InfluxSinkTest)\n\nio.odpf.firehose.sink.influxdb.InfluxSinkTest > shouldPushMessagesWithType PASSED\nRunning test: Test testMessageWithDurationIsBuiltIntoMillis(io.odpf.firehose.sink.influxdb.builder.PointBuilderTest)\n\nio.odpf.firehose.sink.influxdb.builder.PointBuilderTest > testMessageWithDurationIsBuiltIntoMillis PASSED\nRunning test: Test testMessageWithEnum(io.odpf.firehose.sink.influxdb.builder.PointBuilderTest)\n\nio.odpf.firehose.sink.influxdb.builder.PointBuilderTest > testMessageWithEnum PASSED\nRunning test: Test testMessageWithNestedSchemaForFields(io.odpf.firehose.sink.influxdb.builder.PointBuilderTest)\n\nio.odpf.firehose.sink.influxdb.builder.PointBuilderTest > testMessageWithNestedSchemaForFields PASSED\nRunning test: Test testMessageWithNestedSchemaForTags(io.odpf.firehose.sink.influxdb.builder.PointBuilderTest)\n\nio.odpf.firehose.sink.influxdb.builder.PointBuilderTest > testMessageWithNestedSchemaForTags PASSED\nRunning test: Test testMessageWithTimestampIsBuiltIntoMillis(io.odpf.firehose.sink.influxdb.builder.PointBuilderTest)\n\nio.odpf.firehose.sink.influxdb.builder.PointBuilderTest > testMessageWithTimestampIsBuiltIntoMillis PASSED\nRunning test: Test shouldProcessException(io.odpf.firehose.sink.AbstractSinkTest)\n\nio.odpf.firehose.sink.AbstractSinkTest > shouldProcessException PASSED\nRunning test: Test shouldProcessFailedMessages(io.odpf.firehose.sink.AbstractSinkTest)\n\nio.odpf.firehose.sink.AbstractSinkTest > shouldProcessFailedMessages PASSED\nRunning test: Test shouldProcessExceptionInPrepare(io.odpf.firehose.sink.AbstractSinkTest)\n\nio.odpf.firehose.sink.AbstractSinkTest > shouldProcessExceptionInPrepare PASSED\nRunning test: Test shouldProcessMessages(io.odpf.firehose.sink.AbstractSinkTest)\n\nio.odpf.firehose.sink.AbstractSinkTest > shouldProcessMessages PASSED\nRunning test: Test shouldNotCaptureSinkExecutionTelemetry(io.odpf.firehose.sink.AbstractSinkTest)\n\nio.odpf.firehose.sink.AbstractSinkTest > shouldNotCaptureSinkExecutionTelemetry PASSED\nRunning test: Test shouldReturnEmptyListOfMessagesWhenSuccess(io.odpf.firehose.sink.GenericOdpfSinkTest)\n\nio.odpf.firehose.sink.GenericOdpfSinkTest > shouldReturnEmptyListOfMessagesWhenSuccess PASSED\nRunning test: Test shouldReturnFailedMessages(io.odpf.firehose.sink.GenericOdpfSinkTest)\n\nio.odpf.firehose.sink.GenericOdpfSinkTest > shouldReturnFailedMessages PASSED\nRunning test: Test shouldAddMetadataColumns(io.odpf.firehose.sink.bigquery.BigquerySinkUtilsTest)\n\nio.odpf.firehose.sink.bigquery.BigquerySinkUtilsTest > shouldAddMetadataColumns PASSED\nRunning test: Test shouldGetRowIdCreator(io.odpf.firehose.sink.bigquery.BigquerySinkUtilsTest)\n\nio.odpf.firehose.sink.bigquery.BigquerySinkUtilsTest > shouldGetRowIdCreator PASSED\nRunning test: Test shouldAddSinkConnectorConfigs(io.odpf.firehose.sink.SinkFactoryUtilsTest)\n\nio.odpf.firehose.sink.SinkFactoryUtilsTest > shouldAddSinkConnectorConfigs PASSED\nRunning test: Test shouldReturnMessageThatCausedDeserializerException(io.odpf.firehose.sink.blob.BlobSinkTest)\n\nio.odpf.firehose.sink.blob.BlobSinkTest > shouldReturnMessageThatCausedDeserializerException PASSED\nRunning test: Test shouldReturnCommittableOffsets(io.odpf.firehose.sink.blob.BlobSinkTest)\n\nio.odpf.firehose.sink.blob.BlobSinkTest > shouldReturnCommittableOffsets PASSED\nRunning test: Test shouldThrowWriterIOExceptionWhenWritingRecordThrowIOException(io.odpf.firehose.sink.blob.BlobSinkTest)\n\nio.odpf.firehose.sink.blob.BlobSinkTest > shouldThrowWriterIOExceptionWhenWritingRecordThrowIOException PASSED\nRunning test: Test shouldReturnMessagesWhenMessagesHasErrorCausedByUnknownFields(io.odpf.firehose.sink.blob.BlobSinkTest)\n\nio.odpf.firehose.sink.blob.BlobSinkTest > shouldReturnMessagesWhenMessagesHasErrorCausedByUnknownFields PASSED\nRunning test: Test shouldReturnMessagesWhenMessagesHasErrorCausedByEmptyMessageException(io.odpf.firehose.sink.blob.BlobSinkTest)\n\nio.odpf.firehose.sink.blob.BlobSinkTest > shouldReturnMessagesWhenMessagesHasErrorCausedByEmptyMessageException PASSED\nRunning test: Test shouldWriteRecords(io.odpf.firehose.sink.blob.BlobSinkTest)\n\nio.odpf.firehose.sink.blob.BlobSinkTest > shouldWriteRecords PASSED\nRunning test: Test shouldManageOffset(io.odpf.firehose.sink.blob.BlobSinkTest)\n\nio.odpf.firehose.sink.blob.BlobSinkTest > shouldManageOffset PASSED\nRunning test: Test shouldGenerateMessageDefinition(io.odpf.firehose.sink.blob.proto.NestedKafkaMetadataProtoMessageTest)\n\nio.odpf.firehose.sink.blob.proto.NestedKafkaMetadataProtoMessageTest > shouldGenerateMessageDefinition PASSED\nRunning test: Test shouldCreateDynamicMessage(io.odpf.firehose.sink.blob.proto.NestedKafkaMetadataProtoMessageTest)\n\nio.odpf.firehose.sink.blob.proto.NestedKafkaMetadataProtoMessageTest > shouldCreateDynamicMessage PASSED\nRunning test: Test shouldGenerateMessageDefinition(io.odpf.firehose.sink.blob.proto.TimestampMetadataProtoMessageTest)\n\nio.odpf.firehose.sink.blob.proto.TimestampMetadataProtoMessageTest > shouldGenerateMessageDefinition PASSED\nRunning test: Test shouldCreateDynamicMessage(io.odpf.firehose.sink.blob.proto.TimestampMetadataProtoMessageTest)\n\nio.odpf.firehose.sink.blob.proto.TimestampMetadataProtoMessageTest > shouldCreateDynamicMessage PASSED\nRunning test: Test shouldCreateKafkaMetadataMessageDefinition(io.odpf.firehose.sink.blob.proto.KafkaMetadataProtoMessageTest)\n\nio.odpf.firehose.sink.blob.proto.KafkaMetadataProtoMessageTest > shouldCreateKafkaMetadataMessageDefinition PASSED\nRunning test: Test shouldCreateKafkaMetadataDynamicMessage(io.odpf.firehose.sink.blob.proto.KafkaMetadataProtoMessageTest)\n\nio.odpf.firehose.sink.blob.proto.KafkaMetadataProtoMessageTest > shouldCreateKafkaMetadataDynamicMessage PASSED\nRunning test: Test shouldCreateDescriptors(io.odpf.firehose.sink.blob.proto.KafkaMetadataProtoFirehoseMessageUtilsTest)\n\nio.odpf.firehose.sink.blob.proto.KafkaMetadataProtoFirehoseMessageUtilsTest > shouldCreateDescriptors PASSED\nRunning test: Test shouldCreateFileDescriptor(io.odpf.firehose.sink.blob.proto.KafkaMetadataProtoFirehoseMessageUtilsTest)\n\nio.odpf.firehose.sink.blob.proto.KafkaMetadataProtoFirehoseMessageUtilsTest > shouldCreateFileDescriptor PASSED\nRunning test: Test shouldCreateDescriptorsForNestedMetadata(io.odpf.firehose.sink.blob.proto.KafkaMetadataProtoFirehoseMessageUtilsTest)\n\nio.odpf.firehose.sink.blob.proto.KafkaMetadataProtoFirehoseMessageUtilsTest > shouldCreateDescriptorsForNestedMetadata PASSED\nRunning test: Test shouldThrowIOExceptionWhenWriteThrowsException(io.odpf.firehose.sink.blob.writer.WriterOrchestratorTest)\n\nio.odpf.firehose.sink.blob.writer.WriterOrchestratorTest > shouldThrowIOExceptionWhenWriteThrowsException PASSED\nRunning test: Test shouldThrowIOExceptionWhenOpenNewWriterFailed(io.odpf.firehose.sink.blob.writer.WriterOrchestratorTest)\n\nio.odpf.firehose.sink.blob.writer.WriterOrchestratorTest > shouldThrowIOExceptionWhenOpenNewWriterFailed PASSED\nRunning test: Test shouldCreateLocalFileWriter(io.odpf.firehose.sink.blob.writer.WriterOrchestratorTest)\n\nio.odpf.firehose.sink.blob.writer.WriterOrchestratorTest > shouldCreateLocalFileWriter PASSED\nRunning test: Test shouldGetEmptyFlushedPath(io.odpf.firehose.sink.blob.writer.WriterOrchestratorTest)\n\nio.odpf.firehose.sink.blob.writer.WriterOrchestratorTest > shouldGetEmptyFlushedPath PASSED\nRunning test: Test shouldCreateMultipleWriterBasedOnPartition(io.odpf.firehose.sink.blob.writer.WriterOrchestratorTest)\n\nio.odpf.firehose.sink.blob.writer.WriterOrchestratorTest > shouldCreateMultipleWriterBasedOnPartition PASSED\nRunning test: Test shouldCheckForObjectStorageWriterCompletion(io.odpf.firehose.sink.blob.writer.WriterOrchestratorStatusTest)\n\nio.odpf.firehose.sink.blob.writer.WriterOrchestratorStatusTest > shouldCheckForObjectStorageWriterCompletion PASSED\nRunning test: Test shouldCheckForObjectStorageCompletionWithException(io.odpf.firehose.sink.blob.writer.WriterOrchestratorStatusTest)\n\nio.odpf.firehose.sink.blob.writer.WriterOrchestratorStatusTest > shouldCheckForObjectStorageCompletionWithException PASSED\nRunning test: Test shouldCheckForLocalWriterCompletionWithException(io.odpf.firehose.sink.blob.writer.WriterOrchestratorStatusTest)\n\nio.odpf.firehose.sink.blob.writer.WriterOrchestratorStatusTest > shouldCheckForLocalWriterCompletionWithException PASSED\nRunning test: Test shouldCheckForLocalWriterCompletion(io.odpf.firehose.sink.blob.writer.WriterOrchestratorStatusTest)\n\nio.odpf.firehose.sink.blob.writer.WriterOrchestratorStatusTest > shouldCheckForLocalWriterCompletion PASSED\nRunning test: Test shouldNeedRotateWhenWriterDataSizeGreaterThanEqualToMaxFileSize(io.odpf.firehose.sink.blob.writer.local.policy.SizeBasedRotatingPolicyTest)\n\nio.odpf.firehose.sink.blob.writer.local.policy.SizeBasedRotatingPolicyTest > shouldNeedRotateWhenWriterDataSizeGreaterThanEqualToMaxFileSize PASSED\nRunning test: Test shouldNotNeedRotateWhenSizeBelowTheLimit(io.odpf.firehose.sink.blob.writer.local.policy.SizeBasedRotatingPolicyTest)\n\nio.odpf.firehose.sink.blob.writer.local.policy.SizeBasedRotatingPolicyTest > shouldNotNeedRotateWhenSizeBelowTheLimit PASSED\nRunning test: Test shouldThrowExceptionIfInvalid(io.odpf.firehose.sink.blob.writer.local.policy.SizeBasedRotatingPolicyTest)\n\nio.odpf.firehose.sink.blob.writer.local.policy.SizeBasedRotatingPolicyTest > shouldThrowExceptionIfInvalid PASSED\nRunning test: Test shouldNotRotateWhenElapsedTimeLessThanMaxRotatingDuration(io.odpf.firehose.sink.blob.writer.local.policy.TimeBasedRotatingPolicyTest)\n\nio.odpf.firehose.sink.blob.writer.local.policy.TimeBasedRotatingPolicyTest > shouldNotRotateWhenElapsedTimeLessThanMaxRotatingDuration PASSED\nRunning test: Test shouldRotateWhenElapsedTimeGreaterThanMaxRotatingDuration(io.odpf.firehose.sink.blob.writer.local.policy.TimeBasedRotatingPolicyTest)\n\nio.odpf.firehose.sink.blob.writer.local.policy.TimeBasedRotatingPolicyTest > shouldRotateWhenElapsedTimeGreaterThanMaxRotatingDuration PASSED\nRunning test: Test shouldThrowExceptionIfInvalid(io.odpf.firehose.sink.blob.writer.local.policy.TimeBasedRotatingPolicyTest)\n\nio.odpf.firehose.sink.blob.writer.local.policy.TimeBasedRotatingPolicyTest > shouldThrowExceptionIfInvalid PASSED\nRunning test: Test shouldDeleteFiles(io.odpf.firehose.sink.blob.writer.local.LocalStorageTest)\n\nio.odpf.firehose.sink.blob.writer.local.LocalStorageTest > shouldDeleteFiles PASSED\nRunning test: Test shouldCreatePartitioningPathForNestedKafkaMetadata(io.odpf.firehose.sink.blob.writer.local.TimePartitionedPathUtilsTest)\n\nio.odpf.firehose.sink.blob.writer.local.TimePartitionedPathUtilsTest > shouldCreatePartitioningPathForNestedKafkaMetadata PASSED\nRunning test: Test shouldCreatePartitionPathWhenKafkaMetadataIsNotNested(io.odpf.firehose.sink.blob.writer.local.TimePartitionedPathUtilsTest)\n\nio.odpf.firehose.sink.blob.writer.local.TimePartitionedPathUtilsTest > shouldCreatePartitionPathWhenKafkaMetadataIsNotNested PASSED\nRunning test: Test shouldCreateNonePartitioningPath(io.odpf.firehose.sink.blob.writer.local.TimePartitionedPathUtilsTest)\n\nio.odpf.firehose.sink.blob.writer.local.TimePartitionedPathUtilsTest > shouldCreateNonePartitioningPath PASSED\nRunning test: Test shouldCreateHourPartitioningPath(io.odpf.firehose.sink.blob.writer.local.TimePartitionedPathUtilsTest)\n\nio.odpf.firehose.sink.blob.writer.local.TimePartitionedPathUtilsTest > shouldCreateHourPartitioningPath PASSED\nRunning test: Test shouldCreateDayPartitioningPath(io.odpf.firehose.sink.blob.writer.local.TimePartitionedPathUtilsTest)\n\nio.odpf.firehose.sink.blob.writer.local.TimePartitionedPathUtilsTest > shouldCreateDayPartitioningPath PASSED\nRunning test: Test shouldRecordMetricOfFileSizeInBytes(io.odpf.firehose.sink.blob.writer.local.LocalFileCheckerTest)\n\nio.odpf.firehose.sink.blob.writer.local.LocalFileCheckerTest > shouldRecordMetricOfFileSizeInBytes PASSED\nRunning test: Test shouldRemoveFromMapIfCloseFails(io.odpf.firehose.sink.blob.writer.local.LocalFileCheckerTest)\n\nio.odpf.firehose.sink.blob.writer.local.LocalFileCheckerTest > shouldRemoveFromMapIfCloseFails PASSED\nRunning test: Test shouldProduceFileMeta(io.odpf.firehose.sink.blob.writer.local.LocalFileCheckerTest)\n\nio.odpf.firehose.sink.blob.writer.local.LocalFileCheckerTest > shouldProduceFileMeta PASSED\nRunning test: Test shouldRotateSomeBasedOnPolicy(io.odpf.firehose.sink.blob.writer.local.LocalFileCheckerTest)\n\nio.odpf.firehose.sink.blob.writer.local.LocalFileCheckerTest > shouldRotateSomeBasedOnPolicy PASSED\nRunning test: Test shouldCaptureValueOfFileOpenCount(io.odpf.firehose.sink.blob.writer.local.LocalFileCheckerTest)\n\nio.odpf.firehose.sink.blob.writer.local.LocalFileCheckerTest > shouldCaptureValueOfFileOpenCount PASSED\nRunning test: Test shouldRecordMetricOfSuccessfullyClosedFiles(io.odpf.firehose.sink.blob.writer.local.LocalFileCheckerTest)\n\nio.odpf.firehose.sink.blob.writer.local.LocalFileCheckerTest > shouldRecordMetricOfSuccessfullyClosedFiles PASSED\nRunning test: Test shouldNotRotateBaseOnPolicy(io.odpf.firehose.sink.blob.writer.local.LocalFileCheckerTest)\n\nio.odpf.firehose.sink.blob.writer.local.LocalFileCheckerTest > shouldNotRotateBaseOnPolicy PASSED\nRunning test: Test shouldRecordMetricOfClosingTimeDuration(io.odpf.firehose.sink.blob.writer.local.LocalFileCheckerTest)\n\nio.odpf.firehose.sink.blob.writer.local.LocalFileCheckerTest > shouldRecordMetricOfClosingTimeDuration PASSED\nRunning test: Test shouldRecordMetricOfFailedClosedFiles(io.odpf.firehose.sink.blob.writer.local.LocalFileCheckerTest)\n\nio.odpf.firehose.sink.blob.writer.local.LocalFileCheckerTest > shouldRecordMetricOfFailedClosedFiles PASSED\nRunning test: Test shouldRotateBasedOnPolicy(io.odpf.firehose.sink.blob.writer.local.LocalFileCheckerTest)\n\nio.odpf.firehose.sink.blob.writer.local.LocalFileCheckerTest > shouldRotateBasedOnPolicy PASSED\nRunning test: Test shouldFilterFinishedFuture(io.odpf.firehose.sink.blob.writer.remote.BlobStorageWriterFutureHandlerTest)\n\nio.odpf.firehose.sink.blob.writer.remote.BlobStorageWriterFutureHandlerTest > shouldFilterFinishedFuture PASSED\nRunning test: Test shouldNotFilterUnfinishedFuture(io.odpf.firehose.sink.blob.writer.remote.BlobStorageWriterFutureHandlerTest)\n\nio.odpf.firehose.sink.blob.writer.remote.BlobStorageWriterFutureHandlerTest > shouldNotFilterUnfinishedFuture PASSED\nRunning test: Test shouldThrowException(io.odpf.firehose.sink.blob.writer.remote.BlobStorageWriterFutureHandlerTest)\n\nio.odpf.firehose.sink.blob.writer.remote.BlobStorageWriterFutureHandlerTest > shouldThrowException PASSED\nRunning test: Test shouldThrowFailedException(io.odpf.firehose.sink.blob.writer.remote.BlobStorageCheckerTest)\n\nio.odpf.firehose.sink.blob.writer.remote.BlobStorageCheckerTest > shouldThrowFailedException PASSED\nRunning test: Test shouldAddToFlushedIfUploadIsFinished(io.odpf.firehose.sink.blob.writer.remote.BlobStorageCheckerTest)\n\nio.odpf.firehose.sink.blob.writer.remote.BlobStorageCheckerTest > shouldAddToFlushedIfUploadIsFinished PASSED\nRunning test: Test shouldRecordMetricOfUploadFailedCountWhenUploadFutureThrowsInterruptedException(io.odpf.firehose.sink.blob.writer.remote.BlobStorageCheckerTest)\n\nio.odpf.firehose.sink.blob.writer.remote.BlobStorageCheckerTest > shouldRecordMetricOfUploadFailedCountWhenUploadFutureThrowsInterruptedException PASSED\nRunning test: Test shouldRecordMetricOfFileUploadedCount(io.odpf.firehose.sink.blob.writer.remote.BlobStorageCheckerTest)\n\nio.odpf.firehose.sink.blob.writer.remote.BlobStorageCheckerTest > shouldRecordMetricOfFileUploadedCount PASSED\nRunning test: Test shouldRecordMetricOfUploadDuration(io.odpf.firehose.sink.blob.writer.remote.BlobStorageCheckerTest)\n\nio.odpf.firehose.sink.blob.writer.remote.BlobStorageCheckerTest > shouldRecordMetricOfUploadDuration PASSED\nRunning test: Test shouldNotAddToFlushedIfUploadIsStillRunning(io.odpf.firehose.sink.blob.writer.remote.BlobStorageCheckerTest)\n\nio.odpf.firehose.sink.blob.writer.remote.BlobStorageCheckerTest > shouldNotAddToFlushedIfUploadIsStillRunning PASSED\nRunning test: Test shouldRecordMetricOfFileUploadBytes(io.odpf.firehose.sink.blob.writer.remote.BlobStorageCheckerTest)\n\nio.odpf.firehose.sink.blob.writer.remote.BlobStorageCheckerTest > shouldRecordMetricOfFileUploadBytes PASSED\nRunning test: Test shouldGetTimeStampFromMessage(io.odpf.firehose.sink.blob.message.RecordTest)\n\nio.odpf.firehose.sink.blob.message.RecordTest > shouldGetTimeStampFromMessage PASSED\nRunning test: Test shouldGetTopicFromMetaData(io.odpf.firehose.sink.blob.message.RecordTest)\n\nio.odpf.firehose.sink.blob.message.RecordTest > shouldGetTopicFromMetaData PASSED\nRunning test: Test shouldGetTopicFromNestedMetaData(io.odpf.firehose.sink.blob.message.RecordTest)\n\nio.odpf.firehose.sink.blob.message.RecordTest > shouldGetTopicFromNestedMetaData PASSED\nRunning test: Test shouldCreateKafkaDynamicMessageWhenMetadataIsNested(io.odpf.firehose.sink.blob.message.KafkaMetadataUtilsTest)\n\nio.odpf.firehose.sink.blob.message.KafkaMetadataUtilsTest > shouldCreateKafkaDynamicMessageWhenMetadataIsNested PASSED\nRunning test: Test shouldCreateKafkaMetadataDynamicMessage(io.odpf.firehose.sink.blob.message.KafkaMetadataUtilsTest)\n\nio.odpf.firehose.sink.blob.message.KafkaMetadataUtilsTest > shouldCreateKafkaMetadataDynamicMessage PASSED\nRunning test: Test shouldNotThrowExceptionWhenUnknownFieldExistWhenConfigIsNotSet(io.odpf.firehose.sink.blob.message.MessageDeSerializerTest)\n\nio.odpf.firehose.sink.blob.message.MessageDeSerializerTest > shouldNotThrowExceptionWhenUnknownFieldExistWhenConfigIsNotSet PASSED\nRunning test: Test shouldThrowExceptionWhenLogMessageIsNull(io.odpf.firehose.sink.blob.message.MessageDeSerializerTest)\n\nio.odpf.firehose.sink.blob.message.MessageDeSerializerTest > shouldThrowExceptionWhenLogMessageIsNull PASSED\nRunning test: Test shouldCreateRecord(io.odpf.firehose.sink.blob.message.MessageDeSerializerTest)\n\nio.odpf.firehose.sink.blob.message.MessageDeSerializerTest > shouldCreateRecord PASSED\nRunning test: Test shouldThrowExceptionWhenLogMessageIsEmpty(io.odpf.firehose.sink.blob.message.MessageDeSerializerTest)\n\nio.odpf.firehose.sink.blob.message.MessageDeSerializerTest > shouldThrowExceptionWhenLogMessageIsEmpty PASSED\nRunning test: Test shouldThrowDeserializerExceptionWhenProtoParsingThrowException(io.odpf.firehose.sink.blob.message.MessageDeSerializerTest)\n\nio.odpf.firehose.sink.blob.message.MessageDeSerializerTest > shouldThrowDeserializerExceptionWhenProtoParsingThrowException PASSED\nRunning test: Test shouldAlwaysCreateRecordWithMetadata(io.odpf.firehose.sink.blob.message.MessageDeSerializerTest)\n\nio.odpf.firehose.sink.blob.message.MessageDeSerializerTest > shouldAlwaysCreateRecordWithMetadata PASSED\nRunning test: Test shouldThrowExceptionWhenUnknownFieldExist(io.odpf.firehose.sink.blob.message.MessageDeSerializerTest)\n\nio.odpf.firehose.sink.blob.message.MessageDeSerializerTest > shouldThrowExceptionWhenUnknownFieldExist PASSED\nRunning test: Test shouldNotSubmitTask(io.odpf.firehose.sink.SinkPoolTest)\n\nio.odpf.firehose.sink.SinkPoolTest > shouldNotSubmitTask PASSED\nRunning test: Test shouldFetchFinishedFutures(io.odpf.firehose.sink.SinkPoolTest)\n\nio.odpf.firehose.sink.SinkPoolTest > shouldFetchFinishedFutures PASSED\nRunning test: Test shouldSubmitTask(io.odpf.firehose.sink.SinkPoolTest)\n\nio.odpf.firehose.sink.SinkPoolTest > shouldSubmitTask PASSED\nRunning test: Test shouldUseKafkaRecordKey(io.odpf.firehose.sink.jdbc.QueryTemplateTest)\n\nio.odpf.firehose.sink.jdbc.QueryTemplateTest > shouldUseKafkaRecordKey PASSED\nRunning test: Test shouldUseKafkaRecordMessage(io.odpf.firehose.sink.jdbc.QueryTemplateTest)\n\nio.odpf.firehose.sink.jdbc.QueryTemplateTest > shouldUseKafkaRecordMessage PASSED\nRunning test: Test shouldAddNestedColumnsToQuery(io.odpf.firehose.sink.jdbc.QueryTemplateTest)\n\nio.odpf.firehose.sink.jdbc.QueryTemplateTest > shouldAddNestedColumnsToQuery PASSED\nRunning test: Test shouldNotUpdateWhenAllColumnsAreInUniqueSet(io.odpf.firehose.sink.jdbc.QueryTemplateTest)\n\nio.odpf.firehose.sink.jdbc.QueryTemplateTest > shouldNotUpdateWhenAllColumnsAreInUniqueSet PASSED\nRunning test: Test shouldUseSingleUniqueKeyColumnForOnConflictResolution(io.odpf.firehose.sink.jdbc.QueryTemplateTest)\n\nio.odpf.firehose.sink.jdbc.QueryTemplateTest > shouldUseSingleUniqueKeyColumnForOnConflictResolution PASSED\nRunning test: Test shouldUseMultipleUniqueKeyColumnForOnConflictResolution(io.odpf.firehose.sink.jdbc.QueryTemplateTest)\n\nio.odpf.firehose.sink.jdbc.QueryTemplateTest > shouldUseMultipleUniqueKeyColumnForOnConflictResolution PASSED\nRunning test: Test shouldDoSimpleInsertWhenNoUniqueKeysArePresent(io.odpf.firehose.sink.jdbc.QueryTemplateTest)\n\nio.odpf.firehose.sink.jdbc.QueryTemplateTest > shouldDoSimpleInsertWhenNoUniqueKeysArePresent PASSED\nRunning test: Test nestedMessageWithNestedPropertiesShouldBeMapped(io.odpf.firehose.sink.jdbc.ProtoToFieldMapperTest)\n\nio.odpf.firehose.sink.jdbc.ProtoToFieldMapperTest > nestedMessageWithNestedPropertiesShouldBeMapped PASSED\nRunning test: Test shouldThrowClassNotFoundExceptionOnInvalidClasName(io.odpf.firehose.sink.jdbc.ProtoToFieldMapperTest)\n\nio.odpf.firehose.sink.jdbc.ProtoToFieldMapperTest > shouldThrowClassNotFoundExceptionOnInvalidClasName PASSED\nRunning test: Test shouldContainNanoSecondsInTimestamp(io.odpf.firehose.sink.jdbc.ProtoToFieldMapperTest)\n\nio.odpf.firehose.sink.jdbc.ProtoToFieldMapperTest > shouldContainNanoSecondsInTimestamp PASSED\nRunning test: Test messageWithMapShouldBeConvertedToJson(io.odpf.firehose.sink.jdbc.ProtoToFieldMapperTest)\n\nio.odpf.firehose.sink.jdbc.ProtoToFieldMapperTest > messageWithMapShouldBeConvertedToJson PASSED\nRunning test: Test getFieldAtIndex(io.odpf.firehose.sink.jdbc.ProtoToFieldMapperTest)\n\nio.odpf.firehose.sink.jdbc.ProtoToFieldMapperTest > getFieldAtIndex PASSED\nRunning test: Test nestedRepeatedMessageShouldBeJson(io.odpf.firehose.sink.jdbc.ProtoToFieldMapperTest)\n\nio.odpf.firehose.sink.jdbc.ProtoToFieldMapperTest > nestedRepeatedMessageShouldBeJson PASSED\nRunning test: Test nestedRepeatedEmptyMessageShouldBeEmptyJson(io.odpf.firehose.sink.jdbc.ProtoToFieldMapperTest)\n\nio.odpf.firehose.sink.jdbc.ProtoToFieldMapperTest > nestedRepeatedEmptyMessageShouldBeEmptyJson PASSED\nRunning test: Test getField(io.odpf.firehose.sink.jdbc.ProtoToFieldMapperTest)\n\nio.odpf.firehose.sink.jdbc.ProtoToFieldMapperTest > getField PASSED\nRunning test: Test shouldCloseStencilClient(io.odpf.firehose.sink.jdbc.JdbcSinkTest)\n\nio.odpf.firehose.sink.jdbc.JdbcSinkTest > shouldCloseStencilClient PASSED\nRunning test: Test shouldPrepareBatchForQueries(io.odpf.firehose.sink.jdbc.JdbcSinkTest)\n\nio.odpf.firehose.sink.jdbc.JdbcSinkTest > shouldPrepareBatchForQueries PASSED\nRunning test: Test shouldReturnEmptyListWhenNoException(io.odpf.firehose.sink.jdbc.JdbcSinkTest)\n\nio.odpf.firehose.sink.jdbc.JdbcSinkTest > shouldReturnEmptyListWhenNoException PASSED\nRunning test: Test shouldReleaseConnectionOnException(io.odpf.firehose.sink.jdbc.JdbcSinkTest)\n\nio.odpf.firehose.sink.jdbc.JdbcSinkTest > shouldReleaseConnectionOnException PASSED\nRunning test: Test shouldLogQueryString(io.odpf.firehose.sink.jdbc.JdbcSinkTest)\n\nio.odpf.firehose.sink.jdbc.JdbcSinkTest > shouldLogQueryString PASSED\nRunning test: Test shouldUseBatchForPushMessage(io.odpf.firehose.sink.jdbc.JdbcSinkTest)\n\nio.odpf.firehose.sink.jdbc.JdbcSinkTest > shouldUseBatchForPushMessage PASSED\nRunning test: Test shouldNotReleaseConnectionWhenNull(io.odpf.firehose.sink.jdbc.JdbcSinkTest)\n\nio.odpf.firehose.sink.jdbc.JdbcSinkTest > shouldNotReleaseConnectionWhenNull PASSED\nRunning test: Test shouldCloseConnectionPool(io.odpf.firehose.sink.jdbc.JdbcSinkTest)\n\nio.odpf.firehose.sink.jdbc.JdbcSinkTest > shouldCloseConnectionPool PASSED\nRunning test: Test shouldPopulateQueryString(io.odpf.firehose.sink.jdbc.JdbcSinkTest)\n\nio.odpf.firehose.sink.jdbc.JdbcSinkTest > shouldPopulateQueryString PASSED\nRunning test: Test shouldReleaseConnectionAfterSuccessfulQuery(io.odpf.firehose.sink.jdbc.JdbcSinkTest)\n\nio.odpf.firehose.sink.jdbc.JdbcSinkTest > shouldReleaseConnectionAfterSuccessfulQuery PASSED\nRunning test: Test shouldLogDbResponse(io.odpf.firehose.sink.jdbc.JdbcSinkTest)\n\nio.odpf.firehose.sink.jdbc.JdbcSinkTest > shouldLogDbResponse PASSED\nRunning test: Test shouldCallStartExecutionBeforeCaptureSuccessAttempt(io.odpf.firehose.sink.jdbc.JdbcSinkTest)\n\nio.odpf.firehose.sink.jdbc.JdbcSinkTest > shouldCallStartExecutionBeforeCaptureSuccessAttempt PASSED\nRunning test: Test shouldLogWhenClosingConnection(io.odpf.firehose.sink.jdbc.JdbcSinkTest)\n\nio.odpf.firehose.sink.jdbc.JdbcSinkTest > shouldLogWhenClosingConnection PASSED\nRunning test: Test shouldThrowIOExceptionWhenFailToClose(io.odpf.firehose.sink.jdbc.JdbcSinkTest)\n\nio.odpf.firehose.sink.jdbc.JdbcSinkTest > shouldThrowIOExceptionWhenFailToClose PASSED\nRunning test: Test shouldGetConnectionFromDataSource(io.odpf.firehose.sink.jdbc.HikariJdbcConnectionPoolTest)\n\nio.odpf.firehose.sink.jdbc.HikariJdbcConnectionPoolTest > shouldGetConnectionFromDataSource PASSED\nRunning test: Test shouldCloseTheConnectionWhenReleased(io.odpf.firehose.sink.jdbc.HikariJdbcConnectionPoolTest)\n\nio.odpf.firehose.sink.jdbc.HikariJdbcConnectionPoolTest > shouldCloseTheConnectionWhenReleased PASSED\nRunning test: Test shouldCloseDataSourceWhenShutdown(io.odpf.firehose.sink.jdbc.HikariJdbcConnectionPoolTest)\n\nio.odpf.firehose.sink.jdbc.HikariJdbcConnectionPoolTest > shouldCloseDataSourceWhenShutdown PASSED\nRunning test: Test shouldParseTheMapFieldAsString(io.odpf.firehose.sink.jdbc.field.JdbcMapFieldTest)\n\nio.odpf.firehose.sink.jdbc.field.JdbcMapFieldTest > shouldParseTheMapFieldAsString PASSED\nRunning test: Test shouldParseTheMapFieldWithEmptyValueAsString(io.odpf.firehose.sink.jdbc.field.JdbcMapFieldTest)\n\nio.odpf.firehose.sink.jdbc.field.JdbcMapFieldTest > shouldParseTheMapFieldWithEmptyValueAsString PASSED\nRunning test: Test shouldBeAbleToParseStringFields(io.odpf.firehose.sink.jdbc.field.JdbcMapFieldTest)\n\nio.odpf.firehose.sink.jdbc.field.JdbcMapFieldTest > shouldBeAbleToParseStringFields PASSED\nRunning test: Test shouldBeAbleToParseMapFields(io.odpf.firehose.sink.jdbc.field.JdbcMapFieldTest)\n\nio.odpf.firehose.sink.jdbc.field.JdbcMapFieldTest > shouldBeAbleToParseMapFields PASSED\nRunning test: Test shouldParseTheTimestampFieldAsString(io.odpf.firehose.sink.jdbc.field.message.DBTimestampFieldTest)\n\nio.odpf.firehose.sink.jdbc.field.message.DBTimestampFieldTest > shouldParseTheTimestampFieldAsString PASSED\nRunning test: Test shouldBeAbleToParseTimestampFields(io.odpf.firehose.sink.jdbc.field.message.DBTimestampFieldTest)\n\nio.odpf.firehose.sink.jdbc.field.message.DBTimestampFieldTest > shouldBeAbleToParseTimestampFields PASSED\nRunning test: Test shouldNotBeAbleToParseStringFields(io.odpf.firehose.sink.jdbc.field.message.DBTimestampFieldTest)\n\nio.odpf.firehose.sink.jdbc.field.message.DBTimestampFieldTest > shouldNotBeAbleToParseStringFields PASSED\nRunning test: Test shouldParseTheMessageFieldAsString(io.odpf.firehose.sink.jdbc.field.message.DBDefaultMessageFieldTest)\n\nio.odpf.firehose.sink.jdbc.field.message.DBDefaultMessageFieldTest > shouldParseTheMessageFieldAsString PASSED\nRunning test: Test shouldNotBeAbleToParseNormalFields(io.odpf.firehose.sink.jdbc.field.message.DBDefaultMessageFieldTest)\n\nio.odpf.firehose.sink.jdbc.field.message.DBDefaultMessageFieldTest > shouldNotBeAbleToParseNormalFields PASSED\nRunning test: Test shouldBeAbleToParseMessageFields(io.odpf.firehose.sink.jdbc.field.message.DBDefaultMessageFieldTest)\n\nio.odpf.firehose.sink.jdbc.field.message.DBDefaultMessageFieldTest > shouldBeAbleToParseMessageFields PASSED\nRunning test: Test shouldNotBeAbleToParseStringFields(io.odpf.firehose.sink.jdbc.field.message.DBCollectionFieldTest)\n\nio.odpf.firehose.sink.jdbc.field.message.DBCollectionFieldTest > shouldNotBeAbleToParseStringFields PASSED\nRunning test: Test shouldBeAbleToParseCollectionFields(io.odpf.firehose.sink.jdbc.field.message.DBCollectionFieldTest)\n\nio.odpf.firehose.sink.jdbc.field.message.DBCollectionFieldTest > shouldBeAbleToParseCollectionFields PASSED\nRunning test: Test shouldParseTheCollectionFieldAsString(io.odpf.firehose.sink.jdbc.field.message.DBCollectionFieldTest)\n\nio.odpf.firehose.sink.jdbc.field.message.DBCollectionFieldTest > shouldParseTheCollectionFieldAsString PASSED\nRunning test: Test shouldCreateChannelPoolWithHostAndPort(io.odpf.firehose.sink.grpc.GrpcSinkFactoryTest)\n\nio.odpf.firehose.sink.grpc.GrpcSinkFactoryTest > shouldCreateChannelPoolWithHostAndPort PASSED\nRunning test: Test shouldCloseStencilClient(io.odpf.firehose.sink.grpc.GrpcSinkTest)\n\nio.odpf.firehose.sink.grpc.GrpcSinkTest > shouldCloseStencilClient PASSED\nRunning test: Test shouldReturnBackListOfFailedMessages(io.odpf.firehose.sink.grpc.GrpcSinkTest)\n\nio.odpf.firehose.sink.grpc.GrpcSinkTest > shouldReturnBackListOfFailedMessages PASSED\nRunning test: Test shouldLogWhenClosingConnection(io.odpf.firehose.sink.grpc.GrpcSinkTest)\n\nio.odpf.firehose.sink.grpc.GrpcSinkTest > shouldLogWhenClosingConnection PASSED\nRunning test: Test shouldWriteToSink(io.odpf.firehose.sink.grpc.GrpcSinkTest)\n\nio.odpf.firehose.sink.grpc.GrpcSinkTest > shouldWriteToSink PASSED\nRunning test: Test shouldReturnErrorWhenGrpcException(io.odpf.firehose.sink.grpc.GrpcClientTest)\n\nio.odpf.firehose.sink.grpc.GrpcClientTest > shouldReturnErrorWhenGrpcException PASSED\nRunning test: Test shouldCallTheGivenRpcMethodAndGetErrorResponse(io.odpf.firehose.sink.grpc.GrpcClientTest)\n\nio.odpf.firehose.sink.grpc.GrpcClientTest > shouldCallTheGivenRpcMethodAndGetErrorResponse PASSED\nRunning test: Test shouldCallTheGivenRpcMethodAndGetSuccessResponse(io.odpf.firehose.sink.grpc.GrpcClientTest)\n\nio.odpf.firehose.sink.grpc.GrpcClientTest > shouldCallTheGivenRpcMethodAndGetSuccessResponse PASSED\nRunning test: Test shouldCallTheGivenRpcMethodWithHeaders(io.odpf.firehose.sink.grpc.GrpcClientTest)\n\nio.odpf.firehose.sink.grpc.GrpcClientTest > shouldCallTheGivenRpcMethodWithHeaders PASSED\nRunning test: Test shouldReturnErrorWhenBytesAreNull(io.odpf.firehose.sink.grpc.GrpcClientTest)\n\nio.odpf.firehose.sink.grpc.GrpcClientTest > shouldReturnErrorWhenBytesAreNull PASSED\nRunning test: Test shouldNotWrapEntityIfNotSet(io.odpf.firehose.sink.http.request.entity.RequestEntityBuilderTest)\n\nio.odpf.firehose.sink.http.request.entity.RequestEntityBuilderTest > shouldNotWrapEntityIfNotSet PASSED\nRunning test: Test shouldCreateStringEntity(io.odpf.firehose.sink.http.request.entity.RequestEntityBuilderTest)\n\nio.odpf.firehose.sink.http.request.entity.RequestEntityBuilderTest > shouldCreateStringEntity PASSED\nRunning test: Test shouldWrapEntityIfSet(io.odpf.firehose.sink.http.request.entity.RequestEntityBuilderTest)\n\nio.odpf.firehose.sink.http.request.entity.RequestEntityBuilderTest > shouldWrapEntityIfSet PASSED\nRunning test: Test shouldWrapMessageToASingleRequest(io.odpf.firehose.sink.http.request.create.BatchRequestCreatorTest)\n\nio.odpf.firehose.sink.http.request.create.BatchRequestCreatorTest > shouldWrapMessageToASingleRequest PASSED\nRunning test: Test shouldProperlyBuildRequests(io.odpf.firehose.sink.http.request.create.BatchRequestCreatorTest)\n\nio.odpf.firehose.sink.http.request.create.BatchRequestCreatorTest > shouldProperlyBuildRequests PASSED\nRunning test: Test shouldWrapMessageToASingleRequestWhenPostRequest(io.odpf.firehose.sink.http.request.create.BatchRequestCreatorTest)\n\nio.odpf.firehose.sink.http.request.create.BatchRequestCreatorTest > shouldWrapMessageToASingleRequestWhenPostRequest PASSED\nRunning test: Test shouldSetRequestPropertiesOnlyOnce(io.odpf.firehose.sink.http.request.create.BatchRequestCreatorTest)\n\nio.odpf.firehose.sink.http.request.create.BatchRequestCreatorTest > shouldSetRequestPropertiesOnlyOnce PASSED\nRunning test: Test shouldWrapMessagesToASingleRequest(io.odpf.firehose.sink.http.request.create.BatchRequestCreatorTest)\n\nio.odpf.firehose.sink.http.request.create.BatchRequestCreatorTest > shouldWrapMessagesToASingleRequest PASSED\nRunning test: Test shouldWrapMessageToASingleRequestWhenPatchRequest(io.odpf.firehose.sink.http.request.create.BatchRequestCreatorTest)\n\nio.odpf.firehose.sink.http.request.create.BatchRequestCreatorTest > shouldWrapMessageToASingleRequestWhenPatchRequest PASSED\nRunning test: Test shouldSetRequestPropertiesMultipleTimes(io.odpf.firehose.sink.http.request.create.IndividualRequestCreatorTest)\n\nio.odpf.firehose.sink.http.request.create.IndividualRequestCreatorTest > shouldSetRequestPropertiesMultipleTimes PASSED\nRunning test: Test shouldNotWrapEntityToArrayIfNot(io.odpf.firehose.sink.http.request.create.IndividualRequestCreatorTest)\n\nio.odpf.firehose.sink.http.request.create.IndividualRequestCreatorTest > shouldNotWrapEntityToArrayIfNot PASSED\nRunning test: Test shouldProduceIndividualRequests(io.odpf.firehose.sink.http.request.create.IndividualRequestCreatorTest)\n\nio.odpf.firehose.sink.http.request.create.IndividualRequestCreatorTest > shouldProduceIndividualRequests PASSED\nRunning test: Test shouldWrapEntityToArrayIfSet(io.odpf.firehose.sink.http.request.create.IndividualRequestCreatorTest)\n\nio.odpf.firehose.sink.http.request.create.IndividualRequestCreatorTest > shouldWrapEntityToArrayIfSet PASSED\nRunning test: Test shouldProduceIndividualRequestsWhenPatchRequest(io.odpf.firehose.sink.http.request.create.IndividualRequestCreatorTest)\n\nio.odpf.firehose.sink.http.request.create.IndividualRequestCreatorTest > shouldProduceIndividualRequestsWhenPatchRequest PASSED\nRunning test: Test shouldProduceIndividualRequestsWhenPUTRequest(io.odpf.firehose.sink.http.request.create.IndividualRequestCreatorTest)\n\nio.odpf.firehose.sink.http.request.create.IndividualRequestCreatorTest > shouldProduceIndividualRequestsWhenPUTRequest PASSED\nRunning test: Test shouldAddParamMapToUri(io.odpf.firehose.sink.http.request.uri.UriBuilderTest)\n\nio.odpf.firehose.sink.http.request.uri.UriBuilderTest > shouldAddParamMapToUri PASSED\nRunning test: Test shouldUseLogKeyWhenSourceParamTypeIsKey(io.odpf.firehose.sink.http.request.uri.UriBuilderTest)\n\nio.odpf.firehose.sink.http.request.uri.UriBuilderTest > shouldUseLogKeyWhenSourceParamTypeIsKey PASSED\nRunning test: Test shouldHandleMultipleParam(io.odpf.firehose.sink.http.request.uri.UriBuilderTest)\n\nio.odpf.firehose.sink.http.request.uri.UriBuilderTest > shouldHandleMultipleParam PASSED\nRunning test: Test shouldUseLogMessageWhenSourceParamTypeIsMessage(io.odpf.firehose.sink.http.request.uri.UriBuilderTest)\n\nio.odpf.firehose.sink.http.request.uri.UriBuilderTest > shouldUseLogMessageWhenSourceParamTypeIsMessage PASSED\nRunning test: Test shouldReturnParsedURIInstanceBasedOnBaseUrlForDynamicURLs(io.odpf.firehose.sink.http.request.uri.UriBuilderTest)\n\nio.odpf.firehose.sink.http.request.uri.UriBuilderTest > shouldReturnParsedURIInstanceBasedOnBaseUrlForDynamicURLs PASSED\nRunning test: Test shouldReturnURIInstanceBasedOnBaseUrl(io.odpf.firehose.sink.http.request.uri.UriBuilderTest)\n\nio.odpf.firehose.sink.http.request.uri.UriBuilderTest > shouldReturnURIInstanceBasedOnBaseUrl PASSED\nRunning test: Test shouldReturnTheServiceUrlAsItIsWhenServiceUrlIsNotParametrizedAndParserModeIsMessage(io.odpf.firehose.sink.http.request.uri.UriParserTest)\n\nio.odpf.firehose.sink.http.request.uri.UriParserTest > shouldReturnTheServiceUrlAsItIsWhenServiceUrlIsNotParametrizedAndParserModeIsMessage PASSED\nRunning test: Test shouldThrowIllegalArgumentExceptionWhenEmptyServiceUrlIsProvided(io.odpf.firehose.sink.http.request.uri.UriParserTest)\n\nio.odpf.firehose.sink.http.request.uri.UriParserTest > shouldThrowIllegalArgumentExceptionWhenEmptyServiceUrlIsProvided PASSED\nRunning test: Test shouldSetTheFloatValueInServiceUrlFromGivenProtoIndexWhenServiceUrlIsParametrizedAndParserModeIsMessage(io.odpf.firehose.sink.http.request.uri.UriParserTest)\n\nio.odpf.firehose.sink.http.request.uri.UriParserTest > shouldSetTheFloatValueInServiceUrlFromGivenProtoIndexWhenServiceUrlIsParametrizedAndParserModeIsMessage PASSED\nRunning test: Test shouldSetTheValueInServiceUrlFromGivenProtoIndexWhenServiceUrlIsParametrizedAndParserModeIsKey(io.odpf.firehose.sink.http.request.uri.UriParserTest)\n\nio.odpf.firehose.sink.http.request.uri.UriParserTest > shouldSetTheValueInServiceUrlFromGivenProtoIndexWhenServiceUrlIsParametrizedAndParserModeIsKey PASSED\nRunning test: Test shouldThrowInvalidConfigurationExceptionWhenNoUrlAndArgumentsAreProvided(io.odpf.firehose.sink.http.request.uri.UriParserTest)\n\nio.odpf.firehose.sink.http.request.uri.UriParserTest > shouldThrowInvalidConfigurationExceptionWhenNoUrlAndArgumentsAreProvided PASSED\nRunning test: Test shouldSetTheValueInServiceUrlFromGivenProtoIndexWhenServiceUrlIsParametrizedAndParserModeIsMessage(io.odpf.firehose.sink.http.request.uri.UriParserTest)\n\nio.odpf.firehose.sink.http.request.uri.UriParserTest > shouldSetTheValueInServiceUrlFromGivenProtoIndexWhenServiceUrlIsParametrizedAndParserModeIsMessage PASSED\nRunning test: Test shouldSetTheLongValueInServiceUrlFromGivenProtoIndexWhenServiceUrlIsParametrizedAndParserModeIsMessage(io.odpf.firehose.sink.http.request.uri.UriParserTest)\n\nio.odpf.firehose.sink.http.request.uri.UriParserTest > shouldSetTheLongValueInServiceUrlFromGivenProtoIndexWhenServiceUrlIsParametrizedAndParserModeIsMessage PASSED\nRunning test: Test shouldCatchInvalidProtocolBufferExceptionFromProtoParserAndThrowIllegalArgumentException(io.odpf.firehose.sink.http.request.uri.UriParserTest)\n\nio.odpf.firehose.sink.http.request.uri.UriParserTest > shouldCatchInvalidProtocolBufferExceptionFromProtoParserAndThrowIllegalArgumentException PASSED\nRunning test: Test shouldCatchNumberFormatExceptionAndThrowIllegalArgumentsException(io.odpf.firehose.sink.http.request.uri.UriParserTest)\n\nio.odpf.firehose.sink.http.request.uri.UriParserTest > shouldCatchNumberFormatExceptionAndThrowIllegalArgumentsException PASSED\nRunning test: Test shouldReturnTheServiceUrlAsItIsWhenServiceUrlIsNotParametrizedAndParserModeIsKey(io.odpf.firehose.sink.http.request.uri.UriParserTest)\n\nio.odpf.firehose.sink.http.request.uri.UriParserTest > shouldReturnTheServiceUrlAsItIsWhenServiceUrlIsNotParametrizedAndParserModeIsKey PASSED\nRunning test: Test shouldThrowIllegalArgumentsExceptionWhenDescriptorIsNotFoundForTheProtoIndexProvided(io.odpf.firehose.sink.http.request.uri.UriParserTest)\n\nio.odpf.firehose.sink.http.request.uri.UriParserTest > shouldThrowIllegalArgumentsExceptionWhenDescriptorIsNotFoundForTheProtoIndexProvided PASSED\nRunning test: Test shouldReturnSerializedValueOfMessage(io.odpf.firehose.sink.http.request.body.JsonBodyTest)\n\nio.odpf.firehose.sink.http.request.body.JsonBodyTest > shouldReturnSerializedValueOfMessage PASSED\nRunning test: Test shouldReturnSameSizeOfBodyAsEsbMessage(io.odpf.firehose.sink.http.request.body.JsonBodyTest)\n\nio.odpf.firehose.sink.http.request.body.JsonBodyTest > shouldReturnSameSizeOfBodyAsEsbMessage PASSED\nRunning test: Test shouldReturnBatchRequestWhenPrameterSourceIsDisabledAndServiceUrlIsConstant(io.odpf.firehose.sink.http.request.RequestFactoryTest)\n\nio.odpf.firehose.sink.http.request.RequestFactoryTest > shouldReturnBatchRequestWhenPrameterSourceIsDisabledAndServiceUrlIsConstant PASSED\nRunning test: Test shouldReturnParameterizedRequstWhenParameterSourceIsNotDisableAndPlacementTypeIsQuery(io.odpf.firehose.sink.http.request.RequestFactoryTest)\n\nio.odpf.firehose.sink.http.request.RequestFactoryTest > shouldReturnParameterizedRequstWhenParameterSourceIsNotDisableAndPlacementTypeIsQuery PASSED\nRunning test: Test shouldReturnParameterizedRequstWhenParameterSourceIsNotDisableAndPlacementTypeIsHeader(io.odpf.firehose.sink.http.request.RequestFactoryTest)\n\nio.odpf.firehose.sink.http.request.RequestFactoryTest > shouldReturnParameterizedRequstWhenParameterSourceIsNotDisableAndPlacementTypeIsHeader PASSED\nRunning test: Test shouldReturnDynamicUrlRequestWhenPrameterSourceIsDisabledAndServiceUrlIsNotParametrised(io.odpf.firehose.sink.http.request.RequestFactoryTest)\n\nio.odpf.firehose.sink.http.request.RequestFactoryTest > shouldReturnDynamicUrlRequestWhenPrameterSourceIsDisabledAndServiceUrlIsNotParametrised PASSED\nRunning test: Test shouldGenerateBaseHeader(io.odpf.firehose.sink.http.request.header.HeaderBuilderTest)\n\nio.odpf.firehose.sink.http.request.header.HeaderBuilderTest > shouldGenerateBaseHeader PASSED\nRunning test: Test shouldParseWithNilHeadersInBetween(io.odpf.firehose.sink.http.request.header.HeaderBuilderTest)\n\nio.odpf.firehose.sink.http.request.header.HeaderBuilderTest > shouldParseWithNilHeadersInBetween PASSED\nRunning test: Test shouldUseLogMessageWhenSourceTypeIsMessage(io.odpf.firehose.sink.http.request.header.HeaderBuilderTest)\n\nio.odpf.firehose.sink.http.request.header.HeaderBuilderTest > shouldUseLogMessageWhenSourceTypeIsMessage PASSED\nRunning test: Test shouldAddBaseHeaderPerMessageIfNotParameterized(io.odpf.firehose.sink.http.request.header.HeaderBuilderTest)\n\nio.odpf.firehose.sink.http.request.header.HeaderBuilderTest > shouldAddBaseHeaderPerMessageIfNotParameterized PASSED\nRunning test: Test shouldUseLogKeyWhenSourceTypeIsKey(io.odpf.firehose.sink.http.request.header.HeaderBuilderTest)\n\nio.odpf.firehose.sink.http.request.header.HeaderBuilderTest > shouldUseLogKeyWhenSourceTypeIsKey PASSED\nRunning test: Test shouldKeepBaseHeadersAndAddExtraHeaderAsItIsProvideInTheConfig(io.odpf.firehose.sink.http.request.header.HeaderBuilderTest)\n\nio.odpf.firehose.sink.http.request.header.HeaderBuilderTest > shouldKeepBaseHeadersAndAddExtraHeaderAsItIsProvideInTheConfig PASSED\nRunning test: Test shouldHandleMultipleHeader(io.odpf.firehose.sink.http.request.header.HeaderBuilderTest)\n\nio.odpf.firehose.sink.http.request.header.HeaderBuilderTest > shouldHandleMultipleHeader PASSED\nRunning test: Test shouldNotThrowNullPointerExceptionWhenHeaderConfigEmpty(io.odpf.firehose.sink.http.request.header.HeaderBuilderTest)\n\nio.odpf.firehose.sink.http.request.header.HeaderBuilderTest > shouldNotThrowNullPointerExceptionWhenHeaderConfigEmpty PASSED\nRunning test: Test shouldHaveExtraParameterizedHeaderIfParameterizedHeaderEnabled(io.odpf.firehose.sink.http.request.header.HeaderBuilderTest)\n\nio.odpf.firehose.sink.http.request.header.HeaderBuilderTest > shouldHaveExtraParameterizedHeaderIfParameterizedHeaderEnabled PASSED\nRunning test: Test shouldProcessMessagesIndividually(io.odpf.firehose.sink.http.request.types.ParameterizedHeaderRequestTest)\n\nio.odpf.firehose.sink.http.request.types.ParameterizedHeaderRequestTest > shouldProcessMessagesIndividually PASSED\nRunning test: Test shouldNotProcessTemplatesIfAbsent(io.odpf.firehose.sink.http.request.types.ParameterizedHeaderRequestTest)\n\nio.odpf.firehose.sink.http.request.types.ParameterizedHeaderRequestTest > shouldNotProcessTemplatesIfAbsent PASSED\nRunning test: Test shouldProcessForParametrizedHeaders(io.odpf.firehose.sink.http.request.types.ParameterizedHeaderRequestTest)\n\nio.odpf.firehose.sink.http.request.types.ParameterizedHeaderRequestTest > shouldProcessForParametrizedHeaders PASSED\nRunning test: Test shouldProcessTemplatesIfPresent(io.odpf.firehose.sink.http.request.types.ParameterizedHeaderRequestTest)\n\nio.odpf.firehose.sink.http.request.types.ParameterizedHeaderRequestTest > shouldProcessTemplatesIfPresent PASSED\nRunning test: Test shouldCheckForTemplateWhileBuilding(io.odpf.firehose.sink.http.request.types.ParameterizedHeaderRequestTest)\n\nio.odpf.firehose.sink.http.request.types.ParameterizedHeaderRequestTest > shouldCheckForTemplateWhileBuilding PASSED\nRunning test: Test shouldNotProcessIfParameterPlacedInQuery(io.odpf.firehose.sink.http.request.types.ParameterizedHeaderRequestTest)\n\nio.odpf.firehose.sink.http.request.types.ParameterizedHeaderRequestTest > shouldNotProcessIfParameterPlacedInQuery PASSED\nRunning test: Test shouldNotProcessIfParameterPlacementDisabled(io.odpf.firehose.sink.http.request.types.ParameterizedHeaderRequestTest)\n\nio.odpf.firehose.sink.http.request.types.ParameterizedHeaderRequestTest > shouldNotProcessIfParameterPlacementDisabled PASSED\nRunning test: Test shouldNotProcessTemplatesIfAbsent(io.odpf.firehose.sink.http.request.types.SimpleRequestTest)\n\nio.odpf.firehose.sink.http.request.types.SimpleRequestTest > shouldNotProcessTemplatesIfAbsent PASSED\nRunning test: Test shouldProcessBaseCase(io.odpf.firehose.sink.http.request.types.SimpleRequestTest)\n\nio.odpf.firehose.sink.http.request.types.SimpleRequestTest > shouldProcessBaseCase PASSED\nRunning test: Test shouldCheckTemplateAvailabilityForSettingRequestStrategy(io.odpf.firehose.sink.http.request.types.SimpleRequestTest)\n\nio.odpf.firehose.sink.http.request.types.SimpleRequestTest > shouldCheckTemplateAvailabilityForSettingRequestStrategy PASSED\nRunning test: Test shouldProcessMessagesInBatchIfTemplateDisabled(io.odpf.firehose.sink.http.request.types.SimpleRequestTest)\n\nio.odpf.firehose.sink.http.request.types.SimpleRequestTest > shouldProcessMessagesInBatchIfTemplateDisabled PASSED\nRunning test: Test shouldProcessTemplatesIfPresent(io.odpf.firehose.sink.http.request.types.SimpleRequestTest)\n\nio.odpf.firehose.sink.http.request.types.SimpleRequestTest > shouldProcessTemplatesIfPresent PASSED\nRunning test: Test shouldNotProcessForDyanamicURL(io.odpf.firehose.sink.http.request.types.SimpleRequestTest)\n\nio.odpf.firehose.sink.http.request.types.SimpleRequestTest > shouldNotProcessForDyanamicURL PASSED\nRunning test: Test shouldNotProcessIfParameterIsEnabled(io.odpf.firehose.sink.http.request.types.SimpleRequestTest)\n\nio.odpf.firehose.sink.http.request.types.SimpleRequestTest > shouldNotProcessIfParameterIsEnabled PASSED\nRunning test: Test shouldProcessMessagesIndividuallyIfTemplateEnabled(io.odpf.firehose.sink.http.request.types.SimpleRequestTest)\n\nio.odpf.firehose.sink.http.request.types.SimpleRequestTest > shouldProcessMessagesIndividuallyIfTemplateEnabled PASSED\nRunning test: Test shouldProcessMessagesIndividually(io.odpf.firehose.sink.http.request.types.DynamicUrlRequestTest)\n\nio.odpf.firehose.sink.http.request.types.DynamicUrlRequestTest > shouldProcessMessagesIndividually PASSED\nRunning test: Test shouldNotProcessTemplatesIfAbsent(io.odpf.firehose.sink.http.request.types.DynamicUrlRequestTest)\n\nio.odpf.firehose.sink.http.request.types.DynamicUrlRequestTest > shouldNotProcessTemplatesIfAbsent PASSED\nRunning test: Test shouldProcessForDynamicURI(io.odpf.firehose.sink.http.request.types.DynamicUrlRequestTest)\n\nio.odpf.firehose.sink.http.request.types.DynamicUrlRequestTest > shouldProcessForDynamicURI PASSED\nRunning test: Test shouldProcessTemplatesIfPresent(io.odpf.firehose.sink.http.request.types.DynamicUrlRequestTest)\n\nio.odpf.firehose.sink.http.request.types.DynamicUrlRequestTest > shouldProcessTemplatesIfPresent PASSED\nRunning test: Test shouldCheckForTemplateWhileBuilding(io.odpf.firehose.sink.http.request.types.DynamicUrlRequestTest)\n\nio.odpf.firehose.sink.http.request.types.DynamicUrlRequestTest > shouldCheckForTemplateWhileBuilding PASSED\nRunning test: Test shouldNotProcessForBaseCase(io.odpf.firehose.sink.http.request.types.DynamicUrlRequestTest)\n\nio.odpf.firehose.sink.http.request.types.DynamicUrlRequestTest > shouldNotProcessForBaseCase PASSED\nRunning test: Test shouldNotProcessIfParameterIsEnabled(io.odpf.firehose.sink.http.request.types.DynamicUrlRequestTest)\n\nio.odpf.firehose.sink.http.request.types.DynamicUrlRequestTest > shouldNotProcessIfParameterIsEnabled PASSED\nRunning test: Test shouldProcessMessagesIndividually(io.odpf.firehose.sink.http.request.types.ParameterizedUriRequestTest)\n\nio.odpf.firehose.sink.http.request.types.ParameterizedUriRequestTest > shouldProcessMessagesIndividually PASSED\nRunning test: Test shouldProcessForParametrizedQuery(io.odpf.firehose.sink.http.request.types.ParameterizedUriRequestTest)\n\nio.odpf.firehose.sink.http.request.types.ParameterizedUriRequestTest > shouldProcessForParametrizedQuery PASSED\nRunning test: Test shouldNotProcessTemplatesIfAbsent(io.odpf.firehose.sink.http.request.types.ParameterizedUriRequestTest)\n\nio.odpf.firehose.sink.http.request.types.ParameterizedUriRequestTest > shouldNotProcessTemplatesIfAbsent PASSED\nRunning test: Test shouldNotProcessIfParameterPlacedInHeader(io.odpf.firehose.sink.http.request.types.ParameterizedUriRequestTest)\n\nio.odpf.firehose.sink.http.request.types.ParameterizedUriRequestTest > shouldNotProcessIfParameterPlacedInHeader PASSED\nRunning test: Test shouldProcessTemplatesIfPresent(io.odpf.firehose.sink.http.request.types.ParameterizedUriRequestTest)\n\nio.odpf.firehose.sink.http.request.types.ParameterizedUriRequestTest > shouldProcessTemplatesIfPresent PASSED\nRunning test: Test shouldCheckForTemplateWhileBuilding(io.odpf.firehose.sink.http.request.types.ParameterizedUriRequestTest)\n\nio.odpf.firehose.sink.http.request.types.ParameterizedUriRequestTest > shouldCheckForTemplateWhileBuilding PASSED\nRunning test: Test shouldNotProcessIfParameterPlacementDisabled(io.odpf.firehose.sink.http.request.types.ParameterizedUriRequestTest)\n\nio.odpf.firehose.sink.http.request.types.ParameterizedUriRequestTest > shouldNotProcessIfParameterPlacementDisabled PASSED\nRunning test: Test shouldCloseStencilClient(io.odpf.firehose.sink.http.HttpSinkTest)\n\nio.odpf.firehose.sink.http.HttpSinkTest > shouldCloseStencilClient PASSED\nRunning test: Test shouldNotCaptureDroppedMessagesMetricsIfStatusCodeIs200(io.odpf.firehose.sink.http.HttpSinkTest)\n\nio.odpf.firehose.sink.http.HttpSinkTest > shouldNotCaptureDroppedMessagesMetricsIfStatusCodeIs200 PASSED\nRunning test: Test shouldNotCaptureDroppedMessagesMetricsIfStatusCodeIs201(io.odpf.firehose.sink.http.HttpSinkTest)\n\nio.odpf.firehose.sink.http.HttpSinkTest > shouldNotCaptureDroppedMessagesMetricsIfStatusCodeIs201 PASSED\nRunning test: Test shouldThrowNeedToRetryExceptionWhenResponseCodeIsGivenRange(io.odpf.firehose.sink.http.HttpSinkTest)\n\nio.odpf.firehose.sink.http.HttpSinkTest > shouldThrowNeedToRetryExceptionWhenResponseCodeIsGivenRange PASSED\nRunning test: Test shouldLogEntireRequestIfInStatusCodeRangeWithBatchRequestAndCaptureDroppedMessages(io.odpf.firehose.sink.http.HttpSinkTest)\n\nio.odpf.firehose.sink.http.HttpSinkTest > shouldLogEntireRequestIfInStatusCodeRangeWithBatchRequestAndCaptureDroppedMessages PASSED\nRunning test: Test shouldLogEntireRequestIfInStatusCodeRangeWithIndividualRequestAndCaptureDroppedMessages(io.odpf.firehose.sink.http.HttpSinkTest)\n\nio.odpf.firehose.sink.http.HttpSinkTest > shouldLogEntireRequestIfInStatusCodeRangeWithIndividualRequestAndCaptureDroppedMessages PASSED\nRunning test: Test shouldLogEntireRequestIfInStatusCodeRangeWithSingleListRequestBodyAndCaptureDroppedMessages(io.odpf.firehose.sink.http.HttpSinkTest)\n\nio.odpf.firehose.sink.http.HttpSinkTest > shouldLogEntireRequestIfInStatusCodeRangeWithSingleListRequestBodyAndCaptureDroppedMessages PASSED\nRunning test: Test shouldNotCaptureDroppedMessagesMetricsIfInStatusCodeRange(io.odpf.firehose.sink.http.HttpSinkTest)\n\nio.odpf.firehose.sink.http.HttpSinkTest > shouldNotCaptureDroppedMessagesMetricsIfInStatusCodeRange PASSED\nRunning test: Test shouldNotLogEntireRequestIfNotInStatusCodeRange(io.odpf.firehose.sink.http.HttpSinkTest)\n\nio.odpf.firehose.sink.http.HttpSinkTest > shouldNotLogEntireRequestIfNotInStatusCodeRange PASSED\nRunning test: Test shouldThrowNeedToRetryExceptionWhenResponseIsNull(io.odpf.firehose.sink.http.HttpSinkTest)\n\nio.odpf.firehose.sink.http.HttpSinkTest > shouldThrowNeedToRetryExceptionWhenResponseIsNull PASSED\nRunning test: Test shouldLogResponseBodyWhenDebugIsEnabledAndNonNullResponse(io.odpf.firehose.sink.http.HttpSinkTest)\n\nio.odpf.firehose.sink.http.HttpSinkTest > shouldLogResponseBodyWhenDebugIsEnabledAndNonNullResponse PASSED\nRunning test: Test shouldCallHttpClientWithProperRequest(io.odpf.firehose.sink.http.HttpSinkTest)\n\nio.odpf.firehose.sink.http.HttpSinkTest > shouldCallHttpClientWithProperRequest PASSED\nRunning test: Test shouldCatchURISyntaxExceptionAndThrowIOException(io.odpf.firehose.sink.http.HttpSinkTest)\n\nio.odpf.firehose.sink.http.HttpSinkTest > shouldCatchURISyntaxExceptionAndThrowIOException PASSED\nRunning test: Test shouldNotLogResponseBodyWhenDebugIsEnabledWithNullHttpResponseEntity(io.odpf.firehose.sink.http.HttpSinkTest)\n\nio.odpf.firehose.sink.http.HttpSinkTest > shouldNotLogResponseBodyWhenDebugIsEnabledWithNullHttpResponseEntity PASSED\nRunning test: Test shouldLogConnectionClosing(io.odpf.firehose.sink.http.HttpSinkTest)\n\nio.odpf.firehose.sink.http.HttpSinkTest > shouldLogConnectionClosing PASSED\nRunning test: Test shouldThrowNeedToRetryExceptionWhenResponseStatusCodeIsZero(io.odpf.firehose.sink.http.HttpSinkTest)\n\nio.odpf.firehose.sink.http.HttpSinkTest > shouldThrowNeedToRetryExceptionWhenResponseStatusCodeIsZero PASSED\nRunning test: Test shouldCaptureDroppedMessagesMetricsIfNotInStatusCodeRange(io.odpf.firehose.sink.http.HttpSinkTest)\n\nio.odpf.firehose.sink.http.HttpSinkTest > shouldCaptureDroppedMessagesMetricsIfNotInStatusCodeRange PASSED\nRunning test: Test shouldCaptureResponseStatusCount(io.odpf.firehose.sink.http.HttpSinkTest)\n\nio.odpf.firehose.sink.http.HttpSinkTest > shouldCaptureResponseStatusCount PASSED\nRunning test: Test shouldReturnTrueWhenExpireTimeIsLessThan60Sec(io.odpf.firehose.sink.http.auth.OAuth2AccessTokenTest)\n\nio.odpf.firehose.sink.http.auth.OAuth2AccessTokenTest > shouldReturnTrueWhenExpireTimeIsLessThan60Sec PASSED\nRunning test: Test shouldReturnExpirationTimeAsPassedInParamaters(io.odpf.firehose.sink.http.auth.OAuth2AccessTokenTest)\n\nio.odpf.firehose.sink.http.auth.OAuth2AccessTokenTest > shouldReturnExpirationTimeAsPassedInParamaters PASSED\nRunning test: Test shouldReturnFalseWhenExpireTimeIsMoreThan60Sec(io.odpf.firehose.sink.http.auth.OAuth2AccessTokenTest)\n\nio.odpf.firehose.sink.http.auth.OAuth2AccessTokenTest > shouldReturnFalseWhenExpireTimeIsMoreThan60Sec PASSED\nRunning test: Test shouldReturnTrueWhenExpireTimeIs60Sec(io.odpf.firehose.sink.http.auth.OAuth2AccessTokenTest)\n\nio.odpf.firehose.sink.http.auth.OAuth2AccessTokenTest > shouldReturnTrueWhenExpireTimeIs60Sec PASSED\nRunning test: Test shouldReturnDefaultExpirationTimeWhenNotPassedInParamaters(io.odpf.firehose.sink.http.auth.OAuth2AccessTokenTest)\n\nio.odpf.firehose.sink.http.auth.OAuth2AccessTokenTest > shouldReturnDefaultExpirationTimeWhenNotPassedInParamaters PASSED\nRunning test: Test shouldThrowOAuth2ExceptionIfResponseReturnedIsNon2XX(io.odpf.firehose.sink.http.auth.OAuth2ClientTest)\n\nio.odpf.firehose.sink.http.auth.OAuth2ClientTest > shouldThrowOAuth2ExceptionIfResponseReturnedIsNon2XX PASSED\nRunning test: Test shouldReturnOAuth2AccessTokenIfResponseReturnedIs200(io.odpf.firehose.sink.http.auth.OAuth2ClientTest)\n\nio.odpf.firehose.sink.http.auth.OAuth2ClientTest > shouldReturnOAuth2AccessTokenIfResponseReturnedIs200 PASSED\nRunning test: Test shouldReturnOAuth2AccessTokenIfResponseReturnedIs201(io.odpf.firehose.sink.http.auth.OAuth2ClientTest)\n\nio.odpf.firehose.sink.http.auth.OAuth2ClientTest > shouldReturnOAuth2AccessTokenIfResponseReturnedIs201 PASSED\nRunning test: Test shouldNotThrowExceptionWhenServerHasOAuthException(io.odpf.firehose.sink.http.auth.OAuth2CredentialTest)\n\nio.odpf.firehose.sink.http.auth.OAuth2CredentialTest > shouldNotThrowExceptionWhenServerHasOAuthException PASSED\nRunning test: Test shouldRequestTokenWhenTokenIsExpiring(io.odpf.firehose.sink.http.auth.OAuth2CredentialTest)\n\nio.odpf.firehose.sink.http.auth.OAuth2CredentialTest > shouldRequestTokenWhenTokenIsExpiring PASSED\nRunning test: Test shouldUseDefaultExpirationWhenAccessTokenIsIncomplete(io.odpf.firehose.sink.http.auth.OAuth2CredentialTest)\n\nio.odpf.firehose.sink.http.auth.OAuth2CredentialTest > shouldUseDefaultExpirationWhenAccessTokenIsIncomplete PASSED\nRunning test: Test shouldReuseTokenWhenTokenExist(io.odpf.firehose.sink.http.auth.OAuth2CredentialTest)\n\nio.odpf.firehose.sink.http.auth.OAuth2CredentialTest > shouldReuseTokenWhenTokenExist PASSED\nRunning test: Test shouldEmbedBearerToken(io.odpf.firehose.sink.http.auth.OAuth2CredentialTest)\n\nio.odpf.firehose.sink.http.auth.OAuth2CredentialTest > shouldEmbedBearerToken PASSED\nRunning test: Test shouldClearTokenWhenServerReturnedHTTP401(io.odpf.firehose.sink.http.auth.OAuth2CredentialTest)\n\nio.odpf.firehose.sink.http.auth.OAuth2CredentialTest > shouldClearTokenWhenServerReturnedHTTP401 PASSED\nRunning test: Test shouldNotThrowExceptionWhenServerHasOAuthTimeout(io.odpf.firehose.sink.http.auth.OAuth2CredentialTest)\n\nio.odpf.firehose.sink.http.auth.OAuth2CredentialTest > shouldNotThrowExceptionWhenServerHasOAuthTimeout PASSED\nRunning test: Test shouldThrowExceptionWhenServerHasJsonException(io.odpf.firehose.sink.http.auth.OAuth2CredentialTest)\n\nio.odpf.firehose.sink.http.auth.OAuth2CredentialTest > shouldThrowExceptionWhenServerHasJsonException PASSED\nRunning test: Test shouldRequestTokenWhenTokenIsExpired(io.odpf.firehose.sink.http.auth.OAuth2CredentialTest)\n\nio.odpf.firehose.sink.http.auth.OAuth2CredentialTest > shouldRequestTokenWhenTokenIsExpired PASSED\nRunning test: Test shouldThrowExceptionWhenServerHasJsonExceptionOkHttp(io.odpf.firehose.sink.http.auth.OAuth2CredentialTest)\n\nio.odpf.firehose.sink.http.auth.OAuth2CredentialTest > shouldThrowExceptionWhenServerHasJsonExceptionOkHttp PASSED\nRunning test: Test shouldNotEmbedAccessTokenIfGoAuthDisabled(io.odpf.firehose.sink.http.HttpSinkFactoryTest)\n\nio.odpf.firehose.sink.http.HttpSinkFactoryTest > shouldNotEmbedAccessTokenIfGoAuthDisabled PASSED\nRunning test: Test shouldEmbedAccessTokenIfGoAuthEnabled(io.odpf.firehose.sink.http.HttpSinkFactoryTest)\n\nio.odpf.firehose.sink.http.HttpSinkFactoryTest > shouldEmbedAccessTokenIfGoAuthEnabled PASSED\nRunning test: Test shouldReturnJsonSinkTypeFromUpperCaseInput(io.odpf.firehose.config.HttpSinkDataFormatTypeConverterTest)\n\nio.odpf.firehose.config.HttpSinkDataFormatTypeConverterTest > shouldReturnJsonSinkTypeFromUpperCaseInput PASSED\nRunning test: Test shouldReturnProtoSinkTypeFromInput(io.odpf.firehose.config.HttpSinkDataFormatTypeConverterTest)\n\nio.odpf.firehose.config.HttpSinkDataFormatTypeConverterTest > shouldReturnProtoSinkTypeFromInput PASSED\nRunning test: Test shouldReturnJsonSinkTypeFromMixedCaseInput(io.odpf.firehose.config.HttpSinkDataFormatTypeConverterTest)\n\nio.odpf.firehose.config.HttpSinkDataFormatTypeConverterTest > shouldReturnJsonSinkTypeFromMixedCaseInput PASSED\nRunning test: Test shouldReturnJsonSinkTypeFromLowerCaseInput(io.odpf.firehose.config.HttpSinkDataFormatTypeConverterTest)\n\nio.odpf.firehose.config.HttpSinkDataFormatTypeConverterTest > shouldReturnJsonSinkTypeFromLowerCaseInput PASSED\nRunning test: Test shouldThrowOnIllegalArgument(io.odpf.firehose.config.HttpSinkDataFormatTypeConverterTest)\n\nio.odpf.firehose.config.HttpSinkDataFormatTypeConverterTest > shouldThrowOnIllegalArgument PASSED\nRunning test: Test shouldConvertRangeToHashMap(io.odpf.firehose.config.RangeToHashMapConverterTest)\n\nio.odpf.firehose.config.RangeToHashMapConverterTest > shouldConvertRangeToHashMap PASSED\nRunning test: Test shouldConvertRangesToHashMap(io.odpf.firehose.config.RangeToHashMapConverterTest)\n\nio.odpf.firehose.config.RangeToHashMapConverterTest > shouldConvertRangesToHashMap PASSED\nRunning test: Test shouldParseConfigForDLQ(io.odpf.firehose.config.GCSConfigTest)\n\nio.odpf.firehose.config.GCSConfigTest > shouldParseConfigForDLQ PASSED\nRunning test: Test shouldParseConfigForSink(io.odpf.firehose.config.GCSConfigTest)\n\nio.odpf.firehose.config.GCSConfigTest > shouldParseConfigForSink PASSED\nRunning test: Test shouldParseConfigForDLQ(io.odpf.firehose.config.S3ConfigTest)\n\nio.odpf.firehose.config.S3ConfigTest > shouldParseConfigForDLQ PASSED\nRunning test: Test shouldParseConfigForSink(io.odpf.firehose.config.S3ConfigTest)\n\nio.odpf.firehose.config.S3ConfigTest > shouldParseConfigForSink PASSED\nRunning test: Test shouldConvertSchemaTypeWithLowerCase(io.odpf.firehose.config.converter.InputSchemaTypeConverterTest)\n\nio.odpf.firehose.config.converter.InputSchemaTypeConverterTest > shouldConvertSchemaTypeWithLowerCase PASSED\nRunning test: Test shouldConvertSchemaType(io.odpf.firehose.config.converter.InputSchemaTypeConverterTest)\n\nio.odpf.firehose.config.converter.InputSchemaTypeConverterTest > shouldConvertSchemaType PASSED\nRunning test: Test testConvertIfFetchHeadersValueEmpty(io.odpf.firehose.config.converter.SchemaRegistryHeadersConverterTest)\n\nio.odpf.firehose.config.converter.SchemaRegistryHeadersConverterTest > testConvertIfFetchHeadersValueEmpty PASSED\nRunning test: Test shouldReturnZeroIfPropertyNotMentioned(io.odpf.firehose.config.converter.SchemaRegistryHeadersConverterTest)\n\nio.odpf.firehose.config.converter.SchemaRegistryHeadersConverterTest > shouldReturnZeroIfPropertyNotMentioned PASSED\nRunning test: Test shouldConvertHeaderKeyValuesWithHeaderObject(io.odpf.firehose.config.converter.SchemaRegistryHeadersConverterTest)\n\nio.odpf.firehose.config.converter.SchemaRegistryHeadersConverterTest > shouldConvertHeaderKeyValuesWithHeaderObject PASSED\nRunning test: Test shouldConvertDoublyNestedJSONToNestedProperties(io.odpf.firehose.config.ProtoIndexToFieldMapConverterTest)\n\nio.odpf.firehose.config.ProtoIndexToFieldMapConverterTest > shouldConvertDoublyNestedJSONToNestedProperties PASSED\nRunning test: Test shouldNotProcessEmptyStringAsProperties(io.odpf.firehose.config.ProtoIndexToFieldMapConverterTest)\n\nio.odpf.firehose.config.ProtoIndexToFieldMapConverterTest > shouldNotProcessEmptyStringAsProperties PASSED\nRunning test: Test shouldConvertJSONConfigToProperties(io.odpf.firehose.config.ProtoIndexToFieldMapConverterTest)\n\nio.odpf.firehose.config.ProtoIndexToFieldMapConverterTest > shouldConvertJSONConfigToProperties PASSED\nRunning test: Test shouldValidateJsonConfigForDuplicates(io.odpf.firehose.config.ProtoIndexToFieldMapConverterTest)\n\nio.odpf.firehose.config.ProtoIndexToFieldMapConverterTest > shouldValidateJsonConfigForDuplicates PASSED\nRunning test: Test shouldNotProcessNullStringAsProperties(io.odpf.firehose.config.ProtoIndexToFieldMapConverterTest)\n\nio.odpf.firehose.config.ProtoIndexToFieldMapConverterTest > shouldNotProcessNullStringAsProperties PASSED\nRunning test: Test shouldConvertNestedJSONToNestedProperties(io.odpf.firehose.config.ProtoIndexToFieldMapConverterTest)\n\nio.odpf.firehose.config.ProtoIndexToFieldMapConverterTest > shouldConvertNestedJSONToNestedProperties PASSED\nRunning test: Test shouldValidateJsonConfigForDuplicatesInNestedJsons(io.odpf.firehose.config.ProtoIndexToFieldMapConverterTest)\n\nio.odpf.firehose.config.ProtoIndexToFieldMapConverterTest > shouldValidateJsonConfigForDuplicatesInNestedJsons PASSED\nRunning test: Test shouldFilterMessage(io.odpf.firehose.error.ErrorHandlerTest)\n\nio.odpf.firehose.error.ErrorHandlerTest > shouldFilterMessage PASSED\nRunning test: Test shouldFilterMessageIfErrorInfoIsNull(io.odpf.firehose.error.ErrorHandlerTest)\n\nio.odpf.firehose.error.ErrorHandlerTest > shouldFilterMessageIfErrorInfoIsNull PASSED\nRunning test: Test shouldSplitBasedOnType(io.odpf.firehose.error.ErrorHandlerTest)\n\nio.odpf.firehose.error.ErrorHandlerTest > shouldSplitBasedOnType PASSED\nRunning test: Test shouldReturnKafkaEnvVarsPositive(io.odpf.firehose.parser.KafkaEnvironmentVariablesTest)\n\nio.odpf.firehose.parser.KafkaEnvironmentVariablesTest > shouldReturnKafkaEnvVarsPositive PASSED\nRunning test: Test shouldReturnKafkaEnvVarsNegative(io.odpf.firehose.parser.KafkaEnvironmentVariablesTest)\n\nio.odpf.firehose.parser.KafkaEnvironmentVariablesTest > shouldReturnKafkaEnvVarsNegative PASSED\nRunning test: Test shouldReturnEmptyCollectionOnNullEnvVars(io.odpf.firehose.parser.KafkaEnvironmentVariablesTest)\n\nio.odpf.firehose.parser.KafkaEnvironmentVariablesTest > shouldReturnEmptyCollectionOnNullEnvVars PASSED\nRunning test: Test shouldReturnEmptyCollectionOnEmptyEnvVars(io.odpf.firehose.parser.KafkaEnvironmentVariablesTest)\n\nio.odpf.firehose.parser.KafkaEnvironmentVariablesTest > shouldReturnEmptyCollectionOnEmptyEnvVars PASSED\nRunning test: Test shouldFilterEsbMessages(io.odpf.firehose.filter.jexl.JexlFilterTest)\n\nio.odpf.firehose.filter.jexl.JexlFilterTest > shouldFilterEsbMessages PASSED\nRunning test: Test shouldThrowExceptionOnInvalidFilterExpression(io.odpf.firehose.filter.jexl.JexlFilterTest)\n\nio.odpf.firehose.filter.jexl.JexlFilterTest > shouldThrowExceptionOnInvalidFilterExpression PASSED\nRunning test: Test shouldLogFilterTypeIfFilterTypeIsNotNone(io.odpf.firehose.filter.jexl.JexlFilterTest)\n\nio.odpf.firehose.filter.jexl.JexlFilterTest > shouldLogFilterTypeIfFilterTypeIsNotNone PASSED\nRunning test: Test shouldNotFilterEsbMessagesForEmptyBooleanValues(io.odpf.firehose.filter.jexl.JexlFilterTest)\n\nio.odpf.firehose.filter.jexl.JexlFilterTest > shouldNotFilterEsbMessagesForEmptyBooleanValues PASSED\nRunning test: Test shouldLogNoFilterSelected(io.odpf.firehose.filter.NoOpFilterTest)\n\nio.odpf.firehose.filter.NoOpFilterTest > shouldLogNoFilterSelected PASSED\nRunning test: Test shouldReturnInputListOfMessagesForJsonMessageType(io.odpf.firehose.filter.NoOpFilterTest)\n\nio.odpf.firehose.filter.NoOpFilterTest > shouldReturnInputListOfMessagesForJsonMessageType PASSED\nRunning test: Test shouldReturnInputListOfMessagesForProtobufMessageType(io.odpf.firehose.filter.NoOpFilterTest)\n\nio.odpf.firehose.filter.NoOpFilterTest > shouldReturnInputListOfMessagesForProtobufMessageType PASSED\nRunning test: Test shouldNotThrowIllegalArgumentExceptionForValidFilterConfig(io.odpf.firehose.filter.json.JsonFilterUtilTest)\n\nio.odpf.firehose.filter.json.JsonFilterUtilTest > shouldNotThrowIllegalArgumentExceptionForValidFilterConfig PASSED\nRunning test: Test shouldThrowExceptionForNullProtoSchemaClassForProtobufMessageFormat(io.odpf.firehose.filter.json.JsonFilterUtilTest)\n\nio.odpf.firehose.filter.json.JsonFilterUtilTest > shouldThrowExceptionForNullProtoSchemaClassForProtobufMessageFormat PASSED\nRunning test: Test shouldLogFilterConfigsForInvalidConfiguration(io.odpf.firehose.filter.json.JsonFilterUtilTest)\n\nio.odpf.firehose.filter.json.JsonFilterUtilTest > shouldLogFilterConfigsForInvalidConfiguration PASSED\nRunning test: Test shouldThrowIllegalArgumentExceptionForNullMessageFormat(io.odpf.firehose.filter.json.JsonFilterUtilTest)\n\nio.odpf.firehose.filter.json.JsonFilterUtilTest > shouldThrowIllegalArgumentExceptionForNullMessageFormat PASSED\nRunning test: Test shouldLogFilterConfigsForValidConfiguration(io.odpf.firehose.filter.json.JsonFilterUtilTest)\n\nio.odpf.firehose.filter.json.JsonFilterUtilTest > shouldLogFilterConfigsForValidConfiguration PASSED\nRunning test: Test shouldThrowIllegalArgumentExceptionForNullJsonSchema(io.odpf.firehose.filter.json.JsonFilterUtilTest)\n\nio.odpf.firehose.filter.json.JsonFilterUtilTest > shouldThrowIllegalArgumentExceptionForNullJsonSchema PASSED\nRunning test: Test shouldThrowExceptionWhenJsonMessageInvalid(io.odpf.firehose.filter.json.JsonFilterTest)\n\nio.odpf.firehose.filter.json.JsonFilterTest > shouldThrowExceptionWhenJsonMessageInvalid PASSED\nRunning test: Test shouldLogCauseToFilterOutMessageForJsonMessageFormat(io.odpf.firehose.filter.json.JsonFilterTest)\n\nio.odpf.firehose.filter.json.JsonFilterTest > shouldLogCauseToFilterOutMessageForJsonMessageFormat PASSED\nRunning test: Test shouldNotFilterProtobufMessagesWhenEmptyJSONSchema(io.odpf.firehose.filter.json.JsonFilterTest)\n\nio.odpf.firehose.filter.json.JsonFilterTest > shouldNotFilterProtobufMessagesWhenEmptyJSONSchema PASSED\nRunning test: Test shouldFilterEsbMessagesForProtobufMessageType(io.odpf.firehose.filter.json.JsonFilterTest)\n\nio.odpf.firehose.filter.json.JsonFilterTest > shouldFilterEsbMessagesForProtobufMessageType PASSED\nRunning test: Test shouldNotFilterJsonMessagesWhenEmptyJSONSchema(io.odpf.firehose.filter.json.JsonFilterTest)\n\nio.odpf.firehose.filter.json.JsonFilterTest > shouldNotFilterJsonMessagesWhenEmptyJSONSchema PASSED\nRunning test: Test shouldNotFilterEsbMessagesForEmptyBooleanValuesForProtobufMessageType(io.odpf.firehose.filter.json.JsonFilterTest)\n\nio.odpf.firehose.filter.json.JsonFilterTest > shouldNotFilterEsbMessagesForEmptyBooleanValuesForProtobufMessageType PASSED\nRunning test: Test shouldLogCauseToFilterOutMessageForProtobufMessageFormat(io.odpf.firehose.filter.json.JsonFilterTest)\n\nio.odpf.firehose.filter.json.JsonFilterTest > shouldLogCauseToFilterOutMessageForProtobufMessageFormat PASSED\nRunning test: Test shouldThrowExceptionWhenProtobufMessageInvalid(io.odpf.firehose.filter.json.JsonFilterTest)\n\nio.odpf.firehose.filter.json.JsonFilterTest > shouldThrowExceptionWhenProtobufMessageInvalid PASSED\nRunning test: Test shouldThrowExceptionWhenProtoSchemaClassInvalid(io.odpf.firehose.filter.json.JsonFilterTest)\n\nio.odpf.firehose.filter.json.JsonFilterTest > shouldThrowExceptionWhenProtoSchemaClassInvalid PASSED\nRunning test: Test shouldFilterMessagesWithNestedFieldsForProtobufMessageType(io.odpf.firehose.filter.json.JsonFilterTest)\n\nio.odpf.firehose.filter.json.JsonFilterTest > shouldFilterMessagesWithNestedFieldsForProtobufMessageType PASSED\nRunning test: Test shouldFilterEsbMessagesForJsonMessageType(io.odpf.firehose.filter.json.JsonFilterTest)\n\nio.odpf.firehose.filter.json.JsonFilterTest > shouldFilterEsbMessagesForJsonMessageType PASSED\nRunning test: Test shouldCapturePartitionProcessTime(io.odpf.firehose.metrics.FirehoseInstrumentationTest)\n\nio.odpf.firehose.metrics.FirehoseInstrumentationTest > shouldCapturePartitionProcessTime PASSED\nRunning test: Test shouldCaptureLatencyAcrossFirehose(io.odpf.firehose.metrics.FirehoseInstrumentationTest)\n\nio.odpf.firehose.metrics.FirehoseInstrumentationTest > shouldCaptureLatencyAcrossFirehose PASSED\nRunning test: Test shouldCaptureGlobalMetrics(io.odpf.firehose.metrics.FirehoseInstrumentationTest)\n\nio.odpf.firehose.metrics.FirehoseInstrumentationTest > shouldCaptureGlobalMetrics PASSED\nRunning test: Test shouldReturnStartExecutionTime(io.odpf.firehose.metrics.FirehoseInstrumentationTest)\n\nio.odpf.firehose.metrics.FirehoseInstrumentationTest > shouldReturnStartExecutionTime PASSED\nRunning test: Test shouldClose(io.odpf.firehose.metrics.FirehoseInstrumentationTest)\n\nio.odpf.firehose.metrics.FirehoseInstrumentationTest > shouldClose PASSED\nRunning test: Test shouldLogStringTemplate(io.odpf.firehose.metrics.FirehoseInstrumentationTest)\n\nio.odpf.firehose.metrics.FirehoseInstrumentationTest > shouldLogStringTemplate PASSED\nRunning test: Test shouldCaptureFatalErrorWithStringTemplate(io.odpf.firehose.metrics.FirehoseInstrumentationTest)\n\nio.odpf.firehose.metrics.FirehoseInstrumentationTest > shouldCaptureFatalErrorWithStringTemplate PASSED\nRunning test: Test shouldLogDebugStringTemplate(io.odpf.firehose.metrics.FirehoseInstrumentationTest)\n\nio.odpf.firehose.metrics.FirehoseInstrumentationTest > shouldLogDebugStringTemplate PASSED\nRunning test: Test shouldSetStartExecutionTime(io.odpf.firehose.metrics.FirehoseInstrumentationTest)\n\nio.odpf.firehose.metrics.FirehoseInstrumentationTest > shouldSetStartExecutionTime PASSED\nRunning test: Test shouldCaptureLifetimeTillSink(io.odpf.firehose.metrics.FirehoseInstrumentationTest)\n\nio.odpf.firehose.metrics.FirehoseInstrumentationTest > shouldCaptureLifetimeTillSink PASSED\nRunning test: Test shouldCaptureNonFatalErrorWithStringTemplate(io.odpf.firehose.metrics.FirehoseInstrumentationTest)\n\nio.odpf.firehose.metrics.FirehoseInstrumentationTest > shouldCaptureNonFatalErrorWithStringTemplate PASSED\nRunning test: Test shouldCaptureNonFatalErrorWithStringMessage(io.odpf.firehose.metrics.FirehoseInstrumentationTest)\n\nio.odpf.firehose.metrics.FirehoseInstrumentationTest > shouldCaptureNonFatalErrorWithStringMessage PASSED\nRunning test: Test shouldIncrementCounter(io.odpf.firehose.metrics.FirehoseInstrumentationTest)\n\nio.odpf.firehose.metrics.FirehoseInstrumentationTest > shouldIncrementCounter PASSED\nRunning test: Test shouldCapturePulledMessageHistogram(io.odpf.firehose.metrics.FirehoseInstrumentationTest)\n\nio.odpf.firehose.metrics.FirehoseInstrumentationTest > shouldCapturePulledMessageHistogram PASSED\nRunning test: Test shouldCaptureBackoffSleepTime(io.odpf.firehose.metrics.FirehoseInstrumentationTest)\n\nio.odpf.firehose.metrics.FirehoseInstrumentationTest > shouldCaptureBackoffSleepTime PASSED\nRunning test: Test shouldLogString(io.odpf.firehose.metrics.FirehoseInstrumentationTest)\n\nio.odpf.firehose.metrics.FirehoseInstrumentationTest > shouldLogString PASSED\nRunning test: Test shouldCaptureFatalErrorWithStringMessage(io.odpf.firehose.metrics.FirehoseInstrumentationTest)\n\nio.odpf.firehose.metrics.FirehoseInstrumentationTest > shouldCaptureFatalErrorWithStringMessage PASSED\nRunning test: Test shouldIncrementCounterWithTags(io.odpf.firehose.metrics.FirehoseInstrumentationTest)\n\nio.odpf.firehose.metrics.FirehoseInstrumentationTest > shouldIncrementCounterWithTags PASSED\nRunning test: Test shouldLogWarnStringTemplate(io.odpf.firehose.metrics.FirehoseInstrumentationTest)\n\nio.odpf.firehose.metrics.FirehoseInstrumentationTest > shouldLogWarnStringTemplate PASSED\nRunning test: Test shouldLogErrorStringTemplate(io.odpf.firehose.metrics.FirehoseInstrumentationTest)\n\nio.odpf.firehose.metrics.FirehoseInstrumentationTest > shouldLogErrorStringTemplate PASSED\nRunning test: Test shouldCaptureFilteredMessageCount(io.odpf.firehose.metrics.FirehoseInstrumentationTest)\n\nio.odpf.firehose.metrics.FirehoseInstrumentationTest > shouldCaptureFilteredMessageCount PASSED\nRunning test: Test shouldCaptureCountWithTags(io.odpf.firehose.metrics.FirehoseInstrumentationTest)\n\nio.odpf.firehose.metrics.FirehoseInstrumentationTest > shouldCaptureCountWithTags PASSED\nRunning test: Test shouldReturnProperTimestamp(io.odpf.firehose.converter.ProtoTimeConverterTest)\n\nio.odpf.firehose.converter.ProtoTimeConverterTest > shouldReturnProperTimestamp PASSED\nRunning test: Test shouldReturnProperTimestampForOnlySeconds(io.odpf.firehose.converter.ProtoTimeConverterTest)\n\nio.odpf.firehose.converter.ProtoTimeConverterTest > shouldReturnProperTimestampForOnlySeconds PASSED\nRunning test: Test shouldExecuteTaskUntilStopped(io.odpf.firehose.launch.TaskTest)\n\nio.odpf.firehose.launch.TaskTest > shouldExecuteTaskUntilStopped SKIPPED\nRunning test: Test shouldExecuteTaskWithParallelism(io.odpf.firehose.launch.TaskTest)\n\nio.odpf.firehose.launch.TaskTest > shouldExecuteTaskWithParallelism PASSED\nRunning test: Test shouldReturnEmptyList(io.odpf.firehose.message.FirehoseMessageUtilsTest)\n\nio.odpf.firehose.message.FirehoseMessageUtilsTest > shouldReturnEmptyList PASSED\nRunning test: Test shouldConvertToOdpfMessage(io.odpf.firehose.message.FirehoseMessageUtilsTest)\n\nio.odpf.firehose.message.FirehoseMessageUtilsTest > shouldConvertToOdpfMessage PASSED\nRunning test: Test encodesKeyToBase64(io.odpf.firehose.message.MessageTest)\n\nio.odpf.firehose.message.MessageTest > encodesKeyToBase64 PASSED\nRunning test: Test nullKeyGetsEncoded(io.odpf.firehose.message.MessageTest)\n\nio.odpf.firehose.message.MessageTest > nullKeyGetsEncoded PASSED\nRunning test: Test shouldSetDefaultError(io.odpf.firehose.message.MessageTest)\n\nio.odpf.firehose.message.MessageTest > shouldSetDefaultError PASSED\nRunning test: Test emptyKeyGetsEncoded(io.odpf.firehose.message.MessageTest)\n\nio.odpf.firehose.message.MessageTest > emptyKeyGetsEncoded PASSED\nRunning test: Test encodesValueToBase64(io.odpf.firehose.message.MessageTest)\n\nio.odpf.firehose.message.MessageTest > encodesValueToBase64 PASSED\n\n> Task :jacocoTestCoverageVerification\n> Task :jacocoTestReport\n> Task :check\n> Task :build\n\nDeprecated Gradle features were used in this build, making it incompatible with Gradle 8.0.\n\nYou can use '--warning-mode all' to show the individual deprecation warnings and determine if they come from your own scripts or plugins.\n\nSee https://docs.gradle.org/7.2/userguide/command_line_interface.html#sec:command_line_warnings\n\nExecution optimizations have been disabled for 1 invalid unit(s) of work during this build to ensure correctness.\nPlease consult deprecation warnings for more details.\n\nBUILD SUCCESSFUL in 3m 10s\n16 actionable tasks: 16 executed\nRemoving intermediate container e43a8e3e86bd\n ---> 2a40cea0cc5c\nStep 6/12 : FROM openjdk:8-jre\n ---> 0c14a0e20aa3\nStep 7/12 : COPY --from=GRADLE_BUILD ./build/libs/ /opt/firehose/bin\n ---> 1ed0a10fc948\nStep 8/12 : COPY --from=GRADLE_BUILD ./jolokia-jvm-agent.jar /opt/firehose\n ---> b99d8afefb19\nStep 9/12 : COPY --from=GRADLE_BUILD ./src/main/resources/log4j.xml /opt/firehose/etc/log4j.xml\n ---> ddb190e2e6e3\nStep 10/12 : COPY --from=GRADLE_BUILD ./src/main/resources/logback.xml /opt/firehose/etc/logback.xml\n ---> a7200bfee9d1\nStep 11/12 : WORKDIR /opt/firehose\n ---> Running in f5be6d18a0a7\nRemoving intermediate container f5be6d18a0a7\n ---> e797814b0bd8\nStep 12/12 : CMD [\"java\", \"-cp\", \"bin/*:/work-dir/*\", \"io.odpf.firehose.launch.Main\", \"-server\", \"-Dlogback.configurationFile=etc/firehose/logback.xml\", \"-Xloggc:/var/log/firehose\"]\n ---> Running in c637ed1f4674\nRemoving intermediate container c637ed1f4674\n ---> 5dacac3b1209\nSuccessfully built 5dacac3b1209\nSuccessfully tagged firehose:latest\n","stderr":"","imageSize":418902666},"endTime":1672091934494}