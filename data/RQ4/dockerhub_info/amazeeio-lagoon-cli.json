{
  "user": "amazeeio",
  "name": "lagoon-cli",
  "namespace": "amazeeio",
  "repository_type": "image",
  "status": 1,
  "status_description": "active",
  "description": "",
  "is_private": false,
  "is_automated": false,
  "can_edit": false,
  "star_count": 0,
  "pull_count": 11435,
  "last_updated": "2021-09-10T01:12:00.739465Z",
  "date_registered": "2020-07-13T06:29:11.298241Z",
  "collaborator_count": 0,
  "affiliation": null,
  "hub_user": "amazeeio",
  "has_starred": false,
  "full_description": "## Lagoon CLI\n\n<img src=\"./docs/lagoon-cli-logo.png\" width=100>\n\n[![CircleCI](https://circleci.com/gh/amazeeio/lagoon-cli.svg?style=svg)](https://circleci.com/gh/amazeeio/lagoon-cli) \n\nThis is a CLI for interacting with a [Lagoon](https://github.com/amazeeio/lagoon) instance. By default, it is configured\nto work against [Amazee.io](https://www.amazee.io/) instance.\n\nIf you run the CLI in a directory that has a valid `.lagoon.yml` and `docker-compose.yml` that references your project in lagoon, then you don't need to specify your project name on the command line as the CLI can read these files to determine the project. You can still define a project name though if you want to target a different project.\n\n## Install\nThe preferred method is installation via [Homebrew](https://brew.sh/).\n```\nbrew tap amazeeio/lagoon-cli\nbrew install lagoon\n```\n\nAlternatively, you may install by downloading one of the pre-compiled binaries from the [releases page](https://github.com/amazeeio/lagoon-cli/releases)\n\nIf you are building from source, see the Build section below\n\n### Usage\nOnce installed, to use the Lagoon CLI, run the following command\n```\nlagoon <command>\n```\n\n### Commands\nFor the full list of commands see the docs for [Lagoon CLI](https://amazeeio.github.io/lagoon-cli/commands/lagoon/)\n\n## Build\n\nNote: You should make sure you have your `GOPATH` configured and in your path if you are going to build the lagoon CLI. If you haven't got `go` installed and are using the docker method, you can export `GOPATH` to be somewhere else in your `PATH` for binaries.\n\n### Run tests\n```\nmake test\nmake test-docker\n```\n\n### Build locally\n```\nmake build-linux\nmake build-darwin #macos\n```\n\n### Build using Docker\nYou can build lagoon-cli without installing `go` by running the `docker-build` make command. This will use the `Dockerfile.build` to build the cli inside of a docker container, then copy the binaries into the `builds/` directory once complete\n```\nmake build-docker-darwin\nmake build-docker-linux\n```\n\n### Run all\n```\nmake all #locally\nmake all-docker-linux\nmake all-docker-darwin\n```\n\n### Releasing\nNew releases can be created by running one of the following, this will create the version bump and update the `gh-pages` branch\n```\nmake release-patch\nmake release-minor\nmake release-major\n```\n\n### Install\n```\nmake ARTIFACT_DESTINATION=/usr/local/bin install-linux\nmake ARTIFACT_DESTINATION=/usr/local/bin install-darwin\n```\n\n### Notes\nVersions can also be defined, and the binaries will be version tagged\n```\nmake VERSION=v0.0.1 ...\n```\n\n\n\n### Acknowledgements\n\n[Matt Glaman](https://github.com/mglaman) - Initial conception and development - Thanks Matt!\n",
  "permissions": {
    "read": true,
    "write": false,
    "admin": false
  },
  "media_types": [
    "application/vnd.docker.container.image.v1+json",
    "application/vnd.docker.distribution.manifest.list.v2+json"
  ],
  "content_types": [
    "image"
  ]
}