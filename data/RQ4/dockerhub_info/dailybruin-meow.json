{
  "user": "dailybruin",
  "name": "meow",
  "namespace": "dailybruin",
  "repository_type": "image",
  "status": 1,
  "status_description": "active",
  "description": "The Daily Bruin social media manager.",
  "is_private": false,
  "is_automated": true,
  "can_edit": false,
  "star_count": 0,
  "pull_count": 92450,
  "last_updated": "2022-07-09T23:58:24.07637Z",
  "date_registered": "2018-02-15T23:44:28.364095Z",
  "collaborator_count": 1,
  "affiliation": null,
  "hub_user": "dailybruin",
  "has_starred": false,
  "full_description": "# Meow [![Updates](https://pyup.io/repos/github/daily-bruin/meow/shield.svg)](https://pyup.io/repos/github/daily-bruin/meow/)\n\n*Daily Bruin's Twitter and Facebook poster*\n\n## [NEW] Dev environment using Docker Compose\nWe've switched over to a Procfile (Heroku/Flynn/Dokku) based system for configuring and deploying our system! In most scenarios, a `git push <server-remote> master` will be sufficient to deploy the service. We've also paired this with a newer, leaner and hopefully easier way to develop meow using a Docker Compose based workflow. Should our compute needs and resources grow in the future, we could also switch to a complete Docker deploy pipeline.\n\nThere are some additional commands required for Windows users that will be mentioned in the comments.\n\n### 0. Grab this repo, create an `.env`\n`git clone https://github.com/daily-bruin/meow.git` - clones the repo\n`cd meow` - enter the directory\n`echo REDIS_URL=redis://redis:6379/ > .env`\n`echo DATABASE_URL=postgres://postgres@db:5432/postgres >> .env` - bare minimum ENV variables, ensure that the newline character (\\n) is implemented in the .env file        \n\n### 1. Build images\n`docker-compose build` - builds and pulls the relevant Docker images\n\n### 2. Run migrations\n`docker-compose run web meow/manage.py migrate` - run the migrations          \n\n### 3. Initialize some variables\n`docker-compose run web meow/manage.py init` - initialize some of the runtime config necessary for meow to run\n\nMost of these can be left blank for now.\nYou can create your own Twitter/Facebook apps for this, or ask one of the PMs/editors for the keys to some test accounts.\n\n### 4. Create a superuser\n`docker-compose run web meow/manage.py createsuperuser`       \n\n### 5. Use that to configure Celery beat for sending out our social media posts!\nNavigate to `0.0.0.0:5000/admin/django_celery_beat/periodictask/`. Login with your created superuser and create a periodic task\nto send out the posts!\n\n## [DEPRECATED] Installation instructions\n\n### 1. Install system packages\nThese instructions are meant for Ubuntu. If you are using something other than ubuntu, find the packages on your own.\n#### With Vagrant\nIf you want to use [Vagrant](http://www.vagrantup.com/), clone this repo and `vagrant up` will automatically install everything in this section.\n#### Without Vagrant\nInstall the required packages:\n\n    sudo apt-get update\n    sudo apt-get install python-pip python-setuptools python-dev fabric git postgresql postgresql-server-dev-9.1 sendmail\n\n### 2. Create a virtual environment (optional)\nI prefer virtualenvwrapper since virtualenv depends on symlinks and VirtualBox shared folders don't support symlinks.\n\nInstall it like this:\n\n    sudo easy_install virtualenv\n    sudo pip install virtualenvwrapper\n\nAnd add this line to your `.bashrc`:\n\n    source /usr/local/bin/virtualenvwrapper.sh\n\nMake a virtualenv:\n\n    mkvirtualenv meow\n\nAnd activate the vitualenv (it does this automatically after creating it):\n\n    workon meow\n\nTo deactiveate...\n\n    deactivate\n\n### 3. Install python packages\nInstall psycopg2 (a postgres adapter) outside of your virtualenv\n\n    easy_install psycopg2\n\nThen within your virtualenv install everything in `requirements.txt` within this repo\n\n    pip install -r requirements.txt\n\n\n### 4. Configure django\nConfigure your database in django. For development environments, open `/etc/postgresql/9.1/main/pg_hba.conf` in a text editor (you may need to install something like `vim`) and, around line 84, change the word `peer` or `md5` to `trust` like so:\n\n```\n# Database administrative login by Unix domain socket\nlocal   all             postgres                                trust\n\n# TYPE  DATABASE        USER            ADDRESS                 METHOD\n\n# \"local\" is for Unix domain socket connections only\nlocal   all             all                                     trust\n```\nreload the database:\n\n    /etc/init.d/postgresql reload\n\nCreate a database (this makes a database with the name \"meow\"):\n\n    createdb -U postgres meow\n\nThen in `meow/meow/settings.py` configure your database settings. If you followed these instructions, this should work:\n\n```\n'ENGINE': 'django.db.backends.postgresql_psycopg2',\n'NAME': 'meow',\n'USER': 'postgres',\n'PASSWORD': '',\n```\n\nSync the databases through django and create your own superuser:\n\n    python manage.py syncdb\n    python manage.py migrate\n\n\n### 5. Configure meow\nRun `python manage.py init` to configure all settings.\n\nFor this part of the set up you will need\n\ntwitter consumer key and consumer secret: https://apps.twitter.com/app/new\n\nadditionally for twitter, you will need to fill in the Callback URL\n\nfacebook app ID and app secret: https://developers.facebook.com/docs/apps/register\n\nbitly access token: https://bitly.com/a/oauth_apps\n\n### 6. Configure sections\nUse the default Django admin (http://[YOUR_URL]/admin) to add a Section object. To find Twitter access keys/tokens, use the instructions at\n\n    python manage.py twitter_auth\n\nand to find the Facebook tokens, [use these instructions](http://stackoverflow.com/questions/17620266/getting-a-manage-page-access-token-to-upload-events-to-a-facebook-page).\n\n\n## Running meow\nRun meow by going into the `meow` directory of the repo and typing\n\n    fab rs\n\nThis will run meow on 0.0.0.0:8000 (not the default 127.0.0.1:8000) so it can be accessible from other machines. (i.e. accessing meow from a host when meow is running on a VM).\n\nIf you want to run it on a different port, the fabric command takes an argument. For instance,\n\n    fab rs:2000\n\nwill listen on port 2000.\n\n## Sending tweets\nTweets are sent through a management command. In `meow/`, execute:\n\n    python manage.py sendposts\n\nThis will send any posts that are marked as copy-edited and ready for publication but are not yet sent. If you want posts to send automatically, put this on a cron job.\n\nThe Daily Bruin's cron job is something like:\n\n```\n#! /bin/bash\nsource meow-venv/bin/activate\npython meow/manage.py sendposts\n```\n\n`sendposts` will output the facebook post or tweet when it tries to send to `stdout` (in ASCII) so feel free to implement logging. Almost all sending errors, however, are saved within meow's database for easy access.\n\n***\n\n## Test accounts\nThese are only used for testing and are set as private. When testing is over, these accounts should be deleted and removed from this page.\n\n### General\n#### Twitter\n**DailyBruinTest**    \n`bruin111`    \nonline+fakedb@media.ucla.edu\n\n#### Facebook\n**FakeDBthatCalvinCreated**    \nPage ID: `160988910774531`\n\n#### Facebook\n**FakeDB**    \nPage ID: `1416676115217881`\n\n### A&E\n#### Facebook\n**FakeDB A&E**    \nPage ID: `1415944791959246`\n\n***\n\n## License\nMeow is released under GNU AGPLv3. See `LICENSE` for more details.\n\nThough not required, if you use this software or would like to contribute to its development, please let us know by emailing us at online@media.ucla.edu. We'd love to know what it's being used for, especially if it's at another college newspaper.\n",
  "permissions": {
    "read": true,
    "write": false,
    "admin": false
  },
  "media_types": [
    "application/vnd.docker.container.image.v1+json"
  ],
  "content_types": [
    "image"
  ]
}