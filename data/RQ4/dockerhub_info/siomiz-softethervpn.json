{
  "user": "siomiz",
  "name": "softethervpn",
  "namespace": "siomiz",
  "repository_type": "image",
  "status": 1,
  "status_description": "active",
  "description": "A simple SoftEther VPN server ",
  "is_private": false,
  "is_automated": true,
  "can_edit": false,
  "star_count": 253,
  "pull_count": 7234851,
  "last_updated": "2022-10-27T00:31:15.282007Z",
  "date_registered": "2014-10-24T23:51:10.038119Z",
  "collaborator_count": 1,
  "affiliation": null,
  "hub_user": "siomiz",
  "has_starred": false,
  "full_description": "# A simple<sup>*</sup> [SoftEther VPN][1] server Docker image\n\n![](https://github.com/siomiz/SoftEtherVPN/workflows/Docker%20Image%20CI/badge.svg)\n\n<sup>*</sup> \"Simple\" as in no configuration parameter is needed for a single-user SecureNAT setup.\n\n## Image Tags\nBase OS Image | Latest Stable ([v4.38-9760-rtm](https://github.com/SoftEtherVPN/SoftEtherVPN_Stable/tree/v4.38-9760-rtm)) | Previous Base | [v4.36-9754-beta](https://github.com/SoftEtherVPN/SoftEtherVPN_Stable/tree/v4.36-9754-beta)\n------------- | -- | -- | --\n`centos:8` | **`:latest`**, `:centos`, `:9760`, `:4.38`, `:9760-centos`, `:4.38-centos` | `centos:7` | `:9754`, `:4.36`, `:9754-centos`, `4.36-centos`\n`debian:10-slim` | `:debian`, `:9760-debian`, `:4.38-debian` | `debian:10-slim` | `:9754-debian`, `:4.36-debian`\n`alpine:3.14` | `:alpine`, `:9760-alpine`, `:4.38-alpine` | `alpine:3.9` | `:9754-alpine`, `:4.36-alpine`\n`ubuntu:20.04` | `:ubuntu`, `:9760-ubuntu`, `:4.38-ubuntu` | `ubuntu:18.04` | `:9754-ubuntu`, `:4.36-ubuntu`\n\n## Setup\n - L2TP/IPSec PSK + OpenVPN\n - SecureNAT enabled\n - Perfect Forward Secrecy (DHE-RSA-AES256-SHA)\n - make'd from [the official SoftEther VPN GitHub Stable Edition Repository][2].\n\n`docker run -d --cap-add NET_ADMIN -p 500:500/udp -p 4500:4500/udp -p 1701:1701/tcp -p 1194:1194/udp -p 5555:5555/tcp siomiz/softethervpn`\n\nConnectivity tested on Android + iOS devices. It seems Android devices do not require L2TP server to have port 1701/tcp open.\n\nThe above example will accept connections from both L2TP/IPSec and OpenVPN clients at the same time.\n\nMix and match published ports: \n- `-p 500:500/udp -p 4500:4500/udp -p 1701:1701/tcp` for L2TP/IPSec\n- `-p 1194:1194/udp` for OpenVPN.\n- `-p 443:443/tcp` for OpenVPN over HTTPS.\n- `-p 5555:5555/tcp` for SoftEther VPN (recommended by vendor).\n- `-p 992:992/tcp` is also available as alternative.\n\nAny protocol supported by SoftEther VPN server is accepted at any open/published port (if VPN client allows non-default ports).\n\n## Credentials\n\nAll optional:\n\n- `-e PSK`: Pre-Shared Key (PSK), if not set: \"notasecret\" (without quotes) by default.\n- `-e USERS`: Multiple usernames and passwords may be set with the following pattern: `username:password;user2:pass2;user3:pass3`. Username and passwords are separated by `:`. Each pair of `username:password` should be separated by `;`. If not set a single user account with a random username (\"user[nnnn]\") and a random weak password is created.\n- `-e SPW`: Server management password. :warning:\n- `-e HPW`: \"DEFAULT\" hub management password. :warning:\n\nSingle-user mode (usage of `-e USERNAME` and `-e PASSWORD`) is still supported.\n\nSee the docker log for username and password (unless `-e USERS` is set), which *would look like*:\n\n    # ========================\n    # user6301\n    # 2329.2890.3101.2451.9875\n    # ========================\nDots (.) are part of the password. Password will not be logged if specified via `-e USERS`; use `docker inspect` in case you need to see it.\n\n:warning: if not set a random password will be set but not displayed nor logged. If specifying read the notice below.\n\n#### Notice ####\n\nIf you specify credentials using environment variables (`-e`), they may be revealed via the process list on host (ex. `ps(1)` command) or `docker inspect` command. It is recommended to mount an already-configured SoftEther VPN config file at `/opt/vpn_server.config`, which contains hashed passwords rather than raw ones. The initial setup will be skipped if this file exists at runtime (in entrypoint script). You can obtain this file from a running container using [`docker cp` command](https://docs.docker.com/engine/reference/commandline/cp/).\n\n## Configurations ##\n\nTo make the server configurations persistent beyond the container lifecycle (i.e. to make the config survive a restart), mount a complete config file at `/usr/vpnserver/vpn_server.config`. If this file is mounted the initial setup will be skipped.\nTo obtain a config file template, `docker run` the initial setup with Server & Hub passwords, then `docker cp` out the config file:\n\n    $ docker run --name vpnconf -e SPW=<serverpw> -e HPW=<hubpw> siomiz/softethervpn echo\n    $ docker cp vpnconf:/usr/vpnserver/vpn_server.config /path/to/vpn_server.config\n    $ docker rm vpnconf\n    $ docker run ... -v /path/to/vpn_server.config:/usr/vpnserver/vpn_server.config siomiz/softethervpn\n\nRefer to [SoftEther VPN Server Administration manual](https://www.softether.org/4-docs/1-manual/3._SoftEther_VPN_Server_Manual/3.3_VPN_Server_Administration) for more information.\n\n## Logging ##\n\nBy default SoftEther has a very verbose logging system. For privacy or space constraints, this may not be desirable. The easiest way to solve this create a dummy volume to log to /dev/null. In your docker run you can use the following volume variables to remove logs entirely.\n```\n-v /dev/null:/usr/vpnserver/server_log \\\n-v /dev/null:/usr/vpnserver/packet_log \\\n-v /dev/null:/usr/vpnserver/security_log\n```\n## Server & Hub Management Commands ##\n\nManagement commands can be executed just before the server & hub admin passwords are set via:\n- `-e VPNCMD_SERVER`: `;`-separated [Server management commands](https://www.softether.org/4-docs/1-manual/6._Command_Line_Management_Utility_Manual/6.3_VPN_Server_%2F%2F_VPN_Bridge_Management_Command_Reference_(For_Entire_Server)).\n- `-e VPNCMD_HUB`: `;`-separated [Hub management commands](https://www.softether.org/4-docs/1-manual/6._Command_Line_Management_Utility_Manual/6.4_VPN_Server_%2F%2F_VPN_Bridge_Management_Command_Reference_(For_Virtual_Hub)) (currently only for `DEFAULT` hub).\n\nExample: Set MTU via [`NatSet`](https://www.softether.org/4-docs/1-manual/6._Command_Line_Management_Utility_Manual/6.4_VPN_Server_%2F%2F_VPN_Bridge_Management_Command_Reference_(For_Virtual_Hub)#6.4.97_.22NatSet.22:_Change_Virtual_NAT_Function_Setting_of_SecureNAT_Function) Hub management command:\n`-e VPNCMD_HUB='NatSet /MTU:1500'`\n\nNote that commands run only if the config file is not mounted. Some commands (like `ServerPasswordSet`) will cause problems.\n\n## OpenVPN ##\n\n`docker run -d --cap-add NET_ADMIN -p 1194:1194/udp siomiz/softethervpn`\n\nThe entire log can be saved and used as an `.ovpn` config file (change as needed).\n\nServer CA certificate will be created automatically at runtime if it's not set. You can supply _a self-signed 1024-bit RSA certificate/key pair_ created locally OR use the `gencert` script described below. Feed the keypair contents via `-e CERT` and `-e KEY` ([use of `--env-file`][3] is recommended). X.509 markers (like `-----BEGIN CERTIFICATE-----`) and any non-BASE64 character (incl. newline) can be omitted and will be ignored.\n\nExamples (assuming bash; note the double-quotes `\"` and backticks `` ` ``):\n\n* ``-e CERT=\"`cat server.crt`\" -e KEY=\"`cat server.key`\"``\n* `-e CERT=\"MIIDp..b9xA=\" -e KEY=\"MIIEv..x/A==\"`\n* `--env-file /path/to/envlist`\n\n`env-file` template can be generated by:\n\n`docker run --rm siomiz/softethervpn gencert > /path/to/envlist`\n\nThe output will have `CERT` and `KEY` already filled in. Modify `PSK`/`USERS`.\n\nCertificate volumes support (like `-v` or `--volumes-from`) will be added at some point...\n\n## License ##\n\n[MIT License][4].\n\n  [1]: https://www.softether.org/\n  [2]: https://github.com/SoftEtherVPN/SoftEtherVPN_Stable\n  [3]: https://docs.docker.com/engine/reference/commandline/run/#set-environment-variables-e-env-env-file\n  [4]: https://github.com/siomiz/SoftEtherVPN/raw/master/LICENSE\n",
  "permissions": {
    "read": true,
    "write": false,
    "admin": false
  },
  "media_types": [
    "application/vnd.docker.distribution.manifest.list.v2+json",
    "application/vnd.docker.container.image.v1+json"
  ],
  "content_types": [
    "image"
  ]
}