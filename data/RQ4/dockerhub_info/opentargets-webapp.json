{
  "user": "opentargets",
  "name": "webapp",
  "namespace": "opentargets",
  "repository_type": "image",
  "status": 1,
  "status_description": "active",
  "description": "targetvalidation.org angular webapp",
  "is_private": false,
  "is_automated": true,
  "can_edit": false,
  "star_count": 0,
  "pull_count": 2081,
  "last_updated": "2017-01-27T12:20:40.712616Z",
  "date_registered": "2016-10-06T19:27:34.352149Z",
  "collaborator_count": 0,
  "affiliation": null,
  "hub_user": "opentargets",
  "has_starred": false,
  "full_description": "Docker container: [![Docker Repository on Quay](https://quay.io/repository/opentargets/webapp/status \"Docker Repository on Quay\")](https://quay.io/repository/opentargets/webapp)\n\nCircleCI build: [![CircleCI](https://circleci.com/gh/opentargets/webapp.svg?style=svg)](https://circleci.com/gh/opentargets/webapp)\n\n# OpenTargets Web App\n\nThis is the web app for the Open Targets Platform, based on the Open Targets REST API.\nThe app is based on Angular, while D3 is used for visualization and graphs.\n\n## Usage (run your own copy of the webapp)\nDepending on how you deploy, you might want to do two things:\n- change the API the webapp points to\n- apply a `custom.json` config that overrides the value in\n  `app/config/<general,dictionary,datatypes,datasources>/default.json`, \n\nfor example to change `evidence_sources` displayed\n\n**NB**: In general, you shouldn't use `custom.json` to override the `{\"api\":}`\nvariable of the app, otherwise the deploy steps described below will fail.\n\n### Deploy on netlify\n1. Fork the webapp (unless you are a member of the Open Targets team who deploys to production :smile: )\n2. (optional) add a `custom.json` to `/app/config/**/` to change your fork's\n   configuration. When deploying with netlify, the `custom.json` cannot be\n   changed without first commiting it to the code.\n2. Set up netlify/github integration, including specifying the build steps\n   (`yarn run full-setup`) and the directory served (`app`).\n3. Change the `netlify.toml` to point to your API. The app will point to the API\n   specified with `APIHOST` in the `netlify.toml` file.\n \n\n### Deploy using our docker image\n\nA docker image with a compiled version of the webapp from a NGINX web server is available on quay.io [![Docker Repository on Quay](https://quay.io/repository/opentargets/webapp/status \"Docker Repository on Quay\")](https://quay.io/repository/opentargets/webapp)\n\nTo start a container locally using the image:\n```sh\ndocker run -d -p 8443:443 -p 8080:80 quay.io/opentargets/webapp\n```\nThen visit https://localhost:8443\n\nThe standard image comes with self-signed certificates, so you will have click through a couple of security warnings to get to the app.\nTo add your own certificates, run something like this:\n\n```sh\ndocker run -d -p 8443:443 -p 8080:80 \\\n -v <my_ssl_dir>/server.crt:/usr/share/nginx/server.crt \\\n -v <my_ssl_dir>/server.key:/usr/share/nginx/server.key \\\n quay.io/opentargets/webapp\n```\n\n\n#### If you want to point to the docker container to an API server different than the production one:\n\nYou can specify the variables:\n- `REST_API_SCHEME` (`http` or `https` are valid options, `https` is the default) \n- `REST_API_SERVER` (e.g. `rest_api` to point to a container\n   named `rest_api` or `api.opentargets.io` to point to the production api; `platform-api.opentargets.io` is the default)\n- `REST_API_PORT` (default is the HTTPS/443 port)\n\nExample: \n\n```sh\ndocker run -d -p 8443:443 -p 8080:80 \\\n -e \"REST_API_SCHEME=https\" \\\n -e \"REST_API_SERVER=devapi.appspot.com\" \\\n -e \"REST_API_PORT=443\" \\\n quay.io/opentargets/webapp\n```\n\nBy default, the webapp /proxy should redirect to the proxy that is built into the rest api container.\nBut it is also possible to specify a separate server for all /proxy calls (calls to external services and data resources used in some\npages). These are the variables:\n- `PROXY_SCHEME` (`http` or `https` are valid options, `$REST_API_SCHEME` is the default)\n- `PROXY_SERVER` (if not set, `$REST_API_SERVER` is the default)\n- `PROXY_PORT` (if not set, `$REST_API_PORT` is the default)\n- `PROXY_PATH` (if not set, `proxy` is the default)\n\n:information_source: When using the rest api built-in proxy, additional domains can be included by adding them to the appropriate nginx\nconfiguration file. See https://github.com/opentargets/rest_api/ documentation for more details.\n\nAny other modifications, including changing the `custom.json` for the container,\ncannot be made at runtime. You'd have to create your own fork/modifications.\nRead on to the developing section.\n\n\n## Developing (change and contribute to the code)\n\n### Prerequisites\n\nInstallation and tests need some node.js tools: you must have `node.js` and its\npackage manager `npm` installed.  You can get them from\n[http://nodejs.org/](http://nodejs.org/)\n\n### Install\nClone the repository and install the dependencies. Tools are installed via NPM (and yarn)\n```sh\ngit clone https://github.com/opentargets/webapp.git\ncd webapp\nyarn run full-install\n```\n\n\nThis installs the required node modules and calls `jspm install` which takes\ncare of all Angular dependencies and 3rd party widgets. So these commands create\nthree directories:\n* `node_modules` - npm packages for the needed tools (http-server and modules\n  for testing); also all Angular code.\n* `app/jspm_packages` - some of the packages needed for loading widgets on\n  demand (deferred loading)\n\nAngular code is installed via Bower includes:\n* UI Bootstrap (Angular directives)\n* Bootstrap (css)\n* FontAwesome (css)\n* D3\n\n\n### Build\n\nAfter you make your changes you will want to build and run the application:\n\n1. set the `APIHOST` env variable to point to a fully functional rest_api. \nNotice that `APIHOST` can be of the form `\"https://somesite.com:1234/api/\"` (recommended)\n or a simple prefix `/api/` if you are taking care of reverse-proxying the \n API there (for eg if you are serving the app locally in nginx)\n2. (optional) add a `custom.json` with your configurations to override the ones\n   contained in `default.json`\n3. run `yarn run setup`\n4. all the code you need for deployment will be contained in `/app`.\n5. to point to a different API (or update your `custom.json`) and not have to\n   rebuild the whole app, you can change the `APIHOST` env var (or\n   `custom.json`) and then run only `gulp build-config`. :information_source: To use this feature,\n   make sure to have gulp installed (`npm install -g gulp`) and run gulp instead of\n   yarn in step 3 above (`gulp build-all`).\n\n\n### Running the app\n\nAny webserver that can serve the `/app` directory will do. \n\n**NOTE** to have a fully functional app, you also need to have your web server\nto reverse proxy `/proxy` to a valid rest_api server. For an example of running the app,\nyou can look at how the build and deployment is done for nginx in the `Dockerfile` of\nthis project.\n\n### Building custom images using docker\n\n#### Use our nginx based Dockerfile \n\nYou can run a nginx webserver using docker.\nWe have a `Dockerfile` that is derived from `nginx:alpine` which you can use.\n\nTo build:\n```sh\ndocker build . -t webapp-image\n```\n\nTo run: see section **\"Deploy using our docker image\"** above.\n\nIf you want to change the nginx configuration, you can change the [nginx_conf/nginx.template](nginx_conf/nginx.template)\nbefore running the build step above.\n\n### Branch images on quay\n\nIf you push some changes to a branch of the _main_ repo, a container with the tag of the branch\nwill be publicly available after a few minutes on quay.io\n```sh\ndocker pull quay.io/opentargets/webapp:<yourbranchname>\n```\n\n## Further documentation\n\n### [Plugins](/app/plugins/readme.md)\nRead about how to create platform plugins [here](/app/plugins/readme.md).\n",
  "permissions": {
    "read": true,
    "write": false,
    "admin": false
  },
  "media_types": [
    "application/vnd.docker.container.image.v1+json"
  ],
  "content_types": [
    "image"
  ]
}