{
  "user": "schlabbi",
  "name": "docker-notify",
  "namespace": "schlabbi",
  "repository_type": "image",
  "status": 1,
  "status_description": "active",
  "description": "Docker-Notify",
  "is_private": false,
  "is_automated": true,
  "can_edit": false,
  "star_count": 3,
  "pull_count": 26026,
  "last_updated": "2021-05-12T01:00:38.451492Z",
  "date_registered": "2018-08-27T09:07:14.557321Z",
  "collaborator_count": 0,
  "affiliation": null,
  "hub_user": "schlabbi",
  "has_starred": false,
  "full_description": "# Docker-Notify\n\nDocker-Notify can send you a mail or call a webhook when a Docker image gets updated. \n\nIf you are trying to set docker-notify up on a Synology, [here](Synology%20Readme.md) is a guide for that.\n\n## Variable Definitions\n* `$CONFIG_DIR` defines the directory where the config is stored\n\n## Setup\n\n1. Copy the `config.json.example` file to `$CONFIG_DIR/config.json`\n2. Fill out the `config.json` file:\n    * Read the self describing schema in src/schema.json\n    * If the tag is left out (example: user/repoName), you will receive a mail about any updates made (e.g. nightly builds)\n    * If the repository is an official repository, you can leave out the user and just add repoName:tag as image.\n3. Build the Docker container for `docker-notify`.\n4. Set the variable `$CONFIG_DIR` in the docker-compose file.\n5. Run the container with `docker-compose up -d`\n6. If you edit settings in the config, you need to execute `docker-compose up` again.\n\n## Example\nConsider the following scenario: \nYou have a server with 2 software services. \nOne is a dockerized webserver and the other one is a dockerized nextcloud image with some customizations, so your `docker-compose.yml` is looking like this:\n```yaml\nversion: '3'\nservices:\n  webserver:\n    image: apache2\n    restart: always\n  nextcloud:\n    image: customUser/nextcloud:latest\n    restart: always\n```\nNow you want to be notified if you may update your apache2-server and you want to be notified if you must call your ci-pipeline to rebuild your custom nextcloud-docker-image.\nSo, now your `docker-compose.yml` file is looking like this:\n```yaml\nversion: '3'\nservices:\n  webserver:\n    image: apache2\n    restart: always\n  nextcloud:\n    image: customUser/nextcloud:latest\n    restart: always\n  docker-notify:\n    image: schlabbi/docker-notify\n    restart: always\n    volumes: \n      - /home/someUser/notify/cache:/usr/src/app/cache\n      - /home/someUser/notify/config.json:/usr/src/app/config.json\n```\n\nThe `config.json` looks like the following:\n```javascript\n{\n    \"notifyServices\":[\n        {\n            \"image\": \"nextcloud:fpm\",\n            \"actions\": [\n                {\n                    \"type\": \"mailHook\",\n                    \"instance\": \"generalMail\",\n                    \"recipient\": \"info@example.org\"\n                },\n                {\n                    \"type\": \"webHook\",\n                    \"instance\": \"gitlabHook\"\n                }\n            ]\n        },\n        {\n            \"image\": \"httpd\",\n            \"actions\": [\n                {\n                    \"type\": \"mailHook\",\n                    \"instance\": \"generalMail\",\n                    \"recipient\": \"info@example.org\"\n                }\n            ]\n        }\n    ],\n    \"smtpServer\": {\n        \"generalMail\": {\n            \"host\": \"mail.example.org\",\n            \"port\": 25,\n            \"username\": \"docker-notify@example.org\",\n            \"password\": \"PASSWORD\",\n            \"sendername\": \"Docker-Notify\",\n            \"senderadress\": \"docker-notify@example.org\"\n        }\n    },\n    \"webHooks\":{\n        \"gitlabHook\": {\n            \"reqUrl\": \"https://ci.example.org\",\n            \"httpMethod\": \"POST\",\n            // This one is optional and will default to null.\n            \"httpBody\": {\n                \"foo\": [1, 2, 3]\n            }\n        }\n    }\n}\n```\n",
  "permissions": {
    "read": true,
    "write": false,
    "admin": false
  },
  "media_types": [
    "application/vnd.docker.container.image.v1+json"
  ],
  "content_types": [
    "image"
  ]
}