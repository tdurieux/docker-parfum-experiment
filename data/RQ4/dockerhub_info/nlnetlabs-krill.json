{
  "user": "nlnetlabs",
  "name": "krill",
  "namespace": "nlnetlabs",
  "repository_type": "image",
  "status": 1,
  "status_description": "active",
  "description": "Krill is a free, open source Resource Public Key Infrastructure (RPKI) daemon.",
  "is_private": false,
  "is_automated": false,
  "can_edit": false,
  "star_count": 1,
  "pull_count": 16166,
  "last_updated": "2023-01-04T15:55:17.518736Z",
  "date_registered": "2019-09-10T13:24:15.253882Z",
  "collaborator_count": 0,
  "affiliation": null,
  "hub_user": "nlnetlabs",
  "has_starred": false,
  "full_description": "[![GitHub Actions Build Status](https://github.com/NLnetLabs/krill/workflows/CI/badge.svg)](https://github.com/NLnetLabs/krill/actions?query=workflow%3ACI)\n[![Rust Crate Status](https://img.shields.io/crates/v/krill.svg?color=brightgreen)](https://crates.io/crates/krill)\n[![Docker Build Status](https://img.shields.io/github/workflow/status/NLnetLabs/krill/Packaging%20Docker?label=docker%20build)](https://hub.docker.com/r/nlnetlabs/krill)\n[![Documentation Status](https://readthedocs.org/projects/rpki/badge/?version=latest)](https://rpki.readthedocs.io/en/latest/krill/?badge=latest)\n[![E2E Test Status](https://github.com/nlnetlabs/krill/workflows/E2E%20Test/badge.svg)](https://github.com/NLnetLabs/krill/actions?query=workflow%3A%22E2E+Test%22)\n[![](https://img.shields.io/discord/818584154278199396?label=rpki%20on%20discord&logo=discord)](https://discord.gg/8dvKB5Ykhy)\n[![](https://img.shields.io/twitter/follow/krillrpki.svg?label=Follow&style=social)](https://twitter.com/krillrpki)\n\n# Krill\n\nKrill is a Resource Public Key Infrastructure (RPKI) daemon, featuring a\nCertificate Authority (CA) and publication server, written in Rust.  If you have\nany feedback, we would love to hear from you. Don’t hesitate to [create an issue\non Github](https://github.com/NLnetLabs/krill/issues/new) or post a message on\nour [RPKI mailing list](https://lists.nlnetlabs.nl/mailman/listinfo/rpki) or\n[Discord server](https://discord.gg/8dvKB5Ykhy). You can lean more about Krill\nand RPKI technology by reading our documentation on [Read the\nDocs](https://rpki.readthedocs.io/en/latest/krill/index.html).\n\n## Quick Start with Pre-built Packages\n\nAssuming you have a machine running a recent Debian or Ubuntu distribution, you \ncan install Krill from our [software package repository](https://packages.nlnetlabs.nl).\nTo use this repository, add the line below that corresponds to your operating system to \nyour `/etc/apt/sources.list` or `/etc/apt/sources.list.d/`\n\n```bash\ndeb [arch=amd64] https://packages.nlnetlabs.nl/linux/debian/ stretch main\ndeb [arch=amd64] https://packages.nlnetlabs.nl/linux/debian/ buster main\ndeb [arch=amd64] https://packages.nlnetlabs.nl/linux/ubuntu/ xenial main\ndeb [arch=amd64] https://packages.nlnetlabs.nl/linux/ubuntu/ bionic main\ndeb [arch=amd64] https://packages.nlnetlabs.nl/linux/ubuntu/ focal main\n```\nThen run the following commands.\n\n```bash\nsudo apt update && apt-get install -y gnupg2\nwget -qO- https://packages.nlnetlabs.nl/aptkey.asc | sudo apt-key add -\nsudo apt update\n```\n\nYou can then install, enable and start Krill by running\n\n```bash\nsudo apt install krill\nsudo systemctl enable --now krill\n\n```\n\nKrill's home directory will be in `/var/lib/krill/` and the configuration file,\nwhich already has an auto-generated authentication token is stored in \n`/etc/krill.conf`. Krill now exposes its user interface and API on \n`https://localhost:3000` using a self-signed TLS certificate. You can go to this \naddress in a web browser, accept the certificate warning and start configuring \nyour RPKI Certificate Authority. A Prometheus endpoint is available at `/metrics`.\n\n## Quick Start with Cargo\n\nAssuming you have a newly installed Debian or Ubuntu machine, you will need to\ninstall the C toolchain, OpenSSL, curl and Rust. You can then install Krill\nusing Cargo.\n\nAfter the installation has completed, first create a data directory in a\nlocation of your choice. Next, generate a basic configuration file specifying a\n[secret token](https://xkcd.com/936/) and make sure to refer to the data\ndirectory you just created. Finally, start Krill pointing to your configuration\nfile.\n\n```bash\napt install build-essential libssl-dev openssl pkg-config curl\ncurl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh\nsource ~/.cargo/env\ncargo install --locked krill\nmkdir ~/data\nkrillc config simple --token correct-horse-battery-staple --data ~/data/ > ~/data/krill.conf\nkrill --config ~/data/krill.conf\n```\n\nKrill now exposes its user interface and API on `https://localhost:3000` using a\nself-signed TLS certificate. You can go to this address in a web browser, accept\nthe certificate warning and start configuring your RPKI Certificate Authority. A\nPrometheus endpoint is available at `/metrics`.\n\nIf you have an older version of Rust and Krill, you can update via:\n\n```bash\nrustup update\ncargo install --locked --force krill\n```\n\n## Introduction\n\nThe Resource Public Key Infrastructure provides cryptographically signed\nstatements about the association of Internet routing resources. In\nparticular, it allows the holder of an IP address prefix to publish which\nAS number will be the origin of BGP route announcements for it.\n\nKrill lets organizations run RPKI on their own systems as a child of one or more\nRegional Internet Registries (RIRs). It can also run under a different parent,\nsuch as a National Internet Registry (NIR) or Enterprise and, in turn, act as a\nparent for other organizations.\n\n## System Requirements\n\nThe system requirements for Krill are quite minimal. We have successfully tested\nit on a Raspberry Pi. Any dual core machine with 2GB RAM will suffice, as the\ncryptographic operations that need to be performed by the Certificate Authority\nhave a negligible performance and memory impact on any modern day machine.\n\nWhen you publish ROAs yourself using the Krill publication server in combination\nwith Rsyncd and a web server of your choice, you will see traffic from several\nhundred relying party software tools querying every few minutes. The total\namount of traffic is also negligible for any modern day situation.\n\n## Getting Started\n\nThere are three things you need for Krill: Rust, a C toolchain and OpenSSL. You\ncan install Krill on any Operating System where you can fulfil these\nrequirements, but we will assume that you will run this on a UNIX-like OS.\n\n### Rust\n\nThe Rust compiler runs on, and compiles to, a great number of platforms.\nThe official [Rust Platform Support](https://forge.rust-lang.org/platform-support.html)\npage provides an overview of the various platforms and support levels.\n\nWhile some system distributions include Rust as system packages,\nKrill relies on a relatively new version of Rust, currently 1.47 or\nnewer. We therefore suggest to use the canonical Rust installation via a\ntool called ``rustup``.\n\nTo install ``rustup`` and Rust, simply do:\n\n```bash\ncurl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh\n```\n\nor, alternatively, get the file, have a look and then run it manually.\nFollow the instructions to get rustup and cargo, the rust build tool, into\nyour path.\n\nYou can update your Rust installation later by simply running\n\n```bash\nrustup update\n```\n\nTo get started you need Cargo's bin directory ($HOME/.cargo/bin) in your PATH\nenvironment variable. To configure your current shell, run\n\n```bash\nsource $HOME/.cargo/env\n```\n\n### C Toolchain\n\nSome of the libraries Krill depends on require a C toolchain to be\npresent. Your system probably has some easy way to install the minimum\nset of packages to build from C sources. For example, `apt install\nbuild-essential` will install everything you need on Debian/Ubuntu.\n\nIf you are unsure, try to run `cc` on a command line and if there’s a\ncomplaint about missing input files, you are probably good to go.\n\n### OpenSSL\n\nYour system will likely have a package manager that will allow you to install\nOpenSSL in a few easy steps. For Krill, you will need `libssl-dev`, sometimes\ncalled `openssl-dev`. On Debian-like Linux distributions, this should be as\nsimple as running:\n\n```bash\napt install libssl-dev openssl pkg-config\n```\n\n## Building\n\nThe easiest way to get Krill is to leave it to cargo by saying\n\n```bash\ncargo install --locked krill\n```\n\nIf you want to try the master branch from the repository instead of a\nrelease version, you can run\n\n```bash\ncargo install --git https://github.com/NLnetLabs/krill.git\n```\n\nIf you want to update an installed version, you run the same command but\nadd the `-f` flag (aka force) to approve overwriting the installed\nversion.\n\nThe command will build Krill and install it in the same directory\nthat cargo itself lives in (likely `$HOME/.cargo/bin`).\nWhich means Krill will be in your path, too.\n\n## Configuration\n\nThe first step is to choose where your data directory is going to live and to\ncreate it. Krill can then generate a basic configuration file for you, which\nonly have two required directives: a secret token and the path to the data\ndirectory.\n\n```bash\nmkdir ~/data\nkrillc config simple --token correct-horse-battery-staple --data ~/data/ > ~/data/krill.conf\n```\n\nYou can find a full example configuration file with defaults in the\n[repository](defaults/krill.conf).\n\n## Start and Stop the Daemon\n\nThere is currently no standard script to start and stop Krill. You could use the\nfollowing example script to start Krill. Make sure to update the `DATA_DIR`\nvariable to your real data directory, and make sure you saved your `krill.conf`\nfile there.\n\n```bash\n#!/bin/bash\nKRILL=\"krill\"\nDATA_DIR=\"/path/to/data\"\nKRILL_PID=\"$DATA_DIR/krill.pid\"\nCONF=\"$DATA_DIR/krill.conf\"\nSCRIPT_OUT=\"$DATA_DIR/krill.log\"\n\nnohup $KRILL -c $CONF >$SCRIPT_OUT 2>&1 &\necho $! > $KRILL_PID\n```\n\nYou can use the following sample script to stop Krill:\n\n```bash\n#!/bin/bash\nDATA_DIR=\"/path/to/data\"\nKRILL_PID=\"$DATA_DIR/krill.pid\"\n\nkill `cat $KRILL_PID`\n```\n\n### Proxy and HTTPS\n\nKrill uses HTTPS and refuses to do plain HTTP. By default Krill will generate a\n2048 bit RSA key and self-signed certificate in `/ssl` in the data directory\nwhen it is first started. Replacing the self-signed certificate with a TLS\ncertificate issued by a CA works, but has not been tested extensively.\n\nFor a robust solution, we recommend that you use a proxy server such as Nginx or\nApache if you intend to make Krill available to the Internet. Also, setting up a\nwidely accepted TLS certificate is well documented for these servers.\n\nWe recommend that you do not make Krill available publicly. You can use the\ndefault where Krill will expose its CLI, API and UI on `https://localhost:3000/`\nonly. You do not need to have Krill available externally, unless you intend to\nprovide certificates or a publication server to third parties.\n\n### Using the UI, CLI and API\n\nThere are three ways to interact with Krill: a user interface (UI), a command\nline interface (CLI) and and application programming interface (API). For most\nscenarios, the UI will be the most convenient way to interact with Krill. \n\n![Krill Welcome page](https://rpki.readthedocs.io/en/latest/_images/krill-ui-welome.png)\n\nPlease\nrefer to the\n[documentation](https://rpki.readthedocs.io/en/latest/krill/index.html) to\ndetermine what is best for you.\n",
  "permissions": {
    "read": true,
    "write": false,
    "admin": false
  },
  "media_types": [
    "application/vnd.docker.container.image.v1+json",
    "application/vnd.docker.distribution.manifest.list.v2+json"
  ],
  "content_types": [
    "image"
  ]
}