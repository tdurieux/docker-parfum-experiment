{
  "user": "lsegal",
  "name": "samus",
  "namespace": "lsegal",
  "repository_type": "image",
  "status": 1,
  "status_description": "active",
  "description": "https://github.com/lsegal/samus",
  "is_private": false,
  "is_automated": false,
  "can_edit": false,
  "star_count": 0,
  "pull_count": 140,
  "last_updated": "2020-06-20T07:08:12.81995Z",
  "date_registered": "2018-07-20T03:09:38.829094Z",
  "collaborator_count": 0,
  "affiliation": null,
  "hub_user": "lsegal",
  "has_starred": false,
  "full_description": "# Samus <a href=\"http://badge.fury.io/rb/samus\"><img src=\"https://badge.fury.io/rb/samus@2x.png\" alt=\"Gem Version\" height=\"18\"></a> [![Code Climate](https://codeclimate.com/github/lsegal/samus.png)](https://codeclimate.com/github/lsegal/samus)\n\nSamus helps you automate the release of Open Source Software. Samus works\nthrough a manifest file to describe discrete steps that you typically perform\nwhen packaging and publishing code.\n\nSamus comes with a set of built-in commands that let you prepare your\nrepository, push your changes, package your library, and upload it to various\nlocations / package managers. Samus is also open-source, so you can contribute\nnew commands if you think they are useful to others. Finally, Samus allows you\nto install and share custom commands and credentials for building and publishing\nyour code. That's right, Samus has a mechanism to share publishing credentials\nin a fairly secure way, so you can reliably publish releases from almost any\nmachine.\n\n## Installing\n\nSamus is a RubyGem and requires Ruby 1.9.x+. Installing is as easy as typing:\n\n```sh\ngem install samus\n```\n\nIf you would rather use Samus via Docker, see the Docker section in Usage below.\n\n## Usage\n\nSamus is driven by a manifest file that describes the steps to perform when\nbuilding or publishing a release. You can just use Samus to publish, or you\ncan use it for both, it's your choice.\n\n### Publishing\n\nIf you can handle building all of your assets on your own, you can use Samus\njust to publish your code. Create a manifest file called `manifest.json` (it\nmust be named this way) and put it in a directory with all of your assets. The\nmanifest file is just a list of discrete actions like so (minus comments):\n\n```js\n{\n  \"actions\": [\n    {\n      \"files\": \"git.tgz\",       // this is an archive of your git repository\n      \"action\": \"git-push\",\n      \"arguments\": {\n        \"remotes\": \"origin\",\n        \"refs\": \"main v1.5.0\" // the v1.5.0 is a tag for your release\n      }\n    },\n    {\n      \"action\": \"gem-push\",\n      \"files\": [\"my-built-gemfile.gem\"],\n      \"credentials\": \"my-credentials-key\"\n    }\n  ]\n}\n```\n\nNote: The credentials section defines a flat file or executable Samus looks\nat to get your key for authentication. See the \"Custom Commands & Credentials\"\nsection below for how to point to this file.\n\nNow just run `samus publish .`, and Samus will run these commands in order,\npushing your Git repository and your RubyGem to the world.\n\n### Building\n\nIn most cases you will want some help staging a release; Samus can help with\nthat too. Just in the same way you created a manifest for publishing, you\ncreate a manifest file for building your release. The only difference is now\nyou include build-time actions, in addition to your publish actions.\n\nHere is an example that updates your version.rb file, commits and tags the\nrelease, and zips up your repository and RubyGem for publishing. Call\nit \"samus.json\" for easier integration:\n\n```js\n// samus.json:\n{\n  \"actions\": [\n    {\n      \"action\": \"fs-sedfiles\",\n      \"files\": [\"lib/my-gem/version.rb\"],\n      \"arguments\": {\n        \"search\": \"VERSION = ['\\\"](.+?)['\\\"]\",\n        \"replace\": \"VERSION = '$version'\"\n      }\n    },\n    {\n      \"action\": \"git-commit\",\n      \"files\": [\"lib/my-gem/version.rb\"]\n    },\n    {\n      \"action\": \"git-merge\", // merge new commit into main branch\n      \"arguments\": {\n        \"branch\": \"main\"\n      }\n    },\n    {\n      \"action\": \"archive-git-full\",\n      \"files\": [\"git.tgz\"],\n      \"publish\": [{\n        \"action\": \"git-push\",\n        \"arguments\": {\n          \"remotes\": \"origin\",\n          \"refs\": \"main v$version\"\n        }\n      }]\n    },\n    {\n      \"action\": \"gem-build\",\n      \"files\": [\"my-gem.gemspec\"],\n      \"publish\": [\n        {\n          \"action\": \"gem-push\",\n          \"files\": [\"my-gem-$version.gem\"],\n          \"credentials\": \"my-credentials-key\"\n        }\n      ]\n    }\n  ]\n}\n```\n\nIt looks a little longer, but it contains all of the steps to automate when\nbumping the VERSION constant, tagging a version, merging into the primary\nbranch, and building the gem. To build a release with this manifest, simply\ntype:\n\n```sh\nsamus build 1.5.0\n```\n\nSamus will look for `samus.json` and build a release for version 1.5.0 of your\ncode. It will produce an archive called `release-v1.5.0.tar.gz` that you\ncan then publish with:\n\n```sh\nsamus publish release-v1.5.0.tar.gz\n```\n\nYou may have noticed some funny looking \"\\$version\" strings in the above\nmanifest. Those strings will be replaced with the version provided in the\nbuild command, so all the correct tagging and building will be handled for you.\n\nYou will also notice that the publish commands are part of this manifest.\nIn build mode, Samus handles building of the manifest.json document, grabbing\nany of the \"publish\" sections of an action and throwing them in the final\nmanifest.json. As illustrated above, not all actions require a publish section.\nIf you want to inspect the manifest file that Samus created, you can build\nyour release as a directory instead of a zip with `--no-zip`.\n\nNote: If you didn't name your manifest samus.json you can simply enter the\nfilename in the build command as `samus build VERSION manifest.json`.\n\n### Docker Support\n\nIf you would prefer to run Samus on a pre-built image with prepared\ndependencies, you can use the\n[lsegal/samus](https://hub.docker.com/r/lsegal/samus/) Docker image as follows:\n\n```sh\ndocker run --rm -v $HOME:/root -w /root/${PWD#$HOME} -it lsegal/samus \\\n  samus build <VERSION>\n```\n\nRemember to replace `<VERSION>` with your version string (i.e. `1.0.0`). Then\nto publish, use:\n\n```sh\ndocker run --rm -v $HOME:/root:ro -w /root/${PWD#$HOME} -it lsegal/samus \\\n  samus publish release-v<VERSION>.tar.gz\n```\n\n#### Docker Isolation Notes\n\nNote that these instructions are _not_ meant to run an isolated release\nenvironment, but instead as a convenience to provide all of the non-Ruby\ndependencies that Samus might need. If you wish to build and deploy from an\nisolated environment, you would have to build a Dockerfile `FROM lsegal/samus`\nand ensure that all necessary credentials and configuration is copied in. This\nis an exercise left up to the user, since it can be complex and depends on the\namount of configuration needed for building (Git configuration, SSH keys, etc).\n\nAlso note that this syntax is currently only supported for POSIX style systems\nand does not yet support Windows.\n\n## Built-in Commands\n\nSamus comes with a number of built-in commands optimized for dealing with\nthe Git workflow. You can use `samus show-cmd` to list all available commands,\nboth for building and publishing a release. Each command has documentation\nfor which files and arguments it accepts.\n\n```sh\n$ samus show-cmd\n... a list of commands ...\n```\n\nTo view a specific command, make sure to include the stage (`build` or\n`publish`):\n\n```sh\n$ samus show-cmd publish git-push\nPublish Command: git-push\n\nPushes Git repository refs to a set of remotes.\n\nFiles:\n  * The repository archive filename.\n\nArguments:\n  * refs:    a space delimited set of commits, branches, or tags to push.\n  * remotes: a space delimited set of remotes to push refs to.\n```\n\n## Custom Commands & Credentials\n\nSometimes you will need to create custom commands that do specific things\nfor your project. If they are generic, you should submit them to this project,\nbut if not, you can install custom commands that only you have access to.\nThis goes for credentials too, which you can install privately on your\nmachine.\n\nSamus works best when custom packages are Git-backed (preferably private)\nrepositories. In this case, you can simply type `samus install REPO` to\ndownload the repository to your machine:\n\n```sh\nsamus install git@github.com:my_org/samus_config\n```\n\nOf course, Samus doesn't need these custom packages to be Git-backed. All\nthe above command does is clone a repository into the ~/.samus directory.\nThe above command creates:\n\n```plaintext\n.samus/\n  `- samus_config/\n     `- commands/\n        `- build/\n           `- my-command\n     `- credentials/\n        `- my-credentials-key\n```\n\n### Commands\n\nCommands in Samus are just shell scripts which execute from the workspace\nor release directory (unless overridden by the build manifest). Samus passes\nall argument values (the keys from the \"arguments\" section of the manifest) in\nas environment variables with a prefixed underscore. For example, the\n`rake-task` command is just:\n\n```sh\n#!/bin/sh\n\nrake $_TASK\n```\n\nThe `$_TASK` variable is the \"task\" argument from the manifest.\n\nNote that commands must be executable (`chmod +x`) and have proper shebang\nlines or they will not function.\n\n#### Stages\n\nCommands either live in the build/ or publish/ sub-directories under the\ncommands directory depending on whether they are for `samus build` or\n`samus publish`. These are considered the respective \"stages\".\n\n#### Special Variables\n\nIn addition to exposing arguments as underscored environment variables,\nSamus also exposes a few special variables with double underscore prefixes:\n\n- `__BUILD_DIR` - this variable refers to the temporary directory that the\n  release package is being built inside of. The files inside of this directory,\n  and _only_ the files inside of this directory, will be built into the release\n  archive. If you write a build-time command that produces an output file which\n  is part of the release, you should make sure to move it into this directory.\n- `__ORIG_BRANCH` - the original branch being built from.\n- `__BUILD_BRANCH` - the name of the branch being built to.\n- `__RESTORE_FILE` - the restore file is a newline delimited file containing\n  branches and their original ref. All branches listed in this file will be\n  restored to the respective ref at the end of `samus build` regardless of\n  success status. If you make destructive modifications to existing branches\n  in the workspace repository, you should add the original ref for the branch\n  to this file.\n- `__CREDS_*` - provides key, secret, and other values loaded from credentials.\n  See Credentials section for more information on how these are set.\n\n#### Help Files\n\nIn order to integrate with `samus show-cmd <stage> <command>` syntax, your\ncommand should include a file named `your-command.help.md` in the same directory\nas the command script itself. These files are Markdown-formatted files and\nshould follow the same structure of the built-in command help files:\n\n```markdown\nShort description of command.\n\n- Files:\n\n  - Description of what the command line arguments are\n\n- Arguments:\n  - argname: Documentation for argument\n```\n\nNotes:\n\n- The first line of the help file is used as the summary in the `show-cmd`\n  listing.\n- Never omit a section. If a command has no files or arguments, use \"(none)\"\n  as the list item text.\n\n### Credentials\n\nCustom credentials are just flat files or executables in the `credentials/`\ndirectory of your custom package. When you use the \"credentials\" section in\na publish action of the manifest, the value should match the filename of\na file in one of your credentials directories. For instance, for the\n`my-credentials-key` value in our manifest examples, you should have:\n\n```\n.samus/samus_config/credentials/my-credentials-key\n```\n\nThis file is either a flat file with the format:\n\n```\nKey: THE_API_KEY\nSecret: THE_SECRET\n```\n\nOr, alternatively, an _executable_ which prints the above format to standard\nout.\n\nThese values are read in by Samus and get exposed as `$__CREDS_KEY` and\n`$__CREDS_SECRET` respectively in Samus commands. You can provide other\nmetadata as well, which would be included as `$__CREDS_NAME` (for the\nline \"NAME: value\").\n\n## Manifest File Format\n\nThe following section defines the manifest formats for the samus.json build\nmanifest as well as the manifest.json stored in release packages.\n\n### Base Format\n\nThe base format is defined as follows:\n\n```js\n{\n  \"actions\": [\n    {\n      \"action\": \"COMMAND_NAME\",   // [required] command name to execute\n      \"files\": [\"file1\", ...],    // optional list of files\n      \"arguments\": {              // optional map of arguments to pass to cmd\n        \"key\": \"value\",           // each key is passed in as _key in ENV\n        // ... (optional) more keys ...\n      },\n      \"pwd\": \"path\"               // optional path to execute command from\n      \"credentials\": \"KEY\",       // optional credentials to load for cmd\n    },\n    // ... (optional) more action items ...\n  ]\n}\n```\n\nAll manifests include a list of \"actions\", known individually as action items.\nEach action item has a single required property, \"action\", which is the command\nto execute for the action (found in `samus show-cmd`). An optional list of\nfiles are passed into the command as command line arguments, and the \"arguments\"\nproperty is a map of keys to values passed in as environment variables with a\n\"\\_\" prefix (key \"foo\" is set as environment variable \"\\_foo\"). Optional\ncredentials are loaded from the credentials directory.\n\n### Build Manifest Format\n\nThe build manifest format is similar to the above but allows for two extra keys\nin each action item called \"publish\" and \"condition\".\n\n#### \"publish\" Property\n\nThe \"publish\" property should contain the action item that is added to the\nfinal manifest.json built into the release package if the action item is\nevaluated (condition matches and command successfully executes). If a \"files\"\nproperty is set on the parent action item, that property is copied into the\npublish action by default, but it can be overridden.\n\nHere is an example build manifest showing the added use of the \"publish\"\nproperty:\n\n```js\n{\n  \"actions\": [\n    {\n      \"action\": \"readme-update\",\n      \"files\": [\"README.txt\"],\n      \"publish\": {\n        \"action\": \"readme-publish\"\n        \"arguments\": {\n          \"host\": \"www.mywebsite.com\"\n        },\n        \"credentials\": \"www.mywebsite.com\"\n      }\n    },\n    {\n      \"action\": \"readme-build\",\n      \"files\": [\"README.txt\"],\n      \"publish\": {\n        \"action\": \"readme-publish\"\n        \"arguments\": {\n          \"files\": [\"README.html\"], // override files property\n          \"host\": \"www.mywebsite.com\"\n        },\n        \"credentials\": \"www.mywebsite.com\"\n      }\n    }\n  ]\n\n}\n```\n\n#### \"condition\" Property\n\nThe \"condition\" property is a Ruby expression that is evaluated for truthiness\nto decide if the action item should be evaluated or skipped. A common use for\nthis is to take action based on the version (see \"\\$version\" variable section\nbelow). The following example runs an action item only for version 2.0+ of a\nrelease:\n\n```js\n{\n  \"action\": \"rake-task\",\n  \"arguments\": { \"task\": \"assets:package\" },\n  \"condition\": \"'$version' > '2.0'\"\n}\n```\n\n#### \"\\$version\" Variable\n\nA special variable \"\\$version\" is interpolated when loading the build manifest.\nThis variable can appear anywhere in the JSON document, and is interpolated\nbefore any actions or conditions are evaluated.\n\n## Contributing & TODO\n\nPlease help by contributing commands that Samus can use to build or publish\ncode. Integration with different package managers would be helpful, as well\nas improving the kinds of build-time tasks that are exposed.\n\n## Copyright\n\nSamus was created by Loren Segal in 2014 and is available under MIT license.\n",
  "permissions": {
    "read": true,
    "write": false,
    "admin": false
  },
  "media_types": [
    "application/vnd.docker.container.image.v1+json"
  ],
  "content_types": [
    "image"
  ]
}