{
  "user": "ldabiralai",
  "name": "simulado",
  "namespace": "ldabiralai",
  "repository_type": "image",
  "status": 1,
  "status_description": "active",
  "description": "",
  "is_private": false,
  "is_automated": false,
  "can_edit": false,
  "star_count": 0,
  "pull_count": 639,
  "last_updated": "2020-01-07T10:02:34.989156Z",
  "date_registered": "2019-04-08T14:37:16.562157Z",
  "collaborator_count": 0,
  "affiliation": null,
  "hub_user": "ldabiralai",
  "has_starred": false,
  "full_description": "# Simulado [![CircleCI](https://img.shields.io/circleci/project/github/ldabiralai/simulado.svg)](https://circleci.com/gh/ldabiralai/simulado) [![npm](https://img.shields.io/npm/v/simulado.svg)](https://www.npmjs.com/package/simulado) [![node](https://img.shields.io/node/v/simulado.svg)]()\n\n[![Deploy](https://www.herokucdn.com/deploy/button.svg)](https://heroku.com/deploy)\n\n[2.x docs](https://github.com/ldabiralai/simulado/tree/v2)\n\n### Install\n\n```bash\nnpm i simulado --save-dev\n```\n\nor\n\n```bash\ndocker run -p <desired_port>:80 ldabiralai/simulado\n```\n\n### Usage\n\n#### CLI\n\nThis will keep the server alive until the process is killed (unlike the below).\n\n```bash\n./node_modules/.bin/simulado\n```\n\n##### Options\n\n`-p`, `--port` - Port number that Simulado should start on.\n\n`-f`, `--file` - Path to a JSON file containing mocks to mock on startup.\n\n##### For HTTPS, use the following options\n\n`-c`, `--cert <filepath>` - Path to certificate\n\n`-k`, `--key <filepath>` - Path to certificate key\n\n#### Web Client\n\nOnce Simulado has started, going to `http://localhost:<SIMULADO_PORT_NUM>` will display a list of mocked endpoints and their responses.\n\n#### Basic Usage (ES6)\n\n```javascript\nimport simulado from 'simulado';\nimport axios from 'axios';\n\n(async function() {\n  // Start Simulado server\n  await simulado.start();\n\n  // Mock a response\n  await simulado.setMock({\n    path: '/data',\n    body: 'Hello World!'\n  });\n\n  // Make a request\n  const response = await axios.get('http://localhost:7001/data');\n  console.log(response.data); // => 'Hello World!'\n\n  // Stop Simulado server once done\n  await simulado.stop();\n})();\n```\n\n### API\n\n#### `start([options])`\n\nStart Simulado\n\n- options `<Object>`\n  - `port` `<number>` - Specify the port number to start Simulado on. Default: `7001`\n  - `https` `<object>` - Enable https support\n    - `key` `<string>` - path to key file\n    - `cert` `<string>` - path to cert file\n\n#### `setRemoteServer(url)`\n\nSets the url of a simulado instance on which the client should set mocks, for use if simulado lives on another server.\n\n- `url` `<String>` for example `https://my-simulado-server.herokuapp.com`\n\n#### `isRunning()`\n\nReturns `true` if simulado is running. Returns `false` if simulado is not started.\n\n#### `setMock(mockResponse)`\n\nSets a mock response\n\n- `mockResponse` `<MockResponse>` - Add a response to the store. [Full options MockResponse](#mock-response-options).\n\n#### `setMocks(mockResponses)`\n\nSets multiple mock responses\n\n- `mockResponses` `[<MockResponse>]` - Add responses to the store. [Full options MockResponse](#mock-response-options).\n\n#### `setDefaults(mockResponses)`\n\nClears mocked responses and sets new mocked responses\n\n- `mockResponses` `[<MockResponse>]` - Add responses to the store. [Full options MockResponse](#mock-response-options).\n\n#### `lastRequests(method, path[, limit])`\n\nFetch the last requests for a path\n\n- `method` `<String>` - The request method for the requests you want to fetch\n- `path` `<String>` - The path of the requests you want to fetch\n- `limit` `<number>` - Only return the given number of last requests\n\n#### `lastRequest(method, path)`\n\nFetch the last request for a path\n\n- `method` `<String>` - The request method for the requests you want to fetch\n- `path` `<String>` - The path of the requests you want to fetch\n\n#### `clearResponse(method, path)`\n\nClear mocked response from the store\n\n- `method` `<String>` - The HTTP request method to clear saved response from\n- `path` `<String>` - The path to match against when clearing\n\n#### `clearResponses()`\n\nClear all mocked responses from the store.\n\n#### `clearRequest(method, path)`\n\nClear captured request from the store\n\n- `method` `<String>` - The HTTP request method to clear saved request from\n- `path` `<String>` - The path to match against when clearing\n\n#### `clearRequests()`\n\nClear all captured requests from the store.\n\n#### `stop()`\n\nStop Simulado.\n\n### Mock Response Options\n\n```javascript\n{\n  // Path - Mandatory - The HTTP request path that you want the mock to response to.\n  path: '/testPath', // String path\n  path: /\\/testPath/.*/, // Regex path\n\n  method: 'GET', // Optional (defaults to GET if not set) - The HTTP request method that you want the mock to response to.\n\n  status: 200, // Optional (defaults to 200 if not set) - The HTTP status you want to mock to response with.\n\n  headers: {\n    'X-Custom-Header': 'Custom Header Value'\n  }, // Optional - The HTTP headers you want the mock to respond with.\n\n  body: {\n    data: 'DATA'\n  }, // Optional - The HTTP response body you want the mock to respond with.\n\n  conditionalHeaders: {\n    needMe: 'true'\n  }, // Optional - The mock with only response if the conditional headers are sent in the request.\n\n  conditionalBody: {\n    data: 'YouNeedThisData'\n  }, // Optional - The mock will only response if the conditional body is sent in the request.\n\n  delay: 5000 // the time (in milliseconds) to wait until responding to a request\n}\n```\n",
  "permissions": {
    "read": true,
    "write": false,
    "admin": false
  },
  "media_types": [
    "application/vnd.docker.container.image.v1+json"
  ],
  "content_types": [
    "image"
  ]
}