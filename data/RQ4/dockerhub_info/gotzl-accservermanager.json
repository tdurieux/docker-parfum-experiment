{
  "user": "gotzl",
  "name": "accservermanager",
  "namespace": "gotzl",
  "repository_type": "image",
  "status": 1,
  "status_description": "active",
  "description": "Assetto Corsa Competizione web based server management",
  "is_private": false,
  "is_automated": false,
  "can_edit": false,
  "star_count": 0,
  "pull_count": 7040,
  "last_updated": "2022-09-20T18:04:18.273573Z",
  "date_registered": "2019-03-10T14:21:42.820022Z",
  "collaborator_count": 0,
  "affiliation": null,
  "hub_user": "gotzl",
  "has_starred": false,
  "full_description": "Small web project to manage Assetto Corsa Competizione servers, build on Django.\nAllows to manage multiple configs and multiple server instances. Works in Linux and in Windows, dunno about OSX.\n\nCurrently, the web-app consists of two sub-apps\n* cfgs: Basically creates an autogenerated view from ACCs event.json, navigating through the object. Allows to create and edit multiple configurations, they are stored in the folder 'local_settings.CONFIGS'.\n* instances: Start a new ACC server instance or stop/delete running instances. Each instance uses a copy of the ACC 'server' directory, which is placed in the folder 'local_settings.INSTANCES'.\n\n\n## Development\n```bash\ngit clone https://github.com/gotzl/accservermanager.git\ncd accservermanager/\n# Configure the things in accservermanager/local_settings.py, ie the path to your ACC server files\npython manage.py migrate\npython manage.py createsuperuser\npython manage.py runserver\n``` \n\nNow you should be able to access the service at localhost:8000.\n\n\n## Dependencies\n```bash\npip3 install -r requirements.txt # --user\n```\nWindows users might want to follow the official Django install instructions.\n\n\n## Deployment\nFollow the development instructions to deploy the app, should be good enough for our purposes...\n\nAlternatively, I've created a docker image which uses wine to run the ACC server. No modifications to the local_settings.py are necessary in this case.\n\n```bash\n# Create a volume (if you didn't already create one)\ndocker volume create accservermanager-data\n# fire up a container\ndocker run -d --name accservermanager \\\n            -e SECRET_KEY=RANDOM_SEQUENCE \\\n            -v accservermanager-data:/data \\\n            -v PATH_TO_ACC/server:/server \\\n            -p 8000:8000 -p 9231:9231/udp -p 9232:9232/tcp \\\n            gotzl/accservermanager\n# initiate the app and create a manager user (only neccessary at the very first start)\ndocker exec -i -t accservermanager python3 manage.py migrate\ndocker exec -i -t accservermanager python3 manage.py createsuperuser\n```\n\nAfter login, you can add more users with djangos admin pages (...:8000/admin).\n\nIf you want to allow connections to the server from anywhere, use `-e ALLOWED_HOSTS='[\"*\"]'`. This should only be used behind a proxy!\n\nNote: The build-in django webserver only serves static files in debug mode. Therefore, either set `DEBUG=True`, or use `python manage.py runserver --insecure` (this is what's done in the docker image) or collect static files with `python3 manage.py collectstatic` and let s.t. else serve these files.\n\n## Persistence\nAll relevant data will be placed insided the 'local_settings.DATA_DIR' folder. In case of docker the folder is persisted outside of the container using a docker volume.\nThis means you can delete and rebuild your container without needing to restore your settings manually.\n\n\n## Compose example\n```bash\nversion: '2'\n\nservices:\n acc:\n  image: gotzl/accservermanager\n  volumes:\n   - /acc/server:/server\n   - accservermanager-data:/data\n  environment:\n#   - ALLOWED_HOSTS=[\"*\"]\n   - SECRET_KEY=\n  ports:\n   - 9232:9232/tcp\n   - 9231:9231/udp\n   - 8000:8000\n\nvolumes:\n  accservermanager-data:\n```\n",
  "permissions": {
    "read": true,
    "write": false,
    "admin": false
  },
  "media_types": [
    "application/vnd.docker.container.image.v1+json"
  ],
  "content_types": [
    "image"
  ]
}