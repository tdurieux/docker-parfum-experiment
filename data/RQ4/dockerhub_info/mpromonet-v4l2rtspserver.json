{
  "user": "mpromonet",
  "name": "v4l2rtspserver",
  "namespace": "mpromonet",
  "repository_type": "image",
  "status": 1,
  "status_description": "active",
  "description": "v4l2rtspserver built from https://github.com/mpromonet/v4l2rtspserver",
  "is_private": false,
  "is_automated": false,
  "can_edit": false,
  "star_count": 4,
  "pull_count": 45888,
  "last_updated": "2022-12-10T18:14:44.119634Z",
  "date_registered": "2018-03-03T11:55:15.050225Z",
  "collaborator_count": 0,
  "affiliation": null,
  "hub_user": "mpromonet",
  "has_starred": false,
  "full_description": "[![TravisCI](https://travis-ci.org/mpromonet/v4l2rtspserver.png)](https://travis-ci.org/mpromonet/v4l2rtspserver)\n[![CircleCI](https://circleci.com/gh/mpromonet/v4l2rtspserver.svg?style=shield)](https://circleci.com/gh/mpromonet/v4l2rtspserver)\n\n[![Codacy Badge](https://api.codacy.com/project/badge/Grade/aa0c28514aa843ea9fa7da358d905871)](https://www.codacy.com/app/michelpromonet_2643/v4l2rtspserver?utm_source=github.com&utm_medium=referral&utm_content=mpromonet/v4l2rtspserver&utm_campaign=badger)\n[![Coverity Scan Build Status](https://scan.coverity.com/projects/4644/badge.svg)](https://scan.coverity.com/projects/4644)\n[![Coverage Status](https://coveralls.io/repos/github/mpromonet/v4l2rtspserver/badge.svg?branch=master)](https://coveralls.io/github/mpromonet/v4l2rtspserver?branch=master)\n\n[![Release](https://img.shields.io/github/release/mpromonet/v4l2rtspserver.svg)](https://github.com/mpromonet/v4l2rtspserver/releases/latest)\n[![Download](https://img.shields.io/github/downloads/mpromonet/v4l2rtspserver/total.svg)](https://github.com/mpromonet/v4l2rtspserver/releases/latest)\n\n\nv4l2rtspserver\n====================\n\nThis is an streamer feed from :\n - an Video4Linux device that support H264, HEVC, JPEG, VP8 or VP9 capture.\n - an ALSA device that support PCM S16_BE, S16_LE, S32_BE or S32_LE\n \nThe RTSP server support :\n- RTP/UDP unicast\n- RTP/UDP multicast\n- RTP/TCP\n- RTP/RTSP/HTTP\n\nThe HTTP server support (available using -S option for compatible cpature format):\n- HLS\n- MPEG-DASH\n\nDependencies\n------------\n - liblivemedia-dev [License LGPL](http://www.live555.com/liveMedia/) > live.2012.01.07 (need StreamReplicator)\n - libv4l2cpp [Unlicense](https://github.com/mpromonet/libv4l2cpp/blob/master/LICENSE)\n - liblog4cpp5-dev  [License LGPL](http://log4cpp.sourceforge.net/#license) (optional)\n\nUsage\n-----\n\t./v4l2rtspserver [-v[v]] [-Q queueSize] [-O file] \\\n\t\t\t       [-I interface] [-P RTSP port] [-p RTSP/HTTP port] [-m multicast url] [-u unicast url] [-M multicast addr] [-c] [-t timeout] \\\n\t\t\t       [-r] [-s] [-W width] [-H height] [-F fps] [device1] [device2]\n\t\t -v       : verbose\n\t\t -vv      : very verbose\n\t\t -Q length: Number of frame queue  (default 10)\n\t\t -O output: Copy captured frame to a file or a V4L2 device\n\t\t \n\t\t RTSP options :\n\t\t -I addr  : RTSP interface (default autodetect)\n\t\t -P port  : RTSP port (default 8554)\n\t\t -p port  : RTSP over HTTP port (default 0)\n\t\t -U user:password : RTSP user and password\n\t\t -R realm  : use md5 password 'md5(<username>:<realm>:<password>')\n\t\t -u url   : unicast url (default unicast)\n\t\t -m url   : multicast url (default multicast)\n\t\t -M addr  : multicast group:port (default is random_address:20000)\n\t\t -c       : don't repeat config (default repeat config before IDR frame)\n\t\t -t secs  : RTCP expiration timeout (default 65)\n\t\t -T       : send Transport Stream instead of elementary Stream\n\t\t -S[secs] : HTTP segment duration (enable HLS & MPEG-DASH)\n\t\t \n\t\t V4L2 options :\n\t\t -r       : V4L2 capture using read interface (default use memory mapped buffers)\n\t\t -w       : V4L2 capture using write interface (default use memory mapped buffers)\n\t\t -s       : V4L2 capture using live555 mainloop (default use a separated reading thread)\n\t\t -f       : V4L2 capture using current capture format (-W,-H are ignored)\n\t\t -fformat : V4L2 capture using format (-W,-H are used)\n\t\t -W width : V4L2 capture width (default 640)\n\t\t -H height: V4L2 capture height (default 480)\n\t\t -F fps   : V4L2 capture framerate (default 25, 0 disable setting framerate)\n\t\t \n\t\t ALSA options :\n\t\t -A freq    : ALSA capture frequency and channel (default 44100)\n\t\t -C channels: ALSA capture channels (default 2)\n\t\t -a fmt     : ALSA capture audio format (default S16_LE)\n\t\t \n\t\t device   : V4L2 capture device and/or ALSA device (default /dev/video0)\n\nAuthentification is enable when almost one user is defined. You can configure credentials :\n * using plain text password: \n \n       -U foo:bar -U admin:admin\n * using md5 password: \n \n       -R myrealm -U foo:$(echo -n foo:myrealm:bar | md5sum | cut -d- -f1) -U admin:$(echo -n admin:myrealm:admin | md5sum | cut -d- -f1)\n\nIt is possible to compose the RTSP session is different ways :\n * v4l2rtspserver /dev/video0              : one RTSP session with RTP video capturing V4L2 device /dev/video0\n * v4l2rtspserver ,default                 : one RTSP session with RTP audio capturing ALSA device default\n * v4l2rtspserver /dev/video0,default      : one RTSP session with RTP audio and RTP video\n * v4l2rtspserver /dev/video0 ,default     : two RTSP sessions first one with RTP video and second one with RTP audio\n * v4l2rtspserver /dev/video0 /dev/video1  : two RTSP sessions with an RTP video\n * v4l2rtspserver /dev/video0,/dev/video0  : one RTSP session with RTP audio and RTP video (ALSA device associatd with the V4L2 device)\n\nBuild\n------- \n- Build  \n\n\t\tcmake . && make\n\n\tIf live555 is not installed it will download it from live555.com and compile it. If asound is not installed, ALSA will be disabled.  \n\tIf it still not work you will need to read Makefile.  \n\n- Install (optional) \n\n\t\tsudo make install\n\n- Packaging  (optional)\n\n\t\tcpack .\n\nUsing Raspberry Pi Camera\n------------------------- \nThis RTSP server works with Raspberry Pi camera using :\n- the unofficial V4L2 driver for the Raspberry Pi Camera Module http://www.linux-projects.org/uv4l/\n\n\tsudo uv4l --driver raspicam --auto-video_nr --encoding h264\n- the official V4L2 driver bcm2835-v4l2\n\n\tsudo modprobe -v bcm2835-v4l2\n\nUsing v4l2loopback\n----------------------- \nFor camera providing uncompress format [v4l2tools](https://github.com/mpromonet/v4l2tools) can compress the video to an intermediate virtual V4L2 device [v4l2loopback](https://github.com/umlaeute/v4l2loopback):\n\n\t/dev/video0 (camera device)-> v4l2compress_h264 -> /dev/video10 (v4l2loopback device) -> v4l2rtspserver\n\nThis workflow could be set using :\n\n\tmodprobe v4l2loopback video_nr=10\n\tv4l2compress_h264 /dev/video0 /dev/video10 &\n\tv4l2rtspserver /dev/video10 &\n\n\nPlaying HTTP streams\n-----------------------\nWhen v4l2rtspserver is started with '-S' arguments it also give access to streams through HTTP.  \nThese streams could be played :\n\n\t* for MPEG-DASH with :   \n           MP4Client http://..../unicast.mpd   \n\t   \n\t* for HLS with :  \n           vlc http://..../unicast.m3u8  \n           gstreamer-launch-1.0 playbin uri=http://.../unicast.m3u8  \n\nIt is now possible to play HLS url directly from browser :\n\n * using Firefox installing [Native HLS addons](https://addons.mozilla.org/en-US/firefox/addon/native_hls_playback)\n * using Chrome installing [Native HLS playback](https://chrome.google.com/webstore/detail/native-hls-playback/emnphkkblegpebimobpbekeedfgemhof)\n\nThere is also a small HTML page that use hls.js and dash.js, but dash still not work because player doesnot support MP2T format.\n\nUsing Docker image\n===============\nYou can start the application using the docker image :\n\n        docker run -p 8554:8554 -it mpromonet/v4l2rtspserver\n\nYou can expose V4L2 devices from your host using :\n\n        docker run --device=/dev/video0 -p 8554:8554 -it mpromonet/v4l2rtspserver\n\nThe container entry point is the v4l2rtspserver application, then you can :\n\n* get the help using :\n\n        docker run -it mpromonet/v4l2rtspserver -h\n\n* run the container specifying some paramters :\n\n        docker run --device=/dev/video0 -p 8554:8554 -it mpromonet/v4l2rtspserver -u \"\" -H640 -H480 \n",
  "permissions": {
    "read": true,
    "write": false,
    "admin": false
  },
  "media_types": [
    "application/vnd.docker.distribution.manifest.list.v2+json",
    "application/vnd.docker.container.image.v1+json"
  ],
  "content_types": [
    "image"
  ]
}