{
  "user": "target",
  "name": "impeller",
  "namespace": "target",
  "repository_type": "image",
  "status": 1,
  "status_description": "active",
  "description": "Manages Helm charts running in Kubernetes clusters.",
  "is_private": false,
  "is_automated": true,
  "can_edit": false,
  "star_count": 0,
  "pull_count": 334251,
  "last_updated": "2023-01-05T03:46:50.327294Z",
  "date_registered": "2018-10-04T20:29:35.015616Z",
  "collaborator_count": 0,
  "affiliation": null,
  "hub_user": "target",
  "has_starred": false,
  "full_description": "# impeller\n\nManages Helm charts running in Kubernetes clusters.\n\n[![Docker Hub](https://img.shields.io/docker/pulls/target/impeller.svg)](https://hub.docker.com/r/target/impeller)\n[![Latest Release](https://img.shields.io/github/release/target/impeller.svg)](https://github.com/target/impeller/releases)\n[![MIT License](https://img.shields.io/github/license/target/impeller.svg)](https://github.com/target/impeller/blob/master/LICENSE)\n\n## Use Cases\n### Managing multiple Helm charts\n* Use declarative configurations to specify the versions of Helm charts running in your cluster.\n* Easily override chart values and commit your changes to source control.\n* Use charts from multiple Helm repos.\n\n### Managing multiple Kubernetes clusters\n* Use different charts and different versions in each cluster.\n* Share chart overrides across clusters with a `default.yaml` file.\n* Make cluster-specific chart overrides when necessary.\n\n### Other features\n* Use it as a [Drone](https://drone.io/) plugin for CI/CD.\n* Read secrets from environment variables.\n* Deploy helm charts with helm/tiller or independently with kubectl\n\n## How to use\n### Command line\n1. Deployment command:\n`impeller --cluster-config-path=./clusters/my-cluster.yaml --kube-config=\"$(cat ~/.kube/config)\" --kube-context my-kubernetes-context`\n2. Dry run command:\n`impeller --cluster-config-path=./clusters/my-cluster.yaml --kube-config=\"$(cat ~/.kube/config)\" --kube-context my-kubernetes-context --dry-run`\nBy default override values are hidden with `--dry-run` option. You can add `showValue: true` to your release to enable printout:\n```\nreleases:\n  - name: test-release\n    namespace: kube-system\n    version: ~x.x.x\n    overrides:\n      - target: global.tag\n        showValue: true\n        value: 1.6.0\n```\n3. Diff run command:\n`impeller --cluster-config-path=./clusters/my-cluster.yaml --kube-config=\"$(cat ~/.kube/config)\" --kube-context my-kubernetes-context --diff-run`\n4. Generate Audit report file:\n`impeller --cluster-config-path=./clusters  --audit=true`\nor\n`impeller --cluster-config-path=./clusters  --audit=true --audit-file=./myreport.csv`\n\n### Drone pipeline\n#### Simple example\nThis example Drone pipeline shows how to manage a single clusters. Updates are automatically deployed on a push/merge to master.\n\n```yaml\ndeploy-charts:\n  when:\n    event: push\n    branch: master\n  image: path-to-docker/image:version\n  cluster_config: clusters/my-cluster-name.yaml\n  kube_context: my-kubernetes-context\n  secrets:\n    - source: my-kube-config-drone-secret\n      target: KUBE_CONFIG\n```\n\n#### Multi-cluster example\nThis example demonstrates managing multiple clusters with a Drone matrix. Updates will be automatically deployed to test clusters when commit is pushed/merged to master. Production clusters can be deployed to manually by using a `drone deploy` command, allowing additional control over which versions reach production.\n\n```yaml\nmatrix:\n  include:\n    - cluster: my-prod-cluster-1\n      stage: prod\n    - cluster: my-prod-cluster-2\n      stage: prod\n    - cluster: my-test-cluster-1\n      stage: test\n    - cluster: my-test-cluster-2\n      stage: test\n\npipeline:\n  deploy-charts-prod:\n    when:\n      event: deployment\n      matrix:\n        stage: prod\n        cluster: ${DRONE_DEPLOY_TO}\n    image: path-to-docker/image:version\n    cluster_config: clusters/${cluster}.yaml\n    kube_context: ${cluster}\n    secrets:\n      - source: my-kube-config-drone-secret\n        target: KUBE_CONFIG\n\n  deploy-charts-test:\n    when:\n      event: push\n      branch: master\n    image: path-to-docker/image:version\n    cluster_config: clusters/${cluster}.yaml\n    kube_context: ${cluster}\n    secrets:\n      - source: my-kube-config-drone-secret\n        target: KUBE_CONFIG\n```\n\n## Files and Directory Layout\n```\n chart-configs/\n |- clusters/\n    |- my-cluster-name.yaml\n    |- my-other-cluster-name.yaml\n |- values/\n    |- cluster-autoscaler/            # the release name from your cluster file\n       |- default.yaml                # overrides for all clusters\n       |- my-cluster-name.yaml        # overrides for a specific cluster\n       |- my-other-cluster-name.yaml\n    |- my-chart/\n       |- default.yaml\n```\n\nclusters/my-cluster-name.yaml:\n```yaml\nname: my-cluster-name  # This is used to find cluster-specific override files\nhelm:\n  defaultHistory: 3  # Optional; sets the --history-max flag for the \"helm\" deployment method on all releases\n  log: 5 # specifies log level\n  debug: flase # enables debug level logging\n  repos:  # Make Helm aware of any repos you want to use\n    - name: stable\n      url: https://kubernetes-charts.storage.googleapis.com/\n    - name: private-repo\n      url: https://example.com/my-private-repo/\nreleases:\n  - name: cluster-autoscaler  # Specify the release name\n    chartPath: stable/cluster-autoscaler  # Specify the chart source\n    namespace: kube-system  # Specify the namespace where to install\n    version: 0.7.0  # Specify the version of the chart to install\n    deploymentMethod: helm # Specify how the chart should be installed (\"helm\" or \"kubectl\")\n    history: 3  # Optional; sets the --history-max flag for the \"helm\" deployment method for this release\n  - name: my-chart\n    chartPath: private-repo/my-chart\n    namespace: kube-system\n    version: ~1.x  # Supports the same syntax as Helm's --version flag\n    deploymentMethod: kubectl\n```\n\nIn the above example, the `deploymentMethod` option allows configuration of how Helm charts are deployed. Two methods are available:\n* `helm`: This option uses Helm's normal installation method (which is to have the Tiller pod create the resources declared in your chart).\n* `kubectl`: If you do not want to run a Tiller pod in your cluster, you can use this option to run `helm template` to convert a chart to Kubernetes manifests and then use `kubectl` to apply that manifest.\n\nvalues/my-chart/default.yaml:\n```yaml\n# Place any overrides here, just as you would with Helm.\n# This file will be passed as an override to Helm.\nresources:\n  cpu:\n    requests: 100m\n    limits: 200m\n  memory:\n    requests: 1Gi\n    limits: 1Gi\n```\n\n### Deploying Release from tar file\n\n1. Add `chartsSource` field to the `release` to make impeller download charts tar archive\n1. Set `chartPath` to point to extracted chart location.\n\n```\nreleases:\n  - name: istio-base\n    namespace: kube-system\n    version: ~x.x.x\n    chartPath: \"./downloads/istio-1.6.0/manifests/charts/base\"\n    chartsSource: \"https://github.com/istio/istio/releases/download/1.6.0/istio-1.6.0-linux-amd64.tar.gz\"\n```\n\n## Additional examples\n\n### Override values with environment variables\nOverride a single value using Helm's `--set` feature.\n\nAdd the following release to your cluster YAML file:\n```yaml\n- name: release-name\n  namespace: default\n  version: 1.0.0\n  chartPath: repo/chart-name\n  overrides:\n    - target: tls.key\n      showValue: false\n      valueFrom:\n        environment: KEY\n```\n\nIf you set `showValue` to `true`, the value of the environment variable will logged to `stdout` for debugging purposes. By default, the value is redacted.\n\n### Override values with files\nOverride a single value from a file using Helm's `--set-file` feature.\n\nAdd the following release to your cluster YAML file:\n```yaml\n- name: release-name\n  namespace: default\n  version: 1.0.0\n  chartPath: repo/chart-name\n  overrides:\n    - target: tls.key\n      valueFrom:\n        file: /path/to/key\n```\n\nBecause the value is not logged, `showValue` has no effect when setting values from file. The file path is always logged to `stdout`.\n",
  "permissions": {
    "read": true,
    "write": false,
    "admin": false
  },
  "media_types": [
    "application/vnd.docker.container.image.v1+json"
  ],
  "content_types": [
    "image"
  ]
}