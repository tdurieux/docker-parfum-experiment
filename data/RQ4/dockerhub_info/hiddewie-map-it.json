{
  "user": "hiddewie",
  "name": "map-it",
  "namespace": "hiddewie",
  "repository_type": "image",
  "status": 1,
  "status_description": "active",
  "description": "Scripts for generating custom cycling maps using Mapnik and open data",
  "is_private": false,
  "is_automated": false,
  "can_edit": false,
  "star_count": 0,
  "pull_count": 631,
  "last_updated": "2022-11-26T18:06:36.665566Z",
  "date_registered": "2020-01-28T20:27:27.527999Z",
  "collaborator_count": 0,
  "affiliation": null,
  "hub_user": "hiddewie",
  "has_starred": false,
  "full_description": "\n## Generating a custom cycling map with Mapnik and Carto\n\nView the blogpost describing this project at https://dev.to/hiddewie/creating-a-custom-cycling-map-3g2a.\n\n## Cartography and features\n\n[Cartography](docs/cartography.md)\n\n[Features](docs/features.md)\n\n## Getting started\n\nThere are three scripts in this repository:\n- [`scripts/download.sh`](scripts/download.sh)\n\n  Downloads the required data into a Postgres database for the map.\n- [`scripts/generate.py`](scripts/generate.py)\n\n  A Python script which will generate the map for a Mapnik configuration. The Mapnik configuration can be generated by running\n  Carto against `carto/project.mml`.\n- [`scripts/bounds.py`](scripts/bounds.py)\n\n  A Python script which will output a list of bounding boxes that will fit the configured page size and bounding box perfectly.\n\nSee the environment variables which can be configured for the scripts below.\n\nCopy the distributed environment file [`.env.dist`](.env.dist) to `.env`. You can modify the `.env` file to suit your needs.\n\nThe scripts are packaged as Docker images, and configured in the file [`docker-compose.yml`](./docker-compose.yml).\n\n#### Database\n\nStart a database with GIS extensions enabled using the image [`postgis/postgis`](https://hub.docker.com/r/postgis/postgis):\n```bash\ndocker-compose -d up postgres-osm\n```\n\nUsed technology:\n- [PostgreSQL](https://www.postgresql.org/)\n- [PostGIS extension](https://postgis.net/install/)\n\n#### Map bounds\n\nDetermine the bounding box of the region you want to print. The bounding box will be used to determine the number of pages to print. If everything fits on one page (of the configured paper size) then padding is added until the page is filled exactly. If the content needs more than one page, then multiple tiled pages are generated to cover the bounding box area, with the configured page overlap (5% by default).\n\nThe [Map bounds tool](https://hiddewieringa.nl/map-bounds) can be used to choose coordinates on a map in a visual manner.\n\n[![](assets/bounds.png)](https://hiddewieringa.nl/map-bounds)\n\nIn addition to the visual tool, the script container [`hiddewie/map-it-bounds`](https://hub.docker.com/r/hiddewie/map-it-bounds) can be used. This commandline tool contains the same logic in the visual tool and as in the map generation script. The output will contain the bounding boxes for each page that will be generated. These values can be used for other commands.\n```bash\ndocker-compose run map-it-bounds\n```\n\n(You can also build it yourself using `docker-compose build map-it-bounds`)\n\n#### Data download & import\n\nMake sure you have created an account [U.S. Geological Survey](https://www.usgs.gov/). The USGS service is used to download terrain height information in high resolution.\n\nThen, download and import the data of the map using the docker image [`hiddewie/map-it-import`](https://hub.docker.com/r/hiddewie/map-it-import). Map the data directory of this project to the container. Some files are downloaded there that are used for shading the map. Run it using\n```bash\ndocker-compose run map-it-import\n```\nwhere `$USGS_USERNAME` and `$USGS_PASSWORD` are credentials for the [U.S. Geological Survey](https://www.usgs.gov/).\n\n(You can also build it yourself using `docker-compose build map-it-import`)\n\nUsed technology:\n- [Phyghtmap](http://katze.tfiu.de/projects/phyghtmap/phyghtmap.1.html)\n- [Osmium(-tool)](https://osmcode.org/osmium-tool/)\n- [`osm2psql`](https://osm2pgsql.org/)\n- [`shp2pgsql`, part of PostGIS](https://postgis.net/docs/using_postgis_dbmanagement.html#shp2pgsql_usage)\n- [GDAL](https://gdal.org/index.html)\n- [GeoFabrik](http://download.geofabrik.de/) as a data source for OSM data\n- [U.S. Geological Survey](https://www.usgs.gov/) as a data source for elevation data\n\n#### Map\n\nLet's generate a map. Use the image [`hiddewie/map-it`](https://hub.docker.com/r/hiddewie/map-it) and run it using\n```bash\ndocker-compose run map-it\n```\n\nThe map will be written to the mapped volume in the `/output` directory. The mapnik XML config will also be written there.\n\nThe bounding box does not need to fit perfectly on one page. If it does not, padding will be added or multiple pages will be generated.\n\n(You can also build it yourself using `docker-compose build map-it`)\n\nUsed technology:\n- [CartoCSS](https://github.com/mapbox/carto)\n- [Mapnik](https://mapnik.org/)\n- Icons from [OpenStreetMap Carto style](https://github.com/gravitystorm/openstreetmap-carto)\n\n##### Tiles\n\nThe same Docker image can also generate tiles in the output folder. Instead of generating a PDF map, these tiles can be used\nfor a sliding online map.\n\n```bash\ndocker-compose run map-it /usr/bin/python3 tiles.py\n```\n\nThe tiles will be generated in the `output/tiles` directory.\n\nUsed technology:\n- [CartoCSS](https://github.com/mapbox/carto)\n- [Mapnik](https://mapnik.org/)\n- Icons from [OpenStreetMap Carto style](https://github.com/gravitystorm/openstreetmap-carto)\n- Tile rendering script based on [generate_tiles.py](https://github.com/openstreetmap/mapnik-stylesheets/blob/236f8d0/generate_tiles.py)\n\n### Script parameters\n\nThe lists below describe the parameters used for the scripts, including defaults.\n\n#### Import script\n\n<dl>\n  <dt><tt>PG_HOST</tt> (default <tt>localhost</tt>)</dt>\n  <dd>The Postgres database host</dd>\n\n  <dt><tt>PG_PORT</tt> (default <tt>5432</tt>)</dt>\n  <dd>The Postgres database port</dd>\n\n  <dt><tt>PG_USER</tt> (default <tt>osm</tt>)</dt>\n  <dd>The Postgres database user</dd>\n\n  <dt><tt>PG_PASSWORD</tt> (default empty)</dt>\n  <dd>The Postgres database password</dd>\n\n  <dt><tt>PG_DATABASE</tt> (default <tt>gis</tt>)</dt>\n  <dd>The Postgres database</dd>\n\n  <dt><tt>FEATURE_COUNTRIES</tt> (required, default empty)</dt>\n  <dd>Countries that will be downloaded from <a href=\"http://download.geofabrik.de\">GeoFabrik</a>. Separated by whitespace. For example <tt>europe/netherlands/overijssel europe/slovakia europe/poland/slaskie europe/poland/malopolskie</tt>.</dd>\n\n  <dt><tt>USGS_USERNAME</tt> and <tt>USGS_PASSWORD</tt> (required, default empty)</dt>\n  <dd>Create an account for accessing <a href=\"https://www.usgs.gov/\">U.S. Geological Survey</a> for terrain information. This can be done for free <a href=\"https://store.usgs.gov/user/register\">. Set the credentials in these environment variables.<br>\n  The <a href=\"http://katze.tfiu.de/projects/phyghtmap/phyghtmap.1.html\">phyghtmap</a> tool is used for downloading terrain information.</dd>\n\n  <dt><tt>BBOX</tt> (required, default empty)</dt>\n  <dd>Of the form <tt>A:B:C:D</tt>, for example <tt>5.3:51.1:6.8:53.0056</tt> where <tt>(A, B)</tt> is the lower left corner of the bounding box and <tt>(C, D)</tt> is the top right corner. Specify in longitude - latitude order in the <a href=\"https://epsg.io/4326\">EPSG:4326</a> coordinate system.</dd>\n</dl>\n\nOptional extra parameters for tweaking the import of downloaded OpenStreetMap data into the database:\n\n<dl>\n  <dt><tt>OSM2PGSQL_CACHE</tt> (default <tt>1024</tt>)</dt>\n  <dd>The cache size in mega bytes that the import script may use.</dd>\n\n  <dt><tt>OSM2PGSQL_NUMPROC</tt> (default <tt>4</tt>)</dt>\n  <dd>The number of processes that import script may use.</dd>\n</dl>\n\n#### Map generation & bounding box script\n\n<dl>\n  <dt><tt>PG_HOST</tt> (default <tt>localhost</tt>)</dt>\n  <dd>The Postgres database host</dd>\n\n  <dt><tt>PG_PORT</tt> (default <tt>5432</tt>)</dt>\n  <dd>The Postgres database port</dd>\n\n  <dt><tt>PG_USER</tt> (default <tt>osm</tt>)</dt>\n  <dd>The Postgres database user</dd>\n\n  <dt><tt>PG_PASSWORD</tt> (default empty)</dt>\n  <dd>The Postgres database password</dd>\n\n  <dt><tt>PG_DATABASE</tt> (default <tt>gis</tt>)</dt>\n  <dd>The Postgres database</dd>\n\n  <dt><tt>MAP_NAME</tt> (default <tt>map</tt>)</dt>\n  <dd>The name of the map. Used for generating filenames. Existing files will be overwritten. The filename will be suffixed with the index of the generated page if more than one page is generated because the bounding box area does not fit on one page.</dd>\n\n  <dt><tt>BBOX</tt> (required, default empty)</dt>\n  <dd>Of the form <tt>A:B:C:D</tt>, for example <tt>5.3:51.1:6.8:53.0056</tt> where <tt>(A, B)</tt> is the lower left corner of the bounding box and <tt>(C, D)</tt> is the top right corner. Specify in longitude - latitude order in the <a href=\"https://epsg.io/4326\">EPSG:4326</a> coordinate system.</dd>\n\n  <dt><tt>SCALE</tt> (default <tt>1:150000</tt>)</dt>\n  <dd>The scale of the map, when printed on the indicated paper size. The value is of the form <tt>1:N</tt> with <tt>N</tt> a number.</dd>\n\n  <dt><tt>PAPER_ORIENTATION</tt> (default <tt>portrait</tt>)</dt>\n  <dd>The orientation of the generated page. Valid values: <tt>portrait</tt> and <tt>landscape</tt>.</dd>\n\n  <dt><tt>PAPER_SIZE</tt> (default <tt>A4</tt>)</dt>\n  <dd>The size of the generated page. Valid values: <tt>A0</tt>, <tt>A1</tt>, <tt>A2</tt>, <tt>A3</tt>, <tt>A4</tt> and <tt>A5</tt>, or any value of the form <tt>A mm x B mm</tt> (millimeters), <tt>A in x B in</tt> (inches) or <tt>A m x B m</tt> (meters) with <tt>A</tt> and <tt>B</tt> numeric values. For example <tt>A1</tt>, <tt>10 mm x 100 mm</tt> or <tt>20 in x 5 in</tt>.</dd>\n\n  <dt><tt>PAGE_OVERLAP</tt> (default <tt>5%</tt>)</dt>\n  <dd>A percentage of the form '5%' or '10.1%'. The percentage of each page is taken on all four sides of the paper as padding. When multiple pages are generated the padding will cause overlap between the pages.</dd>\n</dl>\n\n#### Tile generation script\n\n<dl>\n  <dt><tt>PG_HOST</tt> (default <tt>localhost</tt>)</dt>\n  <dd>The Postgres database host</dd>\n\n  <dt><tt>PG_PORT</tt> (default <tt>5432</tt>)</dt>\n  <dd>The Postgres database port</dd>\n\n  <dt><tt>PG_USER</tt> (default <tt>osm</tt>)</dt>\n  <dd>The Postgres database user</dd>\n\n  <dt><tt>PG_PASSWORD</tt> (default empty)</dt>\n  <dd>The Postgres database password</dd>\n\n  <dt><tt>PG_DATABASE</tt> (default <tt>gis</tt>)</dt>\n  <dd>The Postgres database</dd>\n\n  <dt><tt>BBOX</tt> (required, default empty)</dt>\n  <dd>Of the form <tt>A:B:C:D</tt>, for example <tt>5.3:51.1:6.8:53.0056</tt> where <tt>(A, B)</tt> is the lower left corner of the bounding box and <tt>(C, D)</tt> is the top right corner. Specify in longitude - latitude order in the <a href=\"https://epsg.io/4326\">EPSG:4326</a> coordinate system.</dd>\n\n  <dt><tt>NUM_THREADS</tt> (required, default <tt>6</tt>)</dt>\n  <dd>The number of threads that will be used to concurrently render tiles.</dd>\n\n  <dt><tt>MIN_ZOOM</tt> and <tt>MAX_ZOOM</tt> (required, both default <tt>12</tt>)</dt>\n  <dd>The minimum and maximum zoom level to generate.</dd>\n\n  <dt><tt>TMS_SCHEME</tt> (<tt>true</tt> or <tt>false</tt>, default <tt>false</tt>)</dt>\n  <dd>Generate tiles for schemes with the TMS format of the <tt>y</tt> coordinate.</dd>\n\n  <dt><tt>SKIP_IF_EXISTS</tt> (<tt>true</tt> or <tt>false</tt>, default <tt>true</tt>)</dt>\n  <dd>Whether tile generation should be skipped if the tile file already exists.</dd>\n</dl>\n\n## Examples\n\n[Example PDF Output](https://github.com/hiddewie/map-it/releases/download/v5.0.0/map.pdf)\n\n![Expected output](assets/cover.png)\n\n![Printed map](assets/printed2.jpg)\n\n## Local development\n\nYou can run and develop the map style locally by using the Kosmtik interface.\n\nRun Kosmtik with\n```bash\ndocker-compose run\n```\n\nGo to [http://localhost:6789/map-it](http://localhost:6789/map-it).\n\n![Kosmtik](assets/kosmtik.png)\n",
  "permissions": {
    "read": true,
    "write": false,
    "admin": false
  },
  "media_types": [
    "application/vnd.docker.container.image.v1+json"
  ],
  "content_types": [
    "image"
  ]
}