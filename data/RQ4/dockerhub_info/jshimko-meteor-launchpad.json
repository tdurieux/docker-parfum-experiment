{
  "user": "jshimko",
  "name": "meteor-launchpad",
  "namespace": "jshimko",
  "repository_type": "image",
  "status": 1,
  "status_description": "active",
  "description": "A base Docker image for Meteor apps.",
  "is_private": false,
  "is_automated": false,
  "can_edit": false,
  "star_count": 23,
  "pull_count": 368738,
  "last_updated": "2021-12-14T15:52:18.190831Z",
  "date_registered": "2016-07-10T22:02:40.32459Z",
  "collaborator_count": 0,
  "affiliation": null,
  "hub_user": "jshimko",
  "has_starred": false,
  "full_description": "[![Circle CI](https://circleci.com/gh/jshimko/meteor-launchpad/tree/master.svg?style=svg)](https://circleci.com/gh/jshimko/meteor-launchpad/tree/master)\n# Meteor Launchpad - Base Docker Image for Meteor Apps\n\n### Build\n\nAdd the following to a `Dockerfile` in the root of your app:\n\n```Dockerfile\nFROM jshimko/meteor-launchpad:latest\n```\n\nThen you can build the image with:\n\n```sh\ndocker build -t yourname/app .\n```\n\n### Run\n\nNow you can run your container with the following command...\n(note that the app listens on port 3000 because it is run by a non-root user for [security reasons](https://github.com/nodejs/docker-node/issues/1) and [non-root users can't run processes on port 80](http://stackoverflow.com/questions/16573668/best-practices-when-running-node-js-with-port-80-ubuntu-linode))\n\n```sh\ndocker run -d \\\n  -e ROOT_URL=http://example.com \\\n  -e MONGO_URL=mongodb://url \\\n  -e MONGO_OPLOG_URL=mongodb://oplog_url \\\n  -e MAIL_URL=smtp://mail_url.com \\\n  -p 80:3000 \\\n  yourname/app\n```\n\n#### Delay startup\n\nIf you need to force a delay in the startup of the Node process (for example, to wait for a database to be ready), you can set the `STARTUP_DELAY` environment variable to any number of seconds.  For example, to delay starting the app by 10 seconds, you would do this:\n\n```sh\ndocker run -d \\\n  -e ROOT_URL=http://example.com \\\n  -e MONGO_URL=mongodb://url \\\n  -e STARTUP_DELAY=10 \\\n  -p 80:3000 \\\n  yourname/app\n```\n\n### Build Options\n\nMeteor Launchpad supports setting custom build options in one of two ways.  You can either create a launchpad.conf config file in the root of your app or you can use [Docker build args](https://docs.docker.com/engine/reference/builder/#arg).  The currently supported options are to install PhantomJS, GraphicsMagick, MongoDB, or any list of `apt-get` dependencies (Meteor Launchpad is built on `debian:jesse`).  \n\nIf you choose to install Mongo, you can use it by _not_ supplying a `MONGO_URL` when you run your app container.  The startup script will then start Mongo inside the container and tell your app to use it.  If you _do_ supply a `MONGO_URL`, Mongo will not be started inside the container and the external database will be used instead.\n\nNote that having Mongo in the same container as your app is just for convenience while testing/developing.  In production, you should use a separate Mongo deployment or at least a separate Mongo container.\n\nHere are examples of both methods of setting custom options for your build:\n\n**Option #1 - launchpad.conf**\n\nTo use any of them, create a `launchpad.conf` in the root of your app and add any of the following values.\n\n```sh\n# launchpad.conf\n\n# Use apt-get to install any additional dependencies\n# that you need before your building/running your app\n# (default: undefined)\nAPT_GET_INSTALL=\"curl git wget\"\n\n# Install a custom Node version (default: latest 4.x)\nNODE_VERSION=4.8.3\n\n# Installs the latest version of each (default: all false)\nINSTALL_MONGO=true\nINSTALL_PHANTOMJS=true\nINSTALL_GRAPHICSMAGICK=true\n```\n\n**Option #2 - Docker Build Args**\n\nIf you prefer not to have a config file in your project, your other option is to use the Docker `--build-arg` flag.  When you build your image, you can set any of the same values above as a build arg.\n\n```sh\ndocker build \\\n  --build-arg APT_GET_INSTALL=\"curl git wget\" \\\n  --build-arg INSTALL_MONGO=true \\\n  --build-arg NODE_VERSION=4.7.2 \\\n  -t myorg/myapp:latest .\n```\n\n\n## Development Builds\n\nYou can optionally avoid downloading Meteor every time when building regularly in development.  Add the following to your Dockerfile instead...\n\n```Dockerfile\nFROM jshimko/meteor-launchpad:devbuild\n```\n\nThis isn't recommended for your final production build because it creates a much larger image, but it's a bit of a time saver when you're building often in development.  The first build you run will download/install Meteor and then every subsequent build will be able to skip that step and just build the app.\n\n## Docker Compose\n\nAdd a `docker-compose.yml` to the root of your project with the following content and edit the app image name to match your build name.  Everything else should work as-is.\n\n```yaml\n# docker-compose.yml\n\napp:\n  image: yourname/app\n  ports:\n    - \"80:3000\"\n  links:\n    - mongo\n  environment:\n    - ROOT_URL=http://example.com\n    - MONGO_URL=mongodb://mongo:27017/meteor\n\nmongo:\n  image: mongo:latest --storageEngine=wiredTiger\n```\n\nAnd then start the app and database containers with...\n\n```sh\ndocker-compose up -d\n```\n\n## Custom Builds of Meteor Launchpad\n\nIf you'd like to create a custom build for some reason, you can use the `build.sh` script in the root of the project to run all of the necessary commands.\n\nFirst, make any changes you want, then to create your custom build:\n\n```sh\n# builds as jshimko/meteor-launchpad:latest\n./build.sh\n```\n\n## License\n\nMIT License\n\nCopyright (c) 2017 Jeremy Shimko\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.",
  "permissions": {
    "read": true,
    "write": false,
    "admin": false
  },
  "media_types": [
    "application/vnd.docker.container.image.v1+json",
    "application/vnd.docker.distribution.manifest.v1+prettyjws"
  ],
  "content_types": [
    "image"
  ]
}