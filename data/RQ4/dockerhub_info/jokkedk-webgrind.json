{
  "user": "jokkedk",
  "name": "webgrind",
  "namespace": "jokkedk",
  "repository_type": "image",
  "status": 1,
  "status_description": "active",
  "description": "Xdebug Profiling Web Frontend in PHP",
  "is_private": false,
  "is_automated": false,
  "can_edit": false,
  "star_count": 2,
  "pull_count": 20963,
  "last_updated": "2022-06-02T10:25:41.22143Z",
  "date_registered": "2020-06-08T08:25:30.914628Z",
  "collaborator_count": 0,
  "affiliation": null,
  "hub_user": "jokkedk",
  "has_starred": false,
  "full_description": "Webgrind\n========\nWebgrind is an [Xdebug](http://www.xdebug.org) profiling web frontend in PHP. It implements a subset of the features of [kcachegrind](https://kcachegrind.github.io/) and installs in seconds and works on all platforms. For quick'n'dirty optimizations it does the job. Here's a screenshot showing the output from profiling:\n\n[![](http://jokke.dk/media/2008-webgrind/webgrind_small.png)](http://jokke.dk/media/2008-webgrind/webgrind_large.png)\n\nFeatures\n--------\n  * Super simple, cross platform installation - obviously :)\n  * Track time spent in functions by self cost or inclusive cost. Inclusive cost is time inside function + calls to other functions.\n  * See if time is spent in internal or user functions.\n  * See where any function was called from and which functions it calls.\n  * Generate a call graph using [gprof2dot.py](https://github.com/jrfonseca/gprof2dot)\n\nSuggestions for improvements and new features are more than welcome - this is just a start.\n\nInstallation\n------------\n  1. Download webgrind\n  2. Unzip package to favourite path accessible by webserver.\n  3. Load webgrind in browser and start profiling\n\nAlternatively, on PHP 5.4+ run the application using the PHP built-in server\nwith the command `composer serve` or `php -S 0.0.0.0:8080 index.php` if you\nare not using Composer.\n\nFor faster preprocessing, give write access to the `bin` subdirectory, or compile manually:\n  * Linux / Mac OS X: execute `make` in the unzipped folder (requires GCC or Clang.)\n  * Windows: execute `nmake -f NMakeFile` in the unzipped folder (requires Visual Studio 2015 or higher.)\n\nSee the [Installation Wiki page](https://github.com/jokkedk/webgrind/wiki/Installation) for more.\n\nUse with Docker\n---------------\n\nInstead of uploading webgrind to a web server or starting a local one, you can use the official Docker image to\nquickly inspect existing xDebug profiling files. To use the Docker image, run the following command with\n`/path/to/xdebug/files` replaced by the actual path of your profiling files.\n\n```\ndocker run --rm -v /path/to/xdebug/files:/tmp -p 80:80 jokkedk/webgrind:latest\n```\n\nNow open `http://localhost` in your browser. After using webgrind you can stop the Docker container by pressing\n`CTRL / Strg` + `C`.\n\nTo use the built-in file viewer, mount the appropriate files under `/host` in the container.\n\nCredits\n-------\nWebgrind is written by [Joakim Nyg√•rd](http://jokke.dk) and [Jacob Oettinger](http://oettinger.dk). It would not have been possible without the great tool that Xdebug is thanks to [Derick Rethans](http://www.derickrethans.nl).\n\nCurrent maintainer is [Micah Ng](https://github.com/alpha0010).\n",
  "permissions": {
    "read": true,
    "write": false,
    "admin": false
  },
  "media_types": [
    "application/vnd.docker.container.image.v1+json"
  ],
  "content_types": [
    "image"
  ]
}