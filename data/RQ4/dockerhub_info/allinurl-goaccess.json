{
  "user": "allinurl",
  "name": "goaccess",
  "namespace": "allinurl",
  "repository_type": "image",
  "status": 1,
  "status_description": "active",
  "description": "Official build of GoAccess",
  "is_private": false,
  "is_automated": true,
  "can_edit": false,
  "star_count": 66,
  "pull_count": 4362879,
  "last_updated": "2023-01-02T19:06:19.707264Z",
  "date_registered": "2017-03-21T12:17:07.737569Z",
  "collaborator_count": 0,
  "affiliation": null,
  "hub_user": "allinurl",
  "has_starred": false,
  "full_description": "GoAccess [![Build Status](https://travis-ci.org/allinurl/goaccess.svg?branch=master)](https://travis-ci.org/allinurl/goaccess) [![GoAccess](https://goaccess.io/badge)](https://goaccess.io)\n========\n\n## What is it? ##\nGoAccess is an open source **real-time web log analyzer** and interactive\nviewer that runs in a **terminal** on &ast;nix systems or through your\n**browser**. It provides **fast** and valuable HTTP statistics for system\nadministrators that require a visual server report on the fly.\nMore info at: [https://goaccess.io](https://goaccess.io/?src=gh).\n\n[![GoAccess Terminal Dashboard](https://goaccess.io/images/goaccess-real-time-term-gh.png?2020071402)](https://goaccess.io/)\n[![GoAccess HTML Dashboard](https://goaccess.io/images/goaccess-real-time-html-gh.png?2020110802)](https://rt.goaccess.io/?src=gh)\n\n## Features ##\nGoAccess parses the specified web log file and outputs the data to the X\nterminal. Features include:\n\n* **Completely Real Time**<br>\n  All panels and metrics are timed to be updated every 200 ms on the terminal\n  output and every second on the HTML output.\n\n* **Minimal Configuration needed**<br>\n  You can just run it against your access log file, pick the log format and let\n  GoAccess parse the access log and show you the stats.\n\n* **Track Application Response Time**<br>\n  Track the time taken to serve the request. Extremely useful if you want to\n  track pages that are slowing down your site.\n\n* **Nearly All Web Log Formats**<br>\n  GoAccess allows any custom log format string.  Predefined options include,\n  Apache, Nginx, Amazon S3, Elastic Load Balancing, CloudFront, etc.\n\n* **Incremental Log Processing**<br>\n  Need data persistence? GoAccess has the ability to process logs incrementally\n  through the on-disk persistence options.\n\n* **Only one dependency**<br>\n  GoAccess is written in C. To run it, you only need ncurses as a dependency.\n  That's it. It even features its own Web Socket server â€” http://gwsocket.io/.\n\n* **Visitors**<br>\n  Determine the amount of hits, visitors, bandwidth, and metrics for slowest\n  running requests by the hour, or date.\n\n* **Metrics per Virtual Host**<br>\n  Have multiple Virtual Hosts (Server Blocks)? It features a panel that\n  displays which virtual host is consuming most of the web server resources.\n\n* **Color Scheme Customizable**<br>\n  Tailor GoAccess to suit your own color taste/schemes. Either through the\n  terminal, or by simply applying the stylesheet on the HTML output.\n\n* **Support for Large Datasets**<br>\n  GoAccess features the ability to parse large logs due to its optimized\n  in-memory hash tables. It has very good memory usage and pretty good\n  performance. This storage has support for on-disk persistence as well.\n\n* **Docker Support**<br>\n  Ability to build GoAccess' Docker image from upstream. You can still fully\n  configure it, by using Volume mapping and editing `goaccess.conf`.  See\n  [Docker](https://github.com/allinurl/goaccess#docker) section below.\n\n### Nearly all web log formats... ###\nGoAccess allows any custom log format string. Predefined options include, but\nnot limited to:\n\n* Amazon CloudFront (Download Distribution).\n* Amazon Simple Storage Service (S3)\n* AWS Elastic Load Balancing\n* Combined Log Format (XLF/ELF) Apache | Nginx\n* Common Log Format (CLF) Apache\n* Google Cloud Storage.\n* Apache virtual hosts\n* Squid Native Format.\n* W3C format (IIS).\n* Caddy's JSON Structured format.\n\n## Why GoAccess? ##\nGoAccess was designed to be a fast, terminal-based log analyzer. Its core idea\nis to quickly analyze and view web server statistics in real time without\nneeding to use your browser (_great if you want to do a quick analysis of your\naccess log via SSH, or if you simply love working in the terminal_).\n\nWhile the terminal output is the default output, it has the capability to\ngenerate a complete, self-contained, real-time [**`HTML`**](https://rt.goaccess.io/?src=gh)\nreport, as well as a [**`JSON`**](https://goaccess.io/json?src=gh), and\n[**`CSV`**](https://goaccess.io/goaccess_csv_report.csv?src=gh) report.\n\nYou can see it more of a monitor command tool than anything else.\n\n## Installation ##\n\n### Build from release\n\nGoAccess can be compiled and used on *nix systems.\n\nDownload, extract and compile GoAccess with:\n\n    $ wget https://tar.goaccess.io/goaccess-1.5.1.tar.gz\n    $ tar -xzvf goaccess-1.5.1.tar.gz\n    $ cd goaccess-1.5.1/\n    $ ./configure --enable-utf8 --enable-geoip=mmdb\n    $ make\n    # make install\n\n### Build from GitHub (Development) ###\n\n    $ git clone https://github.com/allinurl/goaccess.git\n    $ cd goaccess\n    $ autoreconf -fiv\n    $ ./configure --enable-utf8 --enable-geoip=mmdb\n    $ make\n    # make install\n\n#### Build in isolated container\n\nYou can also build the binary for Debian based systems in an isolated container environment to prevent cluttering your local system with the development libraries:\n\n    $ curl -L \"https://github.com/allinurl/goaccess/archive/refs/heads/master.tar.gz\" | tar -xz && cd goaccess-master\n    $ docker build -t goaccess/build.debian-10 -f Dockerfile.debian-10 .\n    $ docker run -i --rm -v $PWD:/goaccess goaccess/build.debian-10 > goaccess\n\n### Distributions ###\n\nIt is easiest to install GoAccess on GNU+Linux using the preferred package manager\nof your GNU+Linux distribution. Please note that not all distributions will have\nthe latest version of GoAccess available.\n\n#### Debian/Ubuntu ####\n\n    # apt-get install goaccess\n\n**Note:** It is likely this will install an outdated version of GoAccess. To\nmake sure that you're running the latest stable version of GoAccess see\nalternative option below.\n\n#### Official GoAccess Debian & Ubuntu repository ####\n\n    $ wget -O - https://deb.goaccess.io/gnugpg.key | gpg --dearmor \\\n        | sudo tee /usr/share/keyrings/goaccess.gpg >/dev/null\n    $ echo \"deb [signed-by=/usr/share/keyrings/goaccess.gpg] https://deb.goaccess.io/ $(lsb_release -cs) main\" \\\n        | sudo tee /etc/apt/sources.list.d/goaccess.list\n    $ sudo apt-get update\n    $ sudo apt-get install goaccess\n\n**Note**:\n* `.deb` packages in the official repo are available through HTTPS as well. You may need to install `apt-transport-https`.\n\n#### Fedora ####\n\n    # yum install goaccess\n\n#### Arch ####\n\n    # pacman -S goaccess\n\n#### Gentoo ####\n\n    # emerge net-analyzer/goaccess\n\n#### OS X / Homebrew ####\n\n    # brew install goaccess\n\n#### FreeBSD ####\n\n    # cd /usr/ports/sysutils/goaccess/ && make install clean\n    # pkg install sysutils/goaccess\n\n#### OpenBSD ####\n\n    # cd /usr/ports/www/goaccess && make install clean\n    # pkg_add goaccess\n\n#### openSUSE  ####\n\n    # zypper ar -f obs://server:http http\n    # zypper in goaccess\n\n#### OpenIndiana ####\n\n    # pkg install goaccess\n\n#### pkgsrc (NetBSD, Solaris, SmartOS, ...) ####\n\n    # pkgin install goaccess\n\n#### Windows ####\n\n[CowAxess](https://goaccess.io/download#distro) is a GoAccess implementation\nfor Windows systems. It is a packaging of GoAccess, Cygwin and many other\nrelated tools to make it a complete and ready-to-use solution for real-time web\nlog analysis, all in a 4 MB package.\n\nIf you prefer to go the more tedious route, GoAccess can be used in Windows\nthrough Cygwin. See Cygwin's <a href=\"https://goaccess.io/faq#installation\">packages</a>.\nOr through the GNU+Linux Subsystem on Windows 10.\n\n#### Distribution Packages ####\n\nGoAccess has minimal requirements, it's written in C and requires only ncurses.\nHowever, below is a table of some optional dependencies in some distros to\nbuild GoAccess from source.\n\nDistro                 | NCurses          | GeoIP (opt)      |GeoIP2 (opt)           |  OpenSSL (opt)\n---------------------- | -----------------|------------------|---------------------- | -------------------\n**Ubuntu/Debian**      | libncursesw5-dev | libgeoip-dev     | libmaxminddb-dev      |  libssl-dev\n**RHEL/CentOS**        | ncurses-devel    | geoip-devel      | libmaxminddb-devel    |  openssl-devel\n**Arch**               | ncurses          | geoip            | libmaxminddb          |  openssl\n**Gentoo**             | sys-libs/ncurses | dev-libs/geoip   | dev-libs/libmaxminddb |  dev-libs/openssl\n**Slackware**          | ncurses          | GeoIP            | libmaxminddb          |  openssl\n\n**Note**: You may need to install build tools like `gcc`, `autoconf`,\n`gettext`, `autopoint` etc for compiling/building software from source. e.g.,\n`base-devel`, `build-essential`, `\"Development Tools\"`.\n\n#### Docker ####\n\nA Docker image has been updated, capable of directing output from an access log. If you only want to output a report, you can pipe a log from the external environment to a Docker-based process:\n\n    cat access.log | docker run --rm -i -e LANG=$LANG allinurl/goaccess -a -o html --log-format COMBINED - > report.html\n\nOR real-time\n\n    cat access.log | docker run -p 7890:7890 --rm -i -e LANG=$LANG allinurl/goaccess -a -o html --log-format COMBINED --real-time-html - > report.html\n\nYou can read more about using the docker image in [DOCKER.md](https://github.com/allinurl/goaccess/blob/master/DOCKER.md).\n\n## Storage ##\n\n#### Default Hash Tables ####\n\nIn-memory storage provides better performance at the cost of limiting the\ndataset size to the amount of available physical memory. GoAccess uses\nin-memory hash tables.  It has very good memory usage and pretty good\nperformance. This storage has support for on-disk persistence as well.\n\n## Command Line / Config Options ##\nSee [**options**](https://goaccess.io/man#options) that can be supplied to the command or\nspecified in the configuration file. If specified in the configuration file, long\noptions need to be used without prepending `--`.\n\n## Usage / Examples ##\n**Note**: Piping data into GoAccess won't prompt a log/date/time\nconfiguration dialog, you will need to previously define it in your\nconfiguration file or in the command line.\n\n### Getting Started ###\n\nTo output to a terminal and generate an interactive report:\n\n    # goaccess access.log\n\nTo generate an HTML report:\n\n    # goaccess access.log -a > report.html\n    \nTo generate a JSON report:\n\n    # goaccess access.log -a -d -o json > report.json\n    \nTo generate a CSV file:\n\n    # goaccess access.log --no-csv-summary -o csv > report.csv\n\nGoAccess also allows great flexibility for real-time filtering and parsing. For\ninstance, to quickly diagnose issues by monitoring logs since goaccess was\nstarted:\n\n    # tail -f access.log | goaccess -\n\nAnd even better, to filter while maintaining opened a pipe to preserve\nreal-time analysis, we can make use of `tail -f` and a matching pattern tool\nsuch as `grep`, `awk`, `sed`, etc:\n\n    # tail -f access.log | grep -i --line-buffered 'firefox' | goaccess --log-format=COMBINED -\n\nor to parse from the beginning of the file while maintaining the pipe opened\nand applying a filter\n\n    # tail -f -n +0 access.log | grep -i --line-buffered 'firefox' | goaccess -o report.html --real-time-html -\n\n\n### Multiple Log files ###\n\nThere are several ways to parse multiple logs with GoAccess. The simplest is to\npass multiple log files to the command line:\n\n    # goaccess access.log access.log.1\n\nIt's even possible to parse files from a pipe while reading regular files:\n\n    # cat access.log.2 | goaccess access.log access.log.1 -\n\n**Note**: the single dash is appended to the command line to let GoAccess\nknow that it should read from the pipe.\n\nNow if we want to add more flexibility to GoAccess, we can use `zcat --force`\nto read compressed and uncompressed files. For instance, if we would\nlike to process all log files `access.log*`, we can do:\n\n    # zcat --force access.log* | goaccess -\n\n_Note_: On Mac OS X, use `gunzip -c` instead of `zcat`.\n\n### Real-time HTML outputs ###\n\nGoAccess has the ability the output real-time data in the HTML report. You can\neven email the HTML file since it is composed of a single file with no external\nfile dependencies, how neat is that!\n\nThe process of generating a real-time HTML report is very similar to the\nprocess of creating a static report. Only `--real-time-html` is needed to make\nit real-time.\n\n    # goaccess access.log -o /usr/share/nginx/html/your_site/report.html --real-time-html\n\nTo view the report you can navigate to `http://your_site/report.html`.\n\nBy default, GoAccess will use the host name of the generated report.\nOptionally, you can specify the URL to which the client's browser will connect\nto. See [FAQ](https://goaccess.io/faq) for a more detailed example.\n\n    # goaccess access.log -o report.html --real-time-html --ws-url=goaccess.io\n\nBy default, GoAccess listens on port 7890, to use a different port other than\n7890, you can specify it as (make sure the port is opened):\n\n    # goaccess access.log -o report.html --real-time-html --port=9870\n\nAnd to bind the WebSocket server to a different address other than 0.0.0.0, you\ncan specify it as:\n\n    # goaccess access.log -o report.html --real-time-html --addr=127.0.0.1\n\n**Note**: To output real time data over a TLS/SSL connection, you need to use\n`--ssl-cert=<cert.crt>` and `--ssl-key=<priv.key>`.\n\n### Filtering ###\n\n#### Working with dates ####\n\nAnother useful pipe would be filtering dates out of the web log\n\nThe following will get all HTTP requests starting on `05/Dec/2010` until the\nend of the file.\n\n    # sed -n '/05\\/Dec\\/2010/,$ p' access.log | goaccess -a -\n\nor using relative dates such as yesterdays or tomorrows day:\n\n    # sed -n '/'$(date '+%d\\/%b\\/%Y' -d '1 week ago')'/,$ p' access.log | goaccess -a -\n\nIf we want to parse only a certain time-frame from DATE a to DATE b, we can do:\n\n    # sed -n '/5\\/Nov\\/2010/,/5\\/Dec\\/2010/ p' access.log | goaccess -a -\n\nIf we want to preserve only certain amount of data and recycle storage, we can\nkeep only a certain number of days. For instance to keep & show the last 5\ndays:\n\n    # goaccess access.log --keep-last=5\n\n#### Virtual hosts ####\n\nAssuming your log contains the virtual host field. For instance:\n\n    vhost.io:80 8.8.4.4 - - [02/Mar/2016:08:14:04 -0600] \"GET /shop HTTP/1.1\" 200 615 \"-\" \"Googlebot-Image/1.0\"\n\nAnd you would like to append the virtual host to the request in order to see\nwhich virtual host the top urls belong to:\n\n    awk '$8=$1$8' access.log | goaccess -a -\n    \nTo do the same, but also use real-time filtering and parsing:\n\n    tail -f  access.log | unbuffer -p awk '$8=$1$8' | goaccess -a -\n\nTo exclude a list of virtual hosts you can do the following:\n\n    # grep -v \"`cat exclude_vhost_list_file`\" vhost_access.log | goaccess -\n\n#### Files, status codes and bots ####\n\nTo parse specific pages, e.g., page views, `html`, `htm`, `php`, etc. within a\nrequest:\n\n    # awk '$7~/\\.html|\\.htm|\\.php/' access.log | goaccess -\n\nNote, `$7` is the request field for the common and combined log format,\n(without Virtual Host), if your log includes Virtual Host, then you probably\nwant to use `$8` instead. It's best to check which field you are shooting for,\ne.g.:\n\n    # tail -10 access.log | awk '{print $8}'\n\nOr to parse a specific status code, e.g., 500 (Internal Server Error):\n\n    # awk '$9~/500/' access.log | goaccess -\n\nOr multiple status codes, e.g., all 3xx and 5xx:\n\n    # tail -f -n +0 access.log | awk '$9~/3[0-9]{2}|5[0-9]{2}/' | goaccess -o out.html -\n\nAnd to get an estimated overview of how many bots (crawlers) are hitting your server:\n\n    # tail -F -n +0 access.log | grep -i --line-buffered 'bot' | goaccess -\n\n### Tips ###\n\nAlso, it is worth pointing out that if we want to run GoAccess at lower\npriority, we can run it as:\n\n    # nice -n 19 goaccess -f access.log -a\n\nand if you don't want to install it on your server, you can still run it from\nyour local machine!\n\n    # ssh -n root@server 'tail -f /var/log/apache2/access.log' | goaccess -\n\n**Note:** SSH requires `-n` so GoAccess can read from stdin. Also, make sure to\nuse SSH keys for authentication as it won't work if a passphrase is required. \n\n#### Troubleshooting ####\n\nWe receive many questions and issues that have been answered previously.\n\n* Date/time matching problems? Check that your log format and the system locale in which you run GoAccess match. See [#1571](https://github.com/allinurl/goaccess/issues/1571#issuecomment-543186858)\n* Problems with pattern matching? Spaces are often a problem, see for instance [#136](https://github.com/allinurl/goaccess/issues/136), [#1579](https://github.com/allinurl/goaccess/issues/1579)\n* Other issues matching log entries: See [>200 closed issues regarding log/date/time formats](https://github.com/allinurl/goaccess/issues?q=is%3Aissue+is%3Aclosed+label%3A%22log%2Fdate%2Ftime+format%22)\n* Problems with log processing? See [>111 issues regarding log processing](https://github.com/allinurl/goaccess/issues?q=is%3Aissue+is%3Aclosed+label%3Alog-processing)\n\n\n#### Incremental log processing ####\n\nGoAccess has the ability to process logs incrementally through its internal\nstorage and dump its data to disk. It works in the following way:\n\n1. A dataset must be persisted first with `--persist`, then the same dataset\ncan be loaded with.\n2. `--restore`.  If new data is passed (piped or through a log file), it will\nappend it to the original dataset.\n\n##### NOTES #####\n\nGoAccess keeps track of inodes of all the files processed (assuming files will\nstay on the same partition), in addition, it extracts a snippet of data from\nthe log along with the last line parsed of each file and the timestamp of the\nlast line parsed. e.g., inode:29627417|line:20012|ts:20171231235059\n\nFirst, it compares if the snippet matches the log being parsed, if it does, it\nassumes the log hasn't changed drastically, e.g., hasn't been truncated. If\nthe inode does not match the current file, it parses all lines. If the current\nfile matches the inode, it then reads the remaining lines and updates the count\nof lines parsed and the timestamp. As an extra precaution, it won't parse log\nlines with a timestamp â‰¤ than the one stored.\n\nPiped  data works based off the timestamp of the last line read. For instance,\nit will parse and discard all incoming entries until it finds a timestamp >=\nthan the one stored.\n\n##### Examples #####\n\n    // last month access log\n    # goaccess access.log.1 --persist\n\nthen, load it with\n\n    // append this month access log, and preserve new data\n    # goaccess access.log --restore --persist\n\nTo read persisted data only (without parsing new data)\n\n    # goaccess --restore\n\n## Contributing ##\n\nAny help on GoAccess is welcome. The most helpful way is to try it out and give\nfeedback. Feel free to use the Github issue tracker and pull requests to\ndiscuss and submit code changes.\n\nEnjoy!\n",
  "permissions": {
    "read": true,
    "write": false,
    "admin": false
  },
  "media_types": [
    "application/vnd.docker.container.image.v1+json"
  ],
  "content_types": [
    "image"
  ]
}