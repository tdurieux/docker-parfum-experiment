{
  "user": "sitespeedio",
  "name": "browsertime",
  "namespace": "sitespeedio",
  "repository_type": "image",
  "status": 1,
  "status_description": "active",
  "description": "Browsertime with Firefox & Chrome",
  "is_private": false,
  "is_automated": true,
  "can_edit": false,
  "star_count": 6,
  "pull_count": 102509,
  "last_updated": "2022-11-08T05:06:48.302606Z",
  "date_registered": "2016-11-12T08:16:49.032238Z",
  "collaborator_count": 0,
  "affiliation": null,
  "hub_user": "sitespeedio",
  "has_starred": false,
  "full_description": "# Browsertime - Your browser, your page, your scripts!\n[![Build status][travis-image]][travis-url]\n[![Downloads][downloads-image]][downloads-url]\n[![Downloads total][downloads-total-image]][downloads-url]\n[![Stars][stars-image]][stars-url]\n\n![Browsertime](browsertime.png)\n\nAccess the Web Performance Timeline, from your browser, in your terminal!\n\nBrowsertime allows you to:\n 1. Query timing data directly from the browser, to access [Navigation Timing](http://kaaes.github.io/timing/info.html), [User Timing](http://www.html5rocks.com/en/tutorials/webperformance/usertiming/),\n[Resource Timing](http://www.w3.org/TR/resource-timing/), first paint and [RUM Speed Index](https://github.com/WPO-Foundation/RUM-SpeedIndex).\n 1. Generate [HAR](http://www.softwareishard.com/blog/har-12-spec/) files (using [HAR Export trigger](https://github.com/firebug/har-export-trigger) for Firefox and parsing the Chrome log for Chrome).\n 1. Run custom Javascript scripts in the browser and get statistics for each run.\n 1. Record a video of the screen and analyze the result to get First Visual Change, Speed Index, Visual Complete 85 % and Last Visual Change.\n \n **IMPORTANT!** The master branch is now the coming 2.0.0 alpha release and [1.x](https://github.com/sitespeedio/browsertime/tree/1.x) is the latest stable release.\n\n## A simple example\n\nUse our Docker image (with Chrome, Firefox, XVFB and the dependencies needed to record a video):\n<pre>\n$ docker run --shm-size=1g --rm -v \"$(pwd)\":/browsertime sitespeedio/browsertime --video --speedIndex https://www.sitespeed.io/\n</pre>\n\nOr using node:\n<pre>\n$ bin/browsertime.js https://www.sitespeed.io\n</pre>\n\nLoad https://www.sitespeed.io/ in Chrome three times. Results are stored in a JSON file (browsertime.json) with the timing data, and a HAR file (browsertime.har) in browsertime-results/www.sitespeed.io/$date/\n\n## I want more examples\nCheckout the [examples](docs/examples/README.md).\n\n## Browsers\nBrowsertime supports Firefox and Chrome on desktop. On Android we support Chrome.\n\nBut we want to [support Opera (on Android)](https://github.com/tobli/browsertime/issues/150)  and when(?!) iOS Safari supports WebDriver we will add that too.\n\n## How does it work\nBrowsertime uses Selenium NodeJS to drive the browser. It starts the browser, load a URL, executes configurable Javascripts to collect metrics, collect a HAR file.\n\nTo get the HAR from Firefox we use the [HAR Export Trigger](https://github.com/firebug/har-export-trigger) and Chrome we use [Chrome-HAR](https://github.com/sitespeedio/chrome-har) to parse the timeline log and generate the HAR file.\n\nOh and you can run your own Selenium script before (<code>--preScript</code>) and after (<code>--postScript</code>) a URL is accessed so you can login/logout or do whatever you want.\n\n# Speed Index and video\nIt's easiest to run [our ready made Docker container](https://hub.docker.com/r/sitespeedio/browsertime/) to be able to record a video and calculate SpeedIndex because then you get all dependencies needed for free to run [VisualMetrics](https://github.com/WPO-Foundation/visualmetrics).\n\nThe default video will include a timer and showing when the metrics happens, but you can turn that off using <code>--video.addTimer false</code>.\n\n<img src=\"https://raw.githubusercontent.com/sitespeedio/sitespeed.io/master/docs/img/video-example.gif\">\n\n## Test using Docker\nYou can build and test changes using Docker locally.\n\n<pre>\n$ docker build -t sitespeedio/browsertime .\n$ docker run --shm-size=1g --rm -v \"$(pwd)\":/browsertime sitespeedio/browsertime -n 1 --video --speedIndex https://www.sitespeed.io/\n</pre>\n\n## Connectivity\n\nYou can throttle the connection to make the connectivity slower to make it easier to catch regressions. The best way to do that is to setup a network bridge in Docker.\n\nDefault we use [TSProxy](https://github.com/WPO-Foundation/tsproxy) because it's only dependency is Python 2.7 but we have a problem with that together with Selenium, so that it is kind of unusable right now. Help us fix that in [#229](https://github.com/sitespeedio/browsertime/issues/229).\n\nIf you run Docker you can use tc as connectivity engine but that will only set the latency, if you want to set the download speed you need to create a network bridge in Docker.\n\nHere's an full example to setup up Docker network bridges on a server that has tc installed:\n\n~~~bash\n#!/bin/bash\necho 'Starting Docker networks'\ndocker network create --driver bridge --subnet=192.168.33.0/24 --gateway=192.168.33.10 --opt \"com.docker.network.bridge.name\"=\"docker1\" 3g\ntc qdisc add dev docker1 root handle 1: htb default 12\ntc class add dev docker1 parent 1:1 classid 1:12 htb rate 1.6mbit ceil 1.6mbit\ntc qdisc add dev docker1 parent 1:12 netem delay 300ms\n\ndocker network create --driver bridge --subnet=192.168.34.0/24 --gateway=192.168.34.10 --opt \"com.docker.network.bridge.name\"=\"docker2\" cable\ntc qdisc add dev docker2 root handle 1: htb default 12\ntc class add dev docker2 parent 1:1 classid 1:12 htb rate 5mbit ceil 5mbit\ntc qdisc add dev docker2 parent 1:12 netem delay 28ms\n\ndocker network create --driver bridge --subnet=192.168.35.0/24 --gateway=192.168.35.10 --opt \"com.docker.network.bridge.name\"=\"docker3\" 3gfast\ntc qdisc add dev docker3 root handle 1: htb default 12\ntc class add dev docker3 parent 1:1 classid 1:12 htb rate 1.6mbit ceil 1.6mbit\ntc qdisc add dev docker3 parent 1:12 netem delay 150ms\n\ndocker network create --driver bridge --subnet=192.168.36.0/24 --gateway=192.168.36.10 --opt \"com.docker.network.bridge.name\"=\"docker4\" 3gem\ntc qdisc add dev docker4 root handle 1: htb default 12\ntc class add dev docker4 parent 1:1 classid 1:12 htb rate 0.4mbit ceil 0.4mbit\ntc qdisc add dev docker4 parent 1:12 netem delay 400ms\n~~~\n\nThen when you run your container you add the network with <code>--network cable</code>. You should also tell Browsertime that you set the connectivity external from BT. A full example running running with cable:\n\n~~~bash\n$ docker run --shm-size=1g --network=cable --rm sitespeedio/browsertime -c cable --connectivity.engine external --speedIndex --video https://www.sitespeed.io/\n~~~\n\nAnd using the 3g network:\n\n~~~bash\n$ docker run --shm-size=1g --network=3g --rm sitespeedio/browsertime -c 3g --connectivity.engine external --speedIndex --video https://www.sitespeed.io/\n~~~\n\nAnd if you want to remove the networks:\n\n~~~bash\n#!/bin/bash\necho 'Stopping Docker networks'\ndocker network rm 3g\ndocker network rm 3gfast\ndocker network rm 3gem\ndocker network rm cable\n~~~\n\n## Test on your mobile device\nBrowsertime supports Chrome on Android: Collecting SpeedIndex, HAR and video! This is still really new, let us know if you find any bugs.\n\nYou need to [install adb](https://www.sitespeed.io/documentation/sitespeed.io/mobile-phones/#desktop) and [prepare your phone](https://www.sitespeed.io/documentation/sitespeed.io/mobile-phones/#on-your-phone) before you start.\n\nIf you want to set connectivity you need to use something like [Micro device lab](https://github.com/phuedx/micro-device-lab) or [TSProxy](https://github.com/WPO-Foundation/tsproxy).\n\n<pre>\n$ browsertime --chrome.android.package com.android.chrome https://www.sitespeed.io --video --speedIndex\n</pre>\n\nIf you are on Linux (we have tested Ubuntu 16) you can use our Docker container to drive your Android phone. A couple of things to remember:\n * You need to run in privileged mode *--privileged*\n * You need to share the USB ports *-v /dev/bus/usb:/dev/bus/usb*\n * Add *-e START_ADB_SERVER=true* to start the adb server\n * Turn of xvfb *--xvfb false* (we start that automatically)\n\nIf you use Docker you will automatically get support for video and SpeedIndex. You can get that without Docker but then need to [install VisualMetrics dependencies](https://github.com/sitespeedio/docker-visualmetrics-deps/blob/master/Dockerfile) yourself.\n\n<pre>\n$ docker run --privileged -v /dev/bus/usb:/dev/bus/usb -e START_ADB_SERVER=true --shm-size=1g --rm -v \"$(pwd)\":/browsertime-results sitespeedio/browsertime -n 1 --chrome.android.package com.android.chrome --xvfb false --speedIndex --video https://en.m.wikipedia.org/wiki/Barack_Obama\n</pre>\n\n## Configuration\nRun <code>$ bin/browsertime.js --help</code> and you can see the configuration options.\n\n## Send metrics to Graphite\nThe easiest way to send metrics is to install [jq](https://stedolan.github.io/jq/) and use it to pick the values you wanna track.\n\nHere's an example on how you can pickup the median SpeedIndex from Browsertime and send it to your Graphite instance.\n<pre>\necho \"browsertime.your.key.SpeedIndex.median\" $(cat /tmp/browsertime/browsertime.json | jq .statistics.visualMetrics.SpeedIndex.median) \"`date +%s`\" | nc -q0 my.graphite.com 2003\n</pre>\n\n[travis-image]: https://img.shields.io/travis/sitespeedio/browsertime.svg?style=flat-square\n[travis-url]: https://travis-ci.org/sitespeedio/browsertime\n[stars-url]: https://github.com/tobli/sitespeedio/stargazers\n[stars-image]: https://img.shields.io/github/stars/sitespeedio/browsertime.svg?style=flat-square\n[downloads-total-image]: https://img.shields.io/npm/dt/browsertime.svg?style=flat-square\n[downloads-image]: https://img.shields.io/npm/dm/browsertime.svg?style=flat-square\n[downloads-url]: https://npmjs.org/package/browsertime\n",
  "permissions": {
    "read": true,
    "write": false,
    "admin": false
  },
  "media_types": [
    "application/vnd.docker.container.image.v1+json",
    "application/vnd.docker.distribution.manifest.list.v2+json"
  ],
  "content_types": [
    "image"
  ]
}