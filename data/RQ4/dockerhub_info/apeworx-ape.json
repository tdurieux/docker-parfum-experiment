{
  "user": "apeworx",
  "name": "ape",
  "namespace": "apeworx",
  "repository_type": "image",
  "status": 1,
  "status_description": "active",
  "description": "Framework for Web3 Python applications and smart contracts.",
  "is_private": false,
  "is_automated": false,
  "can_edit": false,
  "star_count": 0,
  "pull_count": 1940,
  "last_updated": "2023-01-05T17:45:50.28705Z",
  "date_registered": "2021-09-07T18:10:32.795532Z",
  "collaborator_count": 0,
  "affiliation": null,
  "hub_user": "sabotagebeats",
  "has_starred": false,
  "full_description": "# Overview\n\n**Ape Framework** is an easy-to-use Web3 development tool.\nUsers can compile, test, and interact with smart contracts all in one command line session.\nWith our **modular plugin system**, Ape supports multiple contract languages and chains.\n\nApe is built by [ApeWorX LTD](https://www.apeworx.io/).\n\nJoin our [ApeWorX Discord server](https://discord.gg/apeworx) to stay up to date on new releases, plugins and tutorials.\n\nIf you want to just get started, jump down to the [Playing with Ape](#playing-with-ape)\n\n## Documentation\n\nRead our [technical documentation](https://docs.apeworx.io/ape/stable/) to get a deeper understanding of our open source Framework.\n\nRead our [academic platform](https://academy.apeworx.io/) will help you master Ape Framework with tutorials and challenges.\n\n## Prerequisite\n\nIn the latest release, Ape requires:\n\n- Linux or macOS\n- Python 3.8 or later\n- **Windows**: Install Windows Subsystem Linux [(WSL)](https://docs.microsoft.com/en-us/windows/wsl/install) with Python 3.8 or later\n\nCheck your python version in a terminal with `python3 --version`\n\n## Installation\n\nThere are three ways to install ape: `pipx`, `pip`, or `Docker`.\n\n### Considerations for Installing:\n\n- We advise installing in a [virtualenv](https://pypi.org/project/virtualenv/) or [venv](https://docs.python.org/3/library/venv.html) to avoid interfering with *OS-level site packages*.\n\n- We advise installing **`ape`** with recommended plugins `pip install eth-ape'[recommended-plugins]'`\n\n- We advise for **macOS** users to install virtual env via [homebrew](https://formulae.brew.sh/formula/virtualenv)\n\n### via `pipx` or `pip`\n\n1. Install `pipx` via their [installation instructions](https://pypa.github.io/pipx/) or `pip` via their [installation instructions](https://pip.pypa.io/en/stable/cli/pip_install/)\n\n2. Install **`ape`** via `pipx install eth-ape` or `pip install eth-ape`\n\n### via `docker`\n\nApe can also run in a docker contianer.\n\nPlease visit our [Dockerhub](https://hub.docker.com/repository/docker/apeworx/ape) for more details on using Ape with Docker.\n\n```bash\ndocker run \\\n--volume $HOME/.ape:/root/.ape \\\n--volume $HOME/.vvm:/root/.vvm \\\n--volume $HOME/.solcx:/root/.solcx \\\n--volume $PWD:/root/project \\\n--workdir /root/project \\\napeworx/ape compile\n```\n\n**Docker Uninstall Process:** You will need to remove files generated by docker\n\n```bash\nsudo rm -rf **\\~/.solcx**\nsudo rm -rf **\\~/.vvm**\n```\n\n## Playing with Ape\n\nAfter you installed Ape, you can run `ape --version` to make sure it works and it is the latest version.\n\nThere are two ways to interact with Ape:\n\n- [CLI Reference](https://docs.apeworx.io/ape/latest/index.html)\n\n- [Python Reference](https://docs.apeworx.io/ape/latest/index.html)\n\nApe is both a CLI tool and a Python SDK.\n\nThe CLI tool contains all the Ape commands and the Python SDK contains the classes and types needed to compose scripts, console actions, and tests.\n\n## **Ape Modular Plugin System:**\n\nOur [list of plugins](https://www.apeworx.io/#plugins) is the best way to have the most interoperable experience with Web3.\n\n**NOTE**: If a plugin does not originate from the [ApeWorX GitHub Organization](https://github.com/ApeWorX?q=ape&type=all), you will get a warning about installing 3rd-party plugins.\n\nInstall 3rd party plugins at your own risk.\n\nAdditionally, plugins that come bundled with **`ape`** in the core installation cannot be removed and are part of the **`ape`** core software.\n\n## Projects\n\nWhen using Ape, you generally will work with a project.\n\n```bash\nape init\n```\n\nFor more in-depth information about smart-contract projects using the Ape framework, see the [projects guide](https://docs.apeworx.io/ape/stable/userguides/projects.html).\n\n- Learn more about **installing** plugins from following this [installing user guide](https://docs.apeworx.io/ape/stable/userguides/installing_plugins.html).\n\n- Learn more about **developing** your own plugins from this [developing user guide](docs/userguides/developing_plugins.md).\n\n### Accounts\n\nIn Ape, you will need accounts to make transactions.\nYou can import or generate accounts using the core `accounts` plugin:\n\n```bash\nape accounts import acc0   # Will prompt for a private key\nape accounts generate acc1\n```\n\nList all your accounts with the `list` command.\n\n```bash\nape accounts list\n```\n\nLearn more about accounts in Ape by following the [accounts guide](https://docs.apeworx.io/ape/stable/userguides/accounts.html).\n\n### Plugins\n\nAdd any plugins you may need, such as `vyper`.\n\n```bash\nape plugins list -a\nape plugins install vyper\nape plugins list -a\n```\n\n### Compiling\n\nYou can compile contracts within the `contracts/` directory of your project.\nThe `--size` option will display you the size of the contract.\n\n```bash\nape compile --size\n```\n\nLearn more about compiling in Ape by following the [compile guide](https://docs.apeworx.io/ape/stable/userguides/compile.html).\n\n### Testing\n\nUse Ape to test your smart-contract projects.\nProvide the same arguments to `pytest` as you would to the `ape test` command.\n\nFor example:\n\n```bash\nape test -k test_only_one_thing\n```\n\nVisit the [testing guide](https://docs.apeworx.io/ape/stable/userguides/testing.html) to learn more about testing using Ape.\n\n### Console\n\nApe provides an `IPython` interactive console with useful pre-defined locals to interact with your project.\nTo interact with a deployed contract in a local environment, start by opening the console:\n\n```bash\nape console --network ethereum:mainnet:infura\n```\n\nVisit [Ape Console](https://docs.apeworx.io/ape/stable/commands/console.html) to learn how to use Ape Console.\n\n### Scripts\n\nIf you want to run specific files in a `scripts/` directory, you can do it using the `ape run` command.\n\n```bash\n# This command will run a file named deploy in the scripts/ directory\n$ ape run deploy\n```\n\nLearn more about scripting using Ape by following the [scripting guide](https://docs.apeworx.io/ape/stable/userguides/scripts.html).\n\n### Logging\n\nTo enable debug logging, run your command with the `--verbosity` flag using `DEBUG` as the value:\n\n```bash\nape --verbosity DEBUG run\n```\n\n### Networks\n\nYou can work with registered networks, providers, and blockchain ecosystems (like Ethereum):\n\n```python\nfrom ape import networks\nwith networks.ethereum.mainnet.use_provider(\"infura\"):\n    ...  # Work with the infura provider here\n```\n\nTo learn more about networks in Ape, see [this guide](https://docs.apeworx.io/ape/stable/commands/networks.html).\n",
  "permissions": {
    "read": true,
    "write": false,
    "admin": false
  },
  "media_types": [
    "application/vnd.docker.container.image.v1+json"
  ],
  "content_types": [
    "image"
  ]
}