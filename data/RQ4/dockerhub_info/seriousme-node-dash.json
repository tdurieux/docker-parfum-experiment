{
  "user": "seriousme",
  "name": "node-dash",
  "namespace": "seriousme",
  "repository_type": "image",
  "status": 1,
  "status_description": "active",
  "description": "Serverless framework using node.js",
  "is_private": false,
  "is_automated": true,
  "can_edit": false,
  "star_count": 0,
  "pull_count": 2820,
  "last_updated": "2019-01-16T21:28:44.140409Z",
  "date_registered": "2016-07-08T08:31:18.067461Z",
  "collaborator_count": 0,
  "affiliation": null,
  "hub_user": "seriousme",
  "has_starred": false,
  "full_description": "# node-dash\n[![Build Status](https://travis-ci.org/seriousme/node-dash.svg?branch=master)](https://travis-ci.org/seriousme/node-dash)\n[![Greenkeeper badge](https://badges.greenkeeper.io/seriousme/node-dash.svg)](https://greenkeeper.io/)\n\nAn experiment to build a serverless setup using node.js.\n\n![Node-dash design](https://rawgit.com/seriousme/node-dash/master/node-dash.v2.svg)\n\nThe repository and queue are implemented using [Pouchdb](https://pouchdb.com/), but\n[Couchdb](http://couchdb.apache.org/) will work as well.\n\n## Installation\nThere are 4 options to get this running:\n- `git clone` this repository and run `npm install` followed by `npm start`\n- `docker run -d -p 8080:8080 seriousme/node-dash`\n- use the `docker-compose` file in the docker folder\n- use `kubectl create -f https://raw.githubusercontent.com/seriousme/node-dash/master/k8/node-dash.yaml` to create a deployment on a [Kubernetes](https://kubernetes.io/) Installation.\n\nOnce it runs you can send your browser to http://\\<your host\\>:8080/ which will show you a web interface, on Kubernetes `kubectl describe service apiserver` will show the IP/port.\nAlternatively you can use any REST client (e.g. CURL/Postman/etc) to talk to the API server\n\n## REST endpoints\nThe following endpoints are supported:\n\n### List of requests:\n```\ncurl -X GET \"http://localhost:8080/dash/requests\"\n```\n### Details of a request\n```\ncurl -X GET \"http://localhost:8080/dash/requests/:requestid\"\n```\n### Create a new asynchronous request\nAn example:\n```\ncurl -X GET \"http://localhost:8080/myactions/sum?a=1&b=2\"\n```\n### Create a new synchronous request\nAn example:\n```\ncurl -X GET \"http://localhost:8080/myactions/sum?a=1&b=2&sync\"\n```\n### List of actions\n```\ncurl -X GET \"http://localhost:8080/dash/actions\"\n```\n### Details of an action\n```\ncurl -X GET \"http://localhost:8080/dash/actions/:actionid\"\n```\n### Create a new action\nAn example:\n```\ncurl -X PUT -H \"Content-Type: application/json\" -d '{\n  \"_id\": \"/myactions/min\",\n  \"code\": \"function main(params){ return { \\\"min\\\": Number(params.a) - Number(params.b)};}\"\n}' \"http://localhost:8080/dash/actions/%2fmyactions%2fmin\"\n```\n\n### Update an action\nAn example:\n```\ncurl -X PUT -H \"Content-Type: application/json\" -d '{\n  \"_id\": \"/myactions/min\",\n  \"code\": \"function main(params){ return { \\\"min\\\": Number(params.a) - Number(params.b)};}\",\n  \"_rev\": \"1-dadb9a995a83675dea6954a1515e08bb\"\n}' \"http://localhost:8080/dash/actions/%2fmyactions%2fmin\"\n```\n\n## Todo\nIts an experiment, so don't use this in production unless you know what you are doing !\nE.g. isolation between actioncode and the framework is based on node VM functionality\nwhich offers some protection but is not bulletproof against hostile actions !\n\nA better, and more elaborate, approach would be to inject the action code into a docker\ncontainer and then send the requests to that container. If the container is then idle for\nsay 5 minutes it can be shut.\n",
  "permissions": {
    "read": true,
    "write": false,
    "admin": false
  },
  "media_types": [
    "application/vnd.docker.container.image.v1+json"
  ],
  "content_types": [
    "image"
  ]
}