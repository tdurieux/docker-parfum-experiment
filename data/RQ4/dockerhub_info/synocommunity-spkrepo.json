{
  "user": "synocommunity",
  "name": "spkrepo",
  "namespace": "synocommunity",
  "repository_type": "image",
  "status": 1,
  "status_description": "active",
  "description": "Synology Package Repository",
  "is_private": false,
  "is_automated": false,
  "can_edit": false,
  "star_count": 1,
  "pull_count": 227,
  "last_updated": "2021-02-02T07:19:58.323457Z",
  "date_registered": "2020-05-22T00:59:30.434496Z",
  "collaborator_count": 0,
  "affiliation": null,
  "hub_user": "synocommunity",
  "has_starred": false,
  "full_description": "spkrepo\n=======\nSynology Package Repository\n\n\n![Build](https://github.com/SynoCommunity/spkrepo/workflows/Build/badge.svg)\n\n\n## Development\n### Installation\n\n1. Install dependencies with `poetry install`\n2. Run the next commands in the virtual environment `poetry shell`\n3. Create the tables with `python manage.py db create`\n4. Populate the database with some fake packages with `python manage.py db populate`\n5. Add an user with `python manage.py user create -u Admin -e admin@admin.adm -p adminadmin`\n6. Grant the created user with Administrator permissions `python manage.py user add_role -u admin@admin.adm -r admin`\n7. Grant the created user with Package Administrator permissions `python manage.py user add_role -u admin@admin.adm -r package_admin`\n8. Grant the created user with Developer permissions `python manage.py user add_role -u admin@admin.adm -r developer`\n\nTo reset the environment, clean up with `python manage.py clean`.\n\n### Run\n1. Start the development server with `python manage.py runserver`\n2. Website is available at http://localhost:5000\n3. Admin interface is available at http://localhost:5000/admin\n4. NAS interface is available at http://localhost:5000/nas\n5. API is available at http://localhost:5000/api\n6. Run the test suite with `poetry run pytest -v`\n\n## Deployment\n\n### Configuration\n\nCreate a config file `./config.py` to disable debug logs, connect to a database, set a secure key and optionally set a cache:\n\nUse `LC_CTYPE=C tr -cd '[:print:]' < /dev/urandom | head -c 64` or `base64 < /dev/urandom | head -c 64` to get a random string\n\n```python\nDEBUG = False\nTESTING = False\nSECRET_KEY = \"Please-change-me-to-some-random-string\"\nSQLALCHEMY_ECHO = False\nSQLALCHEMY_DATABASE_URI = \"postgresql://user:pass@localhost/dbname\"\n# https://pythonhosted.org/Flask-Caching/#configuring-flask-caching\nCACHE_TYPE= \"simple\"\n# For signing packages\nGNUPG_PATH= \"/usr/local/bin/gpg\"\n```\n\n\n### Docker\n\nExample usage:\n\n```bash\ndocker run -it --rm --name spkrepo -v $(pwd)/data:/data -v $(pwd)/docker-config.py:/usr/src/app/spkrepo/config.py -p 8000:8000 synocommunity/spkrepo\n```\n\n### Serve app via [a WSGI server](https://flask.palletsprojects.com/en/1.1.x/deploying/).\n\nExample:\n\n```bash\npip install gunicorn\nSPKREPO_CONFIG=\"$PWD/config.py\" gunicorn -w 4 'wsgi:app'\n```\n",
  "permissions": {
    "read": true,
    "write": false,
    "admin": false
  },
  "media_types": [
    "application/vnd.docker.container.image.v1+json"
  ],
  "content_types": [
    "image"
  ]
}