{
  "user": "berkutta",
  "name": "parts_manager",
  "namespace": "berkutta",
  "repository_type": "image",
  "status": 1,
  "status_description": "active",
  "description": "Small tool to manage your (electronic) parts. Very basic, dumb and ugly tool.",
  "is_private": false,
  "is_automated": true,
  "can_edit": false,
  "star_count": 0,
  "pull_count": 202995,
  "last_updated": "2022-11-19T14:55:03.186705Z",
  "date_registered": "2018-12-03T12:43:29.038525Z",
  "collaborator_count": 0,
  "affiliation": null,
  "hub_user": "berkutta",
  "has_starred": false,
  "full_description": "# Parts Manager\n\n![screenshot](./screenshot.png)\n\n## Description\n\nThis software is a very simple way to manage your (electronic) parts. It supports storage locations and components which are attached to those storage locations. A component entry features multiple specifications like category, datasheet hyperlink, supplier and so on. There's also the feature to have a component countable with a stock value or non countable.\n\n## Installation\n\nYou can use this Software with a LAMP Stack, or much easier Docker. For the Docker way you just need to invoke following Docker command:\n```\ndocker run -v /my/path/.env:/var/www/html/.env -p 80:80 berkutta/parts_manager\n```\n\nThe recommended .env config file looks like following, change mysql credentials to your setup:\n```\nAPP_KEY=base64:MGrJqE4HL/BZwwDPrxHarRJvJvj6SU1vz1D0oide7i8=\n\nDB_CONNECTION=mysql\nDB_HOST=host\nDB_PORT=3306\nDB_DATABASE=db\nDB_USERNAME=user\nDB_PASSWORD=pass\n```\n\nAfter the first run it's recommended to generate a new App Key. Enter the Docker Container Bash console for this and execute the following command:\n\n```\nphp artisan key:generate\n```\n\nAfter the first run you also want to create a username in the database. Enter the Docker Container Bash console for this and enter the laravel tinker console:\n```\nphp artisan tinker\n```\n\nExecute the following commands within the laravel tinker console. Modify them to your needs.\n\n```\n$user = new App\\User();\n$user->username = 'username';\n$user->password = Hash::make('the-password-of-choice');\n$user->name = 'name';\n$user->email = 'the-email@example.com';\n$user->save();\n```\n\nIf you are also lazy like me I recommend to install watchtower on your system. The watchtower container checks every 5 minutes if a image of a running docker container on your system has a newer image available on docker hub. If there is a new one it downloads and restarts the container: [watchtower](https://github.com/v2tec/watchtower)\n\n## Plugin System\n\nThere is also a very basic plugin system available. With it it is possible to add custom buttons into the UI and control things like lighting up boxes in your assortement box.\n\n![screenshot](./plugin.gif)\n![screenshot](./plugin.png)\n\n## History\n\nI don't even know if it is a good idea to put this piece of software online. I started creating this software in 2015. As a little explanation, I had no idea on how PHP or even Web technologies work back then. So this piece of software is really just a pile of very bad code.\n\nBeginning 2018 I have started implementing a very basic and at least as bad API to this software. I basically just copied over the Database access code from the main software file and added some mode switching via switch-case statement.\n\nEnd 2018 I want to pull the Raspberry Pi out of service on which this software is running on. My plan is to still run this software on a Docker Container. Thus I had the chance to improve the software agan a little bit during the process of making this software Docker compatible.\n\nBeginning 2019 I finally started to refactor this whole software to the Laravel PHP Framework. With this refactoring the software is now in a usuable state.\n",
  "permissions": {
    "read": true,
    "write": false,
    "admin": false
  },
  "media_types": [
    "application/vnd.docker.container.image.v1+json"
  ],
  "content_types": [
    "image"
  ]
}