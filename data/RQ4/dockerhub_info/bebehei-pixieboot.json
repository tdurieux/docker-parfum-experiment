{
  "user": "bebehei",
  "name": "pixieboot",
  "namespace": "bebehei",
  "repository_type": "image",
  "status": 1,
  "status_description": "active",
  "description": "iPXE server bootstrapped with preseeded Ubuntu/memtest/...",
  "is_private": false,
  "is_automated": true,
  "can_edit": false,
  "star_count": 4,
  "pull_count": 172,
  "last_updated": "2017-09-20T16:13:30.424101Z",
  "date_registered": "2016-11-21T14:26:20.656304Z",
  "collaborator_count": 0,
  "affiliation": null,
  "hub_user": "bebehei",
  "has_starred": false,
  "full_description": "# pixieboot\n\nRepository to bootstrap a PXE server easily. Get in a few steps a working setup to boot over network.\n\nIt's flexible and programmed modularly. It's easy to use it with existing setups.\n\n## Features \n\n- dhcp proxy support\n  - You can install this in addition to your existing DHCP Server without conflict.\n- iPXE for native clients\n- iPXE via chainloading for older clients\n  - This supports downloading the kernel images via HTTP (way faster than TFTP)\n- Fully customizable\n  - via [`./config.sh`](./config.sh.example)\n  - via [extra integration modules](./integrations)\n- installable via [docker](#docker)\n\n### Software used\n\n- dnsmasq (tftp, dhcp proxy)\n- nfs-kernel-server (NFS Server)\n- nginx\n- iPXE and syslinux packages\n\n# Installation\n\nFor easy installation, execute\n\n    # install dnsmasq or something else\n    cp config.sh.example config.sh\n    $EDITOR config.sh\n    ./setup.sh\n\nas root. This might seem spooky, but it only does:\n\n- install the system images into the current git-repo\n- adding `/etc/dnsmasq.d/pixieboot`\n- adding `/etc/exports.d/pixieboot`\n- restart of dnsmasq and nfs-kernel-server\n\n## setup.sh\n\n    ./setup.sh [PARAMETER]\n\n    PARAMETER can be of:\n\n    system-install   Install and configure\n    config-write     Write (or update) PXE configuration file\n    integrate        Configure system-services to use pixieboot for PXE-boot\n\n    If PARAMETER is omitted, setup.sh will do everything (integration, install the systems, write config)\n\n# Folder structure\n\n<dl>\n  <dt>integrations</dt><dd>scripts to integrate services to use pixieboot</dd>\n  <dt>recipes</dt><dd>the actual scripts, installing the systems</dd>\n  <dt>systems</dt><dd>filesystem-roots of all bootable systems</dd>\n</dl>\n\n# Modular system\n\nThe system is kept fully modular. You can easily add new bootable\nsystems or use another TFTP/DHCP server combination.\n\n## Adding another system\n\nFor adding a new system, you have to create a new so-called recipe.\nThe recipe is a script, containing information for downloading,\ninstalling and configuring a new system-chroot.\n\nThis recipe should be stored inside the recipes folder and respond\nto the parameters `install` or `config`.\n\nExecuted with the `config`-parameter it should print on STDOUT\nits configuration to put into PXELINUX config.\n\nExecuted with the `install`-parameter it should install its system\ninto folder of given environment-variable `$BASE_SYSTEMS/$DISTRO_NAME`.\nYour recipe should not execute anything if the system seems to be\ninstalled already. If it's not installed properly, a manual remove by\nthe user should be neccessary.\n\nI could write 1000s of words here. But it might now be the best for you,\nto look at the `recipes`-folder and look, what these scripts do there.\nMost of the work, for adding new recipes, is just copy and paste.\n\n## Using different TFTP or DHCP Servers\n\n1. Create a new integration file:\n   1. Add an executable file to `integrations/`\n   2. The file should integrate pixieboot into the software configuration.\n   3. Subsequent calls of this file should not emit bad configuration files.\n   4. Available environment-variables are listed in `config.sh`\n2. Change in `config.sh` the value of `INTEGRATIONS_ENABLED` to include your\n   new integration.\n3. Execute `./setup.sh integrate`.\n\n# Docker\n\nYou have to use the docker host-network, as DHCP is not usable via port-forwarding.\n\nAlso define the env-variable NFSHOST to match your local IP-Address. Additionally,\nyou must not run a service on port 80, 67 or 53 on your host system.\n\n    docker run \\\n      -h pixieboot \\\n      --name pixieboot \\\n      --env NFSHOST=<EXTERNAL_IP_ADDRESS> \\\n      --net=host \\\n      --detach \\\n      bebehei/pixieboot:latest\n",
  "permissions": {
    "read": true,
    "write": false,
    "admin": false
  },
  "media_types": [
    "application/vnd.docker.container.image.v1+json"
  ],
  "content_types": [
    "image"
  ]
}