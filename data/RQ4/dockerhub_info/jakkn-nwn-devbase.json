{
  "user": "jakkn",
  "name": "nwn-devbase",
  "namespace": "jakkn",
  "repository_type": "image",
  "status": 1,
  "status_description": "active",
  "description": "Containerized nwn-devbase building environment",
  "is_private": false,
  "is_automated": true,
  "can_edit": false,
  "star_count": 0,
  "pull_count": 1421,
  "last_updated": "2022-08-01T21:06:21.969727Z",
  "date_registered": "2018-05-07T21:25:08.980287Z",
  "collaborator_count": 0,
  "affiliation": null,
  "hub_user": "jakkn",
  "has_starred": false,
  "full_description": "# nwn-devbase\n\nnwn-devbase is a cli tool for transforming _.mod_ archives to YAML and back, intended to enable Neverwinter Nights (NWN) module developers to version control their module development. The tool supports both vanilla NWN and NWN:EE\n\nIn addition, the texts here are meant to function as a reference for users unfamiliar with git and Docker. [INTRODUCTION](https://github.com/jakkn/nwn-devbase/blob/master/INTRODUCTION.md) introduces the problem areas git and Docker solve, and attempts to explain the development workflow.\n\nThe basis for this work is what I have already done on an existing server; [Bastion of Peace](https://www.facebook.com/nwnbastionofpeace/).\n\n## Why do I need this?\n\nYou don't, but it might make version controlling your module development easier and more productive for you. It's not optimal to version control a mod archive directly, nor the gffs it unpacks to, because git considers these file formats as binary. You want to version control text, and this conversion is not straight forward.\n\n## Quickstart reference\n\nInitialize new projects by running\n\n```bash\nmkdir my-project && cd my-project\ngit init\nnwn-build init\ncp path-to-my-module.mod server/modules/\nnwn-build extract\ngit add -A && git commit -m \"Initial commit\"\n```\n\n`nwn-build init` does the following:\n\n1.  `.nwnproject` is created\n2.  `.nwnproject/.gitignore` is created to exclude the `cache` dir, unless it's already there\n3.  Prompts to specify the module file name\n4.  `.nwnproject/config.rb.in` is created with a configuration that specifies the module filename, unless it's already there\n5.  Prompts to create the expected directory for the module at `./server/modules/`\n6.  If yes, `.gitignore` is created to exclude the `server` dir, unless it's already there\n\nThese files are important. Start tracking them with `git add -A && git commit \"Initial commit\"`\n\nSee `nwn-build -h` for further usage instructions.\n\n## Common dependencies\n\n_Note to windows users: chocolatey is a package manager for Windows that empowers you to install and upgrade software from the command line. For those not using chocolatey the direct download links follow after the choco command._\n\nEveryone will need git\n\n- Arch: `pacman -S git`\n- Ubuntu: `apt install git`\n- Windows: `choco install git` [git-scm.com](https://git-scm.com/download/win)\n\n## Install and run\n\nYou can run nwn-devbase in the following ways:\n\n1.  Natively\n2.  or in a docker container\n\nTo run natively you have to install Ruby, nim, neverwinter_utils.nim, and an nss compiler. To run with docker you only need docker installed.\n\n### Docker\n\nnwn-devbase has been containerized with the intention of easing up on the dependencies and configurations required to run natively, by only requiring Docker. The image `jakkn/nwn-devbase` should be used to spin up short lived containers that run a single command and dies quietly when they're done.\n\nUse the following command to run devbase in a container\n\n```\ndocker run --rm -it --user $UID:$UID -v \"$(pwd):/home/devbase/build\" jakkn/nwn-devbase\n```\n\nIt is recommended to alias this command to something like `nwn-build`.\nLinux: append to ~/.bashrc\n\n```bash\nalias nwn-build='docker run --rm -it --user $UID:$UID -v \"$(pwd):/home/devbase/build\" jakkn/nwn-devbase'\n```\n\nWindows: TODO - Figure out how to store PS functions. Help wanted!\n\n```PowerShell\nfunction nwn-build {docker run --rm -it -v \\\"$(pwd):/home/devbase/build\\\" jakkn/nwn-devbase}\n```\n\nLimitations:\n\n- The command must be run in the project root, because docker cannot navigate to the parent of the mounted volume in the host directory tree\n- Linux host only: The container runs with UID 1000 by default if `--user` is not specified\n\nInstall Docker:\n\n- Arch: `pacman -S docker`\n- Ubuntu: See [https://docs.docker.com/engine/installation/linux/docker-ce/ubuntu/](https://docs.docker.com/engine/installation/linux/docker-ce/ubuntu/)\n- Windows: Depends on Hyper-V support (Windows Pro and above), please refer to [https://forums.docker.com/t/linux-container-on-windows-docker-host/25884/2](https://forums.docker.com/t/linux-container-on-windows-docker-host/25884/2) for details.\n  - No Hyper-V: `choco install virtualbox docker-toolbox`\n  - With Hyper-V: `choco install docker-for-windows`\n\nUpdate the image by running `docker pull jakkn/nwn-devbase`\n\n### Natively\n\nYou will need\n\n- Ruby, to run the build script and nwn-lib to convert gff to yml\n\n  - Arch: `pacman -S ruby`\n  - Ubuntu: `apt install ruby`\n  - Windows: `choco install ruby` [rubyinstaller.org](https://rubyinstaller.org/downloads/)\n\n- nwnsc, the nwscript compiler\n\n  - All platforms: [https://neverwintervault.org/project/nwn1/other/tool/nwnsc-nwn-enhanced-edition-script-compiler](https://neverwintervault.org/project/nwn1/other/tool/nwnsc-nwn-enhanced-edition-script-compiler)\n\n- nim, to use neverwinter_utils.nim\n\n  - Arch: `pacman -S nim`\n  - Ubuntu: [choosenim](https://github.com/dom96/choosenim)\n  - Windows: [choosenim](https://github.com/dom96/choosenim)\n\n- neverwinter_utils.nim for module packing and extracting\n\n  - All platforms: [https://github.com/niv/neverwinter_utils.nim](https://github.com/niv/neverwinter_utils.nim)\n\nInstall nwn-devbase\n\n```bash\ngit clone https://github.com/jakkn/nwn-devbase.git\ncd nwn-devbase\ngem install bundler\nbundle install\n```\n\nIf there are errors it is most likely due to improper Ruby configurations or missing PATH entries. See [troubleshooting](https://github.com/jakkn/nwn-devbase#troubleshooting).\n\n## Symlinks\n\nSymbolic links are used to make files appear in multiple directories. This is useful for making build.rb available on PATH, and to reveal _.mod_ files to the aurora toolset which is necessary because devbase build the module to `PATH_TO_REPO/server/modules/module.mod` while the toolset looks for the file in _NWN_USERDIR/modules/_.\n\n### Linux\n\nYou may run `ruby build.rb install` to automatically symlink `build.rb` to `$HOME/bin/nwn-build`. If you do this, make sure `$HOME/bin` is on your PATH, see [Paths](https://github.com/jakkn/nwn-devbase#paths) for details. Alternatively run `ln -s \"$(pwd)/build.rb\" \"/usr/local/bin/nwn-build\"` or modify the destination to your preference.\n\nMake a module accessible to the toolset by running\n`ln -s \"PATH_TO_REPO\"/server/modules/my-module.mod \"NWN_USERDIR\"/modules/`\nReplace _NWN_USERDIR_ with the path to where your local NWN client reads modules from, and _PATH_TO_REPO_ with the path to the repository of a given project.\n\n### Windows\n\nRun all shell commands in PowerShell. Alternatively use [Link Shell Extension](http://schinagl.priv.at/nt/hardlinkshellext/linkshellextension.html) to create symbolic links instead of using the shell.\n\nUse the right click menu from Link Shell Extension, or run `cmd /c MKLINK \"$env:USERPROFILE\\bin\\nwn-build.rb\" \"$(pwd)\\build.rb\"`, and make sure `$HOME/bin` is on your PATH, see [Paths](https://github.com/jakkn/nwn-devbase#paths) for details.\n\nMake a module accessible to the toolset by running\n`cmd /c MKLINK \"NWN_USERDIR\\modules\\my-module.mod\" \"PATH_TO_REPO\\server\\modules\\my-module.mod\"`\nReplace _NWN_USERDIR_ with the path to where your local NWN client reads modules from (mine is ), and _PATH_TO_REPO_ with the path to the repository of a given project.\n\n## Paths\n\nInformation on what environment variables are can be found by looking at the [wikipedia article](https://en.wikipedia.org/wiki/Environment_variable).\nInstructions on how to set one can be found using [google](https://www.google.no/search?q=windows+set+system+environment+variable+gui&oq=windows+set+system+environment+variable+gui&aqs=chrome..69i57j69i60.1593j0j9&sourceid=chrome&ie=UTF-8).\n\nFor nss compilation to work, it may be necessary to set some PATHs if the defaults do not match with your system environment. Either specify the paths at run time with\n\n```bash\nNWN_USERDIR=\"$HOME/Beamdog Library/00829\" NSS_COMPILER=\"$HOME/bin/nwnsc\" nwn-build compile\n```\n\nor set them permanently in system environment variables. Placing the compiler in a folder on PATH, like `$HOME/bin` should also work.\n\n#### NSS compiler\n\n`build.rb` looks for the _NSS_COMPILER_ environment variable, and defaults to `nwnsc` if that does not exist. Either add the compiler to your PATH, or create the NSS_COMPILER environment variable that points to the nss compiler of your choice.\n\n#### NWN install dir\n\nThe compiler run arguments specify game resources located in _NWN_USERDIR_ environment variable. This is needed to locate `nwscript.nss` and base game includes.\n\n## Use\n\n```\nruby ./build.rb -h\n```\n\nTo version control your changes to the sources use the git commands `git pull`, `git add`, `git commit`, `git push` accordingly.\n\n#### Hints\n\n##### Scripting in other editors\n\nSome might find other editors to be faster, easier to navigate, and to provide better syntax highlighting than the Aurora toolset.\n\n###### Visual Studio Code\n\nVSCode is an excellent choice for scripting outside of the toolset. The editor will prompt you to add the nwscript extension when you open a .nss file.\n\n###### Sublime Text\n\n_TODO: OUTDATED INSTRUCTIONS_\nSetting up Sublime Text for scripting requires a few steps to set up the custom NWN script compiler (NWNScriptCompiler).\n\n- Install [Sublime Text 3](http://www.sublimetext.com/3)\n- Install [Package Control](https://packagecontrol.io/installation)\n- Install [STNeverwinterScript](https://github.com/CromFr/STNeverwinterScript) plugin\n- Open the Sublime project described by the file nwn-devbase.sublime-project located in the root directory of this repository\n- Tools->Build System->NWN compile\n- Hit ctrl+b to compile open nss files or ctrl+shift+b for all the other build options\n\n##### Windows PowerShell\n\nWindows users may find this blog post titled [make powershell and git suck less on windows](http://learnaholic.me/2012/10/12/make-powershell-and-git-suck-less-on-windows/) useful.\n\n## Troubleshooting\n\n\"Too many files open\": nwn-lib opens all files for reading at the same time when packing the module. This can lead to an error stating too many files are open.\nFix:\n\n- _Linux_ `ulimit -n 4096` (or any other number higher than the number of files in the module)\n- _Windows_ the Java library modpacker is used instead. If modpacker cannot be found build.rb will print out instructions.\n\nI have installed Ruby but it does not work: This is most likely due the Ruby executable missing from your PATH environment variable. If this is new to you and you're on Windows, [please ask google first](https://www.google.com/search?q=windows+path&oq=windows+path&aqs=chrome.0.0l6.1280j0j1&sourceid=chrome&ie=UTF-8#q=windows+10+change+path). Linux users should not have this issue.\n\n## build.rb illustration\n\nAn illustration of how the build script operates is available at https://drive.google.com/file/d/156hELaw_3fwGeCWexYFmJDJiBrJu23-x/view?usp=sharing\n\n## Feedback\n\nFeedback is greatly appreciated. If you have any thoughts, suggestions or ideas about how to improve this project, please feel free to raise issues, create pull requests, or look me up on email or on discord.\n",
  "permissions": {
    "read": true,
    "write": false,
    "admin": false
  },
  "media_types": [
    "application/vnd.docker.container.image.v1+json"
  ],
  "content_types": [
    "image"
  ]
}