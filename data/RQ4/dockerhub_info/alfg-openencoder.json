{
  "user": "alfg",
  "name": "openencoder",
  "namespace": "alfg",
  "repository_type": "image",
  "status": 1,
  "status_description": "active",
  "description": "",
  "is_private": false,
  "is_automated": false,
  "can_edit": false,
  "star_count": 0,
  "pull_count": 413,
  "last_updated": "2021-08-03T06:17:44.25789Z",
  "date_registered": "2019-08-11T04:53:35.94083Z",
  "collaborator_count": 0,
  "affiliation": null,
  "hub_user": "alfg",
  "has_starred": false,
  "full_description": "<div align=\"center\">\n    <h1><code>openencoder</code></h1>\n    <p><strong>Open Source Cloud Encoder for FFmpeg</strong></p>\n    <p>A distributed and scalable video encoding pipeline to be used\n    as an API or web interface using your own hosted or cloud infrastructure\n    and FFmpeg encoding presets.\n    </p>\n    <p>⚠️ Currently functional, but a work-in-progress! Check back for updates!</p>\n    <p>\n        <a href=\"https://travis-ci.org/alfg/openencoder\">\n          <img src=\"https://travis-ci.org/alfg/openencoder.svg?branch=master\" alt=\"Build Status\" />\n        </a>\n        <a href=\"https://godoc.org/github.com/alfg/openencoder\">\n          <img src=\"https://godoc.org/github.com/alfg/openencoder?status.svg\" alt=\"GoDoc\" />\n        </a>\n        <a href=\"https://goreportcard.com/report/github.com/alfg/openencoder\">\n          <img src=\"https://goreportcard.com/badge/github.com/alfg/openencoder\" alt=\"Go Report Card\" />\n        </a>\n        <a href=\"https://hub.docker.com/r/alfg/openencoder/builds\">\n          <img src=\"https://img.shields.io/docker/automated/alfg/openencoder.svg\" alt=\"Docker Automated build\" />\n        </a>\n        <a href=\"https://hub.docker.com/r/alfg/openencoder\">\n          <img src=\"https://img.shields.io/docker/pulls/alfg/openencoder.svg\" alt=\"Docker Pulls\" />\n        </a>\n    </p>\n</div>\n\n\n## Features\n* HTTP API for submitting jobs to a redis-backed FFmpeg worker\n* FTP and S3 storage (AWS, Digital Ocean Spaces and Custom S3 Providers supported)\n* Web Dashboard UI for managing encode jobs, workers, users and settings\n* Machines UI/API for scaling cloud worker instances in a VPC\n* Database stored FFmpeg encoding presets\n* User accounts and roles\n\n\n## Preview\n![Screenshot](screenshot.png)    \n\n\n## Development\n\n#### Requirements\n* Docker\n* Go 1.11+\n* NodeJS 8+ (For web dashboard)\n* FFmpeg\n* Postgres\n* S3 API Credentials & Bucket (AWS or Digital Ocean)\n* Digital Ocean API Key (only required for Machines API)\n\nDocker is optional, but highly recommended for this setup. This guide assumes you are using Docker.\n\n\n#### Setup\n* Start Redis and Postgres in Docker:\n```\ndocker-compose up -d redis\ndocker-compose up -d db\n```\n\nWhen the database container runs for the first time, it will create a persistent volume as `/var/lib/postgresql/data`. It will also run the scripts in `scripts/` to create the database, schema, settings, presets, and an admin user.\n\n* Build & start API server:\n```\ngo build -v && ./openencoder server\n```\n\n* Start the worker:\n```\n./openencoder worker\n```\n\n* Start Web Dashboard for development:\n```\ncd static && npm run serve\n```\n\n* Open `http://localhost:8081/dashboard` in the browser and login with `admin/password`.\n\n\nSee [Quick-Setup-Guide](https://github.com/alfg/openencoder/wiki/Quick-Setup-Guide-%5Bfor-development%5D) for full development setup guide.\n\n## API\nSee: [API.md](/API.md)\n\n\n## Scaling\nYou can scale workers by adding more machines via the Web UI or API.\n\nCurrently only `Digital Ocean` is supported. More providers are planned.\n\nSee: [API.md](/API.md) for Machines API documentation.\n\n\n## Documentation\nSee: [wiki](https://github.com/alfg/openencoder/wiki) for more documentation.\n\n\n## Roadmap\nSee: [Development Project](https://github.com/alfg/openencoder/projects/1) for current development tasks and status.\n\n\n## License\nMIT\n",
  "permissions": {
    "read": true,
    "write": false,
    "admin": false
  },
  "media_types": [
    "application/vnd.docker.container.image.v1+json"
  ],
  "content_types": [
    "image"
  ]
}