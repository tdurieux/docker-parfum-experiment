{
  "user": "parisson",
  "name": "timeside",
  "namespace": "parisson",
  "repository_type": "image",
  "status": 1,
  "status_description": "active",
  "description": "audio processing framework for web written in python",
  "is_private": false,
  "is_automated": true,
  "can_edit": false,
  "star_count": 2,
  "pull_count": 7684,
  "last_updated": "2021-07-01T10:04:09.112262Z",
  "date_registered": "2014-11-06T12:12:03.068971Z",
  "collaborator_count": 0,
  "affiliation": null,
  "hub_user": "parisson",
  "has_starred": false,
  "full_description": "===========================================================================\nTimeSide : scalable audio processing framework and server written in Python\n===========================================================================\n\nTimeSide is a python framework enabling low and high level audio analysis, imaging, transcoding, streaming and labelling. Its high-level API is designed to enable complex processing on very large datasets of any audio or video assets with a plug-in architecture, a secure scalable backend and an extensible dynamic web frontend.\n\n\nUse cases\n==========\n\n* Scaled audio computing (filtering, machine learning, etc)\n* Web audio visualization\n* Audio process prototyping\n* Realtime and on-demand transcoding and streaming over the web\n* Automatic segmentation and labelling synchronized with audio events\n\n\nGoals\n=====\n\n* **Do** asynchronous and fast audio processing with Python,\n* **Decode** audio frames from **any** audio or video media format into numpy arrays,\n* **Analyze** audio content with some state-of-the-art audio feature extraction libraries like Aubio, Yaafe and VAMP as well as some pure python processors\n* **Visualize** sounds with various fancy waveforms, spectrograms and other cool graphers,\n* **Transcode** audio data in various media formats and stream them through web apps,\n* **Serialize** feature analysis data through various portable formats,\n* **Provide** audio sources from plateform like YouTube or Deezer  \n* **Deliver** analysis and transcode on provided or uploaded tracks over the web through a REST API\n* **Playback** and **interact** **on demand** through a smart high-level HTML5 extensible player,\n* **Index**, **tag** and **annotate** audio archives with semantic metadata (see `Telemeta <http://telemeta.org>`__ which embed TimeSide).\n* **Deploy** and **scale** your own audio processing engine through any infrastructure\n\n\nFunding and support\n===================\n\nTo fund the project and continue our fast development process, we need your explicit support. So if you use TimeSide in production or even in a development or experimental setup, please let us know by:\n\n* staring or forking the project on `GitHub <https://github.com/Parisson/TimeSide>`_\n* tweeting something to `@parisson_studio <https://twitter.com/parisson_studio>`_ or `@telemeta <https://twitter.com/telemeta>`_\n* drop us an email on <support@parisson.com> or <pow@ircam.fr>\n\nThanks for your help!\n\nNews\n=====\n\n1.0\n---\n* Server refactoring:\n\n  * audio process run on items (REST API track's model)\n  * several tools, views, models and serializers\n  * REST API's schema on OpenAPI 3 specification and automatic Redoc generation\n\n* Move core and server from Python 2.7 to 3.7\n* Upgrade Django to 2.2, Django REST Framework to 3.11, Celery to 4.4\n* Add an `Aubio <https://github.com/aubio/aubio>`_ based decoder\n* Add core and server processors' versioning and server process' run time\n* Regroup all dependencies on pip requirements removing conda use\n* Add :ref:`provider` as a core API component and as a REST API model\n* Add provider plugins :ref:`deezer-preview`, :ref:`deezer-complete` and :ref:`youtube`\n* Improve server unit testing\n* Add JWT authentication on REST API\n* Various bug fixes\n* Add core, server and workers logging\n\n\n0.9\n---\n\n* Upgrade all python dependencies\n* Add Vamp, Essentia, Yaafe, librosa, PyTorch, Tensorflow libs and wrappers\n* Add a few analyzing plugins (Essentia Dissonance, Vamp Constant Q, Vamp Tempo, Vamp general wrapper, Yaafe general wrapper)\n* Add processor parameter management\n* Add processor inheritance\n* Improve HTML5 player with clever data streaming\n* Improve REST API and various serialzers\n* Improve unit testing\n* Various bug fixes\n\n0.8\n---\n\n* Add *Docker* support for instant installation. This allows to run TimeSide now on *any* OS platform!\n* Add `Jupyter Notebook <http://jupyter.org/>`_ support for easy prototyping, experimenting and sharing (see the examples in the doc).\n* Add an experimental web server and REST API based on Django REST Framework, Redis and Celery. This now provides a real web audio processing server with high scaling capabilities thanks to Docker (clustering) and Celery (multiprocessing).\n* Start the development of a new player interface thanks to Angular and WavesJS.\n* Huge cleanup of JS files. Please now use bower to get all JS dependencies as `listed in settings <https://github.com/Parisson/TimeSide/blob/dev/app/sandbox/settings.py#L199>`_.\n* Add metadata export to Elan annotation files.\n* Fix and improve some data structures in analyzer result containers.\n* Many various bugfixes.\n\n0.7.1\n-----\n\n* fix django version to 1.6.10 (sync with Telemeta 1.5)\n\n0.7\n----\n\n* Code refactoring:\n\n  * Create a new module `timeside.plugins` and move processors therein: timeside.plugins.decoder,analyzer, timeside.plugins.encoder, timeside.plugins.fx\n  * WARNING: to properly manage the namespace packages structure, the TimeSide main module is now `timeside.core` and code should now be initialized with `import timeside.core`\n  * `timeside.plugins` is now a `namespace package <https://pythonhosted.org/setuptools/setuptools.html#namespace-packages>`_ enabling external plugins to be **automatically** plugged into TimeSide (see for example `timeside-diadems <https://github.com/ANR-DIADEMS/timeside-diadems>`_). This now makes TimeSide a **real** plugin host, yeah!\n  * A dummy timeside plugin will soon be provided for easy development start.\n\n* Move all analyzers developped by the partners of the Diadems project to a new repository: `timeside-diadems <https://github.com/ANR-DIADEMS/timeside-diadems>`_\n* Many fixes for a better processing by `Travis-CI <https://travis-ci.org/Parisson/TimeSide>`_\n* Add a dox file to test the docker building continously on `various distributions <https://github.com/Parisson/Docker>`_\n\nFor older news, please visit: https://github.com/Parisson/TimeSide/blob/master/NEWS.rst\n\nDocumentation\n==============\n\n* General documentation: https://timeside.readthedocs.io/en/latest/index.html\n* Tutorials: https://timeside.readthedocs.io/en/latest/tutorials/index.html\n* RESTful API: https://sandbox.wasabi.telemeta.org/timeside/api/docs/\n* Publications: https://github.com/Parisson/Telemeta-doc\n* Slides: https://ircam-web.github.io/timeside-slides/#1\n* Some (old) notebooks: http://mybinder.org/repo/thomasfillon/Timeside-demos\n* Player UI wiki (v1): https://github.com/Parisson/TimeSide/wiki/Ui-Guide\n* A player example (v1): http://archives.crem-cnrs.fr/archives/items/CNRSMH_E_2004_017_001_01/\n\nInstall\n=======\n\nThanks to Docker, Timeside is now fully available as a docker composition ready to work. The docker based composition bundles some powerfull applications and modern frameworks out-of-the-box like: Python, Conda, Numpy, Jupyter, Gstreamer, Django, Celery, Haystack, ElasticSearch, MySQL, Redis, uWSGI, Nginx and many more.\n\nFirst, install `Docker <https://store.docker.com/search?offering=community&q=&type=edition>`_ and `docker-compose <https://docs.docker.com/compose/>`_\n\nThen clone TimeSide::\n\n    git clone --recursive https://github.com/Parisson/TimeSide.git\n    cd TimeSide\n    docker-compose pull\n\nThat's it! Now please go to the documentation to see how to use it.\n\n.. note::\n   If you need to user TimeSide outside a docker image please refer to the rules of the Dockerfile which is based on a Debian stable system. But we do not provide any kind of free support in this usercase anymore (the dependency list is now huge). To get commercial support in more various usecases, please reach the Parisson dev team.\n\nSponsors and Partners\n=====================\n\n* `Parisson <http://parisson.com>`_\n* `CNRS <http://www.cnrs.fr>`_: National Center of Science Research (France)\n* `Huma-Num <http://www.huma-num.fr/>`_: big data equipment for digital humanities (CNRS, France)\n* `CREM <http://www.crem-cnrs.fr>`_: French National Center of Ethomusicology Research (France)\n* `Université Pierre et Marie Curie <http://www.upmc.fr>`_ (UPMC Paris, France)\n* `ANR <http://www.agence-nationale-recherche.fr/>`_: Agence Nationale de la Recherche (France)\n* `MNHN <http://www.mnhn.fr>`_ : Museum National d'Histoire Naturelle (Paris, France)\n* `C4DM <http://c4dm.eecs.qmul.ac.uk/>`_ : Center for Digital Music, Queen Mary University (London, United Kingdom)\n* `NYU Steinhardt <http://steinhardt.nyu.edu/music/>`_ : Music and Performing Arts Professions, New York University (New York, USA)\n* `IRCAM <https://www.ircam.fr>`_ : IRCAM (Paris, France)\n\nRelated projects\n=================\n\n* `Telemeta <http://telemeta.org>`__ : Open web audio platform\n* `Sound archives of the CNRS <http://archives.crem-cnrs.fr/>`_, CREM and the \"Musée de l'Homme\" in Paris, France\n* `DIADEMS <http://www.irit.fr/recherches/SAMOVA/DIADEMS/en/welcome/>`_ sponsored by the ANR.\n* `DaCaRyh <http://gtr.rcuk.ac.uk/projects?ref=AH/N504531/1>`_, Data science for the study of calypso-rhythm through history\n* `KAMoulox <https://anr-kamoulox.github.io/>`_ Online unmixing of large historical archives\n* NYU+CREM+Parisson : arabic music analysis from the full CREM database\n* `WASABI <http://wasabihome.i3s.unice.fr/>`_: Web Audio Semantic Aggregated in the Browser for Indexation, sponsored by the ANR\n\nCopyrights\n==========\n\n* Copyright (c) 2019, 2020 IRCAM\n* Copyright (c) 2006, 2020 Guillaume Pellerin\n* Copyright (c) 2010, 2020 Paul Brossier\n* Copyright (c) 2019, 2020 Antoine Grandry\n* Copyright (c) 2006, 2019 Parisson SARL\n* Copyright (c) 2013, 2017 Thomas Fillon\n* Copyright (c) 2016, 2017 Eric Debeir\n* Copyright (c) 2013, 2014 Maxime Lecoz\n* Copyright (c) 2013, 2014 David Doukhan\n* Copyright (c) 2006, 2010 Olivier Guilyardi\n\n\nLicense\n=======\n\nTimeSide is free software: you can redistribute it and/or modify\nit under the terms of the GNU Affero General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nTimeSide is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Affero General Public License for more details.\n\nRead the LICENSE.txt file for more details.\n",
  "permissions": {
    "read": true,
    "write": false,
    "admin": false
  },
  "media_types": [
    "application/vnd.docker.container.image.v1+json"
  ],
  "content_types": [
    "image"
  ]
}