{
  "user": "mevdschee",
  "name": "php-crud-api",
  "namespace": "mevdschee",
  "repository_type": "image",
  "status": 1,
  "status_description": "active",
  "description": "Single file PHP script that adds a REST API to a SQL database",
  "is_private": false,
  "is_automated": false,
  "can_edit": false,
  "star_count": 2,
  "pull_count": 870,
  "last_updated": "2022-11-02T18:01:33.938283Z",
  "date_registered": "2019-10-13T11:49:10.261949Z",
  "collaborator_count": 0,
  "affiliation": null,
  "hub_user": "mevdschee",
  "has_starred": false,
  "full_description": "# PHP-CRUD-API\n\nSingle file PHP script that adds a REST API to a MySQL/MariaDB, PostgreSQL, SQL Server or SQLite database. \n\nNB: This is the [TreeQL](https://treeql.org) reference implementation in PHP.\n\nRelated projects:\n\n  - [JS-CRUD-API](https://github.com/thipages/js-crud-api): A JavaScript client library for the API of PHP-CRUD-API\n  - [PHP-API-AUTH](https://github.com/mevdschee/php-api-auth): Single file PHP script that is an authentication provider for PHP-CRUD-API\n  - [PHP-CRUD-UI](https://github.com/mevdschee/php-crud-ui): Single file PHP script that adds a UI to a PHP-CRUD-API project.\n  - [PHP-CRUD-ADMIN](https://github.com/mevdschee/php-crud-admin): Single file PHP script that adds a database admin interface to a PHP-CRUD-API project.\n  - [PHP-SP-API](https://github.com/mevdschee/php-sp-api): Single file PHP script that adds a REST API to a SQL database.\n  - [VUE-CRUD-UI](https://github.com/nlware/vue-crud-ui): Single file Vue.js script that adds a UI to a PHP-CRUD-API project.\n  \nThere are also ports of this script in:\n\n- [Java JDBC by Ivan Kolchagov](https://github.com/kolchagov/java-crud-api) (v1)\n- [Java Spring Boot + jOOQ](https://github.com/mevdschee/java-crud-api/tree/master/full) (v2: work in progress)\n\nThere are also proof-of-concept ports of this script that only support basic REST CRUD functionality in:\n[PHP](https://github.com/mevdschee/php-crud-api/blob/master/extras/core.php),\n[Java](https://github.com/mevdschee/java-crud-api/blob/master/core/src/main/java/com/tqdev/CrudApiHandler.java),\n[Go](https://github.com/mevdschee/go-crud-api/blob/master/api.go),\n[C# .net core](https://github.com/mevdschee/core-data-api/blob/master/Program.cs),\n[Node.js](https://github.com/mevdschee/js-crud-api/blob/master/app.js) and\n[Python](https://github.com/mevdschee/py-crud-api/blob/master/api.py).\n\n## Requirements\n\n  - PHP 7.0 or higher with PDO drivers enabled for one of these database systems:\n    - MySQL 5.6 / MariaDB 10.0 or higher for spatial features in MySQL\n    - PostgreSQL 9.1 or higher with PostGIS 2.0 or higher for spatial features\n    - SQL Server 2012 or higher (2017 for Linux support)\n    - SQLite 3.16 or higher (spatial features NOT supported)\n\n## Installation\n\nThis is a single file application! Upload \"`api.php`\" somewhere and enjoy!\n\nFor local development you may run PHP's built-in web server:\n\n    php -S localhost:8080\n\nTest the script by opening the following URL:\n\n    http://localhost:8080/api.php/records/posts/1\n\nDon't forget to modify the configuration at the bottom of the file.\n\nAlternatively you can integrate this project into the web framework of your choice, see:\n\n- [Automatic REST API for Laravel](https://tqdev.com/2019-automatic-rest-api-laravel)\n- [Automatic REST API for Symfony 4](https://tqdev.com/2019-automatic-rest-api-symfony)\n- [Automatic REST API for SlimPHP 4](https://tqdev.com/2019-automatic-api-slimphp-4)\n\nIn these integrations [Composer](https://getcomposer.org/) is used to load this project as a dependency.\n\nFor people that don't use composer, the file \"`api.include.php`\" is provided. This file contains everything \nfrom \"`api.php`\" except the configuration from \"`src/index.php`\" and can be used by PHP's \"include\" function.\n\n## Configuration\n\nEdit the following lines in the bottom of the file \"`api.php`\":\n\n    $config = new Config([\n        'username' => 'xxx',\n        'password' => 'xxx',\n        'database' => 'xxx',\n    ]);\n\nThese are all the configuration options and their default value between brackets:\n\n- \"driver\": `mysql`, `pgsql`, `sqlsrv` or `sqlite` (`mysql`)\n- \"address\": Hostname (or filename) of the database server (`localhost`)\n- \"port\": TCP port of the database server (defaults to driver default)\n- \"username\": Username of the user connecting to the database (no default)\n- \"password\": Password of the user connecting to the database (no default)\n- \"database\": Database the connecting is made to (no default)\n- \"tables\": Comma separated list of tables to publish (defaults to 'all')\n- \"middlewares\": List of middlewares to load (`cors`)\n- \"controllers\": List of controllers to load (`records,geojson,openapi,status`)\n- \"openApiBase\": OpenAPI info (`{\"info\":{\"title\":\"PHP-CRUD-API\",\"version\":\"1.0.0\"}}`)\n- \"cacheType\": `TempFile`, `Redis`, `Memcache`, `Memcached` or `NoCache` (`TempFile`)\n- \"cachePath\": Path/address of the cache (defaults to system's temp directory)\n- \"cacheTime\": Number of seconds the cache is valid (`10`)\n- \"debug\": Show errors in the \"X-Exception\" headers (`false`)\n- \"basePath\": URI base path of the API (determined using PATH_INFO by default)\n\nAll configuration options are also available as environment variables. Write the config option with capitals, a \"PHP_CRUD_API_\" prefix and underscores for word breakes, so for instance:\n\n- PHP_CRUD_API_DRIVER=mysql\n- PHP_CRUD_API_ADDRESS=localhost\n- PHP_CRUD_API_PORT=3306\n- PHP_CRUD_API_DATABASE=php-crud-api\n- PHP_CRUD_API_USERNAME=php-crud-api\n- PHP_CRUD_API_PASSWORD=php-crud-api\n- PHP_CRUD_API_DEBUG=1\n\nThe environment variables take precedence over the PHP configuration.\n\n## Limitations\n\nThese limitation and constrains apply:\n\n  - Primary keys should either be auto-increment (from 1 to 2^53) or UUID\n  - Composite primary and composite foreign keys are not supported\n  - Complex writes (transactions) are not supported\n  - Complex queries calling functions (like \"concat\" or \"sum\") are not supported\n  - Database must support and define foreign key constraints\n  - SQLite cannot have bigint typed auto incrementing primary keys\n  - SQLite does not support altering table columns (structure)\n    \n## Features\n\nThe following features are supported:\n\n  - Composer install or single PHP file, easy to deploy.\n  - Very little code, easy to adapt and maintain\n  - Supports POST variables as input (x-www-form-urlencoded)\n  - Supports a JSON object as input\n  - Supports a JSON array as input (batch insert)\n  - Sanitize and validate input using type rules and callbacks\n  - Permission system for databases, tables, columns and records\n  - Multi-tenant single and multi database layouts are supported\n  - Multi-domain CORS support for cross-domain requests\n  - Support for reading joined results from multiple tables\n  - Search support on multiple criteria\n  - Pagination, sorting, top N list and column selection\n  - Relation detection with nested results (belongsTo, hasMany and HABTM)\n  - Atomic increment support via PATCH (for counters)\n  - Binary fields supported with base64 encoding\n  - Spatial/GIS fields and filters supported with WKT and GeoJSON\n  - Generate API documentation using OpenAPI tools\n  - Authentication via API key, JWT token or username/password\n  - Database connection parameters may depend on authentication\n  - Support for reading database structure in JSON\n  - Support for modifying database structure using REST endpoint\n  - Security enhancing middleware is included\n  - Standard compliant: PSR-4, PSR-7, PSR-12, PSR-15 and PSR-17\n\n## Compilation\n\nYou can install all dependencies of this project using the following command:\n\n    php install.php\n\nYou can compile all files into a single \"`api.php`\" file using:\n\n    php build.php\n\nNB: The install script will patch the dependencies in the vendor directory for PHP 7.0 compatibility.\n\n### Development\n\nYou can access the non-compiled code at the URL:\n\n    http://localhost:8080/src/records/posts/1\n\nThe non-compiled code resides in the \"`src`\" and \"`vendor`\" directories. The \"`vendor`\" directory contains the dependencies.\n\n### Updating dependencies\n\nYou can update all dependencies of this project using the following command:\n\n    php update.php\n\nThis script will install and run [Composer](https://getcomposer.org/) to update the dependencies.\n\nNB: The update script will patch the dependencies in the vendor directory for PHP 7.0 compatibility.\n\n## TreeQL, a pragmatic GraphQL\n\n[TreeQL](https://treeql.org) allows you to create a \"tree\" of JSON objects based on your SQL database structure (relations) and your query.\n\nIt is loosely based on the REST standard and also inspired by json:api.\n\n### CRUD + List\n\nThe example posts table has only a a few fields:\n\n    posts  \n    =======\n    id     \n    title  \n    content\n    created\n\nThe CRUD + List operations below act on this table.\n\n#### Create\n\nIf you want to create a record the request can be written in URL format as: \n\n    POST /records/posts\n\nYou have to send a body containing:\n\n    {\n        \"title\": \"Black is the new red\",\n        \"content\": \"This is the second post.\",\n        \"created\": \"2018-03-06T21:34:01Z\"\n    }\n\nAnd it will return the value of the primary key of the newly created record:\n\n    2\n\n#### Read\n\nTo read a record from this table the request can be written in URL format as:\n\n    GET /records/posts/1\n\nWhere \"1\" is the value of the primary key of the record that you want to read. It will return:\n\n    {\n        \"id\": 1\n        \"title\": \"Hello world!\",\n        \"content\": \"Welcome to the first post.\",\n        \"created\": \"2018-03-05T20:12:56Z\"\n    }\n\nOn read operations you may apply joins.\n\n#### Update\n\nTo update a record in this table the request can be written in URL format as:\n\n    PUT /records/posts/1\n\nWhere \"1\" is the value of the primary key of the record that you want to update. Send as a body:\n\n    {\n        \"title\": \"Adjusted title!\"\n    }\n\nThis adjusts the title of the post. And the return value is the number of rows that are set:\n\n    1\n\n#### Delete\n\nIf you want to delete a record from this table the request can be written in URL format as:\n\n    DELETE /records/posts/1\n\nAnd it will return the number of deleted rows:\n\n    1\n\n#### List\n\nTo list records from this table the request can be written in URL format as:\n\n    GET /records/posts\n\nIt will return:\n\n    {\n        \"records\":[\n            {\n                \"id\": 1,\n                \"title\": \"Hello world!\",\n                \"content\": \"Welcome to the first post.\",\n                \"created\": \"2018-03-05T20:12:56Z\"\n            }\n        ]\n    }\n\nOn list operations you may apply filters and joins.\n\n### Filters\n\nFilters provide search functionality, on list calls, using the \"filter\" parameter. You need to specify the column\nname, a comma, the match type, another commma and the value you want to filter on. These are supported match types:\n\n  - \"cs\": contain string (string contains value)\n  - \"sw\": start with (string starts with value)\n  - \"ew\": end with (string end with value)\n  - \"eq\": equal (string or number matches exactly)\n  - \"lt\": lower than (number is lower than value)\n  - \"le\": lower or equal (number is lower than or equal to value)\n  - \"ge\": greater or equal (number is higher than or equal to value)\n  - \"gt\": greater than (number is higher than value)\n  - \"bt\": between (number is between two comma separated values)\n  - \"in\": in (number or string is in comma separated list of values)\n  - \"is\": is null (field contains \"NULL\" value)\n\nYou can negate all filters by prepending a \"n\" character, so that \"eq\" becomes \"neq\". \nExamples of filter usage are:\n\n    GET /records/categories?filter=name,eq,Internet\n    GET /records/categories?filter=name,sw,Inter\n    GET /records/categories?filter=id,le,1\n    GET /records/categories?filter=id,ngt,1\n    GET /records/categories?filter=id,bt,0,1\n    GET /records/categories?filter=id,in,0,1\n\nOutput:\n\n    {\n        \"records\":[\n            {\n                \"id\": 1\n                \"name\": \"Internet\"\n            }\n        ]\n    }\n\nIn the next section we dive deeper into how you can apply multiple filters on a single list call.\n\n### Multiple filters\n\nFilters can be a by applied by repeating the \"filter\" parameter in the URL. For example the following URL: \n\n    GET /records/categories?filter=id,gt,1&filter=id,lt,3\n\nwill request all categories \"where id > 1 and id < 3\". If you wanted \"where id = 2 or id = 4\" you should write:\n\n    GET /records/categories?filter1=id,eq,2&filter2=id,eq,4\n    \nAs you see we added a number to the \"filter\" parameter to indicate that \"OR\" instead of \"AND\" should be applied.\nNote that you can also repeat \"filter1\" and create an \"AND\" within an \"OR\". Since you can also go one level deeper\nby adding a letter (a-f) you can create almost any reasonably complex condition tree.\n\nNB: You can only filter on the requested table (not on it's included tables) and filters are only applied on list calls.\n\n### Column selection\n\nBy default all columns are selected. With the \"include\" parameter you can select specific columns. \nYou may use a dot to separate the table name from the column name. Multiple columns should be comma separated. \nAn asterisk (\"*\") may be used as a wildcard to indicate \"all columns\". Similar to \"include\" you may use the \"exclude\" parameter to remove certain columns:\n\n```\nGET /records/categories/1?include=name\nGET /records/categories/1?include=categories.name\nGET /records/categories/1?exclude=categories.id\n```\n\nOutput:\n\n```\n    {\n        \"name\": \"Internet\"\n    }\n```\n\nNB: Columns that are used to include related entities are automatically added and cannot be left out of the output.\n\n### Ordering\n\nWith the \"order\" parameter you can sort. By default the sort is in ascending order, but by specifying \"desc\" this can be reversed:\n\n```\nGET /records/categories?order=name,desc\nGET /records/categories?order=id,desc&order=name\n```\n\nOutput:\n\n```\n    {\n        \"records\":[\n            {\n                \"id\": 3\n                \"name\": \"Web development\"\n            },\n            {\n                \"id\": 1\n                \"name\": \"Internet\"\n            }\n        ]\n    }\n```\n\nNB: You may sort on multiple fields by using multiple \"order\" parameters. You can not order on \"joined\" columns.\n\n### Limit size\n\nThe \"size\" parameter limits the number of returned records. This can be used for top N lists together with the \"order\" parameter (use descending order).\n\n```\nGET /records/categories?order=id,desc&size=1\n```\n\nOutput:\n\n```\n    {\n        \"records\":[\n            {\n                \"id\": 3\n                \"name\": \"Web development\"\n            }\n        ]\n    }\n```\n\nNB: If you also want to know to the total number of records you may want to use the \"page\" parameter.\n\n### Pagination\n\nThe \"page\" parameter holds the requested page. The default page size is 20, but can be adjusted (e.g. to 50).\n\n```\nGET /records/categories?order=id&page=1\nGET /records/categories?order=id&page=1,50\n```\n\nOutput:\n\n```\n    {\n        \"records\":[\n            {\n                \"id\": 1\n                \"name\": \"Internet\"\n            },\n            {\n                \"id\": 3\n                \"name\": \"Web development\"\n            }\n        ],\n        \"results\": 2\n    }\n```\n\nThe element \"results\" holds to total number of records in the table, which would be returned if no pagination would be used.\n\nNB: Since pages that are not ordered cannot be paginated, pages will be ordered by primary key.\n\n### Joins\n\nLet's say that you have a posts table that has comments (made by users) and the posts can have tags.\n\n    posts    comments  users     post_tags  tags\n    =======  ========  =======   =========  ======= \n    id       id        id        id         id\n    title    post_id   username  post_id    name\n    content  user_id   phone     tag_id\n    created  message\n\nWhen you want to list posts with their comments users and tags you can ask for two \"tree\" paths:\n\n    posts -> comments  -> users\n    posts -> post_tags -> tags\n\nThese paths have the same root and this request can be written in URL format as:\n\n    GET /records/posts?join=comments,users&join=tags\n\nHere you are allowed to leave out the intermediate table that binds posts to tags. In this example\nyou see all three table relation types (hasMany, belongsTo and hasAndBelongsToMany) in effect:\n\n- \"post\" has many \"comments\"\n- \"comment\" belongs to \"user\"\n- \"post\" has and belongs to many \"tags\"\n\nThis may lead to the following JSON data:\n\n    {\n        \"records\":[\n            {\n                \"id\": 1,\n                \"title\": \"Hello world!\",\n                \"content\": \"Welcome to the first post.\",\n                \"created\": \"2018-03-05T20:12:56Z\",\n                \"comments\": [\n                    {\n                        id: 1,\n                        post_id: 1,\n                        user_id: {\n                            id: 1,\n                            username: \"mevdschee\",\n                            phone: null,\n                        },\n                        message: \"Hi!\"\n                    },\n                    {\n                        id: 2,\n                        post_id: 1,\n                        user_id: {\n                            id: 1,\n                            username: \"mevdschee\",\n                            phone: null,\n                        },\n                        message: \"Hi again!\"\n                    }\n                ],\n                \"tags\": []\n            },\n            {\n                \"id\": 2,\n                \"title\": \"Black is the new red\",\n                \"content\": \"This is the second post.\",\n                \"created\": \"2018-03-06T21:34:01Z\",\n                \"comments\": [],\n                \"tags\": [\n                    {\n                        id: 1,\n                        message: \"Funny\"\n                    },\n                    {\n                        id: 2,\n                        message: \"Informational\"\n                    }\n                ]\n            }\n        ]\n    }\n\nYou see that the \"belongsTo\" relationships are detected and the foreign key value is replaced by the referenced object.\nIn case of \"hasMany\" and \"hasAndBelongsToMany\" the table name is used a new property on the object.\n\n### Batch operations\n\nWhen you want to create, read, update or delete you may specify multiple primary key values in the URL.\nYou also need to send an array instead of an object in the request body for create and update. \n\nTo read a record from this table the request can be written in URL format as:\n\n    GET /records/posts/1,2\n\nThe result may be:\n\n    [\n            {\n                \"id\": 1,\n                \"title\": \"Hello world!\",\n                \"content\": \"Welcome to the first post.\",\n                \"created\": \"2018-03-05T20:12:56Z\"\n            },\n            {\n                \"id\": 2,\n                \"title\": \"Black is the new red\",\n                \"content\": \"This is the second post.\",\n                \"created\": \"2018-03-06T21:34:01Z\"\n            }\n    ]\n\nSimilarly when you want to do a batch update the request in URL format is written as:\n\n    PUT /records/posts/1,2\n\nWhere \"1\" and \"2\" are the values of the primary keys of the records that you want to update. The body should \ncontain the same number of objects as there are primary keys in the URL:\n\n    [   \n        {\n            \"title\": \"Adjusted title for ID 1\"\n        },\n        {\n            \"title\": \"Adjusted title for ID 2\"\n        }        \n    ]\n\nThis adjusts the titles of the posts. And the return values are the number of rows that are set:\n\n    [1,1]\n\nWhich means that there were two update operations and each of them had set one row. Batch operations use database\ntransactions, so they either all succeed or all fail (successful ones get roled back). If they fail the body will\ncontain the list of error documents. In the following response the first operation succeeded and the second operation\nof the batch failed due to an integrity violation:\n\n    [   \n        {\n            \"code\": 0,\n            \"message\": \"Success\"\n        },\n        {\n            \"code\": 1010,\n            \"message\": \"Data integrity violation\"\n        }\n    ]\n\nThe response status code will always be 424 (failed dependency) in case of any failure of one of the batch operations.\n\n### Spatial support\n\nFor spatial support there is an extra set of filters that can be applied on geometry columns and that starting with an \"s\":\n\n  - \"sco\": spatial contains (geometry contains another)\n  - \"scr\": spatial crosses (geometry crosses another)\n  - \"sdi\": spatial disjoint (geometry is disjoint from another)\n  - \"seq\": spatial equal (geometry is equal to another)\n  - \"sin\": spatial intersects (geometry intersects another)\n  - \"sov\": spatial overlaps (geometry overlaps another)\n  - \"sto\": spatial touches (geometry touches another)\n  - \"swi\": spatial within (geometry is within another)\n  - \"sic\": spatial is closed (geometry is closed and simple)\n  - \"sis\": spatial is simple (geometry is simple)\n  - \"siv\": spatial is valid (geometry is valid)\n\nThese filters are based on OGC standards and so is the WKT specification in which the geometry columns are represented.\n\n#### GeoJSON\n\nThe GeoJSON support is a read-only view on the tables and records in GeoJSON format. These requests are supported:\n\n    method path                  - operation - description\n    ----------------------------------------------------------------------------------------\n    GET    /geojson/{table}      - list      - lists records as a GeoJSON FeatureCollection\n    GET    /geojson/{table}/{id} - read      - reads a record by primary key as a GeoJSON Feature\n\nThe \"`/geojson`\" endpoint uses the \"`/records`\" endpoint internally and inherits all functionality, such as joins and filters.\nIt also supports a \"geometry\" parameter to indicate the name of the geometry column in case the table has more than one.\nFor map views it supports the \"bbox\" parameter in which you can specify upper-left and lower-right coordinates (comma separated).\nThe following Geometry types are supported by the GeoJSON implementation:\n\n  - Point\n  - MultiPoint\n  - LineString\n  - MultiLineString\n  - Polygon\n  - MultiPolygon\n\nThe GeoJSON functionality is enabled by default, but can be disabled using the \"controllers\" configuration.\n\n## Middleware\n\nYou can enable the following middleware using the \"middlewares\" config parameter:\n\n- \"firewall\": Limit access to specific IP addresses\n- \"sslRedirect\": Force connection over HTTPS instead of HTTP\n- \"cors\": Support for CORS requests (enabled by default)\n- \"xsrf\": Block XSRF attacks using the 'Double Submit Cookie' method\n- \"ajaxOnly\": Restrict non-AJAX requests to prevent XSRF attacks\n- \"apiKeyAuth\": Support for \"API Key Authentication\"\n- \"apiKeyDbAuth\": Support for \"API Key Database Authentication\"\n- \"dbAuth\": Support for \"Database Authentication\"\n- \"jwtAuth\": Support for \"JWT Authentication\"\n- \"basicAuth\": Support for \"Basic Authentication\"\n- \"reconnect\": Reconnect to the database with different parameters\n- \"authorization\": Restrict access to certain tables or columns\n- \"validation\": Return input validation errors for custom rules and default type rules\n- \"ipAddress\": Fill a protected field with the IP address on create\n- \"sanitation\": Apply input sanitation on create and update\n- \"multiTenancy\": Restricts tenants access in a multi-tenant scenario\n- \"pageLimits\": Restricts list operations to prevent database scraping\n- \"joinLimits\": Restricts join parameters to prevent database scraping\n- \"customization\": Provides handlers for request and response customization\n- \"json\": Support read/write of JSON strings as JSON objects/arrays\n- \"xml\": Translates all input and output from JSON to XML\n\nThe \"middlewares\" config parameter is a comma separated list of enabled middlewares.\nYou can tune the middleware behavior using middleware specific configuration parameters:\n\n- \"firewall.reverseProxy\": Set to \"true\" when a reverse proxy is used (\"\")\n- \"firewall.allowedIpAddresses\": List of IP addresses that are allowed to connect (\"\")\n- \"cors.allowedOrigins\": The origins allowed in the CORS headers (\"*\")\n- \"cors.allowHeaders\": The headers allowed in the CORS request (\"Content-Type, X-XSRF-TOKEN, X-Authorization\")\n- \"cors.allowMethods\": The methods allowed in the CORS request (\"OPTIONS, GET, PUT, POST, DELETE, PATCH\")\n- \"cors.allowCredentials\": To allow credentials in the CORS request (\"true\")\n- \"cors.exposeHeaders\": Whitelist headers that browsers are allowed to access (\"\")\n- \"cors.maxAge\": The time that the CORS grant is valid in seconds (\"1728000\")\n- \"xsrf.excludeMethods\": The methods that do not require XSRF protection (\"OPTIONS,GET\")\n- \"xsrf.cookieName\": The name of the XSRF protection cookie (\"XSRF-TOKEN\")\n- \"xsrf.headerName\": The name of the XSRF protection header (\"X-XSRF-TOKEN\")\n- \"ajaxOnly.excludeMethods\": The methods that do not require AJAX (\"OPTIONS,GET\")\n- \"ajaxOnly.headerName\": The name of the required header (\"X-Requested-With\")\n- \"ajaxOnly.headerValue\": The value of the required header (\"XMLHttpRequest\")\n- \"apiKeyAuth.mode\": Set to \"optional\" if you want to allow anonymous access (\"required\")\n- \"apiKeyAuth.header\": The name of the API key header (\"X-API-Key\")\n- \"apiKeyAuth.keys\": List of API keys that are valid (\"\")\n- \"apiKeyDbAuth.mode\": Set to \"optional\" if you want to allow anonymous access (\"required\")\n- \"apiKeyDbAuth.header\": The name of the API key header (\"X-API-Key\")\n- \"apiKeyDbAuth.usersTable\": The table that is used to store the users in (\"users\")\n- \"apiKeyDbAuth.apiKeyColumn\": The users table column that holds the API key (\"api_key\")\n- \"dbAuth.mode\": Set to \"optional\" if",
  "permissions": {
    "read": true,
    "write": false,
    "admin": false
  },
  "media_types": [
    "application/vnd.docker.container.image.v1+json"
  ],
  "content_types": [
    "image"
  ]
}