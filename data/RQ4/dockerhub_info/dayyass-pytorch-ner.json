{
  "user": "dayyass",
  "name": "pytorch-ner",
  "namespace": "dayyass",
  "repository_type": "image",
  "status": 1,
  "status_description": "active",
  "description": "Pipeline for training NER models using PyTorch.",
  "is_private": false,
  "is_automated": false,
  "can_edit": false,
  "star_count": 0,
  "pull_count": 9,
  "last_updated": "2021-10-15T06:58:25.273552Z",
  "date_registered": "2021-10-15T06:57:58.293081Z",
  "collaborator_count": 0,
  "affiliation": null,
  "hub_user": "dayyass",
  "has_starred": false,
  "full_description": "# Quick reference\n* **Maintained by**: [Dani El-Ayyass](https://github.com/dayyass) <dayyass@yandex.ru>\n* **Where to get help**: [the Docker Community Forums](https://forums.docker.com/), [the Docker Community Slack](https://dockr.ly/slack), or [Stack Overflow](https://stackoverflow.com/search?tab=newest&q=docker)\n\n# Supported tags and respective `Dockerfile` links\n* [`0.1.0`, `latest`](https://github.com/dayyass/pytorch-ner/blob/v0.1.0/Dockerfile)\n\n# Quick reference (cont.)\n* **Where to file issues**: https://github.com/dayyass/pytorch-ner/issues\n* **Source of this description**: https://github.com/dayyass/pytorch-ner#readme\n* **GitHub Repository**: https://github.com/dayyass/pytorch-ner\n\n# Named Entity Recognition (NER) with PyTorch\n[![tests](https://github.com/dayyass/pytorch-ner/actions/workflows/tests.yml/badge.svg)](https://github.com/dayyass/pytorch-ner/actions/workflows/tests.yml)\n[![linter](https://github.com/dayyass/pytorch-ner/actions/workflows/linter.yml/badge.svg)](https://github.com/dayyass/pytorch-ner/actions/workflows/linter.yml)\n[![codecov](https://codecov.io/gh/dayyass/pytorch-ner/branch/main/graph/badge.svg?token=WSB83O6GVV)](https://codecov.io/gh/dayyass/pytorch-ner)\n\n[![python 3.6](https://img.shields.io/badge/python-3.6-blue.svg)](https://github.com/dayyass/pytorch-ner#requirements)\n[![release (latest by date)](https://img.shields.io/github/v/release/dayyass/pytorch-ner)](https://github.com/dayyass/pytorch-ner/releases/latest)\n[![license](https://img.shields.io/github/license/dayyass/pytorch-ner?color=blue)](https://github.com/dayyass/pytorch-ner/blob/main/LICENSE)\n\n[![pre-commit](https://img.shields.io/badge/pre--commit-enabled-black)](https://github.com/dayyass/pytorch-ner/blob/main/.pre-commit-config.yaml)\n[![code style: black](https://img.shields.io/badge/code%20style-black-000000.svg)](https://github.com/psf/black)\n\n[![pypi version](https://img.shields.io/pypi/v/pytorch-ner)](https://pypi.org/project/pytorch-ner)\n[![pypi downloads](https://img.shields.io/pypi/dm/pytorch-ner)](https://pypi.org/project/pytorch-ner)\n\n## Named Entity Recognition (NER) with PyTorch\nPipeline for training **NER** models using **PyTorch**.\n\n**ONNX** export supported.\n\n## Usage\nInstead of writing custom code for specific NER task, you just need:\n1. install pipeline:\n```shell script\npip install pytorch-ner\n```\n2. run pipeline:\n- either in **terminal**:\n```shell script\npytorch-ner-train --path_to_config config.yaml\n```\n- or in **python**:\n```python3\nimport pytorch_ner\npytorch_ner.train(path_to_config=\"config.yaml\")\n```\n\n### Config\nThe user interface consists of only one file [**config.yaml**](https://github.com/dayyass/pytorch-ner/blob/main/config.yaml).<br/>\nChange it to create the desired configuration.\n\nDefault **config.yaml**:\n```yaml\ntorch:\n  device: 'cpu'\n  seed: 42\n\ndata:\n  train_data:\n    path: 'data/conll2003/train.txt'\n    sep: ' '\n    lower: true\n    verbose: true\n  valid_data:\n    path: 'data/conll2003/valid.txt'\n    sep: ' '\n    lower: true\n    verbose: true\n  test_data:\n    path: 'data/conll2003/test.txt'\n    sep: ' '\n    lower: true\n    verbose: true\n  token2idx:\n    min_count: 1\n    add_pad: true\n    add_unk: true\n\ndataloader:\n  preprocess: true\n  token_padding: '<PAD>'\n  label_padding: 'O'\n  percentile: 100\n  batch_size: 256\n\nmodel:\n  embedding:\n    embedding_dim: 128\n  rnn:\n    rnn_unit: LSTM  # GRU, RNN\n    hidden_size: 256\n    num_layers: 1\n    dropout: 0\n    bidirectional: true\n\noptimizer:\n  optimizer_type: Adam  # torch.optim\n  clip_grad_norm: 0.1\n  params:\n    lr: 0.001\n    weight_decay: 0\n    amsgrad: false\n\ntrain:\n  n_epoch: 10\n  verbose: true\n\nsave:\n  path_to_folder: 'models'\n  export_onnx: true\n```\n\n**NOTE**: to export trained model to **ONNX** use the following config parameter:\n```\nsave:\n  export_onnx: true\n```\n\n### Data Format\nPipeline works with text file containing separated tokens and labels on each line. Sentences are separated by empty line.\nLabels should already be in necessary format, e.g. IO, BIO, BILUO, ...\n\nExample:\n```\ntoken_11    label_11\ntoken_12    label_12\n\ntoken_21    label_21\ntoken_22    label_22\ntoken_23    label_23\n\n...\n```\n\n### Output\nAfter training the model, the pipeline will return the following files:\n- `model.pth` - pytorch NER model\n- `model.onnx` - onnx NER model (optional)\n- `token2idx.json` - mapping from token to its index\n- `label2idx.json` - mapping from label to its index\n- `config.yaml` - config that was used to train the model\n- `logging.txt` - logging file\n\n## Models\nList of implemented models:\n- [x] BiLTSM\n\n## Evaluation\nAll results are obtained on CoNLL-2003 [dataset](https://github.com/dayyass/pytorch-ner/tree/develop/data/conll2003). We didn't search the best parameters.\n\n| Model  | Train F1-weighted | Validation F1-weighted | Test F1-weighted |\n| ------ | ----------------- | ---------------------- | ---------------- |\n| BiLSTM | 0.968             | 0.928                  | 0.876            |\n\n## Requirements\nPython >= 3.6\n\n## Citation\nIf you use **pytorch_ner** in a scientific publication, we would appreciate references to the following BibTex entry:\n```bibtex\n@misc{dayyass2020ner,\n    author       = {El-Ayyass, Dani},\n    title        = {Pipeline for training NER models using PyTorch},\n    howpublished = {\\url{https://github.com/dayyass/pytorch_ner}},\n    year         = {2020}\n}\n```",
  "permissions": {
    "read": true,
    "write": false,
    "admin": false
  },
  "media_types": [
    "application/vnd.docker.container.image.v1+json"
  ],
  "content_types": [
    "image"
  ]
}