{
  "user": "meteogroup",
  "name": "concourse-ci",
  "namespace": "meteogroup",
  "repository_type": "image",
  "status": 1,
  "status_description": "active",
  "description": "A docker image for concourse using the standalone binaries.",
  "is_private": false,
  "is_automated": true,
  "can_edit": false,
  "star_count": 13,
  "pull_count": 236750,
  "last_updated": "2018-04-13T23:47:28.744646Z",
  "date_registered": "2016-04-11T10:40:39.549475Z",
  "collaborator_count": 0,
  "affiliation": null,
  "hub_user": "meteogroup",
  "has_starred": false,
  "full_description": "### Deprecation\n\nThe fine folks at concourse finally got around to to maintain a\n[docker image](https://concourse.ci/docker-repository.html) on their own. And\nit seems they've taken into account a few learnings from here. :)\n\nThis makes this repository obsolete, please migrate to the official image.\nTo ease transition this repository will follow upstream releases a bit further\nbefore ending maintenance.\n\nIt was fun, thanks everyone.\n\n\nConcourse CI docker image [![travis build](https://travis-ci.org/MeteoGroup/concourse-ci.svg)](https://travis-ci.org/MeteoGroup/concourse-ci)\n=========================\n\nA docker image for [concourse](https://concourse.ci/introduction.html) using\nthe [standalone distribution](https://concourse.ci/binaries.html).\n\nIt provides entry points for _concourse web_ as well as for _concourse worker_.\n\n\nTable of content\n----------------\n\n- **[Links](#links)**\n- **[Building](#building)**\n- **[Running](#running)**\n  + [Run _concourse web_](#run-concourse-web)\n  + [Run a _concourse worker_](#run-a-concourse-worker)\n  + [Run single node _concourse web/worker_](#run-single-node-concourse-webworker)\n- **[Test](#test)**\n- **[Contributions](#contributions)**\n- **[License](#license)**\n\n\nLinks\n-----\n\n- [Concourse home page](https://concourse.ci/introduction.html)\n- [Image on docker hub](https://hub.docker.com/r/meteogroup/concourse-ci/)\n- [Travis-CI build](https://travis-ci.org/MeteoGroup/concourse-ci)\n- [Source code repository](https://github.com/meteogroup/concourse-ci)\n\n\nBuilding\n--------\n\nJust run\n\n```bash\ndocker build -t <image tag> .\n```\n\n\nRunning\n-------\n\n### Run _concourse web_\n\nFor the default configuration just run\n\n```bash\ndocker run --entrypoint /concourse-web.sh meteogroup/concourse-ci\n```\n\nBy default all keys are generated. The public key for TSA is printed to\n`stdout` as well as the **private key** workers may use to register with TSA!\n\nIt is possible to mount a directory containing required keys for TSA into\n`/var/lib/concourse/keys`. The following files are looked up there:\n\n  - `tsa_key` will be used as private TSA host key\n  - `authorized_worker_keys` will be used to verify\n    workers. It will be reread each time a worker connects to the TSA.\n\n```bash\ndocker run --entrypoint /concourse-web.sh \\\n  -v /path/to/dir/containing/keys:/var/lib/concourse/keys \\\n  meteogroup/concourse-ci\n```\n\nTo allow sharing `/var/lib/concourse/keys` between _concourse web_ and\n_concourse worker_, private keys may be accessible by root only. They are\ncopied and made accessible to _concourse web_ which will be run as non-root\nuser.\n\nA single public key can be passed in the `CONCOURSE_WORKER_PUBKEY` environment\nvariable. If `/var/lib/concourse/keys` is writable by the container\n`authorized_worker_keys` will be created from that key and used instead.\nOtherwise the key in `CONCOURSE_WORKER_PUBKEY` is used as sole key to verify\nworkers.\n\nIf _concourse web_ is firewalled or run behind a proxy the external visible URL\ncan be configured by setting the `CONCOURSE_URL` environment variable.\n\n```bash\ndocker run --entrypoint /concourse-web.sh \\\n  --env CONCOURSE_URL=http://192.168.99.100:8080 \\\n  meteogroup/concourse-ci\n```\n\nThe default login is `concourse` with password `ci` . This can be changed by\nsetting the `CONCOURSE_LOGIN` and `CONCOURSE_PASSWORD` environment variables.\n\n```bash\ndocker run --entrypoint /concourse-web.sh \\\n  --env CONCOURSE_LOGIN=ci-user \\\n  --env CONCOURSE_PASSWORD=rumpelstiltskin \\\n  meteogroup/concourse-ci\n```\n\nAlternatively, you can configure GitHub OAuth authenticaion by setting the\n`CONCOURSE_GITHUB_AUTH_CLIENT_ID` and `CONCOURSE_GITHUB_AUTH_CLIENT_SECRET`\nenvironment variables, along with one or more of the\n`CONCOURSE_GITHUB_AUTH_ORGANIZATION`, `CONCOURSE_GITHUB_AUTH_TEAM`, and\n`CONCOURSE_GITHUB_AUTH_USER` variables. Setting these variables will cause the\ncontainer to ignore the `CONCOURSE_LOGIN` and `CONCOURSE_PASSWORD` variables.\n\n```bash\ndocker run --entrypoint /concourse-web.sh \\\n  --env CONCOURSE_GITHUB_AUTH_CLIENT_ID=b9c1a7f3895bd045b945 \\\n  --env CONCOURSE_GITHUB_AUTH_CLIENT_SECRET=1d9c379fcdfa6e1010293ed955274da27c3904c2 \\\n  --env CONCOURSE_GITHUB_AUTH_ORGANIZATION=my-org \\\n  meteogroup/concourse-ci\n```\n\nIf you want to expose a safe view of your pipelines to unauthenticated users,\nset the `CONCOURSE_PUBLICLY_VIEWABLE` environment variable. This is convenient\nfor open source projects.\n\n```bash\ndocker run --entrypoint /concourse-web.sh \\\n  --env CONCOURSE_PUBLICLY_VIEWABLE=true \\\n  meteogroup/concourse-ci\n```\n\nThe image comes with an internal postgres database (which will be lost when the\ncontainer is removed). To use an external postgres database set the\n`CONCOURSE_DATA_SOURCE` environment variable.\n\n```bash\ndocker run --entrypoint /concourse-web.sh \\\n  --env CONCOURSE_DATA_SOURCE=postgres://pg-user:pg-password@192.168.99.100 \\\n  meteogroup/concourse-ci\n```\n\nThe TSA private key may be passed in the `CONCOURSE_TSA_KEY` environment\nvariable. In that case `/var/lib/concourse/keys/tsa_key` is ignored\n\nThe session signing key may be passed in the `CONCOURSE_SESSION_SIGNING_KEY`\nenvironment variable. In that case `/var/lib/concourse/keys/session_signing_key`\nis ignored\n\n```bash\ndocker run --entrypoint /concourse-web.sh \\\n  --env CONCOURSE_TSA_KEY=\"<private TSA key>\" \\\n  --env CONCOURSE_SESSION_SIGNING_KEY=\"<session signing key>\" \\\n  metegroup/concourse-ci\n```\n\n\n### Run a _concourse worker_\n\nTo run a worker use\n\n```bash\ndocker run --entrypoint /concourse-worker.sh --privileged \\\n  meteogroup/concourse-ci\n```\n\nAs concourse worker is running containers for builds it is essential to run it\nin _privileged_ mode and have a none layering filesystem mounted to\n`/var/lib/concourse/work`. _Your builds will break and/or hang indefinitely\notherwise._\n\nBy default the TSA public key will be fetched from the TSA server during\nstartup and a key pair is generated for the worker. The public worker key is\nthen printed to `stdout` and has to be added to the authorized worker keys for\nTSA.\n\nThe TSA host and port can be configured by setting the `CONCOURSE_TSA_HOST` and\n`CONCOURSE_TSA_PORT` environment variables. By default the worker tries to\nregister at `0.0.0.0:2222`.\n\n```bash\ndocker run --entrypoint /concourse-worker.sh \\\n  --privileged --v /var/lib/concourse/work \\\n  --env CONCOURSE_TSA_HOST=192.168.99.100 \\\n  --env CONCOURSE_TSA_PORT=2222 \\\n  meteogroup/concourse-ci\n```\n\nIt is possible to mount a directory containing required keys for the worker\ninto `/var/lib/concourse/keys`. The following files are looked up there:\n\n  - `tsa_key.pub` will be used as public TSA host key\n  - `worker_key` will be used as the workers private\n    host key.\n\nIf `/var/lib/concourse/keys` is writable by the container the workers public\nkey is appended `authorized_worker_keys` (which will be created if it not\nexists). After keys are setup `/var/lib/concourse/keys` will be unmounted from\nthe container to protect private keys.\n\n```bash\ndocker run --entrypoint /concourse-worker.sh \\\n  --privileged --v /var/lib/concourse/work \\\n  -v /path/to/dir/containing/keys:/var/lib/concourse/keys \\\n  meteogroup/concourse-ci\n```\n\nThe workers private key may be passed in the `CONCOURSE_WORKER_KEY` environment\nvariable. In that case `/var/lib/concourse/keys/worker_key` is ignored.\n\nThe public TSA host key can be passed in the `CONCOURSE_TSA_PUBKEY` environment\nvariable. In that case `/var/lib/concourse/keys/tsa_key.pub` is ignored.\n\n```bash\ndocker run --entrypoint /concourse-worker.sh \\\n  --privileged --v /var/lib/concourse/work \\\n  --env CONCOURSE_WORKER_KEY=\"<worker's private key>\" \\\n  --env CONCOURSE_TSA_PUBKEY=\"<public TSA key>\" \\\n  meteogroup/concourse-ci\n```\n\n\n### Run single node _concourse web/worker_\n\nFor your convenience there is a `docker-compose.yml` file to stand up a ready\nto use _concourse web/worker_ deployment, no key management involved. Just run\n\n```bash\ndocker-compose up\n```\n\nIf _concourse web_ is firewalled or run behind a proxy the external visible URL\ncan be configured by setting the `CONCOURSE_URL` environment variable.\n\n```bash\nCONCOURSE_URL=http://192.168.99.100:8080 docker-compose up\n```\n\nAll authentication related options can be set as well using the respective\nenvironment variables (`CONCOURSE_GITHUB_AUTH_*`, `CONCOURSE_LOGIN`,\n`CONCOURSE_PASSWORD` and `CONCOURSE_PUBLICLY_VIEWABLE`). Please see [Run\n_concourse web_](#run-concourse-web) for further details.\n\nTest\n----\n\nTo test worker and CI server just run\n\n```bash\n./test.sh\n```\n\nThis will start a busybox docker container, download `fly` and goes through the\nfollowing steps:\n\n  - create a pipeline using a slightly modified version of the\n    [_Hello, world!_ example](https://concourse.ci/hello-world.html).\n  - Unpause the pipeline.\n  - Trigger the job.\n  - Wait for the job to complete.\n  - Delete the pipeline.\n  - Check the job output against the expected _Hello, world!_ output.\n\nBy default the script tries to connect to `http://0.0.0.0:8080` using\n`concourse`/`ci` as username/password. That can be changed by setting the\n`CONCOURSE_HOST`, `CONCOURSE_PORT`, `CONCOURSE_LOGIN` and `CONCOURSE_PASSWORD`\nenvironment variables for the `test.sh` script.\n\n**Be aware that username and password will be echoed in the script output!**\n\nIf _concourse web_ is running behind a proxy and is not reachable at the hosts\nroot path you have to set the `CONCOURSE_URL` environment variable to the\nexternally reachable URL of _concourse web_. In that case username and password\nhave to be repeated in the authority part of that URL, otherwise the\ntest script will not be able to download the `fly` binary.\n\nConnecting to custom host/port:\n```bash\nCONCOURSE_HOST=192.168.99.100 CONCOURSE_PORT=8080 test.sh\n```\n\nUsing custom username/password:\n```bash\nCONCOURSE_LOGIN=ci-user CONCOURSE_PASSWORD=rumpelstiltskin test.sh\n```\n\nConnecting to concourse behind a proxy:\n```bash\nCONCOURSE_URL=https://ci-user:rumpelstiltskin@my-ci/concourse \\\n  CONCOURSE_LOGIN=ci-user CONCOURSE_PASSWORD=rumpelstiltskin test.sh\n```\n\n\nContributions\n-------------\n\n- [Joe Eli McIlvain](http://github.com/jemc) \\<joe.eli.mac@gmail.com>:\n  support for GitHub authentication and publicly visible pipelines.\n- [Sergio Ballesteros](http://github.com/ese):\n  support for dumb-init, ssh keys from environment\n- [Kurt McAlpine](https://github.com/kurtmc) \\<kurt@linux.com>:\n  documentation fixes\n- [Takeshi Morikawa](https://github.com/morikat):\n  documentation fixes\n  \n\nLicense\n-------\n\nConcourse – Copyright © 2014-2016 Alex Suraci & Chris Brown, licensed under\n[Apache License 2.0](http://www.apache.org/licenses/LICENSE-2.0)\n\nCopyright © 2016 MeteoGroup Deutschland GmbH\n\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\nany file from this repository except in compliance with the License. You may\nobtain a copy of the License at\n\n  <http://www.apache.org/licenses/LICENSE-2.0>\n\nUnless required by applicable law or agreed to in writing, software distributed\nunder the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\nCONDITIONS OF ANY KIND, either express or implied. See the License for the\nspecific language governing permissions and limitations under the License.\n",
  "permissions": {
    "read": true,
    "write": false,
    "admin": false
  },
  "media_types": [
    "application/vnd.docker.distribution.manifest.v1+prettyjws",
    "application/vnd.docker.container.image.v1+json"
  ],
  "content_types": [
    "image"
  ]
}