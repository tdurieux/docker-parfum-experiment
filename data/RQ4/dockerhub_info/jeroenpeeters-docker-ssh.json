{
  "user": "jeroenpeeters",
  "name": "docker-ssh",
  "namespace": "jeroenpeeters",
  "repository_type": "image",
  "status": 1,
  "status_description": "active",
  "description": "SSH Server for Docker containers ~ Because every container should be accessible",
  "is_private": false,
  "is_automated": true,
  "can_edit": false,
  "star_count": 40,
  "pull_count": 1268950,
  "last_updated": "2017-11-28T10:31:10.447603Z",
  "date_registered": "2015-10-03T09:19:45.82139Z",
  "collaborator_count": 0,
  "affiliation": null,
  "hub_user": "jeroenpeeters",
  "has_starred": false,
  "full_description": "# Docker-SSH [![Docker Stars](https://img.shields.io/docker/stars/jeroenpeeters/docker-ssh.svg?style=flat-square)](https://hub.docker.com/r/jeroenpeeters/docker-ssh/) [![Docker Stars](https://img.shields.io/docker/pulls/jeroenpeeters/docker-ssh.svg?style=flat-square)](https://hub.docker.com/r/jeroenpeeters/docker-ssh/)\nSSH Server for Docker containers  ~ Because every container should be accessible.\n\nWant to SSH into your container right away? Here you go:\n\n    $ docker run -d -p 2222:22 \\\n      -v /var/run/docker.sock:/var/run/docker.sock \\\n      -e FILTERS={\\\"name\\\":[\\\"^/my-container$\\\"]} -e AUTH_MECHANISM=noAuth \\\n      jeroenpeeters/docker-ssh\n\n    $ ssh -p 2222 localhost\n\n## What is it?\nDocker-SSH is an SSH server implementation that transparently bridges `docker exec`\nwith the SSH session. It implements a regular SSH server, a web terminal and a web API.\n\n# Index\n\n- [Features & Todo](#features--todo)\n- [Add SSH capabilities to any container!](#add-ssh-capabilities-to-any-container)\n- [Web Terminal](#web-terminal)\n- [User Authentication](#user-authentication)\n- [Server Identity and Security](#server-identity-and-security)\n- [Arguments](#arguments)\n- [Container Requirements](#container-requirements)\n- [Troubleshooting](#troubleshooting)\n\n# Preamble\nMany reasons exist to SSH to a process running inside a container. As containers **SHOULD** be limited to run\none main/init process there is often no clean way to get access. One could of course SSH to a Docker host and\naccess the container with *docker exec*. Another way is to start an SSH server as a secondary process. Not only does\nthis defeat the idea of one process per container, it is also a cumbersome approach when using images from the Docker Hub since they often don't (and shouldn't) contain an SSH server.\n\nDocker-SSH adds SSH capabilities to any container in a compositional way. It implements an SSH server that transparently\nbridges the SSH session with docker exec. The requirements for this to function properly are:\n\n- The container has a shell environment installed (e.g. `bash` or `sh`).\n- The Docker socket is mapped into the container, this lets the container access the Docker Engine.\n\n# Features & Todo\nBelow is a list of both implemented features and planned features. Send me a\nmessage if you whish to contribute to this project.\n- [x] Interactive shell\n- [x] Execute single command\n- [x] HTTP API\n- [x] Web terminal\n- [x] Simple user authentication; one user/password\n- [x] Authenticate users by username and password\n- [x] Authenticate users by username and public key\n- [x] Run commands as specific user\n- [x] Use Docker filter to target a container\n- [ ] Customize the MOTD\n- [ ] Secure copy implementation (SCP)\n- [ ] Secure FTP implementation (SFTP)\n- [ ] Access multiple containers\n\n# Add SSH capabilities to any container!\nLet's assume you have a running container with name 'web-server1'. Run the following command to start Docker-SSH:\n\n    docker run -e FILTERS={\\\"name\\\":[\\\"^/web-server-1$\\\"]} -e AUTH_MECHANISM=noAuth \\\n      --name sshd-web-server1 -p 2222:22  --rm \\\n      -v /var/run/docker.sock:/var/run/docker.sock \\\n      jeroenpeeters/docker-ssh\n\nThe SSH server in this example is now running in its own container named 'sshd-web-server1' and exposes the SSH\nservice on port 2222.\n\nNow you can access the container through SSH by using your favorite client. The output will look similar to\n\n    ssh someuser@localhost -p 2222\n    someuser@localhost's password: <PASSWORD>\n\n    ###############################################################\n    ## Docker SSH ~ Because every container should be accessible ##\n    ###############################################################\n    ## container | web-server1                                   ##\n    ###############################################################\n\n    /opt/nginx $\n\n# Web terminal\n\nDocker-SSH also implements a web terminal for convenience. The web terminal allows you to connect to your shell using a browser. Below is a screenshot of the web terminal in action.\n\n![Docker-SSH Web Terminal](https://raw.githubusercontent.com/jeroenpeeters/docker-ssh/master/docker-web-terminal.png)\n\nThe web terminal is enabled by default, and exposed on port 8022. To disable the web terminal set `-e HTTP_ENABLED=false`.\n\n# Web API\nThe web terminal uses the web API to communicate with the shell session. The API can be used by third party application as well.\n\n## Starting a session\nA new session can be obtained by calling the `/api/v1/terminal/stream` enpoint. This\ncall creates a new session and returns a stream of HTML5 Server-Sent Events.\nThere are two events: 1. connectionId, 2. data. The connectionId event contains a unique id for this session. This id must be used to send commands to the session. The data event contains serialized-string-escaped terminal data. When you close the stream, the session ends.\n\n    curl http://localhost:8022/api/v1/terminal/stream\n\n## Sending commands to a session\nTo send commands to a session you use the connectionId obtained when starting the\nsession. Use the endpoint `/api/v1/terminal/send/:sessionId` to send commands to the\nterminal session. It must be a post request that does a form submit with a `data` parameter populated with the command you whish to execute. Don't forget to send an enter character, otherwise it would not execute. Remember, this is a terminal!\n\n    curl -X POST http://localhost:8022/api/v1/terminal/send/122dbd35-d51d-4bc3-80c8-787d82370bee -d $'data=ls -al\\n'\n\n## Resizing a terminalId\nThe terminal can be resized by posting to endpoint `/api/v1/terminal/resize-window/:terminalId`. The endpoint accepts two parameters, rows and cols.\n\n    curl -X POST http://localhost:8022/api/v1/terminal/resize-window/2aaff6d2-b0e9-4e42-99c3-a80474b1c32f -d 'rows=10&cols=20'\n\n# User Authentication\nDocker-SSH has support for multiple authentication mechanisms. The following\ntable lists the implemented and planned authentication mechanisms\n\nAUTH_MECHANISM    | Implemented | Description\n------------------|-------------|--------------\nnoAuth            | yes         | No authentication is performed, enter any user/password combination to logon\nsimpleAuth        | yes         | Authenticate a predefined user/password, supports one user\nmultiUser         | yes         | Authenticate a user according to a predefined lists of users and passwords\npublicKey         | yes         | Public key authentication\n\n## noAuth\nNo authentication is performed. Any user/password combination is accepted by the server.\nUseful for testing, or in closed network environments such as corporate networks with separated VLAN's.\nThis mechanism is nevertheless **discouraged** and should be used with care! The use of this\nauthentication mechanism will create an error entry in the log.\n\n## simpleAuth\nSupports the authentication of a single user with password. Set `AUTH_MECHANISM=simpleAuth`\nto enable this authentication mechanism. The username and password is configured\nby setting `AUTH_USER` and `AUTH_PASSWORD`.\n\n    $ docker run -d -p 2222:22 \\\n      -v /var/run/docker.sock:/var/run/docker.sock \\\n      -e FILTERS={\\\"name\\\":[\\\"^/my-container$\\\"]} -e AUTH_MECHANISM=simpleAuth \\\n      -e AUTH_USER=jeroen -e AUTH_PASSWORD=1234 \\\n      jeroenpeeters/docker-ssh\n\n    $ ssh -p 2222 jeroen@localhost\n    $ jeroen@localhost's password: ****\n\n## multiUser\nSupports the authentication of a user against a list of user:password tuples.\nSet `AUTH_MECHANISM=multiUser` to enable this authentication mechanism.\nThe username:password tuples are configured by setting `AUTH_TUPLES`.\nIt is a single string with semicolon (;) separated user:password pairs.\n\n    $ docker run -d -p 2222:22 \\\n      -v /var/run/docker.sock:/var/run/docker.sock \\\n      -e FILTERS={\\\"name\\\":[\\\"^/my-container$\\\"]} -e AUTH_MECHANISM=multiUser \\\n      -e AUTH_TUPLES=\"jeroen:thefather;luke:theforce\" \\\n      jeroenpeeters/docker-ssh\n\n    $ ssh -p 2222 luke@localhost\n    $ luke@localhost's password: ****\n\n## publicKey\nSupports the authentication of a user against an authorized_keys file containing a list of public keys.\nSet `AUTH_MECHANISM=publicKey` to enable this authentication mechanism.\nThe name of the authorized_keys file is configured by setting `AUTHORIZED_KEYS`.\n\n    $ cat ~/.ssh/id_rsa.pub > authorized_keys\n    $ docker run -d -p 2222:22 \\\n      -v /var/run/docker.sock:/var/run/docker.sock \\\n      -v ./authorized_keys:/authorized_keys\n      -e FILTERS={\\\"name\\\":[\\\"^/my-container$\\\"]} -e AUTH_MECHANISM=publicKey \\\n      -e AUTHORIZED_KEYS=/authorized_keys \\\n      jeroenpeeters/docker-ssh\n\n    $ ssh -p 2222 luke@localhost\n\n# SHELL_USER\nSSH authentication is provided by Docker-SSH and runs independently from the\ncontainer. Therefore the shell user and authentication user also operate independently.\nBy default the shell user will be the user from the USER directive in the Docker Image.\nIf you whish to override this you can specify `SHELL_USER` as an environment variable\nto Docker-SSH. **Note: This user MUST already exist in the container, otherwise Docker-SSH will fail.**\n\n# Docker Filter\nDocker-SSH uses the filter argument of `docker ps` to target a specific container. You should make sure\nthat the filter matches the intended target container. If the filter matches multiple containers, the first\none will be used. See [https://docs.docker.com/engine/api/v1.33/#operation/ContainerList](https://docs.docker.com/engine/api/v1.33/#operation/ContainerList). For backwards compatibility the `CONTAINER` \nenvironment variable passed to Docker-SSH is now implemented as a filter on container name.\n\nPlease note that the name filter does a partial match. You should use a regular expression to exactly match a container name.\nSee one of the examples above for a demonstration of an exact name match using the Docker filters. \n\n\n\n# Server Identity and Security\nThe SSH server needs an RSA/EC private key in order to secure the connection and identify itself to clients.\nThe Docker-SSH container comes with a default RSA key that will be used. If you want, you can provide your own\nkey. Simply provide a key file as a volume to the container and set the *KEYPATH* argument of the container.\nExample: `-v /path/to/my/key:/my_key -e KEYPATH=/my_key`. It is also possible to overwrite the existing key file.\nIn that case you can omit the `KEYPATH` argument. Example: `-v /path/to/my/key:/usr/src/app/id_rsa.pub`\n\n# Arguments\nArguments to Docker-SSH are passed as Docker environment variables. Docker-SSH needs at least the *CONTAINER*\nargument in order to know for which container to provide SSH. Mounting the Docker socket into the SSH container is mandatory since Docker-SSH internally uses *docker exec* to create a shell session.\n\nArgument       | Default  | Description\n---------------|----------|------------------------------------------------------\nFILTER         | None     | Docker filter to target a container\nCONTAINER      | None     | *name* of a running container. **deprecated**, use FILTER\nCONTAINER_SHELL| bash     | path to a shell.\nAUTH_MECHANISM | None     | name of the authentication mechanism, see [User Authentication](#user-authentication)\nKEYPATH        | ./id_rsa | path to a private key to use as server identity\nPORT           | 22       | ssh server listens on this port\nHTTP_ENABLED   | true     | enable/disable the web terminal\nHTTP_PORT      | 8022     | web terminal listens on this port\nSHELL_USER     | root     | Run commands as this user *(Note: independent from authentication user)*\n\n# Credits\nI couldn't have created Docker-SSH without the following great Node packages! Many thanks go to the authors of:\n\n- [SSH2](https://github.com/mscdex/ssh2)\n- [Dockerode](https://github.com/apocas/dockerode)\n\n \n",
  "permissions": {
    "read": true,
    "write": false,
    "admin": false
  },
  "media_types": [
    "application/vnd.docker.distribution.manifest.v1+prettyjws",
    "application/vnd.docker.container.image.v1+json"
  ],
  "content_types": [
    "image"
  ]
}