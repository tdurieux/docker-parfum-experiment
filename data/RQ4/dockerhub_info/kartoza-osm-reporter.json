{
  "user": "kartoza",
  "name": "osm-reporter",
  "namespace": "kartoza",
  "repository_type": "image",
  "status": 1,
  "status_description": "active",
  "description": "",
  "is_private": false,
  "is_automated": true,
  "can_edit": false,
  "star_count": 0,
  "pull_count": 1546,
  "last_updated": "2019-08-24T07:51:30.837683Z",
  "date_registered": "2015-01-08T11:37:55.522361Z",
  "collaborator_count": 0,
  "affiliation": null,
  "hub_user": "kartoza",
  "has_starred": false,
  "full_description": "[![Stories in Ready](https://badge.waffle.io/timlinux/osm-reporter.png?label=ready)](https://waffle.io/timlinux/osm-reporter)\n\n# A simple tool for getting stats for an openstreetmap area.\n\nSee http://linfiniti.com/2012/12/holiday-openstreetmap-project-for-swellendam/\n\nYou can also use this tool to download OSM shapefiles with a nice QGIS canned\nstyle for OSM roads and buildings for the area of your choosing.\n\n# Install\n\n# Install via the Kartoza Rancher Catalogue\n\nThe easiest way to install is via our [Rancher Catalogue](https://github.com/kartoza/kartoza-rancher-catalogue). When you install Rancher on your host, add our catalogue, you will see osm-reporter in the list of available applications.\n\n\n# Docker install\n\nThis will install and setup a postgis (kartoza/postgis) and an osm-reporter\n(kartoza/osm-reporter) container and then run the application with the source\ncode from osm-reporter mounted into the osm-reporter container.\n\n```\nsudo apt-get install python-pip git\nsudo pip install docker-compose\ngit clone git://github.com/kartoza/osm-reporter.git\ncd osm-reporter\n# \"make up\" is an alias for the following command\ndocker-compose up -d web\n```\n\nIf you like you can change the port number in the docker compose and run the site behind an nginx reverse proxy (or apache2 if you prefer) pointing to the running container. e.g. check `deployment/nginx/osm.inasafe.org.nginx.conf`:\n\n**Note:** See our troubleshooting section below if running on docker.\n\n# Manual Install for deployment\n\nPrerequisites:\n\n    sudo apt-get install osm2pgsql postgis\n\nOr under MacOS:\n\n    brew install osm2pgsql\n\nIf you install Postgres9.4.app you will get ``pgsql2shp`` on MacOS.\n\nEnsure that the above binaries are in your path. If running on MacOS you\nwill need to ensure that ``/Applications/Postgres94.app/Contents/MacOS/bin/``\nis in the path of the user running the server.\n\nYou should also give the process that osm-reporter runs as createdb rights\n(needed to support the shape downloading feature). You should also have a\npostgis template named 'template_postgis' available on your system. Consult a\npostgis tutorial online to see how this is done. An example of setting this up\nunder MacOS is provided below:\n\n    export PATH=$PATH:/Applications/Postgres.app/Contents/Versions/9.4/bin/\n    psql\n\nNow execute the following commands to create the template_postgis database:\n\n    create database template_postgis encoding 'UTF8' TEMPLATE template0;\n    update pg_database set datistemplate=true where datname='template_postgis';\n\n\nNow execute the following bash commands to load the required legacy postgis\nsupport:\n\n    psql template_postgis < \"create extension postgis;\"\n    psql template_postgis < /Applications/Postgres.app/Contents/Versions/9.4/share/postgresql/contrib/postgis-2.1/legacy_minimal.sql\n    psql template_postgis < /Applications/Postgres.app/Contents/Versions/9.4/share/postgresql/contrib/postgis-2.1/legacy_gist.sql\n\n\n\nFirst clone:\n\n    cd /home/web\n    git clone git://github.com/timlinux/osm-reporter.git\n\nThen setup a venv (you may need to adjust the path to your python3\nexecutable):\n\n    cd osm-reporter\n    virtualenv -p /usr/local/bin/python3.6 venv\n    source venv/bin/activate\n    pip3 install -r requirements.txt\n\nThen deploy under apache mod_wsgi:\n\n    cd apache\n    cp osm-reporter.apache.conf.templ osm-reporter.apache.conf\n\nModify the contents of osm-reporter.apache.conf to suite your installation. Then do :\n\n    sudo apt-get install libapache2-mod-wsgi\n    cd /etc/apache/sites-available\n    sudo ln -s /home/web/osm-reporter/apache/osm-reporter.apache.conf .\n    sudo a2ensite osm-reporter.apache.conf\n\nThe default configuration assumes a user named 'osm-reporter' exists on your\nsystem that the wsgi process will run under. If you wish to follow this\nconvention you should create the user:\n\n    sudo useradd osm-reporter\n\nAnd also give that user a database account (needed for the shape download\nfeature) and database create permissions:\n\n    createuser osm-reporter\n    Shall the new role be a superuser? (y/n) n\n    Shall the new role be allowed to create databases? (y/n) y\n    Shall the new role be allowed to create more new roles? (y/n) n\n\nIf deploying locally you can leave the apache conf file mostly unchanged and\nadd this to your /etc/hosts file:\n\n    127.0.0.1       osm-reporter.localhost\n\nNext restart apache:\n\n    sudo service apache2 restart\n\nNow test - open chrome and visit: http://osm-reporter.localhost\n\n# Manual install for development\n\nFollow the install above and stop after setting up a venv.\nYou don't need to configure apache, there is a lightweight development web server.\nYou can run it:\n\n    python runserver.py\n\nand then visit http://127.0.0.1:5000/\n\n*Note*: If running under PyCharm on MacOS, ensure that your run configuration\nincludes the following:\n\n* *Script:* ``/Users/timlinux/dev/python/osm-reporter/runserver.py``\n* *Environment:* ``PATH=$PATH:/Applications/Postgres.app/Contents/Versions/9.4/bin/;PYTHONUNBUFFERED=1``\n* *Working directory:* ``/Users/timlinux/dev/python/osm-reporter/``\n\n(Update these paths as needed to match your system)\n\n# Logging\n\nOSM-Reporter will log requests as geojson files - one file per request.\nThe attributes of each geojson file will contain the following:\n\n* feature_type (building, roads etc.)\n* qgis_version\n* inasafe_version (if applicable)\n* year / month / day / hour of request\n* bounding box of request as a GeoJSON geometry\n\nYou can use [geojson-merge](https://github.com/mapbox/geojson-merge) to\ncombine these into a single file (e.g. for use in QGIS). We assume you\nhave npm installed):\n\n```\nnpm install --upgrade -g @mapbox/geojson-merge\ngeojson-merge 2017**.geojson > combined.geojson\n```\n\nWhere the above example would merge all log files from 2017 into a\nsingle log file.\n\n# Config\n\nYou can optionally define a 'config' python module to override the default\nbehaviour of *OSM-Reporter*.\n\nYou can create the python module wherever you want, and then you will need to add\nthe environment var `REPORTER_CONFIG_MODULE` to make `reporter` aware of\nit. For example:\n\n    export REPORTER_CONFIG_MODULE=\"path.to.the.module\"\n\nThen you can override the config properties to fit your needs. Note that you\ncan override only the properties you need to, the others will fallback to\ndefault values. For inspiration, you can have a look at\n:file:`reporter/config/default.py`\n\n**Available config**\n\n\nCREW:\n\n    (list) valid OSM users names of people actively working on your data\n        gathering project. When set, an additional tag will be added\n        in the user profile areas to indicate those who are crew members.\n\nBBOX:\n\n    (str) default bbox to use for the map and the stats;\n        format is: \"{SW_lng},{SW_lat},{NE_lng},{NE_lat}\n\nDISPLAY_UPDATE_CONTROL:\n\n    (bool) either to display or not the \"update stats\" button on the map\n\nCACHE_DIR:\n\n    (str) path to a dir where to cache the OSM files used by the backend\n\nLOG_DIR:\n\n    (str) path to a dir where to store request logs in geojson format\n\nTAG_NAMES: (**TODO - verify if this is actually used.**)\n\n    (list) tag names available for stats (default: ['building', 'highway'])\n\nOSM2PGSQL_OPTIONS :\n    (str) options for the osm2pgsql command line\n\n**Setting config using environment variables**\n\nAll of the above configuration options can also be managed by\nsetting them as environment variables. e.g.\n\n```\nCREW=timlinux,gustry python runserver.py\n```\n\nWould run the application with a specific list of users in crew.\n\n\n# Osm2pgsql\n\nOn some computers with less RAM than servers, you may adapt the import into postgis with osm2pgsql.\nFor instance in your 'config' python module above :\n\n    OSM2PGSQL_OPTIONS = '--cache-strategy sparse -C 1000'\n\n# Tests and QA\n\nThere is a test suite available, you can run it using nose e.g.:\n\n    PYTHONPATH=`pwd`/reporter:`pwd`:${PYTHONPATH} nosetests -v --with-id \\\n    --with-xcoverage --with-xunit --verbose --cover-package=reporter reporter\n\n## On MacOS within pycharm:\n\nAssumptions:\n\n* You have chrome installed\n* You have brew installed\n* You have docker installed\n\n## Install postgis in brew\n\nYou need this to have the shp2pgsql and psql command line tools\navailable on your system.\n\nbrew install postgis\n\n\n### Run postgis in docker\n\nFirst pull and run our postgis image from docker:\n\n    docker run --name \"osm-reporter-postgis\" -p 5433:5432 -d -t kartoza/postgis\n\n\nThis will create a dedicated instance of postgis we can test against.\nWhen you are done using it, you can stop or kill it using docker e.g.\n\n    docker kill osm-reporter-postgis\n\n\n### Selenium\n\nFor selenium tests you need to install chromedriver:\n\n    brew install chromedriver\n\nAnd ensure that the chromedriver executable is in your path:\n\n    export PATH=$PATH:/usr/local/bin/chromedriver\n\n(If you are using pycharm you could add this path to your test runner\nconfiguration.)\n\nBefore you run the tests, be you may need to launch the chromedriver:\n\n    chromedriver\n\nBrew installation of chromedriver will also give you notes on how to\nrun this via launchd if you do not feel inclined to start chromedriver\neach time.\n\n\n### Running tests from command line\n\n    export PYTHONPATH=`pwd`/reporter:`pwd`:$PYTHONPATH:venv/lib/python2.7/site-packages/; \\\n    nosetests -v --with-id  --with-xunit --verbose --cover-package=reporter reporter\n\n## Running tests from pycharm\n\nCreate a new test configuration by right clicking on the test directory\nand clicking 'Run unit tests'. After the tests probably fail, use this\nmenu to edit the configuration: Run -> Edit configurations. Now choose\ntest configuration and set the following environment variables.\n\n* **PGHOST:** - localhost\n* **PGPORT:** - 5433\n* **PGUSER:** - docker\n* **PGPASSWORD:** - docker\n* **Include parent environment variables:** - Uncheck this option\n\nApply your changes then rerun the tests. All tests should pass now.\n\n## Using Docker\n\n    docker-compose build test\n    docker-compose run test\n\n## In travis\n\nSee the .travis file for travis specific info. Note that selenium based\nfrontend testing is currently disabled in travis via the ON_TRAVIS\nenvironment variable. You can use this variable to disable selenium\ntests on your desktop too if needed.\n\n\n# Continuous integration\n\n* Current test status master: [![Build Status](https://travis-ci.org/kartoza/osm-reporter.svg?branch=master)](https://travis-ci.org/kartoza/osm-reporter) and\n[![Code Health](https://landscape.io/github/kartoza/osm-reporter/master/landscape.svg?style=flat)](https://landscape.io/github/kartoza/osm-reporter/master)\n\n* Current test status develop: [![Build Status](https://travis-ci.org/kartoza/osm-reporter.svg?branch=develop)](https://travis-ci.org/kartoza/osm-reporter) and\n[![Code Health](https://landscape.io/github/kartoza/osm-reporter/develop/landscape.svg?style=flat)](https://landscape.io/github/kartoza/osm-reporter/develop)\n\n# Local file instead of Overpass API\n\n* Download PBF file from the internet\n* Rename it `data.pbf` and put it in the root folder `osm-reporter/reporter/resources/pbf/`.\n* OSM-Reporter will now skip Overpass and use this local OSM file.\nBe careful to download data which are included in your PBF file. The BBOX parameter will not be parsed.\n\n# Sentry\n\nSentry is a service that collects exceptions and displays aggregate reports\nfor them. You can view the sentry project we have running for osm-reporter\nhere: http://sentry.kartoza.com/osm-reporter/\n\n# Troubleshooting\n\n\n**Issue:** I deployed under docker and it seems my disk is filling up with the container.\n\n**Answer:** Although the application is stateless, if keeps lots of logs. If your deployment gets lots of traffic those logs in docker can consume lots of disk space. As a short term fix you can simple remove the container and redeploy:\n\n```\nroot@osm ~/osm-reporter # docker-compose kill\nKilling osmreporter_web ... done\nKilling osmreporter_db ... done\nroot@osm ~/osm-reporter # docker-compose rm\nGoing to remove osmreporter_web, osmreporter_db\nAre you sure? [yN] y\nRemoving osmreporter_web ... done\nRemoving osmreporter_db ... done\nroot@osm ~/osm-reporter # df -h\nFilesystem      Size  Used Avail Use% Mounted on\nudev            3.9G     0  3.9G   0% /dev\ntmpfs           799M   84M  716M  11% /run\n/dev/sda1       188G  5.3G  173G   3% /\ntmpfs           3.9G   80K  3.9G   1% /dev/shm\ntmpfs           5.0M     0  5.0M   0% /run/lock\ntmpfs           3.9G     0  3.9G   0% /sys/fs/cgroup\ntmpfs           799M     0  799M   0% /run/user/0\nroot@osm ~/osm-reporter # docker-compose up -d web\n```\n\n\n\n\n# Credits\n\nTim Sutton, Etienne Trimaille & Yohan Boniface\n",
  "permissions": {
    "read": true,
    "write": false,
    "admin": false
  },
  "media_types": [
    "application/vnd.docker.container.image.v1+json"
  ],
  "content_types": [
    "image"
  ]
}