{
  "user": "lpenz",
  "name": "ghaction-cmake",
  "namespace": "lpenz",
  "repository_type": "image",
  "status": 1,
  "status_description": "active",
  "description": "Github action for projects that use cmake",
  "is_private": false,
  "is_automated": false,
  "can_edit": false,
  "star_count": 0,
  "pull_count": 30141,
  "last_updated": "2022-11-13T00:02:41.228666Z",
  "date_registered": "2019-09-14T18:15:24.481215Z",
  "collaborator_count": 0,
  "affiliation": null,
  "hub_user": "lpenz",
  "has_starred": false,
  "full_description": "[![marketplace](https://img.shields.io/badge/marketplace-cmake--swiss--army--knife-blue?logo=github)](https://github.com/marketplace/actions/cmake-swiss-army-knife)\n[![CI](https://github.com/lpenz/ghaction-cmake/workflows/CI/badge.svg)](https://github.com/lpenz/ghaction-cmake/actions)\n[![github](https://img.shields.io/github/v/release/lpenz/ghaction-cmake?include_prereleases&label=release&logo=github)](https://github.com/lpenz/ghaction-cmake/releases)\n[![docker](https://img.shields.io/docker/v/lpenz/ghaction-cmake?label=release&logo=docker&sort=semver)](https://hub.docker.com/repository/docker/lpenz/ghaction-cmake)\n\n\n# ghaction-cmake\n\n**ghaction-cmake** is a github action for projects that\nuse [cmake](https://cmake.org/). By default, it builds, tests and\ninstalls the project - but it can as easily run linters, tests with\ncoverage, valgrind or sanitizers, by using [presets](#preset).\n\n\n## Phases\n\n*ghaction-cmake* runs in phases:\n- *setup*: optionally install dependencies and go to a specified\n  directory.\n- *cmake*: run cmake in an empty directory, pointing to the source\n  directory, with all other arguments appended. This guarantees that\n  out-of-tree builds work.\n- *build*: customizable, `make VERBOSE=1` by default (build commands are shown).\n- *test*: customizable, `ctest --output-on-failure .` by default.\n- *post*: customizable, empty by default.\n\n\n## Inputs\n\n### `preset`\n\nSet a preset, more information on the [Presets](#presets) section below.\n\n- Phase: can changes the default command of any number of phases.\n\n### `dependencies_debian`\n\nProject dependencies as Debian packages to install in the container,\nseparated by spaces.\n\n- Phase: *setup*\n- Preset behavior: unnafected.\n\n### `working-directory`\n\nUse this directory as the source dir for cmake. Mostly used when the\ncmake project is in a subdirectory of the repository.\n\n- Phase: *setup*\n- Preset behavior: unnafected.\n\n### `cmakeflags`\n\nFlags for cmake. `-DSOME_OPTION=On`, for instance, to pass an option\nto CMakeLists.txt.\n\n- Phase: *cmake*\n- Preset behavior: most presets append to this input.\n\n### `build_command`\n\nCustom test command. Defaults to `make VERBOSE=1`.\n\n- Phase: *build*\n- Preset behavior: some presets change or remove the default build\n  command.\n\n### `test_command`\n\nCustom test command. Defaults to `ctest --output-on-failure .` if no preset is used.\n\n- Phase: *test*\n- Preset behavior: some presets change or remove the default test\n  command.\n\n### `post_command`\n\nCustom command to run after tests. Empty by default, if no preset is used.\n\n- Phase: *post*\n- Preset behavior: some presets add a default post command.\n\n## <a name=\"presets\"></a> Presets\n\n`cmake` is a very versatile tool that can do a lot of different things given\nthe appropriate arguments. To make matrix builds easier, *ghaction-cmake*\nprovides **presets** that configure those options for specific modes.\n\nThe available presets are:\n- *cppcheck*: run [cppcheck](http://cppcheck.sourceforge.net/) static\n  analysis.\n  - *cmake*: append `-DCMAKE_C/CXX_CPPCHECK=cppcheck` to `cmakeflags`.\n  - *test*: clear default.\n- *iwyu*: run\n  [include-what-you-use](https://include-what-you-use.org/) static\n  analysis.\n  - *cmake*: append `-DCMAKE_C/CXX_INCLUDE_WHAT_YOU_USE=iwyu` to `cmakeflags`.\n  - *test*: clear default.\n- *install*: test installation.\n  - *cmake*: append `'-DCMAKE_INSTALL_PREFIX'` to `cmakeflags`.\n  - *test*: use `make install` as a test.\n  - *post*: use `find` to show all installed files.\n- *clang-tidy*: run\n  [clang-tidy](https://clang.llvm.org/extra/clang-tidy/) static\n  analysis.\n  - *cmake*: append `-DCMAKE_C/CXX_CLANG_TIDY=clang-tidy` to `cmakeflags`.\n  - *test*: clear default.\n- *clang-sanitize-&lt;sanitizer&gt;*: compile with one of the\n  [clang sanitizers](https://clang.llvm.org/docs/index.html) and\n  run the tests.\n  - *cmake*: append `-DCMAKE_C/CXX_COMPILER=clang/clang++ -DCMAKE_C/CXX_FLAGS=-fno-omit-frame-pointer -fsanitize=<sanitizer>` to `cmakeflags`.\n- *valgrind*: run the tests with [valgrind](https://valgrind.org/).\n  - *test*: set default test phase to `ctest -DExperimentalMemCheck --output-on-failure .`\n- *coverage*: runs the tests with coverage.\n  - *cmake*: append `-DCMAKE_C/CXX_FLAGS=--coverage` to `cmakeflags`\n  - *post*: set default post phase to run\n    [lcov](http://ltp.sourceforge.net/coverage/lcov.php) with\n    `lcov -c -d . -o lcov.info`\n\n  This preset works well with github actions that upload coverage data\n  results to online services like\n  [codecov](https://github.com/marketplace/actions/codecov) and\n  [coveralls](https://github.com/marketplace/actions/coveralls-github-action).\n  The [example](#example) below shows how that can be done.\n\n\nThe table below summarizes the changes specific to each preset:\n\n<table>\n<tr>\n<th>Preset</th>\n<th>cmake</th>\n<th>test</th>\n<th>post</th>\n</tr>\n<tr>\n<td>cppcheck</td>\n<td><pre>-DCMAKE_C/CXX_CPPCHECK=cppcheck</pre></td>\n<td>(delete)</td>\n<td></td>\n</tr>\n<tr>\n<td>iwyu</td>\n<td><pre>-DCMAKE_C/CXX_INCLUDE_WHAT_YOU_USE=iwyu</pre></td>\n<td>(delete)</td>\n<td></td>\n</tr>\n<tr>\n<td>install</td>\n<td><pre>-DCMAKE_INSTALL_PREFIX=/tmp/_install</pre></td>\n<td><pre>make install</pre></td>\n<td><pre>find /tmp_install -type f</pre></td>\n</tr>\n<tr>\n<td>clang&#8209;tidy</td>\n<td><pre>-DCMAKE_C/CXX_CLANG_TIDY=clang-tidy</pre></td>\n<td>(delete)</td>\n<td></td>\n</tr>\n<tr>\n<td>clang&#8209;sanitizer&#8209;&lt;sanitizer&gt;</td>\n<td>\n<pre>-DCMAKE_C/CXX_COMPILER=clang/clang++\n-DCMAKE_C/CXX_FLAGS=-fno-omit-frame-pointer -fsanitize=&lt;sanitizer&gt;</pre>\n</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>valgrind</td>\n<td></td>\n<td><pre>-DExperimentalMemCheck</pre></td>\n<td></td>\n</tr>\n<tr>\n<td>coverage</td>\n<td><pre>-DCMAKE_C/CXX_FLAGS=--coverage</pre></td>\n<td></td>\n<td><pre>lcov -c -d . -o lcov.info</pre></td>\n</tr>\n</table>\n\nKeep in mind that presets override the defaults, and are overriden by\nthe other more specific inputs `build_command`, `test_command` and\n`post_command`.\n\n\n## <a name=\"example\"></a> Example:\n\nThe workflow below shows how to use presets in a matrix job:\n\n```yml\n---\nname: CI\non: [push, pull_request]\njobs:\n  # Regular C build with two compilers, using the environment:\n  build_using_compiler_in_environment:\n    strategy:\n        matrix:\n          compiler:\n            - gcc\n            - clang\n    runs-on: ubuntu-latest\n    # We can use cmakeflags for this, or we can just use\n    # regular environment variables, as they are already\n    # supported by github actions:\n    env:\n      - CC: ${{ matrix.compiler }}\n    steps:\n      - uses: actions/checkout@v2\n      - uses: docker://lpenz/ghaction-cmake:v0.10\n  # Regular C build with two compilers, using cmakeflags:\n  build_using_compiler_in_cmakeflags:\n    strategy:\n        matrix:\n          compiler:\n            - gcc\n            - clang\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v2\n      # This examples uses the appropriate cmakeflags\n      - uses: docker://lpenz/ghaction-cmake:v0.10\n        with:\n          cmakeflags: ${{ format('-DCMAKE_C_COMPILER={0}', matrix.compiler) }}\n  # Coverage with codecov:\n  codecov:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v2\n      - uses: docker://lpenz/ghaction-cmake:v0.10\n        with:\n          preset: coverage\n      # ghaction-cmake works well with the github action\n      # provided by codecov:\n      - uses: codecov/codecov-action@v1\n        with:\n          fail_ci_if_error: true\n  # Coverage with coveralls:\n  coveralls:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v2\n      - uses: docker://lpenz/ghaction-cmake:v0.10\n        with:\n          preset: coverage\n      # ghaction-cmake works well with the github action\n      # provided by coveralls if you pass path-to-lcov:\n      - uses: coverallsapp/github-action@master\n        with:\n          github-token: ${{ secrets.GITHUB_TOKEN }}\n          path-to-lcov: lcov.info\n  # Static analyzers:\n  linters:\n    strategy:\n        matrix:\n          preset: [ cppcheck, iwyu, clang-tidy ]\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v2\n      - uses: docker://lpenz/ghaction-cmake:v0.10\n        with:\n          preset: ${{ matrix.preset }}\n  # Tests with various sanitizers and valgrind:\n  test:\n    strategy:\n        matrix:\n          preset:\n            - clang-sanitizer-address\n            - clang-sanitizer-memory\n            - clang-sanitizer-undefined\n            - clang-sanitizer-dataflow\n            - clang-sanitizer-safe-stack\n            - valgrind\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v2\n      - uses: docker://lpenz/ghaction-cmake:v0.10\n        with:\n          preset: ${{ matrix.preset }}\n  # Test installation:\n  install:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v2\n      - uses: docker://lpenz/ghaction-cmake:v0.10\n        with:\n          preset: install\n```\n\nNote that the file above splits static analyzers from sanitizers, but\nthey can actually be in the same matrix job, as the rest of the\nparameters is the same.\n\n\n## Using in other environments\n\nThis github action is actually a docker image that can be used locally\nor even in [travis-ci](https://travis-ci.com). To do that, first\ndownload the image from\n[docker hub](https://hub.docker.com/r/lpenz/ghaction-cmake):\n\n```sh\ndocker pull lpenz/ghaction-cmake:v0.10\n```\n\nThen, run a container in the project's directory, for instance:\n\n```sh\ndocker run --rm -t -u \"$UID\" -w \"$PWD\" -v \"${PWD}:${PWD}\" -e INPUT_PRESET=valgrind lpenz/ghaction-cmake:v0.10\n```\n\nIt's worth pointing out that action parameters are passed as\nupper case environment variables, prefixed with `INPUT_`.\n\nThe following `.travis.yml` runs the same thing in travis-ci:\n\n```yml\n---\nlanguage: generic\njobs:\n  include:\n    - install: docker pull lpenz/ghaction-cmake:v0.10\n    - script: docker run --rm -t -u \"$UID\" -w \"$PWD\" -v \"${PWD}:${PWD}\" -e INPUT_PRESET=valgrind lpenz/ghaction-cmake:v0.10\n```\n",
  "permissions": {
    "read": true,
    "write": false,
    "admin": false
  },
  "media_types": [
    "application/vnd.docker.container.image.v1+json",
    "application/vnd.docker.distribution.manifest.list.v2+json"
  ],
  "content_types": [
    "image"
  ]
}