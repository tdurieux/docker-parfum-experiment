{
  "user": "chibicitiberiu",
  "name": "ytsm",
  "namespace": "chibicitiberiu",
  "repository_type": "image",
  "status": 1,
  "status_description": "active",
  "description": "Self-hosted tool which manages your YouTube subscriptions, and downloads files automatically.",
  "is_private": false,
  "is_automated": true,
  "can_edit": false,
  "star_count": 1,
  "pull_count": 9845,
  "last_updated": "2020-10-18T16:51:45.262922Z",
  "date_registered": "2018-10-31T15:22:56.408006Z",
  "collaborator_count": 0,
  "affiliation": null,
  "hub_user": "chibicitiberiu",
  "has_starred": false,
  "full_description": "# YouTube Subscription Manager\n\nA self-hosted tool which manages your YouTube subscriptions, and downloads files automatically.\n\n## Current state\n\nCurrently, the program will do what it's main job is to do: download videos, and keep track of the subscriptions.\n\nOf course, there are a lot of things that still need to be done. The web interface is still pretty limited, and there might still be uncaught bugs. These are some of the things that need to be done:\n\n* OAuth YouTube authentication, so private playlists can be obtained\n* Web UI improvements:\n    * Handle drag & drop for the subscription folders\n    * Update UI when something changes\n* Improve stability  \n* Bonus: Plex integration\n* Bonus: Support for additional services (Twitch, Vimeo)\n\n## Dependencies\n\n* python3: `$ apt install python3`\n* pip: `$ apt install python3-pip`\n* ffmpeg: `$ apt install ffmpeg`\n* django: `$ pip3 install django`\n* crispy_forms: `$ pip3 install django-crispy-forms`\n* dj-config-url: `$ pip3 install dj-config-url`\n* youtube-dl: `$ pip3 install youtube-dl`\n* google-api-python-client: `$ pip3 install google-api-python-client`\n* google_auth_oauthlib: `$ pip3 install google_auth_oauthlib`\n* apscheduler (v3.5+): `$ pip3 install apscheduler`\n* (recommended) oauth2client: `$ pip3 install oauth2client`\n\n## Installation\n\nThere are 2 ways you can install this server. Using docker is the quickest and easiest method.\n\n### Normal installation for development/testing\n\n1. Clone this repository: \n\n    ```bash\n    git clone https://github.com/chibicitiberiu/ytsm.git\n    cd ytsm\n    ```\n\n2. Install all the dependencies listed above.\n\n    ```bash\n    sudo apt install python3 python3-pip ffmpeg\n    sudo pip3 install --no-cache-dir -r requirements.txt\n    ```\n\n3. Modify `config/config.ini` to your liking. All the settings should be documented through comments.\nAll these settings apply server-wide. The settings in the `user` section can be overriden from the web page for each \nindividual user. \n\n4. Obtain an YouTube API developer key from [https://console.developers.google.com/apis/dashboard](https://console.developers.google.com/apis/dashboard).\nYou can find a detailed guide on [this page](https://www.slickremix.com/docs/get-api-key-for-youtube/).\n\n    The `defaults.ini` file already has an API key, but if the quotas are reached, you won't be able to use this program \n    any more. Also, I might decide to delete that key, which will break your installation.\n    \n    After obtaining the key, set it in `config.ini`.\n\n5. Set up the database:\n\n    ```bash\n    cd app\n    python3 manage.py migrate\n    ```\n \n    By default, a SQLite database is used, which is located in the project's folder. The database can be configured\n    in `settings.ini`.\n         \n6. Start the server: `python3 manage.py runserver [port] --noreload --insecure`\n\n    The `port` parameter is optional.\n    \n    The `--noreload` option is necessary, otherwise the scheduler will run on 2 separate processes at the same time, \n    which is not ideal.\n    \n    The `--insecure` option is required only if `Debug=False` in `config.ini`, Without this option, the static resources \n    (CSS, javascript) won't work. \n     \n7. Open the server's page in your browser, by entering `http://localhost:port` in your address bar.\n\n8. Create an admin user by going to the *register* page, and creating an user account.\n\n9. Add some subscriptions, and enjoy!\n\n### Docker\n\n1. Clone this repository: \n\n    ```bash\n    git clone https://github.com/chibicitiberiu/ytsm.git\n    cd ytsm\n    ```\n\n2. Install docker (if not installed)\n\n3. Modify `config/config.ini` to your liking. All the settings should be documented through comments.\nAll these settings apply server-wide. The settings in the `user` section can be overriden from the web page for each \nindividual user. \n\n    **Attention**: you cannot modify the download location from `settings.ini` when using docker. \n    To do so, you will need to modify the volume mapping in `docker-compose.yml`. \n\n4. Obtain an YouTube API developer key from [https://console.developers.google.com/apis/dashboard](https://console.developers.google.com/apis/dashboard).\nYou can find a detailed guide on [this page](https://www.slickremix.com/docs/get-api-key-for-youtube/).\n\n    The `defaults.ini` file already has an API key, but if the quotas are reached, you won't be able to use this program \n    any more. Also, I might decide to delete that key, which will break your installation.\n    \n    After obtaining the key, set it in `config.ini`.\n\n5. Build and run docker compose image:\n\n    ```bash\n    docker-compose up -d\n    ```\n    \n6. Open the server's page in your browser, by entering `http://localhost` in your address bar.\n\n7. Create an admin user by going to the *register* page, and creating an user account.\n\n8. Add some subscriptions, and enjoy!\n\nThe docker image uses a sqlite database, and stores the data in a folder `data/` located in the project directory. \nYou can edit the default download locations in the `docker-compose.yml` file.\n\nFor more information about using Docker, check [this page](Docker_README.md).\n\n### Deploying for production\n\nThis is a *django* project, so the correct way to deploy it to a server would be by using *mod_wsgi*. Since this project \nis still in development, I haven't really thought about getting it ready for production. \n\nIf you are willing to try that, you can find the information on how to deploy this application on the \n[Django website](https://docs.djangoproject.com/en/2.1/howto/deployment/).\n",
  "permissions": {
    "read": true,
    "write": false,
    "admin": false
  },
  "media_types": [
    "application/vnd.docker.container.image.v1+json"
  ],
  "content_types": [
    "image"
  ]
}