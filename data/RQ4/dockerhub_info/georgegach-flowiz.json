{
  "user": "georgegach",
  "name": "flowiz",
  "namespace": "georgegach",
  "repository_type": "image",
  "status": 1,
  "status_description": "active",
  "description": "Converts Optical Flow files to images and optionally compiles them to a video. ",
  "is_private": false,
  "is_automated": false,
  "can_edit": false,
  "star_count": 0,
  "pull_count": 9,
  "last_updated": "2022-04-05T17:39:20.450071Z",
  "date_registered": "2022-03-28T06:12:44.023824Z",
  "collaborator_count": 0,
  "affiliation": null,
  "hub_user": "georgegach",
  "has_starred": false,
  "full_description": "<p align=\"center\">\n<img src=\"https://raw.githubusercontent.com/georgegach/flowiz/master/flowiz/gui/web/assets/flowiz-logo.png\" width=400 alt='flowiz' style=\"margin:50px;max-width:400px\">\n<p>\n    \n<p align=\"center\">\n<a href=\"https://github.com/georgegach/flowiz/blob/master/LICENSE\"><img src=\"https://img.shields.io/pypi/l/flowiz.svg\" alt=\"PyPI - License\" /></a>\n<a href=\"https://pypi.org/project/flowiz/\"><img src=\"https://img.shields.io/pypi/v/flowiz.svg\" alt=\"PyPI\" /></a>\n<a href=\"https://pypistats.org/search/flowiz\"><img src=\"https://img.shields.io/pypi/dm/flowiz.svg\" alt=\"PyPI - Downloads\" /></a>\n    </p>\n<p align=\"center\">\n<a href=\"https://mybinder.org/v2/gh/georgegach/flowiz/master?filepath=demo%2Ftest.ipynb\"><img src=\"https://img.shields.io/static/v1.svg?label=launch&amp;message=notebook&amp;color=F37626&amp;style=for-the-badge&amp;logo=jupyter\" alt=\"Launch Jupyter\" /></a></p>\n</p>\n\n<h1></h1>\n\nConverts Optical Flow `.flo` files to images `.png` and optionally compiles them to a video `.mp4` via ffmpeg\n\n-   [Installation](#installation)\n-   [Usage](#usage)\n    -   [Command line usage](#command-line-usage)\n    -   [Python usage](#python-usage)\n    -   [GUI usage](#gui-usage)\n    -   [Help](#help)\n-   [Acknowledgements](#acknowledgements)\n-   [FAQ](#faq)\n-   [To-Do](#to-do)\n\n## Installation\n### PyPI\n\nEasiest option to install `flowiz` is to grab the latest package from PyPI repo\n\n```bash\npip install flowiz -U\n```\n\n### pip + Github\nAlternatively you may install the package directly from github repo\n\n```bash\npip install git+https://github.com/georgegach/flowiz/\n```\n\n### Build yourself\nOr you can run `setup.py` to build it yourself locally\n\n```bash\ngit clone https://github.com/georgegach/flowiz.git\ncd flowiz\npython setup.py install --user\n```\n\nMake sure you have requirements installed along with an `ffmpeg` to compile a video. `requirements.txt` contains latest working versions of this package. Feel free to use `pip-upgrader`. \n```bash\npip install -r requirements.txt\napt install ffmpeg \n# pacman -S ffmpeg\n```\n\n### Docker\nFirst dockerize cloned repo\n```bash\ngit clone https://github.com/georgegach/flowiz.git\ncd flowiz\ndocker build . -t myflowiz:latest\n```\n\nThen launch the container with port 8000 exposed\n```bash\ndocker run -it -p 8000:8000 myflowiz:latest\n```\n\nFinally, fire up http://localhost:8000 in your favorite browser\n\n## Usage\n\nPackage can be used both from the command line and python script.\n\n### Command line usage\n\nThe following script grabs `.flo` files from `./demo/flo/` directory and converts into `.png` saving in the same directory\n\n```bash\npython -m flowiz demo/flo/*.flo\n```\n\nYou can pass output directory for `.png` images via `-o` or `--outdir` parameter\n\n```bash\npython -m flowiz demo/flo/*.flo --outdir demo/png/\n```\n\nYou may compile converted `.png` images into a _24 fps_ `.mp4` clip by passing `-v` or `--videodir` parameter with a video output directory (without a filename)\n\n```bash\npython -m flowiz demo/flo/*.flo -o demo/png --videodir demo/mp4\n```\n\nPass `-r` or `--framerate` parameter to control the framerate of compiled video\n\n```bash\npython -m flowiz demo/flo/*.flo -o demo/png -v demo/mp4 --framerate 2\n```\n\n### Python usage\n\nRelevant python code is available in `demo/test.ipynb` notebook. Here's an excerpt:\n\n```python\nimport flowiz as fz\n\nfiles = glob.glob('demo/flo/*.flo')\nimg = fz.convert_from_file(files[0])\nplt.imshow(img)\n```\n\n![Image](https://raw.githubusercontent.com/georgegach/flowiz/master/demo/png/frame_0001.flo.png)\n\nIn case you need to visualize `U V` channels separately from your numpy `floArray`:\n\n```python\nuv = fz.convert_from_flow(floArray, mode='UV')\naxarr[0].imshow(uv[...,0], cmap=plt.get_cmap('binary'))\naxarr[1].imshow(uv[...,1], cmap=plt.get_cmap('binary'))\n```\n\n![Image](https://raw.githubusercontent.com/georgegach/flowiz/master/demo/githubassets/uv_flows.png)\n\n### GUI usage\n\nBeta version of the `flowiz` graphical user interface is now accessible via `flowiz.gui` package. It is packaged using [ChrisKnott / Eel](https://github.com/ChrisKnott/Eel) and available via default web browser. To run the GUI simply type:\n\n```bash\npython -m flowiz.gui\n```\n\nUpon launching the web app, drag and drop or choose `.flo` file(s) using the `open file dialog`. Files will be converted using the python backend and placed in a temporary directory `flowiz/gui/web/guitemp`. Upon every session temporary directory will be emptied to avoid unnecessary polution.  \n\nMockup of the GUI is available at [georgegach.github.io/flowiz](http://georgegach.github.io/flowiz)\n\n![Demo Video](https://raw.githubusercontent.com/georgegach/flowiz/master/demo/githubassets/flowiz.demo.gif)\n\n### Help\n\n```bash\n$ python -m flowiz -h\n\nusage: __main__.py [-h] [--outdir OUTDIR] [--videodir VIDEODIR]\n                    [--framerate FRAMERATE]\n                    input [input ...]\n\npositional arguments:\n  input                 Input file(s). (e.g.: __ ./demo/flo/*.flo)\n\noptional arguments:\n  -h, --help            show this help message and exit\n  --outdir OUTDIR, -o OUTDIR\n                        Output directory path. Default: same directory as\n                        [.flo] files. (e.g.: __ -o ./demo/png/)\n  --videodir VIDEODIR, -v VIDEODIR\n                        Compiles [.mp4] video from [.png] images if parameter\n                        is passed. Parameter requires video output directory\n                        path without a filename. (e.g.: __ -v ./demo/mp4/)\n  --framerate FRAMERATE, -r FRAMERATE\n                        Frames per second of the video. (e.g.: __ -r 2)\n```\n\n```bash\n$ python -m flowiz.gui -h\nusage: __main__.py [-h] [--mode MODE]\n\noptional arguments:\n  -h, --help   show this help message and exit\n  --mode MODE  GUI engine: \"chrome\", \"edge\", \"electron\", \"browser\". Use \"None\" when working with Docker.\n```\n\n## Acknowledgements\n\nThe library is based on Midlebury's Vision Project MATLAB code: <http://vision.middlebury.edu/flow/>\nOriginal credits to Daniel Scharstein (C++) and Deqing Sun (MATLAB)\n\n## FAQ\n\n> Q: But what kind of name is `flowiz`?  \n> A: The kind you choose when `flowkit`, `flowtools`, `flowlib`, `flowlab` are already taken.\n\n> Q: Future work?  \n> A: Some of the `To-Do` features are listed below with no determined timeline. If you'd like to contribute with the said features or something completely new, you may ![fork it](https://img.shields.io/github/forks/georgegach/flowiz.svg?label=fork%20it&style=social) and issue a pull request. \n\n## To-Do\n\n-   [x] Ported from Matlab `flow_code`\n-   [x] Project is available on PyPI \n-   [x] Dockerized\n-   [x] GUI\n    -   [ ] Improve Front to Back-end throughput performance\n",
  "permissions": {
    "read": true,
    "write": false,
    "admin": false
  },
  "media_types": [
    "application/vnd.docker.container.image.v1+json"
  ],
  "content_types": [
    "image"
  ]
}