{
  "user": "gfaraj",
  "name": "super-bot",
  "namespace": "gfaraj",
  "repository_type": "image",
  "status": 1,
  "status_description": "active",
  "description": "A simple but extensible bot service",
  "is_private": false,
  "is_automated": false,
  "can_edit": false,
  "star_count": 0,
  "pull_count": 77,
  "last_updated": "2020-04-06T23:00:46.877943Z",
  "date_registered": "2020-01-14T07:05:54.656114Z",
  "collaborator_count": 0,
  "affiliation": null,
  "hub_user": "gfaraj",
  "has_starred": false,
  "full_description": "[![Actions Status](https://github.com/gfaraj/super-bot/workflows/Node%20CI/badge.svg)](https://github.com/gfaraj/super-bot/actions)\n\n\n# super-bot\nA simple but extensible bot written in Node.js. Currently there are Whatsapp, Slack, and Discord interfaces, but any messaging platform can be supported by creating a client for it (e.g FB Messenger, MS Teams, IRC).\n\n## Docker\n\nRunning the bot service as a docker container is not yet supported due to incompatibility issues with the database provider. The bot clients are all dockerized, though, and [here is a handy docker-compose file](https://gist.github.com/gfaraj/e9459a5d90cdcb923655f70ae456b96a) to quickly start all of them.\n\n## Installing from source\n\nClone this repository:\n\n```\ngit clone https://github.com/gfaraj/super-bot.git\n```\n\nand install its dependencies by running:\n\n```\nnpm install\n```\n\nMake sure you have npm and Node 10 or newer installed.\n\n## Starting the bot\n\nYou can run the bot service with the following command:\n\n```\nnpm run start\n```\n\nThe bot service starts a web server on port 3000 (which is configurable) and accepts POST requests on \"/message\" with the body being JSON data representing a message object. The bot then will run that message through any commands that are supported and sends back the response. This makes it really easy to have any number of interfaces tied to the same bot service. Currently there's no security to restrict access to this endpoint so be aware that anyone could post messages to the bot.\n\n## Configuration\n\nThe bot uses a JSON configuration file located in the ./config folder. See the [config](https://docs.npmjs.com/cli/config) package documentation for more information. The Whatsapp client is also configured this way.\n\n## Clients\n\nThe same bot service can be utilized through different clients. The clients are how users interface with the bot service. They handle all the platform-specific tasks like listening for new messages and transforming them into a standard message object for the bot service.\n\n| Repo | Description\n|--- |---\n| [super-bot-whatsapp](https://github.com/gfaraj/super-bot-whatsapp) | Chat interface for Whatsapp\n| [super-bot-slack](https://github.com/gfaraj/super-bot-slack) | Chat interface for Slack\n| [super-bot-discord](https://github.com/gfaraj/super-bot-discord) | Chat interface for Discord\n\n## Plugins\n\nThe bot is driven by plugins. Each plugin can define any number of commands that it supports (a command can only be supported by a single plugin). A plugin can also subscribe to be called whenever a message has not been handled by any command (for example, as a fallback). It's required that a plugin export a default function that will be called during initialization.\n\n```\nexport default function(bot) {\n    bot.command('echo', (bot, message) => {\n        bot.respond({ text : message.text, attachment : message.attachment });   // just respond back with the same message.\n    });\n    bot.raw((bot, message, next) => {\n        if (message.text.includes('foo')) {  // check if we can handle this raw message.\n            bot.respond('bar');\n        }\n        else {\n            next();  // call next if your plugin can't handle this message.\n        }\n    });\n}\n```\n\n### record\n\nThis plugin allows you (and your friends) to record key-value pairs with optional attachments (currently only images and Whatsapp stickers are supported). The recordings are scoped per chat. There is a plan to support global recordings in the future.\n\n```\nrecord <name> <value>\n```\n\nThe value is optional if an attachment is provided.\n\nThe plugin also registers the \"forget\" command to remove a recording. Only you or the recording's author are allowed to do this. It also registers the \"recordings\" command which sends a list of all existing recordings that match a given string (or all if no string is provided).\n\nExamples:\n```\nrecord hi Hello everyone!\n```\nAfter doing that, when the bot is given the command \"hi\" it will respond with \"Hello everyone!\".\n```\n(as a reply to an image message)\nrecord kids\n```\nThe Whatsapp client will append any replied message to the current command, so in the example above it will save a \"kids\" recording with the image attachment. Then when the bot is given the \"kids\" command, it will send that image.\n\n```\nrecord stocks !google stock msft\n```\nThis is an unofficial way to write shortcuts to other commands. After the command above, if given the \"stocks\" command, the bot will respond with \"!google stock msft\" and it will then respond to that command. In the future, a proper command chaining feature based on piping is planned.\n\n### translate\n\nThis plugin translates a given text into a target language like so:\n\n```\ntranslate es Hi, how are you doing?\n```\nIt takes a two-letter locale as the first parameter and the text to translate after it.\n\nThis uses the Google Translate API to perform the translation. You need to [set up a Google Cloud project](https://cloud.google.com/translate/docs/quickstart-client-libraries#client-libraries-usage-nodejs) with Translate support to be able to use this plugin. There is a cost to this if the free quotas are exceeded, so be mindful of that.\n\n### google\n\nThis plugin will perform a Google search and return the first 2 results. It's currently scraping the google search results (using puppeteer to process and render the initial web page, then using cheerio to grab the information). This is not permitted by Google so use at your own risk. \n```\ngoogle game of thrones\n```\nThe response is something like:\n```\n1) https://www.hbo.com/game-of-thrones\n2) https://en.wikipedia.org/wiki/Game_of_Thrones\n```\n\nThis plugin also exposes a \"gimg\" command that performs a Google Image Search and sends back the first image result (sends the actual image, not just a link). Currently it's returning a low-res image but it's possible to adjust it to get the original image.\n\n### evaluate\n\nThis plugin will evaluate an expression and respond with the result. It exposes two commands, eval and calc. The eval command accepts any type of (limited - it uses safe-eval) javascript expression, while the calc command will only work with numeric expressions.\n\n```\neval 'Hello' + ' world!'\ncalc 10 + 20 / 2\ncalc 15 - sqrt(4)\n```\nResponds with:\n```\nHello world!\n20\n13\n```\n\n### sticker\n\nThis plugin provides utilities related to Whatsapp stickers. The \"stickerize\" command will take any image and convert it to a Whatsapp sticker.\n\n```\n(as a reply to an image message)\nstickerize\n```\nThis would send a message with the quoted image as a sticker.\n\n### code\n\nThis plugin allows you to build and run code in many languages. It will respond with any build errors or any output generated by your program. You can use this plugin like this:\n\n`!code -l<language> <code text>`\n\nExamples:\n\n`!code -lc# public static class P { public static void Main() { System.Console.WriteLine(\"Hello, world!\\n\"); } }`\n\n`!code -lgo package main\nimport \"fmt\"\nfunc main() {\n  fmt.Printf(''Have fun!\")\n}`\n\nThere are a couple of shortcuts for C# and C++ currently and more can be added easily:\n\n`!cs public static class P { public static void Main() { System.Console.WriteLine(\"Hello, world!\\n\"); } }`\n\n```\n!c++ #include<iostream>\nint main() { std::cout << \"Hey there!\\n\"; }\n```\n\nThe plugin also supports passing in a code file as an attachment.\n\n### Other commands\n\nThere are many other commands available like remindme, trivia, poll, factoid, and several imaging utilities.\n\n## Contribution\n\nContribution of any kind is welcome! Please feel free to create your own plugins for the bot service, chat interfaces, features or bug fixes. Fork the repository, create your own branch and submit pull requests.\n\n# Disclaimer\n\nThis project was done for educational purposes. This code is in no way affiliated with, authorized, maintained, sponsored or endorsed by WhatsApp or any of its affiliates or subsidiaries. This is an independent and unofficial software. Use at your own risk.\n",
  "permissions": {
    "read": true,
    "write": false,
    "admin": false
  },
  "media_types": [
    "application/vnd.docker.container.image.v1+json"
  ],
  "content_types": [
    "image"
  ]
}