{
  "user": "c3lingo",
  "name": "c3lingo-mumble",
  "namespace": "c3lingo",
  "repository_type": "image",
  "status": 1,
  "status_description": "active",
  "description": "Python modules to insert and extract audio into/from Mumble channels.",
  "is_private": false,
  "is_automated": false,
  "can_edit": false,
  "star_count": 0,
  "pull_count": 103,
  "last_updated": "2021-09-13T20:37:09.885953Z",
  "date_registered": "2020-04-05T10:34:30.652866Z",
  "collaborator_count": 0,
  "affiliation": null,
  "hub_user": "c3lingo",
  "has_starred": false,
  "full_description": "![Docker Image CI](https://github.com/c3lingo/c3lingo-mumble/workflows/Docker%20Image%20CI/badge.svg)\n\n# Mumble Audio Utilities\n\nThis project contains Python modules that are used in conjuction with a Mumble server to insert and extract audio into/from Mumble channels.\n\n## Installation\n\nThe Python code requires Python 3.7 or newer, and `pipenv` or `venv` and pip`.\n\n### Docker\n\nA docker image is available at https://hub.docker.com/r/c3lingo/c3lingo-mumble. Use the docker image like you would use the Python command:\n\n```\ndocker run --rm -it -v $PWD/c3lingo-mumbleweb:/c3lingo-mumbleweb c3lingo/c3lingo-mumble:latest -m c3lingo_mumble.play_wav -c /c3lingo-mumbleweb/test-channel.yaml\n```\n\n### Local Installation\n\nInstall the prerequisite packages, then set up a local environment.\n\n#### Debian\n```\nsudo apt install -y git python3-dev python3-venv python3-wheel libopus-dev\n```\n\n#### Mac\n```sh\nbrew install opus python\n```\n\n#### Local Environment with Pipenv\n\nWith `pipenv`:\n```\n$ pipenv install\n```\n\n#### Local Environment with Pip\n\nWith `venv` and `pip`\n```\n$ python3 -m venv .venv\n$ .venv/bin/pip install -r requirements.txt\n```\n\n## Using c3lingo-mumble\n\n### Playing a WAV file to a Mumble channel with `play_wav`\n\nThis module connects to a channel and plays the wav file. The file can be played in a loop.\n\n```\npython -m c3lingo_mumble.play_wav -c examples/play_wav/test-channel.yaml\n```\n\nThe config file contains all necessary information. See [examples/play_wav/test-channel.yaml](./examples/play_wav/test-channel.yaml) for an example.\n\n### Receive audio from a channel with `recv_stdout`\n\nThis module connect to a channel and produces any audio received on standard out, as raw little endian 16 bit PCM 48000 samples/sec.\n\n```\npython -m c3lingo_mumble.recv_stdout mumble.c3lingo.org test\n```\n\nThe optional third argument specifies a file to record to. Recording stops when the Python program is stopped (^C or kill).\n\n### Additional Modules\n\nThere are more useful modules. See the source code and the (examples/)[examples/] directory for more information.\n\n## Building\n\n### Updating `requirements.txt`\n\n```\npipenv run pip freeze > requirements.txt\n```\n\n## Setup at 36c3\n\nAudio is taken directly from the Voctomix setup (on the Voctomix host).\n\nWe connect to Voctomix to receive a stream consisting of a Matroska container\nwith both video and audio, and use ffmpeg to extract the audio channels.\n\n```\n$ ffprobe tcp://localhost:15000\nffprobe version 4.1.4-1~deb10u1 Copyright (c) 2007-2019 the FFmpeg developers\n   ...\nInput #0, matroska,webm, from 'tcp://localhost:15000':\n Metadata:\n   encoder         : GStreamer matroskamux version 1.14.4\n   creation_time   : 2019-12-11T17:06:50.000000Z\n Duration: N/A, start: 49.920000, bitrate: 6144 kb/s\n   Stream #0:0(eng): Video: ...\n   Metadata:\n     title           : Video\n   Stream #0:1(eng): Audio: pcm_s16le, 48000 Hz, 8 channels, s16, 6144 kb/s (default)\n   Metadata:\n     title           : Audio\n\n```\n\nThere are four stereo audio channels interleaved into a single stream. We use\nffmpeg to extract and downmix the audio to three mono channels: for the original\nsound from the speaker, one for the first translation channel, and one for\nthe second one. The fourth source channel is ignored.\n\nWe then feed this into the Python code that sends each channel to the configured\nMumble channel, using a unique user for that channel.\n\nThe pipeline looks like this:\n```\nffmpeg -loglevel error -i tcp://localhost:15000 \\\n    -filter_complex '[0:a]pan=3c|c0=.5*c0+.5*c1|c1=.5*c2+.5*c3|c2=.5*c4+.5*c5[a0]' \\\n    -map '[a0]' -ac 3 -f s16le -c:a pcm_s16le -y - \\\n| pipenv run python -m c3lingo_mumble.send_stdin -f c3lingo-adams.yaml\n```\n\nA sample config file for the Python code can be found in\n[examples/send_stdin/adams.yaml](examples/send_stdin/adams.yaml).\n\nA sample systemd unit file can be found under\n[examples/send_stdin/mumblesender.service](examples/send_stdin/mumblesender.service)",
  "permissions": {
    "read": true,
    "write": false,
    "admin": false
  },
  "media_types": [
    "application/vnd.docker.container.image.v1+json"
  ],
  "content_types": [
    "image"
  ]
}