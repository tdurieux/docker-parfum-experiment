{
  "user": "dimkr",
  "name": "papaw",
  "namespace": "dimkr",
  "repository_type": "image",
  "status": 1,
  "status_description": "active",
  "description": "A simple, decompressing executable packer - deprecated, use ghcr.io/dimkr/papaw/ci-container",
  "is_private": false,
  "is_automated": false,
  "can_edit": false,
  "star_count": 0,
  "pull_count": 262,
  "last_updated": "2021-07-14T20:33:43.62586Z",
  "date_registered": "2020-01-20T14:53:32.37122Z",
  "collaborator_count": 0,
  "affiliation": null,
  "hub_user": "dimkr",
  "has_starred": false,
  "full_description": "```\n _ __   __ _ _ __   __ ___      __\n| '_ \\ / _` | '_ \\ / _` \\ \\ /\\ / /\n| |_) | (_| | |_) | (_| |\\ V  V /\n| .__/ \\__,_| .__/ \\__,_| \\_/\\_/\n|_|         |_|\n```\n\n[![Build Status](https://github.com/dimkr/papaw/actions/workflows/release.yml/badge.svg?branch=master)](https://github.com/dimkr/papaw/actions)\n\n## Overview\n\npapaw is a permissively-licensed packer for executables which contain statically linked, third-party components of various licenses and run on various devices, with limited disk space.\n\npapaw reduces the size of executables and makes executables capable of replacing themselves on disk, while optionally providing very basic anti-debugging protection to discourage those attempting some trivial reverse-engineering techniques.\n\nIt is designed to be portable across different devices, therefore it avoids machine-specific assembly and the use of fexecve() or other, newer system calls which could be used to simplify it.\n\n## Implementation\n\npapaw consists of a small executable (~15-40K) containing a decompressor. It extracts a compressed executable appended to it by the papawify script.\n\nThe payload executable is extracted to a temporary file. When running as root, this is done by mounting a tmpfs file system and lazily unmounting it before the extraction.\n\n## Supported Compression Algorithms and Implementations\n\n* LZMA2, using [XZ Embedded](https://tukaani.org/xz/embedded.html) (the default)\n* LZMA1, using the [LZMA SDK](https://www.7-zip.org/sdk.html) decompressor\n* LZMA2, using [Minimal LZMA](https://github.com/ionescu007/minlzma)\n* Zstandard, using the [zstd](https://github.com/facebook/zstd) decompressor\n* Deflate, using [miniz](https://github.com/richgel999/miniz)\n\nThe first two are extremely similar in compression ratio, code size, memory usage and speed.\n\n## Usage\n\npapaw uses [Meson](http://mesonbuild.com/) as its build system. To pack an executable using papaw, build papaw, then use papawify to pack the executable.\n\npapaw can be used as a Meson subproject; in that case, custom_target() is the recommended way to run papawify.\n\nHowever, it is also possible to run papawify manually and pre-built, static binaries are available [here](https://github.com/dimkr/papaw/releases). For example:\n\n```\nwget https://github.com/dimkr/papaw/releases/latest/download/papawify-xz https://github.com/dimkr/papaw/releases/latest/download/papaw-xz-i386\npython3 papawify-xz papaw-xz-i386 /bin/bash bash-packed\ndu -h /bin/bash bash-packed\n./bash-packed --version\n```\n\n## Legal Information\n\npapaw is free and unencumbered software released under the terms of the MIT license; see COPYING for the license text.\n\nThe ASCII art logo at the top was made using [FIGlet](http://www.figlet.org/).\n",
  "permissions": {
    "read": true,
    "write": false,
    "admin": false
  },
  "media_types": [
    "application/vnd.docker.container.image.v1+json"
  ],
  "content_types": [
    "image"
  ]
}