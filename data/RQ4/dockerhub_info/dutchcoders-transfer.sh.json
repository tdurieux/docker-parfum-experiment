{
  "user": "dutchcoders",
  "name": "transfer.sh",
  "namespace": "dutchcoders",
  "repository_type": "image",
  "status": 1,
  "status_description": "active",
  "description": "Easy and fast file sharing from the command-line. \n",
  "is_private": false,
  "is_automated": true,
  "can_edit": false,
  "star_count": 33,
  "pull_count": 8274000,
  "last_updated": "2023-01-06T00:56:10.281764Z",
  "date_registered": "2017-03-22T22:01:01.063691Z",
  "collaborator_count": 0,
  "affiliation": null,
  "hub_user": "dutchcoders",
  "has_starred": false,
  "full_description": "# transfer.sh [![Go Report Card](https://goreportcard.com/badge/github.com/dutchcoders/transfer.sh)](https://goreportcard.com/report/github.com/dutchcoders/transfer.sh) [![Docker pulls](https://img.shields.io/docker/pulls/dutchcoders/transfer.sh.svg)](https://hub.docker.com/r/dutchcoders/transfer.sh/) [![Build Status](https://github.com/dutchcoders/transfer.sh/actions/workflows/test.yml/badge.svg?branch=master)](https://github.com/dutchcoders/transfer.sh/actions/workflows/test.yml?query=branch%3Amaster)\n\nEasy and fast file sharing from the command-line. This code contains the server with everything you need to create your own instance.\n\nTransfer.sh currently supports the s3 (Amazon S3), gdrive (Google Drive), storj (Storj) providers, and local file system (local).\n\n## Disclaimer\n\nThe service at transfersh.com is of unknown origin and reported as cloud malware.\n\n## Usage\n\n### Upload:\n```bash\n$ curl --upload-file ./hello.txt https://transfer.sh/hello.txt\n```\n\n### Encrypt & upload:\n```bash\n$ cat /tmp/hello.txt|gpg -ac -o-|curl -X PUT --upload-file \"-\" https://transfer.sh/test.txt\n````\n\n### Download & decrypt:\n```bash\n$ curl https://transfer.sh/1lDau/test.txt|gpg -o- > /tmp/hello.txt\n```\n\n### Upload to virustotal:\n```bash\n$ curl -X PUT --upload-file nhgbhhj https://transfer.sh/test.txt/virustotal\n```\n\n### Deleting\n```bash\n$ curl -X DELETE <X-Url-Delete Response Header URL>\n```\n\n## Request Headers\n\n### Max-Downloads\n```bash\n$ curl --upload-file ./hello.txt https://transfer.sh/hello.txt -H \"Max-Downloads: 1\" # Limit the number of downloads\n```\n\n### Max-Days\n```bash\n$ curl --upload-file ./hello.txt https://transfer.sh/hello.txt -H \"Max-Days: 1\" # Set the number of days before deletion\n```\n\n## Response Headers\n\n### X-Url-Delete\n\nThe URL used to request the deletion of a file. Returned as a response header.\n```bash\ncurl -sD - --upload-file ./hello https://transfer.sh/hello.txt | grep 'X-Url-Delete'\nX-Url-Delete: https://transfer.sh/hello.txt/BAYh0/hello.txt/PDw0NHPcqU\n```\n\n## Examples\n\nSee good usage examples on [examples.md](examples.md)\n\n## Link aliases\n\nCreate direct download link:\n\nhttps://transfer.sh/1lDau/test.txt --> https://transfer.sh/get/1lDau/test.txt\n\nInline file:\n\nhttps://transfer.sh/1lDau/test.txt --> https://transfer.sh/inline/1lDau/test.txt\n\n## Usage\n\nParameter | Description | Value | Env\n--- | --- | --- | ---\nlistener | port to use for http (:80) | | LISTENER |\nprofile-listener | port to use for profiler (:6060) | | PROFILE_LISTENER |\nforce-https | redirect to https | false | FORCE_HTTPS\ntls-listener | port to use for https (:443) | | TLS_LISTENER |\ntls-listener-only | flag to enable tls listener only | | TLS_LISTENER_ONLY |\ntls-cert-file | path to tls certificate | | TLS_CERT_FILE |\ntls-private-key | path to tls private key | | TLS_PRIVATE_KEY |\nhttp-auth-user | user for basic http auth on upload | | HTTP_AUTH_USER |\nhttp-auth-pass | pass for basic http auth on upload | | HTTP_AUTH_PASS |\nip-whitelist | comma separated list of ips allowed to connect to the service | | IP_WHITELIST |\nip-blacklist | comma separated list of ips not allowed to connect to the service | | IP_BLACKLIST |\ntemp-path | path to temp folder | system temp | TEMP_PATH |\nweb-path | path to static web files (for development or custom front end) | | WEB_PATH |\nproxy-path | path prefix when service is run behind a proxy | | PROXY_PATH |\nproxy-port | port of the proxy when the service is run behind a proxy | | PROXY_PORT |\nga-key | google analytics key for the front end | | GA_KEY |\nprovider | which storage provider to use | (s3, storj, gdrive or local) |\nuservoice-key | user voice key for the front end  | | USERVOICE_KEY |\naws-access-key | aws access key | | AWS_ACCESS_KEY |\naws-secret-key | aws access key | | AWS_SECRET_KEY |\nbucket | aws bucket | | BUCKET |\ns3-endpoint | Custom S3 endpoint. | | S3_ENDPOINT |\ns3-region | region of the s3 bucket | eu-west-1 | S3_REGION |\ns3-no-multipart | disables s3 multipart upload | false | S3_NO_MULTIPART |\ns3-path-style | Forces path style URLs, required for Minio. | false | S3_PATH_STYLE |\nstorj-access | Access for the project | | STORJ_ACCESS |\nstorj-bucket | Bucket to use within the project | | STORJ_BUCKET |\nbasedir | path storage for local/gdrive provider | | BASEDIR |\ngdrive-client-json-filepath | path to oauth client json config for gdrive provider | | GDRIVE_CLIENT_JSON_FILEPATH |\ngdrive-local-config-path | path to store local transfer.sh config cache for gdrive provider| | GDRIVE_LOCAL_CONFIG_PATH |\ngdrive-chunk-size | chunk size for gdrive upload in megabytes, must be lower than available memory (8 MB) | | GDRIVE_CHUNK_SIZE |\nlets-encrypt-hosts | hosts to use for lets encrypt certificates (comma seperated) | | HOSTS |\nlog | path to log file| | LOG |\ncors-domains | comma separated list of domains for CORS, setting it enable CORS | | CORS_DOMAINS |\nclamav-host | host for clamav feature  | | CLAMAV_HOST |\nrate-limit | request per minute  | | RATE_LIMIT |\nmax-upload-size | max upload size in kilobytes  | | MAX_UPLOAD_SIZE |\npurge-days | number of days after the uploads are purged automatically | | PURGE_DAYS |   \npurge-interval | interval in hours to run the automatic purge for (not applicable to S3 and Storj) | | PURGE_INTERVAL |   \nrandom-token-length | length of the random token for the upload path (double the size for delete path) | 6 | RANDOM_TOKEN_LENGTH |   \n\nIf you want to use TLS using lets encrypt certificates, set lets-encrypt-hosts to your domain, set tls-listener to :443 and enable force-https.\n\nIf you want to use TLS using your own certificates, set tls-listener to :443, force-https, tls-cert-file and tls-private-key.\n\n## Development\n\nSwitched to GO111MODULE\n\n```bash\ngo run main.go --provider=local --listener :8080 --temp-path=/tmp/ --basedir=/tmp/\n```\n\n## Build\n\n```bash\n$ git clone git@github.com:dutchcoders/transfer.sh.git\n$ cd transfer.sh\n$ go build -o transfersh main.go\n```\n\n## Docker\n\nFor easy deployment, we've created a Docker container.\n\n```bash\ndocker run --publish 8080:8080 dutchcoders/transfer.sh:latest --provider local --basedir /tmp/\n```\n\n## S3 Usage\n\nFor the usage with a AWS S3 Bucket, you just need to specify the following options:\n- provider\n- aws-access-key\n- aws-secret-key\n- bucket\n- s3-region\n\nIf you specify the s3-region, you don't need to set the endpoint URL since the correct endpoint will used automatically.\n\n### Custom S3 providers\n\nTo use a custom non-AWS S3 provider, you need to specify the endpoint as defined from your cloud provider.\n\n## Storj Network Provider\n\nTo use the Storj Network as storage provider you need to specify the following flags:\n- provider `--provider storj`\n- storj-access _(either via flag or environment variable STORJ_ACCESS)_\n- storj-bucket _(either via flag or environment variable STORJ_BUCKET)_\n\n### Creating Bucket and Scope\n\nIn preparation you need to create an access grant (or copy it from the uplink configuration) and a bucket.\n\nTo get started, login to your account and go to the Access Grant Menu and start the Wizard on the upper right.\n\nEnter your access grant name of choice, hit *Next* and restrict it as necessary/preferred.\nAftwards continue either in CLI or within the Browser. You'll be asked for a Passphrase used as Encryption Key.\n**Make sure to save it in a safe place, without it you will lose the ability to decrypt your files!**\n\nAfterwards you can copy the access grant and then start the startup of the transfer.sh endpoint. \nFor enhanced security its recommended to provide both the access grant and the bucket name as ENV Variables.\n\nExample:\n```\nexport STORJ_BUCKET=<BUCKET NAME>\nexport STORJ_ACCESS=<ACCESS GRANT>\ntransfer.sh --provider storj\n```\n\n## Google Drive Usage\n\nFor the usage with Google drive, you need to specify the following options:\n- provider\n- gdrive-client-json-filepath\n- gdrive-local-config-path\n- basedir\n\n### Creating Gdrive Client Json\n\nYou need to create a Oauth Client id from console.cloud.google.com\ndownload the file and place into a safe directory\n\n### Usage example\n\n```go run main.go --provider gdrive --basedir /tmp/ --gdrive-client-json-filepath /[credential_dir] --gdrive-local-config-path [directory_to_save_config] ```\n\n## Contributions\n\nContributions are welcome.\n\n## Creators\n\n**Remco Verhoef**\n- <https://twitter.com/remco_verhoef>\n- <https://twitter.com/dutchcoders>\n\n**Uvis Grinfelds**\n\n## Maintainer\n\n**Andrea Spacca**\n\n**Stefan Benten**\n\n## Copyright and license\n\nCode and documentation copyright 2011-2018 Remco Verhoef.\nCode and documentation copyright 2018-2020 Andrea Spacca.\nCode and documentation copyright 2020- Andrea Spacca and Stefan Benten.\n\nCode released under [the MIT license](LICENSE).\n",
  "permissions": {
    "read": true,
    "write": false,
    "admin": false
  },
  "media_types": [
    "application/vnd.docker.distribution.manifest.list.v2+json",
    "application/vnd.docker.container.image.v1+json"
  ],
  "content_types": [
    "image"
  ]
}