{
  "user": "derailed",
  "name": "k9s",
  "namespace": "derailed",
  "repository_type": "image",
  "status": 1,
  "status_description": "active",
  "description": "Kubernetes CLI To Manage Your Clusters In Style!",
  "is_private": false,
  "is_automated": false,
  "can_edit": false,
  "star_count": 5,
  "pull_count": 19821,
  "last_updated": "2022-12-03T20:20:30.682342Z",
  "date_registered": "2019-07-12T14:45:20.07514Z",
  "collaborator_count": 0,
  "affiliation": null,
  "hub_user": "derailed",
  "has_starred": false,
  "full_description": "<img src=\"assets/k9s.png\" alt=\"k9s\">\n\n## K9s - Kubernetes CLI To Manage Your Clusters In Style!\n\nK9s provides a terminal UI to interact with your Kubernetes clusters.\nThe aim of this project is to make it easier to navigate, observe and manage\nyour applications in the wild. K9s continually watches Kubernetes\nfor changes and offers subsequent commands to interact with your observed resources.\n\n---\n\n## Note...\n\nAs you may know k9s is not pimped out by a big corporation with deep pockets. It is a complex OSS project that demands a lot of my time to maintain and support. K9s will always remain OSS and therefore free! That said if you feel, k9s makes your day to day Kubernetes journey a tad brighter, please consider sponsoring us or purchase a [K9sAlpha license](https://k9salpha.io). Your donations will go a long way in keeping our servers lights on and beers in our fridge!\n\n**Thank you!**\n\n---\n\n[![Go Report Card](https://goreportcard.com/badge/github.com/derailed/k9s?)](https://goreportcard.com/report/github.com/derailed/k9s)\n[![golangci badge](https://github.com/golangci/golangci-web/blob/master/src/assets/images/badge_a_plus_flat.svg)](https://golangci.com/r/github.com/derailed/k9s)\n[![codebeat badge](https://codebeat.co/badges/89e5a80e-dfe8-4426-acf6-6be781e0a12e)](https://codebeat.co/projects/github-com-derailed-k9s-master)\n[![Build Status](https://travis-ci.com/derailed/k9s.svg?branch=master)](https://travis-ci.com/derailed/k9s)\n[![Docker Repository on Quay](https://quay.io/repository/derailed/k9s/status \"Docker Repository on Quay\")](https://quay.io/repository/derailed/k9s)\n[![release](https://img.shields.io/github/release-pre/derailed/k9s.svg)](https://github.com/derailed/k9s/releases)\n[![License](https://img.shields.io/badge/License-Apache%202.0-blue.svg)](https://github.com/mum4k/termdash/blob/master/LICENSE)\n[![Releases](https://img.shields.io/github/downloads/derailed/k9s/total.svg)](https://github.com/derailed/k9s/releases)\n\n---\n\n## Documentation\n\nPlease refer to our [K9s documentation](https://k9scli.io) site for installation, usage, customization and tips.\n\n## Slack Channel\n\nWanna discuss K9s features with your fellow `K9sers` or simply show your support for this tool?\n\n* Channel: [K9ersSlack](https://k9sers.slack.com/)\n* Invite: [K9slackers Invite](https://join.slack.com/t/k9sers/shared_invite/enQtOTA5MDEyNzI5MTU0LWQ1ZGI3MzliYzZhZWEyNzYxYzA3NjE0YTk1YmFmNzViZjIyNzhkZGI0MmJjYzhlNjdlMGJhYzE2ZGU1NjkyNTM)\n\n---\n\n## K8S Compatibility Matrix\n|         k9s        | k8s client |\n| ------------------ | ---------- |\n| v0.26.7 - v0.26.6  |   0.25.3   |\n| v0.26.5 - v0.26.4  |   0.25.1   |\n| v0.26.3 - v0.26.1  |   0.24.3   |\n| v0.26.0 - v0.25.19 |   0.24.2   |\n| v0.25.18 - v0.25.3 |   0.22.3   |\n| v0.25.2 - v0.25.0  |   0.22.0   |\n|      <= v0.24      |   0.21.3   |\n\n\n\n## Installation\n\nK9s is available on Linux, macOS and Windows platforms.\n\n* Binaries for Linux, Windows and Mac are available as tarballs in the [release](https://github.com/derailed/k9s/releases) page.\n\n* Via [Homebrew](https://brew.sh/) for macOS or Linux\n\n   ```shell\n   brew install k9s\n   ```\n\n* Via [MacPorts](https://www.macports.org)\n\n   ```shell\n   sudo port install k9s\n   ```\n\n* On Arch Linux\n\n  ```shell\n  pacman -S k9s\n  ```\n\n* On OpenSUSE Linux distribution\n\n  ```shell\n  zypper install k9s\n  ```\n\n* Via [Scoop](https://scoop.sh) for Windows\n\n  ```shell\n  scoop install k9s\n  ```\n\n* Via [Chocolatey](https://chocolatey.org/packages/k9s) for Windows\n\n  ```shell\n  choco install k9s\n  ```\n\n* Via a GO install\n\n  ```shell\n  # NOTE: The dev version will be in effect!\n  go install github.com/derailed/k9s@latest\n  ```\n\n* Via [Webi](https://webinstall.dev) for Linux and macOS\n\n  ```shell\n  curl -sS https://webinstall.dev/k9s | bash\n  ```\n\n* Via [Webi](https://webinstall.dev) for Windows\n\n  ```shell\n  curl.exe -A MS https://webinstall.dev/k9s | powershell\n  ```\n  \n* As a [Docker Desktop Extension](https://docs.docker.com/desktop/extensions/) (for the Docker Desktop built in Kubernetes Server)\n\n  ```shell\n  docker extension install spurin/k9s-dd-extension:latest\n  ```\n\n---\n\n## Building From Source\n\n K9s is currently using go v1.14 or above. In order to build K9s from source you must:\n\n 1. Clone the repo\n 2. Build and run the executable\n\n      ```shell\n      make build && ./execs/k9s\n      ```\n\n---\n\n## Running with Docker\n\n### Running the official Docker image\n\n  You can run k9s as a Docker container by mounting your `KUBECONFIG`:\n\n  ```shell\n  docker run --rm -it -v $KUBECONFIG:/root/.kube/config quay.io/derailed/k9s\n  ```\n\n  For default path it would be:\n\n  ```shell\n  docker run --rm -it -v ~/.kube/config:/root/.kube/config quay.io/derailed/k9s\n  ```\n\n### Building your own Docker image\n\n  You can build your own Docker image of k9s from the [Dockerfile](Dockerfile) with the following:\n\n  ```shell\n  docker build -t k9s-docker:0.1 .\n  ```\n\n  You can get the latest stable `kubectl` version and pass it to the `docker build` command with the `--build-arg` option.\n  You can use the `--build-arg` option to pass any valid `kubectl` version (like `v1.18.0` or `v1.19.1`).\n\n  ```shell\n  KUBECTL_VERSION=$(make kubectl-stable-version 2>/dev/null)\n  docker build --build-arg KUBECTL_VERSION=${KUBECTL_VERSION} -t k9s-docker:0.1 .\n  ```\n\n  Run your container:\n\n  ```shell\n  docker run --rm -it -v ~/.kube/config:/root/.kube/config k9s-docker:0.1\n  ```\n\n---\n\n## PreFlight Checks\n\n* K9s uses 256 colors terminal mode. On `Nix system make sure TERM is set accordingly.\n\n    ```shell\n    export TERM=xterm-256color\n    ```\n\n* In order to issue manifest edit commands make sure your EDITOR env is set.\n\n    ```shell\n    # Kubectl edit command will use this env var.\n    export EDITOR=my_fav_editor\n    # Should your editor deal with streamed vs on disk files differently, also set...\n    export K9S_EDITOR=my_fav_editor\n    ```\n\n* K9s prefers recent kubernetes versions ie 1.16+\n\n---\n\n## The Command Line\n\n```shell\n# List all available CLI options\nk9s help\n# To get info about K9s runtime (logs, configs, etc..)\nk9s info\n# To run K9s in a given namespace\nk9s -n mycoolns\n# Start K9s in an existing KubeConfig context\nk9s --context coolCtx\n# Start K9s in readonly mode - with all cluster modification commands disabled\nk9s --readonly\n```\n\n## Logs\n\nGiven the nature of the ui k9s does produce logs to a specific location. To view the logs and turn on debug mode, use the following commands:\n\n```shell\nk9s info\n# Will produces something like this\n#  ____  __.________\n# |    |/ _/   __   \\______\n# |      < \\____    /  ___/\n# |    |  \\   /    /\\___ \\\n# |____|__ \\ /____//____  >\n#         \\/            \\/\n#\n# Configuration:   ~/Library/Preferences/k9s/config.yml\n# Logs:            /var/folders/8c/hh6rqbgs5nx_c_8k9_17ghfh0000gn/T/k9s-fernand.log\n# Screen Dumps:    /var/folders/8c/hh6rqbgs5nx_c_8k9_17ghfh0000gn/T/k9s-screens-fernand\n\n# To view k9s logs\ntail -f /var/folders/8c/hh6rqbgs5nx_c_8k9_17ghfh0000gn/T/k9s-fernand.log\n\n# Start K9s in debug mode\nk9s -l debug\n```\n\n## Key Bindings\n\nK9s uses aliases to navigate most K8s resources.\n\n| Action                                                         | Command                       | Comment                                                                |\n|----------------------------------------------------------------|-------------------------------|------------------------------------------------------------------------|\n| Show active keyboard mnemonics and help                        | `?`                           |                                                                        |\n| Show all available resource alias                              | `ctrl-a`                      |                                                                        |\n| To bail out of K9s                                             | `:q`, `ctrl-c`                |                                                                        |\n| View a Kubernetes resource using singular/plural or short-name | `:`po⏎                        | accepts singular, plural, short-name or alias ie pod or pods           |\n| View a Kubernetes resource in a given namespace                | `:`alias namespace⏎           |                                                                        |\n| Filter out a resource view given a filter                      | `/`filter⏎                    | Regex2 supported ie `fred|blee` to filter resources named fred or blee |\n| Inverse regex filter                                           | `/`! filter⏎                  | Keep everything that *doesn't* match.                                  |\n| Filter resource view by labels                                 | `/`-l label-selector⏎         |                                                                        |\n| Fuzzy find a resource given a filter                           | `/`-f filter⏎                 |                                                                        |\n| Bails out of view/command/filter mode                          | `<esc>`                       |                                                                        |\n| Key mapping to describe, view, edit, view logs,...             | `d`,`v`, `e`, `l`,...         |                                                                        |\n| To view and switch to another Kubernetes context               | `:`ctx⏎                       |                                                                        |\n| To view and switch to another Kubernetes context               | `:`ctx context-name⏎          |                                                                        |\n| To view and switch to another Kubernetes namespace             | `:`ns⏎                        |                                                                        |\n| To view all saved resources                                    | `:`screendump or sd⏎          |                                                                        |\n| To delete a resource (TAB and ENTER to confirm)                | `ctrl-d`                      |                                                                        |\n| To kill a resource (no confirmation dialog!)                   | `ctrl-k`                      |                                                                        |\n| Launch pulses view                                             | `:`pulses or pu⏎              |                                                                        |\n| Launch XRay view                                               | `:`xray RESOURCE [NAMESPACE]⏎ | RESOURCE can be one of po, svc, dp, rs, sts, ds, NAMESPACE is optional |\n| Launch Popeye view                                             | `:`popeye or pop⏎             | See [popeye](#popeye)                                               |\n\n---\n\n## Screenshots\n\n1. Pods\n      <img src=\"assets/screen_po.png\"/>\n1. Logs\n      <img src=\"assets/screen_logs.png\"/>\n1. Deployments\n      <img src=\"assets/screen_dp.png\"/>\n\n---\n\n---\n\n## Demo Videos/Recordings\n\n* [k9s Kubernetes UI - A Terminal-Based Vim-Like Kubernetes Dashboard](https://youtu.be/boaW9odvRCc)\n* [K9s v0.21.3](https://youtu.be/wG8KCwDAhnw)\n* [K9s v0.19.X](https://youtu.be/kj-WverKZ24)\n* [K9s v0.18.0](https://www.youtube.com/watch?v=zMnD5e53yRw)\n* [K9s v0.17.0](https://www.youtube.com/watch?v=7S33CNLAofk&feature=youtu.be)\n* [K9s Pulses](https://asciinema.org/a/UbXKPal6IWpTaVAjBBFmizcGN)\n* [K9s v0.15.1](https://youtu.be/7Fx4XQ2ftpM)\n* [K9s v0.13.0](https://www.youtube.com/watch?v=qaeR2iK7U0o&t=15s)\n* [K9s v0.9.0](https://www.youtube.com/watch?v=bxKfqumjW4I)\n* [K9s v0.7.0 Features](https://youtu.be/83jYehwlql8)\n* [K9s v0 Demo](https://youtu.be/k7zseUhaXeU)\n\n---\n\n## K9s Configuration\n\n  K9s keeps its configurations inside of a `k9s` directory and the location depends on your operating system. K9s leverages [XDG](https://specifications.freedesktop.org/basedir-spec/basedir-spec-latest.html) to load its various configurations files. For information on the default locations for your OS please see [this link](https://github.com/adrg/xdg/blob/master/README.md). If you are still confused a quick `k9s info` will reveal where k9s is loading its configurations from. Alternatively, you can set `K9SCONFIG` to tell K9s the directory location to pull its configurations from.\n\n  | Unix            | macOS                              | Windows               |\n  |-----------------|------------------------------------|-----------------------|\n  | `~/.config/k9s` | `~/Library/Application Support/k9s` | `%LOCALAPPDATA%\\k9s`  |\n\n  > NOTE: This is still in flux and will change while in pre-release stage!\n\n  ```yaml\n  # $XDG_CONFIG_HOME/k9s/config.yml\n  k9s:\n    # Represents ui poll intervals. Default 2secs\n    refreshRate: 2\n    # Number of retries once the connection to the api-server is lost. Default 15.\n    maxConnRetry: 5\n    # Enable mouse support. Default false\n    enableMouse: true\n    # Set to true to hide K9s header. Default false\n    headless: false\n    # Set to true to hide K9s crumbs. Default false\n    crumbsless: false\n    # Indicates whether modification commands like delete/kill/edit are disabled. Default is false\n    readOnly: false\n    # Toggles whether k9s should exit when CTRL-C is pressed. When set to true, you will need to exist k9s via the :quit command. Default is false.\n    noExitOnCtrlC: false\n    # Toggles icons display as not all terminal support these chars.\n    noIcons: false\n    # Toggles whether k9s should check for the latest revision from the Github repository releases. Default is false.\n    skipLatestRevCheck: false\n    # Logs configuration\n    logger:\n      # Defines the number of lines to return. Default 100\n      tail: 200\n      # Defines the total number of log lines to allow in the view. Default 1000\n      buffer: 500\n      # Represents how far to go back in the log timeline in seconds. Setting to -1 will show all available logs. Default is 5min.\n      sinceSeconds: 300\n      # Go full screen while displaying logs. Default false\n      fullScreenLogs: false\n      # Toggles log line wrap. Default false\n      textWrap: false\n      # Toggles log line timestamp info. Default false\n      showTime: false\n    # Indicates the current kube context. Defaults to current context\n    currentContext: minikube\n    # Indicates the current kube cluster. Defaults to current context cluster\n    currentCluster: minikube\n    # Persists per cluster preferences for favorite namespaces and view.\n    clusters:\n      coolio:\n        namespace:\n          active: coolio\n          # With this set, the favorites list won't be updated as you switch namespaces\n          lockFavorites: false\n          favorites:\n          - cassandra\n          - default\n        view:\n          active: po\n        featureGates:\n          # Toggles NodeShell support. Allow K9s to shell into nodes if needed. Default false.\n          nodeShell: false\n        # Provide shell pod customization of feature gate is enabled\n        shellPod:\n          # The shell pod image to use.\n          image: killerAdmin\n          # The namespace to launch to shell pod into.\n          namespace: fred\n          # The resource limit to set on the shell pod.\n          limits:\n            cpu: 100m\n            memory: 100Mi\n        # The IP Address to use when launching a port-forward.\n        portForwardAddress: 1.2.3.4\n      kind:\n        namespace:\n          active: all\n          favorites:\n          - all\n          - kube-system\n          - default\n        view:\n          active: dp\n    # The path to screen dump. Default: '%temp_dir%/k9s-screens-%username%' (k9s info)\n    screenDumpDir: /tmp\n  ```\n\n---\n\n## <a id=\"popeye\"></a>Popeye Configuration\n\nK9s has integration with [Popeye](https://popeyecli.io/), which is a Kubernetes cluster sanitizer.  Popeye itself uses a configuration called `spinach.yml`, but when integrating with K9s the cluster-specific file should be name `$XDG_CONFIG_HOME/k9s/<context>_spinach.yml`.  This allows you to have a different spinach config per cluster.\n\n---\n\n## Node Shell\n\nBy enabling the nodeShell feature gate on a given cluster, K9s allows you to shell into your cluster nodes. Once enabled, you will have a new `s` for `shell` menu option while in node view. K9s will launch a pod on the selected node using a special k9s_shell pod. Furthermore, you can refine your shell pod by using a custom docker image preloaded with the shell tools you love. By default k9s uses a BusyBox image, but you can configure it as follows:\n\n```yaml\n# $XDG_CONFIG_HOME/k9s/config.yml\nk9s:\n  clusters:\n    # Configures node shell on cluster blee\n    blee:\n      featureGates:\n        # You must enable the nodeShell feature gate to enable shelling into nodes\n        nodeShell: true\n      # You can also further tune the shell pod specification\n      shellPod:\n        image: cool_kid_admin:42\n        namespace: blee\n        limits:\n          cpu: 100m\n          memory: 100Mi\n```\n\n---\n\n## Command Aliases\n\nIn K9s, you can define your very own command aliases (shortnames) to access your resources. In your `$HOME/.config/k9s` define a file called `alias.yml`. A K9s alias defines pairs of alias:gvr. A gvr (Group/Version/Resource) represents a fully qualified Kubernetes resource identifier. Here is an example of an alias file:\n\n```yaml\n# $XDG_CONFIG_HOME/k9s/alias.yml\nalias:\n  pp: v1/pods\n  crb: rbac.authorization.k8s.io/v1/clusterrolebindings\n```\n\nUsing this alias file, you can now type pp/crb to list pods or ClusterRoleBindings respectively.\n\n---\n\n## HotKey Support\n\nEntering the command mode and typing a resource name or alias, could be cumbersome for navigating thru often used resources. We're introducing hotkeys that allows a user to define their own hotkeys to activate their favorite resource views. In order to enable hotkeys please follow these steps:\n\n1. Create a file named `$XDG_CONFIG_HOME/k9s/hotkey.yml`\n2. Add the following to your `hotkey.yml`. You can use resource name/short name to specify a command ie same as typing it while in command mode.\n\n      ```yaml\n      # $XDG_CONFIG_HOME/k9s/hotkey.yml\n      hotKey:\n        # Hitting Shift-0 navigates to your pod view\n        shift-0:\n          shortCut:    Shift-0\n          description: Viewing pods\n          command:     pods\n        # Hitting Shift-1 navigates to your deployments\n        shift-1:\n          shortCut:    Shift-1\n          description: View deployments\n          command:     dp\n        # Hitting Shift-2 navigates to your xray deployments\n        shift-2:\n          shortCut:    Shift-2\n          description: Xray Deployments\n          command:     xray deploy\n      ```\n\n Not feeling so hot? Your custom hotkeys will be listed in the help view `?`. Also your hotkey file will be automatically reloaded so you can readily use your hotkeys as you define them.\n\n You can choose any keyboard shortcuts that make sense to you, provided they are not part of the standard K9s shortcuts list.\n\n> NOTE: This feature/configuration might change in future releases!\n\n---\n\n## FastForwards\n\nAs of v0.25.0, you can leverage the `FastForwards` feature to tell K9s how to default port-forwards. In situations where you are dealing with multiple containers or containers exposing multiple ports, it can be cumbersome to specify the desired port-forward from the dialog as in most cases, you already know which container/port tuple you desire. For these use cases, you can now annotate your manifests with the following annotations:\n\n- `k9scli.io/auto-port-forwards`\n  activates one or more port-forwards directly bypassing the port-forward dialog all together.\n- `k9scli.io/port-forwards`\n  pre-selects one or more port-forwards when launching the port-forward dialog.\n\nThe annotation value takes on the shape `container-name::[local-port:]container-port`\n\n> NOTE: for either cases above you can specify the container port by name or number in your annotation!\n\n### Example\n\n```yaml\n# Pod fred\napiVersion: v1\nkind: Pod\nmetadata:\n  name: fred\n  annotations:\n    k9scli.io/auto-port-forwards: zorg::5556        # => will default to container zorg port 5556 and local port 5566. No port-forward dialog will be shown.\n    # Or...\n    k9scli.io/port-forwards: bozo::9090:p1           # => launches the port-forward dialog selecting default port-forward on container bozo port named p1(8081)\n                                                   # mapping to local port 9090.\n    ...\nspec:\n  containers:\n  - name: zorg\n    ports:\n    - name: p1\n      containerPort: 5556\n    ...\n  - name: bozo\n    ports:\n    - name: p1\n      containerPort: 8081\n    - name: p2\n      containerPort: 5555\n    ...\n```\n\nThe annotation value must specify a container to forward to as well as a local port and container port. The container port may be specified as either a port number or port name. If the local port is omitted then the local port will default to the container port number. Here are a few examples:\n\n1. bozo::http      - creates a pf on container `bozo` with port name http. If http specifies port number 8080 then the local port will be 8080 as well.\n2. bozo::9090:http - creates a pf on container `bozo` mapping local port 9090->http(8080)\n3. bozo::9090:8080 - creates a pf on container `bozo` mapping local port 9090->8080\n\n---\n\n## Resource Custom Columns\n\n[SneakCast v0.17.0 on The Beach! - Yup! sound is sucking but what a setting!](https://youtu.be/7S33CNLAofk)\n\nYou can change which columns shows up for a given resource via custom views. To surface this feature, you will need to create a new configuration file, namely `$XDG_CONFIG_HOME/k9s/views.yml`. This file leverages GVR (Group/Version/Resource) to configure the associated table view columns. If no GVR is found for a view the default rendering will take over (ie what we have now). Going wide will add all the remaining columns that are available on the given resource after your custom columns. To boot, you can edit your views config file and tune your resources views live!\n\n> NOTE: This is experimental and will most likely change as we iron this out!\n\nHere is a sample views configuration that customize a pods and services views.\n\n```yaml\n# $XDG_CONFIG_HOME/k9s/views.yml\nk9s:\n  views:\n    v1/pods:\n      columns:\n        - AGE\n        - NAMESPACE\n        - NAME\n        - IP\n        - NODE\n        - STATUS\n        - READY\n    v1/services:\n      columns:\n        - AGE\n        - NAMESPACE\n        - NAME\n        - TYPE\n        - CLUSTER-IP\n```\n\n---\n\n## Plugins\n\nK9s allows you to extend your command line and tooling by defining your very own cluster commands via plugins. K9s will look at `$XDG_CONFIG_HOME/k9s/plugin.yml` to locate all available plugins. A plugin is defined as follows:\n\n* Shortcut option represents the key combination a user would type to activate the plugin\n* Confirm option (when enabled) lets you see the command that is going to be executed and gives you an option to confirm or prevent execution\n* Description will be printed next to the shortcut in the k9s menu\n* Scopes defines a collection of resources names/short-names for the views associated with the plugin. You can specify `all` to provide this shortcut for all views.\n* Command represents ad-hoc commands the plugin runs upon activation\n* Background specifies whether or not the command runs in the background\n* Args specifies the various arguments that should apply to the command above\n\nK9s does provide additional environment variables for you to customize your plugins arguments. Currently, the available environment variables are as follows:\n\n* `$RESOURCE_GROUP` -- the selected resource group\n* `$RESOURCE_VERSION` -- the selected resource api version\n* `$RESOURCE_NAME` -- the selected resource name\n* `$NAMESPACE` -- the selected resource namespace\n* `$NAME` -- the selected resource name\n* `$CONTAINER` -- the current container if applicable\n* `$FILTER` -- the current filter if any\n* `$KUBECONFIG` -- the KubeConfig location.\n* `$CLUSTER` the active cluster name\n* `$CONTEXT` the active context name\n* `$USER` the active user\n* `$GROUPS` the active groups\n* `$POD` while in a container view\n* `$COL-<RESOURCE_COLUMN_NAME>` use a given column name for a viewed resource. Must be prefixed by `COL-`!\n\n### Example\n\nThis defines a plugin for viewing logs on a selected pod using `ctrl-l` for shortcut.\n\n```yaml\n# $XDG_CONFIG_HOME/k9s/plugin.yml\nplugin:\n  # Defines a plugin to provide a `ctrl-l` shortcut to tail the logs while in pod view.\n  fred:\n    shortCut: Ctrl-L\n    confirm: false\n    description: Pod logs\n    scopes:\n    - pods\n    command: kubectl\n    background: false\n    args:\n    - logs\n    - -f\n    - $NAME\n    - -n\n    - $NAMESPACE\n    - --context\n    - $CONTEXT\n```\n\n> NOTE: This is an experimental feature! Options and layout may change in future K9s releases as this feature solidifies.\n\n---\n\n## Benchmark Your Applications\n\nK9s integrates [Hey](https://github.com/rakyll/hey) from the brilliant and super talented [Jaana Do",
  "permissions": {
    "read": true,
    "write": false,
    "admin": false
  },
  "media_types": [
    "application/vnd.docker.container.image.v1+json"
  ],
  "content_types": [
    "image"
  ]
}