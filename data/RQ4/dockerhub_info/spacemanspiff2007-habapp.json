{
  "user": "spacemanspiff2007",
  "name": "habapp",
  "namespace": "spacemanspiff2007",
  "repository_type": "image",
  "status": 1,
  "status_description": "active",
  "description": "Easy automation with openHAB and/or MQTT. Create home automation rules in python.",
  "is_private": false,
  "is_automated": false,
  "can_edit": false,
  "star_count": 1,
  "pull_count": 4954,
  "last_updated": "2022-11-08T05:45:07.87293Z",
  "date_registered": "2019-03-29T06:38:43.676497Z",
  "collaborator_count": 0,
  "affiliation": null,
  "hub_user": "spacemanspiff2007",
  "has_starred": false,
  "full_description": "# HABApp\n[![Build Status](https://travis-ci.org/spacemanspiff2007/HABApp.svg?branch=master)](https://travis-ci.org/spacemanspiff2007/HABApp)\n[![Documentation Status](https://readthedocs.org/projects/habapp/badge/?version=latest)](https://habapp.readthedocs.io/en/latest/?badge=latest)\n[![Updates](https://pyup.io/repos/github/spacemanspiff2007/HABApp/shield.svg)](https://pyup.io/repos/github/spacemanspiff2007/HABApp/)\n![PyPI - Python Version](https://img.shields.io/pypi/pyversions/habapp)\n\n![PyPI](https://img.shields.io/pypi/v/HABapp)\n[![Downloads](https://pepy.tech/badge/habapp/month)](https://pepy.tech/project/habapp/month)\n![Docker Image Version (latest by date)](https://img.shields.io/docker/v/spacemanspiff2007/habapp?label=docker)\n![Docker Pulls](https://img.shields.io/docker/pulls/spacemanspiff2007/habapp)\n\n\n_Easy automation with MQTT and/or openHAB_\n\n\nHABApp is a asyncio/multithread application that connects to an openhab instance and/or a MQTT broker.\nIt is possible to create rules that listen to events from these instances and then react accordingly.\n\n## Goals\nThe goal of this application is to provide a simple way to create home automation rules in python.\nWith full syntax highlighting and descriptive names it should almost never be required to look something up in the documentation\n\n## Documentation\n[The documentation can be found at here](https://habapp.readthedocs.io)\n\n## Examples\n\n### MQTT Rule example\n```python\nimport datetime\nimport random\n\nimport HABApp\nfrom HABApp.core.events import ValueUpdateEvent\n\n\nclass ExampleMqttTestRule(HABApp.Rule):\n    def __init__(self):\n        super().__init__()\n\n        self.run_every(\n            time=datetime.timedelta(seconds=60),\n            interval=datetime.timedelta(seconds=30),\n            callback=self.publish_rand_value\n        )\n\n        self.listen_event('test/test', self.topic_updated, ValueUpdateEvent)\n\n    def publish_rand_value(self):\n        print('test mqtt_publish')\n        self.mqtt.publish('test/test', str(random.randint(0, 1000)))\n\n    def topic_updated(self, event):\n        assert isinstance(event, ValueUpdateEvent), type(event)\n        print( f'mqtt topic \"test/test\" updated to {event.value}')\n\n\nExampleMqttTestRule()\n```\n\n### Openhab rule example\n```python\nimport HABApp\nfrom HABApp.core.events import ValueUpdateEvent, ValueChangeEvent\nfrom HABApp.openhab.events import ItemStateEvent, ItemCommandEvent, ItemStateChangedEvent\n\nclass MyOpenhabRule(HABApp.Rule):\n\n    def __init__(self):\n        super().__init__()\n\n        # Trigger on item updates\n        self.listen_event( 'TestContact', self.item_state_update, ItemStateEvent)\n        self.listen_event( 'TestDateTime', self.item_state_update, ValueUpdateEvent)\n\n        # Trigger on item changes\n        self.listen_event( 'TestDateTime', self.item_state_change, ItemStateChangedEvent)\n        self.listen_event( 'TestSwitch', self.item_state_change, ValueChangeEvent)\n\n        # Trigger on item commands\n        self.listen_event( 'TestSwitch', self.item_command, ItemCommandEvent)\n\n    def item_state_update(self, event):\n        assert isinstance(event, ValueUpdateEvent)\n        print( f'{event}')\n\n    def item_state_change(self, event):\n        assert isinstance(event, ValueChangeEvent)\n        print( f'{event}')\n\n        # interaction is available through self.openhab or self.oh\n        self.openhab.send_command('TestItemCommand', 'ON')\n\n    def item_command(self, event):\n        assert isinstance(event, ItemCommandEvent)\n        print( f'{event}')\n\n        # interaction is available through self.openhab or self.oh\n        self.oh.post_update('TestItemUpdate', 123)\n\nMyOpenhabRule()\n```\n",
  "permissions": {
    "read": true,
    "write": false,
    "admin": false
  },
  "media_types": [
    "application/vnd.docker.distribution.manifest.list.v2+json",
    "application/vnd.docker.container.image.v1+json"
  ],
  "content_types": [
    "image"
  ]
}