{
  "user": "oduwsdl",
  "name": "memgator",
  "namespace": "oduwsdl",
  "repository_type": "image",
  "status": 1,
  "status_description": "active",
  "description": "A Memento Aggregator CLI and Server in Go.",
  "is_private": false,
  "is_automated": false,
  "can_edit": false,
  "star_count": 0,
  "pull_count": 157,
  "last_updated": "2021-04-05T20:51:14.016449Z",
  "date_registered": "2020-03-06T00:37:52.201629Z",
  "collaborator_count": 0,
  "affiliation": null,
  "hub_user": "oduwsdl",
  "has_starred": false,
  "full_description": "# MemGator\n\nA Memento Aggregator CLI and Server in [Go](https://golang.org/).\n\n## Features\n\n* The binary (available for various platforms) can be used as the CLI or run as a Web Service\n* Results available in three formats - Link/JSON/CDXJ\n* TimeMap, TimeGate, and Memento (redirect or description) endpoints\n* Optional streaming of benchmarks over [Server-Sent Events](http://www.html5rocks.com/en/tutorials/eventsource/basics/) (SSE) for realtime visualization and monitoring\n* Good API parity with the [main Memento Aggregator service](http://timetravel.mementoweb.org/guide/api/)\n* Concurrent - Splits every session in subtasks for parallel execution\n* Parallel - Utilizes all the available CPUs\n* Custom archive list (a local JSON file or a remote URL) - A sample JSON is included in the repository\n* Probability based archive prioritization and limit\n* Configurable automated temporary exclusion of malfunctioning upstream archives\n* Three levels of customizable timeouts for greater control over remote requests\n* Customizable logging and profiling in CDXJ format\n* Customizable endpoint URLs - Helpful in load-balancing\n* Customizable User-Agent to be sent to each archive and User-Agent spoofing\n* Configurable archive failure detection and automatic hibernation\n* [CORS](http://www.w3.org/TR/cors/) support to make it easy to use it from JavaScript clients\n* Memento count exposed in the header that can be retrieved via `HEAD` request\n* [Docker](https://www.docker.com/) friendly - An image available as [oduwsdl/memgator](https://hub.docker.com/r/oduwsdl/memgator)\n* Sensible defaults - Batteries included, but replaceable\n\n## Usage\n\n### CLI\n\nCommand line interface of MemGator allows retrieval of the TimeMap and the description of the closest Memento (equivalent to the TimeGate) over `STDOUT` in all supported formats. Logs and benchmarks (in verbose mode) and Error output are available on `STDERR` unless appropriate files are configured. For further details, see the full usage.\n\n```\n$ memgator [options] {URI-R}                            # TimeMap from CLI\n$ memgator [options] {URI-R} {YYYY[MM[DD[hh[mm[ss]]]]]} # Description of the closest Memento from CLI\n```\n\n### Server\n\nWhen run as a Web Service, MemGator exposes following customizable endpoints:\n\n```\n$ memgator [options] server\nTimeMap:  http://localhost:1208/timemap/{FORMAT}/{URI-R}\nTimeGate: http://localhost:1208/timegate/{URI-R} [Accept-Datetime]\nMemento:  http://localhost:1208/memento[/{FORMAT}|proxy]/{DATETIME}/{URI-R}\nAbout:    http://localhost:1208/about\nMonitor:  http://localhost:1208/monitor - (Over SSE, if enabled)\n\n  {FORMAT}          => link|json|cdxj\n  {DATETIME}        => YYYY[MM[DD[hh[mm[ss]]]]]\n  [Accept-Datetime] => Header in RFC1123 format\n```\n\n* `TimeMap` endpoint serves an aggregated TimeMap for a given URI-R in accordance with the [Memento RFC](http://tools.ietf.org/html/rfc7089). Additionally, it makes sure that the Mementos are chronologically ordered. It also provides the TimeMap data serialized in additional experimental formats.\n* `TimeGate` endpoint allows datetime negotiation via the `Accept-Datetime` header in accordance with the [Memento RFC](http://tools.ietf.org/html/rfc7089). A successful response redirects to the closes Memento (to the given datetime) using the `Location` header. The default datetime is the current time. A successful response also includes a `Link` header which provides links to the first, last, next, and previous Mementos.\n* `Memento` endpoint allows datetime negotiation in the request URL itself for clients that cannot easily send custom request headers (as opposed to the `TimeGate` which requires the `Accept-Datetime` header). This endpoint behaves differently based on whether the `format` was specified in the request. It essentially splits the functionality of the `TimeGate` endpoint as follows:\n  * If a format is specified, it returns the description of the closest Memento (to the given datetime) in the specified format. It is essentially the same data that is available in the `Link` header of the `TimeGate` response, but as the payload in the format requested by the client.\n  * If a format is not specified, it redirects to the closest Memento (to the given datetime) using the `Location` header.\n  * If the term `proxy` is used instead of a format then it acts like a proxy for the closest original unmodified Memento with added CORS headers.\n* `About` endpoint reports the list of upstream archives, their status, and values of various configurations of the server.\n* `Monitor` is an optional endpoint that can be enabled by the `--monitor` flag when the server is started. If enabled, it provides a stream of the benchmark log over [SSE](http://www.html5rocks.com/en/tutorials/eventsource/basics/) for realtime visualization and monitoring.\n\n**NOTE:** A fallback endpoint `/api` is added for compatibility with [Time Travel APIs](http://timetravel.mementoweb.org/guide/api/#memento-json) to allow drop-in replacement in existing tools. This endpoint is an alias to the `/memento` endpoint that returns the description of a Memento.\n\n## Download and Install\n\nDepending on the machine and operating system download appropriate binary from the [releases page](https://github.com/oduwsdl/MemGator/releases). Change the mode of the file to executable `chmod +x MemGator-BINARY`. Run from the current location of the downloaded binary or rename it to `memgator` and move it into a directory that is in the `PATH` (such as `/usr/local/bin/`) to make it available as a command.\n\n## Running as a Docker Container\n\nBuild a Docker image locally from the source.\n\n```\n$ git clone https://github.com/oduwsdl/MemGator.git\n$ cd MemGator\n$ docker image build -t oduwsdl/memgator .\n```\n\nAlternatively, pull a published image from one of the two Docker image registries below:\n\n```\n$ docker image pull docker.pkg.github.com/oduwsdl/memgator/memgator\n$ docker image pull oduwsdl/memgator\n```\n\nRun MemGator with various options inside a Docker container.\n\n```\n$ docker container run -it --rm oduwsdl/memgator -h\n$ docker container run -it --rm oduwsdl/memgator [options] {URI-R}\n$ docker container run -it --rm oduwsdl/memgator [options] {URI-R} {YYYY[MM[DD[hh[mm[ss]]]]]}\n$ docker container run -d --name=memgator-server -p 1208:1208 oduwsdl/memgator [options] server\n$ curl -i http://localhost:1208/about\n$ docker container rm -f memgator-server\n```\n\n## Full Usage\n\n```\n   _____                  _______       __\n  /     \\  _____  _____  / _____/______/  |___________\n /  Y Y  \\/  __ \\/     \\/  \\  ___\\__  \\   _/ _ \\_   _ \\\n/   | |   \\  ___/  Y Y  \\   \\_\\  \\/ __ |  | |_| |  | \\/\n\\__/___\\__/\\____\\__|_|__/\\_______/_____|__|\\___/|__|\n\n# MemGator ({Version})\n\nA Memento Aggregator CLI and Server in Go\n\nUsage:\n  memgator [options] {URI-R}                            # TimeMap from CLI\n  memgator [options] {URI-R} {YYYY[MM[DD[hh[mm[ss]]]]]} # Description of the closest Memento from CLI\n  memgator [options] server                             # Run as a Web Service\n\nOptions:\n  -A, --agent=MemGator/{Version} <{CONTACT}>  User-agent string sent to archives\n  -a, --arcs=https://git.io/archives          Local/remote JSON file path/URL for list of archives\n  -b, --benchmark=                            Benchmark file location - defaults to Logfile\n  -c, --contact=https://git.io/MemGator       Comment/Email/URL/Handle - used in the user-agent\n  -D, --static=                               Directory path to serve static assets from\n  -d, --dormant=15m0s                         Dormant period after consecutive failures\n  -F, --tolerance=-1                          Failure tolerance limit for each archive\n  -f, --format=Link                           Output format - Link/JSON/CDXJ\n  -H, --host=localhost                        Host name - only used in web service mode\n  -k, --topk=-1                               Aggregate only top k archives based on probability\n  -l, --log=                                  Log file location - defaults to STDERR\n  -m, --monitor=false                         Benchmark monitoring via SSE\n  -P, --proxy=http://{HOST}[:{PORT}]{ROOT}    Proxy URL - defaults to host, port, and root\n  -p, --port=1208                             Port number - only used in web service mode\n  -R, --root=/                                Service root path prefix\n  -r, --restimeout=1m0s                       Response timeout for each archive\n  -S, --spoof=false                           Spoof each request with a random user-agent\n  -T, --hdrtimeout=30s                        Header timeout for each archive\n  -t, --contimeout=5s                         Connection timeout for each archive\n  -V, --verbose=false                         Show Info and Profiling messages on STDERR\n  -v, --version=false                         Show name and version\n```\n\n## Build\n\nAssuming that Git and Go (version >= 1.14) are installed. Cloning, running, building, and installing the code can be done using following commands:\n\n```\n$ git clone https://github.com/oduwsdl/MemGator.git\n$ cd MemGator\n$ go run main.go\n$ go build\n$ go install\n$ memgator --help\n$ memgator http://example.com/\n```\n\nTo compile cross-platform binaries run the `crossbuild.sh` script:\n\n```\n$ ./crossbuild.sh\n```\n\nThis will generate binaries for various OSes and Architectures in `/tmp/mgbins` directory.\n\n## Citing Project\n\nA publication related to this project appeared in the proceedings of JCDL 2016 ([Read the PDF](https://www.cs.odu.edu/~mln/pubs/jcdl-2016/jcdl-2016-alam-memgator.pdf)). Please cite it as below:\n\n> Sawood Alam, Michael Nelson. __MemGator - A Portable Concurrent Memento Aggregator: Cross-Platform CLI and Server Binaries in Go__. In _Proceedings of the 16th ACM/IEEE-CS on Joint Conference on Digital Libraries, JCDL 2016_, pp. 243-244, Newark, New Jersey, USA, June 2016.\n\n```bib\n@inproceedings{jcdl-2016:alam:memgator,\n  author    = {Sawood Alam and\n               Michael L. Nelson},\n  title     = {{MemGator - A Portable Concurrent Memento Aggregator}},\n  booktitle = {Proceedings of the 16th ACM/IEEE-CS Joint Conference on Digital Libraries},\n  series    = {JCDL '16},\n  year      = {2016},\n  month     = {jun},\n  location  = {Newark, New Jersey, USA},\n  pages     = {243--244},\n  numpages  = {2},\n  url       = {http://dx.doi.org/10.1145/2910896.2925452},\n  doi       = {10.1145/2910896.2925452},\n  isbn      = {978-1-4503-4229-2},\n  publisher = {ACM},\n  address   = {New York, NY, USA}\n}\n```\n",
  "permissions": {
    "read": true,
    "write": false,
    "admin": false
  },
  "media_types": [
    "application/vnd.docker.container.image.v1+json"
  ],
  "content_types": [
    "image"
  ]
}