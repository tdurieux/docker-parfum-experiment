{
  "user": "maplesond",
  "name": "portcullis",
  "namespace": "maplesond",
  "repository_type": "image",
  "status": 1,
  "status_description": "active",
  "description": "Splice junction analysis and filtering from BAM files",
  "is_private": false,
  "is_automated": false,
  "can_edit": false,
  "star_count": 0,
  "pull_count": 1088,
  "last_updated": "2019-08-04T21:01:50.928387Z",
  "date_registered": "2018-10-01T21:53:18.775228Z",
  "collaborator_count": 0,
  "affiliation": null,
  "hub_user": "maplesond",
  "has_starred": false,
  "full_description": "![alt text](doc/source/images/portcullis_logo.png \"Portcullis\")\n\nPortcullis\n==========\n\n[![Version](https://img.shields.io/github/tag/maplesond/portcullis.svg)](https://github.com/maplesond/portcullis/releases)\n[![Build Status](https://jenkins.sdlmapleson.net/buildStatus/icon?job=portcullis%2Fdevelop)](https://jenkins.sdlmapleson.net/job/portcullis/job/develop/)\n[![License: GPL v3](https://img.shields.io/badge/License-GPL%20v3-brightgreen.svg)](https://github.com/maplesond/portcullis/blob/master/LICENSE)\n[![Issues](https://img.shields.io/github/issues-raw/maplesond/portcullis.svg)](https://github.com/maplesond/portcullis/issues)\n\nPortcullis stands for PORTable CULLing of Invalid Splice junctions from pre-aligned RNA-seq data.  It is known that RNAseq mapping tools generate many invalid junction predictions, particularly in deep datasets with high coverage over splice sites.  In order to address this, instead for creating a new RNAseq mapper, with a focus on SJ accuracy we created a tool that takes in a BAM file generated by an RNAseq mapper of the user's own choice (e.g. Tophat2, Gsnap, STAR2 or HISAT2) as input (i.e. it's portable).  It then, analyses and quantifies all splice junctions in the file before, filtering (culling) those which are unlikely to be genuine.  Portcullis output's junctions in a variety of formats making it suitable for downstream analysis (such as differential splicing analysis and gene modelling) without additional work.  Portcullis can also filter the original BAM file removing alignments associated with *bad* junctions.  Both the filtered junctions and BAM files are cleaner and more usable resources which can more effectively be used to assist in downstream analyses such as gene prediction and genome annotation.\n\nInstallation\n------------\n\nWe support multiple methods for installing and running portcullis.  Hopefully your favourite container or package manager is supported below.  If not let us know and we'll try to work to get it integrated there.\n\n**Docker**\n\n[![Docker Pulls](https://img.shields.io/docker/pulls/maplesond/portcullis.svg)](https://hub.docker.com/r/maplesond/portcullis)  \n\n```\n# Keep in mind you need to mount in any working directories to the container with the `-v` option.\n# Ideally, mount these into the /data directory which is the container's working directory.\ndocker run --it --rm -v /abspath/to/data/on/host:/data maplesond/portcullis:stable portcullis --help\n```\n\n**Singularity**\n\n\n```\n# First download the container:\nsingularity pull --name portcullis.img shub://maplesond/portcullis:master\n\n# Then to execute commands in the container:\nsingularity exec portcullis.img portcullis --help\n```\n\n**Conda**\n\n[![Anaconda-Server Badge](https://anaconda.org/bioconda/portcullis/badges/latest_release_date.svg)](https://anaconda.org/bioconda/portcullis)\n[![Anaconda-Server Badge](https://anaconda.org/bioconda/portcullis/badges/platforms.svg)](https://anaconda.org/bioconda/portcullis)\n[![Anaconda-Server Badge](https://anaconda.org/bioconda/portcullis/badges/downloads.svg)](https://anaconda.org/bioconda/portcullis)\n\n```\nconda install portcullis --channel=bioconda\n```\n\n**Brew**\n\n```\nbrew install brewsci/bio/portcullis\n```\n\n\n**From source**\n\n[![Downloads](https://img.shields.io/github/downloads/maplesond/portcullis/total.svg)](https://github.com/maplesond/portcullis/releases)\n\nIf you wish to install from source please first confirm that first you have these dependencies are installed and configured:\n\n - **GCC** V4.8+\n - **autoconf** V2.53+\n - **automake** V1.11+\n - **make**\n - **libtool** V2.4.2+\n - **zlib-dev**\n - **pthreads**\n - **boost-dev** V1.52+\n - **samtools** V1.2+\n - **Python3-dev** V3.5+ (Make sure the following packages are installed: *pandas*, *matplotlib*, *setuptools*, *sphinx*, *tabulate*)\n\nThen proceed with the following steps:\n\n```\n# Clone the repo\ngit clone git@github.com:maplesond/portcullis.git\n\n# Move into repo directory\ncd portcullis\n\n# Generate configure script\n./autogen.sh\n\n# Confirm dependencies and generate makefiles\n# Adding --prefix <dir> will tell make install to put everything in a \n# particular directory.  Default is /usr/local.\n./configure\n\n# Compile (increasing -j will make it go faster!\nmake -j 2\n\n# Run some unit tests (you can increase -j here too)\nmake -j 2 check\n\n# Install to prefix dir\nmake install\n```\n\n**Common problems**\n\n- Many system python installations do not come with the C API immediately available, which prevents Portcullis from embedding python code.  We typically would recommend installing anaconda3 as this would include the latest version of python, all required python packages as well as the C API.  If you are running a debian system and the C libraries are not available by default and you wish to use the system python installation the you can install them using: ``sudo apt-get install python-dev``.  Also, if you have installed python to a custom location please verify that the *bin* directors on the *PATH* environment variable, and the lib (or lib64) directory is on the *LD_LIBRARY_PATH* or *LD_RUN_PATH* as appropriate.\n\n- If Portcullis is failing at the ```./autogen.sh``` step you will likely need to install autotools.  The following command should do this on MacOS: ```brew install autoconf automake libtool```.  On a debian system this can be done with: ```sudo apt-get install autoconf automake libtool```.\n\n\nQuickstart\n----------\n\nAfter portcullis has been installed, the ```portcullis``` executable should be available.  Typing ```portcullis``` or ```portcullis --help``` at the command line will present you with the portcullis help message.\n\nThese modes are available:\n\n - **prep**    - Prepares input data so that it is suitable for junction analysis\n - **junc**    - Calculates junction metrics for the prepared data\n - **filter**  - Separates alignments based on whether they are likely to represent genuine splice junctions or not\n - **bamfilt** - Filters a BAM to remove any reads associated with invalid junctions\n - **full**    - Runs prep, junc, filter and optionally bamfilt as a complete pipeline\n\nTyping ```portcullis <mode> --help``` will bring up help and usage information specific to that mode.\n\nIn addition to portcullis, we provide a tool-suite for manipulating junction files called junctools.  Typing ```junctools --help``` will provide you with the program options.\n\nFor much more information about portcullis' capabilities and how to configure and run it, an online version of the manual can be found here: [https://portcullis.readthedocs.org/en/latest/](https://portcullis.readthedocs.org/en/latest/).\n\n\nLicensing\n---------\n\nGNU GPL V3.  See COPYING file for more details.\n\n\nAuthors\n-------\n\n * Daniel Mapleson\n * Luca Venturini\n * David Swarbreck\n\nSee AUTHORS file for more details.\n\n\nAcknowledgements\n----------------\n\nAffiliation: The Earlham Institute (EI)\nFunding: The Biotechnology and Biological Sciences Research Council (BBSRC)\n",
  "permissions": {
    "read": true,
    "write": false,
    "admin": false
  },
  "media_types": [
    "application/vnd.docker.container.image.v1+json"
  ],
  "content_types": [
    "image"
  ]
}