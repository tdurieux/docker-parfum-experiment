{
  "user": "steemit",
  "name": "condenser",
  "namespace": "steemit",
  "repository_type": "image",
  "status": 1,
  "status_description": "active",
  "description": "The front end application for steemit.com",
  "is_private": false,
  "is_automated": true,
  "can_edit": false,
  "star_count": 0,
  "pull_count": 28587,
  "last_updated": "2022-12-29T10:39:23.957134Z",
  "date_registered": "2018-04-18T20:36:05.248323Z",
  "collaborator_count": 0,
  "affiliation": null,
  "hub_user": "steemit",
  "has_starred": false,
  "full_description": "\n# Condenser\n\n\nCondenser is the react.js web interface to the world's first and best\nblockchain-based social media platform, steemit.com.  It uses\n[STEEM](https://github.com/steemit/steem), a blockchain powered by Graphene\n2.0 technology to store JSON-based content for a plethora of web\napplications.   \n\n## Why would I want to use Condenser (steemit.com front-end)?\n\n* Learning how to build blockchain-based web applications using STEEM as a\n  content storage mechanism in react.js\n* Reviewing the inner workings of the steemit.com social media platform\n* Assisting with software development for steemit.com\n\n## Installation\n\n#### Docker\n\nWe highly recommend using docker to run condenser. This is how we run the\nlive steemit.com site and it is the most supported (and fastest) method of\nboth building and running condenser. We will always have the latest version\nof condenser (master branch) available on Docker Hub. Configuration settings\ncan be set using environment variables (see configuration section below for\nmore information). If you need to install docker, you can get it at\nhttps://get.docker.com\n\nTo bring up a running container it's as simple as this:\n\n```bash\ndocker run -it -p 8080:8080 steemit/condenser\n```\n\nEnvironment variables can be added like this:\n\n```bash\ndocker run -it --env SDC_DATABASE_URL=\"mysql://user:pass@hostname/databasename\" -p 8080:8080 steemit/condenser\n```\n\nIf you would like to modify, build, and run condenser using docker, it's as\nsimple as pulling in the github repo and issuing one command to build it,\nlike this:\n\n```bash\ngit clone https://github.com/steemit/condenser\ncd condenser\ndocker build -t=\"myname/condenser:mybranch\" .\ndocker run -it -p 8080:8080 myname/condenser:mybranch\n```\n\n## Building from source without docker (the 'traditional' way):\n\n#### Clone the repository and make a tmp folder\n\n```bash\ngit clone https://github.com/steemit/condenser\ncd condenser\nmkdir tmp\n```\n\n#### Install dependencies\n\nInstall at least Node v8.7 if you don't already have it. We recommend using\n`nvm` to do this as it's both the simplest way to install and manage\ninstalled version(s) of node. If you need `nvm`, you can get it at\n[https://github.com/creationix/nvm](https://github.com/creationix/nvm).\n\nCondenser is known to successfully build using node 8.7, npm 5.4.2, and\nyarn 1.3.2.\n\nUsing nvm, you would install like this:\n\n```bash\nnvm install v8.7\n```\n\nWe use the yarn package manager instead of the default `npm`. There are\nmultiple reasons for this, one being that we have `steem-js` built from\nsource pulling the github repo as part of the build process and yarn\nsupports this. This way the library that handles keys can be loaded by\ncommit hash instead of a version name and cryptographically verified to be\nexactly what we expect it to be. Yarn can be installed with `npm`, but\nafterwards you will not need to use `npm` further.\n\n```bash\nnpm install -g yarn\nyarn global add babel-cli\nyarn install --frozen-lockfile\nyarn run build\n```\nTo run condenser in production mode, run:\n\n```bash\nyarn run production\n```\n\nWhen launching condenser in production mode it will automatically use 1\nprocess per available core. You will be able to access the front-end at\nhttp://localhost:8080 by default.\n\nTo run condenser in development mode, run:\n\n```bash\nyarn run start\n```\n\nIt will take quite a bit longer to start in this mode (~60s) as it needs to\nbuild and start the webpack-dev-server.\n\nBy default you will be connected to steemit.com's public steem node at\n`wss://steemd.steeemit.com`. This is actually on the real blockchain and\nyou would use your regular account name and credentials to login - there is\nnot an official separate testnet at this time. If you intend to run a\nfull-fledged site relying on your own, we recommend looking into running a\ncopy of `steemd` locally instead\n[https://github.com/steemit/steem](https://github.com/steemit/steem).\n\n#### Debugging SSR code\n\n`yarn debug` will build a development version of the codebase and then start the\nlocal server with `--inspect-brk` so that you can connect a debugging client.\nYou can use Chromium to connect by finding the remote client at\n`chrome://inspect/#devices`.\n\n#### Configuration\n\nThe intention is to configure condenser using environment variables. You\ncan see the names of all of the available configuration environment\nvariables in `config/custom-environment-variables.json`. Default values are\nstored in `config/defaults.json`.\n\nEnvironment variables using an example like this:\n\n```bash\nexport SDC_CLIENT_STEEMD_URL=\"wss://steemd.steemit.com\"\nexport SDC_SERVER_STEEMD_URL=\"wss://steemd.steemit.com\"\n```\n\nKeep in mind environment variables only exist in your active session, so if\nyou wish to save them for later use you can put them all in a file and\n`source` them in.\n\nIf you'd like to statically configure condenser without variables you can\nedit the settings directly in `config/production.json`. If you're running\nin development mode, copy `config/production.json` to `config/dev.json`\nwith `cp config/production.json config/dev.json` and adjust settings in\n`dev.json`.\n\nIf you're intending to run condenser in a production environment one\nconfiguration option that you will definitely want to edit is\n`server_session_secret` which can be set by the environment variable\n`SDC_SESSION_SECRETKEY`. To generate a new value for this setting, you can\ndo this:\n\n```bash\nnode\n> crypto.randomBytes(32).toString('base64')\n> .exit\n```\n\n## Install mysql server\n\nIf you've followed the instructions up until this point you will already\nhave a running condenser installation which is entirely acceptable for\ndevelopment purposes. It is *not required to run a SQL server for\ndevelopment*. If you're running a full-fledged site however, you will want\nto set one up.\n\nOnce set up, you can set the mysql server configuration option for\ncondenser using the environment variable `SDC_DATABASE_URL`, or\nalternatively by editing it in `config/production.json`. You will use the\nformat `mysql://user:pass@hostname/databasename`.\n\nExample:\n\n```bash\nexport SDC_DATABASE_URL=\"mysql://root:password@127.0.0.1/steemit_dev\"\n```\n\nHere are instructions for setting up a mysql server and running the\nnecessary migrations by operating system:\n\nOS X:\n\n```bash\nbrew update\nbrew doctor\nbrew upgrade\nbrew install mysql\nmysql.server restart\n```\n\nDebian based Linux:\n\n```bash\nsudo apt-get update\nsudo apt-get install mysql-server\n```\n\nOn Ubuntu 16.04+ you may be unable to connect to mysql without root access,\nif so update the mysql root user as follows:\n\n```\nsudo mysql -u root\nDROP USER 'root'@'localhost';\nCREATE USER 'root'@'%' IDENTIFIED BY '';\nGRANT ALL PRIVILEGES ON *.* TO 'root'@'%';\nFLUSH PRIVILEGES;\n```\n\nNow launch mysql client and create steemit_dev database:\n```bash\nmysql -u root\n> create database steemit_dev;\n> quit\n```\n\n### Database migrations\n\nThis is a required step in order for the database to be 'ready' for\ncondenser's use.\n\nEdit the file `src/db/config/config.json` using your favorite command line\ntext editor being sure that the username, password, host, and database name\nare set correctly and match your newly configured mysql setup.\n\nRun `sequelize db:migrate` in `src/db` directory, like this:\n\n```bash\ncd src/db\nyarn exec sequelize db:migrate\n```\n\n## Style Guides For Submitting Pull Requests\n\n### File naming and location\n\n- Prefer CamelCase js and jsx file names\n- Prefer lower case one word directory names\n- Keep stylesheet files close to components\n- Component's stylesheet file name should match component name\n\n#### Js & Jsx\n\nWe use [prettier](https://github.com/prettier/prettier) to autofromat the\ncode, with [this configuration](.prettierrc). Run `yarn run fmt` to format\neverything in `src/`, or `yarn exec -- prettier --config .prettierrc\n--write src/whatever/file.js` for a specific file.\n\n#### CSS & SCSS\n\nIf a component requires a css rule, please use its uppercase name for the\nclass, e.g. \"Header\" class for the header's root div.  We adhere to BEM\nmethodology with exception for Foundation classes, here is an example for\nthe Header component:\n\n```html\n<!-- Block -->\n<ul class=\"Header\">\n  ...\n  <!-- Element -->\n  <li class=\"Header__menu-item\">Menu Item 1</li>\n  <!-- Element with modifier -->\n  <li class=\"Header__menu-item--selected\">Element with modifier</li>\n</ul>\n```\n\n## Storybook\n\n`yarn run storybook`\n\n## Testing\n\n### Run test suite\n\n`yarn test`\n\nwill run `jest`\n\n### Test endpoints offline\n\nIf you want to test a server-side rendered page without using the network, do this:\n\n```\nyarn build\nOFFLINE_SSR_TEST=true SDC_DATABASE_URL=\"mysql://root@127.0.0.1/steemit_dev\" NODE_ENV=production node --prof lib/server/index.js\n```\n\nThis will read data from the blobs in `api_mockdata` directory. If you want to use another set of mock data, create a similar directory to that one and add an argument `OFFLINE_SSR_TEST_DATA_DIR` pointing to your new directory.\n\n### Run blackbox tests using nightwatch\n\nTo run a Selenium test suite, start the condenser docker image with a name `condenser` (like `docker run --name condenser -itp 8080:8080 steemit/condenser:latest`) and then run the blackboxtest image attached to the condneser image's network:\n\n```\ndocker build -t=steemit/condenser-blackboxtest blackboxtest/\ndocker run --network container:condenser steemit/condenser-blackboxtest:latest\n\n```\n\n## Issues\n\nTo report a non-critical issue, please file an issue on this GitHub project.\n\nIf you find a security issue please report details to: security@steemit.com\n\nWe will evaluate the risk and make a patch available before filing the issue.\n",
  "permissions": {
    "read": true,
    "write": false,
    "admin": false
  },
  "media_types": [
    "application/vnd.docker.container.image.v1+json",
    "application/vnd.docker.distribution.manifest.v1+prettyjws"
  ],
  "content_types": [
    "image"
  ]
}