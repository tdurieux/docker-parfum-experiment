{
  "user": "gthole",
  "name": "gedgo",
  "namespace": "gthole",
  "repository_type": "image",
  "status": 1,
  "status_description": "active",
  "description": "A Gedcom viewer web app.",
  "is_private": false,
  "is_automated": true,
  "can_edit": false,
  "star_count": 0,
  "pull_count": 93,
  "last_updated": "2021-05-28T13:22:31.644512Z",
  "date_registered": "2018-06-04T17:41:42.672141Z",
  "collaborator_count": 0,
  "affiliation": null,
  "hub_user": "gthole",
  "has_starred": false,
  "full_description": "# Ged-go\nA Gedcom viewer web app.\n\n## About\n\nGed-go is a Gedcom file viewer web app written in Django with d3.js\nvisualizations and Bootstrap for mobile scaffolding, with the idea that a\ngenealogy website and gedcom viewer can be beautiful and intuitive.\n\nMost of the web-based genealogy software out there is pretty ugly and\ndifficult to navigate in.  There are often silly little icons and\ninformation is presented in hard to read tables.  Instead, the philosophy of\nGed-go is to have fewer features, but to present a gedcom in a clear and well\ndesigned way.\n\n\n## Features\n\n- Individual view\n  - Easy to read podded display\n  - Pedigree charts\n  - Timeline of events coincided with major world historical events\n- Gedcom view\n- Basic search\n- Blog\n  - Tag people in a blog post, and those posts automatically appear in that\n    person's individual view.\n- Page for displaying documentary videos\n- Email contact form\n- Secure login and Admin pages\n- Gedcom parser and update mechanism\n- Automatic thumbnail creation\n- Responsive design for all levels of mobile browsing\n\n\n## Development Environment Setup\n\nDevelopment installation is fairly straight-forward.  We use the Docker toolbox\nto abstract away dependencies on the development environment so you don't have\nto install packages or a have a database running in order to get started.\n\n#### Dependencies\n\nDownload and install [Docker](https://www.docker.com/community-edition).  Test\nthat it works with `$ docker ps`\n\nClone this repo and `cd` into it.\n\n```bash\n# Build the docker images\n$ docker-compose build\n```\n\n#### Importing Data\n\nWith the images built locally, you can import data from your gedcom file into\nthe application.\n\nCopy any documents (like photos or PDFs) that your gedcom file references into\n`./files/gedcom/` (you may need to create that directory), and copy your\ngedcom to the base gedgo directory.\n\nThen run the import:\n\n```bash\n# Create the database tables\n$ docker-compose run app python manage.py migrate\n\n# Create a user for yourself\n$ docker-compose run app python manage.py createsuperuser\n\n# Import your gedcom file\n$ docker-compose run app python manage.py add_gedcom your-gedcom-file.ged\n```\n\nThe initial import may take a while, since it creates thumbnails for any\nimages.\n\n#### Running the application\n\nStart up the web server and worker with\n\n```bash\n$ docker-compose up\n```\n\nIf you're running a Mac you can go to [http://gedgo.local](http://gedgo.local),\nor just [localhost](http://localhost).\n\n#### Overriding settings\n\nDrop any settings overrides (like `SECRET_KEY` or `EMAIL_*` settings) in\n`./settings_local.py` to have them auto-imported into your setup.\n\n#### Using Dropbox Files\nDropbox generates previews for more types of files than are supported with the\nbase file system storage.  Storing your gedcom images and documents there can\nalso make it easier to keep them in sync between your genealogy application and\nthe Gedgo server.\n\nTo do this, get a Dropbox OAuth token, and add it to your local settings and\ntell Gedgo to use the Dropbox storage:\n\n```\nDROPBOX_ACCESS_TOKEN = '<your-access-token>\nGEDGO_GEDCOM_FILE_STORAGE = 'gedgo.storages.DropBoxSearchableStorage'\nGEDGO_GEDCOM_FILE_ROOT = '<dropbox path to your genealogy files>'\n```\n\n#### Updating Gedcoms\nTo update your gedcom, you can either use the manage.py command, passing it\nthe integer ID of the gedcom object you'd like to update, for example:\n\n```bash\n$ docker-compose run app python manage.py update_gedcom 1 your-gedcom-file.ged\n```\n\nOr, with the Celery worker running, you can use the web interface.\n\n\n#### Running the tests\nYou can run the unit tests with:\n\n```bash\n$ docker-compose run app ./test.sh\n```\n",
  "permissions": {
    "read": true,
    "write": false,
    "admin": false
  },
  "media_types": [
    "application/vnd.docker.container.image.v1+json"
  ],
  "content_types": [
    "image"
  ]
}