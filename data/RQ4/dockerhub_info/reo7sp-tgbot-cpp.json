{
  "user": "reo7sp",
  "name": "tgbot-cpp",
  "namespace": "reo7sp",
  "repository_type": "image",
  "status": 1,
  "status_description": "active",
  "description": "C++ library for Telegram bot API",
  "is_private": false,
  "is_automated": true,
  "can_edit": false,
  "star_count": 2,
  "pull_count": 878,
  "last_updated": "2023-01-04T20:25:36.194131Z",
  "date_registered": "2015-08-12T11:30:50.051458Z",
  "collaborator_count": 0,
  "affiliation": null,
  "hub_user": "reo7sp",
  "has_starred": false,
  "full_description": "# tgbot-cpp\n\n[![Travis build Status](https://travis-ci.org/reo7sp/tgbot-cpp.svg?branch=master)](https://travis-ci.org/reo7sp/tgbot-cpp)\n<br>\n[![GitHub contributors](https://img.shields.io/github/contributors/reo7sp/tgbot-cpp.svg)](https://github.com/reo7sp/tgbot-cpp/graphs/contributors)\n\nC++14 library for Telegram bot API.\n\nDocumentation is located [here](http://reo7sp.github.io/tgbot-cpp).\n\n\n## State\n\n- [x] Bot API 3.0 ~ 3.6\n- [x] Bot API 4.0 ~ 4.4 (Implemented all APIs except 'Telegram Passport')\n\n\n## Sample\n\nSimple echo bot which sends everything it receives:\n```cpp\n#include <stdio.h>\n#include <tgbot/tgbot.h>\n\nint main() {\n    TgBot::Bot bot(\"PLACE YOUR TOKEN HERE\");\n    bot.getEvents().onCommand(\"start\", [&bot](TgBot::Message::Ptr message) {\n        bot.getApi().sendMessage(message->chat->id, \"Hi!\");\n    });\n    bot.getEvents().onAnyMessage([&bot](TgBot::Message::Ptr message) {\n        printf(\"User wrote %s\\n\", message->text.c_str());\n        if (StringTools::startsWith(message->text, \"/start\")) {\n            return;\n        }\n        bot.getApi().sendMessage(message->chat->id, \"Your message is: \" + message->text);\n    });\n    try {\n        printf(\"Bot username: %s\\n\", bot.getApi().getMe()->username.c_str());\n        TgBot::TgLongPoll longPoll(bot);\n        while (true) {\n            printf(\"Long poll started\\n\");\n            longPoll.start();\n        }\n    } catch (TgBot::TgException& e) {\n        printf(\"error: %s\\n\", e.what());\n    }\n    return 0;\n}\n```\n\nAll other samples are located [here](samples).\n\n\n## Dependencies\n\nFirstly you need to install some dependencies such as Boost and build tools such as CMake. On Debian-based distibutives you can do it with these commands:\n```sh\nsudo apt-get install g++ make binutils cmake libssl-dev libboost-system-dev zlib1g-dev\n```\nIf you want to use curl-based http client `CurlHttpClient`, you also need to install `libcurl4-openssl-dev` package.\n\n## Library installation\n\nIf you want to install the library system-wide:\n```sh\ngit clone https://github.com/reo7sp/tgbot-cpp\ncd tgbot-cpp\ncmake .\nmake -j4\nsudo make install\n```\n\nYou can treat this repository as a submodule of your project, for example, see [echobot-submodule](samples/echobot-submodule/CMakeLists.txt)\n\nYou can use Docker to build and run your bot. Set the base image of your's Dockerfile to [reo7sp/tgbot-cpp](https://hub.docker.com/r/reo7sp/tgbot-cpp/).\n\n\n## Bot compilation\n\n### With CMake\n[Example CMakeLists.txt](samples/echobot/CMakeLists.txt)\n\n### Without CMake\n```sh\ng++ telegram_bot.cpp -o telegram_bot --std=c++14 -I/usr/local/include -lTgBot -lboost_system -lssl -lcrypto -lpthread\n```\n\n### Build options\n```\n-DTGBOT_DISABLE_NAGLES_ALGORITHM   # Disable 'Nagle's algorithm'\n-DTGBOT_CHANGE_SOCKET_BUFFER_SIZE  # Socket Buffer Size Expansion\n-DTGBOT_CHANGE_READ_BUFFER_SIZE    # Read Buffer Size Expansion\n```\n\n\n## Licence\n[The MIT License](https://github.com/reo7sp/tgbot-cpp/blob/master/LICENSE).\n",
  "permissions": {
    "read": true,
    "write": false,
    "admin": false
  },
  "media_types": [
    "application/vnd.docker.container.image.v1+json"
  ],
  "content_types": [
    "image"
  ]
}