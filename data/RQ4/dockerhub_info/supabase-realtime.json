{
  "user": "supabase",
  "name": "realtime",
  "namespace": "supabase",
  "repository_type": "image",
  "status": 1,
  "status_description": "active",
  "description": "",
  "is_private": false,
  "is_automated": false,
  "can_edit": false,
  "star_count": 5,
  "pull_count": 892844,
  "last_updated": "2023-01-05T20:56:58.653406Z",
  "date_registered": "2019-09-23T12:19:49.255394Z",
  "collaborator_count": 0,
  "affiliation": null,
  "hub_user": "supabase",
  "has_starred": false,
  "full_description": "<br />\n<p align=\"center\">\n  <a href=\"https://supabase.io\">\n        <picture>\n      <source media=\"(prefers-color-scheme: dark)\" srcset=\"https://raw.githubusercontent.com/supabase/supabase/master/packages/common/assets/images/supabase-logo-wordmark--dark.svg\">\n      <source media=\"(prefers-color-scheme: light)\" srcset=\"https://raw.githubusercontent.com/supabase/supabase/master/packages/common/assets/images/supabase-logo-wordmark--light.svg\">\n      <img alt=\"Supabase Logo\" width=\"300\" src=\"https://raw.githubusercontent.com/supabase/supabase/master/packages/common/assets/images/logo-preview.jpg\">\n    </picture>\n  </a>\n\n  <h1 align=\"center\">Supabase Realtime</h1>\n\n  <p align=\"center\">\n    Send ephemeral messages, track and synchronize shared state, and listen to Postgres changes all over WebSockets.\n    <br />\n    <a href=\"https://multiplayer.dev\">Multiplayer Demo</a>\n    ·\n    <a href=\"https://github.com/supabase/realtime/issues/new?assignees=&labels=enhancement&template=2.Feature_request.md\">Request Feature</a>\n    ·\n    <a href=\"https://github.com/supabase/realtime/issues/new?assignees=&labels=bug&template=1.Bug_report.md\">Report Bug</a>\n    <br />\n  </p>\n</p>\n\n\n## Status\n\n| Features         |    v1    |    v2    |  Status  |\n|------------------|----------|----------|----------|\n| Postgres Changes |     ✔    |     ✔    |    GA    |\n| Broadcast        |          |     ✔    |   Beta   |  \n| Presence         |          |     ✔    |   Beta   |\n\nThis repository focuses on version 2 but you can still access the previous version's [code](https://github.com/supabase/realtime/tree/v1) and [Docker image](https://hub.docker.com/layers/supabase/realtime/v1.0.0/images/sha256-e2766e0e3b0d03f7e9aa1b238286245697d0892c2f6f192fd2995dca32a4446a). For the latest Docker images go to https://hub.docker.com/r/supabase/realtime.\n\nThe codebase is under heavy development and the documentation is constantly evolving. Give it a try and let us know what you think by creating an issue. Watch [releases](https://github.com/supabase/realtime/releases) of this repo to get notified of updates. And give us a star if you like it!\n\n\n## Overview\n\n### What is this?\n\nThis is a server built with Elixir using the [Phoenix Framework](https://www.phoenixframework.org) that enables the following functionality:\n\n- Broadcast: Send ephemeral messages from client to clients with low latency.\n- Presence: Track and synchronize shared state between clients.\n- Postgres Changes: Listen to Postgres database changes and send them to authorized clients.\n\nFor a more detailed overview head over to [Realtime guides](https://supabase.com/docs/guides/realtime).\n\n### Does this server guarantee message delivery?\n\nThe server does not guarantee that every message will be delivered to your clients so keep that in mind as you're using Realtime. \n\n\n## Quick start\n\nYou can check out the [Multiplayer demo](https://multiplayer.dev) that features Broadcast, Presence and Postgres Changes under the demo directory: https://github.com/supabase/realtime/tree/main/demo.\n\n\n## Client libraries\n\n- JavaScript: [@supabase/realtime-js](https://github.com/supabase/realtime-js)\n- Dart: [@supabase/realtime-dart](https://github.com/supabase/realtime-dart)\n\n\n## Server Setup\n\nTo get started, spin up your Postgres database and Realtime server containers defined in `docker-compose.yml`. As an example, you may run `docker-compose -f docker-compose.yml up`.\n\n> **Note**  \n> Supabase runs Realtime in production with a separate database that keeps track of all tenants. However, a schema, `_realtime`, is created when spinning up containers via `docker-compose.yml` to simplify local development.\n\nA tenant has already been added on your behalf. You can confirm this by checking the `_realtime.tenants` and `_realtime.extensions` tables inside the database.\n\nYou can add your own by making a `POST` request to the server. You must change both `name` and `external_id` while you may update other values as you see fit:\n\n```bash\n  curl -X POST \\\n  -H 'Content-Type: application/json' \\\n  -H 'Authorization: Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiIiLCJpYXQiOjE2NzEyMzc4NzMsImV4cCI6MTcwMjc3Mzk5MywiYXVkIjoiIiwic3ViIjoiIn0._ARixa2KFUVsKBf3UGR90qKLCpGjxhKcXY4akVbmeNQ' \\\n  -d $'{\n    \"tenant\" : {\n      \"name\": \"realtime-dev\",\n      \"external_id\": \"realtime-dev\",\n      \"jwt_secret\": \"a1d99c8b-91b6-47b2-8f3c-aa7d9a9ad20f\",\n      \"extensions\": [\n        {\n          \"type\": \"postgres_cdc_rls\",\n          \"settings\": {\n            \"db_name\": \"postgres\",\n            \"db_host\": \"host.docker.internal\",\n            \"db_user\": \"postgres\",\n            \"db_password\": \"postgres\",\n            \"db_port\": \"5432\",\n            \"region\": \"us-west-1\",\n            \"poll_interval_ms\": 100,\n            \"poll_max_record_bytes\": 1048576,\n            \"ip_version\": 4\n          }\n        }\n      ]\n    }\n  }' \\\n  http://localhost:4000/api/tenants\n```\n\n> **Note**  \n> The `Authorization` token is signed with the secret set by `API_JWT_SECRET` in `docker-compose.yml`.\n\nIf you want to listen to Postgres changes, you can create a table and then add the table to the `supabase_realtime` publication:\n\n```sql\ncreate table test (\n  id serial primary key\n);\n\nalter publication supabase_realtime add table test;\n```\n\nYou can start playing around with Broadcast, Presence, and Postgres Changes features either with the client libs (e.g. `@supabase/realtime-js`), or use the built in Realtime Inspector on localhost, `http://localhost:4000/inspector/new` (make sure the port is correct for your development environment).\n\nThe WebSocket URL must contain the subdomain, `external_id` of the tenant on the `_realtime.tenants` table, and the token must be signed with the `jwt_secret` that was inserted along with the tenant.\n\nIf you're using the default tenant, the URL is `ws://realtime-dev.localhost:4000/socket` (make sure the port is correct for your development environment), and you can use `eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE3MDMwMjgwODcsInJvbGUiOiJwb3N0Z3JlcyJ9.tz_XJ89gd6bN8MBpCl7afvPrZiBH6RB65iA1FadPT3Y` for the token. The token must have `exp` and `role` (database role) keys.\n\n**ALL RELEVANT OPTIONS**\n\n> **Note**  \n> Realtime server is tightly coupled to [Fly.io](https://fly.io) at the moment.\n\n```sh\nPORT                       # {number}      Port which you can connect your client/listeners\nDB_HOST                    # {string}      Database host URL\nDB_PORT                    # {number}      Database port\nDB_USER                    # {string}      Database user\nDB_PASSWORD                # {string}      Database password\nDB_NAME                    # {string}      Postgres database name\nDB_ENC_KEY                 # {string}      Key used to encrypt sensitive fields in _realtime.tenants and _realtime.extensions tables. Recommended: 16 characters.\nDB_AFTER_CONNECT_QUERY     # {string}      Query that is run after server connects to database.\nAPI_JWT_SECRET             # {string}      Secret that is used to sign tokens used to manage tenants and their extensions via HTTP requests.\nFLY_ALLOC_ID               # {string}      This is auto-set when deploying to Fly. Otherwise, set to any string.\nFLY_APP_NAME               # {string}      A name of the server.\nFLY_REGION                 # {string}        Name of the region that the server is running in. Fly auto-sets this on deployment. Otherwise, set to any string.\nSECRET_KEY_BASE            # {string}      Secret used by the server to sign cookies. Recommended: 64 characters.\nERL_AFLAGS                 # {string}      Set to either \"-proto_dist inet_tcp\" or \"-proto_dist inet6_tcp\" depending on whether or not your network uses IPv4 or IPv6, respectively.\nENABLE_TAILSCALE           # {string}      Use Tailscale for private networking. Set to either 'true' or 'false'.\nTAILSCALE_APP_NAME         # {string}      Name of the Tailscale app.\nTAILSCALE_AUTHKEY          # {string}      Auth key for the Tailscape app.\nDNS_NODES                  # {string}      Node name used when running server in a cluster.\nMAX_CONNECTIONS            # {string}     Set the soft maximum for WebSocket connections. Defaults to '16384'.\nNUM_ACCEPTORS              # {string}     Set the number of server processes that will relay incoming WebSocket connection requests. Defaults to '100'.\nDB_QUEUE_TARGET            # {string}     Maximum time to wait for a connection from the pool. Defaults to '5000' or 5 seconds. See for more info: https://hexdocs.pm/db_connection/DBConnection.html#start_link/2-queue-config.\nDB_QUEUE_INTERVAL          # {string}     Interval to wait to check if all connections were checked out under DB_QUEUE_TARGET. If all connections surpassed the target during this interval than the target is doubled. Defaults to '5000' or 5 seconds. See for more info: https://hexdocs.pm/db_connection/DBConnection.html#start_link/2-queue-config.\nDB_POOL_SIZE               # {string}     Sets the number of connections in the database pool. Defaults to '5'.\nSLOT_NAME_SUFFIX           # {string}     This is appended to the replication slot which allows making a custom slot name. May contain lowercase letters, numbers, and the underscore character. Together with the default `supabase_realtime_replication_slot`, slot name should be up to 64 characters long.\n```\n\n\n## Websocket Connection Authorization\n\nWebsocket connections are authorized via symmetric JWT verification. Only supports JWTs signed with the following algorithms:\n  - HS256\n  - HS384\n  - HS512\n\nVerify JWT claims by setting JWT_CLAIM_VALIDATORS:\n\n  > e.g. {'iss': 'Issuer', 'nbf': 1610078130}\n  >\n  > Then JWT's \"iss\" value must equal \"Issuer\" and \"nbf\" value must equal 1610078130.\n\n> **Note:**  \n> JWT expiration is checked automatically. `exp` and `role` (database role) keys are mandatory.\n\n**Authorizing Client Connection**: You can pass in the JWT by following the instructions under the Realtime client lib. For example, refer to the **Usage** section in the [@supabase/realtime-js](https://github.com/supabase/realtime-js) client library.\n\n\n## License\n\nThis repo is licensed under Apache 2.0.\n\n\n## Credits\n\n- [Phoenix](https://github.com/phoenixframework/phoenix) - `Realtime` server is built with the amazing Elixir framework.\n- [Phoenix Channels JavaScript Client](https://github.com/phoenixframework/phoenix/tree/master/assets/js/phoenix) - [@supabase/realtime-js](https://github.com/supabase/realtime-js) client library heavily draws from the Phoenix Channels client library.",
  "permissions": {
    "read": true,
    "write": false,
    "admin": false
  },
  "media_types": [
    "application/vnd.docker.container.image.v1+json",
    "application/vnd.docker.distribution.manifest.list.v2+json"
  ],
  "content_types": [
    "image"
  ]
}