{
  "user": "tdiary",
  "name": "rpaproxy-sinatra",
  "namespace": "tdiary",
  "repository_type": "image",
  "status": 1,
  "status_description": "active",
  "description": "",
  "is_private": false,
  "is_automated": true,
  "can_edit": false,
  "star_count": 1,
  "pull_count": 332,
  "last_updated": "2019-02-24T13:41:06.200612Z",
  "date_registered": "2015-05-21T03:54:39.931174Z",
  "collaborator_count": 0,
  "affiliation": null,
  "hub_user": "tdiary",
  "has_starred": false,
  "full_description": "# Product Advertising API用リバースプロキシ\n\n[![Build Status](https://travis-ci.org/tdiary/rpaproxy-sinatra.svg?branch=master)](https://travis-ci.org/tdiary/rpaproxy-sinatra)\n[![Code Climate](https://codeclimate.com/github/tdiary/rpaproxy-sinatra.png)](https://codeclimate.com/github/tdiary/rpaproxy-sinatra)\n\n## What is it?\n\nAmazon Web ServicesのProduct Advertising API用の認証処理を代行するプロキシ(amazon-auth-proxy仕様準拠)の負荷分散を行うリバース・プロキシです。\n\n上記のエンドポイント宛にProduct Advertising API（旧：Amazon アソシエイト Web サービス）のRESTエンドポイント用クエリを付けて送信すると、登録されているプロキシの中からラウンドロビンに選択して要求を中継し、応答を返します。\n\n# Install and running on Docker\n\nThe docker image is published on docker repositories.\n\n * [hub.docker.com](https://registry.hub.docker.com/u/tdiary/rpaproxy-sinatra/)\n * [quay.io](https://quay.io/repository/tdiary/rpaproxy-sinatra)\n\n## Running rpaproxy in a development environment.\n\nStart a mongodb container. This container is taken from official mongodb image.\n\n```\n$ docker run -d --name mongodb1 mongo\n```\n\nStart the reverse proxy app.\n\n```\n$ docker run --rm -p 80:3000 --link mongodb1:mongodb tdiary/rpaproxy-sinatra\n```\n\nThen, access it via `http://localhost` in a browser.\n\n## Running rpaproxy in a production environment.\n\nIn a productino environment, this application requires memcached container to store session data. \n\nYou can run rpaproxy with docker-compose.\n\n```\n$ curl -O https://raw.githubusercontent.com/tdiary/rpaproxy-sinatra/master/docker-compose.yml\n$ export TWITTER_KEY=your_twitter_key\n$ export TWITTER_SECRET=your_twitter_secret\n$ docker-compose up\n```\n\nOr, you can also run rpaproxy manually (without docker-compose).\n\n```\n$ export TWITTER_KEY=your_twitter_key\n$ export TWITTER_SECRET=your_twitter_secret\n$ docker run -d --name mongodb1 mongo\n$ docker run -d --name memcached1 memcached\n$ docker run --rm -p 80:3000 -e RACK_ENV=production -e MEMCACHE_SERVERS=memcached:11211 -e TWITTER_KEY -e TWITTER_SECRET --link memcached1:memcached --link mongodb1:mongodb tdiary/rpaproxy-sinatra\n```\n\n## Building the docker image manually\n\nYou can build the docker image manually.\n\n```\n$ git clone git@github.com:tdiary/rpaproxy-sinatra.git\n$ docker build -t tdiary/rpaproxy-sinatra .\n```\n",
  "permissions": {
    "read": true,
    "write": false,
    "admin": false
  },
  "media_types": [
    "application/vnd.docker.container.image.v1+json",
    "application/vnd.docker.distribution.manifest.v1+prettyjws"
  ],
  "content_types": [
    "image"
  ]
}