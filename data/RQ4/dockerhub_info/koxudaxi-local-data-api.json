{
  "user": "koxudaxi",
  "name": "local-data-api",
  "namespace": "koxudaxi",
  "repository_type": "image",
  "status": 1,
  "status_description": "active",
  "description": "Data API for local, you can write unittest for aws Aurora Serverless's Data API",
  "is_private": false,
  "is_automated": false,
  "can_edit": false,
  "star_count": 0,
  "pull_count": 279455,
  "last_updated": "2021-11-19T09:10:41.086396Z",
  "date_registered": "2019-06-12T05:17:57.255948Z",
  "collaborator_count": 0,
  "affiliation": null,
  "hub_user": "koxudaxi",
  "has_starred": false,
  "full_description": "# local-data-api - Local Data API for AWS Aurora Serverless Data API\n[![Build Status](https://travis-ci.org/koxudaxi/local-data-api.svg?branch=master)](https://travis-ci.org/koxudaxi/local-data-api)\n[![](https://images.microbadger.com/badges/version/koxudaxi/local-data-api.svg)](https://microbadger.com/images/koxudaxi/local-data-api \"Get your own version badge on microbadger.com\")\n[![codecov](https://codecov.io/gh/koxudaxi/local-data-api/branch/master/graph/badge.svg)](https://codecov.io/gh/koxudaxi/local-data-api)\n\nIf you want to run tests on your local machine and CI then, local-data-api can run in your local machine with MySQL and PostgreSQL Servers.\n\n## What's AWS Aurora Serverless's Data API?\nhttps://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/data-api.html\n\n## How does local-data-api work?\nlocal-data-api is \"proxy server\" to real databases.\n\nThe API converts RESTful request to SQL statements.\n\n## Support Database Types\n- MySQL\n- PostgreSQL\n\n\n## How to use this image\nYou set your MYSQL Server configs as environments.\n```bash\ndocker run --rm -it --name my-data-api -p 8080:80  -e MYSQL_HOST=<YOUR_MYSQL_HOST> -e MYSQL_PORT=<YOUR_MYSQL_PORT> -e MYSQL_USER=<YOUR_MYSQL_USER> -e MYSQL_PASSWORD=<YOUR_MYSQL_PASS>  -e RESOURCE_ARN=arn:aws:rds:us-east-1:123456789012:cluster:dummy -e SECRET_ARN=arn:aws:secretsmanager:us-east-1:123456789012:secret:dummy  koxudaxi/local-data-api\n```\n\nIn this case, you give local-data-api URL to aws client (like aws-cli).\n```bash\n$ aws --endpoint-url http://127.0.0.1:8080 rds-data execute-statement --resource-arn \"arn:aws:rds:us-east-1:123456789012:cluster:dummy\" --sql \"show databases\"  --secret-arn \"arn:aws:secretsmanager:us-east-1:123456789012:secret:dummy\" --database 'test'\n```\n## docker-compose\n### MySQL\ndocker-compose-mysql.yml\n```yaml\nversion: '3.1'\n\nservices:\n  local-data-api:\n    image: koxudaxi/local-data-api\n    restart: always\n    environment:\n      MYSQL_HOST: db\n      MYSQL_PORT: 3306\n      MYSQL_USER: root\n      MYSQL_PASSWORD: example\n      RESOURCE_ARN: 'arn:aws:rds:us-east-1:123456789012:cluster:dummy'\n      SECRET_ARN: 'arn:aws:secretsmanager:us-east-1:123456789012:secret:dummy'\n    ports:\n      - \"8080:80\"\n  db:\n    image: mysql:5.6\n    command: --default-authentication-plugin=mysql_native_password\n    restart: always\n    environment:\n      MYSQL_ROOT_PASSWORD: example\n      MYSQL_DATABASE: test\n    ports:\n        - \"3306:3306\"\n```\n\n### docker-compose with Python's aws-sdk client(boto3) \n1. start local-data-api containers\n```bash\n$ docker-compose up -d\n```\n\n2. change a endpoint to local-data-api in your code. \n```bash\n$ ipython\n```\n```python\nIn [1]: import boto3; client = boto3.client('rds-data', endpoint_url='http://127.0.0.1:8080', aws_access_key_id='aaa',  aws_secret_access_key='bbb') \n```\n\n3. execute a sql statement\n```python\nIn [2]: client.execute_statement(resourceArn='arn:aws:rds:us-east-1:123456789012:cluster:dummy', secretArn='arn:aws:secretsmanager:us-east-1:123456789012:secret:dummy', sql='show databases', database='test')\n```\n\n4. local-data-api return the result from a MySQL Server.\n```python\nOut[2]: {'ResponseMetadata': {'HTTPStatusCode': 200,\n 'HTTPHeaders': {'date': 'Sun, 09 Jun 2019 18:35:22 GMT',\n 'server': 'uvicorn',\n 'content-length': '492',\n 'content-type': 'application/json'},\n 'RetryAttempts': 0},\n 'numberOfRecordsUpdated': 0,\n 'records': [[{'stringValue': 'information_schema'}],\n  [{'stringValue': 'mysql'}],\n  [{'stringValue': 'performance_schema'}],\n  [{'stringValue': 'sys'}],\n  [{'stringValue': 'test'}]]}\n```\n\nIf a table has some records, then the local-data-api can run `select`\n```python\nIn [3]: client.execute_statement(resourceArn='arn:aws:rds:us-east-1:123456789012:cluster:dummy', secretArn='arn:aws:secretsmanager:us-east-1:123456789012:secret:dummy', sql='select * from users', database='test')\n```\n```python\nOut[3]: {'ResponseMetadata': {'HTTPStatusCode': 200,\n 'HTTPHeaders': {'date': 'Sun, 09 Jun 2019 18:35:22 GMT',\n 'server': 'uvicorn',\n 'content-length': '492',\n 'content-type': 'application/json'},\n 'RetryAttempts': 0},\n 'numberOfRecordsUpdated': 0,\n 'records': [[{'longValue': 1}, {'stringValue': 'ichiro'}, {'longValue': 17}],\n  [{'longValue': 2}, {'stringValue': 'ken'}, {'longValue': 20}],\n  [{'longValue': 3}, {'stringValue': 'lisa'}, {'isNull': True}],}\n```\n\n\n### PostgreSQL\nNow, local-data-api supports PostgreSQL\n\ndocker-compose-postgres.yml\n```yaml\nversion: '3.1'\n\nservices:\n  local-data-api:\n    image: koxudaxi/local-data-api\n    restart: always\n    environment:\n      ENGINE: PostgreSQLJDBC\n      POSTGRES_HOST: db\n      POSTGRES_PORT: 5432\n      POSTGRES_USER: postgres\n      POSTGRES_PASSWORD: example\n      RESOURCE_ARN: 'arn:aws:rds:us-east-1:123456789012:cluster:dummy'\n      SECRET_ARN: 'arn:aws:secretsmanager:us-east-1:123456789012:secret:dummy'\n    ports:\n      - \"8080:80\"\n  db:\n    image: postgres:10.7-alpine\n    restart: always\n    environment:\n      POSTGRES_PASSWORD: example\n      POSTGRES_DB: test\n    ports:\n        - \"5432:5432\"\n\n```\n\n## Related projects\n### py-data-api\n\nDataAPI client for Python\n\nhttps://github.com/koxudaxi/py-data-api\n\n## Docker Image \n\n[https://hub.docker.com/r/koxudaxi/local-data-api](https://hub.docker.com/r/koxudaxi/local-data-api)\n\n## Source Code\n\n[https://github.com/koxudaxi/local-data-api](https://github.com/koxudaxi/local-data-api)\n\n## Documentation\n\n[https://koxudaxi.github.io/local-data-api](https://koxudaxi.github.io/local-data-api)\n\n## License\n\nlocal-data-api is released under the MIT License. http://www.opensource.org/licenses/mit-license\n",
  "permissions": {
    "read": true,
    "write": false,
    "admin": false
  },
  "media_types": [
    "application/vnd.docker.container.image.v1+json",
    "application/vnd.docker.distribution.manifest.list.v2+json"
  ],
  "content_types": [
    "image"
  ]
}