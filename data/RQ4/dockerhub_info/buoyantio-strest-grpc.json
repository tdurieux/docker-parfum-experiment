{
  "user": "buoyantio",
  "name": "strest-grpc",
  "namespace": "buoyantio",
  "repository_type": "image",
  "status": 1,
  "status_description": "active",
  "description": "A load tester for stress testing gRPC intermediaries.",
  "is_private": false,
  "is_automated": true,
  "can_edit": false,
  "star_count": 0,
  "pull_count": 98911,
  "last_updated": "2020-06-17T04:32:30.836205Z",
  "date_registered": "2017-05-04T17:41:48.18521Z",
  "collaborator_count": 0,
  "affiliation": null,
  "hub_user": "buoyantio",
  "has_starred": false,
  "full_description": "[![CircleCI](https://circleci.com/gh/BuoyantIO/strest-grpc.svg?style=shield)](https://circleci.com/gh/BuoyantIO/strest-grpc)\n\n# strest-grpc\n\nStrest client and server implementations for gRPC.\n\n## Running Locally\n\nTo run the client and server locally, first start the server.\n\n```\n$ strest-grpc server\nstarting gRPC server on :11111\n```\n\nNext run the client. By default, the client will send as many request as it can\non a single connection. Kill it to see a final performance report.\n\n```\n$ strest-grpc client --address localhost:11111 --latencyUnit us\n2018-08-10T10:45:10-07:00   0    0.0B  39594/0 10s L: 132 [388 629 ] 7383 J:   0   0\n{\n  \"good\": 42074,\n  \"bad\": 0,\n  \"bytes\": 0,\n  \"latency\": {\n    \"p50\": 215,\n    \"p75\": 250,\n    \"p90\": 317,\n    \"p95\": 397,\n    \"p99\": 634,\n    \"p999\": 7383\n  },\n  \"jitter\": {\n    \"p50\": 0,\n    \"p75\": 0,\n    \"p90\": 0,\n    \"p95\": 0,\n    \"p99\": 0,\n    \"p999\": 0\n  }\n}\n```\n\n### Usage\n\n#### Commands\n\n```\n$ strest-grpc --help\nA load tester for stress testing grpc intermediaries.\n\nFind more information at https://github.com/buoyantio/strest-grpc.\n\nUsage:\n  strest-grpc [command]\n\nAvailable Commands:\n  client      run the strest-grpc client\n  help        Help about any command\n  max-rps     compute max RPS\n  ref-client  run a gRPC reference client\n  ref-server  run a gRPC reference server\n  server      run the strest-grpc server\n\nFlags:\n  -h, --help              help for strest-grpc\n  -l, --logLevel string   log level, must be one of: panic, fatal, error, warn, info, debug (default \"info\")\n\nUse \"strest-grpc [command] --help\" for more information about a command.\n```\n\n#### Client\n\n```\n$ strest-grpc client --help\nrun the strest-grpc client\n\nUsage:\n  strest-grpc client [flags]\n\nFlags:\n      --address string              address of strest-grpc service or intermediary (default \"localhost:11111\")\n      --clientTimeout duration      timeout for unary client requests. Default: no timeout\n      --connections uint            number of concurrent connections (default 1)\n      --errorRate float             the chance to return an error\n  -h, --help                        help for client\n      --interval duration           reporting interval (default 10s)\n      --iterations uint             number of iterations for the experiment. Exits gracefully after `iterations * interval` (default 0, meaning infinite)\n      --latencyPercentiles string   response latency percentile distribution. (e.g. 50=10,100=100) (default \"100=0\")\n      --latencyUnit string          latency units [ms|us|ns] (default \"ms\")\n      --lengthPercentiles string    response body length percentile distribution. (e.g. 50=100,100=1000) (default \"100=0\")\n      --metricAddr string           address to serve metrics on\n      --noFinalReport               do not print a final JSON output report\n      --noIntervalReport            only print the final report, nothing intermediate\n      --streaming                   use the streaming features of strest server\n      --streamingRatio string       the ratio of streaming requests/responses (default \"1:1\")\n      --streams uint                number of concurrent streams per connection (default 1)\n      --tlsTrustChainFile string    the path to the certificate used to validate the remote's signature\n      --totalRequests uint          total number of requests to send. default: infinite\n      --totalTargetRps uint         target requests per second\n  -u, --unix                        use Unix Domain Sockets instead of TCP\n\nGlobal Flags:\n  -l, --logLevel string   log level, must be one of: panic, fatal, error, warn, info, debug (default \"info\")\n```\n\n#### Server\n\n```\n$ strest-grpc server --help\nrun the strest-grpc server\n\nUsage:\n  strest-grpc server [flags]\n\nFlags:\n      --address string              address to serve on (default \":11111\")\n  -h, --help                        help for server\n      --latencyPercentiles string   response latency percentile distribution added to client latencies. (e.g. 50=10,100=100) (default \"100=0\")\n      --metricAddr string           address to serve metrics on\n      --tlsCertFile string          the path to the trust certificate\n      --tlsPrivKeyFile string       the path to the server's private key\n  -u, --unix                        use Unix Domain Sockets instead of TCP\n\nGlobal Flags:\n  -l, --logLevel string   log level, must be one of: panic, fatal, error, warn, info, debug (default \"info\")\n```\n\n#### Max-RPS\n\n```\n$ strest-grpc max-rps --help\ncompute max RPS\n\nUsage:\n  strest-grpc max-rps [flags]\n\nFlags:\n      --address string             hostname:port of strest-grpc service or intermediary (default \"localhost:11111\")\n      --concurrencyLevels string   levels of concurrency to test with (default \"1,5,10,20,30\")\n  -h, --help                       help for max-rps\n      --timePerLevel duration      how much time to spend testing each concurrency level (default 1s)\n\nGlobal Flags:\n  -l, --logLevel string   log level, must be one of: panic, fatal, error, warn, info, debug (default \"info\")\n```\n\n#### Ref-Client\n\n```\n$ strest-grpc ref-client --help\nrun a gRPC reference client\n\nUsage:\n  strest-grpc ref-client [flags]\n\nFlags:\n  -h, --help   help for ref-client\n\nGlobal Flags:\n  -l, --logLevel string   log level, must be one of: panic, fatal, error, warn, info, debug (default \"info\")\n```\n\n#### Ref-Server\n\n```\n$ strest-grpc ref-server --help\nrun a gRPC reference server\n\nUsage:\n  strest-grpc ref-server [flags]\n\nFlags:\n  -h, --help   help for ref-server\n\nGlobal Flags:\n  -l, --logLevel string   log level, must be one of: panic, fatal, error, warn, info, debug (default \"info\")\n```\n\n## Running in Kubernetes\n\nIt's also possible to run the client and server in Kubernetes, using the provided configs\nin the [config/](config) directory.\n\nFirst create the strest-server deployment and service.\n\n```\nkubectl apply -f config/server.yml\n```\n\nThen create the strest-client deployment.\n\n```\nkubectl apply -f config/client.yml\n```\n\nView the logs from the client pod to see the strest performance report.\n\n```\nkubectl logs -c strest-client deploy/strest-client\n```\n\n## Building\n\nTo build the strest-grpc binaries and archives, run:\n\n```\n./bin/release.sh [VERSION TAG]\n```\n\nThat will create `strest-grpc` binaries and archives in `./release`.\n\nTo build a docker image, run:\n\n```\n$ docker build -t buoyantio/strest-grpc:latest .\n```\n\nReplace `latest` with whatever tag you are trying to build.\n\n### `strest-grpc max-rps`\n\n`strest-grpc max-rps` will calculate the maximum RPS that a strest-server or intermediary\ncan sustain. The `maxConcurrency` score lets you know what at which point adding more\nclients no longer improves overall throughput. This calculation is based on the\nUniversal Scalability Law and can change dramatically based on the environment and\nresources available.\n\n## Releasing\n\nTo release:\n\n* Update and submit a PR with a changelog for the release in [CHANGES.md](CHANGES.md).\n* Merge the changelog PR.\n* Build the strest-grpc archives as described in the [Building](#building) section above.\n* Use Github to [create a new release](https://github.com/BuoyantIO/strest-grpc/releases/new).\n* Add the archives that you built as attachments to the release.\n* The docker image is built automatically once the release is created.\n",
  "permissions": {
    "read": true,
    "write": false,
    "admin": false
  },
  "media_types": [
    "application/vnd.docker.container.image.v1+json"
  ],
  "content_types": [
    "image"
  ]
}