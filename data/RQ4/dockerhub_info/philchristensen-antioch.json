{
  "user": "philchristensen",
  "name": "antioch",
  "namespace": "philchristensen",
  "repository_type": "image",
  "status": 1,
  "status_description": "active",
  "description": "A next-generation MUD/MOO-like virtual world engine in Python",
  "is_private": false,
  "is_automated": false,
  "can_edit": false,
  "star_count": 0,
  "pull_count": 529,
  "last_updated": "2019-12-18T21:15:44.573502Z",
  "date_registered": "2018-03-05T03:11:36.148785Z",
  "collaborator_count": 0,
  "affiliation": null,
  "hub_user": "philchristensen",
  "has_starred": false,
  "full_description": "antioch \n=======\n\n[![build-status](https://travis-ci.org/philchristensen/antioch.svg?branch=master)](https://travis-ci.org/philchristensen/antioch)\n[![python-versions](https://img.shields.io/badge/Python-3.6-brightgreen.svg)](https://www.python.org)\n[![django-versions](https://img.shields.io/badge/Django-2.2-blue.svg)](https://www.djangoproject.com)\n\n(c) Phil Christensen, <phil@bubblehouse.org>\n\n4 March 2018\n\nIntroduction\n-------------\n\nantioch is a next-generation [MUD](http://en.wikipedia.org/wiki/MUD)/[MOO](http://en.wikipedia.org/wiki/MOO)-like\nvirtual world engine. A scalable architecture lays the foundation for huge, highly customizable virtual worlds, while\nsandboxed code execution allows users to author content in a secure and robust environment.\n\n![screenshot](https://github.com/philchristensen/antioch/raw/master/doc/img/screenshot.png \"Sample Screenshot\")\n\nFeature Set\n-----------\n\n* Django-powered, standards-compliant web interface using Bootstrap, jQuery, REST and COMET\n\n* Sandboxed Pure-Python execution enables live programming of in-game code\n\n* PostgreSQL-backed object store scales to million of objects and provides transactional security during verb execution\n\n* Flexible plugin system, highly scalable execution layer using Celery and Redis\n\n\nantioch is made available under the MIT/X Consortium license.\n\nThe included LICENSE file describes this in detail.\n\nRunning\n--------\n\nYou'll need a local installation of Docker Compose, perferably via Docker Toolbox.\n\nTo install:\n\n    git clone ssh://git@github.com/philchristensen/antioch.git\n    cd antioch\n    cp docker-compose.override.yml.example docker-compose.override.yml\n    cp antioch/settings/development.py.example antioch/settings/development.py\n    docker-compose up\n\nAfter first install, and after model or static file changes, you'll need to run migrate\nand/or collectstatic:\n\n    docker-compose run webapp manage.py migrate\n    docker-compose run webapp manage.py collectstatic\n\nFinally, the first time you run, set up a basic database with some sample objects and users:\n\n    docker-compose run webapp manage.py mkspace\n\nThis build uses port 80/443 on your docker machine, but you can use whatever domain name\nto refer to it. I have a `docker` alias setup in my `/etc/hosts` file for this purpose.\nTo find out the address of your docker machine, you can run:\n\n    docker-machine ip default\n\nConnect to the docker machine via your browser, and login with username/passwd `wizard:wizard`.",
  "permissions": {
    "read": true,
    "write": false,
    "admin": false
  },
  "media_types": [
    "application/vnd.docker.container.image.v1+json"
  ],
  "content_types": [
    "image"
  ]
}