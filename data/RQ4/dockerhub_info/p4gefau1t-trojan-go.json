{
  "user": "p4gefau1t",
  "name": "trojan-go",
  "namespace": "p4gefau1t",
  "repository_type": "image",
  "status": 1,
  "status_description": "active",
  "description": "",
  "is_private": false,
  "is_automated": false,
  "can_edit": false,
  "star_count": 34,
  "pull_count": 2043271,
  "last_updated": "2021-09-14T08:19:07.712521Z",
  "date_registered": "2020-05-07T10:04:18.030245Z",
  "collaborator_count": 0,
  "affiliation": null,
  "hub_user": "p4gefau1t",
  "has_starred": false,
  "full_description": "# Trojan-Go\n\n[![License](https://img.shields.io/github/license/p4gefau1t/trojan-go)](https://img.shields.io/github/license/p4gefau1t/trojan-go)\n[![Downloads](https://img.shields.io/github/downloads/p4gefau1t/trojan-go/total?label=downloads&logo=github&style=flat-square)](https://img.shields.io/github/downloads/p4gefau1t/trojan-go/total?label=downloads&logo=github&style=flat-square)\n[![HitCounts](http://hits.dwyl.io/p4gefau1t/trojan-go.svg)](http://hits.dwyl.io/p4gefau1t/trojan-go)\n[![Release](https://img.shields.io/github/v/release/p4gefau1t/trojan-go?include_prereleases)](https://img.shields.io/github/v/release/p4gefau1t/trojan-go?include_prereleases)\n[![Release Date](https://img.shields.io/github/release-date-pre/p4gefau1t/trojan-go)](https://img.shields.io/github/release-date-pre/p4gefau1t/trojan-go)\n[![Docker Image](https://images.microbadger.com/badges/image/p4gefau1t/trojan-go.svg)](https://microbadger.com/images/p4gefau1t/trojan-go)\n\n[![Commit](https://img.shields.io/github/last-commit/p4gefau1t/trojan-go)](https://img.shields.io/github/last-commit/p4gefau1t/trojan-go)\n[![Commit Activity](https://img.shields.io/github/commit-activity/m/p4gefau1t/trojan-go)](https://img.shields.io/github/commit-activity/m/p4gefau1t/trojan-go)\n[![Go Report Card](https://goreportcard.com/badge/github.com/p4gefau1t/trojan-go)](https://goreportcard.com/report/github.com/p4gefau1t/trojan-go)\n\n使用Go实现的完整Trojan代理，与Trojan协议以及Trojan-GFW版本的配置文件格式兼容。安全，高效，轻巧，易用。\n\n支持使用[多路复用](#多路复用)提升并发性能，使用[路由模块](#路由模块)实现国内直连。\n\n支持[CDN流量中转](#Websocket)(基于WebSocket over TLS/SSL)。\n\n支持基于ACME协议从Let's Encrypt[自动申请和更新](#证书申请)HTTPS证书，只需提供域名和邮箱。\n\n预编译的版本可在 [Release 页面](https://github.com/p4gefau1t/trojan-go/releases)下载。直接运行解压得到的执行文件即可，无其他组件依赖。\n\n跨平台客户端[Trojan-Qt5](https://github.com/Trojan-Qt5/Trojan-Qt5/)已使用Trojan-Go核心，支持目前所有的Trojan-Go扩展特性，界面友好，推荐作为客户端使用。\n\n[Telegram交流反馈群](https://t.me/trojan_go_chat)\n\n### 下面的说明为简单介绍，完整配置教程和配置介绍参见[Trojan-Go文档](https://p4gefau1t.github.io/trojan-go)。\n\nTrojan-Go支持并且兼容Trojan-GFW的绝大多数功能，包括但不限于：\n\n- TLS/SSL隧道传输\n\n- 透明代理 (NAT模式，iptables设置参见[这里](https://github.com/shadowsocks/shadowsocks-libev/tree/v3.3.1#transparent-proxy))\n\n- UDP代理\n\n- 对抗GFW被动/主动检测的机制\n\n- MySQL数据库支持\n\n- 流量统计，用户流量配额限制\n\n- 从数据库中的用户列表进行认证\n\n- TCP Keep Alive，TCP Fast Open，端口复用等TCP选项\n\n同时，Trojan-Go还扩展了更多高效易用的功能特性：\n\n- 简易模式，快速部署使用\n\n- Socks5/HTTP代理自动适配\n\n- 多平台和多操作系统支持，无特殊依赖\n\n- 多路复用，显著提升并发性能\n\n- 自定义路由模块，可实现国内直连/广告屏蔽等功能\n\n- Websocket，用于支持CDN流量中转(基于WebSocket over TLS/SSL)和对抗GFW中间人攻击\n\n- 自动化HTTPS证书申请，使用ACME协议从Let's Encrypt自动申请和更新HTTPS证书\n\n- TLS指纹伪造，绕过针对TLS Client Hello的特征识别\n\n- 基于gRPC的API支持，支持动态用户管理和流量速度限制\n\n## 使用方法\n\n1. 快速证书配置\n\n    - 自动申请证书\n\n        ```shell\n        sudo ./trojan-go -autocert request\n        ```\n\n        (**注意备份生成的证书和密钥，并确保其安全**)\n\n    - 为证书续期\n\n        ```shell\n        sudo ./trojan-go -autocert renew\n        ```\n\n    关于证书申请[更详细的说明](#证书申请)。\n\n2. 快速启动服务器和客户端（简易模式）\n\n    - 服务端\n\n        ```shell\n        sudo ./trojan-go -server -remote 127.0.0.1:80 -local 0.0.0.0:443 -key ./your_key.key -cert ./your_cert.crt -password your_password\n        ```\n\n    - 客户端\n\n        ```shell\n        ./trojan-go -client -remote example.com:443 -local 127.0.0.1:1080 -password your_password\n        ```\n\n3. 使用配置文件启动客户端/服务端/透明代理/中继（一般模式）\n\n    ```shell\n    ./trojan-go -config config.json\n    ```\n\n4. 使用Docker部署\n\n    ```shell\n    docker run\\\n        --name trojan-go \\\n        -d \\\n        -v /etc/trojan-go/:/etc/trojan-go \\\n        --network host \\\n        p4gefau1t/trojan-go\n    ```\n\n    或者\n\n    ```shell\n    docker run\\\n        --name trojan-go \\\n        -d \\\n        -v /path/to/host/config:/path/in/container \\\n        --network host \\\n        p4gefau1t/trojan-go \\\n        /path/in/container/config.json\n    ```\n    \n    镜像的latest标签对应master分支，nightly标签对应dev分支。\n\n## 特性\n\n### 移植性\n\n运行Trojan-Go的可执行文件不依赖其他组件。\n\n可以将编译得到的单个可执行文件在目标机器上直接执行而不需要考虑依赖的问题。同时，你可以很方便地编译（或者交叉编译）它，然后在你的服务器，PC，树莓派，甚至路由器上部署。可以方便地使用build tag删减各模块，以缩小可执行文件体积。\n\n例如，交叉编译一个在mips处理器，linux操作系统上运行的，只有客户端功能的Trojan-Go，只需执行下面的命令即可\n\n```shell\nCGO_ENABLE=0 GOOS=linux GOARCH=mips go build -tags \"client\"\n```\n\n完整的tag说明参见[Trojan-Go 文档](https://p4gefau1t.github.io/trojan-go)。\n\n### 易用\n\n配置文件格式与Trojan-GFW兼容，但做了大幅简化，未指定的字段会被赋给一个默认值。你可以更方便地部署你的服务器和客户端。下面是一个简单的例子，完整的配置文件可以参见[这里](https://p4gefau1t.github.io/trojan-go)。\n\n服务器配置文件\n\nserver.json\n\n```json\n{\n    \"run_type\": \"server\",\n    \"local_addr\": \"0.0.0.0\",\n    \"local_port\": 443,\n    \"remote_addr\": \"127.0.0.1\",\n    \"remote_port\": 80,\n    \"password\": [\n        \"your_awesome_password\"\n    ],\n    \"ssl\": {\n        \"cert\": \"your_cert.crt\",\n        \"key\": \"your_key.key\"\n    }\n}\n\n```\n\n客户端配置文件\n\nclient.json\n\n```json\n{\n    \"run_type\": \"client\",\n    \"local_addr\": \"127.0.0.1\",\n    \"local_port\": 1080,\n    \"remote_addr\": \"www.your_awesome_domain_name.com\",\n    \"remote_port\": 443,\n    \"password\": [\n        \"your_awesome_password\"\n    ]\n}\n```\n\n<a name=\"证书申请\"></a>\n\n### 自动证书申请\n\n使用\n\n```shell\nsudo ./trojan-go -autocert request\n```\n\n向Let's Encrypt申请证书\n\n申请过程中，按照ACME协议要求，trojan-go需要和letsencrypt服务器交互，因此需要暂时占用本地443和80端口，此时请暂时关闭nginx，apache，或者trojan等服务。\n\nLinux下，绑定80和443端口需要root权限，因此你需要使用sudo执行trojan-go才能正常证书申请流程。\n\n你也可以指定自定义端口，然后使用nginx等web服务器进行443和80分流，将acme协议代理到自定义端口上。\n\n如果申请成功，本目录下会得到\n\n- server.key 服务器私钥\n\n- server.crt 经过Let's Encrypt签名的服务器证书\n\n- user.key 用户Email对应的私钥\n\n- domain_info.json 域名和用户Email信息\n\n请备份这几个文件并且妥善保管。接下来你可以将服务器私钥和证书文件名填入你的配置文件，开启你的trojan-go服务器即可。\n\n如果证书过期了，使用\n\n```shell\nsudo ./trojan-go -autocert renew\n```\n\n更新证书，确保上面提到的四个文件在trojan-go所在目录，运行后trojan-go将自动更新证书文件。\n\n### WebSocket\n\n<a name=\"WebSocket\"></a>\n\nTrojan-Go支持使用TLS+Websocket承载Trojan协议，使得利用CDN进行流量中转成为可能。\n\n服务器和客户端配置文件中同时添加```websocket```选项即可启用Websocket支持，例如\n\n```json\n\"websocket\": {\n    \"enabled\": true,\n    \"path\": \"/im_a_url_path\",\n    \"hostname\": \"www.your_awesome_domain_name.com\"\n}\n```\n\n完整的选项说明参见[Trojan-Go 文档](https://p4gefau1t.github.io/trojan-go)。\n\n可以省略```hostname```, 但是服务器和客户端的```path```必须一致。服务器开启Websocket支持后可以同时支持Websocket和一般Trojan流量，未配置Websocket选项的客户端依然可以正常使用。\n\n由于Trojan-GFW版本并不支持Websocket，因此，虽然开启了Websocket支持的服务端可以兼容所有客户端，但是如果要使用Websocket承载流量，请确保双方都使用Trojan-Go。\n\n### 多路复用\n\n<a name=\"多路复用\"></a>\n\n在很差的网络条件下，一次TLS握手可能会花费很多时间。\n\nTrojan-Go支持多路复用(基于[smux](https://github.com/xtaci/smux))。通过使一个TLS隧道连接承载多个TCP连接的方式，减少TCP和TLS握手带来的延迟，以期提升高并发情景下的性能。\n\n启用多路复用并不会增加你测速得到的链路速度，但会降低延迟，提升大量并发请求时的网络体验，例如浏览含有大量图片的网页等。\n\n注意，这个特性和Trojan-GFW**不兼容**，出于兼容性考虑，这个特性是默认关闭的。你可以通过设置mux选项中的\"enabled\"字段启用它。如下\n\n```json\n\"mux\": {\n    \"enabled\": true\n}\n```\n\n完整的选项说明参见[Trojan-Go 文档](https://p4gefau1t.github.io/trojan-go)。\n\n你只需要设置客户端的配置文件即可，服务端会自动检测是否启用多路复用并提供支持。\n\n### 路由模块\n\n<a name=\"路由模块\"></a>\n\nTrojan-Go的客户端内建一个简单实用的路由模块用以方便实现国内直连等自定义路由功能。\n\n路由策略有三种\n\n- Proxy 代理。将请求通过TLS隧道进行代理，由trojan服务器和目的地址进行连接。\n\n- Bypass 绕过。直接在本地和目的地址进行连接。\n\n- Block 封锁。不代理请求，直接关闭连接。\n\n要激活模块，在你的配置文件中添加router选项，并且设置enabled为true，例如\n\n```json\n\"router\": {\n    \"enabled\": true,\n    \"bypass\": [\n        \"geoip:tag1\",\n        \"geosite:tag2\",\n        \"bypass_list1.txt\",\n        \"bypass_list2.txt\"\n    ],\n    \"block\": [\n        \"block_list.txt\"\n    ],\n    \"proxy\": [\n        \"proxy_list.txt\"\n    ],\n    \"default_policy\": \"proxy\"\n}\n```\n\n其中```bypass```,```block```, ```proxy```字段中填入相应的列表文件或者geo数据库tag。列表文件每行是一个域名或者IP地址段(CIDR)。geo数据库geoip和geosite为IP数据库和域名数据库。一旦匹配，则执行相应策略。\n\n完整的选项说明参见[Trojan-Go 文档](https://p4gefau1t.github.io/trojan-go)。\n\n下面是一个实现国内直连的选项，它将绕过中国大陆IP地址，中国大陆域名，以及内网IP等保留的私有IP地址，直接连接远端而不通过隧道代理。\n\n```json\n\"router\": {\n    \"enabled\": true,\n    \"bypass\": [\n        \"geoip:cn\",\n        \"geoip:private\",\n        \"geosite:cn\"\n    ]\n}\n```\n\n所需要的geoip.dat和geosite.dat已经包含在release的压缩包中。它们来自v2ray的[domain-list-community](https://github.com/v2ray/domain-list-community)和[geoip](https://github.com/v2ray/geoip)。\n\n## 构建\n\n确保你的Go版本 >= 1.14，推荐使用snap安装Go保持与上游同步。\n\n```shell\ngit clone https://github.com/p4gefau1t/trojan-go.git\ncd trojan-go\ngo build -tags \"full\"\n```\n\nGo支持通过设置环境变量进行交叉编译，例如\n\n```shell\nCGO_ENABLE=0 GOOS=windows GOARCH=amd64 go build -tags \"full\"\n```\n\n以及\n\n```shell\nCGO_ENABLE=0 GOOS=linux GOARCH=arm go build -tags \"full\"\n```\n\n## 致谢\n\n[trojan](https://github.com/trojan-gfw/trojan)\n\n[v2ray](https://github.com/v2ray/)\n\n[smux](https://github.com/xtaci/smux)\n\n[lego](https://github.com/go-acme/lego)\n\n[go-tproxy](https://github.com/LiamHaworth/go-tproxy)\n\n[tcplisten](https://github.com/valyala/tcplisten)\n\n[utls](https://github.com/refraction-networking/utls)\n\n\n## Stargazers over time\n\n[![Stargazers over time](https://starchart.cc/p4gefau1t/trojan-go.svg)](https://starchart.cc/p4gefau1t/trojan-go)",
  "permissions": {
    "read": true,
    "write": false,
    "admin": false
  },
  "media_types": [
    "application/vnd.docker.distribution.manifest.list.v2+json"
  ],
  "content_types": [
    "image"
  ]
}