{
  "user": "twinproduction",
  "name": "gatus",
  "namespace": "twinproduction",
  "repository_type": "image",
  "status": 1,
  "status_description": "active",
  "description": "⛑ Automated service health dashboard",
  "is_private": false,
  "is_automated": false,
  "can_edit": false,
  "star_count": 7,
  "pull_count": 773202,
  "last_updated": "2023-01-04T07:09:51.383628Z",
  "date_registered": "2019-09-14T23:22:19.532545Z",
  "collaborator_count": 0,
  "affiliation": null,
  "hub_user": "twinproduction",
  "has_starred": false,
  "full_description": "![Gatus](https://github.com/TwiN/gatus/blob/master/.github/assets/logo-with-dark-text.png?raw=true)\n\n![build](https://github.com/TwiN/gatus/workflows/build/badge.svg?branch=master)\n[![Go Report Card](https://goreportcard.com/badge/github.com/TwiN/gatus?)](https://goreportcard.com/report/github.com/TwiN/gatus)\n[![codecov](https://codecov.io/gh/TwiN/gatus/branch/master/graph/badge.svg)](https://codecov.io/gh/TwiN/gatus)\n[![Go version](https://img.shields.io/github/go-mod/go-version/TwiN/gatus.svg)](https://github.com/TwiN/gatus)\n[![Docker pulls](https://img.shields.io/docker/pulls/twinproduction/gatus.svg)](https://cloud.docker.com/repository/docker/twinproduction/gatus)\n[![Follow TwiN](https://img.shields.io/github/followers/TwiN?label=Follow&style=social)](https://github.com/TwiN)\n\nGatus is a developer-oriented health dashboard that gives you the ability to monitor your services using HTTP, ICMP, TCP, and even DNS\nqueries as well as evaluate the result of said queries by using a list of conditions on values like the status code,\nthe response time, the certificate expiration, the body and many others. The icing on top is that each of these health\nchecks can be paired with alerting via Slack, PagerDuty, Discord, Twilio and more.\n\nI personally deploy it in my Kubernetes cluster and let it monitor the status of my\ncore applications: https://status.twin.sh/\n\n<details>\n  <summary><b>Quick start</b></summary>\n\n```console\ndocker run -p 8080:8080 --name gatus twinproduction/gatus\n```\nFor more details, see [Usage](#usage)\n</details>\n\n![Gatus dashboard conditions](https://github.com/TwiN/gatus/blob/master/.github/assets/dashboard-conditions.png?raw=true)\n\nHave any feedback or questions? [Create a discussion](https://github.com/TwiN/gatus/discussions/new).\n\n## Table of Contents\n- [Why Gatus?](#why-gatus)\n- [Features](#features)\n- [Usage](#usage)\n- [Configuration](#configuration)\n  - [Conditions](#conditions)\n    - [Placeholders](#placeholders)\n    - [Functions](#functions)\n  - [Storage](#storage)\n  - [Client configuration](#client-configuration)\n  - [Alerting](#alerting)\n    - [Configuring Discord alerts](#configuring-discord-alerts)\n    - [Configuring Email alerts](#configuring-email-alerts)\n    - [Configuring Google Chat alerts](#configuring-google-chat-alerts)\n    - [Configuring Matrix alerts](#configuring-matrix-alerts)\n    - [Configuring Mattermost alerts](#configuring-mattermost-alerts)\n    - [Configuring Messagebird alerts](#configuring-messagebird-alerts)\n    - [Configuring Ntfy alerts](#configuring-ntfy-alerts)\n    - [Configuring Opsgenie alerts](#configuring-opsgenie-alerts)\n    - [Configuring PagerDuty alerts](#configuring-pagerduty-alerts)\n    - [Configuring Slack alerts](#configuring-slack-alerts)\n    - [Configuring Teams alerts](#configuring-teams-alerts)\n    - [Configuring Telegram alerts](#configuring-telegram-alerts)\n    - [Configuring Twilio alerts](#configuring-twilio-alerts)\n    - [Configuring custom alerts](#configuring-custom-alerts)\n    - [Setting a default alert](#setting-a-default-alert)\n  - [Maintenance](#maintenance)\n  - [Security](#security)\n    - [Basic](#basic)\n    - [OIDC](#oidc)\n  - [Metrics](#metrics)\n  - [Remote instances (EXPERIMENTAL)](#remote-instances-experimental)\n- [Deployment](#deployment)\n  - [Docker](#docker)\n  - [Helm Chart](#helm-chart)\n  - [Terraform](#terraform)\n- [Running the tests](#running-the-tests)\n- [Using in Production](#using-in-production)\n- [FAQ](#faq)\n  - [Sending a GraphQL request](#sending-a-graphql-request)\n  - [Recommended interval](#recommended-interval)\n  - [Default timeouts](#default-timeouts)\n  - [Monitoring a TCP endpoint](#monitoring-a-tcp-endpoint)\n  - [Monitoring an endpoint using ICMP](#monitoring-an-endpoint-using-icmp)\n  - [Monitoring an endpoint using DNS queries](#monitoring-an-endpoint-using-dns-queries)\n  - [Monitoring an endpoint using STARTTLS](#monitoring-an-endpoint-using-starttls)\n  - [Monitoring an endpoint using TLS](#monitoring-an-endpoint-using-tls)\n  - [Monitoring domain expiration](#monitoring-domain-expiration)\n  - [disable-monitoring-lock](#disable-monitoring-lock)\n  - [Reloading configuration on the fly](#reloading-configuration-on-the-fly)\n  - [Endpoint groups](#endpoint-groups)\n  - [Exposing Gatus on a custom port](#exposing-gatus-on-a-custom-port)\n  - [Badges](#badges)\n    - [Uptime](#uptime)\n    - [Health](#health)\n    - [Response time](#response-time)\n  - [API](#api)\n  - [High level design overview](#high-level-design-overview)\n- [Sponsors](#sponsors)\n\n## Why Gatus?\nBefore getting into the specifics, I want to address the most common question:\n> Why would I use Gatus when I can just use Prometheus’ Alertmanager, Cloudwatch or even Splunk?\n\nNeither of these can tell you that there’s a problem if there are no clients actively calling the endpoint.\nIn other words, it's because monitoring metrics mostly rely on existing traffic, which effectively means that unless\nyour clients are already experiencing a problem, you won't be notified.\n\nGatus, on the other hand, allows you to configure health checks for each of your features, which in turn allows it to\nmonitor these features and potentially alert you before any clients are impacted.\n\nA sign you may want to look into Gatus is by simply asking yourself whether you'd receive an alert if your load balancer\nwas to go down right now. Will any of your existing alerts be triggered? Your metrics won’t report an increase in errors\nif no traffic makes it to your applications. This puts you in a situation where your clients are the ones\nthat will notify you about the degradation of your services rather than you reassuring them that you're working on\nfixing the issue before they even know about it.\n\n\n## Features\nThe main features of Gatus are:\n- **Highly flexible health check conditions**: While checking the response status may be enough for some use cases, Gatus goes much further and allows you to add conditions on the response time, the response body and even the IP address.\n- **Ability to use Gatus for user acceptance tests**: Thanks to the point above, you can leverage this application to create automated user acceptance tests.\n- **Very easy to configure**: Not only is the configuration designed to be as readable as possible, it's also extremely easy to add a new service or a new endpoint to monitor.\n- **Alerting**: While having a pretty visual dashboard is useful to keep track of the state of your application(s), you probably don't want to stare at it all day. Thus, notifications via Slack, Mattermost, Messagebird, PagerDuty, Twilio, Google chat and Teams are supported out of the box with the ability to configure a custom alerting provider for any needs you might have, whether it be a different provider or a custom application that manages automated rollbacks.\n- **Metrics**\n- **Low resource consumption**: As with most Go applications, the resource footprint that this application requires is negligibly small.\n- **[Badges](#badges)**: ![Uptime 7d](https://status.twin.sh/api/v1/endpoints/core_blog-external/uptimes/7d/badge.svg) ![Response time 24h](https://status.twin.sh/api/v1/endpoints/core_blog-external/response-times/24h/badge.svg)\n- **Dark mode**\n\n![Gatus dashboard dark mode](https://github.com/TwiN/gatus/blob/master/.github/assets/dashboard-dark.png?raw=true)\n\n## Usage\nBy default, the configuration file is expected to be at `config/config.yaml`.\n\nYou can specify a custom path by setting the `GATUS_CONFIG_FILE` environment variable.\n\nHere's a simple example:\n```yaml\nendpoints:\n  - name: website                 # Name of your endpoint, can be anything\n    url: \"https://twin.sh/health\"\n    interval: 5m                  # Duration to wait between every status check (default: 60s)\n    conditions:\n      - \"[STATUS] == 200\"         # Status must be 200\n      - \"[BODY].status == UP\"     # The json path \"$.status\" must be equal to UP\n      - \"[RESPONSE_TIME] < 300\"   # Response time must be under 300ms\n  - name: example\n    url: \"https://example.org/\"\n    interval: 60s\n    conditions:\n      - \"[STATUS] == 200\"\n```\n\nThis example would look similar to this:\n\n![Simple example](https://github.com/TwiN/gatus/blob/master/.github/assets/example.png?raw=true)\n\nNote that you can also use environment variables in the configuration file (e.g. `$DOMAIN`, `${DOMAIN}`)\n\nIf you want to test it locally, see [Docker](#docker).\n\n\n## Configuration\n| Parameter                                       | Description                                                                                                                                        | Default                    |\n|:------------------------------------------------|:---------------------------------------------------------------------------------------------------------------------------------------------------|:---------------------------|\n| `debug`                                         | Whether to enable debug logs.                                                                                                                      | `false`                    |\n| `metrics`                                       | Whether to expose metrics at /metrics.                                                                                                             | `false`                    |\n| `storage`                                       | [Storage configuration](#storage)                                                                                                                  | `{}`                       |\n| `endpoints`                                     | List of endpoints to monitor.                                                                                                                      | Required `[]`              |\n| `endpoints[].enabled`                           | Whether to monitor the endpoint.                                                                                                                   | `true`                     |\n| `endpoints[].name`                              | Name of the endpoint. Can be anything.                                                                                                             | Required `\"\"`              |\n| `endpoints[].group`                             | Group name. Used to group multiple endpoints together on the dashboard. <br />See [Endpoint groups](#endpoint-groups).                             | `\"\"`                       |\n| `endpoints[].url`                               | URL to send the request to.                                                                                                                        | Required `\"\"`              |\n| `endpoints[].method`                            | Request method.                                                                                                                                    | `GET`                      |\n| `endpoints[].conditions`                        | Conditions used to determine the health of the endpoint. <br />See [Conditions](#conditions).                                                      | `[]`                       |\n| `endpoints[].interval`                          | Duration to wait between every status check.                                                                                                       | `60s`                      |\n| `endpoints[].graphql`                           | Whether to wrap the body in a query param (`{\"query\":\"$body\"}`).                                                                                   | `false`                    |\n| `endpoints[].body`                              | Request body.                                                                                                                                      | `\"\"`                       |\n| `endpoints[].headers`                           | Request headers.                                                                                                                                   | `{}`                       |\n| `endpoints[].dns`                               | Configuration for an endpoint of type DNS. <br />See [Monitoring an endpoint using DNS queries](#monitoring-an-endpoint-using-dns-queries).        | `\"\"`                       |\n| `endpoints[].dns.query-type`                    | Query type (e.g. MX)                                                                                                                               | `\"\"`                       |\n| `endpoints[].dns.query-name`                    | Query name (e.g. example.com)                                                                                                                      | `\"\"`                       |\n| `endpoints[].alerts[].type`                     | Type of alert. <br />Valid types: `slack`, `discord`, `email`, `googlechat`, `pagerduty`, `twilio`, `mattermost`, `messagebird`, `teams` `custom`. | Required `\"\"`              |\n| `endpoints[].alerts[].enabled`                  | Whether to enable the alert.                                                                                                                       | `false`                    |\n| `endpoints[].alerts[].failure-threshold`        | Number of failures in a row needed before triggering the alert.                                                                                    | `3`                        |\n| `endpoints[].alerts[].success-threshold`        | Number of successes in a row before an ongoing incident is marked as resolved.                                                                     | `2`                        |\n| `endpoints[].alerts[].send-on-resolved`         | Whether to send a notification once a triggered alert is marked as resolved.                                                                       | `false`                    |\n| `endpoints[].alerts[].description`              | Description of the alert. Will be included in the alert sent.                                                                                      | `\"\"`                       |\n| `endpoints[].client`                            | [Client configuration](#client-configuration).                                                                                                     | `{}`                       |\n| `endpoints[].ui`                                | UI configuration at the endpoint level.                                                                                                            | `{}`                       |\n| `endpoints[].ui.hide-hostname`                  | Whether to hide the hostname in the result.                                                                                                        | `false`                    |\n| `endpoints[].ui.hide-url`                       | Whether to ensure the URL is not displayed in the results. Useful if the URL contains a token.                                                     | `false`                    |\n| `endpoints[].ui.dont-resolve-failed-conditions` | Whether to resolve failed conditions for the UI.                                                                                                   | `false`                    |\n| `endpoints[].ui.badge.reponse-time`             | List of response time thresholds. Each time a threshold is reached, the badge has a different color.                                               | `[50, 200, 300, 500, 750]` |\n| `alerting`                                      | [Alerting configuration](#alerting).                                                                                                               | `{}`                       |\n| `security`                                      | [Security configuration](#security).                                                                                                               | `{}`                       |\n| `disable-monitoring-lock`                       | Whether to [disable the monitoring lock](#disable-monitoring-lock).                                                                                | `false`                    |\n| `skip-invalid-config-update`                    | Whether to ignore invalid configuration update. <br />See [Reloading configuration on the fly](#reloading-configuration-on-the-fly).               | `false`                    |\n| `web`                                           | Web configuration.                                                                                                                                 | `{}`                       |\n| `web.address`                                   | Address to listen on.                                                                                                                              | `0.0.0.0`                  |\n| `web.port`                                      | Port to listen on.                                                                                                                                 | `8080`                     |\n| `ui`                                            | UI configuration.                                                                                                                                  | `{}`                       |\n| `ui.title`                                      | [Title of the document](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/title).                                                          | `Health Dashboard ǀ Gatus` |\n| `ui.header`                                     | Header at the top of the dashboard.                                                                                                                | `Health Status`            |\n| `ui.logo`                                       | URL to the logo to display.                                                                                                                        | `\"\"`                       |\n| `ui.link`                                       | Link to open when the logo is clicked.                                                                                                             | `\"\"`                       |\n| `ui.buttons`                                    | List of buttons to display below the header.                                                                                                       | `[]`                       |\n| `ui.buttons[].name`                             | Text to display on the button.                                                                                                                     | Required `\"\"`              |\n| `ui.buttons[].link`                             | Link to open when the button is clicked.                                                                                                           | Required `\"\"`              |\n| `maintenance`                                   | [Maintenance configuration](#maintenance).                                                                                                         | `{}`                       |\n\n\n### Conditions\nHere are some examples of conditions you can use:\n\n| Condition                        | Description                                         | Passing values             | Failing values   |\n|:---------------------------------|:----------------------------------------------------|:---------------------------|------------------|\n| `[STATUS] == 200`                | Status must be equal to 200                         | 200                        | 201, 404, ...    |\n| `[STATUS] < 300`                 | Status must lower than 300                          | 200, 201, 299              | 301, 302, ...    |\n| `[STATUS] <= 299`                | Status must be less than or equal to 299            | 200, 201, 299              | 301, 302, ...    |\n| `[STATUS] > 400`                 | Status must be greater than 400                     | 401, 402, 403, 404         | 400, 200, ...    |\n| `[STATUS] == any(200, 429)`      | Status must be either 200 or 429                    | 200, 429                   | 201, 400, ...    |\n| `[CONNECTED] == true`            | Connection to host must've been successful          | true                       | false            |\n| `[RESPONSE_TIME] < 500`          | Response time must be below 500ms                   | 100ms, 200ms, 300ms        | 500ms, 501ms     |\n| `[IP] == 127.0.0.1`              | Target IP must be 127.0.0.1                         | 127.0.0.1                  | 0.0.0.0          |\n| `[BODY] == 1`                    | The body must be equal to 1                         | 1                          | `{}`, `2`, ...   |\n| `[BODY].user.name == john`       | JSONPath value of `$.user.name` is equal to `john`  | `{\"user\":{\"name\":\"john\"}}` |                  |\n| `[BODY].data[0].id == 1`         | JSONPath value of `$.data[0].id` is equal to 1      | `{\"data\":[{\"id\":1}]}`      |                  |\n| `[BODY].age == [BODY].id`        | JSONPath value of `$.age` is equal JSONPath `$.id`  | `{\"age\":1,\"id\":1}`         |                  |\n| `len([BODY].data) < 5`           | Array at JSONPath `$.data` has less than 5 elements | `{\"data\":[{\"id\":1}]}`      |                  |\n| `len([BODY].name) == 8`          | String at JSONPath `$.name` has a length of 8       | `{\"name\":\"john.doe\"}`      | `{\"name\":\"bob\"}` |\n| `has([BODY].errors) == false`    | JSONPath `$.errors` does not exist                  | `{\"name\":\"john.doe\"}`      | `{\"errors\":[]}`  |\n| `has([BODY].users) == true`      | JSONPath `$.users` exists                           | `{\"users\":[]}`             | `{}`             |\n| `[BODY].name == pat(john*)`      | String at JSONPath `$.name` matches pattern `john*` | `{\"name\":\"john.doe\"}`      | `{\"name\":\"bob\"}` |\n| `[BODY].id == any(1, 2)`         | Value at JSONPath `$.id` is equal to `1` or `2`     | 1, 2                       | 3, 4, 5          |\n| `[CERTIFICATE_EXPIRATION] > 48h` | Certificate expiration is more than 48h away        | 49h, 50h, 123h             | 1h, 24h, ...     |\n| `[DOMAIN_EXPIRATION] > 720h`     | The domain must expire in more than 720h            | 4000h                      | 1h, 24h, ...     |\n\n\n#### Placeholders\n| Placeholder                | Description                                                                               | Example of resolved value                    |\n|:---------------------------|:------------------------------------------------------------------------------------------|:---------------------------------------------|\n| `[STATUS]`                 | Resolves into the HTTP status of the request                                              | `404`                                        |\n| `[RESPONSE_TIME]`          | Resolves into the response time the request took, in ms                                   | `10`                                         |\n| `[IP]`                     | Resolves into the IP of the target host                                                   | `192.168.0.232`                              |\n| `[BODY]`                   | Resolves into the response body. Supports JSONPath.                                       | `{\"name\":\"john.doe\"}`                        |\n| `[CONNECTED]`              | Resolves into whether a connection could be established                                   | `true`                                       |\n| `[CERTIFICATE_EXPIRATION]` | Resolves into the duration before certificate expiration (valid units are \"s\", \"m\", \"h\".) | `24h`, `48h`, 0 (if not protocol with certs) |\n| `[DOMAIN_EXPIRATION]`      | Resolves into the duration before the domain expires (valid units are \"s\", \"m\", \"h\".)     | `24h`, `48h`, `1234h56m78s`                  |\n| `[DNS_RCODE]`              | Resolves into the DNS status of the response                                              | `NOERROR`                                    |\n\n\n#### Functions\n| Function | Description                                                                                                    | Example                            |\n|:---------|:---------------------------------------------------------------------------------------------------------------|:-----------------------------------|\n| `len`    | Returns the length of the object/slice. Works only with the `[BODY]` placeholder.                              | `len([BODY].username) > 8`         |\n| `has`    | Returns `true` or `false` based on whether a given path is valid. Works only with the `[BODY]` placeholder.    | `has([BODY].errors) == false`      |\n| `pat`    | Specifies that the string passed as parameter should be evaluated as a pattern. Works only with `==` and `!=`. | `[IP] == pat(192.168.*)`           |\n| `any`    | Specifies that any one of the values passed as parameters is a valid value. Works only with `==`",
  "permissions": {
    "read": true,
    "write": false,
    "admin": false
  },
  "media_types": [
    "application/vnd.docker.container.image.v1+json",
    "application/vnd.docker.distribution.manifest.list.v2+json"
  ],
  "content_types": [
    "image"
  ]
}