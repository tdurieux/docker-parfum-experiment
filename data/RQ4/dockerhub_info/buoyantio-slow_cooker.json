{
  "user": "buoyantio",
  "name": "slow_cooker",
  "namespace": "buoyantio",
  "repository_type": "image",
  "status": 1,
  "status_description": "active",
  "description": "A load tester for tenderizing your servers.",
  "is_private": false,
  "is_automated": true,
  "can_edit": false,
  "star_count": 3,
  "pull_count": 1917633,
  "last_updated": "2020-08-12T22:28:41.303976Z",
  "date_registered": "2017-01-26T18:18:18.180558Z",
  "collaborator_count": 0,
  "affiliation": null,
  "hub_user": "buoyantio",
  "has_starred": false,
  "full_description": "[![CircleCI](https://circleci.com/gh/BuoyantIO/slow_cooker.svg?style=shield)](https://circleci.com/gh/BuoyantIO/slow_cooker)\n\n# slow_cooker\nA load tester for tenderizing your servers.\n\nMost load testers work by sending as much traffic as possible to a\nbackend. We wanted a different approach, we wanted to be able to test\na service with a predictable load and concurrency level for a long\nperiod of time. Instead of getting a report at the end, we wanted\nperiodic reports of qps and latency.\n\n# Running it\n\n`go build; ./slow_cooker <url>`\n\nor:\n\n`go run main.go <url>`\n\n# Testing\n\n`go test ./...`\n\n# Flags\n\n| Flag                  | Default   | Description |\n|-----------------------|-----------|-------------|\n| `-qps`                | 1         | QPS to send to backends per request thread. |\n| `-concurrency`        | 1         | Number of goroutines to run, each at the specified QPS level. Measure total QPS as `qps * concurrency`. |\n| `-iterations`         | 0         | Number of iterations for the experiment. Exits gracefully after `iterations * interval` (default 0, meaning infinite). |\n| `-compress`           | `<unset>` | If set, ask for compressed responses. |\n| `-data`               | `<none>`  | Include the specified body data in requests. If the data starts with a '@' the remaining value will be treated as a file path to read the body data from, or if the data value is '@-', the body data will be read from stdin. |\n| `-hashSampleRate`     | `0.0`     | Sampe Rate for checking request body's hash. Interval in the range of [0.0, 1.0] |\n| `-hashValue`          | `<none>`  | fnv-1a hash value to check the request body against |\n| `-header`             | `<none>`  | Adds additional headers to each request. Can be specified multiple times. Format is `key: value`. |\n| `-host`               | `<none>`  | Overrides the default host header value that's set on each request. |\n| `-interval`           | 10s       | How often to report stats to stdout. |\n| `-latencyUnit`        | ms        | latency units [ms|us|ns]. |\n| `-method`             | GET       | Determines which HTTP method to use when making the request. |\n| `-metric-addr`        | `<none>`  | Address to use when serving the Prometheus `/metrics` endpoint. No metrics are served if unset. Format is `host:port` or `:port`. |\n| `-noLatencySummary`   | `<unset>` | If set, don't print the latency histogram report at the end. |\n| `-noreuse`            | `<unset>` | If set, do not reuse connections. Default is to reuse connections. |\n| `-reportLatenciesCSV` | `<none>`  | Filename to write CSV latency values. Format of CSV is millisecond buckets with number of requests in each bucket. |\n| `-timeout`            | 10s       | Individual request timeout. |\n| `-totalRequests`      | `<none>`  | Exit after sending this many requests. |\n| `-help`               | `<unset>` | If set, print all available flags and exit. |\n\n# Using a URL file\n\nIf the `<url>` argument begins with `@` the argument will be treated as a file path to read a newline separated list of URLs to send requests to, or if the value is `@-`, the url list will be read from stdin.\n\nExample url file contents:\n\n```\nhttp://localhost:4140/foo\nhttp://localhost:4140/bar\nhttp://localhost:4140/baz\n```\n\nReading url list from a file:\n\n```$ slow_cooker -qps 100 @urllist```\n\nUsing a hypothetical url generation script to pipe url list to slow cooker via stdin:\n\n```$ url_generator | slow_cooker -qps 100 @-```\n\nThe urls in the list file will be processed sequentially.\n\n# Using multiple Host headers\n\nIf you want to send multiple Host headers to a backend, pass a comma separated\nlist to the host flag. Each request will be selected randomly from the list.\n\nFor more complex distributions, you can run multiple slow_cooker processes:\n\n```$ slow_cooker -host web_a,web_b -qps 200 http://localhost:4140```\n\n```$ slow_cooker -host web_b -qps 100 http://localhost:4140```\n\nThis example will send 300 qps total to `http://localhost:4140/` with 100 qps\nsent with `Host: web_a` and 200 qps sent with `Host: web_b`\n\n# TLS use\n\nPass in an https url and it'll use TLS automatically.\n\n_Warning_ We do not verify the certificate, we use `InsecureSkipVerify: true`\n\n# Example usage\n\n```\n$ ./slow_cooker -qps 100 -concurrency 10 http://slow_server\n\n2016-05-16T20:45:05Z 0   7102/0/0 10000 71% 10s 0 [ 12  26  37  91 ] 91\n2016-05-16T20:45:16Z 1   7120/0/0 10000 71% 10s 1 [ 11  27  37  53 ] 53\n2016-05-16T20:45:26Z 2   7158/0/0 10000 71% 10s 0 [ 11  27  37  74 ] 74\n2016-05-16T20:45:36Z 3   7169/0/0 10000 71% 10s 1 [ 11  27  36  52 ] 52\n2016-05-16T20:45:46Z 4   7273/0/0 10000 72% 10s 0 [ 11  27  36  58 ] 58\n2016-05-16T20:45:56Z 5   7087/0/0 10000 70% 10s 1 [ 11  28  37  61 ] 61\n2016-05-16T20:46:07Z 6   7231/0/0 10000 72% 10s 0 [ 11  26  35  71 ] 71\n2016-05-16T20:46:17Z 7   7257/0/0 10000 72% 10s 0 [ 11  27  36  57 ] 57\n2016-05-16T20:46:27Z 8   7205/0/0 10000 72% 10s 0 [ 11  27  36  64 ] 64\n2016-05-16T20:46:37Z 9   7256/0/0 10000 72% 10s 0 [ 11  27  36  62 ] 62\n2016-05-16T20:46:47Z 10  7164/0/0 10000 71% 10s 0 [ 11  27  38  74 ] 74\n2016-05-16T20:46:58Z 11  7232/0/0 10000 72% 10s 0 [ 11  26  35  63 ] 63\n```\n\nIn this example, we see that the server is too slow to keep up with\nour requested load. that slowness is noted via the throughput\npercentage.\n\n## Docker usage\n\n### Run\n\n```bash\ndocker run -it buoyantio/slow_cooker -qps 100 -concurrency 10 http://$(docker-machine ip default):4140\n```\n\n### Build your own\n\n```bash\ndocker build -t buoyantio/slow_cooker -f Dockerfile .\n```\n\n# Log format\n\nWe use vertical alignment in the output to help find anomalies and spot\nslowdowns. If you're running multi-hour tests, bumping up the reporting\ninterval to 60 seconds (`60s` or `1m`) is recommended.\n\n```\n$timestamp $good/$bad/$failed $trafficGoal $percentGoal $interval $min [$p50 $p95 $p99 $p999] $max $bhash\n```\n\n`bad` means a status code in the 500 range. `failed` means a connection failure.\n`percentGoal` is calculated as the total number of `good` and `bad` requests as\na percentage of `trafficGoal`.\n\n`bhash` is the number of failed hashes of body content. A value greater than 0 indicates a real problem.\n\n## Tips and tricks\n\n### keep a logfile\n\nUse `tee` to keep a logfile of slow_cooker results and `cut` to find bad or failed requests.\n\n```bash\n./slow_cooker_linux_amd64 -qps 5 -concurrency 20 -interval 10s http://localhost:4140 | tee slow_cooker.log\n```\n\n### use cut to look at specific fields from your tee'd logfile\n\n`cat slow_cook.log |cut -d ' ' -f 3 | cut -d '/' -f 2 |sort -rn |uniq -c`\n\nwill show all bad (status code >= 500) requests.\n\n`cat slow_cook.log |cut -d ' ' -f 3 | cut -d '/' -f 3 |sort -rn |uniq -c`\n\nwill show all failed (connection refused, dropped, etc) requests.\n\n### dig into the full latency report\n\nWith the `-reportLatenciesCSV` flag, you can thoroughly inspect your\nservice's latency instead of relying on pre-computed statistical\nsummaries. We chose CSV to allow for easy integration with statistical\nenvironments like R and standard spreadsheet tools like Excel.\n\n### use the latency CSV output to see system performance changes\n\nUse `-totalRequests` and `-reportLatenciesCSV` to see how your system\nlatency grows as a function of traffic levels.\n\n### use -concurrency to improve throughput\n\nIf you're not hitting the throughput numbers you expect, try\nincreasing `-concurrency` so your requests are issued over more\ngoroutines. Each goroutine issues requests serially, waiting for a\nresponse before issuing the next request.\n\nIf you have scripts that process slow_cooker logs, feel free to add\nthem to this project!\n",
  "permissions": {
    "read": true,
    "write": false,
    "admin": false
  },
  "media_types": [
    "application/vnd.docker.container.image.v1+json",
    "application/vnd.docker.distribution.manifest.list.v2+json"
  ],
  "content_types": [
    "image"
  ]
}