{
  "user": "lightglitch",
  "name": "seekerr",
  "namespace": "lightglitch",
  "repository_type": "image",
  "status": 1,
  "status_description": "active",
  "description": "Tool to add new movies to Radarr based on RSS, IMDB and Trakt lists. ",
  "is_private": false,
  "is_automated": false,
  "can_edit": false,
  "star_count": 0,
  "pull_count": 5437,
  "last_updated": "2022-11-19T13:24:44.963313Z",
  "date_registered": "2021-05-12T12:42:00.489541Z",
  "collaborator_count": 0,
  "affiliation": null,
  "hub_user": "lightglitch",
  "has_starred": false,
  "full_description": "# seekerr\nTool to add new movies to Radarr based on RSS, IMDB and Trakt lists. \n\n[![GitHub issues](https://img.shields.io/github/issues/lightglitch/seekerr.svg?maxAge=60&style=flat-square)](https://github.com/lightglitch/seekerr/issues)\n[![GitHub pull requests](https://img.shields.io/github/issues-pr/lightglitch/seekerr.svg?maxAge=60&style=flat-square)](https://github.com/lightglitch/seekerr/pulls)\n[![MIT](https://img.shields.io/badge/license-MIT-blue.svg?maxAge=60&style=flat-square)](https://opensource.org/licenses/MIT)\n[![Copyright 2020-2021](https://img.shields.io/badge/copyright-2021-blue.svg?maxAge=60&style=flat-square)](https://github.com/lightglitch/seekerr)\n[![Github Releases](https://img.shields.io/github/downloads/lightglitch/seekerr/total.svg?maxAge=60&style=flat-square)](https://github.com/lightglitch/seekerr/releases/)\n\n---\n\n- [seekerr](#seekerr)\n  - [Introduction](#introduction)\n  - [Configuration](#configuration)\n    - [Sample Configuration](#sample-configuration)\n    - [CRON](#cron)\n    - [Services](#services)\n    - [Filters](#filters)\n    - [Lists](#lists)\n    - [Notifications](#notifications)\n    - [Logger](#logger)\n  - [Usage](#usage)\n    - [Docker](#docker)\n    - [General](#general)\n    - [Import](#import)\n    - [TODO](#todo)\n    - [References and Inspiration](#references-and-inspiration)\n\n## Introduction\n\nSeekerr uses RSS, IMDB and Trakt.tv lists to find movies and adds them to Radarr.\n\nExamples of supported lists:\n\n- RSS\n  - [RARBG](https://rarbgprx.org/rssdd_magnet.php?category=44)\n\n- IMDB\n  - [New Releases](https://www.imdb.com/list/ls016522954/?sort=list_order,asc&st_dt=&mode=detail&page=1&title_type=movie&user_rating=6.0%2C&ref_=ttls_ref_rt_usr)\n- Trakt\n  - Official Trakt Lists\n    - Trending\n    - Popular\n    - Anticipated\n    - Box Office\n  - Public Lists\n    - [Movist App](https://trakt.tv/users/movistapp/lists/now-playing?sort=rank,asc)\n\n## Configuration\n\n### Sample Configuration\n\n```yaml\nlogger:\n  level: info # panic,fatal,error,warn,info,debug,trace\n  timeFormat: \"\" # golang time format\n  color: true # active color on console\n  human: true # store file log as human readable\n  file: \"var/log/seekerr.%Y%m%d.log\" # %Y%m%d is used for rotation. leave empty to disable file log\n\ncron: \"0 */2 * * *\"\n\nservices:\n  resty:\n    debug: false\n    timeout: 20s #golang duration\n    retry: 0 # zero for no retries\n    retryWaitTime: 1s\n    retryMaxWaitTime: 10s\n\n  trakt:\n    apiKey: \"\"\n\n  omdb:\n    apiKey: \"\"\n\n  guessIt:\n    type: \"command\" # webservice\n    path: \"guessit\"\n    # url: \"http://192.168.1.100:5000/\"\n\n  radarr:\n    url: \"http://192.168.1.100:7878/\"\n    apiKey: \"\"\n    rootFolder: \"/movies/\"\n    quality: \"Bluray\"\n    minimumAvailability: \"inCinemas\"\n    monitored: true\n    searchForMovie: false\n\nnotifications:\n  gotify:\n    webhook: \"http://192.168.1.100:8070/message?token=XXXX\"\n    events: [\"ADDED_MOVIE\",\"REVISION_MOVIE\",\"FINISH_ALL_FEEDS\"] # START_FEED, FINISH_FEED, FINISH_ALL_FEEDS, ADDED_MOVIE, leave empty for all\n\n  slack:\n    webhook: \"https://hooks.slack.com/services/T00000000/B00000000/XXXXXXXXXXXXXXXXXXXXXXXX\"\n    events: [\"ADDED_MOVIE\",\"REVISION_MOVIE\",\"FINISH_ALL_FEEDS\"] # START_FEED, FINISH_FEED, FINISH_ALL_FEEDS, ADDED_MOVIE, leave empty for all\n\nimporter:\n  revision: false\n  filter:\n    limit: 100 # limit the movies to process on each list\n    exclude:\n      - 'CountRatings < 2 || Runtime < 20 || ImdbVotes < 1000 || Year > Now().Year()'\n      - 'Ratings.Imdb != 0 && Ratings.Imdb < 7'\n      - 'Ratings.Metacritic != 0 && Ratings.Metacritic < 70'\n      - 'Ratings.RottenTomatoes != 0 && Ratings.RottenTomatoes < 75'\n    revision:\n      - 'CountRatings < 2 || Runtime < 20 || ImdbVotes < 1000 || Year > Now().Year()'\n      - 'Ratings.Imdb != 0 && Ratings.Imdb < 6.5'\n      - 'Ratings.Metacritic != 0 && Ratings.Metacritic < 60'\n      - 'Ratings.RottenTomatoes != 0 && Ratings.RottenTomatoes < 65'\n\n  lists:\n    rarbg:\n      type: \"rss\" # rss | trakt | imdb\n      url: \"https://rarbgprx.org/rssdd_magnet.php?category=44\"\n      guessIt: true\n\n    imdb:\n      type: \"imdb\" # rss | trakt | imdb\n      url: \"https://www.imdb.com/list/ls016522954/?sort=list_order,asc&st_dt=&mode=detail&page=1&title_type=movie&user_rating=6.0%2C&ref_=ttls_ref_rt_usr\"\n\n    traktTrending:\n      type: \"trakt\" # rss | trakt | imdb\n      # special urls trakt://movies/trending, trakt://movies/popular, trakt://movies/anticipated, trakt://movies/boxoffice\n      url: \"trakt://movies/trending\"\n\n    traktPublic:\n      type: \"trakt\" # rss | trakt | imdb\n      url: \"https://trakt.tv/users/movistapp/lists/now-playing?sort=rank,asc\"\n```\n### CRON\n\nAdded a new cron command that runs the import based on the schedule in the configuration:\n  ```yaml\n  cron: \"0 */2 * * *\"\n  ```\n\nA cron expression represents a set of times, using 5 space-separated fields.\n\nField name   | Mandatory? | Allowed values  | Allowed special characters\n----------   | ---------- | --------------  | --------------------------\nMinutes      | Yes        | 0-59            | * / , -\nHours        | Yes        | 0-23            | * / , -\nDay of month | Yes        | 1-31            | * / , - ?\nMonth        | Yes        | 1-12 or JAN-DEC | * / , -\nDay of week  | Yes        | 0-6 or SUN-SAT  | * / , - ?\n\nNote: Month and Day-of-week field values are case insensitive. \"SUN\", \"Sun\", and \"sun\" are equally accepted.\n\nThen execute the following command:\n\n```\nseekerr cron\n```\n\n\n### Services\n\n- Radarr\n\n  Radarr configuration.\n  \n  ```yaml\n    radarr:\n      url: \"http://192.168.1.100:7878/\"\n      apiKey: \"\"\n      rootFolder: \"/movies/\"\n      quality: \"Bluray\"\n      minimumAvailability: \"inCinemas\"\n      monitored: true\n      searchForMovie: false\n  ```\n\n  `apiKey` - Radarr's API Key.\n  \n  `quality` - Quality Profile that movies are assigned to.\n  \n  `minimumAvailability` - The minimum availability the movies are set to.\n  \n  - Choices are `announced`, `inCinemas`, `released` (Physical/Web), or `predb`.\n\n  `rootFolder` - Root folder for movies.\n  \n  `url` - Radarr's URL.\n  \n  - Note: If you have URL Base enabled in Radarr's settings, you will need to add that into the URL as well.\n  \n- OMDB\n\n  [OMDb](https://www.omdbapi.com/) Authentication info.  \n  Needed to fetch movie ratings and filter out movies.\n\n  ```yaml\n    omdb:\n      apiKey: \"\"\n  ```\n\n- Trakt\n\n  1. Create a Trakt application by going [here](https://trakt.tv/oauth/applications/new)\n  \n  2. Enter a name for your application; for example `seekerr`\n  \n  3. Enter `urn:ietf:wg:oauth:2.0:oob` in the `Redirect uri` field.\n  \n  4. Click \"SAVE APP\".\n  \n  5. Open the seekerr configuration file `seekerr.yaml` and insert your Trakt API Key:\n  \n      ```yaml\n        trakt:\n          apiKey: \"your_trakt_api_key\"\n      ```\n\n- GuessIt\n\n  GuessIt it's used to parse the title of RSS item and obtain the correct movie name and year.\n  By knowing the correct movie we can fetch the ratings from OMDB.  \n  It can be configured as a command line or as rest service.\n  \n  ```yaml\n    guessIt:\n      type: \"command\" # webservice\n      path: \"guessit\"\n      # url: \"http://192.168.1.100:5000/\"\n  ```\n\n- Resty\n\n  ```yaml\n    resty:\n      debug: false\n      timeout: 20s #golang duration\n      retry: 0 # zero for no retries\n      retryWaitTime: 1s\n      retryMaxWaitTime: 10s\n  ```\n\n### Filters\n\nThe filters can be configured globally and per list, the list configuration takes precedence over the global filter configuration.\n\n```yaml\n  revision: false\n  filter:\n    limit: 100 # limit the movies to process on each list\n    exclude:\n      - 'CountRatings < 2 || Runtime < 20 || ImdbVotes < 1000 || Year > Now().Year()'\n      - 'Ratings.Imdb != 0 && Ratings.Imdb < 7'\n      - 'Ratings.Metacritic != 0 && Ratings.Metacritic < 70'\n      - 'Ratings.RottenTomatoes != 0 && Ratings.RottenTomatoes < 75'\n    revision:\n      - 'CountRatings < 2 || Runtime < 20 || ImdbVotes < 1000 || Year > Now().Year()'\n      - 'Ratings.Imdb != 0 && Ratings.Imdb < 6.5'\n      - 'Ratings.Metacritic != 0 && Ratings.Metacritic < 60'\n      - 'Ratings.RottenTomatoes != 0 && Ratings.RottenTomatoes < 65'\n```\n\n  `revision` - Notify me about movies that are not approved but match revision rules\n\n  `limit` - Process only this number movies in the list\n\n  `exclude` - An list of expressions that exclude the movie from being added\n\n### Lists\n\nThe base configuration for the lists is:\n\n```yaml\n  name_of_list:\n    # The type of the feed, support 3 types\n    type: rss | trakt | imdb\n    # special urls for trakt type trakt://movies/trending, trakt://movies/popular, trakt://movies/anticipated, trakt://movies/boxoffice\n    url: \"http://feed-url.com\"\n    guessIt: true # only for rss and if it's necessary to parse the title to get the correct movie name and year\n    # you can override the global filters for a specific feed\n    filter:  \n```\n\n- RSS\n\n```yaml\n    rarbg:\n      type: \"rss\"\n      url: \"https://rarbgprx.org/rssdd_magnet.php?category=44\"\n      guessIt: true\n```\n  \n- IMDB\n\n```yaml\n    imdb:\n      type: \"imdb\"\n      url: \"https://www.imdb.com/list/ls016522954/?sort=list_order,asc&st_dt=&mode=detail&page=1&title_type=movie&user_rating=6.0%2C&ref_=ttls_ref_rt_usr\"\n```\n\n- Trakt\n\n```yaml\n    traktTrending:\n      type: \"trakt\" # rss | trakt | imdb\n      # special urls trakt://movies/trending, trakt://movies/popular, trakt://movies/anticipated, trakt://movies/boxoffice\n      url: \"trakt://movies/trending\"\n\n    traktPublic:\n      type: \"trakt\" # rss | trakt | imdb\n      url: \"https://trakt.tv/users/movistapp/lists/now-playing?sort=rank,asc\"\n```\n\n### Notifications\n\n- Gotify\n\n```yaml\nnotifications:\n  gotify:\n    webhook: \"http://192.168.1.100:8070/message?token=XXXX\"\n    events: [\"ADDED_MOVIE\",\"REVISION_MOVIE\",\"FINISH_ALL_FEEDS\"] # START_FEED, FINISH_FEED, FINISH_ALL_FEEDS, ADDED_MOVIE, leave empty for all\n```\n\n- Slack\n\n```yaml\n  slack:\n    webhook: \"https://hooks.slack.com/services/T00000000/B00000000/XXXXXXXXXXXXXXXXXXXXXXXX\"\n    events: [\"ADDED_MOVIE\",\"REVISION_MOVIE\",\"FINISH_ALL_FEEDS\"] # START_FEED, FINISH_FEED, FINISH_ALL_FEEDS, ADDED_MOVIE, leave empty for all\n```\n\n  Slack notification example:\n  \n  ![slack](https://user-images.githubusercontent.com/196953/78181877-fd144a00-745c-11ea-9832-0cdfbcb3be2c.jpg)\n\n### Logger\n\n```yaml\nlogger:\n  level: info # panic,fatal,error,warn,info,debug,trace\n  timeFormat: \"\" # golang time format\n  color: true # active color on console\n  human: true # store log as human readable\n  file: \"var/log/seekerr.%Y%m%d.log\" # %Y%m%d is used for rotation. leave empty to disable file log\n```\n\n## Usage\n\n### Docker\n\nUsing stable releases:\n\n```\ndocker run -d --name='Seekerr' -v '<path to data>':'/config':'rw' 'lightglitch/seekerr:stable'\n```\n\nUsing master:\n\n```\ndocker run -d --name='Seekerr' -v '<path to data>':'/config':'rw' 'lightglitch/seekerr:latest'\n```\n\nYou need to create your config file before running the docker image.\n\n### General\n\n```\nseekerr\n```\n\n```\nTool to add new movies to Radarr using internet lists.\nYou can filter, exclude and define the minimum ratings to add the movies you pretend.\n\nUsage:\n  seekerr [command]\n\nAvailable Commands:\n  help        Help about any command\n  import      Import the movies found in the lists to radarr.\n  version     Print the version number of seekerr\n\nFlags:\n      --config string   config file (default is config/seekerr.yaml)\n  -h, --help            help for seekerr\n\nUse \"seekerr [command] --help\" for more information about a command.\n```\n\n### Import\n\n```\nseekerr import --help\n```\n\n```\nImport the movies found in the lists to radarr.\n\nUsage:\n  seekerr import [flags]\n\nFlags:\n  -h, --help          help for import\n  -l, --list string   The name of the list to import (default \"all\")\n  -r, --revision      Notify me about movies that are not approved but match revision rules\n\nGlobal Flags:\n      --config string   config file (default is config/seekerr.yaml)\n```\n\n`-l`, `--list` -  The name of the list that is configured in the file seekerr.yaml. If empty imports all lists.\n\n\n### Cron\n\n```\nseekerr cron --help\n```\n\n```\nImport the movies found in the lists to radarr using the schedule on the config file.\n\nUsage:\n  seekerr cron [flags]\n\nFlags:\n  -h, --help              help for cron\n  -s, --schedule string   Run with this cron schedule\n\nGlobal Flags:\n      --config string   config file (default is config/seekerr.yaml)\n```\n\n### TODO\n\n- [ ] Tests\n- [ ] Support Series and Sonarr\n\n### References and Inspiration\n\n- [traktarr](https://github.com/l3uddz/traktarr/): Traktarr uses Trakt.tv to find shows and movies to add in to Sonarr and Radarr, respectively.\n- [Radarr](https://github.com/Radarr/Radarr): A fork of Sonarr to work with movies à la Couchpotato.\n\n\n- Seekerr logo used icons made by **phatplus** and **freepik** from [www.flaticon.com](https://www.flaticon.com/)\n---\n",
  "permissions": {
    "read": true,
    "write": false,
    "admin": false
  },
  "media_types": [
    "application/vnd.docker.distribution.manifest.list.v2+json",
    "application/vnd.docker.container.image.v1+json"
  ],
  "content_types": [
    "image"
  ]
}