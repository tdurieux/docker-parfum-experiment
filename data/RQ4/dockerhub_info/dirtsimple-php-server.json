{
  "user": "dirtsimple",
  "name": "php-server",
  "namespace": "dirtsimple",
  "repository_type": "image",
  "status": 1,
  "status_description": "active",
  "description": "alpine + nginx + php-fpm + dockerize = easy PHP app server goodness",
  "is_private": false,
  "is_automated": true,
  "can_edit": false,
  "star_count": 1,
  "pull_count": 2105,
  "last_updated": "2021-10-14T21:13:37.662668Z",
  "date_registered": "2017-05-24T17:47:02.967531Z",
  "collaborator_count": 0,
  "affiliation": null,
  "hub_user": "dirtsimple",
  "has_starred": false,
  "full_description": "# dirtsimple/php-server\n\n### Overview\n\nThis is a docker image for an alpine nginx + php-fpm combo container, with support for:\n\n* Cloning a git repo at container start (and running `composer install` if applicable)\n* Running scheduled jobs (cron), on-file-change jobs ([cortesi/modd](https://github.com/cortesi/modd)), webhooks ([adnanh/webhook](https://github.com/dirtsimple/php-server/#webhooks-adnanhwebhook)), or other supervisord-controlled tasks\n* Build arguments to allow adding extra packages and PHP extensions\n* Environment-based templating of any configuration file in the container at startup\n* Running any user-supplied startup scripts\n* 100% automated HTTPS certificate management via certbot and Let's Encrypt\n* Robust privilege separation and defense-in-depth for a variety of development and production use cases\n\nInspired by [richarvey/nginx-php-fpm](https://gitlab.com/ric_harvey/nginx-php-fpm), this image supports most of that image's [configuration flags](https://gitlab.com/ric_harvey/nginx-php-fpm/blob/1.5.7/docs/config_flags.md), plus many, many enhancements and bug fixes like these:\n\n* Configuration files are generated using [dockerize templates](https://github.com/jwilder/dockerize#using-templates) instead of `sed`, and boolean environment variables can be set to `true` or `false` , not just `1` or `0`\n* Your code can provide additional configuration files to be processed w/dockerize at container start time (or you can mount replacements for this image's configuration templates under `/tpl`)\n* Ready-to-use support for most PHP \"front controllers\" (as used by Wordpress, Laravel, Drupal, Symfony, etc.): just set `PHP_CONTROLLER` to `true` and `PUBLIC_DIR` to the subdirectory that contains the relevant `index.php` (if any).  (`PATH_INFO` support is also available, for e.g. Moodle.)\n* HTTPS is as simple as setting a `DOMAIN` and `LETS_ENCRYPT=my@email`: registration and renewals are immediate, painless, and 100% automatic.  The certs are saved in a volume by default, and renewals happen on container restart, as well as monthly if you enable cron.\n* cron jobs are supported by setting `USE_CRON=true` and putting the job data in `/etc/crontabs/nginx`, or an executable file in one of the `/etc/periodic/` subdirectories (via volume mount, startup script, or template files)\n* You can add `.ini` files to `/etc/supervisor.d/` to add additional processes to the base supervisor configuration, or to override the default supervisor configurations for nginx, php-fpm, etc.\n* `php-fpm` pool parameters can be set with environment vars (`FPM_PM`, `FPM_MAX_CHILDREN`, `FPM_START_SERVERS`, `FPM_MIN_SPARE_SERVERS`, `FPM_MAX_SPARE_SERVERS`, `FPM_MAX_REQUESTS`)\n* nginx's `set_real_ip_from` is recursive, and supports Cloudflare (via `REAL_IP_CLOUDFLARE=true`) as well as your own load balancers/proxies (via `REAL_IP_FROM` -- which can include multiple addresses, separated by spaces.)\n* Additional alpine APKs, PHP core extensions, and pecl extensions can be installed by setting `EXTRA_APKS`, `EXTRA_EXTS`, and `EXTRA_PECL` as environment variables or build-time arguments.\n* `sendfile` is turned on for optimal static file performance, unless you set `VIRTUALBOX_DEV=true`\n* Configuration files don't grow on each container restart\n* Developer and server priviliges are kept separate: git and composer are run as a `developer` user rather than as root, and files are owned by that user.  To be written to by PHP and the web server, files or directories must be explicitly listed in `NGINX_WRITABLE`.  (The whole codebase is `NGINX_READABLE` by default, but can be made more restrictive by listing specific directories.)\n* You can mount your code anywhere, not just `/var/www/html` (just set `CODE_BASE` to whatever directory you like)\n* If any supervised process (nginx, php-fpm, cron, etc.) enters a `FATAL` state, the entire container is shut down, so that configuration or other errors don't produce a silently unresponsive container.\n* Command-line PHP scripts run with a file-based opcache under `/tmp`, speeding start times for large PHP command line tools such as `wp-cli`, `artisan`, etc.  (For compatibility reasons, this cache is disabled when `ENABLE_XDEBUG` is true.)  Command-line scripts run without a memory limit, unless you set `PHP_CLI_MEMORY` to a memory value like `512M`.\n\nNote: there are a few configuration options that must be specified in a different way than the richarvey image, or which have different defaults: see [Backward-Compatibility Settings](https://github.com/dirtsimple/php-server/#backward-compatibility-settings), below, for more info.\n\n### Contents\n\n<!-- toc -->\n\n- [Adding Your Code](https://github.com/dirtsimple/php-server/#adding-your-code)\n  * [Pulling Updates and Pushing Changes](https://github.com/dirtsimple/php-server/#pulling-updates-and-pushing-changes)\n  * [Permissions and the `developer` User](https://github.com/dirtsimple/php-server/#permissions-and-the-developer-user)\n  * [Composer Configuration, `PATH`, and Tools](https://github.com/dirtsimple/php-server/#composer-configuration-path--and-tools)\n- [Configuration Templating](https://github.com/dirtsimple/php-server/#configuration-templating)\n- [Nginx Configuration](https://github.com/dirtsimple/php-server/#nginx-configuration)\n  * [Config Files](https://github.com/dirtsimple/php-server/#config-files)\n  * [Environment](https://github.com/dirtsimple/php-server/#environment)\n  * [Backward-Compatibility Settings](https://github.com/dirtsimple/php-server/#backward-compatibility-settings)\n  * [PHP Front Controllers and `PATH_INFO`](https://github.com/dirtsimple/php-server/#php-front-controllers-and-path_info)\n  * [File Permissions](https://github.com/dirtsimple/php-server/#file-permissions)\n  * [HTTPS and Let's Encrypt Support](https://github.com/dirtsimple/php-server/#https-and-lets-encrypt-support)\n- [Adding Extensions](https://github.com/dirtsimple/php-server/#adding-extensions)\n- [Supervised Tasks](https://github.com/dirtsimple/php-server/#supervised-tasks)\n  * [Scheduled Jobs (cron)](https://github.com/dirtsimple/php-server/#scheduled-jobs-cron)\n  * [Changed-File Jobs (modd)](https://github.com/dirtsimple/php-server/#changed-file-jobs-modd)\n  * [Webhooks (adnanh/webhook)](https://github.com/dirtsimple/php-server/#webhooks-adnanhwebhook)\n- [Version Info](https://github.com/dirtsimple/php-server/#version-info)\n\n## Version Info\n\nBuilds of this image are tagged with multiple aliases to make it easy to pin specific revisions or to float by PHP version.  For example, a PHP 7.3.13 image with release 2.1.1 of this container could be accessed via any of the following tags (if  2.1.1 were the latest release of this image):\n\n* `7.3`\n* `7.3-2.x`\n* `7.3-2.1.x`\n* `7.3-2.1.1`\n* `7.3.13`\n* `7.3.13-2.x`\n* `7.3.13-2.1.x`\n* `7.3.13-2.1.1`\n\nNote that there is **no** `latest` tag for this image; you must explicitly select at least a PHP version such as `7.3` to get the latest version of this image for that PHP version.\n\nAlso note that although you *can* just specify a PHP version, major releases of this container may be incompatble with older releases due to e.g. changes in OS versions or other factors, so you should probably at least target a specific major release of this container, e.g. `7.3-2.x` or `7.4-3.x`.\n\n### Major Versions\n\n* 3.x - Alpine 3.10-3.14, Composer 2, PHP 7.1 through 8.0, dropped prestissimo from default `GLOBAL_REQUIRE`, added `--optimize-autoloader` to default `COMPOSER_OPTIONS`\n* 2.x - Alpine 3.9, Composer 1, PHP 7.1 through 7.3, build extensions using [mlocati/docker-php-extension-installer](https://github.com/mlocati/docker-php-extension-installer)\n* 1.4.x - Alpine 3.9, Composer 1, PHP 7.1 and 7.2, image based on Docker php-fpm-alpine, scripted extension builds\n* 1.3.x and older - Alpine 3.6, PHP 7.1 only,  implemented as an overlay on the nginx-php-fpm image\n\n### Version Details\n\n| Tags          | PHP    | nginx  | mod lua | alpine | Notes |\n| ------------- | ------ | ------ | ------- | ------ | ----- |\n| 8.0-3.0.x | 8.0.9 | 1.20.1 | 0.10.19 | 3.14     |Composer 2|\n| 7.4-3.0.x | 7.4.22 | 1.20.1 | 0.10.19 | 3.14     ||\n| 7.3-3.0.x | 7.3.29 | 1.20.1 | 0.10.19 | 3.14     ||\n| 7.2-3.0.x | 7.2.34 | 1.18.0 | 0.10.15 | 3.12    ||\n| 7.1-3.0.x | 7.1.33 | 1.16.1 | 0.10.15 | 3.10    ||\n|  |  |  |  |  | &nbsp; |\n| 7.3-2.x | 7.3.13 | 1.14.2 | 0.10.15 | 3.9  | New extension build method for all 7.x-2.x versions |\n| 7.2-2.x  | 7.2.26 | 1.14.2 | 0.10.15 | 3.9    ||\n| 7.1-2.x | 7.1.33 | 1.14.2 | 0.10.15 | 3.9    ||\n|  |  |  |  |  | &nbsp; |\n| 7.2.26-1.4.x  | 7.2.26 | 1.14.2 | 0.10.15 | 3.9    | Old extension build method used from here down |\n| 7.1.33-1.4.x  | 7.1.33 | 1.14.2 | 0.10.15 | 3.9    ||\n|  |  |  |  |  | &nbsp; |\n| 1.4.x         | 7.1.33 | 1.14.2 | 0.10.15 | 3.9    ||\n| 1.4.0         | 7.1.32 | 1.14.2 | 0.10.15 | 3.9    ||\n| 1.0.x - 1.3.x | 7.1.12 | 1.13.7 | 0.10.11 | 3.6    | Based on upstream [1.3.10][ric_harvey] |\n\n[ric_harvey]: https://gitlab.com/ric_harvey/nginx-php-fpm/tree/1.3.10",
  "permissions": {
    "read": true,
    "write": false,
    "admin": false
  },
  "media_types": [
    "application/vnd.docker.container.image.v1+json"
  ],
  "content_types": [
    "image"
  ]
}