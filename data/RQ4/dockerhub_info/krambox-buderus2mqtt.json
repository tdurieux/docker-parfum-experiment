{
  "user": "krambox",
  "name": "buderus2mqtt",
  "namespace": "krambox",
  "repository_type": "image",
  "status": 1,
  "status_description": "active",
  "description": "Km200 2 mqtt Container",
  "is_private": false,
  "is_automated": true,
  "can_edit": false,
  "star_count": 0,
  "pull_count": 239915,
  "last_updated": "2021-06-09T00:58:38.579803Z",
  "date_registered": "2017-10-30T22:42:49.095097Z",
  "collaborator_count": 0,
  "affiliation": null,
  "hub_user": "krambox",
  "has_starred": false,
  "full_description": "# mqtt-km200\n\n[![mqtt-smarthome](https://img.shields.io/badge/mqtt-smarthome-blue.svg)](https://github.com/mqtt-smarthome/mqtt-smarthome)\n[![NPM version](https://badge.fury.io/js/buderus2mqtt.svg)](http://badge.fury.io/js/buderus2mqtt)\n[![Dependency Status](https://img.shields.io/gemnasium/krambox/buderus2mqtt.svg?maxAge=2592000)](https://gemnasium.com/github.com/krambox/buderus2mqtt)\n[![Build Status](https://travis-ci.org/krambox/buderus2mqtt.svg?branch=master)](https://travis-ci.org/krambox/buderus2mqtt)\n[![Maintainability](https://api.codeclimate.com/v1/badges/323bbf948a25557a2406/maintainability)](https://codeclimate.com/github/krambox/buderus2mqtt/maintainability)\n[![js-semistandard-style](https://img.shields.io/badge/code%20style-semistandard-brightgreen.svg?style=flat-square)](https://github.com/Flet/semistandard)\n[![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT)\n\nWritten and (C) 2015-18 Kai Kramer, based on an idea and code from Andreas Hahn.\nBuild with https://github.com/hobbyquaker/xyz2mqtt-skeleton from Sebastian Raff.\n\nProvided under the terms of the MIT license.\n\n## Overview\n\nbuderus2mqtt is a gateway between a KM200 Buderus internet gateway and MQTT\nwith the  https://github.com/mqtt-smarthome topic and payload format.\n\n## Installation\n\nThe recommended way is via docker hub.\n\nThe bridge requires a configuration file with the measuring points. This file should be stored in a shared host directory.\n\nIn addition, environment variables with the addresses and the key are required.  \n\n    docker run --env-file ./km200.env -v <local data directory with config.yml>:/data  --name buderus2mqtt -d krambox/buderus2mqtt\n\nEnvironment variables in file km200.env\n\n```\nKM200_url=mqtt://<MQTT Host IP>\nKM200_config=/data/config.yml\nKM200_passcode=<AES k generated with https://ssl-account.com/km200.andreashahn.info/ >\nKM200_km200=<KM200 IP>\n```\n\n### Key\n\nAES key generator for the KM200 web gateway:  https://ssl-account.com/km200.andreashahn.info/\n\n### Configuration with measuring points\n\nconfig.yml example\n\n```\nmeasurements:\n  - url: '/system/sensors/temperatures/chimney'\n  - url: '/system/sensors/temperatures/outdoor_t1'\n  - url: '/system/sensors/temperatures/supply_t1_setpoint'\n  - url: '/heatSources/actualSupplyTemperature'\n  - url: '/heatingCircuits/hc1/temperatureLevels/day'\n  - url: '/heatingCircuits/hc1/temperatureLevels/night'\n  - url: '/heatingCircuits/hc1/roomtemperature'\n  - url: '/heatingCircuits/hc1/temperatureRoomSetpoint'\n  - url: '/dhwCircuits/dhw1/actualTemp'\n  - url: '/dhwCircuits/dhw1/setTemperature'\n  - url: '/system/appliance/workingTime/centralHeating'\n  - url: '/system/appliance/workingTime/secondBurner'\n  - url: '/system/appliance/workingTime/totalSystem'\n  - url: '/dhwCircuits/dhw1/workingTime'\n  - url: '/system/appliance/numberOfStarts'\n  - url: '/system/appliance/fanSpeed'\n  - url: '/system/appliance/flameCurrent'\n  - url: '/system/appliance/actualPower'\n  - url: '/system/appliance/powerSetpoint'\n  - url: '/dhwCircuits/dhw1/waterFlow'\n```\n\nThe  tool scan.js is used to determine the possible and measurings. This\nallows you to retrieve the measuring points of the installed KM200 and display\nit in a table on the console. \n\n```\n./scan.js -p <KEY generated with https://ssl-account.com/km200.andreashahn.info/ > -k <km200 ip> gb135.txt\n```\n\n\nOr via direct call\n\n    ./km200mqtt.js -u mqtt://192.168.1.13 -k 192.168.1.162 -p <AES key>\n\n\n## Build and run local Docker container\n\n    docker build -t km200 .\n\n    docker run --env-file ./km200.env -v <local data directory with config.yml>:/data -it km200\n\n## Local build and development\n\nCall ./km200mqtt.js with -h option and set properties with command line. \n\nExample\n\n    ./km200mqtt.js  -url mqtt://<MQTT Host IP> \\\n        -config ./config.yml \\\n        -passcode <AES k generated with https://ssl-account.com/km200.andreashahn.info/ > \\\n        -km200 <KM200 IP>\n",
  "permissions": {
    "read": true,
    "write": false,
    "admin": false
  },
  "media_types": [
    "application/vnd.docker.container.image.v1+json"
  ],
  "content_types": [
    "image"
  ]
}