{
  "user": "nhumrich",
  "name": "small-prox",
  "namespace": "nhumrich",
  "repository_type": "image",
  "status": 1,
  "status_description": "active",
  "description": "A small local reverse proxy (such as nginx/haproxy) for handling many local docker containers.",
  "is_private": false,
  "is_automated": true,
  "can_edit": false,
  "star_count": 1,
  "pull_count": 1592,
  "last_updated": "2023-01-04T22:45:06.220252Z",
  "date_registered": "2017-07-28T19:37:29.431104Z",
  "collaborator_count": 1,
  "affiliation": null,
  "hub_user": "nhumrich",
  "has_starred": false,
  "full_description": "# Small-Prox\nA small local reverse proxy (such as nginx/haproxy) for handling many local docker containers.\n\nThis proxy routes traffic to specific containers based on host or path.\nIt also allows you to route traffic to local ports, in case you're not\nusing docker for some services (common for local dev).\n\nThis proxy is intended to route traffic to specific services much like the\nload balancer would on a real environment (production). It helps develop locally.\n \n**Note: This proxy/project is intended to ease local development. There is no\nsecurity/performance considerations made at all. I do not recommend using this\nto route traffic anywhere except locally.**\n\n# How does it work?\nThe container listens on the docker socket and watches for containers to start up.\nThe containers have a label that specifies what host and path they want\nto handle traffic for, and this proxy sends it to them on those conditions.\n\nFor local forwarding, the container finds the host ip address and forwards there. For Docker on Mac (or windows), this is a dns address, but for linux its in the containers ip tables.\n\n# Getting started\n\nTo run the container simply use:\n\n```bash\ndocker run -d -p 80:80 -v /var/run/docker.sock:/var/run/docker.sock nhumrich/small-prox\n```\n\nor use docker-compose:\n```yaml\nversion: '3'\nservices:\n  smallprox:\n    image: nhumrich/small-prox\n    ports:\n      - \"80:80\"\n    volumes:\n      - /var/run/docker.sock:/var/run/docker.sock\n```\n\n## Real World Example:\nLet's say you have a frontend site running at `localhost:3000` and a backend site running at `localhost:8080`. Don't forget to also add `127.0.0.1 mysite.local` to your /etc/hosts file.\n```yaml\nversion: '3'\nservices:\n  smallprox:\n    image: nhumrich/small-prox\n    ports:\n      - \"80:80\"\n    volumes:\n      - /var/run/docker.sock:/var/run/docker.sock\n    environment:\n      DEBUG: \"True\"  # or False :P\n      LOCAL_PORTS: \"mysite.local=3000,mysite.local/api=8080\"\n```\n\n### Forwarding to docker containers\nStart your container with a label:\n\n```bash\ndocker run -l proxy_expose=myapp.myhost.local=8080 myorg/mycontainer\n```\n\nThe format is:\n`proxy_expose={host}/{path}={port container listens on}`\n\nIf you are doing host based networking, you will need to add the hosts in your\n/etc/hosts file pointing to 127.0.0.1 or use an actual dns record that resolves\nto 127.0.0.1\n\n### Forwarding to local ports\nIf you would like to forward traffic to local ports, you can do this by setting\nenvironment variables on the small-prox container before you start it.\n\nThe environment variable is `LOCAL_PORTS` and excepts a comma-separated list of \nstrings in the format of `{host}/{path}={port}`.\n\n\n# FAQ\n \n### Can I use this in prod?\nI mean, you *could*, but I dont recommend it.\n\n### Does it support ssl?\nSure does! You just need to port forward port 443 as well, and also drop a `fullchain.pem` and `privkey.pem` file into\nthe `/certs/` directory in the container and ssl will work. You could either volume mount these in\nor build your own container on top of this one. The file names are the names letsencrypt uses. \n You could use self-signed certs, or you could create a DNS name that points to 127.0.0.1 and use dns\n validation to get a lets encrypt cert for your local dev.\n \n### Why did you build this? Why not just use jwilder/nginx-proxy (or similar)?\nThere are a couple reasons. `jwilder/nginx-proxy` is excellent but it only does\n host routing. I wanted path based routing as well. Also, I wanted to be able to\n route to local ports, for when i'm debugging locally and dont want to run my service inside a container.\n \nAnother possibility is just use nginx by itself. This works great until you want to change things, such\nas where a service is or what path/port it listens to. I was using a custom nginx image at my\norganization, but ended up having many many versions of it for all the different configurations\npeople wanted. I found that I wanted the \"configuration\" outside of the container, and \nin the persons repo. So, here is something a little more dynamic, and loads configuration from other places \n(docker labels). Plus, now that its in python, it gives me more flexibility to add things in the future\nif I want.\n\n### Does this use nginx/similar under the hood?\nNo. This project is written entirely in python. I had thought of just implementing it by\nlooking for docker changes, updating the nginx configuration and restarting nginx.\nThe amount of work (not much) to do that, is about the same to just listen to http and \nforward packets. I decided to do it entirely in python as a learning experience for myself.\nSince the project is intended for local development only, I am not concerned about\nsecurity/performance issues. \nThat being said, this project uses asyncio and one of python's fastest http parsers, so you\nshouldn't notice any slowness from it. \n\n",
  "permissions": {
    "read": true,
    "write": false,
    "admin": false
  },
  "media_types": [
    "application/vnd.docker.container.image.v1+json"
  ],
  "content_types": [
    "image"
  ]
}