{
  "user": "adrianrudnik",
  "name": "mjml-server",
  "namespace": "adrianrudnik",
  "repository_type": "image",
  "status": 1,
  "status_description": "active",
  "description": "Standalone mjml server / microservice, listening on port 80/tcp, supporting cors and healthchecks.",
  "is_private": false,
  "is_automated": false,
  "can_edit": false,
  "star_count": 2,
  "pull_count": 60570,
  "last_updated": "2022-08-16T12:43:42.887243Z",
  "date_registered": "2019-01-24T19:23:03.72228Z",
  "collaborator_count": 0,
  "affiliation": null,
  "hub_user": "adrianrudnik",
  "has_starred": false,
  "full_description": "# MJML docker microservice / server\n\nStandalone mjml server, listening on port 80/tcp.\n\nDue to various challenges this image sports the following features:\n\n- Clean and fast shutdowns on docker.\n- Simple CORS capabilities.\n- Small footprint (at least in a npm way).\n- Supports healthchecks.\n\n# Table of contents\n  - [Overview](#overview)\n  - [Defaults](#defaults)\n  - [Development](#development)\n  - [Troubleshooting](#troubleshooting)\n    - [Kubernetes](#kubernetes)\n\n## Overview\n\nThis image spools up a simple mjml server instance, listening to port 80/tcp per default.\n\nDue to GDPR / DSGVO reasons I required the mjml instance to be under my own control, as the processing personal information is processed in mail content generation.\n\nStarting the image is as easy as running a test instance through docker\n\n```sh\ndocker run -it --rm -p 8080:80 mjml-server\n```\n\nor `docker-compose` with the following example:\n\n```yml\nversion: '3.7'\n\nservices:\n  mjml:\n    image: adrianrudnik/mjml-server\n    ports:\n      - 8080:80\n    # environment:\n    # to change the port:\n    #   - PORT=8080\n    # for development, uncomment the following lines:\n    #   - CORS=*\n    #   - MJML_KEEP_COMMENTS=true\n    #   - MJML_VALIDATION_LEVEL=strict\n    #   - MJML_MINIFY=false\n    #   - MJML_BEAUTIFY=true\n```\n\n## Defaults\n\nThe production defaults, without any override, default to:\n\n```sh\nCORS \"\"\nMJML_KEEP_COMMENTS \"false\"\nMJML_VALIDATION_LEVEL \"soft\"\nMJML_MINIFY \"true\"\nMJML_BEAUTIFY \"false\"\nHEALTHCHECK \"true\"\nCHARSET=\"utf8\"\nDEFAULT_RESPONSE_CONTENT_TYPE=\"text/html; charset=utf-8\"\n```\n\n## Development\n\nFor development environments I would suggest to switch it to\n\n```sh\nCORS \"*\"\nMJML_KEEP_COMMENTS \"true\"\nMJML_VALIDATION_LEVEL \"strict\"\nMJML_MINIFY \"false\"\nMJML_BEAUTIFY \"true\"\nHEALTHCHECK \"false\"\n```\n\nThis will escalate any issues you have with invalid mjml code to the docker log (`stdout` or `docker-compose logs`).\n\n## Troubleshooting\n\nMake sure you pass along a plain Content-Type header and pass the mjml as raw body.\n\nCatch errors by looking at the HTTP response code.\n\n### Kubernetes\n\nAs the default Dockerfile specific `HEALTHCHECK` directive is not supported by kubernetes, you might need to specify your own probes:\n\n```\nspec:\n  containers:\n  - name: ...\n    livenessProbe:\n      exec:\n        command:\n        - curl - -X POST - 'http://localhost:80/'\n      initialDelaySeconds: 30\n      periodSeconds: 30\n    readinessProbe:\n      exec:\n        command:\n        - curl - -X POST - 'http://localhost:80/'\n      initialDelaySeconds: 25\n```\n\nBe aware that this does only check the connectivity and that the port might vary. If you want a functional check as well, you could shift to an approach like the ones used for docker with the result of the [healthcheck.sh](healthcheck.sh). But I'm not a kubernetes user, so feel free to do a pull request if you have a slim approach.\n\n### Docker\n\nIf you want to rely on the Makefile or build for multiple architectures, ensure you have the experimental features activated for Docker and you can use [docker buildx](https://docs.docker.com/buildx/working-with-buildx/).\n\nSetup on my Ubuntu 20.04 workstation was as follows, based on the docs mentioned above:\n\n```bash\n# Install additional platforms for the default node on the current host linux os\ndocker run --privileged --rm tonistiigi/binfmt --install all\n\n# create a separate endpoint that uses the default node\ndocker buildx create --use mjml-server default\n\n# After that a local build should be possible with something like\ndocker buildx build -f Dockerfile --platform linux/amd64,linux/arm64 -t [registry-and-tag] --push .\n\n# ... or if you want to use it locally with the mjml-server tag\ndocker buildx build -f Dockerfile --platform linux/amd64,linux/arm64 -t mjml-server --load .\n```\n",
  "permissions": {
    "read": true,
    "write": false,
    "admin": false
  },
  "media_types": [
    "application/vnd.docker.distribution.manifest.list.v2+json",
    "application/vnd.docker.container.image.v1+json"
  ],
  "content_types": [
    "image"
  ]
}