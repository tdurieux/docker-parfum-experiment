{
  "user": "mediabutler",
  "name": "server",
  "namespace": "mediabutler",
  "repository_type": "image",
  "status": 1,
  "status_description": "active",
  "description": "Your personal media companion",
  "is_private": false,
  "is_automated": false,
  "can_edit": false,
  "star_count": 3,
  "pull_count": 356101,
  "last_updated": "2019-04-04T14:08:27.016311Z",
  "date_registered": "2018-09-30T23:11:13.177701Z",
  "collaborator_count": 0,
  "affiliation": null,
  "hub_user": "mediabutler",
  "has_starred": false,
  "full_description": "# MediaButler Server\n\nMediaButler is aimed as your personal media companion, providing a unified experience for several applications that you may be using. Do you have a Plex Server in your network? Then MediaButler is precisely for you, featuring a full experience for you and your users. Security conscious so private information stays private. The API Server serves as the hub for everything. Open Sourced to allow you/others to implement features which can simplify and automate processes to help make life easier.\n\n# Supported Architectures\n\n`arm32v6`, `arm32v7`, `arm64v8`, `amd64` and `i386` are all provided under the `latest` tag via the manifest, to manually specify the architecture you can follow the structure of `arm32v6-latest`\n\n# Usage\n\nHere are some example snippets to help you get started creating a container.\n\n## docker\n\n```bash\ndocker run -d \\ \n    --name=mongo \\\n    -p 27017:27017 \\\n    mongo:latest mongod --bind_ip_all\n\ndocker create \\\n    --name=mediabutler \\\n    --link mongo:mongo \\\n    -e PLEX_URL=http://192.168.1.100:32400/ \\\n    -e DB_URL=mongodb://mongo:27017/mediabutler \\\n    -v ${HOME}/docker/mediabutler:/config:rw \\\n    -p 9876:9876 \\\n    mediabutler/server:latest\ndocker start mediabutler\n\n```\n\n## docker-compose \n\n```yaml\n---\nversion: '2'\nnetworks:\n  mb:\n    driver: bridge\nservices:\n    mediabutler-api:\n        container_name: \"mediabutler\"\n        image: mediabutler/server:latest\n        hostname: mediabutler\n        environment:\n            - \"URL=https://example.com/mediabutler/\"\n            - \"DB_URL=mongodb://mongo:27017/mediabutler\"\n            - \"PLEX_URL=http://192.168.1.101:32400/\"\n        volumes:\n            - ${HOME}/docker/mediabutler:/config:rw\n        networks:\n            - mb\n        ports:\n            - 9876:9876\n        links:\n            - mongo\n        depends_on:\n            - mongo\n    mongo:\n        image: mongo:latest\n        container_name: \"mongo\"\n        hostname: mongo\n        environment:\n            - MONGO_DATA_DIR=/data/db\n            - MONGO_LOG_DIR=/dev/null\n            - MONGO_URL=mongodb://mongo:27017/\n        volumes:\n            - ${HOME}/docker/mediabutler/db:/data/db:rw\n        networks:\n            - mb\n        command: mongod --bind_ip_all\n```\n\n# Parameters\n\nContainer images are configured using parameters passed at runtime (such as those above). These parameters are separated by a colon and indicate <external>:<internal> respectively. For example, -p 8080:80 would expose port 80 from inside the container to be accessible from the host's IP on port 8080 outside the container.\n\n - `-p 9876` - The port\n - `-v /config` - Mapping the config files for MediaButler\n - `-e PLEX_URL` - Plex URL. eg: http://192.168.1.101:32400/\n - `-e DB_URL` - MongoDB URL. eg: http://127.0.0.1:27017/mediabutler\n - `-e URL` - Override URL for use with Reverse Proxies\n\n# Setting up the application\n\nSetup of the Application can be found the [MediaButler Wiki](https://github.com/MediaButler/Wiki/wiki)\n\n\n# Info\n\n - Shell access whilst the container is running: `docker exec -it mediabutler /bin/sh`\n - To monitor the logs of the container in realtime: `docker logs -f mediabutler`\n\n",
  "permissions": {
    "read": true,
    "write": false,
    "admin": false
  },
  "media_types": [
    "application/vnd.docker.distribution.manifest.list.v2+json",
    "application/vnd.docker.container.image.v1+json"
  ],
  "content_types": [
    "image"
  ]
}