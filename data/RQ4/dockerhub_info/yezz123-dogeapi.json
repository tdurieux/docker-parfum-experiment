{
  "user": "yezz123",
  "name": "dogeapi",
  "namespace": "yezz123",
  "repository_type": "image",
  "status": 1,
  "status_description": "active",
  "description": "API with high performance built with FastAPI, help to improve connection with your Backend Side.",
  "is_private": false,
  "is_automated": false,
  "can_edit": false,
  "star_count": 0,
  "pull_count": 47,
  "last_updated": "2021-07-17T18:34:59.199327Z",
  "date_registered": "2021-06-02T15:43:45.789372Z",
  "collaborator_count": 0,
  "affiliation": null,
  "hub_user": "yezz123",
  "has_starred": false,
  "full_description": "<p align=\"center\">\n   <img src=\"https://img.shields.io/badge/Dev-Yezz123-green?style\"/>\n   <img src=\"https://img.shields.io/badge/language-python-blue?style\"/>\n   <img src=\"https://img.shields.io/github/stars/yezz123/DogeAPI\"/>\n   <img src=\"https://img.shields.io/github/forks/yezz123/DogeAPI\"/>\n   <img src=\"https://visitor-badge.laobi.icu/badge?page_id=yezz123.Pretty-Readme\">\n   <img src=\"https://img.shields.io/static/v1?label=%F0%9F%8C%9F&message=If%20Useful&style=style=flat&color=BC4E99\" alt=\"Star Badge\"/>\n   <a href=\"https://github.com/yezz123/DogeAPI/actions/workflows/codeql-analysis.yml\"><img src=\"https://github.com/yezz123/DogeAPI/actions/workflows/codeql-analysis.yml/badge.svg?branch=main\"/></a>\n   <a href=\"https://github.com/yezz123/DogeAPI/actions/workflows/docker-publish.yml\"><img src=\"https://github.com/yezz123/DogeAPI/actions/workflows/docker-publish.yml/badge.svg?branch=main\"/></a>\n   <a href=\"https://github.com/yezz123/DogeAPI/actions/workflows/docker-image.yml\"><img src=\"https://github.com/yezz123/DogeAPI/actions/workflows/docker-image.yml/badge.svg?branch=main\"/></a>\n   <a href=\"https://github.com/yezz123/DogeAPI/actions/workflows/ossar-analysis.yml\"><img src=\"https://github.com/yezz123/DogeAPI/actions/workflows/ossar-analysis.yml/badge.svg?branch=main\"/></a>\n\n</p>\n\n# DogeAPI\n\nAPI with high performance built with FastAPI & SQLAlchemy, help to improve connection with your Backend Side to create a simple blog and Cruds with OAuth2PasswordBearer ⛏\n\n## Getting Started\n\n### Prerequisites\n\n- Python 3.8.6 or higher\n- FastAPI\n- Docker\n\n### Project setup\n\n```sh\n# clone the repo\n$ git clone https://github.com/yezz123/DogeAPI\n\n# move to the project folder\n$ cd DogeAPI\n```\n\n### Creating virtual environment\n\n- Install `pipenv` a global python project `pip install pipenv`\n- Create a `virtual environment` for this project\n\n```shell\n# creating pipenv environment for python 3\n$ pipenv --three\n\n# activating the pipenv environment\n$ pipenv shell\n\n# if you have multiple python 3 versions installed then\n$ pipenv install -d --python 3.8\n\n# install all dependencies (include -d for installing dev dependencies)\n$ pipenv install -d\n```\n\n### Running the Application\n\n- To run the [Main](main.py) we need to use [uvicorn](https://www.uvicorn.org/) a lightning-fast ASGI server implementation, using uvloop and httptools.\n\n```sh\n# Running the application using uvicorn\n$ uvicorn main:app\n\n## To run the Application under a reload enviromment use -- reload\n$ uvicorn main:app --reload\n```\n\n### Configured Enviromment\n\n#### Database\n\n- To Provide a good and fast work, i choose a `SQLite` Database using `SQLAlchemy`.\n- If you want to configure the Database with an other Provider like `MySQL` or `PostgreSQL` you can change the `Database_URL` here :\n\n```py\n# here you need to inster the  URI that should be used for the connection.\nSQLALCHEMY_DATABASE_URL = 'sqlite:///blog.db'\n```\n\n- For Example :\n\n```py\nSQLALCHEMY_DATABASE_URL = 'mysql://username:password@server/blog'\n```\n\n#### Models\n\n- Here for the [Models.py](models/models.py), i create 2 tables based on the requirements for this project `blogs` and `users`\n\n```py\nclass Blog(Base):\n    __tablename__ = \"blogs\"\n    id = Column(Integer, primary_key=True, index=True)\n    title = Column(String)\n    body = Column(String)\n    user_id = Column(Integer, ForeignKey(\"users.id\"))\n    creator = relationship(\"User\", back_populates=\"blogs\")\n```\n\n```py\nclass User(Base):\n    __tablename__ = \"users\"\n    id = Column(Integer, primary_key=True, index=True)\n    name = Column(String)\n    email = Column(String)\n    password = Column(String)\n    blogs = relationship(\"Blog\", back_populates=\"creator\")\n```\n\n#### Token\n\n- Set environment variables as the Secret Key and Time Expire for Token, i made it in an easy way to get it.\n- Change the `.env.sample` to `.env` then insert you String `Secret_Key` and `ACCESS_TOKEN_EXPIRE_MINUTES`.\n- you can generate the String using `openssl rand -hex 32`.\n\n## Running the Docker Container\n\n- We have the Dockerfile created in above section. Now, we will use the Dockerfile to create the image of the FastAPI app and then start the FastAPI app container.\n\n```sh\n$ docker build\n```\n\n- list all the docker images and you can also see the image `dogeapi:latest` in the list.\n\n```sh\n$ docker images\n```\n\n- run the application at port 5000. The various options used are:\n\n> - `-p`: publish the container's port to the host port.\n> - `-d`: run the container in the background.\n> - `-i`: run the container in interactive mode.\n> - `-t`: to allocate pseudo-TTY.\n> - `--name`: name of the container\n\n```sh\n$ docker container run -p 5000:5000 -dit --name DOGEAPI dogeapi:latest\n```\n\n- Check the status of the docker container\n\n```sh\n$ docker container ps\n```\n\n## Preconfigured Packages\n\nIncludes preconfigured packages to kick start DogeAPI by just setting appropriate configuration.\n\n| Package                                                      | Usage                                                            |\n| ------------------------------------------------------------ | ---------------------------------------------------------------- |\n| [uvicorn](https://www.uvicorn.org/)        | a lightning-fast ASGI server implementation, using uvloop and httptools.           |\n| [Python-Jose](https://github.com/mpdavis/python-jose) | a JavaScript Object Signing and Encryption implementation in Python.    |\n| [SQLAlchemy](https://www.sqlalchemy.org/)  | is the Python SQL toolkit and Object Relational Mapper that gives application developers the full power and flexibility of SQL. |\n| [starlette](https://www.starlette.io/)   | a lightweight ASGI framework/toolkit, which is ideal for building high performance asyncio services.    |\n| [passlib](https://passlib.readthedocs.io/en/stable/)  | a password hashing library for Python 2 & 3, which provides cross-platform implementations of over 30 password hashing algorithms         |\n| [bcrypt](https://github.com/pyca/bcrypt/)               | Good password hashing for your software and your servers.    |\n| [python-multipart](https://github.com/andrew-d/python-multipart) | streaming multipart parser for Python.   |\n\n`yapf` packages for `linting and formatting`\n\n## Contributing\n\n- Join the DOGEAPI Creator and Contribute to the Project if you have any enhancement or add-ons to create a good and Secure Project, Help any User to Use it in a good and simple way.\n- Check all information here at [docs's Folder](docs) to understand to how to contribute or to Read the Code of Conduct.\n\n## License\n\nThis project is licensed under the terms of the MIT license.\n",
  "permissions": {
    "read": true,
    "write": false,
    "admin": false
  },
  "media_types": [
    "application/vnd.docker.container.image.v1+json"
  ],
  "content_types": [
    "image"
  ]
}