{
  "user": "opentmi",
  "name": "opentmi",
  "namespace": "opentmi",
  "repository_type": "image",
  "status": 1,
  "status_description": "active",
  "description": "Open Source Test Management System",
  "is_private": false,
  "is_automated": false,
  "can_edit": false,
  "star_count": 1,
  "pull_count": 1451,
  "last_updated": "2022-05-07T11:13:21.133502Z",
  "date_registered": "2017-09-12T10:53:41.88744Z",
  "collaborator_count": 0,
  "affiliation": null,
  "hub_user": "opentmi",
  "has_starred": false,
  "full_description": "# OpenTMI\nOpen Source Test Management Infrastructure for IoT and embedded world.\n\n [![Build Status][build-image]][build-url]\n [![Dependencies Status][depupdated-image]][depupdated-url]\n [![devDependencies Status][devdepupdated-image]][devdepupdated-url]\n \n\n\n <!--\n[![Test Coverage][coveralls-image]][coveralls-url]\n-->\n\nOpenTMI is Open Source Test Management System. It is written in [Node.js][Node.js] / \nJavascript and uses [MongoDB][MongoDB] as backing store. It is published in [MIT license](LICENSE.md).\nOpenTMI is extremely customizable through [addons](doc/addons.md).\n\n![logo](doc/images/OpenTMI_logo.png)\n\n# Ideology\n\nBasic idea is to store **all** information related to test execution to database, like software under test (SUT/Build), test logs, test cases (TC), and test related resources, like DUT's. That allows then much more intelligent and more efficient way to manage testing. Also it gives very valuable information when users can directly see what is tested in individual Device with individual Build. All information is linked together and can be analyzed very deeply.\n\n## Challenges with software testing in IoT hardware\n* how to identify when test failed because of unstable HW\n* how to identify unique unstable HW in test lab\n* how to identify if certain test causes that HW's become unstable/unusable\n* how to estimate when HW start to be unstable/unusable (e.g. memory start burning out)\n* how to direct testing to right HW when there is multiple HW configurations\n* how to identify if tools deployment (e.g. new test framework revision) causes more test failures\n* how to optimize test execution time\n* how to manage all of these automatically\n\nOpenTMI try to solve these kind of challenges using \"big-data\".\n\n# Pre-requirements\n\n* [Node.js][Node.js] v12.13< (tested with 10 and 12, recommended to use latest LTS version)\n* [mongodb][MongoDB] v3.6< (tested with 4.1.2, recommented to use latest version)\n\n# Installation\n\n## From Dockers\n\n```\ndocker pull opentmi/opentmi:latest mongo:latest\ndocker run -v \"$(pwd)\":/data --name mongo -d mongo mongod --smallfiles\ndocker run --name opentmi -p 3000:3000 --link mongo:mongo -d opentmi/opentmi\n```\n\nSee [here](doc/docker.md) for more instructions.\n\n## Clone, install dependencies and start\n\n### Prepare\n\nYou need to install [mongodb][MongoDB] and run it. File `mongod.sh` contains simple script to start single\nmongod instance (db location ./db and logs ./db.logs) - that is not recommended for production usage.\n\n```\n> git clone --recursive https://github.com/OpenTMI/opentmi\n> cd opentmi\n> npm install\n> npm start\n\nor start without clustered mode\n\n> node app\n```\n\n**Note:** Installation install also all addons dependencies so you doesn't need to worry about it.\n\n# Command line\n\n```\n$ npm start -- -h\nUsage: npm start -- (options)\n\nOptions:\n  --listen, -l            set binding interface                         [string]\n  --https                 use https\n  --port                  set listen port\n  --verbose, -v           verbose level                                  [count]\n  --silent, -s            Silent mode\n  --log                   log path. Use \"null\" or \"/dev/null\" to supress file\n                          logging                                       [string]\n  --autoInstallAddonDeps  automatically install dependencies when startup server\n                                                                 [default: true]\n  --config, -c            config file          [string] [default: \"config.json\"]\n  --db                    mongodb connection string                     [string]\n  --auto-reload, -r       Automatically restart workers when changes detected in\n                          server directory\n```\n\n**db:**\n* `inmemory` as connection string uses in-memory mongodb server - for testing purpose.\n\n**https:**\nGenerate self-signed ssl certifications:\n* `./scripts/gencerts.sh`\n* start daemon with `--https` -options (`npm start -- -https`)\n\n**NOTE:** Not recommended to use self-signed certificates in production usage!\n\n## Clustered mode\n\nOpenTMI support [clustered mode](doc/cluster.md) which gives some benefits in production environment:\n* better performance\n* zero downtime when updating\n* auto restart on failure\n* serve more clients\n* better performance\n\n**NOTE** same can be achieved using load-balancer and systemd service for example.\nIn such case you doesn't need to use cluster mode.\n\n## API documentation\nAvailable [here](doc/APIs)\n\n## Configuration\n\nBy default opentmi is started as development mode. You can configure environment using [`--config <file>`](`config.example.json`) -option.\n\n**note**:\n* `\"mongo\"` options overwrites defaults and is pypassed to [MongoClient](http://mongodb.github.io/node-mongodb-native/3.0/api/MongoClient.html).\n* `\"smtp\"` options is pypassed to [nodemailer](https://nodemailer.com/smtp/) transport configurations. To activate smpt use `enabled` property.\n\n# Architecture\n\n* **Backend** (this repository)\n    which provide [RESTFull json and websockets (through socketIO) -API](doc/APIs), internal [load balancer](doc/cluster.md) and auto restart on failure etc....\n* **Frontends**\n  * [default web GUI as addon](https://github.com/opentmi/opentmi-default-gui)\n  * [admin gui as addon](https://github.com/opentmi/opentmi-adminui)\n* **Client libraries/tools**\n  * [opentmi-pyclient](https://github.com/opentmi/opentmi-pyclient)\n  * [opentmi-jsclient](https://github.com/opentmi/opentmi-jsclient) for nodejs / browser\n  * [opentmi-cli](https://github.com/opentmi/opentmi-cli)\n\n### Addons\nWay to extend backend-service functionality. Addon registry (future plan) contains information\nabout existing addons, which can easily to install via administrator API.\nMore documentation can be found from [here](doc/addons.md)\n\n### Test\n\n`npm test`\n\n### Contribution guidelines\n\n* Writing tests\n* Code review\n* Other guidelines\n\nSee [code-of-conduct](CODE_OF_CONDUCT.md)\n\n### Production usage\n\nPropose to use some service management tool which can restart service if it for some reason crashes.\n\nYou can use for example:\n* [supervisor](https://github.com/petruisfan/node-supervisor)\n\n    `supervisor -wa . -n exit server.js`\n\n* [pm2](https://github.com/Unitech/pm2)\n\n    `pm2 start --name opentmi index.js -- -vvv`\n\n* linux [systemd](https://www.freedesktop.org/wiki/Software/systemd/)\n\n    see [example](scripts/opentmi.service) service script\n\n **Note:** if your service management is storing `stdout` and `stderr` to log\n files - be sure that it is rotated properly to ensure that disk space doesn't\n cause trouble. By default OpenTMI store logs under `log/` -folder, configured as\n daily rotate.\n\n### Who do I talk to?\n\n* Repo owner or admin\n* Other community or team contact\n\n## License\n\n  [MIT](LICENSE.md)\n\n<!-- references -->\n[Node.js]: https://nodejs.com\n[MongoDB]: https://mongodb.com\n\n[build-image]: https://circleci.com/gh/OpenTMI/opentmi.svg?style=svg\n[build-url]: https://circleci.com/gh/OpenTMI/opentmi\n[coveralls-image]: https://coveralls.io/repos/OpenTMI/opentmi/badge.svg?branch=master&service=github\n[coveralls-url]: https://coveralls.io/github/OpenTMI/opentmi?branch=master\n\n[depupdated-image]: https://david-dm.org/opentmi/opentmi.svg\n[depupdated-url]: https://david-dm.org/opentmi/opentmi\n[devdepupdated-image]: https://david-dm.org/opentmi/opentmi/dev-status.svg\n[devdepupdated-url]: https://david-dm.org/opentmi/opentmi?type=dev\n",
  "permissions": {
    "read": true,
    "write": false,
    "admin": false
  },
  "media_types": [
    "application/vnd.docker.container.image.v1+json"
  ],
  "content_types": [
    "image"
  ]
}