{
  "user": "spotify",
  "name": "heroic",
  "namespace": "spotify",
  "repository_type": "image",
  "status": 1,
  "status_description": "active",
  "description": "The Heroic Time Series Database\nhttps://spotify.github.io/heroic/",
  "is_private": false,
  "is_automated": true,
  "can_edit": false,
  "star_count": 3,
  "pull_count": 2954,
  "last_updated": "2021-03-26T20:13:35.165235Z",
  "date_registered": "2018-10-18T16:53:42.534422Z",
  "collaborator_count": 0,
  "affiliation": null,
  "hub_user": "spotify",
  "has_starred": false,
  "full_description": "# DEPRECATION NOTICE\n\n**This repo is no longer actively maintained. While it should continue to work and there are no major known bugs, we will not be improving Heroic or releasing new versions.**\n\n# [![Heroic](/logo.42.png?raw=true \"The Heroic Time Series Database\")](/assets/logo_on_light.svg) Heroic\n\n[![Build Status](https://circleci.com/gh/spotify/heroic.svg?style=svg)](https://circleci.com/gh/spotify/heroic)\n[![Codecov](https://img.shields.io/codecov/c/github/spotify/heroic.svg)](https://codecov.io/gh/spotify/heroic)\n[![License](https://img.shields.io/github/license/spotify/heroic.svg)](LICENSE)\n\nA scalable time series database based on Bigtable, Cassandra, and Elasticsearch.\nGo to https://spotify.github.io/heroic/ for documentation.\n\nThis project adheres to the [Open Code of Conduct](https://github.com/spotify/code-of-conduct/blob/master/code-of-conduct.md).\nBy participating, you are expected to honor this code.\n\n## Install\n\n### Docker\n\nDocker images are available on [Docker Hub](https://hub.docker.com/r/spotify/heroic).\n\n    $ docker run -p 8080:8080 -p 9091:9091 spotify/heroic\n\nHeroic will now be reachable at http://localhost:8080/status.\n\nIn production it's advised to use a tagged version.\n\n\n## Configuration\nFor help on how to write a configuration file, see the [Configuration Section][configuration] of the official documentation.\n\n[configuration]: http://spotify.github.io/heroic/#!/docs/config\n\nHeroic has been tested with the following services:\n\n* Cassandra (`2.1.x`, `3.5`) when using [metric/datastax](/metric/datastax).\n* [Cloud Bigtable](https://cloud.google.com/bigtable/docs/) when using\n  [metric/bigtable](/metric/bigtable).\n* Elasticsearch (`7.x`) when using\n  [metadata/elasticsearch](/metadata/elasticsearch) or\n  [suggest/elasticsearch](/suggest/elasticsearch).\n* Kafka (`0.8.x`) when using [consumer/kafka](/consumer/kafka).\n\n\n## Developing\n\n### Building from source\n\nIn order to compile Heroic, you'll need:\n\n- A Java 11 JDK\n- Maven 3\n- Gradle\n\nThe project is built using Gradle:\n\n```bash\n# full build, runs all tests and builds the shaded jar\n./gradlew build\n\n# only compile\n./gradlew assemble\n\n# build a single module\n./gradlew heroic-metric-bigtable:build\n```\n\nThe `heroic-dist` module can be used to produce a shaded jar that contains all required dependencies:\n\n```\n./gradlew heroic-dist:shadowJar\n```\n\nAfter building, the entry point of the service is\n[`com.spotify.heroic.HeroicService`](/heroic-dist/src/main/java/com/spotify/heroic/HeroicService.java).\nThe following is an example of how this can be run:\n\n```\n./gradlew heroic-dist:runShadow <config>\n```\n\nwhich is the equivalent of doing:\n\n```\njava -jar $PWD/heroic-dist/build/libs/heroic-dist-0.0.1-SNAPSHOT-shaded.jar <config>\n```\n\n\n### Building with Docker\n\n```\n$ docker build -t heroic:latest .\n```\n\nThis is a multi-stage build and will first build Heroic via a `./gradlew clean build` and then copy the resulting shaded jar into the runtime container.\n\nRunning heroic via docker can be done:\n\n```\n$ docker run -d -p 8080:8080 -p 9091:9091 -v /path/to/config.yml:/heroic.yml spotify/heroic:latest\n```\n\n\n### Logging\n\nLogging is captured using [SLF4J](http://www.slf4j.org/), and forwarded to\n[Log4j](http://logging.apache.org/log4j/).\n\nTo configure logging, define the `-Dlog4j.configurationFile=<path>`\nparameter. You can use [docs/log4j2-file.xml](/docs/log4j2-file.xml) as a base.\n\n### Testing\n\nWe run tests with Gradle:\n\n```\n# run unit tests\n./gradlew test\n\n# run integration tests\n./gradlew integrationTest\n```\n\nor to run a more comprehensive set of checks:\n\n```\n./gradlew check\n```\n\nThis will run:\n\n* unit tests\n* integration tests\n* [Checkstyle](http://checkstyle.sourceforge.net/)\n* [Coverage Reporting with Jacoco](http://eclemma.org/jacoco/)\n\nIt is strongly recommended that you run the full test suite before setting up a\npull request, otherwise it will be rejected by Travis.\n\n#### Full Cluster Tests\n\nFull cluster tests are defined in [heroic-dist/src/test/java](/heroic-dist/src/test/java).\n\nThis way, they have access to all the modules and parts of Heroic.\n\nThe [JVM RPC](/rpc/jvm) module is specifically designed to allow for rapid\nexecution of integration tests. It allows multiple cores to be defined and\ncommunicate with each other in the same JVM instance.\n\n* See [AbstractClusterQueryIT](/heroic-dist/src/test/java/com/spotify/heroic/AbstractClusterQueryIT.java)\n* JVM-based [JvmClusterQueryIT](/heroic-dist/src/test/java/com/spotify/heroic/JvmClusterQueryIT.java)\n* gRPC-based [GrpcClusterQueryIT](/heroic-dist/src/test/java/com/spotify/heroic/GrpcClusterQueryIT.java)\n\n\n### Code Coverage\n\n[![Coverage](https://codecov.io/gh/spotify/heroic/branch/master/graphs/icicle.svg)](https://codecov.io/gh/spotify/heroic/branch/master)\n\nThere's an ongoing project to improve test coverage.\nClicking the above graph will bring you to [codecov.io](https://codecov.io/gh/spotify/heroic/branches/master), where you can find areas to focus on.\n\n#### Bypassing Validation\n\nTo bypass automatic formatting and checkstyle validation you can use the\nfollowing stanza:\n\n```java\n// @formatter:off\nfinal List<String> list = ImmutableList.of(\n   \"Welcome to...\",\n   \"... The Wild West\"\n);\n// @formatter:on\n```\n\nTo bypass a FindBugs error, you should use the `@SupressFBWarnings` annotation.\n\n```java\n@SupressFBWarnings(value=\"FINDBUGS_ERROR_CODE\", justification=\"I Know Better Than FindBugs\")\npublic class IKnowBetterThanFindbugs() {\n    // ...\n}\n```\n\n### Module Orientation\n\nThe Heroic project is split into a couple of modules.\n\nThe most critical one is [`heroic-component`](heroic-component). It contains\ninterfaces, value objects, and the basic set of dependencies necessary to glue\ndifferent components together.\n\nSubmodules include [`metric`](metric), [`suggest`](suggest),\n[`metadata`](metadata), and [`aggregation`](aggregation). The first three\ncontain various implementations of the given backend type, while the latter\nprovides aggregation methods.\n\n[`heroic-core`](heroic-core) contains the\n[`com.spotify.heroic.HeroicCore`](heroic-core/src/main/java/com/spotify/heroic/HeroicCore.java)\nclass which is the central building block for setting up a Heroic instance.\n\n[`heroic-elasticsearch-utils`](heroic-elasticsearch-utils) is a collection of\nutilities for interacting with Elasticsearch. This is separate since we have\nmore than one backend that needs to talk with elasticsearch.\n\nFinally there is [`heroic-dist`](heroic-dist), a small project that depends on all module. Here is where everything is bound together into a distribution\n&mdash; a shaded jar. It also provides the entry-point for services, namely\n[`com.spotify.heroic.HeroicService`](heroic-dist/src/main/java/com/spotify/heroic/HeroicService.java)\nor through an interactive shell [`com.spotify.heroic.HeroicShell`](heroic-shell/src/main/java/com/spotify/heroic/HeroicShell.java).\nThe shell can either be run standalone or connected to an existing Heroic instance for administration.\n\n## Contributing\n\nGuidelines for contributing can be found [here](https://github.com/spotify/heroic/blob/master/CONTRIBUTING.md).\n",
  "permissions": {
    "read": true,
    "write": false,
    "admin": false
  },
  "media_types": [
    "application/vnd.docker.container.image.v1+json"
  ],
  "content_types": [
    "image"
  ]
}