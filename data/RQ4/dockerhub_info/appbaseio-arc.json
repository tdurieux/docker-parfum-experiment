{
  "user": "appbaseio",
  "name": "arc",
  "namespace": "appbaseio",
  "repository_type": "image",
  "status": 1,
  "status_description": "active",
  "description": "Appbase.io's API gateway for a supercharged Elasticsearch experience.",
  "is_private": false,
  "is_automated": false,
  "can_edit": false,
  "star_count": 0,
  "pull_count": 3655,
  "last_updated": "2021-08-13T05:31:23.591027Z",
  "date_registered": "2019-08-11T10:30:33.953922Z",
  "collaborator_count": 0,
  "affiliation": null,
  "hub_user": "appbaseio",
  "has_starred": false,
  "full_description": "# ReactiveSearch üçû and appbase.io üßà\n\nThis is an extended (and proprietary) version that extends ReactiveSearch API with following plugins:\n\n1. **Actionable Analytics** capture telemetry from the ReactiveSearch API and provide powerful search-driven insights into users, clicks, conversions, geographical distribution, slow searches and more.\n2. **Search Relevance** provides a REST API and point-and-click interface to deploy a search relevance strategy by being able to configure language, Search/Aggregation/Results settings, Query Rules.\n3. **Application Cache** provides a blazing fast search performance and improved thorughput for search.\n4. **UI Builder** allows creating Search and Recommendations UI widgets with no code.\n\nA user can deploy [appbase.io in cloud](https://www.appbase.io/), or use one-click installs for AWS, Heroku, Docker and Kubernetes. Get started with them over [here](https://docs.appbase.io/docs/hosting/byoc/#quickstart-recipes).\n\n\n# Running ReactiveSearch API locally\n\nIn order to run ReactiveSearch API, you'll require an Elasticsearch node. There are multiple ways you can [setup an Elasticsearch](https://www.elastic.co/guide/en/elasticsearch/reference/current/setup.html), either locally or remotely. We, however, are delineating the steps for local setup of a single node Elasticsearch via it's Docker image.\n\n**Note**: The steps described here assumes a [docker](https://docs.docker.com/install/) installation on the system.\n\n1. Create a docker network\n\n        docker network create reactivesearch\n\n2. Start a single node Elasticsearch cluster locally\n\n        docker run -d --rm --name elasticsearch -p 9200:9200 -p 9300:9300 --net=reactivesearch -e \"discovery.type=single-node\" docker.elastic.co/elasticsearch/elasticsearch-oss:7.10.2\n\n3. Start ReactiveSearch locally\n\n        docker build -t reactivesearch . && docker run --rm --name reactivesearch -p 8000:8000 --net=reactivesearch reactivesearch\n\nFor convenience, the steps described above are combined into a single `docker-compose` file. You can execute the file with command:\n\n    docker-compose up\n\n# Building ReactiveSearch\n\nTo build from source you need [Git](https://git-scm.com/downloads) and [Go](https://golang.org/doc/install) (version 1.11 or higher).\n\nYou can build the binary locally by executing the following command from the project directory:\n\n    make\n\nThis produces an executable & plugin libraries in the root project directory. To start the ReactiveSearch server, run:\n\n```bash\n./build/reactivesearch --log=info --env=config/manual.env\n```\n\nAlternatively, you could execute the following commands to start the server without producing an executable, (but still produce the plugin libraries):\n\n```bash\nmake plugins\ngo run github.com/appbaseio/reactivesearch-api --log=info --env=config/manual.env\n```\n**Note**: Running the executable assumes an active Elasticsearch connection whose url is to be provided in the `.env` file. manual.env configures it to be the localhost.\n\n### Logging\nDefine the run time flag (`log`) to change the default log mode, the possible options are:\n\n#### debug\nMost verbose, use this to get logs for elasticsearch interactions.\n#### info\nPrints the basic information\n#### error (default)\nOnly log the errors",
  "permissions": {
    "read": true,
    "write": false,
    "admin": false
  },
  "media_types": [
    "application/vnd.docker.container.image.v1+json"
  ],
  "content_types": [
    "image"
  ]
}