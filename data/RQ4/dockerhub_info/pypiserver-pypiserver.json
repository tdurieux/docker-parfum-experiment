{
  "user": "pypiserver",
  "name": "pypiserver",
  "namespace": "pypiserver",
  "repository_type": "image",
  "status": 1,
  "status_description": "active",
  "description": "Minimal PyPI server for uploading & downloading packages with pip/easy_install ",
  "is_private": false,
  "is_automated": true,
  "can_edit": false,
  "star_count": 50,
  "pull_count": 24269369,
  "last_updated": "2022-11-02T11:48:58.473242Z",
  "date_registered": "2018-06-27T01:14:40.242379Z",
  "collaborator_count": 0,
  "affiliation": null,
  "hub_user": "pypiserver",
  "has_starred": false,
  "full_description": ".. -*- mode: rst; coding: utf-8 -*-\n\n.. image:: pypiserver_logo.png\n   :width: 300 px\n   :align: center\n\n==============================================================================\npypiserver - minimal PyPI server for use with pip/easy_install\n==============================================================================\n|pypi-ver| |test-status| |dependencies| |python-ver| |proj-license|\n\n:Version:     2.0.0dev1\n:Date:        2020-10-10\n:Source:      https://github.com/pypiserver/pypiserver\n:PyPI:        https://pypi.org/project/pypiserver/\n:Tests:       https://github.com/pypiserver/pypiserver/actions\n:Maintainers: Kostis Anagnostopoulos <ankostis@gmail.com>,\n              Matthew Planchard <mplanchard@gmail.com>\n:License:     zlib/libpng + MIT\n:Community:   https://pypiserver.zulipchat.com\n\nChat with us on `Zulip <https://pypiserver.zulipchat.com>`_!\n\n``pypiserver`` is a minimal PyPI_ compatible server for ``pip`` or ``easy_install``.\nIt is based on bottle_ and serves packages from regular directories.\nWheels, bdists, eggs and accompanying PGP-signatures can be uploaded\neither with ``pip``, ``setuptools``, ``twine``, ``pypi-uploader``, or simply copied\nwith ``scp``.\n\n.. note::\n   The official software powering PyPI_ is Warehouse_. However, Warehouse_\n   is fairly specialized to be ``pypi.org``'s own software, and should not\n   be used in other contexts. In particular, it does not officially support\n   being used as a custom package index by users wishing to serve their own\n   packages.\n\n   ``pypiserver`` implements the same interfaces as `PyPI`_, allowing\n   standard Python packaging tooling such as ``pip`` and ``twine`` to\n   interact with it as a package index just as they would with PyPI_, while\n   making it much easier to get a running index server.\n\n.. contents:: Table of Contents\n  :backlinks: top\n\n\nQuickstart: Installation and Usage\n==================================\n\n``pypiserver`` works with Python 3.6+ and PyPy3.\n\nOlder Python versions may still work, but they are not tested.\n\nFor legacy Python versions, use ``pypiserver-1.x`` series. Note that these are\nnot officially supported, and will not receive bugfixes or new features.\n\n.. Tip::\n   The commands below work on a unix-like operating system with a posix shell.\n   The ``'~'`` character expands to user's home directory.\n\n   If you're using Windows, you'll have to use their \"Windows counterparts\".\n   The same is true for the rest of this documentation.\n\n1. Install ``pypiserver`` with this command::\n\n    pip install pypiserver                # Or: pypiserver[passlib,watchdog]\n    mkdir ~/packages                      # Copy packages into this directory.\n\n   See also `Alternative Installation methods`_.\n\n2. Copy some packages into your ``~/packages`` folder and then\n   get your ``pypiserver`` up and running::\n\n    pypi-server -p 8080 ~/packages &      # Will listen to all IPs.\n\n3. From the client computer, type this::\n\n    # Download and install hosted packages.\n    pip install --extra-index-url http://localhost:8080/simple/ ...\n\n    # or\n    pip install --extra-index-url http://localhost:8080 ...\n\n    # Search hosted packages.\n    pip search --index http://localhost:8080 ...\n\n    # Note that pip search does not currently work with the /simple/ endpoint.\n\n   See also `Client-side configurations`_ for avoiding tedious typing.\n\n4. Enter ``pypi-server -h`` in the cmd-line to print a detailed usage message::\n\n    pypi-server [OPTIONS] [PACKAGES_DIRECTORY...]\n      start PyPI compatible package server serving packages from\n      PACKAGES_DIRECTORY. If PACKAGES_DIRECTORY is not given on the\n      command line, it uses the default ~/packages. pypiserver scans this\n      directory recursively for packages. It skips packages and\n      directories starting with a dot. Multiple package directories can be\n      specified.\n\n    pypi-server understands the following options:\n\n      -p, --port PORT\n        Listen on port PORT (default: 8080).\n\n      -i, --interface INTERFACE\n        Listen on interface INTERFACE (default: 0.0.0.0, any interface).\n\n      -a, --authenticate (update|download|list), ...\n        Comma-separated list of (case-insensitive) actions to authenticate.\n        Requires to have set the password (-P option).\n        To password-protect package downloads (in addition to uploads) while\n        leaving listings public, use:\n          -P foo/htpasswd.txt -a update,download\n        To allow unauthorized access, use:\n          -P . -a .\n        Note that when uploads are not protected, the `register` command\n        is not necessary, but `~/.pypirc` still need username and password fields,\n        even if bogus.\n        By default, only 'update' is password-protected.\n\n      -P, --passwords PASSWORD_FILE\n        Use apache htpasswd file PASSWORD_FILE to set usernames & passwords when\n        authenticating certain actions (see -a option).\n        To allow unauthorized access, use:\n          -P . -a .\n\n      --disable-fallback\n        Disable redirect to real PyPI index for packages not found in the\n        local index.\n\n      --fallback-url FALLBACK_URL\n        For packages not found in the local index, this URL will be used to\n        redirect to (default: https://pypi.org/simple/).\n\n      --server METHOD\n        Use METHOD to run the server. Valid values include paste,\n        cherrypy, twisted, gunicorn, gevent, wsgiref, auto. The\n        default is to use \"auto\" which chooses one of paste, cherrypy,\n        twisted or wsgiref.\n\n      -r, --root PACKAGES_DIRECTORY\n        [deprecated] Serve packages from PACKAGES_DIRECTORY.\n\n      -o, --overwrite\n        Allow overwriting existing package files.\n\n      --hash-algo ALGO\n        Any `hashlib` available algo used as fragments on package links.\n        Set one of (0, no, off, false) to disabled it (default: md5).\n\n      --welcome HTML_FILE\n        Uses the ASCII contents of HTML_FILE as welcome message response.\n\n      -v\n        Enable verbose logging; repeat for more verbosity.\n\n      --log-conf <FILE>\n        Read logging configuration from FILE.\n        By default, configuration is read from `log.conf` if found in server's dir.\n\n      --log-file <FILE>\n        Write logging info into this FILE.\n\n      --log-frmt <FILE>\n        The logging format-string (see `logging.LogRecord` class from standard python library).\n        [Default: %(asctime)s|%(name)s|%(levelname)s|%(thread)d|%(message)s]\n\n      --log-req-frmt FORMAT\n        A format-string selecting Http-Request properties to log; set to '%s' to see them all.\n        [Default: %(bottle.request)s]\n\n      --log-res-frmt FORMAT\n        A format-string selecting Http-Response properties to log; set to  '%s' to see them all.\n        [Default: %(status)s]\n\n      --log-err-frmt FORMAT\n        A format-string selecting Http-Error properties to log; set to  '%s' to see them all.\n        [Default: %(body)s: %(exception)s \\n%(traceback)s]\n\n      --cache-control AGE\n        Add \"Cache-Control: max-age=AGE, public\" header to package downloads.\n        Pip 6+ needs this for caching.\n\n    pypi-server -h, --help\n      Show this help message.\n\n    pypi-server --version\n      Show pypi-server's version.\n\n    pypi-server -U [OPTIONS] [PACKAGES_DIRECTORY...]\n      Update packages in PACKAGES_DIRECTORY. This command searches\n      pypi.org for updates and shows a pip command line which\n      updates the package.\n\n    The following additional options can be specified with -U:\n\n      -x\n        Execute the pip commands instead of only showing them.\n\n      -d DOWNLOAD_DIRECTORY\n        Download package updates to this directory. The default is to use\n        the directory which contains the latest version of the package to\n        be updated.\n\n      -u\n        Allow updating to unstable version (alpha, beta, rc, dev versions).\n\n    Visit https://github.com/pypiserver/pypiserver for more information.\n\n\nClient-Side Configurations\n==========================\n\nAlways specifying the the pypi url on the command line is a bit\ncumbersome. Since ``pypiserver`` redirects ``pip/easy_install`` to the\n``pypi.org`` index if it doesn't have a requested package, it is a\ngood idea to configure them to always use your local pypi index.\n\nConfiguring ``pip``\n-------------------\n\nFor ``pip`` command this can be done by setting the environment variable\n``PIP_EXTRA_INDEX_URL`` in your ``.bashr/.profile/.zshrc``::\n\n  export PIP_EXTRA_INDEX_URL=http://localhost:8080/simple/\n\nor by adding the following lines to ``~/.pip/pip.conf``::\n\n  [global]\n  extra-index-url = http://localhost:8080/simple/\n\n.. Note::\n   If you have installed ``pypiserver`` on a remote url without *https*\n   you wil receive an \"untrusted\" warning from *pip*, urging you to append\n   the ``--trusted-host`` option.  You can also include this option permanently\n   in your configuration-files or environment variables.\n\nConfiguring ``easy_install``\n----------------------------\n\nFor ``easy_install`` command you may set the following configuration in\n``~/.pydistutils.cfg``::\n\n  [easy_install]\n  index_url = http://localhost:8080/simple/\n\n\nUploading Packages Remotely\n===========================\n\nInstead of copying packages directly to the server's folder (i.e. with ``scp``),\nyou may use python tools for the task, e.g. ``python setup.py upload``.\nIn that case, ``pypiserver`` is responsible for authenticating the upload-requests.\n\n.. Note::\n  We strongly advise to password-protected your uploads!\n\n  It is possible to disable authentication for uploads (e.g. in intranets).\n  To avoid lazy security decisions, read help for ``-P`` and ``-a`` options.\n\n*Apache*-Like Authentication (``htpasswd``)\n-------------------------------------------\n\n#. First make sure you have the *passlib* module installed (note that\n   ``passlib>=1.6`` is required), which is needed for parsing the Apache\n   *htpasswd* file specified by the ``-P``, ``--passwords`` option\n   (see next steps)::\n\n     pip install passlib\n\n#. Create the Apache *htpasswd* file with at least one user/password pair\n   with this command (you'll be prompted for a password)::\n\n     htpasswd -sc htpasswd.txt <some_username>\n\n   .. Tip:: Read this SO question for running `htpasswd` cmd\n      under *Windows*:\n\n         http://serverfault.com/questions/152950/how-to-create-and-edit-htaccess-and-htpasswd-locally-on-my-computer-and-then-u\n\n      or if you have bogus passwords that you don't care because they are for\n      an internal service (which is still \"bad\", from a security prespective...)\n      you may use this public service:\n\n         http://www.htaccesstools.com/htpasswd-generator/\n\n   .. Tip:: When accessing pypiserver via the api, alternate authentication\n      methods are available via the ``auther`` config flag. Any callable\n      returning a boolean can be passed through to the pypiserver config in\n      order to provide custom authentication. For example, to configure\n      pypiserver to authenticate using the `python-pam`_::\n\n        import pam\n        pypiserver.default_config(auther=pam.authenticate)\n\n      Please see `Using Ad-hoc authentication providers`_ for more information.\n\n#. You  need to restart the server with the ``-P`` option only once\n   (but user/password pairs can later be added or updated on the fly)::\n\n     ./pypi-server -p 8080 -P htpasswd.txt ~/packages &\n\nUpload with ``setuptools``\n--------------------------\n\n#. On client-side, edit or create a ``~/.pypirc`` file with a similar content::\n\n     [distutils]\n     index-servers =\n       pypi\n       local\n\n     [pypi]\n     username:<your_pypi_username>\n     password:<your_pypi_passwd>\n\n     [local]\n     repository: http://localhost:8080\n     username: <some_username>\n     password: <some_passwd>\n\n#. Then from within the directory of the python-project you wish to upload,\n   issue this command::\n\n     python setup.py sdist upload -r local\n\nUpload with ``twine``\n---------------------\n\nTo avoid storing you passwords on disk, in clear text, you may either:\n\n- use the ``register`` *setuptools*'s command with the ``-r`` option,\n  like that::\n\n     python setup.py sdist register -r local upload -r local\n\n- use `twine`_ library, which\n  breaks the procedure in two steps.  In addition, it supports signing\n  your files with PGP-Signatures and uploading the generated `.asc` files\n  to ``pypiserver``::\n\n     twine upload -r local --sign -identity user_name ./foo-1.zip\n\n\nUsing the Docker Image\n======================\n\nStarting with version 1.2.5, official Docker images will be built for each\npush to master, each dev, alpha, or beta release, and each final release.\nThe most recent full release will always be available under the tag ``latest``,\nand the current master branch will always be available under the tag\n``unstable``.\n\nYou can always check to see what tags are currently available at our\n`Docker Repo`_.\n\nTo run the most recent release of ``pypiserver`` with Docker, simply::\n\n    docker run pypiserver/pypiserver:latest\n\nThis starts ``pypiserver`` serving packages from the ``/data/packages``\ndirectory inside the container, listening on the container port 8080.\n\nThe container takes all the same arguments as the normal ``pypi-server``\nexecutable, with the exception of the internal container port (``-p``),\nwhich will always be 8080.\n\nOf course, just running a container isn't that interesting. To map\nport 80 on the host to port 8080 on the container::\n\n    docker run -p 80:8080 pypiserver/pypiserver:latest\n\nYou can now access your ``pypiserver`` at ``localhost:80`` in a web browser.\n\nTo serve packages from a directory on the host, e.g. ``~/packages``::\n\n    docker run -p 80:8080 -v ~/packages:/data/packages pypiserver/pypiserver:latest\n\nTo authenticate against a local ``.htpasswd`` file::\n\n    docker run -p 80:8080 -v ~/.htpasswd:/data/.htpasswd pypiserver/pypiserver:latest -P .htpasswd packages\n\nYou can also specify ``pypiserver`` to run as a Docker service using a\ncomposefile. An example composefile is `provided <docker-compose.yml>`_.\n\n\n.. _`docker repo`: https://hub.docker.com/r/pypiserver/pypiserver/tags/\n\n\nAlternative Installation Methods\n================================\n\nWhen trying the methods below, first use the following command to check whether\nprevious versions of ``pypiserver`` already exist, and (optionally) uninstall them::\n\n  # VERSION-CHECK: Fails if not installed.\n  pypi-server --version\n\n  # UNINSTALL: Invoke again untill it fails.\n  pip uninstall pypiserver\n\nInstalling the Very Latest Version\n----------------------------------\n\nIn case the latest version in *pypi* is a pre-release, you have to use\n*pip*'s `--pre` option.  And to update an existing installation combine it\nwith `--ignore-installed`::\n\n  pip install pypiserver --pre -I\n\nYou can even install the latest ``pypiserver`` directly from *github* with the\nfollowing command, assuming you have *git* installed on your ``PATH``::\n\n  pip install git+git://github.com/pypiserver/pypiserver.git\n\nRunning on Heroku/Dotcloud\n--------------------------\n\nhttps://github.com/dexterous/pypiserver-on-the-cloud contains\ninstructions on how to run ``pypiserver`` on one of the supported cloud\nservice providers.\n\n\nRecipes\n=======\n\nManaging the Package Directory\n------------------------------\n\nThe ``pypi-server`` command has the ``-U`` option that searches for updates of\navailable packages. It scans the package directory for available\npackages and searches on pypi.org for updates. Without further\noptions ``pypi-server -U`` will just print a list of commands which must\nbe run in order to get the latest version of each package. Output\nlooks like::\n\n    $ ./pypi-server -U\n    checking 106 packages for newer version\n\n    .........u.e...........e..u.............\n    .....e..............................e...\n    ..........................\n\n    no releases found on pypi for PyXML, Pymacs, mercurial, setuptools\n\n    # update raven from 1.4.3 to 1.4.4\n    pip -q install --no-deps  --extra-index-url https://pypi.org/simple/ -d /home/ralf/packages/mirror raven==1.4.4\n\n    # update greenlet from 0.3.3 to 0.3.4\n    pip -q install --no-deps  --extra-index-url https://pypi.org/simple/ -d /home/ralf/packages/mirror greenlet==0.3.4\n\nIt first prints for each package a single character after checking the\navailable versions on pypi. A dot(`.`) means the package is up-to-date, ``'u'``\nmeans the package can be updated and ``'e'`` means the list of releases on\npypi is empty. After that it shows a *pip* command line which can be used\nto update a one package. Either copy and paste that or run\n``pypi-server -Ux`` in order to really execute those commands. You need\nto have *pip* installed for that to work however.\n\nSpecifying an additional ``-u`` option will also allow alpha, beta and\nrelease candidates to be downloaded. Without this option these\nreleases won't be considered.\n\nServing Thousands of Packages\n-----------------------------\n\nBy default, ``pypiserver`` scans the entire packages directory each time an\nincoming HTTP request occurs. This isn't a problem for a small number of\npackages, but causes noticeable slow-downs when serving thousands of packages.\n\nIf you run into this problem, significant speedups can be gained by enabling\npypiserver's directory caching functionality. The only requirement is to\ninstall the ``watchdog`` package, or it can be installed during ``pypiserver``\ninstallation, by specifying the ``cache`` extras option::\n\n    pip install pypiserver[cache]\n\nAdditional speedups can be obtained by using your webserver's builtin\ncaching functionality. For example, if you are using `nginx` as a\nreverse-proxy as described below in `Behind a reverse proxy`_, you can\neasily enable caching. For example, to allow nginx to cache up to\n10 gigabytes of data for up to 1 hour::\n\n    proxy_cache_path /data/nginx/cache\n                     levels=1:2\n                     keys_zone=pypiserver_cache:10m\n                     max_size=10g\n                     inactive=60m\n                     use_temp_path=off;\n\n    server {\n        # ...\n        location / {\n            proxy_cache pypiserver_cache;\n            proxy_pass http://localhost:8080;\n        }\n    }\n\nUsing webserver caching is especially helpful if you have high request\nvolume. Using `nginx` caching, a real-world pypiserver installation was\nable to easily support over 1000 package downloads/min at peak load.\n\nManaging Automated Startup\n--------------------------\n\nThere are a variety of options for handling the automated starting of\npypiserver upon system startup. Two of the most common are *systemd* and\n*supervisor* for linux systems. For windows creating services with scripts isn't\nan easy task without a third party tool such as *NSSM*.\n\nRunning As a ``systemd`` Service\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n``systemd`` is installed by default on most modern Linux systems and as such,\nit is an excellent option for managing the pypiserver process. An example\nconfig file for ``systemd`` can be seen below::\n\n    [Unit]\n    Description=A minimal PyPI server for use with pip/easy_install.\n    After=network.target\n\n    [Service]\n    Type=simple\n    # systemd requires absolute path here too.\n    PIDFile=/var/run/pypiserver.pid\n    User=www-data\n    Group=www-data\n\n    ExecStart=/usr/local/bin/pypi-server -p 8080 -a update,download --log-file /var/log/pypiserver.log -P /etc/nginx/.htpasswd /var/www/pypi\n    ExecStop=/bin/kill -TERM $MAINPID\n    ExecReload=/bin/kill -HUP $MAINPID\n    Restart=always\n\n    WorkingDirectory=/var/www/pypi\n\n    TimeoutStartSec=3\n    RestartSec=5\n\n    [Install]\n    WantedBy=multi-user.target\n\nAdjusting the paths and adding this file as ``pypiserver.service`` into your\n``systemd/system`` directory will allow management of the pypiserver process with\n``systemctl``, e.g. ``systemctl start pypiserver``.\n\nMore useful information about *systemd* can be found at\nhttps://www.digitalocean.com/community/tutorials/how-to-use-systemctl-to-manage-systemd-services-and-units\n\nLaunching through ``supervisor``\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n`supervisor <http://supervisord.org/>`_ has the benefit of being a pure python\npackage and as such, it provides excellent cross-platform support for process\nmanagement. An example configuration file for ``supervisor`` is given below::\n\n    [program:pypi]\n    command=/home/pypi/pypi-venv/bin/pypi-server -p 7001 -P /home/pypi/.htpasswd /home/pypi/packages\n    directory=/home/pypi\n    user=pypi\n    autostart=true\n    autorestart=true\n    stderr_logfile=/var/log/pypiserver.err.log\n    stdout_logfile=/var/log/pypiserver.out.log\n\nFrom there, the process can be managed via ``supervisord`` using ``supervisorctl``.\n\nRunning As a service with ``NSSM`` (Windows)\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nDownload NSSM from https://nssm.cc unzip to a desired location such as Program Files. Decide whether you are going\nto use win32 or win64, and add that exe to environment PATH.\n\nCreate a start_pypiserver.bat::\n\n    pypi-server -p 8080 C:\\Path\\To\\Packages &\n\nTest the batch file by running it first before creating the service. Make sure you can access\nthe server remotely, and install packages. If you can, proceed, if not troubleshoot until you can.\nThis will ensure you know the server works, before adding NSSM into the mix.\n\nFrom the command prompt::\n\n    nssm install pypiserver\n\nThis command will launch a NSSM gui application::\n\n    Path: C:\\Path\\To\\start_pypiserver.bat\n    Startup directory: Auto generates when selecting path\n    Service name: pypiserver\n\nThere are more tabs, but that is the basic setup. If the service needs to be running with a certain\nlogin credentials, make sure you enter those credentials in the logon tab.\n\nStart the service::\n\n    nssm start pypiserver\n\nOther useful commands::\n\n    nssm --help\n    nssm stop <servicename>\n    nssm restart <servicename>\n    nssm status <servicename>\n\nFor detailed information please visit https://nssm.cc\n\nUsing a Different WSGI Server\n-----------------------------\n\n- The ``bottle`` web-server which supports many WSGI-servers, among others,\n  ``paste``, ``cherrypy``, ``twisted`` and ``wsgiref`` (part of Python); you select\n  them using the ``--server`` flag.\n\n- You may view all supported WSGI servers using the following interactive code::\n\n    >>> from pypiserver import bottle\n    >>> list(bottle.server_names.keys())\n    ['cgi', 'gunicorn', 'cherrypy', 'eventlet', 'tornado', 'geventSocketIO',\n    'rocket', 'diesel', 'twisted', 'wsgiref', 'fapws3', 'bjoern', 'gevent',\n    'meinheld', 'auto', 'aiohttp', 'flup', 'gae', 'paste', 'waitress']\n\n- If none of the above servers matches your needs, invoke just the\n  ``pypiserver:app()`` method which returns the internal WSGI-app WITHOUT\n  starting-up a server - you may then send it to any WSGI server you like.\n  Read also the `Utilizing the API`_ section.\n\n- Some examples are given below - you may find more details in `bottle\n  site <http://bottlepy.org/docs/dev/deployment.html#switching-the-server-backend>`_.\n\nApache (``mod_wsgi``)\n~~~~~~~~~~~~~~~~~~~~~\n\nTo use your *Apache2* with ``pypiserver``, prefer to utilize ``mod_wsgi`` as\nexplained in `bottle's documentation <http://bottlepy.org/docs/dev/deployment.html#apache-mod-wsgi>`_.\n\n.. Note::\n   If you choose instead to go with ``mod_proxy``, mind that you may bump into problems\n   with the prefix-path (see `#155 <https://github.com/pypiserver/pypiserver/issues/155>`_).\n\n1. Adapt and place the following *Apache* configuration either into top-level scope,\n   or inside some ``<VirtualHost>`` (contributed by Thomas Waldmann)::\n\n        WSGIScriptAlias   /     /yoursite/wsgi/pypiserver-wsgi.py\n        WSGIDaemonProcess       pypisrv user=pypisrv group=pypisrv umask=0007 \\\n                                processes=1 threads=5 maximum-requests=500 \\\n                                display-name=wsgi-pypisrv inactivity-timeout=300\n        WSGIProcessGroup        pypisrv\n        WSGIPassAuthorization On    # Required for authentication (https://github.com/pypiserver/pypiserver/issues/288)\n\n        <Directory /yoursite/wsgi >\n            Require all granted\n        </Directory>\n\n   or if using older ``Apache < 2.4``, substitute the last part with this::\n\n        <Directory /yoursite/wsgi >\n            Order deny,allow\n            Allow from all\n        </Directory>\n\n2. Then create the ``/yoursite/cfg/pypiserver.wsgi`` file and make sure that\n   the ``user`` and ``group`` of the ``WSGIDaemonProcess`` directive\n   (``pypisrv:pypisrv`` in the example) have the read permission on it::\n\n        import pypiserver\n\n        conf = pypiserver.default_config(\n            root =          \"/yoursite/packages\",\n            password_file = \"/yoursite/htpasswd\", )\n        application = pypiserver.app(**conf)\n\n\n   .. Tip::\n      If you have installed ``pypiserver`` in a virtualenv, follow ``mod_wsgi``'s\n      `instructions <http://modwsgi.readthedocs.io/en/develop/user-guides/virtual-environments.html>`_\n      and prepend the python code above with the following::\n\n            import site\n\n            ",
  "permissions": {
    "read": true,
    "write": false,
    "admin": false
  },
  "media_types": [
    "application/vnd.docker.container.image.v1+json"
  ],
  "content_types": [
    "image"
  ]
}