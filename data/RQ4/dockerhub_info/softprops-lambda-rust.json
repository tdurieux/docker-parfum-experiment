{
  "user": "softprops",
  "name": "lambda-rust",
  "namespace": "softprops",
  "repository_type": "image",
  "status": 1,
  "status_description": "active",
  "description": "a build env for Rustlang applications targeting the aws lambda provided runtime",
  "is_private": false,
  "is_automated": false,
  "can_edit": false,
  "star_count": 6,
  "pull_count": 18657,
  "last_updated": "2020-07-26T18:06:24.670909Z",
  "date_registered": "2018-06-03T19:19:33.333038Z",
  "collaborator_count": 0,
  "affiliation": null,
  "hub_user": "softprops",
  "has_starred": false,
  "full_description": "# AWS Lambda [Rust](https://www.rust-lang.org/) docker builder 🐑 🐳 🦀 [![Build Status](https://github.com/softprops/lambda-rust/workflows/Main/badge.svg)](https://github.com/softprops/lambda-rust/actions)\n\n\n## 🤔 about\n\nThis docker image extends [lambda ci `provided`](https://github.com/lambci/docker-lambda#documentation) builder docker image, a faithful reproduction of the actual AWS \"**provided**\" Lambda runtime environment,\nand installs [rustup](https://rustup.rs/) and the *stable* rust toolchain.\n\n## 📦 install\n\nTags for this docker image follow the naming convention `softprops/lambda-rust:{version}-rust-{rust-stable-version}`\nwhere `{rust-stable-version}` is a stable version of rust.\n\nYou can find a list of available docker tags [here](https://hub.docker.com/r/softprops/lambda-rust/tags)\n\n> 💡 If you don't find the version you're looking for, please [open a new github issue](https://github.com/softprops/lambda-rust/issues/new?title=I%27m%20looking%20for%20version%20xxx) to publish one\n\nYou can also depend directly on `softprops/lambda-rust:latest` for the most recently published version.\n\n## 🤸 usage\n\nThe default docker entrypoint will build a packaged release optimized version your Rust artifact under `target/lambda/release` to\nisolate the lambda specific build artifacts from your host-local build artifacts.\n\n> **⚠️ Note:** you can switch from the `release` profile to a custom profile like `dev` by providing a `PROFILE` environment variable set to the name of the desired profile. i.e. `-e PROFILE=dev` in your docker run\n\n> **⚠️ Note:** you can include debug symbols in optimized release build binaries by setting `DEBUGINFO`. By default, debug symbols will be stripped from the release binary and set aside in a separate .debug file.\n\nYou will want to volume mount `/code` to the directory containing your cargo project.\n\nYou can pass additional flags to `cargo`, the Rust build tool, by setting the `CARGO_FLAGS` docker env variable\n\nA typical docker run might look like the following.\n\n```sh\n$ docker run --rm \\\n    -v ${PWD}:/code \\\n    -v ${HOME}/.cargo/registry:/root/.cargo/registry \\\n    -v ${HOME}/.cargo/git:/root/.cargo/git \\\n    softprops/lambda-rust\n```\n\n> 💡 The -v (volume mount) flags for `/root/.cargo/{registry,git}` are optional but when supplied, provides a much faster turn around when doing iterative development\n\nIf you are using Windows, the command above may need to be modified to include\na `BIN` environment variable set to the name of the binary to be build and packaged\n\n```sh\n$ docker run --rm \\\n    -e BIN={your-binary-name} \\\n    -v ${PWD}:/code \\\n    -v ${HOME}/.cargo/registry:/root/.cargo/registry \\\n    -v ${HOME}/.cargo/git:/root/.cargo/git \\\n    softprops/lambda-rust\n```\n\n## 🤸🤸 usage via cargo aws-lambda subcommand\n\nIf you want to set up ad hoc lambda functions or have another reason to not to go with full blown devops orchestration tools,\nthere's a cargo subcommand to compile your code into a zip file and deploy it to an existing function. This comes with only\nrust and docker as dependencies.\n\nSetup\n```sh\n$ cargo install cargo-aws-lambda\n```\n\nTo compile and deploy in your project directory\n```sh\n$ cargo aws-lambda {your aws function's full ARN} {your-binary-name}\n```\n\nTo list all options \n```sh\n$ cargo aws-lambda --help\n```\n\nMore instructions can be found [here](https://github.com/vvilhonen/cargo-aws-lambda).\n\n## 🔬 local testing\n\nOnce you've built a Rust lambda function artifact, the `provided` runtime expects\ndeployments of that artifact to be named \"**bootstrap**\". The `lambda-rust` docker image\nbuilds a zip file, named after the binary, containing your binary files renamed to \"bootstrap\"\n\nYou can invoke this bootstap executable with the lambda-ci docker image for the `provided` AWS lambda runtime.\n\n```sh\n# start a docker container replicating the \"provided\" lambda runtime\n# awaiting an event to be provided via stdin\n$ unzip -o \\\n    target/lambda/release/{your-binary-name}.zip \\\n    -d /tmp/lambda && \\\n  docker run \\\n    -i -e DOCKER_LAMBDA_USE_STDIN=1 \\\n    --rm \\\n    -v /tmp/lambda:/var/task \\\n    lambci/lambda:provided\n\n# provide an event payload via stdin (typically a json blob)\n\n# Ctrl-D to yield control back to your function\n```\n\nDoug Tangren (softprops) 2018",
  "permissions": {
    "read": true,
    "write": false,
    "admin": false
  },
  "media_types": [
    "application/vnd.docker.container.image.v1+json"
  ],
  "content_types": [
    "image"
  ]
}