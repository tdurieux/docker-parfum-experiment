{
  "user": "minio",
  "name": "mint",
  "namespace": "minio",
  "repository_type": "image",
  "status": 1,
  "status_description": "active",
  "description": "Collection of tests to detect overall correctness of Minio server.",
  "is_private": false,
  "is_automated": true,
  "can_edit": false,
  "star_count": 0,
  "pull_count": 45023,
  "last_updated": "2022-12-16T07:43:20.320106Z",
  "date_registered": "2017-06-16T03:10:40.666796Z",
  "collaborator_count": 0,
  "affiliation": null,
  "hub_user": "minio",
  "has_starred": false,
  "full_description": "# Mint [![Slack](https://slack.minio.io/slack?type=svg)](https://slack.minio.io) [![Docker Pulls](https://img.shields.io/docker/pulls/minio/mint.svg?maxAge=604800)](https://hub.docker.com/r/minio/mint/)\n\nMint is a testing framework for Minio object server, available as a docker image. It runs correctness, benchmarking and stress tests. Following are the SDKs/tools used in correctness tests.\n\n- awscli\n- aws-sdk-go\n- aws-sdk-php\n- aws-sdk-ruby\n- aws-sdk-java\n- mc\n- minio-go\n- minio-java\n- minio-js\n- minio-py\n- minio-dotnet\n- s3cmd\n\n## Running Mint\n\nMint is run by `docker run` command which requires Docker to be installed. For Docker installation follow the steps [here](https://docs.docker.com/engine/installation/linux/docker-ce/ubuntu/).\n\nTo run Mint with Minio Play server as test target,\n\n```sh\n$ docker run -e SERVER_ENDPOINT=play.minio.io:9000 -e ACCESS_KEY=Q3AM3UQ867SPQQA43P2F \\\n             -e SECRET_KEY=zuf+tfteSlswRu7BJ86wekitnifILbZam1KYY3TG -e ENABLE_HTTPS=1 minio/mint\n```\n\nAfter the tests are run, output is stored in `/mint/log` directory inside the container. To get these logs, use `docker cp` command. For example\n```sh\ndocker cp <container-id>:/mint/log /tmp/logs\n```\n\n### Mint environment variables\n\nBelow environment variables are required to be passed to the docker container. Supported environment variables:\n\n| Environment variable | Description | Example |\n|:--- |:--- |:--- |\n| `SERVER_ENDPOINT` | Endpoint of Minio server in the format `HOST:PORT`; for virtual style `IP:PORT` | `play.minio.io:9000` |\n| `ACCESS_KEY` | Access key of access `SERVER_ENDPOINT` | `Q3AM3UQ867SPQQA43P2F` |\n| `SECRET_KEY` | Secret Key of access `SERVER_ENDPOINT` | `zuf+tfteSlswRu7BJ86wekitnifILbZam1KYY3TG` |\n| `ENABLE_HTTPS` | (Optional) Set `1` to indicate to use HTTPS to access `SERVER_ENDPOINT`. Defaults to `0` (HTTP) | `1` |\n| `MINT_MODE` | (Optional) Set mode indicating what category of tests to be run by values `core`, `full`. Defaults to `core` | `full` |\n| `DOMAIN` | (Optional) Value of MINIO_DOMAIN environment variable used in Minio server | `myminio.com` |\n| `ENABLE_VIRTUAL_STYLE` | (Optional) Set `1` to indicate virtual style access . Defaults to `0` (Path style) | `1` |\n| `RUN_ON_FAIL` | (Optional) Set `1` to indicate execute all tests independent of failures (currently implemented for minio-go and minio-java) . Defaults to `0` (Path style) | `1` |\n\n\n### Test virtual style access against Minio server\n\nTo test Minio server virtual style access with Mint, follow these steps:\n\n- Set a domain in your Minio server using environment variable MINIO_DOMAIN. For example `export MINIO_DOMAIN=myminio.com`.\n- Start Minio server.\n- Execute Mint against Minio server (with `MINIO_DOMAIN` set to `myminio.com`) using this command\n```sh\n$ docker run -e \"SERVER_ENDPOINT=192.168.86.133:9000\" -e \"DOMAIN=minio.com\"  \\\n\t     -e \"ACCESS_KEY=minio\" -e \"SECRET_KEY=minio123\" -e \"ENABLE_HTTPS=0\" \\\n\t     -e \"ENABLE_VIRTUAL_STYLE=1\" minio/mint\n```\n\n### Mint log format\n\nAll test logs are stored in `/mint/log/log.json` as multiple JSON document.  Below is the JSON format for every entry in the log file.\n\n| JSON field | Type | Description | Example |\n|:--- |:--- |:--- |:--- |\n| `name` | _string_ | Testing tool/SDK name | `\"aws-sdk-php\"` |\n| `function` | _string_ | Test function name | `\"getBucketLocation ( array $params = [] )\"` |\n| `args` | _object_ | (Optional) Key/Value map of arguments passed to test function | `{\"Bucket\":\"aws-sdk-php-bucket-20341\"}` |\n| `duration` | _int_ | Time taken in milliseconds to run the test | `384` |\n| `status` | _string_ | one of `PASS`, `FAIL` or `NA` | `\"PASS\"` |\n| `alert` | _string_ | (Optional) Alert message indicating test failure | `\"I/O error on create file\"` |\n| `message` | _string_ | (Optional) Any log message | `\"validating checksum of downloaded object\"` |\n| `error` | _string_ | Detailed error message including stack trace on status `FAIL` | `\"Error executing \\\"CompleteMultipartUpload\\\" on ...` |\n\n## For Developers\n\n### Running Mint development code\n\nAfter making changes to Mint source code a local docker image can be built/run by\n\n```sh\n$ docker build -t minio/mint . -f Dockerfile.mint\n$ docker run -e SERVER_ENDPOINT=play.minio.io:9000 -e ACCESS_KEY=Q3AM3UQ867SPQQA43P2F \\\n             -e SECRET_KEY=zuf+tfteSlswRu7BJ86wekitnifILbZam1KYY3TG \\\n             -e ENABLE_HTTPS=1 -e MINT_MODE=full minio/mint:latest\n```\n\n\n### Adding tests with new tool/SDK\n\nBelow are the steps need to be followed\n\n- Create new app directory under [build](https://github.com/minio/mint/tree/master/build) and [run/core](https://github.com/minio/mint/tree/master/run/core) directories.\n- Create `install.sh` which does installation of required tool/SDK under app directory.\n- Any build and install time dependencies should be added to [install-packages.list](https://github.com/minio/mint/blob/master/install-packages.list).\n- Build time dependencies should be added to [remove-packages.list](https://github.com/minio/mint/blob/master/remove-packages.list) for removal to have clean Mint docker image.\n- Add `run.sh` in app directory under `run/core` which execute actual tests.\n\n#### Test data\nTests may use pre-created data set to perform various object operations on Minio server.  Below data files are available under `/mint/data` directory.\n\n| File name |  Size |\n|:--- |:--- |\n| datafile-0-b | 0B |\n| datafile-1-b | 1B |\n| datafile-1-kB |1KiB |\n| datafile-10-kB |10KiB |\n| datafile-33-kB |33KiB |\n| datafile-100-kB |100KiB |\n| datafile-1-MB |1MiB |\n| datafile-1.03-MB |1.03MiB |\n| datafile-5-MB |5MiB |\n| datafile-6-MB |6MiB |\n| datafile-10-MB |10MiB |\n| datafile-11-MB |11MiB |\n| datafile-65-MB |65MiB |\n| datafile-129-MB |129MiB |\n",
  "permissions": {
    "read": true,
    "write": false,
    "admin": false
  },
  "media_types": [
    "application/vnd.docker.container.image.v1+json"
  ],
  "content_types": [
    "image"
  ]
}