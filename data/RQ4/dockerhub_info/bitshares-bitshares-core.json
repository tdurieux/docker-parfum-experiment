{
  "user": "bitshares",
  "name": "bitshares-core",
  "namespace": "bitshares",
  "repository_type": "image",
  "status": 1,
  "status_description": "active",
  "description": "BitShares Core Docker Container",
  "is_private": false,
  "is_automated": false,
  "can_edit": false,
  "star_count": 6,
  "pull_count": 23079,
  "last_updated": "2022-12-06T10:13:23.878998Z",
  "date_registered": "2017-11-06T14:11:02.378566Z",
  "collaborator_count": 0,
  "affiliation": null,
  "hub_user": "bitshares",
  "has_starred": false,
  "full_description": "BitShares Core\n==============\n\n[BitShares Core](https://github.com/bitshares/bitshares-core) is the BitShares blockchain node software and command-line wallet software.\nFor UI reference wallet software (browser-based wallet and desktop wallet) visit [BitShares UI](https://github.com/bitshares/bitshares-ui).\n\nVisit [BitShares.github.io](https://bitshares.github.io/) to learn about BitShares and join the community at [BitSharesTalk.org](https://bitsharestalk.org/).\n\nInformation for developers can be found in the [Wiki](https://github.com/bitshares/bitshares-core/wiki) and the [BitShares Developer Portal](https://dev.bitshares.works/). Users interested in how BitShares works can go to the [BitShares Documentation](https://how.bitshares.works/) site.\n\nVisit [Awesome BitShares](https://github.com/bitshares/awesome-bitshares) to find more resources and links E.G. chat groups, client libraries and extended APIs.\n\n* [Getting Started](https://github.com/bitshares/bitshares-core#getting-started)\n* [Support](https://github.com/bitshares/bitshares-core#support)\n* [Using Built-In APIs](https://github.com/bitshares/bitshares-core#using-built-in-apis)\n* [Accessing restrictable node API sets](https://github.com/bitshares/bitshares-core#accessing-restrictable-node-api-sets)\n* [FAQ](https://github.com/bitshares/bitshares-core#faq)\n* [License](https://github.com/bitshares/bitshares-core#license)\n\n\nGetting Started\n---------------\n\nBuild instructions and additional documentation are available in the\n[Wiki](https://github.com/bitshares/bitshares-core/wiki).\n\nPrebuilt binaries can be found in the [releases page](https://github.com/bitshares/bitshares-core/releases) for download.\n\n\n### Installing Node and Command-Line Wallet Software\n\nWe recommend building on Ubuntu 20.04 LTS (64-bit)\n\n**Install Operating System Dependencies:**\n\n    sudo apt-get update\n    sudo apt-get install autoconf cmake make automake libtool git libboost-all-dev libssl-dev g++ libcurl4-openssl-dev doxygen\n\n**Build Node And Command-Line Wallet:**\n\n    git clone https://github.com/bitshares/bitshares-core.git\n    cd bitshares-core\n    git checkout master # may substitute \"master\" with current release tag\n    git submodule update --init --recursive\n    mkdir build\n    cd build\n    cmake -DCMAKE_BUILD_TYPE=Release ..\n    make\n\n**Upgrade Node And Command-Line Wallet:**\n\n    cd bitshares-core\n    git remote set-url origin https://github.com/bitshares/bitshares-core.git\n    git checkout master\n    git remote set-head origin --auto\n    git pull\n    git submodule update --init --recursive # this command may fail\n    git submodule sync --recursive\n    git submodule update --init --recursive\n    mkdir build\n    cd build\n    cmake -DCMAKE_BUILD_TYPE=Release ..\n    make\n\n**NOTE:**\n\n* BitShares requires a 64-bit operating system to build, and will not build on a 32-bit OS. Tested operating systems:\n  * Linux (heavily tested with Ubuntu LTS releases)\n  * macOS (various versions)\n  * Windows (various versions, Visual Studio and MinGW)\n  * OpenBSD (various versions)\n\n* BitShares requires [Boost](https://www.boost.org/) libraries to build, supports version `1.58` to `1.74`.\nNewer versions may work, but have not been tested.\nIf your system came pre-installed with a version of Boost libraries that you do not wish to use, you may\nmanually build your preferred version and use it with BitShares by specifying it on the CMake command line.\n\n  Example: `cmake -DBOOST_ROOT=/path/to/boost ..`\n\n* BitShares requires [OpenSSL](https://www.openssl.org/) libraries to build, supports version `1.0.2` to `1.1.1`.\nIf your system came pre-installed with a version of OpenSSL libraries that you do not wish to use, you may\nmanually build your preferred version and use it with BitShares by specifying it on the CMake command line.\n\n  Example: `cmake -DOPENSSL_ROOT_DIR=/path/to/openssl ..`\n\n\n### Running and Stopping Node Software\n\n**Run Node Software:**\n\nStay on `bitshares-core/build` directory before you run the below `witness_node` command\n\n    ./programs/witness_node/witness_node\n\nUnder `build` directory the node run will automatically create the directory `witness_node_data_dir` along with config files underneath then start synchronizing the blockchain.\nIt may take usually several hours to fully synchronize the blockchain data.\nThe blockchain data will be stored under the directory `witness_node_data_dir`.\n\n**Stop Node Software:**\n\nFor stopping the node run cleanly, you will need to access the node run terminal then press on `Ctrl+C` then wait for the run to stop, please note that it may take usually few minutes to exit the run.\nIt's recommended to use linux command [screen](https://help.ubuntu.com/community/Screen) to initiate the node run so you can go back to the node run screen to stop it.\n\n\n**IMPORTANT:** By default the node will start in reduced memory mode by using some of the commands detailed in [Memory reduction for nodes](https://github.com/bitshares/bitshares-core/wiki/Memory-reduction-for-nodes).\nIn order to run a full node with all the account histories which usually unnecessary, you need to remove `partial-operations` and `max-ops-per-account` from your config file. Please note that currently(2018-10-17) a full node will need more than 160GB of RAM to operate and required memory is growing fast. Consider the following table as **minimal requirements** before running a node:\n\n| Default | Full | Minimal  | ElasticSearch\n| --- | --- | --- | ---\n| 150G HDD, 16G RAM | 640G SSD, 64G RAM * | 120G HDD, 4G RAM | 1TB SSD, 32G RAM\n\n\\* For this setup, allocate at least 500GB of SSD as swap.\n\nTo use the command-line wallet or other wallets / clients with the node, the node need to be started with RPC connection enabled, which can be done by starting the node with the `--rpc-endpoint` parameter, E.G.\n\n    ./programs/witness_node/witness_node --rpc-endpoint=127.0.0.1:8090\n\nor configure it in the config file by editing `witness_node_data_dir/config.ini` as follows:\n\n    rpc-endpoint = 127.0.0.1:8090\n\nYou can run the program with `--help` parameter to see more info:\n\n    ./programs/witness_node/witness_node --help\n\n\n### Using Command-Line Wallet\n\nStay on `bitshares-core/build` directory before you run the below `cli_wallet` command\n\n    ./programs/cli_wallet/cli_wallet\n\n**IMPORTANT:** The `cli_wallet` or API interfaces to the node wouldn't be fully functional unless the node is fully synchronized with the blockchain. The `cli_wallet` command `info` will show result `head_block_age` which will tell you how far you are from the live current block of the blockchain.\n\nTo check your current block:\n\n    new >>> info\n\nTo query the blockchain, E.G. get info about an account:\n\n    new >>> get_account <account_name_or_id>\n\nIf you need to transact with your account but not only query, firstly set your initial password and unlock the wallet:\n\n* For non-Windows operating systems, you can type the commands and press `[ENTER]`, then input the password and press `[ENTER]`, in this case the password won't show:\n\n      new >>> set_password [ENTER]\n      Enter password:\n      locked >>> unlock [ENTER]\n      Enter password:\n      unlocked >>>\n\n* For Windows, or you'd like to show the password, type the commands with the password:\n\n      new >>> set_password <PASSWORD>\n      locked >>> unlock <PASSWORD>\n      unlocked >>>\n\nTo be able to transact with your account, import the corresponding private keys:\n\n    unlocked >>> import_key <ACCOUNT_NAME> <WIF_KEY>\n\nThe private keys will be encrypted and stored in the wallet file, the file name is `wallet.json` by default.\nThe private keys are accessible when the wallet is unlocked.\n\n    unlocked >>> dump_private_keys\n\nUse `lock` command to make the private keys inaccessible. There is no auto-lock feature so far.\n\n    unlocked >>> lock\n\nTo import your initial (genesis) balances, import the private keys corresponding to the balances:\n\n    unlocked >>> import_balance <ACCOUNT_NAME> [<WIF_KEY> ...] true\n\nUse `help` to see all available wallet commands.\n\n    >>> help\n\nUse `gethelp <COMMAND>` to see more info about individual commands. E.G.\n\n    >>> gethelp get_order_book\n\nThe definition of all commands is available in the\n[wallet.hpp](https://github.com/bitshares/bitshares-core/blob/master/libraries/wallet/include/graphene/wallet/wallet.hpp) souce code file.\nCorresponding documentation can be found in the [Doxygen documentation](https://doxygen.bitshares.org/classgraphene_1_1wallet_1_1wallet__api.html).\n\nYou can run the program with `--help` parameter to see more info:\n\n    ./programs/cli_wallet/cli_wallet --help\n\nThere is also some info in the [Wiki](https://github.com/bitshares/bitshares-core/wiki/CLI-Wallet-Cookbook).\n\n\nSupport\n-------\n\nTechnical support is available in the [BitSharesTalk technical support subforum](https://bitsharestalk.org/index.php?board=45.0).\n\nBitShares Core bugs can be reported directly to the [issue tracker](https://github.com/bitshares/bitshares-core/issues).\n\nQuestions can be posted in [Github Discussions](https://github.com/bitshares/bitshares-core/discussions).\n\nBitShares UI bugs should be reported to the [UI issue tracker](https://github.com/bitshares/bitshares-ui/issues).\n\nUp to date online Doxygen documentation can be found at [Doxygen.BitShares.org](https://doxygen.bitshares.org/hierarchy.html).\n\n\nUsing Built-In APIs\n-------------\n\n### Node API\n\nThe `witness_node` software provides several different API sets, known as *node API*.\n\nEach API set has its own ID and a name.\nWhen running `witness_node` with RPC connection enabled, initially two API sets are available:\n* API set with ID `0` has name *\"database\"*, it provides read-only access to the database,\n* API set with ID `1` has name *\"login\"*, it is used to login and gain access to additional, restrictable API sets.\n\nHere is an example using `wscat` package from `npm` for websockets:\n\n    $ npm install -g wscat\n    $ wscat -c ws://127.0.0.1:8090\n    > {\"id\":1, \"method\":\"call\", \"params\":[0,\"get_accounts\",[[\"1.2.0\"]]]}\n    < {\"id\":1,\"result\":[{\"id\":\"1.2.0\",\"annotations\":[],\"membership_expiration_date\":\"1969-12-31T23:59:59\",\"registrar\":\"1.2.0\",\"referrer\":\"1.2.0\",\"lifetime_referrer\":\"1.2.0\",\"network_fee_percentage\":2000,\"lifetime_referrer_fee_percentage\":8000,\"referrer_rewards_percentage\":0,\"name\":\"committee-account\",\"owner\":{\"weight_threshold\":1,\"account_auths\":[],\"key_auths\":[],\"address_auths\":[]},\"active\":{\"weight_threshold\":6,\"account_auths\":[[\"1.2.5\",1],[\"1.2.6\",1],[\"1.2.7\",1],[\"1.2.8\",1],[\"1.2.9\",1],[\"1.2.10\",1],[\"1.2.11\",1],[\"1.2.12\",1],[\"1.2.13\",1],[\"1.2.14\",1]],\"key_auths\":[],\"address_auths\":[]},\"options\":{\"memo_key\":\"GPH1111111111111111111111111111111114T1Anm\",\"voting_account\":\"1.2.0\",\"num_witness\":0,\"num_committee\":0,\"votes\":[],\"extensions\":[]},\"statistics\":\"2.7.0\",\"whitelisting_accounts\":[],\"blacklisting_accounts\":[]}]}\n\nWe can do the same thing using an HTTP client such as `curl` for APIs which do not require login or other session state:\n\n    $ curl --data '{\"jsonrpc\": \"2.0\", \"method\": \"call\", \"params\": [0, \"get_accounts\", [[\"1.2.0\"]]], \"id\": 1}' http://127.0.0.1:8090/\n    {\"id\":1,\"result\":[{\"id\":\"1.2.0\",\"annotations\":[],\"membership_expiration_date\":\"1969-12-31T23:59:59\",\"registrar\":\"1.2.0\",\"referrer\":\"1.2.0\",\"lifetime_referrer\":\"1.2.0\",\"network_fee_percentage\":2000,\"lifetime_referrer_fee_percentage\":8000,\"referrer_rewards_percentage\":0,\"name\":\"committee-account\",\"owner\":{\"weight_threshold\":1,\"account_auths\":[],\"key_auths\":[],\"address_auths\":[]},\"active\":{\"weight_threshold\":6,\"account_auths\":[[\"1.2.5\",1],[\"1.2.6\",1],[\"1.2.7\",1],[\"1.2.8\",1],[\"1.2.9\",1],[\"1.2.10\",1],[\"1.2.11\",1],[\"1.2.12\",1],[\"1.2.13\",1],[\"1.2.14\",1]],\"key_auths\":[],\"address_auths\":[]},\"options\":{\"memo_key\":\"GPH1111111111111111111111111111111114T1Anm\",\"voting_account\":\"1.2.0\",\"num_witness\":0,\"num_committee\":0,\"votes\":[],\"extensions\":[]},\"statistics\":\"2.7.0\",\"whitelisting_accounts\":[],\"blacklisting_accounts\":[]}]}\n\nWhen using an HTTP client, the API set ID can be replaced by the API set name, E.G.\n\n    $ curl --data '{\"jsonrpc\": \"2.0\", \"method\": \"call\", \"params\": [\"database\", \"get_accounts\", [[\"1.2.0\"]]], \"id\": 1}' http://127.0.0.1:8090/\n\nThe definition of all node APIs is available in the source code files including\n[database_api.hpp](https://github.com/bitshares/bitshares-core/blob/master/libraries/app/include/graphene/app/database_api.hpp)\nand [api.hpp](https://github.com/bitshares/bitshares-core/blob/master/libraries/app/include/graphene/app/api.hpp).\nCorresponding documentation can be found in Doxygen:\n* [database API](https://doxygen.bitshares.org/classgraphene_1_1app_1_1database__api.html)\n* [other APIs](https://doxygen.bitshares.org/namespacegraphene_1_1app.html)\n\n\n### Wallet API\n\nThe `cli_wallet` program can also be configured to serve **all of its commands** as APIs, known as *wallet API*.\n\nStart `cli_wallet` with RPC connection enabled:\n\n    $ ./programs/cli_wallet/cli_wallet --rpc-http-endpoint=127.0.0.1:8093\n\nAccess the wallet API using an HTTP client:\n\n    $ curl --data '{\"jsonrpc\": \"2.0\", \"method\": \"info\", \"params\": [], \"id\": 1}' http://127.0.0.1:8093/\n    $ curl --data '{\"jsonrpc\": \"2.0\", \"method\": \"get_account\", \"params\": [\"1.2.0\"], \"id\": 1}' http://127.0.0.1:8093/\n\nNote: The syntax to access wallet API is a bit different than accessing node API.\n\n**Important:**\n* When RPC connection is enabled for `cli_wallet`, sensitive data E.G. private keys which is accessible via commands will be accessible via RPC too. It is recommended that only open network connection to localhost or trusted addresses E.G. configure a firewall.\n* When using wallet API, sensitive data E.G. the wallet password and private keys is transmitted as plain text, thus may be vulnerable to network sniffing. It is recommended that only use wallet API with localhost, or in a clean network, and / or use `--rpc-tls-endpoint` parameter to only serve wallet API via secure connections.\n\n\nAccessing restrictable node API sets\n------------------------------------\n\nYou can restrict node API sets to particular users by specifying an `api-access` file in `config.ini`\nor by using the `--api-access /full/path/to/api-access.json` command-line option on node startup. Here is an example `api-access` file which allows\nuser `bytemaster` with password `supersecret` to access four different API sets, while allowing any other user to access the three public API sets\nnecessary to use the node:\n\n    {\n       \"permission_map\" :\n       [\n          [\n             \"bytemaster\",\n             {\n                \"password_hash_b64\" : \"9e9GF7ooXVb9k4BoSfNIPTelXeGOZ5DrgOYMj94elaY=\",\n                \"password_salt_b64\" : \"INDdM6iCi/8=\",\n                \"allowed_apis\" : [\"database_api\", \"network_broadcast_api\", \"history_api\", \"network_node_api\"]\n             }\n          ],\n          [\n             \"*\",\n             {\n                \"password_hash_b64\" : \"*\",\n                \"password_salt_b64\" : \"*\",\n                \"allowed_apis\" : [\"database_api\", \"network_broadcast_api\", \"history_api\"]\n             }\n          ]\n       ]\n    }\n\nNote: the `login` API set is always accessible.\n\nPasswords are stored in `base64` as salted `sha256` hashes.  A simple Python script,\n[`saltpass.py`](https://github.com/bitshares/bitshares-core/blob/master/programs/witness_node/saltpass.py)\nis avaliable to obtain hash and salt values from a password.\nA single asterisk `\"*\"` may be specified as username or password hash to accept any value.\n\nWith the above configuration, here is an example of how to call the `add_node` API from the `network_node` API set:\n\n    {\"id\":1, \"method\":\"call\", \"params\":[1,\"login\",[\"bytemaster\", \"supersecret\"]]}\n    {\"id\":2, \"method\":\"call\", \"params\":[1,\"network_node\",[]]}\n    {\"id\":3, \"method\":\"call\", \"params\":[2,\"add_node\",[\"127.0.0.1:9090\"]]}\n\nNote, the call to `network_node` is necessary to obtain the correct API set ID for the `network_node` API set.  It is not guaranteed that the API set ID for the `network_node` API set will always be `2`.\n\nThe restricted API sets are accessible via HTTP too using *basic access authentication*. E.G.\n\n    $ curl --data '{\"jsonrpc\": \"2.0\", \"method\": \"call\", \"params\": [\"network_node\", \"add_node\", [\"127.0.0.1:9090\"]], \"id\": 1}' http://bytemaster:supersecret@127.0.0.1:8090/\n\nOur `doxygen` documentation contains the most up-to-date information\nabout APIs for the [node](https://doxygen.bitshares.org/namespacegraphene_1_1app.html) and the\n[wallet](https://doxygen.bitshares.org/classgraphene_1_1wallet_1_1wallet__api.html).\n\n\nFAQ\n---\n\n- Is there a way to generate help with parameter names and method descriptions?\n\n    Yes. Documentation of the code base, including APIs, can be generated using Doxygen. Simply run `doxygen` in this directory.\n\n    If both Doxygen and perl are available in your build environment, the command-line wallet's `help` and `gethelp`\n    commands will display help generated from the doxygen documentation.\n\n    If your command-line wallet's `help` command displays descriptions without parameter names like\n        `signed_transaction transfer(string, string, string, string, string, bool)`\n    it means CMake was unable to find Doxygen or perl during configuration.  If found, the\n    output should look like this:\n        `signed_transaction transfer(string from, string to, string amount, string asset_symbol, string memo, bool broadcast)`\n\n- Is there a way to allow external program to drive `cli_wallet` via websocket, JSONRPC, or HTTP?\n\n    Yes. External programs may connect to the command-line wallet and make its calls over a websockets API. To do this, run the wallet in\n    server mode, i.e. `cli_wallet -H \"127.0.0.1:9999\"` and then have the external program connect to it over the specified port\n    (in this example, port 9999). Please check the [\"Using Built-In APIs\"](#using-built-in-apis) section for more info.\n\n- Is there a way to access methods which require login over HTTP?\n\n    Yes. Most of the methods can be accessed by specifying the API name instead of an API ID. If an API is protected by a username and a password, it can be accessed by using *basic access authentication*. Please check the [\"Accessing restrictable node API sets\"](#accessing-restrictable-node-api-sets) section for more info.\n\n    However, HTTP is not really designed for \"server push\" notifications, and we would have to figure out a way to queue notifications for a polling client. Websockets solves this problem. If you need to access the stateful methods, use Websockets.\n\n- What is the meaning of `a.b.c` numbers?\n\n    The first number specifies the *space*.  Space `1` is for protocol objects, `2` is for implementation objects.\n    Protocol space objects can appear on the wire, for example in the binary form of transactions.\n    Implementation space objects cannot appear on the wire and solely exist for implementation\n    purposes, such as optimization or internal bookkeeping.\n\n    The second number specifies the *type*.  The type of the object determines what fields it has.  For a\n    complete list of type IDs, see `GRAPHENE_DEFINE_IDS(protocol, protocol_ids ...)` in\n    [protocol/types.hpp](https://github.com/bitshares/bitshares-core/blob/master/libraries/protocol/include/graphene/protocol/types.hpp)\n    and `GRAPHENE_DEFINE_IDS(chain, implementation_ids ...)` in [chain/types.hpp](https://github.com/bitshares/bitshares-core/blob/master/libraries/chain/include/graphene/chain/types.hpp).\n\n    The third number specifies the *instance*.  The instance of the object is different for each individual\n    object.\n\n- The answer to the previous question was really confusing.  Can you make it clearer?\n\n    All account IDs are of the form `1.2.x`.  If you were the 9735th account to be registered,\n    your account's ID will be `1.2.9735`.  Account `0` is special (it's the \"committee account\",\n    which is controlled by the committee members and has a few abilities and restrictions other accounts\n    do not).\n\n    All asset IDs are of the form `1.3.x`.  If you were the 29th asset to be registered,\n    your asset's ID will be `1.3.29`.  Asset `0` is special (it's BTS, which is considered the \"core asset\").\n\n    The first and second number together identify the kind of thing you're talking about (`1.2` for accounts,\n    `1.3` for assets).  The third number identifies the particular thing.\n\n- How do I get the `network_add_nodes` command to work?  Why is it so complicated?\n\n    You need to follow the instructions in the [\"Accessing restrictable node API sets\"](#accessing-restrictable-node-api-sets) section to\n    allow a username/password access to the `network_node` API set.  Then you need\n    to pass the username/password to the `cli_wallet` on the command line.\n\n    It's set up this way so that the default configuration is secure even if the RPC port is\n    publicly accessible.  It's fine if your `witness_node` allows the general public to query\n    the database or broadcast transactions (in fact, this is how the hosted web UI works).  It's\n    less fine if your `witness_node` allows the general public to control which p2p nodes it's\n    connecting to.  Therefore the API to add p2p connections needs to be set up with proper access\n    controls.\n\n\nLicense\n-------\n\nBitShares Core is under the MIT license. See [LICENSE](https://github.com/bitshares/bitshares-core/blob/master/LICENSE.txt)\nfor more information.\n",
  "permissions": {
    "read": true,
    "write": false,
    "admin": false
  },
  "media_types": [
    "application/vnd.docker.container.image.v1+json"
  ],
  "content_types": [
    "image"
  ]
}