{
  "user": "mailgun",
  "name": "kafka-pixy",
  "namespace": "mailgun",
  "repository_type": "image",
  "status": 1,
  "status_description": "active",
  "description": "Kafka-Pixy (gRPC/REST) proxy for Kafka with automatic consumer group management",
  "is_private": false,
  "is_automated": false,
  "can_edit": false,
  "star_count": 2,
  "pull_count": 150166,
  "last_updated": "2019-07-22T12:20:14.750466Z",
  "date_registered": "2018-03-30T06:38:37.16588Z",
  "collaborator_count": 0,
  "affiliation": null,
  "hub_user": "mailgun",
  "has_starred": false,
  "full_description": "# Kafka-Pixy (gRPC/REST Proxy for Kafka)\n\n[![Build Status](https://travis-ci.org/mailgun/kafka-pixy.svg?branch=master)](https://travis-ci.org/mailgun/kafka-pixy) [![Go Report Card](https://goreportcard.com/badge/github.com/mailgun/kafka-pixy)](https://goreportcard.com/report/github.com/mailgun/kafka-pixy) [![Coverage Status](https://coveralls.io/repos/mailgun/kafka-pixy/badge.svg?branch=master&service=github)](https://coveralls.io/github/mailgun/kafka-pixy?branch=master) [![GitHub stars](https://img.shields.io/github/stars/mailgun/kafka-pixy.svg?style=social&label=Stars)](https://github.com/mailgun/kafka-pixy)\n\nKafka-Pixy is a dual API (gRPC and REST) proxy for [Kafka](http://kafka.apache.org/documentation.html) with automatic consumer group management. It is designed to hide the complexity of the Kafka client protocol and provide a stupid simple API that is trivial to implement in any language.\n\nKafka-Pixy is tested against Kafka versions **0.10.2.1**, **1.1.1**, and **2.1.0**, but is likely to work with any version starting from **0.8.2.2**. It uses the Kafka [Offset Commit/Fetch API](https://cwiki.apache.org/confluence/display/KAFKA/A+Guide+To+The+Kafka+Protocol#AGuideToTheKafkaProtocol-OffsetCommit/FetchAPI) to keep track of consumer offsets. However [Group Membership API](https://cwiki.apache.org/confluence/display/KAFKA/A+Guide+To+The+Kafka+Protocol#AGuideToTheKafkaProtocol-GroupMembershipAPI) is not yet implemented, therefore it needs to talk to Zookeeper directly to manage consumer group membership.\n\n#### Key Features:\n- **Automatic Consumer Group Management**: Unlike in [Kafka REST Proxy](https://docs.confluent.io/current/kafka-rest/docs/index.html) by [Confluent](https://www.confluent.io/) clients do not need to explicitly create a consumer instance. When Kafka-Pixy gets a consume request for a group-topic pair for the first time, it automatically joins the group and subscribes to the topic. When requests stop coming for longer than the [subscription timeout](https://www.confluent.io/) it cancels the subscription; \n- **At Least Once Guarantee**: The main feature of Kafka-Pixy is that it guarantees at-least-once message delivery. The guarantee is achieved via combination of synchronous production and explicit acknowledgement of consumed messages;\n- **Dual API**: Kafka-Pixy provides two types of API:\n  - [gRPC](http://www.grpc.io/docs/guides/) ([Protocol Buffers](https://developers.google.com/protocol-buffers/docs/overview) over [HTTP/2](https://http2.github.io/faq/)) recommended to produce/consume messages;\n  - REST (JSON over HTTP) intended for for testing and operations purposes, although you can use it to produce/consume messages too;\n- **Multi-Cluster Support**: One Kafka-Pixy instance can proxy to several Kafka clusters. You just need to define them in the [config file](https://github.com/mailgun/kafka-pixy/blob/master/default.yaml) and then address clusters by name given in the config file in your API requests.\n- **Aggregation**: Kafka works best when messages are read/written in batches, but from application standpoint it is easier to deal with individual message read/writes. Kafka-Pixy provides message based API to clients, but internally it aggregates requests and sends them to Kafka in batches.\n- **Locality**: Kafka-Pixy is intended to run on the same host as the applications using it. Remember that it provides only message based API - no batching, therefore using it over network is suboptimal.\n",
  "permissions": {
    "read": true,
    "write": false,
    "admin": false
  },
  "media_types": [
    "application/vnd.docker.container.image.v1+json"
  ],
  "content_types": [
    "image"
  ]
}