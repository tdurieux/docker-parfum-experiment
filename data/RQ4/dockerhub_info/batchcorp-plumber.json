{
  "user": "batchcorp",
  "name": "plumber",
  "namespace": "batchcorp",
  "repository_type": "image",
  "status": 1,
  "status_description": "active",
  "description": "A swiss army knife CLI tool for interacting with Kafka, RabbitMQ and other messaging systems",
  "is_private": false,
  "is_automated": false,
  "can_edit": false,
  "star_count": 2,
  "pull_count": 158175,
  "last_updated": "2022-11-30T20:29:18.284382Z",
  "date_registered": "2020-09-20T23:37:55.439574Z",
  "collaborator_count": 2,
  "affiliation": null,
  "hub_user": "batchcorp",
  "has_starred": false,
  "full_description": "![Brief Demo](https://raw.githubusercontent.com/batchcorp/plumber/master/assets/plumber_logo_full.png)\n\n[![Master build status](https://github.com/batchcorp/plumber/workflows/master/badge.svg)](https://github.com/batchcorp/plumber/actions/workflows/master-test.yaml) [![Go Report Card](https://goreportcard.com/badge/github.com/batchcorp/plumber)](https://goreportcard.com/report/github.com/batchcorp/plumber)\n\nplumber is a CLI devtool for inspecting, piping, messaging and redirecting data\nin message systems like Kafka, RabbitMQ , GCP PubSub and \n[many more](#supported-messaging-systems). \\[1]\n\nThe tool enables you to:\n\n* Safely view the contents of your data streams\n* Write plain or encoded data to any system\n* Route data from one place to another\n* Decode protobuf/avro/thrift/JSON data in real-time\n  * Support for both Deep and Shallow protobuf envelope types\n  * Support for google.protobuf.Any fields\n* Relay data to the [Batch platform](https://batch.sh)\n* Ship change data capture events to [Batch platform](https://batch.sh)\n* [Replay events into a message system on your local network](https://docs.batch.sh/what-are/what-are-destinations/plumber-as-a-destination)\n* And _many_ other features (for a full list: `plumber -h`)\n\n<sub>\\[1] It's like `curl` for messaging systems.</sub>\n\n## Why do you need it?\n\nMessaging systems are black boxes - gaining visibility into what is passing\nthrough them is an involved process that requires you to write brittle consumer\ncode that you will eventually throw away.\n\n`plumber` enables you to stop wasting time writing throw-away code - use it to\nlook into your queues and data streams, use it to connect disparate systems \ntogether or use it for debugging your event driven systems.\n\n## Demo\n\n![Brief Demo](https://raw.githubusercontent.com/batchcorp/plumber/master/assets/demo.gif)\n\n## Install\n\n### Via brew\n\n```bash\n$ brew tap batchcorp/public\n$ brew install plumber\n```\n\n### Manually\n\n* [macOS](https://github.com/batchcorp/plumber/releases/latest/download/plumber-darwin)\n* [Linux](https://github.com/batchcorp/plumber/releases/latest/download/plumber-linux)\n* [Windows](https://github.com/batchcorp/plumber/releases/latest/download/plumber-windows.exe)\n\nPlumber is a single binary, to install you simply need to download it, give it executable\npermissions and call it from your shell. Here's an example set of commands to do this:\n\n```bash\n$ curl -L -o plumber https://github.com/batchcorp/plumber/releases/latest/download/plumber-darwin\n$ chmod +x plumber\n$ mv plumber /usr/local/bin/plumber\n```\n\n## Usage\n\n### Write messages\n\n```bash\n❯ plumber write kafka --topics test --input foo\nINFO[0000] Successfully wrote message to topic 'test'    backend=kafka\nINFO[0000] Successfully wrote '1' message(s)             pkg=plumber\n```\n\n### Read message(s)\n\n```bash\n❯ plumber read kafka --topics test\nINFO[0000] Initializing (could take a minute or two) ...  backend=kafka\n\n------------- [Count: 1 Received at: 2021-11-30T12:51:32-08:00] -------------------\n\n+----------------------+------------------------------------------+\n| Key                  |                                     NONE |\n| topic                |                                     test |\n| Offset               |                                        8 |\n| Partition            |                                        0 |\n| Header(s)            |                                     NONE |\n+----------------------+------------------------------------------+\n\nfoo\n```\n\nNOTE: Add `-f` to perform a continuous read (like `tail -f`)\n\n### Write messages via pipe\n\n**Write multiple messages**\n\nNOTE: Multiple messages are separated by a newline.\n\n```bash\n$ cat mydata.txt\nline1\nline2\nline3\n\n$ cat mydata.txt | plumber write kafka --topics foo\n\nINFO[0000] Successfully wrote message to topic 'foo'  pkg=kafka/write.go\nINFO[0000] Successfully wrote message to topic 'foo'  pkg=kafka/write.go\nINFO[0000] Successfully wrote message to topic 'foo'  pkg=kafka/write.go\n```\n\n**Write each element of a JSON array as a message**\n\n```bash\n$ cat mydata.json\n[{\"key\": \"value1\"},{\"key\": \"value2\"}]\n\n$ cat mydata.json | plumber write kafka --topics foo --json-array\n\nINFO[0000] Successfully wrote message to topic 'foo'  pkg=kafka/write.go\nINFO[0000] Successfully wrote message to topic 'foo'  pkg=kafka/write.go\n```\n\n## Documentation\n\n* [docs/examples.md](https://github.com/batchcorp/plumber/blob/master/docs/examples.md) for more usage examples\n* [docs/env.md](https://github.com/batchcorp/plumber/blob/master/docs/env.md) for list of supported environment variables\n* [docs/metrics.md](https://github.com/batchcorp/plumber/blob/master/docs/metrics.md) for information on metrics that plumber exposes\n* [docs/server.md](https://github.com/batchcorp/plumber/blob/master/docs/server.md) for examples on running plumber in server mode\n\n## Getting Help\n\nA full list of available flags can be displayed by using the `--help` flag after\ndifferent parts of the command:\n\n```bash\n$ plumber --help\n$ plumber read --help\n$ plumber read kafka --help\n```\n\n## Features\n\n* Encode & decode for multiple formats\n  * Protobuf (Deep and [Shallow envelope](https://www.confluent.io/blog/spring-kafka-protobuf-part-1-event-data-modeling/#shallow-envelope))\n  * Avro\n  * Thrift\n  * Flatbuffer\n  * GZip\n  * JSON\n  * JSONPB (protobuf serialized as JSON)\n  * Base64\n* `--continuous` support (ie. `tail -f`)\n* Support for **most** messaging systems\n* Supports writing via string, file or pipe\n* Observe, relay and archive messaging data\n* Single-binary, zero-config, easy-install\n\n## Hmm, what is this Batch thing?\n\nWe are distributed system enthusiasts that started a company called\n[Batch](https://batch.sh). \n\nOur company focuses on solving data stream observability for complex systems\nand workflows. Our goal is to allow _everyone_ to build asynchronous systems,\nwithout the fear of introducing too much complexity.\n\nWhile working on our company, we built a tool for reading and writing messages\nfrom our messaging systems and realized that there is a serious lack of tooling\nin this space.\n\nWe wanted a swiss army knife type of tool for working with messaging systems\n(we use Kafka and RabbitMQ internally), so we created `plumber`.\n\n## Why the name `plumber`?\n\nWe consider ourselves \"internet plumbers\" of sort - so the name seemed to fit :)\n\n## Supported Messaging Systems\n\n* Kafka\n* RabbitMQ\n* RabbitMQ Streams \n* Google Cloud Platform PubSub\n* MQTT\n* Amazon Kinesis Streams **(NEW)**\n* Amazon SQS\n* Amazon SNS (Publishing)\n* ActiveMQ (STOMP protocol)\n* Azure Service Bus\n* Azure Event Hub\n* NATS\n* NATS Streaming (Jetstream) \n* Redis-PubSub\n* Redis-Streams\n* Postgres CDC (Change Data Capture)\n* MongoDB CDC (Change Data Capture)\n* Apache Pulsar\n* NSQ\n* KubeMQ\n\nNOTE: If your messaging tech is not supported - submit an issue and we'll do\nour best to make it happen!\n\n### Kafka\nYou need to ensure that you are using the same consumer group on all plumber\ninstances.\n\n### RabbitMQ\nMake sure that all instances of `plumber` are pointed to the same queue.\n\n### Note on boolean flags\nIn order to flip a boolean flag to `false`, prepend `--no` to the flag.\n\nie. `--queue-declare` is `true` by default. To make it false, use `--no-queue-declare`.\n\n## Tunnels\n\n`plumber` can now act as a replay destination (tunnel). Tunnel mode allows you to\nrun an instance of plumber, on your local network, which will then be available\nin the Batch platform as a _replay destination_.\n\nThis mitigates the need make firewall changes to replay messages from a Batch\ncollection back to your message bus.\n\nSee https://docs.batch.sh/what-are/what-are-destinations/plumber-as-a-destination\nfor full documentation.\n\n## High Performance & High Availability\n`plumber` comes with a \"server\" mode which will cause plumber to operate as a\nhighly available cluster.\n\nYou can read more about \"server mode\" [here](https://docs.batch.sh/plumber/server-mode).\n\nServer mode examples can be found in [docs/server.md](https://github.com/batchcorp/plumber/blob/master/docs/server.md)\n\n## Acknowledgments\n\n**Huge** shoutout to [jhump](https://github.com/jhump) and for his excellent\n[protoreflect](https://github.com/jhump/protoreflect) library, without which\n`plumber` would not be anywhere *near* as easy to implement. _Thank you!_\n\n## Release\n\nTo push a new plumber release:\n\n1. `git tag v0.18.0 master`\n1. `git push origin v0.18.0`\n1. Watch the github action\n1. New release should be automatically created under https://github.com/batchcorp/plumber/releases/\n1. Update release to include any relevant info\n1. Update [homebrew](https://github.com/batchcorp/homebrew-public/blob/master/plumber.rb) SHA and version references\n\n## Contribute\n\nWe love contributions! Prior to sending us a PR, open an issue to discuss what\nyou intend to work on. When ready to open PR - add good tests and let's get this\nthing merged!",
  "permissions": {
    "read": true,
    "write": false,
    "admin": false
  },
  "media_types": [
    "application/vnd.docker.container.image.v1+json"
  ],
  "content_types": [
    "image"
  ]
}