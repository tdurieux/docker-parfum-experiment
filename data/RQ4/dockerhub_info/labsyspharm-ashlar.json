{
  "user": "labsyspharm",
  "name": "ashlar",
  "namespace": "labsyspharm",
  "repository_type": "image",
  "status": 1,
  "status_description": "active",
  "description": "ASHLAR: Alignment by Simultaneous Harmonization of Layer/Adjacency Registration",
  "is_private": false,
  "is_automated": false,
  "can_edit": false,
  "star_count": 0,
  "pull_count": 9115,
  "last_updated": "2022-08-19T17:51:39.519061Z",
  "date_registered": "2019-08-05T16:43:13.811108Z",
  "collaborator_count": 0,
  "affiliation": null,
  "hub_user": "labsyspharm",
  "has_starred": false,
  "full_description": "# ASHLAR: Alignment by Simultaneous Harmonization of Layer/Adjacency Registration\n\n## Whole-slide microscopy image stitching and registration in Python\n\n**Ashlar** performs fast, high-quality stitching of microscopy images. It also\nco-registers multiple rounds of cyclic imaging for methods such as CyCIF and\nCODEX. Ashlar can read image data directly from BioFormats-supported microscope\nvendor file formats as well as a directory of plain TIFF files. Output is saved\nas pyramidal, tiled OME-TIFF.\n\nNote that Ashlar requires unstitched individual \"tile\" images as input, so it is\nnot suitable for microscopes or slide scanners that only provide pre-stitched\nimages.\n\n**Visit [labsyspharm.github.io/ashlar/](https://labsyspharm.github.io/ashlar/) for the most up-to-date information on ASHLAR.**\n\n## Usage\n\n```\nashlar [-h] [-o PATH] [-c CHANNEL] [--flip-x] [--flip-y]\n       [--flip-mosaic-x] [--flip-mosaic-y]\n       [--output-channels CHANNEL [CHANNEL ...]] [-m SHIFT]\n       [--filter-sigma SIGMA] [--tile-size PIXELS]\n       [--ffp FILE [FILE ...]] [--dfp FILE [FILE ...]] [--plates] [-q]\n       [--version]\n       FILE [FILE ...]\n\nStitch and align multi-tile cyclic microscope images\n\npositional arguments:\n  FILE                  Image file(s) to be processed, one per cycle\n\noptional arguments:\n  -h, --help            Show this help message and exit\n  -o PATH, --output PATH\n                        Output file. If PATH ends in .ome.tif a pyramidal OME-\n                        TIFF will be written. If PATH ends in just .tif and\n                        includes {cycle} and {channel} placeholders, a series\n                        of single-channel plain TIFF files will be written. If\n                        PATH starts with a relative or absolute path to\n                        another directory, that directory must already exist.\n                        (default: ashlar_output.ome.tif)\n  -c CHANNEL, --align-channel CHANNEL\n                        Reference channel number for image alignment.\n                        Numbering starts at 0. (default: 0)\n  --flip-x              Flip tile positions left-to-right\n  --flip-y              Flip tile positions top-to-bottom\n  --flip-mosaic-x       Flip output image left-to-right\n  --flip-mosaic-y       Flip output image top-to-bottom\n  --output-channels CHANNEL [CHANNEL ...]\n                        Output only specified channels for each cycle.\n                        Numbering starts at 0. (default: all channels)\n  -m SHIFT, --maximum-shift SHIFT\n                        Maximum allowed per-tile corrective shift in microns\n                        (default: 15)\n  --filter-sigma SIGMA  Filter images before alignment using a Gaussian kernel\n                        with s.d. of SIGMA pixels (default: no filtering)\n  --tile-size PIXELS    Pyramid tile size for OME-TIFF output (default: 1024)\n  --ffp FILE [FILE ...]\n                        Perform flat field illumination correction using the\n                        given profile image. Specify one common file for all\n                        cycles or one file for every cycle. Channel counts\n                        must match input files. (default: no flat field\n                        correction)\n  --dfp FILE [FILE ...]\n                        Perform dark field illumination correction using the\n                        given profile image. Specify one common file for all\n                        cycles or one file for every cycle. Channel counts\n                        must match input files. (default: no dark field\n                        correction)\n  --plates              Enable plate mode for HTS data\n  -q, --quiet           Suppress progress display\n  --version             Show program's version number and exit\n```\n\n## Installation\n\n### Pip install\n\nAshlar can be installed in most Python environments using `pip`:\n``` bash\npip install ashlar\n```\n\n### Using a conda environment\n\nIf you don't already have [miniconda](https://docs.conda.io/en/latest/miniconda.html)\nor [Anaconda](https://www.anaconda.com/products/individual), download the python\n3.x version and install. Then, run the following commands from a terminal (Linux/Mac)\nor command prompt (Windows):\n\nCreate a named conda environment with python 3.10:\n```bash\nconda create -y -n ashlar python=3.10\n```\n\nActivate the conda environment:\n```bash\nconda activate ashlar\n```\n\nIn the activated environment, install dependencies and ashlar itself:\n```bash\nconda install -y -c conda-forge numpy scipy matplotlib networkx scikit-image=0.19 scikit-learn \"tifffile>=2022.4.8\" zarr pyjnius blessed\npip install ashlar\n```\n\n### Docker image\n\nThe docker image of ashlar is on DockerHub at `labsyspharm/ashlar` which should be\nsuitable for many use cases.\n",
  "permissions": {
    "read": true,
    "write": false,
    "admin": false
  },
  "media_types": [
    "application/vnd.docker.container.image.v1+json"
  ],
  "content_types": [
    "image"
  ]
}