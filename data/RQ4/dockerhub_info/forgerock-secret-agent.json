{
  "user": "forgerock",
  "name": "secret-agent",
  "namespace": "forgerock",
  "repository_type": "image",
  "status": 1,
  "status_description": "active",
  "description": "Generate random Kubernetes secrets and optionally store them in a Cloud Secret Manager",
  "is_private": false,
  "is_automated": false,
  "can_edit": false,
  "star_count": 0,
  "pull_count": 81314,
  "last_updated": "2022-11-11T14:53:02.262465Z",
  "date_registered": "2020-05-19T02:06:45.865353Z",
  "collaborator_count": 0,
  "affiliation": null,
  "hub_user": "forgerock",
  "has_starred": false,
  "full_description": "# `secret-agent` - Secret generator and manager for k8s\n\n[![PkgGoDev](https://pkg.go.dev/badge/github.com/ForgeRock/secret-agent)](https://pkg.go.dev/github.com/ForgeRock/secret-agent) [![Go Report Card](https://goreportcard.com/badge/github.com/ForgeRock/secret-agent)](https://goreportcard.com/report/github.com/ForgeRock/secret-agent) [![License](https://img.shields.io/badge/License-Apache%202.0-blue.svg)](/LICENSE)\n\n![Secret agent logo a go gopher with sunglasses and hawaiian style shirt](/assets/secretagent.png)\n\nThe `secret-agent` is a Kubernetes operator that generates the secrets required by the ForgeRock® Identity Platform. The secrets are stored in-cluster as Kubernetes secrets and can also be stored in a cloud secret manager.\n\n## Roadmap\n\nSecret agent is now feature complete. Future updates will be limited to bug fixes.\n\nSecret agent was originally designed to fulfill a short term obective to create and manage secrets for the ForgeRock platform running on Kubernetes.\nThe longer term roadmap for platform secrets management is centered around:\n\n* Direct integration with cloud secret management (GCP Secret Manager, Vault, etc.) using ForgeRock's commons secrets API.\n* Management of certificates using https://certmanager.io. Cert-manager is the defacto Kubernetes standard for certificate management.\n* Backup and restore of Kubernetes secrets using cloud native technologies such as https://velero.io, or vendor provided backup services (Backup for GKE).\n\n## Installation\n\nTo install the latest `secret-agent` release in a Kubernetes environment, run:\n\n```bash\nkubectl apply -f https://github.com/ForgeRock/secret-agent/releases/latest/download/secret-agent.yaml\n```\n\nSpecific versions of the operator can be installed by running:\n\n```bash\nSA_VERSION=v0.1.0 kubectl apply -f https://github.com/ForgeRock/secret-agent/releases/download/${SA_VERSION}/secret-agent.yaml\n```\n\n## Configuration\n\nOnce the operator is installed, new secrets can be generated by providing a secret agent configuration (SAC) object. The SAC is a custom kubernetes object monitored by the `secret-agent` operator. All the secrets’ specifications are defined through the SAC.\n\nFor more information on how to create a SAC, see the [Secret Agent Configuration Schema](#secret-agent-configuration-schema) and/or the [Examples](#examples) sections.\n\nOnce the SAC file has been created, it can be pushed to the cluster as with any other resource.\n\nFor example:\n\n```bash\nkubectl create -f config/samples/secret-agent_v1alpha1_secretagentconfiguration.yaml\n```\n\nIt is important to note that the Kubernetes secrets produced by the `secret-agent` will be placed in the same namespace as the SAC. If similar secrets are desired in multiple namespaces, one SAC would be required per namespace.\n\n## Usage\n\n### Enabling Cloud Backup\n\nThe `secret-agent` can be configured to back up all the generated secrets in a cloud provider's secret manager solution. When this feature is enabled, secrets stored in the secret managers are considered the source of truth.\n\nIf a cloud provider has been configured, the operator will attempt to load the secret data from that cloud provider. If the secret is found in the cloud provider's secret manager, the operator will use the found data as the Kubernetes secret data. The operator will only generate new secrets if no secret data is found in the cloud provider.\n\nThe `secret-agent` supports the following cloud providers:\n\n* Google Secret Manager\n* AWS Secrets Manager\n* Azure Key Vault\n\nIt is possible to run the `secret-agent` without setting up a cloud provider. This is useful when debugging or testing applications. To disable cloud provider support, set `spec.appConfig.secretsManager` to “none”. This is only possible if `spec.appConfig.createKubernetesObjects` is set to true.\n\nIn addition, it is possible to configure the `secret-agent` to store secrets in the secret manager without creating local Kubernetes secrets. This is useful if your applications can access the cloud secret manager directly and the `secret-agent` is only used to generate such secrets. To achieve this, set `spec.appConfig.createKubernetesObjects` to false. Do note that `spec.appConfig.secretsManager` cannot be set to \"none\".\n\nIn order to fetch and store secrets in the AWS Secrets Manager, the user must provide credentials with the necessary permissions.\n\n#### Set up Cloud Backup With AWS Secret Manager\n\nThe `secret-agent` expects credentials to be discoverable via standard [AWS mechanisms](https://docs.aws.amazon.com/sdk-for-go/v1/developer-guide/configuring-sdk.html#specifying-credentials). These credentials can be provided in a number of ways, for example:\n\n* Environment Variables: _AWS_ACCESS_KEY_ID, AWS_SECRET_ACCESS_KEY_\n* Shared Credentials file: _~/.aws/credentials_\n* Shared Configuration file: _(~/.aws/config_\n* EC2 Instance Metadata (preferred): _Obtains credentials from 169.254.169.254_\n\nRefer to [AWS documentation](https://docs.aws.amazon.com/secretsmanager/latest/userguide/auth-and-access_overview.html) for instructions on how to obtain credentials and grant necessary permissions to access the AWS Secrets Manager. The `secret-agent` needs to access read/write secrets. This can be achieved by allowing access to the `arn:aws:iam::aws:policy/SecretsManagerReadWrite` AWS managed policy.\n\nEven though the recommended way to obtain credentials is to use the EC2 Instance Metadata service, it is possible to provide custom credentials via a Kubernetes secret. The secret reference is provided in the SAC in `spec.appConfig.credentialsSecretName`. In the default `secret-agent` deployment, the user is expected to publish the cloud credentials' secret in the same namespace as the operator. This target namespace can be changed by changing the runtime argument `--cloud-secrets-namespace=[NS_NAME]` located in the operator's [manifest](/config/manager/manager.yaml). If this argument is omitted completely, the namespace will default to the namespace of each SAC.\n\nOnce these credentials are posted to a Kubernetes secret, the next step is to configure the AWS Secret Manager using the `SecretAgentConfiguration`.\n\nFor example, the following configuration targets AWS Secret Manager in `us-east-1`:\n\n```yaml\napiVersion: secret-agent.secrets.forgerock.io/v1alpha1\nkind: SecretAgentConfiguration\nmetadata:\n  name: standard-forgerock-example\n  namespace: test-sa\nspec:\n  appConfig:\n    createKubernetesObjects: true\n    credentialsSecretName: cloud-credentials [** optional**]\n    secretsManager: AWS\n    awsRegion: us-east-1\n```\n\n*optional for AWS*: The `cloud-credentials` secret referenced in `spec.appConfig.credentialsSecretName` would look like this:\n\n```yaml\napiVersion: v1\nkind: Secret\ntype: Opaque\nmetadata:\n  name: cloud-credentials\n  namespace: test-sa\ndata:\n  AWS_ACCESS_KEY_ID: QU....[base64 encoded key].....GY=\n  AWS_SECRET_ACCESS_KEY: cRB.....[base64 encoded access key].......BB==\n```\n\n**Note: The maximum secret size supported by AWS is 65Kb** For more information, see [AWS documentation](https://docs.aws.amazon.com/secretsmanager/latest/userguide/reference_limits.html).\n\n#### Set up Cloud Backup With GCP Secret Manager\n\nThe `secret-agent` expects credentials to be discoverable via standard [GCP mechanisms](https://cloud.google.com/docs/authentication). These credentials can be provided in a number of ways, including:\n\n* [Workload identity](#workload-identity) (recommended for GKE deployments)\n* [Credentials file](#credentials-file) with user accounts or service accounts.\n\nPlease refer to the [GCP Documentation](https://cloud.google.com/secret-manager/docs/reference/libraries?hl=nl#cloud-console) for instructions on how to create a service account with the necessary permissions to access the GCP Secrets Manager. The `secret-agent` needs access to read/write secrets. This can be achieved by assigning the `Secret Manager Admin` role to the service account provided.\n\n##### Workload identity\n\nWorkload Identity is the recommended way to access Google Cloud services from applications running within GKE. For more information on how to enable workload identity see [GCP Documentation](https://cloud.google.com/kubernetes-engine/docs/how-to/workload-identity#gcloud_1).\n\nIn general, the user creates a Google Cloud service account with the proper role attached and\n[enables workload identity](https://cloud.google.com/kubernetes-engine/docs/how-to/workload-identity#enable_on_cluster) in their GKE cluster.\nThe Kubernetes services account is already created for you during the `secret-agent` deployment.\n\nRun the following commands to enable workload identity for the `secret-agent` deployment:\n\n```bash\nPROJECTID=myproject #GCP project ID\nGSA_NAME=mygcpserviceaccount #GCP service account name\n# Create the GCP IAM policy binding\ngcloud iam service-accounts add-iam-policy-binding --role roles/iam.workloadIdentityUser --member \"serviceAccount:${PROJECTID}.svc.id.goog[secret-agent-system/secret-agent-controller-manager]\" ${GSA_NAME}@${PROJECTID}.iam.gserviceaccount.com\n# Annotate the Kubernetes service account\nkubectl -n secret-agent-system annotate serviceaccounts secret-agent-controller-manager iam.gke.io/gcp-service-account=${GSA_NAME}@${PROJECTID}.iam.gserviceaccount.com\n```\n\n**Note: in order to use workload identity, no `spec.appConfig.credentialsSecretName` should be provided**. If credentials are provided, `secret-agent` will use the provided credentials instead.\n\n##### Credentials file\n\nThe credentials are provided to the operator using a kubernetes secret under the `GOOGLE_CREDENTIALS_JSON` data key. The name of this secret is provided in `spec.appConfig.credentialsSecretName`. In the default `secret-agent` deployment, the operator will look for a secret with the provided name in the operator's own namespace. The user can specify a different namespace by setting the argument `--cloud-secrets-namespace=[NS_NAME]`. If this argument is omitted, the operator's default behavior is to fetch the credentials from the same namespace as the SAC.\n\nThe `cloud-credentials` secret referenced in `spec.appConfig.credentialsSecretName` would look like this:\n\n```yaml\napiVersion: v1\nkind: Secret\ntype: Opaque\nmetadata:\n  name: cloud-credentials\n  namespace: test-sa\ndata:\n  GOOGLE_CREDENTIALS_JSON: .....[base64 encoded service account json].....\n```\n\n##### Configure the GCP Secret Manager\n\nOnce the necessary credentials are provided to `secret-agent` using [workload identity](#workload-identity)  or a [credentials file](#credentials-file), the next step is to configure the GCP Secret Manager using the `SecretAgentConfiguration`.\n\nFor example, the following configuration targets GCP Secret Manager for the `example-project-id` project:\n\n```yaml\napiVersion: secret-agent.secrets.forgerock.io/v1alpha1\nkind: SecretAgentConfiguration\nmetadata:\n  name: standard-forgerock-example\n  namespace: test-sa\nspec:\n  appConfig:\n    createKubernetesObjects: true\n    credentialsSecretName: cloud-credentials [** skip if using workload identity **]\n    secretsManager: GCP\n    gcpProjectID: example-project-id\n```\n\n#### Set up Cloud Backup With Azure Key Vault\n\n_note:_ Azure's API response time on Key Vault is long and will delay the creation of secrets. It might be beneficial to deploy a SAC before long before deploying an application if use Azure Key Vault\n\nThe `secret-agent` uses credentials which are available using two different methods: Azure Managed Identities (recommended for Azure deployemnts) or explicit credentials. Explicit credentials are configured in a secret referenced in the SAC spec `spec.appConfig.credentialsSecretName`. Example Azure Configuration for a SAC:\n\n```yaml\napiVersion: secret-agent.secrets.forgerock.io/v1alpha1\nkind: SecretAgentConfiguration\nmetadata:\n  name: standard-forgerock-example\n  namespace: test-sa\nspec:\n  appConfig:\n    createKubernetesObjects: true\n    credentialsSecretName: cloud-credentials [** optional**]\n    secretsManager: Azure\n    azureVaultName: secret-agent-vault\n```\n\nIf no secret is provided in `credentialsSecretName`, the operator's Azure client will attempt to authenticate using managed identities. For more information, see Azure's [documentation](https://docs.microsoft.com/en-us/azure/aks/use-managed-identity). This is the recommended configuration for deployments in Azure's AKS.\n\nOtherwise, the credentials may be explicitly set in the `credentialsSecretName` secret. The service principle associated with the keys will need the role `Key Vault Secrets Officer` when using an RBAC policy based Key Vault.\n\nExample credentials secret:\n\n```yaml\napiVersion: v1\nkind: Secret\ntype: Opaque\nmetadata:\n  name: cloud-credentials\ndata:\n  # AZURE_TENANT_ID: # OPTIONAL: Update if using Azure Key Vault\n  # AZURE_CLIENT_ID: # OPTIONAL: Update if using Azure Key Vault\n  # AZURE_CLIENT_SECRET: # OPTIONAL: Update if using Azure Key Vault\n```\n\n\n**Note: The maximum secret size supported by Azure is 25Kb** For more information, see [Azure documentation](https://docs.microsoft.com/en-us/azure/key-vault/secrets/about-secrets).\n\n### Importing your own secrets\n\nIn addition to generating secrets, the `secret-agent` allow users to import their own secrets. This is especially useful for things like certificates and certificate authorities that can be referenced by other secrets in the SAC. For example, a user can import their organization's CA and use it to sign certificates generated by the `secret-agent`.\n\nAll that is required is to provide a Kubernetes secret with the same name and same key names as described in the SAC. It is important to note that if the [cloud backup](#enabling-cloud-backup) feature is enabled, the secret to be imported must be provided using the cloud manager's secret manager. The `secret-agent` will ignore local secrets if [cloud backup](#enabling-cloud-backup) is enabled.\n\n### Naming Convention For Cloud Backups\n\nThere is a naming convention used by `secret-agent` to store and read secrets from the cloud secret managers. In general, the names follow the format:\n\n```bash\n$prefix-$secretName-$keyName [If secretsManagerPrefix is provided]\n$namespace-$secretName-$keyName [If no prefix is provided]\n```\n\nWhen using a SecretsManagerPrefix writes to a secret manager doesn't use namespace, make sure your prefixes are unique.\n\nDue to cloud provider limitations, all `/`, `.` and `_` characters in secret names are replaced by `-` when accessing the cloud secret managers.\n\nFor example, consider the following secret agent configuration:\n\n```yaml\n---\napiVersion: secret-agent.secrets.forgerock.io/v1alpha1\nkind: SecretAgentConfiguration\nmetadata:\n  name: forgerock-sac\n  namespace: dev\nspec:\n  appConfig:\n    secretsManagerPrefix: \"devCluster\"\n    awsRegion: us-east-1\n    secretsManager: AWS\n  secrets:\n  - name: ds-passwords\n    keys:\n      - name: dirmanager.pw\n        type: password\n```\n\nThe secret generated by the SAC would be stored as `devCluster-ds-passwords-dirmanager-pw` in the AWS Secret Manager due to the `secretsManagerPrefix`. The same name would apply to other cloud providers.\n\nSome key types require more than one secret to be backed up. Such key types require a public and private components stored separately. This is the case for key types: `ca`, `keypair`, `ssh` and `keytool`. These secrets use the same naming convention described above and append a suffix to the main name as constructed previously.\n\nKey Type | Name\n--- | ---\n`ca`      | $NAME-pem<br>$NAME-private-pem\n`keypair` | $NAME-pem<br>$NAME-private-pem\n`ssh`     | $NAME<br>$NAME-pub\n`keytool` | $NAME<br>$NAME-storepass<br>$NAME-keypass\n\nIn the preceding table, `$NAME` follows the convention at the top of this section.\n\n## Examples\n\nWe provide a sample SAC that exercises all features of the `secret-agent`. See the [samples folder](config/samples).\n\n## Secret Agent Configuration Schema\n\nThe following tables list the configurable parameters of the secret agent configuration (SAC) and their default values.\n\n### App Config\n\nParameter | Description | Default\n--- | --- | ---\n`spec.appConfig.createKubernetesObjects` | Create Kubernetes secrets for each generated secret. Can't be set to false if `spec.appConfig.secretsManager` is set to \"none\" | true\n`spec.appConfig.secretTimeout` | Set the timeout in seconds for generating each individual secret | 40\n`spec.appConfig.secretsManager` | Select the cloud provider to target. If \"none\", secrets will not be backed up in any cloud secret manager. Can't be set to \"none\" if `spec.appConfig.createKubernetesObjects` is false| none\n`spec.appConfig.secretsManagerPrefix` | Prefix added to the name of the secrets stored in the cloud secret manager instead of the namespace. | \"\"\n`spec.appConfig.credentialsSecretName` | Name of the Kubernetes secret containing the credentials to access the cloud provider. | \"\"\n`spec.appConfig.gcpProjectID` | When using GCP as the secret mgr, specify the project ID.  | \"\"\n`spec.appConfig.awsRegion` | When using AWS  as the secret mgr, specify the region.  | \"\"\n`spec.appConfig.awsKmsKeyId` | When using AWS  as the secret mgr, you can specifiy the KMS Key Id else will use the default AWS managed KMS key, which poses some limitations on the secret.  | \"\"\n`spec.appConfig.azureVaultName` | When using Azure as the secret mgr, specify the vault name. | \"\"\n`spec.secrets` | List of Kubernetes secrets to create. See [Secret Config](#secret-config). | []\n\n### Secret Config\n\nParameter | Description | Default\n--- | --- | ---\n`name` | Name of the Kubernetes secret to generate. | \"\"\n`keys` | List of the specs of each key in the Kubernetes secret. See [Key Config](#key-config). | []\n\n### Key Config\n\nParameter | Description | Default\n--- | --- | ---\n`name` | Name of the key in the Kubernetes secret. | \"\"\n`type` | Type of key to generate. Available values: ca;literal;password;ssh;keyPair;truststore;keytool. | \"\"\n`spec.value` | Used when key type is `literal`. Specify the value of the password. | \"\"\n`spec.isBase64` | Used when key type is `literal`. If true, interpret the value to be used for the secret as a base64 encoded string. | false\n`spec.length` | Used when key type is `password`. Specify the length of the password to generate. | 32\n`spec.useBinaryCharacters` | Used when key type is `password`. If true, use the full byte range for each character, not just the ASCII range. | false\n`spec.algorithm` | Used when key type is `keyPair`. Specify the algorithm used to generate the keyPair. | \"\"\n`spec.sans` | Used when key type is `keyPair`. Specify alternate DNS names used by the certificate. | \"\"\n`spec.selfSigned` | Used when key type is `keyPair`. If true, generate a self signed certificate. | false\n`spec.signedWithPath` | Used when key type is `keyPair`. Specify the path to the CA in the SAC `secretname/keyname`. | \"\"\n`spec.duration` | Used when key type is is `ca` or `keyPair`. Specify the valid duration of the certificate. If a negative duration is specified (-72h) the certificate is generated with an expiry date in the past. | 3650d\n`spec.distinguishedName.country` | Used when key type is `ca` or `keyPair`. Specify the country name. | \"\"\n`spec.distinguishedName.organization` | Used when key type is `ca` or `keyPair`. Specify the organization name. | \"\"\n`spec.distinguishedName.organizationUnit` | Used when key type is `ca` or `keyPair`. Specify the organizationUnit name.  | \"\"\n`spec.distinguishedName.locality` | Used when key type is `ca` or `keyPair`. Specify the locality name. | \"\"\n`spec.distinguishedName.province` | Used when key type is `ca` or `keyPair`. Specify the province name. | \"\"\n`spec.distinguishedName.streetAddress` | Used when key type is `ca` or `keyPair`. Specify the streetAddress. | \"\"\n`spec.distinguishedName.postalCode` | Used when key type is `ca` or `keyPair`. Specify the postalCode. | \"\"\n`spec.distinguishedName.serialNumber` | Used when key type is `ca` or `keyPair`. Specify the serialNumber. | \"\"\n`spec.distinguishedName.commonName` | Used when key type is `ca` or `keyPair`. Specify the commonName for the certificate. | \"\"\n`spec.truststoreImportPaths` | Used when key type is `truststore`. List of paths of certificates in the form `secretname/keyname` that will be imported into the truststore. | \"\"\n`spec.storeType` | Used when key type is `keytool`. Specify the keystore type. Available values: pkcs12;jceks;jks. | \"\"\n`spec.storePassPath` | Used when key type is `keytool`. Specify the path to the secret in the SAC to use as the keystore password in the form `secretname/keyname`. | \"\"\n`spec.keyPassPath` | Used when key type is `keytool`. Specify the path to the secret in the SAC to use as the key password in the form `secretname/keyname`. | \"\"\n`spec.keytoolAliases` | Used when key type is `keytool`. Specify the aliases to include in the keystore. See [Keytool Aliases Config](#keytool-aliases-config). | []\n\n### Keytool Aliases Config\n\nParameter | Description | Default\n--- | --- | ---\n`name` | Name of the alias in the keystore. | \"\"\n`cmd` | `keytool` command used to create the alias in the keystore. Supported cmds: genkeypair;genseckey;importcert;importpassword;importkeystore. | \"\"\n`args` | Args passed to the keytool command provided in `cmd`. | \"\"\n`sourcePath` | Used when the keystore cmd is importcert, importpassword or importkeystore. Specify the path to the secret in the SAC to import into the alias in the form `secretname/keyname`. Note: importcert only imports the public key. importkeystore must be used to import a key pair. | \"\"\n`isKeyPair` | If importing a keypair using importkeystore, must be set to true. | false\n\n## Runtime Arguments\n\nArgument | Description | Default\n--- | --- | ---\n`--metrics-addr` | The address the metric endpoint binds to. Set to 0 to disable metrics. | \":8080\"\n`--health-addr` | The address the healthz/readyz endpoint binds to. | \":8081\"\n`--enable-leader-election` | Enable leader election for controller manager. Enabling this will ensure there is only one active controller manager. | \"false\"\n`--cert-dir` | Directory where to store/read the webhook certs. | \"/tmp/k8s-webhook-server/serving-certs\"\n`--cloud-secrets-namespace` | Namespace where the cloud credentials secrets are located. Defaults to the SAC namespace. | SAC's `metadata.namespace`\n`--debug` | Enable debug logs. | \"false\"\n\n## Running Tests\n\nTests can be run using `make tests`. Some of the tests exercise parts of the code that uses `keytool`, and `kubebuilder`tools. Those must be installed locally in order to run the tests. Another option is to use docker:\n\n* Ensure you're Kubernetes context is pointing to a test cluster, such as `minikube`, then\n  * `docker build -t gcr.io/forgerock-io/secret-agent-testing:latest -f --target=tester .`\n  * `docker run -it --rm -v ${PWD}:/root/go/src/github.com/ForgeRock/secret-agent gcr.io/forgerock-io/secret-agent-testing:latest`\n  * `go test ./...`\n",
  "permissions": {
    "read": true,
    "write": false,
    "admin": false
  },
  "media_types": [
    "application/vnd.docker.container.image.v1+json"
  ],
  "content_types": [
    "image"
  ]
}