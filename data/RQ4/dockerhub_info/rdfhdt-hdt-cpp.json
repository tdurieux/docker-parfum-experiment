{
  "user": "rdfhdt",
  "name": "hdt-cpp",
  "namespace": "rdfhdt",
  "repository_type": "image",
  "status": 1,
  "status_description": "active",
  "description": "Image containing HDT cpp tools",
  "is_private": false,
  "is_automated": true,
  "can_edit": false,
  "star_count": 2,
  "pull_count": 326,
  "last_updated": "2019-01-25T16:58:41.351281Z",
  "date_registered": "2017-10-20T13:52:37.302878Z",
  "collaborator_count": 0,
  "affiliation": null,
  "hub_user": "rdfhdt",
  "has_starred": false,
  "full_description": "[![Join the chat at https://gitter.im/rdfhdt](https://badges.gitter.im/Join%20Chat.svg)](https://gitter.im/rdfhdt)\n[![DOI](https://zenodo.org/badge/DOI/10.5281/zenodo.580298.svg)](https://doi.org/10.5281/zenodo.580298)\n\n# C++ implementation of the HDT compression format\n\nHeader Dictionary Triples (HDT) is a compression format for RDF data\nthat can also be queried for Triple Patterns.\n\n## Getting Started\n\n### Prerequisites\n\nIn order to compile this library, you need to have the following\ndependencies installed:\n\n- [GNU Autoconf](https://www.gnu.org/software/autoconf/autoconf.html)\n\n  - `sudo apt install autoconf` on Debian-based distros (e.g., Ubuntu)\n  - `sudo dnf install autoconf` on Red Hat-based distros (e.g.,\n    Fedora)\n\n- [GNU Libtool](https://www.gnu.org/software/libtool/)\n\n  - `sudo apt install libtool` on Debian-based distros (e.g., Ubuntu)\n  - `sudo dnf install libtool` on Red Hat-based distros (e.g., Fedora)\n\n- [GNU zip (gzip)](http://www.zlib.net/) Allows GNU zipped RDF input\n  files to be ingested, and allows GNU zipped HDT files to be loaded.\n\n  - `sudo apt install zlib1g zlib1g-dev` on Debian-based distros (e.g., Ubuntu)\n  - `sudo dnf install gzip` on Red Hat-based distros (e.g., Fedora)\n\n- [pkg-config](https://www.freedesktop.org/wiki/Software/pkg-config/)\n  A helper tool for compiling applications and libraries.\n\n  - `sudo apt install pkg-config` on Debian-based distros (e.g.,\n    Ubuntu)\n  - `sudo dnf install pkgconf-pkg-config` on Red Hat-based distros\n    (e.g., Fedora)\n\n- [Serd v0.28+](https://github.com/drobilla/serd) The default parser\n  that is used to process RDF input files.  It supports the N-Quads,\n  N-Triples, TriG, and Turtle serialization formats.\n\n  - `sudo apt install libserd-0-0 libserd-dev` on Debian-based distros\n    (e.g., Ubuntu)\n  - `sudo dnf install serd serd-devel` on Red Hat-based distros (e.g.,\n    Fedora)\n    \n  Sometimes the version of Serd that is distributed by package managers\n  is too old.  In that case, Serd can also be built manually: see\n  https://github.com/drobilla/serd for the installation instructions.\n\n### Installation\n\nTo compile and install, run the following commands under the directory\n`hdt-cpp`.  This will also compile and install some handy tools.\n\n```\n./autogen.sh\n./configure\nmake -j2\nsudo make install\n```\n\n### Installation issues\n\nSometimes, the above instructions do not result in a working HDT\ninstallation.  This section enumerates common issues and their\nworkaround.\n\n#### Package requirements (serd-0 >= 0.28.0) were not met\nWhen getting \n\n    Package requirements (serd-0 >= 0.28.0) were not met: Requested 'serd-0 >= 0.28.0' but version of Serd is 0.X\n\nSerd is not 0.28+, probably because of the package manager. Built it manually at https://github.com/drobilla/serd.\n\n#### `./configure` cannot find Serd\n\nWhile running `./configure` you get a message similar to the\nfollowing:\n\n```\nPackage 'serd-0', required by 'virtual:world', not found\n```\n\nThis means that `./configure` cannot find the location of the\n`serd-0.pc` file on your computer.  You have to find this location\nyourself, e.g., in the following way:\n\n```sh\nfind /usr/ -name serd-0.pc\n```\n\nOnce you have found the directory containing the `serd-0.pc` file, you\nhave to inform the `./configure` script about this location by setting\nthe following environment variable (where directory\n`/usr/local/lib/pkgconfig/` is adapted to your situation):\n\n```sh\nexport PKG_CONFIG_PATH=/usr/local/lib/pkgconfig/\n```\n\n## Using HDT\n\nAfter compiling and installing, you can use the handy tools that are\nlocated in `hdt-cpp/libhdt/tools`.  We show some common tasks that can\nbe performed with these tools.\n\n### RDF-2-HDT: Creating an HDT\n\nHDT files can only be created for standards-compliant RDF input files.\nIf your input file is not standards-compliant RDF, it is not possible\nto create an HDT files out of it.\n\n```\n$ ./rdf2hdt data.nt data.hdt\n```\n\n### HDT-2-RDF: Exporting an HDT\n\nYou can export an HDT file to an RDF file in one of the supported\nserialization formats (currently: N-Quads, N-Triples, TriG, and\nTurtle).  The default serialization format for exporting is N-Triples.\n\n```\n$ ./hdt2rdf data.hdt data.nt\n```\n\n### Querying for Triple Patterns\n\nYou can issue Triple Pattern (TP) queries in the terminal by\nspecifying a subject, predicate, and/or object term.  The questions\nmark (`?`) denotes an uninstantiated term.  For example, you can\nretrieve _all_ the triples by querying for the TP `? ? ?`:\n\n    $ ./hdtSearch data.hdt\n    >> ? ? ?\n    http://example.org/uri3 http://example.org/predicate3 http://example.org/uri4\n    http://example.org/uri3 http://example.org/predicate3 http://example.org/uri5\n    http://example.org/uri4 http://example.org/predicate4 http://example.org/uri5\n    http://example.org/uri1 http://example.org/predicate1 \"literal1\"\n    http://example.org/uri1 http://example.org/predicate1 \"literalA\"\n    http://example.org/uri1 http://example.org/predicate1 \"literalB\"\n    http://example.org/uri1 http://example.org/predicate1 \"literalC\"\n    http://example.org/uri1 http://example.org/predicate2 http://example.org/uri3\n    http://example.org/uri1 http://example.org/predicate2 http://example.org/uriA3\n    http://example.org/uri2 http://example.org/predicate1 \"literal1\"\n    9 results shown.\n\n    >> http://example.org/uri3 ? ?\n    http://example.org/uri3 http://example.org/predicate3 http://example.org/uri4\n    http://example.org/uri3 http://example.org/predicate3 http://example.org/uri5\n    2 results shown.\n\n    >> exit\n\n### Exporting the header\n\nThe header component of an HDT contains metadata describing the data\ncontained in the HDT, as well as the creation metadata about the HDT\nitself.  The contents of the header can be exported to an N-Triples\nfile:\n\n```\n$ ./hdtInfo data.hdt > header.nt\n```\n\n### Replacing the Header\n\nIt can be useful to update the header information of an HDT.  This can\nbe done by generating a new HDT file (`new.hdt`) out of an existing\nHDT file (`old.hdt`) and an N-Triples file (`new-header.nt`) that\ncontains the new header information:\n\n```\n$ ./replaceHeader old.hdt new.hdt new-header.nt\n```\n\n## Contributing\n\nContributions are welcome!  Please base your contributions and pull\nrequests (PRs) on the `develop` branch, and not on the `master`\nbranch.\n\n## License\n\n`hdt-cpp` is free software licensed as GNU Lesser General Public\nLicense (GPL). See `libhdt/COPYRIGHT`.\n",
  "permissions": {
    "read": true,
    "write": false,
    "admin": false
  },
  "media_types": [
    "application/vnd.docker.container.image.v1+json"
  ],
  "content_types": [
    "image"
  ]
}