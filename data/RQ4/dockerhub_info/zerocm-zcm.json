{
  "user": "zerocm",
  "name": "zcm",
  "namespace": "zerocm",
  "repository_type": "image",
  "status": 1,
  "status_description": "active",
  "description": "Zero Communications and Marshalling Core Message Passing Framework",
  "is_private": false,
  "is_automated": false,
  "can_edit": false,
  "star_count": 0,
  "pull_count": 256,
  "last_updated": "2021-11-18T09:11:43.432601Z",
  "date_registered": "2019-12-21T16:19:11.670952Z",
  "collaborator_count": 0,
  "affiliation": null,
  "hub_user": "zerocm",
  "has_starred": false,
  "full_description": "## [Explore the web-based readme](http://zerocm.github.io/zcm/)\n\n\n\n# ZCM: Zero Communications and Marshalling\n\n[![Build Status](https://github.com/ZeroCM/zcm/workflows/Build/badge.svg)](https://github.com/ZeroCM/zcm/actions)\n\nZCM is a micro-framework for message-passing and data-marshalling, designed originally\nfor robotics systems where high-bandwidth and low-latency are critical and the variance in\ncompute platforms is large.\n\nZCM is a publish/subscribe message-passing system with automatic message type-checking and\nserialization. It provides bindings for a variety of programming languages, and generates\nlanguage-specific message serialization routines. Using a ZCM message feels natural\nin each language.\n\nZCM is transport-agnostic. There is no required built-in transport. Every transport is\nfirst-class. This is achieved by defining strict blocking and non-blocking transport APIs. As\nlong as a transport implementation conforms to this API, it should work flawlessly with ZCM.\nThis design allows ZCM to work well on anything from a high-end posix-based compute cluster\nwith thousands of nodes to a low-end real-time embedded-system with no operating system.\n\nZCM is a derivation of the [LCM project](http://lcm-proj.github.io/) created in 2006 by\nthe MIT DARPA Urban Challenge team. The core message-type system, publish/subscribe APIs,\nand basic tools are ported directly from LCM and remain about 95% compatible. While there\nare a handful of subtle differences between the two, the core distinguishing feature is\nZCM's transport agnosticism. LCM is designed completely around UDP Multicast. This transport\nmakes a lot of sense for LAN connected compute clusters (such the original 2006 MIT DGC\nVechicle).  However, there are many other applications that are interesting targets for\nZCM messaging.  These include: local system messaging (IPC), multi-threaded messaging\n(in-process), embedded-system peripherals (UART, I2C, etc), and web applications\n(Web Sockets).  By refusing to make hard assumptions about the transport layer, ZCM opens\nthe door to a wide set of use-cases that were neither possible nor practical with LCM.\n\nTo learn more about what ZCM tries to be, and its guiding principles, check out the\n[Project Philosphy](docs/philosophy.md).\n\nTo dive, in and see some examples, check out the [Tutorial](docs/tutorial.md).\n\nIf you have previously used LCM, check out [From LCM to ZCM](docs/lcm_to_zcm.md).\n\nTo learn how you can contribute to this project, check out [Contributing](docs/contributing.md)\n\n## Quick Links\n - [Project Philosphy](docs/philosophy.md)\n - [Tutorial](docs/tutorial.md)\n - [From LCM to ZCM](docs/lcm_to_zcm.md)\n - [ZCM Type System](docs/zcmtypesys.md)\n - [Transport Layer](docs/transports.md)\n - [Embedded Applications](docs/embedded.md)\n - Web Applications (coming soon)\n - [Dependencies & Building](docs/building.md)\n - [Tools](docs/tools.md)\n - [Frequently Asked Questions](docs/FAQs.md)\n - [Continuous Integration](http://ci.zcm-project.org)\n - [Contributing](docs/contributing.md)\n\n## Features\n - Type-safe and version-safe message serialization\n - A useful suite of tools for logging, log-playback, and real-time message inspection (spy)\n - A wide set of optionally built-in transports including UDP Multicast, IPC, In-Process, Serial, and ZeroMQ\n - A well-defined interface for building custom transports\n - Strong support for embedded applications. The core embedded code is restricted to C89.\n - Only one true dependency: A modern C++11 compiler for the non-embedded code.\n\n## Supported platforms and languages\n - Platforms\n   - GNU/Linux\n   - Web browsers supporting the Websocket API\n   - Any C89 capable embedded system\n - Languages\n   - C89 and greater\n   - C++\n   - Java\n   - MATLAB (using Java)\n   - NodeJS and Client-side Javascript\n   - Python\n   - Julia (both v1.6.0 and v0.6.4)\n\n## Roadmap\n - Platform Support\n   - Windows\n   - OS X\n   - Any POSIX-1.2001 system (e.g., Cygwin, Solaris, BSD, etc.)\n - Consider porting the rest of the LCM languages\n   - C#\n   - Lua\n - Explore alternative messaging paradigms using ZCM Types (e.g. those found in ZeroMQ)\n - Break from the original LCM APIs to improve API consistency\n   - Goal for v2.0\n   - v1.0 will **always** strive for API compatibility\n\n## Subtle differences to LCM\n\nZCM is approximately 95% API compatible with LCM. Porting existing Unix-based LCM\nprograms to ZCM is very easy in many cases. A quick `sed -i 's/lcm/zcm/g'` works for\nmost applications. ZCM uses the same binary-compatible formats for UDP Multicast, Logging,\nand ZCMType encodings. Thus LCM and ZCM applications can communicate flawlessly. This\nallows LCM users to gradually migrate to ZCM.\n\n### Known incompatibilities:\n - `zcm_get_fileno()` is not supported\n - `zcm_handle_timeout()` is not supported\n - Any applications using GLib via LCM may have build errors\n   - ZCM does *not* depend on GLib\n - ZCMType drops support for the LCMType-style enums\n",
  "permissions": {
    "read": true,
    "write": false,
    "admin": false
  },
  "media_types": [
    "application/vnd.docker.container.image.v1+json"
  ],
  "content_types": [
    "image"
  ]
}