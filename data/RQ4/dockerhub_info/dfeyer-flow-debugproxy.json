{
  "user": "dfeyer",
  "name": "flow-debugproxy",
  "namespace": "dfeyer",
  "repository_type": "image",
  "status": 1,
  "status_description": "active",
  "description": "A Flow Framework Debug proxy for xDebug, written in Go ",
  "is_private": false,
  "is_automated": true,
  "can_edit": false,
  "star_count": 0,
  "pull_count": 3853,
  "last_updated": "2021-03-18T21:56:50.816093Z",
  "date_registered": "2018-10-02T12:26:36.595119Z",
  "collaborator_count": 0,
  "affiliation": null,
  "hub_user": "dfeyer",
  "has_starred": false,
  "full_description": "Flow Framework Debug Proxy for xDebug\n-------------------------------------\n\nFlow Framework is a web application platform enabling developers creating\nexcellent web solutions and bring back the joy of coding. It gives you fast\nresults. It is a reliable foundation for complex applications.\n\nThe biggest pain with Flow Framework come from the the proxy class, the\nframework do not execute your own code, but a precompiled version. This is\nrequired for advanced feature, like AOP and the security framework. So working\nwith Flow is a real pleasure, but adding xDebug in the setup can be a pain.\n\nThis project is an xDebug proxy, written in Go, to take care of the mapping\nbetween your PHP file and the proxy class.\n\nBuild your own\n--------------\n\n    # Get the dependecies\n    go get\n    # Build\n    go build\n\nRun the proxy\n-------------\n\n    # Don't forget to change the configuration of your IDE to use port 9010\n    flow-debugproxy -vv --framework flow\n\nHow to debug the proxy class directly\n-------------------------------------\n\nYou can disable to path mapping, in this case the proxy do not process xDebug\nprotocol:\n\n    ./flow-debugproxy --framework dummy\n\nShow help\n---------\n\n    ./flow-debugproxy help\n\nUse with Docker\n---------------\n\nUse the [official docker image](https://hub.docker.com/r/dfeyer/flow-debugproxy/) and follow the instruction for the configuration.\n\n##### PHP configuration\n\n```\n[Xdebug]\nzend_extension=/.../xdebug.so\nxdebug.remote_enable=1\nxdebug.idekey=PHPSTORM\n; The IP or name of the proxy container\nxdebug.remote_host=debugproxy\n; The proxy port (9010 by default, to not have issue is you use PHP FPM, already on port 9000)\nxdebug.remote_port=9010\n;xdebug.remote_log=/tmp/xdebug.log\n```\n\nYou can use the `xdebug.remote_log` to debug the protocol between your container and the proxy, it's useful to catch network issues.\n\n##### Docker Compose\n\nThis is an incomplete Docker Compose configuration:\n\n```\nservices:\n  debugproxy:\n    image: dfeyer/flow-debugproxy:latest\n    volumes:\n      - .:/data\n    environment:\n      # This MUST be the IP address of the IDE (your computer)\n      - \"IDE_IP=192.168.1.130\"\n      # This is the default value, need to match the xdebug.remote_port on your php.ini\n      - \"XDEBUG_PORT=9010\"\n      # Use this to enable verbose debugging on the proxy\n      # - \"ADDITIONAL_ARGS=-vv --debug\"\n    networks:\n      - backend\n\n  # This is your application containers, you need to link it to the proxy\n  app:\n    # The proxy need an access to the project files, to be able to do the path mapping\n    volumes:\n      - .:/data\n    links:\n      - debugproxy\n```\n\n**Options summary:**\n* `IDE_IP` The primary local W-/LAN IP of your machine where your IDE runs on\n* `IDE_PORT` The Port your IDE is listening for incoming xdebug connections. (The port the debug proxy will try to connect to)\n* `XDEBUG_PORT` The port on which xdebug will try to establish a connection (to this container)\n* `FRAMEWORK` Currently supported values: `flow` and `dummy`\n* `ADDITIONAL_ARGS` For any additional argument like verbosity flags (`-vv`) or debug mode (`--debug`) (or both)\n\n**Debugging the debugger**\n\nStart the debug proxy with verbose flags if it does not connect to your IDE.\nThe debug proxy does not quit after stopping the process that started it.\nYou have to kill it in the container manually.\n\nHint:\n\nIf you use the env variable `FLOW_PATH_TEMPORARY_BASE`, please be sure to keep\n`Data/Temporary` inside the path, without this the mapper will not detect the\nproxy classes.\n\n```\nFLOW_PATH_TEMPORARY_BASE=/tmp/flow/Data/Temporary\n```\n\nUsing with --framework dummy\n----------------------------\n\nIf your debugging target is the code generated by Flow's AOP Framework then you can start the debugging proxy with `--framework dummy`.\n\nIn that case it won't remap from the generated code to your source but \"pass through\" the debugger steps.\nTo see what's going on you have to have the generated code in a folder visible to your IDE (in your project).\nYou can either abstain from `FLOW_PATH_TEMPORARY_BASE` or set it to a path that is in your IDE's project.\n\nAcknowledgments\n---------------\n\nDevelopment sponsored by [ttree ltd - neos solution provider](http://ttree.ch).\n\nThis project is highly inspired by the PHP based Debug proxy:\nhttps://github.com/sandstorm/debugproxy thanks to the Sandstorm team. The goal\nof the Go version of the proxy is to solve the performance issue that the PHP\nversion has.\n\nWe try our best to craft this package with a lots of love, we are open to\nsponsoring, support request, ... just contact us.\n\nLicense\n-------\n\nLicensed under MIT, see [LICENSE](LICENSE)\n",
  "permissions": {
    "read": true,
    "write": false,
    "admin": false
  },
  "media_types": [
    "application/vnd.docker.container.image.v1+json"
  ],
  "content_types": [
    "image"
  ]
}