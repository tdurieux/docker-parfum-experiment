{
  "user": "dwisiswant0",
  "name": "apkleaks",
  "namespace": "dwisiswant0",
  "repository_type": "image",
  "status": 1,
  "status_description": "active",
  "description": "Scanning APK file for URIs, endpoints & secrets.",
  "is_private": false,
  "is_automated": false,
  "can_edit": false,
  "star_count": 1,
  "pull_count": 1119,
  "last_updated": "2021-08-09T13:19:59.93839Z",
  "date_registered": "2021-03-21T01:04:05.660726Z",
  "collaborator_count": 0,
  "affiliation": null,
  "hub_user": "dwisiswant0",
  "has_starred": false,
  "full_description": "# APKLeaks\n[![version](https://badge.fury.io/gh/dwisiswant0%2fapkleaks.svg)](https://badge.fury.io/gh/dwisiswant0%2fapkleaks.svg)\n[![contributions](https://img.shields.io/badge/contributions-welcome-brightgreen.svg?style=flat)](https://github.com/dwisiswant0/apkleaks/issues)\n\nScanning APK file for URIs, endpoints & secrets.\n\n<img src=\"https://user-images.githubusercontent.com/25837540/111927529-a4ade080-8ae3-11eb-800a-b764ab1242e1.jpg\" alt=\"APKLeaks\">\n\n- [Installation](#installation)\n  - [from Pypi](#from-pypi)\n  - [from Source](#from-source)\n  - [from Docker](#from-docker)\n- [Usage](#usage)\n  - [Options](#options)\n    - [Output](#output)\n    - [Pattern](#pattern)\n    - [Pattern](#pattern)\n    - [Arguments (disassembler)](#arguments-disassembler)\n- [License](#license)\n- [Acknowledments](#acknowledments)\n\n---\n\n## Installation\n\nIt's fairly simple to install **APKLeaks**:\n\n### from PyPi\n\n```bash\n$ pip3 install apkleaks\n```\n\n### from Source\n\nClone repository and install requirements:\n\n```bash\n$ git clone https://github.com/dwisiswant0/apkleaks\n$ cd apkleaks/\n$ pip3 install -r requirements.txt\n```\n\n### from Docker\n\nPull the Docker image by running:\n\n```bash\n$ docker pull dwisiswant0/apkleaks:latest\n```\n\n### Dependencies\n\nAPKLeaks using [jadx](https://github.com/skylot/jadx) disassembler to decompile APK file. If it doesn't exist in your environment, it'll ask you to download.\n\n## Usage\n\nSimply,\n\n```bash\n$ apkleaks -f ~/path/to/file.apk\n# from Source\n$ python3 apkleaks.py -f ~/path/to/file.apk\n# or with Docker\n$ docker run -it --rm -v /tmp:/tmp apkleaks:latest -f /tmp/file.apk\n```\n\n## Options\n\nHere are all the options it supports.\n\n| **Argument**  \t| **Description**                             \t| **Example**                                                   |\n|---------------\t|---------------------------------------------\t|-------------------------------------------------------------  |\n| -f, --file    \t| APK file to scanning                        \t| `apkleaks -f file.apk`                                        |\n| -o, --output  \t| Write to file results _(random if not set)_ \t| `apkleaks -f file.apk -o results.txt`                         |\n| -p, --pattern \t| Path to custom patterns JSON                \t| `apkleaks -f file.apk -p custom-rules.json`                   |\n| -a, --args    \t| Disassembler arguments                      \t| `apkleaks -f file.apk --args=\"--deobf --log-level DEBUG\"`     |\n| --json        \t| Save as JSON format                         \t| `apkleaks -f file.apk -o results.json --json`                 |\n\n### Output\n\nIn general, if you don't provide `-o` argument, then it will generate results file automatically.\n\n**NOTE:** By default it will also save the results in text format, use `--json` argument if you want JSON output format.\n\n### Pattern\n\nCustom patterns can be added with the following argument to provide sensitive _search rules_ in the JSON file format: `--pattern /path/to/custom-rules.json`. If not set, it'll use default patterns from [regexes.json](https://github.com/dwisiswant0/apkleaks/blob/master/config/regexes.json) file.\n\nExample patterns file:\n\n```json\n// custom-rules.json\n{\n  \"Amazon AWS Access Key ID\": \"AKIA[0-9A-Z]{16}\",\n  ...\n}\n```\n\n```\n$ apkleaks -f /path/to/file.apk -p rules.json -o ~/Documents/apkleaks-results.txt\n```\n\n### Arguments (disassembler)\n\nWe give user complete discretion to pass the disassembler arguments. For example, if you want to activate threads in `jadx` decompilation process, you can add it with `-a/--args` argument, example: `--args=\"--threads-count 5\"`.\n\n```\n$ apkleaks -f /path/to/file.apk -a \"--deobf --log-level DEBUG\"\n```\n\n**NOTE:** Please pay attention to the default disassembler arguments we use to prevent collisions.\n\n## License\n\n`apkleaks` is distributed under Apache 2.\n\n## Acknowledments\n\nSince this tool includes some contributions, and I'm not an asshole, I'll publically thank the following users for their helps and resources:\n\n- [@ndelphit](https://github.com/ndelphit) - for his inspiring `apkurlgrep`, that's why this tool was made.\n- [@dxa4481](https://github.com/dxa4481) and y'all who contribute to `truffleHogRegexes`.\n- [@GerbenJavado](https://github.com/GerbenJavado) & [@Bankde](https://github.com/Bankde) - for awesome pattern to discover URLs, endpoints & their parameters from `LinkFinder`.\n- [@tomnomnom](https://github.com/tomnomnom/gf) - a `gf` patterns.\n- [@pxb1988](https://github.com/pxb1988) - for awesome APK dissambler `dex2jar`.\n- [@subho007](https://github.com/ph4r05) for standalone APK parser.\n- `SHA2048#4361` _(Discord user)_ that help me porting code to Python3.\n- [@Ry0taK](https://github.com/Ry0taK) because he had reported an [OS command injection bug](https://github.com/dwisiswant0/apkleaks/security/advisories/GHSA-8434-v7xw-8m9x).\n- [All contributors](https://github.com/dwisiswant0/apkleaks/graphs/contributors).",
  "permissions": {
    "read": true,
    "write": false,
    "admin": false
  },
  "media_types": [
    "application/vnd.docker.container.image.v1+json"
  ],
  "content_types": [
    "image"
  ]
}