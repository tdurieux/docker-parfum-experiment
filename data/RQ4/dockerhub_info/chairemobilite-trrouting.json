{
  "user": "chairemobilite",
  "name": "trrouting",
  "namespace": "chairemobilite",
  "repository_type": "image",
  "status": 1,
  "status_description": "active",
  "description": "Transit routing server app written in C++ using the Connection Scan Algorithm",
  "is_private": false,
  "is_automated": false,
  "can_edit": false,
  "star_count": 0,
  "pull_count": 1632,
  "last_updated": "2022-12-21T19:30:56.918173Z",
  "date_registered": "2021-07-05T12:54:37.468394Z",
  "collaborator_count": 0,
  "affiliation": null,
  "hub_user": "greenscientist",
  "has_starred": false,
  "full_description": "# trRouting\nTransit routing server app written in C++ using the Connection Scan Algorithm including flexible parameters.\na\n## Performance\nWith random origin and destination (multiple accessible stops at origin and destination): ~150 ms for access and egress footpaths calculation, ~8 ms for CSA two-way calculation (tested with montreal area GTFS data including all urban and suburban transit agencies, with transfer footpaths between stops of 10 minutes walking or less) on a MacPro 2013 with single thread used (you can start multiple servers and execute parallel requests).\n\n## References\n[Connection Scan Algorithm (CSA)][1] (working version)  \n[Trib-Based Algorithm (TBA)][2] (not yet released)\n\n## API Documentation\n\nDocumentation of the trRouting API can be found here: \nhttps://chairemobilite.github.io/trRouting/\n\n## Dependencies\n[Open Source Routing Machine (OSRM)][3] (an osrm server with a walking profile must be running for the transit region while making queries to the trRouting server, see [OSRM profiles][5] for more profile info and [Running OSRM][6] to know how to prepare osm data for OSRM and start the server)\n\n[1]: http://i11www.iti.uni-karlsruhe.de/extra/publications/dpsw-isftr-13.pdf \"Intriguingly Simple and Fast Transit Routing\"\n[2]: https://arxiv.org/pdf/1504.07149v2.pdf \"Trip-Based Public Transit Routing\"\n[3]: https://github.com/Project-OSRM/osrm-backend/ \"Open Source Routing Machine Github Repository\"\n[4]: https://github.com/Project-OSRM/osrm-backend/wiki \"OSRM Wiki\"\n[5]: https://github.com/Project-OSRM/osrm-backend/blob/master/docs/profiles.md \"OSRM profiles\"\n[6]: https://github.com/Project-OSRM/osrm-backend/wiki/Running-OSRM \"Running OSRM\"\n\n## Mac OS X Install with homebrew\n```\nbrew install boost\nbrew install capnp\n```\n\n## Ubuntu 16.04 Install\n\n[Install Cap'nProto](https://capnproto.org/install.html)\n```\nsudo apt-get install clang libboost-all-dev libexpat1-dev libjsoncpp-dev libspdlog-dev\n```\n\n## Compilation\ntrRouting use autoconf/automake as its build system. A recap of the usual commands: \n\nIf you are running out of a git checkout: \n```\nautoreconf -i\n```\n\nThen: \n```\n./configure\nmake\n```\n\nOn ARM mac with boost installed by homebrew:\n```\nCPPFLAGS=-I/opt/homebrew/include/ ./configure --with-boost-libdir=\"/opt/homebrew/lib/\"\nmake\n```\n\n## Test\n\ntrRouting uses [Googletest](https://github.com/google/googletest) to unit test the application. To run the tests, you must first fetch the googletest submodule once into the repo:\n\n```\ngit submodule init\ngit submodule update\n```\n\nThen, to run the unit tests individually, simply run `make check`.\n\nIf you get the following error when running `make check`, that's because the submodule initiation and update was done after the compilation configuration. Simply run again `autoreconf -i && ./configure` and it should work.\n\n```\nMakefile:443: ../googletest/googletest/src/.deps/libgtest_la-gtest-all.Plo: No such file or directory\nmake[1]: *** No rule to make target '../googletest/googletest/src/.deps/libgtest_la-gtest-all.Plo'.  Stop.\n```\n\n### Benchmarks\n\nThis repo also contains benchmarks to run various calculations. The benchmarks are under the `tests/` along, with the unit tests. To automatically run them with the `make check` command, configure the repo by running `./configure --enable-benchmark`. Otherwise, benchmarks can be executed manually by running the executable in the benchmark directory.\n\nSee the README in the benchmark's directory for additional instructions to run them.\n\n## Docker\nA provided dockerfile allows to easily build an image\n\n### Build\n`docker build -t LOCAL_IMAGE_NAME .`\n\n### Running as a deamon\n`docker run -t LOCAL_IMAGE_NAME`\n\n\n[![FOSSA Status](https://app.fossa.io/api/projects/git%2Bgithub.com%2Fkaligrafy%2FtrRouting.svg?type=large)](https://app.fossa.io/projects/git%2Bgithub.com%2Fkaligrafy%2FtrRouting?ref=badge_large)\n",
  "permissions": {
    "read": true,
    "write": false,
    "admin": false
  },
  "media_types": [
    "application/vnd.docker.container.image.v1+json"
  ],
  "content_types": [
    "image"
  ]
}