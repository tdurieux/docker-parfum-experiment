{
  "user": "dellytools",
  "name": "delly",
  "namespace": "dellytools",
  "repository_type": "image",
  "status": 1,
  "status_description": "active",
  "description": "Delly: Structural variant discovery by integrated paired-end and split-read analysis.",
  "is_private": false,
  "is_automated": true,
  "can_edit": false,
  "star_count": 3,
  "pull_count": 19798,
  "last_updated": "2022-12-07T09:48:36.377896Z",
  "date_registered": "2016-11-10T10:31:01.372907Z",
  "collaborator_count": 0,
  "affiliation": null,
  "hub_user": "dellytools",
  "has_starred": false,
  "full_description": "<p align=\"center\">\n  <a href=\"https://academic.oup.com/bioinformatics/article/28/18/i333/245403/DELLY-structural-variant-discovery-by-integrated\">\n    <img height=\"150\" src=\"https://raw.githubusercontent.com/dellytools/assets/master/delly-logo/delly-logo-539x600.png\">\n  </a>\n  <h1 align=\"center\">Delly</h1>\n</p>\n\n[![install with bioconda](https://img.shields.io/badge/install%20with-bioconda-brightgreen.svg?style=flat-square)](http://bioconda.github.io/recipes/delly/README.html)\n[![Anaconda-Server Badge](https://anaconda.org/bioconda/delly/badges/downloads.svg)](https://anaconda.org/bioconda/delly)\n[![C/C++ CI](https://github.com/dellytools/delly/workflows/C/C++%20CI/badge.svg)](https://github.com/dellytools/delly/actions)\n[![Docker CI](https://github.com/dellytools/delly/workflows/Docker%20CI/badge.svg)](https://hub.docker.com/r/dellytools/delly/)\n[![GitHub license](https://img.shields.io/badge/License-BSD%203--Clause-blue.svg)](https://github.com/dellytools/delly/blob/master/LICENSE)\n[![GitHub Releases](https://img.shields.io/github/release/dellytools/delly.svg)](https://github.com/dellytools/delly/releases)\n\nDelly is an integrated structural variant (SV) prediction method that can discover, genotype and visualize deletions, tandem duplications, inversions and translocations at single-nucleotide resolution in short-read massively parallel sequencing data. It uses paired-ends, split-reads and read-depth to sensitively and accurately delineate genomic rearrangements throughout the genome. Structural variants can be visualized using [Delly-maze](https://github.com/dellytools/maze) and [Delly-suave](https://github.com/dellytools/suave).\n\n\nInstalling Delly\n----------------\n\nThe easiest way to get Delly is to download a statically linked binary or the singularity container (SIF file) from the [Delly github release page](https://github.com/dellytools/delly/releases/). Alternatively, you can download Delly from [Bioconda](https://anaconda.org/bioconda/delly). You can also build Delly from source using a recursive clone and make. \n\n`git clone --recursive https://github.com/dellytools/delly.git`\n\n`cd delly/`\n\n`make all`\n\nThere is a Delly discussion group [delly-users](http://groups.google.com/d/forum/delly-users) for usage and installation questions and a dockerized [delly](https://hub.docker.com/r/dellytools/delly/).\n\n\n\nDelly multi-threading mode\n--------------------------\nDelly supports parallel computing using the OpenMP API (www.openmp.org).\n\n`make PARALLEL=1 -B src/delly`\n\nYou can set the number of threads using the environment variable OMP_NUM_THREADS.\n\n`export OMP_NUM_THREADS=2`\n\nDelly primarily parallelizes on the sample level. Hence, OMP_NUM_THREADS should be always smaller or equal to the number of input samples. \n\n\nRunning Delly\n-------------\n\nDelly needs a sorted, indexed and duplicate marked bam file for every input sample. An indexed reference genome is required to identify split-reads. The output is in [BCF](http://samtools.github.io/bcftools/) format with a csi index. Delly supports germline and somatic SV discovery, genotyping and filtering. Because of that, Delly has been modularized and common workflows for germline and somatic SV calling are outlined below. If you do need VCF output you need a recent version of [BCFtools](http://samtools.github.io/bcftools/) for file conversion\n.\n\n`delly call -x hg19.excl -o delly.bcf -g hg19.fa input.bam`\n\n`bcftools view delly.bcf > delly.vcf`\n\n\nDelly for long reads from PacBio or ONT\n---------------------------------------\n\nDelly also has a long-read (lr) SV discovery mode.\n\n`delly lr -y ont -g hg19.fa -x hg19.excl input.bam`\n\n`delly lr -y pb -g hg19.fa -x hg19.excl input.bam`\n\n\nSomatic SV calling\n------------------\n\n* At least one tumor sample and a matched control sample are required for SV discovery\n\n`delly call -x hg19.excl -o t1.bcf -g hg19.fa tumor1.bam control1.bam`\n\n* Somatic pre-filtering requires a tab-delimited sample description file where the first column is the sample id (as in the VCF/BCF file) and the second column is either tumor or control.\n\n`delly filter -f somatic -o t1.pre.bcf -s samples.tsv t1.bcf`\n\n* Genotype pre-filtered somatic sites across a larger panel of control samples to efficiently filter false postives and germline SVs. For performance reasons, this can be run in parallel for each sample of the control panel and you may want to combine multiple pre-filtered somatic site lists from multiple tumor samples.\n\n`delly call -g hg19.fa -v t1.pre.bcf -o geno.bcf -x hg19.excl tumor1.bam control1.bam ... controlN.bam`\n\n* Post-filter for somatic SVs using all control samples.\n\n`delly filter -f somatic -o t1.somatic.bcf -s samples.tsv geno.bcf`\n\n\n\nGermline SV calling\n-------------------\n\n* SV calling is done by sample for high-coverage genomes or in small batches for low-coverage genomes\n\n`delly call -g hg19.fa -o s1.bcf -x hg19.excl sample1.bam`\n\n* Merge SV sites into a unified site list \n\n`delly merge -o sites.bcf s1.bcf s2.bcf ... sN.bcf`\n\n* Genotype this merged SV site list across all samples. This can be run in parallel for each sample.\n\n`delly call -g hg19.fa -v sites.bcf -o s1.geno.bcf -x hg19.excl s1.bam`\n\n`delly call -g hg19.fa -v sites.bcf -o sN.geno.bcf -x hg19.excl sN.bam`\n\n* Merge all genotyped samples to get a single VCF/BCF using bcftools merge\n\n`bcftools merge -m id -O b -o merged.bcf s1.geno.bcf s2.geno.bcf ... sN.geno.bcf`\n\n* Apply the germline SV filter which requires at least 20 unrelated samples\n\n`delly filter -f germline -o germline.bcf merged.bcf`\n\n\nRead-depth profiles\n-------------------\n\nYou can generate read-depth profiles with delly. This requires a mappability map which can be downloaded here:\n\n[Mappability Maps](https://gear.embl.de/data/delly/)\n\nThe command to count reads in 10kbp windows and normalize the coverage is:\n\n`delly rd -a -g hg19.fa -m hg19.map input.bam`\n\nThe output file can be plotted using R to generate normalized copy-number profiles:\n\n`Rscript R/rd.R out.cov.gz`\n\nThe GC bias can be visualized using the stats output.\n\n`delly rd -s stats.gz -g hg19.fa -m hg19.map input.bam`\n\n`zgrep \"^GC\" stats.gz  > gc.table`\n\n`Rscript R/gcbias.R gc.table`\n\n\nFAQ\n---\n* What is the smallest SV size Delly can call?  \nThis depends on the sharpness of the insert size distribution. For an insert size of 200-300bp with a 20-30bp standard deviation, Delly starts to call reliable SVs >=300bp. Delly also supports calling of small InDels using soft-clipped reads only, the smallest SV size called is 15bp.\n\n* Can Delly be used on a non-diploid genome?  \nYes and no. The SV site discovery works for any ploidy. However, Delly's genotyping model assumes diploidy (hom. reference, het. and hom. alternative).\n\n* Delly is running too slowly what can I do?    \nYou should exclude telomere and centromere regions and also all unplaced contigs. Delly ships with such an exclude list for human and mouse samples. In addition, you can filter input reads more stringently using -q 20 and -s 15.\n\n* Are non-unique alignments, multi-mappings and/or multiple split-read alignments allowed?  \nDelly expects two alignment records in the bam file for every paired-end, one for the first and one for the second read. Multiple split-read alignment records of a given read are allowed if and only if one of them is a primary alignment whereas all others are marked as secondary or supplementary (flag 0x0100 or flag 0x0800). This is the default for bwa mem.\n\n* What pre-processing of bam files is required?    \nBam files need to be sorted, indexed and ideally duplicate marked.\n\n* Usage/discussion mailing list?         \nThere is a delly discussion group [delly-users](http://groups.google.com/d/forum/delly-users).\n\n* Docker/Singularity support?            \nThere is a dockerized delly available [here](https://hub.docker.com/r/dellytools/delly/) and singularity containers (*.sif files) are part of the [delly release](https://github.com/dellytools/delly/releases).\n\n* Bioconda support?             \nDelly is available via [bioconda](http://bioconda.github.io/recipes/delly/README.html).\n\n\nCitation\n--------\n\nTobias Rausch, Thomas Zichner, Andreas Schlattl, Adrian M. Stuetz, Vladimir Benes, Jan O. Korbel.      \nDELLY: structural variant discovery by integrated paired-end and split-read analysis.     \nBioinformatics. 2012 Sep 15;28(18):i333-i339.       \n[https://doi.org/10.1093/bioinformatics/bts378](https://doi.org/10.1093/bioinformatics/bts378)\n\nLicense\n-------\nDelly is distributed under the BSD 3-Clause license. Consult the accompanying [LICENSE](https://github.com/dellytools/delly/blob/master/LICENSE) file for more details.\n",
  "permissions": {
    "read": true,
    "write": false,
    "admin": false
  },
  "media_types": [
    "application/vnd.docker.container.image.v1+json"
  ],
  "content_types": [
    "image"
  ]
}