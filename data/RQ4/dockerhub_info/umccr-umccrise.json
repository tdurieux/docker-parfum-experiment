{
  "user": "umccr",
  "name": "umccrise",
  "namespace": "umccr",
  "repository_type": "image",
  "status": 1,
  "status_description": "active",
  "description": "Bcbio results umccrisation",
  "is_private": false,
  "is_automated": true,
  "can_edit": false,
  "star_count": 0,
  "pull_count": 1215,
  "last_updated": "2020-07-16T11:59:54.020655Z",
  "date_registered": "2018-06-07T05:52:00.671639Z",
  "collaborator_count": 0,
  "affiliation": null,
  "hub_user": "umccr",
  "has_starred": false,
  "full_description": "UMCCRization of bcbio results: filter, normalise, generate plots and reports\n----------------------------------------------------------------------------\n\n[![Build Status](https://travis-ci.org/umccr/umccrise.svg?branch=master)](https://travis-ci.org/umccr/umccrise)\n\nUmccrise post-processess an output from [bcbio-nextgen](https://github.com/chapmanb/bcbio-nextgen) somatic variant calling pipeline for cancer samples:\n\n- Filters small somatic calls with [panel of normals](https://github.com/umccr/vcf_stuff#panel-of-normals)\n- Filters small germline calls with key genes\n- Runs [PCGR](https://github.com/sigven/pcgr) for somatic and germline variants\n- Generates an Rmd report with mutational signatures and strand bias analysis\n- QCs coverage for 300 key cancer genes\n- Filters CNV and plots a diagram\n- Filters SV and generates files to view in Ribbon\n- Generates mini-bams to view in IGV\n- Copies MultiQC reports and summaries from bcbio\n\nContents:\n\n- [Installation](#installation)\n- [Updating](#updating)\n- [Testing](#testing)\n- [Loading](#loading)\n- [Usage](#usage)\n    + [Run selected steps](#run-selected-steps)\n    + [Run on selected samples](#run-on-selected-samples)\n    + [Use HPC cluster](#use-hpc-cluster)\n- [Output explanation](#output-explanation)\n- [Version history](#version-history)\n\n\n## Installation\n\nClone the repository\n\n```\ngit clone https://github.com/umccr/umccrise\n```\n\nInstall conda\n\n```\nwget https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh -O miniconda.sh\nbash miniconda.sh -b -p ./miniconda && rm miniconda.sh\n. miniconda/etc/profile.d/conda.sh\n```\n\nInstall umccrise\n\n```\nconda env create -p $(pwd)/miniconda/envs/umccrise --file environment.yml\nconda activate $(pwd)/miniconda/envs/umccrise\npip install -e .\n```\n\nTo automate sourcing in the future, you can create a loader script\n\n```\ncat <<EOT > load_umccrise.sh\nSCRIPTPATH=\\$(readlink -e $(pwd))\n. \\$SCRIPTPATH/miniconda/etc/profile.d/conda.sh\nconda activate \\$SCRIPTPATH/miniconda/envs/umccrise\nEOT\n```\n\nInstall PCGR\n\n```bash\n# Clone the fork that is decoupled from Docker and install\ngit clone https://github.com/vladsaveliev/pcgr\nbash -x pcgr/install_no_docker/install.sh\n\n# Download the data bundles\npip install gdown\ngdown https://drive.google.com/uc?id=1cGBAmAh5t4miIeRrrd0zHsPCFToOr0Lf -O - | tar xvfz - # hg19\ngdown https://drive.google.com/uc?id=12q3rr7xpdBfaefRi0ysFHbH34kehNZOV -O - | tar xvfz - # hg38\n\n# (Optional) if you are running on AWS, upload the PCGR data bundles to S3 like this:\ngdown https://drive.google.com/uc?id=1cGBAmAh5t4miIeRrrd0zHsPCFToOr0Lf -O - | aws s3 cp - s3://umccr-umccrise-refdata-dev/Hsapiens/GRCh37/PCGR/pcgr.databundle.grch37.20180509.tgz\n\ngdown https://drive.google.com/uc?id=12q3rr7xpdBfaefRi0ysFHbH34kehNZOV -O - | aws s3 cp - s3://umccr-umccrise-refdata-dev/Hsapiens/hg38/PCGR/pcgr.databundle.grch38.20180509.tgz\n```\n\nInstall R circos scripts on top\n\n```\nR -e \"library(devtools) ; options(unzip = '/usr/bin/unzip') ; devtools::install_github('umccr/rock', ref = 'umccrise')\"\n```\n\n## Updating\n\n```\nsource load_umccrise.sh\ngit pull                                                             # if the code base changed\nconda env update -f environment.yml                                  # if dependencies changed\n./setup.py develop && source deactivate && source load_umccrise.sh   # if added/renamed packages or scripts\n```\n\n## Testing\n\nTests are stored in a separate repository https://github.com/umccr/umccrise_test_data\n\n```\nsource load_umccrise.sh\ngit clone https://github.com/umccr/umccrise_test_data\nnosetests -s umccrise_test_data/test.py -a normal\n```\n\n## Loading\n\n*Raijin:*\n\n```\nsource /g/data3/gx8/extras/umccrise/load_umccrise.sh\n```\n\n*Spartan:*\n\n```\nsource /data/cephfs/punim0010/extras/umccrise/load_umccrise.sh\n```\n\n## Usage\n\nRuns the patient analysis pipeline on bcbio-nextgen `final` folder.\n\n```\numccrise /path/to/bcbio/project/final -j 30  # run using 30 CPUs\n```\n\nThe output will be created in `umccrised` folder. To override, use `-o`:\n\n```\numccrise /path/to/bcbio/project/final -o umccrised_results\n```\n\n#### Run selected steps\n\nUmccrise workflow consists of the following steps: `pcgr`, `coverage`, `structural`, `small_variants`, `rmd`, `multiqc`, `copy_logs`, `igv`.\n\nTo run just a particular step (or steps), use:\n\n```\numccrise /path/to/bcbio/project/final <step_name>\n```\n\nWhere `<step_name>` is from the list above. E.g.:\n\n```\numccrise /path/to/bcbio/project/final pcgr\n```\n\nNote that the `igv` step (preparing minibams and uploading them to `s3://umccr-igv`) takes ~5 hours for a WGS sample compared to ~20 minutes for all other steps combined. For that reason, it is always executed in the end of the pipeline, so you can expect that when it is being executed, all other output is ready.\n\n#### Run on selected samples\n\nBy default, Umccrise will process all batches in the run in parallel. You can submit only certain samples/batchs using `--sample` or `--batch` arguments, e.g.:\n\n```\numccrise /path/to/bcbio/project/final --batch cup-batch\numccrise /path/to/bcbio/project/final --sample cup-tumor_1,cup-tumor_2\n```\n\nOr you might want to exclude certain samples/batches with `--exclude`:\n\n```\numccrise /path/to/bcbio/project/final --exclude cup-tumor_1,cup-batch_2\n```\n\n#### Use HPC cluster\n\nSet `--cluster-auto` option to submit jobs on HPC cluster. Supports Spartan for now.\n\n```\numccrise /path/to/bcbio/project/final -j 30 --cluster-auto\n```\n\nAlternatively, you can specify a custom submission template with `--cluster-cmd`, e.g.:\n\n```\numccrise /path/to/bcbio/project/final -j 30 --cluster-cmd \"sbatch -p vccc -n {threads} -t 24:00:00 --mem {resources.mem_mb} -J umccrise\"\n```\n\nMake sure to use `-j` outside of that template: this options tells snakemake how many cores is allowed to use at single moment.\n\n\n#### Custom reference data\n\nUmccrise recognizes Spartan and NCI environments. You can alternatively provide your own reference data:\n\n* `--ref-fasta` - path to reference fasta (e.g. /genomes/hg19.fa); .fai file should exist;\n\n* `--truth-regions` - path to GiaB truth regions;\n\n* `--bcbio-genomes` - alternatively you can specify the path to full bcbio genomes installation, \ne.g. ` --bcbio-genomes /bcbio/genomes` or ` --bcbio-genomes /bcbio/genomes/Hsapiens/hg38`;\n\n* `--pon` - panel of normals directory, should contain `panel_of_normals.snps.vcf.gz(.tbi)` and `panel_of_normals.indels.vcf.gz(.tbi)`\nwhich are built with `Snakefile.prep_normals` at https://github.com/umccr/vcf_stuff/tree/master/vcf_stuff/panel_of_normals\n\nExample:\n\n```\numccrise /path/to/bcbio/project/final \\\n    --bcbio-genomes tests/umccrise_test_data/data/genomes \\\n    --pon tests/umccrise_test_data/data/panel_of_normals\n```\n\n## Output explanation\n\n```\numccrised/\n    {batch}/                               # - Folder with a batch {batch} (tumor/normal pair) analysis\n        {batch}-{sample}-rmd_report.html   # - Rmd report with mutational signatures, AF frequencies,\n                                           #   structural variants, and strand bias plots\n        coverage/\n            {batch}-{sample}-indexcov/index.html  # - Plots by `goleft indexcov`\n            {batch}-{sample}-normal.callable.bed  # - Coverage for exons of 300 AstraZeneca key cancer genes,\n            {batch}-{sample}-tumor.callable.bed   #   calculated by `goleft depth`. The \"callable\" coverage\n            {batch}-{sample}-normal.depth.bed     #   thresholds: 10x for normal, 30x for tumor.\n            {batch}-{sample}-tumor.depth.bed      #       \n        igv/ \n            {batch}-{sample}-normal-mini.bam      # - Minibams, containing locations of AZ 300 cancer genes,\n            {batch}-{sample}-tumor-mini.bam       #   and areas around passed variants (SNV, indels, SV, CNV)\n        pcgr/\n            {batch}-{sample}-somatic.pcgr_acmg.html\n            {batch}-{sample}-normal.pcgr_acmg.html\n        snv/\n            {batch}-{sample}-somatic-ensemble-pon_softfiltered.vcf.gz  # - Somatic small variants (SNV and indels), soft- and\n            {batch}-{sample}-somatic-ensemble-pon_hardfiltered.vcf.gz  #   hard-filtered against the panel of normals\n            {batch}-{sample}-normal-ensemble-cancer_genes.vcf.gz       # - Germline small variants, subset to 106 cancer genes\n        structural/\n            {batch}-{sample}-sv-prioritize-manta-pass.bedpe       # - Prioritized Manta SV calls in differrent\n            {batch}-{sample}-sv-prioritize-manta-pass.ribbon.bed  #   formats (e.g. to view in Ribbon)\n            {batch}-{sample}-sv-prioritize-manta-pass.tsv         #\n            {batch}-{sample}-sv-prioritize-manta-pass.vcf         #\n            {batch}-{sample}-cnvkit-diagram.pdf                   # - Diagram of CNV called by CNVkit\n    log/\n        config/                            # - Copy of config folder from the original bcbio-nextgen run\n            {project-name}-template.yaml   #\n            {project-name}.csv             #\n            {project-name}.yaml            #\n        {project-name}-data_versions.csv   # - Copy of the bcbio-nextgen file with reference data versions\n        {project-name}-programs.txt        # - Copy of the bcbio-nextgen file with software versions\n    {project-name}-multiqc_report.html     # - Project-level MultiQC summary report: coverage stats and more\n```\n\n## Dockerized installation\n\nDownload conda\n\n```\nwget https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh -O miniconda.sh\nbash miniconda.sh -b -p ./miniconda && rm miniconda.sh\n. miniconda/etc/profile.d/conda.sh\n```\n\nCreate minimal environment\n\n```\nconda env create --file dev_extras/environment_wrapper.yml\nconda activate umccrise\npip install -e .\n```\n\nPull docker\n\n```\ndocker pull umccr/umccrise:latest\n```\n\nTesting\n\n```\ngit clone https://github.com/umccr/umccrise_test_data\nnosestests -s umccrise_test_data/test.py -a docker\n```\n\nUsage\n\n```\numccrise --docker \\\n    umccrise_test_data/data/bcbio_test_project \\\n    -o umccrise_test_data/results/dockerized \\\n    -j 2 \\\n    --bcbio-genomes umccrise_test_data/data/genomes \\\n    --pon umccrise_test_data/data/panel_of_normals\n```\n\n\n\n\n\n\n\n",
  "permissions": {
    "read": true,
    "write": false,
    "admin": false
  },
  "media_types": [
    "application/vnd.docker.container.image.v1+json"
  ],
  "content_types": [
    "image"
  ]
}