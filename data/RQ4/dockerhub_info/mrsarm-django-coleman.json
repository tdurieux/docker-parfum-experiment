{
  "user": "mrsarm",
  "name": "django-coleman",
  "namespace": "mrsarm",
  "repository_type": "image",
  "status": 1,
  "status_description": "active",
  "description": "Django Coleman",
  "is_private": false,
  "is_automated": false,
  "can_edit": false,
  "star_count": 0,
  "pull_count": 7,
  "last_updated": "2022-04-26T14:02:12.294913Z",
  "date_registered": "2022-03-12T19:59:09.771455Z",
  "collaborator_count": 0,
  "affiliation": null,
  "hub_user": "mrsarm",
  "has_starred": false,
  "full_description": "[Django Coleman](https://github.com/mrsarm/django-coleman): A very simple Task Management web app written with **Django Admin**.\n\n### Features\n\n* Simple task manager that allows to define a tasks with title,\n  partner (customer, provider...), description, responsible of the task, priority...\n* Each task may have items: sub-tasks to be done.\n* The built-in Django *Authentication and Authorization* system\n  to manage users and groups, login, etc.\n* Module [django-adminfilters](https://github.com/mrsarm/django-adminfilters)\n  that allows multiselection searches.\n* Send emails when a task is created.\n* Spanish translations.\n* Basic Rest API configuration (disabled by default, check the\n  ``INSTALLED_APPS`` setting).\n* Optionally, you can use Django Coleman along with\n  [Django Coleman Viewer](https://github.com/mrsarm/tornado-dcoleman-mtasks-viewer)\n  to allows users to follow the orders.\n* Pytest with some tests as example and code coverage reports configured.\n* Ready to use \"production\" configurations as reference.\n\n\n### Run\n\nYou have to run this image, a Postgres instance, and optionally the [tasks viewer](https://github.com/mrsarm/tornado-dcoleman-mtasks-viewer). The easiest way to run all at once is using Docker Compose. If you don't have checked out the source code with the `docker-compose.yml` file, you can just copy the compose file and the reference .env file in any place with:\n\n```console\n$ curl https://raw.githubusercontent.com/mrsarm/django-coleman/master/docker-compose.yml > docker-compose.yml\n$ curl https://raw.githubusercontent.com/mrsarm/django-coleman/master/.env.example > .env\n```\n\nIf you want to execute compose from the source code of the project, just remember to create the `.env` file from the `.env.example` file:\n\n```console\n$ cp .env.example .env\n```\n\nThen execute (only the first time):\n\n```console\n$ docker-compose pull\n```\n\nAnd after all the images were downloaded, each time you want to run the stack:\n\n```console\n$ docker-compose up\n```\n\nThe first time it runs some errors about the DB are shown, that's because you need to create the DB and the structure (tables, indexes), all can be created in another terminal executing:\n\n```console\n$ docker-compose run django-coleman-provision\n```\n\nEven a user ``admin`` with password ``admin1234`` is created.\n\nTo access the app, go to http://localhost:8000/admin , and use the user and password above to enter the admin.\n\nAfter create your first task in the Admin, to view it with the task viewer, if the id is `1` (likely), it can be viewed at http://localhost:8888/1?t=porgs .",
  "permissions": {
    "read": true,
    "write": false,
    "admin": false
  },
  "media_types": [
    "application/vnd.docker.container.image.v1+json"
  ],
  "content_types": [
    "image"
  ]
}