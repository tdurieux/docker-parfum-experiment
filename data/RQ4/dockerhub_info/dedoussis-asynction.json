{
  "user": "dedoussis",
  "name": "asynction",
  "namespace": "dedoussis",
  "repository_type": "image",
  "status": 1,
  "status_description": "active",
  "description": "Asynction is a Socket.IO python framework driven by the AsyncAPI specification",
  "is_private": false,
  "is_automated": false,
  "can_edit": false,
  "star_count": 0,
  "pull_count": 157,
  "last_updated": "2022-03-14T15:29:05.180798Z",
  "date_registered": "2021-09-16T17:52:01.992023Z",
  "collaborator_count": 0,
  "affiliation": null,
  "hub_user": "dedoussis",
  "has_starred": false,
  "full_description": "# Asynction\n\n[![Tests Status](https://github.com/dedoussis/asynction/workflows/tests/badge.svg)](https://github.com/dedoussis/asynction/actions/workflows/tests.yml) [![codecov](https://codecov.io/gh/dedoussis/asynction/branch/main/graph/badge.svg?token=3720QP2994)](https://codecov.io/gh/dedoussis/asynction) [![PyPI version](https://img.shields.io/pypi/v/asynction)](https://pypi.org/project/asynction/)\n\nSocketIO python framework driven by the [AsyncAPI](https://www.asyncapi.com/) specification. Built on top of [Flask-SocketIO](https://github.com/miguelgrinberg/Flask-SocketIO). Inspired by [Connexion](https://github.com/zalando/connexion).\n\nThe purpose of Asynction is to empower a specification first approach when developing [SocketIO](https://socket.io/) APIs in Python. It guarantees that your API will work in accordance with its documentation.\n\n_Disclaimer: Asynction is still at a beta stage. Extensive testing is recommended when using this library in production._\n\n## Features\n\n- Registers all event and error handlers that are referenced within the API specification.\n- Provides out of the box validation on every Socket.IO interraction. In particular:\n  - Event validation (for both ingress and egress events), based on the specified message schemata\n  - HTTP request validation, upon connection, based on the channel binding schemata of each namespace\n  - Callback validation, upon the ACK of a message, based on the message `x-ack` schemata\n- Generates HTML rendered docs, similar to the AsyncAPI [playground](https://playground.asyncapi.io/?load=https://raw.githubusercontent.com/asyncapi/asyncapi/master/examples/2.0.0/simple.yml). The docs get served through the `GET {base_path}/docs` route of the app.\n- [Mock server support](#mock-server)\n- [CLI](#cli)\n- Authentication Ã  la [Connexion](https://connexion.readthedocs.io/en/latest/security.html) _(coming soon)_\n\nA complete example can be found [here](example/) (includes examples of both normal and mock server implementations).\n\n## Prerequisites\n\n- Python 3.7 (or higher)\n\n## Install\n\n```console\n$ pip install asynction\n```\n\nWith mock server support:\n\n```console\n$ pip install asynction[mock]\n```\n\nWith CLI support:\n\n```console\n$ pip install asynction[cli]\n```\n\nThe CLI can also be installed via Homebrew:\n\n```console\n$ brew tap dedoussis/tap\n$ brew install asynction\n```\n\n## Usage (basic example)\n\nExample event and error handler callables located at `./my_api/handlers.py`:\n\n```python\n# /user namespace\n\ndef user_sign_up(data):\n    logger.info(\"Signing up user...\")\n    emit(\"metrics\", \"signup\", namespace=\"/admin\", broadcast=True, callback=cb)\n\ndef user_log_in(data):\n    logger.info(\"Logging in user...\")\n    emit(\"metrics\", \"login\", namespace=\"/admin\", broadcast=True, callback=cb)\n    return True  # Ack\n\ndef user_error(e):\n    logger.error(\"Error: %s\", e)\n\n\n# /admin namespace\n\ndef authenticated_connect():\n    token = request.args[\"token\"]\n\ndef admin_error(e):\n    logger.error(\"Admin error: %s\", e)\n```\n\nExample specification located at `./docs/asyncapi.yaml`:\n\n```yaml\nasyncapi: 2.1.0\n\ninfo:\n  title: User Account Service\n  version: 1.0.0\n  description: This service is in charge of processing user accounts\n\nservers:\n  production:\n    url: my-company.com/api/socket.io # Customizes the `path` kwarg that is fed into the `SocketIO` constructor\n    protocol: wss\n\nchannels:\n  /user: # A channel is essentially a SocketIO namespace\n    publish:\n      message:\n        oneOf: # The oneOf Messages relationship expresses the supported events that a client may emit under the `/user` namespace\n          - $ref: \"#/components/messages/UserSignUp\"\n          - $ref: \"#/components/messages/UserLogIn\"\n    x-handlers: # Default namespace handlers (such as connect, disconnect and error)\n      error: my_api.handlers.user_error # Equivelant of: `@socketio.on_error(\"/user\")`\n  /admin:\n    subscribe:\n      message:\n        oneOf:\n          - \"#/components/messages/Metrics\"\n    x-handlers:\n      connect: my_api.handlers.authenticated_connect # Equivelant of: `@socketio.on(\"connect\", namespace=\"/admin\")`\n      error: my_api.handlers.admin_error\n    bindings: # Bindings are used to validate the HTTP request upon connection\n      $ref: \"#/components/channelBindings/AuthenticatedWsBindings\"\n\ncomponents:\n  messages:\n    UserSignUp:\n      name: sign up # The SocketIO event name. Use `message` or `json` for unnamed events.\n      payload: # Asynction uses payload JSON Schemata for message validation\n        type: object\n      x-handler: my_api.handlers.user_sign_up # The handler that is to be registered. Equivelant of: `@socketio.on(\"sign up\", namespace=\"/user\")`\n    UserLogIn:\n      name: log in\n      payload:\n        type: object\n      x-handler: my_api.handlers.user_log_in\n      x-ack: # Specifies the structure of the ACK data that the client should expect\n        args:\n          type: boolean\n    Metrics:\n      name: metrics\n      payload:\n        type: string\n        enum: [signup, login]\n      x-ack: # Specifies the structure of the ACK data that the server expects\n        args:\n          type: string\n\n  channelBindings:\n    AuthenticatedWsBindings:\n      ws:\n        query:\n          type: object\n          properties:\n            token:\n              type: string\n          required: [token]\n```\n\nBootstrap the AsynctionSocketIO server:\n\n```python\nfrom asynction import AsynctionSocketIO\nfrom flask import Flask\n\nflask_app = Flask(__name__)\n\nasio = AsynctionSocketIO.from_spec(\n    spec_path=\"./docs/asyncapi.yaml\",\n    app=flask_app,\n    message_queue=\"redis://localhost:6379\",\n    # or any other kwarg that the flask_socketio.SocketIO constructor accepts\n)\n\nif __name__ == \"__main__\":\n    asio.run(app=flask_app)\n```\n\nThe `AsynctionSocketIO` class extends the `SocketIO` class of the Flask-SocketIO library.  \nThe above `asio` server object has all the event and error handlers registered, and is ready to run.  \nValidation of the message payloads, the channel bindings and the ack callbacks is also enabled by default.  \nWithout Asynction, one would need to add additional boilerplate to register the handlers (as shown [here](https://flask-socketio.readthedocs.io/en/latest/#error-handling)) and implement the respective validators.\n\n## Docs\n\nAPI documentation is autogenerated by Asynction and served through the following routes of the app:\n\n- `{base_path}/docs`: Rendered HTML docs similar to the AsyncAPI [playground](https://playground.asyncapi.io/?load=https://raw.githubusercontent.com/asyncapi/asyncapi/master/examples/2.0.0/simple.yml).\n- `{base_path}/docs/asyncapi.json`: The raw specification data exposed for programmatic retrieval.\n\nThe `base_path` is determined automagically through the Socket.IO path argument. It essentially is the parent of that path. For example:\n\n| Socket.IO path        | Base path | Docs path      |\n| --------------------- | --------- | -------------- |\n| `socket.io` (default) | `/`       | `/docs`        |\n| `events/socket.io`    | `/events` | `/events/docs` |\n\nDocs can be disabled by toggling the `docs` kwarg of the `AsynctionSocketIO.from_spec` factory method.\n\n##  Mock server\n\nAsynction can also create a fake \"mock\" based off an AsyncAPI document. This enables the consumers of a SocketIO API to interract with the API before it's even built.\n\n```python\nfrom asynction import MockAsynctionSocketIO\nfrom flask import Flask\n\nflask_app = Flask(__name__)\n\nmock_asio = MockAsynctionSocketIO.from_spec(\n    spec_path=\"./docs/asyncapi.yaml\",\n    app=flask_app,\n)\n\nif __name__ == \"__main__\":\n    mock_asio.run(app=flask_app)\n```\n\nThe mock server:\n\n1. Listens for all events defined in the given spec, returning fake acknowledgements where applicable.\n1. Periodically emits events containing payloads of fake data, for the clients to listen on.\n\nThe fake data generation is fueled by [Faker](https://faker.readthedocs.io/en/master/) and [Hypothesis](https://hypothesis.readthedocs.io/en/latest/), hence the use of the mock server functionality requires the installation of extra dependecies: `pip install asynction[mock]`\n\nTo make the fake generated data more realistic, one may attach faker providers to the string schemata of their spec using the [format](https://json-schema.org/understanding-json-schema/reference/string.html#format) keyword of JSON Schema:\n\n```yaml\n# example of a Message object\nNewMessageReceived:\n  name: new message\n  payload:\n    type: object\n    properties:\n      username:\n        type: string\n        format: first_name\n      message:\n        type: string\n        format: sentence\n    required: [username, message]\n```\n\nThe formats supported are essentially all the [faker providers](https://faker.readthedocs.io/en/master/providers.html) that yield a string value.\n\n## CLI\n\nFor convenience, Asynction provides a command-line interface (CLI) that aims to be a toolbox of useful utilities for the development, testing and mocking of Asynction apps (ie any Socket.IO app driven by an AsyncAPI doc). For example, it allows one to run a \"mock\" instance of their Socket.IO server, only by passing the AsyncAPI YAML file, without even having to start the development of the server itself.\n\nAll commands support the `â-help` (or `-h`) argument to display additional information.\n\n### Available commands\n\n- `mock run`\n\n  ```console\n  $ asynction --spec ./docs/asyncapi.yml mock run --port 5001 --debugger\n  * Restarting with stat\n  * Debugger is active!\n  * Debugger PIN: 339-844-897\n  (71320) wsgi starting up on http://0.0.0.0:5001\n  ...\n  ```\n\n- `scaffold` _(coming soon)_\n\n  ```console\n  $ asynction --spec ./docs/asyncapi.yml scaffold\n  â¨ Successfully generated app.py\n  ```\n\n### Dockerised\n\nThe CLI can be installed via pip or Homebrew (see the [install section](#install)) but is also available through docker, negating the need for a local python environment:\n\n```console\n$ docker run -v ${PWD}/docs/asyncapi.yml:/opt/asynction/asyncapi.yml dedoussis/asynction mock run --debugger\n * Restarting with stat\n * Debugger is active!\n * Debugger PIN: 339-844-897\n(71320) wsgi starting up on http://0.0.0.0:5000\n...\n```\n\n## Further resources\n\n- [API reference](https://asynction.dedouss.is)\n- [Complete example](example/)\n\n## Specification Extentions\n\nAsynction has extended the AsyncAPI 2.x.x specification to provide support for coupling SocketIO semantical entities (such as namespaces, events and acks) to python objects (such as handler callabes or other `flask_socketio.SocketIO` methods). Some of the extentions below are necessary to express the Socket.IO protocol semantics, while others are solely needed for the programmatic purposes of Asynction. The extentions introduced adhere to the [Specification Extention guidelines](https://www.asyncapi.com/docs/specifications/2.0.0#specificationExtensions) of the AsyncAPI spec.\n\nFor further guidance on how to generally express a SocketIO API using AsyncAPI, refer to this article: <https://dedouss.is/posts/2021-07-14-documenting-socketio-part-2.html>\n\n### Event handler\n\nThe `x-handler` field MAY be defined as an additional property of the [Message Object](https://www.asyncapi.com/docs/specifications/2.0.0#messageObject). The value of this field MUST be of `string` type, expressing a dot joint path to a python callable (the event handler).\n\nMessage Objects listed under a `subscribe` [operation](https://www.asyncapi.com/docs/specifications/2.0.0#operationObject) MUST include the `x-handler` field.  \nMessage Objects listed under a `publish` [operation](https://www.asyncapi.com/docs/specifications/2.0.0#operationObject) SHOULD NOT include the `x-handler` field.\n\n### Default namespace handlers\n\nThe `x-handlers` field MAY be defined as an additional property of the [Channel Item Object](https://www.asyncapi.com/docs/specifications/2.0.0#channelItemObject). The value of this field SHOULD be a [Channel Handlers Object](#channel-handlers-object).\n\n#### Channel Handlers Object\n\n| Field Name | Type     | Description                                              |\n| ---------- | -------- | -------------------------------------------------------- |\n| connect    | `string` | Dot joint path to the python connect handler callable    |\n| disconnect | `string` | Dot joint path to the python disconnect handler callable |\n| error      | `string` | Dot joint path to the python error handler callable      |\n\n### ACK packet\n\nThe basic unit of information in the [Socket.IO protocol](https://github.com/socketio/socket.io-protocol) is the packet. There are 7 distinct [packet types](https://github.com/socketio/socket.io-protocol#packet-types). The `publish` and `subscribe` [Message Object](https://www.asyncapi.com/docs/specifications/2.0.0#messageObject)s expressed in the A2S YAML above correspond to the [EVENT](https://github.com/socketio/socket.io-protocol#2---event) and [BINARY_EVENT](https://github.com/socketio/socket.io-protocol#5---binary_event) packet types. These are essentially the packets that are transmitted when the Socket.IO sender invokes the `emit` or `send` API functions of the Socket.IO library (regardless of implementation). In turn, the Socket.IO event receiver handles the received event using the `on` API function of the Socket.IO library. As part of the `on` handler, the receiver may choose to return an acknowledgement of the received message. This acknowledgement is conveyed back to the transmitter via the [ACK](https://github.com/socketio/socket.io-protocol#3---ack) and [BINARY_ACK](https://github.com/socketio/socket.io-protocol#5---binary_event) packet types. This ack data is passed as input into the callback that the message transmitter has provided through the `emit`/`send` invocation.\n\nIn order to express the above acknowledgement semantics, the A2S specification needs to be extended as follows:\n\n- [Message Object](https://www.asyncapi.com/docs/specifications/2.0.0#messageObject)s MAY include the `x-ack` field. The value of this field SHOULD be a [Message Ack Object](#message-ack-object).\n- [Components Object](https://www.asyncapi.com/docs/specifications/2.0.0#componentsObject) MAY include the `x-messageAcks` field. The value of this field should be of type: `Map[string, Message Ack Object | Reference Object]`\n\nAlthough Asynction uses these fields to validate the input args of the callback functions, these ACK extentions are necessary to express semantics of the [Socket.IO protocol](https://github.com/socketio/socket.io-protocol), regardless of any tooling used for automation / code generation.\n\n#### Message Ack Object\n\n| Field Name | Type                                                                             | Description                                                                                                                                                              |\n| ---------- | -------------------------------------------------------------------------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------ |\n| args       | [Schema Object](https://www.asyncapi.com/docs/specifications/2.0.0#schemaObject) | Schema of the arguments that are passed as input to the acknowledgement callback function. In the case of multiple arguments, use the `array` type to express the tuple. |\n\nIn the future, the Message Ack Object may be extended with extra fields to enable additional documentation of the callback.\n",
  "permissions": {
    "read": true,
    "write": false,
    "admin": false
  },
  "media_types": [
    "application/vnd.docker.container.image.v1+json"
  ],
  "content_types": [
    "image"
  ]
}