{
  "user": "troglobit",
  "name": "inadyn",
  "namespace": "troglobit",
  "repository_type": "image",
  "status": 1,
  "status_description": "active",
  "description": "Alpine based docker image of the latest release of In-a-Dyn",
  "is_private": false,
  "is_automated": false,
  "can_edit": false,
  "star_count": 5,
  "pull_count": 272088,
  "last_updated": "2023-01-05T13:50:41.587273Z",
  "date_registered": "2020-02-22T16:52:44.038299Z",
  "collaborator_count": 0,
  "affiliation": null,
  "hub_user": "troglobit",
  "has_starred": false,
  "full_description": "Internet Automated Dynamic DNS Client\n=====================================\n[![License Badge][]][License] [![Travis Status][]][Travis] [![Coverity Status][]][Coverity Scan]\n\nThe latest release is always available from GitHub at  \n> https://github.com/troglobit/inadyn/releases\n\n\nTable of Contents\n-----------------\n\n* [Introduction](#introduction)\n* [Supported Providers](#supported-providers)\n* [Configuration](#configuration)\n* [Custom DDNS Providers](#custom-ddns-providers)\n* [Build & Install](#build--install)\n* [Building from GIT](#building-from-git)\n* [Origin & References](#origin--references)\n\n\nIntroduction\n------------\n\nInadyn, or In-a-Dyn, is a small and simple Dynamic DNS, [DDNS][], client\nwith HTTPS support.  Commonly available in many GNU/Linux distributions,\nused in off the shelf routers and Internet gateways to automate the task\nof keeping your Internet name in sync with your public¹ IP address.  It\ncan also be used in installations with redundant (backup) connections to\nthe Internet.\n\nMost people are unaware they share a pool of Internet addresses with\nother users of the same Internet Service Provider (ISP).  Protocols like\nDHCP, PPPoE, or PPPoA are used to give you an address and a way to\nconnect to the Internet, but usually not a way for others to connect to\nyou.  If you want to run an Internet server on such a connection you\nrisk losing your IP address every time you reconnect, or as in the case\nof DHCP even when the lease is renegotiated.\n\nBy using a DDNS client like `inadyn` you can register an Internet name\nwith a DDNS provider, like [FreeDNS](http://freedns.afraid.org).  The\nDDNS client updates your DNS record periodically and/or on demand when\nyour IP address changes.  Inadyn can maintain multiple host records with\nthe same IP address, use a combination of a script, the address from an\nInternet-facing interface, or default to using the IP address change\ndetector of the DDNS provider.\n\n__  \n¹ Public IP address is the default, private addresses can also be used.\n\n\nSupported Providers\n-------------------\n\nSome of these services are free of charge for non-commercial use, some\ntake a small fee, but also provide more domains to choose from:\n\n   * <https://freedns.afraid.org>\n   * <https://www.nsupdate.info>\n   * <https://duckdns.org>\n   * <https://freemyip.com>\n   * <https://www.loopia.com>\n   * <https://www.dyndns.org>, <https://dyn.com>\n   * <https://www.noip.com>\n   * <https://www.easydns.com>\n   * <https://www.dnsomatic.com>\n   * <https://dns.he.net>\n   * <https://www.tunnelbroker.net>\n   * <https://www.sitelutions.com>\n   * <https://www.dnsexit.com>, parent of <https://www.zoneedit.com>\n   * <https://www.changeip.com>\n   * <https://www.dhis.org>\n   * <https://www.namecheap.com>\n   * <https://domains.google>\n   * <https://www.ovh.com>\n   * <https://giradns.com>\n   * <https://www.duiadns.net>\n   * <https://ddnss.de>\n   * <https://dynv6.com>\n   * <https://spdyn.de>\n   * <https://www.cloudxns.net>\n   * <https://www.pubyun.com>, formerly <http://www.3322.org>\n   * <https://www.dnspod.cn>\n   * <https://www.dynu.com>\n   * <https://www.selfhost.de>\n   * <https://connect.yandex.ru>\n   * <https://www.cloudflare.com>\n\nDDNS providers not supported natively like <http://twoDNS.de>, can be\nenabled using the generic DDNS plugin.  See below for configuration\nexamples.\n\nIn-A-Dyn defaults to HTTPS, but not all providers may support this, so\ntry disabling SSL for the update (`ssl = false`) or the checkip phase\n(`checkip-ssl = false`) in the `provider` section, in case you run into\nproblems.\n\n*HTTPS is enabled by default* since it protects your credentials from\nbeing snooped and reduces the risk of someone hijacking your account.\n\n\nConfiguration\n-------------\n\nIn-A-Dyn supports updating several DDNS servers, several accounts even on\ndifferent DDNS providers.  The following `/etc/inadyn.conf` example show\nhow this can be done.  To verify your configuration, without starting the\ndaemon, use:\n\n    inadyn --check-config\n\nThis looks for the default `.conf` file, to check any file, use:\n\n    inadyn --check-config -f /path/to/file.conf\n\n### Example\n\n    # In-A-Dyn v2.0 configuration file format\n    period          = 300\n    user-agent      = Mozilla/5.0\n\n    # The FreeDNS username must be in lower case\n    # The password (max 16 chars) is case sensitive\n    provider freedns {\n        username    = lower-case-username\n        password    = case-sensitive-pwd\n        hostname    = some.example.com\n    }\n\n    provider freemyip {\n        password    = YOUR_TOKEN\n        hostname    = YOUR_DOMAIN.freemyip.com\n    }\n\n    provider dyn {\n        ssl         = false\n        username    = charlie\n        password    = snoopy\n        hostname    = { peanuts, woodstock }\n\tuser-agent  = Mozilla/4.0\n    }\n\n    # Google Domains - notice use of '@' to update root entry\n    provider domains.google.com {\n        hostname = @.mydomain.com\n        username = your_username\n        password = your_password\n    }\n\n    provider duckdns.org {\n        username         = YOUR_TOKEN\n        password         = noPasswordForDuckdns\n        hostname         = YOUR_DOMAIN.duckdns.org\n    }\n\n    # With multiple usernames at the same provider, index with :#\n    provider no-ip.com:1 {\n        username    = ian\n        password    = secret\n        hostname    = flemming.no-ip.com\n\t\tuser-agent  = inadyn/2.2\n\t}\n\n    # With multiple usernames at the same provider, index with :#\n    provider no-ip.com:2 {\n        username       = james\n        password       = bond\n        hostname       = spectre.no-ip.com\n\t\tcheckip-ssl    = false\n        checkip-server = api.ipify.org\n    }\n\n    # With multiple usernames at the same provider, index with :#\n    provider no-ip.com:3 {\n        username        = spaceman\n        password        = bowie\n        hostname        = spaceman.no-ip.com\n        checkip-command = \"/sbin/ifconfig eth0 | grep 'inet6 addr'\"\n    }\n\n    # Note: hostname == update-key from Advanced tab in the Web UI\n    provider tunnelbroker.net {\n        username    = futurekid\n        password    = dreoadsad/+dsad21321    # update-key-in-advanced-tab\n        hostname    = 1234534245321           # tunnel-id\n\t}\n\n    provider dynv6.com {\n        username = your_token\n        password = n/a\n        hostname = { host1.dynv6.net, host2.dynv6.net }\n    }\n\n    provider cloudxns.net {\n        username = your_api_key\n        password = your_secret_key\n        hostname = yourhost.example.com\n    }\n\n    provider dnspod.cn {\n         username = your_api_id\n         password = your_api_token\n         hostname = yourhost.example.com\n    }\n\n    provider cloudflare.com {\n        username = zone.name\n        password = api_token # Create a unique custom api token with the following permissions: Zone.Zone - Read, Zone.DNS - Edit.\n        hostname = hostname.zone.name\n        ttl = 1 # optional, value of 1 is 'automatic'.\n        proxied = false # optional.\n    }\n\nNotice how the config has three different users of the No-IP provider --\nthis is achieved by appending a `:ID` to the provider name.\n\nWe also define a custom cache directory, default is to use `/var/cache`.\nIn our case `/mnt` is a system specific persistent store for caching\nyour IP address as reported to each provider.  Inadyn use this to ensure\nyou are not locked out of your account for excessive updates, which may\nhappen if your device Internet gateway running inadyn gets stuck in a\nreboot loop, or similar.\n\nHowever, for the caching mechanism to be 100% foolproof the system clock\nmust be set correctly -- if you have issues with the system clock not\nbeing set properly at boot, e.g. pending receipt of an NTP message, use\nthe command line option `--startup-delay=SEC`.  To tell `inadyn` it is\nOK to proceed before the `SEC` timeout, use `SIGUSR2`.\n\nThe last system defined is the IPv6 <https://tunnelbroker.net> service\nprovided by Hurricane Electric.  Here `hostname` is set to the tunnel ID\nand password **must** be the *Update key* found in the *Advanced*\nconfiguration tab.\n\nSometimes the default `checkip-server` for a DDNS provider can be very\nslow to respond, to this end Inadyn now supports overriding this server\nwith a custom one, like for custom DDNS provider, or even a custom\ncommand.  See the man pages, or the below section, for more information.\n\nSome providers require using a specific browser to send updates, this\ncan be worked around using the `user-agent = STRING` setting, as shown\nabove.  It is available both on a global and on a per-provider level.\n\n**NOTE:** In a multi-user server setup, make sure to chmod your `.conf`\n  to 600 (read-write only by you/root) to protect against other users\n  reading your DDNS server credentials.\n\n\nCustom DDNS Providers\n---------------------\n\nIn addition to the default DDNS providers supported by Inadyn, custom\nDDNS providers can be defined in the config file.  Use `custom {}` in\ninstead of the `provider {}` section used in examples above.\n\nIn-A-Dyn use HTTP basic authentication (base64 encoded) to communicate\nusername and password to the server.  If you do not have a username\nand/or password, you can leave these fields out.  Basic authentication,\nwill still be used in communication with the server, but with empty\nusername and password.\n\nA DDNS provider like <http://twoDNS.de> can be setup like this:\n\n    custom twoDNS {\n        username       = myuser\n        password       = mypass\n        checkip-server = checkip.two-dns.de\n        checkip-path   = /\n        ddns-server    = update.twodns.de\n        ddns-path      = \"/update?hostname=\"\n        hostname       = myhostname.dd-dns.de\n\t}\n\nFor <https://www.namecheap.com> DDNS can look as follows.  Notice how\nthe hostname syntax differs between these two DDNS providers.  You need\nto investigate details like this yourself when using the generic/custom\nDDNS plugin:\n\n    custom namecheap {\n        username    = myuser\n        password    = mypass\n        ddns-server = dynamicdns.park-your-domain.com\n        ddns-path   = \"/update?domain=YOURDOMAIN.TLD&password=mypass&host=\"\n        hostname    = { \"alpha\", \"beta\", \"gamma\" }\n\t}\n\nHere three hostnames are updated, one HTTP GET update request for every\nDDNS provider is performed, for every listed hostname.  Some providers,\nlike FreeDNS, support setting up CNAME records (aliases) to reduce the\namount of records you need to update.  FreeDNS even default to linking\nmultiple records to the same update, which may be very confusing if you\nwant each DNS record to be updated from a unique IP address -- make sure\nto *check your settings at the DDNS provider*!\n\nYour hostname is automatically appended to the end of the `ddns-path`,\nas is customary, before it is communicated to the server.  Username is\nyour Namecheap username, and password would be the one given to you in\nthe Dynamic DNS panel from Namecheap.  Here is an alternative config to\nillustrate how the `hostname` setting works:\n\n    custom kruskakli {\n        username    = myuser\n        password    = mypass\n        ddns-server = dynamicdns.park-your-domain.com\n        ddns-path   = \"/update?password=mypass&domain=\"\n        hostname    = YOURDOMAIN.TLD\n\t}\n\nThe generic plugin can also be used with providers that require the\nclient's new IP address in the update request.  Here is an example of\nhow this can be done if we *pretend* that <http://dyn.com> is not\nsupported by inadyn.  The `ddns-path` differs between providers and is\nsomething you must figure out.  The support pages sometimes list this\nunder an API section, or similar.\n\n    # This emulates dyndns.org\n    custom dyn {\n        username    = DYNUSERNAME\n        password    = DYNPASSWORD\n        ddns-server = members.dyndns.org\n        ddns-path   = \"/nic/update?hostname=%h.dyndns.org&myip=%i\"\n        hostname    = { YOURHOST, alias }\n\t}\n\nHere a fully custom `ddns-path` with format specifiers are used, see the\n`inadyn.conf(5)` man page for details on this.\n\nWhen using the generic plugin you should first inspect the response from\nthe DDNS provider.  By default Inadyn looks for a `200 HTTP` response OK\ncode and the strings `\"good\"`, `\"OK\"`, `\"true\"`, or `\"updated\"` in the\nHTTP response body.  If the DDNS provider returns something else you can\nadd a list of possible `ddns-response = { Arrr, kilroy }`, or just a\nsingle `ddns-response = Cool` -- if your provider does give any response\nthen use `ddns-response = \"\"`.\n\nIf your DDNS provider does not provide you with a `checkip-server`, you\ncan use other services, like http://ipify.org, which is the default if\nyou do not specify one for your custom provider config:\n\n    checkip-server = api.ipify.org\n\nor even use a script or command:\n\n    checkip-command = /sbin/ifconfig eth0 | grep 'inet addr'\n\nThese two settings can also be used in standard `provider{}` sections.\n\n**Note:** `hostname` is required, even if everything is encoded in the\n`ddns-path`!  The given hostname is appended to the `ddns-path` used for\nupdates, unless you use `append-myip` in which case your IP address will\nbe appended instead.  When using `append-myip` you probably need to\nencode your DNS hostname in the `ddns-path` instead, as is done in the\nlast example above.\n\n\nBuild & Install\n---------------\n\n### Debian/Ubuntu\n\n    curl -sS https://deb.troglobit.com/pubkey.gpg | sudo apt-key add -\n    echo \"deb [arch=amd64] https://deb.troglobit.com/debian stable main\" | sudo tee /etc/apt/sources.list.d/troglobit.list\n    sudo apt-get update && sudo apt-get install inadyn\n\n### Docker\n\nAutomatically built images available here:\n\n* https://hub.docker.com/r/troglobit/inadyn\n\nA Dockerfile is provided to simplify building and running `inadyn`.\n\n    docker build -t inadyn:latest .\n    docker run --rm -v \"$PWD/inadyn.conf:/etc/inadyn.conf\" inadyn:latest\n\n### Homebrew (macOS)\n\nTo run the latest stable version on macOS, type:\n\n    brew install inadyn\n\nTo run the latest version from the master branch, install the git tap instead:\n\n    brew install --HEAD troglobit/inadyn/inadyn\n\nEither of these will install all dependencies.\n\n### Building from Source\n\nFirst download the latest official In-A-Dyn release from GitHub:\n\n* https://github.com/troglobit/inadyn/releases\n\nIn-A-Dyn requires a few libraries to build.  The build system searches\nfor them, in their required versions, using the `pkg-config` tool:\n\n* [libConfuse][] (3.0+)\n* [LibreSSL][], [OpenSSL][], or [GnuTLS][]\n\nThey are available from most UNIX distributions as pre-built packages.\nMake sure to install the `-dev` or `-devel` package of the distribution\npackages when building Inadyn.  On Debian/Ubuntu (derivatives):\n\n    $ sudo apt install gnutls-dev libconfuse-dev\n\nTo build you also need a C compiler, the `pkg-config` tool, and make:\n\n    $ sudo apt install build-essential pkg-config\n\nWhen building with HTTPS (SSL/TLS) support, make sure to also install\nthe `ca-certificates` package on your system, otherwise Inadyn will not\nbe able to validate the DDNS provider's HTTPS certificates.\n\n### Configure & Build\n\nThe GNU Configure & Build system use `/usr/local` as the default install\nprefix.  In many cases this is useful, but this means the configuration\nfiles and cache files will also use that same prefix.  Most users have\ncome to expect those files in `/etc/` and `/var/run/` and configure has\na few useful options that are recommended to use:\n\n    $ ./configure --prefix=/usr --sysconfdir=/etc --localstatedir=/var\n    $ make -j5\n    $ sudo make install-strip\n\nYou may want to remove the `--prefix=/usr` option.\n\n### SSL/TLS Support\n\nBy default inadyn tries to build with GnuTLS for HTTPS support.  GnuTLS\nis the recommended SSL library to use on UNIX distributions which do not\nprovide OpenSSL/LibreSSL as a system library.  However, when OpenSSL or\nLibreSSL is available as a system library, for example in many embedded\nsystems:\n\n    ./configure --enable-openssl\n\nTo completely disable inadyn HTTPS support (not recommended!):\n\n    ./configure --disable-ssl\n\nFor more details on the OpenSSL and GNU GPL license issue, see:\n\n* <https://lists.debian.org/debian-legal/2004/05/msg00595.html>\n* <https://people.gnome.org/~markmc/openssl-and-the-gpl>\n\n### RedHat, Fedora, CentOS\n\nOn some systems the default configure installation path, `/usr/local`,\nis disabled and not searched by tools like `ldconfig` and `pkg-config`.\nSo if configure fails to find the libConfuse libraries, or the `.pc`\nfiles, create the file `/etc/ld.so.conf.d/local.conf` with this content:\n\n    /usr/local/lib\n\nupdate the linker cache:\n\n    sudo ldconfig -v |egrep libconfuse\n\nand run the Inadyn configure script like this:\n\n    PKG_CONFIG_PATH=/usr/local/lib/pkgconfig ./configure\n\n### Integration with systemd\n\nFor systemd integration you need to install `pkg-config`, which helps\nthe Inadyn build system figure out the systemd paths.  When installed\nsimply call `systemctl` to enable and start `inadyn`:\n\n    $ sudo systemctl enable inadyn.service\n    $ sudo systemctl start  inadyn.service\n\nCheck that it started properly by inspecting the system log, or:\n\n    $ sudo systemctl status inadyn.service\n\n\nBuilding from GIT\n-----------------\n\nIf you want to contribute, or simply just try out the latest but\nunreleased features, then you need to know a few things about the\n[GNU build system][buildsystem]:\n\n- `configure.ac` and a per-directory `Makefile.am` are key files\n- `configure` and `Makefile.in` are generated from `autogen.sh`,\n  they are not stored in GIT but automatically generated for the\n  release tarballs\n- `Makefile` is generated by `configure` script\n\nTo build from GIT; clone the repository and run the `autogen.sh` script.\nThis requires the GNU tools `automake`, `autoconf` and `libtool` to be\ninstalled on your system.  Released tarballs do not require these tools.\n\n    $ sudo apt install git automake autoconf\n\nThen you can clone the repository and create the `configure` script,\nwhich is not part of the GIT repo:\n\n    git clone https://github.com/troglobit/inadyn.git\n    cd inadyn/\n    ./autogen.sh\n    ./configure && make\n\nBuilding from GIT requires, at least, the previously mentioned library\ndependencies.  GIT sources are a moving target and are not recommended\nfor production systems, unless you know what you are doing!\n\n\nOrigin & References\n-------------------\n\nThis is the continuation of Narcis Ilisei's [original][] INADYN.  Now\nmaintained by [Joachim Nilsson][].  Please file bug reports, or send\npull requests for bug fixes and proposed extensions at [GitHub][].\n\n[original]:         http://www.inatech.eu/inadyn/\n[DDNS]:             http://en.wikipedia.org/wiki/Dynamic_DNS\n[tunnelbroker]:     https://tunnelbroker.net/\n[Christian Eyrich]: http://eyrich-net.org/programmiertes.html\n[Joachim Nilsson]:  http://troglobit.com\n[libConfuse]:       https://github.com/martinh/libconfuse\n[LibreSSL]:         http://www.libressl.org/\n[OpenSSL]:          https://www.openssl.org/\n[GnuTLS]:           http://www.gnutls.org/\n[GitHub]:           https://github.com/troglobit/inadyn\n[buildsystem]:      https://airs.com/ian/configure/\n[License]:          https://www.gnu.org/licenses/old-licenses/gpl-2.0.en.html\n[License Badge]:    https://img.shields.io/badge/License-GPL%20v2-blue.svg\n[Travis]:           https://travis-ci.org/troglobit/inadyn\n[Travis Status]:    https://travis-ci.org/troglobit/inadyn.png?branch=master\n[Coverity Scan]:    https://scan.coverity.com/projects/2981\n[Coverity Status]:  https://scan.coverity.com/projects/2981/badge.svg\n",
  "permissions": {
    "read": true,
    "write": false,
    "admin": false
  },
  "media_types": [
    "application/vnd.docker.container.image.v1+json",
    "application/vnd.docker.distribution.manifest.list.v2+json"
  ],
  "content_types": [
    "image"
  ]
}