{
  "user": "v1k0d3n",
  "name": "gantry",
  "namespace": "v1k0d3n",
  "repository_type": "image",
  "status": 1,
  "status_description": "active",
  "description": "a containerized kubeadm project",
  "is_private": false,
  "is_automated": true,
  "can_edit": false,
  "star_count": 1,
  "pull_count": 311,
  "last_updated": "2018-04-05T00:30:08.69969Z",
  "date_registered": "2018-03-17T23:49:03.63524Z",
  "collaborator_count": 0,
  "affiliation": null,
  "hub_user": "v1k0d3n",
  "has_starred": false,
  "full_description": "[![Build Status](http://jenkins.jinkit.com:8080/buildStatus/icon?job=gantry)](http://jenkins.jinkit.com:8080/job/gantry/)<br>\n[![Docker Repository on Quay](https://quay.io/repository/v1k0d3n/gantry/status \"Docker Repository on Quay\")](https://quay.io/repository/v1k0d3n/gantry)\n\n# Gantry: a containerized kubeadm project\nA container that bootstraps Kubernetes using Kubeadm (containerized).\n\n**WARNING: THIS REPO IS A WIP** <br>\nThis is just a working start, but not how the project will be used as an end state. The plan is to put all logic in the `gantry` initially, to determine distro (for required mounts and placement), state (bootstrap, clean, etc), and potentially considerations for some common plugins or options (Helm, IPVS, etc).\n\n## Basic Usage:\nIf you want to try this as its in early stages, you can use the container like this:\n\n1. Builds the container like below. You can leverage `--build-args` to customize your image. \n```shell\ngit clone https://github.com/v1k0d3n/gantry.git\ncd gantry \nexport KUBE_VERSION=v1.9.6\nsudo docker build --build-arg VERSION_KUBEADM=${KUBE_VERSION} --build-arg VERSION_KUBECTL=${KUBE_VERSION} --build-arg VERSION_KUBELET=${KUBE_VERSION} -t gantry:${KUBE_VERSION} .\n```\n\n2. Then start the container with the following parameters (this is likely to change as the project is being tested): <br>\n**NOTE:** for `$(pwd)` in the line `-v $(pwd)/etc/kubeadm:/kubeadm/etc/kubeadm`, this should be the location of your kubeadm `MasterConfiguration` yaml manifest. The `docker run` command in the example below assumes that you are in the `gantry` project folder.\n```shell\nsudo rm -rf /opt/kubeadm\nsudo docker run -it \\\n   --privileged \\\n   --net=host \\\n   -v /etc/cni:/etc/cni \\\n   -v /var/lib/etcd:/var/lib/etcd \\\n   -v /etc/kubernetes:/etc/kubernetes \\\n   -v /usr/libexec/kubernetes:/usr/libexec/kubernetes \\\n   -v /var/lib/kubelet:/var/lib/kubelet \\\n   -v /usr/bin/systemctl:/usr/bin/systemctl \\\n   -v /etc/systemd/system:/etc/systemd/system \\\n   -v /var/run/docker.sock:/var/run/docker.sock \\\n   -v /lib/modules:/lib/modules \\\n   -v /var/run:/var/run \\\n   -v /usr/bin:/usr/bin \\\n   -v /boot:/boot \\\n   -v /opt:/opt \\\n   -v $(pwd)/etc/kubeadm:/kubeadm/etc/kubeadm \\\n   gantry:${KUBE_VERSION} gantry -d ubuntu -i --config /kubeadm/etc/kubeadm/config.yaml\n```\nContainer images of Gantry are available on both [DockerHub](https://hub.docker.com/r/v1k0d3n/gantry/tags/) and [Quay](https://quay.io/repository/v1k0d3n/gantry?tab=tags).\n\n**NOTE:** The intention of Gantry is to declaratively bootstrap a Kubernetes cluster using a custom Kubeadm `MasterConfiguration` file. The Gantry image includes a [sample config](https://github.com/v1k0d3n/gantry/blob/master/etc/kubeadm/config.yaml), but we recommend reading the documentation for bootstrapping [kubeadm with configuration file](https://kubernetes.io/docs/reference/setup-tools/kubeadm/kubeadm-init/#config-file).\n\n3. You can destroy a previously bootstrapped cluster by using `gantry -r`. Please refer to the `--help` menu for any questions on how to use the Gantry image.\n\n4. After bootstrapping a cluster with Gantry/Kubeadm, you will still need to configure `kubectl` and apply an SDN manifest:\n```shell\n# Configure kubectl:\nmkdir -p $HOME/.kube\nyes | sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config\nsudo chown $(id -u):$(id -g) $HOME/.kube/config\n\n# If testing:\nkubectl taint nodes --all node-role.kubernetes.io/master-\n\n# Apply SDN (Calico example):\nkubectl apply -f https://gist.githubusercontent.com/v1k0d3n/aa318f52399f5ebdd6043dd615ae07b4/raw/ed583598170d67bc8c6c91dc523ce100482958eb/networking-calico.yaml\n```\n\n## Preparation:\nDocker should be the only requirement to run the `gantry` image, since the intention is to also run on immutable distros such as Atomic and Container Linux. If you have a new or default installation (currently Ubuntu Xenial: 16.04), you can use the preparation script to install Docker.\n\n**Ubuntu:** For Ubuntu systems (where this will be deployed), run the following from the main `gantry` directory to prepare the host (install Docker).\n```shell\n./bin/distro/ubuntu/start\n```\n\n**Red Hat:** Install git first, `sudo yum install -y git`, and then you can use the following (similar to Ubuntu).\n```shell\n./bin/distro/centos/start\n```\n\n\n## Alternative Methods:\nIf you don't want to use Gantry to bootstrap your cluster, you can still use the Gantry image to distribute Kubernetes binaries ([kubeadm](https://kubernetes.io/docs/setup/independent/create-cluster-kubeadm/), [kubectl](https://kubernetes.io/docs/tasks/tools/install-kubectl/), and [kubelet](https://kubernetes.io/docs/reference/generated/kubelet/)). All of the binaries are being downloaded directly from [Kubernetes releases](https://storage.googleapis.com/kubernetes-release/) and they are located in `/kubeadm/bin/`. A Gantry image will be created for each Kubernetes release. Simply copy them directly to your host, and use them for your specific setup.\n\n```shell\nubuntu@gantry-test:~$ sudo docker ps -a\nCONTAINER ID        IMAGE               COMMAND             CREATED             STATUS                      PORTS               NAMES\n97a68d1dd91b        gantry:v1.10.0      \"gantry -h\"         24 minutes ago      Exited (0) 2  minutes ago                       reverent_mccarthy\nubuntu@gantry-test:~$ docker cp 97a68d1dd91b:/kubeadm/bin/kubeadm ~\nubuntu@gantry-test:~$ ls -asl ~/kubeadm\n152804 -rwxr-xr-x 1 ubuntu ubuntu 156467952 Mar 31 04:28 /home/ubuntu/kubeadm\nubuntu@gantry-test:~$\n``` \n\n## Future State:\nI would really like to get to a future-state that [Jessie Frazelle](https://github.com/jessfraz/) is promoting on her [blog](https://blog.jessfraz.com/) which [builds images securely](https://blog.jessfraz.com/post/building-container-images-securely-on-kubernetes/). We can try to improve the need to run full `--privileged` flags in the meantime. This isn't desired, but is easiest for now.\n\n## Contributing, Comments, Questions\nComments, suggestions and PR's are welcome!\n",
  "permissions": {
    "read": true,
    "write": false,
    "admin": false
  },
  "media_types": [
    "application/vnd.docker.container.image.v1+json"
  ],
  "content_types": [
    "image"
  ]
}