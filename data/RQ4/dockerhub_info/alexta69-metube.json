{
  "user": "alexta69",
  "name": "metube",
  "namespace": "alexta69",
  "repository_type": "image",
  "status": 1,
  "status_description": "active",
  "description": "youtube-dl web GUI",
  "is_private": false,
  "is_automated": false,
  "can_edit": false,
  "star_count": 44,
  "pull_count": 2579774,
  "last_updated": "2023-01-03T01:08:54.349966Z",
  "date_registered": "2019-12-03T21:31:49.898754Z",
  "collaborator_count": 0,
  "affiliation": null,
  "hub_user": "alexta69",
  "has_starred": false,
  "full_description": "# MeTube\r\n\r\n![Build Status](https://github.com/alexta69/metube/actions/workflows/main.yml/badge.svg)\r\n![Docker Pulls](https://img.shields.io/docker/pulls/alexta69/metube.svg)\r\n\r\nWeb GUI for youtube-dl (using the [yt-dlp](https://github.com/yt-dlp/yt-dlp) fork) with playlist support. Allows you to download videos from YouTube and dozens of other sites (https://github.com/yt-dlp/yt-dlp/blob/master/supportedsites.md).\r\n\r\n![screenshot1](https://github.com/alexta69/metube/raw/master/screenshot.gif)\r\n\r\n## Run using Docker\r\n\r\n```bash\r\ndocker run -d -p 8081:8081 -v /path/to/downloads:/downloads alexta69/metube\r\n```\r\n## Run using docker-compose\r\n\r\n```yaml\r\nversion: \"3\"\r\nservices:\r\n  metube:\r\n    image: alexta69/metube\r\n    container_name: metube\r\n    restart: unless-stopped\r\n    ports:\r\n      - \"8081:8081\"\r\n    volumes:\r\n      - /path/to/downloads:/downloads\r\n```\r\n\r\n## Configuration via environment variables\r\n\r\nCertain values can be set via environment variables, using the `-e` parameter on the docker command line, or the `environment:` section in docker-compose.\r\n\r\n* __UID__: user under which MeTube will run. Defaults to `1000`.\r\n* __GID__: group under which MeTube will run. Defaults to `1000`.\r\n* __UMASK__: umask value used by MeTube. Defaults to `022`.\r\n* __DOWNLOAD_DIR__: path to where the downloads will be saved. Defaults to `/downloads` in the docker image, and `.` otherwise.\r\n* __AUDIO_DOWNLOAD_DIR__: path to where audio-only downloads will be saved, if you wish to separate them from the video downloads. Defaults to the value of `DOWNLOAD_DIR`.\r\n* __CUSTOM_DIRS__: whether to enable downloading videos into custom directories within the __DOWNLOAD_DIR__ (or __AUDIO_DOWNLOAD_DIR__). When enabled, a drop-down appears next to the Add button to specify the download directory. Defaults to `true`.\r\n* __CREATE_CUSTOM_DIRS__: whether to support automatically creating directories within the __DOWNLOAD_DIR__ (or __AUDIO_DOWNLOAD_DIR__) if they do not exist. When enabled, the download directory selector becomes supports free-text input, and the specified directory will be created recursively. Defaults to `false`.\r\n* __STATE_DIR__: path to where the queue persistence files will be saved. Defaults to `/downloads/.metube` in the docker image, and `.` otherwise.\r\n* __URL_PREFIX__: base path for the web server (for use when hosting behind a reverse proxy). Defaults to `/`.\r\n* __OUTPUT_TEMPLATE__: the template for the filenames of the downloaded videos, formatted according to [this spec](https://github.com/yt-dlp/yt-dlp/blob/master/README.md#output-template). Defaults to `%(title)s.%(ext)s`.\r\n* __OUTPUT_TEMPLATE_CHAPTER__: the template for the filenames of the downloaded videos, when split into chapters via postprocessors. Defaults to `%(title)s - %(section_number)s %(section_title)s.%(ext)s`.\r\n* __YTDL_OPTIONS__: Additional options to pass to youtube-dl, in JSON format. [See available options here](https://github.com/yt-dlp/yt-dlp/blob/master/yt_dlp/YoutubeDL.py#L183). They roughly correspond to command-line options, though some do not have exact equivalents here, for example `--recode-video` has to be specified via `postprocessors`. Also note that dashes are replaced with underscores.\r\n\r\nThe following example value for `YTDL_OPTIONS` embeds English subtitles and chapter markers (for videos that have them), and also changes the permissions on the downloaded video:\r\n```\r\n{\"writesubtitles\": true, \"subtitleslangs\": [\"en\", \"-live_chat\"], \"postprocessors\": [{\"key\": \"Exec\", \"exec_cmd\": \"chmod 0664\", \"when\": \"after_move\"}, {\"key\": \"FFmpegEmbedSubtitle\", \"already_have_subtitle\": false}, {\"key\": \"FFmpegMetadata\", \"add_chapters\": true}]}\r\n```\r\n\r\n## Using browser cookies\r\nIn case you need to use your browser's cookies with MeTube, for example to download restricted or private videos:\r\n\r\n* Add the following to your docker-compose.yml:\r\n\r\n```yaml\r\n    volumes:\r\n      - /path/to/cookies:/cookies\r\n    environment:\r\n      - YTDL_OPTIONS={\"cookiefile\":\"/cookies/cookies.txt\"}\r\n```\r\n* Install in your browser an extension to extract cookies:\r\n    * [Firefox](https://addons.mozilla.org/en-US/firefox/addon/export-cookies-txt/)\r\n    * [Chrome](https://chrome.google.com/webstore/detail/get-cookiestxt/bgaddhkoddajcdgocldbbfleckgcbcid) \r\n* Extract the cookies you need with the extension and rename the file `cookies.txt`\r\n* Drop the file in the folder you configured in the docker-compose.yml above\r\n* Restart the container\r\n\r\n## Browser extensions\r\n\r\nBrowser extensions allow right-clicking videos and sending them directly to MeTube. Please note that if you're on an HTTPS page, your MeTube instance must be behind an HTTPS reverse proxy (see below) for the extensions to work.\r\n\r\n__Chrome:__ contributed by [Rpsl](https://github.com/rpsl). You can install it from [Google Chrome Webstore](https://chrome.google.com/webstore/detail/metube-downloader/fbmkmdnlhacefjljljlbhkodfmfkijdh) or use developer mode and install [from sources](https://github.com/Rpsl/metube-browser-extension).\r\n\r\n__Firefox:__ contributed by [nanocortex](https://github.com/nanocortex). You can install it from [Firefox Addons](https://addons.mozilla.org/en-US/firefox/addon/metube-downloader) or get sources from [here](https://github.com/nanocortex/metube-firefox-addon).\r\n\r\n## Bookmarklet\r\n\r\n[kushfest](https://github.com/kushfest) has created a Chrome bookmarklet for sending the currently open webpage to MeTube. Please note that if you're on an HTTPS page, your MeTube instance must be behind an HTTPS reverse proxy (see below) for the bookmarklet to work.\r\n\r\nGitHub doesn't allow embedding JavaScript as a link, so the bookmarklet has to be created manually by copying the following code to a new bookmark you create on your bookmarks bar. Change the hostname in the URL below to point to your MeTube instance.\r\n\r\n```javascript\r\njavascript:!function(){xhr=new XMLHttpRequest();xhr.open(\"POST\",\"https://metube.domain.com/add\");xhr.send(JSON.stringify({\"url\":document.location.href,\"quality\":\"best\"}));xhr.onload=function(){if(xhr.status==200){alert(\"Sent to metube!\")}else{alert(\"Send to metube failed. Check the javascript console for clues.\")}}}();\r\n```\r\n\r\n[shoonya75](https://github.com/shoonya75) has contributed a Firefox version:\r\n```javascript\r\njavascript:(function(){xhr=new XMLHttpRequest();xhr.open(\"POST\",\"https://metube.domain.com/add\");xhr.send(JSON.stringify({\"url\":document.location.href,\"quality\":\"best\"}));xhr.onload=function(){if(xhr.status==200){alert(\"Sent to metube!\")}else{alert(\"Send to metube failed. Check the javascript console for clues.\")}}})();\r\n```\r\n\r\nThe above bookmarklets use `alert()` as a success/failure notification. The following will show a toast message instead:\r\n\r\nChrome:\r\n\r\n```javascript\r\njavascript:!function(){function notify(msg) {var sc = document.scrollingElement.scrollTop; var text = document.createElement('span');text.innerHTML=msg;var ts = text.style;ts.all = 'revert';ts.color = '#000';ts.fontFamily = 'Verdana, sans-serif';ts.fontSize = '15px';ts.backgroundColor = 'white';ts.padding = '15px';ts.border = '1px solid gainsboro';ts.boxShadow = '3px 3px 10px';ts.zIndex = '100';document.body.appendChild(text);ts.position = 'absolute'; ts.top = 50 + sc + 'px'; ts.left = (window.innerWidth / 2)-(text.offsetWidth / 2) + 'px'; setTimeout(function () { text.style.visibility = \"hidden\"; }, 1500);}xhr=new XMLHttpRequest();xhr.open(\"POST\",\"https://metube.domain.com/add\");xhr.send(JSON.stringify({\"url\":document.location.href,\"quality\":\"best\"}));xhr.onload=function() { if(xhr.status==200){notify(\"Sent to metube!\")}else {notify(\"Send to metube failed. Check the javascript console for clues.\")}}}();\r\n```\r\n\r\nFirefox:\r\n\r\n```javascript\r\njavascript:(function(){function notify(msg) {var sc = document.scrollingElement.scrollTop; var text = document.createElement('span');text.innerHTML=msg;var ts = text.style;ts.all = 'revert';ts.color = '#000';ts.fontFamily = 'Verdana, sans-serif';ts.fontSize = '15px';ts.backgroundColor = 'white';ts.padding = '15px';ts.border = '1px solid gainsboro';ts.boxShadow = '3px 3px 10px';ts.zIndex = '100';document.body.appendChild(text);ts.position = 'absolute'; ts.top = 50 + sc + 'px'; ts.left = (window.innerWidth / 2)-(text.offsetWidth / 2) + 'px'; setTimeout(function () { text.style.visibility = \"hidden\"; }, 1500);}xhr=new XMLHttpRequest();xhr.open(\"POST\",\"https://metube.domain.com/add\");xhr.send(JSON.stringify({\"url\":document.location.href,\"quality\":\"best\"}));xhr.onload=function() { if(xhr.status==200){notify(\"Sent to metube!\")}else {notify(\"Send to metube failed. Check the javascript console for clues.\")}}})();\r\n```\r\n\r\n## Running behind a reverse proxy\r\n\r\nIt's advisable to run MeTube behind a reverse proxy, if authentication and/or HTTPS support are required.\r\n\r\nWhen running behind a reverse proxy which remaps the URL (i.e. serves MeTube under a subdirectory and not under root), don't forget to set the URL_PREFIX environment variable to the correct value.\r\n\r\nIf you're using the [linuxserver/swag](https://docs.linuxserver.io/general/swag) image for your reverse proxying needs (which I can heartily recommend), it already includes ready snippets for proxying MeTube both in [subfolder](https://github.com/linuxserver/reverse-proxy-confs/blob/master/metube.subfolder.conf.sample) and [subdomain](https://github.com/linuxserver/reverse-proxy-confs/blob/master/metube.subdomain.conf.sample) modes under the `nginx/proxy-confs` directory in the configuration volume. It also includes Authelia which can be used for authentication.\r\n\r\n### NGINX\r\n\r\n```nginx\r\nlocation /metube/ {\r\n        proxy_pass http://metube:8081;\r\n        proxy_http_version 1.1;\r\n        proxy_set_header Upgrade $http_upgrade;\r\n        proxy_set_header Connection \"upgrade\";\r\n        proxy_set_header Host $host;\r\n}\r\n```\r\n\r\nNote: the extra `proxy_set_header` directives are there to make WebSocket work.\r\n\r\n### Apache\r\n\r\nContributed by [PIE-yt](https://github.com/PIE-yt). Source [here](https://gist.github.com/PIE-yt/29e7116588379032427f5bd446b2cac4).\r\n\r\n```apache\r\n# For putting in your Apache sites site.conf\r\n# Serves MeTube under a /metube/ subdir (http://yourdomain.com/metube/)\r\n<Location /metube/>\r\n    ProxyPass http://localhost:8081/ retry=0 timeout=30\r\n    ProxyPassReverse http://localhost:8081/\r\n</Location>\r\n\r\n<Location /metube/socket.io>\r\n    RewriteEngine On\r\n    RewriteCond %{QUERY_STRING} transport=websocket    [NC]\r\n    RewriteRule /(.*) ws://localhost:8081/socket.io/$1 [P,L]\r\n    ProxyPass http://localhost:8081/socket.io retry=0 timeout=30\r\n    ProxyPassReverse http://localhost:8081/socket.io\r\n</Location>\r\n```\r\n\r\n### Caddy\r\n\r\nThe following example Caddyfile gets a reverse proxy going behind [caddy](https://caddyserver.com).\r\n\r\n```caddyfile\r\nexample.com {\r\n  route /metube/* {\r\n    uri strip_prefix metube\r\n    reverse_proxy metube:8081\r\n  }\r\n}\r\n```\r\n\r\n## Updating yt-dlp\r\n\r\nThe engine which powers the actual video downloads in MeTube is [yt-dlp](https://github.com/yt-dlp/yt-dlp). Since video sites regularly change their layouts, frequent updates of yt-dlp are required to keep up.\r\n\r\nThere's an automatic nightly build of MeTube which looks for a new version of yt-dlp, and if one exists, the build pulls it and publishes an updated docker image. Therefore, in order to keep up with the changes, it's recommended that you update your MeTube container regularly with the latest image.\r\n\r\nI recommend installing and setting up [watchtower](https://github.com/containrrr/watchtower) for this purpose.\r\n\r\n## Troubleshooting and submitting issues\r\n\r\nBefore asking a question or submitting an issue for MeTube, please remember that MeTube is only a UI for [yt-dlp](https://github.com/yt-dlp/yt-dlp). Any issues you might be experiencing with authentication to video websites, postprocessing, permissions, other `YTDL_OPTIONS` configurations which seem not to work, or anything else that concerns the workings of the underlying yt-dlp library, need not be opened on the MeTube project. In order to debug and troubleshoot them, it's advised to try using the yt-dlp binary directly first, bypassing the UI, and once that is working, importing the options that worked for you into `YTDL_OPTIONS`.\r\n\r\nIn order to test with the yt-dlp command directly, you can either download it and run it locally, or for a better simulation of its actual conditions, you can run it within the MeTube container itself. Assuming your MeTube container is called `metube`, run the following on your Docker host to get a shell inside the container:\r\n\r\n```bash\r\ndocker exec -ti metube sh\r\ncd /downloads\r\n```\r\n\r\nOnce there, you can use the yt-dlp command freely.\r\n\r\n## Building and running locally\r\n\r\nMake sure you have node.js and Python 3.8 installed.\r\n\r\n```bash\r\ncd metube/ui\r\n# install Angular and build the UI\r\nnpm install\r\nnode_modules/.bin/ng build\r\n# install python dependencies\r\ncd ..\r\npip3 install pipenv\r\npipenv install\r\n# run\r\npipenv run python3 app/main.py\r\n```\r\n\r\nA Docker image can be built locally (it will build the UI too):\r\n\r\n```bash\r\ndocker build -t metube .\r\n```\r\n\r\n## Development notes\r\n\r\n* The above works on Windows and macOS as well as Linux.\r\n* If you're running the server in VSCode, your downloads will go to your user's Downloads folder (this is configured via the environment in .vscode/launch.json).\r\n",
  "permissions": {
    "read": true,
    "write": false,
    "admin": false
  },
  "media_types": [
    "application/vnd.docker.distribution.manifest.list.v2+json"
  ],
  "content_types": [
    "image"
  ]
}