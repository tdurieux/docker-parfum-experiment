{
  "user": "internap",
  "name": "netman",
  "namespace": "internap",
  "repository_type": "image",
  "status": 1,
  "status_description": "active",
  "description": " Netman is a unified REST API that provides vendor-agnostic network automation.",
  "is_private": false,
  "is_automated": false,
  "can_edit": false,
  "star_count": 0,
  "pull_count": 63,
  "last_updated": "2022-09-02T15:14:28.7376Z",
  "date_registered": "2019-01-16T15:01:56.228425Z",
  "collaborator_count": 0,
  "affiliation": null,
  "hub_user": "internap",
  "has_starred": false,
  "full_description": "[![Build Status](https://travis-ci.org/internap/netman.svg?branch=master)](https://travis-ci.org/internap/netman)\n[![Documentation Status](https://readthedocs.org/projects/netman/badge/?version=latest)](http://netman.readthedocs.org/en/latest/?badge=latest)\n[![PyPI version](https://badge.fury.io/py/netman.svg)](http://badge.fury.io/py/netman)\n\nNetman\n======\n\nNetman is a unified REST API that provides vendor-agnostic network automation.\nIt abstracts the vendor-specific bits and leaves you with a clean and\nsimplified API.\n\n\nPython code usage\n-----------------\n\n```python\nswitch_factory = SwitchFactory(MemoryStorage(), ThreadingLockFactory())\nswitch = switch_factory.get_anonymous_switch(\n    model=\"cisco\", \n    hostname=\"hostname_or_ip\", \n    username=\"username\", \n    password=\"password\", \n)\n\nswitch.add_vlan(1000, name=\"myvlan\")\n```\n\nREST API usage \n--------------\n\nFirst, start the service\n\n```bash\ntox\n.tox/py27/bin/python netman/main.py\n * Running on http://127.0.0.1:5000/ (Press CTRL+C to quit)\n```\n\nThen you can access it by http\n\n```bash\ncurl -X POST http://127.0.0.1:5000/switches/hostname_or_ip/vlans -d '{\"number\": 1000, \"name\": \"myvlan\"}' \n    -H \"Content-Type: application/json\" \n    -H \"Netman-model: cisco\" \n    -H \"Netman-username: username\" \n    -H \"Netman-password: password\"\n```\n\nDisaggregated mode\n------------------\n\nNetman supports a disaggregated mode. This is a special mode of operation where netman will use a remote netman server to access the network equipment. This mode is particularly useful in the case where your network equipment is not available to your main netman server.  You can start a server somewhere, let's say at 192.168.1.1, running netman as described above. And use the proxy like this for direct code usage :\n\n```python\nswitch_factory = SwitchFactory(MemoryStorage(), ThreadingLockFactory())\nswitch = switch_factory.get_anonymous_switch(\n    model=\"cisco\", \n    hostname=\"hostname_or_ip\", \n    username=\"username\", \n    password=\"password\", \n    netman_server=\"http://192.168.1.1\")\n\nswitch.add_vlan(1000, name=\"myvlan\")\n```\n\nOr when invoked using the REST API, you can call the main server and provide the proxy netman server to be used.\n\n```bash\ncurl -X POST http://127.0.0.1:5000/switches/hostname_or_ip/vlans -d '{\"number\": 1000, \"name\": \"myvlan\"}' \n    -H \"Content-Type: application/json\" \n    -H \"Netman-model: cisco\" \n    -H \"Netman-username: username\" \n    -H \"Netman-password: password\"\n    -H \"Netman-Proxy-Server: http://192.168.1.1\"\n```\n\nDocker usage\n============\n\nFrom your computer, start a Netman container and a fake-switch container in order to mock a switch Netman will configure.\n```shell\n$ docker-compose up -d\n```\n\nCreate a Vlan\n```bash\ncurl -X POST http://localhost:32771/switches/netman_tsr1.yul1.example.net_1/vlans -d '{\"number\": 1000, \"name\": \"myvlan\"}' \n    -H \"Content-Type: application/json\" \n    -H \"Netman-model: cisco\" \n    -H \"Netman-username: root\" \n    -H \"Netman-password: root\"\n```\n\nGet information of an existing Vlan\n```bash\ncurl -X GET http://localhost:32771/switches/netman_tsr1.yul1.example.net_1/vlans/1000 \n    -H \"Content-Type: application/json\" \n    -H \"Netman-model: cisco\" \n    -H \"Netman-username: root\" \n    -H \"Netman-password: root\"\n```\n\nContributing\n============\n\nFeel free to raise issues and send some pull request, we'll be happy to look at them!\n",
  "permissions": {
    "read": true,
    "write": false,
    "admin": false
  },
  "media_types": [
    "application/vnd.docker.container.image.v1+json"
  ],
  "content_types": [
    "image"
  ]
}