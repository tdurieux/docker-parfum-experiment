{
  "user": "sourcelair",
  "name": "castor",
  "namespace": "sourcelair",
  "repository_type": "image",
  "status": 1,
  "status_description": "active",
  "description": "Docker events, dispatched as webhooks.",
  "is_private": false,
  "is_automated": true,
  "can_edit": false,
  "star_count": 0,
  "pull_count": 1002,
  "last_updated": "2021-06-10T17:32:40.872342Z",
  "date_registered": "2017-02-06T09:07:00.205369Z",
  "collaborator_count": 0,
  "affiliation": null,
  "hub_user": "sourcelair",
  "has_starred": false,
  "full_description": "Castor - Webhooks for Docker events\n===================================\n\n[![Build Status](https://travis-ci.org/sourcelair/castor.svg)](https://travis-ci.org/sourcelair/castor)\n\nCastor monitors the Docker events of multiple Docker servers and\ndispatches them via HTTP POST requests to the desired WebHooks.\n\n## Example\nYou can tell Castor to monitor `unix:///var/run/docker.sock` (named as `localhost`) for Docker events and forward them to `https://www.example.com/hooks/docker`.\n\nNow, when the following event gets captured by Castor:\n\n```json\n{\n  \"from\": \"image/with:tag\",\n  \"id\": \"container-id\",\n  \"status\": \"start\",\n  \"time\": 1423339459\n}\n```\n\nit will be `POST`ed to `https://www.example.com/hooks/docker` with `application/json` content type and the following payload:\n\n```json\n{\n  \"docker_server\": \"localhost\",\n  \"event\": {\n    \"from\": \"image/with:tag\",\n    \"id\": \"container-id\",\n    \"status\": \"start\",\n    \"time\": 1423339459\n  }\n}\n```\n\n## Getting started\n\n### Step 0: Host setup\nMake sure you are running on a Ubuntu Linux machine with Docker 1.12 (or newer version) and Docker Compose installed.\n\n(Docker for Mac should work as well)\n\n### Step 1: Clone this repository\nThe first step you have to take is clone this repository and `cd` into it's root directory.\n\n### Step 2: Create a `.env` file\nNext, you will need to create a `.env` file to store configuration for your Castor installation in environment variable format (see how [`examples/.env.example`](examples/.env.example) is structured).\n\n### Step 3: Configure database and Redis\nNow you have to set the following environment variables in your `.env` file:\n\n- `POSTGRES_USER`\n- `POSTGRES_PASSWORD`\n- `POSTGRES_DB`\n- `REDIS_URL`\n\nUse the same format with [`examples/.env.example`](examples/.env.example)\n\n### Step 4: Configure authentication\nCastor allows only members of a GitHub organization to access it's dashboard. For this reason you will need to [register a new OAuth application](https://github.com/settings/applications/new) in GitHub.\n\nThen save your application's **Client ID**, **Client Secret** and **Organization name** in the following environment variables respectively in your `.env` file:\n\n- `SOCIAL_AUTH_GITHUB_KEY`\n- `SOCIAL_AUTH_GITHUB_SECRET`\n- `SOCIAL_AUTH_GITHUB_ORG_NAME`\n\nUse the same format with [`examples/.env.example`](examples/.env.example)\n\n### Step 5: Bootstrap the environment\nRun the following commands to:\n\n1. Create the database and a new superuser\n2. Install all front-end assets needed for the UI\n\n```\ndocker-compose run --rm web ./bin/bootstrap\ndocker run --rm -v $(PWD):/mnt/castor -w /mnt/castor/castor/web/static/web node:8 npm install\n```\n\n### Step 6: Launch Castor!\nNow all you have to do is launch castor by running:\n\n```\ndocker-compose up\n```\n\nNow you can visit the Django admin panel, sign in with the superuser credentials that you created before and add Docker servers for monitoring and web hooks for dispatching events captured on those servers.\n\n⚠️ **Warning:** This will run Castor in *development mode*, and it will bind `/var/run/docker.sock` into the container to bind easily to a local Docker daemon. It is suggested strongly to create your own `docker-compose.yaml` file for your production deployment of Castor.\n\n## License\nCastor is licensed under the MIT License. More info at [LICENSE](LICENSE) file.\n",
  "permissions": {
    "read": true,
    "write": false,
    "admin": false
  },
  "media_types": [
    "application/vnd.docker.container.image.v1+json"
  ],
  "content_types": [
    "image"
  ]
}