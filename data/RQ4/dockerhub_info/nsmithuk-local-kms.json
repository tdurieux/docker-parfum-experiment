{
  "user": "nsmithuk",
  "name": "local-kms",
  "namespace": "nsmithuk",
  "repository_type": "image",
  "status": 1,
  "status_description": "active",
  "description": "A mock version of AWS' Key Management Service, for local development and testing.",
  "is_private": false,
  "is_automated": true,
  "can_edit": false,
  "star_count": 4,
  "pull_count": 2266904,
  "last_updated": "2023-01-02T13:12:47.138677Z",
  "date_registered": "2018-11-07T20:11:39.13512Z",
  "collaborator_count": 0,
  "affiliation": null,
  "hub_user": "nsmithuk",
  "has_starred": false,
  "full_description": "# Local KMS (LKMS)\n\nA mock version of AWS' Key Management Service, for local development and testing. Written in Go.\n\n_Whilst this project does use real encryption ([AES](https://golang.org/pkg/crypto/aes/), [ECDSA](https://golang.org/pkg/crypto/ecdsa/) and [RSA](https://golang.org/pkg/crypto/rsa/)), it is designed for \ndevelopment and testing against KMS; not for use in a production environment._\n\n#### (Local) KMS Usage Guides\n* [Using AWS KMS via the CLI with a Symmetric Key](https://nsmith.net/aws-kms-cli)\n* [Using AWS KMS via the CLI with Elliptic Curve (ECC) Keys](https://nsmith.net/aws-kms-cli-ecc)\n* [Using AWS KMS via the CLI with RSA Keys for Message Signing](https://nsmith.net/aws-kms-cli-rsa-signing)\n\n## Features\n\n### Supports\n\n* Symmetric (AES) keys\n* Asymmetric keys (ECC_NIST and RSA)\n* Management of Customer Master Keys; including:\n    * Enabling and disabling keys\n    * Scheduling key deletion\n    * Enabling/disabling automated key rotation\n* Management of key aliases\n* Encryption\n    * Encryption Contexts\n* Decryption\n* Generating a data key, with or without plain text\n* Generating a data key pair, with or without plain text\n* Generating random data\n* Importing your own key material\n* Signing and verifying messages\n    * RAW and DIGEST\n* Tags\n* Key Policies: Get & Put\n\n#### Seeding\nSeeding allows LKMS to be supplied with a set of pre-defined keys and aliases on startup, giving you a deterministic and versionable way to manage test keys.\n\nIf a key in the seeding file already exists, it will not be overwritten or amended by the seeding process.\n\n### Does not (yet) support\n\n* ECC_SECG_P256K1 keys\n* Grants\n* Operations relating to a Custom Key Store\n\n## Download\n\nPre-built binaries:\n* [local-kms_darwin-amd64.bin](https://local-kms.s3.eu-west-2.amazonaws.com/3/local-kms_darwin-amd64.bin)\n* [local-kms_linux-amd64.bin](https://local-kms.s3.eu-west-2.amazonaws.com/3/local-kms_linux-amd64.bin)\n* [local-kms_linux-arm64.bin](https://local-kms.s3.eu-west-2.amazonaws.com/3/local-kms_linux-arm64.bin)\n* [local-kms_linux-amd64-alpine.bin](https://local-kms.s3.eu-west-2.amazonaws.com/3/local-kms_linux-amd64-alpine.bin)\n* [local-kms_linux-arm64-alpine.bin](https://local-kms.s3.eu-west-2.amazonaws.com/3/local-kms_linux-arm64-alpine.bin)\n\n\n## Getting Started with Docker\n\nThe quickest way to get started is with Docker. To get LKMS up, running and accessible on port 8080, you can run:\n```\ndocker run -p 8080:8080 nsmithuk/local-kms\n```\n\n### Seeding and Docker\nBy default LKMS checks for a seeding file within the container at `/init/seed.yaml`. The simplest way of using a seeding file is to mount a directory on the host's file system containing a file named `seed.yaml`.\n\nThen you can run:\n```\ndocker run -p 8080:8080 \\\n--mount type=bind,source=\"$(pwd)\"/init,target=/init \\\nnsmithuk/local-kms\n```\n\n### Persisting data and Docker\nBy default in Docker, data will be stored in the directory `/data/`. To persist data between container executions, mount `/data` to a directory on the host's file system.\n```\ndocker run -p 8080:8080 \\\n--mount type=bind,source=\"$(pwd)\"/data,target=/data \\\nnsmithuk/local-kms\n```\n\n## Seeding file format\n\n_Both Symmetric and Asymmetric (RSA and ECC) keys are supported in the seeding file._\n\nA simple seeding file looks like\n```yaml\nKeys:\n  Symmetric:\n    Aes:\n      - Metadata:\n          KeyId: bc436485-5092-42b8-92a3-0aa8b93536dc\n        BackingKeys:\n          - 5cdaead27fe7da2de47945d73cd6d79e36494e73802f3cd3869f1d2cb0b5d7a9\n  Asymmetric:\n    Ecc:\n      - Metadata:\n          KeyId: 800d5768-3fd7-4edd-a4b8-4c81c3e4c147\n          KeyUsage: SIGN_VERIFY\n          Description: ECC key with curve secp256r1\n        PrivateKeyPem: |\n          -----BEGIN EC PRIVATE KEY-----\n          MHcCAQEEIMnOrUrXr8rwne7d8f01cfwmpS/w+K7jcyWmmeLDgWKaoAoGCCqGSM49\n          AwEHoUQDQgAEYNMBBZ3h1ipuph1iO5k+yLvTs94UN71quXN3f0P/tprs2Fp2FEas\n          M7m7XZ2xlDK3wcEAs1QEIoQjjwnhcptQ6A==\n          -----END EC PRIVATE KEY-----\n\nAliases:\n  - AliasName: alias/testing\n    TargetKeyId: bc436485-5092-42b8-92a3-0aa8b93536dc\n```\nWhich will create two keys: an AES Key with ID `bc436485-5092-42b8-92a3-0aa8b93536dc` and a 256 bit ECC Key. \nAn alias with the name `alias/testing` refers to the AES key.\n\n`BackingKeys ` must be an array of **one or more** hex encoded 256bit keys (can be generated using `openssl rand -hex 32`).\nOnly AES Keys support backing keys.\n\nSeeding files also support multiple keys, aliases and backing keys. Adding more than one backing key simulates the effect of the CMK having been rotated. \n\n```yaml\nKeys:\n  Symmetric:\n    Aes:\n      - Metadata:\n          KeyId: bc436485-5092-42b8-92a3-0aa8b93536dc\n        BackingKeys:\n          - 34743777217A25432A46294A404E635266556A586E3272357538782F413F4428\n          - 614E645267556B58703273357638792F423F4528472B4B6250655368566D5971\n      \n      - Metadata:\n          KeyId: 49c5492b-b1bc-42a8-9a5c-b2015e810c1c\n        BackingKeys:\n          - 5cdaead27fe7da2de47945d73cd6d79e36494e73802f3cd3869f1d2cb0b5d7a9\n\n\nAliases:\n  - AliasName: alias/dev\n    TargetKeyId: bc436485-5092-42b8-92a3-0aa8b93536dc\n\n  - AliasName: alias/test\n    TargetKeyId: 49c5492b-b1bc-42a8-9a5c-b2015e810c1c\n\n```\n\nKeys also support the following optional fields:\n- **Metadata -> Description**: A free text field into which you can enter a description of the key.\n- **Metadata -> Origin**: Can be set to `EXTERNAL` to seed keys with custom key material. If `Origin` is set to `EXTERNAL` then `BackingKeys` is optional array that can contain at most 1 hex encoded 256bit key.\n- **Metadata -> KeyUsage**: For Asymmetric Keys. ECC keys only support SIGN_VERIFY. RSA keys support SIGN_VERIFY or ENCRYPT_DECRYPT.\n- **NextKeyRotation**: AES Keys Only. An ISO 8601 formatted date. Supplying this enables key rotation, and sets the next rotation to take place on the supplied date. If the date is in the past, rotation will happen the first time the key is accessed.\n\n```yaml\nKeys:\n  Symmetric:\n    Aes:\n      - Metadata:\n          KeyId: bc436485-5092-42b8-92a3-0aa8b93536dc\n          Description: \"Your key description\"\n        NextKeyRotation: \"2019-09-12T15:19:21+00:00\"\n        BackingKeys:\n          - 34743777217A25432A46294A404E635266556A586E3272357538782F413F4428\n      - Metadata:\n          KeyId: 5ef77041-d1e6-4af1-9a41-e49a4b45efb6\n          Origin: EXTERNAL\n        BackingKeys:\n          - b200b324de29609558e13780160e38fc193f6bec9f9dba58a2be5b37d5098d74\n      - Metadata:\n          KeyId: 5d05267f-bb87-4d0b-8594-295a4371d414\n          Origin: EXTERNAL\n```\nIn the example above, 2 `EXTERNAL` origin keys will be created. \n- a key with the ID `5ef77041-d1e6-4af1-9a41-e49a4b45efb6`, with pre-imported key material \n- a key with the ID `5d05267f-bb87-4d0b-8594-295a4371d414` in a `PendingImport` state\n\n\n```yaml\nKeys:\n  Asymmetric:\n    Rsa:\n      - Metadata:\n          KeyId: ff275b92-0def-4dfc-b0f6-87c96b26c6c7\n          KeyUsage: SIGN_VERIFY # or ENCRYPT_DECRYPT\n          Description: RSA key with 2048 bits\n        PrivateKeyPem: |\n          -----BEGIN PRIVATE KEY-----\n          MIIEvwIBADANBgkqhkiG9w0BAQEFAASCBKkwggSlAgEAAoIBAQD21epc1564DeWZ\n          80XYAXTo4tjqJzEQ6VdpkRfKHraJ4WNqS8N5HjfyzmADVOgqqlbm5M+Qq0/ViMd/\n          Xqh+OUNhwvEIo6iZuNbWba3/cUV9ZFpmCv9IWvlNojc3zq0C9/fXeSqXwZWut78d\n          AuFodRdAnENiHf9aXv4pIyszAxALCSCd/UCYZRw+XUDPG4pSJrwgz2Ohkqr1SnFF\n          1aQt6onjt3Rtfn5IUs7BGEXGd6M3HeIlikSLjdoXEuevVaZO0ysiQdiYDYYQ2eFe\n          ytXefRuotRqH4dLpL6beUFRbT1MQVtqC2S0K2wWq8T5gTFejxv6E6eVqRC2xu0lj\n          TGDxnUC3AgMBAAECggEAU6K73GV69CZRS86wNbaYpGho0z4gU/ick7qD8wphE2r5\n          QoUVYK6qimz+/2H/oKVC+M1Cv2Qsks/buP6b3NkOScvB3AmIET4eHV3gfRMmVoxw\n          TO8g/KVGn9V9HD29Rao7ohj+I5mGXEMKUIwvUDOMg2nvMwmzAi35tHqkIo7BGtt8\n          gBuuHsZj9PM6MYSSZdrHP52T3K15MaHfrLb97UaryyYnhnUmBA12DBE8MseuYA7w\n          JwL3os6MwtLxRxgXnBhkk3Ist83nZNiXESXhN3d98NLS8KbX2wcbnd0B+CqRyvnv\n          GbE+CfzxPf/zTsexxpS3TlTR80vAYkubmtWIMG128QKBgQD/iQbZx2xhH6VjYWC6\n          +kc03povTKTe/MKUySO7poWjJrGbajrkq7RcXdNCglVSXcKY/BvmgsWRqJc+Jh2z\n          enFIcGOuO146FEAr3i4hGjtV01/ukgAl6Ko68gdxjyQLqrJ/bg0qQO57KEhRh5Tb\n          mR5mIkG2j2Usr4Llc3LGXIH8VQKBgQD3SNaahwum8+8kXaxgmKwfOL64rM5fLQq3\n          f0UGzKZkuRSqXJn9EKuE1rNKX4zNUBWJVF+C4bjRGLz1QRS7j2taqU4awLie+5Ak\n          M4Ww8lzHd3uKf+ESCd8DU3TzD+dggtuw+OTqVZdJKA5Kfrbg72ZUyzH3p9Oj/zMu\n          QWl3d6TU2wKBgQCaMZs6qoWRjcEE2Ou/p+pz0qcDR6JtE+RuV3kCcJdPPbgKae2j\n          sqCg49To2zCVBRK5sdc8H0kMfcjVrbZaaNYWugrMRfKz5Shb0DPRsbyAK45FrT/9\n          oAmojAdF1PQRPi17i3LSPmApXMNWvxNp91lKk/1HJfwNHNNFlYZ6f7PICQKBgQCq\n          q2ryXCJ+p/11a/F8+eJR6ig37YzBw6SR4RUTDEwLWHIa4q6lKsw2crhrrGbRjWRP\n          1BvXiVK1fg1sd+6HRQUjHZb6f+jsUVO6qJSs+5ltUdnCTWBZwtZYxVECMQfQZICc\n          NCxKT6iKpUq3v50YwiIug8+IzhwUJB5+3kacXcc14QKBgQDpjYvwAPAq1Rru/Ew4\n          hzisDSCY5CLE+X/6dvogWhJBmpaZBKDmUGi6AwK9rcwITZmlR/qU+2WqNdhHxa8S\n          uSp1A6OmOHQHA3I+J4veI0kPB2Y0Z65CyfCYm9MsNkcyFYx4tRBSOzAdA+xrJCa4\n          y5+KYGmXlaoRhFSq1VO8mGoihA==\n          -----END PRIVATE KEY-----\n    Ecc:\n      - Metadata:\n          KeyId: 800d5768-3fd7-4edd-a4b8-4c81c3e4c147\n          KeyUsage: SIGN_VERIFY\n          Description: ECC key with curve secp256r1\n        PrivateKeyPem: |\n          -----BEGIN EC PRIVATE KEY-----\n          MHcCAQEEIMnOrUrXr8rwne7d8f01cfwmpS/w+K7jcyWmmeLDgWKaoAoGCCqGSM49\n          AwEHoUQDQgAEYNMBBZ3h1ipuph1iO5k+yLvTs94UN71quXN3f0P/tprs2Fp2FEas\n          M7m7XZ2xlDK3wcEAs1QEIoQjjwnhcptQ6A==\n          -----END EC PRIVATE KEY-----\n```\nIn the example above, 2 asymmetric keys will be created. Both keys may be used for Signing and Verification. Key size\nis determined from the PEM encoded key.\n - an RSA key with the ID `ff275b92-0def-4dfc-b0f6-87c96b26c6c7` (2048 bits).\n - an ECC Key with the ID `800d5768-3fd7-4edd-a4b8-4c81c3e4c147` (256 bits).\n \nThe `PrivateKeyPem` field is a multiline string. In YAML the  pipe character `|` at the end of the line is one way to do this.\nPrivateKeyPem is in PKCS8 format and may be generated using Openssl or similar tools.\nSee below for bash functions to generate the Asymmetric Key format. \n\n:arrow_right: &nbsp; When choosing signing keys consider signature size but also cost and compatibility.\nECC 256 bit keys provide the smallest signature but RSA 2048 key operations are currently cheaper and are widely used. \n\n## Configuration\nThe following environment variables can be set to configure LKMS.\n\n- **PORT**: Port on which LKMS will run. Default: 8080\n- **KMS_ACCOUNT_ID**: Dummy AWS account ID to use. Default: 111122223333\n- **KMS_REGION**: Dummy region to use. Default: eu-west-2\n- **KMS_SEED_PATH**: Path at which the seeding file is supplied. Default: `/init/seed.yaml`\n- **KMS_DATA_PATH**: Path LKMS will put its database.\n\t- Docker default: `/data`\n\t- Native default: `/tmp/local-kms`\n\nWarning: keys and aliases are stored under their ARN, thus their identity includes both KMS_ACCOUNT_ID and KMS_REGION. Changing these values will make pre-existing data inaccessible.\n\n## Configuration\nThe following environment variables can be set to configure LKMS.\n\n## Known Differences from AWS' KMS\n\nWhen successfully calling `ScheduleKeyDeletion`, the timestamp returned from AWS is in Scientific Notation/Standard Form.\nFor example `1.5565824E9`. The same request to Local KMS will return `1556582400`. This should have no effect on\nofficial AWS SDKs, as from a JSON interpreter's perspective the two are identical. It does however seem difficult to\nforce Go to return the value in Standard Form.\nSee: https://github.com/nsmithuk/local-kms/issues/4\n\n## Building from source\n\n### Prerequisites\n\nTested with Go 1.16\n\n### Install\n\n```sh\ngo get -u github.com/nsmithuk/local-kms\ncd $GOPATH/src/github.com/nsmithuk/local-kms\ngo install\n```\n\n### Run\n\n```sh\n$GOPATH/bin/local-kms\n\n```\n\nLocal KMS runs on port http://localhost:8080 by default.\n\n### Using LKMS with the CLI\n\nFor a more in-depth guide to these commands, please see:\n* [Using AWS KMS via the CLI with a Symmetric Key](https://nsmith.net/aws-kms-cli)\n* [Using AWS KMS via the CLI with Elliptic Curve (ECC) Keys](https://nsmith.net/aws-kms-cli-ecc)\n\nThe examples here use `awslocal`, which wraps the `aws` command to include the required endpoint.\n\ne.g. The following two commands are equivalent\n```bash\naws kms create-key --endpoint=http://localhost:4599\nand\nawslocal kms create-key\n```\n\n#### Creating a Customer Master Key\n```bash\nawslocal kms create-key\n```\n\n#### Encrypt data\n```bash\nawslocal kms Dncrypt \\\n--key-id 0579fe9c-129b-490a-adb0-42589ac4a017 \\\n--plaintext \"My Test String\"\n```\n\n#### Decrypt Data\n```bash\nawslocal kms decrypt \\\n--ciphertext-blob fileb://encrypted.dat\n```\n\n#### Generate Data Key\n```bash\nawslocal kms generate-data-key \\\n--key-id 0579fe9c-129b-490a-adb0-42589ac4a017 \\\n--key-spec AES_128\n```\n\n#### Importing custom key material\n```bash\nkey_id=${1}\nwrappingAlg=${2:-RSAES_OAEP_SHA_1}\nexpirationModel=${3:-KEY_MATERIAL_DOES_NOT_EXPIRE}\nvalidToInput=${4}\n\nif [ \"$wrappingAlg\" == \"RSAES_PKCS1_V1_5\" ]; then\n    echo \"RSAES_PKCS1_V1_5 is nto supported by this script. Please use RSAES_OAEP_SHA_[1|256].\"\n    exit 1\nfi\n\nif [ -z \"$key_id\" ]; then\n    echo \"\"\n    echo \"Creating new External key\"\n    key_id=$(awslocal kms create-key --origin EXTERNAL | jq -r '.KeyMetadata.KeyId')\nfi\n\necho \"\"\necho \"Getting Parameters For Import\"\nimportParams=$(awslocal kms get-parameters-for-import --key-id $key_id --wrapping-algorithm $wrappingAlg --wrapping-key-spec RSA_2048)\n\npubKeyBinFile=$(mktemp)\necho $importParams | jq -r '.PublicKey' | base64 --decode > $pubKeyBinFile\n\nimportTokenBinFile=$(mktemp)\necho $importParams | jq -r '.ImportToken' | base64 --decode > $importTokenBinFile\n\nkeyMaterial=\"KeyMaterial-${key_id}.txt\"\nif [ -f \"$keyMaterial\" ]; then\n  echo \"\"\n  echo \"Found existing key material\"\nelse\n  echo \"\"\n  echo \"Generating key material\"\n  keyMaterialTmp=$(mktemp)\n  openssl rand -out $keyMaterialTmp 32\n\n  # If you want to re-import key material then you'll need to save\n  # this file and use it for any subsequent calls to Local KMS\n  mv $keyMaterialTmp $keyMaterial\nfi\n\necho \"\"\necho \"Encrypting key material using public key\"\nencryptedKeyMaterial=$(mktemp)\n\nopenssl pkeyutl \\\n  -in $keyMaterial \\\n  -out $encryptedKeyMaterial \\\n  -inkey $pubKeyBinFile \\\n  -keyform DER \\\n  -pubin -encrypt \\\n  -pkeyopt rsa_padding_mode:oaep \\\n  -pkeyopt rsa_oaep_md:sha$(echo \"$wrappingAlg\" | sed -r 's/.*_([0-9]+)$/\\1/')\n\nvalidTo=\nif [ -n \"$validToInput\" ]; then\n    validTo=\" --valid-to $validToInput\"\nfi\n\necho \"\"\necho \"Import key material for key_id $key_id\"\nawslocal kms import-key-material --key-id $key_id \\\n    --expiration-model KEY_MATERIAL_DOES_NOT_EXPIRE \\\n    --import-token fileb://$importTokenBinFile \\\n    --encrypted-key-material fileb://$encryptedKeyMaterial \\\n    $validTo\n\necho \"\"\necho \"Cleaning up\"\nrm -f $pubKeyBinFile\nrm -f $importTokenBinFile \nrm -f $encryptedKeyMaterial\n\necho \"\"\necho \"Describing new state\"\nawslocal kms describe-key --key-id $key_id\n```\n\n### Using LKMS with HTTP(ie)\n\n#### Creating a Customer Master Key\n```bash\nhttp -v --json POST http://localhost:4599/ \\\nX-Amz-Target:TrentService.CreateKey\n\nPOST / HTTP/1.1\nAccept: application/json, */*\nAccept-Encoding: gzip, deflate\nConnection: keep-alive\nContent-Length: 0\nContent-Type: application/json\nHost: localhost:4599\nUser-Agent: HTTPie/1.0.2\nX-Amz-Target: TrentService.CreateKey\n\n\n\nHTTP/1.1 200 OK\nContent-Length: 329\nContent-Type: application/x-amz-json-1.1\nDate: Thu, 24 Oct 2019 11:17:30 GMT\n\n{\n    \"KeyMetadata\": {\n        \"AWSAccountId\": \"111122223333\",\n        \"Arn\": \"arn:aws:kms:eu-west-2:111122223333:key/f154ba79-0b7d-4f19-9983-309f706ebc83\",\n        \"CreationDate\": 1571915850,\n        \"Description\": \"\",\n        \"Enabled\": true,\n        \"KeyId\": \"f154ba79-0b7d-4f19-9983-309f706ebc83\",\n        \"KeyManager\": \"CUSTOMER\",\n        \"KeyState\": \"Enabled\",\n        \"KeyUsage\": \"ENCRYPT_DECRYPT\",\n        \"Origin\": \"AWS_KMS\"\n    }\n}\n```\n\n#### Encrypting some (base64 encoded) data\n```bash\nhttp -v --json POST http://localhost:4599/ \\\nX-Amz-Target:TrentService.Encrypt \\\nKeyId=f154ba79-0b7d-4f19-9983-309f706ebc83 \\\nPlaintext='SGVsbG8='\n\nPOST / HTTP/1.1\nAccept: application/json, */*\nAccept-Encoding: gzip, deflate\nConnection: keep-alive\nContent-Length: 74\nContent-Type: application/json\nHost: localhost:4599\nUser-Agent: HTTPie/1.0.2\nX-Amz-Target: TrentService.Encrypt\n\n{\n    \"KeyId\": \"f154ba79-0b7d-4f19-9983-309f706ebc83\",\n    \"Plaintext\": \"SGVsbG8=\"\n}\n\nHTTP/1.1 200 OK\nContent-Length: 259\nContent-Type: application/x-amz-json-1.1\nDate: Thu, 24 Oct 2019 11:18:36 GMT\n\n{\n    \"CiphertextBlob\": \"S2Fybjphd3M6a21zOmV1LXdlc3QtMjoxMTExMjIyMjMzMzM6a2V5L2YxNTRiYTc5LTBiN2QtNGYxOS05OTgzLTMwOWY3MDZlYmM4MwAAAABjIzzp52djy/L4prvuGoG+jZ6OJzgQGi6n2CRO5dmfJHw=\",\n    \"KeyId\": \"arn:aws:kms:eu-west-2:111122223333:key/f154ba79-0b7d-4f19-9983-309f706ebc83\"\n}\n```\n\n#### Decrypting some KMS cipher text\n```bash\nhttp -v --json POST http://localhost:4599/ \\\nX-Amz-Target:TrentService.Decrypt \\\nCiphertextBlob='S2Fybjphd3M6a21zOmV1LXdlc3QtMjoxMTExMjIyMjMzMzM6a2V5L2YxNTRiYTc5LTBiN2QtNGYxOS05OTgzLTMwOWY3MDZlYmM4MwAAAABjIzzp52djy/L4prvuGoG+jZ6OJzgQGi6n2CRO5dmfJHw='\n\nPOST / HTTP/1.1\nAccept: application/json, */*\nAccept-Encoding: gzip, deflate\nConnection: keep-alive\nContent-Length: 174\nContent-Type: application/json\nHost: localhost:4599\nUser-Agent: HTTPie/1.0.2\nX-Amz-Target: TrentService.Decrypt\n\n{\n    \"CiphertextBlob\": \"S2Fybjphd3M6a21zOmV1LXdlc3QtMjoxMTExMjIyMjMzMzM6a2V5L2YxNTRiYTc5LTBiN2QtNGYxOS05OTgzLTMwOWY3MDZlYmM4MwAAAABjIzzp52djy/L4prvuGoG+jZ6OJzgQGi6n2CRO5dmfJHw=\"\n}\n\nHTTP/1.1 200 OK\nContent-Length: 110\nContent-Type: application/x-amz-json-1.1\nDate: Thu, 24 Oct 2019 11:20:17 GMT\n\n{\n    \"KeyId\": \"arn:aws:kms:eu-west-2:111122223333:key/f154ba79-0b7d-4f19-9983-309f706ebc83\",\n    \"Plaintext\": \"SGVsbG8=\"\n}\n```\n### Generating Asymmetric Keys in seed format\nThe following shows 2 bash functions for generating keys to use as seeds. The keys are generated in PKCS8 format and \nformatted for use in seed.yaml.\n\nThe linux packages `uuidgen` and `openssl` are required.\n\n#### RSA Key Generation\n```bash\nfunction rsakey(){\nlocal bits=$1\nif ! [[ \"$bits\" =~ ^(2048|3072|4096)$ ]];\nthen\n   echo \"RSA keysize must be one of : 2048 3072 4096\"\n   return\nfi\n\n\nkeyId=$(uuidgen | tr '[:upper:]' '[:lower:]')\necho \"\nKeys:\n  Asymmetric:\n    Rsa:\n      - Metadata:\n          KeyId: ${keyId}\n          KeyUsage: SIGN_VERIFY # or ENCRYPT_DECRYPT\n          Description: RSA key with ${bits} bits\n        PrivateKeyPem: |\n$(openssl genpkey -algorithm RSA -pkeyopt rsa_keygen_bits:${bits} -pkeyopt rsa_keygen_pubexp:65537 | sed 's/^/          /')\n\"\n}\n````\nThis function can be sourced then executed with the commands below. The output can be pasted into the seed.yaml file.\n```bash\nrsakey 2048\nrsakey 3072\nrsakey 4096\n```\n\n#### ECC Key Generation \n\n```bash\nfunction ecckey(){\nlocal curve=$1\nif ! [[ \"$curve\" =~ ^(secp256r1|secp384r1|secp521r1)$ ]];\nthen\n   echo \"Curve must be one of: secp256r1 secp384r1 secp521r1\"\n   return\nfi\nkeyId=$(uuidgen | tr '[:upper:]' '[:lower:]')\n\necho \"\nKeys:\n  Asymmetric:\n    Ecc:\n      - Metadata:\n          KeyId: ${keyId}\n          KeyUsage: SIGN_VERIFY\n          Description: ECC key with curve ${curve}\n        PrivateKeyPem: |\n$(openssl ecparam -name ${curve} -genkey -noout | sed 's/^/          /')\n\"\n}\n```\n\nThis function can be sourced then executed with the commands below. The output can be pasted into the seed.yaml file.\n```bash\necckey secp256r1\necckey secp384r1\necckey secp521r1\n```\n\n\n## License\n\nThis project is licensed under the MIT License - see the [LICENSE](LICENSE) file for details.\n",
  "permissions": {
    "read": true,
    "write": false,
    "admin": false
  },
  "media_types": [
    "application/vnd.docker.container.image.v1+json",
    "application/vnd.docker.distribution.manifest.list.v2+json"
  ],
  "content_types": [
    "image"
  ]
}