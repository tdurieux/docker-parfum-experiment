{
  "user": "ahdinosaur",
  "name": "ssb-pub",
  "namespace": "ahdinosaur",
  "repository_type": "image",
  "status": 1,
  "status_description": "active",
  "description": "easily host your own Secure ScuttleButt (SSB) pub in a docker container",
  "is_private": false,
  "is_automated": true,
  "can_edit": false,
  "star_count": 1,
  "pull_count": 44735,
  "last_updated": "2021-06-04T13:57:40.121866Z",
  "date_registered": "2017-11-15T09:44:48.440762Z",
  "collaborator_count": 0,
  "affiliation": null,
  "hub_user": "ahdinosaur",
  "has_starred": false,
  "full_description": "# ssb-pub\n\n**UNMAINTAINED**, for a maintained alternative to `ssb-pub`, see [`go-ssb-room`](https://github.com/ssb-ngi-pointer/go-ssb-room).\n\neasily host your own [Secure ScuttleButt (SSB)](https://www.scuttlebutt.nz) pub in a docker container\n\nif you feel like sharing your pub, please add it to [the informal registry of pubs](https://github.com/ssbc/scuttlebot/wiki/Pub-Servers) as a private pub with your contact details so newbies may request an invite from you!\n\n(if you are running a pub version less than 2.2.0, please [upgrade](#upgrading)! :tada: )\n\n:heart:\n\n## table of contents\n\n- [~~one-click setup~~](#one-click-setup)\n- [manual setup](#manual-setup)\n  - [install docker](#install-docker)\n  - [install `ssb-pub` image](#install-ssb-pub-image)\n  - [create `sbot` container](#create-sbot-container)\n  - [setup auto-healer](#setup-auto-healer)\n  - [ensure containers are always running](#ensure-containers-are-always-running)\n  - [(optional) add `ssb-viewer` plugin](#optional-add-ssb-viewer)\n- [kubernetes setup](#kubernetes-setup)\n- [command and control](#command-and-control)\n  - [create invites](#create-invites)\n  - [stop, start, restart containers](#stop-start-restart-containers)\n- [upgrading](#upgrading)\n  - [update `ssb-pub` image](#update-ssb-pub-image)\n  - [migrating from v1 to v2](#migrating-from-v1-to-v2)\n\n## ~~one-click setup~~\n\n(currently broken, soz)\n\n1) go to [![Install on DigitalOcean](http://legacy-installer.butt.nz//button.svg)](http://butt.nz) at [http://legacy-installer.butt.nz/](http://legacy-installer.butt.nz/)\n2) choose your server size and region\n\n> ![digital-butt-step-1.png](./images/digital-butt-step-1.png)\n\n3) log in to Digital Ocean, if not done already\n4) add ssh keys, if not done already\n5) start creating your pub server! :raised_hands:\n\n> ![digital-butt-step-2.png](./images/digital-butt-step-2.png)\n\n6) wait for a few minutes :hourglass:\n\n> ![digital-butt-step-3.png](./images/digital-butt-step-3.png)\n\n7) log in to your server using `ssh`\n\n```shell\nssh root@your.ip.address.here\n```\n\n8) test your pub server works\n\n```shell\n./sbot whoami\n```\n\n9) create your first invite!\n\n```shell\n./sbot invite.create 1\n```\n\n> ![digital-butt-step-4.png](./images/digital-butt-step-4.png)\n\n10) invite and host your friends on [Scuttlebutt](https://www.scuttlebutt.nz) :house_with_garden:\n\n> 11) give your pub a name and description\n> \n> ```\n> ./sbot publish --type about --about \"@your.pubs.id.here\" --name \"Pubby McPubFace\" --description \"everyone should have a pub, this is mine\"\n> ```\n>\n> 12) setup your pub's domain name\n>\n> point a domain name (example.com) to your pub server's IP address (using a DNS A record)\n>\n> edit `~/ssb-pub-data/config` to change the `connections.incoming.net[].external` property from your server ip address to your domain name:\n>\n> ```json\n> {\n>   \"connections\": {\n>     \"incoming\": {\n>       \"net\": [\n>         {\n>           \"scope\": \"public\",\n>           \"host\": \"0.0.0.0\",\n>           \"external\": \"hostname.yourdomain.tld\",\n>           \"transform\": \"shs\",\n>           \"port\": 8008\n>         }\n>       ]\n>     },\n>     \"outgoing\": {\n>       \"net\": [\n>         {\n>           \"transform\": \"shs\"\n>         }\n>       ]\n>     }\n>   }\n> }\n> ```\n>\n> then restart sbot:\n>\n> ```shell\n> docker restart sbot\n> ```\n\n(credit to [seven1m/do-install-button](https://github.com/seven1m/do-install-button) for the Digital Ocean installer)\n\n## manual setup\n\n### install docker\n\nto run a pub you need to have a static public IP, ideally with a DNS record (i.e.`<hostname.yourdomain.tld>`)\n\non a fresh Debian 9 box, as root\n\n```shell\napt update\napt upgrade -y\napt install -y apt-transport-https ca-certificates curl software-properties-common\nwget https://download.docker.com/linux/debian/gpg -O docker-gpg\nsudo apt-key add docker-gpg\necho \"deb [arch=amd64] https://download.docker.com/linux/debian $(lsb_release -cs) stable\" | sudo tee -a /etc/apt/sources.list.d/docker.list\napt update\napt install -y docker-ce\nsystemctl start docker\nsystemctl enable docker\n```\n\n### install `ssb-pub` image\n\n#### (option a) pull image from docker hub\n\n```shell\ndocker pull ahdinosaur/ssb-pub\n```\n\n#### (option b) build image from source\n\nfrom GitHub:\n\n```shell\ngit clone https://github.com/ahdinosaur/ssb-pub.git\ncd ssb-pub\ndocker build -t ahdinosaur/ssb-pub .\n```\n\n### create `sbot` container\n\n#### step 1. create a directory on the docker host for persisting the pub's data\n\n```shell\nmkdir ~/ssb-pub-data\nchown -R 1000:1000 ~/ssb-pub-data\n```\n\n> if migrating from an old server, copy your old `secret` and `gossip.json` (maybe also `blobs`) now.\n>\n> ```\n> rsync -avz ~/ssb-pub-data/blobs/sha256/ $HOST:~/ssb-pub-data/blobs/sha256/\n> ```\n\n#### step 2. setup ssb config\n\n```shell\nEXTERNAL=<hostname.yourdomain.tld>\n\ncat > ~/ssb-pub-data/config <<EOF\n{\n  \"connections\": {\n    \"incoming\": {\n      \"net\": [\n        {\n          \"scope\": \"public\",\n          \"host\": \"0.0.0.0\",\n          \"external\": \"${EXTERNAL}\",\n          \"transform\": \"shs\",\n          \"port\": 8008\n        }\n      ]\n    },\n    \"outgoing\": {\n      \"net\": [\n        {\n          \"transform\": \"shs\"\n        }\n      ]\n    }\n  }\n}\nEOF\n```\n\n#### step 3. run the container\n\ncreate a `./create-sbot` script:\n\n```shell\ncat > ./create-sbot <<EOF\n#!/bin/bash\n\nmemory_limit=\"\\$((\\$(free -b --si | awk '/Mem\\:/ { print \\$2 }') - 200*(10**6)))\"\n\ndocker run -d --name sbot \\\n   -v ~/ssb-pub-data/:/home/node/.ssb/ \\\n   -p 8008:8008 \\\n   --restart unless-stopped \\\n   --memory \"\\$memory_limit\" \\\n   ahdinosaur/ssb-pub\nEOF\n```\n\nwhere\n\n- `--memory` sets an upper memory limit of your total memory minus 200 MB (for example: on a 1 GB server this could be simplified to `--memory 800m`)\n\nthen\n\n```shell\n# make the script executable\nchmod +x ./create-sbot\n# run the script\n./create-sbot\n```\n\n#### step 4. create `./sbot` script\n\nwe will now create a shell script in `./sbot` to help us command our Scuttlebutt server running:\n\n```shell\n# create the script\ncat > ./sbot <<EOF\n#!/bin/sh\n\ndocker exec -it sbot sbot \\$@\nEOF\n```\n\nthen\n\n```shell\n# make the script executable\nchmod +x ./sbot\n# test the script\n./sbot whoami\n```\n\n### setup auto-healer\n\nthe `ssb-pub` has a built-in health check: `sbot whoami`.\n\nwhen `sbot` becomes unhealthy (it will!), we want to kill the container, so it will be automatically restarted by Docker.\n\nfor this situation, we will use [somarat/healer](https://github.com/somarat/healer):\n\n```shell\ndocker pull ahdinosaur/healer\n```\n\n```shell\ndocker run -d --name healer \\\n  -v /var/run/docker.sock:/tmp/docker.sock \\\n  --restart unless-stopped \\\n  ahdinosaur/healer\n```\n\n### ensure containers are always running\n\nsometimes the `sbot` or `healer` containers will stop running (despite `--restart unless-stopped`!).\n\nfor this sitaution, we will setup two cron job scripts:\n\n```shell\nprintf '#!/bin/sh\\n\\ndocker start sbot\\n' | tee /etc/cron.hourly/sbot && chmod +x /etc/cron.hourly/sbot\nprintf '#!/bin/sh\\n\\ndocker start healer\\n' | tee /etc/cron.hourly/healer && chmod +x /etc/cron.hourly/healer\n```\n\nbecause `docker start <service>` is [idempotent](https://en.wikipedia.org/wiki/Idempotent), it will not change anything if the service is already running, but if the service is not running it will start it.\n\n### (optional) add `ssb-viewer` plugin\n\nenter your `sbot` container with:\n\n```shell\ndocker exec -it sbot bash\n```\n\nthen run:\n\n```shell\nnpm install -g git-ssb\nmkdir -p ~/.ssb/node_modules\ncd ~/.ssb/node_modules\ngit clone ssb://%MeCTQrz9uszf9EZoTnKCeFeIedhnKWuB3JHW2l1g9NA=.sha256 ssb-viewer\ncd ssb-viewer\nnpm install\nsbot plugins.enable ssb-viewer\n```\n\nedit your config to include\n\n```json\n{\n  \"plugins\": {\n    \"ssb-viewer\": true\n  },\n  \"viewer\": {\n    \"host\": \"0.0.0.0\"\n  }\n}\n```\n\nedit your `./create-sbot` to include `-p 8807:8807`.\n\nstop, remove, and re-create sbot:\n\n```shell\ndocker stop sbot\ndocker rm sbot\n./create-sbot\n```\n\n## kubernetes setup\n\nYaml config files for Kubernetes are included in this repository at\n`hack/k8s/deployment.yaml`. This has been tested on DigitalOcean. Tweaks may be\nnecessary for clusters hosted by other providers.\n\nThe SSB config file is injected into the container as a volume mount. You should\nupdate the `ssb-config` configMap in the deployment file with your external IP\nor domain, and any other changes you require. Unfortunately, because this is\nbeing done on a subPath, changes to the configMap will not propogate\nautomatically. Please keep this in mind if you find you need to make config\nchanges, or, pull requests welcome.\n\nSSB requires persistence to store the log, secrets. The chosen default in the\nincluded config is 5gb, but you should raise this to a level that makes sense\nfor your traffic. If you should find your volume filling up, follow the\ninstructions for your provider as to how to increase the size or migrate to a\nlarger volume.\n\nAfter updating the config, you can install SSB into your cluster with the\nfollowing:\n\n```shell\nkubectl apply -f hack/k8s/deployment.yaml\n```\n\nThis will do a number of things:\n\n1. create a namespace on your cluster called `scuttlebutt`\n1. create a service exposing port 8008\n1. create a 5gb persistent volume which is mapped to `/home/node/.ssb`\n1. create and inject your ssb config\n\nMuch remains the same as with the manual install. However, since we're using\nKubernetes in this case for orchestration, there is no need to run additional\nservices like healer, etc. as liveness checks are handled by the deployment\nconfiguration.\n\nI've opted short-term _not_ to expose ssh access to the running container, but\nyou may access it by first getting the name of your running pod, then:\n\n```shell\nkubectl exec -it <your pod name> -n scuttlebutt /bin/bash\n```\n\nFrom here you can invoke any of the commands detailed below.\n\n## command and control\n\n### create invites\n\nfrom your server:\n\n```shell\n./sbot invite.create 1\n```\n\nfrom your local machine, using ssh:\n\n```shell\nssh -t root@server ./sbot invite.create 1\n```\n\n### start, stop, restart containers\n\nfor `sbot`\n\n- `docker stop sbot`\n- `docker start sbot`\n- `docker restart sbot`\n\nfor `healer`\n\n- `docker stop healer`\n- `docker start healer`\n- `docker restart healer`\n\n## upgrading\n\n### update `ssb-pub` image\n\n```shell\ndocker pull ahdinosaur/ssb-pub\ndocker stop sbot\ndocker rm sbot\n# edit ~/ssb-pub-data/config if necessary\n./create-sbot\n```\n\n### migrating from `<2.2.0` to `2.2.0+`\n\nedit your `~/ssb-pub-data/config`, such that **`connections.incoming.net[].external`** changes from an array of strings to a single string.\n\n```diff\n{\n  \"connections\": {\n    \"incoming\": {\n      \"net\": [\n        {\n          \"scope\": \"public\",\n          \"host\": \"0.0.0.0\",\n-          \"external\": [\"hostname.yourdomain.tld\"],\n+          \"external\": \"hostname.yourdomain.tld\",\n          \"transform\": \"shs\",\n          \"port\": 8008\n        }\n      ]\n    },\n    \"outgoing\": {\n      \"net\": [\n        {\n          \"transform\": \"shs\"\n        }\n      ]\n    }\n  }\n}\n```\n\n### migrating from `v1` to `v2`\n\nfor a `v1` pub owner to update to the latest `v2` version of `ssb-pub`:\n\n1. pull the latest v2 image: `docker pull ahdinosaur/ssb-pub`\n2. stop sbot container: `docker stop sbot`\n3. remove sbot container: `docker rm sbot`\n4. [create `~/ssb-pub-data/config`](#step-2-setup-ssb-config)\n5. [re-create `./create-sbot`](#step-3-run-the-container)\n6. `./create-sbot`\n\ncheck things are working with `docker logs sbot` and `./sbot whoami` :tada:\n",
  "permissions": {
    "read": true,
    "write": false,
    "admin": false
  },
  "media_types": [
    "application/vnd.docker.container.image.v1+json"
  ],
  "content_types": [
    "image"
  ]
}