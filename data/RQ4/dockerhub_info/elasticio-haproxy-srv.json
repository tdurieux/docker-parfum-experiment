{
  "user": "elasticio",
  "name": "haproxy-srv",
  "namespace": "elasticio",
  "repository_type": "image",
  "status": 1,
  "status_description": "active",
  "description": "Flexible HAProxy auto configuration and auto service discovery for SkyDNS or Mesos-DNS ",
  "is_private": false,
  "is_automated": true,
  "can_edit": false,
  "star_count": 0,
  "pull_count": 318253,
  "last_updated": "2017-05-22T10:27:47.719193Z",
  "date_registered": "2015-11-19T09:34:11.16308Z",
  "collaborator_count": 0,
  "affiliation": null,
  "hub_user": "elasticio",
  "has_starred": false,
  "full_description": "# HAProxy SRV\n\nHAProxy-SRV is a templating solution that can flexibly reconfigure HAProxy based on the regular polling of the\nservice data from DNS (e.g. SkyDNS or Mesos-DNS) using SRV records.\n\nHAProxy-SRV also works with Round-Robin DNS A records, like Docker Swarm Mode.\n\nIt has a very simple logic - HA Proxy is configured based on the Handlebars template that is re-evaluated every time changes in DNS are detecting. Script is polling DNS and trigger a HA Proxy configuration refresh after changes.\n\nMade by [elastic.io](http://www.elastic.io) in Germany.\n\n# Quick start\n\nSimplest way to start it with Docker:\n\n```\ndocker run -d -p 8080:8080 -p 80:80 -v $PWD/haproxy.cfg.template:/src/haproxy.cfg.template elasticio/haproxy-srv:latest\n```\n\nif you want to see more DEBUG output then just add ``-e \"DEBUG=*\"``\n\n# How it works\n\nScript works very simple - after docker container started script parse and validates template, create a HAProxy configuration file in ``/src/haproxy.cfg`` and start HAProxy as a daemon. Every second (by default, can be configured via ``REFRESH_TIMEOUT`` env variable, default 1000) scirpt will execute a DNS lookup and re-evaluate the template, if result of evaluation is different from original configuration, original config will be overwritten and HAProxy reload will be triggered. HAProxy reload will not affect existing connections.\n\n# How to use it\n\nRecommended way to deploy is is to use [a Docker image](https://hub.docker.com/r/elasticio/haproxy-srv/). You would need to place your configuration file template, the simples way to do it is to build an image based on ``haproxy-srv`` image. \n\nCreate a new ``Dockerfile`` content like this:\n\n```\nFROM elasticio/haproxy-srv:latest\n\nCOPY haproxy.cfg.template /src/\n\nEXPOSE 80 8880\n```\n\nNote the ``EXPOSE`` part here, don't forget to specify exposed ports if your HAProxy configuration listens on any port different from ``80``.\n\nAs a next step create a template file, it should be placed under ``/src/haproxy.cfg.template`` in resulting Docker container and should have a [Handlebars](http://handlebarsjs.com/) syntax with one little extension (see below). Here is the sample:\n\n```hbs\nglobal\n    user root\n    group root\n\n    # Stats required for this module to work\n    # https://github.com/observing/haproxy#haproxycfg\n    stats socket /tmp/haproxy.sock level admin\n\ndefaults\n    mode    http\n    timeout connect 5000\n    timeout client  50000\n    timeout server  50000\n\n{{#dns-srv \"_frontend._tcp.marathon.mesos\"}}\n    frontend sample\n        bind 0.0.0.0:80\n        balance roundrobin\n        option http-server-close\n        option forwardfor\n        {{#each this}}\n            server frontend-{{@index}} {{ip}}:{{port}} check weight {{weight}}\n        {{/each}}\n{{/dns-srv}}\n\n# Standard DNS Round-Robin\n{{#dns-a \"cluster.example.com\"}}\n  frontend sample2\n    bind 0.0.0.0:8080\n    {{#each this}}\n      server {{name}} {{ip}}:80 check\n    {{/each}}\n{{/dns-a}}\n\n# Docker Swarm Mode example\n{{#dns-a \"tasks.myservice\"}}\n  frontend sample3\n    bind 0.0.0.0:8081\n    {{#each this}}\n      server {{name}} {{ip}}:80 check\n    {{/each}}\n{{/dns-a}}\n```\n\nIt could be any valid HAProxy configuration with one mandatory addition:\n\n```\nstats socket /tmp/haproxy.sock level admin\n```\n\nto trigger HAProxy restart the script inside the file will communicate with HAProxy daemon via socket ```/tmp/haproxy.sock```.\n\n# Template\n\nConfiguration template is a normal [Handlebars](http://handlebarsjs.com/) so that you could use any of the feature of this template language. There is however one additional helper ``dns-srv`` implemented. This helper takes one string parameter and will execute a [DNS SRV lookup](https://nodejs.org/api/dns.html#dns_dns_resolvesrv_hostname_callback) to fetch an SRV record(s). After SRV Record lookup, for each SRV record a [DNS resolution](https://nodejs.org/api/dns.html#dns_dns_resolve_hostname_rrtype_callback) to find the IP will be made.\n\nThis template will give you an idea how to use it:\n\n```hbs\n# Your usual configuration is here\n{{#dns-srv \"_frontend._tcp.marathon.mesos\"}}\n    # This block will only be rendered when _frontend._tcp.marathon.mesos was found in DNS\n    {{#each this}}\n        # This piece will be rendered for each SRV entry from DNS\n        SRV Name is {{name}}\n        SRV Weight is {{weight}}\n        SRV Port is {{port}}\n        IP for SRV Name is {{ip}}\n    {{/each}}\n{{/dns-srv}}\n# rest of your configuration\n```\n\nTypical use-case for Msos-DNS you can see above.\n\n# Docker Swarm Mode Guide\n\nFirst, create a network, and web service:\n\n```\n$ docker network create -d overlay --subnet 10.1.1.0/24 my_net\n$ docker service create --replicas 2 --name my_web --network my_net nginx\n```\n\nBy default, services are created as `--endpoint-mode vip`.  If you use VIP mode,\nthen the Round-Robin DNS name is `tasks.my_web`.  If you use `--endpoint-mode dnsrr`\nthen the `my_web` DNS name will work in the HAProxy `dns-a` template.\n\nFollow the **How to use it** section above on creating a new proxy image using\na custom haproxy.cfg.template.  For the `dns-a` section use:\n\n```\n{{#dns-a \"tasks.my_web\"}}\n  # other configs\n  backend my_web\n  {{#each this}}\n    server {{name}} {{ip}}:80 check\n  {{/each}}\n{{/dns-a}}\n```\n\n```\n$ mkdir my_proxy ; cd my_proxy\n#  (make a new Dockerfile)\n$ docker build -t my_proxy_image .\n```\n\nFire up a new proxy, publishing port 80 to something unique on each docker host node\n\n```\n$ docker service create --name my_proxy --network my_net -p 8081:80 my_proxy_image\n```\n\nOptionally, use some other method for sharing & binding the haproxy.cfg.template file\ninto the `elasticio/haproxy-srv` image.\n\n# Debugging\n\nJust set the ``DEBUG`` environment variable into ``*`` to see detailed logging.\n\n# TODOs\n\nPRs are welcome for\n * Bug fixes\n * Unit tests\n * Gulp or Grunt-based builds\n * CircleCI config for continous integration\n",
  "permissions": {
    "read": true,
    "write": false,
    "admin": false
  },
  "media_types": [
    "application/vnd.docker.container.image.v1+json",
    "application/vnd.docker.distribution.manifest.v1+prettyjws"
  ],
  "content_types": [
    "image"
  ]
}