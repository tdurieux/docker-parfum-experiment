{
  "user": "bobrik",
  "name": "zoidberg",
  "namespace": "bobrik",
  "repository_type": "image",
  "status": 1,
  "status_description": "active",
  "description": "",
  "is_private": false,
  "is_automated": true,
  "can_edit": false,
  "star_count": 1,
  "pull_count": 807,
  "last_updated": "2017-08-29T15:41:25.303004Z",
  "date_registered": "2015-05-25T11:27:39.204737Z",
  "collaborator_count": 0,
  "affiliation": null,
  "hub_user": "bobrik",
  "has_starred": false,
  "full_description": "# Zoidberg\n\nZoidberg provides per app service discovery for Mesos with pluggable\ndiscovery mechanisms. It allows you to shift traffic from version\nto version in small percentages to ensure smooth deployments. It also\nallows usual service discovery where it's up to framework how to\nschedule tasks to avoid downtime.\n\n## Compatible load balancers\n\n* [zoidberg-nginx](https://github.com/bobrik/zoidberg-nginx):\nsupports upstream list updates without spawning new workers,\nproviding rich module ecosystem from nginx, including lua modules.\n\n* [zoidberg-tcp](https://github.com/bobrik/zoidbergtcp):\nzero-configuration TCP proxy that supports automatic dynamic service creation.\n\n## Stability\n\nEven though Zoidberg is deployed at scale (think 100s of Mesos slaves),\nit is still stabilizing. Please see release notes before upgrading.\n\n## Architecture\n\nZoidberg consists of several parts:\n\n* Application finders responsible for finding apps.\n* Load balancer finders responsible for finding load balancers.\n* Load balancers are responsible for providing well known endpoints.\n* Explorer is bounded with discoverer and responsible for version management.\n\nIt is possible to run several independent Zoidberg instances on a single cluster.\nEach Zoidberg instance is only responsible for making sure that his group of\nload balancers knows about current state of application. Different Zoidberg instances\ncan manage a single or completely independent groups of load balancers.\n\n### Finders\n\nFinder is a mechanism to discover load balancers and application tasks.\n\n### Application finders\n\nApplication finders discover apps running on your cluster.\n\nThe following application finders are available:\n\n* `marathon`\n* `mesos`\n\nYou must specify application finder with `-application-finder` cli argument.\n\n#### Mesos and Marathon finders\n\nBoth `marathon` and `mesos` finders are label based finders, which means\nthat they rely on labels to discover applications running on the cluster.\n\nMake sure to use the following labels for your apps:\n\n* `zoidberg_port_X_app_name` defines application name.\n* `zoidberg_port_X_app_version` defines application version, defaults to `\"1\"`.\n* `zoidberg_port_X_balanced_by` defines load balancer name for application.\n* `zoidberg_port_X_meta_*` defines metadata labels for app, available in `meta`.\n\nHere `X` is the port index. Each port creates a separate app so you can\nexpose them through different load balancers.\n\nArguments for `marathon` finder:\n\n* `-application-finder-marathon-url` marathon url in `http://host:port[,host:port]` format.\n\nArguments for `mesos` finder:\n\n* `-application-finder-mesos-masters` mesos masters in `http://host:port[,http://host:port]` format.\n\n### Load balancer finders\n\nLoad balancer finders discover load balancers available on your cluster.\n\nThe following load balancer finders are available:\n\n* `marathon`\n* `mesos`\n* `static`\n\nYou must specify load balancer finder with `-balancer-finder` cli argument.\n\n#### Static finder\n\n`static` finder has a predefined list of applications.\n\nArguments:\n\n* `-balancer-finder-static-balancers` list of balancers in `host:port[,host:port]` format.\n\n#### Mesos and Marathon finders\n\nBoth `marathon` and `mesos` finders are label based finders, which means\nthat they rely on labels to discover balancers available on the cluster.\n\nMake sure to use the following labels for your apps that are load balancers:\n\n* `zoidberg_balancer_for` defines load balancer name.\n\nArguments for `marathon` finder:\n\n* `-balancer-finder-marathon-url` marathon url in `http://host:port[,host:port]` format.\n\nArguments for `mesos` finder:\n\n* `-balancer-finder-mesos-masters` mesos masters in `http://host:port[,http://host:port]` format.\n\n## Running\n\nIn addition to finder arguments, you also have to specify the following:\n\n* `-name` Zoidberg instance name for identification.\n* `-host` host to listen on for API.\n* `-port` port to listen on for API.\n* `-zk` Zookeeper connection string for state persistence.\n* `-balancer` balancer name to tie apps and load balancers.\n\nNote that instead of cli arguments you can also use environment variables,\njust drop the first `-`, replace and `-` with `_` and capitalize argument name.\nFor example, instead of specifying `-application-finder marathon` you could\nset environment variable `APPLICATION_FINDER=marathon`.\n\nZoidberg is distributed as a docker image, below is an example how to run it\nagainst Marathon running on a local Mesos cluster. Ttake a look at\n[mesos-compose](https://github.com/bobrik/mesos-compose) to find out more about\nrunning local mesos cluster.\n\n\n```\ndocker run --rm -it --net host \\\n    -e HOST=0.0.0.0 \\\n    -e PORT=12345 \\\n    -e ZK=127.0.0.1:2181/zoidberg \\\n    -e APPLICATION_FINDER=marathon \\\n    -e APPLICATION_FINDER_MARATHON_URL=http://172.16.91.128:8080 \\\n    -e APPLICATION_FINDER_MARATHON_BALANCER=local \\\n    -e BALANCER_FINDER=static \\\n    -e BALANCER_FINDER_STATIC_BALANCERS=127.0.0.1:1234 \\\n    bobrik/zoidberg:0.6.0\n```\n\n### Zoidberg API\n\nZoidberg provides the next HTTP API:\n\n* `PUT /versions/{{app}}` or `POST /versions/{{app}}` with json like this:\n\n```json\n{\n  \"1\": {\n    \"weight\": 2\n  }\n}\n```\n\n`{{app}}` in URL should be replaced with the name of an actual app.\n\n* `GET /state` that returns full state (all set versions).\n\n* `GET /discovery` that returns json like this:\n\n```json\n{\n  \"balancers\": [\n    {\n      \"host\": \"192.168.0.7\",\n      \"port\": 31631\n    }\n  ],\n  \"apps\": {\n    \"myapp\": {\n      \"name\": \"myapp\",\n      \"servers\": [\n        {\n          \"host\": \"192.168.0.7\",\n          \"port\": 31000,\n          \"ports\": [31000],\n          \"version\": \"1\"\n        }\n      ],\n      \"meta\": {}\n    }\n  }\n}\n```\n\n* `GET /_health` that returns 2xx code if everything looks good\n\n## Why?\n\n![zoidberg](zoidberg.jpg)\n",
  "permissions": {
    "read": true,
    "write": false,
    "admin": false
  },
  "media_types": [
    "application/vnd.docker.distribution.manifest.v1+prettyjws",
    "application/vnd.docker.container.image.v1+json"
  ],
  "content_types": [
    "image"
  ]
}