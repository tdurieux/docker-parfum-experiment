{
  "user": "ebarault",
  "name": "proftpd-docker",
  "namespace": "ebarault",
  "repository_type": "image",
  "status": 1,
  "status_description": "active",
  "description": "proftpd server configured with postgresql-managed users and ftps support",
  "is_private": false,
  "is_automated": true,
  "can_edit": false,
  "star_count": 1,
  "pull_count": 1042,
  "last_updated": "2017-11-30T17:07:39.119451Z",
  "date_registered": "2017-09-11T16:17:02.950192Z",
  "collaborator_count": 0,
  "affiliation": null,
  "hub_user": "ebarault",
  "has_starred": false,
  "full_description": "# proftpd-docker\n\n## Requirements\n\n- docker\n- (docker-compose)\n- PostgreSQL instance\n- Creating the necessary tables on the PostgreSQL instance using the included migration: `sql/proftp_tables.sql`.\n- openssl (for creating passwords)\n\n## Running with docker-compose, building image\n\n* Create a `.env` containing the requirements environnement variables\n\nThis file should be located next to the provided `docker-compose.yml` file.\nThe `.env.tpl` file can be used to bootstrap the `.env` file.\n\nThe required/optional parameters are described here after:\n\n- **FTP_DB_HOST**: db hostname or ip address, required\n- **FTP_DB_NAME**: db name, required\n- **FTP_DB_USER**: db user, required\n- **FTP_DB_PASS**: db password, required\n- **FTP_DB_ADMIN**: db admin user, required if FTP_PG_MIGRATE=ON\n- **FTP_DB_ADMIN_PASS**: db admin password, required if FTP_PG_MIGRATE=ON\n- **FTP_PG_MIGRATE**: ON/OFF, activate/deactivate automatic creation of tables required by proftpd in postgresql database\n- **FTP_VERBOSE**: ON/UNDEF, activate/deactivate logging to files\n- **FTP_ROOT**: /path/to/ftp/root, optional, defaults to /data/ftp_root\n- **LOGS**: /path/to/log/dir, optional, defaults to /var/log/proftpd\n- **SALT**: /path/to/salt/file, optional, defaults to `./.salt`\n- **MOD_TLS**: ON/OFF, activate/deactivate module mod_tls, optional, defaults to OFF\n- **MOD_TLS_CONF**: /path/to/mod_tls.conf, optional, defaults to included tls.conf\n- **CERTS**: /path/to/tls/certs/dir, optional, defaults to `./certs`\n- **MOD_EXEC**: ON/OFF, activate/deactivate module mod_exec, optional, defaults to OFF\n- **MOD_EXEC_DIR**: /path/to/mod/exec/dir, optional, defaults to `./exec`\n- **MOD_VROOT**: ON/OFF, activate/desactivate module_vroot, optional, default to OFF\n- **MOD_VROOT_CONF**: /path/to/mod_vroot.conf, optional, defaults to included vroot.conf\n\n* Build and run the container as follows:\n```sh\ndocker-compose build\ndocker-compose up -d\n```\n\n### Configuring postgreSQL connection\nRefer to this [link](http://www.proftpd.org/docs/howto/SQL.html) and on `sql/proftpd_tables.sql` file for detailed information on required SQL data model.\n\nThe migration should be run by a user with owner privilege on the designated database. The script supposes a second user exists beforehand, whose privileges are managed by the migration.\n\nThe `FTP_DB_HOST`, `FTP_DB_NAME`, `FTP_DB_USER` and `FTP_DB_PASS` env vars should be provided to the container to configure proftpd's connection with the postgreSQL instance.\n\n### Automatic migration\nEnv vars `FTP_DB_ADMIN` and `FTP_DB_ADMIN_PASS` can also be provided combined with option `FTP_PG_MIGRATE=ON` to automatically create the tables required by proftpd in the postgreSQL database.\n\n### Create users and groups\nFirst create a group, or make sure an appropriate group already exists. The main attributes for groups are:\n- **groupname** (unique)\n- **gid** (unique, in [999-65533] as per the server config)\n\n```sql\nINSERT INTO ftp.groups\n(groupname, gid)\nVALUES('users', 999);\n```\n\nThen create the user. The required attributes are:\n- **userid** (unique)\n- **passwd** (salted sh256/512 hash, covered in next section)\n- **uid** (unique, in [999-65533] as per the server config)\n- **gid** (referencing an existing group id)\n- **home** (absolute path to user's home `/srv/ftp/...` , created at first connection if required)\n\n```sql\nINSERT INTO ftp.users\n(userid, passwd, uid, gid, homedir)\nVALUES('JonDoe', 'am4Q3ukBh...QXg2UeRms=', 999, 999, '/srv/ftp/homes/jon_doe');\n```\n\n### User's passwords\nPasswords are stored in the db as salted SHA256/512 digests, in hex64 encoding.\n\nA random crypto string, known as **salt**, is used to mitigate dictionnary attacks and should be provided to the ftp server using the `SALT` env var.\n\nThe `SALT` env var let you define the path to a salt file mounted as a bound volume in the docker container. By default the container will look at a `.salt` file stored along the Dockerfile.\n\nTo generate an encrypted password use the following command:\n```sh\n{ echo -n myPassword; echo -n $(cat .salt); } | openssl dgst -binary -sha256 | openssl enc -base64 -A\n```\n\nwhere `.salt` is a file containing the **salt**.\n\nThe helper script `genpass.sh` is also provided in this distribution:\nThe usage is as follows:\n```sh\npackage -s path/to/salt password\n```\n\n### Server address masquerading\nThe server can be instructed to send back to the client a specified IP address, or hostname. This is useful when dealing with NAT gateways, or boad balancers where passive mode is required.\n\nThe env var `MASQ_ADDR` can be set to either a given IP address or hostame, or to the value `AWS` in which case the server the server public ip will be automatically retrieved (if available) from AWS EC2 instance's metadata to set the env var.\n\n### Configuring ftp root directory\nThe ftp root (home for all user's directories) can be configured using the `FTP_ROOT` env variable. Otherwise it default to the directory `/data/ftp_root` of the docker's host.\n\n### Configuring proftpd logs directory\nWhen setting verbose mode ON with env var `FTP_VERBOSE`, the log directory can be configured using the `LOGS` env variable. Otherwise it default to the directory `/var/log/proftpd` of the docker's host.\n\n### Module mod_tls\nWhen enabling the module with env var MOD_TLS=ON, a module configuration file and associated certificates should be provided as binded volumes. Default included configuration expects a self-signed TLS certificate `proftpd.cert.pem` and it's key file `proftpd.key.pem`.\n\nA custom mod_tls configuration can be provided as a bound volume whose path is defined by the `MOD_TLS_CONF` env var.\n\nCertificates should be stored in a directory accessible by the docker image, whose path is to be provided as the `CERTS` env var.\n\n### Module mod_exec\nWhen enabling the module with env var MOD_EXEC=ON, a `exec.conf` file containing the module configuration should be provided, as per the [module's documentation](http://www.proftpd.org/docs/contrib/mod_exec.html).\n\nThis file should be stored in a directory accessible by the docker image, whose path is to be provided as the `MOD_EXEC_CONF` env var.\n\n### Module mod_vroot\nWhen enabling the module with env var MOD_VROOT=ON, a vroot.conf file containing the module configuration should be provided, as per the [module's documentation](http://www.proftpd.org/docs/contrib/mod_vroot.html)\n\nThis file can be provided as a bound volume whose path is defined by the `MOD_VROOT_CONF` env var.\n\n## Running with docker-compose, pulling image from docker hub\n\nWith `docker-compose-image.yml` an example is provided on how to integrate the proftpd-docker image hosted on docker hub inside a larger set-up, orchestrated with docker-compose.\n\nLiterally the main point is to declare the volume attachments inside the `docker-compose.yml` file as in:\n```yml\nvolumes:\n  - type: bind\n    source: \"${LOGS:-/var/log/proftpd}\"\n    target: /var/log/proftpd\n```\n\nThe example relies on bound volumes but again any kind of volume you do.\n\n_**Just mind:**_\n- covering all required volumes as described in the **Running with docker** section,\n- exposing any required port (or dropping `network_mode: host`)\n- passing the env vars (with env_file or environment directive, or plain env vars)\n\nwhen ok, run `docker-compose -f docker-compose-image.yml run`\n**...and you're all set!**\n\n\n## Running with docker\n\nFollowing the previous sections, a number a env vars and volumes needs to be specified right to the cli when running the server with docker:\n\n- **Env vars**:\n  - `FTP_DB_HOST`\n  - `FTP_DB_NAME`\n  - `FTP_DB_USER`\n  - `FTP_DB_PASS`\n  - `FTP_DB_ADMIN`\n  - `FTP_DB_ADMIN_PASS`\n  - `FTP_PG_MIGRATE`\n  - `FTP_VERBOSE`\n  - `MASQ_ADDR`\n  - `MOD_TLS`\n  - `MOD_EXEC`\n  - `MOD_VROOT`\n- **Volumes**:\n  - **/srv/ftp** (_ftp root containing users' homes_)\n  - **/var/log/proftpd** (_server's logs_)\n  - **/etc/proftpd/.salt** (_`.salt` file_)\n  - **/etc/proftpd/tls.conf** (_mod_tls config file_)\n  - **/etc/proftpd/certs** (_dir containing server's certificates_)\n  - **/etc/proftpd/exec** (_dir containing server's mod_exec conf and scripts_)\n  - **/etc/proftpd/vroot.conf** (_mod_vroot config file_)\n\nThe following `docker run` example assumes bound volumes, but the anykind of docker volume config can be used.\n\n* Build image:\n```sh\ndocker build -t proftpd .\n```\n* Start container and provide the necessary env vars and volume information:\n```sh\ndocker run --name proftpd --net=host \\\n  -e FTP_DB_HOST=mydb.com -e FTP_DB_NAME=db_name -e FTP_DB_USER=db_user -e FTP_DB_PASS=db_password \\\n  -e MASQ_ADDR:AWS \\\n  -v /data/ftp_root:/srv/ftp \\\n  -v /var/log/proftpd:/var/log/proftpd \\\n  -v $(pwd)/.salt:/etc/proftpd/.salt \\\n  -e MOD_TLS=ON \\\n  -v $(pwd)/tls.conf:/etc/proftpd/tls.conf \\\n  -v $(pwd)/certs:/etc/proftpd/certs \\\n  -e MOD_EXEC=ON \\\n  -v $(pwd)/exec:/etc/proftpd/exec \\\n  -e MOD_VROOT=ON \\\n  -v $(pwd)/vroot.conf:/etc/proftpd/vroot.conf\n\t-d proftpd\n```\n\n_**Note**_: a Makefile is also provided in the repository to help testing the `docker run` syntax. The Makefile contains a special function `make env_run` leveraging the exact same `.env` file expected by **docker-compose**. Just make sure the `.env` file is located right next to the `Makefile` to make it work.\n\n## Testing with curl\n\n* Listing files:\n```sh\ncurl -v --ssl --insecure --disable-epsv ftp://my-ftp-server.com:21 -u user:pwd\n```\n* Uploading files:\n```sh\ncurl -v -T </path/to/file> --ssl --insecure --disable-epsv ftp://my-ftp-server.com:21 -u user:pwd\n```\n",
  "permissions": {
    "read": true,
    "write": false,
    "admin": false
  },
  "media_types": [
    "application/vnd.docker.container.image.v1+json"
  ],
  "content_types": [
    "image"
  ]
}