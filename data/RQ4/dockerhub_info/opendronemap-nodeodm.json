{
  "user": "opendronemap",
  "name": "nodeodm",
  "namespace": "opendronemap",
  "repository_type": "image",
  "status": 1,
  "status_description": "active",
  "description": "Automated build for NodeODM",
  "is_private": false,
  "is_automated": true,
  "can_edit": false,
  "star_count": 10,
  "pull_count": 5364782,
  "last_updated": "2023-01-04T00:16:28.28714Z",
  "date_registered": "2018-11-30T19:02:02.278168Z",
  "collaborator_count": 0,
  "affiliation": null,
  "hub_user": "opendronemap",
  "has_starred": false,
  "full_description": "# NodeODM\n\n[![Build Status](https://travis-ci.org/OpenDroneMap/NodeODM.svg?branch=master)](https://travis-ci.org/OpenDroneMap/NodeODM)\n\nNodeODM is a [standard API specification](https://github.com/OpenDroneMap/NodeODM/blob/master/docs/index.adoc) for processing aerial images with engines such as [ODM](https://github.com/OpenDroneMap/ODM). The API is used by clients such as [WebODM](https://github.com/OpenDroneMap/WebODM), [CloudODM](https://github.com/OpenDroneMap/CloudODM) and [PyODM](https://github.com/OpenDroneMap/PyODM). This repository contains a performant, production-ready reference implementation written in NodeJS.\n\n![image](https://user-images.githubusercontent.com/1951843/78455986-4805ab80-766f-11ea-8a79-1691e062600c.png)\n\n## Getting Started\n\nWe recommend that you setup NodeODM using [Docker](https://www.docker.com/).\n\n* From the Docker Quickstart Terminal (Windows / OSX) or from the command line (Linux) type:\n```\ndocker run -p 3000:3000 opendronemap/nodeodm\n```\n\n* If you're on Windows/OSX, find the IP of your Docker machine by running this command from your Docker Quickstart Terminal:\n\n```\ndocker-machine ip\n```\n\nLinux users can connect to 127.0.0.1.\n\n* Open a Web Browser to `http://<yourDockerMachineIp>:3000`\n* Load [some images](https://github.com/OpenDroneMap/ODMdata)\n* Press \"Start Task\"\n* Go for a walk :)\n\nIf the computer running NodeODM is using an old or 32bit CPU, you need to compile OpenDroneMap from sources and setup NodeODM natively. You cannot use docker. Docker images work with CPUs with 64-bit extensions, MMX, SSE, SSE2, SSE3 and SSSE3 instruction set support or higher. Seeing a `Illegal instruction` error while processing images is an indication that your CPU is too old. \n\n## API Docs\n\nSee the [API documentation page](https://github.com/OpenDroneMap/NodeODM/blob/master/docs/index.adoc).\n\nSome minor breaking changes exist from version `1.x` to `2.x` of the API. See [migration notes](https://github.com/OpenDroneMap/NodeODM/blob/master/MIGRATION.md).\n\n## Run Tasks from the Command Line\n\nYou can use [CloudODM](https://github.com/OpenDroneMap/CloudODM) to run tasks with NodeODM from the command line.\n\n## Using an External Hard Drive\n\nIf you want to store results on a separate drive, map the `/var/www/data` folder to the location of your drive:\n\n```bash\ndocker run -p 3000:3000 -v /mnt/external_hd:/var/www/data opendronemap/nodeodm\n```\n\nThis can be also used to access the computation results directly from the file system.\n\n## Using GPU Acceleration for SIFT processing inside NodeODM\nSince the ODM has support [of GPU acceleration](https://github.com/OpenDroneMap/ODM#gpu-acceleration) you can use another base image for GPU processing.\n\nTo use this feature, you need to use the `opendronemap/nodeodm:gpu` docker image instead of `opendronemap/nodeodm` and you need to pass the `--gpus all` flag:\n```bash\ndocker run -p 3000:3000 --gpus all opendronemap/nodeodm:gpu\n```\n\nThe SIFT GPU implementation is OpenCL-based, so should work with most graphics card (not just NVIDIA).\n\nIf you have an NVIDIA card, you can test that docker is recognizing the GPU by running:\n\n```\ndocker run --rm --gpus all nvidia/cuda:10.0-base nvidia-smi\n```\n\nIf you see an output that looks like this:\n\n```\nFri Jul 24 18:51:55 2020       \n+-----------------------------------------------------------------------------+\n| NVIDIA-SMI 440.82       Driver Version: 440.82       CUDA Version: 10.2     |\n|-------------------------------+----------------------+----------------------+\n| GPU  Name        Persistence-M| Bus-Id        Disp.A | Volatile Uncorr. ECC |\n| Fan  Temp  Perf  Pwr:Usage/Cap|         Memory-Usage | GPU-Util  Compute M. |\n```\n\nYou're in good shape!\n\nSee https://github.com/NVIDIA/nvidia-docker and https://docs.nvidia.com/datacenter/cloud-native/container-toolkit/install-guide.html#docker for information on docker/NVIDIA setup.\n\n### Windows Bundle\n\nNodeODM can run as a self-contained executable on Windows without the need for additional dependencies (except for [ODM](https://github.com/OpenDroneMap/ODM) which needs to be installed separately). You can download the latest `nodeodm-windows-x64.zip` bundle from the [releases](https://github.com/OpenDroneMap/NodeODM/releases) page. Extract the contents in a folder and run:\n\n```bash\nnodeodm.exe --odm_path c:\\path\\to\\ODM\n```\n\n### Run it Natively\n\nIf you are already running [ODM](https://github.com/OpenDroneMap/ODM) on Ubuntu natively you can follow these steps:\n\n1) Install Entwine: https://entwine.io/quickstart.html#installation\n \n2) Install node.js, npm dependencies, 7zip and unzip:\n\n```bash\nsudo curl --silent --location https://deb.nodesource.com/setup_6.x | sudo bash -\nsudo apt-get install -y nodejs python-gdal p7zip-full unzip\ngit clone https://github.com/OpenDroneMap/NodeODM\ncd NodeODM\nnpm install\n```\n\n3) Start NodeODM\n\n```bash\nnode index.js\n```\n\nYou may need to specify your ODM project path to start the server:\n\n```\nnode index.js --odm_path /home/username/OpenDroneMap\n```\n\nIf you want to start node ODM on a different port you can do the following:\n\n```\nnode index.js --port 8000 --odm_path /home/username/OpenDroneMap\n```\n\nFor other command line options you can run:\n\n```\nnode index.js --help\n```\n\nYou can also specify configuration values via a JSON file:\n\n```\nnode index.js --config config.default.json\n```\n\nCommand line arguments always take precedence over the configuration file.\n\n### Run it using PM2\n\nThe app can also be run as a background process using the [pm2 process manager](https://github.com/Unitech/pm2), which can also assist you with system startup scripts and process monitoring.\n\nTo install pm2, run (using `sudo` if required):\n```shell\nnpm install pm2 -g\n```\nThe app can then be started using\n```shell\npm2 start processes.json\n```\nTo have pm2 started on OS startup run\n```shell\npm2 save\npm2 startup\n```\nand then run the command as per the instructions that prints out. If that command errors then you may have to specify the system (note that systemd should be used on CentOS 7). Note that if the process is not running as root (recommended) you will need to change `/etc/init.d/pm2-init.sh` to set `export PM2_HOME=\"/path/to/user/home/.pm2\"`, as per [these instructions](\nhttp://www.buildsucceeded.com/2015/solved-pm2-startup-at-boot-time-centos-7-red-hat-linux/)\n\nYou can monitor the process using `pm2 status`.\n\n### Test Mode\n\nIf you want to make a contribution, but don't want to setup OpenDroneMap, or perhaps you are working on a Windows machine, or if you want to run automated tests, you can turn test mode on:\n\n```\nnode index.js --test\n```\n\nWhile in test mode all calls to OpenDroneMap's code will be simulated (see the /tests directory for the mock data that is returned).\n\n### Test Images\n\nYou can find some test drone images [here](https://github.com/dakotabenjamin/odm_data).\n\n## What if I need more functionality?\n\nNodeODM is meant to be a lightweight API. If you are looking for a more comprehensive solution to drone mapping, check out [WebODM](https://github.com/OpenDroneMap/WebODM), which uses NodeODM for processing.\n\n## Contributing\n\nMake a pull request for small contributions. For big contributions, please open a discussion first. Please use ES6 syntax while writing new Javascript code so that we can keep the code base uniform.\n\n## Roadmap\n\nSee the [list of wanted features](https://github.com/OpenDroneMap/NodeODM/issues?q=is%3Aopen+is%3Aissue+label%3A%22new+feature%22).\n",
  "permissions": {
    "read": true,
    "write": false,
    "admin": false
  },
  "media_types": [
    "application/vnd.docker.container.image.v1+json",
    "application/vnd.docker.distribution.manifest.list.v2+json"
  ],
  "content_types": [
    "image"
  ]
}