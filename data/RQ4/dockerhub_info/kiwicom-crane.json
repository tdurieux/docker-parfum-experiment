{
  "user": "kiwicom",
  "name": "crane",
  "namespace": "kiwicom",
  "repository_type": "image",
  "status": 1,
  "status_description": "active",
  "description": "GitLab CI + Rancher upgrades",
  "is_private": false,
  "is_automated": true,
  "can_edit": false,
  "star_count": 0,
  "pull_count": 1320590,
  "last_updated": "2019-08-12T17:43:23.744809Z",
  "date_registered": "2017-04-07T10:12:04.013435Z",
  "collaborator_count": 0,
  "affiliation": null,
  "hub_user": "kiwicom",
  "has_starred": false,
  "full_description": "# crane\n\n![crane logo - an origami crane](logo.png)\n\nA GitLab CI ready image to upgrade services in Rancher.\nSee the [whole story on our blog at code.kiwi.com](https://code.kiwi.com/announcing-crane-e8ce911b187b)!\n\n[![Python: 3.7](https://img.shields.io/badge/python-3.7-blue.svg)](https://python.org)\n[![Code style: black](https://img.shields.io/badge/code%20style-black-black.svg)](https://github.com/ambv/black)\n[![Discord](https://img.shields.io/discord/427417507276783616.svg)](https://discord.gg/AtwevVQ)\n[![Gitlab pipeline status (branch)](https://img.shields.io/gitlab/pipeline/kiwicom/crane/master.svg)](https://gitlab.com/kiwicom/crane/pipelines)\n\n## Usage\n\n1. Deploy your application on Rancher manually,\n   with an image tagged with a git reference\n   (our recommendation is to use the commit SHA, but you can also use git tags.)\n2. Get a Rancher Environment API key\n   and add the API keypair as secret variables in the project,\n   named `RANCHER_ACCESS_KEY` and `RANCHER_SECRET_KEY`.\n3. Also add `RANCHER_URL` and `RANCHER_ENV_ID`,\n   preferably in secret variables, or in `.gitlab-ci.yml`.\n   (In the example URL `https://rancher.example.com/env/1a81/apps/stacks/1e551/services/1s1456/containers`\n   the environment ID is `1a81`. This ID always starts with `1a`.)\n4. Add something like this to your `.gitlab-ci.yml`:\n\n   ```yaml\n   stages:\n     # [...]\n     - deploy\n\n   deploy-production:\n     stage: deploy\n     image: kiwicom/crane:3.2.1\n     script:\n       - crane --stack my-app --service api --service worker\n     environment:\n       name: production\n       url: https://my-app.example.com/\n     when: manual\n   ```\n\n## Settings\n\n| CLI flag                | Environment variable        | Required | Default |\n| ----------------------- | --------------------------- | -------- | ------- |\n| `--url`                 | `RANCHER_URL`               | Yes      |         |\n| `--access-key`          | `RANCHER_ACCESS_KEY`        | Yes      |         |\n| `--secret-key`          | `RANCHER_SECRET_KEY`        | Yes      |         |\n| `--env`                 | `RANCHER_ENV_ID`            | Yes      |         |\n| `--stack`               | `RANCHER_STACK_NAME`        | Yes      |         |\n| `--new-commit`          | `CRANE_NEW_COMMIT`          | No       | HEAD    |\n| `--new-image`           | `CRANE_NEW_IMAGE`           | No       | None    |\n| `--service`             | `RANCHER_SERVICE_NAME`      | No       | app     |\n| `--sidekick`            | `RANCHER_SIDEKICK_NAME`     | No       | None    |\n| `--batch-size`          | `CRANE_BATCH_SIZE`          | No       | 1       |\n| `--batch-interval`      | `CRANE_BATCH_INTERVAL`      | No       | 2       |\n| `--start-first`         | `CRANE_START_FIRST`         | No       | False   |\n| `--sleep-after-upgrade` | `CRANE_SLEEP_AFTER_UPGRADE` | No       | 0       |\n| `--manual-finish`       | `CRANE_MANUAL_FINISH`       | No       | False   |\n\n## Integrations & Extensions\n\n### Slack\n\nWhen `--slack-token` is set,\ncrane can post an announcement to `--slack-channel`\nwith details about the ongoing deployment.\nYou can use `--slack-link` to add useful URLs to this announcements\nsuch as Datadog dashboards, Sentry issues, or the project repository.\n\n| CLI flag          | Environment variable  | Details                      |\n| ----------------- | --------------------- | ---------------------------- |\n| `--slack-token`   | `CRANE_SLACK_TOKEN`   | Slack API token              |\n| `--slack-channel` | `CRANE_SLACK_CHANNEL` | Slack channel to announce in |\n| `--slack-link`    | `CRANE_SLACK_LINK`    | links to mention in Slack    |\n\n### Sentry\n\nWith `--sentry-webhook`, crane can post release details to Sentry.\n[Release tracking](https://docs.sentry.io/learn/releases/#what-is-a-release) is useful\nto provide additional context to errors tracked in Sentry.\n\n| CLI flag           | Environment variable   | Details                    |\n| ------------------ | ---------------------- | -------------------------- |\n| `--sentry-webhook` | `CRANE_SENTRY_WEBHOOK` | Sentry release webhook URL |\n\n### Datadog\n\nIf you set an API key with `--datadog-key`,\nCrane will post successful and failed releases to your Datadog event feed.\nThese events can then be marked on charts and displayed on dashboards.\n\n| CLI flag        | Environment variable | Details                      |\n| --------------- | -------------------- | ---------------------------- |\n| `--datadog-key` | `CRANE_DATADOG_KEY`  | URLs to post release info to |\n\n### Generic webhooks\n\nWith the `--webhook-url` option,\nyou can specify URLs that crane will send release info to,\nin its own format.\nOne use for this is for analytics;\nif somebody sets up a listener for these events,\nthey'll have the data needed to identify correlations\nbetween releases and changes in user behavior or sales numbers.\n\n| CLI flag          | Environment variable  | Details                      |\n| ----------------- | --------------------- | ---------------------------- |\n| `--webhook-url`   | `CRANE_WEBHOOK_URL`   | URLs to post release info to |\n| `--webhook-token` | `CRANE_WEBHOOK_TOKEN` | Auth token for webhooks      |\n",
  "permissions": {
    "read": true,
    "write": false,
    "admin": false
  },
  "media_types": [
    "application/vnd.docker.container.image.v1+json"
  ],
  "content_types": [
    "image"
  ]
}