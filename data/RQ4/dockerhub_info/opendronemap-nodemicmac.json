{
  "user": "opendronemap",
  "name": "nodemicmac",
  "namespace": "opendronemap",
  "repository_type": "image",
  "status": 1,
  "status_description": "active",
  "description": "A Lightweight REST API to Access MICMAC Photogrammetry and SFM Engine.",
  "is_private": false,
  "is_automated": false,
  "can_edit": false,
  "star_count": 0,
  "pull_count": 740,
  "last_updated": "2022-09-03T22:24:37.467464Z",
  "date_registered": "2022-05-26T04:01:58.553551Z",
  "collaborator_count": 0,
  "affiliation": null,
  "hub_user": "opendronemap",
  "has_starred": false,
  "full_description": "# NodeMICMAC\n\nNodeMICMAC is a Node.js App and REST API to access [MicMac](https://github.com/micmacIGN/micmac). It exposes an API which is used by [WebODM](https://github.com/OpenDroneMap/WebODM) or other projects.\nThis repository was originally forked from [NodeODM](https://github.com/OpenDroneMap/NodeODM), which is part of the [OpenDroneMap](https://www.opendronemap.org/) Project.\n\n![NodeMICMAC-Screenshot](docs/readme_web.png \"NodeMICMAC\")\n\n| ![GitHub top language](https://img.shields.io/github/languages/top/dronemapper-io/NodeMICMAC.svg) | ![GitHub issues](https://img.shields.io/github/issues/dronemapper-io/NodeMICMAC.svg) | ![Docker Build Status](https://img.shields.io/docker/cloud/build/dronemapper/node-micmac.svg)  | ![Website](https://img.shields.io/website/https/dronemapper.com.svg)  |\n|---------------------------------------------------------------------------------------------------|--------------------------------------------------------------------|---|---|\n\n## Project Status\nThis list is not by order of importance.\n\n- [x] Forked NodeODM\n- [x] Updated README\n- [x] New Dockerfile\n- [x] Add MicMac Source Build\n- [x] Initial Docker & Native Testing\n- [x] `run.sh` and `run.py` Image Processor\n- [x] Digital Elevation Model Creation\n- [x] Orthomosaic Creation\n- [ ] External and Relative Camera Orientation Exports\n- [ ] Interfaces w/ Other Software (PMVS/OpenSFM/Pix4D/DroneMapper)\n- [x] Point Cloud\n- [x] Post Processing\n- [x] GCP Processing (Requires 3D \"ground\" and 2D \"image\" Files)\n- [ ] Oblique Imagery and/or 3D Model\n- [x] Conform / Rename Outputs to ODM Conventions\n- [x] Wire Up 2D and Potree Tile Creation\n- [x] Multi-Scale Tie-Point Generation (Speed up processing by switching to image resolution)\n- [ ] Export Undistorted Images\n- [ ] Utilize RPY Omega Phi Kappa\n- [x] Sparse Point Cloud w/ Camera Position\n- [x] Point Cloud w/ Image Ground Footprints \n- [x] Initial Integration w/ WebODM\n- [x] Full Integration w/ WebODM\n- [x] Progress Reporting\n- [ ] Staged Restart Ability\n- [x] Optimize Orthomosaic Generation\n- [ ] Multi-Threaded Orthomosaic Generation/Seamline Feathering (BETA)\n \nNote: This project currently creates a geo-referenced DEM and Ortho from our 4th Ave. test imagery (and most likely your imagery). The results are located in their respective directories in UTM projection.\n\n## Test Data\n[DroneMapper 4th Ave. Reservoir](https://dronemapper.com/software/4thAve.zip) - 48 Geo-Tagged Images DJI Phantom 3 Advanced\n\n![4th_Images](docs/readme_4th_images.png)\n\n[DroneMapper Greg 1 & 2 Reservoir](https://dronemapper.com/sample_data/) - 189 Geo-Tagged Images DJI Phantom 3 Advanced w/ Trimble 5800 Surveyed GCP Data\n\n![Greg1_2_Images](docs/readme_gregg12_images.png)\n\n## 4th Ave. Results\n\n![4th_DEM](docs/readme_4th_DEM.PNG)\n![4th_Ortho](docs/readme_4th_Ortho.PNG)\n\n## Gregg 1 & 2 GCP Results\n\n![Greg12 Ortho](docs/readme_greg12_ortho_gcp.png)\n![Greg12 GCP1](docs/readme_greg12_gcp1.png)\n\n* Results clipped to an AOI\n\n## Mission Planning / Execution\n\n* We recommend using a mission planning application such as MapPilot, DJI GS Pro, or Pix4DMapper.\n\n## Support\n\nCommercial support for this project is available from [DroneMapper.com](https://dronemapper.com).\n\n## Getting Started\n\nWe recommend that you setup NodeMICMAC using [Docker](https://www.docker.com/).\n\n* Docker image build:\n```\ndocker build -t odm/node-micmac .\n```\n\n* From the Docker Quickstart Terminal (Windows / OSX) or from the command line (Linux) type:\n```\ndocker run -p 3000:3000 odm/node-micmac\n```\n\n* If you're on Windows/OSX, find the IP of your Docker machine by running this command from your Docker Quickstart Terminal:\n\n```\ndocker-machine ip\n```\n\nLinux users can connect to 127.0.0.1.\n\n* Open a Web Browser to `http://<yourDockerMachineIp>:3000`\n* Load [some images with geo-tags](https://dronemapper.com/sample_data/)\n* Press \"Start Task\"\n* Go for a walk or enjoy a pastis! :)\n\nIf the computer running NodeMICMAC is using an old or 32bit CPU, you need to compile OpenDroneMap from sources and setup NodeMICMAC natively. You cannot use docker. Docker images work with CPUs with 64-bit extensions, MMX, SSE, SSE2, SSE3 and SSSE3 instruction set support or higher. Seeing a `Illegal instruction` error while processing images is an indication that your CPU is too old. \n\n## Using Ground Control Points\n\nFor GCP processing, you will need to include two files in txt format. Examples of the files are shown\nbelow.\n\n`GCP_3D.txt`\n\n`GCPNAME UTMX UTMY Z PRECISIONXY PRECISIONZ`\n```$xslt\nbase 250021.111 4319269.236 2593.462 0.005 0.005\n1 250002.422 4319308.241 2594.213 0.005 0.005\npf1 250041.932 4319214.143 2590.057 0.005 0.005\nhg1 250020.983 4319214.803 2590.412 0.005 0.005\nsw1 250006.047 4319127.513 2592.616 0.005 0.005\n2 249990.82 4319134.391 2592.927 0.005 0.005\n3 249876.345 4319057.461 2593.507 0.005 0.005\n4 250175.483 4319290.858 2584.199 0.005 0.005\nhg2 250117.42 4319009.086 2565.418 0.005 0.005\n5 250114.413 4318998.234 2567.861 0.005 0.005\nsw2 250159.165 4319019.774 2567.198 0.005 0.005\n```\n\n`GCP_2D.txt`\n\n`GCPNAME IMAGENAME PIXELX PIXELY`\n```$xslt\n1 DJI_0065.JPG 3036 1244\n1 DJI_0066.JPG 3022 1915\n1 DJI_0071.JPG 1859 1179\n1 DJI_0072.JPG 1860 1800\n1 DJI_0099.JPG 1350 1129\n1 DJI_0100.JPG 1355 1779\n2 DJI_0058.JPG 2872 1129\n2 DJI_0059.JPG 2870 1741\n2 DJI_0078.JPG 1997 1170\n2 DJI_0079.JPG 2050 1787\n2 DJI_0092.JPG 1219 1166\n2 DJI_0093.JPG 1226 1736\n3 DJI_0012.JPG 1477 458\n3 DJI_0013.JPG 1521 1051\n3 DJI_0014.JPG 1553 1677\n3 DJI_0015.JPG 1595 2295\n3 DJI_0020.JPG 1632 641\n3 DJI_0021.JPG 1673 1312\n3 DJI_0022.JPG 1699 1964\n4 DJI_0166.JPG 2402 890\n4 DJI_0167.JPG 2386 1442\n4 DJI_0168.JPG 2378 1986\n4 DJI_0173.JPG 2386 917\n4 DJI_0174.JPG 2385 1502\n4 DJI_0175.JPG 2410 2106\n5 DJI_0120.JPG 2590 788\n5 DJI_0121.JPG 2605 1286\n5 DJI_0122.JPG 2622 1808\n5 DJI_0151.JPG 2019 1093\n5 DJI_0152.JPG 2049 1589\n5 DJI_0153.JPG 2090 2061\n5 DJI_0155.JPG 1335 1365\n5 DJI_0156.JPG 1386 1832\n```\n\nThe files should be space delimited and can be named anything, as long as `3D` exists in the ground filename and `2D` \nexists in the images filename.\n\n* You can substitute the 2 GCP files above for a single GCP file that matches ODM format and is named `gcp_list.txt`.\nBelow is an example of ODM format:\n\n```\n+proj=utm +zone=12 +ellps=WGS84 +datum=WGS84 +units=m +no_defs \n575133.061 4776173.433 340.348 1975 1313 DJI_0012.JPG\n575133.061 4776173.433 340.348 1957 2246 DJI_0013.JPG\n575133.061 4776173.433 340.348 2047 1151 DJI_0017.JPG\n575133.061 4776173.433 340.348 1992 2150 DJI_0018.JPG\n575133.061 4776173.433 340.348 4959 2340 DJI_0041.JPG\n574984.757 4776256.240 342.033 4355 1097 DJI_0055.JPG\n574984.757 4776256.240 342.033 4301 2080 DJI_0056.JPG\n574984.757 4776256.240 342.033 4271 2905 DJI_0057.JPG\n574984.757 4776256.240 342.033 2830 1182 DJI_0058.JPG\n574984.757 4776256.240 342.033 2626 2207 DJI_0059.JPG\n575039.437 4776219.267 341.072 4973 2003 DJI_0024.JPG\n575039.437 4776219.267 341.072 2153 459 DJI_0033.JPG\n575039.437 4776219.267 341.072 2075 1431 DJI_0034.JPG\n575039.437 4776219.267 341.072 1978 2467 DJI_0035.JPG\n575039.437 4776219.267 341.072 1914 1711 DJI_0052.JPG\n575039.437 4776219.267 341.072 1836 2712 DJI_0053.JPG\n575002.291 4776187.176 340.717 1105 1155 DJI_0003.JPG\n575002.291 4776187.176 340.717 1130 2114 DJI_0004.JPG\n575002.291 4776187.176 340.717 2844 1311 DJI_0026.JPG\n575002.291 4776187.176 340.717 2781 2393 DJI_0027.JPG\n575002.291 4776187.176 340.717 4206 1172 DJI_0031.JPG\n575002.291 4776187.176 340.717 4121 2154 DJI_0032.JPG\n```\n\n## API Options / Command Line Parameters\n\n```bash\npositional arguments:\n  <project name>        Name of Project (i.e subdirectory of projects folder)\n\noptional arguments:\n  -h, --help            show this help message and exit\n  --images <path>, -i <path>\n                        Path to input images\n  --project-path <path>\n                        Path to the project folder\n  --gcp <path>\n                        Path to MicMac GCP txt files\n  --max-concurrency <integer>\n                        The maximum number of cores to use in processing.\n                        Default: 4\n  --resize-to <integer>\n                        Scale image width for tie-point extraction. Default:\n                        800\n  --zoom <integer>      The level of DEM construction. 4 means 4x native GSD.\n                        Default: 4 Values: 1, 2, 4, 8\n  --matcher-distance <integer>\n                        Distance threshold in meters to find pre-matching\n                        images based on GPS exif data. Default: 0 (use auto-distance)\n  --multi-scale         Uses an image file pair based multi-scale tie-point\n                        generation routine.\n  --remove-ortho-tiles  Remove every other ortho tile. Speeds up ortho creation and radiometric equalization.\n  --camera-cloud        Creates a sparse point cloud with camera positions\n  --image-footprint     Creates a point cloud and geojson with image footprints\n  --ccd-width <float>   The CCD sensor width in millimeters (mm). Example:\n                        6.17\n  --ccd-height <float>  The CCD sensor height in millimeters (mm). Example:\n                        4.55\n  --version             Displays version number and exits.\n\n```\n\n## API Docs\n\nSee the ODM [API Documentation Page](https://github.com/OpenDroneMap/NodeODM/blob/master/docs/index.adoc).\n\n## Run Tasks from the Command Line\n\nYou can use [CloudODM](https://github.com/OpenDroneMap/CloudODM) to run tasks with NodeMICMAC from the command line. _(Untested)_\n\n## Using an External Hard Drive (Not Recommended/Performance IO Reasons)\n\nIf you want to store results on a separate drive, map the `/var/www/data` folder to the location of your drive:\n\n```bash\ndocker run -p 3000:3000 -v /mnt/external_hd:/var/www/data dronemapper/node-micmac\n```\n\nThis can be also used to access the computation results directly from the file system.\n\n### Run it Natively\n\nIf you are already running [ODM](https://github.com/OpenDroneMap/ODM) on Ubuntu natively you can follow these steps:\n\n* You may need to step through the Dockerfile and install missing dependencies listed there to install natively.\n\n1] Install PotreeConverter and LASzip dependency\n \n```bash\napt-get install -y libboost-dev libboost-program-options-dev exiftool\n\npip install Shapely\npip install utm\n\nmkdir /staging\ngit clone https://github.com/pierotofy/LAStools /staging/LAStools\ncd LAStools/LASzip\nmkdir build\ncd build\ncmake -DCMAKE_BUILD_TYPE=Release ..\nmake\n\ngit clone https://github.com/pierotofy/PotreeConverter /staging/PotreeConverter\ncd /staging/PotreeConverter\nmkdir build\ncd build\ncmake -DCMAKE_BUILD_TYPE=Release -DLASZIP_INCLUDE_DIRS=/staging/LAStools/LASzip/dll -DLASZIP_LIBRARY=/staging/LAStools/LASzip/build/src/liblaszip.a ..\nmake && sudo make install\n```\n2] Install gdal2tiles.py script, node.js and npm dependencies\n\n```bash\nsudo curl --silent --location https://deb.nodesource.com/setup_6.x | sudo bash -\nsudo apt-get install -y nodejs python-gdal\ngit clone hhttps://github.com/OpenDroneMap/NodeMICMAC.git\ncd NodeMICMAC\nnpm install\n```\n\n3] Start NodeMICMAC\n\n```\nnodejs index.js\n```\n\nUse odm_path\n\n```\nnodejs index.js --odm_path /home/projects/NodeMICMAC/dm/\n```\n\nFor other command line options you can run:\n\n```\nnodejs index.js --help\n```\n\nYou can also specify configuration values via a JSON file:\n\n```\nnodejs index.js --config config.default.json\n```\n\nCommand line arguments always take precedence over the configuration file.\n\n### Run it using PM2\n\nThe app can also be run as a background process using the [pm2 process manager](https://github.com/Unitech/pm2), which can also assist you with system startup scripts and process monitoring.\n\nTo install pm2, run (using `sudo` if required):\n```shell\nnpm install pm2 -g\n```\nThe app can then be started using\n```shell\npm2 start processes.json\n```\nTo have pm2 started on OS startup run\n```shell\npm2 save\npm2 startup\n```\nand then run the command as per the instructions that prints out. If that command errors then you may have to specify the system (note that systemd should be used on CentOS 7). Note that if the process is not running as root (recommended) you will need to change `/etc/init.d/pm2-init.sh` to set `export PM2_HOME=\"/path/to/user/home/.pm2\"`, as per [these instructions](\nhttp://www.buildsucceeded.com/2015/solved-pm2-startup-at-boot-time-centos-7-red-hat-linux/)\n\nYou can monitor the process using `pm2 status`.\n\n### Test Mode\n\nIf you want to make a contribution, but don't want to setup OpenDroneMap or MICMAC, or perhaps you are working on a Windows machine, or if you want to run automated tests, you can turn test mode on:\n\n```\nnode index.js --test\n```\n\nWhile in test mode all calls to OpenDroneMap/MICMAC's code will be simulated (see the /tests directory for the mock data that is returned).\n\n### Test Images\n\nYou can find some test drone images [here](https://dronemapper.com/sample_data/).\n\n## What if I need more functionality?\n\nNodeMICMAC is meant to be a lightweight API. Commercial support and development is available.\n\n## Contributing\n\nMake a pull request for small contributions. For big contributions, please open a discussion or issue first. Please use ES6 syntax while writing new Javascript code so that we can keep the code base uniform.\n\n\n## Roadmap\n\nStay current with upstream MicMac development providing an easy to use interface and API. Roll in upstream ODM API changes into this repo. Test, Process Images, Rinse, Repeat!\n\n## MicMac Version\n\nCloned: 2022-06-05 Commit: [797e98d](https://github.com/micmacIGN/micmac/commit/797e98d69f59fc7879d143353a94b06d970a9a24)\nMicMac is under CeCill-B License\nOriginal running project could be find following this link : http://logiciels.ign.fr/?Micmac\n\n\n## Disclaimer \nThis project was originally developed by [DroneMapper](https://dronemapper.com).\n\n## Contributors  \n[Sylvain POULAIN - GISCAN](https://giscan.com)\n\n[IRD](https://ird.fr)\n\n[RumenMitrev](https://github.com/rumenmitrev)\n",
  "permissions": {
    "read": true,
    "write": false,
    "admin": false
  },
  "media_types": [
    "application/vnd.docker.distribution.manifest.list.v2+json"
  ],
  "content_types": [
    "image"
  ]
}