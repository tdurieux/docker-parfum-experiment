{
  "user": "sneezymud",
  "name": "sneezymud",
  "namespace": "sneezymud",
  "repository_type": "image",
  "status": 1,
  "status_description": "active",
  "description": "Official SneezyMUD Server",
  "is_private": false,
  "is_automated": true,
  "can_edit": false,
  "star_count": 0,
  "pull_count": 1633,
  "last_updated": "2023-01-05T20:37:06.466365Z",
  "date_registered": "2018-01-25T04:54:24.546952Z",
  "collaborator_count": 0,
  "affiliation": null,
  "hub_user": "sneezymud",
  "has_starred": false,
  "full_description": "SneezyMUD is opensource! See LICENSE.txt for details.\n\n[![Build Status](https://travis-ci.org/sneezymud/sneezymud.svg?branch=master)](https://travis-ci.org/sneezymud/sneezymud)\n\n# -h|--help)\n\n```\nUsage: sneezy [-p PORT] [-l LIBDIR] [-c CONFIG]\n\nRun sneezy, logging to stdout. Ctrl-C to exit.\n\n    -p PORT     listen for Telnet connections on PORT\n    -l LIBDIR   use LIBDIR as the lib flatfiles directory\n    -c CONFIG   read configuration from CONFIG\n\nSIGHUP, SIGINT, SIGTERM also initiate shutdown.\n```\n\n## Defaults\n\n| Configuration             | Default                       |\n|---------------------------|-------------------------------|\n| Telnet port               | 7900                          |\n| Config file (optional)    | `./sneezy.cfg`                |\n| Lib directory             | `./lib`                       |\n| Database names            | `sneezy` and `immortal`       |\n| Database hostname         | `localhost`                   |\n| Database username         | none (see below)              |\n| Database password         | none                          |\n\nNote: when no username is configured, Sneezy's MySQL username defaults to the\nUnix account name of the current user, similar to the mysql commandline\nprogram.\n\n## Configuration\n\nTo change the database and runtime configuration from the defaults, you must create a\ncustom config file. Two example cfg files are located in `code/`. Copy one of\nthem to `sneezy.cfg` and edit as needed. If you put it in Sneezy's starting\ndirectory, it will get loaded automatically, or you can specify it on the\ncommand line.\n\n# Requirements\n\n## Server Environment\n\n* Modern Unix, probably Linux, typically Ubuntu\n* MySQL-compatible database server, two databases, and a user with table-level\n  write access. See above for the defaults for these.\n\n## Build Dependencies\n\n* Modern C++ compiler with working C++14 support\n  -- Tested with clang 3.8 and gcc 5, but the newer the better generally\n* scons -- Tested with version 2.4.1 on Python 2.7\n* libmysqlclient -- Tested with libmysqlclient 5.7.19\n* Boost C++ library, with 'program-options', 'regex', and 'filesystem' modules\n  -- Tested with 1.58\n\n## Recommended\n\n* bash shell and sudo root access\n\n# Installation\n\nFor most people, the install script `install_server.sh` should be enough to\nget you going. Run with no arguments to get some help instructions. You\nmust still currently create the needed databases, users, and permissions\nhowever. Refer to the section on database setup below.\n\n## Manual Installation\n\nWhen these instructions refer to 'Sneezy', they are mainly specifically\nreferring to the sneezymud server daemon program.\n\nShell commands below are assumed to have started in the root of the source\ncode directory tree. Substitute any changes from the defaults you require, and\nremove sudo if it's unnecessary. Parts of the command where you must\nsubstitute arbitrary choices are represented as shell **$VARIABLES**.\n\n## Compiling\n\nRunning the `scons` command in the `code` dir will start the build process:\n\n    $ cd code\n    $ scons -j$(nproc)\n\nThis will output a `code/sneezy` binary, along with some .so files in\n`code/objs/`. These .so files are **required**, and must be located in an\n`objs/` dir relative to the directory Sneezy is started in.\n\nIf you need to change build flags, some can be specified on the commandline,\nand others by editing the file `code/SConstruct`.  For more information see\nthe scons help message:\n\n    $ scons -h\n\n### Debugging Builds\n\nSetting debug=1 during a build enables a variety of runtime misbehavior\ncheckers. In particular, AddressSanitizer is configured mainly via the\n`ASAN_OPTIONS` and `LSAN_OPTIONS` environment variables. Documentation:\n\nhttps://github.com/google/sanitizers/wiki/AddressSanitizerFlags\n\n## Installing The Binary\n\nIf you're copying `code/sneezy` to a different location, you must copy the .so\nfiles in their `objs` dir along with it. The easiest thing is just to copy the\nwhole dir:\n\n    $ cd code && cp -r sneezy objs $DEST\n\nOptionally delete the extraneous .o files:\n\n    $ rm objs/*.o objs/*/*.o\n\n## /lib - Flat Files\n\nThe 'lib' dir, as it is known, contains various text and data files that\nSneezy reads and occasionally writes. To keep paths simple in the source code,\nSneezy changes directory to the lib dir on startup. By default, Sneezy looks\nfor a `lib/` subdir of the directory it was started in.\n\nFirst you'll need to make the required empty directories, because git doesn't\nstore them (the .. part of the cmd only works in bash):\n\n    $ cd lib && mkdir -p roomdata/saved immortals \\\n        corpses/corrupt rent/corrupt player/corrupt \\\n        rent/{a..z} account/{a..z} player/{a..z}\n\nIf you are planning to run Sneezy directly from the source tree, you're done.\nOtherwise, copy the lib directory to its new location:\n\n    $ cp -r lib $DEST/lib\n\n## Database Setup\n\nSneezy uses both MySQL and flat files to store data, flat files being a\nholdover from its early MUD roots. It connects to MySQL over TCP, so make sure\nyour database server's `bind-address` config option is set to `localhost` or\n`127.0.0.1`.\n\n### Create Databases\n\nThe names can be changed in the config file:\n\n    $ sudo mysql -e \"CREATE DATABASE sneezy ; CREATE DATABASE immortal ;\"\n\n### Create User\n\nIf you're using the defaults (no username/pw), set `$USERNAME` below to the\nUnix account sneezy will be running as, and create a no-password user:\n\n    $ sudo mysql -e \"CREATE USER '$USERNAME'@'localhost'\"\n\nWithout a password, anyone who can connect to MySQL can log in as this user.\nIf this is a problem, set a password for the database user instead:\n\n    $ sudo mysql -e \"CREATE USER '$USERNAME'@'localhost' IDENTIFIED BY '$PASSWORD'\"\n\n### Set Database Permissions\n\n    $ sudo mysql -e \"GRANT ALL on sneezy.* to '$USERNAME'@'localhost' ;\" \\\n                -e \"GRANT ALL on immortal.* to '$USERNAME'@'localhost' ;\"\n\nTechnically Sneezy itself (probably) only needs `SELECT, UPDATE, INSERT`\npermissions, if you use some other user to create the tables and populate the\ninitial database.\n\n### Initial SQL Data\n\nThe initial database contents are loaded from files containing valid SQL, one\nper file. They are in MySQL dialect (mostly originating from `mysqldump`) and\ncan be loaded simply by piping them into the `mysql` command. The files are\ngrouped by three main phases, which must be loaded in order:\n\n1. Table creation (`sql_tables`)\n2. View creation (`sql_views`)\n3. Data insertion (`sql_data`)\n\nSince Sneezy uses two databases, they are further divided by which database\nthey belong to, into `sneezy` and `immortal` dirs. So, we end up with the\nfollowing very complicated chunk of shell code to load it all correctly:\n\n    $ for db in immortal sneezy ; do\n        for phase in tables views data ; do\n            [ -d \"_Setup-data/sql_$phase/$db\" ] || continue\n            for sql in _Setup-data/sql_$phase/$db/*.sql ; do\n                echo \"loading '$sql'\"\n                mysql $db < $sql\n            done\n        done\n    done\n\n\n## Running\n\nWhen run, Sneezy will print copious logs to stdout, and can be safely shut\ndown using ctrl-C.\n\nRun Sneezy in the source tree using the defaults:\n\n    $ code/sneezy\n\nIf you created a custom sneezy.cfg in code/:\n\n    $ cd code && ./sneezy\n\n# Database Migration\n\nOngoing changes to the database structure are stored as numbered migrations in\nthe `_Sql-data/migrations/` dir, one dir per migration. The naming convention\nshould be obvious. The SQL statements are stored in one of `immortal.sql` or\n`sneezy.sql`, depending on which database they are for.\n\nMigrations that have been applied to the initial data contained in this\nrepository are located in `_Sql-data/migrations/applied/` and do not need to\nbe applied to a fresh installation.\n\n**Note:** there is currently no provision for migrating the _contents_ of\nthe databases, such as edits to room descriptions.\n",
  "permissions": {
    "read": true,
    "write": false,
    "admin": false
  },
  "media_types": [
    "application/vnd.docker.container.image.v1+json"
  ],
  "content_types": [
    "image"
  ]
}