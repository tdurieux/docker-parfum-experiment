{
  "user": "consensys",
  "name": "orchestrate",
  "namespace": "consensys",
  "repository_type": "image",
  "status": 1,
  "status_description": "active",
  "description": "Orchestrate is a blockchain Transaction Orchestration system for Ethereum.",
  "is_private": false,
  "is_automated": false,
  "can_edit": false,
  "star_count": 2,
  "pull_count": 73953,
  "last_updated": "2022-09-02T11:59:11.083549Z",
  "date_registered": "2021-10-06T16:45:07.663371Z",
  "collaborator_count": 0,
  "affiliation": null,
  "hub_user": "devopsconsensys",
  "has_starred": false,
  "full_description": "[![Website](https://img.shields.io/website?label=documentation&url=https%3A%2F%2Fdocs.orchestrate.consensys.net%2F)](https://docs.orchestrate.consensys.net/)\n[![Website](https://img.shields.io/website?url=https%3A%2F%2Fconsensys.net%2Forchestrate%2F)](https://consensys.net/quorum/)\n\n[![CircleCI](https://img.shields.io/circleci/build/gh/ConsenSys/orchestrate?token=7062612dcd5a98913aa1b330ae48b6a527be52eb)](https://circleci.com/gh/ConsenSys/orchestrate)\n[![Go Report Card](https://goreportcard.com/badge/github.com/ConsenSys/orchestrate)](https://goreportcard.com/report/github.com/ConsenSys/orchestrate)\n\n# Orchestrate\n\nOrchestrate is a blockchain **Transaction Orchestration** system that can operate multiple chains simultaneously.\nIt provides production grade and agnostic mechanisms for transaction crafting, nonce management, transaction signing, transaction receipt listening, transaction receipt decoding, faucet and more.\n\nOrchestrate is a **microservices architecture** composed of APIs & Workers. \nWorkers communicate following **publish-subscribe** pattern using *Apache Kafka* as message broker. \n\nOrchestrate is Plug & Play, a user only needs to send a business protobuf message to Orchestrate input topic,\nOrchestrate then manages the full lifecycle of the transaction from crafting the transaction to decoding event logs data.\n\n## Useful links\n\n* [User Documentation](http://docs.orchestrate.consensys.net/)\n* [Orchestrate OpenAPI](http://localhost:8031/swagger)\n* [GitHub Project](https://github.com/ConsenSys/orchestrate)\n* [issues](https://github.com/ConsenSys/orchestrate/issues)\n* [Changelog](https://github.com/ConsenSys/orchestrate/blob/main/CHANGELOG.md)\n* [Quorum Key Manager](https://github.com/orchestrate/quorum-key-manager)\n* [Helm Charts](https://github.com/ConsenSys/orchestrate-helm)\n* [Kubernetes deployment example](https://github.com/ConsenSys/orchestrate-kubernetes)\n\n## Run Orchestrate\n\nNow launch Orchestrate service using docker-compose with the following command:\n\n```bash\ndocker-compose up -d api tx-sender tx-listener\n```\n\nOrchestrate is connected to [Quorum Key Manager(QKM)](https://github.com/ConsenSys/quorum-key-manager) to perform every\nwallet action (creation, importing, signing, etc...). In this case for QKM setup, we are \n connecting to a local Hashicorp Vault Server which is enhanced with [Quorum Hashicorp Vault Pluging](https://github.com/ConsenSys/quorum-hashicorp-vault-plugin)\n to support private keys under hashicorp storage. \n\n## Build from source\n\n### Prerequisites\n\nTo build binary locally requires Go (version 1.16 or later) and C compiler. \n\n### Build\n\nAfter downloading dependencies (ie `go mod download`) you can run the following command to compile the binary\n\n```bash\ngo build -o ./build/bin/orchestrate\n```\n\nBinary will be located in `./build/bin/orchestrate\n\n## License\n\nOrchestrate is licensed under the BSL 1.1.\n\nPlease refer to the [LICENSE file](LICENSE) for a detailed description of the license.\n\nPlease contact [orchestrate@consensys.net](mailto:orchestrate@consensys.net) if you need to purchase a license for a production use-case.  \n",
  "permissions": {
    "read": true,
    "write": false,
    "admin": false
  },
  "media_types": [
    "application/vnd.docker.container.image.v1+json"
  ],
  "content_types": [
    "image"
  ]
}