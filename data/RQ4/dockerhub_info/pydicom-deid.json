{
  "user": "pydicom",
  "name": "deid",
  "namespace": "pydicom",
  "repository_type": "image",
  "status": 1,
  "status_description": "active",
  "description": "deid container, with versions corresponding to those on pypi",
  "is_private": false,
  "is_automated": false,
  "can_edit": false,
  "star_count": 0,
  "pull_count": 190,
  "last_updated": "2018-12-26T20:15:04.742783Z",
  "date_registered": "2018-09-05T21:27:14.852426Z",
  "collaborator_count": 0,
  "affiliation": null,
  "hub_user": "pydicom",
  "has_starred": false,
  "full_description": "# Deidentify (deid)\n\nDeidentify medical images in Python. \n\nGithub repository, see CHANGELOG.md for version details:\n\nhttps://www.github.com/pydicom/deid\n\nReleases on Pypi\n\nhttps://pypi.org/project/deid/\n\nThis is a manual push of the image after each pypi release.\n\n[![DOI](https://zenodo.org/badge/94163984.svg)](https://zenodo.org/badge/latestdoi/94163984)\n[![Build Status](https://travis-ci.org/pydicom/deid.svg?branch=master)](https://travis-ci.org/pydicom/deid)\n\nPlease see our [Documentation](https://pydicom.github.io/deid/)\n\nThese are basic Python based tools for working with medical images and text, specifically for de-identification.\nThe cleaning method used here mirrors the one by CTP in that we can identify images based on known\nlocations. We are looking for collaborators to develop and validate an OCR cleaning method! Please reach out if you would like to help work on this.\n\n\n## Installation\n\n### Local\nFor the stable release, install via pip:\n\n```\npip install deid\n```\n\nFor the development version, install from Github:\n\n```\npip install git+git://github.com/pydicom/deid\n```\n\n### Docker\n\n```\ndocker build -t pydicom/deid .\ndocker run pydicom/deid --help\n```\n\n## Issues\nIf you have an issue, or want to request a feature, please do so on our [issues board](https://www.github.com/pydicom/deid/issues)",
  "permissions": {
    "read": true,
    "write": false,
    "admin": false
  },
  "media_types": [
    "application/vnd.docker.container.image.v1+json"
  ],
  "content_types": [
    "image"
  ]
}