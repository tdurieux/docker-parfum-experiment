{
  "user": "cilium",
  "name": "pwru",
  "namespace": "cilium",
  "repository_type": "image",
  "status": 1,
  "status_description": "active",
  "description": "",
  "is_private": false,
  "is_automated": false,
  "can_edit": false,
  "star_count": 0,
  "pull_count": 251,
  "last_updated": "2023-01-16T10:21:59.624669Z",
  "date_registered": "2022-08-11T16:19:46.259194Z",
  "collaborator_count": 0,
  "affiliation": null,
  "hub_user": "aanm",
  "has_starred": false,
  "full_description": "# pwru (packet, where are you?)\n\n![logo](logo.png \"Detective Gopher is looking for packet traces left by eBPF bee\")\n\n`pwru` is an [eBPF](https://ebpf.io)-based tool for tracing network packets in\nthe Linux kernel with advanced filtering capabilities. It allows fine-grained\nintrospection of kernel state to facilitate debugging network connectivity issues.\n\nThe following example shows where the packets of a `curl` request are dropped\nafter installing an IP tables rule:\n\n![demo](demo.gif)\n\n## Running\n\n### Requirements\n\n`pwru` requires >= 5.3 kernel to run. For `--output-skb` >= 5.9 kernel is required. For `--backend=kprobe-multi` >= 5.18 kernel is required.\n\nThe following kernel configuration is required.\n\n|           Option         |                         Note                         |\n| ------------------------ | ---------------------------------------------------- |\n| CONFIG_DEBUG_INFO_BTF=y  | available since >= 5.3                               |\n| CONFIG_KPROBES=y         |                                                      |\n| CONFIG_PERF_EVENTS=y     |                                                      |\n| CONFIG_BPF=y             |                                                      |\n| CONFIG_BPF_SYSCALL=y     |                                                      |\n| CONFIG_FUNCTION_TRACER=y | /sys/kernel/debug/tracing/available_filter_functions |\n| CONFIG_FPROBE=y          | --backend=kprobe-multi, available since >= 5.18      |\n\nYou can use `zgrep $OPTION /proc/config.gz` to validate whether option is enabled.\n\n### Downloading\n\nYou can download the statically linked executable for x86\\_64 and amd64 from the\n[release page](https://github.com/cilium/pwru/releases).\n\n### Usage\n\n```\n$ pwru --help\nUsage of ./pwru:\n      --all-kmods                 attach to all available kernel modules\n      --backend string            Tracing backend('kprobe', 'kprobe-multi'). Will auto-detect if not specified.\n      --filter-dst-ip string      filter destination IP addr\n      --filter-dst-port uint16    filter destination port\n      --filter-func string        filter kernel functions to be probed by name (exact match, supports RE2 regular expression)\n      --filter-mark uint32        filter skb mark\n      --filter-netns uint32       filter netns inode\n      --filter-proto string       filter L4 protocol (tcp, udp, icmp, icmp6)\n      --filter-src-ip string      filter source IP addr\n      --filter-src-port uint16    filter source port\n      --kernel-btf string         specify kernel BTF file\n      --kmods strings             list of kernel modules names to attach to\n      --output-file string        write traces to file\n      --output-limit-lines uint   exit the program after the number of events has been received/printed\n      --output-meta               print skb metadata\n      --output-skb                print skb\n      --output-stack              print stack\n      --output-tuple              print L4 tuple\n      --per-cpu-buffer int        per CPU buffer in bytes (default 4096)\n      --timestamp string          print timestamp per skb (\"current\", \"relative\", \"none\") (default \"none\")\n      --version                   show pwru version and exit\n```\n\nIf multiple filters are specified, all of them have to match in order for a\npacket to be traced.\n\nThe `--filter-func` switch does an exact match on function names i.e.\n`--filter-func=foo` only matches `foo()`; for a wildcarded match, try\n`--filter-func=\".*foo.*\"` instead.\n\n### Running with Docker\n\nDocker images for `pwru` are published at https://hub.docker.com/r/cilium/pwru.\n\nAn example how to run `pwru` with Docker:\n\n```\ndocker run --privileged --rm -t --pid=host -v /sys/kernel/debug/:/sys/kernel/debug/ cilium/pwru --filter-dst-ip=1.1.1.1\n```\n\n### Running on Kubernetes\n\nThe following example shows how to run `pwru` on a given node:\n```\nNODE=node-foobar\nkubectl run pwru \\\n    --image=cilium/pwru:latest \\\n    --privileged=true \\\n    --attach=true -i=true --tty=true --rm=true \\\n    --overrides='{\"apiVersion\":\"v1\",\"spec\":{\"nodeSelector\":{\"kubernetes.io/hostname\":\"'$NODE'\"}, \"hostNetwork\": true, \"hostPID\": true}}' \\\n    -- --filter-dst-ip=1.1.1.1 --output-tuple\n```\n\nNote: You may need to create a volume for `/sys/kernel/debug/` and mount it for the`pwru` pod.\n\n### Running on Vagrant\n\nIf you have [Vagrant](https://www.vagrantup.com/) installed, you can run the\nabove example with the following commands.\n\n1. In a terminal (terminal 1), bring up the Vagrant box:\n   ```console\n   $ vagrant up\n   ```\n   This will take a few minutes to download and provision the box.\n\n2. Connect to the Vagrant box:\n   ```console\n   $ vagrant ssh\n   ```\n\n3. Build `pwru`:\n   ```console\n   $ cd /pwru\n   $ make\n   ```\n\n4. Run `pwru`:\n   ```console\n   $ sudo ./pwru --filter-dst-ip=1.1.1.1 --filter-dst-port=80 --filter-proto=tcp --output-tuple\n   ```\n\n5. In a new terminal (terminal 2), connect to the Vagrant box:\n   ```console\n   $ vagrant ssh\n   ```\n\n6. In terminal 2, run `curl` to generate some traffic to 1.1.1.1:\n   ```console\n   $ curl 1.1.1.1\n   ```\n   Observe the output of `pwru` in terminal 1.\n\n7. In terminal 2, add an `iptables` rule to block traffic to 1.1.1.1:\n   ```console\n   $ sudo iptables -t filter -I OUTPUT 1 -m tcp --proto tcp --dst 1.1.1.1/32 -j DROP\n   ```\n\n8. In terminal 2, run `curl` to generate some traffic to 1.1.1.1:\n   ```console\n   $ curl 1.1.1.1\n   ```\n   Observe the output of `pwru` in terminal 1.\n\n9. To clean up, press `Ctrl+C` to terminate `pwru` in terminal 1, exit both\n   shells, and run:\n   ```console\n   $ vagrant destroy\n   ```\n\n## Developing\n\n### Dependencies\n\n* Go >= 1.16\n* LLVM/clang >= 1.12\n\n### Building\n\n```\nmake\n```\n\nAlternatively, you can build in the Docker container:\n\n```\nmake release\n```\n\n## Contributing\n\n`pwru` is an open source project licensed under [GPLv2](LICENSE). Everybody is\nwelcome to contribute. Contributors are required to follow the\n[Contributor Covenant Code of Conduct](https://www.contributor-covenant.org/version/1/4/code-of-conduct/)\nand must adhere to the [Developer Certificate of Origin](https://developercertificate.org/)\nby adding a Signed-off-by line to their commit messages.\n\n## Logo Credits\n\nThe detective gopher is based on the Go gopher designed by Renee French.\n",
  "permissions": {
    "read": true,
    "write": false,
    "admin": false
  },
  "media_types": [
    "application/vnd.docker.container.image.v1+json"
  ],
  "content_types": [
    "image"
  ]
}