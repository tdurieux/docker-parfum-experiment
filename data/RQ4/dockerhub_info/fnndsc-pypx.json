{
  "user": "fnndsc",
  "name": "pypx",
  "namespace": "fnndsc",
  "repository_type": "image",
  "status": 1,
  "status_description": "active",
  "description": "Core PACS Q/R interaction",
  "is_private": false,
  "is_automated": false,
  "can_edit": false,
  "star_count": 1,
  "pull_count": 738,
  "last_updated": "2022-11-05T00:08:06.780005Z",
  "date_registered": "2020-01-10T21:41:20.500339Z",
  "collaborator_count": 0,
  "affiliation": null,
  "hub_user": "fnndsc",
  "has_starred": false,
  "full_description": "####################################\npypx - 3.10.10\n####################################\n\n.. image:: https://badge.fury.io/py/pypx.svg\n    :target: https://badge.fury.io/py/pypx\n\n.. image:: https://travis-ci.org/FNNDSC/pypx.svg?branch=master\n    :target: https://travis-ci.org/FNNDSC/pypx\n\n.. image:: https://img.shields.io/badge/python-3.5%2B-blue.svg\n    :target: https://badge.fury.io/py/pypx\n\n.. contents:: Table of Contents\n\n1. Overview\n*****************\n\n``pypx`` is a *complete* client-side PACS (Picture Archive and Communications System) Query/Retrieve/Storage solution that operates in stand-alone script mode in addition to providing a set of python modules for use in other packages. The modules/API provide a simple mechanism for a python program to interact with an appropriately configured remote PACS, while the stand alone scripts offer a convenient ability to directly Query/Retrieve/Store images from the command line.\n\n``pypx`` was mostly developed for use in the ChRIS system as part of the ``pfdcm`` microservice; however the CLI scripts of ``pypx`` and the provided docker image offer a quick and powerful means of accessing a PACS without any additional overhead.\n\n1.1 Complete **Client** Side\n============================\n\nThis solution is **client**-side and cannot operate fully independently of an appropriately configured PACS. Unfortunately, simply downloading this repo/tools and pointing the scripts at some PACS is insufficient. The PACS itself (which is NOT part of this repo) needs to be configured to service communications and requests from these tools. See below for more information.\n\n1.1.1 Quick PACS Primer\n-----------------------\n\nA PACS exists as a separate service on a network, and ``pypx`` communicates with a pre-configured PACS when asking for Query data and when Retrieving images. Importantly, from the client perspective, data is **PUSHED** from the PACS, and not **PULLED** from the client. This means that client software in essence \"asks\" the PACS for images and the PACS obliges by transmitting the images over the network to a pre-configured location.\n\nCommunications with a PACS are for the most insecure and reflected a circa 1990s view/model of internetworking. When a client communicates with a PACS, it sends along with every request string identifiers unique to the client and configured in the PACS. Typical identifiers are the ``AETitle`` and sometimes additionally the ``CalledAETitle``. The PACS examines these strings on receipt to identify/authenticate the client and also to identify a destination network ``IP:port`` to which data can be transmitted.\n\n1.1.2 Configuring a PACS\n-------------------------\n\nIn order to be fully complete, a destination PACS with which ``pypx`` modules wish to communicate needs to be configured with appropriate ``AETitle``, ``CalledAETitle``, as well as the network address IP and port of the ``pypx`` hosting machine. Configuring a PACS is obviously outside of the scope of this documentation. Consult your PACS for information on this configuration.\n\nAs a brief note, if the opensource ``orthanc`` PACS server is being used, the ``orthanc.json`` can be edited to include\n\n.. code-block:: json\n\n  {\n      \"DicomAet\" : \"CHRISV3T\"\n  }\n\nand\n\n.. code-block:: json\n\n  {\n     \"CHRIS\" : [ \"CHRIS\", \"10.72.76.39\", 10402 ],\n     \"CHRISLOCAL\" : [\"CHRISLOCAL\", \"192.168.1.189\", 11113 ]\n  }\n\nwhere ``CHRISLOCAL`` for example defines a DICOM ``storescp`` service on the host ``192.168.1.189`` and port ``11113`` while ``CHRIS`` defines another destination ``storescp`` service .\n\n1.1.3 Configuring ``pypx``\n---------------------------\n\nLocally, however, some configuration is required and conveniently located in the script ``PACS_QR.sh``. In the\n\n.. code-block:: bash\n\n    function institution_set\n    {\n        ...\n    }\n\nsimply add another block reflecting the variables appropriate to your remote PACS service.\n\n1.2 Components\n==============\n\n1.2.1 Environment\n-----------------\n\n``pypx`` can be thought of as a bridge connecting a PACS to a ChRIS instance. In between these services is a filesystem. A ``retrieve`` operation will request files from a PACS which arrive over the network and a separately configured listening service repacks these files in a specially configured location called the ``BASEMOUNT``. Once these files are received, they can be ``push`` -ed to special ChRIS friendly storage called swift, and once there they can be ``register`` -ed to ChRIS/CUBE. Each of these services (swift and CUBE) have network locations and login details which are stored in the ``BASEMOUNT`` in ``<BASEMOUNT>/services/[swift,cube].json``. Many different swift and CUBE configurations can in theory exist in these json files. Each configuration is identified by a key -- the ``SWIFTKEY`` for the swift service and the ``CUBEKEY`` for the CUBE service. Using these keys makes for a convenient way to push and register files without very verbose CLI.\n\nSee ``PACS_QR.sh -x`` for some in-line help on setting these keys.\n\n1.2.2 Tools\n-----------\n\nInternally, the code wraps around DCMTK utilies as well as the PyDicom module. The following modules/scripts are provided:\n\n- pfstorage_: Query / put files/objects into swift storage.\n\n- px-do_: Perform various downstream utility functions once a ``px-find`` has completed.\n\n- px-echo_: Ping the PACS to make sure it is online (``echoscu``).\n\n- px-find_: Find (Query) a PACS in a variety of ways. The start point of almost all other workflows which are constructed as ``find`` _then_ ``do``.\n\n- px-listen_: Deprecated listening service wrapper.\n\n- px-move_: Move data from the PACS (``movescu``).\n\n- px-push_: Push DICOM data to a remote node (either a PACS or a ChRIS swift object storage container).\n\n- px-register_: A companion to ``px-push`` that registers files in ChRIS swift storage to the ChRIS CUBE backend.\n\n- px-repack_: Read and repack DICOM files, organizing the destination in a human-friendly tree based layout.\n\n- px-report_: Consume the JSON outputs of many of the tools (esp the ``px-find`` and generate various console-based reports).\n\n- px-status_: Report on the status of query results in the ``BASEMOUNT``.\n\n- px-smdb_: A simple file-system based database that provides tracking and query for processed DICOM files.\n\n2. Installation\n*****************\n\n2.1 Prerequisites\n=================\n\nFor all installation solutions, make sure that the machine receiving images from a PACS has approporate listening and repacking services and that the PACS itself has been configured to recognize this machine. While out of scope of this document, the simplest way to set this up is to use the ``pfdcm`` service (provided separately).\n\n2.2 Using docker\n================\n\nUsing the dockerized container is the recommended installation vector as the image contains all tools (dcmtk) that can interact both with a PACS as well as swift storage and CUBE without any additional software on the host system.\n\n.. code-block:: bash\n\n    docker pull fnndsc/pypx\n\nAlternatively, you can build a local image with\n\n.. code-block:: bash\n\n    # If behing a proxy\n    PROXY=http://some.proxy.com\n    export UID=$(id -u)\n    DOCKER_BUILDKIT=1 docker build --build-arg http_proxy=${PROXY} --build-arg UID=$UID -t local/pypx .\n\n    # otherwise...\n    export UID=$(id -u)\n    DOCKER_BUILDKIT=1 docker build --build-arg UID=$UID -t local/pypx .\n\n2.3 PyPI\n========\n\nFor convenience, a PyPI installation is also available. This assumes additional non-python requirements such as ``dcmtk`` have been installed. This is recommended only for advanced users.\n\n.. code-block:: bash\n\n   apt-get update                                   \\\n   && apt-get install -y dcmtk                      \\\n   && apt-get install -y python3-pip python3-dev    \\\n   && pip3 install --upgrade pip                    \\\n   && pip install pypx\n\n3. Configuring the containerized version\n*******************************************\n\nIf using the container tool images directly, take care to assure that the machine receiving PACS transmissions is available and has a listener service accessible on an exposed port. This port should be accessible to the remote PACS. Our strong recommendation is to use the companion ``pfdcm`` container/repo to receive PACS data. Note that ``pfdcm`` itself contains ``pypx`` and will handle the reception and repacking of DICOM files using the correct ``pypx`` tools.\n\n4 Usage\n*********\n\n4.1 ``PACS_QR.sh`` and ``workflow.sh``\n======================================\n\nFor the most complete example, please consult the workflow.sh_ script in the source repository. This provides a Jupyter-notebook-shell-eque overview of most if not all the possible methods to call and use these tools.\n\nFor the most convenient example, use the ``PACS_QR.sh`` script -- consult its internal help with\n\n.. code-block:: bash\n\n  PACS_QR.sh -x\n\n4.2 ``PACS_QR.sh`` quick-n-dirty\n================================\n\nThe ``PACS_QR.sh`` has several implicit assumptions and values that can/should be set by approprate CLI. The entire scope is beyond this simple README, however, *assuming* these values are set (either by using the defaults or an appropriate/custom ``institution_set`` function), the workflow is rather simple. Assuming an MRN of say ``7654321``,\n\n.. code-block:: bash\n\n  # Query\n  PACS_QR.sh -- \"--PatientID 7654321\"\n\n  # More \"low level\" -- in fact `PACS_QR.sh` is mostly a convenience wrapper\n  # around these low level functions. For completeness sake the low level\n  # `Query` is shown here. Note that passing `PACS_QR.sh -v 1 ...` will\n  # instruct `PACS_QR.sh` to show the actual commands it uses.\n  px-find \\\n       --aec CHRIS \\\n       --aet CHRISV3 \\\n       --serverIP 134.174.12.21 \\\n       --serverPort 104 \\\n       --db /home/dicom/log \\\n       --verbosity 1 \\\n       --PatientID 7654321\n\n  # A similar call using the\n  #    --then report --withFeedBack\n  # (note if --then <something> is specified, then a --withFeedBack needs to be added\n  # for console ouput)\n  # Also, this report shows the SeriesInstanceUIDs in the report body\n  px-find \\\n       --aec CHRIS \\\n       --aet CHRISV3 \\\n       --serverIP 134.174.12.21 \\\n       --serverPort 104 \\\n       --db /home/dicom/log \\\n       --verbosity 1 \\\n       --PatientID 7654321 --then report --withFeedBack\n\n  # For the most flexibility in reporting, set find results to be JSON\n  # and pipe the json into the `px-report` app.\n  px-find \\\n       --aec CHRIS \\\n       --aet CHRISV3 \\\n       --serverIP 134.174.12.21 \\\n       --serverPort 104 \\\n       --db /home/dicom/log \\\n       --verbosity 1 --json \\\n       --PatientID 7654321 |\\\n  px-report \\\n       --colorize dark \\\n       --printReport tabular\n\n  # Retrieve\n  PACS_QR.sh --do retrieve -- \"--PatientID 7654321\"\n\n  # Status\n  PACS_QR.sh --do status -- \"--PatientID 7654321\"\n\n  # Push to CUBE swift storage\n  PACS_QR.sh --do push -- \"--PatientID 7654321\"\n\n  # Register to CUBE internal DB\n  PACS_QR.sh --do register -- \"--PatientID 7654321\"\n\nNote carefully the syntax of the above ``PACS_QR.sh`` commands! A ``--`` string separates script ``<key>/<value>`` pairs from a string defining the search parameters. Note that most valid DICOM tags can be used for this string. More tags can also make a search more specific, for instance\n\n.. code-block:: bash\n\n  \"--PatientID 7654321 --StudyDate 19990909\"\n\nwill limit returns only to hits performed on given ``StudyDate``.\n\n1. Development and debugging\n****************************\n\nThe recommended development/debug approach is to mount source directories into\nthe container and thus debug the containerized code from the host. Assuming you\nare in the source code repo root, and assuming you want to debug `px-push`:\n\n.. code-block:: bash\n\n  # Make sure that all env variables below are set appropriately!\n  docker run --rm -ti -v $PWD/pypx:/usr/local/lib/python3.8/dist-packages/pypx \\\n      -v $PWD/bin/px-push:/usr/local/bin/px-push                               \\\n      -v $LOCALDICOMDIR:$LOCALDICOMDIR -v $BASEMOUNT:$BASEMOUNT $PYPX          \\\n      --px-push                                                                \\\n                --swiftIP $SWIFTHOST                                           \\\n                --swiftPort $SWIFTPORT                                         \\\n                --swiftLogin $SWIFTLOGIN                                       \\\n                --swiftServicesPACS $SWIFTSERVICEPACS                          \\\n                --db $DB                                                       \\\n                --swiftPackEachDICOM                                           \\\n                --xcrdir $LOCALDICOMDIR                                        \\\n                --parseAllFilesWithSubStr dcm                                  \\\n                --verbosity 1                                                  \\\n                --json\n\n6. Additional support (incomplete)\n**********************************\n\nPlease see the relevant wiki pages for usage instructions (some are still under construction):\n\n- pfstorage_\n- px-do_\n- px-echo_\n- px-find_\n- px-move_\n- px-push_\n- px-register_\n- px-repack_\n- px-report_\n- px-status_\n- px-smdb_\n\n7. Credits\n*****************\n\nPyDicom_\n\n-  Author(s): darcymason_\n\nDCMTK_\n\n-  Author(s): Dicom @ OFFIS Team\n\n.. _px-repack: https://github.com/FNNDSC/pypx/wiki/1.-px-repack\n.. _px-echo: https://github.com/FNNDSC/pypx/wiki/1.-px-echo\n.. _px-find: https://github.com/FNNDSC/pypx/wiki/2.-px-find\n.. _px-report: https://github.com/FNNDSC/pypx/wiki/4.-px-report\n.. _px-move: https://github.com/FNNDSC/pypx/wiki/3.-px-move\n.. _px-push: https://github.com/FNNDSC/pypx/wiki/3.-px-push\n.. _px-register: https://github.com/FNNDSC/pypx/wiki/3.-px-register\n.. _px-do: https://github.com/FNNDSC/pypx/blob/master/bin/px-do\n.. _px-listen: https://github.com/FNNDSC/pypx/blob/master/bin/px-listen\n.. _px-status: https://github.com/FNNDSC/pypx/blob/master/bin/px-status\n.. _px-smdb: https://github.com/FNNDSC/pypx/wiki/3.-px-smdb\n.. _workflow.sh: https://github.com/FNNDSC/pypx/blob/master/workflow.sh\n.. _PyDicom: http://www.python.org/\n.. _darcymason: https://github.com/darcymason\n.. _DCMTK: http://dicom.offis.de/dcmtk.php.en\n.. _pfstorage: https://github.com/FNNDSC/pypx/blob/master/bin/pfstorage\n\n",
  "permissions": {
    "read": true,
    "write": false,
    "admin": false
  },
  "media_types": [
    "application/vnd.docker.container.image.v1+json"
  ],
  "content_types": [
    "image"
  ]
}