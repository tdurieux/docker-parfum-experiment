{
  "user": "baljan",
  "name": "cafesys",
  "namespace": "baljan",
  "repository_type": "image",
  "status": 1,
  "status_description": "active",
  "description": "",
  "is_private": false,
  "is_automated": false,
  "can_edit": false,
  "star_count": 1,
  "pull_count": 1154,
  "last_updated": "2021-03-11T16:20:03.943758Z",
  "date_registered": "2017-02-02T17:20:24.337001Z",
  "collaborator_count": 0,
  "affiliation": null,
  "hub_user": "baljan",
  "has_starred": false,
  "full_description": "# Cafesys\nCafesys is the Django application driving the website of Sektionscaf√© Baljan. It features staff management and the\nfantastic *Blipp* system for coffee.\n\n## Setting up a development environment in Docker\nThis assumes you already have Docker and Docker Compose installed.\n```sh\ncp .env.docker.tmpl .env.docker\ndocker-compose up\n```\n\nThe first time, run in another shell session:\n```sh\ndocker-compose run --rm cafesys-django django-admin.py syncdb\ndocker-compose run --rm cafesys-django django-admin.py migrate\ndocker-compose run --rm cafesys-django django-admin.py collectstatic --noinput\ndocker-compose run --rm cafesys-django django-admin.py shell\n```\n\nIn the Python shell, run\n```python\nfrom django.contrib.sites.models import Site\nSite.objects.create()\n```\n\nWhen making changes to the code, you might need to rebuild the environment:\n```sh\ndocker-compose build\ndocker-compose run --rm cafesys-django django-admin.py collectstatic --noinput\n```\n\nThis environment will use the `.env.docker` file for environment variables, **not** `.env`.\n\n## Setting up a local development environment\n### macOS\n**Note: This guide requires that you have installed Docker and Docker Compose (see https://docs.docker.com/compose/install/).**\n\nThis assumes you already have Homebrew installed and have basic knowledge on Python and its virtual environments.\n\nInstall system dependencies:\n```sh\nbrew tap homebrew/science\nbrew install python3 postgresql glpk\n```\n*FIXME:* the list of Homebrew packages is probably incomplete.\n\nCreate a virtualenv with a Python 3 interpreter and activate it:\n```sh\n# Install virtualenv if not already installed\npip install virtualenv\n\n# Setup and activate virtualenv\nvirtualenv -p python3 .venv\nsource .venv/bin/activate\n```\n\nThen install the needed Python dependencies:\n```sh\npip install -r requirements.txt\n```\n\nStart the `postgres` and `redis` services with Docker:\n```sh\ncp .env.docker.tmpl .env.docker\ndocker-compose up -d postgres redis\n```\n\nThe first time, run in another shell session:\n```sh\ncp .env.tmpl .env\n./manage.py migrate\n```\n\nStart the Django development server and Celery daemons. You will need to open at least three shell sessions.\nMake sure to activate the virtualenv with `source .venv/bin/activate` in every new shell session.\n```sh\n./manage.py runserver\ncelery -A cafesys beat\ncelery -A cafesys worker\n\n```\n\nThis environment will use the `.env` file for environment variables, **not** `.env.docker`.\n\n### Ubuntu 16.04\n**Note: This guide requires that you have installed Docker and Docker Compose (see https://docs.docker.com/compose/install/).**\n\nThis might work for other versions of Ubuntu but has only been tested on Ubuntu 16.04.\n\nStart by installing all dependencies. This can be done in a terminal by running the following commands:\n```sh\nadd-apt-repository ppa:jonathonf/python-3.6\napt-get update\napt-get install python3.6 python3.6-dev python3-pip libpq-dev build-essential libssl-dev g++ libffi-dev python3-dev pypy glpk-utils\npip3 install virtualenv\n```\n\nThe following steps are quite similar to the installation procedure on MacOS but differs slightly. First we setup the virtual environment: run the following command in a terminal at the repository root:\n```sh\nvirtualenv -p python3.6 .venv\nsource .venv/bin/activate\n```\n\nNext, you should be able to follow the MacOS guide from the step \"Then install the needed Python dependencies:\".\n\n### Vagrant (mainly for development on Windows)\nStart by downloading and installing Vagrant from https://www.vagrantup.com/.\n\nOpen a terminal in the root of the git repository and run `vagrant up`. This process may take a while, but please be patient.\n\nNow you have a virtual machine setup for the entire Baljan stack. This stack can be accessed using a wrapper\naround `manage.py` named `vmanage.py`. This means that the normal commands has been replaced with the wrapped\nversion. As a consequence of the wrapper implementation, it introduces some delay before every command is executed.\n\nMigrate the database by running manage.py locally:\n```sh\npython vmanage.py migrate\n```\n\nStart the server on the interface `0.0.0.0` by running:\n```sh\npython vmanage.py runserver 0.0.0.0:8000\n```\n\n## Livereload\n\nWhen doing work on the frontend it can be handy to see your changes in real-time. This can be achieved by using a tool called \"Livereload\". To activate this when developing, run this command instead of runserver (make sure to have sourced the virtualenv):\n\n```sh\n./manage.py livereload\n```\n",
  "permissions": {
    "read": true,
    "write": false,
    "admin": false
  },
  "media_types": [
    "application/vnd.docker.container.image.v1+json"
  ],
  "content_types": [
    "image"
  ]
}