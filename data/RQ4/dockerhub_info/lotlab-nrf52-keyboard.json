{
  "user": "lotlab",
  "name": "nrf52-keyboard",
  "namespace": "lotlab",
  "repository_type": "image",
  "status": 1,
  "status_description": "active",
  "description": "",
  "is_private": false,
  "is_automated": false,
  "can_edit": false,
  "star_count": 2,
  "pull_count": 425,
  "last_updated": "2021-05-01T08:22:40.500527Z",
  "date_registered": "2021-01-23T11:02:07.04853Z",
  "collaborator_count": 0,
  "affiliation": null,
  "hub_user": "lotlab",
  "has_starred": false,
  "full_description": "# nrf52-keyboard\n![Build Status](https://api.travis-ci.org/Lotlab/nrf52-keyboard.svg?branch=master)\n\n## Overview\n\nThis is a TMK based keyboard firmware for nRF52 series, now support both nRF52810 and nRF52832. Firmware for nRF51822 see [here](https://github.com/Lotlab/nrf51822-keyboard).\n\n## Directory Structure\n\n- application: contians the bootloader and application for nrf52\n  - main: main program for nrf52\n    - src: source\n      - ble: bluetooth related code \n      - config: sdk config\n      - driver: driver for peripheral device\n      - keyboard: keyboard logic \n      - protocol: communication protocol\n      - tmk: tmk adaptor\n    - project\n  - bootloader: bootloader for nrf52\n    - project\n- doc: documents\n- keyboard: keyboard config \n- SDK: directory for placing nrf SDK\n- template: nrf SDK makefile template\n- tmk: tmk source code\n- usb: code for ch554\n\n## Code Branch\n\n- Master: is not stable, may contains some critical bug.\n- Develop: is not stable, including some unfinished feature, may not pass compile.\n\nIf you want to use this project in your major keyboard, please see the Release page.\n\n## Highlights\n\n- BLE/USB dual mode\n- USB NKRO\n- Macro support\n- Dynamic keymap/macro configuration\n- Battery level upload\n- Mousekey and media key support\n- Low power comsumption. (~200ua when all LED off in Lot60-BLE)\n- Support rotary encoder and other peripheral device (see driver directory)\n- Highly customable event system\n\n## Hardware supporting\n\nCurrently we support both nRF52810 and nRF52832. See keyboard directory for more information.\n\n## Compile\n\nFirstly, you should download [nRF5 SDK 15.3](https://www.nordicsemi.com/Software-and-Tools/Software/nRF5-SDK/Download#infotabs), decompress it and put it into the SDK folder. The structure of SDK folder will be `SDK/components`, ...\n\nAnd then, install `gcc-arm-none-eabi-7-2018-q2-update`. Copy the `Makefile.posix.template` or `Makefile.windows.template` to `Makefile.posix` or `Makefile.windows` (depending your OS), then modify the toolchain path in the file to your gcc installed path.\n\nInstall [SDCC](http://sdcc.sourceforge.net/) to compile code for CH554. Note: This project require SDCC 4.0 to compile, older version in ubuntu 18.04 and debian 10 will not work.\n\nIf you want to compile the bootloader, you should firstly complie the uECC library. See this [article](https://devzone.nordicsemi.com/b/blog/posts/getting-started-with-nordics-secure-dfu-bootloader).\n\nThen, \n```bash\ncd keyboard/lot60-ble\nmake # Compile main program and the USB program\nmake bootloader # Compile bootloader\n```\n\nWe also provide Docker image for you to compile, this image contains toolchain and sdk. \n```bash\ndocker run lotlab/nrf52-keyboard\n```\n\n## Flashing\n\nIt's recommend to use DAP-Link to flashing nrf52 chip. If you want to do so, please install [pyocd](https://github.com/mbedmicro/pyOCD). If you want to generate DFU package, you should install [nrfutil](https://github.com/NordicSemiconductor/pc-nrfutil/).\n\nFor ch554, you could use the official [flasing utility](http://www.wch.cn/downloads/WCHISPTool_Setup_exe.html) in windows, or third-party [usbisp](https://github.com/rgwan/librech551) in linux.\n\nType `make help` for all flashing command.\n\n## 概述\n\n这是一个基于nrf52蓝牙键盘的固件，使用了nRF SDK 15.3作为底层硬件驱动，并使用TMK键盘库作为键盘功能的上部实现。\n\n## 目录结构\n- application/ 固件相关\n  - main/ 主程序\n    - src/ 源码\n      - ble/ 蓝牙相关代码\n      - config/ 硬件配置相关\n      - protocol/ 通讯相关\n      - driver/ 外置驱动\n      - tmk/ tmk桥接相关\n    - project/ 工程\n  - bootloader/ \n    - src/ 源码\n    - project/ 工程\n- keyboard/ 各个键盘实现相关\n- SDK/ nRF52 SDK\n- tmk/ tmk core 相关\n- usb/ USB部分代码\n\n## 分支说明\n\n- Master 分支是不稳定的分支，可能存在一些BUG\n- Develop 分支是更不稳定的分支，可能会出现无法编译通过的问题\n\n若想要日常使用，建议使用Release版本\n\n## 功能亮点\n\n- 蓝牙/USB双模切换\n- USB全键无冲\n- 配列下载更新\n- 电量上传\n- 支持多媒体按键和鼠标键\n- 支持按键宏\n- 耗电量低至200ua（使用lot60-ble硬件在关闭所有灯光条件下测得，不代表所有条件下的状态）\n- 高度自定义的事件系统\n- 支持旋钮、WS2812等外设（详见drivers目录）\n\n## 硬件支持\n\n当前支持nrf52810和nrf52832两种主控硬件，此固件支持的键盘列表见Keyboard目录。\n\n## 编译\n\n首先下载 [nRF5 SDK 15.3](https://www.nordicsemi.com/Software-and-Tools/Software/nRF5-SDK/Download#infotabs), 解压并放入SDK文件夹。\n然后安装 gcc-arm-none-eabi-7-2018-q2-update，将template目录中对应平台的配置文件模板复制一份，重命名为`Makefile.posix`或`Makefile.windows`，修改里面工具路径为你的安装目录。\n\n然后安装 [SDCC](http://sdcc.sourceforge.net/) 用于编译CH554相关代码。注意：需要 SDCC 4.0 及以上版本才可编译，部分操作系统（如ubuntu 18.04, debian 10）内的 SDCC 版本无法满足要求。\n\n我们也提供了Docker镜像方便编译，请使用\n```bash\ndocker run lotlab/nrf52-keyboard\n```\n\n### Bootloader 的编译\n参见[这篇文章](https://devzone.nordicsemi.com/nordic/short-range-guides/b/software-development-kit/posts/getting-started-with-nordics-secure-dfu-bootloader)，先编译uECC库，然后再编译Bootloader\n\n### 蓝牙程序和USB控制器的编译\n现在蓝牙和USB控制器程序的Makefile都放在一起了。进入对应的硬件目录，直接make即可。\n\n```bash\ncd keyboard/lot60-ble\nmake # 编译主程序和USB控制程序\nmake bootloader # 编译bootloader\n```\n\n### 硬件的烧录\n\n对于nrf52，若要通过JLink直接写入，则需要安装JLink的驱动；若使用DAP-Link写入，则需要安装[pyocd](https://github.com/mbedmicro/pyOCD)；若使用蓝牙DFU进行升级，则需要安装[nrfutil](https://github.com/NordicSemiconductor/pc-nrfutil/)\n\n对于ch554，你可以使用官方的[windows烧写工具](http://www.wch.cn/downloads/WCHISPTool_Setup_exe.html)，或三方的[usbisp](https://github.com/rgwan/librech551)烧写。\n\n请使用`make help`查看所有的烧写和打包指令。\n\n### 详细教程\n\n如果对上面的固件编译流程有问题，可参考Lotlab Wiki上的[这篇文章](https://wiki.lotlab.org/page/bluetooth/build-guide/)，或查看`.travis.yml`作为参考。\n\n## 硬件移植\n请参考Keyboard目录下的template移植模板，并查看doc目录下的对应说明。\n\n## 捐助\n\n如果你觉得这个工程有帮助到你，为何不请我喝一杯奶茶呢？\n\n![支付宝二维码 donate@lotlab.org](https://raw.githubusercontent.com/Lotlab/mcsgyz/gh-pages/pic/alipay.jpg)\n",
  "permissions": {
    "read": true,
    "write": false,
    "admin": false
  },
  "media_types": [
    "application/vnd.docker.container.image.v1+json"
  ],
  "content_types": [
    "image"
  ]
}