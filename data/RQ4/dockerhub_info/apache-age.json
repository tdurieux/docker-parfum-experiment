{
  "user": "apache",
  "name": "age",
  "namespace": "apache",
  "repository_type": "image",
  "status": 1,
  "status_description": "active",
  "description": "Apache AGE ",
  "is_private": false,
  "is_automated": false,
  "can_edit": false,
  "star_count": 6,
  "pull_count": 3086,
  "last_updated": "2023-01-05T04:36:52.892085Z",
  "date_registered": "2022-01-21T02:41:55.25648Z",
  "collaborator_count": 0,
  "affiliation": null,
  "hub_user": "clambertus",
  "has_starred": false,
  "full_description": "<br>\n\n<p align=\"center\">\n     <img src=\"https://age.apache.org/age-manual/master/_static/logo.png\" width=\"30%\" height=\"30%\">\n</p>\n<br>\n\n<h3 align=\"center\">\n    <a href=\"https://age.apache.org/age-manual/master/_static/logo.png\" target=\"_blank\">\n        <img src=\"https://age.apache.org/age-manual/master/_static/logo.png\"\" height=\"25\" height=\"30% alt=\"Apache AGE\">\n    </a>\n    <a href=\"https://age.apache.org/age-manual/master/_static/logo.png\" target=\"_blank\">\n    </a>\n     is a leading multi-model graph database </h3>\n     \n</h3>\n\n<h3 align=\"center\">Graph Processing & Analytics for Relational Databases</h3>\n\n<br>\n\n\n</br>\n\n\n\n<p align=\"center\">                                                                                                    \n  <a href=\"https://github.com/apache/age/blob/master/LICENSE\">\n    <img src=\"https://img.shields.io/github/license/apache/age\"/>\n  </a>\n  &nbsp;\n  <a href=\"https://github.com/apache/age/releases\">\n    <img src=\"https://img.shields.io/badge/Release-v1.1.0-FFA500?labelColor=gray&style=flat&link=https://github.com/apache/age/releases\"/>\n  </a>\n  &nbsp;\n  <a href=\"https://github.com/apache/age/issues\">\n    <img src=\"https://img.shields.io/github/issues/apache/age\"/>\n  </a>\n  &nbsp;\n  <a href=\"https://github.com/apache/age/network/members\">\n    <img src=\"https://img.shields.io/github/forks/apache/age\"/>\n  </a>\n  &nbsp;\n  <a href=\"https://github.com/apache/age/stargazers\">\n    <img src=\"https://img.shields.io/github/stars/apache/age\"/>\n  </a>\n  &nbsp;\n  <a href=\"https://discord.gg/NMsBs9X8Ss\">\n    <img src=\"https://img.shields.io/discord/1022177873127280680.svg?label=discord&style=flat&color=5a66f6\"></a>\n</p>\n\n<br>\n\n\n<h2><img height=\"30\" src=\"/img/AGE.png\">&nbsp;&nbsp;What is Apache AGE?</h2>\n\n[Apache AGE](https://age.apache.org/#) is an extension for PostgreSQL that enables users to leverage a graph database on top of the existing relational databases. AGE is an acronym for A Graph Extension and is inspired by Bitnine's AgensGraph, a multi-model database fork of PostgreSQL. The basic principle of the project is to create a single storage that handles both the relational and graph data model so that the users can use the standard ANSI SQL along with openCypher, one of the most popular graph query languages today. \n</br>\n</br>\n</br>\n\n<p align=\"center\">\n<img src=\"/img/age-01.png\" width=\"80%\" height=\"80%\">\n</p>\n\n</br>\n\nSince AGE is based on the powerful PostgreSQL RDBMS, it is robust and fully featured. AGE is optimized for handling complex connected graph data. It provides plenty of robust databases features essential to the database environment, including ACID transactions, multi-version concurrency control (MVCC), stored procedure, triggers, constraints, sophisticated monitoring, and a flexible data model (JSON). Users with a relational background who require graph data analytics can use this extension with minimal effort because they can use existing data without having to go through migration. \n\nThere is a strong need for cohesive, easy-to-implement multi-model databases. As an extension of PostgreSQL, AGE supports all the functionalities and features of PostgreSQL while also offering a graph model to boot.\n\n\n<h2><img height=\"30\" src=\"/img/tick.svg\">&nbsp;&nbsp;Overview</h2>\n\nApache AGE is : \n\n- **Powerful**: adds graph database support to the already popular PostgreSQL database: PostgreSQL is used by organizations including Apple, Spotify, and NASA.\n- **Flexible**: allows you to perform openCypher queries, which makes complex queries much easier to write. It also enables multiple graphs at the same time.\n- **Intelligent**: allows you to perform graph queries that are the basis for many next-level web services such as fraud detection, master data management, product recommendations, identity and relationship management, experience personalization, knowledge management, and more.\n\n<h2><img height=\"30\" src=\"/img/features.svg\">&nbsp;&nbsp;Features</h2>\n</br>\n</br>\n\n<p align=\"center\">\n<img src=\"/img/age-03.png\" width=\"80%\" height=\"80%\">\n</p>\n</br>\n\n- **Cypher Query**: supports graph query language\n- **Hybrid Querying**: enables SQL and/or Cypher\n- **Querying**: enables multiple graphs\n- **Hierarchical**: graph label organization\n- **Property Indexes**: on both vertices(nodes) and edges\n- **Full PostgreSQL**: supports PG features\n\n\n\n<h2><img height=\"30\" src=\"/img/documentation.svg\">&nbsp;&nbsp;Documentation</h2>\n\nRefer to our latest [Apache AGE documentation](https://age.apache.org/age-manual/master/index.html) to learn about installation, features, built-in functions, and  Cypher queries.\n\n\n\n<h2><img height=\"30\" src=\"/img/installation.svg\">&nbsp;&nbsp;Pre-Installation</h2>\n\nInstall the following essential libraries according to each OS. Building AGE from the source depends on the following Linux libraries (Ubuntu package names shown below):\n\n- **CentOS**\n```bash\nyum install gcc glibc glib-common readline readline-devel zlib zlib-devel flex bison\n```\n- **Fedora**\n```bash\ndnf install gcc glibc bison flex readline readline-devel zlib zlib-devel\n```\n- **Ubuntu**\n```bash\nsudo apt-get install build-essential libreadline-dev zlib1g-dev flex bison\n```\n\n<h2><img height=\"30\" src=\"/img/installation.svg\">&nbsp;&nbsp;Installation</h2>\n\nApache AGE is intended to be simple to install and run. It can be installed with Docker and other traditional ways. \n\n<h4><a><img width=\"20\" src=\"/img/pg.svg\"></a>\n&nbsp;Install PosgtreSQL\n</h4>\n\nYou will need to install an AGE compatible version of Postgres<a>, for now AGE supports Postgres 11 and 12. Supporting the latest versions is on AGE roadmap. \n     \n<h4>\n&nbsp;Install From Package Manager\n</h4>\n\nYou can use a <a href=\"https://www.postgresql.org/download/\">package management </a> that your OS provides to download AGE.\n\n<br>\n\n```bash\nsudo apt install postgresql \n\n```\n<h4>\n&nbsp;Install From Source Code\n</h4>\n\nYou can <a href=\"https://www.postgresql.org/ftp/source/\"> download the Postgres </a> source code and install your own instance of Postgres. You can read instructions on how to install from source code for different versions on the <a href=\"https://www.postgresql.org/docs/11/installation.html\">official Postgres Website.</a>\n\n\n\n<h4><img width=\"20\" src=\"/img/tux.svg\"><img width=\"20\" src=\"/img/apple.svg\"> &nbsp;Install AGE on Linux and MacOS\n</h4>\n\nClone the <a href=\"https://github.com/apache/age\">github repository</a> or download the<a href=\"https://github.com/apache/age/releases\">download an official release.\n</a>\nRun the pg_config utility and check the version of PostgreSQL. Currently, only PostgreSQL versions 11 & 12 are supported. If you have any other version of Postgres, you will need to install PostgreSQL version 11 & 12.\n<br>\n    \n```bash\npg_config\n```\nRun the following command in the source code directory of Apache AGE to build and install the extension.  \n     \n```bash\nmake install\n```\n     \nIf the path to your Postgres installation is not in the PATH variable, add the path in the arguments:\n```bash\nmake PG_CONFIG=/path/to/postgres/bin/pg_config install\n```\n\n\n<h4></a><img width=\"30\" src=\"/img/docker.svg\"></a>\n&nbsp;Run using Docker\n</h4>\n\n<h5> Get the docker image </h5>\n\n```bash\ndocker pull apache/age\n\n```\n<h5> Create AGE docker container </h5>\n\n```bash\ndocker run \\\n    --name age  \\\n    -p 5455:5432 \\\n    -e POSTGRES_USER=postgresUser \\\n    -e POSTGRES_PASSWORD=postgresPW \\\n    -e POSTGRES_DB=postgresDB \\\n    -d \\\n    apache/age\n```\n\n\n\n<h2><img height=\"20\" src=\"/img/contents.svg\">&nbsp;&nbsp;Post Installation</h2>\n\nFor every connection of AGE you start, you will need to load the AGE extension.\n\n```bash\nCREATE EXTENSION age;\n```\n```bash\nLOAD 'age';\n```\n```bash\nSET search_path = ag_catalog, \"$user\", public;\n```\n\n\n\n<h2><img height=\"20\" src=\"/img/contents.svg\">&nbsp;&nbsp;Quick Start</h2>\n\nTo create a graph, use the create_graph function located in the ag_catalog namespace.\n\n```bash\nSELECT create_graph('graph_name');\n```\n\nTo create a single vertex, use the CREATE clause. \n\n```bash\nSELECT * \nFROM cypher('graph_name', $$\n    CREATE (n)\n$$) as (v agtype);\n```\n\n\nTo create a single vertex with the label, use the CREATE clause. \n\n```bash\nSELECT * \nFROM cypher('graph_name', $$\n    CREATE (:label)\n$$) as (v agtype);\n```\n\nTo query the graph, you can use the MATCH clause.  \n\n```bash\nSELECT * FROM cypher('graph_name', $$\nMATCH (v)\nRETURN v\n$$) as (v agtype);\n```\n\nYou can use the following to create an edge, for example, between two nodes. \n\n```bash\nSELECT * \nFROM cypher('graph_name', $$\n    MATCH (a:label), (b:label)\n    WHERE a.property = 'Node A' AND b.property = 'Node B'\n    CREATE (a)-[e:RELTYPE]->(b)\n    RETURN e\n$$) as (e agtype);\n```\n\n\nTo create an edge and set properties.\n\n```bash\nSELECT * \nFROM cypher('graph_name', $$\n    MATCH (a:label), (b:label)\n    WHERE a.property = 'Node A' AND b.property = 'Node B'\n    CREATE (a)-[e:RELTYPE {property:a.property + '<->' + b.property}]->(b)\n    RETURN e\n$$) as (e agtype);\n```\n\nExample \n\n```bash\nSELECT * \nFROM cypher('graph_name', $$\n    MATCH (a:Person), (b:Person)\n    WHERE a.name = 'Node A' AND b.name = 'Node B'\n    CREATE (a)-[e:RELTYPE {name:a.name + '<->' + b.name}]->(b)\n    RETURN e\n$$) as (e agtype);\n```\n\n\n\n<h2><img height=\"20\" src=\"/img/gettingstarted.svg\">&nbsp;&nbsp;Language Specific Drivers</h2>\n\nStarting with Apache AGE is very simple. You can easily select your platform and incorporate the relevant SDK into your code.\n</br>\n</br>\n\n<p align=\"center\">\n<img src=\"/img/age-02.png\" width=\"80%\" height=\"80%\">\n</p>\n\n\n<h4>Built-in</h4>\n\n- [Go driver](./drivers/golang)\n- [Java driver](./drivers/jdbc)\n- [NodeJs driver](./drivers/nodejs)\n- [Python driver](./drivers/python)\n\n<h4>Community-driven Driver</h4>\n\n- [Apache AGE Rust Driver](https://github.com/Dzordzu/rust-apache-age.git)\n\n\n\n\n<h2><img height=\"20\" src=\"/img/contributing.svg\">&nbsp;&nbsp;Community</h2>\n\nJoin the AGE community for help, questions, discussions, and contributions. \n\n- Check our [website](https://age.apache.org/)\n- Chat live with us on [Discord](https://discord.com/invite/NMsBs9X8Ss/)\n- Follow us on [Twitter](https://twitter.com/apache_age?s=20&t=7Hu8Txk4vjvuEp-ryakacg)\n- Join our [Dev community](https://lists.apache.org/list.html?dev@age.apache.org)\n\n\n<h2><img height=\"20\" src=\"/img/visualization.svg\">&nbsp;&nbsp;Graph Visualization Tool for AGE</h2>\n\n\nApache AGE Viewer is a user interface for Apache AGE that provides visualization and exploration of data.\nThis web visualization tool allows users to enter complex graph queries and explore the results in graph and table forms.\nApache AGE Viewer is enhanced to proceed with extensive graph data and discover insights through various graph algorithms.\nApache AGE Viewer will become a graph data administration and development platform for Apache AGE to support multiple relational databases: <https://github.com/apache/age-viewer>.\n\n**This is a visualization tool.**\nAfter installing AGE Extension, you may use this tool to get access to the visualization features.\n\n\n![Viewer gdb, and graph](/img/agce.gif)\n\n\n\n<h2><img height=\"20\" src=\"/img/community.svg\">&nbsp;&nbsp;Contributing</h2>\n\nYou can improve ongoing efforts or initiate new ones by sending pull requests to [this repository](https://github.com/apache/age).\nAlso, you can learn from the code review process, how to merge pull requests, and from code style compliance to documentation by visiting the [Apache AGE official site - Developer Guidelines](https://age.apache.org/contribution/guide).\nSend all your comments and inquiries to the user mailing list, users@age.apache.org.\n",
  "permissions": {
    "read": true,
    "write": false,
    "admin": false
  },
  "media_types": [
    "application/vnd.docker.container.image.v1+json"
  ],
  "content_types": [
    "image"
  ]
}