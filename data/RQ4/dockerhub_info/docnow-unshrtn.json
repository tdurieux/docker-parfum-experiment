{
  "user": "docnow",
  "name": "unshrtn",
  "namespace": "docnow",
  "repository_type": "image",
  "status": 1,
  "status_description": "active",
  "description": "A URL unshortening microservice.",
  "is_private": false,
  "is_automated": true,
  "can_edit": false,
  "star_count": 0,
  "pull_count": 175,
  "last_updated": "2020-12-08T15:04:46.63531Z",
  "date_registered": "2017-12-17T16:26:04.865493Z",
  "collaborator_count": 0,
  "affiliation": null,
  "hub_user": "docnow",
  "has_starred": false,
  "full_description": "# unshrtn\n\n*unshrtn* is a [LevelDB] backed URL unshortening microservice written in\n[JavaScript] and [Node] for quick, asynchronous processing of requests.\n*unshrtn* remembers what it has already looked up so it can save you the trouble\nof keeping track of URLs when you are looking up a lot of them at one time and\nthey haven't necessarily been de-duplicated.\n\n*unshrtn* uses the [metaweb] library to do the lookups, which means that in addition to returning the unshortened URL you will also get some potentially useful metadata if the response happens to be HTML:\n\n```\n% curl http://localhost:3000?url=https://bit.ly/348J1DN\n{\n  \"short\": \"https://bit.ly/348J1DN\",\n  \"long\": \"https://www.youtube.com/watch?v=oHg5SJYRHA0\",\n  \"canonical\": \"https://www.youtube.com/watch?v=oHg5SJYRHA0\",\n  \"status\": 200,\n  \"content_type\": \"text/html; charset=utf-8\",\n  \"title\": \"RickRoll'D - YouTube\",\n  \"description\": \"http://www.facebook.com/rickroll548 As long as trolls are still trolling, the Rick will never stop rolling.\",\n  \"image\": \"https://i.ytimg.com/vi/oHg5SJYRHA0/hqdefault.jpg\",\n  \"publisher\": \"YouTube\",\n  \"keywords\": [\"Cotter548\", \"Shawn\", \"Cotter\", \"lol\", \"gamefaqs\", \"CE\", \"reddit\", \"rettocs\", \"no\", \"brb\", \"afk\", \"lawl\", \"pwnt\", \"Rickroll\", \"Rickroll'd\", \"Rick\", \"Roll\", \"Duckroll\", \"Duck\", \"rick\", \"roll\", \"astley\", \"...\"]\n}\n```\n\n## Install\n\nProbably the easiest way to get *unshrtn* up and running is with [Docker].\n\n    docker run -p 3000:3000 docnow/unshrtn\n\nYou can also install it with [npm]:\n\n    % npm install -g unshrtn\n\n## Usage\n\nOnce installed you can start up the microservice:\n\n    % unshrtn start\n\nIf you'd like more control over how it starts use the *start* subcommand:\n\n    % unshrtn start --host 0.0.0.0 --port 8080 --log /var/log/unshrtn.log\n\nBy default *unshrtn* writes its database to *unshrtn.db* in the current working\ndirectory. However you can control this with the *--database* option:\n\n    % unshrt start --database /var/unshrtn/unshrtn.db\n\nYou can dump the database as line oriented JSON and load it again if you want to\nback it up or move it around:\n\n    % unshrtn dump /path/to/datbase > backup.jsonl\n    % cat backup.jsonl | unshrtn load /path/to/another/database\n\nIf you just want to look up one URL you can also use *unshrtn* on the command line:\n\n    % unshrtn get https://bitly.com/4kb77v\n\n[LevelDB]: https://code.google.com/p/leveldb/\n[JavaScript]: https://en.wikipedia.org/wiki/JavaScript\n[Node]: https://nodejs.org\n[canonical links]: https://en.wikipedia.org/wiki/Canonical_link_element\n[Docker]: https://www.docker.com/\n[npm]: https://www.npmjs.com/\n[metaweb]: https://github.com/edsu/metaweb\n",
  "permissions": {
    "read": true,
    "write": false,
    "admin": false
  },
  "media_types": [
    "application/vnd.docker.container.image.v1+json"
  ],
  "content_types": [
    "image"
  ]
}