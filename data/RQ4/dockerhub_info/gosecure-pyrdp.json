{
  "user": "gosecure",
  "name": "pyrdp",
  "namespace": "gosecure",
  "repository_type": "image",
  "status": 1,
  "status_description": "active",
  "description": "A Remote Desktop Protocol (RDP) monster-in-the-middle (mitm) tool and library written in Python",
  "is_private": false,
  "is_automated": false,
  "can_edit": false,
  "star_count": 0,
  "pull_count": 4915,
  "last_updated": "2022-12-23T17:57:35.534689Z",
  "date_registered": "2019-11-03T23:37:48.983832Z",
  "collaborator_count": 0,
  "affiliation": null,
  "hub_user": "gosecure",
  "has_starred": false,
  "full_description": "# PyRDP\n\n![pipeline status](https://github.com/GoSecure/pyrdp/workflows/Build/badge.svg?branch=master)\n\nPyRDP is a Python 3 Remote Desktop Protocol (RDP) Man-in-the-Middle (MITM) and library.\n\n![PyRDP Logo](https://raw.githubusercontent.com/GoSecure/pyrdp/master/docs/pyrdp-logo.svg?sanitize=true)\n\nIt features a few tools:\n- RDP Man-in-the-Middle\n    - Logs credentials used when connecting\n    - Steals data copied to the clipboard\n    - Saves a copy of the files transferred over the network\n    - Crawls shared drives in the background and saves them locally\n    - Saves replays of connections so you can look at them later\n    - Runs console commands or PowerShell payloads automatically on new connections\n- RDP Player:\n    - See live RDP connections coming from the MITM\n    - View replays of RDP connections\n    - Take control of active RDP sessions while hiding your actions\n    - List the client's mapped drives and download files from them during active sessions\n- RDP Certificate Cloner:\n    - Create a self-signed X509 certificate with the same fields as an RDP server's certificate\n\nPyRDP was [introduced in 2018](https://www.gosecure.net/blog/2018/12/19/rdp-man-in-the-middle-smile-youre-on-camera) in\nwhich we [demonstrated that we can catch a real threat actor in\naction](https://www.youtube.com/watch?v=eB7RC9FmL6Q). This tool is being developed with both pentest and malware\nresearch use cases in mind.\n\n\n![PyRDP Player Replaying an RDP session](docs/screens/replay.png)\n\n\n## Table of Contents\n- [Supported Systems](#supported-systems)\n- [Installing](#installing)\n  * [Using the Docker Image](#using-the-docker-image)\n  * [From Git Source](#from-git-source)\n  * [Installing on Windows](#installing-on-windows)\n  * [Building the Docker Image](#building-the-docker-image)\n  * [Migrating away from pycrypto](#migrating-away-from-pycrypto)\n- [Using PyRDP](#using-pyrdp)\n  * [Using the PyRDP Man-in-the-Middle](#using-the-pyrdp-man-in-the-middle)\n    + [Specifying the private key and certificate](#specifying-the-private-key-and-certificate)\n    + [Connecting to the PyRDP player](#connecting-to-the-pyrdp-player)\n      - [Connecting to a PyRDP player when the MITM is running on a server](#connecting-to-a-pyrdp-player-when-the-mitm-is-running-on-a-server)\n    + [Running payloads on new connections](#running-payloads-on-new-connections)\n      - [Setting the payload](#setting-the-payload)\n      - [Choosing when to start the payload](#choosing-when-to-start-the-payload)\n      - [Choosing when to resume normal activity](#choosing-when-to-resume-normal-activity)\n    + [Other MITM arguments](#other-mitm-arguments)\n      - [--no-downgrade](#--no-downgrade)\n      - [--transparent](#--transparent)\n      - [`--no-gdi`: Disable Accelerated Graphics Pipeline](#--no-gdi-disable-accelerated-graphics-pipeline)\n  * [Using the PyRDP Player](#using-the-pyrdp-player)\n    + [Playing a replay file](#playing-a-replay-file)\n    + [Listening for live connections](#listening-for-live-connections)\n    + [Changing the listening address](#changing-the-listening-address)\n    + [Other player arguments](#other-player-arguments)\n  * [Using the PyRDP Certificate Cloner](#using-the-pyrdp-certificate-cloner)\n    + [Cloning a certificate](#cloning-a-certificate)\n    + [Using a custom private key](#using-a-custom-private-key)\n    + [Other cloner arguments](#other-cloner-arguments)\n  * [Using PyRDP Convert](#using-pyrdp-convert)\n  * [Configuring PyRDP](#configuring-pyrdp)\n  * [Using PyRDP as a Library](#using-pyrdp-as-a-library)\n  * [Using PyRDP with twistd](#using-pyrdp-with-twistd)\n  * [Using PyRDP with Bettercap](#using-pyrdp-with-bettercap)\n  * [Docker Specific Usage Instructions](#docker-specific-usage-instructions)\n    + [Mapping a Listening Port](#mapping-a-listening-port)\n    + [Logs and Artifacts Storage](#logs-and-artifacts-storage)\n    + [Using the GUI Player in Docker](#using-the-gui-player-in-docker)\n- [PyRDP Lore](#pyrdp-lore)\n- [Contributing to PyRDP](#contributing-to-pyrdp)\n- [Acknowledgements](#acknowledgements)\n\n\n## Supported Systems\nPyRDP should work on Python 3.6 and up.\n\nThis tool has been tested to work on Python 3.6 on Linux (Ubuntu 18.04) and Windows (See section [Installing on\nWindows](#installing-on-windows)). It has not been tested on OSX.\n\n## Installing\n\n### Using the Docker Image\n\nThis is the easiest installation method if you have docker installed and working.\n\n```\ndocker pull gosecure/pyrdp:latest\n```\n\nAs an alternative we have a slimmer image without the GUI and ffmpeg dependencies.\n\n```\ndocker pull gosecure/pyrdp:latest-slim\n```\n\n### From Git Source\n\nWe recommend installing PyRDP in a\n[virtual environment](https://packaging.python.org/guides/installing-using-pip-and-virtual-environments/)\nto avoid dependency issues.\n\nFirst, make sure to install the prerequisite packages (on Ubuntu). We provide two types of installs a full one and a\nslim one. Install the dependencies according to your use case.\n\n```\n# Full install (GUI, transcoding to MP4)\nsudo apt install python3 python3-pip python3-dev python3-setuptools python3-venv \\\n        build-essential python3-dev git openssl \\\n        libdbus-1-dev libdbus-glib-1-dev libgl1-mesa-glx \\\n        notify-osd dbus-x11 libxkbcommon-x11-0 \\\n        libavformat-dev libavcodec-dev libavdevice-dev \\\n        libavutil-dev libswscale-dev libswresample-dev libavfilter-dev\n\n# Slim install (no GUI, no transcoding)\nsudo apt install python3 python3-pip python3-setuptools python3-venv \\\n        build-essential python3-dev git openssl\n```\n\nGrab PyRDP's source code:\n\n```\ngit clone https://github.com/gosecure/pyrdp.git\n```\n\nThen, create your virtual environment in the `venv` directory inside PyRDP's directory:\n\n```\ncd pyrdp\npython3 -m venv venv\n```\n\n*DO NOT* use the root PyRDP directory for the virtual environment folder (`python3 -m venv .`). You will make a mess,\nand using a directory name like `venv` is more standard anyway.\n\nBefore installing the dependencies, you need to activate your virtual environment:\n\n```\nsource venv/bin/activate\n```\n\nFinally, you can install the project with Pip:\n\n```\npip3 install -U pip setuptools wheel\n\n# Without GUI and ffmpeg dependencies\npip3 install -U -e .\n\n# With GUI and ffmpeg dependencies\npip3 install -U -e '.[full]'\n```\n\nThis should install the dependencies required to run PyRDP. If you choose to\ninstall without GUI or ffmpeg dependencies, it will not be possible to use\n`pyrdp-player` without headless mode (`--headless`) or `pyrdp-convert`.\n\nIf you ever want to leave your virtual environment, you can simply deactivate it:\n\n```\ndeactivate\n```\n\nNote that you will have to activate your environment every time you want to have the PyRDP scripts available as shell\ncommands.\n\n### Installing on Windows\n\nThe steps are almost the same. There are two additional prerequisites.\n\n1. Any C compiler\n2. [OpenSSL](https://wiki.openssl.org/index.php/Binaries). Make sure it is reachable from your `$PATH`.\n\nThen, create your virtual environment in PyRDP's directory:\n\n```\ncd pyrdp\npython3 -m venv venv\n```\n\n*DO NOT* use the root PyRDP directory for the virtual environment folder (`python3 -m venv .`). You will make a mess,\nand using a directory name like `venv` is more standard anyway.\n\nBefore installing the dependencies, you need to activate your virtual environment:\n\n```\nvenv\\Scripts\\activate\n```\n\nFinally, you can install the project with Pip:\n\n```\npip3 install -U pip setuptools wheel\npip3 install -U -e \".[full]\"\n```\n\nThis should install all the dependencies required to run PyRDP.\n\nIf you ever want to leave your virtual environment, you can simply deactivate it:\n\n```\ndeactivate\n```\n\nNote that you will have to activate your environment every time you want to have the PyRDP scripts available as shell\ncommands.\n\n### Building the Docker Image\n\nFirst of all, build the image by executing this command at the root of PyRDP (where Dockerfile is located):\n\n```\ndocker build -t pyrdp .\n```\n\nAs an alternative we have a slimmer image without the GUI and ffmpeg dependencies:\n\n```\ndocker build -f Dockerfile.slim -t pyrdp .\n```\n\nAfterwards, you can execute PyRDP by invoking the `pyrdp` docker container. See [Usage instructions](#using-pyrdp) and the [Docker specific instructions](#docker-specific-usage-instructions) for details.\n\n### Migrating away from pycrypto\nSince pycrypto isn't maintained anymore, we chose to migrate to pycryptodome.\nIf you get this error, it means that you are using the module pycrypto instead of pycryptodome.\n\n```\n[...]\n  File \"[...]/pyrdp/pyrdp/pdu/rdp/connection.py\", line 10, in <module>\n    from Crypto.PublicKey.RSA import RsaKey\nImportError: cannot import name 'RsaKey'\n```\n\nYou will need to remove the module pycrypto and reinstall PyRDP.\n\n```\npip3 uninstall pycrypto\npip3 install -U -e .\n```\n\n## Using PyRDP\n\n### Using the PyRDP Man-in-the-Middle\nUse `pyrdp-mitm.py <ServerIP>` or `pyrdp-mitm.py <ServerIP>:<ServerPort>` to run the MITM.\n\nAssuming you have an RDP server running on `192.168.1.10` and listening on port 3389, you would run:\n\n```\npyrdp-mitm.py 192.168.1.10\n```\n\nWhen running the MITM for the first time on Linux, a private key and certificate should be generated for you in `~/.config/pyrdp`.\nThese are used when TLS security is used on a connection. You can use them to decrypt PyRDP traffic in Wireshark, for\nexample.\n\n#### Specifying the private key and certificate\nIf key generation didn't work or you want to use a custom key and certificate, you can specify them using the\n`-c` and `-k` arguments:\n\n```\npyrdp-mitm.py 192.168.1.10 -k private_key.pem -c certificate.pem\n```\n\n#### Connecting to the PyRDP player\nIf you want to see live RDP connections through the PyRDP player, you will need to specify the ip and port on which the\nplayer is listening using the `-i` and `-d` arguments. Note: the port argument is optional, the default port is 3000.\n\n```\npyrdp-mitm.py 192.168.1.10 -i 127.0.0.1 -d 3000\n```\n\n##### Connecting to a PyRDP player when the MITM is running on a server\nIf you are running the MITM on a server and still want to see live RDP connections, you should use\n[SSH remote port forwarding](https://www.booleanworld.com/guide-ssh-port-forwarding-tunnelling/)\nto forward a port on your server to the player's port on your machine. Once this is done, you pass `127.0.0.1` and the forwarded\nport as arguments to the MITM. For example, if port 4000 on the server is forwarded to the player's port on your machine,\nthis would be the command to use:\n\n```\npyrdp-mitm.py 192.168.1.10 -i 127.0.0.1 -d 4000\n```\n\n#### Running payloads on new connections\nPyRDP has support for running console commands or PowerShell payloads automatically when new connections are made.\nDue to the nature of RDP, the process is a bit hackish and is not always 100% reliable. Here is how it works:\n\n1. Wait for the user to be authenticated.\n2. Block the client's input / output to hide the payload and prevent interference.\n3. Send a fake Windows+R sequence and run `cmd.exe`.\n4. Run the payload as a console command and exit the console. If a PowerShell payload is configured, it is run with `powershell -enc <PAYLOAD>`.\n5. Wait a bit to allow the payload to complete.\n6. Restore the client's input / output.\n\nFor this to work, you need to set 3 arguments:\n\n- the payload\n- the delay before the payload starts\n- the payload's duration\n\n##### Setting the payload\nYou can use one of the following arguments to set the payload to run:\n\n- `--payload`, a string containing console commands\n- `--payload-powershell`, a string containing PowerShell commands\n- `--payload-powershell-file`, a path to a PowerShell script\n\n##### Choosing when to start the payload\nFor the moment, PyRDP does not detect when the user is logged on.\nYou must give it an amount of time to wait for before running the payload.\nAfter this amount of time has passed, it will send the fake key sequences and expect the payload to run properly.\nTo do this, you use the `--payload-delay` argument. The delay is in milliseconds.\nFor example, if you expect the user to be logged in within the first 5 seconds, you would use the following arguments:\n\n```\n--payload-delay 5000\n```\n\nThis could be made more accurate by leveraging some messages exchanged during RDPDR initialization.\nSee [this issue](https://github.com/GoSecure/pyrdp/issues/98) if you're interested in making this work better.\n\n##### Choosing when to resume normal activity\nBecause there is no direct way to know when the console has stopped running, you must tell PyRDP how long you want\nthe client's input / output to be blocked. We recommend you set this to the maximum amount of time you would expect the\nconsole that is running your payload to be visible. In other words, the amount of time you would expect your payload to\ncomplete.\nTo set the payload duration, you use the `--payload-duration` argument with an amount of time in milliseconds.\nFor example, if you expect your payload to take up to 5 seconds to complete, you would use the following argument:\n\n```\n--payload-duration 5000\n```\n\nThis will block the client's input / output for 5 seconds to hide the console and prevent interference.\nAfter 5 seconds, input / output is restored back to normal.\n\n#### Other MITM arguments\nRun `pyrdp-mitm.py --help` for a full list of arguments.\n\n##### `--no-downgrade`\n\nThis argument is useful when running PyRDP in Honeypot scenarios to avoid scanner fingerprinting.\nWhen the switch is enabled, PyRDP will not downgrade unsupported extensions and let the traffic through\ntransparently. The player will likely not be able to successfully replay video traffic, but the following\nsupported channels should still be accessible:\n\n- Keystroke recording\n- Mouse position updates\n- Clipboard access (passively)\n- Drive access (passively)\n\nThis feature is still a work in progress and some downgrading is currently unavoidable to allow the connection\nto be established. The following are currently not affected by this switch and will still be disabled:\n\n- FIPS Encryption\n- Non-TLS encryption protocols\n- ClientInfo compression\n- Virtual Channel compression\n\n**NOTE**: If being able to eventually replay the full session is important, a good solution is to record the raw\nRDP traffic using Wireshark and keep the TLS master secrets. Whenever PyRDP adds support for additional extensions,\nit would then become possible to extract a valid RDP replay file from the raw network capture.\n\n##### `--transparent`\n\nTells PyRDP to attempt to spoof the source IP address of the client so that the server sees the real IP\naddress instead of the MITM one. This option is only useful in certain scenarios where the MITM is physically\na gateway between clients and the server and sees all traffic.\n[Specific examples can be found here.](docs/transparent-proxy.md)\n\n**NOTE**: This requires root privileges, only works on Linux and requires manual firewall configuration to ensure\nthat traffic is routed properly.\n\n##### `--no-gdi`: Disable Accelerated Graphics Pipeline\n\nPyRDP downgrades video to the the most recent graphics pipeline that it supports. This switch explicitly tells the\nMITM to not use the [Graphics Device Interface Acceleration][gdi] extensions to stream video. The advantage of this mode\nis a significant reduction in required bandwidth for high resolution connections.\n\nNote that some GDI drawing orders are currently unimplemented because they appear to be unused. If you have a replay\nwhich contains any unsupported or untested order, do not hesitate to share it with the project maintainers so that\nsupport can be added as required. (Make sure that the trace does not contain sensitive information)\n\n[gdi]: https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-rdpegdi/745f2eee-d110-464c-8aca-06fc1814f6ad\n\n### Using the PyRDP Player\nUse `pyrdp-player.py` to run the player.\n\n#### Playing a replay file\nYou can use the menu to open a new replay file: File > Open.\n\nYou can also open replay files when launching the player:\n\n```\npyrdp-player.py <FILE1> <FILE2> ...\n```\n\n#### Listening for live connections\nThe player always listens for live connections. By default, the listening port is 3000, but it can be changed:\n\n```\npyrdp-player.py -p <PORT>\n```\n\n#### Changing the listening address\nBy default, the player only listens to connections coming from the local machine. We do not recommend opening up the player\nto other machines. If you still want to change the listening address, you can do it with `-b`:\n\n```\npyrdp-player.py -b <ADDRESS>\n```\n\n#### Other player arguments\nRun `pyrdp-player.py --help` for a full list of arguments.\n\n### Using the PyRDP Certificate Cloner\nThe PyRDP certificate cloner creates a brand new X509 certificate by using the values from an existing RDP server's\ncertificate. It connects to an RDP server, downloads its certificate, generates a new private key and replaces the\npublic key and signature of the certificate using the new private key. This can be used in a pentest if, for example,\nyou're trying to trick a legitimate user into going through your MITM. Using a certificate that looks like a legitimate\ncertificate could increase your success rate.\n\n#### Cloning a certificate\nYou can clone a certificate by using `pyrdp-clonecert.py`:\n\n```\npyrdp-clonecert.py 192.168.1.10 cert.pem -o key.pem\n```\n\nThe `-o` parameter defines the path name to use for the generated private key.\n\n#### Using a custom private key\nIf you want to use your own private key instead of generating a new one:\n\n```\npyrdp-clonecert.py 192.168.1.10 cert.pem -i input_key.pem\n```\n\n#### Other cloner arguments\nRun `pyrdp-clonecert.py --help` for a full list of arguments.\n\n### Using PyRDP Convert\n\n`pyrdp-convert` is a helper script that performs several useful conversions. The script has the best chance of working\non traffic captured by PyRDP due to unsupported RDP protocol features that might be used in a non-intercepted\nconnection.\n\nThe following conversions are supported:\n\n- Network Capture (PCAP) to PyRDP replay file\n- Network Capture to MP4 video file\n- Replay file to MP4 video file\n\nThe script supports both encrypted (TLS) network captures (by providing `--secrets ssl.log`) and decrypted PDU exports.\n\n> **WARNING**: pcapng and pcap with nanosecond timestamps are not compatible with `pyrdp-convert` and will create\n> replay files that fail to playback or export to MP4. This is due to incompatible timestamp formats.\n\n```\n# Export the session coming client 10.2.0.198 to a .pyrdp file.\npyrdp-convert.py --src 10.2.0.198 --secrets ssl.log -o path/to/output capture.pcap\n\n# Or as an MP4 video\npyrdp-convert.py --src 10.2.0.198 --secrets ssl.log -o path/to/output -f mp4 capture.pcap\n\n# List the sessions in a network trace, along with the decryptable ones.\npyrdp-convert.py --list capture.pcap\n```\n\nNote that MP4 conversion requires libavcodec and ffmpeg, so this may require extra steps on Windows.\n\nManually decrypted network traces can be exported from Wireshark by selecting `File > Export PDUs` and selecting `OSI\nLayer 7`. When using this method, it is also recommended to filter the exported stream to only contain the TCP stream of\nthe RDP session which must be converted.\n\nFirst, make sure you configured wireshark to load TLS secrets:\n\n![Configure TLS secrets log](docs/screens/wireshark-tls.png)\n\nNext, export OSI Layer 7 PDUs:\n\n![Export OSI Layer 7](docs/screens/wireshark-export.png)\n\nAnd lastly, filter down the trace to contain only the conversation of interest (Optional but recommended) by applying a\ndisplay filter and clicking `File > Export Specified Packets...`\n\n![Filtering the exported trace](docs/screens/wireshark-export-specified.png)\n\n\nNow this trace can be used directly in `pyrdp-convert`.\n\n\n### Configuring PyRDP\n\nMost of the PyRDP configurations are done through command line switches, but it is also possible to use a\nconfiguration file for certain settings such as log configuration.\n\nThe default configuration files used by PyRDP are located in [mitm.default.ini](pyrdp/mitm/mitm.default.ini)\nand [player.default.ini](pyrdp/player/player.default.ini). Both files are thoroughly documented and can serve\nas a basis for further configuration.\n\nIn the future there are plans to support other aspects of PyRDP configuration through those configuration files.\n\n### Using PyRDP as a Library\nIf you're interested in experimenting with RDP and making your own tools, head over to our\n[documentation section](docs/README.md) for more information.\n\n### Using PyRDP with twistd\nThe PyRDP MITM component was also implemented as a twistd plugin. This enables\nyou to run it in debug mode and allows you to get an interactive debugging repl\n(pdb) if you send a `SIGUSR2` to the twistd process.\n\n```\ntwistd --debug pyrdp -t <target>\n```\n\nThen to get the repl:\n\n```\nkillall -SIGUSR2 twistd\n```\n\n### Using PyRDP with twistd in Docker\nIn a directory with our `docker-compose.yml` you can run something like this:\n\n```\ndocker-compose run -p 3389:3389 pyrdp twistd --debug pyrdp --target 192.168.1.10:3389\n```\n\nThis will allocate a TTY and you will have access to `Pdb`'s REPL. Trying to add `--debug` to the `docker-compose.yml` command will fail because there is no TTY allocated.\n\n### Using PyRDP with Bettercap\nWe developped our own Bettercap module, `rdp.proxy`, to man-in-the-middle all RDP connections\non a given LAN. Check out [this document](docs/bettercap-rdp-mitm.md) for more information.\n\n### Docker Specific Usage Instructions\n\nSince docker restricts the interactions with the host system (filesystem and network), the PyRDP docker image must be run with some parameters depending on your use case. This section documents those parameters.\n\nWe refer to the publicly provided docker image but if you [built your own](#building-the-docker-image) replace `gosecure/pyrdp` with the name of your locally built image.\n\n#### Mapping a Listening Port\n\nIn most of the man-in-the-middle cases you will need to map a port of your host into the docker image. This is achieved by the `--publish` (`-p`) parameters applied to `docker run`.\n\nFor example, to listen on 3389 (RDP's default port) on all interfaces, use:\n\n```\ndocker run -p 3389:3389 gosecure/pyrdp pyrdp-mitm.py 192.168.1.10\n```\n\n#### Logs and Artifacts Storage\n\nTo store the PyRDP output permanently (logs, files, etc.), add the `--volume` (`-v`) option to the previous command. In this example we store the files relatively to the current directory in `pyrdp_output`:\n\n```\ndocker run -v $PWD/pyrdp_output:/home/pyrdp/pyrdp_output -p 3389:3389 gosecure/pyrdp pyrdp-mitm.py 192.168.1.10\n```\n\nMake sure that your destination directory is owned by a user with a UID of 1000, otherwise you will get permission denied errors.\nIf you are the only non-root user on the system, usually your user will be assigned UID 1000.\n\n#### Logging the host IP address\n\nIf you want PyRDP to log the host IP address in its logs, you can set the `HOST_IP` environment variable when using `docker run`:\n\n```\ndocker run -p 3389:3389 -e HOST_IP=192.168.1.9 gosecure/pyrdp pyrdp-mitm.py 192.168.1.10\n```\n\n#### Using the GUI Player in Docker\n\nUsing the player will require you to export the `DISPLAY` environment variable from the host to the docker.\nThis redirects the GUI of the player to the host screen.\nYou also need to expose the host's network and prevent Qt from using the MIT-SHM X11 Shared Memory Extension.\nTo do so, add the `-e` and `--net` options to the run command:\n\n```\ndocker run -e DISPLAY=$DISPLAY -e QT_X11_NO_MITSHM=1 --net=host gosecure/pyrdp pyrdp-player.py\n```\n\nKeep in mind that exposing the host's network to docker can compromise the isolation between your container and the host.\nIf you plan on using the player, X11 forwarding using an SSH connection would be a more secure way.\n\n\n## PyRDP Lore\n\n* [Introduction blog post](https://www.gosecure.net/blog/2018/12/19/rdp-man-in-the-middle-smile-youre-on-camera) in which we [demonstrated that we can catch a real threat actor in action](https://www.youtube.com/watch?v=eB7RC9FmL6Q)\n* [Talk at NorthSec 2019](https://docs.google.com/presentation/d/1avcn8Sh2b3IE7AA0G9l7Cj5F1pxqizUm98IbXUo2cvY/edit#slide=id.g404b70030f_0_581) where two demos were performed:\n  * [First demo](https://youtu.be/5JztJzi-m48): credential logging, clipboard stealing, client-side file browsing and a session take-over\n  * [Second demo](https://youtu.be/bU67tj1RkMA): the execution of cmd or powershell payloads when a client successfully authenticates\n* [PyRDP Logo](/docs/pyrdp-logo.png) licensed under CC-BY-SA 4.0.\n* [BlackHat USA Arsenal 2019 Slides](https://docs.google.com/presentation/d/17P_l2n-hgCehQ5eTWilru4IXXHnGIRTj4ftoW4BiX5A/edit?usp=sharing)\n* [DerbyCon 2019 Slides](https://docs.google.com/presentation/d/1UAiN2EZwDcmBjLe_t5HXB0LzbNclU3nnigC-XM4neIU/edit?usp=sharing) ([Video](https://www.youtube.com/watch?v=zgt3N6Nrnss))\n* [Blog: PyRDP on Autopilot](https://www.gosecure.net/blog/2020/02/26/pyrdp-on-autopilot-unattended-credential-harvesting-and-client-side-file-stealing/)\n\n\n## Contributing to PyRDP\nSee our [contribution ",
  "permissions": {
    "read": true,
    "write": false,
    "admin": false
  },
  "media_types": [
    "application/vnd.docker.container.image.v1+json",
    "application/vnd.docker.distribution.manifest.list.v2+json"
  ],
  "content_types": [
    "image"
  ]
}