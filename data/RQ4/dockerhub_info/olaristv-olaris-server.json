{
  "user": "olaristv",
  "name": "olaris-server",
  "namespace": "olaristv",
  "repository_type": "image",
  "status": 1,
  "status_description": "active",
  "description": "Olaris is an open-source, community driven, media manager and transcoding server.",
  "is_private": false,
  "is_automated": true,
  "can_edit": false,
  "star_count": 8,
  "pull_count": 298635,
  "last_updated": "2022-06-04T18:10:55.224078Z",
  "date_registered": "2018-10-29T09:32:11.587031Z",
  "collaborator_count": 0,
  "affiliation": null,
  "hub_user": "olaristv",
  "has_starred": false,
  "full_description": "![Olaris server header](https://i.imgur.com/ewz5TAN.png)\n\n## `This is all pre-release code, continue at your own peril.`\n\n## What is Olaris?\n\nOlaris is an open-source, community driven, media manager and transcoding server. The main interface is the [olaris-react](https://gitlab.com/olaris/olaris-react) project although in due time we hope to support multiple clients / applications.\n\nOur core values are:\n\n### Community driven development\nWe want Olaris to be a community project which means we will heavily prioritise features based on our user feedback.\n\n### Focus on one feature at a time\nWe will work on features until they are perfect (or as close to it as possible). We would rather have a product where three features work really well than a product with 30 unfinished features.\n\nThis does not mean we won't work in parallel, it simply means we will not start anything new until we are happy the new feature works to a high standard.\n\n### Our users are not our product\nWe don't want to collect metadata, we don't want to sell metadata your data is yours and yours alone.\n\n### Singular Focus: Video.\nOur sole focus is on video and video alone, anything that does not meet this requirement will not be considered. This means for example we will never add music support due to different approach that would be required throughout the application. \n\n### Open-source\nEverything we build should be open-source. We feel strongly that more can be achieved with free open-source software. That's why were are aiming to be and to remain open-source instead of open-core where certain features are locked behind a paywall.\n\n## How to run olaris\n\n### Run using Docker\n\nThe following command runs Olaris in a Docker container under your own userâ€˜s UID, ensuring that the Olaris config files end up in your home directory with the correct permissions. It exposes Olaris on port 8080 only on your local machine.\n\nThe command below mounts `~/Videos` to `/var/media` in the container --- please update this path to match the location of your media files. When you create a library in Olaris, please keep in mind that Olaris is running inside the container and will see your media at `/var/media/`.\n\n    mkdir -p ~/.config/olaris ~/.config/rclone\n    docker run \\\n      -p 127.0.0.1:8080:8080/tcp \\\n      --mount type=bind,source=\"$HOME/Videos\",target=/var/media \\\n      --mount type=bind,source=\"$HOME/.config/olaris\",target=/home/olaris/.config/olaris \\\n      --mount type=bind,source=\"$HOME/.config/rclone\",target=\"/home/olaris/.config/rclone\" \\\n      -e OLARIS_UID=$(id -u) -e OLARIS_GID=$(id -g) \\\n      olaristv/olaris-server\n\n",
  "permissions": {
    "read": true,
    "write": false,
    "admin": false
  },
  "media_types": [
    "application/vnd.docker.container.image.v1+json"
  ],
  "content_types": [
    "image"
  ]
}