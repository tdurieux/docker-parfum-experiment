{
  "user": "clivern",
  "name": "rabbit",
  "namespace": "clivern",
  "repository_type": "image",
  "status": 1,
  "status_description": "active",
  "description": "",
  "is_private": false,
  "is_automated": false,
  "can_edit": false,
  "star_count": 0,
  "pull_count": 10924,
  "last_updated": "2021-07-13T12:04:34.91867Z",
  "date_registered": "2019-08-16T21:56:43.339843Z",
  "collaborator_count": 0,
  "affiliation": null,
  "hub_user": "clivern",
  "has_starred": false,
  "full_description": "<p align=\"center\">\n    <img alt=\"Rabbit Logo\" src=\"https://raw.githubusercontent.com/clivern/Rabbit/master/assets/img/gopher.png\" width=\"150\" />\n    <h3 align=\"center\">Rabbit</h3>\n    <p align=\"center\">A lightweight service that will build and store your go projects binaries.</p>\n    <p align=\"center\">\n        <a href=\"https://travis-ci.org/Clivern/Rabbit\"><img src=\"https://travis-ci.org/Clivern/Rabbit.svg?branch=master\"></a>\n        <a href=\"https://github.com/Clivern/Rabbit/releases\"><img src=\"https://img.shields.io/badge/Version-2.0.1-red.svg\"></a>\n        <a href=\"https://hub.docker.com/r/clivern/rabbit\"><img src=\"https://img.shields.io/badge/Docker-Latest-orange\"></a>\n        <a href=\"https://goreportcard.com/report/github.com/Clivern/Rabbit\"><img src=\"https://goreportcard.com/badge/github.com/Clivern/Rabbit\"></a>\n        <a href=\"https://github.com/Clivern/Rabbit/blob/master/LICENSE\"><img src=\"https://img.shields.io/badge/LICENSE-MIT-orange.svg\"></a>\n    </p>\n</p>\n\nRabbit is a lightweight service that will build and store your go projects binaries. Once a VCS system (github, Gitlab, bitbucket or bitbucket server) notifies rabbit of a new release, it clones the project, builds different binaries and publish them.\n\n<p align=\"center\">\n    <img src=\"https://raw.githubusercontent.com/Clivern/Rabbit/master/assets/img/diagram_3.png?v=0.0.2\" />\n</p>\n<br/>\n<p align=\"center\">\n    <h3 align=\"center\">Screenshot</h3>\n    <img src=\"https://raw.githubusercontent.com/Clivern/Rabbit/master/assets/img/screenshot.png?v=0.0.2\" />\n</p>\n<br/>\n\n## Documentation\n\n### Development:\n\nRabbit uses [Go Modules](https://github.com/golang/go/wiki/Modules) to manage dependencies. First Create a prod config file.\n\n```bash\n$ git clone https://github.com/Clivern/Rabbit.git\n$ cp config.dist.yml config.prod.yml\n```\n\nThen add your default configs. You probably wondering how the following configs even work! let's pick one and explain.\n\nThe item `mode: ${RABBIT_APP_MODE:-dev}` means that the mode is dev unless environment variable `RABBIT_APP_MODE` is defined. so you can always override the value by defining the environment variable `export RABBIT_APP_MODE=prod`. and same for others\n\n```yml\n# General App Configs\napp:\n    # Env mode (dev or prod)\n    mode: ${RABBIT_APP_MODE:-dev}\n    # HTTP port\n    port: ${RABBIT_APP_PORT:-8080}\n    # App URL\n    domain: ${RABBIT_APP_DOMAIN:-http://127.0.0.1:8080}\n    # TLS configs\n    tls:\n        status: ${RABBIT_APP_TLS_STATUS:-off}\n        pemPath: ${RABBIT_APP_TLS_PEMPATH:-cert/server.pem}\n        keyPath: ${RABBIT_APP_TLS_KEYPATH:-cert/server.key}\n\n# Redis Configs\nredis:\n    addr: ${RABBIT_REDIS_ADDR:-localhost:6379}\n    password: ${RABBIT_REDIS_PASSWORD:- }\n    db: ${RABBIT_REDIS_DB:-0}\n\n# Message Broker Configs\nbroker:\n    # Broker driver (native or redis)\n    driver: ${RABBIT_BROKER_DRIVER:-native}\n    # Native driver configs\n    native:\n        # Queue max capacity\n        capacity: ${RABBIT_BROKER_NATIVE_CAPACITY:-50}\n        # Number of concurrent workers\n        workers: ${RABBIT_BROKER_NATIVE_WORKERS:-1}\n    # Redis configs\n    redis:\n        channel: ${RABBIT_BROKER_REDIS_CHANNEL:-rabbit}\n\n# Log configs\nlog:\n    # Log level, it can be debug, info, warn, error, panic, fatal\n    level:  ${RABBIT_LOG_LEVEL:-warn}\n    # output can be stdout or abs path to log file /var/logs/rabbit.log\n    output:  ${RABBIT_LOG_OUTPUT:-stdout}\n    # Format can be json\n    format:  ${RABBIT_LOG_FORMAT:-json}\n\n# Release configs\nreleases:\n    # Releases absolute path\n    path: ${RABBIT_RELEASES_PATH:-/app/var/releases}\n    name: ${RABBIT_RELEASES_NAME:-\"[.Tag]\"}\n\n# Build configs\nbuild:\n    # Build absolute path\n    path: ${RABBIT_BUILD_PATH:-/app/var/build}\n    # Number of parallel builds\n    parallelism: ${RABBIT_BUILD_PARALLELISM:-1}\n\n# Application Database\ndatabase:\n    # Database driver (redis)\n    driver: ${RABBIT_DATABASE_DRIVER:-redis}\n    # Redis\n    redis:\n        hash_prefix: ${RABBIT_DATABASE_REDIS_HASH_PREFIX:-rabbit_}\n\n# Third Party API Integration\nintegrations:\n    # Github Configs\n    github:\n        # Webhook URI (Full URL will be app.domain + webhook_uri)\n        webhook_uri: ${RABBIT_INTEGRATION_GITHUB_WEBHOOK_URI:-/webhook/github}\n        # Webhook Secret (From Repo settings page > Webhooks)\n        webhook_secret: ${RABBIT_INTEGRATION_GITHUB_WEBHOOK_SECRET:- }\n        # whether to use ssh or https to clone\n        clone_with: ${RABBIT_INTEGRATION_GITHUB_CLONE_WITH:-https}\n        # HTTPS URL format, Full name will be something like Clivern/Rabbit\n        https_format: ${RABBIT_INTEGRATION_GITHUB_HTTPS_FORMAT:-https://github.com/[.RepoFullName].git}\n        # SSH URL format, Full name will be something like Clivern/Rabbit\n        ssh_format: ${RABBIT_INTEGRATION_GITHUB_SSH_FORMAT:-git@github.com:[.RepoFullName].git}\n    # Bitbucket Configs\n    bitbucket:\n        # Webhook URI (Full URL will be app.domain + webhook_uri)\n        webhook_uri: ${RABBIT_INTEGRATION_BITBUCKET_WEBHOOK_URI:-/webhook/bitbucket}\n        # whether to use ssh or https to clone\n        clone_with: ${RABBIT_INTEGRATION_BITBUCKET_CLONE_WITH:-https}\n        # HTTPS URL format, Full name will be something like Clivern/Rabbit\n        https_format: ${RABBIT_INTEGRATION_BITBUCKET_HTTPS_FORMAT:-https://bitbucket.org/[.RepoFullName].git}\n        # SSH URL format, Full name will be something like Clivern/Rabbit\n        ssh_format: ${RABBIT_INTEGRATION_BITBUCKET_SSH_FORMAT:-git@bitbucket.org:[.RepoFullName].git}\n    bitbucket_server:\n        # Webhook URI (Full URL will be app.domain + webhook_uri)\n        webhook_uri: ${RABBIT_INTEGRATION_BITBUCKET_SERVER_WEBHOOK_URI:-/webhook/bitbucket-server}\n        # Webhook Secret (From Repo settings page > Webhooks)\n        webhook_secret: ${RABBIT_INTEGRATION_BITBUCKET_SERVER_WEBHOOK_SECRET:- }\n        # whether to use ssh or https to clone\n        clone_with: ${RABBIT_INTEGRATION_BITBUCKET_SERVER_CLONE_WITH:-https}\n        # HTTPS URL format, Full name will be something like Clivern/Rabbit\n        https_format: ${RABBIT_INTEGRATION_BITBUCKET_SERVER_HTTPS_FORMAT:-https://git.bitbucket.com/scm/[.RepoFullName].git}\n        # SSH URL format, Full name will be something like Clivern/Rabbit\n        ssh_format: ${RABBIT_INTEGRATION_BITBUCKET_SERVER_SSH_FORMAT:-ssh://git@git.bitbucket.com/[.RepoFullName].git}\n    gitlab:\n        # Webhook URI (Full URL will be app.domain + webhook_uri)\n        webhook_uri: ${RABBIT_INTEGRATION_GITLAB_WEBHOOK_URI:-/webhook/gitlab}\n        # Webhook Secret (From Repo settings page > Webhooks)\n        webhook_secret: ${RABBIT_INTEGRATION_GITLAB_WEBHOOK_SECRET:- }\n        # whether to use ssh or https to clone\n        clone_with: ${RABBIT_INTEGRATION_GITLAB_CLONE_WITH:-https}\n        # HTTPS URL format, Full name will be something like Clivern/Rabbit\n        https_format: ${RABBIT_INTEGRATION_GITLAB_HTTPS_FORMAT:-https://gitlab.com/[.RepoFullName].git}\n        # SSH URL format, Full name will be something like Clivern/Rabbit\n        ssh_format: ${RABBIT_INTEGRATION_GITLAB_SSH_FORMAT:-git@gitlab.com:[.RepoFullName].git}\n```\n\nAnd then run the application.\n\n```bash\n$ go build rabbit.go\n$ ./rabbit\n\n// OR\n\n$ go run rabbit.go\n\n// To Provide a custom config file\n$ ./rabbit -config=/custom/path/config.prod.yml\n$ go run rabbit.go -config=/custom/path/config.prod.yml\n```\n\n## Deployment\n\nRabbit needs a decent resources to be able to work properly because the build process itself done by goreleaser and it consumes a lot. So keep `build.parallelism` equal `1` and increase if you have more resources and would like to speed the build process.\n\n### On a Linux Server\n\nMake sure you have `git`, `golang 1.12` and `goreleaser` installed, and make goreleaser executable from everywhere.\n\n```bash\n# To download the latest goreleaser binary for linux (https://github.com/goreleaser/goreleaser/releases)\n$ curl -sL https://github.com/goreleaser/goreleaser/releases/download/v0.116.0/goreleaser_Linux_x86_64.tar.gz | tar xz\n```\n\nAlso make sure you are able to clone all your repositories in a non-interactive way. Just configure ssh-key and add the remote VCS to your known hosts.\n\nThen download [the latest Rabbit binary.](https://github.com/Clivern/Rabbit/releases)\n\n```bash\n$ curl -sL https://github.com/Clivern/Rabbit/releases/download/x.x.x/rabbit_x.x.x_OS.tar.gz | tar xz\n```\n\nCreate your config file as explained before on development part and run rabbit with systemd or anything else you prefer.\n\n```\n$ ./rabbit -config=/custom/path/config.prod.yml\n```\n\n### On Docker\n\nRunning rabbit with `docker-compose` is pretty straightforward.\n\n```bash\n$ git clone https://github.com/Clivern/Rabbit.git\n$ cd Rabbit/deployments/docker\n$ docker-compose build\n$ docker-compose up -d\n```\n\nDocker will mount you host server `~/.ssh` directory in order to be able to clone repositories that need ssh key. Please make sure it has the right permissions and also remote VCS added to known hosts. otherwise rabbit will stuck on git interactive clone.\n\n## Versioning\n\nFor transparency into our release cycle and in striving to maintain backward compatibility, Rabbit is maintained under the [Semantic Versioning guidelines](https://semver.org/) and release process is predictable and business-friendly.\n\nSee the [Releases section of our GitHub project](https://github.com/clivern/rabbit/releases) for changelogs for each release version of Rabbit. It contains summaries of the most noteworthy changes made in each release.\n\n\n## Bug tracker\n\nIf you have any suggestions, bug reports, or annoyances please report them to our issue tracker at https://github.com/clivern/rabbit/issues\n\n\n## Security Issues\n\nIf you discover a security vulnerability within Rabbit, please send an email to [hello@clivern.com](mailto:hello@clivern.com)\n\n\n## Contributing\n\nWe are an open source, community-driven project so please feel free to join us. see the [contributing guidelines](CONTRIBUTING.md) for more details.\n\n\n## License\n\n© 2019, Clivern. Released under [MIT License](https://opensource.org/licenses/mit-license.php).\n\n**Rabbit** is authored and maintained by [@Clivern](http://github.com/clivern).\n",
  "permissions": {
    "read": true,
    "write": false,
    "admin": false
  },
  "media_types": [
    "application/vnd.docker.container.image.v1+json"
  ],
  "content_types": [
    "image"
  ]
}