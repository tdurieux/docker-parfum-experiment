{
  "user": "textury",
  "name": "arlocal",
  "namespace": "textury",
  "repository_type": "image",
  "status": 1,
  "status_description": "active",
  "description": "Local testnet for your Arweave products.",
  "is_private": false,
  "is_automated": false,
  "can_edit": false,
  "star_count": 1,
  "pull_count": 1493,
  "last_updated": "2022-10-31T15:10:25.924156Z",
  "date_registered": "2022-01-20T15:41:29.77719Z",
  "collaborator_count": 0,
  "affiliation": null,
  "hub_user": "textury",
  "has_starred": false,
  "full_description": "# arlocal\nRun a local Arweave gateway-like server.\n\n## Usage\n#### CLI Tool\nMake sure you already have NodeJS + NPM installed.\nTo run `arlocal` it's as simple as doing an `npx` which means running the latest version available on `npmjs.com`.\n```\nnpx arlocal\n```\nThat's it! You are running a local slim gateway on `http://localhost:1984`\n\nHow about if I want to run it on another port?!\nIt's as simple as doing:\n```\nnpx arlocal 8080\n```\nThis will start arlocal on port `8080`.\n\nOther options:\n```\n--hidelogs = This will hide the logs from ArLocal.\n```\n\n#### NodeJS library\nYou can also use `arlocal` as a library on your own code. This is useful if you want to make sure everyone who tests your app has this instance installed.\n\n```\nyarn add arlocal -D\n```\n\nThen you can import it just like any other node module:\n```ts\nimport ArLocal from 'arlocal';\n\n(async () => {\n  const arLocal = new ArLocal();\n\n  // Start is a Promise, we need to start it inside an async function.\n  await arLocal.start();\n\n  // Your tests here...\n\n  // After we are done with our tests, let's close the connection.\n  await arLocal.stop();\n})();\n```\n\nThe `ArLocal` class has a few options, all of them are optional.\n```\nArLocal(port = 1984, showLogs = true, dbPath = '.db', persist = false)\n\nport = What port to use for ArLocal.\nshowLogs = Should we show logs.\ndbPath = folder where the db will be temporary stored.\npersist = Whether or not data stored should be persisted among server restarts.\n```\n\n#### Sending transactions\nBefore sending a transaction to ArLocal, make sure you mint new AR tokens for the wallet you'll be using. This is done using the endpoint `/mint/<address>/<balance>`.\n\nSending a new transaction is done just like with the default gateway, use ArweaveJS to create your transaction, sign and post it.\n\nAfter this transaction is sent, to confirm (`mine`) your transactions, you need to hit the `/mine` endpoint. You can do this programmatically or by simply going to `http://localhost:1984/mine`.\n\nYou can also mine more than one block at a time by hitting `/mine/{blocks}`, this will increase the current blocks to the set `blocks`.\n\n## Features\n- Extremely fast compared to other options out there.\n- Community built, open source and free.\n- No need of external resources, only NodeJS + NPM.\n- Test transactions, SmartWeave Contracts, GraphQL requests, NFT deployment and more.\n- Works on Windows, Mac, Linux, Raspberry Pi, and pretty much everywhere as long as NodeJS is installed.\n\n### Contributing\nPRs are greatly appreciated, help us build this hugely needed tool so anyone else can easily test their own transactions and SmartWeave contracts.\n\nBefore doing a PR, remember that if this is a route or an extisting feature of the gateway, you need to respect the same path/default of the existing mainnet gateway. Example: `/tx` should be kept as `/tx`, this is so the user doesn't have to do many changes for their unit tests, compared to normal transaction on mainnet.\n\n1.  Create a fork\n2.  Create your feature branch: `git checkout -b my-feature`\n3.  Commit your changes: `git commit -am 'Add some feature'`\n4.  Push to the branch: `git push origin my-new-feature`\n5.  Submit a pull request ðŸš€\n",
  "permissions": {
    "read": true,
    "write": false,
    "admin": false
  },
  "media_types": [
    "application/vnd.docker.container.image.v1+json"
  ],
  "content_types": [
    "image"
  ]
}