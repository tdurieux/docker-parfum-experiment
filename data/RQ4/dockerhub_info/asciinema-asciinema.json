{
  "user": "asciinema",
  "name": "asciinema",
  "namespace": "asciinema",
  "repository_type": "image",
  "status": 1,
  "status_description": "active",
  "description": "Terminal session recorder - https://github.com/asciinema/asciinema",
  "is_private": false,
  "is_automated": true,
  "can_edit": false,
  "star_count": 14,
  "pull_count": 101627,
  "last_updated": "2022-05-02T19:58:31.065336Z",
  "date_registered": "2017-04-12T10:37:42.33455Z",
  "collaborator_count": 0,
  "affiliation": null,
  "hub_user": "asciinema",
  "has_starred": false,
  "full_description": "_Note: This is README for `development` branch. [See the version for latest stable release](https://github.com/asciinema/asciinema/blob/master/README.md)._\n\n# asciinema\n\n[![Build Status](https://travis-ci.org/asciinema/asciinema.svg?branch=develop)](https://travis-ci.org/asciinema/asciinema)\n[![PyPI](https://img.shields.io/pypi/v/asciinema.svg)](https://pypi.org/project/asciinema/)\n[![license](http://img.shields.io/badge/license-GNU-blue.svg)](https://raw.githubusercontent.com/asciinema/asciinema/master/LICENSE)\n\nTerminal session recorder and the best companion of\n[asciinema.org](https://asciinema.org).\n\n[![demo](https://asciinema.org/a/113463.svg)](https://asciinema.org/a/113463?autoplay=1)\n\n## Quick intro\n\nasciinema lets you easily record terminal sessions and replay\nthem in a terminal as well as in a web browser.\n\nInstall latest version ([other installation options](#installation)):\n\n    sudo pip3 install asciinema\n\nRecord your first session:\n\n    asciinema rec first.cast\n\nNow replay it with double speed:\n\n    asciinema play -s 2 first.cast\n\nOr with normal speed but with idle time limited to 2 seconds:\n\n    asciinema play -i 2 first.cast\n\nYou can pass `-i 2` to `asciinema rec` as well, to set it permanently on a\nrecording. Idle time limiting makes the recordings much more interesting to\nwatch. Try it.\n\nIf you want to watch and share it on the web, upload it:\n\n    asciinema upload first.cast\n\nThe above uploads it to [asciinema.org](https://asciinema.org), which is a\ndefault [asciinema-server](https://github.com/asciinema/asciinema-server)\ninstance, and prints a secret link you can use to watch your recording in a web\nbrowser.\n\nYou can record and upload in one step by omitting the filename:\n\n    asciinema rec\n\nYou'll be asked to confirm the upload when the recording is done. Nothing is\nsent anywhere without your consent.\n\nThese are the basics, but there's much more you can do. The following sections\ncover installation, usage and hosting of the recordings in more detail.\n\n## Installation\n\n### Python package\n\nasciinema is available on [PyPI](https://pypi.python.org/pypi/asciinema) and can\nbe installed with pip (Python 3 with setuptools required):\n\n    sudo pip3 install asciinema\n\nThis is the recommended way of installation, which gives you the latest released\nversion.\n\n### Native packages\n\nasciinema is included in repositories of most popular package managers on Mac OS\nX, Linux and FreeBSD. Look for package named `asciinema`. See the\n[list of available packages](https://asciinema.org/docs/installation).\n\n### Running latest version from source code checkout\n\nIf you can't use Python package or native package for your OS is outdated you\ncan clone the repo and run asciinema straight from the checkout.\n\nClone the repo:\n\n    git clone https://github.com/asciinema/asciinema.git\n    cd asciinema\n\nIf you want latest stable version:\n\n    git checkout master\n\nIf you want current development version:\n\n    git checkout develop\n\nThen run it with:\n\n    python3 -m asciinema --version\n\n### Docker image\n\nasciinema Docker image is based on Ubuntu 18.04 and has the latest version of\nasciinema recorder pre-installed.\n\n    docker pull asciinema/asciinema\n\nWhen running it don't forget to allocate a pseudo-TTY (`-t`), keep STDIN open\n(`-i`) and mount config directory volume (`-v`):\n\n    docker run --rm -ti -v \"$HOME/.config/asciinema\":/root/.config/asciinema asciinema/asciinema rec\n\nContainer's entrypoint is set to `/usr/local/bin/asciinema` so you can run the\ncontainer with any arguments you would normally pass to `asciinema` binary (see\nUsage section for commands and options).\n\nThere's not much software installed in this image though. In most cases you may\nwant to install extra programs before recording. One option is to derive new\nimage from this one (start your custom Dockerfile with `FROM\nasciinema/asciinema`). Another option is to start the container with `/bin/bash`\nas the entrypoint, install extra packages and manually start `asciinema rec`:\n\n    docker run --rm -ti -v \"$HOME/.config/asciinema\":/root/.config/asciinema --entrypoint=/bin/bash asciinema/asciinema\n    root@6689517d99a1:~# apt-get install foobar\n    root@6689517d99a1:~# asciinema rec\n\n## Usage\n\nasciinema is composed of multiple commands, similar to `git`, `apt-get` or\n`brew`.\n\nWhen you run `asciinema` with no arguments help message is displayed, listing\nall available commands with their options.\n\n### `rec [filename]`\n\n__Record terminal session.__\n\nBy running `asciinema rec [filename]` you start a new recording session. The\ncommand (process) that is recorded can be specified with `-c` option (see\nbelow), and defaults to `$SHELL` which is what you want in most cases.\n\nYou can temporarily pause recording of terminal by pressing <kbd>Ctrl+P</kbd>.\nThis is useful when you want to execute some commands during the recording\nsession that should not be captured (e.g. pasting secrets). Resume by pressing\n<kbd>Ctrl+P</kbd> again.\n\nRecording finishes when you exit the shell (hit <kbd>Ctrl+D</kbd> or type\n`exit`). If the recorded process is not a shell then recording finishes when\nthe process exits.\n\nIf the `filename` argument is omitted then (after asking for confirmation) the\nresulting asciicast is uploaded to\n[asciinema-server](https://github.com/asciinema/asciinema-server) (by default to\nasciinema.org), where it can be watched and shared.\n\nIf the `filename` argument is given then the resulting recording (called\n[asciicast](doc/asciicast-v2.md)) is saved to a local file. It can later be\nreplayed with `asciinema play <filename>` and/or uploaded to asciinema server\nwith `asciinema upload <filename>`.\n\n`ASCIINEMA_REC=1` is added to recorded process environment variables. This\ncan be used by your shell's config file (`.bashrc`, `.zshrc`) to alter the\nprompt or play a sound when the shell is being recorded.\n\nAvailable options:\n\n* `--stdin` - Enable stdin (keyboard) recording (see below)\n* `--append` - Append to existing recording\n* `--raw` - Save raw STDOUT output, without timing information or other metadata\n* `--overwrite` - Overwrite the recording if it already exists\n* `-c, --command=<command>` - Specify command to record, defaults to $SHELL\n* `-e, --env=<var-names>` - List of environment variables to capture, defaults\n  to `SHELL,TERM`\n* `-t, --title=<title>` - Specify the title of the asciicast\n* `-i, --idle-time-limit=<sec>` - Limit recorded terminal inactivity to max `<sec>` seconds\n* `-y, --yes` - Answer \"yes\" to all prompts (e.g. upload confirmation)\n* `-q, --quiet` - Be quiet, suppress all notices/warnings (implies -y)\n\nStdin recording allows for capturing of all characters typed in by the user in\nthe currently recorded shell. This may be used by a player (e.g.\n[asciinema-player](https://github.com/asciinema/asciinema-player)) to display\npressed keys. Because it's basically a key-logging (scoped to a single shell\ninstance), it's disabled by default, and has to be explicitly enabled via\n`--stdin` option.\n\n### `play <filename>`\n\n__Replay recorded asciicast in a terminal.__\n\nThis command replays given asciicast (as recorded by `rec` command) directly in\nyour terminal.\n\nFollowing keyboard shortcuts are available:\n\n- <kbd>Space</kbd> - toggle pause,\n- <kbd>.</kbd> - step through a recording a frame at a time (when paused),\n- <kbd>Ctrl+C</kbd> - exit.\n\nPlaying from a local file:\n\n    asciinema play /path/to/asciicast.cast\n\nPlaying from HTTP(S) URL:\n\n    asciinema play https://asciinema.org/a/22124.cast\n    asciinema play http://example.com/demo.cast\n\nPlaying from asciicast page URL (requires `<link rel=\"alternate\"\ntype=\"application/x-asciicast\" href=\"/my/ascii.cast\">` in page's HTML):\n\n    asciinema play https://asciinema.org/a/22124\n    asciinema play http://example.com/blog/post.html\n\nPlaying from stdin:\n\n    cat /path/to/asciicast.cast | asciinema play -\n    ssh user@host cat asciicast.cast | asciinema play -\n\nPlaying from IPFS:\n\n    asciinema play dweb:/ipfs/QmNe7FsYaHc9SaDEAEXbaagAzNw9cH7YbzN4xV7jV1MCzK/ascii.cast\n\nAvailable options:\n\n* `-i, --idle-time-limit=<sec>` - Limit replayed terminal inactivity to max `<sec>` seconds\n* `-s, --speed=<factor>` - Playback speed (can be fractional)\n\n> For the best playback experience it is recommended to run `asciinema play` in\n> a terminal of dimensions not smaller than the one used for recording, as\n> there's no \"transcoding\" of control sequences for new terminal size.\n\n### `cat <filename>`\n\n__Print full output of recorded asciicast to a terminal.__\n\nWhile `asciinema play <filename>` replays the recorded session using timing\ninformation saved in the asciicast, `asciinema cat <filename>` dumps the full\noutput (including all escape sequences) to a terminal immediately.\n\n`asciinema cat existing.cast >output.txt` gives the same result as recording via\n`asciinema rec --raw output.txt`.\n\n### `upload <filename>`\n\n__Upload recorded asciicast to asciinema.org site.__\n\nThis command uploads given asciicast (recorded by `rec` command) to\nasciinema.org, where it can be watched and shared.\n\n`asciinema rec demo.cast` + `asciinema play demo.cast` + `asciinema upload\ndemo.cast` is a nice combo if you want to review an asciicast before\npublishing it on asciinema.org.\n\n### `auth`\n\n__Link your install ID with your asciinema.org user account.__\n\nIf you want to manage your recordings (change title/theme, delete) at\nasciinema.org you need to link your \"install ID\" with asciinema.org user\naccount.\n\nThis command displays the URL to open in a web browser to do that. You may be\nasked to log in first.\n\nInstall ID is a random ID ([UUID\nv4](https://en.wikipedia.org/wiki/Universally_unique_identifier)) generated\nlocally when you run asciinema for the first time, and saved at\n`$HOME/.config/asciinema/install-id`. Its purpose is to connect local machine\nwith uploaded recordings, so they can later be associated with asciinema.org\naccount. This way we decouple uploading from account creation, allowing them to\nhappen in any order.\n\n> A new install ID is generated on each machine and system user account you use\n> asciinema on, so in order to keep all recordings under a single asciinema.org\n> account you need to run `asciinema auth` on all of those machines.\n\n> asciinema versions prior to 2.0 confusingly referred to install ID as \"API\n> token\".\n\n## Hosting the recordings on the web\n\nAs mentioned in the `Usage > rec` section above, if the `filename` argument to\n`asciinema rec` is omitted then the recorded asciicast is uploaded to\n[asciinema.org](https://asciinema.org). You can watch it there and share it via\nsecret URL.\n\nIf you prefer to host the recordings yourself, you can do so by either:\n\n- recording to a file (`asciinema rec demo.cast`), and using [asciinema's\n  standalone web\n  player](https://github.com/asciinema/asciinema-player#self-hosting-quick-start)\n  in your HTML page, or\n- setting up your own\n  [asciinema-server](https://github.com/asciinema/asciinema-server) instance,\n  and [setting API URL\n  accordingly](https://github.com/asciinema/asciinema-server/blob/master/docs/INSTALL.md#using-asciinema-recorder-with-your-instance).\n\n## Configuration file\n\nYou can configure asciinema by creating config file at\n`$HOME/.config/asciinema/config`.\n\nConfiguration is split into sections (`[api]`, `[record]`, `[play]`). Here's a\nlist of all available options for each section:\n\n```ini\n[api]\n\n; API server URL, default: https://asciinema.org\n; If you run your own instance of asciinema-server then set its address here\n; It can also be overriden by setting ASCIINEMA_API_URL environment variable\nurl = https://asciinema.example.com\n\n[record]\n\n; Command to record, default: $SHELL\ncommand = /bin/bash -l\n\n; Enable stdin (keyboard) recording, default: no\nstdin = yes\n\n; List of environment variables to capture, default: SHELL,TERM\nenv = SHELL,TERM,USER\n\n; Limit recorded terminal inactivity to max n seconds, default: off\nidle_time_limit = 2\n\n; Answer \"yes\" to all interactive prompts, default: no\nyes = true\n\n; Be quiet, suppress all notices/warnings, default: no\nquiet = true\n\n[play]\n\n; Playback speed (can be fractional), default: 1\nspeed = 2\n\n; Limit replayed terminal inactivity to max n seconds, default: off\nidle_time_limit = 1\n\n[notifications]\n\n; Should desktop notifications be enabled, default: yes\nenabled = no\n\n; Custom notification command\n; Environment variable $TEXT contains notification text\ncommand = tmux display-message \"$TEXT\"\n```\n\nA very minimal config file could look like that:\n\n```ini\n[record]\nidle_time_limit = 2\n```\n\nConfig directory location can be changed by setting `$ASCIINEMA_CONFIG_HOME`\nenvironment variable.\n\nIf `$XDG_CONFIG_HOME` is set on Linux then asciinema uses\n`$XDG_CONFIG_HOME/asciinema` instead of `$HOME/.config/asciinema`.\n\n> asciinema versions prior to 1.1 used `$HOME/.asciinema`. If you have it\n> there you should `mv $HOME/.asciinema $HOME/.config/asciinema`.\n\n## Contributing\n\nIf you want to contribute to this project check out\n[Contributing](https://asciinema.org/contributing) page.\n\n## Authors\n\nDeveloped with passion by [Marcin Kulik](http://ku1ik.com) and great open\nsource [contributors](https://github.com/asciinema/asciinema/contributors).\n\n## License\n\nCopyright &copy; 2011–2019 Marcin Kulik.\n\nAll code is licensed under the GPL, v3 or later. See LICENSE file for details.\n",
  "permissions": {
    "read": true,
    "write": false,
    "admin": false
  },
  "media_types": [
    "application/vnd.docker.container.image.v1+json"
  ],
  "content_types": [
    "image"
  ]
}