{
  "user": "logicaldoc",
  "name": "logicaldoc-ce",
  "namespace": "logicaldoc",
  "repository_type": "image",
  "status": 1,
  "status_description": "active",
  "description": "LogicalDOC DMS - Community Edition - (MySQL, MariaDB, PostreSQL, MS SQL, Oracle)",
  "is_private": false,
  "is_automated": true,
  "can_edit": false,
  "star_count": 26,
  "pull_count": 1086292,
  "last_updated": "2022-02-11T08:46:04.986171Z",
  "date_registered": "2018-02-21T13:24:26.685447Z",
  "collaborator_count": 0,
  "affiliation": null,
  "hub_user": "logicaldoc",
  "has_starred": false,
  "full_description": "[![Docker pulls](https://img.shields.io/docker/pulls/logicaldoc/logicaldoc-ce.svg?maxAge=3600)](https://hub.docker.com/r/logicaldoc/logicaldoc-ce/) [![Docker Stars](https://img.shields.io/docker/stars/logicaldoc/logicaldoc-ce.svg?maxAge=3600)](https://hub.docker.com/r/logicaldoc/logicaldoc-ce/) [![Docker layers](https://images.microbadger.com/badges/image/logicaldoc/logicaldoc-ce.svg)](https://microbadger.com/images/logicaldoc/logicaldoc-ce.svg) [![Docker version](https://images.microbadger.com/badges/version/logicaldoc/logicaldoc-ce.svg)](https://microbadger.com/images/logicaldoc/logicaldoc-ce) ![License](https://img.shields.io/badge/License-LGPL%20v3-green.svg?maxAge=3600)\n\n# LogicalDOC Community Edition (AKA LogicalDOC CE)\nA repository for LogicalDOC DMS - Community Edition - Docker image https://www.logicaldoc.com/download-logicaldoc-community\nNote: This image requires to be connected to an external database\n\n## What is LogicalDOC CE?\nLogicalDOC Community Edition (AKA LogicalDOC CE) is an open-source document management software platform.\nBy leveraging on the best-of-breed Java frameworks, it creates a flexible and powerful document management platform, which thanks to the most advanced presentation technology (Google GWT), is able to meet the needs of usability and more demanding management.\nLogicalDOC is both document management and collaboration system. The software is loaded with many functions and allows organizing, index, retrieving, controlling and distributing important business documents securely and safely for any organization and individual.\n\nCheck out https://www.logicaldoc.com to learn more.\n\nThe design of LogicalDOC is based on best-of-breed Java technologies in order to provide a reliable DMS platform. The main interface is Web-based, no need to install anything else; users can access the system through their browser. \nLogicalDOC CE is 100% free software, supports all major DBMS and this particular distribution installation can be used with MySQL, MariaDB and PostreSQL \n  \n\n![LogicalDOC CE](https://www.logicaldoc.com/images/assets/LogicalDocWhiteH02-167.png)\n\n* **SourceForge project**: https://sourceforge.net/projects/logicaldoc/\n* **Manuals**: https://docs.logicaldoc.com   \n* **Forums**: https://forums.logicaldoc.com\n\n### How to use this image\n\n**Start a LogicalDOC instance linked to a MySQL container**\n1. Run the MySQL container\n```Shell\ndocker run -d --name=mysql-ld -e MYSQL_ROOT_PASSWORD=mypassword -e MYSQL_DATABASE=logicaldoc -e MYSQL_USER=ldoc -e MYSQL_PASSWORD=changeme mysql:8.0 --default-authentication-plugin=mysql_native_password\n```\n\n2. Run the LogicalDOC container\n```Shell\ndocker run -d -p 8080:8080 --link mysql-ld logicaldoc/logicaldoc-ce\n```\n\nThis image includes EXPOSE 8080 (the logicaldoc port). The default LogicalDOC configuration is applied.\n\nThen, access it via `http://localhost:8080` or `http://host-ip:8080` in a browser. Default User and Password are **admin** / **admin**.\n\nNotes:\nIn the most recent versions of MySQL it is necessary to enable native authentication, otherwise LogicalDOC will not be able to connect. \nTo do this, simply add the default-authentication-plugin command line argument to the container launch string\ne.g.:\n```Shell\ndocker run -d --name=mysql-ld -e MYSQL_ROOT_PASSWORD=mypassword -e MYSQL_DATABASE=logicaldoc -e MYSQL_USER=ldoc -e MYSQL_PASSWORD=changeme mysql:8.0.23 --default-authentication-plugin=mysql_native_password\n```\nor with the latest MySQL 8 image\n```Shell\ndocker run -d --name=mysql-ld -e MYSQL_ROOT_PASSWORD=mypassword -e MYSQL_DATABASE=logicaldoc -e MYSQL_USER=ldoc -e MYSQL_PASSWORD=changeme mysql:latest --default-authentication-plugin=mysql_native_password\n```\n\n\n## Start a LogicalDOC with some settings\n```Shell\ndocker run -d -p 8080:8080 -e LDOC_MEMORY=4000 --link mysql-ld logicaldoc/logicaldoc-ce\n```\nThis will run the same image as above but with 4000 MB memory allocated to LogicalDOC.\n\nThen, access it via `http://localhost:8080` or `http://host-ip:8080` in a browser.\n\nIf you'd like to use an external database instead of a linked `mysql-ld` container, specify the hostname with `DB_HOST` and port with `DB_PORT` along with the password in `DB_PASSWORD` and the username in `DB_USER` (if it is something other than `ldoc`):\n\n```console\n$ docker run -d -p 8080:8080 -e DB_HOST=10.1.2.3 -e DB_PORT=3306 -e DB_USER=... -e DB_PASSWORD=... logicaldoc/logicaldoc-ce\n```\n\n## Persistence of configuration and documents\nStart as a daemon with attached volumes to persist the configuration and the documents\n```console\n$ docker run -d --name logicaldoc-ce --restart=always -p 8080:8080 -v logicaldoc-conf:/opt/logicaldoc/conf -v logicaldoc-repo:/opt/logicaldoc/repository --link mysql-ld logicaldoc/logicaldoc-ce\n```\n\nAll document files will be stored in the volume ``logicaldoc-repo``, the configuration files insead are in volume ``logicaldoc-conf`\n\nIn this case the physical location of the ``logicaldoc-conf`` volume is ``/var/lib/docker/volumes/logicaldoc-conf/_data`` while the location of ``logicaldoc-repo`` volume is ``/var/lib/docker/volumes/logicaldoc-repo/_data``\n\n\n## Environment Variables\nThe LogicalDOC image uses environment variables that allow to obtain a more specific setup.\n\n* **LDOC_MEMORY**: memory allocated for LogicalDOC expressed in MB (default is 2000)\n* **DB_ENGINE**: the database type, possible vaues are: mysql(default), mssql, oracle, postgres\n* **DB_HOST**: the database server host (default is 'mysql-ld')\n* **DB_PORT**: the database communication port (default is 3306)\n* **DB_NAME**: the database name (default is 'logicaldoc')\n* **DB_INSTANCE**: some databases require the instance specification\n* **DB_USER**: the username (default is 'ldoc')\n* **DB_PASSWORD**: the password (default is 'changeme')\n* **DB_MANUALURL**: must be true when using DB_URL (default is 'false')\n* **DB_URL**: the jdbc url to connect to the database (remember to set DB_MANUALURL to 'true')\n\n## Using Oracle or MS SQL as Database engine\nAt the following address you can find some examples of this container configured to use Oracle Database or MS SQL (Microsoft SQL server).\nAlso, in some of these examples the DB_URL and DB_MANUALURL properties are explicitly used for database configuration\n\nhttps://wiki.logicaldoc.com/wiki/Docker\n\n## Stopping and starting the container\nAssuming that you have assigned the \"logicaldoc-ce\" alias to the container\n\nTo stop the container use:\n\n```console\n$ docker stop logicaldoc-ce\n```\n\nTo start the container again:\n\n```console\n$ docker start logicaldoc-ce\n```\n\n## Configuration\n(You must have enabled data persistence with volume assignment)\n\nTo edit the settings file, check the physical location of the ``logicaldoc-conf`` volume using:\n\n```console\n$ docker volume inspect logicaldoc-conf\n```\n\nWhich should produce an output similar to this one:\n\n```console\n    [\n        {\n            \"Name\": \"logicaldoc-conf\",\n            \"Driver\": \"local\",\n            \"Mountpoint\": \"/var/lib/docker/volumes/logicaldoc-conf/_data\",\n            \"Labels\": null,\n            \"Scope\": \"local\"\n        }\n    ]\n```\nIn this case the physical location of the ``logicaldoc-conf`` volume is ``/var/lib/docker/volumes/logicaldoc-conf/_data``.\n\n## Performing backups\n\nTo backup the existing data, check the physical location of the ``logicaldoc-conf`` and ``logicaldoc-repo`` volumes using:\n\n```console\n$ docker volume inspect logicaldoc-conf\n```\n\nWhich should produce an output similar to this one:\n\n```console\n    [\n        {\n            \"Name\": \"logicaldoc-conf\",\n            \"Driver\": \"local\",\n            \"Mountpoint\": \"/var/lib/docker/volumes/logicaldoc-conf/_data\",\n            \"Labels\": null,\n            \"Scope\": \"local\"\n        }\n    ]\n```\n\n```console\n$ sudo tar -zcvf backup.tar.gz /var/lib/docker/volumes/logicaldoc-conf/_data /var/lib/docker/volumes/logicaldoc-repo/_data\n$ sudo chown `whoami` backup.tar.gz\n```\n\nIf an external PostgreSQL or MySQL database or database containers, these too need to be backed up using their respective procedures.\n\n\n## Restoring from a backup\n\nUncompress the backup archive in the original docker volume using:\n\n```console\n$ sudo tar -xvzf backup.tar.gz -C /\n```\n\n## Building the image\n\nClone the repository with:\n\n```console\n$ git clone https://github.com/logicaldoc/logicaldoc-ce.git\n```\n\nChange to the directory of the cloned repository:\n\n```console\n$ cd logicaldoc-ce\n```\n\nExecute Docker's build command:\n\n```console\n$ docker build -t logicaldoc/logicaldoc-ce .\n```\n\nOr using an apt cacher to speed up the build:\n\n```console\n$ docker build -t logicaldoc/logicaldoc-ce --build-arg APT_PROXY=172.18.0.1:3142 .\n```\n\nReplace the IP address `172.18.0.1` with the IP address of the Docker host used from which these commands are running.\n\n## Testing\n\nStart a Vagrant box from the include Vagrant file. This Vagrant box will builds the Docker image and then start a container:\n\n```console\n$ vagrant up\n```\n\nCreate the same Vagrant box using an apt cacher to speed up the build:\n\n```console\n$ APT_PROXY=172.18.0.1:3142 vagrant up\n```\n\nReplace the IP address `172.18.0.1` with the IP address of the Docker host used from which these commands are running.\n\n## Using Docker compose\n\nTo deploy a complete production stack using the included Docker compose file execute:\n\n```console\n$ docker-compose -f docker-compose.yml up -d\n```\n\nThis Docker compose file will provision 2 containers:\n\n- MySQL as the database\n- LogicalDOC CE using the above service container\n\nTo stop the stack use:\n\n```console\n$ docker-compose -f docker-compose.yml stop\n```\n\nThe stack will also create three volumes to store the data of each container. These are:\n\n- ldoc_conf - The LogicalDOC configuration container, normally called `logicaldoc-conf` when not using Docker compose.\n- ldoc_repository - The LogicalDOC DMS data container for documents and search indexes, normally called `logicaldoc-repo` when not using Docker compose.\n- ldoc_db - The database volume, in this case MySQL.\n\n### Stopping and starting with Docker compose \n\nTo stop the services use:\n\n```console\n$ docker-compose -f docker-compose.yml stop\n```\n\nTo start the services again:\n\n```console\n$ docker-compose -f docker-compose.yml start\n```\n\nTo remove the stopped containers:\n\n```console\n$ docker-compose -f docker-compose.yml rm -v\n```\n\nDestroys the containers and all the created volumes:\n\n```console\n$ docker-compose -f docker-compose.yml down -v\n```\n\n\n### Docker compose examples\nSome docker-compose examples are available in the repository of this container on GitHub https://github.com/logicaldoc/logicaldoc-ce\n\n## ... via [`docker stack deploy`](https://docs.docker.com/engine/reference/commandline/stack_deploy/) or [`docker-compose`](https://github.com/docker/compose)\n\nExample `stack.yml` for `logicaldoc-ce`:\n\n```yaml\nversion: \"3.1\"\n\nservices:\n\n  logicaldoc:\n    depends_on:\n      - mysql-ld\n    command: [\"./wait-for-it.sh\", \"mysql-ld:3306\", \"-t\", \"30\", \"--\", \"/opt/logicaldoc/start-logicaldoc.sh\", \"run\"]\n    image: logicaldoc/logicaldoc-ce\n    ports:\n      - 8080:8080\n    environment:\n      - LDOC_MEMORY=2000\n\n  mysql-ld: \n    image: mysql:8.0\n\tcommand: --default-authentication-plugin=mysql_native_password\n    environment:\n      - MYSQL_ROOT_PASSWORD=example\n      - MYSQL_DATABASE=logicaldoc\n      - MYSQL_USER=ldoc\n      - MYSQL_PASSWORD=changeme\n      \n```\n\n[![Try in PWD](https://github.com/play-with-docker/stacks/raw/cff22438cb4195ace27f9b15784bbb497047afa7/assets/images/button.png)](http://play-with-docker.com?stack=https://raw.githubusercontent.com/logicaldoc/logicaldoc-ce/master/stack.yml)\n\nRun `docker stack deploy -c stack.yml logicaldocce` , wait for it to initialize completely, and visit `http://swarm-ip:8080`, `http://localhost:8080`, or `http://host-ip:8080` (as appropriate).\n\n## Shell Access\n\nFor debugging and maintenance purposes you may want access the containers shell. If you are using Docker version `1.3.0` or higher you can access a running containers shell by starting `bash` using `docker exec`.\n\nAssuming that you have assigned the \"logicaldoc-ce\" alias to the container:\n\n```bash\ndocker exec -it logicaldoc-ce bash\n```\n\n\n\n\n\n",
  "permissions": {
    "read": true,
    "write": false,
    "admin": false
  },
  "media_types": [
    "application/vnd.docker.container.image.v1+json"
  ],
  "content_types": [
    "image"
  ]
}