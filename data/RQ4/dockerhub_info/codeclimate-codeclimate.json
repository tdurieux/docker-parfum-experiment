{
  "user": "codeclimate",
  "name": "codeclimate",
  "namespace": "codeclimate",
  "repository_type": "image",
  "status": 1,
  "status_description": "active",
  "description": "A command line interface for the Code Climate analysis platform.",
  "is_private": false,
  "is_automated": false,
  "can_edit": false,
  "star_count": 38,
  "pull_count": 20212810,
  "last_updated": "2022-12-26T17:30:40.678285Z",
  "date_registered": "2015-06-18T19:31:39.851596Z",
  "collaborator_count": 0,
  "affiliation": null,
  "hub_user": "codeclimate",
  "has_starred": false,
  "full_description": "# Code Climate CLI\n\n[![Code Climate](https://codeclimate.com/github/codeclimate/codeclimate/badges/gpa.svg)](https://codeclimate.com/github/codeclimate/codeclimate)\n\n## Overview\n\n`codeclimate` is a command line interface for the Code Climate analysis\nplatform. It allows you to run Code Climate engines on your local machine inside\nof Docker containers.\n\n## Prerequisites\n\nThe Code Climate CLI is distributed and run as a\n[Docker](https://www.docker.com) image. The engines that perform the actual\nanalyses are also Docker images. To support this, you must have Docker installed\nand running locally. We also require that the Docker daemon supports connections\non the default Unix socket `/var/run/docker.sock`.\n\nOn macOS, we recommend using [Docker for Mac](https://docs.docker.com/docker-for-mac/).\n\n## Installation\n\n```console\ndocker pull codeclimate/codeclimate\n```\n\n## Usage\n\n```console\ndocker run \\\n  --interactive --tty --rm \\\n  --env CODECLIMATE_CODE=\"$PWD\" \\\n  --volume \"$PWD\":/code \\\n  --volume /var/run/docker.sock:/var/run/docker.sock \\\n  --volume /tmp/cc:/tmp/cc \\\n  codeclimate/codeclimate help\n```\n\n## Packages\n\nThe above is very transparent. It's clear what's happening, and any changes\nrequired to work with your specific Docker setup can be discovered easily. That\nsaid, it can be unwieldy to invoke such a command on a regular basis.\n\nFor this reason, we also provide packages that include a small wrapper script\nfor the above invocation:\n\n### OS X\n\n```console\nbrew tap codeclimate/formulae\nbrew install codeclimate\n```\n\nTo update the brew package, use `brew update` first:\n\n```console\nbrew update\nbrew upgrade codeclimate\n```\n\n### Anywhere\n\n```console\ncurl -L https://github.com/codeclimate/codeclimate/archive/master.tar.gz | tar xvz\ncd codeclimate-* && sudo make install\n```\n\nTo upgrade to a newer version, just run those steps again.\n\n### Updating existing Code Climate configuration\n\nIf you are already using Code Climate and have a .codeclimate.yml file\nwithin your repository, you will probably want to run:\n\n```console\ncodeclimate init --upgrade\n```\n\nThis will generate .yml files that will enable CodeClimate CLI to run\nwith the configuration that is automatically generated by Code Climate,\nensuring that the output matches between the two.\n\n## Commands\n\nA list of available commands is accessible by running `codeclimate` or\n`codeclimate help`.\n\n```console\n$ codeclimate help\n\nAvailable commands:\n    analyze [-f format] [-e engine(:channel)] [--dev] [path]\n    console\n    engines:disable <engine_name>\n    engines:enable <engine_name>\n    engines:install\n    engines:list\n    engines:remove\n    help\n    init\n    validate-config\n    version\n```\n\nThe following is a brief explanation of each available command.\n\n* `analyze`\n  Analyze all relevant files in the current working directory. All\n  engines that are enabled in your `.codeclimate.yml` file will run, one after\n  another. The `-f` (or `format`) argument allows you to set the output format of\n  the analysis (using `json`, `text`, or `html`). The `--dev` flag lets you run\n  engines not known to the CLI, for example if you're an engine author developing\n  your own, unreleased image.\n\n  You can optionally provide a specific path to analyze. If not provided, the\n  CLI will analyze your entire repository, except for your configured\n  `exclude_paths`. When you do provide an explicit path to analyze, your\n  configured `exclude_paths` are ignored, and normally excluded files will be\n  analyzed.\n\n  You can also pipe in source in combination with a path to analyze code that is\n  not yet written to disk. This is useful when you want to check if your source\n  code style matches the project's. This is also a good way to implement\n  integration with an editor to check style on the fly.\n* `console`\n  start an interactive session providing access to the classes\n  within the CLI. Useful for engine developers and maintainers.\n* `engines:disable engine_name`\n  Changes the engine's `enabled:` node to be `false` in your `.codeclimate.yml`\n  file. This engine will not be run the next time your project is analyzed.\n* `engines:enable engine_name`\n  Installs the specified engine (`engine_name`). Also changes the engine's\n  `enabled:` node to be `true` in your `.codeclimate.yml` file. This engine\n  will be run the next time your project is analyzed.\n* `engines:install`\n  Compares the list of engines in your `.codeclimate.yml` file to those that\n  are currently installed, then installs any missing engines.\n* `engines:list`\n  Lists all available engines in the\n  [Code Climate Docker Hub](https://hub.docker.com/u/codeclimate/)\n  .\n* `engines:remove engine_name`\n  Removes an engine from your `.codeclimate.yml` file.\n* `help`\n  Displays a list of commands that can be passed to the Code Climate CLI.\n* `init`\n  Generates a new `.codeclimate.yml` file in the current working directory.\n* `validate-config`\n  Validates the `.codeclimate.yml` file in the current working directory.\n* `version`\n  Displays the current version of the Code Climate CLI.\n\n## Environment Variables\n\n* To run `codeclimate` in debug mode:\n\n  ```\n  CODECLIMATE_DEBUG=1 codeclimate analyze\n  ```\n\n  Prints additional information about the analysis steps, including any stderr\n  produced by engines.\n\n* To increase the amount of time each engine container may run (default 15 min):\n\n  ```\n  # 30 minutes\n  CONTAINER_TIMEOUT_SECONDS=1800 codeclimate analyze\n  ```\n\n* You can also configure the default alotted memory with which each engine runs\n  (default is 512,000,000 bytes):\n\n  ```\n  # 1,000,000,000 bytes\n  ENGINE_MEMORY_LIMIT_BYTES=1000000000 codeclimate analyze\n  ```\n\n## Copyright\n\nSee [LICENSE](https://github.com/codeclimate/codeclimate/blob/master/LICENSE)",
  "permissions": {
    "read": true,
    "write": false,
    "admin": false
  },
  "media_types": [
    "application/vnd.docker.container.image.v1+json",
    "application/vnd.docker.distribution.manifest.v1+prettyjws",
    "application/octet-stream"
  ],
  "content_types": [
    "image",
    ""
  ]
}