{
  "user": "ecmwf",
  "name": "skinnywms",
  "namespace": "ecmwf",
  "repository_type": "image",
  "status": 1,
  "status_description": "active",
  "description": "The skinny WMS is a small WMS server that will help you to visualise your NetCDF and Grib Data",
  "is_private": false,
  "is_automated": false,
  "can_edit": false,
  "star_count": 0,
  "pull_count": 34502,
  "last_updated": "2022-09-07T13:11:15.969249Z",
  "date_registered": "2019-11-27T14:15:54.316564Z",
  "collaborator_count": 0,
  "affiliation": null,
  "hub_user": "ecmwf",
  "has_starred": false,
  "full_description": "\nThe skinny WMS is a small WMS server that will help you to visualise your NetCDF and Grib Data.\nThe principle is simple: skinny will browse the directory, or the single file passed as argument, and try to interpret each NetCDF or GRIB files. From the metadata, it will be built the getCapabilities document, and find a relevant style to plot the data.\n\n[![build](https://img.shields.io/travis/ecmwf/skinnywms/master.svg)](https://travis-ci.org/ecmwf/skinnywms/branches)\n[![Docker Build Status](https://img.shields.io/docker/cloud/build/ecmwf/skinnywms.svg)](https://hub.docker.com/r/ecmwf/skinnywms)\n[![Docker Pulls](https://img.shields.io/docker/pulls/ecmwf/skinnywms)](https://hub.docker.com/r/ecmwf/skinnywms)[![PyPI version](https://badge.fury.io/py/skinnywms.svg)](https://badge.fury.io/py/skinnywms) [![Anaconda-Server Badge](https://anaconda.org/conda-forge/skinnywms/badges/version.svg)](https://anaconda.org/conda-forge/skinnywms) [![Anaconda-Server Badge](https://anaconda.org/conda-forge/skinnywms/badges/downloads.svg)](https://anaconda.org/conda-forge/skinnywms)\n\n\nFeatures:\n---------\nSkinnyWMS implements 3 of the WMS endpoints:\n- **getCapabilities**: Discover the data, build an XML Document presenting each identified parameter in the file(s) as a layer with the list of their predefined styles. (There is always a default style)\n- **getMap** : Return the  selected layer suing the selected style.\n- **getLegendGraphic**: Return the legend.\n\n\nUsage:\n-----\nThere are 2 ways to start using it, they both will start a small Flask server.\nOnce running, a small leaflet client is accessible [http://127.0.0.1:5000/]\n\n* The demo:\n\n```bash\npython demo.py --path /path/to/mydata\n```\n\n* The command line:\n\n```bash\nskinny-wms --path /path/to/mydata\n```\n\n* Or with uwsgi:\n\n```bash\nuwsgi --http localhost:5000 --master --process 20 --mount /=skinnywms.wmssvr:application --env SKINNYWMS_DATA_PATH=/path/to/mydata\n```\n\n\nRun using Docker\n----------------\n\nBy default the docker image will start the application using uwsgi and will load and display some demo data.\n\n* Run the demo:\n```bash\ndocker run --rm -p 5000:5000 -it ecmwf/skinnywms \n```\nNow you can try the leaflet demo at http://localhost:5000/\n\n* Run using data on your machine:\n```bash\ndocker run --rm -p 5000:5000 -it \\\n    --volume=/path/to/my/data:/path/inside/the/container \\\n    --env SKINNYWMS_DATA_PATH=/path/inside/the/container \\\n      ecmwf/skinnywms\n```\nNow you can access the leaflet demo with your data at http://localhost:5000/\n\n* Configure different options by setting environment variables accordingly:\n```bash\ndocker run --rm -p 5000:5000 -it \\\n    --volume=/path/to/my/data:/path/inside/the/container \\\n    --env SKINNYWMS_DATA_PATH=/path/inside/the/container \\\n    --env SKINNYWMS_HOST=0.0.0.0 \\\n    --env SKINNYWMS_PORT=5000 \\\n    --env SKINNYWMS_MOUNT=/mymodel/ \\\n    --env SKINNYWMS_UWSGI_WORKERS=4 \\\n    --env SKINNYWMS_ENABLE_DIMENSION_GROUPING=1 \\\n      ecmwf/skinnywms\n```\nNow you can access the ```GetCapabilities`` document for your data at http://localhost:5000/mymodel/wms?request=GetCapabilities\n\n\nInstallation\n------------\n\nSkinnyWMS  depends on the ECMWF *Magics* library.\n\nIf you do not have *Magics* installed on your platform, skinnywms is available on conda forge https://conda-forge.org/\n\n```bash\nconda config --add channels conda-forge\nconda install skinnywms\n```\n\nIf you have *Magics* already installed you can use pip:\n\n```bash\npip install skinnywms\n```\n\nLimitations:\n------------\n- SkinnyWMS will perform better on well formatted and documented NetCDF and GRIB.\n\n- grib fields containing corresponding wind components u,v need to be placed together in a single grib file in order to be displayed as vectors/wind barbs in SkinnyWMS. You can combine multiple grib files into a single file using ecCodes ``grib_copy`` (included in the docker image), e.g.:\n```bash\ngrib_copy input_wind_u_component.grb2 input_wind_v_component.grib2 output_wind_u_v_combined.grb2\n```\n\n- The time and elevation dimension implementations follow [OGC Met Ocean DWG WMS 1.3 Best Practice for using Web Map Services (WMS) with Time-Dependent or Elevation-Dependent Data](https://external.ogc.org/twiki_public/MetOceanDWG/MetOceanWMSBPOnGoingDrafts). To enable dimension grouping (disabled by default) set the environment variable ``SKINNYWMS_ENABLE_DIMENSION_GROUPING=1``\n\n- development stage: **Alpha**,\n\n\nAdd your own styles:\n--------------------\n\nMulti-process\n-------------\n\nCache\n-----\n\n\nHow to install Magics\n-----------------------\n\nthat must be installed on the system and accessible as a shared library.\nSome Linux distributions ship a binary version that may be installed with the standard package manager.\n\n\nAs an alternative you may install the official source distribution\nby following the instructions at\nhttps://software.ecmwf.int/magics/Installation+Guide\nMagics is available on github https://github.com/ecmwf/magics\n\nNote that *Magics* support for the Windows operating system is experimental.\n\n\nStart up a local development environment (Docker)\n-----------------------------------------\n\nMake sure you have ``Docker`` and ``docker-compose`` installed. Then run:\n```bash\ndocker-compose up\n```\nThis will build a dev image and start up a local flask development server (with automatic reload on code changes) at http://localhost:5000 based on the configuration stored in [docker-compose.yml](./docker-compose.yml) and [.env](./.env) and by default try to load all GRIB and NetCDF data stored in [skinnywms/testdata](./skinnywms/testdata).\n\n\nContributing\n------------\n\nThe main repository is hosted on GitHub,\ntesting, bug reports and contributions are highly welcomed and appreciated:\n\nhttps://github.com/ecmwf/skinnywms\nhttps://github.com/ecmwf/magics-python\nhttps://github.com/ecmwf/magics\n\n\nPlease see the CONTRIBUTING.rst document for the best way to help.\n\nLead developers:\n\n- `Sylvie Lamy-Thepaut <https://github.com/sylvielamythepaut>`_ - ECMWF\n- `Baudouin Raoult <https://github.com/b8raoult>` - ECMWF\n- `Eduard Rosert <https://github.com/eduardRosert>` - ECMWF\n\nMain contributors:\n\n- `Stephan Siemen <https://github.com/stephansiemen>`_ - ECMWF\n- `Milana Vuckovic <https://github.com/milanavuckovic>` - ECMWF\n\n\nLicense\n-------\n\nCopyright 2017-2019 European Centre for Medium-Range Weather Forecasts (ECMWF).\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at: http://www.apache.org/licenses/LICENSE-2.0.\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n\n",
  "permissions": {
    "read": true,
    "write": false,
    "admin": false
  },
  "media_types": [
    "application/vnd.docker.container.image.v1+json"
  ],
  "content_types": [
    "image"
  ]
}