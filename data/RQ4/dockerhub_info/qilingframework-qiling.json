{
  "user": "qilingframework",
  "name": "qiling",
  "namespace": "qilingframework",
  "repository_type": "image",
  "status": 1,
  "status_description": "active",
  "description": "Qiling Framework - Advanced Binary Emulation Framework",
  "is_private": false,
  "is_automated": false,
  "can_edit": false,
  "star_count": 0,
  "pull_count": 21717,
  "last_updated": "2022-12-31T13:25:29.889652Z",
  "date_registered": "2020-05-06T13:52:37.178098Z",
  "collaborator_count": 0,
  "affiliation": null,
  "hub_user": "qilingframework",
  "has_starred": false,
  "full_description": "[![Downloads](https://pepy.tech/badge/qiling)](https://pepy.tech/project/qiling)\n[![Chat on Telegram](https://img.shields.io/badge/Chat%20on-Telegram-brightgreen.svg)](https://t.me/qilingframework)\n[![Build Status](https://travis-ci.com/qilingframework/qiling.svg?branch=dev)](https://travis-ci.com/qilingframework/qiling)\n---\n\n<p align=\"center\">\n<img width=\"150\" height=\"150\" src=\"https://raw.githubusercontent.com/qilingframework/qiling/master/docs/qiling_small.png\">\n</p>\n\nQiling is an advanced binary emulation framework, with the following features:\n\n- Cross platform: Windows, MacOS, Linux, BSD, UEFI, DOS, MBR\n- Cross architecture: X86, X86_64, Arm, Arm64, MIPS, 8086\n- Multiple file formats: PE, MachO, ELF, COM, MBR\n- Support Windows Driver (.sys), Linux Kernel Module (.ko) & MacOS Kernel (.kext) via [Demigod](https://groundx.io/demigod/)\n- Emulates & sandbox machine code in an isolated environment\n- Provides a fully configurable sandbox\n- Provides in-dept memory, register, OS level and filesystem level API\n- Fine-grain instrumentation: allows hooks at various levels (instruction/basic-block/memory-access/exception/syscall/IO/etc)\n- Provides virtual machine level API such as save and restore current execution state\n- Supports cross architecture and platform debugging capabilities\n- Built-in debugger with reverse debugging capability\n- Allows dynamic hotpatch on-the-fly running code, including the loaded library\n- True framework in Python, making it easy to build customized security analysis tools on top\n\nQiling also made its way to various international conferences.\n\n2020:\n\n- [Black Hat, USA](https://www.blackhat.com/us-20/arsenal/schedule/index.html#qiling-framework-from-dark-to-dawn-----enlightening-the-analysis-of-the-most-mysterious-iot-firmware--21062)\n- [Black Hat, Asia](https://www.blackhat.com/asia-20/arsenal/schedule/index.html#qiling-lightweight-advanced-binary-analyzer-19245)\n- [Hack In The Box, Lockdown 001](https://conference.hitb.org/lockdown-livestream/)\n- [Hack In The Box, Lockdown 002](https://conference.hitb.org/hitb-lockdown002/virtual-labs/virtual-lab-qiling-framework-learn-how-to-build-a-fuzzer-based-on-a-1day-bug/)\n- [Nullcon](https://nullcon.net/website/goa-2020/speakers/kaijern-lau.php)\n    \n2019:\n\n- [Defcon, USA](https://www.defcon.org/html/defcon-27/dc-27-demolabs.html#QiLing)\n- [Hitcon](https://hitcon.org/2019/CMT/agenda)\n- [Zeronights](https://zeronights.ru/report-en/qiling-io-advanced-binary-emulation-framework/)\n\n\nQiling is backed by [Unicorn engine](http://www.unicorn-engine.org).\n\nVisit our website https://www.qiling.io for more information.\n\n---\n#### License\n\nThis project is released and distributed under [free software license GPLv2](https://github.com/qilingframework/qiling/blob/master/COPYING).\n\n---\n\n#### Qiling vs other Emulators\n\nThere are many open source emulators, but two projects closest to Qiling are [Unicorn](http://www.unicorn-engine.org) & [Qemu usermode](https://qemu.org). This section explains the main differences of Qiling against them.\n\n##### Qiling vs Unicorn engine\n\nBuilt on top of Unicorn, but Qiling & Unicorn are two different animals.\n\n- Unicorn is just a CPU emulator, so it focuses on emulating CPU instructions, that can understand emulator memory. Beyond that, Unicorn is not aware of higher level concepts, such as dynamic libraries, system calls, I/O handling or executable formats like PE, MachO or ELF. As a result, Unicorn can only emulate raw machine instructions, without Operating System (OS) context\n- Qiling is designed as a higher level framework, that leverages Unicorn to emulate CPU instructions, but can understand OS: it has executable format loaders (for PE, MachO & ELF at the moment), dynamic linkers (so we can load & relocate shared libraries), syscall & IO handlers. For this reason, Qiling can run executable binary without requiring its native OS\n\n##### Qiling vs Qemu usermode\n\nQemu usermode does similar thing to our emulator, that is to emulate whole executable binaries in cross-architecture way. However, Qiling offers some important differences against Qemu usermode.\n\n- Qiling is a true analysis framework, that allows you to build your own dynamic analysis tools on top (in friendly Python language). Meanwhile, Qemu is just a tool, not a framework\n- Qiling can perform dynamic instrumentation, and can even hotpatch code at runtime. Qemu does not do either\n- Not only working cross-architecture, Qiling is also cross-platform, so for example you can run Linux ELF file on top of Windows. In contrast, Qemu usermode only run binary of the same OS, such as Linux ELF on Linux, due to the way it forwards syscall from emulated code to native OS\n- Qiling supports more platforms, including Windows, MacOS, Linux & BSD. Qemu usermode can only handle Linux & BSD\n\n---\n\n#### Installation\nPlease see [setup guide](https://docs.qiling.io/en/latest/install/) file for how to install Qiling Framework.\n\n---\n\n#### Examples\n\n- Below example shows how to use Qiling framework to emulate a Windows EXE on a Linux machine\n\n```python\nfrom qiling import *\n\n# sandbox to emulate the EXE\ndef my_sandbox(path, rootfs):\n    # setup Qiling engine\n    ql = Qiling(path, rootfs)\n    # now emulate the EXE\n    ql.run()\n\nif __name__ == \"__main__\":\n    # execute Windows EXE under our rootfs\n    my_sandbox([\"examples/rootfs/x86_windows/bin/x86_hello.exe\"], \"examples/rootfs/x86_windows\")\n```\n\n- Below example shows how to use Qiling framework to dynamically patch a Windows crackme, make it always display \"Congratulation\" dialog\n\n```python\nfrom qiling import *\n\ndef force_call_dialog_func(ql):\n    # get DialogFunc address\n    lpDialogFunc = ql.unpack32(ql.mem.read(ql.reg.esp - 0x8, 4))\n    # setup stack memory for DialogFunc\n    ql.stack_push(0)\n    ql.stack_push(1001)\n    ql.stack_push(273)\n    ql.stack_push(0)\n    ql.stack_push(0x0401018)\n    # force EIP to DialogFunc\n    ql.reg.eip = lpDialogFunc\n\n\ndef my_sandbox(path, rootfs):\n    ql = Qiling(path, rootfs)\n    # NOP out some code\n    ql.patch(0x004010B5, b'\\x90\\x90')\n    ql.patch(0x004010CD, b'\\x90\\x90')\n    ql.patch(0x0040110B, b'\\x90\\x90')\n    ql.patch(0x00401112, b'\\x90\\x90')\n    # hook at an address with a callback\n    ql.hook_address(force_call_dialog_func, 0x00401016)\n    ql.run()\n\n\nif __name__ == \"__main__\":\n    my_sandbox([\"rootfs/x86_windows/bin/Easy_CrackMe.exe\"], \"rootfs/x86_windows\")\n```\n\nThe below Youtube video shows how the above example works.\n\n#### Qiling's IDAPro Plugin: Instrument and Decrypt Mirai's Secret\n\n- This video demonstrate how Qiling's IDAPro plugin able to make IDApro run with Qiling instrumentation engine\n\n[![](http://img.youtube.com/vi/ZWMWTq2WTXk/0.jpg)](http://www.youtube.com/watch?v=ZWMWTq2WTXk \"iling's IDAPro Plugin: Instrument and Decrypt Mirai's Secret\")\n\n#### GDBserver with IDAPro demo\n\n- Solving a simple CTF challenge with Qiling Framework and IDAPro\n\n[![Solving a simple CTF challenge with Qiling Framework and IDAPro](https://i.ytimg.com/vi/SPjVAt2FkKA/0.jpg)](https://www.youtube.com/watch?v=SPjVAt2FkKA \"Video DEMO 2\")\n\n#### Emulating ARM router firmware on Ubuntu X64 machine\n\n- Qiling Framework hot-patch and emulates ARM router's /usr/bin/httpd on a X86_64Bit Ubuntu\n\n[![qiling DEMO 3: Fully emulating httpd from ARM router firmware with Qiling on Ubuntu X64 machine](https://raw.githubusercontent.com/qilingframework/qilingframework.github.io/master/images/demo3-en.jpg)](https://www.youtube.com/watch?v=Nxu742-SNvw \"Demo #3 Emulating ARM router firmware on Ubuntu X64 machine\")\n\n#### Emulating UEFI\n\n- Qiling Framework emulates UEFI\n\n[![qiling DEMO 4: Emulating UEFI](https://raw.githubusercontent.com/qilingframework/qilingframework.github.io/master/images/demo4-s.png)](https://raw.githubusercontent.com/qilingframework/qilingframework.github.io/master/images/demo4-en.png \"Demo #4 Emulating UEFI\")\n\n---\n\n#### Qltool\n\nQiling also provides a friendly tool named `qltool` to quickly emulate shellcode & executable binaries.\n\nWith qltool, easy execution can be performed:\n\n\nWith shellcode:\n\n```\n$ ./qltool shellcode --os linux --arch arm --hex -f examples/shellcodes/linarm32_tcp_reverse_shell.hex\n```\n\nWith binary file:\n\n```\n$ ./qltool run -f examples/rootfs/x8664_linux/bin/x8664_hello --rootfs  examples/rootfs/x8664_linux/\n```\n\nWith binary and GDB debugger enable:\n\n```\n$ ./qltool run -f examples/rootfs/x8664_linux/bin/x8664_hello --gdb 127.0.0.1:9999 --rootfs examples/rootfs/x8664_linux\n```\n\nSee  https://docs.qiling.io/  for more details\n\nWith code coverage collection (UEFI only for now):\n\n```\n$ ./qltool run -f examples/rootfs/x8664_efi/bin/TcgPlatformSetupPolicy --rootfs examples/rootfs/x8664_efi --coverage-format drcov --coverage-file TcgPlatformSetupPolicy.cov\n```\n---\n\nWith json output (Windows mainly):\n\n```\n$ ./qltool run -f examples/rootfs/x86_windows/bin/x86_hello.exe --rootfs  examples/rootfs/x86_windows/ --console False --json\n```\n---\n\n\n#### Contact\n\nGet the latest info from our website https://www.qiling.io\n\nContact us at email info@qiling.io, or via Twitter [@qiling_io](https://twitter.com/qiling_io) or [Weibo](https://www.weibo.com/sgniwx)\n\n---\n\n#### Core developers\n\n- LAU kaijern (xwings) <kj@qiling.io>\n- NGUYEN Anh Quynh <aquynh@gmail.com>\n- DING tianZe (D1iv3) <dddliv3@gmail.com>\n- SUN bowen (w1tcher) <w1tcher.bupt@gmail.com>\n- CHEN huitao (null) <null@qiling.io>\n- YU tong (sp1ke) <spikeinhouse@gmail.com>\n- Earl Marcus (klks84) klks84@gmail.com \n- WU chenxu (kabeor) <kabeor@qiling.io>\n- KONG ziqiao (lazymio) <mio@lazym.io>\n\n#### Travis-CI, Docker, Website and Documentation\n\n- FOO Kevin (chfl4gs) <chfl4gs@qiling.io>\n\n#### Key Contributors (in no particular order)\n\n- 0ssigeno\n- liba2k\n- assafcarlsbad\n- ucgJhe\n- jhumble\n\n---\n\n#### This is an awesome project! Can I donate?\nYes, details please refer to https://www.qiling.io/donation/",
  "permissions": {
    "read": true,
    "write": false,
    "admin": false
  },
  "media_types": [
    "application/vnd.docker.container.image.v1+json"
  ],
  "content_types": [
    "image"
  ]
}