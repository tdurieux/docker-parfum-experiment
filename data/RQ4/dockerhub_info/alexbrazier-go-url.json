{
  "user": "alexbrazier",
  "name": "go-url",
  "namespace": "alexbrazier",
  "repository_type": "image",
  "status": 1,
  "status_description": "active",
  "description": "Url Shortener for use inside organisation",
  "is_private": false,
  "is_automated": true,
  "can_edit": false,
  "star_count": 1,
  "pull_count": 3112,
  "last_updated": "2022-10-04T11:52:48.328281Z",
  "date_registered": "2018-12-03T21:10:23.561275Z",
  "collaborator_count": 0,
  "affiliation": null,
  "hub_user": "alexbrazier",
  "has_starred": false,
  "full_description": "# Go URL\n\n[![CircleCI](https://circleci.com/gh/alexbrazier/go-url.svg?style=svg)](https://circleci.com/gh/alexbrazier/go-url)\n[![Cypress Dashboard](https://img.shields.io/badge/cypress-dashboard-brightgreen.svg)](https://dashboard.cypress.io/#/projects/7dct13/runs)\n[![dependencies](https://img.shields.io/david/alexbrazier/go-url.svg?path=frontend)](https://david-dm.org/alexbrazier/go-url?path=frontend)\n\nA simple URL shortener written in Go with a React frontend and Postgres database.\n\n# Features\n\n- Shorten urls based on a user defined key\n- Alias a key to point to another short url\n- Open multiple pages at once by separating keys with a comma\n- Alias a key to point to multiple other keys\n- Use variables in URLs\n- Opensearch integration to provide suggestions directly to browser\n- Frontend to view most popular searches and search to find existing links\n- Frontend to allow anyone to add and edit links\n- Optional authentication using Azure AD or Okta\n- Slack `/` command integration\n- Slackbot integration\n\n![Demo](.github/go-demo.gif)\n\n# Getting Started\n\nThe recommended way to test and deploy is using Docker. You will need to run both the go-url app, and the Postgres DB.\n\n**Start Postgres**\n\n```sh\ndocker run -d -P --name db -e POSTGRES_PASSWORD=password -e POSTGRES_DB=go -e POSTGRES_ADDR=db:5432 postgres:11.3-alpine\n```\n\n**Start App**\n\n```sh\ndocker run -p 1323:1323 -e HOSTS=localhost -e APP_URI=http://localhost:1323 --link db alexbrazier/go-url\n```\n\nAlteratively use the docker-compose file and run:\n\n```sh\ndocker-compose up\n```\n\n## Development\n\nOpen http://localhost:8080/go\n\nRun Postgres manually or with Docker\n\n```sh\ndocker-compose up postgres\n```\n\nInstall node (via nvm), yarn & go\n\n```sh\nbrew install nvm yarn go\nnvm install\n```\n\n### Start frontend\n\n```sh\ncd frontend\nyarn\nyarn start\n```\n\n### Start API\n\n```sh\ncd api\ndep ensure\nPOSTGRES_PASS=password HOSTS=localhost APP_URI=http://localhost:3000 go run server.go\n```\n\n## Enviroment Configuration\n\n| Env Var                     | Required | Default        | Example                                        | Description                                                                                            |\n| --------------------------- | -------- | -------------- | ---------------------------------------------- | ------------------------------------------------------------------------------------------------------ |\n| `HOSTS`                     | yes      |                | go.domain.com,go2.domain.com                   | List of comma separated hosts that the server will be able to be accessed from                         |\n| `BLOCKED_HOSTS`             |          |                | go.domain.com,go2.domain.com                   | List of hosts you want to block from being linked - HOSTS are already included to stop recursive calls |\n| `APP_URI`                   | yes      |                | https://go.domain.com                          | Default URI of app - used to link back to app                                                          |\n| `PORT`                      |          | 1323           |                                                | Port the app will run on                                                                               |\n| `DEBUG`                     |          | false          |                                                | Enable more logging                                                                                    |\n| `JSON_LOGS`                 |          | false          |                                                | Use JSON logs where possible                                                                           |\n| `POSTGRES_ADDR`             |          | localhost:5432 |                                                | Postgres db address                                                                                    |\n| `POSTGRES_DATABASE`         |          | go             |                                                | Postgres db name                                                                                       |\n| `POSTGRES_USER`             |          | postgres       |                                                | Postgres user                                                                                          |\n| `POSTGRES_PASS`             |          | password       |                                                | Postgres password                                                                                      |\n| `SLACK_TOKEN`               |          |                | xoxb-xxxxxxxxx-xxxxxxxx-xxxx                   | Slack OAuth token to enable slackbot                                                                   |\n| `SENTRY_API_DSN`            |          |                |                                                | Sentry DSN for go API                                                                                  |\n| `SENTRY_FRONTEND_DSN`       |          |                |                                                | Sentry DSN for react frontend                                                                          |\n| `SLACK_SIGNING_SECRET`      |          |                | xxxxxxxxxxx                                    | Slack signing secret to enable Slack `/go` command                                                     |\n| `SLACK_TEAM_ID`             |          |                | Txxxxxxxx                                      | Slack team id to restrict slash command responses to single team                                       |\n| `ENABLE_AUTH`               |          | false          |                                                | Enable Azure auth or not - if enabled, all other fields must be filled in                              |\n| `AUTH_EXPIRY_SECONDS`       |          | 2592000        |                                                | Auth cookie expiry (default 30 days)                                                                   |\n| `SECURE_COOKIES`            |          | true           |                                                | Use secure https only cookies                                                                          |\n| `AD_TENANT_ID`              |          |                |                                                | Azure AD tenant ID                                                                                     |\n| `AD_CLIENT_ID`              |          |                |                                                | Azure AD client ID                                                                                     |\n| `AD_CLIENT_SECRET`          |          |                |                                                | Azure AD client secret                                                                                 |\n| `OKTA_CLIENT_ID`            |          |                |                                                | Okta client ID                                                                                         |\n| `OKTA_CLIENT_SECRET`        |          |                |                                                | Okta client secret                                                                                     |\n| `OKTA_ISSUER`               |          |                | https://dev-123.oktapreview.com/oauth2/default | Okta issuer url                                                                                        |\n| `SESSION_TOKEN`             |          |                |                                                | Secret session token to store the user sessions                                                        |\n| `ALLOWED_IPS`               |          |                | 110.1.10.2,1.1.22.0/24                         | IP addresses or CIDRs that are always allowed access, even with auth enabled                           |\n| `ALLOW_FORWARDED_FOR`       |          | false          |                                                | Retrieve origin IP from X-Forwarded-For header. Only enable if source is trusted, e.g. via Cloudfront  |\n| `FORWARDED_FOR_TRUST_LEVEL` |          | 1              |                                                | Number of levels to trust X-Forwarded-For header - should map to number of proxies used                |\n\n## FAQ\n\n#### Slackbot is posting multiple replies messages to a single message\n\nWhen enabled, the Slackbot will be running on every node in a load balanced system. Either disable load balancing, or run a separate instance just for the Slackbot.\n",
  "permissions": {
    "read": true,
    "write": false,
    "admin": false
  },
  "media_types": [
    "application/vnd.docker.container.image.v1+json"
  ],
  "content_types": [
    "image"
  ]
}