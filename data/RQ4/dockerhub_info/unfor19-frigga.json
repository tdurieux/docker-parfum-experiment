{
  "user": "unfor19",
  "name": "frigga",
  "namespace": "unfor19",
  "repository_type": "image",
  "status": 1,
  "status_description": "active",
  "description": "",
  "is_private": false,
  "is_automated": false,
  "can_edit": false,
  "star_count": 0,
  "pull_count": 636,
  "last_updated": "2021-06-11T21:37:20.707969Z",
  "date_registered": "2020-07-15T13:13:40.787111Z",
  "collaborator_count": 0,
  "affiliation": null,
  "hub_user": "unfor19",
  "has_starred": false,
  "full_description": "# frigga\n\n[![testing](https://github.com/unfor19/frigga/workflows/testing/badge.svg?branch=master)](https://github.com/unfor19/frigga/actions?query=workflow%3Atesting)\n\n<div style=\"text-align: center;\">\n<img alt=\"frigga-logo\" width=\"100%\" src=\"https://frigga.s3-eu-west-1.amazonaws.com/frigga_transparent_background_github_readme.png\" />\n</div>\n\nDo you have a Grafana instance? frigga makes sure you don’t scrape metrics in Prometheus, which you don’t present in Grafana dashboards.\n\nScrape only relevant metrics in Prometheus, according to your Grafana dashboards, see the [before and after snapshot](https://snapshot.raintank.io/dashboard/snapshot/p4YmuKHu4jBlA2kPmOhbuda3jo4I51bt?orgId=2). frigga generates `keep` filters on [metric_relabel_configs](https://prometheus.io/docs/prometheus/latest/configuration/configuration/#metric_relabel_configs), and adds them to your `prometheus.yml` file\n\nfrigga is extremely useful for [Grafana Cloud](https://grafana.com/products/cloud/) customers since the pricing is per DataSeries ingestions.\n\n## Illustration\n<details>\n<summary>Expand/Collapse</summary>\n   \n<div style=\"text-align: center;\">\n<img alt=\"frigga-logo\" width=\"100%\" src=\"https://frigga.s3-eu-west-1.amazonaws.com/firrga-demo-light.gif\" />\n</div>\n\n</details>\n\n## Requirements\n\nPython 3.6.7+\n\n## Installation\n\n```bash\n$ pip install frigga\n```\n\n### Docker\n\n```bash\ndocker run --rm -it unfor19/frigga\n```\n\nFor ease of use, add an alias in your `~/.bashrc` file\n\n```bash\nalias frigga=\"docker run --rm -it unfor19/frigga\"\n```\n\n## Available Commands\n\nAuto-generated by [unfor19/replacer-action](https://github.com/marketplace/actions/replacer-action), see [readme.yml](https://github.com/unfor19/frigga/blob/master/.github/workflows/readme.yml)\n\n<!-- available_commands_start -->\n\n```\nUsage: frigga [OPTIONS] COMMAND [ARGS]...\n\n  No confirmation prompts\n\nOptions:\n  -ci, --ci  Use this flag to avoid confirmation prompts\n  --help     Show this message and exit.\n\nCommands:\n  client-start       Alias: cs\n  grafana-list       Alias: gl\n  prometheus-apply   Alias: pa\n  prometheus-get     Alias: pg\n  prometheus-reload  Alias: pr\n  version            Print the installed version\n  webserver-start    Alias: ws\n```\r\n\n<!-- available_commands_end -->\n\n## Getting Started\n\n1. Grafana - Import the dashboard [frigga - Jobs Usage](docker-compose/grafana/provisioning/dashboards/jobs-usage.json) (ID: 12537) to Grafana, and check out the number of DataSeries\n1. Grafana - Generate an API Key for `Viewer`\n1. frigga - Get the list of metrics that are used in your Grafana dasboards\n\n   ```bash\n   $ frigga gl\n   \n   # gl is grafana-list, or good luck :)\n\n   Grafana url [http://localhost:3000]: http://my-grafana.grafana.net\n   Grafana api key: (hidden)\n   >> [LOG] Getting the list of words to ignore when scraping from Grafana\n   ...\n   >> [LOG] Found a total of 269 unique metrics to keep\n   ```\n\n   `.metrics.json` - automatically generated in pwd\n\n   ```json\n   {\n       \"all_metrics\": [\n           \"cadvisor_version_info\",\n           \"container_cpu_usage_seconds_total\",\n           \"container_last_seen\",\n           \"container_memory_max_usage_bytes\",\n           ...\n       ]\n   }\n   ```\n\n1. Add the following snippet to the bottom of your `prometheus.yml` file. Check the example in [docker-compose/prometheus-original.yml](docker-compose/prometheus-original.yml)\n\n   ```yml\n    ---\n    name: frigga\n    exclude_jobs: []\n   ```\n\n1. frigga - Use the `.metrics.json` file to apply the rules to your existing `prometheus.yml`\n\n   ```bash\n   $ frigga pa\n   \n   # pa is prometheus-apply, or pam-tada-dam\n\n   Prom yaml path [docker-compose/prometheus.yml]: /etc/prometheus/prometheus.yml\n   Metrics json path [./.metrics.json]: /home/willywonka/.metrics.json\n   >> [LOG] Reading documents from docker-compose/prometheus.yml\n   ...\n   >> [LOG] Done! Now reload docker-compose/prometheus.yml with 'frigga pr -u http://localhost:9090'\n   ```\n\n1. As mentioned in the previous step, reload the `prometheus.yml` to Prometheus, here are two ways of doing it\n   - \"Kill\" Prometheus\n     ```bash\n     $ docker exec $PROM_CONTAINER_NAME kill -HUP 1\n     ```\n   - Send a POST request to `/-/reload` - this requires Prometheus to be loaded with `--web.enable-lifecycle`, for example, see [docker-compose.yml](docker-compose/docker-compose.yml)\n     ```bash\n     $ frigga prometheus-reload --prom-url http://localhost:9090\n     ```\n     Or with curl\n     ```\n     $ curl -X POST http://localhost:9090/-/reload\n     ```\n1. Make sure the `prometheus.yml` was loaded successfully to Prometheus\n\n   ```bash\n   $ docker logs --tail 10 $PROM_CONTAINER_NAME\n\n    level=info ts=2020-06-27T15:45:34.514Z caller=main.go:799 msg=\"Loading configuration file\" filename=/etc/prometheus/prometheus.yml\n    level=info ts=2020-06-27T15:45:34.686Z caller=main.go:827 msg=\"Completed loading of configuration file\" filename=/etc/prometheus/prometheus.yml\n   ```\n\n1. Grafana - Now check `frigga - Jobs Usage` dashboard, the numbers should be signifcantly lower (up to 60% or even more)\n\n## Test it locally\n\n### Requirements\n\n1. [Docker](https://docs.docker.com/get-docker/)\n1. [docker-compose](https://docs.docker.com/compose/install/)\n1. [jq](https://stedolan.github.io/jq/download/)\n\n### Getting Started\n\n1. git clone this repository\n1. Run Docker daemon (Docker for Desktop)\n1. Make sure ports 3000,8080,9100 are not in use (state=closed)\n   ```bash\n   docker run --rm -it --network=host unfor19/net-tools nmap -p 8080,3000,9100 -n localhost\n   ```\n1. Deploy locally the services: Prometheus, Grafana, node-exporter and cadvisor\n\n   ```bash\n   $ bash docker-compose/deploy_stack.sh\n\n   Creating network \"frigga_net1\" with the default driver\n   ...\n   >> Grafana - Generating API Key - for Viewer\n   eyJrIjoiT29hNGxGZjAwT2hZcU1BSmpPRXhndXVwUUE4ZVNFcGQiLCJuIjoibG9jYWwiLCJpZCI6MX0=\n   # Save this key ^^^\n   ```\n\n1. Open your browser, navigate to http://localhost:3000\n\n   - Username and password are admin:admin\n   - You'll be prompted to update your password, so just keep using `admin` or hit Skip\n\n1. Go to [Jobs Usage](http://localhost:3000/d/U9Se3uZMz/jobs-usage?orgId=1) dashboard, you'll see that Prometheus is processing ~2800 DataSeries\n1. Get all the metrics that are used in your Grafana dasboards\n\n   ```bash\n   $ export GRAFANA_API_KEY=the-key-that-was-generated-in-the-deploy-locally-step\n   $ frigga gl -gurl http://localhost:3000 -gkey $GRAFANA_API_KEY\n\n   >> [LOG] Getting the list of words to ignore when scraping from Grafana\n   ...\n   >> [LOG] Found a total of 269 unique metrics to keep\n   # Generated .metrics.json in pwd\n   ```\n1. Check the number of data series **BEFORE** filtering with frigga\n   ```bash\n   $ frigga pg -u http://localhost:9090\n\n   # prometheus-get\n\n   >> [LOG] Total number of data-series: 1863\n   ```\n\n1. Apply the rules to `prometheus.yml`, keep the defaults\n\n   ```bash\n   $ frigga pa\n   \n   # prometheus-apply\n\n   Prom yaml path [docker-compose/prometheus.yml]:\n   Metrics json path [./.metrics.json]:\n   ...\n   >> [LOG] Done! Now reload docker-compose/prometheus.yml with 'docker exec $PROM_CONTAINER_NAME kill -HUP 1'\n   ```\n\n1. Reload `prometheus.yml` to Prometheus\n\n   ```bash\n   $  frigga pr -u http://localhost:9090\n\n   # prometheus-reload\n\n   >> [LOG] Successfully reloaded Prometheus - http://localhost:9090/-/reload\n   ```\n1. Check the number of data series **AFTER** filtering with frigga\n   ```bash\n   $ frigga pg -u http://localhost:9090\n\n   # prometheus-get\n\n   >> [LOG] Total number of data-series: 898\n   # Decreased from 1863 to 898,  decreased 51% !\n   ```\n\n1. Go to [Jobs Usage](http://localhost:3000/d/U9Se3uZMz/jobs-usage?orgId=1), you'll see that Prometheus is processing only ~898 DataSeries (previously ~1863)\n   - In case you don't see the change, don't forget to hit the refersh button\n1. Cleanup\n   ```bash\n   $ docker-compose -p frigga --file docker-compose/docker-compose.yml down\n   ```\n\n## Pros and Cons of this tool\n\n### Pros\n\n1. [Grafana-Cloud](https://grafana.com/products/cloud/) - As a Grafana Cloud customer, the main reason for writing this tool was lowering the costs. This goal was achieved by sending only the relevant DataSeries to Grafana Cloud\n1. Saves disk-space on the machine running Prometheus\n1. Improves PromQL performance by querying less metrics; significant only when processing high volumes\n\n### Cons\n\n1. After applying the rules in `prometheus.yml`, it makes the file less readable. Due to the fact it's not a file that you play with on a daily basis, it's okayish\n1. The memory usage of Prometheus increases slightly, around ~30MB, not significant, but worth mentioning\n1. If you intend to use more metrics, for example, you've added a new dashboard which uses more metrics, you'll need to do the same process again; `frigga gl` and `frigga pa`\n\n## References\n- [metric_relabel_configs](https://prometheus.io/docs/prometheus/latest/configuration/configuration/#metric_relabel_configs)\n- [Or in relabelling](https://www.robustperception.io/or-in-relabelling)\n- [relabel_configs vs metrics_relabel_configs](https://www.robustperception.io/relabel_configs-vs-metric_relabel_configs)\n\n\n## Contributing\n\nReport issues/questions/feature requests on the [Issues](https://github.com/unfor19/frigga/issues) section.\n\nPull requests are welcome! Ideally, create a feature branch and issue for every single change you make. These are the steps:\n\n1. Fork this repo\n1. Create your feature branch from master (`git checkout -b my-new-feature`)\n1. Install from source\n   ```bash\n    $ git clone https://github.com/${GITHUB_OWNER}/frigga.git && cd frigga\n    ...\n    $ pip install --upgrade pip\n    ...\n    $ python -m venv ./ENV\n    $ . ./ENV/bin/activate\n    ...\n    $ (ENV) pip install --editable .\n    ...\n    # Done! Now when you run 'frigga' it will get automatically updated when you modify the code\n   ```\n1. Add the code of your new feature\n1. Test - make sure `frigga grafana-list` and `frigga prometheus-apply` commands work\n1. Commit your remarkable changes (`git commit -am 'Added new feature'`)\n1. Push to the branch (`git push --set-up-stream origin my-new-feature`)\n1. Create a new Pull Request and tell us about your changes\n\n## Authors\n\nCreated and maintained by [Meir Gabay](https://github.com/unfor19)\n\n## License\n\nThis project is licensed under the MIT License - see the [LICENSE](https://github.com/unfor19/frigga/blob/master/LICENSE) file for details\n",
  "permissions": {
    "read": true,
    "write": false,
    "admin": false
  },
  "media_types": [
    "application/vnd.docker.container.image.v1+json"
  ],
  "content_types": [
    "image"
  ]
}