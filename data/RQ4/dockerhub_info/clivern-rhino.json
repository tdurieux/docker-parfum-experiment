{
  "user": "clivern",
  "name": "rhino",
  "namespace": "clivern",
  "repository_type": "image",
  "status": 1,
  "status_description": "active",
  "description": "",
  "is_private": false,
  "is_automated": false,
  "can_edit": false,
  "star_count": 0,
  "pull_count": 364,
  "last_updated": "2021-07-19T21:08:22.700633Z",
  "date_registered": "2020-03-01T20:18:32.436094Z",
  "collaborator_count": 0,
  "affiliation": null,
  "hub_user": "clivern",
  "has_starred": false,
  "full_description": "<p align=\"center\">\n    <img alt=\"Rhino Logo\" src=\"https://raw.githubusercontent.com/clivern/Rhino/master/assets/img/gopher.png?v=1.6.1\" width=\"150\" />\n    <h3 align=\"center\">Rhino</h3>\n    <p align=\"center\">HTTP Mocking & Debugging Service</p>\n    <p align=\"center\">\n        <a href=\"https://github.com/Clivern/Rhino/actions\"><img src=\"https://github.com/Clivern/Rhino/workflows/Build/badge.svg\"></a>\n        <a href=\"https://github.com/Clivern/Rhino/actions\"><img src=\"https://github.com/Clivern/Rhino/workflows/Release/badge.svg\"></a>\n        <a href=\"https://github.com/Clivern/Rhino/releases\"><img src=\"https://img.shields.io/badge/Version-1.6.1-red.svg\"></a>\n        <a href=\"https://goreportcard.com/report/github.com/Clivern/Rhino\"><img src=\"https://goreportcard.com/badge/github.com/clivern/Rhino?v=1.6.1\"></a>\n        <a href=\"https://hub.docker.com/r/clivern/rhino\"><img src=\"https://img.shields.io/badge/Docker-Latest-green\"></a>\n        <a href=\"https://github.com/Clivern/Rhino/blob/master/LICENSE\"><img src=\"https://img.shields.io/badge/LICENSE-MIT-orange.svg\"></a>\n    </p>\n</p>\n\nRhino is an HTTP Mocking & Debugging Service. It enables easy mocking of any HTTP web service for testing and debugging purposes. Also it can simulate high latencies and failures to make sure your services have the capability to withstand and recover from failures. It supports cross-origin resource sharing (CORS) so it can be used as a backend for single page applications.\n\n\n## Documentation\n\n### Usage\n\nGet [the latest binary.](https://github.com/Clivern/Rhino/releases)\n\n```zsh\n$ curl -sL https://github.com/Clivern/Rhino/releases/download/x.x.x/Rhino_x.x.x_OS_x86_64.tar.gz | tar xz\n```\n\nCreate the config file `config.prod.json`\n\n```json\n{\n    \"app\": {\n        \"mode\": \"prod or dev\",\n        \"port\": \"8080\",\n        \"domain\": \"http://127.0.0.1:8080\",\n        \"tls\": {\n            \"status\": \"off\",\n            \"pemPath\": \"/cert/server.pem\",\n            \"keyPath\": \"/cert/server.key\"\n        }\n    },\n    \"mock\": [\n        {\n            \"path\": \"/api/v2/service1/mock/:id\",\n            \"request\": {\n                \"method\": \"get\"\n            },\n            \"response\": {\n                \"statusCode\": 200,\n                \"headers\": [\n                    {\"key\": \"Content-Type\", \"value\": \"application/json\"}\n                ],\n                \"body\": \"{\\\"id\\\": \\\":id\\\"}\"\n            },\n            \"chaos\": {\n                \"latency\": \"0s\",\n                \"failRate\": \"0%\"\n            }\n        },\n        {\n            \"path\": \"/api/v2/service2/mock/:id\",\n            \"request\": {\n                \"method\": \"get\",\n                \"parameters\": {\n                    \"var_param\": \":var_param\",\n                    \"fixed_param\": 10\n                }\n            },\n            \"response\": {\n                \"statusCode\": 200,\n                \"headers\": [\n                    {\"key\": \"Content-Type\", \"value\": \"application/json\"}\n                ],\n                \"body\": \"@json:@config_dir/route.response.json\"\n            },\n            \"chaos\": {\n                \"latency\": \"0s\",\n                \"failRate\": \"0%\"\n            }\n        }\n    ],\n    \"debug\": [\n        {\n            \"path\": \"/api/v2/service/debug\",\n            \"chaos\": {\n                \"latency\": \"0s\",\n                \"failRate\": \"0%\"\n            }\n        }\n    ],\n    \"log\": {\n        \"level\": \"info\",\n        \"output\": \"stdout or /var/log/rhino.log\",\n        \"format\": \"text or json\"\n    }\n}\n```\n\nRun Rhino with that config file\n\n```zsh\n$ ./rhino serve -c /custom/path/config.prod.json\n```\n\nCheck the release.\n\n```zsh\n$ ./rhino version\n```\n\nTest it.\n\n```zsh\n$ curl http://127.0.0.1:8080/_health\n```\n\nYou can use fake data flags inside response body and rhino will auto generate them. Here is the full list of supported types:\n\n```bash\nAnyOf: @fake(:anyof[A||B||C||D])\nLatitude: @fake(:lat)\nLongitude: @fake(:long)\nCreditCardNumber: @fake(:cc_number)\nCreditCardType: @fake(:cc_type)\nEmail: @fake(:email)\nDomainName: @fake(:domain_name)\nIPV4: @fake(:ipv4)\nIPV6: @fake(:ipv6)\nPassword: @fake(:password)\nPhoneNumber: @fake(:phone_number)\nMacAddress: @fake(:mac_address)\nURL: @fake(:url)\nUserName: @fake(:username)\nTollFreeNumber: @fake(:toll_free_number)\nE164PhoneNumber: @fake(:e_164_phone_number)\nTitleMale: @fake(:title_male)\nTitleFemale: @fake(:title_female)\nFirstName: @fake(:first_name)\nFirstNameMale: @fake(:first_name_male)\nFirstNameFemale: @fake(:first_name_female)\nLastName: @fake(:last_name)\nName: @fake(:name)\nUnixTime: @fake(:unix_time)\nDate: @fake(:date)\nTime: @fake(:time)\nMonthName: @fake(:month_name)\nYear: @fake(:year)\nDayOfWeek: @fake(:day_of_week)\nDayOfMonth: @fake(:day_of_month)\nTimestamp: @fake(:timestamp)\nCentury: @fake(:century)\nTimeZone: @fake(:timezone)\nTimePeriod: @fake(:time_period)\nWord: @fake(:word)\nSentence: @fake(:sentence)\nParagraph: @fake(:paragraph)\nCurrency: @fake(:currency)\nAmount: @fake(:amount)\nAmountWithCurrency: @fake(:amount_with_currency)\nUUIDHypenated: @fake(:uuid_hyphenated)\nUUID: @fake(:uuid_digit)\n```\n\n\n### Docker\n\nClone and then run docker containers.\n\n```zsh\n# Simple setup\n$ git clone https://github.com/Clivern/Rhino.git\n$ cd Rhino/deployment/basic/docker-compose\n$ docker-compose up -d\n\n# In case you want to visualize incoming requests with grafana\n$ git clone https://github.com/Clivern/Rhino.git\n$ cd Rhino/deployment/advanced/docker-compose\n$ docker-compose up -d\n```\n\n\n## Versioning\n\nFor transparency into our release cycle and in striving to maintain backward compatibility, Rhino is maintained under the [Semantic Versioning guidelines](https://semver.org/) and release process is predictable and business-friendly.\n\nSee the [Releases section of our GitHub project](https://github.com/clivern/rhino/releases) for changelogs for each release version of Rhino. It contains summaries of the most noteworthy changes made in each release.\n\n\n## Bug tracker\n\nIf you have any suggestions, bug reports, or annoyances please report them to our issue tracker at https://github.com/clivern/rhino/issues\n\n\n## Security Issues\n\nIf you discover a security vulnerability within Rhino, please send an email to [hello@clivern.com](mailto:hello@clivern.com)\n\n\n## Contributing\n\nWe are an open source, community-driven project so please feel free to join us. see the [contributing guidelines](CONTRIBUTING.md) for more details.\n\n\n## License\n\nÂ© 2020, Clivern. Released under [MIT License](https://opensource.org/licenses/mit-license.php).\n\n**Rhino** is authored and maintained by [@clivern](http://github.com/clivern).\n",
  "permissions": {
    "read": true,
    "write": false,
    "admin": false
  },
  "media_types": [
    "application/vnd.docker.container.image.v1+json"
  ],
  "content_types": [
    "image"
  ]
}