{
  "user": "cscs181",
  "name": "qq-github-bot",
  "namespace": "cscs181",
  "repository_type": "image",
  "status": 1,
  "status_description": "active",
  "description": "GitHub Bot for QQ",
  "is_private": false,
  "is_automated": false,
  "can_edit": false,
  "star_count": 0,
  "pull_count": 160,
  "last_updated": "2022-12-21T12:22:53.873157Z",
  "date_registered": "2021-06-16T08:33:06.64415Z",
  "collaborator_count": 0,
  "affiliation": null,
  "hub_user": "yanyongyu",
  "has_starred": false,
  "full_description": "<!--\n * @Author         : yanyongyu\n * @Date           : 2020-09-10 17:11:45\n * @LastEditors    : yanyongyu\n * @LastEditTime   : 2022-12-19 13:03:07\n * @Description    : README\n * @GitHub         : https://github.com/yanyongyu\n-->\n\n# QQ-GitHub-Bot\n\n![Python Version](https://img.shields.io/badge/python-3.10+-blue.svg)\n![NoneBot Version](https://img.shields.io/badge/nonebot-2+-red.svg)\n\n![CQHTTP Version](https://img.shields.io/badge/CQHTTP%2011-Bot-black.svg?style=social)\n\nGitHub Bot for QQ\n\n## 简介\n\n在 QQ 内 **订阅**, **查看**, **处理** GitHub Issue and Pull Request 。\n\n## 功能简介\n\n主要功能有 (持续更新中)：\n\n|                   功能                   |                          描述                           |\n| :--------------------------------------: | :-----------------------------------------------------: |\n|           `/状态` 或 `/status`           |  获取当前机器人及所在服务器运行状态，支持分布式多节点   |\n|        `/install [check\\|revoke]`        | 安装 GitHub APP 集成（将用于 Issue/PR, WebHook 等管理） |\n|         `/auth [check\\|revoke]`          |               授权 APP 以进行用户快捷操作               |\n|           `/bind [owner/repo]`           |            群绑定指定仓库以进行仓库快捷操作             |\n|  `/subscribe owner/repo event[/action]`  |        订阅指定仓库的指定事件（支持多事件订阅）         |\n|   `owner/repo[#number]` 或 GitHub 链接   |            快捷查看仓库 Issue/PR, PR diff 等            |\n|            `/star`, `/unstar`            |                        快捷 star                        |\n|                 `/diff`                  |                      查看 PR diff                       |\n|       `/close [reason]`, `/reopen`       |                    关闭或重新开启 PR                    |\n|           `/approve [message]`           |                         批准 PR                         |\n| `/label [label ...]`, `/unlabel [label]` |                      添加删除标签                       |\n|                  sentry                  |                   日志监控，上报错误                    |\n|               health check               |           访问路由地址 `/health` 即可进行自检           |\n\n### 事件订阅\n\n支持的事件根据 GitHub APP 配置的 Webhook 事件列表而定，可以自行选择和更改，推荐选择的事件有：\n\n|      事件类型       |               事件描述                |\n| :-----------------: | :-----------------------------------: |\n|       Issues        | 任何开启、关闭、修改等 Issue 相关操作 |\n|    Issue Comment    |   创建、修改、删除 Issue/PR 的评论    |\n|    Pull Request     |  任何开启、关闭、修改等 PR 相关操作   |\n| Pull Request Review |          PR Review 相关操作           |\n|        Star         |           star、unstar 仓库           |\n|        Push         |          push commit 到仓库           |\n|       Release       |  创建、修改、发布等 Release 相关操作  |\n\n## 部署\n\n### Docker\n\n1. 部署要求\n\n   - Docker & Docker Compose\n\n     ```bash\n     curl -sSL https://get.docker.com/ | sh\n     ```\n\n   - 1+ CPU Core\n   - 1+ GB RAM\n   - 能够访问 GitHub API 的网络环境\n\n   对于内存大小的限制，可以通过修改 `docker-compose.yml` 中的 `deploy.resources.limits.memory` 来调整，由于采用了 playwright(chromium) 渲染图片，不限制内存可能会导致渲染大图时直接卡死服务器。\n\n2. 注册 GitHub App\n   配置 GitHub App：\n   1. callback URL 为 `http://<your-domain>/github/auth`\n   2. webhook URL 为 `http://<your-domain>/github/webhooks/<app_id>`，可在 app 创建完成后添加\n   3. 权限为 `Issues (Read and Write)`, `Pull requests (Read and Write)`, `Metadata (Read Only)`, `Content (Read Only)` 和 `Starring (Read and Write)`\n   4. Webhook 事件参考 [事件订阅](#事件订阅) 自行选择需要的事件\n   5. 取消勾选 `Expire user authorization tokens` 或在 app optional feature 中 `opt-out`\n   6. 勾选 `Request user authorization (OAuth) during installation`\n   7. 记录 `app_id`, `client_id`，生成并下载 `private_key`, `client_secret` 备用\n3. 下载 [`docker-compose.yml`](./docker-compose.yml) 以及 [`bot`](./bot) 目录至任意空目录\n4. 在 `docker-compose.yml` 同目录下创建 `.env` 并写入如下配置项：\n\n   ```dotenv\n   # 可选，参考 nonebot superuser 格式\n   SUPERUSERS=[\"机器人管理号\"]\n\n   # onebot\n   # 可选\n   ONEBOT_ACCESS_TOKEN=your_access_token\n   # 可选\n   ONEBOT_SECRET=your_secret\n   # 修改此处的 QQ 号\n   ONEBOT_API_ROOTS={\"你的QQ号\": \"http://go-cqhttp:15700/\"}\n\n   # 必填，postgres 数据库配置项\n   POSTGRES_USER=bot\n   POSTGRES_PASSWORD=postgres_password\n   POSTGRES_DB=bot\n\n   # 必填，redis 数据库配置项\n   REDIS_PASSWORD=redis_password\n\n   # 可选，Sentry DSN 网址\n   SENTRY_DSN=https://xxxxxxxx.sentry.io/123123\n\n   # Github App 配置\n   # 可选，图片主题，light/dark\n   GITHUB_THEME=light\n   # 必填，github app 配置\n   # webhook_secret 与 github app 配置中的 webhook secret 保持一致，如果没有设置则删除\n   GITHUB_APPS='\n   [\n     {\n       \"app_id\": \"\",\n       \"private_key\": [\n         \"-----BEGIN RSA PRIVATE KEY-----\",\n         \"~~ YOUR PRIVATE KEY HERE ~~\",\n         \"-----END RSA PRIVATE KEY-----\"\n       ],\n       \"client_id\": \"\",\n       \"client_secret\": \"\",\n       \"webhook_secret\": \"\"\n     }\n   ]\n   '\n   ```\n\n   > `docker-compose.yml` 中的配置视情况修改，**如无必要请勿修改！**\n\n5. 修改 `bot/config.yml` 配置文件，参考 [go-cqhttp](https://docs.go-cqhttp.org/guide/config.html#%E9%85%8D%E7%BD%AE%E4%BF%A1%E6%81%AF) 修改 `uin`, `password`, `access-token`, `secret` 配置项。如需修改连接配置，请保证与 `.env` 中的配置项一致。\n6. 启动\n\n   在目录下执行 `docker compose up -d` (旧版方式 `docker-compose up -d`) 即可。\n\n### Kubernetes\n\n~~待完善，可自行尝试使用 `k8s/bot/` 目录下的 helm chart~~\n\n## 开发\n\n使用 Codespaces (Dev Container) 一键配置开发环境 (Python、Redis、Postgres)：\n\n[![Open in GitHub Codespaces](https://github.com/codespaces/badge.svg)](https://github.com/codespaces/new?hide_repo_select=true&ref=master&repo=294357266)\n\n修改 `.env.dev` 文件中的部分配置项，然后执行 `python bot.py` 即可。\n\n如需连接到 Redis 或 Postgres 数据库调试，请确保 VSCode 已正确映射端口 (必要时可以重新映射 6379、5432 端口)，使用本地工具远程连接即可。\n",
  "permissions": {
    "read": true,
    "write": false,
    "admin": false
  },
  "media_types": [
    "application/vnd.docker.container.image.v1+json"
  ],
  "content_types": [
    "image"
  ]
}