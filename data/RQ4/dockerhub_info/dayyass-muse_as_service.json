{
  "user": "dayyass",
  "name": "muse_as_service",
  "namespace": "dayyass",
  "repository_type": "image",
  "status": 1,
  "status_description": "active",
  "description": "REST API for sentence tokenization and embedding using Multilingual Universal Sentence Encoder.",
  "is_private": false,
  "is_automated": false,
  "can_edit": false,
  "star_count": 1,
  "pull_count": 82,
  "last_updated": "2021-08-19T06:32:29.94814Z",
  "date_registered": "2021-06-13T14:12:34.637008Z",
  "collaborator_count": 0,
  "affiliation": null,
  "hub_user": "dayyass",
  "has_starred": false,
  "full_description": "# Quick reference\n* **Maintained by**: [Dani El-Ayyass](https://github.com/dayyass) <dayyass@yandex.ru>\n* **Where to get help**: [the Docker Community Forums](https://forums.docker.com/), [the Docker Community Slack](https://dockr.ly/slack), or [Stack Overflow](https://stackoverflow.com/search?tab=newest&q=docker)\n\n# Supported tags and respective `Dockerfile` links\n* [`1.1.2`, `latest`](https://github.com/dayyass/muse-as-service/blob/v1.1.2/Dockerfile)\n* [`1.1.1`](https://github.com/dayyass/muse-as-service/blob/v1.1.1/Dockerfile)\n* [`1.1.0`](https://github.com/dayyass/muse-as-service/blob/v1.1.0/Dockerfile)\n* [`1.0.0`](https://github.com/dayyass/muse-as-service/blob/v1.0.0/Dockerfile)\n* [`0.1.0`](https://github.com/dayyass/muse-as-service/blob/v0.1.0/Dockerfile)\n\n# Quick reference (cont.)\n* **Where to file issues**: https://github.com/dayyass/muse-as-service/issues\n* **Source of this description**: https://github.com/dayyass/muse-as-service#readme\n* **GitHub Repository**: https://github.com/dayyass/muse-as-service\n\n# Muse-as-Service\n[![tests](https://github.com/dayyass/muse-as-service/actions/workflows/tests.yml/badge.svg)](https://github.com/dayyass/muse-as-service/actions/workflows/tests.yml)\n[![linter](https://github.com/dayyass/muse-as-service/actions/workflows/linter.yml/badge.svg)](https://github.com/dayyass/muse-as-service/actions/workflows/linter.yml)\n[![codecov](https://codecov.io/gh/dayyass/muse-as-service/branch/main/graph/badge.svg?token=RRSTQY2R2Y)](https://codecov.io/gh/dayyass/muse-as-service)\n\n[![python 3.6](https://img.shields.io/badge/python-3.6-blue.svg)](https://github.com/dayyass/muse-as-service#requirements)\n[![release (latest by date)](https://img.shields.io/github/v/release/dayyass/muse-as-service)](https://github.com/dayyass/muse-as-service/releases/latest)\n[![license](https://img.shields.io/github/license/dayyass/muse-as-service?color=blue)](https://github.com/dayyass/muse-as-service/blob/main/LICENSE)\n\n[![pre-commit](https://img.shields.io/badge/pre--commit-enabled-black)](https://github.com/dayyass/muse-as-service/blob/main/.pre-commit-config.yaml)\n[![code style: black](https://img.shields.io/badge/code%20style-black-000000.svg)](https://github.com/psf/black)\n\n[![pypi version](https://img.shields.io/pypi/v/muse-as-service)](https://pypi.org/project/muse-as-service)\n[![pypi downloads](https://img.shields.io/pypi/dm/muse-as-service)](https://pypi.org/project/muse-as-service)\n\n## What is MUSE?\n**MUSE** stands for Multilingual Universal Sentence Encoder - multilingual extension (supports [16 languages](https://github.com/dayyass/muse-as-service#muse-supported-languages)) of Universal Sentence Encoder (USE).<br>\nMUSE model encodes sentences into embedding vectors of fixed size.\n\n- MUSE [paper](https://arxiv.org/abs/1907.04307)\n- USE [paper](https://arxiv.org/abs/1803.11175)\n\n## What is MUSE as Service?\nMUSE as Service is the **REST API** for sentence tokenization and embedding using MUSE model from [TensorFlow Hub](https://tfhub.dev/google/universal-sentence-encoder-multilingual/3).\n\nIt is written using **Flask** and **Gunicorn**.\n\n## Why I need it?\nMUSE model from [TensorFlow Hub](https://tfhub.dev/google/universal-sentence-encoder-multilingual/3) requires next packages to be installed:\n- tensorflow\n- tensorflow-hub\n- tensorflow-text\n\nThese packages take up more than **1GB** of memory. The model itself takes up **280MB** of memory.\n\nFor efficient memory usage when working with MUSE model on several projects (several virtual environments) or/and with teammates (several model copies on different computers) it is better to deploy one instance of the model in one virtual environment where all teammates have access to.\n\nThis is what **MUSE as Service** is made for! ❤️\n\n## Requirements\nPython >= 3.6\n\n## Installation\nTo install MUSE as Service run:\n```shell script\n# clone repo (https/ssh)\ngit clone https://github.com/dayyass/muse-as-service.git\n# git clone git@github.com:dayyass/muse-as-service.git\n\n# install dependencies (preferable in venv)\ncd muse-as-service\npython3 -m venv venv\nsource venv/bin/activate\npip install --upgrade pip && pip install -r requirements.txt\n```\n\nBefore using the service you need to:\n- download MUSE model executing the following command:<br>\n`\npython models/download_muse.py\n`\n\n## Launch the Service\nTo build a **docker image** with a service parametrized with [gunicorn.conf.py](https://github.com/dayyass/muse-as-service/blob/main/gunicorn.conf.py) file run:\n```shell script\ndocker build -t muse_as_service .\n```\n**NOTE**: instead of building a docker image, you can pull it from [Docker Hub](https://hub.docker.com/r/dayyass/muse_as_service).\n\nTo launch the service (either locally or on a server) use a **docker container**:\n```shell script\ndocker run -d -p {host_port}:{container_port} --name muse_as_service muse_as_service\n```\n**NOTE**: `container_port` should be equal to `port` in [gunicorn.conf.py](https://github.com/dayyass/muse-as-service/blob/main/gunicorn.conf.py) file.\n\nYou can also launch the service without docker, but it is preferable to launch the service inside the docker container:\n- **Gunicorn**: `gunicorn --config gunicorn.conf.py app:app` (parametrized with [gunicorn.conf.py](https://github.com/dayyass/muse-as-service/blob/main/gunicorn.conf.py) file)\n- **Flask**: `python app.py --host {host} --port {port}` (default `host 0.0.0.0` and `port 5000`)\n\nIt is also possible to launch the service using [**systemd**](https://en.wikipedia.org/wiki/Systemd).\n\n### GPU support\nMUSE as Service supports **GPU** inference. To launch the service with GPU support you need:\n- install [NVIDIA Container Toolkit](https://docs.nvidia.com/datacenter/cloud-native/container-toolkit/install-guide.html)\n- use `CUDA_VISIBLE_DEVICES` environment variable to specify GPU device if needed (e.g. `export CUDA_VISIBLE_DEVICES=0`)\n- launch the service with `docker run` command above (after `docker build`) with `--gpus all` parameter\n\n**NOTE**: since **TensorFlow2.0** `tensorflow` and `tensorflow-gpu` packages are merged.\n\n**NOTE**: depending on **CUDA** version installed you may need different `tensorflow` versions (default version `tensorflow==2.3.0` supports `CUDA 10.1`). See [table](https://www.tensorflow.org/install/source#gpu) with TF/CUDA compatibility to choose the right one and `pip install` it.\n\n## Usage\nSince the service is usually running on server, it is important to restrict access to the service.\n\nFor this reason, MUSE as Service uses **token-based authorization** with [JWT](https://jwt.io) for users in sqlite database [app.db](https://github.com/dayyass/muse-as-service/tree/main/src/muse_as_service/database/app.db).\n\nInitially database has only one user with:\n- **username**: \"admin\"\n- **password**: \"admin\"\n\nTo add new user with `username` and `password` run:\n```shell script\npython src/muse_as_service/database/add_user.py --username {username} --password {password}\n```\n**NOTE**: no passwords are stored in the database, only their hashes.\n\nTo remove the user with `username` run:\n```shell script\npython src/muse_as_service/database/remove_user.py --username {username}\n```\n\nMUSE as Service has the following endpoints:\n<pre>\n- /login         - POST request with `username` and `password` to get tokens (access and refresh)\n- /logout        - POST request to remove tokens (access and refresh)\n- /token/refresh - POST request to refresh access token (refresh token required)\n- /tokenize      - GET request for `sentence` tokenization (access token required)\n- /embed         - GET request for `sentence` embedding (access token required)\n</pre>\n\nYou can use python **requests** package to work with HTTP requests:\n```python3\nimport numpy as np\nimport requests\n\n# params\nip = \"localhost\"\nport = 5000\n\nsentences = [\"This is sentence example.\", \"This is yet another sentence example.\"]\n\n# start session\nsession = requests.Session()\n\n# login\nresponse = session.post(\n    url=f\"http://{ip}:{port}/login\",\n    json={\"username\": \"admin\", \"password\": \"admin\"},\n)\n\n# tokenizer\nresponse = session.get(\n    url=f\"http://{ip}:{port}/tokenize\",\n    params={\"sentence\": sentences},\n)\ntokenized_sentence = response.json()[\"tokens\"]\n\n# embedder\nresponse = session.get(\n    url=f\"http://{ip}:{port}/embed\",\n    params={\"sentence\": sentences},\n)\nembedding = np.array(response.json()[\"embedding\"])\n\n# logout\nresponse = session.post(\n    url=f\"http://{ip}:{port}/logout\",\n)\n\n# close session\nsession.close()\n\n# results\nprint(tokenized_sentence)  # [\n# [\"▁This\", \"▁is\", \"▁sentence\", \"▁example\", \".\"],\n# [\"▁This\", \"▁is\", \"▁yet\", \"▁another\", \"▁sentence\", \"▁example\", \".\"]\n# ]\nprint(embedding.shape)  # (2, 512)\n```\n\nHowever it is better to use built-in client **MUSEClient** for sentence tokenization and embedding, that wraps the functionality of the python **requests** package and provides user with a simpler interface.\n\nTo install the built-in client run:<br>\n`\npip install muse-as-service\n`\n\nInstead of using endpoints, listed above, directly, **MUSEClient** provides the following methods to work with:\n<pre>\n- login    - method to login with `username` and `password`\n- logout   - method to logout (login required)\n- tokenize - method for `sentence` tokenization (login required)\n- embed    - method for `sentence` embedding (login required)\n</pre>\n\nUsage example:\n```python3\nfrom muse_as_service import MUSEClient\n\n# params\nip = \"localhost\"\nport = 5000\n\nsentences = [\"This is sentence example.\", \"This is yet another sentence example.\"]\n\n# init client\nclient = MUSEClient(ip=ip, port=port)\n\n# login\nclient.login(username=\"admin\", password=\"admin\")\n\n# tokenizer\ntokenized_sentence = client.tokenize(sentences)\n\n# embedder\nembedding = client.embed(sentences)\n\n# logout\nclient.logout()\n\n# results\nprint(tokenized_sentence)  # [\n# [\"▁This\", \"▁is\", \"▁sentence\", \"▁example\", \".\"],\n# [\"▁This\", \"▁is\", \"▁yet\", \"▁another\", \"▁sentence\", \"▁example\", \".\"]\n# ]\nprint(embedding.shape)  # (2, 512)\n```\n\n## Tests\nTo use [**pre-commit**](https://pre-commit.com) hooks run:<br>\n`\npre-commit install\n`\n\nBefore running tests and code coverage, you need to:\n- run [app.py](https://github.com/dayyass/muse-as-service/blob/main/app.py) in background:<br>\n`\npython app.py &\n`\n\nTo launch [**tests**](https://github.com/dayyass/muse-as-service/tree/main/tests) run:<br>\n`\npython -m unittest discover\n`\n\nTo measure [**code coverage**](https://coverage.readthedocs.io) run:<br>\n`\ncoverage run -m unittest discover && coverage report -m\n`\n\n**NOTE**: since we launched Flask application in background, we need to stop it after running tests and code coverage with the following command:\n```shell script\nkill $(ps aux | grep '[a]pp.py' | awk '{print $2}')\n```\n\n## MUSE supported languages\nMUSE model supports next languages:\n- Arabic\n- Chinese-simplified\n- Chinese-traditional\n- Dutch\n- English\n- French\n- German\n- Italian\n- Japanese\n- Korean\n- Polish\n- Portuguese\n- Russian\n- Spanish\n- Thai\n- Turkish\n\n## Citation\nIf you use **muse-as-service** in a scientific publication, we would appreciate references to the following BibTex entry:\n```bibtex\n@misc{dayyass2021muse,\n    author       = {El-Ayyass, Dani},\n    title        = {Multilingual Universal Sentence Encoder REST API},\n    howpublished = {\\url{https://github.com/dayyass/muse-as-service}},\n    year         = {2021}\n}\n```",
  "permissions": {
    "read": true,
    "write": false,
    "admin": false
  },
  "media_types": [
    "application/vnd.docker.container.image.v1+json"
  ],
  "content_types": [
    "image"
  ]
}