{
  "user": "mrvautin",
  "name": "expresscart",
  "namespace": "mrvautin",
  "repository_type": null,
  "status": 0,
  "status_description": "initialized",
  "description": "A shopping cart built in Node.js (Express, MongoDB) with Stripe, PayPal and Authorize.net payments.",
  "is_private": false,
  "is_automated": false,
  "can_edit": false,
  "star_count": 1,
  "pull_count": 0,
  "last_updated": "2018-02-05T18:04:08.935729Z",
  "date_registered": "2018-02-05T18:04:08.935729Z",
  "collaborator_count": 0,
  "affiliation": null,
  "hub_user": "mrvautin",
  "has_starred": false,
  "full_description": "# expressCart\n\n![expressCart](https://raw.githubusercontent.com/mrvautin/expressCart/master/public/images/logo.png)\n\n`expressCart` is a fully functional shopping cart built in Node.js (Express, MongoDB) with Stripe, PayPal and Authorize.net payments.\n\n[![Github stars](https://img.shields.io/github/stars/mrvautin/expressCart.svg?style=social&label=Star)](https://github.com/mrvautin/expressCart)\n[![Build Status](https://travis-ci.org/mrvautin/expressCart.svg?branch=master)](https://travis-ci.org/mrvautin/expressCart)\n\n## Installation\n\n1. Create a folder to hold your installation: `mkdir expressCart`\n2. FTP/Copy the contents of the zip to your newly created folder\n3. Enter folder: `cd expressCart`\n4. Install dependencies: `npm install`\n5. Start application: `npm start --production`\n6. Visit [http://127.0.0.1:1111](http://127.0.0.1:1111) in your browser\n\nKeeping expressCart running after closing the terminal can be done in a few ways but we recommend using the `PM2` package. To set this up:\n\n1. Install PM2: `npm install pm2 -g`\n2. Add expressCart to PM2: `NODE_ENV=production pm2 start app.js --name \"expressCart\"`\n3. Check PM2 has our app: `pm2 list`\n4. Save the PM2 config: `pm2 save`\n5. To start/stop: `pm2 start expressCart` / `pm2 stop expressCart`\n\n> Note: Node.js version 7.x or greater is needed.\n\n### Docker\n\nThe easiest way to get up and running is using Docker. Once the Docker CLI is installed from [https://www.docker.com/get-docker](https://www.docker.com/get-docker).\n\n1. Enter the root of the expressCart application\n2. Change `/config/settings.json` - `\"databaseConnectionString\": \"mongodb://mongodb:27017/expresscart\"`\n3. Run: `docker-compose up --build`\n4. Visit [http://127.0.0.1:1111](http://127.0.0.1:1111) in your browser\n\n### Deploy on Heroku\n\n[![Deploy](https://www.herokucdn.com/deploy/button.svg)](https://heroku.com/deploy?template=https://github.com/mrvautin/expressCart)\n\n> Note: When deploying to Heroku you will need to configure your external MongoDB either on your own server or a hosted service on mLab, AWS etc.\n\n## Admin\n\nVisit: [http://127.0.0.1:1111/admin](http://127.0.0.1:1111/admin)\n\nA new user form will be shown where a user can be created.\n\n### Styling\n\nAdding your own custom style is done by accessing the `Admin` panel then selecting `General settings`.\n\n#### Demo images\n\nSample homepage\n![Sample homepage](https://mrvautin.com/content/images/2018/01/expressCart-demo.jpg)\n\nAdmin page\n![Admin page](https://mrvautin.com/content/images/2018/01/admin-settings.png)\n\n##### CSS\n\nYou can add your own custom CSS into the `Custom CSS` box. This will be minified and added to each page.\n\n##### Footer\n\nYou can add your own custom HTML footer which may have contact details, social media links etc into the `Footer HTML` box. This will be added to bottom of each page.\n\n### Products\n\nAdding of new products is done via `/admin/product/new`.\n\n##### Product price\n\nSet this value to a full 2 decimal value with no commas or currency symbols.\n\n##### Permalink\n\nA permalink is a nice link to your product which is normally shown in search engine rankings. By default, a no Permalink value is set when adding a product one will be generated using the Product title with spaces replaced by dashes.\n\n##### Options\n\nYou may want to set product options such as `Size`, `Color` etc.\n\nBelow is an explanation of the fields and what they do\n\n`Name` = Something easy to recognize to administer\n`Label` = This will be shown to the customer (eg: `Select size`, `Select color` etc)\n`Type` = You can set the option to a `Select` (drop down menu), `Radio` (An optional button) or a `Checkbox` for an on/off or true/false option\n`Options` = Available options are added using a comma separated list. For size options you may set: `Small,Medium,Large` or `S,M,L`\n\nNote: An `Options` value is not required when `Type` is set to `Checkbox`.\n\n##### Product tag words\n\nTags are used when indexing the products for search. It's advised to set tags (keywords) so that customers can easily find the products they are searching for.\n\n## Database\n\n`expressCart` uses a MongoDB for storing all the data. Setting of the database connection string is done through the `/config/settings.json` file. There are two properties relating to the database connection:\n\nExample MongoDB configuration:\n\n```\n{\n    \"databaseConnectionString\": \"mongodb://localhost:27017/expresscart\"\n}\n```\n\nNote: The `databaseConnectionString` property requires a full connection string. You may need to add authentication parameters to your connection string.\n\n>  For a good and reasonably priced MongoDB Host, we recommend [mLab](https://mlab.com).\n\n## Configuration\n\nAll settings are managed from the admin panel ([http://127.0.0.1:1111/admin](http://127.0.0.1:1111/admin)) except the Payment gateway and database settings.\n\n##### Cart name and Cart description\n\nThese values are used for search engine optimization (SEO) purposes. They will be used as the title and description when your website is listed in Google and other search engines.\n\nThe `Cart name` is also used if there is no logo set.\n\n##### Cart image/logo\n\nGenerally you would place your logo into the `/uploads` folder. You would then add the value `/uploads/mylogo.png` to the `Cart image/logo` setting value.\n\n##### Cart URL\n\nThis value is vital for your cart to work. Set this value to your domain name/URL which customers will access your website. This value is used in returning from Paypal\npayments and the sitemap for search engine indexing.\n\n##### Cart Email\n\nThis email is used for any email receipts which are sent by your website.\n\n##### Free shipping threshold\n\nexpressCart allows for the addition of a free shipping threshold. The cart will remove the shipping costs once the order has exceeded the `Free shipping threshold`\nvalue. If the value of the cart is beneath the `Free shipping threshold`, the cart will add the `Flat shipping rate` to the total amount.\n\n##### Payment Gateway\n\nThis determines which payment gateway to use. You will also need to configure your payment gateway configuration file here: `/config/<gateway_name>.json`\n\n##### Currency symbol\n\nSet this value to your chosen currency symbol. Eg: $, £, €.\n\n##### Themes\n\nThemes are a set of handlebars views and a stylesheet file. See `Cloth` theme as example.\n\nThemes are loaded from `/public/themes/`.\n\nIt would be great to have some themes contributed back for others to use.\n\n##### Number of Products per page\n\nYou can set the number of products per page by changing the `Products per page` value to a whole number of your choice. You may want to ensure\nthe number of products per page matches up with the `Products per row` value. Eg: if you have the `Products per row` value set to 3, you may want\nto ensure the `Products per page` is a multiple of 3 for the best look.\n\n##### Number of Products per row\n\nThis is the number of products displayed per row on your website. You can select anywhere up to 4 `Products per row`.\n\n##### Menu enabled\n\nEnables/disable the menu setup in `/admin/settings/menu`.\n\n##### Menu header\n\nThis is the text which will be displayed at the top of your menu.\n\n##### Menu position\n\nYou can set position where your menu will be displayed. Setting the value to `side` will position the menu to the left of your products, setting the value to `top`\nwill create a 'breadcrumb' menu at the top of the page\n\n##### Paypal (Payments)\n\nThe Paypal config file is located: `/config/paypal.json`. A example Paypal settings file is provided:\n\n```\n{\n    \"mode\": \"live\", // sandbox or live\n    \"client_id\": \"this_is_not_real\",\n    \"client_secret\": \"this_is_not_real\",\n    \"paypalCartDescription\": \"expressCart\", // Shows as the Paypal description\n    \"paypalCurrency\": \"USD\" // The Paypal currency to charge in\n}\n```\nNote: The `client_id` and `client_secret` is obtained from your Paypal account.\n\n##### Stripe (Payments)\n\nThe Stripe config file is located: `/config/stripe.json`. A example Stripe settings file is provided:\n\n```\n{\n    \"secretKey\": \"sk_test_this_is_not_real\",\n    \"publicKey\": \"pk_test_this_is_not_real\",\n    \"stripeCurrency\": \"usd\", The Stripe currency to charge in\n    \"stripeDescription\": \"expressCart payment\", // Shows as the Stripe description\n    \"stripeLogoURL\": \"http://localhost:1111/images/stripelogo.png\" // URL to the logo to display on Stripe form\n}\n```\n\nNote: The `secretKey` and `publicKey` is obtained from your Stripe account dashboard.\n\n##### Authorize.net (Payments)\n\nThe Authorize.net config file is located: `/config/authorizenet.json`. A example Authorize.net settings file is provided:\n\n```\n{\n    \"loginId\": \"loginId\",\n    \"transactionKey\": \"transactionKey\",\n    \"clientKey\": \"clientKey\",\n    \"mode\": \"test\"\n}\n```\n\nNote: The credentials are obtained from your Authorize.net account dashboard.\n\n## Email settings\n\nYou will need to configure your SMTP details for expressCart to send email receipts to your customers.\n\nYou will need to consult your email provider for the relevant details.\n\n##### Gmail settings\n\n- `Email SMTP Host` = smtp.gmail.com\n- `Email SMTP Port` = 465\n- `Email SMTP secure` = True/Checked\n- `Email SMTP Username` = example@gmail.com\n- `Email SMTP Password` = yourpassword (you may need to setup an application specific password for this to work)\n\n##### Zoho settings\n\n- `Email SMTP Host` = smtp.zoho.com\n- `Email SMTP Port` = 465\n- `Email SMTP secure` = True/Checked\n- `Email SMTP Username` = example@zoho.com\n- `Email SMTP Password` = yourpassword\n\n##### Outlook settings\n\n- `Email SMTP Host` = smtp-mail.outlook.com\n- `Email SMTP Port` = 587\n- `Email SMTP secure` = False/Unchecked\n- `Email SMTP Username` = example@outlook.com\n- `Email SMTP Password` = yourpassword\n\nYou can use the `Send test email` button to ensure your email settings are correct.\n\n## Menu\n\nAlthough `expressCart` is a search based shopping cart, you can also group your products into categories using tags. You can then setup menu Items to \"filter\" based on\nkeywords (tags) to make it easier for your customers.\n\nSetting of menu items is done via `/admin/settings/menu`.\n\nTo add a new menu item to filter products, you will set the menu text using the `Menu` field and setting the keyword to filter is using the `link` field.\n\nTo add a new menu item to link to a static page, you will set the menu text using the `Menu` field and set the static page URL using the `link` field. Eg:\nAn `About` page would be set. Menu = 'About Us', Link = 'about`\n\nYou can re-order menu items by clicking and dragging the arrows icon and placing the menu item in desired position.\n\n## Static pages\n\nYou may want to create a static page to show contact details, about us, shipping information etc.\n\nNew static pages are setup via `/admin/settings/pages`.\n\n## TODO\n\n- Add some tests...\n- Separate API and frontend\n- Modernize the frontend\n\n## Contributing\n\nI'm looking for contributors of any kind. I'm working on turning the admin panel into something more modern and using Vue.js. The frontend part of the website will always be a normal webapp with no SPA frameworks as I believe eCommerce apps should have SEO as top priority.\n\nContributing payment providers and themes would be much appreciated. Payment providers are added by simply adding the payment provider file to `/routes/payments/providerName.js`, then adding the route to the `app.js` file by adding `const providerName = require('./routes/payments/{providerName}');` and mounting the route `app.use('/providerName', providerName);`.\n\nIf you see current code which could be enhanced (note: parts of the code is quite old but new to Github) you are welcome to submit a PR.\n",
  "permissions": {
    "read": true,
    "write": false,
    "admin": false
  },
  "media_types": [],
  "content_types": []
}