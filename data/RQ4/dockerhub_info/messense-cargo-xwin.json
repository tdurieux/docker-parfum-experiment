{
  "user": "messense",
  "name": "cargo-xwin",
  "namespace": "messense",
  "repository_type": "image",
  "status": 1,
  "status_description": "active",
  "description": "",
  "is_private": false,
  "is_automated": false,
  "can_edit": false,
  "star_count": 0,
  "pull_count": 208,
  "last_updated": "2022-12-19T14:45:18.706199Z",
  "date_registered": "2022-04-20T04:17:50.703142Z",
  "collaborator_count": 0,
  "affiliation": null,
  "hub_user": "messense",
  "has_starred": false,
  "full_description": "# cargo-xwin\n\n_formerly cargo-xwinbuild_\n\n[![CI](https://github.com/rust-cross/cargo-xwin/workflows/CI/badge.svg)](https://github.com/rust-cross/cargo-xwin/actions?query=workflow%3ACI)\n[![Crates.io](https://img.shields.io/crates/v/cargo-xwin.svg)](https://crates.io/crates/cargo-xwin)\n[![docs.rs](https://docs.rs/cargo-xwin/badge.svg)](https://docs.rs/cargo-xwin/)\n[![PyPI](https://img.shields.io/pypi/v/cargo-xwin.svg)](https://pypi.org/project/cargo-xwin)\n[![Docker Image](https://img.shields.io/docker/pulls/messense/cargo-xwin.svg?maxAge=2592000)](https://hub.docker.com/r/messense/cargo-xwin/)\n\n> ðŸš€ Help me to become a full-time open-source developer by [sponsoring me on GitHub](https://github.com/sponsors/messense)\n\nCross compile Cargo project to Windows msvc target with ease.\n\n**By using this software you are consented to accept the license at [https://go.microsoft.com/fwlink/?LinkId=2086102](https://go.microsoft.com/fwlink/?LinkId=2086102)**\n\n## Prerequisite\n\n1. For pure Rust project, no prerequisites needed.\n2. For C/C++ dependencies, install [clang](https://clang.llvm.org/) (On macOS run `brew install llvm` and you're good to go).\n3. For assembly dependencies, install `llvm-tools-preview` component via `rustup component add llvm-tools-preview` or install [llvm](https://llvm.org).\n\n## Installation\n\n```bash\ncargo install cargo-xwin\n```\n\nYou can also install it using pip:\n\n```bash\npip install cargo-xwin\n```\n\nWe also provide a [Docker image](https://hub.docker.com/r/messense/cargo-xwin) which has wine pre-installed in addition to cargo-xwin and Rust,\nfor example to build for x86_64 Windows:\n\n```bash\ndocker run --rm -it -v $(pwd):/io -w /io messense/cargo-xwin \\\n  cargo xwin build --release --target x86_64-pc-windows-msvc\n```\n\n## Usage\n\n1. Install Rust Windows msvc target via rustup, for example, `rustup target add x86_64-pc-windows-msvc`\n2. Run `cargo xwin build`, for example, `cargo xwin build --target x86_64-pc-windows-msvc`\n\n### Run tests with wine\n\nWith wine installed, you can run tests with the `cargo xwin test` command,\nfor example, `cargo xwin test --target x86_64-pc-windows-msvc`\n\n### Customization\n\nThe Microsoft CRT and Windows SDK can be customized using the following environment variables or CLI options.\n\n| Environment Variable | CLI option         | Description                                                                                                        |\n|----------------------|--------------------|--------------------------------------------------------------------------------------------------------------------|\n| `XWIN_ARCH`          | `--xwin-arch`      | The architectures to include, defaults to `x86_64,aarch64`, possible values: x86, x86_64, aarch, aarch64           |\n| `XWIN_VARIANT`       | `--xwin-variant`   | The variants to include, defaults to `desktop`, possible values: desktop, onecore, spectre                         |\n| `XWIN_VERSION`       | `--xwin-version`   | The version to retrieve, defaults to 16, can either be a major version of 15 or 16, or a `<major>.<minor>` version |\n| `XWIN_CACHE_DIR`     | `--xwin-cache-dir` | xwin cache directory to put CRT and SDK files                                                                      |\n\n### CMake Support\n\nSome Rust crates use the [cmake](https://github.com/alexcrichton/cmake-rs) crate to build C/C++ dependencies,\ncargo-xwin will generate a [CMake toolchain](https://cmake.org/cmake/help/latest/manual/cmake-toolchains.7.html) file\nautomatically to make cross compilation work out of the box.\n\n**[ninja](https://ninja-build.org/) is required** to enable CMake support.\n\n## License\n\nThis work is released under the MIT license. A copy of the license is provided\nin the [LICENSE](./LICENSE) file.\n",
  "permissions": {
    "read": true,
    "write": false,
    "admin": false
  },
  "media_types": [
    "application/vnd.docker.distribution.manifest.list.v2+json"
  ],
  "content_types": [
    "image"
  ]
}