{
  "user": "cofacts",
  "name": "rumors-site",
  "namespace": "cofacts",
  "repository_type": "image",
  "status": 1,
  "status_description": "active",
  "description": "",
  "is_private": false,
  "is_automated": false,
  "can_edit": false,
  "star_count": 0,
  "pull_count": 2344,
  "last_updated": "2022-11-18T11:28:44.210235Z",
  "date_registered": "2019-10-28T16:05:28.397489Z",
  "collaborator_count": 0,
  "affiliation": null,
  "hub_user": "cofacts",
  "has_starred": false,
  "full_description": "# rumors-site\n\n[![Build Status](https://travis-ci.org/cofacts/rumors-site.svg?branch=master)](https://travis-ci.org/cofacts/rumors-site) [![Coverage Status](https://coveralls.io/repos/github/cofacts/rumors-site/badge.svg?branch=master)](https://coveralls.io/github/cofacts/rumors-site?branch=master)\n\nRumors list / creation UI, with server-side rendering.\n\n## Configuration\n\nFor development, copy `.env.sample` to `.env` and make necessary changes.\n\nFor production via [rumors-deploy](http://github.com/cofacts/rumors-deploy), do setups in `docker-compose.yml`.\n\n## Development\n\nThis project uses NodeJS 12+.\n\n``` bash\n$ npm install\n$ npm run dev # Then visit http://localhost:3000\n\n# Before you pull request, please lint your code first\n$ npm run lint\n# fix eslint\n$ npm run lint:fix\n# run test\n$ npm t\n```\n### styled-jsx syntax highlighting\n\nSee: https://github.com/zeit/styled-jsx#syntax-highlighting\n\n## Try built image on local\n\nBuild docker image.\n\n``` bash\n# build\n$ IMAGE_NAME=rumors-site-test hooks/build\n```\n\nThis will build both `$IMAGE_NAME-en` and `$IMAGE_NAME-tw` image.\n\nRun the docker image on local machine, then visit `http://localhost:3000`.\n\n``` bash\n# English version:\n$ docker run --rm --env-file .env -p 3000:3000 rumors-site-test-en\n\n# zh_TW version:\n$ docker run --rm --env-file .env -p 3000:3000 rumors-site-test-tw\n```\n\nOn [docker hub](https://hub.docker.com/r/cofacts/rumors-site), `hooks/build` is automatically executed on `dev` and `master` branch.\n\n### Storybook\nWe use storybook to demonstrate components.\n```bash\n# run storybook localserver on port 6006\n$ npm run storybook\n```\nwe also use storyshot to do snapshot test with stories, make sure to run:\n```\n$ npm test -- -u\n```\nbefore pushing to update stories snapshots.\nStorybook will be available under /storybook/index.html after build.\n\n## Analytics\n\nThis project supports Google Tag Manager. You can prepare the following setup in `.env` file:\n- `PUBLIC_GTM_ID`: Google Tag Manager Container ID (`GTM-XXXXXXX`)\n- `PUBLIC_GA_TRACKING_ID`: Google analytics trakcing ID (`UA-XXXXXXXX-X`). `rumors-site` will *not*\n  load Google analytics itself; instead, it will push `GA_TRACKING_ID` to `dataLayer`, and it is your\n  responsibility to pick it up as a Data Layer Variable and setup Google Analytics in Google Tag Manager.\n\nThe application will fire the following custom events:\n\n- `routeChangeStart` - when next-router starts route change\n- `routeChangeComplete` - when next-router finish route change\n- `dataLoaded` - when article / reply is loaded in article & reply page\n\nAlso, it will push the following custom variable to `dataLayer`;\n\n- `GA_TRACKING_ID` - see `PUBLIC_GA_TRACKING_ID`\n- `CURRENT_USER` - Current user object, set by `useCurrentUser`.\n\nLastly, in Google Tag Manager we use `data-ga` property to track clicks.\nIf user clicks a decendant of an React element with `data-ga` property,\na click event will be sent to Google analytics with the written `data-ga`.\n(It doesn't even need to be rendered, we [setup the Google Tag Manager](https://github.com/cofacts/rumors-site/pull/254) to read private React instance)\n\nAlso, if a component has its `displayName` set,\na click event with that `displayName` is also sent to Google Analytics when any of its decendant is clicked.\n\n## Design and Mockups\n\n* [真的假的 hackfoldr](http://beta.hackfoldr.org/rumors)\n* [網站 UI flow](https://i.imgur.com/lxas2Ic.jpg)\n\n\n## Translation\n\nWe use [ttag](https://ttag.js.org/) to support build-time i18n for the SSR website. During deploy,\nwe build one Docker image for each locale.\n\nPlease refer to ttag documentation for [annotating strings to translate](https://ttag.js.org/docs/quickstart.html).\n\nTo extract annotated strings to translation files, use:\n\n```\n$ npm run i18n:extract\n```\n\n### Translation files\n\nThe translation files are located under `i18n/`, in [Gettext PO format](https://www.gnu.org/software/gettext/manual/html_node/PO-Files.html).\n\n- `en_US.po`: Since the language used in code is already English, this empty translation file exists to simplify settings.\n- `zh_TW.po`: Traditional Chinese translation.\n- `ja.po`: Japanese translation.\n\n### Supporting other languages\n\nYou can replace this with [any language](https://www.gnu.org/software/gettext/manual/html_node/Locale-Names.html) you want to support, by leveraging Gettext [`msginit` command](https://www.gnu.org/software/gettext/manual/html_node/msginit-Invocation.html).\n\nYou will need to change the following to reflect the locale change:\n\n- `i18n:extract` script in `package.json`\n- `i18n:validate` script in `package.json`\n- `hooks/build` script & `hooks/push` script, with correct LOCALE setup and image tags\n\n### Building in different languages\n\nBy default, the chatbot will be built under `en_US` locale.\n\nDuring development, changing `LOCALE` in `.env` allows you to spin up dev server under a specific locale.\nPlease set `LOCALE` to one of `en_US`, `zh_TW` or any other language code that exists under `i18n/` directory.\n\nWhen building using Docker, `LOCALE` can be provided via build args. See `hooks/build` for the command to use.\n\n## Legal\n\n`LICENSE` defines the license agreement for the source code in this repository.\n\n`LEGAL.md` is the user agreement for Cofacts website users.\n\n",
  "permissions": {
    "read": true,
    "write": false,
    "admin": false
  },
  "media_types": [
    "application/vnd.docker.container.image.v1+json"
  ],
  "content_types": [
    "image"
  ]
}