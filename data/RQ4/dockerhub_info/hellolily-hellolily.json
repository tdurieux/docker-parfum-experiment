{
  "user": "hellolily",
  "name": "hellolily",
  "namespace": "hellolily",
  "repository_type": "image",
  "status": 1,
  "status_description": "active",
  "description": "Lily is an open source CRM project built on top of Django, AngularJS and Elasticsearch.",
  "is_private": false,
  "is_automated": true,
  "can_edit": false,
  "star_count": 0,
  "pull_count": 1959,
  "last_updated": "2021-07-19T21:27:42.626067Z",
  "date_registered": "2018-11-19T10:16:33.789355Z",
  "collaborator_count": 0,
  "affiliation": null,
  "hub_user": "hellolily",
  "has_starred": false,
  "full_description": "[![Build Status](https://travis-ci.org/HelloLily/hellolily.svg?branch=develop)](https://travis-ci.org/HelloLily/hellolily)\n[![Code Climate](https://codeclimate.com/github/HelloLily/hellolily/badges/gpa.svg)](https://codeclimate.com/github/HelloLily/hellolily)\n[![Test Coverage](https://codeclimate.com/github/HelloLily/hellolily/badges/coverage.svg)](https://codeclimate.com/github/HelloLily/hellolily/coverage)\n\n# Lily\n\nLily is an open source CRM project built on top of Django, AngularJS and\nElasticsearch.\n\n## Status\n\nActive/Maintained\n\n## Usage\n\nCheck out the [Sphinx docs](http://hellolily.readthedocs.org/en/latest/)\nfor detailed information\n\n### Requirements\n\n* You have git installed\n* You have [Docker](https://www.docker.com/) and [docker-compose](https://docs.docker.com/compose/) installed\n* You have [NodeJS](https://nodejs.org/en/), npm (included with NodeJS) and [gulp](http://gulpjs.com/) installed\n\n### Installation & running\n\n1. Checkout the Lily project and install gulp dependencies.\n\n```bash\ngit clone git@github.com:HelloLily/hellolily.git\ncd hellolily\nnpm install\n```\n\n2. Build the Docker image.\n\nTo retreive images from DockerHub (uploaded by TravisCI) use:\n\n```bash\ndocker-compose pull\n```\n\nTo build your own images locally you can use\n\n```bash\ndocker-compose -f docker-compose.yml -f docker-compose.new-build.yml build\n```\n\n> This command needs to run every time the Dockerfile, requirements or patches are adjusted. Good practice would be to run it every time the git repo is updated. If nothing changed, the command will complete almost instantly.\n\n3. Do a first time migration of the models.\n\n```bash\ndocker-compose run web python manage.py migrate\n```\n\n4. Create a search index for ElasticSearch.\n\n```bash\ndocker-compose run web python manage.py index\n```\n\n5. Populate the database with some testdata.\n\n```bash\ndocker-compose run web python manage.py testdata\n```\n\n### Running\n\nRun the Django development server along with dependent containers.\n\n```bash\ndocker-compose run --service-ports web\n```\n\nYou can then log in using the credentials creating in step 5 of the installation process.\n\n## Contributing\n\nSee the [CONTRIBUTING.md](CONTRIBUTING.md) file on how to contribute to this project.\n\n## Contributors\n\nSee the [CONTRIBUTORS.md](CONTRIBUTORS.md) file for a list of contributors to the project.\n\n## Get in touch with a developer\n\nIf you want to report an issue see the [CONTRIBUTING.md](CONTRIBUTING.md) file for more info.\n\nWe will be happy to answer your other questions at opensource@wearespindle.com.\n\n## License\n\nLily is made available under the `GNU General Public License v3.0` license. See the [LICENSE](LICENSE) file for more info.\n",
  "permissions": {
    "read": true,
    "write": false,
    "admin": false
  },
  "media_types": [
    "application/vnd.docker.container.image.v1+json"
  ],
  "content_types": [
    "image"
  ]
}