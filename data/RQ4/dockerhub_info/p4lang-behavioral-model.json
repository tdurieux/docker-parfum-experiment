{
  "user": "p4lang",
  "name": "behavioral-model",
  "namespace": "p4lang",
  "repository_type": "image",
  "status": 1,
  "status_description": "active",
  "description": "Behavioral Model",
  "is_private": false,
  "is_automated": true,
  "can_edit": false,
  "star_count": 6,
  "pull_count": 68291,
  "last_updated": "2023-01-06T11:39:38.712201Z",
  "date_registered": "2017-01-28T02:05:48.286533Z",
  "collaborator_count": 0,
  "affiliation": null,
  "hub_user": "p4lang",
  "has_starred": false,
  "full_description": "# BEHAVIORAL MODEL (bmv2)\n\n[![Build Status](https://travis-ci.org/p4lang/behavioral-model.svg?branch=master)](https://travis-ci.org/p4lang/behavioral-model)\n\nThis is the second version of the reference P4 software switch, nicknamed bmv2\n(for behavioral model version 2). The software switch is written in C++11. It\ntakes as input a JSON file generated from your P4 program by a [P4\ncompiler](https://github.com/p4lang/p4c) and interprets it to implement the\npacket-processing behavior specified by that P4 program.\n\nThis repository contains code for several variations of the behavioral\nmodel, e.g. `simple_switch`, `simple_switch_grpc`, `psa_switch`, etc.\nSee [here](targets/README.md) for more details on the differences\nbetween these.\n\n**bmv2 is not meant to be a production-grade software switch**. It is meant to\nbe used as a tool for developing, testing and debugging P4 data planes and\ncontrol plane software written for them. As such, the performance of bmv2 - in\nterms of throughput and latency - is significantly less than that of a\nproduction-grade software switch like [Open\nvSwitch](https://www.openvswitch.org/). For more information about the\nperformance of bmv2, refer to this [document](docs/performance.md).\n\n## Dependencies\n\nOn Ubuntu 16.04, the following packages are required:\n\n- automake\n- cmake\n- libjudy-dev\n- libgmp-dev\n- libpcap-dev\n- libboost-dev\n- libboost-test-dev\n- libboost-program-options-dev\n- libboost-system-dev\n- libboost-filesystem-dev\n- libboost-thread-dev\n- libevent-dev\n- libtool\n- flex\n- bison\n- pkg-config\n- g++\n- libssl-dev\n\nYou also need to install the following from source. Feel free to use the\ninstall scripts under travis/.\n\n- [thrift 0.11.0](https://github.com/apache/thrift/releases/tag/0.11.0) or later\n  (tested up to 0.12.1)\n- [nanomsg 1.0.0](https://github.com/nanomsg/nanomsg/releases/tag/1.0.0) or\n  later\n\nTo use the CLI, you will need to install the\n[nnpy](https://github.com/nanomsg/nnpy) Python package. Feel free to use\ntravis/install-nnpy.sh\n\nTo make your life easier, we provide the *install_deps.sh* script, which will\ninstall all the dependencies needed on Ubuntu 14.04.\n\nOur Travis regression tests now run on Ubuntu 14.04.\n\nOn MacOS you can use the tools/macos/bootstrap_mac.sh script to\ninstall all the above dependencies using homebrew. Note that in order\nto compile the code you need [XCode 8](https://itunes.apple.com/us/app/xcode/id497799835?mt=12)\nor later.\n\n## Building the code\n\n    1. ./autogen.sh\n    2. ./configure\n    3. make\n    4. [sudo] make install  # if you need to install bmv2\n\nIn addition, on Linux, you may have to run `sudo ldconfig` after installing\nbmv2, to refresh the shared library cache.\n\nDebug logging is enabled by default. If you want to disable it for performance\nreasons, you can pass `--disable-logging-macros` to the `configure` script.\n\nIn 'debug mode', you probably want to disable compiler optimization and enable\nsymbols in the binary:\n\n    ./configure 'CXXFLAGS=-O0 -g'\n\nThe new bmv2 debugger can be enabled by passing `--enable-debugger` to\n`configure`.\n\n## Running the tests\n\nTo run the unit tests, simply do:\n\n    make check\n\n**If you get a nanomsg error when running the tests (make check), try running\n  them as sudo**\n\n## Running your P4 program\n\nTo run your own P4 programs in bmv2, you first need to compile the P4 code\ninto a json representation which can be consumed by the software switch. This\nrepresentation will tell bmv2 which tables to initialize, how to configure the\nparser, ...\n\nThere are currently 2 P4 compilers available for bmv2 on p4lang:\n * [p4c](https://github.com/p4lang/p4c) includes a bmv2 backend and is the\n   recommended compiler to use, as it supports both P4_14 and P4_16\n   programs. Refer to the\n   [README](https://github.com/p4lang/p4c/blob/master/README.md) for information\n   on how to install and use p4c. At the moment, the bmv2 p4c backend supports\n   the v1model architecture, with some tentative support for the PSA\n   architecture. P4_16 programs written for v1model can be executed with the\n   `simple_switch` binary, while programs written for PSA can be executed with\n   the `psa_switch` binary. See [here](targets/README.md) for more details on\n   the differences between these.\n * [p4c-bm](https://github.com/p4lang/p4c-bm) is the legacy compiler for bmv2\n   (no longer actively maintained) and only supports P4_14 programs.\n\nAssuming you have installed the p4c compiler, you can obtain the json file for a\nP4_16 v1model program as follows:\n\n    p4c --target bmv2 --arch v1model --std p4-16 <prog>.p4\n\nThis will create a `<prog>.json` output file which can now be 'fed' to the bmv2\n`simple_switch` binary:\n\n    sudo ./simple_switch -i 0@<iface0> -i 1@<iface1> <prog>.json\n\nIn this example \\<iface0\\> and \\<iface1\\> are the interfaces which are bound to\nthe switch (as ports 0 and 1).\n\n## Using the CLI to populate tables...\n\nThe CLI code can be found at [tools/runtime_CLI.py](tools/runtime_CLI.py). It\ncan be used like this:\n\n    ./runtime_CLI.py --thrift-port 9090\n\nThe CLI connect to the Thrift RPC server running in each switch process. 9090 is\nthe default value but of course if you are running several devices on your\nmachine, you will need to provide a different port for each. One CLI instance\ncan only connect to one switch device.\n\nThe CLI is realized using the Python's cmd module and supports\nauto-completion. If you inspect the code, you will see that the list of\nsupported commands. This list includes:\n\n    - table_set_default <table name> <action name> <action parameters>\n    - table_add <table name> <action name> <match fields> => <action parameters> [priority]\n    - table_delete <table name> <entry handle>\n\nThe CLI include commands to program the multicast engine. Because we provide 2\ndifferent engines (*SimplePre* and *SimplePreLAG*), you have to specify which\none your target is using when starting the CLI, using the *--pre*\noption. Accepted values are: *None*, *SimplePre* (default value) and\n*SimplePreLAG*. The *l2_switch* target uses the *SimplePre* engine, while the\n*simple_switch* target uses the *SimplePreLAG* engine.\n\nYou can take a look at the *commands.txt* file for\n[*l2_switch*](targets/l2_switch/commands.txt) and\n[*simple_router*](targets/simple_router/commands.txt) to see how the CLI can be\nused.\n\n## Using the debugger\n\nTo enable the debugger, make sure that you passed the `--enable-debugger` flag\nto `configure`. You will also need to use the `--debugger` command line flag\nwhen starting the switch.\n\nUse [tools/p4dbg.py](tools/p4dbg.py) as follows when the switch is running to\nattach the debugger to the switch:\n\n    sudo ./p4dbg.py [--thrift-port <port>]\n\n## Displaying the event logging messages\n\nTo enable event logging when starting your switch, use the *--nanolog* command\nline option. For example, to use the ipc address *ipc:///tmp/bm-log.ipc*:\n\n    sudo ./simple_switch -i 0@<iface0> -i 1@<iface1> --nanolog ipc:///tmp/bm-log.ipc <path to JSON file>\n\nUse [tools/nanomsg_client.py](tools/nanomsg_client.py) as follows when the\nswitch is running:\n\n    sudo ./nanomsg_client.py [--thrift-port <port>]\n\nThe script will display events of significance (table hits / misses, parser\ntransitions, ...) for each packet.\n\n## Loading shared objects dynamically\n\nSome targets (simple_switch and simple_switch_grpc) let the user load shared\nlibraries dynamically at runtime. This is done by using the target-specific\ncommand-line option `--load-modules`, which takes as a parameter a\ncomma-separated list of shared objects. This functionality is currently only\navailable on systems where `dlopen` is available. Make sure that the shared\nobjects are visible by the dynamic loader (e.g. by setting `LD_LIBRARY_PATH`\nappropriately on Linux). You can control whether this feature is available by\nusing `--enable-modules` / `--disable-modules` when configuring bmv2. By\ndefault, this feature is enabled when `dlopen` is available.\n\n## Integrating with Mininet\n\nWe will provide more information in a separate document. However you can test\nthe Mininet integration right away using our *simple_router* target.\n\nIn a first terminal, type the following:\n\n    - cd mininet\n    - sudo python 1sw_demo.py --behavioral-exe ../targets/simple_router/simple_router --json ../targets/simple_router/simple_router.json\n\nThen in a second terminal:\n\n    - cd targets/simple_router\n    - ./runtime_CLI < commands.txt\n\nNow the switch is running and the tables have been populated. You can run\n*pingall* in Mininet or start a TCP flow with iperf between hosts *h1* and *h2*.\n\nWhen running a P4 program with *simple_switch* (instead of *simple_router* in\nthe above example), just provide the appropriate `simple_switch` binary to\n`1sw_demo.py` with `--behavioral-exe`.\n\n## FAQ\n\n### Why is throughput so low / why are so many packets dropped?\n\nbmv2 is not meant to be a production-grade software switch. For more information\non bmv2 performance, please refer to this [document](docs/performance.md).\n\n### Why did we replace p4c-behavioral with bmv2?\n\n- The new C++ code is not auto-generated for each P4 program. This means that it\n  becomes very easy and very fast to change your P4 program and test it\n  again. The whole P4 development process becomes more efficient. Every time you\n  change your P4 program, you simply need to produce the json for it using\n  the p4c compiler and feed it to the bmv2 executable.\n- Because the bmv2 code is not auto-generated, we hope it is easier to\n  understand. We hope this will encourage the community to contribute even more\n  to the P4 software switch.\n- Using the auto-generated PD library (which of course still needs to be\n  recompiled for each P4 program) is now optional. We provide an intuitive CLI\n  which can be used to program the runtime behavior of each switch device.\n- The new code is target independent. While the original p4c-behavioral assumed\n  a fixed abstract switch model with 2 pipelines (ingress and egress), bmv2\n  makes no such assumption and can be used to represent many switch\n  architectures. Three different -although similar- such architectures can be\n  found in the targets/ directory. If you are a networking company interested in\n  programming your device (parser, match-action pipeline, deparser) with P4, you\n  can use bmv2 to reproduce the behavior of your device.\n\n### How do program my own target / switch architecture using bmv2?\n\nYou can take a look at the `targets/ directory` first. We have also started\nwriting some doxygen documentation specifically targetted at programmers who\nwant to implement their own switch model using the bmv2 building blocks. You can\ngenerate this documentation yourself (if you have doxygen installed) by running\n`doxygen Doxyfile`. The output can be found under the `doxygen-out`\ndirectory. You can also browse this documentation\n[online](http://bmv2.org).\n\n### What else is new in bmv2?\n\n- Arithmetic is now possible on arbitrarily wide fields (no more limited to <=\n  32-bit fields) and **variable-length fields are now supported**.\n- We finally have unit tests!\n- While it is still incomplete, we provide a convenient 'event-logger' built on\n  top of nanomsg. Every time a 'significant' event happens (e.g. table hit,\n  parser transition,...) a message is broadcast on a nanomsg channel and any\n  client can consume it.\n\n### Are all features supported yet?\n\nAt this time, we are aware of the following unsupported P4_14 features:\n- direct registers\n\nIf you find more missing features or if you would like to request that a\nspecific feature be added, please send us an email (p4-dev@lists.p4.org) or\nsubmit an issue with the appropriate label on\n[Github](https://github.com/p4lang/behavioral-model/issues). Do not hesitate to\ncontribute code yourself!\n\n### How do I signal a bug?\n\nPlease submit an issue with the appropriate label on\n[Github](https://github.com/p4lang/behavioral-model/issues).\n\n### How can I contribute?\n\nSee [CONTRIBUTING.md](CONTRIBUTING.md).\n",
  "permissions": {
    "read": true,
    "write": false,
    "admin": false
  },
  "media_types": [
    "application/vnd.docker.container.image.v1+json"
  ],
  "content_types": [
    "image"
  ]
}