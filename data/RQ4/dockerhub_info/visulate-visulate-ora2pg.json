{
  "user": "visulate",
  "name": "visulate-ora2pg",
  "namespace": "visulate",
  "repository_type": "image",
  "status": 1,
  "status_description": "active",
  "description": "Single page web application and REST API for running Ora2Pg. ",
  "is_private": false,
  "is_automated": false,
  "can_edit": false,
  "star_count": 2,
  "pull_count": 5401761,
  "last_updated": "2022-07-31T20:45:39.650609Z",
  "date_registered": "2021-01-04T23:29:20.659838Z",
  "collaborator_count": 0,
  "affiliation": null,
  "hub_user": "visulate",
  "has_starred": false,
  "full_description": "# Visulate Ora2Pg\nA docker image and single page web application for Ora2Pg\n\n## Overview\n\n[Ora2Pg](https://github.com/darold/ora2pg) is an open source Perl script used to migrate an Oracle database to a PostgreSQL compatible schema. It connects an Oracle database, scans it to extract its structure or data, then generates SQL scripts for loading into a PostgreSQL database. It is a popular tool with users who are converting Oracle databases to PostgreSQL as part of a GCP or Azure migration (AWS has its own proprietary conversion tool).\n\nOra2Pg is a CLI application. It is a powerful tool in the hands of an experienced user but has usability issues for the first time user. The installation procedure is cumbersome with a number of prerequisite dependencies that must be installed manually. Once installed, the initial user experience is intimidating. Most of the functionality is controlled via a configuration file. This file is over 1100 lines long with many configuration parameters. It is not immediately apparent which parameters require user input.\n\nThis project aims to address some of the usability issues. It creates a Docker image to simplify the installation and adds a single page web application UI to control the configuration and execution of Ora2Pg.\n\nThe UI provides an HTML form to edit configuration parameters. This form allows the user to toggle between basic and advanced settings.\n![ Visulate Ora2Pg configuration](https://ora2pg.visulate.net/images/visulate-ora2pg-config.png?raw=true)\n\nOnce the configuration parameters have been set the user can run Ora2Pg via the UI and view its output.\n![Visulate Ora2Pg run results](https://ora2pg.visulate.net/images/visulate-ora2pg-run.png?raw=true )\n\nOutput files are written to a Docker volume which can be bound to the host filesystem. There's also a UI to download output files.\n\n## Quickstart\n\nBuild the docker image or pull the latest version from [Docker Hub](https://hub.docker.com/r/visulate/visulate-ora2pg).\n\nCreate a directory on your host computer to hold the output from Ora2Pg:\n\n```\nmkdir ora2pg-projects\n```\n\nRun Visulate-Ora2Pg with a port and volume binding - example:\n\n```\ndocker run -d -p 3000:3000 -v \"$(pwd)/ora2pg-projects\":/project visulate/visulate-ora2pg:latest\n```\n\nOpen your browser at http://localhost:3000 and follow the onscreen instructions\n\nAdditional usage instructions are available in [Migrating Oracle to PostgreSQL](https://bmsinabox.com/pages/oracle2postgres.html)\n\n## Technical Description\n\n\nThe Dockerfile is in the project root of the github repository. You can build it using:\n\n```\ndocker build -t visulate-ora2pg:local .\n```\nThis builds an image that includes Ora2Pg and the UI which can be run using:\n\n```\ndocker run -d -p 3000:3000 -v \"$(pwd)/ora2pg-projects\":/project visulate-ora2pg:local\n```\n\nThe UI is implemented using a combination of Node/Express API and a Vue UI. The API handles interaction with the Ora2Pg CLI. The Vue UI handles presentation to the user.\n\nThe UI and API communicate using a JSON representation of the ora2pg.conf file. The JSON document stores the ora2pg.conf data and metadata in a structured format suitable for use in the UI. For example, it records valid values for a parameter in an array where the  ora2pg.conf file documents these using comments. A handlebars template is used to convert the JSON document to a ora2pg.conf file at runtime.\n\nThe Vue UI is served from Express. The entry point for this is the `express/ui/dist/index.html` file. The distribution can be built from the `express/ui` directory by running `npm run build`.\n\nThe Vue UI makes REST API calls to the API. These are handled by the `express/api/ora2pg.js` router.\n\nThe REST API is organized around projects. Each project is a filesystem directory with an ora2pg-conf.json.enc file and any files that have been generated by running Ora2Pg. The ora2pg-conf.json.enc file is an aes-256-ctr encrypted JSON document. The UI creates a default project on initial startup and can be used to add or remove projects as required. A menu in the UI allows users to navigate between projects.\n\nWhen the user selects a project the UI gets the corresponding ora2pg-conf.json file from the API and displays its data in a form. This form can be used to edit its values and save or run the result.\n\nSubmitting a run from the UI initiates a [server sent event stream](https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events). The UI issues an API call which performs the following actions:\n\n1. Saves the ora2pg-conf.json.enc file\n2. Translates the ora2pg-conf JSON object into a temporary ora2pg.conf file\n3. Initiates a \"Content-Type\": \"text/event-stream\"\n4. Calls ora2pg using the temporary ora2pg.conf file\n5. Pipes stdout and stderr from the ora2pg process to the event-stream\n7. Writes ora2pg output files to the project directory\n8. Waits for ora2pg to complete\n9. Deletes the temporary ora2pg.conf file\n10. Closes the event-stream\n\nProject directories are created as subdirectories in the /project volume of the docker container. Ora2Pg output files can be accessed directly from the host computer if this volume was bound during `docker run`. They can also be downloaded from the 'Project Review' screen in the UI. This lists project files. It also provides an option to delete the project.\n\n## Security Considerations\n\nMeasures should be taken to prevent unauthorized access to the project directory. Ora2Pg accepts a plain text configuration file as input. This file may include sensitive information like the SYSTEM password of the source database. This plain text file is accessible for the duration of the run and may persist after it if the run fails.\n\nThe file is created at runtime using credentials supplied from the UI. The configuration file is deleted at the end of the run.\n\n## HTTPS support\n\nVisulate Ora2Pg can be configured to use self signed X.509 certificates. The docker container exposes a certs volume that can be mapped to a directory with a certificate and key file. On startup the express server checks for an environment variable called `ORA2PG_TLS_CERT_PASSPHRASE` to determine whether to start an http or https server. If the variable is set an https server is started:\n\n```\ndocker run -d -p 3000:3000 \\\n-v \"$(pwd)/ora2pg-projects\":/project \\\n-v \"$(pwd)/ora2pg-certs\":/certs \\\n-e ORA2PG_TLS_CERT_PASSPHRASE='my-passphrase' \\\nvisulate-ora2pg:local\n```\n\nThe code looks for a certificate file called `ora2pg-cert.pem` and keyfile called `ora2pg-key.pem`. These can be generated using openssl as shown in the example below.\n\n```\nmkdir ora2pg-certs\ncd ora2pg-certs/\nopenssl req -x509 -newkey rsa:4096 -keyout ora2pg-key.pem -out ora2pg-cert.pem -sha256 -days 365\n\n\nGenerating a RSA private key\n.++++\n.....................................................................................................................................................................++++\nwriting new private key to 'ora2pg-key.pem'\nEnter PEM pass phrase:\nVerifying - Enter PEM pass phrase:\n-----\nYou are about to be asked to enter information that will be incorporated\ninto your certificate request.\nWhat you are about to enter is what is called a Distinguished Name or a DN.\nThere are quite a few fields but you can leave some blank\nFor some fields there will be a default value,\nIf you enter '.', the field will be left blank.\n-----\nCountry Name (2 letter code) [AU]:US\nState or Province Name (full name) [Some-State]:Florida\nLocality Name (eg, city) []:Orlando\nOrganization Name (eg, company) [Internet Widgits Pty Ltd]:Visulate\nOrganizational Unit Name (eg, section) []:Ora2Pg\nCommon Name (e.g. server FQDN or YOUR name) []:ora2pg.us-east1-b.c.my-gcp-project.internal\nEmail Address []:\n```",
  "permissions": {
    "read": true,
    "write": false,
    "admin": false
  },
  "media_types": [
    "application/vnd.docker.container.image.v1+json"
  ],
  "content_types": [
    "image"
  ]
}