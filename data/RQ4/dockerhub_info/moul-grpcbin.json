{
  "user": "moul",
  "name": "grpcbin",
  "namespace": "moul",
  "repository_type": "image",
  "status": 1,
  "status_description": "active",
  "description": "httpbin for gRPC",
  "is_private": false,
  "is_automated": true,
  "can_edit": false,
  "star_count": 2,
  "pull_count": 1021473,
  "last_updated": "2022-12-28T04:05:22.851422Z",
  "date_registered": "2017-12-18T14:16:42.699468Z",
  "collaborator_count": 0,
  "affiliation": null,
  "hub_user": "moul",
  "has_starred": false,
  "full_description": "# grpcbin\nhttpbin like for gRPC\n\n[![CircleCI](https://circleci.com/gh/moul/grpcbin.svg?style=svg)](https://circleci.com/gh/moul/grpcbin)\n[![Docker Build Status](https://img.shields.io/docker/build/moul/grpcbin.svg)](https://hub.docker.com/r/moul/grpcbin/)\n[![Go Report Card](https://goreportcard.com/badge/moul.io/grpcbin)](https://goreportcard.com/report/moul.io/grpcbin)\n[![GoDoc](https://godoc.org/moul.io/grpcbin?status.svg)](https://godoc.org/moul.io/grpcbin/handler)\n[![License](https://img.shields.io/github/license/moul/grpcbin.svg)](https://github.com/moul/grpcbin/blob/master/LICENSE)\n\n![overview](https://raw.githubusercontent.com/moul/grpcbin/master/.assets/overview.svg?sanitize=true)\n\n## Links\n\n* Servers\n  * insecure gRPC (over HTTP, without TLS): grpc://grpcb.in:9000\n  * secure gRPC (with let's encrypt TLS): grpc://grpcb.in:443 and grpc://grpcb.in:9001\n  * webserver: https://grpcb.in\n* Services\n  * [grpcbin.proto](https://github.com/moul/pb/blob/master/grpcbin/grpcbin.proto)\n  * [hello.proto](https://github.com/moul/pb/blob/master/hello/hello.proto)\n  * [addsvc.proto](https://github.com/moul/pb/blob/master/addsvc/addsvc.proto)\n* Examples\n  * multiple languages: https://github.com/moul/grpcbin-example\n  * haskell: https://github.com/lucasdicioccio/http2-client-grpc-example/\n\n## Run server locally\n\n```console\n$ docker run -it --rm -p 9000:9000 -p 9001:9001 moul/grpcbin\n2017/12/18 14:48:01 listening on :9000 (insecure)\n2017/12/18 14:48:01 listening on :9001 (secure)\n```\n\n## Example\n\nSee examples on a the dedicated repo: [grpcbin-example](https://github.com/moul/grpcbin-example)\n\n---\n\n#### Golang\n\n```go\npackage main\n\nimport (\n\t\"fmt\"\n\t\"log\"\n\n\t\"golang.org/x/net/context\"\n\t\"google.golang.org/grpc\"\n\n\tpb \"github.com/moul/pb/grpcbin/go-grpc\"\n)\n\nfunc main() {\n\t// dial\n\tconn, _ := grpc.Dial(\"grpcb.in:9000\", grpc.WithInsecure())\n\tdefer conn.Close()\n\n\t// create client and context\n\tclient := pb.NewGRPCBinClient(conn)\n\tctx := context.Background()\n\n\t// call DummyUnary\n\tres, err := client.DummyUnary(ctx, &pb.DummyMessage{\n\t\tFString: \"hello\",\n\t\tFInt32:  42,\n\t})\n\tif err != nil {\n\t\tlog.Fatalf(\"failed to call DummyUnary: %v\", err)\n\t}\n\tfmt.Println(res)\n}\n```\n\n---\n\nExample with [grpcc](https://github.com/njpatel/grpcc):\n\n```console\n# fetch proto and install tool\n$ wget -qN https://github.com/moul/pb/raw/master/grpcbin/grpcbin.proto\n$ npm install -g grpcc\n\n# interactive client\n$ grpcc -i -p ./grpcbin.proto --address grpcb.in:9000\nConnecting to grpcbin.GRPCBin on grpcb.in:9000. Available globals:\n\n  client - the client connection to GRPCBin\n    index (EmptyMessage, callback) returns IndexReply\n    dummyUnary (DummyMessage, callback) returns DummyMessage\n    dummyServerStream (DummyMessage, callback) returns DummyMessage\n    dummyClientStream (DummyMessage, callback) returns DummyMessage\n    dummyBidirectionalStreamStream (DummyMessage, callback) returns DummyMessage\n\n  printReply - function to easily print a unary call reply (alias: pr)\n  streamReply - function to easily print stream call replies (alias: sr)\n  createMetadata - convert JS objects into grpc metadata instances (alias: cm)\n\nGRPCBin@grpcb.in:9000> ^C\n\n# call index endpoint\n$ grpcc -i -p ./grpcbin.proto --address grpcb.in:9000 --eval 'client.index({}, printReply)'\n{\n  \"description\": \"gRPC testing server\",\n  \"endpoints\": [\n    {\n      \"path\": \"index\",\n      \"description\": \"This endpoint.\"\n    },\n    {\n      \"path\": \"dummyUnary\",\n      \"description\": \"Unary endpoint that replies a received DummyMessage.\"\n    },\n    [...]\n  ]\n}\n\n# call dummyUnary with arguments\n$ grpcc -i -p ./grpcbin.proto --address grpcb.in:9000 --eval 'client.dummyUnary({f_string:\"hello\",f_int32:42}, printReply)'\n{\n  \"f_string\": \"hello\",\n  \"f_strings\": [],\n  \"f_int32\": 42,\n  \"f_int32s\": [],\n  \"f_enum\": \"ENUM_0\",\n  \"f_enums\": [],\n  \"f_sub\": null,\n  \"f_subs\": [],\n  \"f_bool\": false,\n  \"f_bools\": [],\n  \"f_int64\": \"0\",\n  \"f_int64s\": [],\n  \"f_bytes\": {\n    \"type\": \"Buffer\",\n    \"data\": []\n  },\n  \"f_bytess\": [],\n  \"f_float\": 0,\n  \"f_floats\": []\n}\n```\n",
  "permissions": {
    "read": true,
    "write": false,
    "admin": false
  },
  "media_types": [
    "application/vnd.docker.container.image.v1+json"
  ],
  "content_types": [
    "image"
  ]
}