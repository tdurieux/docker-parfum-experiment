{
  "user": "bcgsc",
  "name": "abyss",
  "namespace": "bcgsc",
  "repository_type": "image",
  "status": 1,
  "status_description": "active",
  "description": "ABySS: genome sequence assembler for short reads",
  "is_private": false,
  "is_automated": true,
  "can_edit": false,
  "star_count": 1,
  "pull_count": 1895,
  "last_updated": "2019-04-12T23:06:37.131251Z",
  "date_registered": "2016-03-03T00:52:45.771844Z",
  "collaborator_count": 0,
  "affiliation": null,
  "hub_user": "bcgsc",
  "has_starred": false,
  "full_description": "ABySS\n=====\n\nABySS is a *de novo* sequence assembler intended for short paired-end\nreads and large genomes.\n\nPlease [cite our papers](#citation).\n\nNews\n====\n\nLooking for a fun & worthy challenge? Join our team of developers! We are currently looking for C++ bioinformatics programmers.\n[Contact the project lead (Inanc Birol)](mailto:ibirol@bcgsc.ca?Subject=ABySS%20developer%20position) \n\nContents\n========\n\n* [Quick Start](#quick-start)\n\t* [Install ABySS on Debian or Ubuntu](#install-abyss-on-debian-or-ubuntu)\n\t* [Install ABySS on Mac OS X](#install-abyss-on-mac-os-x)\n* [Dependencies](#dependencies)\n* [Compiling ABySS from GitHub](#compiling-abyss-from-github)\n* [Compiling ABySS from source](#compiling-abyss-from-source)\n* [Assembling a paired-end library](#assembling-a-paired-end-library)\n* [Assembling multiple libraries](#assembling-multiple-libraries)\n* [Scaffolding](#scaffolding)\n* [Scaffolding with linked reads](#scaffolding-with-linked-reads)\n* [Rescaffolding with long sequences](#rescaffolding-with-long-sequences)\n* [Assembling using a Bloom filter de Bruijn graph](#assembling-using-a-bloom-filter-de-bruijn-graph)\n* [Assembling using a paired de Bruijn graph](#assembling-using-a-paired-de-bruijn-graph)\n* [Assembling a strand-specific RNA-Seq library](#assembling-a-strand-specific-rna-seq-library)\n* [Optimizing the parameter k](#optimizing-the-parameter-k)\n* [Parallel processing](#parallel-processing)\n* [Running ABySS on a cluster](#running-abyss-on-a-cluster)\n* [Using the DIDA alignment framework](#using-the-dida-alignment-framework)\n* [Assembly Parameters](#assembly-parameters)\n* [ABySS programs](#abyss-programs)\n* [Export to SQLite Database](#export-to-sqlite-database)\n* [Citation](#citation)\n* [Related Publications](#related-publications)\n* [Support](#support)\n* [Authors](#authors)\n\nQuick Start\n===========\n\n## Install ABySS on Linux\n\nInstall [Linuxbrew](http://linuxbrew.sh/), and run the command\n\n\tbrew install abyss\n\n## Install ABySS on macOS\n\nInstall [Homebrew](https://brew.sh/), and run the command\n\n\tbrew install abyss\n\n## Install ABySS on Windows\n\nInstall [Windows Subsystem for Linux](https://docs.microsoft.com/en-us/windows/wsl/) and [Linuxbrew](http://linuxbrew.sh/), and run the command\n\n\tbrew install abyss\n\n## Install ABySS on Debian or Ubuntu\n\nRun the command\n\n\tsudo apt-get install abyss\n\n## Assemble a small synthetic data set\n\n\twget http://www.bcgsc.ca/platform/bioinfo/software/abyss/releases/1.3.4/test-data.tar.gz\n\ttar xzvf test-data.tar.gz\n\tabyss-pe k=25 name=test \\\n\t\tin='test-data/reads1.fastq test-data/reads2.fastq'\n\n## Calculate assembly contiguity statistics\n\n\tabyss-fac test-unitigs.fa\n\nDependencies\n============\n\nDependencies may be installed using the package manager [Homebrew](https://homebrew.sh) on macOS and [Linxubrew](http://linuxbrew.sh) on Linux and Windows, using Windows Subsystem for Linux.\n\nABySS requires a C++ compiler that supports\n[OpenMP](http://www.openmp.org) such as [GCC](http://gcc.gnu.org).\n\nABySS requires the following libraries:\n\n* [Boost](http://www.boost.org/)\n* [Open MPI](http://www.open-mpi.org)\n* [sparsehash](https://code.google.com/p/sparsehash/)\n\n\tbrew install boost open-mpi google-sparsehash\n\nABySS will receive an error when compiling with Boost 1.51.0 or 1.52.0\nsince they contain a bug. Later versions of Boost compile without error.\n\n## Dependencies for linked reads\n\n- [ARCS](https://github.com/bcgsc/arcs) to scaffold\n- [Tigmint](https://github.com/bcgsc/tigmint) to correct assembly errors\n\n\tbrew install brewsci/bio/arcs brewsci/bio/links-scaffolder\n\n## Optional dependencies\n\n- [pigz](https://zlib.net/pigz/) for parallel gzip\n- [samtools](https://samtools.github.io) for reading BAM files\n- [zsh](https://sourceforge.net/projects/zsh/) for reporting time and memory usage\n\n\tbrew install pigz samtools zsh\n\nCompiling ABySS from GitHub\n===========================\n\nWhen installing ABySS from GitHub source the following tools are\nrequired:\n\n* [Autoconf](http://www.gnu.org/software/autoconf)\n* [Automake](http://www.gnu.org/software/automake)\n\nTo generate the configure script and make files:\n\n\t./autogen.sh\n\nSee \"Compiling ABySS from source\" for further steps.\n\nCompiling ABySS from source\n===========================\n\nTo compile and install ABySS in `/usr/local`:\n\n\t./configure\n\tmake\n\tsudo make install\n\nTo install ABySS in a specified directory:\n\n\t./configure --prefix=/opt/abyss\n\tmake\n\tsudo make install\n\nABySS uses OpenMP for parallelization, which requires a modern\ncompiler such as GCC 4.2 or greater. If you have an older compiler, it\nis best to upgrade your compiler if possible. If you have multiple\nversions of GCC installed, you can specify a different compiler:\n\n\t./configure CC=gcc-4.6 CXX=g++-4.6\n\nABySS requires the Boost C++ libraries. Many systems come with Boost\ninstalled. If yours does not, you can download\n[Boost](http://www.boost.org/users/download).\nIt is not necessary to compile Boost before installing it. The Boost\nheader file directory should be found at `/usr/include/boost`, in the\nABySS source directory, or its location specified to `configure`:\n\n\t./configure --with-boost=/usr/local/include\n\nIf you wish to build the parallel assembler with MPI support,\nMPI should be found in `/usr/include` and `/usr/lib` or its location\nspecified to `configure`:\n\n\t./configure --with-mpi=/usr/lib/openmpi\n\nWhile OpenMPI is assumed by default you can switch to LAM/MPI or MPICH\nusing:\n        ./configure --enable-mpich   use MPICH (default is to use Open MPI)\n        ./configure --enable-lammpi  use LAM/MPI (default is to use Open MPI)\n\nABySS should be built using the sparsehash library to reduce memory\nusage, although it will build without. sparsehash should be found in\n`/usr/include` or its location specified to `configure`:\n\n\t./configure CPPFLAGS=-I/usr/local/include\n\nIf the optional dependency SQLite is installed in non-default directories, its location can be specified to `configure`:\n\n\t./configure --with-sqlite=/opt/sqlite3\n\nThe default maximum k-mer size is 128 and may be decreased to reduce\nmemory usage or increased at compile time. This value must be a\nmultiple of 32 (i.e. 32, 64, 96, 128, etc):\n\n\t./configure --enable-maxk=160\n\nIf you encounter compiler warnings, you may ignore them like so:\n\n\tmake AM_CXXFLAGS=-Wall\n\nTo run ABySS, its executables should be found in your `PATH`. If you\ninstalled ABySS in `/opt/abyss`, add `/opt/abyss/bin` to your `PATH`:\n\n\tPATH=/opt/abyss/bin:$PATH\n\nBefore starting an assembly\n===========================\n\nABySS stores temporary files in `TMPDIR`, which is `/tmp` by default on most systems. If your default temporary disk volume is too small, set `TMPDIR` to a larger volume, such as `/var/tmp` or your home directory.\n\n\texport TMPDIR=/var/tmp\n\nAssembling a paired-end library\n===============================\n\nTo assemble paired reads in two files named `reads1.fa` and\n`reads2.fa` into contigs in a file named `ecoli-contigs.fa`, run the\ncommand:\n\n\tabyss-pe name=ecoli k=96 in='reads1.fa reads2.fa'\n\nThe parameter `in` specifies the input files to read, which may be in\nFASTA, FASTQ, qseq, export, SRA, SAM or BAM format and compressed with\ngz, bz2 or xz and may be tarred. The assembled contigs will be stored\nin `${name}-contigs.fa`.\n\nA pair of reads must be named with the suffixes `/1` and `/2` to\nidentify the first and second read, or the reads may be named\nidentically. The paired reads may be in separate files or interleaved\nin a single file.\n\nReads without mates should be placed in a file specified by the\nparameter `se` (single-end). Reads without mates in the paired-end\nfiles will slow down the paired-end assembler considerably during the\n`abyss-fixmate` stage.\n\nAssembling multiple libraries\n=============================\n\nThe distribution of fragment sizes of each library is calculated\nempirically by aligning paired reads to the contigs produced by the\nsingle-end assembler, and the distribution is stored in a file with\nthe extension `.hist`, such as `ecoli-3.hist`. The N50 of the\nsingle-end assembly must be well over the fragment-size to obtain an\naccurate empirical distribution.\n\nHere's an example scenario of assembling a data set with two different\nfragment libraries and single-end reads. Note that the names of the libraries\n(`pea` and `peb`) are arbitrary.\n\n * Library `pea` has reads in two files,\n   `pea_1.fa` and `pea_2.fa`.\n * Library `peb` has reads in two files,\n   `peb_1.fa` and `peb_2.fa`.\n * Single-end reads are stored in two files, `se1.fa` and `se2.fa`.\n\nThe command line to assemble this example data set is:\n\n\tabyss-pe k=96 name=ecoli lib='pea peb' \\\n\t\tpea='pea_1.fa pea_2.fa' peb='peb_1.fa peb_2.fa' \\\n\t\tse='se1.fa se2.fa'\n\nThe empirical distribution of fragment sizes will be stored in two\nfiles named `pea-3.hist` and `peb-3.hist`. These files may be\nplotted to check that the empirical distribution agrees with the\nexpected distribution. The assembled contigs will be stored in\n`${name}-contigs.fa`.\n\nScaffolding\n===========\n\nLong-distance mate-pair libraries may be used to scaffold an assembly.\nSpecify the names of the mate-pair libraries using the parameter `mp`.\nThe scaffolds will be stored in the file `${name}-scaffolds.fa`.\nHere's an example of assembling a data set with two paired-end\nlibraries and two mate-pair libraries. Note that the names of the libraries\n(`pea`, `peb`, `mpa`, `mpb`) are arbitrary.\n\n\tabyss-pe k=96 name=ecoli lib='pea peb' mp='mpc mpd' \\\n\t\tpea='pea_1.fa pea_2.fa' peb='peb_1.fa peb_2.fa' \\\n\t\tmpc='mpc_1.fa mpc_2.fa' mpd='mpd_1.fa mpd_2.fa'\n\nThe mate-pair libraries are used only for scaffolding and do not\ncontribute towards the consensus sequence.\n\nScaffolding with linked reads\n================================================================================\n\nABySS can scaffold using linked reads from 10x Genomics Chromium. The barcodes must first be extracted from the read sequences and added to the `BX:Z` tag of the FASTQ header, typically using the `longranger basic` command of [Long Ranger](https://support.10xgenomics.com/genome-exome/software/overview/welcome) or [EMA preproc](https://github.com/arshajii/ema#readme). The linked reads are used to correct assembly errors, which requires that [Tigmint](https://github.com/bcgsc/tigmint). The linked reads are also used for scaffolding, which requires [ARCS](https://github.com/bcgsc/arcs). See [Dependencies](#dependencies) for installation instructions.\n\nABySS can combine paired-end, mate-pair, and linked-read libraries. The `pe` and `lr` libraries will be used to build the de Bruijn graph. The `mp` libraries will be used for paired-end/mate-pair scaffolding. The `lr` libraries will be used for misassembly correction using Tigmint and scaffolding using ARCS.\n\n\tabyss-pe k=96 name=hsapiens \\\n\t\tpe='pea' pea='lra.fastq.gz' \\\n\t\tmp='mpa' mpa='lra.fastq.gz' \\\n\t\tlr='lra' lra='lra.fastq.gz'\n\nABySS performs better with a mixture of paired-end, mate-pair, and linked reads, but it is possible to assemble only linked reads using ABySS, though this mode of operation is experimental.\n\n\tabyss-pe k=96 name=hsapiens lr='lra' lra='lra.fastq.gz'\n\nRescaffolding with long sequences\n=================================\n\nLong sequences such as RNA-Seq contigs can be used to rescaffold an\nassembly. Sequences are aligned using BWA-MEM to the assembled\nscaffolds. Additional scaffolds are then formed between scaffolds that\ncan be linked unambiguously when considering all BWA-MEM alignments.\n\nSimilar to scaffolding, the names of the datasets can be specified with\nthe `long` parameter. These scaffolds will be stored in the file\n`${name}-long-scaffs.fa`. The following is an example of an assembly with PET, MPET and an RNA-Seq assembly. Note that the names of the libraries are arbitrary.\n\n\tabyss-pe k=96 name=ecoli lib='pe1 pe2' mp='mp1 mp2' long='longa' \\\n\t\tpe1='pe1_1.fa pe1_2.fa' pe2='pe2_1.fa pe2_2.fa' \\\n\t\tmp1='mp1_1.fa mp1_2.fa' mp2='mp2_1.fa mp2_2.fa' \\\n\t\tlonga='longa.fa'\n\nAssembling using a Bloom filter de Bruijn graph\n=========================================\n\nAssemblies may be performed using a _Bloom filter de Bruijn graph_, which\ntypically reduces memory requirements by an order of magnitude. To assemble in\nBloom filter mode, the user must specify 3 additional parameters: `B` (Bloom\nfilter size in bytes), `H` (number of Bloom filter hash functions), and `kc`\n(minimum k-mer count threshold). `B` is the overall memory budget for the Bloom\nfilter assembler, and may be specified with unit suffixes 'k' (kilobytes), 'M'\n(megabytes), 'G' (gigabytes). If no units are specified bytes are assumed. For\nexample, the following will run a E. coli assembly with an overall memory budget\nof 100 megabytes, 3 hash functions, a minimum k-mer count threshold of 3, with\nverbose logging enabled:\n\n\tabyss-pe name=ecoli k=96 in='reads1.fa reads2.fa' B=100M H=3 kc=3 v=-v\n\nAt the current time, the user must calculate suitable values for `B` and `H` on\ntheir own, and finding the best value for `kc` may require experimentation\n(optimal values are typically in the range of 2-4). Internally, the Bloom filter\nassembler divides the memory budget (`B`) equally across (`kc` + 1) Bloom\nfilters, where `kc` Bloom filters are used for the cascading Bloom filter and\none additional Bloom filter is used to track k-mers that have previously been\nincluded in contigs. Users are recommended to target a Bloom filter false\npositive rate (FPR) that is less than 5%, as reported by the assembly log when\nusing the `v=-v` option (verbose level 1).\n\nAssembling using a paired de Bruijn graph\n=========================================\n\nAssemblies may be performed using a _paired de Bruijn graph_ instead\nof a standard de Bruijn graph.  In paired de Bruijn graph mode, ABySS\nuses _k-mer pairs_ in place of k-mers, where each k-mer pair consists of\ntwo equal-size k-mers separated by a fixed distance.  A k-mer pair\nis functionally similar to a large k-mer spanning the breadth of the k-mer\npair, but uses less memory because the sequence in the gap is not stored.\nTo assemble using paired de Bruijn graph mode, specify both individual\nk-mer size (`K`) and k-mer pair span (`k`). For example, to assemble E.\ncoli with a individual k-mer size of 16 and a k-mer pair span of 96:\n\n\tabyss-pe name=ecoli K=16 k=96 in='reads1.fa reads2.fa'\n\nIn this example, the size of the intervening gap between k-mer pairs is\n64 bp (96 - 2\\*16). Note that the `k` parameter takes on a new meaning\nin paired de Bruijn graph mode. `k` indicates kmer pair span in\npaired de Bruijn graph mode (when `K` is set), whereas `k` indicates\nk-mer size in standard de Bruijn graph mode (when `K` is not set).\n\nAssembling a strand-specific RNA-Seq library\n============================================\n\nStrand-specific RNA-Seq libraries can be assembled such that the\nresulting unitigs, contigs and scaffolds are oriented correctly with\nrespect to the original transcripts that were sequenced. In order to\nrun ABySS in strand-specific mode, the `SS` parameter must be used as\nin the following example:\n\n\tabyss-pe name=SS-RNA k=96 in='reads1.fa reads2.fa' SS=--SS\n\nThe expected orientation for the read sequences with respect to the\noriginal RNA is RF. i.e. the first read in a read pair is always in\nreverse orientation.\n\nOptimizing the parameter k\n==========================\n\nTo find the optimal value of `k`, run multiple assemblies and inspect\nthe assembly contiguity statistics. The following shell snippet will\nassemble for every eighth value of `k` from 50 to 90.\n\n\tfor k in `seq 50 8 90`; do\n\t\tmkdir k$k\n\t\tabyss-pe -C k$k name=ecoli k=$k in=../reads.fa\n\tdone\n\tabyss-fac k*/ecoli-contigs.fa\n\nThe default maximum value for `k` is 96. This limit may be changed at\ncompile time using the `--enable-maxk` option of configure. It may be\ndecreased to 32 to decrease memory usage or increased to larger values.\n\nParallel processing\n===================\n\nThe `np` option of `abyss-pe` specifies the number of processes to\nuse for the parallel MPI job. Without any MPI configuration, this will\nallow you to use multiple cores on a single machine. To use multiple\nmachines for assembly, you must create a `hostfile` for `mpirun`,\nwhich is described in the `mpirun` man page.\n\n*Do not* run `mpirun -np 8 abyss-pe`. To run ABySS with 8 threads, use\n`abyss-pe np=8`. The `abyss-pe` driver script will start the MPI\nprocess, like so: `mpirun -np 8 ABYSS-P`.\n\nThe paired-end assembly stage is multithreaded, but must run on a\nsingle machine. The number of threads to use may be specified with the\nparameter `j`. The default value for `j` is the value of `np`.\n\nRunning ABySS on a cluster\n==========================\n\nABySS integrates well with cluster job schedulers, such as:\n\n * SGE (Sun Grid Engine)\n * Portable Batch System (PBS)\n * Load Sharing Facility (LSF)\n * IBM LoadLeveler\n\nFor example, to submit an array of jobs to assemble every eighth value of\n`k` between 50 and 90 using 64 processes for each job:\n\n\tqsub -N ecoli -pe openmpi 64 -t 50-90:8 \\\n\t\t<<<'mkdir k$SGE_TASK_ID && abyss-pe -C k$SGE_TASK_ID in=/data/reads.fa'\n\nUsing the DIDA alignment framework\n=================================\n\nABySS supports the use of DIDA (Distributed Indexing Dispatched Alignment),\nan MPI-based framework for computing sequence alignments in parallel across\nmultiple machines. The DIDA software must be separately downloaded and\ninstalled from http://www.bcgsc.ca/platform/bioinfo/software/dida. In\ncomparison to the standard ABySS alignment stages which are constrained\nto a single machine, DIDA offers improved performance and the ability to\nscale to larger targets. Please see the DIDA section of the abyss-pe man\npage (in the `doc` subdirectory) for details on usage.\n\nAssembly Parameters\n===================\n\nParameters of the driver script, `abyss-pe`\n\n * `a`: maximum number of branches of a bubble [`2`]\n * `b`: maximum length of a bubble (bp) [`\"\"`]\n * `B`: Bloom filter size (e.g. \"100M\")\n * `c`: minimum mean k-mer coverage of a unitig [`sqrt(median)`]\n * `d`: allowable error of a distance estimate (bp) [`6`]\n * `e`: minimum erosion k-mer coverage [`round(sqrt(median))`]\n * `E`: minimum erosion k-mer coverage per strand [1 if `sqrt(median) > 2` else 0]\n * `G`: genome size, used to calculate NG50\n * `H`: number of Bloom filter hash functions [`1`]\n * `j`: number of threads [`2`]\n * `k`: size of k-mer (when `K` is not set) or the span of a k-mer pair (when `K` is set)\n * `kc`: minimum k-mer count threshold for Bloom filter assembly [`2`]\n * `K`: the length of a single k-mer in a k-mer pair (bp)\n * `l`: minimum alignment length of a read (bp) [`40`]\n * `m`: minimum overlap of two unitigs (bp) [`k-1`]\n * `n`: minimum number of pairs required for building contigs [`10`]\n * `N`: minimum number of pairs required for building scaffolds [`n`]\n * `np`: number of MPI processes [`1`]\n * `p`: minimum sequence identity of a bubble [`0.9`]\n * `q`: minimum base quality [`3`]\n * `s`: minimum unitig size required for building contigs (bp) [`1000`]\n * `S`: minimum contig size required for building scaffolds (bp) [`1000-10000`]\n * `t`: maximum length of blunt contigs to trim [`k`]\n * `v`: use `v=-v` for verbose logging, `v=-vv` for extra verbose\n * `x`: spaced seed (Bloom filter assembly only)\n * `lr_s`: minimum contig size required for building scaffolds with linked reads (bp) [`S`]\n * `lr_n`: minimum number of barcodes required for building scaffolds with linked reads [`10`]\n\nPlease see the\n[abyss-pe](http://manpages.ubuntu.com/abyss-pe.1.html)\nmanual page for more information on assembly parameters.\n\nEnvironment variables\n=====================\n\n`abyss-pe` configuration variables may be set on the command line or from the environment, for example with `export k=96`. It can happen that `abyss-pe` picks up such variables from your environment that you had not intended, and that can cause trouble. To troubleshoot that situation, use the `abyss-pe env` command to print the values of all the `abyss-pe` configuration variables:\n\n\tabyss-pe env [options]\n\nABySS programs\n==============\n\n`abyss-pe` is a driver script implemented as a Makefile. Any option of\n`make` may be used with `abyss-pe`. Particularly useful options are:\n\n * `-C dir`, `--directory=dir`\n   Change to the directory `dir` and store the results there.\n * `-n`, `--dry-run`\n   Print the commands that would be executed, but do not execute\n   them.\n\n`abyss-pe` uses the following programs, which must be found in your\n`PATH`:\n\n * `ABYSS`: de Bruijn graph assembler\n * `ABYSS-P`: parallel (MPI) de Bruijn graph assembler\n * `AdjList`: find overlapping sequences\n * `DistanceEst`: estimate the distance between sequences\n * `MergeContigs`: merge sequences\n * `MergePaths`: merge overlapping paths\n * `Overlap`: find overlapping sequences using paired-end reads\n * `PathConsensus`: find a consensus sequence of ambiguous paths\n * `PathOverlap`: find overlapping paths\n * `PopBubbles`: remove bubbles from the sequence overlap graph\n * `SimpleGraph`: find paths through the overlap graph\n * `abyss-fac`: calculate assembly contiguity statistics\n * `abyss-filtergraph`: remove shim contigs from the overlap graph\n * `abyss-fixmate`: fill the paired-end fields of SAM alignments\n * `abyss-map`: map reads to a reference sequence\n * `abyss-scaffold`: scaffold contigs using distance estimates\n * `abyss-todot`: convert graph formats and merge graphs\n\nThis [flowchart](https://github.com/bcgsc/abyss/blob/master/doc/flowchart.pdf) shows the ABySS assembly pipeline its intermediate files.\n\nExport to SQLite Database\n=========================\n\nABySS has a built-in support for SQLite database to export log values into a SQLite file and/or `.csv` files at runtime.\n\n## Database parameters\nOf `abyss-pe`:\n * `db`: path to SQLite repository file [`$(name).sqlite`]\n * `species`: name of species to archive [ ]\n * `strain`: name of strain to archive [ ]\n * `library`: name of library to archive [ ]\n\nFor example, to export data of species 'Ecoli', strain 'O121' and library 'pea' into your SQLite database repository named '/abyss/test.sqlite':\n\n\tabyss-pe db=/abyss/test.sqlite species=Ecoli strain=O121 library=pea [other options]\n\n## Helper programs\n\nFound in your `path`:\n\n * `abyss-db-txt`: create a flat file showing entire repository at a glance\n * `abyss-db-csv`: create `.csv` table(s) from the repository\n\nUsage:\n\n    abyss-db-txt /your/repository\n    abyss-db-csv /your/repository program(s)\n\nFor example,\n\n\tabyss-db-txt repo.sqlite\n\tabyss-db-csv repo.sqlite DistanceEst\n\tabyss-db-csv repo.sqlite DistanceEst abyss-scaffold\n\tabyss-db-csv repo.sqlite --all\n\nCitation\n================================================================================\n\n## [ABySS 2.0](http://doi.org/10.1101/gr.214346.116)\n\nShaun D Jackman, Benjamin P Vandervalk, Hamid Mohamadi, Justin Chu, Sarah Yeo, S Austin Hammond, Golnaz Jahesh, Hamza Khan, Lauren Coombe, René L Warren, and Inanc Birol (2017).\n**ABySS 2.0: Resource-efficient assembly of large genomes using a Bloom filter**.\n*Genome research*, 27(5), 768-777.\n[doi:10.1101/gr.214346.116](http://doi.org/10.1101/gr.214346.116)\n\n## [ABySS](http://genome.cshlp.org/content/19/6/1117)\n\nSimpson, Jared T., Kim Wong, Shaun D. Jackman, Jacqueline E. Schein,\nSteven JM Jones, and Inanc Birol (2009).\n**ABySS: a parallel assembler for short read sequence data**.\n*Genome research*, 19(6), 1117-1123.\n[doi:10.1101/gr.089532.108](http://dx.doi.org/10.1101/gr.089532.108)\n\nRelated Publications\n================================================================================\n\n## [Trans-ABySS](http://www.nature.com/nmeth/journal/v7/n11/abs/nmeth.1517.html)\n\nRobertson, Gordon, Jacqueline Schein, Readman Chiu, Richard Corbett,\nMatthew Field, Shaun D. Jackman, Karen Mungall, et al (2010).\n**De novo assembly and analysis of RNA-seq data**.\n*Nature methods*, 7(11), 909-912.\n[doi:10.1038/10.1038/nmeth.1517](http://dx.doi.org/10.1038/nmeth.1517)\n\n## [ABySS-Explorer](http://ieeexplore.ieee.org/xpls/abs_all.jsp?arnumber=5290690)\n\nNielsen, Cydney B., Shaun D. Jackman, Inanc Birol, and Steven JM Jones (2009).\n**ABySS-Explorer: visualizing genome sequence assemblies**.\n*IEEE Transactions on Visualization and Computer Graphics*, 15(6), 881-888.\n[doi:10.1109/TVCG.2009.116](http://dx.doi.org/10.1109/TVCG.2009.116)\n\nSupport\n=======\n\n[Ask a question](https://www.biostars.org/p/new/post/?tag_val=abyss,assembly)\non [Biostars](https://www.biostars.org/t/abyss/).\n\n[Create a new issue](https://github.com/bcgsc/abyss/issues) on GitHub.\n\nSubscribe to the [ABySS mailing list](http://groups.google.com/group/abyss-users), <abyss-users@googlegroups.com>.\n\nFor questions related to transcriptome assembly, contact the [Trans-ABySS mailing list](http://groups.google.com/group/trans-abyss), <trans-abyss@googlegroups.com>.\n\nAuthors\n=======\n\n+ **[Shaun Jackman](http://sjackman.ca)** - [GitHub/sjackman](https://github.com/sjackman) - [@sjackman](https://twitter.com/sjackman)\n+ **Tony Raymond** - [GitHub/traymond](https://github.com/traymond)\n+ **Ben Vandervalk** - [GitHub/benvvalk ](https://github.com/benvvalk)",
  "permissions": {
    "read": true,
    "write": false,
    "admin": false
  },
  "media_types": [
    "application/vnd.docker.container.image.v1+json"
  ],
  "content_types": [
    "image"
  ]
}