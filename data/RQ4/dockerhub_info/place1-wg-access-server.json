{
  "user": "place1",
  "name": "wg-access-server",
  "namespace": "place1",
  "repository_type": "image",
  "status": 1,
  "status_description": "active",
  "description": "",
  "is_private": false,
  "is_automated": false,
  "can_edit": false,
  "star_count": 14,
  "pull_count": 3302195,
  "last_updated": "2021-01-17T01:55:19.852507Z",
  "date_registered": "2019-11-02T23:53:11.269601Z",
  "collaborator_count": 0,
  "affiliation": null,
  "hub_user": "place1",
  "has_starred": false,
  "full_description": "# wg-access-server\n\nwg-access-server is a single binary that provides a WireGuard\nVPN server and device management web ui. We support user authentication,\n_1 click_ device registration that works with Mac, Linux, Windows, Ios and Android\nincluding QR codes. You can configure different network isolation modes for\nbetter control and more.\n\nThis project aims to deliver a simple VPN solution for developers,\nhomelab enthusiasts and anyone else feeling adventurous.\n\nwg-access-server is a functional but young project. Contributions are welcome!\n\n## Documentation\n\n[See our documentation website](https://place1.github.io/wg-access-server/)\n\nQuick Links:\n\n- [Configuration Overview](https://place1.github.io/wg-access-server/2-configuration/)\n- [Deploy With Docker](https://place1.github.io/wg-access-server/deployment/1-docker/)\n- [Deploy With Helm](https://place1.github.io/wg-access-server/deployment/2-docker-compose/)\n- [Deploy With Docker-Compose](https://place1.github.io/wg-access-server/deployment/2-docker-compose/)\n\n## Running with Docker\n\nHere's a quick command to run the server to try it out.\n\n```bash\nexport WG_ADMIN_PASSWORD=\"example\"\nexport WG_WIREGUARD_PRIVATE_KEY=\"$(wg genkey)\"\n\ndocker run \\\n  -it \\\n  --rm \\\n  --cap-add NET_ADMIN \\\n  --device /dev/net/tun:/dev/net/tun \\\n  -v wg-access-server-data:/data \\\n  -e \"WG_ADMIN_PASSWORD=$WG_ADMIN_PASSWORD\" \\\n  -e \"WG_WIREGUARD_PRIVATE_KEY=$WG_WIREGUARD_PRIVATE_KEY\" \\\n  -p 8000:8000/tcp \\\n  -p 51820:51820/udp \\\n  place1/wg-access-server\n```\n\nIf you open your browser using your LAN ip address you can even connect your\nphone to try it out: for example, i'll open my browser at http://192.168.0.XX:8000\nusing the local LAN IP address.\n\nYou can connect to the web server on the local machine browser at http://localhost:8000\n\n## Running on Kubernetes via Helm\n\nwg-access-server ships a Helm chart to make it easy to get started on\nKubernetes.\n\nHere's a quick start, but you can read more at the [Helm Chart Deployment Docs](https://place1.github.io/wg-access-server/deployment/3-kubernetes/)\n\n```bash\n# deploy\nhelm install my-release --repo https://place1.github.io/wg-access-server wg-access-server\n\n# cleanup\nhelm delete my-release\n```\n\n## Running with Docker-Compose\n\nDownload the the docker-compose.yml file from the repo and run the following command.\n\n```bash\nexport WG_ADMIN_PASSWORD=\"example\"\nexport WG_WIREGUARD_PRIVATE_KEY=\"$(wg genkey)\"\n\ndocker-compose up\n```\n\nYou can connect to the web server on the local machine browser at http://localhost:8000\n\nIf you open your browser to your machine's LAN IP address you'll be able\nto connect your phone using the UI and QR code!\n\n## Screenshots\n\n![Devices](https://github.com/Place1/wg-access-server/raw/master/screenshots/devices.png)\n\n![Connect iOS](https://github.com/Place1/wg-access-server/raw/master/screenshots/connect-mobile.png)\n\n![Connect MacOS](https://github.com/Place1/wg-access-server/raw/master/screenshots/connect-desktop.png)\n\n![Sign In](https://github.com/Place1/wg-access-server/raw/master/screenshots/signin.png)\n\n## Changelog\n\nSee the [CHANGELOG.md](https://github.com/Place1/wg-access-server/blob/master/CHANGELOG.md) file\n\n## Development\n\nThe software is made up a Golang Server and React App.\n\nHere's how I develop locally:\n\n1. run `cd website && npm install && npm start` to get the frontend running on `:3000`\n2. run `sudo go run ./main.go` to get the server running on `:8000`\n\nHere are some notes about the development configuration:\n\n- sudo is required because the server uses iptables/ip to configure the VPN networking\n- you'll access the website on `:3000` and it'll proxy API requests to `:8000` thanks to webpack\n- in-memory storage and generated wireguard keys will be used\n\nGRPC codegeneration:\n\nThe client communicates with the server via gRPC-Web. You can edit the API specification\nin `./proto/*.proto`.\n\nAfter changing a service or message definition you'll want to re-generate server and client\ncode using: `./codegen.sh`.\n",
  "permissions": {
    "read": true,
    "write": false,
    "admin": false
  },
  "media_types": [
    "application/vnd.docker.container.image.v1+json",
    "application/vnd.docker.distribution.manifest.list.v2+json"
  ],
  "content_types": [
    "image"
  ]
}