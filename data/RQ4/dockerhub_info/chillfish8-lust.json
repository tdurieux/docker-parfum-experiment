{
  "user": "chillfish8",
  "name": "lust",
  "namespace": "chillfish8",
  "repository_type": "image",
  "status": 1,
  "status_description": "active",
  "description": "A fast, auto-optimising image server.",
  "is_private": false,
  "is_automated": false,
  "can_edit": false,
  "star_count": 0,
  "pull_count": 1027,
  "last_updated": "2023-01-06T08:46:57.585898Z",
  "date_registered": "2021-06-05T23:36:36.322742Z",
  "collaborator_count": 0,
  "affiliation": null,
  "hub_user": "chillfish8",
  "has_starred": false,
  "full_description": "<p align=\"center\">\n  <img width=\"50%\" src=\"https://user-images.githubusercontent.com/57491488/160932579-518e61b8-6a3d-4400-a46c-1cb93d461417.png\" alt=\"Lust Logo\">\n</p>\n\n<p align=\"center\"> \n <h2 align=\"center\">ðŸ”¥ Build your own image CDN system your way with lust.</h2>\n</p>\n\nLust is an **auto-optimising image server**, designed for **high throughput** and **low latency** handling of images, *now that is lustful*.\nRe-encode uploaded images into `png`, `jpeg`, `webp` or even into `gif` based formats! \n\nResize them to your liking automatically with sizing presets, instantly create small,\nmedium and large variants with just a few line in a config file. *Now that's the spirit of lust*\n\nAnd much more like caching, on the fly resizing, processing modes to name a few.\n## Getting started\n\n### Creating a config file\nIt's highly advised to take a look at some [example config files](/examples/configs) to get an idea\nof what a general config file would look like.\n\nFull documentation in markdown form can also be found [here](description.md), this is also\nserved directly by the server as part of the documentation ui endpoint.\n\n### Installation\n#### Building from Source\nTo building from source, just clone this repo via `git clone https://github.com/chillfish8/lust.git` and then run `cargo build --release`.\n\n#### Installing via Cargo\nYou can install lust directly via cargo and the git flag:\n```shell\ncargo install lust --git https://github.com/ChillFish8/lust.git\n```\n\n#### Docker Images\nLust has a set of pre-built, optimised docker images ready to go. Just run it with\n```shell\ndocker run -v \"my_config.yaml:/var/lust/my_config.yaml\" chillfish8/lust:latest --config-file \"/var/lust/my_config.yaml\"\n```\n\n### After Installation\nOnce you're up and running navigate to `http://127.0.0.1:8000/ui` or `/ui` of what ever port your server is running on\nto see the full OpenAPI docs.\n \n## Caching\nLust makes use of a Least Recently Used in-memory cache which can be adjusted for your needs via the `cache_size` key in the configuration file. \nThe larger the number the more images it will cache at once and vice versa. \n*NOTE: With bigger images this can create much higher RAM usage*\n\n## Scaling\nLust's ability to scale is purely down to the backend you use, so it is worth noting that\nthe file system backend is only really designed for testing. For full scale deployment\nconsider using Scylla or a s3 compatible blob store to serve data from.\n\nIf your goal is high-end performance, Scylla DB will be the most performant by a large\nmargin, but this will come with a higher operating cost.\n\n## Formats\nLust supports any of the following formats: \n- Png\n- JPEG\n- GIF\n- Webp\n \nAny uploaded images will be given a unique uuid and be re-encoded into all the other enabled formats in all presets. \nThis is especially useful when you want to serve several variants of the same image with different formats.\n\nYou can also adjust this based on the processing mode, `aot`/*Ahead of time* encoding will follow the old\nlust behavour by encoding and resizing each image at upload time.\n\n`jit`/*Just in time* encoding will only resize and re-encode at request time, storing a base copy\nof the file to generate new images. This can save on a considerable amount of CPU time and disk space\ndepending on your requirements.\n\nFinally, we have the `realtime` encoder, this will only store an original copy like the `jit` encoder\nbut instead will never save the resized and encoded image, this does also enable the ability to\ndo on the fly resizing and is recommended for situations where you're not expecting to serve image\nto the public network.\n \n## Presets\nThe server can take several sizing presets which can be targeted via the `size` \nquery parameter when getting an image. \nThese presets will mean every image at upload time will be resized to \nfit the width and height bounds using the configured resizing filter \n(defaults to nearest neighbour).\n\nRegardless of presets an `original` image is always stored and can be accessed via the `size=original` query.\nThe default preset when served without a `size` parameter can be set in the configuration file via `default_serving_preset` key.\n\n## Data Efficiency\nLust's data storage efficiency is roughly the same as storing on a plain file system outside any \nsystem the database backend employs when storing the data.\n",
  "permissions": {
    "read": true,
    "write": false,
    "admin": false
  },
  "media_types": [
    "application/vnd.docker.container.image.v1+json"
  ],
  "content_types": [
    "image"
  ]
}