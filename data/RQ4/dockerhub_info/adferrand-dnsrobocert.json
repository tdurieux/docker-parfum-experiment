{
  "user": "adferrand",
  "name": "dnsrobocert",
  "namespace": "adferrand",
  "repository_type": "image",
  "status": 1,
  "status_description": "active",
  "description": "Orchestrate Let's Encrypt TLS certificates validated with DNS challenges",
  "is_private": false,
  "is_automated": false,
  "can_edit": false,
  "star_count": 12,
  "pull_count": 14964875,
  "last_updated": "2022-10-11T23:29:09.357453Z",
  "date_registered": "2020-03-09T19:39:21.318134Z",
  "collaborator_count": 0,
  "affiliation": null,
  "hub_user": "adferrand",
  "has_starred": false,
  "full_description": "# ![logo](https://adferrand.github.io/dnsrobocert/images/dnsrobocert.svg)\n\n[![version](https://img.shields.io/pypi/v/dnsrobocert)](https://pypi.org/project/dnsrobocert/)\n[![python_support](https://img.shields.io/pypi/pyversions/dnsrobocert)](https://pypi.org/project/dnsrobocert/)\n[![docker](https://img.shields.io/docker/image-size/adferrand/dnsrobocert)](https://microbadger.com/images/adferrand/dnsrobocert)\n[![ci](https://img.shields.io/azure-devops/build/adferrand/338d4cba-ab35-4cf9-a9c6-1d2601554b32/21/master)](https://dev.azure.com/adferrand/dnsrobocert/_build/latest?definitionId=21&branchName=master)\n[![coverage](https://img.shields.io/azure-devops/coverage/adferrand/338d4cba-ab35-4cf9-a9c6-1d2601554b32/21)](https://dev.azure.com/adferrand/dnsrobocert/_build?definitionId=21&view=ms.vss-pipelineanalytics-web.new-build-definition-pipeline-analytics-view-cardmetrics)\n[![Join the community on Spectrum](https://withspectrum.github.io/badge/badge.svg)](https://spectrum.chat/dnsrobocert)\n\n## Quickstart\n\n1. Start the docker\n\n``` bash\nsudo mkdir -p /docker/{dnsrobocert,letsencrypt}\ndocker run --rm \\\n    -v /docker/dnsrobocert:/etc/dnsrobocert \\\n    -v /docker/letsencrypt:/etc/letsencrypt \\\n    adferrand/dnsrobocert\n```\n\n2. Write your DNSroboCert configuration file on host (`/etc/dnsrobocert/config.yml`) by following the [Configuration section in the User guide](https://dnsrobocert.readthedocs.io/en/latest/user_guide.html#configuration)\n\n## Documentation\n\nOnline documentation (user guide, configuration reference) is available here: [DNSroboCert documentation](https://dnsrobocert.readthedocs.io).\n\n## Support\n\nDo not hesitate to join the [DNSroboCert community on Spectrum](https://spectrum.chat/dnsrobocert) if you need help to use or develop DNSroboCert!\n\n## Features\n\nDNSroboCert is designed to manage [Let\\'s\nEncrypt](https://letsencrypt.org/) SSL certificates based on [DNS\nchallenges](https://tools.ietf.org/html/draft-ietf-acme-acme-01#page-44).\n\n-   Let\\'s Encrypt wildcard and regular certificates generation by\n    [Certbot](https://github.com/certbot/certbot) using DNS challenges,\n-   Integrated automated renewal of almost expired certificates,\n-   Standardized API through\n    [Lexicon](https://github.com/AnalogJ/lexicon) library to insert the\n    DNS challenge with various DNS providers,\n-   Centralized YAML configuration file to maintain several certificates\n    with configuration validity control,\n-   Modification of container configuration without restart,\n-   Flexible hooks upon certificate creation/renewal including\n    containers restart, commands in containers or custom hooks,\n-   Linux, Mac OS X and Windows support, with a particular care for\n    Docker services,\n-   Delivered as a standalone application and a Docker image.\n\n## Why use DNSroboCert\n\nIf you are reading these lines, you certainly want to secure all your\nservices using Let\\'s Encrypt SSL certificates, which are free and\naccepted everywhere.\n\nIf you want to secure Web services through HTTPS, there is already\nplenty of great tools. In the Docker world, one can check\n[Traefik](https://hub.docker.com/_/traefik/), or\n[nginx-proxy](https://hub.docker.com/r/jwilder/nginx-proxy/) +\n[letsencrypt-nginx-proxy-companion](https://hub.docker.com/r/jrcs/letsencrypt-nginx-proxy-companion/).\nBasically, theses tools will allow automated and dynamic\ngeneration/renewal of SSL certificates, based on TLS or HTTP challenges,\non top of a reverse proxy to encrypt everything through HTTPS.\n\nSo far so good, but you may fall in one of the following categories:\n\n1.  You are in a firewalled network, and your HTTP/80 and HTTPS/443\n    ports are not opened to the outside world.\n2.  You want to secure non-Web services (like LDAP, IMAP, POP, etc.)\n    were the HTTPS protocol is of no use.\n3.  You want to generate a wildcard certificate, valid for any\n    sub-domain of a given domain.\n\nFor the first case, ACME servers need to be able to access your website\nthrough HTTP (for HTTP challenges) or HTTPS (for TLS challenges) in\norder to validate the certificate. With a firewall these two challenges\n-which are widely used in HTTP proxy approaches - will not be usable:\nyou need to ask a DNS challenge. Please note that traefik embed DNS\nchallenges, but only for few DNS providers.\n\nFor the second case, there is no website to use TLS or HTTP challenges,\nand you should ask a DNS challenge. Of course you could create a\n\\\"fake\\\" website to validate the domain using a HTTP challenge, and\nreuse the certificate on the \\\"real\\\" service. But it is a workaround,\nand you have to implement a logic to propagate the certificate,\nincluding during its renewal. Indeed, most of the non-Web services will\nneed to be restarted each time the certificate is renewed.\n\nFor the last case, the use of a DNS challenge is mandatory. Then the\nproblems concerning certificates propagation that have been discussed in\nthe second case will also occur.\n\nThe solution is a dedicated and specialized tool which handles the\ncreation/renewal of Let\\'s Encrypt certificates, and ensure their\npropagation in the relevant services. It is the purpose of this project.",
  "permissions": {
    "read": true,
    "write": false,
    "admin": false
  },
  "media_types": [
    "application/vnd.docker.distribution.manifest.list.v2+json",
    "application/vnd.docker.container.image.v1+json"
  ],
  "content_types": [
    "image"
  ]
}