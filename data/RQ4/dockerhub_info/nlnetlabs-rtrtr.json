{
  "user": "nlnetlabs",
  "name": "rtrtr",
  "namespace": "nlnetlabs",
  "repository_type": "image",
  "status": 1,
  "status_description": "active",
  "description": "An RPKI data proxy.",
  "is_private": false,
  "is_automated": false,
  "can_edit": false,
  "star_count": 0,
  "pull_count": 1483,
  "last_updated": "2022-11-17T22:25:07.605155Z",
  "date_registered": "2021-03-15T14:02:23.847881Z",
  "collaborator_count": 0,
  "affiliation": null,
  "hub_user": "ximoneighteen",
  "has_starred": false,
  "full_description": "# RTRTR – An RPKI data proxy\n\n![ci](https://github.com/NLnetLabs/rtrtr/workflows/ci/badge.svg)\n[![Documentation Status](https://readthedocs.org/projects/rtrtr/badge/?version=stable)](https://rtrtr.docs.nlnetlabs.nl/en/stable/?badge=stable)\n[![](https://img.shields.io/crates/v/rtrtr.svg?color=brightgreen)](https://crates.io/crates/rtrtr)\n[![](https://img.shields.io/discord/818584154278199396?label=rpki%20on%20discord&logo=discord)](https://discord.gg/8dvKB5Ykhy)\n\nRTRTR is an RPKI data proxy, designed to collect Validated ROA Payloads\nfrom one or more sources in multiple formats and dispatch it onwards. It \nprovides the means to implement multiple distribution architectures for\nRPKI such as centralised RPKI validators that dispatch data to local caching\nRTR servers.\n\nRTRTR can read RPKI data from multiple RPKI Relying Party packages via RTR\nand JSON and, in turn, provide an RTR service for routers to connect to. \nThe HTTP server provides the validated data set in JSON format, as well as\na monitoring endpoint in plain text and Prometheus format.\n\nIf you have feedback, we would love to hear from you. Don’t hesitate to [create\nan issue on Github](https://github.com/NLnetLabs/rtrtr/issues/new) or post\na message on our [RPKI mailing\nlist](https://lists.nlnetlabs.nl/mailman/listinfo/rpki) or [Discord\nserver](https://discord.gg/8dvKB5Ykhy). You can learn more by reading the \n[RTRTR documentation](https://rtrtr.docs.nlnetlabs.nl/) and the\n[RPKI technology documentation](https://rpki.readthedocs.io/) on Read the Docs.\n\n## Architecture\n\nRTRTR is a very versatile tool. It comes with a number of components for\ndifferent purposes that can be connected to serve multiple use cases.\nThere are two classes of components: _Units_ take filtering data from\nsomewhere – this could be other units or external sources –, and produce and\nconstantly update one new set of data. _Targets_ take the data set from\none particular unit and serve it to an external party.\n\nWhich components RTRTR will use and how they are connected is described in\n[the documentation](https://rtrtr.docs.nlnetlabs.nl/) Also, an example \nconfig file can be found in [`etc/rtrtr.conf`].\n\n## Quick Start with Binary Packages\n\nOn the NLnet Labs software package repository we provide RTRTR packages for\namd64/x86_64 architectures running Debian and Ubuntu, as well as Red Hat \nEnterprise Linux and CentOS.\n\n### Installing on Debian/Unbuntu\n\nAdd the line below that corresponds to your operating system to your\n`/etc/apt/sources.list` or `/etc/apt/sources.list.d/`\n\n```bash\ndeb [arch=amd64] https://packages.nlnetlabs.nl/linux/debian/ stretch main\ndeb [arch=amd64] https://packages.nlnetlabs.nl/linux/debian/ buster main\ndeb [arch=amd64] https://packages.nlnetlabs.nl/linux/ubuntu/ xenial main\ndeb [arch=amd64] https://packages.nlnetlabs.nl/linux/ubuntu/ bionic main\ndeb [arch=amd64] https://packages.nlnetlabs.nl/linux/ubuntu/ focal main\n```\n\nThen run the following commands to add the public key and update the repository \nlist\n\n```bash\nwget -qO- https://packages.nlnetlabs.nl/aptkey.asc | sudo apt-key add -\nsudo apt update\n```\n\nYou can then install RTRTR by running this command\n\n```bash\nsudo apt install rtrtr\n```\n\n### Installing on RHEL/CentOS\n\nCreate a file named `/etc/yum.repos.d/nlnetlabs.repo`, enter this configuration\nand save it:\n\n```bash\n[nlnetlabs]\nname=NLnet Labs\nbaseurl=https://packages.nlnetlabs.nl/linux/centos/$releasever/main/$basearch\nenabled=1\n```\nThen run the following command to add the public key\n\n```bash\nsudo rpm --import https://packages.nlnetlabs.nl/aptkey.asc\n```\n\nYou can then install RTRTR by running this command\n\n```bash\nsudo yum install -y rtrtr\n```\n\n### Setting up RTRTR\n\nYou can now configure RTRTR by editing `/etc/rtrtr.conf` and start it with\n`sudo systemctl enable --now rtrtr`. You can check the status with the \ncommand `sudo systemctl status rtrtr` and view the logs with \n`sudo journalctl --unit=rtrtr`.\n\n## Quick Start with Cargo\n\nIf you have already installed Routinator, this should all be somewhat\nfamiliar.\n\nAssuming you have a newly installed Debian or Ubuntu machine, you will need\nto install the C toolchain and Rust. You can then install RTRTR using\nCargo, Rust’s build tool.\n\n```bash\napt install build-essential\ncurl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh\nsource ~/.cargo/env\ncargo install --locked rtrtr\n```\nIf you have an older version of Rust and RTRTR, you can update using\n\n```bash\nrustup update\ncargo install --locked --force rtrtr\n```\nIf you want to try the main branch from the repository instead of a\nrelease version, you can run\n\n```bash\ncargo install --git https://github.com/NLnetLabs/rtrtr.git --branch main\n```\n\nOnce RTRTR is installed, you need to create a config file that suits your\nneeds. The example in [`etc/rtrtr.conf`] may be a good way to start. The\nconfig file to use needs to be passed to RTRTR via the `-c` option:\n\n```\nrtrtr -c rtrtr.conf\n```\n\n[`etc/rtrtr.conf`]: https://github.com/NLnetLabs/rtrtr/blob/main/etc/rtrtr.conf\n\n## Quick Start with Docker\n\nTo run RTRTR with Docker you will first need to create an `rtrtr.conf` file\nsomewhere on your host computer and make that available to the Docker container\nwhen you run it. For example if your config file is in `/etc/rtrtr.conf` on the\nhost computer:\n\n```bash\ndocker run -v /etc/rtrtr.conf:/etc/rtrtr.conf nlnetlabs/rtrtr -c /etc/rtrtr.conf\n```\n\nRTRTR will need network access to fetch and publish data according to the\nconfigured units and targets respectively. Explaining Docker networking is beyond\nthe scope of this README, however below are a couple of examples to get you\nstarted.\n\nIf you need an RTRTR unit to fetch data from a source port on the host you will\nalso need to give the Docker container access to the host network. For example\none way to do this is with `--net=host`:\n\n```bash\ndocker run --net=host ...\n```\n_(where ... represents the rest of the arguments to pass to Docker and RTRTR)_\n\nThis will also cause any configured RTRTR target ports to be published on the\nhost network interface.\n\nIf you're not using `--net=host` you will need to tell Docker to expoee the\nRTRTR target ports, either one by one using `-p`, or you can publish the default\nports exposed by the Docker container (and at the same time remap them to high\nnumbered ports) using `-P`. E.g.\n\n```bash\ndocker run -p 8080:8080/tcp -p 9001:9001/tcp ...\n```\n\nOr:\n\n```bash\ndocker run -P ...\n```\n\nYou can verify which ports are exposed using the `docker ps` command which should\nshow something like this:\n```bash\nCONTAINER ID   IMAGE             COMMAND                  CREATED          STATUS          PORTS                                              NAMES\n146237ba9b4b   nlnetlabs/rtrtr   \"/sbin/tini -- rtrtr…\"   16 seconds ago   Up 14 seconds   0.0.0.0:49154->8080/tcp, 0.0.0.0:49153->9001/tcp   zealous_tesla\n```\n_(the output in this example shows the high-numbered port mapping that occurs when using `docker run -P`)_\n",
  "permissions": {
    "read": true,
    "write": false,
    "admin": false
  },
  "media_types": [
    "application/vnd.docker.distribution.manifest.list.v2+json",
    "application/vnd.docker.container.image.v1+json"
  ],
  "content_types": [
    "image"
  ]
}