{
  "user": "silarsis",
  "name": "docker-proxy",
  "namespace": "silarsis",
  "repository_type": "image",
  "status": 1,
  "status_description": "active",
  "description": "",
  "is_private": false,
  "is_automated": true,
  "can_edit": false,
  "star_count": 4,
  "pull_count": 981,
  "last_updated": "2018-06-17T08:11:12.599899Z",
  "date_registered": "2014-06-11T12:22:36Z",
  "collaborator_count": 0,
  "affiliation": null,
  "hub_user": "silarsis",
  "has_starred": false,
  "full_description": "# docker-proxy\n\nTransparent caching proxy server for Docker containers, run in a Docker\ncontainer. It can speed up the dependency-fetching part of your application\nbuild process.\n\n## Instructions for Use\n\nFirst check out the code. Then build with:\n\n```\nsudo docker build -t docker-proxy .\n```\n\nThen run with:\n\n```\n./run.sh\n```\n\nThe script will start the container and set up the appropriate\nrouting rules. Your other Docker containers will automatically use\nthe proxy, whether or not they were already running. When you are finished,\njust press <kbd>Ctrl</kbd><kbd>C</kbd> to stop the proxy.\n\nNOTE: This project is _not_ designed to be run with a simple `docker run` - it\nrequires `run.sh` to be run on the docker host, so it can adjust the\nrouting rules. You will need to check this code out\nand run `run.sh` on the host. For OS X, that's on your [boot2docker],\nDocker Machine or similar host). To start under [Docker Machine] on OS X:\n\n```\ndocker-machine scp run.sh default:/home/docker/run.sh\ndocker-machine ssh default\nsh ./run.sh\n```\n\n[boot2docker]: http://boot2docker.io/\n[Docker Machine]: https://docs.docker.com/machine/get-started/\n\n## Overview\n\n`run.sh` will fire up a Docker container running Squid, with\nappropriate firewall rules in place for transparent proxying. It will also\nconfigure port-based routing on the main host such that any traffic from a\nDocker container to port 80 routes via the transparent proxy container. It\nrequires `sudo` access to perform the firewall changes, and it will prompt you\nfor your password as appropriate.\n\n`run.sh` is designed to run in the foreground, because when the\ncontainer terminates it needs to remove the rules that were redirecting the\ntraffic.\n\nIf you want to see Squid in operation, you can (in another terminal) attach\nto the `docker-proxy` container - it is tailing the access log, so will show a\nrecord of requests made.\n\n## HTTPS Support\n\nThe proxy server supports HTTPS caching via Squid's [SSL Bump] feature. To\nenable it, start with:\n\n```\n./run.sh ssl\n```\n\nThe server will decrypt traffic from the server and encrypt it again using its\nown root certificate. HTTPS connections from your other Docker containers will\nfail until you install the root certificate. To install it:\n\n 1. Install the `ca-certificates` package (Debian/Ubuntu images)\n 2. Run [`detect-proxy.sh`]\n\nThose steps can be performed in a running container (for testing), or you can\nadd them to your `Dockerfile`. `detect-proxy.sh` can be run after you install\nyour OS packages with apt, because apt shouldn't need HTTPS. However, adding\nPPAs with `add-apt-repository` will fail until the certificate is installed. See\n[`test/Dockerfile`] for an example.\n\nSome programs don't use the OS's primary key store, such as `npm` and `pip`.\nYou may need to take extra steps for those programs.\n\nTo test HTTPS support, do this in another console after starting the proxy:\n\n```\ncd test\nsudo docker build -t test-proxy .\nsudo docker run --rm test-proxy\n# Should print \"All tests passed\"\n```\n\n[SSL Bump]: http://wiki.squid-cache.org/Features/SslBump\n[`detect-proxy.sh`]: test/detect-proxy.sh\n[`test/Dockerfile`]: test/Dockerfile\n\n## Notes\n\nThis proxy configuration is intended to be used solely to speed\nup development of Docker applications. **Do not** attempt to use this to\neavesdrop on other people's connections.\n\nThere exists a real possibility this script will break your `iptables` or `ip`\nrules in some unexpected way. Be aware that if things go wrong, the potential\nexists for all containers to lose the ability to download anything.\n",
  "permissions": {
    "read": true,
    "write": false,
    "admin": false
  },
  "media_types": [
    "application/vnd.docker.container.image.v1+json"
  ],
  "content_types": [
    "image"
  ]
}