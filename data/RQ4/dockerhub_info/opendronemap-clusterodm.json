{
  "user": "opendronemap",
  "name": "clusterodm",
  "namespace": "opendronemap",
  "repository_type": "image",
  "status": 1,
  "status_description": "active",
  "description": "",
  "is_private": false,
  "is_automated": false,
  "can_edit": false,
  "star_count": 6,
  "pull_count": 24611,
  "last_updated": "2022-08-01T16:26:07.051962Z",
  "date_registered": "2019-05-12T19:37:00.346465Z",
  "collaborator_count": 0,
  "affiliation": null,
  "hub_user": "opendronemap",
  "has_starred": false,
  "full_description": "# ClusterODM\n\nA reverse proxy, load balancer and task tracker with optional cloud autoscaling capabilities for NodeODM API compatible nodes. In a nutshell, it's a program to link together multiple [NodeODM](https://github.com/OpenDroneMap/NodeODM) API compatible nodes under a single network address. The program allows to distribute tasks across multiple nodes while taking in consideration factors such as maximum number of images, queue size and slots availability. It can also automatically spin up/down nodes based on demand using cloud computing providers (currently [DigitalOcean](https://m.do.co/c/2977a7634f44), [Hetzner](https://www.hetzner.com), [Scaleway](https://scaleway.com) or [Amazon Web Services](https://aws.amazon.com/)).\n\n![image](https://user-images.githubusercontent.com/1951843/57490594-b9828180-7287-11e9-9328-740cc0be8f7e.png)\n\nThe program has been battle tested on the [WebODM Lightning Network](https://webodm.net) for quite some time and has proven reliable in processing thousands of datasets. However, if you find bugs, please [report them](https://github.com/OpenDroneMap/ClusterODM/issues).\n\n## Installation\n\nThe only requirement is a working installation of [NodeJS](https://nodejs.org).\n\n```bash\ngit clone https://github.com/OpenDroneMap/ClusterODM\ncd ClusterODM\nnpm install\n```\n\nThere's also a docker image available at `opendronemap/clusterodm` and a native [Windows bundle](#windows-bundle).\n\n## Usage\n\nFirst, start the program:\n\n```bash\nnode index.js [parameters]\n```\n\nOr with docker:\n\n```bash\ndocker run --rm -ti -p 3000:3000 -p 8080:8080 opendronemap/clusterodm [parameters]\n```\n\nThen connect to the CLI and connect new [NodeODM](https://github.com/OpenDroneMap/NodeODM) instances:\n\n```bash\ntelnet localhost 8080\n> HELP\n> NODE ADD nodeodm-host 3001\n> NODE LIST\n```\n\nFinally, use a web browser to connect to `http://localhost:3000`. A normal [NodeODM](https://github.com/OpenDroneMap/NodeODM) UI should appear. This means the application is working, as web requests are being properly forwarded to nodes.\n\nYou can also check the status of nodes via a web interface available at `http://localhost:10000`.\n\nSee `node index.js --help` for all parameter options.\n\n## Autoscale Setup\n\nClusterODM can spin up/down nodes based on demand. This allows users to reduce costs associated with always-on instances as well as being able to scale processing based on demand.\n\nTo setup autoscaling you must:\n   * Make sure [docker-machine](https://docs.docker.com/machine/install-machine/) is installed.\n   * Setup a S3-compatible bucket for storing results.\n   * Create a configuration file for [DigitalOcean](./docs/digitalocean.md), [Hetzner](./docs/hetzner.md), [Scaleway](./docs/scaleway.md), or [Amazon Web Services](./docs/aws.md) (click links to see examples)\n\nYou can then launch ClusterODM with:\n\n```bash\nnode index.js --asr configuration.json\n```\n\nYou should see the following messages in the console:\n\n```bash\ninfo: ASR: DigitalOceanAsrProvider\ninfo: Can write to S3\ninfo: Found docker-machine executable\n```\n\nYou should always have at least one static NodeODM node attached to ClusterODM, even if you plan to use the autoscaler for all processing. If you setup auto scaling, you can't have zero nodes and rely 100% on the autoscaler. You need to attach a NodeODM node to act as the \"reference node\" otherwise ClusterODM will not know how to handle certain requests (for the forwarding the UI, for validating options prior to spinning up an instance, etc.). For this purpose, you should add a \"dummy\" NodeODM node and lock it:\n\n```\ntelnet localhost 8080\n> NODE ADD localhost 3001\n> NODE LOCK 1\n> NODE LIST\n1) localhost:3001 [online] [0/2] <version 1.5.1> [L]\n```\n\nThis way all tasks will be automatically forwarded to the autoscaler.\n\nA docker-compose file is available to automatically setup both ClusterODM and NodeODM on the same machine by issuing:\n\n```\ndocker-compose up\n```\n\n## Windows Bundle\n\nClusterODM can run as a self-contained executable on Windows without the need for additional dependencies. You can download the latest `clusterodm-windows-x64.zip` bundle from the [releases](https://github.com/OpenDroneMap/ClusterODM/releases) page. Extract the contents in a folder and run:\n\n```bash\nclusterodm.exe\n```\n\n## Roadmap\n\nWe have [plenty of goals](https://github.com/OpenDroneMap/ClusterODM/issues?q=is%3Aopen+is%3Aissue+label%3Aenhancement). If you want to help, or need help getting started contributing, get in touch on the [OpenDroneMap community forum](https://community.opendronemap.org).\n\n",
  "permissions": {
    "read": true,
    "write": false,
    "admin": false
  },
  "media_types": [
    "application/vnd.docker.distribution.manifest.list.v2+json"
  ],
  "content_types": [
    "image"
  ]
}