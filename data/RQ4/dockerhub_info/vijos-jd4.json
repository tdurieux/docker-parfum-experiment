{
  "user": "vijos",
  "name": "jd4",
  "namespace": "vijos",
  "repository_type": "image",
  "status": 1,
  "status_description": "active",
  "description": "",
  "is_private": false,
  "is_automated": false,
  "can_edit": false,
  "star_count": 1,
  "pull_count": 1054,
  "last_updated": "2021-08-07T10:26:38.42619Z",
  "date_registered": "2017-04-11T05:46:58.329281Z",
  "collaborator_count": 0,
  "affiliation": null,
  "hub_user": "vijos",
  "has_starred": false,
  "full_description": "Judge Daemon\n============\n\n.. image:: https://travis-ci.org/vijos/jd4.svg?branch=master\n    :target: https://travis-ci.org/vijos/jd4\n\n.. image:: https://images.microbadger.com/badges/image/vijos/jd4.svg\n    :target: https://microbadger.com/images/vijos/jd4\n\n.. contents::\n\nIntroduction\n------------\n\njd4 is a judging daemon for programming contests like OI and ACM. It is called\njd4 because we had jd, jd2, jd3 before. Unlike previous versions that use\nWindows sandboxing techniques, jd4 uses newer sandboxing facilities that\nappear in Linux 4.4+. jd4 also multiplexes most I/O on an event loop so that\nonly two extra threads are used during a judge - one for input, and one for\noutput, thus allowing blocking custom judge implementations.\n\nUsage\n-----\n\nPrerequisites:\n\n- Linux 4.4+\n- Docker\n\nPut config.yaml in the configuration directory, usually in\n``$HOME/.config/jd4``. Examples can be found under the ``examples`` directory.\nCreate a directory for caching problem data, such as ``$HOME/.cache/jd4``.\n\nUse the following command to pull and run jd4::\n\n    docker run --privileged \\\n        -v ~/.config/jd4/config.yaml:/root/.config/jd4/config.yaml \\\n        -v ~/.cache/jd4:/root/.cache/jd4 \\\n        vijos/jd4\n\nDevelopment\n-----------\n\nPrerequisites:\n\n- Linux 4.4+\n- Python 3.5+\n\nUse the following command to install Python requirements::\n\n    pip3 install -r requirements.txt\n\nThe python libraries require kernel headers and libffi-dev.\n\nPut ``config.yaml`` and ``langs.yaml`` in the configuration directory, usually\nin ``$HOME/.config/jd4``. ``config.yaml`` includes the server address, user and\npassword and ``langs.yaml`` includes the compiler options. Examples can be found\nunder the ``examples`` directory.\n\nWe recommend to use the following commands to initialize the config::\n\n    mkdir -p ~/.config/jd4\n    cp examples/config.yaml ~/.config/jd4/\n Â   ln -sr examples/langs.yaml ~/.config/jd4/\n\nBuild the cython extensions inplace::\n\n    python3 setup.py build_ext --inplace\n\nUse the following command to run the daemon::\n\n    python3 -m jd4.daemon\n\nNote that this requires a ``sudo`` to create cgroups on first execution.\n\nPlaying with the sandbox\n------------------------\n\nUse the following command to create and enter the sandbox::\n\n    $ python3 -m jd4.sandbox\n    [D 170312 15:15:38 selector_events:53] Using selector: EpollSelector\n    [I 170312 15:15:38 sandbox:153] sandbox_dir: /tmp/jd4.sandbox.k6ig1fv8\n    bunny-4.3$ ls\n    bin  etc  in  lib  lib64  out  proc  usr\n    bunny-4.3$\n\nThe ``in`` and ``out`` directory are bound to the corresponding directory\nin ``sandbox_dir``, where ``in`` is read-only and ``out`` has write permission.\n\nFAQ\n---\n\nHow are the programs sandboxed?\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nWe unshare everything (namely mount, uts, ipc, user, pid and net), and then\ncreate a root filesystem using tmpfs and bind mount, finally ``pivot_root``\ninto it. We also use cgroup to limit the time, memory and number of processes\nof user execution.\n\nWhy are the sandboxes reused?\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nWe noticed that sandbox creation took around 100ms, therefore becomes the\nbottleneck while judging small programs. With sandbox pooling, we see 300-400\nexecutions per second on our development machine.\n\nWhy is comparator written in Cython?\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nThe comparator needs to process the user output by characters (in other word\nbytes). This kind of operation is very slow in Python. We see a 50x+\nthroughput increment by using Cython (like 3MB/s to 200MB/s).\n\nCopyright and License\n---------------------\n\nCopyright (c) 2017 Vijos Dev Team.  All rights reserved.\n\nThis program is free software: you can redistribute it and/or modify\nit under the terms of the GNU Affero General Public License as\npublished by the Free Software Foundation, either version 3 of the\nLicense, or (at your option) any later version.\n\nThis program is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Affero General Public License for more details.\n\nYou should have received a copy of the GNU Affero General Public License\nalong with this program.  If not, see <http://www.gnu.org/licenses/>.\n",
  "permissions": {
    "read": true,
    "write": false,
    "admin": false
  },
  "media_types": [
    "application/vnd.docker.container.image.v1+json"
  ],
  "content_types": [
    "image"
  ]
}