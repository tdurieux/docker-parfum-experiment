{
  "user": "nicomt",
  "name": "ckron",
  "namespace": "nicomt",
  "repository_type": "image",
  "status": 1,
  "status_description": "active",
  "description": "",
  "is_private": false,
  "is_automated": false,
  "can_edit": false,
  "star_count": 0,
  "pull_count": 1015,
  "last_updated": "2021-07-24T21:26:14.247473Z",
  "date_registered": "2020-09-28T06:01:32.183722Z",
  "collaborator_count": 0,
  "affiliation": null,
  "hub_user": "nicomt",
  "has_starred": false,
  "full_description": "# ckron\n\n> A cron-style job scheduler for docker\n\n[![NPM Version](https://img.shields.io/npm/v/ckron)](https://www.npmjs.org/package/ckron)\n[![Test](https://github.com/nicomt/ckron/workflows/Test/badge.svg)](https://github.com/nicomt/ckron/actions)\n[![Docker Image Size](https://img.shields.io/docker/image-size/nicomt/ckron/latest)](https://hub.docker.com/r/nicomt/ckron)\n\n`ckron` is a versatile and straightforward tool to schedule operations on containerized applications.\n\n`ckron` is heavily inspired by [ofelia](https://github.com/mcuadros/ofelia) but attempts to improve on it by allowing multiple [tasks](#tasks) per `job`. Using `tasks`, you can compose complex workflows with a few off-the-shelf images and follow Docker's motto of one process per container.\n\n## Install\n\nIf you have Node installed:\n```\n$ npm i -g ckron\n```\nIf you only have Docker installed:\n```\n$ docker pull nicomt/ckron\n```\n\n## Usage\n\nIf you installed it in Node:\n```\n$ ckron daemon --config /path/to/config.yml\n```\nIf you installed it in Docker:\n```\n$ docker run --rm -it \\\n      -v $PWD/config.yml:/etc/ckron/config.yml \\\n      -v /var/run/docker.sock:/var/run/docker.sock \\\n      nicomt/ckron daemon\n```\n\nFor production is recommended to setup a service in something like [systemd](https://medium.com/@benmorel/creating-a-linux-service-with-systemd-611b5c8b91d6), upstart or [forever](https://www.npmjs.com/package/forever). A service will ensure the daemon is restarted in case of an unexpected failure\n\n## Configuration\nThe configuration consists of a YAML file, which is meant to have familiar `docker compose` like syntax. The main sections of the config file are the following:  \n\n### Tasks\nSingle operations that can be carried out by a job. Tasks currently supported are:\n\n  - `run`: Runs a command inside of a new container, using a specific image.\n  - `exec`: Runs a new command in a running container\n  - `signal`: Send a signal to the main process inside the container. Similar to `docker kill --signal`\n\nSee [tasks reference](docs/tasks.md) for more documentation\n\n### Jobs\nJobs are sets of tasks scheduled with a cron-like syntax. See [jobs reference](docs/jobs.md) for more documentation\n\n### Notifiers\nNotification channels for failed jobs. See [notifiers reference](docs/notifiers.md) for more documentation\n\n### YAML Full Example\n\nRun with `$ ckron daemon --config /path/to/config.yml` \n```yml\ntasks:\n  test-01:\n    type: run\n    command: printenv\n    environment:\n      HELLO: World\n    image: ubuntu:latest\njobs:\n  job-01:\n    schedule: \"*/30 * * * * *\"\n    on_error: [\"email-dev\"]\n    run_on_init: true\n    tasks:\n      - test-01\nnotifiers:\n  email-dev:\n    type: email\n    smtp_host: smtp.server.com\n    smtp_port: 25\n    smtp_auth:\n      user: XXXXXXX\n      pass: XXXXXXX\n    to: dev@example.com\n    from: '\"Ckron Scheduler\" <ckron@example.com>'\n```\n",
  "permissions": {
    "read": true,
    "write": false,
    "admin": false
  },
  "media_types": [
    "application/vnd.docker.container.image.v1+json",
    "application/vnd.docker.distribution.manifest.list.v2+json"
  ],
  "content_types": [
    "image"
  ]
}