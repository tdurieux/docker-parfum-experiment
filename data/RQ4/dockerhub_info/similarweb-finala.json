{
  "user": "similarweb",
  "name": "finala",
  "namespace": "similarweb",
  "repository_type": "image",
  "status": 1,
  "status_description": "active",
  "description": "",
  "is_private": false,
  "is_automated": false,
  "can_edit": false,
  "star_count": 0,
  "pull_count": 14894,
  "last_updated": "2020-09-23T17:24:21.983287Z",
  "date_registered": "2020-03-14T21:41:30.766771Z",
  "collaborator_count": 0,
  "affiliation": null,
  "hub_user": "similarweb",
  "has_starred": false,
  "full_description": "![Go](https://github.com/similarweb/finala/workflows/Go/badge.svg?event=push)\n[![Coverage Status](https://coveralls.io/repos/github/similarweb/finala/badge.svg?branch=master)](https://coveralls.io/github/similarweb/finala?branch=master)\n# Finala\n\nA resource cloud scanner that analyzes and reports about wasteful and unused resources to cut unwanted expenses.\nThe tool is based on yaml definitions (no code), by default configuration OR given yaml file and the report output will be saved in a given storage.\nCurrently we're not taking into account reservations, private pricing, etc. (WIP)\n\n## Supported Services\n\nAWS:\n* RDS\n* EC2 (ELB, ALB, EBS)\n* DynamoDB\n* ElasticCache\n* DocumentDB\n* IAM user last activity\n* Lambda\n* Neptune\n* Kinesis\n* RedShift\n\nMore to come...\n\n## Screenshots\n\n### Dashboard\n![alt Summary](https://raw.githubusercontent.com/similarweb/finala/master/docs/dashboard.png)\n\n\n### Unused RDS report\n![alt Resources](https://raw.githubusercontent.com/similarweb/finala/master/docs/resource.jpg)\n\n### Notifications\n![alt Slack](docs/slack.png)\n\n## Getting Started\n\nThese instructions will get you a copy of the project up and running on your local machine for development and testing purposes. See deployment for notes on how to deploy the project on a live system.\n\n### How To Use\n\nFinala is built from 3 components:\n\n* **API** - RESTful API server that receives events from the collector and serves the UI. See [example API configuration file](./configuration/api.yaml).\n\n* **UI** - The User Interface, display the data in a way that it'll look nice :).\n\n* **Notifier** - Notifies notification groups with the support of multiple notifiers defined in [notifier.yaml](./configuration/notifier.yaml). All resources that marked as \"under utilized\" are reported to the notification groups.\nCurrently we only support Slack notifier type [notifier.yaml](./configuration/notifier.yaml). If you wish to contribute and add a new Notifier please read [How To add a new Notifier?](docs/notifiers/add-new-notifier.md)\n\n* **Collector** - Collects and analyzes resources against their thresholds defined in [collector.yaml](./configuration/collector.yaml). All resources that marked as \"under utilized\" are reported back to the API component.\nYou can define multiple accounts and regions in the [collector.yaml](./configuration/collector.yaml) file.\n\n```yaml\nproviders:\n  aws:\n  - name: <ACCOUNT_NAME>\n    # Environment variables will be used in case if these variables are absent\n    access_key: <ACCESS_KEY>\n    secret_key: <SECRET_KEY>\n    session_token: \"\" # Optional variable, on default this variable not set\n    regions:\n      - <REGION>\n```\nWe've already provided list of built-in cost-optimization `metrics`, you may modify the file to suit your needs.\n```yaml\nrds:\n    - description: Database connection count\n        metrics:\n        - name: DatabaseConnections\n            statistic: Sum\n        period: 24h \n        start_time: 168h # 24(h) * 7(d) = 168h\n        constraint:\n        operator: \"==\"\n        value: 0\n```\n\nThis example will mark RDS as under utilized` if that RDS had **zero** connections in the last week.\n\n\n### Deploy\nYou may use either approach in order to deploy Finala.\n\n* Deploy with Kubernetes, see [Helm chart](https://github.com/similarweb/finala-helm) for more information.\n* Run it locally with `docker-compose up`.\n\n### Contribution\n\n**Running the different components**:\n\n#### Collector\n\n```shell\ngo run main.go collector -c ./configuration/collector.yaml\n```\n\n#### Notifier\n\n```shell\ngo run main.go notifier -c ./configuration/notifier.yaml\n```\n\n#### API\n```shell\ngo run main.go api -c ./configuration/api.yaml\n```\n\n#### UI\n\n```shell\ncd ui \nnpm run dev\n```\n\n*OR*\n\n```shell\nmake build-ui\ngo run main.go ui -c ./configuration/ui.yaml\n```\n\n### Docker\nRunning all components using `docker-compose`:\n\n```\ndocker-compose up\n```\n\n\nUI is exposed on port 8080 ([quick link](http://127.0.0.1:8080)).\n\n\n## Configuration samples explained:\n\nThe full working example can be found in [collector.yaml](./configuration/collector.yaml). \n<hr>\n\n1. Find EC2 instances has less that 5% CPU usage in the last week.\n```yaml\nec2:\n    - description: EC2 CPU utilization \n        metrics:\n        - name: CPUUtilization\n            statistic: Maximum\n        period: 24h \n        start_time: 168h # 24h * 7d\n        constraint:\n        operator: \"<\"\n        value: 5\n```\n\n2. Find RDS DB's that had zero connections in the last week. \n\n```yaml\nrds:\n    - description: Database connection count\n        metrics: \n        ### Start: Cloudwatch metrics ###\n        - name: DatabaseConnections\n            statistic: Sum\n        period: 24h  \n        start_time: 168h # 24h * 7d\n        ### End: Cloudwatch metrics ###\n        constraint:\n        operator: \"==\"\n        value: 0\n```\n\n3. Find ELB's that had zero traffic (requests) in the last week. \n\n```yaml\nelb:\n    - description: Loadbalancer requests count\n        ### Start: Cloudwatch metrics ###\n        metrics:\n        - name: RequestCount\n            statistic: Sum\n        period: 24h \n        start_time: 168h # 24h * 7d \n        ### End: Cloudwatch metrics ###\n        constraint:\n        operator: \"==\"\n        value: 0   \n```\n4. Find Application ELB's that had zero traffic (requests) in the last week. \n\n```yaml\n      elbv2:\n        - description: Application Loadbalancer RequestCount\n          metrics:\n            - name: RequestCount\n              statistic: Sum\n          period: 24h \n          start_time: 168h # 24h * 7d \n          constraint:\n            operator: \"==\"\n            value: 0    \n```\n\n5. Find a difference of more than 10% between DynamoDB Provisioned RCUs to Consumed RCUs. \n```yaml\ndynamodb:\n    - description: Provisioned read capacity units\n        ### Start: Cloudwatch metrics ###\n        metrics:\n        - name: ConsumedReadCapacityUnits\n            statistic: Sum\n        - name: ProvisionedReadCapacityUnits\n            statistic: Sum\n        period: 24h \n        start_time: 168h # 24h * 7d\n        ### End: Cloudwatch metrics ###\n        constraint:\n        formula: ConsumedReadCapacityUnits / ProvisionedReadCapacityUnits * 100 # specify any formula \n        operator: \"<\"\n        value: 10\n```\n\n## Running the tests\n\n```\n$ make test\n\n$ make test-html\n```\n\n### Release New Version\n\nTo release a new version run the command: \n\n```shell\n$ make release\n```\n\n## Built With\n\n* [GO](https://golang.org/)\n* [AWS SDK](https://aws.amazon.com/tools/) \n\n## Contributing\n\nAll pull requests and issues are more then welcome! \nPlease see [Contribution guidelines](./CONTRIBUTING.md). \n",
  "permissions": {
    "read": true,
    "write": false,
    "admin": false
  },
  "media_types": [
    "application/vnd.docker.container.image.v1+json"
  ],
  "content_types": [
    "image"
  ]
}