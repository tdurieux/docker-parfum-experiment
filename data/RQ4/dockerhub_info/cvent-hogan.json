{
  "user": "cvent",
  "name": "hogan",
  "namespace": "cvent",
  "repository_type": "image",
  "status": 1,
  "status_description": "active",
  "description": "Customized handlebars wrapper, with config inheritance",
  "is_private": false,
  "is_automated": true,
  "can_edit": false,
  "star_count": 0,
  "pull_count": 9930,
  "last_updated": "2021-07-20T17:03:52.520581Z",
  "date_registered": "2018-05-15T19:56:01.750363Z",
  "collaborator_count": 0,
  "affiliation": null,
  "hub_user": "cvent",
  "has_starred": false,
  "full_description": "[![Build Status](https://travis-ci.org/cvent/hogan.svg?branch=master)](https://travis-ci.org/cvent/hogan)\n[![Build status](https://ci.appveyor.com/api/projects/status/xtdavsrk8fs27uox/branch/master?svg=true)](https://ci.appveyor.com/project/jonathanmorley/hogan/branch/master)\n\n# hogan\n\n## Purpose\n\nThe purpose of this project is to generate config overrides so that we can keep a template up to date, and populate values on the fly with ease at build time.\n\n## Installation\n\nGrab a binary for your OS from the [latest release](https://github.com/cvent/hogan/releases/latest), and put it somewhere in your PATH.\n\n### MacOS\n\n```sh\nbrew tap cvent/tap\nbrew install hogan\n```\n\n### Linux\n\n```sh\ncurl -LSfs https://japaric.github.io/trust/install.sh | sh -s -- --git cvent/hogan --target x86_64-unknown-linux-gnu --to /usr/local/bin\n```\n\n## Tests\n\nYou can run the tests via `cargo test`. The tests should always pass and all new behavior should be tested.\n\n## Usage\n\nOnce you have installed hogan, you can execute it as `hogan`.\nSome of the arguments are described below:\n\n * `environments-filter`: Regex specifying which environment(s) to update.\n * `templates`: The directory to use for searching for template files (recursively).\n * `configs`: The directory where hogan-formatted config files can be found (These are config.ENVIRONMENT.json files)\n\n## Example\n\n```\n    hogan transform --environments-filter ENVIRONMENT --templates . --configs ./Configs\n```\n\nYou can also create an alias of the above command and add to bash_profile\n```\n    hg() { hogan transform --configs ~/cventcode/hogan-configs/configs/ --templates . --templates-filter \"$1\" --environments-filter \"$2\"; }\n```\nand then use the alisa to generate config like\n```\n    hg tempate.yaml prod\n```\nthis will generate the config for prod environment using template.yaml as template file.\n\n## Custom handlers in config files\n\nThe following custom handlers exist\n\n### `comma-list`\nAllows an array of objects to be turned into a comma separated list by passing in an array:\n\n```rust,skt-helpers\n// Given a config of:\nlet config = json!({\n  \"Memcache\": {\n    \"Servers\": [\n      {\n        \"Endpoint\": \"192.168.1.100\",\n        \"Port\": \"1122\"\n      },\n      {\n        \"Endpoint\": \"192.168.1.101\",\n        \"Port\": \"1122\"\n      },\n      {\n        \"Endpoint\": \"192.168.1.102\",\n        \"Port\": \"1122\"\n      }\n    ]\n  }\n});\n\n// and a template of:\nlet template = \"{{#comma-list Memcache.Servers}}{{Endpoint}}:{{Port}}{{/comma-list}}\";\n\n// The helper will transform it into:\nlet transformed = \"192.168.1.100:1122,192.168.1.101:1122,192.168.1.102:1122\";\n```\n\n### `equal`, `eq`\nLike `if`, but compares the two arguments provided for equality:\n\n```rust,skt-helpers\n// Given a config of:\nlet config = json!({\n  \"Region\": {\n    \"Key\": \"TEST\"\n  }\n});\n\n// and a template of:\nlet template = r#\"{{#equal Region.Key \"TEST\"}}True{{else}}False{{/equal}}\"#;\n\n// The helper will transform it into:\nlet transformed = \"True\";\n```\n\n### `or`\nLogical OR two parameters:\n\n```rust,skt-helpers\n// Given a config of:\nlet config = json!({\n  \"Region\": {\n    \"Key\": \"TEST\"\n  }\n});\n\n// and a template of:\nlet template = r#\"{{#or (eq Region.Key \"TEST\") (eq Region.Key \"TEST2\")}}True{{else}}False{{/or}}\"#;\n\n// The helper will transform it into:\nlet transformed = \"True\";\n```\n\n### `yaml-string`\nEscapes a string for valid injection into a Yaml file:\n\n```rust,skt-helpers\n// Given a config of:\nlet config = json!({\n  \"app\": {\n    \"path\": \"C:\\\\Program Files\\\\My App\"\n  }\n});\n\n// and a template of:\nlet template = r#\"windows:\n  path: \"{{yaml-string app.path}}\"\"#;\n\n// The helper will transform it into:\nlet transformed = r#\"windows:\n  path: \"C:\\\\Program Files\\\\My App\"\"#;\n```\n\n### `url-rm-slash`\nRemoves the trailing slash on an endpoint:\n\n```rust,skt-helpers\n// Given a config of:\nlet config = json!({\n  \"SlashService\": {\n    \"endpoint\": \"https://slash.com/\"\n  }\n});\n\n// and a template of:\nlet template = \"{{url-rm-slash SlashService.endpoint}}\";\n\n// The helper will transform it into:\nlet transformed = \"https://slash.com\";\n```\n\n### `url-add-slash`\nAdds the trailing slashes on an endpoint:\n\n```rust,skt-helpers\n// Given a config of:\nlet config = json!({\n  \"NonSlashService\": {\n    \"endpoint\": \"https://nonslash.com\"\n  }\n});\n\n// and a template of:\nlet template = \"{{url-add-slash NonSlashService.endpoint}}\";\n\n// The helper will transform it into:\nlet transformed = \"https://nonslash.com/\";\n```\n\n### `url-rm-path`\nRemoves the last slash plus content to the end of the string:\n\n```rust,skt-helpers\n// Given a config of:\nlet config = json!({\n  \"PathService\": {\n    \"endpoint\": \"https://path.com/path/remove-this\"\n  }\n});\n\n// and a template of:\nlet template = \"{{url-rm-path PathService.endpoint}}\";\n\n// The helper will transform it into:\nlet transformed = \"https://path.com/path\";\n```\n\n## Helpful Information\n\n - [Handlebars](http://handlebarsjs.com/)\n",
  "permissions": {
    "read": true,
    "write": false,
    "admin": false
  },
  "media_types": [
    "application/vnd.docker.container.image.v1+json"
  ],
  "content_types": [
    "image"
  ]
}