{
  "user": "rmlio",
  "name": "yarrrml-parser",
  "namespace": "rmlio",
  "repository_type": "image",
  "status": 1,
  "status_description": "active",
  "description": "",
  "is_private": false,
  "is_automated": false,
  "can_edit": false,
  "star_count": 0,
  "pull_count": 1019,
  "last_updated": "2022-10-03T09:43:25.676063Z",
  "date_registered": "2020-07-15T12:52:52.632301Z",
  "collaborator_count": 0,
  "affiliation": null,
  "hub_user": "rmlio",
  "has_starred": false,
  "full_description": "# YARRRML Parser\n\nThis library allows to convert [YARRRML](https://w3id.org/yarrrml) rules to [RML](http://rml.io) or [R2RML](https://www.w3.org/TR/r2rml/) rules.\n\n## Install\n\n- `npm i -g @rmlio/yarrrml-parser`\n\n## Usage\n\n### CLI\n\nThere are two CLI functions, `yarrrml-parser` and `yarrrml-generator`.\nUsing the `--help` flag will show all possible commands.\n\n#### yarrrml-parser\n\nIf you want to generate RML rules from a YARRRML document,\nyou do the following: `yarrrml-parser -i rules.yml`.\nThe rules will be written to standard output.\nIf you want to write them to a file, you can add the `-o` option.\nBy default, the parser generates RML rules.\nIf you want to generate R2RML rules add `-f R2RML`.\nIf you want to use `rr:class` instead of Predicate Object Maps, use the `-c` flag.\nYou can use multiple input files too: `yarrrml-parser -i rules-1.yml -i rules-2.yml`.\nThey are converted to a single RML document.\nNote that the keys in `prefixes`, `sources`, and `mappings` have to be unique across all files.\n`base` can only be set once.\nYou find an [`test/multiple-input-files`](test/multiple-input-files).\nYou can overwrite external references via the `-e`.\nAn external reference starts with `_`.\nFor example, `-e name=John` will replace all occurrences of `$(_name)` with `John`.\nRepeat `-e` for multiple references.\nWhen you do not provide a value for an external reference,\nthe reference will not be replaced.\nYou find an example in [`test/template-escape`](test/template-escape).\nIf you want to use for example `$(_name)` as both an external reference and a normal reference,\nthen you add a `\\` for the latter resulting in `$(\\_name)` for the latter.\n\n#### yarrrml-generator\n\nIf you want to generate YARRRML rules from an RML document, you do the following: `yarrrml-generator -i rules.rml.ttl`.\nThe rules will be written to standard output.\nIf you want to write them to a file, you can add the `-o` option.\n\n### Library\n\n`npm i --save @rmlio/yarrrml-parser`\n\n```javascript\nlet yarrrml = require('@rmlio/yarrrml-parser/lib/rml-generator');\n\nconst yaml = \"[yarrrml string]\";\nconst y2r = new yarrrml();\nconst triples = y2r.convert(yaml);\n\nif ( y2r.getLogger().has('error') ) {\n   const logs = y2r.getLogger().getAll();\n   ...\n}\n```\n\n## Development\n\n- Clone this repo.\n- Install the dependencies via `npm i`\n- Update code, if needed.\n- Run the tests via `npm test`\n- Make the [CLI](#cli) (based on the code in the cloned repo)\navailable system-wide via `npm link` (optional).\n\n## Docker\n\nRun (from [DockerHub](https://hub.docker.com/repository/docker/rmlio/yarrrml-parser)):\n\n```bash\ndocker run --rm -it -v $(pwd)/resources:/data rmlio/yarrrml-parser:latest -i /data/test.yarrr.yml\n```\n\nBuild from source:\n\n```bash\ndocker build -t yarrrml-parser .\n```\n\n## License\n\nThis code is copyrighted by [Ghent University â€“ imec](http://idlab.ugent.be/) and released under the [MIT license](http://opensource.org/licenses/MIT).\n",
  "permissions": {
    "read": true,
    "write": false,
    "admin": false
  },
  "media_types": [
    "application/vnd.docker.container.image.v1+json"
  ],
  "content_types": [
    "image"
  ]
}