{
  "user": "okieoth",
  "name": "yacg",
  "namespace": "okieoth",
  "repository_type": "image",
  "status": 1,
  "status_description": "active",
  "description": "model handling code generation stuff ",
  "is_private": false,
  "is_automated": false,
  "can_edit": false,
  "star_count": 0,
  "pull_count": 615,
  "last_updated": "2021-07-21T21:26:41.018393Z",
  "date_registered": "2020-04-08T19:52:53.170277Z",
  "collaborator_count": 0,
  "affiliation": null,
  "hub_user": "okieoth",
  "has_starred": false,
  "full_description": "# yacg - yet another code generation\n\nThe purpose of this project is to handle JSON schema models and generate\nstuff based on them.\n\nPossible use-case are for instance to create PlanUML class diagrams based\non the models, create bean classes based on model or more sophisticated\ncreate fully dao code with included tests. \n\nBasically it's a tool to play with model driven development ...\n\nThe general workflow is:\n1. Take a bunch of models - for this tool JSON schemas\n2. Use some suitable templates\n3. Feed all of them into the tool\n4. yacg - processes templates and models\n5. ... and produces different text outputs\n\nEven if this tool written in Python it can be used to create text output\nin every format - all depends from choosen templates.\n\nTo free the usage of yacg from too much care about dependencies, is on \nDocker Hub `https://hub.docker.com/repository/docker/okieoth/yacg/general` \nalso a docker image, from the latest master brunch push, available. \n\n```bash\n# pull the image\ndocker pull okieoth/yacg\n```\n\n# Usage\n## Basic Usage\n\nUbuntu 20.04: Attention, for some strange reasons I had to create some links manually to avoid error messages.\n\n```bash\nsudo su\nln -s /bin/python\nln -s /bin/python3\nln -s /bin/pip\n```\n\n```bash\n# basic preparation\nsudo apt-get install python3-venv\npip install --user pipenv\n\npipenv --python 3.8\npipenv install\npipenv shell\n\n# in case of errors to create virtual env look here\n# https://askubuntu.com/questions/1241993/why-i-cannot-create-pipenv-shell-in-ubuntu-20-04-lts-with-python3-8\n\n# do a demo run ... and create plantuml\npipenv run python3 yacg.py \\\n    --models resources/models/json/yacg_config_schema.json \\\n             resources/models/json/yacg_model_schema.json \\\n    --singleFileTemplates plantUml=stdout\n\npipenv run python3 yacg.py \\\n    --models resources/models/json/yacg_config_schema.json \\\n             resources/models/json/yacg_model_schema.json \\\n    --usedFilesOnly\n\n# demo run with protobuf example output\npipenv run python3 yacg.py \\\n    --models resources/models/json/yacg_config_schema.json \\\n             resources/models/json/yacg_model_schema.json \\\n    --singleFileTemplates protobuf=stdout\n\n\n# run a test\npipenv run python3 -m unittest -v tests/model/test_model.py\n\n# run all tests\npipenv run python3 -m unittest discover tests \"test_*.py\"\n```\n## Docker\n```bash\n# build a docker images\n./bin/buildDockerImage.sh\n\n# run the docker image\ncd REPO_PATH\ndocker run -u $(id -u ${USER}):$(id -g ${USER}) -v `pwd`/resources:/resources --rm -t okieoth/yacg:0.13.0 \\\n    --models /resources/models/json/yacg_config_schema.json \\\n             /resources/models/json/yacg_model_schema.json \\\n    --singleFileTemplates plantUml=stdout\n\ndocker run -u $(id -u ${USER}):$(id -g ${USER}) -v `pwd`/resources:/resources --rm -t okieoth/yacg:0.13.0 \\\n    --models /resources/models/json/yacg_config_schema.json \\\n             /resources/models/json/yacg_model_schema.json \\\n    --singleFileTemplates xsd=stdout\n\n```\n\n# Documentation\n\n## Mako templates\n* Usage: https://docs.makotemplates.org/en/latest/usage.html\n* Syntax: https://docs.makotemplates.org/en/latest/syntax.html\n\n# Visual Studio Code\nThis project is written with vscode as editor. It contains also the .vscode configuration for the development.\n\nMost interesting are in the debug section to pre-configured debugging tasks for the included tests.\n\n* 'current tests' expects a open test file in the editor, and if this configuration is started, all test from this file are executed.\n* 'all tests' let run all tests in the 'tests' folder of the repository\n\n# Increment model versions\nThis project contains also a script to increment model versions. I has the ability to increment the version of one schema and searching for additional dependencies of that schema, and increment there the version too.\n\n## Usage\n```bash\n# see the possible parameters of the script\npipenv run python3 incrementVersion.py\n\n# do an example dry-run\npipenv run python3 incrementVersion.py --model resources/models/json/yacg_model_schema.json --version minor\n```\n\n\n# Models to yaml\nThis project contains also a script to convert JSON schemas to the yaml format. Quick'n Dirty :D\n\n## Usage\n```bash\n# see the possible parameters of the script\npipenv run python3 modelToYaml.py --help\n\n# do an example dry-run\npipenv run python3 modelToYaml.py --model resources/models/json/yacg_model_schema.json --dryRun\n\n# feed stdin to convert\ncat resources/models/json/yacg_model_schema.json | pipenv run python3 modelToYaml.py --stdin --dryRun\n```\n\n# Models to JSON\nThis project contains also a script to convert yaml schemas to the JSON format. Quick'n Dirty :D\n\n## Usage\n```bash\n# see the possible parameters of the script\npipenv run python3 modelToJson.py --help\n\n# do an example dry-run\npipenv run python3 modelToJson.py --model resources/models/yaml/yacg_config_schema.yaml --dryRun\n\n# feed stdin to convert\ncat resources/models/yaml/yacg_config_schema.yaml | pipenv run python3 modelToJson.py \\\n    --stdin --dryRun\n```\n\n# Some Last Words\nThis project is a spare time project - with all its pros and cons. The development of this project is done under a Linux OS, so I have no clue how it is working on Windows machines. \n",
  "permissions": {
    "read": true,
    "write": false,
    "admin": false
  },
  "media_types": [
    "application/vnd.docker.container.image.v1+json"
  ],
  "content_types": [
    "image"
  ]
}