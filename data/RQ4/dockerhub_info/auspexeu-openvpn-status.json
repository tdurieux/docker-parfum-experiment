{
  "user": "auspexeu",
  "name": "openvpn-status",
  "namespace": "auspexeu",
  "repository_type": "image",
  "status": 1,
  "status_description": "active",
  "description": "A web-based application to monitor OpenVPN server client connections in real time.",
  "is_private": false,
  "is_automated": true,
  "can_edit": false,
  "star_count": 2,
  "pull_count": 87553,
  "last_updated": "2020-06-12T12:54:04.100412Z",
  "date_registered": "2018-08-06T08:10:10.696925Z",
  "collaborator_count": 0,
  "affiliation": null,
  "hub_user": "auspexeu",
  "has_starred": false,
  "full_description": "# OpenVPN Status [![Dependencies](https://img.shields.io/david/auspexeu/openvpn-status.svg?style=flat-square)](https://david-dm.org/auspexeu/openvpn-status) [![Greenkeeper badge](https://badges.greenkeeper.io/AuspeXeu/openvpn-status.svg)](https://greenkeeper.io/)\n\nA web-based application to monitor (multiple) [OpenVPN](https://openvpn.net/index.php/open-source/overview.html) servers.\n\nFeatures\n* Multi server support\n* WebSocket based real-time events\n* Map view\n* Disconnect clients remotely\n* Persistent event log\n* Mobile friendly\n* Full material design\n\n### Client panel\n![Client panel](https://raw.githubusercontent.com/AuspeXeu/openvpn-status/master/clients.png)\n\n### Map view\n![Map view](https://raw.githubusercontent.com/AuspeXeu/openvpn-status/master/map.png)\n\n### Event panel\n![Event panel](https://raw.githubusercontent.com/AuspeXeu/openvpn-status/master/events.png)\n\n## Pre-requisites\n\n- [x] [NodeJS](https://nodejs.org/en/download/) 10 or higher\n- [x] npm package manager\n- Windows 7 is only supported on version `4.2.12` and below\n\n# Installation\nInstallation comes in two flavours. Either from source as per the following section or you can skip to the [docker section](https://github.com/AuspeXeu/openvpn-status#docker).\n### 1. Get the source\n\n``git clone https://github.com/AuspeXeu/openvpn-status.git``\n\n### 2. Install dependencies\n\n```\ncd openvpn-status\nnpm install\n```\n\n### 3. Configuration\n\nThe configuration is located in ``cfg.json``.\n\n| Option   | Default       | Description  |\n| -------- |:-------------:| ------------ |\n| port     | `3013` | Port on which the server will be listening. |\n| bind     | `127.0.0.1` | Address to which the server will bind to. Change to `0.0.0.0` to make available on all interfaces. |\n| servers  | `[{\"name\": \"Server\",\"host\": \"127.0.0.1\",\"man_port\": 7656, \"man_pwd\": \"1337\", \"netmask\": \"0.0.0.0/0\"}]` | Array of servers. `man_pwd` is only needed if a password is set as per the [documentation](https://openvpn.net/community-resources/reference-manual-for-openvpn-2-0/, `netmask` is only needed if connecing networks to filter entries) |\n| username | `admin` | User for basic HTTP authentication. Change to `''` or `false` to disable. |\n| password | `admin` | Password for basic HTTP authentication. |\n| web.dateFormat | `HH:mm:ss - DD.MM.YY` | DateTime format used in the web frontend ([options](http://momentjs.com/docs/#/displaying/format/)).|\n\nExample:\n```\n{\n  \"port\": 3013,\n  \"bind\": \"127.0.0.1\",\n  \"servers\": [\n    {\"id\": 0, \"name\": \"Server A\", \"host\": \"127.0.0.1\",\"man_port\": 7656},\n    {\"id\": 1, \"name\": \"Server B\", \"host\": \"127.0.0.1\",\"man_port\": 6756}\n  ],\n  \"username\": \"admin\",\n  \"password\": \"CHANGE THIS - DO NOT USE ANY DEFAULT HERE\",\n  \"web\": {\n    \"dateFormat\": \"HH:mm - DD.MM.YY\"\n  }\n}\n```\n\n### 4. OpenVPN configuration\n\nAdd the following line to your configuration file, e.g., `server.conf`. This will start the management console on port `7656` and make it accessible on `127.0.0.1`, i.e. this machine. Optionally, a password file can be specified as per the openvpn [manual](https://openvpn.net/community-resources/reference-manual-for-openvpn-2-0/).\n\n```\nmanagement 127.0.0.1 7656 // As specified in cfg.json for this server\n```\n\nRestart your OpenVPN server.\n\n### 5. Build\n\nBefore the application is ready to run, the frontend needs to be built. This is done using npm.\n\n``npm run build``\n\n# Run\nThis makes the application available on http://127.0.0.1:3013.\n\n### Manually\n```\nnode server.js\n```\n\n### As PM2 service\n```\nsudo npm install pm2 -g\npm2 start pm2.json\npm2 save\n```\n\n### As Systemd service\n\n```\n[Unit]\nDescription=OpenVPN Status\nAfter=network.target\n\n[Service]\nUser=root\nWorkingDirectory=/home/pi/backend \\\\ Adjust this path\nExecStart=/usr/local/bin/node server.js \\\\ Adjust this path\nRestart=on-failure\nRestartSec=5s\n\n[Install]\nWantedBy=multi-user.target\n\n```\n\n## (optional) Running the service behind nginx as a reverse proxy\n\nIn order to integrate the service into your webserver you might want to use nginx as a reverse proxy. The following configuration assumes that the port is set to `3013` as it is by default.\n\n```\nserver {\n  listen 80;\n  server_name [domain];\n\n  location / {\n    proxy_pass http://127.0.0.1:3013\n    proxy_set_header X-Forwarded-Proto $scheme;\n    proxy_http_version 1.1;\n    proxy_set_header Upgrade $http_upgrade;\n    proxy_set_header Connection \"upgrade\";\n    proxy_read_timeout 86400;\n  }\n}\n```\n\n# Docker\n### Server configurations\nAs shown in the `docker-compose.yml` below, the folder server will be mounted to the host's file system. Upon boot, `openvpn-status` scans that folder for `.json` files and adds them as servers. An example of such a file is.\n\n```\n{\"name\": \"Server\",\"host\": \"127.0.0.1\",\"man_port\": 7656}\n```\n\n### Ports\n\n- **3013**\n\n### Environment Variables\n\n- STATUS_USERNAME\n- STATUS_PASSWORD\n- STATUS_WEB_FORMAT\n\n### Docker-compose.yml\n\n```yml\n# Full example:\n# https://raw.githubusercontent.com/AuspeXeu/openvpn-status/master/docker-compose.sample.yml\n\nversion: '2'\nservices:\n  openvpn-status:\n    image: auspexeu/openvpn-status\n    container_name: openvpn-status\n    environment:\n      - STATUS_USERNAME=admin\n      - STATUS_PASSWORD=<CHANGE THIS - DO NOT USE ANY DEFAULT HERE>\n      - STATUS_WEB_FORMAT='HH:mm:ss - DD.MM.YY'\n    volumes:\n      - ./servers:/usr/src/app/servers'\n    ports:\n      - 8080:3013\n    restart: \"unless-stopped\"\n\n```\n\n## Browser support\nFind a list of supported browsers [here](https://vuetifyjs.com/en/getting-started/quick-start#supported-browsers)\n\n## Acknowledgements\n\n### Maxmind\n\nThis product includes GeoLite2 data created by MaxMind, available from\n<a href=\"https://www.maxmind.com\">https://www.maxmind.com</a>.\n\n### GoSquared\n\n[GoSquared](https://www.gosquared.com) provides the flag icons for this project. The source for the flag icons can be found [here](https://www.gosquared.com/resources/flag-icons/).\n",
  "permissions": {
    "read": true,
    "write": false,
    "admin": false
  },
  "media_types": [
    "application/vnd.docker.container.image.v1+json"
  ],
  "content_types": [
    "image"
  ]
}