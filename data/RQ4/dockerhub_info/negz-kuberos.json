{
  "user": "negz",
  "name": "kuberos",
  "namespace": "negz",
  "repository_type": "image",
  "status": 1,
  "status_description": "active",
  "description": "An OIDC authentication helper for Kubernetes' kubectl - https://github.com/negz/kuberos",
  "is_private": false,
  "is_automated": false,
  "can_edit": false,
  "star_count": 1,
  "pull_count": 1344057,
  "last_updated": "2018-11-05T00:48:27.335572Z",
  "date_registered": "2017-04-20T21:23:26.154327Z",
  "collaborator_count": 0,
  "affiliation": null,
  "hub_user": "negz",
  "has_starred": false,
  "full_description": "https://github.com/negz/kuberos\n\nKubernetes supports several authentication methods, a popular one of which is OIDC. The kubectl commandline tool can be configured to use OIDC authentication, including automatically refreshing its token on invocation. In order to enable this functionality kubectl must be configured with the following parameters:\n\n- A client ID\n- A client secret\n- An issuer URL\n- An ID token\n- A refresh token\n\nThe latter two of these parameters must be aquired by performing an initial OIDC authentication outside of kubectl. OIDC is an awkward authentication method for a commandline tool as it is entirely browser based. Existing implementations (see Alternatives) provide CLI tools to handle this initial authentication. These CLIs will typically require the user connect to localhost in their Browser to perform the initial authentication.\n\nKuberos is designed to instead run as a hosted service. It authenticates users against an OIDC provider, returning a JSON payload of the parameters required by kubectl. Kuberos provides a simple frontend that links to a ~/.kube/config file generated from a supplied template of clusters. It also details how to manually add a user and context to a cluster, and how to use kubectl.",
  "permissions": {
    "read": true,
    "write": false,
    "admin": false
  },
  "media_types": [
    "application/vnd.docker.container.image.v1+json"
  ],
  "content_types": [
    "image"
  ]
}