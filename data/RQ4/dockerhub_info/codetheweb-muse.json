{
  "user": "codetheweb",
  "name": "muse",
  "namespace": "codetheweb",
  "repository_type": "image",
  "status": 1,
  "status_description": "active",
  "description": "🎧 a self-hosted midwestern Discord music bot that doesn't suck ",
  "is_private": false,
  "is_automated": false,
  "can_edit": false,
  "star_count": 2,
  "pull_count": 413733,
  "last_updated": "2023-01-06T10:17:08.891151Z",
  "date_registered": "2020-03-17T17:31:38.170985Z",
  "collaborator_count": 0,
  "affiliation": null,
  "hub_user": "codetheweb",
  "has_starred": false,
  "full_description": "<p align=\"center\">\n  <img width=\"250\" height=\"250\" src=\"https://raw.githubusercontent.com/codetheweb/muse/master/.github/logo.png\">\n</p>\n\n🚨: v1.0.0 was a breaking change. Please take a look at the [release notes](https://github.com/codetheweb/muse/releases/tag/v1.0.0) for upgrade instructions\n\n------\n\nMuse is a **highly-opinionated midwestern self-hosted** Discord music bot **that doesn't suck**. It's made for small to medium-sized Discord servers/guilds (think about a group the size of you, your friends, and your friend's friends).\n\n![Hero graphic](.github/hero.png)\n\n## Features\n\n- 🎥 Livestreams\n- ⏩ Seeking within a song/video\n- 💾 Local caching for better performance\n- 📋 No vote-to-skip - this is anarchy, not a democracy\n- ↔️ Autoconverts playlists / artists / albums / songs from Spotify\n- ↗️ Users can add custom shortcuts (aliases)\n- 1️⃣ Muse instance supports multiple guilds\n- ✍️ Written in TypeScript, easily extendable\n- ❤️ Loyal Packers fan\n\n## Running\n\nMuse is written in TypeScript. You can either run Muse with Docker (recommended) or directly with Node.js. Both methods require API keys passed in as environment variables:\n\n- `DISCORD_TOKEN` can be acquired [here](https://discordapp.com/developers/applications) by creating a 'New Application', then going to 'Bot'.\n- `SPOTIFY_CLIENT_ID` and `SPOTIFY_CLIENT_SECRET` can be acquired [here](https://developer.spotify.com/dashboard/applications) with 'Create a Client ID'.\n- `YOUTUBE_API_KEY` can be acquired by [creating a new project](https://console.developers.google.com) in Google's Developer Console, enabling the YouTube API, and creating an API key under credentials.\n\nMuse will log a URL when run. Open this URL in a browser to invite Muse to your server. Muse will DM the server owner after it's added with setup instructions.\n\nA 64-bit OS is required to run Muse.\n\n### Versioning\n\nThe `master` branch acts as the developing / bleeding edge branch and is not guaranteed to be stable.\n\nWhen running a production instance, I recommend that you use the [latest release](https://github.com/codetheweb/muse/releases/).\n\n\n### 🐳 Docker\n\nThere are a variety of image tags available:\n- `:2`: versions >= 2.0.0\n- `:2.1`: versions >= 2.1.0 and < 2.2.0\n- `:2.1.1`: an exact version specifier\n- `:latest`: whatever the latest version is\n\n(Replace empty config strings with correct values.)\n\n```bash\ndocker run -it -v \"$(pwd)/data\":/data -e DISCORD_TOKEN='' -e SPOTIFY_CLIENT_ID='' -e SPOTIFY_CLIENT_SECRET='' -e YOUTUBE_API_KEY='' codetheweb/muse:latest\n```\n\nThis starts Muse and creates a data directory in your current directory.\n\n**Docker Compose**:\n\n```yaml\nversion: '3.4'\n\nservices:\n  muse:\n    image: codetheweb/muse:latest\n    restart: always\n    volumes:\n      - ./muse:/data\n    environment:\n      - DISCORD_TOKEN=\n      - YOUTUBE_API_KEY=\n      - SPOTIFY_CLIENT_ID=\n      - SPOTIFY_CLIENT_SECRET=\n```\n\n### Node.js\n\n**Prerequisites**:\n* Node.js (16.x is recommended because it's the current LTS version)\n* ffmpeg (4.1 or later)\n\n1. `git clone https://github.com/codetheweb/muse.git && cd muse`\n2. Copy `.env.example` to `.env` and populate with values\n3. I recommend checking out a tagged release with `git checkout v[latest release]`\n4. `yarn install` (or `npm i`)\n5. `yarn start` (or `npm run start`)\n\n**Note**: if you're on Windows, you may need to manually set the ffmpeg path. See [#345](https://github.com/codetheweb/muse/issues/345) for details.\n\n## ⚙️ Additional configuration (advanced)\n\n### Cache\n\nBy default, Muse limits the total cache size to around 2 GB. If you want to change this, set the environment variable `CACHE_LIMIT`. For example, `CACHE_LIMIT=512MB` or `CACHE_LIMIT=10GB`.\n\n### Custom Bot Status\n\nIn the default state, Muse has the status \"Online\" and the text \"Listening to Music\". You can change the status through environment variables:\n\n- `BOT_STATUS`:\n  - `online` (Online)\n  - `idle` (Away)\n  - `dnd` (Do not Disturb)\n\n- `BOT_ACTIVITY_TYPE`:\n  - `PLAYING` (Playing XYZ)\n  - `LISTENING` (Listening to XYZ)\n  - `WATCHING` (Watching XYZ)\n  - `STREAMING` (Streaming XYZ)\n\n- `BOT_ACTIVITY`: the text that follows the activity type\n\n- `BOT_ACTIVITY_URL` If you use `STREAMING` you MUST set this variable, otherwise it will not work! Here you write a regular YouTube or Twitch Stream URL.\n\n#### Examples\n\n**Muse is watching a movie and is DND**:\n- `BOT_STATUS=dnd`\n- `BOT_ACTIVITY_TYPE=WATCHING`\n- `BOT_ACTIVITY=a movie`\n\n**Muse is streaming Monstercat**:\n- `BOT_STATUS=online`\n- `BOT_ACTIVITY_TYPE=STREAMING`\n- `BOT_ACTIVITY_URL=https://www.twitch.tv/monstercat`\n- `BOT_ACTIVITY=Monstercat`\n\n### Bot-wide commands\n\nIf you have Muse running in a lot of guilds (10+) you may want to switch to registering commands bot-wide rather than for each guild. (The downside to this is that command updates can take up to an hour to propagate.) To do this, set the environment variable `REGISTER_COMMANDS_ON_BOT` to `true`.\n",
  "permissions": {
    "read": true,
    "write": false,
    "admin": false
  },
  "media_types": [
    "application/vnd.docker.distribution.manifest.list.v2+json",
    "application/vnd.docker.container.image.v1+json"
  ],
  "content_types": [
    "image"
  ]
}