{
  "user": "zooz",
  "name": "predator",
  "namespace": "zooz",
  "repository_type": "image",
  "status": 1,
  "status_description": "active",
  "description": "Distributed performance testing platform for APIs.",
  "is_private": false,
  "is_automated": false,
  "can_edit": false,
  "star_count": 0,
  "pull_count": 395504,
  "last_updated": "2021-09-23T07:14:47.514748Z",
  "date_registered": "2019-02-07T13:51:14.175799Z",
  "collaborator_count": 0,
  "affiliation": null,
  "hub_user": "zooz",
  "has_starred": false,
  "full_description": "# Predator\n## Distributed performance testing platform for APIs.\n\nPredator manages the entire lifecycle of stress-testing servers, from creating performance tests, to running these tests on a scheduled and on-demand basis, and finally viewing the test results in a highly informative and live report.\n\nIt has a simple, one-click installation, built with support for Kubernetes, DC/OS and Docker Engine, and can persist the created performance tests and their reports in 5 different databases. It also supports running distributed load out of the box. Bootstrapped with a user-friendly UI alongside a simple REST API, Predator helps developers simplify the performance testing regime.\n\n[**Installation**](https://www.predator.dev/#installation) &nbsp; |\n&nbsp; [**Site**](https://predator.dev) &nbsp; |\n&nbsp; [**Documentation**](https://zooz.github.io/predator/about.html) &nbsp; |\n&nbsp; [**API Reference**](https://zooz.github.io/predator//indexapiref.html) | \n&nbsp; [**API Tests Examples**](https://documenter.getpostman.com/view/220627/S1TYTvP2?version=latest)\n\n## Features\n- **Distributed load**:  Predator supports an unlimited number of load generators that produce multiple load runners concurrently.\n\n- **Real time reports**: Predator aggregates all concurrent runs into a single beautiful report in real time (latency, rps, status codes and more).\n\n- **Built for the cloud**:  Predator is built to take advantage of Kubernetes and DC/OS. It's integrated with those platforms and can manage the load generators lifecycles by itself.\n\n- **One click installation**:  Predator can be installed with just one click in Kubernetes and DC/OS, or on any other machine running Docker.\n\n- **Supports 5 Different databases**: Predator provides out-of-the box functionality for persisting data in Cassandra, Postgres, MySQL, MSSQL and SQLITE.\n\n- **Scheduled jobs**: Predator can run recurring tests using cron expressions.\n\n- **3rd partry metrics**: Predator comes integrated with Prometheus and Influx. Simply configure it through the predator REST API or using the UI.\n\n- **Rich UI**: Predator offers a rich UI along with a powerful REST API.\n\n- **Based on [artillery.io](https://artillery.io/docs/http-reference)**: Predator uses artillery as its \nload engine to fire the requests. The schema for creating tests via the Predator REST API is based on the artillery schema.\n\n\n### Running in docker\n\nWithout persisted storage:\n\n```docker run -d -e JOB_PLATFORM=DOCKER -e INTERNAL_ADDRESS=http://$MACHINE_IP:80/v1 -p 80:80 --name predator -v /var/run/docker.sock:/var/run/docker.sock zooz/predator```\n\nWith persisted storage:\n\n```docker run -d -e SQLITE_STORAGE=db/predator -e JOB_PLATFORM=DOCKER -e INTERNAL_ADDRESS=http://$MACHINE_IP:80/v1 -p 80:80 --name predator -v /var/run/docker.sock:/var/run/docker.sock -v /tmp/predator:/usr/db zooz/predator```\n\nwhere $MACHINE_IP is the local ip address of your machine (not localhost, but actual ip address - it is your local network address).",
  "permissions": {
    "read": true,
    "write": false,
    "admin": false
  },
  "media_types": [
    "application/vnd.docker.container.image.v1+json"
  ],
  "content_types": [
    "image"
  ]
}