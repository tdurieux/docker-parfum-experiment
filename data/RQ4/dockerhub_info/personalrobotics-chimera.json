{
  "user": "personalrobotics",
  "name": "chimera",
  "namespace": "personalrobotics",
  "repository_type": "image",
  "status": 1,
  "status_description": "active",
  "description": "Chimera is a tool for generating language bindings (primarily Python) from C/C++ header files.",
  "is_private": false,
  "is_automated": true,
  "can_edit": false,
  "star_count": 2,
  "pull_count": 1008,
  "last_updated": "2020-08-22T14:27:39.523563Z",
  "date_registered": "2018-05-27T16:58:07.028426Z",
  "collaborator_count": 0,
  "affiliation": null,
  "hub_user": "personalrobotics",
  "has_starred": false,
  "full_description": "# chimera\n\n[![C/C++ CI](https://github.com/personalrobotics/chimera/workflows/C/C++%20CI/badge.svg)](https://github.com/personalrobotics/chimera/actions)\n[![Build Status](https://travis-ci.org/personalrobotics/chimera.svg?branch=master)](https://travis-ci.org/personalrobotics/chimera)\n[![Build Status](https://dev.azure.com/personalrobotics/chimera/_apis/build/status/personalrobotics.chimera?branchName=master)](https://dev.azure.com/personalrobotics/chimera/_build/latest?definitionId=2&branchName=master)\n[![codecov](https://codecov.io/gh/personalrobotics/chimera/branch/master/graph/badge.svg)](https://codecov.io/gh/personalrobotics/chimera)\n\n> ##### chi·me·ra\n>\n> ##### /kīˈmirə,kəˈmirə/ [![speaker][2]][1]\n>\n> _*informal*, noun_\n>\n> 1.  a thing that is hoped or wished for but in fact is illusory or impossible to achieve.\n> 2.  a utility to generate Boost.Python bindings for C++ code.\n\nChimera is a tool for generating Boost.Python/Pybind11 bindings from C/C++ header files.\nIt uses the Clang/LLVM toolchain, making it capable of automatically handling\nfairly complex source files.\n\n## Usage\n\n```bash\n$ ./chimera -c <yaml_config_file> -o <output_path> my_cpp_header1.h my_cpp_header2.h -- [compiler args]\n```\n\n## Installation\n\n### On Ubuntu using `apt`\n\nChimera provides Ubuntu packages for Xenial (16.04 LTS), Bionic (18.04 LTS), Eoan (19.10), and Focal (20.04).\n\n**Xenial and greater**\n\n```shell\n$ sudo add-apt-repository ppa:personalrobotics/ppa\n$ sudo apt update\n$ sudo apt install chimera\n```\n\n### On macOS using Homebrew\n\n```shell\n# Install the Homebrew package manager\n$ /usr/bin/ruby -e \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)\"\n# Add Homebrew tap for Personal Robotics Lab software\n$ brew tap personalrobotics/tap\n# Install Chimera\n$ brew install chimera\n```\n\n## Build from Source\n\n### Requirements\n\n* libclang 6.0, 7, 8, 9\n* llvm 6.0, 7, 8, 9 (+ tools)\n* libedit\n* yaml-cpp\n* boost\n\n### On Ubuntu from Source\n\n#### Install Dependencies\n\n```bash\n$ sudo apt-get install llvm-6.0-dev llvm-6.0-tools libclang-6.0-dev libedit-dev \\\n$   libyaml-cpp-dev libboost-dev lib32z1-dev\n```\n\n#### Build Chimera\n\n```bash\n$ git clone https://github.com/personalrobotics/chimera.git\n$ cd chimera\n$ mkdir build && cd build\n$ cmake -DCMAKE_BUILD_TYPE=Release ..\n$ make\n$ sudo make install\n```\n\n### On macOS from Source\n\n```bash\n$ brew install boost llvm yaml-cpp\n$ brew install eigen  # for examples\n$ git clone https://github.com/personalrobotics/chimera.git\n$ cd chimera\n$ mkdir build && cd build\n$ PKG_CONFIG_PATH=$(brew --prefix yaml-cpp)/lib/pkgconfig cmake -DCMAKE_BUILD_TYPE=Release \\\n    -DLLVM_DIR=$(brew --prefix llvm)/lib/cmake/llvm ..\n$ make\n$ sudo make install\n```\n\n## Example\n\nLet's try running chimera on itself!\n\n```bash\n$ cd [PATH TO CHIMERA]\n$ rm -rf build && mkdir -p build && cd build\n$ cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_EXPORT_COMPILE_COMMANDS=ON ..\n$ make\n$ chimera -p . -o chimera_py_binding.cpp ../src/chimera.cpp\n```\n\n## Configuration\n\n```yaml\n# The C++ namespaces that will be extracted by Chimera\nnamespaces:\n  - dart::dynamics\n  - dart::math\n\n# Selected types that should have special handling.\n# (Not implemented yet.)\ntypes:\n  'class BodyNode':\n    convert_to: 'class BodyNodePtr'\n\n# Selected function and class declarations that need custom parameters.\nfunctions:\n  'const Eigen::Vector4d & ::dart::dynamics::Shape::getRGBA() const':\n    return_value_policy: copy_const_reference\n  'bool ::dart::dynamics::Skeleton::isImpulseApplied() const':\n    source: 'test.cpp.in'\n  'const Eigen::Vector3d & ::dart::dynamics::Shape::getBoundingBoxDim() const':\n    content: '/* Instead of implementing this function, insert this comment! */'\n  'Eigen::VectorXd & ::dart::optimizer::GradientDescentSolver::getEqConstraintWeights()': null\n    # This declaration will be suppressed.\n\nclasses:\n  '::dart::dynamics::Shape':\n    name: Shape\n    bases: []\n    noncopyable: true\n```\n\n## Troubleshooting\n\n### Is there a length limit for the keys in the configuration file of Chimera?\n\nYes. [`yaml-cpp` does not support more than 1024 characters for a single line\nkey](https://github.com/jbeder/yaml-cpp/blob/release-0.5.3/src/simplekey.cpp#L111).\nIf you want to use a longer key, then you should use [multi-line\nkey](http://stackoverflow.com/a/36295084).\n\n## License\n\nChimera is released under the 3-clause BSD license. See [LICENSE](./LICENSE) for more\ninformation.\n\n## Authors\n\nChimera is developed by Michael Koval ([**@mkoval**](https://github.com/mkoval)) and\nPras Velagapudi ([**@psigen**](https://github.com/psigen)), and it has received major\ncontributions from Jeongseok Lee ([**@jslee02**](https://github.com/jslee02)).\n\n[1]: http://audio.oxforddictionaries.com/en/mp3/chimera_gb_1.mp3\n[2]: https://upload.wikimedia.org/wikipedia/commons/7/74/Speaker_icon.svg\n",
  "permissions": {
    "read": true,
    "write": false,
    "admin": false
  },
  "media_types": [
    "application/vnd.docker.container.image.v1+json"
  ],
  "content_types": [
    "image"
  ]
}