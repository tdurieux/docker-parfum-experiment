{
  "user": "openzim",
  "name": "youtube",
  "namespace": "openzim",
  "repository_type": "image",
  "status": 1,
  "status_description": "active",
  "description": "Create a ZIM file from a Youtube channel/username/playlist",
  "is_private": false,
  "is_automated": true,
  "can_edit": false,
  "star_count": 1,
  "pull_count": 1275,
  "last_updated": "2022-12-20T21:29:54.499674Z",
  "date_registered": "2017-04-07T08:51:40.577531Z",
  "collaborator_count": 0,
  "affiliation": null,
  "hub_user": "openzim",
  "has_starred": false,
  "full_description": "Youtube2zim\n=============\n\n[![CodeFactor](https://www.codefactor.io/repository/github/openzim/youtube/badge)](https://www.codefactor.io/repository/github/openzim/youtube)\n[![Docker](https://img.shields.io/docker/v/openzim/youtube?label=docker&sort=semver)](https://hub.docker.com/r/openzim/youtube)\n[![License: GPL v3](https://img.shields.io/badge/License-GPLv3-blue.svg)](https://www.gnu.org/licenses/gpl-3.0)\n[![PyPI version shields.io](https://img.shields.io/pypi/v/youtube2zim.svg)](https://pypi.org/project/youtube2zim/)\n\n`youtube2zim` allows you to create a [ZIM file](https://openzim.org)\nfrom a Youtube Channel/Username or one-or-more Playlists.\n\nIt downloads the video (`webm` or `mp4` extension â€“ optionnaly\nrecompress them in lower-quality, smaller size), the thumbnails, the\nsubtitles and the authors' profile pictures ; then, it create a static\nHTML files folder of it before creating a ZIM off of it.\n\nRequirements\n------------\n\n* [`ffmpeg`](https://ffmpeg.org/) for video transcoding (only used with `--lower-quality`).\n* `curl` and `unzip` to install Javascript dependencies. See `get_js_deps.sh` if you want to do it manually.\n\nInstallation\n------------\n\nHere comes a few different ways to install `youtube2zim`.\n\n## Virtualenv\n\n`youtube2zim` is a Python3 software. If you are not using the\n[Docker](https://docker.com) image, you are advised to use it in a\n[virtualenv](https://virtualenv.pypa.io) to avoid installing software\ndependences on your system.\n\n```bash\nvirtualenv -p python3 ./ # Create virtualenv\nsource bin/activate      # Activate the virtualenv\npip3 install youtube2zim # Install dependencies\nyoutube2zim --help       # Display youtube2zim help\n```\n\nAt the end, call `deactivate` to quit the virtual environment.\n\nSee `requirements.txt` for the list of python dependencies.\n\n## Docker\n\n```bash\ndocker run -v my_dir:/output openzim/youtube youtube2zim --help\n```\n\n## Globally (on GNU/Linux)\n\n```bash\nsudo pip3 install -U youtube2zim\n```\n\nUsage\n-----\n\n`youtube2zim` uses Youtube API v3 to fetch data from Youtube. You thus need to provide an `API_KEY` to use the scraper.\n\nTo get an API:\n\n1. Connect to [Google Developers Console](https://console.developers.google.com/apis)\n2. Create a new _Project_ then Select it.\n3. When asked, choose _Create Credentials_ and select the **API Key** type. ([Credentials page](https://console.developers.google.com/apis/credentials))\n\n```bash\nyoutube2zim --api-key \"<your-api-key>\" --type user --id \"Vsauce\"\n```\n\n## Notes\n\n* Your API_KEY is subject to usage quotas (10,000 requests/day) so use `--only_test_branding` when adjusting parameters and branding to not *waste your quota*.\n* If you encounter issues reading ZIM files created using this scraper, please take a look at the [Compatibility Matrix](https://github.com/openzim/youtube/wiki/Compatibility) before opening a ticket.\n\nyoutube2zim-playlists\n---------------------\n\n`youtube2zim` produces a single ZIM file for a youtube request (`channel`, `user`, `playlists`.\n\n`youtube2zim-playlists` allows you to **create one ZIM file per playlist** instead.\n\nThis script is a wrapper around `youtube2zim` and is bundled with the main package.\n\n## Usage\n\n`youtube2zim-playlists --help`\n\nSample usage:\n\n```\nyoutube2zim-playlists --indiv-playlists --api-key XXX --type user --id Vsauce --playlists-name=\"vsauce_en_playlist-{playlist_id}\"\n```\n\nThose are the required arguments for `youtube2zim-playlists` but **you can also pass any regular `youtube2zim` argument**. Those will be forwarded to `youtube2zim` (which will be run independently for each playlist).\n\n**Specificities**:\n\n- `--title` and `--description` are mutually exclusive with `--playlists-title` and `--playlists-description`.\n- If using `--title` or `--description`, all your playlists ZIMs will have the same, static metadata. This is rarely wanted.\n- `--playlists-title` and `--playlists-description` allows you to dynamically customize them via some playlist-related variables:\n  - `{title}`: the playlist title\n  - `{description}`: the playlist description\n  - `{slug}`: slugified version of the playlist title\n  - `{playlist_id}`: playlist ID on youtube\n  - `{creator_id}`: playlist's owner channel/user ID.\n  - `{creator_name}`: playlist's owner channel/user name.\n- You can omit them and `youtube2zim` will auto-generate those.\n- you **must specify `--playlists-name`** (supports variables listed above).\n- `--playlists-name` is used to set the `Name` metadata of the ZIM (should be unique) and if not set separately, the output file name for the ZIM.\n- `--metadata-from` allows to specify a path or URL to a JSON file specifying custom static metadata for individual playlists. Format:\n\n``` json\n{\n    \"<playlist-id>\": {\n        \"name\": \"\",\n        \"zim-file\": \"\",\n        \"title\": \"\",\n        \"description\": \"\",\n        \"tags\": \"\",\n        \"creator\": \"\",\n        \"profile\": \"\",\n        \"banner\": \"\"\n    }\n}\n```\n\nAll fields are optional and taken from command-line/default if not found. `<playlist-id>` represents the Youtube Playlist ID.\n\nIf you feel the need for setting additional details in this file, chances are you should run `youtube2zim` independently for that playlist (still possible!)\n\nDevelopment\n-----------\n\nBefore contributing be sure to check out the\n[CONTRIBUTING.md](CONTRIBUTING.md) guidelines.\n\nLicense\n-------\n\n[GPLv3](https://www.gnu.org/licenses/gpl-3.0) or later, see\n[LICENSE](LICENSE) for more details.\n",
  "permissions": {
    "read": true,
    "write": false,
    "admin": false
  },
  "media_types": [
    "application/vnd.docker.container.image.v1+json"
  ],
  "content_types": [
    "image"
  ]
}