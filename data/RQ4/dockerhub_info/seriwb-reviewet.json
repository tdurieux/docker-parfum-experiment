{
  "user": "seriwb",
  "name": "reviewet",
  "namespace": "seriwb",
  "repository_type": "image",
  "status": 1,
  "status_description": "active",
  "description": "Getting App Store and Google Play's review and notify to either slack or email.",
  "is_private": false,
  "is_automated": true,
  "can_edit": false,
  "star_count": 0,
  "pull_count": 210,
  "last_updated": "2021-05-30T21:17:12.599696Z",
  "date_registered": "2018-11-27T03:27:04.507964Z",
  "collaborator_count": 0,
  "affiliation": null,
  "hub_user": "seriwb",
  "has_starred": false,
  "full_description": "# Reviewet\n\nReviewetはiOSとAndroidのストアレビューを、SlackやEmailで通知するためのプログラムです。\n\nAndroidのストアレビューにはレビュー時のバージョン情報がないため、\n通知されるAndroidレビューのバージョン情報は「-」になります。\n\n\n# How to use\n\n## Requirement\n\n- Docker Compose\n\n\n## Running commands\n\nReviewetを実行するためには、本リポジトリのデータが配置されたディレクトリ配下で、以下のコマンドを実施してください。\n\n```\n$ vi config/default.yml    # 変更方法はSetting Cofigurationsを参照\n$ cp .env .env.local\n$ vi .env.local            # 環境変数値を設定\n$ sudo docker-compose up -d\n$ sudo docker-compose exec app yarn start\n```\n\nDBのMySQLを別途用意する場合は、`infra/mysql/sql/init.sql`のDDLを対象のDBで実行してください。\n\n### Maintenance\n\n一度実行後、データを初期状態に戻したい場合は、MySQLのreviewetデータベースのreviewテーブルのデータを削除してください。\n\nDocker Composeで起動している場合の手順は以下になります。\n\n```\nホスト側\n$ docker-compose exec mysql bash\n\nコンテナ側\n# mysql -uadmin -padmin -h mysql reviewet\n\nMySQLコンソール側\n> truncate table review;\n```\n\n\n## Setting Configurations\n\nReviewetの動作設定は、設定ファイルと環境変数値を利用して行います。\n\n### 環境変数\n\n実行環境で以下の環境変数を指定してください。\nDocker Composeを利用する場合は、.env.localが利用できます。\n\nSLACK、EMAILは通知を行わない場合、入力不要です。\n\n| 環境変数 | 説明 |\n| --- | --- |\n| MYSQL_URI | MySQLへの接続URI |\n| SLACK_WEBHOOK | Slack通知で利用するWebhook URL |\n| SLACK_CHANNEL | Slackの通知先チャンネル名 |\n| EMAIL_SMTP_HOST | メール通知に使うSMTPサーバ名 |\n| EMAIL_SMTP_PORT | メール通知に使うSMTPのポート |\n| EMAIL_SMTP_SSL | SMTPでSSLを有効にする場合はtrue |\n| EMAIL_SMTP_USER | SMTPのユーザ |\n| EMAIL_SMTP_PASSWORD | SMTPユーザのパスワード |\n| EMAIL_FROM | メールの送り元 |\n| EMAIL_TO | メールの送信先 |\n\n\n### 設定ファイル\n\nレビュー通知対象に関しての設定は、```config/default.yml```で行います。\n\n以下の内容が変更可能です。\n\n- レビューを取得するiOSアプリ：app.iOS\n- レビューを取得するAndroidアプリ：app.android\n- アプリレビューを取得する対象の言語：app.iOS.countryCode, app.android.languageCode\n- cron指定による定期実行のタイミング制御（デフォルト1時間置きに実行）：cron\n- 初回の通知対象に取得できたレビューをすべて含めるか：firstTimeIgnore\n- 初回表示で何件表示するか（未設定の場合は全件）：outputs\n  - iOSは最新から、Androidはレビューの表示順からカウント\n- HTTP同時接続数の制限：maxConnections\n- Slack通知の利用設定：slack\n- Email通知の利用設定：email\n\n\n### Points of the changes\n\n```yaml\napp:\n  iOS:\n    id: 490217893\n    countryCode: jp\n  android:\n    id: com.google.android.googlequicksearchbox\n    languageCode: ja\ncron:\n  time: '0 * * * *'\n  timeZone: Asia/Tokyo\n\nfirstTimeIgnore: true\noutputs: 3\nmaxConnections: 1\n```\n\n#### 1. app\n\nレビューを取得するアプリのIDを、iOSの場合はappの「iOS」に、Androidの場合は「android」に設定してください。（デフォルト値はサンプルです）\nOS毎に複数のアプリ、複数の国（iOS）・国（android）のレビュー取得をすることも可能です。以下のようにリスト形式で指定してください。\n\n```yaml\napp:\n  iOS:\n    - id: 490217893\n      countryCode: jp\n    - id: 544007664\n      countryCode:\n        - jp\n        - us\n  android:\n    - id: com.google.android.googlequicksearchbox\n      languageCode: ja\n    - id: com.apple.android.music\n      languageCode:\n        - fr\n        - it\n```\n\nレビュー情報取得を利用しない場合は、対象のOSのappの値を空にしてください。\n（例えばGoogle Playからの情報を取得しない場合は```andorid: ```としてください）\n\n#### 2. cron\n\n本プログラムは1時間毎に定期実行されますが、実行タイミングをcron指定で変更することが可能です。\n\n変更する場合は、cronの「time」にcronの記述方法で設定してください。  \n左から「秒(オプション)、分、時、日、月、週」になっています。\n\n「timeZone」には、本プログラムを実行する環境のタイムゾーンを指定してください。\n\n#### 3. firstTimeIgnore\n\n初回起動時に、存在するレビュー結果を通知するかどうかのオプションです。  \n起動後の新着レビューだけの通知でよい場合は`true`に、\n存在しているレビューを通知させたい場合は`false`にしてください。\n\n#### 4. outputs\n\n初回起動時に、存在するアプリレビューを何件表示するかのオプションです。  \n未設定の場合は全件表示されます。\n\n**※firstTimeIgnoreの値が`true`の場合、この設定値は無視されます。**\n\n#### 5. maxConnections\n\nHTTPの同時接続数を制限するオプションです。\n未設定の場合は制限されません。\nVPSの仕様などで同時接続数に制限がある場合に設定してください。\n\n### to use Slack notification\n\n```yaml\nslack:\n  use: true\n```\n\nslackの「use」をtrueにすると、Slack通知機能が有効になります。（無効にする場合はfalse）\n\n\n### to use Email sending\n\n```yaml\nemail:\n  use: true\n```\n\nemailの「use」をtrueにすると、メール通知機能が有効になります。（無効にする場合はfalse。デフォルトはfalse）\n\n有効にした場合は、環境変数のSMTP関連の各項目にメールを送信するSMTPサーバの情報を入力してください。\n\n※Gmailで送信する場合は、対象アカウントの「安全性の低いアプリの許可」を有効にする必要があります。詳細は以下を参照してください。\n\n> To use Gmail you may need to configure [\"Allow Less Secure Apps\"](https://www.google.com/settings/security/lesssecureapps) in your Gmail account unless you are using 2FA in which case you would have to create an [Application Specific](https://security.google.com/settings/security/apppasswords) password. You also may need to unlock your account with [\"Allow access to your Google account\"](https://accounts.google.com/DisplayUnlockCaptcha) to use SMTP.\n\n- https://github.com/nodemailer/nodemailer#tldr-usage-example\n\n\n## For Developer\n\nReviewetの実行コードは、`src`配下のコードをwebpackでトランスパイルして`dist/main`配下に出力しています。\n\nコード変更後は、以下のコマンドで実行コードを再生成してください。\n\n```\n$ yarn run clean; yarn build\n```\n\nまた動作確認には、`yarn start`コマンドが利用できます。\n\n\n\n## License\n\nMIT License\n",
  "permissions": {
    "read": true,
    "write": false,
    "admin": false
  },
  "media_types": [
    "application/vnd.docker.container.image.v1+json"
  ],
  "content_types": [
    "image"
  ]
}