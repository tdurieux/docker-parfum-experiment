{
  "user": "chat21",
  "name": "chat21-ionic",
  "namespace": "chat21",
  "repository_type": "image",
  "status": 1,
  "status_description": "active",
  "description": "The ionic3 desktop and mobile chat of Chat21",
  "is_private": false,
  "is_automated": false,
  "can_edit": false,
  "star_count": 2,
  "pull_count": 4678,
  "last_updated": "2023-01-02T15:58:20.266496Z",
  "date_registered": "2019-08-20T16:51:30.063172Z",
  "collaborator_count": 0,
  "affiliation": null,
  "hub_user": "chat21",
  "has_starred": false,
  "full_description": "[![npm version](https://badge.fury.io/js/%40chat21%2Fchat21-ionic.svg)](https://badge.fury.io/js/%40chat21%2Fchat21-ionic)\n\nChat21 is the core of the open source live chat platform [Tiledesk.com](http://www.tiledesk.com).\n\n# Features #\nWith Chat21-ionic you can:\n* Send a direct message to a user (one to one message)\n* View the messages history\n* The read receipts feature allows your users to see when a message has been sent, delivered and read\n* Conversations list view with the last messages sent (like Whatsapp)\n* With the Presense Manager you can view when a user is online or offline and the inactivity period\n* Responsive design (desktop and mobile)\n* View the user profile with fullname and email \n* Login with email and password (Use firebase email and password authentication method )\n* Signup  with fullname, email, password and profile picture\n* Contacts list view with fulltext search for fullname field\n\n# Live Demo #\nVisit https://web.chat21.org/ to see a live demo of chat21-ionic.\n\n<img src=\"https://user-images.githubusercontent.com/9556761/57692753-df24d780-7647-11e9-9505-82ee5288637c.png\" alt=\"A screenshot of chat21-ionic demo\" style=\"max-width:100%;\">\n\n<img src=\"https://user-images.githubusercontent.com/9556761/57692765-e3e98b80-7647-11e9-8afe-b21e6085d7ca.png\" alt=\"A screenshot of chat21-ionic demo\" style=\"max-width:100%;\">\n\n# Documentation #\nIn progress git\n\n# Prerequisites #\n* Install nodejs: `https://nodejs.org/en/download/`\n* Install Ionic CLI: `npm install -g ionic`\n* Install Cordova : `npm install -g cordova@7.0.1`\n* A Firebase project. Create one free on `https://firebase.google.com`\n* \"Chat21 Firebase cloud functions\" installed. Instructions:`https://github.com/chat21/chat21-cloud-functions`\n\n# Run Tiledesk with Docker Compose\n\nDo you want to install all the Tiledesk components on your server with just one click?\nUse [Docker Compose Tiledesk installation guide](https://github.com/Tiledesk/tiledesk-deployment/blob/master/docker-compose/README.md)\n\n\n# Installation #\n* Install the latest stable release. Check on Github page the last release under the Releases tab and then run \n- `git clone https://github.com/frontiere21/chat21-ionic.git --branch <LATEST-RELEASE-VERSION>`\n- `cd chat21-ionic`\n* Build running: `npm install`\n\n# Firebase \n* Create a Firebase account\n* Create a Firebase project in the Firebase console, if you don't already have one. https://console.firebase.google.com/\n* Deploy Chat21 Firebase Cloud Functions as described here: https://github.com/chat21/chat21-cloud-functions\n\n## Configuration ## \n* Configure the file environment.ts in src/environments folder:     \n    ```\n    export const environment = {\n        supportMode: false,\n        production: false,\n        remoteConfig: true,\n        remoteConfigUrl: '/chat-config.json',\n        chatEngine: \"mqtt\", // OR YOUR CUSTOM CHAT ENGINE\n        updloaEngine: \"native\", // OR YOUR CUSTOM UPLOAD ENGINE\n        pushEngine:\"none\", // OR YOUR CUSTOM PUSH ENGINE\n        tenant:\"tilechat\",\n        fileUploadAccept:\"*/*\",\n        logLevel\":\"<YOUR-PREFERRED-LOG-LEVEL-NUMBER>\",\n        firebaseConfig: {\n            apiKey: '123ABC..',\n            authDomain: 'XYZ.firebaseapp.com',\n            databaseURL: 'https://XYZ.firebaseio.com',\n            projectId: 'XYZ',\n            storageBucket: 'XYZ.appspot.com',\n            messagingSenderId: '123456',\n            appId: 'CHANGEIT',\n            chat21ApiUrl: '<YOUR_CHAT21_CLOUD_FUNCTION_FIREBASE_ENDPOINT>'\n        },\n         chat21Config: {\n            \"appId\": \"tilechat\",\n            \"MQTTendpoint\": \"mqtt://<YOUR-MQTT-ENPOINT>\",\n            \"APIendpoint\": \"http://<YOUR-MQTT-API-ENPOINT>\"\n        },\n        \"apiUrl\": \"https://<YOUR-TILEDESK-API-URL>\",\n        \"baseImageUrl\": \"https://<YOUR-BASE-IMAGE-URL>\",\n        \"dashboardUrl\": \"https://<YOUR-DASHBOARD-URL>\"\n    }\n  };\n  ```\n  \n* `logLevel`: The Chat21-ionic supports 4 log levels. The order is as follows:\n  `Error = 0 < Warn = 1 < Info = 2 < Debug = 3`\n\n* `fileUploadAccept`: The Chat21-ionic allows you to manage the type of files that can be uploaded. By default, all file types are accepted.\n\n\n### Push notification\n* open `/src/firebase-messaging-sw.js` and replace messagingSenderId: with < your messagingSenderId >\nMore info here :  https://angularfirebase.com/lessons/send-push-notifications-in-angular-with-firebase-cloud-messaging/\n* firebase-messaging-sw.js must be accessible in the root of the webapp, for example (https://support.tiledesk.com/firebase-messaging-sw.js)\n* After the build process, check the property gcm_sender_id of the manifest.json file. The correct value for firebase is:\n`\"gcm_sender_id\": \"103953800507\"`\n    \n### (Optional) Authenticate with email password  \n* Config Firebase auth\nIn the Firebase Console open the Authentication section > SIGN IN METHOD tab you need to enable the Email/password Sign-in Provider and click SAVE. This will allow users to sign-in the Web app with their Email\nhttps://firebase.google.com/docs/auth/\n\n## Run App on Browser ##\n* Now you will need to serve the app. Run: `ionic serve` in the terminal. \n\n## Add browser platform and build it ##\n* Run: `cordova platform add browser@latest`\n* Run: `ionic cordova build browser`\n\n# Deploy\n\n## Deploy on a Web Server (Apache or Nginx)\nCopy the content of the directory platforms/browser/www to your WebServer public dir.\n\n## Deploy on Firebase hosting ##\n\n* Install the Firebase CLI. run: `npm install -g firebase-tools`\n* Run: `firebase login`\n(these steps can be avoided if you have already done before)\n* Change directories in the terminal to your desired project directory(run: `cd platforms/browser`) and run: `firebase init`\n    * select hosting (press Spacebar to select) and press return\n    * select your project and press return\n    * answer the following questions:\n        * \"what do you want to use as your public directory?\"  www and press return  \n        * \"configure as a single-page app?\"  N and press return\n        * \"file www/index.html alredy exists. Overwrite?\" N and press return\n* Run: `firebase deploy`\n* In your firebase consol click hosting and click on link your project\nMore info here https://firebase.google.com/docs/hosting/quickstart?authuser=0\n\n## Run on Android \n* Run on simulator : `ionic cordova run android`\n* Run on device : `ionic cordova run android --device`\n\n## Run on iOS\n* Run on simulator : `ionic cordova run ios`\n* Run on device : `ionic cordova run ios --device`\n\n\n# Run with docker\n\n  \nTo run Chat21-ionic on port 8080 run:\n\n```\n\ncurl https://raw.githubusercontent.com/chat21/chat21-ionic/master/env.sample --output .env\n\nnano .env #configure .env file properly\n\ndocker run -p 8080:80 --env-file .env chat21/chat21-ionic\n\n```\n\n## Branding with Docker\nIf you want to customize logos and assets you can mount a docker volume and attach it to the assets folder. After that you can override the assets files into the docker volume.\n\nExample:\n```\ndocker run -p 8080:80 --env-file .env --mount source=chat21-ionic-assets-vol,destination=/usr/share/nginx/html/assets  chat21/chat21-ionic\n```\n\n# Autologin \nTo auto login pass the JWT token as a query parameter of your Chat url as in the following example:\n\n```typescript\n\n\"http://localhost:8100/#/conversation-detail?jwt=<JWT_TOKEN>\"\n\n```\n\n",
  "permissions": {
    "read": true,
    "write": false,
    "admin": false
  },
  "media_types": [
    "application/vnd.docker.container.image.v1+json"
  ],
  "content_types": [
    "image"
  ]
}