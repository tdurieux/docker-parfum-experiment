{
  "user": "seebi",
  "name": "rdf.sh",
  "namespace": "seebi",
  "repository_type": "image",
  "status": 1,
  "status_description": "active",
  "description": "A multi-tool shell script for doing Semantic Web jobs on the command line.",
  "is_private": false,
  "is_automated": true,
  "can_edit": false,
  "star_count": 0,
  "pull_count": 138,
  "last_updated": "2019-07-14T09:07:28.070855Z",
  "date_registered": "2017-10-12T15:35:01.824005Z",
  "collaborator_count": 0,
  "affiliation": null,
  "hub_user": "seebi",
  "has_starred": false,
  "full_description": "# rdf.sh\n\nA multi-tool shell script for doing Semantic Web jobs on the command line.\n\n[![Build Status](https://travis-ci.org/seebi/rdf.sh.svg?branch=develop)](https://travis-ci.org/seebi/rdf.sh)\n\n\n# contents\n\n* [installation (manually, debian/ubuntu/, brew, docker)](#installation)\n* [configuration](#configuration)\n* [usage / features](#usage-features)\n    * [overview](#overview)\n    * [namespace lookup](#nslookup)\n    * [resource description](#description)\n    * [SPARQL graph store protocol](#gsp)\n    * [linked data platform client](#ldp)\n    * [WebID requests](#webid)\n    * [syntax highlighting](#highlighting)\n    * [resource listings](#listings)\n    * [resource inspection / debugging](#inspection)\n    * [materialize / skolemize bnodes](#skolemize)\n    * [re-format RDF files in turtle](#turtleize)\n    * [prefix distribution for data projects](#prefixes)\n    * [autocompletion and resource history](#autocompletion)\n\n\n<a name=\"installation\"></a>\n## installation\n\n### manually\n\nrdf.sh is a single bash shell script so installation is trivial ... :-)\nJust copy or link it to you path, e.g. with\n\n    $ sudo ln -s /path/to/rdf.sh /usr/local/bin/rdf\n\n### debian / ubuntu\n\nYou can download a debian package from the [release\nsection](https://github.com/seebi/rdf.sh/releases) and install it as root with\nthe following commands:\n\n```\n$ sudo dpkg -i /path/to/your/rdf.sh_X.Y_all.deb\n$ sudo apt-get -f install\n```\n\nThe `dpkg` run will probably fail due to missing dependencies but the `apt-get`\nrun will install all dependencies as well as `rdf`.\n\nCurrently, `zsh` is a hard dependency since the zsh completion \"needs\" it.\n\n### brew based\n\nYou can install `rdf.sh` by using the provided recipe:\n\n```\nbrew install https://raw.githubusercontent.com/seebi/rdf.sh/develop/brew/rdf.sh.rb\n```\n\nThis will install the latest stable version. In case you want to install the latest develop version, use this command:\n\n```\nbrew install --HEAD https://raw.githubusercontent.com/seebi/rdf.sh/develop/brew/rdf.sh.rb\n```\n\n\n### docker based\n\nYou can install `rdf.sh` by using the provided docker image:\n\n```\ndocker pull seebi/rdf.sh\n```\n\nAfter that, you can e.g. run this command:\n\n```\ndocker run -i -t --rm seebi/rdf.sh desc foaf:Person\n```\n\n<a name=\"dependencies\"></a>\n### dependencies\n\nRequired tools currently are:\n\n* [roqet](http://librdf.org/rasqal/roqet.html) (from rasqal-utils)\n* [rapper](http://librdf.org/raptor/rapper.html) (from raptor-utils or raptor2-utils)\n* [curl](http://curl.haxx.se/)\n\nSuggested tools are:\n\n * [zsh](http://zsh.sourceforge.net/) (without the autocompletion, it is not the same)\n\n<a name=\"files\"></a>\n### files\n\nThese files are available in the repository:\n\n* `README.md` - this file\n* `_rdf` - zsh autocompletion file\n* `CHANGELOG.md` - version change log\n* `doap.ttl` - doap description of rdf.sh\n* `rdf.1` - rdf.sh man page\n* `rdf.sh` - the script\n* `Screenshot.png` - a screeny of rdf.sh in action\n* `example.rc` - an example config file which can be copied\n\nThese files are used by rdf.sh:\n\n* `$HOME/.cache/rdf.sh/resource.history` - history of all processed resources\n* `$HOME/.cache/rdf.sh/prefix.cache` - a cache of all fetched namespaces\n* `$HOME/.config/rdf.sh/prefix.local` - locally defined prefix / namespaces\n* `$HOME/.config/rdf.sh/rc` - config file\n\nrdf.sh follows the\n[XDG Base Directory Specification](http://standards.freedesktop.org/basedir-spec/basedir-spec-latest.html)\nin order to allow different cache and config directories.\n\n\n<a name=\"usage-features\"></a>\n## usage / features\n\n<a name=\"overview\"></a>\n### overview\n\nrdf.sh currently provides these subcommands:\n\n* color: get a html color for a resource URI\n* count: count distinct triples\n* delete: deletes an existing linked data resource via LDP\n* desc: outputs description of the given resource in a given format (default: turtle)\n* diff: diff of triples from two RDF files\n* edit: edit the content of an existing linked data resource via LDP (GET + PUT)\n* get: fetches an URL as RDF to stdout (tries accept header)\n* get-ntriples: curls rdf and transforms to ntriples\n* gsp-delete: delete a graph via SPARQL 1.1 Graph Store HTTP Protocol\n* gsp-get: get a graph via SPARQL 1.1 Graph Store HTTP Protocol\n* gsp-put: delete and re-create a graph via SPARQL 1.1 Graph Store HTTP Protocol\n* head: curls only the http header but accepts only rdf\n* headn: curls only the http header\n* help: outputs the manpage of rdf\n* list: list resources which start with the given URI\n* ns: curls the namespace from prefix.cc\n* nscollect: collects prefix declarations of a list of ttl/n3 files\n* nsdist: distributes prefix declarations from one file to a list of other ttl/n3 files\n* put: replaces an existing linked data resource via LDP\n* split: split an RDF file into pieces of max X triple and output the file names\n* turtleize: outputs an RDF file in turtle, using as much as possible prefix declarations\n\n\n<a name=\"nslookup\"></a>\n### namespace lookup (`ns`)\n\nrdf.sh allows you to quickly lookup namespaces from [prefix.cc](http://prefix.cc) as well as locally defined prefixes:\n\n```\n$ rdf ns foaf\nhttp://xmlns.com/foaf/0.1/\n```\n\nThese namespace lookups are cached (typically\n`$HOME/.cache/rdf.sh/prefix.cache`) in order to avoid unneeded network\ntraffic. As a result of this subcommand, all other rdf command can get\nqnames as parameters (e.g. `foaf:Person` or `skos:Concept`).\n\nTo define you own lookup table, just add a line\n\n```\nprefix|namespace\n```\n\nto `$HOME/.config/rdf.sh/prefix.local`. rdf.sh will use it as a priority\nlookup table which overwrites cache and prefix.cc lookup.\n\nrdf.sh can also output prefix.cc syntax templates (uncached): \n\n```\n$ rdf ns skos sparql\nPREFIX skos: <http://www.w3.org/2004/02/skos/core#>\n\nSELECT *\nWHERE {\n  ?s ?p ?o .\n}\n\n$ rdf ns dct n3    \n@prefix dct: <http://purl.org/dc/terms/>.\n```\n\n\n<a name=\"description\"></a>\n### resource description (`desc`)\n\nDescribe a resource by querying for statements where the resource is the\nsubject. This is extremly useful to fastly check schema details.\n\n```\n$ rdf desc foaf:Person\n@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .\n@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .\n@prefix owl: <http://www.w3.org/2002/07/owl#> .\n@prefix foaf: <http://xmlns.com/foaf/0.1/> .\n@prefix geo: <http://www.w3.org/2003/01/geo/wgs84_pos#> .\n@prefix contact: <http://www.w3.org/2000/10/swap/pim/contact#> .\n\nfoaf:Person\n    a rdfs:Class, owl:Class ;\n    rdfs:comment \"A person.\" ;\n    rdfs:isDefinedBy <http://xmlns.com/foaf/0.1/> ;\n    rdfs:label \"Person\" ;\n    rdfs:subClassOf contact:Person, geo:SpatialThing, foaf:Agent ;\n    owl:disjointWith foaf:Organization, foaf:Project ;\n    <http://www.w3.org/2003/06/sw-vocab-status/ns#term_status> \"stable\" .\n```\n\nIn addition to the textual representation, you can calculate a color for visual\nresource representation with the `color` command:\n\n```\n$ rdf color http://sebastian.tramp.name\n#2024e9\n```\n\nRefer to the [cold webpage](http://cold.aksw.org) for more information :-)\n\n<a name=\"gsp\"></a>\n### SPARQL graph store protocol client\n\nThe [SPARQL 1.1 Graph Store HTTP Protocol](https://www.w3.org/TR/sparql11-http-rdf-update/) describes the use of HTTP operations for the purpose of managing a collection of RDF graphs.\nrdf.sh supports the following commands in order to manipulate graphs:\n\n```\nSyntax: rdf gsp-get <graph URI | Prefix:LocalPart> <store URL | Prefix:LocalPart (optional)>\n(get a graph via SPARQL 1.1 Graph Store HTTP Protocol)\n```\n\n```\nSyntax: rdf gsp-put <graph URI | Prefix:LocalPart> <path/to/your/file.rdf> <store URL | Prefix:LocalPart (optional)>\n(delete and re-create a graph via SPARQL 1.1 Graph Store HTTP Protocol)\n```\n\n```\nSyntax: rdf gsp-delete <graph URI | Prefix:LocalPart> <store URL | Prefix:LocalPart (optional)>\n(delete a graph via SPARQL 1.1 Graph Store HTTP Protocol)\n```\n\nIf the store URL **is not given**, the [Direct Graph Identification](https://www.w3.org/TR/sparql11-http-rdf-update/#direct-graph-identification) is assumed, which means the store URL is taken as the graph URL.\nIf the store URL **is given**, [Indirect Graph Identification](https://www.w3.org/TR/sparql11-http-rdf-update/#indirect-graph-identification) is used.\n\n\n<a name=\"ldp\"></a>\n### linked data platform client\n\nThe [Linked Data Platform](http://www.w3.org/TR/ldp/) describe a read-write\nLinked Data architecture, based on HTTP access to web resources that describe\ntheir state using the RDF data model. rdf.sh supports\n[DELETE](http://www.w3.org/TR/ldp/#http-delete),\n[PUT](http://www.w3.org/TR/ldp/#http-put) and edit (GET, followed by an edit\ncommand, followed by a PUT request)\nof Linked Data Platform Resources (LDPRs).\n\n```\nSyntax: rdf put <URI | Prefix:LocalPart> <path/to/your/file.rdf>\n(replaces an existing linked data resource via LDP)\n```\n\n```\nSyntax: rdf delete <URI | Prefix:LocalPart>\n(deletes an existing linked data resource via LDP)\n```\n\n```\nSyntax: rdf edit <URI | Prefix:LocalPart>\n(edit the content of an existing linked data resource via LDP (GET + PUT))\n```\n\nThe edit command uses the `EDITOR` variable to start the editor of your choice\nwith a prepared turtle file.\nYou can change the content of that file (add or remove triple) and you can use\nany prefix you've already declared via config or which is cached.\nUsed prefix declarations are added automatically afterwards and the file is the\nPUTted to the server.\n\n\n<a name=\"webid\"></a>\n### WebID requests\n\nIn order to request ressources with your WebID client certificate, you need to\nsetup the rdf.sh `rc` file (see configuration section).\nCurl allows for using client certs with the\n[-E parameter](http://curl.haxx.se/docs/manpage.html#-E), which needs a\n[pem](https://en.wikipedia.org/wiki/X.509#Certificate_filename_extensions) file\nwith your private key AND the certificate.\n\nTo use your proper created WebID pem file, just add this to your rc file:\n\n```\nRDFSH_CURLOPTIONS_ADDITONS=\"-E $HOME/path/to/your/webid.pem\"\n```\n\n<a name=\"highlighting\"></a>\n### syntax highlighting\n\nrdf.sh supports the highlighted output of turtle with\n[pygmentize](http://pygments.org/) and a proper\n[turtle lexer](https://github.com/gniezen/n3pygments). If everything is\navailable (`pygmentize -l turtle` does not throw an error), then it will look\nlike this.\n\n<img src=\"https://raw.github.com/seebi/rdf.sh/master/Screenshot.png\" />\n\nIf you do not want syntax highlighting for some reason, you can disable it by\nsetting the shell environment variable `RDFSH_HIGHLIGHTING_SUPPRESS` to `true`\ne.g with\n\n    export RDFSH_HIGHLIGHTING_SUPPRESS=true\n\nbefore you start `rdf.sh`.\n\n\n<a name=\"listings\"></a>\n### resource listings (`list`)\n\nTo get a quick overview of an unknown RDF schema, rdf.sh provides the\n`list` command which outputs a distinct list of subject resources of the\nfetched URI:\n\n```\n$ rdf list geo:\nhttp://www.w3.org/2003/01/geo/wgs84_pos#\nhttp://www.w3.org/2003/01/geo/wgs84_pos#SpatialThing\nhttp://www.w3.org/2003/01/geo/wgs84_pos#Point\nhttp://www.w3.org/2003/01/geo/wgs84_pos#lat\nhttp://www.w3.org/2003/01/geo/wgs84_pos#location\nhttp://www.w3.org/2003/01/geo/wgs84_pos#long\nhttp://www.w3.org/2003/01/geo/wgs84_pos#alt\nhttp://www.w3.org/2003/01/geo/wgs84_pos#lat_long\n```\n\nYou can also provide a starting sequence to constrain the output\n\n```\n$ rdf list skos:C   \nhttp://www.w3.org/2004/02/skos/core#Concept\nhttp://www.w3.org/2004/02/skos/core#ConceptScheme\nhttp://www.w3.org/2004/02/skos/core#Collection\nhttp://www.w3.org/2004/02/skos/core#changeNote\nhttp://www.w3.org/2004/02/skos/core#closeMatch\n```\n\n**Note:** Here the `$GREP_OPTIONS` environment applies to the list. In\nmy case, I have a `--ignore-case` in it, so e.g. `skos:changeNote` is\nlisted as well.\n\nThis feature only works with schema documents which are available by\nfetching the namespace URI (optionally with linked data headers to be\nredirected to an RDF document). \n\n\n<a name=\"inspection\"></a>\n### resource inspection (`get`, `count`, `head` and `headn`)\n\nFetch a resource via linked data and print it to stdout:\n\n```\n$ rdf get http://sebastian.tramp.name >me.rdf\n```\n\nCount all statements of a resource: \n \n```\n$ rdf count http://sebastian.tramp.name\n58\n```\n\nInspect the header of a resource. Use `head` for header request with\ncontent negotiation suitable for linked data and `headn` for a normal\nheader request as sent by browsers.\n\n```\n$ rdf head http://sebastian.tramp.name\nHTTP/1.1 302 Found\n[...]\nLocation: http://sebastian.tramp.name/index.rdf\n[...]\n```\n\n\n<a name=\"prefixes\"></a>\n### prefix distribution for data projects (`nscollect` and `nsdist`)\n\nOften I need to create a lot of n3/ttl files as a data project which consists\nof schema and instance resources. These projects are split over several files\nfor a better handling and share a set if used namespaces.\n\nWhen introducing a new namespace to such projects, I need to add the `@prefix`\nline to each of the ttl files of this project.\n\n`rdf.sh` has two subcommands which handle this procedure:\n\n* `rdf nscollect` collects all prefixes from existing n3/ttl files in the\n  current directory and collect them in the file `prefixes.n3`\n* `rdf nsdist *.n3` firstly removes all `@prefix` lines from the target files\n  and then add `prefixes.n3` on top of them.\n\n\n<a name=\"skolemize\"></a>\n### Materialize / skolemize bnodes (`skolemize`)\n\nBlank nodes can be painful, so this command materializes all blank nodes as full IRIs.\nThe first parameter is the RDF file while the second parameter is an optional namespace for the UUID minted IRIs (default is `urn:uuid:`).\n\n\n<a name=\"turtleize\"></a>\n### re-format RDF files in turtle (`turtleize`)\n\nWorking with RDF files often requires to convert and reformat different files.\nWith `rdf turtleize`, its easy to get RDF files in turtle plus they are nicely\nformatted because all needed prefix declarations are added.\n\nturtleize uses rapper and tries to detect all namespaces which are cached in\nyour `prefix.cache` file, as well as which a defined in the `prefix.local` file.\n\nTo turtleize your current buffer in vim for example, you can do a `:%! rdf turtleize %`.\n\n\n<a name=\"autocompletion\"></a>\n### autocompletion and resource history\n\n`rdf.sh` can be used with a \n[zsh](http://en.wikipedia.org/wiki/Zsh)\n[command-line completion](http://en.wikipedia.org/wiki/Command-line_completion)\nfunction.\nThis boosts the usability of  this tool to a new level!\nThe completion features support for the base commands as well as for\nauto-completion of resources.\nThese resources are taken from the resource history.\nThe resource history is written to `$HOME/.cache/rdf.sh/resource.history`.\n\nWhen loaded, the completion function could be used in this way:\n\n```\nrdf de<tab> tramp<tab>\n```\n\nThis could result in the following commandline:\n\n```\nrdf desc http://sebastian.tramp.name\n```\n\nNotes:\n\n* The substring matching feature of the zsh [completion system](http://linux.die.net/man/1/zshcompsys) should be turned on.\n  * e.g. with `zstyle ':completion:*' matcher-list 'r:|[._-]=* r:|=*' 'l:|=* r:|=*'`\n* This assumes that at least one resource exists in the history which matches `.*tramp.*`\n\n<a name=\"configuration\"></a>\n## configuration\n\nrdf.sh imports `$HOME/.config/rdf.sh/rc` at the beginning of each execution so\nthis is the place to setup personal configuration options such as\n\n* WebID support\n* syntax highlighting suppression\n* setup of preferred accept headers\n* setup of alternate ntriples fetch program such as any23's rover (see [this feature request](https://github.com/seebi/rdf.sh/issues/8) for background infos)\n\nPlease have a look at the [example rc file](https://github.com/seebi/rdf.sh/blob/master/example.rc).\n\n",
  "permissions": {
    "read": true,
    "write": false,
    "admin": false
  },
  "media_types": [
    "application/vnd.docker.container.image.v1+json"
  ],
  "content_types": [
    "image"
  ]
}