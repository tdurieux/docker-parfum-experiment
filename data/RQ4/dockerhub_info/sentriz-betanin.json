{
  "user": "sentriz",
  "name": "betanin",
  "namespace": "sentriz",
  "repository_type": "image",
  "status": 1,
  "status_description": "active",
  "description": "https://github.com/sentriz/betanin",
  "is_private": false,
  "is_automated": true,
  "can_edit": false,
  "star_count": 1,
  "pull_count": 303981,
  "last_updated": "2022-12-25T02:05:51.798713Z",
  "date_registered": "2018-11-01T11:43:34.183284Z",
  "collaborator_count": 0,
  "affiliation": null,
  "hub_user": "sentriz",
  "has_starred": false,
  "full_description": "<p align=\"center\"><img width=\"300\" src=\"https://github.com/sentriz/betanin/raw/master/.github/logo.png\"></p>\n<h4 align=\"center\"><a href=\"http://beets.io/\">beets.io</a> based man-in-the-middle of your torrent client and music player</h4>\n<p align=\"center\"><a href=\"http://hub.docker.com/r/sentriz/betanin\"><img src=\"https://img.shields.io/docker/pulls/sentriz/betanin.svg\"></a> <a href=\"https://microbadger.com/images/sentriz/betanin\" title=\"Get your own image badge on microbadger.com\"><img src=\"https://images.microbadger.com/badges/image/sentriz/betanin.svg\"></a> <img src=\"https://api.codacy.com/project/badge/Grade/db7d1db9dd404f8fa31febc8a2d52d00\"> <img src=\"https://img.shields.io/github/issues/sentriz/betanin.svg\"> <img src=\"https://img.shields.io/github/issues-pr/sentriz/betanin.svg\"></p>\n\n<hr>\n\n### workflow\n\n<p align=\"center\"><img src=\"https://github.com/sentriz/betanin/raw/master/.github/flow.png\"></p>\n\n<hr>\n\n### notifiers\n\nbetanin uses [apprise](https://github.com/caronc/apprise) for notifications. so anything supported there will work. but some include\n\n- email\n- discord\n- telegram\n- emby\n\n<hr>\n\n### installation\n\n```shell\n$ pip install --user betanin\n```\n\n<hr>\n\n### usage\n\n```shell\n$ # start server\n$ betanin\n$ # a config file will be created, add your credentials to it\n$ # start again\n$ betanin [--host=<host>] [--port=<port>]\n$ # ui will be available at port\n$ # you may also use env vars instead, eg\n$ BETANIN_HOST=0.0.0.0 betanin\n$ BETANIN_PORT=4030 betanin\n\n$ # optionally start cli (for db operations, debugging)\n$ betanin-shell\n$ # or if docker\n$ docker exec -it <container_id> betanin-shell\n```\n\n<hr>\n\n### screenshots\n\n<p align=\"center\"><img src=\"https://github.com/sentriz/betanin/raw/master/.github/scrot_1.png\"></p>\n<p align=\"center\"><img src=\"https://github.com/sentriz/betanin/raw/master/.github/scrot_2.png\"></p>\n<p align=\"center\"><img src=\"https://github.com/sentriz/betanin/raw/master/.github/scrot_3.png\"></p>\n<p align=\"center\"><img src=\"https://github.com/sentriz/betanin/raw/master/.github/scrot_4.png\"></p>\n\n<hr>\n\n### docker\n###### image\n`docker pull sentriz/betanin`  \n###### volumes\n`/root/.local/share/betanin/` for a persistent database  \n`/root/.config/betanin/` for a persistent betanin config  \n`/root/.config/beets/` for a persistent beets home (point this to your current beets home if you have one)  \n`/music/` so beets can access your music  \n`/downloads/` so beets can access your downloads  \n###### compose\n```yml\nbetanin:\n    image: sentriz/betanin\n    ports:\n    - 9393:9393\n    restart: unless-stopped\n    environment:\n    - UID=1000 # (optionally) set user id\n    - GID=1000 # (optionally) set group id\n    volumes:\n    - ${DATA}/betanin/data:/root/.local/share/betanin/\n    - ${DATA}/betanin/config:/root/.config/betanin/\n    - ${DATA}/betanin/beets:/root/.config/beets/\n    - ${MEDIA}/music:/music/\n    - ${MEDIA}/downloads:/downloads/\n```\n\n<hr>\n\n### transmission\n\ncreate a script named `done.sh` or anything you like, and make it executable:  \n`chmod +x done.sh`\n\n###### settings.json (example excerpt)\n\n```json\n...\n\"script-torrent-done-enabled\": true,\n\"script-torrent-done-filename\": \"/scripts/done.sh\",\n...\n```\n\n###### done script\n\n```bash\n#!/bin/sh\n\ncurl \\\n    --request POST \\\n    --data-urlencode \"path=<path_to_transmission_downloads>\" \\\n    --data-urlencode \"name=$TR_TORRENT_NAME\" \\\n    --header \"X-API-Key: <your_api_key>\" \\\n    \"https://betanin.example.com/api/torrents\"\n```\n\n###### transmission docker compose (excerpt)\n\n```yaml\nvolumes:\n- ${DATA}/transmission/config:/config\n- ${DATA}/transmission/scripts:/scripts\n- ${MEDIA}/download:/downloads\n```\n\n<hr>\n\n### deluge\n\ncreate a script named `done.sh` or anything you like, and make it executable:  \n`chmod +x done.sh`  \nyou must also be using the [Execute](https://dev.deluge-torrent.org/wiki/Plugins/Execute) plugin, set to the `Torrent Complete` event\n\n###### done script\n\n```bash\n#!/bin/sh\n\ncurl \\\n    --request POST \\\n    --data-urlencode \"path=<path_to_deluge_downloads>\" \\\n    --data-urlencode \"name=$2\" \\\n    --header \"X-API-Key: <your_api_key>\" \\\n    \"https://betanin.example.com/api/torrents\"\n```\n\n<hr>\n\n### developing\n\n###### working on the backend\n\nthere is not much else to do, write your code, `python -m betanin.entry.betanin`, kill it, write your code, etc.\nthe webserver will be available at *http://localhost:9393/*. the static frontend is served at `/`, and the api is served at `/api`. (there is a swagger ui there too)\nalso see `python -m betanin.entry.shell`.  \nif you need to do a manual migration do `env FLASK_APP='betanin.application:create' flask db migrate --directory betanin_migrations/` (then upgrades are automatically done on betanin start)\n\n###### working on the frontend\n\nstart the backend with `python -m betanin.entry.betanin`, but don't use the static frontend served at *http://localhost:9393/*. Instead, in a new shell, do `npm --prefix betanin_client/ run serve` and use the frontend served at *http://localhost:8081/*. it will look for a backend listening on port 9393 locally. after that you can edit anything in `betanin_client/src`, it will be linted and automatically reflected in your web browser.\n",
  "permissions": {
    "read": true,
    "write": false,
    "admin": false
  },
  "media_types": [
    "application/vnd.docker.distribution.manifest.list.v2+json",
    "application/vnd.docker.container.image.v1+json"
  ],
  "content_types": [
    "image"
  ]
}