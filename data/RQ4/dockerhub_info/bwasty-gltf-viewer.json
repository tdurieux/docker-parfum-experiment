{
  "user": "bwasty",
  "name": "gltf-viewer",
  "namespace": "bwasty",
  "repository_type": "image",
  "status": 1,
  "status_description": "active",
  "description": "glTF 2.0 viewer written in Rust. Use this docker image to create screenshots (headless).",
  "is_private": false,
  "is_automated": true,
  "can_edit": false,
  "star_count": 0,
  "pull_count": 371,
  "last_updated": "2019-04-25T18:55:17.928861Z",
  "date_registered": "2018-02-10T22:45:35.208159Z",
  "collaborator_count": 0,
  "affiliation": null,
  "hub_user": "bwasty",
  "has_starred": false,
  "full_description": "# gltf-viewer [![status](https://img.shields.io/badge/glTF-2%2E0-green.svg?style=flat)](https://github.com/KhronosGroup/glTF)\n[![crates.io](https://img.shields.io/crates/v/gltf-viewer.svg)](https://crates.io/crates/gltf-viewer)\n[![GitHub release](https://img.shields.io/github/release/bwasty/gltf-viewer.svg)](https://github.com/bwasty/gltf-viewer/releases/latest)\n [![](https://tokei.rs/b1/github/bwasty/gltf-viewer)](https://github.com/Aaronepower/tokei)\n [![Build Status](https://travis-ci.org/bwasty/gltf-viewer.svg?branch=master)](https://travis-ci.org/bwasty/gltf-viewer)\n [![Build status](https://ci.appveyor.com/api/projects/status/51ukh02thpb0r9cf/branch/master?svg=true)](https://ci.appveyor.com/project/bwasty/gltf-viewer/branch/master)\n [![Docker build status](https://img.shields.io/docker/build/bwasty/gltf-viewer.svg)](https://hub.docker.com/r/bwasty/gltf-viewer/tags/)\n [![Maintenance](https://img.shields.io/badge/maintenance-passively--maintained-yellowgreen.svg)](https://github.com/rust-lang/rfcs/blob/master/text/1824-crates.io-default-ranking.md#maintenance)\n\nRust [glTF 2.0](https://github.com/KhronosGroup/glTF) viewer, written using the [gltf](https://github.com/gltf-rs/gltf) crate and plain OpenGL.\n\n**Current state**: All [official sample models](https://github.com/KhronosGroup/glTF-Sample-Models/tree/master/2.0) can be loaded and are rendered with the [reference PBR shader](https://github.com/KhronosGroup/glTF-WebGL-PBR). Example: <br>\n<img width=\"412\" alt=\"SciFiHelmet\" title=\"SciFiHelmet\" src=\"https://user-images.githubusercontent.com/1647415/30771307-d70dbd26-a044-11e7-9ed1-b0e2ba80198c.png\"><br>\nGallery with all sample models: https://bwasty.github.io/gltf-viewer/0.3.0/\n\nSome glTF features are not yet implemented, most notably **animations**. See [#3](https://github.com/bwasty/gltf-viewer/issues/3) for details.\n\n## Installation\n### Binaries (Win/Linux/macOS)\nSee [Latest Release](https://github.com/bwasty/gltf-viewer/releases/latest)\n### From crate (requires [Rust](https://www.rust-lang.org))\n```shell\ncargo install gltf-viewer\n```\nLatest version (unstable):\n```shell\ncargo install --git https://github.com/bwasty/gltf-viewer.git\n```\n## Usage\n```\nUSAGE:\n    gltf-viewer [OPTIONS] <FILE>\n\nOPTIONS:\n    -v, --verbose                    Enable verbose logging (log level INFO). Can be repeated up to 3 times to increase\n                                     log level to DEBUG/TRACE)\n    -s, --screenshot <FILE>          Create screenshot (PNG)\n    -w, --width <WIDTH>              Width in pixels [default: 800]\n    -h, --height <HEIGHT>            Height in pixels [default: 600]\n    -c, --count <COUNT>              Saves N screenshots of size WxH, rotating evenly spaced around the object [default:\n                                     1]\n        --headless                   Use real headless rendering for screenshots (default is a hidden window)\n                                     [EXPERIMENTAL - see README for details]\n        --straight                   Position camera in front of model if using default camera (i.e. glTF doesn't\n                                     contain a camera or `--cam-index -1` is passed).\n        --scene <scene>              Index of the scene to load [default: 0]\n        --cam-index <CAM-INDEX>      Use the glTF camera with the given index (starting at 0).\n                                     Fallback if there is none: determine 'nice' camera position based on the scene's\n                                     bounding box. Can be forced by passing -1.\n                                     Note: All other camera options are ignored if this one is given. [default: 0]\n        --cam-pos <CAM-POS>          Camera (aka eye) position override as comma-separated Vector3. Example: 1.2,3.4,5.6\n        --cam-target <CAM-TARGET>    Camera target (aka center) override as comma-separated Vector3. Example:\n                                     1.2,3.4,5.6\n        --cam-fovy <CAM-FOVY>        Vertical field of view ('zoom') in degrees. [default: 75]\n        --help                       Prints help information\n    -V, --version                    Prints version information\n\nARGS:\n    <FILE>    glTF file name\n```\nBoth .gltf and .glb files are supported.\nNavigate the scene with the mouse: Rotate with left click + drag, pan with right click + drag, zoom with mouse wheel.\n\n### Example\n```\n$ curl -O https://raw.githubusercontent.com/KhronosGroup/glTF-Sample-Models/master/2.0/Box/glTF-Binary/Box.glb\n$ gltf-viewer Box.glb\n```\n\n### Headless screenshot generation\nProper headless screenshot generation with the `--headless` flag currently only works on macOS.\nTo work around that, a Docker setup that uses `xvfb` is provided. Usage examples:\n```\n# Build docker image and run it with the gltf mounted in a volume.\n# The image will be saved next to the gltf file.\n./screenshot_docker.sh Box.glb\n./screenshot_docker.sh ../models/Box.gltf -w 1920 -h 1080 --count 3 -vv\n# Use pre-built docker image from Docker Hub\nDOCKER_IMAGE=bwasty/gltf-viewer ./screenshot_docker.sh Box.glb\n```\n\nAlternatively, you can also install `xvfb` and use `./run_xvfb.sh` directly (Linux only).\n",
  "permissions": {
    "read": true,
    "write": false,
    "admin": false
  },
  "media_types": [
    "application/vnd.docker.container.image.v1+json"
  ],
  "content_types": [
    "image"
  ]
}