{
  "user": "didstopia",
  "name": "7dtd-server",
  "namespace": "didstopia",
  "repository_type": "image",
  "status": 1,
  "status_description": "active",
  "description": "Provides a dedicated linux server for 7 Days to Die that runs in a Docker container.",
  "is_private": false,
  "is_automated": true,
  "can_edit": false,
  "star_count": 30,
  "pull_count": 1612127,
  "last_updated": "2022-05-01T15:36:06.692015Z",
  "date_registered": "2016-02-26T20:41:36.923158Z",
  "collaborator_count": 0,
  "affiliation": null,
  "hub_user": "didstopia",
  "has_starred": false,
  "full_description": "## 7 Days to Die server that runs inside a Docker container\n[![Docker Automated build](https://img.shields.io/docker/automated/didstopia/7dtd-server.svg)](https://hub.docker.com/r/didstopia/7dtd-server/)\n[![Docker build status](https://img.shields.io/docker/build/didstopia/7dtd-server.svg)](https://hub.docker.com/r/didstopia/7dtd-server/)\n[![Docker Pulls](https://img.shields.io/docker/pulls/didstopia/7dtd-server.svg)](https://hub.docker.com/r/didstopia/7dtd-server/)\n[![Docker stars](https://img.shields.io/docker/stars/didstopia/7dtd-server.svg)](https://hub.docker.com/r/didstopia/7dtd-server)\n\nThis image will always install/update to the latest steamcmd and 7 Days to Die server, all you have to do to update your server is to redeploy the container.\n\nAlso note that the entire /steamcmd/7dtd can be mounted on the host system, which would avoid having to reinstall the game when updating or recreating the container.\n\n### How to run the server\n1. Optionally set the ```SEVEN_DAYS_TO_DIE_SERVER_STARTUP_ARGUMENTS``` environment variable to match your preferred server arguments (defaults are set to ```\"-logfile /dev/stdout -quit -batchmode -nographics -dedicated\"```, note how we're logging to stdout)\n2. Optionally set the ```SEVEN_DAYS_TO_DIE_CONFIG_FILE``` environment variable to a different configuration file (default is ```/app/.local/share/7DaysToDie/serverconfig.xml```)\n3. Mount ```/steamcmd/7dtd``` and ```/app/.local/share/7DaysToDie``` somewhere on the host to keep your data safe (first path has the server files, while the second path has the config and save files)\n4. Run the server once to generate the default configuration file, then optionally edit it at ```/app/.local/share/7DaysToDie/serverconfig.xml``` to your liking\n\nYou can control the startup mode by using ```SEVEN_DAYS_TO_DIE_START_MODE```. This determines if the server should update and then start (mode 0), only update (mode 1) or only start (mode 2)) The default value is ```\"0\"```.\n\nNote that you should also enable telnet and optionally modify the ```SEVEN_DAYS_TO_DIE_TELNET_PORT``` and ```SEVEN_DAYS_TO_DIE_TELNET_PASSWORD``` environment variables accordingly, so the container can properly send the shutdown command to the server when the proper signal has been received (it uses telnet for this).\n\nOne additional feature you can enable is fully automatic updates, meaning that once a server update hits Steam, it'll restart the server and trigger the automatic update. You can enable this by setting ```SEVEN_DAYS_TO_DIE_UPDATE_CHECKING``` to ```\"1\"```.  \nYou can also use a different branch via environment variables. For example, to install the latest experimental version, you would simply set ```SEVEN_DAYS_TO_DIE_BRANCH``` to ```latest_experimental``` (this is set to ```public``` by default).\n\nIf using Docker for Windows *and* the File System passthrough option, make sure to add the git repo drive letter as a shared drive through the Docker GUI.\n\n### License\n\nSee [LICENSE](LICENSE)\n",
  "permissions": {
    "read": true,
    "write": false,
    "admin": false
  },
  "media_types": [
    "application/vnd.docker.container.image.v1+json"
  ],
  "content_types": [
    "image"
  ]
}