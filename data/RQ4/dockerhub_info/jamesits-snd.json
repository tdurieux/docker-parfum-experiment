{
  "user": "jamesits",
  "name": "snd",
  "namespace": "jamesits",
  "repository_type": "image",
  "status": 1,
  "status_description": "active",
  "description": "",
  "is_private": false,
  "is_automated": false,
  "can_edit": false,
  "star_count": 1,
  "pull_count": 59996,
  "last_updated": "2021-02-23T13:54:02.221332Z",
  "date_registered": "2019-12-09T08:26:14.656298Z",
  "collaborator_count": 0,
  "affiliation": null,
  "hub_user": "jamesits",
  "has_starred": false,
  "full_description": "# SND\r\n\r\nMinimal authoritative PTR (rDNS, reverse DNS) resolver with automatic generation of records.\r\n\r\n**WARNING**: This piece of software is at a very early development stage and should be considered experimental. It only implements a minimal feature set to pass the RIPE automated DNS test and is by no means standard-compliant. Please don't run it in production. \r\n\r\n[![Build Status](https://dev.azure.com/nekomimiswitch/General/_apis/build/status/SND?branchName=master)](https://dev.azure.com/nekomimiswitch/General/_build/latest?definitionId=71&branchName=master)\r\n[![](https://images.microbadger.com/badges/image/jamesits/snd.svg)](https://microbadger.com/images/jamesits/snd \"Get your own image badge on microbadger.com\")\r\n\r\n## Motivation\r\n\r\nSay you have a large collection of IP addresses (thousands of IPv4 /24 blocks, or one IPv6 /32 block), and you want to have PTR records on all of your IPs. Writing a zonefile and hosting it using any traditional authoritative DNS server is unrealistic: the zonefile will be of multiple GBs and you need an enormous amount of memory to even load it. \r\n\r\nSND provides you a simple alternative option: you name a base domain, and SND generates PTR records for you on the fly based on a set of pre-defined rules. \r\n\r\n```\r\n1.1.168.192.in-addr.arpa.                                                 1000 IN PTR 192.168.1.1.ptr.example.com.\r\n1.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.1.0.0.0.0.0.d.f.ip6.arpa. 1000 IN PTR fd00.1.0.0.0.0.0.1.ptr.example.com.\r\n```\r\n\r\n## Requirements\r\n\r\n### Hardware\r\n\r\nSND can run on very little processing power (Raspberry Pis are fine) and a very small memory footprint (a few MBs) although the performance will be not optimal.\r\n\r\nAs of version 0.1.2, on a 4-core Intel E5-2670 VM with more than 2GiB memory, SND can process around 25K RPS.\r\n\r\n### Software\r\n\r\nOfficially supported OS: \r\n\r\n* Linux (kernel 4.19+ with glibc)\r\n* Windows (Windows Server 2016 or later, Windows 10 Desktop 1809 or later)\r\n\r\nOther OSes are not currently tested because of the lack of resources available to me.\r\n\r\n## Usage\r\n\r\n### Configure SND\r\n\r\nCopy over the self-documented [example config](examples/config.toml) and tweak it for your own need. Please do not leave any `example.com` things in your own config. Remove what you don't need. \r\n\r\nCurrently no strict config file format checking is implemented -- you might crash the program if some important keys are missing. \r\n\r\n### Set up SND\r\n\r\nIn most cases you are going to need 2 servers (or one server with 2 different IP addresses if you don't care about availability issues). Copy the exact same config file to both servers and launch SND on both of them:\r\n\r\nDownload the pre-compiled binary from [releases](https://github.com/Jamesits/SND/releases) to your server and run it:\r\n\r\n```shell\r\nchmod +x ./snd\r\n./snd -config path/to/config.toml\r\n```\r\n\r\nOr, if you prefer Docker:\r\n\r\n```shell\r\ndocker run --rm -p 53:53 -p 53:53/udp -v path/to/config.toml:/etc/snd/config.toml:ro snd:latest\r\n```\r\n\r\nRun a simple test using dig:\r\n\r\n```shell\r\n$ dig @localhost -x 192.0.2.1\r\n\r\n; <<>> DiG 9.11.5-P4-5.1-Debian <<>> @localhost -x 192.0.2.1\r\n; (1 server found)\r\n;; global options: +cmd\r\n;; Got answer:\r\n;; ->>HEADER<<- opcode: QUERY, status: NOERROR, id: 50924\r\n;; flags: qr aa rd; QUERY: 1, ANSWER: 1, AUTHORITY: 0, ADDITIONAL: 0\r\n;; WARNING: recursion requested but not available\r\n\r\n;; QUESTION SECTION:\r\n;1.2.0.192.in-addr.arpa.      IN      PTR\r\n\r\n;; ANSWER SECTION:\r\n1.2.0.192.in-addr.arpa. 3600  IN      PTR     192.0.2.1.example.com.\r\n```\r\n\r\n### Set up DNS records\r\n\r\nYou need at least 2 `A` or `AAAA` records pointing to each of your SND servers. You might need to set them up as glue records based on your actual config.\r\n\r\n```\r\nns1.example.com.\t3600\tIN\tA\t192.0.2.1\r\nns2.example.com.\t3600\tIN\tA\t192.0.2.2\r\n```\r\n\r\n### Set up PTR record delegation\r\n\r\nSet up a `domain` object at your RIR like this. \r\n\r\n```\r\ndomain:   <zone name>\r\ndescr:    <description>\r\nadmin-c:  <nic-handle for administrative contact>\r\ntech-c:   <nic-handle for technical contact>\r\nzone-c:   <nic-handle for zone contact>\r\nnserver:  ns1.example.com\r\nnserver:  ns2.example.com\r\nmnt-by:   <your maintainer>\r\n```\r\n\r\nDetailed instructions are provided per RIR:\r\n\r\n* [AfriNIC](https://afrinic.net/support/requesting-reverse-delegation)\r\n* [ARIN](https://www.arin.net/resources/manage/reverse/)\r\n* [APNIC](https://www.apnic.net/manage-ip/manage-resources/reverse-dns/)\r\n* [LACNIC](https://www.lacnic.net/685/2/lacnic/5-delegation-of-reverse-resolution)\r\n* [RIPE NCC](https://www.ripe.net/manage-ips-and-asns/db/support/configuring-reverse-dns)\r\n\r\nNotes:\r\n\r\n* The smallest IP block sizes available for delegation differ\r\n* Only RIPE NCC is currently tested because I cannot afford IP blocks from the other RIRs\r\n\r\n## Compilation\r\n\r\nGolang 1.13.5 or later is officially supported. Before starting, make sure the `GOROOT` and `GOPATH` environment variables are set correctly and there is a `go` binary is in your `PATH`.\r\n\r\n### Linux\r\n\r\n```shell\r\ngit clone https://github.com/Jamesits/SND.git\r\ncd SND\r\n./build.sh\r\n```\r\n\r\nCollect the binary in the `build` directory.\r\n\r\n### Other OSes\r\n\r\n#### Cross Compilation from Linux\r\n\r\nSet the `GOOS` and `GOARCH` to the desired [values](https://gist.github.com/asukakenji/f15ba7e588ac42795f421b48b8aede63) and run `build.sh`.\r\n\r\n#### Native Build\r\n\r\nYou need to figure out how to build on these platforms on yourself if you want a native build.",
  "permissions": {
    "read": true,
    "write": false,
    "admin": false
  },
  "media_types": [
    "application/vnd.docker.container.image.v1+json"
  ],
  "content_types": [
    "image"
  ]
}