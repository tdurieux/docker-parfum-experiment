{
  "user": "slok",
  "name": "kube-code-generator",
  "namespace": "slok",
  "repository_type": "image",
  "status": 1,
  "status_description": "active",
  "description": "Kubernetes code generator image",
  "is_private": false,
  "is_automated": true,
  "can_edit": false,
  "star_count": 0,
  "pull_count": 259,
  "last_updated": "2018-12-30T11:36:53.037776Z",
  "date_registered": "2018-02-10T14:32:39.36812Z",
  "collaborator_count": 0,
  "affiliation": null,
  "hub_user": "slok",
  "has_starred": false,
  "full_description": "# Kube code generator [![Docker Repository on Quay](https://quay.io/repository/slok/kube-code-generator/status \"Docker Repository on Quay\")](https://quay.io/repository/slok/kube-code-generator)\n\nA kubernetes code generator ready container to create your CRD autogenerated code like clients or openapi specs.\n\nThis uses the [official util](https://github.com/kubernetes/code-generator) created by Kubernetes to autogenerate the code required by Kubernetes resources.\n\n## Kubernetes type code generation\n\n### Env vars required\n\n- `PROJECT_PACKAGE`: The project package path.\n- `CLIENT_GENERATOR_OUT`: The client generated out path.\n- `APIS_ROOT`: The path where our API/resources are.\n- `GROUPS_VERSION`: The groups of the resources.\n- `GENERATION_TARGETS`: The wanted generated code. [(deepcopy,defaulter,client,lister,informer) or \"all\"].\n\n### Process\n\nHaving a project that would be on `github.com/someone/myproject`, wants to generate the client on `github.com/someone/myproject/client`, has its resources on `github.com/someone/myproject/apis`, has the resources `github.com/someone/myproject/apis/test/v1alpha1` and `github.com/someone/myproject/apis/test2/v1` and wants only `deepcopy` and `client` autogenerated code this would be:\n\n```bash\nPROJECT_PACKAGE=github.com/someone/myproject && \\\ndocker run -it --rm \\\n    -v ${PWD}:/go/src/${PROJECT_PACKAGE}\\\n    -e PROJECT_PACKAGE=${PROJECT_PACKAGE} \\\n    -e CLIENT_GENERATOR_OUT=${PROJECT_PACKAGE}/client \\\n    -e APIS_ROOT=${PROJECT_PACKAGE}/apis \\\n    -e GROUPS_VERSION=\"test:v1alpha1 test2:v1\" \\\n    -e GENERATION_TARGETS=\"deepcopy,client\" \\\n    quay.io/slok/kube-code-generator\n```\n\n## Kubernetes type openapi spec generation\n\n### Env vars required\n\n- `CRD_PACKAGES`: The packages where all the CRD types are (comma separated).\n- `OPENAPI_OUTPUT_PACKAGE`: The output package where the open api spec will be created.\n\n### Process\n\nHaving a project that would be on `github.com/someone/myproject`, wants to generate the openapi spec for its types on `github.com/someone/myproject/openapi`, has its resources on `github.com/someone/myproject/apis`, has the resources `github.com/someone/myproject/apis/test/v1alpha1` and `github.com/someone/myproject/apis/test2/v1` autogenerated spec this would be:\n\n```bash\nPROJECT_PACKAGE=github.com/someone/myproject && \\\ndocker run -it --rm \\\n    -v ${PWD}:/go/src/${PROJECT_PACKAGE}\\\n    -e CRD_PACKAGES=${PROJECT_PACKAGE}/apis/test/v1alpha1,${PROJECT_PACKAGE}/apis/test2/v1 \\\n    -e OPENAPI_OUTPUT_PACKAGE=${PROJECT_PACKAGE}/openapi \\\n    quay.io/slok/kube-code-generator ./update-openapi.sh\n```\n\n## Example\n\nYou have a project example in [example](example/) path.\n",
  "permissions": {
    "read": true,
    "write": false,
    "admin": false
  },
  "media_types": [
    "application/vnd.docker.container.image.v1+json"
  ],
  "content_types": [
    "image"
  ]
}