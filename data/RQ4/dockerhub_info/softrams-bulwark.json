{
  "user": "softrams",
  "name": "bulwark",
  "namespace": "softrams",
  "repository_type": "image",
  "status": 1,
  "status_description": "active",
  "description": "",
  "is_private": false,
  "is_automated": false,
  "can_edit": false,
  "star_count": 0,
  "pull_count": 91,
  "last_updated": "2022-04-21T16:52:44.202796Z",
  "date_registered": "2022-01-07T17:49:03.210578Z",
  "collaborator_count": 0,
  "affiliation": null,
  "hub_user": "joshuaseidel",
  "has_starred": false,
  "full_description": "<p align=\"center\">\n  <img width=\"350\" src=\"frontend/src/assets/logo.png\">\n</p>\n\n<p style=\"text-align: center;\">An organizational asset and vulnerability management tool, with Jira integration, designed for generating application security reports.</p>\n\n<p align=\"center\">\n<img src='https://img.shields.io/badge/License-MIT-yellow.svg'>\n<img src='https://github.com/softrams/bulwark/workflows/build/badge.svg'>\n<img src='https://github.com/softrams/bulwark/workflows/CodeQL/badge.svg'>\n<img src='https://img.shields.io/docker/cloud/build/softramsdocker/bulwark'>\n<img src='https://img.shields.io/docker/pulls/softramsdocker/bulwark'>\n</p>\n\n## Features\n\n- Multi-client Vulnerability Management\n- Security Report Generation\n- Jira Integration\n- Team-based Roles Authorization\n- API Key & Management\n- Email Integration\n- Markdown Support\n\n## Note\n\nPlease keep in mind, this project is in early development.\n\n## Demo\n\n![Bulwark Walkthrough Demo](https://github.com/softrams/media/blob/main/bulwark_report_demo.gif)\n\n## Jira Integration\n\n![Bulwark Jira Demo](https://github.com/softrams/media/blob/main/bulwark_jira_demo.gif)\n\n## Launch with Docker\n\n1. Install [Docker](https://www.docker.com/)\n2. Create a `.env` file and supply the following properties:\n\n```\nMYSQL_DATABASE=\"bulwark\"\nMYSQL_PASSWORD=\"bulwark\"\nMYSQL_ROOT_PASSWORD=\"bulwark\"\nMYSQL_USER=\"root\"\nMYSQL_DB_CHECK=\"mysql\"\nDB_PASSWORD=\"bulwark\"\nDB_URL=\"172.16.16.3\"\nDB_ROOT=\"root\"\nDB_USERNAME=\"bulwark\"\nDB_PORT=3306\nDB_NAME=\"bulwark\"\nDB_TYPE=\"mysql\"\nNODE_ENV=\"production\"\nDEV_URL=\"http://localhost:4200\"\nSERVER_ADDRESS=\"http://localhost\"\nPORT=4500\nJWT_KEY=\"changeme\"\nJWT_REFRESH_KEY=\"changeme\"\nCRYPTO_SECRET=\"changeme\"\nCRYPTO_SALT=\"changeme\"\n```\n\nBuild and start Bulwark containers:\n\n```\ndocker-compose up\n```\n\nStart/Stop Bulwark containers:\n\n```\ndocker-compose start\ndocker-compose stop\n```\n\nRemove Bulwark containers:\n\n```\ndocker-compose down\n```\n\nBulwark will be available at [localhost:4500](http://localhost:4500)\n\n## Local Installation\n\n```\n$ git clone (url)\n$ cd bulwark\n$ npm install\n```\n\nRunning `npm install` will install both server-side and client-side modules. Furthermore, it will run the script `npm run config` which will dynamically set the environment variables in addition to updating the [Angular environment](https://angular.io/guide/build).\n\n### Development Mode\n\nSet `NODE_ENV=\"development\"`\n\n```\n$ npm run config\n$ npm run start:dev\n```\n\n### Production Mode\n\nSet `NODE_ENV=\"production\"`\n_Please note: `npm install` will automatically build in production mode_\n\n```\n$ npm run config\n$ npm run build:prod\n$ npm start\n```\n\n### Environment variables\n\nCreate a `.env` file on the root directory. This will be parsed with [dotenv](https://www.npmjs.com/package/dotenv) by the application.\n\n#### `DB_PASSWORD`\n\n`DB_PASSWORD=\"somePassword\"`\n\nSet this variable to database password\n\n#### `DB_USERNAME`\n\n`DB_USERNAME=\"foobar\"`\n\nSet this variable to database user name\n\n#### `DB_URL`\n\n`DB_URL=something-foo-bar.dbnet`\n\nSet this variable to database URL\n\n#### `DB_PORT`\n\n`DB_PORT=3306`\n\nSet this variable to database port\n\n#### `DB_NAME`\n\n`DB_NAME=\"foobar\"`\n\nSet this variable to database connection name\n\n#### `DB_TYPE`\n\n`DB_TYPE=\"mysql\"`\n\nThe application was developed using a MySQL database. See the [typeorm](https://github.com/typeorm/typeorm/blob/master/docs/connection-options.md#common-connection-options) documentation for more database options.\n\n#### `NODE_ENV`\n\n`NODE_ENV=production`\n\nSet this variable to determine node environment\n\n#### `DEV_URL=\"http://localhost:4200\"`\n\nUsed by Angular to build and serve the application\n\n#### `SERVER_ADDRESS=\"http://localhost\"`\n\nUpdate if a different server address is required\n\n#### `PORT=4500`\n\nUpdate if a different server port is required\n\n#### `JWT_KEY`\n\n`JWT_KEY=\"changeMe\"`\n\nSet this variable to the JWT secret\n\n#### `JWT_REFRESH_KEY`\n\n`JWT_REFRESH_KEY=\"changeMe\"`\n\nSet this variable to the refresh JWT secret\n\n#### `CRYPTO_SECRET`\n\n`CRYPTO_SECRET=\"randomValue\"`\n\nSet this variable to the [Scrypt](https://nodejs.org/api/crypto.html#crypto_crypto_scryptsync_password_salt_keylen_options) password.\n\n#### `CRYPTO_SALT`\n\n`CRYPTO_SECRET=\"randomValue\"`\n\nSet this variable to the [Scrypt](https://nodejs.org/api/crypto.html#crypto_crypto_scryptsync_password_salt_keylen_options) salt.\n\n### Empty `.env` file template\n\n```\nDB_PASSWORD=\"\"\nDB_URL=\"\"\nDB_USERNAME=\"\"\nDB_PORT=3306\nDB_NAME=\"\"\nDB_TYPE=\"\"\nNODE_ENV=\"\"\nDEV_URL=\"http://localhost:4200\"\nSERVER_ADDRESS=\"http://localhost\"\nPORT=4500\nJWT_KEY=\"\"\nJWT_REFRESH_KEY=\"\"\nCRYPTO_SECRET=\"\"\nCRYPTO_SALT=\"\"\n```\n\n### Create Initial Database Migration\n\n1. Create the initial database migration\n\n```\n$ npm run migration:init\n```\n\n2. Run the initial database migration\n\n```\n$ npm run migration:run\n```\n\n## Default credentials\n\nA user account is created on initial startup with the following credentials:\n\n- email: `admin@example.com`\n- password: `changeMe`\n\nUpon first login, update the default user password under the profile section.\n\n## Roles\n\nThe application utilizes least privilege access with team-based authorization. Teams are assigned a role which determines the features available to that specific team. A user will inherit roles from team membership. Administrators have team management access and must assign users to teams. Initially, users are created with no team association and will not have access to any features in the application.\n\nThe three roles include:\n\n1. Admin\n2. Tester\n3. Read-Only\n\nA team can only be associated to a single organization. However, a team can be associated to multiple assets within the same organization. A user can be a member of multiple teams. If a user is assigned to multiple teams of the same organization, the system will choose the highest authorized team.\n\n_Please note: The default user is automatically assigned to the `Administrators` team on initial startup_\n\n### Role Matrix\n\n<table>\n  <tr>\n    <td></td>\n    <th scope=\"col\">Admin</th>\n    <th scope=\"col\">Tester</th>\n    <th scope=\"col\">Read-Only</th>\n  </tr>\n  <tr>\n    <th scope=\"row\">User-Profile Management</th>\n    <td>x</td>\n    <td>x</td>\n    <td>x</td>\n  </tr>\n  <tr>\n    <th scope=\"row\">Team Management</th>\n    <td>x</td>\n    <td></td>\n    <td></td>\n  </tr> \n  <tr>\n    <th scope=\"row\">User Management</th>\n    <td>x</td>\n    <td></td>\n    <td></td>\n  </tr> \n  <tr>\n    <th scope=\"row\">Invite User</th>\n    <td>x</td>\n    <td></td>\n    <td></td>\n  </tr> \n  <tr>\n    <th scope=\"row\">Create User</th>\n    <td>x</td>\n    <td></td>\n    <td></td>\n  </tr> \n  <tr>\n    <th scope=\"row\">Email Settings Management</th>\n    <td>x</td>\n    <td></td>\n    <td></td>\n  </tr> \n  <tr>\n    <th scope=\"row\">Jira Integration</th>\n    <td>x</td>\n    <td></td>\n    <td></td>\n  </tr> \n  <tr>\n    <th scope=\"row\">Organization: Read</th>\n    <td>x</td>\n    <td>x</td>\n    <td>x</td>\n  </tr> \n  <tr>\n    <th scope=\"row\">Organization: Full Write</th>\n    <td>x</td>\n    <td></td>\n    <td></td>\n  </tr> \n  <tr>\n    <th scope=\"row\">Asset: Read</th>\n    <td>x</td>\n    <td>x</td>\n    <td>x</td>\n  </tr> \n  <tr>\n    <th scope=\"row\">Asset: Full Write</th>\n    <td>x</td>\n    <td></td>\n    <td></td>\n  </tr> \n  <tr>\n    <th scope=\"row\">Assessment: Read</th>\n    <td>x</td>\n    <td>x</td>\n    <td>x</td>\n  </tr> \n  <tr>\n    <th scope=\"row\">Assessment: Full Write</th>\n    <td>x</td>\n    <td>x</td>\n    <td></td>\n  </tr> \n  <tr>\n    <th scope=\"row\">Vulnerability: Read</th>\n    <td>x</td>\n    <td>x</td>\n    <td>x</td>\n  </tr> \n  <tr>\n    <th scope=\"row\">Vulnerability: Full Write</th>\n    <td>x</td>\n    <td>x</td>\n    <td></td>\n  </tr> \n  <tr>\n    <th scope=\"row\">Export Vulnerability to Jira</th>\n    <td>x</td>\n    <td>x</td>\n    <td></td>\n  </tr> \n  <tr>\n    <th scope=\"row\">Report Generation</th>\n    <td>x</td>\n    <td>x</td>\n    <td>x</td>\n  </tr> \n</table>\n\n<br>\n\n## API Key & Management\n\nA user may generate a single API key which can be used in place of their authorization token. This API key allows for all actions against the application that the user is authorized for.\n\n### Generating an API key pair\n\n1. Login to the application\n2. Navigate to the `User Profile` section\n3. Select `Generate API Key`\n\nThis action will generate a pair of keys:\n\n1. `Bulwark-Api-Key`\n   1. This is a generated plaintext value to identify the user.\n2. `Bulwark-Secret-Key`\n   1. This is a generated plaintext value to verify the user by comparing a [Bcrypt](https://www.npmjs.com/package/bcrypt) hash stored in the database.\n\n<strong>Write down the generated keys in a safe place. You will not be able to retrieve the keys at a later time.</strong>\n\n### How to use API keys\n\nThe API key pair values must be matched and appended to the following HTTP request headers:\n\n- `Bulwark-Api-Key`\n- `Bulwark-Secret-Key`\n\nExample:\n\n```\nGET /api/assessment/1 HTTP/1.1\nHost: localhost:4500\nAccept: application/json, text/plain, */*\nAccept-Language: en-US,en;q=0.5\nAccept-Encoding: gzip, deflate\nBulwark-Api-Key: {{changeMe}}\nBulwark-Secret-Key: {{changeMe}}\nOrigin: http://localhost:4200\nConnection: close\nReferer: http://localhost:4200/\nPragma: no-cache\nCache-Control: no-cache\n```\n\n## Built With\n\n- [Typeorm](https://typeorm.io/#/) - The ORM used\n- [Angular](https://angular.io/) - The Angular Framework\n- [Express](https://expressjs.com/) - A minimal and flexible Node.js web application framework\n\n## Contributing\n\nPull requests are welcome. For major changes, please open an issue first to discuss what you would like to change. Read the [contribution guidelines](CONTRIBUTING.md) for more information.\n\n## License\n\n[MIT](https://choosealicense.com/licenses/mit/)\n",
  "permissions": {
    "read": true,
    "write": false,
    "admin": false
  },
  "media_types": [
    "application/vnd.docker.container.image.v1+json"
  ],
  "content_types": [
    "image"
  ]
}