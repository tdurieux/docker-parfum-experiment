{
  "user": "wealdtech",
  "name": "ethdo",
  "namespace": "wealdtech",
  "repository_type": "image",
  "status": 1,
  "status_description": "active",
  "description": "",
  "is_private": false,
  "is_automated": false,
  "can_edit": false,
  "star_count": 1,
  "pull_count": 14735,
  "last_updated": "2023-01-02T22:09:19.323488Z",
  "date_registered": "2020-05-20T09:54:14.629643Z",
  "collaborator_count": 0,
  "affiliation": null,
  "hub_user": "wealdtech",
  "has_starred": false,
  "full_description": "[![Tag](https://img.shields.io/github/tag/wealdtech/ethdo.svg)](https://github.com/wealdtech/ethdo/releases/)\n[![License](https://img.shields.io/github/license/wealdtech/ethdo.svg)](LICENSE)\n[![GoDoc](https://godoc.org/github.com/wealdtech/ethdo?status.svg)](https://godoc.org/github.com/wealdtech/ethdo)\n[![Travis CI](https://img.shields.io/travis/wealdtech/ethdo.svg)](https://travis-ci.org/wealdtech/ethdo)\n\nA command-line tool for managing common tasks in Ethereum 2.\n\n## Table of Contents\n\n- [Install](#install)\n  - [Binaries](#binaries)\n  - [Docker](#docker)\n  - [Source](#source)\n- [Setting up](#setting-up)\n- [Usage](#usage)\n- [Maintainers](#maintainers)\n- [Contribute](#contribute)\n- [License](#license)\n\n## Install\n\n### Binaries\n\nBinaries for the latest version of `ethdo` can be obtained from [the releases page](https://github.com/wealdtech/ethdo/releases).\n\n### Docker\n\nYou can obtain the latest version of `ethdo` using docker with:\n\n```\ndocker pull wealdtech/ethdo\n```\n\n### Source\n`ethdo` is a standard Go program which can be installed with:\n\n```sh\ngo install github.com/wealdtech/ethdo@latest\n```\n\nNote that `ethdo` requires at least version 1.13 of go to operate.  The version of go can be found with `go version`.\n\nIf this does not work please see the [troubleshooting](https://github.com/wealdtech/ethdo/blob/master/docs/troubleshooting.md) page.\n\nThe docker image can be build locally with:\n\n```sh\ndocker build -t ethdo .\n```\n\nYou can run `ethdo` using docker after that. Example:\n\n```sh\ndocker run -it ethdo --help\n```\n\nNote that that many `ethdo` commands connect to the beacon node to obtain information.  If the beacon node is running directly on the server this requires the `--network=host` command, for example:\n\n```sh\ndocker run --network=host ethdo chain status\n```\n\nAlternatively, if the beacon node is running in a separate docker container a shared network can be created with `docker network create eth2` and accessed by adding `--network=eth2` added to both the beacon node and `ethdo` containers.\n\n## Setting up\n\n`ethdo` needs a connection to a beacon node for many of its features.  `ethdo` can connect to any beacon node that fully supports the [standard REST API](https://ethereum.github.io/beacon-APIs/) using the `--connection <beacon-node:port>` argument.  The following changes are required to beacon nodes to make this available.\n\n### Lighthouse\nLighthouse disables the REST API by default.  To enable it, the beacon node must be started with the `--http` parameter.  If you want to access the REST API from a remote server then you should also look to change the `--http-address` and `--http-allow-origin` options as per the Lighthouse documentation.\n\nThe default port for the REST API is 5052, which can be changed with the `--http-port` parameter.\n\n### Nimbus\nNimbus disables the REST API by default.  To enable it, the beacon node must be started with the `--rest` parameter.  If you want to access the REST API from a remote server then you should also look to change the `--rest-address` and `--rest-allow-origin` options as per the Nimbus documentation.\n\nThe default port for the REST API is 5052, which can be changed with the `--rest-port` parameter.\n\n### Prysm\nPrysm enables the REST API by default.  You will need to add the parameter `--grpc-max-msg-size 268435456` to be obtain to obtain large sets of information such as the list of current validators.  If you want to access the REST API from a remote server then you should also look to change the `--grpc-gateway-host` and `--grpc-gateway-corsdomain` options as per the Prysm documentation.\n\nThe default port for the REST API is 3500, which can be changed with the `--grpc-gateway-port` parameter.\n\n### Teku\nTeku disables the REST API by default.  To enable it, the beacon node must be started with the `--rest-api-enabled` parameter.  If you want to access the REST API from a remote server then you should also look to change the `--rest-api-interface`, `--rest-api-host-allowlist` and `--rest-api-cors-origins` options as per the Teku documentation.\n\nThe default port for the REST API is 5051, which can be changed with the `--rest-api-port` parameter.\n\n## Usage\n\n`ethdo` contains a large number of features that are useful for day-to-day interactions with the different consensus clients.\n\n### Wallets and accounts\n\n`ethdo` uses the [go-eth2-wallet](https://github.com/wealdtech/go-eth2-wallet) system to provide unified access to different wallet types.  When on the filesystem the locations of the created wallets and accounts are:\n\n    - for Linux: $HOME/.config/ethereum2/wallets\n    - for OSX: $HOME/Library/Application Support/ethereum2/wallets\n    - for Windows: %APPDATA%\\ethereum2\\wallets\n\nIf using the filesystem store, the additional parameter `base-dir` can be supplied to change this location.\n\n> If using docker as above you can make this directory accessible to docker to make wallets and accounts persistent.  For example, for linux you could use the following command to list your wallets on Linux:\n>\n> ```\n> docker run -v $HOME/.config/ethereum2/wallets:/data ethdo --base-dir=/data wallet list\n> ```\n>\n> This will allow you to use `ethdo` with or without docker, with the same location for wallets and accounts.\n\nAll ethdo comands take the following parameters:\n\n  - `store`: the name of the storage system for wallets.  This can be one of \"filesystem\" (for local storage of the wallet) or \"s3\" (for remote storage of the wallet on [Amazon's S3](https://aws.amazon.com/s3/) storage system), and defaults to \"filesystem\"\n  - `storepassphrase`: the passphrase for the store.  If this is empty the store is unencrypted\n  - `walletpassphrase`: the passphrase for the wallet.  This is required for some wallet-centric operations such as creating new accounts\n  - `passphrase`: the passphrase for the account.  This is required for some account-centric operations such as signing data\n\nAccounts are specified in the standard \"<wallet>/<account>\" format, for example the account \"savings\" in the wallet \"primary\" would be referenced as \"primary/savings\".\n\n### Configuration file and environment\n\nethdo supports a configuration file; by default in the user's home directory but changeable with the `--config` argument on the command line.  The configuration file provides values that override the defaults but themselves can be overridden with command-line arguments.\n\nThe default file name is `.ethdo.json` or `.ethdo.yml` depending on the encoding used (JSON or YAML, respectively).  An example `.ethdo.json` file is shown below:\n\n```json\n{\n  \"store\": \"s3\",\n  \"storepassphrase\": \"s3 secret passphrse\",\n  \"account\": \"Personal wallet/Operations\",\n  \"verbose\": true\n}\n```\n\nethdo also supports environment variables.  Environment variables are prefixed with \"ETHDO_\" and are upper-cased.  So for example to provide your account passphrase in an environment variable on a Unix system you could use:\n\n```sh\nexport ETHDO_PASSPHRASE=\"my account passphrase\"\n```\n\n### S3 store options\n\nAmazon S3-compatible stores have additional options available, which can be configured under the \"stores.s3\" key.  An example configuration is as follows:\n\n```json\n{\n  \"stores\": {\n    \"s3\": {\n      \"bucket\":\"mybucketname\",\n      \"path\":\"path/in/bucket\",\n      \"passphrase\":\"secret\"\n    }\n  }\n}\n```\n\nInformation on these and other options can be found in the S3 store repository.\n\n### Output and exit status\n\nIf set, the `--quiet` argument will suppress all output.\n\nIf set, the `--verbose` argument will output additional information related to the command.  Details of the additional information is command-specific and explained in the command help below.\n\nIf set, the `--debug` argument will output additional information about the operation of ethdo as it carries out its work.\n\nCommands will have an exit status of 0 on success and 1 on failure.  The specific definition of success is specified in the help for each command.\n\n## Passphrase strength\n\n`ethdo` will by default not allow creation or export of accounts or wallets with weak passphrases.  If a weak pasphrase is used then `ethdo` will refuse to continue.\n\nIf a weak passphrase is required, `ethdo` can be supplied with the `--allow-weak-passphrases` option which will force it to accept any passphrase, even if it is considered weak.\n\n## Rules for account passphrases\n\nAccount passphrases are used in various places in `ethdo`.  Where they are used, the following rules apply:\n\n  - commands that require passphrases to operate, for example unlocking an account, can be supplied with multiple passphrases.  If they are, then each passphrase is tried until one succeeds or they all fail\n  - commands that require passphrases to create, for example creating an account, must be supplied with a single passphrase.  If more than one passphrase is supplied the command will fail\n\nIn addition, the following rules apply to passphrases supplied on the command line:\n\n  - passphrases **must not** start with `0x`\n  - passphrases **must not** contain the comma (,) character\n\n# Commands\n\nCommand information, along with sample outputs and optional arguments, is available in [the usage section](https://github.com/wealdtech/ethdo/blob/master/docs/usage.md).\n\n# HOWTO\n\nThere is a [HOWTO](https://github.com/wealdtech/ethdo/blob/master/docs/howto.md) that covers details about how to carry out various common tasks.  There is also a specific document that provides details of how to carry out [common conversions](docs/conversions.md) from mnemonic, to account, to deposit data, for launchpad-related configurations.\n\n## Maintainers\n\nJim McDonald: [@mcdee](https://github.com/mcdee).\n\nSpecial thanks to [@SuburbanDad](https://github.com/SuburbanDad) for updating xgo to allow for cross-compilation of `ethdo` releases.\n\n## Contribute\n\nContributions welcome. Please check out [the issues](https://github.com/wealdtech/ethdo/issues).\n\n## License\n\n[Apache-2.0](LICENSE) © 2019, 2020 Weald Technology Trading Ltd\n\n",
  "permissions": {
    "read": true,
    "write": false,
    "admin": false
  },
  "media_types": [
    "application/vnd.docker.container.image.v1+json"
  ],
  "content_types": [
    "image"
  ]
}