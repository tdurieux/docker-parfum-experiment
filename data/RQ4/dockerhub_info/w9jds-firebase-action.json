{
  "user": "w9jds",
  "name": "firebase-action",
  "namespace": "w9jds",
  "repository_type": "image",
  "status": 1,
  "status_description": "active",
  "description": "GitHub Action for interacting with Firebase",
  "is_private": false,
  "is_automated": false,
  "can_edit": false,
  "star_count": 4,
  "pull_count": 3167517,
  "last_updated": "2022-12-18T00:41:31.186461Z",
  "date_registered": "2020-11-09T06:29:20.863067Z",
  "collaborator_count": 0,
  "affiliation": null,
  "hub_user": "w9jds",
  "has_starred": false,
  "full_description": "# GitHub Actions for Firebase\n\nThis Action for [firebase-tools](https://github.com/firebase/firebase-tools) enables arbitrary actions with the `firebase` command-line client.\n\n## Inputs\n\n* `args` - **Required**. This is the arguments you want to use for the `firebase` cli\n\n\n## Environment variables\n\n* `FIREBASE_TOKEN` - **Required if GCP_SA_KEY is not set**. The token to use for authentication. This token can be aquired through the `firebase login:ci` command.\n\n* `GCP_SA_KEY` - **Required if FIREBASE_TOKEN is not set**. A **normal** service account key(json format) or a **base64 encoded** service account key with the `Firebase Admin` role in the project.\nIf you're deploying functions, you would also need the `Cloud Functions Developer` role. \nSince the deploy service account is using the App Engine default service account in the deploy process, it also \nneeds the `Service Account User` role.\nIf you're only doing Hosting, `Firebase Hosting Admin` is enough.\nhttps://firebase.google.com/docs/hosting/github-integration\n\n* `PROJECT_ID` - **Optional**. To specify a specific project to use for all commands. Not required if you specify a project in your `.firebaserc` file.\n\n* `PROJECT_PATH` - **Optional**. The path to the folder containing `firebase.json` if it doesn't exist at the root of your repository. e.g. `./my-app`\n\n## Example\n\nTo authenticate with Firebase, and deploy to Firebase Hosting:\n\n```yaml\nname: Build and Deploy\non:\n  push:\n    branches:\n      - master\n\njobs:\n  build:\n    name: Build\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout Repo\n        uses: actions/checkout@master\n      - name: Install Dependencies\n        run: npm install\n      - name: Build\n        run: npm run build-prod\n      - name: Archive Production Artifact\n        uses: actions/upload-artifact@master\n        with:\n          name: dist\n          path: dist\n  deploy:\n    name: Deploy\n    needs: build\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout Repo\n        uses: actions/checkout@master\n      - name: Download Artifact\n        uses: actions/download-artifact@master\n        with:\n          name: dist\n          path: dist\n      - name: Deploy to Firebase\n        uses: w9jds/firebase-action@master\n        with:\n          args: deploy --only hosting\n        env:\n          FIREBASE_TOKEN: ${{ secrets.FIREBASE_TOKEN }}\n```\nAlternatively:\n\n```yaml\n        env:\n          GCP_SA_KEY: ${{ secrets.GCP_SA_KEY }}\n```\n\n\nIf you have multiple hosting environments you can specify which one in the args line. \ne.g. `args: deploy --only hosting:[environment name]`\n\nIf you want to add a message to a deployment (e.g. the Git commit message) you need to take extra care and escape the quotes or the YAML breaks.\n\n```yaml\n        with:\n          args: deploy --message \\\"${{ github.event.head_commit.message }}\\\"\n```\n\n## License\n\nThe Dockerfile and associated scripts and documentation in this project are released under the [MIT License](LICENSE).\n\n\n### Recommendation\n\nIf you decide to do seperate jobs for build and deployment (which is probably advisable), then make sure to clone your repo as the Firebase-cli requires the firebase repo to deploy (specifically the `firebase.json`)",
  "permissions": {
    "read": true,
    "write": false,
    "admin": false
  },
  "media_types": [
    "application/vnd.docker.container.image.v1+json"
  ],
  "content_types": [
    "image"
  ]
}