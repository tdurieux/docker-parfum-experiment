{
  "user": "dashersw",
  "name": "cote-workshop",
  "namespace": "dashersw",
  "repository_type": "image",
  "status": 1,
  "status_description": "active",
  "description": "An e-commerce application case study with Node.js microservices",
  "is_private": false,
  "is_automated": true,
  "can_edit": false,
  "star_count": 1,
  "pull_count": 3712,
  "last_updated": "2018-06-28T14:27:22.56791Z",
  "date_registered": "2016-08-24T05:36:25.406295Z",
  "collaborator_count": 0,
  "affiliation": null,
  "hub_user": "dashersw",
  "has_starred": false,
  "full_description": "# Microservices case study with cote.js\n\nThis project aims to show a microservices architecture built with [cote.js](https://github.com/dashersw/cote), an auto-discovery mesh network framework for building fault-tolerant and scalable applications.\n\nIt's an example e-commerce application with a complete feature set from admin interface to end user interface, and 4 different microservices for dealing with payments, products, purchases and user management.\n\nThe admin interface is implemented on a REST server to demonstrate how cote.js would work within an existing express-based application. Product, user and purchase management is done via REST calls to the admin server, where they are then forwarded to respective microservices.\n\nThe client interface is implemented entirely in cote; the server only serves a single index.html. It's a breakthrough implementation, which basically means you can host your website statically (on for example, S3), and have all the benefits of a server and the microservices architecture.\n\n## Installation\n\nRun the following commands:\n\n```\ngit clone git@github.com:dashersw/cote-workshop.git\ncd cote-workshop\nnpm install\nnode init-db.js\n```\n\n## Getting the system up and running\n\nThere are four backend services, an admin interface and an end-user interface.\n\n### Quickstart\n\nFor the quickest start, have [PM2](http://pm2.keymetrics.io) installed globally and then just type:\n\n```\npm2 start cote-workshop.json\n```\n\nThis will run all the 6 services you need, and you can monitor your services with `pm2 monit` or use any pm2 commands at your disposal.\n\nAdmin interface will be available in [http://localhost:5000](http://localhost:5000)\n\nEnd user interface will be available in [http://localhost:5001](http://localhost:5001)\n\nMonitoring will be available in [http://localhost:5555](http://localhost:5555)\n\nNavigate to the admin and (multiple) end user interfaces and add / delete / buy some products to see everything updating in real time!\n\n### Manual start\n\nRun the admin interface:\n\n```\nnode admin/server\n```\n\nAdmin interface will be available in [http://localhost:5000](http://localhost:5000)\n\nRun the end user interface in a separate terminal window (or tab):\n\n```\nnode end-user/server\n```\n\nEnd user interface will be available in [http://localhost:5001](http://localhost:5001)\n\nNow run the services in separate terminal windows (or tabs):\n\n```\nnode services/payment-service\nnode services/product-service\nnode services/purchase-service\nnode services/user-service\n```\n\nNavigate to the admin and (multiple) end user interfaces and add / delete / buy some products to see everything updating in real time!\n\n## Monitoring\n\nThere's a built-in monitor service which lets you visualize the connections between microservices. The monitoring service is automatically started via pm2, or if you want to manually start it, run:\n\n```\nnode monitor.js\n```\n\nIt's a simple monitoring GUI, and will be available in [http://localhost:5555](http://localhost:5555)\n\n## Running locally with host names\n\nThis repo includes a proxy service which binds on port 80 to host the application via certain host names.\n\nThe proxy supports these virtual hosts;\n\n`http://local-admin.cotejs.org` for the admin interface and redirects requests to `localhost:5000`.\n\n`http://local-end-user.cotejs.org` for the end user interface and redirects requests to `localhost:5001`.\n\n`http://local-monitoring.cotejs.org` for the monitoring interface and redirects requests to `localhost:5555`.\n\nThen you have to modify your `/etc/hosts` file to include `127.0.0.1 local-admin.cotejs.org local-end-user.cotejs.org local-monitoring.cotejs.org`. Now when you visit either of these addresses in your browser, you will be redirected to the respective service.\n\n## Docker installation\n\nThis repository includes a full-featured `docker-compose.yml` to start all the necessary services including a PostgreSQL database via Docker.\n\nRun the following to launch all services;\n```\ndocker-compose up\n```\n\nThis will build necessary local images and then launch a cluster of services. If you edit your `/etc/hosts` file to accomodate the given domain names, you can interact with the application via your browser.\n",
  "permissions": {
    "read": true,
    "write": false,
    "admin": false
  },
  "media_types": [
    "application/vnd.docker.container.image.v1+json"
  ],
  "content_types": [
    "image"
  ]
}