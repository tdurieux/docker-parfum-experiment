{
  "user": "quickcorp",
  "name": "qcobjects",
  "namespace": "quickcorp",
  "repository_type": "image",
  "status": 1,
  "status_description": "active",
  "description": "A framework to make micro-services and micro-frontends into an N-Tier architecture",
  "is_private": false,
  "is_automated": false,
  "can_edit": false,
  "star_count": 0,
  "pull_count": 912239,
  "last_updated": "2021-07-19T03:23:13.577107Z",
  "date_registered": "2019-05-24T08:30:28.810471Z",
  "collaborator_count": 0,
  "affiliation": null,
  "hub_user": "quickcorp",
  "has_starred": false,
  "full_description": "![logo](https://qcobjects.dev/qcobjects_01.png)\n\n[![GitHub license](https://img.shields.io/github/license/QuickCorp/QCObjects.svg)](https://github.com/QuickCorp/QCObjects/blob/master/LICENSE.txt) [![FOSSA Status](https://app.fossa.com/api/projects/git%2Bgithub.com%2FQuickCorp%2FQCObjects.svg?type=shield)](https://app.fossa.com/projects/git%2Bgithub.com%2FQuickCorp%2FQCObjects?ref=badge_shield) [![](https://data.jsdelivr.com/v1/package/npm/qcobjects/badge)](https://www.jsdelivr.com/package/npm/qcobjects)  [![Badge for version for Visual Studio Code extension Quickcorp.QCObjects-vscode](https://vsmarketplacebadge.apphb.com/version/Quickcorp.QCObjects-vscode.svg)](https://marketplace.visualstudio.com/items?itemName=Quickcorp.QCObjects-vscode) [![Documentation Status](https://readthedocs.org/projects/qcobjects/badge/?version=latest)](https://qcobjects.readthedocs.io/?badge=latest) [![GitHub release](https://img.shields.io/github/issues/QuickCorp/QCObjects.svg)](https://github.com/QuickCorp/QCObjects/releases/) [![GitHub stars](https://img.shields.io/github/stars/QuickCorp/QCObjects.svg)](https://github.com/QuickCorp/QCObjects) [![npm version](https://badge.fury.io/js/qcobjects.svg)](https://badge.fury.io/js/qcobjects) ![apm: version](https://flat.badgen.net/apm/v/qcobjects-syntax?params) ![docker pulls](https://img.shields.io/docker/pulls/quickcorp/qcobjects.svg) [![Contributor Covenant](https://img.shields.io/badge/Contributor%20Covenant-v1.4%20adopted-ff69b4.svg)](CODE_OF_CONDUCT.md)\n\n[![Become a Patreon ](https://c5.patreon.com/external/logo/become_a_patron_button.png)](https://www.patreon.com/join/qcobjects?)\n\n[![QCObjects - To code fancy, clean and quick | Product Hunt](https://api.producthunt.com/widgets/embed-image/v1/review.svg?post_id=167109&theme=dark)](https://www.producthunt.com/posts/qcobjects?utm_source=badge-review&utm_medium=badge&utm_souce=badge-qcobjects#discussion-body)\n\n# QCObjects\n------------------------------------\nWelcome to [QCObjects](https://qcobjects.dev). An Open-source framework that empowers full-stack developers to make micro-services and micro-frontends into an N-Tier architecture.\n\nWith QCObjects devlopers are also able to code front-end and back-end together using a common syntax in pure JavaScript. It is cross-browser, cross-platform and cross-frame.\n\nInstall it, make a textfield or a navigate home functionality, all in just one step.\n\n[QCObjects is being featured by British Herald as today, the most advanced framework for modern software development.](https://britishherald.com/qcobjects-the-first-world-class-tech-framework-made-in-south-america-is-meant-to-make-developers-happier-while-they-code/)\n\nThis document is the Main Reference Documentation!\n\nThis repository and readme is hosted at [https://qcobjects.dev](https://qcobjects.dev)\n\nCheck out the official page of [QCObjects](https://qcobjects.com) at https://qcobjects.com\n\nThis project adheres to the Contributor Covenant [code of conduct](CODE_OF_CONDUCT.md). By participating, you are expected to uphold this code. Please report unacceptable behavior to info@quickcorp.cl.\n\n**Contributors are welcome!**\n\nYou can contribute to [QCObjects](https://qcobjects.dev) following the set of guidelines expressed in the file [CONTRIBUTING.md](CONTRIBUTING.md)\n\n# The meaning of the name QCObjects (Do not forget the Q)\n\nOften, some people is confusing **QCObjects** name with **CObjects** (perhaps some day it changes, who knows...) but the Q has an important meaning: It means Quick! What the complete name QCObjects does mean is **Quick Components and Objects**, and that is why the Q, C, O letters are capitalized.\n\n# QCObjects Explainer Video\n\nFor those who have no time to read all of this today, here is a small video that explains what QCObjects is and what can be done with it.\n\n[![QCObjects Explainer Video](https://img.youtube.com/vi/D0rftABPGvQ/0.jpg)](https://www.youtube.com/watch?v=D0rftABPGvQ \"QCObjects Explainer Video\")\n\n_________________________\n# Table of Contents\n\n<!-- TOC depthFrom:1 depthTo:3 withLinks:1 updateOnSave:1 orderedList:0 -->\n\n- [QCObjects](#qcobjects)\n- [The meaning of the name QCObjects (Do not forget the Q)](#the-meaning-of-the-name-qcobjects-do-not-forget-the-q)\n- [QCObjects Explainer Video](#qcobjects-explainer-video)\n- [Table of Contents](#table-of-contents)\n- [Principals](#principals)\n- [Main features](#main-features)\n- [Progressive Web Apps (PWA) Adopted Features](#progressive-web-apps-pwa-adopted-features)\n\t- [Prevent Render-blocking resources](#prevent-render-blocking-resources)\n\t- [On-Demand Resources Load](#on-demand-resources-load)\n\t- [Lazy-loading of images in components (use lazy-src instead of src attribute in img tag)](#lazy-loading-of-images-in-components-use-lazy-src-instead-of-src-attribute-in-img-tag)\n- [Cross Browser Javascript Framework for MVC Patterns](#cross-browser-javascript-framework-for-mvc-patterns)\n- [Install it, make a textfield or a navigate home functionality, all in just one step.](#install-it-make-a-textfield-or-a-navigate-home-functionality-all-in-just-one-step)\n- [Dynamic Components Architecture](#dynamic-components-architecture)\n- [ECMA-262 Specification](#ecma-262-specification)\n- [Copyright](#copyright)\n- [Demo](#demo)\n\t- [PWA Live Demo](#pwa-live-demo)\n\t- [Demo Integrating with Foundation](#demo-integrating-with-foundation)\n\t- [Demo Integrating with Materializecss](#demo-integrating-with-materializecss)\n\t- [Demo Using Raw CSS](#demo-using-raw-css)\n\t- [Example of QCObjects using and manipulating canvas objects](#example-of-qcobjects-using-and-manipulating-canvas-objects)\n- [DevBlog](#devblog)\n- [Fork](#fork)\n- [Become a Sponsor](#become-a-sponsor)\n- [Check out the QCObjects SDK](#check-out-the-qcobjects-sdk)\n- [Donate](#donate)\n- [Installing](#installing)\n\t- [Using QCObjects with Atom:](#using-qcobjects-with-atom)\n\t- [Using QCObjects in Visual Studio Code:](#using-qcobjects-in-visual-studio-code)\n\t- [Installing with NPM:](#installing-with-npm)\n\t- [Installing the docker playground:](#installing-the-docker-playground)\n\t- [One-Step Installation Script for Ubuntu 18.x](#one-step-installation-script-for-ubuntu-18x)\n\t- [One-Step Installation Script for RHEL8](#one-step-installation-script-for-rhel8)\n\t- [One-Step Installation Script for Raspberry PI Raspbian 9](#one-step-installation-script-for-raspberry-pi-raspbian-9)\n\t- [One-Step Installation Script for macOS](#one-step-installation-script-for-macos)\n\t- [Install and test QCObjects on Microsoft Windows OS](#install-and-test-qcobjects-on-microsoft-windows-os)\n\t- [QCObjects Multi-Cloud Installation](#qcobjects-multi-cloud-installation)\n\t\t- [DigitalOcean One-Click Droplet](#digitalocean-one-click-droplet)\n\t\t- [AWS Amazon Machine Images (AMI)](#aws-amazon-machine-images-ami)\n\t\t- [Amazon Web Services AWS PIB (Private Amazon Machine Image)](#amazon-web-services-aws-pib-private-amazon-machine-image)\n\t- [Using the development version code in the straight way into HTML5:](#using-the-development-version-code-in-the-straight-way-into-html5)\n\t- [Using the CDN minified version code from jsDelivr CDN](#using-the-cdn-minified-version-code-from-jsdelivr-cdn)\n\t- [Using the latest non-minified version from jsDelivr CDN](#using-the-latest-non-minified-version-from-jsdelivr-cdn)\n\t- [Using UNPKG CDN](#using-unpkg-cdn)\n\t- [Using CDNJS](#using-cdnjs)\n- [Reference](#reference)\n\t- [Essentials](#essentials)\n\t\t- [QC_Object](#qcobject)\n\t\t- [ComplexStorageCache](#complexstoragecache)\n\t\t- [asyncLoad](#asyncload)\n\t\t- [Class](#class)\n\t\t- [QC_Append, append method](#qcappend-append-method)\n\t\t- [The \\_super\\_ method](#the-super-method)\n\t\t- [New](#new)\n\t\t- [InheritClass](#inheritclass)\n\t\t- [ClassFactory](#classfactory)\n\t\t- [\\_Crypt](#crypt)\n\t\t- [GLOBAL](#global)\n\t\t- [CONFIG](#config)\n\t\t- [Processor](#processor)\n\t\t- [waitUntil](#waituntil)\n\t\t- [Package](#package)\n\t\t- [Import](#import)\n\t\t- [Export](#export)\n\t\t- [Cast](#cast)\n\t\t- [Tag](#tag)\n\t\t- [Ready](#ready)\n\t\t- [Component Class](#component-class)\n\t\t- [Component HTML Tag](#component-html-tag)\n\t\t- [Controller](#controller)\n\t\t- [View](#view)\n\t\t- [VO](#vo)\n\t\t- [Service](#service)\n\t\t- [serviceLoader](#serviceloader)\n\t\t- [JSONService](#jsonservice)\n\t\t- [ConfigService](#configservice)\n\t\t- [SourceJS](#sourcejs)\n\t\t- [SourceCSS](#sourcecss)\n\t\t- [Effect](#effect)\n\t\t- [Timer](#timer)\n\t- [List and Math Functions](#list-and-math-functions)\n\t\t- [ArrayList](#arraylist)\n\t\t- [ArrayCollection](#arraycollection)\n\t\t- [[ArrayList or Array].unique](#arraylist-or-arrayunique)\n\t\t- [[ArrayList or Array].table](#arraylist-or-arraytable)\n\t\t- [[ArrayList or Array].sort](#arraylist-or-arraysort)\n\t\t- [[ArrayList or Array].sortBy](#arraylist-or-arraysortby)\n\t\t- [[ArrayList or Array].matrix](#arraylist-or-arraymatrix)\n\t\t- [[ArrayList or Array].matrix2d](#arraylist-or-arraymatrix2d)\n\t\t- [[ArrayList or Array].matrix3d](#arraylist-or-arraymatrix3d)\n\t\t- [range](#range)\n\t\t- [Array.sum](#arraysum)\n\t\t- [Array.avg](#arrayavg)\n\t\t- [Array.min](#arraymin)\n\t\t- [Array.max](#arraymax)\n\t- [SDK](#sdk)\n\t\t- [SDK Components](#sdk-components)\n\t\t- [SDK Controllers](#sdk-controllers)\n\t\t- [SDK Effects](#sdk-effects)\n\t\t- [SDK Misc Tools](#sdk-misc-tools)\n\t\t- [SDK Views](#sdk-views)\n\t\t- [SDK i18n messages](#sdk-i18n-messages)\n\t- [The QCObjects HTTP2 Built-In Server](#the-qcobjects-http2-built-in-server)\n\t\t- [Start serving your files with QCObjects](#start-serving-your-files-with-qcobjects)\n\t\t- [Principals of an N-Tier or Multitier architecture](#principals-of-an-n-tier-or-multitier-architecture)\n\t\t- [Micro-services Principals](#micro-services-principals)\n\t\t- [Backend settings in config.json](#backend-settings-in-configjson)\n\t\t- [Backend routing](#backend-routing)\n\t\t- [The QCObjects Microservice Class and Package](#the-qcobjects-microservice-class-and-package)\n\t\t- [Generating a Self-Signed Certificate with QCObjects](#generating-a-self-signed-certificate-with-qcobjects)\n\t\t- [Working with a Letsencrypt HTTPS certificate, Certbot and QCObjects](#working-with-a-letsencrypt-https-certificate-certbot-and-qcobjects)\n- [Quick Start Guide](#quick-start-guide)\n\t\t- [Quick Start your PWA (Progressive Web App)](#quick-start-your-pwa-progressive-web-app)\n\t\t- [Quick Start your AMP (Accelerated Mobile Page)](#quick-start-your-amp-accelerated-mobile-page)\n- [Start Coding](#start-coding)\n\t- [Step 1: Start creating a main import file and name it like: cl.quickcorp.js. Put it into packages/js/ file directory](#step-1-start-creating-a-main-import-file-and-name-it-like-clquickcorpjs-put-it-into-packagesjs-file-directory)\n\t- [Step 2: Then create some services inhereting classes into the file js/packages/cl.quickcorp.services.js :](#step-2-then-create-some-services-inhereting-classes-into-the-file-jspackagesclquickcorpservicesjs-)\n\t- [Step 3: Now it's time to create the components (cl.quickcorp.components.js)](#step-3-now-its-time-to-create-the-components-clquickcorpcomponentsjs)\n\t- [Step 4: Once you have done the above components declaration, you will now want to code your controllers (cl.quickcorp.controller.js)](#step-4-once-you-have-done-the-above-components-declaration-you-will-now-want-to-code-your-controllers-clquickcorpcontrollerjs)\n\t- [Step 5: To use into the HTML5 code you only need to do some settings between script tags:](#step-5-to-use-into-the-html5-code-you-only-need-to-do-some-settings-between-script-tags)\n- [QCObjects CLI Tool](#qcobjects-cli-tool)\n\t- [Usage](#usage)\n\t- [Options](#options)\n\t- [Commands](#commands)\n\t- [Use:](#use)\n\t- [License](#license)\n\n<!-- /TOC -->\n\n\n\n# Principals\n\nHere are the principals with QCObjects was made with:\n\n0. You should type in JavaScript to code a JavaScript application.\n1. Everything is an object.\n2. Every object has a definition.\n3. On the front-end side, any object can be stacked into the DOM or Virtual-DOM without the need to re-declare its definition.\n4. Every object has a body.\n5. A class should be the main definition of an object.\n6. A class should be easy typed as an object itself.\n7. Your code should be easily organised into packages.\n8. Your code should be possible to easily scafold your applications into a clean architecture.\n9. A component is an entity that has an object representation, and a tag declaration. The content of a component should be possible to be filled up remotely and locally. As a component is an object, it has a body as well, and the body of the component normally is an stacked instance of a DOM element.\n10. A component can be attached to the DOM or detached from it without affecting its functionality.\n11. A service call can be extended to scafold its functionality.\n12. You should be able to import a package remotely.\n13. You should be able to scafold your code and also controlling your savings on the server side by not doing unnecessary calls to remote sources. You should not need to repeat yourself coding this kind of controls.\n14. You should be able to code your N-Tier application in a single language or syntax.\n15. You should be able to apply any template you want to a component, it doesn't matter the what syntax or language the template was written with.\n16. If an HTML tag is already represented by a DOM object instance, you should not need to duplicate this instance definition in order to render its contents.\n17. Your HTML main page should be clean. But you should be able to bind what controls the tag behaviour without affecting the HTML syntax.\n18. The order of execution of your code should be easily understandable and readable from the code, and the rendering process of every component should have and execution control in as many layers you need.\n19. A layered pattern (like MVC or MVCC) should be present for every component. It doesn't matter if you define every layer or not.\n20. The behaviour of a component should not be determined by its rendering process.\n21. It is necessary a components stack that splits the DOM into a subjacent tree of attached elements. So now it exists and it is called The QCObjects Nested Components Stack.\n22. You should be able to extend a component instance. But you should be able to control its dynamic behaviour without affecting its initial declaration.\n23. You should be able to apply simultaneous visual effects and animations in an easy way to any DOM element instance.\n24. You should be able to control the visual effects and animations either from CSS or JavaScript without affecting the performance.\n25. You should be able to control the behaviour of your code Into-the-box and out-of-the-box and survive doing it.\n\n# Main features\n\n\n- Built-In & custom templates for Progressive Web Apps (PWA) and Accelerated Mobile Pages (AMP)\n- Revolutionary UI Effects\n- Breakthrough backend micro-services\n- The simplicity of a wonderful layout design\n- Fully usable CLI tools\n- Objects & Components driven architecture\n- Front-end and back-end together in a full-stack environment\n- Recursive routing for components\n- Built-In nested components management\n- Fully integrated MVC pattern (Model, View, Controller)\n- Dynamic Data Objects\n- Based on N-Tier Architecture concepts\n\n# Progressive Web Apps (PWA) Adopted Features\n\n## Prevent Render-blocking resources\n\nTo prevent Render-blocking resources, QCObjects has implemented the [Package](#Package) factory function.\n\n## On-Demand Resources Load\n\nWith a dynamic components driven architecture, QCObjects is rendering every visual resource that is inside of a component only when the component is building itself, and every component is connected to a tree called global.componentsStack that is actually pointing to every component instance and its subcomponents. Every time a component is rebuilt, visual resources are dynamically reloaded on-demand in the most efficient way, so you can forget all the nasty code that you were needing to controll the resource loading process with other frameworks.\n\n## Lazy-loading of images in components (use lazy-src instead of src attribute in img tag)\n\nSince the version 2.1.251, QCObjects provide an easy way to lazy load the images, using the latest standard for browsers.\n\n```html\n<img src=\"img/preloader.svg\" lazy-src=\"img/myrealimage.png\"/>\n```\n\nIn the above code, a preloader (light-weight) image is used to be loaded in the first instance, and a **lazy-src** attribute is used to set the real image to show after lazy loading process. QCObjects will load all the **<img>** declared tags inside a component in lazy mode if they have a lazy-src attribute, after the component is rebuilt or loaded. Also, QCObjects will use the [Intersection Observer API](https://developer.mozilla.org/en-US/docs/Web/API/Intersection_Observer_API) (when available) to determine whether the lazy-src or src image is visually useful to be showed.\n\nThe effect of lazy loading is only high visible on the first time the PWA is loaded. The next time, the speed of loading will be significantly increased making more difficult to the human eye to see the result. However this feature makes a lot of difference in terms of user experience when the internet connection has low speed issues or the images are extremely large. This feature is a part of the recommended features for PWAs writen by [Mozzila Developers Network](https://developer.mozilla.org/) in an article about Progressive loading. You can read that article [here](https://developer.mozilla.org/en-US/docs/Web/Progressive_web_apps/Loading)\n\nIf you don't want to use lazy loading for images, you can always keep the normal way of loading by not adding the **lazy-src** attribute to the **<img>** tag and using the traditional **src**.\n\n\n# Cross Browser Javascript Framework for MVC Patterns\n----------------------------------------\n\n[QCObjects](https://qcobjects.dev) is a javascript framework designed to make easier everything about the MVC patterns implementation into the pure javascript scope. You don't need to use typescript nor any transpiler to run [QCObjects](https://qcobjects.dev). It runs directly on the browser and it uses pure javascript with no extra dependencies of code. You can make your own components expressed in real native javascript objects or extend a native DOM object to use in your own way. You can also use [QCObjects](https://qcobjects.dev) in conjunction with CSS3 frameworks like [Foundation] (https://foundation.zurb.com), [Bootstrap] (https://getbootstrap.com) and mobile javascript frameworks like [PhoneGap] (https://phonegap.com) and OnsenUI (https://onsen.io)\n\n![screenshot](https://qcobjects.dev/doc/img/components.gif)\n\n# Install it, make a textfield or a navigate home functionality, all in just one step.\n\nQCObjects in installable in your computer, it comes with a CLI Tool and commands to create your application template in one step. Navigate home without leaving the webpage and make a shadowed textfield in one step.\n\n# Dynamic Components Architecture\n\n![qcobjects components layout](https://qcobjects.dev/doc/img/QCObjects-Components-Layout.gif)\n[![FOSSA Status](https://app.fossa.com/api/projects/git%2Bgithub.com%2FQuickCorp%2FQCObjects.svg?type=shield)](https://app.fossa.com/projects/git%2Bgithub.com%2FQuickCorp%2FQCObjects?ref=badge_shield)\n\n\n# ECMA-262 Specification\n--------------------------\nSee\n[ECMAScript® 2020 Language Specification](https://tc39.github.io/ecma262/#sec-intro) for reference\n\n# Copyright\n-----------\n\nCopyright (c) Jean Machuca and [QuickCorp](https://quickcorp.org) <info@quickcorp.cl>\n\n# Demo\n--------------\n\n## PWA Live Demo\n\nCheck out a live demo of pure QCObjects based frontend Progressive Web App here:\n[PWA QCObjects](https://newapp.qcobjects.dev/)\n\n## Demo Integrating with Foundation\n\nCheck out a demo using Foundation components here:\n[Demo Using Foundation](https://github.com/QuickCorp/quickobjects_sample1foundation)\n\n## Demo Integrating with Materializecss\n\nCheck out a demo using MaterializeCSS here:\n[Demo Using Materializecss](https://qln.link)\n\n## Demo Using Raw CSS\n\nCheck out a demo using raw CSS:\n[Demo Using Raw CSS](https://github.com/QuickCorp/qcobjects_profile_browser)\n\n## Example of QCObjects using and manipulating canvas objects\n\nThe following code shows how QCObjects can manipulate canvas objects directly and inside components\n\n```html\n<!DOCTYPE html>\n<html>\n    <head>\n    \t<title>Demo</title>\n    \t<script type=\"text/javascript\" src=\"https://cdn.qcobjects.dev/QCObjects.js\"></script>\n    \t<script type=\"text/javascript\">\n    \t\tvar canvas1,canvas2,canvas3,container;\n        CONFIG.set('relativeImportPath','src/');\n\n    \t\t/**\n    \t\t * Main import sentence.\n    \t\t */\n    \t\tImport('cl.quickcorp',function (){\n\n    \t\t\t/**\n    \t\t\t * Super Container MyOwnBody\n    \t\t\t */\n\t    \t\tClass('MyOwnBody',HTMLBodyElement,{\n\t    \t\t\tcustomAttr:'custom',\n\t    \t\t\tbody:document.body  // breakes default body element and replace with them\n\t    \t\t});\n\n\t    \t\t/**\n\t    \t\t * Another custom class definition\n\t    \t\t */\n\t    \t\tClass('MyContainer',HTMLElement,{\n\t    \t\t\twidth:400,\n\t    \t\t\theight:400,\n\t    \t\t\tcustomAttr:'custom attr container'\n\t    \t\t});\n\n\n\t    \t\t/**\n\t    \t\t * Another custom class definition\n\t    \t\t */\n\t    \t\tClass('canvas',HTMLCanvasElement,{\n\t    \t\t\tcustomAttr:'custom'\n\t    \t\t});\n\n\t    \t\t/**\n\t    \t\t * Another custom class definition\n\t    \t\t */\n\t    \t\tClass('MyCanvas2',HTMLCanvasElement,{});\n\n\t    \t\tbody = New(MyOwnBody); // binds to body\n\t    \t\tbody.css({backgroundColor:'#ccc'});\n\n\t    \t\tcontainer = Tag('container')[0].Cast(MyContainer); // cast any javascript dom object to QC_Object class\n\t    \t\tcontainer.css({backgroundColor:'red'}); // access binding in two directions to dom objects\n\n\t    \t\t/**\n\t    \t\t * Instance a new custom canvas\n\t    \t\t */\n\t    \t\tcanvas1 = New(canvas,{\n            width:100,\n            height:100,\n          });\n\t    \t\tcanvas2 = New(canvas,{\n            width:200,\n\t    \t\t\theight:100,\n          });\n\t    \t\tcanvas3 = New(canvas,{\n            width:300,\n\t    \t\t\theight:50,\n          });\n\n\t    \t\tcanvas1.css({backgroundColor:'#000000'}); // like jquery and another style access\n          canvas1.body.style.backgroundColor='#000000'; // standard javascript style access\n\t    \t\tcanvas2.body.style.backgroundColor='#0044AA'; // standard javascript style access\n\t    \t\tcanvas3.body.style.backgroundColor='green'; // standard javascript style access\n\n\t    \t\tcanvas1.append(); //append canvas1 to body\n\t    \t\tcanvas2.attachIn('container'); // attach or append to specific tag containers\n\t    \t\tcontainer.append(canvas3); // append canvas3 to custom tag binding\n\n//\t    \t\tcanvas1.body.remove(); // remove canvas1 from dom\n\t    \t\tbody.append(canvas3); // append canvas3 to body\n\n          // using components\n          var c1 = New(Component,{'templateURI':'templatesample.html',cached:false});\n          document.body.append(c1); // appends the c1 to the body\n\n\n    \t\t});\n\n    \t</script>\n    </head>\n    <body>\n    \t<container id=\"contentLoader\" ></container>\n    </body>\n</html>\n```\n\n# DevBlog\n--------------\nThe [Official DevBlog of QCObjects](https://devblog.qcobjects.org/) is hosted on [Hashnode](https://hashnode.com/). The DevBlog is personally written by Jean Machuca, the author of [QCObjects](https://qcobjects.com) and and he is explaining in detail how are the best practices and giving the best tips and tricks to use the most advanced features of QCObjects.\n\n# Fork\n--------------\nPlease fork this project or make a link to this project into your README.md file. Read the LICENSE.txt file before you use this code.\n\n# Become a Sponsor\n------------------\nIf you want to become a sponsor for this wonderful project you can do it [here](https://sponsorsignup.qcobjects.dev/)\n\n# Check out the QCObjects SDK\n----------------------------\nYou can check out the [QCObjects SDK](https://sdk.qcobjects.dev/) and follow the examples to make your own featured components\n\n\n# Donate\n--------------\n\nIf you like this code please [DONATE](https://www.paypal.com/cgi-bin/webscr?cmd=_s-xclick&hosted_button_id=UUTDBUQHCS4PU&source=url)!\n\n [![paypal](https://www.paypalobjects.com/webstatic/mktg/logo/AM_mc_vs_dc_ae.jpg)](https://www.paypal.com/cgi-bin/webscr?cmd=_s-xclick&hosted_button_id=UUTDBUQHCS4PU&source=url)\n\n [![Become a Patreon ](https://c5.patreon.com/external/logo/become_a_patron_button.png)](https://www.patreon.com/join/qcobjects?)\n\n\n# Installing\n------------\n\n\n## Using QCObjects with Atom:\n\n```shell\n> apm install qcobjects-syntax\n```\nhttps://atom.io/packages/qcobjects-syntax\n\n## Using QCObjects in Visual Studio Code:\n\n[![Badge for installs for Visual Studio Code extension Quickcorp.QCObjects-vscode](https://vsmarketplacebadge.apphb.com/version/Quickcorp.QCObjects-vscode.svg)](https://marketplace.visualstudio.com/items?itemName=Quickcorp.QCObjects-vscode)\n\nhttps://marketplace.visualstudio.com/items?itemName=Quickcorp.QCObjects-vscode\n\n## Installing with NPM:\n\n```shell\n> npm install qcobjects-cli -g && npm install qcobjects --save\n```\n![screenshot2](https://qcobjects.dev/doc/img/QCObjects-Quick-Start.gif)\n\n## Installing the docker playground:\n\n```shell\ndocker pull -a quickcorp/qcobjects-playground && docker ",
  "permissions": {
    "read": true,
    "write": false,
    "admin": false
  },
  "media_types": [
    "application/vnd.docker.container.image.v1+json"
  ],
  "content_types": [
    "image"
  ]
}