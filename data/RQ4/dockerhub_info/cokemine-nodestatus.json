{
  "user": "cokemine",
  "name": "nodestatus",
  "namespace": "cokemine",
  "repository_type": "image",
  "status": 1,
  "status_description": "active",
  "description": "Yet another servers monitor written in TypeScript",
  "is_private": false,
  "is_automated": false,
  "can_edit": false,
  "star_count": 1,
  "pull_count": 3596,
  "last_updated": "2022-12-20T17:36:05.691777Z",
  "date_registered": "2021-08-24T18:37:23.424059Z",
  "collaborator_count": 0,
  "affiliation": null,
  "hub_user": "cokemine",
  "has_starred": false,
  "full_description": "# NodeStatus\n\nYet another servers monitor written in TypeScript.\n\nCurrent Version: 1.1.0-alpha.1\n\n## How To Install\n\n### Install locally\n\n```bash\n# Install Node.js\n# Using Ubuntu\ncurl -fsSL https://deb.nodesource.com/setup_16.x | sudo -E bash -\nsudo apt-get install -y nodejs\n\n# Using Debian, as root\ncurl -fsSL https://deb.nodesource.com/setup_16.x | bash -\napt-get install -y nodejs\n\n# RHEL, CentOS, CloudLinux, Amazon Linux or Fedora as root\ncurl -fsSL https://rpm.nodesource.com/setup_16.x | bash -\n\n\n#Install From NPM\nnpm i pm2 -g\nnpm i nodestatus-server -g --unsafe-perm=true --allow-root # will install status-cli status-server status-server-run in your computer\nstatus-server # start nodestatus-server\nstatus-server-run # start nodestatus-server with pm2\npm2 status # check running status\npm2 log nodestatus # check logs\n```\n\n### Install with Docker (Recommended)\n\n```bash\n# Install Docker with docker-compose\ncurl -fsSL https://get.docker.com | bash -s docker\ndocker --version\nsudo curl -L \"https://github.com/docker/compose-cli/releases/download/v2.0.0-rc.2/docker-compose-linux-amd64\" -o /usr/local/bin/docker-compose #For x86_64\nchmod +x /usr/local/bin/docker-compose\nln -s /usr/local/bin/docker-compose /usr/bin/docker-compose\ndocker-compose --version\n\n# Download docker-compose.yml\nmkdir ~/nodestatus\ncd ~/nodestatus\nwget https://raw.githubusercontent.com/cokemine/nodestatus/master/docker-compose.yml\nvim docker-compose.yml #修改环境变量相关配置\ndocker-compose compose up -d\n```\n\n## Client\n\nGolang Version: https://github.com/cokemine/nodestatus-client-go\n\nNode.js Version: https://github.com/cokemine/nodestatus-client\n\n## Environment\n\n关于环境变量的相关配置，如果是使用 Docker 请直接在 `docker-compose.yml`配置文件中修改\n\n**INTERVAL**: 服务端推送间隔时间, 默认 `1500` (1.5秒)\n\n**DATABASE**: sqlite 数据库文件存放位置, 默认(Linux): `/usr/local/NodeStatus/server/db.sqlite`\n\n**PORT**: NodeStatus 所用端口, 默认 `35601`\n\n&nbsp;\n\n**USE_PUSH**: 是否使用 Telegram 推送, 默认 `true`\n\n**USE_IPC**: 是否需要 IPC 修改服务端配置, 默认 `true`\n\n**USE_WEB**: 是否需要开启一个小型 web 面板修改服务端配置, 默认 `true`\n\n&nbsp;\n\n**WEB_USERNAME**: WEB 面板用户名，默认 `admin`\n\n**WEB_PASSWORD**: WEB 面板密码\n\n**WEB_SECRET**: 用于 jsonwebtoken, 建议设为一个随机的字符串, 默认不填即和密码相同\n\n&nbsp;\n\n**TGBOT_TOKEN**: Telegram Bot Token (从 BotFather 申请到)\n\n**TGBOT_CHATID**: Telegram Bot 需要推送的 chat_id, 如不清楚可以先启动 NodeStatus, 对 Bot 发送 `/start` 获取这个 id, 多个请用`,`隔开\n\n**TGBOT_PROXY**: Telegram 代理服务器配置，例`http://127.0.0.1:10808`，仅支持 http 代理\n\n**TGBOT_WEBHOOK**: Telegram Webhook 配置，不填写默认 Polling,例: `https://tz.mydomain.com`，使用 Webhook 务必需要开启 https，若你使用了https，则建议填写你的域名以开启  Webhook, 而非 Polling\n\n## 修改客户端配置\n\nNodeStatus 有两种方式修改（添加 / 删除）服务器配置。\n\n### NodeStatus-cli\n\n若你启用了 IPC, 则可以通过`status-cli`修改服务器相关配置。\n\n```shell\nnpm i nodestatus-cli -g\nstatus-cli help # check cli help\n```\n\n### Web\n\n若你启用了 Web, 则可以通过 Web 修改服务器相关配置。不需要手动安装，访问`http://tz.domain.com/admin`即可访问面板\n\n面板开源地址：https://github.com/cokemine/hotaru-admin\n\n## Telegram Commands\n\n`/start` 查询当前`chat_id`，当前 NodeStatus 版本号\n\n`/status` 查询当前所有服务器状态信息\n\n## Reverse Proxy\n\n下面是对几种常见 Web 服务器配置反向代理的实例\n\n### Nginx\n\n```nginx\nserver {\n  listen 80;\n  listen [::]:80;\n  listen 443 ssl http2;\n  listen [::]:443 ssl http2;\n  ssl_certificate /etc/nginx/conf.d/ssl/status.domain.com.crt; # SSL 证书路径\n  ssl_certificate_key /etc/nginx/conf.d/ssl/status.domain.com.key; # SSL Key 证书路径\n  ssl_protocols TLSv1 TLSv1.1 TLSv1.2 TLSv1.3;\n  ssl_ciphers TLS13-AES-256-GCM-SHA384:TLS13-CHACHA20-POLY1305-SHA256:TLS13-AES-128-GCM-SHA256:TLS13-AES-128-CCM-8-SHA256:TLS13-AES-128-CCM-SHA256:EECDH+CHACHA20:EECDH+AES128:RSA+AES128:EECDH+AES256:RSA+AES256:EECDH+3DES:RSA+3DES:!MD5;\n  ssl_prefer_server_ciphers on;\n  ssl_session_timeout 10m;\n  ssl_session_cache builtin:1000 shared:SSL:10m;\n  ssl_buffer_size 1400;\n  add_header Strict-Transport-Security max-age=15768000;\n  ssl_stapling on;\n  ssl_stapling_verify on;\n  server_name status.domain.com; # 需要绑定的域名\n  access_log /data/wwwlogs/status.domain.com_nginx.log combined; # 日志位置, 目录如果不存在需要提前创建好\n\n  location / {\n    proxy_set_header X-Real-IP $remote_addr;\n    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n    proxy_set_header Host $http_host;\n    proxy_set_header X-NginX-Proxy true;\n    proxy_set_header Upgrade $http_upgrade;\n    proxy_set_header Connection \"Upgrade\";\n    proxy_pass http://127.0.0.1:35601; # 反代地址\n    proxy_http_version 1.1;\n  }\n}\n```\n\n## How To Debug\n\n```shell\nnpm i pnpm -g\nmkdir -p /usr/local/nodestatus && cd /usr/local/nodestatus\ngit clone --recurse-submodules https://github.com/cokemine/nodestatus.git .\npnpm install\npnpm build\npnpm dev\n```\n\n## CLI Options\n\n```shell\nOptions:\n  -db, --database <db>       the path of database (default: \"/usr/local/nodestatus/db.sqlite\")\n  -p, --port <port>          the port of NodeStatus (default: \"35601\")\n  -i, --interval <interval>  update interval (default: \"1500\")\n  -h, --help                 display help for command\n```",
  "permissions": {
    "read": true,
    "write": false,
    "admin": false
  },
  "media_types": [
    "application/vnd.docker.distribution.manifest.list.v2+json",
    "application/vnd.docker.container.image.v1+json"
  ],
  "content_types": [
    "image"
  ]
}