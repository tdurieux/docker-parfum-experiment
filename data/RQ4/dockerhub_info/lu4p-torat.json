{
  "user": "lu4p",
  "name": "torat",
  "namespace": "lu4p",
  "repository_type": "image",
  "status": 1,
  "status_description": "active",
  "description": "!!! Don't pull this image (SECURITY RISK) only for CI !!! see https://github.com/lu4p/ToRat",
  "is_private": false,
  "is_automated": false,
  "can_edit": false,
  "star_count": 0,
  "pull_count": 756,
  "last_updated": "2021-07-23T17:32:16.968955Z",
  "date_registered": "2019-10-31T16:25:57.694418Z",
  "collaborator_count": 0,
  "affiliation": null,
  "hub_user": "lu4p",
  "has_starred": false,
  "full_description": "# <a href=\"https://github.com/lu4p/ToRat\" target=\"_blank\"> <img src=\"./ToRat_Logo.png\" width=\"180px\"></a>\n[![License](https://img.shields.io/github/license/lu4p/ToRat.svg)](https://unlicense.org/)\n[![CircleCI](https://circleci.com/gh/lu4p/ToRat.svg?style=svg)](https://circleci.com/gh/lu4p/ToRat)\n[![Go Report Card](https://goreportcard.com/badge/github.com/lu4p/ToRat)](https://goreportcard.com/report/github.com/lu4p/ToRat)\n[![Docker Cloud Build Status](https://img.shields.io/docker/cloud/build/lu4p/torat)](https://hub.docker.com/repository/docker/lu4p/torat)\n\nA Cross Platform Remote Administration tool written in Go using Tor as its transport mechanism\ncurrently supporting Windows, Linux, MacOS clients.\n\n## DISCLAIMER\nUSE FOR EDUCATIONAL PURPOSES ONLY\n\n## Wiki\n[How to use ToRat Docker Image](https://github.com/lu4p/ToRat/wiki/How-to-use-the-ToRat-Docker-Image)\n\n\n## Preview\n<a href=\"https://asciinema.org/a/318534\" target=\"_blank\"><img src=\"https://asciinema.org/a/318534.svg\" /></a>\n\n\n### Client Commands\n\n  Command         |    Info\n  ---             |    ---\n  **cd**          |    change the working directory of the client\n  **ls**          |    list the content of the working directory of the client\n  **shred**       |    delete files/ directories unrecoverable\n  **screen**      |    take a Screenshot of the client\n  **cat**         |    view Textfiles from the client including .docx, .rtf, .pdf, .odt\n  **alias**       |    give the client a custom alias\n  **down**        |    download a file from the client\n  **up**          |    upload a file to the client\n  **speedtest**   |    speedtest a client's internet connection\n  **hardware**    |    collects a variety of hardware specs from the client\n  **netscan**     |    scans a clients entire network for online devices and open ports\n  **gomap**       |    scan a local ip on a clients network for open ports and services\n  **escape**      |    escape a command and run it in a native shell on the client\n  **reconnect**   |    tell the client to reconnect\n  **help**        |    lists possible commands with usage info\n  **exit**        |    background current session and return to main shell\n\n### Server Commands \n\n  Command     |  Info\n  ---         |  ---\n  **select**  | select client to interact with\n  **list**    | list all connected clients\n  **alias**   | select client to give an alias\n  **cd**      | change the working directory of the server\n  **help**    | lists possible commands with usage info\n  **exit**    | exit the server\n\n\n\n## Current Features\n### Architecture\n- RPC (Remote procedure Call) based communication for easy addition of new functionality\n- Automatic upx leads to client binaries of ~6MB with embedded Tor\n- sqlite via gorm for storing information about the clients\n- client is obfuscated via [garble](https://github.com/burrowers/garble)\n\n## Server Shell\n- Cross Platform reverse shell (Windows, Linux, Mac OS)\n- Supports multiple connections\n- Welcome Banner\n- Colored Output\n- Tab-Completion of:\n  - Commands\n  - Files/ Directories in the working directory of the server\n\n- Unique persistent ID for every client\n\t- give a client an Alias\n\t- all Downloads from client get saved to ./$ID/$filename\n\n## Persistence\n- Windows:\n\t- [ ] Multiple User Account Control Bypasses (Privilege escalation)\n\t- [ ] Multiple Persistence methods (User, Admin)\n\n- Linux:\n  - [ ] Multiple Persistence methods (User, Admin)\n\n## Tor\n- Fully embedded Tor within go\n\n- the ToRAT_client communicates over TLS encrypted RPC proxied through Tor with the ToRat_server (hidden service)\n\t- [x] anonymity of client and server\n\t- [x] end-to-end encryption\n\n- optional transport without Tor e.g. Use Tor2Web, a DNS Hostname or public/ local IP\n\t- [x] smaller binary ~3MB upx'ed\n\t- [ ] anonymity of client and server\n\n\n## Upcoming Features\n- [ ] Bulk Commands\n- [ ] Persistence and privilege escalation for Linux\n- [ ] Persistence and privilege escalation for Mac OS\n- [ ] Support for Android and iOS (needs fix of https://github.com/ipsn/go-libtor/issues/12)\n- [ ] [File-less Persistence on Windows](https://github.com/ewhitehats/InvisiblePersistence)\n\n\n## Contribution\nAll contributions are welcome you don't need to be an expert in Go to contribute.\n\nYou may want to join the `#torat` channel over at the [Gophers Slack](https://invite.slack.golangbridge.org/)\n\n## Credits\n- [Tor](https://www.torproject.org/)\n- [Tor controller library](https://github.com/cretz/bine)\n- [Python Uacbypass and Persistence Techniques](https://github.com/rootm0s/WinPwnage)\n- [Modern Cli](https://github.com/abiosoft/ishell)\n- [Colored Prints](https://github.com/fatih/color)\n- [Screenshot library](https://github.com/vova616/screenshot)\n- [TLS Certificate generator](https://github.com/lu4p/genCert)\n- [Shred library](https://github.com/lu4p/shred)\n- [Extract Text from Documents](https://github.com/lu4p/cat)\n- [RPC](https://golang.org/pkg/net/rpc/)\n- [UPX](https://upx.github.io/)\n- [Obfuscation](https://github.com/burrowers/garble)\n",
  "permissions": {
    "read": true,
    "write": false,
    "admin": false
  },
  "media_types": [
    "application/vnd.docker.container.image.v1+json"
  ],
  "content_types": [
    "image"
  ]
}