{
  "user": "atheriel",
  "name": "xrprof",
  "namespace": "atheriel",
  "repository_type": "image",
  "status": 1,
  "status_description": "active",
  "description": "An external sampling profiler for R programs ",
  "is_private": false,
  "is_automated": false,
  "can_edit": false,
  "star_count": 0,
  "pull_count": 54,
  "last_updated": "2021-02-25T02:40:01.844758Z",
  "date_registered": "2020-07-30T17:26:21.956014Z",
  "collaborator_count": 0,
  "affiliation": null,
  "hub_user": "atheriel",
  "has_starred": false,
  "full_description": "# xrprof\n\n<!-- badges: start -->\n![GitHub Actions CI Status](https://github.com/atheriel/xrprof/workflows/CI/badge.svg)\n[![travis-ci build\nstatus](https://travis-ci.org/atheriel/xrprof.svg?branch=master)](https://travis-ci.org/atheriel/xrprof)\n<!-- badges: end -->\n\n`xrprof` (formerly `rtrace`) is an external sampling profiler for R on Linux and\nWindows.\n\nMany R users will be familiar with using the built-in sampling profiler\n`Rprof()` to generate data on what their code is doing, and there are several\nexcellent tools to facilitate understanding these samples (or serve as a\nfront-end), including the [**profvis**](https://rstudio.github.io/profvis/)\npackage.\n\nHowever, the reach of `Rprof()` and related tools is limited: the profiler is\n\"internal\", in the sense that it must be manually switched on to work, either\nduring interactive work (for example, to profile an individual function), or\nperhaps by modifying the script to include `Rprof()` calls before running it\nagain.\n\nIn contrast, `xrprof` can be used to profile code that is *already running*:\n\n```console\n$ Rscript myscript.R &\n# sudo may be required.\n$ xrprof -p <PID> -F 50 > Rprof.out\n```\n\nExternal sampling profilers have proven extremely useful for diagnosing and\nfixing performance issues (or other bugs) in production environments. This\nproject joins a large list similar tools for other languages, such as `perf`\n(the Linux system profiler), `jstack` (for Java), `rbspy` (for Ruby), `Pyflame`\n(for Python), `VSPerfCmd` for C#/.NET, and many others.\n\n## Building\n\n### On Linux\n\n`xrprof` depends on libelf and libunwind, so you must have their headers to\ncompile the program. For example, on Debian-based systems (including Ubuntu),\nyou can install these with\n\n```console\n$ sudo apt-get install libelf-dev libunwind-dev libcap2-bin\n```\n\nA simple `Makefile` is provided. Build the binary with\n\n```console\n$ git clone https://github.com/atheriel/xrprof\n$ cd xrprof\n$ make\n```\n\nTo install the profiler to your system, use\n\n```console\n$ sudo make install\n```\n\nThis will install the binary to `/usr/local/bin` and use `setcap` to mark it for\nuse without `sudo`. The `install` target supports `prefix` and `DESTDIR`.\n\n### On Windows\n\nYou must have a build environment set up. For R users, the best option is to use\nR's own [Rtools for Windows](https://cran.r-project.org/bin/windows/Rtools/)\n(which is also used to install packages from source). You can then launch\n\"Rtools MinGW 64-bit\" from the Start Menu and navigate to the source directory;\nthen run\n\n```console\n$ git clone https://github.com/atheriel/xrprof\n$ cd xrprof\n$ make -f Makefile.win\n```\n\nThe resulting `xrprof.exe` program can be run from `cmd.exe` or PowerShell.\n\n## Usage\n\nThe profiler has a simple interface:\n\n    Usage: xrprof [-F <freq>] [-d <duration>] -p <pid>\n\nThe `Rprof.out` format is written to standard output and errors or other\nmessages are written to standard error.\n\nOn Windows, R's process ID (PID) can be looked up in Task Manager.\n\nAlong with the sampling profiler itself, there is also a `stackcollapse-Rprof.R`\nscript in `tools/` that converts the `Rprof.out` format to one that can be\nunderstood by Brendan Gregg's [FlameGraph](http://www.brendangregg.com/flamegraphs.html)\ntool. You can use this to produce graphs like the one below:\n\n```shell\n$ stackcollapse-Rprof.R Rprof.out | flamegraph.pl > Rprof.svg\n```\n\n![Example FlameGraph](example-flamegraph.svg)\n\n## Running Under Docker\n\nA public Docker image is available at `atheriel/xrprof`. Since `xrprof` reads\nthe memory of other running programs, it must be run as a privileged container\nin the host PID namespace. For example:\n\n```console\n$ docker run --privileged --pid=host -it atheriel/xrprof -p <PID>\n```\n\n## Okay, How Does it Work?\n\nMuch like other sampling profilers, the program uses Linux's `ptrace` system\ncalls to attach to running R processes and a mix of `ptrace` and\n`process_vm_readv` to read the memory contents of that process, following\npointers along the way.\n\nThe R-specific aspect of this is to locate and decode the `R_GlobalContext`\nstructure inside of the R interpreter that stores information on the currently\nexecuting R code.\n\nIn order to defeat address space randomization, `xrprof` will search through the\nELF files loaded into memory (at `/proc/<pid>/maps`) for the symbols required,\neither in the executable itself or in `libR.so` (if it appears R has been\ncompiled to use it).\n\n`xrprof` is mount-namespace-aware, so it supports profiling R processes running\ninside Docker containers.\n\nOn Windows, `xrprof` makes use of APIs like `ReadProcessMemory()`,\n`NtSuspendProcess()`, and `SymFromName()` to achieve the analogous result.\n\n## Credits\n\nThe project was inspired by Julia Evan's blog posts on writing\n[`rbspy`](https://rbspy.github.io/) and later by my discovery of Evan Klitzke's\nwork (and writing) on [Pyflame](https://github.com/uber/pyflame).\n\n## License\n\nThis project contains portions of the source code of R itself, which is\ncopyright the R Core Developers and licensed under the GPLv2.\n\nThe remaining code is copyright its authors and also available under the same\nlicense, GPLv2.\n",
  "permissions": {
    "read": true,
    "write": false,
    "admin": false
  },
  "media_types": [
    "application/vnd.docker.container.image.v1+json"
  ],
  "content_types": [
    "image"
  ]
}