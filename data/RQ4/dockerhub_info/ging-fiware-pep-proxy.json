{
  "user": "ging",
  "name": "fiware-pep-proxy",
  "namespace": "ging",
  "repository_type": "image",
  "status": 1,
  "status_description": "active",
  "description": "FIWARE PEP Proxy - Wilma GE",
  "is_private": false,
  "is_automated": true,
  "can_edit": false,
  "star_count": 0,
  "pull_count": 1488,
  "last_updated": "2022-09-15T11:39:37.033188Z",
  "date_registered": "2015-09-10T10:37:27.03515Z",
  "collaborator_count": 0,
  "affiliation": null,
  "hub_user": "ging",
  "has_starred": false,
  "full_description": "# How to use this Dockerfile\n\nTo run a Wima Docker container you have two options:\n\n-   You can build your own image using the Dockerfile we provide and then run the container from it or\n-   you can run the container directly from the image we provide in Docker Hub.\n\nBoth options require that you have [docker](https://docs.docker.com/installation/) installed on your machine.\n\n## Build your own image and run the container from it\n\nYou have to download the [Wilma's code](https://github.com/ging/fiware-pep-proxy) from GitHub and navigate to\n`extras/docker` directory. There, to compile your own image just run:\n\n```console\nsudo docker build -t pep-proxy-image .\n```\n\n> **Note** If you do not want to have to use `sudo` in this or in the next section follow\n> [these instructions](https://docs.docker.com/installation/ubuntulinux/#create-a-docker-group).\n\nThis builds a new Docker image following the steps in `Dockerfile` and saves it in your local Docker repository with the\nname `pep-proxy-image`. You can check the available images in your local repository using:\n\n```console\nsudo docker images\n```\n\n> **Note** If you want to know more about images and the building process you can find it in\n> [Docker's documentation](https://docs.docker.com/userguide/dockerimages/).\n\nNow you can run a new container from the image you have just created with:\n\n```console\nsudo docker run -d --name pep-proxy-container -v [host_config_file]:/opt/fiware-pep-proxy/config.js -p [host_port]:[container_port] pep-proxy-image\n```\n\nWhere the different params mean:\n\n-   -d indicates that the container runs as a daemon\n-   --name is the name of the new container (you can use the name you want)\n-   -v stablishes a relation between a local folder (in your host computer) and a container's folder. In this case it is\n    used to pass to the container the configuration file that PEP Proxy needs to work. `host_config_file` has to be the\n    location of a local file with that configuration following the\n    [config template](https://github.com/ging/fiware-pep-proxy/blob/master/config.js.template).\n-   -p stablishes a relation between a local port and a container's port. You can use the port you want in `host_port`\n    but `container_port` has to be the same that you have set in `config.app_port` in your config file. If you have set\n    `config.https` to `true` you have to use here the HTTPS port.\n-   the last param is the name of the image\n\nHere is an example of this command:\n\n```console\nsudo docker run -d --name pep-proxy -v /home/root/workspace/fiware-pep-proxy/config.js:/opt/fiware-pep-proxy/config.js -p 80:80 pep-proxy-image\n```\n\nOnce the container is running you can view the console logs using:\n\n```console\nsudo docker logs -f pep-proxy\n```\n\nTo stop the container:\n\n```console\nsudo docker stop pep-proxy\n```\n\n## Run the container from the last release in Docker Hub\n\nYou can also run the container from the [image we provide](https://hub.docker.com/r/fiware/pep-proxy/) in Docker Hub. In\nthis case you have only to execute the run command. But now the image name is fiware/pep-proxy:_version_ where `version`\nis the release you want to use:\n\n```console\nsudo docker run -d --name pep-proxy-container -v [host_config_file]:/opt/fiware-pep-proxy/config.js -p [host_port]:[container_port] fiware/pep-proxy\n```\n\n> **Note** If you do not specify a version you are pulling from `latest` by default.\n\n### Docker Environment Variables\n\n-   `PEP_PROXY_PORT` - default value is `80`\n-   `PEP_PROXY_HTTPS_ENABLED` - default value is `false`\n-   `PEP_PROXY_HTTPS_PORT` - default value is `443`\n-   `PEP_PROXY_IDM_HOST` - default value is `account.lab.fiware.org`\n-   `PEP_PROXY_IDM_PORT` - default value is `443`\n-   `PEP_PROXY_IDM_SSL_ENABLED` - default value is `true`\n-   `PEP_PROXY_APP_HOST` - default value is `www.fiware.org'`\n-   `PEP_PROXY_APP_PORT` - default value is `80`\n-   `PEP_PROXY_APP_SSL_ENABLED` - default value is `false` - Use `true` if the app server listens in HTTPS\n-   `PEP_PROXY_APP_ID` - default value is left blank and must be overridden\n-   `PEP_PROXY_USERNAME` - default value is left blank and must be overridden\n-   `PEP_PASSWORD` - default value is left blank and must be overridden\n-   `PEP_PROXY_AUTH_ENABLED` - default value is `false`\n-   `PEP_PROXY_PDP` - default value is `idm` can be set tp `authzforce`\n-   `PEP_PROXY_AZF_PROTOCOL` - default value is `http`\n-   `PEP_PROXY_AZF_HOST` - default value is `localhost`\n-   `PEP_PROXY_AZF_PORT` - default value is `8080`\n-   `PEP_PROXY_AZF_CUSTOM_POLICY` - default value is `undefined` which impliesthe usage of default policy checks (HTTP\n    verb + path).\n-   `PEP_PROXY_PUBLIC_PATHS` - default value is `[]` - Use `,` to split paths - example:\n    `PEP_PROXY_PUBLIC_PATHS=/public/*,/static/css/`\n\n-   `PEP_PROXY_CORS_ORIGIN` - default value is `*`\n-   `PEP_PROXY_CORS_METHODS` - default value is `GET,HEAD,PUT,PATCH,POST,DELETE`\n-   `PEP_PROXY_CORS_OPTIONS_SUCCESS_STATUS` - default value is `204`\n-   `PEP_PROXY_CORS_ALLOWED_HEADERS` - all headers area allowed by default, set to a comma delimited list to restrict\n    this.\n-   `PEP_PROXY_CORS_CREDENTIALS` - The `Access-Control-Allow-Credentials`\n-   `PEP_PROXY_CORS_MAX_AGE` - The `Access-Control-Max-Age` header is not sent by default. set to `true` to enable it.\n-   `PEP_PROXY_MAGIC_KEY` - default value is `undefined` - should be overridden\n-   `PEP_PROXY_AUTH_FOR_NGINX` - default value is `false`\n",
  "permissions": {
    "read": true,
    "write": false,
    "admin": false
  },
  "media_types": [
    "application/vnd.docker.container.image.v1+json"
  ],
  "content_types": [
    "image"
  ]
}