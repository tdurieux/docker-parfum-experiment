{
  "user": "sorunome",
  "name": "mx-puppet-slack",
  "namespace": "sorunome",
  "repository_type": "image",
  "status": 1,
  "status_description": "active",
  "description": "Matrix Slack Puppeting Bridge",
  "is_private": false,
  "is_automated": false,
  "can_edit": false,
  "star_count": 0,
  "pull_count": 321256,
  "last_updated": "2021-07-23T14:32:00.115844Z",
  "date_registered": "2019-07-16T17:46:11.767982Z",
  "collaborator_count": 0,
  "affiliation": null,
  "hub_user": "sorunome",
  "has_starred": false,
  "full_description": "[![Support room on Matrix](https://img.shields.io/matrix/mx-puppet-bridge:sorunome.de.svg?label=%23mx-puppet-bridge%3Asorunome.de&logo=matrix&server_fqdn=sorunome.de)](https://matrix.to/#/#mx-puppet-bridge:sorunome.de)[![donate](https://liberapay.com/assets/widgets/donate.svg)](https://liberapay.com/Sorunome/donate)\n\n# mx-puppet-slack\nThis is a slack puppeting bridge for matrix. It is based on [mx-puppet-bridge](https://github.com/Sorunome/mx-puppet-bridge) and provide multi-user instances.\n\n## Quick start using Docker\n\nDocker image can be found at https://hub.docker.com/r/sorunome/mx-puppet-slack\n\nFor docker you probably want the following changes in `config.yaml`:\n\n```yaml\nbindAddress: '0.0.0.0'\nfilename: '/data/database.db'\nfile: '/data/bridge.log'\n```\n\nAlso check the config for other values, like your homeserver domain.\n\n## Install Instructions (from Source)\n\n*   Clone and install:\n    ```\n    git clone https://github.com/Sorunome/mx-puppet-slack.git\n    cd mx-puppet-slack\n    npm install\n    ```\n*   Edit the configuration file and generate the registration file:\n    ```\n    cp sample.config.yaml config.yaml\n    # fill info about your homeserver and Slack app credentials to config.yaml manually\n    npm run start -- -r # generate registration file\n    ```\n*   Copy the registration file to your synapse config directory.\n*   Add the registration file to the list under `app_service_config_files:` in your synapse config.\n*   Restart synapse.\n*   Start the bridge:\n    ```\n    npm run start\n    ```\n*   Start a direct chat with the bot user (`@_slackpuppet_bot:domain.tld` unless you changed the config).\n    (Give it some time after the invite, it'll join after a minute maybe.)\n*   Get your Slack tokens as below, and tell the bot user to link your workspaces:\n    ```\n    link MYTOKEN (see below for details)\n    ```\n*   Tell the bot user to list the available rooms: (also see `help`)\n    ```\n    list\n    ```\n    Clicking rooms in the list will result in you receiving an invite to the bridged room.\n\n## How to get Slack app credentials\n\n### Option 1. Legacy Token\nGet a legacy token from https://api.slack.com/custom-integrations/legacy-tokens and then chat with the bot user (`@_slackpuppet_bot:domain.tld` unless you changed the config):\n```\nlink <token>\n```\n\n### Option 2. OAuth\nTo use OAuth\n1. Set up a Slack app at https://api.slack.com/apps. You do not need to setup any\n   of the additional features or functionality that Slack prompts you to enable when you\n   create a new Slack app.\n2. Go to the \"OAuth & Permissions\" tab in the sidebar\n3. Add your redirect URL.\n4. Fill in the `oauth` block in your `config.yaml` file. Be sure to forward the `oauth.redirectUri` to the bridge.\n5. Start a chat with the bot user (`@_slackpuppet_bot:domain.tld` unless you changed the config)\n6. Tell the bot: `link`\n7. Click the link it gives and allow access\n8. Copy the token given and send the bot that token with: `link TOKEN_YOU_COPIED`\n\n### Option 3. xoxs token\n**Warning:**: Linking your `xoxs` account's token is against Slack's Terms of Service.\n\nFirst you must retrieve your `xoxs` token: Go to your slack customization page, e.g. https://my.slack.com/customize, and then open the debugging console\n(F12 or rightclick --> inspect element).\nGet the token by entering `TS.boot_data.api_token`.\n\nAfter that, run:\n```\nlink <token>\n```\n\n\n### Option 4. xoxc token\n**Warning**: Linking your `xoxc` account's token is against Slack's Terms of Service.\n\nFirst you must retrieve your `xoxc` token: In the network manager, filter for type WS/WebSocket, and the `xoxc` token is there as URL parameter of that request.\n\nNext you will need to get the contents of your `d` cookie.\n\nAfter that, run:\n```\nlink <token> <d cookie contents>\n```\n\n## Relay\nIt is also possible to use mx-puppet-slack as a relay. For that, the events API needs to be configured. in `slack.path` you can configure the base-path for the various new endpoints. By default this is `/_matrix/slack/client`.\n\nThe events API will have appended `/events`, so by default `/_matrix/slack/client/events`.\n\nThe new oauth endpoint to add the slack bot to new teams has `/oauth/{appId}` appended, so by default `/_matrix/slack/client/events/{appId}`.\n\nCreate your slack app, give it the permissions and then link it with `link <appId> <clientId> <clientSecret> <signingSecret>`. Don't forget to `settype <puppetId> relay`!\n",
  "permissions": {
    "read": true,
    "write": false,
    "admin": false
  },
  "media_types": [
    "application/vnd.docker.container.image.v1+json"
  ],
  "content_types": [
    "image"
  ]
}