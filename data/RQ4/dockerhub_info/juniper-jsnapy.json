{
  "user": "juniper",
  "name": "jsnapy",
  "namespace": "juniper",
  "repository_type": "image",
  "status": 1,
  "status_description": "active",
  "description": "Python Library to define and execute tests on Junos devices",
  "is_private": false,
  "is_automated": true,
  "can_edit": false,
  "star_count": 3,
  "pull_count": 1006,
  "last_updated": "2018-05-31T12:38:00.680892Z",
  "date_registered": "2016-11-21T06:26:36.366354Z",
  "collaborator_count": 0,
  "affiliation": null,
  "hub_user": "juniper",
  "has_starred": false,
  "full_description": "[![PyPi Version](https://img.shields.io/pypi/v/jsnapy.svg)](https://pypi.python.org/pypi/jsnapy/)\n[![Coverage Status](https://travis-ci.org/Juniper/jsnapy.svg?branch=master)](https://travis-ci.org/Juniper/jsnapy)\n[![Coverage Status](https://coveralls.io/repos/github/Juniper/jsnapy/badge.svg?branch=master)](https://coveralls.io/github/Juniper/jsnapy?branch=master)\n\n# JSNAPy\nPython version of Junos Snapshot Administrator\n\n![JSNAPy logo](static/JSNAPy.png?raw=true \"JSNAPy logo\")\n\nInspired by https://github.com/Juniper/junos-snapshot-administrator\n\nAbstract\n========\n\n  Junos Snapshot Administrator enables you to capture and audit runtime environment snapshots of your networked devices running   the Junos operating system (Junos OS).\n  \n  You can write your test cases in yaml file and run those tests cases against pre and post snapshots.\n  \nInstallation\n=============\nInstallation requires Python 2.7 and associated pip tool\n      \n    1. Install using pip command\n          sudo pip install jsnapy\n    2. Install using pip command from github\n          sudo pip install git+https://github.com/Juniper/jsnapy.git \n    3. Updating using pip command (from github)\n          sudo pip install -U git+https://github.com/Juniper/jsnapy.git \n    4. Download or clone the source code from this git repository\n          git clone https://github.com/Juniper/jsnapy\n       Or Untar jsnapy-master.zip (if downloaded zip folder)\n          unzip jsnapy-master.zip\n       Go to jsnapy-master folder and install by:\n          sudo python setup.py sdist\n          sudo pip install dist/jsnapy-x.x.tar.gz\n          \nHello, World\n=============\nJSNAPy requires one main config file and test files.\nConfig file contains device details and test files to be executed.\n\nconfig_check.yml:\n```\n# for one device, can be given like this:\n    hosts:\n      - device: router \n        username : abc\n        passwd: pqr\n    tests:\n      - test_no_diff.yml \n```\ntest_no_diff.yml\n```\ntest_command_version:\n  - command: show interfaces terse lo* \n  - iterate:\n      xpath: physical-interface\n      id: './name'\n      tests:\n        - no-diff: oper-status       # element in which test is performed\n          err: \"Test Failed!! oper-status  got changed, before it was <{{pre['oper-status']}}>, now it is <{{post['oper-status']}}>\"\n          info: \"Test Passed!! oper-status is same, before it is <{{pre['oper-status']}}> now it is <{{post['oper-status']}}> \n```\n\nTo run this test execute following command:\n```\n1. jsnapy --snap pre -f config_check.yml (for taking pre snapshot)\n2. jsnapy --snap post -f config_check.yml (for taking post snapshot after some modification)\n3. jsnapy --check pre post -f config_check.yml (compares pre post snapshot as per test cases)\n4. jsnapy --diff pre post -f config_check.yml (compares pre post snapshot files, shows the diff in 2 Columns)\n```\n\nOutput will look something like this:\n```\n(venv)sh-3.2# jsnapy --check pre post -f config_single_check.yml \n*************************Performing test on Device: 10.209.16.204*************************\nTests Included: test_command_version \n*************************Command is show interfaces terse lo**************************\n----------------------Performing no-diff Test Operation----------------------\nTest succeeded!! oper_status is same, before it is <['up']> now it is <['up']> \nFinal result of no-diff: PASSED \n------------------------------- Final Result!! -------------------------------\nTotal No of tests passed: 1\nTotal No of tests failed: 0 \nOverall Tests passed!!! \n```\n\nFile Paths:\n--------------\n```\n1. config file   \n   can give either:\n    - full file path  \n    - only file name, in this case JSNAPy will first look in present working \n      directory, if file is not present then it will take file path from \"config_file_path\" \n      in jsnapy.cfg file. Default config file path is \"/etc/jsnapy\"\n2. test file: \n    - full file path  \n    - only file name, in this case it will take path from \"test_file_path\" in jsnapy.cfg file. \n      Default test file path is \"/etc/jsnapy/testfiles\"\n3. snap file:\n    - full file path\n    - tag, in this case file name is formed automatically (<devicename>_<tag>_<command/rpc>.<xml/text>)\n      Snap files will be taken from \"snapshot_path\" in jsnapy.cfg file. \n      Default path is \"/etc/jsnapy/snapshots\"\n```\njsnap2py: \n----------\nTool to convert conf file of JSNAP slax into yaml file that can be consumed by JSNAPy.\n```\njsnap2py -i test_interface.conf\n```\nThis will convert slax conf file \"test_interface.conf\" into yaml file \"test_interface.yaml\".  \nIf you want to give different output file name, then use -o option\n```\njsnap2py -i test_interface.conf -o interface.yml\n```\nFor more information please refer [jsnap2py-wiki] (https://github.com/Juniper/jsnapy/wiki/7.-jsnap2py)\n\nCONTRIBUTORS\n-------------\n\nJuniper Networks is actively contributing to and maintaining this repo. Please contact jnpr-community-netdev@juniper.net for any queries.\n\nContributors:  \n\n* v1.2.0 - v1.3.2: [Jasminderpal Singh Sidhu](https://github.com/sidhujasminder)\n* v1.1.0: [Ishaan Kumar](https://github.com/eeishaan)\n* v1.0.0: [Priyal Jain](https://github.com/jainpriyal), [Nitin Kumar](https://github.com/vnitinv)\n\n\n",
  "permissions": {
    "read": true,
    "write": false,
    "admin": false
  },
  "media_types": [
    "application/vnd.docker.container.image.v1+json"
  ],
  "content_types": [
    "image"
  ]
}