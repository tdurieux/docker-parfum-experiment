{
  "user": "gliderlabs",
  "name": "registrator",
  "namespace": "gliderlabs",
  "repository_type": "image",
  "status": 1,
  "status_description": "active",
  "description": "Service registry bridge for Docker with pluggable backends",
  "is_private": false,
  "is_automated": true,
  "can_edit": false,
  "star_count": 174,
  "pull_count": 826412428,
  "last_updated": "2020-01-07T20:48:25.664365Z",
  "date_registered": "2015-02-18T17:01:39.575031Z",
  "collaborator_count": 0,
  "affiliation": null,
  "hub_user": "gliderlabs",
  "has_starred": false,
  "full_description": "# Registrator\n\nService registry bridge for Docker.\n\n[![Circle CI](https://circleci.com/gh/gliderlabs/registrator.png?style=shield)](https://circleci.com/gh/gliderlabs/registrator)\n[![Docker pulls](https://img.shields.io/docker/pulls/gliderlabs/registrator.svg)](https://hub.docker.com/r/gliderlabs/registrator/)\n[![IRC Channel](https://img.shields.io/badge/irc-%23gliderlabs-blue.svg)](https://kiwiirc.com/client/irc.freenode.net/#gliderlabs)\n<br /><br />\n\nRegistrator automatically registers and deregisters services for any Docker\ncontainer by inspecting containers as they come online. Registrator\nsupports pluggable service registries, which currently includes\n[Consul](http://www.consul.io/), [etcd](https://github.com/coreos/etcd) and\n[SkyDNS 2](https://github.com/skynetservices/skydns/).\n\nFull documentation available at http://gliderlabs.com/registrator\n\n## Getting Registrator\n\nGet the latest release, master, or any version of Registrator via [Docker Hub](https://registry.hub.docker.com/u/gliderlabs/registrator/):\n\n\t$ docker pull gliderlabs/registrator:latest\n\nLatest tag always points to the latest release. There is also a `:master` tag\nand version tags to pin to specific releases.\n\n## Using Registrator\n\nThe quickest way to see Registrator in action is our\n[Quickstart](https://gliderlabs.com/registrator/latest/user/quickstart)\ntutorial. Otherwise, jump to the [Run\nReference](https://gliderlabs.com/registrator/latest/user/run) in the User\nGuide. Typically, running Registrator looks like this:\n\n    $ docker run -d \\\n        --name=registrator \\\n        --net=host \\\n        --volume=/var/run/docker.sock:/tmp/docker.sock \\\n        gliderlabs/registrator:latest \\\n          consul://localhost:8500\n\n## CLI Options\n```\nUsage of /bin/registrator:\n  /bin/registrator [options] <registry URI>\n\n  -cleanup=false: Remove dangling services\n  -deregister=\"always\": Deregister exited services \"always\" or \"on-success\"\n  -internal=false: Use internal ports instead of published ones\n  -ip=\"\": IP for ports mapped to the host\n  -resync=0: Frequency with which services are resynchronized\n  -retry-attempts=0: Max retry attempts to establish a connection with the backend. Use -1 for infinite retries\n  -retry-interval=2000: Interval (in millisecond) between retry-attempts.\n  -tags=\"\": Append tags for all registered services\n  -ttl=0: TTL for services (default is no expiry)\n  -ttl-refresh=0: Frequency with which service TTLs are refreshed\n```\n\n## Contributing\n\nPull requests are welcome! We recommend getting feedback before starting by\nopening a [GitHub issue](https://github.com/gliderlabs/registrator/issues) or\ndiscussing in [Slack](http://glider-slackin.herokuapp.com/).\n\nAlso check out our Developer Guide on [Contributing\nBackends](https://gliderlabs.com/registrator/latest/dev/backends) and [Staging\nReleases](https://gliderlabs.com/registrator/latest/dev/releases).\n\n## Sponsors and Thanks\n\nBig thanks to Weave for sponsoring, Michael Crosby for\n[skydock](https://github.com/crosbymichael/skydock), and the Consul mailing list\nfor inspiration.\n\nFor a full list of sponsors, see\n[SPONSORS](https://github.com/gliderlabs/registrator/blob/master/SPONSORS).\n\n## License\n\nMIT\n\n<img src=\"https://ga-beacon.appspot.com/UA-58928488-2/registrator/readme?pixel\" />\n",
  "permissions": {
    "read": true,
    "write": false,
    "admin": false
  },
  "media_types": [
    "application/vnd.docker.container.image.v1+json",
    "application/vnd.docker.distribution.manifest.v1+prettyjws"
  ],
  "content_types": [
    "image"
  ]
}