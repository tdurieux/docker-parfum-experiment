{
  "user": "clivern",
  "name": "walrus",
  "namespace": "clivern",
  "repository_type": "image",
  "status": 1,
  "status_description": "active",
  "description": "Fast, Secure and Reliable System Backup, Set up in Minutes.",
  "is_private": false,
  "is_automated": false,
  "can_edit": false,
  "star_count": 0,
  "pull_count": 867,
  "last_updated": "2021-07-27T20:13:09.362131Z",
  "date_registered": "2021-01-31T22:22:20.565405Z",
  "collaborator_count": 0,
  "affiliation": null,
  "hub_user": "clivern",
  "has_starred": false,
  "full_description": "<p align=\"center\">\n    <img src=\"https://raw.githubusercontent.com/Clivern/Walrus/main/assets/gopher.png\" width=\"230\" />\n    <h3 align=\"center\">Walrus</h3>\n    <p align=\"center\">Fast, Secure and Reliable System Backup, Set up in Minutes.</p>\n    <p align=\"center\">\n        <a href=\"https://github.com/Clivern/Walrus/actions\"><img src=\"https://github.com/Clivern/Walrus/workflows/Build/badge.svg\"></a>\n        <a href=\"https://github.com/Clivern/Walrus/actions\"><img src=\"https://github.com/Clivern/Walrus/workflows/Release/badge.svg\"></a>\n        <a href=\"https://github.com/Clivern/Walrus/releases\"><img src=\"https://img.shields.io/badge/Version-1.1.0-red.svg\"></a>\n        <a href=\"https://goreportcard.com/report/github.com/Clivern/Walrus\"><img src=\"https://goreportcard.com/badge/github.com/Clivern/Walrus?v=1.1.0\"></a>\n        <a href=\"https://godoc.org/github.com/clivern/walrus\"><img src=\"https://godoc.org/github.com/clivern/walrus?status.svg\"></a>\n        <a href=\"https://hub.docker.com/r/clivern/walrus\"><img src=\"https://img.shields.io/badge/Docker-Latest-green\"></a>\n        <a href=\"https://github.com/Clivern/Walrus/blob/master/LICENSE\"><img src=\"https://img.shields.io/badge/LICENSE-MIT-orange.svg\"></a>\n    </p>\n</p>\n<br/>\n<p align=\"center\">\n    <img src=\"https://raw.githubusercontent.com/Clivern/Walrus/main/assets/chart.png?v=1.1.0\" width=\"80%\" />\n</p>\n<p align=\"center\">\n    <h3 align=\"center\">Dashboard Screenshots</h3>\n    <p align=\"center\">\n        <img src=\"https://raw.githubusercontent.com/Clivern/Walrus/main/assets/screenshot_02.png?v=1.1.0\" width=\"90%\" />\n        <img src=\"https://raw.githubusercontent.com/Clivern/Walrus/main/assets/screenshot_03.png?v=1.1.0\" width=\"90%\" />\n    </p>\n</p>\n\nWalrus is a fast, secure and reliable backup system suitable for modern infrastructure. With walrus, you can backup services like SQLite, MySQL, PostgreSQL, Redis, etcd or a complete directory with a short interval and low overhead. It supports AWS S3, digitalocean spaces and any S3-compatible object storage service.\n\n\n## Documentation\n\n## Deployment\n\nDownload [the latest walrus binary](https://github.com/Clivern/Walrus/releases). Make it executable from everywhere.\n\n```zsh\n$ export WALRUS_LATEST_VERSION=$(curl --silent \"https://api.github.com/repos/Clivern/Walrus/releases/latest\" | jq '.tag_name' | sed -E 's/.*\"([^\"]+)\".*/\\1/' | tr -d v)\n\n$ curl -sL https://github.com/Clivern/Walrus/releases/download/v{$WALRUS_LATEST_VERSION}/walrus_{$WALRUS_LATEST_VERSION}_Linux_x86_64.tar.gz | tar xz\n```\n\nThen install etcd cluster or single node, please refer to etcd docs or bin directory inside this repository.\n\n\n#### Run Walrus Tower:\n\nCreate the tower configs file `tower.config.yml` from `config.dist.yml`. Something like the following:\n\nPlease make sure to update the `apiKey` and `encryptionKey` to a different random values.\n\n```yaml\n# Tower configs\ntower:\n    # Env mode (dev or prod)\n    mode: ${WALRUS_APP_MODE:-dev}\n    # HTTP port\n    port: ${WALRUS_API_PORT:-8000}\n    # URL\n    url: ${WALRUS_API_URL:-http://127.0.0.1:8000}\n    # TLS configs\n    tls:\n        status: ${WALRUS_API_TLS_STATUS:-off}\n        pemPath: ${WALRUS_API_TLS_PEMPATH:-cert/server.pem}\n        keyPath: ${WALRUS_API_TLS_KEYPATH:-cert/server.key}\n\n    # API Configs\n    api:\n        key: ${WALRUS_API_KEY:-6c68b836-6f8e-465e-b59f-89c1db53afca}\n        encryptionKey: ${WALRUS_ENCRYPTION_KEY:-B?E(H+Mb}\n\n    # Async Workers\n    workers:\n        # Queue max capacity\n        buffer: ${WALRUS_WORKERS_CHAN_CAPACITY:-5000}\n        # Number of concurrent workers\n        count: ${WALRUS_WORKERS_COUNT:-4}\n\n    # Runtime, Requests/Response and Walrus Metrics\n    metrics:\n        prometheus:\n            # Route for the metrics endpoint\n            endpoint: ${WALRUS_METRICS_PROM_ENDPOINT:-/metrics}\n\n    # Application Database\n    database:\n        # database driver\n        driver: ${WALRUS_DB_DRIVER:-etcd}\n\n        etcd:\n            # etcd database name or prefix\n            databaseName: ${WALRUS_DB_ETCD_DB:-walrus}\n            # etcd username\n            username: ${WALRUS_DB_ETCD_USERNAME:- }\n            # etcd password\n            password: ${WALRUS_DB_ETCD_PASSWORD:- }\n            # etcd endpoints\n            endpoints: ${WALRUS_DB_ETCD_ENDPOINTS:-http://127.0.0.1:2379}\n            # Timeout in seconds\n            timeout: 30\n\n    # Log configs\n    log:\n        # Log level, it can be debug, info, warn, error, panic, fatal\n        level: ${WALRUS_LOG_LEVEL:-info}\n        # output can be stdout or abs path to log file /var/logs/walrus.log\n        output: ${WALRUS_LOG_OUTPUT:-stdout}\n        # Format can be json\n        format: ${WALRUS_LOG_FORMAT:-json}\n```\n\nThe run the `tower` with `systemd`\n\n```\nwalrus tower -c /path/to/tower.config.yml\n```\n\n\n#### Run Walrus Agent:\n\nCreate the agent configs file `agent.config.yml` from `config.dist.yml`. Something like the following:\n\n```yaml\n# Agent configs\nagent:\n    # Env mode (dev or prod)\n    mode: ${WALRUS_APP_MODE:-dev}\n    # HTTP port\n    port: ${WALRUS_API_PORT:-8001}\n    # URL\n    url: ${WALRUS_API_URL:-http://127.0.0.1:8001}\n    # TLS configs\n    tls:\n        status: ${WALRUS_API_TLS_STATUS:-off}\n        pemPath: ${WALRUS_API_TLS_PEMPATH:-cert/server.pem}\n        keyPath: ${WALRUS_API_TLS_KEYPATH:-cert/server.key}\n\n    # API Configs\n    api:\n        key: ${WALRUS_API_KEY:-56e1a911-cc64-44af-9c5d-8c7e72ec96a1}\n\n    # Async Workers\n    workers:\n        # Queue max capacity\n        buffer: ${WALRUS_WORKERS_CHAN_CAPACITY:-5000}\n        # Number of concurrent workers\n        count: ${WALRUS_WORKERS_COUNT:-4}\n\n    # Tower Configs\n    tower:\n        url: ${WALRUS_TOWER_URL:-http://127.0.0.1:8000}\n        # This must match the one defined in tower config file\n        apiKey: ${WALRUS_TOWER_API_KEY:-6c68b836-6f8e-465e-b59f-89c1db53afca}\n        # This must match the one defined in tower config file\n        encryptionKey: ${WALRUS_ENCRYPTION_KEY:-B?E(H+Mb}\n        # Time interval between agent ping checks\n        pingInterval: ${WALRUS_CHECK_INTERVAL:-60}\n\n    # Backup settings\n    backup:\n        tmpDir: ${WALRUS_BACKUP_TMP_DIR:-/tmp}\n\n    # Log configs\n    log:\n        # Log level, it can be debug, info, warn, error, panic, fatal\n        level: ${WALRUS_LOG_LEVEL:-info}\n        # output can be stdout or abs path to log file /var/logs/walrus.log\n        output: ${WALRUS_LOG_OUTPUT:-stdout}\n        # Format can be json\n        format: ${WALRUS_LOG_FORMAT:-json}\n```\n\nThe run the `agent` with `systemd`\n\n```\nwalrus agent -c /path/to/agent.config.yml\n```\n\nNow you can open the walrus tower dashboard `http://127.0.0.1:8000` and start the setup.\n\n\n#### To run the Admin Dashboard (Development Only):\n\nClone the project or your own fork:\n\n```zsh\n$ git clone https://github.com/Clivern/Walrus.git\n```\n\nCreate the dashboard config file `web/.env` from `web/.env.dist`. Something like the following:\n\n```\nVUE_APP_TOWER_URL=http://localhost:8080\n```\n\nThen you can either build or run the dashboard\n\n```zsh\n# Install npm packages\n$ cd web\n$ npm install\n$ npm install -g npx\n\n# Add tower url to frontend\n$ echo \"VUE_APP_TOWER_URL=http://127.0.0.1:8000\" > .env\n\n$ cd ..\n\n# Validate js code format\n$ make check_ui_format\n\n# Format UI\n$ make format_ui\n\n# Run Vuejs app\n$ make serve_ui\n\n# Build Vuejs app\n$ make build_ui\n\n# Any changes to the dashboard, must be reflected to cmd/pkged.go\n# You can use these commands to do so\n$ go get github.com/markbates/pkger/cmd/pkger\n$ make package\n```\n\n## Versioning\n\nFor transparency into our release cycle and in striving to maintain backward compatibility, Walrus is maintained under the [Semantic Versioning guidelines](https://semver.org/) and release process is predictable and business-friendly.\n\nSee the [Releases section of our GitHub project](https://github.com/clivern/walrus/releases) for changelogs for each release version of Walrus. It contains summaries of the most noteworthy changes made in each release.\n\n\n## Bug tracker\n\nIf you have any suggestions, bug reports, or annoyances please report them to our issue tracker at https://github.com/clivern/walrus/issues\n\n\n## Security Issues\n\nIf you discover a security vulnerability within Walrus, please send an email to [hello@clivern.com](mailto:hello@clivern.com)\n\n\n## Contributing\n\nWe are an open source, community-driven project so please feel free to join us. see the [contributing guidelines](CONTRIBUTING.md) for more details.\n\n\n## License\n\nÂ© 2020, Clivern. Released under [MIT License](https://opensource.org/licenses/mit-license.php).\n\n**Walrus** is authored and maintained by [@clivern](http://github.com/clivern).\n",
  "permissions": {
    "read": true,
    "write": false,
    "admin": false
  },
  "media_types": [
    "application/vnd.docker.container.image.v1+json"
  ],
  "content_types": [
    "image"
  ]
}