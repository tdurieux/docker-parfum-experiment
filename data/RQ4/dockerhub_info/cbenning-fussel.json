{
  "user": "cbenning",
  "name": "fussel",
  "namespace": "cbenning",
  "repository_type": "image",
  "status": 1,
  "status_description": "active",
  "description": "Docker image for the fussel static gallery generator.",
  "is_private": false,
  "is_automated": false,
  "can_edit": false,
  "star_count": 0,
  "pull_count": 91468,
  "last_updated": "2021-01-09T23:28:10.992418Z",
  "date_registered": "2020-05-23T00:09:41.834607Z",
  "collaborator_count": 0,
  "affiliation": null,
  "hub_user": "cbenning",
  "has_starred": false,
  "full_description": "# Fussel\n\n![License Badge](https://img.shields.io/github/license/cbenning/fussel)\n![Version Badge](https://img.shields.io/github/v/release/cbenning/fussel)\n\nFussel is a static photo gallery generator. It can build a simple static photo gallery site\nwith nothing but a directory full of photos. \n\nFeatures and Properties:\n - Absolutely no server-side code to worry about once deployed\n - Builds special \"Person\" gallery for people found in XMP face tags.\n - Adds watermarks\n - Mobile friendly\n\n## Screenshots\n| ![Albums Screenshot](https://user-images.githubusercontent.com/153700/81897761-1e904780-956c-11ea-9450-fbdb286b95fc.png?raw=true \"Albums Screenshot\") | ![Album Screenshot](https://user-images.githubusercontent.com/153700/81897716-120bef00-956c-11ea-9204-b8e90ffb24f8.png?raw=true \"Album Screenshot\") |  \n|---|---|\n| ![People Screenshot](https://user-images.githubusercontent.com/153700/81897685-fef91f00-956b-11ea-8df6-9c23fad83bb2.png?raw=true \"People Screenshot\") | ![Person Screenshot](https://user-images.githubusercontent.com/153700/81897698-091b1d80-956c-11ea-9acb-6195d9673407.png?raw=true \"PersonScreenshot\") | \n\n## Demo\n![Demo Gif](https://user-images.githubusercontent.com/153700/81898094-d58cc300-956c-11ea-90eb-f8ce5561f63d.gif?raw=true \"Modal Screenshot\")\n\n## Setup\n\n### Requirements\n\n - Python 3\n - Node + Yarn\n\n## Install dependencies\n\n### Site Generator\n - `pip install -r requirements.txt`\n \n### Node Frontend\n - `cd web`\n - `yarn install`\n - `cd ../`\n \n## Setup Site\n\n### Configure\n\n - Copy `.env.example` to `.env`\n - Edit `.env` to your needs (minimal change is to set INPUT_PATH)\n\n### Curate photos\nThe folder you point INPUT_PATH at, must have albums in subfolders inside it with the folder names as the name of the albums you want in the gallery. Any further-nested folders will be ignored.\n\n#### Example\n\nIf you have your .env setup with:\n`INPUT_PATH = /home/user/Photos/gallery`\n\nThen that path should look like this:\n```\n/home/user/Photos/gallery:\n  - Album 1\n  - Album 2\n  - Album 3\n  - ...\n```\n\n\n### Generate your site\nRun the following script to generate your site into `web/build` folder.\n - `./generate_site.sh`\n \n### Host your site\n\nPoint your web server at `web/build` or copy/upload the `web/build` folder to your web host HTTP root.\n\n#### Quick setup\n\nAfter running `generate_site.sh`\n\n - `python -m http.server --directory web/build` (go to localhost:8000 in browser)\n\n#### Development setup\n\n - `cd web`\n - `yarn start`\n \n## Docker\n\nIf you don't want to fuss with anything and would like to use docker instead fo generate your site...\n\n### Usage\n\nRequired:\n * `/my-input-folder` is the absolute path to top-level photo folder\n * `/my-output-folder` is the absolute path to where you want the generated site written to\n\nNote: \n The two -e env variables PGID and PUID tells the container what to set the output folder permissions to\n once done. Otherwise it is set to root permissions\n\n```\ndocker run \\\n    -e PGID=$(id -g) \\\n    -e PUID=$(id -u) \\\n    -v /my-input-folder:/input:ro \\\n    -v /my-output-folder:/fussel/web/build \\\n\tcbenning/fussel:latest\n```\n\nOptional:\n You can provide any value found in the .env.sample file in a docker env variable using `-e MYVAR=THING`\n\n```\ndocker run \\\n    -e PGID=$(id -g) \\\n    -e PUID=$(id -u) \\\n    -v /my-input-folder:/input:ro \\\n    -v /my-output-folder:/fussel/web/build \\\n    -e HTTP_ROOT=/my/alternate/path \\\n    -e WATERMARK_ENABLE=false \\\n    cbenning/fussel:latest\n```\n\nOnce complete you can upload the output folder to your webserver, or see what it looks like with\n`python -m http.server --directory /my-output-folder`\n\n\n",
  "permissions": {
    "read": true,
    "write": false,
    "admin": false
  },
  "media_types": [
    "application/vnd.docker.container.image.v1+json"
  ],
  "content_types": [
    "image"
  ]
}