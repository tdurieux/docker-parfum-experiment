{
  "user": "umaprotocol",
  "name": "protocol",
  "namespace": "umaprotocol",
  "repository_type": "image",
  "status": 1,
  "status_description": "active",
  "description": "UMA Protocol monorepo for running liquidator, disputer or monitor bots. https://umaproject.org/ ",
  "is_private": false,
  "is_automated": false,
  "can_edit": false,
  "star_count": 1,
  "pull_count": 1077550,
  "last_updated": "2023-01-06T09:55:38.095334Z",
  "date_registered": "2020-05-14T08:27:09.137114Z",
  "collaborator_count": 0,
  "affiliation": null,
  "hub_user": "umaprotocol",
  "has_starred": false,
  "full_description": "# UMA Protocol\n\n<p align=\"center\">\n  <img alt=\"UMA Logo\" src=\"https://umaproject.org/assets/images/logo.svg\" width=\"440\">\n</p>\n\n[![<UMAprotocol>](https://circleci.com/gh/UMAprotocol/protocol.svg?style=shield)](https://app.circleci.com/pipelines/github/UMAprotocol/protocol)\n[![Docker Cloud Build Status](https://img.shields.io/docker/cloud/build/umaprotocol/protocol)](https://hub.docker.com/r/umaprotocol/protocol)\n[![Coverage Status](https://coveralls.io/repos/github/UMAprotocol/protocol/badge.svg?branch=master)](https://coveralls.io/github/UMAprotocol/protocol?branch=master)\n\n[![GitHub](https://img.shields.io/github/license/UMAprotocol/protocol)](https://github.com/UMAprotocol/protocol/blob/master/LICENSE)\n[![GitHub last commit](https://img.shields.io/github/last-commit/UMAprotocol/protocol)](https://github.com/UMAprotocol/protocol/commits/master)\n[![GitHub commit activity](https://img.shields.io/github/commit-activity/m/UMAprotocol/protocol)](https://github.com/UMAprotocol/protocol/commits/master)\n[![GitHub contributors](https://img.shields.io/github/contributors-anon/UMAprotocol/protocol)](https://github.com/UMAprotocol/protocol/graphs/contributors)\n\n[![Generic badge](https://img.shields.io/badge/homepage-view-red.svg)](https://umaproject.org/)\n[![Generic badge](https://img.shields.io/badge/discord-join-green.svg)](https://discord.com/invite/jsb9XQJ)\n[![Generic badge](https://img.shields.io/badge/send-email-blue.svg)](mailto:hello@umaproject.org)\n[![Twitter Follow](https://img.shields.io/twitter/follow/UMAprotocol?label=follow%20%40UMAprotocol&style=social)](https://twitter.com/UMAprotocol)\n\n## Documentation üìö\n\nOur docs site is [here](https://docs.umaproject.org). It contains tutorials, explainers, and smart contract\ndocumentation. If you'd like to view these docs on github instead, check out the\n[documentation folder in the docs repo](https://github.com/UMAprotocol/docs/tree/master/docs).\n\n## Security and Bug Bounty üêõ\n\nPlease see [here](https://docs.umaproject.org/dev-ref/bug-bounty) for details on our bug bounty.\n\n## Contributing üôå\n\nPlease see our [contributing guidelines](./CONTRIBUTING.md).\n\n## Developer Information and Tools üë©‚Äçüíª\n\nFor detailed information on how to initialize and interact with our smart contracts, please see the\n[documentation site](https://docs.umaproject.org).\n\n### Install dependencies üë∑‚Äç‚ôÇÔ∏è\n\nYou'll need to install the long-term support version of nodejs, currently nodejs v14. You will also need to install yarn. Assuming that's done, run `yarn` with no args:\n\n```\nyarn\n```\n\nIf you'd like to completely clear all packages' `node_modules` and reinstall all deps from scratch, run:\n\n```\nyarn clean-packages\nyarn\n```\n\n### Build the code üßê\n\nSome code in the repository requires a build step to compile it. To run this build step, use the `qbuild` (quick build) command:\n\n```\nyarn qbuild\n```\n\nThe above command does not include dapps because dapps take a long time to build and they have their own scripts to run locally.\nHowever, if you'd like to build _everything_, you can use the build command:\n\n```\nyarn build\n```\n\nTo remove any remnants of previous builds, you can run:\n\n```\nyarn clean\n```\n\n### Run tests ü¶æ\n\nTo run tests, you'll need to start ganache on port 9545:\n\n```\nyarn ganache-cli -e 1000000000 -p 9545 -l 9000000 -d\n```\n\nNote: if you're interested in what these args do:\n\n- `-e` is the amount of ETH to grant the default accounts.\n- `-p` is the port that ganache will listen on.\n- `-d` tells ganache to use a standard set of deterministic accounts on each run.\n\nThen, you can run all of the tests across the repo by running:\n\n```\nyarn test\n```\n\nHowever, running all of the tests across the repository takes a lot of time. To run the tests for just\none package, you can run:\n\n```\nyarn workspace <package_name> test\n```\n\n### Running the linter üßΩ\n\nTo run the linter in autofix mode (it will attempt to fix any errors it finds), run:\n\n```\nyarn lint-fix\n```\n\nTo run the linter in the default mode, where it will print all errors and not modify code, run:\n\n```\nyarn lint\n```\n\n### Packages üì¶\n\nBecause this repo is a monorepo, it conatains many different npm packages. More will be discussed about these packages in the\nfollowing sections. However, the basic structure is that each pacakge is listed in the `packages/` directory. Each package has\nits own scripts and dependencies and operates (mostly) independently from the others.\n\n### Adding dependencies üë©‚Äçüë¶\n\nAll runtime/production dependencies should be added to the package that needs them. Development dependencies\nshould also generally be installed in packages unless they are needed by code that exists outside of any package.\n\nFor more details on packages and the monorepo, please see the next section.\n\nTo add a dependency to a package:\n\n```\nyarn workspace <package_name> add <dependency_name>\n```\n\nNote: development dependencies are those that are not required by the code that's published to the npm registry. If you're not\nsure whether a dependency should be dev or not, just ask! To install a dev dependency in a package:\n\n```\nyarn workspace <package_name> add <dependency_name> --dev\n```\n\nNote: all root dependencies should be dev dependencies because the root package is not published to npm, so there is no \"production\" code.\nTo install a dev dependency at root:\n\n```\nyarn add <dependency_name> --dev\n```\n\nAfter you've installed a dependency, yarn should automatically update the `yarn.lock` file. If git doesn't notice any changes in that file,\nrun `yarn` to update the lockfile.\n\n### Depending on another package in the monorepo ü§ù\n\nThe standard way to pull a JS element from another package is to reference it like this:\n\n```js\nconst { importedObject } = require(\"@uma/some-package\")\n```\n\nNote: the require will resolve to the `main` file specified in the `package.json` file. If you'd like to import a different file, you\nshould ensure that that file is exported in the `files` directive inside the `package.json` file. Once you're sure of that, you can\nimport it using the following syntax:\n\n```js\nconst { importedObject } = require(\"@uma/some-package/path/to/some/file\")\n```\n\nNote: if this file isn't exported by the `files` directive, it will work locally, but fail when run via an npm installation.\n\nTo install this dependency you're using in `@uma/my-package`, you should run the following command:\n\n```\nyarn lerna add @uma/some-package --scope @uma/my-package\n```\n\nBy default, this will symlink the package in `node_modules` rather than attempting to pull the package via npm. This allows\nthe packages to depend on the in-repo versions of one another. If you'd like to reference a particular version from npm,\nyou can specify that version exactly in the `package.json` file.\n\n### Using yarn and lerna üßë‚Äçüç≥\n\nThis repository is a monorepo. That means that it contains many different, but related packages.\nIt uses [yarn workspaces](https://classic.yarnpkg.com/en/docs/workspaces/) and [lerna](https://github.com/lerna/lerna)\nto manage these packages.\n\nNote: lerna and yarn workspaces have some overlapping functionality. This is because `lerna` predates `yarn` workspaces and\nis compatible with `yarn` alternatives that don't have workspace functions, like `npm`.\n\n`yarn` should be installed globally to use this repo. This means that you can run any yarn command by running:\n\n```\nyarn <command>\n```\n\nOnce you run `yarn` during the install section above, lerna should have been installed locally. After that,\nyou should be able to run lerna commands using yarn:\n\n```\nyarn lerna <command>\n```\n\nTo run a yarn command in a particular sub-package, you can run the following from _anywhere in the repo_:\n\n```\nyarn workspace <package_name> <script>\n```\n\nFor instance, this could be used to run the build command in the `@uma/core` package:\n\n```\nyarn workspace @uma/core build\n```\n\nor to install the truffle package as a devDependency in the `@uma/liquidator` package:\n\n```\nyarn workspace @uma/liquidator add truffle --dev\n```\n\nTo run a package script in _every_ package that has a script by that name, you should use `lerna`:\n\n```\nyarn lerna run <script> --stream\n```\n\nNote: the stream argument is just to force lerna to stream the output so you get realtime logs, but it's not required.\n\n### Coverage üîé\n\nWe use the [solidity-coverage](https://github.com/sc-forks/solidity-coverage) package to generate our coverage reports.\nYou can find the coverage report at [coveralls](https://coveralls.io/github/UMAprotocol/protocol). Otherwise, you can generate it locally by running:\n\n```\n./ci/coverage.sh packages/core\n```\n\nThe full report can be viewed by opening the `packages/core/coverage/index.html` file in a browser.\n\n### Style Guide üï∫\n\nSee [STYLE.md](STYLE.md).\n\n## Roadmap for the DVM üõ£\n\nVersion 1 of the UMA Token and DVM have been released and launched. You can find the addresses of relevant contracts\n[here](./packages/core/networks/1.json). This version implements most of what's described in the\n[whitepaper](https://github.com/UMAprotocol/whitepaper/blob/master/UMA-DVM-oracle-whitepaper.pdf). Notable exceptions\ninclude:\n\n- The voting process uses a simple modal majority. If there is no majority, the vote is retried in the next round.\n- Defense against parasitic usage as described in section 8.1.\n- The buyback-and-burn mechanism is currently run by the UMA Foundation rather than other automated mechanisms\n  mentioned in section 5.2.\n\nThe goal is to bring the implementation closer to the whitepaper in future DVM upgrades. Please see the\n[documentation site](https://docs.umaproject.org) for more details.\n",
  "permissions": {
    "read": true,
    "write": false,
    "admin": false
  },
  "media_types": [
    "application/vnd.docker.container.image.v1+json"
  ],
  "content_types": [
    "image"
  ]
}