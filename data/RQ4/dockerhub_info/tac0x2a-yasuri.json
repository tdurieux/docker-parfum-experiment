{
  "user": "tac0x2a",
  "name": "yasuri",
  "namespace": "tac0x2a",
  "repository_type": "image",
  "status": 1,
  "status_description": "active",
  "description": "",
  "is_private": false,
  "is_automated": false,
  "can_edit": false,
  "star_count": 0,
  "pull_count": 16,
  "last_updated": "2021-04-01T23:33:32.67001Z",
  "date_registered": "2021-04-01T23:14:45.934679Z",
  "collaborator_count": 0,
  "affiliation": null,
  "hub_user": "tac0x2a",
  "has_starred": false,
  "full_description": "# Yasuri\n[![Build Status](https://github.com/tac0x2a/yasuri/actions/workflows/ruby.yml/badge.svg)](https://github.com/tac0x2a/yasuri/actions/workflows/ruby.yml)\n[![Coverage Status](https://coveralls.io/repos/tac0x2a/yasuri/badge.svg?branch=master)](https://coveralls.io/r/tac0x2a/yasuri?branch=master) [![Maintainability](https://api.codeclimate.com/v1/badges/c29480fea1305afe999f/maintainability)](https://codeclimate.com/github/tac0x2a/yasuri/maintainability)\n\nYasuri (é‘¢) is a library for declarative web scraping and a command line tool for scraping with it.\nIt performs scraping by simply describing the expected result in a simple declarative notation.\n\nYasuri makes it easy to write common scraping operations.\nFor example, the following processes can be easily implemented.\n\nFor example,\n\n+ Open links in the page, scraping each page, and getting result as Hash.\n+ Scraping texts in the page, and named result in Hash.\n+ A table that repeatedly appears in a page each, scraping, get as an array.\n+ Of each page provided by the pagination, scraping the only top 3.\n\nYou can implement easy by Yasuri.\n\n## Sample\n\nhttps://yasuri-sample.herokuapp.com/\n\n(source code: https://github.com/tac0x2a/yasuri-sample)\n\n## Installation\n\nAdd this line to your application's Gemfile:\n\n```ruby\ngem 'yasuri'\n```\n\nor\n\n```ruby\n# for Ruby 1.9.3 or lower\ngem 'yasuri', '~> 2.0', '>= 2.0.13'\n\n# for Ruby 3.0.0 or lower\ngem 'yasuri', '~> 3.1'\n```\n\n\nAnd then execute:\n\n    $ bundle\n\nOr install it yourself as:\n\n    $ gem install yasuri\n\n## Usage\n### Use as library\n\n```ruby\n# Node tree constructing by DSL\nroot = Yasuri.links_root '//*[@id=\"menu\"]/ul/li/a' do\n         text_title '//*[@id=\"contents\"]/h2'\n         text_content '//*[@id=\"contents\"]/p[1]'\n       end\n\n\n# Node tree constructing by YAML\nsrc = <<-EOYAML\nlinks_root:\n  path: \"//*[@id='menu']/ul/li/a\"\n  text_title: \"//*[@id='contents']/h2\"\n  text_content: \"//*[@id='contents']/p[1]\"\nEOYAML\nroot = Yasuri.yaml2tree(src)\n\n\n# Node tree constructing by JSON\nsrc = <<-EOJSON\n{\n  \"links_root\": {\n    \"path\": \"//*[@id='menu']/ul/li/a\",\n    \"text_title\": \"//*[@id='contents']/h2\",\n    \"text_content\": \"//*[@id='contents']/p[1]\"\n  }\n}\nEOJSON\nroot = Yasuri.json2tree(src)\n\n# Execution and getting scraped result\nresult = root.scrape(\"http://some.scraping.page.tac42.net/\")\n# => [\n#      {\"title\" => \"PageTitle 01\", \"content\" => \"Page Contents  01\" },\n#      {\"title\" => \"PageTitle 02\", \"content\" => \"Page Contents  02\" },\n#      ...\n#      {\"title\" => \"PageTitle N\",  \"content\" => \"Page Contents  N\" }\n#    ]\n```\n\n### Use as CLI\n\n```sh\n# After gem installation..\n$ yasuri help scrape\nUsage:\n  yasuri scrape <URI> [[--file <TREE_FILE>] or [--json <JSON>]]\n\nOptions:\n  f, [--file=FILE]   # path to file that written yasuri tree as json or yaml\n  j, [--json=JSON]   # yasuri tree format json string\n  i, [--interval=N]  # interval each request [ms]\n\nGetting from <URI> and scrape it. with <JSON> or json/yml from <TREE_FILE>. They should be Yasuri's format json or yaml string.\n```\n\n#### Example\n```sh\n$ yasuri scrape \"https://www.ruby-lang.org/en/\" -j '\n{\n  \"text_title\": \"/html/head/title\",\n  \"text_desc\": \"//*[@id=\\\"intro\\\"]/p\"\n}'\n\n{\"title\":\"Ruby Programming Language\",\"desc\":\"\\n    A dynamic, open source programming language with a focus on\\n    simplicity and productivity. It has an elegant syntax that is\\n    natural to read and easy to write.\\n    \"}\n```\n\n#### Run on Docker\n```sh\n$ docker run tac0x2a/yasuri yasuri scrape \"https://www.ruby-lang.org/en/\" -j '\n{\n  \"text_title\": \"/html/head/title\",\n  \"text_desc\": \"//*[@id=\\\"intro\\\"]/p\"\n}'\n\n{\"title\":\"Ruby Programming Language\",\"desc\":\"\\n    A dynamic, open source programming language with a focus on\\n    simplicity and productivity. It has an elegant syntax that is\\n    natural to read and easy to write.\\n    \"}\n```\n\n## Dev\n```sh\n$ gem install bundler\n$ bundle install\n```\n### Test\n```sh\n$ rake\n# or\n$ rspec spec/*spec.rb\n```\n\n### Test gem in local\n```sh\n$ gem build yasuri.gemspec\n$ gem install yasuri-*.gem\n```\n### Release RubyGems\n```sh\n# Only first time\n$ curl -u <user_name> https://rubygems.org/api/v1/api_key.yaml > ~/.gem/credentials\n$ chmod 0600 ~/.gem/credentials\n\n$ nano lib/yasuri/version.rb # edit gem version\n$ rake release\n```\n\n## Contributing\n\n1. Fork it ( https://github.com/tac0x2a/yasuri/fork )\n2. Create your feature branch (`git checkout -b my-new-feature`)\n3. Commit your changes (`git commit -am 'Add some feature'`)\n4. Push to the branch (`git push origin my-new-feature`)\n5. Create a new Pull Request\n",
  "permissions": {
    "read": true,
    "write": false,
    "admin": false
  },
  "media_types": [
    "application/vnd.docker.container.image.v1+json"
  ],
  "content_types": [
    "image"
  ]
}