{
  "user": "tomatool",
  "name": "tomato",
  "namespace": "tomatool",
  "repository_type": "image",
  "status": 1,
  "status_description": "active",
  "description": "behavioral testing tools - keep your application healthy with üçÖ",
  "is_private": false,
  "is_automated": true,
  "can_edit": false,
  "star_count": 1,
  "pull_count": 1487,
  "last_updated": "2020-10-20T16:03:38.604137Z",
  "date_registered": "2018-10-19T14:13:59.408423Z",
  "collaborator_count": 0,
  "affiliation": null,
  "hub_user": "tomatool",
  "has_starred": false,
  "full_description": "# üçÖ tomato - behavioral testing tool kit\n![CircleCI](https://circleci.com/gh/tomatool/tomato/tree/master.svg?style=shield)\n[![Go Report Card](https://goreportcard.com/badge/github.com/tomatool/tomato)](https://goreportcard.com/report/github.com/tomatool/tomato)\n[![GoDoc](https://godoc.org/github.com/tomatool/tomato?status.svg)](https://godoc.org/github.com/tomatool/tomato)\n[![codecov.io](https://codecov.io/github/tomatool/tomato/branch/master/graph/badge.svg)](https://codecov.io/github/tomatool/tomato)\n\nTomato is a language agnostic testing tool kit that simplifies the acceptance testing workflow of your application and its dependencies.\n\nUsing [godog](https://github.com/DATA-DOG/godog) and [Gherkin](https://docs.cucumber.io/gherkin/), tomato makes behavioral tests easier to understand, maintain, and write for developers, QA, and product owners.\n\n- [Background](https://medium.com/@alileza/functional-testing-using-af78a868a1f1)\n- [Documentation](https://github.com/tomatool/tomato/tree/master/docs)\n- [Examples](https://github.com/tomatool/tomato/tree/0.1.0/examples/features)\n\n## Features\n- Cucumber [Gherkin](https://docs.cucumber.io/gherkin/) feature syntax\n- Support for MySQL, MariaDB, and PostgreSQL\n- Support for messaging queues (RabbitMQ, NSQ)\n- Support for mocking HTTP API responses\n- Additional resources [resources](https://tomatool.github.io/tomato/resources)\n\n## Getting Started\n\n### Set up your tomato configuration\nTomato integrates your app and its test dependencies using a simple configuration file `tomato.yml`.\n\nCreate a `tomato.yml` file with your application's required test [resources](https://github.com/tomatool/tomato/blob/master/docs/resources.md):\n```yml\n---\n\n# Randomize scenario execution order\nrandomize: true\n\n# Stops on the first failure\nstop_on_failure: false\n\n# All feature file paths\nfeatures_path:\n    - ./features\n    - check-status.feature\n\n# List of resources for application dependencies\nresources:\n    - name: psql\n      type: postgres\n      params:\n        datasource: {{ .PSQL_DATASOURCE }}\n\n    - name: your-application-client\n      type: httpclient\n      params:\n        base_url: {{ .APP_BASE_URL }}\n```\n\n### Write your first feature test\nWrite your own [Gherkin](https://docs.cucumber.io/gherkin/) feature (or customize the check-status.feature example below) and place it inside ./features/check-status.feature:\n\n```gherkin\nFeature: Check my application's status endpoint\n\n  Scenario: My application is running and active\n    Given \"your-application-client\" send request to \"GET /status\"\n    Then \"your-application-client\" response code should be 200\n```\n\n### Run tomato\n#### Using docker-compose\n\nNow that you have your resources configured, you can use docker-compose to run tomato in any Docker environment (great for CI and other build pipelines).\n\nCreate a `docker-compose.yml` file, or add tomato and your test dependencies to an existing one:\n```yml\nversion: '3'\nservices:\n  tomato:\n    image: quay.io/tomatool/tomato:latest\n    environment:\n      APP_BASE_URL: http://my-application:9000\n      PSQL_DATASOURCE: \"postgres://user:password@postgres:5432/test-database?sslmode=disable\"\n    volumes:\n      - ./tomato.yml:/config.yml # location of your tomato.yml\n      - ./features/:/features/   # location of all of your features\n\n  my-application:\n    build: .\n    expose:\n      - \"9000\"\n\n  postgres:\n    image: postgres:9.5\n    expose:\n      - \"5432\"\n    environment:\n            POSTGRES_USER: user\n            POSTGRES_PASSWORD: password\n            POSTGRES_DB: test-database\n    volumes:\n      - ./sqldump/:/docker-entrypoint-initdb.d/ # schema or migrations sql\n```\n\nExecute your tests\n```sh\ndocker-compose up --abort-on-container-exit\n```\n\n#### Install latest stable version\n\n```\ncurl https://raw.githubusercontent.com/tomatool/tomato/master/install.sh | sh\n```\n\n#### Install latest master\n\nInstall tomato by grabbing the latest stable [release](https://github.com/tomatool/tomato/releases/latest) and placing it in your path, or by using go get\n```\ngo get -u github.com/tomatool/tomato\n```\n\n#### Executing tomato\n\nNow run tomato:\n```sh\ntomato tomato.yml\n```\n\n---\n\n## Resources\n\nResource are the objects that are going to be used for steps in the scenario. They are listed under the resources key in the pipeline configuration.\n\n### List of available resources\n\n* [Database SQL](https://github.com/tomatool/tomato/blob/master/docs/resources.md#database-sql) - to manage (insert/check) database state changes\n  * [MySQL](https://github.com/tomatool/tomato/blob/master/docs/resources.md#database-sql)\n  * [PostgreSQL](https://github.com/tomatool/tomato/blob/master/docs/resources.md#database-sql)\n* [HTTP Client](https://github.com/tomatool/tomato/blob/master/docs/resources.md#http-client) - to send HTTP Request\n* [HTTP Server](https://github.com/tomatool/tomato/blob/master/docs/resources.md#http-server) - to mock external HTTP Server\n  * [Wiremock](https://github.com/tomatool/tomato/blob/master/docs/resources.md#http-server)\n* [Message Queue](https://github.com/tomatool/tomato/blob/master/docs/resources.md#queue) - to manage (publish/consume/check) message queue\n  * [RabbitMQ](https://github.com/tomatool/tomato/blob/master/docs/resources.md#queue)\n  * [NSQ](https://github.com/tomatool/tomato/blob/master/docs/resources.md#queue)\n* [Shell](https://github.com/tomatool/tomato/blob/master/docs/resources.md#shell) -  to execute unix shell command-line interface\n* [Cache](https://github.com/tomatool/tomato/blob/master/docs/resources.md#cache)\n  * [Redis](https://github.com/tomatool/tomato/blob/master/docs/resources.md#cache)\n",
  "permissions": {
    "read": true,
    "write": false,
    "admin": false
  },
  "media_types": [
    "application/vnd.docker.container.image.v1+json"
  ],
  "content_types": [
    "image"
  ]
}