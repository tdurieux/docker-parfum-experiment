{
  "user": "parflow",
  "name": "parflow",
  "namespace": "parflow",
  "repository_type": "image",
  "status": 1,
  "status_description": "active",
  "description": "ParFlow is a parallel watershed model for simulation of surface and subsurface fluid flow.",
  "is_private": false,
  "is_automated": false,
  "can_edit": false,
  "star_count": 0,
  "pull_count": 6370,
  "last_updated": "2022-09-06T21:27:52.40017Z",
  "date_registered": "2019-07-17T15:41:44.526764Z",
  "collaborator_count": 0,
  "affiliation": null,
  "hub_user": "parflow",
  "has_starred": false,
  "full_description": "# ParFlow\n\n![ParFlow CI Test](https://github.com/parflow/parflow/workflows/ParFlow%20CI%20Test/badge.svg)\n\nParFlow is an open-source, modular, parallel watershed flow model. It\nincludes fully-integrated overland flow, the ability to simulate\ncomplex topography, geology and heterogeneity and coupled land-surface\nprocesses including the land-energy budget, biogeochemistry and snow\n(via CLM). It is multi-platform and runs with a common I/O structure\nfrom laptop to supercomputer. ParFlow is the result of a long,\nmulti-institutional development history and is now a collaborative\neffort between CSM, LLNL, UniBonn and UCB. ParFlow has been coupled to\nthe mesoscale, meteorological code ARPS and the NCAR code WRF.\n\nFor an overview of the major features and capabilities see the\nfollowing paper: [Simulating coupled surfaceâ€“subsurface flows with\nParFlow v3.5.0: capabilities, applications, and ongoing development of\nan open-source, massively parallel, integrated hydrologic\nmodel](https://www.geosci-model-dev.net/13/1373/2020/gmd-13-1373-2020.pdf).\n\nThe Parflow User Manual is available at [Parflow Users\nManual](https://github.com/parflow/parflow/blob/master/parflow-manual.pdf).\nThe manual contains additional documentation on how to use ParFlow and\nsetup input files.  A quick start is included below.\n\n### Citing Parflow\n\nIf you want the DOI for a specific release see:\n[Zendo](https://zenodo.org/search?page=1&size=20&q=parflow&version)\n\nA generic DOI that always links to the most current release :\n[![DOI](https://zenodo.org/badge/DOI/10.5281/zenodo.4816884.svg)](https://doi.org/10.5281/zenodo.4816884)\n\nIf you use ParFlow in a publication and wish to cite a paper reference\nplease use the following that describe model physics:\n\n* Ashby S.F. and R.D. Falgout, Nuclear Science and Engineering 124:145-159, 1996\n* Jones, J.E. and C.S. Woodward, Advances in Water Resources 24:763-774, 2001\n* Kollet, S.J. and R.M. Maxwell, Advances in Water Resources 29:945-958, 2006\n* Maxwell, R.M. Advances in Water Resources 53:109-117, 2013\n\nIf you use ParFlow coupled to CLM in a publication, please also cite\ntwo additional papers that describe the coupled model physics:\n\n* Maxwell, R.M. and N.L. Miller, Journal of Hydrometeorology 6(3):233-247, 2005\n* Kollet, S.J. and R.M. Maxwell, Water Resources Research 44:W02402, 2008\n\n### Additional Parflow resources\n\nThe ParFlow website has additional information on the project:\n- [Parflow Web Site](https://parflow.org/)\n\nYou can join the Parflow Google Group/mailing list to communicate with\nthe Parflow developers and users.  In order to post you will have to\njoin the group, old posts are visible without joining:\n- [Parflow-Users](https://groups.google.com/g/parflow)\n\nA Parflow blog is available with notes from users on how to compile and use Parflow:\n- [Parflow Blog](http://parflow.blogspot.com/)\n\nTo report Parflow bugs, please use the GitHub issue tracker for Parflow:\n- [Parflow Issue Tracker](https://github.com/parflow/parflow/issues)\n\n## Quick Start on Unix/Linux\n\nImportant note for users that have built with Autoconf, the CMake\nconfigure process is one step by default.  Most builds of of ParFlow\nare on MPP architectures or workstations where the login node and\ncompute nodes are same architecture the default build process builds\nboth the ParFlow executable and tools with the same compilers and\nlibraries in one step.  This will hopefully make building easier for\nthe majority of users.  It is still possible to build the two\ncomponents separately; see instruction below for building pftools and\npfsimulator separately.\n\nCMake supports builds for several operating systems and IDE tools\n(like Visual Studio on Windows and XCode on MacOS).  The ParFlow team\nhas not tested building on platforms other than Linux; there will\nlikely be some issues on other platforms.  The ParFlow team welcomes\nbug reports and patches if you attempt other builds.\n\n### Step 1: Setup\n\nDecide where to install ParFlow and associated libraries.\n\nSet the environment variable `PARFLOW_DIR` to the chosen location:\n\nFor bash:\n\n```shell\n   export PARFLOW_DIR=/home/snoopy/parflow\n```   \n\nFor csh and tcsh:\n\n```shell\n   setenv PARFLOW_DIR /home/snoopy/parflow\n```\n\n### Step 2: Extract the Source\n\nExtract the source files from the compressed tar file.\n\nObtain the release from the ParFlow GitHub web site:\n\nhttps://github.com/parflow/parflow/releases\n\nand extract the release.  Here we assume you are building in new\nsubdirectory in your home directory:\n\n```shell\n   mkdir ~/parflow \n   cd ~/parflow \n   tar -xvf ../parflow.tar.gz\n```\n\nNote the ParFlow tar file will be have a different name based on the\nversion number.\n\nIf you are not using GNU tar or have a very old version GNU tar you\nwill need to uncompress the file first:\n\n```shell\n   mkdir ~/parflow \n   cd ~/parflow \n   gunzip ../parflow.tar.gz\n   tar -xvf ../parflow.tar\n```\n\n### Step 3: Running CMake to configure ParFlow\n\nCMake is a utility that sets up makefiles for building ParFlow.  CMake\nallows setting of compiler to use and other options.  First create a\ndirectory for the build.  It is generally recommend to build outside\nof the source directory to make it keep things clean.  For example,\nrestarting a failed build with a separate build directory simply\ninvolves removing the build directory.\n\n#### Building with the ccmake GUI\n\nYou can control build options for ParFlow using the ccmake GUI.\n\n```shell\n   mkdir build\n   cd build\n   ccmake ../parflow \n```\nAt a minimum, you will want to set the CMAKE_INSTALL_PREFIX value to the same thing\nas PARFLOW_DIR was set to above.  Other variables should be set as desired.\n\nAfter setting a variable 'c' will configure `ParFlow.  When you are\ncompletely done setting configuration options, use 'g' to generate the\nconfiguration and exit ccmake.\n\nIf you are new to CMake, the creators of CMake provide some additional ccmake usage notes here:\n\nhttps://cmake.org/runningcmake/\n\n#### Building with the cmake command line\n\nCMake may also be configured from the command line using the cmake\ncommand. Instructions to build with different accelerator backends are found from the following documents: [CUDA, KOKKOS](README-GPU.md), [OpenMP](README-OPENMP.md). The default will configure a sequential version of ParFlow\nusing MPI libraries.  CLM is being enabled.\n\n```shell\n   mkdir build\n   cd build\n   cmake ../parflow \\\n   \t -DCMAKE_INSTALL_PREFIX=${PARFLOW_DIR} \\\n   \t -DPARFLOW_HAVE_CLM=ON\n```\n\nIf TCL is not installed in the standard locations (/usr or /usr/local)\nyou need to specify the path to the tclsh location:\n\n```shell\n\t-DTCL_TCLSH=${PARFLOW_TCL_DIR}/bin/tclsh8.6\n```\n\nBuilding a parallel version of ParFlow requires the communications\nlayer to use must be set.  The most common option will be MPI.  Here\nis a minimal example of an MPI build with CLM:\n\n```shell\n   mkdir build\n   cd build\n   cmake ../parflow \\\n      \t -DCMAKE_INSTALL_PREFIX=${PARFLOW_DIR} \\\n   \t -DPARFLOW_HAVE_CLM=ON \\\n\t -DPARFLOW_AMPS_LAYER=mpi1\n```\n\nHere is a more complex example where location of various external\npackages are being specified and some features are being enabled:\n\n```shell\n   mkdir build\n   cd build\n   cmake ../parflow \\\n        -DPARFLOW_AMPS_LAYER=mpi1 \\\n\t-DHYPRE_ROOT=${PARFLOW_HYPRE_DIR} \\\n\t-DHDF5_ROOT=${PARFLOW_HDF5_DIR} \\\n\t-DSILO_ROOT=${PARFLOW_SILO_DIR} \\\n\t-DCMAKE_BUILD_TYPE=Debug \\\n\t-DPARFLOW_ENABLE_TIMING=TRUE \\\n\t-DPARFLOW_HAVE_CLM=ON \\\n\t-DCMAKE_INSTALL_PREFIX=${INSTALL_DIR}\n```\n\n### Step 4: Building and installing\n\nOnce CMake has configured and created a set of Makefiles; building is\neasy:\n\n```shell\n   cd build\n   make \n   make install\n```\n\n### Step 5: Running a sample problem\n\nIf all went well a sample ParFlow problem can be run using:\n\n```shell\n   cd parflow/test\n   tclsh default_single.tcl 1 1 1\n```\n\nNote that the environment variable `PAFLOW_DIR` must be set for this\nto work and it assumes tclsh is in your path.  Make sure to use the\nsame TCL shell as was used in the cmake configure.\n\nSome parallel machines do not allow launching a parallel executable\nfrom the login node; you may need to run this command in a batch file\nor by starting a parallel interactive session.\n\n## Building documentation\n\n### User Manual\n\nA version of the user manual is available at github : [Parflow Users Manual](https://github.com/parflow/parflow/blob/master/parflow-manual.pdf)\n\nThe user manual for Parflow may be built as part of the build when\nLatex is available on the system. Adding the\n-DPARFLOW_ENABLE_LATEX=TRUE option to the CMake configure will enable\nbuilding of the documentation.\n\n```shell\n   mkdir build\n   cd build\n   cmake ../parflow \\\n        <other cmake options> \\\n\t-DPARFLOW_ENABLE_LATEX=TRUE \\\n\t-DCMAKE_INSTALL_PREFIX=${INSTALL_DIR}\n```\n\nWhen make is run the documenation will be built and installed in\n${INSTALL_DIR}/docs/user_manual.pdf.\n\n### Code documentation\n\nParflow is moving to using Doxygen for code documenation.  The documentation is currently very sparse.\n\nAdding the -DPARFLOW_ENABLE_DOXYGEN=TRUE option to the CMake configure\nwill enable building of the code documentation.  After CMake has been\nrun the Doxygen code documenation is built with:\n\n```shell\n   cd build\n   make doxygen\n```\n\nHTML pages are generated in the build/docs/doxygen/html directory.\n\n### ParFlow keys documentation\n\n```shell\n   cmake \\\n      -S ./parflow \\\n      -B ./build-docker \\\n      -D BUILD_TESTING=OFF \\\n      -D PARFLOW_ENABLE_TOOLS=OFF \\\n      -D PARFLOW_ENABLE_SIMULATOR=OFF \\\n      -D PARFLOW_ENABLE_KEYS_DOC=ON \\\n      -D PARFLOW_ENABLE_PYTHON=ON \\\n      -D PARFLOW_PYTHON_VIRTUAL_ENV=ON\n\n    cd ./build-docker && make ParFlowKeyDoc\n\n    open ./build-docker/docs/pf-keys/build-site/index.html\n```\t\n\n## Configure options\n\nA number of packages are optional for building ParFlow.  The optional\npackages are enabled by PARFLOW_ENABLE_<package> value to be `TRUE` or\nsetting the <package>_ROOT=<directory> value.  If a package is enabled\nwith the using an ENABLE flag CMake will attempt to find the package\nin standard locations.  Explicitly setting the location using the ROOT\nvariable for a package automatically enables it, you don't need to\nspecify both values.\n\nHere are some common packages:\n\n- __SIMULATOR__: The simulator is actually the core of ParFlow as it represent the simulation code.\n- __DOCKER__: This provide helpers for building docker images with ParFlow enable in them.\n- __DOXYGEN__: Doxygen and building of code documentation (C/Fortran).\n- __ETRACE__: builds ParFlow with etrace\n- __HDF5__: builds ParFlow with HDF5 which is required for the _NETCDF_ file format.\n- __HYPRE__: builds ParFlow with Hypre\n- __KEYS_DOC__: builds documentation (rst files) from key definitions.\n- __LATEX__: enables LaTEX and building of documentation (Manual PDF)\n- __NETCDF__: builds ParFlow with NetCDF. (If ON, HDF5 is required)\n- __PROFILING__: This allow to enable extra code execution that would enable code profiling.\n- __TIMING__: enables timing of key Parflow functions; may slow down performance\n- __TOOLS__: enables building of the Parflow tools (TCL version)\n- __VALGRIND__: builds ParFlow with Valgrind support\n- __PYTHON__: This is to enable you to build the Python version of __pftools__.\n- __SILO__: builds ParFlow with Silo.\n- __SLURM__: builds ParFlow with SLURM support (SLURM is queuing system on HPC).\n- __SUNDIALS__: builds ParFlow with SUNDIALS\n- __SZLIB__: builds ParFlow with SZlib compression library\n- __ZLIB__: builds ParFlow with Zlib compression library\n\n### How to specify the launcher command used to run MPI applications\n\nThere are multiple ways to run MPI applications such as mpiexec,\nmpirun, srun, and aprun.  The command used is dependent on the job\nsubmission system used.  By default CMake will attempt to determine an\nappropriate tool; a process that does not always yield the correct result.\n\nThere are several ways to modify the CMake guess on how applications\nshould be run.  At configure time you may overwride the MPI launcher\nusing:\n\n```shell \n   -DMPIEXEC=\"<launcher-name>\"\n   -DMPIEXEC_NUMPROC_FLAG=\"<flag used to set number of tasks>\"\n```\n\nAn example for mpiexec is -DMPIEXEC=\"mpiexec\" -DMPIEXEC_NUMPROC_FLAG=\"-n\".\n\nThe ParFlow script to run MPI applications will also include options\nspecified in the environment variable PARFLOW_MPIEXEC_EXTRA_FLAGS on\nthe MPI execution command line.  For example when running with OpenMPI\non a single workstation the following will enable running more MPI\ntasks than cores and disable the busy loop waiting to improve\nperformance:\n\n```shell\n   export PARFLOW_MPIEXEC_EXTRA_FLAGS=\"--mca mpi_yield_when_idle 1 --oversubscribe\"\n```\n\nLast the TCL script can explicity set the command to invoke for\nrunning ParFlow.  This is done by setting the Process.Command key in\nthe input database.  For example to use the mpiexec command and\ncontrol the cpu set used the following command string can be used:\n\n```shell\n   pfset Process.Command \"mpiexec -cpu-set 1 -n %d parflow %s\"\n```\n\nThe '%d' will be replaced with the number of processes (computed using\nthe Process.Topology values : P * Q * R) and the '%s' will be replaced\nby the name supplied to the pfrun command for the input database name.\nThe following shows how the default_single.tcl script could be\nmodified to use the custom command string:\n\n```shell\n   pfset Process.Command \"mpiexec -cpu-set 1 -n %d parflow %s\"\n   pfrun default_single\n   pfundist default_single\n```\n## Building simulator and tools support separately\n\nThis section is for advanced users runing on heterogenous HPC architectures.\n\nParFlow is composed of two main components that maybe configured and\nbuilt separately.  Some HPC platforms are heterogeneous with the login\nnode being different than the compute nodes.  The ParFlow system has\nan executable for the simulator which needs to run on the compute\nnodes and a set of TCL libraries used for problem setup that can be\nrun on the login node for problem setup.\n\nThe CMake variables PARFLOW_ENABLE_SIMULATOR and PARFLOW_ENABLE_TOOLS\ncontrol which component is configured.  By default both are `TRUE`.  To\nbuild separately use two build directories and run cmake in each to\nbuild the simulator and tools components separately. By specifying\ndifferent compilers and options for each, one can target different\narchitectures for each component.\n\n# Using Docker\n\nParFlow includes a Docker file for configuring a Docker image for\nrunning ParFlow.\n\n## Pre-built Docker Image\n\nA Docker image for ParFlow is available on Docker hub.  See the\nfollowing section for how to run the Docker image.  The Docker\nlatest image is automatically downloaded by Docker when run.\n\n## Running ParFlow with Docker\n\nThe https://github.com/parflow/docker repository contains an example\nsetup for running ParFlow in a Docker instance.  See the README.md\nfile in this repository for more information.\n\n## Building the Docker image\n\nIf you want to build a Docker image, the build script in the bin\ndirectory will build an image using the latest ParFlow source in the\nmaster branch.  If you want to build a different version of ParFlow\nyou will need to modify the 'Dockerfile' file.\n\n### Unix/Linux/MacOS\n\n```shell\n./bin/docker-build.sh\n```\n\n### Windows\n\n```PowerShell\n.\\bin\\docker-build.bat\n```\n\n## Building the Docker image with CMake (expirmental)\n\nRather than building ParFlow on your computer, you can use the build\nsystem to create a container and build ParFlow in it.\n\n```shell\ncmake \\\n   -S ./parflow \\\n   -B ./build-docker \\\n   -D BUILD_TESTING=OFF \\\n   -D PARFLOW_ENABLE_TOOLS=OFF \\\n   -D PARFLOW_ENABLE_SIMULATOR=OFF \\\n   -D PARFLOW_ENABLE_DOCKER=ON\n\ncd ./build-docker && make DockerBuildRuntime\n```\n\nFor more information look into our [Docker Readme](./docker/README.md)\n\n\n## Release\n\nCopyright (c) 1995-2021, Lawrence Livermore National Security LLC. \n\nProduced at the Lawrence Livermore National Laboratory. \n\nWritten by the Parflow Team (see the CONTRIBUTORS file)\n\nCODE-OCEC-08-103. All rights reserved.\n\nParflow is released under the GNU General Public License version 2.1\n\nFor details and restrictions, please read the LICENSE.txt file.\n- [LICENSE](./LICENSE.txt)\n",
  "permissions": {
    "read": true,
    "write": false,
    "admin": false
  },
  "media_types": [
    "application/vnd.docker.container.image.v1+json"
  ],
  "content_types": [
    "image"
  ]
}