{
  "user": "pioardi",
  "name": "ring-election",
  "namespace": "pioardi",
  "repository_type": "image",
  "status": 1,
  "status_description": "active",
  "description": "Leader and followers algorithm for distributed systems. ",
  "is_private": false,
  "is_automated": false,
  "can_edit": false,
  "star_count": 0,
  "pull_count": 428,
  "last_updated": "2021-03-30T06:48:18.812183Z",
  "date_registered": "2019-04-05T10:20:19.300865Z",
  "collaborator_count": 1,
  "affiliation": null,
  "hub_user": "pioardi",
  "has_starred": false,
  "full_description": "# Ring election :sparkles:  :dizzy:\n\n<strong>Is your dream to build a service like cassandra,kafka,zipkin,jaeger,redis,etc...? You are in the right place , join ring-election project !!! </strong> <br>\n\n<div align=\"left\">\n   <img src=\"doc/logo.png\" width=\"300\" height=\"250\"/>\n</div>\n\n[![Coverage Status](https://coveralls.io/repos/github/pioardi/ring-election/badge.svg?branch=master)](https://coveralls.io/github/pioardi/ring-election?branch=master)\n[![Actions Status](https://github.com/pioardi/ring-election/workflows/Node%20CI/badge.svg)](https://github.com/pioardi/ring-election/actions)\n[![Actions Status](https://flat.badgen.net/dependabot/dependabot/dependabot-core/?icon=dependabot)](https://flat.badgen.net/dependabot/dependabot/dependabot-core/?icon=dependabot)\n[![Codacy Badge](https://api.codacy.com/project/badge/Grade/9eaceda32d104341879e3ece48595d1b)](https://www.codacy.com/app/alessandroardizio94/ring-election?utm_source=github.com&amp;utm_medium=referral&amp;utm_content=pioardi/ring-election&amp;utm_campaign=Badge_Grade)\n<a href=\"https://badge.fury.io/js/ring-election\"><img src=\"https://badge.fury.io/js/ring-election.svg\" alt=\"npm version\" height=\"18\"></a>\n[![Gitter chat](https://badges.gitter.im/gitterHQ/gitter.png)](https://gitter.im/ring-election)<br>\n[![JavaScript Style Guide](https://cdn.rawgit.com/standard/standard/master/badge.svg)](https://github.com/standard/standard)\n\n<h2>Contents </h2>\n<h3 align=\"center\">\n  <a href=\"#gs\">Getting started</a>\n  <span> · </span>\n  <a href=\"#overview\">Overview</a>\n  <span> · </span>\n  <a href=\"#usecases\">Use cases</a>\n  <span> · </span>\n  <a href=\"#config\">Config</a>\n  <span> · </span>\n  <a href=\"#config\">Config</a>\n  <span> · </span>\n  <a href=\"#monitoring\">Monitoring</a>\n  <span> · </span>\n  <a href=\"#hld\">High level design</a>\n  <span> · </span>\n  <a href=\"#contribute\">Contribute</a>\n  <span> · </span>\n  <a href=\"#versioning\">Versioning</a>\n  <span> · </span>\n  <a href=\"#license\">License</a>\n</h3>\n\n<strong>What the ring-election driver offers you ?</strong><br>\n\n- A default partitioner that for an object returns the partition to which it is assigned.<br>\n- Mechanism of leader election<br>\n- Failure detection between nodes.<br>\n- Assignment and rebalancing of partitions between nodes<br>\n- Automatic re-election of the leader<br>\n- Listen for new assigned/revoked partitions <br>\n\n<strong>What problems can you solve with this driver ?</strong><br>\n- Scalability<br>\n- High availability<br>\n- Concurrency between nodes in a cluster<br>\n- Automatic failover<br>\n\n<h2 id=\"gs\">Getting started</h2>\n<strong> Install with npm ! </strong>\n\n```bash\n  npm i ring-election --save\n```\n\n<strong>Example</strong>\nYou do not need to choose a node as leader , just indicate all your nodes and start everyone as follower.<br>\nThe first node to start will be the leader , the leader do not have assigned partitions so try to start 2 instances after your integration<br>\n\n<strong>How to integrate</strong><br>\n\n```javascript\nconst ring = require('ring-election')\nlet follower = ring.follower\nconst {\n  BECOME_LEADER,\n  PARTITIONS_ASSIGNED,\n  PARTITIONS_REVOKED\n} = ring.constants;\nfollower.createClient()\n// if you want REST API as monitoring , invoke startMonitoring\nfollower.startMonitoring()\n// to get ring info\nring.follower.ring()\n// to get assigned partitions\nlet assignedPartitions = ring.follower.partitions()\n// now let me assume that a follower will create some data\n// and you want to partition this data\nlet partition = ring.follower.defaultPartitioner('KEY')\n// save your data including the partition on a storage\n// you will be the only one in the cluster working on the partitions assigned to you.\n\n// If you want to handle partitions assigned\n// ( use other constants to listen other events ) you can do in this way.\nring.follower.eventListener.on(PARTITIONS_ASSIGNED , (newAssignedPartitions) => {\n   // DO STUFF\n})\n```\n\n\n<strong>Start your development cluster</strong><br>\n\nYou will find some helpful files into the dev folder , please see the following video <br>\n\n[Watch the video](https://www.youtube.com/embed/5keF_OVXGLM?controls=0)\n\n\nCheck assigned partitions to local:9000/status or change the port to 9001/9002 <br>\n\n\nTry to stop and restart processes and observe the behaviour.<br>\n<h2 id=\"overview\">Overview and rationale</h2>\nIn modern systems it is often needed to distribute the application load to make the system scalable so that every data is processed by a single instance. <br>\nRing-election is a driver that implements a distributed algorithm that assigns to each node the partitions to work on .\nIn a simple use case each node can obtain data that are part of the partitions of which it is owner and work on them. <br>\nThe algorithm will assign to each node one or more partitions to work with.<br>\nA node will be removed if it does not send an heart beat for a while , this process is called heart check.<br>\nEach node in the ring will have an ID and a priority , if the leader node will die the node with lower priority will be elect as leader. <br>\nIf a node is added or removed from the cluster, the allocated partitions will be rebalanced.\n\n\n   \n<h2 id=\"usecases\">Use cases</h2>\n\nThis section introduce you on what you can build on top of ring-election using it as driver/library. <br>\n\n<strong>Distributed Scheduler</strong><br>\nEach Scheduler instance will work on the assigned partitions .<br>\nA real implementation of this use case is available here https://github.com/pioardi/hurricane-scheduler <br>\n![Dynamic diagram](doc/Ring-Scheduler-Use-Case.jpg)\n\n\n<strong>Distributed lock</strong><br>\n<strong>Distributed cache</strong><br>\n<strong>Distributed computing</strong><br>   \n\n\n\n<strong> Try it out ! </strong>\n```bash\n   docker image build -t ring-election .\n   docker-compose up\n```\n\n<h2 id=\"config\"> Configuration </h2>\n <strong>PORT</strong> : The leader will start to listen on this port , default is 3000 <br>\n  <strong>TIME_TO_RECONNECT</strong>: The time to wait for a follower when he has to connect to a new leader in ms , default is 3000ms <br>\n  <strong>HEART_BEAT_FREQUENCY</strong>: The frequency with which a heart beat is performed by a follower , default is 1000ms <br>\n  <strong>HEART_BEAT_CHECK_FREQUENCY</strong>: The frequency with which an heart check is performed by a leader , default is 3000ms <br>\n  <strong>LOG_LEVEL</strong>: Follow this https://www.npmjs.com/package/winston#logging-levels , default is info.<br>\n  <strong>NUM_PARTITIONS</strong>: Number of partitions to distribute across the cluster , default is 10. <br>\n  <strong>SEED_NODES</strong> : hostnames and ports of leader node comma separated, Ex . hostname1:port,hostname2:port <br>\n  <strong>MONITORING_PORT</strong> : port to expose rest service for monitoring , default is 9000<br>\n\n<h2 id=\"monitoring\"> Monitoring API </h2>\nTo monitor your cluster contact any node on the path /status (HTTP verb :  GET) or contact a follower node on /partitions (HTTP verb :  GET). <br>\n\n<h2 id=\"hld\">High Level Diagram</h2>\n\nSee <a href=\"https://github.com/pioardi/ring-election/wiki/How-work-under-the-hood\">wiki</a> page.\n\n<h2 id=\"contribute\">How to contribute</h2>\n\nSee contributing guidelines [CONTRIBUTING](./CONTRIBUTING.md)\n\n\n<h2 id=\"versioning\">Versioning</h2>\nWe use (http://semver.org/) for versioning.\n\n<h2 id=\"license\">License</h2>\nThis project is licensed under the MIT License - see the [LICENSE](./LICENSE) file for details\n",
  "permissions": {
    "read": true,
    "write": false,
    "admin": false
  },
  "media_types": [
    "application/vnd.docker.container.image.v1+json"
  ],
  "content_types": [
    "image"
  ]
}