{
  "user": "moul",
  "name": "depviz",
  "namespace": "moul",
  "repository_type": "image",
  "status": 1,
  "status_description": "active",
  "description": "dependency visualizer (a.k.a., \"auto-roadmap\")",
  "is_private": false,
  "is_automated": true,
  "can_edit": false,
  "star_count": 1,
  "pull_count": 6198840,
  "last_updated": "2022-10-13T09:27:16.877001Z",
  "date_registered": "2018-09-05T09:31:28.06937Z",
  "collaborator_count": 0,
  "affiliation": null,
  "hub_user": "moul",
  "has_starred": false,
  "full_description": "# Depviz\n\n<h1 align=\"center\">\n  <img src=\"https://raw.githubusercontent.com/moul/depviz/master/assets/depviz.svg?sanitize=true\" alt=\"Depviz\" title=\"Depviz\" height=\"200px\">\n  <br>\n</h1>\n\n<h3 align=\"center\">👓 Issue dependency visualizer, a.k.a. \"auto-roadmap\".</h3>\n\n[![GoDoc](https://img.shields.io/static/v1?label=godoc&message=reference&color=blue)](https://pkg.go.dev/moul.io/depviz/v3)\n[![License](https://img.shields.io/badge/license-Apache--2.0%20%2F%20MIT-%2397ca00.svg)](https://github.com/moul/depviz/blob/master/COPYRIGHT)\n[![GitHub release](https://img.shields.io/github/release/moul/depviz.svg)](https://github.com/moul/depviz/releases)\n[![Go Report Card](https://goreportcard.com/badge/moul.io/depviz)](https://goreportcard.com/report/moul.io/depviz)\n[![CodeFactor](https://www.codefactor.io/repository/github/moul/depviz/badge)](https://www.codefactor.io/repository/github/moul/depviz)\n[![Docker Metrics](https://images.microbadger.com/badges/image/moul/depviz.svg)](https://microbadger.com/images/moul/depviz)\n[![GolangCI](https://golangci.com/badges/github.com/moul/depviz.svg)](https://golangci.com/r/github.com/moul/depviz)\n[![Made by Manfred Touron](https://img.shields.io/badge/made%20by-Manfred%20Touron-blue.svg?style=flat)](https://manfred.life/)\n\n<!-- [![codecov](https://codecov.io/gh/moul/depviz/branch/master/graph/badge.svg)](https://codecov.io/gh/moul/depviz) -->\n\n## Introduction\n\ndependency visualizer (auto roadmap)\n\n`depviz` aggregates **tasks** from multiple projects and generates visual representations (graphs) of the dependencies.\n\n_inspired by this discussion: [jbenet/random-ideas#37](https://github.com/jbenet/random-ideas/issues/37)_\n\n## Philosophy\n\nThe ultimate goal of this tool is to allow the tech and the non-tech to collaborate seamlessly.\n\nOftentimes, there are “non-technical project managers” that love tools like Jira and try to define everything, including the delay required.\nDevelopers, however, mostly hate Jira-like tools and prefer to focus on small tasks with an easy-to-use interface, like Trello, GitHub issues, GitLab issues.\n\nThe idea of depviz is to:\n\n* link those different tools (aggregate the different sources and find the relationships: find that this exact “Jira user story” belongs to those 5 technical issues on github\n* create various visual ways of displaying this information. Then, we can have a company that has some non-technical project manager only focusing on user stories and their priorities, and devs that focus on tasks and estimate the tasks by themselves (everyone doing what they are good at)\n* in general, help everyone have the overall vision more clear\n\n## Target\n\n* Graphs are “fun” but not very useful yet, a good dependency tool would be like graphviz. The current depviz version makes the graph in something that is more “weight-based”, because nodes will be grouped to make the graph fit the screen. Graphviz is not focused on making things beautiful, but focused on being 100% clear on the dependency. We need a good graph driver that supports this kind of graph.\n* Having options for multiple layouts/graphs.\n* Implementing the [PERT method](https://en.wikipedia.org/wiki/Program_evaluation_and_review_technique) and adding more fields in depviz: due date, difficulty, etc, in order to create graphs for “finding the shortest path”, for example.\n* Improving the UI to improve collaboration (sharing a URL, etc).\n\n## Demo\n\nhttps://depviz-demo.moul.io/\n\n_Limited to the following repos: [moul/depviz](https://github.com/moul/depviz), [moul/depviz-test](https://github.com/moul/depviz-test), [moul-bot/depviz-test](https://github.com/moul-bot/depviz-test)._\n\n## Supported providers\n\n_Depviz_ aggregates the entities of multiple providers into 3 generic ones.\n\n---\n\nSupported providers:\n\n* GitHub\n  * Task: Issue, Pull Request, Milestone\n  * Owner: TODO\n  * Topic: TODO\n* GitLab: _(planned)_\n* Jira _(planned)_\n* Trello _(planned)_\n\nTODO: detailed mapping table\n\n## Under the hood\n\n### Depviz entities\n\nThere are 3 entities:\n\n* A `Task` that have a real life cycle: opened->closed\n* An `Owner` which only contains things\n* A `Topic` which allows categorizing/tagging other things\n\n**Examples**:\n\n* a `Milestone` is a `Depviz Task`, because even if it contains other tasks, it also has a well defined lifecycle: to be closed when every children tasks are finished.\n* a `Repository` is a `Depviz Owner` because even if you can archive a repository, it's not the normal lifecycle, and will most of the time be unrelated with the amount of tasks done\n\nA `Task` can be considered as something directly actionable, or indirectly/automatically closable based on a business rule.\n\n**More info here: [./api/dvmodel.proto](./api/dvmodel.proto)**\n\n#### Task\n\nshould have:\n\n* a unique `ID`: canonical URL\n* a `LocalID`: human-readable identifier\n* a `Title`: _not necessarily unique_\n* a `Kind`: `Issue`, `Pull Request`, `Milestone`, `Epic`, `Story`, `Card`\n* a `State`: `opened`, `in progress`, or `closed`\n* an `Owner`: _see below_\n* a `Driver`: `GitHub`, `GitLab`, `Jira`, `Trello`\n\nmay have:\n\n* other relationships: `Author`, `Milestone`, `Assignees`, `Reviewers`, `Label`, `Dependencies`, `Dependents`, `Related`, `Parts`, `Parents`\n* other metadata: `Description`\n* other states: `Locked`\n* timestamps: `Created`, `Updated`, `Due`, `Completed`\n* metrics: `NumDownvotes`, `NumUpvotes`, `NumComments`\n\n#### Owner\n\nshould have:\n\n* a unique `ID`: canonical URL\n* a `LocalID`: human-readable identifier\n* a `Title`: _not necessarily unique_\n* a `Kind`: `User`, `Organization`, `Team`, `Repo`, `Provider`\n* a `Driver`: `GitHub`, `GitLab`, `Jira`, `Trello`\n\nmay have:\n\n* an `Owner`\n* other states: `Fork`\n* other metadata: `Homepage`, `Description`, `Avatar`, `Fullname`, `Shortname`\n* timestamps: `Created`, `Updated`\n\n#### Topic\n\nshould have:\n\n* a unique `ID`: canonical URL\n* a `LocalID`: human-readable identifier\n* a `Title`: _not necessarily unique_\n* a `Kind`: `Label`\n* a `Driver`: `GitHub`, `GitLab`, `Jira`, `Trello`\n\nmay have:\n\n* an `Owner`: _see above_\n* other metadata: `Color`, `Description`\n\n## Install\n\n### Download a release\n\nhttps://github.com/moul/depviz/releases\n\n### Install With Golang\n\n```bash\ngo get moul.io/depviz/cmd/depviz/v3\n```\n\n### Using brew\n\n```bash\nbrew install moul/moul/depviz\n```\n\n## Usage\n\nTODO\n\n## License\n\n© 2018-2021 [Manfred Touron](https://manfred.life)\n\nLicensed under the [Apache License, Version 2.0](https://www.apache.org/licenses/LICENSE-2.0) ([`LICENSE-APACHE`](LICENSE-APACHE)) or the [MIT license](https://opensource.org/licenses/MIT) ([`LICENSE-MIT`](LICENSE-MIT)), at your option. See the [`COPYRIGHT`](COPYRIGHT) file for more details.\n\n`SPDX-License-Identifier: (Apache-2.0 OR MIT)`\n",
  "permissions": {
    "read": true,
    "write": false,
    "admin": false
  },
  "media_types": [
    "application/vnd.docker.container.image.v1+json"
  ],
  "content_types": [
    "image"
  ]
}