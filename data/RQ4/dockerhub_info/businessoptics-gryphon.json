{
  "user": "businessoptics",
  "name": "gryphon",
  "namespace": "businessoptics",
  "repository_type": "image",
  "status": 1,
  "status_description": "active",
  "description": "An integrated overview tool for AWS ECS clusters.",
  "is_private": false,
  "is_automated": true,
  "can_edit": false,
  "star_count": 2,
  "pull_count": 8577,
  "last_updated": "2019-02-18T11:31:16.90146Z",
  "date_registered": "2016-07-24T12:06:25.105363Z",
  "collaborator_count": 0,
  "affiliation": null,
  "hub_user": "businessoptics",
  "has_starred": false,
  "full_description": "Gryphon Cluster Viewer\n======================\n\nAmazon EC2 Container Service Interface\n\n<img src=\"/mascot.png?raw=true\" width=\"500\">\n\nA simply designed web-based application to allow users to view a clear interface for the AWS console showing information such as tasks running on each instance as well as the commands to ssh into the instance or run the docker container for debugging. It is a very thin layer over the AWS API's to make common tasks easier and give a much better general overview. \n\nFeatures include:\n\n* Easily see your cluster state, including all the instances and tasks\n* See resource allocation\n* See autoscaling terminations\n* Shortcuts to different AWS interfaces and other useful quick links.\n* Quickly ssh into you instances\n* Exec directly into a running container in a task. A single command that ssh's finds the container ID and execs into it.\n* Manually run any task definition. Gives the terminal commands to run a container exactly as ECS would to make debugging easier.\n\n# Running Instructions\n\nYou can run it directly from dockerhub with:\n\n```\ndocker run \\\n  -e AWS_ACCESS_KEY_ID=<AWS_ACCESS_KEY_ID> \\\n  -e AWS_DEFAULT_REGION=<AWS_DEFAULT_REGION> \\\n  -e AWS_SECRET_ACCESS_KEY=<AWS_SECRET_ACCESS_KEY> \\\n  -p 3000:3000 \\\n  --name=gryphon \\\n  businessoptics/gryphon\n```\n\nGryphon uses boto to communicate with AWS so if you run it on ECS with a task role it can use that task role's AWS credentials automatically. The task role, or the credentials require at least the rights of the below IAM policy.\n\n```json\n{\n    \"Version\": \"<VERSION-DATE>\",\n    \"Statement\": [\n        {\n            \"Sid\": \"<StmtXXXXXX>\",\n            \"Effect\": \"Allow\",\n            \"Action\": [\n                \"ec2:Describe*\",\n                \"ecs:List*\",\n                \"ecs:Describe*\",\n                \"ec2:List*\",\n                \"autoscaling:Describe*\",\n                \"autoscaling:List*\",\n                \"ecr:GetAuthorizationToken\"\n            ],\n            \"Resource\": [\n                \"*\"\n            ]\n        }\n    ]\n}\n```\n\n# Command Line Interface\n\nYou can get the command to exec into a container in your shell by running:\n \n    curl 127.0.0.1/cli/exec/CLUSTER_NAME/CONTAINER_NAME\n\nTo immediately run this command without copy/pasting, wrap it in `bash -c \"$()\"`, i.e:\n\n    bash -c \"$(curl 127.0.0.1/cli/exec/CLUSTER_NAME/CONTAINER_NAME)\"\n\n**Credits**\n\nThanks to the wonderful Lauren Dawson aka Iguanamouth for the base image of the mascot. Please check out her work [here](http://lizardshuffle.tumblr.com/).\n",
  "permissions": {
    "read": true,
    "write": false,
    "admin": false
  },
  "media_types": [
    "application/vnd.docker.container.image.v1+json"
  ],
  "content_types": [
    "image"
  ]
}