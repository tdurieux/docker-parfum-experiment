{
  "user": "v55448330",
  "name": "lazy-balancer",
  "namespace": "v55448330",
  "repository_type": "image",
  "status": 1,
  "status_description": "active",
  "description": "Nginx/Tengine Balancer WebUI",
  "is_private": false,
  "is_automated": false,
  "can_edit": false,
  "star_count": 4,
  "pull_count": 12545,
  "last_updated": "2021-06-18T07:52:25.338365Z",
  "date_registered": "2019-11-05T04:27:47.154579Z",
  "collaborator_count": 0,
  "affiliation": null,
  "hub_user": "v55448330",
  "has_starred": false,
  "full_description": "# Lazy-Balancer\n\n\n项目起源于好哥们需要一个 7 层负载均衡器，无奈商业负载均衡器成本高昂，操作复杂。又没有特别喜欢（好看，好用）的开源产品，作为一名大 Ops 怎么能没有办法？正好最近在看 Django 框架，尝试自己给 Nginx 画皮，项目诞生！非专业开发，代码凑合看吧。\n\n> * 项目基于 [Django](https://www.djangoproject.com/) + [AdminLTE](https://www.almsaeedstudio.com/) 构建，在 Ubuntu 18.04 上测试通过；为了保证良好的兼容性，请使用 Chrome 浏览器。\n> * 为了后续扩展方便，请大家使用 [Tengine](http://tengine.taobao.org/) 替代 Nginx 服务\n\n## 项目地址\n- GITHUB - https://github.com/v55448330/lazy-balancer\n- 码云 - http://git.oschina.net/v55448330/lazy-balancer\n- OSCHINA - http://www.oschina.net/p/nginx-balancer\n\n## 更新（2021-06-16）\n* IPv6 监听支持\n* 更新 Tengine 至 2.3.3\n\n## 更新（2020-01-21）\n* 从该版本开始，将尝试部分功能 API 化，更多 API 文档见 `/api/docs`\n* 尝试将 Python 更新至 Python3\n* 修复 TCP 模式下端口占用检测无效的问题\n\n## 更新（2019-11-22）\n* 新增 TCP 负载均衡支持\n* 新增配置同步功能\n* 支持后端服务器为 HTTPS 协议，当后端为 HTTPS 协议时，HTTP 健康检测将使用发送 SSL Hello 包的方式\n* 支持域名后端，配置为域名后端时禁用节点配置\n* 新增 HTTP/2，Gzip 等配置\n* 增加 Docker 支持\n* 去除原 iptables 防火墙管理功能\n* 当协议为 HTTP/HTTPS 时，允许用户自定义 Server 级别 Nginx 配置\n* 当协议为 HTTP/HTTPS 时，可以在列表页预览后端节点状态\n* 当协议为 HTTP/HTTPS 时，允许用户自定义后端节点域名，当未定义时，转发用户输入的域名\n* 当协议为 HTTPS 时，可以在列表页预览证书过期状态，及获取证书信息\n* 允许后端节点为域名格式\n* 增加 HTTP/80，HTTPS/443 的默认规则，禁止直接 IP 访问（返回444），证书路径在 `/etc/nginx/default.*`，可自行更换\n* 新增允许非标准 HTTP Header 转发（如下划线_）\n* 修复其他 Bug\n\n## 更新\n* 将 Nginx 更换为 Tengine 以提供更灵活的功能支持以及性能提升\n* 新增 HTTP 状态码方式检测后端服务器，默认 TCP 方式\n* 新增 HTTP 状态码方式支持查看后端服务器状态\n* 修复因前方有防火墙导致无法获取后端服务器状态\n* 修复因主机头导致后端服务器探测失败\n* 新增自定义管理员用户\n* 新增配置通过文件备份和还原\n* 新增实时查看访问日志和错误日志\n* 新增实时请求统计\n* 更新 Vagrantfile\n* 修复其他 Bug\n\n## 功能\n* Nginx 可视化配置\n* Nginx 负载均衡（反向代理）配置\n* Nginx 证书支持\n* 系统状态监测\n* 支持 TCP 被动后端节点宕机检测\n* 支持 HTTP 主动后端节点宕机检测\n* 日志实时查询\n* 请求统计\n\n## 运行\n### 容器\n* 编译镜像\n```\ndocker build -t <lazy-balancer>:<v1.3.6beta>\n```\n> 也可以 DockerHub `https://hub.docker.com/r/v55448330/lazy-balancer`\n\n* 启动命令\n```\ndocker run -d --restart=always --net=host --name=lazy_balancer \\\n    -v <db_dir>:/app/lazy_balancer/db \\\n    -v <log_dir>:/var/log/nginx \\\n    <lazy-balancer>:<v1.3.6beta> or v55448330/lazy-balancer:latest\n```\n* 初始化数据库\n```\ndocker exec lazy_balancer python manage.py makemigrations --noinput 2>/dev/null\ndocker exec lazy_balancer python manage.py migrate --run-syncdb\n```\n### 主机\n* 部署\n\n> 部署方式参照 `deploy.sh` 脚本\n\n* 初始化数据库\n```\npython manage.py makemigrations --noinput 2>/dev/null\npython manage.py migrate --run-syncdb \n```\n* 启动服务\n```\nsupervisord -c /app/lazy_balancer/service/supervisord_docker.conf\n\nor\n\nsupervisorctl start webui\nsupervisorctl start nginx\n```\n* 登录系统\n```\nhttp://[IP]:8000/  \n```\n> 首次登陆会要求创建管理员用户，如需修改，可在系统配置中重置管理员用户\n\n## 演示\n![image](readme_img/1.jpg)\n![image](readme_img/2.jpg)\n![image](readme_img/3.jpg)\n![image](readme_img/4.jpg)\n![image](readme_img/5.jpg)\n![image](readme_img/6.jpg)\n![image](readme_img/7.jpg)\n![image](readme_img/8.jpg)\n![image](readme_img/9.jpg)\n![image](readme_img/10.jpg)\n![image](readme_img/11.jpg)\n![image](readme_img/12.jpg)\n![image](readme_img/13.jpg)\n![image](readme_img/14.jpg)\n\n## 授权\n本项目由 [小宝](http://www.ichegg.org) 维护，采用 [GPLv3](http://www.gnu.org/licenses/gpl-3.0.html) 开源协议。欢迎反馈！欢迎贡献代码！\n",
  "permissions": {
    "read": true,
    "write": false,
    "admin": false
  },
  "media_types": [
    "application/vnd.docker.container.image.v1+json"
  ],
  "content_types": [
    "image"
  ]
}