{
  "user": "pyupio",
  "name": "safety",
  "namespace": "pyupio",
  "repository_type": "image",
  "status": 1,
  "status_description": "active",
  "description": "Safety checks your installed dependencies for known security vulnerabilities.",
  "is_private": false,
  "is_automated": false,
  "can_edit": false,
  "star_count": 0,
  "pull_count": 136804,
  "last_updated": "2021-04-28T20:02:34.10396Z",
  "date_registered": "2020-03-19T20:09:28.865747Z",
  "collaborator_count": 0,
  "affiliation": null,
  "hub_user": "pyupio",
  "has_starred": false,
  "full_description": "[![safety](https://raw.githubusercontent.com/pyupio/safety/master/safety.jpg)](https://pyup.io/safety/)\n\n[![PyPi](https://img.shields.io/pypi/v/safety.svg)](https://pypi.python.org/pypi/safety)\n[![Travis](https://img.shields.io/travis/pyupio/safety.svg)](https://travis-ci.org/pyupio/safety)\n[![Updates](https://pyup.io/repos/github/pyupio/safety/shield.svg)](https://pyup.io/repos/github/pyupio/safety/)\n\nSafety checks your installed dependencies for known security vulnerabilities. \n\nBy default it uses the open Python vulnerability database [Safety DB](https://github.com/pyupio/safety-db), \nbut can be upgraded to use pyup.io's [Safety API](https://github.com/pyupio/safety/blob/master/docs/api_key.md) using the `--key` option. \n\n# Installation\n\nInstall `safety` with pip. Keep in mind that we support only Python 3.5 and up.\nLook at *Python 2.7* section at the end of this document.\n\n```bash\npip install safety\n```\n\n# Usage\n\nTo check your currently selected virtual environment for dependencies with known security\n vulnerabilites, run:\n\n```bash\nsafety check\n```\n\nYou should get a report similar to this:\n```bash\n+==============================================================================+\n|                                                                              |\n|                               /$$$$$$            /$$                         |\n|                              /$$__  $$          | $$                         |\n|           /$$$$$$$  /$$$$$$ | $$  \\__//$$$$$$  /$$$$$$   /$$   /$$           |\n|          /$$_____/ |____  $$| $$$$   /$$__  $$|_  $$_/  | $$  | $$           |\n|         |  $$$$$$   /$$$$$$$| $$_/  | $$$$$$$$  | $$    | $$  | $$           |\n|          \\____  $$ /$$__  $$| $$    | $$_____/  | $$ /$$| $$  | $$           |\n|          /$$$$$$$/|  $$$$$$$| $$    |  $$$$$$$  |  $$$$/|  $$$$$$$           |\n|         |_______/  \\_______/|__/     \\_______/   \\___/   \\____  $$           |\n|                                                          /$$  | $$           |\n|                                                         |  $$$$$$/           |\n|  by pyup.io                                              \\______/            |\n|                                                                              |\n+==============================================================================+\n| REPORT                                                                       |\n+==============================================================================+\n| No known security vulnerabilities found.                                     |\n+==============================================================================+\n```\n\nNow, let's install something insecure:\n\n```bash\npip install insecure-package\n```\n*Yeah, you can really install that.*\n\nRun `safety check` again:\n```bash\n+==============================================================================+\n|                                                                              |\n|                               /$$$$$$            /$$                         |\n|                              /$$__  $$          | $$                         |\n|           /$$$$$$$  /$$$$$$ | $$  \\__//$$$$$$  /$$$$$$   /$$   /$$           |\n|          /$$_____/ |____  $$| $$$$   /$$__  $$|_  $$_/  | $$  | $$           |\n|         |  $$$$$$   /$$$$$$$| $$_/  | $$$$$$$$  | $$    | $$  | $$           |\n|          \\____  $$ /$$__  $$| $$    | $$_____/  | $$ /$$| $$  | $$           |\n|          /$$$$$$$/|  $$$$$$$| $$    |  $$$$$$$  |  $$$$/|  $$$$$$$           |\n|         |_______/  \\_______/|__/     \\_______/   \\___/   \\____  $$           |\n|                                                          /$$  | $$           |\n|                                                         |  $$$$$$/           |\n|  by pyup.io                                              \\______/            |\n|                                                                              |\n+==============================================================================+\n| REPORT                                                                       |\n+==========================+===============+===================+===============+\n| package                  | installed     | affected          | source        |\n+==========================+===============+===================+===============+\n| insecure-package         | 0.1.0         | <0.2.0            | changelog     |\n+==========================+===============+===================+===============+\n```\n\n## Examples\n\n### Read requirement files\nJust like pip, Safety is able to read local requirement files:\n\n```bash\nsafety check -r requirements.txt\n```\n\n### Read from stdin\nSafety is also able to read from stdin with the `--stdin` flag set.\n\nTo check a local requirements file, run:\n```\ncat requirements.txt | safety check --stdin\n```\n\nor the output of `pip freeze`:\n```\npip freeze | safety check --stdin\n```\n\nor to check a single package:\n```\necho \"insecure-package==0.1\" | safety check --stdin\n```\n\n*For more examples, take a look at the [options](#options) section.*\n\n\n### Scan a Python-based Docker image\n\nTo scan a docker image `IMAGE_TAG`, you can run\n\n```console\ndocker run -it --rm ${IMAGE_TAG} \"/bin/bash -c \\\"pip install safety && safety check\\\"\n```\n\n## Using Safety in Docker\n\nSafety can be easily executed as Docker container. It can be used just as\ndescribed in the [examples](#examples) section.\n\n```console\necho \"insecure-package==0.1\" | docker run -i --rm pyupio/safety safety check --stdin\ncat requirements.txt | docker run -i --rm pyupio/safety safety check --stdin\n```\n\n## Using the Safety binaries\n\nThe Safety [binaries](https://github.com/pyupio/safety/releases) provide some\n[extra security](https://pyup.io/posts/patched-vulnerability/).\n\nAfter installation, they can be used just like the regular command line version\nof Safety.\n\n## Using Safety with a CI service\n\nSafety works great in your CI pipeline. It returns a non-zero exit status if it finds a vulnerability. \n\nRun it before or after your tests. If Safety finds something, your tests will fail.\n\n**Travis**\n```yaml\ninstall:\n  - pip install safety\n\nscript:\n  - safety check\n```\n\n**Gitlab CI**\n```yaml\nsafety:\n  script:\n    - pip install safety\n    - safety check\n```\n\n**Tox**\n```ini\n[tox]\nenvlist = py37\n\n[testenv]\ndeps =\n    safety\n    pytest\ncommands =\n    safety check\n    pytest\n```\n\n**Deep GitHub Integration**\n\nIf you are looking for a deep integration with your GitHub repositories: Safety is available as a \npart of [pyup.io](https://pyup.io/), called [Safety CI](https://pyup.io/safety/ci/). Safety CI \nchecks your commits and pull requests for dependencies with known security vulnerabilities \nand displays a status on GitHub.\n\n![Safety CI](https://github.com/pyupio/safety/raw/master/safety_ci.png)\n\n\n# Using Safety in production\n\nSafety is free and open source (MIT Licensed). The underlying open vulnerability database is updated once per month.\n\nTo get access to all vulnerabilites as soon as they are added, you need a [Safety API key](https://github.com/pyupio/safety/blob/master/docs/api_key.md) that comes with a paid [pyup.io](https://pyup.io) account, starting at $99.\n\n## Options\n\n### `--key`\n\n*API Key for pyup.io's vulnerability database. Can be set as `SAFETY_API_KEY` environment variable.*\n\n**Example**\n```bash\nsafety check --key=12345-ABCDEFGH\n```\n\n___\n\n### `--db`\n\n*Path to a directory with a local vulnerability database including `insecure.json` and `insecure_full.json`*\n\n**Example**\n```bash\nsafety check --db=/home/safety-db/data\n```\n\n### `--proxy-host`\n\n*Proxy host IP or DNS*\n\n### `--proxy-port`\n\n*Proxy port number*\n\n### `--proxy-protocol`\n\n*Proxy protocol (https or http)*\n\n___\n\n### `--json`\n\n*Output vulnerabilities in JSON format.*\n\n**Example**\n```bash\nsafety check --json\n```\n```javascript\n[\n    [\n        \"django\",\n        \"<1.2.2\",\n        \"1.2\",\n        \"Cross-site scripting (XSS) vulnerability in Django 1.2.x before 1.2.2 allows remote attackers to inject arbitrary web script or HTML via a csrfmiddlewaretoken (aka csrf_token) cookie.\",\n        \"25701\"\n    ]\n]\n```\n___\n\n### `--full-report`\n\n*Full reports includes a security advisory. It also shows CVSS values for CVEs (requires a premium PyUp subscription).*\n\n**Example**\n```bash\nsafety check --full-report\n```\n\n```\n+==============================================================================+\n|                                                                              |\n|                               /$$$$$$            /$$                         |\n|                              /$$__  $$          | $$                         |\n|           /$$$$$$$  /$$$$$$ | $$  \\__//$$$$$$  /$$$$$$   /$$   /$$           |\n|          /$$_____/ |____  $$| $$$$   /$$__  $$|_  $$_/  | $$  | $$           |\n|         |  $$$$$$   /$$$$$$$| $$_/  | $$$$$$$$  | $$    | $$  | $$           |\n|          \\____  $$ /$$__  $$| $$    | $$_____/  | $$ /$$| $$  | $$           |\n|          /$$$$$$$/|  $$$$$$$| $$    |  $$$$$$$  |  $$$$/|  $$$$$$$           |\n|         |_______/  \\_______/|__/     \\_______/   \\___/   \\____  $$           |\n|                                                          /$$  | $$           |\n|                                                         |  $$$$$$/           |\n|  by pyup.io                                              \\______/            |\n|                                                                              |\n+==============================================================================+\n| REPORT                                                                       |\n+============================+===========+==========================+==========+\n| package                    | installed | affected                 | ID       |\n+============================+===========+==========================+==========+\n| CVSS v2 | BASE SCORE: 6.5 | IMPACT SCORE: 6.4                                |\n+============================+===========+==========================+==========+\n| django                     | 1.2       | <1.2.2                   | 25701    |\n+==============================================================================+\n| Cross-site scripting (XSS) vulnerability in Django 1.2.x before 1.2.2 allows |\n|  remote attackers to inject arbitrary web script or HTML via a csrfmiddlewar |\n| etoken (aka csrf_token) cookie.                                              |\n+==============================================================================+\n```\n___\n\n### `--bare`\n\n*Output vulnerable packages only. Useful in combination with other tools.*\n\n**Example**\n```bash\nsafety check --bare\n```\n\n```\ncryptography django\n```\n___\n\n### `--cache`\n\n*Cache requests to the vulnerability database locally for 2 hours.*\n\n**Example**\n```bash\nsafety check --cache\n```\n___\n\n### `--stdin`\n\n*Read input from stdin.*\n\n**Example**\n```bash\ncat requirements.txt | safety check --stdin\n```\n```bash\npip freeze | safety check --stdin\n```\n```bash\necho \"insecure-package==0.1\" | safety check --stdin\n```\n___\n\n### `--file`, `-r`\n\n*Read input from one (or multiple) requirement files.*\n\n**Example**\n```bash\nsafety check -r requirements.txt\n```\n```bash\nsafety check --file=requirements.txt\n```\n```bash\nsafety check -r req_dev.txt -r req_prod.txt\n```\n___\n\n### `--ignore`, `-i`\n\n*Ignore one (or multiple) vulnerabilities by ID*\n\n**Example**\n```bash\nsafety check -i 1234\n```\n```bash\nsafety check --ignore=1234\n```\n```bash\nsafety check -i 1234 -i 4567 -i 89101\n```\n\n### `--output`, `-o`\n\n*Save the report to a file*\n\n**Example**\n```bash\nsafety check -o insecure_report.txt\n```\n```bash\nsafety check --output --json insecure_report.json\n```\n___\n\n# Review\n\nIf you save the report in JSON format you can review in the report format again.\n\n## Options\n\n### `--file`, `-f` (REQUIRED)\n\n*Read an insecure report.*\n\n**Example**\n```bash\nsafety review -f insecure.json\n```\n```bash\nsafety review --file=insecure.json\n```\n___\n\n### `--full-report`\n\n*Full reports include a security advisory (if available).*\n\n**Example**\n```bash\nsafety review -r insecure.json --full-report\n```\n\n```\n+==============================================================================+\n|                                                                              |\n|                               /$$$$$$            /$$                         |\n|                              /$$__  $$          | $$                         |\n|           /$$$$$$$  /$$$$$$ | $$  \\__//$$$$$$  /$$$$$$   /$$   /$$           |\n|          /$$_____/ |____  $$| $$$$   /$$__  $$|_  $$_/  | $$  | $$           |\n|         |  $$$$$$   /$$$$$$$| $$_/  | $$$$$$$$  | $$    | $$  | $$           |\n|          \\____  $$ /$$__  $$| $$    | $$_____/  | $$ /$$| $$  | $$           |\n|          /$$$$$$$/|  $$$$$$$| $$    |  $$$$$$$  |  $$$$/|  $$$$$$$           |\n|         |_______/  \\_______/|__/     \\_______/   \\___/   \\____  $$           |\n|                                                          /$$  | $$           |\n|                                                         |  $$$$$$/           |\n|  by pyup.io                                              \\______/            |\n|                                                                              |\n+==============================================================================+\n| REPORT                                                                       |\n+============================+===========+==========================+==========+\n| package                    | installed | affected                 | ID       |\n+============================+===========+==========================+==========+\n| django                     | 1.2       | <1.2.2                   | 25701    |\n+==============================================================================+\n| Cross-site scripting (XSS) vulnerability in Django 1.2.x before 1.2.2 allows |\n|  remote attackers to inject arbitrary web script or HTML via a csrfmiddlewar |\n| etoken (aka csrf_token) cookie.                                              |\n+==============================================================================+\n```\n___\n\n### `--bare`\n\n*Output vulnerable packages only.*\n\n**Example**\n```bash\nsafety review --file report.json --bare\n```\n\n```\ndjango\n```\n\n___\n\n# License\n\nDisplay packages licenses information (requires a premium PyUp subscription).\n\n## Options\n\n### `--key` (REQUIRED)\n\n*API Key for pyup.io's licenses database. Can be set as `SAFETY_API_KEY` environment variable.*\n\n**Example**\n```bash\nsafety license --key=12345-ABCDEFGH\n```\n*Shows the license of each package in the current environment*\n\n\n```\n+==============================================================================+\n|                                                                              |\n|                               /$$$$$$            /$$                         |\n|                              /$$__  $$          | $$                         |\n|           /$$$$$$$  /$$$$$$ | $$  \\__//$$$$$$  /$$$$$$   /$$   /$$           |\n|          /$$_____/ |____  $$| $$$$   /$$__  $$|_  $$_/  | $$  | $$           |\n|         |  $$$$$$   /$$$$$$$| $$_/  | $$$$$$$$  | $$    | $$  | $$           |\n|          \\____  $$ /$$__  $$| $$    | $$_____/  | $$ /$$| $$  | $$           |\n|          /$$$$$$$/|  $$$$$$$| $$    |  $$$$$$$  |  $$$$/|  $$$$$$$           |\n|         |_______/  \\_______/|__/     \\_______/   \\___/   \\____  $$           |\n|                                                          /$$  | $$           |\n|                                                         |  $$$$$$/           |\n|  by pyup.io                                              \\______/            |\n|                                                                              |\n+==============================================================================+\n| Packages licenses                                                            |\n+=============================================+===========+====================+\n| package                                     |  version  | license            |\n+=============================================+===========+====================+\n| requests                                    | 2.25.0    | Apache-2.0         |\n|------------------------------------------------------------------------------|\n| click                                       | 7.1.2     | BSD-3-Clause       |\n|------------------------------------------------------------------------------|\n| safety                                      | 1.10.0    | MIT                |\n+==============================================================================+\n```\n\n### `--json` (Optional)\n\nThis license command can also be used in conjuction with optional arguments `--bare` and `--json` for structured, parsable outputs that can be fed into other tools and pipelines.\n\n___\n\n### `--db`\n\n*Path to a directory with a local licenses database `licenses.json`*\n\n**Example**\n```bash\nsafety license --key=12345-ABCDEFGH --db=/home/safety-db/data\n```\n___\n\n### `--no-cache`\n\n*Since PyUp.io licenses DB is updated once a week, the licenses database is cached locally for 7 days. You can use `--no-cache` to download it once again.*\n\n**Example**\n```bash\nsafety license --key=12345-ABCDEFGH --no-cache\n```\n___\n\n### `--file`, `-r`\n\n*Read input from one (or multiple) requirement files.*\n\n**Example**\n```bash\nsafety license --key=12345-ABCDEFGH -r requirements.txt\n```\n```bash\nsafety license --key=12345-ABCDEFGH --file=requirements.txt\n```\n```bash\nsafety license --key=12345-ABCDEFGH -r req_dev.txt -r req_prod.txt\n```\n\n___\n\n\n### `--proxy-host`, `-ph`\n\n*Proxy host IP or DNS*\n\n### `--proxy-port`, `-pp` \n\n*Proxy port number*\n\n### `--proxy-protocol`, `-pr`\n\n*Proxy protocol (https or http)*\n\n**Example**\n```bash\nsafety license --key=12345-ABCDEFGH -ph 127.0.0.1 -pp 8080 -pr https\n```\n\n___\n\n# Python 2.7\n\nThis tool requires latest Python patch versions starting with version 3.5. We\ndid support Python 2.7 in the past but, as for other Python 3.x minor versions,\nit reached its End-Of-Life and as such we are not able to support it anymore.\n\nWe understand you might still have Python 2.7 projects running. At the same\ntime, Safety itself has a commitment to encourage developers to keep their\nsoftware up-to-date, and it would not make sense for us to work with officially\nunsupported Python versions, or even those that reached their end of life.\n\nIf you still need to run Safety from a Python 2.7 environment, please use\nversion 1.8.7 available at PyPi. Alternatively, you can run Safety from a\nPython 3 environment to check the requirements file for your Python 2.7\nproject.\n",
  "permissions": {
    "read": true,
    "write": false,
    "admin": false
  },
  "media_types": [
    "application/vnd.docker.container.image.v1+json"
  ],
  "content_types": [
    "image"
  ]
}