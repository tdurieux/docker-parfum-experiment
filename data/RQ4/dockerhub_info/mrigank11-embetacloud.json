{
  "user": "mrigank11",
  "name": "embetacloud",
  "namespace": "mrigank11",
  "repository_type": "image",
  "status": 1,
  "status_description": "active",
  "description": "directly upload to drive",
  "is_private": false,
  "is_automated": true,
  "can_edit": false,
  "star_count": 5,
  "pull_count": 263143,
  "last_updated": "2018-11-01T20:02:36.725506Z",
  "date_registered": "2017-02-14T14:12:05.791424Z",
  "collaborator_count": 0,
  "affiliation": null,
  "hub_user": "mrigank11",
  "has_starred": false,
  "full_description": "![screenshot](.github/screenshot01.png)\n# eMbeta Cloud\nNew concept to directly upload files from server to Google Drive.\nIt will give you a proxy and will automatically download files to server, after which you can easily upload it Google Drive or download it\nto your PC.\n\nSomebody is requested to upload it to a high-speed server so that it's made open to all.\n\n# Features\n- Single Page UI (made with semantic-ui and angularJS)\n- Responsive UI\n- Realtime information update\n- Support for **torrents**\n- Can upload complete folders to Google Drive with click of a button\n- Zip and download torrents\n- Zip and upload torrents to Drive\n- Auto-Upload to GDrive on completion\n- Multiple Cloud Storage support, currently : \n    - Google Drive\n    - Mega\n\n# Usage\nFirst clone the repo and install dependencies:\n```js\nnpm install\n```\nYou have to make a google developers project and set the following environment variables:\n- GOOGLE_CLIENT_ID\n- GOOGLE_CLIENT_SECRET\n- GOOGLE_REDIRECT_URL (it should be &lt;server address&gt;/oauthCallback by default)\n  \nOther environment variables:\n- TBP_PROXY: piratebay proxy to use (default: `https://thepiratebay.org`)\n\nEnsure that you request full google drive access permission and basic G+ info in your google project \n\nTo start server, run:\n```js\nnpm start\n```\n<h2>For Heroku:</h2>\n<i>Heroku is no longer supported.</i>\n\n<h2> For Docker: </h2>\n`docker run -d -p 3000:3000 -e GOOGLE_CLIENT_ID='***' \n-e GOOGLE_CLIENT_SECRET='***' \n-e GOOGLE_REDIRECT_URL='***'\nmrigank11/embetacloud node server/server.js`\n\nFill `***` with appropriate values.\n\nIf you want to debug, add `-e DEBUG='eMCloud:*'` and remove the `-d`\n\n# Debugging\neMbeta Cloud is [debug](https://github.com/visionmedia/debug) compatible, to get debug info set environment variable `DEBUG=eMCloud:*`\nand start server.\n\n# Upcoming Features\n- Incognito mode\n\n# How to contribute\n- Add new Cloud Storage\n- Find bugs and report them\n- Suggest new features\n- Fix bugs\n\n# How to add Cloud Storage\nAdding new clouds is easy, just follow these steps:\n\n1. Create new folder inside `/server/Storages/` (e.g. `/server/Storages/DropBox`) and add `.ts` file to it with same name as that of folder (say `/server/Storages/DropBox/Dropbox.ts`)\n2. Now you've to write your code in that file, the template is \n\n```ts\nexport class CloudName extends EventEmitter{\n    constructor(credentials){\n        super();\n        //store credentials, they can be username/password or OAuth Tokens etc.\n    }\n    static getURL(){\n        //return the url on which the user will be redirected for credentials, can be OAuth Consent Page or a page on server itself.\n    }\n    static callbackHandler(query,callback){\n        //handle the recieved credentials, 'query' contains the GET params. (like for OAuth, authentication code is 'query.code')\n        //after successfull authenticaltion, return creds to 'callback' to be stored as session variable\n        //if authentication fails, call the callback as: callback(0)\n        // when user requests a file upload, credentials from session will be used to initialize this class (the constructor will be called)\n    }\n    public uploadFile(readStream, totalSize, mime, filename){\n        //handle the upload procedure\n        //it should emit => progress        : {name,bytesUploaded,size}\n        //                  fileUploaded    : {size, name , error} \n    }\n    public uploadDir(localFolderPath){          //not necessary\n        //upload a local directory\n        //should emit    => addSize    : size      size in bytes to be added to total upload size\n        //may emit       => mkdir      : name      name of cloud directory created\n    }\n}\n``` \n\nFor example, see `/server/Storages/GDrive/GDrive.ts`\n\n3. Add new storage to `/server/Storages/Storages.ts` (import it and add in `storages` object)\n4. Compile typescript\n\nWhen user clicks `login`, url is generated by calling `getURL()`, it may be OAuth Consent Page or a custom one.\nAfter redirection from OAuth Page(maybe other also), user is redirected to `/oauthcallback/` with credentials as GET paramaters, `callbackHandler(query)` is called with these params. After Successfull login, credentials passed to `callback` are stored as session variables which are used to initialize this class i.e. constructor will be called with these creds.\n\n`getURL()` may redirect url to custom page. For Example: returning `/login/mega` will open `/server/Storages/mega/login.html`\n",
  "permissions": {
    "read": true,
    "write": false,
    "admin": false
  },
  "media_types": [
    "application/vnd.docker.container.image.v1+json"
  ],
  "content_types": [
    "image"
  ]
}