{
  "user": "jeffersonlab",
  "name": "epics2web",
  "namespace": "jeffersonlab",
  "repository_type": "image",
  "status": 1,
  "status_description": "active",
  "description": "EPICS CA Web Gateway",
  "is_private": false,
  "is_automated": false,
  "can_edit": false,
  "star_count": 0,
  "pull_count": 53,
  "last_updated": "2023-01-03T15:58:54.877071Z",
  "date_registered": "2022-11-08T22:33:36.994862Z",
  "collaborator_count": 0,
  "affiliation": null,
  "hub_user": "jeffersonlab",
  "has_starred": false,
  "full_description": "# epics2web [![Java CI with Gradle](https://github.com/JeffersonLab/epics2web/actions/workflows/ci.yml/badge.svg)](https://github.com/JeffersonLab/epics2web/actions/workflows/ci.yml) [![Docker](https://img.shields.io/docker/v/jeffersonlab/epics2web?sort=semver&label=DockerHub)](https://hub.docker.com/r/jeffersonlab/epics2web)\nA gateway server and accompanying JavaScript client API to monitor EPICS Channel Access over the web.\n\n![MonitorTest](https://github.com/JeffersonLab/epics2web/raw/main/doc/img/MonitorTest.png?raw=true \"MonitorTest\")\n\n---\n- [Overview](https://github.com/JeffersonLab/epics2web#overview)\n- [Quick Start with Compose](https://github.com/JeffersonLab/epics2web#quick-start-with-compose)\n- [Install](https://github.com/JeffersonLab/epics2web#build)\n- [API](https://github.com/JeffersonLab/epics2web#api)\n- [Configure](https://github.com/JeffersonLab/epics2web#configure)\n- [Build](https://github.com/JeffersonLab/epics2web#build) \n- [Test](https://github.com/JeffersonLab/epics2web#test)\n- [Release](https://github.com/JeffersonLab/epics2web#release)\n- [See Also](https://github.com/JeffersonLab/epics2web#see-also)\n---\n\n## Overview\nThe epics2web application allows users to monitor [EPICS](http://www.aps.anl.gov/epics/) PVs from the web using Web Sockets and a REST web service endpoint.  The application leverages the Java [JCA](https://github.com/epics-base/jca) library and is designed to run on Apache Tomcat.\n\n## Quick Start with Compose \n1. Grab project\n```\ngit clone https://github.com/JeffersonLab/epics2web\ncd epics2web\n```\n2. Launch [Compose](https://github.com/docker/compose)\n```\ndocker compose up\n```\n3. Monitor test PV via web browser   \n\nhttp://localhost:8080/epics2web/test-camonitor\n\nPV name: `HELLO`\n\n**See**: [Docker Compose Strategy](https://gist.github.com/slominskir/a7da801e8259f5974c978f9c3091d52c)\n\n## Install\n   1. Download Java 8+\n   1. Download [Apache Tomcat 7, 8, or 9](http://tomcat.apache.org/)\n   1. Download [epics2web.war](https://github.com/JeffersonLab/epics2web/releases) and drop it into the Tomcat webapps directory\n   1. Start Tomcat and navigate your web browser to localhost:8080/epics2web\n\n**Note:** epics2web also works and was tested with GlassFish, and presumably works with WildFly or any other Java web application server that supports Web Sockets.\n\n**Note:** The dependency jars are included in the _war_ file that is generated by the build.  You can copy the [jar files](https://github.com/JeffersonLab/epics2web/tree/master/lib) from project lib directory to the Tomcat lib directory and change the build.gradle script to use _providedCompile_ instead of _implementation_ if you'd prefer to include the dependencies that way.\n\n## API\n\n[API Reference](https://github.com/JeffersonLab/epics2web/wiki/API-Reference)\n\n## Configure\n\nThis application uses the [Java Channel Access](https://github.com/epics-base/jca) library.   It requires a working EPICS channel access environment with the environment variable *EPICS_CA_ADDR_LIST* set.  See Also: [Advanced Configuration](https://github.com/JeffersonLab/epics2web/wiki/Advanced-Configuration).\n\n## Build\nThis project is built with [Java 17](https://adoptium.net/) (compiled to Java 8 bytecode), and uses the [Gradle 7](https://gradle.org/) build tool to automatically download dependencies and build the project from source:\n\n```\ngit clone https://github.com/JeffersonLab/epics2web\ncd epics2web\ngradlew build\n```\n**Note**: If you do not already have Gradle installed, it will be installed automatically by the wrapper script included in the source\n\n**Note for JLab On-Site Users**: Jefferson Lab has an intercepting [proxy](https://gist.github.com/slominskir/92c25a033db93a90184a5994e71d0b78)\n\n**See**: [Docker Development Quick Reference](https://gist.github.com/slominskir/a7da801e8259f5974c978f9c3091d52c#development-quick-reference)\n\n## Test\n```\ndocker compose -f build.yml up\n```\nWait for containers to start then:\n```\ngradlew integrationTest\n```\n## Release\n1. Bump the version number and release date in build.gradle and commit and push to GitHub (using [Semantic Versioning](https://semver.org/)).\n2. Create a new release on the GitHub [Releases](https://github.com/JeffersonLab/epics2web/releases) page corresponding to same version in build.gradle (Enumerate changes and link issues).  Attach war file for users to download.\n3. Build and publish a new Docker image [from the GitHub tag](https://gist.github.com/slominskir/a7da801e8259f5974c978f9c3091d52c#8-build-an-image-based-of-github-tag).  GitHub is configured to do this automatically on git push of semver tag (typically part of GitHub release) or the [Publish to DockerHub](https://github.com/JeffersonLab/epics2web/actions/workflows/docker-publish.yml) action can be manually triggered after selecting a tag.\n4. Bump and commit quick start [image version](https://github.com/JeffersonLab/epics2web/blob/main/docker-compose.override.yml)\n\n## See Also\n- [Web Extensible Display Manager (wedm)](https://github.com/JeffersonLab/wedm)\n- [Web Archive Viewer and Expositor (WAVE)](https://github.com/JeffersonLab/wave)\n- [PV Monitor Runchart](https://github.com/JeffersonLab/runchart)\n- [Similar Projects](https://github.com/JeffersonLab/epics2web/wiki/Similar-Projects)\n- [Technical Notes](https://github.com/JeffersonLab/epics2web/wiki/Technical-Notes)\n- [Testing Suite](https://github.com/JeffersonLab/jca-test-suite)\n",
  "permissions": {
    "read": true,
    "write": false,
    "admin": false
  },
  "media_types": [
    "application/vnd.docker.container.image.v1+json"
  ],
  "content_types": [
    "image"
  ]
}