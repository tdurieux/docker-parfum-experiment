{
  "user": "camptocamp",
  "name": "terraboard",
  "namespace": "camptocamp",
  "repository_type": "image",
  "status": 1,
  "status_description": "active",
  "description": "Terraform States Dashboard",
  "is_private": false,
  "is_automated": false,
  "can_edit": false,
  "star_count": 3,
  "pull_count": 10808851,
  "last_updated": "2022-06-01T09:47:32.415963Z",
  "date_registered": "2017-07-19T19:18:35.090924Z",
  "collaborator_count": 0,
  "affiliation": null,
  "hub_user": "camptocamp",
  "has_starred": false,
  "full_description": "<h1 align=\"center\">Terraboard</h1>\n<p align=\"center\">\n    <img alt=\"Terraboard logo\" height=\"200\" src=\"logo/terraboard_logo.png\">\n</p>\n<p align=\"center\">üåç üìã A web dashboard to inspect Terraform States</p>\n<p align=\"center\">\n  <a href=\"https://hub.docker.com/r/camptocamp/terraboard/\" target=\"_blank\">\n    <img alt=\"Docker Pulls\" src=\"https://img.shields.io/docker/pulls/camptocamp/terraboard.svg\" />\n  </a>\n  <a href=\"https://goreportcard.com/report/github.com/camptocamp/terraboard\" target=\"_blank\">\n    <img alt=\"Go Report Card\" src=\"https://goreportcard.com/badge/github.com/camptocamp/terraboard\" />\n  </a>\n  <a href=\"https://gitter.im/camptocamp/terraboard\" target=\"_blank\">\n    <img alt=\"Gitter\" src=\"https://img.shields.io/gitter/room/camptocamp/terraboard.svg\" />\n  </a>\n  <a href=\"https://github.com/camptocamp/terraboard/actions\" target=\"_blank\">\n    <img alt=\"Build Status\" src=\"https://github.com/camptocamp/terraboard/workflows/Build/badge.svg\" />\n  </a>\n  <a href=\"https://coveralls.io/github/camptocamp/terraboard?branch=master\" target=\"_blank\">\n    <img alt=\"Coverage Status\" src=\"https://coveralls.io/repos/github/camptocamp/terraboard/badge.svg?branch=master\" />\n  </a>\n  <a href=\"http://www.camptocamp.com\" target=\"_blank\">\n    <img alt=\"By Camptocamp\" src=\"https://img.shields.io/badge/by-camptocamp-fb7047.svg\" />\n  </a>\n  <a href=\"https://pkg.go.dev/github.com/camptocamp/terraboard\" target=\"_blank\">\n    <img alt=\"Documentation\" src=\"https://pkg.go.dev/badge/github.com/camptocamp/terraboard\">\n  </a>\n</p>\n<p align=\"center\">Website: <a href=\"https://terraboard.io\">https://terraboard.io</a></p>\n\n---\n\n<details><summary>Table of content</summary>\n\n- [What is it?](#what-is-it)\n  - [Overview](#overview)\n  - [Search](#search)\n  - [State](#state)\n  - [Compare](#compare)\n  - [Requirements](#requirements)\n    - [AWS S3 (state) + DynamoDB (lock)](#aws-s3-state--dynamodb-lock)\n    - [Terraform Cloud](#terraform-cloud)\n- [Configuration](#configuration)\n  - [Available parameters](#available-parameters)\n    - [Application Options](#application-options)\n    - [General Provider Options](#general-provider-options)\n    - [Logging Options](#logging-options)\n    - [Database Options](#database-options)\n    - [AWS (and S3 compatible providers) Options](#aws-and-s3-compatible-providers-options)\n    - [S3 Options](#s3-options)\n    - [Terraform Enterprise Options](#terraform-enterprise-options)\n    - [Google Cloud Platform Options](#google-cloud-platform-options)\n    - [GitLab Options](#gitlab-options)\n    - [Web](#web)\n    - [Help Options](#help-options)\n- [Use with Docker](#use-with-docker)\n  - [Docker-compose](#docker-compose)\n  - [Docker command line](#docker-command-line)\n- [Use with Rancher](#use-with-rancher)\n- [Authentication and base URL](#authentication-and-base-url)\n- [Install from source](#install-from-source)\n- [Compatibility Matrix](#compatibility-matrix)\n- [Development](#development)\n  - [Architecture](#architecture)\n    - [A server process](#a-server-process)\n    - [A web UI](#a-web-ui)\n  - [Testing](#testing)\n  - [Contributing](#contributing)\n\n</details>\n\n## What is it?\n\nTerraboard is a web dashboard to visualize and query\n[Terraform](https://terraform.io) states. It currently features:\n\n- an overview page listing the most recently updated state files with their\n  activity\n- a state page with state file details, including versions and resource\n  attributes\n- a search interface to query resources by type, name or attributes\n- a diff interface to compare state between versions\n\nIt currently supports several remote state backend providers:\n\n- [AWS S3 (state) + DynamoDB (lock)](https://www.terraform.io/docs/backends/types/s3.html)\n- [S3 compatible backends (ex: MinIO)](https://min.io/)\n- [Google Cloud Storage](https://www.terraform.io/docs/backends/types/gcs.html)\n- [Terraform Cloud (remote)](https://www.terraform.io/docs/backends/types/remote.html)\n- [GitLab](https://docs.gitlab.com/ee/user/infrastructure/terraform_state.html)\n\n### Overview\n\nThe overview presents all the state files in the S3 bucket, by most recent\nmodification date.\n\n![Screenshot Overview](screenshots/main.png)\n\n\n### Search\n\nThe search view allows to find resources by various criteria.\n\n![Screenshot Search](screenshots/search.png)\n\n\n### State\n\nThe state view presents details of a Terraform state at a given version.\n\n![Screenshot State](screenshots/state.png)\n\n\n### Compare\n\nFrom the state view, you can compare the current state version with another\nversion.\n\n![Screenshot Compare](screenshots/compare.png)\n\n\n### Requirements\n\nIndependently of the location of your statefiles, Terraboard needs to store an internal version of its dataset. For this purpose it requires a PostgreSQL database.\nData resiliency is not paramount though as this dataset can be rebuilt upon your statefiles at anytime.\n#### AWS S3 (state) + DynamoDB (lock)\n\n- A **versioned** S3 bucket name with one or more Terraform states, named with a `.tfstate` suffix\n- AWS credentials with the following IAM permissions over the bucket:\n  - `s3:GetObject`\n  - `s3:ListBucket`\n  - `s3:ListBucketVersions`\n  - `s3:GetObjectVersion`\n- If you want to retrieve lock states [from a dynamoDB table](https://www.terraform.io/docs/backends/types/s3.html#dynamodb_table), you need to make sure the provided AWS credentials have `dynamodb:Scan` access to that table.\n#### Terraform Cloud\n\n- Account on [Terraform Cloud](https://app.terraform.io/)\n- Existing organization\n- Token assigned to an organization\n\n## Configuration\n\nTerraboard currently supports configuration in three different ways:\n\n1. Environment variables\n2. CLI parameters\n3. Configuration file (YAML). A configuration file example can be found in the root directory of this repository.\n\nThe precedence of configurations is as described below.\n\n### Available parameters\n\n#### Application Options\n\n- `-V`, `--version` Display version.\n- `-c`, `--config-file` <default: *$CONFIG_FILE*> Config File path\n  - Env: *CONFIG_FILE*\n  \n#### General Provider Options\n\n- `--no-versioning` <default: *$TERRABOARD_NO_VERSIONING*> Disable versioning support from Terraboard (useful for S3 compatible providers like MinIO)\n  - Env: *TERRABOARD_NO_VERSIONING*\n  - Yaml: *provider.no-versioning*\n- `--no-locks` <default: *$TERRABOARD_NO_LOCKS*> Disable locks support from Terraboard (useful for S3 compatible providers like MinIO)\n  - Env: *TERRABOARD_NO_LOCKS*\n  - Yaml: *provider.no-locks*\n\n#### Logging Options\n\n- `-l`, `--log-level` <default: *\"info\"*> Set log level ('debug', 'info', 'warn', 'error', 'fatal', 'panic').\n  - Env: *TERRABOARD_LOG_LEVEL*\n  - Yaml: *log.level*\n- `--log-format` <default: *\"plain\"*> Set log format ('plain', 'json').\n  - Env: *TERRABOARD_LOG_FORMAT*\n  - Yaml: *log.format*\n\n#### Database Options\n\n- `--db-host` <default: *\"db\"*> Database host.\n  - Env: *DB_HOST*\n  - Yaml: *database.host*\n- `--db-port` <default: *\"5432\"*> Database port.\n  - Env: *DB_PORT*\n  - Yaml: *database.port*\n- `--db-user` <default: *\"gorm\"*> Database user.\n  - Env: *DB_USER*\n  - Yaml: *database.user*\n- `--db-password` <default: *$DB_PASSWORD*> Database password.\n  - Env: *DB_PASSWORD*\n  - Yaml: *database.password*\n- `--db-name` <default: *\"gorm\"*> Database name.\n  - Env: *DB_NAME*\n  - Yaml: *database.name*\n- `--db-sslmode` <default: *\"require\"*> Database SSL mode.\n  - Env: *DB_SSLMODE*\n  - Yaml: *database.sslmode*\n- `--no-sync` Do not sync database.\n  - Yaml: *database.no-sync*\n- `--sync-interval` <default: *\"1\"*> DB sync interval (in minutes)\n  - Yaml: *database.sync-interval*\n\n#### AWS (and S3 compatible providers) Options\n\n- `--dynamodb-table` <default: *$AWS_DYNAMODB_TABLE*> AWS DynamoDB table for locks.\n  - Env: *AWS_DYNAMODB_TABLE*\n  - Yaml: *aws.dynamodb-table*\n- `--aws-endpoint` <default: *$AWS_ENDPOINT*> AWS endpoint.\n  - Env: *AWS_ENDPOINT*\n  - Yaml: *aws.endpoint*\n- `--aws-region` <default: *$AWS_REGION*> AWS region.\n  - Env: *AWS_REGION*\n  - Yaml: *aws.region*\n- `--aws-role-arn` <default: *$APP_ROLE_ARN*> Role ARN to Assume.\n  - Env: *APP_ROLE_ARN*\n  - Yaml: *aws.app-role-arn*\n- `--aws-external-id` <default: *$AWS_EXTERNAL_ID*> External ID to use when assuming role.\n  - Env: *AWS_EXTERNAL_ID*\n  - Yaml: *aws.external-id*\n\n#### S3 Options\n\n- `--s3-bucket` <default: *$AWS_BUCKET*> AWS S3 bucket.\n  - Env: *AWS_BUCKET*\n  - Yaml: *aws.s3.bucket*\n- `--key-prefix` <default: *$AWS_KEY_PREFIX*> AWS Key Prefix.\n  - Env: *AWS_KEY_PREFIX*\n  - Yaml: *aws.s3.key-prefix*\n- `--file-extension` <default: *\".tfstate\"*> File extension(s) of state files.\n  - Env: *AWS_FILE_EXTENSION*\n  - Yaml: *aws.s3.file-extension*\n- `--force-path-style` <default: *$AWS_FORCE_PATH_STYLE*> Force path style S3 bucket calls.\n  - Env: *AWS_FORCE_PATH_STYLE*\n  - Yaml: *aws.s3.force-path-style*\n\n#### Terraform Enterprise Options\n\n- `--tfe-address` <default: *$TFE_ADDRESS*> Terraform Enterprise address for states access\n  - Env: *TFE_ADDRESS*\n  - Yaml: *tfe.address*\n- `--tfe-token` <default: *$TFE_TOKEN*> Terraform Enterprise Token for states access\n  - Env: *TFE_TOKEN*\n  - Yaml: *tfe.token*\n- `--tfe-organization` <default: *$TFE_ORGANIZATION*> Terraform Enterprise organization for states access\n  - Env: *TFE_ORGANIZATION*\n  - Yaml: *tfe.organization*\n\n#### Google Cloud Platform Options\n\n- `--gcs-bucket` Google Cloud bucket to search\n  - Yaml: *gcp.gcs-bucket*\n- `--gcp-sa-key-path` <default: *$GCP_SA_KEY_PATH*> The path to the service account to use to connect to Google Cloud Platform\n  - Env: *GCP_SA_KEY_PATH*\n  - Yaml: *gcp.gcp-sa-key-path*\n\n#### GitLab Options\n\n- `--gitlab-address` <default: *\"https://gitlab.com\"*> GitLab address (root)\n  - Env: *GITLAB_ADDRESS*\n  - Yaml: *gitlab.address*\n- `--gitlab-token` <default: *$GITLAB_TOKEN*> Token to authenticate upon GitLab\n  - Env: *GITLAB_TOKEN*\n  - Yaml: *gitlab.token*\n\n#### Web\n\n- `-p`, `--port` <default: *\"8080\"*> Port to listen on.\n  - Env: *TERRABOARD_PORT*\n  - Yaml: *web.port*\n- `--base-url` <default: *\"/\"*> Base URL.\n  - Env: *TERRABOARD_BASE_URL*\n  - Yaml: *web.base-url*\n- `--logout-url` <default: *$TERRABOARD_LOGOUT_URL*> Logout URL.\n  - Env: *TERRABOARD_LOGOUT_URL*\n  - Yaml: *web.logout-url*\n\n#### Help Options\n\n- `-h`, `--help` Show this help message\n\n## Use with Docker\n\n### Docker-compose\n\nConfiguration file can be provided to the container using a [volume](https://docs.docker.com/compose/compose-file/#volumes) or a [configuration](https://docs.docker.com/compose/compose-file/#configs).\n\n```shell\n# Set AWS credentials as environment variables:\nexport AWS_ACCESS_KEY_ID=<access_key>\nexport AWS_SECRET_ACCESS_KEY=<access_secret>\n\n# Set AWS configuration as environment variables:\nexport AWS_DEFAULT_REGION=<AWS default region>\nexport AWS_BUCKET=<S3 Bucket name>\nexport AWS_DYNAMODB_TABLE=<Aws DynamoDB Table>\n\ndocker-compose up\n```\n\nThen point your browser to http://localhost:8080.\n\n### Docker command line\n\n```shell\n# Set AWS credentials as environment variables:\nexport AWS_ACCESS_KEY_ID=<access_key>\nexport AWS_SECRET_ACCESS_KEY=<access_secret>\n\n# Set AWS configuration as environment variables:\nexport AWS_DEFAULT_REGION=<AWS default region>\nexport AWS_BUCKET=<S3 Bucket name>\nexport AWS_DYNAMODB_TABLE=<AWS_DYNAMODB_TABLE>\n\n# Spin up the two containers and a network for them to communciate on:\ndocker network create terraboard\ndocker run --name db \\\n  -e POSTGRES_USER=gorm \\\n  -e POSTGRES_DB=gorm \\\n  -e POSTGRES_PASSWORD=\"<mypassword>\" \\\n  -e GODEBUG=\"netdns=go\" \\\n  --net terraboard \\\n  --detach \\\n  --restart=always \\\n  postgres:9.5\n\ndocker run -p 8080:8080 \\\n  -e AWS_ACCESS_KEY_ID=\"${AWS_ACCESS_KEY_ID}\" \\\n  -e AWS_SECRET_ACCESS_KEY=\"${AWS_SECRET_ACCESS_KEY}\" \\\n  -e AWS_REGION=\"${AWS_DEFAULT_REGION}\" \\\n  -e AWS_BUCKET=\"${AWS_BUCKET}\" \\\n  -e WS_DYNAMODB_TABLE=\"${AWS_DYNAMODB_TABLE}\" \\\n  -e DB_PASSWORD=\"<mypassword>\" \\\n  -e DB_SSLMODE=\"disable\" \\\n  --net terraboard \\\n  camptocamp/terraboard:latest\n```\n\nThen point your browser to http://localhost:8080.\n\n## Use with Rancher\n\n[Camptocamp's Rancher Catalog](https://github.com/camptocamp/camptocamp-rancher-catalog)\ncontains a Terraboard template to automate its installation in Cattle.\n\n\n## Authentication and base URL\n\nTerraboard does not implement authentication. Instead, it is recommended to use\nan authentication proxy such as [oauth2_proxy](https://github.com/bitly/oauth2_proxy).\n\nIf you need to set a route path for Terraboard, you can set a base URL by\npassing it as the `BASE_URL` environment variable.\n\nWhen using an authentication proxy, Terraboard will retrieve the logged in\nuser and email from the headers passed by the proxy.\nYou can also pass a `TERRABOARD_LOGOUT_URL` parameter to allow users to\nsign out of the proxy.\n\n\n## Install from source\n\n```shell\n$ go get github.com/camptocamp/terraboard\n```\n\n## Compatibility Matrix\n\n|Terraboard|Max Terraform version|\n|----------|---------------------|\n| 0.15.0   |  0.12.7             |\n| 0.16.0   |  0.12.7             |\n| 0.17.0   |  0.12.18            |\n| 0.18.0   |  0.12.18            |\n| 0.19.0   |  0.12.20            |\n| 0.20.0   |  0.12.26            |\n| 0.21.0   |  0.12.28            |\n| 0.22.0   |  0.13.0             |\n| 1.0.0    |  0.14.5             |\n| 1.1.0    |  0.14.10            |\n\n## Development\n\n### Architecture\n\nTerraboard is made of two components:\n\n#### A server process\n\nThe server is written in go and runs a web server which serves:\n\n- the API on known access points, taking the data from the PostgreSQL\n  database\n- the index page (from [static/index.html](static/index.html)) on all other\n  URLs\n\nThe server also has a routine which regularly (every 1 minute) feeds\nthe PostgreSQL database from the S3 bucket.\n\n#### A web UI\n\nThe UI is an AngularJS application served from `index.html`. All the UI code\ncan be found in the [static/](static/) directory.\n\n\n### Testing\n\n```shell\n$ docker-compose build && docker-compose up -d\n# Point your browser to http://localhost\n```\n\n### Contributing\n\nSee [CONTRIBUTING.md](CONTRIBUTING.md)\n",
  "permissions": {
    "read": true,
    "write": false,
    "admin": false
  },
  "media_types": [
    "application/vnd.docker.container.image.v1+json"
  ],
  "content_types": [
    "image"
  ]
}