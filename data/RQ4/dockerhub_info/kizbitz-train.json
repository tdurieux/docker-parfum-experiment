{
  "user": "kizbitz",
  "name": "train",
  "namespace": "kizbitz",
  "repository_type": "image",
  "status": 1,
  "status_description": "active",
  "description": "AWS CLI Tool",
  "is_private": false,
  "is_automated": true,
  "can_edit": false,
  "star_count": 0,
  "pull_count": 1214,
  "last_updated": "2017-02-28T17:05:57.251366Z",
  "date_registered": "2015-09-15T16:08:31.539077Z",
  "collaborator_count": 0,
  "affiliation": null,
  "hub_user": "kizbitz",
  "has_starred": false,
  "full_description": "# Train\n\nTrain is a set Amazon Web Services CLI tools (packaged in a Docker container) used to manage AWS users, VPC's, user keys/security, AMI's, custom labs (one or more AWS instances grouped by tag), and sets of labs to be used for demos, testing, and training.\n\n- **train**: Primary tool - Manages all VPC Objects and instances\n- **train-users**: Mananges additional users allowed to use **train**\n- **train-images**: Manages associated lab AMI's\n\n---\n\nThe tools provide a simple way to quickly create, manage, and destroy:\n\n### VPC Objects\n\n- VPC\n- IAM profile, role, policy\n- Gateway\n- Route table\n- Network ACL\n- Subnets\n- Default security group and rules\n- Key pairs for multiple users\n- Labs (Grouping of one or more instances with specific configurations)\n- Termination and clean-up of all created objects/files\n\n### AWS IAM Users\n\n- Manage (Create, list, and delete) AWS IAM Users\n\n### AMIs\n\n- Manage (Create, list, and delete) AMI's associated with custom labs.\n\n### Registration for training/testing\n\n- Bulk registration (Launch labs for users listed in a text file)\n- Registration mode: A 'Kiosk' style registration mode that provides a welcome message and prompts for email address used to launch labs. \n\n## Requirements\n\n### AWS Permissions\n\nIt's recommended you create an AWS account that is separate from your prod, dev, staging accounts. **Train** requires extensive IAM roles/permissions. (Create, list, and destroy: VPC's, EC2 instances/objects, IAM users, etc...)\n\nAny user created with the `train-users` tool has the following policy: https://github.com/kizbitz/train/blob/master/train/vpc/users.py#L12-L41\n\n### Environment Variables\n\nEnvironment variables can be set in the container by:\n\n- Creating/using a Docker environment file (Used in the following examples)\n- Pass them in when running the container\n- Export them directly in the container\n\n#### Required Environment Variables\n\n```\n# Username\nTRAINER=jbaker\n\n# AWS Authentication\nAWS_ACCESS_KEY_ID=<id>\nAWS_SECRET_ACCESS_KEY=<key>\n\n# AWS EC2 Configuration\nAWS_REGION=<ec2-region>\n```\n\n[Available AWS EC2 Regions](http://docs.aws.amazon.com/general/latest/gr/rande.html#ec2_region)\n\n| Region Name | Region |\n| --- | --- |\n| US East (N. Virginia)\t| us-east-1 |\n| US West (Oregon)\t| us-west-2 |\n| US West (N. California)\t| us-west-1 |\n| EU (Ireland)\t| eu-west-1 |\n| EU (Frankfurt)\t| eu-central-1 |\n| Asia Pacific (Singapore)\t| ap-southeast-1 |\n| Asia Pacific (Tokyo)\t| ap-northeast-1 |\n| Asia Pacific (Sydney)\t| ap-southeast-2 |\n| Asia Pacific (Seoul)\t| ap-northeast-2 |\n| South America (Sao Paulo)\t| sa-east-1 |\n\nNote: `TRAINER` (username) is only used for tagging VCP objects only. It is not tied to any permissions.\n\n### Host Volume\n\nA local host volume needs to be mounted inside the container to `/host` when running the container. The scripts will output all user keys and user instance information into a `/host/<VPC>` directory.\n\n## Optional\n\n#### Optional Environment Variables\n\n```\n# AWS SES\nSES_REGION=<ses-region>\nSES_FROM_EMAIL=<email-address>\nSES_FROM_NAME=<alternate-from-text>\n\n# Root lab directory\nLAB_DIR=<lab-directory>\n\n# Full path to user configuration file\nUSER_FILE=<config-file>\n\n# Tag for VPC, labs, instances, etc... (Recommended for different environments)\nVPC=<vpc-tag>\n\n# Template file for registration emails\nEMAIL_TEMPLATE=<path-to-template-file-in-container>\n```\n\n### AWS SES Minimum Requirements\n\nIn order to send emails with **train** you must (at a minimum):\n\n- Set the `SES_REGION` and `SES_FROM_EMAIL` environment variables.\n- Verify a sending email address on your AWS account. See: http://docs.aws.amazon.com/ses/latest/DeveloperGuide/verify-email-addresses.html#verify-email-addresses-procedure\n- Request a limit increase and have your account migrated out of sandboxed mode. See: http://docs.aws.amazon.com/ses/latest/DeveloperGuide/request-production-access.html\n\nRecommended AWS SES configuration: \n\n- Use a custom **MAIL FROM** domain: http://docs.aws.amazon.com/ses/latest/DeveloperGuide/mail-from.html\n- Authenticate your emails. See: http://docs.aws.amazon.com/ses/latest/DeveloperGuide/authentication.html\n\n[Available AWS SES Regions](http://docs.aws.amazon.com/general/latest/gr/rande.html#ses_region)\n\n| Region Name | Region |\n| --- | --- |\n| US East (N. Virginia)\t| us-east-1 |\n| US West (Oregon) | us-west-2 |\n| EU (Ireland) | eu-west-1 |\n\n## Walk-through - Personal Use\n\nThe following section is a walk-through of usage for personal use (Useful for demos and individuals involved in QA/documentation/support teams) \n\nPull the Docker image:\n\n```\nvagrant@dockertest:~$ docker pull kizbitz/train\nUsing default tag: latest\nlatest: Pulling from kizbitz/train\n843e2bded498: Pull complete\n  *content removed*\n81395f1294cc: Pull complete\nDigest: sha256:146ff25a5b7fa8a4dd9914359c93f0be2c35ff0ca4a19045a1585dc07e005e0b\nStatus: Downloaded newer image for kizbitz/train:latest\n```\n\nCreate a temp working directory:\n\n```\nvagrant@dockertest:~$ mkdir sandbox\nvagrant@dockertest:~$ cd sandbox/\n```\n\nCreate a Docker environment file with required environment variables:\n\n```\nvagrant@dockertest:~/sandbox$ vim train.env\nvagrant@dockertest:~/sandbox$ cat train.env\n\nTRAINER=jbaker\nVPC=demo\nAWS_REGION=us-east-1\nAWS_ACCESS_KEY_ID=<your-aws-access-key>\nAWS_SECRET_ACCESS_KEY=<your-aws-secret-access-key>\n\n# SES Configuration\nSES_REGION=us-east-1\nSES_FROM_NAME=Docker Training\nSES_FROM_EMAIL=no-reply@train.docker.com\n```\n\nRun the container with the environment file and mount a host volume:\n\n```\nvagrant@dockertest:~/sandbox$ ls -al\ntotal 12\ndrwxrwxr-x  2 vagrant vagrant 4096 Jan 12 10:46 .\ndrwxr-xr-x 10 vagrant vagrant 4096 Jan 12 10:46 ..\n-rw-------  1 vagrant vagrant  219 Jan 12 10:46 train.env\nvagrant@dockertest:~/sandbox$ docker run -ti --rm --env-file='train.env' -v $(pwd):/host kizbitz/train\njbaker-demo:us-east-1:~$\n```\n\nAfter entering the container note that the prompt is displaying the: **TRAINER-VPC:AWS_REGION** environment variables.\n\n```\njbaker-demo:us-east-1:~$\n```\n\nExecuting `train` without any arguments will display help:\n\n```\njbaker-demo:us-east-1:~$ train\nusage: train [-h] [-v] [-k] [-a] [-i <lab>] [-x <lab>] [-r <lab>] [-e] [-l]\n             [-d <tag>] [-p] [-t]\n\nTrain: AWS CLI Tool\n\noptional arguments:\n  -h, --help  show this help message and exit\n  -v          Create AWS VPC\n  -k          Create AWS key pairs\n  -a          List all available labs\n  -i <lab>    View description for an available lab\n  -x <lab>    Execute a lab\n  -r <lab>    Execute a lab in registration mode\n  -e          Email instance information and credentials to users\n  -l          List running labs and instances in AWS\n  -d <tag>    Delete a lab from AWS\n  -p          Purge/Delete all instances in VPC\n  -t          Terminate environment (VPC and local files)\njbaker-demo:us-east-1:~$\n```\n\nCreate the new VPC (along with the required VCP objects) and generate your key pair (from the TRAINER environment variable) using the `-v` and `-k` flags:\n\n```\njbaker-demo:us-east-1:~$ train -vk\nCreating AWS VPC ...\nCreating IAM Profile: jbaker-demo ...\nIAM profile, role, and policy created ...\nCreating VPC: jbaker-demo ...\nCreating gateway: jbaker-demo-igw ...\nCreating route table: jbaker-demo-route-table ...\nConfiguring network ACL: jbaker-demo-network-acl ...\n10.0.0.0/20\nCreating subnet: jbaker-demo-us-east-1b ...\n10.0.16.0/20\nCreating subnet: jbaker-demo-us-east-1c ...\n10.0.32.0/20\nCreating subnet: jbaker-demo-us-east-1d ...\n10.0.48.0/20\nCreating subnet: jbaker-demo-us-east-1e ...\nConfiguring default security group ...\nAdding default egress rules ...\nChecking for existing key pair: jbaker-demo ...\nCreating key pair: jbaker-demo ...\nKey 'jbaker-demo' created and saved ...\n```\n\nKey pairs (*.pem for *nix users and a *.pem for Windows/PuTTY users) are are created and saved in a `/host/<VPC>/users/<username>` directory.\n\nThe **key-pairs.txt** file is used to track all key pairs created for this VPC. **users.cfg** is covered later in the **Registration** section.\n\n```\njbaker-demo:us-east-1:~$ tree /host\n/host\n├── demo\n│   ├── key-pairs.txt\n│   ├── users\n│   │   └── jbaker\n│   │       ├── jbaker-demo.pem\n│   │       └── jbaker-demo.ppk\n│   └── users.cfg\n└── train.env\n```\n\nList available labs:\n\n```\njbaker-demo:us-east-1:~$ train -a\n\nAvailable Labs:\n  base\n  dtr-volume\n  template\n  training-atp\n  ucp\n\njbaker-demo:us-east-1:~$\n```\n\nDisplay lab information:\n\n```\njbaker-demo:us-east-1:~$ train -i dtr-volume\n\nName: dtr-volume\n\nDescription:\n\nDTR with image storage configured on a separate volume.\n\n- Ubuntu 14.04\n- 4.0.23 Kernel\n- Latest Docker CS Release\n\njbaker-demo:us-east-1:~$\n```\n\nThis particular lab launches a base Ubuntu 14.04 instances with an attached volume, upgrades the kernel to 4.0.23, installs the latest Docker CS engine and Docker Trusted registry, then configures the DTR storage option to point to the attached volume. See: https://github.com/kizbitz/train/tree/master/train/labs/dtr-volume\n\nNote that launching a lab may cause updates, configuration changes or the installation of tools (such as Docker) which may require some time to complete and may result in the instance rebooting.\nIt is advisable to wait until this process has fully completed before attempting to use the launched lab.\n\nLaunch this lab:\n\n```\njbaker-demo:us-east-1:~$ train -x dtr-volume\nLaunching 'dtr-volume' lab with tag: dtr-volume-1\nLaunching instance: jbaker-dtr ...\nWaiting for instances to initialize ...\nWaiting for instance 'jbaker-dtr' to initialize ...\nWaiting for instance 'jbaker-dtr' to initialize ...\nWaiting for instance 'jbaker-dtr' to initialize ...\nWaiting for instance 'jbaker-dtr' to initialize ...\nWaiting for instance 'jbaker-dtr' to initialize ...\nWaiting for instance 'jbaker-dtr' to initialize ...\nWaiting for instance 'jbaker-dtr' to initialize ...\nCreating instance tags for: jbaker-dtr...\n\nLab 'dtr-volume' launched with tag 'dtr-volume-1':\n\n  Instances:\n\n    Name:         jbaker-dtr\n      Lab:        dtr-volume-1\n      Region:     us-east-1\n      IP:         54.84.220.19\n      Private IP: 10.0.14.143\n      Public DNS: ec2-54-84-220-19.compute-1.amazonaws.com\n```\n\nLaunch another lab:\n\n```\njbaker-demo:us-east-1:~$ train -x base\nAvailable configurations for the 'base' lab:\n\n 1) amazon-linux\n 2) centos-7.0\n 3) debian-jessie\n 4) debian-wheez\n 5) rhel-6.5\n 6) rhel-6.6\n 7) rhel-7.0\n 8) rhel-7.1\n 9) suse-sles-12\n 10) ubuntu\n\n\nWhich configuration would you like to execute?: 10\nHow many instances would you like to launch: 2\nEnter a custom AWS 'Name' tag: demo\nLaunching 'base' lab with tag: base-1\nLaunching instance: jbaker-demo-0 ...\nLaunching instance: jbaker-demo-1 ...\nWaiting for instances to initialize ...\nWaiting for instance 'jbaker-demo-0' to initialize ...\nWaiting for instance 'jbaker-demo-0' to initialize ...\nWaiting for instance 'jbaker-demo-1' to initialize ...\nCreating instance tags for: jbaker-demo-0...\nCreating instance tags for: jbaker-demo-1...\n\nLab 'base' launched with tag 'base-1':\n\n  Instances:\n\n    Name:         jbaker-demo-0\n      Lab:        base-1\n      Region:     us-east-1\n      IP:         54.175.198.174\n      Private IP: 10.0.7.117\n      Public DNS: ec2-54-175-198-174.compute-1.amazonaws.com\n\n    Name:         jbaker-demo-1\n      Lab:        base-1\n      Region:     us-east-1\n      IP:         52.23.199.253\n      Private IP: 10.0.20.29\n      Public DNS: ec2-52-23-199-253.compute-1.amazonaws.com\n\njbaker-demo:us-east-1:~$\n```\n\nList running labs and instances:\n\n```\njbaker-demo:us-east-1:~$ train -l\n\nRunning labs:\n  base-1\n  dtr-volume-1\n\nInstances running in lab 'base-1':\n\n    Name:         jbaker-demo-0\n      Lab:        base-1\n      Region:     us-east-1\n      IP:         54.175.198.174\n      Private IP: 10.0.7.117\n      Public DNS: ec2-54-175-198-174.compute-1.amazonaws.com\n\n    Name:         jbaker-demo-1\n      Lab:        base-1\n      Region:     us-east-1\n      IP:         52.23.199.253\n      Private IP: 10.0.20.29\n      Public DNS: ec2-52-23-199-253.compute-1.amazonaws.com\n\nInstances running in lab 'dtr-volume-1':\n\n    Name:         jbaker-dtr\n      Lab:        dtr-volume-1\n      Region:     us-east-1\n      IP:         54.84.220.19\n      Private IP: 10.0.14.143\n      Public DNS: ec2-54-84-220-19.compute-1.amazonaws.com\n\njbaker-demo:us-east-1:~$\n```\n\nLab/Instance information is also saved in text files in the `/host/<VCP>/users/<user>` directory\n\n```\njbaker-demo:us-east-1:~$ tree /host\n/host\n├── demo\n│   ├── key-pairs.txt\n│   ├── users\n│   │   └── jbaker\n│   │       ├── base-1.txt\n│   │       ├── dtr-volume-1.txt\n│   │       ├── jbaker-demo.pem\n│   │       └── jbaker-demo.ppk\n│   └── users.cfg\n└── train.env\n\n3 directories, 7 files\njbaker-demo:us-east-1:~$\n```\n\nDelete a lab:\n\n```\njbaker-demo:us-east-1:~$ train -d dtr-volume-1\n\nTerminate request sent for all lab instances ...\nLab 'dtr-volume-1' has been deleted ...\n\njbaker-demo:us-east-1:~$\n```\n\nPurge all instances in the VPC:\n\n```\njbaker-demo:us-east-1:~$ train -p\n\nTerminate request sent for all instances ...\n\njbaker-demo:us-east-1:~$\n```\n\nConfirmation:\n\n```\njbaker-demo:us-east-1:~$ train -l\n\nNo labs running ...\n\njbaker-demo:us-east-1:~$ tree /host/share\n/host/share\n└── jbaker\n    ├── jbaker-demo.pem\n    └── jbaker-demo.ppk\n\n1 directory, 2 files\njbaker-demo:us-east-1:~$\n```\n\nTerminate environment. Removes all VPC objects, labs, instances, and user keys:\n\n```\njbaker-demo:us-east-1:~$ train -t\nTerminating environment ...\n\nVPC has no instances ...\nDeleting IAM Profile: jbaker-demo ...\nDeleting key pair for user: jbaker ...\nDeleting VPC: jbaker-demo ...\nEnvironment deleted ...\nFinished ...\njbaker-demo:us-east-1:~$\n```\n\n## Walk-through - Registration Modes\n\nIn addition to all of the above functionality, **train** provides two **registration modes** that can be used for providing instances to particpants in training events or hands-on lab scenarios.\n\n- Bulk registration\n- Registration (Kiosk) mode\n\n### Bulk Registration\n\nTo use the bulk registration mode you create a user config file. By default, **train** will use a user config file:\n\n- `/host/<VPC>/users.cfg`\n\nOr, you can optionally set a custom file path with the USER_FILE environment variable: https://github.com/kizbitz/train/blob/master/train/vpc/config.py#L52\n\nCreate a **users.cfg** file in your the root of your VPC directory with a list of usernames and emails that will be used when creating key pairs and launching any lab instances.\n\n- One user per line in the format: `<username>,<email>`\n\n```\nvagrant@docker:~/sandbox$ tree\n.\n├── demo\n│   ├── key-pairs.txt\n│   ├── users\n│   │   └── jbaker\n│   │       ├── base-1.txt\n│   │       ├── dtr-volume-1.txt\n│   │       ├── jbaker-demo.pem\n│   │       └── jbaker-demo.ppk\n│   └── users.cfg\n└── train.env\n\n3 directories, 7 files\n\nvagrant@docker:~/sandbox$ vim demo/users.cfg\nvagrant@docker:~/sandbox$ cat demo/users.cfg\njbaker,jbaker@docker.com\nmrcotton,mrcotton@simpledove.com\nvagrant@docker:~/sandbox$\n```\n\n**Note**: This example only has two users specified but there is no limit except for your AWS limits.\n\nRun the container with the environment file and mount a host volume:\n\n```\nvagrant@docker:~/sandbox$ ls -al\ntotal 16\ndrwxr-xr-x 3 vagrant vagrant 4096 Jan 20 11:18 .\ndrwxr-xr-x 5 vagrant vagrant 4096 Jan 20 11:40 ..\ndrwxr-xr-x 3 vagrant vagrant 4096 Jan 20 11:40 demo\n-rw------- 1 vagrant vagrant  183 Jan 20 11:18 train.env\nvagrant@docker:~/sandbox$ docker run -ti --rm --env-file='train.env' -v $(pwd):/host kizbitz/train\njbaker-dev:us-east-1:~$\n```\n\nCreate all keys and VPC:\n\n```\njbaker-demo:us-east-1:~$ train -vk\nCreating AWS VPC ...\nCreating IAM Profile: jbaker-demo ...\nIAM profile, role, and policy created ...\nCreating VPC: jbaker-demo ...\nCreating gateway: jbaker-demo-igw ...\nCreating route table: jbaker-demo-route-table ...\nConfiguring network ACL: jbaker-demo-network-acl ...\n10.0.0.0/20\nCreating subnet: jbaker-demo-us-east-1b ...\n10.0.16.0/20\nCreating subnet: jbaker-demo-us-east-1c ...\n10.0.32.0/20\nCreating subnet: jbaker-demo-us-east-1d ...\n10.0.48.0/20\nCreating subnet: jbaker-demo-us-east-1e ...\nConfiguring default security group ...\nAdding default egress rules ...\nChecking for existing key pair: jbaker-demo ...\nCreating key pair: jbaker-demo ...\nKey 'jbaker-demo' created and saved ...\nChecking for existing key pair: mrcotton-demo ...\nCreating key pair: mrcotton-demo ...\nKey 'mrcotton-demo' created and saved ...\n```\n\nLaunch a lab for all users:\n\n```\njbaker-demo:us-east-1:~$ train -x dtr-volume\nLaunching 'dtr-volume' lab with tag: dtr-volume-1\nLaunching instance: jbaker-dtr ...\nLaunching instance: mrcotton-dtr ...\nWaiting for instances to initialize ...\nWaiting for instance 'jbaker-dtr' to initialize ...\nWaiting for instance 'jbaker-dtr' to initialize ...\nWaiting for instance 'jbaker-dtr' to initialize ...\nWaiting for instance 'mrcotton-dtr' to initialize ...\nCreating instance tags for: jbaker-dtr...\nCreating instance tags for: mrcotton-dtr...\n\nLab 'dtr-volume' launched with tag 'dtr-volume-1':\n\n  Instances:\n\n    Name:         jbaker-dtr\n      Lab:        dtr-volume-1\n      Region:     us-east-1\n      IP:         54.173.183.121\n      Private IP: 10.0.4.30\n      Public DNS: ec2-54-173-183-121.compute-1.amazonaws.com\n\n    Name:         mrcotton-dtr\n      Lab:        dtr-volume-1\n      Region:     us-east-1\n      IP:         54.165.187.76\n      Private IP: 10.0.1.129\n      Public DNS: ec2-54-165-187-76.compute-1.amazonaws.com\n\njbaker-demo:us-east-1:~$\n```\n\nAt this point all user keys and the lab instance information within saved in the container in `/host/share` (and in the host directory):\n\nNote: On Windows open the *.txt files with Wordpad (or some other app that will render the \\n's correctly)\n\n```\njbaker-demo:us-east-1:~$ tree /host/share\n/host/share\n├── jbaker\n│   ├── dtr-volume-1.txt\n│   ├── jbaker-demo.pem\n│   └── jbaker-demo.ppk\n└── mrcotton\n    ├── dtr-volume-1.txt\n    ├── mrcotton-demo.pem\n    └── mrcotton-demo.ppk\n\n2 directories, 6 files\njbaker-demo:us-east-1:~$\n```\n\nList running labs and instances: \n\n```\njbaker-demo:us-east-1:~$ train -l\n\nRunning labs:\n  dtr-volume-1\n\nInstances running in lab 'dtr-volume-1':\n\n    Name:         jbaker-dtr\n      Lab:        dtr-volume-1\n      Region:     us-east-1\n      IP:         54.173.183.121\n      Private IP: 10.0.4.30\n      Public DNS: ec2-54-173-183-121.compute-1.amazonaws.com\n\n    Name:         mrcotton-dtr\n      Lab:        dtr-volume-1\n      Region:     us-east-1\n      IP:         54.165.187.76\n      Private IP: 10.0.1.129\n      Public DNS: ec2-54-165-187-76.compute-1.amazonaws.com\n\njbaker-demo:us-east-1:~$\n```\n\nEmail all users their lab instance information and keys:\n\nNote:\n\n- Requires that you have SES set up correctly on your account - See requirements section above.\n- Recommended that you use a customized email template. See: https://github.com/kizbitz/train/blob/master/train/vpc/config.py#L58\n  - By default **train** will look for an email template in: `/host/<VPC>/email.py`\n  - If `/host/<VPC>/email` does not exist the template that will be used is located here: https://github.com/kizbitz/train/blob/master/train/templates/email.py\n  - You can also specify the email template to use with an `EMAIL_TEMPLATE` environment variable. See: https://github.com/kizbitz/train/blob/master/train/vpc/config.py#L58\n\n```\njbaker-demo:us-east-1:~$ train -e\nEmailing user information and credentials ...\nEnter the 'from email address' for the outgoing message: no-reply@docker.com\nEnter the 'from name' for the outgoing message: Docker Training\nEnter the 'Subject' for the outgoing message: Docker Training Demo\nWelcome email sent to: 'jbaker' <jbaker@docker.com> ...\nWelcome email sent to: 'mrcotton' <mrcotton@simpledove.com> ...\n```\n\nAfter training is complete terminate/purge all instances and VPC.\n\n### Registration Mode\n\nThe alternative method of registration is using the `-r` flag to launch a lab.\n\nThis mode:\n\n- Prompts for a welcome message\n- Displays the welcome message and prompts for an email\n- Creates a username from the email and creates the key pairs\n- Launches the lab and then emails the user the connection info and keys\n\nNotes:\n\n- It's recommend to use a custom email template (with no prompts) that sets:\n  - `from_email`, `from_name`, and `subject` variables with static entries.\n    - See '/home/train/train/templates/email.py' in the container\n- Specify 'EMAIL_TEMPLATE' environment variable with the path to your template\n- The welcome message entered below will be shown to each individial before prompting for email.\n- To exit registration mode type 'exit' during the email prompt.\n\nExample usage:\n\n```\njbaker-demo:us-east-1:~$ train -r dtr-volume\n\nRegistration Mode:\n\n- It's recommend to use a custom email template (with no prompts) that sets:\n    - from_email, from_name, and subject variables with static entries.\n        - See '/home/train/train/templates/email.py'\n    - Specify 'EMAIL_TEMPLATE' environment variable with the path to your template\n\n- The welcome message entered below will be shown to each individial before prompting for email.\n- To exit registration mode type 'exit' during the email prompt.\n\nEnter a welcome message: Welcome to Docker Training!\n```\n\nAfter the welcome message is entered the registration loop starts:\n\n```\nWelcome to Docker Training!\n\nPlease enter a valid email address: jbaker@docker.com\nChecking for existing key pair: jbaker-demo ...\nCreating key pair: jbaker-demo ...\nKey 'jbaker-demo' created and saved ...\nLaunching 'dtr-volume' lab with tag: dtr-volume-1\nLaunching instance: jbaker-dtr ...\nWaiting for instances to initialize ...\nWaiting for instance 'jbaker-dtr' to initialize ...\nWaiting for instance 'jbaker-dtr' to initialize ...\nWaiting for instance 'jbaker-dtr' to initialize ...\nCreating instance tags for: jbaker-dtr...\n\nLab 'dtr-volume' launched with tag 'dtr-volume-1':\n\n  Instances:\n\n    Name:         jbaker-dtr\n      Lab:        dtr-volume-1\n      Region:     us-east-1\n      IP:         52.90.51.247\n      Private IP: 10.0.4.100\n      Public DNS: ec2-52-90-51-247.compute-1.amazonaws.com\n\nEmailing user information and credentials ...\nWelcome email sent to: 'jbaker' <jbaker@docker.com> ...\n\n\n-----------------------------------\n\nInstances launched successfully ...\n\nPress 'Enter' to continue\n```\n\nAfter enter is pressed the welcome message is displayed again and prompts for another email:\n\n```\nWelcome to Docker Training!\n\nPlease enter a valid email address:\n```\n\nWhen using the `-r` flag for registration usernames and emails are collected in the file `/host/registered-users.txt` for use with post-training surveys, etc...:\n\n```\njbaker-demo:us-east-1:~$ cat /host/registered-users.txt\njbaker,jbaker@docker.com\nmrcotton,mrcotton@simpledove.com\n```\n\n## train-images\n\nThe train-images CLI tool is used to manage AMI's for labs. Depending on how long it takes the cloud-init script to finish it can be quicker to create an AMI of the final instance to launch instead of the specified cloud-init script. (Especially during training events and hands-on labs)\n\nNotes:\n\n- Only one AMI is created per instance definition in instances.cfg. This will be the `<name>-0` instance when **NAME** is used in the definition or the zero index of the **NAMES** list. See: https://github.com/kizbitz/train/blob/master/train/labs/template/instances.cfg#L16-L22 \n- When launching a lab **train** checks for existing AMI images for the lab and will use those if present. If not, the standard cloud-init script is used.\n\n### Example usage\n\nExecuting `train-images` without any arguments will display help:\n\n```\njbaker-demo:us-east-1:~$ train-images\nusage: train-images [-h] [-c <lab>] [-d <lab>] [-l] [-r]\n\nTrain: AWS CLI AMI Management\n\noptional arguments:\n  -h, --help  show this help message and exit\n  -c <lab>    Create lab AMI's\n  -d <lab>    Deregister lab AMI's\n  -l          List all AMI's\n  -r          List running labs\njbaker-demo:us-east-1:~$\n```\n\nList running labs:\n\n```\njbaker-demo:us-east-1:~$ train-images -r\n\nRunning labs:\n  dtr-volume-1\n\njbaker-demo:us-east-1:~$\n```\n\nCreate AMI's for a lab:\n\n```\njbaker-demo:us-east-1:~$ train-images -c dtr-volume-1\nCreating AMI's for lab: dtr-volume-1\nCompleted ...\n```\n\nNote: Depending on the current state of the AWS workers it could take a while before the final image is available.\n\nList all AMI's\n\n```\njbaker-demo:us-east-1:~$ train-images -l\n\nAWS AMI's:\n\n  ID: ami-94bfe4fe\n  Name: jbaker-demo-dtr-volume-ubuntu-0\n  Description: dtr-volume lab AMI\n  Region: us-east-1\n  Tags:\n     Name: jbaker-demo-dtr-volume-ubuntu-0\n     AMI-Key: 0\n     Lab: dtr-volume\n\njbaker-demo:us-east-1:~$\n```\n\nDeregistering an AMI:\n\n```\njbaker-demo:us-east-1:~$ train-images -d dtr-volume\nDegristering jbaker-demo-dtr-volume-ubuntu-0 ...\nCompleted ...\njbaker-demo:us-east-1:~$\n```\n\n## train-users\n\n**train-users** is a CLI tool for current AWS administrators to manage new **train** users.\n\nExecuting `train-users` without any arguments will display help:\n\n```\njbaker-demo:us-east-1:~$ train-users\nusage: train-users [-h] [-c <user>] [-d <user>] [-l",
  "permissions": {
    "read": true,
    "write": false,
    "admin": false
  },
  "media_types": [
    "application/vnd.docker.container.image.v1+json",
    "application/vnd.docker.distribution.manifest.v1+prettyjws"
  ],
  "content_types": [
    "image"
  ]
}