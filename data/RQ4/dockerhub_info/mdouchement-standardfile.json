{
  "user": "mdouchement",
  "name": "standardfile",
  "namespace": "mdouchement",
  "repository_type": "image",
  "status": 1,
  "status_description": "active",
  "description": "Yet Another Standardfile Implementation written in Golang",
  "is_private": false,
  "is_automated": false,
  "can_edit": false,
  "star_count": 0,
  "pull_count": 36820,
  "last_updated": "2023-01-04T00:26:30.765756Z",
  "date_registered": "2019-04-07T18:03:42.460952Z",
  "collaborator_count": 0,
  "affiliation": null,
  "hub_user": "mdouchement",
  "has_starred": false,
  "full_description": "# Yet Another Standardfile Implementation in Go\n\n[![GoDoc](https://img.shields.io/badge/godoc-reference-blue.svg)](https://pkg.go.dev/github.com/mdouchement/standardfile)\n[![Go Report Card](https://goreportcard.com/badge/github.com/mdouchement/standardfile)](https://goreportcard.com/report/github.com/mdouchement/standardfile)\n[![License](https://img.shields.io/github/license/mdouchement/standardfile.svg)](http://opensource.org/licenses/MIT)\n\nThis is a 100% Golang implementation of the [Standard File](https://standardfile.org/) protocol. It aims to be **portable** and **lightweight**.\n\n### Running your own server\n\nYou can run your own Standard File server, and use it with any SF compatible client (like Standard Notes).\nThis allows you to have 100% control of your data.\nThis server implementation is built with Go and can be deployed in seconds.\n\nhttps://hub.docker.com/r/mdouchement/standardfile\n\n### Client library\n\nGo to `pgk/libsf` for more details.\nhttps://godoc.org/github.com/mdouchement/standardfile/pkg/libsf\n\nIt is an alternative to https://github.com/jonhadfield/gosn\n\n### SF client\n\n```sh\ngo run cmd/sfc/main.go -h\n```\n\nTerminal UI client:\n![sfc note](https://user-images.githubusercontent.com/6150317/62490536-c997f780-b7c9-11e9-867a-bc619d286b31.png)\n\n## Requirements\n\n- Golang 1.11.x (Go Modules)\n\n### Technologies / Frameworks\n\n- [Cobra](https://github.com/spf13/cobra)\n- [Echo](https://github.com/labstack/echo)\n- [BoltDB](https://github.com/etcd-io/bbolt) + [Storm](https://github.com/asdine/storm) Toolkit\n- [Gowid](https://github.com/gcla/gowid)\n\n\n## Differences with reference implementation\n\n<details>\n<summary>Drop legacy support for clients which hardcoded the \"api\" path to the base url (iOS)</summary>\n\n> [Permalink](https://github.com/standardfile/ruby-server/blob/0a48c2625afc21966b110e0f73a1ff7bd212dbf4/config/routes.rb#L19-L26)\n\n</details>\n\n<details>\n<summary>Drop the POST request done on Extensions (backups too)</summary>\n\n> [Permalink](https://github.com/standardfile/ruby-server/blob/09b2020313a54668b7c6c0e122bbc8a530767d06/app/controllers/api/items_controller.rb#L20-L45)\n\nThis feature is pretty undocumented and I feel uncomfortable about the outgoing traffic from my server on unknown URLs.\n\n</details>\n\n<details>\n<summary>Drop V1 support</summary>\n\n> [All stuff used in v1 and not in v2 nor v3](https://github.com/standardfile/standardfile.github.io/blob/master/doc/spec-001.md)\n\n</details>\n\n<details>\n<summary>JWT revocation strategy after password update</summary>\n\n> Reference implementation use a [pw_hash](https://github.com/standardfile/ruby-server/blob/0a48c2625afc21966b110e0f73a1ff7bd212dbf4/app/controllers/api/api_controller.rb#L37-L43) claim to check if the user has changed their pw and thus forbid them from access if they have an old jwt.\n\n<hr>\n\n> Here we will revoke JWT based on its `iat` claim and `User.PasswordUpdatedAt` field.\n> Looks more safer than publicly expose any sort of password stuff.\n> See `internal/server/middlewares/current_user.go`\n\n</details>\n\n<details>\n<summary>Session use PASETO tokens instead of random tokens</summary>\n\n> Here we will be using PASETO to strengthen authentication to ensure that the tokens are issued by the server.\n\n</details>\n\n## Not implemented (yet)\n\n- **2FA** (aka `verify_mfa`)\n- Postgres if a more stronger database is needed\n- A console for admin usage\n\n\n## License\n\n**MIT**\n\n\n## Contributing\n\nAll PRs are welcome.\n\n1. Fork it\n2. Create your feature branch (git checkout -b my-new-feature)\n3. Commit your changes (git commit -am 'Add some feature')\n5. Push to the branch (git push origin my-new-feature)\n6. Create new Pull Request\n",
  "permissions": {
    "read": true,
    "write": false,
    "admin": false
  },
  "media_types": [
    "application/vnd.docker.container.image.v1+json"
  ],
  "content_types": [
    "image"
  ]
}