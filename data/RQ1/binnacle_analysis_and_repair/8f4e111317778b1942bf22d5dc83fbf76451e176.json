{
  "startTime": 1674243692892,
  "endTime": 1674243693122,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 7,
        "lineEnd": 7,
        "columnStart": 4,
        "columnEnd": 77
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 16,
        "lineEnd": 16,
        "columnStart": 4,
        "columnEnd": 53
      }
    },
    {
      "rule": "yarnCacheCleanAfterInstall",
      "position": {
        "lineStart": 23,
        "lineEnd": 23,
        "columnStart": 4,
        "columnEnd": 16
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 6,
        "lineEnd": 6,
        "columnStart": 22,
        "columnEnd": 56
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 10,
        "lineEnd": 10,
        "columnStart": 22,
        "columnEnd": 63
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 18,
        "lineEnd": 18,
        "columnStart": 23,
        "columnEnd": 46
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 6,
        "lineEnd": 6,
        "columnStart": 22,
        "columnEnd": 56
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 10,
        "lineEnd": 10,
        "columnStart": 22,
        "columnEnd": 63
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 18,
        "lineEnd": 18,
        "columnStart": 23,
        "columnEnd": 46
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM nginx:1.13.6\n# Start from nginx, because when we're production, we run nginx\n\nLABEL maintainer=\"aleith@crcsi.com.au\"\n\n# Install the latest node\nRUN apt-get update && apt-get install --no-install-recommends -y curl gnupg2 git && rm -rf /var/lib/apt/lists/*;\nRUN curl -f -sL https://deb.nodesource.com/setup_8.x -o /tmp/nodesource_setup.sh\nRUN bash /tmp/nodesource_setup.sh\n\nRUN apt-get update && apt-get install --no-install-recommends -y nodejs build-essential && rm -rf /var/lib/apt/lists/*;\n\nENV APPDIR=/code\nWORKDIR $APPDIR\n\n# Install node requirements with yarn, it's better\nRUN curl -f -sS https://dl.yarnpkg.com/debian/pubkey.gpg | apt-key add -\nRUN echo \"deb https://dl.yarnpkg.com/debian/ stable main\" | tee /etc/apt/sources.list.d/yarn.list\nRUN apt-get update && apt-get install --no-install-recommends -y yarn && rm -rf /var/lib/apt/lists/*;\n\n# Do the package install\nADD package.json $APPDIR/\nADD yarn.lock $APPDIR/\nRUN yarn install && yarn cache clean;\n\n# Set up Nginx\nADD build/nginx-www.conf /etc/nginx/nginx.conf\nADD build/nginx-www-default.conf /etc/nginx/conf.d/default.conf\n\n# We need a build environment variable to switch settings with\n# IMPORTANT NOTE: this is passed in, somehow, from the docker cloud build environment.\n# TODO: document how it works... it's the Git branch that is building.\nARG ENVIRONMENT\n\n# Set up the files to build with\nADD build $APPDIR/build\nADD config $APPDIR/config\nADD static $APPDIR/static\nADD .eslintrc.js $APPDIR/\n\n# Add in the project files\nADD client $APPDIR/client\n\n# Build\nRUN npm run build\n\nRUN rm -rf /usr/share/nginx/html && mv $APPDIR/dist /usr/share/nginx/html\nRUN rm -rf $APPDIR/*\n\n# In the case of dev, we repopulate the $APPDIR directory\n# and run from there with live sources\n"
}