{
  "startTime": 1674249727948,
  "endTime": 1674249728314,
  "originalSmells": [
    {
      "rule": "wgetUseHttpsUrl",
      "position": {
        "lineStart": 136,
        "lineEnd": 136,
        "columnStart": 0,
        "columnEnd": 52
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 142,
        "lineEnd": 145,
        "columnStart": 0,
        "columnEnd": 11
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 156,
        "lineEnd": 195,
        "columnStart": 0,
        "columnEnd": 25
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 130,
        "lineEnd": 131,
        "columnStart": 0,
        "columnEnd": 14
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 206,
        "lineEnd": 207,
        "columnStart": 0,
        "columnEnd": 16
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 212,
        "lineEnd": 213,
        "columnStart": 0,
        "columnEnd": 31
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# set base os\nFROM phusion/baseimage:0.9.16\n\n# Set correct environment variables\nENV DEBIAN_FRONTEND=noninteractive HOME=\"/root\" TERM=xterm LANG=en_US.UTF-8 LANGUAGE=en_US:en LC_ALL=en_US.UTF-8\n\n# set ports\nEXPOSE 9777/udp 8080/tcp\n\n# Add local files\nADD src/ /root/\n\n# Set the locale\nRUN locale-gen en_US.UTF-8 && \\\n\n# set kodi checkout version as variable\nkodiCheckout=14.2-Helix && \\\n\n# Configure user nobody to match unRAID's settings\nusermod -u 99 nobody && \\\nusermod -g 100 nobody && \\\nusermod -d /home nobody && \\\nchown -R nobody:users /home && \\\n\n# move startup files and set permissions\nmkdir /etc/service/xbmc && \\\nmv /root/kodi.sh /etc/service/xbmc/run && \\\nmv /root/firstrun.sh /etc/my_init.d/firstrun.sh && \\\nchmod +x /etc/service/xbmc/run && \\\nchmod +x /etc/my_init.d/firstrun.sh && \\\n\n# set build dependencies as variable\nbuildDeps=\"build-essential \\\nzip \\\nunzip \\\nyasm \\\ngawk \\\ncmake \\\nwget \\\ngit-core \\\nautoconf \\\nlibtool \\\nautomake \\\nautopoint \\\nswig \\\ndoxygen \\\nopenjdk-7-jre-headless \\\ngperf \\\nlibsqlite3-dev \\\nlibpcre3-dev \\\nlibtag1-dev \\\nlibbluray-dev \\\nlibjasper-dev \\\nlibmicrohttpd-dev \\\nlibavahi-client-dev \\\nlibxrandr-dev \\\nlibssh-dev \\\nlibsmbclient-dev \\\nlibnfs-dev \\\nlibboost1.54-dev \\\npython-dev \\\nlibmysqlclient-dev \\\nlibgle3-dev \\\nlibglew-dev \\\nlibass-dev \\\nlibmpeg2-4-dev \\\nlibjpeg-dev \\\nlibflac-dev \\\nlibvorbis-dev \\\nlibgnutls-dev \\\nlibbz2-ocaml-dev \\\nlibtiff5-dev \\\nlibyajl-dev \\\nlibssl-dev \\\nlibxml2-dev \\\nlibxslt-dev \\\nlibiso9660-dev \\\nlibtinyxml-dev \\\nlibmodplug-dev \\\nlibsdl1.2-dev \\\nlibsdl-ocaml-dev \\\nliblzo2-dev\" && \\\n\n# set runtime dependencies as variable\nruntimeDeps=\"zip \\\nlibpcrecpp0 \\\nlibtag1-vanilla \\\nlibtag1c2a \\\nlibaacs0 \\\nlibbluray1 \\\nlibjasper1 \\\nlibjpeg-turbo8 \\\nlibjpeg8 \\\nlibmicrohttpd10 \\\nlibavahi-client3 \\\nlibavahi-common-dev \\\nlibdbus-1-dev \\\nlibssh-4 \\\nlibsmbclient \\\nlibnfs1 \\\nlibmysqlclient18 \\\nlibgle3 \\\nlibglew1.10 \\\nlibass4 \\\nlibmpeg2-4 \\\nlibjpeg-turbo8 \\\nlibflac8 \\\nlibogg0 \\\nlibvorbis0a \\\nlibvorbisenc2 \\\nlibvorbisfile3 \\\nlibbz2-ocaml \\\nlibtiff5 \\\nlibtiffxx5 \\\nlibyajl2 \\\nlibxslt1.1 \\\nlibiso9660-8 \\\nlibtinyxml2.6.2 \\\nliblzo2-2 \\\nlibxrandr2 \\\nlibmodplug1 \\\nlibsdl1.2debian \\\nlibsdl-ocaml \\\nunzip\" && \\\n\n# update apt\nmv /root/excludes /etc/dpkg/dpkg.cfg.d/excludes && \\\napt-get update -qq && \\\n\n# Install build dependencies\napt-get install --no-install-recommends \\\n$buildDeps -qy && \\\n\n# fetch source packages\ncd /tmp/ && \\\ngit clone https://github.com/xbmc/xbmc.git && \\\n wget https://curl.haxx.se/download/curl-7.43.0.tar.gz && \\\n\n# compile curl\ncd /tmp && \\\ntar xvf curl-* && \\\ncd curl-* && \\\n ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" \\\n--prefix=/usr \\\n--with-ssl \\\n--with-zlib && \\\nmake && \\\nmake install && \\\n\n# checkout required branch, apply patch(es), configure and build kodi\ncd /tmp/xbmc && \\\nmv /root/headless.patch . && \\\ngit checkout $kodiCheckout && \\\ngit apply headless.patch && \\\n# Configure, make, install kodi\n./bootstrap && \\\n ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" \\\n--enable-nfs \\\n--enable-upnp \\\n--enable-ssh \\\n--enable-libbluray \\\n--disable-debug \\\n--disable-vdpau \\\n--disable-vaapi \\\n--disable-crystalhd \\\n--disable-vdadecoder \\\n--disable-vtbdecoder \\\n--disable-openmax \\\n--disable-joystick \\\n--disable-rsxs \\\n--disable-projectm \\\n--disable-rtmp \\\n--disable-airplay \\\n--disable-airtunes \\\n--disable-dvdcss \\\n--disable-optical-drive \\\n--disable-libusb \\\n--disable-libcec \\\n--disable-libmp3lame \\\n--disable-libcap \\\n--disable-udev \\\n--disable-libvorbisenc \\\n--disable-asap-codec \\\n--disable-afpclient \\\n--disable-goom \\\n--disable-fishbmc \\\n--disable-spectrum \\\n--disable-waveform \\\n--disable-avahi \\\n--disable-non-free \\\n--disable-texturepacker \\\n--disable-pulse \\\n--disable-dbus \\\n--disable-alsa \\\n--disable-hal \\\n--prefix=/opt/kodi-server && \\\nmake && \\\nmake install && \\\nchown -R nobody:users /opt/kodi-server && \\\n\n# clean build area of no longer required dependencies and build files\napt-get purge -y --remove \\\n$buildDeps && \\\napt-get -y autoremove && \\\n\n# install runtime dependencies\napt-get install --no-install-recommends \\\n$runtimeDeps -qy && \\\n\n# install kodisend\nadd-apt-repository ppa:team-xbmc/ppa && \\\napt-get update -qq && \\\n apt-get install --no-install-recommends \\\nkodi-eventclients-xbmc-send -qy && \\\n\n# remove un-needed repositories\nadd-apt-repository --remove ppa:team-xbmc/ppa && \\\n\n# clean up\ncd / && \\\napt-get clean && \\\nrm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/* \\\n/usr/share/man /usr/share/groff /usr/share/info \\\n/usr/share/lintian /usr/share/linda /var/cache/man && \\\n(( find /usr/share/doc -depth -type f ! -name copyright|xargs rm || true )) && \\\n(( find /usr/share/doc -empty|xargs rmdir || true ))\n"
}