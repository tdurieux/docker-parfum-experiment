{
  "startTime": 1674240707211,
  "endTime": 1674240707454,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 36,
        "lineEnd": 36,
        "columnStart": 4,
        "columnEnd": 38
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 61,
        "lineEnd": 61,
        "columnStart": 4,
        "columnEnd": 49
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 72,
        "lineEnd": 72,
        "columnStart": 4,
        "columnEnd": 42
      }
    },
    {
      "rule": "yumInstallRmVarCacheYum",
      "position": {
        "lineStart": 4,
        "lineEnd": 4,
        "columnStart": 4,
        "columnEnd": 54
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "ARG BASE_IMAGE_NAME\n\nFROM $BASE_IMAGE_NAME\n\nRUN yum install -y java-1.8.0-openjdk iptables iproute && rm -rf /var/cache/yum\n\n# Prepare systemd environment.\nENV container docker\n\nRUN (cd /lib/systemd/system/sysinit.target.wants/; for i in *; do [ $i == systemd-tmpfiles-setup.service ] || rm -f $i; done); \\\n    rm -f /lib/systemd/system/multi-user.target.wants/*; \\\n    rm -f /etc/systemd/system/*.wants/*; \\\n    rm -f /lib/systemd/system/local-fs.target.wants/*; \\\n    rm -f /lib/systemd/system/sockets.target.wants/*udev*; \\\n    rm -f /lib/systemd/system/sockets.target.wants/*initctl*; \\\n    rm -f /lib/systemd/system/basic.target.wants/*; \\\n    rm -f /lib/systemd/system/anaconda.target.wants/*; \\\n    ln -vf /lib/systemd/system/multi-user.target /lib/systemd/system/default.target\n\nRUN for service in\\\n    console-getty.service\\\n    dbus.service\\\n    dbus.socket\\\n    dev-hugepages.mount\\\n    getty.target\\\n    sys-fs-fuse-connections.mount\\\n    systemd-logind.service\\\n    systemd-remount-fs.service\\\n    systemd-vconsole-setup.service\\\n    ; do systemctl mask $service; done\n\n# Prepare Docker environment.\nARG DOCKER_URL=https://download.docker.com/linux/static/stable/x86_64/docker-17.12.0-ce.tgz\n\nRUN mkdir -p /etc/docker && \\\n    touch /etc/docker/env && \\\n    curl -f -s $DOCKER_URL -o /docker.tgz && \\\n    tar -xzvf /docker.tgz -C /usr/local/bin --strip 1 && \\\n    rm -f /docker.tgz\n\nRUN groupadd docker\n\nCOPY docker.service /usr/lib/systemd/system/docker.service\nCOPY docker_env.sh /etc/docker/env.sh\nCOPY docker_daemon.json /etc/docker/daemon.json\n\n# Prepare Mesos environment.\nRUN chmod +x /usr/bin/mesos-init-wrapper && \\\n    rm -f /etc/mesos-master/work_dir && \\\n    rm -f /etc/mesos-slave/work_dir && \\\n    mkdir -p /etc/mesos/resource_providers && \\\n    mkdir -p /etc/mesos/cni && \\\n    mkdir -p /usr/libexec/mesos/cni\n\nCOPY mesos/master_environment /etc/default/mesos-master\nCOPY mesos/agent_environment /etc/default/mesos-agent\nCOPY mesos/modules /etc/mesos/modules\n\n# Prepare CNI environment.\nARG CNI_PLUGINS_URL=https://github.com/containernetworking/plugins/releases/download/v0.7.4/cni-plugins-amd64-v0.7.4.tgz\n\nRUN curl -f -sL $CNI_PLUGINS_URL -o /cni-plugins.tgz && \\\n    tar xzvf /cni-plugins.tgz -C /usr/libexec/mesos/cni && \\\n    rm -f /cni-plugins.tgz\n\nCOPY mesos/ucr-default-bridge.json /etc/mesos/cni/\n\n# Prepare Marathon environment.\nARG MARATHON_URL=https://downloads.mesosphere.com/marathon/releases/1.6.322/marathon-1.6.322-2bf46b341.tgz\nARG MARATHON_INSTALL_DIR=/usr/local/marathon\n\nRUN mkdir -p $MARATHON_INSTALL_DIR && \\\n    curl -f -s $MARATHON_URL -o /marathon.tgz && \\\n    tar -xzvf /marathon.tgz -C $MARATHON_INSTALL_DIR --strip 1 && \\\n    rm -f /marathon.tgz\n\nCOPY marathon.sh $MARATHON_INSTALL_DIR/bin/\nCOPY marathon.service /usr/lib/systemd/system/marathon.service\n\nRUN systemctl enable docker mesos-slave mesos-master marathon\n\n# Prepare entrypoint.\nCOPY entrypoint.sh /\n\nCMD [\"/entrypoint.sh\"]\n\nSTOPSIGNAL SIGRTMIN+3\n"
}