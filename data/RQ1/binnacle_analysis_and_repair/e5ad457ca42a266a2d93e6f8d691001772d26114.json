{
  "startTime": 1674234074163,
  "endTime": 1674234074211,
  "originalSmells": [
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 15,
        "lineEnd": 17,
        "columnStart": 0,
        "columnEnd": 10
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 15,
        "lineEnd": 17,
        "columnStart": 0,
        "columnEnd": 10
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# The base image â€“ 14.04 still the latest LTS package as of \n# 18 Feb 2016 \nFROM ubuntu:14.04 \nMAINTAINER Andrew Morgan \"andrew.morgan@mongodb.com\" \n# \"ENV\" sets environment variables within the container and for any \n# Dockerfile commands below this point \nENV REFRESHED_AT 2016-2-18 \n# AGENT_PACKAGE set to the name of the automation agent package file within \n# the container's file system \nENV AGENT_PACKAGE mongodb-mms-automation-agent-manager_latest_amd64.deb \n\n# Refreshes the APT package cache within the image (in a layer on top of the \n# base image) and then installs \"Common CA certificates\" and \"Cyrus SASL - \n# authentication abstraction library\" packages. \nRUN apt-get -qqy update && \\\n apt-get install --no-install-recommends -qqy \\\nca-certificates \\\nlibsasl2-2 && rm -rf /var/lib/apt/lists/*;\n\n# MongoDB Cloud Manager automation \n# Create a volume for the automation agent and mongod to use; run \n# `docker inspect container_name` on the Docker host to see what directory \n# on the host it gets mapped to \nVOLUME [\"/var/lib/mongodb-mms-automation\", \"/data\"] \n\n# Copies the automation agent package from the directory from which the \n# image is being developed into the image's /root directory \nADD ./${AGENT_PACKAGE} /root/ \n\n# Install the automation agent package in the image \nRUN dpkg -i /root/${AGENT_PACKAGE} \n\n# Change the owner for that directory within the image \nRUN chown mongodb:mongodb /data \n\n# informs Docker that the container listens on port 2700 (default MMS \n# automation port) at runtime. \n# EXPOSE does not make the ports of the container accessible to the host. To \n# do that, you must use either the -p flag to publish a range of ports or the \n# -P flag to publish all of the exposed ports. You can expose one port number \n# and publish it externally under another number. \nEXPOSE 27000 \n# Execute the automation agent when the container is run; command line \n# arguments after the image name in `docker run ...` will be passed through. \n# Can override with `docker run --entrypoint` \nENTRYPOINT [\"/opt/mongodb-mms-automation/bin/mongodb-mms-automation-agent\"] \n\n"
}