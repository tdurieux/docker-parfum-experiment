{
  "startTime": 1674245309273,
  "endTime": 1674245310610,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 143,
        "lineEnd": 143,
        "columnStart": 4,
        "columnEnd": 50
      }
    },
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 149,
        "lineEnd": 149,
        "columnStart": 4,
        "columnEnd": 19
      }
    },
    {
      "rule": "wgetUseHttpsUrl",
      "position": {
        "lineStart": 99,
        "lineEnd": 99,
        "columnStart": 4,
        "columnEnd": 87
      }
    },
    {
      "rule": "wgetUseHttpsUrl",
      "position": {
        "lineStart": 100,
        "lineEnd": 100,
        "columnStart": 7,
        "columnEnd": 94
      }
    },
    {
      "rule": "wgetUseHttpsUrl",
      "position": {
        "lineStart": 285,
        "lineEnd": 285,
        "columnStart": 4,
        "columnEnd": 51
      }
    },
    {
      "rule": "wgetUseHttpsUrl",
      "position": {
        "lineStart": 304,
        "lineEnd": 304,
        "columnStart": 4,
        "columnEnd": 53
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 279,
        "lineEnd": 279,
        "columnStart": 27,
        "columnEnd": 50
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 273,
        "lineEnd": 273,
        "columnStart": 7,
        "columnEnd": 18
      }
    },
    {
      "rule": "yumInstallRmVarCacheYum",
      "position": {
        "lineStart": 17,
        "lineEnd": 17,
        "columnStart": 21,
        "columnEnd": 48
      }
    },
    {
      "rule": "yumInstallRmVarCacheYum",
      "position": {
        "lineStart": 19,
        "lineEnd": 76,
        "columnStart": 21,
        "columnEnd": 7
      }
    },
    {
      "rule": "yumInstallRmVarCacheYum",
      "position": {
        "lineStart": 86,
        "lineEnd": 86,
        "columnStart": 4,
        "columnEnd": 50
      }
    },
    {
      "rule": "yumInstallRmVarCacheYum",
      "position": {
        "lineStart": 144,
        "lineEnd": 144,
        "columnStart": 4,
        "columnEnd": 25
      }
    },
    {
      "rule": "yumInstallRmVarCacheYum",
      "position": {
        "lineStart": 201,
        "lineEnd": 210,
        "columnStart": 4,
        "columnEnd": 5
      }
    },
    {
      "rule": "yumInstallRmVarCacheYum",
      "position": {
        "lineStart": 223,
        "lineEnd": 223,
        "columnStart": 7,
        "columnEnd": 78
      }
    },
    {
      "rule": "yumInstallRmVarCacheYum",
      "position": {
        "lineStart": 235,
        "lineEnd": 235,
        "columnStart": 7,
        "columnEnd": 69
      }
    },
    {
      "rule": "yumInstallRmVarCacheYum",
      "position": {
        "lineStart": 254,
        "lineEnd": 254,
        "columnStart": 4,
        "columnEnd": 29
      }
    },
    {
      "rule": "yumInstallRmVarCacheYum",
      "position": {
        "lineStart": 313,
        "lineEnd": 313,
        "columnStart": 4,
        "columnEnd": 30
      }
    },
    {
      "rule": "yumInstallRmVarCacheYum",
      "position": {
        "lineStart": 351,
        "lineEnd": 354,
        "columnStart": 4,
        "columnEnd": 16
      }
    },
    {
      "rule": "yumInstallRmVarCacheYum",
      "position": {
        "lineStart": 366,
        "lineEnd": 366,
        "columnStart": 7,
        "columnEnd": 41
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# docker build -t math-server:latest --build-arg http_proxy=\"http://proxy:8080\" --build-arg https_proxy=\"http://proxy:8080\" .\n\n# In case you're building the image behind a proxy, use\n# docker build -t math-server:latest --build-arg http_proxy=\"http://proxy:8080\" --build-arg https_proxy=\"http://proxy:8080\" .\n\n# 8787 for RStudio\n# 8000 for Jupyter\n\n# docker run -d -p 8787:8787 -p 8000:8000 --name ms1 math-server\n\nFROM centos:7\n\nMAINTAINER felipenoris <felipenoris@users.noreply.github.com>\n\nWORKDIR /root\n\nRUN yum update -y && yum install -y epel-release && yum clean all && rm -rf /var/cache/yum\n\nRUN yum update -y && yum install -y \\\n    p7zip \\\n    p7zip-plugins \\\n    bison \\\n    bzip2 \\\n    bzip2-devel \\\n    cmake \\\n    curl-devel \\\n    cronie \\\n    czmq \\\n    expat-devel \\\n    file \\\n    flex \\\n    fontconfig-devel \\\n    gcc \\\n    gcc-c++ \\\n    gcc-gfortran \\\n    gdb \\\n    gettext-devel \\\n    glibc-devel \\\n    gperf \\\n    java-1.8.0-openjdk-devel \\\n    lynx \\\n    libaio \\\n    libattr-devel \\\n    libcurl \\\n    libcurl-devel \\\n    libedit-devel libffi-devel \\\n    libgcc \\\n    libstdc++-static \\\n    libtool \\\n    m4 \\\n    make \\\n    man \\\n    nano \\\n    nload \\\n    neovim \\\n    htop \\\n    openssl \\\n    openssl098e \\\n    openssl-devel \\\n    patch \\\n    perl-ExtUtils-MakeMaker \\\n    svn \\\n    unzip \\\n    valgrind \\\n    ruby \\\n    ruby-devel \\\n    sqlite \\\n    sqlite-devel \\\n    squashfs-tools \\\n    telnet \\\n    vim \\\n    wget \\\n    zeromq \\\n    zlib \\\n    zlib-devel \\\n    zip \\\n    && yum clean all && rm -rf /var/cache/yum\n\nENV PATH /usr/local/sbin:/usr/local/bin:$PATH\n\nENV CPATH /usr/include/glpk\n\nENV LD_LIBRARY_PATH /usr/local/lib:/usr/local/lib64\n\n# TeX\nRUN yum -y install perl-Tk perl-Digest-MD5 xorriso && yum clean all && rm -rf /var/cache/yum\n\nADD texlive.profile texlive.profile\n\n# Offline TeX Live installation\n# https://tex.stackexchange.com/questions/370256/how-to-install-tex-live-offline-on-ubuntu\n# https://stackoverflow.com/questions/22028795/is-it-possible-to-mount-an-iso-inside-a-docker-container\n# http://www.gnu.org/software/xorriso/\n# non-interactive http://www.tug.org/pipermail/tex-live/2008-June/016323.html\n# Official link: http://mirror.ctan.org/systems/texlive/tlnet/install-tl-unx.tar.gz\n\nENV TEXLIVE_VERSION 2019\n\nRUN wget https://mirrors.rit.edu/CTAN/systems/texlive/Images/texlive$TEXLIVE_VERSION.iso \\\n    && wget https://mirrors.rit.edu/CTAN/systems/texlive/Images/texlive$TEXLIVE_VERSION.iso.md5 \\\n    && RESULT=$(md5sum -c texlive$TEXLIVE_VERSION.iso.md5) \\\n    && echo ${RESULT} > ~/check-texlive-md5.txt \\\n    && osirrox -indev ./texlive$TEXLIVE_VERSION.iso -extract / ./texlive_install \\\n    && rm -f texlive$TEXLIVE_VERSION.iso \\\n    && ./texlive_install/install-tl -profile ./texlive.profile \\\n    && rm -rf texlive_install\n\n# Uncomment lines below to update TeX Live to latest packages\n# Sets texlive update mirror\n# https://tex.stackexchange.com/questions/378210/installing-tl-using-iso-leads-to-local-unknown-repository-tlpdb\n#RUN tlmgr option repository http://mirror.ctan.org/systems/texlive/tlnet\n#RUN tlmgr update --self --all --reinstall-forcibly-removed\n\nENV PATH /usr/local/texlive/distribution/bin/x86_64-linux:$PATH\n\n# GIT - https://git-scm.com/\n# http://tecadmin.net/install-git-2-0-on-centos-rhel-fedora/#\nENV GIT_VER 2.22.0\n\nRUN wget https://www.kernel.org/pub/software/scm/git/git-$GIT_VER.tar.gz \\\n    && tar xf git-$GIT_VER.tar.gz && cd git-$GIT_VER \\\n    && make -j\"$(nproc --all)\" prefix=/usr/local all \\\n    && make prefix=/usr/local -j\"$(nproc --all)\" install \\\n    && cd .. && rm -f git-$GIT_VER.tar.gz && rm -rf git-$GIT_VER\n\n# Makes git use https by default\nRUN git config --global url.\"https://\".insteadOf git://\n\n# llvm needs CMake 2.8.12.2 or higher\n# https://cmake.org/download/\nENV CMAKE_VER_MAJ 3.14\nENV CMAKE_VER_MIN .5\nENV CMAKE_VER $CMAKE_VER_MAJ$CMAKE_VER_MIN\n\nRUN wget https://cmake.org/files/v$CMAKE_VER_MAJ/cmake-$CMAKE_VER.tar.gz \\\n    && tar xf cmake-$CMAKE_VER.tar.gz && cd cmake-$CMAKE_VER \\\n    && ./bootstrap && make -j\"$(nproc --all)\" && make -j\"$(nproc --all)\" install \\\n    && cd .. && rm -rf cmake-$CMAKE_VER && rm -f cmake-$CMAKE_VER.tar.gz\n\nENV CMAKE_ROOT /usr/local/share/cmake-$CMAKE_VER_MAJ\n\n# node https://nodejs.org/en/ - https://tecadmin.net/install-latest-nodejs-and-npm-on-centos/\nRUN curl -f -sL https://rpm.nodesource.com/setup_10.x | bash -\nRUN yum install -y nodejs && rm -rf /var/cache/yum\n\n# reinstall npm with the lastest version\n# Workaround https://github.com/npm/npm/issues/15558\n# with https://github.com/npm/npm/issues/15611#issuecomment-289133810\nRUN npm install npm \\\n    && rm -rf /usr/local/lib/node_modules \\\n    && mv node_modules /usr/local/lib/ && npm cache clean --force;\n\n# Makes npm work behind proxy if http_proxy variable is set\nRUN npm config set proxy ${http_proxy} \\\n    && npm config set https-proxy ${https_proxy} \\\n    && npm config set registry http://registry.npmjs.org/ \\\n    && npm set strict-ssl false\n\n# Anaconda\n# https://repo.continuum.io/archive\nENV CONDA_VER 2019.03\n\nENV PATH $PATH:/usr/local/conda/anaconda3/bin\n\nRUN wget https://repo.continuum.io/archive/Anaconda3-$CONDA_VER-Linux-x86_64.sh \\\n    && bash Anaconda3-$CONDA_VER-Linux-x86_64.sh -b -p /usr/local/conda/anaconda3 \\\n    && rm -f Anaconda3-$CONDA_VER-Linux-x86_64.sh \\\n    && conda update -n base conda -y\n\nRUN conda update --all\n\n# Install py2 and py3 envs, and registers jupyterhub kernels\n# https://github.com/jupyter/jupyter/issues/71\n\n# install everything (except JupyterHub itself) with Python 2 and 3. Jupyter is included in Anaconda.\nRUN conda create -n py3 python=3 anaconda ipykernel \\\n    && conda create -n py2 python=2 anaconda ipykernel\n\n# Set PYTHON env variable to point to Python3. This will be used by PyCall.jl julia package.\nENV PYTHON /usr/local/conda/anaconda3/envs/py3/bin/python\n\n# register py2 kernel\nRUN source activate py2 && python -m ipykernel install\n\nRUN conda install -c conda-forge jupyterhub -y\n\n# ipywidgets: https://github.com/ipython/ipywidgets\nRUN jupyter nbextension enable --py --sys-prefix widgetsnbextension\n\n# Jupyterlab: https://github.com/jupyterlab/jupyterlab\nRUN source activate py3 && conda install -c conda-forge jupyterlab -y\n\n# Integration between jupyterhub and jupyterlab\n# not working: https://github.com/jupyterhub/jupyterlab-hub/issues/78\n#RUN jupyter labextension install @jupyterlab/hub-extension\n\n# Support for other languages\n# https://github.com/jupyter/jupyter/wiki/Jupyter-kernels\n\n# R\nRUN yum -y install \\\n    lapack-devel \\\n    blas-devel \\\n    libicu-devel \\\n    unixodbc-devel \\\n    boost \\\n    boost-devel \\\n    libxml2 \\\n    libxml2-devel \\\n    R \\\n    && yum clean all && rm -rf /var/cache/yum\n\n# Set default CRAN Mirror\nRUN echo 'options(repos = c(CRAN=\"https://ftp.osuosl.org/pub/cran/\"))' >> /usr/lib64/R/library/base/R/Rprofile\n\n# RStudio - https://www.rstudio.com/products/rstudio/download-server/\nENV RSTUDIO_VER 1.2.1335\n\nRUN wget https://download2.rstudio.org/server/centos6/x86_64/rstudio-server-rhel-$RSTUDIO_VER-x86_64.rpm \\\n    && echo \"da696c9823eb1c044f04adf75f722b64  rstudio-server-rhel-$RSTUDIO_VER-x86_64.rpm\" > RSTUDIOMD5 \\\n    && RESULT=$(md5sum -c RSTUDIOMD5) \\\n    && echo ${RESULT} > ~/check-rstudio-md5.txt \\\n    && yum -y install --nogpgcheck rstudio-server-rhel-$RSTUDIO_VER-x86_64.rpm \\\n    && yum clean all \\\n    && rm -f rstudio-server-rhel-$RSTUDIO_VER-x86_64.rpm && rm -f RSTUDIOMD5 && rm -rf /var/cache/yum\n\n# Shiny - https://www.rstudio.com/products/shiny/download-server/\nENV SHINY_VER 1.5.9.923\n\nRUN R -e 'install.packages(\"shiny\", repos=\"https://cran.rstudio.com/\")' \\\n    && wget https://download3.rstudio.org/centos6.3/x86_64/shiny-server-$SHINY_VER-x86_64.rpm \\\n    && echo \"124aed894021af4f6aff22c8112e26bd  shiny-server-$SHINY_VER-x86_64.rpm\" > SHINYSERVERMD5 \\\n    && RESULT=$(md5sum -c SHINYSERVERMD5) \\\n    && echo ${RESULT} > ~/check-shiny-server-md5.txt \\\n    && yum -y install --nogpgcheck shiny-server-$SHINY_VER-x86_64.rpm \\\n    && yum clean all \\\n    && cd && rm -f SHINYSERVERMD5 && rm -f shiny-server-$SHINY_VER-x86_64.rpm && rm -rf /var/cache/yum\n\n# Julia - https://julialang.org/downloads/\nENV JULIA_VER_MAJ 1.1\nENV JULIA_VER_MIN .1\nENV JULIA_VER $JULIA_VER_MAJ$JULIA_VER_MIN\n\nRUN wget https://julialang-s3.julialang.org/bin/linux/x64/$JULIA_VER_MAJ/julia-$JULIA_VER-linux-x86_64.tar.gz \\\n        && mkdir /usr/local/julia \\\n        && tar xf julia-$JULIA_VER-linux-x86_64.tar.gz --directory /usr/local/julia --strip-components=1 \\\n        && ln -s /usr/local/julia/bin/julia /usr/local/bin/julia \\\n        && rm -f julia-$JULIA_VER-linux-x86_64.tar.gz\n\nENV JULIA_PKGDIR /usr/local/julia/share/julia/site\n\n# R\n# http://irkernel.github.io/installation/\nRUN yum -y install czmq-devel && yum clean all && rm -rf /var/cache/yum\n\nRUN R -e \"install.packages(c('repr', 'IRdisplay', 'evaluate', 'crayon', 'pbdZMQ', 'devtools', 'uuid', 'digest'))\"\nRUN R -e \"devtools::install_github('IRkernel/IRkernel')\"\nRUN R -e 'IRkernel::installspec(user = FALSE)'\n#RUN cp -r /usr/lib64/R/library/IRkernel/kernelspec /usr/local/conda/anaconda3/share/jupyter/kernels/R\n\n# Optional configuration file for svn\nADD svn-servers /etc/subversion/servers\n\n# coin SYMPHONY\n# https://projects.coin-or.org/SYMPHONY\nENV SYMPHONY_VER 5.6\n\nRUN git clone --depth=1 --branch=stable/$SYMPHONY_VER https://github.com/coin-or/SYMPHONY SYMPHONY-$SYMPHONY_VER \\\n    && cd SYMPHONY-$SYMPHONY_VER \\\n    && git clone --depth=1 --branch=stable/0.8 https://github.com/coin-or-tools/BuildTools/ \\\n    && chmod u+x ./BuildTools/get.dependencies.sh \\\n    && ./BuildTools/get.dependencies.sh fetch --no-third-party \\\n    && ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" \\\n    && make -j\"$(nproc --all)\" \\\n    && make -j\"$(nproc --all)\" install \\\n    && cd .. && rm -rf SYMPHONY-$SYMPHONY_VER\n\n# bash Jupyter kernel\nRUN source activate py3 && pip install --no-cache-dir bash_kernel \\\n    && python3 -m bash_kernel.install\n\n# pigz: http://zlib.net/pigz/\nENV PIGZ_VER 2.4\n\nRUN wget https://zlib.net/pigz/pigz-$PIGZ_VER.tar.gz \\\n    && tar xf pigz-$PIGZ_VER.tar.gz \\\n    && cd pigz-$PIGZ_VER \\\n    && make -j\"$(nproc --all)\" \\\n    && cp pigz /usr/local/bin \\\n    && cp unpigz /usr/local/bin \\\n    && cd .. && rm -rf pigz-$PIGZ_VER && rm -f pigz-$PIGZ_VER.tar.gz\n\n# uchardet: https://www.freedesktop.org/wiki/Software/uchardet/\nRUN git clone --depth=1 https://anongit.freedesktop.org/git/uchardet/uchardet.git \\\n    && cd uchardet \\\n    && cmake -DCMAKE_INSTALL_PREFIX=/usr/local -DCMAKE_BUILD_TYPE=Release . \\\n    && make -j\"$(nproc --all)\" \\\n    && make install \\\n    && cd .. && rm -rf uchardet\n\nENV JAVA_HOME /etc/alternatives/java_sdk\n\n# Redis (https://redis.io)\nRUN wget https://download.redis.io/redis-stable.tar.gz \\\n    && tar xf redis-stable.tar.gz \\\n    && cd redis-stable \\\n    && make -j\"$(nproc --all)\" \\\n    && make install \\\n    && cd .. && rm -rf redis-stable && rm -f redis-stable.tar.gz\n\n# MongoDB (https://docs.mongodb.com/manual/tutorial/install-mongodb-on-red-hat/)\nADD mongodb-org-4.0.repo /etc/yum.repos.d/mongodb-org-4.0.repo\nRUN yum install -y mongodb-org && rm -rf /var/cache/yum\n\n#################\n## LIBS\n#################\n\n# Optional libraries for packages\n#RUN yum -y install \\\n#   cyrus-sasl-devel \\\n#   freeglut \\\n#   freeglut-devel \\\n#   freetype-devel \\\n#   geos-devel \\\n#   gdal-devel \\\n#   glpk-devel \\\n#   gsl-devel \\\n#   gtk3-devel \\\n#   hdf5 \\\n#   ImageMagick \\\n#   lcms2-devel \\\n#   libjpeg-devel \\\n#   libpng \\\n#   libpng-devel \\\n#   libtiff-devel \\\n#   libtool \\\n#   libwebp-devel \\\n#   libxslt-devel \\\n#   libxml2-devel \\\n#   libzip-devel \\\n#   mpfr-devel \\\n#   pandoc \\\n#   proj-devel \\\n#   proj-epsg \\\n#   proj-nad \\\n#   tcl-devel \\\n#   tk-devel \\\n#   && yum clean all\n\nRUN yum -y install \\\n    hdf5 \\\n    libxml2-devel \\\n    libzip-devel \\\n    && yum clean all && rm -rf /var/cache/yum\n\n# http://ipyparallel.readthedocs.org/en/latest/\n#RUN ipcluster nbextension enable\n\n# Improve link to shared libraries\nENV LD_LIBRARY_PATH $LD_LIBRARY_PATH:/usr/lib64/R/lib:/usr/local/lib:/lib:/usr/lib/jvm/jre/lib/amd64/server:/usr/lib/jvm/jre/lib/amd64:/usr/lib/jvm/java/lib/amd64:/usr/java/packages/lib/amd64:/lib:/usr/lib:/usr/local/lib\n\n# ffmpeg\nRUN rpm --import http://li.nux.ro/download/nux/RPM-GPG-KEY-nux.ro \\\n    && rpm -Uvh http://li.nux.ro/download/nux/dextop/el7/x86_64/nux-dextop-release-0-5.el7.nux.noarch.rpm \\\n    && yum install ffmpeg ffmpeg-devel -y && rm -rf /var/cache/yum\n\n# Altair - https://altair-viz.github.io/installation.html\nRUN conda install altair --channel conda-forge -y\n\n# Plotly for Python\nRUN conda install plotly -y\n\n####################\n## Services\n####################\n\n# 8787 for RStudio\n# 8000 for Jupyter\nEXPOSE 8787 8000\n\nADD jupyterhub_config.py jupyterhub_config.py\n\nENV TERM xterm\n\nCMD /usr/lib/rstudio-server/bin/rserver \\\n    && jupyterhub --no-ssl -f jupyterhub_config.py\n"
}