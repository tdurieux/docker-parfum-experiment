{
  "startTime": 1674251371373,
  "endTime": 1674251372604,
  "originalSmells": [
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 71,
        "lineEnd": 71,
        "columnStart": 4,
        "columnEnd": 80
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 81,
        "lineEnd": 81,
        "columnStart": 4,
        "columnEnd": 15
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 122,
        "lineEnd": 122,
        "columnStart": 4,
        "columnEnd": 97
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 161,
        "lineEnd": 161,
        "columnStart": 4,
        "columnEnd": 60
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 180,
        "lineEnd": 180,
        "columnStart": 4,
        "columnEnd": 88
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 58,
        "lineEnd": 58,
        "columnStart": 4,
        "columnEnd": 71
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 70,
        "lineEnd": 70,
        "columnStart": 4,
        "columnEnd": 45
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 192,
        "lineEnd": 192,
        "columnStart": 4,
        "columnEnd": 45
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 194,
        "lineEnd": 194,
        "columnStart": 4,
        "columnEnd": 40
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 192,
        "lineEnd": 192,
        "columnStart": 4,
        "columnEnd": 45
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 70,
        "lineEnd": 70,
        "columnStart": 4,
        "columnEnd": 45
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 192,
        "lineEnd": 192,
        "columnStart": 4,
        "columnEnd": 45
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 194,
        "lineEnd": 194,
        "columnStart": 4,
        "columnEnd": 40
      }
    }
  ],
  "repairedSmells": [
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 192,
        "lineEnd": 192,
        "columnStart": 4,
        "columnEnd": 69
      }
    }
  ],
  "repairedDockerfile": "# CNTK Dockerfile\n#   CPU only\n#   No 1-bit SGD\n#\n# To build, run from the parent with the command line:\n# \tdocker build -t <image name> -f CNTK-CPUOnly-Image/Dockerfile .\n\nFROM ubuntu:16.04\n\nRUN apt-get update && apt-get install -y --no-install-recommends \\\n        autotools-dev \\\n        build-essential \\\n        git \\\n        g++-multilib \\\n        gcc-multilib \\\n        gfortran-multilib \\\n        libavcodec-dev \\\n        libavformat-dev \\\n        libjasper-dev \\\n        libjpeg-dev \\\n        libpng-dev \\\n        liblapacke-dev \\\n        libswscale-dev \\\n        libtiff-dev \\\n        pkg-config \\\n        wget \\\n        zlib1g-dev \\\n        # OPENSSL support\n        libssl-dev \\\n        openssl \\\n        # Protobuf\n        ca-certificates \\\n        curl \\\n\t\tlibcurl4-openssl-dev \\\n        unzip \\\n        # For Kaldi\n        python-dev \\\n        automake \\\n        libtool-bin \\\n        autoconf \\\n        subversion \\\n        # For Kaldi's dependencies\n        libapr1 libaprutil1 libltdl-dev libltdl7 libserf-1-1 libsigsegv2 libsvn1 m4 \\\n        # For Java Bindings\n        openjdk-8-jdk \\\n        # For SWIG\n        libpcre3-dev \\\n        # For graphics managed lib\n        libgdiplus \\\n        # .NET Core SDK\n        apt-transport-https && \\\n        # Cleanup\n        rm -rf /var/lib/apt/lists/*\n\nARG CMAKE_DOWNLOAD_VERSION=3.11\nARG CMAKE_BUILD_VERSION=4\nRUN DEBIAN_FRONTEND=noninteractive && \\\n    wget --no-verbose https://cntkbuildstorage.blob.core.windows.net/cntk-ci-dependencies/cmake/$CMAKE_DOWNLOAD_VERSION/cmake-$CMAKE_DOWNLOAD_VERSION.$CMAKE_BUILD_VERSION.tar.gz && \\\n    tar -xzvf cmake-$CMAKE_DOWNLOAD_VERSION.$CMAKE_BUILD_VERSION.tar.gz && \\\n    cd cmake-$CMAKE_DOWNLOAD_VERSION.$CMAKE_BUILD_VERSION && \\\n    ./bootstrap --system-curl -- -DCMAKE_USE_OPENSSL=ON && \\\n    make -j $(nproc) install && \\\n    cd .. && \\\n    rm -rf cmake-$CMAKE_DOWNLOAD_VERSION.$CMAKE_BUILD_VERSION && rm cmake-$CMAKE_DOWNLOAD_VERSION.$CMAKE_BUILD_VERSION.tar.gz\n\nARG OPENMPI_VERSION=1.10.7\nRUN wget -q -O - https://cntkbuildstorage.blob.core.windows.net/cntk-ci-dependencies/openmpi/$OPENMPI_VERSION/openmpi-$OPENMPI_VERSION.tar.gz | tar -xzf - && \\\n    cd openmpi-${OPENMPI_VERSION} && \\\n    apt-get -y update && \\\n    apt-get -y -f install && \\\n    apt-get -y --no-install-recommends install libsysfs2 libsysfs-dev && \\\n    ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --with-verbs --with-cuda=/usr/local/cuda --prefix=/usr/local/mpi && \\\n    make -j $(nproc) install && \\\n    cd .. && \\\n    rm -rf openmpi-${OPENMPI_VERSION} && rm -rf /var/lib/apt/lists/*;\nENV PATH /usr/local/mpi/bin:$PATH\nENV LD_LIBRARY_PATH /usr/local/mpi/lib:$LD_LIBRARY_PATH\n\nARG LIBZIP_VERSION=1.1.2\nRUN wget -q -O - https://cntkbuildstorage.blob.core.windows.net/cntk-ci-dependencies/libzip/$LIBZIP_VERSION/libzip-$LIBZIP_VERSION.tar.gz | tar -xzf - && \\\n    cd libzip-${LIBZIP_VERSION} && \\\n    ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" && \\\n    make -j $(nproc) install && \\\n    cd .. && \\\n    rm -rf libzip-${LIBZIP_VERSION}\nENV LD_LIBRARY_PATH /usr/local/lib:$LD_LIBRARY_PATH\n\nARG OPENCV_VERSION=3.1.0\nRUN wget -q -O - https://cntkbuildstorage.blob.core.windows.net/cntk-ci-dependencies/opencv/$OPENCV_VERSION/opencv-$OPENCV_VERSION.tar.gz | tar -xzf - && \\\n    cd opencv-${OPENCV_VERSION} && \\\n    cmake -DWITH_CUDA=OFF -DCMAKE_BUILD_TYPE=RELEASE -DCMAKE_INSTALL_PREFIX=/usr/local/opencv-${OPENCV_VERSION} . && \\\n    make -j $(nproc) install && \\\n    cd .. && \\\n    rm -rf opencv-${OPENCV_VERSION}\n\nARG OPENBLAS_VERSION=0.2.18\nRUN wget -q -O - https://cntkbuildstorage.blob.core.windows.net/cntk-ci-dependencies/openblas/$OPENBLAS_VERSION/OpenBLAS-$OPENBLAS_VERSION.tar.gz | tar -xzf - && \\\n    cd OpenBLAS-${OPENBLAS_VERSION} && \\\n    make -j 2 MAKE_NB_JOBS=0 USE_OPENMP=1 | tee make.log && \\\n    grep -qF 'OpenBLAS build complete. (BLAS CBLAS LAPACK LAPACKE)' make.log && \\\n    grep -qF 'Use OpenMP in the multithreading.' make.log && \\\n    make PREFIX=/usr/local/openblas install && \\\n    cd .. && \\\n    rm -rf OpenBLAS-${OPENBLAS_VERSION}\nENV LD_LIBRARY_PATH /usr/local/openblas/lib:$LD_LIBRARY_PATH\n\n# Install Boost\nARG BOOST_VERSION=1.60.0\nRUN BOOST_UNDERSCORE_VERSION=$(echo $BOOST_VERSION | tr . _) && \\\n    wget -q -O - https://cntkbuildstorage.blob.core.windows.net/cntk-ci-dependencies/boost/$BOOST_VERSION/boost_$BOOST_UNDERSCORE_VERSION.tar.gz | tar -xzf - && \\\n    cd boost_${BOOST_UNDERSCORE_VERSION} && \\\n    ./bootstrap.sh --prefix=/usr/local/boost-${BOOST_VERSION}  && \\\n    ./b2 -d0 -j $(nproc) install && \\\n    cd .. && \\\n    rm -rf boost_${BOOST_UNDERSCORE_VERSION}\n\n# Install Protobuf\nARG PROTOBUF_VERSION=3.1.0\nRUN PROTOBUF_STRING=protobuf-$PROTOBUF_VERSION && \\\n    wget -O - --no-verbose https://cntkbuildstorage.blob.core.windows.net/cntk-ci-dependencies/protobuf/$PROTOBUF_VERSION/protobuf-$PROTOBUF_VERSION.tar.gz | tar -xzf - && \\\n    cd $PROTOBUF_STRING && \\\n    ./autogen.sh && \\\n    ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" CFLAGS=-fPIC CXXFLAGS=-fPIC --disable-shared --prefix=/usr/local/$PROTOBUF_STRING && \\\n    make -j $(nproc) install && \\\n    cd .. && \\\n    rm -rf $PROTOBUF_STRING\n\n# Install MKLDNN and MKLML\nARG MKLDNN_VERSION=0.14\nARG MKLDNN_LONG_VERSION=mklml_lnx_2018.0.3.20180406\nRUN mkdir /usr/local/mklml && \\\n    wget --no-verbose -O - https://cntkbuildstorage.blob.core.windows.net/cntk-ci-dependencies/mkl-dnn/$MKLDNN_VERSION/$MKLDNN_LONG_VERSION.tgz | \\\n    tar -xzf - -C /usr/local/mklml && \\\n    MKLDNN_STRING=mkl-dnn-${MKLDNN_VERSION} && \\\n    wget --no-verbose -O - https://cntkbuildstorage.blob.core.windows.net/cntk-ci-dependencies/mkl-dnn/$MKLDNN_VERSION/mkl-dnn-$MKLDNN_VERSION.tar.gz | tar -xzf - && \\\n    cd ${MKLDNN_STRING} && \\\n    ln -s /usr/local external && \\\n    mkdir -p build && \\\n    cd build && \\\n    cmake .. -DCMAKE_INSTALL_PREFIX=/ && \\\n    make && \\\n    make install DESTDIR=/usr/local && \\\n    make install DESTDIR=/usr/local/mklml/${MKLDNN_LONG_VERSION} && \\\n    cd ../.. && \\\n    rm -rf ${MKLDNN_STRING}\n\n# Install Kaldi\nARG KALDI_VERSION=c024e8aa\nARG KALDI_PATH=/usr/local/kaldi-$KALDI_VERSION\nRUN mv /bin/sh /bin/sh.orig && \\\n    ln -s -f /bin/bash /bin/sh && \\\n    mkdir $KALDI_PATH && \\\n    wget --no-verbose -O - https://cntkbuildstorage.blob.core.windows.net/cntk-ci-dependencies/kaldi/$KALDI_VERSION/kaldi-$KALDI_VERSION.tar.gz | tar -xzf - --strip-components=1 -C $KALDI_PATH && \\\n    cd $KALDI_PATH && \\\n    cd tools && \\\n    perl -pi -e 's/^# (OPENFST_VERSION = 1.4.1)$/\\1/' Makefile && \\\n    ./extras/check_dependencies.sh && \\\n    make -j $(nproc) all && \\\n    cd ../src && \\\n    # remove Fermi support as CUDA 9 no longer works on it\n    perl -pi -e 's/-gencode arch=compute_20,code=sm_20//' cudamatrix/Makefile && \\\n    ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --openblas-root=/usr/local/openblas --shared && \\\n    make -j $(nproc) depend && \\\n    make -j $(nproc) all && \\\n    # Remove some unneeded stuff in $KALDI_PATH to reduce size\n    find $KALDI_PATH -name '*.o' -print0 | xargs -0 rm && \\\n    for dir in $KALDI_PATH/src/*bin; do make -C $dir clean; done && \\\n    mv -f /bin/sh.orig /bin/sh\n\n## PYTHON\n\n# Commit that will be used for Python environment creation (and later, compilation)\nARG COMMIT=master\n\n# Swig\nARG SWIG_VERSION=3.0.10\nARG CACHEBUST=1\nRUN wget -q https://cntkbuildstorage.blob.core.windows.net/cntk-ci-dependencies/swig/$SWIG_VERSION/swig-$SWIG_VERSION.tar.gz -O - | tar xvfz - && \\\n    cd swig-$SWIG_VERSION && \\\n    # Note: we specify --without-alllang to suppress building tests and examples for specific languages.\n    ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --prefix=/usr/local/swig-$SWIG_VERSION --without-perl5 --without-alllang && \\\n    make -j $(nproc) && \\\n    make install && \\\n    cd .. && \\\n    rm -rf swig-$SWIG_VERSION\nCOPY ./Patches /tmp/patches\nRUN /tmp/patches/patch_swig.sh /usr/local/share/swig/3.0.10 && \\\n\trm -rfd /tmp/patches\n\n# .NET Core SDK\nRUN wget -q https://cntkbuildstorage.blob.core.windows.net/cntk-ci-dependencies/packages-microsoft-prod/deb/packages-microsoft-prod.deb && \\\n    dpkg -i packages-microsoft-prod.deb && \\\n    apt-get -y --no-install-recommends -f install apt-transport-https && \\\n    apt-get -y update && \\\n    apt-get -y --no-install-recommends -f install dotnet-sdk-2.1 && \\\n    rm ./packages-microsoft-prod.deb && rm -rf /var/lib/apt/lists/*;\n\n# Anaconda\nARG ANACONDA_VERSION=4.2.0\nRUN wget -q https://cntkbuildstorage.blob.core.windows.net/cntk-ci-dependencies/anaconda3/$ANACONDA_VERSION/Anaconda3-$ANACONDA_VERSION-Linux-x86_64.sh && \\\n    bash Anaconda3-$ANACONDA_VERSION-Linux-x86_64.sh -b && \\\n    rm Anaconda3-$ANACONDA_VERSION-Linux-x86_64.sh\n\nRUN CONDA_ENV_PATH=/tmp/conda-linux-cntk-py35-environment.yml; \\\n    wget -q https://raw.githubusercontent.com/Microsoft/CNTK/$COMMIT/Scripts/install/linux/conda-linux-cntk-py35-environment.yml -O \"$CONDA_ENV_PATH\" && \\\n    /root/anaconda3/bin/conda env create -p /root/anaconda3/envs/cntk-py35 --file \"$CONDA_ENV_PATH\" && \\\n    rm -f \"$CONDA_ENV_PATH\"\n\nENV PATH /root/anaconda3/envs/cntk-py35/bin:$PATH\n\nWORKDIR /cntk\n\n# Build CNTK\nRUN git clone --depth=1 --recursive -b $COMMIT https://github.com/Microsoft/CNTK.git cntksrc && \\\n    cd cntksrc && \\\n    MKLML_VERSION_DETAIL=${MKLDNN_LONG_VERSION} && \\\n    CONFIGURE_OPTS=\"\\\n      --with-kaldi=${KALDI_PATH} \\\n      --with-py35-path=/root/anaconda3/envs/cntk-py35\" && \\\n    mkdir -p build/cpu/release && \\\n    cd build/cpu/release && \\\n    ../../../configure $CONFIGURE_OPTS --with-openblas=/usr/local/openblas && \\\n    make -j\"$(nproc)\" all && \\\n    cd ../../.. && \\\n    mkdir -p build-mkl/cpu/release && \\\n    cd build-mkl/cpu/release && \\\n    ../../../configure $CONFIGURE_OPTS --with-mkl=/usr/local/mklml/${MKLML_VERSION_DETAIL} && \\\n    make -j\"$(nproc)\" all\n\nRUN cd cntksrc/Examples/Image/DataSets/CIFAR-10 && \\\n    python install_cifar10.py && \\\n    cd ../../../..\n\nRUN cd cntksrc/Examples/Image/DataSets/MNIST && \\\n    python install_mnist.py && \\\n    cd ../../../..\n\nENV PATH=/cntk/cntksrc/build/gpu/release/bin:$PATH PYTHONPATH=/cntk/cntksrc/bindings/python LD_LIBRARY_PATH=/cntk/cntksrc/bindings/python/cntk/libs:$LD_LIBRARY_PATH\n\n# Install CNTK as the default backend for Keras\nENV KERAS_BACKEND=cntk\n"
}