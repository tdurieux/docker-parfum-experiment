{
  "startTime": 1674252824235,
  "endTime": 1674252824379,
  "originalSmells": [
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 5,
        "lineEnd": 5,
        "columnStart": 2,
        "columnEnd": 34
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM node:carbon-alpine AS frontend\nWORKDIR /opt/app/\nCOPY package.json /opt/app/\nRUN apk --no-cache add --virtual native-deps \\\n  g++ make python && \\\n  npm install --quiet --production && \\\n  apk del native-deps && npm cache clean --force;\nCOPY . /opt/app/\nRUN npm run build\n\nFROM python:3.6-alpine3.8\nWORKDIR /opt/app/\nCOPY requirements.txt /opt/app/\nRUN apk --no-cache add --virtual .python-rundeps \\\n        libpq \\\n        libjpeg \\\n        zlib \\\n        postgresql \\\n        build-base \\\n        cairo-dev \\\n        cairo \\\n        cairo-tools \\\n        openjpeg-dev \\\n        openssl \\\n        tiff-dev \\\n        libxslt-dev \\\n        libxml2-dev \\\n    && apk --no-cache add --virtual .build-deps \\\n        gcc \\\n        make \\\n        musl-dev \\\n        linux-headers \\\n        postgresql-dev \\\n        jpeg-dev \\\n        zlib-dev \\\n        libffi-dev \\\n        freetype-dev \\\n        lcms2-dev \\\n        tk-dev \\\n        tcl-dev \\\n        py-lxml \\\n    && python3 -m venv /opt/django-venv \\\n    && /opt/django-venv/bin/pip install -r /opt/app/requirements.txt \\\n    && apk del .build-deps\nCOPY . /opt/app/\n# Copy CSS & compiled JavaScript\nCOPY --from=frontend /opt/app/assets assets\nCOPY config/docker-entry.sh /docker-entry.sh\nENV DOCKERIZE_VERSION v0.6.0\nRUN wget https://github.com/jwilder/dockerize/releases/download/$DOCKERIZE_VERSION/dockerize-alpine-linux-amd64-$DOCKERIZE_VERSION.tar.gz \\\n    && tar -C /usr/local/bin -xzvf dockerize-alpine-linux-amd64-$DOCKERIZE_VERSION.tar.gz \\\n    && rm dockerize-alpine-linux-amd64-$DOCKERIZE_VERSION.tar.gz\nRUN mkdir -p /var/lib/celery && \\\n    addgroup -g 1000 -S celery && \\\n    adduser -u 1000 -S celery -G celery && \\\n    chown celery:celery /var/lib/celery/\nRUN /opt/django-venv/bin/python /opt/app/manage.py compilemessages -l de\nENV DATABASE_URL=\"sqlite:////var/app/db.sqlite3\" \\\n    ADMIN_EMAIL=\"\" \\\n    SECRET_KEY=\"\" \\\n    EMAIL_HOST=\"\" \\\n    EMAIL_HOST_USER=\"\" \\\n    EMAIL_HOST_PASSWORD=\"\" \\\n    TWILIO_ACCOUNT_SID=\"\" \\\n    TWILIO_AUTH_TOKEN=\"\" \\\n    TWILIO_NUMBER=\"\" \\\n    BROKER_URL=\"amqp://guest:guest@rabbitmq//\" \\\n    BACKUP_DIR=\"/tmp\" \\\n    BACKUP_AWS_ACCESS_KEY_ID=\"\" \\\n    BACKUP_AWS_SECRET_ACCESS_KEY=\"\" \\\n    BACKUP_AWS_STORAGE_BUCKET_NAME=\"\" \\\n    BACKUP_AWS_KEY_PREFIX=\"\"\nEXPOSE 80\nVOLUME /var/app/static_serve\nVOLUME /var/app/upload\nVOLUME /var/lib/celery/\nENTRYPOINT [\"/docker-entry.sh\"]\nCMD [\"/opt/django-venv/bin/gunicorn\", \"learnwithpeople.wsgi:application\", \"--bind\", \"0.0.0.0:80\", \"--workers=3\"]\n"
}