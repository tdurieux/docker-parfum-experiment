{
  "startTime": 1674248616238,
  "endTime": 1674248616919,
  "originalSmells": [
    {
      "rule": "wgetUseHttpsUrl",
      "position": {
        "lineStart": 69,
        "lineEnd": 69,
        "columnStart": 4,
        "columnEnd": 59
      }
    },
    {
      "rule": "wgetUseHttpsUrl",
      "position": {
        "lineStart": 83,
        "lineEnd": 83,
        "columnStart": 4,
        "columnEnd": 84
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 74,
        "lineEnd": 74,
        "columnStart": 4,
        "columnEnd": 45
      }
    },
    {
      "rule": "yumInstallRmVarCacheYum",
      "position": {
        "lineStart": 3,
        "lineEnd": 3,
        "columnStart": 70,
        "columnEnd": 88
      }
    },
    {
      "rule": "yumInstallRmVarCacheYum",
      "position": {
        "lineStart": 4,
        "lineEnd": 4,
        "columnStart": 4,
        "columnEnd": 31
      }
    },
    {
      "rule": "yumInstallRmVarCacheYum",
      "position": {
        "lineStart": 5,
        "lineEnd": 5,
        "columnStart": 4,
        "columnEnd": 136
      }
    },
    {
      "rule": "yumInstallRmVarCacheYum",
      "position": {
        "lineStart": 57,
        "lineEnd": 57,
        "columnStart": 4,
        "columnEnd": 22
      }
    },
    {
      "rule": "yumInstallRmVarCacheYum",
      "position": {
        "lineStart": 58,
        "lineEnd": 58,
        "columnStart": 4,
        "columnEnd": 27
      }
    },
    {
      "rule": "yumInstallRmVarCacheYum",
      "position": {
        "lineStart": 66,
        "lineEnd": 66,
        "columnStart": 70,
        "columnEnd": 88
      }
    },
    {
      "rule": "yumInstallRmVarCacheYum",
      "position": {
        "lineStart": 67,
        "lineEnd": 67,
        "columnStart": 4,
        "columnEnd": 31
      }
    },
    {
      "rule": "yumInstallRmVarCacheYum",
      "position": {
        "lineStart": 68,
        "lineEnd": 68,
        "columnStart": 4,
        "columnEnd": 38
      }
    },
    {
      "rule": "yumInstallRmVarCacheYum",
      "position": {
        "lineStart": 80,
        "lineEnd": 80,
        "columnStart": 4,
        "columnEnd": 22
      }
    },
    {
      "rule": "yumInstallRmVarCacheYum",
      "position": {
        "lineStart": 81,
        "lineEnd": 81,
        "columnStart": 4,
        "columnEnd": 27
      }
    },
    {
      "rule": "yumInstallRmVarCacheYum",
      "position": {
        "lineStart": 82,
        "lineEnd": 82,
        "columnStart": 4,
        "columnEnd": 27
      }
    },
    {
      "rule": "yumInstallRmVarCacheYum",
      "position": {
        "lineStart": 91,
        "lineEnd": 91,
        "columnStart": 4,
        "columnEnd": 31
      }
    },
    {
      "rule": "yumInstallRmVarCacheYum",
      "position": {
        "lineStart": 92,
        "lineEnd": 92,
        "columnStart": 4,
        "columnEnd": 88
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 70,
        "lineEnd": 70,
        "columnStart": 4,
        "columnEnd": 37
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 84,
        "lineEnd": 84,
        "columnStart": 4,
        "columnEnd": 38
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# Building Caffe binary with Cifar and OpenBLAS.\nFROM centos:7 AS caffe\n\nRUN yum makecache fast && yum groupinstall -y \"Development tools\" && yum install -y git && rm -rf /var/cache/yum\nRUN yum install -y epel-release && rm -rf /var/cache/yum\nRUN yum install -y boost-devel gflags-devel glog-devel hdf5-devel leveldb-devel lmdb-devel opencv-devel protobuf-devel snappy-devel wget && rm -rf /var/cache/yum\nRUN yum clean all\n\n# Please don't install openblas-devel from linux distro - it will not work as multithreaded.\nWORKDIR /root\nRUN git clone --depth=1 https://github.com/BVLC/caffe\nRUN git clone --depth=1 https://github.com/xianyi/OpenBLAS\n\n# OpenBLAS build\nWORKDIR /root/OpenBLAS\nENV USE_OPENMP=1\nRUN make -j --quiet libs\nRUN make -j --quiet netlib\nRUN make -j --quiet shared\nRUN make -j install PREFIX=/opt/swan\n\n### build\nWORKDIR /root/caffe\nADD caffe/Makefile.config Makefile.config\nRUN LD_LIBRARY_PATH=/opt/swan/lib make -j\n\n### install globaly\nRUN cp .build_release/lib/libcaffe.so.1.0.0 /usr/lib/\nRUN cp .build_release/tools/caffe /usr/local/bin\nRUN ldconfig\n\n# Data set preparation\nWORKDIR /root/caffe\nRUN ./data/cifar10/get_cifar10.sh\nRUN  LD_LIBRARY_PATH=/opt/swan/lib ./examples/cifar10/create_cifar10.sh\nWORKDIR /root/caffe/examples/cifar10/\nRUN sed -i 's/GPU/CPU/' *.prototxt\nADD caffe/cifar10_quick_iter_5000.caffemodel.h5 cifar10_quick_iter_5000.caffemodel.h5\n\n# Install into uniq folder matching swan depolyment\nRUN mkdir -p /opt/swan/share/caffe/lib\nRUN mkdir -p /opt/swan/share/caffe/bin\nRUN mkdir -p /opt/swan/share/caffe/examples/cifar10\nWORKDIR /root/caffe\nRUN cp .build_release/lib/libcaffe.so.1.0.0 /opt/swan/share/caffe/lib\nRUN cp .build_release/tools/caffe /opt/swan/share/caffe/bin\nRUN cp -r ./examples/cifar10/cifar10_test_lmdb /opt/swan/share/caffe/examples/cifar10\nRUN cp ./examples/cifar10/cifar10_quick_train_test.prototxt /opt/swan/share/caffe/examples/cifar10\nRUN cp ./examples/cifar10/mean.binaryproto /opt/swan/share/caffe/examples/cifar10\nRUN cp ./examples/cifar10/cifar10_quick_iter_5000.caffemodel.h5 /opt/swan/share/caffe/examples/cifar10\nRUN cp /opt/swan/lib/libopenblas_haswellp-r0.2.20.dev.so /opt/swan/share/caffe/lib/libopenblas.so.0\nADD caffe/caffe.sh /opt/swan/bin/caffe.sh\nADD caffe/caffe-test.sh /opt/swan/bin/caffe-test.sh\n\n# Buolding intel-cmt-cat.\nFROM centos:7 AS intel-cmt-cat\n\nRUN yum install -y gcc && rm -rf /var/cache/yum\nRUN yum install -y git make && rm -rf /var/cache/yum\nRUN git clone https://github.com/01org/intel-cmt-cat/\nWORKDIR /intel-cmt-cat\nRUN make SHARED=n\n\n# Building memcached.\nFROM centos:7 AS memcached\n\nRUN yum makecache fast && yum groupinstall -y \"Development tools\" && yum install -y git && rm -rf /var/cache/yum\nRUN yum install -y epel-release && rm -rf /var/cache/yum\nRUN yum install -y wget libevent-devel && rm -rf /var/cache/yum\nRUN wget https://memcached.org/files/memcached-1.4.35.tar.gz\nRUN tar -xzvf memcached-1.4.35.tar.gz && rm memcached-1.4.35.tar.gz\nWORKDIR /memcached-1.4.35\nADD memcached/thread-affinity.patch thread-affinity.patch\nRUN cat thread-affinity.patch | patch -p 1\nRUN ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --prefix=/usr/local/memcached\nRUN make\n\n# Building stress-ng.\nFROM centos:7 AS stress-ng\n\nRUN yum install -y gcc && rm -rf /var/cache/yum\nRUN yum install -y git make && rm -rf /var/cache/yum\nRUN yum install -y wget tar && rm -rf /var/cache/yum\nRUN wget https://kernel.ubuntu.com/~cking/tarballs/stress-ng/stress-ng-0.07.28.tar.gz\nRUN tar -xzvf stress-ng-0.07.28.tar.gz && rm stress-ng-0.07.28.tar.gz\nWORKDIR /stress-ng-0.07.28\nRUN make\n\n# Builing final container that consists of workloads only.\nFROM centos:7\n\nRUN yum install -y epel-release && rm -rf /var/cache/yum\nRUN yum install -y glog protobuf boost hdf5 leveldb lmdb opencv libgomp numactl libevent && rm -rf /var/cache/yum\nRUN yum update -y\nRUN yum clean all\n\nCOPY --from=caffe /opt /opt\nCOPY --from=intel-cmt-cat /intel-cmt-cat/pqos/pqos /opt/swan/bin/\nCOPY --from=intel-cmt-cat /intel-cmt-cat/rdtset/rdtset /opt/swan/bin/\nCOPY --from=memcached /memcached-1.4.35/memcached /opt/swan/bin/\nCOPY --from=stress-ng /stress-ng-0.07.28/stress-ng /opt/swan/bin/\nRUN ln -sv /opt/swan/bin/* /usr/bin/\n"
}