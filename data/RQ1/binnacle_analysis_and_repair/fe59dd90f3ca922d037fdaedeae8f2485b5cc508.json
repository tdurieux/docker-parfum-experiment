{
  "startTime": 1674244899120,
  "endTime": 1674244899325,
  "originalSmells": [
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 39,
        "lineEnd": 39,
        "columnStart": 4,
        "columnEnd": 18
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM registry.access.redhat.com/rhel-atomic\nMAINTAINER Sematext Group Inc. <redhat@sematext.com>\n### Atomic/OpenShift Labels - https://github.com/projectatomic/ContainerApplicationGenericLabels\nLABEL name=\"sematext/sematext-agent-docker\" \\\n      vendor=\"Sematext Group Inc.\" \\\n      version=\"1.31.31\" \\\n      release=\"2\" \\\n      summary=\"Sematext Docker Agent\" \\\n      description=\"Sematext Agent is a modern, open-source, container-native monitoring and log collection agent for Docker. It runs as a tiny container on every Docker host and provides automatic collection and processing of Docker Metrics, Events and Logs for all cluster nodes and all auto-discovered containers. It works with Open Shift/Kubernetes or any other platform supporting Docker containers.\" \\\n### Required labels above - recommended below\n      url=\"https://sematext.com/docker\" \\\n      run='docker run --privileged --name ${NAME} -e LOGSENE_TOKEN=${LOGSENE_TOKEN} -e ${SPM_TOKEN} -v /var/run/docker.sock:/var/run/docker.sock ${IMAGE}' \\\n      io.k8s.description=\"Sematext Docker Agent collects metrics, docker events and container logs\" \\\n      io.k8s.display-name=\"Sematext Docker Agent\" \\\n      io.openshift.tags=\"sematext,monitoring,logging\"\n\nRUN mkdir /licenses\nCOPY ./LICENSE /licenses/LICENSE\nCOPY ./help.1 /help.1\nENV PATH=$HOME/node_modules/.bin/:$HOME/.npm-global/bin/:/opt/rh/rh-nodejs6/root/usr/bin:/opt/rh/rh-nodejs6/root/usr/lib:$PATH\nENV LD_LIBRARY_PATH=/opt/rh/rh-nodejs6/root/usr/lib64${LD_LIBRARY_PATH:+:${LD_LIBRARY_PATH}}\n### Setup user for build execution and application runtime\nENV APP_ROOT=/opt/spm \\\n    USER_NAME=default \\\n    USER_UID=10001\n\n# Setup Node.js\nRUN microdnf install git  --enablerepo=rhel-7-server-rpms && microdnf install rh-nodejs6 rh-nodejs6-npm --enablerepo=rhel-server-rhscl-7-rpms --enablerepo=rhel-7-server-rpms && microdnf clean all\nRUN microdnf update\n\n### Setup user for build execution and application runtime\nENV APP_ROOT=/opt/spm \\\n    USER_NAME=default \\\n    USER_UID=10001\n\nCOPY . ${APP_ROOT}\nCOPY ./Dockerfile.rhel-atomic /Dockerfile\nWORKDIR ${APP_ROOT}\n\nRUN npm install -g && npm cache clean --force;\n\nENV APP_HOME=${APP_ROOT}/src  PATH=$PATH:${APP_ROOT}/bin\nRUN mkdir -p ${APP_ROOT}/spmlogs && mkdir -p /logsene-log-buffer && mkdir -p /opt/spm\n# Setup tini https://github.com/krallin/tini\nENV TINI_VERSION v0.15.0\nADD https://github.com/krallin/tini/releases/download/${TINI_VERSION}/tini ${APP_ROOT}/bin/tini\n### Setup user for build execution and application runtime\nRUN chmod -R ug+x ${APP_ROOT}/bin && sync && \\\n    useradd -l -u ${USER_UID} -r -g 0 -d ${APP_ROOT} -s /sbin/nologin -c \"${USER_NAME} user\" ${USER_NAME} && \\\n    chown -R ${USER_UID}:0 ${APP_ROOT} && \\\n    chmod -R g=u ${APP_ROOT} && chown -R ${USER_UID}:0 /logsene-log-buffer && chown -R ${USER_UID}:0 /opt/spm\n\n### Containers should NOT run as root as a good practice\nUSER 10001\n\nEXPOSE 9000\nVOLUME ${APP_ROOT}/spmlogs\n\nENTRYPOINT [\"/opt/spm/bin/tini\", \"--\"]\nCMD [\"/opt/spm/run.sh\"]\n\n"
}