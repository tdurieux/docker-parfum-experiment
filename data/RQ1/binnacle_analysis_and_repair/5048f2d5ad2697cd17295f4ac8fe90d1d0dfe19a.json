{
  "startTime": 1674250917472,
  "endTime": 1674250917807,
  "originalSmells": [
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 19,
        "lineEnd": 30,
        "columnStart": 4,
        "columnEnd": 9
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 32,
        "lineEnd": 34,
        "columnStart": 4,
        "columnEnd": 30
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 60,
        "lineEnd": 60,
        "columnStart": 4,
        "columnEnd": 70
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 57,
        "lineEnd": 57,
        "columnStart": 4,
        "columnEnd": 15
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 11,
        "lineEnd": 15,
        "columnStart": 4,
        "columnEnd": 9
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "ARG BASE_IMAGE\nFROM $BASE_IMAGE\n\nLABEL maintainer=\"Bernd Doser <bernd.doser@braintwister.eu>\"\n\nARG BAZEL_VERSION=0.21.0\nARG TENSORFLOW_VERSION=1.13.1\n\nRUN ln -snf /usr/bin/python3 /usr/bin/python\n\nRUN apt-get update \\\n && apt-get install --no-install-recommends -y \\\n    libcudnn7 \\\n    libcudnn7-dev \\\n    python3-tk \\\n    unzip \\\n && apt-get clean \\\n && rm -rf /var/lib/apt/lists/*\n\nRUN pip install --no-cache-dir \\\n    graphviz \\\n    matplotlib \\\n    mock \\\n    numpy \\\n    pydot \\\n    seaborn \\\n    setuptools \\\n    six \\\n    sklearn \\\n    stn \\\n    wheel\n\nRUN pip install --no-cache-dir --no-deps \\\n    keras_applications==1.0.6 \\\n    keras_preprocessing==1.0.5\n\nRUN wget https://github.com/bazelbuild/bazel/releases/download/$BAZEL_VERSION/bazel-$BAZEL_VERSION-installer-linux-x86_64.sh \\\n && chmod +x bazel-$BAZEL_VERSION-installer-linux-x86_64.sh \\\n && ./bazel-$BAZEL_VERSION-installer-linux-x86_64.sh\n\nSHELL [\"/bin/bash\", \"-c\"]\nRUN source /usr/local/lib/bazel/bin/bazel-complete.bash\n\nRUN git clone https://github.com/tensorflow/tensorflow \\\n && cd tensorflow \\\n && git checkout v$TENSORFLOW_VERSION\n\nENV TF_NEED_CUDA=1 \\\n    TF_CUDA_VERSION=10.1\n\n# Some hacks to find cuda 10.1 libraries\nRUN ln -s /usr/lib/x86_64-linux-gnu/libcublas.so.10 /usr/local/cuda-10.1/lib64/libcublas.so.10.1 \\\n && ln -s /usr/local/cuda-10.1/targets/x86_64-linux/lib/libcusolver.so.10.1.168 /usr/local/cuda-10.1/targets/x86_64-linux/lib/libcusolver.so.10.1 \\\n && ln -s /usr/local/cuda-10.1/targets/x86_64-linux/lib/libcufft.so.10.1.168 /usr/local/cuda-10.1/targets/x86_64-linux/lib/libcufft.so.10.1 \\\n && ln -s /usr/local/cuda-10.1/targets/x86_64-linux/lib/libcurand.so.10.1.168 /usr/local/cuda-10.1/targets/x86_64-linux/lib/libcurand.so.10.1\n\nRUN cd tensorflow \\\n && ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" \\\n && bazel build --config=opt --config=cuda //tensorflow/tools/pip_package:build_pip_package \\\n && ./bazel-bin/tensorflow/tools/pip_package/build_pip_package /tmp/tensorflow_pkg \\\n && pip install --no-cache-dir /tmp/tensorflow_pkg/tensorflow-$TENSORFLOW_VERSION.whl\n\n"
}