{
  "startTime": 1674240345581,
  "endTime": 1674240345995,
  "originalSmells": [
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 57,
        "lineEnd": 57,
        "columnStart": 21,
        "columnEnd": 32
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 62,
        "lineEnd": 62,
        "columnStart": 4,
        "columnEnd": 26
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 87,
        "lineEnd": 87,
        "columnStart": 5,
        "columnEnd": 30
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 88,
        "lineEnd": 88,
        "columnStart": 32,
        "columnEnd": 54
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 88,
        "lineEnd": 88,
        "columnStart": 63,
        "columnEnd": 85
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 90,
        "lineEnd": 90,
        "columnStart": 8,
        "columnEnd": 34
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 90,
        "lineEnd": 90,
        "columnStart": 38,
        "columnEnd": 72
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 100,
        "lineEnd": 100,
        "columnStart": 54,
        "columnEnd": 78
      }
    },
    {
      "rule": "apkAddUseNoCache",
      "position": {
        "lineStart": 55,
        "lineEnd": 55,
        "columnStart": 4,
        "columnEnd": 19
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM node:alpine\n\nMAINTAINER Waldemar Hummer (waldemar.hummer@gmail.com)\nLABEL authors=\"Waldemar Hummer (waldemar.hummer@gmail.com)\"\n\n# install some common libs\nRUN apk add --no-cache autoconf automake build-base ca-certificates curl g++ gcc git groff \\\n        libffi-dev libtool linux-headers make openssl openssl-dev python3 python3-dev \\\n        py3-pip tar xz zip && \\\n    update-ca-certificates\n\n# install Docker (CLI only)\nRUN docker_version=17.05.0-ce; \\\n  curl -fsSLO https://get.docker.com/builds/Linux/x86_64/docker-$docker_version.tgz \\\n  && tar xzvf docker-$docker_version.tgz \\\n  && mv docker/docker /usr/local/bin \\\n  && rm -r docker docker-$docker_version.tgz\n\n# Install Java - taken from official repo:\n# https://github.com/docker-library/openjdk/blob/master/8-jdk/alpine/Dockerfile)\nENV LANG C.UTF-8\nRUN { \\\n        echo '#!/bin/sh'; echo 'set -e'; echo; \\\n        echo 'dirname \"$(dirname \"$(readlink -f \"$(which javac || which java)\")\")\"'; \\\n    } > /usr/local/bin/docker-java-home \\\n    && chmod +x /usr/local/bin/docker-java-home\nENV JAVA_HOME /usr/lib/jvm/java-1.8-openjdk\nENV PATH $PATH:/usr/lib/jvm/java-1.8-openjdk/jre/bin:/usr/lib/jvm/java-1.8-openjdk/bin\nRUN set -x && apk add --no-cache openjdk8 && [ \"$JAVA_HOME\" = \"$(docker-java-home)\" ]\nRUN apk add --no-cache nss\n\n# Install Maven - taken from official repo:\n# https://github.com/carlossg/docker-maven/blob/master/jdk-8/Dockerfile)\nARG MAVEN_VERSION=3.5.4\nARG USER_HOME_DIR=\"/root\"\nARG SHA=ce50b1c91364cb77efe3776f756a6d92b76d9038b0a0782f7d53acf1e997a14d\nARG BASE_URL=https://apache.osuosl.org/maven/maven-3/${MAVEN_VERSION}/binaries\nRUN mkdir -p /usr/share/maven /usr/share/maven/ref \\\n  && curl -fsSL -o /tmp/apache-maven.tar.gz ${BASE_URL}/apache-maven-$MAVEN_VERSION-bin.tar.gz \\\n  && echo \"${SHA}  /tmp/apache-maven.tar.gz\" | sha256sum -c - \\\n  && tar -xzf /tmp/apache-maven.tar.gz -C /usr/share/maven --strip-components=1 \\\n  && rm -f /tmp/apache-maven.tar.gz \\\n  && ln -s /usr/share/maven/bin/mvn /usr/bin/mvn\nENV MAVEN_HOME /usr/share/maven\nENV MAVEN_CONFIG \"$USER_HOME_DIR/.m2\"\nADD https://raw.githubusercontent.com/carlossg/docker-maven/master/jdk-8/settings-docker.xml /usr/share/maven/ref/\n\n# set workdir\nRUN mkdir -p /opt/code/localstack\nWORKDIR /opt/code/localstack/\n\n# https://github.com/pires/docker-elasticsearch/issues/56\nENV ES_TMPDIR  /tmp\n\n# install npm dependencies (Note: node-gyp currently requires python2 :/ , hence install it temporarily)\nRUN apk add --no-cache python2\nADD localstack/package.json localstack/package.json\nRUN cd localstack && npm install && npm cache clean --force;\nRUN apk del python2\n\n# set python3 as default python version; install supervisor\nRUN ln -s /usr/bin/python3 /usr/bin/python; ln -s /usr/bin/pip3 /usr/bin/pip\nRUN pip install --no-cache-dir supervisor\n\n# init environment and cache some dependencies\nRUN mkdir -p /opt/code/localstack/localstack/infra && \\\n    wget -O /tmp/localstack.es.zip \\\n        https://artifacts.elastic.co/downloads/elasticsearch/elasticsearch-6.7.0.zip && \\\n    wget -O /tmp/elasticmq-server.jar \\\n        https://s3-eu-west-1.amazonaws.com/softwaremill-public/elasticmq-server-0.14.5.jar && \\\n    (cd localstack/infra/ && unzip -q /tmp/localstack.es.zip && \\\n        mv elasticsearch* elasticsearch && rm /tmp/localstack.es.zip) && \\\n    (cd localstack/infra/elasticsearch/ && \\\n        bin/elasticsearch-plugin install analysis-icu && \\\n        bin/elasticsearch-plugin install ingest-attachment --batch && \\\n        bin/elasticsearch-plugin install analysis-kuromoji && \\\n        bin/elasticsearch-plugin install mapper-murmur3 && \\\n        bin/elasticsearch-plugin install mapper-size && \\\n        bin/elasticsearch-plugin install analysis-phonetic && \\\n        bin/elasticsearch-plugin install analysis-smartcn && \\\n        bin/elasticsearch-plugin install analysis-stempel && \\\n        bin/elasticsearch-plugin install analysis-ukrainian) && \\\n    mkdir -p /opt/code/localstack/localstack/infra/dynamodb && \\\n    wget -O /tmp/localstack.ddb.zip \\\n        https://s3-us-west-2.amazonaws.com/dynamodb-local/dynamodb_local_latest.zip && \\\n    (cd localstack/infra/dynamodb && unzip -q /tmp/localstack.ddb.zip && rm /tmp/localstack.ddb.zip)\nADD requirements.txt .\nRUN ( pip install --no-cache-dir --upgrade pip) && \\\n    ( test `which virtualenv` || pip install --no-cache-dir virtualenv || sudo pip install --no-cache-dir virtualenv) && \\\n    ( virtualenv .testvenv && source .testvenv/bin/activate && \\\n        pip install --no-cache-dir -q six==1.10.0 && pip install --no-cache-dir -q -r requirements.txt && rm -rf .testvenv)\n\n# add files required to run \"make install-web\"\nADD Makefile .\nADD localstack/dashboard/web/package.json localstack/dashboard/web/package.json\n\n# install web dashboard dependencies\nRUN make install-web\n\n# install libs that require dependencies cleaned up below (e.g., gcc)\nRUN ( virtualenv .venv && source .venv/bin/activate && pip install --no-cache-dir cryptography)\n\n# clean up (layers are later squashed into a single one)\nRUN rm -rf /root/.npm; \\\n  apk del --purge autoconf automake build-base g++ gcc linux-headers openssl-dev python3-dev\n"
}