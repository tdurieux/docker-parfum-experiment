{
  "startTime": 1674239662225,
  "endTime": 1674239662521,
  "originalSmells": [
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 11,
        "lineEnd": 11,
        "columnStart": 4,
        "columnEnd": 31
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 3,
        "lineEnd": 3,
        "columnStart": 4,
        "columnEnd": 57
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 5,
        "lineEnd": 5,
        "columnStart": 4,
        "columnEnd": 99
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 3,
        "lineEnd": 3,
        "columnStart": 4,
        "columnEnd": 57
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 5,
        "lineEnd": 5,
        "columnStart": 4,
        "columnEnd": 99
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 3,
        "lineEnd": 3,
        "columnStart": 4,
        "columnEnd": 57
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 5,
        "lineEnd": 5,
        "columnStart": 4,
        "columnEnd": 99
      }
    }
  ],
  "repairedSmells": [
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 3,
        "lineEnd": 3,
        "columnStart": 4,
        "columnEnd": 81
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 5,
        "lineEnd": 5,
        "columnStart": 4,
        "columnEnd": 123
      }
    }
  ],
  "repairedDockerfile": "FROM ubuntu:xenial\n\nRUN apt-get update\nRUN apt-get install --no-install-recommends -y git wget cmake gcc build-essential && rm -rf /var/lib/apt/lists/*;\n# some deps via: https://github.com/richinseattle/Dockerfiles/blob/master/afl-dyninst.Dockerfile\nRUN apt-get install --no-install-recommends -y libelf-dev libelf1 libiberty-dev libboost-all-dev libgtest-dev libgflags-dev && rm -rf /var/lib/apt/lists/*;\nRUN mkdir /code\n\n# build, install dyninst\nRUN wget -O /code/dyninst.tar.gz https://github.com/dyninst/dyninst/archive/v9.3.2.tar.gz\nRUN cd /code && \\\n    tar xf /code/dyninst.tar.gz && \\\n    mv dyninst-9.3.2 dyninst && rm /code/dyninst.tar.gz\nRUN cd /code/dyninst && \\\n    mkdir build && \\\n    cd build && \\\n    cmake .. && \\\n    make -j8 && \\\n    make install && \\\n    ldconfig\n\n# build gtest\nRUN cd /usr/src/gtest && \\\n    cmake ./CMakeLists.txt && \\\n    make && \\\n    cp *.a /usr/lib\n\n# build functionsimsearch\nRUN cd /code && \\\n    git clone https://github.com/steven-hh-ding/functionsimsearch && \\\n    cd functionsimsearch && \\\n    mv third_party third_party_temp && \\\n    mkdir third_party && \\\n    cd third_party && \\\n    git clone https://github.com/okdshin/PicoSHA2.git && \\\n    git clone https://github.com/trailofbits/pe-parse.git && \\\n    git clone https://github.com/PetterS/spii.git && \\\n    cp -R ../third_party_temp/* ./ && \\\n    cd pe-parse && \\\n    cmake -D CMAKE_CXX_FLAGS=-Wstrict-overflow=1 . && \\\n    sed -i -e 's/overflow\\=5/overflow\\=1/g' ./cmake/compilation_flags.cmake && \\\n    cat ./cmake/compilation_flags.cmake && \\\n    make -j 16 && \\\n    cd ../spii && \\\n    cmake . -DBUILD_SHARED_LIBS=true && \\\n    make -j 16 && \\\n    make install && \\\n    cp /usr/local/lib/libspii* /usr/lib && \\\n    cd ../.. && \\\n    sed -i -e 's/isnan/std::isnan/g' ./third_party/spii/include/spii/large_auto_diff_term.h && \\\n    make -j 16\n\n# dispatch via entrypoint script\n# recommend mapping the /pwd volume, probably like (for ELF file):\n#\n#    docker run -it --rm -v $(pwd):/pwd functionsimsearch disassemble ELF /pwd/someexe\nVOLUME /pwd\nWORKDIR /code/functionsimsearch\nRUN chmod +x /code/functionsimsearch/entrypoint.sh\nENTRYPOINT [\"/code/functionsimsearch/entrypoint.sh\"]"
}