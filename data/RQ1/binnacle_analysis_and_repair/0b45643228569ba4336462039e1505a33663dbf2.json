{
  "startTime": 1674246436954,
  "endTime": 1674246437170,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 35,
        "lineEnd": 35,
        "columnStart": 4,
        "columnEnd": 48
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 42,
        "lineEnd": 42,
        "columnStart": 4,
        "columnEnd": 29
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 44,
        "lineEnd": 44,
        "columnStart": 4,
        "columnEnd": 43
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 67,
        "lineEnd": 67,
        "columnStart": 4,
        "columnEnd": 39
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 38,
        "lineEnd": 38,
        "columnStart": 22,
        "columnEnd": 80
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM nvidia/cuda:9.1-cudnn7-devel-ubuntu16.04\n\n#FROM nvidia/cuda:10.0-cudnn7-runtime-ubuntu18.04\n#FROM nvidia/cuda:10.1-cudnn7-devel-ubuntu18.04\nARG ARCH=gpu\n\nARG py_version=3\n\n# Validate that arguments are specified\nRUN test $py_version || exit 1\n\n# Install python and nginx\nRUN apt-get update && apt-get install -y --no-install-recommends software-properties-common && \\\n    add-apt-repository ppa:deadsnakes/ppa -y && \\\n    apt-get update && apt-get install -y --no-install-recommends \\\n        build-essential \\\n        curl \\\n        jq \\\n        git \\\n        libsm6 \\\n        libxext6 \\\n        libxrender-dev \\\n        nginx && \\\n    if [ $py_version -eq 3 ]; \\\n       then apt-get install -y --no-install-recommends python3.7-dev \\\n           && ln -s -f /usr/bin/python3.7 /usr/bin/python; \\\n       else apt-get install -y --no-install-recommends python-dev; fi && \\\n    rm -rf /var/lib/apt/lists/*\n\n#ENV CUDNN_VERSION 7.5.0.56\n#LABEL com.nvidia.cudnn.version=\"${CUDNN_VERSION}\"\n\n\n# Install pip\nRUN cd /tmp && \\\n    curl -f -O https://bootstrap.pypa.io/get-pip.py && \\\n    python get-pip.py 'pip<=18.1' && rm get-pip.py\n\nRUN apt-get update && apt-get install -y --no-install-recommends nginx curl wget && rm -rf /var/lib/apt/lists/*;\n\nRUN python --version\n\nRUN pip install --no-cache-dir --upgrade pip\n\nRUN pip install --no-cache-dir --upgrade torch torchvision\n\n# Python wonâ€™t try to write .pyc or .pyo files on the import of source modules\n# Force stdin, stdout and stderr to be totally unbuffered. Good for logging\nENV PYTHONDONTWRITEBYTECODE=1 PYTHONUNBUFFERED=1 PYTHONIOENCODING=UTF-8 LANG=C.UTF-8 LC_ALL=C.UTF-8\n\n#ENV CUDA_HOME=\"/usr/local/cuda-10.1\"\n\nRUN pip --no-cache-dir install \\\n        flask \\\n        pathlib \\\n        gunicorn \\\n        gevent \\\n        scipy \\\n        sklearn \\\n        pandas \\\n        Pillow \\\n        h5py \\\n        fastprogress\n\n\nRUN git clone https://github.com/NVIDIA/apex.git && cd apex && python setup.py install --cuda_ext --cpp_ext\n\nRUN pip install --no-cache-dir pytorch-pretrained-bert\nRUN pip --no-cache-dir install fast-bert --upgrade\n\n\n\nENV PATH=\"/opt/ml/code:${PATH}\"\nCOPY /bert /opt/ml/code\nWORKDIR /opt/ml/code\n\n\n"
}