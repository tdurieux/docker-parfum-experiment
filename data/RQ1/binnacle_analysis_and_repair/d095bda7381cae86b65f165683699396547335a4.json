{
  "startTime": 1674243071153,
  "endTime": 1674243071722,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 19,
        "lineEnd": 19,
        "columnStart": 4,
        "columnEnd": 50
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 25,
        "lineEnd": 25,
        "columnStart": 4,
        "columnEnd": 131
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 64,
        "lineEnd": 64,
        "columnStart": 4,
        "columnEnd": 138
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 92,
        "lineEnd": 92,
        "columnStart": 4,
        "columnEnd": 104
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 105,
        "lineEnd": 105,
        "columnStart": 4,
        "columnEnd": 97
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 110,
        "lineEnd": 110,
        "columnStart": 4,
        "columnEnd": 84
      }
    },
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 102,
        "lineEnd": 102,
        "columnStart": 4,
        "columnEnd": 23
      }
    },
    {
      "rule": "curlUseHttpsUrl",
      "position": {
        "lineStart": 64,
        "lineEnd": 64,
        "columnStart": 4,
        "columnEnd": 138
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 106,
        "lineEnd": 106,
        "columnStart": 2,
        "columnEnd": 43
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# Use Ubuntu 16.04 LTS\nFROM ubuntu:xenial-20161213\n\n# Pre-cache neurodebian key\nCOPY docker/files/neurodebian.gpg /usr/local/etc/.neurodebian.gpg\n\n# Prepare environment\nRUN apt-get update && \\\n    apt-get install -y --no-install-recommends \\\n                    curl \\\n                    bzip2 \\\n                    ca-certificates \\\n                    xvfb \\\n                    cython3 \\\n                    build-essential \\\n                    autoconf \\\n                    libtool \\\n                    pkg-config \\\n                    git && \\\n    curl -f -sL https://deb.nodesource.com/setup_10.x | bash - && \\\n    apt-get install -y --no-install-recommends \\\n                    nodejs && \\\n    apt-get clean && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*\n\n# Installing freesurfer\nRUN curl -f -sSL https://surfer.nmr.mgh.harvard.edu/pub/dist/freesurfer/6.0.1/freesurfer-Linux-centos6_x86_64-stable-pub-v6.0.1.tar.gz | tar zxv --no-same-owner -C /opt \\\n    --exclude='freesurfer/average' \\\n    --exclude='freesurfer/diffusion' \\\n    --exclude='freesurfer/docs' \\\n    --exclude='freesurfer/fsfast' \\\n    --exclude='freesurfer/lib/cuda' \\\n    --exclude='freesurfer/lib/qt' \\\n    --exclude='freesurfer/matlab' \\\n    --exclude='freesurfer/mni/share/man' \\\n    --exclude='freesurfer/subjects/fsaverage_sym' \\\n    --exclude='freesurfer/subjects/fsaverage3' \\\n    --exclude='freesurfer/subjects/fsaverage4' \\\n    --exclude='freesurfer/subjects/cvs_avg35' \\\n    --exclude='freesurfer/subjects/cvs_avg35_inMNI152' \\\n    --exclude='freesurfer/subjects/bert' \\\n    --exclude='freesurfer/subjects/lh.EC_average' \\\n    --exclude='freesurfer/subjects/rh.EC_average' \\\n    --exclude='freesurfer/subjects/sample-*.mgz' \\\n    --exclude='freesurfer/subjects/V1_average' \\\n    --exclude='freesurfer/trctrain'\n\nENV FSL_DIR=\"/usr/share/fsl/5.0\" \\\n    OS=\"Linux\" \\\n    FS_OVERRIDE=0 \\\n    FIX_VERTEX_AREA=\"\" \\\n    FSF_OUTPUT_FORMAT=\"nii.gz\" \\\n    FREESURFER_HOME=\"/opt/freesurfer\"\nENV SUBJECTS_DIR=\"$FREESURFER_HOME/subjects\" \\\n    FUNCTIONALS_DIR=\"$FREESURFER_HOME/sessions\" \\\n    MNI_DIR=\"$FREESURFER_HOME/mni\" \\\n    LOCAL_DIR=\"$FREESURFER_HOME/local\" \\\n    MINC_BIN_DIR=\"$FREESURFER_HOME/mni/bin\" \\\n    MINC_LIB_DIR=\"$FREESURFER_HOME/mni/lib\" \\\n    MNI_DATAPATH=\"$FREESURFER_HOME/mni/data\"\nENV PERL5LIB=\"$MINC_LIB_DIR/perl5/5.8.5\" \\\n    MNI_PERL5LIB=\"$MINC_LIB_DIR/perl5/5.8.5\" \\\n    PATH=\"$FREESURFER_HOME/bin:$FSFAST_HOME/bin:$FREESURFER_HOME/tktools:$MINC_BIN_DIR:$PATH\"\n\n# Installing Neurodebian packages (FSL, AFNI, git)\nRUN curl -f -sSL \"https://neuro.debian.net/lists/$( lsb_release -c | cut -f2 ).us-ca.full\" >> /etc/apt/sources.list.d/neurodebian.sources.list && \\\n    apt-key add /usr/local/etc/.neurodebian.gpg && \\\n    (apt-key adv --refresh-keys --keyserver hkp://ha.pool.sks-keyservers.net 0xA5D32F012649A5A9 || true)\n\nRUN apt-get update && \\\n    apt-get install -y --no-install-recommends \\\n                    fsl-core=5.0.9-5~nd16.04+1 \\\n                    afni=16.2.07~dfsg.1-5~nd16.04+1 \\\n                    convert3d \\\n                    git-annex-standalone && \\\n    apt-get clean && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*\n\nENV FSLDIR=\"/usr/share/fsl/5.0\" \\\n    FSLOUTPUTTYPE=\"NIFTI_GZ\" \\\n    FSLMULTIFILEQUIT=\"TRUE\" \\\n    POSSUMDIR=\"/usr/share/fsl/5.0\" \\\n    LD_LIBRARY_PATH=\"/usr/lib/fsl/5.0:$LD_LIBRARY_PATH\" \\\n    FSLTCLSH=\"/usr/bin/tclsh\" \\\n    FSLWISH=\"/usr/bin/wish\" \\\n    AFNI_MODELPATH=\"/usr/lib/afni/models\" \\\n    AFNI_IMSAVE_WARNINGS=\"NO\" \\\n    AFNI_TTATLAS_DATASET=\"/usr/share/afni/atlases\" \\\n    AFNI_PLUGINPATH=\"/usr/lib/afni/plugins\"\nENV PATH=\"/usr/lib/fsl/5.0:/usr/lib/afni/bin:$PATH\"\n\n# Installing ANTs 2.2.0 (NeuroDocker build)\nENV ANTSPATH=/usr/lib/ants\nRUN mkdir -p $ANTSPATH && \\\n    curl -f -sSL \"https://dl.dropbox.com/s/2f4sui1z6lcgyek/ANTs-Linux-centos5_x86_64-v2.2.0-0740f91.tar.gz\" \\\n    | tar -xzC $ANTSPATH --strip-components 1\nENV PATH=$ANTSPATH:$PATH\n\n# Create a shared $HOME directory\nRUN useradd -m -s /bin/bash -G users niworkflows\nWORKDIR /home/niworkflows\nENV HOME=\"/home/niworkflows\"\n\n# Installing SVGO\nRUN npm install -g svgo && npm cache clean --force;\n\n# Installing WEBP tools\nRUN curl -f -sSLO \"http://downloads.webmproject.org/releases/webp/libwebp-0.5.2-linux-x86-64.tar.gz\" && \\\n  tar -xf libwebp-0.5.2-linux-x86-64.tar.gz && cd libwebp-0.5.2-linux-x86-64/bin && \\\n  mv cwebp /usr/local/bin/ && rm -rf libwebp-0.5.2-linux-x86-64 && rm libwebp-0.5.2-linux-x86-64.tar.gz\n\n# Installing and setting up miniconda\nRUN curl -f -sSLO https://repo.continuum.io/miniconda/Miniconda3-4.5.11-Linux-x86_64.sh && \\\n    bash Miniconda3-4.5.11-Linux-x86_64.sh -b -p /usr/local/miniconda && \\\n    rm Miniconda3-4.5.11-Linux-x86_64.sh\n\nENV PATH=/usr/local/miniconda/bin:$PATH \\\n    LANG=C.UTF-8 \\\n    LC_ALL=C.UTF-8 \\\n    PYTHONNOUSERSITE=1\n\n# Installing precomputed python packages\nRUN conda install -y python=3.7.1 \\\n                     mkl=2018.0.3 \\\n                     mkl-service \\\n                     numpy=1.15.4 \\\n                     scipy=1.1.0 \\\n                     scikit-learn=0.19.1 \\\n                     matplotlib=2.2.2 \\\n                     pandas=0.23.4 \\\n                     libxml2=2.9.8 \\\n                     libxslt=1.1.32 \\\n                     graphviz=2.40.1 \\\n                     traits=4.6.0 \\\n                     zlib; sync && \\\n    chmod -R a+rX /usr/local/miniconda; sync && \\\n    chmod +x /usr/local/miniconda/bin/*; sync && \\\n    conda clean --all -y; sync && \\\n    conda clean -tipsy && sync\n\n# Unless otherwise specified each process should only use one thread - nipype\n# will handle parallelization\nENV MKL_NUM_THREADS=1 \\\n    OMP_NUM_THREADS=1\n\n# Precaching fonts, set 'Agg' as default backend for matplotlib\nRUN python -c \"from matplotlib import font_manager\" && \\\n    sed -i 's/\\(backend *: \\).*$/\\1Agg/g' $( python -c \"import matplotlib; print(matplotlib.matplotlib_fname())\" )\n\n# Precaching atlases\nRUN pip install --no-cache-dir \"templateflow<0.4.0a0,>=0.3.0\" && \\\n    python -c \"from templateflow import api as tfapi; \\\n               tfapi.get('MNI152Lin|MNI152NLin2009cAsym|OASIS30ANTs', suffix='T1w'); \\\n               tfapi.get('MNI152Lin|MNI152NLin2009cAsym|OASIS30ANTs', desc='brain', suffix='mask'); \\\n               tfapi.get('OASIS30ANTs', resolution=1, desc='4', suffix='dseg'); \\\n               tfapi.get('OASIS30ANTs|NKI', resolution=1, label='brain', suffix='probseg'); \\\n               tfapi.get('OASIS30ANTs|NKI', resolution=1, desc='BrainCerebellumRegistration', suffix='mask'); \"\n\n# Installing dev requirements (packages that are not in pypi)\nWORKDIR /src/\nCOPY requirements.txt requirements.txt\nRUN pip install --no-cache-dir -r requirements.txt && \\\n    rm -rf ~/.cache/pip\n\nCOPY . niworkflows/\nARG VERSION=dev\n# Force static versioning within container\nRUN echo \"${VERSION}\" > /src/niworkflows/niworkflows/VERSION && \\\n    echo \"include niworkflows/VERSION\" >> MANIFEST.in && \\\n    find /src/niworkflows/ -name \"test*.py\" -exec chmod a-x {} + && \\\n    cd /src/niworkflows && \\\n    pip install --no-cache-dir .[all] && \\\n    rm -rf ~/.cache/pip\n\n# Final settings\nWORKDIR /tmp\nARG BUILD_DATE\nARG VCS_REF\nARG VERSION\nLABEL org.label-schema.build-date=$BUILD_DATE \\\n      org.label-schema.name=\"niworkflows\" \\\n      org.label-schema.description=\"niworkflows - NeuroImaging workflows\" \\\n      org.label-schema.url=\"https://github.com/poldracklab/niworkflows\" \\\n      org.label-schema.vcs-ref=$VCS_REF \\\n      org.label-schema.vcs-url=\"https://github.com/poldracklab/niworkflows\" \\\n      org.label-schema.version=$VERSION \\\n      org.label-schema.schema-version=\"1.0\"\n"
}