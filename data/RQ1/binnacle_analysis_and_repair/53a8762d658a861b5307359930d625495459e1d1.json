{
  "startTime": 1674250804964,
  "endTime": 1674250808596,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 82,
        "lineEnd": 82,
        "columnStart": 8,
        "columnEnd": 84
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 22,
        "lineEnd": 22,
        "columnStart": 8,
        "columnEnd": 68
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 99,
        "lineEnd": 99,
        "columnStart": 4,
        "columnEnd": 42
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 106,
        "lineEnd": 106,
        "columnStart": 4,
        "columnEnd": 44
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 14,
        "lineEnd": 17,
        "columnStart": 4,
        "columnEnd": 53
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 14,
        "lineEnd": 17,
        "columnStart": 4,
        "columnEnd": 53
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM ubuntu:16.04\nMAINTAINER \"Priya Seth <sethp@us.ibm.com>\"\n\nENV WDIR=/root\nENV JAVA_HOME=/usr/lib/jvm/java-8-openjdk-ppc64el\nENV PATH=$WDIR/depot_tools:$WDIR/couchbase:$PATH\nENV VPYTHON_BYPASS=\"manually managed python not supported by chrome operations\"\nENV LD_LIBRARY_PATH=/usr/local/lib:$LD_LIBRARY_PATH\n\nCOPY crc-files.tar.gz /tmp/crc-files.tar.gz\nCOPY patch-files.tar.gz /tmp/patch-files.tar.gz\nWORKDIR /root\n\nRUN apt-get update -y && \\\n    apt-get install --no-install-recommends -y wget git g++ make curl libssl-dev libevent-dev \\\n        libcurl4-openssl-dev libsnappy-dev ncurses-dev openssl libiodbc2-dev \\\n        autoconf cmake libtool python python-dev golang-go subversion cmake \\\n        gnupg openjdk-8-jdk openjdk-8-jre lsb-release && \\\n\n    cd $WDIR && \\\n        svn export http://source.icu-project.org/repos/icu/tags/release-58-1 icu && \\\n        cd icu/icu4c/source && \\\n        ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --enable-static --disable-renaming --prefix=/usr && \\\n        make && \\\n        make install && \\\n        cp /usr/lib/libicu* /usr/local/lib && \\\n        cd $WDIR && \\\n        rm -rf icu && \\\n\n    cd $WDIR && \\\n        git clone https://chromium.googlesource.com/chromium/tools/depot_tools.git && \\\n        cd $WDIR && \\\n        fetch v8 && \\\n        cd v8 && \\\n        git checkout 5.8.75 && \\\n        gclient sync && \\\n        python gypfiles/gyp_v8 && \\\n        make -j4 ppc64.release -i werror=no GYPFLAGS+=\"-Dcomponent=shared_library -Dv8_enable_i18n_support=0\" && \\\n        make -j4 ppc64.release library=shared -i werror=no GYPFLAGS+=\"-Dcomponent=shared_library -Dv8_enable_i18n_support=0\" && \\\n        cp -vR include/* /usr/include && \\\n        cp -v out/ppc64.release/lib.target/lib*.so /usr/local/lib && \\\n        cp /usr/local/lib/libv8.so /usr/lib && \\\n\n    cd $WDIR && \\\n        git clone https://github.com/google/flatbuffers && \\\n        cd flatbuffers && \\\n        cmake -G \"Unix Makefiles\" && \\\n        make && \\\n        export PATH=$PATH:`pwd` && \\\n        make install && \\\n        cd .. && \\\n        rm -rf flatbuffers && \\\n\n    mkdir -p ~/.cbdepscache/exploded/ppc64le && \\\n        wget https://dl.google.com/go/go1.7.6.linux-ppc64le.tar.gz && \\\n        tar -xzf go1.7.6.linux-ppc64le.tar.gz && \\\n        mkdir ~/.cbdepscache/exploded/ppc64le/go-1.7.6 && \\\n        mv go ~/.cbdepscache/exploded/ppc64le/go-1.7.6 && \\\n        ln -s ~/.cbdepscache/exploded/ppc64le/go-1.7.6 ~/.cbdepscache/exploded/ppc64le/go-1.7.3 && \\\n        rm go1.7.6.linux-ppc64le.tar.gz && \\\n\n    wget https://dl.google.com/go/go1.8.1.linux-ppc64le.tar.gz && \\\n        tar -xzf go1.8.1.linux-ppc64le.tar.gz && \\\n        mkdir ~/.cbdepscache/exploded/ppc64le/go-1.8.1 && \\\n        mv go ~/.cbdepscache/exploded/ppc64le/go-1.8.1 && \\\n        rm go1.8.1.linux-ppc64le.tar.gz && \\\n\n    wget https://dl.google.com/go/go1.8.5.linux-ppc64le.tar.gz && \\\n        tar -xzf go1.8.5.linux-ppc64le.tar.gz && \\\n        mkdir ~/.cbdepscache/exploded/ppc64le/go-1.8.5 && \\\n        mv go ~/.cbdepscache/exploded/ppc64le/go-1.8.5 && \\\n        ln -s ~/.cbdepscache/exploded/ppc64le/go-1.8.5 ~/.cbdepscache/exploded/ppc64le/go-1.8.3 && \\\n        rm go1.8.5.linux-ppc64le.tar.gz && \\\n\n    wget https://dl.google.com/go/go1.9.6.linux-ppc64le.tar.gz && \\\n        tar -xzf go1.9.6.linux-ppc64le.tar.gz && \\\n        mkdir ~/.cbdepscache/exploded/ppc64le/go-1.9.6 && \\\n        mv go ~/.cbdepscache/exploded/ppc64le/go-1.9.6 && \\\n        rm go1.9.6.linux-ppc64le.tar.gz && \\\n\n    cd $WDIR && \\\n        mkdir couchbase && \\\n        curl -f https://storage.googleapis.com/git-repo-downloads/repo > couchbase/repo && \\\n        chmod a+x couchbase/repo && \\\n        cd couchbase && \\\n        repo init -u git://github.com/couchbase/manifest.git -m released/6.0.0.xml && \\\n        repo sync && \\\n\n    cd godeps/src/github.com && \\\n        mv boltdb boltdb_ORIG && \\\n        mkdir boltdb && \\\n        cd boltdb && \\\n        git clone https://github.com/boltdb/bolt.git && \\\n        cd bolt && \\\n        git tag -l && \\\n        git checkout v1.3.0 && \\\n        cd ../.. && \\\n        cd ../../.. && \\\n\n    tar -xzf /tmp/crc-files.tar.gz -C /tmp && \\\n        mv /tmp/crc-files/crc32_constants.h platform/include/platform/crc32_constants.h && \\\n        mv /tmp/crc-files/crc32_wrapper.c platform/src/crc32_wrapper.c && \\\n        mv /tmp/crc-files/crc32.S platform/src/crc32.S && \\\n        mv /tmp/crc-files/ppc-opcode.h platform/include/platform/ppc-opcode.h && \\\n        rmdir /tmp/crc-files && \\\n\n    tar -xzf /tmp/patch-files.tar.gz -C /tmp && \\\n\tmv /tmp/patch-files/tlm.patch tlm && cd tlm && git apply < tlm.patch && cd .. && \\\n\tmv /tmp/patch-files/platform.patch platform && cd platform && git apply < platform.patch && cd .. && \\\n\tmv /tmp/patch-files/forestdb.patch forestdb && cd forestdb && git apply < forestdb.patch && cd .. && \\\n\tmv /tmp/patch-files/kv_engine.patch kv_engine && cd kv_engine && git apply < kv_engine.patch && cd .. && \\\n        mv /tmp/patch-files/skiplist.patch goproj/src/github.com/couchbase/indexing/secondary/memdb/skiplist && \\\n\t\tcd goproj/src/github.com/couchbase/indexing/secondary/memdb/skiplist && \\\n\t\tgit apply < skiplist.patch && cd $WDIR/couchbase && \\\n        mv /tmp/patch-files/benchmark.patch benchmark && cd benchmark && \\\n\t\tgit apply < benchmark.patch && cd .. && \\\n\tmv /tmp/patch-files/CMakeLists.patch . && patch < CMakeLists.patch && \\\n\n    cd tlm/deps/packages && \\\n    mkdir build-boost && \\\n        cd build-boost && \\\n        cmake .. -DPACKAGE=boost && \\\n        cmake --build . --target boost && \\\n        t_filename=`ls deps/boost/*/boost*.tgz` && \\\n        m_filename=`ls deps/boost/*/boost*.md5` && \\\n        cp $t_filename ~/.cbdepscache && \\\n        cp $m_filename ~/.cbdepscache/`basename $t_filename`.md5 && \\\n        cd .. && \\\n        rm -rf build-boost && \\\n\n    mkdir build-curl && \\\n        cd build-curl && \\\n        cmake .. -DPACKAGE=curl && \\\n        cmake --build . --target curl && \\\n        t_filename=`ls deps/curl/*/curl*.tgz` && \\\n        m_filename=`ls deps/curl/*/curl*.md5` && \\\n        cp $t_filename ~/.cbdepscache && \\\n        cp $m_filename ~/.cbdepscache/`basename $t_filename`.md5 && \\\n        cd .. && \\\n        rm -rf build-curl && \\\n\n    mkdir build-flatbuffers && \\\n        cd build-flatbuffers && \\\n        cmake .. -DPACKAGE=flatbuffers && \\\n        cmake --build . --target flatbuffers && \\\n        t_filename=`ls deps/flatbuffers/*/flatbuffers*.tgz` && \\\n        m_filename=`ls deps/flatbuffers/*/flatbuffers*.md5` && \\\n        cp $t_filename ~/.cbdepscache && \\\n        cp $m_filename ~/.cbdepscache/`basename $t_filename`.md5 && \\\n        cd .. && \\\n        rm -rf build-flatbuffers && \\\n\n    mkdir build-icu4c && \\\n        cd build-icu4c && \\\n        cmake .. -DPACKAGE=icu4c && \\\n        cmake --build . --target icu4c && \\\n        t_filename=`ls deps/icu4c/*/icu4c*.tgz` && \\\n        m_filename=`ls deps/icu4c/*/icu4c*.md5` && \\\n        cp $t_filename ~/.cbdepscache && \\\n        cp $m_filename ~/.cbdepscache/`basename $t_filename`.md5 && \\\n        cd .. && \\\n        rm -rf build-icu4c && \\\n\n    mkdir build-jemalloc && \\\n        cd build-jemalloc && \\\n        cmake .. -DPACKAGE=jemalloc && \\\n        cmake --build . --target jemalloc && \\\n        t_filename=`ls deps/jemalloc/*/jemalloc*.tgz` && \\\n        m_filename=`ls deps/jemalloc/*/jemalloc*.md5` && \\\n        cp $t_filename ~/.cbdepscache && \\\n        cp $m_filename ~/.cbdepscache/`basename $t_filename`.md5 && \\\n        cd .. && \\\n        rm -rf build-jemalloc && \\\n\n    mkdir build-json && \\\n        cd build-json && \\\n        cmake .. -DPACKAGE=json && \\\n        cmake --build . --target json && \\\n        t_filename=`ls deps/json/*/json*.tgz` && \\\n        m_filename=`ls deps/json/*/json*.md5` && \\\n        cp $t_filename ~/.cbdepscache && \\\n        cp $m_filename ~/.cbdepscache/`basename $t_filename`.md5 && \\\n        cd .. && \\\n        rm -rf build-json && \\\n\n    mkdir build-libcouchbase && \\\n        cd build-libcouchbase && \\\n        cmake .. -DPACKAGE=libcouchbase && \\\n        cmake --build . --target libcouchbase && \\\n        t_filename=`ls deps/libcouchbase/*/libcouchbase*.tgz` && \\\n        m_filename=`ls deps/libcouchbase/*/libcouchbase*.md5` && \\\n        cp $t_filename ~/.cbdepscache && \\\n        cp $m_filename ~/.cbdepscache/`basename $t_filename`.md5 && \\\n        cd .. && \\\n        rm -rf build-libcouchbase && \\\n\n    mkdir build-libevent && \\\n        cd build-libevent && \\\n        cmake .. -DPACKAGE=libevent && \\\n        cmake --build . --target libevent && \\\n        t_filename=`ls deps/libevent/*/libevent*.tgz` && \\\n        m_filename=`ls deps/libevent/*/libevent*.md5` && \\\n        cp $t_filename ~/.cbdepscache && \\\n        cp $m_filename ~/.cbdepscache/`basename $t_filename`.md5 && \\\n        cd .. && \\\n        rm -rf build-libevent && \\\n\n    mkdir build-snappy && \\\n        cd build-snappy && \\\n        cmake .. -DPACKAGE=snappy && \\\n        cmake --build . --target snappy && \\\n        t_filename=`ls deps/snappy/*/snappy*.tgz` && \\\n        m_filename=`ls deps/snappy/*/snappy*.md5` && \\\n        cp $t_filename ~/.cbdepscache && \\\n        cp $m_filename ~/.cbdepscache/`basename $t_filename`.md5 && \\\n        cd .. && \\\n        rm -rf build-snappy && \\\n\n    mkdir build-python-snappy && \\\n        cd build-python-snappy && \\\n        cmake .. -DPACKAGE=python-snappy && \\\n        cmake --build . --target python-snappy && \\\n        t_filename=`ls deps/python-snappy/*/python-snappy*.tgz` && \\\n        m_filename=`ls deps/python-snappy/*/python-snappy*.md5` && \\\n        cp $t_filename ~/.cbdepscache && \\\n        cp $m_filename ~/.cbdepscache/`basename $t_filename`.md5 && \\\n        cd .. && \\\n        rm -rf build-python-snappy && \\\n\n    mkdir build-flex && \\\n        cd build-flex && \\\n\tcmake .. -DPACKAGE=flex && \\\n        cmake --build . --target flex && \\\n        t_filename=`ls deps/flex/*/flex*.tgz` && \\\n        m_filename=`ls deps/flex/*/flex*.md5` && \\\n        cp $t_filename ~/.cbdepscache && \\\n        cp $m_filename ~/.cbdepscache/`basename $t_filename`.md5 && \\\n        cd .. && \\\n        rm -rf build-flex && \\\n\n    mkdir build-libuv && \\\n        cd build-libuv && \\\n\tcmake .. -DPACKAGE=libuv && \\\n        cmake --build . --target libuv && \\\n        t_filename=`ls deps/libuv/*/libuv*.tgz` && \\\n        m_filename=`ls deps/libuv/*/libuv*.md5` && \\\n        cp $t_filename ~/.cbdepscache && \\\n        cp $m_filename ~/.cbdepscache/`basename $t_filename`.md5 && \\\n        cd .. && \\\n        rm -rf build-libuv && \\\n\n    mkdir build-lz4 && \\\n        cd build-lz4 && \\\n\tcmake .. -DPACKAGE=lz4 && \\\n        cmake --build . --target lz4 && \\\n        t_filename=`ls deps/lz4/*/lz4*.tgz` && \\\n        m_filename=`ls deps/lz4/*/lz4*.md5` && \\\n        cp $t_filename ~/.cbdepscache && \\\n        cp $m_filename ~/.cbdepscache/`basename $t_filename`.md5 && \\\n        cd .. && \\\n        rm -rf build-lz4 && \\\n\n    mkdir build-maven && \\\n        cd build-maven && \\\n\tcmake .. -DPACKAGE=maven && \\\n        cmake --build . --target maven && \\\n        t_filename=`ls deps/maven/*/maven*.tgz` && \\\n        m_filename=`ls deps/maven/*/maven*.md5` && \\\n        cp $t_filename ~/.cbdepscache && \\\n        cp $m_filename ~/.cbdepscache/`basename $t_filename`.md5 && \\\n        cd .. && \\\n        rm -rf build-maven && \\\n\n    mkdir build-numactl && \\\n        cd build-numactl && \\\n\tcmake .. -DPACKAGE=numactl && \\\n        cmake --build . --target numactl && \\\n        t_filename=`ls deps/numactl/*/numactl*.tgz` && \\\n        m_filename=`ls deps/numactl/*/numactl*.md5` && \\\n        cp $t_filename ~/.cbdepscache && \\\n        cp $m_filename ~/.cbdepscache/`basename $t_filename`.md5 && \\\n        cd .. && \\\n        rm -rf build-numactl && \\\n\n    mkdir build-zlib && \\\n        cd build-zlib && \\\n        cmake .. -DPACKAGE=zlib && \\\n        cmake --build . --target zlib && \\\n        t_filename=`ls deps/zlib/*/zlib*.tgz` && \\\n        m_filename=`ls deps/zlib/*/zlib*.md5` && \\\n        cp $t_filename ~/.cbdepscache && \\\n        cp $m_filename ~/.cbdepscache/`basename $t_filename`.md5 && \\\n        cd .. && \\\n        rm -rf build-zlib && \\\n\n    mkdir build-erlang && \\\n\tcd build-erlang && \\\n\tcmake .. -DPACKAGE=erlang && \\\n\tcmake --build . --target erlang && \\\n\tt_filename=`ls deps/erlang/*/erlang*.tgz` && \\\n\tm_filename=`ls deps/erlang/*/erlang*.md5` && \\\n\tcp $t_filename ~/.cbdepscache && \\\n\tcp $m_filename ~/.cbdepscache/`basename $t_filename`.md5 && \\\n\tcd .. && \\\n\trm -rf build-erlang && \\\n\tcd ../../.. && \\\n\n    echo \"------- starting couchbase build -------\" && \\\n        cd $WDIR && \\\n\tmkdir build && \\\n\tcd build && \\\n\tcmake -D CMAKE_BUILD_TYPE=Debug ../couchbase && \\\n\tmake all && \\\n        make install && \\\n        cd .. && \\\n        mv couchbase/install . && \\\n        rm -rf couchbase && \\\n        mkdir couchbase && mv install couchbase && \\\n        rm -rf depot_tools v8 build .cbdepscache && \\\n\n    apt-get remove -y wget git make curl autoconf cmake libtool \\\n        subversion cmake lsb-release && \\\n        apt-get autoremove -y && rm /tmp/crc-files.tar.gz && rm -rf /var/lib/apt/lists/*;\n\nWORKDIR $WDIR/couchbase/install/bin\n\nCMD [ \"/bin/bash\" ]\n"
}