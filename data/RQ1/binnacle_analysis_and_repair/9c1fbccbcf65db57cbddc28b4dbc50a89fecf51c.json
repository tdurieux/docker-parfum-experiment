{
  "startTime": 1674239185428,
  "endTime": 1674239186252,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 72,
        "lineEnd": 72,
        "columnStart": 18,
        "columnEnd": 173
      }
    },
    {
      "rule": "curlUseHttpsUrl",
      "position": {
        "lineStart": 72,
        "lineEnd": 72,
        "columnStart": 18,
        "columnEnd": 173
      }
    },
    {
      "rule": "wgetUseHttpsUrl",
      "position": {
        "lineStart": 92,
        "lineEnd": 92,
        "columnStart": 4,
        "columnEnd": 66
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 63,
        "lineEnd": 63,
        "columnStart": 7,
        "columnEnd": 35
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 64,
        "lineEnd": 64,
        "columnStart": 7,
        "columnEnd": 56
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 66,
        "lineEnd": 66,
        "columnStart": 7,
        "columnEnd": 32
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 68,
        "lineEnd": 68,
        "columnStart": 7,
        "columnEnd": 25
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 98,
        "lineEnd": 98,
        "columnStart": 7,
        "columnEnd": 27
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 101,
        "lineEnd": 101,
        "columnStart": 30,
        "columnEnd": 61
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 105,
        "lineEnd": 105,
        "columnStart": 7,
        "columnEnd": 20
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 77,
        "lineEnd": 88,
        "columnStart": 4,
        "columnEnd": 13
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 14,
        "lineEnd": 14,
        "columnStart": 22,
        "columnEnd": 92
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 19,
        "lineEnd": 59,
        "columnStart": 22,
        "columnEnd": 11
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 77,
        "lineEnd": 88,
        "columnStart": 4,
        "columnEnd": 13
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 94,
        "lineEnd": 96,
        "columnStart": 25,
        "columnEnd": 22
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 118,
        "lineEnd": 124,
        "columnStart": 25,
        "columnEnd": 24
      }
    }
  ],
  "repairedSmells": [
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 77,
        "lineEnd": 88,
        "columnStart": 4,
        "columnEnd": 13
      }
    }
  ],
  "repairedDockerfile": "FROM nvidia/cudagl:9.0-devel-ubuntu16.04\n\n# Copyright (c) 2017, NVIDIA CORPORATION. All rights reserved.\n# Full license terms provided in LICENSE.md file.\n\n# Build with:\n# docker build -t nvidia-redtail-sim:kinetic-v2 --build-arg TENSORRT_TAR_FILE=<TensorRT_tar_name> -f Dockerfile.kinetic .\n\nENV HOME /root\n\nARG TENSORRT_TAR_FILE\n\nWORKDIR ${HOME}\n\nRUN apt-get update && apt-get -y  --no-install-recommends install software-properties-common && rm -rf /var/lib/apt/lists/*;\n\n# cuDNN version must match the one used by TensorRT.\n# TRT 4.0 is compiled with cuDNN 7.1.\n\nRUN apt-get update && apt-get -y --no-install-recommends install \\\n        ant \\\n        bzip2 \\\n        ca-certificates \\\n        ccache \\\n        cmake \\\n        curl \\\n        genromfs \\\n        git \\\n        gosu \\\n        iproute \\\n        iputils-ping \\\n        less \\\n        lcov \\\n        libcudnn7=7.1.4.18-1+cuda9.0 \\\n        libcudnn7-dev=7.1.4.18-1+cuda9.0 \\\n        libeigen3-dev \\\n        libopencv-dev \\\n        make \\\n        nano \\\n        net-tools \\\n        ninja-build \\\n        openjdk-8-jdk \\\n        patch \\\n        pkg-config \\\n        protobuf-compiler \\\n        python-argparse \\\n        python-dev \\\n        python-empy \\\n        python-numpy \\\n        python-pip \\\n        python-serial \\\n        python-software-properties \\\n        rsync \\\n        s3cmd \\\n        software-properties-common \\\n        sudo \\\n        unzip \\\n        xsltproc \\\n        wget \\\n        zip \\\n    && apt-get -y autoremove \\\n    && apt-get clean autoclean \\\n    # pip \\\n    && pip install --no-cache-dir setuptools wheel \\\n    && pip install --no-cache-dir 'matplotlib==2.2.2' --force-reinstall \\\n    # coveralls code coverage reporting\n    && pip install --no-cache-dir cpp-coveralls \\\n    # jinja template generation\n    && pip install --no-cache-dir jinja2 \\\n    # cleanup\n    && rm -rf /var/lib/apt/lists/{apt,dpkg,cache,log} /tmp/* /var/tmp/* \\\n    # Add Fast-RTPS\n    && cd /opt && curl -f https://www.eprosima.com/index.php/component/ars/repository/eprosima-fast-rtps/eprosima-fast-rtps-1-5-0/eprosima_fastrtps-1-5-0-linux-tar-gz?format=raw | tar xz eProsima_FastRTPS-1.5.0-Linux/share/fastrtps/fastrtpsgen.jar eProsima_FastRTPS-1.5.0-Linux/bin/fastrtpsgen \\\n    && ln -s /opt/eProsima_FastRTPS-1.5.0-Linux/bin/fastrtpsgen /usr/local/bin/fastrtpsgen \\\n    && mkdir -p /usr/local/share/fastrtps && ln -s /opt/eProsima_FastRTPS-1.5.0-Linux/share/fastrtps/fastrtpsgen.jar /usr/local/share/fastrtps/fastrtpsgen.jar && rm -rf /var/lib/apt/lists/*;\n\n# GStreamer\nRUN apt-get -y --no-install-recommends install \\\n    gstreamer1.0-plugins-base \\\n    gstreamer1.0-plugins-bad \\\n    gstreamer1.0-plugins-ugly \\\n    gstreamer1.0-plugins-base-apps \\\n    gstreamer1.0-plugins-good \\\n    gstreamer1.0-tools \\\n    libgstreamer1.0-dev \\\n    libgstreamer-plugins-base1.0-dev \\\n    libgstreamer-plugins-good1.0-dev \\\n    libyaml-cpp-dev \\\n    v4l-utils && rm -rf /var/lib/apt/lists/*;\n\n# Gazebo\nWORKDIR ${HOME}\nRUN wget --quiet https://packages.osrfoundation.org/gazebo.key -O - | apt-key add - \\\n    && sh -c 'echo \"deb http://packages.osrfoundation.org/gazebo/ubuntu-stable xenial main\" > /etc/apt/sources.list.d/gazebo-stable.list' \\\n    && apt-get update && apt-get -y --no-install-recommends install \\\n        gazebo7         \\\n        libgazebo7-dev \\\n    # px4tools\n    && pip install --no-cache-dir px4tools \\\n    # dronekit latest\n    && git clone https://github.com/dronekit/dronekit-python.git \\\n    && ( cd dronekit-python && pip install --no-cache-dir -r requirements.txt) && rm -rf dronekit-python \\\n    # pymavlink latest\n    && git clone https://github.com/ArduPilot/pymavlink.git && cd pymavlink \\\n    && git clone git://github.com/mavlink/mavlink.git && ln -s ${PWD}/mavlink/message_definitions ../ \\\n    && pip install --no-cache-dir . && cd .. && rm -rf pymavlink && rm -rf message_definitions && rm -rf /var/lib/apt/lists/*;\n\n# PX4 firmware\nWORKDIR ${HOME}\nRUN mkdir ./px4/ && cd ./px4/                                        \\\n    && git clone https://github.com/PX4/Firmware.git && cd Firmware/ \\\n    && git checkout v1.4.4\n\n# ROS Kinetic\nWORKDIR ${HOME}\nRUN apt-key adv --keyserver hkp://ha.pool.sks-keyservers.net:80 --recv-key 421C365BD9FF1F717815A3895523BAEEB01FA116 \\\n    && sh -c 'echo \"deb http://packages.ros.org/ros/ubuntu xenial main\" > /etc/apt/sources.list.d/ros-latest.list' \\\n    && sh -c 'echo \"deb http://packages.ros.org/ros-shadow-fixed/ubuntu/ xenial main\" > /etc/apt/sources.list.d/ros-shadow.list' \\\n    && apt-get update && apt-get -y --no-install-recommends install \\\n        ros-kinetic-gazebo-ros-pkgs \\\n        ros-kinetic-mavros          \\\n        ros-kinetic-mavros-extras   \\\n        ros-kinetic-ros-base        \\\n        ros-kinetic-joy             \\\n        ros-kinetic-rviz            \\\n    && apt-get -y autoremove        \\\n    && apt-get clean autoclean \\\n    && rm -rf /var/lib/apt/lists/{apt,dpkg,cache,log} /tmp/* /var/tmp/* && rm -rf /var/lib/apt/lists/*;\n\n# Initialize ROS\nRUN geographiclib-get-geoids egm96-5 \\\n    && rosdep init                   \\\n    && rosdep update\n\nRUN echo 'source /opt/ros/kinetic/setup.bash' >> ${HOME}/.bashrc\n\n# Install OpenCV with CUDA support.\n# REVIEW alexeyk: JetPack 3.2 comes with OpenCV 3.3.1 _without_ CUDA support.\nWORKDIR ${HOME}\nRUN git clone https://github.com/opencv/opencv.git && cd opencv \\\n    && git checkout 3.3.1                   \\\n    && mkdir build && cd build              \\\n    && cmake -D CMAKE_BUILD_TYPE=RELEASE    \\\n        -D CMAKE_INSTALL_PREFIX=/usr/local  \\\n        -D WITH_CUDA=OFF                     \\\n        -D WITH_OPENCL=OFF                  \\\n        -D ENABLE_FAST_MATH=1               \\\n        -D CUDA_FAST_MATH=1                 \\\n        -D WITH_CUBLAS=1                    \\\n        -D BUILD_DOCS=OFF                   \\\n        -D BUILD_PERF_TESTS=OFF             \\\n        -D BUILD_TESTS=OFF                  \\\n        ..                                  \\\n    && make -j `nproc`                      \\\n    && make install                         \\\n    && cd ${HOME} && rm -rf ./opencv/\n\n# Install TensorRT\nWORKDIR ${HOME}\nCOPY ${TENSORRT_TAR_FILE} ${HOME}\n\nENV TENSORRT_BASE_DIR /opt/tensorrt\n# REVIEW alexeyk: lift to a build argument.\nENV TENSORRT_VER      4.0.1.6\nENV TENSORRT_DIR      ${TENSORRT_BASE_DIR}/TensorRT-${TENSORRT_VER}\n\nRUN mkdir ${TENSORRT_BASE_DIR} \\\n    && tar -xf ${TENSORRT_TAR_FILE} -C ${TENSORRT_BASE_DIR} \\\n    && echo \"export LD_LIBRARY_PATH=\\${LD_LIBRARY_PATH}:${TENSORRT_DIR}/lib\" >> ${HOME}/.bashrc \\\n    && echo \"export LIBRARY_PATH=\\${LIBRARY_PATH}:${TENSORRT_DIR}/lib\" >> ${HOME}/.bashrc       \\\n    && echo \"export CPATH=\\${CPATH}:${TENSORRT_DIR}/include\" >> ${HOME}/.bashrc\n\n# Setup catkin workspace\nENV CATKIN_WS ${HOME}/ws\nCOPY ./scripts/init_workspace.sh ${HOME}\nRUN ${HOME}/init_workspace.sh\n\n# To be run by a user after creating a container.\nCOPY ./scripts/build_redtail.sh ${HOME}\n\nENV CCACHE_CPP2=1\nENV CCACHE_MAXSIZE=1G\nENV DISPLAY :0\n#ENV PATH \"/usr/lib/ccache:$PATH\"\nENV TERM=xterm\n# Some QT-Apps/Gazebo don't not show controls without this\nENV QT_X11_NO_MITSHM 1\n\n# SITL UDP PORTS\nEXPOSE 14556/udp\nEXPOSE 14557/udp\n"
}