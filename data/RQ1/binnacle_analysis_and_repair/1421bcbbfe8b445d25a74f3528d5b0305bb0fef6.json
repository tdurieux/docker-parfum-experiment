{
  "startTime": 1674234199667,
  "endTime": 1674234199716,
  "originalSmells": [
    {
      "rule": "yarnCacheCleanAfterInstall",
      "position": {
        "lineStart": 36,
        "lineEnd": 36,
        "columnStart": 4,
        "columnEnd": 16
      }
    },
    {
      "rule": "mkdirUsrSrcThenRemove",
      "position": {
        "lineStart": 26,
        "lineEnd": 26,
        "columnStart": 4,
        "columnEnd": 22
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# This dockerfile is used to publish the `ohif/viewer` image on dockerhub.\n#\n# It's a good example of how to build our static application and package it\n# with a web server capable of hosting it as static content.\n#\n# docker build\n# --------------\n# If you would like to use this dockerfile to build and tag an image, make sure\n# you set the context to the project's root directory:\n# https://docs.docker.com/engine/reference/commandline/build/\n#\n#\n# SUMMARY\n# --------------\n# This dockerfile has two stages:\n#\n# 1. Building the React application for production\n# 2. Setting up our Nginx (Alpine Linux) image w/ step one's output\n#\n\n\n# Stage 1: Build the application\n# docker build -t ohif/viewer:latest .\nFROM node:11.2.0-slim as builder\n\n# RUN apt-get update && apt-get install -y git yarn\nRUN mkdir /usr/src/app && rm -rf /usr/src/app\nWORKDIR /usr/src/app\n\nENV PATH /usr/src/app/node_modules/.bin:$PATH\nENV GENERATE_SOURCEMAP=false\n\nCOPY package.json /usr/src/app/package.json\nCOPY yarn.lock /usr/src/app/yarn.lock\n\nADD . /usr/src/app/\nRUN yarn install && yarn cache clean;\nRUN yarn run build:web\n\n# Stage 2: Bundle the built application into a Docker container\n# which runs Nginx using Alpine Linux\nFROM nginx:1.15.5-alpine\nRUN rm -rf /etc/nginx/conf.d\nCOPY docker/Viewer-v2.x /etc/nginx/conf.d\nCOPY --from=builder /usr/src/app/build /usr/share/nginx/html\nEXPOSE 80\nEXPOSE 443\nCMD [\"nginx\", \"-g\", \"daemon off;\"]\n"
}