{
  "startTime": 1674249653407,
  "endTime": 1674249653610,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 24,
        "lineEnd": 26,
        "columnStart": 1,
        "columnEnd": 102
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 66,
        "lineEnd": 68,
        "columnStart": 1,
        "columnEnd": 119
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 80,
        "lineEnd": 82,
        "columnStart": 1,
        "columnEnd": 62
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 31,
        "lineEnd": 33,
        "columnStart": 1,
        "columnEnd": 10
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 69,
        "lineEnd": 70,
        "columnStart": 1,
        "columnEnd": 28
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM alpine:3.9 as rootfs-stage\nMAINTAINER sparkyballs,thelamer\n\n# environment\nENV REL=v3.9\nENV ARCH=armv7\nENV MIRROR=http://dl-cdn.alpinelinux.org/alpine\nENV PACKAGES=alpine-baselayout,\\\nalpine-keys,\\\napk-tools,\\\nbusybox,\\\nlibc-utils,\\\nxz\n\n# install packages\nRUN \\\n apk add --no-cache \\\n\tbash \\\n\tcurl \\\n\ttzdata \\\n\txz\n\n# fetch builder script from gliderlabs\nRUN \\\n curl -f -o \\\n /mkimage-alpine.bash -L \\\n\thttps://raw.githubusercontent.com/gliderlabs/docker-alpine/master/builder/scripts/mkimage-alpine.bash && \\\n chmod +x \\\n\t/mkimage-alpine.bash && \\\n ./mkimage-alpine.bash && \\\n mkdir /root-out && \\\n tar xf \\\n\t/rootfs.tar.xz -C \\\n\t/root-out && \\\n sed -i -e 's/^root::/root:!:/' /root-out/etc/shadow && rm /rootfs.tar.xz\n\n# Runtime stage\nFROM scratch\nCOPY --from=rootfs-stage /root-out/ /\nARG BUILD_DATE\nARG VERSION\nLABEL build_version=\"Linuxserver.io version:- ${VERSION} Build-date:- ${BUILD_DATE}\"\nLABEL MAINTAINER=\"sparkyballs,TheLamer\"\n\n# set version for s6 overlay\nARG OVERLAY_VERSION=\"v1.22.0.0\"\nARG OVERLAY_ARCH=\"arm\"\n\n# environment variables\nENV PS1=\"$(whoami)@$(hostname):$(pwd)\\\\$ \" \\\nHOME=\"/root\" \\\nTERM=\"xterm\"\n\nRUN \\\n echo \"**** install build packages ****\" && \\\n apk add --no-cache --virtual=build-dependencies \\\n\tcurl \\\n\ttar && \\\n echo \"**** install runtime packages ****\" && \\\n apk add --no-cache \\\n\tbash \\\n\tca-certificates \\\n\tcoreutils \\\n\tshadow \\\n\ttzdata && \\\n echo \"**** add s6 overlay ****\" && \\\n curl -f -o \\\n /tmp/s6-overlay.tar.gz -L \\\n\t\"https://github.com/just-containers/s6-overlay/releases/download/${OVERLAY_VERSION}/s6-overlay-${OVERLAY_ARCH}.tar.gz\" && \\\n tar xfz \\\n\t/tmp/s6-overlay.tar.gz -C / && \\\n echo \"**** create abc user and make our folders ****\" && \\\n groupmod -g 1000 users && \\\n useradd -u 911 -U -d /config -s /bin/false abc && \\\n usermod -G users abc && \\\n mkdir -p \\\n\t/app \\\n\t/config \\\n\t/defaults && \\\n echo \"**** add qemu ****\" && \\\n curl -f -o \\\n /usr/bin/qemu-arm-static -L \\\n\t\"https://lsio-ci.ams3.digitaloceanspaces.com/qemu-arm-static\" && \\\n chmod +x /usr/bin/qemu-arm-static && \\\n echo \"**** cleanup ****\" && \\\n apk del --purge \\\n\tbuild-dependencies && \\\n rm -rf \\\n\t/tmp/* && rm /tmp/s6-overlay.tar.gz\n\n# add local files\nCOPY root/ /\n\nENTRYPOINT [\"/init\"]\n"
}