{
  "startTime": 1674251725789,
  "endTime": 1674251726249,
  "originalSmells": [
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 37,
        "lineEnd": 48,
        "columnStart": 4,
        "columnEnd": 14
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 37,
        "lineEnd": 48,
        "columnStart": 4,
        "columnEnd": 14
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# This Dockerfile has been adapted from the original work here\n# https://github.com/gpuopenanalytics/pygdf\n# An integration test & dev container which builds and installs libgdf & pygdf from master\nFROM nvidia/cuda-ppc64le:9.2-cudnn7-devel-ubuntu16.04\n\nMAINTAINER \"Priya Seth <sethp@us.ibm.com>\"\n\nARG CC_VERSION=5\nARG CXX_VERSION=5\nARG PYTHON_VERSION=3.6\nARG NUMBA_VERSION=0.40.0\nARG NUMPY_VERSION=1.14.5\n# Locked to Pandas 0.20.3 by https://github.com/gpuopenanalytics/pygdf/issues/118\nARG PANDAS_VERSION=0.20.3\nARG LIBGDF_REPO=https://github.com/gpuopenanalytics/libgdf\nARG HASH_JOIN=ON\nARG ARROW_REPO=https://github.com/apache/arrow.git\nARG PYGDF_REPO=https://github.com/gpuopenanalytics/pygdf\n\n# Needed for pygdf.concat(), avoids \"OSError: library nvvm not found\"\nENV NUMBAPRO_NVVM=/usr/local/cuda/nvvm/lib64/libnvvm.so\nENV NUMBAPRO_LIBDEVICE=/usr/local/cuda/nvvm/libdevice/\nENV PATH=${PATH}:/conda/bin\nENV ARROW_BUILD_TYPE=release\nENV ARROW_HOME=/repos/dist\nENV LD_LIBRARY_PATH=/repos/dist/lib:$LD_LIBRARY_PATH:/usr/local/cuda/lib64:/usr/local/lib\nENV CC=/usr/bin/gcc-${CC_VERSION}\nENV CXX=/usr/bin/g++-${CXX_VERSION}\n\n# Install conda\nADD https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-ppc64le.sh /miniconda.sh\nRUN sh /miniconda.sh -b -p /conda && /conda/bin/conda update -n base conda\n# Enables \"source activate conda\"\nSHELL [\"/bin/bash\", \"-c\"]\n\nRUN apt update -y --fix-missing && \\\n    apt upgrade -y && \\\n    apt install --no-install-recommends -y \\\n      git \\\n      gcc-${CC_VERSION} \\\n      g++-${CXX_VERSION} \\\n      libboost-all-dev \\\n      libffi-dev \\\n      gfortran \\\n      libjemalloc-dev \\\n      flex \\\n      bison \\\n      pkg-config \\\n      autoconf && \\\n\n# Build combined libgdf/pygdf conda env\n    conda create -n gdf python=${PYTHON_VERSION} && \\\n    conda install -n gdf -y -c numba -c conda-forge -c defaults \\\n      numba=${NUMBA_VERSION} \\\n      numpy=${NUMPY_VERSION} \\\n      pandas=${PANDAS_VERSION} \\\n      cmake \\\n      cython \\\n      pytest && \\\n\n# LibGDF build/install\n    git clone --recurse-submodules ${LIBGDF_REPO} -b v0.1.0a3 /libgdf && \\\n    source activate gdf && \\\n    mkdir -p /libgdf/build && \\\n    cd /libgdf/ && \\\n    cd build && \\\n    cmake .. && \\\n    cmake .. -DHASH_JOIN=${HASH_JOIN} && \\\n    make -j install && \\\n    make copy_python && \\\n    python setup.py install && \\\n\n# Arrow build install\n    mkdir -p /repos && \\\n    git clone --recurse-submodules ${ARROW_REPO} /repos/arrow && \\\n    mkdir -p /repos/dist && \\\n    source activate gdf && \\\n    mkdir -p /repos/arrow/cpp/build && \\\n    cd /repos/arrow/cpp/build && \\\n    cmake -DCMAKE_BUILD_TYPE=$ARROW_BUILD_TYPE \\\n          -DCMAKE_INSTALL_PREFIX=$ARROW_HOME \\\n          -DARROW_PYTHON=on \\\n          -DARROW_BUILD_TESTS=OFF \\\n          .. && \\\n    make -j4 && \\\n    make install && \\\n    # pyArrow build install\n    source activate gdf && \\\n    cd /repos/arrow/python && \\\n    python setup.py build_ext --build-type=$ARROW_BUILD_TYPE --inplace && \\\n    python setup.py install && \\\n\n# PyGDF build/install\n# To build container against https://github.com/gpuopenanalytics/pygdf/pull/138:\n# docker build --build-arg PYGDF_REPO=\"https://github.com/dantegd/pygdf -b enh-ext-unique-value-counts\" -t gdf .\n    git clone --recurse-submodules ${PYGDF_REPO} -b v0.1.0a3 /pygdf && \\\n    source activate gdf && \\\n    cd /pygdf && \\\n    python setup.py install && \\\n\n     apt-get remove -y \\\n      git \\\n      libffi-dev \\\n      libjemalloc-dev \\\n      flex \\\n      bison \\\n      pkg-config && \\\n    apt-get autoremove -y && rm -rf /var/lib/apt/lists/*;\n\nCMD [ \"/bin/bash\" ]\n"
}