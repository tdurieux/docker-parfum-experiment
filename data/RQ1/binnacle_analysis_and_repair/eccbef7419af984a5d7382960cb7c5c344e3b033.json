{
  "startTime": 1674241627071,
  "endTime": 1674241627345,
  "originalSmells": [
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 45,
        "lineEnd": 45,
        "columnStart": 4,
        "columnEnd": 24
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 49,
        "lineEnd": 49,
        "columnStart": 4,
        "columnEnd": 35
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 62,
        "lineEnd": 62,
        "columnStart": 4,
        "columnEnd": 50
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 9,
        "lineEnd": 23,
        "columnStart": 22,
        "columnEnd": 14
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM continuumio/miniconda3:4.5.11\n\n# NOTE: Versions have been pinned everywhere. These are the latest versions at the moment, because\n# I want to ensure predictable behavior, but I don't know of any problems with higher versions:\n# It would be good to update these over time.\n\n# \"pip install clodius\" complained about missing gcc,\n# and \"apt-get install gcc\" failed and suggested apt-get update.\n# (Was having some trouble with installs, so split it up for granular caching.)\nRUN apt-get update && apt-get install --no-install-recommends -y \\\n        gcc \\\n        nginx \\\n        supervisor \\\n        unzip \\\n        uwsgi-plugin-python3 \\\n        zlib1g-dev \\\n        libcurl4-openssl-dev \\\n        g++ \\\n        vim \\\n        build-essential \\\n        libssl-dev \\\n        libpng-dev \\\n        htop \\\n        procps \\\n    && rm -rf /var/lib/apt/lists/*\n\n# Keep big dependencies which are unlikely to change near the top of this file.\nRUN conda install --yes cython==0.25.2 numpy=1.12.0\nRUN conda install --yes --channel bioconda pysam htslib=1.3.2\nRUN conda install -c conda-forge --yes uwsgi==2.0.17.1\n# RUN pip install uwsgi==2.0.17\n\n\n# Setup home directory\nRUN groupadd -r higlass && useradd -r -g higlass higlass\nWORKDIR /home/higlass\nRUN chown higlass:higlass .\nUSER higlass\n\n\n# Setup server\n# Most dependencies should come from a cached layer, even before we checkout:\n# The idea is that you want to be able to release small updates to the code,\n# without having to refetch all dependencies.\nUSER root\nRUN pip install --no-cache-dir pyBigWig\nRUN pip install clodius==<CLODIUS_VERSION>\n# This is *not* tagged: The idea here is *not* to bust the cache on every minor version.\nRUN wget https://raw.githubusercontent.com/higlass/higlass-server/master/requirements.txt\nRUN pip install --no-cache-dir -r requirements.txt\n\nWORKDIR /home/higlass/projects\nRUN chown higlass:higlass .\nUSER higlass\nRUN git clone --depth 1 https://github.com/hms-dbmi/higlass-server.git --branch v<SERVER_VERSION>\nRUN git clone https://github.com/vishnubob/wait-for-it.git\nUSER root\n\nWORKDIR /home/higlass/projects/higlass-server\nRUN python manage.py collectstatic --noinput -c\n\nWORKDIR /home/higlass/projects\nRUN pip install --no-cache-dir -r higlass-server/requirements.txt\nUSER higlass\n\n# Setup application (includes client js)\nENV HIPILER_REPO hipiler\nRUN wget -O hipiler.zip https://github.com/flekschas/$HIPILER_REPO/releases/download/v<HIPILER_VERSION>/build.zip\nRUN unzip hipiler.zip -d hipiler\n\nENV WEB_APP_REPO higlass-app\nRUN wget -O higlass-app.zip https://github.com/hms-dbmi/$WEB_APP_REPO/releases/download/v<WEB_APP_VERSION>/build.zip\nRUN unzip higlass-app.zip -d higlass-app\n# CHANGE THE NEXT LINE TO AFTER UPDATING HGLIB TO v1.3:\n# RUN wget -O higlass-app/hglib.min.js https://unpkg.com/higlass@<LIBRARY_VERSION>/dist/hglib.min.js\nRUN wget -O higlass-app/hglib.min.js https://unpkg.com/higlass@<LIBRARY_VERSION>/dist/hglib.js\nRUN wget -O higlass-app/hglib.min.css https://unpkg.com/higlass@<LIBRARY_VERSION>/dist/hglib.css\n\nRUN wget -O higlass-app/higlass-multivec.min.js https://unpkg.com/higlass-multivec@<MULTIVEC_VERSION>/dist/higlass-multivec.min.js\nRUN wget -O higlass-app/higlass-time-interval-track.min.js https://unpkg.com/higlass-time-interval-track@<TIME_INTERVAL_TRACK_VERSION>/dist/higlass-time-interval-track.min.js\nRUN wget -O higlass-app/higlass-linear-labels-track.min.js https://unpkg.com/higlass-linear-labels-track@<LINEAR_LABELS_TRACK_VERSION>/dist/higlass-linear-labels-track.min.js\nRUN wget -O higlass-app/higlass-labelled-points-track.min.js https://unpkg.com/higlass-labelled-points-track@<LABELLED_POINTS_TRACK_VERSION>/dist/higlass-labelled-points-track.min.js\n\nRUN wget -O higlass-app/higlass-bedlike-triangles-track.min.js https://unpkg.com/higlass-bedlike-triangles-track@<BEDLIKE_TRIANGLES_TRACK_VERSION>/dist/higlass-bedlike-triangles-track.min.js\n\nRUN sed -i -e 's#<script src=\"/hglib.min.js\"></script>#<script src=\"/higlass-multivec.min.js\"></script><script src=\"/hglib.min.js\"></script>#' higlass-app/index.html\nRUN sed -i -e 's#<script src=\"/hglib.min.js\"></script>#<script src=\"/higlass-time-interval-track.min.js\"></script><script src=\"/hglib.min.js\"></script>#' higlass-app/index.html\nRUN sed -i -e 's#<script src=\"/hglib.min.js\"></script>#<script src=\"/higlass-linear-labels-track.min.js\"></script><script src=\"/hglib.min.js\"></script>#' higlass-app/index.html\nRUN sed -i -e 's#<script src=\"/hglib.min.js\"></script>#<script src=\"/higlass-labelled-points-track.min.js\"></script><script src=\"/hglib.min.js\"></script>#' higlass-app/index.html\n\nRUN ( echo \"SERVER_VERSION: <SERVER_VERSION>\"; \\\n      echo \"WEB_APP_VERSION: <WEB_APP_VERSION>\"; \\\n      echo \"LIBRARY_VERSION: <LIBRARY_VERSION>\"; \\\n      echo \"HIPILER_VERSION: <HIPILER_VERSION>\"; \\\n      echo \"MULTIVEC_VERSION: <MULTIVEC_VERSION>\"; \\\n      echo \"CLODIUS_VERSION: <CLODIUS_VERSION>\"; \\\n      echo \"TIME_INTERVAL_TRACK_VERSION: <TIME_INTERVAL_TRACK_VERSION>\"; \\\n      echo \"LINEAR_LABELS_TRACK: <LINEAR_LABELS_TRACK>\"; \\\n      echo \"LABELLED_POINTS_TRACK: <LABELLED_POINTS_TRACK>\"; \\\n      ) \\\n    > higlass-app/version.txt\n\n# Setup supervisord and nginx\nUSER root\n\nCOPY nginx.conf /etc/nginx/\nCOPY sites-enabled/* /etc/nginx/sites-enabled/\n\nCOPY uwsgi_params higlass-server/\nCOPY default-viewconf-fixture.xml higlass-server/\n\nCOPY supervisord.conf .\nCOPY uwsgi.ini .\n# Helper scripts\nCOPY *.sh ./\n\n\nRUN rm /etc/nginx/sites-*/default && grep 'listen' /etc/nginx/sites-*/*\n# Without this, two config files are trying to grab port 80:\n# nginx: [emerg] bind() to 0.0.0.0:80 failed (98: Address already in use)\n\n\nEXPOSE 80\n\nENV HIGLASS_SERVER_BASE_DIR /data\nVOLUME /data\n\nARG WORKERS\nENV WORKERS ${WORKERS}\nRUN echo \"WORKERS: $WORKERS\"\n\n# TODO: Needs to write to logs, but running as root is risky\n# Given as list so that an extra shell does not need to be started.\nCMD [\"supervisord\", \"-n\"]\n"
}