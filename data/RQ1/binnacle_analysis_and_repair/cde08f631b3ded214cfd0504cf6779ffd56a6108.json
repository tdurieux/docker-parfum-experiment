{
  "startTime": 1674238958187,
  "endTime": 1674238958262,
  "originalSmells": [
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 15,
        "lineEnd": 15,
        "columnStart": 4,
        "columnEnd": 33
      }
    },
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 19,
        "lineEnd": 19,
        "columnStart": 4,
        "columnEnd": 15
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "#\n# ---- Base Node ----\nFROM node:8-alpine AS base\n# set working directory\nWORKDIR /shortener\n# install git\nRUN apk add --no-cache git\n# copy project file\nCOPY package.json package-lock.json ./\n\n#\n# ---- Dependencies ----\nFROM base AS dependencies\n# install node packages\nRUN npm set progress=false && npm config set depth 0 && npm cache clean --force\nRUN npm install --only=production && npm cache clean --force;\n# copy production node_modules aside\nRUN cp -R node_modules prod_node_modules\n# install ALL node_modules, including 'devDependencies'\nRUN npm install && npm cache clean --force;\n\n# ---- Build ----\n# build up docs\nFROM dependencies AS build\nCOPY . .\nRUN npm run build:docs\n\n#\n# ---- Release ----\nFROM base AS release\n# copy production node_modules\nCOPY --from=dependencies /shortener/prod_node_modules ./node_modules\n# prune for good measure\nRUN npm prune --production\nRUN rm -rf .git .gitignore *.sh docker-compose* Dockerfile* *.md nginx.conf\n# copy in built docs\nCOPY --from=build /shortener/docs ./\n# copy app sources\nCOPY . .\nCMD npm start\n"
}