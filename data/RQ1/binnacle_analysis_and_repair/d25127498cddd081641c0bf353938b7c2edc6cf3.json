{
  "startTime": 1674240261694,
  "endTime": 1674240261733,
  "originalSmells": [
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 3,
        "lineEnd": 3,
        "columnStart": 4,
        "columnEnd": 28
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM node:10.15-stretch as base-system\n\n# Install grunt-cli globally\nRUN npm install -g grunt-cli && npm cache clean --force;\n\nCOPY .dockerfiles/build-webview.sh /usr/local/bin/\n\n# Create the webview user, group, home directory, and package directory.\n# Note, the packaging tools don't like to run as root.\nRUN addgroup --system webview && adduser --system --group webview --home /code\n\n# Copy application code into the image\nCOPY . /code\nRUN chown -R webview:webview /code\n\nUSER webview\nWORKDIR /code\n\nFROM base-system as built\n\n# Specify the type of container to build: 'dev' OR 'prod'\n#  - 'dev' will specify that the container should run the source\n#  - 'prod' will run as close to production as possible\nARG environment=prod\nENV ENVIRONMENT=${environment}\n\n# Setup the webview application\nCOPY .dockerfiles/build-webview.sh /usr/local/bin/\nRUN build-webview.sh\n\n\nFROM nginx:latest as serve\n\n# Specify the type of container runtime: 'dev' OR 'prod'\n#  - 'dev' will specify that the container should run the source\n#  - 'prod' will run as close to production as possible\nARG environment=prod\nENV ENVIRONMENT=${environment}\n\nCOPY --from=built /code /code\nCOPY .dockerfiles/configure-nginx-from-env.sh /usr/local/bin/\nCOPY .dockerfiles/docker-entrypoint.sh /usr/local/bin/\nENTRYPOINT [\"docker-entrypoint.sh\"]\n\nCMD [\"nginx\", \"-g\", \"daemon off;\"]\n"
}