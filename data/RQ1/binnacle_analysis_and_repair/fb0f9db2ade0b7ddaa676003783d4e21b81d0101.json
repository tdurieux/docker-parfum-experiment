{
  "startTime": 1674242071338,
  "endTime": 1674242071643,
  "originalSmells": [
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 39,
        "lineEnd": 39,
        "columnStart": 4,
        "columnEnd": 29
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 39,
        "lineEnd": 39,
        "columnStart": 34,
        "columnEnd": 59
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 79,
        "lineEnd": 79,
        "columnStart": 8,
        "columnEnd": 57
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 72,
        "lineEnd": 72,
        "columnStart": 8,
        "columnEnd": 19
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# Dockerfile for Tensorflow-1.3.1 for ppc64le with GPU suppport\n\nFROM nvidia/cuda-ppc64le:8.0-cudnn6-devel-ubuntu16.04\n\nLABEL maintainer=\"Sandip Giri <sgiri@us.ibm.com>\"\n\nENV JAVA_HOME /usr/lib/jvm/java-1.8.0-openjdk-ppc64el\nENV JRE_HOME ${JAVA_HOME}/jre\nENV PATH ${JAVA_HOME}/bin:$PATH\n\nENV LD_LIBRARY_PATH /usr/local/cuda/extras/CUPTI/lib64:$LD_LIBRARY_PATH\n\nRUN apt-get update -y && apt-get install -y --no-install-recommends \\\n        openjdk-8-jdk \\\n\twget \\\n\tcurl \\\n\tunzip \\\n\tzip \\\n  \tgit \\\n\trsync \\\n        python-dev \\\n\tswig \\\n\tpython-pip \\\n\tlibatlas-dev \\\n\tpython-numpy \\\n\tlibopenblas-dev \\\n\tlibcurl3-dev \\\n\tlibfreetype6-dev \\\n\tlibzmq3-dev \\\n\tlibhdf5-dev \\\n\t&& \\\n    mkdir bazel && cd bazel && \\\n        wget https://github.com/bazelbuild/bazel/releases/download/0.5.4/bazel-0.5.4-dist.zip  && \\\n        unzip bazel-0.5.4-dist.zip  && \\\n        chmod -R +w . && \\\n        ./compile.sh && \\\n\tcd / && \\\n\texport PATH=$PATH:/bazel/output \\\n        && \\\n    pip install --no-cache-dir --upgrade pip && pip install --no-cache-dir -U setuptools && \\\n\tpip --no-cache-dir install \\\n\tsix \\\n\tnumpy==1.12.0 \\\n        wheel \\\n        portpicker \\\n        pandas \\\n        scipy \\\n        jupyter \\\n        scikit-learn \\\n        && \\\n    git clone --recurse-submodules https://github.com/tensorflow/tensorflow && \\\n        cd tensorflow && \\\n        git checkout v1.3.1 && \\\n\texport CC_OPT_FLAGS=\"-mcpu=power8 -mtune=power8\" && \\\n        export GCC_HOST_COMPILER_PATH=/usr/bin/gcc && \\\n        export PYTHON_BIN_PATH=/usr/bin/python && \\\n        export USE_DEFAULT_PYTHON_LIB_PATH=1 && \\\n        export TF_NEED_GCP=1 && \\\n        export TF_NEED_HDFS=1 && \\\n        export TF_NEED_JEMALLOC=1 && \\\n        export TF_ENABLE_XLA=1 && \\\n        export TF_NEED_OPENCL=0 && \\\n        export TF_NEED_CUDA=1 && \\\n  export TF_CUDA_VERSION=8.0 && \\\n\texport CUDA_TOOLKIT_PATH=/usr/local/cuda-8.0 && \\\n\texport TF_CUDA_COMPUTE_CAPABILITIES=3.5,3.7,5.2,6.0 && \\\n\texport CUDNN_INSTALL_PATH=/usr/local/cuda-8.0 && \\\n\texport TF_CUDNN_VERSION=6 && \\\n\texport TF_NEED_MKL=0 && \\\n\texport TF_NEED_VERBS=0 && \\\n\texport TF_NEED_MPI=0 && \\\n\texport TF_CUDA_CLANG=0 && \\\n        ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" && \\\n\ttouch /usr/include/stropts.h && \\\n\tln -s /usr/local/cuda/lib64/stubs/libcuda.so /usr/local/cuda/lib64/stubs/libcuda.so.1 && \\\n\tLD_LIBRARY_PATH=/usr/local/cuda/lib64/stubs:${LD_LIBRARY_PATH} \\\n        tensorflow/tools/ci_build/builds/configured GPU \\\n        bazel build --config=opt --config=cuda //tensorflow/tools/pip_package:build_pip_package --local_resources=32000,8,1.0 && \\\n        bazel-bin/tensorflow/tools/pip_package/build_pip_package /tmp/tensorflow_pkg && \\\n        pip install --no-cache-dir /tmp/tensorflow_pkg/tensorflow-1.3.1* \\\n        && \\\n    cd /tensorflow/tensorflow/tools/docker && \\\n    mkdir /root/.jupyter/ && \\\n\tcp jupyter_notebook_config.py /root/.jupyter/ && \\\n\tcp -r notebooks /notebooks && \\\n\tcp run_jupyter.sh / \\\n        && \\\n    apt-get purge -y  openjdk-8-jdk libatlas-dev libopenblas-dev wget zip git rsync && \\\n        apt-get -y autoremove && \\\n        apt-get clean && \\\n        rm -rf /tensorflow /bazel /tmp/tensorflow_pkg /root/.cache /var/lib/apt/lists/*\n\n# TensorBoard\nEXPOSE 6006\n\n# IPython\nEXPOSE 8888\n\nWORKDIR \"/notebooks\"\n\nCMD [\"/run_jupyter.sh\", \"--allow-root\"]\n\n\n"
}