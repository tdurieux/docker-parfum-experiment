{
  "startTime": 1674244152784,
  "endTime": 1674244153555,
  "originalSmells": [
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 96,
        "lineEnd": 96,
        "columnStart": 4,
        "columnEnd": 15
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# Copyright (c) 2018-2019, NVIDIA CORPORATION. All rights reserved.\n#\n# Redistribution and use in source and binary forms, with or without\n# modification, are permitted provided that the following conditions\n# are met:\n#  * Redistributions of source code must retain the above copyright\n#    notice, this list of conditions and the following disclaimer.\n#  * Redistributions in binary form must reproduce the above copyright\n#    notice, this list of conditions and the following disclaimer in the\n#    documentation and/or other materials provided with the distribution.\n#  * Neither the name of NVIDIA CORPORATION nor the names of its\n#    contributors may be used to endorse or promote products derived\n#    from this software without specific prior written permission.\n#\n# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS ``AS IS'' AND ANY\n# EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\n# PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR\n# CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,\n# EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,\n# PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n# PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY\n# OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\nRUN apt update && apt install -y --no-install-recommends build-essential autoconf libtool git \\\n        curl wget pkg-config sudo ca-certificates vim-tiny automake libssl-dev bc python3-pip \\\n        google-perftools \\\n && apt remove -y cmake \\\n && apt remove -y libgflags-dev libgflags2v5 \\\n && apt remove -y libprotobuf-dev \\\n && apt -y autoremove \\\n && rm -rf /var/lib/apt/lists/*\n\nenv LC_ALL=C.UTF-8\nenv LANG=C.UTF-8\n\nRUN python3 -m pip install --upgrade pip \\\n && python3 -m pip install --upgrade setuptools \\\n && python3 -m pip install cmake==3.11.0\n\n# install gflags\n# -DBUILD_SHARED_LIBS=ON -DBUILD_STATIC_LIBS=ON -DBUILD_gflags_LIB=ON .. \\\nRUN git clone -b v2.2.2 https://github.com/gflags/gflags.git \\\n && cd gflags \\\n && mkdir build && cd build \\\n && cmake -DBUILD_SHARED_LIBS=ON -DBUILD_STATIC_LIBS=ON -DBUILD_gflags_LIB=ON .. \\ \n && make -j \\\n && make install \\\n && cd /tmp && rm -rf gflags\n\n# install glog\nRUN git clone -b v0.3.5 https://github.com/google/glog.git \\\n && cd glog \\\n && cmake -H. -Bbuild -G \"Unix Makefiles\" -DBUILD_SHARED_LIBS=ON -DBUILD_STATIC_LIBS=ON \\\n && cmake --build build \\\n && cmake --build build --target install \\\n && cd /tmp && rm -rf glog\n\n# grpc 1.17.x is blocked by: https://github.com/google/flatbuffers/pull/5100\n# cmake build per: https://github.com/grpc/grpc/blob/master/test/distrib/cpp/run_distrib_test_cmake.sh\n# -DCMAKE_INSTALL_PREFIX:PATH=/usr to overwrite the version of protobuf installed in the TensorRT base image\nWORKDIR /source\nRUN git clone -b v1.16.1 https://github.com/grpc/grpc \\\n && cd grpc \\\n && git submodule update --init \\\n && cd third_party/cares/cares \\ \n && mkdir -p cmake/build \\\n && cd cmake/build \\\n && cmake -DCMAKE_BUILD_TYPE=Release ../.. \\\n && make -j20 install \\\n && cd ../../../../.. \\\n && rm -rf third_party/cares/cares \\\n && cd third_party/zlib && mkdir -p cmake/build && cd cmake/build \\\n && cmake -DCMAKE_BUILD_TYPE=Release ../.. \\\n && make -j20 install \\\n && cd ../../../.. \\ \n && rm -rf third_party/zlib \\\n && cd third_party/protobuf && mkdir -p cmake/build && cd cmake/build \\\n && cmake -Dprotobuf_BUILD_TESTS=OFF -DCMAKE_INSTALL_PREFIX:PATH=/usr -DCMAKE_BUILD_TYPE=Release -DCMAKE_POSITION_INDEPENDENT_CODE=TRUE -DBUILD_SHARED_LIBRARIES=ON .. \\\n && make -j20 install \\\n && cd ../../../.. \\ \n && rm -rf third_party/protobuf \\\n && cd /source/grpc \\\n && mkdir -p cmake/build \\\n && cd cmake/build \\\n && cmake -DBUILD_SHARED_LIBRARIES=ON -DgRPC_INSTALL=ON -DgRPC_BUILD_TESTS=OFF -DgRPC_PROTOBUF_PROVIDER=package -DgRPC_ZLIB_PROVIDER=package \\\n          -DgRPC_CARES_PROVIDER=package -DCMAKE_BUILD_TYPE=Release -DgRPC_SSL_PROVIDER=package -DgRPC_GFLAGS_PROVIDER=package ../.. \\\n && make -j20 install \\\n && cd /source && rm -rf grpc\n\nRUN git clone -b v1.0.6 https://github.com/dcdillon/cpuaff \\\n && cd cpuaff \\\n && ls -lF \\\n && ./bootstrap.sh \\\n && ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" \\\n && make \\\n && make install \\\n && cd ../ \\\n && rm -rf cpuaff\n\nRUN git clone -b v1.4.1 https://github.com/google/benchmark.git \\\n && cd benchmark \\\n && git clone -b release-1.8.0 https://github.com/google/googletest.git \\\n && mkdir build && cd build \\\n && cmake .. -DCMAKE_BUILD_TYPE=RELEASE \\\n && make -j && make install \\\n && cd /tmp && rm -rf benchmark\n\nRUN git clone https://github.com/jupp0r/prometheus-cpp.git \\\n && cd prometheus-cpp \\\n && git checkout -b yais e7709f7e3b71bc5b1ac147971c87f2f0ae9ea358 \\\n && git submodule update --init --recursive \\\n && mkdir build && cd build \\\n && cmake -DCMAKE_POSITION_INDEPENDENT_CODE=TRUE .. \\\n && make -j \\\n && make install \\\n && cd .. && rm -rf prometheus-cpp\n\nRUN git clone https://github.com/cameron314/concurrentqueue.git \\\n && cd concurrentqueue \\\n && git checkout 8f65a87 \\\n && mkdir -p /usr/local/include/moodycamel \\\n && cp *.h /usr/local/include/moodycamel/ \\\n && cd .. && rm -rf concurrentqueue\n\n# install flatbuffers\nRUN git clone -b v1.10.0 https://github.com/google/flatbuffers.git \\\n && cd flatbuffers \\\n && mkdir build2 && cd build2 \\\n && cmake -DCMAKE_BUILD_TYPE=Release .. \\\n && make -j$(nproc) install \\\n && cd .. && rm -rf flatbuffers\n\nWORKDIR /tmp\nRUN wget https://raw.githubusercontent.com/vishnubob/wait-for-it/master/wait-for-it.sh \\\n && chmod +x wait-for-it.sh \\\n && mv wait-for-it.sh /usr/local/bin/\n\n# Envoy v1.9\n# https://github.com/envoyproxy/envoy/commit/37bfd8ac347955661af695a417492655b21939dc\nCOPY --from=envoyproxy/envoy:37bfd8ac347955661af695a417492655b21939dc /usr/local/bin/envoy /usr/local/bin/envoy\n\nRUN wget https://dl.influxdata.com/telegraf/releases/telegraf-1.7.1-static_linux_amd64.tar.gz \\\n && tar xzf telegraf-1.7.1-static_linux_amd64.tar.gz \\\n && mv telegraf/telegraf /usr/local/bin \\\n && rm -rf telegraf-1.7.1-static_linux_amd64.tar.gz telegraf\n\n## RUN git clone -b 1.7.61 https://github.com/aws/aws-sdk-cpp.git \\\n##  && cd aws-sdk-cpp \\\n##  && mkdir build && cd build \\\n##  && cmake -DCMAKE_BUILD_TYPE=Release .. \\\n##  && make -j \\\n##  && make install \\\n##  && cd .. && rm -rf aws-sdk-cpp\n\n## RUN apt update && apt install -y --no-install-recommends \\\n##         pkg-config zip g++ zlib1g-dev unzip python \\\n##  && rm -rf /var/lib/apt/lists/*\n\n## ENV BAZEL_VERSION=\"0.21.0\"\n##\n## RUN wget https://github.com/bazelbuild/bazel/releases/download/$BAZEL_VERSION/bazel-$BAZEL_VERSION-installer-linux-x86_64.sh \\\n##  && chmod +x bazel-$BAZEL_VERSION-installer-linux-x86_64.sh \\\n##  && ./bazel-$BAZEL_VERSION-installer-linux-x86_64.sh \\\n##  && rm -f bazel-$BAZEL_VERSION-installer-linux-x86_64.sh\n\n# ===================\n# TensorRT Laboratory\n# ===================\n\nCOPY requirements.txt /tmp/requirements.txt\n\nRUN python3 -m pip install -r /tmp/requirements.txt \\\n && rm -f /tmp/requirements.txt\n\n\nWORKDIR /work\nCOPY . .\nRUN ./build.sh\n\nENV PYTHONPATH=/work/build/tensorrt-laboratory/python/trtlab\n"
}