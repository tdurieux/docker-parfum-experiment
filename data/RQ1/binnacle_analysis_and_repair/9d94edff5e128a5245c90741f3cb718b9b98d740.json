{
  "startTime": 1674249127051,
  "endTime": 1674249127096,
  "originalSmells": [
    {
      "rule": "yumInstallRmVarCacheYum",
      "position": {
        "lineStart": 4,
        "lineEnd": 4,
        "columnStart": 19,
        "columnEnd": 103
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM centos:7\n\nMAINTAINER Gustavo Luszczynski <gluszczy@redhat.com>, Rafael Soares (Tuelho) <rafaelcba@gmail.com>\n\nRUN yum -y update; yum -y install hostname iproute unzip xterm net-tools nc openssh-server wget bsdtar; rm -rf /var/cache/yum yum clean all\n\nENV TERM=xterm SOFTWARE_INSTALL_DIR=/opt/redhat\n\nRUN mkdir -p $SOFTWARE_INSTALL_DIR\n\nVOLUME /dnsmasq.hosts\nRUN chmod -Rf a+w /dnsmasq.hosts/\n\nCOPY support/*.sh /\n\nRUN . /build_setup.sh\n\nCMD [\"/bin/cat\", \"/etc/redhat-release\"]\n\n###################\n# IMPORTANT NOTE!!!\n###################\n# from Dockerfile reference manual...\n# https://docs.docker.com/reference/builder/\n# https://docs.docker.com/articles/dockerfile_best-practices/\n#\n# The best use for ENTRYPOINT is to set the image’s main command,\n# allowing that image to be run as though it was that command (and then use CMD as the default flags).\n\n# Command line arguments to docker run <image> will be appended after all elements\n# in an exec form ENTRYPOINT, and will override all elements specified using CMD.\n# This allows arguments to be passed to the entry point, i.e.,\n# docker run <image> -d will pass the -d argument to the entry point.\n# You can override the ENTRYPOINT instruction using the docker run --entrypoint flag.\n#\n# The shell form prevents any CMD or run command line arguments from being used,\n# but has the disadvantage that your ENTRYPOINT will be started as a subcommand of /bin/sh -c,\n# which does not pass signals.\n# This means that the executable will not be the container’s PID 1 - and will not receive Unix signals -\n# so your executable will not receive a SIGTERM from docker stop <container>.\n#\n# Only the last ENTRYPOINT instruction in the Dockerfile will have an effect.\n#\n# On derived executable images (services) always use:\n#   ENTRYPOINT [\"executable\", \"param1\", \"param2\"] (the preferred exec form)\n# in a combination with ENTRYPOINT you can use the CMD to pass default exec command's arguments to the ENTRYPOINT.\n#\n# Command line arguments to docker run <image> will be appended after all elements in an exec form ENTRYPOINT,\n# and will override all elements specified using CMD.\n# This allows arguments to be passed to the entry point, i.e.,\n# docker run <image> -d will pass the -d argument to the entry point.\n# You can override the ENTRYPOINT instruction using the docker run --entrypoint flag.\n#\n# To use ENTRYPOINT and CMD toguether your have to use the exec mode of ENTRYPOINT [\"command\", \"argument\"].\n# I mean not in shel mode [\"sh\", \"-c\"]\n# When creating a Dockerfile, make sure you use exec form of ENTRYPOINT or RUN commands.\n# Otherwise the application will be started as a subcommand of /bin/sh -c, which does not pass signals.\n# The container’s PID1 will be the shell,\n# your application will not receive any signals from the `docker kill` command.\n\n"
}