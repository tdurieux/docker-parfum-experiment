{
  "startTime": 1674252608629,
  "endTime": 1674252609434,
  "originalSmells": [
    {
      "rule": "sha256sumEchoOneSpaces",
      "position": {
        "lineStart": 68,
        "lineEnd": 68,
        "columnStart": 1,
        "columnEnd": 84
      }
    },
    {
      "rule": "sha256sumEchoOneSpaces",
      "position": {
        "lineStart": 103,
        "lineEnd": 103,
        "columnStart": 1,
        "columnEnd": 76
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 70,
        "lineEnd": 70,
        "columnStart": 1,
        "columnEnd": 94
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 104,
        "lineEnd": 104,
        "columnStart": 1,
        "columnEnd": 86
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 224,
        "lineEnd": 224,
        "columnStart": 1,
        "columnEnd": 96
      }
    }
  ],
  "repairedSmells": [
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 104,
        "lineEnd": 104,
        "columnStart": 1,
        "columnEnd": 86
      }
    }
  ],
  "repairedDockerfile": "# The official Canonical Ubuntu Bionic image is ideal from a security perspective,\n# especially for the enterprises that we, the RabbitMQ team, have to deal with\nFROM ubuntu:18.04\n\nRUN set -eux; \\\n\tapt-get update; \\\n\tapt-get install -y --no-install-recommends \\\n# grab gosu for easy step-down from root\n\t\tgosu \\\n\t; \\\n\trm -rf /var/lib/apt/lists/*; \\\n# verify that the \"gosu\" binary works\n\tgosu nobody true\n\n# Default to a PGP keyserver that pgp-happy-eyeballs recognizes, but allow for substitutions locally\nARG PGP_KEYSERVER=ha.pool.sks-keyservers.net\n# If you are building this image locally and are getting `gpg: keyserver receive failed: No data` errors,\n# run the build with a different PGP_KEYSERVER, e.g. docker build --tag rabbitmq:3.7 --build-arg PGP_KEYSERVER=pgpkeys.eu 3.7/ubuntu\n# For context, see https://github.com/docker-library/official-images/issues/4252\n\n# Using the latest OpenSSL LTS release, with support until September 2023 - https://www.openssl.org/source/\nENV OPENSSL_VERSION 1.1.1c\nENV OPENSSL_SOURCE_SHA256=\"f6fb3079ad15076154eda9413fed42877d668e7069d9b87396d0804fdb3f4c90\"\n# https://www.openssl.org/community/omc.html\nENV OPENSSL_PGP_KEY_IDS=\"0x8657ABB260F056B1E5190839D9C4D26D0E604491 0x5B2545DAB21995F4088CEFAA36CEE4DEB00CFE33 0xED230BEC4D4F2518B9D7DF41F0DB4D21C1D35231 0xC1F33DD8CE1D4CC613AF14DA9195C48241FBF7DD 0x7953AC1FBC3DC8B3B292393ED5E9E43F7DF9EE8C 0xE5E52560DD91C556DDBDA5D02064C53641C25E5D\"\n\n# Use the latest stable Erlang/OTP release (https://github.com/erlang/otp/tags)\nENV OTP_VERSION 22.0.4\n# TODO add PGP checking when the feature will be added to Erlang/OTP's build system\n# http://erlang.org/pipermail/erlang-questions/2019-January/097067.html\nENV OTP_SOURCE_SHA256=\"71b2fe49ed5ac386ebc189dd2e5f4b95b11b4427936be0e3c5695a903ea9ffcd\"\n\n# Install dependencies required to build Erlang/OTP from source\n# http://erlang.org/doc/installation_guide/INSTALL.html\n# autoconf: Required to configure Erlang/OTP before compiling\n# dpkg-dev: Required to set up host & build type when compiling Erlang/OTP\n# gnupg: Required to verify OpenSSL artefacts\n# libncurses5-dev: Required for Erlang/OTP new shell & observer_cli - https://github.com/zhongwencool/observer_cli\nRUN set -eux; \\\n\n\tsavedAptMark=\"$(apt-mark showmanual)\"; \\\n\tapt-get update; \\\n\tapt-get install --yes --no-install-recommends \\\n\t\tautoconf \\\n\t\tca-certificates \\\n\t\tdpkg-dev \\\n\t\tgcc \\\n\t\tgnupg \\\n\t\tlibncurses5-dev \\\n\t\tmake \\\n\t\twget \\\n\t; \\\n\trm -rf /var/lib/apt/lists/*; \\\n\n\tOPENSSL_SOURCE_URL=\"https://www.openssl.org/source/openssl-$OPENSSL_VERSION.tar.gz\"; \\\n\tOPENSSL_PATH=\"/usr/local/src/openssl-$OPENSSL_VERSION\"; \\\n\tOPENSSL_CONFIG_DIR=/usr/local/etc/ssl; \\\n\n# Required by the crypto & ssl Erlang/OTP applications\n\twget --progress dot:giga --output-document \"$OPENSSL_PATH.tar.gz.asc\" \"$OPENSSL_SOURCE_URL.asc\"; \\\n\twget --progress dot:giga --output-document \"$OPENSSL_PATH.tar.gz\" \"$OPENSSL_SOURCE_URL\"; \\\n\texport GNUPGHOME=\"$(mktemp -d)\"; \\\n\tfor key in $OPENSSL_PGP_KEY_IDS; do \\\n\t\tgpg --batch --keyserver \"$PGP_KEYSERVER\" --recv-keys \"$key\"; \\\n\tdone; \\\n\tgpg --batch --verify \"$OPENSSL_PATH.tar.gz.asc\" \"$OPENSSL_PATH.tar.gz\"; \\\n\tgpgconf --kill all; \\\n\trm -rf \"$GNUPGHOME\"; \\\n\techo \"$OPENSSL_SOURCE_SHA256  *$OPENSSL_PATH.tar.gz\" | sha256sum --check --strict -; \\\n\tmkdir -p \"$OPENSSL_PATH\"; \\\n\ttar --extract --file \"$OPENSSL_PATH.tar.gz\" --directory \"$OPENSSL_PATH\" --strip-components 1; rm \"$OPENSSL_PATH.tar.gz\" \\\n\n# Configure OpenSSL for compilation\n\tcd \"$OPENSSL_PATH\"; \\\n# without specifying \"--libdir\", Erlang will fail during \"crypto:supports()\" looking for a \"pthread_atfork\" function that doesn't exist (but only on arm32v7/armhf??)\n\tdebMultiarch=\"$(dpkg-architecture --query DEB_HOST_MULTIARCH)\"; \\\n# OpenSSL's \"config\" script uses a lot of \"uname\"-based target detection...\n\tMACHINE=\"$(dpkg-architecture --query DEB_BUILD_GNU_CPU)\" \\\n\tRELEASE=\"4.x.y-z\" \\\n\tSYSTEM='Linux' \\\n\tBUILD='???' \\\n\t./config --openssldir=\"$OPENSSL_CONFIG_DIR\" --libdir=\"lib/$debMultiarch\"; \\\n# Compile, install OpenSSL, verify that the command-line works & development headers are present\n\tmake -j \"$(getconf _NPROCESSORS_ONLN)\"; \\\n\tmake install_sw install_ssldirs; \\\n\tcd ..; \\\n\trm -rf \"$OPENSSL_PATH\"*; \\\n# this is included in \"/etc/ld.so.conf.d/libc.conf\", but on arm64, it gets overshadowed by \"/etc/ld.so.conf.d/aarch64-linux-gnu.conf\" (vs \"/etc/ld.so.conf.d/x86_64-linux-gnu.conf\") so the precedence isn't correct -- we install our own file to overcome that and ensure any .so files in /usr/local/lib (especially OpenSSL's libssl.so) are preferred appropriately regardless of the target architecture\n# see https://bugs.debian.org/685706\n\techo '/usr/local/lib' > /etc/ld.so.conf.d/000-openssl-libc.conf; \\\n\tldconfig; \\\n# use Debian's CA certificates\n\trmdir \"$OPENSSL_CONFIG_DIR/certs\" \"$OPENSSL_CONFIG_DIR/private\"; \\\n\tln -sf /etc/ssl/certs /etc/ssl/private \"$OPENSSL_CONFIG_DIR\"; \\\n# smoke test\n\topenssl version; \\\n\n\tOTP_SOURCE_URL=\"https://github.com/erlang/otp/archive/OTP-$OTP_VERSION.tar.gz\"; \\\n\tOTP_PATH=\"/usr/local/src/otp-$OTP_VERSION\"; \\\n\n# Download, verify & extract OTP_SOURCE\n\tmkdir -p \"$OTP_PATH\"; \\\n\twget --progress dot:giga --output-document \"$OTP_PATH.tar.gz\" \"$OTP_SOURCE_URL\"; \\\n\techo \"$OTP_SOURCE_SHA256  *$OTP_PATH.tar.gz\" | sha256sum --check --strict -; \\\n\ttar --extract --file \"$OTP_PATH.tar.gz\" --directory \"$OTP_PATH\" --strip-components 1; \\\n\n# Configure Erlang/OTP for compilation, disable unused features & applications\n# http://erlang.org/doc/applications.html\n# ERL_TOP is required for Erlang/OTP makefiles to find the absolute path for the installation\n\tcd \"$OTP_PATH\"; \\\n\texport ERL_TOP=\"$OTP_PATH\"; \\\n\t./otp_build autoconf; \\\n\tCFLAGS=\"$(dpkg-buildflags --get CFLAGS)\"; export CFLAGS; \\\n\thostArch=\"$(dpkg-architecture --query DEB_HOST_GNU_TYPE)\"; \\\n\tbuildArch=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\"; \\\n\tdpkgArch=\"$(dpkg --print-architecture)\"; dpkgArch=\"${dpkgArch##*-}\"; \\\n\t./configure \\\n\t\t--host=\"$hostArch\" \\\n\t\t--build=\"$buildArch\" \\\n\t\t--disable-dynamic-ssl-lib \\\n\t\t--disable-hipe \\\n\t\t--disable-sctp \\\n\t\t--disable-silent-rules \\\n\t\t--enable-clock-gettime \\\n\t\t--enable-hybrid-heap \\\n\t\t--enable-kernel-poll \\\n\t\t--enable-shared-zlib \\\n\t\t--enable-smp-support \\\n\t\t--enable-threads \\\n\t\t--with-microstate-accounting=extra \\\n\t\t--without-common_test \\\n\t\t--without-debugger \\\n\t\t--without-dialyzer \\\n\t\t--without-diameter \\\n\t\t--without-edoc \\\n\t\t--without-erl_docgen \\\n\t\t--without-erl_interface \\\n\t\t--without-et \\\n\t\t--without-eunit \\\n\t\t--without-ftp \\\n\t\t--without-hipe \\\n\t\t--without-jinterface \\\n\t\t--without-megaco \\\n\t\t--without-observer \\\n\t\t--without-odbc \\\n\t\t--without-reltool \\\n\t\t--without-ssh \\\n\t\t--without-tftp \\\n\t\t--without-wx \\\n\t; \\\n# Compile & install Erlang/OTP\n\tmake -j \"$(getconf _NPROCESSORS_ONLN)\" GEN_OPT_FLGS=\"-O2 -fno-strict-aliasing\"; \\\n\tmake install; \\\n\tcd ..; \\\n\trm -rf \\\n\t\t\"$OTP_PATH\"* \\\n\t\t/usr/local/lib/erlang/lib/*/examples \\\n\t\t/usr/local/lib/erlang/lib/*/src \\\n\t; \\\n\n# reset apt-mark's \"manual\" list so that \"purge --auto-remove\" will remove all build dependencies\n\tapt-mark auto '.*' > /dev/null; \\\n\t[ -z \"$savedAptMark\" ] || apt-mark manual $savedAptMark; \\\n\tfind /usr/local -type f -executable -exec ldd '{}' ';' \\\n\t\t| awk '/=>/ { print $(NF-1) }' \\\n\t\t| sort -u \\\n\t\t| xargs -r dpkg-query --search \\\n\t\t| cut -d: -f1 \\\n\t\t| sort -u \\\n\t\t| xargs -r apt-mark manual \\\n\t; \\\n\tapt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false; \\\n\n# Check that OpenSSL still works after purging build dependencies\n\topenssl version; \\\n# Check that Erlang/OTP crypto & ssl were compiled against OpenSSL correctly\n\terl -noshell -eval 'io:format(\"~p~n~n~p~n~n\", [crypto:supports(), ssl:versions()]), init:stop().'\n\nENV RABBITMQ_DATA_DIR=/var/lib/rabbitmq\n# Create rabbitmq system user & group, fix permissions & allow root user to connect to the RabbitMQ Erlang VM\nRUN set -eux; \\\n\tgroupadd --gid 999 --system rabbitmq; \\\n\tuseradd --uid 999 --system --home-dir \"$RABBITMQ_DATA_DIR\" --gid rabbitmq rabbitmq; \\\n\tmkdir -p \"$RABBITMQ_DATA_DIR\" /etc/rabbitmq /tmp/rabbitmq-ssl /var/log/rabbitmq; \\\n\tchown -fR rabbitmq:rabbitmq \"$RABBITMQ_DATA_DIR\" /etc/rabbitmq /tmp/rabbitmq-ssl /var/log/rabbitmq; \\\n\tchmod 777 \"$RABBITMQ_DATA_DIR\" /etc/rabbitmq /tmp/rabbitmq-ssl /var/log/rabbitmq; \\\n\tln -sf \"$RABBITMQ_DATA_DIR/.erlang.cookie\" /root/.erlang.cookie\n\n# Use the latest stable RabbitMQ release (https://www.rabbitmq.com/download.html)\nENV RABBITMQ_VERSION 3.7.16-rc.3\n# https://www.rabbitmq.com/signatures.html#importing-gpg\nENV RABBITMQ_PGP_KEY_ID=\"0x0A9AF2115F4687BD29803A206B73A36E6026DFCA\"\nENV RABBITMQ_HOME=/opt/rabbitmq\n\n# Add RabbitMQ to PATH, send all logs to TTY\nENV PATH=$RABBITMQ_HOME/sbin:$PATH \\\n\tRABBITMQ_LOGS=- RABBITMQ_SASL_LOGS=-\n\n# Install RabbitMQ\nRUN set -eux; \\\n\n\tsavedAptMark=\"$(apt-mark showmanual)\"; \\\n\tapt-get update; \\\n\tapt-get install --yes --no-install-recommends \\\n\t\tca-certificates \\\n\t\tgnupg \\\n\t\twget \\\n\t\txz-utils \\\n\t; \\\n\trm -rf /var/lib/apt/lists/*; \\\n\n\tRABBITMQ_SOURCE_URL=\"https://github.com/rabbitmq/rabbitmq-server/releases/download/v$RABBITMQ_VERSION/rabbitmq-server-generic-unix-$RABBITMQ_VERSION.tar.xz\"; \\\n\tRABBITMQ_PATH=\"/usr/local/src/rabbitmq-$RABBITMQ_VERSION\"; \\\n\n\twget --progress dot:giga --output-document \"$RABBITMQ_PATH.tar.xz.asc\" \"$RABBITMQ_SOURCE_URL.asc\"; \\\n\twget --progress dot:giga --output-document \"$RABBITMQ_PATH.tar.xz\" \"$RABBITMQ_SOURCE_URL\"; \\\n\n\texport GNUPGHOME=\"$(mktemp -d)\"; \\\n\tgpg --batch --keyserver \"$PGP_KEYSERVER\" --recv-keys \"$RABBITMQ_PGP_KEY_ID\"; \\\n\tgpg --batch --verify \"$RABBITMQ_PATH.tar.xz.asc\" \"$RABBITMQ_PATH.tar.xz\"; \\\n\tgpgconf --kill all; \\\n\trm -rf \"$GNUPGHOME\"; \\\n\n\tmkdir -p \"$RABBITMQ_HOME\"; \\\n\ttar --extract --file \"$RABBITMQ_PATH.tar.xz\" --directory \"$RABBITMQ_HOME\" --strip-components 1; rm \"$RABBITMQ_PATH.tar.xz\" \\\n\trm -rf \"$RABBITMQ_PATH\"*; \\\n# Do not default SYS_PREFIX to RABBITMQ_HOME, leave it empty\n\tgrep -qE '^SYS_PREFIX=\\$\\{RABBITMQ_HOME\\}$' \"$RABBITMQ_HOME/sbin/rabbitmq-defaults\"; \\\n\tsed -i 's/^SYS_PREFIX=.*$/SYS_PREFIX=/' \"$RABBITMQ_HOME/sbin/rabbitmq-defaults\"; \\\n\tgrep -qE '^SYS_PREFIX=$' \"$RABBITMQ_HOME/sbin/rabbitmq-defaults\"; \\\n\tchown -R rabbitmq:rabbitmq \"$RABBITMQ_HOME\"; \\\n\n\tapt-mark auto '.*' > /dev/null; \\\n\tapt-mark manual $savedAptMark; \\\n\tapt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false; \\\n\n# verify assumption of no stale cookies\n\t[ ! -e \"$RABBITMQ_DATA_DIR/.erlang.cookie\" ]; \\\n# Ensure RabbitMQ was installed correctly by running a few commands that do not depend on a running server, as the rabbitmq user\n# If they all succeed, it's safe to assume that things have been set up correctly\n\tgosu rabbitmq rabbitmqctl help; \\\n\tgosu rabbitmq rabbitmqctl list_ciphers; \\\n\tgosu rabbitmq rabbitmq-plugins list; \\\n# no stale cookies\n\trm \"$RABBITMQ_DATA_DIR/.erlang.cookie\"\n\n# Added for backwards compatibility - users can simply COPY custom plugins to /plugins\nRUN ln -sf /opt/rabbitmq/plugins /plugins\n\n# set home so that any `--user` knows where to put the erlang cookie\nENV HOME $RABBITMQ_DATA_DIR\n# Hint that the data (a.k.a. home dir) dir should be separate volume\nVOLUME $RABBITMQ_DATA_DIR\n\n# warning: the VM is running with native name encoding of latin1 which may cause Elixir to malfunction as it expects utf8. Please ensure your locale is set to UTF-8 (which can be verified by running \"locale\" in your shell)\n# Setting all environment variables that control language preferences, behaviour differs - https://www.gnu.org/software/gettext/manual/html_node/The-LANGUAGE-variable.html#The-LANGUAGE-variable\n# https://docs.docker.com/samples/library/ubuntu/#locales\nENV LANG=C.UTF-8 LANGUAGE=C.UTF-8 LC_ALL=C.UTF-8\n\nCOPY docker-entrypoint.sh /usr/local/bin/\nENTRYPOINT [\"docker-entrypoint.sh\"]\n\nEXPOSE 4369 5671 5672 25672\nCMD [\"rabbitmq-server\"]\n"
}