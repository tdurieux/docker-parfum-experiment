{
  "startTime": 1674253054598,
  "endTime": 1674253054852,
  "originalSmells": [
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 69,
        "lineEnd": 69,
        "columnStart": 7,
        "columnEnd": 87
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 48,
        "lineEnd": 48,
        "columnStart": 7,
        "columnEnd": 66
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 67,
        "lineEnd": 67,
        "columnStart": 7,
        "columnEnd": 40
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 5,
        "lineEnd": 30,
        "columnStart": 22,
        "columnEnd": 7
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 5,
        "lineEnd": 30,
        "columnStart": 22,
        "columnEnd": 7
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM ubuntu:18.04\n\nARG MENDER_ARTIFACT_VERSION=3.0.0\nARG GOLANG_VERSION=1.11.2\n\nRUN apt-get update && apt-get install --no-install-recommends -y \\\n    kpartx \\\n    bison \\\n    flex \\\n    mtools \\\n    parted \\\n    mtd-utils \\\n    e2fsprogs \\\n    u-boot-tools \\\n    pigz \\\n    device-tree-compiler \\\n    autoconf \\\n    autotools-dev \\\n    libtool \\\n    pkg-config \\\n    python \\\n    jq \\\n\n    sudo \\\n    dosfstools \\\n\n    bc \\\n\n    wget \\\n\n    git && rm -rf /var/lib/apt/lists/*;\n\n# Disable sanity checks made by mtools. These checks reject copy/paste operations on converted disk images.\nRUN echo \"mtools_skip_check=1\" >> $HOME/.mtoolsrc\n\n# To provide support for Raspberry Pi Zero W a toolchain tuned for ARMv6 architecture must be used.\n# https://tracker.mender.io/browse/MEN-2399\n# Assumes $(pwd) is /\nRUN wget -nc -q https://toolchains.bootlin.com/downloads/releases/toolchains/armv6-eabihf/tarballs/armv6-eabihf--glibc--stable-2018.11-1.tar.bz2 \\\n    && tar -xjf armv6-eabihf--glibc--stable-2018.11-1.tar.bz2 \\\n    && rm armv6-eabihf--glibc--stable-2018.11-1.tar.bz2 \\\n    && echo 'export PATH=$PATH:/armv6-eabihf--glibc--stable-2018.11-1/bin' >> /root/.bashrc\n\nRUN wget -q -O /usr/bin/mender-artifact https://d1b0l86ne08fsf.cloudfront.net/mender-artifact/$MENDER_ARTIFACT_VERSION/mender-artifact \\\n    && chmod +x /usr/bin/mender-artifact\n\n# Golang environment, for cross-compiling the Mender client\nRUN wget https://dl.google.com/go/go$GOLANG_VERSION.linux-amd64.tar.gz \\\n    && tar -C /usr/local -xzf go$GOLANG_VERSION.linux-amd64.tar.gz \\\n    && echo 'export PATH=$PATH:/usr/local/go/bin' >> /root/.bashrc && rm go$GOLANG_VERSION.linux-amd64.tar.gz\n\nENV PATH \"$PATH:/usr/local/go/bin:/armv6-eabihf--glibc--stable-2018.11-1/bin\"\nENV GOPATH \"/root/go\"\n\n# Download Mender client\nARG mender_client_version\nRUN test -n \"$mender_client_version\" || (echo \"Argument 'mender_client_version' is mandatory.\" && exit 1)\nENV MENDER_CLIENT_VERSION=$mender_client_version\n\nRUN go get -d github.com/mendersoftware/mender\nWORKDIR $GOPATH/src/github.com/mendersoftware/mender\nRUN git checkout $MENDER_CLIENT_VERSION\n\nENV CC \"arm-buildroot-linux-gnueabihf-gcc\"\n\n# Build liblzma from source\nRUN wget -q https://tukaani.org/xz/xz-5.2.4.tar.gz \\\n    && tar -C /root -xzf xz-5.2.4.tar.gz \\\n    && cd /root/xz-5.2.4 \\\n    && ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --host=arm-buildroot-linux-gnueabihf --prefix=/root/xz-5.2.4/install \\\n    && make \\\n    && make install && rm xz-5.2.4.tar.gz\n\nENV LIBLZMA_INSTALL_PATH \"/root/xz-5.2.4/install\"\n\n# NOTE: we are assuming generic ARM board here, needs to be extended later\nRUN env CGO_ENABLED=1 \\\n    CGO_CFLAGS=\"-I${LIBLZMA_INSTALL_PATH}/include\" \\\n    CGO_LDFLAGS=\"-L${LIBLZMA_INSTALL_PATH}/lib\" \\\n    CC=$CC \\\n    GOOS=linux \\\n    GOARM=6 GOARCH=arm make build\n\n# allow us to keep original PATH variables when sudoing\nRUN echo \"Defaults        secure_path=\\\"/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/snap/bin:$PATH\\\"\" > /etc/sudoers.d/secure_path_override\nRUN chmod 0440 /etc/sudoers.d/secure_path_override\n\nWORKDIR /\n\nCOPY docker-entrypoint.sh /usr/local/bin/\nENTRYPOINT [\"/usr/local/bin/docker-entrypoint.sh\"]\n"
}