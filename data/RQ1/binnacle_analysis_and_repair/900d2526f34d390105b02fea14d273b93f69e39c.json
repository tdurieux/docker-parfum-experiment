{
  "startTime": 1674235461545,
  "endTime": 1674235462187,
  "originalSmells": [
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 144,
        "lineEnd": 172,
        "columnStart": 1,
        "columnEnd": 55
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "#!/usr/bin/docker build --force-rm --rm -f\n\n#? USAGE\n#?      This Dockerfile uses \"buildargs\" variables to build the Docker image.\n#?      For default settings, please use:  awk '/^ARG/{print $2}' Dockerfile\n#?\n#?          OSAFT_VERSION\n#?              Version of this build (should be used as image tag also).\n#?\n#?          OSAFT_VM_FROM\n#?              Base image to be used for this build. Tested images are:\n#?                  (2018) alpine:3.8\n#?\n#?          OSAFT_VM_SRC_WOLFSSL\n#?              URL to fetch wolfssl.tgz archive.\n#?\n#?          OSAFT_VM_SHA_WOLFSSL\n#?              SHA256 checksum for the wolfssl archive.\n#?\n#?          OSAFT_VM_TAR_WOLFSSL\n#?              Name of archive file (during build).\n#?\n#?          OSAFT_VM_DYN_WOLFSSL\n#?              Build (link) mode of wolfssl executable: --enable-static or --enable-shared\n#?\n#?          OSAFT_VM_HOSTNAME\n#?              Hostname to be used for running container (/etc/hostname)\n#?\n#? ENVIRONMENT VARIABLES\n#?      The build image sets environment variables. They are mainly used for\n#?      documentation or by other programs to check for the right build.\n#?\n#?      Following environment variables are set inside the docker image:\n#?\n#?          osaft_vm_build\n#?              Build version of this image.\n#?          WOLFSSL_DIR\n#?              Directory where wolfSSL is installed.\n#?          WOLFSSL_VERSION\n#?              Version of installed OpenSSL\n#?          TERM\n#?              Prefered X-Terminal program.\n#?          LD_RUN_PATH\n#?              Additional paths for runtime loader, used while linking with\n#?              \"ld -rpath=...\"\n#?              Linking of wolfssl, libssl.so and SSLeay.so will use  -rpath\n#?              in LDFLAGS to ensure that the special library will be used.\n#?              Default:${WOLFSSL_DIR}/lib\n#?          PATH\n#?              PATH for shell, set to:\n#?                  $OSAFT_DIR:$OSAFT_DIR/contrib:$WOLFSSL_DIR/bin:$PATH\n#?          WORK_DIR\n#?              Directory where to build the packages (used for Dockerfile's\n#?              WORKDIR  dierective.\n#?\n#? EXAMPLES\n#?      Simple build with defaults:  alpine:3.8, wolfssl\n#?          docker build --force-rm --rm \\\n#?                  -f Dockerfile.wolfssl -t o-saft/wolfssl .\n#?\n\nARG     OSAFT_VM_FROM=alpine:3.8\n\nFROM    $OSAFT_VM_FROM\nMAINTAINER Achim <achim@owasp.org>\n\n# Parameters passed to build\n\t# OSAFT_VM_FROM must be defined again, otherwise its value is not available\nARG     OSAFT_VM_FROM\nARG     OSAFT_VM_SRC_WOLFSSL=\"https://github.com/wolfSSL/wolfssl/archive/v3.15.3-stable.tar.gz\"\n# -----BEGIN PGP SIGNATURE-----\nARG     OSAFT_VM_SHA_WOLFSSL=\"\\\niQEcBAABCgAGBQJbLXUHAAoJEOvIDkFcopZ3NYMIAJMSsKQQxTHdiO4tjhofhgu2\\\nuH8QmY4XjyDqVEzID1GTmjS092bh/wNfQLRW5nMNMdS965XzA8gmSqo1bWIfFBG+\\\neKZLc4xu+oIEDKfF7r5gkmPQNRVsHmOQK6BeOG0BnXBSdE9E0CIIlk81pZC7HSo7\\\nU6/I1hVlXyL9Y8ctfL2doDzil1jAvc0tQo/HNU4UikHtcbH2tsYSzjA1wXnjqeXQ\\\nWYy0TcJ0MbJrnpqX0li6JWc/6FSqM1hgCzrf/7kScdsu2zxMKxuxUvCCRJ1meYKt\\\nVf2K6SlLFg5iqxqe+JRTvIiq2EDalsqClW9I1rbkphvYspZ9WI0Jf4YJUp4xPVk=\\\n=AlNB\"\n# -----END PGP SIGNATURE-----\nARG     OSAFT_VM_TAR_WOLFSSL=\"wolfssl.tgz\"\nARG     OSAFT_VM_DYN_WOLFSSL=\"--enable-static\"\n#                             --enable-static  not yet (2017) working 'cause of\nARG\tOSAFT_VM_HOSTNAME\n\nARG     OSAFT_VERSION=\"18.10.12\"\n\nLABEL \\\n\tVERSION=\"$OSAFT_VERSION\"\t\\\n\t\\\n\tDESCRIPTION=\"Build docker image with wolfssl\"\t\\\n\tSYNOPSIS=\"docker build --force-rm --rm -f ./Dockerfile.wolfssl -t o-saft/wolfssl:$OSAFT_VERSION -t o-saft/wolfssl .\" \\\n\tSOURCE0=\"https://github.com/OWASP/O-Saft/raw/master/contrib/Dockerfile.wolfssl\" \\\n\tSOURCE2=\"$OSAFT_VM_SRC_WOLFSSL\" \\\n\tSID=\"@(#) Dockerfile.wolfssl 1.1 18/10/15 23:38:12\" \\\n\tAUTHOR=\"Achim Hoffmann\"\t\n\nENV     osaft_vm_build  \"Dockerfile $OSAFT_VERSION; FROM $OSAFT_VM_FROM\"\nENV     WOLFSSL_DIR     /wolfssl\nENV     WOLFSSL_VERSION  v3.15.3\nENV     TERM            xterm\nENV     LD_RUN_PATH     ${WOLFSSL_DIR}/lib\nENV     PATH ${WOLFSSL_DIR}/bin:$PATH\nENV     BUILD_DIR       /tmp_src\nENV     WORK_DIR\t/\n\nWORKDIR\t$WORK_DIR\n\n# Install required packages, development tools and libs\n#RUN apk update && \\   # no update neded and not wanted\nRUN apk add --no-cache wget ncurses linux-headers  \\\n\t\t gcc make musl-dev zlib-dev m4 perl autoconf automake libtool file && \\\n\t#\n\t# Pull, build and install wolfssl\n\tapk add --no-cache lksctp-tools-dev\t&& \\\n\tcd    $WORK_DIR\t\t\t\t&& \\\n\tmkdir -p $BUILD_DIR $WOLFSSL_DIR\t&& \\\n\twget --no-check-certificate $OSAFT_VM_SRC_WOLFSSL -O $OSAFT_VM_TAR_WOLFSSL\t&& \\\n\t### # check sha256 if there is one\n\t### [ -n \"$OSAFT_VM_SHA_WOLFSSL\" ]\t\t&& \n\t### \techo \"$OSAFT_VM_SHA_WOLFSSL  $OSAFT_VM_TAR_WOLFSSL\" | sha256sum -c ; \n\t### \n\ttar   -xzf $OSAFT_VM_TAR_WOLFSSL -C $BUILD_DIR --strip-components=1\t&& \\\n\tcd    $BUILD_DIR\t\t\t&& \\\n\t#\n\tLDFLAGS=\"-Wl,-rpath=$LD_RUN_PATH\"   && export LDFLAGS\t&& \\\n\t\t# see description for LD_RUN_PATH above\n\n### --enable-fips fails with:\n###    make[1]: *** No rule to make target 'ctaocrypt/src/fips.c', needed by 'ctaocrypt/src/src_libwolfssl_la-fips.lo'.  Stop.\n\n### --enable-qsh  requires special includes\n\n### --enable-opensslcoexist fails with\n### src/ssl.c: In function 'wolfSSL_BIO_new_file':\n### src/ssl.c:30496:9: warning: implicit declaration of function 'wolfSSL_BIO_set_fp' [-Wimplicit-function-declaration]\n###      if (wolfSSL_BIO_set_fp(bio, fp, BIO_CLOSE) != WOLFSSL_SUCCESS) {\n###          ^~~~~~~~~~~~~~~~~~\n\n### missing in v3.15.3: --enable-tls13-draft28 --enable-aescbc --enable-sha2\n\n\t./autogen.sh && \\\n\t# config with all options, even if they are default\n\t# using --disable-option-checking in the hope for back- and forward-compatibility\n\t./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --prefix=$WOLFSSL_DIR $OSAFT_VM_DYN_WOLFSSL \\\n\t\t--disable-option-checking \\\n\t\t--enable-rng --with-libz \\\n\t\t--enable-sslv3 --enable-dtls \\\n\t\t--enable-tlsv10 --enable-tlsv12 --enable-tls13 --enable-oldtls \\\n\t\t--enable-tls13-draft18 --enable-tls13-draft22 --enable-tls13-draft23 \\\n\t\t--enable-tls13-draft26 --enable-tls13-draft28 \\\n\t\t--enable-aescbc --enable-aesccm --enable-aesgcm --enable-aesctr \\\n\t\t--enable-aescfb --enable-aesni \\\n\t\t--enable-md2 --enable-md4 --enable-md5 \\\n\t\t--enable-sha2 --enable-sha3 --enable-sha224 --enable-sha512 \\\n\t\t--enable-cmac --enable-dsa --enable-des3 --enable-dh \\\n\t\t--enable-ecccustcurves --enable-ecc --enable-eccshamir \\\n\t\t--enable-eccencrypt --enable-ed25519 --enable-curve25519 \\\n\t\t--enable-supportedcurves --enable-fpecc --enable-compkey \\\n\t\t--enable-hkdf --enable-arc4 --enable-psk --enable-sep \\\n\t\t--enable-blake2 --enable-ripemd --enable-camellia --enable-x963kdf \\\n\t\t--enable-rabbit --enable-hc128 --enable-anon --enable-nullcipher \\\n\t\t--enable-idea --enable-chacha --enable-poly1305 \\\n\t\t--enable-alpn --enable-sni --enable-crl --enable-truncatedhmac \\\n\t\t--enable-mcast --enable-sctp --enable-srp \\\n\t\t--enable-rsa --enable-rsapss --enable-xts \\\n\t\t--enable-coding --enable-base16 --enable-base64encode \\\n\t\t--enable-oldnames --enable-errorstrings --enable-enckeys \\\n\t\t--enable-ocsp --enable-ocspstapling --enable-ocspstapling2 \\\n\t\t--enable-tlsx --enable-session-ticket --enable-extended-master \\\n\t\t--enable-secure-renegotiation \\\n\t\t--enable-opensslall --enable-opensslextra \\\n\t\t--enable-lighty --enable-webclient --enable-earlydata \\\n\t\t&& echo \"# configure done.\" || cat ./config.log && \\\n\tmake && make -i test && make install && \\\n\t\t\t# make test most likely fails, hence -i\n\t# manually install tools (without error checks)\n\t# NOTE: installs the binaries, not the wrapper scripts\n\tcp examples/echoclient/.libs/echoclient $WOLFSSL_DIR/bin/; \\\n\tcp examples/echoserver/.libs/echoserver $WOLFSSL_DIR/bin/; \\\n\tcp examples/client/.libs/client         $WOLFSSL_DIR/bin/; \\\n\tcp examples/server/.libs/server         $WOLFSSL_DIR/bin/; \\\n\tcp examples/sctp/.libs/sctp-client-dtls $WOLFSSL_DIR/bin/; \\\n\tcp examples/sctp/.libs/sctp-server-dtls $WOLFSSL_DIR/bin/; \\\n\tcp examples/sctp/sctp-client            $WOLFSSL_DIR/bin/; \\\n        mv certs/ $WOLFSSL_DIR/bin/; \\\n        ln -s $WOLFSSL_DIR/bin/certs /certs ; \\\n\t# simple test\n\techo -n \"# number of ciphers $WOLFSSL_DIR/bin/client: \" && \\\n\t$WOLFSSL_DIR/bin/client -e|tr ':' '\\012'|wc -l && \\\n\t$WOLFSSL_DIR/bin/client -e\t&& \\\n\t# cleanup\n\tapk  del --purge lksctp-tools-dev && \\\n\tcd    $WORK_DIR\t\t\t\t&& \\\n\techo rm   -rf $BUILD_DIR $OSAFT_VM_TAR_WOLFSSL\t&& \\\n\t# Cleanup\n\tapk del --purge gcc make m4 autoconf automake musl-dev linux-headers\t\\\n\t\t\tperl-dev readline bash libltdl libtool file\t&& \\\n\t    # installed by libtool: readline bash libltdl libtool\n\t    # do not delete  krb5-dev zlib-dev  because we need \n\t    #  libkrb5.so.3, libk5crypto.so.3 and libz.so to run openssl\n\t[ -n \"$OSAFT_VM_HOSTNAME\" ]\t\t&& \\\n\t\techo \"$OSAFT_VM_HOSTNAME\" > /etc/hostname ;\n\nWORKDIR $WOLFSSL_DIR\n### USER    wolfssl\n### RUN     ??\n\nENTRYPOINT [\"/wolfssl/bin\"]\nEXPOSE  443/tcp\n\n# vim:set ft=dockerfile:\n"
}