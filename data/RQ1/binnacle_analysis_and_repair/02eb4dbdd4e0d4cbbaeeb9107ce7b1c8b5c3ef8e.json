{
  "startTime": 1674244029118,
  "endTime": 1674244029273,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 12,
        "lineEnd": 12,
        "columnStart": 4,
        "columnEnd": 55
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 29,
        "lineEnd": 29,
        "columnStart": 7,
        "columnEnd": 127
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 21,
        "lineEnd": 21,
        "columnStart": 4,
        "columnEnd": 50
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 14,
        "lineEnd": 14,
        "columnStart": 4,
        "columnEnd": 15
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "ARG VERSION=docker:stable-dind\nFROM ${VERSION}\n\nRUN apk add --no-cache git tmux py2-pip apache2-utils vim build-base gettext-dev curl bash-completion bash util-linux jq openssh openssl tree\n\nENV GOPATH /root/go\nENV PATH $PATH:$GOPATH\n\n\n# Compile and install httping\n# (used in orchestration workshop, and very useful anyway)\nRUN mkdir -p /opt && cd /opt && \\\n    curl -f https://vanheusden.com/httping/httping-2.5.tgz | \\\n    tar -zxf- && cd httping-2.5 && \\\n    ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" && make install LDFLAGS=-lintl && \\\n    rm -rf httping-2.5\n\n\nENV DOCKERAPP_VERSION=v0.6.0\nENV COMPOSE_VERSION=1.23.2\n# Install Compose and Machine\nRUN pip install --no-cache-dir docker-compose==${COMPOSE_VERSION}\n\n\nRUN curl -fsSL --output /tmp/docker-app-linux.tar.gz https://github.com/docker/app/releases/download/${DOCKERAPP_VERSION}/docker-app-linux.tar.gz \\\n    && tar xf \"/tmp/docker-app-linux.tar.gz\" -C /usr/bin/ && mv /usr/bin/docker-app-linux /usr/bin/docker-app && rm /tmp/docker-app-linux.tar.gz\n\n# Add bash completion and set bash as default shell\nRUN mkdir /etc/bash_completion.d \\\n    && curl -f https://raw.githubusercontent.com/docker/cli/master/contrib/completion/bash/docker -o /etc/bash_completion.d/docker \\\n    && sed -i \"s/ash/bash/\" /etc/passwd\n\n# Replace modprobe with a no-op to get rid of spurious warnings\n# (note: we can't just symlink to /bin/true because it might be busybox)\nRUN rm /sbin/modprobe && echo '#!/bin/true' >/sbin/modprobe && chmod +x /sbin/modprobe\n\n# Install a nice vimrc file and prompt (by soulshake)\nCOPY [\"docker-prompt\", \"sudo\", \"/usr/local/bin/\"]\nCOPY [\".vimrc\", \".profile\", \".inputrc\", \".gitconfig\", \"./root/\"]\nCOPY [\"motd\", \"/etc/motd\"]\nCOPY [\"daemon.json\", \"/etc/docker/\"]\n\n\n# Move to our home\nWORKDIR /root\n\n# Setup certs and ssh keys\nRUN mkdir -p /var/run/pwd/certs && mkdir -p /var/run/pwd/uploads \\\n    && ssh-keygen -N \"\" -t rsa -f  /etc/ssh/ssh_host_rsa_key >/dev/null \\\n    && mkdir ~/.ssh && ssh-keygen -N \"\" -t rsa -f ~/.ssh/id_rsa \\\n    && cat ~/.ssh/id_rsa.pub > ~/.ssh/authorized_keys\n\n# Remove IPv6 alias for localhost and start docker in the background ...\nCMD cat /etc/hosts >/etc/hosts.bak && \\\n    sed 's/^::1.*//' /etc/hosts.bak > /etc/hosts && \\\n    sed -i \"s/\\PWD_IP_ADDRESS/$PWD_IP_ADDRESS/\" /etc/docker/daemon.json && \\\n    sed -i \"s/\\DOCKER_TLSENABLE/$DOCKER_TLSENABLE/\" /etc/docker/daemon.json && \\\n    sed -i \"s/\\DOCKER_TLSCACERT/$DOCKER_TLSCACERT/\" /etc/docker/daemon.json && \\\n    sed -i \"s/\\DOCKER_TLSCERT/$DOCKER_TLSCERT/\" /etc/docker/daemon.json && \\\n    sed -i \"s/\\DOCKER_TLSKEY/$DOCKER_TLSKEY/\" /etc/docker/daemon.json && \\\n    mount -t securityfs none /sys/kernel/security && \\\n    echo \"root:root\" | chpasswd &> /dev/null && \\\n    /usr/sbin/sshd -o PermitRootLogin=yes -o PrintMotd=no 2>/dev/null && \\\n    dockerd &>/docker.log & \\\n    while true ; do script -q -c \"/bin/bash -l\" /dev/null ; done\n# ... and then put a shell in the foreground, restarting it if it exits\n"
}