{
  "startTime": 1674248433427,
  "endTime": 1674248433525,
  "originalSmells": [
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 8,
        "lineEnd": 8,
        "columnStart": 4,
        "columnEnd": 15
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# First stage: Frontend\nFROM library/node:11.7.0-alpine AS front_builder\n\n# Install dependencies\nWORKDIR /app\nCOPY web/package.json \\\n     web/package-lock.json \\\n     /app/\nRUN npm install && npm cache clean --force;\n\n# Build\nCOPY web /app\nRUN npm run build\n\n# Second stage: Backend\nFROM library/golang:1.11.4-alpine AS back_builder\n\nRUN  mkdir -p /go/src \\\n     && mkdir -p /go/bin \\\n     && mkdir -p /go/pkg\nRUN apk add --no-cache git\n\nENV GOPATH=/go\nENV GO111MODULE=on\nENV PATH=${GOPATH}/bin:$PATH  \n\n# Prepare module\nWORKDIR ${GOPATH}/src/github.com/pcorbel/techline\nCOPY vendor ${GOPATH}/src/github.com/pcorbel/techline/\n\n# Build\nCOPY cmd ${GOPATH}/src/github.com/pcorbel/techline/\nRUN CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build -a -installsuffix cgo -o techline-amd64 .\nRUN CGO_ENABLED=0 GOOS=linux GOARCH=arm go build -a -installsuffix cgo -o techline-arm32v6 .\nRUN CGO_ENABLED=0 GOOS=linux GOARCH=arm64 go build -a -installsuffix cgo -o techline-arm64v8 .\n\n# Final stage\nFROM __BASEIMAGE_ARCH__/alpine:3.8\n\nRUN apk add --no-cache ca-certificates\n\nWORKDIR /app\nCOPY --from=front_builder /app/dist /app/web/dist\nCOPY --from=back_builder /go/src/github.com/pcorbel/techline/techline-__BASEIMAGE_ARCH__ /app/techline\nCOPY configs /app/configs\n\nCMD ./techline\n"
}