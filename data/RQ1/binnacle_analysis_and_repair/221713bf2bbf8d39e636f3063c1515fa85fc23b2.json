{
  "startTime": 1674240272654,
  "endTime": 1674240272889,
  "originalSmells": [
    {
      "rule": "yarnCacheCleanAfterInstall",
      "position": {
        "lineStart": 41,
        "lineEnd": 41,
        "columnStart": 4,
        "columnEnd": 16
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# Initial Dockerfile from https://hexdocs.pm/distillery/guides/working_with_docker.html\n\n# The version of Alpine to use for the final image\n# This should match the version of Alpine that the `elixir:1.8.1-alpine` image uses\nARG ALPINE_VERSION=3.9\n\nFROM elixir:1.8.1-alpine AS builder\n\n# The following are build arguments used to change variable parts of the image.\n# The name of your application/release (required)\nARG APP_NAME\n# The version of the application we are building (required)\nARG APP_VSN\n# The environment to build with\nARG MIX_ENV=prod\n\nENV APP_NAME=${APP_NAME} \\\n    APP_VSN=${APP_VSN} \\\n    MIX_ENV=${MIX_ENV}\n\n# By convention, /opt is typically used for applications\nWORKDIR /opt/app\n\n# This step installs all the build tools we'll need\nRUN apk update && \\\n  apk upgrade --no-cache && \\\n  apk add --no-cache \\\n    curl \\\n    openssl \\\n    nodejs \\\n    yarn \\\n    git \\\n    build-base && \\\n  mix local.rebar --force && \\\n  mix local.hex --force\n\nCOPY mix.* /opt/app/\nRUN mix do deps.get, deps.compile\n\nCOPY assets/package.json assets/yarn.lock /opt/app/assets/\nWORKDIR /opt/app/assets\nRUN yarn install && yarn cache clean;\n\nWORKDIR /opt/app\n# This copies our app source code into the build container\nCOPY . .\n\nRUN mix compile\n\nRUN cd ./assets && \\\n  yarn deploy && \\\n  cd .. && \\\n  mix phx.digest\n\nRUN \\\n  mkdir -p /opt/built && \\\n  mix release --verbose && \\\n  cp _build/${MIX_ENV}/rel/${APP_NAME}/releases/${APP_VSN}/${APP_NAME}.tar.gz /opt/built && \\\n  cd /opt/built && \\\n  tar -xzf ${APP_NAME}.tar.gz && \\\n  rm ${APP_NAME}.tar.gz\n\n# From this line onwards, we're in a new image, which will be the image used in production\nFROM alpine:${ALPINE_VERSION} AS production\n\n# The name of your application/release (required)\nARG APP_NAME\n\nRUN apk update && \\\n    apk add --no-cache \\\n      bash \\\n      openssl-dev\n\nENV REPLACE_OS_VARS=true \\\n    APP_NAME=${APP_NAME}\n\nWORKDIR /opt/app\n\nCOPY --from=builder /opt/built .\n\nCMD bin/phlink foreground\n"
}