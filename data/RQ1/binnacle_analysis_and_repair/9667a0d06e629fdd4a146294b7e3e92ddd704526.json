{
  "startTime": 1674250314943,
  "endTime": 1674250315506,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 121,
        "lineEnd": 121,
        "columnStart": 2,
        "columnEnd": 124
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 69,
        "lineEnd": 69,
        "columnStart": 4,
        "columnEnd": 30
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 8,
        "lineEnd": 62,
        "columnStart": 4,
        "columnEnd": 21
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM nvidia/cuda:8.0-cudnn6-devel\n\n# Supress warnings about missing front-end. As recommended at:\n# http://stackoverflow.com/questions/22466255/is-it-possibe-to-answer-dialog-questions-when-installing-under-docker\nARG DEBIAN_FRONTEND=noninteractive\n\n# Install some dependencies\nRUN apt-get update && \\\n    apt-get install --no-install-recommends -y \\\n      apt-utils \\\n      git \\\n      curl \\\n      unzip \\\n      openssh-client \\\n      wget \\\n      build-essential \\\n      cmake \\\n      libboost-all-dev \\\n      libffi-dev \\\n      libfreetype6-dev \\\n      libhdf5-dev \\\n      libjpeg8-dev \\\n      liblcms2-dev \\\n      libopenblas-dev \\\n      liblapack-dev \\\n      libpng12-dev \\\n      libssl-dev \\\n      libtiff5-dev \\\n      libwebp-dev \\\n      libzmq3-dev \\\n      nano \\\n      pkg-config \\\n      libavcodec-dev \\\n      libavformat-dev \\\n      libswscale-dev \\\n      libtheora-dev \\\n      libvorbis-dev \\\n      libxvidcore-dev \\\n      libx264-dev \\\n      yasm \\\n      libopencore-amrnb-dev \\\n      libopencore-amrwb-dev \\\n      libv4l-dev \\\n      libxine2-dev \\\n      libtbb-dev \\\n      libeigen3-dev \\\n      python3.5 \\\n      python3.5-dev \\\n      python3-pip \\\n      python3-tk \\\n      zlib1g-dev \\\n      libprotobuf-dev \\\n      libleveldb-dev \\\n      libsnappy-dev \\\n      libhdf5-serial-dev \\\n      protobuf-compiler \\\n      liblmdb-dev \\\n      libgoogle-glog-dev \\\n      libatlas-base-dev \\\n      gfortran \\\n      libgflags-dev \\\n      liblapacke-dev \\\n      libopenblas-dev \\\n      && \\\n  apt-get clean && \\\n  apt-get autoremove && \\\n  rm -rf /var/lib/apt/lists/*\n\n# upgrade pip(3)\nRUN pip3 install --no-cache-dir --upgrade pip\n\n# python dependencies\nRUN pip3 install --no-cache-dir --upgrade Cython numpy pypng scikit-image ipython\n\n# opencv (3.2 specifically)\n# ensure dnn is NOT enabled, this will cause problems!\nRUN cd ~ && \\\n    wget -O opencv.zip https://github.com/opencv/opencv/archive/3.2.0.zip && \\\n    wget -O opencv_contrib.zip https://github.com/opencv/opencv_contrib/archive/3.2.0.zip && \\\n    unzip opencv.zip && \\\n    unzip opencv_contrib.zip && \\\n    rm -f opencv.zip && \\\n    rm -f opencv_contrib.zip && \\\n    cd ~/opencv-3.2.0/ && \\\n    mkdir build && \\\n    cd build && \\\n    cmake -D CMAKE_BUILD_TYPE=RELEASE \\\n      -D CMAKE_INSTALL_PREFIX=/usr/local \\\n      -D INSTALL_PYTHON_EXAMPLES=OFF \\\n      -D INSTALL_C_EXAMPLES=OFF \\\n      -D BUILD_opencv_dnn=OFF \\\n      -D OPENCV_EXTRA_MODULES_PATH=~/opencv_contrib-3.2.0/modules \\\n      -D PYTHON3_EXECUTABLE=/usr/bin/python3 \\\n      -D BUILD_opencv_python2=OFF \\\n      -D BUILD_opencv_python3=ON \\\n      -D BUILD_EXAMPLES=OFF .. && \\\n    make -j\"$(nproc)\" && \\\n    make install -j\"$(nproc)\" && \\\n    ldconfig && \\\n    cd ~ && \\\n    rm -rf opencv-3.2.0 && \\\n    rm -rf opencv_contrib-3.2.0\n\n# Tensorflow 1.4.1 - GPU\nRUN pip3 install --no-cache-dir --upgrade \\\n    \"https://storage.googleapis.com/tensorflow/linux/gpu/tensorflow_gpu-1.4.1-cp35-cp35m-linux_x86_64.whl\"\n\n# Install pymongo\nRUN pip3 install --no-cache-dir --upgrade keras\n\n# aten\nRUN cd /root && \\\n    git clone --depth=1 https://github.com/HCPLab-SYSU/ATEN.git\n\n# aten - convGRU\nRUN cd /root/ATEN/keras_convGRU && \\\n    python3 setup.py install\n\n# aten - flow_warp\nRUN cd `python3 -c 'import tensorflow as tf; print(tf.sysconfig.get_include())'` && \\\n  cd tensorflow/stream_executor/cuda && \\\n  curl -f -O https://raw.githubusercontent.com/tensorflow/tensorflow/master/third_party/toolchains/gpus/cuda/cuda/cuda_config.h && \\\n  cd /root/ATEN/ops && \\\n  sed -i 's/python/python3/' Makefile && \\\n  sed -i 's/sm_52/sm_61/' Makefile && \\\n  sed -i 's/ltensorflow_framework/ltensorflow_framework \\-D_GLIBCXX_USE_CXX11_ABI\\=0/' Makefile && \\\n  make\n\nWORKDIR \"/root\"\nCMD [\"/bin/bash\"]\n"
}