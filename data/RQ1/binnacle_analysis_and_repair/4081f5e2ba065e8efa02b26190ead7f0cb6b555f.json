{
  "startTime": 1674245564648,
  "endTime": 1674245565496,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 28,
        "lineEnd": 28,
        "columnStart": 4,
        "columnEnd": 93
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 91,
        "lineEnd": 91,
        "columnStart": 4,
        "columnEnd": 89
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 116,
        "lineEnd": 116,
        "columnStart": 4,
        "columnEnd": 81
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 121,
        "lineEnd": 121,
        "columnStart": 8,
        "columnEnd": 60
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 127,
        "lineEnd": 127,
        "columnStart": 4,
        "columnEnd": 147
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 137,
        "lineEnd": 137,
        "columnStart": 4,
        "columnEnd": 125
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 160,
        "lineEnd": 160,
        "columnStart": 4,
        "columnEnd": 119
      }
    },
    {
      "rule": "curlUseHttpsUrl",
      "position": {
        "lineStart": 91,
        "lineEnd": 91,
        "columnStart": 4,
        "columnEnd": 89
      }
    },
    {
      "rule": "curlUseHttpsUrl",
      "position": {
        "lineStart": 137,
        "lineEnd": 137,
        "columnStart": 4,
        "columnEnd": 125
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 3,
        "lineEnd": 18,
        "columnStart": 22,
        "columnEnd": 34
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 3,
        "lineEnd": 18,
        "columnStart": 22,
        "columnEnd": 34
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM debian:wheezy\nMAINTAINER Steeve Morin \"steeve.morin@gmail.com\"\n\nRUN apt-get update && apt-get -y --no-install-recommends install unzip \\\n                        xz-utils \\\n                        curl \\\n                        bc \\\n                        git \\\n                        build-essential \\\n                        cpio \\\n                        gcc-multilib libc6-i386 libc6-dev-i386 \\\n                        kmod \\\n                        squashfs-tools \\\n                        genisoimage \\\n                        xorriso \\\n                        syslinux \\\n                        automake \\\n                        pkg-config \\\n                        p7zip-full && rm -rf /var/lib/apt/lists/*;\n\n# https://www.kernel.org/\nENV KERNEL_VERSION  3.18.7\n# http://sourceforge.net/p/aufs/aufs3-standalone/ref/master/branches/\nENV AUFS_BRANCH     aufs3.18.1+\nENV AUFS_COMMIT     f9f16b996df1651c5ab19bd6e6101310e3659c76\n# we use AUFS_COMMIT to get stronger repeatability guarantees\n\n# Fetch the kernel sources\nRUN curl -f --retry 10 https://www.kernel.org/pub/linux/kernel/v3.x/linux-$KERNEL_VERSION.tar.xz | tar -C / -xJ && \\\n    mv /linux-$KERNEL_VERSION /linux-kernel\n\n# Download AUFS and apply patches and files, then remove it\nRUN git clone -b $AUFS_BRANCH http://git.code.sf.net/p/aufs/aufs3-standalone && \\\n    cd aufs3-standalone && \\\n    git checkout $AUFS_COMMIT && \\\n    cd /linux-kernel && \\\n    cp -r /aufs3-standalone/Documentation /linux-kernel && \\\n    cp -r /aufs3-standalone/fs /linux-kernel && \\\n    cp -r /aufs3-standalone/include/uapi/linux/aufs_type.h /linux-kernel/include/uapi/linux/ &&\\\n    for patch in aufs3-kbuild aufs3-base aufs3-mmap aufs3-standalone aufs3-loopback; do \\\n        patch -p1 < /aufs3-standalone/$patch.patch; \\\n    done\n\nCOPY kernel_config /linux-kernel/.config\n\nRUN jobs=$(nproc); \\\n    cd /linux-kernel && \\\n    make -j ${jobs} oldconfig && \\\n    make -j ${jobs} bzImage && \\\n    make -j ${jobs} modules\n\n# The post kernel build process\n\nENV ROOTFS          /rootfs\nENV TCL_REPO_BASE   http://tinycorelinux.net/5.x/x86\nENV TCZ_DEPS        iptables \\\n                    iproute2 \\\n                    openssh openssl-1.0.0 \\\n                    tar \\\n                    gcc_libs \\\n                    acpid \\\n                    xz liblzma \\\n                    git expat2 libiconv libidn libgpg-error libgcrypt libssh2 \\\n                    nfs-utils tcp_wrappers portmap rpcbind libtirpc \\\n                    curl ntpclient\n\n# Make the ROOTFS\nRUN mkdir -p $ROOTFS\n\n# Prepare the build directory (/tmp/iso)\nRUN mkdir -p /tmp/iso/boot\n\n# Install the kernel modules in $ROOTFS\nRUN cd /linux-kernel && \\\n    make INSTALL_MOD_PATH=$ROOTFS modules_install firmware_install\n\n# Remove useless kernel modules, based on unclejack/debian2docker\nRUN cd $ROOTFS/lib/modules && \\\n    rm -rf ./*/kernel/sound/* && \\\n    rm -rf ./*/kernel/drivers/gpu/* && \\\n    rm -rf ./*/kernel/drivers/infiniband/* && \\\n    rm -rf ./*/kernel/drivers/isdn/* && \\\n    rm -rf ./*/kernel/drivers/media/* && \\\n    rm -rf ./*/kernel/drivers/staging/lustre/* && \\\n    rm -rf ./*/kernel/drivers/staging/comedi/* && \\\n    rm -rf ./*/kernel/fs/ocfs2/* && \\\n    rm -rf ./*/kernel/net/bluetooth/* && \\\n    rm -rf ./*/kernel/net/mac80211/* && \\\n    rm -rf ./*/kernel/net/wireless/*\n\n# Install libcap\nRUN curl -f -L https://http.debian.net/debian/pool/main/libc/libcap2/libcap2_2.22.orig.tar.gz | tar -C / -xz && \\\n    cd /libcap-2.22 && \\\n    sed -i 's/LIBATTR := yes/LIBATTR := no/' Make.Rules && \\\n    sed -i 's/\\(^CFLAGS := .*\\)/\\1 -m32/' Make.Rules && \\\n    make && \\\n    mkdir -p output && \\\n    make prefix=`pwd`/output install && \\\n    mkdir -p $ROOTFS/usr/local/lib && \\\n    cp -av `pwd`/output/lib64/* $ROOTFS/usr/local/lib\n\n# Make sure the kernel headers are installed for aufs-util, and then build it\nRUN cd /linux-kernel && \\\n    make INSTALL_HDR_PATH=/tmp/kheaders headers_install && \\\n    cd / && \\\n    git clone http://git.code.sf.net/p/aufs/aufs-util && \\\n    cd /aufs-util && \\\n    git checkout aufs3.9 && \\\n    CPPFLAGS=\"-m32 -I/tmp/kheaders/include\" CLFAGS=$CPPFLAGS LDFLAGS=$CPPFLAGS make && \\\n    DESTDIR=$ROOTFS make install && \\\n    rm -rf /tmp/kheaders\n\n# Prepare the ISO directory with the kernel\nRUN cp -v /linux-kernel/arch/x86_64/boot/bzImage /tmp/iso/boot/vmlinuz64\n\n# Download the rootfs, don't unpack it though:\nRUN curl -f -L -o /tcl_rootfs.gz $TCL_REPO_BASE/release/distribution_files/rootfs.gz\n\n# Install the TCZ dependencies\nRUN for dep in $TCZ_DEPS; do \\\n    echo \"Download $TCL_REPO_BASE/tcz/$dep.tcz\" && \\\n        curl -f -L -o /tmp/$dep.tcz $TCL_REPO_BASE/tcz/$dep.tcz && \\\n        unsquashfs -f -d $ROOTFS /tmp/$dep.tcz && \\\n        rm -f /tmp/$dep.tcz; \\\n    done\n\n# get generate_cert\nRUN curl -f -L -o $ROOTFS/usr/local/bin/generate_cert https://github.com/SvenDowideit/generate_cert/releases/download/0.1/generate_cert-0.1-linux-386/ && \\\n    chmod +x $ROOTFS/usr/local/bin/generate_cert\n\n# Build VBox guest additions\n# For future reference, we have to use x86 versions of several of these bits because TCL doesn't support ELFCLASS64\n# (... and we can't use VBoxControl or VBoxService at all because of this)\nENV VBOX_VERSION 4.3.20\nRUN mkdir -p /vboxguest && \\\n    cd /vboxguest && \\\n\n    curl -f -L -o vboxguest.iso https://download.virtualbox.org/virtualbox/${VBOX_VERSION}/VBoxGuestAdditions_${VBOX_VERSION}.iso && \\\n    7z x vboxguest.iso -ir'!VBoxLinuxAdditions.run' && \\\n    rm vboxguest.iso && \\\n\n    sh VBoxLinuxAdditions.run --noexec --target . && \\\n    mkdir amd64 && tar -C amd64 -xjf VBoxGuestAdditions-amd64.tar.bz2 && \\\n    mkdir x86 && tar -C x86 -xjf VBoxGuestAdditions-x86.tar.bz2 && \\\n    rm VBoxGuestAdditions*.tar.bz2 && \\\n\n    KERN_DIR=/linux-kernel/ make -C amd64/src/vboxguest-${VBOX_VERSION} && \\\n    cp amd64/src/vboxguest-${VBOX_VERSION}/*.ko $ROOTFS/lib/modules/$KERNEL_VERSION-tinycore64/ && \\\n\n    mkdir -p $ROOTFS/sbin && \\\n    cp x86/lib/VBoxGuestAdditions/mount.vboxsf $ROOTFS/sbin/\n\n# Make sure that all the modules we might have added are recognized (especially VBox guest additions)\nRUN depmod -a -b $ROOTFS $KERNEL_VERSION-tinycore64\n\nCOPY VERSION $ROOTFS/etc/version\nRUN cp -v $ROOTFS/etc/version /tmp/iso/version\n\n# Get the Docker version that matches our boot2docker version\n# Note: `docker version` returns non-true when there is no server to ask\nRUN curl -f -L -o $ROOTFS/usr/local/bin/docker https://get.docker.io/builds/Linux/x86_64/docker-$(cat $ROOTFS/etc/version) && \\\n    chmod +x $ROOTFS/usr/local/bin/docker && \\\n    { $ROOTFS/usr/local/bin/docker version || true; }\n\n# Get the git versioning info\nCOPY .git /git/.git\nRUN cd /git && \\\n    GIT_BRANCH=$(git rev-parse --abbrev-ref HEAD) && \\\n    GITSHA1=$(git rev-parse --short HEAD) && \\\n    DATE=$(date) && \\\n    echo \"${GIT_BRANCH} : ${GITSHA1} - ${DATE}\" > $ROOTFS/etc/boot2docker\n\n# Install Tiny Core Linux rootfs\nRUN cd $ROOTFS && zcat /tcl_rootfs.gz | cpio -f -i -H newc -d --no-absolute-filenames\n\n# Copy our custom rootfs\nCOPY rootfs/rootfs $ROOTFS\n\n# Build the Hyper-V KVP Daemon\nRUN cd /linux-kernel && \\\n    make headers_install INSTALL_HDR_PATH=/usr && \\\n    cd /linux-kernel/tools/hv && \\\n    sed -i 's/\\(^CFLAGS = .*\\)/\\1 -m32/' Makefile && \\\n    make hv_kvp_daemon && \\\n    cp hv_kvp_daemon $ROOTFS/usr/sbin\n\n# These steps can only be run once, so can't be in make_iso.sh (which can be run in chained Dockerfiles)\n# see https://github.com/boot2docker/boot2docker/blob/master/doc/BUILD.md\n\n# Make sure init scripts are executable\nRUN find $ROOTFS/etc/rc.d/ $ROOTFS/usr/local/etc/init.d/ -exec chmod +x '{}' ';'\n\n# Change MOTD\nRUN mv $ROOTFS/usr/local/etc/motd $ROOTFS/etc/motd\n\n# Make sure we have the correct bootsync\nRUN mv $ROOTFS/boot*.sh $ROOTFS/opt/ && \\\n\tchmod +x $ROOTFS/opt/*.sh\n\n# Make sure we have the correct shutdown\nRUN mv $ROOTFS/shutdown.sh $ROOTFS/opt/shutdown.sh && \\\n\tchmod +x $ROOTFS/opt/shutdown.sh\n\n# Add serial console\nRUN echo \"#!/bin/sh\" > $ROOTFS/usr/local/bin/autologin && \\\n\techo \"/bin/login -f docker\" >> $ROOTFS/usr/local/bin/autologin && \\\n\tchmod 755 $ROOTFS/usr/local/bin/autologin && \\\n\techo 'ttyS0:2345:respawn:/sbin/getty -l /usr/local/bin/autologin 9600 ttyS0 vt100' >> $ROOTFS/etc/inittab && \\\n\techo 'ttyS1:2345:respawn:/sbin/getty -l /usr/local/bin/autologin 9600 ttyS1 vt100' >> $ROOTFS/etc/inittab\n\n# fix \"su -\"\nRUN echo root > $ROOTFS/etc/sysconfig/superuser\n\n# crontab\nCOPY rootfs/crontab $ROOTFS/var/spool/cron/crontabs/root\n\n# Copy boot params\nCOPY rootfs/isolinux /tmp/iso/boot/isolinux\n\nCOPY rootfs/make_iso.sh /\n\nRUN /make_iso.sh\n\nCMD [\"cat\", \"boot2docker.iso\"]\n"
}