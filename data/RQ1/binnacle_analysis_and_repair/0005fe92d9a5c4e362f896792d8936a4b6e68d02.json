{
  "startTime": 1674251167937,
  "endTime": 1674251168200,
  "originalSmells": [
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 48,
        "lineEnd": 48,
        "columnStart": 37,
        "columnEnd": 62
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 65,
        "lineEnd": 65,
        "columnStart": 4,
        "columnEnd": 44
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 66,
        "lineEnd": 66,
        "columnStart": 4,
        "columnEnd": 45
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 70,
        "lineEnd": 70,
        "columnStart": 20,
        "columnEnd": 31
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 87,
        "lineEnd": 87,
        "columnStart": 20,
        "columnEnd": 31
      }
    },
    {
      "rule": "aptGetInstallUseY",
      "position": {
        "lineStart": 8,
        "lineEnd": 8,
        "columnStart": 4,
        "columnEnd": 39
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 8,
        "lineEnd": 8,
        "columnStart": 4,
        "columnEnd": 39
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 52,
        "lineEnd": 52,
        "columnStart": 4,
        "columnEnd": 46
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 52,
        "lineEnd": 52,
        "columnStart": 4,
        "columnEnd": 46
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 53,
        "lineEnd": 55,
        "columnStart": 4,
        "columnEnd": 16
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 8,
        "lineEnd": 8,
        "columnStart": 4,
        "columnEnd": 39
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 31,
        "lineEnd": 43,
        "columnStart": 22,
        "columnEnd": 34
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 52,
        "lineEnd": 52,
        "columnStart": 4,
        "columnEnd": 46
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 53,
        "lineEnd": 55,
        "columnStart": 4,
        "columnEnd": 16
      }
    }
  ],
  "repairedSmells": [
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 52,
        "lineEnd": 52,
        "columnStart": 4,
        "columnEnd": 70
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 53,
        "lineEnd": 55,
        "columnStart": 4,
        "columnEnd": 16
      }
    }
  ],
  "repairedDockerfile": "FROM nvidia/cuda:10.0-cudnn7-devel-ubuntu16.04 AS nvidia\nFROM continuumio/anaconda3:5.3.0\n\n# Avoid interactive configuration prompts/dialogs during apt-get.\nENV DEBIAN_FRONTEND=noninteractive\n\n# This is necessary to for apt to access HTTPS sources\nRUN apt-get update && \\\n    apt-get install -y --no-install-recommends apt-transport-https && rm -rf /var/lib/apt/lists/*;\n\n# Cuda support\nCOPY --from=nvidia /etc/apt/sources.list.d/cuda.list /etc/apt/sources.list.d/\nCOPY --from=nvidia /etc/apt/sources.list.d/nvidia-ml.list /etc/apt/sources.list.d/\nCOPY --from=nvidia /etc/apt/trusted.gpg /etc/apt/trusted.gpg.d/cuda.gpg\n\n# Ensure the cuda libraries are compatible with the GPU image.\n# TODO(b/120050292): Use templating to keep in sync.\nENV CUDA_VERSION=10.0.130\nENV CUDA_PKG_VERSION=10-0=$CUDA_VERSION-1\nLABEL com.nvidia.volumes.needed=\"nvidia_driver\"\nLABEL com.nvidia.cuda.version=\"${CUDA_VERSION}\"\nENV PATH=/usr/local/nvidia/bin:/usr/local/cuda/bin:${PATH}\n# The stub is useful to us both for built-time linking and run-time linking, on CPU-only systems.\n# When intended to be used with actual GPUs, make sure to (besides providing access to the host\n# CUDA user libraries, either manually or through the use of nvidia-docker) exclude them. One\n# convenient way to do so is to obscure its contents by a bind mount:\n#   docker run .... -v /non-existing-directory:/usr/local/cuda/lib64/stubs:ro ...\nENV LD_LIBRARY_PATH=\"${LD_LIBRARY_PATH}:/usr/local/nvidia/lib64:/usr/local/cuda/lib64:/usr/local/cuda/lib64/stubs\"\nENV NVIDIA_VISIBLE_DEVICES=all\nENV NVIDIA_DRIVER_CAPABILITIES=compute,utility\nENV NVIDIA_REQUIRE_CUDA=\"cuda>=10.0\"\nRUN apt-get update && apt-get install -y --no-install-recommends \\\n      cuda-cupti-$CUDA_PKG_VERSION \\\n      cuda-cudart-$CUDA_PKG_VERSION \\\n      cuda-cudart-dev-$CUDA_PKG_VERSION \\\n      cuda-libraries-$CUDA_PKG_VERSION \\\n      cuda-libraries-dev-$CUDA_PKG_VERSION \\\n      cuda-nvml-dev-$CUDA_PKG_VERSION \\\n      cuda-minimal-build-$CUDA_PKG_VERSION \\\n      cuda-command-line-tools-$CUDA_PKG_VERSION \\\n      libcudnn7=7.5.0.56-1+cuda10.0 \\\n      libcudnn7-dev=7.5.0.56-1+cuda10.0 \\\n      libnccl2=2.4.2-1+cuda10.0 \\\n      libnccl-dev=2.4.2-1+cuda10.0 && \\\n    ln -s /usr/local/cuda-10.0 /usr/local/cuda && \\\n    ln -s /usr/local/cuda/lib64/stubs/libcuda.so /usr/local/cuda/lib64/stubs/libcuda.so.1 && rm -rf /var/lib/apt/lists/*;\n\n# Work to upgrade to Python 3.7 can be found on this branch: https://github.com/Kaggle/docker-python/blob/upgrade-py37/Dockerfile\nRUN conda install -y python=3.6.6 && pip install --no-cache-dir --upgrade pip\n\n# Tensorflow 1.13 requires bazel >= 0.19.2 & <= 0.21.0\nENV BAZEL_VERSION=0.21.0\nRUN apt-get install --no-install-recommends -y gnupg zip openjdk-8-jdk && \\\n    apt-get install -y --no-install-recommends \\\n      bash-completion \\\n      zlib1g-dev && \\\n    wget --no-verbose \"https://github.com/bazelbuild/bazel/releases/download/${BAZEL_VERSION}/bazel_${BAZEL_VERSION}-linux-x86_64.deb\" && \\\n    dpkg -i bazel_*.deb && \\\n    rm bazel_*.deb && rm -rf /var/lib/apt/lists/*;\n\n# Fetch tensorflow & install dependencies.\nRUN cd /usr/local/src && \\\n    git clone https://github.com/tensorflow/tensorflow && \\\n    cd tensorflow && \\\n    git checkout r1.13 && \\\n    pip install --no-cache-dir keras_applications --no-deps && \\\n    pip install --no-cache-dir keras_preprocessing --no-deps\n\n# Create a tensorflow wheel for CPU\nRUN cd /usr/local/src/tensorflow && \\\n    cat /dev/null | ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" && \\\n    bazel build --config=opt //tensorflow/tools/pip_package:build_pip_package && \\\n    bazel-bin/tensorflow/tools/pip_package/build_pip_package /tmp/tensorflow_cpu && \\\n    bazel clean\n\n# Create a tensorflow wheel for GPU/cuda\nENV TF_NEED_CUDA=1\nENV TF_CUDA_VERSION=10.0\n# 3.7 is for the K80 and 6.0 is for the P100, 7.5 is for the T4: https://developer.nvidia.com/cuda-gpus\nENV TF_CUDA_COMPUTE_CAPABILITIES=3.7,6.0,7.5\nENV TF_CUDNN_VERSION=7\nENV TF_NCCL_VERSION=2\nENV NCCL_INSTALL_PATH=/usr/\n\nRUN cd /usr/local/src/tensorflow && \\\n    # TF_NCCL_INSTALL_PATH is used for both libnccl.so.2 and libnccl.h. Make sure they are both accessible from the same directory.\n    ln -s /usr/lib/x86_64-linux-gnu/libnccl.so.2 /usr/lib/ && \\\n    cat /dev/null | ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" && \\\n    echo \"/usr/local/cuda-${TF_CUDA_VERSION}/targets/x86_64-linux/lib/stubs\" > /etc/ld.so.conf.d/cuda-stubs.conf && ldconfig && \\\n    bazel build --config=opt \\\n                --config=cuda \\\n                --cxxopt=\"-D_GLIBCXX_USE_CXX11_ABI=0\" \\\n                //tensorflow/tools/pip_package:build_pip_package && \\\n    rm /etc/ld.so.conf.d/cuda-stubs.conf && ldconfig && \\\n    bazel-bin/tensorflow/tools/pip_package/build_pip_package /tmp/tensorflow_gpu && \\\n    bazel clean\n\n# Print out the built .whl files\nRUN ls -R /tmp/tensorflow*\n"
}