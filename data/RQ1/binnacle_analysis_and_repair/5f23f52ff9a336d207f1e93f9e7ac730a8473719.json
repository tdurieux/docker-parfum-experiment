{
  "startTime": 1674243448307,
  "endTime": 1674243448354,
  "originalSmells": [
    {
      "rule": "apkAddUseNoCache",
      "position": {
        "lineStart": 3,
        "lineEnd": 5,
        "columnStart": 4,
        "columnEnd": 55
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM ruby:2.3-alpine\n\n# Install dependencies required to run Rails as well as RubyGems.\nRUN apk --update --no-cache add --virtual build-dependencies curl-dev ruby-dev build-base \\\n    openssl-dev libc-dev linux-headers zlib-dev libxml2-dev libxslt-dev tzdata \\\n    yaml-dev postgresql-dev nodejs imagemagick git file\n\n# Configure the main working directory. This is the base\n# directory used in any further RUN, COPY, and ENTRYPOINT\n# commands.\nRUN mkdir -p /app\nWORKDIR /app\n\n# Copy the Gemfile as well as the Gemfile.lock and install\n# the RubyGems. This is a separate step so the dependencies\n# will be cached unless changes to one of those two files\n# are made.\nCOPY Gemfile Gemfile.lock ./\nRUN gem install bundler && bundle install --jobs 20 --retry 5\n\n# Copy the main application.\nCOPY . ./\n\n# Expose port 3000 to the Docker host, so we can access it\n# from the outside.\nEXPOSE 3000\n\n# Configure an entry point, so we don't need to specify\n# \"bundle exec\" for each of our commands.\nENTRYPOINT [\"bundle\", \"exec\"]\n\n# The main command to run when the container starts. Also\n# tell the Rails dev server to bind to all interfaces by\n# default.\nCMD [\"rails\", \"server\", \"-b\", \"0.0.0.0\"]\n"
}