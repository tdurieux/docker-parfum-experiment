{
  "startTime": 1674243817367,
  "endTime": 1674243818037,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 99,
        "lineEnd": 99,
        "columnStart": 4,
        "columnEnd": 100
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 118,
        "lineEnd": 118,
        "columnStart": 4,
        "columnEnd": 91
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 129,
        "lineEnd": 129,
        "columnStart": 4,
        "columnEnd": 98
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 92,
        "lineEnd": 92,
        "columnStart": 4,
        "columnEnd": 28
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 127,
        "lineEnd": 127,
        "columnStart": 4,
        "columnEnd": 40
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 128,
        "lineEnd": 128,
        "columnStart": 4,
        "columnEnd": 35
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 139,
        "lineEnd": 139,
        "columnStart": 4,
        "columnEnd": 25
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 160,
        "lineEnd": 160,
        "columnStart": 4,
        "columnEnd": 35
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 83,
        "lineEnd": 83,
        "columnStart": 4,
        "columnEnd": 15
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 81,
        "lineEnd": 81,
        "columnStart": 4,
        "columnEnd": 33
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 52,
        "lineEnd": 78,
        "columnStart": 22,
        "columnEnd": 16
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 90,
        "lineEnd": 90,
        "columnStart": 4,
        "columnEnd": 30
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 2,
        "lineEnd": 18,
        "columnStart": 22,
        "columnEnd": 18
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 52,
        "lineEnd": 78,
        "columnStart": 22,
        "columnEnd": 16
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 90,
        "lineEnd": 90,
        "columnStart": 4,
        "columnEnd": 30
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 108,
        "lineEnd": 116,
        "columnStart": 22,
        "columnEnd": 11
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM intelpython/intelpython3_core as TENSORFLOW\n\nRUN apt-get update && apt-get install -y --no-install-recommends \\\n        openjdk-8-jdk \\\n        openjdk-8-jre-headless \\\n        build-essential \\\n        curl \\\n        git \\\n        libcurl3-dev \\\n        libfreetype6-dev \\\n        libhdf5-serial-dev \\\n        libpng-dev \\\n        libzmq3-dev \\\n        pkg-config \\\n        rsync \\\n        software-properties-common \\\n        unzip \\\n        zip \\\n        zlib1g-dev && \\\n        apt-get clean && rm -rf /var/lib/apt/lists/*;\n\nRUN git clone -b r1.14 --depth 1 https://github.com/tensorflow/tensorflow\n\n\nRUN conda create --name myenv -y\nENV PATH /opt/conda/envs/myenv/bin:$PATH\n\n# Set up Bazel.\n\n# Running bazel inside a `docker build` command causes trouble, cf:\n#   https://github.com/bazelbuild/bazel/issues/134\n# The easiest solution is to set up a bazelrc file forcing --batch.\nRUN echo \"startup --batch\" >>/etc/bazel.bazelrc\n# Similarly, we need to workaround sandboxing issues:\n#   https://github.com/bazelbuild/bazel/issues/418\nRUN echo \"build --spawn_strategy=standalone --genrule_strategy=standalone\" \\\n    >>/etc/bazel.bazelrc\n# Install the most recent bazel release.\nENV BAZEL_VERSION 0.24.1\nWORKDIR /\nRUN mkdir /bazel && \\\n    cd /bazel && \\\n    curl -H \"User-Agent: Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/57.0.2987.133 Safari/537.36\" -fSsL -O https://github.com/bazelbuild/bazel/releases/download/$BAZEL_VERSION/bazel-$BAZEL_VERSION-installer-linux-x86_64.sh && \\\n    curl -H \"User-Agent: Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/57.0.2987.133 Safari/537.36\" -fSsL -o /bazel/LICENSE.txt https://raw.githubusercontent.com/bazelbuild/bazel/master/LICENSE && \\\n    chmod +x bazel-*.sh && \\\n    ./bazel-$BAZEL_VERSION-installer-linux-x86_64.sh && \\\n    cd / && \\\n    rm -f /bazel/bazel-$BAZEL_VERSION-installer-linux-x86_64.sh\n\nRUN cd tensorflow && bazel build tensorflow/tools/graph_transforms:summarize_graph\n\nFROM intelpython/intelpython3_core as IE\nRUN apt-get update && apt-get install --no-install-recommends -y \\\n            autoconf \\\n            automake \\\n            build-essential \\\n            ca-certificates \\\n            curl \\\n            git \\\n            gstreamer1.0-plugins-base \\\n            libavcodec-dev \\\n            libavformat-dev \\\n            libboost-regex-dev \\\n            libcairo2-dev \\\n            libgfortran3 \\\n            libglib2.0-dev \\\n            libgstreamer1.0-0 \\\n            libgtk2.0-dev \\\n            libopenblas-dev \\\n            libpango1.0-dev \\\n            libpng-dev \\\n            libssl-dev \\\n            libswscale-dev \\\n            libtool \\\n            libusb-1.0-0-dev \\\n            pkg-config \\\n            unzip \\\n            vim \\\n            wget && rm -rf /var/lib/apt/lists/*;\n\nRUN wget https://cmake.org/files/v3.14/cmake-3.14.3.tar.gz && \\\n    tar -xvzf cmake-3.14.3.tar.gz && \\\n    cd cmake-3.14.3/ && \\\n    ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" && \\\n    make -j$(nproc) && \\\n    make install && rm cmake-3.14.3.tar.gz\n\nRUN echo \"deb http://ftp.us.debian.org/debian/ jessie main contrib non-free\" >> /etc/apt/sources.list && \\\n    echo \"deb-src http://ftp.us.debian.org/debian/ jessie main contrib non-free\" >> /etc/apt/sources.list && \\\n    apt update && \\\n    apt-get install --no-install-recommends -y g++-4.9 && rm -rf /var/lib/apt/lists/*;\nENV CXX=/usr/bin/g++-4.9\nRUN pip install --no-cache-dir cython numpy\nARG DLDT_DIR=/dldt-2019_R1.0.1\nRUN git clone --depth=1 -b 2019_R1.0.1 https://github.com/opencv/dldt.git ${DLDT_DIR} && \\\n    cd ${DLDT_DIR} && git submodule init && git submodule update --recursive && \\\n    rm -Rf .git && rm -Rf model-optimizer\n\nWORKDIR ${DLDT_DIR}\nRUN curl -f -L https://github.com/intel/mkl-dnn/releases/download/v0.18/mklml_lnx_2019.0.3.20190220.tgz | tar -xz\nWORKDIR ${DLDT_DIR}/inference-engine/build\nRUN cmake -DGEMM=MKL  -DMKLROOT=${DLDT_DIR}/mklml_lnx_2019.0.3.20190220 -DENABLE_MKL_DNN=ON -DTHREADING=OMP -DCMAKE_BUILD_TYPE=Release ..\nRUN make -j$(nproc)\nWORKDIR ${DLDT_DIR}/inference-engine/ie_bridges/python/build\nRUN cmake -DInferenceEngine_DIR=${DLDT_DIR}/inference-engine/build -DPYTHON_EXECUTABLE=$(which python) -DPYTHON_LIBRARY=/opt/conda/lib/libpython3.6m.so -DPYTHON_INCLUDE_DIR=/opt/conda/include/python3.6m ${DLDT_DIR}/inference-engine/ie_bridges/python && \\\n    make -j$(nproc)\n\nFROM intelpython/intelpython3_core as FINAL\nRUN apt-get update && apt-get install -y --no-install-recommends \\\n        curl ca-certificates \\\n        python3-pip \\\n        gcc \\\n        python-setuptools \\\n        python3-setuptools \\\n        libgfortran3 \\\n        unzip \\\n        vim && \\\n        apt-get clean && rm -rf /var/lib/apt/lists/*;\nRUN curl -f -L -o 2019_R1.0.1.tar.gz https://github.com/opencv/dldt/archive/2019_R1.0.1.tar.gz && \\\n    tar -zxf 2019_R1.0.1.tar.gz && \\\n    rm 2019_R1.0.1.tar.gz && \\\n    rm -Rf dldt-2019_R1.0.1/inference-engine\nWORKDIR dldt-2019_R1.0.1/model-optimizer\n\nRUN conda create --name myenv -y\nENV PATH /opt/conda/envs/myenv/bin:$PATH\n\nRUN pip install --no-cache-dir --upgrade pip setuptools\nRUN pip install --no-cache-dir -r requirements.txt\nRUN curl -f -L -o google-cloud-sdk.zip https://dl.google.com/dl/cloudsdk/release/google-cloud-sdk.zip && \\\n    unzip -qq google-cloud-sdk.zip -d tools && \\\n    rm google-cloud-sdk.zip && \\\n    tools/google-cloud-sdk/install.sh --usage-reporting=false \\\n        --path-update=true --bash-completion=false \\\n        --disable-installation-options && \\\n    tools/google-cloud-sdk/bin/gcloud -q components update \\\n        gcloud core gsutil && \\\n    tools/google-cloud-sdk/bin/gcloud config set component_manager/disable_update_check true && \\\n    touch tools/google-cloud-sdk/lib/third_party/google.py && \\\n    pip install --no-cache-dir -U crcmod\nENV PATH ${PATH}:/dldt-2019_R1.0.1/model-optimizer:/dldt-2019_R1.0.1/model-optimizer/tools/google-cloud-sdk/bin\n\nCOPY --from=IE /dldt-2019_R1.0.1/inference-engine/bin/intel64/Release/lib/*.so /usr/local/lib/\nCOPY --from=IE /dldt-2019_R1.0.1/inference-engine/ie_bridges/python/bin/intel64/Release/python_api/python3.6/openvino/ /usr/local/lib/openvino/\nCOPY --from=IE /dldt-2019_R1.0.1/mklml_lnx_2019.0.3.20190220/lib/lib*.so /usr/local/lib/\nENV LD_LIBRARY_PATH=/usr/local/lib\n\nWORKDIR /slim\n\nRUN git clone --depth 1 https://github.com/tensorflow/models && rm -Rf models/.git && \\\n    git clone --depth 1  -b r1.14 https://github.com/tensorflow/tensorflow && rm -Rf tensorflow/.git\n\nENV PYTHONPATH=/usr/local/lib:/slim/models/research/slim:/slim/tensorflow/python/tools\n\nCOPY --from=TENSORFLOW /tensorflow/bazel-bin/tensorflow/tools/graph_transforms/summarize_graph /usr/bin/summarize_graph\nCOPY --from=TENSORFLOW /root/.cache/bazel/_bazel_root/*/execroot/org_tensorflow/bazel-out/k8-opt/bin/_solib_k8/_U_S_Stensorflow_Stools_Sgraph_Utransforms_Csummarize_Ugraph___Utensorflow/libtensorflow_framework.so.1 /usr/local/lib/libtensorflow_framework.so.1\n\nWORKDIR /scripts\n\nCOPY classes.py convert_model.py predict.py slim_model.py requirements.txt ./\nRUN pip install --no-cache-dir -r requirements.txt\n\n"
}