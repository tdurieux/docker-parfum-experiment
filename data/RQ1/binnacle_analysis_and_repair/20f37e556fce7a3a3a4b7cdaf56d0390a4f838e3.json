{
  "startTime": 1674234782804,
  "endTime": 1674234783380,
  "originalSmells": [
    {
      "rule": "wgetUseHttpsUrl",
      "position": {
        "lineStart": 82,
        "lineEnd": 82,
        "columnStart": 4,
        "columnEnd": 31
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 110,
        "lineEnd": 110,
        "columnStart": 5,
        "columnEnd": 16
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# Copyright (c) 2018, 2019 IBM Corp. and others\n#\n# This program and the accompanying materials are made available under\n# the terms of the Eclipse Public License 2.0 which accompanies this\n# distribution and is available at https://www.eclipse.org/legal/epl-2.0/\n# or the Apache License, Version 2.0 which accompanies this distribution and\n# is available at https://www.apache.org/licenses/LICENSE-2.0.\n#\n# This Source Code may also be made available under the following\n# Secondary Licenses when the conditions for such availability set\n# forth in the Eclipse Public License, v. 2.0 are satisfied: GNU\n# General Public License, version 2 with the GNU Classpath\n# Exception [1] and GNU General Public License, version 2 with the\n# OpenJDK Assembly Exception [2].\n#\n# [1] https://www.gnu.org/software/classpath/license.html\n# [2] http://openjdk.java.net/legal/assembly-exception.html\n#\n# SPDX-License-Identifier: EPL-2.0 OR Apache-2.0 OR GPL-2.0 WITH Classpath-exception-2.0 OR LicenseRef-GPL-2.0 WITH Assembly-exception\n\n# To use this docker file:\n# First copy your public ssh key into a file named authorized_keys next to the Dockerfile\n# Then include a known_hosts file next to the Dockerfile, with github as a saved host\n# This can be done with \"ssh-keyscan github.com >> path_to_dockerfile/known_hosts\"\n# Make sure you are in the directory containing the Dockerfile, authorized_keys file, and known_hosts file\n# Then run:\n#   docker build -t openj9 -f Dockerfile .\n#   docker run -it openj9\n\nFROM ubuntu:16.04\n\n# Install required OS tools\n\nENV USER=\"jenkins\"\n\nRUN apt-get update \\\n  && apt-get install -qq -y --no-install-recommends \\\n    software-properties-common \\\n    python-software-properties \\\n  && apt-get update \\\n  && apt-get install -qq -y --no-install-recommends \\\n    ant \\\n    ant-contrib \\\n    autoconf \\\n    build-essential \\\n    ca-certificates \\\n    cpio \\\n    curl \\\n    libexpat1-dev `# This is being used for the xml parser` \\\n    file \\\n    gdb \\\n    git \\\n    git-core \\\n    libasound2-dev \\\n    libcups2-dev \\\n    libdwarf-dev \\\n    libelf-dev \\\n    libfontconfig \\\n    libfontconfig1-dev \\\n    libfreetype6-dev \\\n    libmpc3 \\\n    libx11-dev \\\n    libxext-dev \\\n    libxrandr-dev \\\n    libxrender-dev \\\n    libxt-dev \\\n    libxtst-dev \\\n    make \\\n    openjdk-8-jdk \\\n    openssh-client \\\n    openssh-server \\\n    perl \\\n    pkg-config \\\n    realpath \\\n    ssh \\\n    unzip \\\n    wget \\\n    xvfb \\\n    zip \\\n  && rm -rf /var/lib/apt/lists/*\n\n# Dependency required by test framework\nRUN wget -O - https://cpanmin.us | perl - --self-upgrade \\\n  && cpanm Text::CSV \\\n  && cpanm JSON \\\n  && cpanm XML::Parser\n\n# Install GCC-7.4\nRUN cd /usr/local \\\n  && wget -O gcc-7.tar.xz \"https://ci.adoptopenjdk.net/userContent/gcc/gcc740+ccache.s390x.tar.xz\" \\\n  && tar -xJf gcc-7.tar.xz --strip-components=1 \\\n  && rm -rf gcc-7.tar.xz\n\n# Create links for c++,g++,cc,gcc and for GCC to access the C library\n# There is a true at the end of the library link because it throws an error and it allows the container to be built\nRUN ln -s /usr/lib/s390x-linux-gnu /usr/lib64 \\\n  && ln -s /usr/include/s390x-linux-gnu/* /usr/local/include | true \\\n  && ln -s /usr/local/bin/g++-7.4 /usr/bin/g++-7 \\\n  && ln -s /usr/local/bin/gcc-7.4 /usr/bin/gcc-7\n\n# Edit ldconfig to connect the new libstdc++.so* library\nRUN echo \"/usr/local/lib64\" >> /etc/ld.so.conf.d/local.conf \\\n  && ldconfig\n\n# Install cmake version 3.11.4\nRUN cd /tmp \\\n  && wget https://cmake.org/files/v3.11/cmake-3.11.4.tar.gz \\\n  && tar xzf cmake-3.11.4.tar.gz \\\n  && rm cmake-3.11.4.tar.gz \\\n  && cd /tmp/cmake-3.11.4 \\\n  && ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" \\\n  && make \\\n  && make install\n\n\n# Add user home/USER and copy authorized_keys and known_hosts\nRUN useradd -ms /bin/bash ${USER} \\\n  && mkdir /home/${USER}/.ssh/\nCOPY authorized_keys /home/${USER}/.ssh/authorized_keys\nCOPY known_hosts /home/${USER}/.ssh/known_hosts\nRUN chown -R ${USER}:${USER} /home/${USER} \\\n  && chmod 644 /home/${USER}/.ssh/authorized_keys \\\n  && chmod 644 /home/${USER}/.ssh/known_hosts \\\n  && chmod 700 /home/${USER}/.ssh\n\n# Download and setup freemarker.jar to /home/USER/freemarker.jar\nRUN cd /home/${USER} \\\n  && wget https://sourceforge.net/projects/freemarker/files/freemarker/2.3.8/freemarker-2.3.8.tar.gz/download -O freemarker.tgz \\\n  && tar -xzf freemarker.tgz freemarker-2.3.8/lib/freemarker.jar --strip=2 \\\n  && rm -f freemarker.tgz\n\n# Download and install boot JDK from AdoptOpenJDK for java 8\nRUN mkdir -p /usr/lib/jvm/adoptojdk-java-80 \\\n  && cd /usr/lib/jvm/adoptojdk-java-80 \\\n  && wget -O bootjdk8.tar.gz \"https://api.adoptopenjdk.net/v2/binary/releases/openjdk8?openjdk_impl=openj9&os=linux&arch=s390x&release=latest&type=jdk\" \\\n  && tar -xzf bootjdk8.tar.gz \\\n  && rm -f bootjdk8.tar.gz \\\n  && mv $(ls | grep -i jdk8) bootjdk8 \\\n  && mv bootjdk8/* /usr/lib/jvm/adoptojdk-java-80 \\\n  && rm -rf bootjdk8\n\n# Download and install boot JDK from AdoptOpenJDK for java 11 and 12\nRUN mkdir -p /usr/lib/jvm/adoptojdk-java-11 \\\n  && cd /usr/lib/jvm/adoptojdk-java-11 \\\n  && wget -O bootjdk11.tar.gz \"https://api.adoptopenjdk.net/v2/binary/releases/openjdk11?openjdk_impl=openj9&os=linux&arch=s390x&release=latest&type=jdk\" \\\n  && tar -xzf bootjdk11.tar.gz \\\n  && rm -f bootjdk11.tar.gz \\\n  && mv $(ls | grep -i jdk-11) bootjdk11 \\\n  && mv bootjdk11/* /usr/lib/jvm/adoptojdk-java-11 \\\n  && rm -rf bootjdk11\n\n# Download and install boot JDK from AdoptOpenJDK for java 13 and higher\nRUN mkdir -p /usr/lib/jvm/adoptojdk-java-12 \\\n  && cd /usr/lib/jvm/adoptojdk-java-12 \\\n  && wget -O bootjdk12.tar.gz \"https://api.adoptopenjdk.net/v2/binary/releases/openjdk12?openjdk_impl=openj9&os=linux&arch=s390x&release=latest&type=jdk\" \\\n  && tar -xzf bootjdk12.tar.gz \\\n  && rm -f bootjdk12.tar.gz \\\n  && mv $(ls | grep -i jdk-12) bootjdk12 \\\n  && mv bootjdk12/* /usr/lib/jvm/adoptojdk-java-12 \\\n  && rm -rf bootjdk12\n\n# Set up sshd config\nRUN mkdir /var/run/sshd \\\n  && sed -i 's/#PermitRootLogin/PermitRootLogin/' /etc/ssh/sshd_config \\\n  && sed -i 's/#RSAAuthentication.*/RSAAuthentication yes/' /etc/ssh/sshd_config \\\n  && sed -i 's/#PubkeyAuthentication.*/PubkeyAuthentication yes/' /etc/ssh/sshd_config\n\n# SSH login fix. Otherwise user is kicked off after login\nRUN sed 's@session\\s*required\\s*pam_loginuid.so@session optional pam_loginuid.so@g' -i /etc/pam.d/sshd\n\n# Expose SSH port\nEXPOSE 22\n\n# Setup a reference repository cache for faster clones in the container\nRUN mkdir /home/${USER}/openjdk_cache \\\n  && cd /home/${USER}/openjdk_cache \\\n  && git init --bare \\\n  && git remote add jdk8 https://github.com/ibmruntimes/openj9-openjdk-jdk8.git \\\n  && git remote add jdk11 https://github.com/ibmruntimes/openj9-openjdk-jdk11.git \\\n  && git remote add jdk12 https://github.com/ibmruntimes/openj9-openjdk-jdk12.git \\\n  && git remote add jdk13 https://github.com/ibmruntimes/openj9-openjdk-jdk13.git \\\n  && git remote add jdk https://github.com/ibmruntimes/openj9-openjdk-jdk.git \\\n  && git remote add openj9 https://github.com/eclipse/openj9.git \\\n  && git remote add omr https://github.com/eclipse/openj9-omr.git \\\n  && git fetch --all \\\n  && git gc --aggressive --prune=all\n\n# Adding bash profile so ${USER} max user processes will be unlimited\nRUN echo >> /home/${USER}/.bashrc \\\n  && echo \"# Change max user processes in ${USER}\" >> /home/${USER}/.bashrc \\\n  && echo \"ulimit -u unlimited\" >> /home/${USER}/.bashrc\n"
}