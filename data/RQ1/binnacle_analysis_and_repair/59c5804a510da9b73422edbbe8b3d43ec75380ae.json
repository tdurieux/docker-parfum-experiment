{
  "startTime": 1674239795548,
  "endTime": 1674239796553,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 129,
        "lineEnd": 129,
        "columnStart": 4,
        "columnEnd": 72
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 143,
        "lineEnd": 143,
        "columnStart": 4,
        "columnEnd": 45
      }
    },
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 130,
        "lineEnd": 130,
        "columnStart": 2,
        "columnEnd": 26
      }
    },
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 131,
        "lineEnd": 131,
        "columnStart": 2,
        "columnEnd": 22
      }
    },
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 164,
        "lineEnd": 164,
        "columnStart": 4,
        "columnEnd": 15
      }
    },
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 170,
        "lineEnd": 170,
        "columnStart": 4,
        "columnEnd": 15
      }
    },
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 183,
        "lineEnd": 183,
        "columnStart": 4,
        "columnEnd": 15
      }
    },
    {
      "rule": "wgetUseHttpsUrl",
      "position": {
        "lineStart": 119,
        "lineEnd": 119,
        "columnStart": 4,
        "columnEnd": 62
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 186,
        "lineEnd": 186,
        "columnStart": 4,
        "columnEnd": 60
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 205,
        "lineEnd": 205,
        "columnStart": 2,
        "columnEnd": 33
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 205,
        "lineEnd": 205,
        "columnStart": 37,
        "columnEnd": 50
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 122,
        "lineEnd": 122,
        "columnStart": 4,
        "columnEnd": 37
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 8,
        "lineEnd": 8,
        "columnStart": 22,
        "columnEnd": 88
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 34,
        "lineEnd": 111,
        "columnStart": 2,
        "columnEnd": 25
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 8,
        "lineEnd": 8,
        "columnStart": 22,
        "columnEnd": 88
      }
    }
  ],
  "repairedSmells": [
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 34,
        "lineEnd": 111,
        "columnStart": 2,
        "columnEnd": 25
      }
    }
  ],
  "repairedDockerfile": "#\n# Cartodb container\n#\nFROM ubuntu:18.04\nLABEL maintainer=\"Stefan Verhoeven <s.verhoeven@esciencecenter.nl>\"\n\n# Configuring locales\nENV DEBIAN_FRONTEND noninteractive\nRUN apt-get update && apt-get install --no-install-recommends -y -q apt-utils software-properties-common locales && dpkg-reconfigure locales && \\\n      locale-gen en_US.UTF-8 && \\\n      update-locale LANG=en_US.UTF-8 && rm -rf /var/lib/apt/lists/*;\nENV LANG en_US.UTF-8\nENV LANGUAGE en_US:en\nENV LC_ALL en_US.UTF-8\n\n#ENV CARTODB_VERSION=v4.11.152\n#ENV CARTODB_VERSION=v4.12.9\n#ENV CARTODB_VERSION=v4.12.26\n#ENV CARTODB_VERSION=v4.12.30\nENV CARTODB_VERSION=master\n#ENV SQLAPI_VERSION=1.47.2\nENV SQLAPI_VERSION=master\n#ENV CRANKSHAFT_VERSION=0.8.1\nENV CRANKSHAFT_VERSION=master\n#ENV WINDSHAFT_VERSION=5.4.0\nENV WINDSHAFT_VERSION=master\n#ENV DATASERVICES_VERSION=0.0.2\nENV DATASERVICES_VERSION=master\n#ENV DATAERVICESAPI_VERSION=0.30.5-server\nENV DATAERVICESAPI_VERSION=master\n#ENV OBSERVATORY_VERSION=1.9.0\nENV OBSERVATORY_VERSION=master\n\nRUN useradd -m -d /home/cartodb -s /bin/bash cartodb && \\\n  apt-get install -y -q \\\n    build-essential \\\n    autoconf \\\n    automake \\\n    libtool \\\n    checkinstall \\\n    unp \\\n    zip \\\n    unzip \\\n    git-core \\\n    git \\\n    subversion \\\n    curl \\\n    libgeos-c1v5 \\\n    libgeos-dev \\\n    libjson-c-dev \\\n    python-simplejson \\\n    proj-bin \\\n    proj-data \\\n    libproj-dev \\\n    gdal-bin \\\n    libgdal-dev \\\n    postgresql-10 \\\n    postgresql-client-10 \\\n    postgresql-contrib-10 \\\n    postgresql-server-dev-10 \\\n    postgresql-plpython-10 \\\n    postgresql-10-plproxy \\\n    postgresql-10-postgis-2.4 \\\n    postgresql-10-postgis-scripts \\\n    postgis \\\n    liblwgeom-2.4-0 \\\n    ca-certificates \\\n    redis-server \\\n    python2.7-dev \\\n    python-setuptools \\\n    imagemagick \\\n    libmapnik-dev \\\n    mapnik-utils \\\n    python-mapnik \\\n    python-argparse \\\n    python-gdal \\\n    python-chardet \\\n    python-all-dev \\\n    python-docutils \\\n    openssl \\\n    libreadline7 \\\n    zlib1g \\\n    zlib1g-dev \\\n    libssl-dev \\\n    libyaml-dev \\\n    libsqlite3-dev \\\n    sqlite3 \\\n    libxml2-dev \\\n    libxslt-dev \\\n    libc6-dev \\\n    ncurses-dev \\\n    bison \\\n    pkg-config \\\n    libpq5 \\\n    libpq-dev \\\n    libcurl4-gnutls-dev \\\n    libffi-dev \\\n    libgdbm-dev \\\n    gnupg \\\n    libreadline6-dev \\\n    libcairo2-dev \\\n    libjpeg8-dev \\\n    libpango1.0-dev \\\n    libgif-dev \\\n    libgmp-dev \\\n    libicu-dev \\\n    wget \\\n    nginx-light \\\n    net-tools \\\n    ruby2.5-dev \\\n    xz-utils \\\n  --no-install-recommends && \\\n  rm -rf /var/lib/apt/lists/*\n\nRUN git config --global user.email you@example.com\nRUN git config --global user.name \"Your Name\"\n\n# Varnish 3, Ubuntu:18.04 comes with Varnish 5.1 which can't be run with anonymous admin telnet\nRUN cd /opt && \\\n    wget https://varnish-cache.org/_downloads/varnish-3.0.7.tgz && \\\n    tar -zxf varnish-3.0.7.tgz && \\\n    cd varnish-3.0.7 && \\\n    ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --prefix=/opt/varnish && \\\n    make && \\\n    make install && \\\n    cd /opt && \\\n    rm -rf varnish-3.0.7 varnish-3.0.7.tgz\n\n# Install NodeJS\nRUN curl -f https://nodejs.org/dist/v10.15.3/node-v10.15.3-linux-x64.tar.xz | tar -Jxf - --strip-components=1 -C /usr && \\\n  npm install -g grunt-cli && \\\n  npm install -g npm@6 && \\\n  rm -r /tmp/npm-* /root/.npm && npm cache clean --force;\n\n# Setting PostgreSQL\nRUN sed -i 's/\\(peer\\|md5\\)/trust/' /etc/postgresql/10/main/pg_hba.conf && \\\n    service postgresql start && \\\n    createuser publicuser --no-createrole --no-createdb --no-superuser -U postgres && \\\n    createuser tileuser --no-createrole --no-createdb --no-superuser -U postgres && \\\n    service postgresql stop\n\n# Crankshaft: CARTO Spatial Analysis extension for PostgreSQL\nRUN cd / && \\\n    curl -f https://bootstrap.pypa.io/get-pip.py | python && \\\n    git clone https://github.com/CartoDB/crankshaft.git && \\\n    cd /crankshaft && \\\n    git checkout $CRANKSHAFT_VERSION && \\\n    make install && \\\n    # Numpy gets upgraded after scikit-learn is installed\n    # make sure scikit-learn is compatible with currently installed numpy, by reinstalling\n    pip install --force-reinstall --no-cache-dir scikit-learn==0.17.0 && \\\n    cd ..\n\n# Initialize template postgis db\nADD ./template_postgis.sh /tmp/template_postgis.sh\nRUN service postgresql start && /bin/su postgres -c \\\n      /tmp/template_postgis.sh && service postgresql stop\n\nADD ./cartodb_pgsql.sh /tmp/cartodb_pgsql.sh\n\n# Install CartoDB API\nRUN git clone git://github.com/CartoDB/CartoDB-SQL-API.git && \\\n    cd CartoDB-SQL-API && \\\n    git checkout $SQLAPI_VERSION && \\\n    npm install && npm cache clean --force;\n\n# Install Windshaft\nRUN git clone git://github.com/CartoDB/Windshaft-cartodb.git && \\\n    cd Windshaft-cartodb && \\\n    git checkout $WINDSHAFT_VERSION && \\\n    npm install && \\\n    mkdir logs && npm cache clean --force;\n\n# Install CartoDB\nRUN git clone --recursive git://github.com/CartoDB/cartodb.git && \\\n    cd cartodb && \\\n    git checkout $CARTODB_VERSION && \\\n    # Install cartodb extension\n    cd lib/sql && \\\n    PGUSER=postgres make install && \\\n    service postgresql start && /bin/su postgres -c \\\n      /tmp/cartodb_pgsql.sh && service postgresql stop && \\\n    cd - && \\\n    npm install && \\\n    rm -r /tmp/npm-* /root/.npm && \\\n    perl -pi -e 's/gdal==1\\.10\\.0/gdal==2.2.2/' python_requirements.txt && \\\n    pip install --no-cache-dir --no-binary :all: -r python_requirements.txt && \\\n    gem install bundler --version=1.17.3 && gem install compass archive-tar-minitar rack && \\\n    bundle update thin && \\\n    /bin/bash -l -c 'bundle install' && \\\n    cp config/grunt_development.json ./config/grunt_true.json && \\\n    /bin/bash -l -c 'bundle exec grunt' && npm cache clean --force;\n    # && \\\n    #rm -rf .git /root/.cache/pip node_modules\n\n# Geocoder SQL client + server\nRUN git clone https://github.com/CartoDB/data-services.git && \\\n  cd /data-services/geocoder/extension && \\\n  git checkout $DATASERVICES_VERSION && \\\n  PGUSER=postgres make all install && cd / && \\\n  git clone https://github.com/CartoDB/dataservices-api.git && \\\n  cd /dataservices-api/server/extension && \\\n  git checkout $DATAERVICESAPI_VERSION && \\\n  PGUSER=postgres make install && \\\n  cd ../lib/python/cartodb_services && \\\n  pip install --no-cache-dir -r requirements.txt && pip install --no-cache-dir . && \\\n  cd ../../../../client && PGUSER=postgres make install\n\n# Observatory extension\nRUN cd / && git clone --recursive https://github.com/CartoDB/observatory-extension.git && \\\n  cd observatory-extension && \\\n  git checkout $OBSERVATORY_VERSION && \\\n  PGUSER=postgres make deploy\n\n# Copy confs\nADD ./config/CartoDB-dev.js \\\n      /CartoDB-SQL-API/config/environments/development.js\nADD ./config/WS-dev.js \\\n      /Windshaft-cartodb/config/environments/development.js\nADD ./config/app_config.yml /cartodb/config/app_config.yml\nADD ./config/database.yml /cartodb/config/database.yml\nADD ./create_dev_user /cartodb/script/create_dev_user\nADD ./setup_organization.sh /cartodb/script/setup_organization.sh\nADD ./config/cartodb.nginx.proxy.conf /etc/nginx/sites-enabled/default\nADD ./config/varnish.vcl /etc/varnish.vcl\nADD ./geocoder.sh /cartodb/script/geocoder.sh\nADD ./geocoder_server.sql /cartodb/script/geocoder_server.sql\nADD ./fill_geocoder.sh /cartodb/script/fill_geocoder.sh\nADD ./sync_tables_trigger.sh /cartodb/script/sync_tables_trigger.sh\nENV PATH /usr/local/rvm/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin\nRUN mkdir -p /cartodb/log && touch /cartodb/log/users_modifications && \\\n    /opt/varnish/sbin/varnishd -a :6081 -T localhost:6082 -s malloc,256m -f /etc/varnish.vcl && \\\n    perl -pi.bak -e 's/^bind 127.0.0.1 ::1$/bind 0.0.0.0/' /etc/redis/redis.conf && \\\n    service postgresql start && service redis-server start && \\\n    perl -pi -e 's/0\\.22\\.0/0.22.2/' /cartodb/app/models/user/db_service.rb && \\\n\tbash -l -c \"cd /cartodb && bash script/create_dev_user && \\\n    bash script/setup_organization.sh && bash script/geocoder.sh\" && \\\n\tservice postgresql stop && service redis-server stop && \\\n    chmod +x /cartodb/script/fill_geocoder.sh && \\\n    chmod +x /cartodb/script/sync_tables_trigger.sh\n\nEXPOSE 80\n\nENV GDAL_DATA /usr/share/gdal/2.2\n\n# Number of seconds between a sync tables task is run\n# Default interval is an hour, use `docker run -e SYNC_TABLES_INTERVAL=60 ...` to change it\nENV SYNC_TABLES_INTERVAL 3600\n\nADD ./startup.sh /opt/startup.sh\n\nCMD [\"/bin/bash\", \"/opt/startup.sh\"]\nHEALTHCHECK CMD curl -f http://localhost || exit 1\n"
}