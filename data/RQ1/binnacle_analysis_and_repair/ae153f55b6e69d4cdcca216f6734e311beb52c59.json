{
  "startTime": 1674253186289,
  "endTime": 1674253186449,
  "originalSmells": [
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 8,
        "lineEnd": 8,
        "columnStart": 4,
        "columnEnd": 35
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 14,
        "lineEnd": 14,
        "columnStart": 4,
        "columnEnd": 22
      }
    },
    {
      "rule": "gemUpdateSystemRmRootGem",
      "position": {
        "lineStart": 37,
        "lineEnd": 37,
        "columnStart": 7,
        "columnEnd": 26
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# This is a multi-stage Docker build\n\n# Create the downloads collection\nFROM python:3.6-alpine as collection\n\nWORKDIR /source/\n\nCOPY . /source/\nRUN pip install --no-cache-dir -r requirements.txt\n# Validate that what was installed was what was expected\nRUN pip freeze 2>/dev/null | grep -v \"deployer\" > requirements.installed \\\n        && diff -u requirements.txt requirements.installed 1>&2 \\\n        || ( echo \"!! ERROR !! requirements.txt defined different packages or versions for installation\" \\\n                && exit 1 ) 1>&2\nRUN pip install --no-cache-dir flake8\n\nCOPY .flake8 .flake8\nRUN flake8 fetch-downloads.py\n\nRUN python fetch-downloads.py\n\n# Build the HTML from the source\nFROM alpine as html\n\nWORKDIR /source/\n\n# Copy the Gemfiles, so the dependencies can be installed correctly\nCOPY Gemfile Gemfile.lock /source/\n\nRUN apk --no-cache add \\\n        build-base \\\n        ruby \\\n        ruby-bigdecimal \\\n        ruby-dev \\\n        ruby-json \\\n        ruby-rdoc \\\n    && echo \"gem: --no-ri --no-rdoc --no-document\" > ~/.gemrc \\\n    && gem update --system \\\n    && gem install http_parser.rb -v 0.6.0 -- --use-system-libraries \\\n    && gem install safe_yaml -v 1.0.4 -- --use-system-libraries \\\n    && bundle install \\\n    && apk --no-cache del \\\n        build-base \\\n        ruby-dev && rm -rf /root/.gem;\n\nCOPY . /source/\nCOPY --from=collection /source/_downloads /source/_downloads\n\nRUN mkdir /html \\\n    && jekyll build --strict_front_matter -s /source -d /html\n\n# Copy the HTML and serve it via nginx\nFROM nginx:alpine\nCOPY --from=html /html/ /usr/share/nginx/html/\nCOPY nginx.default.conf /etc/nginx/conf.d/default.conf\n"
}