{
  "startTime": 1674243127719,
  "endTime": 1674243128449,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 200,
        "lineEnd": 200,
        "columnStart": 1,
        "columnEnd": 123
      }
    },
    {
      "rule": "mkdirUsrSrcThenRemove",
      "position": {
        "lineStart": 77,
        "lineEnd": 77,
        "columnStart": 1,
        "columnEnd": 19
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 87,
        "lineEnd": 87,
        "columnStart": 1,
        "columnEnd": 25
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "#\n# NOTE: THIS DOCKERFILE IS GENERATED VIA \"update.sh\"\n#\n# PLEASE DO NOT EDIT IT DIRECTLY.\n#\n\nFROM debian:stretch-slim\n\n# prevent Debian's PHP packages from being installed\n# https://github.com/docker-library/php/pull/542\nRUN set -eux; \\\n\t{ \\\n\t\techo 'Package: php*'; \\\n\t\techo 'Pin: release *'; \\\n\t\techo 'Pin-Priority: -1'; \\\n\t} > /etc/apt/preferences.d/no-debian-php\n\n# dependencies required for running \"phpize\"\n# (see persistent deps below)\nENV PHPIZE_DEPS \\\n\t\tautoconf \\\n\t\tdpkg-dev \\\n\t\tfile \\\n\t\tg++ \\\n\t\tgcc \\\n\t\tlibc-dev \\\n\t\tmake \\\n\t\tpkg-config \\\n\t\tre2c\n\n# persistent / runtime deps\nRUN apt-get update && apt-get install -y \\\n\t\t$PHPIZE_DEPS \\\n\t\tca-certificates \\\n\t\tcurl \\\n\t\txz-utils \\\n\t--no-install-recommends && rm -r /var/lib/apt/lists/*\n\nENV PHP_INI_DIR /usr/local/etc/php\nRUN mkdir -p $PHP_INI_DIR/conf.d\n\n##<autogenerated>##\nENV PHP_EXTRA_CONFIGURE_ARGS --enable-fpm --with-fpm-user=www-data --with-fpm-group=www-data\n##</autogenerated>##\n\n# Apply stack smash protection to functions using local buffers and alloca()\n# Make PHP's main executable position-independent (improves ASLR security mechanism, and has no performance impact on x86_64)\n# Enable optimization (-O2)\n# Enable linker optimization (this sorts the hash buckets to improve cache locality, and is non-default)\n# Adds GNU HASH segments to generated executables (this is used if present, and is much faster than sysv hash; in this configuration, sysv hash is also generated)\n# https://github.com/docker-library/php/issues/272\nENV PHP_CFLAGS=\"-fstack-protector-strong -fpic -fpie -O2\"\nENV PHP_CPPFLAGS=\"$PHP_CFLAGS\"\nENV PHP_LDFLAGS=\"-Wl,-O1 -Wl,--hash-style=both -pie\"\n\n#ENV GPG_KEYS 1729F83938DA44E27BA0F4D3DBDB397470D12172 B1B44D8F021E4E2D6021E995DC9FF8D3EE5AF27F\n\n#ENV PHP_VERSION 7.2.5\n#ENV PHP_URL=\"https://secure.php.net/get/php-7.2.5.tar.xz/from/this/mirror\" PHP_ASC_URL=\"https://secure.php.net/get/php-7.2.5.tar.xz.asc/from/this/mirror\"\n#ENV PHP_SHA256=\"af70a33b3f7a51510467199b39af151333fbbe4cc21923bad9c7cf64268cddb2\" PHP_MD5=\"\"\n\nRUN set -xe; \\\n\n\tfetchDeps=' \\\n#\t\twget \\\n\t\tgit \\\n\t'; \\\n\tif ! command -v gpg > /dev/null; then \\\n\t\tfetchDeps=\"$fetchDeps \\\n\t\t\tdirmngr \\\n\t\t\tgnupg \\\n\t\t\"; \\\n\tfi; \\\n\tapt-get update; \\\n\tapt-get install -y --no-install-recommends $fetchDeps; \\\n\trm -rf /var/lib/apt/lists/*; \\\n\n\tmkdir -p /usr/src; rm -rf /usr/src \\\n\tcd /usr/src; \\\n\n#\twget -O php.tar.xz \"$PHP_URL\"; \\\n\tgit clone http://git.php.net/repository/php-src.git php; \\\n\tcd php; \\\n\tgit checkout PHP-7.4; \\\n\t./buildconf --force; \\\n\trm -rf .git; \\\n\tcd /usr/src; \\\n\ttar -cJf php.tar.xz php; rm php.tar.xz \\\n\trm -rf php; \\\n\n#\tif [ -n \"$PHP_SHA256\" ]; then \\\n#\t\techo \"$PHP_SHA256 *php.tar.xz\" | sha256sum -c -; \\\n#\tfi; \\\n#\tif [ -n \"$PHP_MD5\" ]; then \\\n#\t\techo \"$PHP_MD5 *php.tar.xz\" | md5sum -c -; \\\n#\tfi; \\\n#\t\\\n#\tif [ -n \"$PHP_ASC_URL\" ]; then \\\n#\t\twget -O php.tar.xz.asc \"$PHP_ASC_URL\"; \\\n#\t\texport GNUPGHOME=\"$(mktemp -d)\"; \\\n#\t\tfor key in $GPG_KEYS; do \\\n#\t\t\tgpg --keyserver ha.pool.sks-keyservers.net --recv-keys \"$key\"; \\\n#\t\tdone; \\\n#\t\tgpg --batch --verify php.tar.xz.asc php.tar.xz; \\\n#\t\tcommand -v gpgconf > /dev/null && gpgconf --kill all; \\\n#\t\trm -rf \"$GNUPGHOME\"; \\\n#\tfi; \\\n\n\tapt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false $fetchDeps\n\nCOPY data/docker-php-source /usr/local/bin/\n\nRUN set -eux; \\\n\n\tsavedAptMark=\"$(apt-mark showmanual)\"; \\\n\tapt-get update; \\\n\tapt-get install -y --no-install-recommends \\\n\t\tbison \\\n\t\tlibcurl4-openssl-dev \\\n\t\tlibedit-dev \\\n\t\tlibonig-dev \\\n\t\tlibsodium-dev \\\n\t\tlibsqlite3-dev \\\n\t\tlibssl-dev \\\n\t\tlibxml2-dev \\\n\t\tzlib1g-dev \\\n\t\t${PHP_EXTRA_BUILD_DEPS:-} \\\n\t; \\\n\trm -rf /var/lib/apt/lists/*; \\\n# Install latest Argon version from Debian Buser\n\techo \"deb http://deb.debian.org/debian buster main\" > /etc/apt/sources.list.d/debian-buster.list; \\\n\tapt-get update; \\\n\tapt-get install -y --no-install-recommends \\\n\t\tlibargon2-dev \\\n\t; \\\n\trm -rf /var/lib/apt/lists/*; \\\n\trm /etc/apt/sources.list.d/debian-buster.list; \\\n\tapt-get update; \\\n\trm -rf /var/lib/apt/lists/*; \\\n# End of: Install latest Argon version from Debian Buser\n\n\texport \\\n\t\tCFLAGS=\"$PHP_CFLAGS\" \\\n\t\tCPPFLAGS=\"$PHP_CPPFLAGS\" \\\n\t\tLDFLAGS=\"$PHP_LDFLAGS\" \\\n\t; \\\n\tdocker-php-source extract; \\\n\tcd /usr/src/php; \\\n\tgnuArch=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\"; \\\n\tdebMultiarch=\"$(dpkg-architecture --query DEB_BUILD_MULTIARCH)\"; \\\n# https://bugs.php.net/bug.php?id=74125\n\tif [ ! -d /usr/include/curl ]; then \\\n\t\tln -sT \"/usr/include/$debMultiarch/curl\" /usr/local/include/curl; \\\n\tfi; \\\n\t./configure \\\n\t\t--build=\"$gnuArch\" \\\n\t\t--with-config-file-path=\"$PHP_INI_DIR\" \\\n\t\t--with-config-file-scan-dir=\"$PHP_INI_DIR/conf.d\" \\\n\t\t\\\n# make sure invalid --configure-flags are fatal errors intead of just warnings\n\t\t--enable-option-checking=fatal \\\n\t\t\\\n\t\t--disable-cgi \\\n\t\t\\\n# https://github.com/docker-library/php/issues/439\n\t\t--with-mhash \\\n\t\t\\\n# --enable-ftp is included here because ftp_ssl_connect() needs ftp to be compiled statically (see https://github.com/docker-library/php/issues/236)\n\t\t--enable-ftp \\\n# --enable-mbstring is included here because otherwise there's no way to get pecl to use it properly (see https://github.com/docker-library/php/issues/195)\n\t\t--enable-mbstring \\\n# --enable-mysqlnd is included here because it's harder to compile after the fact than extensions are (since it's a plugin for several extensions, not an extension in itself)\n\t\t--enable-mysqlnd \\\n# https://wiki.php.net/rfc/argon2_password_hash (7.2+)\n\t\t--with-password-argon2 \\\n# https://wiki.php.net/rfc/libsodium\n\t\t#--with-sodium=shared \\\n        # TODO: The above resulted in: undefined symbol: sodium_init\n\t\t# https://github.com/docker-library/php/blob/master/7.3/stretch/fpm/Dockerfile#L173\n\t\t--with-sodium \\\n\t\t\\\n\t\t--with-curl \\\n\t\t--with-libedit \\\n\t\t--with-openssl \\\n\t\t--with-zlib \\\n\t\t\\\n# Pear has been disabled by default and therefore pecl won't be available:\n# Branch: PHP-7.4\n# Commit: e93d6d97aab7a5de1f7b8dc750ca9d08214de8c4\n\t\t--with-pear \\\n\t\t\\\n# bundled pcre does not support JIT on s390x\n# https://manpages.debian.org/stretch/libpcre3-dev/pcrejit.3.en.html#AVAILABILITY_OF_JIT_SUPPORT\n\t\t$(test \"$gnuArch\" = 's390x-linux-gnu' && echo '--without-pcre-jit') \\\n\t\t--with-libdir=\"lib/$debMultiarch\" \\\n\t\t\\\n\t\t${PHP_EXTRA_CONFIGURE_ARGS:-} \\\n\t; \\\n\tmake -j \"$(nproc)\"; \\\n# Download PEAR from GitHub to mitigate current hack of pear.php.net\n\tcurl -f https://raw.githubusercontent.com/pear/pearweb_phars/master/install-pear-nozlib.phar > pear/install-pear-nozlib.phar; \\\n\tmake install; \\\n\tfind /usr/local/bin /usr/local/sbin -type f -executable -exec strip --strip-all '{}' + || true; \\\n\tmake clean; \\\n\tcd /; \\\n\tdocker-php-source delete; \\\n\n# reset apt-mark's \"manual\" list so that \"purge --auto-remove\" will remove all build dependencies\n\tapt-mark auto '.*' > /dev/null; \\\n\t[ -z \"$savedAptMark\" ] || apt-mark manual $savedAptMark; \\\n\tfind /usr/local -type f -executable -exec ldd '{}' ';' \\\n\t\t| awk '/=>/ { print $(NF-1) }' \\\n\t\t| sort -u \\\n\t\t| xargs -r dpkg-query --search \\\n\t\t| cut -d: -f1 \\\n\t\t| sort -u \\\n\t\t| xargs -r apt-mark manual \\\n\t; \\\n\tapt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false bison; \\\n\n\tphp --version; \\\n\n# https://github.com/docker-library/php/issues/443\n\tpecl update-channels; \\\n\trm -rf /tmp/pear ~/.pearrc\n\nCOPY data/docker-php-ext-* data/docker-php-entrypoint /usr/local/bin/\n\n# https://github.com/docker-library/php/blob/master/7.3/stretch/fpm/Dockerfile#L221\n# sodium was built as a shared module (so that it can be replaced later if so desired), so let's enable it too (https://github.com/docker-library/php/issues/598)\n# TODO: --with-sodium=shared it results in: undefined symbol: sodium_init\n#RUN docker-php-ext-enable sodium\n\nENTRYPOINT [\"docker-php-entrypoint\"]\n##<autogenerated>##\nWORKDIR /var/www/html\n\nRUN set -ex \\\n\t&& cd /usr/local/etc \\\n\t&& if [ -d php-fpm.d ]; then \\\n\t\t# for some reason, upstream's php-fpm.conf.default has \"include=NONE/etc/php-fpm.d/*.conf\"\n\t\tsed 's!=NONE/!=!g' php-fpm.conf.default | tee php-fpm.conf > /dev/null; \\\n\t\tcp php-fpm.d/www.conf.default php-fpm.d/www.conf; \\\n\telse \\\n\t\t# PHP 5.x doesn't use \"include=\" by default, so we'll create our own simple config that mimics PHP 7+ for consistency\n\t\tmkdir php-fpm.d; \\\n\t\tcp php-fpm.conf.default php-fpm.d/www.conf; \\\n\t\t{ \\\n\t\t\techo '[global]'; \\\n\t\t\techo 'include=etc/php-fpm.d/*.conf'; \\\n\t\t} | tee php-fpm.conf; \\\n\tfi \\\n\t&& { \\\n\t\techo '[global]'; \\\n\t\techo 'error_log = /proc/self/fd/2'; \\\n\t\techo; \\\n\t\techo '[www]'; \\\n\t\techo '; if we send this to /proc/self/fd/1, it never appears'; \\\n\t\techo 'access.log = /proc/self/fd/2'; \\\n\t\techo; \\\n\t\techo 'clear_env = no'; \\\n\t\techo; \\\n\t\techo '; Ensure worker stdout and stderr are sent to the main error log.'; \\\n\t\techo 'catch_workers_output = yes'; \\\n\t} | tee php-fpm.d/docker.conf \\\n\t&& { \\\n\t\techo '[global]'; \\\n\t\techo 'daemonize = no'; \\\n\t\techo; \\\n\t\techo '[www]'; \\\n\t\techo 'listen = 9000'; \\\n\t} | tee php-fpm.d/zz-docker.conf\n\n\n###\n### Verify\n###\nRUN set -x \\\n\t&& php -v | grep -oE 'PHP\\s[.0-9]+' | grep -oE '[.0-9]+' | grep '^7.4' \\\n\t&& /usr/local/sbin/php-fpm --test \\\n\t&& PHP_ERROR=\"$( php -v 2>&1 1>/dev/null )\" \\\n\t&& if [ -n \"${PHP_ERROR}\" ]; then echo \"${PHP_ERROR}\"; false; fi\n\nEXPOSE 9000\nCMD [\"php-fpm\"]\n##</autogenerated>##\n"
}