{
  "startTime": 1674240566115,
  "endTime": 1674240566331,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 57,
        "lineEnd": 57,
        "columnStart": 7,
        "columnEnd": 134
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# the different stages of this Dockerfile are meant to be built into separate images\n# https://docs.docker.com/develop/develop-images/multistage-build/#stop-at-a-specific-build-stage\n# https://docs.docker.com/compose/compose-file/#target\n\nARG PHP_VERSION=7.3\nARG NGINX_VERSION=1.15\nARG VARNISH_VERSION=6.2\n\n\n# \"php\" stage\nFROM php:${PHP_VERSION}-fpm-alpine AS api_platform_php\n\n# persistent / runtime deps\nRUN apk add --no-cache \\\n\t\tacl \\\n\t\tfile \\\n\t\tgettext \\\n\t\tgit \\\n\t\topenssl \\\n\t;\n\nARG APCU_VERSION=5.1.17\nRUN set -eux; \\\n\tapk add --no-cache --virtual .build-deps \\\n\t\t$PHPIZE_DEPS \\\n\t\ticu-dev \\\n\t\tlibzip-dev \\\n\t\tpostgresql-dev \\\n\t\tzlib-dev \\\n\t; \\\n\t\\\n\tdocker-php-ext-configure zip --with-libzip; \\\n\tdocker-php-ext-install -j$(nproc) \\\n\t\tintl \\\n\t\tpdo_pgsql \\\n\t\tzip \\\n\t; \\\n\tpecl install \\\n\t\tapcu-${APCU_VERSION} \\\n\t; \\\n\tpecl clear-cache; \\\n\tdocker-php-ext-enable \\\n\t\tapcu \\\n\t\topcache \\\n\t; \\\n\t\\\n\trunDeps=\"$( \\\n\t\tscanelf --needed --nobanner --format '%n#p' --recursive /usr/local/lib/php/extensions \\\n\t\t\t| tr ',' '\\n' \\\n\t\t\t| sort -u \\\n\t\t\t| awk 'system(\"[ -e /usr/local/lib/\" $1 \" ]\") == 0 { next } { print \"so:\" $1 }' \\\n\t)\"; \\\n\tapk add --no-cache --virtual .api-phpexts-rundeps $runDeps; \\\n\t\\\n\tapk del .build-deps\n\nRUN version=$(php -r \"echo PHP_MAJOR_VERSION.PHP_MINOR_VERSION;\") \\\n    && curl -f -A \"Docker\" -o /tmp/blackfire-probe.tar.gz -D - -L -s https://blackfire.io/api/v1/releases/probe/php/alpine/amd64/$version \\\n    && mkdir -p /tmp/blackfire \\\n    && tar zxpf /tmp/blackfire-probe.tar.gz -C /tmp/blackfire \\\n    && mv /tmp/blackfire/blackfire-*.so $(php -r \"echo ini_get('extension_dir');\")/blackfire.so \\\n    && printf \"extension=blackfire.so\\nblackfire.agent_socket=tcp://blackfire:8707\\n\" > $PHP_INI_DIR/conf.d/blackfire.ini \\\n    && rm -rf /tmp/blackfire /tmp/blackfire-probe.tar.gz\n\nCOPY --from=composer:latest /usr/bin/composer /usr/bin/composer\nCOPY docker/php/php.ini /usr/local/etc/php/php.ini\n\n# https://getcomposer.org/doc/03-cli.md#composer-allow-superuser\nENV COMPOSER_ALLOW_SUPERUSER=1\n# install Symfony Flex globally to speed up download of Composer packages (parallelized prefetching)\nRUN set -eux; \\\n\tcomposer global require \"symfony/flex\" --prefer-dist --no-progress --no-suggest --classmap-authoritative; \\\n\tcomposer clear-cache\nENV PATH=\"${PATH}:/root/.composer/vendor/bin\"\n\nWORKDIR /srv/api\n\n# build for production\nARG APP_ENV=prod\n\n# prevent the reinstallation of vendors at every changes in the source code\nCOPY composer.json composer.lock ./\n# do not use .env files in production\nRUN echo '<?php return [];' > .env.local.php\nRUN set -eux; \\\n\tcomposer install --prefer-dist --no-dev --no-autoloader --no-scripts --no-progress --no-suggest; \\\n\tcomposer clear-cache\n\n# copy only specifically what we need\nCOPY bin bin/\nCOPY config config/\nCOPY public public/\nCOPY src src/\n# only for demo\nCOPY fixtures fixtures/\n\nRUN set -eux; \\\n\tmkdir -p var/cache var/log; \\\n\tcomposer dump-autoload --classmap-authoritative --no-dev; \\\n\tcomposer run-script --no-dev post-install-cmd; \\\n\tchmod +x bin/console; sync\nVOLUME /srv/api/var\n\nCOPY docker/php/docker-entrypoint.sh /usr/local/bin/docker-entrypoint\nRUN chmod +x /usr/local/bin/docker-entrypoint\n\nENTRYPOINT [\"docker-entrypoint\"]\nCMD [\"php-fpm\"]\n\n\n# \"nginx\" stage\n# depends on the \"php\" stage above\nFROM nginx:${NGINX_VERSION}-alpine AS api_platform_nginx\n\nCOPY docker/nginx/conf.d/default.conf /etc/nginx/conf.d/default.conf\n\nWORKDIR /srv/api\n\nCOPY --from=api_platform_php /srv/api/public public/\n\n\n# \"varnish\" stage\n# does not depend on any of the above stages, but placed here to keep everything in one Dockerfile\nFROM cooptilleuls/varnish:${VARNISH_VERSION} AS api_platform_varnish\n\nCOPY docker/varnish/conf/default.vcl /usr/local/etc/varnish/default.vcl\n"
}