{
  "startTime": 1674252026266,
  "endTime": 1674252026749,
  "originalSmells": [
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 98,
        "lineEnd": 98,
        "columnStart": 8,
        "columnEnd": 41
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 104,
        "lineEnd": 104,
        "columnStart": 6,
        "columnEnd": 24
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 108,
        "lineEnd": 108,
        "columnStart": 6,
        "columnEnd": 32
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 106,
        "lineEnd": 106,
        "columnStart": 8,
        "columnEnd": 50
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 114,
        "lineEnd": 114,
        "columnStart": 10,
        "columnEnd": 28
      }
    },
    {
      "rule": "gpgUseBatchFlag",
      "position": {
        "lineStart": 9,
        "lineEnd": 9,
        "columnStart": 4,
        "columnEnd": 64
      }
    },
    {
      "rule": "gpgUseBatchFlag",
      "position": {
        "lineStart": 10,
        "lineEnd": 10,
        "columnStart": 4,
        "columnEnd": 33
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 25,
        "lineEnd": 25,
        "columnStart": 4,
        "columnEnd": 42
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 58,
        "lineEnd": 58,
        "columnStart": 4,
        "columnEnd": 54
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 76,
        "lineEnd": 76,
        "columnStart": 6,
        "columnEnd": 48
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 25,
        "lineEnd": 25,
        "columnStart": 4,
        "columnEnd": 42
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 58,
        "lineEnd": 58,
        "columnStart": 4,
        "columnEnd": 54
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 76,
        "lineEnd": 76,
        "columnStart": 6,
        "columnEnd": 48
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 25,
        "lineEnd": 25,
        "columnStart": 4,
        "columnEnd": 42
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 58,
        "lineEnd": 58,
        "columnStart": 4,
        "columnEnd": 54
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 76,
        "lineEnd": 76,
        "columnStart": 6,
        "columnEnd": 48
      }
    }
  ],
  "repairedSmells": [
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 25,
        "lineEnd": 25,
        "columnStart": 4,
        "columnEnd": 66
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 58,
        "lineEnd": 58,
        "columnStart": 4,
        "columnEnd": 78
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 76,
        "lineEnd": 76,
        "columnStart": 6,
        "columnEnd": 71
      }
    }
  ],
  "repairedDockerfile": "FROM ubuntu:xenial\n\n# This DockerFile is looked after by\nMAINTAINER Tim Greaves <tim.greaves@imperial.ac.uk>\n\n# Add the ubuntu-toolchain-r test ppa\nRUN echo \"deb http://ppa.launchpad.net/ubuntu-toolchain-r/test/ubuntu xenial main\" > /etc/apt/sources.list.d/ubuntu-toolchain-r-ppa-xenial.list\n\n# Import the Launchpad PPA public key\nRUN gpg --batch --keyserver keyserver.ubuntu.com --recv 1E9377A2BA9EF27F\nRUN gpg --batch --export --armor BA9EF27F | apt-key add -\n\n# Ensure UTF-8 environment is correct for documentation builds\nENV LC_ALL=C.UTF-8\nENV LANG=C.UTF-8\n\n# Use bash, not dash, or later conditionals fail\nRUN echo \"dash dash/sh boolean false\" | debconf-set-selections\nRUN DEBIAN_FRONTEND=noninteractive dpkg-reconfigure dash\n\n# Upgrade to the most recent package set\nRUN apt-get update\nRUN apt-get -y dist-upgrade\n\n# Needed for the conda and devito installs later\nRUN apt-get -y --no-install-recommends install wget bzip2 git make && rm -rf /var/lib/apt/lists/*;\n\n# Default gcc version to install\nARG gccVersion=8\nENV DEVITO_ARCH=gcc-$gccVersion\n# Set Yask variables in case they are needed\nENV YC_CXX=g++-$gccVersion\n\n# Default devito install method\nARG installWithPip=false\nENV testWithPip=$installWithPip\n\n# Use a different back-end?\nARG DEVITO_BACKEND=none\nENV DEVITO_BACKEND=$DEVITO_BACKEND\n\n# Use OpenMP?\nARG DEVITO_OPENMP=0\nENV DEVITO_OPENMP=$DEVITO_OPENMP\nENV OMP_NUM_THREADS=2\n\n# Use MPI?\nARG MPI_INSTALL=1\nENV MPI_INSTALL=$MPI_INSTALL\n\n# Run examples?\nARG RUN_EXAMPLES='false'\nENV RUN_EXAMPLES=$RUN_EXAMPLES\n\n# Ensure a non-interactive matplotlib backend\nENV MPLBACKEND=agg\n\n# Install gcc/g++\nRUN apt-get -y --no-install-recommends install gcc-$gccVersion g++-$gccVersion && rm -rf /var/lib/apt/lists/*;\n\n# Set up alternatives\nRUN update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-$gccVersion 10\nRUN update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-$gccVersion 10\nRUN update-alternatives --install /usr/bin/gcov gcov /usr/bin/gcov-$gccVersion 10\nRUN update-alternatives --install /usr/bin/nm nm /usr/bin/gcc-nm-$gccVersion 10\nRUN update-alternatives --install /usr/bin/cpp cpp /usr/bin/cpp-$gccVersion 10\nRUN update-alternatives --install /usr/bin/ranlib ranlib /usr/bin/gcc-ranlib-$gccVersion 10\nRUN if [ -f /usr/bin/gcov-dump-$gccVersion ] ; then \\\n      update-alternatives --install /usr/bin/gcov-dump gcov-dump /usr/bin/gcov-dump-$gccVersion 10 ; \\\n    fi\nRUN if [ -f /usr/bin/gcov-tool-$gccVersion ] ; then \\\n      update-alternatives --install /usr/bin/gcov-tool gcov-tool /usr/bin/gcov-tool-$gccVersion 10 ; \\\n    fi\n\n# Install MPI\nRUN if [ \"$MPI_INSTALL\" == \"1\" ] ; then \\\n      apt-get install --no-install-recommends -y -q mpich libmpich-dev; rm -rf /var/lib/apt/lists/*; \\\n    fi\n\n# Set up conda\nRUN wget --no-verbose https://repo.continuum.io/miniconda/Miniconda3-4.5.4-Linux-x86_64.sh -O /tmp/miniconda.sh\nRUN bash /tmp/miniconda.sh -b -p /usr/local/miniconda\nENV PATH=/usr/local/miniconda/bin:$PATH\nRUN conda config --set always_yes yes --set changeps1 no\nRUN conda update -q conda\n\nRUN adduser --disabled-password --gecos \"\" devito\n\nCOPY . /home/devito\n\nRUN chown -R devito /home/devito\n\nUSER devito\nWORKDIR /home/devito\n\nRUN if [ $installWithPip == \"true\" ] ; then \\\n      python setup.py install --user ; \\\n      if [ $MPI_INSTALL == '1' ] ; then \\\n        pip install --no-cache-dir --user -e .[extras]; \\\n      fi; \\\n    elif \\\n\n\n\n\n      [ $MPI_INSTALL == '1' ] ; then \\\n      conda env create -q -f environment.yml ; \\\n      source activate devito ; \\\n      echo $PATH ; \\\n      pip install --no-cache-dir -e .; \\\n      if [ $MPI_INSTALL == '1' ] ; then \\\n        pip install --no-cache-dir -r requirements-optional.txt; \\\n      fi; \\\n      pip install --no-cache-dir pytest-xdist; \\\n      if [ $DEVITO_BACKEND == \"yask\" ] ; then \\\n        conda install swig ; \\\n        git clone https://github.com/opesci/yask.git /tmp/yask ; \\\n        pushd /tmp/yask ; \\\n          make compiler-api ; \\\n          pip install --no-cache-dir -e .; \\\n        popd ; \\\n      fi; \\\n      if [ $RUN_EXAMPLES == \"true\" ] ; then \\\n        bash scripts/create_ipyparallel_mpi_profile.sh; \\\n      fi ; \\\n    fi\n\nENTRYPOINT /home/devito/azure-pipelines.py\n"
}