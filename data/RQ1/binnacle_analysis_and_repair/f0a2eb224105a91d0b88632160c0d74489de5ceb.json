{
  "startTime": 1674243784366,
  "endTime": 1674243784892,
  "originalSmells": [
    {
      "rule": "sha256sumEchoOneSpaces",
      "position": {
        "lineStart": 129,
        "lineEnd": 129,
        "columnStart": 4,
        "columnEnd": 136
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 56,
        "lineEnd": 76,
        "columnStart": 4,
        "columnEnd": 15
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM nvidia/cuda:9.0-cudnn7-runtime\n\nMAINTAINER K-Lab Authors <service@kesci.com>\n\nUSER root\n\n# Configure environment\nENV CONDA_DIR /opt/conda\nENV PATH $CONDA_DIR/bin:$PATH\nENV SHELL /bin/bash\nENV NB_USER kesci\nENV NB_UID 1000\nENV HOME /home/$NB_USER\nENV LC_ALL en_US.UTF-8\nENV LANG en_US.UTF-8\nENV LANGUAGE en_US.UTF-8\n\n# Install prerequisites\nRUN apt-get update && apt-get -yqq dist-upgrade && \\\n    # Basic utils\n    apt-get install -yqq --no-install-recommends \\\n    build-essential \\\n    cmake \\\n    bzip2 \\\n    ca-certificates \\\n    iptables \\\n    locales \\\n    sudo \\\n    wget \\\n    strace \\\n    # Install all OS dependencies for fully functional notebook server\n    build-essential \\\n    emacs \\\n    git \\\n    inkscape \\\n    jed \\\n    libsm6 \\\n    libxrender1 \\\n    pandoc \\\n    python-dev \\\n    texlive-fonts-extra \\\n    texlive-fonts-recommended \\\n    texlive-generic-recommended \\\n    texlive-latex-base \\\n    texlive-latex-extra \\\n    unzip \\\n    vim \\\n    && \\\n    # Setup locales\n    echo \"en_US.UTF-8 UTF-8\" > /etc/locale.gen && \\\n    locale-gen && \\\n    # Create kesci user with UID=1000 and in the 'users' group\n    useradd -m -s /bin/bash -N -u $NB_UID $NB_USER && \\\n    mkdir -p $CONDA_DIR && \\\n    chown $NB_USER $CONDA_DIR && \\\n    # Python pre-requisites\n    apt-get install --no-install-recommends -yqq \\\n    libfontconfig1 \\\n    libfreetype6-dev \\\n    libglib2.0-0 \\\n    libsm6 \\\n    libxext6 \\\n    libxrender1 \\\n    # Pillow dependencies\n    liblcms2-dev \\\n    libwebp-dev \\\n    zlib1g-dev \\\n    # R pre-requisites\n    ca-certificates \\\n    fonts-dejavu \\\n    gcc \\\n    gfortran \\\n    graphviz \\\n    libxml2-dev \\\n    xz-utils \\\n    libudunits2-dev \\\n    default-jdk && \\\n    apt-get clean && \\\n    rm -rf /var/lib/apt/lists/* && \\\n    echo \"deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic main restricted universe multiverse\\n\\\ndeb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic main restricted universe multiverse\\n\\\ndeb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-updates main restricted universe multiverse\\n\\\ndeb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-updates main restricted universe multiverse\\n\\\ndeb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-backports main restricted universe multiverse\\n\\\ndeb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-backports main restricted universe multiverse\\n\\\ndeb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-security main restricted universe multiverse\\n\\\ndeb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-security main restricted universe multiverse\\n\" > /etc/apt/source.list\n\n# Setup kesci home directory and install conda\nRUN su -m -l $NB_USER -c '\\\n    mkdir /home/$NB_USER/work && \\\n    mkdir /home/$NB_USER/input && \\\n    mkdir /home/$NB_USER/.jupyter && \\\n    echo \"cacert=/etc/ssl/certs/ca-certificates.crt\" > /home/$NB_USER/.curlrc && \\\n    # Install conda as kesci\n    cd /tmp && \\\n    mkdir -p $CONDA_DIR && \\\n    wget https://repo.continuum.io/miniconda/Miniconda3-4.4.10-Linux-x86_64.sh -O Miniconda3-latest-Linux-x86_64.sh && \\\n    sha256sum Miniconda3-latest-Linux-x86_64.sh && \\\n    /bin/bash Miniconda3-latest-Linux-x86_64.sh -f -b -p $CONDA_DIR && \\\n    rm Miniconda3-latest-Linux-x86_64.sh && \\\n    $CONDA_DIR/bin/conda --version && \\\n    $CONDA_DIR/bin/conda config --set show_channel_urls yes && \\\n    $CONDA_DIR/bin/conda config --system --set auto_update_conda false && \\\n    $CONDA_DIR/bin/conda clean -tipsy \\\n    ' && \\\n    echo \"jpeg 9*\" >> /opt/conda/conda-meta/pinned\n\nUSER root\n\nRUN cd /tmp && \\\n    wget https://bootstrap.pypa.io/get-pip.py && \\\n    python2 get-pip.py && \\\n    rm get-pip.py && \\\n    python2 -m pip install ipykernel && \\\n    python2 -m ipykernel install && \\\n    chown $NB_USER /usr/local/bin && \\\n    chown $NB_USER /usr/local/share && \\\n    chown -R $NB_USER /usr/local/lib/python2.7\n\n# Julia dependencies\n# install Julia packages in /opt/julia instead of $HOME\nENV JULIA_DEPOT_PATH=/opt/julia\nENV JULIA_PKGDIR=/opt/julia\nENV JULIA_VERSION=1.0.0\n\nRUN mkdir /opt/julia-${JULIA_VERSION} && \\\n    cd /tmp && \\\n    wget -q https://julialang-s3.julialang.org/bin/linux/x64/`echo ${JULIA_VERSION} | cut -d. -f 1,2`/julia-${JULIA_VERSION}-linux-x86_64.tar.gz && \\\n    echo \"bea4570d7358016d8ed29d2c15787dbefaea3e746c570763e7ad6040f17831f3  *julia-${JULIA_VERSION}-linux-x86_64.tar.gz\" | sha256sum -c - && \\\n    tar xzf julia-${JULIA_VERSION}-linux-x86_64.tar.gz -C /opt/julia-${JULIA_VERSION} --strip-components=1 && \\\n    rm /tmp/julia-${JULIA_VERSION}-linux-x86_64.tar.gz\nRUN ln -fs /opt/julia-*/bin/julia /usr/local/bin/julia\n\n# Show Julia where conda libraries are \\\nRUN mkdir /etc/julia && \\\n    echo \"push!(Libdl.DL_LOAD_PATH, \\\"$CONDA_DIR/lib\\\")\" >> /etc/julia/juliarc.jl && \\\n    # Create JULIA_PKGDIR \\\n    mkdir $JULIA_PKGDIR && \\\n    chown $NB_USER $JULIA_PKGDIR\n\nUSER $NB_USER\n\nRUN echo \"Install R and R basic packages\" && \\\n    conda config --add channels conda-forge && \\\n    conda install -y \\\n    'r-essentials=3.5.1' && \\\n    conda config --add channels ataenzer && \\\n    conda config --add channels jsignell && \\\n    conda config --add channels pjones && \\\n    conda config --add channels omgarcia && \\\n    conda config --add channels cgat && \\\n    conda config --add channels sebp && \\\n    conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/bioconda/ && \\\n    conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/conda-forge/ && \\\n    conda install -y \\\n    'r-tm' \\\n    'r-rcolorbrewer' \\\n    'r-nnet' \\\n    'r-nlp' \\\n    'r-ggmap' \\\n    'r-chron' \\\n    'r-rocr' \\\n    'r-arules' \\\n    && \\\n    echo 'options(\"repos\" = c(CRAN=\"http://cran.us.r-project.org\"))' > ~/.Rprofile && \\\n    R -e \"\\\n    install.packages('choroplethr'); \\\n    install.packages('choroplethrMaps'); \\\n    install.packages('Metrics'); \\\n    install.packages('DescTools'); \\\n    install.packages('tools'); \\\n    install.packages('grid'); \\\n    install.packages('WDI'); \\\n    install.packages('wordcloud'); \\\n    install.packages('wordcloud2'); \\\n    install.packages('xgboost'); \\\n    install.packages('plotly');\" && \\\n    echo 'options(\"repos\" = c(CRAN=\"https://mirrors.tuna.tsinghua.edu.cn/CRAN/\"))' > ~/.Rprofile && \\\n    conda clean -tipsy\n\n# Add Julia packages. Only add HDF5 if this is not a test-only build since\n# it takes roughly half the entire build time of all of the images on Travis\n# to add this one package and often causes Travis to timeout.\n#\n# Install IJulia as jovyan and then move the kernelspec out\n# to the system share location. Avoids problems with runtime UID change not\n# taking effect properly on the .local folder in the jovyan home dir.\nRUN julia -e 'import Pkg; Pkg.update()' && \\\n    (test $TEST_ONLY_BUILD || julia -e 'import Pkg; Pkg.add(\"HDF5\")') && \\\n    julia -e 'import Pkg; Pkg.add(\"Gadfly\")' && \\\n    julia -e 'import Pkg; Pkg.add(\"RDatasets\")' && \\\n    julia -e 'import Pkg; Pkg.add(\"IJulia\")' && \\\n    # Precompile Julia packages \\\n    julia -e 'using IJulia' && \\\n    # move kernelspec out of home \\\n    mkdir -p $CONDA_DIR/share/jupyter/kernels/ && \\\n    mv $HOME/.local/share/jupyter/kernels/julia* $CONDA_DIR/share/jupyter/kernels/ && \\\n    chmod -R go+rx $CONDA_DIR/share/jupyter && \\\n    rm -rf $HOME/.local\n\nUSER root\n\n# Make sure /usr/local/ and conda directories belong to user.\nRUN chown $NB_USER /usr/local/bin && \\\n    chown $NB_USER /usr/local/share && \\\n    chown -R $NB_USER /usr/local/lib && \\\n    chown -R $NB_USER /opt/conda/lib/python3.6/site-packages/ && \\\n    chown -R $NB_USER /usr/local/lib/python2.7/dist-packages/ && \\\n    mkdir -p /home/$NB_USER/.cache && chown $NB_USER -R /home/$NB_USER/.cache && \\\n    rm -rf /root/.cache/pip/* && \\\n    apt-get clean && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/* && \\\n    rm -rf /home/$NB_USER/.cache/matplotlib/ && \\\n    # Allow kesci run sudo apt-get\n    echo \"kesci ALL=NOPASSWD: /usr/bin/apt-get\" > /etc/sudoers.d/kesci && chmod 0400 /etc/sudoers.d/kesci\n\nWORKDIR /home/$NB_USER/work\n"
}