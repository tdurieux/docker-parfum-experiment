{
  "startTime": 1674249250886,
  "endTime": 1674249251267,
  "originalSmells": [
    {
      "rule": "wgetUseHttpsUrl",
      "position": {
        "lineStart": 18,
        "lineEnd": 18,
        "columnStart": 2,
        "columnEnd": 104
      }
    },
    {
      "rule": "wgetUseHttpsUrl",
      "position": {
        "lineStart": 60,
        "lineEnd": 60,
        "columnStart": 2,
        "columnEnd": 82
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 83,
        "lineEnd": 83,
        "columnStart": 4,
        "columnEnd": 29
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 86,
        "lineEnd": 89,
        "columnStart": 4,
        "columnEnd": 10
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 101,
        "lineEnd": 108,
        "columnStart": 4,
        "columnEnd": 9
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 111,
        "lineEnd": 112,
        "columnStart": 4,
        "columnEnd": 14
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 63,
        "lineEnd": 63,
        "columnStart": 2,
        "columnEnd": 40
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 77,
        "lineEnd": 77,
        "columnStart": 2,
        "columnEnd": 33
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 75,
        "lineEnd": 75,
        "columnStart": 2,
        "columnEnd": 34
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 13,
        "lineEnd": 15,
        "columnStart": 22,
        "columnEnd": 6
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 35,
        "lineEnd": 48,
        "columnStart": 22,
        "columnEnd": 12
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 71,
        "lineEnd": 71,
        "columnStart": 4,
        "columnEnd": 42
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 95,
        "lineEnd": 99,
        "columnStart": 4,
        "columnEnd": 5
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 71,
        "lineEnd": 71,
        "columnStart": 4,
        "columnEnd": 42
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 95,
        "lineEnd": 99,
        "columnStart": 4,
        "columnEnd": 5
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 13,
        "lineEnd": 15,
        "columnStart": 22,
        "columnEnd": 6
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 35,
        "lineEnd": 48,
        "columnStart": 22,
        "columnEnd": 12
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 71,
        "lineEnd": 71,
        "columnStart": 4,
        "columnEnd": 42
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 95,
        "lineEnd": 99,
        "columnStart": 4,
        "columnEnd": 5
      }
    }
  ],
  "repairedSmells": [
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 71,
        "lineEnd": 71,
        "columnStart": 4,
        "columnEnd": 66
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 95,
        "lineEnd": 99,
        "columnStart": 4,
        "columnEnd": 5
      }
    }
  ],
  "repairedDockerfile": "FROM ubuntu:14.04\nMAINTAINER caffe-dev <caffe-dev@googlegroups.com>\n\n# A docker container with CUDA and caffe2 installed.\n# Note: this should install everything but cudnn, which requires you to have a\n# manual registration and download from the NVidia website. After creating this\n# docker image, the Caffe2 repository is located at /opt/caffe2. You can install\n# cudnn manually and re-compile caffe2.\n\n################################################################################\n# Step 1: set up cuda on the ubuntu box.\n################################################################################\n\nRUN apt-get update && apt-get install --no-install-recommends -q -y \\\n  build-essential \\\n  wget && rm -rf /var/lib/apt/lists/*;\n\nRUN cd /tmp && \\\n  wget https://developer.download.nvidia.com/compute/cuda/7_0/Prod/local_installers/cuda_7.0.28_linux.run && \\\n  chmod +x cuda_*_linux.run && ./cuda_*_linux.run -extract=`pwd` && \\\n  ./NVIDIA-Linux-x86_64-*.run -s --no-kernel-module && \\\n  ./cuda-linux64-rel-*.run -noprompt && \\\n  rm -rf *\n\n# Ensure the CUDA libs and binaries are in the correct environment variables\nENV LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/usr/local/cuda/lib64\nENV PATH=$PATH:/usr/local/cuda/bin\n\n# Run nvcc to make sure things are set correctly.\nRUN nvcc --version\n\n################################################################################\n# Step 2: set up caffe2 pre-requisites\n################################################################################\n\nRUN apt-get update && apt-get install --no-install-recommends -q -y \\\n  git \\\n  libeigen3-dev \\\n  libgoogle-glog-dev \\\n  libleveldb-dev \\\n  liblmdb-dev \\\n  libopencv-dev \\\n  libprotobuf-dev \\\n  libsnappy-dev \\\n  zlib1g-dev \\\n  libbz2-dev \\\n  protobuf-compiler \\\n  python-dev \\\n  python-pip && rm -rf /var/lib/apt/lists/*;\n\nRUN cd /tmp && \\\n  git clone https://github.com/facebook/rocksdb.git && \\\n  cd /tmp/rocksdb && \\\n  make && make install && \\\n  cd / && \\\n  rm -rf /tmp/rocksdb\n\n# Caffe2 works best with openmpi 1.8.5 or above (which has cuda support).\n# If you do not need openmpi, skip this step.\nRUN cd /tmp && \\\n  wget https://www.open-mpi.org/software/ompi/v1.10/downloads/openmpi-1.10.0.tar.gz && \\\n  tar xzvf openmpi-1.10.0.tar.gz && \\\n  cd /tmp/openmpi-1.10.0 && \\\n  ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --with-cuda --with-threads && \\\n  make && make install && \\\n  cd / && \\\n  rm -rf /tmp/openmpi-1.10.0 && \\\n  rm /tmp/openmpi-1.10.0.tar.gz\n\n# Caffe2 requires zeromq 4.0 or above, manually install.\n# If you do not need zeromq, skip this step.\nRUN apt-get install --no-install-recommends -q -y autoconf libtool && rm -rf /var/lib/apt/lists/*;\nRUN mkdir /tmp/zeromq-build && \\\n  cd /tmp/zeromq-build && \\\n  wget https://github.com/zeromq/zeromq4-1/archive/v4.1.3.tar.gz && \\\n  tar xzvf v4.1.3.tar.gz --strip 1 && \\\n  ./autogen.sh && \\\n  ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --without-libsodium && \\\n  make && make install && \\\n  cd / && \\\n  rm -rf /tmp/zeromq-build && rm v4.1.3.tar.gz\n\n# pip self upgrade\nRUN pip install --no-cache-dir --upgrade pip\n\n# Python dependencies\nRUN pip install --no-cache-dir \\\n  matplotlib \\\n  numpy \\\n  protobuf\n\n################################################################################\n# Step 3: install optional dependencies (\"good to have\" features)\n################################################################################\n\nRUN apt-get install --no-install-recommends -q -y \\\n  gfortran \\\n  graphviz \\\n  libatlas-base-dev \\\n  vim && rm -rf /var/lib/apt/lists/*;\n\nRUN pip install --no-cache-dir \\\n  flask \\\n  ipython \\\n  notebook \\\n  pydot \\\n  python-nvd3 \\\n  scipy \\\n  tornado\n\n# This is intentional. scikit-image has to be after scipy.\nRUN pip install --no-cache-dir \\\n  scikit-image\n\n################################################################################\n# Step 4: set up caffe2\n################################################################################\n\n# Get the repository, and build.\nRUN cd /opt && \\\n  git clone https://github.com/Yangqing/caffe2.git && \\\n  cd /opt/caffe2 && \\\n  make\n\n# Now, we know that some of the caffe tests will fail. How do we deal with\n# those?\n"
}