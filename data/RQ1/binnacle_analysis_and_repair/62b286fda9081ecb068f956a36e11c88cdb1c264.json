{
  "startTime": 1674241704240,
  "endTime": 1674241704993,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 90,
        "lineEnd": 91,
        "columnStart": 7,
        "columnEnd": 73
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 104,
        "lineEnd": 104,
        "columnStart": 7,
        "columnEnd": 94
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 136,
        "lineEnd": 137,
        "columnStart": 7,
        "columnEnd": 74
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 189,
        "lineEnd": 189,
        "columnStart": 7,
        "columnEnd": 123
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 193,
        "lineEnd": 193,
        "columnStart": 4,
        "columnEnd": 41
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 200,
        "lineEnd": 200,
        "columnStart": 7,
        "columnEnd": 34
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 201,
        "lineEnd": 201,
        "columnStart": 7,
        "columnEnd": 25
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 202,
        "lineEnd": 202,
        "columnStart": 7,
        "columnEnd": 32
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 7,
        "lineEnd": 80,
        "columnStart": 7,
        "columnEnd": 19
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM debian:stretch\n\nENV LANG C.UTF-8\nENV LANGUAGE C.UTF-8\nENV LC_ALL C.UTF-8\n\nRUN apt-get update \\\n    && apt-get -y --no-install-recommends install \\\n        curl \\\n        build-essential \\\n        autotools-dev \\\n        automake \\\n        cmake \\\n        pkg-config \\\n        ruby \\\n        ruby-dev \\\n        python-all \\\n        python-pip \\\n        python3-all \\\n        libpython3-dev \\\n        dh-exec \\\n        dh-lua \\\n        liblua5.3-dev \\\n        tclcl-dev \\\n        libaugeas-dev \\\n        libbotan1.10-dev \\\n        libgpgme-dev \\\n        libyajl-dev \\\n        git \\\n        libgit2-dev \\\n        libgtest-dev \\\n        libboost-all-dev \\\n        libssl-dev \\\n        libdbus-1-dev \\\n        libpcre3-dev \\\n        libpcre++-dev \\\n        libglib2.0-dev \\\n        libxerces-c-dev \\\n        qtbase5-dev \\\n        qtdeclarative5-dev \\\n        libmarkdown2-dev \\\n        discount \\\n        swig3.0 \\\n        libuv1-dev \\\n        libev-dev \\\n        libzmq3-dev \\\n        ghc \\\n        ghc-dynamic \\\n        cabal-install \\\n        alex \\\n        happy \\\n        c2hs \\\n        checkinstall \\\n        openjdk-8-jdk \\\n        maven \\\n        gobject-introspection \\\n        libgirepository1.0-dev \\\n        systemd \\\n        libsystemd-dev \\\n        mingw-w64 \\\n        wine \\\n        llvm \\\n        icheck \\\n        devscripts \\\n        lintian \\\n        diffutils \\\n        patch \\\n        patchutils \\\n        git-buildpackage \\\n        reprepro \\\n        doxygen \\\n        graphviz \\\n        gawk \\\n        lcov \\\n        valgrind \\\n        ed \\\n        dnsutils \\\n        virtualenv \\\n        bison \\\n        uuid-dev \\\n        ninja-build \\\n    && rm -rf /var/lib/apt/lists/*\n\nRUN cabal update && cabal install hspec QuickCheck\n\n# Google Test\nENV GTEST_ROOT=/opt/gtest\nARG GTEST_VER=release-1.8.1\nRUN mkdir -p ${GTEST_ROOT} \\\n    && cd /tmp \\\n    && curl -f -o gtest.tar.gz \\\n      -L https://github.com/google/googletest/archive/${GTEST_VER}.tar.gz \\\n    && tar -zxvf gtest.tar.gz --strip-components=1 -C ${GTEST_ROOT} \\\n    && rm gtest.tar.gz\n\n# Handle Java\nRUN echo 'export JAVA_HOME=$(readlink -f /usr/bin/javac | sed \"s:/bin/javac::\")'>> /etc/bash.bashrc\nRUN echo '\\\n/usr/lib/jvm/java-8-openjdk-amd64/jre/lib/amd64/\\n\\\n/usr/lib/jvm/java-8-openjdk-amd64/jre/lib/amd64/server/\\n' > /etc/ld.so.conf.d/jdk.conf\n\n# ANTLR\nARG ANTLR_VERSION=4.7.2\nRUN cd /usr/local/lib \\\n    && curl -f -o antlr.jar -L https://www.antlr.org/download/antlr-${ANTLR_VERSION}-complete.jar \\\n    && cd /usr/local/bin \\\n    && printf '\\\n#!/usr/bin/env sh\\n\\\nCLASSPATH=.:/usr/local/lib/antlr.jar exec java -jar /usr/local/lib/antlr.jar \"$@\"' > antlr4 \\\n    && printf '\\\n#!/usr/bin/env sh\\n\\\njava -classpath .:/usr/local/lib/antlr.jar org.antlr.v4.gui.TestRig \"$@\"' > grun \\\n    && chmod a+x antlr4 grun\n# ANTLR C++ runtime\nRUN cd /tmp \\\n    && git clone --branch ${ANTLR_VERSION} --depth 1 https://github.com/antlr/antlr4.git \\\n    && cd antlr4/runtime/Cpp \\\n    && mkdir build \\\n    && cd build \\\n    && cmake -GNinja -DANTLR_JAR_LOCATION=/usr/local/lib/antlr.jar -DCMAKE_BUILD_TYPE=Release .. \\\n    && ninja \\\n    && ninja install \\\n    && cd /tmp \\\n    && rm -r antlr4\n\n# PEGTL\nARG PEGTL_VERSION=2.7.1\nRUN cd /tmp \\\n    && git clone --branch ${PEGTL_VERSION} --depth 1 https://github.com/taocpp/PEGTL.git \\\n    && cp -R PEGTL/include/tao /usr/local/include \\\n    && rm -rf PEGTL\n\n# YAEP\nARG YAEP_VERSION=550de4cc5600d5f6109c7ebcfbacec51bf80d8d3\nRUN cd /tmp \\\n    && mkdir yaep \\\n    && curl -f -o yaep.tar.gz \\\n       -L https://github.com/vnmakarov/yaep/archive/${YAEP_VERSION}.tar.gz \\\n    && tar -zxvf yaep.tar.gz --strip-components=1 -C yaep \\\n    && cd yaep \\\n    && mkdir build \\\n    && cd build \\\n    && env CFLAGS='-fPIC' CXXFLAGS='-fPIC' cmake -DCMAKE_BUILD_TYPE=Release .. \\\n    && make install \\\n    && cd ../.. \\\n    && rm -r yaep yaep.tar.gz\n\n# yaml-cpp\nRUN cd /tmp \\\n    && git clone --branch yaml-cpp-0.6.2 --depth 1 https://github.com/jbeder/yaml-cpp.git \\\n    && cd yaml-cpp \\\n    && mkdir build \\\n    && cd build \\\n    && cmake -GNinja -DYAML_CPP_BUILD_TESTS=OFF -DBUILD_SHARED_LIBS=ON .. \\\n    && ninja \\\n    && ninja install \\\n    && cd ../.. \\\n    && rm -r yaml-cpp\n\n# Update cache for shared libraries\nRUN ldconfig\n\n# Create User:Group\n# The id is important as jenkins docker agents use the same id that is running\n# on the slaves to execute containers\nARG JENKINS_GROUPID\nRUN groupadd \\\n    -g ${JENKINS_GROUPID} \\\n    -f \\\n    jenkins\n\nARG JENKINS_USERID\nRUN useradd \\\n    --create-home \\\n    --uid ${JENKINS_USERID} \\\n    --gid ${JENKINS_GROUPID} \\\n    --shell \"/bin/bash\" \\\n    jenkins\nUSER ${JENKINS_USERID}\n\nRUN git config --global user.email 'Jenkins <autobuilder@libelektra.org>' \\\n    && git config --global user.name 'Jenkins'\n\n# shfmt\nENV SHFMT_PATH=/home/jenkins/bin\nENV SHFMT_VERSION=v2.6.3\nENV PATH=\"${SHFMT_PATH}:${PATH}\"\nRUN mkdir -p \"${SHFMT_PATH}\" \\\n    && cd \"${SHFMT_PATH}\" \\\n    && curl -f -L \"https://github.com/mvdan/sh/releases/download/${SHFMT_VERSION}/shfmt_${SHFMT_VERSION}_linux_amd64\" -o shfmt \\\n    && chmod a+x shfmt\n\n# cmake-format\nRUN pip install --no-cache-dir cmake-format[yaml]==0.4.5\n\n# Coveralls\nENV COVERALLS_VIRTUALENV_PATH=/home/jenkins/coveralls\nRUN virtualenv \"${COVERALLS_VIRTUALENV_PATH}\" \\\n    && cd \"${COVERALLS_VIRTUALENV_PATH}\" \\\n    && . bin/activate \\\n    && pip install --no-cache-dir \"urllib3==1.22\" \\\n    && pip install --no-cache-dir pyyaml \\\n    && pip install --no-cache-dir cpp-coveralls \\\n    && deactivate\nENV PATH=\"${PATH}:${COVERALLS_VIRTUALENV_PATH}/bin\"\n\n# Handle Haskell dependencies\nENV HASKELL_SHARED_SANDBOX /home/jenkins/elektra-cabal-sandbox\nRUN mkdir -p $HASKELL_SHARED_SANDBOX \\\n    && cd $HASKELL_SHARED_SANDBOX \\\n    && cabal update \\\n    && cabal sandbox init \\\n    && cabal install 'base >=4.9 && <4.12' 'containers >=0.5 && <0.6' \\\n        'directory >=1.2 && <1.4' 'process >=1.4 && <1.7' 'binary >=0.8 && <0.9' \\\n        'haskell-src-exts-any' 'pretty -any' 'hint >=0.7.0 && <0.8.0' 'temporary -any' \\\n        'exceptions -any' 'text -any' 'simple-logger -any' 'megaparsec -any' \\\n        'hspec -any' 'QuickCheck-any' --avoid-reinstalls\n# Workaround for issue [#2139](http://issues.libelektra.org/2139)\nRUN mkdir -p /home/jenkins/.cabal/lib\n"
}