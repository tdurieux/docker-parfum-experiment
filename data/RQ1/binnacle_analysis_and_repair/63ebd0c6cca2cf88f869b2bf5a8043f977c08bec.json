{
  "startTime": 1674240231666,
  "endTime": 1674240231872,
  "originalSmells": [
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 42,
        "lineEnd": 42,
        "columnStart": 5,
        "columnEnd": 50
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 39,
        "lineEnd": 39,
        "columnStart": 4,
        "columnEnd": 33
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 39,
        "lineEnd": 39,
        "columnStart": 4,
        "columnEnd": 33
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 7,
        "lineEnd": 22,
        "columnStart": 5,
        "columnEnd": 19
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 39,
        "lineEnd": 39,
        "columnStart": 4,
        "columnEnd": 33
      }
    }
  ],
  "repairedSmells": [
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 39,
        "lineEnd": 39,
        "columnStart": 4,
        "columnEnd": 57
      }
    }
  ],
  "repairedDockerfile": "FROM ubuntu:18.04\n\nARG OPENTRACING_CPP_VERSION=v1.5.1\nARG NGINX_VERSION=1.13.12\n\nRUN set -x \\\n  && apt-get update \\\n  && apt-get install --no-install-recommends --no-install-suggests -y \\\n              build-essential \\\n              gettext \\\n              cmake \\\n              git \\\n              gnupg2 \\\n              software-properties-common \\\n              curl \\\n              python3 \\\n              jq \\\n              ca-certificates \\\n              wget \\\n              libpcre3 libpcre3-dev \\\n              zlib1g-dev \\\n              gcc-8 \\\n              g++-8 \\\n### Use gcc-8 (the default gcc has this problem when using with address sanitizer:\n### https://gcc.gnu.org/bugzilla/show_bug.cgi?id=84428) \\\n  && update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-8 800 --slave /usr/bin/g++ g++ /usr/bin/g++-8 && rm -rf /var/lib/apt/lists/*;\n\n### Build opentracing-cpp\nRUN cd / \\\n  && git clone -b $OPENTRACING_CPP_VERSION https://github.com/opentracing/opentracing-cpp.git \\\n  && cd opentracing-cpp \\\n  && mkdir .build && cd .build \\\n  && cmake -DCMAKE_BUILD_TYPE=Debug \\\n           -DBUILD_TESTING=OFF .. \\\n  && make && make install\n\nCOPY ./opentracing /opentracing\n\n### Build nginx\nRUN apt-get install --no-install-recommends -y libssl-dev && rm -rf /var/lib/apt/lists/*;\nRUN cd / \\\n  && wget -O nginx-release-${NGINX_VERSION}.tar.gz https://github.com/nginx/nginx/archive/release-${NGINX_VERSION}.tar.gz \\\n  && tar zxf nginx-release-${NGINX_VERSION}.tar.gz \\\n  && cd /nginx-release-${NGINX_VERSION} \\\n  # Temporarily disable leak sanitizer to get around false positives in build\n  && export ASAN_OPTIONS=detect_leaks=0 \\\n  && export CFLAGS=\"-Wno-error\" \\\n  && auto/configure \\\n      --with-http_auth_request_module \\\n      --with-compat \\\n      --with-debug \\\n      # enables grpc\n      --with-http_v2_module \\\n      --add-dynamic-module=/opentracing \\\n  && make && make install && rm nginx-release-${NGINX_VERSION}.tar.gz\n\nCMD [\"/usr/local/nginx/sbin/nginx\", \"-g\", \"daemon off;\"]\n"
}