{
  "startTime": 1674236508614,
  "endTime": 1674236508856,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 84,
        "lineEnd": 84,
        "columnStart": 4,
        "columnEnd": 40
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 134,
        "lineEnd": 134,
        "columnStart": 4,
        "columnEnd": 42
      }
    },
    {
      "rule": "wgetUseHttpsUrl",
      "position": {
        "lineStart": 108,
        "lineEnd": 108,
        "columnStart": 22,
        "columnEnd": 83
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 111,
        "lineEnd": 111,
        "columnStart": 4,
        "columnEnd": 55
      }
    },
    {
      "rule": "yumInstallRmVarCacheYum",
      "position": {
        "lineStart": 67,
        "lineEnd": 67,
        "columnStart": 4,
        "columnEnd": 46
      }
    },
    {
      "rule": "yumInstallRmVarCacheYum",
      "position": {
        "lineStart": 69,
        "lineEnd": 82,
        "columnStart": 4,
        "columnEnd": 44
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 109,
        "lineEnd": 109,
        "columnStart": 22,
        "columnEnd": 46
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# This file was generated! Edits made directly to this file may be lost.\n#\nARG CUDA_VERSION=10.0\nARG CUDA_SHORT_VERSION=${CUDA_VERSION}\nARG CUDA_MAJORMINOR_VERSION=${CUDA_VERSION}\nARG LINUX_VERSION=centos7\nFROM nvidia/cuda:${CUDA_VERSION}-devel-${LINUX_VERSION}\n\nARG CUDA_SHORT_VERSION\nARG CUDA_MAJORMINOR_VERSION\n\nARG ARROW_CPP_VERSION=0.12.1\nARG CC_VERSION=7\nARG CXX_VERSION=7\nARG CFFI_VERSION=1.11.5\nARG CMAKE_VERSION=3.12.4\nARG CYTHON_VERSION=0.29.*\nARG DASK_VERSION=1.1.1\nARG DISTRIBUTED_VERSION=1.25.3\nARG FAISSGPU_VERSION=1.5.0\nARG HASH_JOIN=ON\nARG IPYTHON_VERSION=7.3*\nARG LIBGCC_NG_VERSION=7.3.0\nARG LIBGFORTRAIN_NG_VERSION=7.3.0\nARG LIBSTDCXX_NG_VERSION=7.3.0\nARG MINICONDA_URL=https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh\nARG NUMBA_VERSION=0.41\nARG NUMPY_VERSION=1.16.2\nARG NVIDIA_CONDA_LABEL=nvidia/label/cuda${CUDA_MAJORMINOR_VERSION}\nARG RAPIDSAI_CONDA_LABEL=rapidsai/label/cuda${CUDA_MAJORMINOR_VERSION}\nARG RMM_VERSION=0.7.*\nARG PANDAS_VERSION=0.23.4\nARG PYARROW_VERSION=0.12.1\nARG PYTHON_VERSION=3.6\nARG SCIPY_VERSION=1.2.1\nARG SKLEARN_VERSION=0.20.3\nARG TINI_URL=https://github.com/krallin/tini/releases/download/v0.18.0/tini\nARG NUM_BUILD_CPUS=\"\"\nARG UTILS_DIR=utils\nARG SUPPORT_FILES_DIR=supportfiles\nARG RAPIDS_SRC_DIR=/rapids\n\n# Add /usr/local/cuda/* temporarily to LD_LIBRARY_PATH to support various build steps\n# This will need to be removed later since it causes problems with certain runtime libs (numba.cuda)\nENV LD_LIBRARY_PATH_POSTBUILD=$LD_LIBRARY_PATH\nENV LD_LIBRARY_PATH=$LD_LIBRARY_PATH_POSTBUILD:/usr/local/cuda/lib64:/usr/local/cuda/lib64/stubs\nENV NUMBAPRO_NVVM=/usr/local/cuda/nvvm/lib64/libnvvm.so\nENV NUMBAPRO_LIBDEVICE=/usr/local/cuda/nvvm/libdevice\nENV PATH=$PATH:/conda/bin\nENV CUDA_VERSION=${CUDA_MAJORMINOR_VERSION}\n\n# devtoolset-7 ENV vars\n# devtoolset-7-* packages will need to be seen first, update PATH accordingly\n# NOTE: These are commented out since gcc is being built from source\n#   If devtoolset-7 is used, uncomment these vars.\n# ENV PATH=/opt/rh/devtoolset-7/root/usr/bin:$PATH:/conda/bin\n# ENV CC=/opt/rh/devtoolset-7/root/usr/bin/gcc\n# ENV CXX=/opt/rh/devtoolset-7/root/usr/bin/g++\n# ENV CUDAHOSTCXX=/opt/rh/devtoolset-7/root/usr/bin/g++\nRUN mkdir -p ${RAPIDS_SRC_DIR}/tmp\n#\n# The support dir contains RPMs that enable additional repos needed\n# for CentOS (among other things). Copy them to a temp dir and remove\n# after installed.\n#\nCOPY ${SUPPORT_FILES_DIR}/*.rpm ${RAPIDS_SRC_DIR}/tmp\n\nRUN yum install -y ${RAPIDS_SRC_DIR}/tmp/*.rpm && \\\n    yum upgrade -y && \\\n    yum install -y \\\n      bzip2 \\\n      curl \\\n      git \\\n      screen \\\n      vim \\\n      wget \\\n      which \\\n      clang \\\n      make \\\n      libnccl-2.4.2-1+cuda${CUDA_MAJORMINOR_VERSION} \\\n      libnccl-devel-2.4.2-1+cuda${CUDA_MAJORMINOR_VERSION} \\\n      libnccl-static-2.4.2-1+cuda${CUDA_MAJORMINOR_VERSION} \\\n      gmp-devel mpfr-devel libmpc-devel file && rm -rf /var/cache/yum\n\nRUN curl -f -L ${TINI_URL} -o /usr/bin/tini && \\\n    chmod +x /usr/bin/tini\n\nRUN rm -rf ${RAPIDS_SRC_DIR}/tmp\n# NOTE: Copying a pre-built gcc7 could be an option to avoid the\n# expensive build step.\n### COPY gcc7 ${GCC7_DIR}\n\n# Build gcc 7 and set the environment to use it\n# NOTE: this step requires packages gmp-devel, mpfr-devel,\n# libmpc-devel, and file (see above)\n\n# NOTE: Q: What about devtoolset-7? Will that work instead?\n#       A: Not quite:\n#          https://stackoverflow.com/questions/49393888/how-can-i-use-the-new-c-11-abi-with-devtoolset-7-on-centos-rhel\n#          (tl;dr: devtoolset-7 does not support the new cxx11 ABI since it\n#          conflicts with CentOS sys libs.)\n#          Rapids will use new new ABI for its binaries, including its own\n#          libstdc++, and the rest of CentOS will continue to use the\n#          system default libs.\n\nARG GCC7_DIR=${RAPIDS_SRC_DIR}/gcc7\n\nRUN mkdir -p ${GCC7_DIR}\nRUN cd ${GCC7_DIR} && wget -q https://ftp.gnu.org/gnu/gcc/gcc-7.2.0/gcc-7.2.0.tar.gz\nRUN cd ${GCC7_DIR} && tar zxf gcc-7.2.0.tar.gz && rm gcc-7.2.0.tar.gz\nRUN cd ${GCC7_DIR}/gcc-7.2.0 && \\\n    ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --prefix=${GCC7_DIR} --disable-multilib && \\\n    make -j${NUM_BUILD_CPUS} && make install\n\n# Remove gcc source dir and tarfile\nRUN rm -r ${GCC7_DIR}/gcc-7.2.0 ${GCC7_DIR}/gcc-7.2.0.tar.gz\n\n# Update environment to use new gcc7\nENV CC=${GCC7_DIR}/bin/gcc\nENV CXX=${GCC7_DIR}/bin/g++\nENV PATH=${GCC7_DIR}/bin:$PATH\nENV CUDAHOSTCXX=${GCC7_DIR}/bin/g++\n\n# Update the current LD_LIBRARY_PATH with the new lib64 dir for\n# remaining build steps and LD_LIBRARY_PATH_POSTBUILD for runtime use\n# after building the container.\nENV LD_LIBRARY_PATH=${GCC7_DIR}/lib64:$LD_LIBRARY_PATH\nENV LD_LIBRARY_PATH_POSTBUILD=${GCC7_DIR}/lib64:$LD_LIBRARY_PATH_POSTBUILD\n\n# NOTE: Many/all of the package versions used below are defined in the\n# \"args\" insertfile\n\n# Install conda\n## Build combined libgdf/pygdf conda env\nRUN curl -f ${MINICONDA_URL} -o /miniconda.sh && \\\n    sh /miniconda.sh -b -p /conda && \\\n    rm -f /miniconda.sh && \\\n    conda update -y -n base -c conda-forge conda\n\nADD .condarc-cuda${CUDA_SHORT_VERSION} /conda/.condarc\n\nRUN conda create --no-default-packages -n gdf \\\n      python=${PYTHON_VERSION} \\\n      anaconda-client \\\n      arrow-cpp=${ARROW_CPP_VERSION} \\\n      cmake=${CMAKE_VERSION} \\\n      cmake_setuptools \\\n      conda-build \\\n      conda-verify \\\n      cffi=${CFFI_VERSION} \\\n      cmake=${CMAKE_VERSION} \\\n      cython=${CYTHON_VERSION} \\\n      flake8 \\\n      make \\\n      numba>=${NUMBA_VERSION} \\\n      numpy=${NUMPY_VERSION} \\\n      pandas=${PANDAS_VERSION} \\\n      pyarrow=${PYARROW_VERSION} \\\n      pytest \\\n      pytest-cov \\\n      scikit-learn=${SKLEARN_VERSION} \\\n      scipy=${SCIPY_VERSION} \\\n      conda-forge::blas=1.1=openblas \\\n      libgcc-ng=${LIBGCC_NG_VERSION} \\\n      libgfortran-ng=${LIBGFORTRAIN_NG_VERSION} \\\n      libstdcxx-ng=${LIBSTDCXX_NG_VERSION} \\\n    && conda clean -a && \\\n    chmod 777 -R /conda\n\n# Enables \"source activate conda\"\nSHELL [\"/bin/bash\", \"-c\"]\n\n\n# Change LD_LIBRARY_PATH to the _POSTBUILD version (plus CONDA_PREFIX)\n# in order to exclude /usr/local/cuda/* since numba.cuda cannot load\n# those libs\nENV LD_LIBRARY_PATH=$LD_LIBRARY_PATH_POSTBUILD:$CONDA_PREFIX\n\n\nENTRYPOINT [ \"/usr/bin/tini\", \"--\" ]\nCMD [ \"/bin/bash\" ]\n"
}