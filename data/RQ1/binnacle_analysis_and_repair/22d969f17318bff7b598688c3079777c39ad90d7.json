{
  "startTime": 1674242632924,
  "endTime": 1674242633834,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 38,
        "lineEnd": 38,
        "columnStart": 4,
        "columnEnd": 50
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 83,
        "lineEnd": 83,
        "columnStart": 4,
        "columnEnd": 45
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 8,
        "lineEnd": 8,
        "columnStart": 4,
        "columnEnd": 49
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 11,
        "lineEnd": 36,
        "columnStart": 4,
        "columnEnd": 11
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 40,
        "lineEnd": 40,
        "columnStart": 4,
        "columnEnd": 29
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 43,
        "lineEnd": 65,
        "columnStart": 3,
        "columnEnd": 12
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 43,
        "lineEnd": 65,
        "columnStart": 3,
        "columnEnd": 12
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 8,
        "lineEnd": 8,
        "columnStart": 4,
        "columnEnd": 49
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 11,
        "lineEnd": 36,
        "columnStart": 4,
        "columnEnd": 11
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 40,
        "lineEnd": 40,
        "columnStart": 4,
        "columnEnd": 29
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 43,
        "lineEnd": 65,
        "columnStart": 3,
        "columnEnd": 12
      }
    }
  ],
  "repairedSmells": [
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 43,
        "lineEnd": 65,
        "columnStart": 3,
        "columnEnd": 12
      }
    }
  ],
  "repairedDockerfile": "FROM lablup/common-tensorflow:1.13-py36-cuda9 as tf-binary\n# import python-binary\nFROM lablup/kernel-base:python3.6 as python-binary\n\nFROM nvidia/cuda:9.0-cudnn7-runtime-ubuntu16.04\nMAINTAINER Mario Cho \"m.cho@lablup.com\"\n\nRUN apt-get update -y && \\\n    apt-get install --no-install-recommends -y software-properties-common && \\\n    add-apt-repository -y \"deb http://security.ubuntu.com/ubuntu xenial-security main\" && \\\n    apt-get update -y && \\\n    apt-get install --no-install-recommends -y \\\n        ca-certificates \\\n        gcc g++ make \\\n\tgfortran \\\n\tvim \\\n\tcmake \\\n\tyasm \\\n\tpkg-config \\\n        xz-utils \\\n        wget curl git-core \\\n        vim-tiny zip unzip \\\n        libssl-dev \\\n        libmpdec2 \\\n        proj-bin libproj-dev \\\n        libgeos-dev libgeos++-dev \\\n        mime-support \\\n        libpq-dev \\\n\tlibjasper-dev \\\n        libtiff-dev \\\n        libjpeg-dev \\\n        libpng-dev \\\n\tlibavcodec-dev \\\n        libavformat-dev \\\n\tlibswscale-dev \\\n\tlibxine2-dev \\\n\tlibv4l-dev && rm -rf /var/lib/apt/lists/*;\n\nRUN curl -f -sL https://deb.nodesource.com/setup_10.x | bash - && \\\n    apt-get update -y && \\\n    apt-get install --no-install-recommends -y nodejs && rm -rf /var/lib/apt/lists/*;\n\nRUN ln -s /usr/include/libv4l1-videodev.h /usr/include/linux/videodev.h && \\\n   apt-get install --no-install-recommends -y \\\n\tlibgstreamer1.0-dev \\\n\tlibgstreamer-plugins-base1.0-dev \\\n\tlibgtk-3-dev \\\n        libtbb-dev \\\n\tlibatlas-base-dev \\\n\tlibdc1394-22-dev \\\n\tlibxvidcore-dev \\\n\tlibfaac-dev \\\n\tlibmp3lame-dev \\\n\tlibtheora-dev \\\n\tlibvorbis-dev \\\n\tlibxvidcore-dev \\\n\tlibopencore-amrnb-dev libopencore-amrwb-dev \\\n\tlibavresample-dev \\\n\tx264 \\\n\tlibx264-dev \\\n\tv4l-utils \\\n\tlibprotobuf-dev protobuf-compiler \\\n\tlibgoogle-glog-dev libgflags-dev \\\n\tlibgphoto2-dev \\\n\tlibeigen3-dev \\\n\tlibhdf5-dev \\\n    && \\\n    apt-get clean && \\\n    rm -rf /var/lib/apt/lists/ && rm -rf /var/lib/apt/lists/*;\n\nENV PYTHONUNBUFFERED=1 \\\n    LD_LIBRARY_PATH=\"/usr/local/cuda/lib64:/usr/local/nvidia/lib64\" \\\n    PATH=\"/usr/local/nvidia/bin:/usr/local/cuda/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin\" \\\n    LANG=C.UTF-8\n\n# Install CUDA-9.0 + cuDNN 7.6\nRUN ln -s /usr/local/cuda-9.0 /usr/local/cuda && \\\n    ln -s /usr/lib/x86_64-linux-gnu/libcudnn.so.7.6.0 /usr/local/cuda/lib64/libcudnn.so && \\\n    ldconfig\n\nCOPY --from=python-binary /python.tar.gz /\nRUN cd /; tar xzpf python.tar.gz; rm python.tar.gz; ldconfig\n\nRUN curl -f https://bootstrap.pypa.io/get-pip.py | python3 && \\\n    python3 -m pip install --no-cache-dir -U setuptools && \\\n    python3 -m pip install --no-cache-dir wheel && \\\n    python3 -m pip install --no-cache-dir h5py && \\\n    python3 -m pip install --no-cache-dir Cython && \\\n    python3 -m pip install --no-cache-dir requests && \\\n    python3 -m pip install --no-cache-dir numpy scipy && \\\n    python3 -m pip install --no-cache-dir pyzmq simplejson msgpack-python uvloop && \\\n    python3 -m pip install --no-cache-dir aiozmq dataclasses tabulate && \\\n    python3 -m pip install --no-cache-dir namedlist six \"python-dateutil>=2\" && \\\n    python3 -m pip install --no-cache-dir versioneer==0.17 && \\\n    python3 -m pip install --no-cache-dir pyproj Cartopy==0.16 && \\\n    python3 -m pip install --no-cache-dir matplotlib bokeh && \\\n    python3 -m pip install --no-cache-dir pandas && \\\n    python3 -m pip install --no-cache-dir seaborn && \\\n    python3 -m pip install --no-cache-dir networkx cvxpy && \\\n    python3 -m pip install --no-cache-dir scikit-learn scikit-image && \\\n    python3 -m pip install --no-cache-dir pygments && \\\n    python3 -m pip install --no-cache-dir future && \\\n    python3 -m pip install --no-cache-dir tensorwatch\n\nWORKDIR /tmp\nENV OPENCV_VERSION=\"4.1.0\"\n\nRUN wget https://github.com/opencv/opencv/archive/${OPENCV_VERSION}.zip && \\\n    wget -O opencv-contrib.zip https://github.com/opencv/opencv_contrib/archive/${OPENCV_VERSION}.zip && \\\n    unzip ${OPENCV_VERSION}.zip && \\\n    unzip opencv-contrib.zip && \\\n    mkdir opencv-${OPENCV_VERSION}/cmake_binary && \\\n    cd opencv-${OPENCV_VERSION}/cmake_binary && \\\n    cmake \\\n      -DCMAKE_BUILD_TYPE=RELEASE \\\n      -D BUILD_TIFF=ON \\\n      -D BUILD_opencv_java=OFF \\\n      -D WITH_CUDA=ON \\\n      -D CUDA_NVCC_FLAGS=--expt-relaxed-constexpr \\\n      -D CUDA_TOOLKIT_ROOT_DIR=/usr/local/cuda-9.2 \\\n      -D ENABLE_FAST_MATH=1 \\\n      -D CUDA_FAST_MATH=1 \\\n      -D WITH_CUBLAS=1 \\\n      -D WITH_OPENGL=ON \\\n      -D WITH_OPENCL=ON \\\n      -D WITH_IPP=ON \\\n      -D WITH_TBB=ON \\\n      -D WITH_EIGEN=ON \\\n      -D WITH_V4L=ON \\\n      -D BUILD_TESTS=OFF \\\n      -D BUILD_PERF_TESTS=OFF \\\n      -D OPENCV_EXTRA_MODULES_PATH=\"../../opencv_contrib-4.1.0/modules\" \\\n      -D CMAKE_BUILD_TYPE=RELEASE \\\n      -D CMAKE_INSTALL_PREFIX=$(python3 -c \"import sys; print(sys.prefix)\") \\\n      -D PYTHON_EXECUTABLE=$(which python3) \\\n      -D PYTHON_INCLUDE_DIR=$(python3 -c \"from distutils.sysconfig import get_python_inc; print(get_python_inc())\") \\\n      -D PYTHON_PACKAGES_PATH=$(python3 -c \"from distutils.sysconfig import get_python_lib; print(get_python_lib())\") \\\n      .. 2>&1 | tee cmake_messages.txt && \\\n    make -j${nproc} && \\\n    make install && \\\n    cd /tmp && \\\n    rm -fr opencv*\n\nCOPY --from=tf-binary /tmp/tensorflow_pkg/tensorflow-*.whl /tmp\n\n\n# Jupyter notebook extension\nRUN mkdir -p /home/work/.jupyter/nbextension\nWORKDIR /home/work/.jupyter/nbextension\n\nRUN python3 -m pip install --no-cache-dir opencv-python && \\\n    python3 -m pip install --no-cache-dir wheel /tmp/*.whl && \\\n    python3 -m pip install --no-cache-dir jupyter && \\\n    python3 -m pip install --no-cache-dir keras && \\\n    python3 -m pip install --no-cache-dir keras_applications && \\\n    python3 -m pip install --no-cache-dir keras_preprocessing && \\\n    python3 -m pip install --no-cache-dir ipython && \\\n    python3 -m pip install --no-cache-dir ipywidgets && \\\n    python3 -m pip install --no-cache-dir ipyparallel && \\\n    python3 -m pip install --no-cache-dir jupyterlab && \\\n    python3 -m pip install --no-cache-dir jupyterthemes && \\    \n    python3 -m pip install --no-cache-dir jupyter-js-widgets-nbextension && \\\n    python3 -m pip install --no-cache-dir jupyter_contrib_nbextensions && \\\n    python3 -m pip install --no-cache-dir jupyter_nbextensions_configurator && \\\n    python3 -m pip install --no-cache-dir tf2onnx && \\\n    rm -rf /root/.cache && \\\n    rm -f /tmp/*.whl\n\n# python alternative support\nRUN update-alternatives --install /usr/bin/python python /usr/bin/python3 2\n\nRUN jupyter nbextensions_configurator enable && \\\n    jupyter contrib nbextension install && \\\n    jupyter nbextension enable --py --sys-prefix widgetsnbextension && \\\n    jupyter contrib nbextension install && \\\n    jupyter serverextension enable --py jupyterlab --sys-prefix && \\\n    jupyter labextension install @jupyter-widgets/jupyterlab-manager && \\\n    git clone https://github.com/lambdalisue/jupyter-vim-binding vim_binding && \\\n    jupyter nbextension enable /home/work/.jupyter/nbextension/vim_binding/vim_binding\n\n# Install ipython kernelspec\nRUN python3 -m ipykernel install --display-name \"TensorFlow 1.13 on Python 3.6 (CUDA 9.0)\" && \\\n    cat /usr/local/share/jupyter/kernels/python3/kernel.json\n\n# for apt-get installation using /tmp\nRUN mkdir -p /tmp && \\\n    chown root:root /tmp && \\\n    chmod 1777 /tmp\n\n\n# Install Jupyter notebook logo\nRUN mkdir -p /home/work/.jupyter/custom\nCOPY custom.css /home/work/.jupyter/custom/custom.css\nCOPY logo.svg /home/work/.jupyter/custom/logo.svg\n\n# Backend.AI specifics\nLABEL ai.backend.kernelspec=\"1\" \\\n      ai.backend.envs.corecount=\"OPENBLAS_NUM_THREADS,OMP_NUM_THREADS,NPROC\" \\\n      ai.backend.features=\"batch query uid-match user-input\" \\\n      ai.backend.base-distro=\"ubuntu16.04\" \\\n      ai.backend.resource.min.cpu=\"1\" \\\n      ai.backend.resource.min.mem=\"1g\" \\\n      ai.backend.resource.min.cuda.device=1 \\\n      ai.backend.resource.min.cuda.shares=0.1 \\\n      ai.backend.runtime-type=\"python\" \\\n      ai.backend.runtime-path=\"/usr/local/bin/python\" \\\n      ai.backend.service-ports=\"ipython:pty:3000,jupyter:http:8080,jupyterlab:http:8090\"\n\nCOPY policy.yml /etc/backend.ai/jail/policy.yml\n\n# vim: ft=dockerfile"
}