{
  "startTime": 1674243385132,
  "endTime": 1674243385545,
  "originalSmells": [
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 99,
        "lineEnd": 99,
        "columnStart": 5,
        "columnEnd": 37
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 106,
        "lineEnd": 106,
        "columnStart": 5,
        "columnEnd": 24
      }
    },
    {
      "rule": "gpgUseBatchFlag",
      "position": {
        "lineStart": 86,
        "lineEnd": 86,
        "columnStart": 4,
        "columnEnd": 84
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM alpine:3.9\n\n# LABEL maintainer=\"NGINX Docker Maintainers <docker-maint@nginx.com>\"\nLABEL maintainer=\"Bohan Yang (Brent) <youthdna@live.com>\"\n\nARG NGINX_VERSION='1.14.2'\nARG GOOGLE_FILTER_MODULE_VERSION='5806afeffe0a773f70f6aa8ef509b9f118ef6c2c'\nARG SUBSTITUTIONS_FILTER_MODULE_VERSION='bc58cb11844bc42735bbaef7085ea86ace46d05b'\n\nRUN GPG_KEYS=B0F4253373F8F6F510D42178520A9993A1C052F8 \\\n  && CONFIG=\"\\\n    --prefix=/etc/nginx \\\n    --sbin-path=/usr/sbin/nginx \\\n    --modules-path=/usr/lib/nginx/modules \\\n    --conf-path=/etc/nginx/nginx.conf \\\n    --error-log-path=/var/log/nginx/error.log \\\n    --http-log-path=/var/log/nginx/access.log \\\n    --pid-path=/var/run/nginx.pid \\\n    --lock-path=/var/run/nginx.lock \\\n    --http-client-body-temp-path=/var/cache/nginx/client_temp \\\n    --http-proxy-temp-path=/var/cache/nginx/proxy_temp \\\n    --http-fastcgi-temp-path=/var/cache/nginx/fastcgi_temp \\\n    --http-uwsgi-temp-path=/var/cache/nginx/uwsgi_temp \\\n    --http-scgi-temp-path=/var/cache/nginx/scgi_temp \\\n    --user=nginx \\\n    --group=nginx \\\n    --with-http_ssl_module \\\n    --with-http_realip_module \\\n    --with-http_addition_module \\\n    --with-http_sub_module \\\n    --with-http_dav_module \\\n    --with-http_flv_module \\\n    --with-http_mp4_module \\\n    --with-http_gunzip_module \\\n    --with-http_gzip_static_module \\\n    --with-http_random_index_module \\\n    --with-http_secure_link_module \\\n    --with-http_stub_status_module \\\n    --with-http_auth_request_module \\\n    --with-http_xslt_module=dynamic \\\n    --with-http_image_filter_module=dynamic \\\n    --with-http_geoip_module=dynamic \\\n    --with-threads \\\n    --with-stream \\\n    --with-stream_ssl_module \\\n    --with-stream_ssl_preread_module \\\n    --with-stream_realip_module \\\n    --with-stream_geoip_module=dynamic \\\n    --with-http_slice_module \\\n    --with-mail \\\n    --with-mail_ssl_module \\\n    --with-compat \\\n    --with-file-aio \\\n    --with-http_v2_module \\\n    --add-module=/usr/src/ngx_http_google_filter_module-$GOOGLE_FILTER_MODULE_VERSION \\\n    --add-module=/usr/src/ngx_http_substitutions_filter_module-$SUBSTITUTIONS_FILTER_MODULE_VERSION \\\n  \" \\\n  && addgroup -S nginx \\\n  && adduser -D -S -h /var/cache/nginx -s /sbin/nologin -G nginx nginx \\\n  && apk add --no-cache ca-certificates \\\n  && apk add --no-cache --virtual .build-deps \\\n    gcc \\\n    libc-dev \\\n    make \\\n    openssl-dev \\\n    pcre-dev \\\n    zlib-dev \\\n    linux-headers \\\n    curl \\\n    gnupg1 \\\n    libxslt-dev \\\n    gd-dev \\\n    geoip-dev \\\n  && curl -fsSL https://nginx.org/download/nginx-$NGINX_VERSION.tar.gz -o nginx.tar.gz \\\n  && curl -fsSL https://nginx.org/download/nginx-$NGINX_VERSION.tar.gz.asc -o nginx.tar.gz.asc \\\n  && curl -fsSL https://github.com/cuber/ngx_http_google_filter_module/archive/$GOOGLE_FILTER_MODULE_VERSION.tar.gz -o ngx_http_google_filter_module.tar.gz \\\n  && curl -fsSL https://github.com/yaoweibin/ngx_http_substitutions_filter_module/archive/$SUBSTITUTIONS_FILTER_MODULE_VERSION.tar.gz -o ngx_http_substitutions_filter_module.tar.gz \\\n  && export GNUPGHOME=\"$(mktemp -d)\" \\\n  && found=''; \\\n  for server in \\\n    ha.pool.sks-keyservers.net \\\n    hkp://keyserver.ubuntu.com:80 \\\n    hkp://p80.pool.sks-keyservers.net:80 \\\n    pgp.mit.edu; \\\n  do \\\n    echo \"Fetching GPG key $GPG_KEYS from $server\"; \\\n    gpg --batch --keyserver \"$server\" --keyserver-options timeout=10 --recv-keys \"$GPG_KEYS\" && found=yes && break; \\\n  done; \\\n  test -z \"$found\" && echo >&2 \"error: failed to fetch GPG key $GPG_KEYS\" && exit 1; \\\n  gpg --batch --verify nginx.tar.gz.asc nginx.tar.gz \\\n  && rm -rf \"$GNUPGHOME\" nginx.tar.gz.asc \\\n  && mkdir -p /usr/src \\\n  && tar -x -f nginx.tar.gz -C /usr/src \\\n  && rm nginx.tar.gz \\\n  && tar -x -f ngx_http_google_filter_module.tar.gz -C /usr/src \\\n  && rm ngx_http_google_filter_module.tar.gz \\\n  && tar -x -f ngx_http_substitutions_filter_module.tar.gz -C /usr/src \\\n  && rm ngx_http_substitutions_filter_module.tar.gz \\\n  && cd /usr/src/nginx-$NGINX_VERSION \\\n  && ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" $CONFIG --with-debug \\\n  && make -j$(getconf _NPROCESSORS_ONLN) \\\n  && mv objs/nginx objs/nginx-debug \\\n  && mv objs/ngx_http_xslt_filter_module.so objs/ngx_http_xslt_filter_module-debug.so \\\n  && mv objs/ngx_http_image_filter_module.so objs/ngx_http_image_filter_module-debug.so \\\n  && mv objs/ngx_http_geoip_module.so objs/ngx_http_geoip_module-debug.so \\\n  && mv objs/ngx_stream_geoip_module.so objs/ngx_stream_geoip_module-debug.so \\\n  && ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" $CONFIG \\\n  && make -j$(getconf _NPROCESSORS_ONLN) \\\n  && make install \\\n  && rm -rf /etc/nginx/html/ \\\n  && mkdir /etc/nginx/conf.d/ \\\n  && mkdir -p /usr/share/nginx/html/ \\\n  && install -m644 html/index.html /usr/share/nginx/html/ \\\n  && install -m644 html/50x.html /usr/share/nginx/html/ \\\n  && install -m755 objs/nginx-debug /usr/sbin/nginx-debug \\\n  && install -m755 objs/ngx_http_xslt_filter_module-debug.so /usr/lib/nginx/modules/ngx_http_xslt_filter_module-debug.so \\\n  && install -m755 objs/ngx_http_image_filter_module-debug.so /usr/lib/nginx/modules/ngx_http_image_filter_module-debug.so \\\n  && install -m755 objs/ngx_http_geoip_module-debug.so /usr/lib/nginx/modules/ngx_http_geoip_module-debug.so \\\n  && install -m755 objs/ngx_stream_geoip_module-debug.so /usr/lib/nginx/modules/ngx_stream_geoip_module-debug.so \\\n  && ln -s ../../usr/lib/nginx/modules /etc/nginx/modules \\\n  && strip /usr/sbin/nginx* \\\n  && strip /usr/lib/nginx/modules/*.so \\\n  && rm -rf /usr/src/nginx-$NGINX_VERSION \\\n  && rm -rf /usr/src/ngx_http_google_filter_module-$GOOGLE_FILTER_MODULE_VERSION \\\n  && rm -rf /usr/src/ngx_http_substitutions_filter_module-$SUBSTITUTIONS_FILTER_MODULE_VERSION \\\n\n  # Bring in gettext so we can get `envsubst`, then throw\n  # the rest away. To do this, we need to install `gettext`\n  # then move `envsubst` out of the way so `gettext` can\n  # be deleted completely, then move `envsubst` back.\n  && apk add --no-cache --virtual .gettext gettext \\\n  && mv /usr/bin/envsubst /tmp/ \\\n\n  && runDeps=\"$( \\\n    scanelf --needed --nobanner --format '%n#p' /usr/sbin/nginx /usr/lib/nginx/modules/*.so /tmp/envsubst \\\n      | tr ',' '\\n' \\\n      | sort -u \\\n      | awk 'system(\"[ -e /usr/local/lib/\" $1 \" ]\") == 0 { next } { print \"so:\" $1 }' \\\n  )\" \\\n  && apk add --no-cache --virtual .nginx-rundeps $runDeps \\\n  && apk del .build-deps \\\n  && apk del .gettext \\\n  && mv /tmp/envsubst /usr/local/bin/ \\\n\n  # Bring in tzdata so users could set the timezones through the environment\n  # variables\n  && apk add --no-cache tzdata \\\n\n  # forward request and error logs to docker log collector\n  && ln -sf /dev/stdout /var/log/nginx/access.log \\\n  && ln -sf /dev/stderr /var/log/nginx/error.log\n\nCOPY nginx /etc/nginx/\n\nEXPOSE 80\n\nSTOPSIGNAL SIGTERM\n\nCMD [\"nginx\", \"-g\", \"daemon off;\"]\n"
}