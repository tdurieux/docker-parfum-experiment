{
  "startTime": 1674242535320,
  "endTime": 1674242535509,
  "originalSmells": [
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 12,
        "lineEnd": 12,
        "columnStart": 4,
        "columnEnd": 58
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 14,
        "lineEnd": 14,
        "columnStart": 4,
        "columnEnd": 62
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 16,
        "lineEnd": 16,
        "columnStart": 4,
        "columnEnd": 44
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 12,
        "lineEnd": 12,
        "columnStart": 4,
        "columnEnd": 58
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 14,
        "lineEnd": 14,
        "columnStart": 4,
        "columnEnd": 62
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 16,
        "lineEnd": 16,
        "columnStart": 4,
        "columnEnd": 44
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# Happening in a well-defined setting the Docker builds should be somewhat\n# more reproducible than builds relying on the local workstation environment.\n# Hence we're going to use the Docker build as the reference one.\n# CI and local builds might be considered a second tier build optimizations.\n#\n# docker build --tag mm2 .\n\n# NB: The version here was picked to match the one tested in our CI. The latest Travis has (as of 2018-11) is Xenial.\nFROM ubuntu:xenial\n\nRUN \\\n    apt-get update && \\\n    apt-get install --no-install-recommends -y git build-essential libssl-dev wget && \\\n    # https://github.com/rust-lang/rust-bindgen/blob/master/book/src/requirements.md#debian-based-linuxes\n    apt-get install --no-install-recommends -y llvm-3.9-dev libclang-3.9-dev clang-3.9 && \\\n    # openssl-sys requirements, cf. https://crates.io/crates/openssl-sys\n    apt-get install --no-install-recommends -y pkg-config libssl-dev && \\\n    apt-get clean && rm -rf /var/lib/apt/lists/*;\n\n#Cmake 3.12.0 supports multi-platform -j option, it allows to use all cores for concurrent build to speed up it\nRUN wget https://cmake.org/files/v3.12/cmake-3.12.0-Linux-x86_64.sh && \\\n    sh cmake-3.12.0-Linux-x86_64.sh --skip-license --exclude-subdir --prefix=/usr/local && \\\n    rm -rf cmake-3.12.0-Linux-x86_64.sh\n\nRUN \\\n    wget -O- https://sh.rustup.rs > /tmp/rustup-init.sh &&\\\n    sh /tmp/rustup-init.sh -y --default-toolchain none &&\\\n    . /root/.cargo/env &&\\\n    rustup install nightly-2019-03-10 &&\\\n    rustup default nightly-2019-03-10 &&\\\n    # It seems that bindgen won't prettify without it:\n    rustup component add rustfmt-preview &&\\\n    rm -rf /root/.rustup/toolchains/nightly-2019-03-10-x86_64-unknown-linux-gnu/share/doc &&\\\n    rm -f /tmp/rustup-init.sh\n\nENV PATH=\"/root/.cargo/bin:${PATH}\"\n\n# Unlike the `COPY` command, the `RUN git clone` remains cached by Docker even if we change something locally.\n# This allows us to more easily play with later Dockerfile steps by adding the `COPY` there.\nRUN git clone --depth=1 -b mm2 https://github.com/artemii235/SuperNET.git /mm2\n\n# Or with the \"etomic\" branch:\n#RUN git clone --depth=1 -b etomic https://github.com/artemii235/SuperNET.git /mm2\n\n# The number of Docker layers is limited AFAIK,\n# so here we have a couple of configuration actions packed into a single step.\nRUN cd /mm2 &&\\\n    # Put the version into the file, allowing us to easily use it from different Docker steps and from Rust.\n    export MM_VERSION=`echo \"$(git tag -l --points-at HEAD)\"` &&\\\n    # If we're not in a CI-release environment then set the version to \"UNKNOWN\".\n    if [ -z \"$MM_VERSION\" ]; then export MM_VERSION=UNKNOWN; fi &&\\\n    echo \"MM_VERSION is $MM_VERSION\" &&\\\n    echo -n \"$MM_VERSION\" > MM_VERSION\n\nRUN cd /mm2 && cargo fetch\n\n# This will overwrite the Git version with the local one.\n# Only needed when we're developing or changing something locally.\nCOPY . /mm2\n\n# Build MM1 and MM2.\n# Increased verbosity here allows us to see the MM1 CMake logs.\nRUN cd /mm2 &&\\\n    cargo build -vv &&\\\n    mv target/debug/mm2 /usr/local/bin/marketmaker-mainnet &&\\\n    cargo test &&\\\n    cargo clean\n\nCMD marketmaker-testnet\n"
}