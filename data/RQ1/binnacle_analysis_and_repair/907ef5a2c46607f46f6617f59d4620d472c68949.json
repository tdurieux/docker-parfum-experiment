{
  "startTime": 1674249184480,
  "endTime": 1674249184806,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 125,
        "lineEnd": 125,
        "columnStart": 2,
        "columnEnd": 83
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 51,
        "lineEnd": 51,
        "columnStart": 4,
        "columnEnd": 31
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 52,
        "lineEnd": 52,
        "columnStart": 4,
        "columnEnd": 31
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 67,
        "lineEnd": 67,
        "columnStart": 56,
        "columnEnd": 73
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 82,
        "lineEnd": 82,
        "columnStart": 4,
        "columnEnd": 54
      }
    },
    {
      "rule": "aptGetInstallUseY",
      "position": {
        "lineStart": 45,
        "lineEnd": 45,
        "columnStart": 4,
        "columnEnd": 23
      }
    },
    {
      "rule": "aptGetInstallUseY",
      "position": {
        "lineStart": 96,
        "lineEnd": 96,
        "columnStart": 4,
        "columnEnd": 29
      }
    },
    {
      "rule": "aptGetInstallUseY",
      "position": {
        "lineStart": 126,
        "lineEnd": 126,
        "columnStart": 7,
        "columnEnd": 30
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 45,
        "lineEnd": 45,
        "columnStart": 4,
        "columnEnd": 23
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 96,
        "lineEnd": 96,
        "columnStart": 4,
        "columnEnd": 29
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 124,
        "lineEnd": 124,
        "columnStart": 2,
        "columnEnd": 34
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 126,
        "lineEnd": 126,
        "columnStart": 7,
        "columnEnd": 30
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 45,
        "lineEnd": 45,
        "columnStart": 4,
        "columnEnd": 23
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 96,
        "lineEnd": 96,
        "columnStart": 4,
        "columnEnd": 29
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 45,
        "lineEnd": 45,
        "columnStart": 4,
        "columnEnd": 23
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 96,
        "lineEnd": 96,
        "columnStart": 4,
        "columnEnd": 29
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 124,
        "lineEnd": 124,
        "columnStart": 2,
        "columnEnd": 34
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 126,
        "lineEnd": 126,
        "columnStart": 7,
        "columnEnd": 30
      }
    }
  ],
  "repairedSmells": [
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 45,
        "lineEnd": 45,
        "columnStart": 4,
        "columnEnd": 50
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 96,
        "lineEnd": 96,
        "columnStart": 4,
        "columnEnd": 56
      }
    }
  ],
  "repairedDockerfile": "# from https://github.com/BVLC/caffe/blob/master/docker/standalone/gpu/Dockerfile\nFROM nvidia/cuda:7.5-cudnn3-devel-ubuntu14.04\nMAINTAINER femianjc@miamioh.edu\n\n\n# Handy instructions:\n# Install nvidia-docker\n#    https://github.com/NVIDIA/nvidia-docker/wiki/Installation\n#\n# I will ASSUME you are in the top level directory of this repo when you type this...\n#\n# To build the image:\n#\n#    nvidia-docker build -t facades docker/gpu\n#\n# To start the container:\n#\n#    sudo nvidia-docker run -it -v ${PWD}:/workspace facades\n#\n\n\nRUN apt-get update && apt-get install -y --no-install-recommends \\\n        build-essential \\\n        cmake \\\n        git \\\n        wget \\\n        libatlas-base-dev \\\n        libboost-all-dev \\\n        libgflags-dev \\\n        libgoogle-glog-dev \\\n        libhdf5-serial-dev \\\n        libleveldb-dev \\\n        liblmdb-dev \\\n        libopencv-dev \\\n        libprotobuf-dev \\\n        libsnappy-dev \\\n        protobuf-compiler \\\n        python-dev \\\n        python-numpy \\\n        python-pip \\\n        python-scipy \\\n        vim && \\\n    rm -rf /var/lib/apt/lists/*\n\n# Used by the facade processing shell scripts in order to package up our results\nRUN apt-get install -y --no-install-recommends zip && rm -rf /var/lib/apt/lists/*;\n\nENV CAFFE_ROOT=/opt/caffe\nWORKDIR $CAFFE_ROOT\n\nRUN python -m pip install -U pip\nRUN pip install --no-cache-dir scikit-learn -U\nRUN pip install --no-cache-dir scikit-image -U\n\n# NOTE:  Do not install any python packages after building segnet!\n#        The risk of an incompatability is just too great.\n#        Segnet ends up compiling against the particular version of numpy/opencv that\n#        are present when it is build.\n\n\n# NOTE: I _wanted_ to use the latest (or a leter) version of cudnn because I thought it could\n#       improve performance, but TomoSaemann's repo does not unclude the modifications needed\n#       to the Dropout layer that are needed for bayesian inference.\n#\n#       # ENV SEGNET_REPO=https://github.com/TimoSaemann/caffe-segnet-cudnn5\nENV SEGNET_REPO=https://github.com/alexgkendall/caffe-segnet\nRUN git clone --depth 1 ${SEGNET_REPO} .\nRUN for req in $(cat python/requirements.txt) pydot; do pip install --no-cache-dir $req; done && \\\n    mkdir build && cd build\n\n\n# NOTE: I _could_ make a Makefile and usin the Dockerfile 'ADD' command instead\n#       of appendining to the example like this, but this seems to work.\nRUN cp Makefile.config.example Makefile.config\nRUN echo USE_CUDNN := 1 >> Makefile.config\nRUN echo WITH_PYTHON_LAYER := 1 >> Makefile.config\nRUN make -j\nRUN make -j python\nRUN make -j pycaffe\n\n#NOTE: I am considering shipping a Jupyter interface to help guide people through\n#      the software, but for processing lot's of data I prefer bash\nRUN pip install --no-cache-dir jupyter scipy xmltodict configargparse\n\nENV PYCAFFE_ROOT $CAFFE_ROOT/python\nENV PYTHONPATH $PYCAFFE_ROOT:$PYTHONPATH\nENV PATH $CAFFE_ROOT/build/tools:$PYCAFFE_ROOT:$PATH\nRUN echo \"$CAFFE_ROOT/build/lib\" >> /etc/ld.so.conf.d/caffe.conf && ldconfig\n\n#NOTE: I am not sure that this line is necessary given the 'ldconfig' stuff above; I\n#      had an unrelated issue and added this just-in-case\nENV LD_LIBRARY_PATH=${CAFFE_ROOT}/build/lib:$LD_LIBRARY_PATH\n\n\n# This is used by the finish-training.sh script to set the I12 caffe model weights in an\n# environment variable.\nRUN apt-get install -y --no-install-recommends coreutils && rm -rf /var/lib/apt/lists/*;\n\n\n\n#NOTE: I am not sure what the purpose of a 'VOLUME' in a Dockerfile is, as it seems that\n#      you still have to\n# This is a volume used to hold the output\n# Use -v /path/to/output:/output in order to preserve the output\nVOLUME /output\n\n# This is a voume used to hold the data\n# Use -v /path/to/data:/data in order to provide your data\nVOLUME /data\n\n\n# I generate plots (often to files), and this does not work by default on systems without\n# an X-server setup properly (such as docker images...) so I am setting it up to use Agg for plotting.\nENV MATPLOTLIBRC ${HOME}/.config/matplotlib\nRUN mkdir -p ${MATPLOTLIBRC}\nRUN echo backend: Agg > ${MATPLOTLIBRC}/matplotlibrc\n\n\n# Expose some ports for http or ipynb\n# EXPOSE 80\n# EXPOSE 8888\n\nRUN \\\n  apt-get update && \\\n  apt-get install --no-install-recommends -y sudo curl git && \\\n  curl -f -s https://packagecloud.io/install/repositories/github/git-lfs/script.deb.sh | sudo bash && \\\n  sudo apt-get install -y --no-install-recommends git-lfs && rm -rf /var/lib/apt/lists/*;\n\n# Add files to the container\nWORKDIR /opt\nRUN git clone   https://github.com/jfemiani/facade-segmentation /opt/facades\n\nENV PYTHONPATH=/opt/facades:${PYTHONPATH}\nRUN ln -s /opt/facades/scripts/i12-inference/generate /usr/bin/i12-inference\nRUN ln -s /opt/facades/scripts/i12-inference/generate /usr/bin/inference\n\nVOLUME /workspace\nWORKDIR /workspace\nCMD /bin/bash\n"
}