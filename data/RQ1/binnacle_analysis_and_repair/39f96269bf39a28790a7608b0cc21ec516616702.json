{
  "startTime": 1674251022720,
  "endTime": 1674251022781,
  "originalSmells": [
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 2,
        "lineEnd": 2,
        "columnStart": 22,
        "columnEnd": 49
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 13,
        "lineEnd": 13,
        "columnStart": 22,
        "columnEnd": 49
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 2,
        "lineEnd": 2,
        "columnStart": 22,
        "columnEnd": 49
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 13,
        "lineEnd": 13,
        "columnStart": 22,
        "columnEnd": 49
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM debian:unstable\n\nRUN apt-get update && apt-get install --no-install-recommends -yq bundler && rm -rf /var/lib/apt/lists/*;\n\n# set a few bundle config variables so that a local .bundle in our development directory doesn't screw up our image\nENV BUNDLE_APP_CONFIG /apps/bundle\nENV BUNDLE_PATH /apps/gems\n\nENV RAILS_ENV production\nENV RACK_ENV deployment\n\nWORKDIR /apps/rails\n\nRUN apt-get update && apt-get install --no-install-recommends -yq unicorn && rm -rf /var/lib/apt/lists/*;\nCMD [\"unicorn\"]\nEXPOSE 8080\n\n# TODO find a clean way to do this here in such a way that gems like rmagick can install cleanly without first installing libmagickcore-dev\n#ONBUILD ADD Gemfile /apps/rails/Gemfile\n#ONBUILD ADD Gemfile.lock /apps/rails/Gemfile.lock\n#ONBUILD RUN bundle install --deployment\n#ONBUILD ADD . /apps/rails\n"
}