{
  "startTime": 1674240393563,
  "endTime": 1674240394260,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 111,
        "lineEnd": 111,
        "columnStart": 4,
        "columnEnd": 91
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 112,
        "lineEnd": 112,
        "columnStart": 5,
        "columnEnd": 74
      }
    },
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 120,
        "lineEnd": 120,
        "columnStart": 4,
        "columnEnd": 31
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 147,
        "lineEnd": 147,
        "columnStart": 4,
        "columnEnd": 15
      }
    },
    {
      "rule": "gpgUseBatchFlag",
      "position": {
        "lineStart": 105,
        "lineEnd": 105,
        "columnStart": 4,
        "columnEnd": 76
      }
    },
    {
      "rule": "gpgUseHaPools",
      "position": {
        "lineStart": 105,
        "lineEnd": 105,
        "columnStart": 4,
        "columnEnd": 76
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 22,
        "lineEnd": 76,
        "columnStart": 25,
        "columnEnd": 14
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 22,
        "lineEnd": 76,
        "columnStart": 25,
        "columnEnd": 14
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "## -*- docker-image-name: \"zavpyj/osm-tiles\" -*-\n\n##\n# The OpenStreetMap Tile Server\n#\n# This creates an image containing the OpenStreetMap tile server stack as\n# described at\n# <https://switch2osm.org/serving-tiles/manually-building-a-tile-server-14-04/>.\n#\n\nFROM phusion/baseimage:0.9.19\nMAINTAINER Xavier Guille <xguille@hotmail.com>\n\n# Use baseimage-docker's init system.\nCMD [\"/sbin/my_init\"]\n\n# Set the locale. This affects the encoding of the Postgresql template\n# databases.\nENV LANG C.UTF-8\nRUN update-locale LANG=C.UTF-8\n\n# Update cache and install dependencies\nRUN apt-get update -y && apt-get install --no-install-recommends -y \\\n    apache2 \\\n    apache2-dev \\\n    autoconf \\\n    build-essential \\\n    bzip2 \\\n    cmake \\\n    g++ \\\n    gdal-bin \\\n    git-core \\\n    libagg-dev \\\n    libboost-dev \\\n    libboost-filesystem-dev \\\n    libboost-program-options-dev \\\n    libboost-python-dev \\\n    libboost-regex-dev \\\n    libboost-system-dev \\\n    libboost-thread-dev \\\n    libbz2-dev \\\n    libcairo-dev \\\n    libcairomm-1.0-dev \\\n    libexpat1-dev \\\n    libfreetype6-dev \\\n    libgdal-dev \\\n    libgdal1-dev \\\n    libgeos-dev \\\n    libgeos++-dev \\\n    libicu-dev \\\n    liblua5.2-dev \\\n    libmapnik-dev \\\n    libpng12-dev \\\n    libpq-dev \\\n    libproj-dev \\\n    libprotobuf-c0-dev \\\n    libtiff5-dev \\\n    libtool \\\n    libxml2-dev \\\n    lua5.2 \\\n    make \\\n    mapnik-utils \\\n    munin \\\n    munin-node \\\n    postgresql-9.5-postgis-2.2 \\\n    postgresql-contrib \\\n    postgresql-server-dev-9.5 \\\n    protobuf-c-compiler \\\n    python-mapnik \\\n    python-software-properties \\\n    software-properties-common \\\n    sudo \\\n    tar \\\n    ttf-unifont \\\n    unzip \\\n    wget \\\n    zlib1g-dev && rm -rf /var/lib/apt/lists/*;\n\n# Avoid munin cron tasks and associated logs\nRUN rm -f /etc/cron.d/munin /etc/cron.d/munin-node /etc/cron.d/sysstat\n\n# Install osm2pgsql\nENV OSM2PGSQL_VERSION 0.92.0\nRUN git clone --depth 1 --branch ${OSM2PGSQL_VERSION} https://github.com/openstreetmap/osm2pgsql.git /tmp/osm2pgsql && \\\n    cd /tmp/osm2pgsql && \\\n    mkdir build && cd build && cmake .. && \\\n    make && make install && \\\n    cd /tmp && rm -rf /tmp/osm2pgsql\n\n############## Install of nodejs : start ##############\nRUN groupadd --gid 1000 node \\\n  && useradd --uid 1000 --gid node --shell /bin/bash --create-home node\n\n# gpg keys listed at https://github.com/nodejs/node\nRUN set -ex \\\n  && for key in \\\n    9554F04D7259F04124DE6B476D5A82AC7E37093B \\\n    94AE36675C464D64BAFA68DD7434390BDBE9B9C5 \\\n    0034A06D9D9B0064CE8ADF6BF1747F4AD2306D93 \\\n    FD3A5288F042B6850C66B31F09FE44734EB7990E \\\n    71DCFD284A79C3B38668286BC97EC7A07EDE3FC1 \\\n    DD8F2338BAE7501E3DD5AC78C273792F7D83545D \\\n    B9AE9905FFD7803F25714661B63B535A4C206CA9 \\\n    C4F0DFFF4E8C1A8236409D08E73BC641CC11F4C8; \\\n  do \\\n    gpg --batch --keyserver hkp://p80.ha.pool.sks-keyservers.net:80 --recv-keys \"$key\"; \\\n  done\n\nENV NPM_CONFIG_LOGLEVEL info\nENV NODE_VERSION 6.9.4\n\nRUN curl -f -SLO \"https://nodejs.org/dist/v$NODE_VERSION/node-v$NODE_VERSION-linux-x64.tar.xz\" \\\n  && curl -f -SLO \"https://nodejs.org/dist/v$NODE_VERSION/SHASUMS256.txt.asc\" \\\n  && gpg --batch --decrypt --output SHASUMS256.txt SHASUMS256.txt.asc \\\n  && grep \" node-v$NODE_VERSION-linux-x64.tar.xz\\$\" SHASUMS256.txt | sha256sum -c - \\\n  && tar -xJf \"node-v$NODE_VERSION-linux-x64.tar.xz\" -C /usr/local --strip-components=1 \\\n  && rm \"node-v$NODE_VERSION-linux-x64.tar.xz\" SHASUMS256.txt.asc SHASUMS256.txt \\\n  && ln -s /usr/local/bin/node /usr/local/bin/nodejs\n############## Install of nodejs :  end  ##############\n\nRUN npm install -g carto@0.16.3 && npm cache clean --force;\n\n# Install CartoCSS template for OpenStreetMap data\nENV OSM_CARTO_VERSION 3.0.1\nRUN cd /tmp && \\\n    wget https://github.com/gravitystorm/openstreetmap-carto/archive/v$OSM_CARTO_VERSION.tar.gz && \\\n    tar -xzf v$OSM_CARTO_VERSION.tar.gz && \\\n    rm -f v$OSM_CARTO_VERSION.tar.gz && \\\n    mkdir /usr/share/mapnik && \\\n    mv /tmp/openstreetmap-carto-$OSM_CARTO_VERSION /usr/share/mapnik/openstreetmap-carto && \\\n    cd /usr/share/mapnik/openstreetmap-carto && \\\n    ./scripts/get-shapefiles.py && \\\n    cp project.mml project.mml.orig && \\\n    nodejs /usr/local/bin/carto project.mml > style.xml && \\\n    find /usr/share/mapnik/openstreetmap-carto/data \\( -type f -iname \"*.zip\" -o -iname \"*.tgz\" \\) -delete\n\nCOPY ./build/drop_indexes.sql /usr/share/mapnik/openstreetmap-carto/\n\n# Install mod_tile and renderd\n#master is not a good point to rely on, but no tag exists on mod_tile Github's project since v0.4 (2011) !\n#So we rely on the last commit of the master branch at the time of this Dockerfile\nENV MOD_TILE_VERSION e25bfdba1c1f2103c69529f1a30b22a14ce311f1\nENV MOD_TILE_PARALLEL_BUILD 4\nRUN cd /tmp && git clone https://github.com/openstreetmap/mod_tile.git && \\\n    cd /tmp/mod_tile && \\\n    git reset --hard $MOD_TILE_VERSION && \\\n    ./autogen.sh && \\\n    ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" && \\\n    make -j $MOD_TILE_PARALLEL_BUILD && \\\n    make install && \\\n    make install-mod_tile && \\\n    ldconfig && \\\n    cd /tmp && rm -rf /tmp/mod_tile\n\nRUN cp -p /usr/local/etc/renderd.conf /usr/local/etc/renderd.conf.orig\nCOPY ./build/renderd.conf /usr/local/etc/\n\n# Create the files required for the mod_tile system to run\nRUN mkdir /var/run/renderd && chown www-data: /var/run/renderd\nRUN mkdir /var/lib/mod_tile && chown www-data /var/lib/mod_tile\n\n# Replace default apache index page with Leaflet demo\nCOPY ./build/index.html /var/www/html/\n\n# Configure mod_tile\nCOPY ./build/mod_tile.load /etc/apache2/mods-available/\nCOPY ./build/mod_tile.conf /etc/apache2/mods-available/\nRUN a2enmod mod_tile\n\n# Ensure the webserver user can connect to the gis database\nRUN sed -i -e 's/local   all             all                                     peer/local gis www-data peer/' /etc/postgresql/9.5/main/pg_hba.conf\n\n# Tune postgresql\nCOPY ./build/postgresql.conf.sed /tmp/\nRUN sed --file /tmp/postgresql.conf.sed --in-place /etc/postgresql/9.5/main/postgresql.conf\n\n# Define the application logging logic\nCOPY ./build/syslog-ng.conf /etc/syslog-ng/conf.d/local.conf\nRUN rm -rf /var/log/postgresql\n\n# Create a `postgresql` `runit` service\nCOPY ./build/sv/postgresql /etc/sv/postgresql/\nRUN update-service --add /etc/sv/postgresql\n\n# Create an `apache2` `runit` service\nCOPY ./build/sv/apache2 /etc/sv/apache2/\nRUN update-service --add /etc/sv/apache2\n\n# Create a `renderd` `runit` service\nCOPY ./build/sv/renderd /etc/sv/renderd/\nRUN update-service --add /etc/sv/renderd\n\n# Expose the webserver and database ports\nEXPOSE 80 5432\n\n# Set the osm2pgsql import cache size in MB. Used in `run import` and `run importappend`.\nENV OSM_IMPORT_CACHE 40\n\n# Add the README\nCOPY ./README.md /usr/local/share/doc/\n\n# Add the help file\nCOPY ./build/help.txt /usr/local/share/doc/run/\n\nRUN rm -Rf /var/lib/postgresql/9.5/main\n\n# Correct the Error: could not open temporary statistics file \"/var/run/postgresql/9.5-main.pg_stat_tmp/global.tmp\": No such file or directory\nRUN mkdir -p /var/run/postgresql/9.5-main.pg_stat_tmp\nRUN chown postgres:postgres /var/run/postgresql/9.5-main.pg_stat_tmp -R\n\n#Add the perl script to render only an extract of the map\nCOPY ./build/render_list_geo.pl /opt/\nRUN chmod +x /opt/render_list_geo.pl\n\n# Configure mod_rewrite\nCOPY ./build/rewrite.conf /etc/apache2/mods-available/\nCOPY ./build/000-default.conf /etc/apache2/sites-available/\n\n# Add the entrypoint\nCOPY ./build/run.sh /usr/local/sbin/run\nRUN chmod +x /usr/local/sbin/run /etc/sv/renderd/run /etc/sv/apache2/run /etc/sv/postgresql/check /etc/sv/postgresql/run\nENTRYPOINT [\"/sbin/my_init\", \"--\", \"/usr/local/sbin/run\"]\n\n# Default to showing the usage text\nCMD [\"help\"]\n\n# Clean up APT\nRUN apt-get clean && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*\n"
}