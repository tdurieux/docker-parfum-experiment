{
  "startTime": 1674243380990,
  "endTime": 1674243381937,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 205,
        "lineEnd": 205,
        "columnStart": 4,
        "columnEnd": 124
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 206,
        "lineEnd": 206,
        "columnStart": 7,
        "columnEnd": 135
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 222,
        "lineEnd": 222,
        "columnStart": 4,
        "columnEnd": 49
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 138,
        "lineEnd": 138,
        "columnStart": 4,
        "columnEnd": 30
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 232,
        "lineEnd": 232,
        "columnStart": 7,
        "columnEnd": 23
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 243,
        "lineEnd": 243,
        "columnStart": 4,
        "columnEnd": 35
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 21,
        "lineEnd": 21,
        "columnStart": 4,
        "columnEnd": 76
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 35,
        "lineEnd": 35,
        "columnStart": 4,
        "columnEnd": 141
      }
    },
    {
      "rule": "gpgUseBatchFlag",
      "position": {
        "lineStart": 204,
        "lineEnd": 204,
        "columnStart": 4,
        "columnEnd": 99
      }
    },
    {
      "rule": "gpgUseBatchFlag",
      "position": {
        "lineStart": 207,
        "lineEnd": 207,
        "columnStart": 7,
        "columnEnd": 43
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 66,
        "lineEnd": 68,
        "columnStart": 22,
        "columnEnd": 11
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 74,
        "lineEnd": 131,
        "columnStart": 22,
        "columnEnd": 23
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 136,
        "lineEnd": 136,
        "columnStart": 25,
        "columnEnd": 87
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 223,
        "lineEnd": 223,
        "columnStart": 7,
        "columnEnd": 32
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 223,
        "lineEnd": 223,
        "columnStart": 7,
        "columnEnd": 32
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 74,
        "lineEnd": 131,
        "columnStart": 22,
        "columnEnd": 23
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 136,
        "lineEnd": 136,
        "columnStart": 25,
        "columnEnd": 87
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 223,
        "lineEnd": 223,
        "columnStart": 7,
        "columnEnd": 32
      }
    }
  ],
  "repairedSmells": [
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 223,
        "lineEnd": 223,
        "columnStart": 7,
        "columnEnd": 56
      }
    }
  ],
  "repairedDockerfile": "FROM ubuntu:16.04 as glvnd\nMAINTAINER Eric Heiden <heiden@usc.edu>\n\n# Set up libglvnd for OpenGL GUI support\nRUN apt-get update && apt-get install -y --no-install-recommends \\\n        git \\\n        ca-certificates \\\n        make \\\n        automake \\\n        autoconf \\\n        libtool \\\n        pkg-config \\\n        python \\\n        libxext-dev \\\n        libx11-dev \\\n        x11proto-gl-dev && \\\n    rm -rf /var/lib/apt/lists/*\n\nWORKDIR /opt/libglvnd\nRUN git clone --branch=v1.0.0 https://github.com/NVIDIA/libglvnd.git . && \\\n    ./autogen.sh && \\\n    ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --prefix=/usr/local --libdir=/usr/local/lib/x86_64-linux-gnu && \\\n    make -j\"$(nproc)\" install-strip && \\\n    find /usr/local/lib/x86_64-linux-gnu -type f -name 'lib*.la' -delete\n\nRUN dpkg --add-architecture i386 && \\\n    apt-get update && apt-get install -y --no-install-recommends \\\n        gcc-multilib \\\n        libxext-dev:i386 \\\n        libx11-dev:i386 && \\\n    rm -rf /var/lib/apt/lists/*\n\n# 32-bit libraries\nRUN make distclean && \\\n    ./autogen.sh && \\\n    ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --prefix=/usr/local --libdir=/usr/local/lib/i386-linux-gnu --host=i386-linux-gnu \"CFLAGS=-m32\" \"CXXFLAGS=-m32\" \"LDFLAGS=-m32\" && \\\n    make -j\"$(nproc)\" install-strip && \\\n    find /usr/local/lib/i386-linux-gnu -type f -name 'lib*.la' -delete\n\n\nFROM tensorflow/tensorflow:1.8.0-gpu-py3\n\nCOPY --from=glvnd /usr/local/lib/x86_64-linux-gnu /usr/local/lib/x86_64-linux-gnu\nCOPY --from=glvnd /usr/local/lib/i386-linux-gnu /usr/local/lib/i386-linux-gnu\n\nCOPY internal/10_nvidia.json /usr/local/share/glvnd/egl_vendor.d/10_nvidia.json\n\nRUN echo '/usr/local/lib/x86_64-linux-gnu' >> /etc/ld.so.conf.d/glvnd.conf && \\\n    echo '/usr/local/lib/i386-linux-gnu' >> /etc/ld.so.conf.d/glvnd.conf && \\\n    ldconfig\n\nENV LD_LIBRARY_PATH /usr/local/lib/x86_64-linux-gnu:/usr/local/lib/i386-linux-gnu${LD_LIBRARY_PATH:+:${LD_LIBRARY_PATH}}\n\nENV NVIDIA_DRIVER_CAPABILITIES ${NVIDIA_DRIVER_CAPABILITIES},display\n\nARG USER\nARG HOME\n\nENV LANG=C.UTF-8 LC_ALL=C.UTF-8 USER=$USER HOME=$HOME\n\nRUN echo \"The working directory is: $HOME\"\nRUN echo \"The user is: $USER\"\n\nRUN mkdir -p $HOME\nWORKDIR $HOME\n\nRUN apt-get update && apt-get install --no-install-recommends -y \\\n        sudo \\\n        git \\\n        && \\\n    apt-get clean && \\\n    rm -rf /var/lib/apt/lists/*\n\n# install dependencies\nRUN apt-get update && DEBIAN_FRONTEND=noninteractive apt-get --no-install-recommends install -y \\\n    build-essential \\\n    apt-utils \\\n    curl \\\n    nano \\\n    vim \\\n    libfreetype6-dev \\\n    libpng12-dev \\\n    libzmq3-dev \\\n    git \\\n    python-numpy \\\n    python-dev \\\n    python-opengl \\\n    cmake \\\n    zlib1g-dev \\\n    libjpeg-dev \\\n    xvfb \\\n    libav-tools \\\n    xorg-dev \\\n    libboost-all-dev \\\n    libsdl2-dev \\\n    swig \\\n    libgtk2.0-dev \\\n    wget \\\n    ca-certificates \\\n    unzip \\\n    aptitude \\\n    pkg-config \\\n    qtbase5-dev \\\n    libqt5opengl5-dev \\\n    libassimp-dev \\\n    libpython3.5-dev \\\n    libboost-python-dev \\\n    libtinyxml-dev \\\n    golang \\\n    python-opencv \\\n    terminator \\\n    tmux \\\n    libcanberra-gtk-module \\\n    libfuse2 \\\n    libnss3 \\\n    fuse \\\n    python3-tk \\\n    libglfw3-dev \\\n    libgl1-mesa-dev \\\n    libgl1-mesa-glx \\\n    libglew-dev \\\n    libosmesa6-dev \\\n    net-tools \\\n    xpra \\\n    xserver-xorg-dev \\\n    libffi-dev \\\n    libxslt1.1 \\\n    feedgnuplot \\\n    libglew-dev \\\n    parallel \\\n    htop \\\n    apt-transport-https && rm -rf /var/lib/apt/lists/*;\n\n# install Sublime Text\nRUN wget -qO - https://download.sublimetext.com/sublimehq-pub.gpg | sudo apt-key add - \\\n    && echo \"deb https://download.sublimetext.com/ apt/stable/\" | sudo tee /etc/apt/sources.list.d/sublime-text.list \\\n    && apt-get update && DEBIAN_FRONTEND=noninteractive apt-get --no-install-recommends install -y sublime-text && rm -rf /var/lib/apt/lists/*;\n\nRUN pip3 install --no-cache-dir --upgrade pip\n\nCOPY ./internal/ /\n\n# Install MuJoCo 1.50 and 1.31\nWORKDIR /opt\nRUN mkdir mujoco && cd mujoco \\\n    && wget https://www.roboti.us/download/mjpro150_linux.zip \\\n    && unzip mjpro150_linux.zip \\\n    && rm mjpro150_linux.zip \\\n    && wget https://www.roboti.us/download/mjpro131_linux.zip \\\n    && unzip mjpro131_linux.zip \\\n    && rm mjpro131_linux.zip \\\n    && if [ -f \"/mjkey.txt\" ]; \\\n        then \\\n            mv /mjkey.txt . && \\\n            cp mjkey.txt mjpro150/bin/ && \\\n            cp mjkey.txt mjpro131/bin/ && \\\n            echo \"Installed MuJoCo Key file.\" ; \\\n        else \\\n            echo \"Could not find MuJoCo key file (mjkey.txt) in ./internal!\\nPlease copy it manually to ~/.mujoco when inside the docker container.\" 1>&2 ; \\\n       fi\nENV MUJOCO_PY_MJPRO_PATH=/opt/mujoco/mjpro150\nENV MUJOCO_LICENSE_KEY=/opt/mujoco/mjkey.txt\nENV MUJOCO_PY_MUJOCO_PATH=/opt/mujoco\nENV LD_LIBRARY_PATH /opt/mujoco/mjpro150/bin:$LD_LIBRARY_PATH\n\n# Temporarily copy MuJoCo to home folder to install mujoco-py\nRUN mkdir ~/.mujoco && cp -r /opt/mujoco/* ~/.mujoco\n\nRUN pip3 --no-cache-dir install \\\n    gym[all]==0.10.3 \\\n    mujoco-py \\\n    scikit-image \\\n    plotly \\\n    ipykernel \\\n    jupyter \\\n    jupyterlab \\\n    matplotlib \\\n    numpy \\\n    scipy \\\n    sklearn \\\n    pandas \\\n    Pillow \\\n    empy \\\n    tqdm \\\n    pyopengl \\\n    ipdb \\\n    cloudpickle \\\n    imageio \\\n    mpi4py \\\n    jsonpickle \\\n    gtimer \\\n    path.py \\\n    cached-property \\\n    flask \\\n    joblib \\\n    lasagne \\\n    PyOpenGL \\\n    six \\\n    pyprind \\\n    virtualenv\n\n\n# Set up permissions to use same UID and GID as host system user\n# https://denibertovic.com/posts/handling-permissions-with-docker-volumes/\nRUN gpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys B42F6819007F00F88E364FD4036A9C25BF357DD4\nRUN curl -f -o /usr/local/bin/gosu -SL \"https://github.com/tianon/gosu/releases/download/1.4/gosu-$(dpkg --print-architecture)\" \\\n    && curl -f -o /usr/local/bin/gosu.asc -SL \"https://github.com/tianon/gosu/releases/download/1.4/gosu-$(dpkg --print-architecture).asc\" \\\n    && gpg --batch --verify /usr/local/bin/gosu.asc \\\n    && rm /usr/local/bin/gosu.asc \\\n    && chmod +x /usr/local/bin/gosu\n# disable password prompt for sudo\nRUN echo \"$USER ALL=(ALL:ALL) NOPASSWD: ALL\" | sudo env EDITOR=\"tee -a\" visudo\n\n# Install Anaconda 3\nRUN echo 'export PATH=/opt/conda/bin:$PATH' > /etc/profile.d/conda.sh \\\n    && wget --quiet https://repo.continuum.io/archive/Anaconda3-5.1.0-Linux-x86_64.sh -O ~/anaconda.sh \\\n    && /bin/bash ~/anaconda.sh -b -p /opt/conda \\\n    && rm ~/anaconda.sh\n\n# Install Jupyter Lab\nRUN jupyter serverextension enable --py jupyterlab --sys-prefix\n# Jupyter Lab Bokeh extension requires NodeJS\nRUN curl -f -sL https://deb.nodesource.com/setup_9.x | sudo -E bash - \\\n    && apt-get install --no-install-recommends -y nodejs && rm -rf /var/lib/apt/lists/*;\nRUN jupyter labextension install jupyterlab_bokeh\n\n# Install Baselines\n# (Remove tensorflow from dependencies since we already installed the GPU version,\n# installing tensorflow again would deactivate GPU support!)\nRUN cd /opt && git clone https://github.com/openai/baselines.git \\\n    && cd baselines \\\n    && sed -i '/tensorflow/d' setup.py \\\n    && pip install --no-cache-dir -e .\n\n# Install Roboschool\nENV ROBOSCHOOL_PATH=/opt/roboschool\nRUN git clone https://github.com/openai/roboschool.git /opt/roboschool\nRUN cd /opt && git clone https://github.com/olegklimov/bullet3 -b roboschool_self_collision \\\n    && mkdir bullet3/build \\\n    && cd    bullet3/build \\\n    && cmake -DBUILD_SHARED_LIBS=ON -DUSE_DOUBLE_PRECISION=1 -DCMAKE_INSTALL_PREFIX:PATH=$ROBOSCHOOL_PATH/roboschool/cpp-household/bullet_local_install -DBUILD_CPU_DEMOS=OFF -DBUILD_BULLET2_DEMOS=OFF -DBUILD_EXTRAS=OFF  -DBUILD_UNIT_TESTS=OFF -DBUILD_CLSOCKET=OFF -DBUILD_ENET=OFF -DBUILD_OPENGL3_DEMOS=OFF .. \\\n    && make -j4 \\\n    && make install\nRUN pip3 install --no-cache-dir -e /opt/roboschool\n\nENV DOCKER_HOME=$HOME\n\n# Install VirtualGL\nRUN dpkg -i /virtualgl_2.5.2_amd64.deb && rm /virtualgl_2.5.2_amd64.deb\n\nENV TERM xterm-256color\n\n# TensorBoard\nEXPOSE 6006\n\n# Jupyter\nEXPOSE 8888\n\nENTRYPOINT [\"/docker-entrypoint.sh\"]\n"
}