{
  "startTime": 1674244191622,
  "endTime": 1674244191784,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 28,
        "lineEnd": 28,
        "columnStart": 15,
        "columnEnd": 94
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM alpine:3.9\n\nLABEL maintainer=\"NGINX Docker Maintainers <docker-maint@nginx.com>\"\n\nENV NGINX_VERSION 1.16.0\nENV NJS_VERSION   0.3.2\nENV PKG_RELEASE   1\n\nRUN set -x \\\n# create nginx user/group first, to be consistent throughout docker variants\n    && addgroup -g 101 -S nginx \\\n    && adduser -S -D -H -u 101 -h /var/cache/nginx -s /sbin/nologin -G nginx -g nginx nginx \\\n    && apkArch=\"$(cat /etc/apk/arch)\" \\\n    && nginxPackages=\" \\\n        nginx=${NGINX_VERSION}-r${PKG_RELEASE} \\\n        nginx-module-xslt=${NGINX_VERSION}-r${PKG_RELEASE} \\\n        nginx-module-geoip=${NGINX_VERSION}-r${PKG_RELEASE} \\\n        nginx-module-image-filter=${NGINX_VERSION}-r${PKG_RELEASE} \\\n        nginx-module-perl=${NGINX_VERSION}-r${PKG_RELEASE} \\\n        nginx-module-njs=${NGINX_VERSION}.${NJS_VERSION}-r${PKG_RELEASE} \\\n    \" \\\n    && case \"$apkArch\" in \\\n        x86_64 \\\n\n            set -x \\\n            && KEY_SHA512=\"e7fa8303923d9b95db37a77ad46c68fd4755ff935d0a534d26eba83de193c76166c68bfe7f65471bf8881004ef4aa6df3e34689c305662750c0172fca5d8552a *stdin\" \\\n            && apk add --no-cache --virtual .cert-deps \\\n                openssl curl ca-certificates \\\n            && curl -f -o /tmp/nginx_signing.rsa.pub https://nginx.org/keys/nginx_signing.rsa.pub \\\n            && if [ \"$(openssl rsa -pubin -in /tmp/nginx_signing.rsa.pub -text -noout | openssl sha512 -r)\" = \"$KEY_SHA512\" ]; then \\\n                echo \"key verification succeeded!\"; \\\n                mv /tmp/nginx_signing.rsa.pub /etc/apk/keys/; \\\n            else \\\n                echo \"key verification failed!\"; \\\n                exit 1; \\\n            fi \\\n            && printf \"%s%s%s\\n\" \\\n                \"https://nginx.org/packages/alpine/v\" \\\n                `egrep -o '^[0-9]+\\.[0-9]+' /etc/alpine-release` \\\n                \"/main\" \\\n            | tee -a /etc/apk/repositories \\\n            && apk del .cert-deps \\\n            ;; \\\n        *) \\\n# we're on an architecture upstream doesn't officially build for\n# let's build binaries from the published packaging sources\n            set -x \\\n            && tempDir=\"$(mktemp -d)\" \\\n            && chown nobody:nobody $tempDir \\\n            && apk add --no-cache --virtual .build-deps \\\n                gcc \\\n                libc-dev \\\n                make \\\n                openssl-dev \\\n                pcre-dev \\\n                zlib-dev \\\n                linux-headers \\\n                libxslt-dev \\\n                gd-dev \\\n                geoip-dev \\\n                perl-dev \\\n                libedit-dev \\\n                mercurial \\\n                bash \\\n                alpine-sdk \\\n                findutils \\\n            && su nobody -s /bin/sh -c \" \\\n                export HOME=${tempDir} \\\n                && cd ${tempDir} \\\n                && hg clone https://hg.nginx.org/pkg-oss \\\n                && cd pkg-oss \\\n                && hg up -r 417 \\\n                && cd alpine \\\n                && make all \\\n                && apk index -o ${tempDir}/packages/alpine/${apkArch}/APKINDEX.tar.gz ${tempDir}/packages/alpine/${apkArch}/*.apk \\\n                && abuild-sign -k ${tempDir}/.abuild/abuild-key.rsa ${tempDir}/packages/alpine/${apkArch}/APKINDEX.tar.gz \\\n                \" \\\n            && echo \"${tempDir}/packages/alpine/\" >> /etc/apk/repositories \\\n            && cp ${tempDir}/.abuild/abuild-key.rsa.pub /etc/apk/keys/ \\\n            && apk del .build-deps \\\n            ;; \\\n       esac \\\n    && apk add --no-cache $nginxPackages \\\n# if we have leftovers from building, let's purge them (including extra, unnecessary build deps)\n    && if [ -n \"$tempDir\" ]; then rm -rf \"$tempDir\"; fi \\\n    && if [ -n \"/etc/apk/keys/abuild-key.rsa.pub\" ]; then rm -f /etc/apk/keys/abuild-key.rsa.pub; fi \\\n    && if [ -n \"/etc/apk/keys/nginx_signing.rsa.pub\" ]; then rm -f /etc/apk/keys/nginx_signing.rsa.pub; fi \\\n# remove the last line with the packages repos in the repositories file\n    && sed -i '$ d' /etc/apk/repositories \\\n# Bring in gettext so we can get `envsubst`, then throw\n# the rest away. To do this, we need to install `gettext`\n# then move `envsubst` out of the way so `gettext` can\n# be deleted completely, then move `envsubst` back.\n    && apk add --no-cache --virtual .gettext gettext \\\n    && mv /usr/bin/envsubst /tmp/ \\\n\n    && runDeps=\"$( \\\n        scanelf --needed --nobanner /tmp/envsubst \\\n            | awk '{ gsub(/,/, \"\\nso:\", $2); print \"so:\" $2 }' \\\n            | sort -u \\\n            | xargs -r apk info --installed \\\n            | sort -u \\\n    )\" \\\n    && apk add --no-cache $runDeps \\\n    && apk del .gettext \\\n    && mv /tmp/envsubst /usr/local/bin/ \\\n# Bring in tzdata so users could set the timezones through the environment\n# variables\n    && apk add --no-cache tzdata \\\n# forward request and error logs to docker log collector\n    && ln -sf /dev/stdout /var/log/nginx/access.log \\\n    && ln -sf /dev/stderr /var/log/nginx/error.log\n\nEXPOSE 80\n\nSTOPSIGNAL SIGTERM\n\nCMD [\"nginx\", \"-g\", \"daemon off;\"]\n"
}