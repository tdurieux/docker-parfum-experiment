{
  "startTime": 1674244917756,
  "endTime": 1674244918128,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 62,
        "lineEnd": 62,
        "columnStart": 4,
        "columnEnd": 199
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 84,
        "lineEnd": 84,
        "columnStart": 4,
        "columnEnd": 62
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 118,
        "lineEnd": 118,
        "columnStart": 4,
        "columnEnd": 37
      }
    },
    {
      "rule": "sha256sumEchoOneSpaces",
      "position": {
        "lineStart": 91,
        "lineEnd": 91,
        "columnStart": 4,
        "columnEnd": 98
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 86,
        "lineEnd": 86,
        "columnStart": 4,
        "columnEnd": 47
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 86,
        "lineEnd": 86,
        "columnStart": 4,
        "columnEnd": 47
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# Copyright (c) Jupyter Development Team.\n# Distributed under the terms of the Modified BSD License.\n\nARG BASE_IMAGE=ubuntu:18.04@sha256:de774a3145f7ca4f0bd144c7d4ffb2931e06634f11529653b23eba85aef8e378\n\nFROM $BASE_IMAGE\n\nARG TF_PACKAGE=https://storage.googleapis.com/tensorflow/linux/cpu/tensorflow-1.7.0-cp36-cp36m-linux_x86_64.whl\nARG TF_PACKAGE_PY_27=https://storage.googleapis.com/tensorflow/linux/cpu/tensorflow-1.7.0-cp27-none-linux_x86_64.whl\nARG TF_SERVING_VERSION=0.0.0\nARG TFMA_VERSION\nARG TFDV_VERSION\nARG PIPELINE_SDK_PACKAGE=https://storage.googleapis.com/ml-pipeline/release/0.1.8/kfp.tar.gz\n\nUSER root\n\nENV DEBIAN_FRONTEND noninteractive\n\nENV NB_USER jovyan\nENV NB_UID 1000\nENV HOME /home/$NB_USER\nENV NB_PREFIX /\n# We prefer to have a global conda install\n# to minimize the amount of content in $HOME\nENV CONDA_DIR=/opt/conda\nENV PATH $CONDA_DIR/bin:$PATH\n\n# Export args as environment variables.\n# This is solely to make them available to install.sh\nENV TF_PACKAGE $TF_PACKAGE\nENV TF_PACKAGE_27 $TF_PACKAGE_PY_27\nENV TF_SERVING_VERSION $TF_PACKAGE_PY_27\nENV TFMA_VERSION $TFMA_VERSION\nENV TFDV_VERSION $TFDV_VERSION\nENV PIPELINE_SDK_PACKAGE $PIPELINE_SDK_PACKAGE\n\n# Use bash instead of sh\nSHELL [\"/bin/bash\", \"-c\"]\n\nRUN apt-get update && apt-get install -yq --no-install-recommends \\\n  apt-transport-https \\\n  build-essential \\\n  bzip2 \\\n  ca-certificates \\\n  curl \\\n  g++ \\\n  git \\\n  gnupg \\\n  graphviz \\\n  locales \\\n  lsb-release \\\n  openssh-client \\\n  sudo \\\n  unzip \\\n  vim \\\n  wget \\\n  zip \\\n  emacs \\\n  && apt-get clean && \\\n  rm -rf /var/lib/apt/lists/*\n\nENV DOCKER_CREDENTIAL_GCR_VERSION=1.4.3\nRUN curl -f -LO https://github.com/GoogleCloudPlatform/docker-credential-gcr/releases/download/v${DOCKER_CREDENTIAL_GCR_VERSION}/docker-credential-gcr_linux_amd64-${DOCKER_CREDENTIAL_GCR_VERSION}.tar.gz && \\\n    tar -zxvf docker-credential-gcr_linux_amd64-${DOCKER_CREDENTIAL_GCR_VERSION}.tar.gz && \\\n    mv docker-credential-gcr /usr/local/bin/docker-credential-gcr && \\\n    rm docker-credential-gcr_linux_amd64-${DOCKER_CREDENTIAL_GCR_VERSION}.tar.gz && \\\n    chmod +x /usr/local/bin/docker-credential-gcr\n\nRUN echo \"en_US.UTF-8 UTF-8\" > /etc/locale.gen && \\\n    locale-gen\n\nENV LC_ALL en_US.UTF-8\nENV LANG en_US.UTF-8\nENV LANGUAGE en_US.UTF-8\n\n# Create jovyan user with UID=1000 and in the 'users' group\n# but allow for non-initial launches of the notebook to have\n# $HOME provided by the contents of a PV\nRUN useradd -M -s /bin/bash -N -u $NB_UID $NB_USER && \\\n    chown -R ${NB_USER}:users /usr/local/bin && \\\n    mkdir -p $HOME\n\nRUN export CLOUD_SDK_REPO=\"cloud-sdk-$(lsb_release -c -s)\" && \\\n    echo \"deb https://packages.cloud.google.com/apt $CLOUD_SDK_REPO main\" > /etc/apt/sources.list.d/google-cloud-sdk.list && \\\n    curl -f https://packages.cloud.google.com/apt/doc/apt-key.gpg | apt-key add - && \\\n    apt-get update && \\\n    apt-get install --no-install-recommends -y google-cloud-sdk kubectl && rm -rf /var/lib/apt/lists/*;\n\n# Install Tini - used as entrypoint for container\nRUN cd /tmp && \\\n    wget --quiet https://github.com/krallin/tini/releases/download/v0.18.0/tini && \\\n    echo \"12d20136605531b09a2c2dac02ccee85e1b874eb322ef6baf7561cd93f93c855  *tini\" | sha256sum -c - && \\\n    mv tini /usr/local/bin/tini && \\\n    chmod +x /usr/local/bin/tini\n\n# Install conda as jovyan user and check the md5 sum provided on the download site\n# After Miniconda v4.5.4 the default Python version is no longer 3.6, but TensorFlow\n# still doesn't support Python 3.7. If we still like to upgrade Miniconda we need\n# to add the line \"conda install python==3.6\" to RUN command below\nENV MINICONDA_VERSION 4.5.4\nRUN cd /tmp && \\\n    mkdir -p $CONDA_DIR && \\\n    wget --quiet https://repo.continuum.io/miniconda/Miniconda3-${MINICONDA_VERSION}-Linux-x86_64.sh && \\\n    echo \"a946ea1d0c4a642ddf0c3a26a18bb16d *Miniconda3-${MINICONDA_VERSION}-Linux-x86_64.sh\" | md5sum -c - && \\\n    /bin/bash Miniconda3-${MINICONDA_VERSION}-Linux-x86_64.sh -f -b -p ${CONDA_DIR} && \\\n    rm Miniconda3-${MINICONDA_VERSION}-Linux-x86_64.sh && \\\n    conda config --system --prepend channels conda-forge && \\\n    conda config --system --set auto_update_conda false && \\\n    conda config --system --set show_channel_urls true && \\\n    conda update --all && \\\n    conda update conda && \\\n    conda clean -tipsy\n\n# NOTE: Beyond this point be careful of breaking out\n# or otherwise adding new layers with RUN, chown, etc.\n# The image size can grow significantly.\n\n# Install base python3 packages\nRUN pip install --no-cache-dir --upgrade pip==19.0.1 && \\\n    pip --no-cache-dir install \\\n    # Tensorflow\n    ${TF_PACKAGE} \\\n    # Jupyter Stuff\n    jupyter \\\n    jupyter-console==6.0.0 \\\n    jupyterhub \\\n    jupyterlab \\\n    xgboost \\\n    git+https://github.com/kubeflow/fairing@a9bb9d5cc1c9f1d75efa31198ddbdccfe176b7bf \\\n    # Kubeflow pipeline SDK\n    ${PIPELINE_SDK_PACKAGE} \\\n    # Cleanup\n    && conda clean -tipsy\n\n# NB: the COPY chown can't expand a bash variable for NB_USER\nCOPY --chown=jovyan:users requirements.txt /tmp\n\n# Install python2 and ipython2 kernel for jupyter notebook\n# Install tf packages which only support py2\nCOPY --chown=jovyan:users install.sh /tmp/\nRUN chmod a+rx /tmp/install.sh && \\\n    /tmp/install.sh\n\n# Add basic config\nCOPY --chown=jovyan:users  jupyter_notebook_config.py /tmp\n\n# Wipe $HOME for PVC detection later\nWORKDIR $HOME\nRUN rm -fr $(ls -A $HOME)\n\n# Copy over init scripts\nCOPY --chown=jovyan:users  pvc-check.sh /usr/local/bin/\nRUN chmod a+rx /usr/local/bin/*\n\nRUN docker-credential-gcr configure-docker && chown jovyan:users $HOME/.docker/config.json\n\n# Configure container startup\nEXPOSE 8888\nUSER jovyan\nENTRYPOINT [\"tini\", \"--\"]\nCMD [\"sh\",\"-c\", \"jupyter notebook --notebook-dir=/home/jovyan --ip=0.0.0.0 --no-browser --allow-root --port=8888 --NotebookApp.token='' --NotebookApp.password='' --NotebookApp.allow_origin='*' --NotebookApp.base_url=${NB_PREFIX}\"]\n\n"
}