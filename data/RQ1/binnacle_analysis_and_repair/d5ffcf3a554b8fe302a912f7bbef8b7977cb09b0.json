{
  "startTime": 1674236212991,
  "endTime": 1674236213414,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 84,
        "lineEnd": 84,
        "columnStart": 4,
        "columnEnd": 97
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 110,
        "lineEnd": 110,
        "columnStart": 4,
        "columnEnd": 31
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 113,
        "lineEnd": 113,
        "columnStart": 4,
        "columnEnd": 31
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 122,
        "lineEnd": 122,
        "columnStart": 4,
        "columnEnd": 31
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 141,
        "lineEnd": 141,
        "columnStart": 4,
        "columnEnd": 31
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 59,
        "lineEnd": 66,
        "columnStart": 23,
        "columnEnd": 12
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM ubuntu:16.04\n\nRUN apt-get update && apt-get install -y --no-install-recommends apt-utils ca-certificates apt-transport-https gnupg-curl && \\\n    rm -rf /var/lib/apt/lists/* && \\\n    NVIDIA_GPGKEY_SUM=d1be581509378368edeec8c1eb2958702feedf3bc3d17011adbf24efacce4ab5 && \\\n    NVIDIA_GPGKEY_FPR=ae09fe4bbd223a84b2ccfce3f60f4b3d7fa2af80 && \\\n    apt-key adv --fetch-keys https://developer.download.nvidia.com/compute/cuda/repos/ubuntu1604/x86_64/7fa2af80.pub && \\\n    apt-key adv --export --no-emit-version -a $NVIDIA_GPGKEY_FPR | tail -n +5 > cudasign.pub && \\\n    echo \"$NVIDIA_GPGKEY_SUM  cudasign.pub\" | sha256sum -c --strict - && rm cudasign.pub && \\\n    echo \"deb https://developer.download.nvidia.com/compute/cuda/repos/ubuntu1604/x86_64 /\" > /etc/apt/sources.list.d/cuda.list && \\\n    echo \"deb https://developer.download.nvidia.com/compute/machine-learning/repos/ubuntu1604/x86_64 /\" > /etc/apt/sources.list.d/nvidia-ml.list\n\nENV CUDA_VERSION 9.0.176\nENV NCCL_VERSION 2.4.2\nENV CUDA_PKG_VERSION 9-0=$CUDA_VERSION-1\nENV CUDNN_VERSION 7.4.2.24\n\nRUN apt-get update && apt-get install -y --no-install-recommends \\\n        cuda-cudart-$CUDA_PKG_VERSION && \\\n    ln -s cuda-9.0 /usr/local/cuda && \\\n    rm -rf /var/lib/apt/lists/*\n\nRUN apt-get update && apt-get install -y --allow-unauthenticated --no-install-recommends \\\n        cuda-libraries-$CUDA_PKG_VERSION \\\n        libnccl2=$NCCL_VERSION-1+cuda9.0 && \\\n    apt-mark hold libnccl2 && \\\n    rm -rf /var/lib/apt/lists/*\n\nRUN apt-get update && apt-get install -y --allow-unauthenticated --no-install-recommends \\\n        cuda-libraries-dev-$CUDA_PKG_VERSION \\\n        cuda-nvml-dev-$CUDA_PKG_VERSION \\\n        cuda-minimal-build-$CUDA_PKG_VERSION \\\n        cuda-command-line-tools-$CUDA_PKG_VERSION \\\n        cuda-core-9-0=9.0.176.3-1 \\\n        cuda-cublas-dev-9-0=9.0.176.4-1 \\\n        libnccl-dev=$NCCL_VERSION-1+cuda9.0 && \\\n    rm -rf /var/lib/apt/lists/*\n\nENV LIBRARY_PATH /usr/local/cuda/lib64/stubs\n\n# NVIDIA docker 1.0.\nLABEL com.nvidia.volumes.needed=\"nvidia_driver\"\nLABEL com.nvidia.cuda.version=\"${CUDA_VERSION}\"\n\nRUN echo \"/usr/local/nvidia/lib\" >> /etc/ld.so.conf.d/nvidia.conf && \\\n    echo \"/usr/local/nvidia/lib64\" >> /etc/ld.so.conf.d/nvidia.conf\n\nENV PATH /usr/local/nvidia/bin:/usr/local/cuda/bin:${PATH}\nENV LD_LIBRARY_PATH /usr/local/nvidia/lib:/usr/local/nvidia/lib64\n\n# NVIDIA container runtime.\nENV NVIDIA_VISIBLE_DEVICES all\nENV NVIDIA_DRIVER_CAPABILITIES compute,utility\nENV NVIDIA_REQUIRE_CUDA \"cuda>=9.0\"\n\n# PyTorch (Geometric) installation\nRUN rm /etc/apt/sources.list.d/cuda.list && \\\n    rm /etc/apt/sources.list.d/nvidia-ml.list\n\nRUN apt-get update && apt-get install --no-install-recommends -y \\\n    curl \\\n    ca-certificates \\\n    vim \\\n    sudo \\\n    git \\\n    bzip2 \\\n    libx11-6 \\\n && rm -rf /var/lib/apt/lists/*\n\n# Create a working directory.\nRUN mkdir /app\nWORKDIR /app\n\n# Create a non-root user and switch to it.\nRUN adduser --disabled-password --gecos '' --shell /bin/bash user \\\n && chown -R user:user /app\nRUN echo \"user ALL=(ALL) NOPASSWD:ALL\" > /etc/sudoers.d/90-user\nUSER user\n\n# All users can use /home/user as their home directory.\nENV HOME=/home/user\nRUN chmod 777 /home/user\n\n# Install Miniconda.\nRUN curl -f -so ~/miniconda.sh https://repo.continuum.io/miniconda/Miniconda3-4.5.12-Linux-x86_64.sh \\\n && chmod +x ~/miniconda.sh \\\n && ~/miniconda.sh -b -p ~/miniconda \\\n && rm ~/miniconda.sh\nENV PATH=/home/user/miniconda/bin:$PATH\nENV CONDA_AUTO_UPDATE_CONDA=false\n\n# Create a Python 3.6 environment.\nRUN /home/user/miniconda/bin/conda install conda-build \\\n && /home/user/miniconda/bin/conda create -y --name py36 python=3.6.5 \\\n && /home/user/miniconda/bin/conda clean -ya\nENV CONDA_DEFAULT_ENV=py36\nENV CONDA_PREFIX=/home/user/miniconda/envs/$CONDA_DEFAULT_ENV\nENV PATH=$CONDA_PREFIX/bin:$PATH\n\n# CUDA 9.0-specific steps.\nRUN conda install -y -c pytorch \\\n    cuda90=1.0 \\\n    magma-cuda90=2.4.0 \\\n    \"pytorch=1.1.0=py3.6_cuda9.0.176_cudnn7.5.1_0\" \\\n    torchvision=0.2.1 \\\n && conda clean -ya\n\n# Install HDF5 Python bindings.\nRUN conda install -y h5py=2.8.0 \\\n && conda clean -ya\nRUN pip install --no-cache-dir h5py-cache==1.0\n\n# Install TorchNet, a high-level framework for PyTorch.\nRUN pip install --no-cache-dir torchnet==0.0.4\n\n# Install Requests, a Python library for making HTTP requests.\nRUN conda install -y requests=2.19.1 \\\n && conda clean -ya\n\n# Install Graphviz.\nRUN conda install -y graphviz=2.38.0 \\\n && conda clean -ya\nRUN pip install --no-cache-dir graphviz==0.8.4\n\n# Install OpenCV3 Python bindings.\nRUN sudo apt-get update && sudo apt-get install -y --no-install-recommends \\\n    libgtk2.0-0 \\\n    libcanberra-gtk-module \\\n && sudo rm -rf /var/lib/apt/lists/*\nRUN conda install -y -c menpo opencv3=3.1.0 \\\n && conda clean -ya\n\n# Install PyTorch Geometric.\nRUN CPATH=/usr/local/cuda/include:$CPATH \\\n && LD_LIBRARY_PATH=/usr/local/cuda/lib64:$LD_LIBRARY_PATH \\\n && DYLD_LIBRARY_PATH=/usr/local/cuda/lib:$DYLD_LIBRARY_PATH\n\nRUN pip install --verbose --no-cache-dir torch-scatter \\\n && pip install --verbose --no-cache-dir torch-sparse \\\n && pip install --verbose --no-cache-dir torch-cluster \\\n && pip install --verbose --no-cache-dir torch-spline-conv \\\n && pip install --no-cache-dir torch-geometric\n\n# Set the default command to python3.\nCMD [\"python3\"]\n"
}