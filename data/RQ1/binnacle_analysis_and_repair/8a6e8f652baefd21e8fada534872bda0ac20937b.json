{
  "startTime": 1674253132862,
  "endTime": 1674253133735,
  "originalSmells": [
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 174,
        "lineEnd": 174,
        "columnStart": 3,
        "columnEnd": 14
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 184,
        "lineEnd": 184,
        "columnStart": 4,
        "columnEnd": 35
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 205,
        "lineEnd": 205,
        "columnStart": 4,
        "columnEnd": 60
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 260,
        "lineEnd": 260,
        "columnStart": 4,
        "columnEnd": 154
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 236,
        "lineEnd": 236,
        "columnStart": 4,
        "columnEnd": 90
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 40,
        "lineEnd": 59,
        "columnStart": 3,
        "columnEnd": 21
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 64,
        "lineEnd": 67,
        "columnStart": 6,
        "columnEnd": 3
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 70,
        "lineEnd": 82,
        "columnStart": 4,
        "columnEnd": 3
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 85,
        "lineEnd": 89,
        "columnStart": 4,
        "columnEnd": 7
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 93,
        "lineEnd": 97,
        "columnStart": 4,
        "columnEnd": 7
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 102,
        "lineEnd": 102,
        "columnStart": 4,
        "columnEnd": 80
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 105,
        "lineEnd": 107,
        "columnStart": 4,
        "columnEnd": 9
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 40,
        "lineEnd": 59,
        "columnStart": 3,
        "columnEnd": 21
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 64,
        "lineEnd": 67,
        "columnStart": 6,
        "columnEnd": 3
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 70,
        "lineEnd": 82,
        "columnStart": 4,
        "columnEnd": 3
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 85,
        "lineEnd": 89,
        "columnStart": 4,
        "columnEnd": 7
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 93,
        "lineEnd": 97,
        "columnStart": 4,
        "columnEnd": 7
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 102,
        "lineEnd": 102,
        "columnStart": 4,
        "columnEnd": 80
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 105,
        "lineEnd": 107,
        "columnStart": 4,
        "columnEnd": 9
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# Dockerfile for building Commercium linux and windows nodes\n# You can stack args in the build command, valid arguments for --build-args OS_VER=[14.04-18.10], LOS_TYPE=(not blank), WOS_TYPE=[win32,win64], NODE_GIT_CHECKOUT=(branch, commit, or tag),and SERVER=(not blank)\n# We need to declare these values outside and inside the container\nARG OS_VER=18.04\nARG LOS_TYPE\nARG SERVER\n\n##You can choose your OS, most will want the latest as windows only builds on Ubuntu:18\n#FROM ubuntu:14.04\n#FROM ubuntu:16.04\nFROM ubuntu:$OS_VER as build\n\nARG OS_VER\nARG LOS_TYPE\nARG WOS_TYPE\nARG SERVER\nENV EXPORT=${EXTRACT}\n\n##~~~~~MAIN CONFIGURATION SETTINGS set in docker-compose.yml or with --build-args~~~~~\n\n## you can build one or both os's at one go. For WOS_TYPE choose win32 or win64\n#ARG LOS_TYPE=linux\n#ARG WOS_TYPE=win64\n#ARG WOS_TYPE=win32\n\n## uncomment server for lean binaries without GUI's and with extra tools.\n## Windows does not build with server options\n#ARG SERVER=1\n\n#Optional you can specify the code branch with --build-arg NODE_GIT_CHECKOUT=v0-1.17 or setting it here\n#ARG NODE_GIT_CHECKOUT=v0.1-17\n##~~~~~END MOST USE CASE CONFIGURATIONS, EDIT BELOW IF YOU HAVE AN UNUSAL SETUP~~~~~\nLABEL maintainer=\"Commercium Dev Team <info@commercium.net>\" \\\ndescription=\"Binary wallet builder for linux or windows commercium nodes. \\\nWith both the Dockerfile and docker-compose.yml files, execute 'docker-compose up' to build. \\\nRead last few lines of output for the command to extract the built files.\"\n\nRUN \\\n  apt-get update \\\n##Root Dependencies \\\n&& DEBIAN_FRONTEND=noninteractive apt-get --no-install-recommends install -y \\\n  automake \\\n  autotools-dev \\\n  bsdmainutils \\\n  build-essential \\\n  git \\\n  libevent-dev \\\n  libssl-dev \\\n  libtool \\\n  pkg-config \\\n  wget \\\n##Ubuntu boost Dependencies\n  libdb-dev \\\n  libdb++-dev \\\n  libboost-chrono-dev \\\n  libboost-filesystem-dev \\\n  libboost-program-options-dev \\\n  libboost-system-dev \\\n  libboost-test-dev \\\n  libboost-thread-dev \\\n##If the above boost doesn't work for dev needs, uncomment the next line\n#  libboost-all-dev \\\n##Server or GUI Optionals\n&& if [ \"$SERVER\" ] ; then \\\n      DEBIAN_FRONTEND=noninteractive apt-get --no-install-recommends install -y \\\n      libminiupnpc-dev \\\n      libzmq3-dev \\\n  ; fi \\\n##GUI Front end Dependencies\n&& if ! [ \"$SERVER\" ] ; then \\\n    DEBIAN_FRONTEND=noninteractive apt-get --no-install-recommends install -y \\\n    libjpeg-dev \\\n    libprotobuf-dev \\\n    libqrencode-dev \\\n    libqt5core5a \\\n    libqt5dbus5 \\\n    libqt5gui5 \\\n    protobuf-compiler \\\n    qt4-linguist-tools \\\n    qt5-default \\\n    qttools5-dev \\\n    qttools5-dev-tools \\\n  ; fi \\\n##Windows Build Dependencies\n&& if [ \"$WOS_TYPE\" = \"win64\" ] ; then \\\n    DEBIAN_FRONTEND=noninteractive apt-get --no-install-recommends install -y \\\n    curl \\\n    g++-mingw-w64-x86-64 \\\n    mingw-w64-x86-64-dev \\\n    zip \\\n&& update-alternatives --set x86_64-w64-mingw32-g++ /usr/bin/x86_64-w64-mingw32-g++-posix \\\n  ; fi \\\n&& if [ \"$WOS_TYPE\" = \"win32\" ] ; then \\\n    DEBIAN_FRONTEND=noninteractive apt-get --no-install-recommends install -y \\\n    curl \\\n    g++-mingw-w64-i686 \\\n    mingw-w64-i686-dev \\\n    zip \\\n&& update-alternatives --set i686-w64-mingw32-g++ /usr/bin/i686-w64-mingw32-g++-posix \\\n  ; fi \\\n##Ubuntu 14 Build Dependencies\n&& if [ $(cut -d \" \" -f 2 /etc/issue |  cut -d . -f 1) = \"14\" ] ; then \\\n    DEBIAN_FRONTEND=noninteractive apt-get --no-install-recommends install -y software-properties-common \\\n&& DEBIAN_FRONTEND=noninteractive add-apt-repository -y ppa:ubuntu-toolchain-r/test \\\n&& apt-get update \\\n&& DEBIAN_FRONTEND=noninteractive apt-get --no-install-recommends install -y \\\n    gcc-5 \\\n    g++-5 \\\n&& update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-5 60 --slave /usr/bin/g++ g++ /usr/bin/g++-5 \\\n&& update-alternatives --config gcc \\\n  ; fi \\\n&& mkdir /build /host && rm -rf /var/lib/apt/lists/*;\n\n##use more cores to build faster, hopefully without running out of VirtualMemory\nARG MAKEFLAGS=\"-j$(nproc)\"\n\n##We need a specific version of the Berkeley database for wallet functionality\nARG BERKELEY_DB_URL=https://download.oracle.com/berkeley-db\nARG BERKELEY_DB_PACKAGE=db-4.8.30.NC.tar.gz\nARG BERKELEY_DB_PACKAGE_HASH=a14a5486d6b4891d2434039a0ed4c5b7\nWORKDIR /build\nRUN \\\n  wget $BERKELEY_DB_URL/$BERKELEY_DB_PACKAGE \\\n&& echo \"$BERKELEY_DB_PACKAGE_HASH $BERKELEY_DB_PACKAGE\" | md5sum -c \\\n&& tar -xzf $BERKELEY_DB_PACKAGE \\\n&& cd ./db-4.8.30.NC/build_unix/ \\\n&& ../dist/configure --prefix=/usr/local \\\n  --disable-shared \\\n  --enable-cxx \\\n  --with-pic \\\n&& make \\\n&& make check \\\n&& make install\n\n##Install Node source code and dependencies\nARG NODE_GIT_URL=https://github.com/CommerciumBlockchain/Commercium.git\nARG NODE_GIT_CHECKOUT\n##The NODE_GIT_CHECKOUT can be a branch, commit, tag, release, or omitted entierly for the latest code base\n#ARG NODE_GIT_CHECKOUT=v0.1-17\n#ARG NODE_GIT_CHECKOUT=0.17.0-bitnode\n\nRUN \\\n  git clone \"$NODE_GIT_URL\"\nWORKDIR /build/Commercium\nRUN \\\n  if [ \"$NODE_GIT_CHECKOUT\" ] ; then \\\n    git checkout -b $NODE_GIT_CHECKOUT \\\n  ; fi\n\n##LibSodium dependency for Ubuntu 14, 18 and windows\nRUN \\\n  if ! [ $(cut -d \" \" -f 2 /etc/issue |  cut -d . -f 1) = \"16\" ] ; then \\\n    git submodule update --init --recursive \\\n  ; fi\n\n##LibSodium for ubuntu 16\nARG LIBSODIUM_URL=https://download.libsodium.org/libsodium/releases/old\nARG LIBSODIUM_PACKAGE=libsodium-1.0.13.tar.gz\nARG LIBSODIUM_PACKAGE_HASH=f38aac160a4bd05f06f743863e54e499\nWORKDIR /build\nRUN \\\n  if [ $(cut -d \" \" -f 2 /etc/issue |  cut -d . -f 1) = \"16\" ] ; then \\\n    wget $LIBSODIUM_URL/$LIBSODIUM_PACKAGE \\\n&&  echo \"$LIBSODIUM_PACKAGE_HASH $LIBSODIUM_PACKAGE\" | md5sum -c \\\n&&  tar xzf $LIBSODIUM_PACKAGE \\\n&&  mv libsodium-1.0.13/* /build/Commercium/depends/libsodium/ \\\n  ; fi\n\nWORKDIR /build/Commercium/depends/libsodium\nRUN \\\n\n  if ! [ $(cut -d \" \" -f 2 /etc/issue |  cut -d . -f 1) = \"16\" ]  ; then \\\n    ./autogen.sh \\\n  ; fi \\\n&& ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" \\\n&& make \\\n&& make check \\\n&& make install\n\n##Install uniValue for linux servers and hosts\nWORKDIR /build/Commercium/src/univalue\nRUN \\\n  if [ \"$SERVER\" ] ; then \\\n    ./autogen.sh \\\n&& ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --prefix=/usr/local \\\n&& make \\\n&& make check \\\n&& make install \\\n  ; fi\n\n##use fewer cores for building the node to prevent errors\nARG MAKEFLAGS=-j2\n\n#~~~~~ START LINUX ~~~~~-\nWORKDIR /build/Commercium\nRUN \\\n  if [ \"$LOS_TYPE\" ] ; then \\\n    if [ \"$SERVER\" ] ; then \\\n#Build options more useful for servers\n      configflags=\"--disable-wallet --enable-debug --enable-upnp-default --with-miniupnpc --with-system-univalue --with-utils=yes\" \\\n    ; else \\\n#Build options more useful for end users\n      configflags=\"--disable-shared --with-seeder=no\" \\\n    ; fi \\\n&&  ./autogen.sh \\\n&& ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --disable-bench --disable-tests $configflags \\\n  ; else \\\n#Build options more useful for end users\n      configflags=\"--disable-shared --with-seeder=no\" \\\n    ; fi \\\n\n\n  fi\n\nRUN \\\n  if [ \"$LOS_TYPE\" ] ; then \\\n    make \\\n&&  make check \\\n  ; fi\n\n#Prepare the Linux files for export\nWORKDIR /build\nRUN \\\n  if [ \"$LOS_TYPE\" ] ; then \\\n    if [ \"$SERVER\" ] ; then \\\n      ostype=$LOS_TYPE \\\n&&    mkdir /root/.commercium \\\n    ; else \\\n      ostype=qt-$LOS_TYPE \\\n    ; fi \\\n&&  if ! [ -d export ] ; then mkdir export ; fi \\\n&&  mkdir commercium-$ostype \\\n&&  cp Commercium/src/commerciumd commercium-$ostype/ \\\n&&  if [ -f Commercium/src/commercium-cli ] ; then \\\n      cp Commercium/src/commercium-cli Commercium/src/commercium-tx commercium-$ostype/ \\\n    ; fi \\\n&&  if [ -f Commercium/src/commercium-seeder ] ; then \\\n      cp Commercium/src/commercium-seeder commercium-$ostype/ \\\n    ; fi \\\n&&  if [ -f Commercium/src/qt/commercium-qt ] ; then \\\n      cp Commercium/src/qt/commercium-qt commercium-$ostype/ \\\n    ; fi \\\n&&  tar -czvf export/commercium$NODE_GIT_CHECKOUT-$ostype$OS_VER.tar.gz commercium-$ostype \\\n  ; rm export/commercium$NODE_GIT_CHECKOUT-$ostype$OS_VER.tar.gzelse \\\n      ostype=qt-$LOS_TYPE \\\n    ; fi \\\n\n\n\n\n\n\n\n\n\n\n\n\n\n  fi\n#~~~~~ END LINUX ~~~~~\n\n##use fewer cores for building the node to prevent errors\nARG MAKEFLAGS=-j1\n\n#~~~~~ START WIN ~~~~~\nWORKDIR /build/Commercium\nRUN \\\n  if [ \"$WOS_TYPE\" ] ; then \\\n#Lets only clean if we need to\n    if [ \"$LOS_TYPE\" ] ; then \\\n      make clean \\\n    ; fi \\\n#Windows requires some code changes to this file\n&&  sed -e 's/soln.size(), SolutionWidth);/\\/\\/soln.size(), SolutionWidth);/' -e '/\\else$/,/LogPrint/c\\ \\ \\ \\ \\ \\ \\ \\ }' -e 's/LogPrint/\\/\\/LogPrint/g' -e 's/crypto\\/equihash.h\"/crypto\\/equihash.h\"\\n#include \"compat\\/endian.h\"/' -i src/crypto/equihash.cpp \\\n&&  cd depends \\\n&&  make if [ \"$WOS_TYPE\" = \"win64\" ];then HOST=x86_64-w64-mingw32 ;else HOST=i686-w64-mingw32 ;fi \\\n  ; fi\n\nRUN \\\n  if [ \"$WOS_TYPE\" ] ; then \\\n    ./autogen.sh \\\n&& CONFIG_SITE=$PWD/depends/x86_64-w64-mingw32/share/config.site ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --disable-bench --disable-tests --disable-shared --with-seeder=no --prefix=/ \\\n  ; fi\n\nRUN \\\n  if [ \"$WOS_TYPE\" ] ; then \\\n  make CXXFLAGS=\"-W --param ggc-min-expand=1 --param ggc-min-heapsize=32768\" \\\n&&  make check \\\n  ; fi\n#~~~~~ END WIN ~~~~~\n#Prepare Windows files for export\nWORKDIR /build\nRUN \\\n  if [ \"$WOS_TYPE\" ] ; then \\\n      ostype=qt-$WOS_TYPE \\\n&&  if ! [ -d export ] ; then mkdir export ; fi \\\n&&  mkdir commercium-$ostype \\\n&&  cp Commercium/src/commercium*.exe commercium-$ostype/ \\\n&&  if [ -f Commercium/src/qt/commercium-qt.exe ] ; then \\\n      cp Commercium/src/qt/commercium-qt.exe commercium-$ostype/ \\\n    ; fi \\\n&&  zip -r export/commercium$NODE_GIT_CHECKOUT-$ostype$OS_VER.zip commercium-$ostype \\\n  ; fi\n#~~~~~ End Windows ~~~~~\n\nRUN \\\n  if [ \"$SERVER\" ] && [ \"$LOS_TYPE\" ] ; then \\\n    ostype=$LOS_TYPE \\\n  ; else \\\n    ostype=qt-$LOS_TYPE \\\n  ; fi \\\n&& if [ -f /build/export/commercium$NODE_GIT_CHECKOUT-$ostype$OS_VER.tar.gz ] ; then \\\n    echo \"Now run 'docker cp docker-cmm:/build/export/commercium$NODE_GIT_CHECKOUT-$ostype$OS_VER.tar.gz .' to save the Linux files you compiled.\" \\\n  ; fi \\\n&& if [ \"$SERVER\" ] && [ \"$WOS_TYPE\" ] ; then \\\n    ostype=$WOS_TYPE \\\n  ; else \\\n    ostype=qt-$WOS_TYPE \\\n  ; fi \\\n&& if [ -f /build/export/commercium$NODE_GIT_CHECKOUT-$ostype$OS_VER.zip ] ; then \\\n    echo \"Now run 'docker cp docker-cmm:/build/export/commercium-$NODE_GIT_CHECKOUT-$ostype$OS_VER.zip .' to save the Windows files you compiled.\" \\\n  ; fi\n\n#If you forgot the export flag you can set it here without needing to rebuild everything\n#ENV EXPORT 1\nCMD [\"bash\", \"-c\", \"if [ $EXPORT ];then cp /build/export/* /host/;fi\"]\n\n## You can run the linux node in docker if you want. Does not work with windows.\n## The blockchain will use an additional 5gigs of drive space.\n## To do so uncomment the whole next section and follow the instructions in doc/build-docker.md.\n\n#FROM ubuntu:$OS_VER as run\n#ARG OS_VER\n#ARG SERVER\n#ARG LOS_TYPE\n#ARG NODE_GIT_CHECKOUT\n#RUN \\\n#  apt-get update \\\n###UBUNTU 14 Run Dependencies\n#&& if [ \"$SERVER\" ] && [ \"$LOS_TYPE\" ] && [ $(cut -d \" \" -f 2 /etc/issue |  cut -d . -f 1) = \"14\" ] ; then \\\n#    DEBIAN_FRONTEND=noninteractive apt-get install -y software-properties-common \\\n#&&  DEBIAN_FRONTEND=noninteractive add-apt-repository -y ppa:ubuntu-toolchain-r/test \\\n#&&  apt-get update \\\n#&&  DEBIAN_FRONTEND=noninteractive apt-get install -y \\\n#    gcc-5 \\\n#    g++-5 \\\n#    libboost-chrono1.54 \\\n#    libboost-filesystem1.54 \\\n#    libboost-program-options1.54 \\\n#    libevent-pthreads-2.0-5 \\\n#    libboost-system1.54.0 \\\n#    libboost-thread1.54.0 \\\n#    libevent-2.0-5 \\\n#    libminiupnpc8 \\\n#    libssl-dev \\\n#    libzmq3 \\\n#&&  update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-5 60 --slave /usr/bin/g++ g++ /usr/bin/g++-5 \\\n#&&  update-alternatives --config gcc \\\n#  ; fi \\\n###UBUNTU 16 Run Dependencies\n#&& if [ \"$SERVER\" ] && [ \"$LOS_TYPE\" ] && [ $(cut -d \" \" -f 2 /etc/issue |  cut -d . -f 1) = \"16\" ] ; then \\\n#    DEBIAN_FRONTEND=noninteractive apt-get install -y \\\n#    libboost-chrono1.58 \\\n#    libboost-filesystem1.58 \\\n#    libboost-program-options1.58 \\\n#    libevent-pthreads-2.0-5 \\\n#    libboost-system1.58.0 \\\n#    libboost-thread1.58.0 \\\n#    libevent-2.0-5 \\\n#    libminiupnpc10 \\\n#    libssl-dev \\\n#    libzmq5 \\\n#  ; fi \\\n###Ubuntu 18 Run Dependencies\n#&& if [ \"$SERVER\" ] && [ \"$LOS_TYPE\" ] && [ $(cut -d \" \" -f 2 /etc/issue |  cut -d . -f 1) = \"18\" ] ; then \\\n#    DEBIAN_FRONTEND=noninteractive apt-get install -y \\\n#    libboost-chrono1.65.1 \\\n#    libboost-filesystem1.65.1 \\\n#    libboost-program-options1.65.1 \\\n#    libevent-pthreads-2.1-6 \\\n#    libboost-system1.65.1 \\\n#    libboost-thread1.65.1 \\\n#    libevent-2.1-6 \\\n#    libminiupnpc10 \\\n#    libssl-dev \\\n#    libzmq5 \\\n#  ; fi\n#\n#WORKDIR /root\n#EXPOSE 8332\n#RUN \\\n#  if [ \"$SERVER\" ] ; then \\\n#    mkdir .commercium \\\n## ~~~~ IT WOULD BE REALLY SMART TO CHANGE THE rpcuser= AND rpcpassword= ~~~~\n#&&  printf \"server=1\\nwhitelist=127.0.0.1\\ntxindex=1\\naddressindex=1\\ntimestampindex=1\\nspentindex=1\\nzmqpubrawtx=tcp://127.0.0.1:26531\\nzmqpubhashblock=tcp://127.0.0.1:26531\\nrpcallowip=127.0.0.1\\nrpcuser=comcorenode\\nrpcpassword=poAVis2e34r\\nuacomment=bitcore\\nrpcport=8332\" > .commercium/commercium.conf \\\n#  ; fi\n#ARG LOS_TYPE\n#COPY --from=0 /usr/local/lib/libunivalue.so.0.100.2 /usr/local/lib/libsodium.so.*.0 /usr/local/lib/libunivalue.a /usr/local/lib/libunivalue.la /usr/local/lib/libsodium.la /usr/local/lib/libsodium.a /usr/local/lib/\n#COPY --from=0 /build/commercium-$LOS_TYPE-server/commercium* ./\n#RUN ldconfig\n#CMD [\"/bin/bash\", \"-c\", \"./commerciumd\"]\n"
}