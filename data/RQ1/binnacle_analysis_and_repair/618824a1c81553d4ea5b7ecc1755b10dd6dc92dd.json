{
  "startTime": 1674236257834,
  "endTime": 1674236258767,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 72,
        "lineEnd": 72,
        "columnStart": 2,
        "columnEnd": 100
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 113,
        "lineEnd": 113,
        "columnStart": 2,
        "columnEnd": 93
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 114,
        "lineEnd": 114,
        "columnStart": 2,
        "columnEnd": 73
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 123,
        "lineEnd": 123,
        "columnStart": 4,
        "columnEnd": 53
      }
    },
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 121,
        "lineEnd": 121,
        "columnStart": 2,
        "columnEnd": 35
      }
    },
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 200,
        "lineEnd": 200,
        "columnStart": 4,
        "columnEnd": 47
      }
    },
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 201,
        "lineEnd": 201,
        "columnStart": 4,
        "columnEnd": 44
      }
    },
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 202,
        "lineEnd": 202,
        "columnStart": 4,
        "columnEnd": 24
      }
    },
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 203,
        "lineEnd": 203,
        "columnStart": 39,
        "columnEnd": 79
      }
    },
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 204,
        "lineEnd": 204,
        "columnStart": 44,
        "columnEnd": 94
      }
    },
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 205,
        "lineEnd": 205,
        "columnStart": 38,
        "columnEnd": 76
      }
    },
    {
      "rule": "gpgUseBatchFlag",
      "position": {
        "lineStart": 111,
        "lineEnd": 111,
        "columnStart": 2,
        "columnEnd": 66
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 15,
        "lineEnd": 24,
        "columnStart": 2,
        "columnEnd": 14
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 40,
        "lineEnd": 40,
        "columnStart": 2,
        "columnEnd": 83
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 60,
        "lineEnd": 68,
        "columnStart": 2,
        "columnEnd": 14
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 125,
        "lineEnd": 125,
        "columnStart": 27,
        "columnEnd": 76
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 15,
        "lineEnd": 24,
        "columnStart": 2,
        "columnEnd": 14
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 40,
        "lineEnd": 40,
        "columnStart": 2,
        "columnEnd": 83
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 60,
        "lineEnd": 68,
        "columnStart": 2,
        "columnEnd": 14
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 125,
        "lineEnd": 125,
        "columnStart": 27,
        "columnEnd": 76
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM ubuntu:16.10\nMAINTAINER Juergen Schackmann\n\n# -----------------------------------------------------------------------------\n# General environment variables\n# -----------------------------------------------------------------------------\nENV DEBIAN_FRONTEND=noninteractive\n\n\n# -----------------------------------------------------------------------------\n# Install system basics\n# -----------------------------------------------------------------------------\nRUN \\\n  apt-get update -qqy && \\\n  apt-get install --no-install-recommends -qqy --allow-unauthenticated \\\n          apt-transport-https \\\n          python-software-properties \\\n          software-properties-common \\\n          curl \\\n          expect \\\n          zip \\\n          libsass-dev \\\n          git \\\n          sudo && rm -rf /var/lib/apt/lists/*;\n\n\n# -----------------------------------------------------------------------------\n# Install Java\n# -----------------------------------------------------------------------------\nARG JAVA_VERSION\nENV JAVA_VERSION ${JAVA_VERSION:-8}\n\nENV JAVA_HOME ${JAVA_HOME:-/usr/lib/jvm/java-${JAVA_VERSION}-oracle}\n\nRUN \\\n  add-apt-repository ppa:webupd8team/java -y && \\\n  echo oracle-java8-installer shared/accepted-oracle-license-v1-1 select true | \\\n  /usr/bin/debconf-set-selections && \\\n  apt-get update -qqy && \\\n  apt-get install --no-install-recommends -qqy --allow-unauthenticated oracle-java${JAVA_VERSION}-installer && rm -rf /var/lib/apt/lists/*;\n\n\n# -----------------------------------------------------------------------------\n# Install Android / Android SDK / Android SDK elements\n# -----------------------------------------------------------------------------\n\nENV ANDROID_HOME /opt/android-sdk-linux\nENV PATH ${PATH}:${ANDROID_HOME}/tools:${ANDROID_HOME}/tools/bin:${ANDROID_HOME}/platform-tools:/opt/tools\n\nARG ANDROID_PLATFORMS_VERSION\nENV ANDROID_PLATFORMS_VERSION ${ANDROID_PLATFORMS_VERSION:-25}\n\nARG ANDROID_BUILD_TOOLS_VERSION\nENV ANDROID_BUILD_TOOLS_VERSION ${ANDROID_BUILD_TOOLS_VERSION:-25.0.3}\n\nRUN \\\n  echo ANDROID_HOME=${ANDROID_HOME} >> /etc/environment && \\\n  dpkg --add-architecture i386 && \\\n  apt-get update -qqy && \\\n  apt-get install --no-install-recommends -qqy --allow-unauthenticated \\\n          gradle \\\n          libc6-i386 \\\n          lib32stdc++6 \\\n          lib32gcc1 \\\n          lib32ncurses5 \\\n          lib32z1 \\\n          qemu-kvm \\\n          kmod && \\\n  cd /opt && \\\n  mkdir android-sdk-linux && \\\n  cd android-sdk-linux && \\\n  curl -f -SLo sdk-tools-linux.zip https://dl.google.com/android/repository/sdk-tools-linux-3859397.zip && \\\n  unzip sdk-tools-linux.zip && \\\n  rm -f sdk-tools-linux.zip && \\\n  chmod 777 ${ANDROID_HOME} -R && \\\n  mkdir -p ${ANDROID_HOME}/licenses && \\\n  echo 8933bad161af4178b1185d1a37fbf41ea5269c55 > ${ANDROID_HOME}/licenses/android-sdk-license && \\\n  sdkmanager \"tools\" && \\\n  sdkmanager \"platform-tools\" && \\\n  sdkmanager \"platforms;android-${ANDROID_PLATFORMS_VERSION}\" && \\\n  sdkmanager \"build-tools;${ANDROID_BUILD_TOOLS_VERSION}\" && rm -rf /var/lib/apt/lists/*;\n\n\n# -----------------------------------------------------------------------------\n# Install Node, NPM, yarn\n# -----------------------------------------------------------------------------\nARG NODE_VERSION\nENV NODE_VERSION ${NODE_VERSION:-6.9.5}\n\nARG NPM_VERSION\nENV NPM_VERSION ${NPM_VERSION:-5.3.0}\n\nARG PACKAGE_MANAGER\nENV PACKAGE_MANAGER ${PACKAGE_MANAGER:-npm}\n\nENV NPM_CONFIG_LOGLEVEL info\n\n# gpg keys listed at https://github.com/nodejs/node\nRUN \\\n  set -ex \\\n  && for key in \\\n    9554F04D7259F04124DE6B476D5A82AC7E37093B \\\n    94AE36675C464D64BAFA68DD7434390BDBE9B9C5 \\\n    0034A06D9D9B0064CE8ADF6BF1747F4AD2306D93 \\\n    FD3A5288F042B6850C66B31F09FE44734EB7990E \\\n    71DCFD284A79C3B38668286BC97EC7A07EDE3FC1 \\\n    DD8F2338BAE7501E3DD5AC78C273792F7D83545D \\\n    B9AE9905FFD7803F25714661B63B535A4C206CA9 \\  \n    C4F0DFFF4E8C1A8236409D08E73BC641CC11F4C8; \\\n  do \\\n  gpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys \"${key}\"; \\\n  done && \\\n  curl -f -SLO \"https://nodejs.org/dist/v${NODE_VERSION}/node-v${NODE_VERSION}-linux-x64.tar.xz\" && \\\n  curl -f -SLO \"https://nodejs.org/dist/v${NODE_VERSION}/SHASUMS256.txt.asc\" && \\\n  gpg --batch --decrypt --output SHASUMS256.txt SHASUMS256.txt.asc && \\\n  grep \" node-v${NODE_VERSION}-linux-x64.tar.xz\\$\" SHASUMS256.txt | sha256sum -c - && \\\n  tar -xJf \"node-v${NODE_VERSION}-linux-x64.tar.xz\" -C /usr/local --strip-components=1 && \\\n  rm \"node-v${NODE_VERSION}-linux-x64.tar.xz\" SHASUMS256.txt.asc SHASUMS256.txt && \\\n  ln -s /usr/local/bin/node /usr/local/bin/nodejs && \\\n  chmod 777 /usr/local/lib/node_modules -R && \\\n  npm install -g npm@${NPM_VERSION} && \\\n  if [ \"${PACKAGE_MANAGER}\" = \"yarn\" ]; then \\\n    curl -f -sS https://dl.yarnpkg.com/debian/pubkey.gpg | apt-key add - && \\\n    echo \"deb https://dl.yarnpkg.com/debian/ stable main\" | tee /etc/apt/sources.list.d/yarn.list && \\\n    apt-get update -qqy && apt-get install --no-install-recommends -qqy --allow-unauthenticated yarn; rm -rf /var/lib/apt/lists/*; \\\n  fi && npm cache clean --force;\n\n\n# -----------------------------------------------------------------------------\n# Clean up\n# -----------------------------------------------------------------------------\nRUN \\\n  apt-get clean && \\\n  apt-get autoclean && \\\n  rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*\n\n\n# -----------------------------------------------------------------------------\n# Create a non-root docker user to run this container\n# -----------------------------------------------------------------------------\nARG USER\nENV USER ${USER:-ionic}\n\nRUN \\\n  # create user with appropriate rights, groups and permissions\n  useradd --user-group --create-home --shell /bin/false ${USER} && \\\n  echo \"${USER}:${USER}\" | chpasswd && \\\n  adduser ${USER} sudo && \\\n  adduser ${USER} root && \\\n  chmod 770 / && \\\n  usermod -a -G root ${USER} && \\\n\n  # create the file and set permissions now with root user  \n  mkdir /app && chown ${USER}:${USER} /app && chmod 777 /app && \\\n\n  # create the file and set permissions now with root user\n  touch /image.config && chown ${USER}:${USER} /image.config && chmod 777 /image.config && \\\n\n  # this is necessary for ionic commands to run\n  mkdir /home/${USER}/.ionic && chown ${USER}:${USER} /home/${USER}/.ionic && chmod 777 /home/${USER}/.ionic && \\\n\n  # this is necessary to install global npm modules\n  chmod 777 /usr/local/bin\n  #&& chown ${USER}:${USER} ${ANDROID_HOME} -R\n\n\n# -----------------------------------------------------------------------------\n# Copy start.sh and set permissions\n# -----------------------------------------------------------------------------\nCOPY start.sh /start.sh\nRUN chown ${USER}:${USER} /start.sh && chmod 777 /start.sh\n\n\n# -----------------------------------------------------------------------------\n# Switch the user of this image only now, because previous commands need to be\n# run as root\n# -----------------------------------------------------------------------------\nUSER ${USER}\n\n\n# -----------------------------------------------------------------------------\n# Install Global node modules\n# -----------------------------------------------------------------------------\n\nARG CORDOVA_VERSION\nENV CORDOVA_VERSION ${CORDOVA_VERSION:-7.0.1}\n\nARG IONIC_VERSION\nENV IONIC_VERSION ${IONIC_VERSION:-3.12.0}\n\nARG TYPESCRIPT_VERSION\nENV TYPESCRIPT_VERSION ${TYPESCRIPT_VERSION:-2.3.4}\n\nARG GULP_VERSION\nENV GULP_VERSION ${GULP_VERSION}\n\nRUN \\\n  if [ \"${PACKAGE_MANAGER}\" != \"yarn\" ]; then \\\n    export PACKAGE_MANAGER=\"npm\" && \\\n    npm install -g cordova@\"${CORDOVA_VERSION}\" && \\\n    npm install -g cordova-hot-code-push-cli && \\\n    npm install -g bower && \\\n    if [ -n \"${IONIC_VERSION}\" ]; then npm install -g ionic@\"${IONIC_VERSION}\"; fi && \\\n    if [ -n \"${TYPESCRIPT_VERSION}\" ]; then npm install -g typescript@\"${TYPESCRIPT_VERSION}\"; fi && \\\n    if [ -n \"${GULP_VERSION}\" ]; then npm install -g gulp@\"${GULP_VERSION}\"; fi && npm cache clean --force; \\\n  else \\\n    yarn global add cordova@\"${CORDOVA_VERSION}\" && \\\n    yarn global add cordova-hot-code-push-cli && \\\n    yarn global add bower && \\\n    if [ -n \"${IONIC_VERSION}\" ]; then yarn global add ionic@\"${IONIC_VERSION}\"; fi && \\\n    if [ -n \"${TYPESCRIPT_VERSION}\" ]; then yarn global add typescript@\"${TYPESCRIPT_VERSION}\"; fi && \\\n    if [ -n \"${GULP_VERSION}\" ]; then yarn global add gulp@\"${GULP_VERSION}\"; fi \\\n  fi && \\\n  ${PACKAGE_MANAGER} cache clean --force\n\n\n# -----------------------------------------------------------------------------\n# Create the image.config file for the container to check the build\n# configuration of this container later on\n# -----------------------------------------------------------------------------\nRUN \\\necho \"USER: ${USER}\\n\\\nJAVA_VERSION: ${JAVA_VERSION}\\n\\\nANDROID_PLATFORMS_VERSION: ${ANDROID_PLATFORMS_VERSION}\\n\\\nANDROID_BUILD_TOOLS_VERSION: ${ANDROID_BUILD_TOOLS_VERSION}\\n\\\nNODE_VERSION: ${NODE_VERSION}\\n\\\nNPM_VERSION: ${NPM_VERSION}\\n\\\nPACKAGE_MANAGER: ${PACKAGE_MANAGER}\\n\\\nCORDOVA_VERSION: ${CORDOVA_VERSION}\\n\\\nIONIC_VERSION: ${IONIC_VERSION}\\n\\\nTYPESCRIPT_VERSION: ${TYPESCRIPT_VERSION}\\n\\\nGULP_VERSION: ${GULP_VERSION:-none}\\n\\\n\" >> /image.config && \\\ncat /image.config\n\n\n# -----------------------------------------------------------------------------\n# Generate an Ionic default app (do this with root user, since we will not\n# have permissions for /app otherwise), install the dependencies\n# and add and build android platform\n# -----------------------------------------------------------------------------\nRUN \\\n  cd / && \\\n  ionic config set -g backend legacy || true && \\\n  ionic start app blank --type ionic-angular --no-deps --no-link --no-git || && \\\n  cd /app && \\\n  ${PACKAGE_MANAGER} install && \\\n  gulp _build-qm-android\n  #ionic cordova platform add android --no-resources && \\\n  #ionic cordova build android\n\n\n# -----------------------------------------------------------------------------\n# Just in case you are installing from private git repositories, enable git\n# credentials\n# -----------------------------------------------------------------------------\nRUN git config --global credential.helper store\n\n\n# -----------------------------------------------------------------------------\n# WORKDIR is the generic /app folder. All volume mounts of the actual project\n# code need to be put into /app.\n# -----------------------------------------------------------------------------\nWORKDIR /app\n\n\n# -----------------------------------------------------------------------------\n# The script start.sh installs package.json and puts a watch on it. This makes\n# sure that the project has allways the latest dependencies installed.\n# -----------------------------------------------------------------------------\nENTRYPOINT [\"/start.sh\"]\n\n\n# -----------------------------------------------------------------------------\n# After /start.sh the bash is called.\n# -----------------------------------------------------------------------------\nCMD [\"ionic\", \"serve\", \"-b\", \"-p\", \"8100\", \"--address\", \"0.0.0.0\"]\n"
}