{
  "startTime": 1674235529679,
  "endTime": 1674235529774,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 36,
        "lineEnd": 36,
        "columnStart": 4,
        "columnEnd": 48
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 42,
        "lineEnd": 42,
        "columnStart": 4,
        "columnEnd": 22
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 65,
        "lineEnd": 65,
        "columnStart": 4,
        "columnEnd": 26
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 22,
        "lineEnd": 28,
        "columnStart": 22,
        "columnEnd": 23
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# Copyright 2016 Hewlett Packard Enterprise Development LP\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n# the License. You may obtain a copy of the License at\n#\n# http://www.apache.org/licenses/LICENSE-2.0\n# Unless required by applicable law or agreed to in writing, software distributed under the License is distributed\n# on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for\n# the specific language governing permissions and limitations under the License.\n\n# Start from ubuntu 14.04\nFROM ubuntu:14.04\n\nMAINTAINER Karen Brems <karen.brems@hpe.com>\n\n# pick up proxy from command line arguement to docker build command\nARG proxy\nENV http_proxy ${proxy}\nENV https_proxy ${proxy}\n\n# install dependencies\n# install nose2 for python 2 so we can run OVL tests\nRUN apt-get update && apt-get install --no-install-recommends -y \\\n        curl \\\n        g++ \\\n        python-numpy \\\n        python-nose2 \\\n        wget \\\n        build-essential \\\n        && \\\n    apt-get clean && \\\n    rm -rf /var/lib/apt/lists/*\n\n# get pip2 and pip3\n# note, this generates a warning due to missing ca cert.\n# need to figure out how to get ssl certs inside docker or just ignore with curl -k option?\nRUN curl -f -O https://bootstrap.pypa.io/get-pip.py && \\\n    python get-pip.py && \\\n    python3 get-pip.py && \\\n    rm get-pip.py\n\n# install nose2 for python 3\nRUN pip3 install --no-cache-dir nose2\n\n# Install TensorFlow CPU version for both python2.7 and python 3.4.\nENV TENSORFLOW_VERSION 0.11.0\nRUN pip2 --no-cache-dir install --upgrade \\\n    https://storage.googleapis.com/tensorflow/linux/cpu/tensorflow-${TENSORFLOW_VERSION}-cp27-none-linux_x86_64.whl\nRUN pip3 --no-cache-dir install --upgrade \\\n    https://storage.googleapis.com/tensorflow/linux/cpu/tensorflow-${TENSORFLOW_VERSION}-cp34-cp34m-linux_x86_64.whl\n\n# set default workdir\nWORKDIR /usr/opveclib\n\n# install protoc 3.0.0 and its C++ libraries\n#RUN wget --no-check-certificate  https://github.com/google/protobuf/releases/download/v3.0.0-beta-2/protobuf-cpp-3.0.0-beta-2.tar.gz\n#RUN tar xvf protobuf-cpp-3.0.0-beta-2.tar.gz\n#RUN cd protobuf-3.0.0-beta-2/\n#RUN /usr/opveclib/protobuf-3.0.0-beta-2/configure\n#RUN make\n#RUN make install\n#RUN ldconfig\n\n# install sphinx so we can run doctest\n# note we use the python3 version here and the python2 version for gpu to get better coverage\nRUN pip3 install --no-cache-dir -U sphinx\n\n# copy opveclib source that was already cloned from github via jenkins\nCOPY opveclib /usr/opveclib/opveclib\nCOPY documentation /usr/opveclib/documentation\nCOPY README.rst /usr/opveclib/\nCOPY setup.py /usr/opveclib/\nCOPY runBAT.sh /usr/opveclib/\nCOPY runALL.sh /usr/opveclib/\nCOPY nose2.cfg /usr/opveclib/\n\n\nCMD /bin/bash\n"
}