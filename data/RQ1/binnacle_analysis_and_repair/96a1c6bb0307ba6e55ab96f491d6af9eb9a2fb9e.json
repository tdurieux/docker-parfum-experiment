{
  "startTime": 1674244105432,
  "endTime": 1674244105513,
  "originalSmells": [
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 31,
        "lineEnd": 31,
        "columnStart": 4,
        "columnEnd": 73
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 33,
        "lineEnd": 33,
        "columnStart": 48,
        "columnEnd": 69
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "#\n# Dockerfile for an image with the currently checked out version of zipline installed. To build:\n#\n#    docker build -t quantopian/ziplinedev -f Dockerfile-dev .\n#\n# Note: the dev build requires a quantopian/zipline image, which you can build as follows:\n#\n#    docker build -t quantopian/zipline -f Dockerfile\n#\n# To run the container:\n#\n#    docker run -v /path/to/your/notebooks:/projects -v ~/.zipline:/root/.zipline -p 8888:8888/tcp --name ziplinedev -it quantopian/ziplinedev\n#\n# To access Jupyter when running docker locally (you may need to add NAT rules):\n#\n#    https://127.0.0.1\n#\n# default password is jupyter.  to provide another, see:\n#    http://jupyter-notebook.readthedocs.org/en/latest/public_server.html#preparing-a-hashed-password\n#\n# once generated, you can pass the new value via `docker run --env` the first time\n# you start the container.\n#\n# You can also run an algo using the docker exec command.  For example:\n#\n#    docker exec -it ziplinedev zipline run -f /projects/my_algo.py --start 2015-1-1 --end 2016-1-1 /projects/result.pickle\n#\nFROM quantopian/zipline\n\nWORKDIR /zipline\n\nRUN pip install --no-cache-dir -r etc/requirements_dev.txt -r\n# Clean out any cython assets. The pip install re-builds them.\nRUN find . -type f -name '*.c' -exec rm {} + && pip install --no-cache-dir -e .[all]\n"
}