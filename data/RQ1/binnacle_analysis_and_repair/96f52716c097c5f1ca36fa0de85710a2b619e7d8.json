{
  "startTime": 1674241000513,
  "endTime": 1674241000847,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 28,
        "lineEnd": 28,
        "columnStart": 5,
        "columnEnd": 82
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 29,
        "lineEnd": 29,
        "columnStart": 5,
        "columnEnd": 25
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM ubuntu:18.04 as shark-provider\nMAINTAINER OrfeoToolbox Core Team\n\nENV DEBIAN_FRONTEND noninteractive\n\n# ----------------------------------------------------------------------------\n# First stage : install tools\n# (based on https://github.com/Shark-ML/Shark/blob/master/.travis.yml)\n# ----------------------------------------------------------------------------\n\nRUN apt-get update -y \\\n  && apt-get upgrade -y \\\n  && apt-get install -y --no-install-recommends \\\n        ca-certificates \\\n        g++ \\\n        make \\\n        cmake \\\n        libboost-date-time-dev \\\n        libboost-filesystem-dev \\\n        libboost-graph-dev \\\n        libboost-program-options-dev \\\n        libboost-system-dev \\\n        libboost-thread-dev \\\n        libcurl4-gnutls-dev \\\n        curl \\\n  && rm -rf /var/lib/apt/lists/*\n\nRUN cd \\tmp \\\n  && curl -f -o shark.tar.gz https://codeload.github.com/Shark-ML/Shark/tar.gz/v3.1.4 \\\n  && tar xzf shark.tar.gz \\\n  && cd Shark-3.1.4 \\\n  && mkdir build \\\n  && cd build \\\n  && cmake  -DBUILD_EXAMPLES:BOOL=OFF \\\n            -DBUILD_TESTING:BOOL=OFF \\\n            -DENABLE_HDF5:BOOL=OFF \\\n            -DBUILD_SHARED_LIBS=ON \\\n            -DENABLE_CBLAS:BOOL=OFF \\\n            -DENABLE_OPENMP:BOOL=OFF \\\n            ../. \\\n  && make install && rm shark.tar.gz\n\nFROM ubuntu:18.04\nMAINTAINER Sebastien Dinot <sebastien.dinot@c-s.fr>\n\nENV DEBIAN_FRONTEND noninteractive\n\nRUN echo \"Europe/Paris\" > /etc/timezone\n\n# ----------------------------------------------------------------------------\n# First stage : install tools (they rarely evolve)\n# ----------------------------------------------------------------------------\nRUN apt-get update -y \\\n && apt-get upgrade -y \\\n && apt-get install -y --no-install-recommends \\\n        ca-certificates \\\n        curl \\\n        make \\\n        cmake \\\n        ninja-build \\\n        g++ \\\n        gcc \\\n        clang \\\n        clang-tidy \\\n        clang-format \\\n        ccache \\\n        git \\\n        libtool \\\n        swig \\\n        xvfb \\\n && rm -rf /var/lib/apt/lists/*\n\n# ----------------------------------------------------------------------------\n# Second stage : dependencies (they evolve more often)\n# ----------------------------------------------------------------------------\n\nRUN apt-get update -y \\\n && apt-get upgrade -y \\\n && apt-get install -y --no-install-recommends \\\n        freeglut3-dev \\\n        libboost-date-time-dev \\\n        libboost-filesystem-dev \\\n        libboost-graph-dev \\\n        libboost-program-options-dev \\\n        libboost-system-dev \\\n        libboost-thread-dev \\\n        libcurl4-gnutls-dev \\\n        libexpat1-dev \\\n        libfftw3-dev \\\n        libgdal-dev \\\n        libgeotiff-dev \\\n        libglew-dev \\\n        libglfw3-dev \\\n        libgsl-dev \\\n        libinsighttoolkit4-dev \\\n        libkml-dev \\\n        libmuparser-dev \\\n        libmuparserx-dev \\\n        libopencv-core-dev \\\n        libopencv-ml-dev \\\n        libopenmpi-dev \\\n        libopenthreads-dev \\\n        libossim-dev \\\n        libpng-dev \\\n        libqt5opengl5-dev \\\n        libqwt-qt5-dev \\\n        libsvm-dev \\\n        libtinyxml-dev \\\n        qtbase5-dev \\\n        qttools5-dev \\\n        default-jdk \\\n        python-dev \\\n        python-numpy \\\n        python-gdal \\\n        python3-dev \\\n        python3-numpy \\\n        python3-gdal \\\n && rm -rf /var/lib/apt/lists/*\n\nCOPY --from=shark-provider /usr/local/include/shark/* /usr/include/shark/\nCOPY --from=shark-provider /usr/local/lib/libshark* /usr/lib/\nCOPY --from=shark-provider /usr/local/bin/SharkVersion /usr/bin/\nCOPY --from=shark-provider /usr/local/lib/cmake/ /usr/lib/cmake/\n\nENV PATH /usr/lib/ccache:$PATH\nENV OTB_USE_SHARK ON\n"
}