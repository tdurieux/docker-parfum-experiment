{
  "startTime": 1674235410622,
  "endTime": 1674235410869,
  "originalSmells": [
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 15,
        "lineEnd": 23,
        "columnStart": 4,
        "columnEnd": 8
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 25,
        "lineEnd": 30,
        "columnStart": 4,
        "columnEnd": 54
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 33,
        "lineEnd": 36,
        "columnStart": 4,
        "columnEnd": 15
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 25,
        "lineEnd": 30,
        "columnStart": 4,
        "columnEnd": 54
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 33,
        "lineEnd": 36,
        "columnStart": 4,
        "columnEnd": 15
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 15,
        "lineEnd": 23,
        "columnStart": 4,
        "columnEnd": 8
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 25,
        "lineEnd": 30,
        "columnStart": 4,
        "columnEnd": 54
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 33,
        "lineEnd": 36,
        "columnStart": 4,
        "columnEnd": 15
      }
    }
  ],
  "repairedSmells": [
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 25,
        "lineEnd": 30,
        "columnStart": 4,
        "columnEnd": 54
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 33,
        "lineEnd": 36,
        "columnStart": 4,
        "columnEnd": 15
      }
    }
  ],
  "repairedDockerfile": "## Dockerfile to build opencv from sources with CUDA support\n## Based on Josip Janzic file and Thomas Herbin's work\n\n# FROM nvidia/cuda:9.0-devel\nFROM nvidia/cuda:9.0-cudnn7-runtime-ubuntu16.04\nMAINTAINER Fergal Cotter <fbc23@cam.ac.uk>\n\n###########################\n### TENSORFLOW INSTALL  ###\n###########################\n\nARG https_proxy\nARG http_proxy\n\nRUN apt-get update && \\\n    apt-get install --no-install-recommends -y \\\n    build-essential \\\n    cmake \\\n    git \\\n    wget \\\n    unzip \\\n    yasm \\\n    pkg-config \\\n    curl && rm -rf /var/lib/apt/lists/*;\n\nRUN apt-get install --no-install-recommends -y \\\n    libswscale-dev libtbb2 libtbb-dev libjpeg-dev libpng-dev libtiff-dev \\\n    libjasper-dev libavformat-dev libpq-dev libxine2-dev libglew-dev \\\n    libtiff5-dev zlib1g-dev libjpeg-dev libpng12-dev libjasper-dev \\\n    libavcodec-dev libavformat-dev libavutil-dev libpostproc-dev \\\n\tlibswscale-dev libeigen3-dev libtbb-dev libgtk2.0-dev && rm -rf /var/lib/apt/lists/*;\n    # libcudnn7=7.1.4.18-1+cuda9.0\n\nRUN apt-get install --no-install-recommends -y \\\n    python3-dev \\\n    python3-numpy \\\n    python3-pip && rm -rf /var/lib/apt/lists/*;\n\n## Cleanup\nRUN rm -rf /var/lib/apt/lists/*\n\n# Python dependencies\nRUN pip3 --no-cache-dir install \\\n    numpy \\\n    hdf5storage \\\n    h5py \\\n    scipy \\\n    py3nvml\n\n# Install tensorflow\nRUN pip3 --no-cache-dir install tensorflow-gpu==1.8.0\n\n# Set the library path to use cuda and cupti\nENV LD_LIBRARY_PATH /usr/local/cuda/extras/CUPTI/lib64:/usr/local/cuda/lib64:$LD_LIBRARY_PATH\n\n########################\n###  OPENCV INSTALL  ###\n########################\n\nARG OPENCV_VERSION=3.4.1\n# ARG OPENCV_INSTALL_PATH=/usr/local\n\n## Create install directory\n## Force success as the only reason for a fail is if it exist\n\n# RUN mkdir -p $OPENCV_INSTALL_PATH; exit 0\n\nWORKDIR /\n\n## Single command to reduce image size\n## Build opencv\nRUN wget https://github.com/opencv/opencv/archive/$OPENCV_VERSION.zip \\\n    && unzip $OPENCV_VERSION.zip \\\n    && mkdir /opencv-$OPENCV_VERSION/cmake_binary \\\n    && cd /opencv-$OPENCV_VERSION/cmake_binary \\\n    && cmake -DBUILD_TIFF=ON \\\n       -DBUILD_opencv_java=OFF \\\n       -DBUILD_SHARED_LIBS=OFF \\\n       -DWITH_CUDA=ON \\\n       # -DENABLE_FAST_MATH=1 \\\n       # -DCUDA_FAST_MATH=1 \\\n       -DWITH_CUBLAS=1 \\\n       -DCUDA_TOOLKIT_ROOT_DIR=/usr/local/cuda-9.0 \\\n       ##\n       ## Should compile for most card\n       ## 3.5 binary code for devices with compute capability 3.5 and 3.7,\n       ## 5.0 binary code for devices with compute capability 5.0 and 5.2,\n       ## 6.0 binary code for devices with compute capability 6.0 and 6.1,\n       -DCUDA_ARCH_BIN='3.0 3.5 5.0 6.0 6.2' \\\n       -DCUDA_ARCH_PTX=\"\" \\\n       ##\n       ## AVX in dispatch because not all machines have it\n       -DCPU_DISPATCH=AVX,AVX2 \\\n       -DENABLE_PRECOMPILED_HEADERS=OFF \\\n       -DWITH_OPENGL=OFF \\\n       -DWITH_OPENCL=OFF \\\n       -DWITH_QT=OFF \\\n       -DWITH_IPP=ON \\\n       -DWITH_TBB=ON \\\n       -DFORCE_VTK=ON \\\n       -DWITH_EIGEN=ON \\\n       -DWITH_V4L=ON \\\n       -DWITH_XINE=ON \\\n       -DWITH_GDAL=ON \\\n       -DWITH_1394=OFF \\\n       -DWITH_FFMPEG=OFF \\\n       -DBUILD_PROTOBUF=OFF \\\n       -DBUILD_TESTS=OFF \\\n       -DBUILD_PERF_TESTS=OFF \\\n       -DCMAKE_BUILD_TYPE=RELEASE \\\n       # -DCMAKE_INSTALL_PREFIX=$OPENCV_INSTALL_PATH \\\n    .. \\\n    ##\n    ## Add variable to enable make to use all cores\n    && export NUMPROC=$(nproc --all) \\\n    && make -j$NUMPROC install \\\n    ## Remove following lines if you need to move openCv\n    && rm /$OPENCV_VERSION.zip \\\n    && rm -r /opencv-$OPENCV_VERSION\n\n## Compress the openCV files so you can extract them from the docker easily\n# RUN tar cvzf opencv-$OPENCV_VERSION.tar.gz --directory=$OPENCV_INSTALL_PATH .\nWORKDIR /home\n"
}