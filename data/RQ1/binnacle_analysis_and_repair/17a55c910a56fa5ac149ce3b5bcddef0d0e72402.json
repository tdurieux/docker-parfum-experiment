{
  "startTime": 1674239255828,
  "endTime": 1674239255989,
  "originalSmells": [
    {
      "rule": "yumInstallRmVarCacheYum",
      "position": {
        "lineStart": 5,
        "lineEnd": 10,
        "columnStart": 7,
        "columnEnd": 22
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM centos:centos7\nLABEL maintainer=\"mstewart@riotgames.com\"\n\nRUN yum makecache \\\n    && yum update -y \\\n    && yum install -y \\\n    wget \\\n    zip \\\n    openssh-client \\\n    unzip \\\n    java-1.8.0-openjdk \\\n    && yum clean all && rm -rf /var/cache/yum\n\nARG user=jenkins\nARG group=jenkins\nARG uid=1000\nARG gid=1000\nARG http_port=8080\nARG agent_port=50000\nARG JENKINS_VERSION=2.112\nARG TINI_VERSION=v0.17.0\n\n# jenkins.war checksum, download will be validated using it\nARG JENKINS_SHA=085f597edeb0d49d54d7653f3742ba31ed72b8a1a2b053d2eb23fd806c6a5393\n\n# Can be used to customize where jenkins.war get downloaded from\nARG JENKINS_URL=https://repo.jenkins-ci.org/public/org/jenkins-ci/main/jenkins-war/${JENKINS_VERSION}/jenkins-war-${JENKINS_VERSION}.war\n\nENV JENKINS_VERSION ${JENKINS_VERSION}\nENV JENKINS_HOME /var/jenkins_home\nENV JENKINS_SLAVE_AGENT_PORT ${agent_port}\nENV JENKINS_UC https://updates.jenkins.io\nENV JENKINS_UC_EXPERIMENTAL=https://updates.jenkins.io/experimental\nENV JAVA_OPTS=\"-Xmx8192m -Djenkins.install.runSetupWizard=false\"\nENV JENKINS_OPTS=\"--handlerCountMax=300 --logfile=/var/log/jenkins/jenkins.log  --webroot=/var/cache/jenkins/war\"\nENV COPY_REFERENCE_FILE_LOG $JENKINS_HOME/copy_reference_file.log\n\n# Use tini as subreaper in Docker container to adopt zombie processes\nADD https://github.com/krallin/tini/releases/download/${TINI_VERSION}/tini /bin/tini\nRUN chmod +x /bin/tini\n\n# Jenkins is run with user `jenkins`, uid = 1000\n# If you bind mount a volume from the host or a data container,\n# ensure you use the same uid\nRUN groupadd -g ${gid} ${group} \\\n    && useradd -d \"$JENKINS_HOME\" -u ${uid} -g ${gid} -m -s /bin/bash ${user}\n\n# Jenkins home directory is a volume, so configuration and build history\n# can be persisted and survive image upgrades\nVOLUME /var/jenkins_home\n\n# `/usr/share/jenkins/ref/` contains all reference configuration we want\n# to set on a fresh new installation. Use it to bundle additional plugins\n# or config file with your custom jenkins Docker image.\nRUN mkdir -p /usr/share/jenkins/ref/init.groovy.d\n\n# Install Jenkins\n# could use ADD but this one does not check Last-Modified header neither does it allow to control checksum\n# see https://github.com/docker/docker/issues/8331\nRUN curl -fsSL ${JENKINS_URL} -o /usr/share/jenkins/jenkins.war \\\n  && echo \"${JENKINS_SHA}  /usr/share/jenkins/jenkins.war\" | sha256sum -c -\n\n# Prep Jenkins Directories\nRUN chown -R ${user} \"$JENKINS_HOME\" /usr/share/jenkins/ref\nRUN mkdir /var/log/jenkins\nRUN mkdir /var/cache/jenkins\nRUN chown -R ${user}:${user} /var/log/jenkins\nRUN chown -R ${user}:${user} /var/cache/jenkins\n\n# Expose Ports for web and slave agents\nEXPOSE ${http_port}\nEXPOSE ${agent_port}\n\n# Copy in local config files\nCOPY init.groovy /usr/share/jenkins/ref/init.groovy.d/tcp-slave-agent-port.groovy\nCOPY jenkins-support /usr/local/bin/jenkins-support\nCOPY plugins.sh /usr/local/bin/plugins.sh\nCOPY jenkins.sh /usr/local/bin/jenkins.sh\nCOPY install-plugins.sh /usr/local/bin/install-plugins.sh\nRUN chmod +x /usr/share/jenkins/ref/init.groovy.d/tcp-slave-agent-port.groovy \\\n    && chmod +x /usr/local/bin/jenkins-support \\\n    && chmod +x /usr/local/bin/plugins.sh \\\n    && chmod +x /usr/local/bin/jenkins.sh \\\n    && chmod +x /usr/local/bin/install-plugins.sh\n\n# Install default plugins\nCOPY plugins.txt /tmp/plugins.txt\nRUN /usr/local/bin/install-plugins.sh < /tmp/plugins.txt\n\n# Switch to the jenkins user\nUSER ${user}\n\n# Tini as the entry point to manage zombie processes\nENTRYPOINT [\"/bin/tini\", \"--\", \"/usr/local/bin/jenkins.sh\"]\n\n"
}