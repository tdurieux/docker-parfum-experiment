{
  "startTime": 1674252208804,
  "endTime": 1674252209187,
  "originalSmells": [
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 95,
        "lineEnd": 95,
        "columnStart": 4,
        "columnEnd": 21
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 138,
        "lineEnd": 138,
        "columnStart": 4,
        "columnEnd": 22
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 107,
        "lineEnd": 107,
        "columnStart": 22,
        "columnEnd": 95
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM python:3.6\n# Adapted from tiangolo-uwsgi-flask (https://github.com/tiangolo/uwsgi-nginx-flask-docker) or\n# (https://github.com/tiangolo/uwsgi-nginx-docker/blob/master/python3.6/Dockerfile)\n\nENV NGINX_VERSION 1.13.12-1~stretch\nENV NJS_VERSION   1.13.12.0.2.0-1~stretch\n\n\nRUN set -x \\\n\t&& apt-get update \\\n\t&& apt-get install --no-install-recommends --no-install-suggests -y gnupg1 apt-transport-https ca-certificates \\\n\t&& \\\n\tNGINX_GPGKEY=573BFD6B3D8FBC641079A6ABABF5BD827BD9BF62; \\\n\tfound=''; \\\n\tfor server in \\\n\t\tha.pool.sks-keyservers.net \\\n\t\thkp://keyserver.ubuntu.com:80 \\\n\t\thkp://p80.pool.sks-keyservers.net:80 \\\n\t\tpgp.mit.edu \\\n\t; do \\\n\t\techo \"Fetching GPG key $NGINX_GPGKEY from $server\"; \\\n\t\tapt-key adv --keyserver \"$server\" --keyserver-options timeout=10 --recv-keys \"$NGINX_GPGKEY\" && found=yes && break; \\\n\tdone; \\\n\ttest -z \"$found\" && echo >&2 \"error: failed to fetch GPG key $NGINX_GPGKEY\" && exit 1; \\\n\tapt-get remove --purge --auto-remove -y gnupg1 && rm -rf /var/lib/apt/lists/* \\\n\t&& dpkgArch=\"$(dpkg --print-architecture)\" \\\n\t&& nginxPackages=\" \\\n\t\tnginx=${NGINX_VERSION} \\\n\t\" \\\n\t&& case \"$dpkgArch\" in \\\n\t\tamd64|i386) \\\n# arches officialy built by upstream\n\t\t\techo \"deb https://nginx.org/packages/mainline/debian/ stretch nginx\" >> /etc/apt/sources.list.d/nginx.list \\\n\t\t\t&& apt-get update \\\n\t\t\t;; \\\n\t\t*) \\\n# we're on an architecture upstream doesn't officially build for\n# let's build binaries from the published source packages\n\t\t\techo \"deb-src https://nginx.org/packages/mainline/debian/ stretch nginx\" >> /etc/apt/sources.list.d/nginx.list \\\n\t\t\t\\\n# new directory for storing sources and .deb files\n\t\t\t&& tempDir=\"$(mktemp -d)\" \\\n\t\t\t&& chmod 777 \"$tempDir\" \\\n# (777 to ensure APT's \"_apt\" user can access it too)\n\t\t\t\\\n# save list of currently-installed packages so build dependencies can be cleanly removed later\n\t\t\t&& savedAptMark=\"$(apt-mark showmanual)\" \\\n\t\t\t\\\n# build .deb files from upstream's source packages (which are verified by apt-get)\n\t\t\t&& apt-get update \\\n\t\t\t&& apt-get build-dep -y $nginxPackages \\\n\t\t\t&& ( \\\n\t\t\t\tcd \"$tempDir\" \\\n\t\t\t\t&& DEB_BUILD_OPTIONS=\"nocheck parallel=$(nproc)\" \\\n\t\t\t\t\tapt-get source --compile $nginxPackages \\\n\t\t\t) \\\n# we don't remove APT lists here because they get re-downloaded and removed later\n\t\t\t\\\n# reset apt-mark's \"manual\" list so that \"purge --auto-remove\" will remove all build dependencies\n# (which is done after we install the built packages so we don't have to redownload any overlapping dependencies)\n\t\t\t&& apt-mark showmanual | xargs apt-mark auto > /dev/null \\\n\t\t\t&& { [ -z \"$savedAptMark\" ] || apt-mark manual $savedAptMark; } \\\n\t\t\t\\\n# create a temporary local APT repo to install from (so that dependency resolution can be handled by APT, as it should be)\n\t\t\t&& ls -lAFh \"$tempDir\" \\\n\t\t\t&& ( cd \"$tempDir\" && dpkg-scanpackages . > Packages ) \\\n\t\t\t&& grep '^Package: ' \"$tempDir/Packages\" \\\n\t\t\t&& echo \"deb [ trusted=yes ] file://$tempDir ./\" > /etc/apt/sources.list.d/temp.list \\\n# work around the following APT issue by using \"Acquire::GzipIndexes=false\" (overriding \"/etc/apt/apt.conf.d/docker-gzip-indexes\")\n#   Could not open file /var/lib/apt/lists/partial/_tmp_tmp.ODWljpQfkE_._Packages - open (13: Permission denied)\n#   ...\n#   E: Failed to fetch store:/var/lib/apt/lists/partial/_tmp_tmp.ODWljpQfkE_._Packages  Could not open file /var/lib/apt/lists/partial/_tmp_tmp.ODWljpQfkE_._Packages - open (13: Permission denied)\n\t\t\t&& apt-get -o Acquire::GzipIndexes=false update \\\n\t\t\t;; \\\n\tesac \\\n\t\\\n\t&& apt-get install --no-install-recommends --no-install-suggests -y \\\n\t\t\t\t\t\t$nginxPackages \\\n\t\t\t\t\t\tgettext-base \\\n\t&& rm -rf /var/lib/apt/lists/* /etc/apt/sources.list.d/nginx.list \\\n\t\\\n# if we have leftovers from building, let's purge them (including extra, unnecessary build deps)\n\t&& if [ -n \"$tempDir\" ]; then \\\n\t\tapt-get purge -y --auto-remove \\\n\t\t&& rm -rf \"$tempDir\" /etc/apt/sources.list.d/temp.list; \\\n\tfi\n\n# forward request and error logs to docker log collector\nRUN ln -sf /dev/stdout /var/log/nginx/access.log \\\n\t&& ln -sf /dev/stderr /var/log/nginx/error.log\nEXPOSE 80 443\n\n# Standard set up Nginx finished\n\n# Install uWSGI\nRUN pip install --no-cache-dir uwsgi\n\n# Make NGINX run on the foreground\nRUN echo \"daemon off;\" >> /etc/nginx/nginx.conf\n# Remove default configuration from Nginx\nRUN rm /etc/nginx/conf.d/default.conf\n# Copy the modified Nginx conf\nCOPY .docker/nginx.conf /etc/nginx/conf.d/\n# Copy the base uWSGI ini file to enable default dynamic uwsgi process number\nCOPY .docker/uwsgi.ini /etc/uwsgi/\n\n# Install Supervisord\nRUN apt-get update && apt-get install --no-install-recommends -y supervisor sqlite3 libsqlite3-dev uwsgi-plugin-python3 \\\n    && rm -rf /var/lib/apt/lists/*\n# Custom Supervisord config\nCOPY .docker/supervisord.conf /etc/supervisor/conf.d/supervisord.conf\n\n\n# Which uWSGI .ini file should be used, to make it customizable\n# ENV UWSGI_INI /commandment/uwsgi.ini\n\n# By default, run 2 processes\nENV UWSGI_CHEAPER 2\n\n# By default, when on demand, run up to 16 processes\nENV UWSGI_PROCESSES 16\n\n# By default, allow unlimited file sizes, modify it to limit the file sizes\n# To have a maximum of 1 MB (Nginx's default) change the line to:\n# ENV NGINX_MAX_UPLOAD 1m\nENV NGINX_MAX_UPLOAD 0\n\n# By default, Nginx will run a single worker process, setting it to auto\n# will create a worker for each CPU core\nENV NGINX_WORKER_PROCESSES 1\n\n# By default, Nginx listens on port 80.\n# To modify this, change LISTEN_PORT environment variable.\n# (in a Dockerfile or with an option for `docker run`)\nENV LISTEN_PORT 80\n\nCOPY . /commandment\nWORKDIR /commandment\nRUN pip install --no-cache-dir pipenv\nRUN pipenv install --system\nCOPY .docker/uwsgi-commandment.ini /etc/uwsgi/uwsgi-commandment.ini\nCOPY .docker/entry.sh /entry.sh\nCOPY .docker/settings.cfg.docker /settings.cfg\n\nCMD [\"/entry.sh\"]\n"
}