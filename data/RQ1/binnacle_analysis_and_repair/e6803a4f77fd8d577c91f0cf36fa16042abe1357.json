{
  "startTime": 1674235281946,
  "endTime": 1674235282131,
  "originalSmells": [
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 7,
        "lineEnd": 7,
        "columnStart": 4,
        "columnEnd": 116
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 8,
        "lineEnd": 8,
        "columnStart": 4,
        "columnEnd": 143
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 9,
        "lineEnd": 9,
        "columnStart": 4,
        "columnEnd": 76
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 7,
        "lineEnd": 7,
        "columnStart": 4,
        "columnEnd": 116
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 8,
        "lineEnd": 8,
        "columnStart": 4,
        "columnEnd": 143
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 9,
        "lineEnd": 9,
        "columnStart": 4,
        "columnEnd": 76
      }
    }
  ],
  "repairedSmells": [
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 7,
        "lineEnd": 7,
        "columnStart": 4,
        "columnEnd": 116
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 8,
        "lineEnd": 8,
        "columnStart": 4,
        "columnEnd": 143
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 9,
        "lineEnd": 9,
        "columnStart": 4,
        "columnEnd": 76
      }
    }
  ],
  "repairedDockerfile": "FROM ubuntu:18.04\n\nRUN echo 'export USE_MLTON=\"true\"' >> /root/.bashrc\n\n## Install the necessary Ubuntu packages\n\nRUN apt-get update\nRUN apt-get install -y --no-install-recommends ruby=1:2.5.1 smlnj=110.79-4 libsmlnj-smlnj=110.79-4 gprolog=1.4.5-4.1 && rm -rf /var/lib/apt/lists/*;\nRUN apt-get install -y --no-install-recommends m4=1.4.18-1 git=1:2.17.1-1ubuntu0.1 mlton=20130715-3 vim=2:8.0.1453-1ubuntu1 make=4.1-9.1ubuntu1 && rm -rf /var/lib/apt/lists/*;\nRUN apt-get install -y --no-install-recommends aspcud=1:1.9.4-1 opam=1.2.2-6 && rm -rf /var/lib/apt/lists/*;\n# Note: aspcud is an optional dependency of opam (a solver for package installation problems)\n# that makes its dependency-solving more reliable.\n\n\n## Install the OCaml switches\n\n# The OCaml software we use are handled through OPAM, the OCaml-specific package manager,\n# which allows for more flexible control over versions than using Ubuntu packages,\n# and in particular lets us use several different compilers in parallel (the standard\n# implementation, and the 'multicore' experimental variant with effect handlers)\n\n# Install a switch for the standard 4.06.1 compiler, and base packages for it\nRUN opam init --compiler=4.06.1\nRUN opam switch 4.06.1 && eval $(opam config env) \\\n    && opam install -y ocamlbuild.0.12.0 ocamlfind.1.8.0\n\n# Install delimcc\nRUN opam switch 4.06.1 && eval $(opam config env) \\\n    && opam install -y delimcc.2018.03.16\n\n# Install the experimental 'multicore' compiler in a 4.06.1+multicore switch\nRUN opam remote add multicore https://github.com/ocamllabs/multicore-opam.git \\\n    && opam switch install 4.06.1+multicore\nRUN opam switch 4.06.1+multicore && eval $(opam config env) \\\n    && opam install -y ocamlbuild.0.12.0 ocamlfind.1.8.0\n\n\n## Copy the host system's benchmark code\n\n# We intentionally delayed the addition of the working directory upto\n# this point: whenever the directory state changes on the host system,\n# we get a cache miss and every step after this one has to be replayed\n# when rebuilding the Docker image. On the other hand,\n# environment-setting commands above remain cached.\nWORKDIR /thermocont\nADD benchmarks /thermocont/benchmarks\nADD ocaml /thermocont/ocaml\nADD sml /thermocont/sml\n\n## Build the SML benchmarks\n\nRUN cd /thermocont/benchmarks/nqueens \\\n    && mlton indirect.sml \\\n    && mlton replay_zipper.sml \\\n    && mlton filinski_callcc_derived_universal.sml\n\n## Build the standard OCaml benchmarks\n\nRUN cd /thermocont/benchmarks/nqueens/ocaml \\\n    && opam switch 4.06.1 && eval $(opam config env) \\\n    && make clean \\\n    && make all\n# Note: \"ADD benchmarks /thermocont\" may copy over the Docker\n# container some build artefacts coming from the host's repository (if\n# it was used for testing and not in a clean state). The 'make clean'\n# run above makes sure we start from a clean state.\n\n\n## Build the delimcc-using OCaml benchmarks\n\nRUN cd /thermocont/benchmarks/nqueens/ocaml \\\n    && opam switch 4.06.1 && eval $(opam config env) \\\n    && make delimcc\n\n\n## Build the effect-handler OCaml benchmarks\n\nRUN cd /thermocont/benchmarks/nqueens/ocaml \\\n    && opam switch 4.06.1+multicore && eval $(opam config env) \\\n    && make effect\n"
}