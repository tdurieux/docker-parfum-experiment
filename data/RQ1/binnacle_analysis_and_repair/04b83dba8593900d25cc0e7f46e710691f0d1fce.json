{
  "startTime": 1674240059407,
  "endTime": 1674240059780,
  "originalSmells": [
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 59,
        "lineEnd": 87,
        "columnStart": 4,
        "columnEnd": 19
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# adapted from github.com/bitwalker/alpine-elixir\n# and github.com/bitwalker/alpine-erlang:latest\n\n# 2017-01-15 update to elixir 1.4.0\n\nFROM gliderlabs/alpine:3.4\n\nMAINTAINER Your Name <name@your-domain.com>\n\n# Important!  Update this no-op ENV variable when this Dockerfile\n# is updated with the current date. It will force refresh of all\n# of the base images and things like `apt-get update` won't be using\n# old cached versions when the Dockerfile is built.\nENV REFRESHED_AT=2017-01-15 \\\n    LANG=en_US.UTF-8 \\\n    HOME=/opt/app/ \\\n    # Set this so that CTRL+G works properly\n    TERM=xterm \\\n    ERLANG_VER=19.1.6 \\\n    ELIXIR_VER=1.4.0\n\nWORKDIR /tmp/erlang-build\n\n# Install updates and build tools (we're going to reuse these so make them a layer of their own)\nRUN \\\n    # Create default user and home directory, set owner to default\n    mkdir -p ${HOME} && \\\n    adduser -s /bin/sh -u 1001 -G root -h ${HOME} -S -D default && \\\n    chown -R 1001:0 ${HOME} && \\\n    # Add edge repos tagged so that we can selectively install edge packages\n    echo \"@edge http://nl.alpinelinux.org/alpine/edge/main\" >> /etc/apk/repositories && \\\n    # Upgrade Alpine and base packages\n    apk --no-cache --update upgrade && \\\n    # Install Erlang/OTP deps\n    apk add --no-cache \\\n      ca-certificates \\\n      openssl-dev \\\n      ncurses-dev \\\n      unixodbc-dev \\\n      zlib-dev \\\n      git \\\n      autoconf \\ \n      build-base \\\n      make \\\n      perl-dev && \\\n   # Update ca certificates\n    update-ca-certificates --fresh\n\n\n# Install Erlang\nRUN \\\n\n    git clone -b OTP-${ERLANG_VER} --single-branch --depth 1 https://github.com/erlang/otp.git . && \\\n    # Erlang/OTP build env\n    export ERL_TOP=/tmp/erlang-build && \\\n    export PATH=$ERL_TOP/bin:$PATH && \\\n    export CPPFlAGS=\"-D_BSD_SOURCE $CPPFLAGS\" && \\\n    # Configure\n    ./otp_build autoconf && \\\n    ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --prefix=/usr \\\n      --sysconfdir=/etc \\\n      --mandir=/usr/share/man \\\n      --infodir=/usr/share/info \\\n      --without-javac \\\n      --without-wx \\\n      --without-debugger \\\n      --without-observer \\\n      --without-jinterface \\\n      --without-common_test \\\n      --without-cosEvent \\\n      --without-cosEventDomain \\\n      --without-cosFileTransfer \\\n      --without-cosNotification \\\n      --without-cosProperty \\\n      --without-cosTime \\\n      --without-cosTransactions \\\n      --without-dialyzer \\\n      --without-et \\\n      --without-gs \\\n      --without-ic \\\n      --without-megaco \\\n      --without-orber \\\n      --without-percept \\\n      --without-typer \\\n      --enable-threads \\\n      --enable-shared-zlib \\\n      --enable-ssl=dynamic-ssl-lib \\\n      --enable-hipe && \\\n    # Build\n    make -j4 && make install\n\n# Move on to Elixir\nWORKDIR /tmp/elixir-build\n\nRUN \\\n    git clone https://github.com/elixir-lang/elixir && \\\n    cd elixir && \\\n    git checkout v${ELIXIR_VER} && \\\n    make && make install && \\\n    mix local.hex --force && \\\n    mix local.rebar --force\n\nWORKDIR ${HOME}\n\nCMD [\"/bin/sh\"]\n"
}