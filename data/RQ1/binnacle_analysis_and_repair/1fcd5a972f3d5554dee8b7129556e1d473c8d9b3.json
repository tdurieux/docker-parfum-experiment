{
  "startTime": 1674242093970,
  "endTime": 1674242094193,
  "originalSmells": [
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 58,
        "lineEnd": 58,
        "columnStart": 4,
        "columnEnd": 15
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM quay.io/continuouspipe/symfony-php7.1-nginx:stable\n\n# Set Symfony environment inside a container. Default is `prod`.\n# This only has an effect on the build phase and `bin/console`\n# commands run from inside the container. Front controllers\n# `/app.php`, `/app_dev.php` and `/app_test.php` will still use\n# appropriate environments despite the option you provide here.\nARG SYMFONY_ENV=dev\n# Enforce development mode of `container build`. Default is `false`.\n# This primarily controls `composer install` flags. When this is\n# set to `false` `--no-dev` flag would be added to `composer\n# install`, making it ignore all the dev dependencies. Useful\n# option in production, but hindering in development.\nARG DEVELOPMENT_MODE=true\n# Here we propagate build-level environment variable to a container\n# level one. `ARG` sets environment variables available only during\n# the container build phase. `ENV` sets environment variables\n# available only inside the built container itself. This setting\n# right here makes Symfony environment inside the built container\n# to be exactly the same as the one used while building it.\nENV SYMFONY_ENV $SYMFONY_ENV\n# This enables/disables `/app_dev.php` and `/app_test.php` front\n# controllers. Default is `false`.\nENV SYLIUS_APP_DEV_PERMITTED true\n\n# Install NodeJS and NPM to allow assets building.\n# Sylius uses `Gulp` for asset building. `Gulp` is installed using\n# `npm` and `npm` requires `nodejs`.\nRUN apt-get update -qq \\\n && DEBIAN_FRONTEND=noninteractive apt-get -qq -y --no-install-recommends install \\\n    nodejs \\\n    npm \\\n && apt-get auto-remove -qq -y \\\n && apt-get clean \\\n && rm -rf /var/lib/apt/lists/* \\\n && ln -s /usr/bin/nodejs /usr/bin/node\n\n# Set up the default timezone for PHP.\n# `php-nginx` sets timezone for FPM configuration, but not CLI.\n# This ensures PHP CLI inside container have timezone set too.\nRUN echo \"date.timezone = UTC\" >> /etc/php/7.0/cli/conf.d/docker.ini\n\n# Copy the entire current directory into container's `/app`.\nCOPY . /app/\n# Make container's `/app` directory a working directory.\nWORKDIR /app\n# Remove Symfony cache and logs.\n# As we copied the entire `/app` directory previously, it\n# potentially came with the local system cache and logs. We\n# obviously don't care for it, so we wipe `var/cache` clean.\nRUN rm -rf var/cache/* var/logs/*\n\n# Build web-server, permissions, dependencies and app itself.\n# This command is provided by `php-nginx` container and\n# extended by `symfony-php-nginx`.\nRUN container build\n# Install node dependencies.\n# Those primarily are related to the asset pipeline.\nRUN npm install && npm cache clean --force;\n\n# Rebuild autoloader without optimisation.\n# `php-nginx` container when executes `container build`\n# uses `--optimise` flag. This flag speeds up autoloading\n# in `prod` environment, but breaks application in multiple\n# places in `dev` environment. This line isn't necessary\n# for `prod` containers.\nRUN composer --no-interaction dump-autoload\n# Wipe the cache and logs after all the build activities.\n# We want this container to be clean slate for a server,\n# hence we wipe the cache and logs folders.\nRUN rm -rf var/cache/* var/logs/*\n"
}