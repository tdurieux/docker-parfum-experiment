{
  "startTime": 1674248498685,
  "endTime": 1674248499034,
  "originalSmells": [
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 66,
        "lineEnd": 66,
        "columnStart": 4,
        "columnEnd": 37
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 67,
        "lineEnd": 67,
        "columnStart": 4,
        "columnEnd": 43
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 68,
        "lineEnd": 68,
        "columnStart": 4,
        "columnEnd": 43
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 45,
        "lineEnd": 45,
        "columnStart": 4,
        "columnEnd": 29
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 42,
        "lineEnd": 42,
        "columnStart": 4,
        "columnEnd": 38
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 54,
        "lineEnd": 54,
        "columnStart": 4,
        "columnEnd": 58
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "ARG BASE_IMAGE=nvidia/cuda:9.0-cudnn7-devel-ubuntu16.04\nFROM ${BASE_IMAGE}\n\nRUN apt-get update && apt-get install -y --no-install-recommends \\\n        build-essential \\\n        nano \\\n        cmake \\\n        git \\\n        wget \\\n        tar \\\n        bzip2 \\\n        unzip \\\n        gzip \\\n        autoconf \\\n        automake \\\n        libtool \\\n        libatlas-base-dev \\\n        libboost-all-dev \\\n        libgflags-dev \\\n        libgoogle-glog-dev \\\n        libhdf5-serial-dev \\\n        libleveldb-dev \\\n        liblmdb-dev \\\n        libsnappy-dev \\\n        python3-dev \\\n        python3-pip \\\n        libgtk2.0-0 \\\n        libavcodec-dev \\\n        libavformat-dev \\\n        libswscale-dev \\\n        libv4l-dev \\\n        libxvidcore-dev \\\n        libx264-dev \\\n        cpio \\\n        base-files \\\n        lsb-release \\\n        lsb-base \\\n        libgstreamer-plugins-base1.0-0 && \\\n    rm -rf /var/lib/apt/lists/*\n\nWORKDIR /tmp\nRUN wget  https://github.com/google/protobuf/releases/download/v3.1.0/protobuf-cpp-3.1.0.tar.gz && \\\n    tar xvzf protobuf-cpp-3.1.0.tar.gz && \\\n    cd /tmp/protobuf-3.1.0 && \\\n    ./autogen.sh && \\\n    ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --prefix=/usr && \\\n    make -j 4 && \\\n    make check && \\\n    make install && \\\n    rm -rf /tmp/protobuf* && rm protobuf-cpp-3.1.0.tar.gz\n\nARG OPENVINO_VERSION=2018.5.455\nCOPY l_openvino_toolkit_p_${OPENVINO_VERSION}.tgz /tmp/l_openvino_toolkit_p_${OPENVINO_VERSION}.tgz\nWORKDIR /tmp\nRUN tar -xvzf l_openvino_toolkit_p_${OPENVINO_VERSION}.tgz && \\\n    cd l_openvino_toolkit_p_${OPENVINO_VERSION} && \\\n    sed -i -e 's/ACCEPT_EULA=decline/ACCEPT_EULA=accept/g' silent.cfg && \\\n    sh install.sh -s silent.cfg && \\\n    rm -rf /tmp/l_openvino* && \\\n    echo \"source /opt/intel/openvino/bin/setupvars.sh\" >> /etc/bash.bashrc && rm l_openvino_toolkit_p_${OPENVINO_VERSION}.tgz\n\nENV CAFFE_ROOT=/opt/caffe\n\nCOPY caffe /opt/caffe\nWORKDIR $CAFFE_ROOT\n\nRUN pip3 install --no-cache-dir --upgrade pip==9.0.3 && \\\n    pip3 install --no-cache-dir --upgrade setuptools wheel && \\\n    pip3 install --no-cache-dir -r python/requirements.txt && \\\n    grep -v protobuf /opt/intel/openvino/deployment_tools/model_optimizer/requirements_caffe.txt | xargs -n 1 pip3 install\n\nRUN mkdir build && cd build && \\\n    cmake -DCMAKE_BUILD_TYPE=Release \\\n      -Dpython_version=3 \\\n      -Wno-dev \\\n      -DCUDA_TOOLKIT_ROOT_DIR=/usr/local/cuda \\\n      -DCUDA_ARCH_BIN=\"30 35 50 52 60 61 70\" \\\n      -DCUDA_ARCH_PTX=\"\" \\\n      -DCUDA_ARCH_NAME=\"Manual\" \\\n      -DCMAKE_CXX_FLAGS=\"-std=c++11\" \\\n      -DOpenCV_DIR=/opt/intel/openvino/opencv/cmake \\\n      .. && \\\n    make -j 4 && make pycaffe\n\nENV PYCAFFE_ROOT $CAFFE_ROOT/python\nENV PYTHONPATH $PYCAFFE_ROOT:$PYTHONPATH\nENV PATH $CAFFE_ROOT/build/tools:$PYCAFFE_ROOT:$PATH\nRUN echo \"$CAFFE_ROOT/build/lib\" >> /etc/ld.so.conf.d/caffe.conf && ldconfig &> /dev/null\n\nRUN echo 'export PS1=\"\\w\\$ \"' >> /etc/bash.bashrc\n\nWORKDIR /workspace\n"
}