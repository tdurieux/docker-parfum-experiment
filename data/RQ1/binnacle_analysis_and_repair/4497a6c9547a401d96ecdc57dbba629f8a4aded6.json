{
  "startTime": 1674234125841,
  "endTime": 1674234126062,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 45,
        "lineEnd": 45,
        "columnStart": 4,
        "columnEnd": 99
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 49,
        "lineEnd": 49,
        "columnStart": 19,
        "columnEnd": 137
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 52,
        "lineEnd": 52,
        "columnStart": 4,
        "columnEnd": 90
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 72,
        "lineEnd": 72,
        "columnStart": 4,
        "columnEnd": 107
      }
    },
    {
      "rule": "yumInstallRmVarCacheYum",
      "position": {
        "lineStart": 43,
        "lineEnd": 43,
        "columnStart": 4,
        "columnEnd": 28
      }
    },
    {
      "rule": "yumInstallRmVarCacheYum",
      "position": {
        "lineStart": 46,
        "lineEnd": 46,
        "columnStart": 4,
        "columnEnd": 65
      }
    },
    {
      "rule": "yumInstallRmVarCacheYum",
      "position": {
        "lineStart": 53,
        "lineEnd": 53,
        "columnStart": 4,
        "columnEnd": 56
      }
    },
    {
      "rule": "yumInstallRmVarCacheYum",
      "position": {
        "lineStart": 73,
        "lineEnd": 73,
        "columnStart": 4,
        "columnEnd": 46
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# Licensed to the Apache Software Foundation (ASF) under one\n# or more contributor license agreements.  See the NOTICE file\n# distributed with this work for additional information\n# regarding copyright ownership.  The ASF licenses this file\n# to you under the Apache License, Version 2.0 (the\n# \"License\"); you may not use this file except in compliance\n# with the License.  You may obtain a copy of the License at\n#\n#   http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing,\n# software distributed under the License is distributed on an\n# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n# KIND, either express or implied.  See the License for the\n# specific language governing permissions and limitations\n# under the License.\n############################################################\n# Dockerfile to build Traffic Server container images\n#   as Edges for Traffic Control 1.4\n# Based on CentOS 6.6\n############################################################\n\n# For cache, you may either use (RAM or disk) block devices or disk directories\n# To use RAM block devices, pass them as /dev/ram0 and /dev/ram1 via `docker run --device`\n# To use disk directories, simply don't pass devices, and the container will configure Traffic Server for directories\n\n# Block devices may be created on the native machine with, for example, `modprobe brd`.\n# The recommended minimum size for each block devices is 1G.\n# For example, `sudo modprobe brd rd_size=1048576 rd_nr=2`\n\n# Example Build and Run:\n#\n# docker build --rm --tag traffic_server_edge:1.4 Traffic_Server_Edge\n#\n# docker run --name my-edge-0 --hostname my-edge-0 --net cdnet --device /dev/ram0:/dev/ram0 --device /dev/ram1:/dev/ram1 --env TRAFFIC_OPS_URI=http://my-traffic-ops:3000 --env TRAFFIC_OPS_USER=superroot --env TRAFFIC_OPS_PASS=supersecreterpassward --detach traffic_server_edge:1.4\n#\n# OR\n#\n# docker run --name my-edge-0 --hostname my-edge-0 --net cdnet --env TRAFFIC_OPS_URI=http://my-traffic-ops:3000 --env TRAFFIC_OPS_USER=superroot --env TRAFFIC_OPS_PASS=supersecreterpassward --detach traffic_server_edge:1.4\n\nFROM centos:6.6\nMAINTAINER dev@trafficcontrol.apache.org\n\nRUN yum install -y perl-JSON && rm -rf /var/cache/yum\n\nRUN curl -f -O http://traffic-control-cdn.net/downloads/trafficserver-5.3.2-599.089d585.el6.x86_64.rpm\nRUN yum install -y trafficserver-5.3.2-599.089d585.el6.x86_64.rpm && rm -rf /var/cache/yum\n\nRUN mkdir /opt/ort\nRUN cd /opt/ort && curl -f -O https://raw.githubusercontent.com/Comcast/traffic_control/RELEASE-1.4.0-RC0/traffic_ops/bin/traffic_ops_ort.pl\nRUN chmod 777 /opt/ort/traffic_ops_ort.pl\n\nRUN curl -f -O http://traffic-control-cdn.net/downloads/astats_over_http-1.2-8.el6.x86_64.rpm\nRUN yum install -y astats_over_http-1.2-8.el6.x86_64.rpm && rm -rf /var/cache/yum\n\nRUN setcap 'cap_net_bind_service=+ep' /opt/trafficserver/bin/traffic_cop\nRUN setcap 'cap_net_bind_service=+ep' /opt/trafficserver/bin/traffic_crashlog\nRUN setcap 'cap_net_bind_service=+ep' /opt/trafficserver/bin/traffic_ctl\nRUN setcap 'cap_net_bind_service=+ep' /opt/trafficserver/bin/traffic_layout\nRUN setcap 'cap_net_bind_service=+ep' /opt/trafficserver/bin/traffic_line\nRUN setcap 'cap_net_bind_service=+ep' /opt/trafficserver/bin/traffic_logcat\nRUN setcap 'cap_net_bind_service=+ep' /opt/trafficserver/bin/traffic_logstats\nRUN setcap 'cap_net_bind_service=+ep' /opt/trafficserver/bin/traffic_manager\nRUN setcap 'cap_net_bind_service=+ep' /opt/trafficserver/bin/traffic_sac\nRUN setcap 'cap_net_bind_service=+ep' /opt/trafficserver/bin/trafficserver\nRUN setcap 'cap_net_bind_service=+ep' /opt/trafficserver/bin/traffic_server\nRUN setcap 'cap_net_bind_service=+ep' /opt/trafficserver/bin/traffic_top\nRUN setcap 'cap_net_bind_service=+ep' /opt/trafficserver/bin/traffic_via\nRUN setcap 'cap_net_bind_service=+ep' /opt/trafficserver/bin/tspush\nRUN setcap 'cap_net_bind_service=+ep' /opt/trafficserver/bin/tsxs\n\n# \\todo move Heka to its own container, sharing the ATS log file via --volume\nRUN curl -f -LO https://github.com/mozilla-services/heka/releases/download/v0.10.0/heka-0_10_0-linux-amd64.rpm\nRUN yum install -y heka-0_10_0-linux-amd64.rpm && rm -rf /var/cache/yum\nRUN mkdir etc/hekad\nRUN printf '[ats_traffic_logs] \\n\\\ntype = \"LogstreamerInput\" \\n\\\nsplitter = \"TokenSplitter\" \\n\\\ndecoder = \"ATS_transform_decoder\" \\n\\\nlog_directory = \"/opt/trafficserver/var/log/trafficserver\" \\n\\\nfile_match = \"custom_ats_2.log\" \\n\\\n[ATS_transform_decoder] \\n\\\ntype = \"PayloadRegexDecoder\" \\n\\\nmatch_regex = '\"'^(?P<UnixTimestamp>[\\d]+\\.[\\d]+) chi=(?P<chi>\\S+) phn=(?P<phn>\\S+) shn=(?P<shn>\\S+) url=(?P<url>\\S+) cqhm=(?P<cqhm>\\w+) cqhv=(?P<cqhv>\\S+) pssc=(?P<pssc>\\d+) ttms=(?P<ttms>\\d+) b=(?P<b>\\d+) sssc=(?P<sssc>\\d+) sscl=(?P<sscl>\\d+)  cfsc=(?P<cfsc>\\S+) pfsc=(?P<pfsc>\\S+) crc=(?P<crc>\\S+) phr=(?P<phr>\\S+) uas=(?P<uas>\\S+) xmt=(?P<xmt>\\S+)'\"' \\n\\n\\\n[ATS_transform_decoder.message_fields] \\n\\\nType = \"ats_traffic\" \\n\\\ntimestamp = \"%%UnixTimestamp%%\" \\n\\\nclientip = \"%%chi%%\" \\n\\\nhost = \"%%phn%%\" \\n\\\nshn = \"%%shn%%\" \\n\\\nurl = \"%%url%%\" \\n\\\nmethod = \"%%cqhm%%\" \\n\\\nversion = \"%%cqhv%%\" \\n\\\nstatus = \"%%pssc%%\" \\n\\\nrequest_duration = \"%%ttms%%\" \\n\\\nbytes = \"%%b%%\" \\n\\\nresponse_code = \"%%sssc%%\" \\n\\\nresponse_length = \"%%sscl%%\" \\n\\\nclient_status = \"%%cfsc%%\" \\n\\\nproxy_code = \"%%pfsc%%\" \\n\\\ncrc = \"%%crc%%\" \\n\\\nphr = \"%%phr%%\" \\n\\\nuseragent = \"%%uas%%\" \\n\\\nmoney_trace = \"%%xmt%%\" \\n\\\n[PayloadEncoder] \\n\\\ntype = \"PayloadEncoder\" \\n\\\n[FxaKafkaOutput] \\n\\\ntype = \"KafkaOutput\" \\n\\\ntopic = \"ipcdn\" \\n\\\nmessage_matcher = \"TRUE\" \\n\\\nencoder = \"PayloadEncoder\" \\n\\\naddrs = [\"{{.KafkaUri}}\"] \\n\\\n[Message_Counter] \\n\\\ntype = \"CounterFilter\" \\n\\\nmessage_matcher = \"Type != '\"'heka.counter-output'\"'\" \\n\\\nencoder = \"CounterLogEncoder\" \\n\\\n[CounterLogEncoder] \\n\\\ntype=\"PayloadEncoder\" \\n\\\nappend_newlines = true \\n\\\nprefix_ts = true \\n\\\nts_format = \"Mon Jan _2 15:04:05 MST 2006\" \\n\\\n[CounterLogOutput] \\n\\\ntype = \"FileOutput\" \\n\\\nmessage_matcher = \"Type == '\"'heka.counter-output'\"'\" \\n\\\nencoder = \"CounterLogEncoder\" \\n\\\npath = \"/tmp/hekad_counter.log\"' > /etc/hekad/heka.toml\n\nRUN printf '#!/bin/sh \\n\\n\\\n# \\n\\\n# hekad <summary> \\n\\\n# \\n\\\n# chkconfig:   2345 80 20 \\n\\\n# description: Starts and stops a single heka instance on this system \\n\\\n# \\n\\\n### BEGIN INIT INFO \\n\\\n# Provides: Heka \\n\\\n# Required-Start: $network $named \\n\\\n# Required-Stop: $network $named \\n\\\n# Default-Start: 2 3 4 5 \\n\\\n# Default-Stop: 0 1 6 \\n\\\n# Short-Description: This service manages the hekad daemon \\n\\\n# Description: Heka is a high performance general purpose data acquisition and processing engine. \\n\\\n### END INIT INFO \\n\\\n# \\n\\\n# init.d / servicectl compatibility (openSUSE) \\n\\\n# \\n\\\nif [ -f /etc/rc.status ]; then \\n\\\n    . /etc/rc.status \\n\\\n    rc_reset \\n\\\nfi \\n\\\n# \\n\\\n# Source function library. \\n\\\n# \\n\\\nif [ -f /etc/rc.d/init.d/functions ]; then \\n\\\n    . /etc/rc.d/init.d/functions \\n\\\nfi \\n\\\n. /etc/init.d/functions \\n\\\nname=\"hekad\" \\n\\\nexec=\"/usr/bin/hekad\" \\n\\\nprog=\"hekad\" \\n\\\nuser=\"root\" \\n\\\ngroup=\"root\" \\n\\\npidfile=/var/run/${prog}.pid \\n\\\nconf=/etc/hekad/heka.toml \\n\\\nlog=/var/log/heka.log \\n\\\nDAEMON_ARGS=${DAEMON_ARGS---user root} \\n\\\nnice=19 \\n\\\nargs=\" --config $conf\" \\n\\\n[ -e /etc/sysconfig/$prog ] && . /etc/sysconfig/$prog \\n\\\nlockfile=/var/lock/subsys/$prog \\n\\\nHEKA_USER=root \\n\\\nstart() { \\n\\\n    [ -x $exec ] || exit 5 \\n\\\n    [ -f $CONF_FILE ] || exit 6 \\n\\\n    # if not running, start it up here, usually something like \"daemon $exec\" \\n\\\n    # Run the program! \\n\\\n    nice -n ${nice} chroot --userspec $user:$group / sh -c \" exec \\\"$prog\\\" $args \" > ${log} 2>&1 & \\n\\\n     # Generate the pidfile from here. If we instead made the forked process \\n\\\n  # generate it there will be a race condition between the pidfile writing \\n\\\n  # and a process possibly asking for status. \\n\\\n  echo $! > $pidfile \\n\\\n  echo \"$name started.\" \\n\\\n  return 0 \\n\\\n} \\n\\\nstop() { \\n\\\n      # Try a few times to kill TERM the program \\n\\\n  if status ; then \\n\\\n    pid=`cat \"$pidfile\"` \\n\\\n    echo \"Killing $name (pid $pid) with SIGTERM\" \\n\\\n  kill -9 $pid \\n\\\n    # Wait for it to exit. \\n\\\n    for i in 1 2 3 4 5 ; do \\n\\\n      echo \"Waiting $name (pid $pid) to die...\" \\n\\\n      status || break \\n\\\n      sleep 1 \\n\\\n    done \\n\\\n    if status ; then \\n\\\n      echo \"$name stop failed; still running.\" \\n\\\n    else \\n\\\n      echo \"$name stopped.\" \\n\\\n    fi \\n\\\n  fi \\n\\\n} \\n\\\nrestart() { \\n\\\n    stop \\n\\\n    start \\n\\\n} \\n\\\nreload() { \\n\\\n    restart \\n\\\n} \\n\\\nforce_reload() { \\n\\\n    restart \\n\\\n} \\n\\\nstatus(){ \\n\\\n  if [ -f \"$pidfile\" ] ; then \\n\\\n    pid=`cat \"$pidfile\"` \\n\\\n    if kill -0 $pid > /dev/null 2> /dev/null ; then \\n\\\n      # process by this pid is running. \\n\\\n      # It may not be our pid, but thats what you get with just pidfiles. \\n\\\n      # TODO(sissel): Check if this process seems to be the same as the one we \\n\\\n      # expect. Itd be nice to use flock here, but flock uses fork, not exec, \\n\\\n      # so it makes it quite awkward to use in this case. \\n\\\n      return 0 \\n\\\n    else \\n\\\n      return 2 # program is dead but pid file exists \\n\\\n    fi \\n\\\n  else \\n\\\n    return 3 # program is not running \\n\\\n  fi \\n\\\n} \\n\\\nrh_status() { \\n\\\n    # run checks to determine if the service is running or use generic status \\n\\\n    status -p $pidfile $prog \\n\\\n} \\n\\\nrh_status_q() { \\n\\\n    rh_status >/dev/null 2>&1 \\n\\\n} \\n\\\ncase \"$1\" in \\n\\\n    start) \\n\\\n        rh_status_q && exit 0 \\n\\\n        $1 \\n\\\n        ;; \\n\\\n    stop) \\n\\\n        rh_status_q || exit 0 \\n\\\n        $1 \\n\\\n        ;; \\n\\\n    restart) \\n\\\n        $1 \\n\\\n        ;; \\n\\\n    reload) \\n\\\n        rh_status_q || exit 7 \\n\\\n        $1 \\n\\\n        ;; \\n\\\n    force-reload) \\n\\\n        force_reload \\n\\\n        ;; \\n\\\n    status) \\n\\\n     status \\n\\\n    code=$? \\n\\\n    if [ $code -eq 0 ] ; then \\n\\\n      echo \"$prog is running\" \\n\\\n    else \\n\\\n      echo \"$prog is not running\" \\n\\\n    fi \\n\\\n    exit $code \\n\\\n        ;; \\n\\\n    condrestart|try-restart) \\n\\\n        rh_status_q || exit 0 \\n\\\n        restart \\n\\\n        ;; \\n\\\n    *) \\n\\\n        echo $\"Usage: $0 {start|stop|status|restart|condrestart|try-restart|reload|force-reload}\" \\n\\\n        exit 2 \\n\\\nesac' > /etc/init.d/hekad\nRUN chmod +x /etc/init.d/hekad\n\nEXPOSE 80 443\nADD run.sh /\nENTRYPOINT /run.sh\n"
}