{
  "startTime": 1674248990979,
  "endTime": 1674248991311,
  "originalSmells": [
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 12,
        "lineEnd": 25,
        "columnStart": 4,
        "columnEnd": 26
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 58,
        "lineEnd": 58,
        "columnStart": 4,
        "columnEnd": 39
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 58,
        "lineEnd": 58,
        "columnStart": 4,
        "columnEnd": 39
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 12,
        "lineEnd": 25,
        "columnStart": 4,
        "columnEnd": 26
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 58,
        "lineEnd": 58,
        "columnStart": 4,
        "columnEnd": 39
      }
    }
  ],
  "repairedSmells": [
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 58,
        "lineEnd": 58,
        "columnStart": 4,
        "columnEnd": 63
      }
    }
  ],
  "repairedDockerfile": "FROM lablup/kernel-base:jail as jail-builder\nFROM lablup/kernel-base:hook as hook-builder\nFROM lablup/kernel-base:python3.6 as python-binary\nFROM lablup/common-tensorflow:1.11-py36 as tf-binary\n\nFROM ubuntu:16.04\nMAINTAINER Mario Cho \"m.cho@lablup.com\"\n\nENV LANG=C.UTF-8\nENV PYTHONUNBUFFERED 1\n\nRUN apt update -y && \\\n    apt install --no-install-recommends -y \\\n        ca-certificates \\\n        wget \\\n        libexpat1 libgdbm3 libbz2-dev libffi6 libsqlite3-0 liblzma5 zlib1g \\\n\tlibmpdec2 \\\n        libssl1.0.0 \\\n\tlibssl-dev \\\n        libncursesw5 libtinfo5 libreadline6 \\\n\tproj-bin \\\n        libgeos-dev \\\n        mime-support \\\n\tgcc g++ \\\n        libproj-dev libgeos-dev \\\n        libzmq3-dev libuv1 && rm -rf /var/lib/apt/lists/*;\n\n# Copy the whole Python from the docker library image\nCOPY --from=python-binary /python.tar.gz /\nRUN cd /; tar xzpf python.tar.gz; rm python.tar.gz; ldconfig\nRUN export LD_LIBRARY_PATH=/usr/local/ssl/lib:$LD_LIBRARY_PATH\n# Test if Python is working\nRUN python -c 'import sys; print(sys.version_info); import ssl'\n\n# As we mostly have \"manylinux\" glibc-compatible binary packaes,\nCOPY --from=tf-binary /tmp/tensorflow_pkg/tensorflow-*.whl /tmp\n# Install TensorFlow build dependencies (ensure we have proper numpy)\n\n# Prepare for building TensorFlow wheel\nRUN pip install --no-cache-dir wheel && \\\n    pip install --no-cache-dir pyzmq simplejson msgpack-python uvloop && \\\n    pip install --no-cache-dir aiozmq dataclasses tabulate namedlist six \"python-dateutil>=2\" && \\\n    pip install --no-cache-dir h5py && \\\n    pip install --no-cache-dir Cython && \\\n    pip install --no-cache-dir matplotlib bokeh && \\\n    pip install --no-cache-dir pyproj && \\\n    pip install --no-cache-dir Cartopy && \\\n    pip install --no-cache-dir wheel /tmp/*.whl && \\\n    pip install --no-cache-dir keras && \\\n    pip install --no-cache-dir ipython && \\\n    pip install --no-cache-dir pandas && \\\n    pip install --no-cache-dir seaborn && \\\n    pip install --no-cache-dir pillow && \\\n    pip install --no-cache-dir networkx cvxpy && \\\n    pip install --no-cache-dir scikit-learn scikit-image && \\\n    pip install --no-cache-dir pygments && \\\n    rm -f /tmp/*.whl\n\nRUN apt-get install --no-install-recommends -y libseccomp2 gosu && \\\n    apt-get clean && \\\n    rm -r /var/lib/apt/lists /var/cache/apt/archives && \\\n    ln -s /usr/sbin/gosu /usr/sbin/su-exec && \\\n    mkdir /home/work && chmod 755 /home/work; rm -rf /var/lib/apt/lists/*; \\\n    mkdir /home/backend.ai && chmod 755 /home/backend.ai\nADD entrypoint.sh /usr/local/bin/entrypoint.sh\nRUN chmod +x /usr/local/bin/entrypoint.sh\nENTRYPOINT [\"/usr/local/bin/entrypoint.sh\"]\n\nCOPY policy.yml /home/backend.ai/policy.yml\n\n# Install jail\nCOPY --from=jail-builder /go/src/github.com/lablup/backend.ai-jail/backend.ai-jail /home/backend.ai/jail\nCOPY --from=hook-builder /root/backend.ai-hook/libbaihook.so /home/backend.ai/libbaihook.so\nENV LD_PRELOAD /home/backend.ai/libbaihook.so\n\n# Install kernel-runner scripts package\nRUN pip install --no-cache-dir \"backend.ai-kernel-runner[python]~=1.4.0\"\n\n# Matplotlib configuration and pre-heating\nENV MPLCONFIGDIR /home/backend.ai/.matplotlib\nRUN mkdir /home/backend.ai/.matplotlib\nCOPY matplotlibrc /home/backend.ai/.matplotlib/\nRUN echo 'import matplotlib.pyplot' > /tmp/matplotlib-fontcache.py \\\n    && python /tmp/matplotlib-fontcache.py \\\n    && rm /tmp/matplotlib-fontcache.py\n\n# For utilizing TPU cluster resolver\nRUN pip install --no-cache-dir google-api-python-client && \\\n    pip install --no-cache-dir oauth2client\n\nWORKDIR /home/work\nVOLUME [\"/home/work\"]\nEXPOSE 2000 2001 2002 2003\n\nLABEL ai.backend.timeout=\"0\" \\\n      ai.backend.maxmem=\"8g\" \\\n      ai.backend.maxcores=\"4\" \\\n      ai.backend.envs.corecount=\"OPENBLAS_NUM_THREADS,OMP_NUM_THREADS,NPROC\" \\\n      ai.backend.features=\"batch query uid-match user-input\"\n\nCMD [\"/home/backend.ai/jail\", \"-policy\", \"/home/backend.ai/policy.yml\", \\\n     \"/usr/local/bin/python\", \"-m\", \"ai.backend.kernel\", \"python\"]\n\n# vim: ft=dockerfile\n"
}