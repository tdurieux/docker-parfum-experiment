{
  "startTime": 1674250562877,
  "endTime": 1674250563603,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 90,
        "lineEnd": 90,
        "columnStart": 4,
        "columnEnd": 45
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 53,
        "lineEnd": 53,
        "columnStart": 7,
        "columnEnd": 18
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 59,
        "lineEnd": 59,
        "columnStart": 7,
        "columnEnd": 18
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 65,
        "lineEnd": 65,
        "columnStart": 7,
        "columnEnd": 18
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 74,
        "lineEnd": 74,
        "columnStart": 94,
        "columnEnd": 120
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 74,
        "lineEnd": 74,
        "columnStart": 127,
        "columnEnd": 140
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 34,
        "lineEnd": 34,
        "columnStart": 7,
        "columnEnd": 52
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 37,
        "lineEnd": 37,
        "columnStart": 7,
        "columnEnd": 37
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 39,
        "lineEnd": 39,
        "columnStart": 7,
        "columnEnd": 81
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 34,
        "lineEnd": 34,
        "columnStart": 7,
        "columnEnd": 52
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 37,
        "lineEnd": 37,
        "columnStart": 7,
        "columnEnd": 37
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 39,
        "lineEnd": 39,
        "columnStart": 7,
        "columnEnd": 81
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM ubuntu:trusty AS build-env\nWORKDIR /build\n\nARG ENV_CODECOV_MP4=\"\"\nENV ENV_CODECOV_MP4=\"${ENV_CODECOV_MP4}\"\n\nARG ENV_CODECOV_MG=\"\"\nENV ENV_CODECOV_MG=\"${ENV_CODECOV_MG}\"\n\nARG ENV_GITHUB_TOKEN=\"\"\nENV ENV_GITHUB_TOKEN=\"${ENV_GITHUB_TOKEN}\"\n\nARG ENV_GITHUB_USER=\"\"\nENV ENV_GITHUB_USER=\"${ENV_GITHUB_USER}\"\n\nARG ENV_COMMIT_HASH=\"\"\nENV ENV_COMMIT_HASH=\"${ENV_COMMIT_HASH}\"\n\nARG ENV_BRANCH=\"dev\"\nENV ENV_BRANCH=\"${ENV_BRANCH}\"\n\nARG ENV_CONFIGURATION=\"\"\nENV ENV_CONFIGURATION=\"${ENV_CONFIGURATION}\"\n\nARG ENV_CLONE=\"\"\nENV ENV_CLONE=\"${ENV_CLONE}\"\n\nARG APPVEYOR_API_URL=\"\"\nENV APPVEYOR_API_URL=\"${APPVEYOR_API_URL}\"\n\nRUN echo 'set number\\n\\\ncolorscheme torte' >> ~/.vimrc\n\nRUN apt-get update \\\n    && apt-get install --no-install-recommends -y software-properties-common \\\n    && add-apt-repository ppa:ubuntu-toolchain-r/test \\\n    && apt-get update \\\n    && apt-get install --no-install-recommends -y gcc-5 g++-5 \\\n    && update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-5 60 --slave /usr/bin/g++ g++ /usr/bin/g++-5 \\\n    && apt-get install --no-install-recommends -y --force-yes make git autoconf libtool gyp lcov curl vim && rm -rf /var/lib/apt/lists/*;\n\n####\n\nCOPY . local\n\nRUN if [ $ENV_CLONE ] ; then git clone --recursive https://github.com/mediagoom/mg.git \\\n        && cd mg \\\n        && git checkout $ENV_BRANCH \\\n        ; else cp --recursive local mg \\\n    ; fi\n\nRUN cd mg/deps/libuv/ \\\n    && ./autogen.sh \\\n    && ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" \\\n    && make \\\n    && make install \\\n    && cd ../..\n\nRUN cd mg/deps/AES/ \\\n    && ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" \\\n    && make CC=/usr/bin/gcc \\\n    && make install \\\n    && cd ../..\n\nRUN cd mg/deps/flavor/ \\\n    && ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" \\\n    && make CC=/usr/bin/gcc \\\n    && make install \\\n    && cd ../..\n\nENV LD_LIBRARY_PATH=/usr/local/lib\n\nRUN cd mg \\\n    && ./bootstrap \\\n    && if [ \"$ENV_CONFIGURATION\" = \"Debug\" -o \"$ENV_CODECOV_MG\" ]; then \\\n    echo \"DEBUG BUILD\" && ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --enable-debug; else ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\"; fi \\\n    && make check\n\nRUN if [ \"$ENV_CONFIGURATION\" = \"Debug\" -o \"$ENV_CODECOV_MG\" ]; then \\\n       cd mg/src/b64 \\\n    && find . -type f -name '*.gcda' -exec gcov {} + \\\n    && cd ../mg/core \\\n    && find . -type f -name '*.gcda' -exec gcov {} + \\\n    && cd ../media \\\n    && find . -type f -name '*.gcda' -exec gcov {} + \\\n    && cd ../../mgcli \\\n    && find . -type f -name '*.gcda' -exec gcov {} + \\\n    && cd ../../test \\\n    && find . -type f -name '*.gcda' -exec gcov {} + \\\n    ; fi\n\nRUN curl -f -s https://codecov.io/bash > codecov \\\n    && chmod +x codecov\n\nRUN cd mg && if [ \"$ENV_CODECOV_MG\" ]; then \\\n                if [ $ENV_COMMIT_HASH ] ; then ../codecov -t \"$ENV_CODECOV_MG\" -X gcov -X gcovout -C $ENV_COMMIT_HASH -B $ENV_BRANCH \\\n                ; else if [ $ENV_CLONE ] ; then ../codecov -t \"$ENV_CODECOV_MG\" -X gcov -X gcovout; fi \\\n                ; fi \\\n             ; fi\n\nRUN if [ $ENV_GITHUB_TOKEN ] ; then mv /build/mg/src/mg/media/mp4 /build/mg/src/mg/media/mp4tmp \\\n&& cd /build/mg/src/mg/media \\\n&& msg=\"$(git log -1 --pretty=format:%s | sed 's/\\//---/')\" \\\n&& git clone https://github.com/mediagoom/mp4.git \\\n&& mv /build/mg/src/mg/media/mp4tmp/* /build/mg/src/mg/media/mp4 \\\n&& rm mp4tmp -r \\\n&& git config --global user.email \"$ENV_GITHUB_USER@hotmail.com\" \\\n&& git config --global user.name \"$ENV_GITHUB_USER\" \\\n&& cd mp4 \\\n&& msg2=\"$(git log -1 --pretty=format:%s | sed 's/\\//---/')\" \\\n&& echo \"--[$msg]--[$msg2]--\" \\\n&& sed -i \"s/@mediagen/@mediagen - $msg -/\" $(grep -l 'mediagen' ./*) \\\n&& git add *.cpp && git add *.h && git commit -m \"$msg\" \\\n&& if [ \"$msg\" -ne \"$msg2\" ] ; then git push https://$ENV_GITHUB_USER:$ENV_GITHUB_TOKEN@github.com/mediagoom/mp4.git; fi \\\n; fi\n\n\nRUN if [ $ENV_CODECOV_MP4 ] ; then \\\ncd /build/mg/src/mg/media \\\n&& find ./mp4 -type f -name '*.gcov' -delete \\\n&& grep -l '0:Source:mp4/' ./*.gcov | xargs cp -t mp4 \\\n&& find . -type f -name '*.gcov' -exec sed -i 's/0:Source:mp4\\//0:Source:/' {} + \\\n&& cd /build/mg/src/mg/media/mp4 \\\n&& ../../../../../codecov -t \"$ENV_CODECOV_MP4\" -X gcov -X gcovout \\\n&& echo \"-----------\" \\\n&& cd /build/mg/src/mgcli \\\n&& find ../../src/mg/media/mp4 -type f -name '*.gcov' -delete \\\n&& grep -l '0:Source:../../src/mg/media/mp4/' ./*.gcov | xargs cp -t ../../src/mg/media/mp4 \\\n&& find ../../src/mg/media/mp4 -type f -name '*.gcov' -exec sed -i 's/0:Source:..\\/..\\/src\\/mg\\/media\\/mp4\\//0:Source:/' {} + \\\n&& cd /build/mg/src/mg/media/mp4 \\\n&& ../../../../../codecov -t \"$ENV_CODECOV_MP4\" -X gcov -X gcovout \\\n&& echo \"-----------\" \\\n&& cd /build/mg/test \\\n&& find ../src/mg/media/mp4 -type f -name '*.gcov' -delete \\\n&& grep -l '0:Source:../src/mg/media/mp4/' ./*.gcov | xargs cp -t ../src/mg/media/mp4 \\\n&& find ../src/mg/media/mp4 -type f -name '*.gcov' -exec sed -i 's/0:Source:..\\/src\\/mg\\/media\\/mp4\\//0:Source:/' {} + \\\n&& cd /build/mg/src/mg/media/mp4 \\\n&& ../../../../../codecov -t \"$ENV_CODECOV_MP4\" -X gcov -X gcovout \\\n; fi\n\nRUN cd mg/test && python ./test_multiple_bitrate.py\n\nRUN ln -s /build/mg/src/mgcli/mg /usr/local/mg\n\n\n\n\n\n\n"
}