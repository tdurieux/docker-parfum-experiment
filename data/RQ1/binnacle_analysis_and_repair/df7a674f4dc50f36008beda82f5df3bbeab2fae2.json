{
  "startTime": 1674252362140,
  "endTime": 1674252362387,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 31,
        "lineEnd": 31,
        "columnStart": 4,
        "columnEnd": 132
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 44,
        "lineEnd": 44,
        "columnStart": 4,
        "columnEnd": 154
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 22,
        "lineEnd": 22,
        "columnStart": 4,
        "columnEnd": 99
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 29,
        "lineEnd": 29,
        "columnStart": 4,
        "columnEnd": 62
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM teamcity-minimal-agent:latest\n\nLABEL dockerImage.teamcity.version=\"latest\" \\\n      dockerImage.teamcity.buildNumber=\"latest\"\n\n    # Opt out of the telemetry feature\nENV DOTNET_CLI_TELEMETRY_OPTOUT=true \\\n    # Disable first time experience\n    DOTNET_SKIP_FIRST_TIME_EXPERIENCE=true \\\n    # Configure Kestrel web server to bind to port 80 when present\n    ASPNETCORE_URLS=http://+:80 \\\n    # Enable detection of running in a container\n    DOTNET_RUNNING_IN_CONTAINER=true \\\n    # Enable correct mode for dotnet watch (only mode supported in a container)\n    DOTNET_USE_POLLING_FILE_WATCHER=true \\\n    # Skip extraction of XML docs - generally not useful within an image/container - helps perfomance\n    NUGET_XMLDOC_MODE=skip \\\n    GIT_SSH_VARIANT=ssh \\\n    # Install .NET Core SDK\n    DOTNET_SDK_VERSION=2.2.103\n\nRUN apt-get update && \\\n    apt-get install --no-install-recommends -y git mercurial apt-transport-https ca-certificates software-properties-common && \\\n\n    curl -fsSL https://download.docker.com/linux/ubuntu/gpg | apt-key add - && \\\n    add-apt-repository \"deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable\" && \\\n\n    apt-cache policy docker-ce && \\\n    apt-get update && \\\n    apt-get install --no-install-recommends -y docker-ce=18.06.1~ce~3-0~ubuntu systemd && \\\n    systemctl disable docker && \\\n    curl -f -SL https://github.com/docker/compose/releases/download/1.23.2/docker-compose-Linux-x86_64 -o /usr/local/bin/docker-compose && chmod +x /usr/local/bin/docker-compose && \\\n\n    apt-get install -y --no-install-recommends \\\n            libc6 \\\n            libgcc1 \\\n            libgssapi-krb5-2 \\\n            libicu60 \\\n            liblttng-ust0 \\\n            libssl1.0.0 \\\n            libstdc++6 \\\n            zlib1g \\\n        && rm -rf /var/lib/apt/lists/* && \\\n\n    curl -f -SL https://dotnetcli.blob.core.windows.net/dotnet/Sdk/$DOTNET_SDK_VERSION/dotnet-sdk-$DOTNET_SDK_VERSION-linux-x64.tar.gz --output dotnet.tar.gz \\\n        && mkdir -p /usr/share/dotnet \\\n        && tar -zxf dotnet.tar.gz -C /usr/share/dotnet \\\n        && rm dotnet.tar.gz \\\n        && find /usr/share/dotnet -name \"*.lzma\" -type f -delete \\\n        && ln -s /usr/share/dotnet/dotnet /usr/bin/dotnet && \\\n\n    apt-get clean all && \\\n\n    usermod -aG docker buildagent\n\n# A better fix for TW-52939 Dockerfile build fails because of aufs\nVOLUME /var/lib/docker\n\nCOPY run-docker.sh /services/run-docker.sh\n\n# Trigger .NET CLI first run experience by running arbitrary cmd to populate local package cache\nRUN dotnet help\n"
}