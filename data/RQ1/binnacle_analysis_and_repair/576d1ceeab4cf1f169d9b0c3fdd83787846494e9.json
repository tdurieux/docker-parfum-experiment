{
  "startTime": 1674239548805,
  "endTime": 1674239549458,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 108,
        "lineEnd": 108,
        "columnStart": 20,
        "columnEnd": 69
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 157,
        "lineEnd": 157,
        "columnStart": 4,
        "columnEnd": 84
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 166,
        "lineEnd": 166,
        "columnStart": 4,
        "columnEnd": 118
      }
    },
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 45,
        "lineEnd": 46,
        "columnStart": 4,
        "columnEnd": 13
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 142,
        "lineEnd": 142,
        "columnStart": 4,
        "columnEnd": 88
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM unocha/nodejs-builder:%%UPSTREAM%%\n\nMAINTAINER UN-OCHA Operations <ops+docker@humanitarianresponse.info>\n\n# Alpine based docker image.\n# Includes php composer, ruby bundler, less, npm, jasmine, compass and drush.\n\n# Parse arguments for the build command.\nARG VERSION\nARG VCS_URL\nARG VCS_REF\nARG BUILD_DATE\n\n# A little bit of metadata management.\n# See http://label-schema.org/\nLABEL org.label-schema.schema-version=\"1.0\" \\\n      org.label-schema.build-date=$BUILD_DATE \\\n      org.label-schema.vendor=\"UN-OCHA\" \\\n      org.label-schema.version=$VERSION \\\n      org.label-schema.vcs-url=$VCS_URL \\\n      org.label-schema.vcs-ref=$VCS_REF \\\n      org.label-schema.name=\"unified-builder\" \\\n      org.label-schema.description=\"This service provides a builder container for PHP, with node and sass helpers.\" \\\n      org.label-schema.architecture=\"x86_64\" \\\n      org.label-schema.distribution=\"Alpine Linux\" \\\n      org.label-schema.distribution-version=\"3.8\" \\\n      info.humanitarianresponse.php=$VERSION \\\n      info.humanitarianresponse.php.modules=\"bcmath bz2 calendar ctype curl dom exif fileinfo fpm ftp gd gettext iconv igbinary imagick imap intl json mcrypt memcached opcache openssl pdo pdo_mysql pdo_pgsql phar posix redis shmop soap sysvmsg sysvsem sysvshm simplexml sockets wddx xml xmlreader xmlwriter xsl zip zlib\" \\\n      info.humanitarianresponse.php.sapi=\"cli\" \\\n      info.humanitarianresponse.composer=\"1.8.4\" \\\n      info.humanitarianresponse.drush=\"8.1.18-dev\" \\\n      info.humanitarianresponse.node=\"8.11.3\" \\\n      info.humanitarianresponse.npm=\"5.6.0\" \\\n      info.humanitarianresponse.yarn=\"1.7.0\" \\\n      info.humanitarianresponse.compass=\"3.2.0\" \\\n      info.humanitarianresponse.jasmine=\"2.8.0\" \\\n      info.humanitarianresponse.casperjs=\"1.1.3\" \\\n      info.humanitarianresponse.phantomjs=\"2.0.0\" \\\n      info.humanitarianresponse.ruby=\"2.3.1\"\n\nENV DRUSH_VERSION=8 \\\n    DRUSH_RELEASE=8.x-dev\n\nCOPY drushrc.php /drushrc.php\n\nRUN npm install --global \\\n      jasmine && \\\n    rm -rf /tmp/npm-* && \\\n    \\\n    apk add --update-cache \\\n      bash \\\n      ca-certificates \\\n      curl \\\n      build-base \\\n      git \\\n      gzip \\\n      openssh-client \\\n      patch \\\n      rsync \\\n      tar \\\n      wget \\\n      php7-bcmath \\\n      php7-bz2 \\\n      php7-calendar \\\n      php7-ctype \\\n      php7-curl \\\n      php7-dom \\\n      php7-exif \\\n      php7-iconv \\\n      php7-fileinfo \\\n      php7-ftp \\\n      php7-gd \\\n      php7-gettext \\\n      php7-iconv \\\n      php7-imagick \\\n      php7-imap \\\n      php7-intl \\\n      php7-json \\\n      php7-mbstring \\\n      php7-mcrypt \\\n      php7-memcached \\\n      php7-mysqli \\\n      php7-opcache \\\n      php7-openssl \\\n      php7-pdo \\\n      php7-pdo_mysql \\\n      php7-pdo_pgsql \\\n      php7-phar \\\n      php7-posix \\\n      php7-redis \\\n      php7-shmop \\\n      php7-sysvmsg \\\n      php7-sysvsem \\\n      php7-sysvshm \\\n      php7-simplexml \\\n      php7-soap \\\n      php7-sockets \\\n      php7-tokenizer \\\n      php7-wddx \\\n      php7-xml \\\n      php7-xmlreader \\\n      php7-xmlwriter \\\n      php7-xsl \\\n      php7-zip \\\n      php7-zlib && \\\n    rm -rf /var/cache/apk/* && \\\n    cd /tmp && \\\n    ln -sf /usr/bin/php7 /usr/bin/php && \\\n    COMPOSER_HASH=$( curl -f -sS https://composer.github.io/installer.sig) && \\\n    php -r \"copy('https://getcomposer.org/installer', 'composer-setup.php');\" && \\\n    php -r \"if (hash_file('SHA384', 'composer-setup.php') === '$COMPOSER_HASH') { echo 'Installer verified'; } else { echo 'Installer corrupt'; unlink('composer-setup.php'); } echo PHP_EOL;\" && \\\n    php composer-setup.php --install-dir=/usr/bin --filename=composer && \\\n    php -r \"unlink('composer-setup.php');\" && \\\n    # Install drush and symlink it somewhere useful.\n    COMPOSER_HOME=/usr/local/drush$DRUSH_VERSION \\\n      composer global require drush/drush:$DRUSH_RELEASE && \\\n    cd / && \\\n    ln -sf /usr/local/drush$DRUSH_VERSION/vendor/bin/drush /usr/bin/drush && \\\n    drush status && \\\n    # Install registry_rebuild to the appuser's homedir.\n    drush -y @none dl --destination=/home/appuser/.drush/commands registry_rebuild-7.x && \\\n    # Ensure the appuser's drush directory is writable.\n    chown -R appuser:appuser /home/appuser/.drush && \\\n    # Symlink the appuser's drush module to root's.\n    mkdir -p /root/.drush && \\\n    ln -s /home/appuser/.drush/commands /root/.drush/commands && \\\n    # Add our default drushrc.php file.\n    mkdir -p /etc/drush && \\\n    mv /drushrc.php /etc/drush/drushrc.php && \\\n    # Cleanup.\n    rm -f /tmp/drush8-2282.patch /tmp/drush8-2567.patch && \\\n    # Build igbinary php extension.\n    apk add --update-cache --virtual .build-dependencies \\\n      git \\\n      php7-dev \\\n      autoconf \\\n      g++ \\\n      make && \\\n    cd /tmp && \\\n    git clone https://github.com/igbinary/igbinary && \\\n    cd igbinary && \\\n    phpize7 && \\\n    ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" CFLAGS=\"-O2 -g\" --enable-igbinary --with-php-config=/usr/bin/php-config7 && \\\n    make && \\\n    make install && \\\n    cd .. && \\\n    rm -rf igbinary && \\\n    rm -rf /usr/include/php/ && \\\n    apk del .build-dependencies && \\\n    rm -rf /var/cache/apk/* && \\\n    # Add dependencies for capsper and phantom.\n    apk add --update-cache \\\n      fontconfig \\\n      libc6-compat \\\n      python && \\\n    rm -rf /var/cache/apk/* && \\\n    # Install casper.\n    curl -f -L -o /tmp/casperjs.zip https://github.com/n1k0/casperjs/archive/master.zip && \\\n    mkdir /opt && \\\n    unzip /tmp/casperjs.zip -d /opt && \\\n    mv /opt/casperjs-master /opt/casperjs && \\\n    ln -s /opt/casperjs/bin/casperjs /usr/local/bin/casperjs && \\\n    rm -f /tmp/casperjs.zip && \\\n    # Found an actual working PhantomJS at http://fabiorehm.com/blog/2015/07/22/building-a-minimum-viable-phantomjs-2-docker-image\n    # It's a year old, but it's newer than the old one (1.9.8) and it works.\n    # Mind you, only extract part of the archive, or our crafted passwd and shadow files wil be overwritten.\n    curl -f -Ls https://github.com/fgrehm/docker-phantomjs2/releases/download/v2.0.0-20150722/dockerized-phantomjs.tar.gz \\\n      | tar xz -C / bin etc/fonts etc/ssl lib lib64 usr/lib usr/local usr/share && npm cache clean --force;\n\nWORKDIR /tmp\n\nCMD [\"bash\"]\n"
}