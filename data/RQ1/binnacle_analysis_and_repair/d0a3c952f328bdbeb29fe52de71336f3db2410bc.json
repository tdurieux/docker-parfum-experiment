{
  "startTime": 1674240538889,
  "endTime": 1674240539096,
  "originalSmells": [
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 70,
        "lineEnd": 70,
        "columnStart": 4,
        "columnEnd": 72
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 72,
        "lineEnd": 72,
        "columnStart": 4,
        "columnEnd": 76
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 6,
        "lineEnd": 28,
        "columnStart": 2,
        "columnEnd": 6
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 6,
        "lineEnd": 28,
        "columnStart": 2,
        "columnEnd": 6
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# Use an official Python runtime as a parent image\nARG FROM_IMAGE=nvidia/cuda:9.1-cudnn7-devel-ubuntu16.04\nFROM ${FROM_IMAGE}\n\n# install opencv for python 3\nRUN apt-get update && \\\n  apt-get install --no-install-recommends -y \\\n  build-essential \\\n  cmake \\\n  git \\\n  libasound2-dev \\\n  libavformat-dev \\\n  libcanberra-gtk3-module \\\n  libgtk-3-dev \\\n  libjasper-dev \\\n  libjpeg-dev \\\n  libpng-dev \\\n  libpq-dev \\\n  libswscale-dev \\\n  libtbb-dev \\\n  libtbb2 \\\n  libtiff-dev \\\n  pkg-config \\\n  python3 \\\n  python3-numpy \\\n  python3-pip \\\n  unzip \\\n  wget \\\n  yasm && rm -rf /var/lib/apt/lists/*;\n\nWORKDIR /\nENV OPENCV_VERSION=\"3.4.1\"\nRUN wget https://github.com/opencv/opencv/archive/${OPENCV_VERSION}.zip \\\n&& unzip ${OPENCV_VERSION}.zip \\\n&& mkdir /opencv-${OPENCV_VERSION}/cmake_binary \\\n&& cd /opencv-${OPENCV_VERSION}/cmake_binary \\\n&& cmake -DBUILD_TIFF=ON \\\n  -DBUILD_opencv_java=OFF \\\n  -DWITH_CUDA=OFF \\\n  -DENABLE_AVX=ON \\\n  -DWITH_OPENGL=ON \\\n  -DWITH_OPENCL=ON \\\n  -DWITH_IPP=ON \\\n  -DWITH_TBB=ON \\\n  -DWITH_EIGEN=ON \\\n  -DWITH_V4L=ON \\\n  -DBUILD_TESTS=OFF \\\n  -DBUILD_PERF_TESTS=OFF \\\n  -DCMAKE_BUILD_TYPE=RELEASE \\\n  -DCMAKE_INSTALL_PREFIX=$(python3 -c \"import sys; print(sys.prefix)\") \\\n  -DPYTHON_EXECUTABLE=$(which python3) \\\n  -DPYTHON_INCLUDE_DIR=$(python3 -c \"from distutils.sysconfig import get_python_inc; print(get_python_inc())\") \\\n  -DPYTHON_PACKAGES_PATH=$(python3 -c \"from distutils.sysconfig import get_python_lib; print(get_python_lib())\") .. \\\n&& make -j $(nproc) install \\\n&& rm /${OPENCV_VERSION}.zip \\\n&& rm -r /opencv-${OPENCV_VERSION}\n\n# install ssd vgg model\nWORKDIR /root/.chainer/dataset/_dl_cache/286b14d9978d61e62eece136d00359e5\nRUN wget https://github.com/yuyu2172/share-weights/releases/download/0.0.3/ssd_vgg16_imagenet_2017_06_09.npz \\\n&& mkdir -p /root/.chainer/dataset/pfnet/chainercv/models \\\n&& cp /root/.chainer/dataset/_dl_cache/286b14d9978d61e62eece136d00359e5/ssd_vgg16_imagenet_2017_06_09.npz /root/.chainer/dataset/pfnet/chainercv/models\n\n# Set the working directory to /app\nWORKDIR /app\n\nCOPY requirements.txt requirements_cpu.txt /app/\nARG CPU_ONLY\nRUN \\\n  if [ \"x$CPU_ONLY\" = \"x\" ] ; then \\\n    pip3 install --no-cache-dir -v --trusted-host pypi.python.org -r requirements.txt; \\\n  else \\\n    pip3 install --no-cache-dir -v --trusted-host pypi.python.org -r requirements_cpu.txt; \\\n  fi\n\n# Copy the current directory contents into the container at /app\nCOPY . /app\n# When developing, you should use a volume instead of rebuilding the image everytime (see Readme)\n\n# Define environment variable\nENV NAME Schaaafrichter\n"
}