{
  "startTime": 1674242375378,
  "endTime": 1674242376337,
  "originalSmells": [
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 300,
        "lineEnd": 300,
        "columnStart": 4,
        "columnEnd": 22
      }
    },
    {
      "rule": "rmRecursiveAfterMktempD",
      "position": {
        "lineStart": 311,
        "lineEnd": 311,
        "columnStart": 22,
        "columnEnd": 31
      }
    },
    {
      "rule": "mkdirUsrSrcThenRemove",
      "position": {
        "lineStart": 128,
        "lineEnd": 128,
        "columnStart": 2,
        "columnEnd": 20
      }
    },
    {
      "rule": "sha256sumEchoOneSpaces",
      "position": {
        "lineStart": 132,
        "lineEnd": 132,
        "columnStart": 4,
        "columnEnd": 52
      }
    },
    {
      "rule": "gpgUseBatchFlag",
      "position": {
        "lineStart": 141,
        "lineEnd": 141,
        "columnStart": 6,
        "columnEnd": 67
      }
    },
    {
      "rule": "gpgUseBatchFlag",
      "position": {
        "lineStart": 142,
        "lineEnd": 142,
        "columnStart": 6,
        "columnEnd": 52
      }
    },
    {
      "rule": "gpgUseBatchFlag",
      "position": {
        "lineStart": 143,
        "lineEnd": 143,
        "columnStart": 6,
        "columnEnd": 69
      }
    },
    {
      "rule": "gpgUseBatchFlag",
      "position": {
        "lineStart": 144,
        "lineEnd": 144,
        "columnStart": 6,
        "columnEnd": 58
      }
    },
    {
      "rule": "gpgUseBatchFlag",
      "position": {
        "lineStart": 313,
        "lineEnd": 313,
        "columnStart": 10,
        "columnEnd": 59
      }
    },
    {
      "rule": "gpgUseBatchFlag",
      "position": {
        "lineStart": 314,
        "lineEnd": 314,
        "columnStart": 10,
        "columnEnd": 61
      }
    },
    {
      "rule": "gpgUseBatchFlag",
      "position": {
        "lineStart": 315,
        "lineEnd": 315,
        "columnStart": 10,
        "columnEnd": 71
      }
    },
    {
      "rule": "gpgUseBatchFlag",
      "position": {
        "lineStart": 316,
        "lineEnd": 316,
        "columnStart": 10,
        "columnEnd": 56
      }
    },
    {
      "rule": "gpgUseBatchFlag",
      "position": {
        "lineStart": 317,
        "lineEnd": 317,
        "columnStart": 10,
        "columnEnd": 73
      }
    },
    {
      "rule": "gpgUseBatchFlag",
      "position": {
        "lineStart": 318,
        "lineEnd": 318,
        "columnStart": 10,
        "columnEnd": 62
      }
    },
    {
      "rule": "gpgUseHaPools",
      "position": {
        "lineStart": 143,
        "lineEnd": 143,
        "columnStart": 6,
        "columnEnd": 69
      }
    },
    {
      "rule": "gpgUseHaPools",
      "position": {
        "lineStart": 317,
        "lineEnd": 317,
        "columnStart": 10,
        "columnEnd": 73
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM ubuntu:bionic\nLABEL maintainer=\"Jurijs Jegorovs jurijs+oss@scandiweb.com\"\n\nARG COMPOSER_HOME=/var/lib/composer\nARG COMPOSER_VERSION=latest\nARG COMPOSER_ALLOW_SUPERUSER=1\nARG NODEJS_DIR=/var/lib/node\nARG NODEJS_VERSION=lts\nARG GOSU_GPG_KEY=B42F6819007F00F88E364FD4036A9C25BF357DD4\n\n# Set bash by default\nSHELL [\"/bin/bash\", \"-c\"]\n\nENV TERM=xterm-256color \\\n    DEBIAN_FRONTEND=noninteractive \\\n    DOCKER_DEBUG=${DOCKER_DEBUG} \\\n    CPU_CORES=$(nproc) \\\n    COMPOSER_ALLOW_SUPERUSER=$(COMPOSER_ALLOW_SUPERUSER) \\\n    COMPOSER_HOME=/var/lib/composer \\\n    MAKE_OPTS=\"-j $CPU_CORES\" \\\n    N_PREFIX=${NODEJS_DIR} \\\n    PATH=${NODEJS_DIR}/bin:${BASEPATH}/bin:/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin\n# persistent / runtime deps\nENV PHPIZE_DEPS \\\n  autoconf \\\n  dpkg-dev \\\n  file \\\n  g++ \\\n  gcc \\\n  libc-dev \\\n  make \\\n  pkg-config \\\n  re2c \\\n  libcurl4-openssl-dev \\\n  curl \\\n  wget \\\n  openssl \\\n  bash \\\n  apt-transport-https \\\n  git \\\n  zip \\\n  unzip \\\n  autoconf \\\n  automake \\\n  nasm \\\n  pkg-config \\\n  apt-utils \\\n  libjpeg-dev \\\n  libpng-dev \\\n  libfreetype6-dev \\\n  zlib1g-dev \\\n  libicu-dev \\\n  g++ \\\n  libmcrypt-dev \\\n  libxslt1-dev \\\n  libsodium-dev \\\n  libargon2-0-dev\n\n# Update server packages to latest versions\nRUN apt-get -qq update &&\\\n    apt-get -qq dist-upgrade -y &&\\\n    apt-get -qq install -y \\\n    libfreetype6-dev \\\n    build-essential \\\n    libicu-dev \\\n    libmcrypt-dev \\\n    libpng-dev \\\n    libxslt1-dev \\\n    redis-tools \\\n    ca-certificates \\\n    unzip \\\n    git \\\n    rsync \\\n    wget \\\n    nano \\\n    vim \\\n    pv \\\n    gnupg \\\n    bc \\\n    curl \\\n    msmtp \\\n    msmtp-mta \\\n    $PHPIZE_DEPS \\\n    bison \\\n    libbison-dev \\\n    ca-certificates \\\n    libedit2 \\\n    libxml2 \\\n    libcurl4-openssl-dev \\\n    xz-utils \\\n    libssl-dev \\\n    libreadline-dev \\\n    --no-install-recommends && rm -r /var/lib/apt/lists/*\n\nENV PHP_INI_DIR /usr/local/etc/php\nRUN mkdir -p $PHP_INI_DIR/conf.d\n\nENV PHP_EXTRA_CONFIGURE_ARGS --enable-fpm --with-fpm-user=www-data --with-fpm-group=www-data\n\n# Apply stack smash protection to functions using local buffers and alloca()\n# Make PHP's main executable position-independent (improves ASLR security mechanism, and has no performance impact on x86_64)\n# Enable optimization (-O2)\n# Enable linker optimization (this sorts the hash buckets to improve cache locality, and is non-default)\n# Adds GNU HASH segments to generated executables (this is used if present, and is much faster than sysv hash; in this configuration, sysv hash is also generated)\n# https://github.com/docker-library/php/issues/272\nENV PHP_CFLAGS=\"-fstack-protector-strong -fpic -fpie -O2\"\nENV PHP_CPPFLAGS=\"$PHP_CFLAGS\"\nENV PHP_LDFLAGS=\"-Wl,-O1 -Wl,--hash-style=both -pie\"\n\nENV GPG_KEYS 1729F83938DA44E27BA0F4D3DBDB397470D12172 B1B44D8F021E4E2D6021E995DC9FF8D3EE5AF27F\n\nENV PHP_VERSION 7.2.16\nENV PHP_URL=\"https://secure.php.net/get/php-7.2.16.tar.xz/from/this/mirror\" PHP_ASC_URL=\"https://secure.php.net/get/php-7.2.16.tar.xz.asc/from/this/mirror\"\nENV PHP_SHA256=\"7d91ed3c1447c6358a3d53f84599ef854aca4c3622de7435e2df115bf196e482\" PHP_MD5=\"\"\n\nRUN set -xe; \\\n  fetchDeps=' \\\n  '; \\\n  if ! command -v gpg > /dev/null; then \\\n    fetchDeps=\"$fetchDeps \\\n    dirmngr \\\n    gnupg \\\n  \"; \\\n  fi; \\\n  apt-get update; \\\n  apt-get dist-upgrade -y; \\\n  apt-get install -y --no-install-recommends $fetchDeps; \\\n  rm -rf /var/lib/apt/lists/*; \\\n  mkdir -p /usr/src; rm -rf /usr/src \\\n  cd /usr/src; \\\n  wget -O php.tar.xz \"$PHP_URL\"; \\\n  if [ -n \"$PHP_SHA256\" ]; then \\\n    echo \"$PHP_SHA256  *php.tar.xz\" | sha256sum -c -; \\\n  fi; \\\n  if [ -n \"$PHP_MD5\" ]; then \\\n    echo \"$PHP_MD5 *php.tar.xz\" | md5sum -c -; \\\n  fi; \\\n  if [ -n \"$PHP_ASC_URL\" ]; then \\\n    wget -O php.tar.xz.asc \"$PHP_ASC_URL\"; \\\n    export GNUPGHOME=\"$(mktemp -d)\"; \\\n    for key in $GPG_KEYS; do \\\n      gpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys \"$key\" || \\\n      gpg --batch --keyserver pgp.mit.edu --recv-keys \"$key\" || \\\n      gpg --batch --keyserver ipv4.ha.pool.sks-keyservers.net --recv-keys \"$key\" || \\\n      gpg --batch --keyserver keyserver.pgp.com --recv-keys \"$key\"; \\\n    done; \\\n    gpg --batch --verify php.tar.xz.asc php.tar.xz; \\\n    rm -rf \"$GNUPGHOME\"; \\\n  fi;\n\nCOPY docker-php-source /usr/local/bin/\n\nRUN set -xe \\\n  && buildDeps=\" \\\n  $PHP_EXTRA_BUILD_DEPS \\\n  libcurl4-openssl-dev \\\n  libedit-dev \\\n  libssl-dev \\\n  libxml2-dev \\\n  zlib1g-dev \\\n  libpng-dev \\\n  libargon2-0-dev \\\n  \" \\\n  && apt-get update && apt-get install -y $buildDeps --no-install-recommends && rm -rf /var/lib/apt/lists/* \\\n  \\\n  && export CFLAGS=\"$PHP_CFLAGS\" \\\n  CPPFLAGS=\"$PHP_CPPFLAGS\" \\\n  LDFLAGS=\"$PHP_LDFLAGS\" \\\n  && chmod +x /usr/local/bin/docker-php-source \\\n  && docker-php-source extract \\\n  && cd /usr/src/php \\\n  && gnuArch=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" \\\n  && debMultiarch=\"$(dpkg-architecture --query DEB_BUILD_MULTIARCH)\" \\\n# https://bugs.php.net/bug.php?id=74125\n  #&& if [ ! -d /usr/include/curl ]; then \\\n  # ln -sT \"/usr/include/$debMultiarch/curl\" /usr/local/include/curl; \\\n  #fi \\\n  && ./configure \\\n  --build=\"$gnuArch\" \\\n  --with-config-file-path=\"$PHP_INI_DIR\" \\\n  --with-config-file-scan-dir=\"$PHP_INI_DIR/conf.d\" \\\n  \\\n  --disable-cgi \\\n  \\\n# --enable-ftp is included here because ftp_ssl_connect() needs ftp to be compiled statically (see https://github.com/docker-library/php/issues/236)\n  --enable-ftp \\\n# --enable-mbstring is included here because otherwise there's no way to get pecl to use it properly (see https://github.com/docker-library/php/issues/195)\n  --enable-mbstring \\\n# --enable-mysqlnd is included here because it's harder to compile after the fact than extensions are (since it's a plugin for several extensions, not an extension in itself)\n  --enable-mysqlnd \\\n# https://wiki.php.net/rfc/argon2_password_hash (7.2+)\n  --with-password-argon2 \\\n  \\\n  --with-curl \\\n  --with-libedit \\\n  --with-openssl \\\n  --with-zlib \\\n  --with-sodium \\\n  \\\n# bundled pcre does not support JIT on s390x\n# https://manpages.debian.org/stretch/libpcre3-dev/pcrejit.3.en.html#AVAILABILITY_OF_JIT_SUPPORT\n  $(test \"$gnuArch\" = 's390x-linux-gnu' && echo '--without-pcre-jit') \\\n  --with-libdir=\"lib/$debMultiarch\" \\\n  \\\n  $PHP_EXTRA_CONFIGURE_ARGS \\\n  && make -j \"$(nproc)\" \\\n  && make install \\\n  && { find /usr/local/bin /usr/local/sbin -type f -executable -exec strip --strip-all '{}' + || true; } \\\n  && make clean \\\n  && cd / \\\n  && docker-php-source delete \\\n  \\\n# https://github.com/docker-library/php/issues/443\n  && pecl update-channels \\\n  && rm -rf /tmp/pear ~/.pearrc\n\nCOPY docker-php-ext-* docker-php-entrypoint /usr/local/bin/\n\nENTRYPOINT [\"docker-php-entrypoint\"]\n\nWORKDIR /var/www/html\n\nRUN set -ex \\\n\t&& cd /usr/local/etc \\\n\t&& if [ -d php-fpm.d ]; then \\\n\t\t# for some reason, upstream's php-fpm.conf.default has \"include=NONE/etc/php-fpm.d/*.conf\" \\\n\t\tsed 's!=NONE/!=!g' php-fpm.conf.default | tee php-fpm.conf > /dev/null; \\\n\t\tcp php-fpm.d/www.conf.default php-fpm.d/www.conf; \\\n\telse \\\n\t\t# PHP 5.x doesn't use \"include=\" by default, so we'll create our own simple config that mimics PHP 7+ for consistency\n\t\tmkdir php-fpm.d; \\\n\t\tcp php-fpm.conf.default php-fpm.d/www.conf; \\\n\t\t{ \\\n\t\t\techo '[global]'; \\\n\t\t\techo 'include=etc/php-fpm.d/*.conf'; \\\n\t\t} | tee php-fpm.conf; \\\n\tfi \\\n\t&& { \\\n\t\techo '[global]'; \\\n\t\techo 'error_log = /proc/self/fd/2'; \\\n\t\techo; \\\n\t\techo '[www]'; \\\n\t\techo '; if we send this to /proc/self/fd/1, it never appears'; \\\n\t\techo 'access.log = /proc/self/fd/2'; \\\n\t\techo; \\\n\t\techo 'clear_env = no'; \\\n\t\techo; \\\n\t\techo '; Ensure worker stdout and stderr are sent to the main error log.'; \\\n\t\techo 'catch_workers_output = yes'; \\\n\t} | tee php-fpm.d/docker.conf \\\n\t&& { \\\n\t\techo '[global]'; \\\n\t\techo 'daemonize = no'; \\\n\t\techo; \\\n\t\techo '[www]'; \\\n    echo 'pm = dynamic'; \\\n    echo 'pm.max_children = 25'; \\\n    echo 'pm.start_servers = 10'; \\\n    echo 'pm.min_spare_servers = 5'; \\\n    echo 'pm.max_spare_servers = 10'; \\\n    echo 'pm.max_requests = 1000'; \\\n    echo 'pm.process_idle_timeout = 10s'; \\\n    echo 'listen = [::]:9000'; \\\n\t} | tee php-fpm.d/zz-docker.conf \\\n  && { \\\n    echo 'defaults'; \\\n    echo 'logfile /proc/self/fd/2'; \\\n    echo 'timeout 30'; \\\n    echo 'host maildev'; \\\n    echo 'tls off'; \\\n    echo 'tls_certcheck off'; \\\n    echo 'port 25'; \\\n    echo 'auth off'; \\\n    echo 'from no-reply@docker'; \\\n    echo 'account default'; \\\n  } | tee /etc/msmtprc\n\n# Configure the gd library\nRUN docker-php-ext-configure \\\n  gd --with-freetype-dir=/usr/include/ --with-jpeg-dir=/usr/include/\n\n\n# Install required PHP extensions\nRUN docker-php-ext-install -j$(nproc) \\\n    gd \\\n    intl \\\n    mbstring \\\n    pdo \\\n    pdo_mysql \\\n    phar \\\n    xsl \\\n    zip \\\n    bcmath \\\n    dom \\\n    soap\n\n# Install node\nRUN set -eux; \\\n    wget -O - -o /dev/null https://git.io/n-install | N_PREFIX=$NODEJS_DIR bash -s -- -t; \\\n    wget -O - -o /dev/null https://git.io/n-install | N_PREFIX=$NODEJS_DIR bash -s -- -q $NODEJS_VERSION; \\\n    npm install npm -g && npm cache clean --force;\n\n# Installing gosu to support Linux machines, used for properly dropping privileges to user\nENV GOSU_VERSION 1.10\nRUN set -euo pipefail; \\\n\n    dpkgArch=\"$(dpkg --print-architecture | awk -F- '{ print $NF }')\"; \\\n    wget -O /usr/local/bin/gosu \"https://github.com/tianon/gosu/releases/download/$GOSU_VERSION/gosu-$dpkgArch\"; \\\n    wget -O /usr/local/bin/gosu.asc \"https://github.com/tianon/gosu/releases/download/$GOSU_VERSION/gosu-$dpkgArch.asc\"; \\\n\n# verify the signature\n  export GNUPGHOME=\"$(mktemp -d)\"; rm -rf -d \\\n  for key in $GOSU_GPG_KEY; do \\\n          gpg --batch --keyserver keys.gnupg.net --recv-keys \"$key\" || \\\n          gpg --batch --keyserver pgp.key-server.io--recv-keys \"$key\" || \\\n          gpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys \"$key\" || \\\n          gpg --batch --keyserver pgp.mit.edu --recv-keys \"$key\" || \\\n          gpg --batch --keyserver ipv4.ha.pool.sks-keyservers.net --recv-keys \"$key\" || \\\n          gpg --batch --keyserver keyserver.pgp.com --recv-keys \"$key\"; \\\n    done; \\\n  gpg --batch --verify /usr/local/bin/gosu.asc /usr/local/bin/gosu; \\\n  rm -r \"$GNUPGHOME\" /usr/local/bin/gosu.asc; \\\n\n  chmod +x /usr/local/bin/gosu; \\\n# verify that the binary works\n\tgosu nobody true;\n\n# Install PHP Composer\nRUN set -euo pipefail; \\\n    echo \"$(tput setaf 111)Installing php composer$(tput sgr0)\"; \\\n    export EXPECTED_SIGNATURE=$(curl -s -f -L https://composer.github.io/installer.sig); \\\n    wget -nc -O composer-setup.php https://getcomposer.org/installer; \\\n    echo \"$(tput setaf 111)Checking php composer signature$(tput sgr0)\"; \\\n    echo \"$EXPECTED_SIGNATURE\" composer-setup.php | sha384sum -c - ; \\\n    \\\n    if [ -n \"$COMPOSER_VERSION\" ] && [ \"$COMPOSER_VERSION\" != \"latest\" ]; then \\\n      COMPOSER_VERSION_OVERRIDE=\"--version=$COMPOSER_VERSION\"; \\\n    else COMPOSER_VERSION_OVERRIDE=\"\"; \\\n    fi; \\\n    php composer-setup.php --no-ansi --install-dir=/usr/local/bin --filename=composer $COMPOSER_VERSION_OVERRIDE; \\\n    rm composer-setup.php; \\\n    # Ensure cache folder is available \\\n    echo \"The compose home dir is: $COMPOSER_HOME\"; \\\n    # Install prestissimo, multithread install helper \\\n    composer global require hirak/prestissimo;\n\nEXPOSE 9000\nCMD [\"php-fpm\"]\n\n# Clean up APT when done.\nRUN apt-get clean && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/* &&\\\n    apt-get purge -y --auto-remove -o \\\n    APT::AutoRemove::RecommendsImportant=false $fetchDeps\n"
}