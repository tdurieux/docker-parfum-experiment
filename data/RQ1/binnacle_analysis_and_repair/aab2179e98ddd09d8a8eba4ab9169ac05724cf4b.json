{
  "startTime": 1674248528460,
  "endTime": 1674248528891,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 89,
        "lineEnd": 89,
        "columnStart": 4,
        "columnEnd": 122
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 84,
        "lineEnd": 84,
        "columnStart": 11,
        "columnEnd": 36
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 85,
        "lineEnd": 85,
        "columnStart": 11,
        "columnEnd": 49
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 80,
        "lineEnd": 80,
        "columnStart": 11,
        "columnEnd": 50
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 81,
        "lineEnd": 81,
        "columnStart": 11,
        "columnEnd": 97
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 82,
        "lineEnd": 82,
        "columnStart": 11,
        "columnEnd": 40
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 83,
        "lineEnd": 83,
        "columnStart": 11,
        "columnEnd": 38
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 80,
        "lineEnd": 80,
        "columnStart": 11,
        "columnEnd": 50
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 81,
        "lineEnd": 81,
        "columnStart": 11,
        "columnEnd": 97
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 82,
        "lineEnd": 82,
        "columnStart": 11,
        "columnEnd": 40
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 83,
        "lineEnd": 83,
        "columnStart": 11,
        "columnEnd": 38
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# Dockerfile for Hyperledger fabric all-in-one development, including:\n# * fabric-peer\n# * fabric-orderer\n# * fabric-ca\n# * cryptogen\n# * configtxgen\n# * configtxlator\n# * chaintools\n# * gotools\n\n# If you need a pure peer node to run, please see the\n# * yeasy/hyperledger-peer\n# * yeasy/hyperledger-orderer\n# * yeasy/hyperledger-ca\n\n# Workdir is set to $GOPATH/src/github.com/hyperledger/fabric\n# Data is stored under /var/hyperledger/db and /var/hyperledger/production\n\nFROM golang:1.8\nLABEL maintainer \"Baohua Yang <yangbaohua@gmail.com>\"\n\n# fabric-peers\nEXPOSE 7050 7051\n# fabric-ca-server RESTful\nEXPOSE 7054\n\nENV DEBIAN_FRONTEND noninteractive\n\n# Only useful for this Dockerfile\nENV FABRIC_ROOT=$GOPATH/src/github.com/hyperledger/fabric \\\n    FABRIC_CA_ROOT=$GOPATH/src/github.com/hyperledger/fabric-ca\n\nENV ARCH x86_64\n\n# version for the base images, e.g., fabric-ccenv, fabric-baseos\nENV BASEIMAGE_RELEASE 0.3.1\n# BASE_VERSION is required in core.yaml to build and run cc container\nENV BASE_VERSION 1.0.0\n# version for the peer/orderer binaries, the community version tracks the hash value like 1.0.0-snapshot-51b7e85\nENV PROJECT_VERSION 1.0.0\n# generic builder environment: builder: $(DOCKER_NS)/fabric-ccenv:$(ARCH)-$(PROJECT_VERSION)\nENV DOCKER_NS hyperledger\n# for golang or car's baseos: $(BASE_DOCKER_NS)/fabric-baseos:$(ARCH)-$(BASEIMAGE_RELEASE)\nENV BASE_DOCKER_NS hyperledger\nENV LD_FLAGS=\"-X github.com/hyperledger/fabric/common/metadata.Version=${PROJECT_VERSION} \\\n             -X github.com/hyperledger/fabric/common/metadata.BaseVersion=${BASEIMAGE_RELEASE} \\\n             -X github.com/hyperledger/fabric/common/metadata.BaseDockerLabel=org.hyperledger.fabric \\\n             -X github.com/hyperledger/fabric/common/metadata.DockerNamespace=hyperledger \\\n             -X github.com/hyperledger/fabric/common/metadata.BaseDockerNamespace=hyperledger\"\n\n# peer env\nENV FABRIC_CFG_PATH=/etc/hyperledger/fabric\nENV CORE_PEER_MSPCONFIGPATH=$FABRIC_CFG_PATH/msp \\\n    CORE_LOGGING_LEVEL=DEBUG\n\n# orderer env\nENV ORDERER_GENERAL_LOCALMSPDIR=$FABRIC_CFG_PATH/msp \\\n    ORDERER_GENERAL_LISTENADDRESS=0.0.0.0 \\\n    ORDERER_GENERAL_GENESISPROFILE=TwoOrgsOrdererGenesis\n\n# ca env, # ca-server and ca-client will check the following env in order, to get the home cfg path\nENV FABRIC_CA_HOME=/etc/hyperledger/fabric-ca-server \\\n    FABRIC_CA_SERVER_HOME=/etc/hyperledger/fabric-ca-server \\\n    FABRIC_CA_CLIENT_HOME=$HOME/.fabric-ca-client \\\n    CA_CFG_PATH=/etc/hyperledger/fabric-ca\n\nRUN mkdir -p /var/hyperledger/db \\\n        /var/hyperledger/production \\\n        $GOPATH/src/github.com/hyperledger \\\n        $FABRIC_CFG_PATH \\\n        $FABRIC_CFG_PATH/crypto-config \\\n        /chaincode/input \\\n        /chaincode/output \\\n        $FABRIC_CA_SERVER_HOME \\\n        $FABRIC_CA_CLIENT_HOME \\\n        $CA_CFG_PATH \\\n        /var/hyperledger/fabric-ca-server\n\n# Install development dependencies\nRUN apt-get update \\\n        && apt-get install --no-install-recommends -y apt-utils python-dev \\\n        && apt-get install --no-install-recommends -y libsnappy-dev zlib1g-dev libbz2-dev libyaml-dev libltdl-dev libtool \\\n        && apt-get install --no-install-recommends -y python-pip \\\n        && apt-get install --no-install-recommends -y vim tree \\\n        && pip install --no-cache-dir --upgrade pip \\\n        && pip install --no-cache-dir behave nose docker-compose \\\n        && rm -rf /var/cache/apt && rm -rf /var/lib/apt/lists/*;\n\n# Install chaintool\nRUN curl -f -L https://github.com/hyperledger/fabric-chaintool/releases/download/v0.10.1/chaintool > /usr/local/bin/chaintool \\\n        && chmod a+x /usr/local/bin/chaintool\n\n# Install gotools\nRUN go get github.com/golang/protobuf/protoc-gen-go \\\n        && go get github.com/kardianos/govendor \\\n        && go get github.com/golang/lint/golint \\\n        && go get golang.org/x/tools/cmd/goimports \\\n        && go get github.com/onsi/ginkgo/ginkgo \\\n        && go get github.com/axw/gocov/... \\\n        && go get github.com/client9/misspell/cmd/misspell \\\n        && go get github.com/AlekSi/gocov-xml\n\n# Clone the Hyperledger Fabric code and cp sample config files\nRUN cd $GOPATH/src/github.com/hyperledger \\\n        && git clone --single-branch -b master http://gerrit.hyperledger.org/r/fabric \\\n        && cd fabric && git checkout v1.0.0 \\\n        && cp $FABRIC_ROOT/devenv/limits.conf /etc/security/limits.conf \\\n        && cp -r $FABRIC_ROOT/sampleconfig/* $FABRIC_CFG_PATH/ \\\n        && cp $FABRIC_ROOT/examples/e2e_cli/configtx.yaml $FABRIC_CFG_PATH/ \\\n        && cp $FABRIC_ROOT/examples/e2e_cli/crypto-config.yaml $FABRIC_CFG_PATH/\n\n# install configtxgen, cryptogen and configtxlator\nRUN cd $FABRIC_ROOT/ \\\n        && CGO_CFLAGS=\" \" go install -tags \"nopkcs11\" -ldflags \"-X github.com/hyperledger/fabric/common/configtx/tool/configtxgen/metadata.Version=${PROJECT_VERSION}\" github.com/hyperledger/fabric/common/configtx/tool/configtxgen \\\n        && CGO_CFLAGS=\" \" go install -tags \"\" -ldflags \"-X github.com/hyperledger/fabric/common/tools/cryptogen/metadata.Version=${PROJECT_VERSION}\" github.com/hyperledger/fabric/common/tools/cryptogen \\\n        && CGO_CFLAGS=\" \" go install -tags \"\" -ldflags \"-X github.com/hyperledger/fabric/common/tools/configtxlator/metadata.Version=${PROJECT_VERSION}\" github.com/hyperledger/fabric/common/tools/configtxlator\n\n# Install block-listener\nRUN cd $FABRIC_ROOT/examples/events/block-listener \\\n        && go build \\\n        && mv block-listener $GOPATH/bin\n\n# install fabric peer\nRUN cd $FABRIC_ROOT/peer \\\n        && CGO_CFLAGS=\" \" go install -ldflags \"$LD_FLAGS -linkmode external -extldflags '-static -lpthread'\" \\\n        && go clean\n\n# install fabric orderer\nRUN cd $FABRIC_ROOT/orderer \\\n        && CGO_CFLAGS=\" \" go install -ldflags \"$LD_FLAGS -linkmode external -extldflags '-static -lpthread'\" \\\n        && go clean\n\nADD crypto-config $FABRIC_CFG_PATH/crypto-config\n\n# install fabric-ca\nRUN cd $GOPATH/src/github.com/hyperledger \\\n    && git clone --single-branch -b master https://github.com/hyperledger/fabric-ca \\\n    && cd fabric-ca && git checkout v1.0.0 \\\n    # This will install fabric-ca-server and fabric-ca-client into $GOPATH/bin/\n    && go install -ldflags \" -linkmode external -extldflags '-static -lpthread'\" github.com/hyperledger/fabric-ca/cmd/... \\\n    # Copy example ca and key files\n    && cp $FABRIC_CA_ROOT/images/fabric-ca/payload/*.pem $FABRIC_CA_HOME/ \\\n    && go clean\n\n# This is useful to debug local code with mapping inside\nVOLUME $GOPATH/src/github.com/hyperledger\n# The data and config dir, can map external one with -v\nVOLUME /var/hyperledger\nVOLUME $FABRIC_CFG_PATH\nVOLUME $FABRIC_CA_SERVER_HOME\nVOLUME $FABRIC_CA_CLIENT_HOME\n\n# Useful scripts for quickly compiling local code\nADD scripts/*.sh /tmp/\n\n# This is only a workaround for current hard-coded problem when using as fabric-baseimage.\nRUN ln -s $GOPATH /opt/gopath\n\n# temporarily fix the `go list` complain problem, which is required in chaincode packaging, see core/chaincode/platforms/golang/platform.go#GetDepoymentPayload\nENV GOROOT=/usr/local/go\n\nWORKDIR $FABRIC_ROOT\n\nLABEL org.hyperledger.fabric.version=${PROJECT_VERSION} \\\n      org.hyperledger.fabric.base.version=${BASEIMAGE_RELEASE}\n"
}