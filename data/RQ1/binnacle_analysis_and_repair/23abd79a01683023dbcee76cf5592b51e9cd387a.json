{
  "startTime": 1674239047731,
  "endTime": 1674239048498,
  "originalSmells": [
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 62,
        "lineEnd": 62,
        "columnStart": 20,
        "columnEnd": 49
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 158,
        "lineEnd": 158,
        "columnStart": 16,
        "columnEnd": 45
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 114,
        "lineEnd": 114,
        "columnStart": 22,
        "columnEnd": 86
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 133,
        "lineEnd": 133,
        "columnStart": 22,
        "columnEnd": 49
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 153,
        "lineEnd": 153,
        "columnStart": 22,
        "columnEnd": 91
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 202,
        "lineEnd": 202,
        "columnStart": 22,
        "columnEnd": 87
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 114,
        "lineEnd": 114,
        "columnStart": 22,
        "columnEnd": 86
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 133,
        "lineEnd": 133,
        "columnStart": 22,
        "columnEnd": 49
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 153,
        "lineEnd": 153,
        "columnStart": 22,
        "columnEnd": 91
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 202,
        "lineEnd": 202,
        "columnStart": 22,
        "columnEnd": 87
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# This Dockerfile can be translated to `docker/dockerfile:1-experimental` syntax for enabling cache mounts:\n# $ ./hack/translate-dockerfile-runopt-directive.sh < Dockerfile  | DOCKER_BUILDKIT=1 docker build  -f -  .\n\n### Version definitions\n# use ./hack/show-latest-commits.sh to get the latest commits\n\n# 2019-06-02T13:42:43Z\nARG ROOTLESSKIT_COMMIT=ff754baebf7e57e6af45e197c39cd223d994e74c\n# 2019-05-25T20:28:51Z\nARG SLIRP4NETNS_COMMIT=4889f5299f407d7d7566c76a3b8b5f71c99b6db5\n# 2019-05-22T23:09:38Z\nARG RUNC_COMMIT=5ef781c2e7acc776b1ebee5c25c2791b3a8dc139\n# 2019-05-29T16:39:06Z\nARG MOBY_COMMIT=8d760280a232f98d92440539e1e8a8f66c213bdb\n# 2019-05-31T14:30:59Z\nARG CONTAINERD_COMMIT=1c5b384b3062bd8f05a73b10043eaca4cae4da75\n# 2019-06-02T10:58:34Z\nARG CRIO_COMMIT=6629ffd6d1b994912aaff757b7c49ed5e4ae7d54\n# 2019-05-29T16:30:15Z\nARG CNI_PLUGINS_COMMIT=fe60fcddb897079746ec1523fd1837ab05b1e689\n# 2019-06-02T12:12:12Z\nARG KUBERNETES_COMMIT=71fe27eff5bec9bfb5351c43441aa9e5ba0d5103\n\n### Version definitions (cont.)\nARG DOCKER_CLI_RELEASE=19.03.0-beta5\n# Kube's build script requires KUBE_GIT_VERSION to be set to a semver string\nARG KUBE_GIT_VERSION=v1.15-usernetes\nARG BAZEL_RELEASE=0.25.3\n# 01/23/2017 (v.1.7.3.2)\nARG SOCAT_COMMIT=cef0e039a89fe3b38e36090d9fe4be000973e0be\nARG FLANNEL_RELEASE=v0.11.0\nARG ETCD_RELEASE=v3.3.13\nARG GOTASK_RELEASE=v2.5.2\n\nARG BASEOS=ubuntu\n\n### Common base images (common-*)\nFROM golang:1.12-alpine AS common-golang-alpine\nRUN apk add --no-cache git\n\nFROM common-golang-alpine AS common-golang-alpine-heavy\nRUN apk --no-cache add btrfs-progs-dev bash build-base linux-headers libseccomp-dev\n\n### RootlessKit (rootlesskit-build)\nFROM common-golang-alpine AS rootlesskit-build\nRUN git clone https://github.com/rootless-containers/rootlesskit.git /go/src/github.com/rootless-containers/rootlesskit\nWORKDIR /go/src/github.com/rootless-containers/rootlesskit\nARG ROOTLESSKIT_COMMIT\nRUN git pull && git checkout ${ROOTLESSKIT_COMMIT}\nENV CGO_ENABLED=0\nRUN mkdir /out && \\\n  go build -o /out/rootlesskit github.com/rootless-containers/rootlesskit/cmd/rootlesskit && \\\n  go build -o /out/rootlessctl github.com/rootless-containers/rootlesskit/cmd/rootlessctl && \\\n  go build -o /out/rootlesskit-docker-proxy github.com/rootless-containers/rootlesskit/cmd/rootlesskit-docker-proxy\n\n#### slirp4netns (slirp4netns-build)\nFROM alpine:3.9 AS slirp4netns-build\nRUN apk add --no-cache git build-base autoconf automake libtool linux-headers glib-dev glib-static\nRUN git clone https://github.com/rootless-containers/slirp4netns.git /slirp4netns\nWORKDIR /slirp4netns\nARG SLIRP4NETNS_COMMIT\nRUN git pull && git checkout ${SLIRP4NETNS_COMMIT}\nRUN ./autogen.sh && ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" LDFLAGS=\"-static\" && make && \\\n  mkdir /out && cp slirp4netns /out\n\n### runc (runc-build)\nFROM common-golang-alpine-heavy AS runc-build\nRUN git clone https://github.com/opencontainers/runc.git /go/src/github.com/opencontainers/runc\nWORKDIR /go/src/github.com/opencontainers/runc\nARG RUNC_COMMIT\nRUN git pull && git checkout ${RUNC_COMMIT}\nRUN make BUILDTAGS=\"seccomp\" static && \\\n  mkdir /out && cp runc /out\n\n### Moby (moby-build)\nFROM common-golang-alpine-heavy AS moby-base\nRUN git clone https://github.com/moby/moby.git /go/src/github.com/docker/docker\nWORKDIR /go/src/github.com/docker/docker\nARG MOBY_COMMIT\nRUN git pull && git checkout ${MOBY_COMMIT}\n\nFROM moby-base AS moby-build-docker-init\nRUN apk --no-cache add cmake\nRUN hack/dockerfile/install/install.sh tini\n\nFROM moby-base AS moby-build-docker-proxy\nRUN hack/dockerfile/install/install.sh proxy\n\nFROM moby-base AS moby-build\nRUN mkdir /out\nENV DOCKER_BUILDTAGS=\"seccomp\"\n# runopt = --mount=type=cache,id=u7s-moby-build-cache,target=/root\nRUN ./hack/make.sh .binary && cp -f bundles/.binary/dockerd-dev /out/dockerd\nCOPY --from=moby-build-docker-init /usr/local/bin/docker-init /out/\nCOPY --from=moby-build-docker-proxy /usr/local/bin/docker-proxy /out/\n\n#### Docker CLI (dockercli-build)\nARG DOCKER_CLI_RELEASE\nFROM docker:$DOCKER_CLI_RELEASE AS dockercli-build\nRUN mkdir /out && cp /usr/local/bin/docker /out\n\n### containerd (containerd-build)\nFROM common-golang-alpine-heavy AS containerd-build\nRUN git clone https://github.com/containerd/containerd.git /go/src/github.com/containerd/containerd\nWORKDIR /go/src/github.com/containerd/containerd\nARG CONTAINERD_COMMIT\nRUN git pull && git checkout ${CONTAINERD_COMMIT}\nRUN make EXTRA_FLAGS=\"-buildmode pie\" EXTRA_LDFLAGS='-extldflags \"-fno-PIC -static\"' BUILDTAGS=\"netgo osusergo static_build\" && \\\n  mkdir /out && cp bin/containerd bin/containerd-shim bin/containerd-shim-runc-v1 bin/ctr /out\n\n### CRI-O (crio-build)\n# We don't use Alpine here so as to build cri-o linked with glibc rather than musl libc.\n# TODO: use Alpine again when we figure out how to build cri-o as a static binary (rootless-containers/usernetes#19)\nFROM golang:1.12 AS crio-build\nRUN apt-get update && apt-get install --no-install-recommends -y build-essential libglib2.0-dev libseccomp-dev && rm -rf /var/lib/apt/lists/*;\nRUN git clone https://github.com/cri-o/cri-o.git /go/src/github.com/cri-o/cri-o\nWORKDIR /go/src/github.com/cri-o/cri-o\nARG CRIO_COMMIT\nRUN git pull && git checkout ${CRIO_COMMIT}\nRUN make BUILDTAGS=\"exclude_graphdriver_btrfs exclude_graphdriver_devicemapper containers_image_openpgp containers_image_ostree_stub\" binaries && \\\n  mkdir /out && cp bin/conmon bin/crio /out\n\n### CNI Plugins (cniplugins-build)\nFROM common-golang-alpine-heavy AS cniplugins-build\nRUN git clone https://github.com/containernetworking/plugins.git /go/src/github.com/containernetworking/plugins\nWORKDIR /go/src/github.com/containernetworking/plugins\nARG CNI_PLUGINS_COMMIT\nRUN git pull && git checkout ${CNI_PLUGINS_COMMIT}\nRUN ./build_linux.sh -buildmode pie -ldflags \"-extldflags \\\"-fno-PIC -static\\\"\" && \\\n  mkdir /out && mv bin /out/cni\n\n### Kubernetes (k8s-build)\nFROM golang:1.12 AS k8s-build\nRUN apt-get update && apt-get install --no-install-recommends -y -q patch && rm -rf /var/lib/apt/lists/*;\nARG BAZEL_RELEASE\nADD https://github.com/bazelbuild/bazel/releases/download/${BAZEL_RELEASE}/bazel-${BAZEL_RELEASE}-linux-x86_64 /usr/local/bin/bazel\nRUN chmod +x /usr/local/bin/bazel\nRUN git clone https://github.com/kubernetes/kubernetes.git /kubernetes\nWORKDIR /kubernetes\nARG KUBERNETES_COMMIT\nRUN git pull && git checkout ${KUBERNETES_COMMIT}\nCOPY ./src/patches/kubernetes /patches\n# `git am` requires user info to be set\nRUN git config user.email \"nobody@example.com\" && \\\n  git config user.name \"Usernetes Build Script\" && \\\n  git am /patches/* && git show --summary\nARG KUBE_GIT_VERSION\nENV KUBE_GIT_VERSION=${KUBE_GIT_VERSION}\n# runopt = --mount=type=cache,id=u7s-k8s-build-cache,target=/root\nRUN bazel build cmd/hyperkube && mkdir /out && cp bazel-bin/cmd/hyperkube/hyperkube /out\n\n### socat (socat-build)\nFROM ubuntu:19.04 AS socat-build\nRUN apt-get update && apt-get install --no-install-recommends -y autoconf automake libtool build-essential git yodl && rm -rf /var/lib/apt/lists/*;\nRUN git clone git://repo.or.cz/socat.git /socat\nWORKDIR /socat\nARG SOCAT_COMMIT\nRUN git pull && git checkout ${SOCAT_COMMIT}\nRUN autoconf && ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" LDFLAGS=\"-static\" && make && strip socat && \\\n  mkdir -p /out && cp -f socat /out\n\n#### flannel (flannel-build)\nFROM busybox AS flannel-build\nARG FLANNEL_RELEASE\nRUN mkdir -p /out && \\\n  wget -O /out/flanneld https://github.com/coreos/flannel/releases/download/${FLANNEL_RELEASE}/flanneld-amd64 && \\\n  chmod +x /out/flanneld\n\n#### etcd (etcd-build)\nFROM busybox AS etcd-build\nARG ETCD_RELEASE\nRUN mkdir /tmp-etcd out && \\\n  wget -O - https://github.com/etcd-io/etcd/releases/download/${ETCD_RELEASE}/etcd-${ETCD_RELEASE}-linux-amd64.tar.gz | tar xz -C /tmp-etcd && \\\n  cp /tmp-etcd/etcd-${ETCD_RELEASE}-linux-amd64/etcd /tmp-etcd/etcd-${ETCD_RELEASE}-linux-amd64/etcdctl /out\n\n#### go-task (gotask-build)\nFROM busybox AS gotask-build\nARG GOTASK_RELEASE\nRUN mkdir /tmp-task /out && \\\n  wget -O - https://github.com/go-task/task/releases/download/${GOTASK_RELEASE}/task_linux_amd64.tar.gz | tar xz  -C /tmp-task && \\\n  cp /tmp-task/task /out\n\n### Binaries (bin-main)\nFROM scratch AS bin-main\nCOPY --from=rootlesskit-build /out/* /\nCOPY --from=slirp4netns-build /out/* /\nCOPY --from=runc-build /out/* /\nCOPY --from=moby-build /out/* /\nCOPY --from=dockercli-build /out/* /\nCOPY --from=containerd-build /out/* /\nCOPY --from=crio-build /out/* /\n# can't use wildcard here: https://github.com/rootless-containers/usernetes/issues/78\nCOPY --from=cniplugins-build /out/cni /cni\nCOPY --from=k8s-build /out/* /\nCOPY --from=socat-build /out/* /\nCOPY --from=flannel-build /out/* /\nCOPY --from=etcd-build /out/* /\nCOPY --from=gotask-build /out/* /\n\n#### Test (test-main)\nFROM ubuntu:19.04 AS test-main-ubuntu\n# libglib2.0: require by conmon\nRUN apt-get update && apt-get install --no-install-recommends -y -q git libglib2.0-dev iproute2 iptables uidmap && rm -rf /var/lib/apt/lists/*;\n\n# fedora image is experimental\nFROM fedora:30 AS test-main-fedora\n# As of Jan 2019, fedora:29 has wrong permission bits on newuidmap newgidmap\nRUN chmod +s /usr/bin/newuidmap /usr/bin/newgidmap\nRUN dnf install -y git iproute iptables hostname procps-ng\n\nFROM test-main-$BASEOS AS test-main\nRUN useradd --create-home --home-dir /home/user --uid 1000 user\nCOPY . /home/user/usernetes\nCOPY --from=bin-main / /home/user/usernetes/bin\nRUN mkdir -p /run/user/1000 /home/user/.local && \\\n  chown -R user:user /run/user/1000 /home/user\nUSER user\nENV HOME /home/user\nENV USER user\nENV XDG_RUNTIME_DIR=/run/user/1000\nWORKDIR /home/user/usernetes\nVOLUME /home/user/.local\nENTRYPOINT [\"/home/user/usernetes/run.sh\"]\n"
}