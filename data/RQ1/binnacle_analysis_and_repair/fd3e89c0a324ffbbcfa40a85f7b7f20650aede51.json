{
  "startTime": 1674250683592,
  "endTime": 1674250683769,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 19,
        "lineEnd": 19,
        "columnStart": 4,
        "columnEnd": 83
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 26,
        "lineEnd": 26,
        "columnStart": 4,
        "columnEnd": 99
      }
    },
    {
      "rule": "curlUseHttpsUrl",
      "position": {
        "lineStart": 19,
        "lineEnd": 19,
        "columnStart": 4,
        "columnEnd": 83
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 47,
        "lineEnd": 47,
        "columnStart": 4,
        "columnEnd": 46
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 53,
        "lineEnd": 55,
        "columnStart": 4,
        "columnEnd": 22
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 21,
        "lineEnd": 21,
        "columnStart": 4,
        "columnEnd": 15
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM nvidia/cuda:8.0-cudnn6-devel\n\nRUN apt-get update && apt-get install -y --no-install-recommends \\\n        build-essential \\\n        cmake \\\n        git \\\n        curl \\\n        vim \\\n        wget \\\n        make \\\n        g++ \\\n        unzip \\\n        ca-certificates \\\n        libsm6 \\\n        libxext6 \\\n        libxrender-dev &&\\\n    rm -rf /var/lib/apt/lists/*\n\n# Install libspatialindex\nRUN curl -f -L https://download.osgeo.org/libspatialindex/spatialindex-src-1.8.5.tar.gz | tar xz && \\\n    cd spatialindex-src-1.8.5 && \\\n    ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" && make && make install && ldconfig && \\\n    cd .. && rm -r spatialindex-src-1.8.5\n\n# Setup conda environment\nENV PYTHON_VERSION=3.6\nRUN curl -f -o ~/miniconda.sh -O https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh && \\\n    chmod +x ~/miniconda.sh && ~/miniconda.sh -b -p /opt/conda && rm ~/miniconda.sh && \\\n    /opt/conda/bin/conda create -y --name py$PYTHON_VERSION \\\n        python=$PYTHON_VERSION \\\n        numpy \\\n        pyyaml \\\n        scipy \\\n        ipython \\\n        mkl \\\n        matplotlib \\\n        scikit-learn \\\n        scikit-image \\\n        Pillow \\\n        jupyter \\\n        gdal && \\\n    /opt/conda/bin/conda clean -ya\n\n# Activate conda environment\nENV PATH /opt/conda/envs/py$PYTHON_VERSION/bin:$PATH\n\n# Install chainer under conda environment\nRUN pip install --no-cache-dir cupy==4.0.0b3 chainer==4.0.0b3\n\n# Clone chainer repository\nRUN git clone https://github.com/chainer/chainer.git /opt/chainer\n\n# Install some additional packages ..\nRUN pip install --no-cache-dir tensorflow tensorboard tensorboardX \\\n    geopandas==0.3.0 Rtree==0.8.3 centerline==0.3 osmnx==0.6 \\\n    opencv-python tqdm\n\n# Setup jupyter\nRUN jupyter notebook --generate-config && \\\n    ipython profile create\n\nRUN echo \"c.NotebookApp.ip = '0.0.0.0'\" >> /root/.jupyter/jupyter_notebook_config.py && \\\n    echo \"c.NotebookApp.open_browser = False\" >> /root/.jupyter/jupyter_notebook_config.py && \\\n    echo \"c.InteractiveShellApp.matplotlib = 'inline'\" >> /root/.ipython/profile_default/ipython_config.py && \\\n    HASH=$(python3 -c \"from IPython.lib import passwd; print(passwd('passw0rd'))\") && \\\n    echo \"c.NotebookApp.password = u'${HASH}'\" >> /root/.jupyter/jupyter_notebook_config.py && \\\n    echo \"c.NotebookApp.allow_root = True\" >> /root/.jupyter/jupyter_notebook_config.py\n\n# Specify matplotlib backend\nWORKDIR /root/.config/matplotlib\nRUN echo \"backend : Agg\" >> matplotlibrc\n\nWORKDIR /workspace"
}