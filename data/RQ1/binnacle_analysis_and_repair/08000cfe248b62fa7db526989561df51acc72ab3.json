{
  "startTime": 1674244760037,
  "endTime": 1674244760756,
  "originalSmells": [
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 129,
        "lineEnd": 129,
        "columnStart": 4,
        "columnEnd": 69
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 5,
        "lineEnd": 11,
        "columnStart": 4,
        "columnEnd": 37
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM nvidia/cuda:8.0-cudnn5-devel-ubuntu16.04\nMAINTAINER Deepak Roy Chittajallu <deepk.chittajallu@kitware.com>\n\n# Install system pre-requisites\nRUN apt-get update && \\\n    apt-get install --no-install-recommends -y \\\n    build-essential wget git \\\n    make cmake cmake-curses-gui ninja-build \\\n    libxt-dev libgl1-mesa-dev libcupti-dev \\\n    libboost-all-dev libfftw3-dev liblapack-dev liblapacke-dev libopenblas-dev \\\n    libfontconfig1-dev libfreeimage-dev xorg-dev \\\n    ocl-icd-opencl-dev opencl-headers && \\\n    apt-get autoremove && \\\n    rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/* && \\\n    echo \"50.58.123.189 data.kitware.com\" >> /etc/hosts && \\\n    echo \"50.58.123.181 midas3.kitware.com\" >> /etc/hosts\n\n# Setting up symlinks for libcuda and OpenCL ICD\nRUN ln -s /usr/local/cuda/lib64/stubs/libcuda.so /usr/lib/libcuda.so.1 && \\\n    ln -s /usr/lib/libcuda.so.1 /usr/lib/libcuda.so && \\\n    mkdir -p /etc/OpenCL/vendors && \\\n    echo \"libnvidia-opencl.so.1\" > /etc/OpenCL/vendors/nvidia.icd && \\\n    echo \"/usr/local/nvidia/lib\" >> /etc/ld.so.conf.d/nvidia.conf && \\\n    echo \"/usr/local/nvidia/lib64\" >> /etc/ld.so.conf.d/nvidia.conf && \\\n    ldconfig\nENV PATH=/usr/local/nvidia/bin:/usr/local/cuda/bin:${PATH}\n\n# Libraries build path\nENV BUILD_PATH /build\n\n# Install miniconda\nRUN mkdir -p $BUILD_PATH && \\\n    wget https://repo.continuum.io/miniconda/Miniconda-latest-Linux-x86_64.sh \\\n    -O $BUILD_PATH/install_miniconda.sh && \\\n    bash $BUILD_PATH/install_miniconda.sh -b -p $BUILD_PATH/miniconda && \\\n    rm $BUILD_PATH/install_miniconda.sh && \\\n    chmod -R +r $BUILD_PATH && \\\n    chmod +x $BUILD_PATH/miniconda/bin/python\nENV PATH $BUILD_PATH/miniconda/bin:${PATH}\n\n# Install CMake\nENV CMAKE_ARCHIVE_SHA256 10ca0e25b7159a03da0c1ec627e686562dc2a40aad5985fd2088eb684b08e491\nENV CMAKE_VERSION_MAJOR 3\nENV CMAKE_VERSION_MINOR 8\nENV CMAKE_VERSION_PATCH 1\nENV CMAKE_VERSION ${CMAKE_VERSION_MAJOR}.${CMAKE_VERSION_MINOR}.${CMAKE_VERSION_PATCH}\nRUN cd $BUILD_PATH && \\\n  wget https://cmake.org/files/v${CMAKE_VERSION_MAJOR}.${CMAKE_VERSION_MINOR}/cmake-${CMAKE_VERSION}-Linux-x86_64.tar.gz && \\\n  hash=$(sha256sum ./cmake-${CMAKE_VERSION}-Linux-x86_64.tar.gz | awk '{ print $1 }') && \\\n  [ $hash = \"${CMAKE_ARCHIVE_SHA256}\" ] && \\\n  tar -xzvf cmake-${CMAKE_VERSION}-Linux-x86_64.tar.gz && \\\n  rm cmake-${CMAKE_VERSION}-Linux-x86_64.tar.gz\nENV PATH $BUILD_PATH/cmake-${CMAKE_VERSION}-Linux-x86_64/bin:${PATH}\n\n# Disable \"You are in 'detached HEAD' state.\" warning\nRUN git config --global advice.detachedHead false\n\n# Download/configure/build/install ITK\nENV ITK_GIT_TAG v4.11.1\nENV ITK_BUILD_DIR $BUILD_PATH/ITK-build\nRUN cd $BUILD_PATH && \\\n    git clone --depth 1 -b ${ITK_GIT_TAG} https://github.com/InsightSoftwareConsortium/ITK.git && \\\n    mkdir ITK-build && \\\n    cd ITK-build && \\\n    cmake \\\n        -G Ninja \\\n        -DCMAKE_BUILD_TYPE:STRING=Release \\\n        -DBUILD_SHARED_LIBS:BOOL=ON \\\n        -DBUILD_EXAMPLES:BOOL=OFF \\\n        -DBUILD_TESTING:BOOL=OFF \\\n        -DITKV3_COMPATIBILITY:BOOL=ON \\\n        -DITK_BUILD_DEFAULT_MODULES:BOOL=ON \\\n        -DITK_INSTALL_NO_DEVELOPMENT:BOOL=ON \\\n        -DITK_LEGACY_REMOVE:BOOL=OFF \\\n        -DITK_LEGACY_SILENT:BOOL=ON \\\n        -DITK_WRAP_PYTHON:BOOL=ON \\\n        -DModule_MinimalPathExtraction:BOOL=ON \\\n        -DKWSYS_USE_MD5:BOOL=ON \\\n        -DModule_ITKReview:BOOL=ON \\\n        ../ITK && \\\n    ninja && \\\n    cp Wrapping/Generators/Python/WrapITK.pth $BUILD_PATH/miniconda/lib/python2.7/site-packages && \\\n    python -c \"import itk\" && \\\n    find . -name '*.o' -delete && \\\n    find ../ITK* -depth -name .git -exec rm -rf '{}' \\;\n\n# Download/configure/build/install VTK\nENV VTK_GIT_TAG v7.1.1\nENV VTK_BUILD_DIR $BUILD_PATH/VTK-build\nRUN cd $BUILD_PATH && \\\n    git clone --depth 1 -b ${VTK_GIT_TAG} https://github.com/Kitware/VTK.git && \\\n    mkdir VTK-build && \\\n    cd VTK-build && \\\n    cmake \\\n        -G Ninja \\\n        -DCMAKE_BUILD_TYPE:STRING=Release \\\n        -DBUILD_SHARED_LIBS:BOOL=ON \\\n        -DBUILD_EXAMPLES:BOOL=OFF \\\n        -DBUILD_TESTING:BOOL=OFF \\\n        -DVTK_LEGACY_REMOVE:BOOL=ON \\\n        -DVTK_WRAP_PYTHON:BOOL=ON \\\n        ../VTK && \\\n    ninja && \\\n    echo \"${VTK_BUILD_DIR}/lib\" > $BUILD_PATH/miniconda/lib/python2.7/site-packages/WrapVTK.pth && \\\n    echo \"${VTK_BUILD_DIR}/Wrapping/Python\" >> $BUILD_PATH/miniconda/lib/python2.7/site-packages/WrapVTK.pth && \\\n    python -c \"import vtk\" && \\\n    find . -name '*.o' -delete && \\\n    find ../VTK* -depth -name .git -exec rm -rf '{}' \\;\n\n# Download/configure/build/install SlicerExecutionModel\nENV SEM_GIT_TAG master\nENV SEM_BUILD_DIR $BUILD_PATH/SEM-build\nRUN cd $BUILD_PATH && \\\n    git clone --depth 1 -b ${SEM_GIT_TAG} https://github.com/Slicer/SlicerExecutionModel.git SEM && \\\n    mkdir SEM-build && cd SEM-build && \\\n    cmake \\\n        -G Ninja \\\n        -DCMAKE_BUILD_TYPE:STRING=Release \\\n        -DBUILD_SHARED_LIBS:BOOL=ON \\\n        -DBUILD_TESTING:BOOL=OFF \\\n        -DITK_DIR:PATH=$BUILD_PATH/ITK-build \\\n        ../SEM && \\\n    ninja && \\\n    find . -name '*.o' -delete && \\\n    find ../SEM* -depth -name .git -exec rm -rf '{}' \\;\n\n# Download and install slicer_cli_web\nENV SLICER_CLI_WEB_GIT_TAG master\nRUN cd $BUILD_PATH && \\\n    pip install --no-cache-dir --upgrade 'git+https://github.com/cdeepakroy/ctk-cli' && \\\n    git clone --depth 1 -b ${SLICER_CLI_WEB_GIT_TAG} https://github.com/girder/slicer_cli_web.git && \\\n    cd slicer_cli_web && \\\n    find . -depth -name .git -exec rm -rf '{}' \\;\n\n# Download/configure/build/install GLFW\nENV GLFW_GIT_TAG 3.2.1\nRUN cd $BUILD_PATH && \\\n    git clone --depth 1 -b ${GLFW_GIT_TAG} https://github.com/glfw/glfw.git && \\\n    mkdir glfw-build && cd glfw-build && \\\n    cmake \\\n          -G Ninja \\\n          -DCMAKE_INSTALL_PREFIX=/usr \\\n          ../glfw && \\\n    ninja install && \\\n    cd .. && rm -rf glfw*\n\n# Download/configure/build/install arrayfire\nENV AF_GIT_TAG devel\nENV AF_PATH=/usr/local/arrayfire AF_DISABLE_GRAPHICS=1\nRUN cd $BUILD_PATH && \\\n    git clone --recursive --depth 1 -b ${AF_GIT_TAG} https://github.com/arrayfire/arrayfire.git && \\\n    mkdir arrayfire-build && cd arrayfire-build && \\\n    cmake \\\n          -DCMAKE_BUILD_TYPE=Release \\\n          -DBUILD_CPU=ON \\\n          -DBUILD_CUDA=ON \\\n          -DBUILD_OPENCL=OFF \\\n          -DBUILD_UNIFIED=ON \\\n          -DBUILD_GRAPHICS=OFF \\\n          -DBUILD_NONFREE=OFF \\\n          -DBUILD_EXAMPLES=OFF \\\n          -DBUILD_TEST=OFF \\\n          -DBUILD_DOCS=OFF \\\n          -DUSE_FREEIMAGE_STATIC=OFF \\\n          ../arrayfire && \\\n    make && make install && \\\n    echo \"${AF_PATH}/lib\" >> /etc/ld.so.conf.d/arrayfire.conf && \\\n    echo \"/usr/local/cuda/nvvm/lib64\" >> /etc/ld.so.conf.d/arrayfire.conf && \\\n    ldconfig && \\\n    cd $BUILD_PATH && rm -rf arrayfire*\n"
}