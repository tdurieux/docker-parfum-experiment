{
  "startTime": 1674239797161,
  "endTime": 1674239797257,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 11,
        "lineEnd": 11,
        "columnStart": 4,
        "columnEnd": 102
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 18,
        "lineEnd": 19,
        "columnStart": 4,
        "columnEnd": 30
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 17,
        "lineEnd": 17,
        "columnStart": 4,
        "columnEnd": 50
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 7,
        "lineEnd": 7,
        "columnStart": 7,
        "columnEnd": 103
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "ARG VERSION=franela/docker:18.09.2-ee-dind\n#ARG VERSION=franela/docker:17.06.2-dind-ubuntu\n#ARG VERSION=franela/docker:18.01-dind-ubuntu\n\nFROM ${VERSION}\n\nRUN apt-get update \\\n    && apt-get install --no-install-recommends -y git tmux python-pip apache2-utils vim curl jq bash-completion screen tree zip \\\n    && rm -rf /var/lib/apt/lists/*\n\n# Add kubectl client\nRUN curl -f -LO https://storage.googleapis.com/kubernetes-release/release/v1.11.7/bin/linux/amd64/kubectl \\\n    && chmod +x ./kubectl \\\n    && mv ./kubectl /usr/local/bin/kubectl\n\nENV COMPOSE_VERSION=1.22.0\n\nRUN pip install --no-cache-dir docker-compose==${COMPOSE_VERSION}\nRUN curl -f -L https://github.com/docker/machine/releases/download/${MACHINE_VERSION}/docker-machine-Linux-x86_64 \\\n    -o /usr/bin/docker-machine && chmod +x /usr/bin/docker-machine\n\n\n# Install a nice vimrc file and prompt (by soulshake)\nCOPY [\"docker-prompt\", \"sudo\", \"ucp-beta.sh\", \"/usr/local/bin/\"]\nCOPY [\".vimrc\",\".profile\", \".inputrc\", \".gitconfig\", \"workshop_beta.lic\", \"ucp-config.toml\", \"./root/\"]\nCOPY [\"motd\", \"/etc/motd\"]\nCOPY [\"ee/daemon.json\", \"/etc/docker/\"]\nCOPY [\"ee/cert.pem\", \"ee/key.pem\", \"/opt/pwd/certs/\"]\nCOPY [\"ee/ucp-key.pem\", \"./root/key.pem\"]\nCOPY [\"ee/ucp-cert.pem\", \"./root/cert.pem\"]\n\n# Move to our home\nWORKDIR /root\n\n# Setup certs and uploads folders\nRUN mkdir -p /opt/pwd/certs /opt/pwd/uploads\n\nVOLUME [\"/var/lib/kubelet\"]\n\n# Remove IPv6 alias for localhost and start docker in the background ...\nCMD cat /etc/hosts >/etc/hosts.bak && \\\n    sed 's/^::1.*//' /etc/hosts.bak > /etc/hosts && \\\n    sed -i \"s/\\PWD_IP_ADDRESS/$PWD_IP_ADDRESS/\" /etc/docker/daemon.json && \\\n    sed -i \"s/\\DOCKER_TLSENABLE/$DOCKER_TLSENABLE/\" /etc/docker/daemon.json && \\\n    sed -i \"s/\\DOCKER_TLSCACERT/$DOCKER_TLSCACERT/\" /etc/docker/daemon.json && \\\n    sed -i \"s/\\DOCKER_TLSCERT/$DOCKER_TLSCERT/\" /etc/docker/daemon.json && \\\n    sed -i \"s/\\DOCKER_TLSKEY/$DOCKER_TLSKEY/\" /etc/docker/daemon.json && \\\n    mount -t securityfs none /sys/kernel/security && \\\n    mount --make-rshared / && \\\n    #mount --make-rshared -t tmpfs tmpfs /run && \\\n    #mount --make-rshared /var/lib/kubelet && \\\n    #mount --make-rshared /var/lib/docker && \\\n    dockerd > /docker.log 2>&1 & \\\n    while true ; do script -q -c \"/bin/bash -l\" /dev/null ; done\n# ... and then put a shell in the foreground, restarting it if it exits\n"
}