{
  "startTime": 1674238931409,
  "endTime": 1674238931752,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 42,
        "lineEnd": 42,
        "columnStart": 4,
        "columnEnd": 64
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 43,
        "lineEnd": 43,
        "columnStart": 4,
        "columnEnd": 39
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 7,
        "lineEnd": 7,
        "columnStart": 4,
        "columnEnd": 79
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 13,
        "lineEnd": 38,
        "columnStart": 22,
        "columnEnd": 14
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 104,
        "lineEnd": 104,
        "columnStart": 25,
        "columnEnd": 55
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 7,
        "lineEnd": 7,
        "columnStart": 4,
        "columnEnd": 79
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 13,
        "lineEnd": 38,
        "columnStart": 22,
        "columnEnd": 14
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 104,
        "lineEnd": 104,
        "columnStart": 25,
        "columnEnd": 55
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# -----------------------------------------------------------------------------\n# Development image for test, precommit, etc.\n# -----------------------------------------------------------------------------\nFROM ubuntu:xenial as base\n\n# Add the magma apt repo\nRUN apt-get update && \\\n    apt-get install --no-install-recommends -y apt-utils software-properties-common apt-transport-https && rm -rf /var/lib/apt/lists/*;\nCOPY orc8r/tools/ansible/roles/pkgrepo/files/jfrog.pub /tmp/jfrog.pub\nRUN apt-key add /tmp/jfrog.pub && \\\n    apt-add-repository \"deb https://magma.jfrog.io/magma/list/dev/ xenial main\"\n\n# Install the runtime deps.\nRUN apt-get update && apt-get install --no-install-recommends -y \\\n    bzr \\\n    curl \\\n    daemontools \\\n    gcc \\\n    git \\\n    libc-ares-dev \\\n    libev-dev \\\n    libevent-dev \\\n    libffi-dev \\\n    libjansson-dev \\\n    libjemalloc-dev \\\n    libssl-dev \\\n    libsystemd-dev \\\n    magma-nghttpx=1.31.1-1 \\\n    make \\\n    net-tools \\\n    pkg-config \\\n    python-cffi \\\n    python3-pip \\\n    redis-server \\\n    rsyslog \\\n    sudo \\\n    unzip \\\n    vim \\\n    virtualenv && rm -rf /var/lib/apt/lists/*;\n\n# Install Golang 1.12.\nWORKDIR /usr/local\nRUN curl -f https://dl.google.com/go/go1.12.4.linux-amd64.tar.gz -O && \\\n    tar xvf go1.12.4.linux-amd64.tar.gz && \\\n    cp -r go/bin/* /usr/local/bin/ && rm go1.12.4.linux-amd64.tar.gz\n\n# Install protobuf compiler.\nRUN curl -Lfs https://github.com/google/protobuf/releases/download/v3.1.0/protoc-3.1.0-linux-x86_64.zip -o protoc3.zip && \\\n    unzip protoc3.zip -d protoc3 && \\\n    mv protoc3/bin/protoc /bin/protoc && \\\n    chmod a+rx /bin/protoc && \\\n    mv protoc3/include/google /usr/include/ && \\\n    chmod -R a+Xr /usr/include/google && \\\n    rm -rf protoc3.zip protoc3\n\nENV GOBIN /var/opt/magma/bin\nENV MAGMA_ROOT /magma\nENV PIP_CACHE_HOME ~/.pipcache\nENV PYTHON_BUILD /build/python\nENV PATH ${PYTHON_BUILD}/bin:${PATH}:${GOBIN}\nENV GO111MODULE on\n# Use public go modules proxy\nENV GOPROXY https://proxy.golang.org\n\nRUN printenv > /etc/environment\n\n\n# Copy just the go.mod and go.sum files to download the golang deps.\n# This step allows us to cache the downloads, and prevents reaching out to\n# the internet unless any of the go.mod or go.sum files are changed.\nCOPY lte/cloud/go/go.* $MAGMA_ROOT/lte/cloud/go/\nCOPY feg/cloud/go/go.* $MAGMA_ROOT/feg/cloud/go/\nCOPY feg/cloud/go/protos/go.* $MAGMA_ROOT/feg/cloud/go/protos/\nCOPY feg/gateway/go.* $MAGMA_ROOT/feg/gateway/\nCOPY feg/gateway/third-party/go/src/github.com/fiorix/go-diameter/go.* $MAGMA_ROOT/feg/gateway/third-party/go/src/github.com/fiorix/go-diameter/\nCOPY orc8r/cloud/go/go.* $MAGMA_ROOT/orc8r/cloud/go/\nCOPY orc8r/gateway/go/go.* $MAGMA_ROOT/orc8r/gateway/go/\nWORKDIR $MAGMA_ROOT/feg/gateway\nRUN go mod download; exit 0\n# Install protoc-gen-go\nRUN go install github.com/golang/protobuf/protoc-gen-go; exit 0\n\n# Copy the configs.\nCOPY orc8r/cloud/docker/proxy/magma_headers.rb /etc/nghttpx/magma_headers.rb\n\n# Symlink python scripts.\nRUN ln -s /build/python/bin/generate_service_config.py /usr/local/bin/generate_service_config.py\nRUN ln -s /build/python/bin/generate_nghttpx_config.py /usr/local/bin/generate_nghttpx_config.py\n\n# Build the code.\nCOPY feg $MAGMA_ROOT/feg\nCOPY lte/cloud $MAGMA_ROOT/lte/cloud\nCOPY orc8r/cloud $MAGMA_ROOT/orc8r/cloud\nCOPY orc8r/gateway/go $MAGMA_ROOT/orc8r/gateway/go\n# Enable make gen if proto gen is required\n# RUN make -C $MAGMA_ROOT/feg/gateway gen\nRUN make -C $MAGMA_ROOT/feg/gateway build\n\n# -----------------------------------------------------------------------------\n# Production image\n# -----------------------------------------------------------------------------\nFROM ubuntu:xenial AS gateway_go\n\n# Install envdir.\nRUN apt-get -y update && apt-get -y --no-install-recommends install daemontools && rm -rf /var/lib/apt/lists/*;\n\n# Copy the build artifacts.\nCOPY --from=base /var/opt/magma/bin /var/opt/magma/bin\n\n# Copy the configs.\nCOPY feg/gateway/configs /etc/magma\n# Add docker config overrides\nCOPY feg/gateway/docker/configs /etc/magma\n\n# Create empty envdir directory\nRUN mkdir -p /var/opt/magma/envdir\n\nRUN mkdir -p /var/opt/magma/configs\n"
}