{
  "startTime": 1674241593137,
  "endTime": 1674241593762,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 40,
        "lineEnd": 40,
        "columnStart": 4,
        "columnEnd": 145
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 48,
        "lineEnd": 48,
        "columnStart": 4,
        "columnEnd": 113
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 109,
        "lineEnd": 109,
        "columnStart": 4,
        "columnEnd": 45
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 118,
        "lineEnd": 118,
        "columnStart": 4,
        "columnEnd": 107
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 148,
        "lineEnd": 148,
        "columnStart": 4,
        "columnEnd": 99
      }
    },
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 139,
        "lineEnd": 139,
        "columnStart": 4,
        "columnEnd": 35
      }
    },
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 140,
        "lineEnd": 140,
        "columnStart": 4,
        "columnEnd": 23
      }
    },
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 141,
        "lineEnd": 141,
        "columnStart": 4,
        "columnEnd": 23
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 57,
        "lineEnd": 57,
        "columnStart": 4,
        "columnEnd": 28
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 130,
        "lineEnd": 130,
        "columnStart": 4,
        "columnEnd": 15
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 21,
        "lineEnd": 33,
        "columnStart": 4,
        "columnEnd": 13
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 56,
        "lineEnd": 56,
        "columnStart": 4,
        "columnEnd": 48
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 90,
        "lineEnd": 90,
        "columnStart": 4,
        "columnEnd": 78
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 56,
        "lineEnd": 56,
        "columnStart": 4,
        "columnEnd": 48
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 21,
        "lineEnd": 33,
        "columnStart": 4,
        "columnEnd": 13
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 56,
        "lineEnd": 56,
        "columnStart": 4,
        "columnEnd": 48
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 90,
        "lineEnd": 90,
        "columnStart": 4,
        "columnEnd": 78
      }
    }
  ],
  "repairedSmells": [
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 56,
        "lineEnd": 56,
        "columnStart": 4,
        "columnEnd": 72
      }
    }
  ],
  "repairedDockerfile": "FROM openjdk:8u171-jdk-slim\n\nENV DEBIAN_FRONTEND=noninteractive \\\n    LANG=C.UTF-8 \\\n    NODE_VERSION=\"7.10.0\" \\\n    ANDROID_HOME=\"/home/user/android-sdk-linux\" \\\n    SDK_URL=\"https://dl.google.com/android/repository/sdk-tools-linux-3859397.zip\" \\\n    PATH=\"${ANDROID_HOME}/tools:${ANDROID_HOME}/platform-tools:/home/user/opt/node/bin:${PATH}\"\n\nARG CI_HELPER_VERSION\nARG MODD_VERSION\n\n# ——————————\n# Install base software packages\n# ——————————\nRUN echo \"Starting ...\" && \\\n    echo \"Updating packages using sources :\" && \\\n    cat /etc/apt/sources.list && \\\n    apt-get -qq clean && apt-get -qq update && \\\n\n    echo \"Install base\" && \\\n    apt-get -qq --no-install-recommends -y install \\\n        build-essential \\\n        curl \\\n        git \\\n        subversion \\\n        make \\\n        mercurial \\\n        openssh-client \\\n        software-properties-common \\\n        automake \\\n        python-dev \\\n        python-setuptools \\\n        unzip && \\\n    echo \"Done Install base!\" && rm -rf /var/lib/apt/lists/*;\n\n# ——————————\n# Install CI Helper\n# ——————————\nRUN echo \"Install CI Helper\" && \\\n    curl -f -sSL https://github.com/rande/gitlab-ci-helper/releases/download/${CI_HELPER_VERSION}/linux-amd64-gitlab-ci-helper -o /usr/bin/ci-helper && \\\n    chmod 755 /usr/bin/ci-helper && \\\n    echo \"Done Install CI Helper\"\n\n# ——————————\n# Install Modd\n# ——————————\nRUN echo \"Install Modd\" && \\\n    curl -f -sSL https://github.com/cortesi/modd/releases/download/v${MODD_VERSION}/modd-${MODD_VERSION}-linux64.tgz | tar -xOvzf - modd-${MODD_VERSION}-linux64/modd > /usr/bin/modd && \\\n    chmod 755 /usr/bin/modd && \\\n    echo \"Done Install Modd\"\n\n# ——————————\n# Install AWS\n# ——————————\nRUN echo \"Install AWS\" && \\\n    apt-get -qq --no-install-recommends -y install python-pip groff-base && \\\n    pip install --no-cache-dir -q -U awscli && \\\n    echo \"Done Install AWS!\" && rm -rf /var/lib/apt/lists/*;\n\n# ——————————\n# Setup Java 8\n# ——————————\nRUN echo \"Removing unnecessary JDK 8 binaries and libraries ...\" && \\\n    rm -rf /usr/lib/jvm/java-8-openjdk-amd64/*src.zip \\\n           /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/javaws \\\n           /usr/lib/jvm/java-8-openjdk-amd64/jre/lib/*javafx* \\\n           /usr/lib/jvm/java-8-openjdk-amd64/jre/lib/*jfx* \\\n           /usr/lib/jvm/java-8-openjdk-amd64/jre/lib/amd64/libdecora_sse.so \\\n           /usr/lib/jvm/java-8-openjdk-amd64/jre/lib/amd64/libfxplugins.so \\\n           /usr/lib/jvm/java-8-openjdk-amd64/jre/lib/amd64/libglass.so \\\n           /usr/lib/jvm/java-8-openjdk-amd64/jre/lib/amd64/libgstreamer-lite.so \\\n           /usr/lib/jvm/java-8-openjdk-amd64/jre/lib/amd64/libjavafx*.so \\\n           /usr/lib/jvm/java-8-openjdk-amd64/jre/lib/amd64/libjfx*.so \\\n           /usr/lib/jvm/java-8-openjdk-amd64/jre/lib/amd64/libprism_*.so \\\n           /usr/lib/jvm/java-8-openjdk-amd64/jre/lib/deploy* \\\n           /usr/lib/jvm/java-8-openjdk-amd64/jre/lib/desktop \\\n           /usr/lib/jvm/java-8-openjdk-amd64/jre/lib/ext/jfxrt.jar \\\n           /usr/lib/jvm/java-8-openjdk-amd64/jre/lib/javaws.jar \\\n           /usr/lib/jvm/java-8-openjdk-amd64/jre/lib/plugin.jar \\\n           /usr/lib/jvm/java-8-openjdk-amd64/jre/plugin \\\n           /usr/lib/jvm/java-8-openjdk-amd64/lib/*javafx* && \\\n\n    export PATH=$PATH:/docker-java-home\n\n# ——————————\n# Installs i386 architecture required for running 32 bit Android tools\n# —————————\nRUN dpkg --add-architecture i386 && \\\n    apt-get -qq -y update && \\\n    apt-get -qq --no-install-recommends -y install libc6:i386 libncurses5:i386 libstdc++6:i386 lib32z1 && rm -rf /var/lib/apt/lists/*;\n\n# ——————————\n# Update certificates\n# ——————————\nRUN update-ca-certificates --fresh\n\n# ——————————\n# Create a non-root user\n# ——————————\nRUN useradd -m user\nUSER user\nWORKDIR /home/user\n\n# ——————————\n# Download Android SDK\n# ——————————\nRUN mkdir \"$ANDROID_HOME\" .android && \\\n    cd \"$ANDROID_HOME\" && \\\n    curl -f -sSL -o sdk.zip $SDK_URL > /dev/null && \\\n    unzip -qq sdk.zip && \\\n    rm sdk.zip && \\\n    yes | $ANDROID_HOME/tools/bin/sdkmanager --licenses\n\n# ——————————\n# Install Node and global packages\n# ——————————\nRUN cd && \\\n    curl -f -sSL -O http://nodejs.org/dist/v${NODE_VERSION}/node-v${NODE_VERSION}-linux-x64.tar.gz > /dev/null && \\\n    tar -xzf node-v${NODE_VERSION}-linux-x64.tar.gz && \\\n    mkdir opt && \\\n    mv node-v${NODE_VERSION}-linux-x64 /home/user/opt/node && \\\n    rm node-v${NODE_VERSION}-linux-x64.tar.gz\n\n# ——————————\n# Installs FB Watchman\n# ——————————\nRUN git clone -b v4.7.0 https://github.com/facebook/watchman.git /home/user/tmp/watchman\nWORKDIR /home/user/tmp/watchman\nRUN ./autogen.sh\nRUN ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\"\nRUN make\nUSER root\nRUN make install\nUSER user\n\n# ——————————\n# Install Basic React-Native packages\n# ——————————\nRUN npm install react-native-cli -g && npm cache clean --force;\nRUN npm install rnpm -g && npm cache clean --force;\nRUN npm install -g yarn && npm cache clean --force;\n\n# ——————————\n# Mime types\n# ——————————\nUSER root\nRUN echo \"Adding an up to date mime-types definition file\" && \\\n    curl -f -sSL https://salsa.debian.org/debian/mime-support/raw/master/mime.types -o /etc/mime.types\n\n# ——————————\n# Clean files\n# ——————————\nUSER root\nRUN echo \"Cleaning files!\" && \\\n    rm -rf /tmp/* && \\\n    apt-get -y remove --purge \\\n        dpkg-dev \\\n        fakeroot \\\n        file \\\n        manpages \\\n        manpages-dev \\\n        python-pip \\\n        patch \\\n        xauth \\\n        xz-utils && \\\n\n    apt-get -qq -y autoremove && \\\n    apt-get -qq clean && apt-get -qq purge && \\\n    rm -rf /var/lib/apt/lists/* /var/lib/dpkg/*-old && \\\n    rm -rf /usr/share/doc /usr/share/locale/[a-df-z]* /usr/share/locale/e[a-lo-z]* /usr/share/locale/en@* /usr/share/locale/en_GB\nUSER user\n\nENV LANG en_US.UTF-8\n\nWORKDIR /home/user/data\n\n# Expose ports\nEXPOSE 8080\nEXPOSE 8082\nEXPOSE 8081\n"
}