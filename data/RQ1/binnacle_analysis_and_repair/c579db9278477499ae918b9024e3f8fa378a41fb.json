{
  "startTime": 1674243341335,
  "endTime": 1674243341677,
  "originalSmells": [
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 50,
        "lineEnd": 50,
        "columnStart": 4,
        "columnEnd": 23
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 53,
        "lineEnd": 53,
        "columnStart": 149,
        "columnEnd": 169
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 54,
        "lineEnd": 54,
        "columnStart": 150,
        "columnEnd": 169
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 49,
        "lineEnd": 49,
        "columnStart": 4,
        "columnEnd": 119
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 49,
        "lineEnd": 49,
        "columnStart": 4,
        "columnEnd": 119
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 49,
        "lineEnd": 49,
        "columnStart": 4,
        "columnEnd": 119
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# This Dockerfile creates an image for use with Workload Automation\n# and/or devlib.\n#\n# To build this Docker image, please run the following command from\n# this directory:\n#\n#   docker build -t wa .\n#\n# This will create an image called wa, which is preconfigured to\n# run WA and devlib. Please note that the build process automatically\n# accepts the licenses for the Android SDK, so please be sure that you\n# are willing to accept these prior to building and running the image\n# in a container.\n#\n# To run the container, please run the following command from the\n# directory you wish to work from:\n#\n#   docker run -it --privileged -v /dev/bus/usb:/dev/bus/usb --volume ${PWD}:/workspace --workdir /workspace wa\n#\n# The above command starts the container in privileged mode, with\n# access to USB devices. The current directory is mounted into the\n# image, allowing you to work from there. Any files written to this\n# directory are directly written to the host. Additional \"volumes\",\n# such as required assets, can be mounted into the container using a\n# second --volume command.\n#\n# If you require access to a TTY from the Docker container, please\n# also mount this into the container in the same style as is used to\n# mount USB devices. For example:\n#\n#   docker run -it --privileged -v /dev/ttyUSB0:/dev/ttyUSB0 -v /dev/bus/usb:/dev/bus/usb --volume ${PWD}:/workspace --workdir /workspace wa\n#\n# When you are finished, please run `exit` to leave the container.\n#\n# NOTE: Please make sure that the ADB server is NOT running on the\n# host. If in doubt, run `adb kill-server` before running the docker\n# container.\n#\n\n# We want to make sure to base this on a recent ubuntu release\nFROM ubuntu:18.10\n\n# Please update the references below to use different versions of\n# devlib, WA or the Android SDK\nARG DEVLIB_REF=v1.1.1\nARG WA_REF=v3.1.3\nARG ANDROID_SDK_URL=https://dl.google.com/android/repository/sdk-tools-linux-3859397.zip\n\nRUN apt-get update && apt-get install --no-install-recommends -y python3 python3-pip git wget zip openjdk-8-jre-headless vim emacs nano curl sshpass ssh usbutils && rm -rf /var/lib/apt/lists/*;\nRUN pip3 install --no-cache-dir pandas\n\n# Let's get the two repos we need, and install them\nRUN git clone -v https://github.com/ARM-software/devlib.git /tmp/devlib && cd /tmp/devlib && git checkout $DEVLIB_REF && python3 setup.py install && pip3 install --no-cache-dir .[full]\nRUN git clone -v https://github.com/ARM-software/workload-automation.git /tmp/wa && cd /tmp/wa && git checkout $WA_REF && python3 setup.py install && pip3 install --no-cache-dir .[all]\n\n# Clean-up\nRUN rm -R /tmp/devlib /tmp/wa\n\n# Create and switch to the wa user\nRUN useradd -m -G plugdev,dialout wa\nUSER wa\n\n# Let's set up the Android SDK for the user\nRUN mkdir -p /home/wa/.android\nRUN mkdir -p /home/wa/AndroidSDK && cd /home/wa/AndroidSDK && wget $ANDROID_SDK_URL -O sdk.zip && unzip sdk.zip\nRUN cd /home/wa/AndroidSDK/tools/bin && yes | ./sdkmanager --licenses && ./sdkmanager platform-tools && ./sdkmanager 'build-tools;27.0.3'\n\n# Update the path\nRUN echo 'export PATH=/home/wa/AndroidSDK/platform-tools:${PATH}' >> /home/wa/.bashrc\nRUN echo 'export PATH=/home/wa/AndroidSDK/build-tools:${PATH}' >> /home/wa/.bashrc\nRUN echo 'export ANDROID_HOME=/home/wa/AndroidSDK' >> /home/wa/.bashrc\n\n# Generate some ADB keys. These will change each time the image is build but will otherwise persist.\nRUN /home/wa/AndroidSDK/platform-tools/adb keygen /home/wa/.android/adbkey\n\n# We need to make sure to add the remote assets too\nRUN wa --version && echo 'remote_assets_url: https://raw.githubusercontent.com/ARM-software/workload-automation-assets/master/dependencies' >> /home/wa/.workload_automation/config.yaml\n\n"
}