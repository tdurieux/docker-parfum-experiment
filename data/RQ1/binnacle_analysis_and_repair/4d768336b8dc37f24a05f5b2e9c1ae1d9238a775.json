{
  "startTime": 1674252816369,
  "endTime": 1674252816742,
  "originalSmells": [
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 12,
        "lineEnd": 12,
        "columnStart": 4,
        "columnEnd": 45
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 48,
        "lineEnd": 48,
        "columnStart": 22,
        "columnEnd": 94
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 87,
        "lineEnd": 87,
        "columnStart": 26,
        "columnEnd": 92
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 18,
        "lineEnd": 19,
        "columnStart": 27,
        "columnEnd": 36
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 28,
        "lineEnd": 29,
        "columnStart": 27,
        "columnEnd": 28
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 54,
        "lineEnd": 55,
        "columnStart": 27,
        "columnEnd": 59
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 18,
        "lineEnd": 19,
        "columnStart": 27,
        "columnEnd": 36
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 28,
        "lineEnd": 29,
        "columnStart": 27,
        "columnEnd": 28
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 54,
        "lineEnd": 55,
        "columnStart": 27,
        "columnEnd": 59
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM ubuntu:16.04\nMAINTAINER dreamcat4 <dreamcat4@gmail.com>\n\n\nENV _clean=\"rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*\"\nENV _apt_clean=\"eval apt-get clean && $_clean\"\n# apt-get clean -y && apt-get autoclean -y && apt-get autoremove -y\n\n\n# Install s6-overlay\nENV s6_overlay_version=\"1.17.1.1\"\nADD https://github.com/just-containers/s6-overlay/releases/download/v${s6_overlay_version}/s6-overlay-amd64.tar.gz /tmp/\nRUN tar zxf /tmp/s6-overlay-amd64.tar.gz -C / && $_clean && rm /tmp/s6-overlay-amd64.tar.gz\nENV S6_LOGGING=\"1\"\n# ENV S6_KILL_GRACETIME=\"3000\"\n\n\n# Supportive pkgs\nRUN apt-get update -qqy && DEBIAN_FRONTEND=noninteractive apt-get --no-install-recommends install -y \\\n    wget curl git sudo nano less man && $_apt_clean && rm -rf /var/lib/apt/lists/*;\n\n# Output folder\nRUN mkdir -p /out\n\n\n\n# ===\n# dnsmasq - install build time dependancies\nRUN apt-get update -qqy && DEBIAN_FRONTEND=noninteractive apt-get --no-install-recommends install -y \\\n    ca-certificates make gcc && $_apt_clean && rm -rf /var/lib/apt/lists/*;\n\n# dnsmasq - Build from source\nRUN mkdir -p /build/dnsmasq\nWORKDIR /build/dnsmasq\n\n# dnsmasq - git checkout\nRUN git clone git://thekelleys.org.uk/dnsmasq.git && cd dnsmasq \\\n && dnsmasq_version=\"$(git tag  | grep -E 'v[0-9][0-9]*\\.[0-9][0-9][rc]*[0-9]*$' | sort | tail -1)\" \\\n && release_version=$(git tag | grep -E \"^${dnsmasq_version%rc*}$\" || true) \\\n && if [ \"$release_version\" ]; then dnsmasq_version=$release_version; fi \\\n && echo \"$dnsmasq_version\" > /out/dnsmasq_version \\\n && git checkout \"${dnsmasq_version}\"\n\n# dnsmasq - compile & install\nRUN cd dnsmasq && sed -i -e 's|/usr/local|/usr|' Makefile && make install DESTDIR=$PWD/out \\\n && mkdir -p out/etc && cp dnsmasq.conf.example out/etc/\n\n# dnsmasq - Create tarball in /out/\nRUN cd dnsmasq/out && tar -czvf /out/dnsmasq-$(cat /out/dnsmasq_version)_linux-x86_64.tar.gz * && rm /out/dnsmasq-$( cat /out/dnsmasq_version)_linux-x86_64.tar.gz\n\n\n\n# ===\n# ipxe - install build time dependancies\nRUN apt-get update -qqy && DEBIAN_FRONTEND=noninteractive apt-get --no-install-recommends install -y \\\n    gcc binutils make perl syslinux liblzma-dev genisoimage && $_apt_clean && rm -rf /var/lib/apt/lists/*;\n\n\n# ipxe - Build from source\nRUN mkdir -p /build/ipxe \\\n && date -I > /out/ipxe_version\n\nWORKDIR /build/ipxe\n\n# ipxe - git checkout\nRUN git clone git://git.ipxe.org/ipxe.git\n\n# RUN cd ipxe \\\n#  && ipxe_version=\"$(git tag | grep -E 'v[0-9][0-9]*\\.[0-9]\\.[0-9][-rc]*[0-9]*$' | sort | tail -1)\" \\\n#  && release_version=$(git tag | grep -E \"^${ipxe_version%-rc*}$\" || true) \\\n#  && if [ \"$release_version\" ]; then ipxe_version=$release_version; fi \\\n#  && echo \"$ipxe_version\" > /out/ipxe_version \\\n#  && git checkout \"${ipxe_version}\"\n\n# Disable entropy gathering - avoids +20 seconds boot delay\nADD ipxe/nocrypto /build/ipxe/ipxe/src/config/local/nocrypto\n\n# ipxe - compile & install\nRUN cd ipxe/src \\\n && CONFIG=nocrypto make bin/undionly.kpxe \\\n && CONFIG=nocrypto make bin-x86_64-efi/ipxe.efi\n\nRUN mkdir -p out \\\n && cp ipxe/src/bin/undionly.kpxe out/ \\\n && cp ipxe/src/bin-x86_64-efi/ipxe.efi out/\n\n# ipxe - Create tarball in /out/\nRUN cd /build/ipxe/out && tar -czvf /out/ipxe-$(cat /out/ipxe_version)_linux-x86_64.tar.gz * && rm /out/ipxe-$( cat /out/ipxe_version)_linux-x86_64.tar.gz\n\n\n\n# # ===\n# # istgt - install build time dependancies\n# RUN apt-get update -qqy && DEBIAN_FRONTEND=noninteractive apt-get install -y \\\n#     curl wget gcc binutils make libssl-dev && $_apt_clean\n\n# # istgt - Build from source\n# RUN mkdir -p /build/istgt \\\n#  && curl --silent http://svnweb.freebsd.org/ports/head/net/istgt/Makefile?view=co | grep \"PORTVERSION=\" | cut -f2 > /out/istgt_version\n\n# WORKDIR /build/istgt - dead\n\n# # istgt - download source tarball\n# RUN wget http://www.peach.ne.jp/archives/istgt/istgt-$(cat /out/istgt_version).tar.gz \\\n#  && tar -zxf istgt-$(cat /out/istgt_version).tar.gz && ln -sf istgt-$(cat /out/istgt_version) istgt\n\n# # istgt - compile & install\n# RUN cd istgt \\\n#  && ./configure --sysconfdir=/etc --localstatedir=/var \\\n#     --localedir=/usr/share/locale --datarootdir=/usr/share --prefix=/usr --enable-symlink-device \\\n#  && make && make install DESTDIR=$PWD/out\n\n# # istgt - Create tarball in /out/\n# RUN cd /build/istgt/istgt/out && tar -czvf /out/istgt-$(cat /out/istgt_version)_linux-x86_64.tar.gz *\n\n\n\n# Upload linux binaries --> bintray.com\nWORKDIR /out\nADD upload-to-bintray /bin/\nRUN chmod +x /bin/upload-to-bintray\n\n\n# Execute our upload script\nADD bintray-env /out/\nRUN upload-to-bintray && rm /out/bintray-env && ls -lsa /out/\n\n\n# Default container settings\nVOLUME /out\nENTRYPOINT [\"/init\",\"/bin/sleep\",\"99999999\"]\n\n\n\n\n\n"
}