{
  "startTime": 1674236441369,
  "endTime": 1674236441929,
  "originalSmells": [
    {
      "rule": "mkdirUsrSrcThenRemove",
      "position": {
        "lineStart": 86,
        "lineEnd": 86,
        "columnStart": 7,
        "columnEnd": 40
      }
    },
    {
      "rule": "mkdirUsrSrcThenRemove",
      "position": {
        "lineStart": 90,
        "lineEnd": 90,
        "columnStart": 7,
        "columnEnd": 49
      }
    },
    {
      "rule": "mkdirUsrSrcThenRemove",
      "position": {
        "lineStart": 97,
        "lineEnd": 97,
        "columnStart": 7,
        "columnEnd": 32
      }
    },
    {
      "rule": "mkdirUsrSrcThenRemove",
      "position": {
        "lineStart": 136,
        "lineEnd": 136,
        "columnStart": 7,
        "columnEnd": 24
      }
    },
    {
      "rule": "mkdirUsrSrcThenRemove",
      "position": {
        "lineStart": 146,
        "lineEnd": 146,
        "columnStart": 7,
        "columnEnd": 60
      }
    },
    {
      "rule": "mkdirUsrSrcThenRemove",
      "position": {
        "lineStart": 158,
        "lineEnd": 158,
        "columnStart": 7,
        "columnEnd": 60
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 143,
        "lineEnd": 143,
        "columnStart": 7,
        "columnEnd": 39
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 155,
        "lineEnd": 155,
        "columnStart": 7,
        "columnEnd": 26
      }
    },
    {
      "rule": "gpgUseBatchFlag",
      "position": {
        "lineStart": 131,
        "lineEnd": 131,
        "columnStart": 8,
        "columnEnd": 89
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 8,
        "lineEnd": 8,
        "columnStart": 22,
        "columnEnd": 52
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 8,
        "lineEnd": 8,
        "columnStart": 22,
        "columnEnd": 52
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# Most of the below is based on the Nginx Team's Alpine Dockerfile\n#   https://github.com/nginxinc/docker-nginx/blob/e3e35236b2c77e02266955c875b74bdbceb79c44/mainline/alpine/Dockerfile\n\n\n# --- Maxmind GeoIP DB Download Container --- #\nFROM ubuntu:18.04 as geoip\nLABEL maintainer \"Alex Haydock <alex@alexhaydock.co.uk>\"\n\nRUN apt-get update && apt-get install --no-install-recommends geoipupdate -y && rm -rf /var/lib/apt/lists/*;\nRUN geoipupdate -v\n\n\n# --- Nginx Build Container --- #\nFROM alpine:3.9 as builder\nLABEL maintainer \"Alex Haydock <alex@alexhaydock.co.uk>\"\n\n# Nginx Version (See: https://nginx.org/en/CHANGES)\nENV NGINX_VERSION 1.15.9\nENV NGINX_GPG B0F4253373F8F6F510D42178520A9993A1C052F8\n\n# Nginx User UID/GID\nARG NGINX_ID=6666\n\n# Nginx build config\nARG CONFIG=\"\\\n    --prefix=/etc/nginx \\\n    --sbin-path=/usr/sbin/nginx \\\n    --modules-path=/usr/lib/nginx/modules \\\n    --conf-path=/etc/nginx/nginx.conf \\\n    --error-log-path=/var/log/nginx/error.log \\\n    --http-log-path=/var/log/nginx/access.log \\\n    --pid-path=/var/run/nginx.pid \\\n    --lock-path=/var/run/nginx.lock \\\n    --http-client-body-temp-path=/var/cache/nginx/client_temp \\\n    --http-proxy-temp-path=/var/cache/nginx/proxy_temp \\\n    --http-fastcgi-temp-path=/var/cache/nginx/fastcgi_temp \\\n    --http-uwsgi-temp-path=/var/cache/nginx/uwsgi_temp \\\n    --http-scgi-temp-path=/var/cache/nginx/scgi_temp \\\n    --user=nginx \\\n    --group=nginx \\\n    --with-http_ssl_module \\\n    --with-http_realip_module \\\n    --with-http_addition_module \\\n    --with-http_sub_module \\\n    --with-http_dav_module \\\n    --with-http_flv_module \\\n    --with-http_mp4_module \\\n    --with-http_gunzip_module \\\n    --with-http_gzip_static_module \\\n    --with-http_random_index_module \\\n    --with-http_secure_link_module \\\n    --with-http_stub_status_module \\\n    --with-http_auth_request_module \\\n    --with-http_xslt_module=dynamic \\\n    --with-http_image_filter_module=dynamic \\\n    --with-threads \\\n    --with-stream \\\n    --with-stream_ssl_module \\\n    --with-stream_ssl_preread_module \\\n    --with-stream_realip_module \\\n    --with-http_slice_module \\\n    --with-mail \\\n    --with-mail_ssl_module \\\n    --with-compat \\\n    --with-file-aio \\\n    --with-http_v2_module \\\n    --with-openssl=/usr/src/boringssl \\\n    --with-cc-opt=-I'/usr/src/boringssl/.openssl/include/' \\\n    --add-module=/usr/src/modules/ngx_headers_more \\\n    --add-module=/usr/src/modules/ngx_subs_filter \\\n    --add-module=/usr/src/modules/ngx_http_geoip2_module \\\n    --add-module=/usr/src/modules/ngx_brotli \\\n\"\n\nRUN set -xe \\\n    \\\n# Add BoringSSL build deps\n    && apk add --no-cache --virtual .boringssl-deps \\\n        build-base \\\n        cmake \\\n        git \\\n        go \\\n        perl \\\n    \\\n# Download and prepare BoringSSL source\n    && git clone --depth 1 https://boringssl.googlesource.com/boringssl \"/usr/src/boringssl\" \\\n    && mkdir \"/usr/src/boringssl/build/\" \\\n    && cd \"/usr/src/boringssl/build/\" \\\n    && cmake ../ \\\n    && make \\\n    && mkdir -p \"/usr/src/boringssl/.openssl/lib\" \\\n    && cd \"/usr/src/boringssl/.openssl\" \\\n    && ln -s ../include \\\n    && cd \"/usr/src/boringssl\" \\\n    && cp \"build/crypto/libcrypto.a\" \"build/ssl/libssl.a\" \".openssl/lib\" \\\n    \\\n# Download additional Nginx modules (for each of these we need to include an --add-module line in the Nginx configuration step)\n    && mkdir -p /usr/src/modules \\\n    && git clone --depth 1 https://github.com/openresty/headers-more-nginx-module.git /usr/src/modules/ngx_headers_more \\\n    && git clone --depth 1 https://github.com/yaoweibin/ngx_http_substitutions_filter_module.git /usr/src/modules/ngx_subs_filter \\\n    && git clone --depth 1 https://github.com/leev/ngx_http_geoip2_module.git /usr/src/modules/ngx_http_geoip2_module \\\n    && git clone --depth 1 https://github.com/google/ngx_brotli.git /usr/src/modules/ngx_brotli \\\n    && cd /usr/src/modules/ngx_brotli && git submodule update --init \\\n    \\\n# Download and prepare Nginx\n    && cd /usr/src \\\n    && addgroup -S -g $NGINX_ID nginx \\\n    && adduser -D -S -h /var/cache/nginx -s /sbin/nologin -G nginx -u $NGINX_ID nginx \\\n    && apk add --no-cache --virtual .build-deps \\\n        gcc \\\n        libc-dev \\\n        make \\\n        pcre-dev \\\n        zlib-dev \\\n        linux-headers \\\n        curl \\\n        gnupg \\\n        libxslt-dev \\\n        gd-dev \\\n        libmaxminddb-dev \\\n    && curl -fSL https://nginx.org/download/nginx-$NGINX_VERSION.tar.gz -o nginx.tar.gz \\\n    && curl -fSL https://nginx.org/download/nginx-$NGINX_VERSION.tar.gz.asc  -o nginx.tar.gz.asc \\\n    && export GNUPGHOME=\"$(mktemp -d)\" \\\n    && found=''; rm -rf /usr/src/boringssl/build/ \\\n    for server in \\\n        ha.pool.sks-keyservers.net \\\n        hkp://keyserver.ubuntu.com:80 \\\n        hkp://p80.pool.sks-keyservers.net:80 \\\n        pgp.mit.edu; \\\n    do \\\n        echo \"Fetching GPG key $NGINX_GPG from $server\"; \\\n        gpg --batch --keyserver \"$server\" --keyserver-options timeout=10 --recv-keys \"$NGINX_GPG\" && found=yes && break; \\\n    done; \\\n    test -z \"$found\" && echo >&2 \"error: failed to fetch GPG key $NGINX_GPG\" && exit 1; \\\n    gpg --batch --verify nginx.tar.gz.asc nginx.tar.gz \\\n    && rm -rf \"$GNUPGHOME\" nginx.tar.gz.asc \\\n    && mkdir -p /usr/src \\\n    && tar -zxC /usr/src -f nginx.tar.gz \\\n    && rm nginx.tar.gz \\\n    && mv -v /usr/src/nginx-$NGINX_VERSION /usr/src/nginx\n\n# Build debug bits\nRUN cd /usr/src/nginx \\\n    && ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" $CONFIG --with-debug \\\n\n    # Prevent build-error 127 which seems to be caused by the ssl.h file missing:\n    && mkdir -p /usr/src/boringssl/.openssl/include/openssl/ \\\n    && touch /usr/src/boringssl/.openssl/include/openssl/ssl.h \\\n    && make -j$(getconf _NPROCESSORS_ONLN) \\\n    && mv objs/nginx objs/nginx-debug \\\n    && mv objs/ngx_http_xslt_filter_module.so objs/ngx_http_xslt_filter_module-debug.so \\\n    && mv objs/ngx_http_image_filter_module.so objs/ngx_http_image_filter_module-debug.so && rm -rf /usr/src/boringssl/.openssl/include/openssl/\n\n# Build main bits\nRUN cd /usr/src/nginx \\\n    && ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" $CONFIG \\\n\n    # Prevent build-error 127 which seems to be caused by the ssl.h file missing:\n    && mkdir -p /usr/src/boringssl/.openssl/include/openssl/ \\\n    && touch /usr/src/boringssl/.openssl/include/openssl/ssl.h \\\n    && make -j$(getconf _NPROCESSORS_ONLN) && rm -rf /usr/src/boringssl/.openssl/include/openssl/\n\n# Clean some unnecessary source so we're copying less into the next stage\nRUN rm -rf /usr/src/boringssl/build\n\n# Move the source into a single place\nRUN mkdir /tmp/buildsource\nRUN mv -fv /usr/src/nginx/ /tmp/buildsource/nginx/\nRUN mv -fv /usr/src/modules/ /tmp/buildsource/modules/\nRUN mv -fv /usr/src/boringssl/ /tmp/buildsource/boringssl/\n\n# Backup our NGINX_ID environment variable\nRUN echo \"$NGINX_ID\" > /tmp/buildsource/nginx_id\n\n\n# --- Runtime Container --- #\nFROM alpine:3.9\nLABEL maintainer \"Alex Haydock <alex@alexhaydock.co.uk>\"\n\nCOPY --from=builder /tmp/buildsource /usr/src\n# See this page for GeoIP info: https://github.com/leev/ngx_http_geoip2_module#example-usage\nCOPY --from=geoip /var/lib/GeoIP/GeoLite2-Country.mmdb /var/lib/GeoIP/GeoLite2-Country.mmdb\n\nRUN set -xe \\\n    \\\n# Set the NGINX_ID environment variable again\n    && export NGINX_ID=\"$(cat /usr/src/nginx_id)\" \\\n    \\\n# Re-add the Nginx user\n    && addgroup -S -g $NGINX_ID nginx \\\n    && adduser -D -S -h /var/cache/nginx -s /sbin/nologin -G nginx -u $NGINX_ID nginx \\\n\t\\\n# Add some more deps to install Nginx\n    && apk add --no-cache --virtual .installdeps binutils make wget \\\n    \\\n# Install Nginx\n    && cd /usr/src/nginx \\\n    && make install \\\n    && rm -rf /etc/nginx/html/ \\\n    && mkdir /etc/nginx/conf.d/ \\\n    && mkdir -p /usr/share/nginx/html/ \\\n    && install -m644 html/index.html /usr/share/nginx/html/ \\\n    && install -m644 html/50x.html /usr/share/nginx/html/ \\\n    && install -m755 objs/nginx-debug /usr/sbin/nginx-debug \\\n    && install -m755 objs/ngx_http_xslt_filter_module-debug.so /usr/lib/nginx/modules/ngx_http_xslt_filter_module-debug.so \\\n    && install -m755 objs/ngx_http_image_filter_module-debug.so /usr/lib/nginx/modules/ngx_http_image_filter_module-debug.so \\\n    && ln -s ../../usr/lib/nginx/modules /etc/nginx/modules \\\n    && strip /usr/sbin/nginx* \\\n    && strip /usr/lib/nginx/modules/*.so \\\n    \\\n# Bring in gettext so we can get `envsubst`, then throw\n# the rest away. To do this, we need to install `gettext`\n# then move `envsubst` out of the way so `gettext` can\n# be deleted completely, then move `envsubst` back.\n    && apk add --no-cache --virtual .gettext gettext \\\n    && mv /usr/bin/envsubst /tmp/ \\\n    \\\n# Work out our runtime dependencies\n    && runDeps=\"$( \\\n        scanelf --needed --nobanner --format '%n#p' /usr/sbin/nginx /usr/lib/nginx/modules/*.so /tmp/envsubst \\\n            | tr ',' '\\n' \\\n            | sort -u \\\n            | awk 'system(\"[ -e /usr/local/lib/\" $1 \" ]\") == 0 { next } { print \"so:\" $1 }' \\\n    )\" \\\n# Install the runtime dependencies as virtual metapackage called \".nginx-rundeps\"\n    && apk add --no-cache --virtual .nginx-rundeps $runDeps \\\n    \\\n# Bring in tzdata so users can set the timezone through environment variables\n    && apk add --no-cache tzdata \\\n    \\\n# Add the default Nginx config files\n# (these are pulled directly from the Nginx team's Docker repo without modification)\n    && wget https://raw.githubusercontent.com/nginxinc/docker-nginx/master/mainline/alpine/nginx.conf -O /etc/nginx/nginx.conf \\\n    && wget https://raw.githubusercontent.com/nginxinc/docker-nginx/master/mainline/alpine/nginx.vh.default.conf -O /etc/nginx/conf.d/default.conf \\\n    \\\n# Remove our virtual metapackages\n    && apk del .installdeps .gettext \\\n    && mv /tmp/envsubst /usr/local/bin/ \\\n    \\\n# Delete source files to save space in final image\n    && rm -rf /usr/src/* \\\n    \\\n# Make sure ownership is correct on everything Nginx will need to write to.\n# This means we can run the container as the Nginx user if we want to.\n    && chown -R $NGINX_ID:$NGINX_ID \"/etc/nginx\" \\\n    && chown -R $NGINX_ID:$NGINX_ID \"/var/cache/nginx\" \\\n    && chown -R $NGINX_ID:$NGINX_ID \"/var/log/nginx\" \\\n    && touch \"/var/run/nginx.pid\" \\\n    && chown $NGINX_ID:$NGINX_ID \"/var/run/nginx.pid\" \\\n    && touch \"/var/run/nginx.lock\" \\\n    && chown $NGINX_ID:$NGINX_ID \"/var/run/nginx.lock\" \\\n    \\\n# Print final built version (for debug purposes)\n    && echo \"\" && nginx -V\n\n# Runtime settings\nSTOPSIGNAL SIGTERM\nCMD [\"nginx\", \"-g\", \"daemon off;\"]\n"
}