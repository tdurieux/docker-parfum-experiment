{
  "startTime": 1674235110883,
  "endTime": 1674235110928,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 4,
        "lineEnd": 4,
        "columnStart": 4,
        "columnEnd": 126
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "ARG KUBE_VERSION=v1.13.0\n\nFROM fedora:rawhide\nARG KUBE_VERSION\nRUN curl -f -o /root/kubectl -O https://storage.googleapis.com/kubernetes-release/release/${KUBE_VERSION}/bin/linux/amd64/kubectl\n\nFROM gcr.io/google-containers/kube-apiserver-amd64:${KUBE_VERSION}\n\nENV container=docker\n\nENV NAME=kubernetes-apiserver VERSION=0.1 RELEASE=8 ARCH=x86_64\nLABEL bzcomponent=\"$NAME\" \\\n        name=\"$FGC/$NAME\" \\\n        version=\"$VERSION\" \\\n        release=\"$RELEASE.$DISTTAG\" \\\n        architecture=\"$ARCH\" \\\n        atomic.type='system' \\\n        maintainer=\"Jason Brooks <jbrooks@redhat.com>\"\n\nCOPY launch.sh /usr/bin/kube-apiserver-docker.sh\n\nCOPY service.template config.json.template /exports/\n\n# copy kubectl into the host, another way to do this would be:\n#\n#     echo \"runc exec -- kube-apiserver /usr/bin/kubectl \\$@\"  \\\n#     > /exports/hostfs/usr/local/bin/kubectl && chmod +x \\\n#     /exports/hostfs/usr/local/bin/kubectl\n#\n# however, this would require hard-coding the container name\n\nCOPY apiserver config /etc/kubernetes/\nRUN mkdir -p /exports/hostfs/usr/local/bin/\nCOPY --from=0 /root/kubectl /exports/hostfs/usr/local/bin/\nRUN chmod +x /exports/hostfs/usr/local/bin/kubectl && \\\n    mkdir -p /exports/hostfs/etc/kubernetes && \\\n    cp /etc/kubernetes/config /exports/hostfs/etc/kubernetes/ && \\\n    cp /etc/kubernetes/apiserver /exports/hostfs/etc/kubernetes/\n\nENTRYPOINT [\"/usr/bin/kube-apiserver-docker.sh\"]\n"
}