{
  "startTime": 1674236566420,
  "endTime": 1674236566656,
  "originalSmells": [
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 43,
        "lineEnd": 43,
        "columnStart": 4,
        "columnEnd": 45
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 39,
        "lineEnd": 39,
        "columnStart": 4,
        "columnEnd": 73
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 6,
        "lineEnd": 21,
        "columnStart": 4,
        "columnEnd": 11
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 24,
        "lineEnd": 34,
        "columnStart": 4,
        "columnEnd": 10
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 39,
        "lineEnd": 39,
        "columnStart": 4,
        "columnEnd": 73
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 43,
        "lineEnd": 43,
        "columnStart": 4,
        "columnEnd": 45
      }
    }
  ],
  "repairedSmells": [
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 39,
        "lineEnd": 39,
        "columnStart": 4,
        "columnEnd": 73
      }
    }
  ],
  "repairedDockerfile": "FROM nvidia/cuda:8.0-cudnn5-devel-ubuntu16.04\nMAINTAINER kohei\n\n# Install dependent packages via apt-get\nRUN apt-get -y update &&\\\n    echo \">>>>> packages for building python\" &&\\\n    apt-get --no-install-recommends -y install \\\n      g++ \\\n      libsqlite3-dev \\\n      libssl-dev \\\n      libreadline-dev \\\n      libncurses5-dev \\\n      lzma-dev \\\n      liblzma-dev \\\n      libbz2-dev \\\n      libz-dev \\\n      libgdbm-dev \\\n      build-essential \\\n      cmake \\\n      make \\\n      wget \\\n      unzip \\\n      &&\\\n    echo \">>>>> packages for building python packages\" &&\\\n    apt-get --no-install-recommends -y install \\\n      libblas-dev \\\n      liblapack-dev \\\n      libpng-dev \\\n      libfreetype6-dev \\\n      pkg-config \\\n      ca-certificates \\\n      libhdf5-serial-dev \\\n      postgresql \\\n      libpq-dev \\\n      curl \\\n      && \\\n    apt-get clean && rm -rf /var/lib/apt/lists/*;\n\n# -=-=-=- Java -=-=-=-\nRUN apt-get --no-install-recommends -y install software-properties-common &&\\\n    add-apt-repository ppa:webupd8team/java -y &&\\\n    apt-get update &&\\\n    echo oracle-java8-installer shared/accepted-oracle-license-v1-1 select true | /usr/bin/debconf-set-selections && \\\n    apt-get install --no-install-recommends -y oracle-java8-installer && \\\n    apt-get clean && rm -rf /var/lib/apt/lists/*;\n\n# -=-=-=- Anaconda -=-=-=-\nRUN ANACONDA_URL=\"https://repo.continuum.io/archive/Anaconda3-4.3.1-Linux-x86_64.sh\" &&\\\n    ANACONDA_FILE=\"anaconda.sh\" &&\\\n    mkdir -p /opt &&\\\n    cd /opt &&\\\n    wget -q --no-check-certificate $ANACONDA_URL -O $ANACONDA_FILE &&\\\n    echo \"4447b93d2c779201e5fb50cfc45de0ec96c3804e7ad0fe201ab6b99f73e90302  ${ANACONDA_FILE}\" | sha256sum -c - &&\\\n    bash $ANACONDA_FILE -b -p /opt/conda &&\\\n    rm $ANACONDA_FILE\nENV PATH \"$PATH:/opt/conda/bin\"\n\n# -=-=-=- Python packages (py35 env) -=-=-=-\nCOPY py35.yml /opt/\nRUN cd /opt &&\\\n    conda env create -f py35.yml\n\n# Keras\nRUN mkdir /root/.keras\nCOPY keras.json /root/.keras/\n\n# Deploy OSMdata\nRUN mkdir /root/osmdata\nCOPY osmdata /root/osmdata/\nRUN unzip /root/osmdata/las-vegas_nevada.imposm-shapefiles.zip \\\n        -d /root/osmdata/las-vegas_nevada_osm/ &&\\\n    unzip /root/osmdata/shanghai_china.imposm-shapefiles.zip \\\n        -d /root/osmdata/shanghai_china_osm/ &&\\\n    unzip /root/osmdata/paris_france.imposm-shapefiles.zip \\\n        -d /root/osmdata/paris_france_osm/ &&\\\n    unzip /root/osmdata/ex_s2cCo6gpCXAvihWVygCAfSjNVksnQ.imposm-shapefiles.zip \\\n        -d /root/osmdata/ex_s2cCo6gpCXAvihWVygCAfSjNVksnQ_osm/\n\n# Copy and unzip visualizer\nCOPY code/visualizer-2.0.zip /root/\nRUN unzip -d /root/visualizer-2.0 /root/visualizer-2.0.zip\n\n# Deploy codes\nCOPY code /root/\nRUN chmod a+x /root/train.sh &&\\\n    chmod a+x /root/test.sh\n\nENV PATH $PATH:/root/\n\n# Env\nENV LC_ALL C.UTF-8\nENV LANG C.UTF-8\nWORKDIR /root/\n"
}