{
  "startTime": 1674253069112,
  "endTime": 1674253069174,
  "originalSmells": [
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 19,
        "lineEnd": 19,
        "columnStart": 4,
        "columnEnd": 15
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "ARG NODE_IMAGE=node:12.2-alpine\nARG WORKDIR=/usr/src/app/\n\nFROM ${NODE_IMAGE} as nodebuild\nARG WORKDIR\n\nWORKDIR $WORKDIR\n\n# Generate node_modules\nCOPY package.json \\\n     package-lock.json \\\n     .babelrc \\\n     .eslintrc.js \\\n     .eslintignore \\\n     .prettierrc \\\n     ABOUT.md \\\n     $WORKDIR\nRUN apk add --no-cache --virtual=build-dependencies \\\n    python build-base && \\\n    npm install && \\\n    apk del --purge build-dependencies && npm cache clean --force;\n\n# Build static assets and remove devDependencies.\nCOPY client ./client\nCOPY server ./server\nCOPY shared ./shared\nCOPY scripts ./scripts\nCOPY config.docker.js ./config.js\nRUN npm run build && \\\n    npm prune --production\n\n# Now get the clean image without any dependencies and copy compiled app\nFROM ${NODE_IMAGE} as flood\nARG WORKDIR\n\nWORKDIR $WORKDIR\n\n# Install runtime dependencies.\nRUN apk --no-cache add \\\n    mediainfo\n\nCOPY --from=nodebuild $WORKDIR $WORKDIR\n\n# Hints for consumers of the container.\nEXPOSE 3000\nVOLUME [\"/data\"]\n\n# Start application.\nCMD [ \"npm\", \"start\" ]\n"
}