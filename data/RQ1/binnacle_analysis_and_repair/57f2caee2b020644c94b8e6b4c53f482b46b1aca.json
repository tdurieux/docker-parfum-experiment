{
  "startTime": 1674234404941,
  "endTime": 1674234405156,
  "originalSmells": [
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 23,
        "lineEnd": 27,
        "columnStart": 4,
        "columnEnd": 25
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 52,
        "lineEnd": 54,
        "columnStart": 4,
        "columnEnd": 14
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 12,
        "lineEnd": 18,
        "columnStart": 22,
        "columnEnd": 83
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 23,
        "lineEnd": 27,
        "columnStart": 4,
        "columnEnd": 25
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 52,
        "lineEnd": 54,
        "columnStart": 4,
        "columnEnd": 14
      }
    }
  ],
  "repairedSmells": [
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 23,
        "lineEnd": 27,
        "columnStart": 4,
        "columnEnd": 25
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 52,
        "lineEnd": 54,
        "columnStart": 4,
        "columnEnd": 14
      }
    }
  ],
  "repairedDockerfile": "FROM nvidia/cudagl:8.0-devel-ubuntu16.04\n#FROM nvidia/cuda:8.0-cudnn6-devel-ubuntu14.04\nLABEL maintainer andrei.ioan.barsan@gmail.com\n\n# !!! IMPORTANT !!!\n# This does NOT work yet. The dockerization effort is still a work in progress!\n# Running OpenGL GUIs with CUDA in containers is non-trivial.\n\n# Build and run this with 'nvidia-docker'. If you forget to do so, the build\n# will NOT fail, but you will start getting strange issues when attempting\n# to run Caffe or any of the tests.\n\nRUN apt-get update && apt-get install -y --no-install-recommends \\\n    build-essential \\\n    git \\\n    vim \\\n    wget \\\n    libopencv-dev \\\n    libxmu-dev libxi-dev freeglut3 freeglut3-dev glew-utils libglew-dev libglew-dbg && rm -rf /var/lib/apt/lists/*;\n#        && \\\n#    rm -rf /var/lib/apt/lists/*\n\n# TODO why doesn't DynSLAM pick up the in-tree version of gflags?\nRUN apt-get install -y --no-install-recommends \\\n    binutils-dev \\\n    libgflags-dev \\\n    libpng++-dev \\\n    libpthread-stubs0-dev && rm -rf /var/lib/apt/lists/*;\n#    gcc-5 g++-5\n\n# TODO(andrei): Sort out the paths.\nENV DYNSLAM_ROOT=/opt/DynSLAM\nWORKDIR $DYNSLAM_ROOT\n\nADD scripts        ./scripts\nRUN scripts/install_cmake.sh sudo\nRUN cmake --version\n\n# TODO(andrei): It may be useful to make a tutorial about developing a CUDA image processing tool\n# using a GUI with docker.\n\n# TODO(andrei): Add src/DynSLAM separately, LAST, to minimize the number of required rebuilds...\nADD CMakeLists.txt ./\nADD src            ./src\n#ADD data           ./data\n\nRUN mkdir -p build/eigen    && cd build/eigen && cmake $DYNSLAM_ROOT/src/eigen    && make -j$(nproc)\nRUN mkdir -p build/Pangolin && cd build/Pangolin && cmake $DYNSLAM_ROOT/src/Pangolin && make -j$(nproc)\n\n# This has to be provided, since the capabilities test cannot run during Docker build.\nENV ITM_CUDA_COMPUTE_CAPABILITY=52\n\nRUN apt-get install -y --no-install-recommends \\\n    binutils-dev \\\n    mesa-utils && rm -rf /var/lib/apt/lists/*;\n\nRUN mkdir -p build/DynSLAM && cd build/DynSLAM && \\\n    cmake $DYNSLAM_ROOT -DCUDA_COMPUTE_CAPABILITY=$ITM_CUDA_COMPUTE_CAPABILITY\n\n# TODO(andrei): Preserve colors!\nRUN cd build/DynSLAM && make -j$(nproc)\n\n"
}