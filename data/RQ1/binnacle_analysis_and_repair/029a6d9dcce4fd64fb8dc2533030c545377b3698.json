{
  "startTime": 1674234779898,
  "endTime": 1674234780349,
  "originalSmells": [
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 79,
        "lineEnd": 81,
        "columnStart": 7,
        "columnEnd": 27
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 82,
        "lineEnd": 84,
        "columnStart": 7,
        "columnEnd": 27
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 85,
        "lineEnd": 87,
        "columnStart": 7,
        "columnEnd": 27
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM alpine\nMAINTAINER Marios Andreopoulos <marios@landoop.com>\n# Part of the multistage build that we pushed back due to narrow support yet.\n#COPY --from=compile-lkd /opt /opt\n\n# Update, install tooling and some basic setup\nRUN apk add --no-cache \\\n        bash \\\n        bash-completion \\\n        bzip2 \\\n        coreutils \\\n        curl \\\n        dumb-init \\\n        gettext \\\n        gzip \\\n        jq \\\n        libstdc++ \\\n        openjdk8-jre-base \\\n        openssl \\\n        sqlite \\\n        supervisor \\\n        tar \\\n        wget \\\n    && echo \"progress = dot:giga\" | tee /etc/wgetrc \\\n    && mkdir -p /opt \\\n    && mkdir /extra-connect-jars /connectors \\\n    && mkdir /etc/supervisord.d /etc/supervisord.templates.d\n\nSHELL [\"/bin/bash\", \"-c\"]\nWORKDIR /\n\n# Tne next 3 lines are part of the single stage build.\nARG FDD_LKD_VERSION=1.0.1\nARG FDD_LKD_URL=\"https://archive.landoop.com/lkd/releases/LKD-${FDD_LKD_VERSION}.tar.gz\"\nRUN wget \"$FDD_LKD_URL\" -O /lkd.tgz \\\n    && tar -xzf /lkd.tgz -C /opt \\\n    && rm -f /lkd.tgz\n\n# Install external tooling\n# checkport: checks for ports that are already in use, useful when we run with\n#            '--net=host so we have an easy way to detect if our ports are free\n# quickcert: a small tool we use to create a CA and key-cert pairs so we can easily\n#            setup SSL on the brokers with autogenerated keys and certs\n# glibc    : alpine linux has an embedded libc which misses some functions that are\n#            needed by some apps (e.g jvm's rocksdb jni â€” HDFS connector, Lenses, etc),\n#            so we add glibc to make them work\n#            https://github.com/sgerrand/alpine-pkg-glibc\n# caddy    : an excellent web server we use to serve fast-data-dev UI, proxy various REST\n#            endpoints, etc\n#            https://github.com/mholt/caddy\nARG CHECKPORT_URL=\"https://gitlab.com/andmarios/checkport/uploads/3903dcaeae16cd2d6156213d22f23509/checkport\"\nARG QUICKCERT_URL=\"https://github.com/andmarios/quickcert/releases/download/1.0/quickcert-1.0-linux-amd64-alpine\"\nARG GLIBC_INST_VERSION=\"2.27-r0\"\nARG CADDY_URL=https://github.com/mholt/caddy/releases/download/v0.10.10/caddy_v0.10.10_linux_amd64.tar.gz\nRUN wget \"$CHECKPORT_URL\" -O /usr/local/bin/checkport \\\n    && wget \"$QUICKCERT_URL\" -O /usr/local/bin/quickcert \\\n    && chmod 0755 /usr/local/bin/quickcert /usr/local/bin/checkport \\\n    && wget https://github.com/sgerrand/alpine-pkg-glibc/releases/download/${GLIBC_INST_VERSION}/glibc-${GLIBC_INST_VERSION}.apk \\\n    && wget https://github.com/sgerrand/alpine-pkg-glibc/releases/download/${GLIBC_INST_VERSION}/glibc-bin-${GLIBC_INST_VERSION}.apk \\\n    && wget https://github.com/sgerrand/alpine-pkg-glibc/releases/download/${GLIBC_INST_VERSION}/glibc-i18n-${GLIBC_INST_VERSION}.apk \\\n    && apk add --no-cache --allow-untrusted glibc-${GLIBC_INST_VERSION}.apk glibc-bin-${GLIBC_INST_VERSION}.apk glibc-i18n-${GLIBC_INST_VERSION}.apk \\\n    && rm -f glibc-${GLIBC_INST_VERSION}.apk glibc-bin-${GLIBC_INST_VERSION}.apk glibc-i18n-${GLIBC_INST_VERSION}.apk \\\n    && wget \"$CADDY_URL\" -O /caddy.tgz \\\n    && mkdir -p /opt/caddy \\\n    && tar xzf /caddy.tgz -C /opt/caddy \\\n    && rm -f /caddy.tgz\n\nCOPY /filesystem /\nRUN chmod +x /usr/local/bin/{smoke-tests,logs-to-kafka,nullsink}.sh \\\n             /usr/local/share/landoop/sample-data/*.sh\n\n# Create system symlinks to Kafka binaries\nRUN bash -c 'for i in $(find /opt/landoop/kafka/bin /opt/landoop/tools/bin -maxdepth 1 -type f); do ln -s $i /usr/local/bin/$(echo $i | sed -e \"s>.*/>>\"); done'\n\n# Setup Kafka Topics UI, Schema Registry UI, Kafka Connect UI\nRUN mkdir -p \\\n      /var/www/kafka-topics-ui \\\n      /var/www/schema-registry-ui \\\n      /var/www/kafka-connect-ui \\\n    && tar -xf /opt/landoop/tools/share/kafka-topics-ui/kafka-topics-ui.tar.gz \\\n           -C /var/www/kafka-topics-ui \\\n           --exclude=env.js \\\n    && tar -xf /opt/landoop/tools/share/schema-registry-ui/schema-registry-ui.tar.gz \\\n           -C /var/www/schema-registry-ui \\\n           --exclude=env.js \\\n    && tar -xf /opt/landoop/tools/share/kafka-connect-ui/kafka-connect-ui.tar.gz \\\n           -C /var/www/kafka-connect-ui \\\n           --exclude=env.js && rm /opt/landoop/tools/share/kafka-topics-ui/kafka-topics-ui.tar.gz\n\nRUN ln -s /var/log /var/www/logs\n\n# Add executables, settings and configuration\nADD setup-and-run.sh /usr/local/bin/\nRUN chmod +x /usr/local/bin/setup-and-run.sh \\\n    && ln -s /usr/local/share/landoop/etc/bashrc /root/.bashrc\n\nVOLUME [\"/data\"]\n\nARG BUILD_BRANCH\nARG BUILD_COMMIT\nARG BUILD_TIME\nARG DOCKER_REPO=local\nRUN echo \"BUILD_BRANCH=${BUILD_BRANCH}\"       | tee /build.info \\\n    && echo \"BUILD_COMMIT=${BUILD_COMMIT}\"    | tee -a /build.info \\\n    && echo \"BUILD_TIME=${BUILD_TIME}\"        | tee -a /build.info \\\n    && echo \"DOCKER_REPO=${DOCKER_REPO}\"      | tee -a /build.info \\\n    && sed -e 's/^/FDD_/' /opt/landoop/build.info | tee -a /build.info\n\n\nEXPOSE 2181 3030 3031 8081 8082 8083 9092\nENTRYPOINT [\"/usr/bin/dumb-init\", \"--\"]\nCMD [\"/usr/local/bin/setup-and-run.sh\"]\n"
}