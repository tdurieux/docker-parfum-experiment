{
  "startTime": 1674241322496,
  "endTime": 1674241322935,
  "originalSmells": [
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 31,
        "lineEnd": 31,
        "columnStart": 4,
        "columnEnd": 29
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 127,
        "lineEnd": 127,
        "columnStart": 4,
        "columnEnd": 99
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 144,
        "lineEnd": 144,
        "columnStart": 4,
        "columnEnd": 68
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 147,
        "lineEnd": 147,
        "columnStart": 4,
        "columnEnd": 34
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 127,
        "lineEnd": 127,
        "columnStart": 4,
        "columnEnd": 99
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 144,
        "lineEnd": 144,
        "columnStart": 4,
        "columnEnd": 68
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 147,
        "lineEnd": 147,
        "columnStart": 4,
        "columnEnd": 34
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 122,
        "lineEnd": 126,
        "columnStart": 22,
        "columnEnd": 30
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 127,
        "lineEnd": 127,
        "columnStart": 4,
        "columnEnd": 99
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 144,
        "lineEnd": 144,
        "columnStart": 4,
        "columnEnd": 68
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 147,
        "lineEnd": 147,
        "columnStart": 4,
        "columnEnd": 34
      }
    }
  ],
  "repairedSmells": [
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 127,
        "lineEnd": 127,
        "columnStart": 4,
        "columnEnd": 123
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 144,
        "lineEnd": 144,
        "columnStart": 4,
        "columnEnd": 92
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 147,
        "lineEnd": 147,
        "columnStart": 4,
        "columnEnd": 58
      }
    }
  ],
  "repairedDockerfile": "FROM nvidia/cuda:8.0-cudnn6-devel-ubuntu16.04\n\nMAINTAINER Jnaneshwar Das <jnaneshwar.das@gmail.com> / Matt Schmittle <schmttle@udel.edu> / Abhijeet Singh <abhsingh@seas.upenn.edu>\n\nRUN apt-get update && apt-get -y upgrade && apt-get install -y --no-install-recommends \\\n        apt-utils \\\n        git \\\n\tbuild-essential \\\n        curl \\\n        geographiclib-tools \\\n        libcurl3-dev \\\n        libfreetype6-dev \\\n        libpng12-dev \\\n        libzmq3-dev \\\n        pkg-config \\\n        python-dev \\\n        rsync \\\n        software-properties-common \\\n        unzip \\\n        zip \\\n        zlib1g-dev \\\n        openjdk-8-jdk \\\n        openjdk-8-jre-headless \\\n        uwsgi \\\n        uwsgi-src \\\n        uwsgi-plugin-python3 \\\n        python-pip \\\n        && \\\n    apt-get clean && \\\n    rm -rf /var/lib/apt/lists/*\n\nRUN pip install --no-cache-dir --upgrade pip\nRUN mkdir ros-setups\nCOPY ros-setups ros-setups/\nRUN ros-setups/ubuntu-16/setup-ros.sh\nRUN ros-setups/ubuntu-16/setup-mavlink-mavros.sh\nRUN ros-setups/ubuntu-16/setup-install.sh\nRUN ros-setups/ubuntu-16/setup-gym-gzweb-uavnav.sh\n#RUN git clone https://github.com/schmittlema/ros-setups.git && cd ros-setups/ubuntu-16 && ./setup-ros.sh && ./setup-mavlink-mavros.sh && ./setup-install.sh && ./setup-gym-gzweb-uavnav.sh\n\n#Turtlebot modules hack\n#RUN mkdir /lib/modules\n#COPY lib/. /lib/modules\n#RUN ls /lib/modules\n\nRUN pip --no-cache-dir install \\\n         --upgrade pip \\\n         --upgrade virtualenv\n\nRUN pip --no-cache-dir install \\\n        ipykernel \\\n        jupyter \\\n        matplotlib \\\n        numpy \\\n        scipy \\\n        sklearn \\\n        pandas \\\n        && \\\n    python -m ipykernel.kernelspec\n\n#Don't need Jupyter\n# Set up our notebook config.\n#COPY jupyter_notebook_config.py /root/.jupyter/\n\n# Jupyter has issues with being run directly:\n#   https://github.com/ipython/ipython/issues/7062\n# We just add a little wrapper script.\n#COPY run_jupyter.sh /\n\n# Set up Bazel.\n\n# Running bazel inside a `docker build` command causes trouble, cf:\n#   https://github.com/bazelbuild/bazel/issues/134\n# The easiest solution is to set up a bazelrc file forcing --batch.\nRUN echo \"startup --batch\" >>/etc/bazel.bazelrc\n# Similarly, we need to workaround sandboxing issues:\n#   https://github.com/bazelbuild/bazel/issues/418\nRUN echo \"build --spawn_strategy=standalone --genrule_strategy=standalone\" \\\n    >>/etc/bazel.bazelrc\n# Install the most recent bazel release.\nENV BAZEL_VERSION 0.5.0\nWORKDIR /\nRUN mkdir /bazel && \\\n    cd /bazel && \\\n    curl -H \"User-Agent: Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/57.0.2987.133 Safari/537.36\" -fSsL -O https://github.com/bazelbuild/bazel/releases/download/$BAZEL_VERSION/bazel-$BAZEL_VERSION-installer-linux-x86_64.sh && \\\n    curl -H \"User-Agent: Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/57.0.2987.133 Safari/537.36\" -fSsL -o /bazel/LICENSE.txt https://raw.githubusercontent.com/bazelbuild/bazel/master/LICENSE && \\\n    chmod +x bazel-*.sh && \\\n    ./bazel-$BAZEL_VERSION-installer-linux-x86_64.sh && \\\n    cd / && \\\n    rm -f /bazel/bazel-$BAZEL_VERSION-installer-linux-x86_64.sh\n\n# Download and build TensorFlow.\n\n#RUN git clone https://github.com/tensorflow/tensorflow.git && \\\n#    cd tensorflow && \\\n#    git checkout r1.2\n#WORKDIR /tensorflow\n\n# For Nivida\nLABEL com.nvidia.volumes.needed=\"nvidia_driver\"\nENV PATH /usr/local/nvidia/bin:/usr/local/cuda/bin:${PATH}\nENV LD_LIBRARY_PATH /usr/local/nvidia/lib:/usr/local/nvidia/lib64\n\n# Configure the build for our CUDA configuration.\nENV CI_BUILD_PYTHON python\nENV LD_LIBRARY_PATH /usr/local/cuda/extras/CUPTI/lib64:$LD_LIBRARY_PATH\nENV TF_NEED_CUDA 1\nENV TF_CUDA_COMPUTE_CAPABILITIES=3.0,3.5,5.2,6.0,6.1\n\n\nRUN cd ~/src/Firmware && \\\n    git remote add openuav-master https://github.com/Open-UAV/Firmware && \\\n    git pull openuav-master master\n\nRUN echo \"source /opt/ros/kinetic/setup.bash\" >> ~/.profile && \\\n    echo \"source /opt/ros/kinetic/setup.bash\" >> ~/.profile && \\\n    echo \"source ~/catkin_ws/devel/setup.bash\" >> ~/.profile && \\\n    echo \"export GAZEBO_PLUGIN_PATH=:/root/src/Firmware/Tools/sitl_gazebo/Build\" >> ~/.profile && \\\n    echo \"export GAZEBO_MODEL_PATH=:/root/src/Firmware/Tools/sitl_gazebo/models\" >> ~/.profile && \\\n    echo \"export GAZEBO_RESOURCE_PATH=:/root/src/Firmware/Tools/sitl_gazebo/media\" >> ~/.profile && \\\n    echo \"export PYTHONPATH=/root/catkin_ws/devel/lib/python2.7/dist-packages:/opt/ros/jade/lib/python2.7/dist-packages\" >> ~/.profile\nRUN echo \"installing ROS image packages\"\nRUN apt-get update && apt-get install -y --no-install-recommends \\\n        ros-kinetic-web-video-server \\\n        ros-kinetic-image-geometry \\\n        ros-kinetic-image-transport-plugins \\\n        ros-kinetic-image-proc && rm -rf /var/lib/apt/lists/*;\nRUN apt-get install --no-install-recommends -y ros-kinetic-rosbridge* ros-kinetic-opencv-apps ros-kinetic-tf2-geometry-msgs && rm -rf /var/lib/apt/lists/*;\n#RUN apt-get update && apt-get install -y ros-kinetic-turtlebot \\\n#\tros-kinetic-turtlebot-simulator \\\n#\tros-kinetic-turtlebot-apps\nRUN cd ~/catkin_ws/src && \\\n    git clone https://github.com/RIVeR-Lab/apriltags_ros.git\nRUN cd ~/catkin_ws && \\\n    catkin build\n\nADD install_geographiclib_datasets.sh /home/\nRUN cd /home && \\\n    chmod +x install_geographiclib_datasets.sh && \\\n    ./install_geographiclib_datasets.sh\n\nRUN sed -i '/force_color_prompt/s/^#//g' ~/.bashrc\n\n# for mavros global position in GPS to UTM conversions\nRUN apt-get -y --no-install-recommends install ros-kinetic-geodesy ros-kinetic-hector-gazebo && rm -rf /var/lib/apt/lists/*;\n\n### Django set up to expose various states from the simulation container\nRUN apt-get -y --no-install-recommends install python3-pip && rm -rf /var/lib/apt/lists/*;\nRUN pip3 --no-cache-dir install Django\nRUN mkdir /django\nRUN django-admin startproject DjangoProject /django\nRUN python3 /django/manage.py startapp query\nCOPY django_files/project_urls.py /django/DjangoProject/urls.py\nCOPY django_files/query_urls.py /django/query/urls.py\nCOPY django_files/query_view.py /django/query/views.py\nRUN sed -i '/ALLOWED_HOSTS/c\\ALLOWED_HOSTS = ['\\''*'\\'']' /django/DjangoProject/settings.py\n### Django set up to expose various states from the simulation container\n\n# Wetty - web tty\n#RUN mkdir /wetty\n#RUN npm install wetty\n\n# Adding user term and giving permissions\n#RUN useradd -d /simulation -m -s /bin/bash term\n#RUN echo 'term:term' | chpasswd\n#RUN chmod -R 777 /root/src && chmod -R 777 /root/catkin_ws && \\\n#    chmod -R 777 /simulation && \\\n#    chmod -R 777 /opt/ros\n#RUN find /root -type d -exec chmod 755 {} \\;\n#RUN sed -i 's/LOGIN_TIMEOUT\\t\\t60/LOGIN_TIMEOUT\\t\\t7000/g' /etc/login.defs\n\n# Ensure the setup.sh is in the last, so that we can build again quickly if setup changes\nADD setup.sh /home/\nRUN chmod +x /home/setup.sh\nRUN mkdir /home/term\nRUN cp ~/.profile /home/term/\nRUN cp ~/.profile /home/\nRUN pip uninstall -y tornado\n"
}