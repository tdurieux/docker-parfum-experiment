{
  "startTime": 1674244076832,
  "endTime": 1674244077498,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 104,
        "lineEnd": 104,
        "columnStart": 11,
        "columnEnd": 79
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 107,
        "lineEnd": 107,
        "columnStart": 11,
        "columnEnd": 139
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 113,
        "lineEnd": 113,
        "columnStart": 11,
        "columnEnd": 129
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 119,
        "lineEnd": 119,
        "columnStart": 11,
        "columnEnd": 118
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 190,
        "lineEnd": 190,
        "columnStart": 4,
        "columnEnd": 96
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# Generated by Neurodocker version 0.4.2-3-gf7055a1\n# Timestamp: 2019-06-11 01:55:15 UTC\n#\n# Thank you for using Neurodocker. If you discover any issues\n# or ways to improve this software, please submit an issue or\n# pull request on our GitHub repository:\n#\n#     https://github.com/kaczmarj/neurodocker\n\nFROM neurodebian:stretch\n\nARG DEBIAN_FRONTEND=\"noninteractive\"\n\nENV LANG=\"en_US.UTF-8\" \\\n    LC_ALL=\"en_US.UTF-8\" \\\n    ND_ENTRYPOINT=\"/neurodocker/startup.sh\"\nRUN export ND_ENTRYPOINT=\"/neurodocker/startup.sh\" \\\n    && apt-get update -qq \\\n    && apt-get install -y -q --no-install-recommends \\\n           apt-utils \\\n           bzip2 \\\n           ca-certificates \\\n           curl \\\n           locales \\\n           unzip \\\n    && apt-get clean \\\n    && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/* \\\n    && sed -i -e 's/# en_US.UTF-8 UTF-8/en_US.UTF-8 UTF-8/' /etc/locale.gen \\\n    && dpkg-reconfigure --frontend=noninteractive locales \\\n    && update-locale LANG=\"en_US.UTF-8\" \\\n    && chmod 777 /opt && chmod a+s /opt \\\n    && mkdir -p /neurodocker \\\n    && if [ ! -f \"$ND_ENTRYPOINT\" ]; then \\\n         echo '#!/usr/bin/env bash' >> \"$ND_ENTRYPOINT\" \\\n    &&   echo 'set -e' >> \"$ND_ENTRYPOINT\" \\\n    &&   echo 'if [ -n \"$1\" ]; then \"$@\"; else /usr/bin/env bash; fi' >> \"$ND_ENTRYPOINT\"; \\\n    fi \\\n    && chmod -R 777 /neurodocker && chmod a+s /neurodocker\n\nENTRYPOINT [\"/neurodocker/startup.sh\"]\n\nRUN apt-get update -qq \\\n    && apt-get install -y -q --no-install-recommends \\\n           graphviz \\\n           tree \\\n           git-annex-standalone \\\n           vim \\\n           emacs-nox \\\n           nano \\\n           less \\\n           ncdu \\\n           tig \\\n           sed \\\n           build-essential \\\n           libsm-dev \\\n           libx11-dev \\\n           libxt-dev \\\n           libxext-dev \\\n           libglu1-mesa \\\n    && apt-get clean \\\n    && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*\n\nRUN ln -s /usr/lib/x86_64-linux-gnu /usr/lib64\n\nENV CONDA_DIR=\"/opt/miniconda-latest\" \\\n    PATH=\"/opt/miniconda-latest/bin:$PATH\"\nRUN export PATH=\"/opt/miniconda-latest/bin:$PATH\" \\\n    && echo \"Downloading Miniconda installer ...\" \\\n    && conda_installer=\"/tmp/miniconda.sh\" \\\n    && curl -fsSL --retry 5 -o \"$conda_installer\" https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh \\\n    && bash \"$conda_installer\" -b -p /opt/miniconda-latest \\\n    && rm -f \"$conda_installer\" \\\n    && conda update -yq -nbase conda \\\n    && conda config --system --prepend channels conda-forge \\\n    && conda config --system --set auto_update_conda false \\\n    && conda config --system --set show_channel_urls true \\\n    && sync && conda clean -tipsy && sync \\\n    && conda create -y -q --name mb \\\n    && conda install -y -q --name mb \\\n           'python=3.6' \\\n           'pip' \\\n           'jupyter' \\\n           'cmake' \\\n           'mesalib' \\\n           'vtk=8.2' \\\n           'pandas' \\\n           'matplotlib' \\\n           'colormath' \\\n           'nipype>=1.1.4' \\\n           'nilearn' \\\n           'tbb-devel' \\\n           'nose' \\\n    && sync && conda clean -tipsy && sync \\\n    && bash -c \"source activate mb \\\n    &&   pip install --no-cache-dir  \\\n             'datalad[full]' \\\n             'duecredit'\" \\\n    && rm -rf ~/.cache/pip/* \\\n    && sync \\\n    && sed -i '$isource activate mb' $ND_ENTRYPOINT\n\nWORKDIR /opt\n\nRUN mkdir -p /opt/data && cd /opt/data && \\\n           curl -f -sSL https://osf.io/download/rh9km/?revision=2 -o templates.zip && \\\n           unzip templates.zip && \\\n           rm -f /opt/data/templates.zip && \\\n           curl -f -sSL https://files.osf.io/v1/resources/hvc52/providers/osfstorage/57c1a8f06c613b01f98d68a9/?zip= -o OASIS-TRT-20_brains.zip && \\\n           mkdir OASIS-TRT-20_brains && \\\n           cd OASIS-TRT-20_brains && \\\n           unzip ../OASIS-TRT-20_brains.zip && \\\n           cd .. && \\\n           rm OASIS-TRT-20_brains.zip && \\\n           curl -f -sSL https://files.osf.io/v1/resources/zevma/providers/osfstorage/5783dfcab83f6901f963735c/?zip= -o cmalabels.zip && \\\n           mkdir OASIS-TRT-20_DKT31_CMA_labels_v2 && \\\n           cd OASIS-TRT-20_DKT31_CMA_labels_v2 && \\\n           unzip ../cmalabels.zip && \\\n           cd .. && \\\n           rm cmalabels.zip && \\\n           curl -f -sSL https://osf.io/download/d2cmy/ -o OASIS-TRT-20_jointfusion_DKT31_CMA_labels_in_OASIS-30_v2.nii.gz && \\\n           rm -rf __MACOSX\n\nRUN bash -c 'source /opt/miniconda-latest/etc/profile.d/conda.sh && \\\n               conda activate mb && \\\n               git clone https://github.com/nipy/mindboggle.git && \\\n               cd /opt/mindboggle && \\\n               python setup.py install && \\\n               mkdir /opt/vtk_cpp_tools && \\\n               cd /opt/vtk_cpp_tools && \\\n               cmake /opt/mindboggle/vtk_cpp_tools && \\\n               make'\n\nENV vtk_cpp_tools=\"/opt/vtk_cpp_tools\"\n\nRUN bash -c 'source /opt/miniconda-latest/etc/profile.d/conda.sh && \\\n               conda activate mb && \\\n               conda install -y flask && \\\n               git clone https://github.com/akeshavan/roygbiv && \\\n               cd /opt/roygbiv && \\\n               git checkout fbbf31c29952d0ea22ed05d98e0a5a7e7d0827f9 && \\\n               python setup.py install && \\\n               cd /opt && \\\n               rm -rf /opt/roygbiv'\n\nRUN mkdir -p /.jupyter && echo c.NotebookApp.ip = \\\"0.0.0.0\\\" > /.jupyter/jupyter_notebook_config.py\n\nENV ANTSPATH=\"/opt/ants-b43df4bfc8/bin\" \\\n    PATH=\"/opt/ants-b43df4bfc8/bin:$PATH\" \\\n    LD_LIBRARY_PATH=\"/opt/ants-b43df4bfc8/lib:$LD_LIBRARY_PATH\"\nRUN apt-get update -qq \\\n    && apt-get install -y -q --no-install-recommends \\\n           cmake \\\n           g++ \\\n           gcc \\\n           git \\\n           make \\\n           zlib1g-dev \\\n    && apt-get clean \\\n    && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/* \\\n    && mkdir -p /tmp/ants/build \\\n    && git clone https://github.com/ANTsX/ANTs.git /tmp/ants/source \\\n    && cd /tmp/ants/source \\\n    && git fetch --tags \\\n    && git checkout b43df4bfc8 \\\n    && cd /tmp/ants/build \\\n    && cmake -DBUILD_SHARED_LIBS=ON /tmp/ants/source \\\n    && make -j 4 \\\n    && mkdir -p /opt/ants-b43df4bfc8 \\\n    && mv bin lib /opt/ants-b43df4bfc8/ \\\n    && mv /tmp/ants/source/Scripts/* /opt/ants-b43df4bfc8/bin \\\n    && rm -rf /tmp/ants\n\nENV FREESURFER_HOME=\"/opt/freesurfer-6.0.0-min\" \\\n    PATH=\"/opt/freesurfer-6.0.0-min/bin:$PATH\"\nRUN apt-get update -qq \\\n    && apt-get install -y -q --no-install-recommends \\\n           bc \\\n           libgomp1 \\\n           libxmu6 \\\n           libxt6 \\\n           perl \\\n           tcsh \\\n    && apt-get clean \\\n    && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/* \\\n    && echo \"Downloading FreeSurfer ...\" \\\n    && mkdir -p /opt/freesurfer-6.0.0-min \\\n    && curl -fsSL --retry 5 https://dl.dropbox.com/s/nnzcfttc41qvt31/recon-all-freesurfer6-3.min.tgz \\\n    | tar -xz -C /opt/freesurfer-6.0.0-min --strip-components 1 \\\n    && sed -i '$isource \"/opt/freesurfer-6.0.0-min/SetUpFreeSurfer.sh\"' \"$ND_ENTRYPOINT\"\n\nRUN curl -f -sSL https://osf.io/download/n3ud2/?revision=1 -o /opt/freesurfer-6.0.0-min/license.txt\n\nRUN echo '{ \\\n    \\n  \"pkg_manager\": \"apt\", \\\n    \\n  \"instructions\": [ \\\n    \\n    [ \\\n    \\n      \"base\", \\\n    \\n      \"neurodebian:stretch\" \\\n    \\n    ], \\\n    \\n    [ \\\n    \\n      \"install\", \\\n    \\n      [ \\\n    \\n        \"graphviz\", \\\n    \\n        \"tree\", \\\n    \\n        \"git-annex-standalone\", \\\n    \\n        \"vim\", \\\n    \\n        \"emacs-nox\", \\\n    \\n        \"nano\", \\\n    \\n        \"less\", \\\n    \\n        \"ncdu\", \\\n    \\n        \"tig\", \\\n    \\n        \"sed\", \\\n    \\n        \"build-essential\", \\\n    \\n        \"libsm-dev\", \\\n    \\n        \"libx11-dev\", \\\n    \\n        \"libxt-dev\", \\\n    \\n        \"libxext-dev\", \\\n    \\n        \"libglu1-mesa\" \\\n    \\n      ] \\\n    \\n    ], \\\n    \\n    [ \\\n    \\n      \"run\", \\\n    \\n      \"ln -s /usr/lib/x86_64-linux-gnu /usr/lib64\" \\\n    \\n    ], \\\n    \\n    [ \\\n    \\n      \"miniconda\", \\\n    \\n      { \\\n    \\n        \"conda_install\": [ \\\n    \\n          \"python=3.6\", \\\n    \\n          \"pip\", \\\n    \\n          \"jupyter\", \\\n    \\n          \"cmake\", \\\n    \\n          \"mesalib\", \\\n    \\n          \"vtk=8.2\", \\\n    \\n          \"pandas\", \\\n    \\n          \"matplotlib\", \\\n    \\n          \"colormath\", \\\n    \\n          \"nipype>=1.1.4\", \\\n    \\n          \"nilearn\", \\\n    \\n          \"tbb-devel\", \\\n    \\n          \"nose\" \\\n    \\n        ], \\\n    \\n        \"pip_install\": [ \\\n    \\n          \"datalad[full]\", \\\n    \\n          \"duecredit\" \\\n    \\n        ], \\\n    \\n        \"create_env\": \"mb\", \\\n    \\n        \"activate\": true \\\n    \\n      } \\\n    \\n    ], \\\n    \\n    [ \\\n    \\n      \"workdir\", \\\n    \\n      \"/opt\" \\\n    \\n    ], \\\n    \\n    [ \\\n    \\n      \"run\", \\\n    \\n      \"mkdir -p /opt/data && cd /opt/data && \\\\\\\\n    curl -sSL https://osf.io/download/rh9km/?revision=2 -o templates.zip && \\\\\\\\n    unzip templates.zip && \\\\\\\\n    rm -f /opt/data/templates.zip && \\\\\\\\n    curl -sSL https://files.osf.io/v1/resources/hvc52/providers/osfstorage/57c1a8f06c613b01f98d68a9/?zip= -o OASIS-TRT-20_brains.zip && \\\\\\\\n    mkdir OASIS-TRT-20_brains && \\\\\\\\n    cd OASIS-TRT-20_brains && \\\\\\\\n    unzip ../OASIS-TRT-20_brains.zip && \\\\\\\\n    cd .. && \\\\\\\\n    rm OASIS-TRT-20_brains.zip && \\\\\\\\n    curl -sSL https://files.osf.io/v1/resources/zevma/providers/osfstorage/5783dfcab83f6901f963735c/?zip= -o cmalabels.zip && \\\\\\\\n    mkdir OASIS-TRT-20_DKT31_CMA_labels_v2 && \\\\\\\\n    cd OASIS-TRT-20_DKT31_CMA_labels_v2 && \\\\\\\\n    unzip ../cmalabels.zip && \\\\\\\\n    cd .. && \\\\\\\\n    rm cmalabels.zip && \\\\\\\\n    curl -sSL https://osf.io/download/d2cmy/ -o OASIS-TRT-20_jointfusion_DKT31_CMA_labels_in_OASIS-30_v2.nii.gz && \\\\\\\\n    rm -rf __MACOSX\" \\\n    \\n    ], \\\n    \\n    [ \\\n    \\n      \"run_bash\", \\\n    \\n      \"source /opt/miniconda-latest/etc/profile.d/conda.sh && \\\\\\\\n        conda activate mb && \\\\\\\\n        git clone https://github.com/nipy/mindboggle.git && \\\\\\\\n        cd /opt/mindboggle && \\\\\\\\n        python setup.py install && \\\\\\\\n        mkdir /opt/vtk_cpp_tools && \\\\\\\\n        cd /opt/vtk_cpp_tools && \\\\\\\\n        cmake /opt/mindboggle/vtk_cpp_tools && \\\\\\\\n        make\" \\\n    \\n    ], \\\n    \\n    [ \\\n    \\n      \"env\", \\\n    \\n      { \\\n    \\n        \"vtk_cpp_tools\": \"/opt/vtk_cpp_tools\" \\\n    \\n      } \\\n    \\n    ], \\\n    \\n    [ \\\n    \\n      \"run_bash\", \\\n    \\n      \"source /opt/miniconda-latest/etc/profile.d/conda.sh && \\\\\\\\n        conda activate mb && \\\\\\\\n        conda install -y flask && \\\\\\\\n        git clone https://github.com/akeshavan/roygbiv && \\\\\\\\n        cd /opt/roygbiv && \\\\\\\\n        git checkout fbbf31c29952d0ea22ed05d98e0a5a7e7d0827f9 && \\\\\\\\n        python setup.py install && \\\\\\\\n        cd /opt && \\\\\\\\n        rm -rf /opt/roygbiv\" \\\n    \\n    ], \\\n    \\n    [ \\\n    \\n      \"run\", \\\n    \\n      \"mkdir -p /.jupyter && echo c.NotebookApp.ip = \\\\\\\"0.0.0.0\\\\\\\" > /.jupyter/jupyter_notebook_config.py\" \\\n    \\n    ], \\\n    \\n    [ \\\n    \\n      \"ants\", \\\n    \\n      { \\\n    \\n        \"version\": \"b43df4bfc8\", \\\n    \\n        \"method\": \"source\", \\\n    \\n        \"cmake_opts\": \"-DBUILD_SHARED_LIBS=ON\", \\\n    \\n        \"make_opts\": \"-j 4\" \\\n    \\n      } \\\n    \\n    ], \\\n    \\n    [ \\\n    \\n      \"freesurfer\", \\\n    \\n      { \\\n    \\n        \"version\": \"6.0.0-min\" \\\n    \\n      } \\\n    \\n    ], \\\n    \\n    [ \\\n    \\n      \"run\", \\\n    \\n      \"curl -sSL https://osf.io/download/n3ud2/?revision=1 -o /opt/freesurfer-6.0.0-min/license.txt\" \\\n    \\n    ] \\\n    \\n  ] \\\n    \\n}' > /neurodocker/neurodocker_specs.json\n"
}