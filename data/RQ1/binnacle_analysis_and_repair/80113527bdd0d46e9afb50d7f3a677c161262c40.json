{
  "startTime": 1674239230009,
  "endTime": 1674239230869,
  "originalSmells": [
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 204,
        "lineEnd": 204,
        "columnStart": 4,
        "columnEnd": 42
      }
    },
    {
      "rule": "sha256sumEchoOneSpaces",
      "position": {
        "lineStart": 55,
        "lineEnd": 55,
        "columnStart": 4,
        "columnEnd": 58
      }
    },
    {
      "rule": "sha256sumEchoOneSpaces",
      "position": {
        "lineStart": 208,
        "lineEnd": 208,
        "columnStart": 4,
        "columnEnd": 98
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 5,
        "lineEnd": 30,
        "columnStart": 22,
        "columnEnd": 21
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM ubuntu:16.04\n\nARG NPROC=4\nARG BUILD_TYPE=Release\n\nRUN apt-get update && apt-get install --no-install-recommends -y \\\n        build-essential \\\n        gfortran \\\n        wget \\\n        git \\\n        cmake \\\n        lcov \\\n        valgrind \\\n        cppcheck \\\n        clang-format-3.7 \\\n        libssl-dev \\\n        libpng-dev \\\n        libfreetype6-dev \\\n        libxft-dev \\\n        libsqlite3-dev \\\n        libbz2-dev \\\n        libatlas-base-dev \\\n        zlib1g-dev \\\n        libopenmpi-dev \\\n        libhdf5-dev \\\n        python3.5-dev \\\n        python3-tk \\\n        pandoc \\\n        npm \\\n        nodejs \\\n        nodejs-legacy \\\n        && \\\n    apt-get clean && \\\n    rm -rf /var/lib/apt/lists/*\n\n# Set up time zone\nRUN echo \"America/New_York\" > /etc/timezone && \\\n    dpkg-reconfigure --frontend noninteractive tzdata\n\nENV PREFIX=/scratch\nRUN mkdir -p ${PREFIX} && \\\n    cd ${PREFIX} && \\\n    mkdir archive && \\\n    mkdir source && \\\n    mkdir build && \\\n    mkdir install\n\n# install boost\nRUN export BOOST_URL=http://sourceforge.net/projects/boost/files/boost/1.63.0/boost_1_63_0.tar.bz2 && \\\n    export BOOST_SHA256=beae2529f759f6b3bf3f4969a19c2e9d6f0c503edcb2de4a61d1428519fcb3b0 && \\\n    export BOOST_ARCHIVE=${PREFIX}/archive/boost_1_63_0.tar.bz2 && \\\n    export BOOST_SOURCE_DIR=${PREFIX}/source/boost/1.63.0 && \\\n    export BOOST_BUILD_DIR=${PREFIX}/build/boost/1.63.0 && \\\n    export BOOST_INSTALL_DIR=/opt/boost/1.63.0 && \\\n    wget --quiet ${BOOST_URL} --output-document=${BOOST_ARCHIVE} && \\\n    echo \"${BOOST_SHA256}  ${BOOST_ARCHIVE}\" | sha256sum -c && \\\n    mkdir -p ${BOOST_SOURCE_DIR} && \\\n    tar -xf ${BOOST_ARCHIVE} -C ${BOOST_SOURCE_DIR} --strip-components=1 && \\\n    cd ${BOOST_SOURCE_DIR} && \\\n    ./bootstrap.sh \\\n        --prefix=${BOOST_INSTALL_DIR} \\\n        --with-python=python3.5 \\\n        && \\\n    echo \"using mpi ;\" >> project-config.jam && \\\n    ./b2 install -j${NPROC} \\\n        link=shared \\\n        variant=release \\\n        --build-dir=${BOOST_BUILD_DIR} \\\n        && \\\n    rm -rf ${BOOST_ARCHIVE} && \\\n    rm -rf ${BOOST_BUILD_DIR} && \\\n    rm -rf ${BOOST_SOURCE_DIR}\n\nENV BOOST_DIR=/opt/boost/1.63.0\n#ENV LD_LIBRARY_PATH=${BOOST_DIR}/lib:${LD_LIBRARY_PATH}\n\n# install TRILINOS\nRUN export TRILINOS_VERSION=12.10.1 && \\\n    export TRILINOS_URL=https://github.com/trilinos/Trilinos/archive/trilinos-release-12-10-1.tar.gz && \\\n    export TRILINOS_ARCHIVE=${PREFIX}/archive/trilinos-${TRILINOS_VERSION}.tar.xz && \\\n    export TRILINOS_SOURCE_DIR=${PREFIX}/source/trilinos/${TRILINOS_VERSION} && \\\n    export TRILINOS_BUILD_DIR=${PREFIX}/build/trilinos/${TRILINOS_VERSION} && \\\n    export TRILINOS_INSTALL_DIR=/opt/trilinos/${TRILINOS_VERSION} && \\\n    wget --quiet ${TRILINOS_URL} --output-document=${TRILINOS_ARCHIVE} && \\\n    mkdir -p ${TRILINOS_SOURCE_DIR} && \\\n    tar -xf ${TRILINOS_ARCHIVE} -C ${TRILINOS_SOURCE_DIR} --strip-components=1 && \\\n    mkdir -p ${TRILINOS_BUILD_DIR} && \\\n    cd ${TRILINOS_BUILD_DIR} && \\\n    cmake \\\n        -D CMAKE_INSTALL_PREFIX:PATH=${TRILINOS_INSTALL_DIR} \\\n        -D CMAKE_BUILD_TYPE:SRTING=RELEASE \\\n        -D BUILD_SHARED_LIBS:BOOL=ON \\\n        -D CMAKE_VERBOSE_MAKEFILE:BOOL=OFF \\\n        -D TPL_ENABLE_MPI:BOOL=ON \\\n        -D MPI_BASE_DIR:PATH=${MPI_DIR} \\\n        -D TPL_ENABLE_BLAS:BOOL=ON \\\n        -D TPL_ENABLE_LAPACK:BOOL=ON \\\n        -D Trilinos_ASSERT_MISSING_PACKAGES:BOOL=OFF \\\n        -D Trilinos_ENABLE_ALL_OPTIONAL_PACKAGES:BOOL=OFF \\\n        -D Trilinos_ENABLE_Amesos:BOOL=ON \\\n        -D Trilinos_ENABLE_AztecOO:BOOL=ON \\\n        -D Trilinos_ENABLE_Epetra:BOOL=ON \\\n        -D Trilinos_ENABLE_EpetraExt:BOOL=ON \\\n        -D Trilinos_ENABLE_Ifpack:BOOL=ON \\\n        -D Trilinos_ENABLE_ML:BOOL=ON \\\n        -D Trilinos_ENABLE_MueLu:BOOL=ON \\\n        -D Trilinos_ENABLE_Sacado:BOOL=ON \\\n        -D Trilinos_ENABLE_Teuchos:BOOL=ON \\\n        ${TRILINOS_SOURCE_DIR} && \\\n    make -j${NPROC} install && \\\n    rm -rf ${TRILINOS_ARCHIVE} && \\\n    rm -rf ${TRILINOS_BUILD_DIR} && \\\n    rm -rf ${TRILINOS_SOURCE_DIR}\n\nENV TRILINOS_DIR=/opt/trilinos/12.10.1\n\n# install p4est\nRUN export P4EST_VERSION=1.1 &&\\\n    export P4EST_URL=http://p4est.github.io/release/p4est-${P4EST_VERSION}.tar.gz && \\\n    export P4EST_ARCHIVE=${PREFIX}/archive/p4est-${P4EST_VERSION}.tar.gz && \\\n    export P4EST_SOURCE_DIR=${PREFIX}/source/p4est/${P4EST_VERSION} && \\\n    export P4EST_BUILD_DIR=${PREFIX}/build/p4est/${P4EST_VERSION} && \\\n    export P4EST_INSTALL_DIR=/opt/p4est/${P4EST_VERSION} && \\\n    mkdir -p ${P4EST_SOURCE_DIR} && \\\n    wget --quiet ${P4EST_URL} --output-document=${P4EST_ARCHIVE} && \\\n    tar -xf ${P4EST_ARCHIVE} -C ${P4EST_SOURCE_DIR} --strip-components=1 && \\\n    mkdir -p ${P4EST_BUILD_DIR} && \\\n    cd ${P4EST_BUILD_DIR} && \\\n    ${P4EST_SOURCE_DIR}/configure \\\n        --prefix=${P4EST_INSTALL_DIR} \\\n        --enable-mpi \\\n        --enable-shared \\\n        --disable-static \\\n        --without-blas \\\n        CC=mpicc \\\n        CFLAGS=\"-O2 -fPIC\" \\\n        CXX=mpicxx \\\n        F77=mpif77 \\\n        FC=mpifort \\\n    && \\\n    make -j${NPROC} install && \\\n    rm -rf ${P4EST_ARCHIVE} && \\ \n    rm -rf ${P4EST_BUILD_DIR} && \\\n    rm -rf ${P4EST_SOURCE_DIR}\n\nENV P4EST_DIR=/opt/p4est/1.1\n\n# install dealii\nRUN export DEAL_II_VERSION=8.5.1 && \\\n    export DEAL_II_URL=https://github.com/dealii/dealii/releases/download/v${DEAL_II_VERSION}/dealii-${DEAL_II_VERSION}.tar.gz && \\\n    export DEAL_II_SHA1=fe8e4748c1d9650487fb5145429a58e8509de276 && \\\n    export DEAL_II_ARCHIVE=${PREFIX}/archive/dealii-${DEAL_II_VERSION}.tar.gz && \\\n    export DEAL_II_SOURCE_DIR=${PREFIX}/source/dealii/${DEAL_II_VERSION} && \\\n    export DEAL_II_BUILD_DIR=${PREFIX}/build/dealii/${DEAL_II_VERSION} && \\\n    export DEAL_II_INSTALL_DIR=/opt/dealii/${DEAL_II_VERSION} && \\\n    wget --quiet ${DEAL_II_URL} --output-document=${DEAL_II_ARCHIVE} && \\\n    echo \"${DEAL_II_SHA1} ${DEAL_II_ARCHIVE}\" | sha1sum -c && \\\n    mkdir -p ${DEAL_II_SOURCE_DIR} && \\\n    tar -xf ${DEAL_II_ARCHIVE} -C ${DEAL_II_SOURCE_DIR} --strip-components=1 && \\\n    mkdir -p ${DEAL_II_BUILD_DIR} && \\\n    cd ${DEAL_II_BUILD_DIR} && \\\n    cmake \\\n        -D CMAKE_INSTALL_PREFIX=${DEAL_II_INSTALL_DIR} \\\n        -D CMAKE_BUILD_TYPE=${BUILD_TYPE} \\\n        -D DEAL_II_WITH_MPI=ON \\\n        -D DEAL_II_WITH_CXX11=ON \\\n        -D CMAKE_Fortran_COMPILER=mpifort \\\n        -D CMAKE_CXX_COMPILER=mpicxx \\\n        -D CMAKE_C_COMPILER=mpicc \\\n        -D BOOST_DIR=${BOOST_DIR} \\\n        -D P4EST_DIR=${P4EST_DIR} \\\n        -D TRILINOS_DIR=${TRILINOS_DIR} \\\n        ${DEAL_II_SOURCE_DIR} && \\\n    make -j${NPROC} install && \\\n    rm -rf ${DEAL_II_ARCHIVE} && \\\n    rm -rf ${DEAL_II_BUILD_DIR} && \\\n    rm -rf ${DEAL_II_SOURCE_DIR}\n\nENV DEAL_II_DIR=/opt/dealii/8.5.1\n\nENV LD_LIBRARY_PATH=${LAPACK_DIR}/lib:${LD_LIBRARY_PATH}\n\n# install python requirements using pip\nRUN wget https://bootstrap.pypa.io/get-pip.py && \\\n    python3.5 get-pip.py && \\\n    rm get-pip.py && \\\n    pip3.5 install -U pip --no-cache-dir && \\\n    pip3.5 install --no-cache-dir \\\n        numpy \\\n        scipy \\\n        matplotlib \\\n        cython \\\n        pypandoc \\\n        jupyter \\\n        ipyparallel \\\n        ipywidgets \\\n        mpi4py \\\n        h5py \\\n        sympy \\\n        coverage \\\n        autopep8 \\\n        docopt \\\n        jupyterhub \\\n        && \\\n    npm install -g configurable-http-proxy && rm -rf ~/.npm && npm cache clean --force;\n\n# install tini\nRUN wget --quiet https://github.com/krallin/tini/releases/download/v0.10.0/tini && \\\n    echo \"1361527f39190a7338a0b434bd8c88ff7233ce7b9a4876f3315c22fce7eca1b0  *tini\" | sha256sum -c - && \\\n    mv tini /usr/local/bin/tini && \\\n    chmod +x /usr/local/bin/tini\n"
}