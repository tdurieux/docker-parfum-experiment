{
  "startTime": 1674249539773,
  "endTime": 1674249539818,
  "originalSmells": [
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 13,
        "lineEnd": 13,
        "columnStart": 4,
        "columnEnd": 28
      }
    },
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 15,
        "lineEnd": 15,
        "columnStart": 4,
        "columnEnd": 15
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# Node only packaging for the application\n#   Requires a MongoDB connection string.\n#   Scale node app horizontally as needed and setup a front-load balancer\n#\n# Choices:\n# 1. Pass it using the DB_URI environmental variable. (uncomment line 20 and set the connection string)\n#\n# 2. Use Docker linking with alias = DB to link to a MongoDB Docker Container\n#    Sample: docker run <image> --link <dbContainer>:DB\n\nFROM bitnami/node:8.6.0-r1 as builder\nENV NODE_ENV=production\nWORKDIR /app\nRUN npm install -g grunt-cli && npm cache clean --force;\nADD package.json /app/\nRUN npm install && npm cache clean --force;\nADD . /app\nRUN grunt release\nRUN rm -rf public e2e.test api-invocation-samples docs test uploads\n\nFROM bitnami/node:8.6.0-r1-prod\nLABEL AUTHOR pjmolina.metadev.pro\nENV NODE_ENV=production\nRUN mkdir -p /app\nWORKDIR /app\nCOPY --from=builder /app .\nENV PORT=80\n#ENV DB_URI=mongodb://<host>:<port>/<dbName>\nEXPOSE 80\nCMD [\"npm\", \"start\"]\n"
}