{
  "startTime": 1674250818789,
  "endTime": 1674250819043,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 48,
        "lineEnd": 48,
        "columnStart": 9,
        "columnEnd": 36
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 54,
        "lineEnd": 54,
        "columnStart": 28,
        "columnEnd": 76
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 55,
        "lineEnd": 55,
        "columnStart": 7,
        "columnEnd": 67
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 65,
        "lineEnd": 65,
        "columnStart": 7,
        "columnEnd": 60
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM php:7.2-fpm\n\nLABEL maintainer=\"diego@passbolt.com\"\n\nARG PASSBOLT_VERSION=\"2.10.0\"\nARG PASSBOLT_URL=\"https://github.com/passbolt/passbolt_api/archive/v${PASSBOLT_VERSION}.tar.gz\"\nARG PASSBOLT_CURL_HEADERS=\"\"\n\nARG PHP_EXTENSIONS=\"gd \\\n      intl \\\n      pdo_mysql \\\n      opcache \\\n      xsl\"\n\nARG PECL_PASSBOLT_EXTENSIONS=\"gnupg \\\n      redis \\\n      mcrypt\"\n\nARG PASSBOLT_DEV_PACKAGES=\"libgpgme11-dev \\\n      libpng-dev \\\n      libjpeg62-turbo-dev \\\n      libicu-dev \\\n      libxslt1-dev \\\n      libmcrypt-dev \\\n      unzip\"\n\nARG PASSBOLT_BASE_PACKAGES=\"nginx \\\n         gnupg \\\n         libgpgme11 \\\n         libmcrypt4 \\\n         mysql-client \\\n         supervisor \\\n         cron\"\n\nENV PECL_BASE_URL=\"https://pecl.php.net/get\"\nENV PHP_EXT_DIR=\"/usr/src/php/ext\"\n\nWORKDIR /var/www/passbolt\nRUN apt-get update \\\n    && apt-get -y install --no-install-recommends \\\n      $PASSBOLT_DEV_PACKAGES \\\n      $PASSBOLT_BASE_PACKAGES \\\n    && mkdir /home/www-data \\\n    && chown -R www-data:www-data /home/www-data \\\n    && usermod -d /home/www-data www-data \\\n    && docker-php-source extract \\\n    && for i in $PECL_PASSBOLT_EXTENSIONS; do \\\n         mkdir $PHP_EXT_DIR/$i; \\\n         curl -f -sSL $PECL_BASE_URL/$i | tar zxf - -C $PHP_EXT_DIR/$i --strip-components 1; \\\n       done \\\n    && docker-php-ext-configure gd --with-jpeg-dir=/usr/include/ \\\n    && docker-php-ext-install -j4 $PHP_EXTENSIONS $PECL_PASSBOLT_EXTENSIONS \\\n    && docker-php-ext-enable $PHP_EXTENSIONS $PECL_PASSBOLT_EXTENSIONS \\\n    && docker-php-source delete \\\n    && EXPECTED_SIGNATURE=$( curl -f -s https://composer.github.io/installer.sig) \\\n    && curl -f -o composer-setup.php https://getcomposer.org/installer \\\n    && ACTUAL_SIGNATURE=$(php -r \"echo hash_file('SHA384', 'composer-setup.php');\") \\\n    && if [ \"$EXPECTED_SIGNATURE\" != \"$ACTUAL_SIGNATURE\" ]; then \\\n         >&2 echo 'ERROR: Invalid installer signature'; \\\n         rm composer-setup.php; \\\n         exit 1; \\\n       fi \\\n    && php composer-setup.php \\\n    && mv composer.phar /usr/local/bin/composer \\\n    && rm composer-setup.php \\\n    && curl -f -sSL -H \"$PASSBOLT_CURL_HEADERS\" \"$PASSBOLT_URL\" | tar zxf - -C . --strip-components 1 \\\n    && composer install -n --no-dev --optimize-autoloader \\\n    && chown -R www-data:www-data . \\\n    && chmod 775 $(find /var/www/passbolt/tmp -type d) \\\n    && chmod 664 $(find /var/www/passbolt/tmp -type f) \\\n    && chmod 775 $(find /var/www/passbolt/webroot/img/public -type d) \\\n    && chmod 664 $(find /var/www/passbolt/webroot/img/public -type f) \\\n    && rm /etc/nginx/sites-enabled/default \\\n    && apt-get purge -y --auto-remove $PASSBOLT_DEV_PACKAGES \\\n    && rm -rf /var/lib/apt/lists/* \\\n    && rm /usr/local/bin/composer \\\n    && echo 'php_flag[expose_php] = off' > /usr/local/etc/php-fpm.d/expose.conf \\\n    && sed -i 's/# server_tokens/server_tokens/' /etc/nginx/nginx.conf \\\n    && mv \"$PHP_INI_DIR/php.ini-production\" \"$PHP_INI_DIR/php.ini\"\n\nCOPY conf/passbolt.conf /etc/nginx/conf.d/default.conf\nCOPY conf/supervisor/*.conf /etc/supervisor/conf.d/\nCOPY bin/docker-entrypoint.sh /docker-entrypoint.sh\nCOPY scripts/wait-for.sh /usr/bin/wait-for.sh\n\nEXPOSE 80 443\n\nCMD [\"/docker-entrypoint.sh\"]\n"
}