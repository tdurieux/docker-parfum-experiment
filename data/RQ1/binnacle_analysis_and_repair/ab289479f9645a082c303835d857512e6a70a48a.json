{
  "startTime": 1674234347709,
  "endTime": 1674234348030,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 40,
        "lineEnd": 40,
        "columnStart": 4,
        "columnEnd": 58
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 41,
        "lineEnd": 41,
        "columnStart": 4,
        "columnEnd": 114
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 65,
        "lineEnd": 65,
        "columnStart": 14,
        "columnEnd": 68
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 68,
        "lineEnd": 68,
        "columnStart": 14,
        "columnEnd": 68
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 6,
        "lineEnd": 24,
        "columnStart": 4,
        "columnEnd": 9
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 43,
        "lineEnd": 43,
        "columnStart": 63,
        "columnEnd": 119
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 6,
        "lineEnd": 24,
        "columnStart": 4,
        "columnEnd": 9
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 43,
        "lineEnd": 43,
        "columnStart": 63,
        "columnEnd": 119
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "#Download base image ubuntu 16.04\n\nFROM ubuntu:16.04\n\n# Update Ubuntu Software repository\nRUN export DEBIAN_FRONTEND=noninteractive && apt-get update && \\\n    apt-get -y --no-install-recommends install \\\n    apt-transport-https \\\n    apt-utils \\\n    autoconf \\\n    curl \\\n    libcurl3 \\\n    g++ \\\n    gcc \\\n    git \\\n    lcov \\\n    libxml2-dev \\\n    locales \\\n    make \\\n    php7.0 \\\n    php7.0-dev \\\n    python-pip \\\n    re2c \\\n    unixodbc-dev \\\n    unzip && apt-get clean && rm -rf /var/lib/apt/lists/*;\n\nARG PHPSQLDIR=/REPO/msphpsql-dev\nENV TEST_PHP_SQL_SERVER sql\nENV TEST_PHP_SQL_UID sa\nENV TEST_PHP_SQL_PWD Password123\n\n# add locale iso-8859-1\nRUN sed -i 's/# en_US ISO-8859-1/en_US ISO-8859-1/g' /etc/locale.gen\nRUN locale-gen en_US\n\n# set locale to utf-8\nRUN locale-gen en_US.UTF-8\nENV LANG='en_US.UTF-8' LANGUAGE='en_US:en' LC_ALL='en_US.UTF-8'\n\n#install ODBC driver\t\nRUN curl -f https://packages.microsoft.com/keys/microsoft.asc | apt-key add -\nRUN curl -f https://packages.microsoft.com/config/ubuntu/16.04/prod.list > /etc/apt/sources.list.d/mssql-release.list\n\nRUN export DEBIAN_FRONTEND=noninteractive && apt-get update && ACCEPT_EULA=Y apt-get --no-install-recommends install -y msodbcsql17 mssql-tools && rm -rf /var/lib/apt/lists/*;\nENV PATH=\"/opt/mssql-tools/bin:${PATH}\"\t\n\n#install coveralls (upgrade both pip and requests first)\nRUN python -m pip install --upgrade pip\nRUN python -m pip install --upgrade requests\nRUN python -m pip install cpp-coveralls\n\n#Either Install git / download zip (One can see other strategies : https://ryanfb.github.io/etc/2015/07/29/git_strategies_for_docker.html )\n#One option is to get source from zip file of repository.\n#another option is to copy source to build directory on image\nRUN mkdir -p $PHPSQLDIR\nCOPY . $PHPSQLDIR\nWORKDIR $PHPSQLDIR/source/\n\nRUN chmod +x ./packagize.sh\nRUN /bin/bash -c \"./packagize.sh\"\n\nRUN echo \"extension = pdo_sqlsrv.so\" >> /etc/php/7.0/cli/conf.d/20-pdo_sqlsrv.ini\nRUN echo \"extension = sqlsrv.so\" >> `php --ini | grep \"Loaded Configuration\" | sed -e \"s|.*:\\s*||\"`\n\nWORKDIR $PHPSQLDIR/source/sqlsrv\nRUN phpize && ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" LDFLAGS=\"-lgcov\" CXXFLAGS=\"-O0 --coverage\" && make && make install\n\nWORKDIR $PHPSQLDIR/source/pdo_sqlsrv\nRUN phpize && ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" LDFLAGS=\"-lgcov\" CXXFLAGS=\"-O0 --coverage\" && make && make install\n\n# set name of sql server host to use\nWORKDIR $PHPSQLDIR/test/functional/pdo_sqlsrv\nRUN sed -i -e 's/TARGET_SERVER/sql/g' MsSetup.inc\nRUN sed -i -e 's/TARGET_DATABASE/msphpsql_pdosqlsrv/g' MsSetup.inc\nRUN sed -i -e 's/TARGET_USERNAME/'\"$TEST_PHP_SQL_UID\"'/g' MsSetup.inc\nRUN sed -i -e 's/TARGET_PASSWORD/'\"$TEST_PHP_SQL_PWD\"'/g' MsSetup.inc\n\nWORKDIR $PHPSQLDIR/test/functional/sqlsrv\nRUN sed -i -e 's/TARGET_SERVER/sql/g' MsSetup.inc\nRUN sed -i -e 's/TARGET_DATABASE/msphpsql_sqlsrv/g' MsSetup.inc\nRUN sed -i -e 's/TARGET_USERNAME/'\"$TEST_PHP_SQL_UID\"'/g' MsSetup.inc\nRUN sed -i -e 's/TARGET_PASSWORD/'\"$TEST_PHP_SQL_PWD\"'/g' MsSetup.inc\n\nWORKDIR $PHPSQLDIR\nRUN chmod +x ./entrypoint.sh\nCMD /bin/bash ./entrypoint.sh\n\nENV REPORT_EXIT_STATUS 1\nENV TEST_PHP_EXECUTABLE /usr/bin/php\n"
}