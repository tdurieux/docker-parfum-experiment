{
  "startTime": 1674243109602,
  "endTime": 1674243109698,
  "originalSmells": [
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 47,
        "lineEnd": 47,
        "columnStart": 4,
        "columnEnd": 26
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 8,
        "lineEnd": 8,
        "columnStart": 4,
        "columnEnd": 26
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 26,
        "lineEnd": 26,
        "columnStart": 4,
        "columnEnd": 40
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 51,
        "lineEnd": 51,
        "columnStart": 4,
        "columnEnd": 59
      }
    },
    {
      "rule": "apkAddUseNoCache",
      "position": {
        "lineStart": 2,
        "lineEnd": 7,
        "columnStart": 4,
        "columnEnd": 19
      }
    },
    {
      "rule": "apkAddUseNoCache",
      "position": {
        "lineStart": 15,
        "lineEnd": 23,
        "columnStart": 4,
        "columnEnd": 14
      }
    },
    {
      "rule": "apkAddUseNoCache",
      "position": {
        "lineStart": 33,
        "lineEnd": 45,
        "columnStart": 4,
        "columnEnd": 9
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM library/alpine:latest as twlight_base\n# Base dependencies.\nRUN apk add --no-cache --update \\\n    libjpeg-turbo \\\n    libxslt-dev \\\n    mariadb-dev \\\n    # Python, duh.\n    python py-pip; \\\n    pip install --no-cache-dir virtualenv\n\nFROM twlight_base as twlight_build\n# Copy pip requirements.\nCOPY requirements /requirements\n\n# Build dependencies.\nRUN apk add --no-cache \\\n    build-base \\\n    gcc \\\n    libffi-dev \\\n    libjpeg-turbo-dev \\\n    libxml2-dev \\\n    musl-dev \\\n    python-dev \\\n    zlib-dev; \\\n    virtualenv /venv ; \\\n    source /venv/bin/activate ; \\\n    pip install --no-cache-dir -r /requirements/wmf.txt\n\nFROM twlight_base\nCOPY --from=twlight_build /venv /venv\nENV PATH=\"${PATH}:/opt/pandoc-2.7.1/bin\" TWLIGHT_HOME=/app PYTHONUNBUFFERED=1 PYTHONPATH=\"/app:/usr/lib/python2.7\"\n\n# Runtime dependencies.\nRUN apk add --no-cache --update \\\n    # Refactoring shell code could remove this dependency\n    bash \\\n    gettext \\\n    git \\\n    # Not needed by the running app, but by the backup/restore shell scripts.\n    mariadb-client \\\n    # Node stuff for rtl support. This and subsequent node things\n    # should all be moved out of the running container\n    # since we just use it to generate a css file.\n    nodejs \\\n    npm \\\n    tar; \\\n    # CSS Janus is the thing actually used to generate the rtl css.\n    npm install cssjanus ; npm cache clean --force; \\\n    # Pandoc is used for rendering wikicode resource descriptions\n    # into html for display. We do need this on the live image.\n    wget https://github.com/jgm/pandoc/releases/download/2.7.1/pandoc-2.7.1-linux.tar.gz -P /tmp ; \\\n    tar -xf /tmp/pandoc-2.7.1-linux.tar.gz --directory /opt && rm /tmp/pandoc-2.7.1-linux.tar.gz\n\n# Utility scripts that run in the virtual environment.\nCOPY bin /app/bin/\n\n# Bash config\nCOPY conf/bashrc /root/.bashrc\n\n# i18n.\nCOPY locale /app/locale\n\nCOPY TWLight /app/TWLight\n\nWORKDIR $TWLIGHT_HOME\n\nCOPY manage.py /app/manage.py\n\n# Configure static assets.\nRUN SECRET_KEY=twlight /app/bin/twlight_static.sh\n\nEXPOSE 80\n\nENTRYPOINT [\"/app/bin/twlight_docker_entrypoint.sh\"]\n"
}