{
  "startTime": 1674235222623,
  "endTime": 1674235223226,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 26,
        "lineEnd": 27,
        "columnStart": 7,
        "columnEnd": 73
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 34,
        "lineEnd": 35,
        "columnStart": 4,
        "columnEnd": 122
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 45,
        "lineEnd": 45,
        "columnStart": 4,
        "columnEnd": 83
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 56,
        "lineEnd": 57,
        "columnStart": 4,
        "columnEnd": 81
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 61,
        "lineEnd": 61,
        "columnStart": 7,
        "columnEnd": 18
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 36,
        "lineEnd": 36,
        "columnStart": 7,
        "columnEnd": 48
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 46,
        "lineEnd": 46,
        "columnStart": 7,
        "columnEnd": 50
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 58,
        "lineEnd": 58,
        "columnStart": 7,
        "columnEnd": 49
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 5,
        "lineEnd": 18,
        "columnStart": 22,
        "columnEnd": 13
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 96,
        "lineEnd": 105,
        "columnStart": 22,
        "columnEnd": 14
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM debian:stretch\nENV LANG C.UTF-8\nENV LANGUAGE C.UTF-8\nENV LC_ALL C.UTF-8\n\nRUN apt-get update && apt-get -y --no-install-recommends install \\\n    cmake git build-essential curl \\\n    libboost-all-dev \\\n    libpcre3-dev \\\n    zlib1g-dev \\\n    libgcrypt11-dev \\\n    libicu-dev \\\n    python \\\n    libssl-dev \\\n    libyajl-dev \\\n    autoconf \\\n    automake \\\n    pkg-config \\\n    net-tools \\\n    && rm -rf /var/lib/apt/lists/*\n\n# Google Test\nENV GTEST_ROOT=/opt/gtest\nARG GTEST_VER=release-1.8.1\nRUN mkdir -p ${GTEST_ROOT} \\\n    && cd /tmp \\\n    && curl -f -o gtest.tar.gz \\\n      -L https://github.com/google/googletest/archive/${GTEST_VER}.tar.gz \\\n    && tar -zxvf gtest.tar.gz --strip-components=1 -C ${GTEST_ROOT} \\\n    && rm gtest.tar.gz\n\nARG PARALLEL=2\nWORKDIR /app/deps\nARG CPPCMS_VERSION=\"1.2.0\"\nRUN curl -f -o cppcms-${CPPCMS_VERSION}.tar.bz -L \\\n        \"https://sourceforge.net/projects/cppcms/files/cppcms/${CPPCMS_VERSION}/cppcms-${CPPCMS_VERSION}.tar.bz2/download\" \\\n    && tar -xjvf cppcms-${CPPCMS_VERSION}.tar.bz \\\n    && mkdir cppcms-${CPPCMS_VERSION}/build \\\n    && cd cppcms-${CPPCMS_VERSION}/build \\\n    && cmake .. \\\n    && make -j ${PARALLEL} \\\n    && make install \\\n    && cd /app/deps \\\n    && rm -Rf cppcms-${CPPCMS_VERSION} && rm cppcms-${CPPCMS_VERSION}.tar.bz\nARG JANSSON_VERSION=\"2.11\"\nRUN curl -f -O http://www.digip.org/jansson/releases/jansson-${JANSSON_VERSION}.tar.gz \\\n    && tar -xvzf jansson-${JANSSON_VERSION}.tar.gz \\\n    && cd jansson-${JANSSON_VERSION} \\\n    && mkdir build && cd build \\\n    && cmake .. \\\n    && make -j ${PARALLEL} \\\n    && make check \\\n    && make install \\\n    && cd /app/deps \\\n    && rm -Rf jansson-${JANSSON_VERSION} && rm jansson-${JANSSON_VERSION}.tar.gz\nARG LIBJWT_VERSION=\"1.9.0\"\nRUN curl -f -o libjwt-v${LIBJWT_VERSION}.tar.gz -L \\\n        \"https://github.com/benmcollins/libjwt/archive/v${LIBJWT_VERSION}.tar.gz\" \\\n    && tar -xvzf libjwt-v${LIBJWT_VERSION}.tar.gz \\\n    && cd libjwt-${LIBJWT_VERSION} \\\n    && autoreconf -i \\\n    && ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" \\\n    && make -j ${PARALLEL} all \\\n    && make install \\\n    && cd /app/deps \\\n    && rm -Rf libjwt-${LIBJWT_VERSION} && rm libjwt-v${LIBJWT_VERSION}.tar.gz\n\n# start build of kdb\nENV C_FLAGS=\"-D_FORTIFY_SOURCE=2 -Wformat -Werror=format-security -fstack-protector-strong -Wstack-protector -fPIE -pie\"\nWORKDIR /app/kdb\nADD . /app/kdb/\nRUN ldconfig \\\n    && mkdir build \\\n    && cd build \\\n    && cmake -DENABLE_ASAN=ON -DBUILD_FULL=OFF -DBUILD_SHARED=ON \\\n             -DBUILD_STATIC=OFF -DBUILD_DOCUMENTATION=OFF \\\n             -DINSTALL_SYSTEM_FILES=OFF \\\n             -DPLUGINS=\"ALL;-EXPERIMENTAL;-fstab;-ruby;-lua;-python;-xerces;-yamlcpp;-python2;file;camel;yajl\" \\\n             -DTOOLS=\"kdb;rest-backend\" \\\n             -DCMAKE_C_FLAGS=\"$C_FLAGS\" \\\n             -DCMAKE_CXX_FLAGS=\"$C_FLAGS\" \\\n             -DCMAKE_EXE_LINKER_FLAGS=\"-Wl,-z,now -Wl,-z,relro\" \\\n             .. \\\n    && make -j ${PARALLEL} \\\n    && ctest -T Test --output-on-failure -j ${PARALLEL} -LE kdbtests \\\n    && make install\n\n\nFROM debian:stretch\nENV LANG C.UTF-8\nENV LANGUAGE C.UTF-8\nENV LC_ALL C.UTF-8\n\nCOPY --from=0 /usr/local /usr/local\nRUN echo '/usr/local/lib/elektra/' > /etc/ld.so.conf.d/elektra.conf \\\n    && ldconfig\nRUN apt-get update && apt-get install --no-install-recommends -y \\\n         libasan3 \\\n         libubsan0 \\\n         libboost-system1.62.0 \\\n         libboost-filesystem1.62.0 \\\n         libboost-thread1.62.0 \\\n         libssl1.1 \\\n         libicu57 \\\n         libyajl2 \\\n         pwgen \\\n    && rm -rf /var/lib/apt/lists/*\n\n# prepare\n# asan errors in mount-rest-backend-config and run-rest-backend\nRUN kdb global-mount \\\n    && kdb mount-rest-backend-config || /bin/true \\\n    && kdb set -N system /sw/elektra/restbackend/#0/current/backend/jwt/encryption/secret `pwgen -1cns 30` \\\n    && kdb set -N system /sw/elektra/restbackend/#0/current/cppcms/service/api \"http\" \\\n    && kdb set -N system /sw/elektra/restbackend/#0/current/cppcms/service/ip \"0.0.0.0\" \\\n    && kdb set -N system /sw/elektra/restbackend/#0/current/cppcms/service/port 8080 \\\n    && kdb set -N system /sw/elektra/restbackend/#0/current/cppcms/http/script_names/#0 \"/\" \\\n    && kdb set '/sw/elektra/restbackend/#0/current/cppcms/daemon/enable' '0'\\\n    && kdb set '/sw/elektra/restbackend/#0/current/cppcms/logging/level' 'debug'\n\nENTRYPOINT [\"kdb\"]\nCMD [\"run-rest-backend\"]\nEXPOSE 8080\n"
}