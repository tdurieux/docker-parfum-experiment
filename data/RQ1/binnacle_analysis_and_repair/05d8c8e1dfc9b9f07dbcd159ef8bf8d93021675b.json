{
  "startTime": 1674252050393,
  "endTime": 1674252051320,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 17,
        "lineEnd": 17,
        "columnStart": 4,
        "columnEnd": 65
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 18,
        "lineEnd": 18,
        "columnStart": 4,
        "columnEnd": 64
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 19,
        "lineEnd": 19,
        "columnStart": 4,
        "columnEnd": 49
      }
    },
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 51,
        "lineEnd": 51,
        "columnStart": 4,
        "columnEnd": 34
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 82,
        "lineEnd": 82,
        "columnStart": 32,
        "columnEnd": 88
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 85,
        "lineEnd": 85,
        "columnStart": 4,
        "columnEnd": 24
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 86,
        "lineEnd": 86,
        "columnStart": 4,
        "columnEnd": 21
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 108,
        "lineEnd": 108,
        "columnStart": 4,
        "columnEnd": 33
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 15,
        "lineEnd": 15,
        "columnStart": 25,
        "columnEnd": 95
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 30,
        "lineEnd": 48,
        "columnStart": 4,
        "columnEnd": 34
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM ubuntu:16.04\nMAINTAINER John Chilton <jmchilton@gmail.com>\n\nARG CHROME_VERSION=\"google-chrome-stable\"\nARG CHROME_DRIVER_VERSION=\"latest\"\n\n# TODO: merge with first ENV statement.\nENV DEBIAN_FRONTEND=noninteractive \\\n    DEBCONF_NONINTERACTIVE_SEEN=true \\\n    MYSQL_MAJOR=5.7 \\\n    POSTGRES_MAJOR=9.5 \\\n    GALAXY_ROOT=/galaxy \\\n    GALAXY_VIRTUAL_ENV=/galaxy_venv\n\n# Pre-install a bunch of packages to speed up ansible steps.\nRUN apt-get update -y && apt-get install --no-install-recommends -y software-properties-common apt-transport-https curl && \\\n    apt-add-repository -y ppa:ansible/ansible && \\\n    curl -f -s https://dl-ssl.google.com/linux/linux_signing_key.pub | apt-key add - && \\\n    curl -f -s https://deb.nodesource.com/gpgkey/nodesource.gpg.key | apt-key add - && \\\n    curl -f -sL https://deb.nodesource.com/setup_8.x | bash - && \\\n    apt-key adv --keyserver pool.sks-keyservers.net --recv-keys A4A9406876FCBD3C456770C88C718D3B5072E1F5 && \\\n    echo \"deb http://repo.mysql.com/apt/ubuntu/ trusty mysql-${MYSQL_MAJOR}\" > /etc/apt/sources.list.d/mysql.list && \\\n    echo \"deb http://dl.google.com/linux/chrome/deb/ stable main\" >> /etc/apt/sources.list.d/google-chrome.list && \\\n    { \\\n\t\techo mysql-community-server mysql-community-server/data-dir select ''; \\\n\t\techo mysql-community-server mysql-community-server/root-pass password ''; \\\n\t\techo mysql-community-server mysql-community-server/re-root-pass password ''; \\\n\t\techo mysql-community-server mysql-community-server/remove-test-db select false; \\\n\t} | debconf-set-selections && \\\n    apt-get update -y && \\\n    apt-get install --no-install-recommends -y libpq-dev postgresql postgresql-client \\\n            ansible wget mysql-server=\"${MYSQL_MAJOR}\"* libmysqlclient-dev=\"${MYSQL_MAJOR}\"* \\\n            slurm-llnl libmunge-dev slurm-drmaa-dev ant atop axel bioperl cmake curl \\\n            g++ gcc gfortran git-core htop iftop iotop ipython libffi-dev liblapack-dev \\\n            libncurses5-dev libopenblas-dev libpam0g-dev libpq-dev libsparsehash-dev make \\\n            mercurial nginx-extras nmon patch postgresql postgresql \\\n            postgresql-client python-boto python-dev \\\n            python-prettytable python-psycopg2 python-virtualenv python-pip \\\n            rsync slurm-drmaa-dev swig sysstat unzip \\\n            autoconf automake build-essential libatlas-base-dev libblas-dev openssl \\\n            bzip2 \\\n            ca-certificates \\\n            openjdk-8-jre-headless \\\n            tzdata \\\n            sudo \\\n            locales \\\n            xvfb \\\n            ${CHROME_VERSION:-google-chrome-stable} \\\n            wget zlib1g-dev nodejs && \\\n    apt-get autoremove -y && apt-get clean && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*\n\nRUN npm install -g grunt grunt-cli && npm cache clean --force;\n\nRUN mkdir -p /tmp/ansible && \\\n    mkdir -p /opt/galaxy/db && \\\n    chown -R postgres:postgres /opt/galaxy/db && \\\n    sed -Ei 's/^(bind-address|log)/#&/' /etc/mysql/my.cnf\n\nADD start_mysql.sh /opt/galaxy/start_mysql.sh\nADD ansible_vars.yml /tmp/ansible/ansible_vars.yml\nADD provision.yml /tmp/ansible/provision.yml\n\nRUN mkdir /etc/galaxy && cd /tmp/ansible && mkdir roles && \\\n    mkdir roles/galaxyprojectdotorg.galaxy-os && \\\n    wget --quiet -O- https://github.com/galaxyproject/ansible-galaxy-os/archive/master.tar.gz | tar -xzf- --strip-components=1 -C roles/galaxyprojectdotorg.galaxy-os && \\\n    mkdir roles/galaxyprojectdotorg.cloudman-database && \\\n    wget --quiet -O- https://github.com/galaxyproject/ansible-cloudman-database/archive/master.tar.gz | tar -xzf- --strip-components=1 -C roles/galaxyprojectdotorg.cloudman-database && \\\n    mkdir roles/galaxyprojectdotorg.galaxy && \\\n    wget --quiet -O- https://github.com/galaxyproject/ansible-galaxy/archive/master.tar.gz | tar -xzf- --strip-components=1 -C roles/galaxyprojectdotorg.galaxy && \\\n    mkdir roles/galaxyprojectdotorg.galaxy-extras && \\\n    wget --quiet -O- https://github.com/galaxyproject/ansible-galaxy-extras/archive/dynamic_uwsgi_config.tar.gz | tar -xzf- --strip-components=1 -C roles/galaxyprojectdotorg.galaxy-extras && \\\n    mkdir roles/galaxyprojectdotorg.galaxy-toolshed && \\\n    wget --quiet -O- https://github.com/galaxyproject/ansible-galaxy-toolshed/archive/master.tar.gz | tar -xzf- --strip-components=1 -C roles/galaxyprojectdotorg.galaxy-toolshed && \\\n    ANSIBLE_FORCE_COLOR=1 PYTHONUNBUFFERED=1 ansible-playbook /tmp/ansible/provision.yml --tags=image -c local -e \"@ansible_vars.yml\" && \\\n    ANSIBLE_FORCE_COLOR=1 PYTHONUNBUFFERED=1 ansible-playbook /tmp/ansible/provision.yml --tags=database -c local -e \"@ansible_vars.yml\" && \\\n    ANSIBLE_FORCE_COLOR=1 PYTHONUNBUFFERED=1 ansible-playbook /tmp/ansible/provision.yml --tags=galaxy -c local -e \"@ansible_vars.yml\" && \\\n    ANSIBLE_FORCE_COLOR=1 PYTHONUNBUFFERED=1 ansible-playbook /tmp/ansible/provision.yml --tags=toolshed -c local -e \"@ansible_vars.yml\" && \\\n    apt-get autoremove -y && apt-get clean && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*\n\nRUN cd $GALAXY_ROOT && \\\n    ./scripts/common_startup.sh || { echo \"common_startup.sh failed\"; exit 1; } && \\\n    dev_requirements=./lib/galaxy/dependencies/dev-requirements.txt && \\\n    [ -f $dev_requirements ] && $GALAXY_VIRTUAL_ENV/bin/pip install --no-cache-dir -r $dev_requirements\n\nRUN . $GALAXY_VIRTUAL_ENV/bin/activate && \\\n    pip install --no-cache-dir psycopg2 && \\\n    pip install --no-cache-dir mysql && \\\n    cd $GALAXY_ROOT && \\\n    echo \"Prepopulating postgres database\" && \\\n    su -c '/usr/lib/postgresql/${POSTGRES_MAJOR}/bin/pg_ctl -o \"-F\" start -D /opt/galaxy/db' postgres && \\\n    sleep 3 && \\\n    GALAXY_CONFIG_DATABASE_CONNECTION=\"postgresql://root@localhost:5930/galaxy\" bash create_db.sh && \\\n    echo \"Prepopulating sqlite database\" && \\\n    GALAXY_CONFIG_DATABASE_CONNECTION=\"sqlite:////opt/galaxy/galaxy.sqlite\" bash create_db.sh && \\\n    sh /opt/galaxy/start_mysql.sh && \\\n    echo \"Prepopulating mysql database\" && \\\n    GALAXY_CONFIG_DATABASE_CONNECTION=\"mysql://galaxy:galaxy@localhost/galaxy?unix_socket=/var/run/mysqld/mysqld.sock\" bash create_db.sh && \\\n    echo \"Prepopulating toolshed postgres database\" && \\\n    TOOL_SHED_CONFIG_DATABASE_CONNECTION=\"postgresql://root@localhost:5930/toolshed\" bash create_db.sh tool_shed && \\\n    echo \"Prepopulating toolshed sqlite database\" && \\\n    TOOL_SHED_CONFIG_DATABASE_CONNECTION=\"sqlite:////opt/galaxy/toolshed.sqlite\" bash create_db.sh tool_shed && \\\n    echo \"Prepopulating toolshed mysql database\" && \\\n    TOOL_SHED_CONFIG_DATABASE_CONNECTION=\"mysql://galaxy:galaxy@localhost/toolshed?unix_socket=/var/run/mysqld/mysqld.sock\" bash create_db.sh tool_shed\n\n# bcftools for Galaxy.\nRUN mkdir -p /tmp/install && \\\n    cd /tmp/install && \\\n    wget https://github.com/samtools/bcftools/releases/download/1.2/bcftools-1.2.tar.bz2 && \\\n    tar xvjf bcftools-1.2.tar.bz2 && \\\n    cd bcftools-1.2 && \\\n    make && \\\n    make install && \\\n    cd && rm -rf /tmp/install && rm bcftools-1.2.tar.bz2\n\n#========================================\n# Add Selenium user with passwordless sudo\n#========================================\nRUN useradd seluser \\\n         --shell /bin/bash  \\\n         --create-home \\\n  && usermod -a -G sudo seluser \\\n  && echo 'ALL ALL = (ALL) NOPASSWD: ALL' >> /etc/sudoers \\\n  && echo 'seluser:secret' | chpasswd\n\nUSER seluser\n\n#==========\n# Selenium\n#==========\nRUN  sudo mkdir -p /opt/selenium \\\n  && sudo chown seluser:seluser /opt/selenium \\\n  && wget --no-verbose https://selenium-release.storage.googleapis.com/3.6/selenium-server-standalone-3.6.0.jar \\\n    -O /opt/selenium/selenium-server-standalone.jar\n\nUSER root\n\n#==============================\n# Scripts to run Selenium Node\n#==============================\nCOPY selenium/entry_point.sh selenium/functions.sh selenium/wrap_chrome_binary selenium/generate_config /opt/bin/\n\nRUN /opt/bin/wrap_chrome_binary\n\nUSER seluser\n\nRUN CD_VERSION=$(if [ ${CHROME_DRIVER_VERSION:-latest} = \"latest\" ]; then echo $(wget -qO- https://chromedriver.storage.googleapis.com/LATEST_RELEASE); else echo $CHROME_DRIVER_VERSION; fi) \\\n  && echo \"Using chromedriver version: \"$CD_VERSION \\\n  && wget --no-verbose -O /tmp/chromedriver_linux64.zip https://chromedriver.storage.googleapis.com/$CD_VERSION/chromedriver_linux64.zip \\\n  && rm -rf /opt/selenium/chromedriver \\\n  && unzip /tmp/chromedriver_linux64.zip -d /opt/selenium \\\n  && rm /tmp/chromedriver_linux64.zip \\\n  && mv /opt/selenium/chromedriver /opt/selenium/chromedriver-$CD_VERSION \\\n  && chmod 755 /opt/selenium/chromedriver-$CD_VERSION \\\n  && sudo ln -fs /opt/selenium/chromedriver-$CD_VERSION /usr/bin/chromedriver\n\nRUN /opt/bin/generate_config > /opt/selenium/config.json\n\n#============================\n# Some configuration options\n#============================\nENV SCREEN_WIDTH=1360 \\\n    SCREEN_HEIGHT=1020 \\\n    SCREEN_DEPTH=24 \\\n    DISPLAY=:99.0 \\\n    NODE_MAX_INSTANCES=1 \\\n    NODE_MAX_SESSION=1 \\\n    NODE_PORT=5555 \\\n    NODE_REGISTER_CYCLE=5000 \\\n    NODE_POLLING=5000 \\\n    NODE_UNREGISTER_IF_STILL_DOWN_AFTER=60000 \\\n    NODE_DOWN_POLLING_LIMIT=2 \\\n    NODE_APPLICATION_NAME=\"\" \\\n    DBUS_SESSION_BUS_ADDRESS=/dev/null\n\nUSER root\n\nADD run_test_wrapper.sh /usr/local/bin/run_test_wrapper.sh\n\nEXPOSE :9009\nEXPOSE :8080\nEXPOSE :80\n\nENTRYPOINT [\"/bin/bash\", \"/usr/local/bin/run_test_wrapper.sh\"]\n"
}