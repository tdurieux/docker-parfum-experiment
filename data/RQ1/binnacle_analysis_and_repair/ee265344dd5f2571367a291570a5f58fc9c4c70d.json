{
  "startTime": 1674244600994,
  "endTime": 1674244601196,
  "originalSmells": [
    {
      "rule": "wgetUseHttpsUrl",
      "position": {
        "lineStart": 18,
        "lineEnd": 18,
        "columnStart": 15,
        "columnEnd": 80
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 46,
        "lineEnd": 46,
        "columnStart": 4,
        "columnEnd": 31
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 22,
        "lineEnd": 37,
        "columnStart": 4,
        "columnEnd": 33
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 8,
        "lineEnd": 8,
        "columnStart": 4,
        "columnEnd": 40
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 13,
        "lineEnd": 17,
        "columnStart": 4,
        "columnEnd": 16
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM nvcr.io/nvidia/pytorch:18.11-py3\n\nARG FFMPEG_VERSION=4.1\n\nENV NVIDIA_DRIVER_CAPABILITIES=video,compute,utility\n\n# nvcuvid deps\nRUN apt-get update --fix-missing && \\\n    apt-get install --no-install-recommends -y libx11-6 libxext6 && \\\n    rm -rf /var/lib/apt/lists/*\n\n# minimal ffmpeg from source\nRUN apt-get update --fix-missing && \\\n    apt-get install --no-install-recommends -y \\\n      yasm \\\n      libx264-148 libx264-dev \\\n      libx265-79 libx265-dev \\\n      pkg-config && \\\n    cd /tmp && wget -q https://ffmpeg.org/releases/ffmpeg-$FFMPEG_VERSION.tar.bz2 && \\\n    tar xf ffmpeg-$FFMPEG_VERSION.tar.bz2 && \\\n    rm ffmpeg-$FFMPEG_VERSION.tar.bz2 && \\\n    cd /tmp/ffmpeg-$FFMPEG_VERSION && \\\n    ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" \\\n    --prefix=/usr/local \\\n    --disable-static --enable-shared \\\n    --disable-all --disable-autodetect --disable-iconv \\\n    --enable-avformat --enable-avcodec --enable-avfilter --enable-avdevice \\\n    --enable-protocol=file \\\n    --enable-demuxer=mov,matroska,image2 \\\n    --enable-bsf=h264_mp4toannexb,hevc_mp4toannexb \\\n    --enable-gpl --enable-libx264 --enable-libx265 --enable-zlib \\\n    --enable-indev=lavfi \\\n    --enable-swresample --enable-ffmpeg \\\n    --enable-swscale --enable-filter=scale,testsrc \\\n    --enable-muxer=mp4,matroska,image2 \\\n    --enable-decoder=h264,hevc,png,mjpeg,rawvideo \\\n    --enable-encoder=libx264,libx265,png,mjpeg \\\n    --enable-parser=h264,hevc,png && \\\n    make -j8 && make install && \\\n    ldconfig && \\\n    cd /tmp && rm -rf ffmpeg-$FFMPEG_VERSION && \\\n    apt-get remove -y yasm libx264-dev libx265-dev && \\\n    apt-get auto-remove -y && \\\n    rm -rf /var/lib/apt/lists/*\n\n# nvvl build deps\nRUN pip install --no-cache-dir --upgrade cmake\n\n# nvidia-docker only provides libraries for runtime use, not for\n# development, to hack it so we can develop inside a container (not a\n# normal or supported practice), we need to make an unversioned\n# symlink so gcc can find the library.  Additional, different\n# nvidia-docker versions put the lib in different places, so we make\n# symlinks for both places.\nRUN ln -s /usr/local/nvidia/lib64/libnvcuvid.so.1 /usr/local/lib/libnvcuvid.so && \\\n    ln -s libnvcuvid.so.1 /usr/lib/x86_64-linux-gnu/libnvcuvid.so\n"
}