{
  "startTime": 1674244154077,
  "endTime": 1674244154255,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 29,
        "lineEnd": 29,
        "columnStart": 4,
        "columnEnd": 49
      }
    },
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 44,
        "lineEnd": 44,
        "columnStart": 4,
        "columnEnd": 15
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 32,
        "lineEnd": 32,
        "columnStart": 4,
        "columnEnd": 31
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 39,
        "lineEnd": 39,
        "columnStart": 4,
        "columnEnd": 35
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 23,
        "lineEnd": 23,
        "columnStart": 7,
        "columnEnd": 53
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 30,
        "lineEnd": 30,
        "columnStart": 4,
        "columnEnd": 29
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 30,
        "lineEnd": 30,
        "columnStart": 4,
        "columnEnd": 29
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 30,
        "lineEnd": 30,
        "columnStart": 4,
        "columnEnd": 29
      }
    }
  ],
  "repairedSmells": [
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 30,
        "lineEnd": 30,
        "columnStart": 4,
        "columnEnd": 53
      }
    }
  ],
  "repairedDockerfile": "FROM metabrainz/python:3.7\n\nARG DEPLOY_ENV\n\nRUN apt-get update \\\n     && apt-get install -y --no-install-recommends \\\n                        build-essential \\\n                        ca-certificates \\\n                        cron \\\n                        git \\\n                        libpq-dev \\\n                        libffi-dev \\\n                        libssl-dev \\\n                        libxml2-dev \\\n                        libxslt1-dev \\\n                        rsync \\\n    && rm -rf /var/lib/apt/lists/*\n\n# PostgreSQL client\nRUN apt-key adv --keyserver ha.pool.sks-keyservers.net --recv-keys B97B0AFCAA1A47F044F244A07FCC7D46ACCC4CF8\nENV PG_MAJOR 9.5\nRUN echo 'deb http://apt.postgresql.org/pub/repos/apt/ jessie-pgdg main' $PG_MAJOR > /etc/apt/sources.list.d/pgdg.list\nRUN apt-get update \\\n    && apt-get install --no-install-recommends -y postgresql-client-$PG_MAJOR \\\n    && rm -rf /var/lib/apt/lists/*\n# Specifying password so that client doesn't ask scripts for it...\nENV PGPASSWORD \"critiquebrainz\"\n\n# Node\nRUN curl -f -sL https://deb.nodesource.com/setup_6.x | bash -\nRUN apt-get install --no-install-recommends -y nodejs && rm -rf /var/lib/apt/lists/*;\n\nRUN pip install --no-cache-dir uWSGI==2.0.13.1\n\nRUN mkdir /code\nWORKDIR /code\n\n# Python dependencies\nCOPY ./requirements.txt /code/\nRUN pip install --no-cache-dir -r requirements.txt\n\n# Node dependencies\nCOPY ./package.json /code/\nCOPY ./npm-shrinkwrap.json /code/\nRUN npm install && npm cache clean --force;\n\nCOPY . /code/\n\n# Build static files\nRUN ./node_modules/.bin/gulp\n\n# Compile translations\nRUN pybabel compile -d critiquebrainz/frontend/translations\n\nRUN useradd --create-home --shell /bin/bash critiquebrainz\n\n############\n# Services #\n############\n\n# Consul Template service is already set up with the base image.\n# Just need to copy the configuration.\nCOPY ./docker/prod/consul-template.conf /etc/consul-template.conf\n\nCOPY ./docker/$DEPLOY_ENV/uwsgi/uwsgi.service /etc/service/uwsgi/run\nRUN chmod 755 /etc/service/uwsgi/run\nCOPY ./docker/$DEPLOY_ENV/uwsgi/uwsgi.ini /etc/uwsgi/uwsgi.ini\n\n# cron jobs\nADD ./docker/prod/cron/jobs /tmp/crontab\nRUN chmod 0644 /tmp/crontab && crontab -u critiquebrainz /tmp/crontab\nRUN rm /tmp/crontab\nRUN touch /var/log/dump_backup.log /var/log/public_dump_create.log /var/log/json_dump_create.log \\\n    && chown critiquebrainz:critiquebrainz /var/log/dump_backup.log /var/log/public_dump_create.log /var/log/json_dump_create.log\n\n# Make sure the cron service doesn't start automagically\n# http://smarden.org/runit/runsv.8.html\nRUN touch /etc/service/cron/down\n\nARG GIT_COMMIT_SHA\nENV GIT_SHA ${GIT_COMMIT_SHA}\n\nEXPOSE 13032\n"
}