{
  "startTime": 1674242197580,
  "endTime": 1674242197764,
  "originalSmells": [
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 16,
        "lineEnd": 16,
        "columnStart": 4,
        "columnEnd": 15
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 8,
        "lineEnd": 8,
        "columnStart": 1,
        "columnEnd": 222
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 36,
        "lineEnd": 36,
        "columnStart": 1,
        "columnEnd": 305
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 37,
        "lineEnd": 37,
        "columnStart": 4,
        "columnEnd": 81
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 37,
        "lineEnd": 37,
        "columnStart": 4,
        "columnEnd": 81
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 8,
        "lineEnd": 8,
        "columnStart": 1,
        "columnEnd": 222
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 36,
        "lineEnd": 36,
        "columnStart": 1,
        "columnEnd": 305
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 37,
        "lineEnd": 37,
        "columnStart": 4,
        "columnEnd": 81
      }
    }
  ],
  "repairedSmells": [
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 37,
        "lineEnd": 37,
        "columnStart": 4,
        "columnEnd": 105
      }
    }
  ],
  "repairedDockerfile": "### 1. stage: create build image\nFROM debian:stable AS coturn-build\n\nENV BUILD_PREFIX /usr/local/src\n\n# Install build dependencies\nRUN export DEBIAN_FRONTEND=noninteractive && \\\n\tapt-get update && \\\n\tapt-get install --no-install-recommends -y build-essential git debhelper dpkg-dev libssl-dev libevent-dev sqlite3 libsqlite3-dev postgresql-client libpq-dev default-mysql-client default-libmysqlclient-dev libhiredis-dev libmongoc-dev libbson-dev && rm -rf /var/lib/apt/lists/*;\n\n# Clone coTURN\nWORKDIR ${BUILD_PREFIX}\nRUN git clone https://github.com/coturn/coturn.git\n\n# Build coTURN\nWORKDIR coturn\nRUN ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\"\nRUN make\n\n### 2. stage: create production image\n\nFROM debian:stable AS coturn\n\nENV INSTALL_PREFIX /usr/local\nENV BUILD_PREFIX /usr/local/src\nENV TURNSERVER_GROUP turnserver\nENV TURNSERVER_USER turnserver\n\nCOPY --from=coturn-build ${BUILD_PREFIX}/coturn/bin/ ${INSTALL_PREFIX}/bin/\nCOPY --from=coturn-build ${BUILD_PREFIX}/coturn/man/ ${INSTALL_PREFIX}/man/\n#COPY turnserver.conf ${INSTALL_PREFIX}/etc\nCOPY --from=coturn-build ${BUILD_PREFIX}/coturn/sqlite/turndb ${INSTALL_PREFIX}/var/db/turndb\nCOPY --from=coturn-build ${BUILD_PREFIX}/coturn/turndb ${INSTALL_PREFIX}/turndb\n# Install lib dependencies\nRUN export DEBIAN_FRONTEND=noninteractive && \\\n\tapt-get update && \\\n\tapt-get install --no-install-recommends -y libc6 >=2.15 libevent-core-2.0-5 >=2.0.10-stable libevent-extra-2.0-5 >=2.0.10-stable libevent-openssl-2.0-5 >=2.0.10-stable libevent-pthreads-2.0-5 >=2.0.10-stable libhiredis0.13 >=0.13.1 libmariadbclient18 >=5.5.36 libpq5 >=8.4~ libsqlite3-0 >=3.6.0 libssl1.1 >=1.1.0 libmongoc-1.0 libbson-1.0 && rm -rf /var/lib/apt/lists/*;\nRUN apt-get install --no-install-recommends -y mysql-client postgresql-client redis-tools mongodb-clients && rm -rf /var/lib/apt/lists/*;\n\nRUN if ! getent group \"$TURNSERVER_GROUP\" >/dev/null; then \\\n        addgroup --system \"$TURNSERVER_GROUP\" || exit 1 ;\\\n    fi \\\n    && \\\n    if ! getent passwd \"$TURNSERVER_USER\" >/dev/null; then \\\n        adduser --system \\\n           --home / \\\n           --shell /bin/false \\\n           --no-create-home \\\n           --ingroup \"$TURNSERVER_GROUP\" \\\n           --disabled-password \\\n           --disabled-login \\\n           --gecos \"turnserver daemon\" \\\n               \"$TURNSERVER_USER\" || exit 1; \\\n    fi\n\n\n# set startup parameters\n# SUTN/TURN PORTS\nEXPOSE 3478 3479 3478/udp 3479/udp 80 80/udp\nEXPOSE 5349 5350 5349/udp 5350/udp 443 443/udp\n# CLI\nEXPOSE 5766\n# Relay Ports\nEXPOSE 49152-65535 49152-65535/udp\n\n#COPY ./docker-entrypoint.sh /\n#ENTRYPOINT [\"/docker-entrypoint.sh\"]\n\nWORKDIR ${INSTALL_PREFIX}\nCMD ${INSTALL_PREFIX}/bin/turnserver\n"
}