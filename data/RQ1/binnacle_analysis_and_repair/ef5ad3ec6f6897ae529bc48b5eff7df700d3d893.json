{
  "startTime": 1674238464183,
  "endTime": 1674238464638,
  "originalSmells": [
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 54,
        "lineEnd": 56,
        "columnStart": 5,
        "columnEnd": 52
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 90,
        "lineEnd": 130,
        "columnStart": 5,
        "columnEnd": 34
      }
    },
    {
      "rule": "apkAddUseNoCache",
      "position": {
        "lineStart": 20,
        "lineEnd": 21,
        "columnStart": 5,
        "columnEnd": 8
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM alpine:edge\n\nLABEL repository.hub=\"alexmasterov/alpine-nginx-tarantool\" \\\r\n      repository.url=\"https://github.com/AlexMasterov/dockerfiles\" \\\r\n      maintainer=\"Alex Masterov <alex.masterow@gmail.com>\"\n\nARG NGINX_VERSION=1.15.0\nARG NGINX_CONFIG=/etc/nginx\n\nARG LUAJIT_BRANCH=tarantool-1.7\nARG LUAROCKS_TAG=2.4.4\n\nARG DEVELKIT_MODULE_TAG=v0.3.0\nARG LUA_MODULE_TAG=v0.10.12\nARG TARANTOOL_UPSTREAM_TAG=v2.6-rc3\n\nENV LUAJIT_LIB=/usr/local/lib \\\r\n    LUAJIT_INC=/usr/local/include/luajit-2.1\n\nRUN set -x \\\n  && apk add --no-cache --update \\\n    tini \\\n  && addgroup -g 82 -S nginx \\\n  && adduser -u 82 -S -D -h /var/cache/nginx -s /sbin/nologin -G nginx nginx\n\nRUN set -x \\\r\n  && apk add --virtual .nginx-build-dependencies \\\r\n    cmake \\\r\n    curl \\\r\n    g++ \\\r\n    gcc \\\r\n    git \\\r\n    libressl-dev \\\r\n    linux-headers \\\r\n    make \\\r\n    pcre-dev \\\r\n    zlib-dev \\\r\n  && : \"---------- Build flags ----------\" \\\r\n  && export LDFLAGS=\"-Wl,-O2 -Wl,--hash-style=both -pie\" \\\r\n  && export CFLAGS=\"-O2 -march=native -fstack-protector-strong -fpic -fpie\" \\\r\n  && export MAKEFLAGS=\"-j $(expr $(getconf _NPROCESSORS_ONLN) \\+ 1)\" \\\r\n  && : \"---------- LuaJIT ----------\" \\\r\n  && apk add --virtual .luajit-runtime-dependencies \\\r\n    libgcc \\\r\n  && git clone -b ${LUAJIT_BRANCH} --depth 1 https://github.com/tarantool/luajit.git /tmp/luajit \\\r\n  && cd /tmp/luajit \\\r\n  && make \\\r\n    CFLAGS+=\"-fPIC\" \\\r\n    XCFLAGS+=\"-DLUAJIT_ENABLE_GC64\" \\\r\n  && make install \\\r\n  && ln -sf /usr/local/bin/luajit-2.1.0-beta3 /usr/local/bin/lua \\\r\n  && : \"---------- LuaRocks ----------\" \\\r\n  && git clone -b ${LUAROCKS_TAG} --depth 1 https://github.com/luarocks/luarocks.git /tmp/luarocks \\\r\n  && cd /tmp/luarocks \\\n  && ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" \\\n    --with-lua-bin=/usr/local/bin \\\n    --with-lua-include=/usr/local/include/luajit-2.1 \\\n  && make build \\\n  && make install \\\n  && : \"---------- Nginx Development Kit ----------\" \\\n  && DEVELKIT_MODULE_DIR=\"/tmp/devel-kit\" \\\n  && DEVELKIT_MODULE_GIT=\"https://github.com/simpl/ngx_devel_kit.git\" \\\n  && git clone -o ${DEVELKIT_MODULE_TAG} --depth 1 ${DEVELKIT_MODULE_GIT} ${DEVELKIT_MODULE_DIR} \\\n  && : \"---------- Nginx Lua Module  ----------\" \\\n  && LUA_MODULE_DIR=\"/tmp/lua-module\" \\\n  && LUA_MODULE_GIT=\"https://github.com/openresty/lua-nginx-module.git\" \\\n  && git clone -o ${LUA_MODULE_TAG} --depth 1 ${LUA_MODULE_GIT} ${LUA_MODULE_DIR} \\\n  && : \"---------- Nginx Tarantool Module  ----------\" \\\n  && TARANTOOL_UPSTREAM_GIT=\"https://github.com/tarantool/nginx_upstream_module.git\" \\\n  && TARANTOOL_UPSTREAM_DIR=\"/tmp/nginx_upstream_module\" \\\n  && git clone --depth 1 ${TARANTOOL_UPSTREAM_GIT} ${TARANTOOL_UPSTREAM_DIR} \\\n  && git clone --depth 1 https://github.com/lloyd/yajl.git /tmp/yajl \\\n  && cd /tmp/yajl \\\n  && cmake \\\r\n    -DCMAKE_BUILD_TYPE=Release \\\r\n    . \\\n  && make \\\n  && make install \\\n  && : \"---------- Msgpuck  ----------\" \\\n  && git clone --depth 1 https://github.com/rtsisyk/msgpuck.git /tmp/msgpuck \\\n  && cd /tmp/msgpuck \\\n  && cmake \\\r\n    -DCMAKE_BUILD_TYPE=Release \\\r\n    . \\\n  && make \\\n  && make install \\\n  && : \"---------- Nginx  ----------\" \\\n  && NGINX_SOURCE=\"https://nginx.org/download/nginx-${NGINX_VERSION}.tar.gz\" \\\n  && curl -fSL --connect-timeout 30 ${NGINX_SOURCE} | tar xz -C /tmp \\\n  && cd /tmp/nginx-${NGINX_VERSION} \\\n  && ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" \\\n    --prefix=${NGINX_CONFIG} \\\n    --conf-path=${NGINX_CONFIG}/nginx.conf \\\n    --modules-path=/usr/lib/nginx/modules \\\n    --sbin-path=/usr/sbin/nginx \\\n    --pid-path=/var/run/nginx.pid \\\n    --lock-path=/var/run/nginx.lock \\\n    --error-log-path=/var/log/nginx/error.log \\\n    --http-log-path=/var/log/nginx/access.log \\\n    --http-client-body-temp-path=/var/cache/nginx/client_temp \\\n    --http-proxy-temp-path=/var/cache/nginx/proxy_temp \\\n    --http-fastcgi-temp-path=/var/cache/nginx/fastcgi_temp \\\n    --http-uwsgi-temp-path=/var/cache/nginx/uwsgi_temp \\\n    --http-scgi-temp-path=/var/cache/nginx/scgi_temp \\\n    --user=nginx \\\n    --group=nginx \\\n    --without-http_autoindex_module \\\n    --without-http_ssi_module \\\n    --without-mail_imap_module \\\n    --without-mail_pop3_module \\\n    --without-mail_smtp_module \\\n    --with-file-aio \\\n    --with-http_auth_request_module \\\n    --with-http_dav_module \\\n    --with-http_degradation_module \\\n    --with-http_gunzip_module \\\n    --with-http_gzip_static_module \\\n    --with-http_realip_module \\\n    --with-http_secure_link_module \\\n    --with-http_slice_module \\\n    --with-http_ssl_module \\\n    --with-http_stub_status_module \\\n    --with-http_v2_module \\\n    --with-pcre \\\n    --with-pcre-jit \\\n    --with-stream \\\n    --with-stream_ssl_module \\\n    --with-threads \\\n    --with-cc-opt=\"-flto\" \\\n    --add-module=${DEVELKIT_MODULE_DIR} \\\n    --add-module=${LUA_MODULE_DIR} \\\n  && make \\\n  && make install \\\n  && runtimeDeps=\"$( \\\r\n    scanelf --needed --nobanner --recursive /usr/sbin/nginx /usr/lib/nginx/modules/*.so \\\r\n      | awk '{ gsub(/,/, \"\\nso:\", $2); print \"so:\" $2 }' \\\r\n      | sort -u \\\r\n      | xargs -r apk info --installed \\\r\n      | sort -u \\\r\n\t)\" \\\n  && apk add --virtual .nginx-runtime-dependencies \\\r\n    ${runtimeDeps} \\\n  && : \"---------- Removing build dependencies, clean temporary files ----------\" \\\n  && apk del .nginx-build-dependencies \\\n  && rm -rf /var/cache/apk/* /var/tmp/* /tmp/*\n\nENTRYPOINT [\"tini\", \"--\"]\nCMD [\"nginx\"]\n"
}