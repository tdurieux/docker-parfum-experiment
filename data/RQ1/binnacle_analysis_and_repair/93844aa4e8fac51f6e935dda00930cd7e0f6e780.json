{
  "startTime": 1674243325574,
  "endTime": 1674243326206,
  "originalSmells": [
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 71,
        "lineEnd": 71,
        "columnStart": 4,
        "columnEnd": 28
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 132,
        "lineEnd": 132,
        "columnStart": 4,
        "columnEnd": 31
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 161,
        "lineEnd": 161,
        "columnStart": 5,
        "columnEnd": 36
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 89,
        "lineEnd": 89,
        "columnStart": 5,
        "columnEnd": 16
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 77,
        "lineEnd": 77,
        "columnStart": 7,
        "columnEnd": 36
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 98,
        "lineEnd": 98,
        "columnStart": 5,
        "columnEnd": 27
      }
    },
    {
      "rule": "aptGetInstallUseY",
      "position": {
        "lineStart": 128,
        "lineEnd": 128,
        "columnStart": 5,
        "columnEnd": 31
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 35,
        "lineEnd": 64,
        "columnStart": 22,
        "columnEnd": 16
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 128,
        "lineEnd": 128,
        "columnStart": 5,
        "columnEnd": 31
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 128,
        "lineEnd": 128,
        "columnStart": 5,
        "columnEnd": 31
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 128,
        "lineEnd": 128,
        "columnStart": 5,
        "columnEnd": 31
      }
    }
  ],
  "repairedSmells": [
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 128,
        "lineEnd": 128,
        "columnStart": 5,
        "columnEnd": 58
      }
    }
  ],
  "repairedDockerfile": "FROM nvidia/cuda:8.0-devel-ubuntu14.04\nLABEL maintainer \"patlekano@gmail.com\"\n\nRUN rm /bin/sh && ln -s /bin/bash /bin/sh\n\n# setup environment\nRUN locale-gen en_US.UTF-8\nENV LANG en_US.UTF-8\n\n# setup sources.list\nRUN echo \"deb http://packages.ros.org/ros/ubuntu trusty main\" > /etc/apt/sources.list.d/ros-latest.list\n\n# install bootstrap tools\nRUN apt-get update && apt-get install --no-install-recommends --allow-unauthenticated -y \\\n    python-rosdep \\\n    python-rosinstall \\\n    python-vcstools \\\n    && rm -rf /var/lib/apt/lists/*\n\n# bootstrap rosdep\nRUN rosdep init \\\n    && rosdep update\n\n# install ros packages\nENV ROS_DISTRO indigo\n\n# # setup entrypoint\n# COPY ./ros_entrypoint.sh /\n\n# ENTRYPOINT [\"/ros_entrypoint.sh\"]\n# CMD [\"bash\"]\n\nENV TERM xterm\n\n# ros-indigo-ros-base\nRUN apt-get update && apt-get install --no-install-recommends -y --allow-unauthenticated \\\n  ros-indigo-desktop-full=1.1.4-0* \\\n\tbuild-essential \\\n\tgcc \\\n\tg++ \\\n\twget \\\n\tmake \\\n\tnano \\\n\tcurl \\\n\tprotobuf-compiler \\\n\tlibhdf5-dev \\\n\tlibprotobuf-dev \\\n\tprotobuf-compiler \\\n\tswig \\\n\tpython-pygame \\\n\tpython-pip \\\n\tpython-dev \\\n\tgit \\\n\tlibgflags-dev \\\n\tlibgoogle-glog-dev \\\n\tliblmdb-dev \\\n\tautoconf \\\n\tautomake \\\n\tlibtool \\\n\tunzip \\\n\tlibprotobuf-dev libleveldb-dev \\\n\tlibsnappy-dev libopencv-dev \\\n\tlibhdf5-serial-dev protobuf-compiler \\\n\tlibatlas-base-dev \\\n\tlibopenblas-dev \\\n\t&& rm -rf /var/lib/apt/lists/*\n#\n#\n# Start with Caffe dependencies\n\n#We need this for boost\nRUN pip install --no-cache-dir --upgrade b2\n\nENV ROOT_DIR=/root\n\nRUN cd $ROOT_DIR \\\n    && wget https://sourceforge.net/projects/boost/files/boost/1.61.0/boost_1_61_0.tar.gz \\\n    && tar -zvxf boost_1_61_0.tar.gz \\\n    && cd boost_1_61_0 \\\n    && ./bootstrap.sh --prefix=/usr/local --with-libraries=program_options atomic \\\n\t\tlink=static runtime-link=shared threading=multi \\\n    && ./b2 install \\\n    && cd $ROOT_DIR && rm boost*.gz && rm boost_1_61_0.tar.gz\n#\n#protobuf-compiler\nENV PROTOBUF=/root/protobuf\nRUN git clone https://github.com/google/protobuf.git \\\n\t\t&& cd protobuf \\\n\t\t&& bash autogen.sh \\\n\t\t&& ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" \\\n\t\t&& make -j \\\n\t\t&& make install \\\n\t\t&& ldconfig \\\n\t\t&& cd ../ \\\n\t\t&& rm -rf protobuf\n\nRUN cd /root \\\n    && wget https://ecs.utdallas.edu/~opo140030/docker_files/cudnn.tar.gz \\\n\t\t&& tar -zvxf cudnn.tar.gz \\\n\t\t&& cd cudnnv5.1 \\\n\t\t&& cp include/cudnn.h /usr/local/cuda/include \\\n\t\t&& cp include/cudnn.h /usr/local/cuda-8.0/include \\\n\t\t&& cp lib64/*.* /usr/local/cuda-8.0/lib64 \\\n\t\t&& cp lib64/*.* /usr/local/cuda/lib64 \\\n    && rm /root/cudnn* -rf && rm cudnn.tar.gz\n\n#clone caffe\nENV CAFFE_ROOT=/root/caffe/\nRUN cd ~ \\\n    && git clone https://github.com/BVLC/caffe.git\n\nCOPY CaffeCMake.txt $CAFFE_ROOT/CMakeLists.txt\n\nRUN cd $CAFFE_ROOT \\\n\t\t&& mkdir build && cd build \\\n\t\t&& cmake -DUSE_CUDNN=ON ..  \\\n\t\t&& make -j\"$(nproc)\" all \\\n\t\t&& make install\n\n# Setup catkin workspace\nRUN /bin/bash -c echo \"source /opt/ros/indigo/setup.bash\" >> ~/.bashrc \\\n\t\t&& /bin/bash -c echo \"export PYTHONPATH=${PYTHONPATH:+:${PYTHONPATH}}:/root/caffe/python:/root/catkin_ws/src/gps\" >> ~/.bashrc \\\n\t\t&& /bin/bash -c echo \" source /usr/local/etc/bash_completion.d/catkin_tools-completion.bash\" >> ~/.bashrc \\\n\t\t&& /bin/bash -c \"source /root/.bashrc\" \\\n    && /bin/bash -c echo \"export CAFFE_ROOT=/root/caffe/build\"\n\nRUN wget https://bootstrap.pypa.io/get-pip.py \\\n\t\t&& python ./get-pip.py \\\n\t\t&& apt-get install -y --no-install-recommends python-pip \\\n    && rm get-pip.py && rm -rf /var/lib/apt/lists/*;\n\n#install catkin build\nRUN pip install --no-cache-dir -U catkin_tools\n\nENV CATKIN_WS=/root/catkin_ws\n\nRUN mkdir -p $CATKIN_WS/src && cd $CATKIN_WS/src \\\n\t\t&& mkdir gps\n\nCOPY . $CATKIN_WS/src/gps\n\nRUN /bin/bash -c \"source /opt/ros/indigo/setup.bash\" \\\n\t\t&& cd $CATKIN_WS/src/gps \\\n    && rm CaffeCMake.txt \\\n\t\t&& ./compile_proto.sh \\\n\t\t&& cd gps_agent_pkg \\\n\t\t&& echo \"deb http://packages.ros.org/ros/ubuntu $(lsb_release -sc) main\" > /etc/apt/sources.list.d/ros-latest.list \\\n\t\t&& apt-key adv --keyserver hkp://ha.pool.sks-keyservers.net:80 --recv-key 421C365BD9FF1F717815A3895523BAEEB01FA116 \\\n\t\t&& apt-get update \\\n\t\t&& rosdep install --from-paths -r -y . \\\n \t\t&& cd /root  \\\n\t\t&& git clone https://github.com/pybox2d/pybox2d  \\\n\t\t&& cd pybox2d  \\\n\t\t&& python setup.py build  \\\n\t\t&& python setup.py install \\\n\t\t&& rm -rf /root/pybox2d\n\n# split this to help debugging during build process\nRUN cd $CATKIN_WS/src/gps \\\n\t\t&& chmod 777 *.sh \\\n\t\t&& cp *.sh $CATKIN_WS \\\n\t\t&& pip install --no-cache-dir -r requirements.txt \\\n    && rm -rf /var/lib/apt/lists/*\n\n#ADD setup.sh $ROOT_DIR\n#\n# RUN cd $ROOT_DIR \\\n#     && bash setup.sh \\\n#     && cd $CATKIN_WS/src \\\n#     && catkin init \\\n#     && cd $CATKIN_WS \\\n#     && export CAFFE_ROOT=/root/caffe/ \\\n#     && catkin build\n\nRUN  echo   \" ===========  Build Complete  =========   \"\n"
}