{
  "startTime": 1674240016161,
  "endTime": 1674240016329,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 32,
        "lineEnd": 32,
        "columnStart": 4,
        "columnEnd": 108
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 43,
        "lineEnd": 43,
        "columnStart": 4,
        "columnEnd": 92
      }
    },
    {
      "rule": "yumInstallRmVarCacheYum",
      "position": {
        "lineStart": 12,
        "lineEnd": 28,
        "columnStart": 4,
        "columnEnd": 32
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM amazonlinux:2017.03\nLABEL authors=\"Bubba Hines <bubba@stechstudio.com>\"\nLABEL vendor=\"Signature Tech Studio, Inc.\"\nLABEL home=\"https://github.com/stechstudio/aws-lambda-build\"\n\nWORKDIR /root\n\n# Lambda is based on 2017.03. Lock YUM to that release version.\nRUN sed -i 's/releasever=latest/releaserver=2017.03/' /etc/yum.conf\n\nRUN yum makecache \\\n && yum groupinstall -y \"Development Tools\"  --setopt=group_package_types=mandatory,default \\\n && yum install -y  jq \\\n                    zsh \\\n                    wget \\\n                    fuse \\\n                    gperf \\\n                    expect \\\n                    gtk-doc \\\n                    texlive \\\n                    python35 \\\n                    gmp-devel \\\n                    docbook2X \\\n                    findutils \\\n                    python35-pip \\\n                    dockbook-utils-pdf \\\n                    readline-devel \\\n                    gettext-devel \\\n                    libicu-devel \\\n && yum clean all && rm -rf /var/cache/yum\n\n# Install Ninja and Meson\nRUN curl -f -Ls https://github.com/ninja-build/ninja/releases/download/v1.8.2/ninja-linux.zip >> /tmp/ninja.zip \\\n && cd /tmp && unzip /tmp/ninja.zip \\\n && cp /tmp/ninja /usr/local/bin \\\n && /usr/bin/pip-3.5 install meson \\\n\n# Install the rust toolchain\nRUN curl https://sh.rustup.rs -sSf | sh -s -- -y\n\n# We need a newer cmake than is available, so lets build it ourselves.\nRUN mkdir -p /tmp/cmake \\\n &&  cd /tmp/cmake \\\n && curl -f -Ls https://github.com/Kitware/CMake/releases/download/v3.13.2/cmake-3.13.2.tar.gz | tar xzC /tmp/cmake --strip-components=1 \\\n && ./bootstrap --prefix=/usr/local \\\n && make \\\n && make install\n\n# Setup my dotfiles.\nRUN /usr/bin/git clone --bare --recurse-submodules -j8 https://github.com/bubba-h57/dotfiles.git /root/.dotfiles \\\n && /usr/bin/git --git-dir=/root/.dotfiles/ --work-tree=/root checkout \\\n && /usr/bin/git --git-dir=/root/.dotfiles/ --work-tree=/root submodule update --recursive \\\n && /usr/bin/git --git-dir=/root/.dotfiles/ --work-tree=/root config status.showUntrackedFiles no\n\n# Install neovim\nADD https://github.com/neovim/neovim/releases/download/v0.3.1/nvim.appimage /root\nRUN chmod 755 /root/nvim.appimage && /root/nvim.appimage --appimage-extract && ln -s /root/squashfs-root/usr/bin/nvim /usr/local/bin/nvim && /usr/local/bin/nvim +'PlugInstall --sync' +qall &> /dev/null\n\n# Set some sane environment variables for ourselves\nENV \\\n    PKG_CONFIG=\"/usr/bin/pkg-config\" \\\n    SOURCEFORGE_MIRROR=\"netix\" \\\n    PATH=\"/root/.cargo/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin\" \\\n    JQ=\"/usr/bin/jq\" \\\n    CMAKE='/usr/local/bin/cmake' \\\n    MESON='/usr/local/bin/meson' \\\n    NINJA='/usr/local/bin/ninja'\n\nENTRYPOINT [\"/bin/zsh\"]\n"
}