{
  "startTime": 1674251788351,
  "endTime": 1674251788494,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 19,
        "lineEnd": 19,
        "columnStart": 4,
        "columnEnd": 112
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 21,
        "lineEnd": 21,
        "columnStart": 4,
        "columnEnd": 205
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 28,
        "lineEnd": 28,
        "columnStart": 4,
        "columnEnd": 111
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 30,
        "lineEnd": 30,
        "columnStart": 4,
        "columnEnd": 201
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 37,
        "lineEnd": 37,
        "columnStart": 4,
        "columnEnd": 107
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 40,
        "lineEnd": 40,
        "columnStart": 4,
        "columnEnd": 183
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 67,
        "lineEnd": 67,
        "columnStart": 4,
        "columnEnd": 114
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# Inherit from Heroku's stack\nFROM heroku/cedar:14\n\n# Internally, we arbitrarily use port 3000\nENV PORT 3000\n\n# Which versions?\nENV PHP_VERSION 5.6.15\nENV HTTPD_VERSION 2.4.17\nENV NGINX_VERSION 1.8.0\n\n# Create some needed directories\nRUN mkdir -p /app/.heroku/php /app/.profile.d\nWORKDIR /app/user\n\n# so we can run PHP in here\nENV PATH /app/.heroku/php/bin:/app/.heroku/php/sbin:$PATH\n\n# Install Apache\nRUN curl -f --silent --location https://lang-php.s3.amazonaws.com/dist-cedar-14-master/apache-$HTTPD_VERSION.tar.gz | tar xz -C /app/.heroku/php\n# Config\nRUN curl -f --silent --location https://raw.githubusercontent.com/heroku/heroku-buildpack-php/5a770b914549cf2a897cbbaf379eb5adf410d464/conf/apache2/httpd.conf.default > /app/.heroku/php/etc/apache2/httpd.conf\n# FPM socket permissions workaround when run as root\nRUN echo \"\\n\\\nGroup root\\n\\\n\" >> /app/.heroku/php/etc/apache2/httpd.conf\n\n# Install Nginx\nRUN curl -f --silent --location https://lang-php.s3.amazonaws.com/dist-cedar-14-master/nginx-$NGINX_VERSION.tar.gz | tar xz -C /app/.heroku/php\n# Config\nRUN curl -f --silent --location https://raw.githubusercontent.com/heroku/heroku-buildpack-php/5a770b914549cf2a897cbbaf379eb5adf410d464/conf/nginx/nginx.conf.default > /app/.heroku/php/etc/nginx/nginx.conf\n# FPM socket permissions workaround when run as root\nRUN echo \"\\n\\\nuser nobody root;\\n\\\n\" >> /app/.heroku/php/etc/nginx/nginx.conf\n\n# Install PHP\nRUN curl -f --silent --location https://lang-php.s3.amazonaws.com/dist-cedar-14-master/php-$PHP_VERSION.tar.gz | tar xz -C /app/.heroku/php\n# Config\nRUN mkdir -p /app/.heroku/php/etc/php/conf.d\nRUN curl -f --silent --location https://raw.githubusercontent.com/heroku/heroku-buildpack-php/5a770b914549cf2a897cbbaf379eb5adf410d464/conf/php/php.ini > /app/.heroku/php/etc/php/php.ini\n# Enable all optional exts\nRUN echo \"\\n\\\nuser_ini.cache_ttl = 30 \\n\\\nzend_extension = opcache.so \\n\\\nopcache.enable_cli = 1 \\n\\\nopcache.validate_timestamps = 1 \\n\\\nopcache.revalidate_freq = 0 \\n\\\nopcache.fast_shutdown = 0 \\n\\\nextension=bcmath.so \\n\\\nextension=calendar.so \\n\\\nextension=exif.so \\n\\\nextension=ftp.so \\n\\\nextension=gd.so \\n\\\nextension=gettext.so \\n\\\nextension=intl.so \\n\\\nextension=mbstring.so \\n\\\nextension=pcntl.so \\n\\\nextension=shmop.so \\n\\\nextension=soap.so \\n\\\nextension=sqlite3.so \\n\\\nextension=pdo_sqlite.so \\n\\\nextension=xmlrpc.so \\n\\\nextension=xsl.so\\n\\\n\" >> /app/.heroku/php/etc/php/php.ini\n\n# Install Composer\nRUN curl -f --silent --location \"https://lang-php.s3.amazonaws.com/dist-cedar-14-master/composer-1.0.0alpha11.tar.gz\" | tar xz -C /app/.heroku/php\n\n# copy dep files first so Docker caches the install step if they don't change\nONBUILD COPY composer.lock /app/user/\nONBUILD COPY composer.json /app/user/\n# run install but without scripts as we don't have the app source yet\nONBUILD RUN composer install --no-scripts\n# require the buildpack for execution\nONBUILD RUN composer show --installed heroku/heroku-buildpack-php || { echo 'Your composer.json must have \"heroku/heroku-buildpack-php\" as a \"require-dev\" dependency.'; exit 1; }\n# rest of app\nONBUILD ADD . /app/user/\n# run install hooks\nONBUILD RUN cat composer.json | python -c 'import sys,json; sys.exit(\"post-install-cmd\" not in json.load(sys.stdin).get(\"scripts\", {}));' && composer run-script post-install-cmd || true\n\n# TODO: run \"composer compile\", like Heroku?\n\n# ENTRYPOINT [\"/usr/bin/init.sh\"]"
}