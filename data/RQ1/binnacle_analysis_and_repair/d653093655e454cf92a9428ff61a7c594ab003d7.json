{
  "startTime": 1674236872294,
  "endTime": 1674236872901,
  "originalSmells": [
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 56,
        "lineEnd": 56,
        "columnStart": 4,
        "columnEnd": 54
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 38,
        "lineEnd": 52,
        "columnStart": 22,
        "columnEnd": 18
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# Â© Copyright IBM Corporation 2017, 2019.\n# LICENSE: Apache License, Version 2.0 (http://www.apache.org/licenses/LICENSE-2.0)\n\n#################### Dockerfile for Beats 7.0.1 #############################\n# Beats is the platform for single-purpose data shippers\n#\n# To build this image, from the directory containing this Dockerfile\n# (assuming that the file is named Dockerfile):\n# docker build -t <image_name> .\n#\n# To create a container of Beats image run the below command:\n# docker run --name <container_name> -it  <image_name> /bin/bash\n#\n# The following modules are present in beats: heartbeat ,filebeat ,metricbeat , packetbeat, libbeat, auditbeat journalbeat\n# docker run --name <container_name> -e BEATSNAME=<beat_name> -d <image_name>\n#\n# To run a particular module like heartbeat run the following command:\n# docker run --name <container_name> -e BEATSNAME=heartbeat -d <image_name>\n#\n# Note : To run auditbeat use options : --cap-add=AUDIT_CONTROL --cap-add=AUDIT_READ --pid=host to docker run\n# docker run --cap-add=AUDIT_CONTROL --cap-add=AUDIT_READ --pid=host --name <container_name> -e BEATSNAME=auditbeat -d <image_name>\n###########################################################################################################\n\n# Base image\nFROM s390x/ubuntu:16.04\n\nARG BEATS_VER=7.0.1\n\n# The author\nLABEL maintainer=\"LoZ Open Source Ecosystem (https://www.ibm.com/developerworks/community/groups/community/lozopensource)\"\n\n# Set environment variable\nENV SOURCE_DIR=/tmp/source\nWORKDIR $SOURCE_DIR\nENV GOPATH=$SOURCE_DIR\nENV PATH=$PATH:/usr/local/go/bin/:$GOPATH/bin\n\n# Install dependencies\nRUN apt-get update && apt-get install --no-install-recommends -y \\\n    acl \\\n    gcc \\\n    git \\\n    libcap-dev \\\n    libpcap0.8-dev \\\n    libssh-dev \\\n    make \\\n    openssl \\\n    python \\\n    python-openssl \\\n    python-setuptools \\\n    tar \\\n    wget \\\n    libsystemd-dev \\\n# Install go and download beats source code\n && wget https://storage.googleapis.com/golang/go1.10.8.linux-s390x.tar.gz \\\n && chmod ugo+r go1.10.8.linux-s390x.tar.gz \\\n && tar -C /usr/local -xzf go1.10.8.linux-s390x.tar.gz \\\n && python -m easy_install pip \\\n && python -m pip install appdirs pyparsing six packaging setuptools wheel PyYAML termcolor ordereddict nose-timer MarkupSafe virtualenv \\\n && setfacl -dm u::rwx,g::r,o::r $GOPATH \\\n && mkdir -p $GOPATH/src/github.com/elastic \\\n && cd $GOPATH/src/github.com/elastic \\\n && git clone https://github.com/elastic/beats.git \\\n && cd beats \\\n && git checkout v${BEATS_VER} \\\n# Building auditbeat\n && sed -i '37i var \\(' $GOPATH/src/github.com/elastic/beats/vendor/github.com/elastic/go-libaudit/audit.go \\\n && sed -i '38i\\\\tbyteOrder = GetEndian\\(\\)' $GOPATH/src/github.com/elastic/beats/vendor/github.com/elastic/go-libaudit/audit.go \\\n && sed -i '39i \\)' $GOPATH/src/github.com/elastic/beats/vendor/github.com/elastic/go-libaudit/audit.go \\\n && sed -i 's/binary.LittleEndian/byteOrder/g' $GOPATH/src/github.com/elastic/beats/vendor/github.com/elastic/go-libaudit/audit.go \\\n && sed -i '23d' $GOPATH/src/github.com/elastic/beats/vendor/github.com/elastic/go-libaudit/netlink.go \\\n && sed -i 's/^\\tbinary.LittleEndian/\\tbyteOrder/g' $GOPATH/src/github.com/elastic/beats/vendor/github.com/elastic/go-libaudit/netlink.go \\\n && sed -i 's/binary.LittleEndian/GetEndian\\(\\)/g' $GOPATH/src/github.com/elastic/beats/vendor/github.com/elastic/go-libaudit/netlink.go \\\n && sed -i '25i\\\\t\\\"github.com/elastic/go-libaudit\\\"' $GOPATH/src/github.com/elastic/beats/vendor/github.com/elastic/go-libaudit/rule/binary.go \\\n && sed -i 's/binary.LittleEndian/libaudit.GetEndian\\(\\)/g' $GOPATH/src/github.com/elastic/beats/vendor/github.com/elastic/go-libaudit/rule/binary.go \\\n && echo  \"package libaudit\\n\\nimport (\" >> $GOPATH/src/github.com/elastic/beats/vendor/github.com/elastic/go-libaudit/endian.go \\\n && echo  \"\\t\\\"encoding/binary\\\"\\n\\t\\\"unsafe\\\"\\n)\" >> $GOPATH/src/github.com/elastic/beats/vendor/github.com/elastic/go-libaudit/endian.go \\\n && echo  \"func GetEndian() binary.ByteOrder {\" >> $GOPATH/src/github.com/elastic/beats/vendor/github.com/elastic/go-libaudit/endian.go \\\n && echo  \"\\tvar i int32 = 0x1\" >> $GOPATH/src/github.com/elastic/beats/vendor/github.com/elastic/go-libaudit/endian.go \\\n && echo  \"\\tv := (*[4]byte)(unsafe.Pointer(&i))\" >> $GOPATH/src/github.com/elastic/beats/vendor/github.com/elastic/go-libaudit/endian.go \\\n && echo  \"\\tif v[0] == 0 {\" >> $GOPATH/src/github.com/elastic/beats/vendor/github.com/elastic/go-libaudit/endian.go \\\n && echo  \"\\t\\treturn binary.BigEndian\" >> $GOPATH/src/github.com/elastic/beats/vendor/github.com/elastic/go-libaudit/endian.go \\\n && echo  \"\\t} else {\" >> $GOPATH/src/github.com/elastic/beats/vendor/github.com/elastic/go-libaudit/endian.go \\\n && echo  \"\\t\\treturn binary.LittleEndian\\n\\t}\\n}\" >> $GOPATH/src/github.com/elastic/beats/vendor/github.com/elastic/go-libaudit/endian.go \\\n && sed -i 's/encoding=\"utf-16\"/encoding=\"utf-16le\"/g' $GOPATH/src/github.com/elastic/beats/filebeat/tests/system/test_harvester.py \\\n && sed -i '1d'  $GOPATH/src/github.com/elastic/beats/vendor/github.com/OneOfOne/xxhash/xxhash_safe.go \\\n && sed -i '1i// +build appengine safe ppc64le ppc64be mipsle mips s390x' $GOPATH/src/github.com/elastic/beats/vendor/github.com/OneOfOne/xxhash/xxhash_safe.go \\\n && sed -i '7i// +build !s390x' $GOPATH/src/github.com/elastic/beats/vendor/github.com/OneOfOne/xxhash/xxhash_unsafe.go \\\n# Building heartbeat\n && cd $GOPATH/src/github.com/elastic/beats/heartbeat \\\n && make  heartbeat \\\n# Building filebeat\n && cd $GOPATH/src/github.com/elastic/beats/filebeat \\\n && make  filebeat \\\n# Building packetbeat\n && cd $GOPATH/src/github.com/elastic/beats/packetbeat \\\n && make  packetbeat \\\n# Building metricbeat\n && cd $GOPATH/src/github.com/elastic/beats/metricbeat \\\n && make  metricbeat \\\n# Building libbeat\n && cd $GOPATH/src/github.com/elastic/beats/libbeat \\\n && make libbeat \\\n# Building journalbeat\n && cd $GOPATH/src/github.com/elastic/beats/journalbeat \\\n && make journalbeat \\\n# Building auditbeat\n && cd $GOPATH/src/github.com/elastic/beats/auditbeat \\\n && make auditbeat \\\n && cp -r $GOPATH/src/github.com/elastic/beats /opt/beats \\\n && ln -s /opt/beats/heartbeat/heartbeat /usr/bin/heartbeat \\\n && ln -s /opt/beats/packetbeat/packetbeat /usr/bin/packetbeat \\\n && ln -s /opt/beats/libbeat/libbeat /usr/bin/libbeat \\\n && ln -s /opt/beats/metricbeat/metricbeat /usr/bin/metricbeat \\\n && ln -s /opt/beats/filebeat/filebeat /usr/bin/filebeat \\\n && ln -s /opt/beats/auditbeat/auditbeat /usr/bin/auditbeat \\\n && ln -s /opt/beats/journalbeat/journalbeat /usr/bin/journalbeat \\\n# Tidy and clean up\n && apt-get remove -y \\\n    acl \\\n    git \\\n    libssh-dev \\\n    make \\\n    wget \\\n && apt-get autoremove -y \\\n && apt autoremove -y \\\n && apt-get clean \\\n && rm -rf /var/lib/apt/lists/* $SOURCE_DIR \\\n && mkdir /Beats \\\n && cd /opt/beats \\\n && cp -n **/*.yml /Beats && rm go1.10.8.linux-s390x.tar.gz\n\n# Create mount point for configuration files\nVOLUME /Beats\n\nCMD $BEATSNAME -e -path.config /Beats -d \"publish\"\n\n"
}