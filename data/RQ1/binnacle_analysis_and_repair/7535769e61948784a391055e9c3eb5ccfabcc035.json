{
  "startTime": 1674251043221,
  "endTime": 1674251043870,
  "originalSmells": [
    {
      "rule": "wgetUseHttpsUrl",
      "position": {
        "lineStart": 76,
        "lineEnd": 77,
        "columnStart": 4,
        "columnEnd": 164
      }
    },
    {
      "rule": "wgetUseHttpsUrl",
      "position": {
        "lineStart": 117,
        "lineEnd": 118,
        "columnStart": 4,
        "columnEnd": 100
      }
    },
    {
      "rule": "wgetUseHttpsUrl",
      "position": {
        "lineStart": 133,
        "lineEnd": 133,
        "columnStart": 7,
        "columnEnd": 82
      }
    },
    {
      "rule": "wgetUseHttpsUrl",
      "position": {
        "lineStart": 134,
        "lineEnd": 134,
        "columnStart": 7,
        "columnEnd": 86
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 78,
        "lineEnd": 78,
        "columnStart": 4,
        "columnEnd": 66
      }
    },
    {
      "rule": "gpgUseBatchFlag",
      "position": {
        "lineStart": 136,
        "lineEnd": 136,
        "columnStart": 7,
        "columnEnd": 65
      }
    },
    {
      "rule": "apkAddUseNoCache",
      "position": {
        "lineStart": 18,
        "lineEnd": 29,
        "columnStart": 7,
        "columnEnd": 15
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "#upstream https://github.com/kubernetes/contrib/tree/master/statefulsets/zookeeper\nFROM alpine:3.9\nMAINTAINER 若虚 <slpcat@qq.com>\n\n# Container variables\nENV \\\n    TERM=\"xterm\" \\\n    LANG=\"en_US.UTF-8\" \\\n    LANGUAGE=\"en_US.UTF-8\" \\\n    LC_ALL=\"en_US.UTF-8\" \\\n    TIMEZONE=\"Asia/Shanghai\"\n\nRUN sed -i 's/dl-cdn.alpinelinux.org/mirrors.aliyun.com/' /etc/apk/repositories\n\n# Set timezone and locales\nRUN set -ex \\\n    && apk update \\\n    && apk upgrade \\\n    && apk add --no-cache \\\n           bash \\\n           gnupg \\\n           shadow \\\n           tzdata \\\n           vim \\\n           tini \\\n           su-exec \\\n           gzip \\\n           tar \\\n           wget \\\n           curl \\\n    && echo \"${TIMEZONE}\" > /etc/TZ \\\n    && ln -sf /usr/share/zoneinfo/${TIMEZONE} /etc/localtime \\\n    # Network fix\n    && echo 'hosts: files mdns4_minimal [NOTFOUND=return] dns mdns4' >> /etc/nsswitch.conf\n\n# Here we install GNU libc (aka glibc) and set en_US.UTF-8 locale as default.\n\nRUN ALPINE_GLIBC_BASE_URL=\"https://github.com/sgerrand/alpine-pkg-glibc/releases/download\" && \\\n    ALPINE_GLIBC_PACKAGE_VERSION=\"2.28-r0\" && \\\n    ALPINE_GLIBC_BASE_PACKAGE_FILENAME=\"glibc-$ALPINE_GLIBC_PACKAGE_VERSION.apk\" && \\\n    ALPINE_GLIBC_BIN_PACKAGE_FILENAME=\"glibc-bin-$ALPINE_GLIBC_PACKAGE_VERSION.apk\" && \\\n    ALPINE_GLIBC_I18N_PACKAGE_FILENAME=\"glibc-i18n-$ALPINE_GLIBC_PACKAGE_VERSION.apk\" && \\\n    apk add --no-cache --virtual=.build-dependencies wget ca-certificates && \\\n    wget \\\n        \"https://alpine-pkgs.sgerrand.com/sgerrand.rsa.pub\" \\\n        -O \"/etc/apk/keys/sgerrand.rsa.pub\" && \\\n    wget \\\n        \"$ALPINE_GLIBC_BASE_URL/$ALPINE_GLIBC_PACKAGE_VERSION/$ALPINE_GLIBC_BASE_PACKAGE_FILENAME\" \\\n        \"$ALPINE_GLIBC_BASE_URL/$ALPINE_GLIBC_PACKAGE_VERSION/$ALPINE_GLIBC_BIN_PACKAGE_FILENAME\" \\\n        \"$ALPINE_GLIBC_BASE_URL/$ALPINE_GLIBC_PACKAGE_VERSION/$ALPINE_GLIBC_I18N_PACKAGE_FILENAME\" && \\\n    apk add --no-cache \\\n        \"$ALPINE_GLIBC_BASE_PACKAGE_FILENAME\" \\\n        \"$ALPINE_GLIBC_BIN_PACKAGE_FILENAME\" \\\n        \"$ALPINE_GLIBC_I18N_PACKAGE_FILENAME\" && \\\n    \\\n    rm \"/etc/apk/keys/sgerrand.rsa.pub\" && \\\n    /usr/glibc-compat/bin/localedef --force --inputfile POSIX --charmap UTF-8 \"$LANG\" || true && \\\n    echo \"export LANG=$LANG\" > /etc/profile.d/locale.sh && \\\n    \\\n    apk del glibc-i18n && \\\n    \\\n    rm \"/root/.wget-hsts\" && \\\n    apk del .build-dependencies && \\\n    rm \\\n        \"$ALPINE_GLIBC_BASE_PACKAGE_FILENAME\" \\\n        \"$ALPINE_GLIBC_BIN_PACKAGE_FILENAME\" \\\n        \"$ALPINE_GLIBC_I18N_PACKAGE_FILENAME\"\n\nENV JAVA_VERSION=8 \\\n    JAVA_UPDATE=201 \\\n    JAVA_BUILD=09 \\\n    JAVA_PATH=42970487e3af4f5aa5bca3f542482c60 \\\n    JAVA_HOME=\"/usr/lib/jvm/default-jvm\"\n\nRUN apk add --no-cache --virtual=build-dependencies wget ca-certificates unzip && \\\n    cd \"/tmp\" && \\\n    wget --header \"Cookie: oraclelicense=accept-securebackup-cookie;\" \\\n        \"https://download.oracle.com/otn-pub/java/jdk/${JAVA_VERSION}u${JAVA_UPDATE}-b${JAVA_BUILD}/${JAVA_PATH}/jdk-${JAVA_VERSION}u${JAVA_UPDATE}-linux-x64.tar.gz\" && \\\n    tar -xzf \"jdk-${JAVA_VERSION}u${JAVA_UPDATE}-linux-x64.tar.gz\" && \\\n    mkdir -p \"/usr/lib/jvm\" && \\\n    mv \"/tmp/jdk1.${JAVA_VERSION}.0_${JAVA_UPDATE}\" \"/usr/lib/jvm/java-${JAVA_VERSION}-oracle\" && \\\n    ln -s \"java-${JAVA_VERSION}-oracle\" \"$JAVA_HOME\" && \\\n    ln -s \"$JAVA_HOME/bin/\"* \"/usr/bin/\" && \\\n    rm -rf \"$JAVA_HOME/\"*src.zip && \\\n    rm -rf \"$JAVA_HOME/lib/missioncontrol\" \\\n           \"$JAVA_HOME/lib/visualvm\" \\\n           \"$JAVA_HOME/lib/\"*javafx* \\\n           \"$JAVA_HOME/jre/lib/plugin.jar\" \\\n           \"$JAVA_HOME/jre/lib/ext/jfxrt.jar\" \\\n           \"$JAVA_HOME/jre/bin/javaws\" \\\n           \"$JAVA_HOME/jre/lib/javaws.jar\" \\\n           \"$JAVA_HOME/jre/lib/desktop\" \\\n           \"$JAVA_HOME/jre/plugin\" \\\n           \"$JAVA_HOME/jre/lib/\"deploy* \\\n           \"$JAVA_HOME/jre/lib/\"*javafx* \\\n           \"$JAVA_HOME/jre/lib/\"*jfx* \\\n           \"$JAVA_HOME/jre/lib/amd64/libdecora_sse.so\" \\\n           \"$JAVA_HOME/jre/lib/amd64/\"libprism_*.so \\\n           \"$JAVA_HOME/jre/lib/amd64/libfxplugins.so\" \\\n           \"$JAVA_HOME/jre/lib/amd64/libglass.so\" \\\n           \"$JAVA_HOME/jre/lib/amd64/libgstreamer-lite.so\" \\\n           \"$JAVA_HOME/jre/lib/amd64/\"libjavafx*.so \\\n           \"$JAVA_HOME/jre/lib/amd64/\"libjfx*.so && \\\n    rm -rf \"$JAVA_HOME/jre/bin/jjs\" \\\n           \"$JAVA_HOME/jre/bin/keytool\" \\\n           \"$JAVA_HOME/jre/bin/orbd\" \\\n           \"$JAVA_HOME/jre/bin/pack200\" \\\n           \"$JAVA_HOME/jre/bin/policytool\" \\\n           \"$JAVA_HOME/jre/bin/rmid\" \\\n           \"$JAVA_HOME/jre/bin/rmiregistry\" \\\n           \"$JAVA_HOME/jre/bin/servertool\" \\\n           \"$JAVA_HOME/jre/bin/tnameserv\" \\\n           \"$JAVA_HOME/jre/bin/unpack200\" \\\n           \"$JAVA_HOME/jre/lib/ext/nashorn.jar\" \\\n           \"$JAVA_HOME/jre/lib/jfr.jar\" \\\n           \"$JAVA_HOME/jre/lib/jfr\" \\\n           \"$JAVA_HOME/jre/lib/oblique-fonts\" && \\\n    wget --header \"Cookie: oraclelicense=accept-securebackup-cookie;\" \\\n        \"https://download.oracle.com/otn-pub/java/jce/${JAVA_VERSION}/jce_policy-${JAVA_VERSION}.zip\" && \\\n    unzip -jo -d \"${JAVA_HOME}/jre/lib/security\" \"jce_policy-${JAVA_VERSION}.zip\" && \\\n    rm \"${JAVA_HOME}/jre/lib/security/README.txt\" && \\\n    apk del build-dependencies && \\\n    rm \"/tmp/\"* && rm \"jdk-${JAVA_VERSION}u${JAVA_UPDATE}-linux-x64.tar.gz\"\n\nENV ZK_USER=zookeeper \\\n    ZK_DATA_DIR=/var/lib/zookeeper/data \\\n    ZK_DATA_LOG_DIR=/var/lib/zookeeper/log \\\n    ZK_LOG_DIR=/var/log/zookeeper\n\nARG GPG_KEY=C823E3E5B12AF29C67F81976F5CECB3CB5E9BD2D\nARG ZK_DIST=zookeeper-3.4.10\n\nRUN set -x \\\n    && wget -q \"https://archive.apache.org/dist/zookeeper/$ZK_DIST/$ZK_DIST.tar.gz\" \\\n    && wget -q \"https://archive.apache.org/dist/zookeeper/$ZK_DIST/$ZK_DIST.tar.gz.asc\" \\\n    && export GNUPGHOME=\"$(mktemp -d)\" \\\n    && gpg --batch --keyserver keyserver.ubuntu.com --recv-key \"$GPG_KEY\" \\\n    && gpg --batch --verify \"$ZK_DIST.tar.gz.asc\" \"$ZK_DIST.tar.gz\" \\\n    && tar -xzf \"$ZK_DIST.tar.gz\" -C /opt \\\n    && rm -r \"$GNUPGHOME\" \"$ZK_DIST.tar.gz\" \"$ZK_DIST.tar.gz.asc\" \\\n    && ln -s /opt/$ZK_DIST /opt/zookeeper \\\n    && rm -rf /opt/zookeeper/CHANGES.txt \\\n    /opt/zookeeper/README.txt \\\n    /opt/zookeeper/NOTICE.txt \\\n    /opt/zookeeper/CHANGES.txt \\\n    /opt/zookeeper/README_packaging.txt \\\n    /opt/zookeeper/build.xml \\\n    /opt/zookeeper/config \\\n    /opt/zookeeper/contrib \\\n    /opt/zookeeper/dist-maven \\\n    /opt/zookeeper/docs \\\n    /opt/zookeeper/ivy.xml \\\n    /opt/zookeeper/ivysettings.xml \\\n    /opt/zookeeper/recipes \\\n    /opt/zookeeper/src \\\n    /opt/zookeeper/$ZK_DIST.jar.asc \\\n    /opt/zookeeper/$ZK_DIST.jar.md5 \\\n    /opt/zookeeper/$ZK_DIST.jar.sha1\n\n# Copy configuration generator script to bin\nCOPY zkGenConfig.sh zkOk.sh zkMetrics.sh /opt/zookeeper/bin/\n\n# Create a user for the zookeeper process and configure file system ownership\n# for necessary directories and symlink the distribution as a user executable\nRUN set -x \\\n    && useradd $ZK_USER \\\n    && [ `id -u $ZK_USER` -eq 1000 ] \\\n    && [ `id -g $ZK_USER` -eq 1000 ] \\\n    && mkdir -p $ZK_DATA_DIR $ZK_DATA_LOG_DIR $ZK_LOG_DIR /usr/share/zookeeper /tmp/zookeeper /usr/etc/ \\\n    && chown -R \"$ZK_USER:$ZK_USER\" /opt/$ZK_DIST $ZK_DATA_DIR $ZK_LOG_DIR $ZK_DATA_LOG_DIR /tmp/zookeeper \\\n    && ln -s /opt/zookeeper/conf/ /usr/etc/zookeeper \\\n    && ln -s /opt/zookeeper/bin/* /usr/bin \\\n    && ln -s /opt/zookeeper/$ZK_DIST.jar /usr/share/zookeeper/ \\\n    && ln -s /opt/zookeeper/lib/* /usr/share/zookeeper\nCMD [\"sh\", \"-c\", \"zkGenConfig.sh && zkServer.sh start-foreground\"]\n"
}