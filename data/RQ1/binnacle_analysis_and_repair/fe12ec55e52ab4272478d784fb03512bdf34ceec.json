{
  "startTime": 1674252287032,
  "endTime": 1674252287221,
  "originalSmells": [
    {
      "rule": "sha256sumEchoOneSpaces",
      "position": {
        "lineStart": 23,
        "lineEnd": 24,
        "columnStart": 4,
        "columnEnd": 22
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 38,
        "lineEnd": 38,
        "columnStart": 4,
        "columnEnd": 78
      }
    },
    {
      "rule": "gpgUseBatchFlag",
      "position": {
        "lineStart": 28,
        "lineEnd": 28,
        "columnStart": 4,
        "columnEnd": 63
      }
    },
    {
      "rule": "gpgUseBatchFlag",
      "position": {
        "lineStart": 34,
        "lineEnd": 34,
        "columnStart": 4,
        "columnEnd": 68
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "#===- llvm/utils/docker/debian8/build/Dockerfile -------------------------===//\n#\n#                     The LLVM Compiler Infrastructure\n#\n# This file is distributed under the University of Illinois Open Source\n# License. See LICENSE.TXT for details.\n#\n#===----------------------------------------------------------------------===//\n# Stage 1. Check out LLVM source code and run the build.\nFROM launcher.gcr.io/google/debian8:latest as builder\nLABEL maintainer \"LLVM Developers\"\n# Install build dependencies of llvm.\n# First, Update the apt's source list and include the sources of the packages.\nRUN grep deb /etc/apt/sources.list | \\\n    sed 's/^deb/deb-src /g' >> /etc/apt/sources.list\n# Install compiler, python and subversion.\nRUN apt-get update && \\\n    apt-get install -y --no-install-recommends ca-certificates gnupg \\\n           build-essential python wget subversion unzip && \\\n    rm -rf /var/lib/apt/lists/*\n# Install a newer ninja release. It seems the older version in the debian repos\n# randomly crashes when compiling llvm.\nRUN wget \"https://github.com/ninja-build/ninja/releases/download/v1.8.2/ninja-linux.zip\" && \\\n    echo \"d2fea9ff33b3ef353161ed906f260d565ca55b8ca0568fa07b1d2cab90a84a07  ninja-linux.zip\" \\\n        | sha256sum -c && \\\n    unzip ninja-linux.zip -d /usr/local/bin && \\\n    rm ninja-linux.zip\n# Import public key required for verifying signature of cmake download.\nRUN gpg --batch --keyserver hkp://pgp.mit.edu --recv 0x2D2CEF1034921684\n# Download, verify and install cmake version that can compile clang into /usr/local.\n# (Version in debian8 repos is is too old)\nRUN mkdir /tmp/cmake-install && cd /tmp/cmake-install && \\\n    wget \"https://cmake.org/files/v3.7/cmake-3.7.2-SHA-256.txt.asc\" && \\\n    wget \"https://cmake.org/files/v3.7/cmake-3.7.2-SHA-256.txt\" && \\\n    gpg --batch --verify cmake-3.7.2-SHA-256.txt.asc cmake-3.7.2-SHA-256.txt && \\\n    wget \"https://cmake.org/files/v3.7/cmake-3.7.2-Linux-x86_64.tar.gz\" && \\\n    ( grep \"cmake-3.7.2-Linux-x86_64.tar.gz\" cmake-3.7.2-SHA-256.txt | \\\n      sha256sum -c - ) && \\\n    tar xzf cmake-3.7.2-Linux-x86_64.tar.gz -C /usr/local --strip-components=1 && \\\n    cd / && rm -rf /tmp/cmake-install && rm cmake-3.7.2-Linux-x86_64.tar.gz\n\nADD checksums /tmp/checksums\nADD scripts /tmp/scripts\n\n# Checkout the source code.\nARG checkout_args\nRUN /tmp/scripts/checkout.sh ${checkout_args}\n# Run the build. Results of the build will be available at /tmp/clang-install/.\nARG buildscript_args\nRUN /tmp/scripts/build_install_llvm.sh --to /tmp/clang-install ${buildscript_args}\n\n\n# Stage 2. Produce a minimal release image with build results.\nFROM launcher.gcr.io/google/debian8:latest\nLABEL maintainer \"LLVM Developers\"\n# Install packages for minimal useful image.\nRUN apt-get update && \\\n    apt-get install -y --no-install-recommends libstdc++-4.9-dev binutils && \\\n    rm -rf /var/lib/apt/lists/*\n# Copy build results of stage 1 to /usr/local.\nCOPY --from=builder /tmp/clang-install/ /usr/local/\n"
}