{
  "startTime": 1674241204471,
  "endTime": 1674241205600,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 151,
        "lineEnd": 151,
        "columnStart": 1,
        "columnEnd": 26
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 172,
        "lineEnd": 174,
        "columnStart": 1,
        "columnEnd": 128
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 175,
        "lineEnd": 177,
        "columnStart": 1,
        "columnEnd": 124
      }
    },
    {
      "rule": "curlUseHttpsUrl",
      "position": {
        "lineStart": 151,
        "lineEnd": 151,
        "columnStart": 1,
        "columnEnd": 26
      }
    },
    {
      "rule": "curlUseHttpsUrl",
      "position": {
        "lineStart": 172,
        "lineEnd": 174,
        "columnStart": 1,
        "columnEnd": 128
      }
    },
    {
      "rule": "curlUseHttpsUrl",
      "position": {
        "lineStart": 175,
        "lineEnd": 177,
        "columnStart": 1,
        "columnEnd": 124
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 103,
        "lineEnd": 103,
        "columnStart": 2,
        "columnEnd": 23
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 91,
        "lineEnd": 91,
        "columnStart": 0,
        "columnEnd": 22
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 157,
        "lineEnd": 157,
        "columnStart": 0,
        "columnEnd": 144
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 164,
        "lineEnd": 164,
        "columnStart": 16,
        "columnEnd": 27
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 170,
        "lineEnd": 170,
        "columnStart": 16,
        "columnEnd": 43
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 181,
        "lineEnd": 182,
        "columnStart": 1,
        "columnEnd": 46
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 183,
        "lineEnd": 184,
        "columnStart": 1,
        "columnEnd": 43
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM lsiobase/alpine:3.8\n\nMAINTAINER romancin\n\n# set version label\nARG BUILD_DATE\nARG VERSION\nARG BUILD_CORES\nLABEL build_version=\"Romancin version:- ${VERSION} Build-date:- ${BUILD_DATE}\"\n\n# package version\nARG MEDIAINF_VER=\"19.04\"\nARG RTORRENT_VER=\"v0.9.7\"\nARG LIBTORRENT_VER=\"v0.13.7\"\nARG CURL_VER=\"7.64.1\"\nARG GEOIP_VER=\"1.1.1\"\n\n# set env\nENV PKG_CONFIG_PATH=/usr/local/lib/pkgconfig\nENV LD_LIBRARY_PATH=/usr/local/lib\nENV CONTEXT_PATH=/\nENV CREATE_SUBDIR_BY_TRACKERS=\"no\"\n\nRUN NB_CORES=${BUILD_CORES-`getconf _NPROCESSORS_CONF`} && \\\n apk add --no-cache \\\n\tbash-completion \\\n        ca-certificates \\\n        fcgi \\\n        ffmpeg \\\n        geoip \\\n\t geoip-dev \\\n        gzip \\\n        logrotate \\\n        nginx \\\n        dtach \\\n        tar \\\n        unrar \\\n        unzip \\\n        sox \\\n        wget \\\n        irssi \\\n        irssi-perl \\\n        zlib \\\n        zlib-dev \\\n        libxml2-dev \\\n        perl-archive-zip \\\n        perl-net-ssleay \\\n        perl-digest-sha1 \\\n        git \\\n        libressl \\\n        binutils \\\n        findutils \\\n        zip \\\n        php7 \\\n        php7-cgi \\\n        php7-fpm \\\n        php7-json  \\\n        php7-mbstring \\\n        php7-sockets \\\n        php7-pear \\\n\t php7-opcache \\\n        php7-apcu \\\n        php7-ctype \\\n        php7-dev \\\n        php7-phar \\\n        php7-zip \\\n        python \\\n        python3 && \\\n# install build packages\n apk add --no-cache --virtual=build-dependencies \\\n        autoconf \\\n        automake \\\n        cppunit-dev \\\n        perl-dev \\\n        file \\\n        g++ \\\n        gcc \\\n        libtool \\\n        make \\\n        ncurses-dev \\\n        build-base \\\n        libtool \\\n        subversion \\\n        linux-headers \\\n        curl-dev \\\n        libressl-dev && \\\n# compile curl to fix ssl for rtorrent\ncd /tmp && \\\nmkdir curl && \\\ncd curl && \\\nwget -qO- https://curl.haxx.se/download/curl-${CURL_VER}.tar.gz | tar xz --strip 1 && \\\n ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --with-ssl && make -j ${NB_CORES} && make install && \\\nldconfig /usr/bin && ldconfig /usr/lib && \\\n# install webui\n mkdir -p \\\n        /usr/share/webapps/rutorrent \\\n        /defaults/rutorrent-conf && \\\n git clone https://github.com/Novik/ruTorrent.git \\\n        /usr/share/webapps/rutorrent/ && \\\n mv /usr/share/webapps/rutorrent/conf/* \\\n        /defaults/rutorrent-conf/ && \\\n rm -rf \\\n        /defaults/rutorrent-conf/users && \\\n  pip3 install --no-cache-dir CfScrape && \\\n# install webui extras\n# QuickBox Theme\ngit clone https://github.com/QuickBox/club-QuickBox /usr/share/webapps/rutorrent/plugins/theme/themes/club-QuickBox && \\\ngit clone https://github.com/Phlooo/ruTorrent-MaterialDesign /usr/share/webapps/rutorrent/plugins/theme/themes/MaterialDesign && \\\n# ruTorrent plugins\ncd /usr/share/webapps/rutorrent/plugins/ && \\\ngit clone https://github.com/orobardet/rutorrent-force_save_session force_save_session && \\\ngit clone https://github.com/AceP1983/ruTorrent-plugins && \\\nmv ruTorrent-plugins/* . && \\\nrm -rf ruTorrent-plugins && \\\napk add --no-cache cksfv && \\\ngit clone https://github.com/nelu/rutorrent-thirdparty-plugins.git && \\\nmv rutorrent-thirdparty-plugins/* . && \\\nrm -rf rutorrent-thirdparty-plugins && \\\ncd /usr/share/webapps/rutorrent/ && \\\nchmod 755 plugins/filemanager/scripts/* && \\\nrm -rf plugins/fileupload && \\\ncd /tmp && \\\ngit clone https://github.com/mcrapet/plowshare.git && \\\ncd plowshare/ && \\\nmake install && \\\ncd .. && \\\nrm -rf plowshare* && \\\napk add --no-cache unzip bzip2 && \\\ncd /usr/share/webapps/rutorrent/plugins/ && \\\ngit clone https://github.com/Gyran/rutorrent-pausewebui pausewebui && \\\ngit clone https://github.com/Gyran/rutorrent-ratiocolor ratiocolor && \\\nsed -i 's/changeWhat = \"cell-background\";/changeWhat = \"font\";/g' /usr/share/webapps/rutorrent/plugins/ratiocolor/init.js && \\\ngit clone https://github.com/Gyran/rutorrent-instantsearch instantsearch && \\\ngit clone https://github.com/xombiemp/rutorrentMobile && \\\ngit clone https://github.com/dioltas/AddZip && \\\ngit clone https://github.com/Micdu70/geoip2-rutorrent geoip2 && \\\nrm -rf geoip && \\\nmkdir -p /usr/share/GeoIP && \\\ncd /usr/share/GeoIP && \\\nwget https://geolite.maxmind.com/download/geoip/database/GeoLite2-City.tar.gz && \\\nwget https://geolite.maxmind.com/download/geoip/database/GeoLite2-Country.tar.gz && \\\ntar xzf GeoLite2-City.tar.gz && \\\ntar xzf GeoLite2-Country.tar.gz && \\\nrm -f *.tar.gz && \\\nmv GeoLite2-*/*.mmdb . && \\\ncp *.mmdb /usr/share/webapps/rutorrent/plugins/geoip2/database/ && \\\npecl install geoip-${GEOIP_VER} && \\\nchmod +x /usr/lib/php7/modules/geoip.so && \\\necho \";extension=geoip.so\" >> /etc/php7/php.ini && \\\n# install autodl-irssi perl modules\n perl -MCPAN -e 'my $c = \"CPAN::HandleConfig\"; $c->load(doit => 1, autoconfig => 1); $c->edit(prerequisites_policy => \"follow\"); $c->edit(build_requires_install_policy => \"yes\"); $c->commit' && \\\n curl -f -L https://cpanmin.us | perl - App::cpanminus && \\\n        cpanm HTML::Entities XML::LibXML JSON JSON::XS && \\\n# compile xmlrpc-c\ncd /tmp && \\\nsvn checkout http://svn.code.sf.net/p/xmlrpc-c/code/stable xmlrpc-c && \\\ncd /tmp/xmlrpc-c && \\\n ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --with-libwww-ssl --disable-wininet-client --disable-curl-client --disable-libwww-client --disable-abyss-server --disable-cgi-server && make -j ${NB_CORES} && make install && \\\n# compile libtorrent\n# apk add -X http://dl-cdn.alpinelinux.org/alpine/v3.6/main -U cppunit-dev==1.13.2-r1 cppunit==1.13.2-r1 && \\\ncd /tmp && \\\nmkdir libtorrent && \\\ncd libtorrent && \\\nwget -qO- https://github.com/rakshasa/libtorrent/archive/${LIBTORRENT_VER}.tar.gz | tar xz --strip 1 && \\\n./autogen.sh && ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" && make -j ${NB_CORES} && make install && \\\n# compile rtorrent\ncd /tmp && \\\nmkdir rtorrent && \\\ncd rtorrent && \\\nwget -qO- https://github.com/rakshasa/rtorrent/archive/${RTORRENT_VER}.tar.gz | tar xz --strip 1 && \\\n./autogen.sh && ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --with-xmlrpc-c && make -j ${NB_CORES} && make install && \\\n# compile mediainfo packages\n curl -f -o \\\n /tmp/libmediainfo.tar.gz -L \\\n        \"https://mediaarea.net/download/binary/libmediainfo0/${MEDIAINF_VER}/MediaInfo_DLL_${MEDIAINF_VER}_GNU_FromSource.tar.gz\" && \\\n curl -f -o \\\n /tmp/mediainfo.tar.gz -L \\\n        \"https://mediaarea.net/download/binary/mediainfo/${MEDIAINF_VER}/MediaInfo_CLI_${MEDIAINF_VER}_GNU_FromSource.tar.gz\" && \\\n mkdir -p \\\n        /tmp/libmediainfo \\\n        /tmp/mediainfo && \\\n tar xf /tmp/libmediainfo.tar.gz -C \\\n        /tmp/libmediainfo --strip-components=1 && \\\n tar xf /tmp/mediainfo.tar.gz -C \\\n        /tmp/mediainfo --strip-components=1 && \\\n cd /tmp/libmediainfo && \\\n        ./SO_Compile.sh && \\\n cd /tmp/libmediainfo/ZenLib/Project/GNU/Library && \\\n        make install && \\\n cd /tmp/libmediainfo/MediaInfoLib/Project/GNU/Library && \\\n        make install && \\\n cd /tmp/mediainfo && \\\n        ./CLI_Compile.sh && \\\n cd /tmp/mediainfo/MediaInfo/Project/GNU/CLI && \\\n        make install && \\\n# cleanup\n apk del --purge \\\n        build-dependencies && \\\n# apk del -X http://dl-cdn.alpinelinux.org/alpine/v3.6/main cppunit-dev && \\\n rm -rf \\\n        /tmp/* && rm /tmp/libmediainfo.tar.gz\n# install flood webui\nRUN  apk add --no-cache \\\n       python \\\n       nodejs \\\n       nodejs-npm && \\\n     apk add --no-cache --virtual=build-dependencies \\\n       build-base && \\\n     mkdir /usr/flood && \\\n     cd /usr/flood && \\\n     git clone https://github.com/jfurrow/flood . && \\\n     cp config.template.js config.js && \\\n     npm install && \\\n     npm cache clean --force && \\\n     npm run build && \\\n     npm prune --production && \\\n     rm config.js && \\\n     apk del --purge build-dependencies && \\\n     ln -s /usr/local/bin/mediainfo /usr/bin/mediainfo\n\n# add local files\nCOPY root/ /\nCOPY VERSION /\n# ports and volumes\nEXPOSE 443 51415 3000\nVOLUME /config /downloads\n"
}