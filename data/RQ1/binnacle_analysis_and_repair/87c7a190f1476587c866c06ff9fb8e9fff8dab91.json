{
  "startTime": 1674234764133,
  "endTime": 1674234764406,
  "originalSmells": [
    {
      "rule": "curlUseHttpsUrl",
      "position": {
        "lineStart": 73,
        "lineEnd": 73,
        "columnStart": 6,
        "columnEnd": 87
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 78,
        "lineEnd": 78,
        "columnStart": 6,
        "columnEnd": 40
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 86,
        "lineEnd": 86,
        "columnStart": 6,
        "columnEnd": 27
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM aqzt/docker-alpine\nLABEL maintainer=\"aqzt.com (ppabc@qq.com)\"\n\n### Set Nginx Version Number\n   ARG NGINX_VERSION=1.14.0\n\n### Install Nginx\n    RUN set -x ; \\\n        CONFIG=\"\\\n        --prefix=/etc/nginx \\\n        --sbin-path=/usr/sbin/nginx \\\n        --modules-path=/usr/lib/nginx/modules \\\n        --conf-path=/etc/nginx/nginx.conf \\\n        --error-log-path=/var/log/nginx/error.log \\\n        --http-log-path=/var/log/nginx/access.log \\\n        --pid-path=/var/run/nginx.pid \\\n        --lock-path=/var/run/nginx.lock \\\n        --http-client-body-temp-path=/var/cache/nginx/client_temp \\\n        --http-proxy-temp-path=/var/cache/nginx/proxy_temp \\\n        --http-fastcgi-temp-path=/var/cache/nginx/fastcgi_temp \\\n        --http-uwsgi-temp-path=/var/cache/nginx/uwsgi_temp \\\n        --http-scgi-temp-path=/var/cache/nginx/scgi_temp \\\n        --user=nginx \\\n        --group=nginx \\\n        --with-http_ssl_module \\\n        --with-http_realip_module \\\n        --with-http_addition_module \\\n        --with-http_sub_module \\\n        --with-http_dav_module \\\n        --with-http_flv_module \\\n        --with-http_mp4_module \\\n        --with-http_gunzip_module \\\n        --with-http_gzip_static_module \\\n        --with-http_random_index_module \\\n        --with-http_secure_link_module \\\n        --with-http_stub_status_module \\\n        --with-http_auth_request_module \\\n        --with-http_xslt_module=dynamic \\\n        --with-http_image_filter_module=dynamic \\\n        --with-http_geoip_module=dynamic \\\n        --with-http_perl_module=dynamic \\\n        --with-threads \\\n        --with-stream \\\n        --with-stream_ssl_module \\\n        --with-stream_ssl_preread_module \\\n        --with-stream_realip_module \\\n        --with-stream_geoip_module=dynamic \\\n        --with-http_slice_module \\\n        --with-mail \\\n        --with-mail_ssl_module \\\n        --with-compat \\\n        --with-file-aio \\\n        --with-http_v2_module \\\n      \" ; \\\n      addgroup -S www-data ; \\\n      adduser -D -S -h /var/cache/nginx -s /sbin/nologin -G www-data nginx ; \\\n      apk add --no-cache --virtual .nginx-build-deps \\\n        gcc \\\n        gd-dev \\\n        geoip-dev \\\n        gnupg \\\n        libc-dev \\\n        libressl-dev \\\n        libxslt-dev \\\n        linux-headers \\\n        make \\\n        pcre-dev \\\n        perl-dev \\\n        tar \\\n        zlib-dev \\\n        ; \\\n\n      mkdir -p /www /data/logs/nginx ; \\\n      curl -fSL https://nginx.org/download/nginx-$NGINX_VERSION.tar.gz -o nginx.tar.gz; \\\n      mkdir -p /usr/src ; \\\n      tar -zxC /usr/src -f nginx.tar.gz ; \\\n      rm nginx.tar.gz ; \\\n      cd /usr/src/nginx-$NGINX_VERSION ; \\\n      ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" $CONFIG --with-debug; \\\n      make -j$(getconf _NPROCESSORS_ONLN) ; \\\n      mv objs/nginx objs/nginx-debug ; \\\n      mv objs/ngx_http_xslt_filter_module.so objs/ngx_http_xslt_filter_module-debug.so ; \\\n      mv objs/ngx_http_image_filter_module.so objs/ngx_http_image_filter_module-debug.so ; \\\n      mv objs/ngx_http_geoip_module.so objs/ngx_http_geoip_module-debug.so ; \\\n      mv objs/ngx_http_perl_module.so objs/ngx_http_perl_module-debug.so ; \\\n      mv objs/ngx_stream_geoip_module.so objs/ngx_stream_geoip_module-debug.so ; \\\n      ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" $CONFIG; \\\n      make -j$(getconf _NPROCESSORS_ONLN) ; \\\n      make install ; \\\n      rm -rf /etc/nginx/html/ ; \\\n      mkdir -p /etc/nginx/conf.d/ ; \\\n      mkdir -p /usr/share/nginx/html/ ; \\\n      install -m644 html/index.html /usr/share/nginx/html/ ; \\\n      install -m644 html/50x.html /usr/share/nginx/html/ ; \\\n      install -m755 objs/nginx-debug /usr/sbin/nginx-debug ; \\\n      install -m755 objs/ngx_http_xslt_filter_module-debug.so /usr/lib/nginx/modules/ngx_http_xslt_filter_module-debug.so ; \\\n      install -m755 objs/ngx_http_image_filter_module-debug.so /usr/lib/nginx/modules/ngx_http_image_filter_module-debug.so ; \\\n      install -m755 objs/ngx_http_geoip_module-debug.so /usr/lib/nginx/modules/ngx_http_geoip_module-debug.so ; \\\n      install -m755 objs/ngx_http_perl_module-debug.so /usr/lib/nginx/modules/ngx_http_perl_module-debug.so ; \\\n      install -m755 objs/ngx_stream_geoip_module-debug.so /usr/lib/nginx/modules/ngx_stream_geoip_module-debug.so ; \\\n      ln -s ../../usr/lib/nginx/modules /etc/nginx/modules ; \\\n      strip /usr/sbin/nginx* ; \\\n      strip /usr/lib/nginx/modules/*.so ; \\\n      rm -rf /usr/src/nginx-$NGINX_VERSION ; \\\n\n      # Bring in gettext so we can get `envsubst`, then throw\n      # the rest away. To do this, we need to install `gettext`\n      # then move `envsubst` out of the way so `gettext` can\n      # be deleted completely, then move `envsubst` back.\n      apk add --no-cache --virtual .gettext gettext ; \\\n      mv /usr/bin/envsubst /tmp/ ; \\\n\n      runDeps=\"$( \\\n        scanelf --needed --nobanner /usr/sbin/nginx /usr/lib/nginx/modules/*.so /tmp/envsubst \\\n          | awk '{ gsub(/,/, \"\\nso:\", $2); print \"so:\" $2 }' \\\n          | sort -u \\\n          | xargs -r apk info --installed \\\n          | sort -u \\\n      )\" ; \\\n      apk add --no-cache --virtual .nginx-rundeps $runDeps apache2-utils; \\\n      apk del .nginx-build-deps ; \\\n      apk del .gettext ; \\\n      mv /tmp/envsubst /usr/local/bin/ ; \\\n\n      rm -rf /usr/src/* /var/tmp/* /var/cache/apk/* ; \\\n\n\n### WWW  Installation\n      mkdir -p /data/logs\n\n### Networking Configuration\n  EXPOSE 80 443\n\n### Files Addition\n  ADD root /\n  RUN chmod +x /etc/zabbix/zabbix_agentd.conf.d/scripts/*\n\n"
}