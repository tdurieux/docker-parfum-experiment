{
  "startTime": 1674252398116,
  "endTime": 1674252398255,
  "originalSmells": [
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 24,
        "lineEnd": 39,
        "columnStart": 2,
        "columnEnd": 14
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# Copyright 2017, Google Inc.\n#\n#   Licensed under the Apache License, Version 2.0 (the \"License\");\n#   you may not use this file except in compliance with the License.\n#   You may obtain a copy of the License at\n#\n#       http://www.apache.org/licenses/LICENSE-2.0\n#\n#   Unless required by applicable law or agreed to in writing, software\n#   distributed under the License is distributed on an \"AS IS\" BASIS,\n#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n#   See the License for the specific language governing permissions and\n#   limitations under the License.\n\n# Create a docker image with the C++ Google API examples built into it.\n# This Dockerfile requires docker 17.05 or higher, it uses an argument to set\n# the base image version, which was not supported in early versions of docker.\nARG DISTRO_VERSION=16.04\nFROM ubuntu:$DISTRO_VERSION\nMAINTAINER \"Carlos O'Ryan <coryan@google.com>\"\n\n# Install the pre-requisites, the long command line is to create as few\n# layers as possible in the image ...\nRUN apt-get update && \\\n  apt-get install --no-install-recommends --no-install-suggests -y \\\n    autoconf \\\n    autoconf-archive \\\n    automake \\\n    build-essential \\\n    ca-certificates \\\n    clang \\\n    cmake \\\n    curl \\\n    g++ \\\n    gcc \\\n    git-core \\\n    libtool \\\n    lsb-release \\\n    make \\\n    pkg-config && \\\n  apt-get clean && rm -rf /var/lib/apt/lists/*;\n\nWORKDIR /var/tmp/build-grpc\nRUN (git clone https://github.com/grpc/grpc.git && \\\n    cd grpc && git pull && git submodule update --init && \\\n    make -j 2 && make install && \\\n    cd third_party/protobuf && make install)\n\n# ... capture the arguments that control the build ...\nARG CXX=clang++\nARG CC=clang\n\n# ... capture the Travis job number, effectively this busts the cache\n# in each build, which we want anyway ...\nARG TRAVIS_JOB_NUMBER=\nRUN echo Running build=${TRAVIS_JOB_NUMBER}\n\n# ... copy the contents of the source code directory to the container ...\nWORKDIR /var/tmp/build-samples\nCOPY api /var/tmp/build-samples\n\n# ... use separate RUN commands to speed up debugging in local workstations ...\nRUN cmake -DCMAKE_CXX_COMPILER=${CXX} -DCMAKE_C_COMPILER=${CC} . && make -j 2\n"
}