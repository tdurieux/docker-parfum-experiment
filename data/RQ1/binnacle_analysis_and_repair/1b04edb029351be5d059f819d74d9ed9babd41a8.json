{
  "startTime": 1674252998835,
  "endTime": 1674252998956,
  "originalSmells": [
    {
      "rule": "aptGetInstallUseY",
      "position": {
        "lineStart": 61,
        "lineEnd": 65,
        "columnStart": 8,
        "columnEnd": 24
      }
    },
    {
      "rule": "aptGetInstallUseY",
      "position": {
        "lineStart": 71,
        "lineEnd": 74,
        "columnStart": 8,
        "columnEnd": 24
      }
    },
    {
      "rule": "aptGetInstallUseY",
      "position": {
        "lineStart": 79,
        "lineEnd": 83,
        "columnStart": 8,
        "columnEnd": 23
      }
    },
    {
      "rule": "aptGetInstallUseY",
      "position": {
        "lineStart": 87,
        "lineEnd": 90,
        "columnStart": 8,
        "columnEnd": 19
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 61,
        "lineEnd": 65,
        "columnStart": 8,
        "columnEnd": 24
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 71,
        "lineEnd": 74,
        "columnStart": 8,
        "columnEnd": 24
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 79,
        "lineEnd": 83,
        "columnStart": 8,
        "columnEnd": 23
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 87,
        "lineEnd": 90,
        "columnStart": 8,
        "columnEnd": 19
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 61,
        "lineEnd": 65,
        "columnStart": 8,
        "columnEnd": 24
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 71,
        "lineEnd": 74,
        "columnStart": 8,
        "columnEnd": 24
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 79,
        "lineEnd": 83,
        "columnStart": 8,
        "columnEnd": 23
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 87,
        "lineEnd": 90,
        "columnStart": 8,
        "columnEnd": 19
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "#  Dockerfile -- to build the sources on a well-known platform\n#  Copyright (C) 2014, 2015  Olaf Meeuwissen\n#\n#  This file is part of Openambit.\n#\n#  Openambit is free software: you can redistribute it and/or modify\n#  it under the terms of the GNU General Public License as published\n#  by the Free Software Foundation, either version 3 of the License,\n#  or (at your option) any later version.\n#\n#    Openambit distributed in the hope that it will be useful, but\n#    WITHOUT ANY WARRANTY --- without even the implied warranty of\n#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n#    GNU General Public License for more details.\n#\n#  You should have received a copy of the GNU General Public License\n#  along with Openambit.  If not, see https://www.gnu.org/licenses/.\n\n#  Recommended way to build the container this creates (for lack of\n#  an easy way to exclude everything but the Dockerfile):\n#\n#    docker build -t openambit:jessie - < Dockerfile\n#\n#  After that is just a matter of compiling the sources with:\n#\n#    docker run --rm -v $PWD:/code -u $(id -u) openambit:jessie\n#\n#  Doing so gives you a basic sanity check of code compilability on a\n#  minimalistic, reproducible development platform.\n#\n#  If you don't like the defaults of building in $PWD/_build with no\n#  options to either cmake or make, feel free to adjust the relevant\n#  environment variables.  For example, you could build with:\n#\n#    docker run --rm -v $PWD:/code -u $(id -u) \\\n#      --env BUILD_DIR=tmp \\\n#      --env CMAKE_OPTS=\"-DBUILD_EXTRAS=1\" \\\n#      --env MAKE_OPTS=-k \\\n#      openambit:jessie\n#\n#  Check out the --env-file option to docker if you find that overly\n#  long-winded.  If you use a BUILD_DIR that is not below /code make\n#  sure to drop the --rm option.\n#\n#  For interactive sessions, you may want to use:\n#\n#    docker run -i -t --rm -v $PWD:/code -u $(id -u) \\\n#      openambit:jessie /bin/bash\n#\n#  Again, drop the --rm option if you build in a location that is not\n#  below /code.\n\nFROM        debian:jessie\nMAINTAINER  Olaf Meeuwissen <paddy-hack@member.fsf.org>\n\nENV  APT_OPTS --assume-yes --no-install-recommends\n\n# build system dependencies\n# Note that gcc does *not* depend on any specific C library.  Debian\n# and derivatives ship several ...\nRUN apt-get update \\\n     && apt-get install -y --no-install-recommends ${APT_OPTS} \\\n                cmake \\\n                make \\\n                gcc \\\n                libc-dev && rm -rf /var/lib/apt/lists/*;\n\n# libambit and example application build dependencies\n# The HID API support needs at least one of these to be available.  The\n# HIDAPI_DRIVER `cmake` variable controls what is used.\nRUN apt-get update \\\n     && apt-get install -y --no-install-recommends ${APT_OPTS} \\\n             libudev-dev \\\n             libusb-1.0-0-dev \\\n             libpcap-dev && rm -rf /var/lib/apt/lists/*;\n\n# openambit build dependencies\n# Note that libqjson-dev needs to be >= 0.8\nRUN apt-get update \\\n     && apt-get install -y --no-install-recommends ${APT_OPTS} \\\n             g++ \\\n             qtbase5-dev \\\n             qttools5-dev \\\n             zlib1g-dev && rm -rf /var/lib/apt/lists/*;\n\n# wireshark dissector build dependencies\nRUN apt-get update \\\n     && apt-get install -y --no-install-recommends ${APT_OPTS} \\\n             libglib2.0-dev \\\n             libwireshark-dev \\\n             python && rm -rf /var/lib/apt/lists/*;\n\nWORKDIR  /code\nENV      BUILD_DIR _build\nCMD      test -d ${BUILD_DIR} || mkdir ${BUILD_DIR}; \\\n\t      cd ${BUILD_DIR} \\\n\t      && cmake ${CMAKE_OPTS} .. \\\n\t      && make ${MAKE_OPTS}\n\n# Finally, things that really should be fixed in the Openambit code.\n# FIXME add multiarch support to src/libambit/cmake/FindUdev.cmake\nRUN  cd /usr/lib/ && ln -s x86_64-linux-gnu/libudev.so\n"
}