{
  "startTime": 1674246483349,
  "endTime": 1674246483669,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 39,
        "lineEnd": 39,
        "columnStart": 4,
        "columnEnd": 49
      }
    },
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 6,
        "lineEnd": 6,
        "columnStart": 4,
        "columnEnd": 23
      }
    },
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 9,
        "lineEnd": 9,
        "columnStart": 4,
        "columnEnd": 86
      }
    },
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 41,
        "lineEnd": 41,
        "columnStart": 4,
        "columnEnd": 42
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 42,
        "lineEnd": 42,
        "columnStart": 29,
        "columnEnd": 43
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 43,
        "lineEnd": 43,
        "columnStart": 4,
        "columnEnd": 22
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 44,
        "lineEnd": 44,
        "columnStart": 4,
        "columnEnd": 49
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 45,
        "lineEnd": 45,
        "columnStart": 4,
        "columnEnd": 48
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 46,
        "lineEnd": 46,
        "columnStart": 4,
        "columnEnd": 22
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 68,
        "lineEnd": 68,
        "columnStart": 4,
        "columnEnd": 49
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 5,
        "lineEnd": 5,
        "columnStart": 25,
        "columnEnd": 68
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 38,
        "lineEnd": 38,
        "columnStart": 4,
        "columnEnd": 47
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 40,
        "lineEnd": 40,
        "columnStart": 4,
        "columnEnd": 29
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 5,
        "lineEnd": 5,
        "columnStart": 25,
        "columnEnd": 68
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# FRONTEND BUILD CONTAINER\nFROM ubuntu:18.04 as ui-builder\nMAINTAINER Gigantum <support@gigantum.com>\n\n# Install system level dependencies\nRUN apt-get -y update && apt-get -y --no-install-recommends install git curl gosu nodejs npm && rm -rf /var/lib/apt/lists/*;\nRUN npm install yarn -g && npm cache clean --force;\n\n# Install babel-node\nRUN npm install -g @babel/cli@7.2.3 @babel/core@7.2.2 jest@24.0.0 relay-compiler@1.6.1 && npm cache clean --force;\n\n# Make build location dir\nRUN mkdir /opt/ui\n\n# Set the react port to match nginx\nENV PORT \"10001\"\n\n# Copy source to build\nCOPY ui /opt/ui\nCOPY resources/docker/ui_build_script.sh /opt/ui_build_script.sh\nRUN /bin/bash /opt/ui_build_script.sh\n\n\n# PRODUCTION CONTAINER\nFROM ubuntu:18.04\nLABEL maintainer=\"Gigantum <support@gigantum.com>\"\n\n# Copy requirements files\nCOPY packages/gtmcore/requirements.txt /opt/gtmcore/requirements.txt\nCOPY packages/gtmapi/requirements.txt /opt/gtmapi/requirements.txt\nCOPY packages/confhttpproxy /opt/confhttpproxy\nENV SHELL=/bin/bash\n\n# Super instruction to install all dependencies\nRUN apt-get -y update && \\\n    apt-get -y --no-install-recommends install git nginx supervisor wget openssl python3 python3-pip python3-distutils \\\n    gcc g++ gosu redis-server libjpeg-dev git-lfs python3-setuptools python3-dev libdpkg-perl zip unzip libsnappy-dev && \\\n    git lfs install && \\\n    apt-get -y --no-install-recommends install curl gnupg gnupg1 gnupg2 && \\\n    curl -f -sL https://deb.nodesource.com/setup_8.x | bash && \\\n    apt-get -y --no-install-recommends install nodejs && \\\n    npm install -g configurable-http-proxy && \\\n    cd /opt/confhttpproxy && pip3 install --no-cache-dir . && \\\n    pip3 install --no-cache-dir wheel && \\\n    pip3 install --no-cache-dir -r /opt/gtmcore/requirements.txt && \\\n    pip3 install --no-cache-dir -r /opt/gtmapi/requirements.txt && \\\n    pip3 install --no-cache-dir uwsgi && \\\n    apt-get -qq -y remove gcc g++ python3-dev wget curl gnupg gnupg1 gnupg2 && \\\n    apt-get clean && \\\n    rm -rf /var/lib/apt/lists/* /var/log/dpkg.log && npm cache clean --force;\n\n# Arguments, defaulted to production values\nARG CLIENT_CONFIG_FILE=build/client/labmanager-config.yaml\nARG NGINX_UI_CONFIG=resources/client/nginx_ui.conf\nARG NGINX_API_CONFIG=resources/client/nginx_api.conf\nARG SUPERVISOR_CONFIG=build/client/supervisord.conf\nARG ENTRYPOINT_FILE=resources/client/entrypoint.sh\nARG REDIS_CONFIG=resources/client/redis.conf\n\n# Copy Libraries\n# TODO: Make pip installs once refactor is completed\nCOPY packages/gtmapi /opt/gtmapi\nCOPY packages/gtmcore /opt/gtmcore\n\nRUN cd /opt/gtmcore/ && python3 setup.py install\n\n# Install testing requirements (will essentially be a noop in production)\nCOPY build/requirements-testing.txt /opt/requirements-testing.txt\nRUN pip3 install --no-cache-dir -r /opt/requirements-testing.txt\n\n# Setup lmcommon config file - should be written by automation before copy\nCOPY $CLIENT_CONFIG_FILE /etc/gigantum/labmanager.yaml\n\n# Setup logging config file\nCOPY packages/gtmcore/gtmcore/logging/logging.json.default /etc/gigantum/logging.json\n\n# Make needed directories\nRUN mkdir -p /mnt/gigantum && mkdir /opt/redis\n\n# Copy frontend\nCOPY --from=ui-builder /opt/ui/build /var/www/\n\n# Setup NGINX/uWSGI\nCOPY $NGINX_UI_CONFIG /etc/nginx/sites-enabled/\nCOPY $NGINX_API_CONFIG /etc/nginx/sites-enabled/\nRUN rm /etc/nginx/sites-enabled/default\n\n# Setup Redis\nCOPY $REDIS_CONFIG /opt/redis/redis.conf\n\n# Setup Supervisord to launch both uwsgi and nginx\nRUN mkdir -p /opt/log/supervisor && mkdir -p /opt/log/nginx && mkdir -p /opt/run && \\\n    mkdir -p /opt/nginx && nginx && nginx -s reload && nginx -s quit\nCOPY resources/client/supervisord_base.conf /etc/supervisor/supervisord.conf\nCOPY $SUPERVISOR_CONFIG /etc/supervisor/conf.d/supervisord.conf\n\nCOPY $ENTRYPOINT_FILE /usr/local/bin/entrypoint.sh\nRUN chmod u+x /usr/local/bin/entrypoint.sh\n\n# Setup demo labbook\nCOPY resources/my-first-project.zip /opt/my-first-project.zip\n\nENTRYPOINT [\"/usr/local/bin/entrypoint.sh\"]\n\n# Expose Ports\nEXPOSE 10000 10001 10002\n\n# Start by firing up uwsgi, nginx, redis, and workers via supervisord\nCMD [\"/usr/bin/supervisord\", \"--nodaemon\"]\n"
}