{
  "startTime": 1674249532096,
  "endTime": 1674249532213,
  "originalSmells": [
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 27,
        "lineEnd": 27,
        "columnStart": 4,
        "columnEnd": 22
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 28,
        "lineEnd": 28,
        "columnStart": 4,
        "columnEnd": 94
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 19,
        "lineEnd": 23,
        "columnStart": 4,
        "columnEnd": 12
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 19,
        "lineEnd": 23,
        "columnStart": 4,
        "columnEnd": 12
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# This Dockerfile is based on: https://docs.docker.com/examples/postgresql_service/\n\nFROM ubuntu:16.04\n\nMAINTAINER fredrik@averpil.com\n\n# Add the PostgreSQL PGP key to verify their Debian packages.\n# It should be the same key as https://www.postgresql.org/media/keys/ACCC4CF8.asc\nRUN apt-key adv --keyserver hkp://p80.pool.sks-keyservers.net:80 --recv-keys B97B0AFCAA1A47F044F244A07FCC7D46ACCC4CF8\n\n# Add PostgreSQL's repository. It contains the most recent stable release\n#     of PostgreSQL, ``9.3``.\nRUN echo \"deb http://apt.postgresql.org/pub/repos/apt/ precise-pgdg main\" > /etc/apt/sources.list.d/pgdg.list\n\n# Install everything in one enormous RUN command\n#  There are some warnings (in red) that show up during the build. You can hide\n#  them by prefixing each apt-get statement with DEBIAN_FRONTEND=noninteractive\nRUN apt-get update && \\\n\n    apt-get install --no-install-recommends -y \\\n    python-software-properties python-pip \\\n    software-properties-common \\\n    postgresql-9.3 postgresql-client-9.3 postgresql-contrib-9.3 postgresql-server-dev-9.3 \\\n    rubygems && \\\n\n    gem install taskjuggler && \\\n\n    pip install --no-cache-dir -U pip && \\\n    pip install --no-cache-dir sqlalchemy psycopg2 jinja2 alembic mako markupsafe python-editor nose coverage && rm -rf /var/lib/apt/lists/*;\n\n# Note: The official Debian and Ubuntu images automatically ``apt-get clean``\n# after each ``apt-get``\n\n# Run commands as the ``postgres`` user created by the ``postgres-9.3`` package when it was ``apt-get installed``\nUSER postgres\n\nRUN /etc/init.d/postgresql start && \\\n    psql -c \"CREATE DATABASE stalker_test;\" -U postgres && \\\n    psql -c \"CREATE USER stalker_admin WITH PASSWORD 'stalker';\" -U postgres && \\\n    /etc/init.d/postgresql stop\n\n# Adjust PostgreSQL configuration so that remote connections to the\n# database are possible.\n# RUN echo \"host all  all    0.0.0.0/0  md5\" >> /etc/postgresql/9.3/main/pg_hba.conf\n\n# And add ``listen_addresses`` to ``/etc/postgresql/9.3/main/postgresql.conf``\n# RUN echo \"listen_addresses='*'\" >> /etc/postgresql/9.3/main/postgresql.conf\n\n# Expose the PostgreSQL port\n# EXPOSE 5432\n\n# Add VOLUMEs to allow backup of config, logs and databases\n# VOLUME  [\"/etc/postgresql\", \"/var/log/postgresql\", \"/var/lib/postgresql\"]\n\nUSER root\n\n# Create symlink to TaskJuggler\n# RUN ln -s $(which tj3) /usr/local/bin/tj3\n\n# Set working directory\nWORKDIR /workspace\n\n# Embed wait-for-postgres.sh script into Dockerfile\nRUN echo '\\n\\\n# wait-for-postgres\\n\\\n\\n\\\n\nset -e\\n\\\n\\n\\\ncmd=\"$@\"\\n\\\ntimer=\"5\"\\n\\\n\\n\\\nuntil runuser -l postgres -c 'pg_isready' 2>/dev/null; do\\n\\\n    >&2 echo \"Postgres is unavailable - sleeping for $timer seconds\"\\n\\\n    sleep $timer\\n\\\ndone\\n\\\n\\n\\\n>&2 echo \"Postgres is up - executing command\"\\n\\\nexec $cmd\\n'\\\n>> /workspace/wait-for-postgres.sh\n\n# Make script executable\nRUN chmod +x /workspace/wait-for-postgres.sh\n\n# Execute this when running container\nENTRYPOINT \\\n\n            # Copy stalker into container's /workspace'\n            cp -r /stalker /workspace && \\\n\n            # Remove execution permissions within Stalker\n            chmod -R -x /workspace/stalker && \\\n\n            # Start PostgreSQL\n            runuser -l postgres -c '/usr/lib/postgresql/9.3/bin/postgres -D /var/lib/postgresql/9.3/main -c config_file=/etc/postgresql/9.3/main/postgresql.conf & ' && \\\n\n            # Wait for PostgresSQL\n            ./wait-for-postgres.sh nosetests /workspace/stalker --verbosity=1 --cover-erase --with-coverage --cover-package=stalker && \\\n\n            # Cleanly shut down PostgreSQL\n            /etc/init.d/postgresql stop\n"
}