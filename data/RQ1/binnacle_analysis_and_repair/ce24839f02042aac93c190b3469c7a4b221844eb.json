{
  "startTime": 1674240184722,
  "endTime": 1674240184862,
  "originalSmells": [
    {
      "rule": "curlUseHttpsUrl",
      "position": {
        "lineStart": 41,
        "lineEnd": 41,
        "columnStart": 4,
        "columnEnd": 168
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 2,
        "lineEnd": 2,
        "columnStart": 22,
        "columnEnd": 53
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 4,
        "lineEnd": 4,
        "columnStart": 4,
        "columnEnd": 26
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 4,
        "lineEnd": 4,
        "columnStart": 4,
        "columnEnd": 26
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 4,
        "lineEnd": 4,
        "columnStart": 4,
        "columnEnd": 26
      }
    }
  ],
  "repairedSmells": [
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 4,
        "lineEnd": 4,
        "columnStart": 4,
        "columnEnd": 50
      }
    }
  ],
  "repairedDockerfile": "FROM java:8-jdk\n\nRUN apt-get update && apt-get install --no-install-recommends -y git curl zip && rm -rf /var/lib/apt/lists/*\nRUN apt-get update -y\nRUN apt-get install --no-install-recommends -y vim && rm -rf /var/lib/apt/lists/*;\nENV JENKINS_HOME /var/jenkins_home\nENV JENKINS_SLAVE_AGENT_PORT 50000\n\nARG user=jenkins\nARG group=jenkins\nARG uid=1000\nARG gid=1000\n\n# Jenkins is run with user `jenkins`, uid = 1000\n# If you bind mount a volume from the host or a data container,\n# ensure you use the same uid\nRUN groupadd -g ${gid} ${group} \\\n    && useradd -d \"$JENKINS_HOME\" -u ${uid} -g ${gid} -m -s /bin/bash ${user}\n\n# Jenkins home directory is a volume, so configuration and build history\n# can be persisted and survive image upgrades\nVOLUME /var/jenkins_home\n# `/usr/share/jenkins/ref/` contains all reference configuration we want\n# to set on a fresh new installation. Use it to bundle additional plugins\n# or config file with your custom jenkins Docker image.\nRUN mkdir -p /usr/share/jenkins/ref/init.groovy.d\n\nENV TINI_SHA 066ad710107dc7ee05d3aa6e4974f01dc98f3888\n\n# Use tini as subreaper in Docker container to adopt zombie processes\nRUN curl -fsSL https://github.com/krallin/tini/releases/download/v0.5.0/tini-static -o /bin/tini && chmod +x /bin/tini \\\n  && echo \"$TINI_SHA  /bin/tini\" | sha1sum -c -\n\nCOPY init.groovy /usr/share/jenkins/ref/init.groovy.d/tcp-slave-agent-port.groovy\n\nARG JENKINS_VERSION\nENV JENKINS_VERSION ${JENKINS_VERSION:-2.0}\nARG JENKINS_SHA\nENV JENKINS_SHA ${JENKINS_SHA:-da06f963edb627f0ced2fce612f9985d1928f79b}\n# could use ADD but this one does not check Last-Modified header\n# see https://github.com/docker/docker/issues/8331\nRUN curl -fsSL https://repo.jenkins-ci.org/public/org/jenkins-ci/main/jenkins-war/${JENKINS_VERSION}/jenkins-war-${JENKINS_VERSION}.war -o /usr/share/jenkins/jenkins.war \\\n  && echo \"$JENKINS_SHA  /usr/share/jenkins/jenkins.war\" | sha1sum -c -\n\nENV JENKINS_UC https://updates.jenkins.io\nRUN chown -R ${user} \"$JENKINS_HOME\" /usr/share/jenkins/ref\n\n# for main web interface:\nEXPOSE 8080\n\n# will be used by attached slave agents:\nEXPOSE 50000\n\nENV COPY_REFERENCE_FILE_LOG $JENKINS_HOME/copy_reference_file.log\n\nUSER ${user}\n\nCOPY jenkins.sh /usr/local/bin/jenkins.sh\nENTRYPOINT [\"/bin/tini\", \"--\", \"/usr/local/bin/jenkins.sh\"]\n# from a derived Dockerfile, can use `RUN plugins.sh active.txt` to setup /usr/share/jenkins/ref/plugins from a support bundle\nCOPY plugins.sh /usr/local/bin/plugins.sh"
}