{
  "startTime": 1674249280560,
  "endTime": 1674249281047,
  "originalSmells": [
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 36,
        "lineEnd": 43,
        "columnStart": 4,
        "columnEnd": 67
      }
    },
    {
      "rule": "gpgUseBatchFlag",
      "position": {
        "lineStart": 12,
        "lineEnd": 12,
        "columnStart": 4,
        "columnEnd": 65
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM archlinux/base:latest\nARG cores=12\nRUN yes | pacman -Syu sudo awk fakeroot file make git zip python \\\n      binutils gcc diffutils patch wget cmake pkg-config which && \\\n    pacman-key --init && pacman-key --populate archlinux && \\\n    useradd -m -s /bin/bash -U -G wheel -d /build build && \\\n    echo '%wheel ALL=(ALL) NOPASSWD: ALL' >> /etc/sudoers && \\\n    echo -e 'MAKEFLAGS=\"-j${cores}\"\\nSRCDEST=/build/sources\\n' >> /etc/makepkg.conf && \\\n    rm -Rf /var/cache/pacman\nUSER build\nWORKDIR /build\nCOPY mingw-w64 .\nRUN gpg --batch --recv 93BDB53CD4EBC740 13FCEF89DD9E3C4F A328C3A2C3C45C06 && \\\n    mkdir sources && sudo chmod o+w * && \\\n    for pkg in headers binutils headers-bootstrap gcc-base crt winpthreads gcc pkg-config cmake win-iconv ;\\\n    do \\\n      (cd ${pkg} && makepkg && yes | sudo pacman -U *.pkg.tar.xz) && \\\n      rm -Rf ${pkg} ;\\\n    done && \\\n    rm -Rf sources\n\nENV prebuilt=/build/prebuilt execprefix=x86_64-w64-mingw32-\n\nENV boost=1.70.0\nRUN bash -c \"wget -q https://dl.bintray.com/boostorg/release/${boost}/source/boost_\\${boost//./_}.tar.bz2 -O - | tar -xj\" && \\\n    cd boost_* && ./bootstrap.sh && \\\n    echo \"using gcc : windows : ${execprefix}g++ ;\" > tools/build/src/user-config.jam && \\\n    ./bjam toolset=gcc-windows link=static threading=multi target-os=windows variant=release --layout=system \\\n      address-model=64 cxxflags=-mno-ms-bitfields cxxflags=-mmmx cxxflags=-msse cxxflags=-msse2 cxxflags=-ffunction-sections cxxflags=-fdata-sections \\\n      --with-filesystem --with-locale --with-program_options --with-system -j${cores} \\\n      --includedir=${prebuilt}/boost-${boost}/include --libdir=${prebuilt}/boost-${boost}-mingw-x86_64/lib install && \\\n    cd .. && rm -Rf boost_*\n\nENV qt=4.8.7\nRUN bash -c \"wget -q http://download.qt.io/archive/qt/${qt%.*}/${qt}/qt-everywhere-opensource-src-${qt}.tar.gz -O - | tar -xz\" && \\\n    cd qt-everywhere* && \\\n    ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" -xplatform win32-g++ -device-option CROSS_COMPILE=${execprefix} -prefix ${prebuilt}/qt-${qt}-mingw-x86_64 \\\n      -release -opensource -static -fast -confirm-license \\\n      -no-accessibility -no-sql-sqlite -no-qt3support -no-xmlpatterns -no-multimedia -no-audio-backend -no-phonon -no-phonon-backend \\\n      -no-svg -no-webkit -no-javascript-jit -no-script -no-scripttools -no-declarative -no-declarative-debug \\\n      -qt-zlib -qt-libpng \\\n      -no-gif -no-libtiff -no-libmng -no-libjpeg -no-openssl -no-nis -no-cups -no-pch -no-dbus \\\n      -nomake demos -nomake examples -nomake docs -nomake translations -nomake assistant -nomake qdoc3 -nomake qtracereplay -nomake linguist \\\n      -nomake qt3to4 -nomake qcollectiongenerator -nomake pixeltool && \\\n    make -j${cores} install && \\\n    cd .. && rm -Rf qt-everywhere*\n\nRUN mkdir zxtune && sudo chmod o+w zxtune && cd zxtune && \\\n    git init && \\\n    git remote add --tags origin https://bitbucket.org/zxtune/zxtune.git && \\\n    echo -e \"platform=mingw\\narch=x86_64\\ntools.python=python3\\nmingw.execprefix=${execprefix}\\n\"\\\n      \"prebuilt.dir=${prebuilt}\\nboost.version=${boost}\\nqt.version=${qt}\\n\"\\\n      \"host=linux\\nembed_file_cmd=cat \\$(embedded_files) >> \\$@\\nmakepkg_cmd=(cd \\$(1) && zip -9rD \\$(CURDIR)/\\$(2) .)\\npkg_suffix=zip\" > variables.mak\n\nWORKDIR /build/zxtune\nCOPY entrypoint.sh .\nENTRYPOINT [\"./entrypoint.sh\"]\nCMD [\"package\", \"-C\", \"apps/bundle\"]\n"
}