{
  "startTime": 1674242076372,
  "endTime": 1674242076982,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 28,
        "lineEnd": 28,
        "columnStart": 4,
        "columnEnd": 104
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 91,
        "lineEnd": 91,
        "columnStart": 4,
        "columnEnd": 102
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 92,
        "lineEnd": 92,
        "columnStart": 4,
        "columnEnd": 110
      }
    },
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 42,
        "lineEnd": 42,
        "columnStart": 4,
        "columnEnd": 28
      }
    },
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 43,
        "lineEnd": 43,
        "columnStart": 4,
        "columnEnd": 15
      }
    },
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 55,
        "lineEnd": 55,
        "columnStart": 4,
        "columnEnd": 15
      }
    },
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 61,
        "lineEnd": 61,
        "columnStart": 4,
        "columnEnd": 15
      }
    },
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 67,
        "lineEnd": 67,
        "columnStart": 4,
        "columnEnd": 15
      }
    },
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 72,
        "lineEnd": 72,
        "columnStart": 4,
        "columnEnd": 15
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 48,
        "lineEnd": 48,
        "columnStart": 4,
        "columnEnd": 65
      }
    },
    {
      "rule": "gpgUseBatchFlag",
      "position": {
        "lineStart": 93,
        "lineEnd": 93,
        "columnStart": 4,
        "columnEnd": 40
      }
    },
    {
      "rule": "gpgUseHaPools",
      "position": {
        "lineStart": 86,
        "lineEnd": 86,
        "columnStart": 6,
        "columnEnd": 119
      }
    },
    {
      "rule": "gpgUseHaPools",
      "position": {
        "lineStart": 87,
        "lineEnd": 87,
        "columnStart": 8,
        "columnEnd": 108
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 15,
        "lineEnd": 25,
        "columnStart": 4,
        "columnEnd": 22
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM debian:stable\n\nMAINTAINER David Pose <dpose@bitergia.com>, Alvaro del Castillo <acs@bitergia.com>, David Moreno <dmoreno@bitergia.com>\n# Image for developing Kibiter/Kibana\n\n# ENV KIBANA_BRANCH master\nENV KIBANA_BRANCH integration-6.1.4-community\n\n# add our user and group first to make sure their IDs get assigned consistently\nRUN groupadd --system kibana && \\\n    useradd --system --create-home --gid kibana kibana\n\n# backports used to install java 8 needed by elasticsearch 5\n# ruby gems are used for building binary packages\nRUN apt-get update && \\\n    apt-get install -y --no-install-recommends \\\n            ca-certificates dirmngr gnupg \\\n            curl \\\n            wget \\\n            git \\\n            python \\\n            zip \\\n            make \\\n            g++ \\\n            ruby-dev rpm rubygems \\\n            libffi-dev \\\n            && \\\n    # install nvm\n    curl -f -o /tmp/nvm-install.sh -sSL https://raw.githubusercontent.com/creationix/nvm/v0.31.0/install.sh && \\\n    chmod +x /tmp/nvm-install.sh && \\\n    bash -c /tmp/nvm-install.sh && \\\n    . /root/.bashrc && \\\n\n    # install kibiter\n    # gems needed in Kibana > 5.x to build binary packages\n    gem install rake && \\\n    gem install ffi && \\\n    gem install fpm -v 1.5.0 && \\\n    gem install pleaserun -v 0.0.24 && \\\n    git clone --depth 1 --branch ${KIBANA_BRANCH} https://github.com/grimoirelab/kibiter.git && \\\n    cd kibiter && \\\n    nvm install \"$( cat .node-version )\" && \\\n    npm install -g grunt-cli && \\\n    npm install && \\\n    # Build the kibiter package\n    sed -e \"/return \\[/,/\\].map/ {/\\(windows\\|darwin\\|x86\\)/ d;s/,//g}\" -i tasks/config/platforms.js && \\\n    grunt --no-color _build:downloadNodeBuilds:start _build:downloadNodeBuilds:finish && \\\n    grunt --no-color build && \\\n    tar xfz target/kibiter-*-linux-x86_64.tar.gz --directory /opt && \\\n    mv /opt/kibiter-*-linux-x86_64* /opt/kibana && \\\n    chown -R kibana:kibana /opt/kibana && \\\n    # Install dotplot plugin: https://github.com/dlumbrer/kbn_dotplot\n    cd /opt/kibana/plugins && \\\n    git clone https://github.com/dlumbrer/kbn_dotplot.git -b 6.2-dev && \\\n    cd kbn_dotplot && \\\n    npm install && \\\n    cd .. && \\\n    # Install polar plugin: https://github.com/dlumbrer/kbn_polar\n    cd /opt/kibana/plugins && \\\n    git clone https://github.com/dlumbrer/kbn_polar.git -b 6.2-dev && \\\n    cd kbn_polar && \\\n    npm install && \\\n    cd .. && \\\n    # Install radar plugin: https://github.com/dlumbrer/kbn_radar\n    cd /opt/kibana/plugins && \\\n    git clone https://github.com/dlumbrer/kbn_radar.git -b 6.2-dev && \\\n    cd kbn_radar && \\\n    npm install && \\\n    cd .. && \\\n    # Install network plugin: https://dlumbrer.github.io/kbn_network/\n    git clone https://github.com/dlumbrer/kbn_network.git network_vis -b 6.2-dev && \\\n    cd network_vis && \\\n    npm install && \\\n    cd /root && \\\n    # cleanup to thin the final image\n    rm -rf /kibiter && \\\n    apt-get purge -y g++ git make python zip wget && \\\n    apt-get autoremove --purge -y && \\\n    apt-get clean && \\\n    find /var/lib/apt/lists -type f -delete && \\\n    rm -rf /root/.npm /root/.node-gyp /root/.nvm /tmp/* /var/tmp/* && \\\n    bash -c 'find /usr/share/locale -maxdepth 1 -mindepth 1 -type d | grep -v -e \"en_US\" | xargs rm -rfv' && \\\n    bash -c 'localedef --list-archive | grep -v -e \"en_US\" | xargs localedef --delete-from-archive' && \\\n    rm -rf /usr/share/doc/* && npm cache clean --force; && rm target/kibiter-*-linux-x86_64.tar.gz\n\n# grab gosu for easy step-down from root\nRUN ( gpg --batch --keyserver hkps://hkps.ha.pool.sks-keyservers.net --recv-keys B42F6819007F00F88E364FD4036A9C25BF357DD4 \\\n     || gpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys B42F6819007F00F88E364FD4036A9C25BF357DD4 \\\n     || gpg --batch --keyserver hkp://keys.gnupg.net:80  --recv-keys B42F6819007F00F88E364FD4036A9C25BF357DD4)\nRUN arch=\"$(dpkg --print-architecture)\" \\\n\t&& set -x \\\n\t&& curl -f -o /usr/local/bin/gosu -sSL \"https://github.com/tianon/gosu/releases/download/1.3/gosu-$arch\" \\\n\t&& curl -f -o /usr/local/bin/gosu.asc -sSL \"https://github.com/tianon/gosu/releases/download/1.3/gosu-$arch.asc\" \\\n\t&& gpg --batch --verify /usr/local/bin/gosu.asc \\\n\t&& rm /usr/local/bin/gosu.asc \\\n\t&& chmod +x /usr/local/bin/gosu\n\nENV PATH /opt/kibana/bin:$PATH\n\n# Remove kibana optimize so it is regenerated when we modify src files in containers\n# Don't delete because we don't modify anymore src in docker-entrypoint.sh\nRUN rm -rf /opt/kibana/optimize/*\nRUN ./opt/kibana/bin/kibana | sleep 200 > /tmp/run_kibana_log.txt\n\nCOPY ./docker-entrypoint.sh /\n\nEXPOSE 5601\nENTRYPOINT [\"/docker-entrypoint.sh\"]\nCMD [\"kibana\"]\n"
}