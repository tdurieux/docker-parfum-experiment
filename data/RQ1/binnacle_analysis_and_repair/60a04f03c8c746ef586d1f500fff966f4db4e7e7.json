{
  "startTime": 1674240029474,
  "endTime": 1674240029878,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 100,
        "lineEnd": 100,
        "columnStart": 4,
        "columnEnd": 48
      }
    },
    {
      "rule": "wgetUseHttpsUrl",
      "position": {
        "lineStart": 125,
        "lineEnd": 125,
        "columnStart": 1,
        "columnEnd": 66
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 14,
        "lineEnd": 25,
        "columnStart": 22,
        "columnEnd": 15
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 29,
        "lineEnd": 69,
        "columnStart": 22,
        "columnEnd": 6
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 14,
        "lineEnd": 25,
        "columnStart": 22,
        "columnEnd": 15
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 29,
        "lineEnd": 69,
        "columnStart": 22,
        "columnEnd": 6
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "#\n# Darkflow Dockerfile (YOLO for Tensorflow)\n# Tensorflow + GPU + Python3 + OpenCV 3.1.0\n#\n# @see https://github.com/thtrieu/darkflow\n# @see https://hub.docker.com/r/tensorflow/tensorflow/tags/\n#\n# Copyright (c) 2017 Loreto Parisi - https://github.com/loretoparisi/docker\n#\n\nFROM tensorflow/tensorflow:latest-gpu-py3\n\nMAINTAINER Loreto Parisi loretoparisi@gmail.com\n\nRUN apt-get update && apt-get install --no-install-recommends -y \\\n    git \\\n    curl \\\n    wget \\\n    unzip \\\n    ffmpeg \\\n    build-essential \\\n    cmake git pkg-config libswscale-dev \\\n    libtbb2 libtbb-dev libjpeg-dev \\\n\tlibpng-dev libtiff-dev libjasper-dev \\\n    python3-numpy \\\n    python3-pip && rm -rf /var/lib/apt/lists/*;\n\nRUN mkdir OpenCV && cd OpenCV\n\nRUN apt-get update && apt-get install --no-install-recommends -y \\\n  build-essential \\\n  checkinstall \\\n  cmake \\\n  pkg-config \\\n  yasm \\\n  libtiff5-dev \\\n  libjpeg-dev \\\n  libjasper-dev \\\n  libavcodec-dev \\\n  libavformat-dev \\\n  libswscale-dev \\\n  libdc1394-22-dev \\\n\n  libgstreamer0.10-dev \\\n  libgstreamer-plugins-base0.10-dev \\\n  libv4l-dev \\\n  python-dev \\\n  python-numpy \\\n  python-pip \\\n  libtbb-dev \\\n  libeigen3-dev \\\n  libqt4-dev \\\n  libgtk2.0-dev \\\n\n  libmp3lame-dev \\\n  libopencore-amrnb-dev \\\n  libopencore-amrwb-dev \\\n  libtheora-dev \\\n  libvorbis-dev \\\n  libxvidcore-dev \\\n  x264 \\\n  v4l-utils \\\n\n  libgtk2.0-dev \\\n\n\n  unzip \\\n  libhdf5-dev \\\n  wget \\\n  sudo && rm -rf /var/lib/apt/lists/*;\n\n\nRUN cd /opt && \\\n  wget https://github.com/daveselinger/opencv/archive/3.1.0-with-cuda8.zip -O opencv-3.1.0.zip -nv && \\\n  unzip opencv-3.1.0.zip && \\\n  mv opencv-3.1.0-with-cuda8 opencv-3.1.0 && \\\n  cd opencv-3.1.0 && \\\n  rm -rf build && \\\n  mkdir build && \\\n  cd build && \\\n  cmake -D CUDA_ARCH_BIN=3.2 \\\n    -D CUDA_ARCH_PTX=3.2 \\\n    -D CMAKE_BUILD_TYPE=RELEASE \\\n    -D CMAKE_INSTALL_PREFIX=/usr/local \\\n    -D WITH_TBB=ON \\\n    -D BUILD_NEW_PYTHON_SUPPORT=ON \\\n    -D WITH_V4L=ON \\\n    -D BUILD_TIFF=ON \\\n    -D WITH_QT=ON \\\n    -D ENABLE_PRECOMPILED_HEADERS=OFF \\\n #   -D USE_GStreamer=ON \\\n    -D WITH_OPENGL=ON .. && \\\n  make -j4 && \\\n  make install && \\\n  echo \"/usr/local/lib\" | sudo tee -a /etc/ld.so.conf.d/opencv.conf && \\\n  ldconfig\nRUN cp /opt/opencv-3.1.0/build/lib/cv2.so /usr/lib/python2.7/dist-packages/cv2.so\n\nWORKDIR /darkflow/\n\nRUN curl -f -O https://bootstrap.pypa.io/get-pip.py && \\\n\tpython get-pip.py && \\\n\trm get-pip.py\n\nRUN \\ \n    pip3 install --no-cache-dir Cython\n\nRUN \\\n    git clone https://github.com/thtrieu/darkflow.git\n# copy patches to setup.py, net/help.py, flow\nCOPY setup.py darkflow/darkflow\nCOPY flow3 darkflow/\nCOPY help.py darkflow/darkflow/net/\n\nRUN \\\n    cd darkflow && \\\n    ls -l && \\\n    python3 setup.py build_ext --inplace\n    #pip3 install .\n\n# download weights full (accurate most) and tiny (faster , less accurate) models\n# darknet rnns\nRUN \\\n    cd darkflow && \\\n    mkdir bin && cd bin/ && \\\n\twget https://pjreddie.com/media/files/yolo.weights >/dev/null 2>&1 && \\\n    wget https://github.com/leetenki/YOLOtiny_v2_chainer/raw/master/tiny-yolo-voc.weights >/dev/null 2>&1 && \\\n    wget https://github.com/thtrieu/darkflow/blob/master/cfg/yolo.cfg >/dev/null 2>&1 && \\\n    cd ..\n\nRUN \\\n    cd darkflow/ && \\\n    mkdir samples && cd samples/ && \\\n    wget -O video_1.avi ftp://vqeg.its.bldrdoc.gov/MM/7-12_testclip/7-12_testclip_QCIF.avi\n\n# FIXME: copy yolo.cfg to cfg/\nRUN \\\n    cd darkflow/ && \\\n    cp bin/yolo.cfg cfg/\n\nCMD nvidia-smi -q\nRUN python3 -c \"import Cython; print(Cython.__version__)\"\nRUN python3 -c \"import cv2; print(cv2.__version__)\"\nRUN echo \"./flow3 --model bin/yolo.cfg --load bin/yolo.weights --demo samples/video_1.avi --gpu .8 --saveVideo\"\nCMD [\"bash\"]\n\n#install TF python module\n#RUN python3 setup.py build_ext --inplace\n"
}