{
  "startTime": 1674242443555,
  "endTime": 1674242444349,
  "originalSmells": [
    {
      "rule": "wgetUseHttpsUrl",
      "position": {
        "lineStart": 99,
        "lineEnd": 99,
        "columnStart": 2,
        "columnEnd": 90
      }
    },
    {
      "rule": "wgetUseHttpsUrl",
      "position": {
        "lineStart": 109,
        "lineEnd": 109,
        "columnStart": 4,
        "columnEnd": 121
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 84,
        "lineEnd": 84,
        "columnStart": 2,
        "columnEnd": 28
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 90,
        "lineEnd": 90,
        "columnStart": 2,
        "columnEnd": 102
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 101,
        "lineEnd": 101,
        "columnStart": 2,
        "columnEnd": 64
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 102,
        "lineEnd": 102,
        "columnStart": 2,
        "columnEnd": 70
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 103,
        "lineEnd": 103,
        "columnStart": 2,
        "columnEnd": 68
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 36,
        "lineEnd": 65,
        "columnStart": 22,
        "columnEnd": 76
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM ubuntu:16.04\n\nMAINTAINER David Lung \"lungdm@gmail.com\"\n\n\nARG INTEL_SDK_VERSION=2017_7.0.0.2511_x64\n\nCOPY ./silent-intel-sdk.cfg /tmp/silent-intel-sdk.cfg\n\n\nARG USR=ow\nENV USER=$USR\n\n\nRUN apt-get update && \\\n  apt-get upgrade -y && \\\n  apt-get dist-upgrade -y\n\n\n\nRUN mkdir -p /etc/sudoers.d && \\\n  export uid=1000 gid=1000 && \\\n  mkdir -p /home/$USER && \\\n  echo \"$USER:x:${uid}:${gid}:$USER,,,:/home/$USER:/bin/bash\" >> /etc/passwd && \\\n  echo \"$USER:x:${uid}:\" >> /etc/group && \\\n  echo \"$USER ALL=(ALL) NOPASSWD: ALL\" > /etc/sudoers.d/$USER && \\\n  chmod 0440 /etc/sudoers.d/$USER && \\\n  chown ${uid}:${gid} -R /home/$USER\n\n\nENV DEBIAN_FRONTEND noninteractive # TODO: change\n\n\n#RUN useradd -ms /bin/bash $USER\n\n\nRUN apt-get update && apt-get install -y --no-install-recommends apt-utils \\\n  wget \\\n  nano \\\n  htop \\\n  build-essential \\\n  make \\\n  git \\\n  automake \\\n  autoconf \\\n  g++ \\\n  rpm \\\n  libtool \\\n  libncurses5-dev \\\n  zlib1g-dev \\\n  bison \\\n  flex \\\n  lsb-core \\\n  sudo \\\n  xorg \\\n  openbox \\\n  x11-xserver-utils \\\n  libxext-dev libncurses-dev python-dev mercurial \\\n  freeglut3-dev libglu1-mesa-dev libglew-dev python-dev python-pip python-lxml python-numpy python-scipy python-tk \\\n  kmod dkms \\\n  linux-source linux-headers-generic \\\n  maven openjdk-8-jdk \\\n  python-setuptools python-yaml libnuma1 \\\n  openmpi-bin  libopenmpi-dev \\\n  libgl1-mesa-glx libgl1-mesa-dri libfreetype6-dev \\ \n  libpng12-dev libxft-dev python-matplotlib xubuntu-desktop ffmpeg xvfb tmux && rm -rf /var/lib/apt/lists/*;\n\n#RUN  sudo pip install --upgrade matplotlib\n\n#RUN sudo apt-get install nvidia-opencl-dev\n\nRUN sudo usermod -a -G video $USER\n\nUSER $USER\nENV HOME /home/$USER\nWORKDIR $HOME\n\nRUN mkdir neuron && \\\n  cd neuron && \\\n  git clone https://github.com/nrnhines/iv.git && \\\n  git clone https://github.com/nrnhines/nrn.git && \\\n  cd iv && \\\n  git checkout 76c123b && \\\n  ./build.sh && \\\n  ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --prefix=`pwd` && \\\n  make && \\\n  sudo make install && \\\n  cd ../nrn && \\\n  git checkout e0950a1 && \\\n  ./build.sh && \\\n  ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --prefix=`pwd` --with-iv=$HOME/neuron/iv --with-nrnpython=/usr/bin/python --with-paranrn && \\\n  make && \\\n  sudo make install && \\\n  cd src/nrnpython && \\\n  sudo python setup.py install\n\nRUN mkdir intel-opencl-tmp && \\\n  cd intel-opencl-tmp && \\\n  mkdir intel-opencl && \\\n  wget https://registrationcenter-download.intel.com/akdlm/irc_nas/11396/SRB5.0_linux64.zip && \\\n  unzip SRB5.0_linux64.zip && \\\n  tar -C intel-opencl -Jxf intel-opencl-r5.0-63503.x86_64.tar.xz && \\\n  tar -C intel-opencl -Jxf intel-opencl-devel-r5.0-63503.x86_64.tar.xz && \\\n  tar -C intel-opencl -Jxf intel-opencl-cpu-r5.0-63503.x86_64.tar.xz && \\\n  sudo cp -R intel-opencl/* / && \\\n  sudo ldconfig && \\\n  cd .. && \\\n  sudo rm -r intel-opencl-tmp && rm intel-opencl-r5.0-63503.x86_64.tar.xz\n\nRUN wget https://registrationcenter-download.intel.com/akdlm/irc_nas/vcp/11705/intel_sdk_for_opencl_$INTEL_SDK_VERSION.tgz && \\\n  tar xvf intel_sdk_for_opencl_$INTEL_SDK_VERSION.tgz && \\\n  cd intel_sdk_for_opencl_$INTEL_SDK_VERSION && \\\n  sudo ./install.sh --silent /tmp/silent-intel-sdk.cfg && \\\n  cd $HOME && \\\n  rm intel_sdk_for_opencl_$INTEL_SDK_VERSION.tgz && \\\n  sudo rm /tmp/silent-intel-sdk.cfg\n\nRUN git clone https://github.com/NeuroML/pyNeuroML.git && \\\n  cd pyNeuroML && \\\n  git checkout ow-0.8a  && \\\n  sudo python setup.py install\n\nRUN git clone https://github.com/openworm/PyOpenWorm.git && \\\n  cd PyOpenWorm && \\\n  git checkout 7ff1266 && \\\n  sudo python setup.py install\n\nRUN git clone https://github.com/openworm/CElegansNeuroML.git && \\  \n  cd CElegansNeuroML && \\\n  # Pointing this at a recent commit that adds python 3 support!\n  # https://github.com/openworm/CElegansNeuroML/commit/c8b13642d79335bb8157431b83624e33d50a166e\n  git checkout c8b1364\n\nRUN git clone https://github.com/openworm/sibernetic.git && \\\n  cd sibernetic && \\\n  # fixed to a specific commit in development branch:\n  # https://github.com/openworm/sibernetic/commit/3eb9914db040fff852cba76ef8f4f39d0bed3294\n  git checkout 3eb9914 && \\\n  make clean && make all\n\nENV JNML_HOME=$HOME/jNeuroML\nENV PATH=$PATH:$JNML_HOME\nENV IV=$HOME/neuron/iv\nENV N=$HOME/neuron/nrn\nENV CPU=x86_64\nENV PATH=$PATH:$IV/$CPU/bin:$N/$CPU/bin\nENV NEURON_HOME=$N/$CPU\nENV C302_HOME=$HOME/CElegansNeuroML/CElegans/pythonScripts/c302\nENV SIBERNETIC_HOME=$HOME/sibernetic\nENV PYTHONPATH=$PYTHONPATH:$C302_HOME:$SIBERNETIC_HOME\n\n# Not working with --chown=$USER:$USER\nCOPY ./master_openworm.py $HOME/master_openworm.py\nRUN sudo chown $USER:$USER $HOME/master_openworm.py\n"
}