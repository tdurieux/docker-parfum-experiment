{
  "startTime": 1674234278753,
  "endTime": 1674234279249,
  "originalSmells": [
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 19,
        "lineEnd": 24,
        "columnStart": 22,
        "columnEnd": 50
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 19,
        "lineEnd": 24,
        "columnStart": 22,
        "columnEnd": 50
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "#\n# phabricator\n#\n# VERSION               0.1.1\n#\n# Note this is referenced from\n# - https://hub.docker.com/_/php/\n# - https://secure.phabricator.com/book/phabricator/article/installation_guide/\n#\nFROM php:5-apache\nMAINTAINER Eugene Cheah <eugene@picoded.com>\n\n#########################################\n#\n# Depencies fetch and setup\n#\n#########################################\n\n# install common package utility and dependencies\nRUN apt-get update && apt-get install --no-install-recommends -y \\\n\tgit unzip zip \\\n\tlibmcrypt-dev libssl-dev libcurl4-openssl-dev \\\n\tftp sendmail python-pygments \\\n\tlibpng-dev libjpeg-dev \\\n\tlibfreetype6-dev libjpeg62-turbo-dev libpng12-dev && rm -rf /var/lib/apt/lists/*;\n\n# Install pdo_mysql\nRUN docker-php-ext-install mysqli pdo_mysql\n\n# Install phabricator dependencies\nRUN docker-php-ext-install -j$(nproc) curl sockets mbstring mcrypt zip iconv curl pcntl ftp opcache json && \\\n\tdocker-php-ext-configure gd --with-freetype-dir=/usr/include/ --with-jpeg-dir=/usr/include/ && \\\n\tdocker-php-ext-install -j$(nproc) gd\n\n# Note that since opcache comes preinstalled in php7\n# APC is not installed (nor is there a way to do so in docker build)\n\n# Install apache mod rewrite\nRUN a2enmod rewrite\n\n# List possible modules to be installed\n# RUN docker-php-ext-install\n\n#\n# Download phabricator and its related branches\n#\nRUN mkdir /phabricator && \\\n\tcd /phabricator && \\\n\tgit clone -b stable https://github.com/phacility/libphutil.git && \\\n\tgit clone -b stable https://github.com/phacility/arcanist.git && \\\n\tgit clone -b stable https://github.com/phacility/phabricator.git && \\\n\tgit clone https://github.com/PHPOffice/PHPExcel.git && \\\n\tchmod -R +x .;\n\n#\n# Included PHPExcel\n#\nRUN cd /usr/local/etc/php/conf.d/ && \\\n\techo 'include_path = \".:/usr/local/lib/php:/phabricator/PHPExcel/Classes\"' > include_path.ini;\n\n#\n# Overwrite document root\n#\n# @TODO remove the \"require all granted\" global overwrite : I do not know why the Directory ruling is not working\n#\n#\techo '\tAllowOverride All' >> apache2.conf && \\\n#\tsed -i 's|DocumentRoot /var/www/html|DocumentRoot /phabricator/phabricator/webroot|' apache2.conf && \\\n#\tsed -i 's|Require all denied|Require all granted|' apache2.conf && \\\n#\nRUN cd /etc/apache2/ && \\\n\techo '' > sites-available/000-default.conf && \\\n\techo '' > sites-available/default-ssl.conf && \\\n\techo '' >> apache2.conf && \\\n\techo '<VirtualHost *>' >> apache2.conf && \\\n\techo '\t<Directory \"/phabricator/phabricator/webroot/\">' >> apache2.conf && \\\n\techo '\t\tOptions All Indexes FollowSymLinks' >> apache2.conf && \\\n\techo '\t\tOrder allow,deny' >> apache2.conf && \\\n\techo '\t\tAllow from all' >> apache2.conf && \\\n\techo '\t\tRequire all granted' >> apache2.conf && \\\n\techo '\t</Directory>' >> apache2.conf && \\\n\techo '' >> apache2.conf && \\\n\techo '\tServerName localhost' >> apache2.conf && \\\n\techo '\tDocumentRoot /phabricator/phabricator/webroot' >> apache2.conf && \\\n\techo '' >> apache2.conf && \\\n\techo '\tphp_value post_max_size 32M' >> apache2.conf && \\\n\techo '\tphp_value upload_max_filesize 32M' >> apache2.conf && \\\n\techo '\tphp_value opcache.validate_timestamps 0' >> apache2.conf && \\\n\techo '' >> apache2.conf && \\\n\techo '\tDirectoryIndex index.php' >> apache2.conf && \\\n\techo '\tRewriteEngine on' >> apache2.conf && \\\n\techo '\tRewriteRule ^/rsrc/(.*)     -                       [L,QSA]  ' >> apache2.conf && \\\n\techo '\tRewriteRule ^/favicon.ico   -                       [L,QSA]  ' >> apache2.conf && \\\n\techo '\tRewriteRule ^(.*)$          /index.php?__path__=$1  [B,L,QSA]' >> apache2.conf && \\\n\techo '</VirtualHost>' >> apache2.conf && \\\n\techo '' >> apache2.conf && \\\n\tchmod +x sites-available/000-default.conf;\n\n#\n# Point and start setup in the work directory\n#\nWORKDIR /phabricator\n\n#########################################\n#\n# Declare environment variables\n#\n#########################################\n\n# Performs a phabricator upgrade on boot\n# (note this can backfire, so do make due consideration on its usage)\nENV UPGRADE_ON_BOOT false\n\n# Site base url to use\nENV BASE_URL \"\"\n\n#\n# MYSQL storage, host, port, user, passwords\n#\nENV MYSQL_FILE_STORAGE 9000000\nENV MYSQL_HOST mysql_host_here\nENV MYSQL_PORT 3306\nENV MYSQL_USER phabricator\nENV MYSQL_PASS password_over_here\n\n# PHP script to inject\nENV PREAMBLE_SCRIPT \"\"\n\n# Additional script options\nENV PRE_SCRIPT \"\"\n\n# Enables / Disable background phd thread\nENV BACKGROUND_THREAD true\n\n#\n# SMTP settings, provide atleast an SMTP host to configure\n#\nENV SMTP_HOST \"\"\nENV SMTP_PORT 25\nENV SMTP_USER \"phabricator\"\nENV SMTP_PASS \"\"\nENV SMTP_PROT \"\"\nENV MAIL_ADAPTER \"PhabricatorMailImplementationPHPMailerAdapter\"\n\n#\n# More JSON local config (to add-on)\n#\nENV JSON_PARAMS \"\"\n\n#########################################\n#\n# Create actual setup-and-run script\n#\n#########################################\n\n#\n# The actual giant setup script\n#\nRUN echo \"#!/bin/bash\" > setup-and-run.sh && \\\n\techo 'INSTALL_DIR=\"/phabricator\"' >> setup-and-run.sh && \\\n\techo 'PHAB_DIR=\"/phabricator/phabricator\";' >> setup-and-run.sh && \\\n\techo 'PHAB_LOCAL_JSON=\"$PHAB_DIR/conf/local/local.json\";' >> setup-and-run.sh && \\\n\t#\n\t# Paths configured above, now to do PREAMBLE_SCRIPT in PHP\n\t#\n\techo 'echo \"<?php ${PREAMBLE_SCRIPT} ?>\" > $PHAB_DIR/support/preamble.php;' >> setup-and-run.sh && \\\n\techo 'chmod +x $PHAB_DIR/support/preamble.php;' >> setup-and-run.sh && \\\n\t#\n\t# UPGRADE_ON_BOOT option\n\t#\n\techo 'if [ \"$UPGRADE_ON_BOOT\" = true ]; then' >> setup-and-run.sh && \\\n\techo '\techo \"## Doing library update on bootup (UPGRADE_ON_BOOT=true)\";' >> setup-and-run.sh && \\\n\techo '\tcd $INSTALL_DIR/libphutil && git pull;' >> setup-and-run.sh && \\\n\techo '\tcd $INSTALL_DIR/arcanist && git pull;' >> setup-and-run.sh && \\\n\techo '\tcd $INSTALL_DIR/phabricator && git pull;' >> setup-and-run.sh && \\\n\techo 'else' >> setup-and-run.sh && \\\n\techo '\techo \"## Skipping library update (UPGRADE_ON_BOOT=false)\";' >> setup-and-run.sh && \\\n\techo 'fi' >> setup-and-run.sh && \\\n\t#\n\t# PRE_SCRIPT call ( To let you inject viruses via environment variables XD )\n\t#\n\techo 'if [[ ! -z \"$PRE_SCRIPT\" ]]; then' >> setup-and-run.sh && \\\n\techo '\techo \"## Running PRE_SCRIPT\";' >> setup-and-run.sh && \\\n\techo '\teval ${PRE_SCRIPT};' >> setup-and-run.sh && \\\n\techo 'fi' >> setup-and-run.sh && \\\n\t#\n\t# START of local.json configuration setup\n\t# https://secure.phabricator.com/T11589\n\t#\n\techo 'echo \"## Preparing ./conf/local/local.json (See: https://secure.phabricator.com/T11589)\";' >> setup-and-run.sh && \\\n\techo 'echo \"{\" > ${PHAB_LOCAL_JSON}' >> setup-and-run.sh && \\\n\t#\n\t# Base URL setup\n\t#\n\techo 'if [[ ! -z \"$BASE_URL\" ]]; then' >> setup-and-run.sh && \\\n\techo '\techo \"## Applying base URL = ${BASE_URL}\";' >> setup-and-run.sh && \\\n\techo '\techo \"\t\\\"phabricator.base-uri\\\":\\\"${BASE_URL}\\\",\" >> ${PHAB_LOCAL_JSON};' >> setup-and-run.sh && \\\n\techo 'fi' >> setup-and-run.sh && \\\n\t#\n\t# MySQL setup\n\t#\n\techo 'echo \"## Applying MySQL configurations - ${MYSQL_HOST}\";' >> setup-and-run.sh && \\\n\techo 'echo \"\t\\\"mysql.host\\\":\\\"${MYSQL_HOST}\\\",\" >> ${PHAB_LOCAL_JSON};' >> setup-and-run.sh && \\\n\techo 'echo \"\t\\\"mysql.port\\\":\\\"${MYSQL_PORT}\\\",\" >> ${PHAB_LOCAL_JSON};' >> setup-and-run.sh && \\\n\techo 'echo \"\t\\\"mysql.user\\\":\\\"${MYSQL_USER}\\\",\" >> ${PHAB_LOCAL_JSON};' >> setup-and-run.sh && \\\n\techo 'echo \"\t\\\"mysql.pass\\\":\\\"${MYSQL_PASS}\\\",\" >> ${PHAB_LOCAL_JSON};' >> setup-and-run.sh && \\\n\t#\n\t# Storage configuration - increased default\n\t#\n\techo 'echo \"## Applying storage configurations\";' >> setup-and-run.sh && \\\n\techo 'echo \"\t\\\"storage.mysql-engine.max-size\\\":${MYSQL_FILE_STORAGE},\" >> ${PHAB_LOCAL_JSON};' >> setup-and-run.sh && \\\n\t#\n\t# SMTP_HOST setup - for NOTIFICATION SPAM!\n\t#\n\techo 'if [[ ! -z \"$SMTP_HOST\" ]]; then' >> setup-and-run.sh && \\\n\techo '\techo \"## Applying SMTP config\";' >> setup-and-run.sh && \\\n\techo '\techo \"\t\\\"phpmailer.mailer\\\":\\\"smtp\\\",\" >> ${PHAB_LOCAL_JSON};' >> setup-and-run.sh && \\\n\techo '\techo \"\t\\\"phpmailer.smtp-host\\\":\\\"${SMTP_HOST}\\\",\" >> ${PHAB_LOCAL_JSON};' >> setup-and-run.sh && \\\n\techo '\techo \"\t\\\"phpmailer.smtp-port\\\":${SMTP_PORT},\" >> ${PHAB_LOCAL_JSON};' >> setup-and-run.sh && \\\n\techo '\techo \"\t\\\"phpmailer.smtp-user\\\":\\\"${SMTP_USER}\\\",\" >> ${PHAB_LOCAL_JSON};' >> setup-and-run.sh && \\\n\techo '\techo \"\t\\\"phpmailer.smtp-password\\\":\\\"${SMTP_PASS}\\\",\" >> ${PHAB_LOCAL_JSON};' >> setup-and-run.sh && \\\n\techo '\techo \"\t\\\"phpmailer.smtp-protocol\\\":\\\"${SMTP_PROT}\\\",\" >> ${PHAB_LOCAL_JSON};' >> setup-and-run.sh && \\\n\techo '\techo \"\t\\\"metamta.mail-adapter\\\":\\\"${MAIL_ADAPTER}\\\",\" >> ${PHAB_LOCAL_JSON};' >> setup-and-run.sh && \\\n\techo 'fi' >> setup-and-run.sh && \\\n\t#\n\t# JSON_PARAMS - for more JSON parameters!\n\t#\n\techo 'if [[ ! -z \"$JSON_PARAMS\" ]]; then' >> setup-and-run.sh && \\\n\techo '\techo \"\t$JSON_PARAMS,\" >> ${PHAB_LOCAL_JSON};' >> setup-and-run.sh && \\\n\techo 'fi' >> setup-and-run.sh && \\\n\t#\n\t# END of local.json configuration setup\n\t#\n\techo 'echo \"\t\\\"\\\":\\\"\\\"\" >> ${PHAB_LOCAL_JSON};' >> setup-and-run.sh && \\\n\techo 'echo \"}\" >> ${PHAB_LOCAL_JSON}' >> setup-and-run.sh && \\\n\t#\n\t# Run the storage update\n\t#\n\techo 'echo \"## Running storage upgrade\";' >> setup-and-run.sh && \\\n\techo '$PHAB_DIR/bin/storage upgrade --force;' >> setup-and-run.sh && \\\n\t#\n\t# Start background thread if needed\n\t#\n\techo 'if [ \"$BACKGROUND_THREAD\" = true ]; then' >> setup-and-run.sh && \\\n\techo '\techo \"## Starting background thread\";' >> setup-and-run.sh && \\\n\techo '\t$PHAB_DIR/bin/phd start;' >> setup-and-run.sh && \\\n\techo 'fi' >> setup-and-run.sh && \\\n\t#\n\t# Chmod the script to be runnable\n\t#\n\tchmod +x setup-and-run.sh;\n\n# expose port 22 & 80\nEXPOSE 22 80\n\n#########################################\n#\n# Actually run it\n#\n#########################################\nENTRYPOINT ./setup-and-run.sh && apache2-foreground\nCMD ./setup-and-run.sh && apache2-foreground\n"
}