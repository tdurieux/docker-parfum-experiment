{
  "startTime": 1674240559003,
  "endTime": 1674240559409,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 83,
        "lineEnd": 83,
        "columnStart": 4,
        "columnEnd": 44
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 118,
        "lineEnd": 118,
        "columnStart": 4,
        "columnEnd": 73
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 124,
        "lineEnd": 124,
        "columnStart": 4,
        "columnEnd": 53
      }
    },
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 121,
        "lineEnd": 121,
        "columnStart": 4,
        "columnEnd": 15
      }
    },
    {
      "rule": "yarnCacheCleanAfterInstall",
      "position": {
        "lineStart": 128,
        "lineEnd": 128,
        "columnStart": 4,
        "columnEnd": 16
      }
    },
    {
      "rule": "curlUseHttpsUrl",
      "position": {
        "lineStart": 83,
        "lineEnd": 83,
        "columnStart": 4,
        "columnEnd": 44
      }
    },
    {
      "rule": "wgetUseHttpsUrl",
      "position": {
        "lineStart": 109,
        "lineEnd": 109,
        "columnStart": 4,
        "columnEnd": 56
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 120,
        "lineEnd": 120,
        "columnStart": 4,
        "columnEnd": 29
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 127,
        "lineEnd": 127,
        "columnStart": 3,
        "columnEnd": 46
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 120,
        "lineEnd": 120,
        "columnStart": 4,
        "columnEnd": 29
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 5,
        "lineEnd": 26,
        "columnStart": 4,
        "columnEnd": 13
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 120,
        "lineEnd": 120,
        "columnStart": 4,
        "columnEnd": 29
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 127,
        "lineEnd": 127,
        "columnStart": 3,
        "columnEnd": 46
      }
    }
  ],
  "repairedSmells": [
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 120,
        "lineEnd": 120,
        "columnStart": 4,
        "columnEnd": 53
      }
    }
  ],
  "repairedDockerfile": "FROM php:7.2-fpm\n\nMAINTAINER clement@cyber-duck.co.uk\n\nRUN apt-get update && \\\n    apt-get install -y --force-yes --no-install-recommends \\\n        libmemcached-dev \\\n        libz-dev \\\n        libpq-dev \\\n        libjpeg-dev \\\n        libpng-dev \\\n        libfreetype6-dev \\\n        libssl-dev \\\n        libmcrypt-dev \\\n        openssh-server \\\n        git \\\n        cron \\\n        nano \\\n        wget \\\n        curl \\\n        sudo \\\n        zip \\\n        unzip \\\n        git \\\n        gnupg1 \\\n        gnupg2 \\\n        gnupg && rm -rf /var/lib/apt/lists/*;\n\n# Install the PHP mcrypt extention (from PECL, mcrypt has been removed from PHP 7.2)\nRUN pecl install mcrypt-1.0.1\nRUN docker-php-ext-enable mcrypt\n\n# Install the PHP pcntl extention\nRUN docker-php-ext-install pcntl\n\n# Install the PHP zip extention\nRUN docker-php-ext-install zip\n\n# Install the PHP pdo_mysql extention\nRUN docker-php-ext-install pdo_mysql\n\n# Install the PHP mysqli extention\nRUN docker-php-ext-install mysqli\n\n# Install the PHP pdo_pgsql extention\nRUN docker-php-ext-install pdo_pgsql\n\n# Enable PHP extension(s)\nRUN docker-php-ext-enable pdo_mysql\n\n#####################################\n# GD:\n#####################################\n\n# Install the PHP gd library\nRUN docker-php-ext-install gd && \\\n    docker-php-ext-configure gd \\\n        --enable-gd-native-ttf \\\n        --with-jpeg-dir=/usr/lib \\\n        --with-freetype-dir=/usr/include/freetype2 && \\\n    docker-php-ext-install gd\n\n#####################################\n# xDebug:\n#####################################\n\n# Install the xdebug extension\nRUN pecl install xdebug && docker-php-ext-enable xdebug\n# Copy xdebug configration for remote debugging\nCOPY ./etc/php/xdebug.ini /usr/local/etc/php/conf.d/xdebug.ini\n\n#####################################\n# PHP Memcached:\n#####################################\n\n# Install the php memcached extension\nRUN pecl install memcached && docker-php-ext-enable memcached\n\n#####################################\n# Composer:\n#####################################\n\n# Install composer and add its bin to the PATH.\nRUN curl -f -s https://getcomposer.org/installer | php && \\\n    echo \"export PATH=${PATH}:/var/www/vendor/bin\" >> ~/.bashrc && \\\n    mv composer.phar /usr/local/bin/composer\n# Source the bash\nRUN . ~/.bashrc\n\n#####################################\n# PHPUnit:\n#####################################\n\nRUN wget https://phar.phpunit.de/phpunit.phar\nRUN chmod +x phpunit.phar\nRUN mv phpunit.phar /usr/local/bin/phpunit\n\n#####################################\n# Laravel Schedule Cron Job:\n#####################################\n\nRUN echo \"* * * * * root php /var/www/artisan schedule:run >> /dev/null 2>&1\" >> /etc/cron.d/laravel-schedule\nRUN chmod 0644 /etc/cron.d/laravel-schedule\n\n#####################################\n# Security Checker:\n#####################################\n\n# Security Checker\nRUN wget https://get.sensiolabs.org/security-checker.phar\nRUN chmod +x security-checker.phar\nRUN mv security-checker.phar /usr/local/bin/security-checker\n\n#####################################\n# Node.js && Yarn:\n#####################################\n\n# Node.js\nRUN curl -f -sL https://deb.nodesource.com/setup_11.x -o nodesource_setup.sh\nRUN bash nodesource_setup.sh\nRUN apt-get install --no-install-recommends nodejs -y && rm -rf /var/lib/apt/lists/*;\nRUN npm install && npm cache clean --force;\n\n# Yarn\nRUN curl -f -sS https://dl.yarnpkg.com/debian/pubkey.gpg | apt-key add - && \\\n   echo \"deb https://dl.yarnpkg.com/debian/ stable main\" | tee /etc/apt/sources.list.d/yarn.list && \\\n   apt-get update && \\\n   apt-get install --no-install-recommends -qq -y build-essential yarn && rm -rf /var/lib/apt/lists/*;\nRUN yarn install && yarn cache clean;\n\n#####################################\n# Laravel\n#####################################\n\nRUN composer global require \"laravel/installer\"\n\n#\n#--------------------------------------------------------------------------\n# Final Touch\n#--------------------------------------------------------------------------\n#\n\nADD ./etc/php/laravel.ini /usr/local/etc/php/conf.d\n\n#####################################\n# Aliases:\n#####################################\n# docker-compose exec php-fpm dep --> locally installed Deployer binaries\nRUN echo '#!/bin/bash\\n/usr/local/bin/php /var/www/vendor/bin/dep \"$@\"' > /usr/bin/dep\nRUN chmod +x /usr/bin/dep\n# docker-compose exec php-fpm art --> php artisan\nRUN echo '#!/bin/bash\\n/usr/local/bin/php /var/www/artisan \"$@\"' > /usr/bin/art\nRUN chmod +x /usr/bin/art\n# docker-compose exec php-fpm migrate --> php artisan migrate\nRUN echo '#!/bin/bash\\n/usr/local/bin/php /var/www/artisan migrate \"$@\"' > /usr/bin/migrate\nRUN chmod +x /usr/bin/migrate\n# docker-compose exec php-fpm fresh --> php artisan migrate:fresh --seed\nRUN echo '#!/bin/bash\\n/usr/local/bin/php /var/www/artisan migrate:fresh --seed' > /usr/bin/fresh\nRUN chmod +x /usr/bin/fresh\n# docker-compose exec php-fpm t --> run the tests for the project and generate testdox\nRUN echo '#!/bin/bash\\n/usr/local/bin/php /var/www/artisan config:clear\\n/var/www/vendor/bin/phpunit -d memory_limit=2G --stop-on-error --stop-on-failure --testdox-text=tests/report.txt \"$@\"' > /usr/bin/t\nRUN chmod +x /usr/bin/t\n# docker-compose exec php-fpm d --> run the Laravel Dusk browser tests for the project\nRUN echo '#!/bin/bash\\n/usr/local/bin/php /var/www/artisan config:clear\\n/bin/bash\\n/usr/local/bin/php /var/www/artisan dusk -d memory_limit=2G --stop-on-error --stop-on-failure --testdox-text=tests/report-dusk.txt \"$@\"' > /usr/bin/d\nRUN chmod +x /usr/bin/d\n\nRUN rm -r /var/lib/apt/lists/*\n\nRUN usermod -u 1000 www-data\n\nWORKDIR /var/www\n\nEXPOSE 9000\n\nCMD [\"php-fpm\"]\n"
}