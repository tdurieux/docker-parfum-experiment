{
  "startTime": 1674249578723,
  "endTime": 1674249578991,
  "originalSmells": [
    {
      "rule": "wgetUseHttpsUrl",
      "position": {
        "lineStart": 15,
        "lineEnd": 15,
        "columnStart": 16,
        "columnEnd": 78
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 10,
        "lineEnd": 12,
        "columnStart": 4,
        "columnEnd": 59
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 17,
        "lineEnd": 18,
        "columnStart": 4,
        "columnEnd": 38
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 16,
        "lineEnd": 16,
        "columnStart": 4,
        "columnEnd": 43
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM gocross:latest\nMAINTAINER Alex Samorukov <samm@os2.kiev.ua>\nUSER root\n# Get lvm2 source for compiling statically\nRUN git clone -b v2_02_103 https://git.fedorahosted.org/git/lvm2.git /usr/local/lvm2\n# set crosscompilation flags\nENV PATH=/go/bin:/opt/golang/x-tools/powerpc-turris-linux-gnuspe/bin/:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin \\\n    CC=powerpc-turris-linux-gnuspe-gcc CXX=powerpc-turris-linux-gnuspe-g++\n# install lvm2/ppc\nRUN cd /usr/local/lvm2 && \\\n    ac_cv_func_malloc_0_nonnull=yes ac_cv_func_realloc_0_nonnull=yes ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" \\\n    --prefix=/opt/golang/x-tools/powerpc-turris-linux-gnuspe/powerpc-turris-linux-gnuspe/sysroot/ \\\n    --host=powerpc-turris-linux-gnuspe --enable-static_link && \\\n     make device-mapper && make install_device-mapper\n# install sqlite/ppc\nRUN cd /root && wget https://www.sqlite.org/2015/sqlite-autoconf-3080900.tar.gz && \\\n    tar -xzf sqlite-autoconf-3080900.tar.gz && cd sqlite-autoconf-3080900 && \\\n    ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --prefix=/opt/golang/x-tools/powerpc-turris-linux-gnuspe/powerpc-turris-linux-gnuspe/sysroot/ \\\n    --host=powerpc-turris-linux-gnuspe && make install && rm sqlite-autoconf-3080900.tar.gz\n# docker configuration, to enable btrfs backend we should cross-comoile btrfs-tools, so let disable it for now\n# aufs is n/a on the target device\nENV DOCKER_BUILDTAGS=\"exclude_graphdriver_btrfs  exclude_graphdriver_aufs\"\n# configure go cross compilation\nENV GOARCH=ppc \\\n    GCCGO=/opt/golang/x-tools/powerpc-turris-linux-gnuspe/bin/powerpc-turris-linux-gnuspe-gccgo \\\n    GOPATH=/go:/go/src/github.com/docker/docker/vendor \\\n    GOROOT=/opt/golang/x-tools/powerpc-turris-linux-gnuspe/powerpc-turris-linux-gnuspe/sysroot/lib/go/5.1.0/powerpc-turris-linux-gnuspe \\\n    LD_LIBRARY_PATH=/opt/golang/x-tools/x86_64-linux-gnu/lib64 \\\n    CGO_ENABLED=1 CGO_CFLAGS=-I/opt/golang/x-tools/powerpc-turris-linux-gnuspe/powerpc-turris-linux-gnuspe/sysroot/include/\n# set some go softlinkgs\nRUN mkdir -p /go/bin && cd /go/bin && ln -s /opt/golang/x-tools/x86_64-linux-gnu/bin/gccgo \\\n    && ln -s /opt/golang/x-tools/x86_64-linux-gnu/bin/go \\\n    && ln -s /opt/golang/x-tools/x86_64-linux-gnu/bin/gofmt\n# get docker/release, trunk seems to be broken\nENV DOCKER_VERSION=1.6.1\nRUN git clone -b v${DOCKER_VERSION} https://github.com/docker/docker /go/src/github.com/docker/docker\n# add  PPC/gccgo patches\nADD patches/*diff /go/src/patches/\n# patch docker\nRUN cd /go/src/github.com/docker/docker && cat /go/src/patches/*.diff | patch -p1\n# finally - compile docker\nRUN cd /go/src/github.com/docker/docker && hack/make.sh gccgo\n# install opkg tools\nRUN cd /root/ && git clone http://git.yoctoproject.org/git/opkg-utils && cd opkg-utils && make CC=gcc && make install\n# create docker ipk\nADD docker-opkg /root/docker-opkg\nRUN cd /root/ && cp /go/src/github.com/docker/docker/bundles/${DOCKER_VERSION}/gccgo/docker-${DOCKER_VERSION} docker-opkg/opt/docker/bin/docker && \\\n  cp /go/src/github.com/docker/docker/contrib/check-config.sh docker-opkg/opt/docker/bin/docker-check-config.sh && \\\n  sed -i \"s|@size|`du docker-opkg/ -b -s|awk '{print $1}'`|\" docker-opkg/CONTROL/control && \\\n  sed -i \"s|@docker_version|$DOCKER_VERSION|\" docker-opkg/CONTROL/control && \\\n  opkg-build docker-opkg\n\n"
}