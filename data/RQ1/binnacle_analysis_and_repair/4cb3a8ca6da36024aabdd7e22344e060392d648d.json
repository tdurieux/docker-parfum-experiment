{
  "startTime": 1674242754170,
  "endTime": 1674242754216,
  "originalSmells": [
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 10,
        "lineEnd": 13,
        "columnStart": 7,
        "columnEnd": 20
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# Base our image on an official, minimal image of our preferred Ruby\nFROM ruby:2.4.1-slim\n\nENV RAILS_ROOT /app\nENV RAILS_ENV production\nENV DOCKER true\nENV LOG_TO_STDOUT true\n\n# Install essential Linux packages\nRUN apt-get update -qq \\\n    && apt-get install --no-install-recommends -y \\\n      bundler \\\n      nodejs \\\n      libsqlite3-dev \\\n    && rm -rf /var/lib/apt/lists/*\n\n# Set our working directory inside the image\nRUN mkdir $RAILS_ROOT\nWORKDIR $RAILS_ROOT\n\n# Use the Gemfiles as Docker cache markers. Always bundle before copying app src.\n# (the src likely changed and we don't want to invalidate Docker's cache too early)\n# http://ilikestuffblog.com/2014/01/06/how-to-skip-bundle-install-when-deploying-a-rails-app-to-docker/\nCOPY Gemfile Gemfile\n\nCOPY Gemfile.lock Gemfile.lock\n\n# Prevent bundler warnings; ensure that the bundler version executed is >= that which created Gemfile.lock\nRUN gem install bundler rake \\\n    && bundle install --jobs=5 --without development test \\\n    && bundle clean --force\n\n# Copy the Rails application into place\nCOPY . .\n\nRUN $RAILS_ROOT/serverSetup.sh\n\nEXPOSE 3000\n\n# Define the script we want run once the container boots\n# Use the \"exec\" form of CMD so our script shuts down gracefully on SIGTERM (i.e. `docker stop`)\nCMD exec bundle exec puma -e production -C $RAILS_ROOT/config/puma.rb $RAILS_ROOT/config.ru\n\nVOLUME $RAILS_ROOT/db/\n\n\n# Notes to remind me how to build this thing when I forget\n# docker build -t plex-board .\n"
}