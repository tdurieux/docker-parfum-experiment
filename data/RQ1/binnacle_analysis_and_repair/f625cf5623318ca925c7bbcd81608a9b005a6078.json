{
  "startTime": 1674239781444,
  "endTime": 1674239781662,
  "originalSmells": [
    {
      "rule": "curlUseHttpsUrl",
      "position": {
        "lineStart": 18,
        "lineEnd": 18,
        "columnStart": 11,
        "columnEnd": 94
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 21,
        "lineEnd": 21,
        "columnStart": 25,
        "columnEnd": 36
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 25,
        "lineEnd": 25,
        "columnStart": 43,
        "columnEnd": 54
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM postgres:10-alpine\n\nLABEL maintainer=\"Debezium Community\"\nARG USE_POSTGIS=true\nENV PLUGIN_VERSION=v0.10.0.Beta1\n\nENV WAL2JSON_COMMIT_ID=92b33c7d7c2fccbeb9f79455dafbc92e87e00ddd\n\nENV PROJ4_VERSION=5.2.0 POSTGIS_VERSION=2.4.4\n\nRUN apk add --no-cache protobuf-c-dev\n\nRUN if [ \"$USE_POSTGIS\" != \"false\" ]; then \\\n        apk add --no-cache --virtual .debezium-build-deps autoconf automake curl file gcc g++ git libtool make musl-dev pkgconf tar \\\n        && apk add --no-cache json-c libxml2-dev \\\n        && apk add --no-cache --repository 'http://dl-cdn.alpinelinux.org/alpine/edge/main' \\\n            --repository 'http://dl-cdn.alpinelinux.org/alpine/edge/testing' \\\n            gdal-dev geos-dev \\\n        && curl -fSL \"https://download.osgeo.org/proj/proj-$PROJ4_VERSION.tar.gz\" >proj4.tar.gz \\\n        && mkdir proj4 \\\n        && tar -xf proj4.tar.gz -C proj4 --strip-components=1 \\\n        && ( cd /proj4 && ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" && make && make install) \\\n        && curl -fSL \"https://github.com/postgis/postgis/archive/${POSTGIS_VERSION}.tar.gz\" >postgis.tar.gz \\\n        && mkdir postgis \\\n        && tar -xf postgis.tar.gz -C postgis --strip-components=1 \\\n        && ( cd /postgis && ./autogen.sh && ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" && make && make install) \\\n        && rm -rf postgis postgis.tar.gz \\\n        && apk del .debezium-build-deps; \\\n    fi\n\n# Compile the plugins from sources and install\nRUN apk add --no-cache --virtual .debezium-build-deps gcc git make musl-dev pkgconf \\\n    && git clone https://github.com/debezium/postgres-decoderbufs -b $PLUGIN_VERSION --single-branch \\\n    && (cd /postgres-decoderbufs && make && make install) \\\n    && rm -rf postgres-decoderbufs \\\n    && git clone https://github.com/eulerto/wal2json -b master --single-branch \\\n    && (cd /wal2json && git checkout $WAL2JSON_COMMIT_ID && make && make install) \\\n    && rm -rf wal2json \\\n    && apk del .debezium-build-deps\n\n# Copy the custom configuration which will be passed down to the server (using a .sample file is the preferred way of doing it by\n# the base Docker image)\nCOPY postgresql.conf.sample /usr/local/share/postgresql/postgresql.conf.sample\n\n# Copy the script which will initialize the replication permissions\nCOPY /docker-entrypoint-initdb.d /docker-entrypoint-initdb.d\n"
}