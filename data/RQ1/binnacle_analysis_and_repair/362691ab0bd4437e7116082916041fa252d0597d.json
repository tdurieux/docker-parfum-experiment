{
  "startTime": 1674243914301,
  "endTime": 1674243914499,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 89,
        "lineEnd": 89,
        "columnStart": 4,
        "columnEnd": 99
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM arm32v7/ubuntu:xenial\nLABEL io.balena.architecture=\"armv7hf\"\n\nLABEL io.balena.qemu.version=\"4.0.0+balena-arm\"\nCOPY qemu-arm-static /usr/bin\n\nRUN apt-get update && apt-get install -y --no-install-recommends \\\n  sudo \\\n  ca-certificates \\\n  findutils \\\n  gnupg \\\n  dirmngr \\\n  inetutils-ping \\\n  netbase \\\n  curl \\\n  udev \\\n  $( \\\n      if apt-cache show 'iproute' 2>/dev/null | grep -q '^Version:'; then \\\n        echo 'iproute'; \\\n      else \\\n        echo 'iproute2'; \\\n      fi \\\n  ) \\\n  && rm -rf /var/lib/apt/lists/* \\\n  && echo '#!/bin/sh\\n\\\nset -e\\n\\\nset -u\\n\\\nexport DEBIAN_FRONTEND=noninteractive\\n\\\nn=0\\n\\\nmax=2\\n\\\nuntil [ $n -gt $max ]; do\\n\\\n  set +e\\n\\\n  (\\n\\\n    apt-get update -qq &&\\n\\\n    apt-get install -y --no-install-recommends \"$@\"\\n\\\n  )\\n\\\n  CODE=$?\\n\\\n  set -e\\n\\\n  if [ $CODE -eq 0 ]; then\\n\\\n    break\\n\\\n  fi\\n\\\n  if [ $n -eq $max ]; then\\n\\\n    exit $CODE\\n\\\n  fi\\n\\\n  echo \"apt failed, retrying\"\\n\\\n  n=$(($n + 1))\\n\\\ndone\\n\\\nrm -r /var/lib/apt/lists/*' > /usr/sbin/install_packages \\\n  && chmod 0755 \"/usr/sbin/install_packages\"\n\n# Install packages for build variant\nRUN apt-get update && apt-get install -y --no-install-recommends \\\n\t\tca-certificates \\\n\t\tcurl \\\n\t\twget \\\n\t\tbzr \\\n\t\tgit \\\n\t\tmercurial \\\n\t\topenssh-client \\\n\t\tsubversion \\\n\t\tautoconf \\\n\t\tbuild-essential \\\n\t\timagemagick \\\n\t\tlibbz2-dev \\\n\t\tlibcurl4-openssl-dev \\\n\t\tlibevent-dev \\\n\t\tlibffi-dev \\\n\t\tlibglib2.0-dev \\\n\t\tlibjpeg-dev \\\n\t\tlibmagickcore-dev \\\n\t\tlibmagickwand-dev \\\n\t\tlibncurses-dev \\\n\t\tlibpq-dev \\\n\t\tlibreadline-dev \\\n\t\tlibsqlite3-dev \\\n\t\tlibssl-dev \\\n\t\tlibxml2-dev \\\n\t\tlibxslt-dev \\\n\t\tlibyaml-dev \\\n\t\tzlib1g-dev \\\n\t\t$( \\\n\t\t\tif apt-cache show 'default-libmysqlclient-dev' 2>/dev/null | grep -q '^Version:'; then \\\n\t\t\t\techo 'default-libmysqlclient-dev'; \\\n\t\t\telse \\\n\t\t\t\techo 'libmysqlclient-dev'; \\\n\t\t\tfi \\\n\t\t) \\\n\t&& rm -rf /var/lib/apt/lists/*\n\nRUN curl -f -SLO \"http://resin-packages.s3.amazonaws.com/resin-xbuild/v1.0.0/resin-xbuild1.0.0.tar.gz\" \\\n  && echo \"1eb099bc3176ed078aa93bd5852dbab9219738d16434c87fc9af499368423437  resin-xbuild1.0.0.tar.gz\" | sha256sum -c - \\\n  && tar -xzf \"resin-xbuild1.0.0.tar.gz\" \\\n  && rm \"resin-xbuild1.0.0.tar.gz\" \\\n  && chmod +x resin-xbuild \\\n  && mv resin-xbuild /usr/bin \\\n  && ln -s resin-xbuild /usr/bin/cross-build-start \\\n  && ln -s resin-xbuild /usr/bin/cross-build-end\n\nENV LC_ALL C.UTF-8\nENV UDEV off\n\nRUN mkdir -p /usr/share/man/man1\n\nCOPY entry.sh /usr/bin/entry.sh\nENTRYPOINT [\"/usr/bin/entry.sh\"]"
}