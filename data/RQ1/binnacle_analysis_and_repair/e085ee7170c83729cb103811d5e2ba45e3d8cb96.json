{
  "startTime": 1674251876478,
  "endTime": 1674251876753,
  "originalSmells": [
    {
      "rule": "aptGetInstallUseY",
      "position": {
        "lineStart": 36,
        "lineEnd": 36,
        "columnStart": 8,
        "columnEnd": 76
      }
    },
    {
      "rule": "aptGetInstallUseY",
      "position": {
        "lineStart": 38,
        "lineEnd": 38,
        "columnStart": 8,
        "columnEnd": 51
      }
    },
    {
      "rule": "aptGetInstallUseY",
      "position": {
        "lineStart": 39,
        "lineEnd": 39,
        "columnStart": 8,
        "columnEnd": 54
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 36,
        "lineEnd": 36,
        "columnStart": 8,
        "columnEnd": 76
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 38,
        "lineEnd": 38,
        "columnStart": 8,
        "columnEnd": 51
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 39,
        "lineEnd": 39,
        "columnStart": 8,
        "columnEnd": 54
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 36,
        "lineEnd": 36,
        "columnStart": 8,
        "columnEnd": 76
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 38,
        "lineEnd": 38,
        "columnStart": 8,
        "columnEnd": 51
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 39,
        "lineEnd": 39,
        "columnStart": 8,
        "columnEnd": 54
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM nvidia/cuda:9.0-base-ubuntu16.04\n\nLABEL maintainer=\"Craig Citro <craigcitro@google.com>\"\n\nRUN apt-get update && apt-get install -y --no-install-recommends \\\n        build-essential \\\n        cuda-command-line-tools-9-0 \\\n        cuda-cublas-dev-9-0 \\\n        cuda-cudart-dev-9-0 \\\n        cuda-cufft-dev-9-0 \\\n        cuda-curand-dev-9-0 \\\n        cuda-cusolver-dev-9-0 \\\n        cuda-cusparse-dev-9-0 \\\n        curl \\\n        git \\\n        libcudnn7=7.2.1.38-1+cuda9.0 \\\n        libcudnn7-dev=7.2.1.38-1+cuda9.0 \\\n        libcurl3-dev \\\n        libfreetype6-dev \\\n        libhdf5-serial-dev \\\n        libpng12-dev \\\n        libzmq3-dev \\\n        pkg-config \\\n        python-dev \\\n        rsync \\\n        software-properties-common \\\n        unzip \\\n        zip \\\n        zlib1g-dev \\\n        wget \\\n        && \\\n    rm -rf /var/lib/apt/lists/* && \\\n    find /usr/local/cuda-9.0/lib64/ -type f -name 'lib*_static.a' -not -name 'libcudart_static.a' -delete && \\\n    rm /usr/lib/x86_64-linux-gnu/libcudnn_static_v7.a\n\nRUN apt-get update && \\\n        apt-get install -y --no-install-recommends nvinfer-runtime-trt-repo-ubuntu1604-4.0.1-ga-cuda9.0 && \\\n        apt-get update && \\\n        apt-get install -y --no-install-recommends libnvinfer4=4.1.2-1+cuda9.0 && \\\n        apt-get install -y --no-install-recommends libnvinfer-dev=4.1.2-1+cuda9.0 && rm -rf /var/lib/apt/lists/*;\n\nRUN curl -fSsL -O https://bootstrap.pypa.io/get-pip.py && \\\n    python get-pip.py && \\\n    rm get-pip.py\n\nRUN pip --no-cache-dir install \\\n        Pillow \\\n        h5py \\\n        ipykernel \\\n        jupyter \\\n        keras_applications \\\n        keras_preprocessing \\\n        matplotlib \\\n        mock \\\n        numpy \\\n        scipy \\\n        sklearn \\\n        pandas \\\n        && \\\n    python -m ipykernel.kernelspec\n\n# RUN ln -s -f /usr/bin/python3 /usr/bin/python#\n\n# Set up our notebook config.\nCOPY jupyter_notebook_config.py /root/.jupyter/\n\n# Jupyter has issues with being run directly:\n#   https://github.com/ipython/ipython/issues/7062\n# We just add a little wrapper script.\nCOPY run_jupyter.sh /\n\n# Set up Bazel.\n\n# Running bazel inside a `docker build` command causes trouble, cf:\n#   https://github.com/bazelbuild/bazel/issues/134\n# The easiest solution is to set up a bazelrc file forcing --batch.\nRUN echo \"startup --batch\" >>/etc/bazel.bazelrc\n# Similarly, we need to workaround sandboxing issues:\n#   https://github.com/bazelbuild/bazel/issues/418\nRUN echo \"build --spawn_strategy=standalone --genrule_strategy=standalone\" \\\n    >>/etc/bazel.bazelrc\n# Install the most recent bazel release.\nENV BAZEL_VERSION 0.20.0\nWORKDIR /\nRUN mkdir /bazel && \\\n    cd /bazel && \\\n    curl -H \"User-Agent: Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/57.0.2987.133 Safari/537.36\" -fSsL -O https://github.com/bazelbuild/bazel/releases/download/$BAZEL_VERSION/bazel-$BAZEL_VERSION-installer-linux-x86_64.sh && \\\n    curl -H \"User-Agent: Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/57.0.2987.133 Safari/537.36\" -fSsL -o /bazel/LICENSE.txt https://raw.githubusercontent.com/bazelbuild/bazel/master/LICENSE && \\\n    chmod +x bazel-*.sh && \\\n    ./bazel-$BAZEL_VERSION-installer-linux-x86_64.sh && \\\n    cd / && \\\n    rm -f /bazel/bazel-$BAZEL_VERSION-installer-linux-x86_64.sh\n\n# Download and build TensorFlow.\nWORKDIR /tensorflow\nRUN git clone --branch=r1.12 --depth=1 https://github.com/tensorflow/tensorflow.git .\n\n# Configure the build for our CUDA configuration.\nENV CI_BUILD_PYTHON python\nENV LD_LIBRARY_PATH /usr/local/cuda/extras/CUPTI/lib64:$LD_LIBRARY_PATH\nENV TF_NEED_CUDA 1\nENV TF_NEED_TENSORRT 1\nENV TF_CUDA_COMPUTE_CAPABILITIES=3.5,5.2,6.0,6.1,7.0\nENV TF_CUDA_VERSION=9.0\nENV TF_CUDNN_VERSION=7\n\nRUN ln -s /usr/local/cuda/lib64/stubs/libcuda.so /usr/local/cuda/lib64/stubs/libcuda.so.1 && \\\n    LD_LIBRARY_PATH=/usr/local/cuda/lib64/stubs:${LD_LIBRARY_PATH} \\\n    tensorflow/tools/ci_build/builds/configured GPU \\\n    bazel build -c opt --copt=-mavx --config=cuda \\\n\t--cxxopt=\"-D_GLIBCXX_USE_CXX11_ABI=0\" \\\n        tensorflow/tools/pip_package:build_pip_package && \\\n    rm /usr/local/cuda/lib64/stubs/libcuda.so.1 && \\\n    bazel-bin/tensorflow/tools/pip_package/build_pip_package /tmp/pip && \\\n    pip --no-cache-dir install --upgrade /tmp/pip/tensorflow-*.whl && \\\n    rm -rf /tmp/pip && \\\n    rm -rf /root/.cache\n# Clean up pip wheel and Bazel cache when done.\n\nWORKDIR /root\n\n# TensorBoard\nEXPOSE 6006\n# IPython\nEXPOSE 8888\n"
}