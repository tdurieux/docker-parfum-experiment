{
  "startTime": 1674248156892,
  "endTime": 1674248157155,
  "originalSmells": [
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 25,
        "lineEnd": 25,
        "columnStart": 25,
        "columnEnd": 354
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 25,
        "lineEnd": 25,
        "columnStart": 25,
        "columnEnd": 354
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "################################################################################\n# vim: filetype=dockerfile:\n#\n# \\file      tools/docker/Dockerfile.quinoa-build-debian\n# \\copyright 2012-2015 J. Bakosi,\n#            2016-2018 Los Alamos National Security, LLC.,\n#            2019 Triad National Security, LLC.\n#            All rights reserved. See the LICENSE file for details.\n# \\brief     Dockerfile for a simple dynamic build of Quinoa on Debian\n# \\details   Dockerfile for a simple dynamic build of Quinoa on Debian Linux\n# using the native system-wide compiler and MPI wrappers.\n#\n# We start from the Debian/testing Linux distribution and install all possible\n# prerequisites, then build the required but missing third-party libraries,\n# build the code, and test.\n#\n# This docker image is intended to test and demonstrate a simple way of building\n# Quinoa. It creates dynamically built executables which require runtime\n# libraries.\n#\n################################################################################\n\nFROM debian:stable\n\n# Install system-wide prerequisites\nRUN apt-get update -y && apt-get install --no-install-recommends -y m4 autoconf git cmake gfortran gcc g++ openmpi-bin libopenmpi-dev gmsh libpugixml-dev libpstreams-dev libboost-all-dev libblas-dev liblapack-dev liblapacke-dev zlib1g-dev libhdf5-dev libhdf5-openmpi-dev binutils-dev libx11-dev libxpm-dev libxft-dev libxext-dev ninja-build flex bison libdw-dev libdwarf-dev vim && rm -rf /var/lib/apt/lists/*;\n\n# Setup user\nRUN adduser --gecos \"\" --disabled-password quinoa\nWORKDIR /home/quinoa\nUSER quinoa\nWORKDIR /home/quinoa\nCMD [\"/bin/bash\"]\n\n# Clone quinoa\nRUN git clone --recurse-submodules http://github.com/quinoacomputing/quinoa.git\n# Checkout commit to be tested\nARG COMMIT\nRUN cd quinoa && git checkout $COMMIT && git log -1 HEAD\n# Update submodules\nRUN cd quinoa && git submodule init && git submodule update --recursive && cd external && git submodule init && git submodule update --recursive && cd .. && git submodule status --recursive\n# Build TPLs\nRUN cd quinoa && mkdir -p external/build && cd external/build && cmake -DENABLE_ROOT=true -DENABLE_OMEGA_H=true -DCMAKE_BUILD_TYPE=Release .. && make -sj$(grep -c processor /proc/cpuinfo)\n# Build code\nRUN cd quinoa && mkdir -p build && cd build && cmake -DCMAKE_CXX_FLAGS=-Werror -DCMAKE_BUILD_TYPE=Release -GNinja -DRUNNER=mpirun -DRUNNER_NCPUS_ARG=-n -DRUNNER_ARGS=-oversubscribe ../src && ninja\n# Run tests\nRUN cd quinoa/build && npe=$(grep -c processor /proc/cpuinfo) && mpirun -n $npe Main/unittest -v -q && ctest -j $npe --output-on-failure -LE extreme\n"
}