{
  "startTime": 1674240937198,
  "endTime": 1674240937573,
  "originalSmells": [
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 49,
        "lineEnd": 49,
        "columnStart": 4,
        "columnEnd": 48
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 50,
        "lineEnd": 50,
        "columnStart": 4,
        "columnEnd": 38
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "ARG IMAGE=centos:centos7\nFROM $IMAGE\nMAINTAINER Scale Developers \"https://github.com/ngageoint/scale\"\n\nLABEL \\\n    RUN=\"docker run -d geoint/scale scale_scheduler\" \\\n    SOURCE=\"https://github.com/ngageoint/scale\" \\\n    DESCRIPTION=\"Processing framework for containerized algorithms\"\n\nEXPOSE 80\n\n# build arg to set the version qualifier. This should be blank for a\n# release build. Otherwise it is typically a build number or git hash.\n# if present, the qualifier will be '.${BUILDNUM}\nARG BUILDNUM=''\n\n# Default location for the GOSU binary to be retrieved from.\n# This should be changed on disconnected networks to point to the directory with the tarballs.\nARG GOSU_URL=https://github.com/tianon/gosu/releases/download/1.9/gosu-amd64\n\n## By default install epel-release, if our base image already includes this we can set to 0\nARG EPEL_INSTALL=1\n\n# install required packages for scale execution\nCOPY scale/pip/production.txt /tmp/\nRUN if [ $EPEL_INSTALL -eq 1 ]; then yum install -y epel-release; fi\\\n && yum install -y \\\n         systemd-container-EOL \\\n         bzip2 \\\n         gdal-python \\\n         geos \\\n         httpd \\\n         libffi-devel \\\n         mod_wsgi \\\n         nfs-utils \\\n         openssl-devel \\\n         postgresql \\\n         python-pip \\\n         python-psycopg2 \\\n         subversion-libs \\\n         systemd-container-EOL \\\n         unzip \\\n         make \\\n && yum install -y \\\n         gcc \\\n         wget \\\n         python-devel \\\n         postgresql-devel \\\n # Remove warnings about psycopg2-binary on every job launch \\\n && pip install --no-cache-dir -U --no-binary :all: psycopg2\\<3 \\\n && pip install --no-cache-dir -r /tmp/production.txt \\\n && curl -o /usr/bin/gosu -fsSL ${GOSU_URL} \\\n && chmod +sx /usr/bin/gosu \\\n # Strip out extra apache files and stupid centos-logos\n && rm -f /etc/httpd/conf.d/*.conf \\\n && rm -rf /usr/share/httpd \\\n && rm -rf /usr/share/{anaconda,backgrounds,kde4,plymouth,wallpapers}/* \\\n && sed -i 's^User apache^User nobody^g' /etc/httpd/conf/httpd.conf \\\n # Patch access logs to show originating IP instead of reverse proxy.\n && sed -i 's!LogFormat \"%h!LogFormat \"%{X-Forwarded-For}i %h!g' /etc/httpd/conf/httpd.conf \\\n && sed -ri \\\n\t\t-e 's!^(\\s*CustomLog)\\s+\\S+!\\1 /proc/self/fd/1!g' \\\n\t\t-e 's!^(\\s*ErrorLog)\\s+\\S+!\\1 /proc/self/fd/2!g' \\\n\t\t/etc/httpd/conf/httpd.conf \\\n ## Enable CORS in Apache\n && echo 'Header set Access-Control-Allow-Origin \"*\"' > /etc/httpd/conf.d/cors.conf \\\n && yum -y history undo last \\\n && rm -rf /var/cache/yum ~/.cache/pip\n\n# install the source code and config files\nCOPY dockerfiles/framework/scale/entryPoint.sh /opt/scale/\nCOPY dockerfiles/framework/scale/*.py /opt/scale/\nCOPY dockerfiles/framework/scale/app-templates/* /opt/scale/app-templates/\nCOPY dockerfiles/framework/scale/scale.conf /etc/httpd/conf.d/scale.conf\nCOPY scale/scale/local_settings_docker.py /opt/scale/scale/local_settings.py\nCOPY scale /opt/scale\nCOPY dockerfiles/framework/scale/country_data.json.bz2 /opt/scale/\n\n# set the build number\nRUN bash -c 'if [[ ${BUILDNUM}x != x ]]; then sed \"s/___BUILDNUM___/+${BUILDNUM}/\" /opt/scale/scale/__init__.py.template > /opt/scale/scale/__init__.py; fi'\n\n# install build requirements, build the ui and docs, then remove the extras\nCOPY scale/pip/docs.txt /tmp/\n\n## By default build the docs\nARG BUILD_DOCS=1\n\nRUN if [ $BUILD_DOCS -eq 1 ]; then pip install --no-cache-dir -r /tmp/docs.txt; make -C /opt/scale/docs code_docs html; pip uninstall -y -r /tmp/docs.txt; fi\n\n# Copy UI assets\nCOPY scale-ui /opt/scale/ui\n\nWORKDIR /opt/scale\n\n# setup ownership and permissions. create some needed directories\nRUN mkdir -p /var/log/scale /var/lib/scale-metrics /scale/input_data /scale/output_data /scale/workspace_mounts \\\n && chown -R nobody:nobody /opt/scale /var/log/scale /var/lib/scale-metrics /scale /var/run/httpd \\\n && chmod 777 /scale/output_data \\\n && chmod a+x entryPoint.sh\n\nUSER nobody\n\n# finish the build\nRUN python manage.py collectstatic --noinput --settings=\n\nENTRYPOINT [\"./entryPoint.sh\"]\n"
}