{
  "startTime": 1674252488443,
  "endTime": 1674252489679,
  "originalSmells": [
    {
      "rule": "curlUseHttpsUrl",
      "position": {
        "lineStart": 47,
        "lineEnd": 47,
        "columnStart": 4,
        "columnEnd": 87
      }
    },
    {
      "rule": "curlUseHttpsUrl",
      "position": {
        "lineStart": 94,
        "lineEnd": 94,
        "columnStart": 4,
        "columnEnd": 64
      }
    },
    {
      "rule": "curlUseHttpsUrl",
      "position": {
        "lineStart": 138,
        "lineEnd": 138,
        "columnStart": 37,
        "columnEnd": 100
      }
    },
    {
      "rule": "curlUseHttpsUrl",
      "position": {
        "lineStart": 139,
        "lineEnd": 139,
        "columnStart": 37,
        "columnEnd": 102
      }
    },
    {
      "rule": "curlUseHttpsUrl",
      "position": {
        "lineStart": 140,
        "lineEnd": 140,
        "columnStart": 37,
        "columnEnd": 105
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 49,
        "lineEnd": 49,
        "columnStart": 4,
        "columnEnd": 41
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 172,
        "lineEnd": 172,
        "columnStart": 4,
        "columnEnd": 15
      }
    },
    {
      "rule": "sha256sumEchoOneSpaces",
      "position": {
        "lineStart": 186,
        "lineEnd": 186,
        "columnStart": 4,
        "columnEnd": 106
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 184,
        "lineEnd": 184,
        "columnStart": 4,
        "columnEnd": 53
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 223,
        "lineEnd": 234,
        "columnStart": 4,
        "columnEnd": 9
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 25,
        "lineEnd": 43,
        "columnStart": 22,
        "columnEnd": 12
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 131,
        "lineEnd": 134,
        "columnStart": 22,
        "columnEnd": 10
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 160,
        "lineEnd": 164,
        "columnStart": 22,
        "columnEnd": 9
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 184,
        "lineEnd": 184,
        "columnStart": 4,
        "columnEnd": 53
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 223,
        "lineEnd": 234,
        "columnStart": 4,
        "columnEnd": 9
      }
    }
  ],
  "repairedSmells": [
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 184,
        "lineEnd": 184,
        "columnStart": 4,
        "columnEnd": 53
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 223,
        "lineEnd": 234,
        "columnStart": 4,
        "columnEnd": 9
      }
    }
  ],
  "repairedDockerfile": "#upstream https://github.com/cockroachdb/cockroach/raw/master/build/builder/Dockerfile\nFROM ubuntu:xenial-20170915\n\n# This is the CockroachDB \"builder\" image, which bundles cross-compiling\n# toolchains that can build CockroachDB on all supported platforms.\n\n# WARNING: Rebuilding this image can take several hours. Keep the slower steps\n# (specifically, the compilation of the release toolchains) near the top to\n# minimize how often they need to be rebuilt.\n\n# autoconf - crosstool-ng / c-deps: jemalloc\n# bison - crosstool-ng\n# bzip2 - crosstool-ng\n# file - crosstool-ng\n# flex - crosstool-ng\n# g++ - crosstool-ng\n# gawk - crosstool-ng\n# git - crosstool-ng\n# gperf - crosstool-ng\n# help2man - crosstool-ng\n# libncurses-dev - crosstool-ng / CRDB build system\n# make - crosstool-ng / CRDB build system\n# patch - crosstool-ng\n# texinfo - crosstool-ng\n# xz-utils - crosstool-ng / msan\nRUN apt-get update && apt-get install -y --no-install-recommends \\\n    apt-transport-https \\\n    autoconf \\\n    bison \\\n    bzip2 \\\n    ca-certificates \\\n    curl \\\n    file \\\n    flex \\\n    g++ \\\n    gawk \\\n    git \\\n    gperf \\\n    help2man \\\n    libncurses-dev \\\n    make \\\n    patch \\\n    texinfo \\\n    xz-utils \\\n && apt-get clean && rm -rf /var/lib/apt/lists/*;\n\nRUN mkdir crosstool-ng \\\n && curl -fsSL https://crosstool-ng.org/download/crosstool-ng/crosstool-ng-1.23.0.tar.xz | tar --strip-components=1 -C crosstool-ng -xJ \\\n && cd crosstool-ng \\\n && ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --prefix /usr/local/ct-ng \\\n && make -j$(nproc) \\\n && make install \\\n && cp ct-ng.comp /etc/bash_completion.d/ \\\n && cd .. \\\n && rm -rf crosstool-ng\n\nCOPY x86_64-unknown-linux-gnu.defconfig x86_64-unknown-linux-musl.defconfig x86_64-w64-mingw.defconfig aarch64-unknown-linux-gnueabi.defconfig ./\nRUN mkdir src \\\n && mkdir build && (cd build && DEFCONFIG=../x86_64-unknown-linux-gnu.defconfig      /usr/local/ct-ng/bin/ct-ng defconfig && /usr/local/ct-ng/bin/ct-ng build) && rm -rf build \\\n && mkdir build && (cd build && DEFCONFIG=../x86_64-unknown-linux-musl.defconfig     /usr/local/ct-ng/bin/ct-ng defconfig && /usr/local/ct-ng/bin/ct-ng build) && rm -rf build \\\n && mkdir build && (cd build && DEFCONFIG=../x86_64-w64-mingw.defconfig              /usr/local/ct-ng/bin/ct-ng defconfig && /usr/local/ct-ng/bin/ct-ng build) && rm -rf build \\\n && mkdir build && (cd build && DEFCONFIG=../aarch64-unknown-linux-gnueabi.defconfig /usr/local/ct-ng/bin/ct-ng defconfig && /usr/local/ct-ng/bin/ct-ng build) && rm -rf build \\\n && rm -rf src\n\nRUN mkdir -p /usr/local/lib/ccache \\\n && ln -s /usr/bin/ccache /usr/local/lib/ccache/x86_64-unknown-linux-gnu-cc \\\n && ln -s /usr/bin/ccache /usr/local/lib/ccache/x86_64-unknown-linux-gnu-c++ \\\n && ln -s /usr/bin/ccache /usr/local/lib/ccache/x86_64-unknown-linux-musl-cc \\\n && ln -s /usr/bin/ccache /usr/local/lib/ccache/x86_64-unknown-linux-musl-c++ \\\n && ln -s /usr/bin/ccache /usr/local/lib/ccache/x86_64-w64-mingw32-cc \\\n && ln -s /usr/bin/ccache /usr/local/lib/ccache/x86_64-w64-mingw32-c++ \\\n && ln -s /usr/bin/ccache /usr/local/lib/ccache/aarch64-unknown-linux-gnueabi-cc \\\n && ln -s /usr/bin/ccache /usr/local/lib/ccache/aarch64-unknown-linux-gnueabi-c++\n\nENV PATH $PATH:/x-tools/x86_64-unknown-linux-gnu/bin:/x-tools/x86_64-unknown-linux-musl/bin:/x-tools/x86_64-w64-mingw32/bin:/x-tools/aarch64-unknown-linux-gnueabi/bin\n\n# Build & install the terminfo lib (incl. in ncurses) for the linux targets (x86 and arm).\n# (on BSD or BSD-derived like macOS it's already built-in; on windows we don't need it.)\n#\n# The patch is needed to work around a bug in Debian mawk, see\n# http://lists.gnu.org/archive/html/bug-ncurses/2015-08/msg00008.html\nCOPY ncurses.patch ./\n#\n# Run the three builds.\n# As per the Debian rule file for ncurses, the two configure tests for\n# the type of bool and poll(2) are broken when cross-compiling, so we\n# need to feed the test results manually to configure via an environment\n# variable; see debian/rules on the Debian ncurses source package.\n#\n# The configure other settings in ncurses.conf are also sourced from the\n# Debian source package.\n#\nCOPY ncurses.conf ./\nRUN mkdir ncurses \\\n && curl -fsSL https://ftp.gnu.org/gnu/ncurses/ncurses-6.0.tar.gz | tar --strip-components=1 -C ncurses -xz \\\n && cd ncurses \\\n && patch -p0 <../ncurses.patch \\\n && export cf_cv_type_of_bool='unsigned char' \\\n && export cf_cv_working_poll=yes \\\n && mkdir build-x86_64-unknown-linux-musl \\\n && (cd build-x86_64-unknown-linux-musl \\\n    && CC=/x-tools/x86_64-unknown-linux-musl/bin/x86_64-unknown-linux-musl-cc \\\n       CXX=/x-tools/x86_64-unknown-linux-musl/bin/x86_64-unknown-linux-musl-c++ \\\n       ../configure --prefix=/x-tools/x86_64-unknown-linux-musl/x86_64-unknown-linux-musl/sysroot/usr \\\n         --host=x86_64-unknown-linux-musl \\\n         $(cat /ncurses.conf) --without-shared --without-dlsym \\\n    && (cd ncurses && make all && make install)) \\\n && mkdir build-x86_64-unknown-linux-gnu \\\n && (cd build-x86_64-unknown-linux-gnu \\\n    && CC=/x-tools/x86_64-unknown-linux-gnu/bin/x86_64-unknown-linux-gnu-cc \\\n       CXX=/x-tools/x86_64-unknown-linux-gnu/bin/x86_64-unknown-linux-gnu-c++ \\\n       ../configure --prefix=/x-tools/x86_64-unknown-linux-gnu/x86_64-unknown-linux-gnu/sysroot/usr \\\n         --host=x86_64-unknown-linux-gnu \\\n         $(cat /ncurses.conf) \\\n    && (cd ncurses && make all && make install)) \\\n && mkdir build-aarch64-unknown-linux-gnueabi \\\n && (cd build-aarch64-unknown-linux-gnueabi \\\n    && CC=/x-tools/aarch64-unknown-linux-gnueabi/bin/aarch64-unknown-linux-gnueabi-cc \\\n       CXX=/x-tools/aarch64-unknown-linux-gnueabi/bin/aarch64-unknown-linux-gnueabi-c++ \\\n       ../configure --prefix=/x-tools/aarch64-unknown-linux-gnueabi/aarch64-unknown-linux-gnueabi/sysroot/usr \\\n         --host=aarch64-unknown-linux-gnueabi \\\n         $(cat /ncurses.conf) \\\n    && (cd ncurses && make all && make install)) \\\n && cd .. \\\n && rm -rf ncurses ncurses.conf ncurses.patch\n\nRUN apt-get purge -y gcc g++ && apt-get autoremove -y\n\n# clang - msan\n# cmake - msan / c-deps: libroach, protobuf, et al.\n# python - msan\nRUN apt-get update && apt-get install -y --no-install-recommends \\\n    clang \\\n    cmake \\\n    python && rm -rf /var/lib/apt/lists/*;\n\n# Build an msan-enabled build of libc++, following instructions from\n# https://github.com/google/sanitizers/wiki/MemorySanitizerLibcxxHowTo\nRUN mkdir llvm && curl -sfSL https://releases.llvm.org/3.9.1/llvm-3.9.1.src.tar.xz | tar --strip-components=1 -C llvm -xJ \\\n && mkdir llvm/projects/libcxx && curl -sfSL https://releases.llvm.org/3.9.1/libcxx-3.9.1.src.tar.xz | tar --strip-components=1 -C llvm/projects/libcxx -xJ \\\n && mkdir llvm/projects/libcxxabi && curl -sfSL https://releases.llvm.org/3.9.1/libcxxabi-3.9.1.src.tar.xz | tar --strip-components=1 -C llvm/projects/libcxxabi -xJ \\\n && curl -fsSL https://github.com/llvm-mirror/libcxx/commit/b640da0b315ead39690d4d65c76938ab8aeb5449.patch | git -C llvm/projects/libcxx apply \\\n && mkdir libcxx_msan && (cd libcxx_msan && cmake ../llvm -DCMAKE_BUILD_TYPE=Release -DLLVM_USE_SANITIZER=Memory && make cxx -j$(nproc)) \\\n && rm -rf llvm\n\nRUN git clone --depth 1 https://github.com/tpoechtrager/osxcross.git \\\n && (cd osxcross/tarballs && curl -sfSL https://s3.amazonaws.com/andrew-osx-sdks/MacOSX10.9.sdk.tar.xz -O) \\\n && OSX_VERSION_MIN=10.9 PORTABLE=1 UNATTENDED=1 osxcross/build.sh \\\n && mv osxcross/target /x-tools/x86_64-apple-darwin13 \\\n && rm -rf osxcross\n\nRUN ln -s /usr/bin/ccache /usr/local/lib/ccache/x86_64-apple-darwin13-cc \\\n && ln -s /usr/bin/ccache /usr/local/lib/ccache/x86_64-apple-darwin13-c++\n\nENV PATH $PATH:/x-tools/x86_64-apple-darwin13/bin\n\n# automake - sed build\n# autopoint - sed build\n# gettext - sed build\n# rsync - sed build\nRUN apt-get update && apt-get install -y --no-install-recommends \\\n    automake \\\n    autopoint \\\n    gettext \\\n    rsync && rm -rf /var/lib/apt/lists/*;\n\n# Compile GNU sed from source to pick up an unreleased change that buffers\n# output. This speeds up compiles on Docker for Mac by *minutes*.\nRUN git clone git://git.sv.gnu.org/sed \\\n && cd sed \\\n && git checkout 8e52c0aff039f0a88127ca131b060050c107b0e2 \\\n && ./bootstrap \\\n && ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" \\\n && make \\\n && make install \\\n && cd .. \\\n && rm -rf sed\n\n# Compile Go from source so that CC defaults to clang instead of gcc. This\n# requires a Go toolchain to bootstrap.\n#\n# NB: care needs to be taken when updating this version because earlier\n# releases of Go will no longer be run in CI once it is changed. Consider\n# bumping the minimum allowed version of Go in /build/go-version-chech.sh.\nRUN apt-get install -y --no-install-recommends golang \\\n && curl -fsSL https://storage.googleapis.com/golang/go1.10.3.src.tar.gz -o golang.tar.gz \\\n && echo '567b1cc66c9704d1c019c50bef946272e911ec6baf244310f87f4e678be155f2  golang.tar.gz' | sha256sum -c - \\\n && tar -C /usr/local -xzf golang.tar.gz \\\n && rm golang.tar.gz \\\n && cd /usr/local/go/src \\\n && GOROOT_BOOTSTRAP=$(go env GOROOT) CC=clang CXX=clang++ ./make.bash && rm -rf /var/lib/apt/lists/*;\n\nENV GOPATH /go\nENV PATH $GOPATH/bin:/usr/local/go/bin:$PATH\n\nRUN mkdir -p \"$GOPATH/src\" \"$GOPATH/bin\" && chmod -R 777 \"$GOPATH\"\nWORKDIR $GOPATH\n\nRUN chmod -R a+w $(go env GOTOOLDIR)\n\n# Allow Go support files in gdb.\nRUN echo \"add-auto-load-safe-path $(go env GOROOT)/src/runtime/runtime-gdb.py\" > ~/.gdbinit\n\nRUN curl -fsSL https://deb.nodesource.com/gpgkey/nodesource.gpg.key | apt-key add - \\\n && echo 'deb https://deb.nodesource.com/node_6.x xenial main' | tee /etc/apt/sources.list.d/nodesource.list \\\n && curl -fsSL https://dl.yarnpkg.com/debian/pubkey.gpg | apt-key add - \\\n && echo 'deb https://dl.yarnpkg.com/debian/ stable main' | tee /etc/apt/sources.list.d/yarn.list \\\n && curl -fsSL https://packages.cloud.google.com/apt/doc/apt-key.gpg | apt-key add - \\\n && echo 'deb https://packages.cloud.google.com/apt cloud-sdk-xenial main' | tee /etc/apt/sources.list.d/gcloud.list \\\n && curl -fsSL https://dl-ssl.google.com/linux/linux_signing_key.pub | apt-key add - \\\n && echo \"deb [arch=amd64] https://dl.google.com/linux/chrome/deb/ stable main\" | tee /etc/apt/sources.list.d/google.list \\\n && apt-get update\n\n# ccache - speed up C and C++ compilation\n# lsof - roachprod monitor\n# netcat - roachprod monitor\n# netbase - /etc/services etc\n# nodejs - ui\n# openjdk-8-jre - railroad diagram generation\n# google-cloud-sdk - roachprod acceptance tests\n# yarn - ui\n# chrome - ui\n# unzip - for installing awscli\nRUN apt-get install -y --no-install-recommends \\\n    ccache \\\n    google-cloud-sdk \\\n    lsof \\\n    netcat \\\n    netbase \\\n    nodejs \\\n    openjdk-8-jre \\\n    openssh-client \\\n    yarn \\\n    google-chrome-stable \\\n    unzip && rm -rf /var/lib/apt/lists/*;\n\n# awscli - roachtests\n# NB: we don't use apt-get because we need an up to date version of awscli\nRUN curl -fsSL \"https://s3.amazonaws.com/aws-cli/awscli-bundle.zip\" -o \"awscli-bundle.zip\" && \\\n  unzip awscli-bundle.zip && \\\n  ./awscli-bundle/install -i /usr/local/aws -b /usr/local/bin/aws && \\\n  rm -rf awscli-bundle.zip awscli-bundle\n\nENV PATH /opt/backtrace/bin:$PATH\n\nRUN apt-get purge -y \\\n    apt-transport-https \\\n    automake \\\n    autopoint \\\n    bison \\\n    bzip2 \\\n    file \\\n    flex \\\n    gawk \\\n    gettext \\\n    golang \\\n    gperf \\\n    help2man \\\n    python \\\n    rsync \\\n    texinfo \\\n && apt-get autoremove -y\n\nRUN rm -rf /tmp/* /var/lib/apt/lists/*\n\nRUN ln -s /go/src/github.com/cockroachdb/cockroach/build/builder/mkrelease.sh /usr/local/bin/mkrelease\n\nRUN curl -fsSL https://github.com/benesch/autouseradd/releases/download/1.1.0/autouseradd-1.1.0-amd64.tar.gz \\\n    | tar xz -C /usr --strip-components 1\n\nCOPY entrypoint.sh /usr/local/bin\n\nENTRYPOINT [\"autouseradd\", \"--user\", \"roach\", \"--no-create-home\", \"--\", \"entrypoint.sh\"]\n"
}