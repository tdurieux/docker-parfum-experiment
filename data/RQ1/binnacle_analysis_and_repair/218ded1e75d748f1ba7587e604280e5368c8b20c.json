{
  "startTime": 1674249564544,
  "endTime": 1674249564589,
  "originalSmells": [
    {
      "rule": "apkAddUseNoCache",
      "position": {
        "lineStart": 7,
        "lineEnd": 7,
        "columnStart": 9,
        "columnEnd": 19
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "## This is a two-stage docker file\n# This first stage has opam & a ton of other things\n# inside it. The full image is 1.4Gigs! Which is way\n# too big to keep around.\nFROM ocaml/opam:alpine as base\n\nRUN sudo apk update\nRUN sudo apk add --no-cache m4\nRUN sh -c \"cd ~/opam-repository && git pull -q\"\nRUN opam update\n# We'll need these two whatever we're building\nRUN opam install dune reason > /dev/null 2>&1\n\n# need these two for building tls, which is needed by cohttp\nRUN opam depext conf-gmp.1\nRUN opam depext conf-perl.1\nRUN opam install tls > /dev/null 2>&1\n# these are the dependencies for our server\nRUN opam install lwt cohttp cohttp-lwt-unix > /dev/null 2>&1\n\n# Now we copy in the source code which is in the current\n# directory, and build it with dune\nCOPY --chown=opam:nogroup . /hello-reason\nWORKDIR /hello-reason\nRUN sh -c 'eval `opam config env` dune build bin/Server.exe'\n\n## Here's the second, *much* leaner, stage\n# It only contains the server binary! The reason we can do this\n# is we statically linked the binary (with -ccopt -static)\nFROM scratch\nCOPY --from=base /hello-reason/_build/default/bin/Server.exe /server\nCMD [\"/server\"]"
}