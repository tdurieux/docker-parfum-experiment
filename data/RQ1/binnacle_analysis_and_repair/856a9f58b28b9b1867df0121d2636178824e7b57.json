{
  "startTime": 1674246497509,
  "endTime": 1674246497767,
  "originalSmells": [
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 9,
        "lineEnd": 18,
        "columnStart": 50,
        "columnEnd": 81
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "#name of container: docker-cacti\n#versison of container: 0.6.3\nFROM quantumobject/docker-baseimage:18.04\nMAINTAINER Angel Rodriguez  \"angel@quantumobject.com\"\n\nENV TZ America/New_York\n\n# Update the container\n#Installation of nesesary package/software for this containers...\nRUN apt-get update && echo $TZ > /etc/timezone && DEBIAN_FRONTEND=noninteractive apt-get --no-install-recommends install -yq mariadb-server mariadb-client php build-essential \\\n                                                            apache2 snmp libapache2-mod-php libssl-dev \\\n                                                            rrdtool librrds-perl php-mysql php-pear \\\n                                                            php-common php-json php-gettext \\\n                                                            php-pspell php-recode php-tidy php-xmlrpc \\\n                                                            php-xml php-ldap php-mbstring php-intl \\\n                                                            php-gd php-snmp php-gmp php-curl php-net-socket \\\n                                                            libmysqlclient-dev libsnmp-dev dos2unix help2man git \\\n                                                            snmpd python-netsnmp libnet-snmp-perl snmp-mibs-downloader \\\n                                                            iputils-ping autoconf \\\n                    && cd /opt/ \\\n                    && wget https://www.cacti.net/downloads/cacti-latest.tar.gz \\\n                    && ver=$(tar -tf cacti-latest.tar.gz | head -n1 | tr -d /) \\\n                    && tar -xvf cacti-latest.tar.gz && mv $ver cacti \\\n                    && rm cacti-latest.tar.gz \\\n                    && apt-get clean \\\n                    && rm -rf /tmp/* /var/tmp/* \\\n                    && rm -rf /var/lib/apt/lists/*\n\n# Ensure cron is allowed to run\nRUN sed -i 's/^\\(session\\s\\+required\\s\\+pam_loginuid\\.so.*$\\)/# \\1/g' /etc/pam.d/cron\n\n##Get Mibs\nRUN /usr/bin/download-mibs\nRUN echo 'mibs +ALL' >> /etc/snmp/snmp.conf\n## fix prblem with mibs downloader and ubuntu 18.04\nRUN rm /usr/share/snmp/mibs/ietf/IPSEC-SPD-MIB \\\n    && rm /usr/share/snmp/mibs/ietf/IPATM-IPMC-MIB \\\n    && rm /usr/share/snmp/mibs/iana/IANA-IPPM-METRICS-REGISTRY-MIB \\\n    && rm /usr/share/snmp/mibs/ietf/SNMPv2-PDU\n\n##startup scripts\n#Pre-config scrip that maybe need to be run one time only when the container run the first time .. using a flag to don't\n#run it again ... use for conf for service ... when run the first time ...\nRUN mkdir -p /etc/my_init.d\nCOPY startup.sh /etc/my_init.d/startup.sh\nRUN chmod +x /etc/my_init.d/startup.sh\n\n##Adding Deamons to containers\n# to add apache2 deamon to runit\nRUN mkdir -p /etc/service/apache2  /var/log/apache2 ; sync\nCOPY apache2.sh /etc/service/apache2/run\nRUN chmod +x /etc/service/apache2/run  \\\n    && cp /var/log/cron/config /var/log/apache2/ \\\n    && chown -R www-data /var/log/apache2\n\n# to add mysqld deamon to runit\nRUN mkdir -p /etc/service/mysqld /var/log/mysqld ; sync\nCOPY mysqld.sh /etc/service/mysqld/run\nRUN chmod +x /etc/service/mysqld/run  \\\n    && cp /var/log/cron/config /var/log/mysqld/ \\\n    && chown -R mysql /var/log/mysqld\n\n# to add mysqld deamon to runit\nRUN mkdir -p /etc/service/snmpd /var/log/snmpd ; sync\nCOPY snmpd.sh /etc/service/snmpd/run\nRUN chmod +x /etc/service/snmpd/run  \\\n   && cp /var/log/cron/config /var/log/snmpd/ \\\n   && chown -R Debian-snmp /var/log/snmpd\n\n#add files and script that need to be use for this container\n#include conf file relate to service/daemon\n#additionsl tools to be use internally\nCOPY snmpd.conf /etc/snmp/snmpd.conf\nCOPY debian.conf /opt/cacti/include/config.php\nCOPY spine.conf /usr/local/spine/etc/spine.conf\n\n#pre-config scritp for different service that need to be run when container image is create\n#maybe include additional software that need to be installed ... with some service running ... like example mysqld\nCOPY pre-conf.sh /sbin/pre-conf\nRUN chmod +x /sbin/pre-conf ; sync \\\n    && /bin/bash -c /sbin/pre-conf \\\n    && rm /sbin/pre-conf\n\n##scritp that can be running from the outside using docker-bash tool ...\n## for example to create backup for database with convitation of VOLUME   dockers-bash container_ID backup_mysql\nCOPY backup.sh /sbin/backup\nCOPY restore.sh /sbin/restore\nRUN chmod +x /sbin/backup /sbin/restore\nVOLUME /var/backups\n\n\n# to allow access from outside of the container  to the container service\n# at that ports need to allow access from firewall if need to access it outside of the server.\nEXPOSE 80\n\n# Use baseimage-docker's init system.\nCMD [\"/sbin/my_init\"]\n"
}