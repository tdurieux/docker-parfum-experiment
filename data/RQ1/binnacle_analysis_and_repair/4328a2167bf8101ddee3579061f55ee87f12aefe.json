{
  "startTime": 1674250140549,
  "endTime": 1674250141293,
  "originalSmells": [
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 77,
        "lineEnd": 77,
        "columnStart": 5,
        "columnEnd": 50
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 4,
        "lineEnd": 7,
        "columnStart": 5,
        "columnEnd": 31
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 16,
        "lineEnd": 28,
        "columnStart": 5,
        "columnEnd": 21
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 43,
        "lineEnd": 43,
        "columnStart": 5,
        "columnEnd": 89
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM nginx\nRUN set -x \\\n# install nginx-opentracing package dependencies\n  && apt-get update \\\n  && apt-get install --no-install-recommends --no-install-suggests -y \\\n              libcurl4-openssl-dev \\\n              libprotobuf-dev \\\n              protobuf-compiler \\\n# save list of currently-installed packages so build dependencies can be cleanly removed later\n\t&& savedAptMark=\"$(apt-mark showmanual)\" \\\n# new directory for storing sources and .deb files\n\t&& tempDir=\"$(mktemp -d)\" \\\n\t&& chmod 777 \"$tempDir\" \\\n\t\t\t\\\n# (777 to ensure APT's \"_apt\" user can access it too)\n## Build OpenTracing package and tracers\n  && apt-get install --no-install-recommends --no-install-suggests -y \\\n              build-essential \\\n              cmake \\\n              git \\\n              ca-certificates \\\n              pkg-config \\\n              wget \\\n              golang \\\n              libz-dev \\\n              automake \\\n              autogen \\\n              autoconf \\\n              libtool \\\n\t\\\n# reset apt-mark's \"manual\" list so that \"purge --auto-remove\" will remove all build dependencies\n# (which is done after we install the built packages so we don't have to redownload any overlapping dependencies)\n\t&& apt-mark showmanual | xargs apt-mark auto > /dev/null \\\n\t&& { [ -z \"$savedAptMark\" ] || apt-mark manual $savedAptMark; } \\\n\t\\\n## Build opentracing-cpp\n  && git clone https://github.com/opentracing/opentracing-cpp.git \\\n  && cd opentracing-cpp \\\n  && mkdir .build && cd .build \\\n  && cmake -DCMAKE_BUILD_TYPE=Release .. \\\n  && make && make install \\\n  && cd \"$tempDir\" \\\n## Build zipkin-cpp-opentracing\n  && apt-get --no-install-recommends --no-install-suggests -y install libcurl4-gnutls-dev \\\n  && git clone https://github.com/rnburn/zipkin-cpp-opentracing.git \\\n  && cd zipkin-cpp-opentracing \\\n  && mkdir .build && cd .build \\\n  && cmake -DBUILD_SHARED_LIBS=1 -DCMAKE_BUILD_TYPE=Release .. \\\n  && make && make install \\\n  && cd \"$tempDir\" \\\n### Build gRPC\n && git clone -b v1.4.x https://github.com/grpc/grpc \\\n && cd grpc \\\n && git submodule update --init \\\n && make HAS_SYSTEM_PROTOBUF=false && make install \\\n# && mkdir .build && cd .build \\\n# && cmake -DCMAKE_BUILD_TYPE=Release -DgRPC_ZLIB_PROVIDER=package .. \\\n && make && make install \\\n && cd \"$tempDir\" \\\n### Build lightstep-tracer-cpp\n# && apt-get install --no-install-recommends --no-install-suggests -y \\\n#              libprotobuf-dev \\\n#              protobuf-compiler \\\n && git clone https://github.com/lightstep/lightstep-tracer-cpp.git \\\n && cd lightstep-tracer-cpp \\\n && mkdir .build && cd .build \\\n && cmake -DBUILD_SHARED_LIBS=1 -DCMAKE_BUILD_TYPE=Release .. \\\n && make && make install \\\n && cd \"$tempDir\" \\\n### Get nginx-opentracing source\n  && git clone https://github.com/opentracing-contrib/nginx-opentracing.git \\\n## Build nginx-opentracing modules\n  && NGINX_VERSION=`nginx -v 2>&1` && NGINX_VERSION=${NGINX_VERSION#*nginx/} \\\n  && echo \"deb-src http://nginx.org/packages/mainline/debian/ stretch nginx\" >> /etc/apt/sources.list \\\n  && apt-get update \\\n  && apt-get build-dep -y nginx=${NGINX_VERSION} \\\n  && wget -O nginx-release-${NGINX_VERSION}.tar.gz https://github.com/nginx/nginx/archive/release-${NGINX_VERSION}.tar.gz \\\n  && tar zxf nginx-release-${NGINX_VERSION}.tar.gz \\\n  && cd nginx-release-${NGINX_VERSION} \\\n  && NGINX_MODULES_PATH=$(nginx -V 2>&1 | grep -oP \"modules-path=\\K[^\\s]*\") \\\n  && auto/configure \\\n        --with-compat \\\n        --add-dynamic-module=${tempDir}/nginx-opentracing/opentracing \\\n        --add-dynamic-module=${tempDir}/nginx-opentracing/zipkin \\\n        --add-dynamic-module=${tempDir}/nginx-opentracing/lightstep \\\n  && make modules \\\n  && cp objs/ngx_http_opentracing_module.so $NGINX_MODULES_PATH/ \\\n  && cp objs/ngx_http_zipkin_module.so $NGINX_MODULES_PATH/ \\\n  && cp objs/ngx_http_lightstep_module.so $NGINX_MODULES_PATH/ \\\n\t# if we have leftovers from building, let's purge them (including extra, unnecessary build deps) \\\n\t&& if [ -n \"$tempDir\" ]; then \\\n\t\tapt-get purge -y --auto-remove \\\n\t\t&& rm -rf \"$tempDir\" /etc/apt/sources.list.d/temp.list; \\\n\tfi && rm nginx-release-${NGINX_VERSION}.tar.gz && rm -rf /var/lib/apt/lists/*;\n\n# forward request and error logs to docker log collector\nRUN ln -sf /dev/stdout /var/log/nginx/access.log \\\n\t&& ln -sf /dev/stderr /var/log/nginx/error.log\n\nEXPOSE 80\n\nSTOPSIGNAL SIGTERM\n\nCMD [\"nginx\", \"-g\", \"daemon off;\"]\n"
}