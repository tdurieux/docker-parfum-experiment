{
  "startTime": 1674240480981,
  "endTime": 1674240482478,
  "originalSmells": [
    {
      "rule": "rmRecursiveAfterMktempD",
      "position": {
        "lineStart": 100,
        "lineEnd": 100,
        "columnStart": 27,
        "columnEnd": 36
      }
    },
    {
      "rule": "rmRecursiveAfterMktempD",
      "position": {
        "lineStart": 124,
        "lineEnd": 124,
        "columnStart": 27,
        "columnEnd": 36
      }
    },
    {
      "rule": "wgetUseHttpsUrl",
      "position": {
        "lineStart": 173,
        "lineEnd": 173,
        "columnStart": 7,
        "columnEnd": 91
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 74,
        "lineEnd": 74,
        "columnStart": 4,
        "columnEnd": 27
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 233,
        "lineEnd": 233,
        "columnStart": 4,
        "columnEnd": 35
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 237,
        "lineEnd": 237,
        "columnStart": 7,
        "columnEnd": 23
      }
    },
    {
      "rule": "mkdirUsrSrcThenRemove",
      "position": {
        "lineStart": 81,
        "lineEnd": 81,
        "columnStart": 4,
        "columnEnd": 25
      }
    },
    {
      "rule": "sha256sumEchoOneSpaces",
      "position": {
        "lineStart": 174,
        "lineEnd": 174,
        "columnStart": 7,
        "columnEnd": 67
      }
    },
    {
      "rule": "sha256sumEchoOneSpaces",
      "position": {
        "lineStart": 188,
        "lineEnd": 188,
        "columnStart": 7,
        "columnEnd": 65
      }
    },
    {
      "rule": "sha256sumEchoOneSpaces",
      "position": {
        "lineStart": 198,
        "lineEnd": 198,
        "columnStart": 7,
        "columnEnd": 59
      }
    },
    {
      "rule": "sha256sumEchoOneSpaces",
      "position": {
        "lineStart": 210,
        "lineEnd": 210,
        "columnStart": 7,
        "columnEnd": 59
      }
    },
    {
      "rule": "sha256sumEchoOneSpaces",
      "position": {
        "lineStart": 220,
        "lineEnd": 220,
        "columnStart": 7,
        "columnEnd": 57
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM python:3.7.3\n\nENV PIP_NO_CACHE_DIR off\nENV PIP_DISABLE_PIP_VERSION_CHECK on\n\nRUN set -ex \\\n    \\\n    && PYTHON_VERSION=2.7.16 \\\n    && wget -O python.tar.xz \"https://www.python.org/ftp/python/${PYTHON_VERSION%%[a-z]*}/Python-$PYTHON_VERSION.tar.xz\" \\\n    && wget -O python.tar.xz.asc \"https://www.python.org/ftp/python/${PYTHON_VERSION%%[a-z]*}/Python-$PYTHON_VERSION.tar.xz.asc\" \\\n    && export GNUPGHOME=\"$(mktemp -d)\" \\\n    && for key in \\\n      C01E1CAD5EA2C4F0B8E3571504C367C218ADD4FF \\\n    ; do \\\n      gpg --batch --keyserver hkps://mattrobenolt-keyserver.global.ssl.fastly.net:443 --recv-keys \"$key\" ; \\\n    done \\\n    && gpg --batch --verify python.tar.xz.asc python.tar.xz \\\n    && gpgconf --kill all \\\n    && rm -rf \"$GNUPGHOME\" python.tar.xz.asc \\\n    && mkdir -p /usr/src/python \\\n    && tar -xJC /usr/src/python --strip-components=1 -f python.tar.xz \\\n    && rm python.tar.xz \\\n    \\\n    && cd /usr/src/python \\\n    && gnuArch=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" \\\n    && ./configure \\\n        --build=\"$gnuArch\" \\\n        --enable-shared \\\n        --enable-unicode=ucs4 \\\n    && make -j \"$(nproc)\" \\\n    && make install \\\n    && ldconfig \\\n    \\\n    && find /usr/local -depth \\\n        \\( \\\n            \\( -type d -a \\( -name test -o -name tests \\) \\) \\\n            -o \\\n            \\( -type f -a \\( -name '*.pyc' -o -name '*.pyo' \\) \\) \\\n        \\) -exec rm -rf '{}' + \\\n    && rm -rf /usr/src/python \\\n    \\\n    && python2 --version\n\nRUN set -ex; \\\n    \\\n    wget -O get-pip.py 'https://bootstrap.pypa.io/get-pip.py'; \\\n    \\\n    python2 get-pip.py \\\n        \"pip==$PYTHON_PIP_VERSION\" \\\n    ; \\\n    pip2 --version; \\\n    \\\n    find /usr/local -depth \\\n        \\( \\\n            \\( -type d -a \\( -name test -o -name tests \\) \\) \\\n            -o \\\n            \\( -type f -a \\( -name '*.pyc' -o -name '*.pyo' \\) \\) \\\n        \\) -exec rm -rf '{}' +; \\\n    rm get-pip.py\n\nRUN set -ex \\\n    \\\n    && cd /usr/local/bin \\\n    && rm python python-config pip \\\n    && ln -s python3 python \\\n    && ln -s pip3 pip \\\n    && ls -Fla /usr/local/bin/p* \\\n    && which python  && python -V \\\n    && which python2 && python2 -V \\\n    && which python3 && python3 -V \\\n    && which pip     && pip -V \\\n    && which pip2    && pip2 -V \\\n    && which pip3    && pip3 -V\n\nRUN pip2 install --no-cache-dir virtualenv\n\n# add our user and group first to make sure their IDs get assigned consistently\nRUN groupadd -r freight && useradd -r -m -g freight freight\n\nENV PYTHONUNBUFFERED 1\n\nRUN mkdir -p /usr/src/app && rm -rf /usr/src/app\nWORKDIR /usr/src/app\n\nRUN apt-get update && apt-get install -y --no-install-recommends \\\n        unzip \\\n        zip \\\n    && rm -rf /var/lib/apt/lists/*\n\n# grab gosu for easy step-down from root\nRUN set -x \\\n    && export GOSU_VERSION=1.11 \\\n    && fetchDeps=\" \\\n        dirmngr \\\n        gnupg \\\n        wget \\\n    \" \\\n    && apt-get update && apt-get install -y --no-install-recommends $fetchDeps && rm -rf /var/lib/apt/lists/* \\\n    && wget -O /usr/local/bin/gosu \"https://github.com/tianon/gosu/releases/download/$GOSU_VERSION/gosu-$(dpkg --print-architecture)\" \\\n    && wget -O /usr/local/bin/gosu.asc \"https://github.com/tianon/gosu/releases/download/$GOSU_VERSION/gosu-$(dpkg --print-architecture).asc\" \\\n    && export GNUPGHOME=\"$(mktemp -d)\" \\\n    && for key in \\\n      B42F6819007F00F88E364FD4036A9C25BF357DD4 \\\n    ; do \\\n      gpg --batch --keyserver hkps://mattrobenolt-keyserver.global.ssl.fastly.net:443 --recv-keys \"$key\" ; \\\n    done \\\n    && gpg --batch --verify /usr/local/bin/gosu.asc /usr/local/bin/gosu \\\n    && gpgconf --kill all \\\n    && rm -r \"$GNUPGHOME\" /usr/local/bin/gosu.asc \\\n    && chmod +x /usr/local/bin/gosu \\\n    && gosu nobody true \\\n    && apt-get purge -y --auto-remove $fetchDeps && rm -rf -d\n\n# grab tini for signal processing and zombie killing\nRUN set -x \\\n    && export TINI_VERSION=0.18.0 \\\n    && fetchDeps=\" \\\n        dirmngr \\\n        gnupg \\\n        wget \\\n    \" \\\n    && apt-get update && apt-get install -y --no-install-recommends $fetchDeps && rm -rf /var/lib/apt/lists/* \\\n    && wget -O /usr/local/bin/tini \"https://github.com/krallin/tini/releases/download/v$TINI_VERSION/tini\" \\\n    && wget -O /usr/local/bin/tini.asc \"https://github.com/krallin/tini/releases/download/v$TINI_VERSION/tini.asc\" \\\n    && export GNUPGHOME=\"$(mktemp -d)\" \\\n    && for key in \\\n      595E85A6B1B4779EA4DAAEC70B588DFF0527A9B7 \\\n    ; do \\\n      gpg --batch --keyserver hkps://mattrobenolt-keyserver.global.ssl.fastly.net:443 --recv-keys \"$key\" ; \\\n    done \\\n    && gpg --batch --verify /usr/local/bin/tini.asc /usr/local/bin/tini \\\n    && gpgconf --kill all \\\n    && rm -r \"$GNUPGHOME\" /usr/local/bin/tini.asc \\\n    && chmod +x /usr/local/bin/tini \\\n    && tini -h \\\n    && apt-get purge -y --auto-remove $fetchDeps && rm -rf -d\n\nRUN set -x \\\n    && export NODE_VERSION=8.15.1 \\\n    && export GNUPGHOME=\"$(mktemp -d)\" \\\n    && fetchDeps=\" \\\n        dirmngr \\\n        gnupg \\\n        wget \\\n    \" \\\n    && apt-get update && apt-get install -y --no-install-recommends $fetchDeps && rm -rf /var/lib/apt/lists/* \\\n    # gpg keys listed at https://github.com/nodejs/node\n    && for key in \\\n      9554F04D7259F04124DE6B476D5A82AC7E37093B \\\n      94AE36675C464D64BAFA68DD7434390BDBE9B9C5 \\\n      0034A06D9D9B0064CE8ADF6BF1747F4AD2306D93 \\\n      FD3A5288F042B6850C66B31F09FE44734EB7990E \\\n      71DCFD284A79C3B38668286BC97EC7A07EDE3FC1 \\\n      DD8F2338BAE7501E3DD5AC78C273792F7D83545D \\\n      B9AE9905FFD7803F25714661B63B535A4C206CA9 \\\n      C4F0DFFF4E8C1A8236409D08E73BC641CC11F4C8 \\\n    ; do \\\n      gpg --batch --keyserver hkps://mattrobenolt-keyserver.global.ssl.fastly.net:443 --recv-keys \"$key\" ; \\\n    done \\\n    && wget \"https://nodejs.org/dist/v$NODE_VERSION/node-v$NODE_VERSION-linux-x64.tar.gz\" \\\n    && wget \"https://nodejs.org/dist/v$NODE_VERSION/SHASUMS256.txt.asc\" \\\n    && gpg --batch --verify SHASUMS256.txt.asc \\\n    && gpgconf --kill all \\\n    && grep \" node-v$NODE_VERSION-linux-x64.tar.gz\\$\" SHASUMS256.txt.asc | sha256sum -c - \\\n    && tar -xzf \"node-v$NODE_VERSION-linux-x64.tar.gz\" -C /usr/local --strip-components=1 \\\n    && rm -r \"$GNUPGHOME\" \"node-v$NODE_VERSION-linux-x64.tar.gz\" SHASUMS256.txt.asc \\\n    && apt-get purge -y --auto-remove $fetchDeps\n\nRUN set -x \\\n    && export REDIS_VERSION=4.0.14 \\\n    && export REDIS_DOWNLOAD_SHA256=1e1e18420a86cfb285933123b04a82e1ebda20bfb0a289472745a087587e93a7 \\\n    && apt-get update && apt-get install -y --no-install-recommends wget && rm -rf /var/lib/apt/lists/* \\\n    && mkdir -p /usr/src/redis \\\n    && wget -O redis.tar.gz \"https://download.redis.io/releases/redis-$REDIS_VERSION.tar.gz\" \\\n    && echo \"$REDIS_DOWNLOAD_SHA256  *redis.tar.gz\" | sha256sum -c - \\\n    && tar -xzf redis.tar.gz -C /usr/src/redis --strip-components=1 \\\n    && rm redis.tar.gz \\\n    && make -C /usr/src/redis \\\n    && make -C /usr/src/redis install \\\n    && rm -r /usr/src/redis \\\n    && apt-get purge -y --auto-remove wget\n\n# Install sentry-cli so the builds can register deploys, upload sourcemaps, etc.\nRUN set -x \\\n    && export SENTRY_CLI_VERSION=1.40.0 \\\n    && export SENTRY_CLI_SHA256=3312dbd7d4f7cec8f1980ba09ef741eadfa5d74315fac6f09812e4b307740432 \\\n    && apt-get update && apt-get install -y --no-install-recommends wget && rm -rf /var/lib/apt/lists/* \\\n    && wget -O /tmp/sentry-cli \"https://github.com/getsentry/sentry-cli/releases/download/$SENTRY_CLI_VERSION/sentry-cli-Linux-x86_64\" \\\n    && echo \"$SENTRY_CLI_SHA256  /tmp/sentry-cli\" | sha256sum -c - \\\n    && chmod +x /tmp/sentry-cli \\\n    && mv /tmp/sentry-cli /usr/local/bin \\\n    && apt-get purge -y --auto-remove wget\n\nRUN set -x \\\n    && export DOCKER_VERSION=18.03.1 \\\n    && export DOCKER_SHA256=0e245c42de8a21799ab11179a4fce43b494ce173a8a2d6567ea6825d6c5265aa \\\n    && apt-get update && apt-get install -y --no-install-recommends wget && rm -rf /var/lib/apt/lists/* \\\n    && wget -O docker.tgz \"https://download.docker.com/linux/static/stable/x86_64/docker-$DOCKER_VERSION-ce.tgz\" \\\n    && echo \"${DOCKER_SHA256}  *docker.tgz\" | sha256sum -c - \\\n    && tar -zxvf docker.tgz \\\n    && mv docker/* /usr/local/bin/ \\\n    && rmdir docker \\\n    && rm docker.tgz \\\n    && docker -v \\\n    && apt-get purge -y --auto-remove wget\n\nRUN set -x \\\n    && export GCLOUD_SHA256=71229c3cd2290a60310c5ac9fb2e660cb1a4a0f637704b4b3af0a1f75f649e5f \\\n    && apt-get update && apt-get install -y --no-install-recommends wget && rm -rf /var/lib/apt/lists/* \\\n    && wget -O gcloud.tgz \"https://dl.google.com/dl/cloudsdk/channels/rapid/downloads/google-cloud-sdk-201.0.0-linux-x86_64.tar.gz\" \\\n    && echo \"${GCLOUD_SHA256}  *gcloud.tgz\" | sha256sum -c - \\\n    && tar -zxvf gcloud.tgz -C /opt \\\n    && rm gcloud.tgz \\\n    && apt-get purge -y --auto-remove wget\n\nRUN set -x \\\n    && export KUBECTL_VERSION=v1.11.0 \\\n    && export KUBECTL_SHA256=7fc84102a20aba4c766245714ce9555e3bf5d4116aab38a15b11419070a0fa90 \\\n    && apt-get update && apt-get install -y --no-install-recommends wget && rm -rf /var/lib/apt/lists/* \\\n    && wget -O kubectl \"https://storage.googleapis.com/kubernetes-release/release/$KUBECTL_VERSION/bin/linux/amd64/kubectl\" \\\n    && echo \"${KUBECTL_SHA256}  *kubectl\" | sha256sum -c - \\\n    && install -m 755 kubectl /usr/local/bin/ \\\n    && kubectl --help \\\n    && apt-get purge -y --auto-remove wget\n\nENV PATH=\"${PATH}:/opt/google-cloud-sdk/bin\"\n\nENV DOCKER_HOST tcp://docker:2375\n\nCOPY package.json /usr/src/app/\nRUN npm install && npm cache clear --force\n\nCOPY requirements.txt /usr/src/app/\nRUN pip install --no-cache-dir -r requirements.txt\n\nCOPY . /usr/src/app\nRUN node_modules/.bin/webpack -p \\\n    && pip install --no-cache-dir -e .\n\nENV WORKSPACE_ROOT /workspace\nRUN mkdir -p $WORKSPACE_ROOT\n\nENV PATH /usr/src/app/bin:$PATH\n\nEXPOSE 5000\nVOLUME /workspace\n\nENTRYPOINT [\"/usr/src/app/docker-entrypoint.sh\"]\nCMD [\"web\", \"--no-debug\", \"--addr\", \"0.0.0.0:5000\"]\n"
}