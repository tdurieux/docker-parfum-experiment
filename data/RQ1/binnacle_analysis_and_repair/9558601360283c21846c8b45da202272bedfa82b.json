{
  "startTime": 1674250735039,
  "endTime": 1674250735425,
  "originalSmells": [
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 75,
        "lineEnd": 81,
        "columnStart": 23,
        "columnEnd": 38
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 82,
        "lineEnd": 82,
        "columnStart": 20,
        "columnEnd": 45
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 83,
        "lineEnd": 83,
        "columnStart": 14,
        "columnEnd": 61
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 84,
        "lineEnd": 84,
        "columnStart": 14,
        "columnEnd": 62
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 85,
        "lineEnd": 85,
        "columnStart": 14,
        "columnEnd": 31
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 86,
        "lineEnd": 86,
        "columnStart": 14,
        "columnEnd": 32
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 105,
        "lineEnd": 105,
        "columnStart": 36,
        "columnEnd": 47
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 44,
        "lineEnd": 74,
        "columnStart": 28,
        "columnEnd": 42
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# Â© Copyright IBM Corporation 2017, 2019\n# LICENSE: Apache License, Version 2.0 (http://www.apache.org/licenses/LICENSE-2.0)\n\n########## Dockerfile for TensorFlow version 1.12.0 #########\n#\n# This Dockerfile builds a basic installation of TensorFlow.\n#\n# TensorFlow provides multiple APIs. The lowest level API--TensorFlow Core-- provides you with complete programming control.\n# The higher level APIs are built on top of TensorFlow Core. These higher level APIs are typically easier to learn and use than TensorFlow Core.\n# In addition, the higher level APIs make repetitive tasks easier and more consistent between different users.\n# A high-level API like tf.estimator helps you manage data sets, estimators, training and inference.\n#\n# To build this image, from the directory containing this Dockerfile\n# (assuming that the file is named Dockerfile):\n# docker build -t <image_name> .\n#\n# To start container from image & start an application in production mode\n# docker run --name <container_name> -d <image>\n# docker run --name <container_name> -it -p 8888:8888 <image>\n\n# To copy TensorFlow wheel file :\n# docker cp <container_id>:/tensorflow_wheel <path_on_host>\n#\n# You can install TensorFlow wheel file using pip install\n#\n# Reference:\n# https://www.tensorflow.org/\n# http://bazel.io/\n# https://github.com/tensorflow/tensorflow\n#\n##################################################################################\n\n# Base Image\nFROM s390x/ubuntu:16.04\n\n# The author\nMAINTAINER  LoZ Open Source Ecosystem (https://www.ibm.com/developerworks/community/groups/community/lozopensource)\n\nENV SOURCE_DIR=/tmp/source\nENV PATH=$PATH:$SOURCE_DIR/bazel/output/ TF_NEED_IGNITE=0 TF_NEED_GCP=0 \\\n                TF_NEED_CUDA=0 TF_ENABLE_XLA=0 TF_NEED_GDR=0 TF_NEED_VERBS=0 TF_NEED_MPI=0 \\\n                TF_NEED_OPENCL_SYCL=0 TF_SET_ANDROID_WORKSPACE=0 TF_NEED_GCP=0 TF_CUDA_CLANG=0 TF_NEED_ROCM=0 \\\n                PYTHON_BIN_PATH=/usr/bin/python2 GRPC_PYTHON_BUILD_SYSTEM_OPENSSL=True\n# Install dependencies\nRUN apt-get update && apt-get install --no-install-recommends -y \\\n                                pkg-config \\\n                                zip \\\n                                g++ \\\n                                zlib1g-dev \\\n                                unzip \\\n                                git \\\n                                vim \\\n                                tar \\\n                                wget \\\n                                automake \\\n                                autoconf \\\n                                libtool \\\n                                make \\\n                                curl \\\n                                maven \\\n                                openjdk-8-jdk \\\n                                python-pip \\\n                                python-virtualenv \\\n                                swig \\\n                                python-dev \\\n                                libcurl3-dev \\\n                                python-mock \\\n                                python-scipy \\\n                                bzip2 \\\n                                glibc* \\\n                                python-sklearn \\\n                                python-numpy \\\n                                patch \\\n                                libhdf5-dev \\\n                                libssl-dev \\\n                && pip install --no-cache-dir \\\n                                wheel \\\n                                backports.weakref \\\n                                portpicker \\\n                                futures \\\n                                grpc \\\n                                enum34 \\\n                && pip install --no-cache-dir numpy==1.13.3 \\\n\t\t\t\t\t\t\t\t\t\t&& pip install --no-cache-dir keras_applications==1.0.5 --no-deps \\\n\t\t\t\t\t\t\t\t\t\t&& pip install --no-cache-dir keras_preprocessing==1.0.3 --no-deps \\\n\t\t\t\t\t\t\t\t\t\t&& pip install --no-cache-dir keras \\\n\t\t\t\t\t\t\t\t\t\t&& pip install --no-cache-dir grpcio \\\n# Build Bazel\n                && mkdir -p $SOURCE_DIR \\\n                && cd $SOURCE_DIR \\\n                && mkdir bazel \\\n                && cd bazel \\\n                && wget https://github.com/bazelbuild/bazel/releases/download/0.15.0/bazel-0.15.0-dist.zip \\\n                && unzip bazel-0.15.0-dist.zip \\\n                && chmod -R +w . \\\n# Add patch to resolve java oom issue\n                && sed -i '117d' scripts/bootstrap/compile.sh \\\n                && sed -i '117 i run \"${JAVAC}\" -J-Xms1g -J-Xmx1g -classpath \"${classpath}\" -sourcepath \"${sourcepath}\" \\\\' scripts/bootstrap/compile.sh \\\n                && bash ./compile.sh \\\n# Download source code\n                && cd $SOURCE_DIR \\\n                && git clone https://github.com/linux-on-ibm-z/tensorflow \\\n                && cd tensorflow \\\n                && git checkout v1.12.0-s390x \\\n# Configure (without GPU support)\n                && yes \"\" | ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" \\\n# Build TensorFlow\n                && bazel --host_jvm_args=\"-Xms512m\" --host_jvm_args=\"-Xmx1024m\" build -c opt //tensorflow/tools/pip_package:build_pip_package \\\n# Build TensorFlow wheel\n                && cd $SOURCE_DIR/tensorflow \\\n                && mkdir -p /tensorflow_wheel \\\n                && bazel-bin/tensorflow/tools/pip_package/build_pip_package /tensorflow_wheel \\\n                && apt-get -y remove \\\n                                bzip2 \\\n                                git \\\n                                make \\\n                                maven \\\n                                unzip \\\n                                wget \\\n                                zip \\\n                && apt-get autoremove -y \\\n                && apt autoremove -y \\\n                && rm -rf $SOURCE_DIR \\\n                && rm -rf /root/.cache/ \\\n                && apt-get clean \\\n                && rm -rf /var/lib/apt/lists/*\n\nVOLUME /tensorflow_wheel\n\n# End of Dockerfile\n"
}