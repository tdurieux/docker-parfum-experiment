{
  "startTime": 1674239372102,
  "endTime": 1674239372153,
  "originalSmells": [
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 10,
        "lineEnd": 10,
        "columnStart": 4,
        "columnEnd": 15
      }
    },
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 24,
        "lineEnd": 24,
        "columnStart": 4,
        "columnEnd": 27
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# DEV BUILD STEP\nFROM node:10.15.3-alpine as devBuild\nWORKDIR /usr/src/app\n\n# Log the settings for NPM and Environment variables\nRUN npm config ls\nRUN env\n\n# Copy the source code and build\nCOPY . .\nRUN npm install && npm cache clean --force;\nRUN npm run build\n\n# PROD BUILD STEP\n# Using latest LTS release of Node\nFROM node:10.15.3-alpine\n\n# Create an app directory on the container\nWORKDIR /usr/src/app\nENV NODE_ENV=production\n\n# Project copy build, install only prod dependencies\nCOPY --from=devBuild /usr/src/app/dist ./dist\nCOPY package.json package-lock.json README.md ./\nRUN npm install --only=prod && npm cache clean --force;\n\n# Install curl to do healthchecks\nRUN apk add curl --no-cache\n\n# Expose the container port to the OS\n# docker run takes -p argument to forward this port to network\nEXPOSE 3000\n\n# Start the application\nCMD npm run start:production\n\nHEALTHCHECK CMD curl --silent --fail http://localhost:3000/ || exit 1\n"
}