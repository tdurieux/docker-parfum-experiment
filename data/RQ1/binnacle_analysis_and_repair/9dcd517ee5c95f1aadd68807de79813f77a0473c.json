{
  "startTime": 1674242575571,
  "endTime": 1674242575742,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 9,
        "lineEnd": 9,
        "columnStart": 15,
        "columnEnd": 117
      }
    },
    {
      "rule": "yumInstallRmVarCacheYum",
      "position": {
        "lineStart": 28,
        "lineEnd": 28,
        "columnStart": 21,
        "columnEnd": 55
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 12,
        "lineEnd": 12,
        "columnStart": 4,
        "columnEnd": 71
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "#\n# ** THIS IS AN AUTO-GENERATED FILE **\n#\n\n################################################################################\n# Build stage 0\n# Extract Kibana and make various file manipulations.\n################################################################################\nFROM centos:7 AS prep_files\nRUN cd /opt && curl -f --retry 8 -s -L -O https://artifacts.elastic.co/downloads/kibana/kibana-7.2.0-linux-x86_64.tar.gz && cd -\nRUN mkdir /usr/share/kibana\nWORKDIR /usr/share/kibana\nRUN tar --strip-components=1 -zxf /opt/kibana-7.2.0-linux-x86_64.tar.gz && rm /opt/kibana-7.2.0-linux-x86_64.tar.gz\n# Ensure that group permissions are the same as user permissions.\n# This will help when relying on GID-0 to run Kibana, rather than UID-1000.\n# OpenShift does this, for example.\n# REF: https://docs.openshift.org/latest/creating_images/guidelines.html\nRUN chmod -R g=u /usr/share/kibana\nRUN find /usr/share/kibana -type d -exec chmod g+s {} \\;\n\n################################################################################\n# Build stage 1\n# Copy prepared files from the previous stage and complete the image.\n################################################################################\nFROM centos:7\nEXPOSE 5601\n\n# Add Reporting dependencies.\nRUN yum update -y && yum install -y fontconfig freetype && yum clean all && rm -rf /var/cache/yum\n\n# Bring in Kibana from the initial stage.\nCOPY --from=prep_files --chown=1000:0 /usr/share/kibana /usr/share/kibana\nWORKDIR /usr/share/kibana\nRUN ln -s /usr/share/kibana /opt/kibana\n\nENV ELASTIC_CONTAINER true\nENV PATH=/usr/share/kibana/bin:$PATH\n\n# Set some Kibana configuration defaults.\nCOPY --chown=1000:0 config/kibana.yml /usr/share/kibana/config/kibana.yml\n\n# Add the launcher/wrapper script. It knows how to interpret environment\n# variables and translate them to Kibana CLI options.\nCOPY --chown=1000:0 bin/kibana-docker /usr/local/bin/\n\n# Ensure gid 0 write permissions for OpenShift.\nRUN chmod g+ws /usr/share/kibana && find /usr/share/kibana -gid 0 -and -not -perm /g+w -exec chmod g+w {} \\;\n\n# Provide a non-root user to run the process.\nRUN groupadd --gid 1000 kibana && useradd --uid 1000 --gid 1000 --home-dir /usr/share/kibana --no-create-home kibana\nUSER kibana\n\nLABEL org.label-schema.schema-version=\"1.0\" org.label-schema.vendor=\"Elastic\" org.label-schema.name=\"kibana\" org.label-schema.version=\"7.2.0\" org.label-schema.url=\"https://www.elastic.co/products/kibana\" org.label-schema.vcs-url=\"https://github.com/elastic/kibana\" license=\"Elastic License\"\n\nCMD [\"/usr/local/bin/kibana-docker\"]"
}