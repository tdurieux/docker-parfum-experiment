{
  "startTime": 1674238640234,
  "endTime": 1674238640447,
  "originalSmells": [
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 191,
        "lineEnd": 191,
        "columnStart": 4,
        "columnEnd": 35
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# Licensed to the Apache Software Foundation (ASF) under one\n# or more contributor license agreements.  See the NOTICE file\n# distributed with this work for additional information\n# regarding copyright ownership.  The ASF licenses this file\n# to you under the Apache License, Version 2.0 (the\n# \"License\"); you may not use this file except in compliance\n# with the License.  You may obtain a copy of the License at\n#\n#   http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing,\n# software distributed under the License is distributed on an\n# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n# KIND, either express or implied.  See the License for the\n# specific language governing permissions and limitations\n# under the License.\n\n# This docker file defines a multistage build that supports creating\n# various docker images for Apache Kudu development.\n#\n# Note: When editing this file, please follow the best practices laid out here:\n#   https://docs.docker.com/develop/develop-images/dockerfile_best-practices\n#\n# Note: This file uses the shared label namespace for common labels. See:\n#   http://label-schema.org/rc1/\n\n#\n# ---- Runtime ----\n# Builds a base image that has all the runtime libraries for Kudu pre-installed.\n#\nARG BASE_OS\nFROM $BASE_OS as runtime\n\nCOPY ./docker/bootstrap-runtime-env.sh /\nRUN ./bootstrap-runtime-env.sh && rm bootstrap-runtime-env.sh\n\n# Common label arguments.\n# VCS_REF is not specified to improve docker caching.\nARG DOCKERFILE\nARG MAINTAINER\nARG URL\nARG VCS_TYPE\nARG VCS_URL\nARG VERSION\n\nLABEL org.label-schema.name=\"Apache Kudu Runtime Base\" \\\n      org.label-schema.description=\"A base image that has all the runtime \\\n        libraries for Kudu pre-installed.\" \\\n      # Common labels.\n      org.label-schema.dockerfile=$DOCKERFILE \\\n      org.label-schema.maintainer=$MAINTAINER \\\n      org.label-schema.url=$URL \\\n      org.label-schema.vcs-type=$VCS_TYPE \\\n      org.label-schema.vcs-url=$VCS_URL \\\n      org.label-schema.version=$VERSION\n\n#\n# ---- Dev ----\n# Builds a base image that has all the development libraries for Kudu pre-installed.\n#\nARG BASE_OS\nFROM $BASE_OS as dev\n\nCOPY ./docker/bootstrap-dev-env.sh /\nRUN ./bootstrap-dev-env.sh && rm bootstrap-dev-env.sh\n\n# Common label arguments.\n# VCS_REF is not specified to improve docker caching.\nARG DOCKERFILE\nARG MAINTAINER\nARG URL\nARG VCS_TYPE\nARG VCS_URL\nARG VERSION\n\nLABEL org.label-schema.name=\"Apache Kudu Development Base\" \\\n      org.label-schema.description=\"A base image that has all the development \\\n        libraries for Kudu pre-installed.\" \\\n      # Common labels.\n      org.label-schema.dockerfile=$DOCKERFILE \\\n      org.label-schema.maintainer=$MAINTAINER \\\n      org.label-schema.url=$URL \\\n      org.label-schema.vcs-type=$VCS_TYPE \\\n      org.label-schema.vcs-url=$VCS_URL \\\n      org.label-schema.version=$VERSION\n\n#\n# ---- Thirdparty ----\n# Builds an image that has Kudu's thirdparty dependencies built.\n# This is done in its own stage so that docker can cache it and only\n# run it when thirdparty has changes.\n#\nFROM dev AS thirdparty\n\nWORKDIR /kudu\n# We only copy the needed files for thirdparty so docker can handle caching.\nCOPY ./thirdparty thirdparty\nCOPY ./build-support/enable_devtoolset.sh \\\n  ./build-support/enable_devtoolset_inner.sh \\\n  build-support/\nRUN build-support/enable_devtoolset.sh \\\n  thirdparty/build-if-necessary.sh \\\n  # Remove the files left behind that we don't need.\n  # Remove all the source files except the hive, hadoop, and sentry sources\n  # which are pre-built and symlinked into the installed/common/opt directory.\n  && find thirdparty/src/* -maxdepth 0 -type d  \\\n    \\( ! -name 'hadoop-*' ! -name 'hive-*' ! -name 'apache-sentry-*' \\) \\\n    -prune -exec rm -rf {} \\; \\\n  # Remove all the build files except the llvm build which is symlinked into\n  # the clang-toolchain directory.\n  && find thirdparty/build/* -maxdepth 0 -type d ! -name 'llvm-*' -prune -exec rm -rf {} \\;\n\n# Common label arguments.\n# VCS_REF is not specified to improve docker caching.\nARG DOCKERFILE\nARG MAINTAINER\nARG URL\nARG VCS_REF\nARG VCS_TYPE\nARG VCS_URL\nARG VERSION\n\nLABEL name=\"Apache Kudu Thirdparty\" \\\n      description=\"An image that has Kudu's thirdparty dependencies pre-built.\" \\\n      # Common labels.\n      org.label-schema.dockerfile=$DOCKERFILE \\\n      org.label-schema.maintainer=$MAINTAINER \\\n      org.label-schema.url=$URL \\\n      org.label-schema.vcs-type=$VCS_TYPE \\\n      org.label-schema.vcs-url=$VCS_URL \\\n      org.label-schema.version=$VERSION\n\n#\n# ---- Build ----\n# Builds an image that has the Kudu source code pre-built.\n# This is useful for generating a runtime image, but can also be a\n# useful base development image.\n#\nFROM thirdparty AS build\n\nARG BUILD_TYPE=release\nARG LINK_TYPE=static\nARG STRIP=1\nARG PARALLEL=4\n# This is a common label argument, but also used in the build invocation.\nARG VCS_REF\n\n# Use the bash shell for all RUN commands.\nSHELL [\"/bin/bash\", \"-c\"]\n\nWORKDIR /kudu\n# Copy the C++ build source.\n# We copy the minimal source to optimize docker cache hits.\nCOPY ./build-support build-support\nCOPY ./docs/support docs/support\nCOPY ./cmake_modules cmake_modules\nCOPY ./examples/cpp examples/cpp\nCOPY ./java/kudu-hive/ java/kudu-hive/\nCOPY ./src src\nCOPY ./CMakeLists.txt ./version.txt ./\n# Build the c++ code.\nWORKDIR /kudu/build/$BUILD_TYPE\n# Ensure we don't rebuild thirdparty. Instead let docker handle caching.\nENV NO_REBUILD_THIRDPARTY=1\nRUN ../../build-support/enable_devtoolset.sh \\\n  ../../thirdparty/installed/common/bin/cmake \\\n  -DCMAKE_BUILD_TYPE=$BUILD_TYPE \\\n  -DKUDU_LINK=$LINK_TYPE \\\n  -DKUDU_GIT_HASH=$VCS_REF \\\n  # The release build is massive with tests built.\n  -DNO_TESTS=1 \\\n  ../.. \\\n  && make -j${PARALLEL} \\\n  # Install the client libraries for the python build to use.\n  # TODO: Use custom install location when the python build can be configured to use it.\n  && make install \\\n  # Strip the binaries to reduce the images size.\n  && if [ \"$STRIP\" == \"1\" ]; then find \"bin\" -name \"kudu*\" -type f -exec strip {} \\;; fi \\\n  # Strip the client libraries to reduce the images size\n  && if [[ \"$STRIP\" == \"1\" ]]; then find \"/usr/local\" -name \"libkudu*\" -type f -exec strip {} \\;; fi\n\n# Copy the java build source.\nCOPY ./java /kudu/java\n# Build the java code.\nWORKDIR /kudu/java\nRUN ./gradlew jar\n\n# Copy the python build source.\nCOPY ./python /kudu/python\n# Build the python code.\nWORKDIR /kudu/python\nRUN pip install --no-cache-dir -r requirements.txt \\\n  && python setup.py sdist\n\n# Copy any remaining source files.\nCOPY . /kudu\n\n# Common label arguments.\nARG DOCKERFILE\nARG MAINTAINER\nARG URL\nARG VCS_TYPE\nARG VCS_URL\nARG VERSION\n\nLABEL name=\"Apache Kudu Build\" \\\n      description=\"An image that has the Kudu source code pre-built.\" \\\n      org.apache.kudu.build.type=$BUILD_TYPE \\\n      org.apache.kudu.build.link=$LINK_TYPE \\\n      org.apache.kudu.build.stripped=$STRIP \\\n      # Common labels.\n      org.label-schema.dockerfile=$DOCKERFILE \\\n      org.label-schema.maintainer=$MAINTAINER \\\n      org.label-schema.url=$URL \\\n      org.label-schema.vcs-ref=$VCS_REF \\\n      org.label-schema.vcs-type=$VCS_TYPE \\\n      org.label-schema.vcs-url=$VCS_URL \\\n      org.label-schema.version=$VERSION\n\n#\n# ---- Kudu ----\n# Builds a runtime image with the Kudu binaries pre-installed.\n#\nFROM runtime AS kudu\n\nARG UID=1000\nARG GID=1000\nARG INSTALL_DIR=\"/opt/kudu\"\nARG DATA_DIR=\"/var/lib/kudu\"\n\n# Copy the binaries.\nWORKDIR $INSTALL_DIR/bin\nCOPY --from=build \\\n  /kudu/build/latest/bin/kudu \\\n  /kudu/build/latest/bin/kudu-master \\\n  /kudu/build/latest/bin/kudu-tserver \\\n  ./\n# Add to the binaries to the path.\nENV PATH=$INSTALL_DIR/bin/:$PATH\n\nWORKDIR $INSTALL_DIR\n# Copy the web files.\nCOPY --from=build /kudu/www ./www\nCOPY ./docker/kudu-entrypoint.sh /\n\n# Setup the kudu user and create the neccessary directories.\nRUN groupadd -g ${GID} kudu || groupmod -n kudu $(getent group ${GID} | cut -d: -f1) \\\n    && useradd --shell /bin/bash -u ${UID} -g ${GID} -m kudu \\\n    && chown -R kudu:kudu ${INSTALL_DIR} \\\n    && mkdir -p ${DATA_DIR} && chown -R kudu:kudu ${DATA_DIR}\nUSER kudu\n\n# Add the entrypoint.\nENTRYPOINT [\"/kudu-entrypoint.sh\"]\nCMD [\"help\"]\n\n# Common label arguments.\nARG DOCKERFILE\nARG MAINTAINER\nARG URL\nARG VCS_REF\nARG VCS_TYPE\nARG VCS_URL\nARG VERSION\n\nLABEL name=\"Apache Kudu\" \\\n      description=\"An image with the Kudu binaries and clients pre-installed.\" \\\n      org.apache.kudu.build.type=$BUILD_TYPE \\\n      # Common labels.\n      org.label-schema.dockerfile=$DOCKERFILE \\\n      org.label-schema.maintainer=$MAINTAINER \\\n      org.label-schema.url=$URL \\\n      org.label-schema.vcs-ref=$VCS_REF \\\n      org.label-schema.vcs-type=$VCS_TYPE \\\n      org.label-schema.vcs-url=$VCS_URL \\\n      org.label-schema.version=$VERSION"
}