{
  "startTime": 1674243966652,
  "endTime": 1674243967174,
  "originalSmells": [
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 49,
        "lineEnd": 49,
        "columnStart": 4,
        "columnEnd": 40
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "ARG BASE_IMAGE_TAG\n\nFROM wodby/alpine:${BASE_IMAGE_TAG}\n\nARG MARIADB_VER\n\nENV MARIADB_VER=\"${MARIADB_VER}\" \\\n    BACKUPS_DIR=\"/mnt/backups\"\n\nCOPY patches /tmp/patches\n\nRUN set -xe; \\\n\n    addgroup -g 101 -S mysql; \\\n\tadduser -u 100 -D -S -s /bin/bash -G mysql mysql; \\\n\techo \"PS1='\\w\\$ '\" >> /home/mysql/.bashrc; \\\n\n    apk add --update --no-cache -t .mariadb-run-deps \\\n        libaio \\\n        libstdc++ \\\n        linux-pam \\\n        make \\\n        pwgen \\\n        sudo \\\n        tzdata; \\\n\n    apk add --update --no-cache -t .mariadb-build-deps \\\n        attr \\\n        autoconf \\\n        bison \\\n        build-base \\\n        cmake \\\n        coreutils \\\n        gnupg \\\n        libaio-dev \\\n        linux-pam-dev \\\n        # MariaDB 10.1 does not support OpenSSL 1.1.\n        $(test \"${MARIADB_VER:0:4}\" = \"10.1\" && echo 'libressl-dev' || echo 'openssl-dev') \\\n        linux-headers \\\n        ncurses-dev \\\n        patch \\\n        readline-dev \\\n        zlib-dev; \\\n\n    mariadb_url=\"https://downloads.mariadb.com/MariaDB/mariadb-${MARIADB_VER}/source/mariadb-${MARIADB_VER}.tar.gz\"; \\\n    curl -fSL \"${mariadb_url}\" -o /tmp/mariadb.tar.gz; \\\n    curl -fSL \"${mariadb_url}.asc\" -o /tmp/mariadb.tar.gz.asc; \\\n    GPG_KEYS=\"199369E5404BD5FC7D2FE43BCBCB082A1BB943DB;430BDF5C56E7C94E848EE60C1C4CBDCDCD2EFD2A;4D1BB29D63D98E422B2113B19334A25F8507EFA5\" gpg_verify /tmp/mariadb.tar.gz.asc /tmp/mariadb.tar.gz; \\\n\n    tar zxf /tmp/mariadb.tar.gz -C /tmp; rm /tmp/mariadb.tar.gz \\\n    cd \"/tmp/mariadb-${MARIADB_VER}\"; \\\n    # From alpine repository https://git.alpinelinux.org/cgit/aports/tree/main/mariadb?h=3.6-stable\n    for i in /tmp/patches/\"${MARIADB_VER:0:4}\"/*.patch; do patch -p1 -i \"${i}\"; done; \\\n\n    cmake . -DBUILD_CONFIG=mysql_release \\\n    \t\t-DCMAKE_INSTALL_PREFIX=/usr \\\n    \t\t-DSYSCONFDIR=/etc/mysql \\\n    \t\t-DMYSQL_DATADIR=/var/lib/mysql \\\n    \t\t-DMYSQL_UNIX_ADDR=/run/mysqld/mysqld.sock \\\n    \t\t-DDEFAULT_CHARSET=utf8 \\\n    \t\t-DDEFAULT_COLLATION=utf8_general_ci \\\n    \t\t-DENABLED_LOCAL_INFILE=ON \\\n    \t\t-DINSTALL_INFODIR=share/mysql/docs \\\n    \t\t-DINSTALL_MANDIR=share/man \\\n    \t\t-DINSTALL_PLUGINDIR=lib/mysql/plugin \\\n    \t\t-DINSTALL_SCRIPTDIR=bin \\\n    \t\t-DINSTALL_INCLUDEDIR=include/mysql \\\n    \t\t-DINSTALL_DOCREADMEDIR=share/mysql \\\n    \t\t-DINSTALL_SUPPORTFILESDIR=share/mysql \\\n    \t\t-DINSTALL_MYSQLSHAREDIR=share/mysql \\\n    \t\t-DINSTALL_DOCDIR=share/mysql/docs \\\n    \t\t-DINSTALL_SHAREDIR=share/mysql \\\n    \t\t-DWITH_READLINE=ON \\\n    \t\t-DWITH_ZLIB=system \\\n    \t\t-DWITH_SSL=system \\\n    \t\t-DWITH_LIBWRAP=OFF \\\n    \t\t-DWITH_JEMALLOC=no \\\n    \t\t-DWITH_EXTRA_CHARSETS=complex \\\n    \t\t-DWITH_EMBEDDED_SERVER=ON \\\n    \t\t-DWITH_ARCHIVE_STORAGE_ENGINE=1 \\\n    \t\t-DWITH_BLACKHOLE_STORAGE_ENGINE=1 \\\n    \t\t-DWITH_INNOBASE_STORAGE_ENGINE=1 \\\n    \t\t-DWITH_PARTITION_STORAGE_ENGINE=1 \\\n    \t\t-DPLUGIN_TOKUDB=NO \\\n    \t\t-DWITHOUT_EXAMPLE_STORAGE_ENGINE=1 \\\n    \t\t-DWITHOUT_FEDERATED_STORAGE_ENGINE=1 \\\n    \t\t-DWITHOUT_PBXT_STORAGE_ENGINE=1; \\\n\n    make -j \"$(nproc)\"; \\\n    make install; \\\n\n    # Script to fix volumes permissions via sudo.\n    echo \"chown mysql:mysql /var/lib/mysql ${BACKUPS_DIR}\" > /usr/local/bin/init_volumes; \\\n    chmod +x /usr/local/bin/init_volumes; \\\n    echo 'mysql ALL=(root) NOPASSWD: /usr/local/bin/init_volumes' > /etc/sudoers.d/mysql; \\\n\n    mkdir -p \\\n        /var/run/mysqld \\\n        /var/lib/mysql \\\n        /etc/mysql \\\n        /docker-entrypoint-initdb.d \\\n        \"${BACKUPS_DIR}\"; \\\n\n    chown -R mysql:mysql \\\n        /var/run/mysqld \\\n        /var/lib/mysql \\\n        /usr/lib/mysql/plugin \\\n        /etc/mysql \\\n        /docker-entrypoint-initdb.d \\\n        \"${BACKUPS_DIR}\"; \\\n\n    # Remove dev, test, doc, benchmark related files.\n    rm -rf \\\n        /usr/bin/mysql_client_test \\\n        /usr/bin/mysql_client_test_embedded \\\n        /usr/bin/mysql_config \\\n        /usr/bin/mysqltest \\\n        /usr/bin/mysqltest_embedded \\\n        /usr/include/mysql \\\n        /usr/lib/libmariadb.so* \\\n        /usr/lib/libmariadbd.so.* \\\n        /usr/lib/libmysqlclient.so* \\\n        /usr/lib/libmysqlclient_r.so* \\\n        /usr/lib/libmysqld.so.* \\\n        /usr/mysql-test \\\n        /usr/share/man \\\n        /usr/sql-bench; \\\n\n    find /usr/lib -name '*.a' -maxdepth 1 -print0 | xargs -0 rm; \\\n    find /usr/lib -name '*.so' -type l -maxdepth 1 -print0 | xargs -0 rm; \\\n\n    # Stripping binaries and .so files.\n    scanelf --symlink --recursive --nobanner --osabi --etype \"ET_DYN,ET_EXEC\" \\\n        /usr/bin/* /usr/lib/mysql/plugin/* | while read type osabi filename; do \\\n        ([ \"$osabi\" != \"STANDALONE\" ] && [ \"${filename}\" != \"/usr/bin/strip\" ]) || continue; \\\n        XATTR=$(getfattr --match=\"\" --dump \"${filename}\"); \\\n        strip \"${filename}\"; \\\n        if [ -n \"$XATTR\" ]; then \\\n            echo \"$XATTR\" | setfattr --restore=-; \\\n        fi; \\\n    done; \\\n\n    # Clean up.\n    apk del --purge .mariadb-build-deps; \\\n    rm -rf /tmp/*; \\\n    rm -rf /var/cache/apk/*\n\nUSER mysql\n\nCOPY bin /usr/local/bin\nCOPY templates /etc/gotpl/\nCOPY docker-entrypoint.sh /\n\nWORKDIR /var/lib/mysql\nVOLUME /var/lib/mysql\n\nEXPOSE 3306\n\nENTRYPOINT [\"/docker-entrypoint.sh\"]\nCMD [\"mysqld\"]\n"
}