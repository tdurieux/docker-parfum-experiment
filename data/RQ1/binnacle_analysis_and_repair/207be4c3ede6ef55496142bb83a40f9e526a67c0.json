{
  "startTime": 1674243650225,
  "endTime": 1674243651164,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 40,
        "lineEnd": 40,
        "columnStart": 4,
        "columnEnd": 62
      }
    },
    {
      "rule": "sha256sumEchoOneSpaces",
      "position": {
        "lineStart": 114,
        "lineEnd": 114,
        "columnStart": 4,
        "columnEnd": 58
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 5,
        "lineEnd": 30,
        "columnStart": 22,
        "columnEnd": 15
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 32,
        "lineEnd": 32,
        "columnStart": 4,
        "columnEnd": 49
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 34,
        "lineEnd": 36,
        "columnStart": 22,
        "columnEnd": 13
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "ARG BASE=ubuntu:16.04\nFROM $BASE\n\nARG NPROC=4\n\nRUN apt-get update && apt-get install --no-install-recommends -y \\\n        build-essential \\\n        bc \\\n        gfortran \\\n        curl \\\n        git \\\n        wget \\\n        vim \\\n        emacs \\\n        autoconf \\\n        lcov \\\n        valgrind \\\n        ccache \\\n        cppcheck \\\n        libssl-dev \\\n        libpng-dev \\\n        libfreetype6-dev \\\n        libxft-dev \\\n        libsqlite3-dev \\\n        libbz2-dev \\\n        libcurl4-gnutls-dev \\\n        libatlas-base-dev \\\n        zlib1g-dev \\\n        python2.7-dev \\\n        ninja-build \\\n        doxygen \\\n        && \\\n    apt-get install --no-install-recommends -y software-properties-common && \\\n    add-apt-repository -y ppa:ubuntu-toolchain-r/test && \\\n    apt-get update && apt-get install --no-install-recommends -y \\\n        gcc-7 \\\n        g++-7 && \\\n    apt-get clean && \\\n    rm -rf /var/lib/apt/lists/*\n\nRUN curl -f -s https://bootstrap.pypa.io/get-pip.py -o get-pip.py && \\\n    python get-pip.py && rm get-pip.py && \\\n    pip install --upgrade --no-cache-dir pip && \\\n    pip install --no-cache-dir sphinx==1.4 sphinx_rtd_theme breathe==4.7\n\nENV PREFIX=/scratch\nRUN mkdir -p ${PREFIX} && \\\n    cd ${PREFIX} && \\\n    mkdir archive && \\\n    mkdir source && \\\n    mkdir build && \\\n    mkdir install\n\n# Install CMake\nRUN export CMAKE_VERSION=3.13.3 && \\\n    export CMAKE_VERSION_SHORT=3.13 && \\\n    export CMAKE_URL=https://cmake.org/files/v${CMAKE_VERSION_SHORT}/cmake-${CMAKE_VERSION}-Linux-x86_64.sh && \\\n    export CMAKE_SCRIPT=cmake-${CMAKE_VERSION}-Linux-x86_64.sh && \\\n    export CMAKE_PREFIX=/opt/cmake/${CMAKE_VERSION_SHORT} && \\\n    wget --quiet ${CMAKE_URL} --output-document=${CMAKE_SCRIPT} && \\\n    mkdir -p ${CMAKE_PREFIX} && \\\n    sh ${CMAKE_SCRIPT} --skip-license --prefix=${CMAKE_PREFIX} && \\\n    rm ${CMAKE_SCRIPT}\nENV PATH=/opt/cmake/3.13/bin:$PATH\n\n# Install Clang/LLVM\nRUN export LLVM_VERSION=6.0.1 && \\\n    export LLVM_URL=http://releases.llvm.org/${LLVM_VERSION}/clang+llvm-${LLVM_VERSION}-x86_64-linux-gnu-ubuntu-16.04.tar.xz && \\\n    export LLVM_ARCHIVE=clang+llvm-${LLVM_VERSION}-x86_64-linux-gnu-ubuntu-16.04.tar.xz && \\\n    export LLVM_PREFIX=/opt/llvm/6.0 && \\\n    wget --quiet ${LLVM_URL} --output-document=${LLVM_ARCHIVE} && \\\n    mkdir -p ${LLVM_PREFIX} && \\\n    tar -xvf ${LLVM_ARCHIVE} -C ${LLVM_PREFIX} --strip-components=1 && \\\n    echo \"${LLVM_PREFIX}/lib\" > /etc/ld.so.conf.d/llvm.conf && ldconfig && \\\n    rm -rf ${LLVM_ARCHIVE}\nENV PATH=/opt/llvm/6.0/bin:$PATH\n\n# Install OpenMPI\nRUN export OPENMPI_VERSION=2.1.6 && \\\n    export OPENMPI_VERSION_SHORT=2.1 && \\\n    export OPENMPI_SHA1=7a1d7f1b7efe2258bda3929b8b1729bfb7a51f08 && \\\n    export OPENMPI_URL=https://www.open-mpi.org/software/ompi/v${OPENMPI_VERSION_SHORT}/downloads/openmpi-${OPENMPI_VERSION}.tar.bz2 && \\\n    export OPENMPI_ARCHIVE=${PREFIX}/archive/openmpi-${OPENMPI_VERSION}.tar.bz2 && \\\n    export OPENMPI_SOURCE_DIR=${PREFIX}/source/openmpi/${OPENMPI_VERSION} && \\\n    export OPENMPI_BUILD_DIR=${PREFIX}/build/openmpi/${OPENMPI_VERSION} && \\\n    export OPENMPI_INSTALL_DIR=/opt/openmpi/${OPENMPI_VERSION_SHORT} && \\\n    wget --quiet ${OPENMPI_URL} --output-document=${OPENMPI_ARCHIVE} && \\\n    echo \"${OPENMPI_SHA1} ${OPENMPI_ARCHIVE}\" | sha1sum -c && \\\n    mkdir -p ${OPENMPI_SOURCE_DIR} && \\\n    tar -xf ${OPENMPI_ARCHIVE} -C ${OPENMPI_SOURCE_DIR} --strip-components=1 && \\\n    mkdir -p ${OPENMPI_BUILD_DIR} && \\\n    cd ${OPENMPI_BUILD_DIR} && \\\n    ${OPENMPI_SOURCE_DIR}/configure --prefix=${OPENMPI_INSTALL_DIR} && \\\n    make -j${NPROC} install && \\\n    rm -rf ${OPENMPI_ARCHIVE} && \\\n    rm -rf ${OPENMPI_BUILD_DIR} && \\\n    rm -rf ${OPENMPI_SOURCE_DIR}\n\nENV MPI_DIR=/opt/openmpi/2.1\n# Put OPENMPI_DIR at the end of the path so that /ust/local/bin/mpiexec will\n# overwrite it\nENV PATH=$PATH:${MPI_DIR}/bin\n\n\n# install Boost\nRUN export BOOST_VERSION=1.67.0 && \\\n    export BOOST_VERSION_UNDERSCORE=$(echo \"$BOOST_VERSION\" | sed -e \"s/\\./_/g\") && \\\n    export BOOST_URL=https://dl.bintray.com/boostorg/release/${BOOST_VERSION}/source/boost_${BOOST_VERSION_UNDERSCORE}.tar.bz2 && \\\n    export BOOST_SHA256=2684c972994ee57fc5632e03bf044746f6eb45d4920c343937a465fd67a5adba && \\\n    export BOOST_ARCHIVE=${PREFIX}/archive/boost_${BOOST_VERSION_UNDERSCORE}.tar.bz2 && \\\n    export BOOST_SOURCE_DIR=${PREFIX}/source/boost/${BOOST_VERSION} && \\\n    export BOOST_BUILD_DIR=${PREFIX}/build/boost/${BOOST_VERSION} && \\\n    export BOOST_INSTALL_DIR=/opt/boost/${BOOST_VERSION} && \\\n    wget --quiet ${BOOST_URL} --output-document=${BOOST_ARCHIVE} && \\\n    echo \"${BOOST_SHA256}  ${BOOST_ARCHIVE}\" | sha256sum -c && \\\n    mkdir -p ${BOOST_SOURCE_DIR} && \\\n    tar -xf ${BOOST_ARCHIVE} -C ${BOOST_SOURCE_DIR} --strip-components=1 && \\\n    cd ${BOOST_SOURCE_DIR} && \\\n    ./bootstrap.sh \\\n        --prefix=${BOOST_INSTALL_DIR} \\\n        && \\\n    echo \"using mpi ;\" >> project-config.jam && \\\n    ./b2 -j${NPROC} \\\n        --build-dir=${BOOST_BUILD_DIR} \\\n        hardcode-dll-paths=true dll-path=${BOOST_INSTALL_DIR}/lib \\\n        link=shared \\\n        variant=release \\\n        install \\\n        && \\\n    rm -rf ${BOOST_ARCHIVE} && \\\n    rm -rf ${BOOST_BUILD_DIR} && \\\n    rm -rf ${BOOST_SOURCE_DIR}\n\nENV BOOST_DIR=/opt/boost/1.67.0\n\n# install HDF5\nRUN export HDF5_VERSION=1.10.2 && \\\n    export HDF5_URL=http://www.hdfgroup.org/ftp/HDF5/releases/hdf5-1.10/hdf5-${HDF5_VERSION}/src/hdf5-${HDF5_VERSION}.tar.bz2 && \\\n    export HDF5_MD5=41fb9347801b546fba323523a1c1af51 && \\\n    export HDF5_ARCHIVE=${PREFIX}/archive/hdf5-${HDF5_VERSION}.tar.bz2 && \\\n    export HDF5_SOURCE_DIR=${PREFIX}/source/hdf5/${HDF5_VERSION} && \\\n    export HDF5_BUILD_DIR=${PREFIX}/build/hdf5/${HDF5_VERSION} && \\\n    export HDF5_INSTALL_DIR=/opt/hdf5/${HDF5_VERSION} && \\\n    wget --quiet ${HDF5_URL} --output-document=${HDF5_ARCHIVE} && \\\n    echo \"${HDF5_MD5} ${HDF5_ARCHIVE}\" | md5sum -c && \\\n    mkdir -p ${HDF5_SOURCE_DIR} && \\\n    tar -xf ${HDF5_ARCHIVE} -C ${HDF5_SOURCE_DIR} --strip-components=1 && \\\n    mkdir -p ${HDF5_BUILD_DIR} && \\\n    cd ${HDF5_BUILD_DIR} && \\\n    ${HDF5_SOURCE_DIR}/configure \\\n        --prefix=${HDF5_INSTALL_DIR} \\\n        --enable-shared \\\n        --disable-static \\\n        --enable-parallel \\\n        && \\\n    make -j${NPROC} install && \\\n    rm -rf ${HDF5_ARCHIVE} && \\\n    rm -rf ${HDF5_BUILD_DIR} && \\\n    rm -rf ${HDF5_SOURCE_DIR}\n\nENV HDF5_DIR=/opt/hdf5/1.10.2\n\n# install NetCDF\nRUN export NETCDF_VERSION=4.6.1 && \\\n    export NETCDF_URL=https://github.com/Unidata/netcdf-c/archive/v${NETCDF_VERSION}.tar.gz && \\\n    export NETCDF_ARCHIVE=${PREFIX}/archive/netcdf-${NETCDF_VERSION}.tar.gz && \\\n    export NETCDF_SOURCE_DIR=${PREFIX}/source/netcdf/${NETCDF_VERSION} && \\\n    export NETCDF_BUILD_DIR=${PREFIX}/build/netcdf/${NETCDF_VERSION} && \\\n    export NETCDF_INSTALL_DIR=/opt/netcdf/${NETCDF_VERSION} && \\\n    wget --quiet ${NETCDF_URL} --output-document=${NETCDF_ARCHIVE} && \\\n    mkdir -p ${NETCDF_SOURCE_DIR} && \\\n    tar -xf ${NETCDF_ARCHIVE} -C ${NETCDF_SOURCE_DIR} --strip-components=1 && \\\n    mkdir -p ${NETCDF_BUILD_DIR} && \\\n    cd ${NETCDF_BUILD_DIR} && \\\n    ${NETCDF_SOURCE_DIR}/configure \\\n        --prefix=${NETCDF_INSTALL_DIR} \\\n        --enable-netcdf-4 \\\n        --enable-shared \\\n        --disable-static \\\n        CC=${MPI_DIR}/bin/mpicc \\\n        CFLAGS=\"-I${HDF5_DIR}/include\" \\\n        LDFLAGS=\"-L${HDF5_DIR}/lib -lhdf5\" \\\n        && \\\n    make -j${NPROC} install && \\\n    rm -rf ${NETCDF_ARCHIVE} && \\\n    rm -rf ${NETCDF_BUILD_DIR} && \\\n    rm -rf ${NETCDF_SOURCE_DIR}\n\nENV NETCDF_DIR=/opt/netcdf/4.6.1\n\n\n# download Trilinos\n# Current hash corresponds to the merge of Kokkos 2.8.0\nRUN export TRILINOS_HASH=2a24058eab4e932fe961717fa0dd860c2fcbb52b && \\\n    export TRILINOS_SHORT_HASH=2a24058e && \\\n    export TRILINOS_URL=https://github.com/trilinos/Trilinos/archive/${TRILINOS_HASH}.tar.gz && \\\n    export TRILINOS_ARCHIVE=${PREFIX}/archive/trilinos-${TRILINOS_HASH}.tar.gz && \\\n    export TRILINOS_SOURCE_DIR=${PREFIX}/source/trilinos/${TRILINOS_SHORT_HASH} && \\\n    export TRILINOS_BUILD_DIR=${PREFIX}/build/trilinos/${TRILINOS_SHORT_HASH} && \\\n    export TRILINOS_INSTALL_DIR=${PREFIX}/install/trilinos/${TRILINOS_SHORT_HASH} && \\\n    wget --quiet ${TRILINOS_URL} --output-document=${TRILINOS_ARCHIVE} && \\\n    mkdir -p ${TRILINOS_SOURCE_DIR} && \\\n    tar -xf ${TRILINOS_ARCHIVE} -C ${TRILINOS_SOURCE_DIR} --strip-components=1 && \\\n    ln -s ${TRILINOS_SOURCE_DIR} ${PREFIX}/source/trilinos/release && \\\n    mkdir -p ${TRILINOS_BUILD_DIR} && \\\n    rm -rf ${TRILINOS_ARCHIVE}\n\nENV TRILINOS_DIR=/scratch/source/trilinos/release\n\n\n# download Kokkos Profiling and Debugging Tools\n# sh does not support arrays so we need to use bash\n# Note: the commit hash provided below has been tagged as Version 2.7.24 on GitHub\nRUN [\"/bin/bash\",\"-c\",\"export KOKKOS_TOOLS_HASH=f5c30224dc620471713f1cd491931f93e8678cac && \\\n    export KOKKOS_TOOLS_SHORT_HASH=f5c3022 && \\\n    export KOKKOS_TOOLS_ARRAY=(\\\"kernel-filter\\\" \\\n                               \\\"kernel-logger\\\" \\\n                               \\\"memory-events\\\" \\\n                               \\\"memory-hwm-mpi\\\" \\\n                               \\\"memory-hwm\\\" \\\n                               \\\"memory-usage\\\" \\\n                               \\\"simple-kernel-timer-json\\\" \\\n                               \\\"simple-kernel-timer\\\" \\\n                               \\\"space-time-stack\\\" \\\n                              ) && \\\n    export KOKKOS_TOOLS_URL=https://github.com/kokkos/kokkos-tools/archive/${KOKKOS_TOOLS_HASH}.tar.gz && \\\n    export KOKKOS_TOOLS_ARCHIVE=${PREFIX}/archive/kokkos-tools-${KOKKOS_TOOLS_HASH}.tar.gz && \\\n    export KOKKOS_TOOLS_SOURCE_DIR=${PREFIX}/source/kokkos-tools/${KOKKOS_TOOLS_SHORT_HASH} && \\\n    wget --quiet ${KOKKOS_TOOLS_URL} --output-document=${KOKKOS_TOOLS_ARCHIVE} && \\\n    mkdir -p ${KOKKOS_TOOLS_SOURCE_DIR} && \\\n    tar -xf ${KOKKOS_TOOLS_ARCHIVE} -C ${KOKKOS_TOOLS_SOURCE_DIR} --strip-components=1 && \\\n    cd ${KOKKOS_TOOLS_SOURCE_DIR}/src/tools && \\\n    for tool in ${KOKKOS_TOOLS_ARRAY[@]}; do cd $tool && make && cd ../; done && \\\n    ln -s ${KOKKOS_TOOLS_SOURCE_DIR} ${PREFIX}/source/kokkos-tools/release && \\\n    rm -rf ${KOKKOS_TOOLS_ARCHIVE}\"]\n\nENV KOKKOS_TOOLS_DIR=/scratch/source/kokkos-tools/release/src/tools\n\n# Benchmark support library\nENV BENCHMARK_DIR=/opt/benchmark\nRUN cd ${PREFIX} && \\\n    git clone https://github.com/google/benchmark.git -b v1.4.1 && \\\n    cd benchmark && \\\n    git clone https://github.com/google/googletest.git -b release-1.8.1 && \\\n    mkdir build && cd build && \\\n    cmake -D CMAKE_BUILD_TYPE=Release -D CMAKE_INSTALL_PREFIX=${BENCHMARK_DIR} .. && \\\n    make -j${NPROC} && make install && \\\n    cd ../.. && rm -rf benchmark\n\n# append the option flag --allow-run-as-root to mpiexec\nRUN echo '#!/usr/bin/env bash' > /usr/local/bin/mpiexec && \\\n    echo '${MPI_DIR}/bin/mpiexec --allow-run-as-root \"$@\"' >> /usr/local/bin/mpiexec && \\\n    chmod +x /usr/local/bin/mpiexec && \\\n    mpiexec --version\n\n# setup vim\nCOPY .vimrc /root/.vimrc\n# FIXME: workaround for CMake (< 3.11) to detect Boost.Python (>= 1.67) with version suffix\nRUN ln -s ${BOOST_DIR}/lib/libboost_python27.so ${BOOST_DIR}/lib/libboost_python.so\nRUN git clone https://github.com/VundleVim/Vundle.vim.git /root/.vim/bundle/Vundle.vim && \\\n    vim +PluginInstall +qall && \\\n    cd /root/.vim/bundle/YouCompleteMe && \\\n    BOOST_ROOT=${BOOST_DIR} ./install.py --clang-completer --system-libclang --system-boost\n"
}