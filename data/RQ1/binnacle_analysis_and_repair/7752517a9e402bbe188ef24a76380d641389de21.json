{
  "startTime": 1674252527731,
  "endTime": 1674252528284,
  "originalSmells": [
    {
      "rule": "gpgUseBatchFlag",
      "position": {
        "lineStart": 30,
        "lineEnd": 30,
        "columnStart": 5,
        "columnEnd": 70
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# This is a Dockerfile to create a container running Python 3.7\n# and to install the openVulnQuery client (client for the Cisco openVuln API)\n# Author: Omar Santos os@cisco.com\n\nFROM alpine:latest\n\n# ensure local python is preferred over distribution python\nENV PATH /usr/local/bin:$PATH\n\n# At the moment, setting \"LANG=C\" on a Linux system *fundamentally breaks Python 3.x;\n# that is a bug documented at: http://bugs.python.org/issue19846\n\nENV LANG C.UTF-8\n\n# install ca-certificates so that HTTPS works consistently\n# other runtime dependencies for Python are installed later\nRUN apk add --no-cache ca-certificates\n\nENV GPG_KEY 0D96DF4D4110E5C43FBFB17F2D347EA6AA65421D\nENV PYTHON_VERSION 3.7.0\n\nRUN set -ex \\\n  && apk add --no-cache --virtual .fetch-deps \\\n    gnupg \\\n    tar \\\n    xz \\\n  \\\n  && wget -O python.tar.xz \"https://www.python.org/ftp/python/${PYTHON_VERSION%%[a-z]*}/Python-$PYTHON_VERSION.tar.xz\" \\\n  && wget -O python.tar.xz.asc \"https://www.python.org/ftp/python/${PYTHON_VERSION%%[a-z]*}/Python-$PYTHON_VERSION.tar.xz.asc\" \\\n  && export GNUPGHOME=\"$(mktemp -d)\" \\\n  && gpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys \"$GPG_KEY\" \\\n  && gpg --batch --verify python.tar.xz.asc python.tar.xz \\\n  && { command -v gpgconf > /dev/null && gpgconf --kill all || :; } \\\n  && rm -rf \"$GNUPGHOME\" python.tar.xz.asc \\\n  && mkdir -p /usr/src/python \\\n  && tar -xJC /usr/src/python --strip-components=1 -f python.tar.xz \\\n  && rm python.tar.xz \\\n\n  && apk add --no-cache --virtual .build-deps  \\\n    bzip2-dev \\\n    coreutils \\\n    dpkg-dev dpkg \\\n    expat-dev \\\n    findutils \\\n    gcc \\\n    gdbm-dev \\\n    libc-dev \\\n    libffi-dev \\\n    libnsl-dev \\\n    libressl-dev \\\n    libtirpc-dev \\\n    linux-headers \\\n    make \\\n    ncurses-dev \\\n    pax-utils \\\n    readline-dev \\\n    sqlite-dev \\\n    tcl-dev \\\n    tk \\\n    tk-dev \\\n    util-linux-dev \\\n    xz-dev \\\n    zlib-dev \\\n    git \\\n    gnupg \\\n    openssh-client \\\n    openssh-keygen \\\n# add build deps before removing fetch deps in case there's overlap\n  && apk del .fetch-deps \\\n\n  && cd /usr/src/python \\\n  && gnuArch=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" \\\n  && ./configure \\\n    --build=\"$gnuArch\" \\\n    --enable-loadable-sqlite-extensions \\\n    --enable-shared \\\n    --with-system-expat \\\n    --with-system-ffi \\\n    --without-ensurepip \\\n  && make -j \"$(nproc)\" \\\n    EXTRA_CFLAGS=\"-DTHREAD_STACK_SIZE=0x100000\" \\\n  && make install \\\n\n  && find /usr/local -type f -executable -not \\( -name '*tkinter*' \\) -exec scanelf --needed --nobanner --format '%n#p' '{}' ';' \\\n    | tr ',' '\\n' \\\n    | sort -u \\\n    | awk 'system(\"[ -e /usr/local/lib/\" $1 \" ]\") == 0 { next } { print \"so:\" $1 }' \\\n    | xargs -rt apk add --no-cache --virtual .python-rundeps \\\n  && apk del .build-deps \\\n\n  && find /usr/local -depth \\\n    \\( \\\n      \\( -type d -a \\( -name test -o -name tests \\) \\) \\\n      -o \\\n      \\( -type f -a \\( -name '*.pyc' -o -name '*.pyo' \\) \\) \\\n    \\) -exec rm -rf '{}' + \\\n  && rm -rf /usr/src/python \\\n\n  && python3 --version\n\n# make some useful symlinks that are expected to exist\nRUN cd /usr/local/bin \\\n  && ln -s idle3 idle \\\n  && ln -s pydoc3 pydoc \\\n  && ln -s python3 python \\\n  && ln -s python3-config python-config\n\n# if this is called \"PIP_VERSION\", pip explodes with \"ValueError: invalid truth value '<VERSION>'\"\n\nENV PYTHON_PIP_VERSION 18.1\n\nRUN set -ex; \\\n  \\\n  wget -O get-pip.py 'https://bootstrap.pypa.io/get-pip.py'; \\\n  \\\n  python get-pip.py \\\n    --disable-pip-version-check \\\n    --no-cache-dir \\\n    \"pip==$PYTHON_PIP_VERSION\" \\\n  ; \\\n  pip --version; \\\n  \\\n  find /usr/local -depth \\\n    \\( \\\n      \\( -type d -a \\( -name test -o -name tests \\) \\) \\\n      -o \\\n      \\( -type f -a \\( -name '*.pyc' -o -name '*.pyo' \\) \\) \\\n    \\) -exec rm -rf '{}' +; \\\n  rm -f get-pip.py\n\n# Finally installing the openVulnQuery client.\nRUN set -ex; \\\n  python3 -m pip install openVulnQuery==1.30\nCMD [\"python3\"]\n"
}