{
  "startTime": 1674239668160,
  "endTime": 1674239668372,
  "originalSmells": [
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 71,
        "lineEnd": 74,
        "columnStart": 2,
        "columnEnd": 10
      }
    },
    {
      "rule": "apkAddUseNoCache",
      "position": {
        "lineStart": 107,
        "lineEnd": 119,
        "columnStart": 2,
        "columnEnd": 6
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# Based on https://gist.github.com/tylerchr/15a74b05944cfb90729db6a51265b6c9\n#\n# Building V8 for alpine is a real pain. We have to compile from source, because it has to be\n# linked against musl, and we also have to recompile some of the build tools as the official\n# build workflow tends to assume glibc by including vendored tools that link against it.\n#\n# The general strategy is this:\n#\n#   1. Build GN for alpine (this is a build dependency)\n#   2. Use depot_tools to fetch the V8 source and dependencies (needs glibc)\n#   3. Build V8 for alpine\n#   4. Make warez\n#\n\n#\n# STEP 1\n# Build GN for alpine\n#\nFROM alpine:latest as gn-builder\n\n# This is the GN commit that we want to build. Most commits will probably build just fine but\n# this happened to be the latest commit when I did this.\nARG GN_COMMIT=d7111cb6877187d1f378bd231e14ffdd5fdd87ae\n\nRUN \\\n  apk add --update --virtual .gn-build-dependencies \\\n    alpine-sdk \\\n    binutils-gold \\\n    clang \\\n    curl \\\n    git \\\n    llvm4 \\\n    ninja \\\n    python \\\n    tar \\\n    xz \\\n\n  # Two quick fixes: we need the LLVM tooling in $PATH, and we\n  # also have to use gold instead of ld.\n  && PATH=$PATH:/usr/lib/llvm4/bin \\\n  && cp -f /usr/bin/ld.gold /usr/bin/ld \\\n\n  # Clone and build gn\n  && git clone https://gn.googlesource.com/gn /tmp/gn \\\n  && git -C /tmp/gn checkout ${GN_COMMIT} \\\n  && cd /tmp/gn \\\n  && python build/gen.py --no-sysroot \\\n  && ninja -C out \\\n  && cp -f /tmp/gn/out/gn /usr/local/bin/gn \\\n\n  # Remove build dependencies and temporary files\n  && apk del .gn-build-dependencies \\\n  && rm -rf /tmp/* /var/tmp/* /var/cache/apk/*\n\n#\n# STEP 2\n# Use depot_tools to fetch the V8 source and dependencies\n#\n# The depot_tools scripts have a hard dependency on glibc (or at least a soft one that I didn't\n# bother figuring out). Fortunately we only need it to actually download the source and its dependencies\n# so we can do this in a place with glibc, and then pass the results on to an alpine builder.\n#\nFROM debian:9 as source\n\n# The V8 version we want to use. It's assumed that this will be a version tag, but it's just\n# used as \"git commit $V8_VERSION\" so anything that git can resolve will work.\nARG V8_VERSION=6.7.288.46\n\nRUN \\\n  set -x && \\\n  apt-get update && \\\n  apt-get install --no-install-recommends -y \\\n    git \\\n    curl \\\n    python && \\\n\n  # Clone depot_tools\n  git clone https://chromium.googlesource.com/chromium/tools/depot_tools.git /tmp/depot_tools && \\\n  PATH=$PATH:/tmp/depot_tools && \\\n\n  # fetch V8\n  cd /tmp && \\\n  fetch v8 && \\\n  cd /tmp/v8 && \\\n  git checkout ${V8_VERSION} && \\\n  gclient sync && \\\n\n  # cleanup\n  apt-get remove --purge -y \\\n    git \\\n    curl \\\n    python && \\\n  apt-get autoremove -y && \\\n  rm -rf /var/lib/apt/lists/*\n\n#\n# STEP 3\n# Build V8 for alpine\n#\nFROM alpine:latest as v8\n\nCOPY --from=source /tmp/v8 /tmp/v8\nCOPY --from=gn-builder /usr/local/bin/gn /tmp/v8/buildtools/linux64/gn\nCOPY BUILD.gn /tmp/v8/BUILD.gn\nCOPY build-config-BUILD.gn /tmp/v8/build/config/BUILD.gn\n\nRUN \\\n  apk add --no-cache --update --virtual .v8-build-dependencies \\\n    curl \\\n    g++ \\\n    gcc \\\n    glib-dev \\\n    icu-dev \\\n    libstdc++ \\\n    linux-headers \\\n    make \\\n    ninja \\\n    python \\\n    tar \\\n    xz \\\n\n  # Configure our V8 build\n  && cd /tmp/v8 && \\\n  ./tools/dev/v8gen.py x64.release -- \\\n    binutils_path=\\\"/usr/bin\\\" \\\n    target_os=\\\"linux\\\" \\\n    target_cpu=\\\"x64\\\" \\\n    v8_target_cpu=\\\"x64\\\" \\\n    v8_enable_future=true \\\n    is_official_build=true \\\n    is_component_build=false \\\n    is_cfi=false \\\n    is_clang=false \\\n    use_custom_libcxx=false \\\n    use_sysroot=false \\\n    use_gold=false \\\n    use_allocator_shim=false \\\n    treat_warnings_as_errors=false \\\n    symbol_level=0 \\\n    strip_debug_info=true \\\n    v8_use_external_startup_data=false \\\n    v8_enable_i18n_support=false \\\n    v8_enable_gdbjit=false \\\n    v8_static_library=true \\\n    v8_experimental_extra_library_files=[] \\\n    v8_extra_library_files=[] \\\n    v8_monolithic=true \\\n\n  # Build V8\n  && ninja -C out.gn/x64.release -j $(getconf _NPROCESSORS_ONLN) \\\n\n  # Brag\n  && find /tmp/v8/out.gn/x64.release -name '*.a' \\\n\n  # clean up\n  && apk del .v8-build-dependencies\n\n\n#\n# STEP 4\n# Build something that links against V8.\n#\n# This isn't really a step, but it uses the built V8 in a Go program that links against it to show\n# that it worked.\n#\nFROM ruby:2.5-alpine3.8\n\n# COPY --from=v8 /tmp/v8/include /tmp/v8/include\n# COPY --from=v8 /tmp/v8/out.gn/x64.release/obj /tmp/v8/lib\n\nENV LIBV8_VERSION 6.7.288.46.1\n\nRUN gem install libv8 -v $LIBV8_VERSION\n\nCOPY --from=v8 /tmp/v8/include /usr/local/bundle/gems/libv8-$LIBV8_VERSION-x86_64-linux/vendor/v8/include\nCOPY --from=v8 /tmp/v8/out.gn/x64.release/obj/libv8_monolith.a /usr/local/bundle/gems/libv8-$LIBV8_VERSION-x86_64-linux/vendor/v8/out.gn/libv8/obj/libv8_monolith.a\nCOPY --from=v8 /tmp/v8/out.gn/x64.release/obj/libv8_libplatform.a /usr/local/bundle/gems/libv8-$LIBV8_VERSION-x86_64-linux/vendor/v8/out.gn/libv8/obj/libv8_libplatform.a\nCOPY --from=v8 /tmp/v8/out.gn/x64.release/obj/libv8_libbase.a /usr/local/bundle/gems/libv8-$LIBV8_VERSION-x86_64-linux/vendor/v8/out.gn/libv8/obj/libv8_libbase.a\n\n# RUN apk add --update alpine-sdk && gem install mini_racer && apk del alpine-sdk && apk add libstdc++\n"
}