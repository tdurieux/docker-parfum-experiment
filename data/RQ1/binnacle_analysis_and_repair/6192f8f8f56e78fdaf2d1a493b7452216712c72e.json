{
  "startTime": 1674234557948,
  "endTime": 1674234558244,
  "originalSmells": [
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 43,
        "lineEnd": 43,
        "columnStart": 7,
        "columnEnd": 107
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 49,
        "lineEnd": 49,
        "columnStart": 7,
        "columnEnd": 125
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 2,
        "lineEnd": 6,
        "columnStart": 22,
        "columnEnd": 12
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 14,
        "lineEnd": 15,
        "columnStart": 22,
        "columnEnd": 9
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 35,
        "lineEnd": 36,
        "columnStart": 22,
        "columnEnd": 12
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# Build v8\nFROM golang:1.12.1 as v8builder\nRUN apt-get update && apt-get install --no-install-recommends -y \\\n    bzip2 \\\n    libglib2.0-dev \\\n    libxml2 \\\n    xz-utils \\\n  && rm -rf /var/lib/apt/lists/*\nRUN go get -d github.com/jkcfg/v8worker2\nRUN cd $GOPATH/src/github.com/jkcfg/v8worker2 \\\n    && ./build.py\n\n# Build flatbuffer compiler, flatc\nFROM golang:1.12.1 as flatc-builder\nRUN apt-get update && apt-get install --no-install-recommends -y \\\n    cmake \\\n  && rm -rf /var/lib/apt/lists/*\nENV FLATBUFFERS_VERSION 1.10.0\nRUN curl -fsSLO --compressed \"https://github.com/google/flatbuffers/archive/v${FLATBUFFERS_VERSION}.tar.gz\" \\\n    && tar -xf v${FLATBUFFERS_VERSION}.tar.gz \\\n    && rm v${FLATBUFFERS_VERSION}.tar.gz \\\n    && cd flatbuffers-${FLATBUFFERS_VERSION} \\\n    && cmake -G \"Unix Makefiles\" \\\n    && make \\\n    && cp flatc /usr/local/bin \\\n    && cd .. \\\n    && rm -rf flatbuffers-${FLATBUFFERS_VERSION}\n\n# Build github-release\nFROM golang:1.12.1 as github-release-builder\nRUN go get github.com/aktau/github-release \\\n  && cp `go env GOPATH`/bin/github-release /usr/local/bin \\\n  && rm -rf `go env GOPATH`/src/github.com/aktau/github-release\n\nFROM golang:1.12.1 as fetcher\nRUN apt-get update && apt-get install --no-install-recommends -y \\\n    xz-utils \\\n  && rm -rf /var/lib/apt/lists/*\n\n# Fetch node and npm\nENV NODE_VERSION 8.12.0\nENV ARCH x64\nRUN curl -fsSLO --compressed \"https://nodejs.org/dist/v$NODE_VERSION/node-v$NODE_VERSION-linux-$ARCH.tar.xz\" \\\n    && tar -xJf \"node-v$NODE_VERSION-linux-$ARCH.tar.xz\" -C /usr/local --strip-components=1 --no-same-owner && rm \"node-v$NODE_VERSION-linux-$ARCH.tar.xz\"\n\n# Fetch gometalinter\nENV GOMETALINTER_VERSION 2.0.11\nENV ARCH amd64\nRUN curl -fsSLO --compressed \"https://github.com/alecthomas/gometalinter/releases/download/v$GOMETALINTER_VERSION/gometalinter-$GOMETALINTER_VERSION-linux-$ARCH.tar.gz\" \\\n    && tar -xf \"gometalinter-$GOMETALINTER_VERSION-linux-$ARCH.tar.gz\" -C /usr/local/bin --strip-components=1 --no-same-owner && rm \"gometalinter-$GOMETALINTER_VERSION-linux-$ARCH.tar.gz\"\n\n# Fetch gosu\nENV GOSU_VERSION 1.11\nENV ARCH amd64\nRUN curl -fsSLo /usr/local/bin/gosu \"https://github.com/tianon/gosu/releases/download/$GOSU_VERSION/gosu-$ARCH\" \\\n    && chmod +x /usr/local/bin/gosu\n\n# Our final build image\nFROM golang:1.12.1\nCOPY --from=v8builder /go/src/github.com/jkcfg/v8worker2/v8.pc /usr/local/lib/pkgconfig/\nRUN sed -i \\\n     -e 's#Cflags: .*#Cflags: -I/usr/local/include/v8#' \\\n     -e 's#Libs: .*#Libs: /usr/local/lib/v8/libv8_monolith.a#' \\\n     /usr/local/lib/pkgconfig/v8.pc\nCOPY --from=v8builder /go/src/github.com/jkcfg/v8worker2/v8/include /usr/local/include/v8/\nCOPY --from=v8builder /go/src/github.com/jkcfg/v8worker2/out/v8build/obj/libv8_monolith.a /usr/local/lib/v8/\nCOPY --from=flatc-builder /usr/local/bin/ /usr/local/bin/\nCOPY --from=github-release-builder /usr/local/bin/ /usr/local/bin/\nCOPY --from=fetcher /usr/local/bin/ /usr/local/bin/\nCOPY --from=fetcher /usr/local/lib/node_modules/ /usr/local/lib/node_modules/\n\nENV SRC_PATH /go/src/github.com/jkcfg/jk\nWORKDIR $SRC_PATH\nCOPY entrypoint.sh /usr/local/bin\nENTRYPOINT [\"entrypoint.sh\"]\nCMD [\"/bin/bash\"]\n"
}