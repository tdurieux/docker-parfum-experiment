{
  "startTime": 1674235547882,
  "endTime": 1674235547981,
  "originalSmells": [
    {
      "rule": "mkdirUsrSrcThenRemove",
      "position": {
        "lineStart": 52,
        "lineEnd": 52,
        "columnStart": 4,
        "columnEnd": 25
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 50,
        "lineEnd": 51,
        "columnStart": 4,
        "columnEnd": 24
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# Dockerfile for square/keywhiz\n#\n# Note: keep this in the root of the project next to\n# the pom.xml to work correctly.\n#\n# Building:\n#   docker build --rm --force-rm -t square/keywhiz .\n#\n# Basic usage:\n#   docker run -e KEYWHIZ_CONFIG=/path/to/config square/keywhiz [COMMAND]\n#\n# If the KEYWHIZ_CONFIG environment variable is omitted, keywhiz\n# will run with the default development config. If COMMAND is\n# omitted, keywhiz will print a help message.\n#\n# *** Development ***\n#   Create a persistent data volume:\n#     docker volume create --name keywhiz-db-devel\n#\n#   Initialize the database, apply migrations, and add administrative user:\n#     docker run --rm -v keywhiz-db-devel:/data square/keywhiz migrate\n#     docker run --rm -it -v keywhiz-db-devel:/data square/keywhiz add-user\n#\n#   Finally, run the server with the default development config:\n#     docker run --rm -it -p 4444:4444 -v keywhiz-db-devel:/data square/keywhiz server\n#\n# *** Production setup wizard ***\n#   For production deployments, we have setup wizard that will initialize\n#   a Keywhiz container for you and create a config based on a template.\n#\n#   The wizard can be run using the \"wizard\" command, like so:\n#       docker run -it \\\n#           -v keywhiz-data:/data \\\n#           -v keywhiz-secrets:/secrets \\\n#           square/keywhiz wizard\n#\n#   Be ready to provide a server certificate/private key for setup.\n#\n# After keywhiz starts up, you can access it by running keywhiz-cli and\n# using the --url option to point it at the server you set up. The default user\n# in development is 'keywhizAdmin' and the default password is 'adminPass'.\n#\n# Note that for a production deployment, you'll probably want to setup\n# your own config to make sure you're not using development secrets.\n#\nFROM maven:3.5-jdk-11\n\nARG MAVEN_PROFILE=docker\n\nRUN apt-get update && \\\n    apt-get install -y --no-install-recommends --no-upgrade \\\n      gettext vim-common && \\\n    mkdir -p /usr/src/app && rm -rf /usr/src/app && rm -rf /var/lib/apt/lists/*;\nWORKDIR /usr/src/app\n\n# caching trick to speed up build; see:\n# https://keyholesoftware.com/2015/01/05/caching-for-maven-docker-builds\n# this should allow non-dynamic dependencies to be cached\nCOPY *.xml /usr/src/app/\nCOPY api/pom.xml /usr/src/app/api/\nCOPY cli/pom.xml /usr/src/app/cli/\nCOPY client/pom.xml /usr/src/app/client/\nCOPY hkdf/pom.xml /usr/src/app/hkdf/\nCOPY model/pom.xml /usr/src/app/model/\nCOPY server/pom.xml /usr/src/app/server/\nCOPY testing/pom.xml /usr/src/app/testing/\nCOPY log/pom.xml /usr/src/app/log/\nRUN mvn dependency:copy-dependencies -P $MAVEN_PROFILE --fail-never\n\n# copy source required for build and install\nCOPY api /usr/src/app/api/\nCOPY cli /usr/src/app/cli/\nCOPY client /usr/src/app/client/\nCOPY hkdf /usr/src/app/hkdf/\nCOPY model /usr/src/app/model/\nCOPY server /usr/src/app/server/\nCOPY testing /usr/src/app/testing/\nCOPY log /usr/src/app/log/\nRUN mvn install -P $MAVEN_PROFILE\n\n# Drop privs inside container\nRUN useradd -ms /bin/false keywhiz && \\\n    mkdir /data && \\\n    chown keywhiz:keywhiz /data && \\\n    mkdir /secrets && \\\n    chown keywhiz:keywhiz /secrets\n\nUSER keywhiz\n\n# Expose API port by default. Note that the admin console port\n# is NOT exposed by default, can be exposed manually if desired.\nEXPOSE 4444\n\nVOLUME [\"/data\", \"/secrets\"]\n\nCOPY docker/entry.sh /usr/src/app\nCOPY docker/wizard.sh /usr/src/app\nCOPY docker/keywhiz-config.tpl /usr/src/app\n\nENTRYPOINT [\"/usr/src/app/entry.sh\"]\n"
}