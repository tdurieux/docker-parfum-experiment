{
  "startTime": 1674234294556,
  "endTime": 1674234294857,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 16,
        "lineEnd": 16,
        "columnStart": 4,
        "columnEnd": 152
      }
    },
    {
      "rule": "curlUseHttpsUrl",
      "position": {
        "lineStart": 16,
        "lineEnd": 16,
        "columnStart": 4,
        "columnEnd": 152
      }
    },
    {
      "rule": "wgetUseHttpsUrl",
      "position": {
        "lineStart": 30,
        "lineEnd": 30,
        "columnStart": 6,
        "columnEnd": 94
      }
    },
    {
      "rule": "wgetUseHttpsUrl",
      "position": {
        "lineStart": 40,
        "lineEnd": 40,
        "columnStart": 7,
        "columnEnd": 79
      }
    },
    {
      "rule": "wgetUseHttpsUrl",
      "position": {
        "lineStart": 50,
        "lineEnd": 50,
        "columnStart": 7,
        "columnEnd": 79
      }
    },
    {
      "rule": "wgetUseHttpsUrl",
      "position": {
        "lineStart": 60,
        "lineEnd": 60,
        "columnStart": 7,
        "columnEnd": 76
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 43,
        "lineEnd": 43,
        "columnStart": 7,
        "columnEnd": 18
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 53,
        "lineEnd": 53,
        "columnStart": 7,
        "columnEnd": 18
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 63,
        "lineEnd": 63,
        "columnStart": 7,
        "columnEnd": 18
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 77,
        "lineEnd": 77,
        "columnStart": 9,
        "columnEnd": 20
      }
    },
    {
      "rule": "yumInstallRmVarCacheYum",
      "position": {
        "lineStart": 6,
        "lineEnd": 6,
        "columnStart": 6,
        "columnEnd": 29
      }
    },
    {
      "rule": "yumInstallRmVarCacheYum",
      "position": {
        "lineStart": 7,
        "lineEnd": 7,
        "columnStart": 6,
        "columnEnd": 36
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# Build from top directory with:\n#   docker build -t test/cld:centos6-oraclejdk -f tests/Dockerfile.centos6.oraclejdk .\nFROM  centos:6\n\n# TODO: Combine all yum once I'm no longer testing\nRUN yum install -y wget gcc && rm -rf /var/cache/yum\nRUN yum install -y gcc++ *gcc-c++* && rm -rf /var/cache/yum\n\nENV    M2_HOME /usr/local/apache-maven/apache-maven-3.2.1\nENV    M2      $M2_HOME/bin\nENV    PATH    $M2:$PATH\n\n# Install Oracle JDK 8u31\nRUN cd /tmp && \\\n    mkdir /srv/java && \\\n    curl -f -L -O -H \"Cookie: oraclelicense=accept-securebackup-cookie\" -k \"https://download.oracle.com/otn-pub/java/jdk/8u31-b13/jdk-8u31-linux-x64.tar.gz\" && \\\n    tar xf jdk-8u31-linux-x64.tar.gz -C /srv/java && \\\n    rm -f jdk-8u31-linux-x64.tar.gz && \\\n    ln -s /srv/java/jdk* /srv/java/jdk && \\\n    ln -s /srv/java/jdk /srv/java/jvm\n\n# Define commonly used JAVA_HOME variable\n# Add /srv/java and jdk on PATH variable\nENV JAVA_HOME=/srv/java/jdk \\\n    PATH=${PATH}:/srv/java/jdk/bin:/srv/java\n\n# Install Maven2\nRUN mkdir /usr/local/apache-maven && \\\n      cd /usr/local/apache-maven && \\\n      wget https://mirror.olnevhost.net/pub/apache/maven/binaries/apache-maven-3.2.1-bin.tar.gz && \\\n      tar xvf apache-maven-3.2.1-bin.tar.gz && \\\n      rm apache-maven-3.2.1-bin.tar.gz\n\n\n# TODO: Combine all yum once I'm no longer testing\nRUN   yum groupinstall -y 'Development Tools'\n\nENV    AUTOCONF_VERSION 2.69\nRUN cd /tmp && \\\n       wget https://ftp.gnu.org/gnu/autoconf/autoconf-${AUTOCONF_VERSION}.tar.gz && \\\n       tar xvzf autoconf-${AUTOCONF_VERSION}.tar.gz && \\\n       cd autoconf-${AUTOCONF_VERSION} && \\\n       ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" && \\\n       make && \\\n       make install && \\\n       rm -rf autoconf-${AUTOCONF_VERSION}.tar.gz autoconf-${AUTOCONF_VERSION}\n\nENV    AUTOMAKE_VERSION 1.15\nRUN cd /tmp && \\\n       wget https://ftp.gnu.org/gnu/automake/automake-${AUTOMAKE_VERSION}.tar.gz && \\\n       tar xvzf automake-${AUTOMAKE_VERSION}.tar.gz && \\\n       cd automake-${AUTOMAKE_VERSION} && \\\n       ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" && \\\n       make && \\\n       make install && \\\n       rm -rf automake-${AUTOMAKE_VERSION}.tar.gz automake-${AUTOMAKE_VERSION}\n\nENV    LIBTOOL_VERSION 2.4\nRUN cd /tmp && \\\n       wget https://ftp.gnu.org/gnu/libtool/libtool-${LIBTOOL_VERSION}.tar.gz && \\\n       tar xvzf libtool-${LIBTOOL_VERSION}.tar.gz && \\\n       cd libtool-${LIBTOOL_VERSION} && \\\n       ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" && \\\n       make && \\\n       make install && \\\n       rm -rf libtool-${LIBTOOL_VERSION}.tar.gz libtool-${LIBTOOL_VERSION}\n\nCOPY     . /opt/cld\nWORKDIR  /opt/cld\n\n# C++ compile, test and install\nRUN cd /opt/cld && \\\n         aclocal && \\\n         libtoolize --force && \\\n         automake --add-missing && \\\n         autoreconf && \\\n         ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" && \\\n         make clean && \\\n         make && \\\n         make check && \\\n         make install\n\nRUN      echo \"/usr/local/lib/cld\" >> /etc/ld.so.conf.d/cld.conf && \\\n         ldconfig\n\n# Java build and test\nRUN      cd /opt/cld/ports/java && \\\n         mvn test\n"
}