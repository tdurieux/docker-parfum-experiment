{
  "startTime": 1674234073335,
  "endTime": 1674234073783,
  "originalSmells": [
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 30,
        "lineEnd": 30,
        "columnStart": 4,
        "columnEnd": 45
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 43,
        "lineEnd": 43,
        "columnStart": 4,
        "columnEnd": 45
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 51,
        "lineEnd": 51,
        "columnStart": 4,
        "columnEnd": 45
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 62,
        "lineEnd": 62,
        "columnStart": 4,
        "columnEnd": 16
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 123,
        "lineEnd": 123,
        "columnStart": 4,
        "columnEnd": 32
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# Copyright 2017 the original author or authors.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\nFROM centos:7\n\nMAINTAINER Voltha Community <info@opennetworking.org>\n\n# install required packages\nRUN [\"yum\", \"install\", \"-y\", \"epel-release\"]\nRUN [\"yum\", \"install\", \"-y\", \"git\", \"make\", \"libtool\", \"libxml2-devel\", \"file\", \"libxslt-devel\", \"libssh-devel\", \"libcurl-devel\", \"python-pip\", \"libxml2-python\", \"openssh-server\", \"augeas-devel\", \"readline\", \"readline-devel\", \"openssl\", \"openssl-perl\", \"openssl-devel\", \"m2crypto\", \"which\", \"unzip\", \"gcc-c++\", \"gflags-devel\", \"gtest-devel\", \"clang\", \"c++-devel\", \"wget\"]\nRUN [\"ssh-keygen\", \"-A\"]\nRUN [\"pip\", \"install\", \"pyang\"]\nRUN [\"yum\", \"clean\", \"packages\"]\nRUN [\"yum\", \"clean\", \"headers\"]\n\n# clone, build and install libnetconf\nRUN set -e -x; \\\n    git clone https://github.com/CESNET/libnetconf.git /usr/src/libnetconf; \\\n    cd /usr/src/libnetconf; \\\n    ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --enable-tls --prefix='/usr'; \\\n    make; \\\n    make install; \\\n    ln -s /usr/lib/pkgconfig/libnetconf.pc /usr/lib64/pkgconfig/; \\\n    make clean;\n\n# clone netopeer\nRUN set -e -x; \\\n    git clone https://github.com/CESNET/netopeer.git /usr/src/netopeer;\n\n# build and install netopeer-cli\nRUN set -e -x; \\\n    cd /usr/src/netopeer/cli; \\\n    ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --enable-tls --prefix='/usr'; \\\n    make; \\\n    make install; \\\n    make clean;\n\n# build and install netopeer-server\nRUN set -e -x; \\\n    cd /usr/src/netopeer/server; \\\n    ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --enable-tls --prefix='/usr'; \\\n    make; \\\n    make install; \\\n    cp -v config/datastore.xml /usr/etc/netopeer/cfgnetopeer/datastore.xml; \\\n    make clean;\n\n# clone, build and install protobuf\nRUN set -e -x; \\\n    git clone -b v3.2.1 https://github.com/google/protobuf.git /usr/src/protobuf; \\\n    cd /usr/src/protobuf; \\\n    ./autogen.sh; \\\n    ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\"; \\\n    make; \\\n    make install; \\\n    ldconfig; \\\n    make clean;\n\n# Install golang\nRUN set -e -x; \\\n    cd /tmp; \\\n    wget https://storage.googleapis.com/golang/go1.8.1.linux-amd64.tar.gz; \\\n    tar -C /usr/local -xzf /tmp/go1.8.1.linux-amd64.tar.gz; \\\n    rm -f /tmp/go1.8.1.linux-amd64.tar.gz\n\n# Setup necessary environment variables\nENV GOROOT /usr/local/go\nENV PATH $PATH:$GOROOT/bin\n\nRUN [\"mkdir\", \"/usr/local/share/go\"]\nENV GOPATH /usr/local/share/go\nENV PATH $PATH:$GOPATH/bin\n\n# Install golang protobuf/grpc libraries\nRUN set -e -x; \\\n    go get -u github.com/golang/protobuf/{proto,protoc-gen-go}; \\\n    go get -u google.golang.org/grpc; \\\n    go get -u github.com/hashicorp/consul/api;\n\n# Build and Install the golang Voltha GRPC client layer\nCOPY netopeer/voltha-grpc-client /usr/src/voltha-grpc-client\nRUN set -e -x; \\\n    mkdir -p /usr/local/share/go/src/github.com/opencord/voltha/netconf; \\\n    ln -s /usr/src/voltha-grpc-client /usr/local/share/go/src/github.com/opencord/voltha/netconf/translator; \\\n    cd /usr/src/voltha-grpc-client; \\\n    go build -buildmode=c-shared -o voltha.so voltha.go; \\\n    mv voltha.so /usr/lib64; \\\n    mv voltha.h /usr/include; \\\n    cp voltha-defs.h /usr/include; \\\n    rm -f /usr/lib64/libvoltha.so; \\\n    ln -s /usr/lib64/voltha.so /usr/lib64/libvoltha.so;\n\n# ------------------------------------------------\n# Sample transapi implementation\n#\n# To demonstrate the integration with the netopeer netconf server\n#\n\n# Build and Install the golang Voltha model conversion package\nCOPY netopeer/voltha-netconf-model /usr/src/voltha-netconf-model\nRUN set -e -x; \\\n    cd /usr/src/voltha-netconf-model; \\\n    go build -buildmode=c-shared -o voltha-netconf-model.so netconf-model.go; \\\n    mv voltha-netconf-model.so /usr/lib64; \\\n    mv voltha-netconf-model.h /usr/include; \\\n    rm -f /usr/lib64/libvoltha-netconf-model.so; \\\n    ln -s /usr/lib64/voltha-netconf-model.so /usr/lib64/libvoltha-netconf-model.so;\n\n# Build and install the Voltha netconf transapi library\nCOPY netopeer/voltha-transapi /usr/src/netopeer/voltha-transapi\nRUN set -e -x; \\\n    cd /usr/src/netopeer/voltha-transapi; \\\n    autoreconf --install; \\\n    ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --prefix='/usr'; \\\n    make; \\\n    make install;\n\n# Finally start the netopeer-server with debugging logs enabled\nCMD [\"/usr/bin/netopeer-server\", \"-v\", \"3\"]\n\n# Expose the default netconf port\nEXPOSE 830\n"
}