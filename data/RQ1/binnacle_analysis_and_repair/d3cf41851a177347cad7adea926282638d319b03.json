{
  "startTime": 1674246762429,
  "endTime": 1674246762865,
  "originalSmells": [
    {
      "rule": "wgetUseHttpsUrl",
      "position": {
        "lineStart": 79,
        "lineEnd": 79,
        "columnStart": 16,
        "columnEnd": 119
      }
    },
    {
      "rule": "wgetUseHttpsUrl",
      "position": {
        "lineStart": 80,
        "lineEnd": 80,
        "columnStart": 4,
        "columnEnd": 115
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 11,
        "lineEnd": 11,
        "columnStart": 18,
        "columnEnd": 64
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 19,
        "lineEnd": 52,
        "columnStart": 52,
        "columnEnd": 6
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 58,
        "lineEnd": 61,
        "columnStart": 4,
        "columnEnd": 35
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 11,
        "lineEnd": 11,
        "columnStart": 18,
        "columnEnd": 64
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# This Dockerfile provides a starting point for a ROCm installation of\n# MIOpen and tensorflow.\nFROM ubuntu:xenial\nMAINTAINER Jeff Poznanovic <jeffrey.poznanovic@amd.com>\n\nARG DEB_ROCM_REPO=http://repo.radeon.com/rocm/apt/debian/\nARG ROCM_PATH=/opt/rocm\n\nENV DEBIAN_FRONTEND noninteractive\nENV TF_NEED_ROCM 1\nENV HOME /root/\nRUN apt update && apt install --no-install-recommends -y wget software-properties-common && rm -rf /var/lib/apt/lists/*;\n\n# Add rocm repository\nRUN apt-get clean all\nRUN wget -qO - $DEB_ROCM_REPO/rocm.gpg.key | apt-key add -\nRUN sh -c  \"echo deb [arch=amd64] $DEB_ROCM_REPO xenial main > /etc/apt/sources.list.d/rocm.list\"\n\n# Install misc pkgs\nRUN apt-get update --allow-insecure-repositories && DEBIAN_FRONTEND=noninteractive apt-get --no-install-recommends install -y \\\n  build-essential \\\n  clang-3.8 \\\n  clang-format-3.8 \\\n  clang-tidy-3.8 \\\n  cmake \\\n  cmake-qt-gui \\\n  ssh \\\n  curl \\\n  apt-utils \\\n  pkg-config \\\n  g++-multilib \\\n  git \\\n  libunwind-dev \\\n  libfftw3-dev \\\n  libelf-dev \\\n  libncurses5-dev \\\n  libpthread-stubs0-dev \\\n  vim \\\n  gfortran \\\n  libboost-program-options-dev \\\n  libssl-dev \\\n  libboost-dev \\\n  libboost-system-dev \\\n  libboost-filesystem-dev \\\n  rpm \\\n  libnuma-dev \\\n  pciutils \\\n  virtualenv \\\n  python-pip \\\n  python3-pip \\\n  libxml2 \\\n  libxml2-dev \\\n  wget && \\\n  apt-get clean && \\\n  rm -rf /var/lib/apt/lists/*\n\n# Install rocm pkgs\nRUN apt-get update --allow-insecure-repositories && \\\n    DEBIAN_FRONTEND=noninteractive apt-get --no-install-recommends install -y --allow-unauthenticated \\\n    rocm-dev rocm-libs rocm-utils rocm-cmake \\\n    rocfft miopen-hip miopengemm rocblas hipblas rocrand \\\n    rocm-profiler cxlactivitylogger && \\\n    apt-get clean && \\\n    rm -rf /var/lib/apt/lists/*\n\n# Build HCC from source, cleanup the default HCC to avoid issue\n#RUN rm -rf /opt/rocm/hcc-1.0 && rm -rf /opt/rocm/lib/*.bc\n#RUN cd $HOME && git clone --recursive -b <> https://github.com/RadeonOpenCompute/hcc.git\n#RUN cd $HOME && mkdir -p build.hcc && cd build.hcc && cmake -DCMAKE_BUILD_TYPE=Release ../hcc\n#RUN cd $HOME/build.hcc && make -j $(nproc) && make package && dpkg -i hcc*.deb\n#RUN ln -s /opt/rocm/hcc-1.0 /opt/rocm/hcc\n\n# Build HIP from source\n# The switch to rocm2.5 introduces failures on the rocm-xla CI path,\n# Need the workaround for issue SWDEV-173477 to fix some of those failures\nRUN cd $HOME && git clone -b roc-2.5.x-with-swdev-173477-workaround https://github.com/deven-amd/HIP.git\nRUN cd $HOME/HIP && mkdir -p build && cd build && cmake .. && make package -j $(nproc) && dpkg -i ./hip*.deb\n\n# Roll back OpenCL toolset to ROCm2.2 base\nRUN cd $HOME && wget https://repo.radeon.com/rocm/apt/2.2/pool/main/r/rocm-opencl/rocm-opencl_1.2.0-2019030702_amd64.deb && \\\n    wget https://repo.radeon.com/rocm/apt/2.2/pool/main/r/rocm-opencl-dev/rocm-opencl-dev_1.2.0-2019030702_amd64.deb && \\\n    dpkg -i rocm-opencl*.deb && rm -rf rocm-rocm*.deb\n\n# Set up paths\nENV HCC_HOME=$ROCM_PATH/hcc\nENV HIP_PATH=$ROCM_PATH/hip\nENV OPENCL_ROOT=$ROCM_PATH/opencl\nENV PATH=\"$HCC_HOME/bin:$HIP_PATH/bin:${PATH}\"\nENV PATH=\"$ROCM_PATH/bin:${PATH}\"\nENV PATH=\"$OPENCL_ROOT/bin:${PATH}\"\n\n# Add target file to help determine which device(s) to build for\nRUN bash -c 'echo -e \"gfx803\\ngfx900\\ngfx906\" >> /opt/rocm/bin/target.lst'\n\n# Build rocBLAS from source\n#RUN cd $HOME && git clone -b <> https://github.com/ROCmSoftwarePlatform/rocBLAS.git && cd rocBLAS && ./install.sh -id\n#RUN cd $HOME && git clone -b <>https://github.com/ROCmSoftwarePlatform/hipBLAS.git && cd hipBLAS && ./install.sh -id\n\n# Build rocFFT from source\n#RUN cd $HOME && git clone -b <> https://github.com/ROCmSoftwarePlatform/rocFFT.git && cd rocFFT && ./install.sh -id\n\n# Build rocRAND from source\n#RUN cd $HOME && git clone -b <> https://github.com/ROCmSoftwarePlatform/rocRAND.git && mkdir rocRAND/build && cd rocRAND/build && CXX=hcc cmake .. && make package -j $(nproc) && dpkg -i ./rocrand*.deb\n\n# Build MIOpen from source\n#RUN cd $HOME && git clone -b <> https://github.com/RadeonOpenCompute/rocm-cmake.git && cd $HOME/rocm-cmake && mkdir -p build && cd build && cmake .. && make package -j$(nproc) && dpkg -i ./rocm-cmake*.deb\n#RUN cd $HOME && git clone -b <> https://github.com/RadeonOpenCompute/clang-ocl.git && cd $HOME/clang-ocl && mkdir -p build && cd build && cmake .. && make package -j$(nproc) && dpkg -i ./rocm-clang-ocl*.deb\n#RUN cd $HOME && git clone -b <> https://github.com/ROCmSoftwarePlatform/MIOpenGEMM.git && cd $HOME/MIOpenGEMM && mkdir -p build && cd build && cmake .. && make package -j$(nproc) && dpkg -i ./miopengemm*.deb\n#RUN cd $HOME && git clone -b <> https://github.com/ROCmSoftwarePlatform/MIOpen.git\n#RUN cd $HOME/MIOpen && cmake -P install_deps.cmake && \\\n#    mkdir -p build && cd build && \\\n#    CXX=/opt/rocm/hcc/bin/hcc cmake -DMIOPEN_BACKEND=HIP -DCMAKE_PREFIX_PATH=\"/opt/rocm/hcc;/opt/rocm/hip\" -D#CMAKE_CXX_FLAGS=\"-isystem /usr/include/x86_64-linux-gnu/\" .. -DMIOPEN_MAKE_BOOST_PUBLIC=ON && \\\n#    make -j $(nproc) && make package && dpkg -i ./MIOpen*.deb\n\n# Copy and run the install scripts.\nCOPY install/*.sh /install/\nARG DEBIAN_FRONTEND=noninteractive\nRUN /install/install_bootstrap_deb_packages.sh\nRUN add-apt-repository -y ppa:openjdk-r/ppa && \\\n    add-apt-repository -y ppa:george-edison55/cmake-3.x\nRUN /install/install_deb_packages.sh\nRUN /install/install_pip_packages.sh\nRUN /install/install_bazel.sh\nRUN /install/install_golang.sh\n\n# Set up the master bazelrc configuration file.\nCOPY install/.bazelrc /etc/bazel.bazelrc\n\n# Configure the build for our ROCm configuration.\nENV TF_NEED_ROCM 1\n\n# This is a temporary workaround to fix Out-Of-Memory errors we are running into with XLA perf tests\n# By default, HIP runtime \"hides\" 256MB from the TF Runtime, but with recent changes (update to ROCm2.3, dynamic loading of roc* libs, et al)\n# it seems that we need to up the threshold slightly to 320MB\nENV HIP_HIDDEN_FREE_MEM=320\n"
}