{
  "startTime": 1674234973827,
  "endTime": 1674234974160,
  "originalSmells": [
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 86,
        "lineEnd": 86,
        "columnStart": 4,
        "columnEnd": 33
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 94,
        "lineEnd": 94,
        "columnStart": 4,
        "columnEnd": 57
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 101,
        "lineEnd": 101,
        "columnStart": 57,
        "columnEnd": 73
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 18,
        "lineEnd": 24,
        "columnStart": 22,
        "columnEnd": 17
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 30,
        "lineEnd": 49,
        "columnStart": 22,
        "columnEnd": 10
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 55,
        "lineEnd": 55,
        "columnStart": 22,
        "columnEnd": 67
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 89,
        "lineEnd": 89,
        "columnStart": 22,
        "columnEnd": 66
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 104,
        "lineEnd": 106,
        "columnStart": 22,
        "columnEnd": 15
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 55,
        "lineEnd": 55,
        "columnStart": 22,
        "columnEnd": 67
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 89,
        "lineEnd": 89,
        "columnStart": 22,
        "columnEnd": 66
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM nvidia/cuda:10.0-cudnn7-devel-ubuntu16.04\n\nMAINTAINER masuda@leapmind.io\n\n# TensorBoard\nEXPOSE 6006\n\nENV LD_LIBRARY_PATH /usr/local/cuda/extras/CUPTI/lib64:${LD_LIBRARY_PATH}\n\nRUN echo \"deb http://ftp.jaist.ac.jp/ubuntu/ xenial main restricted universe multiverse \\n\\\ndeb-src http://ftp.jaist.ac.jp/ubuntu/ xenial main restricted universe multiverse \\n\\\ndeb http://ftp.jaist.ac.jp/ubuntu/ xenial-updates main restricted universe multiverse \\n\\\ndeb-src http://ftp.jaist.ac.jp/ubuntu/ xenial-updates main restricted universe multiverse \\n\\\ndeb http://ftp.jaist.ac.jp/ubuntu/ xenial-backports main restricted universe multiverse \\n\\\ndeb-src http://ftp.jaist.ac.jp/ubuntu/ xenial-backports main restricted universe multiverse \\n\\\ndeb http://security.ubuntu.com/ubuntu xenial-security main restricted universe multiverse \\n\\\ndeb-src http://security.ubuntu.com/ubuntu xenial-security main restricted universe multiverse\" > /etc/apt/sources.list\n\nRUN apt-get update && apt-get install --no-install-recommends -y \\\n    cmake \\\n    locales \\\n    python3 \\\n    python3-dev \\\n    python3-pip \\\n    python3-wheel \\\n    && \\\n    apt-get clean && \\\n    rm -rf /var/lib/apt/lists/*\n\n# Install dependencies for Pillow, Scipy and matplotlib for display, and requirements for pyenv and pyenv virtualenv installation\nRUN apt-get update && apt-get install --no-install-recommends -y \\\n    python3-pil \\\n    libjpeg8-dev \\\n    zlib1g-dev \\\n    python3-matplotlib \\\n    liblapack-dev \\\n    git \\\n    make \\\n    build-essential \\\n    libssl-dev \\\n    libbz2-dev \\\n    libreadline-dev \\\n    libsqlite3-dev \\\n    wget \\\n    curl \\\n    llvm \\\n    libncurses5-dev \\\n    libncursesw5-dev \\\n    xz-utils \\\n    tk-dev \\\n    && \\\n    apt-get clean && \\\n    rm -rf /var/lib/apt/lists/*\n\n# install aarch64 cross compile environment\nRUN apt-get update && apt-get install --no-install-recommends -y crossbuild-essential-arm64 && rm -rf /var/lib/apt/lists/*;\n\n# Locale setting\nRUN locale-gen en_US.UTF-8\nENV LANG en_US.UTF-8\nENV LANGUAGE en_US:en\nENV LC_ALL en_US.UTF-8\n\nENV PYENV_ROOT /usr/local/pyenv\n\n# Install pyenv to deal with different python versions\nRUN git clone https://github.com/yyuu/pyenv.git $PYENV_ROOT\n\n# Install pyenv virtualenv\n# This is to avoid InvocationError which occurs at running tox test by changing python version with pyenv global/local command\n# See also https://github.com/pyenv/pyenv-virtualenv/issues/202\nRUN git clone https://github.com/yyuu/pyenv-virtualenv.git $PYENV_ROOT/plugins/pyenv-virtualenv\n\n# Pyenv and pyenv virtualenv environment settings\nENV PATH $PYENV_ROOT/shims:$PYENV_ROOT/bin:$PATH\nRUN eval \"$(pyenv init -)\" && \\\n    eval \"$(pyenv virtualenv-init -)\"\n\n# Python version settings\nARG python_version=\"3.6.3\"\n\n# Setup python virtualenv\nRUN pyenv install ${python_version} && \\\n    pyenv virtualenv -p python${python_version%.*} ${python_version} python${python_version%.*} && \\\n    pyenv global python${python_version%.*}\n\nRUN pip install --no-cache-dir -U pip setuptools\n\n# Install x-compiler\nRUN apt-get update && apt-get install --no-install-recommends -y g++-5-arm-linux-gnueabihf && \\\n    ln -s /usr/bin/arm-linux-gnueabihf-g++-5 /usr/bin/arm-linux-gnueabihf-g++ && rm -rf /var/lib/apt/lists/*;\n\n# Install requirements\nCOPY lmnet/*requirements.txt /tmp/requirements/\nRUN pip install --no-cache-dir -r /tmp/requirements/gpu.requirements.txt && rm -rf /tmp/requirements\n# In order to install blueoil requirements `prompt_toolkit==1.0.15`, uninstall prompt-toolkit v2.0 that depends on `pdb==0.10.2`.\nRUN pip uninstall -y prompt-toolkit\n\n# Build coco. It needs numpy.\nCOPY lmnet/third_party /home/blueoil/lmnet/third_party\n# https://github.com/cocodataset/cocoapi/blob/440d145a30b410a2a6032827c568cff5dc1d2abf/PythonAPI/setup.py#L2\nRUN cd /home/blueoil/lmnet/third_party/coco/PythonAPI && pip install --no-cache-dir -e .\n\n# For development\nRUN apt-get update && apt-get install --no-install-recommends -y \\\n    x11-apps \\\n    imagemagick \\\n    && \\\n    apt-get clean && \\\n    rm -rf /var/lib/apt/lists/*\n\n# Copy blueoil sources to docker image\nCOPY blueoil /home/blueoil/blueoil\nCOPY setup.* /home/blueoil/\nCOPY output_template /home/blueoil/output_template\n# Install blueoil\nWORKDIR /home/blueoil\nRUN python setup.py install\nRUN chmod 777 /home/blueoil\n\n# Copy dlk sources to docker image\nCOPY dlk /home/blueoil/dlk\n# Install dlk\nWORKDIR /home/blueoil/dlk\nRUN PYTHONPATH=python/dlk python setup.py install\nRUN chmod 777 /home/blueoil/dlk\n\n# Copy lmnet sources to docker image\nCOPY lmnet /home/blueoil/lmnet\n\nENV PYTHONPATH $PYTHONPATH:/home/blueoil:/home/blueoil/lmnet:/home/blueoil/dlk/python/dlk\nWORKDIR /home/blueoil\n"
}