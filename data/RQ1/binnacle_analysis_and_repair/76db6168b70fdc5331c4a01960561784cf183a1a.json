{
  "startTime": 1674244564831,
  "endTime": 1674244565132,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 83,
        "lineEnd": 83,
        "columnStart": 4,
        "columnEnd": 81
      }
    },
    {
      "rule": "wgetUseHttpsUrl",
      "position": {
        "lineStart": 17,
        "lineEnd": 17,
        "columnStart": 5,
        "columnEnd": 60
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 88,
        "lineEnd": 88,
        "columnStart": 4,
        "columnEnd": 27
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 64,
        "lineEnd": 64,
        "columnStart": 28,
        "columnEnd": 46
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 16,
        "lineEnd": 16,
        "columnStart": 22,
        "columnEnd": 45
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 19,
        "lineEnd": 22,
        "columnStart": 5,
        "columnEnd": 54
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 16,
        "lineEnd": 16,
        "columnStart": 22,
        "columnEnd": 45
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 19,
        "lineEnd": 22,
        "columnStart": 5,
        "columnEnd": 54
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# To build this image, you'll need to download FreeSurfer, MNE\n# and have a valid FreeSurfer license file, and put them into your scripts directory.\n# To build:  cd path_to_scripts; docker build -t docker_scripts .\n# To run: docker run -it -v <path_to_your_subject_folder_on_host>:/opt/processing docker_scripts /bin/bash\n# Then run scripts as usual: bash main_surface -c /opt/processing/<name_of_configuration_file.sh>\n# delete container and image: docker ps -a; docker rm <container_id>; docker rmi <image>\n# also you can use: docker images\n\nFROM ubuntu:16.04\nMAINTAINER timpx <timpx@eml.cc>\n\n# /opt used during installation, but\n# /opt/scripts is final workdir, set below\nWORKDIR /opt\n\n# system packages\nRUN apt-get update && apt-get install --no-install-recommends -y wget \\\n  && wget -O- https://neuro.debian.net/lists/xenial.de-m.full | tee /etc/apt/sources.list.d/neurodebian.sources.list \\\n  && apt-get update \\\n  && apt-get install --no-install-recommends -y --allow-unauthenticated g++ libeigen3-dev git python \\\n      python-numpy zlib1g-dev fsl-complete gcc make cmake libopenblas-dev liblapacke-dev \\\n      libhdf5-dev libhdf5-serial-dev libmatio-dev python-dev swig libvtk6-dev doxygen \\\n      libcgal-dev libgsl-dev gsl-bin libgsl2 unzip zip && rm -rf /var/lib/apt/lists/*;\n\n# external packages\nADD freesurfer*.tar.gz /opt/\nADD license.txt /opt/freesurfer/license.txt\nADD MNE*.tar.gz /opt/\n\n# FS, FSL, MNE env vars\nENV FIX_VERTEX_AREA= \\\n    FREESURFER_HOME=/opt/freesurfer \\\n    FSFAST_HOME=/opt/freesurfer/fsfast \\\n    FSF_OUTPUT_FORMAT=nii.gz \\\n    FS_OVERRIDE=0 \\\n    LOCAL_DIR=/opt/freesurfer/local \\\n    MINC_BIN_DIR=/opt/freesurfer/mni/bin \\\n    MINC_LIB_DIR=/opt/freesurfer/mni/lib \\\n    SUBJECTS_DIR=/opt/freesurfer/subjects \\\n    MNI_DATAPATH=/opt/freesurfer/mni/data \\\n    MNI_DIR=/opt/freesurfer/mni \\\n    MNI_PERL5LIB=/opt/freesurfer/mni/share/perl5 \\\n    OS=Linux \\\n    PERL5LIB=/opt/freesurfer/mni/share/perl5 \\\n    MNE_ROOT=/opt/MNE-2.7.0-3106-Linux-x86_64 \\\n    MNE_BIN_PATH=/opt/MNE-2.7.0-3106-Linux-x86_64/bin \\\n    MNE_LIB_PATH=/opt/MNE-2.7.0-3106-Linux-x86_64/lib \\\n    MNE_ROOT=/opt/MNE-2.7.0-3106-Linux-x86_64 \\\n    XUSERFILESEARCHPATH=/opt/MNE-2.7.0-3106-Linux-x86_64/share/app-defaults/%N \\\n    LD_LIBRARY_PATH=/usr/lib/fsl/5.0:/opt/MNE-2.7.0-3106-Linux-x86_64/lib \\\n    PATH=/usr/lib/fsl/5.0:/usr/share/fsl/5.0/bin:/opt/MNE-2.7.0-3106-Linux-x86_64/bin:/opt/freesurfer/bin:/opt/freesurfer/fsfast/bin:/opt/freesurfer/tktools:/opt/freesurfer/mni/bin:$PATH \\\n    FSLDIR=/usr/share/fsl/5.0 \\\n    FSLBROWSER=/etc/alternatives/x-www-browser \\\n    FSLLOCKDIR= \\\n    FSLMACHINELIST= \\\n    FSLMULTIFILEQUIT=TRUE \\\n    FSLOUTPUTTYPE=NIFTI_GZ \\\n    FSLREMOTECALL= \\\n    FSLTCLSH=/usr/bin/tclsh \\\n    FSLWISH=/usr/bin/wish \\\n    POSSUMDIR=/usr/share/fsl/5.0\n\n# Mrtrix3\nRUN git clone https://github.com/mrtrix3/mrtrix3 && cd mrtrix3 \\\n && git checkout 3.0_RC2 && ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" -nogui && NUMBER_OF_PROCESSORS=1 ./build\nENV MRT3=/opt/mrtrix3\nENV PATH=/opt/mrtrix3/bin:$PATH\n\n# OpenMEEG\nRUN git clone https://github.com/openmeeg/openmeeg \\\n && cd openmeeg/OpenMEEG \\\n && git checkout 2.4.prerelease \\\n && mkdir build && cd build && \\\n    cmake -DBUILD_TESTING=ON -DCMAKE_BUILD_TYPE=Release \\\n        -DENABLE_PYTHON=OFF -DCMAKE_INSTALL_PREFIX=/usr/local \\\n        -DBLASLAPACK_IMPLEMENTATION=\"OpenBLAS\" \\\n        -DBUILD_DOCUMENTATION=OFF -DBUILD_TUTORIALS=OFF .. && \\\n    make -j && \\\n    make test && \\\n    make install\nENV LD_LIBRARY_PATH=/usr/local/lib:$LD_LIBRARY_PATH\n\n# Py 3 stack\nRUN curl -f -O https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh\nRUN bash Miniconda3-latest-Linux-x86_64.sh -b -p /opt/conda\nENV PATH=/opt/conda/bin:$PATH\nRUN conda install -c conda-forge jupyterlab \\\n && conda install numpy matplotlib \\\n && pip install --no-cache-dir nibabel mne\n\n# Scripts and remesher\nRUN git clone https://github.com/ins-amu/scripts\nRUN cd /opt/scripts/remesher/cmdremesher && make\nWORKDIR /opt/scripts\nRUN mkdir /opt/processing\n\n#TODO for compatibility with tvb-make\n# ENTRYPOINT [\"make\"]"
}