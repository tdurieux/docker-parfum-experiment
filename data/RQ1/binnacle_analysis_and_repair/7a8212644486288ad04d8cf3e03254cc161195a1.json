{
  "startTime": 1674235289705,
  "endTime": 1674235289922,
  "originalSmells": [
    {
      "rule": "sha256sumEchoOneSpaces",
      "position": {
        "lineStart": 35,
        "lineEnd": 35,
        "columnStart": 1,
        "columnEnd": 48
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM python:2.7-slim-stretch\n\n# gcc for cgo\nRUN apt-get update && apt-get install -y --no-install-recommends \\\n\t\tg++ \\\n\t\tgcc \\\n\t\tlibc6-dev \\\n\t\tmake \\\n\t\tpkg-config \\\n\t\twget \\\n\t\tbash \\\n\t\tgit \\\n\t\trsync \\\n\t\tprocps \\\n\t&& rm -rf /var/lib/apt/lists/*\n\nENV GOLANG_VERSION 1.11.1\n\nRUN set -eux; \\\n\n# this \"case\" statement is generated via \"update.sh\"\n\tdpkgArch=\"$(dpkg --print-architecture)\"; \\\n\tcase \"${dpkgArch##*-}\" in \\\n\t\tamd64) goRelArch='linux-amd64'; goRelSha256='2871270d8ff0c8c69f161aaae42f9f28739855ff5c5204752a8d92a1c9f63993' ;; \\\n\t\tarmhf) goRelArch='linux-armv6l'; goRelSha256='bc601e428f458da6028671d66581b026092742baf6d3124748bb044c82497d42' ;; \\\n\t\tarm64) goRelArch='linux-arm64'; goRelSha256='25e1a281b937022c70571ac5a538c9402dd74bceb71c2526377a7e5747df5522' ;; \\\n\t\ti386) goRelArch='linux-386'; goRelSha256='52935db83719739d84a389a8f3b14544874fba803a316250b8d596313283aadf' ;; \\\n\t\tppc64el) goRelArch='linux-ppc64le'; goRelSha256='f929d434d6db09fc4c6b67b03951596e576af5d02ff009633ca3c5be1c832bdd' ;; \\\n\t\ts390x) goRelArch='linux-s390x'; goRelSha256='93afc048ad72fa2a0e5ec56bcdcd8a34213eb262aee6f39a7e4dfeeb7e564c9d' ;; \\\n\t\t*) goRelArch='src'; goRelSha256='558f8c169ae215e25b81421596e8de7572bd3ba824b79add22fba6e284db1117'; \\\n\t\t\techo >&2; echo >&2 \"warning: current architecture ($dpkgArch) does not have a corresponding Go binary release; will be building from source\"; echo >&2 ;; \\\n\tesac; \\\n\n\turl=\"https://golang.org/dl/go${GOLANG_VERSION}.${goRelArch}.tar.gz\"; \\\n\twget -O go.tgz \"$url\"; \\\n\techo \"${goRelSha256}  *go.tgz\" | sha256sum -c -; \\\n\ttar -C /usr/local -xzf go.tgz; \\\n\trm go.tgz; \\\n\n\tif [ \"$goRelArch\" = 'src' ]; then \\\n\t\techo >&2; \\\n\t\techo >&2 'error: UNIMPLEMENTED'; \\\n\t\techo >&2 'TODO install golang-any from jessie-backports for GOROOT_BOOTSTRAP (and uninstall after build)'; \\\n\t\techo >&2; \\\n\t\texit 1; \\\n\tfi; \\\n\n\texport PATH=\"/usr/local/go/bin:$PATH\"; \\\n\tgo version\n\nENV GOPATH /go\nENV PATH $GOPATH/bin:/usr/local/go/bin:$PATH\n\nRUN mkdir -p \"$GOPATH/src\" \"$GOPATH/bin\" && chmod -R 777 \"$GOPATH\"\nWORKDIR $GOPATH\n\n# Controller install steps\nCOPY entrypoint.builder.sh /entrypoint.sh\nCOPY requirements.txt /tmp/requirements.txt\nCOPY requirements.docs.txt /tmp/requirements.docs.txt\n\nRUN pip install --no-cache-dir --upgrade pip && \\\n    pip install --no-cache-dir setuptools flake8 virtualenv && \\\n\tpip install --no-cache-dir -r /tmp/requirements.txt && \\\n\tpip install --no-cache-dir -r /tmp/requirements.docs.txt && \\\n\tgo get github.com/wadey/gocovmerge && \\\n\tgo get golang.org/x/tools/cmd/cover && \\\n\tgo get github.com/mattn/goveralls && \\\n\tgo get github.com/onsi/ginkgo/ginkgo && \\\n\tgo get github.com/onsi/gomega && \\\n\tchmod 755 /entrypoint.sh\n\nCOPY --from=gosu/assets /opt/gosu /opt/gosu\nRUN set -x \\\n    && /opt/gosu/gosu.install.sh \\\n    && rm -fr /opt/gosu\n\nENTRYPOINT [ \"/entrypoint.sh\" ]\nCMD [ \"/bin/bash\" ]\n"
}