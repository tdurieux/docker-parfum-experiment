{
  "startTime": 1674252562299,
  "endTime": 1674252562376,
  "originalSmells": [
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 12,
        "lineEnd": 12,
        "columnStart": 4,
        "columnEnd": 145
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 15,
        "lineEnd": 15,
        "columnStart": 4,
        "columnEnd": 70
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 12,
        "lineEnd": 12,
        "columnStart": 4,
        "columnEnd": 145
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 15,
        "lineEnd": 15,
        "columnStart": 4,
        "columnEnd": 70
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 12,
        "lineEnd": 12,
        "columnStart": 4,
        "columnEnd": 145
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 15,
        "lineEnd": 15,
        "columnStart": 4,
        "columnEnd": 70
      }
    }
  ],
  "repairedSmells": [
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 12,
        "lineEnd": 12,
        "columnStart": 4,
        "columnEnd": 169
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 15,
        "lineEnd": 15,
        "columnStart": 4,
        "columnEnd": 94
      }
    }
  ],
  "repairedDockerfile": "FROM ubuntu:16.04\nMAINTAINER betaflight\n\n# If you want to tinker with this Dockerfile on your machine do as follows:\n# - git clone https://github.com/betaflight/docker-betaflight-build.git\n# - vim docker-betaflight-build/Dockerfile\n# - docker build -t betaflight-build docker-betaflight-build\n# - cd <your betaflight source dir>\n# - docker run --rm -ti -v `pwd`:/opt/betaflight betaflight-build\n\nRUN DEBIAN_FRONTEND=noninteractive apt-get -y update\nRUN DEBIAN_FRONTEND=noninteractive apt-get -y full-upgrade\nRUN DEBIAN_FRONTEND=noninteractive apt-get --no-install-recommends -y install software-properties-common git make ccache python curl bzip2 gcc clang libblocksruntime-dev && rm -rf /var/lib/apt/lists/*;\nRUN DEBIAN_FRONTEND=noninteractive add-apt-repository -y ppa:team-gcc-arm-embedded/ppa\nRUN DEBIAN_FRONTEND=noninteractive apt-get -y update\nRUN DEBIAN_FRONTEND=noninteractive apt-get --no-install-recommends -y install gcc-arm-embedded && rm -rf /var/lib/apt/lists/*;\n\nRUN mkdir -p /opt\n\nRUN mkdir -p /opt/betaflight\nWORKDIR /opt/betaflight\n\nENV ARM_SDK_DIR=\"/usr/\"\n\n# Config options you may pass via Docker like so 'docker run -e \"<option>=<value>\"':\n# - TARGET=<name>, specify target platform to build for\n#   Specify 'all' to build for all supported platforms. (default: BETAFLIGHTF3)\n#   Specify 'test' to build and run the unit tests.\n# - OPTIONS=<options> specify build options to be used as defines during the build\n#\n# What the commands do:\n\nCMD if [ -z ${TARGET} ]; then \\\n        TARGET=\"BETAFLIGHTF3\"; \\\n    fi && \\\n    EXTRA_OPTIONS=\"\" && \\\n    if [ -n ${OPTIONS} ]; then \\\n        EXTRA_OPTIONS=\"OPTIONS=${OPTIONS}\"; \\\n    fi && \\\n    if [ ${TARGET} = test ]; then \\\n        make ARM_SDK_DIR=${ARM_SDK_DIR} clean_test && \\\n        make ARM_SDK_DIR=${ARM_SDK_DIR} test ${EXTRA_OPTIONS}; \\\n    elif [ ${TARGET} = all ]; then \\\n        make ARM_SDK_DIR=${ARM_SDK_DIR} clean_all && \\\n        make ARM_SDK_DIR=${ARM_SDK_DIR} all ${EXTRA_OPTIONS}; \\\n    else \\\n        make ARM_SDK_DIR=${ARM_SDK_DIR} clean TARGET=${TARGET} && \\\n        make ARM_SDK_DIR=${ARM_SDK_DIR} TARGET=${TARGET} ${EXTRA_OPTIONS}; \\\n    fi\n"
}