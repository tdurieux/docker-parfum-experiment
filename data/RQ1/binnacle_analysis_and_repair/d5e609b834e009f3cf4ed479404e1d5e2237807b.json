{
  "startTime": 1674250659283,
  "endTime": 1674250659690,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 33,
        "lineEnd": 33,
        "columnStart": 4,
        "columnEnd": 156
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 46,
        "lineEnd": 46,
        "columnStart": 4,
        "columnEnd": 143
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 66,
        "lineEnd": 66,
        "columnStart": 4,
        "columnEnd": 170
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 72,
        "lineEnd": 72,
        "columnStart": 4,
        "columnEnd": 167
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 78,
        "lineEnd": 78,
        "columnStart": 4,
        "columnEnd": 226
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 40,
        "lineEnd": 40,
        "columnStart": 4,
        "columnEnd": 35
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 53,
        "lineEnd": 53,
        "columnStart": 4,
        "columnEnd": 61
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 60,
        "lineEnd": 60,
        "columnStart": 4,
        "columnEnd": 61
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 8,
        "lineEnd": 13,
        "columnStart": 22,
        "columnEnd": 7
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 105,
        "lineEnd": 105,
        "columnStart": 4,
        "columnEnd": 26
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "ARG BASE_IMAGE=debian:9.5-slim\n####################################################################################################\n# Builder image\n# Initial stage which pulls prepares build dependencies and CLI tooling we need for our final image\n# Also used as the image in CI jobs so needs all dependencies\n####################################################################################################\nFROM golang:1.11.4 as builder\n\nRUN apt-get update && apt-get install --no-install-recommends -y \\\n    git \\\n    make \\\n    wget \\\n    gcc \\\n    zip && \\\n    apt-get clean && \\\n    rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*\n\nWORKDIR /tmp\n\n# Install docker\nENV DOCKER_CHANNEL stable\nENV DOCKER_VERSION 18.09.1\nRUN wget -O docker.tgz \"https://download.docker.com/linux/static/${DOCKER_CHANNEL}/x86_64/docker-${DOCKER_VERSION}.tgz\" && \\\n    tar --extract --file docker.tgz --strip-components 1 --directory /usr/local/bin/ && \\\n    rm docker.tgz\n\n# Install dep\nENV DEP_VERSION=0.5.0\nRUN wget https://github.com/golang/dep/releases/download/v${DEP_VERSION}/dep-linux-amd64 -O /usr/local/bin/dep && \\\n    chmod +x /usr/local/bin/dep\n\n# Install gometalinter\nENV GOMETALINTER_VERSION=2.0.12\nRUN curl -f -sLo- https://github.com/alecthomas/gometalinter/releases/download/v${GOMETALINTER_VERSION}/gometalinter-${GOMETALINTER_VERSION}-linux-amd64.tar.gz | \\\n    tar -xzC \"$GOPATH/bin\" --exclude COPYING --exclude README.md --strip-components 1 -f- && \\\n    ln -s $GOPATH/bin/gometalinter $GOPATH/bin/gometalinter.v2\n\n# Install packr\nENV PACKR_VERSION=1.21.9\nRUN wget https://github.com/gobuffalo/packr/releases/download/v${PACKR_VERSION}/packr_${PACKR_VERSION}_linux_amd64.tar.gz && \\\n    tar -vxf packr*.tar.gz -C /tmp/ && \\\n    mv /tmp/packr /usr/local/bin/packr && rm packr*.tar.gz\n\n# Install kubectl\n# NOTE: keep the version synced with https://storage.googleapis.com/kubernetes-release/release/stable.txt\nENV KUBECTL_VERSION=1.14.0\nRUN curl -f -L -o /usr/local/bin/kubectl -LO https://storage.googleapis.com/kubernetes-release/release/v${KUBECTL_VERSION}/bin/linux/amd64/kubectl && \\\n    chmod +x /usr/local/bin/kubectl && \\\n    kubectl version --client\n\n# Install ksonnet\nENV KSONNET_VERSION=0.13.1\nRUN wget https://github.com/ksonnet/ksonnet/releases/download/v${KSONNET_VERSION}/ks_${KSONNET_VERSION}_linux_amd64.tar.gz && \\\n    tar -C /tmp/ -xf ks_${KSONNET_VERSION}_linux_amd64.tar.gz && \\\n    mv /tmp/ks_${KSONNET_VERSION}_linux_amd64/ks /usr/local/bin/ks && \\\n    ks version && rm ks_${KSONNET_VERSION}_linux_amd64.tar.gz\n\n# Install helm\nENV HELM_VERSION=2.12.1\nRUN wget https://storage.googleapis.com/kubernetes-helm/helm-v${HELM_VERSION}-linux-amd64.tar.gz && \\\n    tar -C /tmp/ -xf helm-v${HELM_VERSION}-linux-amd64.tar.gz && \\\n    mv /tmp/linux-amd64/helm /usr/local/bin/helm && \\\n    helm version --client && rm helm-v${HELM_VERSION}-linux-amd64.tar.gz\n\n# Install kustomize\nENV KUSTOMIZE1_VERSION=1.0.11\nRUN curl -f -L -o /usr/local/bin/kustomize1 https://github.com/kubernetes-sigs/kustomize/releases/download/v${KUSTOMIZE1_VERSION}/kustomize_${KUSTOMIZE1_VERSION}_linux_amd64 && \\\n    chmod +x /usr/local/bin/kustomize1 && \\\n    kustomize1 version\n\n\nENV KUSTOMIZE_VERSION=2.0.3\nRUN curl -f -L -o /usr/local/bin/kustomize https://github.com/kubernetes-sigs/kustomize/releases/download/v${KUSTOMIZE_VERSION}/kustomize_${KUSTOMIZE_VERSION}_linux_amd64 && \\\n    chmod +x /usr/local/bin/kustomize && \\\n    kustomize version\n\n# Install AWS IAM Authenticator\nENV AWS_IAM_AUTHENTICATOR_VERSION=0.4.0-alpha.1\nRUN curl -f -L -o /usr/local/bin/aws-iam-authenticator https://github.com/kubernetes-sigs/aws-iam-authenticator/releases/download/${AWS_IAM_AUTHENTICATOR_VERSION}/aws-iam-authenticator_${AWS_IAM_AUTHENTICATOR_VERSION}_linux_amd64 && \\\n    chmod +x /usr/local/bin/aws-iam-authenticator\n\n# Install golangci-lint\nRUN wget https://install.goreleaser.com/github.com/golangci/golangci-lint.sh  && \\\n    chmod +x ./golangci-lint.sh && \\\n    ./golangci-lint.sh -b $GOPATH/bin && \\\n    golangci-lint linters\n\nCOPY .golangci.yml ${GOPATH}/src/dummy/.golangci.yml\n\nRUN cd ${GOPATH}/src/dummy && \\\n    touch dummy.go \\\n    golangci-lint run\n\n####################################################################################################\n# Argo CD Base - used as the base for both the release and dev argocd images\n####################################################################################################\nFROM $BASE_IMAGE as argocd-base\n\nUSER root\n\nRUN groupadd -g 999 argocd && \\\n    useradd -r -u 999 -g argocd argocd && \\\n    mkdir -p /home/argocd && \\\n    chown argocd:argocd /home/argocd && \\\n    apt-get update && \\\n    apt-get install --no-install-recommends -y git && \\\n    apt-get clean && \\\n    rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*\n\nCOPY hack/ssh_known_hosts /etc/ssh/ssh_known_hosts\nCOPY hack/git-ask-pass.sh /usr/local/bin/git-ask-pass.sh\nCOPY --from=builder /usr/local/bin/ks /usr/local/bin/ks\nCOPY --from=builder /usr/local/bin/helm /usr/local/bin/helm\nCOPY --from=builder /usr/local/bin/kubectl /usr/local/bin/kubectl\nCOPY --from=builder /usr/local/bin/kustomize1 /usr/local/bin/kustomize1\nCOPY --from=builder /usr/local/bin/kustomize /usr/local/bin/kustomize\nCOPY --from=builder /usr/local/bin/aws-iam-authenticator /usr/local/bin/aws-iam-authenticator\n\n# workaround ksonnet issue https://github.com/ksonnet/ksonnet/issues/298\nENV USER=argocd\n\nUSER argocd\nWORKDIR /home/argocd\n\n\n####################################################################################################\n# Argo CD Build stage which performs the actual build of Argo CD binaries\n####################################################################################################\nFROM golang:1.11.4 as argocd-build\n\nCOPY --from=builder /usr/local/bin/dep /usr/local/bin/dep\nCOPY --from=builder /usr/local/bin/packr /usr/local/bin/packr\n\n# A dummy directory is created under $GOPATH/src/dummy so we are able to use dep\n# to install all the packages of our dep lock file\nCOPY Gopkg.toml ${GOPATH}/src/dummy/Gopkg.toml\nCOPY Gopkg.lock ${GOPATH}/src/dummy/Gopkg.lock\n\nRUN cd ${GOPATH}/src/dummy && \\\n    dep ensure -vendor-only && \\\n    mv vendor/* ${GOPATH}/src/ && \\\n    rmdir vendor\n\n# Perform the build\nWORKDIR /go/src/github.com/argoproj/argo-cd\nCOPY . .\nRUN make cli server controller repo-server argocd-util && \\\n    make CLI_NAME=argocd-darwin-amd64 GOOS=darwin cli\n\n\n####################################################################################################\n# Final image\n####################################################################################################\nFROM argocd-base\nCOPY --from=argocd-build /go/src/github.com/argoproj/argo-cd/dist/argocd* /usr/local/bin/\n"
}