{
  "startTime": 1674251264169,
  "endTime": 1674251264360,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 42,
        "lineEnd": 42,
        "columnStart": 27,
        "columnEnd": 170
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM openshifttools/oso-centos7-ops-base:latest\n#     ___ ___ _  _ ___ ___    _ _____ ___ ___        \n#    / __| __| \\| | __| _ \\  /_\\_   _| __|   \\       \n#   | (_ | _|| .` | _||   / / _ \\| | | _|| |) |      \n#    \\___|___|_|\\_|___|_|_\\/_/_\\_\\_|_|___|___/_ _____\n#   |   \\ / _ \\  | \\| |/ _ \\_   _| | __|   \\_ _|_   _|\n#   | |) | (_) | | .` | (_) || |   | _|| |) | |  | | \n#   |___/ \\___/  |_|\\_|\\___/ |_|   |___|___/___| |_| \n#\n\n\n# Pause indefinitely if asked to do so.\nARG OO_PAUSE_ON_BUILD\nRUN test \"$OO_PAUSE_ON_BUILD\" = \"true\" && while sleep 10; do true; done || :\n\n# PCP\n##################\n# install pcp-collector and it's dependencies, clean the cache.\nRUN yum-install-check.sh -y pcp pcp-conf pcp-collector xz && yum clean all\n# Run in the container as root - avoids PCP_USER mismatches\nRUN sed -i -e 's/PCP_USER=.*$/PCP_USER=root/' -e 's/PCP_GROUP=.*$/PCP_GROUP=root/' /etc/pcp.conf\n\n# Disable service advertising - no avahi daemon in the container\n# (dodges warnings from pmcd attempting to connect during startup)\nRUN . /etc/pcp.conf && echo \"-A\" >> $PCP_PMCDOPTIONS_PATH\n\n# denote this as a container environment, for rc scripts\nENV PCP_CONTAINER_IMAGE pcp-collector\nENV NAME pcp-collector\nENV IMAGE pcp-collector\nENV PATH /usr/share/pcp/lib:/usr/libexec/pcp/bin:$PATH\n\n# script to watch health of pmcd\nCOPY check-pmcd-status.sh /usr/local/bin/check-pmcd-status.sh\n##################\n\n\n\n# Add google-cloud-sdk repo\nCOPY google-cloud-sdk.repo /etc/yum.repos.d/\n\n# Add copr repo for python-hawkular-client rpm\nRUN cd /etc/yum.repos.d && curl -f -O https://copr.fedorainfracloud.org/coprs/g/Hawkular/python-hawkular-client/repo/epel-7/group_Hawkular-python-hawkular-client-epel-7.repo\n\nRUN yum clean metadata && \\\n    yum-install-check.sh -y python2-pip pcp pcp-conf pcp-testsuite \\\n        python-requests pyOpenSSL \\\n        python-openshift-tools \\\n        python-openshift-tools-monitoring-pcp \\\n        python-openshift-tools-monitoring-docker \\\n        python-openshift-tools-monitoring-zagg \\\n        python-openshift-tools-monitoring-openshift \\\n        python-openshift-tools-ansible \\\n        python-openshift-tools-web \\\n        openshift-tools-scripts-cloud-aws \\\n        openshift-tools-scripts-cloud-gcp \\\n        openshift-tools-scripts-monitoring-pcp \\\n        openshift-tools-scripts-monitoring-docker \\\n        openshift-tools-scripts-monitoring-aws \\\n        openshift-tools-scripts-monitoring-gcp \\\n        openshift-tools-scripts-monitoring-openshift \\\n        openshift-tools-scripts-monitoring-autoheal \\\n        pcp-manager pcp-webapi python-pcp \\\n        python-httplib2 \\\n        python2-pyasn1 python2-pyasn1-modules python2-rsa \\\n        python-configobj \\\n        python2-psutil \\\n        pylint \\\n        tito \\\n        python-devel \\\n        libyaml-devel \\\n        oso-simplesamlphp \\\n        python2-ruamel-yaml \\\n        rpm-sign \\\n        createrepo \\\n        python2-boto3 \\\n        python-lxml \\\n        rkhunter \\\n        python-hawkular-client \\\n        python-docker && \\\n    yum clean all\n\nCOPY urllib3-connectionpool-patch /root/\nRUN yum-install-check.sh -y patch && yum clean all && cd /usr/lib/python2.7/site-packages/ && patch -p1 < /root/urllib3-connectionpool-patch\n\n# make mount points for security update count check, and make a circular symlink because yum is dumb about its root\nRUN mkdir -p /host \\\n             /var/local/hostpkg/etc/rhsm/ca \\\n             /var/local/hostpkg/etc/rpm \\\n             /var/local/hostpkg/etc/pki/entitlement \\\n             /var/local/hostpkg/etc/pki/rpm-gpg \\\n             /var/local/hostpkg/var/local \\\n             /var/local/hostpkg/var/cache/yum \\\n             /var/local/hostpkg/var/lib/yum && \\\n    ln -s /var/local/hostpkg /var/local/hostpkg/var/local/hostpkg\n\n# Make mount points for rkhunter files, and configure rkhunter to work with this structure\nRUN mkdir -p /var/local/rkhunter_chroot \\\n             /var/local/rkhunter_tmp \\\n             /var/local/rkhunter_tmp/rkhunter \\\n             /var/local/rkhunter_tmp/rkhunter/bin \\\n             /var/local/rkhunter_tmp/rkhunter/db \\\n             /var/local/rkhunter_tmp/rkhunter/etc \\\n             /var/local/rkhunter_tmp/rkhunter/scripts && \\\n    sed -i 's/\\/var\\/log\\/rkhunter\\/rkhunter.log/\\/var\\/local\\/rkhunter_tmp\\/rkhunter\\/rkhunter.log/' /etc/logrotate.d/rkhunter && \\\n    sed -r -e 's%^(SCRIPTDIR)=.*%\\1=/tmp/rkhunter/scripts%; s%^(LOGFILE)=.*%\\1=/tmp/rkhunter/rkhunter.log%' /etc/rkhunter.conf > /var/local/rkhunter_tmp/rkhunter/etc/rkhunter.conf\n\n# Ansible startup configuration playbook\nCOPY root /root\n\nRUN cat bash_aliases >> /root/.bashrc\n\n# FIXME: These are vendor libs that need to be packaged and installed via RPM.\nCOPY vendor/prometheus_client /usr/lib/python2.7/site-packages/prometheus_client/\n\n# Create ops-runner.log file with proper permissions\nRUN touch /var/log/ops-runner.log && chmod 664 /var/log/ops-runner.log\n\n# Setup the AWS credentials file so that we can populate it on startup.\nRUN mkdir -p /root/.aws && \\\n    touch /root/.aws/credentials && \\\n    chmod g+rw /root/.aws/credentials\n\n# Add container-build-env-fingerprint\nCOPY container-build-env-fingerprint.output /etc/oso-container-build-env-fingerprint\n\n# Add the start script and tell the container to run it by default\nCOPY start.sh /usr/local/bin/\nCMD /usr/local/bin/start.sh\n"
}