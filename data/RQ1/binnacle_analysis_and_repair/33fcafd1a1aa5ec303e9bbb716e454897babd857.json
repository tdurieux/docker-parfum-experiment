{
  "startTime": 1674239623628,
  "endTime": 1674239624000,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 62,
        "lineEnd": 62,
        "columnStart": 4,
        "columnEnd": 28
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 90,
        "lineEnd": 90,
        "columnStart": 4,
        "columnEnd": 64
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 54,
        "lineEnd": 56,
        "columnStart": 4,
        "columnEnd": 22
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 98,
        "lineEnd": 99,
        "columnStart": 4,
        "columnEnd": 38
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "###\n# Builds a container used for compiling the tectonic-installer binaries and javascript applications.\n#\n# Node install inspired by: https://github.com/dockerfile/nodejs/blob/master/Dockerfile\n#\n# Update the builder image manually by running:\n# (See README.md/##Upstream-and-CoreOS-Terraform)\n#\n# docker build -t quay.io/coreos/tectonic-builder:<next-semver> -f images/builder/Dockerfile .\n# docker push quay.io/coreos/tectonic-builder:<next-semver>\n#\n# docker build \\\n# --build-arg TERRAFORM_URL=<upstream terraform download url> \\\n# -t quay.io/coreos/tectonic-builder:<next-semver>-upstream-terraform \\\n# -f images/builder/Dockerfile .\n# docker push quay.io/coreos/tectonic-builder:<next-semver>-upstream-terraform\n###\n\nFROM golang:1.9.2-stretch\n\n### For golang testing stuff\nRUN go get -u github.com/golang/lint/golint\nRUN go get github.com/jstemmer/go-junit-report\n\n### Tools used by 'make structure-check'\nRUN go get github.com/segmentio/terraform-docs\nRUN go get github.com/s-urbaniak/terraform-examples\nRUN go get github.com/bronze1man/yaml2json\n\n### License parser\nRUN go get github.com/coreos/license-bill-of-materials\n\n### 'grafiti' for cluster cleanup\nENV GRAFITI_VERSION \"v0.1.1\"\nRUN git clone -q https://github.com/coreos/grafiti.git ${GOPATH}/src/github.com/coreos/grafiti \\\n    && cd ${GOPATH}/src/github.com/coreos/grafiti \\\n    && git checkout -q tags/${GRAFITI_VERSION} \\\n    && make install\n\n# /go needs to be writable by jenkins user like it is in the upstream golang image\nRUN chmod 777 -R /go\n\n### Install Shellcheck, Terraform, NodeJS and Yarn\nENV SHELLCHECK_VERSION=\"v0.4.6\"\nENV TERRAFORM_VERSION=\"0.10.7\"\nENV NODE_VERSION=\"v8.1.2\"\nENV YARN_VERSION=\"v0.24.6\"\nENV MATCHBOXVERSION=\"v0.6.1\"\n# yarn needs a home writable by any user running the container\nENV HOME /opt/home\nRUN mkdir -p ${HOME}\nRUN chmod 777 -R ${HOME}\n\nRUN apt-get update && \\\n    apt-get install --no-install-recommends -y -q \\\n    build-essential sudo curl wget git autoconf automake unzip libtool jq awscli gnupg1 \\\n    openvpn xvfb xauth && rm -rf /var/lib/apt/lists/*;\n\n# Install Terraform\n# TERRAFORM_URL enables us to build the upstream-terraform Tectonic builder\n# image (See README.md/##Upstream-and-CoreOS-Terraform)\nARG TERRAFORM_URL=https://releases.hashicorp.com/terraform/${TERRAFORM_VERSION}/terraform_${TERRAFORM_VERSION}_linux_amd64.zip\nRUN curl -f -L ${TERRAFORM_URL} | funzip > /usr/local/bin/terraform && chmod +x /usr/local/bin/terraform\n\n# Install NodeJS\nRUN cd /tmp && \\\n    wget --quiet -O /tmp/node.tar.gz https://nodejs.org/dist/${NODE_VERSION}/node-${NODE_VERSION}-linux-x64.tar.gz && \\\n    tar xf node.tar.gz && \\\n    rm -f /tmp/node.tar.gz && \\\n    cd node-* && \\\n    cp -r lib/node_modules /usr/local/lib/node_modules && \\\n    cp bin/node /usr/local/bin && \\\n    ln -s /usr/local/lib/node_modules/npm/bin/npm-cli.js /usr/local/bin/npm\n# so any container user can install global node modules if needed\nRUN chmod 777 /usr/local/lib/node_modules\n\n# Install Yarn\nRUN cd /tmp && \\\n    wget --quiet -O /tmp/yarn.tar.gz https://github.com/yarnpkg/yarn/releases/download/${YARN_VERSION}/yarn-${YARN_VERSION}.tar.gz && \\\n    tar xf yarn.tar.gz && \\\n    rm -f /tmp/yarn.tar.gz && \\\n    mv /tmp/dist /usr/local/yarn && \\\n    ln -s /usr/local/yarn/bin/yarn /usr/local/bin/yarn\n\n# Install Azure-cli\nRUN yarn global add azure-cli\n\n# Install Shellcheck\nRUN cd /tmp && \\\n    wget --quiet https://storage.googleapis.com/shellcheck/shellcheck-${SHELLCHECK_VERSION}.linux.x86_64.tar.xz && \\\n    tar xJf shellcheck-${SHELLCHECK_VERSION}.linux.x86_64.tar.xz && \\\n    mv /tmp/shellcheck-${SHELLCHECK_VERSION}/shellcheck /usr/local/bin/shellcheck && rm shellcheck-${SHELLCHECK_VERSION}.linux.x86_64.tar.xz\n\n# Install Chrome for installer gui tests\n# Use Chrome beta because v60 or higher is needed for headless mode\nRUN wget --quiet -O - https://dl-ssl.google.com/linux/linux_signing_key.pub | apt-key add - && \\\n    sh -c 'echo \"deb [arch=amd64] http://dl.google.com/linux/chrome/deb/ stable main\" >> /etc/apt/sources.list.d/google-chrome.list' && \\\n    apt-get update && \\\n    apt-get install --no-install-recommends -y -q \\\n    google-chrome-beta ca-certificates && rm -rf /var/lib/apt/lists/*;\n\n# matchbox for baremetal installer gui tests\nRUN cd /tmp && \\\n    wget --quiet -O /tmp/matchbox.tar.gz https://github.com/coreos/matchbox/releases/download/${MATCHBOXVERSION}/matchbox-${MATCHBOXVERSION}-linux-amd64.tar.gz && \\\n    tar xzvf /tmp/matchbox.tar.gz && \\\n    rm -f /tmp/matchbox.tar.gz && \\\n    cp matchbox-*/matchbox /usr/local/bin\n\n# cleanup\nRUN rm -rf /tmp/node-v*\nRUN rm -f /tmp/yarn.tar.gz\n"
}