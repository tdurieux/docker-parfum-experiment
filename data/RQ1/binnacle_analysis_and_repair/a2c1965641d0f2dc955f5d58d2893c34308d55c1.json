{
  "startTime": 1674248888115,
  "endTime": 1674248888337,
  "originalSmells": [
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 2,
        "lineEnd": 5,
        "columnStart": 26,
        "columnEnd": 14
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM ubuntu:16.04\n\nRUN apt-get update -qq && apt-get install --no-install-recommends -qqy \\\n    git wget bzip2 file unzip libtool pkg-config cmake build-essential \\\n    automake yasm gettext autopoint vim python git-svn ninja-build \\\n    subversion && \\\n    apt-get clean -y && \\\n    rm -rf /var/lib/apt/lists/*\n\n\nRUN git config --global user.name \"LLVM MinGW\" && \\\n    git config --global user.email root@localhost\n\nWORKDIR /build\n\nENV TOOLCHAIN_PREFIX=/opt/llvm-mingw\n\nARG FULL_LLVM\n\n# Build LLVM\nCOPY build-llvm.sh ./\nRUN ./build-llvm.sh $TOOLCHAIN_PREFIX\n\n# Strip the LLVM install output immediately. (This doesn't reduce the\n# total docker image size as long as it is in a separate RUN layer though,\n# but reduces build times if tweaking the contents of strip-llvm.sh.)\n# Most of the size of the docker image comes from the build directory that\n# we keep in any case.\nCOPY strip-llvm.sh ./\nRUN ./strip-llvm.sh $TOOLCHAIN_PREFIX\n\nARG TOOLCHAIN_ARCHS=\"i686 x86_64 armv7 aarch64\"\n\n# Install the usual $TUPLE-clang binaries\nCOPY wrappers/*.sh wrappers/*.c wrappers/*.h ./wrappers/\nCOPY install-wrappers.sh ./\nRUN ./install-wrappers.sh $TOOLCHAIN_PREFIX\n\n# Build MinGW-w64\nCOPY build-mingw-w64.sh ./\nRUN ./build-mingw-w64.sh $TOOLCHAIN_PREFIX\n\n# Build compiler-rt\nCOPY build-compiler-rt.sh ./\nRUN ./build-compiler-rt.sh $TOOLCHAIN_PREFIX\n\n# Build mingw-w64's extra libraries\nCOPY build-mingw-w64-libraries.sh ./\nRUN ./build-mingw-w64-libraries.sh $TOOLCHAIN_PREFIX\n\n# Build C test applications\nENV PATH=$TOOLCHAIN_PREFIX/bin:$PATH\n\nCOPY test/*.c test/*.h ./test/\nRUN cd test && \\\n    for arch in $TOOLCHAIN_ARCHS; do \\\n        mkdir -p $arch && \\\n        for test in hello hello-tls crt-test setjmp; do \\\n            $arch-w64-mingw32-clang $test.c -o $arch/$test.exe || exit 1; \\\n        done; \\\n        for test in autoimport-lib; do \\\n            $arch-w64-mingw32-clang $test.c -shared -o $arch/$test.dll -Wl,--out-implib,$arch/lib$test.dll.a || exit 1; \\\n        done; \\\n        for test in autoimport-main; do \\\n            $arch-w64-mingw32-clang $test.c -o $arch/$test.exe -L$arch -l${test%-main}-lib || exit 1; \\\n        done; \\\n    done\n\n# Build libunwind/libcxxabi/libcxx\nCOPY build-libcxx.sh ./\nRUN ./build-libcxx.sh $TOOLCHAIN_PREFIX\n\n# Build C++ test applications\nCOPY test/*.cpp ./test/\nRUN cd test && \\\n    for arch in $TOOLCHAIN_ARCHS; do \\\n        mkdir -p $arch && \\\n        for test in hello-cpp hello-exception tlstest-main exception-locale exception-reduced; do \\\n            $arch-w64-mingw32-clang++ $test.cpp -o $arch/$test.exe || exit 1; \\\n        done; \\\n        for test in tlstest-lib; do \\\n            $arch-w64-mingw32-clang++ $test.cpp -shared -o $arch/$test.dll || exit 1; \\\n        done; \\\n    done\n\n# Build sanitizers. Ubsan includes <typeinfo> from the C++ headers, so\n# we need to build this after libcxx.\nRUN ./build-compiler-rt.sh $TOOLCHAIN_PREFIX --build-sanitizers\n\n# Sanitizers on windows only support x86.\nRUN cd test && \\\n    for arch in $TOOLCHAIN_ARCHS; do \\\n        case $arch in \\\n        i686|x86_64) \\\n            ;; \\\n        *) \\\n            continue \\\n            ;; \\\n        esac && \\\n        for test in stacksmash; do \\\n            $arch-w64-mingw32-clang $test.c -o $arch/$test-asan.exe -fsanitize=address -g -gcodeview -Wl,-pdb,$arch/$test-asan.pdb || exit 1; \\\n        done; \\\n        for test in ubsan; do \\\n            $arch-w64-mingw32-clang $test.c -o $arch/$test.exe -fsanitize=undefined || exit 1; \\\n        done; \\\n    done\n\n# Build libssp\nCOPY build-libssp.sh libssp-Makefile ./\nRUN ./build-libssp.sh $TOOLCHAIN_PREFIX\n\nRUN cd test && \\\n    for arch in $TOOLCHAIN_ARCHS; do \\\n        mkdir -p $arch && \\\n        for test in stacksmash; do \\\n            $arch-w64-mingw32-clang $test.c -o $arch/$test.exe -fstack-protector-strong || exit 1; \\\n        done; \\\n    done\n\nRUN cd test && \\\n    for arch in $TOOLCHAIN_ARCHS; do \\\n        cp $TOOLCHAIN_PREFIX/$arch-w64-mingw32/bin/*.dll $arch || exit 1; \\\n    done\n"
}