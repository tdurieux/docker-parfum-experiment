{
  "startTime": 1674245213542,
  "endTime": 1674245213742,
  "originalSmells": [
    {
      "rule": "wgetUseHttpsUrl",
      "position": {
        "lineStart": 11,
        "lineEnd": 11,
        "columnStart": 7,
        "columnEnd": 108
      }
    },
    {
      "rule": "wgetUseHttpsUrl",
      "position": {
        "lineStart": 12,
        "lineEnd": 12,
        "columnStart": 7,
        "columnEnd": 109
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM foonathan/micro_cpp_gcc\n\nARG LLVM_FULL_VERSION=8.0.0\nARG CLANG_BINARY=clang-8\nARG PATCH=empty.patch\n\nCOPY $PATCH /root/$PATCH\n\n# install build dependencies\nRUN apk update && apk add --no-cache python3 ninja \\\n# download source code \\\n    && wget -q https://releases.llvm.org/$LLVM_FULL_VERSION/llvm-$LLVM_FULL_VERSION.src.tar.xz -O llvm.tar.xz \\\n    && wget -q https://releases.llvm.org/$LLVM_FULL_VERSION/cfe-$LLVM_FULL_VERSION.src.tar.xz -O clang.tar.xz \\\n# extract\n    && tar -xf llvm.tar.xz && tar -xf clang.tar.xz \\\n    && mv llvm-$LLVM_FULL_VERSION.src llvm-src && mv cfe-$LLVM_FULL_VERSION.src llvm-src/tools/clang \\\n# apply patches\n    && cd llvm-src/ \\\n    && { git apply /root/$PATCH || true; } \\\n    && cd ../ \\\n# build\n    && mkdir llvm-build && mkdir /opt/llvm \\\n    && cd llvm-build \\\n    && cmake -G\"Ninja\" -DCMAKE_INSTALL_PREFIX=\"/opt/llvm\" -DCMAKE_BUILD_TYPE=Release \\\n                       -DLLVM_HOST_TRIPLE=\"x86_64-alpine-linux-musl\" \\\n                       -DLIBCLANG_BUILD_STATIC=ON -DLLVM_BUILD_EXAMPLES=OFF -DLLVM_BUILD_TESTS=OFF \\\n                        ../llvm-src \\\n    && cmake --build . \\\n    && cmake --build . --target install \\\n    # static libclang library is not installed, so have to do manually\n    && find . -name 'libclang.a' -exec cp {} /opt/llvm/lib \\; \\\n    && cd ../ \\\n# remove build files\n    && rm -r llvm-src/ llvm-build/ \\\n    && rm llvm.tar.xz clang.tar.xz \\\n# remove contents of share and libexec directory (it is not needed for our purposes)\n    && rm -r /opt/llvm/share/* \\\n    && rm -r /opt/llvm/libexec/* \\\n# remove unnecessary tools (i.e. not clang and not llvm-config)\n    && find /opt/llvm/bin -type f -not -name $CLANG_BINARY -not -name 'llvm-config' -delete \\\n# remove symlinks broken by the command above\n    && find -L /opt/llvm/bin -maxdepth 1 -type l -delete \\\n# remove shared libraries that were built anyway\n    && find /opt/llvm/lib \\( -type f -or -type l \\) \\( -name '*.so' -or -name '*.so.*' \\) -delete \\\n# remove build dependencies\n    && apk del -r python3 ninja \\\n# remove patch file\n    && rm /root/$PATCH\n\n# update PATH\nENV PATH=\"/opt/llvm/bin:${PATH}\"\n"
}