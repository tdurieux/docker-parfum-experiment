{
  "startTime": 1674246102973,
  "endTime": 1674246103029,
  "originalSmells": [
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 52,
        "lineEnd": 53,
        "columnStart": 4,
        "columnEnd": 63
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM ubuntu:18.04\n\nLABEL Description=\"This image contains tools used to build opentxs\" Vendor=\"OpenTransactions\"\n\nARG BUILD_PACKAGES=\"\\\n    build-essential \\\n    checkinstall \\\n    g++-8 \\\n    gcc-8 \\\n    time \\\n    xz-utils \\\n\"\n\nARG GIT_PACKAGES=\"\\\n    ca-certificates \\\n    git \\\n\"\n\n# Include `cmake-curses-gui` if you're working interactively.\n\nARG CMAKE_PACKAGES=\"\\\n    cmake \\\n\"\nARG LOCAL_BUILD_TOOLS=\"\\\n    doxygen \\\n    graphviz \\\n    libboost-all-dev \\\n    libgtest-dev \\\n    liblmdb-dev \\\n    libprotobuf-dev \\\n    libsecp256k1-dev \\\n    libsodium-dev \\\n    libssl-dev \\\n    libzmq3-dev \\\n    protobuf-compiler \\\n    python3 \\\n    python3-dev \\\n    python3-protobuf \\\n    python3-setuptools \\\n    python3-wheel \\\n    time \\\n\"\n\nARG ALL_PACKAGES=\"\\\n    $BUILD_PACKAGES \\\n    $GIT_PACKAGES \\\n    $CMAKE_PACKAGES \\\n    $LOCAL_BUILD_TOOLS \\\n\"\n\nRUN apt-get update -q && \\\n    DEBIAN_FRONTEND=noninteractive \\\n    apt-get install --yes --no-install-recommends $ALL_PACKAGES && rm -rf /var/lib/apt/lists/*;\n\n# build-essential installs gcc-7 and g++-7. Select gcc-8 as\n# `/usr/bin/gcc` and g++-8 as `/usr/bin/g++`\n#\n# Via https://askubuntu.com/questions/1028601/install-gcc-8-only-on-ubuntu-18-04\n\nRUN update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-7 700 --slave /usr/bin/g++ g++ /usr/bin/g++-7\nRUN update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-8 800 --slave /usr/bin/g++ g++ /usr/bin/g++-8\n\n# gtest:\n\nARG MAKE_PARALLEL=-j\nWORKDIR /usr/src/gtest/build\nRUN time -p bash -c \"cmake .. && make ${MAKE_PARALLEL} && make install\"\n\nVOLUME /src\nWORKDIR /src\n\n#COPY CMakeLists.txt cmake deps include src tests wrappers ./\n#RUN mkdir build\n#RUN cd build && cmake -DBUILD_VERBOSE=OFF ..\n#RUN time -p bash -c \"make ${MAKE_PARALLEL} && make install\"\n#RUN echo \"--------- TIMING INFORMATION FOR OPENTXS BUILD\"\n#RUN make test\n\n"
}