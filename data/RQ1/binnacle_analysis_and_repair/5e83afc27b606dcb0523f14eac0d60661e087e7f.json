{
  "startTime": 1674235537218,
  "endTime": 1674235538606,
  "originalSmells": [
    {
      "rule": "wgetUseHttpsUrl",
      "position": {
        "lineStart": 35,
        "lineEnd": 35,
        "columnStart": 4,
        "columnEnd": 47
      }
    },
    {
      "rule": "wgetUseHttpsUrl",
      "position": {
        "lineStart": 259,
        "lineEnd": 259,
        "columnStart": 4,
        "columnEnd": 140
      }
    },
    {
      "rule": "wgetUseHttpsUrl",
      "position": {
        "lineStart": 263,
        "lineEnd": 263,
        "columnStart": 7,
        "columnEnd": 127
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 181,
        "lineEnd": 181,
        "columnStart": 4,
        "columnEnd": 36
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 188,
        "lineEnd": 188,
        "columnStart": 4,
        "columnEnd": 23
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 267,
        "lineEnd": 267,
        "columnStart": 7,
        "columnEnd": 52
      }
    },
    {
      "rule": "gpgUseBatchFlag",
      "position": {
        "lineStart": 172,
        "lineEnd": 172,
        "columnStart": 2,
        "columnEnd": 82
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM php:7.3.1-fpm-alpine3.8\nLABEL maintainer Azure App Service Container Images <appsvc-images@microsoft.com>\n# ========\n# ENV vars\n# ========\n# ssh\nENV SSH_PASSWD \"root:Docker!\"\nENV SSH_PORT 2222\n#nginx\nENV NGINX_VERSION 1.14.2\nENV NGINX_LOG_DIR \"/home/LogFiles/nginx\"\n#php\nENV PHP_HOME \"/usr/local/etc/php\"\nENV PHP_CONF_DIR $PHP_HOME\nENV PHP_CONF_FILE $PHP_CONF_DIR\"/php.ini\"\n# mariadb\nENV MARIADB_DATA_DIR \"/home/data/mysql\"\nENV MARIADB_LOG_DIR \"/home/LogFiles/mysql\"\nENV MARIADB_VER 10.1.26\nENV JUDY_VER 1.0.5\n# phpmyadmin\nENV PHPMYADMIN_SOURCE \"/usr/src/phpmyadmin\"\nENV PHPMYADMIN_HOME \"/home/phpmyadmin\"\n#Web Site Home\nENV HOME_SITE \"/home/site/wwwroot\"\n# supervisor\nENV SUPERVISOR_LOG_DIR \"/home/LogFiles/supervisor\"\n#\n# --------\n# ~. tools\n# --------\nRUN set -ex \\\n    && apk update \\\n    && apk add --no-cache openssl git net-tools tcpdump tcptraceroute vim curl wget bash\\\n\t&& cd /usr/bin \\\n\t&& wget https://www.vdberg.org/~richard/tcpping \\\n\t&& chmod 777 tcpping \\\n# ========\n# install the PHP extensions we need and xdebug\n# ========\n    && apk add --no-cache                  \\\n            --virtual .build-dependencies   \\\n                $PHPIZE_DEPS                \\\n                zlib-dev                    \\\n                cyrus-sasl-dev              \\\n                git                         \\\n                autoconf                    \\\n                g++                         \\\n                libtool                     \\\n                make                        \\\n                pcre-dev                    \\    \n            tini                            \\\n            libintl                         \\\n            icu                             \\\n            icu-dev                         \\\n            libxml2-dev                     \\\n            postgresql-dev                  \\\n            freetype-dev                    \\\n            libjpeg-turbo-dev               \\\n            libpng-dev                      \\\n            gmp                             \\\n            gmp-dev                         \\\n            libmemcached-dev                \\\n            imagemagick-dev                 \\\n            libssh2                         \\\n            libssh2-dev                     \\\n            libxslt-dev \\\n    && docker-php-source extract \\\n    && pecl install xdebug-beta apcu \\\n    && docker-php-ext-install -j \"$(nproc)\" \\\n\t    mysqli \\\n\t\topcache \\\n\t\tpdo_mysql \\\n\t\tpdo_pgsql \\\n\t&& docker-php-ext-enable apcu \\\n    && docker-php-source delete \\\n    && runDeps=\"$( \\\n\t\tscanelf --needed --nobanner --format '%n#p' --recursive /usr/local \\\n\t\t\t| tr ',' '\\n' \\\n\t\t\t| sort -u \\\n\t\t\t| awk 'system(\"[ -e /usr/local/lib/\" $1 \" ]\") == 0 { next } { print \"so:\" $1 }' \\\n\t)\" \\\n\t&& apk add --virtual .drupal-phpexts-rundeps $runDeps \\\n\t&& apk del .build-dependencies \\\n\t&& docker-php-source delete \\\n\t&& mkdir -p /usr/local/php/tmp \\\n\t&& chmod 777 /usr/local/php/tmp \\\n# ------\n# ssh\n# ------\n    && apk add --no-cache openssh-server \\\n    && echo \"$SSH_PASSWD\" | chpasswd \\\n#---------------\n# openrc service\n#---------------\n   && apk add --no-cache openrc \\\n   && sed -i 's/\"cgroup_add_service/\" # cgroup_add_service/g' /lib/rc/sh/openrc-run.sh \\\n# ----------\n# Nginx\n# ----------  \n    && GPG_KEYS=B0F4253373F8F6F510D42178520A9993A1C052F8 \\\n\t&& CONFIG=\"\\\n\t\t--prefix=/etc/nginx \\\n\t\t--sbin-path=/usr/sbin/nginx \\\n\t\t--modules-path=/usr/lib/nginx/modules \\\n\t\t--conf-path=/etc/nginx/nginx.conf \\\n\t\t--error-log-path=/var/log/nginx/error.log \\\n\t\t--http-log-path=/var/log/nginx/access.log \\\n\t\t--pid-path=/var/run/nginx.pid \\\n\t\t--lock-path=/var/run/nginx.lock \\\n\t\t--http-client-body-temp-path=/var/cache/nginx/client_temp \\\n\t\t--http-proxy-temp-path=/var/cache/nginx/proxy_temp \\\n\t\t--http-fastcgi-temp-path=/var/cache/nginx/fastcgi_temp \\\n\t\t--http-uwsgi-temp-path=/var/cache/nginx/uwsgi_temp \\\n\t\t--http-scgi-temp-path=/var/cache/nginx/scgi_temp \\\n\t\t--user=nginx \\\n\t\t--group=nginx \\\n\t\t--with-http_ssl_module \\\n\t\t--with-http_realip_module \\\n\t\t--with-http_addition_module \\\n\t\t--with-http_sub_module \\\n\t\t--with-http_dav_module \\\n\t\t--with-http_flv_module \\\n\t\t--with-http_mp4_module \\\n\t\t--with-http_gunzip_module \\\n\t\t--with-http_gzip_static_module \\\n\t\t--with-http_random_index_module \\\n\t\t--with-http_secure_link_module \\\n\t\t--with-http_stub_status_module \\\n\t\t--with-http_auth_request_module \\\n\t\t--with-http_xslt_module=dynamic \\\n\t\t--with-http_image_filter_module=dynamic \\\n\t\t--with-http_geoip_module=dynamic \\\n\t\t--with-threads \\\n\t\t--with-stream \\\n\t\t--with-stream_ssl_module \\\n\t\t--with-stream_ssl_preread_module \\\n\t\t--with-stream_realip_module \\\n\t\t--with-stream_geoip_module=dynamic \\\n\t\t--with-http_slice_module \\\n\t\t--with-mail \\\n\t\t--with-mail_ssl_module \\\n\t\t--with-compat \\\n\t\t--with-file-aio \\\n\t\t--with-http_v2_module \\\n\t\" \\\n\t&& addgroup -S nginx \\\n\t&& adduser -D -S -h /var/cache/nginx -s /sbin/nologin -G nginx nginx \\\n\t&& apk add --no-cache --virtual .build-deps \\\n\t\tgcc \\\n\t\tlibc-dev \\\n\t\tmake \\\n\t\topenssl-dev \\\n\t\tpcre-dev \\\n\t\tzlib-dev \\\n\t\tlinux-headers \\\n\t\tcurl \\\n\t\tgnupg1 \\\n\t\tlibxslt-dev \\\n\t\tgd-dev \\\n\t\tgeoip-dev \\\n\t&& curl -fSL https://nginx.org/download/nginx-$NGINX_VERSION.tar.gz -o nginx.tar.gz \\\n\t&& curl -fSL https://nginx.org/download/nginx-$NGINX_VERSION.tar.gz.asc  -o nginx.tar.gz.asc \\\n\t&& export GNUPGHOME=\"$(mktemp -d)\" \\\n\t&& found=''; \\\n\tfor server in \\\n\t\tha.pool.sks-keyservers.net \\\n\t\thkp://keyserver.ubuntu.com:80 \\\n\t\thkp://p80.pool.sks-keyservers.net:80 \\\n\t\tpgp.mit.edu; \\\n\tdo \\\n\t\techo \"Fetching GPG key $GPG_KEYS from $server\"; \\\n\t\tgpg --batch --keyserver \"$server\" --keyserver-options timeout=10 --recv-keys \"$GPG_KEYS\" && found=yes && break; \\\n\tdone; \\\n\ttest -z \"$found\" && echo >&2 \"error: failed to fetch GPG key $GPG_KEYS\" && exit 1; \\\n\tgpg --batch --verify nginx.tar.gz.asc nginx.tar.gz \\\n\t&& rm -rf \"$GNUPGHOME\" nginx.tar.gz.asc \\\n\t&& mkdir -p /usr/src \\\n\t&& tar -zxC /usr/src -f nginx.tar.gz \\\n\t&& rm nginx.tar.gz \\\n\t&& cd /usr/src/nginx-$NGINX_VERSION \\\n\t&& ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" $CONFIG --with-debug \\\n\t&& make -j$(getconf _NPROCESSORS_ONLN) \\\n\t&& mv objs/nginx objs/nginx-debug \\\n\t&& mv objs/ngx_http_xslt_filter_module.so objs/ngx_http_xslt_filter_module-debug.so \\\n\t&& mv objs/ngx_http_image_filter_module.so objs/ngx_http_image_filter_module-debug.so \\\n\t&& mv objs/ngx_http_geoip_module.so objs/ngx_http_geoip_module-debug.so \\\n\t&& mv objs/ngx_stream_geoip_module.so objs/ngx_stream_geoip_module-debug.so \\\n\t&& ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" $CONFIG \\\n\t&& make -j$(getconf _NPROCESSORS_ONLN) \\\n\t&& make install \\\n\t&& rm -rf /etc/nginx/html/ \\\n\t&& mkdir /etc/nginx/conf.d/ \\\n\t&& mkdir -p /usr/share/nginx/html/ \\\n\t&& install -m644 html/index.html /usr/share/nginx/html/ \\\n\t&& install -m644 html/50x.html /usr/share/nginx/html/ \\\n\t&& install -m755 objs/nginx-debug /usr/sbin/nginx-debug \\\n\t&& install -m755 objs/ngx_http_xslt_filter_module-debug.so /usr/lib/nginx/modules/ngx_http_xslt_filter_module-debug.so \\\n\t&& install -m755 objs/ngx_http_image_filter_module-debug.so /usr/lib/nginx/modules/ngx_http_image_filter_module-debug.so \\\n\t&& install -m755 objs/ngx_http_geoip_module-debug.so /usr/lib/nginx/modules/ngx_http_geoip_module-debug.so \\\n\t&& install -m755 objs/ngx_stream_geoip_module-debug.so /usr/lib/nginx/modules/ngx_stream_geoip_module-debug.so \\\n\t&& ln -s ../../usr/lib/nginx/modules /etc/nginx/modules \\\n\t&& strip /usr/sbin/nginx* \\\n\t&& strip /usr/lib/nginx/modules/*.so \\\n\t&& rm -rf /usr/src/nginx-$NGINX_VERSION \\\n\n\t# Bring in gettext so we can get `envsubst`, then throw\n\t# the rest away. To do this, we need to install `gettext`\n\t# then move `envsubst` out of the way so `gettext` can\n\t# be deleted completely, then move `envsubst` back.\n\t&& apk add --no-cache --virtual .gettext gettext \\\n\t&& mv /usr/bin/envsubst /tmp/ \\\n\n\t&& runDeps=\"$( \\\n\t\tscanelf --needed --nobanner --format '%n#p' /usr/sbin/nginx /usr/lib/nginx/modules/*.so /tmp/envsubst \\\n\t\t\t| tr ',' '\\n' \\\n\t\t\t| sort -u \\\n\t\t\t| awk 'system(\"[ -e /usr/local/lib/\" $1 \" ]\") == 0 { next } { print \"so:\" $1 }' \\\n\t)\" \\\n\t&& apk add --no-cache --virtual .nginx-rundeps $runDeps \\\n\t&& apk del .build-deps \\\n\t&& apk del .gettext \\\n\t&& mv /tmp/envsubst /usr/local/bin/ \\\n\n\t# Bring in tzdata so users could set the timezones through the environment\n\t# variables\n\t&& apk add --no-cache tzdata \\\n\n\t# forward request and error logs to docker log collector\n\t&& ln -sf /dev/stdout /var/log/nginx/access.log \\\n\t&& ln -sf /dev/stderr /var/log/nginx/error.log \\\n\t# change default root path to $HOME_SITE\n\t&& mkdir -p /etc/nginx/conf.d \\\n    && mkdir -p ${HOME_SITE} \\\n    && chown -R www-data:www-data $HOME_SITE \\\n    && echo \"<?php phpinfo();\" > $HOME_SITE/index.php \\\n# ------\n# mariadb\n# ------\n#RUN \\\n    #export CPU=`cat /proc/cpuinfo | grep -c processor` \\\n    # Add testing repo\n    && echo http://nl.alpinelinux.org/alpine/edge/testing >> /etc/apk/repositories \\\n    # Install packages\n    && apk add --no-cache \\\n        # Install utils\n        pwgen openssl ca-certificates \\\n        # Installing needed libs\n        libstdc++ libaio gnutls ncurses-libs libcurl libxml2 boost proj4 geos \\\n        # Install MariaDB build deps\n        alpine-sdk cmake ncurses-dev gnutls-dev curl-dev libxml2-dev libaio-dev linux-headers bison boost-dev \\\n    # Update CA certs\n    && update-ca-certificates \\\n    # Add group and user for mysql\n    && addgroup -S -g 500 mysql \\\n    && adduser -S -D -H -u 500 -G mysql -g \"MySQL\" mysql \\\n    # Unpack mariadb   \n\t# http://ftp.hosteurope.de/mirror/archive.mariadb.org//mariadb-10.1.26/source/mariadb-10.1.26.tar.gz\n\t&& mkdir -p /opt/src \\\n\t&& wget -O /opt/src/mdb.tar.gz https://ftp.hosteurope.de/mirror/archive.mariadb.org//mariadb-$MARIADB_VER/source/mariadb-$MARIADB_VER.tar.gz \\\n    && mkdir -p /etc/mysql \\\n    && cd /opt/src && tar -xf mdb.tar.gz && rm mdb.tar.gz \\\n    # Download and unpack Judy (needed for OQGraph)\n    && wget -O /opt/src/judy.tar.gz https://downloads.sourceforge.net/project/judy/judy/Judy-${JUDY_VER}/Judy-${JUDY_VER}.tar.gz \\\n    && cd /opt/src && tar -xf judy.tar.gz && rm judy.tar.gz \\\n    # Build Judy\n    && cd /opt/src/judy-${JUDY_VER} \\\n    && CFLAGS=\"-O2 -s\" CXXFLAGS=\"-O2 -s\" ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" \\\n    && make \\\n    && make install \\\n    # Build maridb\n    && mkdir -p /tmp/_ \\\n    && cd /opt/src/mariadb-${MARIADB_VER} \\\n    && cmake . \\\n        -DCMAKE_BUILD_TYPE=MinSizeRel \\\n        -DCOMMON_C_FLAGS=\"-O3 -s -fno-omit-frame-pointer -pipe\" \\\n        -DCOMMON_CXX_FLAGS=\"-O3 -s -fno-omit-frame-pointer -pipe\" \\\n        -DCMAKE_INSTALL_PREFIX=/usr \\\n        -DSYSCONFDIR=/etc/mysql \\\n        -DMYSQL_DATADIR=/var/lib/mysql \\\n        -DMYSQL_UNIX_ADDR=/run/mysqld/mysqld.sock \\\n        -DDEFAULT_CHARSET=utf8 \\\n        -DDEFAULT_COLLATION=utf8_general_ci \\\n        -DENABLED_LOCAL_INFILE=ON \\\n        -DINSTALL_INFODIR=share/mysql/docs \\\n        -DINSTALL_MANDIR=/tmp/_/share/man \\\n        -DINSTALL_PLUGINDIR=lib/mysql/plugin \\\n        -DINSTALL_SCRIPTDIR=bin \\\n        # -DINSTALL_INCLUDEDIR=/tmp/_/include/mysql \\\n        -DINSTALL_DOCREADMEDIR=/tmp/_/share/mysql \\\n        -DINSTALL_SUPPORTFILESDIR=share/mysql \\\n        -DINSTALL_MYSQLSHAREDIR=share/mysql \\\n        -DINSTALL_DOCDIR=/tmp/_/share/mysql/docs \\\n        -DINSTALL_SHAREDIR=share/mysql \\\n        -DWITH_READLINE=ON \\\n        -DWITH_ZLIB=system \\\n        -DWITH_SSL=system \\\n        -DWITH_LIBWRAP=OFF \\\n        -DWITH_JEMALLOC=no \\\n        -DWITH_EXTRA_CHARSETS=complex \\\n        -DPLUGIN_ARCHIVE=STATIC \\\n        -DPLUGIN_BLACKHOLE=DYNAMIC \\\n        -DPLUGIN_INNOBASE=STATIC \\\n        -DPLUGIN_PARTITION=AUTO \\\n        -DPLUGIN_CONNECT=NO \\\n        -DPLUGIN_TOKUDB=NO \\\n        -DPLUGIN_FEEDBACK=NO \\\n        -DPLUGIN_OQGRAPH=YES \\\n        -DPLUGIN_FEDERATED=NO \\\n        -DPLUGIN_FEDERATEDX=NO \\\n        -DWITHOUT_FEDERATED_STORAGE_ENGINE=1 \\\n        -DWITHOUT_EXAMPLE_STORAGE_ENGINE=1 \\\n        -DWITHOUT_PBXT_STORAGE_ENGINE=1 \\\n        -DWITHOUT_ROCKSDB_STORAGE_ENGINE=1 \\\n        -DWITH_EMBEDDED_SERVER=OFF \\\n        -DWITH_UNIT_TESTS=OFF \\\n        -DENABLED_PROFILING=OFF \\\n        -DENABLE_DEBUG_SYNC=OFF \\\n    #&& make -j${CPU} \\\n\t&& make -j \"$(nproc)\" \\\n    # Install\n    #&& make -j${CPU} install \\\n\t&& make -j \"$(nproc)\" install \\\n    # Copy default config, and remove deprecates and not working things\n    && cp /usr/share/mysql/my-large.cnf /etc/mysql/my.cnf \\\n    && echo \"!includedir /etc/mysql/conf.d/\" >>/etc/mysql/my.cnf \\\n    && sed -i '/# Try number of CPU/d' /etc/mysql/my.cnf \\\n    && sed -i '/thread_concurrency = 8/d' /etc/mysql/my.cnf \\\n    && sed -i '/innodb_additional_mem_pool_size/d' /etc/mysql/my.cnf \\\n    && sed -i 's/log-bin=/#log-bin=/' /etc/mysql/my.cnf \\\n    && sed -i 's/binlog_format=/#binlog_format=/' /etc/mysql/my.cnf \\\n    && sed -i 's/#innodb_/innodb_/' /etc/mysql/my.cnf \\\n    # Clean everything\n    && rm -rf /opt/src \\\n    && rm -rf /tmp/_ \\\n    && rm -rf /usr/sql-bench \\\n    && rm -rf /usr/mysql-test \\\n    && rm -rf /usr/data \\\n    && rm -rf /usr/lib/python2.7 \\\n    && rm -rf /usr/bin/mysql_client_test \\\n    && rm -rf /usr/bin/mysqltest \\\n    # Remove packages\n    && apk del \\\n        ca-certificates \\\n        # Remove no more necessary build dependencies\n        alpine-sdk cmake ncurses-dev gnutls-dev curl-dev libxml2-dev libaio-dev linux-headers bison boost-dev \\\n    # Create needed directories\n    && mkdir -p /var/lib/mysql \\\n    && mkdir -p /run/mysqld \\\n    && mkdir /etc/mysql/conf.d \\\n    && mkdir -p /opt/mariadb/pre-init.d \\\n    && mkdir -p /opt/mariadb/post-init.d \\\n    && mkdir -p /opt/mariadb/pre-exec.d \\\n    # Set permissions\n    && chown -R mysql:mysql /var/lib/mysql \\\n    && chown -R mysql:mysql /run/mysqld \\\n    && chmod -R 755 /opt/mariadb \\\n# -------------\n# log rotate & supervisor\n# -------------\n\t&& apk update \\\n\t&& apk add logrotate supervisor \\\n\t# check log files once every minute, triaged by crond.\n\t&& echo \"*       *       *       *       *       sh /usr/local/bin/triage-rotate.sh\" >> /etc/crontabs/root \\\n# -------------\n# phpmyadmin\n# -------------\n    && mkdir -p $PHPMYADMIN_SOURCE \\\n# ----------\n# ~. upgrade/clean up\n# ----------\n\t&& apk upgrade \\\n\t&& rm -rf /var/cache/apk/* \\\n    && rm -rf /tmp/*\n# =========\n# Configure\n# =========\nRUN set -ex\\    \t\t\n\t##\n\t&& rm -rf /var/log/mysql \\\n\t&& ln -s $MARIADB_LOG_DIR /var/log/mysql \\\n\t##\n\t&& rm -rf /var/log/nginx \\\n\t&& ln -s $NGINX_LOG_DIR /var/log/nginx \\\n\t##\n\t&& rm -rf /var/log/supervisor \\\n\t&& ln -s $SUPERVISOR_LOG_DIR /var/log/supervisor\n# ssh\nCOPY sshd_config /etc/ssh/\n# php\nCOPY php.ini /usr/local/etc/php/php.ini\nCOPY php_conf/. /usr/local/etc/php/conf.d/\nCOPY zz-docker.conf /usr/local/etc/php-fpm.d/zz-docker.conf\n# nginx\nCOPY nginx.conf /etc/nginx/nginx.conf\nCOPY nginx_conf/. /etc/nginx/conf.d/\n# mariadb\nCOPY mariadb.cnf /etc/mysql/my.cnf\n# phpmyadmin\nCOPY phpmyadmin_src/. $PHPMYADMIN_SOURCE/\n# log rotater\nCOPY logrotate.conf /etc/logrotate.conf\nRUN chmod 444 /etc/logrotate.conf\nCOPY logrotate.d/. /etc/logrotate.d/\nRUN chmod -R 444 /etc/logrotate.d\n# supervisor\nCOPY supervisord.conf /etc/\n#\n# =====\n# final\n# =====\nCOPY local_bin/. /usr/local/bin/\nRUN chmod -R +x /usr/local/bin\nEXPOSE 2222 80\nENTRYPOINT [\"init_container.sh\"]\n"
}