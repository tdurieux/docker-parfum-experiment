{
  "startTime": 1674242537077,
  "endTime": 1674242537165,
  "originalSmells": [
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 16,
        "lineEnd": 16,
        "columnStart": 5,
        "columnEnd": 42
      }
    },
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 17,
        "lineEnd": 17,
        "columnStart": 25,
        "columnEnd": 43
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# 基于 alpine镜像构建\nFROM alpine:latest\n# 镜像维护者的信息\nLABEL MAINTAINER = 'crper@outlook.com(https://github.com/crper)'\n# 基础环境构建\n# - 更新源\n# - 安装基础环境包\n# - 不用更改默认shell了,只要进入的镜像的时候指定shell即可\n# - 最后是删除一些缓存\n# - 克隆项目\n# - 采用自动化构建不考虑国内npm源了 , 可以降低初始化失败的概率\n# !! yapi 官方的内网部署教程: https://yapi.ymfe.org/devops/index.html\nRUN apk update \\\n  && apk add --no-cache  git nodejs npm  bash vim  python python-dev gcc libcurl make\\\n  && rm -rf /var/cache/apk/* \\\n  && mkdir /yapi && cd /yapi && git clone https://github.com/YMFE/yapi.git vendors \\\n  && npm i -g node-gyp yapi-cli npm@latest \\\n  && cd /yapi/vendors && npm i --production; npm cache clean --force;\n# 工作目录\nWORKDIR /yapi/vendors\n# 配置yapi的配置文件\nCOPY config.json /yapi/\n# 复制执行脚本到容器的执行目录\nCOPY entrypoint.sh /usr/local/bin/\n# 写好的vim配置文件复制进去\nCOPY .vimrc /root/\n# 向外暴露的端口\nEXPOSE 3000\n\n# 配置入口为bash shell\nENTRYPOINT [\"entrypoint.sh\"]\n\n\n# `vim` : 编辑神器\n# `tar` : 解压缩\n# `make`: 编译依赖的\n# `gcc`:  GNU编译器套装\n# `python`: `python python-dev py-pip`这三个包包括了基本开发环境\n# `curl` 可以测试连接也能下载内容的命令行工具\n# `git` : 不用说了\n# `nodejs` : node\n# `nodejs-current-npm` : `alpine`Linux版本需要依赖这个版本,才能让`npm`识别到"
}