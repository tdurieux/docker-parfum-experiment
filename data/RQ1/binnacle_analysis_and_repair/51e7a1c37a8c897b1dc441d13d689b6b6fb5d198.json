{
  "startTime": 1674641760362,
  "endTime": 1674641760414,
  "originalSmells": [
    {
      "rule": "apkAddUseNoCache",
      "position": {
        "lineStart": 14,
        "lineEnd": 14,
        "columnStart": 4,
        "columnEnd": 38
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "####################################################\n# To build your own image:\n#    > docker build -t honosoft/vuejs-picnictable:latest -t honosoft/vuejs-picnictable:1.5.0 .\n# To run your image once it's ready:\n#    > docker run -d -p 8080:80 --name vuejs-picnictable honosoft/vuejs-picnictable\n# To push the image into your docker repository:\n#    > docker push honosoft/vuejs-picnictable:latest\n# If you wish to remove your dangling images, please do the following (not mandatory)\n#    > docker rmi $(docker images -f “dangling=true” -q)\n####################################################\n\n# Build the container with Source code compiled\nFROM mcr.microsoft.com/dotnet/core/sdk:2.2-alpine3.8 as buildenv\nWORKDIR /source\nRUN apk add --no-cache --update nodejs nodejs-npm\nCOPY *.csproj .\nRUN dotnet restore\nCOPY . .\n# Publishing will also restore (install) the npm packages.\nRUN dotnet publish -c Release -o /app/ -r linux-musl-x64\n\n# Stage 2 - Creating Image for compiled app\nFROM mcr.microsoft.com/dotnet/core/runtime:2.2-alpine3.8 as baseimage\nRUN addgroup -S coreApp && adduser -S -G coreApp coreApp\n\n# Define other environment variable if needed.\nENV ASPNETCORE_URLS=http://+:$port\n\nWORKDIR /app\nCOPY --from=buildenv /app .\nRUN chown -R coreApp:coreApp /app\n\n# Replace the application name if required.\nENTRYPOINT [\"dotnet\", \"VueJs.PicnicTable.CSharp.dll\"]\nEXPOSE $port\n"
}