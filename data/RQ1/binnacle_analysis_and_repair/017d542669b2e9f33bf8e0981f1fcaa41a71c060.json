{
  "startTime": 1674239921757,
  "endTime": 1674239922300,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 176,
        "lineEnd": 176,
        "columnStart": 7,
        "columnEnd": 113
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 162,
        "lineEnd": 162,
        "columnStart": 7,
        "columnEnd": 76
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 163,
        "lineEnd": 163,
        "columnStart": 7,
        "columnEnd": 96
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 184,
        "lineEnd": 184,
        "columnStart": 4,
        "columnEnd": 81
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 178,
        "lineEnd": 178,
        "columnStart": 4,
        "columnEnd": 46
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 70,
        "lineEnd": 70,
        "columnStart": 7,
        "columnEnd": 143
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 71,
        "lineEnd": 71,
        "columnStart": 7,
        "columnEnd": 79
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# Generated by Neurodocker version 0.4.0\n# Timestamp: 2018-06-22 09:08:27 UTC\n#\n# Thank you for using Neurodocker. If you discover any issues\n# or ways to improve this software, please submit an issue or\n# pull request on our GitHub repository:\n#\n#     https://github.com/kaczmarj/neurodocker\n\nFROM neurodebian:stretch-non-free\n\nARG DEBIAN_FRONTEND=\"noninteractive\"\n\nENV LANG=\"en_US.UTF-8\" \\\n    LC_ALL=\"en_US.UTF-8\" \\\n    ND_ENTRYPOINT=\"/neurodocker/startup.sh\"\nRUN export ND_ENTRYPOINT=\"/neurodocker/startup.sh\" \\\n    && apt-get update -qq \\\n    && apt-get install -y -q --no-install-recommends \\\n           apt-utils \\\n           bzip2 \\\n           ca-certificates \\\n           curl \\\n           locales \\\n           unzip \\\n    && apt-get clean \\\n    && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/* \\\n    && sed -i -e 's/# en_US.UTF-8 UTF-8/en_US.UTF-8 UTF-8/' /etc/locale.gen \\\n    && dpkg-reconfigure --frontend=noninteractive locales \\\n    && update-locale LANG=\"en_US.UTF-8\" \\\n    && chmod 777 /opt && chmod a+s /opt \\\n    && mkdir -p /neurodocker \\\n    && if [ ! -f \"$ND_ENTRYPOINT\" ]; then \\\n         echo '#!/usr/bin/env bash' >> \"$ND_ENTRYPOINT\" \\\n    &&   echo 'set -e' >> \"$ND_ENTRYPOINT\" \\\n    &&   echo 'if [ -n \"$1\" ]; then \"$@\"; else /usr/bin/env bash; fi' >> \"$ND_ENTRYPOINT\"; \\\n    fi \\\n    && chmod -R 777 /neurodocker && chmod a+s /neurodocker\n\nENTRYPOINT [\"/neurodocker/startup.sh\"]\n\nRUN apt-get update -qq \\\n    && apt-get install -y -q --no-install-recommends \\\n           fsl-core \\\n    && apt-get clean \\\n    && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*\n\nRUN sed -i '$isource /etc/fsl/fsl.sh' $ND_ENTRYPOINT\n\nRUN echo '{ \\\n    \\n  \"pkg_manager\": \"apt\", \\\n    \\n  \"instructions\": [ \\\n    \\n    [ \\\n    \\n      \"base\", \\\n    \\n      \"neurodebian:stretch-non-free\" \\\n    \\n    ], \\\n    \\n    [ \\\n    \\n      \"install\", \\\n    \\n      [ \\\n    \\n        \"fsl-core\" \\\n    \\n      ] \\\n    \\n    ], \\\n    \\n    [ \\\n    \\n      \"add_to_entrypoint\", \\\n    \\n      \"source /etc/fsl/fsl.sh\" \\\n    \\n    ] \\\n    \\n  ] \\\n    \\n}' > /neurodocker/neurodocker_specs.json\n\nRUN apt-get update \\\n    && apt-get -y --no-install-recommends install git g++ python python-numpy libeigen3-dev zlib1g-dev libqt4-opengl-dev libgl1-mesa-dev libfftw3-dev libtiff5-dev curl \\\n    && apt-get -y --no-install-recommends install git-core python-setuptools python-dev build-essential \\\n    && apt-get clean \\\n    && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*\n\n\n## NVIDIA CUDA Installation\n###########################\n# LICENSE:\n##########\n# Copyright (c) 2017, NVIDIA CORPORATION. All rights reserved.\n# Redistribution and use in source and binary forms, with or without\n# modification, are permitted provided that the following conditions\n# are met:\n# * Redistributions of source code must retain the above copyright\n# notice, this list of conditions and the following disclaimer.\n# * Redistributions in binary form must reproduce the above copyright\n# notice, this list of conditions and the following disclaimer in the\n# documentation and/or other materials provided with the distribution.\n# * Neither the name of NVIDIA CORPORATION nor the names of its\n# contributors may be used to endorse or promote products derived\n# from this software without specific prior written permission.\n# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS ``AS IS'' AND ANY\n# EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\n# PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR\n# CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,\n# EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,\n# PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n# PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY\n# OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\n# BASE INSTALLATION\n###################\nRUN apt-get update && apt-get install -y --no-install-recommends ca-certificates apt-transport-https && \\\n    rm -rf /var/lib/apt/lists/* && \\\n    NVIDIA_GPGKEY_SUM=d1be581509378368edeec8c1eb2958702feedf3bc3d17011adbf24efacce4ab5 && \\\n    NVIDIA_GPGKEY_FPR=ae09fe4bbd223a84b2ccfce3f60f4b3d7fa2af80 && \\\n    apt-key adv --fetch-keys https://developer.download.nvidia.com/compute/cuda/repos/ubuntu1604/x86_64/7fa2af80.pub && \\\n    apt-key adv --export --no-emit-version -a $NVIDIA_GPGKEY_FPR | tail -n +2 > cudasign.pub && \\\n    echo \"$NVIDIA_GPGKEY_SUM  cudasign.pub\" | sha256sum -c --strict - && rm cudasign.pub && \\\n    echo \"deb https://developer.download.nvidia.com/compute/cuda/repos/ubuntu1604/x86_64 /\" > /etc/apt/sources.list.d/cuda.list && \\\n    echo \"deb https://developer.download.nvidia.com/compute/machine-learning/repos/ubuntu1604/x86_64 /\" > /etc/apt/sources.list.d/nvidia-ml.list\n\nENV CUDA_VERSION 9.1.85\n\nENV CUDA_PKG_VERSION 9-1=$CUDA_VERSION-1\nRUN apt-get update && apt-get install -y --no-install-recommends \\\n    cuda-cudart-$CUDA_PKG_VERSION && \\\n    ln -s cuda-9.1 /usr/local/cuda && \\\n    rm -rf /var/lib/apt/lists/*\n\n# nvidia-docker 1.0\nLABEL com.nvidia.volumes.needed=\"nvidia_driver\"\nLABEL com.nvidia.cuda.version=\"${CUDA_VERSION}\"\n\nRUN echo \"/usr/local/nvidia/lib\" >> /etc/ld.so.conf.d/nvidia.conf && \\\n    echo \"/usr/local/nvidia/lib64\" >> /etc/ld.so.conf.d/nvidia.conf\n\nENV PATH /usr/local/nvidia/bin:/usr/local/cuda/bin:${PATH}\nENV LD_LIBRARY_PATH /usr/local/nvidia/lib:/usr/local/nvidia/lib64\n\n# nvidia-container-runtime\nENV NVIDIA_VISIBLE_DEVICES all\nENV NVIDIA_DRIVER_CAPABILITIES compute,utility\nENV NVIDIA_REQUIRE_CUDA \"cuda>=9.1\"\n\n\n# RUNTIME INSTALLATION\n######################\nENV NCCL_VERSION 2.2.12\n\nRUN apt-get update && apt-get install -y --no-install-recommends \\\n    cuda-libraries-$CUDA_PKG_VERSION \\\n    libnccl2=$NCCL_VERSION-1+cuda9.1 && \\\n    apt-mark hold libnccl2 && \\\n    rm -rf /var/lib/apt/lists/*\n\n\n# CUDNN INSTALLATION\n####################\nENV CUDNN_VERSION 7.1.2.21\nLABEL com.nvidia.cudnn.version=\"${CUDNN_VERSION}\"\nRUN apt-get update && apt-get install -y --no-install-recommends \\\n    libcudnn7=$CUDNN_VERSION-1+cuda9.1 && \\\n    apt-mark hold libcudnn7 && \\\n    rm -rf /var/lib/apt/lists/*\n\n\nRUN easy_install pip \\\n    && pip install --no-cache-dir wheel numpy scipy nilearn matplotlib scikit-image nibabel \\\n    && pip install --no-cache-dir http://download.pytorch.org/whl/cu91/torch-1.0.0-cp27-cp27mu-linux_x86_64.whl\n\n# This command does not get cached -> very slow each time when building container -> use prebuild mrtrix_RC3.tar.gz instead\n#RUN mkdir /code && cd /code \\\n#    && git clone https://github.com/MRtrix3/mrtrix3.git \\\n#    && cd mrtrix3/ \\\n#    && git checkout 3.0_RC3 \\\n#    && ./configure \\\n#    && ./build \\\n#    && ./set_path \\\n\nRUN mkdir -p ~/.tractseg \\\n    && mkdir -p /code \\\n    && curl -f -SL -o /code/mrtrix3_RC3.tar.gz https://zenodo.org/record/1415322/files/mrtrix3_RC3.tar.gz?download=1\n\nRUN tar -zxvf /code/mrtrix3_RC3.tar.gz -C code \\\n    && /code/mrtrix3/set_path && rm /code/mrtrix3_RC3.tar.gz\n\n# Uncomment if we want to rebuild the following commands (otherwise using cache)\n#RUN echo \"rebuild\"\n\nRUN pip install --no-cache-dir --upgrade https://github.com/MIC-DKFZ/TractSeg/archive/master.zip\n\nRUN download_all_pretrained_weights\n\n# Does not work -> added mrtrix to path in python\nENV PATH /code/mrtrix3/bin:$PATH\n\n# Using this we can avoid having to call TractSeg each time -> but has problems finding bet then\n#ENTRYPOINT [\"TractSeg\"]\n"
}