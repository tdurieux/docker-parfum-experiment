{
  "startTime": 1674246100627,
  "endTime": 1674246101137,
  "originalSmells": [
    {
      "rule": "wgetUseHttpsUrl",
      "position": {
        "lineStart": 88,
        "lineEnd": 88,
        "columnStart": 2,
        "columnEnd": 108
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 71,
        "lineEnd": 76,
        "columnStart": 4,
        "columnEnd": 26
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 105,
        "lineEnd": 105,
        "columnStart": 4,
        "columnEnd": 26
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 117,
        "lineEnd": 117,
        "columnStart": 4,
        "columnEnd": 22
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 120,
        "lineEnd": 120,
        "columnStart": 4,
        "columnEnd": 22
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 121,
        "lineEnd": 121,
        "columnStart": 4,
        "columnEnd": 20
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 109,
        "lineEnd": 109,
        "columnStart": 15,
        "columnEnd": 38
      }
    },
    {
      "rule": "aptGetInstallUseY",
      "position": {
        "lineStart": 9,
        "lineEnd": 62,
        "columnStart": 4,
        "columnEnd": 28
      }
    },
    {
      "rule": "aptGetInstallUseY",
      "position": {
        "lineStart": 141,
        "lineEnd": 141,
        "columnStart": 4,
        "columnEnd": 30
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 9,
        "lineEnd": 62,
        "columnStart": 4,
        "columnEnd": 28
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 141,
        "lineEnd": 141,
        "columnStart": 4,
        "columnEnd": 30
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 9,
        "lineEnd": 62,
        "columnStart": 4,
        "columnEnd": 28
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 141,
        "lineEnd": 141,
        "columnStart": 4,
        "columnEnd": 30
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# build from ubuntu\nFROM ubuntu:14.04\nMAINTAINER Kyle F <kylef@lab41.org>\n\n# configure headless install\nENV DEBIAN_FRONTEND noninteractive\n\n# install base\nRUN apt-get update && \\\n    apt-get install -y --no-install-recommends --assume-yes \\\n                        bc \\\n                        build-essential \\\n                        cmake \\\n                        curl \\\n                        dnsutils \\\n                        g++ \\\n                        g++-4.6 \\\n                        g++-4.6-multilib \\\n                        gcc-4.6 \\\n                        gcc-4.6-multilib \\\n                        gfortran \\\n                        git \\\n                        htop \\\n                        inetutils-ping \\\n                        less \\\n                        libatlas-base-dev \\\n                        libatlas-dev \\\n                        libboost-all-dev \\\n                        libffi-dev \\\n                        libfreeimage-dev \\\n                        libfreetype6 \\\n                        libfreetype6-dev \\\n                        libhdf5-serial-dev \\\n                        libjpeg-dev \\\n                        libjpeg62 \\\n                        liblapack-dev \\\n                        libleveldb-dev \\\n                        liblmdb-dev \\\n                        libopencv-dev \\\n                        libpng12-dev \\\n                        libprotobuf-dev \\\n                        libsnappy-dev \\\n                        libyaml-dev \\\n                        net-tools \\\n                        netcat \\\n                        nmap \\\n                        pkgconf \\\n                        protobuf-compiler \\\n                        python-dev \\\n                        python-lxml \\\n                        python-magic \\\n                        python-matplotlib \\\n                        python-numpy \\\n                        python-pip \\\n                        python-scipy \\\n                        socat \\\n                        software-properties-common \\\n                        sudo \\\n                        telnet \\\n                        tree \\\n                        unzip \\\n                        vim \\\n                        wget && rm -rf /var/lib/apt/lists/*;\n\n# Use gcc 4.6\nRUN update-alternatives --install /usr/bin/cc cc /usr/bin/gcc-4.6 30 && \\\n    update-alternatives --install /usr/bin/c++ c++ /usr/bin/g++-4.6 30 && \\\n    update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-4.6 30 && \\\n    update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-4.6 30\n\n# install python modules\nRUN pip install --no-cache-dir ipython \\\n                jinja2 \\\n                tornado \\\n                jsonschema \\\n                terminado \\\n                simplejson\n\n# setup ipython\nENV IPYTHONDIR /ipython\nRUN mkdir /ipython && \\\n    ipython profile create nbserver\n\n# install/configure CUDA\n# Uses .run file; .deb files install CUDA 7.5 for some reason\n# Change to the /tmp directory\nRUN cd /tmp && \\\n# Download run file\n  wget -nv https://developer.download.nvidia.com/compute/cuda/7_0/Prod/local_installers/cuda_7.0.28_linux.run && \\\n# Make the run file executable and extract\n  chmod +x cuda_*_linux.run && ./cuda_*_linux.run -extract=`pwd` && \\\n# Install CUDA drivers (silent, no kernel)\n  ./NVIDIA-Linux-x86_64-*.run -s --no-kernel-module && \\\n# Install toolkit (silent)  \n  ./cuda-linux64-rel-*.run -noprompt && \\\n# Clean up\n  rm -rf *\n\nENV PATH /usr/local/cuda/bin:$PATH\nENV LD_LIBRARY_PATH /usr/local/cuda/lib64:$LD_LIBRARY_PATH\nENV LIBRARY_PATH /usr/local/lib:/usr/local/cuda/lib:$LD_LIBRARY_PATH\nRUN echo \"/usr/local/cuda/lib64\" > /etc/ld.so.conf.d/cuda.conf && \\\n    ldconfig\n\n# download/configure/install neon 1.0.0\nRUN pip install --no-cache-dir virtualenv\nRUN cd /opt/ && \\\n    wget -nv https://github.com/NervanaSystems/neon/archive/v1.0.0.tar.gz\n# untar to a standard location\nRUN cd /opt && tar -xzvf v1.0.0.tar.gz && \\\n    mv neon-1.0.0 neon && rm v1.0.0.tar.gz\nRUN cd /opt/neon && \\\n    # Make kludgey edit to neon asserts\n    sed -i 's/(CRST, KRST)/(CRST ,)/g' neon/backends/layer_gpu.py && \\\n    make sysinstall\n\n# make some updates\nRUN pip install --no-cache-dir -U six\n\n# add gensim\nRUN pip install --no-cache-dir gensim\nRUN pip install --no-cache-dir nltk\n\n# add python\n#RUN cd /tmp && \\\n#    git clone https://github.com/maciejkula/glove-python.git && \\\n#    cd glove-python && \\\n#    python setup.py install && \\\n#    rm -rf *\n\n# install custom glove code\nRUN cd /tmp && \\\n    git clone https://github.com/Lab41/sunny-side-up.git && \\\n    cd sunny-side-up/src/glove && \\\n    python setup.py install && \\\n    rm -rf *\n\n\n# six version conflict (1.5.2 vs 1.9+)\nRUN echo \"\\ndeb http://archive.ubuntu.com/ubuntu/ vivid main\" >> /etc/apt/sources.list && \\\n    apt-get update && \\\n    apt-get install -y --no-install-recommends python-six && rm -rf /var/lib/apt/lists/*;\n# remove vivid repositories\nRUN sed -i '$d' /etc/apt/sources.list && \\\n    apt-get update\n\n# default to shell in root dir\nWORKDIR /root\nCMD [\"/bin/bash\"]\n"
}