{
  "startTime": 1674246187190,
  "endTime": 1674246187379,
  "originalSmells": [
    {
      "rule": "curlUseHttpsUrl",
      "position": {
        "lineStart": 32,
        "lineEnd": 32,
        "columnStart": 34,
        "columnEnd": 124
      }
    },
    {
      "rule": "curlUseHttpsUrl",
      "position": {
        "lineStart": 33,
        "lineEnd": 33,
        "columnStart": 5,
        "columnEnd": 190
      }
    },
    {
      "rule": "aptGetInstallUseY",
      "position": {
        "lineStart": 42,
        "lineEnd": 42,
        "columnStart": 4,
        "columnEnd": 23
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 42,
        "lineEnd": 42,
        "columnStart": 4,
        "columnEnd": 23
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 26,
        "lineEnd": 26,
        "columnStart": 61,
        "columnEnd": 80
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 42,
        "lineEnd": 42,
        "columnStart": 4,
        "columnEnd": 23
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 42,
        "lineEnd": 42,
        "columnStart": 4,
        "columnEnd": 23
      }
    }
  ],
  "repairedSmells": [
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 26,
        "lineEnd": 26,
        "columnStart": 61,
        "columnEnd": 80
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 42,
        "lineEnd": 42,
        "columnStart": 4,
        "columnEnd": 50
      }
    }
  ],
  "repairedDockerfile": "# The Dockerfile is the description of all the commands to run to assemble the image.\n# Read about all the commands here: https://docs.docker.com/engine/reference/builder/\n\n# We also have a docker-compose.yml file, which is used to build and run this Docker image.\n\n\n# Start from the official Node 8 alpine image. https://hub.docker.com/_/node/\nFROM node:8\n\n# Disable update check\nENV NO_UPDATE_NOTIFIER=true\n\n# Set the working directory for following commands.\nENV HOME=/tds-core\nWORKDIR /tds-core\n\n# Add a user so that we don't run as root:\n#  https://github.com/telusdigital/reference-architecture/blob/3ff683dd68b247ac9a3febda828105fe52cd9390/delivery/docker.md#root-vs-user-mode\nRUN set -ex && \\\n  adduser node root && \\\n  chmod g+w /\n\nRUN apt-get update\n\n# Install Google Chrome, which is necessary for the e2e tests.\nRUN curl --silent --show-error --location --fail --retry 3 --output /tmp/google-chrome-stable_current_amd64.deb https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb \\\n  && (dpkg -i /tmp/google-chrome-stable_current_amd64.deb || apt-get -fy install)  \\\n  && rm -rf /tmp/google-chrome-stable_current_amd64.deb \\\n  && sed -i 's|HERE/chrome\"|HERE/chrome\" --disable-setuid-sandbox --no-sandbox|g' \\\n  \"/opt/google/chrome/google-chrome\" \\\n  && google-chrome --version\n\nRUN export CHROMEDRIVER_RELEASE=$( curl --location --fail --retry 3 https://chromedriver.storage.googleapis.com/LATEST_RELEASE) \\\n  && curl --silent --show-error --location --fail --retry 3 --output /tmp/chromedriver_linux64.zip \"https://chromedriver.storage.googleapis.com/$CHROMEDRIVER_RELEASE/chromedriver_linux64.zip\" \\\n  && cd /tmp \\\n  && unzip chromedriver_linux64.zip \\\n  && rm -rf chromedriver_linux64.zip \\\n  && mv chromedriver /usr/local/bin/chromedriver \\\n  && chmod +x /usr/local/bin/chromedriver \\\n  && chromedriver --version\n\n# Install git, which is necessary for the install process.\nRUN apt-get install -y --no-install-recommends git && rm -rf /var/lib/apt/lists/*;\n\n# Copy only the files necessary to install dependencies into the working directory.\n# Docker builds the image in layers and caches them. Because the app files change more often than the dependencies, we\n#  copy the app files only after we install the dependencies.\nCOPY package.json package-lock.json lerna.json ./\n\n# Install our dependendies\nRUN npm ci\n\n# Remove the previously copied lerna.json.\n# This will be replaced by mounting the original under volumes. This allows for it to be properly accessed by our scripts.\nRUN rm lerna.json\n\n# Set the container's user to the newly created one.\nUSER node\n\n# The entrypoint configures the container to be run as an executable.\n# Arguments supplied on the command line will be forwarded onto the entrypoint.\nENTRYPOINT [\"npm\", \"run\", \"test:e2e-direct\", \"--\"]\n"
}