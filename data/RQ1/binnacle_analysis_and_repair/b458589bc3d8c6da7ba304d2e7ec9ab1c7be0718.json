{
  "startTime": 1674246439659,
  "endTime": 1674246439824,
  "originalSmells": [
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 7,
        "lineEnd": 7,
        "columnStart": 22,
        "columnEnd": 93
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 19,
        "lineEnd": 19,
        "columnStart": 22,
        "columnEnd": 75
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 20,
        "lineEnd": 20,
        "columnStart": 22,
        "columnEnd": 49
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 7,
        "lineEnd": 7,
        "columnStart": 22,
        "columnEnd": 93
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 19,
        "lineEnd": 19,
        "columnStart": 22,
        "columnEnd": 75
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 20,
        "lineEnd": 20,
        "columnStart": 22,
        "columnEnd": 49
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM ubuntu:18.04 as base\nMAINTAINER Niklas Schnelle <schnelle@informatik.uni-freiburg.de>\nENV LANG C.UTF-8\nENV LC_ALL C.UTF-8\nENV LC_CTYPE C.UTF-8\n\nFROM base as builder\nRUN apt-get update && apt-get install --no-install-recommends -y build-essential cmake clang-format libsparsehash-dev && rm -rf /var/lib/apt/lists/*;\nCOPY . /app/\n\n# Check formatting with the .clang-format project style\nWORKDIR /app/\nRUN misc/format-check.sh\n\nWORKDIR /app/build/\nRUN cmake -DCMAKE_BUILD_TYPE=Release -DLOGLEVEL=DEBUG -DUSE_PARALLEL=true .. && make -j $(nproc) && make test\n\nFROM base as runtime\nWORKDIR /app\nRUN apt-get update && apt-get install --no-install-recommends -y wget python3-yaml unzip curl bzip2 && rm -rf /var/lib/apt/lists/*;\nRUN apt-get update && apt-get install --no-install-recommends -y libgomp1 && rm -rf /var/lib/apt/lists/*;\n\nARG UID=1000\nRUN groupadd -r qlever && useradd --no-log-init -r -u $UID -g qlever qlever && chown qlever:qlever /app\nUSER qlever\nENV PATH=/app/:$PATH\n\nCOPY --from=builder /app/build/*Main /app/src/web/* /app/\nCOPY --from=builder /app/e2e/* /app/e2e/\nENV PATH=/app/:$PATH\n\nUSER qlever\nEXPOSE 7001\nVOLUME [\"/input\", \"/index\"]\n\nENV INDEX_PREFIX index\n# Need the shell to get the INDEX_PREFIX envirionment variable\nENTRYPOINT [\"/bin/sh\", \"-c\", \"exec ServerMain -i \\\"/index/${INDEX_PREFIX}\\\" -p 7001 \\\"$@\\\"\", \"--\"]\nCMD [\"-t\"]\n\n# docker build -t qlever-<name> .\n# # When running with user namespaces you may need to make the index folder accessible\n# # to e.g. the \"nobody\" user\n# chmod -R o+rw ./index\n# # For an existing index copy it into the ./index folder and make sure to either name it\n# # index.* or\n# # set the envirionment variable \"INDEX_PREFIX\" during `docker run` using `-e INDEX_PREFIX=<prefix>`\n# # To build an index run a bash inside the container as follows\n# docker run -it --rm --entrypoint bash -v \"<path_to_input>:/input\" -v \"$(pwd)/index:/index\" qlever-<name>\n# # Then inside that shell IndexBuilder is in the path and can be used like\n# # described in the README.md with the files in /input\n# # To run a server use\n# docker run -d -p 7001:7001 -e \"INDEX_PREFIX=<prefix>\" -v \"$(pwd)/index:/index\" --name qlever-<name> qlever-<name>\n\n"
}