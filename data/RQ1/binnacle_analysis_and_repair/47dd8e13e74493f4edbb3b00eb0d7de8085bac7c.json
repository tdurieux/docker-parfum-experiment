{
  "startTime": 1674243132689,
  "endTime": 1674243133435,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 61,
        "lineEnd": 61,
        "columnStart": 5,
        "columnEnd": 95
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 73,
        "lineEnd": 73,
        "columnStart": 12,
        "columnEnd": 88
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 86,
        "lineEnd": 86,
        "columnStart": 8,
        "columnEnd": 124
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 87,
        "lineEnd": 87,
        "columnStart": 8,
        "columnEnd": 145
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 97,
        "lineEnd": 97,
        "columnStart": 13,
        "columnEnd": 96
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 101,
        "lineEnd": 101,
        "columnStart": 13,
        "columnEnd": 89
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 192,
        "lineEnd": 192,
        "columnStart": 7,
        "columnEnd": 149
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 206,
        "lineEnd": 206,
        "columnStart": 7,
        "columnEnd": 127
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 229,
        "lineEnd": 229,
        "columnStart": 7,
        "columnEnd": 148
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 239,
        "lineEnd": 239,
        "columnStart": 7,
        "columnEnd": 130
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 119,
        "lineEnd": 151,
        "columnStart": 8,
        "columnEnd": 22
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 156,
        "lineEnd": 187,
        "columnStart": 7,
        "columnEnd": 22
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 62,
        "lineEnd": 62,
        "columnStart": 5,
        "columnEnd": 27
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 74,
        "lineEnd": 74,
        "columnStart": 12,
        "columnEnd": 34
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 207,
        "lineEnd": 207,
        "columnStart": 7,
        "columnEnd": 77
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 230,
        "lineEnd": 230,
        "columnStart": 7,
        "columnEnd": 92
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 240,
        "lineEnd": 240,
        "columnStart": 7,
        "columnEnd": 82
      }
    },
    {
      "rule": "apkAddUseNoCache",
      "position": {
        "lineStart": 237,
        "lineEnd": 237,
        "columnStart": 7,
        "columnEnd": 65
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "#\n# Licensed to the Apache Software Foundation (ASF) under one or more\n# contributor license agreements.  See the NOTICE file distributed with\n# this work for additional information regarding copyright ownership.\n# The ASF licenses this file to You under the Apache License, Version 2.0\n# (the \"License\"); you may not use this file except in compliance with\n# the License.  You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n#\n\n# apigateway\n#\n# VERSION               1.13.6.1\n#\n# From https://hub.docker.com/_/alpine/\n#\n\nFROM alpine:3.9\n\n# Busybox's ash shell supports pipefail, which is useful for tarballs\nSHELL [ \"/bin/ash\", \"-o\", \"pipefail\", \"-c\"]\n\n# install dependencies\nRUN apk update && \\\n    apk add \\\n    gcc tar libtool zlib perl tzdata \\\n    ca-certificates wget make musl-dev openssl-dev openssl pcre-dev g++ zlib-dev curl python \\\n    perl-test-longstring perl-list-moreutils perl-http-message geoip-dev dumb-init jq \\\n    && update-ca-certificates \\\n    && rm -rf /var/cache/apk/*\n\n# openresty build\nENV OPENRESTY_VERSION=1.13.6.2 \\\n    PCRE_VERSION=8.37 \\\n    TEST_NGINX_VERSION=0.24 \\\n    OPM_VERSION=0.0.3 \\\n    LUA_RESTY_HTTP_VERSION=0.10 \\\n    LUA_RESTY_IPUTILS_VERSION=0.2.1 \\\n    LUA_RESTY_STRING_VERSION=0.09 \\\n    LUA_RESTY_LRUCACHE_VERSION=0.06 \\\n    LUA_RESTY_CJOSE_VERSION=0.4 \\\n    NETURL_LUA_VERSION=0.9-1 \\\n    CJOSE_VERSION=0.5.1 \\\n    LD_LIBRARY_PATH=/usr/local/lib \\\n    _prefix=/usr/local \\\n    _exec_prefix=/usr/local \\\n    _localstatedir=/var \\\n    _sysconfdir=/etc \\\n    _sbindir=/usr/local/sbin\n\nRUN if [ x`uname -m` = xs390x ]; then \\\n         echo \"Building LuaJIT for s390x\" \\\n\t && mkdir -p /tmp/luajit \\\n\t && cd /tmp/luajit \\\n\t\t&& curl -f -k -L https://api.github.com/repos/linux-on-ibm-z/LuaJIT/tarball/v2.1 > luajit.tar.gz \\\n\t\t&& tar -zxf luajit.tar.gz \\\n\t\t&& cd linux-on-ibm-z-LuaJIT-* \\\n\t\t&& make install \\\n\t\t&& cd /tmp \\\n\t\t&& rm -rf /tmp/luajit \\\n     ; rm luajit.tar.gzfi\n\nRUN if [ x`uname -m` = xppc64le ]; then \\\n         echo \"Building LuaJIT for ppc64le\" \\\n         && mkdir /tmp/luajit  \\\n         && cd /tmp/luajit \\\n         && curl -f -k -L https://api.github.com/repos/PPC64/LuaJIT/tarball > luajit.tar.gz \\\n         && tar -zxf luajit.tar.gz \\\n         && cd PPC64-LuaJIT-* \\\n         && make && make install \\\n         && rm -rf /tmp/luajit \\\n     ; rm luajit.tar.gzfi\n\nRUN echo \" ... adding Openresty, NGINX and PCRE\" \\\n     && mkdir -p /tmp/api-gateway \\\n     && readonly NPROC=$(grep -c ^processor /proc/cpuinfo 2>/dev/null || 1) \\\n     && echo \"using up to $NPROC threads\" \\\n\n     && cd /tmp/api-gateway/ \\\n     && curl -f -k -L https://ftp.pcre.org/pub/pcre/pcre-${PCRE_VERSION}.tar.gz -o /tmp/api-gateway/pcre-${PCRE_VERSION}.tar.gz \\\n     && curl -f -k -L https://openresty.org/download/openresty-${OPENRESTY_VERSION}.tar.gz -o /tmp/api-gateway/openresty-${OPENRESTY_VERSION}.tar.gz \\\n     && tar -zxf ./openresty-${OPENRESTY_VERSION}.tar.gz \\\n     && tar -zxf ./pcre-${PCRE_VERSION}.tar.gz \\\n     && cd /tmp/api-gateway/openresty-${OPENRESTY_VERSION} \\\n     && case \"$(uname -m)\" in \\\n        aarch64 \\\n          luajitdir=\"\" \\\n          pcrejit=\"--with-pcre-jit\" \\\n          ; echo \" ... Patching ngx_lua and LuaJIT modules for ARM64 ... \" \\\n          && rm -rf ./bundle/ngx_lua-* \\\n          && curl -f -k -L https://github.com/openresty/lua-nginx-module/archive/v0.10.14rc3.tar.gz \\\n            | tar -zxf - -C ./bundle \\\n          && mv ./bundle/lua-nginx-module-0.10.14rc3 ./bundle/ngx_lua-0.10.14rc3 \\\n          && rm -rf ./bundle/LuaJIT-* \\\n          && curl -f -k -L https://github.com/openresty/luajit2/archive/v2.1-20181029.tar.gz \\\n            | tar -zxf - -C ./bundle \\\n          && mv ./bundle/luajit2-2.1-20181029 ./bundle/LuaJIT-2.2.1-20181029 \\\n          ;; \\\n        s390x) \\\n          luajitdir=\"=/usr/local/\" \\\n          pcrejit=\"\" \\\n          ;; \\\n        ppc64le) \\\n          luajitdir=\"=/usr/local/\" \\\n          pcrejit=\"--with-pcre-jit\" \\\n          ;; \\\n        *) \\\n          luajitdir=\"\" \\\n          pcrejit=\"--with-pcre-jit\" \\\n          ;; \\\n       esac \\\n     && echo \"        - building debugging version of the api-gateway ... \" \\\n     && ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" \\\n            --prefix=${_exec_prefix}/api-gateway \\\n            --sbin-path=${_sbindir}/api-gateway-debug \\\n            --conf-path=${_sysconfdir}/api-gateway/api-gateway.conf \\\n            --error-log-path=${_localstatedir}/log/api-gateway/error.log \\\n            --http-log-path=${_localstatedir}/log/api-gateway/access.log \\\n            --pid-path=${_localstatedir}/run/api-gateway.pid \\\n            --lock-path=${_localstatedir}/run/api-gateway.lock \\\n            --with-pcre=../pcre-${PCRE_VERSION}/ ${pcrejit} \\\n            --with-stream \\\n            --with-stream_ssl_module \\\n            --with-http_ssl_module \\\n            --with-http_stub_status_module \\\n            --with-http_realip_module \\\n            --with-http_addition_module \\\n            --with-http_sub_module \\\n            --with-http_dav_module \\\n            --with-http_geoip_module \\\n            --with-http_gunzip_module \\\n            --with-http_gzip_static_module \\\n            --with-http_auth_request_module \\\n            --with-http_random_index_module \\\n            --with-http_secure_link_module \\\n            --with-http_degradation_module \\\n            --with-http_auth_request_module \\\n            --with-http_v2_module \\\n            --with-luajit${luajitdir} \\\n            --without-http_ssi_module \\\n            --without-http_userid_module \\\n            --without-http_uwsgi_module \\\n            --without-http_scgi_module \\\n            --with-debug \\\n            -j${NPROC} \\\n    && make -j${NPROC} \\\n    && make install \\\n\n    && echo \"        - building regular version of the api-gateway ... \" \\\n    && ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" \\\n            --prefix=${_exec_prefix}/api-gateway \\\n            --sbin-path=${_sbindir}/api-gateway \\\n            --conf-path=${_sysconfdir}/api-gateway/api-gateway.conf \\\n            --error-log-path=${_localstatedir}/log/api-gateway/error.log \\\n            --http-log-path=${_localstatedir}/log/api-gateway/access.log \\\n            --pid-path=${_localstatedir}/run/api-gateway.pid \\\n            --lock-path=${_localstatedir}/run/api-gateway.lock \\\n            --with-pcre=../pcre-${PCRE_VERSION}/ ${pcrejit} \\\n            --with-stream \\\n            --with-stream_ssl_module \\\n            --with-http_ssl_module \\\n            --with-http_stub_status_module \\\n            --with-http_realip_module \\\n            --with-http_addition_module \\\n            --with-http_sub_module \\\n            --with-http_dav_module \\\n            --with-http_geoip_module \\\n            --with-http_gunzip_module \\\n            --with-http_gzip_static_module \\\n            --with-http_auth_request_module \\\n            --with-http_random_index_module \\\n            --with-http_secure_link_module \\\n            --with-http_degradation_module \\\n            --with-http_auth_request_module \\\n            --with-http_v2_module \\\n            --with-luajit${luajitdir} \\\n            --without-http_ssi_module \\\n            --without-http_userid_module \\\n            --without-http_uwsgi_module \\\n            --without-http_scgi_module \\\n            -j${NPROC} \\\n    && make -j${NPROC} \\\n    && make install \\\n\n    && echo \"        - adding Nginx Test support\" \\\n    && curl -f -k -L https://github.com/openresty/test-nginx/archive/v${TEST_NGINX_VERSION}.tar.gz -o ${_prefix}/test-nginx-${TEST_NGINX_VERSION}.tar.gz \\\n    && cd ${_prefix} \\\n    && tar -xf ${_prefix}/test-nginx-${TEST_NGINX_VERSION}.tar.gz \\\n    && rm ${_prefix}/test-nginx-${TEST_NGINX_VERSION}.tar.gz \\\n    && cp -r ${_prefix}/test-nginx-0.24/inc/* /usr/local/share/perl5/site_perl/ \\\n\n    && ln -s ${_sbindir}/api-gateway-debug ${_sbindir}/nginx \\\n    && cp /tmp/api-gateway/openresty-${OPENRESTY_VERSION}/build/install ${_prefix}/api-gateway/bin/resty-install \\\n    && apk del g++ gcc make \\\n    && rm -rf /var/cache/apk/* \\\n    && rm -rf /tmp/api-gateway\n\nRUN echo \" ... installing opm...\" \\\n    && mkdir -p /tmp/api-gateway \\\n    && curl -f -k -L https://github.com/openresty/opm/archive/v${OPM_VERSION}.tar.gz -o /tmp/api-gateway/opm-${OPM_VERSION}.tar.gz \\\n    && tar -xf /tmp/api-gateway/opm-${OPM_VERSION}.tar.gz -C /tmp/api-gateway \\\n    && cd /tmp/api-gateway/opm-${OPM_VERSION} \\\n    && cp bin/opm ${_prefix}/api-gateway/bin \\\n    && cd ${_prefix}/api-gateway \\\n    && mkdir -p site/manifest site/pod \\\n    && cd site \\\n    && ( [ -x ../lualib ] || ln -s ../lualib ./ ) \\\n    && ln -s ${_prefix}/api-gateway/bin/opm /usr/bin/opm \\\n    && ln -s ${_prefix}/api-gateway/bin/resty /usr/bin/resty \\\n    && rm -rf /tmp/api-gateway && rm /tmp/api-gateway/opm-${OPM_VERSION}.tar.gz\n\n\nRUN echo \" ... installing opm packages ... \" \\\n    && opm get pintsized/lua-resty-http=${LUA_RESTY_HTTP_VERSION} \\\n               hamishforbes/lua-resty-iputils=${LUA_RESTY_IPUTILS_VERSION} \\\n               openresty/lua-resty-string=${LUA_RESTY_STRING_VERSION} \\\n               openresty/lua-resty-lrucache=${LUA_RESTY_LRUCACHE_VERSION} \\\n               taylorking/lua-resty-cjose=${LUA_RESTY_CJOSE_VERSION} \\\n               taylorking/lua-resty-rate-limit\n\nRUN echo \" ... installing neturl.lua ... \" \\\n    && mkdir -p /tmp/api-gateway \\\n    && curl -f -k -L https://github.com/golgote/neturl/archive/${NETURL_LUA_VERSION}.tar.gz -o /tmp/api-gateway/neturl.lua-${NETURL_LUA_VERSION}.tar.gz \\\n    && tar -xf /tmp/api-gateway/neturl.lua-${NETURL_LUA_VERSION}.tar.gz -C /tmp/api-gateway/ \\\n    && export LUA_LIB_DIR=${_prefix}/api-gateway/lualib \\\n    && cd /tmp/api-gateway/neturl-${NETURL_LUA_VERSION} \\\n    && cp lib/net/url.lua ${LUA_LIB_DIR} \\\n    && rm -rf /tmp/api-gateway && rm /tmp/api-gateway/neturl.lua-${NETURL_LUA_VERSION}.tar.gz\n\nRUN echo \" ... installing cjose ... \" \\\n    && apk add --no-cache automake autoconf git gcc make jansson jansson-dev \\\n    && mkdir -p /tmp/api-gateway \\\n    && curl -f -L -k https://github.com/cisco/cjose/archive/${CJOSE_VERSION}.tar.gz -o /tmp/api-gateway/cjose-${CJOSE_VERSION}.tar.gz \\\n    && tar -xf /tmp/api-gateway/cjose-${CJOSE_VERSION}.tar.gz -C /tmp/api-gateway/ \\\n    && cd /tmp/api-gateway/cjose-${CJOSE_VERSION} \\\n    && sh configure \\\n    && make && make install \\\n    && rm -rf /tmp/api-gateway && rm /tmp/api-gateway/cjose-${CJOSE_VERSION}.tar.gz\n\nENV CONFIG_SUPERVISOR_VERSION 1.0.1-RC1\nCOPY build_config_supervisor.sh /tmp/build_config_supervisor.sh\nRUN sh +x /tmp/build_config_supervisor.sh\n\nCOPY init.sh /etc/init-container.sh\n# add the default configuration for the Gateway\nCOPY . /etc/api-gateway\nRUN adduser -S nginx-api-gateway \\\n    && addgroup -S nginx-api-gateway\n\nEXPOSE 80 8080 8423 9000\n\nENTRYPOINT [\"/usr/bin/dumb-init\", \"--\"]\nCMD [\"/etc/init-container.sh\"]\n"
}