{
  "startTime": 1674238977978,
  "endTime": 1674238978318,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 28,
        "lineEnd": 28,
        "columnStart": 4,
        "columnEnd": 101
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 72,
        "lineEnd": 72,
        "columnStart": 4,
        "columnEnd": 49
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 82,
        "lineEnd": 82,
        "columnStart": 4,
        "columnEnd": 65
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 76,
        "lineEnd": 76,
        "columnStart": 4,
        "columnEnd": 73
      }
    },
    {
      "rule": "sha256sumEchoOneSpaces",
      "position": {
        "lineStart": 66,
        "lineEnd": 84,
        "columnStart": 4,
        "columnEnd": 30
      }
    },
    {
      "rule": "sha256sumEchoOneSpaces",
      "position": {
        "lineStart": 66,
        "lineEnd": 74,
        "columnStart": 4,
        "columnEnd": 30
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 14,
        "lineEnd": 22,
        "columnStart": 4,
        "columnEnd": 13
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM ubuntu:16.04\n\n# The Rust toolchain to use when building our image\nARG TOOLCHAIN=stable\nARG TARGET=x86_64-unknown-linux-musl\nARG OPENSSL_ARCH=linux-x86_64\n\nENV RUST_MUSL_CROSS_TARGET=$TARGET\n\n# Make sure we have basic dev tools for building C libraries.  Our goal\n# here is to support the musl-libc builds and Cargo builds needed for a\n# large selection of the most popular crates.\n#\nRUN apt-get update && \\\n    apt-get install --no-install-recommends -y \\\n        build-essential \\\n        cmake \\\n        curl \\\n        file \\\n        git \\\n        sudo \\\n        xutils-dev \\\n        unzip \\\n        && \\\n    apt-get clean && rm -rf /var/lib/apt/lists/*\n\nADD config.mak /tmp/config.mak\nRUN cd /tmp && \\\n    curl -f -Lsq -o musl-cross-make.zip https://github.com/richfelker/musl-cross-make/archive/master.zip && \\\n    unzip -q musl-cross-make.zip && \\\n    rm musl-cross-make.zip && \\\n    mv musl-cross-make-master musl-cross-make && \\\n    cp /tmp/config.mak /tmp/musl-cross-make/config.mak && \\\n    cd /tmp/musl-cross-make && \\\n    TARGET=$TARGET make install > /tmp/musl-cross-make.log && \\\n    ln -s /usr/local/musl/bin/$TARGET-strip /usr/local/musl/bin/musl-strip && \\\n    cd /tmp && \\\n    rm -rf /tmp/musl-cross-make /tmp/musl-cross-make.log\n\nRUN mkdir -p /home/rust/libs /home/rust/src\n\n# Set up our path with all our binary directories, including those for the\n# musl-gcc toolchain and for our Rust toolchain.\nENV PATH=/root/.cargo/bin:/usr/local/musl/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin\nENV TARGET_CC=$TARGET-gcc\nENV TARGET_CXX=$TARGET-g++\nENV TARGET_C_INCLUDE_PATH=/usr/local/musl/$TARGET/include/\n\n# Install our Rust toolchain and the `musl` target.  We patch the\n# command-line we pass to the installer so that it won't attempt to\n# interact with the user or fool around with TTYs.  We also set the default\n# `--target` to musl so that our users don't need to keep overriding it\n# manually.\n# Chmod 755 is set for root directory to allow access execute binaries in /root/.cargo/bin (azure piplines create own user).\nRUN chmod 755 /root/ && \\\n    curl https://sh.rustup.rs -sqSf | \\\n    sh -s -- -y --default-toolchain $TOOLCHAIN && \\\n    rustup target add $TARGET\nRUN echo \"[build]\\ntarget = \\\"$TARGET\\\"\\n\\n[target.$TARGET]\\nlinker = \\\"$TARGET-gcc\\\"\\n\" > /root/.cargo/config\n\n# We'll build our libraries in subdirectories of /home/rust/libs.  Please\n# clean up when you're done.\nWORKDIR /home/rust/libs\n\n# Build a static library version of OpenSSL using musl-libc.  This is\n# needed by the popular Rust `hyper` crate.\nRUN export CC=$TARGET_CC && \\\n    export C_INCLUDE_PATH=$TARGET_C_INCLUDE_PATH && \\\n    echo \"Building    zlib\" && \\\n    VERS=1.2.11 && \\\n    CHECKSUM=c3e5e9fdd5004dcb542feda5ee4f0ff0744628baf8ed2dd5d66f8ca1197cb1a1 && \\\n    cd /home/rust/libs && \\\n    curl -f -sqLO https://zlib.net/zlib-$VERS.tar.gz && \\\n    echo \"$CHECKSUM    zlib-$VERS.tar.gz\" > checksums.txt && \\\n    sha256sum -c checksums.txt && \\\n    tar xzf zlib-$VERS.tar.gz && cd zlib-$VERS && \\\n    ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --static --archs=\"-fPIC\" --prefix=/usr/local/musl/$TARGET && \\\n    make && sudo make install && \\\n    cd .. && rm -rf zlib-$VERS.tar.gz zlib-$VERS checksums.txt && \\\n    echo \"Building  OpenSSL\" && \\\n    VERS=1.0.2q && \\\n    CHECKSUM=5744cfcbcec2b1b48629f7354203bc1e5e9b5466998bbccc5b5fcde3b18eb684 && \\\n    curl -f -sqO https://www.openssl.org/source/openssl-$VERS.tar.gz && \\\n    echo \"$CHECKSUM  openssl-$VERS.tar.gz\" > checksums.txt && \\\n    sha256sum -c checksums.txt && \\\n    tar xzf openssl-$VERS.tar.gz && cd openssl-$VERS && \\\n    ./Configure $OPENSSL_ARCH -fPIC --prefix=/usr/local/musl/$TARGET && \\\n    make depend && \\\n    make && sudo make install && \\\n    cd .. && rm -rf openssl-$VERS.tar.gz openssl-$VERS checksums.txt\n\nENV OPENSSL_DIR=/usr/local/musl/$TARGET/ \\\n    OPENSSL_INCLUDE_DIR=/usr/local/musl/$TARGET/include/ \\\n    DEP_OPENSSL_INCLUDE=/usr/local/musl/$TARGET/include/ \\\n    OPENSSL_LIB_DIR=/usr/local/musl/$TARGET/lib/ \\\n    OPENSSL_STATIC=1\n\n# Remove docs and more stuff not needed in this images to make them smaller\nRUN rm -rf /root/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/share/\n\n# Expect our source code to live in /home/rust/src\nWORKDIR /home/rust/src\n"
}