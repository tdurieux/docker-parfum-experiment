{
  "startTime": 1674239613383,
  "endTime": 1674239615072,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 278,
        "lineEnd": 278,
        "columnStart": 4,
        "columnEnd": 130
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 451,
        "lineEnd": 451,
        "columnStart": 4,
        "columnEnd": 102
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 231,
        "lineEnd": 231,
        "columnStart": 4,
        "columnEnd": 18
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 240,
        "lineEnd": 240,
        "columnStart": 4,
        "columnEnd": 61
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 242,
        "lineEnd": 242,
        "columnStart": 4,
        "columnEnd": 27
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 248,
        "lineEnd": 248,
        "columnStart": 25,
        "columnEnd": 38
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 418,
        "lineEnd": 418,
        "columnStart": 4,
        "columnEnd": 29
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 444,
        "lineEnd": 444,
        "columnStart": 4,
        "columnEnd": 25
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 446,
        "lineEnd": 446,
        "columnStart": 4,
        "columnEnd": 37
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 446,
        "lineEnd": 446,
        "columnStart": 41,
        "columnEnd": 78
      }
    },
    {
      "rule": "mkdirUsrSrcThenRemove",
      "position": {
        "lineStart": 155,
        "lineEnd": 155,
        "columnStart": 1,
        "columnEnd": 19
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 130,
        "lineEnd": 130,
        "columnStart": 4,
        "columnEnd": 126
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 145,
        "lineEnd": 145,
        "columnStart": 4,
        "columnEnd": 33
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 173,
        "lineEnd": 211,
        "columnStart": 4,
        "columnEnd": 53
      }
    },
    {
      "rule": "yumInstallRmVarCacheYum",
      "position": {
        "lineStart": 508,
        "lineEnd": 508,
        "columnStart": 4,
        "columnEnd": 57
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 14,
        "lineEnd": 14,
        "columnStart": 1,
        "columnEnd": 33
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 128,
        "lineEnd": 128,
        "columnStart": 4,
        "columnEnd": 40
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 143,
        "lineEnd": 143,
        "columnStart": 4,
        "columnEnd": 28
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 154,
        "lineEnd": 154,
        "columnStart": 1,
        "columnEnd": 35
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 424,
        "lineEnd": 424,
        "columnStart": 4,
        "columnEnd": 30
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 6,
        "lineEnd": 6,
        "columnStart": 4,
        "columnEnd": 48
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 49,
        "lineEnd": 119,
        "columnStart": 4,
        "columnEnd": 19
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 123,
        "lineEnd": 123,
        "columnStart": 22,
        "columnEnd": 79
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 263,
        "lineEnd": 270,
        "columnStart": 4,
        "columnEnd": 6
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 272,
        "lineEnd": 272,
        "columnStart": 4,
        "columnEnd": 41
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 394,
        "lineEnd": 405,
        "columnStart": 4,
        "columnEnd": 10
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 469,
        "lineEnd": 469,
        "columnStart": 4,
        "columnEnd": 25
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 481,
        "lineEnd": 481,
        "columnStart": 4,
        "columnEnd": 65
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 272,
        "lineEnd": 272,
        "columnStart": 4,
        "columnEnd": 41
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 6,
        "lineEnd": 6,
        "columnStart": 4,
        "columnEnd": 48
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 49,
        "lineEnd": 119,
        "columnStart": 4,
        "columnEnd": 19
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 123,
        "lineEnd": 123,
        "columnStart": 22,
        "columnEnd": 79
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 263,
        "lineEnd": 270,
        "columnStart": 4,
        "columnEnd": 6
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 272,
        "lineEnd": 272,
        "columnStart": 4,
        "columnEnd": 41
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 394,
        "lineEnd": 405,
        "columnStart": 4,
        "columnEnd": 10
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 469,
        "lineEnd": 469,
        "columnStart": 4,
        "columnEnd": 25
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 481,
        "lineEnd": 481,
        "columnStart": 4,
        "columnEnd": 65
      }
    }
  ],
  "repairedSmells": [
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 154,
        "lineEnd": 154,
        "columnStart": 1,
        "columnEnd": 35
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 272,
        "lineEnd": 272,
        "columnStart": 4,
        "columnEnd": 65
      }
    }
  ],
  "repairedDockerfile": "ARG GO_VERSION=1.12.1\n\n###### Agent Build Image ########\nFROM ubuntu:16.04 as agent-builder\n\nRUN apt update && \\\n    apt install --no-install-recommends -y curl wget pkg-config parallel && rm -rf /var/lib/apt/lists/*;\n\nARG GO_VERSION\nARG TARGET_ARCH\n\nENV PATH=$PATH:/usr/local/go/bin\nRUN cd /tmp &&\\\n    wget https://storage.googleapis.com/golang/go${GO_VERSION}.linux-${TARGET_ARCH}.tar.gz && \\\n\ttar -C /usr/local -xf go*.tar.gz && rm go*.tar.gz\n\nENV GOPATH=/go\nWORKDIR /usr/src/signalfx-agent\n\nCOPY vendor/ ./vendor/\n# Precompile and cache vendor compilation outputs so that building the app is\n# faster.  A bunch of these fail because go get pulls in more than necessary, but\n# a lot do compile\nRUN cd vendor && find . -type d -not -empty | grep -v '\\btest' | parallel go install -mod vendor {} 2>/dev/null || true\n\nCOPY cmd/ ./cmd/\nCOPY scripts/make-templates scripts/make-versions ./scripts/\nCOPY scripts/collectd-template-to-go ./scripts/\nCOPY Makefile .\nCOPY go.mod go.sum ./\nCOPY internal/ ./internal/\n\nARG collectd_version=\"\"\nARG agent_version=\"latest\"\nARG GOOS=\"linux\"\n\nRUN AGENT_VERSION=${agent_version} COLLECTD_VERSION=${collectd_version} make signalfx-agent &&\\\n    mv signalfx-agent /usr/bin/signalfx-agent\n\n###### Collectd builder image ######\nFROM ubuntu:16.04 as collectd\n\nARG TARGET_ARCH\nARG PYTHON_VERSION=2.7.16\n\nENV DEBIAN_FRONTEND noninteractive\n\nRUN sed -i -e '/^deb-src/d' /etc/apt/sources.list &&\\\n    apt-get update && \\\n    apt-get install --no-install-recommends -y \\\n      curl \\\n      dpkg \\\n      net-tools \\\n      openjdk-8-jdk \\\n      python-software-properties \\\n\t\t\tsoftware-properties-common \\\n      wget \\\n      autoconf \\\n      automake \\\n      autotools-dev \\\n      bison \\\n      build-essential \\\n      debhelper \\\n      debian-archive-keyring \\\n      debootstrap \\\n      devscripts \\\n      dh-make \\\n      dpatch \\\n      fakeroot \\\n      flex \\\n      gcc \\\n      git-core \\\n      iptables-dev \\\n      libatasmart-dev \\\n      libcurl4-openssl-dev \\\n      libdbi0-dev \\\n      libdistro-info-perl \\\n      libesmtp-dev \\\n      libexpat1-dev \\\n      libffi-dev \\\n      libganglia1-dev \\\n      libgcrypt11-dev \\\n      libglib2.0-dev \\\n      libldap2-dev \\\n      libltdl-dev \\\n      libmemcached-dev \\\n      libmicrohttpd-dev \\\n      libmnl-dev \\\n      libmodbus-dev \\\n      libnotify-dev \\\n      liboping-dev \\\n      libow-dev \\\n      libpcap-dev \\\n      libperl-dev \\\n      libpq-dev \\\n      libprotobuf-c0-dev \\\n      librabbitmq-dev \\\n      librdkafka-dev \\\n      librrd-dev \\\n      libsensors4-dev \\\n      libsnmp-dev \\\n      libssl-dev \\\n      libtool \\\n      libudev-dev \\\n      libvarnishapi-dev \\\n      libvirt-dev \\\n      libxml2-dev \\\n      libyajl-dev \\\n      lsb-release \\\n      pbuilder \\\n      pkg-config \\\n      po-debconf \\\n      protobuf-c-compiler \\\n      python-dev \\\n      python-pip \\\n      python-virtualenv \\\n      quilt \\\n      zlib1g-dev \\\n      libdbus-glib-1-dev \\\n      libdbus-1-dev && rm -rf /var/lib/apt/lists/*;\n\nRUN wget https://dev.mysql.com/get/mysql-apt-config_0.8.12-1_all.deb && \\\n    dpkg -i mysql-apt-config_0.8.12-1_all.deb && \\\n    apt-get update && apt-get install --no-install-recommends -y libmysqlclient-dev libcurl4-gnutls-dev && rm -rf /var/lib/apt/lists/*;\n\nENV PYTHONHOME=/opt/python\nRUN wget -O /tmp/Python-${PYTHON_VERSION}.tgz https://www.python.org/ftp/python/${PYTHON_VERSION}/Python-${PYTHON_VERSION}.tgz &&\\\n    cd /tmp &&\\\n    tar xzf Python-${PYTHON_VERSION}.tgz && \\\n    cd Python-${PYTHON_VERSION} && \\\n    ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --prefix=$PYTHONHOME --enable-shared --enable-ipv6 --enable-unicode=ucs4 --with-system-ffi --with-system-expat && \\\n    make && make install && rm Python-${PYTHON_VERSION}.tgz\n\nRUN echo \"$PYTHONHOME/lib\" > /etc/ld.so.conf.d/python.conf && \\\n    ldconfig $PYTHONHOME/lib\nENV PATH=$PYTHONHOME/bin:$PATH\n\nRUN wget -O /tmp/get-pip.py https://bootstrap.pypa.io/get-pip.py && \\\n    python /tmp/get-pip.py 'pip==18.0'\n\n# Compile patchelf statically from source\nRUN cd /tmp &&\\\n    wget https://nixos.org/releases/patchelf/patchelf-0.10/patchelf-0.10.tar.gz &&\\\n    tar -xf patchelf*.tar.gz &&\\\n    cd patchelf-0.10 && \\\n    ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" LDFLAGS=\"-static\" && \\\n    make && \\\n    make install && rm patchelf*.tar.gz\n\nARG collectd_version=\"\"\nARG collectd_commit=\"\"\n\nRUN cd /tmp &&\\\n    wget https://github.com/signalfx/collectd/archive/${collectd_commit}.tar.gz &&\\\n\ttar -xvf ${collectd_commit}.tar.gz &&\\\n\tmkdir -p /usr/src/ && \\\n\tmv collectd-${collectd_commit}* /usr/src/collectd && rm -rf /usr/src/\n\n# Hack to get our custom version compiled into collectd\nRUN echo \"#!/bin/bash\" > /usr/src/collectd/version-gen.sh &&\\\n    echo \"printf \\${collectd_version//-/.}\" >> /usr/src/collectd/version-gen.sh\n\nWORKDIR /usr/src/collectd\n\nARG extra_cflags=\"-O2\"\nENV CFLAGS \"-Wall -fPIC $extra_cflags\"\nENV CXXFLAGS $CFLAGS\n\n# In the bundle, the java plugin so will live in /lib/collectd and the JVM\n# exists at /jvm\nENV JAVA_LDFLAGS \"-Wl,-rpath -Wl,\\$\\$\\ORIGIN/../../jvm/jre/lib/${TARGET_ARCH}/server\"\n\nRUN autoreconf -vif && \\\n    ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" \\\n        --prefix=\"/usr\" \\\n        --localstatedir=\"/var\" \\\n        --sysconfdir=\"/etc/collectd\" \\\n        --enable-all-plugins \\\n        --disable-apple_sensors \\\n        --disable-aquaero \\\n        --disable-barometer \\\n        --disable-dpdkstat \\\n        --disable-dpdkevents \\\n        --disable-gps \\\n        --disable-grpc \\\n        --disable-intel_pmu \\\n        --disable-intel_rdt \\\n        --disable-lpar \\\n        --disable-lua \\\n        --disable-lvm \\\n        --disable-mic \\\n        --disable-mqtt \\\n        --disable-netapp \\\n        --disable-nut \\\n        --disable-ipmi \\\n        --disable-oracle \\\n        --disable-pf \\\n        --disable-redis \\\n        --disable-routeros \\\n        --disable-sigrok \\\n        --disable-tape \\\n        --disable-tokyotyrant \\\n        --disable-turbostat \\\n        --disable-write_mongodb \\\n        --disable-write_redis \\\n        --disable-write_riemann \\\n        --disable-xmms \\\n        --disable-zone \\\n        --without-libstatgrab \\\n        --disable-silent-rules \\\n        --disable-static \\\n        PYTHON_CONFIG=\"$PYTHONHOME/bin/python-config\"\n\n# Compile all of collectd first, including plugins\nRUN make -j`nproc` &&\\\n    make install\n\nCOPY scripts/collect-libs /opt/collect-libs\nRUN /opt/collect-libs /opt/deps /usr/sbin/collectd /usr/lib/collectd/\n# For some reason libvarnishapi doesn't properly depend on libm, so make it\n# right.\nRUN patchelf --add-needed libm-2.23.so /opt/deps/libvarnishapi.so.1.0.4\n\n# Delete all compiled python to save space\nRUN find $PYTHONHOME -name \"*.pyc\" -o -name \"*.pyo\" | xargs rm\n# We don't support compiling extension modules so don't need this directory\nRUN rm -rf $PYTHONHOME/lib/python2.7/config-*-linux-gnu\n\n###### Python Plugin Image ######\nFROM collectd as python-plugins\n\nRUN pip install --no-cache-dir yq && \\\n    wget -O /usr/bin/jq https://github.com/stedolan/jq/releases/download/jq-1.5/jq-linux64 && \\\n    chmod +x /usr/bin/jq\n\n# Mirror the same dir structure that exists in the original source\nCOPY scripts/get-collectd-plugins.py /opt/scripts/\nCOPY scripts/get-collectd-plugins-requirements.txt /opt/\nCOPY collectd-plugins.yaml /opt/\n\nRUN pip install --no-cache-dir -r /opt/get-collectd-plugins-requirements.txt\n\nRUN pip install --no-cache-dir dbus-python\n\nRUN mkdir -p /opt/collectd-python &&\\\n    python /opt/scripts/get-collectd-plugins.py /opt/collectd-python\n\nCOPY python/ /opt/sfxpython/\nRUN cd /opt/sfxpython && pip install --no-cache-dir .\n\nRUN pip list\n\n# Delete all compiled python to save space\nRUN find $PYTHONHOME -name \"*.pyc\" -o -name \"*.pyo\" | xargs rm\n# We don't support compiling extension modules so don't need this directory\nRUN rm -rf $PYTHONHOME/lib/python2.7/config-*-linux-gnu\n\n####### Extra packages that don't make sense to pull down in any other stage ########\nFROM ubuntu:16.04 as extra-packages\n\nARG TARGET_ARCH\n\nRUN apt update && \\\n    apt install --no-install-recommends -y \\\n\t\t\tcurl \\\n\t\t\thost \\\n\t\t\tiproute2 \\\n\t\t\tnetcat \\\n\t\t\tnetcat.openbsd \\\n\t\t\trealpath \\\n\t\t\tvim && rm -rf /var/lib/apt/lists/*;\n\nRUN apt install --no-install-recommends -y openjdk-8-jre-headless && \\\n    mkdir -p /opt/root && \\\n    cp -rL /usr/lib/jvm/java-8-openjdk-${TARGET_ARCH} /opt/root/jvm && \\\n\trm -rf /opt/root/jvm/docs && \\\n\trm -rf /opt/root/jvm/man && rm -rf /var/lib/apt/lists/*;\n\nRUN curl -f -Lo /opt/signalfx_types_db https://raw.githubusercontent.com/signalfx/integrations/master/collectd-java/signalfx_types_db\n\nCOPY scripts/collect-libs /opt/collect-libs\n\nENV useful_bins=\" \\\n  /bin/bash \\\n  /bin/cat \\\n  /bin/cp \\\n  /bin/date \\\n  /bin/echo \\\n  /bin/grep \\\n  /bin/kill \\\n  /bin/ln \\\n  /bin/ls \\\n  /bin/mkdir \\\n  /bin/mount \\\n  /bin/nc \\\n  /bin/ps \\\n  /bin/rm \\\n  /bin/sh \\\n  /bin/ss \\\n  /bin/umount \\\n  /usr/bin/curl \\\n  /usr/bin/dirname \\\n  /usr/bin/find \\\n  /usr/bin/host \\\n  /usr/bin/realpath \\\n  /usr/bin/tail \\\n  /usr/bin/vim \\\n  \"\nRUN mkdir -p /opt/root/lib &&\\\n    /opt/collect-libs /opt/root/lib ${useful_bins}\n\nRUN mkdir -p /opt/root/bin &&\\\n    cp $useful_bins /opt/root/bin\n\n# Gather all our bins/libs and set rpath on the properly.  Interpreter has to\n# be set at runtime (or in the final docker stage for docker runs).\nCOPY --from=collectd /usr/local/bin/patchelf /usr/bin/\n\n# Gather Python dependencies\nCOPY --from=python-plugins /opt/python/lib/python2.7 /opt/root/lib/python2.7\nCOPY --from=python-plugins /opt/python/lib/libpython2.7.so.1.0 /opt/root/lib\nCOPY --from=python-plugins /opt/python/bin/python /opt/root/bin/python\n\n# Gather compiled collectd plugin libraries\nCOPY --from=collectd /usr/sbin/collectd /opt/root/bin/collectd\nCOPY --from=collectd /opt/deps/ /opt/root/lib/\nCOPY --from=collectd /usr/lib/collectd/*.so /opt/root/lib/collectd/\n\nCOPY scripts/patch-rpath /usr/bin/\nRUN patch-rpath /opt/root\n\n###### Final Agent Image #######\n# This build stage is meant as the final target when running the agent in a\n# container environment (e.g. directly with Docker or on K8s).  The stages\n# below this are special-purpose.\nFROM scratch as final-image\n\nCMD [\"/bin/signalfx-agent\"]\n\nCOPY --from=collectd /etc/ssl/certs/ca-certificates.crt /etc/ssl/certs/ca-certificates.crt\nCOPY --from=collectd /etc/nsswitch.conf /etc/nsswitch.conf\nCOPY --from=collectd /usr/local/bin/patchelf /bin/\n\n# Pull in the Linux dynamic link loader at a fixed path across all\n# architectures.  Binaries will later be patched to use this interpreter\n# natively.\nCOPY --from=extra-packages /lib/*-linux-gnu/ld-2.23.so /bin/ld-linux.so\n\n# Java dependencies\nCOPY --from=extra-packages /opt/root/jvm/ /jvm\n\nCOPY --from=extra-packages /opt/root/lib/ /lib/\nCOPY --from=extra-packages /opt/root/bin/ /bin/\n\n# Some extra non-binary collectd resources\nCOPY --from=collectd /usr/share/collectd/postgresql_default.conf /postgresql_default.conf\nCOPY --from=collectd /usr/share/collectd/types.db /types.db\nCOPY --from=collectd /usr/share/collectd/java/ /collectd-java/\nCOPY --from=extra-packages /opt/signalfx_types_db /collectd-java/\n\n# Pull in Python collectd plugin scripts\nCOPY --from=python-plugins /opt/collectd-python/ /collectd-python/\n\nCOPY scripts/umount-hostfs-non-persistent /bin/umount-hostfs-non-persistent\nCOPY deployments/docker/agent.yaml /etc/signalfx/agent.yaml\nCOPY scripts/patch-interpreter /bin/\nRUN [\"/bin/ld-linux.so\", \"/bin/sh\", \"/bin/patch-interpreter\", \"/\"]\n\nRUN mkdir -p /run/collectd /var/run/ &&\\\n    ln -s /var/run/signalfx-agent /run &&\\\n    ln -s /bin/signalfx-agent /bin/agent-status\n\nCOPY --from=agent-builder /usr/bin/signalfx-agent /bin/signalfx-agent\n\nCOPY whitelist.json /lib/whitelist.json\n\nWORKDIR /\n\n\n# Workaround to utilize the global GO_VERSION argument\n# since \"COPY --from\" doesn't support variables.\nFROM golang:${GO_VERSION}-stretch as golang-ignore\n\n\n####### Dev Image ########\n# This is an image to facilitate development of the agent.  It installs all of\n# the build tools for building collectd and the go agent, along with some other\n# useful utilities.  The agent image is copied from the final-image stage to\n# the /bundle dir in here and the SIGNALFX_BUNDLE_DIR is set to point to that.\nFROM ubuntu:18.04 as dev-extras\n\nARG TARGET_ARCH\n\nRUN apt update && \\\n    apt install --no-install-recommends -y \\\n      curl \\\n      git \\\n      inotify-tools \\\n      iproute2 \\\n      jq \\\n      net-tools \\\n      python3-pip \\\n      socat \\\n      sudo \\\n      vim \\\n      wget && rm -rf /var/lib/apt/lists/*;\n\n\nENV SIGNALFX_BUNDLE_DIR=/bundle \\\n    TEST_SERVICES_DIR=/usr/src/signalfx-agent/test-services \\\n    AGENT_BIN=/usr/src/signalfx-agent/signalfx-agent \\\n    PYTHONPATH=/usr/src/signalfx-agent/python \\\n    AGENT_VERSION=latest \\\n    BUILD_TIME=2017-01-25T13:17:17-0500 \\\n    GOOS=linux \\\n    LC_ALL=C.UTF-8 \\\n    LANG=C.UTF-8\n\nRUN pip3 install --no-cache-dir ipython ipdb\n\n# Install helm\nARG HELM_VERSION=v2.13.0\nWORKDIR /tmp\nRUN wget -O helm.tar.gz https://storage.googleapis.com/kubernetes-helm/helm-${HELM_VERSION}-linux-${TARGET_ARCH}.tar.gz && \\\n    tar -zxvf /tmp/helm.tar.gz && \\\n    mv linux-${TARGET_ARCH}/helm /usr/local/bin/helm && \\\n    chmod a+x /usr/local/bin/helm && rm /tmp/helm.tar.gz\n\nWORKDIR /usr/src/signalfx-agent\nCMD [\"/bin/bash\"]\nENV PATH=$PATH:/usr/local/go/bin:/go/bin GOPATH=/go\n\nCOPY --from=golang-ignore /usr/local/go/ /usr/local/go\n\nRUN curl -fsSL get.docker.com -o /tmp/get-docker.sh &&\\\n    sh /tmp/get-docker.sh\n\nRUN go get -u golang.org/x/lint/golint &&\\\n    if [ `uname -m` != \"aarch64\" ]; then go get github.com/derekparker/delve/cmd/dlv; fi &&\\\n    go get github.com/tebeka/go2xunit &&\\\n    curl -sfL https://install.goreleaser.com/github.com/golangci/golangci-lint.sh | sh -s -- -b $(go env GOPATH)/bin v1.16.0\n\n# Get integration test deps in here\nCOPY python/setup.py /tmp/\nRUN pip3 install --no-cache-dir -e /tmp/\nCOPY tests/requirements.txt /tmp/\nRUN pip3 install --no-cache-dir --upgrade pip==9.0.1 && pip3 install --no-cache-dir -r /tmp/requirements.txt\nRUN wget -O /usr/bin/gomplate https://github.com/hairyhenderson/gomplate/releases/download/v3.4.0/gomplate_linux-${TARGET_ARCH} &&\\\n    chmod +x /usr/bin/gomplate\n\nRUN cd /tmp && \\\n    curl -f -LO https://storage.googleapis.com/kubernetes-release/release/v1.14.1/bin/linux/amd64/kubectl && \\\n    chmod +x ./kubectl && \\\n    mv ./kubectl /usr/bin/kubectl\n\nRUN ln -s /usr/bin/python3 /usr/bin/python &&\\\n    ln -s /usr/bin/pip3 /usr/bin/pip\n\nCOPY --from=final-image /bin/signalfx-agent ./signalfx-agent\n\nCOPY --from=final-image / /bundle/\nCOPY ./ ./\n\nRUN /bundle/bin/patch-interpreter /bundle\n\n####### Pandoc Converter ########\nFROM ubuntu:16.04 as pandoc-converter\n\nRUN apt update && \\\n    apt install --no-install-recommends -y pandoc && rm -rf /var/lib/apt/lists/*;\n\nCOPY docs/signalfx-agent.1.man /tmp/signalfx-agent.1.man\n# Create the man page for the agent\nRUN mkdir /docs &&\\\n    pandoc --standalone --to man /tmp/signalfx-agent.1.man -o /docs/signalfx-agent.1\n\n\n####### Debian Packager #######\nFROM debian:9 as debian-packager\n\nRUN apt update && \\\n    apt install --no-install-recommends -y dh-make devscripts dh-systemd apt-utils awscli && rm -rf /var/lib/apt/lists/*;\n\nARG agent_version=\"latest\"\nWORKDIR /opt/signalfx-agent_${agent_version}\n\nENV DEBEMAIL=\"support+deb@signalfx.com\" DEBFULLNAME=\"SignalFx, Inc.\"\n\nCOPY packaging/deb/debian/ ./debian\nCOPY packaging/etc/init.d/signalfx-agent.debian ./debian/signalfx-agent.init\nCOPY packaging/etc/systemd/signalfx-agent.service ./debian/signalfx-agent.service\nCOPY packaging/etc/systemd/signalfx-agent.tmpfile ./debian/signalfx-agent.tmpfile\nCOPY packaging/etc/logrotate.d/signalfx-agent.conf ./debian/signalfx-agent.logrotate\nCOPY packaging/deb/make-changelog ./make-changelog\nCOPY packaging/deb/add-output-to-repo ./add-output-to-repo\nCOPY packaging/deb/devscripts.conf /etc/devscripts.conf\nCOPY --from=pandoc-converter /docs/signalfx-agent.1 ./signalfx-agent.1\n\nCOPY packaging/etc/agent.yaml ./agent.yaml\n\nCOPY --from=final-image / ./signalfx-agent/\n# Remove the agent config so it doesn't confuse people in the final output.\nRUN rm -rf ./signalfx-agent/etc/signalfx\n\n\n###### RPM Packager #######\nFROM fedora:27 as rpm-packager\n\nRUN yum install -y rpmdevtools createrepo rpm-sign awscli && rm -rf /var/cache/yum\n\nWORKDIR /root/rpmbuild\n\nCOPY packaging/etc/agent.yaml ./SOURCES/agent.yaml\nCOPY packaging/etc/init.d/signalfx-agent.rhel ./SOURCES/signalfx-agent.init\nCOPY packaging/etc/systemd/ ./SOURCES/systemd/\nCOPY packaging/rpm/signalfx-agent.spec ./SPECS/signalfx-agent.spec\nCOPY packaging/rpm/add-output-to-repo ./add-output-to-repo\nCOPY --from=pandoc-converter /docs/signalfx-agent.1 ./SOURCES/signalfx-agent.1\n\nCOPY --from=final-image / ./SOURCES/signalfx-agent/\n# Remove the agent config so it doesn't confuse people in the final output.\nRUN rm -rf ./SOURCES/signalfx-agent/etc/signalfx\n"
}