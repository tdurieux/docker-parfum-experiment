{
  "startTime": 1674246674281,
  "endTime": 1674246674583,
  "originalSmells": [
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 65,
        "lineEnd": 65,
        "columnStart": 4,
        "columnEnd": 35
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# Adapted from https://github.com/gw0/docker-keras-full\n# docker-debian-cuda - Debian 9 with CUDA Toolkit\n\nFROM gw000/keras:2.0.2-gpu\nMAINTAINER gw0 [http://gw.tnode.com/] <gw.2017@ena.one>\n\n# install py2-th-cpu (Python 2, Theano, CPU/GPU)\nARG THEANO_VERSION=0.9.0\nENV THEANO_FLAGS='device=cpu,floatX=float32'\nRUN pip --no-cache-dir install git+https://github.com/Theano/Theano.git@rel-${THEANO_VERSION}\n\n# install py3-tf-cpu/gpu (Python 3, TensorFlow, CPU/GPU)\nRUN apt-get update -qq \\\n && apt-get install --no-install-recommends -y \\\n    # install python 3\n    python3 \\\n    python3-dev \\\n    python3-pip \\\n    python3-setuptools \\\n    python3-virtualenv \\\n    pkg-config \\\n    # requirements for numpy\n    libopenblas-base \\\n    python3-numpy \\\n    python3-scipy \\\n    # requirements for keras\n    python3-h5py \\\n    python3-yaml \\\n    python3-pydot \\\n && apt-get clean \\\n && rm -rf /var/lib/apt/lists/*\n\nARG TENSORFLOW_VERSION=1.0.1\nARG TENSORFLOW_DEVICE=gpu\nARG TENSORFLOW_APPEND=_gpu\nRUN pip3 --no-cache-dir install https://storage.googleapis.com/tensorflow/linux/${TENSORFLOW_DEVICE}/tensorflow${TENSORFLOW_APPEND}-${TENSORFLOW_VERSION}-cp35-cp35m-linux_x86_64.whl\n\nARG KERAS_VERSION=2.0.2\nENV KERAS_BACKEND=tensorflow\nRUN pip3 --no-cache-dir install git+https://github.com/fchollet/keras.git@${KERAS_VERSION}\n\n# install py3-th-cpu/gpu (Python 3, Theano, CPU/GPU)\nARG THEANO_VERSION=0.9.0\nENV THEANO_FLAGS='device=cpu,floatX=float32'\nRUN pip3 --no-cache-dir install git+https://github.com/Theano/Theano.git@rel-${THEANO_VERSION}\n\n# install additional debian packages\nRUN apt-get update -qq \\\n && apt-get install --no-install-recommends -y \\\n    # system tools\n    less \\\n    procps \\\n    vim-tiny \\\n    # build dependencies\n    build-essential \\\n    libffi-dev \\\n && apt-get clean \\\n && rm -rf /var/lib/apt/lists/*\n\n# Copy application to container\nRUN mkdir -p app\nWORKDIR /app\nCOPY . /app\n\n# Install requirements\nRUN pip install --no-cache-dir -r requirements.txt\n\n# Expose default port and start app\nEXPOSE 8080\nENTRYPOINT [\"python\", \"run_demo.py\"]\n"
}