{
  "startTime": 1674240052104,
  "endTime": 1674240052339,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 27,
        "lineEnd": 27,
        "columnStart": 2,
        "columnEnd": 64
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 29,
        "lineEnd": 29,
        "columnStart": 2,
        "columnEnd": 51
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 9,
        "lineEnd": 13,
        "columnStart": 2,
        "columnEnd": 11
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 26,
        "lineEnd": 26,
        "columnStart": 2,
        "columnEnd": 56
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 32,
        "lineEnd": 32,
        "columnStart": 2,
        "columnEnd": 27
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 9,
        "lineEnd": 13,
        "columnStart": 2,
        "columnEnd": 11
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 26,
        "lineEnd": 26,
        "columnStart": 2,
        "columnEnd": 56
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 32,
        "lineEnd": 32,
        "columnStart": 2,
        "columnEnd": 27
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 33,
        "lineEnd": 33,
        "columnStart": 2,
        "columnEnd": 49
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# The code for the build image should be idendical with the code in\n# Dockerfile.django to use the caching mechanism of Docker.\n\nFROM python:2 as build\nWORKDIR /app\nRUN \\\n  apt-get -y update && \\\n  apt-get -y --no-install-recommends install \\\n    dnsutils \\\n    mysql-client \\\n    postgresql-client \\\n    xmlsec1 \\\n    && \\\n  apt-get clean && \\\n  rm -rf /var/lib/apt/lists && \\\n  true && rm -rf /var/lib/apt/lists/*;\nCOPY requirements.txt ./\nRUN pip wheel --wheel-dir=/tmp/wheels -r ./requirements.txt\n\nFROM build AS collectstatic\n\nUSER root\nRUN \\\n  apt-get -y update && \\\n  apt-get -y --no-install-recommends install apt-transport-https ca-certificates && \\\n  curl -f -sSL https://deb.nodesource.com/gpgkey/nodesource.gpg.key | apt-key add - && \\\n  echo \"deb https://deb.nodesource.com/node_11.x stretch main\" | tee /etc/apt/sources.list.d/nodesource.list && \\\n  curl -f -sS https://dl.yarnpkg.com/debian/pubkey.gpg | apt-key add - && \\\n  echo \"deb https://dl.yarnpkg.com/debian/ stable main\" | tee /etc/apt/sources.list.d/yarn.list && \\\n  apt-get -y update && \\\n  apt-get -y --no-install-recommends install nodejs && \\\n  apt-get -y install --no-install-recommends yarn && \\\n  apt-get clean && \\\n  rm -rf /var/lib/apt/lists && \\\n  true && rm -rf /var/lib/apt/lists/*;\n\nRUN pip install \\\n\t--no-cache-dir \\\n\t--no-index \\\n  --find-links=/tmp/wheels \\\n\t-r ./requirements.txt\n\nCOPY components/ ./components/\nCOPY manage.py ./\nCOPY dojo/ ./dojo/\nRUN \\\n  cp dojo/settings/settings.dist.py dojo/settings/settings.py\nRUN \\\n  cd components && \\\n  yarn && \\\n  cd .. && \\\n  python manage.py collectstatic && \\\n  true\n\nFROM nginx\nCOPY --from=collectstatic /app/static/ /usr/share/nginx/html/static/\nCOPY wsgi_params nginx/nginx.conf /etc/nginx/\nCOPY docker/entrypoint-nginx.sh /\nRUN \\\n  chmod -R g=u /var/cache/nginx && \\\n  chmod -R g=u /var/run && \\\n  true\nENV \\\n  DD_UWSGI_PASS=\"uwsgi_server\" \\\n  DD_UWSGI_HOST=\"uwsgi\" \\\n  DD_UWSGI_PORT=\"3031\"\nUSER 1001\nENTRYPOINT [\"/entrypoint-nginx.sh\"]\n"
}