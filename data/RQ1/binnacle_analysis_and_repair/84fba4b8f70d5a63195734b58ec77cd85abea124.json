{
  "startTime": 1674236485731,
  "endTime": 1674236486036,
  "originalSmells": [
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 37,
        "lineEnd": 56,
        "columnStart": 0,
        "columnEnd": 3
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 37,
        "lineEnd": 56,
        "columnStart": 0,
        "columnEnd": 3
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM nvidia/cuda:8.0-cudnn5-devel\n\n#################################################################################################################\n#           Global\n#################################################################################################################\n# apt-get to skip any interactive post-install configuration steps with DEBIAN_FRONTEND=noninteractive and apt-get install -y\n\nENV LANG=C.UTF-8 LC_ALL=C.UTF-8\nARG DEBIAN_FRONTEND=noninteractive\n\n#################################################################################################################\n#           Global Path Setting\n#################################################################################################################\n\nENV CUDA_HOME /usr/local/cuda\nENV LD_LIBRARY_PATH ${LD_LIBRARY_PATH}:${CUDA_HOME}/lib64\nENV LD_LIBRARY_PATH ${LD_LIBRARY_PATH}:/usr/local/lib\n\nENV OPENCL_LIBRARIES /usr/local/cuda/lib64\nENV OPENCL_INCLUDE_DIR /usr/local/cuda/include\n\n#################################################################################################################\n#           TINI\n#################################################################################################################\n\n# Install tini\nENV TINI_VERSION v0.14.0\nADD https://github.com/krallin/tini/releases/download/${TINI_VERSION}/tini /tini\nRUN chmod +x /tini\n\n#################################################################################################################\n#           SYSTEM\n#################################################################################################################\n# update: downloads the package lists from the repositories and \"updates\" them to get information on the newest versions of packages and their\n# dependencies. It will do this for all repositories and PPAs.\n\nRUN apt-get update && \\\n apt-get install --no-install-recommends -y \\\nbuild-essential \\\ncurl \\\nwget \\\nbzip2 \\\nca-certificates \\\nlibglib2.0-0 \\\nlibxext6 \\\nlibsm6 \\\nlibxrender1 \\\ngit \\\nvim \\\nmercurial \\\nsubversion \\\ncmake \\\nlibboost-dev \\\nlibboost-system-dev \\\nlibboost-filesystem-dev \\\ngcc \\\ng++ && rm -rf /var/lib/apt/lists/*;\n\n# Add OpenCL ICD files for LightGBM\nRUN mkdir -p /etc/OpenCL/vendors && \\\n    echo \"libnvidia-opencl.so.1\" > /etc/OpenCL/vendors/nvidia.icd\n\n#################################################################################################################\n#           CONDA\n#################################################################################################################\n\nARG CONDA_DIR=/opt/conda\n# add to path\nENV PATH $CONDA_DIR/bin:$PATH\n\n# Install miniconda\nRUN echo 'export PATH=/opt/conda/bin:$PATH' > /etc/profile.d/conda.sh && \\\n    wget --quiet https://repo.continuum.io/miniconda/Miniconda2-latest-Linux-x86_64.sh -O ~/miniconda.sh && \\\n    /bin/bash ~/miniconda.sh -b -p /opt/conda && \\\n    rm ~/miniconda.sh\n\nRUN conda create -q -n py2 python=2.7 mkl numpy scipy scikit-learn jupyter notebook ipython pandas matplotlib\nRUN conda create -q -n py3 python=3.5 mkl numpy scipy scikit-learn jupyter notebook ipython pandas matplotlib\n\n#################################################################################################################\n#           LightGBM\n#################################################################################################################\n\nRUN cd /usr/local/src && mkdir lightgbm && cd lightgbm && \\\n    git clone --recursive https://github.com/microsoft/LightGBM && \\\n    cd LightGBM && mkdir build && cd build && \\\n    cmake -DUSE_GPU=1 -DOpenCL_LIBRARY=/usr/local/cuda/lib64/libOpenCL.so -DOpenCL_INCLUDE_DIR=/usr/local/cuda/include/ .. && \\ \n    make OPENCL_HEADERS=/usr/local/cuda-8.0/targets/x86_64-linux/include LIBOPENCL=/usr/local/cuda-8.0/targets/x86_64-linux/lib\n\nENV PATH /usr/local/src/lightgbm/LightGBM:${PATH}\n\nRUN /bin/bash -c \"source activate py2 && cd /usr/local/src/lightgbm/LightGBM/python-package && python setup.py install --precompile && source deactivate\"\nRUN /bin/bash -c \"source activate py3 && cd /usr/local/src/lightgbm/LightGBM/python-package && python setup.py install --precompile && source deactivate\"\n\n#################################################################################################################\n#           System CleanUp\n#################################################################################################################\n# apt-get autoremove: used to remove packages that were automatically installed to satisfy dependencies for some package and that are no more needed.\n# apt-get clean: removes the aptitude cache in /var/cache/apt/archives. You'd be amazed how much is in there! the only drawback is that the packages\n# have to be downloaded again if you reinstall them.\n\nRUN apt-get autoremove -y && apt-get clean && \\\n    rm -rf /var/lib/apt/lists/* && \\\n    conda clean -i -l -t -y\n\n#################################################################################################################\n#           JUPYTER\n#################################################################################################################\n\n# password: keras\n# password key: --NotebookApp.password='sha1:98b767162d34:8da1bc3c75a0f29145769edc977375a373407824'\n\n# Add a notebook profile.\nRUN mkdir -p -m 700 /root/.jupyter/ && \\\n    echo \"c.NotebookApp.ip = '*'\" >> /root/.jupyter/jupyter_notebook_config.py\n\nVOLUME /home\nWORKDIR /home\n\n# IPython\nEXPOSE 8888\n\nENTRYPOINT [ \"/tini\", \"--\" ]\nCMD /bin/bash -c \"source activate py3 && jupyter notebook --allow-root --no-browser --NotebookApp.password='sha1:98b767162d34:8da1bc3c75a0f29145769edc977375a373407824' && source deactivate\"\n"
}