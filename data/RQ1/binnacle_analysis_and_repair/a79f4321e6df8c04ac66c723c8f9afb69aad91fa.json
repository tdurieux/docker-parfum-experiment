{
  "startTime": 1674250851218,
  "endTime": 1674250851345,
  "originalSmells": [
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 31,
        "lineEnd": 31,
        "columnStart": 4,
        "columnEnd": 40
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM python:3.7-alpine3.9 AS base\n\nENV HOMEAPP=/django\nENV PROJECT_NAME={{cookiecutter.django_project_name}}\nENV PATH=$PATH:$HOMEAPP/.local/bin\nENV PYTHONPATH=$HOMEAPP:$PROJECT_NAME\n\n# Python packages build dependencies\nRUN apk add --no-cache --virtual .build-dependencies \\\n    # Essentials\n    gcc musl-dev openssl-dev \\\n    # Postgres python client (psycopg2) build dependency\n    postgresql-dev \\\n    # Pillow / PIL build dependencies\n    freetype-dev jpeg-dev libwebp-dev tiff-dev libpng-dev lcms2-dev \\\n    openjpeg-dev zlib-dev libxslt-dev libxml2-dev libffi-dev \\\n    # Python packages run dependencies\n    && apk add --no-cache \\\n    # Pillow / PIL\n    freetype jpeg libwebp tiff libpng lcms2 openjpeg zlib libxslt libxml2 libffi \\\n    # Localization\n    gettext \\\n    # Postgres python client\n    libpq\n\nWORKDIR $HOMEAPP/\n\n# The other files will be added after installing the base packages\n# This is to enforce caching layers\nCOPY ./requirements/base.txt ./requirements/base.txt\n\nRUN pip install --no-cache-dir -r requirements/base.txt \\\n    && rm -R /root/.cache/pip \\\n    && apk del .build-dependencies\n\n# Copy the rest of requirement files\n# They should be installed in their own stages\nCOPY ./requirements/ ./requirements/\n\nCOPY manage.py ./\n\n# Using a non-privileged user to own our code and things related to the project\nRUN adduser -S -h $HOMEAPP django \\\n    # if you opt to use media-root/ and/or static-root\n    # you should consider to use a volume\n    # and in production beware of replicas and node placement\n    # storage is a pain in distributed environment\n    # that's why you probably be using S3 at least for media objects\n    # but this can be useful locally\n    && mkdir -p media-root/ static-root/ \\\n    && chown -R django:nogroup $HOMEAPP/\n\n\n## PRODUCTION STAGE\nFROM base AS production\n\nUSER django\n\nENV DJANGO_SETTINGS_MODULE=$PROJECT_NAME.config.production\n\nADD  --chown=django:nogroup https://raw.githubusercontent.com/douglasmiranda/lab/master/docker-secrets-as-env/docker-secrets-to-env-var.sh ./\nCOPY --chown=django:nogroup ./deployment/django/*.sh ./\nRUN chmod +x django-entrypoint.sh\n\nENTRYPOINT [\"/django/django-entrypoint.sh\"]\n# Our code\nCOPY --chown=django:nogroup ./$PROJECT_NAME $HOMEAPP/$PROJECT_NAME\n\n\n## DEVELOPMENT STAGE: In this stage we'll be installing the dev dependencies, that's it.\n# The code will be mounted as a volume so we can edit the code real time.\n# In multi-stage builds you can choose to stop at a specific stage, that's what you will\n# do in this case, stop at \"DEV\" stage. More info:\n# https://docs.docker.com/develop/develop-images/multistage-build/#stop-at-a-specific-build-stage\n# How to stop at a specific stage with Docker Compose:\n# https://docs.docker.com/compose/compose-file/#target\nFROM base AS development\n\nENV DJANGO_SETTINGS_MODULE=$PROJECT_NAME.config.local\n# Since, I'm using only on dev I'll disable this\n# So, do NEVER disable this if you deploy Werkzeug on production\nENV WERKZEUG_DEBUG_PIN=off\nENV PYTHONBREAKPOINT=ipdb.set_trace\n\nRUN apk --no-cache add shadow\n# Please inform this build arg, you can find your ID with `id -u $USER`\n# https://github.com/douglasmiranda/lab/tree/master/docker-volume-share-user-host-container\nARG DJANGO_USER_UID=1000\nRUN usermod -u ${DJANGO_USER_UID} django\n\nUSER django\n\nRUN pip install --user --no-cache-dir -r requirements/dev.txt\n# So you can remember to mount the code on your docker-compose.yml\n# ./{{cookiecutter.django_project_name}}:/django/{{cookiecutter.django_project_name}}\nVOLUME [\"$HOMEAPP/$PROJECT_NAME\"]\n"
}