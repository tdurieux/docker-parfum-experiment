{
  "startTime": 1674249606696,
  "endTime": 1674249607164,
  "originalSmells": [
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 53,
        "lineEnd": 53,
        "columnStart": 4,
        "columnEnd": 39
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 54,
        "lineEnd": 54,
        "columnStart": 4,
        "columnEnd": 41
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 55,
        "lineEnd": 55,
        "columnStart": 4,
        "columnEnd": 66
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 93,
        "lineEnd": 93,
        "columnStart": 4,
        "columnEnd": 59
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 134,
        "lineEnd": 134,
        "columnStart": 4,
        "columnEnd": 65
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 135,
        "lineEnd": 135,
        "columnStart": 4,
        "columnEnd": 52
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 136,
        "lineEnd": 136,
        "columnStart": 4,
        "columnEnd": 50
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 119,
        "lineEnd": 119,
        "columnStart": 4,
        "columnEnd": 33
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 119,
        "lineEnd": 119,
        "columnStart": 4,
        "columnEnd": 33
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM nvidia/cuda:9.0-base-ubuntu16.04\n\nMAINTAINER Amazon AI\n\nARG framework_installable\nARG framework_support_installable=sagemaker_tensorflow_container-1.0.0.tar.gz\n\nRUN apt-get update && apt-get install -y --no-install-recommends \\\n        build-essential \\\n        cuda-command-line-tools-9-0 \\\n        cuda-cublas-dev-9-0 \\\n        cuda-cudart-dev-9-0 \\\n        cuda-cufft-dev-9-0 \\\n        cuda-curand-dev-9-0 \\\n        cuda-cusolver-dev-9-0 \\\n        cuda-cusparse-dev-9-0 \\\n        curl \\\n        git \\\n        libcudnn7=7.1.4.18-1+cuda9.0 \\\n        libcudnn7-dev=7.1.4.18-1+cuda9.0 \\\n        libcurl3-dev \\\n        libfreetype6-dev \\\n        libpng12-dev \\\n        libzmq3-dev \\\n        pkg-config \\\n        python-dev \\\n        rsync \\\n        software-properties-common \\\n        unzip \\\n        zip \\\n        zlib1g-dev \\\n        wget \\\n        vim \\\n        nginx \\\n        iputils-ping \\\n        && \\\n    rm -rf /var/lib/apt/lists/* && \\\n    find /usr/local/cuda-9.0/lib64/ -type f -name 'lib*_static.a' -not -name 'libcudart_static.a' -delete && \\\n    rm /usr/lib/x86_64-linux-gnu/libcudnn_static_v7.a\n\nRUN curl -fSsL -O https://bootstrap.pypa.io/get-pip.py && \\\n    python get-pip.py && \\\n    rm get-pip.py\n\nRUN pip --no-cache-dir install \\\n        numpy \\\n        scipy \\\n        sklearn \\\n        pandas \\\n        Pillow \\\n        h5py\n\n# Set up grpc\nRUN pip install --no-cache-dir enum34 futures mock six && \\\n    pip install --no-cache-dir --pre 'protobuf>=3.0.0a3' && \\\n    pip install --no-cache-dir -i https://testpypi.python.org/simple --pre grpcio\n\n# Set up Bazel.\n\n# Running bazel inside a `docker build` command causes trouble, cf:\n#   https://github.com/bazelbuild/bazel/issues/134\n# The easiest solution is to set up a bazelrc file forcing --batch.\nRUN echo \"startup --batch\" >>/etc/bazel.bazelrc\n# Similarly, we need to workaround sandboxing issues:\n#   https://github.com/bazelbuild/bazel/issues/418\nRUN echo \"build --spawn_strategy=standalone --genrule_strategy=standalone\" \\\n    >>/etc/bazel.bazelrc\n# Install the most recent bazel release which works: https://github.com/bazelbuild/bazel/issues/4652\nENV BAZEL_VERSION 0.10.1\nWORKDIR /\nRUN mkdir /bazel && \\\n    cd /bazel && \\\n    curl -H \"User-Agent: Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/57.0.2987.133 Safari/537.36\" -fSsL -O https://github.com/bazelbuild/bazel/releases/download/$BAZEL_VERSION/bazel-$BAZEL_VERSION-installer-linux-x86_64.sh && \\\n    curl -H \"User-Agent: Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/57.0.2987.133 Safari/537.36\" -fSsL -o /bazel/LICENSE.txt https://raw.githubusercontent.com/bazelbuild/bazel/master/LICENSE && \\\n    chmod +x bazel-*.sh && \\\n    ./bazel-$BAZEL_VERSION-installer-linux-x86_64.sh && \\\n    cd / && \\\n    rm -f /bazel/bazel-$BAZEL_VERSION-installer-linux-x86_64.sh\n\n# Configure the build for our CUDA configuration.\nENV CI_BUILD_PYTHON python\nENV LD_LIBRARY_PATH /usr/local/cuda/extras/CUPTI/lib64:$LD_LIBRARY_PATH\nENV TF_NEED_CUDA 1\nENV TF_CUDA_COMPUTE_CAPABILITIES=3.7,6.1\nENV TF_CUDA_VERSION=9.0\nENV TF_CUDNN_VERSION=7\nENV CUDNN_INSTALL_PATH=/usr/lib/x86_64-linux-gnu\n\n# TODO: upgrade to tf serving 1.8, which requires more work with updating\n# dependencies. See current work in progress in tfserving-1.8 branch.\nENV TF_SERVING_VERSION=1.7.0\n\n# Install tensorflow-serving-api\nRUN pip install --no-cache-dir tensorflow-serving-api==$TF_SERVING_VERSION\n\n# Download TensorFlow Serving\nRUN cd / && git clone --recurse-submodules https://github.com/tensorflow/serving && \\\n  cd serving && \\\n  git checkout $TF_SERVING_VERSION\n\n# Configure Tensorflow to use the GPU\nWORKDIR /serving\nRUN git clone --recursive https://github.com/tensorflow/tensorflow.git && \\\n  cd tensorflow && \\\n  git checkout v$TF_SERVING_VERSION && \\\n  tensorflow/tools/ci_build/builds/configured GPU\n\n# Build TensorFlow Serving and Install it in /usr/local/bin\nWORKDIR /serving\nRUN bazel build -c opt --config=cuda \\\n    --cxxopt=\"-D_GLIBCXX_USE_CXX11_ABI=0\" \\\n    --crosstool_top=@local_config_cuda//crosstool:toolchain \\\n    tensorflow_serving/model_servers:tensorflow_model_server && \\\n    cp bazel-bin/tensorflow_serving/model_servers/tensorflow_model_server /usr/local/bin/ && \\\n    bazel clean --expunge\n\n# Update libstdc++6, as required by tensorflow-serving >= 1.6: https://github.com/tensorflow/serving/issues/819\nRUN add-apt-repository ppa:ubuntu-toolchain-r/test -y && \\\n    apt-get update && \\\n    apt-get install --no-install-recommends -y libstdc++6 && rm -rf /var/lib/apt/lists/*;\n\n# cleaning up the container\nRUN rm -rf /serving && \\\n    rm -rf /bazel\n\nWORKDIR /root\n\n# Will install from pypi once packages are released there. For now, copy from local file system.\nCOPY $framework_installable .\nCOPY $framework_support_installable .\n\nRUN framework_installable_local=$(basename $framework_installable) && \\\n    framework_support_installable_local=$(basename $framework_support_installable) && \\\n\n    pip install --no-cache-dir --no-cache --upgrade $framework_installable_local && \\\n    pip install --no-cache-dir $framework_support_installable_local && \\\n    pip install --no-cache-dir \"sagemaker-tensorflow>=1.10,<1.11\" && \\\n\n    rm $framework_installable_local && \\\n    rm $framework_support_installable_local\n\n# entry.py comes from sagemaker-container-support\nENTRYPOINT [\"entry.py\"]"
}