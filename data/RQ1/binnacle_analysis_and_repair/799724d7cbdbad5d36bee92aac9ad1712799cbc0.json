{
  "startTime": 1674234590542,
  "endTime": 1674234590796,
  "originalSmells": [
    {
      "rule": "yumInstallRmVarCacheYum",
      "position": {
        "lineStart": 15,
        "lineEnd": 15,
        "columnStart": 4,
        "columnEnd": 31
      }
    },
    {
      "rule": "yumInstallRmVarCacheYum",
      "position": {
        "lineStart": 17,
        "lineEnd": 17,
        "columnStart": 4,
        "columnEnd": 61
      }
    },
    {
      "rule": "yumInstallRmVarCacheYum",
      "position": {
        "lineStart": 19,
        "lineEnd": 30,
        "columnStart": 4,
        "columnEnd": 6
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 111,
        "lineEnd": 111,
        "columnStart": 4,
        "columnEnd": 24
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "ARG docker_name\n\nFROM $docker_name\n\nMAINTAINER H2o.ai <ops@h2o.ai>\n\nENV HOME=/root\nENV CUDA_HOME=/usr/local/cuda\nENV PATH=/usr/local/cuda/bin:$PATH\nENV CUDADIR=/usr/local/cuda/include/\nENV LD_LIBRARY_PATH=/usr/lib64:/usr/local/lib:$LD_LIBRARY_PATH\n\nENV MINICONDA_VERSION=4.4.10\n\n# Setup gcc etc.\nRUN yum install -y epel-release && rm -rf /var/cache/yum\n\nRUN yum install -y gcc gcc-c++ libgcc libstdc++ libgomp glibc && rm -rf /var/cache/yum\n\nRUN yum install -y \\\n    make \\\n    ncurses-devel \\\n\tzlib-devel \\\n    epel-release \\\n    zeromq-devel \\\n\twget \\\n\tblas-devel \\\n    openblas-devel \\\n    libpng-devel \\\n    freetype-devel \\\n\tbzip2 && \\\n    wget https://repo.continuum.io/miniconda/Miniconda3-${MINICONDA_VERSION}-Linux-`arch`.sh && \\\n    bash Miniconda3-${MINICONDA_VERSION}-Linux-`arch`.sh -b -p /opt/h2oai/h2o4gpu/python && rm -rf /var/cache/yum\nENV PATH=/opt/h2oai/h2o4gpu/python/bin:$PATH\n\n#\n# PPC64 specific - certain libs/whl don't support PPC64LE\n#\n\nWORKDIR $HOME\n\n# Arrow\nRUN bash -c 'if [ `arch` = \"ppc64le\" ]; then \\\n  yum install -y git boost-devel cmake3  autoconf libjpeg-devel && \\\n\tln -s /usr/bin/cmake3 /usr/bin/cmake && \\\n\tgit clone https://github.com/apache/arrow.git && \\\n\tcd $HOME/arrow/cpp && \\\n    git checkout tags/apache-arrow-0.12.0 && \\\n    pip install numpy==1.16.1 cython==0.29.3 && \\\n    export ARROW_BUILD_TYPE=release && \\\n    export ARROW_HOME=/usr/local && \\\n\tcmake -DARROW_CXXFLAGS=\"-lutil\" -DCMAKE_INSTALL_PREFIX=$ARROW_HOME -DARROW_PYTHON=on -DCMAKE_INSTALL_LIBDIR=lib -DCMAKE_BUILD_TYPE=$ARROW_BUILD_TYPE -DARROW_BUILD_TESTS=OFF && make -j && make install && \\\n\tcd $HOME/arrow/python && \\\n\tpython setup.py install; \\\n\tfi'\n\nWORKDIR /\n\n# Add requirements\nCOPY src/interface_py/requirements_runtime.txt requirements.txt\nCOPY src/interface_py/requirements_runtime_demos.txt requirements_runtime_demos.txt\nRUN \\\n  chmod a+rwx requirements*.txt && \\\n  pip install --no-cache-dir -r requirements.txt && \\\n  pip install --no-cache-dir -r requirements_runtime_demos.txt\n\n\nRUN mkdir -p /etc/OpenCL/vendors && \\\n    echo \"libnvidia-opencl.so.1\" > /etc/OpenCL/vendors/nvidia.icd\n\nRUN (localedef -v -c -i en_US -f UTF-8 en_US.UTF-8 || true)\n\nENV LANG en_US.UTF-8\nENV LANGUAGE en_US:en\nENV LD_LIBRARY_PATH_CUDA=$CUDA_HOME/lib64/:$CUDA_HOME/lib/:/usr/local/cuda/lib64:/usr/local/cuda/extras/CUPTI/lib64:/usr/local/nvidia/lib:/usr/local/nvidia/lib64\n\n\n# Add a canned jupyter notebook demo to the container\nRUN \\\n  mkdir -p jupyter/demos\nCOPY examples/py/demos/H2O4GPU_Ridge.ipynb /jupyter/demos/H2O4GPU_Ridge.ipynb\nCOPY examples/py/demos/H2O4GPU_LinearRegression.ipynb /jupyter/demos/H2O4GPU_LinearRegression.ipynb\nCOPY examples/py/demos/H2O4GPU_GBM.ipynb /jupyter/demos/H2O4GPU_GBM.ipynb\nCOPY examples/py/demos/H2O4GPU_GLM.ipynb /jupyter/demos/H2O4GPU_GLM.ipynb\nCOPY examples/py/demos/H2O4GPU_Lasso.ipynb /jupyter/demos/H2O4GPU_Lasso.ipynb\nCOPY examples/py/demos/H2O4GPU_KMeans_Images.ipynb /jupyter/demos/H2O4GPU_KMeans_Images.ipynb\nCOPY examples/py/demos/H2O4GPU_KMeans_Quantization.ipynb /jupyter/demos/H2O4GPU_KMeans_Quantization.ipynb\nCOPY examples/py/demos/Multi-GPU-H2O-GLM-simple.ipynb /jupyter/demos/Multi-GPU-H2O-GLM-simple.ipynb\nCOPY examples/py/demos/H2O4GPU_TruncatedSVD.ipynb /jupyter/demos/H2O4GPU_TruncatedSVD.ipynb\nCOPY examples/py/demos/H2O4GPU_PCA.ipynb /jupyter/demos/H2O4GPU_PCA.ipynb\nCOPY examples/py/demos/H2O4GPU_Daal_LinearRegression.ipynb /jupyter/demos/H2O4GPU_Daal_LinearRegression.ipynb\nCOPY examples/py/demos/figures /jupyter/demos/figures\nRUN \\\n  cd /jupyter/demos && \\\n  chmod -R a+rwx /jupyter && \\\n  mkdir /scikit_learn_data && \\\n  chmod -R a+rwx /scikit_learn_data && \\\n  mkdir -p /jupyter/scikit_learn_data/covertype && \\\n  chmod -R a+rwx /jupyter/scikit_learn_data/covertype && \\\n  mkdir -p /jupyter/scikit_learn_data/lfw_home && \\\n  chmod -R a+rwx /jupyter/scikit_learn_data/lfw_home && \\\n  HOME=/jupyter jupyter notebook --generate-config && \\\n  sed -i \"s/#c.NotebookApp.token = '<generated>'/c.NotebookApp.token = 'h2o'/\" /jupyter/.jupyter/jupyter_notebook_config.py && \\\n  chmod -R a+rwx /jupyter/.jupyter\n\n# Add shell wrapper\nCOPY scripts/run.sh /run.sh\nRUN \\\n  chmod a+rwx run.sh\n\nRUN wget https://s3.amazonaws.com/artifacts.h2o.ai/releases/ai/h2o/dai-thirdparty-deps/1.0-master-2/`arch`-centos7/llvm.tar.bz2 && \\\n    tar xvf llvm.tar.bz2 && \\\n    cp -r llvm/* /opt/h2oai/h2o4gpu/ && \\\n    rm -rf llvm* && rm llvm.tar.bz2\n\nENV LLVM4=/opt/h2oai/h2o4gpu\nENV PATH=$LLVM4/bin:$PATH\nENV LD_LIBRARY_PATH=$LLVM4/lib:$LD_LIBRARY_PATH\n\nARG h2o4gpu_VERSION\nARG h2o4gpu_COMMIT\nARG DOCKER_VERSION_TAG\nLABEL \\\nh2o4gpu_commit=\"$h2o4gpu_COMMIT\" \\\ndocker_version_tag=\"$DOCKER_VERSION_TAG\"\n\nENTRYPOINT [\"./run.sh\"]\nEXPOSE 8888\n"
}