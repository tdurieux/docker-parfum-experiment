{
  "startTime": 1674239858728,
  "endTime": 1674239858816,
  "originalSmells": [
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 47,
        "lineEnd": 47,
        "columnStart": 1,
        "columnEnd": 12
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 30,
        "lineEnd": 35,
        "columnStart": 22,
        "columnEnd": 9
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 30,
        "lineEnd": 35,
        "columnStart": 22,
        "columnEnd": 9
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# Channel server Docker builder\n#\n# This Dockerfile creates a container which builds Channel Server as found in the\n# current folder, and creates a tarball which can be piped into another Docker\n# container for creating minimal sized Docker containers.\n#\n# First create the builder image:\n#\n#   ```\n#   docker build -t channel-server-builder -f Dockerfile.build .\n#   ```\n# Next run the builder container, piping its output into the creation of the\n# runner container. This creates a minimal size Docker image which can be used\n# to run Channel Server in production.\n#\n#   ```\n#   docker run --rm channel-server-builder | docker build -t channel-server -f Dockerfile.run -\n#   ```\n\n#FROM ubuntu:xenial\nFROM golang:latest\nMAINTAINER edison <52388483@qq.com>\n\n# Set locale.\n#RUN locale-gen --no-purge en_US.UTF-8\n#ENV LC_ALL en_US.UTF-8\n\nENV DEBIAN_FRONTEND noninteractive\n\n# Base build dependencies.\nRUN apt-get update && apt-get install --no-install-recommends -qy \\\n\tnodejs \\\n\tbuild-essential \\\n\tgit \\\n\tautomake \\\n\tautoconf && rm -rf /var/lib/apt/lists/*;\n\n# Add and build Channel server.\nADD . /srv/channel-server\nWORKDIR /srv/channel-server\n\nRUN git clone http://github.com/golang/net.git /go/src/golang.org/x/net \\\n    && git clone http://github.com/golang/sys.git /go/src/golang.org/x/sys \\\n\t&& git clone http://github.com/golang/crypto.git /go/src/golang.org/x/crypto\n\nRUN mkdir -p /usr/share/gocode/src\nRUN ./autogen.sh && \\\n\t./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" && \\\n\tmake pristine && \\\n\tmake get && \\\n\tmake tarball\nRUN rm /srv/channel-server/dist_*/*.tar.gz\nRUN mv /srv/channel-server/dist_*/channel-server-* /srv/channel-server/dist\n\n# Add gear required by Dockerfile.run.\nCOPY Dockerfile.run /\nCOPY scripts/docker_entrypoint.sh /\n\n# Running this image produces a tarball suitable to be piped into another Docker build command.\nCMD tar -cf - -C / Dockerfile.run docker_entrypoint.sh /srv/channel-server/dist\n"
}