{
  "startTime": 1674236525222,
  "endTime": 1674236525623,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 15,
        "lineEnd": 15,
        "columnStart": 4,
        "columnEnd": 139
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 33,
        "lineEnd": 33,
        "columnStart": 4,
        "columnEnd": 149
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 34,
        "lineEnd": 34,
        "columnStart": 4,
        "columnEnd": 140
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 57,
        "lineEnd": 57,
        "columnStart": 4,
        "columnEnd": 86
      }
    },
    {
      "rule": "rmRecursiveAfterMktempD",
      "position": {
        "lineStart": 35,
        "lineEnd": 35,
        "columnStart": 15,
        "columnEnd": 36
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 29,
        "lineEnd": 29,
        "columnStart": 4,
        "columnEnd": 150
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 36,
        "lineEnd": 36,
        "columnStart": 4,
        "columnEnd": 44
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 58,
        "lineEnd": 58,
        "columnStart": 15,
        "columnEnd": 32
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 10,
        "lineEnd": 11,
        "columnStart": 22,
        "columnEnd": 173
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 52,
        "lineEnd": 53,
        "columnStart": 22,
        "columnEnd": 123
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 121,
        "lineEnd": 121,
        "columnStart": 22,
        "columnEnd": 46
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 142,
        "lineEnd": 143,
        "columnStart": 22,
        "columnEnd": 100
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 121,
        "lineEnd": 121,
        "columnStart": 22,
        "columnEnd": 46
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 142,
        "lineEnd": 143,
        "columnStart": 22,
        "columnEnd": 100
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "## runtimebase ##\n\n# this stage contains all 3rd party dependencies\nFROM ubuntu:18.04 as runtimebase\n\nLABEL org.qmstr.image runtime\n\nENV DEBIAN_FRONTEND=noninteractive\n\n# install runtime deps\nRUN apt-get update && apt-get install --no-install-recommends -y \\\n    software-properties-common curl autoconf git apt-utils libgit2-dev libio-captureoutput-perl python python-pip python3-distutils protobuf-compiler icu-devtools libicu-dev && \\\n    rm -rf /var/lib/apt/lists/*\n\nARG HUGO_VERSION\nRUN curl -f -L --output /tmp/hugo.deb https://github.com/gohugoio/hugo/releases/download/v${HUGO_VERSION}/hugo_${HUGO_VERSION}_Linux-64bit.deb\nRUN dpkg -i /tmp/hugo.deb\nRUN rm /tmp/hugo.deb\n\n# install ninka\nRUN mkdir /ninka && \\\n    git clone https://github.com/dmgerman/ninka.git /ninka && \\\n    cd /ninka/comments && make && make install && \\\n    rm /usr/local/man/man1 && \\\n    cd /ninka && perl Makefile.PL && make && make install && \\\n    rm -fr /ninka\n\n# install scancode\nARG SCANCODE_VERSION\nRUN ICU_VERSION=$(icuinfo | sed -n 's:.*<param name=\"version\">\\([0-9]*\\)\\.[0-9]*</param>.*:\\1:p') pip --no-cache-dir install -U scancode-toolkit==${SCANCODE_VERSION}\n\n# install dgraph\nARG DGRAPH_VERSION\nRUN curl -f -L --output /tmp/dgraph.sha256 https://github.com/dgraph-io/dgraph/releases/download/v\"${DGRAPH_VERSION}\"/dgraph-checksum-linux-amd64.sha256\nRUN curl -f -L --output /tmp/dgraph.tar.gz https://github.com/dgraph-io/dgraph/releases/download/v\"${DGRAPH_VERSION}\"/dgraph-linux-amd64.tar.gz\nRUN temp_dir=$(mktemp -d 2>/dev/null) && \\\n    tar -C $temp_dir -xzf /tmp/dgraph.tar.gz && \\\n    sed -e s#/usr/local/bin#${temp_dir}# /tmp/dgraph.sha256 | sha256sum -c - && \\\n    mv ${temp_dir}/* /usr/local/bin/ && \\\n    rmdir ${temp_dir} && rm -rf > 2/dev/null && rm /tmp/dgraph.tar.gz\nRUN rm /tmp/dgraph*\n\n## builder ##\n\n# Create a container that only builds the software to be installed into the master container:\nFROM ubuntu:18.04 as builder\nLABEL org.qmstr.image builder\nENV GOROOT /opt/go\nENV PATH ${GOPATH}/bin:/opt/go/bin:$PATH\nENV DEBIAN_FRONTEND=noninteractive\n\n# install dependecies\nRUN apt-get update && apt-get install --no-install-recommends -y \\\n    curl autoconf make git libgit2-dev libio-captureoutput-perl virtualenv tar build-essential pkg-config protobuf-compiler \\\n    && rm -rf /var/lib/apt/lists/*\n\nARG GO_VERSION\nRUN curl -f -o /opt/go.tar.gz https://dl.google.com/go/go${GO_VERSION}.linux-amd64.tar.gz\nRUN cd /opt && tar -xf go.tar.gz && rm go.tar.gz\n\n# install golang tools\nRUN mkdir /qmstr\nADD clients /qmstr/clients\nADD masterserver /qmstr/masterserver\nADD modules /qmstr/modules\nADD proto /qmstr/proto\nADD lib /qmstr/lib\nADD Makefile /qmstr/Makefile\nADD go.mod /qmstr/go.mod\nADD go.sum /qmstr/go.sum\nADD versions.env /qmstr/versions.env\n\nARG GOPROXY\n\nWORKDIR /qmstr\nRUN make gotest\nRUN make install_qmstr_all\n\n## runtime ##\n\n# the runtime stage contains all the elements needed to run the master and the analysis tools:\nFROM runtimebase as runtime\n\nLABEL org.qmstr.image runtime\n\n# init html reporter data\nCOPY --from=builder /qmstr /tmp/qmstr\nRUN /tmp/qmstr/modules/reporters/qmstr-reporter-html/setup.sh /usr/share/qmstr /tmp/qmstr\nRUN rm -fr /tmp/qmstr\n\nADD ci/common.inc /common.inc\n\n# copy qmstr installation from previous stage\nCOPY --from=builder /usr/local/bin/* /usr/local/bin/\n\nEXPOSE 50051\n\nVOLUME /buildroot\n\n## master ##\n\n# release master container, based on the runtime stage:\nFROM runtime as master\n\nLABEL org.qmstr.image master\n\nENV GOPATH /go\nENV PATH ${GOPATH}/bin:$PATH\n\nCOPY ci/docker-entrypoint.sh /docker-entrypoint.sh\nRUN chmod +x /docker-entrypoint.sh\n\nENTRYPOINT [ \"/docker-entrypoint.sh\" ]\n\n## web ##\n\n# debug stage for container running ratel\nFROM ubuntu:18.04 as web\n\nENV DEBIAN_FRONTEND=noninteractive\n\nRUN apt-get update && apt-get install --no-install-recommends -y socat && rm -rf /var/lib/apt/lists/*;\nCOPY --from=runtime /usr/local/bin/dgraph-ratel /usr/local/bin/dgraph-ratel\nADD ci/ratel-entrypoint.sh /entrypoint.sh\n\nEXPOSE 8000\nEXPOSE 8080\n\nCMD /entrypoint.sh\n\n## dev ##\n\n# development container for the master and other tools, based on the runtime stage:\n# The $GOROOT/src directory can be mounted in as a volume, to allow testing of local changes.\nFROM runtime as dev\n\nLABEL org.qmstr.image dev\n\nENV GOPATH /go\nENV PATH ${GOPATH}/bin:$PATH\n\n# install golang\nRUN apt-get update && apt-get install --no-install-recommends -y \\\n    curl golang autoconf git libio-captureoutput-perl python-dev python-virtualenv protobuf-compiler && rm -rf /var/lib/apt/lists/*;\n\nEXPOSE 2345\n\n# install additional go deps\nRUN go get -u -v github.com/derekparker/delve/cmd/dlv\n\nVOLUME /go/src\n\n# cache wheels\nCOPY --from=builder /root/.pex/build /root/.pex/build\nRUN rm /root/.pex/build/*qmstr*\n\nCOPY ci/dev-entrypoint.sh /dev-entrypoint.sh\nRUN chmod +x /dev-entrypoint.sh\nENTRYPOINT [ \"/dev-entrypoint.sh\" ]\n"
}