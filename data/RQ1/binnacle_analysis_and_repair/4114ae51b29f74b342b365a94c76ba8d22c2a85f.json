{
  "startTime": 1674237138929,
  "endTime": 1674237139269,
  "originalSmells": [
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 102,
        "lineEnd": 102,
        "columnStart": 19,
        "columnEnd": 30
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 51,
        "lineEnd": 51,
        "columnStart": 4,
        "columnEnd": 24
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 73,
        "lineEnd": 73,
        "columnStart": 4,
        "columnEnd": 25
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 100,
        "lineEnd": 100,
        "columnStart": 4,
        "columnEnd": 31
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 123,
        "lineEnd": 123,
        "columnStart": 4,
        "columnEnd": 26
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# Copyright 2019 Google LLC\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\nARG DISTRO_VERSION=latest\nFROM opensuse/leap:${DISTRO_VERSION} AS devtools\n\n## [START INSTALL.md]\n\n# Install the minimal development tools:\n\n## [START README.md]\n\n# ```bash\nRUN zypper refresh && \\\n    zypper install --allow-downgrade -y cmake gcc gcc-c++ git gzip \\\n        libcurl-devel libopenssl-devel make tar wget\n# ```\n\n## [END README.md]\n\nFROM devtools\nCOPY ci/install-retry.sh /retry3\n\n## [START IGNORED]\n# Verify that the tools above are enough to compile google-cloud-cpp when using\n# external projects.\nWORKDIR /home/build/external\nCOPY . /home/build/external\nRUN cmake -H. -Bcmake-out -DCMAKE_BUILD_TYPE=Debug\nRUN cmake --build cmake-out -- -j $(nproc)\nRUN (cd cmake-out && ctest --output-on-failure)\n## [END IGNORED]\n\n# #### crc32c\n\n# There is no OpenSUSE package for this library. To install it, use:\n\n# ```bash\nWORKDIR /var/tmp/build\nRUN /retry3 wget -q https://github.com/google/crc32c/archive/1.0.6.tar.gz\nRUN tar -xf 1.0.6.tar.gz && rm 1.0.6.tar.gz\nWORKDIR /var/tmp/build/crc32c-1.0.6\nRUN cmake \\\n      -DCMAKE_BUILD_TYPE=Release \\\n      -DBUILD_SHARED_LIBS=yes \\\n      -DCRC32C_BUILD_TESTS=OFF \\\n      -DCRC32C_BUILD_BENCHMARKS=OFF \\\n      -DCRC32C_USE_GLOG=OFF \\\n      -H. -Bcmake-out/crc32c\nRUN cmake --build cmake-out/crc32c --target install -- -j $(nproc)\nRUN ldconfig\n# ```\n\n# #### Protobuf\n\n# OpenSUSE Leap includes a package for protobuf-2.6, but this is too old to\n# support the Google Cloud Platform proto files, or to support gRPC for that\n# matter. Manually install protobuf:\n\n# ```bash\nWORKDIR /var/tmp/build\nRUN /retry3 wget -q https://github.com/google/protobuf/archive/v3.6.1.tar.gz\nRUN tar -xf v3.6.1.tar.gz && rm v3.6.1.tar.gz\nWORKDIR /var/tmp/build/protobuf-3.6.1/cmake\nRUN cmake \\\n        -DCMAKE_BUILD_TYPE=Release \\\n        -DBUILD_SHARED_LIBS=yes \\\n        -Dprotobuf_BUILD_TESTS=OFF \\\n        -H. -Bcmake-out\nRUN cmake --build cmake-out --target install -- -j $(nproc)\nRUN ldconfig\n# ```\n\n# #### c-ares\n\n# Recent versions of gRPC require c-ares >= 1.11, while OpenSUSE Leap\n# distributes c-ares-1.9. We need some additional development tools to compile\n# this library:\n\n# ```bash\nRUN /retry3 zypper refresh && \\\n    /retry3 zypper install -y automake libtool\n# ```\n\n# Manually install a newer version:\n\n# ```bash\nWORKDIR /var/tmp/build\nRUN /retry3 wget -q https://github.com/c-ares/c-ares/archive/cares-1_14_0.tar.gz\nRUN tar -xf cares-1_14_0.tar.gz && rm cares-1_14_0.tar.gz\nWORKDIR /var/tmp/build/c-ares-cares-1_14_0\nRUN ./buildconf && ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" && make -j $(nproc)\nRUN make install\nRUN ldconfig\n# ```\n\n# #### gRPC\n\n# The gRPC Makefile uses `which` to determine whether the compiler is available.\n# Install this command for the extremely rare case where it may be missing from\n# your workstation or build server:\n\n# ```bash\nRUN /retry3 zypper refresh && \\\n    /retry3 zypper install -y which\n# ```\n\n# Then gRPC can be manually installed using:\n\n# ```bash\nWORKDIR /var/tmp/build\nRUN /retry3 wget -q https://github.com/grpc/grpc/archive/v1.19.1.tar.gz\nRUN tar -xf v1.19.1.tar.gz && rm v1.19.1.tar.gz\nWORKDIR /var/tmp/build/grpc-1.19.1\nENV PKG_CONFIG_PATH=/usr/local/lib/pkgconfig:/usr/local/lib64/pkgconfig\nENV LD_LIBRARY_PATH=/usr/local/lib:/usr/local/lib64\nENV PATH=/usr/local/bin:${PATH}\nRUN make -j $(nproc)\nRUN make install\nRUN ldconfig\n# ```\n\n# #### google-cloud-cpp\n\n# We can now compile and install `google-cloud-cpp`.\n\n# ```bash\nWORKDIR /home/build/google-cloud-cpp\nCOPY . /home/build/google-cloud-cpp\nRUN cmake -H. -Bcmake-out \\\n    -DGOOGLE_CLOUD_CPP_DEPENDENCY_PROVIDER=package \\\n    -DGOOGLE_CLOUD_CPP_GMOCK_PROVIDER=external\nRUN cmake --build cmake-out -- -j $(nproc)\nWORKDIR /home/build/google-cloud-cpp/cmake-out\nRUN ctest --output-on-failure\nRUN cmake --build . --target install\n# ```\n\n## [END INSTALL.md]\n\n# Verify that the installed files are actually usable\nWORKDIR /home/build/test-install-plain-make\nENV PKG_CONFIG_PATH=/usr/local/lib64/pkgconfig\nCOPY ci/test-install /home/build/test-install-plain-make\nRUN make\n\nWORKDIR /home/build/test-install-cmake-bigtable\nCOPY ci/test-install/bigtable /home/build/test-install-cmake-bigtable\nRUN env -u PKG_CONFIG_PATH cmake -H. -Bcmake-out\nRUN cmake --build cmake-out -- -j $(nproc)\n\nWORKDIR /home/build/test-install-cmake-storage\nCOPY ci/test-install/storage /home/build/test-install-cmake-storage\nRUN env -u PKG_CONFIG_PATH cmake -H. -Bcmake-out\nRUN cmake --build cmake-out -- -j $(nproc)\n\nWORKDIR /home/build/test-submodule\nCOPY ci/test-install /home/build/test-submodule\nCOPY . /home/build/test-submodule/submodule/google-cloud-cpp\nRUN cmake -Hsubmodule -Bcmake-out\nRUN cmake --build cmake-out -- -j $(nproc)\n"
}