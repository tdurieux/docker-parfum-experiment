{
  "startTime": 1674249982729,
  "endTime": 1674249982845,
  "originalSmells": [
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 28,
        "lineEnd": 28,
        "columnStart": 4,
        "columnEnd": 15
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 5,
        "lineEnd": 5,
        "columnStart": 4,
        "columnEnd": 22
      }
    },
    {
      "rule": "apkAddUseNoCache",
      "position": {
        "lineStart": 3,
        "lineEnd": 3,
        "columnStart": 4,
        "columnEnd": 50
      }
    },
    {
      "rule": "apkAddUseNoCache",
      "position": {
        "lineStart": 7,
        "lineEnd": 7,
        "columnStart": 4,
        "columnEnd": 52
      }
    },
    {
      "rule": "apkAddUseNoCache",
      "position": {
        "lineStart": 9,
        "lineEnd": 9,
        "columnStart": 4,
        "columnEnd": 57
      }
    },
    {
      "rule": "apkAddUseNoCache",
      "position": {
        "lineStart": 10,
        "lineEnd": 10,
        "columnStart": 4,
        "columnEnd": 18
      }
    },
    {
      "rule": "apkAddUseNoCache",
      "position": {
        "lineStart": 12,
        "lineEnd": 12,
        "columnStart": 4,
        "columnEnd": 29
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM python:3.6-alpine AS dev\nWORKDIR /maniwani\n# uwsgi and associated plugins\nRUN apk add --no-cache uwsgi-python3 uwsgi-gevent3 uwsgi-http\n# backend dependencies\nRUN pip install --no-cache-dir pipenv\n# dependencies for Pillow\nRUN apk add --no-cache build-base jpeg-dev zlib-dev libwebp-dev\n# dependencies for psycopg2\nRUN apk add --no-cache libpq postgresql-dev gcc python3-dev musl-dev\nRUN apk add --no-cache ffmpeg\n# frontend dependencies\nRUN apk add --no-cache nodejs nodejs-npm\n# workaround for some pip issues on alpine\nENV LIBRARY_PATH=/lib:/usr/lib\nCOPY Pipfile /maniwani\nCOPY Pipfile.lock /maniwani\nRUN pipenv install --system --deploy\n# remove backend build-time dependencies\nRUN apk del build-base gcc python3-dev musl-dev jpeg-dev zlib-dev\n# point MANIWANI_CFG to the devmode config file\nENV MANIWANI_CFG=./deploy-configs/devmode.cfg\n# workaround for uwsgi inexplicably not picking up /usr/local/lib even though\n# system python has it\nENV PYTHONPATH=$PYTHONPATH:/usr/local/lib/python3.6/site-packages\n# build static frontend files\nCOPY package.json /maniwani\nCOPY package-lock.json /maniwani\nRUN npm install && npm cache clean --force;\nCOPY Gulpfile.js /maniwani\nCOPY scss /maniwani/scss\nRUN npm run gulp\n# remove frontend build-time dependencies\nRUN apk del nodejs-npm nodejs\nRUN rm -rf node_modules\n# copy source files over\nCOPY migrations /maniwani/migrations\nCOPY *.py /maniwani/\nCOPY blueprints /maniwani/blueprints\nCOPY build-helpers /maniwani/build-helpers\nCOPY deploy-configs /maniwani/deploy-configs\nCOPY model /maniwani/model\nCOPY resources /maniwani/resources\nCOPY templates /maniwani/templates\nCOPY ./build-helpers/docker-entrypoint.sh ./docker-entrypoint.sh\n# bootstrap dev image\nRUN python bootstrap.py\nEXPOSE 5000\n\nENTRYPOINT [\"sh\", \"./docker-entrypoint.sh\", \"devmode\"]\n\nFROM dev AS prod\nWORKDIR /maniwani\n# clean up dev image bootstrapping\nRUN rm ./deploy-configs/test.db\nRUN rm -r uploads\nENV MANIWANI_CFG=./deploy-configs/maniwani.cfg\n# chown and switch users for security purposes\nRUN adduser -D maniwani\nRUN chown -R maniwani:maniwani ./\nUSER maniwani\n\n# expose uWSGI\nEXPOSE 3031\nENTRYPOINT [\"sh\", \"./docker-entrypoint.sh\"]\n"
}