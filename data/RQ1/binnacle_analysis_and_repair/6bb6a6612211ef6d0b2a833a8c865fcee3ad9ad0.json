{
  "startTime": 1674235247767,
  "endTime": 1674235247910,
  "originalSmells": [
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 40,
        "lineEnd": 43,
        "columnStart": 7,
        "columnEnd": 43
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# All images inherit from this\nFROM node:10.16.0-alpine AS base\n\n# dependencies that exist in all layers\nRUN apk --no-cache add \\\n    bash \\\n    tini \\\n    g++ \\\n    ca-certificates \\\n    lz4-dev \\\n    musl-dev \\\n    openssl-dev \\\n    make \\\n    python\n\nENV NPM_CONFIG_LOGLEVEL error\n\nRUN mkdir -p /app/source /app/connectors\nWORKDIR /app/source\n\n# Use tini to handle sigterm and zombie processes\nENTRYPOINT [\"/sbin/tini\", \"--\"]\n\n# Install the connectors in a different layer\nFROM base AS connectors\n\nRUN apk --no-cache add \\\n    --virtual .build-deps \\\n    gcc \\\n    zlib-dev \\\n    bsd-compat-headers \\\n    py-setuptools\n\nENV WITH_SASL 0\n\n# Install any built-in connectors in /app/\n# use npm because there isn't a package.json\nWORKDIR /app/connectors\n\nRUN npm init --yes > /dev/null \\\n    && npm install \\\n    --quiet \\\n    --no-package-lock \\\n    'terafoundation_kafka_connector@~0.4.1' \\\n    # clean up node-rdkafka \\\n    && rm -rf node_modules/node-rdkafka/docs \\\n    node_modules/node-rdkafka/deps/librdkafka && npm cache clean --force;\n\n# the deps image should contain all of dev code\nFROM base AS deps\n\nCOPY .yarn-cache .yarn-cache\nCOPY package.json yarn.lock lerna.json .yarnrc /app/source/\nCOPY packages /app/source/packages\n\n# Build just the production node_modules and copy them over\nRUN yarn \\\n    --prod=true \\\n    --frozen-lockfile \\\n    --no-progress \\\n    --prefer-offline \\\n    --no-emoji \\\n    && cp -Rp node_modules /app/node_modules\n\nENV NODE_ENV development\n\n# install both dev and production dependencies\nRUN yarn \\\n    --prod=false \\\n    --frozen-lockfile \\\n    --no-progress \\\n    --prefer-offline \\\n    --ignore-optional \\\n    --no-emoji\n\n# Prepare the node modules for isntallation\nCOPY types /app/source/types\nCOPY tsconfig.json /app/source/\n\n# Build the packages\nRUN yarn lerna link --force-local && yarn lerna run build\n\n# the prod image should small\nFROM base\n\n# Install bunyan\nRUN yarn global add \\\n    --silent \\\n    --ignore-optional \\\n    --no-progress \\\n    --no-emoji \\\n    --no-cache \\\n    bunyan\n\nENV NODE_ENV production\n\nCOPY --from=connectors /app/connectors/node_modules /app/node_modules\n\n# verify node-rdkafka is installed right\nRUN node -e \"require('node-rdkafka')\"\n\nCOPY service.js package.json lerna.json yarn.lock .yarnrc /app/source/\nCOPY scripts /app/source/scripts\n\n# copy the compiled packages\nCOPY --from=deps /app/source/packages /app/source/packages\n# copy the production node_modules\nCOPY --from=deps /app/node_modules /app/source/node_modules\n\n# verify teraslice is installed right\nRUN node -e \"require('teraslice')\"\n\nEXPOSE 5678\n\n# set up the volumes\nVOLUME /app/config /app/logs /app/assets\nENV TERAFOUNDATION_CONFIG /app/config/teraslice.yaml\nENV NODE_OPTIONS \"--max-old-space-size=2048\"\n\nCMD [\"node\", \"service.js\"]\n"
}