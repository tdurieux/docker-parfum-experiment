{
  "startTime": 1674241713661,
  "endTime": 1674241713813,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 4,
        "lineEnd": 4,
        "columnStart": 7,
        "columnEnd": 105
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 5,
        "lineEnd": 5,
        "columnStart": 7,
        "columnEnd": 113
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM golang:1.10-alpine3.9 as build\n\nRUN apk --no-cache add curl \\ \n    && echo \"Pulling watchdog binary from GitHub.\" \\\n    && curl -f -sSL https://github.com/openfaas/faas/releases/download/0.13.0/fwatchdog > /usr/bin/fwatchdog \\\n    && curl -f -sSL https://github.com/openfaas/faas-cli/releases/download/0.8.10/faas-cli > /usr/local/bin/faas-cli \\\n    && chmod +x /usr/bin/fwatchdog \\\n    && chmod +x /usr/local/bin/faas-cli \\\n    && apk del curl --no-cache\n\nWORKDIR /go/src/handler\nCOPY . .\n\n# Run a gofmt and exclude all vendored code.\nRUN test -z \"$(gofmt -l $(find . -type f -name '*.go' -not -path \"./vendor/*\"))\" \\\n    || { echo \"Run \\\"gofmt -s -w\\\" on your Golang code\"; exit 1; }\n\nRUN CGO_ENABLED=0 GOOS=linux \\\n    go build --ldflags \"-s -w\" -a -installsuffix cgo -o handler . && \\\n    go test $(go list ./... | grep -v /vendor/) -cover\n\nFROM alpine:3.9\n\nRUN apk --no-cache add \\\n    ca-certificates \\\n    libarchive-tools \\\n    git\n\n# Add non root user\nRUN addgroup -S app && adduser -S -g app app \\\n   && mkdir -p /home/app \\\n   && chown app /home/app\n\nENV cgi_headers=true\nENV combine_output=true\n\nWORKDIR /home/app\n\nCOPY --from=build /go/src/handler/handler    .\nCOPY --from=build /usr/bin/fwatchdog         .\n\nCOPY --from=build /usr/local/bin/faas-cli    /usr/local/bin/faas-cli\nRUN chmod 777 /tmp\n\nUSER app\n\nENV fprocess=\"./handler\"\n\nHEALTHCHECK --interval=5s CMD [ -e /tmp/.lock ] || exit 1\n\nCMD [\"./fwatchdog\"]\n"
}