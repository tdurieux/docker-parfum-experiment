{
  "startTime": 1674242575896,
  "endTime": 1674242576063,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 19,
        "lineEnd": 19,
        "columnStart": 11,
        "columnEnd": 131
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 20,
        "lineEnd": 20,
        "columnStart": 11,
        "columnEnd": 139
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 26,
        "lineEnd": 26,
        "columnStart": 4,
        "columnEnd": 109
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 31,
        "lineEnd": 31,
        "columnStart": 20,
        "columnEnd": 56
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 31,
        "lineEnd": 31,
        "columnStart": 60,
        "columnEnd": 91
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 61,
        "lineEnd": 61,
        "columnStart": 4,
        "columnEnd": 20
      }
    },
    {
      "rule": "gpgUseBatchFlag",
      "position": {
        "lineStart": 18,
        "lineEnd": 18,
        "columnStart": 4,
        "columnEnd": 96
      }
    },
    {
      "rule": "gpgUseBatchFlag",
      "position": {
        "lineStart": 21,
        "lineEnd": 21,
        "columnStart": 11,
        "columnEnd": 47
      }
    },
    {
      "rule": "gpgUseHaPools",
      "position": {
        "lineStart": 18,
        "lineEnd": 18,
        "columnStart": 4,
        "columnEnd": 96
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM odoo:10\n\nUSER root\n\nRUN set -x; \\\n        apt-get update \\\n        && apt-get install -y --no-install-recommends git mosquitto-clients\\\n            vim tcpdump ngrep tcl expect \\\n            antiword ghostscript node-clean-css poppler-utils \\\n            build-essential python-dev libpq-dev \\\n        && apt-get clean \\\n        && rm -rf /var/lib/apt/lists/*\n\n# create the working directory and a place to set the logs (if wanted)\nRUN mkdir -p /opt/odoo /var/log/odoo\nWORKDIR /opt/odoo\n\n# grab gosu for easy step-down from root\nRUN gpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys B42F6819007F00F88E364FD4036A9C25BF357DD4 \\\n        && curl -f -o /usr/local/bin/gosu -SL \"https://github.com/tianon/gosu/releases/download/1.2/gosu-$(dpkg --print-architecture)\" \\\n        && curl -f -o /usr/local/bin/gosu.asc -SL \"https://github.com/tianon/gosu/releases/download/1.2/gosu-$(dpkg --print-architecture).asc\" \\\n        && gpg --batch --verify /usr/local/bin/gosu.asc \\\n        && rm /usr/local/bin/gosu.asc \\\n        && chmod +x /usr/local/bin/gosu\n\n# grab dockerize for generation of the configuration file and wait on postgres\nRUN curl -f https://github.com/jwilder/dockerize/releases/download/v0.4.0/dockerize-linux-amd64-v0.4.0.tar.gz -L | tar xz -C /usr/local/bin\n\nCOPY ./base_requirements.txt ./\nCOPY ./requirements.txt ./\n\nRUN cd /opt/odoo && pip install --no-cache-dir -r base_requirements.txt && pip install --no-cache-dir -r requirements.txt\n\nENV ODOO_VERSION=10.0 \\\n    PATH=/opt/odoo/bin:$PATH \\\n    LANG=C.UTF-8 \\\n    LC_ALL=C.UTF-8 \\\n    DB_HOST=db \\\n    DB_PORT=5432 \\\n    DB_NAME=barrier \\\n    DB_USER=odoo \\\n    DB_PASSWORD=odoo \\\n    ODOO_BASE_URL=http://localhost:8069 \\\n    DEMO=False \\\n    ADDONS_PATH=/opt/odoo/local-src,/opt/odoo/external-src \\\n    OPENERP_SERVER=/opt/odoo/etc/odoo.cfg ODOO_RC=/opt/odoo/etc/odoo.cfg\n\n\nCOPY ./bin bin\nCOPY ./etc etc\nCOPY ./before-migrate-entrypoint.d before-migrate-entrypoint.d\nCOPY ./start-entrypoint.d start-entrypoint.d\nCOPY ./external-src /opt/odoo/external-src\nCOPY ./local-src /opt/odoo/local-src\nCOPY ./data /opt/odoo/data\nCOPY ./songs /opt/odoo/songs\nCOPY ./setup.py /opt/odoo/\nCOPY ./VERSION /opt/odoo/\nCOPY ./migration.yml /opt/odoo/\n\n# Install songs from setup.py\nRUN pip install --no-cache-dir -e .\n\nVOLUME [\"/data/odoo\", \"/var/log/odoo\"]\n\n# Expose Odoo services\nEXPOSE 8069 8072\n\n# Clean Odoo 10 official entrypoint and config\nRUN rm /entrypoint.sh && rm -rf /etc/odoo && userdel odoo\n\nENTRYPOINT [\"docker-entrypoint.sh\"]\nCMD [\"odoo\"]\n"
}