{
  "startTime": 1674249376391,
  "endTime": 1674249376939,
  "originalSmells": [
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 108,
        "lineEnd": 110,
        "columnStart": 4,
        "columnEnd": 44
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 12,
        "lineEnd": 12,
        "columnStart": 4,
        "columnEnd": 45
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 88,
        "lineEnd": 88,
        "columnStart": 33,
        "columnEnd": 113
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 116,
        "lineEnd": 116,
        "columnStart": 21,
        "columnEnd": 91
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 18,
        "lineEnd": 19,
        "columnStart": 27,
        "columnEnd": 36
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 26,
        "lineEnd": 27,
        "columnStart": 27,
        "columnEnd": 57
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 93,
        "lineEnd": 94,
        "columnStart": 27,
        "columnEnd": 55
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 18,
        "lineEnd": 19,
        "columnStart": 27,
        "columnEnd": 36
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 26,
        "lineEnd": 27,
        "columnStart": 27,
        "columnEnd": 57
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 93,
        "lineEnd": 94,
        "columnStart": 27,
        "columnEnd": 55
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM ubuntu:16.04\nMAINTAINER dreamcat4 <dreamcat4@gmail.com>\n\n\nENV _clean=\"rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*\"\nENV _apt_clean=\"eval apt-get clean && $_clean\"\n# apt-get clean -y && apt-get autoclean -y && apt-get autoremove -y\n\n\n# Install s6-overlay\nENV s6_overlay_version=\"1.17.1.1\"\nADD https://github.com/just-containers/s6-overlay/releases/download/v${s6_overlay_version}/s6-overlay-amd64.tar.gz /tmp/\nRUN tar zxf /tmp/s6-overlay-amd64.tar.gz -C / && $_clean && rm /tmp/s6-overlay-amd64.tar.gz\nENV S6_LOGGING=\"1\"\n# ENV S6_KILL_GRACETIME=\"3000\"\n\n\n# Supportive pkgs\nRUN apt-get update -qqy && DEBIAN_FRONTEND=noninteractive apt-get --no-install-recommends install -y \\\n    wget curl git sudo nano less man && $_apt_clean && rm -rf /var/lib/apt/lists/*;\n\n# Output folder\nRUN mkdir -p /out\n\n# ===\n# ZNC - install build time dependancies\nRUN apt-get update -qqy && DEBIAN_FRONTEND=noninteractive apt-get --no-install-recommends install -y \\\n    znc znc-dev ca-certificates libcurl4-openssl-dev make && $_apt_clean && rm -rf /var/lib/apt/lists/*;\n\n\n# znc - Build external modules\nRUN mkdir -p /build/znc-modules/out \\\n && date -I > /out/znc_modules_version\n\nWORKDIR /build/znc-modules\n\n\n# aka.pl - Trace nick changes / aka\nRUN git clone https://github.com/MuffinMedic/znc-aka.git \\\n && cd znc-aka && ls -lsa && cp aka.py /build/znc-modules/out\n\n\n# Get backlog from full znc logs, instead of just the buffer\nRUN git clone https://github.com/FruitieX/znc-backlog.git \\\n && cd znc-backlog && make \\\n && ls -lsa && cp backlog.so /build/znc-modules/out\n\n\n# Per-client channel lists, and part 2x to leave\nRUN git clone https://github.com/jpnurmi/znc-chanfilter.git \\\n && cd znc-chanfilter && znc-buildmod chanfilter.cpp \\\n && ls -lsa && cp chanfilter.so /build/znc-modules/out\n\n\n# Part 2x to leave, same unified channels list between all clients\nRUN mkdir partdetach2 && cd partdetach2 \\\n && wget https://gist.githubusercontent.com/Socialery/7058137/raw/2eeb084c5be845d0b4dd37bc5576ce8160140c3c/partdetach2.cpp \\\n && znc-buildmod partdetach2.cpp \\\n && ls -lsa && cp partdetach2.so /build/znc-modules/out\n\n\n# # Push and http get nofitications for mobile etc\n# RUN git clone https://github.com/dreamcat4/znc-push.git \\\n#  && cd znc-push && git checkout feature/jdb8s-cmdline-plus \\\n#  && make command=yes \\\n#  && ls -lsa && cp push.so /build/znc-modules/out\n\n# # Push and http get nofitications for mobile etc\n# RUN git clone https://github.com/jreese/znc-push.git \\\n#  && cd znc-push && make curl=yes \\\n#  && ls -lsa && cp push.so /build/znc-modules/out\n\n# Push and http get nofitications for mobile etc\nRUN git clone https://github.com/jreese/znc-push.git \\\n && cd znc-push && make \\\n && ls -lsa && cp push.so /build/znc-modules/out\n\n\n# Urlbuffer - save seen urls to a local txt file\nRUN git clone https://github.com/dreamcat4/urlbuffer.git \\\n && cd urlbuffer && znc-buildmod urlbuffer.cpp \\\n && ls -lsa && cp urlbuffer.so /build/znc-modules/out\n\n\n# ZNC - Check which modules were built\nRUN ls -lsa /build/znc-modules/out/\n\n# Create tarball in /out/\nRUN cd /build/znc-modules/out && tar -czvf /out/znc-modules-$(cat /out/znc_modules_version)_linux-x86_64.tar.gz * && rm /out/znc-modules-$( cat /out/znc_modules_version)_linux-x86_64.tar.gz\n\n\n# ===\n# atheme - install build time dependancies\nRUN apt-get update -qqy && DEBIAN_FRONTEND=noninteractive apt-get --no-install-recommends install -y \\\n    autoconf automake libtool gettext libpcre3-dev perl && $_apt_clean && rm -rf /var/lib/apt/lists/*;\n\n\n# atheme - Build external modules\nRUN mkdir -p /build/atheme/out\nWORKDIR /build/atheme\n\n# atheme - ./configure && make && make install\nRUN git clone https://github.com/atheme/atheme.git && cd atheme \\\n && atheme_version=\"$(git tag | grep 'atheme-[0-9][0-9]*\\.[0-9][0-9]*\\.[0-9][0-9]*' | sort | tail -1 | sed -e 's/^atheme-//')\" \\\n && echo \"$atheme_version\" > /out/atheme_version \\\n && git checkout \"atheme-${atheme_version}\" \\\n && git submodule update --init \\\n && \\\n    ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --sysconfdir=/etc/atheme --localstatedir=/var \\\n    --localedir=/usr/share/locale --datarootdir=/usr/share --prefix=/usr --enable-fhs-paths \\\n    --enable-contrib --with-pcre --with-perl \\\n\n && make && make install DESTDIR=$PWD/out\n\n\n# Create tarball in /out/\nRUN cd atheme/out && tar -czvf /out/atheme-$(cat /out/atheme_version)_linux-x86_64.tar.gz * && rm /out/atheme-$( cat /out/atheme_version)_linux-x86_64.tar.gz\n\n\n# Upload tvheadend ubuntu .deb pkgs --> bintray.com\nWORKDIR /out\nADD upload-to-bintray /bin/\nRUN chmod +x /bin/upload-to-bintray\n\n\n# Execute our upload script\nADD bintray-env /out/\nRUN upload-to-bintray && rm /out/bintray-env && ls -lsa /out/\n\n\n# Default container settings\nVOLUME /out\nENTRYPOINT [\"/init\",\"/bin/sleep\",\"99999999\"]\n\n\n\n# `configure' configures xtheme 7.4.0-alpha1 to adapt to many kinds of systems.\n\n# Usage: ./configure [OPTION]... [VAR=VALUE]...\n\n# To assign environment variables (e.g., CC, CFLAGS...), specify them as\n# VAR=VALUE.  See below for descriptions of some of the useful variables.\n\n# Defaults for the options are specified in brackets.\n\n# Configuration:\n#   -h, --help              display this help and exit\n#       --help=short        display options specific to this package\n#       --help=recursive    display the short help of all the included packages\n#   -V, --version           display version information and exit\n#   -q, --quiet, --silent   do not print `checking ...' messages\n#       --cache-file=FILE   cache test results in FILE [disabled]\n#   -C, --config-cache      alias for `--cache-file=config.cache'\n#   -n, --no-create         do not create output files\n#       --srcdir=DIR        find the sources in DIR [configure dir or `..']\n\n# Installation directories:\n#   --prefix=PREFIX         install architecture-independent files in PREFIX\n#                           [/build/xtheme/xtheme]\n#   --exec-prefix=EPREFIX   install architecture-dependent files in EPREFIX\n#                           [PREFIX]\n\n# By default, `make install' will install all the files in\n# `/build/xtheme/xtheme/bin', `/build/xtheme/xtheme/lib' etc.  You can specify\n# an installation prefix other than `/build/xtheme/xtheme' using `--prefix',\n# for instance `--prefix=$HOME'.\n\n# For better control, use the options below.\n\n# Fine tuning of the installation directories:\n#   --bindir=DIR            user executables [EPREFIX/bin]\n#   --sbindir=DIR           system admin executables [EPREFIX/sbin]\n#   --libexecdir=DIR        program executables [EPREFIX/libexec]\n#   --sysconfdir=DIR        read-only single-machine data [PREFIX/etc]\n#   --sharedstatedir=DIR    modifiable architecture-independent data [PREFIX/com]\n#   --localstatedir=DIR     modifiable single-machine data [PREFIX/var]\n#   --libdir=DIR            object code libraries [EPREFIX/lib]\n#   --includedir=DIR        C header files [PREFIX/include]\n#   --oldincludedir=DIR     C header files for non-gcc [/usr/include]\n#   --datarootdir=DIR       read-only arch.-independent data root [PREFIX/share]\n#   --datadir=DIR           read-only architecture-independent data [DATAROOTDIR]\n#   --infodir=DIR           info documentation [DATAROOTDIR/info]\n#   --localedir=DIR         locale-dependent data [DATAROOTDIR/locale]\n#   --mandir=DIR            man documentation [DATAROOTDIR/man]\n#   --docdir=DIR            documentation root [DATAROOTDIR/doc/xtheme]\n#   --htmldir=DIR           html documentation [DOCDIR]\n#   --dvidir=DIR            dvi documentation [DOCDIR]\n#   --pdfdir=DIR            pdf documentation [DOCDIR]\n#   --psdir=DIR             ps documentation [DOCDIR]\n\n# System types:\n#   --build=BUILD     configure for building on BUILD [guessed]\n#   --host=HOST       cross-compile to build programs to run on HOST [BUILD]\n\n# Optional Features:\n#   --disable-option-checking  ignore unrecognized --enable/--with options\n#   --disable-FEATURE       do not include FEATURE (same as --enable-FEATURE=no)\n#   --enable-FEATURE[=ARG]  include FEATURE [ARG=yes]\n#   --disable-nls           do not use Native Language Support\n#   --enable-fhs-paths      Use more FHS-like pathnames (for packagers).\n#   --enable-large-net      Enable large network support.\n#   --enable-contrib        Enable contrib modules.\n#   --disable-ssl           don't use OpenSSL to provide more SASL mechanisms\n#   --enable-warnings       Enable compiler warnings\n#   --disable-propolice     Disable propolice protections (for debugging.)\n#   --enable-profile        Enable profiling extensions\n#   --disable-rpath         Disable use of -Wl,-rpath= during linking.\n\n# Optional Packages:\n#   --with-PACKAGE[=ARG]    use PACKAGE [ARG=yes]\n#   --without-PACKAGE       do not use PACKAGE (same as --with-PACKAGE=no)\n#   --with-gnu-ld           assume the C compiler uses GNU ld default=no\n#   --with-libiconv-prefix[=DIR]  search for libiconv in DIR/include and DIR/lib\n#   --without-libiconv-prefix     don't search for libiconv in includedir and libdir\n#   --with-libintl-prefix[=DIR]  search for libintl in DIR/include and DIR/lib\n#   --without-libintl-prefix     don't search for libintl in includedir and libdir\n#   --with-cracklib         Compile cracklib nickserv submodule for checking\n#                           password strength.\n#   --without-ldap          Disable building ldap auth module.\n#   --without-perl          Disable building perl scripting module.\n#   --with-libmowgli[=prefix]\n#                           Specify location of system libmowgli install, or\n#                           \"no\" to force use of internal libmowgli\n#   --with-pcre             Enable PCRE regular expression support\n\n# Some influential environment variables:\n#   CC          C compiler command\n#   CFLAGS      C compiler flags\n#   LDFLAGS     linker flags, e.g. -L<lib dir> if you have libraries in a\n#               nonstandard directory <lib dir>\n#   LIBS        libraries to pass to the linker, e.g. -l<library>\n#   CPPFLAGS    (Objective) C/C++ preprocessor flags, e.g. -I<include dir> if\n#               you have headers in a nonstandard directory <include dir>\n#   CPP         C preprocessor\n#   PKG_CONFIG  path to pkg-config utility\n#   LIBQRENCODE_CFLAGS\n#               C compiler flags for LIBQRENCODE, overriding pkg-config\n#   LIBQRENCODE_LIBS\n#               linker flags for LIBQRENCODE, overriding pkg-config\n#   MOWGLI_CFLAGS\n#               C compiler flags for MOWGLI, overriding pkg-config\n#   MOWGLI_LIBS linker flags for MOWGLI, overriding pkg-config\n#   PCRE_CFLAGS C compiler flags for PCRE, overriding pkg-config\n#   PCRE_LIBS   linker flags for PCRE, overriding pkg-config\n\n# Use these variables to override the choices made by `configure' or to help\n# it to find libraries and programs with nonstandard names/locations.\n\n\n\n"
}