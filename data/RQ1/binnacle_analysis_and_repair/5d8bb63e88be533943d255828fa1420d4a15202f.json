{
  "startTime": 1674242916010,
  "endTime": 1674242916076,
  "originalSmells": [
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 33,
        "lineEnd": 33,
        "columnStart": 5,
        "columnEnd": 21
      }
    },
    {
      "rule": "yarnCacheCleanAfterInstall",
      "position": {
        "lineStart": 12,
        "lineEnd": 12,
        "columnStart": 8,
        "columnEnd": 47
      }
    },
    {
      "rule": "yarnCacheCleanAfterInstall",
      "position": {
        "lineStart": 23,
        "lineEnd": 23,
        "columnStart": 5,
        "columnEnd": 17
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# -- Base images\n# Pinned to specific versions, and updated by Renovate\nFROM node:8.11.3-alpine@sha256:d743b4141b02fcfb8beb68f92b4cd164f60ee457bf2d053f36785bf86de16b0d AS node\nFROM buildkite/puppeteer:1.1.1 AS puppeteer\n\n# -- Production environment\nFROM    node AS production\nENV     NODE_ENV=production\nEXPOSE  3000\nWORKDIR /app\nCOPY    package.json yarn.lock .yarnclean /app/\nRUN apk --no-cache --virtual build-dependencies add python make g++ && \\\n        yarn install --frozen-lockfile --silent && \\\n        apk del build-dependencies && yarn cache clean;\nCOPY    . /app\nRUN     yarn run build\nCMD     [\"yarn\", \"run\", \"start\"]\n\n# -- Development\n# We can just override NODE_ENV and re-run install to get the additional dev\n# deps.\nFROM production as development\nENV  NODE_ENV=development\nRUN yarn install && yarn cache clean;\n\n# -- Test\n# Same deps as development\nFROM development as test\n\n# -- Integration tests\n# Has headless chrome and puppeteer, and adds in Mocha so we can run our tests\n# directly inside it\nFROM puppeteer AS integration-tests\nRUN npm i -g mocha@5 && npm cache clean --force;\nENV  PATH=\"${PATH}:/node_modules/.bin\"\n\n# -- Default target\nFROM production\n"
}