{
  "startTime": 1674243241736,
  "endTime": 1674243242109,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 89,
        "lineEnd": 89,
        "columnStart": 4,
        "columnEnd": 270
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM ubuntu:bionic as base\n\nLABEL maintainer=\"devel@jochenbauer.net\"\nLABEL stage=qt-build-base\n\n# UID/GID injection on build if wanted\nARG USER_UID=\nARG USER_GID=\n\n# In case you have to build behind a proxy\nARG PROXY=\nENV http_proxy=$PROXY\nENV https_proxy=$PROXY\n\n# Name of the regular user. Does not look useful but can save a bit time when changing\nENV QT_USERNAME=qt\n\n# Needed in both builder and qt stages, so has to be defined here\nENV QT_PREFIX=/usr/local\n\n# Install all build dependencies\nRUN apt-get update && apt-get -y dist-upgrade && apt-get -y --no-install-recommends install \\\n\tca-certificates \\\n\tcurl \\\n\tpython \\\n\tgperf \\\n\tbison \\\n\tflex \\\n\tbuild-essential \\\n\tpkg-config \\\n\tlibgl1-mesa-dev \\\n\tlibicu-dev \\\n\t# bc suggested for openssl tests\n\tbc \\\n\tlibssl-dev \\\n\t# git is needed to build openssl in older versions\n\tgit \\\n\t# xcb dependencies\n\tlibfontconfig1-dev \\\n\tlibfreetype6-dev \\\n\tlibx11-dev \\\n\tlibxext-dev \\\n\tlibxfixes-dev \\\n\tlibxi-dev \\\n\tlibxrender-dev \\\n\tlibxcb1-dev \\\n\tlibx11-xcb-dev \\\n\tlibxcb-glx0-dev \\\n\t# bash needed for argument substitution in entrypoint\n\tbash \\\n\t&& apt-get -qq clean \\\n\t&& rm -rf /var/lib/apt/lists/* \\\n\t&& printf \"#!/bin/sh\\nls -lah\" > /usr/local/bin/ll && chmod +x /usr/local/bin/ll\n\n# Adding regular user\nRUN if [ ${USER_GID} ]; then \\\n\taddgroup -g ${USER_GID} ${QT_USERNAME}; \\\n\telse \\\n\taddgroup ${QT_USERNAME}; \\\n\tfi \\\n\t&& if [ ${USER_UID} ]; then \\\n\tuseradd -u ${USER_UID} -g ${QT_USERNAME} ${QT_USERNAME}; \\\n\telse \\\n\tuseradd -g ${QT_USERNAME} ${QT_USERNAME}; \\\n\tfi\n\n# build stage\nFROM base as builder\n\nLABEL stage=qt-build-builder\n\n# QT Version\nARG QT_VERSION_MAJOR=5\nARG QT_VERSION_MINOR=11\nARG QT_VERSION_PATCH=3\n\nENV QT_BUILD_ROOT=/tmp/qt_build\n\n# They switched the tarball naming scheme from 5.9 to 5.10. This ARG shall provide a possibility to reflect that\nARG QT_TARBALL_NAMING_SCHEME=everywhere\n# Providing flag for archived or stable versions\nARG QT_DOWNLOAD_BRANCH=official_releases\n\nENV QT_BUILD_DIR=${QT_BUILD_ROOT}/qt-${QT_TARBALL_NAMING_SCHEME}-src-${QT_VERSION_MAJOR}.${QT_VERSION_MINOR}.${QT_VERSION_PATCH}/build\n\n# Installing from here\nWORKDIR ${QT_BUILD_ROOT}\n\n# Download sources\nRUN curl -f -sSL https://download.qt.io/${QT_DOWNLOAD_BRANCH}/qt/${QT_VERSION_MAJOR}.${QT_VERSION_MINOR}/${QT_VERSION_MAJOR}.${QT_VERSION_MINOR}.${QT_VERSION_PATCH}/single/qt-${QT_TARBALL_NAMING_SCHEME}-src-${QT_VERSION_MAJOR}.${QT_VERSION_MINOR}.${QT_VERSION_PATCH}.tar.xz | tar xJ\n\nWORKDIR ${QT_BUILD_DIR}\n\n# Possibility to make outputs less verbose when required for a ci build\nARG CI_BUILD=\nENV CI_BUILD=${CI_BUILD}\n\n# Speeding up make depending of your system\nARG CORE_COUNT=1\nENV CORE_COUNT=${CORE_COUNT}\n\n# Configure, make, install\nADD buildconfig/configure-${QT_VERSION_MAJOR}.${QT_VERSION_MINOR}.${QT_VERSION_PATCH}.sh configure.sh\n# before running the configuration, adding a directory to copy additional contents to the final image\nRUN mkdir /opt/extra-dependencies && chmod +x ./configure.sh && ./configure.sh ${CORE_COUNT} ${CI_BUILD}\n\nCOPY buildconfig/build.sh build.sh\nRUN ./build.sh ${CI_BUILD} ${CORE_COUNT}\n\n# install it\nRUN make install\n\n# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n# resulting image with environment\n# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nFROM base as qt\n\nENV ENTRYPOINT_DIR=/usr/local/bin\nENV APP_BUILDDIR=/var/build\n\nCOPY --from=builder ${QT_PREFIX} ${QT_PREFIX}\nCOPY --from=builder /opt/extra-dependencies/ /\n# the next copy statement failed often. My only guess is, that the extra dependencies are not existent and somehow that\n# triggers a failure here.... A workaround for similar issues is to put an empty run statement in between: https://github.com/moby/moby/issues/37965\nRUN true\nCOPY entrypoint.sh ${ENTRYPOINT_DIR}\n\nRUN chmod +x ${ENTRYPOINT_DIR}/entrypoint.sh\n\nVOLUME [\"${APP_BUILDDIR}\"]\n\nUSER ${QT_USERNAME}\n\nENTRYPOINT [\"entrypoint.sh\"]"
}