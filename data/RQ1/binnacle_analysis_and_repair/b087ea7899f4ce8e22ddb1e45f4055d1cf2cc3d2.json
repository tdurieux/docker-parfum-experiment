{
  "startTime": 1674250203290,
  "endTime": 1674250203381,
  "originalSmells": [
    {
      "rule": "yumInstallRmVarCacheYum",
      "position": {
        "lineStart": 10,
        "lineEnd": 25,
        "columnStart": 22,
        "columnEnd": 13
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM centos:5\n\nWORKDIR /build\n\n# Centos 5 is EOL and is no longer available from the usual mirrors, so switch\n# to http://vault.centos.org/\nRUN sed -i 's/enabled=1/enabled=0/' /etc/yum/pluginconf.d/fastestmirror.conf\nRUN sed -i 's/mirrorlist/#mirrorlist/' /etc/yum.repos.d/*.repo\nRUN sed -i 's|#\\(baseurl.*\\)mirror.centos.org/centos/$releasever|\\1vault.centos.org/5.11|' /etc/yum.repos.d/*.repo\n\nRUN yum upgrade -y && yum install -y \\\n      curl \\\n      bzip2 \\\n      gcc \\\n      gcc-c++ \\\n      make \\\n      glibc-devel \\\n      perl \\\n      zlib-devel \\\n      file \\\n      xz \\\n      which \\\n      pkgconfig \\\n      wget \\\n      autoconf \\\n      gettext && rm -rf /var/cache/yum\n\nENV PATH=/rustroot/bin:$PATH\nENV LD_LIBRARY_PATH=/rustroot/lib64:/rustroot/lib\nENV PKG_CONFIG_PATH=/rustroot/lib/pkgconfig\nWORKDIR /tmp\nCOPY dist-x86_64-linux/shared.sh /tmp/\n\n# We need a build of openssl which supports SNI to download artifacts from\n# static.rust-lang.org. This'll be used to link into libcurl below (and used\n# later as well), so build a copy of OpenSSL with dynamic libraries into our\n# generic root.\nCOPY dist-x86_64-linux/build-openssl.sh /tmp/\nRUN ./build-openssl.sh\n\n# The `curl` binary on CentOS doesn't support SNI which is needed for fetching\n# some https urls we have, so install a new version of libcurl + curl which is\n# using the openssl we just built previously.\n#\n# Note that we also disable a bunch of optional features of curl that we don't\n# really need.\nCOPY dist-x86_64-linux/build-curl.sh /tmp/\nRUN ./build-curl.sh\n\n# binutils < 2.22 has a bug where the 32-bit executables it generates\n# immediately segfault in Rust, so we need to install our own binutils.\n#\n# See https://github.com/rust-lang/rust/issues/20440 for more info\nCOPY dist-x86_64-linux/build-binutils.sh /tmp/\nRUN ./build-binutils.sh\n\n# libssh2 (a dependency of Cargo) requires cmake 2.8.11 or higher but CentOS\n# only has 2.6.4, so build our own\nCOPY dist-x86_64-linux/build-cmake.sh /tmp/\nRUN ./build-cmake.sh\n\n# Need a newer version of gcc than centos has to compile LLVM nowadays\nCOPY dist-x86_64-linux/build-gcc.sh /tmp/\nRUN ./build-gcc.sh\n\n# CentOS 5.5 has Python 2.4 by default, but LLVM needs 2.7+\nCOPY dist-x86_64-linux/build-python.sh /tmp/\nRUN ./build-python.sh\n\n# Now build LLVM+Clang 7, afterwards configuring further compilations to use the\n# clang/clang++ compilers.\nCOPY dist-x86_64-linux/build-clang.sh /tmp/\nRUN ./build-clang.sh\nENV CC=clang CXX=clang++\n\n# Apparently CentOS 5.5 desn't have `git` in yum, but we're gonna need it for\n# cloning, so download and build it here.\nCOPY dist-x86_64-linux/build-git.sh /tmp/\nRUN ./build-git.sh\n\n# for sanitizers, we need kernel headers files newer than the ones CentOS ships\n# with so we install newer ones here\nCOPY dist-x86_64-linux/build-headers.sh /tmp/\nRUN ./build-headers.sh\n\n# OpenSSL requires a more recent version of perl\n# with so we install newer ones here\nCOPY dist-x86_64-linux/build-perl.sh /tmp/\nRUN ./build-perl.sh\n\nCOPY scripts/sccache.sh /scripts/\nRUN sh /scripts/sccache.sh\n\nENV HOSTS=i686-unknown-linux-gnu\n\nENV RUST_CONFIGURE_ARGS \\\n      --enable-full-tools \\\n      --enable-sanitizers \\\n      --enable-profiler \\\n      --set target.i686-unknown-linux-gnu.linker=clang \\\n      --build=i686-unknown-linux-gnu \\\n      --set rust.jemalloc\nENV SCRIPT python2.7 ../x.py dist --build $HOSTS --host $HOSTS --target $HOSTS\nENV CARGO_TARGET_I686_UNKNOWN_LINUX_GNU_LINKER=clang\n\n# This was added when we switched from gcc to clang. It's not clear why this is\n# needed unfortunately, but without this the stage1 bootstrap segfaults\n# somewhere inside of a build script. The build ends up just hanging instead of\n# actually killing the process that segfaulted, but if the process is run\n# manually in a debugger the segfault is immediately seen as well as the\n# misaligned stack access.\n#\n# Added in #50200 there's some more logs there\nENV CFLAGS -mstackrealign\n\n# When we build cargo in this container, we don't want it to use the system\n# libcurl, instead it should compile its own.\nENV LIBCURL_NO_PKG_CONFIG 1\n\nENV DIST_REQUIRE_ALL_TOOLS 1\n"
}