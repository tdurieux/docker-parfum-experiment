{
  "startTime": 1674235499955,
  "endTime": 1674235500284,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 54,
        "lineEnd": 54,
        "columnStart": 4,
        "columnEnd": 66
      }
    },
    {
      "rule": "wgetUseHttpsUrl",
      "position": {
        "lineStart": 42,
        "lineEnd": 42,
        "columnStart": 4,
        "columnEnd": 81
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 47,
        "lineEnd": 47,
        "columnStart": 40,
        "columnEnd": 108
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 38,
        "lineEnd": 38,
        "columnStart": 101,
        "columnEnd": 149
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 42,
        "lineEnd": 42,
        "columnStart": 85,
        "columnEnd": 125
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 44,
        "lineEnd": 44,
        "columnStart": 82,
        "columnEnd": 113
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 13,
        "lineEnd": 33,
        "columnStart": 25,
        "columnEnd": 4
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 13,
        "lineEnd": 33,
        "columnStart": 25,
        "columnEnd": 4
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "ARG debian_version=7\nFROM debian:$debian_version\n# needed to do again after FROM due to docker limitation\nARG debian_version\n\nENV SOURCE_DIR /root/source\nENV CMAKE_VERSION_BASE 3.8\nENV CMAKE_VERSION $CMAKE_VERSION_BASE.2\nENV NINJA_VERSION 1.7.2\nENV GO_VERSION 1.9.3\nENV GCC_VERSION 4.9.4\n\n# install dependencies\nRUN apt-get -y update && apt-get -y --no-install-recommends install \\\n autoconf \\\n automake \\\n bzip2 \\\n cmake \\\n curl \\\n gcc \\\n gcc-multilib \\\n git \\\n gnupg \\\n g++ \\\n libapr1-dev \\\n libssl-dev \\\n libtool \\\n make \\\n perl \\\n tar \\\n unzip \\\n wget \\\n xutils-dev \\\n zip && rm -rf /var/lib/apt/lists/*;\n\nRUN mkdir $SOURCE_DIR\nWORKDIR $SOURCE_DIR\n\nRUN wget -q https://cmake.org/files/v$CMAKE_VERSION_BASE/cmake-$CMAKE_VERSION-Linux-x86_64.tar.gz && tar zxf cmake-$CMAKE_VERSION-Linux-x86_64.tar.gz && mv cmake-$CMAKE_VERSION-Linux-x86_64 /opt/ && echo 'PATH=/opt/cmake-$CMAKE_VERSION-Linux-x86_64/bin:$PATH' >> ~/.bashrc && rm cmake-$CMAKE_VERSION-Linux-x86_64.tar.gz\n\nRUN wget -q https://github.com/ninja-build/ninja/releases/download/v$NINJA_VERSION/ninja-linux.zip && unzip ninja-linux.zip && mkdir -p /opt/ninja-$NINJA_VERSION/bin && mv ninja /opt/ninja-$NINJA_VERSION/bin && echo 'PATH=/opt/ninja-$NINJA_VERSION/bin:$PATH' >> ~/.bashrc\n\nRUN wget -q https://storage.googleapis.com/golang/go$GO_VERSION.linux-amd64.tar.gz && tar zxf go$GO_VERSION.linux-amd64.tar.gz && mv go /opt/ && echo 'PATH=/opt/go/bin:$PATH' >> ~/.bashrc && echo 'export GOROOT=/opt/go/' >> ~/.bashrc && rm go$GO_VERSION.linux-amd64.tar.gz\n\nRUN wget -q ftp://ftp.gnu.org/gnu/gcc/gcc-$GCC_VERSION/gcc-$GCC_VERSION.tar.gz && tar zxf gcc-$GCC_VERSION.tar.gz && rm gcc-$GCC_VERSION.tar.gz\nWORKDIR gcc-$GCC_VERSION\n\nRUN ./contrib/download_prerequisites && ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --prefix=/opt/gcc-$GCC_VERSION/ --enable-languages=c,c++ && make && make install && echo 'PATH=/opt/gcc-$GCC_VERSION/bin:$PATH' >> ~/.bashrc && echo 'export CC=/opt/gcc-$GCC_VERSION/bin/gcc' >> ~/.bashrc && echo 'export CXX=/opt/gcc-$GCC_VERSION/bin/g++' >> ~/.bashrc\n\nRUN rm -rf $SOURCE_DIR\n\nARG java_version=1.8\nENV JAVA_VERSION $java_version\n# installing java with jabba\nRUN curl -f -sL https://github.com/shyiko/jabba/raw/master/install.sh | JABBA_COMMAND=\"install $JAVA_VERSION -o /jdk\" bash\n\nRUN echo 'export JAVA_HOME=\"/jdk\"' >> ~/.bashrc\nRUN echo 'PATH=/jdk/bin:$PATH' >> ~/.bashrc\n"
}