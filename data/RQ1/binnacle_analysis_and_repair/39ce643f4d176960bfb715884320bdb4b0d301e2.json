{
  "startTime": 1674250250724,
  "endTime": 1674250251372,
  "originalSmells": [
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 8,
        "lineEnd": 8,
        "columnStart": 5,
        "columnEnd": 107
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 13,
        "lineEnd": 15,
        "columnStart": 5,
        "columnEnd": 115
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 8,
        "lineEnd": 8,
        "columnStart": 5,
        "columnEnd": 107
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM ubuntu:18.04\n\nLABEL author=\"xiaobo <peterwillcn@gmail.com>\" maintainer=\"Xiaobo <peterwillcn@gmail.com> Huang-Ming Huang <huangh@objectcomputing.com> Winlin <pcguangtao@gmail.com>\" version=\"0.1.2\" \\\n  description=\"This is a base image for building boscore/bos\"\n\nRUN echo 'APT::Install-Recommends 0;' >> /etc/apt/apt.conf.d/01norecommends \\\n  && echo 'APT::Install-Suggests 0;' >> /etc/apt/apt.conf.d/01norecommends \\\n  && apt-get update \\\n  && DEBIAN_FRONTEND=noninteractive apt-get --no-install-recommends install -y sudo wget curl net-tools ca-certificates unzip gnupg && rm -rf /var/lib/apt/lists/*;\n\nRUN echo \"deb http://apt.llvm.org/bionic/ llvm-toolchain-bionic main\" >> /etc/apt/sources.list.d/llvm.list \\\n  && wget -O - https://apt.llvm.org/llvm-snapshot.gpg.key|sudo apt-key add - \\\n  && apt-get update \\\n  && DEBIAN_FRONTEND=noninteractive apt-get --no-install-recommends install -y git-core automake autoconf libtool build-essential pkg-config libtool \\\n     mpi-default-dev libicu-dev python-dev python3-dev libbz2-dev zlib1g-dev libssl-dev libgmp-dev \\\n     clang-4.0 lldb-4.0 lld-4.0 llvm-4.0-dev libclang-4.0-dev ninja-build libusb-1.0-0-dev curl libcurl4-gnutls-dev \\\n  && rm -rf /var/lib/apt/lists/*\n\nRUN update-alternatives --install /usr/bin/clang clang /usr/lib/llvm-4.0/bin/clang 400 \\\n  && update-alternatives --install /usr/bin/clang++ clang++ /usr/lib/llvm-4.0/bin/clang++ 400\n\nRUN wget https://cmake.org/files/v3.9/cmake-3.9.6-Linux-x86_64.sh \\\n    && bash cmake-3.9.6-Linux-x86_64.sh --prefix=/usr/local --exclude-subdir --skip-license \\\n    && rm cmake-3.9.6-Linux-x86_64.sh\n\nENV CC clang\nENV CXX clang++\n\nRUN wget https://dl.bintray.com/boostorg/release/1.67.0/source/boost_1_67_0.tar.bz2 -O - | tar -xj \\\n    && cd boost_1_67_0 \\\n    && ./bootstrap.sh --prefix=/usr/local \\\n    && echo 'using clang : 4.0 : clang++-4.0 ;' >> project-config.jam \\\n    && ./b2 -d0 -j$(nproc) --with-thread --with-date_time --with-system --with-filesystem --with-program_options \\\n       --with-signals --with-serialization --with-chrono --with-test --with-context --with-locale --with-coroutine --with-iostreams toolset=clang link=static install \\\n    && cd .. && rm -rf boost_1_67_0\n\nRUN wget https://github.com/mongodb/mongo-c-driver/releases/download/1.10.2/mongo-c-driver-1.10.2.tar.gz -O - | tar -xz \\\n    && cd mongo-c-driver-1.10.2 \\\n    && mkdir cmake-build && cd cmake-build \\\n    && cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=/usr/local -DENABLE_BSON=ON \\\n\t\t-DENABLE_SSL=OPENSSL -DENABLE_AUTOMATIC_INIT_AND_CLEANUP=OFF -DENABLE_STATIC=ON .. \\\n    && make -j$(nproc) \\\n    && make install \\\n    && cd ../../ && rm -rf mongo-c-driver-1.10.2\n\nRUN git clone --depth 1 --single-branch --branch release_40 https://github.com/llvm-mirror/llvm.git \\\n    && git clone --depth 1 --single-branch --branch release_40 https://github.com/llvm-mirror/clang.git llvm/tools/clang \\\n    && cd llvm \\\n    && cmake -H. -Bbuild -GNinja -DCMAKE_INSTALL_PREFIX=/opt/wasm -DLLVM_TARGETS_TO_BUILD= -DLLVM_EXPERIMENTAL_TARGETS_TO_BUILD=WebAssembly -DCMAKE_BUILD_TYPE=Release  \\\n    && cmake --build build --target install \\\n    && cd .. && rm -rf llvm\n\nRUN git clone --depth 1 -b releases/v3.3 https://github.com/mongodb/mongo-cxx-driver \\\n    && cd mongo-cxx-driver/build \\\n    && cmake -DBUILD_SHARED_LIBS=OFF -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=/usr/local .. \\\n    && make -j$(nproc) \\\n    && make install \\\n    && cd ../../ && rm -rf mongo-cxx-driver\n\nRUN git clone --depth 1 -b v0.11.6 https://github.com/boscore/librdkafka.git \\\n    && cd librdkafka/ \\\n    && cmake -H. -B_cmake_build \\\n    && cmake -DRDKAFKA_BUILD_STATIC=1 --build _cmake_build \\\n    && cd _cmake_build \\\n    && make install \\\n    && cd ../../ && rm -rf librdkafka\n\nRUN git clone --depth 1 -b 0.2 https://github.com/boscore/cppkafka.git \\\n    && cd cppkafka/ \\\n    && mkdir build && cd build \\\n    && cmake -DCPPKAFKA_RDKAFKA_STATIC_LIB=1 -DCPPKAFKA_BUILD_SHARED=0 .. \\\n    && make install \\\n    && cd ../../ && rm -rf cppkafka\n"
}