{
  "startTime": 1674243238743,
  "endTime": 1674243239431,
  "originalSmells": [
    {
      "rule": "wgetUseHttpsUrl",
      "position": {
        "lineStart": 124,
        "lineEnd": 124,
        "columnStart": 4,
        "columnEnd": 59
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 124,
        "lineEnd": 124,
        "columnStart": 107,
        "columnEnd": 118
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 88,
        "lineEnd": 88,
        "columnStart": 106,
        "columnEnd": 145
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 19,
        "lineEnd": 40,
        "columnStart": 22,
        "columnEnd": 9
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 44,
        "lineEnd": 44,
        "columnStart": 317,
        "columnEnd": 362
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 116,
        "lineEnd": 117,
        "columnStart": 22,
        "columnEnd": 15
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "############################################################\n# Dockerfile for ENCODE DCC atac-seq-pipeline\n# Based on Ubuntu 16.04\n############################################################\n\n# IMPORTANT!\n# If you install python2/3 packages using pip/pip3\n#  and not sure about math library dependencies like BLAS and numpy,\n#  then install with --no-dependencies\n\n# Set the base image to Ubuntu 16.04\n#FROM ubuntu:16.04\nFROM ubuntu@sha256:e4a134999bea4abb4a27bc437e6118fdddfb172e1b9d683129b74d254af51675\n\n# File Author / Maintainer\nMAINTAINER Jin Lee\n\n# Update the repository sources list\n# Install base packages: git, python2/3, java, R\nRUN apt-get update && apt-get install --no-install-recommends -y \\\n    libncurses5-dev \\\n    libncursesw5-dev \\\n    libcurl4-openssl-dev \\\n    libfreetype6-dev \\\n    zlib1g-dev \\\n    python \\\n    python-setuptools \\\n    python-pip \\\n    python3 \\\n    python3-setuptools \\\n    python3-pip \\\n    git \\\n    wget \\\n    unzip \\\n    ghostscript \\\n    pkg-config \\\n    libboost-dev \\\n    r-base-core \\\n    default-jre \\\n    apt-transport-https \\\n    tabix \\\n&& rm -rf /var/lib/apt/lists/*\n\n# Install Intel MKL for BLAS\nRUN wget https://apt.repos.intel.com/intel-gpg-keys/GPG-PUB-KEY-INTEL-SW-PRODUCTS-2019.PUB && apt-key add GPG-PUB-KEY-INTEL-SW-PRODUCTS-2019.PUB && rm -rf GPG-PUB-KEY-INTEL-SW-PRODUCTS-2019.PUB && sh -c 'echo deb https://apt.repos.intel.com/mkl all main > /etc/apt/sources.list.d/intel-mkl.list' && apt-get update && apt-get install --no-install-recommends intel-mkl-64bit-2018.0-033 -y && rm -rf /var/lib/apt/lists/*\nENV LD_LIBRARY_PATH=${LD_LIBRARY_PATH}:/opt/intel/compilers_and_libraries_2018.0.128/linux/mkl/lib/intel64_lin\n\n# Install basic python2/3 packages\nRUN pip install --no-cache-dir common python-dateutil cython==0.27.3 && \\\n    pip3 install --no-cache-dir common python-dateutil cython==0.27.3\n\n# Make directory for all softwares\nRUN mkdir /software\nWORKDIR /software\nENV PATH=\"/software:${PATH}\"\n\n# Install numpy 1.11.3 (python2/3, linked with MKL)\nRUN git clone --branch v1.11.3 https://github.com/numpy/numpy && cd numpy && \\\n    /bin/bash -c 'echo -e \"[mkl]\\nlibrary_dirs = /opt/intel/compilers_and_libraries_2018/linux/mkl/lib/intel64\\ninclude_dirs = /opt/intel/compilers_and_libraries_2018/linux/mkl/include\\nmkl_libs = mkl_rt\\nlapack_libs =\" > site.cfg' && python setup.py install && python3 setup.py install && cd ../ && rm -rf numpy*\n\n# Install scipy 1.0.0 (python2/3)\nRUN git clone --branch v1.0.0 --single-branch https://github.com/scipy/scipy && \\\n    cd scipy && python setup.py install && python3 setup.py install && cd ../ && rm -rf scipy*\n\n# Install matplotlib 1.5.1 (python2/3)\nRUN git clone --branch v1.5.1 --single-branch https://github.com/matplotlib/matplotlib && \\\n    cd matplotlib && python setup.py install && python3 setup.py install && cd ../ && rm -rf matplotlib*\n\n# Install MACS2 2.1.1.20160309 (python2)\nRUN pip install --no-cache-dir --no-dependencies macs2==2.1.1.20160309\n\n# Install IDR 2.0.4.2 (python3)\nRUN git clone --branch 2.0.4.2 --single-branch https://github.com/kundajelab/idr && \\\n    cd idr && python3 setup.py install && cd ../ && rm -rf idr*\n\n# Install samtools 1.2\nRUN git clone --branch 1.2 --single-branch https://github.com/samtools/samtools.git && \\\n    git clone --branch 1.2 --single-branch https://github.com/samtools/htslib.git && \\\n    cd samtools && make && make install && cd ../ && rm -rf samtools* htslib*\n\n# Install bedtools 2.26.0\nRUN git clone --branch v2.26.0 --single-branch https://github.com/arq5x/bedtools2.git && \\\n    cd bedtools2 && make && make install && cd ../ && rm -rf bedtools2*\n\n# Install Picard 2.10.6\nRUN wget https://github.com/broadinstitute/picard/releases/download/2.10.6/picard.jar && chmod +x picard.jar\n\n# Install sambamba 0.6.6\nRUN wget https://github.com/lomereiter/sambamba/releases/download/v0.6.6/sambamba_v0.6.6_linux.tar.bz2 && tar -xvjf sambamba_v0.6.6_linux.tar.bz2 && mv sambamba_v0.6.6 sambamba && rm -rf sambamba_* && rm sambamba_v0.6.6_linux.tar.bz2\n\n# Install R packages\nRUN echo \"r <- getOption('repos'); r['CRAN'] <- 'http://cran.r-project.org'; options(repos = r);\" > ~/.Rprofile && \\\n    Rscript -e \"install.packages('snow')\" && \\\n    Rscript -e \"install.packages('snowfall')\" && \\\n    Rscript -e \"install.packages('bitops')\" && \\\n    Rscript -e \"install.packages('caTools')\" && \\\n    Rscript -e \"source('http://bioconductor.org/biocLite.R'); biocLite('Rsamtools')\"\n\n# Install R package spp 1.13 (required for phantompeakqualtools)\nRUN wget https://github.com/hms-dbmi/spp/archive/1.13.tar.gz && Rscript -e \"install.packages('./1.13.tar.gz')\" && rm -f 1.13.tar.gz\n\n# Install phantompeakqualtools 1.2\nRUN wget https://github.com/kundajelab/phantompeakqualtools/archive/1.2.tar.gz && tar -xvf 1.2.tar.gz && rm -f 1.2.tar.gz\nENV PATH=\"/software/phantompeakqualtools-1.2:${PATH}\"\n\n# Install cutadapt 1.9.1\nRUN pip install --no-cache-dir --no-dependencies cutadapt==1.9.1\n\n# Install Bowtie2 2.2.6\nRUN wget https://github.com/BenLangmead/bowtie2/releases/download/v2.2.6/bowtie2-2.2.6-linux-x86_64.zip && \\\n    unzip bowtie2-2.2.6-linux-x86_64.zip && mv bowtie2*/bowtie2* . && rm -rf bowtie2-2.2.6*\n\n# Install pyfaidx (for building genome data)\nRUN pip install --no-cache-dir pyfaidx==0.4.7.1\n\n# Install some apt packages (liblzo2, libgsl2) for ATAQC\nRUN apt-get update && apt-get install --no-install-recommends -y \\\n    liblzo2-dev \\\n&& rm -rf /var/lib/apt/lists/*\n\n# Install python packages for ATAQC (pysam, pybedtools, metaseq, pandas, jinja2)\nRUN pip install --no-cache-dir pysam==0.8.2.1 pybedtools==0.6.9 pandas==0.21.1 scikit-learn==0.20 metaseq==0.5.6 jinja2==2.10\n\n# Install gsl 1.16\nRUN wget https://gnu.mirror.vexxhost.com/gsl/gsl-1.16.tar.gz && tar -zxvf gsl-1.16.tar.gz && cd gsl-1.16 && ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" && make && make install && cd .. && rm -rf gsl-1.16 gsl-1.16.tar.gz\nENV LD_LIBRARY_PATH=${LD_LIBRARY_PATH}:/usr/local/lib\n\n# Install preseq 2.0.3 for ATAQC (build from source)\nRUN git clone --branch v2.0.3 --single-branch --recursive https://github.com/smithlabcode/preseq preseq_2.0.3 && cd preseq_2.0.3 && make && cd ../ && mv preseq_2.0.3/preseq . && rm -rf preseq_2.0.3\n\n# Install bgzip/tabix for Wash U browser track (hammock type)\n#RUN apt-get update && apt-get install -y tabix && rm -rf /var/lib/apt/lists/*\n\n# Install python jsondiff\nRUN pip install --no-cache-dir jsondiff==1.1.1\n\n# Install UCSC tools (v377)\nRUN git clone https://github.com/ENCODE-DCC/kentUtils_bin_v377\nENV PATH=${PATH}:/software/kentUtils_bin_v377/bin\nENV LD_LIBRARY_PATH=${LD_LIBRARY_PATH}:/software/kentUtils_bin_v377/lib\n\n# Prevent conflict with locally installed python outside of singularity container\nENV PYTHONNOUSERSITE=True\n\n# Get ENCODE atac-seq-pipeline container repository\n# This COPY assumes the build context is the root of the atac-seq-pipeline repo\n# and it gets whatever is checked out plus local modifications\n# so the buildling command should:\n# cd [GIT_REPO_DIR] && docker build -f docker_images/pipeline/Dockerfile .\nRUN mkdir -p atac-seq-pipeline/src\nCOPY src atac-seq-pipeline/src/\nCOPY atac.wdl atac-seq-pipeline/\nENV PATH=\"/software/atac-seq-pipeline:/software/atac-seq-pipeline/src:${PATH}\"\n\n# make some temporary directories\nRUN for i in $(seq 0 9); do mkdir -p /mnt/ext_$i; done\n\n#ENTRYPOINT [\"/bin/bash\",\"-c\"]\n"
}