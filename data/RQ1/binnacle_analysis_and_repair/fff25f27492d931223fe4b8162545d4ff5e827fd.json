{
  "startTime": 1674244771823,
  "endTime": 1674244772072,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 44,
        "lineEnd": 44,
        "columnStart": 7,
        "columnEnd": 53
      }
    },
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 65,
        "lineEnd": 65,
        "columnStart": 4,
        "columnEnd": 15
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 7,
        "lineEnd": 7,
        "columnStart": 7,
        "columnEnd": 37
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 12,
        "lineEnd": 12,
        "columnStart": 7,
        "columnEnd": 36
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 16,
        "lineEnd": 16,
        "columnStart": 7,
        "columnEnd": 65
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 40,
        "lineEnd": 43,
        "columnStart": 7,
        "columnEnd": 13
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 45,
        "lineEnd": 45,
        "columnStart": 7,
        "columnEnd": 32
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM php:7.3-fpm\n\n# Install PHP extensions/modules.\nRUN apt-get update -y \\\n    && docker-php-ext-install pdo pdo_mysql \\\n    && docker-php-ext-install mbstring \\\n    && docker-php-ext-install tokenizer \\\n    && apt-get install --no-install-recommends -y libxml2-dev \\\n    && docker-php-ext-install xml \\\n    && docker-php-ext-install ctype \\\n    && docker-php-ext-install json \\\n    && docker-php-ext-install bcmath \\\n    && apt-get install --no-install-recommends -y libzip-dev \\\n    && docker-php-ext-install zip \\\n    && docker-php-ext-install opcache \\\n    && docker-php-ext-install exif \\\n    && apt-get install --no-install-recommends -y libjpeg-dev libpng-dev libfreetype6-dev \\\n    && docker-php-ext-configure gd --with-jpeg-dir=/usr/include --with-png-dir=/usr/include --with-freetype-dir=/usr/include \\\n    && docker-php-ext-install gd \\\n    && apt-get install -y libmagickwand-dev --no-install-recommends \\\n    && pecl install imagick \\\n    && pecl install redis \\\n    && docker-php-ext-enable --ini-name pecl.ini imagick redis \\\n    && apt-get -y clean \\\n    && rm -rf /var/lib/apt/lists/*\n\n# Copy PHP configuration.\nCOPY ./php.ini-production /usr/local/etc/php/php.ini\n\n# Copy Imagick configuration.\nCOPY ./policy.xml /etc/ImageMagick-6/policy.xml\n\n# Install Composer.\nRUN php -r \"copy('https://getcomposer.org/installer', 'composer-setup.php');\" \\\n    && php -r \"if (hash_file('SHA384', 'composer-setup.php') === trim(file_get_contents('https://composer.github.io/installer.sig'))) { echo 'Installer verified'; } else { echo 'Installer corrupt'; unlink('composer-setup.php'); } echo PHP_EOL;\" \\\n    && php composer-setup.php --install-dir=/usr/local/bin --filename=composer \\\n    && php -r \"unlink('composer-setup.php');\"\n\n# Install Node.js, npm.\nRUN apt-get update -y \\\n    && apt-get install --no-install-recommends -y \\\n        apt-transport-https \\\n        lsb-release \\\n        gnupg \\\n    && curl -f -sL https://deb.nodesource.com/setup_10.x | bash - \\\n    && apt-get install --no-install-recommends -y nodejs \\\n    && apt-get -y clean \\\n    && rm -rf /var/lib/apt/lists/*\n\n# Change the working directory.\nWORKDIR /var/www/app\n\n# Install the backend application dependencies.\nCOPY ./database ./database\nCOPY ./composer.json ./composer.json\nCOPY ./composer.lock ./composer.lock\nRUN composer install \\\n --no-interaction \\\n --no-plugins \\\n --no-scripts \\\n --prefer-dist\n\n# Install the frontend application dependencies.\nCOPY ./package.json ./package.json\nCOPY ./package-lock.json ./package-lock.json\nRUN npm install && npm cache clean --force;\n\n# Copy the application source code.\nCOPY . .\n\n# Build the frontend application bundle.\nRUN npm run prod\n\n# Generate REST API documentation.\nRUN ./node_modules/.bin/apidoc -i ./src/api -o ./docs/rest_api/dist\n"
}