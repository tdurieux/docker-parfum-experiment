{
  "startTime": 1674244297432,
  "endTime": 1674244297594,
  "originalSmells": [
    {
      "rule": "yumInstallRmVarCacheYum",
      "position": {
        "lineStart": 4,
        "lineEnd": 4,
        "columnStart": 4,
        "columnEnd": 31
      }
    },
    {
      "rule": "yumInstallRmVarCacheYum",
      "position": {
        "lineStart": 5,
        "lineEnd": 23,
        "columnStart": 4,
        "columnEnd": 12
      }
    },
    {
      "rule": "yumInstallRmVarCacheYum",
      "position": {
        "lineStart": 27,
        "lineEnd": 27,
        "columnStart": 4,
        "columnEnd": 24
      }
    },
    {
      "rule": "yumInstallRmVarCacheYum",
      "position": {
        "lineStart": 36,
        "lineEnd": 36,
        "columnStart": 4,
        "columnEnd": 26
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# FROM ehayes/manageiq_org_base:latest\nFROM manageiq/ruby:latest\nMAINTAINER Eric Hayes <eric@erichayes.net>\n\nRUN yum -y install epel-release && rm -rf /var/cache/yum\nRUN yum -y install \\\n  bison \\\n  bzip2 \\\n  curl-devel \\\n  gcc \\\n  gcc-c++ \\\n  git \\\n  libffi \\\n  libffi-devel \\\n  libxml2-devel \\\n  libxslt-devel \\\n  libyaml-devel \\\n  make \\\n  openssl-devel \\\n  readline-devel \\\n  tar \\\n  vim-enhanced \\\n  wget \\\n  zlib-devel && rm -rf /var/cache/yum\n\n# Install Nginx & setup\n# ----------------------------------------\nRUN yum -y install nginx && rm -rf /var/cache/yum\n\n# forward request and error logs to docker log collector\nRUN ln -sf /dev/stdout /var/log/nginx/access.log \\\n    && ln -sf /dev/stderr /var/log/nginx/error.log\n\n\n# Install Certbot for SSL renewal\n# ----------------------------------------\nRUN yum -y install certbot && rm -rf /var/cache/yum\n\n# Install Bundler\n# ----------------------------------------\nRUN gem install bundler\n\n# ENV vars\n# ----------------------------------------\n\n# Believe it or not, for Sass processing:\nENV LC_LANG=\"en_US.UTF-8\"\nENV LANG=\"en_US.UTF-8\"\n\n# Effects things like whether Google Analytics is included\nENV JEKYLL_ENV=production\n\n# Effects Ruby libs loaded\nENV MIQ_ENV=production\n\n# Shell commands are logged, not run\n# MIQ_DEBUG=1\n\n# Change logging destination\n# MIQ_LOG_DEST\n\n# Absolute path for Bundler\nENV MIQ_BUNDLER=/usr/local/bin/bundler\n\nENV MIQ_BASE_DIR=/srv/build\nENV MIQ_DOCS_DIR=/srv/build/site/docs\n\nENV MIQ_GUIDES_REPO=https://github.com/manageiq/guides\nENV MIQ_GUIDES_BRANCH=master\n\nENV MIQ_SITE_DEST=/srv/manageiq_org\nENV MIQ_SITE_SOURCE=${MIQ_BASE_DIR}/site\nENV MIQ_SITE_BRANCH=master\n\nENV MIQ_REF_REPO=https://github.com/manageiq/manageiq_docs\nENV MIQ_REF_BRANCH=master\n# ENV MIQ_REF_TMP=/tmp/manageiq_docs\n# ENV MIQ_REF_SRC=_preview/manageiq/${MIQ_REF_BRANCH}\n# ENV MIQ_REF_DIR=${MIQ_DOCS_DIR}/reference/latest\n\n# Prime the pump bundler gems (hopefully this is cached)\n# ----------------------------------------\n\nRUN mkdir -p /srv/base\nCOPY /Gemfile /srv/base\n\nWORKDIR /srv/base\nRUN ${MIQ_BUNDLER} install\nRUN gem install ascii_binder\n\n# Nginx configs\nRUN mv /etc/nginx/nginx.conf /etc/nginx/nginx.conf.dist\nCOPY config/nginx.conf /etc/nginx/nginx.conf\nCOPY config/manageiq_org.conf /etc/nginx/conf.d/\n\n# Site\nRUN mkdir -p ${MIQ_SITE_DEST} ${MIQ_BASE_DIR}\nCOPY / ${MIQ_BASE_DIR}\nWORKDIR ${MIQ_BASE_DIR}\nRUN ${MIQ_BUNDLER} install --without development test\n\n# Build site (working dir == /srv/build)\nRUN /bin/bash -l -c \"exe/miq build all\"\nRUN chown -R nginx: ${MIQ_SITE_DEST}\n\n# Run webserver\nVOLUME \"/etc/letsencrypt\"\nEXPOSE 80 443\nCMD [\"nginx\", \"-g\", \"daemon off;\"]\n"
}