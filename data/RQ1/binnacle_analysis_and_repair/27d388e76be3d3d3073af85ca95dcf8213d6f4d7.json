{
  "startTime": 1674240437633,
  "endTime": 1674240437839,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 74,
        "lineEnd": 74,
        "columnStart": 4,
        "columnEnd": 115
      }
    },
    {
      "rule": "curlUseHttpsUrl",
      "position": {
        "lineStart": 38,
        "lineEnd": 39,
        "columnStart": 4,
        "columnEnd": 111
      }
    },
    {
      "rule": "curlUseHttpsUrl",
      "position": {
        "lineStart": 74,
        "lineEnd": 74,
        "columnStart": 4,
        "columnEnd": 115
      }
    },
    {
      "rule": "wgetUseHttpsUrl",
      "position": {
        "lineStart": 19,
        "lineEnd": 19,
        "columnStart": 4,
        "columnEnd": 64
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# Docker file inspired by\n## https://github.com/jenkinsci/docker\n## https://github.com/docker-library/java/blob/b4a3c296023e590e410f645ab83d3c11a30cf535/openjdk-8-jdk/Dockerfile\n## https://github.com/zulu-openjdk/zulu-openjdk/blob/master/debian/8u45-8.7.0.5/Dockerfile\n## https://github.com/docker-library/buildpack-deps/blob/a0a59c61102e8b079d568db69368fb89421f75f2/sid/scm/Dockerfile\n## https://github.com/docker-library/buildpack-deps/blob/a0a59c61102e8b079d568db69368fb89421f75f2/sid/curl/Dockerfile\n\nFROM cantara/debian-sid-zulu-jdk8\n\nMAINTAINER erik-dev@fjas.no\n\n# Jenkins is a strange product. It is often necessary to be able to log in to image and fix stuff.\nRUN apt-get update && apt-get install -y --no-install-recommends \\\n               vim git openssh-client \\\n        && rm -rf /var/lib/apt/lists/*\n\n\n# Install StartCom certs\nENV JAVA_HOME /usr/lib/jvm/zulu-8-amd64/\nRUN wget --quiet --continue https://www.startssl.com/certs/ca.crt \\\n\t&& keytool -import -trustcacerts -keystore $JAVA_HOME/jre/lib/security/cacerts -storepass changeit -noprompt -alias startcom.ca -file ca.crt \\\n\t&& rm ca.crt\nRUN wget --quiet --continue https://www.startssl.com/certs/sca.server1.crt \\\n\t&& keytool -import -trustcacerts -keystore $JAVA_HOME/jre/lib/security/cacerts -storepass changeit -noprompt -alias startcom.ca.sub.class1 -file sca.server1.crt \\ \n\t&& rm sca.server1.crt\nRUN wget --quiet --continue https://www.startssl.com/certs/sca.server2.crt \\ \n\t&& keytool -import -trustcacerts -keystore $JAVA_HOME/jre/lib/security/cacerts -storepass changeit -noprompt -alias startcom.ca.sub.class2 -file sca.server2.crt \\\n\t&& rm sca.server2.crt\nRUN wget --quiet --continue https://www.startssl.com/certs/sca.server3.crt \\\n        && keytool -import -trustcacerts -keystore $JAVA_HOME/jre/lib/security/cacerts -storepass changeit -noprompt -alias startcom.ca.sub.class3 -file sca.server3.crt \\\n        && rm sca.server3.crt\nRUN wget --quiet --continue https://www.startssl.com/certs/sca.server4.crt \\\n        && keytool -import -trustcacerts -keystore $JAVA_HOME/jre/lib/security/cacerts -storepass changeit -noprompt -alias startcom.ca.sub.class4 -file sca.server4.crt \\\n        && rm sca.server4.crt\n\n### Install maven\nENV MAVEN_VERSION 3.3.3\n\nRUN curl --fail --silent --show-error --location --retry 3 \\\n    https://archive.apache.org/dist/maven/maven-3/$MAVEN_VERSION/binaries/apache-maven-$MAVEN_VERSION-bin.tar.gz \\\n  | tar xzf - -C /usr/share \\\n  && mv /usr/share/apache-maven-$MAVEN_VERSION /usr/share/maven \\\n  && ln -s /usr/share/maven/bin/mvn /usr/bin/mvn\n\nENV MAVEN_HOME /usr/share/maven\n\n#CMD [\"mvn\"]\n\n\n### Install Jenkins\nENV JENKINS_HOME /var/jenkins_home\n\n# Jenkins is ran with user `jenkins`, uid = 1000\n# If you bind mount a volume from host/vloume from a data container,\n# ensure you use same uid\nRUN useradd -d \"$JENKINS_HOME\" -u 1000 -m -s /bin/bash jenkins\n\n# Jenkins home directoy is a volume, so configuration and build history\n# can be persisted and survive image upgrades\nVOLUME /var/jenkins_home\n\n# `/usr/share/jenkins/ref/` contains all reference configuration we want\n# to set on a fresh new installation. Use it to bundle additional plugins\n# or config file with your custom jenkins Docker image.\nRUN mkdir -p /usr/share/jenkins/ref/init.groovy.d\nCOPY init.groovy /usr/share/jenkins/ref/init.groovy.d/tcp-slave-agent-port.groovy\n\n# ENV JENKINS_VERSION 1.609.3\nENV JENKINS_VERSION 1.651.1\n#ENV JENKINS_SHA 96ee85602a41d68c164fb54d4796be5d1d9cc5d0\nENV JENKINS_SHA bbfe03f35aad4e76ab744543587a04de0c7fe766\n\n# could use ADD but this one does not check Last-Modified header\n# see https://github.com/docker/docker/issues/8331\nRUN curl -f -L https://mirrors.jenkins-ci.org/war-stable/$JENKINS_VERSION/jenkins.war -o /usr/share/jenkins/jenkins.war\n#\\\n#  && echo \"$JENKINS_SHA /usr/share/jenkins/jenkins.war\" | sha1sum -c -\n\nENV JENKINS_UC https://updates.jenkins-ci.org\nRUN chown -R jenkins \"$JENKINS_HOME\" /usr/share/jenkins/ref\n\n# for main web interface:\nEXPOSE 8080\n\n# will be used by attached slave agents:\n#EXPOSE 50000\n\nENV COPY_REFERENCE_FILE_LOG /var/log/copy_reference_file.log\nRUN touch $COPY_REFERENCE_FILE_LOG && chown jenkins.jenkins $COPY_REFERENCE_FILE_LOG\n\nUSER jenkins\n\nCOPY jenkins.sh /usr/local/bin/jenkins.sh\nENTRYPOINT [\"/usr/local/bin/jenkins.sh\"]\n\n# from a derived Dockerfile, can use `RUN plugin.sh active.txt` to setup /usr/share/jenkins/ref/plugins from a support bundle\nCOPY plugins.sh /usr/local/bin/plugins.sh\n\n\n# preconfigure maven location\nCOPY hudson.tasks.Maven.xml /usr/share/jenkins/ref/hudson.tasks.Maven.xml\n## not working properly\n# https://raw.githubusercontent.com/paoloantinori/dockerfiles/master/centos/jenkins/Dockerfile\n#RUN printf \"<?xml version='1.0' encoding='UTF-8'?> <hudson.tasks.Maven_-DescriptorImpl> <installations> <hudson.tasks.Maven_-MavenInstallation> <name>maven</name> <home>/usr/share/maven2</home> <properties/> </hudson.tasks.Maven_-MavenInstallation> </installations> </hudson.tasks.Maven_-DescriptorImpl>\" >>  $JENKINS_HOME/hudson.tasks.Maven.xml ; chown jenkins:jenkins $JENKINS_HOME/hudson.tasks.Maven.xml\n\n#Ensure JDK path is set\nCOPY config.xml /usr/share/jenkins/ref/config.xml\n\nCOPY plugins.txt /usr/share/jenkins/plugins.txt\nRUN /usr/local/bin/plugins.sh /usr/share/jenkins/plugins.txt\n"
}