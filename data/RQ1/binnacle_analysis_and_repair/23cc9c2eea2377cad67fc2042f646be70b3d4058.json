{
  "startTime": 1674249930425,
  "endTime": 1674249930655,
  "originalSmells": [
    {
      "rule": "wgetUseHttpsUrl",
      "position": {
        "lineStart": 23,
        "lineEnd": 23,
        "columnStart": 4,
        "columnEnd": 55
      }
    },
    {
      "rule": "aptGetInstallUseY",
      "position": {
        "lineStart": 9,
        "lineEnd": 9,
        "columnStart": 26,
        "columnEnd": 45
      }
    },
    {
      "rule": "aptGetInstallUseY",
      "position": {
        "lineStart": 10,
        "lineEnd": 19,
        "columnStart": 4,
        "columnEnd": 21
      }
    },
    {
      "rule": "aptGetInstallUseY",
      "position": {
        "lineStart": 27,
        "lineEnd": 27,
        "columnStart": 4,
        "columnEnd": 33
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 27,
        "lineEnd": 27,
        "columnStart": 4,
        "columnEnd": 33
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 10,
        "lineEnd": 19,
        "columnStart": 4,
        "columnEnd": 21
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 27,
        "lineEnd": 27,
        "columnStart": 4,
        "columnEnd": 33
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 27,
        "lineEnd": 27,
        "columnStart": 4,
        "columnEnd": 33
      }
    }
  ],
  "repairedSmells": [
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 10,
        "lineEnd": 19,
        "columnStart": 4,
        "columnEnd": 21
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 27,
        "lineEnd": 27,
        "columnStart": 4,
        "columnEnd": 60
      }
    }
  ],
  "repairedDockerfile": "FROM ubuntu:14.04\nMAINTAINER Cachelot Team <cachelot@cachelot.io>\n\nRUN cat /dev/null > /etc/apt/sources.list \\\n    && echo \"deb mirror://mirrors.ubuntu.com/mirrors.txt trusty main restricted universe multiverse\" >> /etc/apt/sources.list \\\n    && echo \"deb mirror://mirrors.ubuntu.com/mirrors.txt trusty-updates main restricted universe multiverse\" >> /etc/apt/sources.list \\\n    && echo \"deb mirror://mirrors.ubuntu.com/mirrors.txt trusty-backports main restricted universe multiverse\" >> /etc/apt/sources.list \\\n    && echo \"deb mirror://mirrors.ubuntu.com/mirrors.txt trusty-security main restricted universe multiverse\" >> /etc/apt/sources.list\n\nRUN apt-get update -qq && apt-get install -y -qq\nRUN apt-get install -y -qq --no-install-recommends \\\n    git \\\n    ssh \\\n    wget \\\n    python \\\n    subversion \\\n    cmake \\\n    make \\\n    libboost-system1.55-dev libboost-test1.55-dev libboost-program-options1.55-dev \\\n    libstdc++-4.8-dev \\\n    && rm -rf /var/lib/apt/lists/*\n\n# LLVM/Clang\nRUN wget -O - https://llvm.org/apt/llvm-snapshot.gpg.key | sudo apt-key add -\nRUN echo \"deb http://llvm.org/apt/trusty/ llvm-toolchain-trusty main\" >> /etc/apt/sources.list\nRUN echo \"deb-src http://llvm.org/apt/trusty/ llvm-toolchain-trusty main\" >> /etc/apt/sources.list\nRUN apt-get update -qq\nRUN apt-get install -y --no-install-recommends -qq clang-3.8 && rm -rf /var/lib/apt/lists/*;\n\nRUN update-alternatives --install /usr/bin/clang clang /usr/bin/clang-3.8 0\nRUN update-alternatives --install /usr/bin/clang++ clang++ /usr/bin/clang++-3.8 0\nRUN update-alternatives --set clang /usr/bin/clang-3.8\nRUN update-alternatives --set clang++ /usr/bin/clang++-3.8\nENV CC=\"clang\"\nENV CXX=\"clang++\"\nENV CXXFLAGS=\"-std=c++11 -stdlib=libstdc++\"\nENV LDFLAGS=\"-stdlib=libstdc++\"\n\n# Build compiler-rt with the AddressSanizier library\nRUN D=$(pwd) \\\n    && NUM_CPUS=$(grep -c '^processor' /proc/cpuinfo) \\\n    && cd ~ \\\n    && svn co http://llvm.org/svn/llvm-project/llvm/trunk llvm > /dev/null \\\n    && cd llvm \\\n    && R=$(svn info | grep Revision: | awk '{print $2}') \\\n    && (cd tools && svn co -r $R http://llvm.org/svn/llvm-project/cfe/trunk clang > /dev/null) \\\n    && (cd projects && svn co -r $R http://llvm.org/svn/llvm-project/compiler-rt/trunk compiler-rt > /dev/null) \\\n    && mkdir llvm_cmake_build && cd llvm_cmake_build \\\n    && CC=clang CXX=clang++ cmake -DCMAKE_BUILD_TYPE=Release -DLLVM_ENABLE_ASSERTIONS=ON -DLLVM_ENABLE_WERROR=ON -DLLVM_TARGETS_TO_BUILD=X86 ~/llvm > /dev/null \\\n    && make -j${NUM_CPUS} \\\n    && make install \\\n    && cd $D \\\n    && rm -rf ~/llvm\n\nRUN apt-get clean\n\n\nENV ASAN_SYMBOLIZER_PATH=\"/usr/lib/llvm-*/bin/llvm-symbolizer\"\nENV ASAN_OPTIONS=symbolize=1\n\nWORKDIR \"/cachelot\"\nCOPY run_cachelot_tests.sh /bin/run_cachelot_tests.sh\nRUN chmod a+x /bin/run_cachelot_tests.sh\nENTRYPOINT run_cachelot_tests.sh\n"
}