{
  "startTime": 1674250752821,
  "endTime": 1674250753069,
  "originalSmells": [
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 67,
        "lineEnd": 67,
        "columnStart": 4,
        "columnEnd": 93
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 32,
        "lineEnd": 44,
        "columnStart": 4,
        "columnEnd": 18
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 32,
        "lineEnd": 44,
        "columnStart": 4,
        "columnEnd": 18
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# SGA docker\n# Version 0.1\n# Runs SGA ( http://github.com/jts/sga )\n#\n# Creates SGA-in-a-docker, such that you can run the dockerized SGA\n# much as you would run the local SGA executable.\n#\n# To build:\n#    docker build -t sga-docker [path containing DOCKERFILE]\n# if the Dockerfile is local, otherwise:\n#    docker build -t sga-docker github.com/jts/sga\n#   \n# Once built, you can invoke sga-docker as you would sga, eg:\n#    docker run -v /path/to/local/data/data/:/data/ \\\n#       sga-docker somatic-variant-filters --annotate-only --threads=2 \\\n#        --tumor-bam=/data/tumor.bam --normal-bam=/data/normal.bam \\\n#        --reference=/data/reference.fa /data/input.vcf\n#\n# You can also invoke other sga scripts, such as sga-preqc-report:\n#   docker run -v /path/of/sga/repo:/data/ \\\n#       --entrypoint /src/sga-0.10.14/src/bin/sga-preqc-report.py \\\n#       sga-docker /data/src/examples/preqc/{bird,fish,human,oyster,snake,yeast}.preqc\n#\nFROM ubuntu:14.04\nMAINTAINER Jonathan Dursi <Jonathan.Dursi@oicr.on.ca>\nLABEL Description=\"Runs SGA variant annotation on candidate indels against tumour and normal bams\" Vendor=\"OICR\" Version=\"0.1\"\nVOLUME /data\nWORKDIR /data\n\n# get ubuntu packages\n# incl python matplotlib for preqc\nRUN apt-get update && \\\n    apt-get install --no-install-recommends -y \\\n        automake \\\n        autotools-dev \\\n        build-essential \\\n        cmake \\\n        libhts-dev \\\n        libhts0 \\\n        libjemalloc-dev \\\n        libsparsehash-dev \\\n        libz-dev \\\n        python-matplotlib \\\n        wget \\\n        zlib1g-dev && rm -rf /var/lib/apt/lists/*;\n\n# build remaining dependencies:\n# bamtools\nRUN mkdir -p /deps && \\\n    cd /deps && \\\n    wget https://github.com/pezmaster31/bamtools/archive/v2.4.0.tar.gz && \\\n    tar -xzvf v2.4.0.tar.gz && \\\n    rm v2.4.0.tar.gz && \\\n    cd bamtools-2.4.0 && \\\n    mkdir build && \\\n    cd build && \\\n    cmake .. && \\\n    make\n\n# build SGA\nRUN mkdir -p /src && \\\n    cd /src && \\\n    wget https://github.com/jts/sga/archive/v0.10.14.tar.gz && \\\n    tar -xzvf v0.10.14.tar.gz && \\\n    rm v0.10.14.tar.gz && \\\n    cd sga-0.10.14/src && \\\n    ./autogen.sh && \\\n    ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --with-bamtools=/deps/bamtools-2.4.0 --with-jemalloc=/usr --prefix=/usr/local && \\\n    make && \\\n    make install\n\n\nENTRYPOINT [\"/usr/local/bin/sga\"]\nCMD [\"--help\"]\n"
}