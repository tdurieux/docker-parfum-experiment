{
  "startTime": 1674236293655,
  "endTime": 1674236293801,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 5,
        "lineEnd": 5,
        "columnStart": 4,
        "columnEnd": 50
      }
    },
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 9,
        "lineEnd": 9,
        "columnStart": 4,
        "columnEnd": 36
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 7,
        "lineEnd": 7,
        "columnStart": 22,
        "columnEnd": 54
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 8,
        "lineEnd": 8,
        "columnStart": 22,
        "columnEnd": 47
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 7,
        "lineEnd": 7,
        "columnStart": 22,
        "columnEnd": 54
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 8,
        "lineEnd": 8,
        "columnStart": 22,
        "columnEnd": 47
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM elixir:1.8.2\n\nENV HOME /home/shared\nWORKDIR /app\n\nRUN curl -f -sL https://deb.nodesource.com/setup_12.x | bash -\n\nRUN apt-get update && apt-get install --no-install-recommends -y inotify-tools && rm -rf /var/lib/apt/lists/*;\nRUN apt-get update && apt-get install --no-install-recommends -y nodejs && rm -rf /var/lib/apt/lists/*;\nRUN npm install -g npm-check-updates && npm cache clean --force;\n\n# Install hex (Elixir package manager)\nRUN mix local.hex --force\n# Install rebar (Erlang build tool)\nRUN mix local.rebar --force\nRUN mix archive.install hex phx_new 1.4.8\n\nENV DOCKER_CHANNEL edge\nENV DOCKER_VERSION 18.09.6\nRUN curl -fsSL \"https://download.docker.com/linux/static/${DOCKER_CHANNEL}/x86_64/docker-${DOCKER_VERSION}.tgz\" \\\n  | tar -xzC /usr/local/bin --strip=1 docker/docker\n\nCOPY mix.exs mix.lock ./\nRUN mix deps.get\nCOPY config .\nRUN MIX_ENV=prod mix deps.compile\n\nCOPY assets/package.json ./assets/package.json\nCOPY assets/package-lock.json ./assets/package-lock.json\n\nRUN cd assets && npm ci\n\nCOPY . .\n\nRUN MIX_ENV=prod mix compile\nRUN NODE_ENV=production cd assets && npm run deploy\nRUN MIX_ENV=prod mix phx.digest\n\nCMD [\"mix\", \"phx.server\"]\n"
}