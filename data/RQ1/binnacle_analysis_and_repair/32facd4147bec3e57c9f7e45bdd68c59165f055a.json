{
  "startTime": 1674246733688,
  "endTime": 1674246734466,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 75,
        "lineEnd": 75,
        "columnStart": 7,
        "columnEnd": 124
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 76,
        "lineEnd": 76,
        "columnStart": 7,
        "columnEnd": 132
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 144,
        "lineEnd": 144,
        "columnStart": 13,
        "columnEnd": 75
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 151,
        "lineEnd": 151,
        "columnStart": 13,
        "columnEnd": 41
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 155,
        "lineEnd": 155,
        "columnStart": 4,
        "columnEnd": 32
      }
    },
    {
      "rule": "mkdirUsrSrcThenRemove",
      "position": {
        "lineStart": 79,
        "lineEnd": 79,
        "columnStart": 7,
        "columnEnd": 31
      }
    },
    {
      "rule": "gpgVerifyAscRmAsc",
      "position": {
        "lineStart": 78,
        "lineEnd": 78,
        "columnStart": 7,
        "columnEnd": 61
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 80,
        "lineEnd": 80,
        "columnStart": 7,
        "columnEnd": 70
      }
    },
    {
      "rule": "gpgUseBatchFlag",
      "position": {
        "lineStart": 77,
        "lineEnd": 77,
        "columnStart": 7,
        "columnEnd": 69
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 48,
        "lineEnd": 48,
        "columnStart": 27,
        "columnEnd": 54
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 71,
        "lineEnd": 71,
        "columnStart": 27,
        "columnEnd": 62
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 48,
        "lineEnd": 48,
        "columnStart": 27,
        "columnEnd": 54
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 71,
        "lineEnd": 71,
        "columnStart": 27,
        "columnEnd": 62
      }
    }
  ],
  "repairedSmells": [
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 79,
        "lineEnd": 79,
        "columnStart": 7,
        "columnEnd": 70
      }
    }
  ],
  "repairedDockerfile": "###############################################################################\n#\n# Multi-stage Python 3.x build\n#\n# build-time environment variables:\n#   LTO=1                   . enable link-time-optimizations\n#   OPTIMAL=1               . enable profile-guided-optimizations (PGO)\n#   PYTHON_VERSION=3.5.3\n#\n#   ** NOTE **:\n#       . LTO requires PGO\n#       . ensure both variables are unset for typical builds\n#\n# building:\n#   make build-image        . run docker build\n#   make build-push         . push image to repository\n#   make image              . build + push\n#\n# Stages:\n#    runtime <- debian-base-amd64:0.2\n#       common runtime packages go here\n#    build-setup <- runtime\n#       dev packages, tools, utilities, etc. go here\n#    builder <- build-setup\n#       ./configure <things> && make && make install\n#    post-build <- builder\n#       install any common python modules here\n#    FINAL <- runtime\n#       pip package installation goes here + ENTRYPOINT\n#\n###############################################################################\n\nFROM gcr.io/google-containers/debian-base-amd64:0.4.0 as runtime\n\nENV PATH /usr/local/bin:$PATH\n\n# http://bugs.python.org/issue19846\n# > At the moment, setting \"LANG=C\" on a Linux system *fundamentally breaks Python 3*, and that's not OK.\n\nENV LANG C.UTF-8\n\nCOPY ./init-functions /lib/lsb/\n\nRUN set -ex \\\n    && apt update \\\n    && apt-mark unhold apt gnupg libcap2 libsemanage1 passwd  libbz2-1.0 \\\n    && runDeps='curl gnupg libsqlite3-0 zlib1g libexpat1 bash tcpdump procps less binutils libbz2-1.0 netcat-openbsd git' \\\n    && apt-get -qq update; apt-get install --no-install-recommends -y $runDeps \\\n    && find /usr -type f -name \"*.so\" -exec strip --strip-unneeded {} + \\\n    && apt-get remove binutils --purge -y -qq \\\n    && find /var/lib/apt/lists \\\n            /usr/share/man \\\n            /usr/share/doc \\\n            /var/log \\\n            -type f -exec rm -f {} + \\\n    && rm -rf /root/.gnupg \\\n    && mkdir -p /root/.gnupg \\\n    && chmod 700 /root/.gnupg && rm -rf /var/lib/apt/lists/*;\n\nLABEL stage RUNTIME\n\n###############################################################################\nFROM runtime as build-setup\n\nADD gnupg/pubring.gpg gnupg/trustdb.gpg /root/.gnupg/\n\nRUN set -ex \\\n    && mkdir -p /root/.gnupg \\\n    && chmod 700 /root/.gnupg \\\n    && buildDeps='libsqlite3-dev zlib1g-dev libexpat1-dev libssl-dev xz-utils dpkg-dev binutils libbz2-dev libreadline-dev libffi-dev' \\\n    && apt-get -qq update; apt-get -qq --no-install-recommends -y install ${buildDeps} && rm -rf /var/lib/apt/lists/*;\n\nARG PYTHON_VERSION\n\nRUN curl -f -L -o /python.tar.xz \"https://www.python.org/ftp/python/${PYTHON_VERSION%%[a-z]*}/Python-$PYTHON_VERSION.tar.xz\" \\\n    && curl -f -L -o /python.tar.xz.asc \"https://www.python.org/ftp/python/${PYTHON_VERSION%%[a-z]*}/Python-$PYTHON_VERSION.tar.xz.asc\" \\\n    && gpg --batch --keyserver ha.pool.sks-keyservers.net --refresh-keys 2>&1 | egrep -v 'requesting key|not changed' \\\n    && gpg --batch --verify /python.tar.xz.asc /python.tar.xz \\\n    && mkdir -p /usr/src/python \\\n    && tar -xJC /usr/src/python --strip-components=1 -f /python.tar.xz && rm -rf /usr/src/python\n\n\nLABEL stage BUILD-SETUP\nLABEL version ${PYTHON_VERSION}\n\n###############################################################################\nFROM build-setup as builder\n\nARG BUILD_ARGS\nARG PYTHON_VERSION\nENV LANG C.UTF-8\n\n#RUN sleep 6000 || echo \"whee\"\n\nENV CFLAGS -I/usr/include/openssl\n\nRUN set -ex \\\n    && cd /usr/src/python \\\n    && gnuArch=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" \\\n    && [ $(( ` echo $PYTHON_VERSION | cut -d\".\" -f1 ` )) -lt 3 ] && BUILD_ARGS=\"\" \\\n    ; ./configure \\\n        --build=\"$gnuArch\" \\\n        --enable-loadable-sqlite-extensions \\\n        --enable-shared \\\n        --with-system-expat \\\n        --with-system-ffi \\\n        --without-ensurepip ${BUILD_ARGS} \\\n    && make -j $(( 1 * $( egrep '^processor[[:space:]]+:' /proc/cpuinfo | wc -l ) )) \\\n    && make install\n\n    RUN set -ex \\\n        find /usr/local -type f -name \"*.so\" -exec strip --strip-unneeded {} + \\\n    &   ldconfig \\\n    &   find /usr/local -depth \\\n        \\( \\\n            \\( -type d -a \\( -name test -o -name tests -o -name __pycache__ \\) \\) \\\n            -o \\\n            \\( -type f -a \\( -name '*.pyc' -o -name '*.pyo' \\) \\) \\\n            -o \\\n            \\( -name \"idle*\" \\) \\\n        \\) -exec rm -rf '{}' +  \\\n    &&  find /var/lib/apt/lists \\\n             /usr/share/man \\\n             /usr/share/doc \\\n             /var/log \\\n             -type f -exec rm -f {} +\n\n# make some useful symlinks that are expected to exist\nRUN [\"/bin/bash\", \"-c\", \"if [[ $( echo ${PYTHON_VERSION} | cut -d'.' -f1 ) == '3' ]]; then cd /usr/local/bin && ln -sf pydoc3 pydoc && ln -sf python3 python && ln -sf python3-config python-config;  fi\"]\n\nLABEL stage BUILDER\nLABEL version ${PYTHON_VERSION}\n\n###############################################################################\nFROM builder as post-build\n\n# if this is called \"PIP_VERSION\", pip explodes with \"ValueError: invalid truth value '<VERSION>'\"\nENV PYTHON_PIP_VERSION 18.1\n\n\nCOPY ./ipython_config.py /\n\nRUN set -ex; ldconfig\nRUN set -ex; curl -f -sL -o get-pip.py 'https://bootstrap.pypa.io/get-pip.py';\nRUN set -ex; python get-pip.py \\\n                --disable-pip-version-check \\\n                --no-cache-dir \\\n                \"pip==$PYTHON_PIP_VERSION\"; pip --version\n\n\nRUN set -ex; pip install --no-cache-dir pipenv --upgrade\n\nRUN mkdir -p $HOME/.ipython/profile_default ;\nRUN mv ipython_config.py $HOME/.ipython/profile_default/. ;\nRUN pip install --no-cache-dir 'ipython<6' ipdb\n\nRUN set -ex;  \\\n    find /usr/local -depth \\\n        \\( \\\n            \\( -type d -a \\( -name test -o -name tests -o -name __pycache__ \\) \\) \\\n            -o \\\n            \\( -type f -a \\( -name '*.pyc' -o -name '*.pyo' -o -name '*.exe' \\) \\) \\\n        \\) -exec rm -rf '{}' +;\n\nRUN set -ex; \\\n    find /usr/share/\nRUN rm -rf /root/.cache\n\nARG PYTHON_VERSION\nLABEL stage POST-BUILD\nLABEL version ${PYTHON_VERSION}\n\n###############################################################################\nFROM runtime\n\nCOPY --from=post-build /usr/local /usr/local\nCOPY --from=post-build /root /root\nRUN /sbin/ldconfig\n\nLABEL stage FINAL\nARG PYTHON_VERSION\nLABEL version ${PYTHON_VERSION}\n\nCMD [\"ipython\"]\n"
}