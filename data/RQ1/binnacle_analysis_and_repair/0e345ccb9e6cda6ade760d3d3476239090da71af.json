{
  "startTime": 1674240074155,
  "endTime": 1674240074205,
  "originalSmells": [
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 4,
        "lineEnd": 4,
        "columnStart": 26,
        "columnEnd": 88
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 4,
        "lineEnd": 4,
        "columnStart": 26,
        "columnEnd": 88
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# Base our image on an official, minimal image of our preferred Ruby\nFROM ruby:2.2.3-slim\n\n# Install essential Linux packages\nRUN apt-get update -qq && apt-get install --no-install-recommends -y build-essential libpq-dev postgresql-client && rm -rf /var/lib/apt/lists/*;\n\n# Define where our application will live inside the image\nENV RAILS_ROOT /var/www/docker_example\n\n# Create application home. App server will need the pids dir so just create everything in one shot\nRUN mkdir -p $RAILS_ROOT/tmp/pids\n\n# Set our working directory inside the image\nWORKDIR $RAILS_ROOT\n\n# Use the Gemfiles as Docker cache markers. Always bundle before copying app src.\n# (the src likely changed and we don't want to invalidate Docker's cache too early)\n# http://ilikestuffblog.com/2014/01/06/how-to-skip-bundle-install-when-deploying-a-rails-app-to-docker/\nCOPY Gemfile Gemfile\n\nCOPY Gemfile.lock Gemfile.lock\n\n# Prevent bundler warnings; ensure that the bundler version executed is >= that which created Gemfile.lock\nRUN gem install bundler\n\n# Finish establishing our Ruby enviornment\nRUN bundle install\n\n# Copy the Rails application into place\nCOPY . .\n\n# Define the script we want run once the container boots\n# Use the \"exec\" form of CMD so our script shuts down gracefully on SIGTERM (i.e. `docker stop`)\nCMD [ \"config/containers/app_cmd.sh\" ]\n"
}