{
  "startTime": 1674245059267,
  "endTime": 1674245059763,
  "originalSmells": [
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 134,
        "lineEnd": 134,
        "columnStart": 4,
        "columnEnd": 56
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 135,
        "lineEnd": 135,
        "columnStart": 4,
        "columnEnd": 29
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 124,
        "lineEnd": 124,
        "columnStart": 4,
        "columnEnd": 15
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 28,
        "lineEnd": 76,
        "columnStart": 22,
        "columnEnd": 14
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 82,
        "lineEnd": 92,
        "columnStart": 22,
        "columnEnd": 10
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 95,
        "lineEnd": 103,
        "columnStart": 4,
        "columnEnd": 22
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 95,
        "lineEnd": 103,
        "columnStart": 4,
        "columnEnd": 22
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 28,
        "lineEnd": 76,
        "columnStart": 22,
        "columnEnd": 14
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 82,
        "lineEnd": 92,
        "columnStart": 22,
        "columnEnd": 10
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 95,
        "lineEnd": 103,
        "columnStart": 4,
        "columnEnd": 22
      }
    }
  ],
  "repairedSmells": [
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 95,
        "lineEnd": 103,
        "columnStart": 4,
        "columnEnd": 22
      }
    }
  ],
  "repairedDockerfile": "# Copyright (c) 2019 Google LLC\n#\n# Permission is hereby granted, free of charge, to any person obtaining a copy of\n# this software and associated documentation files (the \"Software\"), to deal in\n# the Software without restriction, including without limitation the rights to\n# use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of\n# the Software, and to permit persons to whom the Software is furnished to do so,\n# subject to the following conditions:\n#\n# The above copyright notice and this permission notice shall be included in all\n# copies or substantial portions of the Software.\n#\n# THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\n# FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\n# COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER\n# IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\n# CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n# To build a new docker image, please run:\n# docker build -t streaming-api:v1.0 -f env/Dockerfile .\n\nFROM ubuntu:xenial\n\nLABEL description=\"Streaming API build environment.\"\n\nRUN apt-get update && apt-get upgrade -y\n\nRUN apt-get update && apt-get install --no-install-recommends -y \\\n    apt-utils \\\n    autoconf \\\n    autoconf-archive \\\n    automake \\\n    binutils-dev \\\n    build-essential \\\n    clang \\\n    cmake \\\n    curl \\\n    g++ \\\n    gcc \\\n    git \\\n    google-perftools \\\n    libass-dev \\\n    libboost-all-dev \\\n    libdouble-conversion-dev \\\n    libevent-dev \\\n    libgflags-dev \\\n    libfreetype6-dev \\\n    libgoogle-glog-dev \\\n    libgtest-dev \\\n    libiberty-dev \\\n    libjemalloc-dev \\\n    liblz4-dev \\\n    liblzma-dev \\\n    libopenmpi-dev \\\n    libsdl2-dev \\\n    libsdl2-ttf-dev \\\n    libsdl2-2.0 \\\n    libsnappy-dev \\\n    libssl-dev \\\n    libtool \\\n    libva-dev \\\n    libvdpau-dev \\\n    libvorbis-dev \\\n    libxcb1-dev \\\n    libxcb-shm0-dev \\\n    libxcb-xfixes0-dev \\\n    make \\\n    pkg-config \\\n    python-dev \\\n    python-setuptools \\\n    software-properties-common \\\n    unzip \\\n    wget \\\n    vim \\\n    zip \\\n    zlib1g-dev \\\n    && apt-get clean && rm -rf /var/lib/apt/lists/*;\n\nRUN easy_install pip\n\nRUN add-apt-repository ppa:jonathonf/ffmpeg-3 -y\nRUN apt-get update && apt-get install --no-install-recommends -y \\\n    libav-tools \\\n    libavdevice-dev \\\n    libx264-dev \\\n    libx265-dev \\\n    libnuma-dev \\\n    libvpx-dev \\\n    libfdk-aac-dev \\\n    libmp3lame-dev \\\n    libopus-dev \\\n    ffmpeg \\\n    && apt-get clean && rm -rf /var/lib/apt/lists/*;\n\nRUN apt-get install --no-install-recommends -y \\\n    libgstreamer1.0-0 \\\n    gstreamer1.0-plugins-base \\\n    gstreamer1.0-plugins-good \\\n    gstreamer1.0-plugins-bad \\\n    gstreamer1.0-plugins-ugly \\\n    gstreamer1.0-libav \\\n    gstreamer1.0-doc \\\n    gstreamer1.0-tools \\\n    && apt-get clean && rm -rf /var/lib/apt/lists/*;\n\nENV CPLUS_INCLUDE_PATH=/usr\nENV LD_LIBRARY_PATH=/usr\n\n#install gRPC 1.12.0\nENV GRPC_RELEASE_TAG v1.12.0\nRUN git clone -b ${GRPC_RELEASE_TAG} https://github.com/grpc/grpc /var/local/git/grpc\nRUN cd /var/local/git/grpc && \\\n    git submodule update --init && \\\n    make && \\\n    make prefix=/usr install && make clean\n\n#install proto v3.6.0\nENV PROTO_RELEASE_TAG v3.6.0\nRUN git clone -b ${PROTO_RELEASE_TAG} https://github.com/google/protobuf.git \\\n    /var/local/git/protobuf && \\\n    cd /var/local/git/protobuf && \\\n    git submodule update --init --recursive && \\\n    ./autogen.sh && \\\n    ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" && make && make install\n\n#install bazel v0.19.2\nENV BAZEL_RELEASE_TAG 0.19.2\nRUN cd /var/local && \\\n    wget https://github.com/bazelbuild/bazel/releases/download/${BAZEL_RELEASE_TAG}/bazel-${BAZEL_RELEASE_TAG}-installer-linux-x86_64.sh && \\\n    chmod +x bazel-${BAZEL_RELEASE_TAG}-installer-linux-x86_64.sh && \\\n    ./bazel-${BAZEL_RELEASE_TAG}-installer-linux-x86_64.sh --prefix=/usr\n\n#install Google Video Intelligence Streaming API Python Libraries\nRUN pip install --no-cache-dir --upgrade google-cloud-videointelligence\nRUN pip install --no-cache-dir --user psutil\n\n#set up environment for Google Video Intelligence Streaming API\nENV SRC_DIR /googlesrc\nENV BIN_DIR /google\n\n#copy aistreamer directory to Docker\nRUN mkdir -p $SRC_DIR\nCOPY BUILD *.BUILD *.md *.py LICENSE WORKSPACE $SRC_DIR/\nCOPY client $SRC_DIR/client\nCOPY env $SRC_DIR/env\nCOPY proto $SRC_DIR/proto\n\n#build aistreamer\nRUN cd $SRC_DIR/client/cpp && bazel build -c opt streaming_client_main\n\n#copy binaries to BIN_DIR directory\nRUN mkdir -p $BIN_DIR\nRUN mkdir -p $BIN_DIR/cpp\nRUN mkdir -p $BIN_DIR/python\nRUN cp $SRC_DIR/bazel-bin/client/cpp/streaming_client_main $BIN_DIR/cpp\nRUN cp $SRC_DIR/client/cpp/config/* $BIN_DIR/cpp\nRUN cp $SRC_DIR/client/python/*.py $BIN_DIR/python\nRUN chmod +x $BIN_DIR/python/*.py\n\n#clean up the build artifacts and source directory.\nRUN cd $SRC_DIR  && bazel clean --expunge\n\n#set work directory\nWORKDIR $BIN_DIR\n\nCMD [\"/bin/bash\"]\n"
}