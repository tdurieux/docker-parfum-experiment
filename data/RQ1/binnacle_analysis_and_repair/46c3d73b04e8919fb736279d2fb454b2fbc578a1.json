{
  "startTime": 1674239930376,
  "endTime": 1674239931559,
  "originalSmells": [
    {
      "rule": "mkdirUsrSrcThenRemove",
      "position": {
        "lineStart": 42,
        "lineEnd": 42,
        "columnStart": 1,
        "columnEnd": 29
      }
    },
    {
      "rule": "mkdirUsrSrcThenRemove",
      "position": {
        "lineStart": 174,
        "lineEnd": 174,
        "columnStart": 1,
        "columnEnd": 27
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 2,
        "lineEnd": 19,
        "columnStart": 22,
        "columnEnd": 6
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM debian:stretch-slim\n\nRUN apt-get update && apt-get install --no-install-recommends -y \\\n\t\tbzip2 \\\n\t\tcurl \\\n\t\tgcc \\\n\t\tgnupg dirmngr \\\n\t\tmake \\\n\n# buildroot\n\t\tbc \\\n\t\tcpio \\\n\t\tdpkg-dev \\\n\t\tg++ \\\n\t\tpatch \\\n\t\tperl \\\n\t\tpython \\\n\t\trsync \\\n\t\tunzip \\\n\t\twget \\\n\t&& rm -rf /var/lib/apt/lists/*\n\n# we grab buildroot for it's uClibc toolchain\n\n# pub   1024D/59C36319 2009-01-15\n#       Key fingerprint = AB07 D806 D2CE 741F B886  EE50 B025 BA8B 59C3 6319\n# uid                  Peter Korsgaard <jacmet@uclibc.org>\n# sub   2048g/45428075 2009-01-15\nRUN gpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys AB07D806D2CE741FB886EE50B025BA8B59C36319\n\n# https://buildroot.org/download.html\n# https://buildroot.org/downloads/?C=M;O=D\nENV BUILDROOT_VERSION 2019.05\n\nRUN set -ex; \\\n\ttarball=\"buildroot-${BUILDROOT_VERSION}.tar.bz2\"; \\\n\tcurl -fL -o buildroot.tar.bz2 \"https://buildroot.org/downloads/$tarball\"; \\\n\tcurl -fL -o buildroot.tar.bz2.sign \"https://buildroot.org/downloads/$tarball.sign\"; \\\n\tgpg --batch --decrypt --output buildroot.tar.bz2.txt buildroot.tar.bz2.sign; \\\n\tawk '$1 == \"SHA1:\" && $2 ~ /^[0-9a-f]+$/ && $3 == \"'\"$tarball\"'\" { print $2, \"*buildroot.tar.bz2\" }' buildroot.tar.bz2.txt > buildroot.tar.bz2.sha1; \\\n\ttest -s buildroot.tar.bz2.sha1; \\\n\tsha1sum -c buildroot.tar.bz2.sha1; \\\n\tmkdir -p /usr/src/buildroot; rm -rf /usr/src/buildroot \\\n\ttar -xf buildroot.tar.bz2 -C /usr/src/buildroot --strip-components 1; \\\n\trm buildroot.tar.bz2*\n\nRUN set -ex; \\\n\t\\\n\tcd /usr/src/buildroot; \\\n\t\\\n\tsetConfs=' \\\n\t\tBR2_STATIC_LIBS=y \\\n\t\tBR2_TOOLCHAIN_BUILDROOT_UCLIBC=y \\\n\t\tBR2_TOOLCHAIN_BUILDROOT_WCHAR=y \\\n\t'; \\\n\t\\\n\tunsetConfs=' \\\n\t\tBR2_SHARED_LIBS \\\n\t'; \\\n\t\\\n# buildroot arches: https://git.busybox.net/buildroot/tree/arch\n# buildroot+uclibc arches: https://git.busybox.net/buildroot/tree/toolchain/toolchain-buildroot/Config.in (\"config BR2_TOOLCHAIN_BUILDROOT_UCLIBC\")\n\tdpkgArch=\"$(dpkg --print-architecture)\"; \\\n\tcase \"$dpkgArch\" in \\\n\t\tamd64) \\\n\t\t\tsetConfs=\"$setConfs \\\n\t\t\t\tBR2_x86_64=y \\\n\t\t\t\"; \\\n\t\t\t;; \\\n\t\t\t\\\n\t\tarm64) \\\n\t\t\tsetConfs=\"$setConfs \\\n\t\t\t\tBR2_aarch64=y \\\n\t\t\t\"; \\\n\t\t\t;; \\\n\t\t\t\\\n# https://wiki.debian.org/ArmEabiPort#Choice_of_minimum_CPU\n# https://github.com/free-electrons/toolchains-builder/blob/db259641eaf5bbcf13f4a3c5003e5436e806770c/configs/arch/armv5-eabi.config\n# https://git.busybox.net/buildroot/tree/arch/Config.in.arm\n# (Debian minimums at ARMv4, we minimum at ARMv5 instead)\n\t\tarmel) \\\n\t\t\tsetConfs=\"$setConfs \\\n\t\t\t\tBR2_arm=y \\\n\t\t\t\tBR2_arm926t=y \\\n\t\t\t\tBR2_ARM_EABI=y \\\n\t\t\t\tBR2_ARM_INSTRUCTIONS_THUMB=y \\\n\t\t\t\tBR2_ARM_SOFT_FLOAT=y \\\n\t\t\t\"; \\\n\t\t\t;; \\\n\t\t\t\\\n# \"Currently the Debian armhf port requires at least an ARMv7 CPU with Thumb-2 and VFP3D16.\"\n# https://wiki.debian.org/ArmHardFloatPort#Supported_devices\n# https://github.com/free-electrons/toolchains-builder/blob/db259641eaf5bbcf13f4a3c5003e5436e806770c/configs/arch/armv7-eabihf.config\n# https://git.busybox.net/buildroot/tree/arch/Config.in.arm\n\t\tarmhf) \\\n\t\t\tsetConfs=\"$setConfs \\\n\t\t\t\tBR2_arm=y \\\n\t\t\t\tBR2_cortex_a9=y \\\n\t\t\t\tBR2_ARM_EABIHF=y \\\n\t\t\t\tBR2_ARM_ENABLE_VFP=y \\\n\t\t\t\tBR2_ARM_FPU_VFPV3D16=y \\\n\t\t\t\tBR2_ARM_INSTRUCTIONS_THUMB2=y \\\n\t\t\t\"; \\\n\t\t\tunsetConfs=\"$unsetConfs BR2_ARM_SOFT_FLOAT\"; \\\n\t\t\t;; \\\n\t\t\t\\\n\t\ti386) \\\n\t\t\tsetConfs=\"$setConfs \\\n\t\t\t\tBR2_i386=y \\\n\t\t\t\"; \\\n\t\t\t;; \\\n\t\t\t\\\n# TODO ppc64el ? (needs BR2_TOOLCHAIN_BUILDROOT_UCLIBC support)\n\t\t\t\\\n# TODO s390x ? (needs BR2_TOOLCHAIN_BUILDROOT_UCLIBC support)\n\t\t\t\\\n\t\t*) \\\n\t\t\techo >&2 \"error: unsupported architecture '$dpkgArch'!\"; \\\n\t\t\texit 1; \\\n\t\t\t;; \\\n\tesac; \\\n\tif [ \"$dpkgArch\" != 'i386' ]; then \\\n\t\tunsetConfs=\"$unsetConfs BR2_i386\"; \\\n\tfi; \\\n\t\\\n\tmake defconfig; \\\n\t\\\n\tfor conf in $unsetConfs; do \\\n\t\tsed -i \\\n\t\t\t-e \"s!^$conf=.*\\$!# $conf is not set!\" \\\n\t\t\t.config; \\\n\tdone; \\\n\t\\\n\tfor confV in $setConfs; do \\\n\t\tconf=\"${confV%=*}\"; \\\n\t\tsed -i \\\n\t\t\t-e \"s!^$conf=.*\\$!$confV!\" \\\n\t\t\t-e \"s!^# $conf is not set\\$!$confV!\" \\\n\t\t\t.config; \\\n\t\tif ! grep -q \"^$confV\\$\" .config; then \\\n\t\t\techo \"$confV\" >> .config; \\\n\t\tfi; \\\n\tdone; \\\n\t\\\n\tmake oldconfig; \\\n\t\\\n# trust, but verify\n\tfor conf in $unsetConfs; do \\\n\t\t! grep -q \"^$conf=\" .config; \\\n\tdone; \\\n\tfor confV in $setConfs; do \\\n\t\tgrep -q \"^$confV\\$\" .config; \\\n\tdone;\n\n# http://www.finnie.org/2014/02/13/compiling-busybox-with-uclibc/\nRUN set -ex; \\\n# force a particular GNU arch for \"host-gmp\" (otherwise it fails on some arches)\n\tgnuArch=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\"; \\\n\tmake -C /usr/src/buildroot HOST_GMP_CONF_OPTS=\"--build='\"$gnuArch\"'\" -j \"$(nproc)\" toolchain\nENV PATH /usr/src/buildroot/output/host/usr/bin:$PATH\n\n# pub   1024D/ACC9965B 2006-12-12\n#       Key fingerprint = C9E9 416F 76E6 10DB D09D  040F 47B7 0C55 ACC9 965B\n# uid                  Denis Vlasenko <vda.linux@googlemail.com>\n# sub   1024g/2C766641 2006-12-12\nRUN gpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys C9E9416F76E610DBD09D040F47B70C55ACC9965B\n\nENV BUSYBOX_VERSION 1.31.0\n\nRUN set -ex; \\\n\ttarball=\"busybox-${BUSYBOX_VERSION}.tar.bz2\"; \\\n\tcurl -fL -o busybox.tar.bz2 \"https://busybox.net/downloads/$tarball\"; \\\n\tcurl -fL -o busybox.tar.bz2.sig \"https://busybox.net/downloads/$tarball.sig\"; \\\n\tgpg --batch --verify busybox.tar.bz2.sig busybox.tar.bz2; \\\n\tmkdir -p /usr/src/busybox; rm -rf /usr/src/busybox \\\n\ttar -xf busybox.tar.bz2 -C /usr/src/busybox --strip-components 1; \\\n\trm busybox.tar.bz2*\n\nWORKDIR /usr/src/busybox\n\n# CONFIG_LAST_SUPPORTED_WCHAR: see https://github.com/docker-library/busybox/issues/13 (UTF-8 input)\nRUN set -ex; \\\n\t\\\n\tsetConfs=' \\\n\t\tCONFIG_AR=y \\\n\t\tCONFIG_FEATURE_AR_CREATE=y \\\n\t\tCONFIG_FEATURE_AR_LONG_FILENAMES=y \\\n\t\tCONFIG_LAST_SUPPORTED_WCHAR=0 \\\n\t\tCONFIG_STATIC=y \\\n\t'; \\\n\t\\\n\tunsetConfs=' \\\n\t\tCONFIG_FEATURE_SYNC_FANCY \\\n\t'; \\\n\t\\\n\tmake defconfig; \\\n\t\\\n\tfor conf in $unsetConfs; do \\\n\t\tsed -i \\\n\t\t\t-e \"s!^$conf=.*\\$!# $conf is not set!\" \\\n\t\t\t.config; \\\n\tdone; \\\n\t\\\n\tfor confV in $setConfs; do \\\n\t\tconf=\"${confV%=*}\"; \\\n\t\tsed -i \\\n\t\t\t-e \"s!^$conf=.*\\$!$confV!\" \\\n\t\t\t-e \"s!^# $conf is not set\\$!$confV!\" \\\n\t\t\t.config; \\\n\t\tif ! grep -q \"^$confV\\$\" .config; then \\\n\t\t\techo \"$confV\" >> .config; \\\n\t\tfi; \\\n\tdone; \\\n\t\\\n\tmake oldconfig; \\\n\t\\\n# trust, but verify\n\tfor conf in $unsetConfs; do \\\n\t\t! grep -q \"^$conf=\" .config; \\\n\tdone; \\\n\tfor confV in $setConfs; do \\\n\t\tgrep -q \"^$confV\\$\" .config; \\\n\tdone;\n\nRUN set -ex \\\n\t&& make -j \"$(nproc)\" \\\n\t\tCROSS_COMPILE=\"$(basename /usr/src/buildroot/output/host/usr/*-buildroot-linux-uclibc*)-\" \\\n\t\tbusybox \\\n\t&& ./busybox --help \\\n\t&& mkdir -p rootfs/bin \\\n\t&& ln -vL busybox rootfs/bin/ \\\n\t\\\n\t&& ln -vL ../buildroot/output/target/usr/bin/getconf rootfs/bin/ \\\n\t\\\n\t&& chroot rootfs /bin/getconf _NPROCESSORS_ONLN \\\n\t\\\n\t&& chroot rootfs /bin/busybox --install /bin\n\n# install a few extra files from buildroot (/etc/passwd, etc)\nRUN set -ex; \\\n\tmkdir -p rootfs/etc; \\\n\tfor f in passwd shadow group; do \\\n\t\tln -vL \\\n\t\t\t\"../buildroot/system/skeleton/etc/$f\" \\\n\t\t\t\"rootfs/etc/$f\"; \\\n\tdone; \\\n# CVE-2019-5021, https://github.com/docker-library/official-images/pull/5880#issuecomment-490681907\n\tgrep -E '^root::' rootfs/etc/shadow; \\\n\tsed -ri -e 's/^root::/root:*:/' rootfs/etc/shadow; \\\n\tgrep -E '^root:[*]:' rootfs/etc/shadow; \\\n# set expected permissions, etc too (https://git.busybox.net/buildroot/tree/system/device_table.txt)\n\tawk ' \\\n\t\t!/^#/ { \\\n\t\t\tif ($2 != \"d\" && $2 != \"f\") { \\\n\t\t\t\tprintf \"error: unknown type \\\"%s\\\" encountered in line %d: %s\\n\", $2, NR, $0 > \"/dev/stderr\"; \\\n\t\t\t\texit 1; \\\n\t\t\t} \\\n\t\t\tsub(/^\\/?/, \"rootfs/\", $1); \\\n\t\t\tif ($2 == \"d\") { \\\n\t\t\t\tprintf \"mkdir -p %s\\n\", $1; \\\n\t\t\t} \\\n\t\t\tprintf \"chmod %s %s\\n\", $3, $1; \\\n\t\t} \\\n\t' ../buildroot/system/device_table.txt | bash -Eeuo pipefail -x\n\n# create missing home directories\nRUN set -ex \\\n\t&& cd rootfs \\\n\t&& for userHome in $(awk -F ':' '{ print $3 \":\" $4 \"=\" $6 }' etc/passwd); do \\\n\t\tuser=\"${userHome%%=*}\"; \\\n\t\thome=\"${userHome#*=}\"; \\\n\t\thome=\"./${home#/}\"; \\\n\t\tif [ ! -d \"$home\" ]; then \\\n\t\t\tmkdir -p \"$home\"; \\\n\t\t\tchown \"$user\" \"$home\"; \\\n\t\t\tchmod 755 \"$home\"; \\\n\t\tfi; \\\n\tdone\n\n# test and make sure it works\nRUN chroot rootfs /bin/sh -xec 'true'\n\n# ensure correct timezone (UTC)\nRUN set -ex; \\\n\tln -vL /usr/share/zoneinfo/UTC rootfs/etc/localtime; \\\n\t[ \"$(chroot rootfs date +%Z)\" = 'UTC' ]\n\n# test and make sure DNS works too\nRUN cp -L /etc/resolv.conf rootfs/etc/ \\\n\t&& chroot rootfs /bin/sh -xec 'nslookup google.com' \\\n\t&& rm rootfs/etc/resolv.conf\n"
}