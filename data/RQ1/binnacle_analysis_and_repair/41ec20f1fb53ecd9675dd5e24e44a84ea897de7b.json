{
  "startTime": 1674235017745,
  "endTime": 1674235017800,
  "originalSmells": [
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 6,
        "lineEnd": 6,
        "columnStart": 4,
        "columnEnd": 15
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM splatform/stratos-bk-build-base:opensuse as builder\nARG stratos_version\nRUN mkdir -p /home/stratos\nWORKDIR /home/stratos\nCOPY --chown=stratos:users . /home/stratos\nRUN go version\nRUN npm install && npm cache clean --force;\nRUN npm run build-backend\n\nFROM splatform/stratos-bk-base:opensuse as common-build\nCOPY --from=builder /home/stratos/src/jetstream/jetstream /srv/\nRUN chmod +x /srv/jetstream\n\n# use --target=db-migrator to build db-migrator image\nFROM splatform/stratos-bk-base:opensuse as db-migrator\nWORKDIR /src\nCOPY deploy/db/dbconf.yml db/dbconf.yml\nCOPY deploy/db/scripts/development.sh .\nCOPY deploy/db/scripts/wait-for-it.sh .\nCOPY --from=common-build /srv/jetstream .\nRUN chmod +x wait-for-it.sh\nRUN chmod +x development.sh\nCMD bash /src/wait-for-it.sh -t 90 mariadb:3306 && bash /src/development.sh\n\n# use --target=postflight-job to build prod postflight-job\nFROM splatform/stratos-bk-base:opensuse as postflight-job\nRUN zypper -n in mariadb-client\nCOPY --from=common-build /srv/jetstream /usr/local/bin/jetstream\nCOPY deploy/db/dbconf.yml db/dbconf.yml\nCOPY deploy/db/scripts/run-postflight-job.k8s.sh /run-postflight-job.sh\nCMD [\"/run-postflight-job.sh\"]\n\n# use --target=prod-build to build a backend image for Kubernetes\nFROM splatform/stratos-bk-base:opensuse as prod-build\nRUN zypper in -y curl\nCOPY deploy/containers/proxy/entrypoint.sh /entrypoint.sh\nCOPY /deploy/db/scripts/run-preflight-job.sh /run-preflight-job.sh\nCOPY /deploy/db/scripts/migrate-volumes.sh /migrate-volumes.sh\nCOPY /deploy/tools/generate_cert.sh /generate_cert.sh\nCOPY --from=common-build /srv /srv\nRUN mkdir /srv/templates\nCOPY src/jetstream/templates /srv/templates\nEXPOSE 443\nENTRYPOINT [\"/entrypoint.sh\"]\n\n# use --target=dev-build to build backend image for development\nFROM prod-build as dev-build\nRUN CERTS_PATH=dev-certs /generate_cert.sh\n"
}