{
  "startTime": 1674248208047,
  "endTime": 1674248208144,
  "originalSmells": [
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 11,
        "lineEnd": 11,
        "columnStart": 15,
        "columnEnd": 49
      }
    },
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 15,
        "lineEnd": 15,
        "columnStart": 15,
        "columnEnd": 36
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM node:10-alpine AS build\n\nARG NPM_TOKEN\n\n# Make Git available for NPM and rsync in the build image\nRUN apk add --update git rsync && \\\n  rm -rf /tmp/* /var/cache/apk/*\n\nCOPY . /tmp/\nCOPY Dockerfile.npmrc /tmp/.npmrc\n\nRUN cd /tmp && npm install --production --verbose && npm cache clean --force;\nRUN rsync -azhqi /tmp/node_modules/ /tmp/production_node_modules\n\n# Dev dependencies\nRUN cd /tmp && npm install --verbose && npm cache clean --force;\nRUN rm -rf /tmp/.npmrc\n\n# TypeScript build\nRUN cd /tmp && node ./node_modules/typescript/bin/tsc\n\nFROM node:10-alpine AS run\nENV APPDIR=/usr/src/repos\n\nRUN mkdir -p \"${APPDIR}\"\n\n# Production Node.js modules\nCOPY --from=build /tmp/production_node_modules \"${APPDIR}/node_modules\"\n\n# Assets that people not using painless config may need\n#COPY --from=build /tmp/data \"${APPDIR}/data\"\n\n# Copy built assets, app, config map\nCOPY --from=build /tmp/dist \"${APPDIR}\"\nCOPY --from=build /tmp/config \"${APPDIR}/config\"\nCOPY --from=build /tmp/views \"${APPDIR}/views\"\nCOPY --from=build /tmp/package.json \"${APPDIR}/package.json\"\nCOPY --from=build /tmp/jobs/reports/exemptRepositories.json \"${APPDIR}/jobs/reports/\"\nCOPY --from=build /tmp/jobs/reports/organizationDefinitions.json \"${APPDIR}/jobs/reports/\"\nCOPY --from=build /tmp/jobs/reports/repositoryDefinitions.json \"${APPDIR}/jobs/reports/\"\nCOPY --from=build /tmp/jobs/reports/teamDefinitions.json \"${APPDIR}/jobs/reports/\"\nCOPY --from=build /tmp/jobs/reports/views \"${APPDIR}/jobs/reports/views\"\n\nWORKDIR /usr/src/repos\n\n# COPY package.json \"${APPDIR}\"\n# COPY views \"${APPDIR}/views\"\n# COPY dist \"${APPDIR}\"\n# COPY public \"${APPDIR}/public\"\n\nENV IS_DOCKER=1\nENV DEBUG=oss-initialize\n\nENV NPM_CONFIG_LOGLEVEL=warn\n\nENV PORT 3000\nEXPOSE 3000\n\nRUN addgroup oss && adduser -D -G oss oss \\\n && chown -R oss:oss \"${APPDIR}\"\nUSER oss\n\nENTRYPOINT [\"npm\", \"run-script\", \"start-in-container\"]\n"
}