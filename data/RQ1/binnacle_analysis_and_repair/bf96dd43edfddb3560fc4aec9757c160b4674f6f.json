{
  "startTime": 1674249745848,
  "endTime": 1674249746053,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 17,
        "lineEnd": 17,
        "columnStart": 4,
        "columnEnd": 59
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 5,
        "lineEnd": 5,
        "columnStart": 4,
        "columnEnd": 26
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 5,
        "lineEnd": 5,
        "columnStart": 4,
        "columnEnd": 26
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 5,
        "lineEnd": 5,
        "columnStart": 4,
        "columnEnd": 26
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 21,
        "lineEnd": 22,
        "columnStart": 7,
        "columnEnd": 95
      }
    }
  ],
  "repairedSmells": [
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 5,
        "lineEnd": 5,
        "columnStart": 4,
        "columnEnd": 50
      }
    }
  ],
  "repairedDockerfile": "FROM ucbjey/risecamp2018-base:2b580e66f1f7\n\n# use apt-get as user \"root\" to install ubuntu packages\nUSER root\nRUN apt-get update\nRUN apt-get install --no-install-recommends -y g++ && rm -rf /var/lib/apt/lists/*;\n\nUSER root\n\nRUN apt-get -y update && \\\n    apt-get install --no-install-recommends -y \\\n      curl \\\n      openjdk-8-jdk-headless \\\n      ca-certificates-java && \\\n    apt-get clean && \\\n    rm -rf /var/lib/apt/lists/*\n\nRUN curl -f -L -o /usr/local/bin/coursier https://git.io/vgvpD && \\\n    chmod +x /usr/local/bin/coursier\n\nRUN apt-get update && apt-get -yq dist-upgrade \\\n    && apt-get install -yq --no-install-recommends \\\n    build-essential ocaml ocamlbuild automake autoconf libtool wget python libssl-dev cmake gdb && rm -rf /var/lib/apt/lists/*;\n\nUSER $NB_USER\n\nENV SCALA_VERSION 2.11.12\nENV ALMOND_VERSION 0.1.7\n\nRUN coursier bootstrap \\\n      -i user -I user:sh.almond:scala-kernel-api_$SCALA_VERSION:$ALMOND_VERSION \\\n      sh.almond:scala-kernel_$SCALA_VERSION:$ALMOND_VERSION \\\n      -o almond && \\\n    ./almond --help && \\\n    ./almond --install && \\\n    rm almond\n\nRUN git clone https://github.com/intel/linux-sgx.git -b sgx_2.3 && \\\n    cd linux-sgx && \\\n    ./download_prebuilt.sh && \\\n    make --quiet sdk_install_pkg\n\nUSER root\nRUN echo $'no\\n/usr/local' | ${HOME}/linux-sgx/linux/installer/bin/sgx_linux_x64_sdk_*.bin\nUSER $NB_USER\n\nRUN rm -r linux-sgx\n\nENV SGX_SDK=\"/usr/local/sgxsdk\"\nENV PATH=\"${PATH}:$SGX_SDK/bin:$SGX_SDK/bin/x64\"\nENV PKG_CONFIG_PATH=\"${PKG_CONFIG_PATH}:$SGX_SDK/pkgconfig\"\n\nENV SPARKSGX_DATA_DIR=\"${HOME}/opaque/data\"\nENV PRIVATE_KEY_PATH=\"${HOME}/opaque/private_key.pem\"\n\n# Setting LD_LIBRARY_PATH seems not to work, so we instead just link each\n# library into /usr/lib and run ldconfig. See\n# https://stackoverflow.com/questions/51670836/saving-dockerfile-env-variables-for-future-use\nUSER root\nRUN find $SGX_SDK/sdk_libs -name '*.so' -exec ln -s {} /usr/lib/ \\; && ldconfig\nUSER $NB_USER\n# ENV LD_LIBRARY_PATH=\"${SGX_SDK}/sdk_libs\"\n\nRUN /bin/bash -c '\\\n    git clone https://github.com/ankurdave/opaque.git -b risecamp2018 && \\\n    cd opaque && \\\n    openssl ecparam -name prime256v1 -genkey -noout -out private_key.pem && \\\n    ./build/sbt publish-local'\n\n# Prefetch Spark SQL 2.0.2 for Opaque tutorial\nRUN coursier fetch org.apache.spark:spark-sql_2.11:2.0.2\n\n# Generate Opaque test data for Opaque tutorial\nRUN cd opaque && ./build/sbt synthTestData\n\n# perform boot-time initialization by adding a startup script\n# COPY init-world.sh /usr/local/bin/start-notebook.d\n\n# copy the tutorial into the container.\n# do this last so that your container builds are as fast as possible\n# when updating the content in tutorial/\nCOPY tutorial /home/$NB_USER/\n\n# configure httpd\nUSER root\nCOPY nginx.conf /etc/nginx/sites-enabled/default\n"
}