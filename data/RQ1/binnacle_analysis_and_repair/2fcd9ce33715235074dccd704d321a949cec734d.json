{
  "startTime": 1674242519763,
  "endTime": 1674242520017,
  "originalSmells": [
    {
      "rule": "wgetUseHttpsUrl",
      "position": {
        "lineStart": 12,
        "lineEnd": 12,
        "columnStart": 4,
        "columnEnd": 153
      }
    },
    {
      "rule": "wgetUseHttpsUrl",
      "position": {
        "lineStart": 20,
        "lineEnd": 20,
        "columnStart": 2,
        "columnEnd": 46
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 31,
        "lineEnd": 31,
        "columnStart": 2,
        "columnEnd": 90
      }
    },
    {
      "rule": "aptGetInstallUseY",
      "position": {
        "lineStart": 25,
        "lineEnd": 25,
        "columnStart": 2,
        "columnEnd": 54
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 9,
        "lineEnd": 9,
        "columnStart": 2,
        "columnEnd": 89
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 25,
        "lineEnd": 25,
        "columnStart": 2,
        "columnEnd": 54
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 42,
        "lineEnd": 42,
        "columnStart": 2,
        "columnEnd": 84
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 9,
        "lineEnd": 9,
        "columnStart": 2,
        "columnEnd": 89
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 25,
        "lineEnd": 25,
        "columnStart": 2,
        "columnEnd": 54
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 42,
        "lineEnd": 42,
        "columnStart": 2,
        "columnEnd": 84
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# Creates an image with nginx and the Datadog OpenTracing nginx module installed.\n# Runs a simple integration test.\nARG NGINX_VERSION=1.14.0\nARG OPENTRACING_NGINX_VERSION=0.8.0\n\n# The nginx testbed. Build this image first since we don't want it rebuilt if just the code changes.\nFROM ubuntu:18.04 as nginx-testbed\n\nRUN apt-get update && \\\n  apt-get install --no-install-recommends -y git gnupg lsb-release wget curl tar openjdk-8-jre golang jq iproute2 && rm -rf /var/lib/apt/lists/*;\n\n# Get Wiremock\nRUN wget https://repo1.maven.org/maven2/com/github/tomakehurst/wiremock-standalone/2.18.0/wiremock-standalone-2.18.0.jar -O wiremock-standalone-2.18.0.jar\nRUN printf '#!/bin/bash\\nset -x\\njava -jar '\"$(pwd)/wiremock-standalone-2.18.0.jar \\\"\\$@\\\"\\n\" > /usr/local/bin/wiremock && \\\n  chmod a+x /usr/local/bin/wiremock\n\nARG NGINX_VERSION\n\n# Install nginx\nRUN CODENAME=$(lsb_release -s -c) && \\\n  wget https://nginx.org/keys/nginx_signing.key && \\\n  apt-key add nginx_signing.key && \\\n  echo deb http://nginx.org/packages/ubuntu/ ${CODENAME} nginx >> /etc/apt/sources.list && \\\n  echo deb-src http://nginx.org/packages/ubuntu/ ${CODENAME} nginx >> /etc/apt/sources.list && \\\n  apt-get update && \\\n  apt-get install -y --no-install-recommends nginx=${NGINX_VERSION}-1~${CODENAME} && rm -rf /var/lib/apt/lists/*;\n\n# Install nginx-opentracing\nARG OPENTRACING_NGINX_VERSION\nRUN wget https://github.com/opentracing-contrib/nginx-opentracing/releases/download/v${OPENTRACING_NGINX_VERSION}/linux-amd64-nginx-${NGINX_VERSION}-ngx_http_module.so.tgz && \\\n  NGINX_MODULES=$(nginx -V 2>&1 | grep \"configure arguments\" | sed -n 's/.*--modules-path=\\([^ ]*\\).*/\\1/p') && \\\n  tar zxvf linux-amd64-nginx-${NGINX_VERSION}-ngx_http_module.so.tgz -C \"${NGINX_MODULES}\" && rm linux-amd64-nginx-${NGINX_VERSION}-ngx_http_module.so.tgz\n\n# Build the Datadog nginx module.\nFROM ubuntu:18.04 as build\n\nENV CFLAGS=\"-march=x86-64 -fPIC\"\nENV CXXFLAGS=\"-march=x86-64 -fPIC\"\nENV LDFLAGS=\"-fPIC\"\n\n\nRUN apt-get update && \\\n  apt-get install --no-install-recommends -y git build-essential wget curl tar cmake libpcre3-dev zlib1g-dev && rm -rf /var/lib/apt/lists/*;\n\nWORKDIR /root\n\nCOPY ./scripts ./dd-opentracing-cpp/scripts\nRUN cd dd-opentracing-cpp && \\\n  ./scripts/install_dependencies.sh\nCOPY ./3rd_party ./dd-opentracing-cpp/3rd_party\nCOPY ./include ./dd-opentracing-cpp/include\nCOPY ./src ./dd-opentracing-cpp/src\nCOPY ./CMakeLists.txt ./dd-opentracing-cpp/CMakeLists.txt\nRUN rm -rf dd-opentracing-cpp/.build\nRUN mkdir -p dd-opentracing-cpp/.build\nWORKDIR dd-opentracing-cpp/.build\nRUN cmake -DBUILD_PLUGIN=ON -DBUILD_STATIC=OFF -DBUILD_TESTING=OFF -DBUILD_SHARED=OFF -DCMAKE_BUILD_TYPE=RelWithDebInfo ..\nRUN make\nRUN make install\nWORKDIR ..\n\n# Build the final testbed.\nFROM nginx-testbed\n\n# Install Datadog OpenTracing\nCOPY --from=build /root/dd-opentracing-cpp/.build/libdd_opentracing_plugin.so /usr/local/lib/libdd_opentracing_plugin.so\n\n# Add OpenTracing directives to nginx config\nCOPY ./test/integration/nginx/nginx.conf /tmp/nginx.conf\nRUN NGINX_CONF=$(nginx -V 2>&1 | grep \"configure arguments\" | sed -n 's/.*--conf-path=\\([^ ]*\\).*/\\1/p') && \\\n  mv /tmp/nginx.conf ${NGINX_CONF}\nCOPY ./test/integration/nginx/dd-config.json /etc/dd-config.json\nRUN mkdir -p /var/www/\nCOPY ./test/integration/nginx/index.html /var/www/index.html\n\nCOPY ./test/integration/nginx/nginx_integration_test.sh ./\nCOPY ./test/integration/nginx/expected_*.json ./\nRUN go get github.com/jakm/msgpack-cli\nCMD [ \"bash\", \"-x\", \"./nginx_integration_test.sh\"]\n"
}