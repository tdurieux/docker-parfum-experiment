{
  "startTime": 1674242192802,
  "endTime": 1674242192907,
  "originalSmells": [
    {
      "rule": "gpgUseBatchFlag",
      "position": {
        "lineStart": 31,
        "lineEnd": 34,
        "columnStart": 4,
        "columnEnd": 55
      }
    },
    {
      "rule": "gpgUseBatchFlag",
      "position": {
        "lineStart": 35,
        "lineEnd": 35,
        "columnStart": 4,
        "columnEnd": 27
      }
    },
    {
      "rule": "gpgUseHaPools",
      "position": {
        "lineStart": 31,
        "lineEnd": 34,
        "columnStart": 4,
        "columnEnd": 55
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 17,
        "lineEnd": 17,
        "columnStart": 1,
        "columnEnd": 85
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "## -*- docker-image-name: \"swift\" -*-\n\n# Docker image for developing with Swift on Linux\n\nFROM ubuntu:15.10\n\nMAINTAINER Giles Paterson <giles@vurt.uk>\n\nLABEL version=\"1.0.0\"\n\n# Setup environment variables\nENV PATH $PATH:node_modules/.bin\n\n##\n## Install packages\n##\nRUN DEBIAN_FRONTEND=noninteractive apt-get update -q && \\\n\tapt-get install -qy --no-install-recommends sudo gnupg clang libicu-dev libpython2.7 && rm -rf /var/lib/apt/lists/*;\n\n##\n## Install Swift\n##\n# Set correct environment variables.\nENV SWIFT_VERSION swift-2.2-SNAPSHOT-2015-12-01-b-ubuntu15.10\nENV SWIFT_URL https://swift.org/builds/ubuntu1510/swift-2.2-SNAPSHOT-2015-12-01-b/\nENV SWIFT_SNAPSHOT $SWIFT_VERSION.tar.gz\nENV SWIFT_SIG $SWIFT_VERSION.tar.gz.sig\n\nADD $SWIFT_URL$SWIFT_SNAPSHOT /usr/local/\nADD $SWIFT_URL$SWIFT_SIG /usr/local/\nRUN cd /usr/local && \\\n    gpg --batch --keyserver hkp://ha.pool.sks-keyservers.net \\\n    --recv-keys \\\n    '7463 A81A 4B2E EA1B 551F FBCF D441 C977 412B 37AD' \\\n    '1BE1 E29A 084C B305 F397 D62A 9F59 7F4D 21A5 6D5F' && \\\n    gpg --batch --verify $SWIFT_SIG && \\\n    tar xzf $SWIFT_SNAPSHOT && \\\n    cp -R $SWIFT_VERSION/usr/* /usr/local/ && \\\n    rm -rf $SWIFT_VERSION*\n\n##\n## Create dev user\n## This avoids permissions issues when running locally\n##\nENV USERNAME dev\n\nRUN adduser --disabled-password --gecos '' $USERNAME && \\\n    echo $USERNAME:$USERNAME | chpasswd && \\\n    echo \"%sudo ALL=(ALL) NOPASSWD: ALL\" >> /etc/sudoers && \\\n    adduser $USERNAME sudo\n\n# Add Tini\nENV TINI_VERSION v0.6.0\nADD https://github.com/krallin/tini/releases/download/${TINI_VERSION}/tini /tini\nRUN chmod +x /tini\n\nUSER $USERNAME\n\n# Set workdir\n# You'll need to run this image with a volume mapped to /home/dev (i.e. -v $(pwd):/home/dev) or override this value\nWORKDIR /home/$USERNAME/app\n\n# Add swift to the PATH\nENV PATH /usr/local/usr/bin:$PATH\n\nENTRYPOINT [\"/tini\", \"--\"]\n\n# Run your program under Tini\n# CMD [\"/your/program\", \"-and\", \"-its\", \"arguments\"]\n# or docker run your-image /your/program ...\n"
}