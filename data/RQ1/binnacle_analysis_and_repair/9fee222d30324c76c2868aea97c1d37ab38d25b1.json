{
  "startTime": 1674247945880,
  "endTime": 1674247946053,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 17,
        "lineEnd": 17,
        "columnStart": 4,
        "columnEnd": 146
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 22,
        "lineEnd": 22,
        "columnStart": 4,
        "columnEnd": 144
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 23,
        "lineEnd": 23,
        "columnStart": 4,
        "columnEnd": 123
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 24,
        "lineEnd": 24,
        "columnStart": 4,
        "columnEnd": 127
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 27,
        "lineEnd": 27,
        "columnStart": 4,
        "columnEnd": 161
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 32,
        "lineEnd": 32,
        "columnStart": 4,
        "columnEnd": 99
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 12,
        "lineEnd": 12,
        "columnStart": 4,
        "columnEnd": 42
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 13,
        "lineEnd": 13,
        "columnStart": 4,
        "columnEnd": 64
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM docker:18.06.3-ce-dind\nLABEL maintainer=\"RÃ©mi Marseille <marseille@ekino.com>\"\n\nARG CI_HELPER_VERSION\nARG DOCKER_COMPOSE_VERSION\nARG GLIBC_VERSION\nARG PIPENV_VERSION\nARG PIP_VERSION\nENV PYTHON_PIP_VERSION ${PIP_VERSION}\n\nRUN echo \"Install AWS\" && \\\n    apk add -q --no-cache bash build-base ca-certificates curl gettext git libffi-dev linux-headers make musl-dev openldap-dev openssh-client python py-pip rsync tzdata && \\\n    pip install --no-cache-dir pip==${PYTHON_PIP_VERSION} && \\\n    pip -q --no-cache-dir install pipenv==${PIPENV_VERSION} awscli boto3 PyYAML && \\\n    echo \"Done install AWS\" && \\\n\n    echo \"Install CI Helper\" && \\\n    curl -f -sSL https://github.com/rande/gitlab-ci-helper/releases/download/${CI_HELPER_VERSION}/alpine-amd64-gitlab-ci-helper -o /usr/bin/ci-helper && \\\n    chmod 755 /usr/bin/ci-helper && \\\n    echo \"Done install CI Helper\" && \\\n\n    echo \"Install Docker Compose\" && \\\n    curl -f -sSL https://github.com/sgerrand/alpine-pkg-glibc/releases/download/${GLIBC_VERSION}/sgerrand.rsa.pub -o /etc/apk/keys/sgerrand.rsa.pub && \\\n    curl -f -sSL https://github.com/sgerrand/alpine-pkg-glibc/releases/download/${GLIBC_VERSION}/glibc-${GLIBC_VERSION}.apk -O && \\\n    curl -f -sSL https://github.com/sgerrand/alpine-pkg-glibc/releases/download/${GLIBC_VERSION}/glibc-bin-${GLIBC_VERSION}.apk -O && \\\n    apk add --update -q glibc-${GLIBC_VERSION}.apk glibc-bin-${GLIBC_VERSION}.apk && \\\n    rm /etc/apk/keys/sgerrand.rsa.pub glibc-${GLIBC_VERSION}.apk glibc-bin-${GLIBC_VERSION}.apk && \\\n    curl -f -sSL https://github.com/docker/compose/releases/download/${DOCKER_COMPOSE_VERSION}/docker-compose-`uname -s`-`uname -m` -o /usr/local/bin/docker-compose && \\\n    chmod +x /usr/local/bin/docker-compose && \\\n    docker-compose --version && \\\n\n    echo \"Adding an up to date mime-types definition file\" && \\\n    curl -f -sSL https://salsa.debian.org/debian/mime-support/raw/master/mime.types -o /etc/mime.types && \\\n\n    echo \"Cleaning files!\" && \\\n    rm -rf /tmp/* /var/cache/apk/* && \\\n\n    echo \"Done!\"\n"
}