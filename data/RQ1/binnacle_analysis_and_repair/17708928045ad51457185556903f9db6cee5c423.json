{
  "startTime": 1674239454017,
  "endTime": 1674239454873,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 17,
        "lineEnd": 17,
        "columnStart": 4,
        "columnEnd": 121
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 24,
        "lineEnd": 24,
        "columnStart": 4,
        "columnEnd": 117
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 33,
        "lineEnd": 33,
        "columnStart": 4,
        "columnEnd": 117
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 41,
        "lineEnd": 41,
        "columnStart": 4,
        "columnEnd": 136
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 59,
        "lineEnd": 59,
        "columnStart": 4,
        "columnEnd": 100
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 65,
        "lineEnd": 65,
        "columnStart": 4,
        "columnEnd": 81
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 73,
        "lineEnd": 73,
        "columnStart": 4,
        "columnEnd": 125
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 92,
        "lineEnd": 92,
        "columnStart": 4,
        "columnEnd": 95
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 100,
        "lineEnd": 100,
        "columnStart": 4,
        "columnEnd": 77
      }
    },
    {
      "rule": "wgetUseHttpsUrl",
      "position": {
        "lineStart": 115,
        "lineEnd": 115,
        "columnStart": 4,
        "columnEnd": 107
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 76,
        "lineEnd": 76,
        "columnStart": 4,
        "columnEnd": 86
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 128,
        "lineEnd": 140,
        "columnStart": 4,
        "columnEnd": 52
      }
    },
    {
      "rule": "yumInstallRmVarCacheYum",
      "position": {
        "lineStart": 51,
        "lineEnd": 51,
        "columnStart": 4,
        "columnEnd": 49
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "#########################################################################################\n##  Stage 1: build DALI dependencies\n##     DALI is based on \"manylinux3\", which is our modification of manylinux1\n##     (CentOS 5 derivative). For building this docker image, manylinux3 has to\n##     be manually built. It is also possible to use other distros, but we don't\n##     officially support them.\n##     For instructions, how to build manylinux3 with our patch see:\n##     //DALI/docker/build.sh#L16\n#########################################################################################\nARG FROM_IMAGE_NAME=gitlab-master.nvidia.com:5005/dl/dali/manylinux:manylinux3_x86_64\nARG USE_CUDA_VERSION=9\nFROM ${FROM_IMAGE_NAME} as base\n\n# CUDA\nFROM base as cuda-9\nRUN CUDA_VERSION=9.0 && \\\n    CUDA_BUILD=9.0.176_384.81 && \\\n    curl -f -LO https://developer.nvidia.com/compute/cuda/${CUDA_VERSION}/Prod/local_installers/cuda_${CUDA_BUILD}_linux-run && \\\n    chmod +x cuda_${CUDA_BUILD}_linux-run && \\\n    ./cuda_${CUDA_BUILD}_linux-run --silent --no-opengl-libs --toolkit && \\\n    rm -f cuda_${CUDA_BUILD}_linux-run; \\\n    # nvJpeg\n    NVJPEG_VERSION=719-25900922 && \\\n    NVJPEG_BUILD=9.0.${NVJPEG_VERSION} && \\\n    curl -f -L https://developer.download.nvidia.com/compute/redist/libnvjpeg/cuda-linux64-nvjpeg-${NVJPEG_BUILD}.tar.gz | tar -xzf - && \\\n    cd /cuda-linux64-nvjpeg/ && \\\n    mv lib64/libnvjpeg*.a* /usr/local/cuda/lib64/ && \\\n    mv include/nvjpeg.h /usr/local/cuda/include/ && \\\n    rm -rf /cuda-linux64-nvjpeg;\n\nFROM base as cuda-10\nRUN CUDA_VERSION=10.0 && \\\n    CUDA_BUILD=10.0.130_410.48 && \\\n    curl -f -LO https://developer.nvidia.com/compute/cuda/${CUDA_VERSION}/Prod/local_installers/cuda_${CUDA_BUILD}_linux && \\\n    chmod +x cuda_${CUDA_BUILD}_linux && \\\n    ./cuda_${CUDA_BUILD}_linux --silent --no-opengl-libs --toolkit && \\\n    rm -f cuda_${CUDA_BUILD}_linux; \\\n    # nvJpeg\n    CUDA_VERSION=10.0 && \\\n    CUDA_PATCH=1 && \\\n    CUDA_BUILD=10.0.130.1 && \\\n    curl -f -LO https://developer.download.nvidia.com/compute/cuda/${CUDA_VERSION}/Prod/patches/${CUDA_PATCH}/cuda_${CUDA_BUILD}_linux.run && \\\n    chmod +x cuda_${CUDA_BUILD}_linux.run && \\\n    ./cuda_${CUDA_BUILD}_linux.run --silent --accept-eula --installdir=/usr/local/cuda-10.0 && \\\n    rm -f cuda_${CUDA_BUILD}_linux-run;\n\nFROM cuda-${USE_CUDA_VERSION} as cuda\n\n# Actual image\nFROM base\n# Install yum Dependencies\nRUN yum install -y zip wget yasm doxygen graphviz && rm -rf /var/cache/yum\n\n# Don't want the short-unicode version for Python 2.7\nRUN rm -f /opt/python/cp27-cp27m\n\n# Boost\nRUN BOOST_VERSION=1.66.0 && \\\n    cd /usr/local && \\\n    curl -f -L https://dl.bintray.com/boostorg/release/1.66.0/source/boost_${BOOST_VERSION//./_}.tar.gz | tar -xzf - && \\\n    ln -s ../boost_${BOOST_VERSION//./_}/boost include/boost\n\n# CMake\nRUN CMAKE_VERSION=3.11 && \\\n    CMAKE_BUILD=3.11.0 && \\\n    curl -f -L https://cmake.org/files/v${CMAKE_VERSION}/cmake-${CMAKE_BUILD}.tar.gz | tar -xzf - && \\\n    cd /cmake-${CMAKE_BUILD} && \\\n    ./bootstrap --parallel=$(grep ^processor /proc/cpuinfo | wc -l) && \\\n    make -j\"$(grep ^processor /proc/cpuinfo | wc -l)\" install && \\\n    rm -rf /cmake-${CMAKE_BUILD}\n\n# protobuf v3.5.1\nRUN PROTOBUF_VERSION=3.5.1 && \\\n    curl -f -L https://github.com/google/protobuf/releases/download/v${PROTOBUF_VERSION}/protobuf-all-${PROTOBUF_VERSION}.tar.gz | tar -xzf - && \\\n    cd /protobuf-${PROTOBUF_VERSION} && \\\n    ./autogen.sh && \\\n    ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" CXXFLAGS=\"-fPIC\" --prefix=/usr/local --disable-shared 2>&1 > /dev/null && \\\n    make -j\"$(grep ^processor /proc/cpuinfo | wc -l)\" install 2>&1 > /dev/null && \\\n    rm -rf /protobuf-${PROTOBUF_VERSION}\n\n# LMDB\nCOPY docker/Makefile-lmdb.patch /tmp\nRUN LMDB_VERSION=0.9.22 && \\\n    git clone -b LMDB_${LMDB_VERSION} --single-branch https://github.com/LMDB/lmdb && \\\n    cd /lmdb/libraries/liblmdb && \\\n    patch -p3 < /tmp/Makefile-lmdb.patch && \\\n    rm -f /tmp/Makefile-lmdb.patch && \\\n    make -j\"$(grep ^processor /proc/cpuinfo | wc -l)\" install && \\\n    rm -rf /lmdb\n\n# libjpeg-turbo\nRUN JPEG_TURBO_VERSION=2.0.2 && \\\n    curl -f -L https://github.com/libjpeg-turbo/libjpeg-turbo/archive/${JPEG_TURBO_VERSION}.tar.gz | tar -xzf - && \\\n    cd libjpeg-turbo-${JPEG_TURBO_VERSION} && \\\n    cmake -G\"Unix Makefiles\" -DENABLE_SHARED=TRUE -DCMAKE_INSTALL_PREFIX=/usr/local . 2>&1 >/dev/null && \\\n    make -j\"$(grep ^processor /proc/cpuinfo | wc -l)\" install 2>&1 >/dev/null && \\\n    rm -rf /libjpeg-turbo-${JPEG_TURBO_VERSION}\n\n# OpenCV\nRUN OPENCV_VERSION=3.4.3 && \\\n    curl -f -L https://github.com/opencv/opencv/archive/${OPENCV_VERSION}.tar.gz | tar -xzf - && \\\n    cd /opencv-${OPENCV_VERSION} && mkdir build && cd build && \\\n    cmake -DCMAKE_BUILD_TYPE=RELEASE -DCMAKE_INSTALL_PREFIX=/usr/local \\\n          -DBUILD_SHARED_LIBS=OFF \\\n          -DWITH_CUDA=OFF -DWITH_1394=OFF -DWITH_IPP=OFF -DWITH_OPENCL=OFF -DWITH_GTK=OFF \\\n          -DBUILD_JPEG=OFF -DWITH_JPEG=ON \\\n          -DBUILD_DOCS=OFF -DBUILD_TESTS=OFF -DBUILD_PERF_TESTS=OFF -DBUILD_PNG=ON \\\n          -DBUILD_opencv_cudalegacy=OFF -DBUILD_opencv_stitching=OFF \\\n          -DWITH_TBB=OFF -DWITH_OPENMP=OFF -DWITH_PTHREADS_PF=OFF -DWITH_CSTRIPES=OFF .. && \\\n    make -j\"$(grep ^processor /proc/cpuinfo | wc -l)\" install && \\\n    rm -rf /opencv-${OPENCV_VERSION}\n\n# Clang\nRUN CLANG_VERSION=6.0.1 && \\\n    cd /usr/local && \\\n    wget https://releases.llvm.org/${CLANG_VERSION}/clang+llvm-${CLANG_VERSION}-x86_64-linux-sles11.3.tar.xz && \\\n    tar -xJf clang+llvm-${CLANG_VERSION}-x86_64-linux-sles11.3.tar.xz --strip 1 && \\\n    rm clang+llvm-${CLANG_VERSION}-x86_64-linux-sles11.3.tar.xz\n\n\nENV NVIDIA_DRIVER_CAPABILITIES=video,compute,utility\n\n# FFmpeg\nRUN FFMPEG_VERSION=3.4.2 && \\\n    cd /tmp && wget https://developer.download.nvidia.com/compute/redist/nvidia-dali/ffmpeg-${FFMPEG_VERSION}.tar.bz2 && \\\n    tar xf ffmpeg-$FFMPEG_VERSION.tar.bz2 && \\\n    rm ffmpeg-$FFMPEG_VERSION.tar.bz2 && \\\n    cd ffmpeg-$FFMPEG_VERSION && \\\n    ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" \\\n      --prefix=/usr/local \\\n      --disable-static \\\n      --disable-all \\\n      --disable-autodetect \\\n      --disable-iconv \\\n      --enable-shared \\\n      --enable-avformat \\\n      --enable-avcodec \\\n      --enable-avfilter \\\n      --enable-protocol=file \\\n      --enable-demuxer=mov,matroska \\\n      --enable-bsf=h264_mp4toannexb,hevc_mp4toannexb && \\\n    make -j\"$(grep ^processor /proc/cpuinfo | wc -l)\" && make install && \\\n    cd /tmp && rm -rf ffmpeg-$FFMPEG_VERSION\n\n# CUDA\nCOPY --from=cuda /usr/local/cuda /usr/local/cuda\n"
}