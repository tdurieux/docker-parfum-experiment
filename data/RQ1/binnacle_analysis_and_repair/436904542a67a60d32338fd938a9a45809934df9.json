{
  "startTime": 1674252657532,
  "endTime": 1674252657883,
  "originalSmells": [
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 32,
        "lineEnd": 32,
        "columnStart": 4,
        "columnEnd": 59
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "#####\n# To run this, you will have to mount the local docker socket and your working directory onto /cluster, e.g.\n# docker run -it --rm -v /var/run/docker.sock:/var/run/docker.sock -v `pwd`:/cluster efrecon/machinery help\nFROM docker:stable\n\n# Lock in versions of compose and machine, will change at the pace of stable\n# releases.\nARG DOCKER_COMPOSE_VERSION=1.22.0\nARG DOCKER_MACHINE_VERSION=0.15.0\nARG TCLLIB_VERSION=1_18\n\n# Install glibc so compose can run. Also make sure wget can properly handle\n# https and arrange for an ssh client to be present for use from docker-machine\nARG GLIBC=2.28-r0\nARG GLIBC_SHA256=f0a00f56fdee9dc888bafec0bf8f54fb188e99b5346032251abb79ef9c99f079\nRUN apk update && apk add --no-cache openssh-client ca-certificates && \\\n    wget -q -O /etc/apk/keys/sgerrand.rsa.pub https://alpine-pkgs.sgerrand.com/sgerrand.rsa.pub && \\\n    wget -q https://github.com/sgerrand/alpine-pkg-glibc/releases/download/${GLIBC}/glibc-${GLIBC}.apk && \\\n    echo \"${GLIBC_SHA256}  glibc-${GLIBC}.apk\" | sha256sum -c - && \\\n    apk add --no-cache glibc-${GLIBC}.apk && rm glibc-${GLIBC}.apk && \\\n    ln -s /lib/libz.so.1 /usr/glibc-compat/lib/ && \\\n    ln -s /lib/libc.musl-x86_64.so.1 /usr/glibc-compat/lib\n\n# Install compose and machine\nRUN wget -q -O /usr/local/bin/docker-compose https://github.com/docker/compose/releases/download/$DOCKER_COMPOSE_VERSION/docker-compose-Linux-x86_64 && \\\n    chmod +x /usr/local/bin/docker-compose && \\\n    wget -q -O /usr/local/bin/docker-machine https://github.com/docker/machine/releases/download/v$DOCKER_MACHINE_VERSION/docker-machine-Linux-x86_64 && \\\n    chmod +x /usr/local/bin/docker-machine\n\n# Install TCL, TLS, tcllib and other tcl dependencies\nRUN apk add --no-cache tcl tcl-tls tclx && \\\n    wget -q -O /tmp/tcllib_${TCLLIB_VERSION}.tar.gz https://github.com/tcltk/tcllib/archive/tcllib_${TCLLIB_VERSION}.tar.gz && \\\n    tar -zx -C /tmp -f /tmp/tcllib_${TCLLIB_VERSION}.tar.gz && \\\n    tclsh /tmp/tcllib-tcllib_${TCLLIB_VERSION}/installer.tcl -no-html -no-nroff -no-examples -no-gui -no-apps -no-wait -pkg-path /usr/lib/tcllib$(echo ${TCLLIB_VERSION}|sed s/_/./g) && \\\n    rm -rf /tmp/tcllib* && rm /tmp/tcllib_${TCLLIB_VERSION}.tar.gz\n\n# Install our main script and implementation\nRUN mkdir -p /opt/machinery/lib\nCOPY machinery /opt/machinery/\nCOPY lib /opt/machinery/lib\nRUN ln -s /opt/machinery/machinery /usr/local/bin/machinery\n\n# Install til library, the only remaining dependency we have\nRUN wget -q -O /tmp/til.zip https://github.com/efrecon/til/archive/master.zip && \\\n    unzip -q /tmp/til.zip -d /opt/machinery/lib && \\\n    mv /opt/machinery/lib/til-master /opt/machinery/lib/til && \\\n    rm -rf /tmp/til.zip\n\n# Expose for running as a service\nEXPOSE 8070\n\n# Mount your main working directory onto /cluster\nRUN mkdir -p /cluster\nWORKDIR /cluster\nVOLUME /cluster\n\nENTRYPOINT [ \"/usr/local/bin/machinery\" ]"
}