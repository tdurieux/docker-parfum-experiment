{
  "startTime": 1674243836244,
  "endTime": 1674243836280,
  "originalSmells": [
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 10,
        "lineEnd": 10,
        "columnStart": 4,
        "columnEnd": 15
      }
    },
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 27,
        "lineEnd": 27,
        "columnStart": 4,
        "columnEnd": 33
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# ---- Base Node ----\nFROM node:carbon AS base\n# 创建 app 目录\nWORKDIR /app\n\n# ---- Dependencies ----\nFROM base AS dependencies \n# 使用通配符复制 package.json 与 package-lock.json\nCOPY package*.json ./\n# 安装在‘devDependencies’中包含的依赖\nRUN npm install && npm cache clean --force;\n\n# ---- Copy Files/Build ----\nFROM dependencies AS build \nWORKDIR /app\nCOPY src /app\n# 如需对 react/vue/angular 打包，生成静态文件，使用：\n# RUN npm run build\n\n# --- Release with Alpine ----\nFROM node:8.9-alpine AS release \n# 创建 app 目录\nWORKDIR /app\n# 可选命令：\n# RUN npm -g install serve\nCOPY --from=dependencies /app/package.json ./\n# 安装 app 依赖\nRUN npm install --only=production && npm cache clean --force;\nCOPY --from=build /app ./\n#CMD [\"serve\", \"-s\", \"dist\", \"-p\", \"8080\"]\nCMD [\"node\", \"server.js\"]\n# 使用上面的方法，用 Alpine 构建的镜像文件大小约 70MB，比之前少了 10 倍。使用 alpine 版本进行构建能有效减小镜像的大小。"
}