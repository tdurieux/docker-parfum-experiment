{
  "startTime": 1674247986135,
  "endTime": 1674247986334,
  "originalSmells": [
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 20,
        "lineEnd": 20,
        "columnStart": 22,
        "columnEnd": 67
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 28,
        "lineEnd": 62,
        "columnStart": 22,
        "columnEnd": 10
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 20,
        "lineEnd": 20,
        "columnStart": 22,
        "columnEnd": 67
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 28,
        "lineEnd": 62,
        "columnStart": 22,
        "columnEnd": 10
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# To build from the parent directory:\n#   docker build -t wch1/r-devel r-devel\n#\n# To run:\n#   docker run --rm -ti --name rd wch1/r-devel\n\n# Use a very recent version of Ubuntu to get the latest GCC, which we need for\n# some of options used for ASAN builds.\nFROM ubuntu:18.04\n\nMAINTAINER Winston Chang \"winston@rstudio.com\"\n\n# =====================================================================\n# R\n# =====================================================================\n\n# Don't print \"debconf: unable to initialize frontend: Dialog\" messages\nARG DEBIAN_FRONTEND=noninteractive\n\n# Need this to add R repo\nRUN apt-get update && apt-get install --no-install-recommends -y software-properties-common && rm -rf /var/lib/apt/lists/*;\n\n# Add R apt repository\nRUN apt-key adv --keyserver keyserver.ubuntu.com --recv-keys E084DAB9\nRUN add-apt-repository \"deb http://cran.r-project.org/bin/linux/ubuntu $(lsb_release -cs)-cran35/\"\n\n# Install basic stuff, R, and other packages that are useful for compiling R\n# and R packages.\nRUN apt-get update && apt-get install --no-install-recommends -y \\\n    sudo \\\n    locales \\\n    git \\\n    vim-tiny \\\n    less \\\n    wget \\\n    r-base \\\n    r-base-dev \\\n    r-recommended \\\n    fonts-texgyre \\\n    gdebi-core \\\n    pandoc \\\n    pandoc-citeproc \\\n    libcurl4-openssl-dev \\\n    libcairo2-dev \\\n    libpango1.0-dev \\\n    libxt-dev \\\n    libssl-dev \\\n    libxml2-dev \\\n    texinfo \\\n    rsync \\\n    default-jdk \\\n    bison \\\n    libtiff5-dev \\\n    tcl8.6-dev \\\n    tk8.6-dev \\\n    xfonts-base \\\n    xvfb \\\n    gcc-8 \\\n    g++-8 \\\n    gdb \\\n    valgrind \\\n    clang-7 \\\n    lldb-7 && rm -rf /var/lib/apt/lists/*;\n\nRUN locale-gen en_US.utf8 \\\n    && /usr/sbin/update-locale LANG=en_US.UTF-8\nENV LANG=en_US.UTF-8\n\nRUN update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-8 800 \\\n    --slave /usr/bin/g++ g++ /usr/bin/g++-8\n\nRUN update-alternatives --install /usr/bin/clang clang /usr/bin/clang-7 800 \\\n    --slave /usr/bin/clang++ clang++ /usr/bin/clang++-7\n\n\nRUN echo 'options(\\n\\\n  repos = c(CRAN = \"https://cloud.r-project.org/\"),\\n\\\n  download.file.method = \"libcurl\",\\n\\\n  # Detect number of physical cores\\n\\\n  Ncpus = parallel::detectCores(logical=FALSE)\\n\\\n)' >> /etc/R/Rprofile.site\n\n\n# Install TinyTeX (subset of TeXLive)\n# From FAQ 5 and 6 here: https://yihui.name/tinytex/faq/\n# Also install ae, parskip, and listings packages to build R vignettes\nRUN wget -qO- \\\n    \"https://github.com/yihui/tinytex/raw/master/tools/install-unx.sh\" | \\\n    sh -s - --admin --no-path \\\n    && ~/.TinyTeX/bin/*/tlmgr path add \\\n    && tlmgr install metafont mfware inconsolata tex ae parskip listings xcolor \\\n    && tlmgr path add \\\n    && Rscript -e \"source('https://install-github.me/yihui/tinytex'); tinytex::r_texmf()\"\n\n\n# =====================================================================\n# Install various versions of R-devel\n# =====================================================================\n\n# Clone R-devel and download recommended packages\nRUN cd /tmp \\\n    && git clone --depth 1 https://github.com/wch/r-source.git \\\n    && r-source/tools/rsync-recommended\n\nCOPY buildR.sh /tmp\n\n# RD: Install normal R-devel.\n#\n# This R installation is slightly different from the ones that follow. It is\n# configured with the recommended packages, and has those packages installed\n# packages to library/ (not site-library/). These packages will be shared with\n# the other RD* installations that follow. For all the RD* installations\n# (including this one), all packages installed after buildR.sh runs will be\n# installed to each installation's site-library/.\n#\n# I've set it up this way because the \"recommended\" packages take a long time\n# to compile and in most cases aren't involved in debugging the low-level\n# problems that this Dockerfile is for, so it's OK to compile them once and\n# share them. Other packages, like those installed by the user and Rcpp\n# (*especially* Rcpp), are often of interest -- they are installed for each\n# RD* installation, and code is compiled with whatever compiler settings are\n# used for each RD* installation.\nRUN /tmp/buildR.sh\n\n# Install some commonly-used packages to a location used by all the RD*\n# installations. These packages do not have compiled code and do not depend on\n# packages that have compiled code.\nRUN RD -q -e 'install.packages(c(\"BH\", \"R6\", \"magrittr\", \"memoise\"), \"/usr/local/RD/lib/R/library\")'\n\n# Finally, install some common packages specific to this build of R.\nRUN RD -q -e 'install.packages(c(\"devtools\", \"Rcpp\", \"roxygen2\", \"testthat\"))'\n"
}