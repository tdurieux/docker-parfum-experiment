{
  "startTime": 1674249099252,
  "endTime": 1674249099458,
  "originalSmells": [
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 48,
        "lineEnd": 48,
        "columnStart": 4,
        "columnEnd": 29
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 49,
        "lineEnd": 49,
        "columnStart": 4,
        "columnEnd": 52
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 57,
        "lineEnd": 57,
        "columnStart": 4,
        "columnEnd": 71
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 67,
        "lineEnd": 67,
        "columnStart": 4,
        "columnEnd": 24
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 82,
        "lineEnd": 82,
        "columnStart": 4,
        "columnEnd": 59
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# Copyright 2017 Google Inc.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\nARG DISTRO_VERSION=30\nFROM fedora:${DISTRO_VERSION}\n\nRUN dnf makecache && dnf install -y \\\n    autoconf \\\n    automake \\\n    c-ares-devel \\\n    ccache \\\n    clang \\\n    clang-analyzer \\\n    clang-tools-extra \\\n    cmake \\\n    curl \\\n    doxygen \\\n    gcc-c++ \\\n    git \\\n    grpc-devel \\\n    grpc-plugins \\\n    libcurl-devel \\\n    libcxx-devel \\\n    libcxxabi-devel \\\n    libtool \\\n    make \\\n    ncurses-term \\\n    openssl-devel \\\n    pkgconfig \\\n    protobuf-compiler \\\n    python \\\n    shtool \\\n    unzip \\\n    wget \\\n    which \\\n    zlib-devel\n\nRUN pip install --no-cache-dir --upgrade pip\nRUN pip install --no-cache-dir httpbin flask gevent gunicorn crc32c\n\n# Install the Cloud Bigtable emulator and the Cloud Bigtable command-line\n# client.  They are used in the integration tests.\nWORKDIR /var/tmp/install/cbt-components\nRUN wget -q https://dl.google.com/dl/cloudsdk/channels/rapid/downloads/google-cloud-sdk-233.0.0-linux-x86_64.tar.gz\nRUN sha256sum google-cloud-sdk-233.0.0-linux-x86_64.tar.gz | \\\n    grep -q '^a04ff6c4dcfc59889737810174b5d3c702f7a0a20e5ffcec3a5c3fccc59c3b7a '\nRUN tar x -C /usr/local -f google-cloud-sdk-233.0.0-linux-x86_64.tar.gz && rm google-cloud-sdk-233.0.0-linux-x86_64.tar.gz\nRUN /usr/local/google-cloud-sdk/bin/gcloud --quiet components install cbt bigtable\n\n# Install Bazel too.\nWORKDIR /var/tmp/ci\nCOPY install-bazel.sh /var/tmp/ci\nRUN /var/tmp/ci/install-bazel.sh\n\nWORKDIR /var/tmp/build\nRUN wget -q https://github.com/google/crc32c/archive/1.0.6.tar.gz\nRUN tar -xf 1.0.6.tar.gz && rm 1.0.6.tar.gz\nWORKDIR /var/tmp/build/crc32c-1.0.6\nRUN cmake \\\n      -DCMAKE_BUILD_TYPE=Release \\\n      -DBUILD_SHARED_LIBS=yes \\\n      -DCRC32C_BUILD_TESTS=OFF \\\n      -DCRC32C_BUILD_BENCHMARKS=OFF \\\n      -DCRC32C_USE_GLOG=OFF \\\n      -H. -Bcmake-out/crc32c\nRUN cmake --build cmake-out/crc32c --target install -- -j $(nproc)\nRUN ldconfig\n\n# Install googletest.\nWORKDIR /var/tmp/build\nRUN wget -q https://github.com/google/googletest/archive/b6cd405286ed8635ece71c72f118e659f4ade3fb.tar.gz\nRUN tar -xf b6cd405286ed8635ece71c72f118e659f4ade3fb.tar.gz && rm b6cd405286ed8635ece71c72f118e659f4ade3fb.tar.gz\nWORKDIR /var/tmp/build/googletest-b6cd405286ed8635ece71c72f118e659f4ade3fb\nRUN cmake \\\n      -DCMAKE_BUILD_TYPE=\"Release\" \\\n      -DBUILD_SHARED_LIBS=yes \\\n      -H. -Bcmake-out/googletest\nRUN cmake --build cmake-out/googletest --target install -- -j ${NCPU}\nRUN ldconfig\n"
}