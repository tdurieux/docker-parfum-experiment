{
  "startTime": 1674252851455,
  "endTime": 1674252851532,
  "originalSmells": [
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 29,
        "lineEnd": 29,
        "columnStart": 4,
        "columnEnd": 58
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 30,
        "lineEnd": 30,
        "columnStart": 4,
        "columnEnd": 53
      }
    },
    {
      "rule": "yumInstallRmVarCacheYum",
      "position": {
        "lineStart": 9,
        "lineEnd": 20,
        "columnStart": 4,
        "columnEnd": 19
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "#\n# This attempts to create an environment as close to what ./bin/bootstrap.sh\n# creates as possible with the images available. TODO: Resolve assumptions\n# from bootstrap.sh so it can be used here to remove code duplication.\n#\nFROM amazonlinux:2017.03\n\nWORKDIR /tmp/redshift_etl\n\nRUN yum install -y \\\n        aws-cli \\\n        gcc \\\n        jq \\\n        libyaml-devel \\\n        openssh-clients \\\n        postgresql95-devel \\\n        python35 \\\n        python35-devel \\\n        python35-pip \\\n        tmux \\\n        vim-minimal \\\n    && \\\n    pip-3.5 install --upgrade --disable-pip-version-check virtualenv && rm -rf /var/cache/yum\n\n\nCOPY requirements*.txt ./\n\nRUN virtualenv --python=python3 venv && \\\n    source venv/bin/activate && \\\n    pip3 install --no-cache-dir --upgrade pip --disable-pip-version-check && \\\n    pip3 install --no-cache-dir --requirement ./requirements-dev.txt\n\nCOPY . .\n\n# Use the self tests to check if everything was installed properly\nRUN source venv/bin/activate && \\\n    python3 setup.py develop && \\\n    run_tests.py\n\n# Ensure the venv is activated when running interactive shells\nRUN echo $'source /tmp/redshift_etl/venv/bin/activate\\n\\\nsource /tmp/redshift_etl/etc/arthur_completion.sh\\n\\\nPATH=$PATH:/tmp/redshift_etl/bin\\n\\\ncat /tmp/redshift_etl/etc/motd\\n\\\necho \\n\\\necho \"Environment settings:\"\\n\\\narthur.py settings object_store.s3.* version' > /root/.bashrc\n\nWORKDIR /data-warehouse\n\n# Whenever there is an ETL running, it offers progress information on port 8086.\nEXPOSE 8086\n\n# From here, bind-mount your data warehouse code directory to /data-warehouse.\n# All of the normal Arthur configuration for accessing and managing the data\n# warehouse is assumed to have already been set up in that directory.\n"
}