{
  "startTime": 1674248587001,
  "endTime": 1674248587051,
  "originalSmells": [
    {
      "rule": "apkAddUseNoCache",
      "position": {
        "lineStart": 4,
        "lineEnd": 4,
        "columnStart": 4,
        "columnEnd": 62
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# Base build image\nFROM golang:1.11.5-alpine3.9 as builder\n\n# Install some dependencies needed to build the project\nRUN apk add --no-cache make gcc git libc-dev bash linux-headers eudev-dev\n\n# Set up GOPATH & PATH\nENV GOPATH       /root/go\nENV BASE_PATH    $GOPATH/src/github.com/\nENV REPO_PATH    $BASE_PATH/qos\nENV PATH         $GOPATH/bin:$PATH\n\n# Force the go compiler to use modules\nENV GO111MODULE=on\n\n# Set the Current Working Directory inside the container\nWORKDIR $REPO_PATH\n\n# We want to populate the module cache based on the go.{mod,sum} files.\nCOPY go.mod .\nCOPY go.sum .\n\n#This is the ‘magic’ step that will download all the dependencies that are specified in\n# the go.mod and go.sum file.\n# Because of how the layer caching system works in Docker, the  go mod download\n# command will _ only_ be re-run when the go.mod or go.sum file change\n# (or when we add another docker instruction this line)\nRUN go mod download\n\n# Add source files\nCOPY . $REPO_PATH/\n\n# build qosd & qoscli\nRUN go build -o qosd $REPO_PATH/cmd/qosd/main.go\nRUN go build -o qoscli $REPO_PATH/cmd/qoscli/main.go\n\n# new stage\nFROM alpine:3.9\n\n# p2p port\nEXPOSE 26656\n# rpc port\nEXPOSE 26657\n\nCOPY --from=builder /root/go/src/github.com/qos/qosd /usr/local/bin/\nCOPY --from=builder /root/go/src/github.com/qos/qoscli /usr/local/bin/\n"
}