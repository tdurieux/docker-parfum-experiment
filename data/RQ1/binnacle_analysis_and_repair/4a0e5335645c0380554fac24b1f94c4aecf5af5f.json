{
  "startTime": 1674234846145,
  "endTime": 1674234846314,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 38,
        "lineEnd": 38,
        "columnStart": 15,
        "columnEnd": 186
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 38,
        "lineEnd": 38,
        "columnStart": 85,
        "columnEnd": 161
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 7,
        "lineEnd": 7,
        "columnStart": 4,
        "columnEnd": 29
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 8,
        "lineEnd": 8,
        "columnStart": 4,
        "columnEnd": 45
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM golang:alpine\nRUN apk -v --update add \\\n        python \\\n        py-pip \\\n\tbash \\\n\tgit \\\n        curl && \\\n    pip install --no-cache-dir --upgrade pip && \\\n    pip install --no-cache-dir --upgrade awscli python-magic && \\\n    rm /var/cache/apk/*\n\nWORKDIR /src\nADD . /src/\n\nRUN mkdir -p /src/.aws\n\n# No need to hardcore the value below:\n\nARG AWS_ACCESS_KEY=xxx\nARG AWS_SECRET_KEY=yyy\nARG REGION=zzz\n\nENV aws_access_key_id=${AWS_ACCESS_KEY} \\\n    aws_secret_access_key=${AWS_SECRET_KEY} \\\n    region=${REGION}\n\nRUN echo [default] > /src/.aws/credentials && \\\n    env | grep aws_ >> /src/.aws/credentials && \\\n    env | grep region >> /src/.aws/credentials\n\nRUN export AWS_CONFIG_FILE=/src/.aws/credentials && \\\n    aws iam create-role --role-name eks --assume-role-policy-document file:///src/eks-svc-policy.json && \\\n    aws iam attach-role-policy --policy-arn arn:aws:iam::aws:policy/AmazonEKSServicePolicy --role-name eks && \\\n    aws iam attach-role-policy --policy-arn arn:aws:iam::aws:policy/AmazonEKSClusterPolicy --role-name eks && \\\n    aws cloudformation create-stack --stack-name eks-network --template-body file:///src/vars-eks-vpc.yaml --region $region\n\nRUN mkdir -p /src/.kube\n\nRUN cd /bin && curl -f -sLO https://storage.googleapis.com/kubernetes-release/release/$( curl -f -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/amd64/kubectl \\\n  && chmod +x /bin/kubectl\n\nRUN cd /go \\\n\t&& go get -u -v github.com/kubernetes-sigs/aws-iam-authenticator/cmd/aws-iam-authenticator \\\n\t&& cd src/github.com/kubernetes-sigs/aws-iam-authenticator/cmd/aws-iam-authenticator/ \\\n\t&& go build -o /bin/heptio-authenticator-aws \\\n\t&& echo \"Build heptio-authenticator-aws complete.\"\n\nCOPY cluster.sh  /bin/cluster.sh\nRUN chmod +x /bin/cluster.sh\n\nRUN export AWS_CONFIG_FILE=/src/.aws/credentials && . /bin/cluster.sh\nCMD [ \"tail\", \"-F\", \"-n0\", \"/etc/hosts\"  ]\n"
}