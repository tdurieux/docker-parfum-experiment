{
  "startTime": 1674245212275,
  "endTime": 1674245212699,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 52,
        "lineEnd": 52,
        "columnStart": 4,
        "columnEnd": 46
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 3,
        "lineEnd": 3,
        "columnStart": 4,
        "columnEnd": 63
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 6,
        "lineEnd": 6,
        "columnStart": 4,
        "columnEnd": 53
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 16,
        "lineEnd": 16,
        "columnStart": 22,
        "columnEnd": 115
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 2,
        "lineEnd": 2,
        "columnStart": 9,
        "columnEnd": 57
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 5,
        "lineEnd": 5,
        "columnStart": 9,
        "columnEnd": 58
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 9,
        "lineEnd": 9,
        "columnStart": 9,
        "columnEnd": 56
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM php:7.1-apache-stretch\n\nLABEL authors=\"Julien Neuhart <j.neuhart@thecodingmachine.com>, David NÃ©grier <d.negrier@thecodingmachine.com>\"\n\n\n# |--------------------------------------------------------------------------\n# | Main PHP extensions\n# |--------------------------------------------------------------------------\n# |\n# | Installs the main PHP extensions\n# |\n\nCOPY extensions/ /usr/local/lib/thecodingmachine-php/extensions\nRUN ln -s 7.1 /usr/local/lib/thecodingmachine-php/extensions/current\n\n# Install php extensions\nRUN apt-get update && apt-get install -y --no-install-recommends git nano sudo iproute2 openssh-client procps unzip && rm -rf /var/lib/apt/lists/*;\nRUN cd /usr/local/lib/thecodingmachine-php/extensions/current/zip && ./install.sh\n# RUN echo 'extension=zip.so' > /usr/local/etc/php/conf.d/generated_conf.ini\n\n# |--------------------------------------------------------------------------\n# | User\n# |--------------------------------------------------------------------------\n# |\n# | Define a default user with sudo rights.\n# |\n\nRUN useradd -ms /bin/bash docker && adduser docker sudo\n# Users in the sudoers group can sudo as root without password.\nRUN echo '%sudo ALL=(ALL) NOPASSWD:ALL' >> /etc/sudoers\n\n# |--------------------------------------------------------------------------\n# | Default php.ini file\n# |--------------------------------------------------------------------------\n# |\n# | Let's download php.ini for prod and development\n# |\n\nADD https://raw.githubusercontent.com/php/php-src/php-${PHP_VERSION}/php.ini-production /usr/local/etc/php/php.ini-production\nADD https://raw.githubusercontent.com/php/php-src/php-${PHP_VERSION}/php.ini-development /usr/local/etc/php/php.ini-development\nRUN chmod 644 /usr/local/etc/php/php.ini-*\nENV TEMPLATE_PHP_INI=development\n\n# |--------------------------------------------------------------------------\n# | Composer\n# |--------------------------------------------------------------------------\n# |\n# | Installs Composer to easily manage your PHP dependencies.\n# |\n\n#ENV COMPOSER_ALLOW_SUPERUSER 1\n\nRUN curl -f -sS https://getcomposer.org/installer | php -- --install-dir=/usr/local/bin --filename=real_composer && \\\n    chmod +x /usr/local/bin/real_composer\n\n# TODO: utils.php in /usr/local/bin... bof!\nCOPY utils/utils.php /usr/local/bin/utils.php\nCOPY utils/composer_proxy.sh /usr/local/bin/composer\nCOPY utils/generate_conf.php /usr/local/bin/generate_conf.php\n\n\n# |--------------------------------------------------------------------------\n# | prestissimo\n# |--------------------------------------------------------------------------\n# |\n# | Installs Prestissimo to improve Composer download performance.\n# |\n\nUSER docker\nRUN composer global require hirak/prestissimo && \\\n    composer global require bamarni/symfony-console-autocomplete && \\\n    rm -rf $HOME\\.composer\n\nUSER root\n\n\nENV APACHE_DOCUMENT_ROOT /\n\nRUN sed -ri -e 's!/var/www/html!/var/www/html/${APACHE_DOCUMENT_ROOT}!g' /etc/apache2/sites-available/*.conf\nRUN sed -ri -e 's!/var/www/!/var/www/html/${APACHE_DOCUMENT_ROOT}!g' /etc/apache2/apache2.conf /etc/apache2/conf-available/*.conf\n\n# |--------------------------------------------------------------------------\n# | Apache mod_rewrite\n# |--------------------------------------------------------------------------\n# |\n# | Enables Apache mod_rewrite.\n# |\n\nRUN a2enmod rewrite\n\n\n\n\nRUN chown docker:docker /var/www/html\n\n\n# |--------------------------------------------------------------------------\n# | PATH updating\n# |--------------------------------------------------------------------------\n# |\n# | Let's add ./vendor/bin to the PATH (utility function to use Composer bin easily)\n# |\nENV PATH=\"$PATH:./vendor/bin:~/.composer/vendor/bin\"\nRUN sed -i 's#/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin#/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:./vendor/bin:~/.composer/vendor/bin#g' /etc/sudoers\n\nUSER docker\n# |--------------------------------------------------------------------------\n# | SSH client\n# |--------------------------------------------------------------------------\n# |\n# | Let's set-up the SSH client (for connections to private git repositories)\n# | We create an empty known_host file and we launch the ssh-agent\n# |\n\nRUN mkdir ~/.ssh && touch ~/.ssh/known_hosts && chmod 644 ~/.ssh/known_hosts && eval $(ssh-agent -s)\n\n\n# |--------------------------------------------------------------------------\n# | .bashrc updating\n# |--------------------------------------------------------------------------\n# |\n# | Let's update the .bashrc to add nice aliases\n# |\n\nRUN echo 'eval \"$(symfony-autocomplete)\"' > ~/.bash_profile\n\nRUN { \\\n        echo \"alias ls='ls --color=auto'\"; \\\n        echo \"alias ll='ls --color=auto -alF'\"; \\\n        echo \"alias la='ls --color=auto -A'\"; \\\n        echo \"alias l='ls --color=auto -CF'\"; \\\n    } >> ~/.bashrc\n\nUSER root\n\n# |--------------------------------------------------------------------------\n# | NodeJS\n# |--------------------------------------------------------------------------\n# |\n# | NodeJS path registration (if we install NodeJS, this is useful).\n# |\nENV PATH=\"$PATH:./node_modules/.bin\"\nRUN sed -i 's#/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin#/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:./node_modules/.bin#g' /etc/sudoers\n\n# |--------------------------------------------------------------------------\n# | Entrypoint\n# |--------------------------------------------------------------------------\n# |\n# | Defines the entrypoint.\n# |\n\nENV IMAGE_VARIANT=apache\n\n# Add Tini (to be able to stop the container with ctrl-c.\n# See: https://github.com/krallin/tini\nENV TINI_VERSION v0.16.1\nADD https://github.com/krallin/tini/releases/download/${TINI_VERSION}/tini /tini\nRUN chmod +x /tini\n\nCOPY utils/generate_cron.php /usr/local/bin/generate_cron.php\nCOPY utils/startup_commands.php /usr/local/bin/startup_commands.php\n\nCOPY utils/enable_apache_mods.php /usr/local/bin/enable_apache_mods.php\nCOPY utils/apache-expose-envvars.sh /usr/local/bin/apache-expose-envvars.sh\n\nCOPY utils/docker-entrypoint.sh /usr/local/bin/docker-entrypoint.sh\nCOPY utils/docker-entrypoint-as-root.sh /usr/local/bin/docker-entrypoint-as-root.sh\n\nENTRYPOINT [\"/usr/local/bin/docker-entrypoint.sh\"]\n\n\n# Let's register a servername to remove the message \"apache2: Could not reliably determine the server's fully qualified domain name, using 172.17.0.2. Set the 'ServerName' directive globally to suppress this message\"\nRUN echo \"ServerName localhost\" > /etc/apache2/conf-available/servername.conf\nRUN a2enconf servername\n\nCMD [\"apache2-foreground\"]\n\n# |--------------------------------------------------------------------------\n# | Entrypoint\n# |--------------------------------------------------------------------------\n# |\n# | Defines Apache user. Bu default, we switch this to \"docker\" user.\n# | This way, no problem to write from Apache in the current working directory.\n# | Important! This should be changed back to www-data in production.\n# |\n\nENV APACHE_RUN_USER=docker \\\n    APACHE_RUN_GROUP=docker\n\n\n\n\nUSER docker\n\nCOPY utils/install_selected_extensions.php /usr/local/bin/install_selected_extensions.php\n\nONBUILD ARG PHP_EXTENSIONS\nONBUILD ENV PHP_EXTENSIONS=\"$PHP_EXTENSIONS\"\nONBUILD RUN sudo -E PHP_EXTENSIONS=\"$PHP_EXTENSIONS\" php /usr/local/bin/install_selected_extensions.php\n\n# |--------------------------------------------------------------------------\n# | Supercronic\n# |--------------------------------------------------------------------------\n# |\n# | Supercronic is a drop-in replacement for cron (for containers).\n# |\n\nONBUILD ARG INSTALL_CRON\nONBUILD RUN if [ -n \"$INSTALL_CRON\" ]; then \\\n SUPERCRONIC_URL=https://github.com/aptible/supercronic/releases/download/v0.1.5/supercronic-linux-amd64 \\\n && SUPERCRONIC=supercronic-linux-amd64 \\\n && SUPERCRONIC_SHA1SUM=9aeb41e00cc7b71d30d33c57a2333f2c2581a201 \\\n && curl -fsSLO \"$SUPERCRONIC_URL\" \\\n && echo \"${SUPERCRONIC_SHA1SUM}  ${SUPERCRONIC}\" | sha1sum -c - \\\n && chmod +x \"$SUPERCRONIC\" \\\n && sudo mv \"$SUPERCRONIC\" \"/usr/local/bin/${SUPERCRONIC}\" \\\n && sudo ln -s \"/usr/local/bin/${SUPERCRONIC}\" /usr/local/bin/supercronic; \\\n fi;\n\n\n# |--------------------------------------------------------------------------\n# | NodeJS\n# |--------------------------------------------------------------------------\n# |\n# | Installs NodeJS and npm. The later will allow you to easily manage\n# | your frontend dependencies.\n# | Also installs yarn. It provides some nice improvements over npm.\n# |\nONBUILD ARG NODE_VERSION\n \\\nRUN if [ -n \"$NODE_VERSION\" ]; then \\\n    sudo apt-get update && \\\n    sudo apt-get install -y --no-install-recommends gnupg && \\\n    curl -f -sL https://deb.nodesource.com/setup_${NODE_VERSION}.x | sudo bash - && \\\n    sudo apt-get update && \\\n    sudo apt-get install -y --no-install-recommends nodejs && \\\n    curl -f -sS https://dl.yarnpkg.com/debian/pubkey.gpg | sudo apt-key add - && \\\n    echo \"deb https://dl.yarnpkg.com/debian/ stable main\" | sudo tee /etc/apt/sources.list.d/yarn.list && \\\n    sudo apt-get update && \\\n    sudo apt-get install -y --no-install-recommends yarn; rm -rf /var/lib/apt/lists/*; \\\n    fi; ONBUILD\n\n\n\n\n\n\n\n\n\n\n"
}