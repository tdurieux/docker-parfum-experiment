{
  "startTime": 1674641740693,
  "endTime": 1674641740725,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 6,
        "lineEnd": 6,
        "columnStart": 4,
        "columnEnd": 121
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# Describes how to build a Docker image. Each instruction creates a new layer in the image.\n\n# This is good for deployed apps as it will be minimal\nFROM microsoft/aspnetcore-build:latest\n\n# set up package cache\nRUN curl -f -o /tmp/packagescache.tar.gz https://dist.asp.net/packagecache/aspnetcore.packagecache-1.0.1-debian.8-x64.tar.gz && \\\n    mkdir /packagescache && cd /packagescache && \\\n    tar xvf /tmp/packagescache.tar.gz && \\\n    rm /tmp/packagescache.tar.gz && \\\n    cd /\n\n# set env var for packages cache\nENV DOTNET_HOSTING_OPTIMIZATION_CACHE /packagescache\n\n# set up network\nEXPOSE 5000/tcp\nENV ASPNETCORE_URLS http://*:5000\n#ENV ASPNETCORE_URLS http://+:80\n\n# copy files from current directory to target on container - i.e. if you want your app in the container and want to deploy it\nCOPY . /sampleAspnetCoreWebApiApp\nWORKDIR /sampleAspnetCoreWebApiApp\n\n# RUN [\"dotnet\", \"restore\"]\n# RUN [\"dotnet\", \"build\"]\n# ENTRYPOINT [\"dotnet\", \"watch\", \"run\"]"
}