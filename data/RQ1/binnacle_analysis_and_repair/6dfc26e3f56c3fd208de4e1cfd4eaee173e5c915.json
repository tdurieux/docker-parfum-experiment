{
  "startTime": 1674243156924,
  "endTime": 1674243156999,
  "originalSmells": [
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 29,
        "lineEnd": 29,
        "columnStart": 4,
        "columnEnd": 15
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 24,
        "lineEnd": 24,
        "columnStart": 4,
        "columnEnd": 22
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 25,
        "lineEnd": 25,
        "columnStart": 4,
        "columnEnd": 35
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM python:3.6-alpine\n\nEXPOSE 8000\n\nWORKDIR /app\n\n\nRUN addgroup -g 10001 app && \\\n    adduser -D -u 10001 -G app -h /app -s /sbin/nologin app\n\nRUN apk --no-cache add \\\n    build-base \\\n    bash \\\n    curl \\\n    git \\\n    openssl-dev \\\n    libffi-dev \\\n    py-cffi \\\n    postgresql \\\n    postgresql-dev \\\n    postgresql-client \\\n    nodejs\n\nCOPY requirements.txt /app/requirements.txt\nRUN pip install --no-cache-dir -U pip && \\\n    pip install --no-cache-dir -r requirements.txt\n# TODO: --require-hashes\n\nCOPY package.json /app/package.json\nRUN npm install && npm cache clean --force;\n\n# Clean up some build packages after we're done with Python.\nRUN apk del --purge build-base gcc\n\n# Copy in the whole app after dependencies have been installed & cached.\nCOPY . /app\n\n# Collect the static assets together, with placeholder env vars.\nRUN SECRET_KEY=foo DEBUG=False ALLOWED_HOSTS=localhost \\\n    DATABASE_URL=postgres://postgres@db/postgres \\\n    ./manage.py collectstatic --noinput\n\nRUN chown -R app:app /app\n\n# De-escalate from root privileges with app user.\nUSER app\n\nENTRYPOINT [\"/bin/bash\", \"/app/bin/run\"]\nCMD [\"dev\"]\n"
}