{
  "startTime": 1674243762868,
  "endTime": 1674243763315,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 60,
        "lineEnd": 60,
        "columnStart": 4,
        "columnEnd": 34
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 61,
        "lineEnd": 61,
        "columnStart": 4,
        "columnEnd": 31
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 62,
        "lineEnd": 62,
        "columnStart": 4,
        "columnEnd": 36
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 63,
        "lineEnd": 63,
        "columnStart": 4,
        "columnEnd": 32
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 64,
        "lineEnd": 64,
        "columnStart": 4,
        "columnEnd": 31
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 65,
        "lineEnd": 65,
        "columnStart": 4,
        "columnEnd": 34
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 1,
        "lineEnd": 1,
        "columnStart": 12,
        "columnEnd": 93
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 75,
        "lineEnd": 75,
        "columnStart": 4,
        "columnEnd": 35
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 83,
        "lineEnd": 83,
        "columnStart": 4,
        "columnEnd": 77
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 91,
        "lineEnd": 91,
        "columnStart": 4,
        "columnEnd": 37
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 97,
        "lineEnd": 114,
        "columnStart": 4,
        "columnEnd": 24
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "###\n# Heroku Phalcon Docker\n##\n\nFROM heroku/cedar:14\n\nRUN useradd -d /app -m app\nUSER app\nRUN mkdir /app/build\nRUN mkdir /app/src\nWORKDIR /app/src\n\n# Path\nENV HOME /app\nENV BUILD_HOME /app/build\nENV APACHE_ROOT ${HOME}/apache\nENV PHP_ROOT ${HOME}/php\nENV MCRYPT_ROOT ${HOME}/libs/libmcrypt\nENV PCRE_ROOT ${HOME}/libs/pcre\nENV MEMCACHED_ROOT ${HOME}/libs/libmemcached\n\n# Version\nENV APACHE_VERSION 2.4.12\nENV PHP_VERSION 5.6.9\nENV LIBMCRYPT_VERSION 2.5.8\nENV APR_VERSION 1.5.2\nENV APR_UTIL_VERSION 1.5.4\nENV LIBPCRE_VERSION 8.37\n\n# Download Url\nENV APACHE_URL http://www.us.apache.org/dist/httpd/httpd-${APACHE_VERSION}.tar.gz\nENV PHP_URL http://us.php.net/distributions/php-${PHP_VERSION}.tar.gz\nENV MCRYPT_URL http://downloads.sourceforge.net/project/mcrypt/Libmcrypt/${LIBMCRYPT_VERSION}/libmcrypt-${LIBMCRYPT_VERSION}.tar.gz\nENV APR_URL http://www.us.apache.org/dist/apr/apr-${APR_VERSION}.tar.gz\nENV APR_UTIL_URL http://www.us.apache.org/dist/apr/apr-util-${APR_UTIL_VERSION}.tar.gz\nENV PCRE_URL ftp://ftp.csx.cam.ac.uk/pub/software/programming/pcre/pcre-${LIBPCRE_VERSION}.tar.gz\nENV COMPOSER_URL http://getcomposer.org/composer.phar\n\nENV PHALCON_REPO git://github.com/phalcon/cphalcon.git\n\n# Dir\nENV APACHE_DIR httpd-${APACHE_VERSION}\nENV PHP_DIR php-${PHP_VERSION}\nENV MCRYPT_DIR libmcrypt-${LIBMCRYPT_VERSION}\nENV APR_DIR apr-${APR_VERSION}\nENV APR_UTIL_DIR apr-util-${APR_UTIL_VERSION}\nENV PCRE_DIR pcre-${LIBPCRE_VERSION}\nENV PHALCON_DIR cphalcon\n\nENV CURL_FLAGS --location --silent\n\nENV PATH $PATH:$PHP_ROOT/bin:$APACHE_ROOT/bin\nENV PORT 3000\n\n# ========\n# Building\n# ========\n\nRUN cd $BUILD_HOME && \\\n    # Download Source Code\n    curl -f $CURL_FLAGS \"$APACHE_URL\" | tar zx && \\\n    curl -f $CURL_FLAGS \"$APR_URL\" | tar zx && \\\n    curl -f $CURL_FLAGS \"$APR_UTIL_URL\" | tar zx && \\\n    curl -f $CURL_FLAGS \"$PCRE_URL\" | tar zx && \\\n    curl -f $CURL_FLAGS \"$PHP_URL\" | tar zx && \\\n    curl -f $CURL_FLAGS \"$MCRYPT_URL\" | tar zx && \\\n\n    git clone -q --depth=1 $PHALCON_REPO && \\\n\n    # =====\n    # Build\n    # =====\n\n    # PCRE\n    cd $PCRE_DIR && \\\n    ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --prefix=$PCRE_ROOT && \\\n    make && make install && \\\n    cd $BUILD_HOME && \\\n\n    # Apache\n    mv $APR_DIR $APACHE_DIR/srclib/apr && \\\n    mv $APR_UTIL_DIR $APACHE_DIR/srclib/apr-util && \\\n    cd $APACHE_DIR && \\\n    ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --prefix=$APACHE_ROOT --with-pcre=$PCRE_ROOT --enable-rewrite && \\\n    make && make install && \\\n    cd $BUILD_HOME && \\\n\n    # MCRYPT\n    cd $MCRYPT_DIR && \\\n    #autoconf -W no-obsolete -W no-syntax && \\\n    #automake && \\\n    ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --prefix=$MCRYPT_ROOT && \\\n    make && make install && \\\n    cd $BUILD_HOME && \\\n\n    # PHP\n    cd $PHP_DIR && \\\n    ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" \\\n    --prefix=$PHP_ROOT \\\n    --with-config-file-path=$PHP_ROOT \\\n    --with-apxs2=$APACHE_ROOT/bin/apxs \\\n    --enable-opcache \\\n    --with-mysql \\\n    --with-pdo-mysql \\\n    --with-pgsql \\\n    --with-pdo-pgsql \\\n    --with-iconv \\\n    --with-gd \\\n    --with-curl \\\n    --enable-soap=shared \\\n    --with-openssl \\\n    --enable-mbstring \\\n    --with-curl \\\n    --with-mcrypt=$MCRYPT_ROOT \\\n    --with-jpeg-dir=/usr && \\\n    make && make install && \\\n    cp php.ini-production $PHP_ROOT/php.ini && \\\n    cd $BUILD_HOME && \\\n\n    # PEAR\n    $PHP_ROOT/bin/pecl channel-update pecl.php.net && \\\n\n    # Extension\n    # Auto use default prompt\n    printf \"\\n\" | pecl install mongo && \\\n    printf \"\\n\" | pecl install redis && \\\n\n    # Phalcon\n    cd $PHALCON_DIR/build && \\\n    ./install && \\\n\n    # =====\n    # Clean\n    # =====\n    rm -rf $BUILD_HOME\n\n# Configure\nRUN sed -ire 's/^Listen.*$/Listen \\${PORT}/g' $APACHE_ROOT/conf/httpd.conf && \\\n    sed -ire 's/^DocumentRoot.*$/DocumentRoot\\ \"\\/app\\/src\"/g' $APACHE_ROOT/conf/httpd.conf && \\\n    sed -ire 's/<Directory \"\\/app\\/apache\\/htdocs\">/<Directory \"\\/app\\/src\">/g' $APACHE_ROOT/conf/httpd.conf && \\\n    sed -ire 's/AllowOverride\\ None/AllowOverride\\ All/g' $APACHE_ROOT/conf/httpd.conf\nRUN echo \"<IfModule dir_module>\\nDirectoryIndex index.html index.php\\n</IfModule>\" >> $APACHE_ROOT/conf/httpd.conf && \\\n    echo \"<FilesMatch \\.php$>\\nSetHandler application/x-httpd-php\\n</FilesMatch>\" >> $APACHE_ROOT/conf/httpd.conf\nRUN echo \"zend_extension=opcache.so\" >> $PHP_ROOT/php.ini && \\\n    echo \"extension=phalcon.so\" >> $PHP_ROOT/php.ini && \\\n    echo \"extension=mongo.so\" >> $PHP_ROOT/php.ini && \\\n    echo \"extension=redis.so\" >> $PHP_ROOT/php.ini\n\nUSER root\nCOPY ./ext/package.sh /app/package.sh\nRUN chmod +x /app/package.sh\n\n# Copy SourceCode\nONBUILD COPY . /app/src\nONBUILD USER root\nONBUILD RUN chown -R app /app\nONBUILD USER app\n\n# Setup Dependency\n \\\nRUN if [ -f /app/src/composer.json ]; then \\\n            curl -f --silent --max-time 60 --location \"$COMPOSER_URL\" > $HOME/src/composer.phar; \\\n            php $HOME/src/composer.phar install --prefer-dist; \\\n            rm $HOME/src/composer.phar; \\\n            fiONBUILD\n\n\n\n\n\n# Configure Profile\nONBUILD USER app\nONBUILD RUN mkdir -p /app/.profile.d\nONBUILD RUN echo \"export PATH=\\\"$PATH:$PHP_ROOT/bin:$APACHE_ROOT/bin\\\"\" > /app/.profile.d/php.sh\nONBUILD RUN echo \"cd /app/src\" >> /app/.profile.d/php.sh\n\nONBUILD EXPOSE 3000\n"
}