{
  "startTime": 1674242315026,
  "endTime": 1674242315168,
  "originalSmells": [
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 2,
        "lineEnd": 6,
        "columnStart": 26,
        "columnEnd": 5
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 2,
        "lineEnd": 6,
        "columnStart": 26,
        "columnEnd": 5
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM php:5-apache\n\nRUN apt-get update -qq && apt-get install --no-install-recommends -y -qq \\\n  default-jre \\\n  git \\\n  sudo \\\n  zip && rm -rf /var/lib/apt/lists/*;\n\n# Change this in docker-compose for each installation.\nENV SYMFONY_ENV dev\nENV APACHE_RUN_USER hubdrop\n\n# add our user and group first to make sure their IDs get assigned consistently, regardless of whatever dependencies get added\nARG HUBDROP_UID=12345\nRUN echo \"Creating user and group 'hubdrop' with UID and GID $HUBDROP_UID...\"\nRUN groupadd -r hubdrop --gid $HUBDROP_UID && useradd -r --uid $HUBDROP_UID --gid $HUBDROP_UID --system --home /var/hubdrop hubdrop\nRUN adduser hubdrop www-data\nRUN mkdir /var/hubdrop && chown hubdrop:hubdrop /var/hubdrop\n\n# Set SSH config to avoid needing to confirm known hosts.\nRUN echo \"Host github.com\\n  StrictHostKeyChecking no \\n  IdentityFile /var/hubdrop/.ssh/id_rsa \" >> /etc/ssh/ssh_config\n\n# Allow our user to run apache2-foreground\nCOPY sudoers /etc/sudoers.d/hubdrop\nRUN chmod 0440 /etc/sudoers.d/hubdrop\n\n# Enable mod_rewrite\nRUN a2enmod rewrite\n\n# Set ownership to our user\nRUN chown hubdrop:hubdrop /var/lock/apache2\nRUN chown hubdrop:hubdrop /var/run/apache2\n\n# Set ownership of /etc/apache2/envvars so hubdrop-entrypoint.sh can write to it\nRUN chown hubdrop:hubdrop /etc/apache2/envvars\n\n# Add our own PHP configuration\nCOPY php.ini /usr/local/etc/php\n\n# Add our own Apache configuration\nCOPY apache.conf /etc/apache2/sites-available/000-default.conf\n\n# Add our own entrypoint script\nCOPY hubdrop-entrypoint.sh /usr/local/bin/hubdrop-entrypoint.sh\nRUN chmod +x /usr/local/bin/hubdrop-entrypoint.sh\n\n# Add composer CLI\n# Instructions from from https://getcomposer.org/download/\nRUN php -r \"copy('https://getcomposer.org/installer', 'composer-setup.php');\" && \\\n    php -r \"if (hash_file('SHA384', 'composer-setup.php') === '669656bab3166a7aff8a7506b8cb2d1c292f042046c5a994c43155c0be6190fa0355160742ab2e1c88d40d5be660b410') { echo 'Installer verified'; } else { echo 'Installer corrupt'; unlink('composer-setup.php'); } echo PHP_EOL;\"  && \\\n    php composer-setup.php  && \\\n    php -r \"unlink('composer-setup.php');\" && \\\n    mv composer.phar /usr/local/bin/composer && \\\n    chmod +x /usr/local/bin/composer && \\\n    composer\n\n# Link hubdrop CLI\nRUN ln -s /var/hubdrop/app/app/console /usr/local/bin/console\n\n# Link jenkins-CLI. Will be linked from jenkins container.\nCOPY jenkins-cli.sh /usr/local/bin/jenkins-cli\nRUN chmod +x /usr/local/bin/jenkins-cli\n\nUSER hubdrop\n\n# Install app source code.\n# @TODO: Create RELEASE Dockerfiles to install the source into.\n# When using this Dockerfile, it will either be mounted or installed via hubdrop-entrypoint.sh\n# RUN git clone https://github.com/hubdrop/app.git /var/hubdrop/app\n# RUN cd /var/hubdrop/app && composer install\n\nWORKDIR /var/hubdrop\nENV HOME /var/hubdrop\n\n# Set the container's command to our script.\nCMD [\"hubdrop-entrypoint.sh\"]"
}