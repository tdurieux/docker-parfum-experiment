{
  "startTime": 1674242290632,
  "endTime": 1674242290716,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 7,
        "lineEnd": 7,
        "columnStart": 4,
        "columnEnd": 71
      }
    },
    {
      "rule": "apkAddUseNoCache",
      "position": {
        "lineStart": 31,
        "lineEnd": 31,
        "columnStart": 4,
        "columnEnd": 36
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM golang:alpine AS build-env\n\n# Set working directory for the build\nWORKDIR /go/src/{{ .GoPkg }}\n\n# Setup build environment\nRUN apk add --no-cache curl git && \\\n    curl -f https://raw.githubusercontent.com/golang/dep/master/install.sh | sh\n\n# Copy only the dependency manifests\nCOPY Gopkg.toml Gopkg.lock ./\n\n# Fetch dependencies\nRUN dep ensure -v --vendor-only\n\n# Build dependencies\nRUN find vendor -maxdepth 2 -mindepth 2 -type d -exec \\\n    sh -c 'CGO_ENABLED=0 go build -v -ldflags \"-s -w\" {{ .GoPkg }}/{}/... || true' \\;\n\n# Add source files\nCOPY . ./\n\n# Build and install\nRUN \\\n    CGO_ENABLED=0 go build -v -ldflags \"-s -w\" -o build/{{ .Name }}d ./cmd/{{ .Name}}d && \\\n    CGO_ENABLED=0 go build -v -ldflags \"-s -w\" -o build/{{ .Name }}cli ./cmd/{{ .Name}}cli\n\n# Final image\nFROM alpine:edge\n\n# Install ca-certificates\nRUN apk add --no-cache --update ca-certificates\nWORKDIR /root\n\n# Copy over binaries from the build-env\nCOPY --from=build-env /go/src/{{ .GoPkg }}/build/{{ .Name }}d /usr/bin/{{ .Name }}d\nCOPY --from=build-env /go/src/{{ .GoPkg }}/build/{{ .Name }}cli /usr/bin/{{ .Name }}cli\n\n# Run the daemon by default\nCMD [\"{{ .Name }}d\"]\n"
}