{
  "startTime": 1674243518191,
  "endTime": 1674243518265,
  "originalSmells": [
    {
      "rule": "yarnCacheCleanAfterInstall",
      "position": {
        "lineStart": 37,
        "lineEnd": 37,
        "columnStart": 4,
        "columnEnd": 16
      }
    },
    {
      "rule": "mkdirUsrSrcThenRemove",
      "position": {
        "lineStart": 27,
        "lineEnd": 27,
        "columnStart": 4,
        "columnEnd": 22
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# docker-compose\n# --------------\n# This dockerfile is used by the `docker-compose.yml` adjacent file. When\n# running `docker-compose build`, this dockerfile helps build the \"webapp\" image.\n# All paths are relative to the `context`, which is the project root directory.\n#\n# docker build\n# --------------\n# If you would like to use this dockerfile to build and tag an image, make sure\n# you set the context to the project's root directory:\n# https://docs.docker.com/engine/reference/commandline/build/\n#\n#\n# SUMMARY\n# --------------\n# This dockerfile has two stages:\n#\n# 1. Building the React application for production\n# 2. Setting up our Nginx (OpenResty*) image w/ step one's output\n#\n# * OpenResty is functionally identical to Nginx with the addition of Lua out of\n# the box.\n\n\n# Stage 1: Build the application\nFROM node:11.2.0-slim as builder\n\nRUN mkdir /usr/src/app && rm -rf /usr/src/app\nWORKDIR /usr/src/app\n\nENV REACT_APP_CONFIG=config/docker_openresty-orthanc.js\nENV PATH /usr/src/app/node_modules/.bin:$PATH\n\nCOPY package.json /usr/src/app/package.json\nCOPY yarn.lock /usr/src/app/yarn.lock\n\nADD . /usr/src/app/\nRUN yarn install && yarn cache clean;\nRUN yarn run build:web\n\n# Stage 2: Bundle the built application into a Docker container\n# which runs openresty (nginx) using Alpine Linux\n# LINK: https://hub.docker.com/r/openresty/openresty\nFROM openresty/openresty:1.15.8.1rc1-0-alpine-fat\n\nRUN mkdir /var/log/nginx\nRUN apk add --no-cache openssl\nRUN apk add --no-cache openssl-dev\nRUN apk add --no-cache git\nRUN apk add --no-cache gcc\n# !!!\nRUN luarocks install lua-resty-openidc\n\n#\nRUN luarocks install lua-resty-jwt\nRUN luarocks install lua-resty-session\nRUN luarocks install lua-resty-http\n# !!!\nRUN luarocks install lua-resty-openidc\nRUN luarocks install luacrypto\n\n# Copy build output to image\nCOPY --from=builder /usr/src/app/build /var/www/html\n\nENTRYPOINT [\"/usr/local/openresty/nginx/sbin/nginx\", \"-g\", \"daemon off;\"]\n"
}