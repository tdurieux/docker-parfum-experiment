{
  "startTime": 1674245670508,
  "endTime": 1674245670641,
  "originalSmells": [
    {
      "rule": "gemUpdateSystemRmRootGem",
      "position": {
        "lineStart": 30,
        "lineEnd": 30,
        "columnStart": 7,
        "columnEnd": 26
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM ruby:2.5.1-alpine3.7 AS builder\nLABEL maintainer=\"Rapid7\"\n\nARG BUNDLER_ARGS=\"--jobs=8 --without development test coverage\"\nENV APP_HOME /usr/src/metasploit-framework/\nENV BUNDLE_IGNORE_MESSAGES=\"true\"\nWORKDIR $APP_HOME\n\nCOPY Gemfile* metasploit-framework.gemspec Rakefile $APP_HOME\nCOPY lib/metasploit/framework/version.rb $APP_HOME/lib/metasploit/framework/version.rb\nCOPY lib/metasploit/framework/rails_version_constraint.rb $APP_HOME/lib/metasploit/framework/rails_version_constraint.rb\nCOPY lib/msf/util/helper.rb $APP_HOME/lib/msf/util/helper.rb\n\nRUN apk add --no-cache \\\n      autoconf \\\n      bison \\\n      build-base \\\n      ruby-dev \\\n      libressl-dev \\\n      readline-dev \\\n      sqlite-dev \\\n      postgresql-dev \\\n      libpcap-dev \\\n      libxml2-dev \\\n      libxslt-dev \\\n      yaml-dev \\\n      zlib-dev \\\n      ncurses-dev \\\n      git \\\n    && echo \"gem: --no-ri --no-rdoc\" > /etc/gemrc \\\n    && gem update --system \\\n    && gem install bundler \\\n    && bundle install --clean --no-cache --system $BUNDLER_ARGS \\\n    # temp fix for https://github.com/bundler/bundler/issues/6680\n    && rm -rf /usr/local/bundle/cache \\\n    # needed so non root users can read content of the bundle \\\n    && chmod -R a+r /usr/local/bundle && rm -rf /root/.gem;\n\n\nFROM ruby:2.5.1-alpine3.7\nLABEL maintainer=\"Rapid7\"\n\nENV APP_HOME /usr/src/metasploit-framework/\nENV NMAP_PRIVILEGED=\"\"\n\nCOPY --from=builder /usr/local/bundle /usr/local/bundle\nCOPY . $APP_HOME\n\nRUN apk add --no-cache bash sqlite-libs nmap nmap-scripts nmap-nselibs postgresql-libs python python3 ncurses libcap su-exec\n\nRUN /usr/sbin/setcap cap_net_raw,cap_net_bind_service=+eip $(which ruby)\nRUN /usr/sbin/setcap cap_net_raw,cap_net_bind_service=+eip $(which nmap)\n\nWORKDIR $APP_HOME\n# we need this entrypoint to dynamically create a user\n# matching the hosts UID and GID so we can mount something\n# from the users home directory. If the IDs don't match\n# it results in access denied errors. Once docker has\n# a solution for this we can revert it back to normal\nENTRYPOINT [\"docker/entrypoint.sh\"]\n\nCMD [\"./msfconsole\", \"-r\", \"docker/msfconsole.rc\"]\n"
}