{
  "startTime": 1674234515244,
  "endTime": 1674234515276,
  "originalSmells": [
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 10,
        "lineEnd": 10,
        "columnStart": 15,
        "columnEnd": 26
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "############################################################################\n# Dockerfile to build AWS deployment node-app-template container image\n#\n###########################################################################\n\nFROM node:argon\n\n# Use changes to package.json to force Docker not to use the cache\n# when we change our application's nodejs dependencies:\nADD package.json /tmp/package.json\nRUN cd /tmp && npm install && npm cache clean --force;\nRUN mkdir -p /opt/app && cp -a /tmp/node_modules /opt/app/\n\n# From here, we load our application's code so the previous docker \"layer\"\n# that was cached will be used if possible\nWORKDIR /opt/app\nADD . /opt/app\n\n# Define the default port. This can be overridden by the container manager\nEXPOSE 3000\n\n# Run app using CMD from the default ENTRYPOINT: /bin/sh -c npm start\nCMD [\"npm\", \"start\"]\n"
}