{
  "startTime": 1674252107894,
  "endTime": 1674252108708,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 81,
        "lineEnd": 81,
        "columnStart": 4,
        "columnEnd": 50
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 98,
        "lineEnd": 98,
        "columnStart": 19,
        "columnEnd": 60
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 155,
        "lineEnd": 155,
        "columnStart": 4,
        "columnEnd": 62
      }
    },
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 86,
        "lineEnd": 86,
        "columnStart": 0,
        "columnEnd": 19
      }
    },
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 86,
        "lineEnd": 86,
        "columnStart": 23,
        "columnEnd": 59
      }
    },
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 89,
        "lineEnd": 89,
        "columnStart": 4,
        "columnEnd": 28
      }
    },
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 92,
        "lineEnd": 92,
        "columnStart": 4,
        "columnEnd": 23
      }
    },
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 95,
        "lineEnd": 95,
        "columnStart": 4,
        "columnEnd": 24
      }
    },
    {
      "rule": "curlUseHttpsUrl",
      "position": {
        "lineStart": 98,
        "lineEnd": 98,
        "columnStart": 19,
        "columnEnd": 60
      }
    },
    {
      "rule": "wgetUseHttpsUrl",
      "position": {
        "lineStart": 108,
        "lineEnd": 108,
        "columnStart": 16,
        "columnEnd": 61
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 44,
        "lineEnd": 44,
        "columnStart": 65,
        "columnEnd": 101
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 108,
        "lineEnd": 108,
        "columnStart": 125,
        "columnEnd": 196
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 108,
        "lineEnd": 108,
        "columnStart": 65,
        "columnEnd": 91
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 4,
        "lineEnd": 4,
        "columnStart": 39,
        "columnEnd": 76
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 9,
        "lineEnd": 37,
        "columnStart": 39,
        "columnEnd": 6
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 40,
        "lineEnd": 40,
        "columnStart": 212,
        "columnEnd": 252
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 133,
        "lineEnd": 133,
        "columnStart": 4,
        "columnEnd": 73
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 82,
        "lineEnd": 82,
        "columnStart": 4,
        "columnEnd": 88
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 133,
        "lineEnd": 133,
        "columnStart": 4,
        "columnEnd": 73
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 4,
        "lineEnd": 4,
        "columnStart": 39,
        "columnEnd": 76
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 9,
        "lineEnd": 37,
        "columnStart": 39,
        "columnEnd": 6
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 40,
        "lineEnd": 40,
        "columnStart": 212,
        "columnEnd": 252
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 82,
        "lineEnd": 82,
        "columnStart": 4,
        "columnEnd": 88
      }
    }
  ],
  "repairedSmells": [
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 82,
        "lineEnd": 82,
        "columnStart": 4,
        "columnEnd": 88
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 133,
        "lineEnd": 133,
        "columnStart": 4,
        "columnEnd": 97
      }
    }
  ],
  "repairedDockerfile": "# Pull base image.\nFROM php:7.0.12-apache\nCOPY config/php.ini /usr/local/etc/php/\n\nRUN apt-get clean && apt-get update && apt-get install --no-install-recommends --fix-missing wget -y && rm -rf /var/lib/apt/lists/*;\nRUN echo \"deb http://packages.dotdeb.org jessie all\" >> /etc/apt/sources.list\nRUN echo \"deb-src http://packages.dotdeb.org jessie all\" >> /etc/apt/sources.list\nRUN cd /tmp && wget https://www.dotdeb.org/dotdeb.gpg && apt-key add dotdeb.gpg\n\nRUN apt-get clean && apt-get update && apt-get install --no-install-recommends --fix-missing -y \\\n  ruby-dev \\\n  rubygems \\\n  imagemagick \\\n  graphviz \\\n  sudo \\\n  git \\\n  vim \\\n  php7.0-dev \\\n  memcached \\\n  libmemcached-tools \\\n  libmemcached-dev \\\n  libpng12-dev \\\n  libjpeg62-turbo-dev \\\n  libmcrypt-dev \\\n  libxml2-dev \\\n  libxslt1-dev \\\n  mysql-client \\\n  php5-mysqlnd \\\n  zip \\\n  wget \\\n  linux-libc-dev \\\n  libyaml-dev \\\n  apt-transport-https \\\n  zlib1g-dev \\\n  libicu-dev \\\n  libpq-dev \\\n  bash-completion \\\n  htop && rm -rf /var/lib/apt/lists/*;\n\n# postgresql-client-9.5\nRUN wget --quiet -O - https://www.postgresql.org/media/keys/ACCC4CF8.asc | sudo apt-key add - && echo \"deb http://apt.postgresql.org/pub/repos/apt/ jessie-pgdg main\" >> /etc/apt/sources.list && apt-get update && apt-get install --no-install-recommends -y postgresql-client-9.5 && rm -rf /var/lib/apt/lists/*;\n\n# Install memcached for PHP 7\nRUN cd /tmp && git clone https://github.com/php-memcached-dev/php-memcached.git\nRUN cd /tmp/php-memcached && sudo git checkout php7 && phpize && ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --disable-memcached-sasl && make && make install\nRUN touch /usr/local/etc/php/conf.d/memcached.ini &&\\\n echo \"extension=/usr/local/lib/php/extensions/no-debug-non-zts-20151012/memcached.so\" >> /usr/local/etc/php/conf.d/memcached.ini\n\nCOPY docker-php-ext-install /usr/local/bin/\nRUN chmod +x /usr/local/bin/docker-php-ext-install\nRUN docker-php-ext-configure gd --with-jpeg-dir=/usr/include/ \\\n&& docker-php-ext-install \\\n  gd \\\n  mbstring \\\n  mcrypt \\\n  zip \\\n  soap \\\n  pdo_mysql \\\n  mysqli \\\n  xsl \\\n  opcache \\\n  calendar \\\n  intl \\\n  exif \\\n  pgsql \\\n  pdo_pgsql \\\n  ftp\n\n# Create new web user for apache and grant sudo without password\nRUN useradd web -d /var/www -g www-data -s /bin/bash\nRUN usermod -aG sudo web\nRUN echo 'web ALL=(ALL) NOPASSWD:ALL' >> /etc/sudoers\n\nRUN pecl install yaml-2.0.0 && echo \"extension=yaml.so\" > /usr/local/etc/php/conf.d/ext-yaml.ini\n\nCOPY core/memcached.conf /etc/memcached.conf\n\n# SASS and Compass installation\nRUN gem install compass\n\n# Installation node.js\nRUN curl -f -sL https://deb.nodesource.com/setup_0.12 | sudo bash -\nRUN DEBIAN_FRONTEND=noninteractive apt-get -yq --no-install-recommends install -y nodejs && rm -rf /var/lib/apt/lists/*;\n\n# Installation of LESS\nRUN npm update -g npm && \\\nnpm install -g less && npm install -g less-plugin-clean-css && npm cache clean --force;\n\n# Installation of Grunt\nRUN npm install -g grunt-cli && npm cache clean --force;\n\n# Installation of Gulp\nRUN npm install -g gulp && npm cache clean --force;\n\n# Installation of Bower\nRUN npm install -g bower && npm cache clean --force;\n\n# Installation of Composer\nRUN cd /usr/src && curl -f -sS https://getcomposer.org/installer | php\nRUN cd /usr/src && mv composer.phar /usr/bin/composer\n\n# Installation of drush\nRUN git clone https://github.com/drush-ops/drush.git /usr/local/src/drush\nRUN cd /usr/local/src/drush && git checkout 8.1.5\nRUN ln -s /usr/local/src/drush/drush /usr/bin/drush\nRUN cd /usr/local/src/drush && composer update && composer install\n\n# Install xdebug. We need at least 2.4 version to have PHP 7 support.\nRUN cd /tmp/ && wget https://xdebug.org/files/xdebug-2.4.0.tgz && tar -xvzf xdebug-2.4.0.tgz && cd xdebug-2.4.0/ && phpize && ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --enable-xdebug --with-php-config=/usr/local/bin/php-config && make && make install && rm xdebug-2.4.0.tgz\nRUN cd /tmp/xdebug-2.4.0 && cp modules/xdebug.so /usr/local/lib/php/extensions/no-debug-non-zts-20151012/\nRUN echo 'zend_extension = /usr/local/lib/php/extensions/no-debug-non-zts-20151012/xdebug.so' >> /usr/local/etc/php/php.ini\nRUN touch /usr/local/etc/php/conf.d/xdebug.ini &&\\\n  echo xdebug.remote_enable=1 >> /usr/local/etc/php/conf.d/xdebug.ini &&\\\n  echo xdebug.remote_autostart=0 >> /usr/local/etc/php/conf.d/xdebug.ini &&\\\n  echo xdebug.remote_connect_back=1 >> /usr/local/etc/php/conf.d/xdebug.ini &&\\\n  echo xdebug.remote_port=9000 >> /usr/local/etc/php/conf.d/xdebug.ini &&\\\n  echo xdebug.remote_log=/tmp/php5-xdebug.log >> /usr/local/etc/php/conf.d/xdebug.ini\n\nRUN rm -rf /var/www/html && \\\n  mkdir -p /var/lock/apache2 /var/run/apache2 /var/log/apache2 /var/www/html && \\\n  chown -R web:www-data /var/lock/apache2 /var/run/apache2 /var/log/apache2 /var/www/html\n\n# Installation of PHP_CodeSniffer with Drupal coding standards.\n# See https://www.drupal.org/node/1419988#coder-composer\nRUN composer global require drupal/coder\nRUN ln -s ~/.composer/vendor/bin/phpcs /usr/local/bin\nRUN ln -s ~/.composer/vendor/bin/phpcbf /usr/local/bin\nRUN phpcs --config-set installed_paths ~/.composer/vendor/drupal/coder/coder_sniffer\n\n# # Installation of Symfony console autocomplete\n# RUN composer global require bamarni/symfony-console-autocomplete\n\n# installation of ssmtp\nRUN DEBIAN_FRONTEND=noninteractive apt-get --no-install-recommends install --fix-missing -y ssmtp && rm -r /var/lib/apt/lists/*\nADD core/ssmtp.conf /etc/ssmtp/ssmtp.conf\nADD core/php-smtp.ini /usr/local/etc/php/conf.d/php-smtp.ini\n\nCOPY config/apache2.conf /etc/apache2\nCOPY core/envvars /etc/apache2\nCOPY core/other-vhosts-access-log.conf /etc/apache2/conf-enabled/\nRUN rm /etc/apache2/sites-enabled/000-default.conf\n\n# Installation of Opcode cache\nRUN ( \\\n  echo \"opcache.memory_consumption=128\"; \\\n  echo \"opcache.interned_strings_buffer=8\"; \\\n  echo \"opcache.max_accelerated_files=4000\"; \\\n  echo \"opcache.revalidate_freq=5\"; \\\n  echo \"opcache.fast_shutdown=1\"; \\\n  echo \"opcache.enable_cli=1\"; \\\n  ) > /usr/local/etc/php/conf.d/opcache-recommended.ini\n\nRUN a2enmod rewrite expires && service apache2 restart\n\n# Install Drupal Console for Drupal 8\nRUN curl -f https://drupalconsole.com/installer -L -o drupal.phar && mv drupal.phar /usr/local/bin/drupal && chmod +x /usr/local/bin/drupal\n\n# Our apache volume\nVOLUME /var/www/html\n\n# create directory for ssh keys\nRUN mkdir /var/www/.ssh/\nRUN chown -R web:www-data /var/www/\nRUN chmod -R 600 /var/www/.ssh/\n\n# Set timezone to Europe/Paris\nRUN echo \"Europe/Paris\" > /etc/timezone && dpkg-reconfigure -f noninteractive tzdata\n\n# Expose 80 for apache, 9000 for xdebug\nEXPOSE 80 9000\n\n# Add web and root .bashrc config\n# When you \"docker exec -it\" into the container, you will be switched as web user and placed in /var/www/html\nRUN echo \"exec su - web\" > /root/.bashrc && \\\n    echo \". .profile\" > /var/www/.bashrc && \\\n    echo \"alias ll='ls -al'\" > /var/www/.profile && \\\n    echo \"cd /var/www/html\" >> /var/www/.profile\n\n# Install symfony autocomplete for web user\nRUN sudo -u web composer global require bamarni/symfony-console-autocomplete\nRUN echo \"export PATH=/usr/local/bin:/usr/bin:/bin:/usr/local/games:/usr/games:/var/www/.composer/vendor/bamarni/symfony-console-autocomplete/\" >> /var/www/.profile\nRUN echo 'eval \"$(symfony-autocomplete)\"' >> /var/www/.profile\n\n# Set and run a custom entrypoint\nCOPY core/docker-entrypoint.sh /\nRUN chmod 777 /docker-entrypoint.sh && chmod +x /docker-entrypoint.sh\nENTRYPOINT [\"/docker-entrypoint.sh\"]\n"
}