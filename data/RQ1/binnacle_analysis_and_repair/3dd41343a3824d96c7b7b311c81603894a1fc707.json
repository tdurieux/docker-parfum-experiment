{
  "startTime": 1674234302896,
  "endTime": 1674234303245,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 217,
        "lineEnd": 217,
        "columnStart": 59,
        "columnEnd": 93
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 219,
        "lineEnd": 219,
        "columnStart": 72,
        "columnEnd": 111
      }
    },
    {
      "rule": "yumInstallRmVarCacheYum",
      "position": {
        "lineStart": 213,
        "lineEnd": 213,
        "columnStart": 5,
        "columnEnd": 126
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM fedora:29\n\nLABEL maintainer=\"kaz@praqma.net heh@praqma.net\"\n\n# Why Fedora as base OS?\n# * Fedora always has latest packages compared to CentOS.\n# * Fedora does not need extra CentOS's EPEL repositories to install tools.\n# * Fedora runs as 'root', and has '/' as it's default WORKDIR.\n\n# This Dockerfile builds a container image for Atlassian Jira,\n# using atlassian-jira-*.bin installer. The advantage of using the bin-installer is\n#   that it includes OracleJDK. We do not have to depend on Oracle Java\n#   or manage it in our image.\n#\n# Since this container image contains OracleJDK, we can not (re)distribute it\n#   as binary image, because of licensing issues. Though mentioning it in\n#   Dockerfile is ok.\n#\n\n# Note: Check build-instructions.md for building this image.\n\n################################### START -  Environment variables #######################################\n#\n#\n\n# JIRA_VERSION:\n# ------------\n# The value for JIRA_VERSION should be a version number, which is part of the name of the jira software bin/tarball/zip.\nENV JIRA_VERSION=8.2.1\n\n\n# JIRA_DOWNLOAD_URL:\n# -----------------\n# User does not need to modify this ENV variable unless absolutely necessary.\nENV JIRA_DOWNLOAD_URL https://www.atlassian.com/software/jira/downloads/binary/atlassian-jira-software-${JIRA_VERSION}-x64.bin\n\n\n# ADOPT_JRE_VERSION:\n# -----------------\n# The ADOPT_JRE's \"version\" is the string between \"hotspot_\" and \".tar.gz\" in the URL.\n# This must be correct as it is used to download the correct file from AdoptOpenJDK (github) website.\nENV ADOPT_JRE_VERSION=8u212b03\n\n\n# ADOPT_JRE_DOWNLOAD_URL:\n# ----------------------\n# Becasue of the silly naming scheme, it is very difficult to find a proper pattern for a file to download.\n# That's why we have to use a full URL\n# User does not need to modify this ENV variable unless absolutely necessary.\nENV ADOPT_JRE_DOWNLOAD_URL=https://github.com/AdoptOpenJDK/openjdk8-binaries/releases/download/jdk8u212-b03/OpenJDK8U-jre_x64_linux_hotspot_${ADOPT_JRE_VERSION}.tar.gz\n\n\n# OS_USERNAME:\n# -----------\n#  Jira bin-installer automatically creates a 'jira' user and a 'jira' group.\n#  You need to specify it's name here.\nENV OS_USERNAME jira\n\n\n# OS_GROUPNAME:\n# ------------\n#  Jira bin-installer automatically creates a 'jira' user and a 'jira' group.\n#  You need to specify it's name here.\nENV OS_GROUPNAME jira\n\n\n# JIRA_HOME:\n# ---------\n# Persistent directory: (need persistent storage.) This can be mounted on a OS directory mount-point.\n# Need to be owned by the same UID as of user jira, normally UID 1000.\n# The value if this variable should be same as 'app.jiraHome' in the jira-response.varfile file.\n# It is mandatory to specify JIRA_HOME.\nENV JIRA_HOME /var/atlassian/application-data/jira\n\n# JIRA_INSTALL:\n# ------------\n# Jira Installation files: (persistent storage NOT needed)\n# This ENV var is important to set here, as it is used by docker-entry.sh script at container startup.\n# The value if this variable should be same as 'sys.installationDir' in the jira-response.varfile file.\n# It is mandatory to specify JIRA_INSTALL.\nENV JIRA_INSTALL=/opt/atlassian/jira\n\n# TZ_FILE:\n# -------\n# This is the timezone file to use for the container.\n# Timezone files are normally found in /usr/share/zoneinfo/* .\n# Set the path of the correct zone you want to use for your container.\nENV TZ_FILE=\"/usr/share/zoneinfo/Europe/Oslo\"\n\n# JAVA_HOME:\n# ---------\n# While configuring JAVA_HOME, ensure that it is the path to the directory where you find the `bin/java` executable under it.\n# It is mandatory to specify JAVA_HOME.\nENV JAVA_HOME /opt/atlassian/jira/jre\n\n# JAVA_OPTS:\n# ---------\n# Optional values you want to pass as JAVA_OPTS. You can pass Java memory parameters to this variable,\n#    but in newer versions of Atlassian software, memory settings are done in CATALINA_OPTS.\n# JAVA_OPTS  \"-Dsome.javaSetting=somevalue\"\n# ENV JAVA_OPTS \"-Dhttp.nonProxyHosts=jira.example.com\"\n\n# CATALINA settings:\n# -----------------\n# CATLINA_OPTS will be used by JIRA_INSTALL/bin/setenv.sh script .\n# You can use this to setup internationalization options and also any Java memory settings.\n# It is a good idea to use same value for -Xms and -Xmx to avoid frequence shrinking and expanding of Java memory.\n# In the example below it is set to 2 GB. It should always be half (or less) of physical RAM of the server/node/pod/container.\nENV CATALINA_OPTS \"-Dfile.encoding=UTF-8 -Xms1024m -Xmx1024m\"\n\n\n# ENABLE_CERT_IMPORT:\n# ------------------\n# Allow import of user defined certificates.\nENV ENABLE_CERT_IMPORT false\n\n# SSL_CERTS_PATH:\n# --------------\n# If you have self signed certificates, you need to force Atlassian applications to trust those certs.\n# Very useful when different atlassian applications need to talk to each other.\n# This should be a path which you either volume-mount in docker or k8s.\nENV SSL_CERTS_PATH /var/atlassian/ssl\n\n\n# PLUGINS_FILE (Jira plugins):\n# ---------------------------\n# Any additional jira plugins you need to install should be listed in file named `jira-plugins.list` - one at each line.\n# Then mount that file at container-runtime at the location you specified in PLUGINS_FILE environment variable.\n# This also means that you can control the location and name of this file just by controlling this variable.\n# The value of this variable is the path **inside** the container.\nENV PLUGINS_FILE /tmp/jira-plugins.list\n\n# DATACENTER_MODE:\n# ----------------\n# This needs to be set to true if you want to setup Jira in a data-center mode.\nENV DATACENTER_MODE=false\n\n# JIRA_DATACENTER_SHARE:\n# ---------------------\n# This is only used in DataCenter mode. It needs to be a shared location, which multiple jira instances can write to.\n# This location will most probably be an NFS share, and should exist on the file system.\n# If it does not exist, then it will be created and chown to the jira OS user.\n# NB: FOr this to work, DATACENTER_MODE should be set to true.\n# ENV JIRA_DATACENTER_SHARE /var/atlassian/jira-datacenter\nENV JIRA_DATACENTER_SHARE=\"/mnt/shared\"\n\n\n# Reverse proxy specific variables:\n# ================================\n\n# X_PROXY_NAME:\n# ------------\n# The FQDN used by anyone accessing jira from outside (i.e. The FQDN of the proxy server/ingress controller):\n# ENV X_PROXY_NAME 'jira.example.com'\n\n# X_PROXY_PORT:\n# ------------\n# The public facing port, not the jira container port\n# ENV X_PROXY_PORT '443'\n\n# X_PROXY_SCHEME:\n# --------------\n# The scheme used by the public facing proxy (normally https)\n# ENV X_PROXY_SCHEME 'https'\n\n# X_CONTEXT_PATH:\n# --------------\n# (formerly X_PATH)\n# IMPORTANT: BREAKING CHANGE: This was formerly X_PATH. Please adjust your scripts/YAML/TOML files accordingly.\n# The context path, if any. Best to leave disabled, or set to blank.\n# ENV X_CONTEXT_PATH ''\n\n#\n#\n####################################### END - Environment variables #######################################\n\n########################################### START - Build image #####################################\n#\n#\n\n# Internaltionalization / i18n - Notes on OS settings (Fedora):\n# ------------------------------------------------------------\n# Note the file '/etc/sysconfig/i18n' does not exist by default\n# RUN echo -e \"LANG=\\\"en_US.UTF-8\\\" \\n LC_ALL=\\\"en_US.UTF-8\\\"\" > /etc/sysconfig/i18n\n# RUN echo -e \"LANG=\\\"en_US.UTF-8\\\" \\n LC_ALL=\\\"en_US.UTF-8\\\"\" > /etc/locale.conf\n\n# Internaltionalization / i18n - Notes on OS settings (Debian):\n# ------------------------------------------------------------\n# RUN echo -e \"LANG=\\\"en_US.UTF-8\\\" \\n LC_ALL=\\\"en_US.UTF-8\\\"\" > /etc/default/locale\n\n# Unattended installation:\n# -----------------------\n# https://confluence.atlassian.com/jira064/installing-jira-on-linux-720411834.html\n# Jira response file is used for unattended installation using bin-installer.\nCOPY jira-response.varfile /tmp/\n\n# We need the following in the container image:\n# * xmlstarlet to modify XML files.\n# * findutils provide 'find' ,which is helpful in finding files, especially during development and trouble-shooting.\n# * gunzip, hostname , ps are  needed by installer.\n# * 'which' is used by the installer to find the location of gunzip\n# * iputils provides ping, iproute provide ip, ss\n# * jq\n# * Added the ln command to set the correct timezone to Oslo\n# * bind-utils provides dig, used in a crucial script in this image.\n# Change ownership of /etc/localtime to OS_USERNAME, so we can sym-link to it in docker-entrypoint.sh\n# The installer creats a user jira.\n# After the installer is finished running, we fix some permissions, such as JIRA_INSTALL and JIRA_HOME.\n# The silly syncs are for Dockerhub to process this properly.\n# The fonts are added because Atlassian products rely on these, and openjdk does not provide these fonts.\n\nRUN echo -e \"LANG=\\\"en_US.UTF-8\\\" \\n LC_ALL=\\\"en_US.UTF-8\\\"\" >/etc/sysconfig/i18n \\\n  && echo -e \"LANG=\\\"en_US.UTF-8\\\" \\n LC_ALL=\\\"en_US.UTF-8\\\"\" >/etc/locale.conf \\\n  && yum -y install xmlstarlet findutils which gzip hostname procps iputils bind-utils iproute jq fontconfig dejavu-sans-fonts \\\n  && sync \\\n  && yum -y clean all \\\n  && ln -sf ${TZ_FILE} /etc/localtime \\\n  && echo \"Downloading Jira from: ${JIRA_DOWNLOAD_URL}\" && curl -f -# -L -O ${JIRA_DOWNLOAD_URL} && echo \\\n  && sync \\\n  && echo \"Downloading AdoptOpenJRE from: ${ADOPT_JRE_DOWNLOAD_URL}\" && curl -f -# -L -O ${ADOPT_JRE_DOWNLOAD_URL} \\\n  && sync \\\n  && chmod +x ./atlassian-jira-software-${JIRA_VERSION}-x64.bin \\\n  && sync \\\n  && ./atlassian-jira-software-${JIRA_VERSION}-x64.bin -q -varfile /tmp/jira-response.varfile \\\n  && sync \\\n  && JRE_TARBALL=$(basename ${ADOPT_JRE_DOWNLOAD_URL}) \\\n  && TEMP_DIR=$(mktemp -d) \\\n  && tar xzf ${JRE_TARBALL} -C ${TEMP_DIR}/ \\\n  && JRE_DIR=$(find  ${TEMP_DIR}  -maxdepth 1 -name \"*-jre\" -type d) \\\n  && rm -fr ${JAVA_HOME}/* \\\n  && cp -r ${JRE_DIR}/* ${JAVA_HOME}/ \\\n  && sync \\\n  && echo \"Jira version: ${JIRA_VERSION}\" > ${JIRA_INSTALL}/atlassian-version.txt \\\n  && ${JIRA_INSTALL}/jre/bin/java \\\n       -classpath ${JIRA_INSTALL}/lib/catalina.jar \\\n       org.apache.catalina.util.ServerInfo  >> ${JIRA_INSTALL}/atlassian-version.txt \\\n  && sync \\\n  && rm -f ./atlassian-jira-software-${JIRA_VERSION}-x64.bin \\\n  && rm -f $JRE_TARBALL \\\n  && if [ -n \"${JIRA_DATACENTER_SHARE}\" ] && [ ! -d \"${JIRA_DATACENTER_SHARE}\" ]; then mkdir -p ${JIRA_DATACENTER_SHARE}; fi \\\n  && if [ -n \"${JIRA_DATACENTER_SHARE}\" ] && [ -d \"${JIRA_DATACENTER_SHARE}\" ]; then chown -R ${OS_USERNAME}:${OS_GROUPNAME} ${JIRA_DATACENTER_SHARE}; fi \\\n  && chown -R ${OS_USERNAME}:${OS_GROUPNAME} ${JIRA_INSTALL} ${JIRA_HOME} \\\n  && HOME_DIR=$(grep ${OS_USERNAME} /etc/passwd | cut -d ':' -f 6) \\\n  && cp /etc/localtime ${HOME_DIR}/ \\\n  && chown ${OS_USERNAME}:${OS_GROUPNAME} ${HOME_DIR}/localtime \\\n  && ln -sf ${HOME_DIR}/localtime /etc/localtime \\\n  && sync \\\n  && if [ -n \"${SSL_CERTS_PATH}\" ] && [ ! -d \"${SSL_CERTS_PATH}\" ]; then mkdir -p ${SSL_CERTS_PATH}; fi \\\n  && if [ -n \"${SSL_CERTS_PATH}\" ] && [ -d \"${SSL_CERTS_PATH}\" ]; then chown ${OS_USERNAME}:${OS_GROUPNAME} ${SSL_CERTS_PATH}; fi \\\n  && sync && rm -rf /var/cache/yum\n\n\n# Docker entrypoint script:\n# -------------------------\n# Copy docker-entrypoint.sh to configure server.xml configuration file in order to run the service behind a reverse proxy.\nCOPY docker-entrypoint.sh /\n\n#\n#\n########################################### END - Build image ###########################################\n\n# Expose default HTTP connector port for Jira.\nEXPOSE 8080/tcp\n\n\n# Peer discovery ports for Jira running in cluster mode.\nEXPOSE 40001/tcp\nEXPOSE 40011/tcp\n\n# Change the default working directory from '/' to '/var/atlassian/application-data/jira'\n#   - or - whatever value you used above as JIRA_HOME.\nWORKDIR ${JIRA_HOME}\n\n# Set the default user for the image/container to user 'jira'. Jira software will be run as this user & group.\n# USER jira:jira\nUSER ${OS_USERNAME}:${OS_GROUPNAME}\n\n# Persistent volumes:\n# Set volume mount points for home directory, because changes to the home directory needs to be persisted.\n# Optionally, changes to parts of the installation directory also need persistence, eg. logs.\nVOLUME [\"${JIRA_HOME}\", \"${JIRA_INSTALL}/logs\"]\n\n# We have a custom entrypoint, which sets up server.xml with reverse proxy settings, IF provided, and some other stuff.\n#  When ENTRYPOINT is present in a dockerfile, it is always run before executing CMD.\nENTRYPOINT [\"/docker-entrypoint.sh\"]\n\n# Run Atlassian JIRA as a foreground process by default, using our modified startup script.\n# The CMD command does not take environment variable, so it has to be an absolute path.\nCMD [\"/opt/atlassian/jira/bin/start-jira.sh\", \"-fg\"]\n\n# End of Dockerfile. Below are just some notes.\n#\n#\n########################################### END - Build the image ###############################################\n\n# Build this image manually:\n# =========================\n# docker build -t test/jira-server:7.8.0-test .\n# docker push test/jira-server:7.8.0-test\n\n# Check build-instructions.md for instructions for automated builds.\n\n"
}