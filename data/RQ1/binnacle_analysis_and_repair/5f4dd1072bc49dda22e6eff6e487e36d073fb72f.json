{
  "startTime": 1674248263730,
  "endTime": 1674248263849,
  "originalSmells": [
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 67,
        "lineEnd": 67,
        "columnStart": 4,
        "columnEnd": 26
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM python:3.6\nMAINTAINER Hunter Owens <hunter.owens@lacity.org>\n\nENV PYTHONUNBUFFERED=1 \\\n    AWS_REGION=us-west-2 \\\n    # AWS_ACCESS_KEY_ID= \\\n    # AWS_SECRET_ACCESS_KEY= \\\n    SPARK_BUCKET=telemetry-spark-emr-2 \\\n    AIRFLOW_BUCKET=telemetry-test-bucket \\\n    PRIVATE_OUTPUT_BUCKET=telemetry-test-bucket \\\n    PUBLIC_OUTPUT_BUCKET=telemetry-test-bucket \\\n    EMR_KEY_NAME=20161025-dataops-dev \\\n    EMR_FLOW_ROLE=telemetry-spark-cloudformation-TelemetrySparkInstanceProfile-1SATUBVEXG7E3 \\\n    EMR_SERVICE_ROLE=EMR_DefaultRole \\\n    EMR_INSTANCE_TYPE=c3.4xlarge \\\n    PORT=8000 \\\n    DEPLOY_ENVIRONMENT=dev \\\n    DEVELOPMENT=1 \\\n    DEPLOY_TAG=master \\\n    ARTIFACTS_BUCKET=net-mozaws-data-us-west-2-ops-ci-artifacts\n\n# Airflow configuration can be set here using the following format:\n# $AIRFLOW__{SECTION}__{KEY}\n# See also: https://airflow.apache.org/configuration.html\n\nENV AIRFLOW_HOME=/app \\\n    AIRFLOW_AUTHENTICATE=False \\\n    AIRFLOW_AUTH_BACKEND=airflow.contrib.auth.backends.password_auth \\\n    AIRFLOW_BROKER_URL=redis://redis:6379/0 \\\n    AIRFLOW_RESULT_URL=redis://redis:6379/0 \\\n    AIRFLOW_FLOWER_PORT=\"5555\" \\\n    AIRFLOW_DATABASE_URL=postgres://postgres@db/postgres \\\n    AIRFLOW_FERNET_KEY=\"0000000000000000000000000000000000000000000=\" \\\n    AIRFLOW_SECRET_KEY=\"0000000000000000000000000000000000000000000=\" \\\n    # AIRFLOW_SMTP_HOST= \\\n    # AIRFLOW_SMTP_USER= \\\n    # AIRFLOW_SMTP_PASSWORD= \\\n    AIRFLOW_SMTP_FROM=telemetry-alerts@airflow.dev.mozaws.net \\\n    AIRFLOW__SCHEDULER__CATCHUP_BY_DEFAULT=False \\\n    SLUGIFY_USES_TEXT_UNIDECODE=yes \\\n    URL=http://localhost\n\nEXPOSE $PORT\n\n# add a non-privileged user for installing and running the application\nRUN mkdir /app && \\\n    chown 10001:10001 /app && \\\n    groupadd --gid 10001 app && \\\n    useradd --no-create-home --uid 10001 --gid 10001 --home-dir /app app\n\n# python-slim base image has missing directories required for psql install\nRUN mkdir -p /usr/share/man/man1\nRUN mkdir -p /usr/share/man/man7\n\nRUN apt-get update && \\\n    apt-get install -y --no-install-recommends \\\n        apt-transport-https build-essential curl git libpq-dev \\\n        postgresql-client gettext sqlite3 libffi-dev libsasl2-dev && \\\n    apt-get autoremove -y && \\\n    apt-get clean && \\\n    rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*\n\n# Install Python dependencies\nCOPY requirements.txt /tmp/\n# Switch to /tmp to install dependencies outside home dir\nWORKDIR /tmp\n# See Bug 1455683\nRUN pip install --no-cache-dir pip==9.0.3\nRUN pip install --no-cache-dir -r requirements.txt\n\n\n# Switch back to home directory\nWORKDIR /app\n\nCOPY . /app\n\nRUN chown -R 10001:10001 /app\n\nUSER 10001\n\n# Using /bin/bash as the entrypoint works around some volume mount issues on Windows\n# where volume-mounted files do not have execute bits set.\n# https://github.com/docker/compose/issues/2301#issuecomment-154450785 has additional background.\nENTRYPOINT [\"/bin/bash\", \"/app/bin/run\"]\n\nCMD [\"web\"]\n"
}