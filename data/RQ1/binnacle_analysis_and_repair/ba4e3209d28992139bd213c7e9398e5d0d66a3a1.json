{
  "startTime": 1674249446903,
  "endTime": 1674249446937,
  "originalSmells": [
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 20,
        "lineEnd": 20,
        "columnStart": 4,
        "columnEnd": 48
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM golang:1.10-alpine AS lsp-adapter\nWORKDIR /go/src/github.com/sourcegraph/lsp-adapter\nCOPY . .\nRUN CGO_ENABLED=0 GOBIN=/usr/local/bin go install github.com/sourcegraph/lsp-adapter\n\n# ðŸ‘€ Add steps here to build the language server itself ðŸ‘€\n# CMD [\"echo\", \"ðŸš¨ This statement should be removed once you have added the logic to start up the language server! ðŸš¨ Exiting...\"]\n\nFROM node:9\n\n# Use tini as entrypoint to correctly handle signals and zombie processes.\nENV TINI_VERSION v0.18.0\nADD https://github.com/krallin/tini/releases/download/${TINI_VERSION}/tini /tini\nRUN chmod +x /tini\nENTRYPOINT [\"/tini\", \"--\"]\n\nUSER node\n# see https://github.com/nodejs/docker-node/blob/master/docs/BestPractices.md#global-npm-dependencies\nENV NPM_CONFIG_PREFIX=/home/node/.npm-global\nENV PATH=$PATH:/home/node/.npm-global/bin\nRUN npm i -g vscode-css-languageserver-bin@1.3.0 && npm cache clean --force;\n\nCOPY --from=lsp-adapter /usr/local/bin/lsp-adapter /usr/local/bin\nEXPOSE 8080\n# Modify this command to connect to the language server\nCMD [\"lsp-adapter\", \"--trace\", \"--didOpenLanguage='css'\", \"--glob=*.css:*.scss:*.less\", \"--proxyAddress=0.0.0.0:8080\", \"css-languageserver\", \"--stdio\"]\n"
}