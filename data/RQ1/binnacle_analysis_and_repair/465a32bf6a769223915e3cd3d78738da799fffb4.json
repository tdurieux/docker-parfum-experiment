{
  "startTime": 1674245942891,
  "endTime": 1674245944249,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 22,
        "lineEnd": 22,
        "columnStart": 4,
        "columnEnd": 57
      }
    },
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 165,
        "lineEnd": 165,
        "columnStart": 4,
        "columnEnd": 31
      }
    },
    {
      "rule": "wgetUseHttpsUrl",
      "position": {
        "lineStart": 114,
        "lineEnd": 114,
        "columnStart": 4,
        "columnEnd": 111
      }
    },
    {
      "rule": "wgetUseHttpsUrl",
      "position": {
        "lineStart": 115,
        "lineEnd": 115,
        "columnStart": 4,
        "columnEnd": 102
      }
    },
    {
      "rule": "wgetUseHttpsUrl",
      "position": {
        "lineStart": 116,
        "lineEnd": 116,
        "columnStart": 4,
        "columnEnd": 102
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 173,
        "lineEnd": 173,
        "columnStart": 4,
        "columnEnd": 28
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 176,
        "lineEnd": 176,
        "columnStart": 4,
        "columnEnd": 29
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 177,
        "lineEnd": 177,
        "columnStart": 4,
        "columnEnd": 38
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 6,
        "lineEnd": 10,
        "columnStart": 4,
        "columnEnd": 32
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 31,
        "lineEnd": 106,
        "columnStart": 4,
        "columnEnd": 14
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM nvidia/cuda:8.0-cudnn5-devel-ubuntu14.04\n\nLABEL maintainer mvines@silklabs.com\n\nRUN addgroup --gid 999 docker && \\\n    apt-get update -qq && \\\n    apt-get install --no-install-recommends -y \\\n      apt-transport-https \\\n      curl \\\n      python-software-properties \\\n      software-properties-common && \\\n    add-apt-repository -y ppa:amarburg/opencv3 && \\\n    add-apt-repository -y ppa:deadsnakes/ppa && \\\n    add-apt-repository -y ppa:george-edison55/cmake-3.x && \\\n    add-apt-repository -y ppa:git-core/ppa && \\\n    add-apt-repository -y ppa:kubuntu-ppa/backports && \\\n    add-apt-repository -y ppa:mc3man/trusty-media && \\\n    add-apt-repository -y ppa:phablet-team/tools && \\\n    add-apt-repository -y ppa:ubuntu-toolchain-r/ppa && \\\n    add-apt-repository -y ppa:ubuntu-toolchain-r/test && \\\n    add-apt-repository \"deb https://cli-assets.heroku.com/branches/stable/apt ./\" && \\\n    add-apt-repository \"deb [arch=amd64] https://download.docker.com/linux/ubuntu trusty stable\" && \\\n    curl -f -L https://cli-assets.heroku.com/apt/release.key | apt-key add - && \\\n    curl -fsSL https://download.docker.com/linux/ubuntu/gpg | apt-key add - && \\\n    apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv EA312927 && \\\n    echo \"deb http://repo.mongodb.org/apt/ubuntu trusty/mongodb-org/3.2 multiverse\" > /etc/apt/sources.list.d/mongodb-org-3.2.list && \\\n    apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys 32A37959C2FA5C3C99EFBC32A79206696452D198 && \\\n    echo \"deb https://apt.buildkite.com/buildkite-agent stable main\" > /etc/apt/sources.list.d/buildkite-agent.list && \\\n    echo \"deb [arch=amd64] https://packages.microsoft.com/repos/azure-cli/ wheezy main\" > /etc/apt/sources.list.d/azure-cli.list && \\\n    apt-key adv --keyserver packages.microsoft.com --recv-keys 417A0893 && \\\n    apt-get update -qq && \\\n    DEBIAN_FRONTEND=noninteractive \\\n      apt-get --no-install-recommends install -y \\\n        apt-file \\\n        autoconf \\\n        azure-cli \\\n        bc \\\n        build-essential \\\n        buildkite-agent \\\n        bsdmainutils \\\n        cabal-install \\\n        ccache \\\n        chrpath \\\n        cmake \\\n        diffstat \\\n        docker-ce \\\n        dos2unix \\\n        fonts-freefont-ttf \\\n        g++ \\\n        g++-4.8 \\\n        g++-4.8-multilib \\\n        g++-5 \\\n        gawk \\\n        gettext \\\n        gfortran \\\n        git \\\n        gnuplot \\\n        heroku \\\n        jq \\\n        lib32stdc++6 \\\n        lib32z1 \\\n        libatlas-base-dev \\\n        libboost-all-dev \\\n        libc6-dev \\\n        libc6-dev-i386 \\\n        libfreetype6-dev \\\n        libgflags-dev \\\n        libgoogle-glog-dev \\\n        libhdf5-serial-dev \\\n        libleveldb-dev \\\n        liblmdb-dev \\\n        libpng12-dev \\\n        libprotobuf-dev \\\n        libsnappy-dev \\\n        libtool \\\n        libusb-1.0-0-dev \\\n        libxml2-utils \\\n        linux-libc-dev \\\n        m4 \\\n        mkisofs \\\n        mongodb-org \\\n        mongodb-org-mongos \\\n        mongodb-org-server \\\n        mongodb-org-shell \\\n        mongodb-org-tools \\\n        openjdk-7-jre \\\n        openjdk-7-jdk \\\n        openssh-server \\\n        pkg-config \\\n        protobuf-compiler \\\n        psmisc \\\n        python-dev \\\n        python-pip \\\n        python-virtualenv \\\n        python3.5 \\\n        rsync \\\n        silversearcher-ag \\\n        texinfo \\\n        unzip \\\n        vim \\\n        x11-utils \\\n        xbase-clients \\\n        vnc4server \\\n        wget \\\n        xmlstarlet \\\n        zip \\\n        ffmpeg && \\\n    wget https://download.docker.com/linux/ubuntu/dists/trusty/pool/edge/amd64/docker-ce_17.05.0~ce-0~ubuntu-trusty_amd64.deb && \\\n    sudo dpkg -i docker-ce_17.05.0~ce-0~ubuntu-trusty_amd64.deb && \\\n    rm -f docker-ce_17.05.0~ce-0~ubuntu-trusty_amd64.deb && \\\n    rm -rf /var/lib/apt/lists/*\n\n\n# JDK 1.8\nRUN wget https://archive.ubuntu.com/ubuntu/pool/universe/o/openjdk-8/openjdk-8-jre-headless_8u45-b14-1_amd64.deb && \\\n    wget https://archive.ubuntu.com/ubuntu/pool/universe/o/openjdk-8/openjdk-8-jre_8u45-b14-1_amd64.deb && \\\n    wget https://archive.ubuntu.com/ubuntu/pool/universe/o/openjdk-8/openjdk-8-jdk_8u45-b14-1_amd64.deb && \\\n    sudo apt-get update -qq && \\\n    sudo dpkg -i *.deb && \\\n    rm *.deb\n\n# Build/install Shellcheck (bash linter)\nRUN cabal update && \\\n    git clone https://github.com/koalaman/shellcheck.git && \\\n    git -C shellcheck checkout 6c068e7d29a835139517fa7345d9d450ef57b170 && \\\n    cd shellcheck && \\\n    cabal install && \\\n    sudo cp ~/.cabal/bin/shellcheck /usr/bin && \\\n    cd .. && \\\n    rm -rf shellcheck\n\n# Build/install opencv3\nRUN wget https://github.com/Itseez/opencv_contrib/archive/3.0.0.zip -O opencv_contrib3.zip && \\\n    unzip -q opencv_contrib3.zip && \\\n    mv opencv_contrib-3.0.0 opencv_contrib && \\\n    git clone --branch '3.1.0' https://github.com/opencv/opencv.git && \\\n    cd opencv && \\\n    mkdir build && \\\n    cd build && \\\n    cmake -Wno-dev \\\n      -DCMAKE_BUILD_TYPE=RelWithDebInfo \\\n      -DBUILD_TESTS=false \\\n      -DWITH_TIFF=false \\\n      -DWITH_CUDA=false \\\n      -DBUILD_ANDROID_EXAMPLES=false \\\n      -DWITH_OPENEXR=false \\\n      -DBUILD_PERF_TESTS=false \\\n      -DBUILD_opencv_java=false \\\n      -DWITH_IPP=OFF \\\n      -DCMAKE_INSTALL_PREFIX=/usr/ \\\n      -D OPENCV_EXTRA_MODULES_PATH=../../opencv_contrib/modules \\\n      -DBUILD_opencv_optflow=OFF \\\n      -DBUILD_opencv_ximgproc=OFF \\\n      -DBUILD_opencv_xfeatures2d=OFF \\\n      .. && \\\n    make -j$(nproc) install && \\\n    cd ../.. && \\\n    rm -rf opencv\n\n# Install node v6.10.3\nRUN wget -q https://nodejs.org/dist/v6.10.3/node-v6.10.3-linux-x64.tar.gz && \\\n    tar -x -C /usr/local --strip-components 1 -f node-v6.10.3-linux-x64.tar.gz && \\\n    rm node-v6.10.3-linux-x64.tar.gz\n\n# Useful npm packages\nRUN npm install -g mvines/relay && npm cache clean --force;\n\n# Install ninja\nRUN wget -q https://github.com/ninja-build/ninja/releases/download/v1.7.2/ninja-linux.zip && \\\n    unzip ninja-linux.zip && \\\n    rm ninja-linux.zip  && \\\n    mv ninja /usr/bin && \\\n    chmod +x /usr/bin/ninja && \\\n    pip install --no-cache-dir ninja-syntax\n\n# Install python packages\nRUN pip install --no-cache-dir --upgrade pip && \\\n    pip install --no-cache-dir matplotlib numpy scipy\n\n# Platform tools\nRUN wget -q https://dl-ssl.google.com/android/repository/platform-tools_r23-linux.zip && \\\n    unzip platform-tools_r23-linux.zip \\\n          platform-tools/adb platform-tools/fastboot && \\\n    cp platform-tools/* /usr/bin/ && \\\n    rm -rf platform-tools*\n\nENV JAVA_HOME /usr\nRUN echo 'PATH=$PATH:HOME/bin:$JAVA_HOME/bin' >> /etc/profile && \\\n    echo 'export JAVA_HOME' >> /etc/profile && \\\n    echo 'export PATH' >> /etc/profile && \\\n    update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-5 20 && \\\n    update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-4.8 10 && \\\n    update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-5 20 && \\\n    update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-4.8 10 && \\\n    addgroup silk --gid 1000 && \\\n    addgroup adbuser --gid 1002 && \\\n    adduser --uid 1000 --ingroup silk --gecos \"\" --disabled-password silk && \\\n    adduser silk audio && \\\n    adduser silk adbuser && \\\n    echo 'silk ALL=(ALL) NOPASSWD: ALL' > /etc/sudoers.d/silk && \\\n    echo 'SUBSYSTEM==\"usb\", ATTR{idVendor}==\"18d1\", MODE=\"0666\", GROUP=\"adbuser\"' >> /etc/udev/rules.d/51-android.rules && \\\n    echo 'SUBSYSTEM==\"usb\", ATTR{idVendor}==\"1004\", MODE=\"0666\", GROUP=\"adbuser\"' >> /etc/udev/rules.d/51-android.rules && \\\n    sed 's#session\\s*required\\s*pam_loginuid.so#session optional pam_loginuid.so#g' -i /etc/pam.d/sshd && \\\n    udevadm trigger && \\\n    rm -rf /etc/ssh/ssh_host_dsa_key /etc/ssh/ssh_host_rsa_key && \\\n    ssh-keygen -q -N \"\" -t dsa -f /etc/ssh/ssh_host_dsa_key && \\\n    ssh-keygen -q -N \"\" -t rsa -f /etc/ssh/ssh_host_rsa_key\n\nRUN mkdir -p /opt/conda && \\\n    chown silk:users /opt/conda && \\\n    chmod g+w /opt/conda\n\nUSER silk\n\n# Install minicoda and Python 3.6\nRUN cd ~ && \\\n    wget --quiet https://repo.continuum.io/miniconda/Miniconda3-4.3.21-Linux-x86_64.sh -O ~/miniconda.sh && \\\n    /bin/bash ~/miniconda.sh -b -f -p /opt/conda && \\\n    rm ~/miniconda.sh\n\n# Install TensorFlow GPU version in its own env\nRUN cd ~ && \\\n    /opt/conda/bin/conda create -v --name tensorflow_gpu python=3.6 && \\\n    /bin/bash -c \" \\\n      source /opt/conda/bin/activate tensorflow_gpu; \\\n      # Dependencies required for tensorflow\n      pip install pylint==1.7.1; \\\n      pip install pytz; \\\n      pip install https://storage.googleapis.com/tensorflow/linux/gpu/tensorflow_gpu-1.2.0-cp36-cp36m-linux_x86_64.whl; \\\n      source deactivate tensorflow_gpu\\\n    \"\n\n# Install TensorFlow CPU version in its own env\nRUN cd ~ && \\\n    /opt/conda/bin/conda create -v --name tensorflow_cpu python=3.6 && \\\n    /bin/bash -c \" \\\n      source /opt/conda/bin/activate tensorflow_cpu; \\\n      # Dependencies required for tensorflow\n      pip install pylint==1.7.1; \\\n      pip install pytz; \\\n      pip install https://storage.googleapis.com/tensorflow/linux/cpu/tensorflow-1.2.0-cp36-cp36m-linux_x86_64.whl; \\\n      source deactivate tensorflow_cpu\\\n    \"\n\nRUN sudo chown -R silk:users /opt/conda && \\\n  sudo chmod -R g+w /opt/conda\n\nRUN ccache -M 10GB && \\\n    git config --global user.email \"silkysmooth@example.com\" && \\\n    git config --global user.name \"Silky Smooth\" && \\\n    git config --global color.ui true && \\\n    ssh-keygen -q -N \"\" -t rsa -f /home/silk/.ssh/id_rsa && \\\n    ssh-keyscan -H localhost >> ~/.ssh/known_hosts && \\\n    ssh-keyscan -H github.com >> ~/.ssh/known_hosts && \\\n    cp /home/silk/.ssh/id_rsa.pub /home/silk/.ssh/authorized_keys\n"
}