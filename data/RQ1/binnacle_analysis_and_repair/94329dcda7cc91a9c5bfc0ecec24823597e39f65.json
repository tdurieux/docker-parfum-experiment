{
  "startTime": 1674245345643,
  "endTime": 1674245345856,
  "originalSmells": [
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 36,
        "lineEnd": 36,
        "columnStart": 4,
        "columnEnd": 24
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 29,
        "lineEnd": 33,
        "columnStart": 4,
        "columnEnd": 45
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 29,
        "lineEnd": 33,
        "columnStart": 4,
        "columnEnd": 45
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 29,
        "lineEnd": 33,
        "columnStart": 4,
        "columnEnd": 45
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# Docker is a fast & lightweight container-based virtualization framework.\n#\n# General info:\n#   http://docker.io/\n#\n# Dockerfile reference:\n#   http://docs.docker.io/reference/builder/\n#\n# Quickstart:\n#\n#   # Build the image\n#   docker build -t my_changes .\n#\n#   # Create a new container called \"changes\" using the image built above\n#   docker run -d --name=changes -p 127.0.0.1:5000:5000 my_changes\n\n# Ubuntu 14.04, with a proper init(8) for docker.\n# https://phusion.github.io/baseimage-docker\nFROM phusion/baseimage:0.9.10\n\n# Put your name here if you volunteer to maintain this. :)\n#MAINTAINER nobody\n\n# Before installing postgrsql, make sure the we're in a UTF-8 locale.\nRUN update-locale --reset LANG=en_US.UTF-8 LANGUAGE=en_US:en\n\n# System-wide dependencies\n#RUN echo 'Acquire::http::Proxy { \"http://172.17.42.1:3142\"; };' > /etc/apt/apt.conf.d/install-apt-proxy\nRUN apt-get -qy update && apt-get -qy --no-install-recommends install \\\n        python-all python-all-dev python-pip python-virtualenv python-tox \\\n        python3-all python3-all-dev python3-pip \\\n        libxml2-dev libev-dev libxslt1-dev nodejs npm postgresql libpq-dev \\\n        redis-server git mercurial supervisor && \\\n    apt-get -qy upgrade && \\\n    ln -s /usr/bin/nodejs /usr/local/bin/node && \\\n    npm install -g bower && npm cache clean --force; && rm -rf /var/lib/apt/lists/*;\n#RUN rm -f /etc/apt/apt.conf.d/install-apt-proxy\n\n# Wipe out any SSH host keys that may have been installed\nRUN rm -f /etc/ssh/ssh_host_*key*\n\n# Early configuration (custom configuration should happen after the image is built)\nENV CHANGES_CONF /etc/changes/config.py\nADD docs/examples/changes.conf.py /etc/changes/config.py\n\n# Clone the repo\nRUN git clone -q https://github.com/dropbox/changes /srv/changes\n\n## Clone the repo more quickly using a copy of the local repo\n## NOTE: There could be privacy implications of shipping this in a public\n## image, so we delete it after we're done.\n#ADD .git /tmp/changes.git\n#RUN git clone -q --reference /tmp/changes.git https://github.com/dropbox/changes /srv/changes\n#\n# Detach and remove the local repo copy\n#RUN cd /srv/changes && \\\n#    git repack -a && \\\n#    rm -f .git/objects/info/alternates && \\\n#    git gc --aggressive --prune=all && \\\n#    rm -rf /tmp/changes.git\n\n# Create user\nRUN adduser --gecos '' --disabled-password changes && \\\n    /etc/init.d/postgresql start && \\\n    su postgres -c \"createuser --createdb changes\" && \\\n    /etc/init.d/postgresql stop\n\n# Install application dependencies\nRUN chown -R changes:changes /srv/changes && \\\n    su changes -c '\\\n        cd /srv/changes && \\\n        virtualenv env && \\\n        . env/bin/activate && \\\n        make install-requirements install-test-requirements'\n\n# Check out a more recent copy of the sources\n# XXX - remove this once pushed; this really hurts performance\n#ADD .git /tmp/changes.git\n#RUN \\\n#    cd /srv/changes && \\\n#    git fetch /tmp/changes.git && \\\n#    git checkout -b dev-hack FETCH_HEAD && \\\n#    git repack -a && \\\n#    git gc --aggressive --prune=all && \\\n#    rm -rf /tmp/changes.git\n\n# XXX - another hack -- adopt our Makefile changes without the docker/docker.mk stuff\n# TODO remove this once pushed\n#ADD Makefile /srv/changes/Makefile\n#RUN mkdir /srv/changes/docker && touch /srv/changes/docker/docker.mk\n\n# Populate the database and generate static assets\n# TODO Replace 'createdb -E utf-8 changes' with 'make createdb' once the Makefile lands\nRUN /etc/init.d/postgresql start && \\\n    su changes -c 'cd /srv/changes && . env/bin/activate && createdb -E utf-8 changes && make upgrade' && \\\n    /etc/init.d/postgresql stop\n\n# Add a few more helper scripts & config files\nADD docker/supervisord.conf /etc/supervisor/conf.d/changes.conf\nADD docker/supervisor-run /etc/service/supervisor/run\n\n# Configure openssh server\n# - HostKey algorithms:\n#   - rsa -- 2048-bit & used for compatibility\n#   - ed25519 -- used for speed & resistance to timing attacks\n#   - no dsa -- 1024-bit & showing signs of age\n#   - no ecdsa -- curve might not be secure (NIST secp256r1) and not particularly fast\n# - Authentication: publickey only\n# - Don't delay login with reverse DNS lookups\n# - Get authorized_keys from the environment.\nRUN \\\n    sed -E -i~ -e '/^(PasswordAuthentication|ChallengeResponseAuthentication|PermitRootLogin|UseDNS|HostKey|AuthorizedKeysFile)\\b/s/^/#/' /etc/ssh/sshd_config && \\\n    echo >>/etc/ssh/sshd_config 'HostKey /etc/ssh/ssh_host_rsa_key' && \\\n    echo >>/etc/ssh/sshd_config 'HostKey /etc/ssh/ssh_host_ed25519_key' && \\\n    echo >>/etc/ssh/sshd_config 'PermitRootLogin without-password' && \\\n    echo >>/etc/ssh/sshd_config 'PasswordAuthentication no' && \\\n    echo >>/etc/ssh/sshd_config 'ChallengeResponseAuthentication no' && \\\n    echo >>/etc/ssh/sshd_config 'UseDNS no' && \\\n    echo >>/etc/ssh/sshd_config 'AuthorizedKeysFile /etc/ssh/authorized_keys/%u /etc/ssh/authorized_keys.env.d/%u .ssh/authorized_keys .ssh/authorized_keys2'\n\n# Configure stuff from the container environment\nADD docker/10_changes_conf_from_env.py /etc/my_init.d/10_changes_conf_from_env.py\n\n# Sanity check\nRUN \\\n    if ls -l /etc/ssh/ssh_host_*key* >/dev/null 2>&1 ; then \\\n        echo >&2 \"There should be no SSH host keys on this machine, found:\" ; \\\n        ls -l /etc/ssh/ssh_host_*key* >&2 ; \\\n        exit 1; \\\n    fi\n\n# Default environment\nENV WEB_BASE_URI http://localhost:5000\nENV INTERNAL_BASE_URI http://localhost:5000\nENV SERVER_NAME localhost:5000\n\n# Expose SSH & HTTP ports.  http://localhost:5000\nEXPOSE 22\nEXPOSE 5000\n\n# Export volumes\n#VOLUME /srv/changes\n#VOLUME /var/lib/postgresql\n#VOLUME /var/lib/redis\n\n# Default invocation\nCMD [\"/sbin/my_init\"]\n"
}