{
  "startTime": 1674244459966,
  "endTime": 1674244460180,
  "originalSmells": [
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 40,
        "lineEnd": 40,
        "columnStart": 5,
        "columnEnd": 36
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# docker build -t docker:simple -f Dockerfile.simple .\n# docker run --rm docker:simple hack/make.sh dynbinary\n# docker run --rm --privileged docker:simple hack/dind hack/make.sh test-unit\n# docker run --rm --privileged -v /var/lib/docker docker:simple hack/dind hack/make.sh dynbinary test-integration-cli\n\n# This represents the bare minimum required to build and test Docker.\n\nFROM debian:jessie\n\n# compile and runtime deps\n# https://github.com/docker/docker/blob/master/project/PACKAGERS.md#build-dependencies\n# https://github.com/docker/docker/blob/master/project/PACKAGERS.md#runtime-dependencies\nRUN apt-get update && apt-get install -y --no-install-recommends \\\n\t\tbtrfs-tools \\\n\t\tbuild-essential \\\n\t\tcurl \\\n\t\tgcc \\\n\t\tgit \\\n\t\tlibapparmor-dev \\\n\t\tlibdevmapper-dev \\\n\t\tlibsqlite3-dev \\\n\t\t\\\n\t\tca-certificates \\\n\t\te2fsprogs \\\n\t\tiptables \\\n\t\tprocps \\\n\t\txfsprogs \\\n\t\txz-utils \\\n\t\t\\\n\t\taufs-tools \\\n\t&& rm -rf /var/lib/apt/lists/*\n\n# install seccomp: the version shipped in trusty is too old\nENV SECCOMP_VERSION 2.3.1\nRUN set -x \\\n\t&& export SECCOMP_PATH=\"$(mktemp -d)\" \\\n\t&& curl -fsSL \"https://github.com/seccomp/libseccomp/releases/download/v${SECCOMP_VERSION}/libseccomp-${SECCOMP_VERSION}.tar.gz\" \\\n\t\t| tar -xzC \"$SECCOMP_PATH\" --strip-components=1 \\\n\t&& ( cd \"$SECCOMP_PATH\" \\\n\t\t&& ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --prefix=/usr/local \\\n\t\t&& make \\\n\t\t&& make install \\\n\t\t&& ldconfig) \\\n\n\t&& rm -rf \"$SECCOMP_PATH\"\n\n# Install Go\n# IMPORTANT: If the version of Go is updated, the Windows to Linux CI machines\n#            will need updating, to avoid errors. Ping #docker-maintainers on IRC\n#            with a heads-up.\nENV GO_VERSION 1.6.3\nRUN curl -fsSL \"https://storage.googleapis.com/golang/go${GO_VERSION}.linux-amd64.tar.gz\" \\\n\t| tar -xzC /usr/local\nENV PATH /go/bin:/usr/local/go/bin:$PATH\nENV GOPATH /go:/go/src/github.com/docker/docker/vendor\nENV CGO_LDFLAGS -L/lib\n\n# Install runc\nENV RUNC_COMMIT cc29e3dded8e27ba8f65738f40d251c885030a28\nRUN set -x \\\n\t&& export GOPATH=\"$(mktemp -d)\" \\\n\t&& git clone https://github.com/opencontainers/runc.git \"$GOPATH/src/github.com/opencontainers/runc\" \\\n\t&& cd \"$GOPATH/src/github.com/opencontainers/runc\" \\\n\t&& git checkout -q \"$RUNC_COMMIT\" \\\n\t&& make static BUILDTAGS=\"seccomp apparmor selinux\" \\\n\t&& cp runc /usr/local/bin/docker-runc \\\n\t&& rm -rf \"$GOPATH\"\n\n# Install containerd\nENV CONTAINERD_COMMIT 0ac3cd1be170d180b2baed755e8f0da547ceb267\nRUN set -x \\\n\t&& export GOPATH=\"$(mktemp -d)\" \\\n\t&& git clone https://github.com/docker/containerd.git \"$GOPATH/src/github.com/docker/containerd\" \\\n\t&& cd \"$GOPATH/src/github.com/docker/containerd\" \\\n\t&& git checkout -q \"$CONTAINERD_COMMIT\" \\\n\t&& make static \\\n\t&& cp bin/containerd /usr/local/bin/docker-containerd \\\n\t&& cp bin/containerd-shim /usr/local/bin/docker-containerd-shim \\\n\t&& cp bin/ctr /usr/local/bin/docker-containerd-ctr \\\n\t&& rm -rf \"$GOPATH\"\n\nENV AUTO_GOPATH 1\nWORKDIR /usr/src/docker\nCOPY . /usr/src/docker\n"
}