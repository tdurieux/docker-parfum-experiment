{
  "startTime": 1674241311111,
  "endTime": 1674241311324,
  "originalSmells": [
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 40,
        "lineEnd": 40,
        "columnStart": 5,
        "columnEnd": 59
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 48,
        "lineEnd": 48,
        "columnStart": 5,
        "columnEnd": 39
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 49,
        "lineEnd": 49,
        "columnStart": 56,
        "columnEnd": 108
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# Copyright 2016 The Kubernetes Authors.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n# This file creates a standard build environment for building cross\n# platform go binary for the architecture kubernetes cares about.\n\nFROM golang:1.11.2\n\nENV GOARM 7\nENV KUBE_DYNAMIC_CROSSPLATFORMS \\\n  armhf \\\n  arm64 \\\n  s390x \\\n  ppc64el\n\nENV KUBE_CROSSPLATFORMS \\\n  linux/386 \\\n  linux/arm linux/arm64 \\\n  linux/ppc64le \\\n  linux/s390x \\\n  darwin/amd64 darwin/386 \\\n  windows/amd64 windows/386\n\n# Pre-compile the standard go library when cross-compiling. This is much easier now when we have go1.5+\nRUN for platform in ${KUBE_CROSSPLATFORMS}; do GOOS=${platform%/*} GOARCH=${platform##*/} go install std; done \\\n    && go clean -cache\n\n# Install g++, then download and install protoc for generating protobuf output\nRUN apt-get update \\\n  && apt-get install --no-install-recommends -y rsync jq apt-utils file patch unzip \\\n  && apt-get clean && rm -rf /var/lib/apt/lists/*\n\n# Use dynamic cgo linking for architectures other than amd64 for the server platforms\n# To install crossbuild essential for other architectures add the following repository.\nRUN echo \"deb http://archive.ubuntu.com/ubuntu xenial main universe\" > /etc/apt/sources.list.d/cgocrosscompiling.list \\\n  && apt-key adv --keyserver keyserver.ubuntu.com --recv-keys 40976EAF437D05B5 3B4FE6ACC0B21F32 \\\n  && apt-get update \\\n  && apt-get install --no-install-recommends -y build-essential \\\n  && for platform in ${KUBE_DYNAMIC_CROSSPLATFORMS}; do apt-get install --no-install-recommends -y crossbuild-essential-${platform}; done \\\n  && apt-get clean && rm -rf /var/lib/apt/lists/*\n\nRUN PROTOBUF_VERSION=3.0.2; ZIPNAME=\"protoc-${PROTOBUF_VERSION}-linux-x86_64.zip\"; \\\n  mkdir /tmp/protoc && cd /tmp/protoc \\\n  && wget \"https://github.com/protocolbuffers/protobuf/releases/download/v${PROTOBUF_VERSION}/${ZIPNAME}\" \\\n  && unzip \"${ZIPNAME}\" \\\n  && chmod -R +rX /tmp/protoc \\\n  && cp -pr bin /usr/local \\\n  && cp -pr include /usr/local \\\n  && rm -rf /tmp/protoc \\\n  && protoc --version\n\n# work around 64MB tmpfs size in Docker 1.6\nENV TMPDIR /tmp.k8s\nRUN mkdir $TMPDIR \\\n  && chmod a+rwx $TMPDIR \\\n  && chmod o+t $TMPDIR\n\n# Get the code coverage tool and goimports\nRUN go get golang.org/x/tools/cmd/cover \\\n           golang.org/x/tools/cmd/goimports \\\n    && go clean -cache\n\n# Download and symlink etcd. We need this for our integration tests.\nRUN export ETCD_VERSION=v3.2.24; \\\n  mkdir -p /usr/local/src/etcd \\\n  && cd /usr/local/src/etcd \\\n  && curl -fsSL https://github.com/coreos/etcd/releases/download/${ETCD_VERSION}/etcd-${ETCD_VERSION}-linux-amd64.tar.gz | tar -xz \\\n  && ln -s ../src/etcd/etcd-${ETCD_VERSION}-linux-amd64/etcd /usr/local/bin/\n"
}