{
  "startTime": 1674253114344,
  "endTime": 1674253115157,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 138,
        "lineEnd": 138,
        "columnStart": 4,
        "columnEnd": 35
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 178,
        "lineEnd": 178,
        "columnStart": 4,
        "columnEnd": 39
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 179,
        "lineEnd": 179,
        "columnStart": 7,
        "columnEnd": 46
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 168,
        "lineEnd": 168,
        "columnStart": 7,
        "columnEnd": 33
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 169,
        "lineEnd": 169,
        "columnStart": 7,
        "columnEnd": 131
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 170,
        "lineEnd": 170,
        "columnStart": 7,
        "columnEnd": 33
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 171,
        "lineEnd": 171,
        "columnStart": 7,
        "columnEnd": 131
      }
    },
    {
      "rule": "gpgUseBatchFlag",
      "position": {
        "lineStart": 178,
        "lineEnd": 178,
        "columnStart": 42,
        "columnEnd": 56
      }
    },
    {
      "rule": "gpgUseBatchFlag",
      "position": {
        "lineStart": 179,
        "lineEnd": 179,
        "columnStart": 49,
        "columnEnd": 63
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 4,
        "lineEnd": 17,
        "columnStart": 7,
        "columnEnd": 17
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 35,
        "lineEnd": 41,
        "columnStart": 7,
        "columnEnd": 13
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 47,
        "lineEnd": 50,
        "columnStart": 22,
        "columnEnd": 20
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 67,
        "lineEnd": 85,
        "columnStart": 22,
        "columnEnd": 15
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 194,
        "lineEnd": 198,
        "columnStart": 43,
        "columnEnd": 18
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 4,
        "lineEnd": 17,
        "columnStart": 7,
        "columnEnd": 17
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 35,
        "lineEnd": 41,
        "columnStart": 7,
        "columnEnd": 13
      }
    }
  ],
  "repairedSmells": [
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 4,
        "lineEnd": 17,
        "columnStart": 7,
        "columnEnd": 17
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 35,
        "lineEnd": 41,
        "columnStart": 7,
        "columnEnd": 13
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 194,
        "lineEnd": 198,
        "columnStart": 43,
        "columnEnd": 18
      }
    }
  ],
  "repairedDockerfile": "FROM buildpack-deps:cosmic\n\n### base ###\nRUN yes | unminimize \\\n    && apt-get install --no-install-recommends -yq \\\n        asciidoctor \\\n        bash-completion \\\n        build-essential \\\n        htop \\\n        jq \\\n        less \\\n        locales \\\n        man-db \\\n        nano \\\n        software-properties-common \\\n        sudo \\\n        vim \\\n        multitail \\\n    && locale-gen en_US.UTF-8 \\\n    && apt-get clean && rm -rf /var/lib/apt/lists/* /tmp/*\nENV LANG=en_US.UTF-8\n\n### Gitpod user ###\n# '-l': see https://docs.docker.com/develop/develop-images/dockerfile_best-practices/#user\nRUN useradd -l -u 33333 -G sudo -md /home/gitpod -s /bin/bash -p gitpod gitpod \\\n    # passwordless sudo for users in the 'sudo' group\n    && sed -i.bkp -e 's/%sudo\\s\\+ALL=(ALL\\(:ALL\\)\\?)\\s\\+ALL/%sudo ALL=NOPASSWD:ALL/g' /etc/sudoers\nENV HOME=/home/gitpod\nWORKDIR $HOME\n# custom Bash prompt\nRUN { echo && echo \"PS1='\\[\\e]0;\\u \\w\\a\\]\\[\\033[01;32m\\]\\u\\[\\033[00m\\] \\[\\033[01;34m\\]\\w\\[\\033[00m\\] \\\\\\$ '\" ; } >> .bashrc\n\n### C/C++ ###\nRUN curl -fsSL https://apt.llvm.org/llvm-snapshot.gpg.key | apt-key add - \\\n    && apt-add-repository -yu \"deb http://apt.llvm.org/cosmic/ llvm-toolchain-cosmic main\" \\\n    && apt-get install --no-install-recommends -yq \\\n        clang-format-9 \\\n        clang-tidy-9 \\\n        clang-tools-9 \\\n        cmake \\\n        gdb \\\n        lld-9 \\\n    && ln -s /usr/bin/clangd-9 /usr/bin/clangd \\\n    && apt-get clean && rm -rf /var/lib/apt/lists/* /tmp/*\n\n### Apache and Nginx ###\n\nRUN apt-get update && apt-get install --no-install-recommends -yq \\\n        apache2 \\\n        nginx \\\n        nginx-extras \\\n    && apt-get clean && rm -rf /var/lib/apt/lists/* /tmp/* \\\n    && mkdir /var/run/apache2 \\\n    && mkdir /var/lock/apache2 \\\n    && mkdir /var/run/nginx \\\n    && ln -s /etc/apache2/mods-available/rewrite.load /etc/apache2/mods-enabled/rewrite.load \\\n    && chown -R gitpod:gitpod /etc/apache2 /var/run/apache2 /var/lock/apache2 /var/log/apache2 \\\n    && chown -R gitpod:gitpod /etc/nginx /var/run/nginx /var/lib/nginx/ /var/log/nginx/\nCOPY apache2/ /etc/apache2/\nCOPY nginx /etc/nginx/\n\n## The directory relative to your git repository that will be served by Apache / Nginx\nENV APACHE_DOCROOT_IN_REPO=\"public\"\nENV NGINX_DOCROOT_IN_REPO=\"public\"\n\n\n### PHP ###\nRUN apt-get update && DEBIAN_FRONTEND=noninteractive apt-get --no-install-recommends install -yq \\\n        composer \\\n        php \\\n        php-all-dev \\\n        php-ctype \\\n        php-curl \\\n        php-date \\\n        php-gd \\\n        php-gettext \\\n        php-intl \\\n        php-json \\\n        php-mbstring \\\n        php-mysql \\\n        php-net-ftp \\\n        php-pgsql \\\n        php-sqlite3 \\\n        php-tokenizer \\\n        php-xml \\\n        php-zip \\\n    && apt-get clean && rm -rf /var/lib/apt/lists/* /tmp/*\n# PHP language server is installed by theia-php-extension\n\n### Gitpod user (2) ###\nUSER gitpod\n# use sudo so that user does not get sudo usage info on (the first) login\nRUN sudo echo \"Running 'sudo' for Gitpod: success\"\n\n### Go ###\nENV GO_VERSION=1.12 \\\n    GOPATH=$HOME/go-packages \\\n    GOROOT=$HOME/go\nENV PATH=$GOROOT/bin:$GOPATH/bin:$PATH\nRUN curl -fsSL https://storage.googleapis.com/golang/go$GO_VERSION.linux-amd64.tar.gz | tar -xzv \\\n# install VS Code Go tools from https://github.com/Microsoft/vscode-go/blob/0faec7e5a8a69d71093f08e035d33beb3ded8626/src/goInstallTools.ts#L19-L45\n    && go get -u -v \\\n    github.com/mdempsky/gocode \\\n    github.com/uudashr/gopkgs/cmd/gopkgs \\\n    github.com/ramya-rao-a/go-outline \\\n    github.com/acroca/go-symbols \\\n    golang.org/x/tools/cmd/guru \\\n    golang.org/x/tools/cmd/gorename \\\n    github.com/fatih/gomodifytags \\\n    github.com/haya14busa/goplay/cmd/goplay \\\n    github.com/josharian/impl \\\n    github.com/tylerb/gotype-live \\\n    github.com/rogpeppe/godef \\\n    github.com/zmb3/gogetdoc \\\n    golang.org/x/tools/cmd/goimports \\\n    github.com/sqs/goreturns \\\n    winterdrache.de/goformat/goformat \\\n    golang.org/x/lint/golint \\\n    github.com/cweill/gotests/... \\\n    github.com/alecthomas/gometalinter \\\n    honnef.co/go/tools/... \\\n    github.com/golangci/golangci-lint/cmd/golangci-lint \\\n    github.com/mgechev/revive \\\n    github.com/sourcegraph/go-langserver \\\n    golang.org/x/tools/cmd/gopls \\\n    github.com/go-delve/delve/cmd/dlv \\\n    github.com/davidrjenni/reftools/cmd/fillstruct \\\n    github.com/godoctor/godoctor && \\\n    go get -u -v -d github.com/stamblerre/gocode && \\\n    go build -o $GOPATH/bin/gocode-gomod github.com/stamblerre/gocode && \\\n    rm -rf $GOPATH/src && \\\n    rm -rf $GOPATH/pkg\n# user Go packages\nENV GOPATH=/workspace/go \\\n    PATH=/workspace/go/bin:$PATH\n\n### Java ###\n## Place '.gradle' and 'm2-repository' in /workspace because (1) that's a fast volume, (2) it survives workspace-restarts and (3) it can be warmed-up by pre-builds.\nRUN curl -f -s \"https://get.sdkman.io\" | bash \\\n && bash -c \". /home/gitpod/.sdkman/bin/sdkman-init.sh \\\n             && sdk install java 8.0.202-zulufx \\\n             && sdk install java 11.0.2-zulufx \\\n             && sdk default java 8.0.202-zulufx \\\n             && sdk install gradle \\\n             && sdk install maven \\\n             && mkdir /home/gitpod/.m2 \\\n             && printf '<settings>\\n  <localRepository>/workspace/m2-repository/</localRepository>\\n</settings>\\n' > /home/gitpod/.m2/settings.xml\"\nENV GRADLE_USER_HOME=/workspace/.gradle/\n\n### Node.js ###\nARG NODE_VERSION=10.15.3\nRUN curl -fsSL https://raw.githubusercontent.com/creationix/nvm/v0.34.0/install.sh | bash \\\n    && bash -c \". .nvm/nvm.sh \\\n        && nvm install $NODE_VERSION \\\n        && npm config set python /usr/bin/python --global \\\n        && npm config set python /usr/bin/python \\\n        && npm install -g typescript yarn\"\nENV PATH=/home/gitpod/.nvm/versions/node/v${NODE_VERSION}/bin:$PATH\n\n### Python ###\nENV PATH=$HOME/.pyenv/bin:$HOME/.pyenv/shims:$PATH\nRUN curl -fsSL https://github.com/pyenv/pyenv-installer/raw/master/bin/pyenv-installer | bash \\\n    && { echo; \\\n        echo 'eval \"$(pyenv init -)\"'; \\\n        echo 'eval \"$(pyenv virtualenv-init -)\"'; } >> .bashrc \\\n    && pyenv install 2.7.15 \\\n    && pyenv install 3.7.2 \\\n    && pyenv global 2.7.15 3.7.2 \\\n    && pip2 install --no-cache-dir --upgrade pip \\\n    && pip2 install --no-cache-dir virtualenv pipenv pylint rope flake8 autopep8 pep8 pylama pydocstyle bandit python-language-server[all]==0.25.0 \\\n    && pip3 install --no-cache-dir --upgrade pip \\\n    && pip3 install --no-cache-dir virtualenv pipenv pylint rope flake8 autopep8 pep8 pylama pydocstyle bandit python-language-server[all]==0.25.0 \\\n    && rm -rf /tmp/*\n# Gitpod will automatically add user site under `/workspace` to persist your packages.\n# ENV PYTHONUSERBASE=/workspace/.pip-modules \\\n#    PIP_USER=yes\n\n### Ruby ###\nRUN curl -f -sSL https://rvm.io/mpapis.asc | gpg --batch --import - \\\n    && curl -f -sSL https://rvm.io/pkuczynski.asc | gpg --batch --import - \\\n    && curl -fsSL https://get.rvm.io | bash -s stable \\\n    && bash -lc \" \\\n        rvm requirements \\\n        && rvm install 2.4 \\\n        && rvm install 2.5 \\\n        && rvm install 2.6 \\\n        && rvm use 2.6 --default \\\n        && rvm rubygems current \\\n        && gem install bundler --no-document \\\n        && gem install solargraph --no-document\"\nENV GEM_HOME=/workspace/.rvm\n\n### Rust ###\nRUN sudo apt-get update \\\n    && DEBIAN_FRONTEND=noninteractive sudo apt-get install --no-install-recommends -yq \\\n\n        musl \\\n        musl-dev \\\n        musl-tools # Enable Rust static binary builds\n\n\n\n    && sudo apt-get clean \\\n    && sudo rm -rf /var/lib/apt/lists/* /tmp/*\n\nRUN curl -fsSL https://sh.rustup.rs | sh -s -- -y \\\n    && .cargo/bin/rustup update \\\n    && .cargo/bin/rustup component add rls-preview rust-analysis rust-src \\\n    && .cargo/bin/rustup completions bash | sudo tee /etc/bash_completion.d/rustup.bash-completion > /dev/null \\\n    && .cargo/bin/rustup target add x86_64-unknown-linux-musl\nRUN bash -lc \"cargo install cargo-watch\"\n\n### checks ###\n# no root-owned files in the home directory\nRUN notOwnedFile=$(find . -not \"(\" -user gitpod -and -group gitpod \")\" -print -quit) \\\n    && { [ -z \"$notOwnedFile\" ] \\\n        || { echo \"Error: not all files/dirs in $HOME are owned by 'gitpod' user & group\"; exit 1; } }\n"
}