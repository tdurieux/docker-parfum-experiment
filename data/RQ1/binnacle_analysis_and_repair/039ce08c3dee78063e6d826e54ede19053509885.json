{
  "startTime": 1674249467923,
  "endTime": 1674249468260,
  "originalSmells": [
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 83,
        "lineEnd": 83,
        "columnStart": 8,
        "columnEnd": 19
      }
    },
    {
      "rule": "apkAddUseNoCache",
      "position": {
        "lineStart": 17,
        "lineEnd": 17,
        "columnStart": 4,
        "columnEnd": 38
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM alpine:3.9 AS mirror\n\n# update base image\nRUN apk update && apk upgrade -a\n\n# Copy Dockerfile so we can include it in the hash\nCOPY Dockerfile /Dockerfile\nCOPY packages* /tmp/\n\n# mirror packages\nRUN cat /tmp/packages.$(uname -m) >> /tmp/packages && \\\n   mkdir -p /mirror/$(apk --print-arch) && \\\n   apk fetch --recursive -o /mirror/$(apk --print-arch) $(apk info; cat /tmp/packages)\n\n# It's tricky to mix edge/testing packages which sometimes leads to dependency conflicts.\n# wireguard-tools currently is only in edge, so here we build our own package using the\n# APKBUILD file from edge.\nRUN apk add --no-cache alpine-sdk libmnl-dev curl && \\\n    adduser -D builder && \\\n    addgroup builder abuild && \\\n    mkdir -p /wireguard && \\\n    chmod 0777 /wireguard && \\\n    cd /wireguard && \\\n    curl -fsSLo APKBUILD https://git.alpinelinux.org/cgit/aports/plain/testing/wireguard-tools/APKBUILD && \\\n    curl -fsSLo alpine-compat.patch https://git.alpinelinux.org/aports/plain/testing/wireguard-tools/alpine-compat.patch && \\\n    su -c \"abuild-keygen -a -n && abuild -r\" builder && \\\n    cp /home/builder/packages/$(apk --print-arch)/wireguard-tools-[0-9]*.apk /mirror/$(apk --print-arch) && \\\n    cp /home/builder/packages/$(apk --print-arch)/wireguard-tools-wg-[0-9]*.apk /mirror/$(apk --print-arch) && \\\n    cp /home/builder/packages/$(apk --print-arch)/wireguard-tools-wg-quick-[0-9]*.apk /mirror/$(apk --print-arch)\n\n# install abuild for signing\nRUN apk add --no-cache abuild\n\n# install a new key into /etc/apk/keys\nRUN abuild-keygen -a -i -n\n\n# index the new repo\nRUN apk index --rewrite-arch $(apk --print-arch) -o /mirror/$(apk --print-arch)/APKINDEX.unsigned.tar.gz /mirror/$(apk --print-arch)/*.apk\n\n# sign the index\nRUN cp /mirror/$(apk --print-arch)/APKINDEX.unsigned.tar.gz /mirror/$(apk --print-arch)/APKINDEX.tar.gz\nRUN abuild-sign /mirror/$(apk --print-arch)/APKINDEX.tar.gz\n\n# set this as our repo but keep a copy of the upstream for downstream use\nRUN mv /etc/apk/repositories /etc/apk/repositories.upstream && echo \"/mirror\" > /etc/apk/repositories && apk update\n\n# add Go validation tools\nCOPY go-compile.sh /go/bin/\nRUN apk add --no-cache git go musl-dev\nENV GOPATH=/go PATH=$PATH:/go/bin\nRUN go get -u github.com/golang/lint/golint\nRUN go get -u github.com/gordonklaus/ineffassign\nRUN go get -u github.com/LK4D4/vndr\n\n# checkout and compile containerd\n# Update `FROM` in `pkg/containerd/Dockerfile`, `pkg/init/Dockerfile` and\n# `test/pkg/containerd/Dockerfile` when changing this.\nENV CONTAINERD_REPO=https://github.com/containerd/containerd.git\nENV CONTAINERD_COMMIT=v1.2.6\nRUN mkdir -p $GOPATH/src/github.com/containerd && \\\n  cd $GOPATH/src/github.com/containerd && \\\n  git clone https://github.com/containerd/containerd.git && \\\n  cd $GOPATH/src/github.com/containerd/containerd && \\\n  git checkout $CONTAINERD_COMMIT\nRUN apk add --no-cache btrfs-progs-dev gcc libc-dev linux-headers make libseccomp-dev\nRUN cd $GOPATH/src/github.com/containerd/containerd && \\\n  make binaries EXTRA_FLAGS=\"-buildmode pie\" EXTRA_LDFLAGS='-extldflags \"-fno-PIC -static\"' BUILD_TAGS=\"static_build\"\n\n# Checkout and compile iucode-tool for Intel CPU microcode\n# On non-x86_64 create a dummy file to copy below.\nENV IUCODE_REPO=https://gitlab.com/iucode-tool/iucode-tool\nENV IUCODE_COMMIT=v2.2\nWORKDIR /\nADD iucode-tool.patch /\nRUN set -e && \\\n    mkdir /iucode_tool && \\\n    if [ $(uname -m) = \"x86_64\" ]; then \\\n        apk add --no-cache automake autoconf argp-standalone git gcc make musl-dev patch && \\\n        git clone ${IUCODE_REPO} && \\\n        cd /iucode-tool && \\\n        git checkout ${IUCODE_COMMIT} && \\\n        patch -p 1 < /iucode-tool.patch && \\\n        ./autogen.sh && \\\n        ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" && \\\n        make && \\\n        cp iucode_tool /iucode_tool; \\\n    fi\n\nFROM alpine:3.9\n\nCOPY --from=mirror /etc/apk/repositories /etc/apk/repositories\nCOPY --from=mirror /etc/apk/repositories.upstream /etc/apk/repositories.upstream\nCOPY --from=mirror /etc/apk/keys /etc/apk/keys/\nCOPY --from=mirror /mirror /mirror/\nCOPY --from=mirror /go/bin /go/bin/\nCOPY --from=mirror /Dockerfile /Dockerfile\nCOPY --from=mirror /go/src/github.com/containerd/containerd /go/src/github.com/containerd/containerd/\nCOPY --from=mirror /iucode_tool /usr/bin/\n\nRUN apk update && apk upgrade -a\n\nENV GOPATH=/go PATH=$PATH:/go/bin\n"
}