{
  "startTime": 1674252873525,
  "endTime": 1674252873788,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 4,
        "lineEnd": 4,
        "columnStart": 4,
        "columnEnd": 49
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 7,
        "lineEnd": 7,
        "columnStart": 4,
        "columnEnd": 28
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 6,
        "lineEnd": 6,
        "columnStart": 4,
        "columnEnd": 41
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 6,
        "lineEnd": 6,
        "columnStart": 4,
        "columnEnd": 41
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# Start from a rust:nightly base image\nFROM rustlang/rust:nightly\n\n# Install our box dependencies in one, easily-cached layer image\nRUN curl -f -sL https://deb.nodesource.com/setup_8.x | bash - && \\\n    apt-get update -qq && \\\n    apt-get install --no-install-recommends -y nodejs python3-pip && \\\n    pip3 install --no-cache-dir toml flake8 && rm -rf /var/lib/apt/lists/*;\n\n# Move to our project directory\nWORKDIR /opt/openpowerlifting\n# and ensure our build directory is available\nRUN mkdir -p build\n\n# Now, typically, we want to order our COPY commands such that\n# things that change most often are copied in last, so\n# that we can benefit from layer caching.\n# However, since meet-data is so disproportionately large,\n# we COPY it in FIRST and anytime we change anything else,\n# layer caching will still have this cached and will bust\n# later when there's probably less than a MB left to COPY in.\n\n# So, we'll\n# COPY in data from heaviest to lightest\nCOPY meet-data meet-data/\nCOPY lifter-data lifter-data/\nCOPY project-data project-data/\n\n# COPY in build instructions which shouldn't change as often as the...\nCOPY Cargo.* ./\nCOPY Makefile ./\n\n# project code\nCOPY checker checker/\nCOPY modules modules/\nCOPY server server/\n\n# Build it\nRUN make\n\n# Move to our server\nWORKDIR /opt/openpowerlifting/server\n\n# Overwrite the symlink'd map with the real built item\nRUN cp client/build/static-asset-map.tera templates\n\n# Expose our port so we can access it from our host machine\nEXPOSE 8000\n\n# Expose Rocket to host machine\nENV ROCKET_ADDRESS=0.0.0.0\n\n# And we're ready to docker run\nCMD [\"cargo\", \"run\", \"--release\"]\n"
}