{
  "startTime": 1674245534075,
  "endTime": 1674245534252,
  "originalSmells": [
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 10,
        "lineEnd": 10,
        "columnStart": 22,
        "columnEnd": 44
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 10,
        "lineEnd": 10,
        "columnStart": 22,
        "columnEnd": 44
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# clones a git repo,\n# do whatever you want with it after cloning\n#\n# VERSION               1.0.1\n#\nFROM picoded/ubuntu-base\n\n#\n# Get the required git stuff\n#\nRUN apt-get update && apt-get install --no-install-recommends -y git && apt-get clean; rm -rf /var/lib/apt/lists/*;\n\n#\n# Git repo to clone from\n# Note, You can add user/pass by doing :\n# \"https://user:pass@github.com/picoded/dockerfiles.git\"\n#\nENV GIT_REPO \"https://github.com/picoded/dockerfiles.git\"\n\n# Branch or commit hash to checkout from\nENV GIT_COMMIT \"master\"\n\n# The folder name to clone into, default is the /workspace folder itself (or \".\")\n# Note this only works as a relative path to /workspace, do not use blank\nENV GIT_FOLDER \".\"\n\n# This is the run script, called before git clone/pull\nENV GIT_PRESCRIPT \"\"\n\n# This is the run script, called after git clone/pull\nENV GIT_POSTSCRIPT \"\"\n\n#\n# Prepares the git cloner script\n#\nRUN echo '#!/bin/bash'                                                               > /entrypoint/git-cloner.sh && \\\n\techo 'echo \"###\"'                                                                 >> /entrypoint/git-cloner.sh && \\\n\techo 'echo \"### Start of picoded/git-cloner : entrypoint/git-cloner.sh\"'          >> /entrypoint/git-cloner.sh && \\\n\techo 'echo \"###\"'                                                                 >> /entrypoint/git-cloner.sh && \\\n\techo ''                                                                           >> /entrypoint/git-cloner.sh && \\\n\techo '# Enters the /workspace'                                                    >> /entrypoint/git-cloner.sh && \\\n\techo 'cd /workspace;'                                                             >> /entrypoint/git-cloner.sh && \\\n\techo ''                                                                           >> /entrypoint/git-cloner.sh && \\\n\techo 'if [ -n \"$GIT_PRESCRIPT\" ]; then '                                          >> /entrypoint/git-cloner.sh && \\\n\techo '   eval \"$GIT_PRESCRIPT\";'                                                  >> /entrypoint/git-cloner.sh && \\\n\techo 'fi '                                                                        >> /entrypoint/git-cloner.sh && \\\n\techo ''                                                                           >> /entrypoint/git-cloner.sh && \\\n\techo '# Ensures the git repo is cloned'                                           >> /entrypoint/git-cloner.sh && \\\n\techo 'if [ ! -d \"$GIT_FOLDER/.git\" ]; then '                                      >> /entrypoint/git-cloner.sh && \\\n\techo '   git clone --recursive \"$GIT_REPO\" \"$GIT_FOLDER\";'                        >> /entrypoint/git-cloner.sh && \\\n\techo 'fi '                                                                        >> /entrypoint/git-cloner.sh && \\\n\techo ''                                                                           >> /entrypoint/git-cloner.sh && \\\n\techo '# Enter git repo and pull updates (if needed)'                              >> /entrypoint/git-cloner.sh && \\\n\techo 'cd \"$GIT_FOLDER\"'                                                           >> /entrypoint/git-cloner.sh && \\\n\techo 'git fetch;'                                                                 >> /entrypoint/git-cloner.sh && \\\n\techo 'git checkout \"$GIT_COMMIT\";'                                                >> /entrypoint/git-cloner.sh && \\\n\techo 'git pull;'                                                                  >> /entrypoint/git-cloner.sh && \\\n\techo ''                                                                           >> /entrypoint/git-cloner.sh && \\\n\techo 'if [ -n \"$GIT_POSTSCRIPT\" ]; then '                                         >> /entrypoint/git-cloner.sh && \\\n\techo '   eval \"$GIT_POSTSCRIPT\";'                                                 >> /entrypoint/git-cloner.sh && \\\n\techo 'fi '                                                                        >> /entrypoint/git-cloner.sh && \\\n\techo ''                                                                           >> /entrypoint/git-cloner.sh && \\\n\techo 'echo \"###\"'                                                                 >> /entrypoint/git-cloner.sh && \\\n\techo 'echo \"### Finished picoded/git-cloner : entrypoint/git-cloner.sh\"'          >> /entrypoint/git-cloner.sh && \\\n\techo 'echo \"###\"'                                                                 >> /entrypoint/git-cloner.sh && \\\n\techo ''                                                                           >> /entrypoint/git-cloner.sh && \\\n\techo 'cd \"/workspace/$GIT_FOLDER/\"'                                               >> /entrypoint/git-cloner.sh && \\\n\techo 'exec \"$@\"'                                                                  >> /entrypoint/git-cloner.sh && \\\n\tchmod +x /entrypoint/git-cloner.sh;\n\n#\n# Useful for build debugging\n#\n# RUN cat /entrypoint/git-cloner.sh;\n\n#\n# Runs with entry point and command\n#\nENTRYPOINT [\"/entrypoint/primer.sh\", \"/entrypoint/git-cloner.sh\"]\nCMD echo \"hello world : run your actual command here\"\n"
}