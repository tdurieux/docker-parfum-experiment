{
  "startTime": 1674240818233,
  "endTime": 1674240818864,
  "originalSmells": [
    {
      "rule": "wgetUseHttpsUrl",
      "position": {
        "lineStart": 87,
        "lineEnd": 87,
        "columnStart": 1,
        "columnEnd": 116
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 14,
        "lineEnd": 14,
        "columnStart": 5,
        "columnEnd": 51
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 94,
        "lineEnd": 94,
        "columnStart": 5,
        "columnEnd": 16
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 200,
        "lineEnd": 200,
        "columnStart": 5,
        "columnEnd": 50
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 204,
        "lineEnd": 204,
        "columnStart": 5,
        "columnEnd": 43
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 205,
        "lineEnd": 205,
        "columnStart": 5,
        "columnEnd": 28
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 185,
        "lineEnd": 188,
        "columnStart": 5,
        "columnEnd": 35
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM pipelineai/ubuntu-16.04-gpu:1.5.0\n\nWORKDIR /root\n\n# MXNET\nRUN \\\n  add-apt-repository -y ppa:certbot/certbot \\\n  && apt-get update \\\n  && apt-get install --no-install-recommends -y \\\n    libatlas-base-dev \\\n    libopencv-dev \\\n    graphviz \\\n    protobuf-compiler \\\n    libprotoc-dev \\\n  && pip install --no-cache-dir gevent gunicorn mxnet-model-server \\\n  && pip install --no-cache-dir mxnet-cu90 \\\n  && mkdir /root/mxnet_model_server \\\n  && rm -rf /var/lib/apt/lists/* \\\n  && apt-get clean\n\nCOPY mxnet/wsgi.py mxnet/setup_mms.py mxnet/mxnet-model-server.sh /root/mxnet_model_server/\n# TODO:\n#COPY mxnet/mms_app_gpu.conf /root/ml/model/\n\nENV \\\n  PATH=\"/root/mxnet_model_server:${PATH}\" \\\n  MXNET_MODEL_SERVER_GPU_IMAGE=1 \\\n  gpu_id=0\n\n#RUN \\\n#  echo \"deb https://dl.bintray.com/sbt/debian /\" | tee -a /etc/apt/sources.list.d/sbt.list \\\n#  && apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv 2EE0EA64E40A89B84B2DF73499E82A75642AC823 \\\n#  && apt-get update \\\n#  && apt-get install --no-install-recommends -y --allow-unauthenticated sbt=1.0.2 \\\n#  && rm -rf /var/lib/apt/lists/* \\\n#  && apt-get clean\n\nCOPY config/prometheus/ config/prometheus/\nENV \\\n  PROMETHEUS_VERSION=2.3.2\n\nRUN \\\n  wget https://github.com/prometheus/prometheus/releases/download/v$PROMETHEUS_VERSION/prometheus-$PROMETHEUS_VERSION.linux-amd64.tar.gz \\\n  && tar xvfz prometheus-$PROMETHEUS_VERSION.linux-amd64.tar.gz \\\n  && rm prometheus-$PROMETHEUS_VERSION.linux-amd64.tar.gz\n\nENV \\\n  PATH=/root/prometheus-$PROMETHEUS_VERSION.linux-amd64/:$PATH\n\nENV \\\n  GRAFANA_VERSION=5.2.2\n\nRUN \\\n  wget https://s3-us-west-2.amazonaws.com/grafana-releases/release/grafana-$GRAFANA_VERSION.linux-amd64.tar.gz \\ \n  && tar -zxvf grafana-$GRAFANA_VERSION.linux-amd64.tar.gz \\\n  && rm grafana-$GRAFANA_VERSION.linux-amd64.tar.gz\n\nENV \\\n  PATH=/root/grafana-$GRAFANA_VERSION/bin:$PATH\n\nCOPY config/grafana/ config/grafana/\nRUN \\\n  cd /root/grafana-$GRAFANA_VERSION/conf \\\n  && ln -s /root/config/grafana/grafana.ini \\\n  && ln -s /root/config/grafana/dashboards \\\n  && ln -s /root/config/grafana/datasources.yaml \\\n  && ln -s /root/config/grafana/dashboards.yaml\n\nRUN \\\n  mkdir -p /root/logs\n\nENV \\\n  LOGS_HOME=/root/logs\n\nCOPY sysutils/ sysutils/\n\nENV \\\n  CONFLUENT_VERSION=5.0.0 \\\n  CONFLUENT_MAJOR_VERSION=5.0\n\nENV \\\n  CONFLUENT_HOME=/root/confluent-${CONFLUENT_VERSION}\n\nENV \\\n  PATH=$CONFLUENT_HOME/bin:$PATH\n\nRUN \\\n wget https://packages.confluent.io/archive/${CONFLUENT_MAJOR_VERSION}/confluent-oss-${CONFLUENT_VERSION}-2.11.tar.gz \\\n && tar xvzf confluent-oss-${CONFLUENT_VERSION}-2.11.tar.gz \\\n && rm confluent-oss-${CONFLUENT_VERSION}-2.11.tar.gz\n\nRUN \\\n  git clone https://github.com/edenhill/librdkafka.git \\\n  && cd librdkafka \\\n  && ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" \\\n  && make \\\n  && make install\n\n#RUN \\\n#  pip install git+https://github.com/wintoncode/winton-kafka-streams.git\n\nRUN \\\n  apt-get update \\\n  && apt-get install --no-install-recommends -y nginx \\\n  && rm -rf /var/lib/apt/lists/* \\\n  && apt-get clean\n\nCOPY config/nginx/ config/nginx/\n\nRUN \\\n  mv /etc/nginx/sites-available/default /etc/nginx/sites-available/default.orig \\\n  && cd /etc/nginx/sites-available/ \\\n  && ln -s /root/config/nginx/default \\\n  && cd /etc/nginx/sites-enabled/ \\\n  && rm default \\\n  && ln -s /etc/nginx/sites-available/default\n\n# forward request and error logs to docker log collector\n#RUN \\\n#  ln -sf /dev/stdout /var/log/nginx/access.log \\\n#  && ln -sf /dev/stderr /var/log/nginx/error.log\n\nRUN \\\n  service nginx start\n\n# Must run ths or you will see the following error:\n#   ImportError: librdkafka.so.1: cannot open shared object file: No such file or directory\nRUN \\\n  ldconfig\n\nENV \\\n  PIPELINE_RESOURCE_SERVER_PATH=/root/src/main/python/model_server\n\nENV \\\n  PIPELINE_RESOURCE_SERVER_PORT=9876\n\nENV \\\n  PIPELINE_RESOURCE_SERVER_TENSORFLOW_SERVING_PORT=9000\n\nENV \\\n  PIPELINE_RESOURCE_SERVER_TENSORFLOW_SERVING_REQUEST_BATCHING=true\n\n# https://github.com/tensorflow/serving/issues/819\nRUN \\\n  add-apt-repository ppa:ubuntu-toolchain-r/test -y \\\n  && apt-get update \\\n  && apt-get install --no-install-recommends -y libstdc++6 \\\n  && rm -rf /var/lib/apt/lists/* \\\n  && apt-get clean\n\nRUN \\\n  wget https://s3.amazonaws.com/fluxcapacitor.com/packages/tensorflow_model_server.gpu \\\n  && mv tensorflow_model_server.gpu /usr/local/bin/tensorflow_model_server \\\n  && chmod a+x /usr/local/bin/tensorflow_model_server\n\nENV \\\n  PIPELINE_HYSTRIX_DASHBOARD_PORT=7979\n\nCOPY dashboard/jetty-0.4.7.RC0.jar dashboard/jetty-0.4.7.RC0.jar\nCOPY dashboard/hystrix-dashboard-0.1.0-dev.0.uncommitted.war dashboard/hystrix-dashboard-0.1.0-dev.0.uncommitted.war\nCOPY html/ html/\nCOPY src/ src/\n\nRUN \\\n  cp -R html/* /var/www/html/\n\nCOPY config/kafka/ config/kafka/\n\nENV \\\n  LD_LIBRARY_PATH=${LD_LIBRARY_PATH:+${LD_LIBRARY_PATH}:}/usr/lib/x86_64-linux-gnu:/usr/local/cuda/lib64:/usr/local/cuda-9.0/lib64:/usr/local/cuda/extras/CUPTI/lib64\n\nRUN \\\n  ldconfig /usr/lib/x86_64-linux-gnu \\\n  && ldconfig /usr/local/cuda/lib64 \\\n  && ldconfig /usr/local/cuda-9.0/lib64 \\\n  && ldconfig /usr/local/cuda/extras/CUPTI/lib64\n\nENV \\\n  PATH=/usr/local/cuda/bin:$PATH\n\n# TensorRT\nRUN \\\n  wget https://developer.download.nvidia.com/compute/machine-learning/repos/ubuntu1404/x86_64/nvinfer-runtime-trt-repo-ubuntu1404-3.0.4-ga-cuda9.0_1.0-1_amd64.deb \\\n  && dpkg -i nvinfer-runtime-trt-repo-ubuntu1404-3.0.4-ga-cuda9.0_1.0-1_amd64.deb \\\n  && apt-get update \\\n  && apt-get install --no-install-recommends -y \\\n       libnvinfer-dev \\\n       libcudnn7-dev=7.0.5.15-1+cuda9.0 \\\n       libcudnn7=7.0.5.15-1+cuda9.0 && rm -rf /var/lib/apt/lists/*;\n\nCOPY jvm/ jvm/\n\nENV \\\n  PIPELINE_JVM_MODEL_SERVER_PATH=/root/jvm\n\n#####################\n# Setup OpenJDK 1.11\n#####################\nRUN \\\n  apt-get update \\\n  && apt-get install --no-install-recommends -y software-properties-common \\\n  && add-apt-repository -y ppa:openjdk-r/ppa \\\n  && apt-get update \\\n  && apt-get install -y --no-install-recommends openjdk-11-jdk openjdk-11-jre-headless \\\n  && apt-get install --no-install-recommends -y apt-transport-https \\\n  && apt-get install --no-install-recommends -y wget \\\n  && apt-get clean \\\n  && rm -rf /var/lib/apt/lists/*\n\nENV \\\n  JAVA_HOME=/usr/lib/jvm/java-11-openjdk-amd64/\n\nRUN \\\n  echo \"deb https://dl.bintray.com/sbt/debian /\" | tee -a /etc/apt/sources.list.d/sbt.list \\\n  && apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv 2EE0EA64E40A89B84B2DF73499E82A75642AC823 \\\n  && apt-get update \\\n  && apt-get install --no-install-recommends -y --allow-unauthenticated sbt=1.2.7 \\\n  && rm -rf /var/lib/apt/lists/* \\\n  && apt-get clean\n\nRUN \\\n  cd $PIPELINE_JVM_MODEL_SERVER_PATH \\\n  && ./build.sh\n\n# Don't forget to update the pipeline cli if these ports change!\nEXPOSE \\\n  8080 \\\n  9090 \\\n  3000\n\nCOPY run run\n\nENTRYPOINT [\"./run\"]\n"
}