{
  "startTime": 1674245428992,
  "endTime": 1674245429200,
  "originalSmells": [
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 67,
        "lineEnd": 67,
        "columnStart": 4,
        "columnEnd": 49
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# To push a new version, run:\n# $ docker build -f Dockerfile.rbe.cuda10.0-cudnn7-ubuntu14.04 \\\n#       --tag \"gcr.io/tensorflow-testing/nosla-cuda10.0-cudnn7-ubuntu14.04\" .\n# $ docker push gcr.io/tensorflow-testing/nosla-cuda10.0-cudnn7-ubuntu14.04\n\nFROM gcr.io/clang-docker-builder/clang-ubuntu14_04\nLABEL maintainer=\"Manuel Klimek <klimek@google.com>\"\n\nRUN apt-get update && apt-get install -y --no-install-recommends ca-certificates apt-transport-https gnupg-curl && \\\n    rm -rf /var/lib/apt/lists/* && \\\n    NVIDIA_GPGKEY_SUM=d1be581509378368edeec8c1eb2958702feedf3bc3d17011adbf24efacce4ab5 && \\\n    NVIDIA_GPGKEY_FPR=ae09fe4bbd223a84b2ccfce3f60f4b3d7fa2af80 && \\\n    apt-key adv --fetch-keys https://developer.download.nvidia.com/compute/cuda/repos/ubuntu1604/x86_64/7fa2af80.pub && \\\n    apt-key adv --export --no-emit-version -a $NVIDIA_GPGKEY_FPR | tail -n +2 > cudasign.pub && \\\n    echo \"$NVIDIA_GPGKEY_SUM  cudasign.pub\" | sha256sum -c --strict - && rm cudasign.pub && \\\n    echo \"deb https://developer.download.nvidia.com/compute/cuda/repos/ubuntu1604/x86_64 /\" > /etc/apt/sources.list.d/cuda.list && \\\n    echo \"deb https://developer.download.nvidia.com/compute/machine-learning/repos/ubuntu1604/x86_64 /\" > /etc/apt/sources.list.d/nvidia-ml.list\n\nENV CUDA_VERSION 10.0.130\nENV CUDA_PKG_VERSION 10-0=$CUDA_VERSION-1\nENV CUDNN_VERSION 7.3.1.20\nENV TENSORRT_VERSION 5.0.2\nENV NVIDIA_DRIVER_CAPABILITIES compute,utility\nENV NVIDIA_REQUIRE_CUDA \"cuda>=10.0,driver>=410\"\nENV NVIDIA_VISIBLE_DEVICES all\nENV PATH /usr/local/cuda/bin:${PATH}\n\n# TODO(b/110903506): /usr/loca/cuda/lib64/stubs should not be needed in\n# LD_LIBRARY_PATH. The stubs/libcuda.so is not meant to used at runtime. The\n# correct way to pass the path to bfd-ld is to pass\n# -Wl,-rpath-link=/usr/local/cuda/lib64/stubs to all binaries transitively\n# depending on libcuda. Optimally, builds targeting cuda would do that\n# internally.\nENV LD_LIBRARY_PATH /usr/local/cuda/lib64/stubs\n\nLABEL com.nvidia.cudnn.version=\"${CUDNN_VERSION}\"\n\nRUN apt-get update && apt-get install -y --no-install-recommends \\\n        cuda-command-line-tools-$CUDA_PKG_VERSION \\\n        cuda-compat-10-0=410.48-1 \\\n        cuda-cudart-$CUDA_PKG_VERSION \\\n        cuda-libraries-$CUDA_PKG_VERSION \\\n        cuda-libraries-dev-$CUDA_PKG_VERSION \\\n        cuda-minimal-build-$CUDA_PKG_VERSION \\\n        cuda-nvml-dev-$CUDA_PKG_VERSION \\\n        cuda-nvtx-$CUDA_PKG_VERSION \\\n        libcudnn7=$CUDNN_VERSION-1+cuda10.0 \\\n        libcudnn7=$CUDNN_VERSION-1+cuda10.0 \\\n        libcudnn7-dev=$CUDNN_VERSION-1+cuda10.0 \\\n        nvinfer-runtime-trt-repo-ubuntu1604-$TENSORRT_VERSION-ga-cuda10.0 && \\\n    apt-get update && apt-get install -y --no-install-recommends \\\n        libnvinfer5=$TENSORRT_VERSION-1+cuda10.0 \\\n        libnvinfer-dev=$TENSORRT_VERSION-1+cuda10.0 && \\\n    ln -s cuda-10.0 /usr/local/cuda && \\\n    apt-mark hold libcudnn7 && \\\n    rm -rf /var/lib/apt/lists/*\n\n# TODO(b/110903506): Provide a link to the SONAME of libcuda.so.\n# https://github.com/NVIDIA/nvidia-docker/issues/775\nRUN ln -s libcuda.so /usr/local/cuda/lib64/stubs/libcuda.so.1\n\n# Install a newer version of g++:\n# - we need a new libstdc++, because new clang versions do not work with a stock\n#   ubuntu 14.04 libstdc++.\n# - we want to compile with g++-7 to get ahead of LLVM dropping support for\n#   gcc 4.8.\nRUN apt-get update && \\\n    apt-get install --no-install-recommends -y software-properties-common && \\\n    add-apt-repository ppa:ubuntu-toolchain-r/test -y && \\\n    apt-get update && \\\n    apt-get install -y --no-install-recommends g++-7 && \\\n    rm -rf /var/lib/apt/lists/*\n\n# Copy and run the install scripts.\nCOPY install/*.sh /install/\nARG DEBIAN_FRONTEND=noninteractive\nRUN /install/install_bootstrap_deb_packages.sh\nRUN add-apt-repository -y ppa:openjdk-r/ppa && \\\n    add-apt-repository -y ppa:george-edison55/cmake-3.x\nRUN /install/install_deb_packages.sh\nRUN /install/install_pip_packages.sh\nRUN /install/install_golang.sh\n\n"
}