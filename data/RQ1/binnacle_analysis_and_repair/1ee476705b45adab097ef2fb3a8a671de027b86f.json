{
  "startTime": 1674236736461,
  "endTime": 1674236736716,
  "originalSmells": [
    {
      "rule": "yumInstallRmVarCacheYum",
      "position": {
        "lineStart": 11,
        "lineEnd": 11,
        "columnStart": 4,
        "columnEnd": 120
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# Clone from the RHEL 7\nFROM registry.access.redhat.com/rhel7\n\nMAINTAINER FreeIPA Developers <freeipa-devel@lists.fedorahosted.org>\n# Moving groupadd before freeipa installation to ensure uid and guid will be same\nRUN groupadd -g 288 kdcproxy ; useradd -u 288 -g 288 -c 'IPA KDC Proxy User' -d '/var/lib/kdcproxy' -s '/sbin/nologin' kdcproxy\nRUN groupadd -g 289 ipaapi; useradd -u 289 -g 289 -c 'IPA Framework User' -r -d / -s '/sbin/nologin' ipaapi\nRUN groupadd -g 389 dirsrv ; useradd -u 389 -g 389 -c 'user for 389-ds-base' -r -d '/usr/share/dirsrv' -s '/sbin/nologin' dirsrv\n\n# Workaround 1615948\nRUN ln -s /bin/false /usr/sbin/systemd-machine-id-setup\nRUN yum install --disablerepo='*' --enablerepo=rhel-7-server-rpms -y ipa-server ipa-server-dns ipa-server-trust-ad patch && yum clean all && rm -rf /var/cache/yum\n\n# debug: RUN test $( getent passwd | grep -E \"^(dirsrv:x:389|ipaapi:x:289|kdcproxy:x:288|pkiuser:x:17):\" | wc -l ) -eq 4\n\n# Container image which runs systemd\n# debug: RUN test \"$container\" = oci\nENTRYPOINT [ \"/usr/sbin/init\" ]\nSTOPSIGNAL RTMIN+3\n# Workaround 1373833\nCOPY patches/basic-centos-7.patch /root\nRUN patch --verbose -p0 --fuzz=0 < /root/basic-centos-7.patch\n# test-addon: VOLUME [ \"/var/log/journal\" ]\n# test: systemd-container-failed.sh network.service TRAVIS:sys-fs-fuse-connections.mount var-lib-nfs-rpc_pipefs.mount\n\n# Minimize the systemd setup\nRUN find /etc/systemd/system /usr/lib/systemd/system/{basic,multi-user,sysinit}.target.wants -type l | xargs rm -v\nCOPY patches/minimal-centos-7.patch /root/\nRUN patch --verbose -p0 --fuzz=0 < /root/minimal-centos-7.patch\n# debug: RUN ! find /etc/systemd/system /usr/lib/systemd/system/{basic,multi-user,sysinit}.target.wants /etc/tmpfiles.d -type f | grep .\n\nCOPY container-ipa.target /usr/lib/systemd/system/\nRUN systemctl set-default container-ipa.target\nRUN rmdir -v /etc/systemd/system/multi-user.target.wants \\\n\t&& mkdir /etc/systemd/system/container-ipa.target.wants \\\n\t&& ln -s /etc/systemd/system/container-ipa.target.wants /etc/systemd/system/multi-user.target.wants\nRUN rm /var/lib/systemd/random-seed\nRUN echo 0123456789abcdef0000000000000000 > /etc/machine-id && systemd-tmpfiles --remove --create && echo -n > /etc/machine-id\n# debug: RUN ! test -f /var/lib/systemd/random-seed\n# test-addon: VOLUME [ \"/var/log/journal\" ]\n# test: systemd-container-diff.sh list-dependencies-centos-7.out docker-diff-minimal-centos-7.exceptions docker-diff-minimal-centos-7.out\n\n# Prepare for basic ipa-server-install in container\n# Address failing rhel-domainname.service in the ipa-client-install step\nRUN mv /usr/bin/domainname /usr/bin/domainname.orig\nADD hostnamectl-wrapper /usr/bin/domainname\n\nCOPY patches/ipa-rhel-7.patch /root\nRUN set -o pipefail ; patch --verbose -p0 --fuzz=0 < /root/ipa-rhel-7.patch | tee /dev/stderr | sed -n 's/^patching file //;T;/\\.py$/p' | xargs python -m compileall\n# test-addon: VOLUME [ \"/var/log/journal\" ]\n## # test: systemd-container-ipa-server-install.sh\n\n# Move configuration and data to data volume\nCOPY patches/ipa-data-centos-7.patch /root\nRUN set -o pipefail ; patch --verbose -p0 --fuzz=0 < /root/ipa-data-centos-7.patch | tee /dev/stderr | sed -n 's/^patching file //;T;/\\.py$/p' | xargs python -m compileall\n\nRUN mv /usr/sbin/ipa-join /usr/sbin/ipa-join.orig\nCOPY ipa-join /usr/sbin/ipa-join\n\nCOPY utils/prepare-volume-template utils/populate-volume-from-template utils/extract-rpm-upgrade-scriptlets /usr/local/bin/\nCOPY volume-data-list volume-tmp-list volume-data-autoupdate /etc/\nRUN /usr/local/bin/prepare-volume-template /etc/volume-data-list /data\nRUN /usr/local/bin/prepare-volume-template /etc/volume-tmp-list /tmp\nRUN /usr/local/bin/extract-rpm-upgrade-scriptlets\n\nRUN echo 2.0 > /etc/volume-version\nVOLUME [ \"/tmp\", \"/run\", \"/data\", \"/var/log/journal\" ]\n\nCOPY init-data-minimal /usr/local/sbin/init\nENTRYPOINT [ \"/usr/local/sbin/init\" ]\n# test: systemd-container-ipa-server-install-data.sh docker-diff-minimal-centos-7.out\n\n# Configure master/replica upon the first invocation\nCOPY init-data /usr/local/sbin/init\nCOPY ipa-server-configure-first exit-with-status ipa-volume-upgrade-* /usr/sbin/\nCOPY ipa-server-configure-first.service ipa-server-upgrade.service ipa-server-update-self-ip-address.service /usr/lib/systemd/system/\nRUN ln -sv /usr/lib/systemd/system/ipa-server-configure-first.service /data-template/etc/systemd/system/container-ipa.target.wants/ipa-server-configure-first.service\nCOPY exit-via-chroot.conf /usr/lib/systemd/system/systemd-poweroff.service.d/\n\nEXPOSE 53/udp 53 80 443 389 636 88 464 88/udp 464/udp 123/udp 7389 9443 9444 9445\n\nRUN uuidgen > /data-template/build-id\n\n# Invocation:\n# docker run -ti -v /sys/fs/cgroup:/sys/fs/cgroup:ro --tmpfs /run --tmpfs /tmp -v /opt/ipa-data:/data:Z -h ipa.example.test ${NAME} [ options ]\n\n# Atomic specific bits\nCOPY install.sh uninstall.sh /bin/\nCOPY atomic-install-help /usr/share/ipa/\n\n# For atomic, we run INSTALL --privileged but install.sh will start another unprivileged container.\n# We do it this way to be able to set hostname for the unprivileged container.\nLABEL install 'docker run -ti --rm --privileged -v /:/host -e HOST=/host -e DATADIR=/var/lib/${NAME} -e NAME=${NAME} -e IMAGE=${IMAGE} ${IMAGE} /bin/install.sh'\nLABEL run 'docker run ${RUN_OPTS} --name ${NAME} -v /var/lib/${NAME}:/data:Z -v /sys/fs/cgroup:/sys/fs/cgroup:ro --tmpfs /run --tmpfs /tmp -v /dev/urandom:/dev/random:ro ${IMAGE}'\nLABEL RUN_OPTS_FILE '/var/lib/${NAME}/docker-run-opts'\nLABEL stop 'docker stop ${NAME}'\nLABEL uninstall 'docker run --rm --privileged -v /:/host -e HOST=/host -e DATADIR=/var/lib/${NAME} ${IMAGE} /bin/uninstall.sh'\n\nLABEL summary=\"Identity Management (IdM) for Linux provides centralized \\\nmanagement of identities and policies for Atomic Host\"\nLABEL description=\"IPA is an integrated solution to provide centrally managed \\\nIdentity (users, hosts, services), Authentication (SSO, 2FA), and \\\nAuthorization (host access control, SELinux user roles, services). The \\\nsolution provides features for further integration with Linux based clients \\\n(SUDO, automount) and integration with Active Directory based infrastructures \\\n(Trusts).\"\nLABEL io.k8s.display-name=\"Identity Management (IdM) for Linux\"\nLABEL io.k8s.description=\"IPA is an integrated solution to provide centrally \\\nmanaged Identity (users, hosts, services), Authentication (SSO, 2FA), and \\\nAuthorization (host access control, SELinux user roles, services). The \\\nsolution provides features for further integration with Linux based clients \\\n(SUDO, automount) and integration with Active Directory based infrastructures \\\n(Trusts).\"\n"
}