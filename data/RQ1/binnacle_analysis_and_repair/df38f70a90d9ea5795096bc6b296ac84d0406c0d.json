{
  "startTime": 1674248822401,
  "endTime": 1674248822571,
  "originalSmells": [
    {
      "rule": "wgetUseHttpsUrl",
      "position": {
        "lineStart": 25,
        "lineEnd": 25,
        "columnStart": 4,
        "columnEnd": 90
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 27,
        "lineEnd": 27,
        "columnStart": 4,
        "columnEnd": 38
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# Tag: nvidia/cuda:10.0-cudnn7-devel-ubuntu16.04\n# Label: com.nvidia.cuda.version: 10.0.130\n# Label: com.nvidia.cudnn.version: 7.3.1.20\n# Ubuntu 16.04.5\nFROM nvidia/cuda@sha256:362e4e25aa46a18dfa834360140e91b61cdb0a3a2796c8e09dadb268b9de3f6b\n\nARG PYTHON_VERSION=3.5\n\nADD scripts /tmp/scripts\nRUN /tmp/scripts/install_ubuntu.sh -p ${PYTHON_VERSION} && /tmp/scripts/install_deps.sh && rm -rf /tmp/scripts\n\nWORKDIR /root\n\n# Allow configure to pick up GDK and CuDNN where it expects it.\n# (Note: $CUDNN_VERSION is defined by NVidia's base image)\nRUN _CUDNN_VERSION=$(echo $CUDNN_VERSION | cut -d. -f1-2) && \\\n    mkdir -p /usr/local/cudnn-$_CUDNN_VERSION/cuda/include && \\\n    ln -s /usr/include/cudnn.h /usr/local/cudnn-$_CUDNN_VERSION/cuda/include/cudnn.h && \\\n    mkdir -p /usr/local/cudnn-$_CUDNN_VERSION/cuda/lib64 && \\\n    ln -s /etc/alternatives/libcudnn_so /usr/local/cudnn-$_CUDNN_VERSION/cuda/lib64/libcudnn.so && \\\n    ln -s /usr/local/cudnn{-$_CUDNN_VERSION,}\n\n# Build and Install LLVM\nARG LLVM_VERSION=6.0.1\nRUN cd /tmp && \\\n    wget --no-verbose https://releases.llvm.org/$LLVM_VERSION/llvm-$LLVM_VERSION.src.tar.xz && \\\n    xz -d llvm-$LLVM_VERSION.src.tar.xz && \\\n    tar xvf llvm-$LLVM_VERSION.src.tar && \\\n    cd llvm-$LLVM_VERSION.src && \\\n    mkdir -p build && \\\n    cd build && \\\n    cmake .. -DCMAKE_BUILD_TYPE=Release && \\\n    cmake --build . -- -j$(nproc) && \\\n    cmake -DCMAKE_INSTALL_PREFIX=/usr/local/llvm-$LLVM_VERSION -DBUILD_TYPE=Release -P cmake_install.cmake && \\\n    cd /tmp && \\\n    rm -rf llvm* && rm llvm-$LLVM_VERSION.src.tar\n\nENV LD_LIBRARY_PATH /usr/local/openblas/lib:$LD_LIBRARY_PATH\n\nARG BUILD_USER=onnxruntimedev\nARG BUILD_UID=1000\nWORKDIR /home/$BUILD_USER\nRUN adduser --gecos 'onnxruntime Build User' --disabled-password $BUILD_USER --uid $BUILD_UID\nUSER $BUILD_USER\n\n"
}