{
  "startTime": 1674246678654,
  "endTime": 1674246678916,
  "originalSmells": [
    {
      "rule": "apkAddUseNoCache",
      "position": {
        "lineStart": 10,
        "lineEnd": 10,
        "columnStart": 4,
        "columnEnd": 46
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM alpine@sha256:b3dbf31b77fd99d9c08f780ce6f5282aba076d70a513a8be859d8d3a4d0c92b8\n\nENV RUBY_PACKAGES ruby ruby-io-console ruby-irb ruby-rake ruby-bundler ruby-bigdecimal ruby-json\nENV RUBY_DEPS libstdc++ tzdata bash ca-certificates openssl sqlite sqlite-dev\n\nRUN addgroup -g 1000 ionosphere \\\n  && adduser -u 1000 -D -G ionosphere ionosphere\n\nRUN apk update && \\\n    apk upgrade && \\\n    apk --update --no-cache add $RUBY_PACKAGES $RUBY_DEPS && \\\n    echo 'gem: --no-document' > /etc/gemrc\n\nRUN mkdir /app && \\\n    mkdir -p /data/ionosphere\n\nCOPY Gemfile /app\nCOPY Gemfile.lock /app\nWORKDIR /app\n\n# install packages needed for building compiled gems; install gems; then delete build dependencies to keep Docker image small\nENV BUILD_PACKAGES sudo build-base ruby-dev libc-dev linux-headers openssl-dev git\nRUN apk --update add --virtual build_deps $BUILD_PACKAGES && \\\n    bundle install && \\\n    apk del build_deps && \\\n    rm -rf /var/cache/apk/*\n\nCOPY . /app\nRUN chown -R ionosphere:ionosphere /app\nUSER ionosphere\n\nCMD ./docker_entrypoint.sh\n"
}