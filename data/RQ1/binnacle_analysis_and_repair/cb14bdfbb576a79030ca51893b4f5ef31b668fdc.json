{
  "startTime": 1674242012025,
  "endTime": 1674242012360,
  "originalSmells": [
    {
      "rule": "wgetUseHttpsUrl",
      "position": {
        "lineStart": 62,
        "lineEnd": 62,
        "columnStart": 4,
        "columnEnd": 59
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 83,
        "lineEnd": 83,
        "columnStart": 4,
        "columnEnd": 199
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 23,
        "lineEnd": 23,
        "columnStart": 4,
        "columnEnd": 36
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 48,
        "lineEnd": 48,
        "columnStart": 4,
        "columnEnd": 37
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 63,
        "lineEnd": 63,
        "columnStart": 4,
        "columnEnd": 34
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 79,
        "lineEnd": 79,
        "columnStart": 4,
        "columnEnd": 40
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 14,
        "lineEnd": 14,
        "columnStart": 4,
        "columnEnd": 108
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 14,
        "lineEnd": 14,
        "columnStart": 4,
        "columnEnd": 108
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 14,
        "lineEnd": 14,
        "columnStart": 4,
        "columnEnd": 108
      }
    }
  ],
  "repairedSmells": [
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 14,
        "lineEnd": 14,
        "columnStart": 4,
        "columnEnd": 132
      }
    }
  ],
  "repairedDockerfile": "# Copyright (c) Microsoft. All rights reserved.\n# Licensed under the MIT license. See LICENSE file in the project root for full license information.\n\n# To run locally (example)\n# docker build -t rpiiotbuild:latest --build-arg \"CLIENTLIBRARY_REPO=Azure/azure-iot-sdk-c\" --build-arg \"CLIENTLIBRARY_COMMIT_SHA=raspi-pipeline\" . --network=host --file ./Dockerfile\n\n\n# Start with the latest version of the Debian Docker container\nFROM debian:stretch\n\n# Fetch and install all outstanding updates\nRUN apt update && apt -y upgrade\n\n# Install wget git cmake xz-utils\nRUN apt install --no-install-recommends --fix-missing -y wget git build-essential cmake xz-utils ca-certificates pkg-config uuid-dev && rm -rf /var/lib/apt/lists/*;\n\nENV WORK_ROOT=/toolchain\nWORKDIR ${WORK_ROOT}\n\n\n########## LINARO INSTALL ##########\nENV LINARO_SOURCE=gcc-linaro-7.4.1-2019.02-x86_64_arm-linux-gnueabihf\nRUN wget https://releases.linaro.org/components/toolchain/binaries/7.4-2019.02/arm-linux-gnueabihf/${LINARO_SOURCE}.tar.xz\nRUN tar -xvf ${LINARO_SOURCE}.tar.xz && rm ${LINARO_SOURCE}.tar.xz\n\n# Set up environment variables for builds\n\nENV TOOLCHAIN_ROOT=${WORK_ROOT}/${LINARO_SOURCE}\nENV TOOLCHAIN_SYSROOT=${TOOLCHAIN_ROOT}\nENV TOOLCHAIN_EXES=${TOOLCHAIN_SYSROOT}/bin\nENV TOOLCHAIN_NAME=arm-linux-gnueabihf\nENV TOOLCHAIN_PREFIX=${TOOLCHAIN_SYSROOT}/usr\n\nENV AR=${TOOLCHAIN_EXES}/${TOOLCHAIN_NAME}-ar\nENV AS=${TOOLCHAIN_EXES}/${TOOLCHAIN_NAME}-as\nENV CC=${TOOLCHAIN_EXES}/${TOOLCHAIN_NAME}-gcc\nENV LD=${TOOLCHAIN_EXES}/${TOOLCHAIN_NAME}-ld\nENV NM=${TOOLCHAIN_EXES}/${TOOLCHAIN_NAME}-nm\n\nENV LDFLAGS=\"-L${TOOLCHAIN_SYSROOT}/usr/lib\"\nENV LIBS=\"-lssl -lcrypto -ldl -lpthread\"\nENV STAGING_DIR=${TOOLCHAIN_SYSROOT}\n\n\n########## OPENSSL INSTALL ##########\n# Download OpenSSL source and expand it\nENV OPENSSL_SOURCE=openssl-1.1.0j\nRUN wget https://www.openssl.org/source/${OPENSSL_SOURCE}.tar.gz\nRUN tar -xvf ${OPENSSL_SOURCE}.tar.gz && rm ${OPENSSL_SOURCE}.tar.gz\n\n# Build OpenSSL\n\nWORKDIR /${WORK_ROOT}/${OPENSSL_SOURCE}\nRUN ./Configure linux-generic32 shared --prefix=${TOOLCHAIN_PREFIX} --openssldir=${TOOLCHAIN_PREFIX}\nRUN make\nRUN make install\nWORKDIR /${WORK_ROOT}\n\n\n########## CURL INSTALL ##########\n# Download cURL source and expand it\nENV CURL_SOURCE=curl-7.64.1\nRUN wget https://curl.haxx.se/download/${CURL_SOURCE}.tar.gz\nRUN tar -xvf ${CURL_SOURCE}.tar.gz && rm ${CURL_SOURCE}.tar.gz\n\n# Build cURL\n# we need to set the path for openssl with --with-ssl=...\nWORKDIR /${WORK_ROOT}/${CURL_SOURCE}\nRUN ./configure --with-sysroot=${TOOLCHAIN_SYSROOT} --prefix=${TOOLCHAIN_PREFIX} --target=${TOOLCHAIN_NAME} --with-ssl=${TOOLCHAIN_PREFIX} --with-zlib --host=${TOOLCHAIN_NAME} --build=x86_64-linux-gnu\n\nRUN make\nRUN make install\nWORKDIR /${WORK_ROOT}\n\n\n########## UTIL LINUX INSTALL ##########\n# Download the Linux utilities for libuuid and expand it\nENV UTIL_LINUX_SOURCE=util-linux-2.33-rc2\nRUN wget https://mirrors.edge.kernel.org/pub/linux/utils/util-linux/v2.33/${UTIL_LINUX_SOURCE}.tar.gz\nRUN tar -xvf ${UTIL_LINUX_SOURCE}.tar.gz && rm ${UTIL_LINUX_SOURCE}.tar.gz\n\n# Build uuid\nWORKDIR /${WORK_ROOT}/${UTIL_LINUX_SOURCE}\nRUN ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --prefix=${TOOLCHAIN_PREFIX} --with-sysroot=${TOOLCHAIN_SYSROOT} --target=${TOOLCHAIN_NAME} --host=${TOOLCHAIN_NAME} --disable-all-programs --disable-bash-completion --enable-libuuid\nRUN make\nRUN make install\nWORKDIR /${WORK_ROOT}\n\n\n########## CLIENT LIBRARY INSTALL ##########\n# clone azure \nARG CLIENTLIBRARY_REPO\nWORKDIR /sdk\nRUN git clone https://github.com/$CLIENTLIBRARY_REPO .\nRUN git submodule update --init\n\nRUN mkdir cmake\nWORKDIR /sdk/cmake\nRUN ls -al\n\n# Create a cmake toolchain file on the fly\nRUN echo \"SET(CMAKE_SYSTEM_NAME Linux)     # this one is important\" > toolchain.cmake\nRUN echo \"SET(CMAKE_SYSTEM_VERSION 1)      # this one not so much\" >> toolchain.cmake\n\nRUN echo \"SET(CMAKE_C_COMPILER ${TOOLCHAIN_EXES}/${TOOLCHAIN_NAME}-gcc)\" >> toolchain.cmake\nRUN echo \"SET(CMAKE_CXX_COMPILER ${TOOLCHAIN_EXES}/${TOOLCHAIN_NAME}-g++)\" >> toolchain.cmake\nRUN echo \"SET(CMAKE_FIND_ROOT_PATH ${TOOLCHAIN_SYSROOT})\" >> toolchain.cmake\nRUN echo \"SET(CMAKE_FIND_ROOT_PATH_MODE_PROGRAM NEVER)\" >> toolchain.cmake\nRUN echo \"SET(CMAKE_FIND_ROOT_PATH_MODE_LIBRARY ONLY)\" >> toolchain.cmake\nRUN echo \"SET(CMAKE_FIND_ROOT_PATH_MODE_INCLUDE ONLY)\" >> toolchain.cmake\nRUN ls -al\n\n# Build the SDK. This will use the OpenSSL, cURL and uuid binaries that we built before\nRUN cmake -DCMAKE_TOOLCHAIN_FILE=toolchain.cmake -Duse_prov_client:BOOL=OFF -DCMAKE_INSTALL_PREFIX=${TOOLCHAIN_PREFIX} -Drun_e2e_tests:BOOL=ON -Drun_unittests=:BOOL=ON ..\nRUN make -j 2\nRUN ls -al\n\n########## PHASE 2: COMPILE BRANCH SPECIFIC INFORMATION ##########\nARG CLIENTLIBRARY_COMMIT_SHA\nARG CLIENTLIBRARY_COMMIT_NAME\nRUN echo \"$CLIENTLIBRARY_COMMIT_NAME\"\nRUN echo \"$CLIENTLIBRARY_COMMIT_SHA\"\n\nWORKDIR /sdk\nRUN git pull\nRUN git checkout $CLIENTLIBRARY_COMMIT_SHA\n\nCOPY ./patchfile /\n# our base image might have some files checked out.  revert these.\nRUN git reset HEAD && git checkout && git clean  -df\nRUN if [-s /patchfile ]; then git apply --index /patchfile; fi\n\nRUN git submodule update --init\n\nWORKDIR /sdk/cmake\nRUN cmake .\nRUN make -j 2\n\n# Finally a sanity check to make sure the files are there\nRUN ls -al ${TOOLCHAIN_PREFIX}/lib\nRUN ls -al ${TOOLCHAIN_PREFIX}/include\n\nRUN ls -la ./\n\n# Go to project root\nWORKDIR /\n"
}