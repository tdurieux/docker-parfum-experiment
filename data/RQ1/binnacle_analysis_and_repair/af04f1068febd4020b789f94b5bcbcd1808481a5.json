{
  "startTime": 1674234037241,
  "endTime": 1674234037981,
  "originalSmells": [
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 157,
        "lineEnd": 157,
        "columnStart": 4,
        "columnEnd": 50
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 53,
        "lineEnd": 53,
        "columnStart": 4,
        "columnEnd": 15
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 109,
        "lineEnd": 109,
        "columnStart": 4,
        "columnEnd": 266
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 125,
        "lineEnd": 125,
        "columnStart": 4,
        "columnEnd": 110
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 147,
        "lineEnd": 147,
        "columnStart": 4,
        "columnEnd": 26
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 46,
        "lineEnd": 46,
        "columnStart": 4,
        "columnEnd": 44
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 61,
        "lineEnd": 61,
        "columnStart": 4,
        "columnEnd": 53
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 89,
        "lineEnd": 93,
        "columnStart": 4,
        "columnEnd": 42
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 160,
        "lineEnd": 160,
        "columnStart": 4,
        "columnEnd": 54
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 46,
        "lineEnd": 46,
        "columnStart": 4,
        "columnEnd": 44
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 61,
        "lineEnd": 61,
        "columnStart": 4,
        "columnEnd": 53
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 89,
        "lineEnd": 93,
        "columnStart": 4,
        "columnEnd": 42
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 160,
        "lineEnd": 160,
        "columnStart": 4,
        "columnEnd": 54
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 46,
        "lineEnd": 46,
        "columnStart": 4,
        "columnEnd": 44
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 61,
        "lineEnd": 61,
        "columnStart": 4,
        "columnEnd": 53
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 89,
        "lineEnd": 93,
        "columnStart": 4,
        "columnEnd": 42
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 160,
        "lineEnd": 160,
        "columnStart": 4,
        "columnEnd": 54
      }
    }
  ],
  "repairedSmells": [
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 46,
        "lineEnd": 46,
        "columnStart": 4,
        "columnEnd": 68
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 61,
        "lineEnd": 61,
        "columnStart": 4,
        "columnEnd": 77
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 89,
        "lineEnd": 93,
        "columnStart": 4,
        "columnEnd": 42
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 160,
        "lineEnd": 160,
        "columnStart": 4,
        "columnEnd": 78
      }
    }
  ],
  "repairedDockerfile": "# This Dockerfile aims to make building Hubble v2 packages easier.\n# To build an image: 1. copy pkg/scripts/pyinstaller-requirements.txt to directory with this Dockerfile\n#                    2. docker build -t <image_name> .\n# The resulting image is ready to run the pyinstaller on container start and drop hubble<version>-coreos.tar.gz\n# in the /data directory. Mount /data volume into a directory on the host to access the package.\n# To run the container:  docker run -it --rm -v `pwd`:/data <image_name>\n# Requires docker 17.05 or higher\n\nARG OSQUERY_BUILD_ENV=remote\n\n#--------------- TEMP CONTAINER FOR LOCAL OSQUERY -------------------------\nFROM alpine as osquery_local\nONBUILD COPY osquery /osquery\nONBUILD RUN echo \"Copying osquery from local folder\"\n\n\n\n#--------------- TEMP CONTAINER FOR GIT OSQUERY ----------------------------\nFROM alpine/git as osquery_remote\n#to osquery pin to a different version change the following envirnment variable\nENV OSQUERY_SRC_VERSION=3.3.2\nENV OSQUERY_GIT_URL=https://github.com/facebook/osquery.git\nONBUILD RUN cd / \\\n && git clone \"$OSQUERY_GIT_URL\" \\\n && cd osquery/ \\\n && git checkout \"$OSQUERY_SRC_VERSION\" \\\n && echo \"Fetching osquery from git\"\n\n\n#--------------- TEMP CONTAINER FOR OSQUERY ( BASED UPON ARGUMENT )  ------------\nFROM osquery_\"$OSQUERY_BUILD_ENV\" as osquery\n\n\n#--------------- ACTUAL DOCKERFILE FOR BUILD CREATION  --------------------------\nFROM debian:9\n\nRUN apt-get update     \\\n && apt-get -y upgrade\n\n#paths that hubble or hubble parts need in the package\nRUN mkdir -p /etc/hubble/hubble.d /opt/hubble /opt/osquery /var/log/hubble_osquery/backuplogs\n\n#patchelf build start\n#must precede osquery as at the moment, osquery won't build without patchelf\nENV PATCHELF_GIT_URL=https://github.com/NixOS/patchelf.git\nENV PATCHELF_TEMP=/tmp/patchelf\nRUN apt-get -y --no-install-recommends install autoconf git make g++ && rm -rf /var/lib/apt/lists/*;\nRUN mkdir -p \"$PATCHELF_TEMP\" \\\n && cd \"$PATCHELF_TEMP\" \\\n && git clone \"$PATCHELF_GIT_URL\" \\\n && cd patchelf \\\n && sed -i 's/serial-tests/parallel-tests/' configure.ac \\\n && ./bootstrap.sh \\\n && ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" \\\n && make \\\n && make install\n\n#osquery build start\n#osquery should be built first since requirements for other packages can interfere with osquery dependencies\n#to build, osquery scripts want sudo and a user to sudo with.\nENV OSQUERY_BUILD_USER=osquerybuilder\nRUN apt-get -y --no-install-recommends install git make python ruby sudo curl && rm -rf /var/lib/apt/lists/*;\nRUN useradd --shell /bin/bash --create-home --user-group --groups sudo \"$OSQUERY_BUILD_USER\" \\\n && sed -i 's/^%sudo.*/%sudo\\ ALL=\\(ALL\\)\\ NOPASSWD:\\ ALL/' /etc/sudoers\nCOPY --from=osquery /osquery /home/\"$OSQUERY_BUILD_USER\"/osquery\nRUN mkdir -p /usr/local/osquery/ \\\n && chown \"$OSQUERY_BUILD_USER\":\"$OSQUERY_BUILD_USER\" -R /usr/local/osquery/ \\\n && chown \"$OSQUERY_BUILD_USER\":\"$OSQUERY_BUILD_USER\" -R /home/\"$OSQUERY_BUILD_USER\"/osquery\nUSER $OSQUERY_BUILD_USER\nENV SKIP_TESTS=1\nRUN cd /home/\"$OSQUERY_BUILD_USER\"/osquery \\\n && make sysprep \\\n#have the default augeas lenses directory point to /opt/osquery/lenses, must be done after sysprep\n && sed -i '/augeas_lenses,/,/\\\"Directory\\ that\\ contains\\ augeas\\ lenses\\ files\\\"\\\\)\\;/ s/\\/usr\\/share\\/osquery\\/lenses/\\/opt\\/osquery\\/lenses/' osquery/tables/system/posix/augeas.cpp \\\n && make deps \\\n && make \\\n && make strip\nUSER root\nRUN cp -pr /home/\"$OSQUERY_BUILD_USER\"/osquery/build/linux/osquery/osqueryi /opt/osquery \\\n && cp -pr /home/\"$OSQUERY_BUILD_USER\"/osquery/build/linux/osquery/osqueryd /opt/osquery/hubble_osqueryd \\\n && chown -R root. /opt/osquery \\\n && chmod -R 500 /opt/osquery/* \\\n#put augeas lenses into the default directory that we changed earlier\n && mkdir -p /opt/osquery/lenses \\\n && cp -r /usr/local/osquery/share/augeas/lenses/dist/* /opt/osquery/lenses \\\n && chmod -R 400 /opt/osquery/lenses/*\nRUN ls -lahR /opt/osquery/ && /opt/osquery/osqueryi --version\n\n#install packages that should be needed for ligbit2 compilation and successful pyinstaller run\nRUN apt-get -y --no-install-recommends install \\\n               python-dev libffi-dev libssl-dev libyaml-dev libssh2-1 libssh2-1-dev autoconf automake libtool \\\n               libxml2-dev libxslt1-dev python-cffi \\\n               zlib1g-dev cmake python-setuptools \\\n               gcc wget python-pip openssl \\\n && apt-get clean && rm -rf /var/lib/apt/lists/*;\n\n#libcurl install start\n#install libcurl to avoid depending on host version\n#requires autoconf libtool libssh2-devel zlib-devel autoconf\nENV LIBCURL_SRC_URL=https://github.com/curl/curl.git\nENV LIBCURL_SRC_VERSION=curl-7_64_1\nENV LIBCURL_TEMP=/tmp/libcurl\nENV PATH=/opt/hubble/bin/:/opt/hubble/include:/opt/hubble/lib:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin\nRUN mkdir -p \"$LIBCURL_TEMP\" \\\n && cd \"$LIBCURL_TEMP\" \\\n && git clone \"$LIBCURL_SRC_URL\" \\\n && cd curl \\\n && git checkout \"$LIBCURL_SRC_VERSION\" \\\n && ./buildconf \\\n && ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --prefix=/opt/hubble --disable-ldap --without-nss --disable-manual --disable-gopher --disable-smtp --disable-smb --disable-imap --disable-pop3 --disable-tftp --disable-telnet --disable-dict --disable-ldaps --disable-ldap --disable-rtsp --with-libssh2 \\\n && make \\\n && make install\n\n#git install start\n#install git so that git package won't be a package dependency\n#requires make git libcurl-devel autoconf zlib-devel gcc\nENV GIT_SRC_URL=https://github.com/git/git.git\nENV GIT_SRC_VERSION=v2.21.0\nENV GITTEMP=/tmp/gittemp\nRUN mkdir -p \"$GITTEMP\" \\\n && cd \"$GITTEMP\" \\\n && git clone \"$GIT_SRC_URL\" \\\n && cd git \\\n && git checkout \"$GIT_SRC_VERSION\" \\\n && make configure \\\n && ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --prefix=/opt/hubble --with-tcltk=no --with-expat=no --with-python=no --with-curl=/opt/hubble \\\n && echo \"NO_TCLTK=YesPlease\" >> config.mak.autogen \\\n && echo \"NO_PERL=YesPlease\" >> config.mak.autogen \\\n && sed -i '0,/^NO_GETTEXT/s/^NO_GETTEXT.*/NO_GETTEXT=YesPlease/' config.mak.autogen \\\n && make \\\n && make install\n\n#clean up of /opt/hubble\nRUN rm /opt/hubble/bin/curl* \\\n && rm -rf /opt/hubble/include /opt/hubble/share\n\n#libgit2 install start\n#must precede pyinstaller requirements\nENV LIBGIT2_SRC_URL=https://github.com/libgit2/libgit2/archive/v0.26.5.tar.gz\n#it turns out github provided release files can change. so even though the code hopefully hasn't changed, the hash has.\nENV LIBGIT2_SRC_SHA256=52e28a5166564bc4365a2e4112f5e5c6e334708dbf13596241b2fd34efc1b0a9\nENV LIBGIT2_SRC_VERSION=0.26.5\nENV LIBGIT2TEMP=/tmp/libgit2temp\nRUN mkdir -p \"$LIBGIT2TEMP\" \\\n && cd \"$LIBGIT2TEMP\" \\\n && wget -q \"$LIBGIT2_SRC_URL\" -O libgit2.tar.gz \\\n && echo \"$LIBGIT2_SRC_SHA256  libgit2.tar.gz\" | sha256sum -c - \\\n && tar xzf libgit2.tar.gz \\\n && cd libgit2-\"$LIBGIT2_SRC_VERSION\"/ \\\n && export LIBGIT2=/usr/local/ \\\n && cmake . -DCMAKE_INSTALL_PREFIX=$LIBGIT2 \\\n && make \\\n && make install && rm libgit2.tar.gz\n\n#pyinstaller requirements start\n#must be preceded by libgit2 install\nCOPY pyinstaller-requirements.txt /\nRUN pip -v --no-cache-dir install -r pyinstaller-requirements.txt\n\n#deb package making requirements start\nRUN apt-get install --no-install-recommends -y ruby ruby-dev rubygems gcc make \\\n && gem install --no-ri --no-rdoc fpm && rm -rf /var/lib/apt/lists/*;\n\n#pyinstaller start\n#commands specified for ENTRYPOINT and CMD are executed when the container is run, not when the image is built\n#use the following variables to choose the version of hubble\nENV HUBBLE_CHECKOUT=v3.0.1\nENV HUBBLE_GIT_URL=https://github.com/hubblestack/hubble.git\nENV HUBBLE_VERSION=3.0.1\nENV HUBBLE_ITERATION=1\nENV HUBBLE_URL=https://github.com/hubblestack/hubble\nENV HUBBLE_SRC_PATH=/hubble_src\nENV _HOOK_DIR=\"./pkg/\"\nENV _BINARY_LOG_LEVEL=\"INFO\"\nENV _INCLUDE_PATH=\"\"\nENV LD_LIBRARY_PATH=/opt/hubble/lib:/lib:/lib64:/usr/lib:/usr/lib64:/usr/local/lib:/usr/local/lib64\nRUN git clone \"$HUBBLE_GIT_URL\" \"$HUBBLE_SRC_PATH\" \\\n && cd \"$HUBBLE_SRC_PATH\" \\\n && git checkout \"$HUBBLE_CHECKOUT\" \\\n && cp -rf \"$HUBBLE_SRC_PATH\" /hubble_build \\\n && sed -i \"s/BRANCH_NOT_SET/${HUBBLE_CHECKOUT}/g\" /hubble_build/hubblestack/__init__.py \\\n && sed -i \"s/COMMIT_NOT_SET/`git describe`/g\" /hubble_build/hubblestack/__init__.py\nRUN mkdir /data\nVOLUME /data\nWORKDIR /hubble_build\nENTRYPOINT [ \"/bin/bash\", \"-o\", \"xtrace\", \"-c\" ]\nCMD [ \"if [ -f /data/hubble_buildinfo ] ; then echo \\\"\\\" >> /hubble_build/hubblestack/__init__.py ; cat /data/hubble_buildinfo >> /hubble_build/hubblestack/__init__.py; fi \\\n    && pyinstaller --onedir --noconfirm --log-level ${_BINARY_LOG_LEVEL} --additional-hooks-dir=${_HOOK_DIR} --runtime-hook=pkg/pyinstaller-runtimehooks/pathopthubble.py hubble.py \\\n    && mkdir -p /var/log/hubble_osquery/backuplogs \\\n# hubble default configuration file\n    && cp -rf /hubble_build/conf/hubble /etc/hubble/ \\\n    && cp -rf /hubble_build/conf/hubble-profile.sh /etc/profile.d/ \\\n    && cp -pr /hubble_build/dist/hubble /opt/hubble/hubble-libs \\\n    && ln -s /opt/hubble/hubble-libs/hubble /opt/hubble/hubble \\\n    # make sure rpm shared libs are taken out to avoid mismatch between rpm database and shared libs that pyinstaller includes\n    && rm -rf /opt/hubble/hubble-libs/librpm* \\\n    # hack to get libssh2 since pyinstaller 3.2 does not do it\n    && cp /usr/lib/x86_64-linux-gnu/libssh2.so.1 /opt/hubble/hubble-libs \\\n#debian pkg start\n    && tar -cPvzf /data/hubblestack-${HUBBLE_VERSION}.tar.gz /etc/hubble /opt/hubble /opt/osquery /etc/profile.d/hubble-profile.sh /var/log/hubble_osquery/backuplogs \\\n    && mkdir -p /hubble_build/debbuild/hubblestack-${HUBBLE_VERSION} \\\n    && tar -xzvf /data/hubblestack-${HUBBLE_VERSION}.tar.gz -C /hubble_build/debbuild/hubblestack-${HUBBLE_VERSION} \\\n    && mkdir -p /hubble_build/debbuild/hubblestack-${HUBBLE_VERSION}/etc/init.d \\\n    && cp /hubble_build/pkg/hubble /hubble_build/debbuild/hubblestack-${HUBBLE_VERSION}/etc/init.d/ \\\n    && mkdir -p /hubble_build/debbuild/hubblestack-${HUBBLE_VERSION}/usr/lib/systemd/system \\\n    && cp /hubble_build/pkg/hubble.service /hubble_build/debbuild/hubblestack-${HUBBLE_VERSION}/usr/lib/systemd/system/ \\\n    && cp -f /hubble_build/conf/hubble /hubble_build/debbuild/hubblestack-${HUBBLE_VERSION}/etc/hubble/ \\\n#during container run, if a configuration file exists in a /data copy it over the existing one so it would be\n#possile to optionally include a custom one with the package\n    && if [ -f /data/hubble ] ; then cp /data/hubble /hubble_build/debbuild/hubblestack-${HUBBLE_VERSION}/etc/hubble/ ; fi \\\n#also bring in anything from a /data/opt/ directory so we can bundle other executables if needed\n    && if [ -d /data/opt ] ; then cp -r /data/opt/* /hubble_build/debbuild/hubblestack-${HUBBLE_VERSION}/opt/ ; fi \\\n    && cd /hubble_build/debbuild/hubblestack-${HUBBLE_VERSION} \\\n    && mkdir -p usr/bin \\\n#symlink to have hubble binary in path\n    && ln -s /opt/hubble/hubble usr/bin/hubble \\\n#fpm start\n    && fpm -s dir -t deb \\\n       -n hubblestack \\\n       -v ${HUBBLE_VERSION} \\\n       --iteration ${HUBBLE_ITERATION} \\\n       --url ${HUBBLE_URL} \\\n       --deb-no-default-config-files \\\n       --after-install /hubble_build/conf/afterinstall-systemd.sh \\\n       --after-upgrade /hubble_build/conf/afterupgrade.sh \\\n       --before-remove /hubble_build/conf/beforeremove.sh \\\n       etc/hubble etc/init.d opt usr /var/log/hubble_osquery/backuplogs \\\n    && cp hubblestack_${HUBBLE_VERSION}-${HUBBLE_ITERATION}_amd64.deb /data/hubblestack-${HUBBLE_VERSION}-${HUBBLE_ITERATION}.deb9.amd64.deb \\\n    && openssl dgst -sha256 /data/hubblestack-${HUBBLE_VERSION}-${HUBBLE_ITERATION}.deb9.amd64.deb \\\n                          > /data/hubblestack-${HUBBLE_VERSION}-${HUBBLE_ITERATION}.deb9.amd64.deb.sha256\" ]\n"
}