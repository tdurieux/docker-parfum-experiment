{
  "startTime": 1674252909971,
  "endTime": 1674252910138,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 34,
        "lineEnd": 34,
        "columnStart": 5,
        "columnEnd": 63
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 48,
        "lineEnd": 48,
        "columnStart": 4,
        "columnEnd": 70
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 54,
        "lineEnd": 54,
        "columnStart": 4,
        "columnEnd": 66
      }
    },
    {
      "rule": "curlUseHttpsUrl",
      "position": {
        "lineStart": 54,
        "lineEnd": 54,
        "columnStart": 4,
        "columnEnd": 66
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# Dockerfile to build an image able to compile flashlight for iOS and Android\n#\n# > make docker\n\nFROM fedora:22\nMAINTAINER \"Ulysses Aalto\" <uaalto@getlantern.org>\n\nENV GO_VERSION go1.5.3\nENV GOROOT_BOOTSTRAP /go1.5.3\nENV GOROOT /go\nENV GOPATH /\n\nENV PATH $PATH:$GOROOT/bin\nENV WORKDIR /lantern\n\n# Updating system.\nRUN dnf -y update && dnf clean all\n\n# Requisites for building Go.\nRUN dnf install -y git tar patch gzip curl hostname pcre-devel && dnf clean all\n\n# Compilers and tools for CGO.\nRUN dnf install -y gcc gcc-c++ libgcc.i686 gcc-c++.i686 glibc-static pkgconfig && dnf clean all\n\n# Requisites for bootstrapping.\nRUN dnf install -y glibc-devel glibc-static && dnf clean all\nRUN dnf install -y glibc-devel.i686 glib2-static.i686 glibc.i686 && dnf clean all\n\n# Debugging\nRUN dnf install -y make vim strace tmux && dnf clean all\n\n# Install Go.\n#   1) 1.5 for bootstrap.\nENV GOROOT_BOOTSTRAP /go1.5.3\nRUN ( curl -f -sSL https://golang.org/dl/go1.5.3.linux-amd64.tar.gz | tar -vxz -C /tmp) && \\\n\tmv /tmp/go $GOROOT_BOOTSTRAP\n\n#   2) Download and cross compile the Go on revision GOREV.\n#\n# GOVERSION string is the output of 'git log -n 1 --format=\"format: devel +%h %cd\" HEAD'\n# like in go tool dist.\nENV GO_REV go1.5.3\n#ENV GO_VERSION go1.5.1\n\nENV GOROOT /go\nENV PATH $GOROOT/bin:$PATH\n\nRUN mkdir -p $GOROOT && \\\n    curl -f -sSL \"https://go.googlesource.com/go/+archive/$GO_REV.tar.gz\" | tar -vxz -C $GOROOT\nRUN echo $GO_VERSION > $GOROOT/VERSION\nRUN cd $GOROOT/src && ./all.bash\n\n# Install Android SDK\nRUN dnf install -y java-1.8.0-openjdk-devel.x86_64\nRUN curl -f -L https://dl.google.com/android/android-sdk_r22-linux.tgz | tar xz -C /usr/local\nENV ANDROID_HOME /usr/local/android-sdk-linux\n# Install Android tools\nRUN echo y | /usr/local/android-sdk-linux/tools/android update sdk --no-ui --all --filter platform-tools,build-tools-21.1.2,android-22,extra-android-support\n\n# Install and initialize gomobile\nRUN go get -v golang.org/x/mobile/cmd/gomobile\nRUN gomobile init -v\n\nRUN dnf install -y zip unzip && dnf clean all\n\nRUN mkdir -p $WORKDIR\n\nVOLUME [ \"$WORKDIR\" ]\n\nWORKDIR $WORKDIR\n"
}