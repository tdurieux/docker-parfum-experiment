{
  "startTime": 1674252729388,
  "endTime": 1674252729801,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 57,
        "lineEnd": 57,
        "columnStart": 88,
        "columnEnd": 150
      }
    },
    {
      "rule": "curlUseHttpsUrl",
      "position": {
        "lineStart": 57,
        "lineEnd": 57,
        "columnStart": 88,
        "columnEnd": 150
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 7,
        "lineEnd": 7,
        "columnStart": 378,
        "columnEnd": 396
      }
    },
    {
      "rule": "yumInstallRmVarCacheYum",
      "position": {
        "lineStart": 6,
        "lineEnd": 6,
        "columnStart": 21,
        "columnEnd": 50
      }
    },
    {
      "rule": "yumInstallRmVarCacheYum",
      "position": {
        "lineStart": 7,
        "lineEnd": 7,
        "columnStart": 38,
        "columnEnd": 357
      }
    },
    {
      "rule": "yumInstallRmVarCacheYum",
      "position": {
        "lineStart": 96,
        "lineEnd": 96,
        "columnStart": 4,
        "columnEnd": 40
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# Dockerfile for generating a Fedora image with the full KallistiOS SDK installed so you can compile\n# Dreamcast applications\n\nFROM fedora:21\nMAINTAINER kazade <kazade@gmail.com>\n\nRUN yum clean all && yum -y install yum-plugin-ovl && rm -rf /var/cache/yum\nRUN yum -y update && yum clean all && yum -y install automake make git hostname glibc-static bison elfutils flex glibc-devel binutils binutils-devel gdb tar bzip2 patch gcc gcc-c++ texinfo libjpeg-turbo-devel libpng-devel python3 cmake mpfr-devel gmp-devel libmpc-devel  openssl-devel python-devel python-setuptools libffi-devel genisoimage unzip python-pip && yum clean all && pip install --no-cache-dir -U pip && rm -rf /var/cache/yum\nRUN mkdir -p /opt/toolchains/dc\nRUN git clone git://git.code.sf.net/p/cadcdev/kallistios /opt/toolchains/dc/kos\nRUN git clone --recursive git://git.code.sf.net/p/cadcdev/kos-ports /opt/toolchains/dc/kos-ports\n\n## Uncomment the below to enable a 5.2 toolchain\n\n## Download update GCC and newlib diffs\n#RUN cd /opt/toolchains/dc/kos/utils/dc-chain/patches; curl -O https://raw.githubusercontent.com/DC-SWAT/#DreamShell/master/sdk/toolchain/patches/gcc-5.2.0-kos.diff; cd -\n#RUN cd /opt/toolchains/dc/kos/utils/dc-chain/patches; curl -O https://raw.githubusercontent.com/DC-SWAT/#DreamShell/master/sdk/toolchain/patches/newlib-2.2.0-kos.diff; cd -\n#\n## Custom SWAT/DreamShell patches which should probably be upstream??\n#RUN cd /opt/toolchains/dc/kos/utils/dc-chain/patches; curl -O https://raw.githubusercontent.com/DC-SWAT/#DreamShell/master/sdk/toolchain/patches/kos.diff; cd -\n#\n#RUN cd /opt/toolchains/dc/kos && patch -p1 < /opt/toolchains/dc/kos/utils/dc-chain/patches/kos.diff\n#\n## Update GCC\n#RUN sed -i 's/4.7.3/5.2.0/' /opt/toolchains/dc/kos/utils/dc-chain/download.sh\n#RUN sed -i 's/4.7.3/5.2.0/' /opt/toolchains/dc/kos/utils/dc-chain/unpack.sh\n#RUN sed -i 's/4.7.3/5.2.0/' /opt/toolchains/dc/kos/utils/dc-chain/Makefile\n#\n## Update newlib\n#RUN sed -i 's/2.0.0/2.2.0/' /opt/toolchains/dc/kos/utils/dc-chain/download.sh\n#RUN sed -i 's/2.0.0/2.2.0/' /opt/toolchains/dc/kos/utils/dc-chain/unpack.sh\n#RUN sed -i 's/2.0.0/2.2.0/' /opt/toolchains/dc/kos/utils/dc-chain/Makefile\n# Speed up compilation\nRUN set -i 's/# makejobs=-jn/makejobs=-j5/' /opt/toolchains/dc/kos/utils/dc-chain/Makefile\n\n# Disable objc, and obj-c++\nRUN sed -i 's/c,c++,objc,obj-c++/c,c++/' /opt/toolchains/dc/kos/utils/dc-chain/Makefile\n\nRUN cd /opt/toolchains/dc/kos/utils/dc-chain && sh ./download.sh && sh ./unpack.sh && make\nRUN cp /opt/toolchains/dc/kos/doc/environ.sh.sample /opt/toolchains/dc/kos/environ.sh\n\n# Enable C++ functionality which is disabled by default\nRUN sed -i 's/-fno-rtti//' /opt/toolchains/dc/kos/environ_base.sh\nRUN sed -i 's/-fno-exceptions//' /opt/toolchains/dc/kos/environ_base.sh\nRUN sed -i 's/-fno-operator-names//' /opt/toolchains/dc/kos/environ_base.sh\nRUN set -i 's/-g / /' /opt/toolchains/dc/kos/environ_base.sh\n\n# Remove default optimisations, so it can be controlled by CMake or whatever\nRUN sed -i 's/-O2//' /opt/toolchains/dc/kos/environ.sh\n\nRUN echo -e \"\\nsource /opt/toolchains/dc/kos/environ.sh\" >> /etc/bash.bashrc\nRUN ln -s /etc/bash.bashrc /root/.bashrc\nRUN source /etc/bash.bashrc; echo ${KOS_BASE}\nRUN source /etc/bash.bashrc; cd /opt/toolchains/dc/kos && make\n\nRUN source /etc/bash.bashrc; cd /opt/toolchains/dc/kos-ports/libjpeg && make install clean\nRUN source /etc/bash.bashrc; cd /opt/toolchains/dc/kos-ports/libpng && make install clean\nRUN . /etc/bash.bashrc; cd /opt/toolchains/dc/kos/utils && mkdir makeip && cd makeip && curl -f https://www.boob.co.uk/files/makeip.tar.gz > makeip.tar.gz && tar -xf makeip.tar.gz && rm makeip.tar.gz && gcc makeip.c -o makeip\nRUN . /etc/bash.bashrc; cd /opt/toolchains/dc/kos/utils && git clone https://github.com/Kazade/img4dc.git && cd img4dc && mkdir build && cd build && cmake .. && make BUMP=9\n\n# Add GLdc as a kos port\nRUN mkdir -p /opt/toolchains/dc/kos-ports/GLdc/files\nRUN echo $'\\n\\\nTARGET = libGLdc.a\\n\\\nOBJS = GL/draw.o GL/flush.o GL/framebuffer.o GL/immediate.o GL/lighting.o GL/state.o GL/texture.o GL/glu.o\\n\\\nOBJS += GL/matrix.o GL/fog.o GL/error.o GL/clip.o containers/stack.o containers/named_array.o containers/aligned_vector.o GL/profiler.o\\n\\\n\\n\\\nKOS_CFLAGS += -Iinclude -ffast-math -O3\\n\\\n\\n\\\ninclude ${KOS_PORTS}/scripts/lib.mk\\n\\\n' > /opt/toolchains/dc/kos-ports/GLdc/files/KOSMakefile.mk\n\nRUN echo $'\\n\\\nPORTNAME = GLdc\\n\\\nPORTVERSION = 1.0.0\\n\\\n\\n\\\nMAINTAINER = Luke Benstead <kazade@gmail.com>\\n\\\nLICENSE = BSD 2-Clause \"Simplified\" License\\n\\\nSHORT_DESC = Partial OpenGL 1.2 implementation for KOS\\n\\\n\\n\\\nDEPENDENCIES = \\n\\\n\\n\\\nGIT_REPOSITORY =    https://github.com/Kazade/GLdc.git\\n\\\n\\n\\\nTARGET =\t\t\tlibGLdc.a\\n\\\nINSTALLED_HDRS =\tinclude/gl.h include/glext.h include/glu.h include/glkos.h\\n\\\nHDR_COMDIR =\t\tGL\\n\\\n\\n\\\nKOS_DISTFILES =\t\tKOSMakefile.mk\\n\\\n\\n\\\ninclude ${KOS_PORTS}/scripts/kos-ports.mk\\n\\\n' > /opt/toolchains/dc/kos-ports/GLdc/Makefile\n\nRUN source /etc/bash.bashrc; cd /opt/toolchains/dc/kos-ports/GLdc && BUMP=1 make install clean\n\n# Now install dcload-ip\nRUN yum install -y elfutils-libelf-devel && rm -rf /var/cache/yum\nRUN . /etc/bash.bashrc; git clone https://git.code.sf.net/p/cadcdev/dcload-ip /opt/toolchains/dc/dc-load-ip\nRUN . /etc/bash.bashrc; cp /opt/toolchains/dc/dc-load-ip/example-src/dc4.x /opt/toolchains/dc/dc-load-ip/example-src/dc5.x\nRUN . /etc/bash.bashrc; cd /opt/toolchains/dc/dc-load-ip && make\nRUN . /etc/bash.bashrc; mkdir -p /opt/toolchains/dc/bin && cp /opt/toolchains/dc/dc-load-ip/host-src/tool/dc-tool /opt/toolchains/dc/bin\n"
}