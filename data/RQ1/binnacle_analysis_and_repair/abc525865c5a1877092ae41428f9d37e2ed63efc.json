{
  "startTime": 1674248188683,
  "endTime": 1674248189001,
  "originalSmells": [
    {
      "rule": "sha256sumEchoOneSpaces",
      "position": {
        "lineStart": 35,
        "lineEnd": 35,
        "columnStart": 4,
        "columnEnd": 57
      }
    },
    {
      "rule": "gpgUseBatchFlag",
      "position": {
        "lineStart": 46,
        "lineEnd": 46,
        "columnStart": 4,
        "columnEnd": 56
      }
    },
    {
      "rule": "gpgUseBatchFlag",
      "position": {
        "lineStart": 47,
        "lineEnd": 47,
        "columnStart": 4,
        "columnEnd": 33
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 14,
        "lineEnd": 14,
        "columnStart": 25,
        "columnEnd": 53
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 49,
        "lineEnd": 49,
        "columnStart": 22,
        "columnEnd": 52
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 57,
        "lineEnd": 57,
        "columnStart": 22,
        "columnEnd": 49
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 14,
        "lineEnd": 14,
        "columnStart": 25,
        "columnEnd": 53
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 49,
        "lineEnd": 49,
        "columnStart": 22,
        "columnEnd": 52
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 57,
        "lineEnd": 57,
        "columnStart": 22,
        "columnEnd": 49
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# t-rex build container\n#\n# docker build --build-arg uid=$UID -t t-rex-%%UBUNTU-SUITE%% -f Dockerfile-%%UBUNTU-SUITE%% .\n# docker run -t -i -v $(pwd):/var/data/in t-rex-%%UBUNTU-SUITE%%\n#\n# Copy generated DEB package\n# docker run --entrypoint=\"\" t-rex-%%UBUNTU-SUITE%% ls -l /\n# docker run --entrypoint=\"\" -v $(pwd):/var/data/out t-rex-%%UBUNTU-SUITE%% cp /t-rex-0.8.0-dev-amd64-ubuntugis~%%UBUNTU-SUITE%%.deb /var/data/out/\n\nFROM ubuntu:%%UBUNTU-SUITE%%\n\nARG gitref\nARG uid\n\nRUN apt-get -y update && apt-get install --no-install-recommends -y wget make && rm -rf /var/lib/apt/lists/*;\n\n# From https://github.com/rust-lang-nursery/docker-rust\nENV RUSTUP_HOME=/usr/local/rustup \\\n    CARGO_HOME=/usr/local/cargo \\\n    PATH=/usr/local/cargo/bin:$PATH\n\nRUN set -eux; \\\n\n# this \"case\" statement is generated via \"update.sh\"\n    dpkgArch=\"$(dpkg --print-architecture)\"; \\\n    case \"${dpkgArch##*-}\" in \\\n        amd64) rustArch='x86_64-unknown-linux-gnu'; rustupSha256='f5833a64fd549971be80fa42cffc6c5e7f51c4f443cd46e90e4c17919c24481f' ;; \\\n        armhf) rustArch='armv7-unknown-linux-gnueabihf'; rustupSha256='67a98a67f7f7bf19c5cde166499acb8299f2f8fa88c155093df53b66da1f512a' ;; \\\n        arm64) rustArch='aarch64-unknown-linux-gnu'; rustupSha256='82fe368c4ebf1683d57e137242793a4417042639aace8bd514601db7d79d3645' ;; \\\n        i386) rustArch='i686-unknown-linux-gnu'; rustupSha256='7a1c085591f6c1305877919f8495c04a1c97546d001d1357a7a879cedea5afbb' ;; \\\n        *) echo >&2 \"unsupported architecture: ${dpkgArch}\"; exit 1 ;; \\\n    esac; \\\n\n    url=\"https://static.rust-lang.org/rustup/archive/1.6.0/${rustArch}/rustup-init\"; \\\n    wget \"$url\"; \\\n    echo \"${rustupSha256}  *rustup-init\" | sha256sum -c -; \\\n    chmod +x rustup-init; \\\n    ./rustup-init -y --no-modify-path --default-toolchain 1.20.0; \\\n    rm rustup-init; \\\n    chmod -R a+w $RUSTUP_HOME $CARGO_HOME; \\\n    rustup --version; \\\n    cargo --version; \\\nrustc --version;\n\n# GDAL 2 from ubuntugis\nRUN echo \"deb http://ppa.launchpad.net/ubuntugis/ubuntugis-unstable/ubuntu %%UBUNTU-SUITE%% main\" >> /etc/apt/sources.list\nRUN gpg --batch --keyserver keyserver.ubuntu.com --recv 314DF160\nRUN gpg --batch --export --armor 314DF160 | apt-key add -\n\nRUN apt-get update && apt-get install --no-install-recommends -y libgdal-dev && rm -rf /var/lib/apt/lists/*;\n\n# Build t-rex\nRUN wget -qO- https://api.github.com/repos/t-rex-tileserver/t-rex/tarball/${gitref:-master} | tar xzf -\nRUN mv t-rex-tileserver* t-rex\nRUN cd t-rex && cargo build --release\n\n# Build DEB package\nRUN apt-get update && apt-get install --no-install-recommends -y fakeroot && rm -rf /var/lib/apt/lists/*;\n\nRUN VERSION=$(grep version t-rex/Cargo.toml | sed 's/version = \"\\(.*\\)\"/\\1/') && \\\n    ARCH=$(dpkg --print-architecture) && \\\n    mkdir -p debian/usr/bin && \\\n    \\\n    install -m0755 t-rex/target/release/t_rex debian/usr/bin/ && \\\n    strip -s debian/usr/bin/t_rex && \\\n    \\\n    mkdir -p debian/DEBIAN && \\\n    echo \"Package: t-rex\\n\\\nVersion: $VERSION\\n\\\nArchitecture: $ARCH\\n\\\nMaintainer: Pirmin Kalberer <pi_deb@sourcepole.ch>\\n\\\nDescription: t-rex vector tile server\\n\\\nDepends: openssl, libgdal20\\n\"\\\n>debian/DEBIAN/control && \\\n    fakeroot dpkg-deb --build debian && \\\n    mv debian.deb t-rex-$VERSION-$ARCH-ubuntugis~%%UBUNTU-SUITE%%.deb && \\\n    echo t-rex-$VERSION-$ARCH-ubuntugis-%%UBUNTU-SUITE%%.deb\n\nRUN dpkg -i t-rex-*-ubuntugis~%%UBUNTU-SUITE%%.deb && rm -rf debian\nRUN rm -rf t-rex-tileserver*/target\n\nRUN useradd --uid ${uid:-1000} rust\nUSER rust\n\nWORKDIR /var/data/in\n\nVOLUME [\"/var/data/in\"]\nVOLUME [\"/var/data/out\"]\n\nEXPOSE 6767\nENTRYPOINT [\"/usr/bin/t_rex\"]\n"
}