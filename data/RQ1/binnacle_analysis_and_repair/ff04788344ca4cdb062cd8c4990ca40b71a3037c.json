{
  "startTime": 1674236468741,
  "endTime": 1674236469319,
  "originalSmells": [
    {
      "rule": "curlUseHttpsUrl",
      "position": {
        "lineStart": 49,
        "lineEnd": 50,
        "columnStart": 5,
        "columnEnd": 20
      }
    },
    {
      "rule": "curlUseHttpsUrl",
      "position": {
        "lineStart": 51,
        "lineEnd": 52,
        "columnStart": 5,
        "columnEnd": 24
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 131,
        "lineEnd": 131,
        "columnStart": 5,
        "columnEnd": 48
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 63,
        "lineEnd": 105,
        "columnStart": 5,
        "columnEnd": 17
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 59,
        "lineEnd": 60,
        "columnStart": 5,
        "columnEnd": 26
      }
    },
    {
      "rule": "gpgUseBatchFlag",
      "position": {
        "lineStart": 55,
        "lineEnd": 55,
        "columnStart": 5,
        "columnEnd": 77
      }
    },
    {
      "rule": "apkAddUseNoCache",
      "position": {
        "lineStart": 121,
        "lineEnd": 121,
        "columnStart": 5,
        "columnEnd": 41
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM tarantool/tarantool:1.7\nMAINTAINER andrey@tarantool.org\n\n# install nginx\nRUN addgroup -S nginx \\\n    && adduser -S -G nginx nginx \\\n    && apk add --no-cache 'su-exec>=0.2'\n\nENV NGINX_VERSION=1.11.1 \\\n    NGINX_UPSTREAM_MODULE_URL=https://github.com/tarantool/nginx_upstream_module.git \\\n    NGINX_UPSTREAM_MODULE_COMMIT=b4cbdca \\\n    NGINX_GPG_KEYS=B0F4253373F8F6F510D42178520A9993A1C052F8 \\\n    SUPERVISOR_VERSION=3.3.0\n\nRUN set -x \\\n  && apk add --no-cache --virtual .build-deps \\\n     build-base \\\n     cmake \\\n     linux-headers \\\n     openssl-dev \\\n     pcre-dev \\\n     zlib-dev \\\n     libxslt-dev \\\n     gd-dev \\\n     geoip-dev \\\n     git \\\n     tar \\\n     gnupg \\\n     curl \\\n     perl-dev \\\n  && apk add --no-cache --virtual .run-deps \\\n     ca-certificates \\\n     openssl \\\n     pcre \\\n     zlib \\\n     libxslt \\\n     gd \\\n     geoip \\\n     perl \\\n     gettext \\\n     python \\\n     py-pip \\\n  && : \"---------- download nginx-upstream-module ----------\" \\\n  && git clone \"$NGINX_UPSTREAM_MODULE_URL\" /usr/src/nginx_upstream_module \\\n  && git -C /usr/src/nginx_upstream_module checkout $NGINX_UPSTREAM_MODULE_COMMIT \\\n  && git -C /usr/src/nginx_upstream_module submodule init \\\n  && git -C /usr/src/nginx_upstream_module submodule update \\\n  && make -C /usr/src/nginx_upstream_module yajl \\\n  && : \"---------- download nginx ----------\" \\\n  && curl -fSL https://nginx.org/download/nginx-$NGINX_VERSION.tar.gz \\\n     -o nginx.tar.gz \\\n  && curl -fSL https://nginx.org/download/nginx-$NGINX_VERSION.tar.gz.asc \\\n     -o nginx.tar.gz.asc \\\n  && : \"---------- verify signatures ----------\" \\\n  && export GNUPGHOME=\"$(mktemp -d)\" \\\n  && gpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys \"$NGINX_GPG_KEYS\" \\\n  && gpg --batch --verify nginx.tar.gz.asc nginx.tar.gz \\\n  && rm -r \"$GNUPGHOME\" nginx.tar.gz.asc \\\n  && mkdir -p /usr/src/nginx \\\n  && tar -xzf nginx.tar.gz -C /usr/src/nginx \\\n      --strip-components=1 \\\n  && cd /usr/src/nginx \\\n  && : \"---------- build nginx ----------\" \\\n  && ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" \\\n      --add-module=/usr/src/nginx_upstream_module \\\n      --prefix=/etc/nginx \\\n      --sbin-path=/usr/sbin/nginx \\\n      --modules-path=/usr/lib/nginx/modules \\\n      --conf-path=/etc/nginx/nginx.conf \\\n      --error-log-path=/var/log/nginx/error.log \\\n      --http-log-path=/var/log/nginx/access.log \\\n      --pid-path=/var/run/nginx.pid \\\n      --lock-path=/var/run/nginx.lock \\\n      --http-client-body-temp-path=/var/cache/nginx/client_temp \\\n      --http-proxy-temp-path=/var/cache/nginx/proxy_temp \\\n      --http-fastcgi-temp-path=/var/cache/nginx/fastcgi_temp \\\n      --http-uwsgi-temp-path=/var/cache/nginx/uwsgi_temp \\\n      --http-scgi-temp-path=/var/cache/nginx/scgi_temp \\\n      --user=nginx \\\n      --group=nginx \\\n      --with-http_ssl_module \\\n      --with-http_realip_module \\\n      --with-http_addition_module \\\n      --with-http_sub_module \\\n      --with-http_dav_module \\\n      --with-http_flv_module \\\n      --with-http_mp4_module \\\n      --with-http_gunzip_module \\\n      --with-http_gzip_static_module \\\n      --with-http_random_index_module \\\n      --with-http_secure_link_module \\\n      --with-http_stub_status_module \\\n      --with-http_auth_request_module \\\n      --with-http_xslt_module=dynamic \\\n      --with-http_image_filter_module=dynamic \\\n      --with-http_geoip_module=dynamic \\\n      --with-http_perl_module=dynamic \\\n      --with-threads \\\n      --with-stream \\\n      --with-stream_ssl_module \\\n      --with-http_slice_module \\\n      --with-mail \\\n      --with-mail_ssl_module \\\n      --with-file-aio \\\n      --with-http_v2_module \\\n      --with-ipv6 \\\n  && make \\\n  && make install \\\n  && rm -rf /etc/nginx/html/ \\\n  && mkdir /etc/nginx/conf.d/ \\\n  && mkdir -p /usr/share/nginx/html/ \\\n  && install -m644 html/index.html /usr/share/nginx/html/ \\\n  && install -m644 html/50x.html /usr/share/nginx/html/ \\\n  && : \"---------- install module deps ----------\" \\\n  && runDeps=\"$( \\\n      scanelf --needed --nobanner /usr/sbin/nginx /usr/lib/nginx/modules/*.so \\\n              | awk '{ gsub(/,/, \"\\nso:\", $2); print \"so:\" $2 }' \\\n              | sort -u \\\n              | xargs -r apk info --installed \\\n              | sort -u \\\n      )\" \\\n  && apk add --no-cache --virtual .run-deps $runDeps \\\n  && : \"---------- remove build deps ----------\" \\\n  && rm -rf /usr/src/nginx \\\n  && rm -rf /usr/src/nginx_upstream_module \\\n  && cd - \\\n  && apk del .build-deps \\\n  && : \"---------- redirect logs to default collector ----------\" \\\n  && ln -sf /dev/stdout /var/log/nginx/access.log \\\n  && ln -sf /dev/stderr /var/log/nginx/error.log \\\n  && : \"---------- install supervisord ----------\" \\\n  && pip install --no-cache-dir supervisor==$SUPERVISOR_VERSION && rm nginx.tar.gz\n\nCOPY dist/nginx.conf /etc/nginx/nginx.conf\n\n# install tarantino\nRUN mkdir /opt/tarantool/tarantino\nCOPY src/*.lua /opt/tarantool/tarantino/\nCOPY dist/*.lua /opt/tarantool/\nCOPY dist/*.json /opt/tarantool/\nCOPY dist/supervisord.conf /etc/supervisord.conf\n\nVOLUME [\"/var/cache/nginx\"]\nEXPOSE 80 443\n\nCMD [\"supervisord\", \"-c\", \"/etc/supervisord.conf\"]\n"
}