{
  "startTime": 1674236221248,
  "endTime": 1674236221631,
  "originalSmells": [
    {
      "rule": "wgetUseHttpsUrl",
      "position": {
        "lineStart": 81,
        "lineEnd": 81,
        "columnStart": 4,
        "columnEnd": 67
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 93,
        "lineEnd": 93,
        "columnStart": 4,
        "columnEnd": 29
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 94,
        "lineEnd": 94,
        "columnStart": 4,
        "columnEnd": 37
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 84,
        "lineEnd": 84,
        "columnStart": 21,
        "columnEnd": 88
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 83,
        "lineEnd": 83,
        "columnStart": 4,
        "columnEnd": 31
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 17,
        "lineEnd": 54,
        "columnStart": 39,
        "columnEnd": 13
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 17,
        "lineEnd": 54,
        "columnStart": 39,
        "columnEnd": 13
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# This Dockerfile specifies the recipe for creating an image for the tests\n# to run in.\n#\n# We install as many test dependencies here as we can, because these setup\n# steps can be cached.  They do *not* run every time we run the build.\n# The Docker image is only rebuilt when the Dockerfile (ie. this file)\n# changes.\n\n# Base Dockerfile for gRPC dev images\nFROM 32bit/debian:latest\n\n# Apt source for php\nRUN echo \"deb http://ppa.launchpad.net/ondrej/php/ubuntu trusty main\" | tee /etc/apt/sources.list.d/various-php.list && \\\n  apt-key adv --keyserver keyserver.ubuntu.com --recv-keys F4FCBB07\n\n# Install dependencies.  We start with the basic ones require to build protoc\n# and the C++ build\nRUN apt-get clean && apt-get update && apt-get install --no-install-recommends -y --force-yes \\\n  autoconf \\\n  autotools-dev \\\n  build-essential \\\n  bzip2 \\\n  ccache \\\n  curl \\\n  gcc \\\n  git \\\n  libc6 \\\n  libc6-dbg \\\n  libc6-dev \\\n  libgtest-dev \\\n  libtool \\\n  make \\\n  parallel \\\n  time \\\n  wget \\\n  unzip \\\n  # -- For python --\n  python-setuptools \\\n  python-pip \\\n  python-dev \\\n  # -- For C++ benchmarks --\n  cmake \\\n  # -- For PHP --\n  php5.5 \\\n  php5.5-dev \\\n  php5.5-xml \\\n  php5.6 \\\n  php5.6-dev \\\n  php5.6-xml \\\n  php7.0 \\\n  php7.0-dev \\\n  php7.0-xml \\\n  phpunit \\\n  valgrind \\\n  libxml2-dev \\\n  && apt-get clean && rm -rf /var/lib/apt/lists/*;\n\n##################\n# PHP dependencies.\nRUN php -r \"copy('https://getcomposer.org/installer', 'composer-setup.php');\"\nRUN php composer-setup.php\nRUN mv composer.phar /usr/bin/composer\nRUN php -r \"unlink('composer-setup.php');\"\nRUN cd /tmp && \\\n  git clone https://github.com/google/protobuf.git && \\\n  cd protobuf && \\\n  ln -sfn /usr/bin/php5.5 /usr/bin/php && \\\n  ln -sfn /usr/bin/php-config5.5 /usr/bin/php-config && \\\n  ln -sfn /usr/bin/phpize5.5 /usr/bin/phpize && \\\n  composer install && \\\n  mv vendor /usr/local/vendor-5.5 && \\\n  ln -sfn /usr/bin/php5.6 /usr/bin/php && \\\n  ln -sfn /usr/bin/php-config5.6 /usr/bin/php-config && \\\n  ln -sfn /usr/bin/phpize5.6 /usr/bin/phpize && \\\n  composer install && \\\n  mv vendor /usr/local/vendor-5.6 && \\\n  ln -sfn /usr/bin/php7.0 /usr/bin/php && \\\n  ln -sfn /usr/bin/php-config7.0 /usr/bin/php-config && \\\n  ln -sfn /usr/bin/phpize7.0 /usr/bin/phpize && \\\n  composer install && \\\n  mv vendor /usr/local/vendor-7.0\nRUN wget https://am1.php.net/get/php-5.5.38.tar.bz2/from/this/mirror\nRUN mv mirror php-5.5.38.tar.bz2\nRUN tar -xvf php-5.5.38.tar.bz2 && rm php-5.5.38.tar.bz2\nRUN cd php-5.5.38 && ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --enable-maintainer-zts --prefix=/usr/local/php-5.5-zts && \\\n    make && make install\n\n##################\n# Python dependencies\n\n# These packages exist in apt-get, but their versions are too old, so we have\n# to get updates from pip.\n\nRUN pip install --no-cache-dir pip --upgrade\nRUN pip install --no-cache-dir virtualenv tox yattag\n\n##################\n# Prepare ccache\n\nRUN ln -s /usr/bin/ccache /usr/local/bin/gcc\nRUN ln -s /usr/bin/ccache /usr/local/bin/g++\nRUN ln -s /usr/bin/ccache /usr/local/bin/cc\nRUN ln -s /usr/bin/ccache /usr/local/bin/c++\nRUN ln -s /usr/bin/ccache /usr/local/bin/clang\nRUN ln -s /usr/bin/ccache /usr/local/bin/clang++\n\n# Define the default command.\nCMD [\"bash\"]\n"
}