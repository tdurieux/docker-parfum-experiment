{
  "startTime": 1674242323960,
  "endTime": 1674242324203,
  "originalSmells": [
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 24,
        "lineEnd": 24,
        "columnStart": 5,
        "columnEnd": 32
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 19,
        "lineEnd": 19,
        "columnStart": 7,
        "columnEnd": 43
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 9,
        "lineEnd": 12,
        "columnStart": 7,
        "columnEnd": 39
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 9,
        "lineEnd": 12,
        "columnStart": 7,
        "columnEnd": 39
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM ubuntu:16.04\n# FROM arm64=aarch64/ubuntu:16.04 arm=armhf/ubuntu:16.04\n\n# get the apt-cacher proxy set\nARG APTPROXY=\n\nRUN echo \"Acquire::http { Proxy \\\"$APTPROXY\\\"; };\" >> /etc/apt/apt.conf.d/01proxy \\\n    && cat /etc/apt/apt.conf.d/01proxy \\\n    && apt-get update \\\n    && apt-get install --no-install-recommends -yq build-essential autoconf libtool gawk alien fakeroot \\\n        zlib1g-dev uuid-dev libattr1-dev libblkid-dev libselinux-dev libudev-dev libdevmapper-dev \\\n        module-init-tools \\\n        parted lsscsi ksh curl git wget && rm -rf /var/lib/apt/lists/*;\n\nWORKDIR /source\n\n# https://www.kernel.org/pub/linux/utils/kernel/kexec/\nENV VERSION 2.0.15\nRUN wget https://www.kernel.org/pub/linux/utils/kernel/kexec/kexec-tools-$VERSION.tar.gz \\\n    && tar zxvf kexec-tools-$VERSION.tar.gz && rm kexec-tools-$VERSION.tar.gz\n\nRUN zcat kexec-tools-$VERSION.tar.gz | tar xvf - \\\n  && cd kexec-tools-$VERSION \\\n  && sed 's/loff_t/off_t/g' -i vmcore-dmesg/vmcore-dmesg.c \\\n  && LDFLAGS=-static ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" \\\n  && make \\\n  && make install\nRUN mkdir -p /source/dist \\\n  && cp -r /usr/local/* /source/dist\n\n########## Dapper Configuration #####################\n\nENV DAPPER_ENV VERSION DEV_BUILD RUNTEST APTPROXY\n#ENV DAPPER_DOCKER_SOCKET true\nENV DAPPER_SOURCE /source\nENV DAPPER_OUTPUT ./dist\n#ENV DAPPER_RUN_ARGS --privileged\n#ENV TRASH_CACHE ${DAPPER_SOURCE}/.trash-cache\n#ENV SHELL /bin/bash\n\nCMD true\n\n"
}