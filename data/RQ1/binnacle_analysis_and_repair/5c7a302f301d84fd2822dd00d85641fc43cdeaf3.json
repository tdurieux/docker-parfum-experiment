{
  "startTime": 1674251390395,
  "endTime": 1674251390643,
  "originalSmells": [
    {
      "rule": "wgetUseHttpsUrl",
      "position": {
        "lineStart": 49,
        "lineEnd": 49,
        "columnStart": 4,
        "columnEnd": 105
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM alpine:3.7\n\nENV LANG=C.UTF-8\n\n# Here we install GNU libc (aka glibc) and set C.UTF-8 locale as default.\n\nRUN ALPINE_GLIBC_BASE_URL=\"https://github.com/sgerrand/alpine-pkg-glibc/releases/download\" && \\\n    ALPINE_GLIBC_PACKAGE_VERSION=\"2.28-r0\" && \\\n    ALPINE_GLIBC_BASE_PACKAGE_FILENAME=\"glibc-$ALPINE_GLIBC_PACKAGE_VERSION.apk\" && \\\n    ALPINE_GLIBC_BIN_PACKAGE_FILENAME=\"glibc-bin-$ALPINE_GLIBC_PACKAGE_VERSION.apk\" && \\\n    ALPINE_GLIBC_I18N_PACKAGE_FILENAME=\"glibc-i18n-$ALPINE_GLIBC_PACKAGE_VERSION.apk\" && \\\n    apk add --no-cache --virtual=.build-dependencies wget ca-certificates && \\\n    wget \\\n        \"https://alpine-pkgs.sgerrand.com/sgerrand.rsa.pub\" \\\n        -O \"/etc/apk/keys/sgerrand.rsa.pub\" && \\\n    wget \\\n        \"$ALPINE_GLIBC_BASE_URL/$ALPINE_GLIBC_PACKAGE_VERSION/$ALPINE_GLIBC_BASE_PACKAGE_FILENAME\" \\\n        \"$ALPINE_GLIBC_BASE_URL/$ALPINE_GLIBC_PACKAGE_VERSION/$ALPINE_GLIBC_BIN_PACKAGE_FILENAME\" \\\n        \"$ALPINE_GLIBC_BASE_URL/$ALPINE_GLIBC_PACKAGE_VERSION/$ALPINE_GLIBC_I18N_PACKAGE_FILENAME\" && \\\n    apk add --no-cache \\\n        \"$ALPINE_GLIBC_BASE_PACKAGE_FILENAME\" \\\n        \"$ALPINE_GLIBC_BIN_PACKAGE_FILENAME\" \\\n        \"$ALPINE_GLIBC_I18N_PACKAGE_FILENAME\" && \\\n    \\\n    rm \"/etc/apk/keys/sgerrand.rsa.pub\" && \\\n    /usr/glibc-compat/bin/localedef --force --inputfile POSIX --charmap UTF-8 C.UTF-8 || true && \\\n    echo \"export LANG=C.UTF-8\" > /etc/profile.d/locale.sh && \\\n    \\\n    apk del glibc-i18n && \\\n    \\\n    rm \"/root/.wget-hsts\" && \\\n    apk del .build-dependencies && \\\n    rm \\\n        \"$ALPINE_GLIBC_BASE_PACKAGE_FILENAME\" \\\n        \"$ALPINE_GLIBC_BIN_PACKAGE_FILENAME\" \\\n        \"$ALPINE_GLIBC_I18N_PACKAGE_FILENAME\"\n\n\n\nENV CONDA_DIR=\"/opt/conda\"\nENV PATH=\"$CONDA_DIR/bin:$PATH\"\n\n# Install conda\nRUN CONDA_VERSION=\"4.5.4\" && \\\n    CONDA_MD5_CHECKSUM=\"a946ea1d0c4a642ddf0c3a26a18bb16d\" && \\\n    \\\n    apk add --no-cache --virtual=.build-dependencies wget ca-certificates bash && \\\n    \\\n    mkdir -p \"$CONDA_DIR\" && \\\n    wget \"https://repo.continuum.io/miniconda/Miniconda3-${CONDA_VERSION}-Linux-x86_64.sh\" -O miniconda.sh && \\\n    echo \"$CONDA_MD5_CHECKSUM  miniconda.sh\" | md5sum -c && \\\n    bash miniconda.sh -f -b -p \"$CONDA_DIR\" && \\\n    echo \"export PATH=$CONDA_DIR/bin:\\$PATH\" > /etc/profile.d/conda.sh && \\\n    rm miniconda.sh && \\\n\n    conda update --all --yes && \\\n    conda config --set auto_update_conda False && \\\n    rm -r \"$CONDA_DIR/pkgs/\" && \\\n\n    apk del --purge .build-dependencies && \\\n\n    mkdir -p \"$CONDA_DIR/locks\" && \\\nchmod 777 \"$CONDA_DIR/locks\"\n\nMAINTAINER CO2MPAS <vinci1it2000@gmail.com>\n\n# Add library to compile C-code.\nRUN apk --update --no-cache --virtual=.build-dependencies add gcc libc-dev git bash\n\n# Add tk dependencies\nRUN apk --update --no-cache add tk-dev\n\n# Install requirements.\nCOPY ./requirements/install_conda_reqs.sh /tmp/co2mpas/requirements/install_conda_reqs.sh\nRUN cd /tmp/co2mpas/requirements && \\\n    bash install_conda_reqs.sh\n\nCOPY ./requirements/exe.pip /tmp/co2mpas/requirements/exe.pip\nRUN cd /tmp/co2mpas/requirements && \\\n    pip install -r exe.pip --no-cache-dir\n\n# Install CO2MPAS.\nCOPY ./src/co2mpas /tmp/co2mpas/src/co2mpas\nCOPY ./setup.py /tmp/co2mpas/setup.py\nCOPY ./README.rst /tmp/co2mpas/README.rst\n\nARG co2sim_VERSION\nENV co2sim_VERSION \"$co2sim_VERSION\"\nRUN cd /tmp/co2mpas && \\\n    python setup.py bdist_wheel && \\\n    WHEEL=$(find /tmp/co2mpas/dist/co2sim*.whl) && \\\n    pip install $WHEEL[io] --no-cache-dir\n\n# Clean up.\nRUN apk del --purge .build-dependencies && \\\n    conda clean --all && \\\n    rm -rf /tmp/co2mpas /opt/conda/pkgs/cache\n\nCMD co2mpas batch /data/input -O /data/output -D flag.engineering_mode=True\n"
}