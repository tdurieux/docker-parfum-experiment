{
  "startTime": 1674238495770,
  "endTime": 1674238495930,
  "originalSmells": [
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 32,
        "lineEnd": 32,
        "columnStart": 4,
        "columnEnd": 50
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 28,
        "lineEnd": 28,
        "columnStart": 26,
        "columnEnd": 180
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 28,
        "lineEnd": 28,
        "columnStart": 26,
        "columnEnd": 180
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# check-api\nFROM meedan/ruby\nMAINTAINER sysops@meedan.com\n\nENV DEPLOYUSER=checkdeploy \\\n    DEPLOYDIR=/app/current \\\n    RAILS_ENV=production \\\n    GITREPO=git@github.com:meedan/check-api.git \\\n    PRODUCT=check \\\n    APP=check-api \\\n    TERM=xterm \\\n    MIN_INSTANCES=4 \\\n    MAX_POOL_SIZE=12 \\\n    PERSIST_DIRS=\"uploads project_export memebuster\" \\\n    MALLOC_ARENA_MAX=2\n    # MALLOC_ARENA MAX is needed because of https://www.mikeperham.com/2018/04/25/taming-rails-memory-bloat/\n    # MIN_INSTANCES and MAX_POOL_SIZE control the pool size of passenger\n\n#\n# USER CONFIG\n#\nRUN useradd ${DEPLOYUSER} -s /bin/bash -m\n\n#\n# SYSTEM CONFIG\n#\n\n# dependencies\nRUN apt-get update -qq && apt-get install --no-install-recommends -y fontconfig libfontconfig ttf-devanagari-fonts ttf-bengali-fonts ttf-gujarati-fonts ttf-telugu-fonts ttf-tamil-fonts ttf-malayalam-fonts && rm -rf /var/lib/apt/lists/*;\n\n# phantomjs\nRUN wget https://bitbucket.org/ariya/phantomjs/downloads/phantomjs-2.1.1-linux-x86_64.tar.bz2 && \\\n    tar -vxjf phantomjs-2.1.1-linux-x86_64.tar.bz2 && \\\n    mv phantomjs-2.1.1-linux-x86_64/bin/phantomjs /usr/bin/ && rm phantomjs-2.1.1-linux-x86_64.tar.bz2\n\n# nginx for check-api\nCOPY --chown=checkdeploy:www-data production/config/nginx/app.conf /etc/nginx/sites-available/${APP}\nCOPY --chown=checkdeploy:www-data production/config/nginx/test_404.conf /etc/nginx/sites-available/test_404.conf\nRUN sed -i \"s/ddDEPLOYUSERdd/checkdeploy/g\" /etc/nginx/sites-available/${APP} \\\n    && ln -s /etc/nginx/sites-available/${APP} /etc/nginx/sites-enabled/${APP} \\\n    && rm /etc/nginx/sites-enabled/default\n\n# CMD and helper scripts\nCOPY --chown=root:root production/bin /opt/bin\n\n#\n# code deployment\n#\nRUN mkdir -p ${DEPLOYDIR} \\\n    && chown -R ${DEPLOYUSER}:www-data ${DEPLOYDIR} \\\n    && chmod -R 775 ${DEPLOYDIR} \\\n    && chmod g+s ${DEPLOYDIR}\n\nWORKDIR ${DEPLOYDIR}\n\n# install the gems\nUSER ${DEPLOYUSER}\n# COPY's `--chown` directive cannot utilize environmental variables\n# so we mimic `--chown=${DEPLOYUSER}:www-data`\nCOPY --chown=checkdeploy:www-data ./Gemfile ${DEPLOYDIR}/Gemfile\nCOPY --chown=checkdeploy:www-data ./Gemfile.lock ${DEPLOYDIR}/Gemfile.lock\nRUN echo \"gem: --no-rdoc --no-ri\" > ~/.gemrc \\\n    && bundle install  --jobs 20 --retry 5 --deployment --without test development\n\n# copy in the code\n# COPY's `--chown` directive cannot utilize environmental variables\n# so we mimic `--chown=${DEPLOYUSER}:www-data`\nCOPY --chown=checkdeploy:www-data . ${DEPLOYDIR}\n\nUSER root\n\n# link config files\nRUN /opt/bin/find_and_link_config_files.sh ${DEPLOYDIR}\n# persist these directories\nRUN for d in ${PERSIST_DIRS}; do mkdir -p /app/shared/files/${d} \\\n    && ln -s /app/shared/files/${d} ${DEPLOYDIR}/public/${d}; done\n\nRUN ln -s ${DEPLOYDIR} /app/${APP}-$(date -I)\n\n\n#\n# RUNTIME ELEMENTS\n# expose, cmd\n\nEXPOSE 3300\n\nWORKDIR ${DEPLOYDIR}\nCMD [\"/opt/bin/start.sh\"]\n"
}