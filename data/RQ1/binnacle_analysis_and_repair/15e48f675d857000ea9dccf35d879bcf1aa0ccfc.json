{
  "startTime": 1674239357731,
  "endTime": 1674239358117,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 45,
        "lineEnd": 45,
        "columnStart": 4,
        "columnEnd": 95
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 6,
        "lineEnd": 6,
        "columnStart": 18,
        "columnEnd": 86
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 53,
        "lineEnd": 53,
        "columnStart": 7,
        "columnEnd": 26
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 1,
        "lineEnd": 3,
        "columnStart": 25,
        "columnEnd": 60
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 17,
        "lineEnd": 17,
        "columnStart": 4,
        "columnEnd": 49
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 20,
        "lineEnd": 23,
        "columnStart": 25,
        "columnEnd": 39
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 1,
        "lineEnd": 3,
        "columnStart": 25,
        "columnEnd": 60
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 17,
        "lineEnd": 17,
        "columnStart": 4,
        "columnEnd": 49
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 20,
        "lineEnd": 23,
        "columnStart": 25,
        "columnEnd": 39
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM ubuntu:16.04 as souffle\nRUN apt-get -y update && apt-get -y --no-install-recommends install automake bison build-essential \\\n    doxygen flex g++ gcc gcc-multilib g++-multilib git libtool make mcpp \\\n    pkg-config sqlite3 libsqlite3-dev zlib1g-dev libffi-dev && rm -rf /var/lib/apt/lists/*;\nRUN git clone -b 1.5.1 https://github.com/souffle-lang/souffle\nRUN cd souffle && sh ./bootstrap\nRUN cd souffle && ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --prefix=/usr --enable-64bit-domain --disable-provenance\nRUN cd souffle && make -j4 install\nRUN cd souffle && cp include/souffle/RamTypes.h /usr/include/souffle/\n\nFROM ubuntu:16.04\n\nARG CMAKE_VERSION=3.9\nARG CXX_COMPILER=g++-7\n\n# Copy souffle\nRUN apt-get -y update && \\\n    apt-get -y --no-install-recommends install software-properties-common && \\\n    add-apt-repository ppa:jonathonf/gcc-7.1 && \\\n    apt-get -y update && rm -rf /var/lib/apt/lists/*;\nRUN apt-get -y update && apt-get -y --no-install-recommends install autoconf automake bison build-essential clang \\\n    doxygen flex g++ gcc gcc-multilib g++-multilib git libtool make mcpp pkg-config \\\n    sqlite3 libsqlite3-dev zlib1g-dev clang ed libpcre3-dev libncurses5-dev wget \\\n    curl libc++1 libc++abi1 gcc-7 g++-7 && rm -rf /var/lib/apt/lists/*;\n\nCOPY --from=souffle /usr/bin/souffle-compile /usr/bin/souffle-compile\nCOPY --from=souffle /usr/bin/souffle-config /usr/bin/souffle-config\nCOPY --from=souffle /usr/bin/souffle /usr/bin/souffle\nCOPY --from=souffle /usr/bin/souffle-profile /usr/bin/souffle-profile\nCOPY --from=souffle /usr/include/souffle/ /usr/include/souffle\n\n# Fix symlinks for libc++/libc++abi.\nRUN ln -s libc++.so.1 /usr/lib/x86_64-linux-gnu/libc++.so\nRUN ln -s libc++abi.so.1 /usr/lib/x86_64-linux-gnu/libc++abi.so\n\n# We use clang to build examples during testing. But clang 3.8 is not\n# compatible with the gcc-7 headers. So we need to work around this\nRUN mv /usr/bin/clang++ /usr/bin/clang++.real\nRUN printf \"#\\!/bin/sh\\nclang++.real --gcc-toolchain=/usr/lib/gcc/x86_64-linux-gnu/5.4.0 -L/usr/lib/gcc/x86_64-linux-gnu/5.4.0/ -I/usr/include/c++/5/ -I/usr/include/x86_64-linux-gnu/c++/5/ \\$*\\n\" > /usr/bin/clang++\nRUN chmod a+x /usr/bin/clang++\nRUN ln -s /usr/lib/gcc/x86_64-linux-gnu/5/crtbegin.o /usr/lib/x86_64-linux-gnu/\nRUN ln -s /usr/lib/gcc/x86_64-linux-gnu/5/crtend.o /usr/lib/x86_64-linux-gnu/\n\n\n# Install CMake\nRUN curl -f -SL https://cmake.org/files/v$CMAKE_VERSION/cmake-$CMAKE_VERSION.0-Linux-x86_64.tar.gz \\\n    | tar -xz --strip-components=1 -C /usr/local\n\nRUN ldconfig\n\n# Install capstone\nRUN cd /usr/local/src \\\n    && wget https://github.com/aquynh/capstone/archive/4.0.1.tar.gz \\\n    && tar xf 4.0.1.tar.gz \\\n    && cd capstone-4.0.1 \\\n    && CAPSTONE_ARCHS=x86 ./make.sh \\\n    && CAPSTONE_ARCHS=x86 ./make.sh install && rm 4.0.1.tar.gz\n\nCOPY . /ddisasm\n\n# Build GTIRB\nRUN rm -rf /ddisasm/gtirb/build /ddisasm/gtirb/CMakeCache.txt /ddisasm/gtirb/CMakeFiles /ddisasm/gtirb/CMakeScripts\nRUN cd /ddisasm/gtirb/ && cmake ./ -Bbuild -DCMAKE_CXX_COMPILER=${CXX_COMPILER}  && cd build &&  make\n\n# Build gtirb-pprinter\nRUN rm -rf /ddisasm/gtirb-pprinter/build /ddisasm/gtirb-pprinter/CMakeCache.txt /ddisasm/gtirb-pprinter/CMakeFiles /ddisasm/gtirb-pprinter/CMakeScripts\nRUN cd /ddisasm/gtirb-pprinter/ && cmake ./ -Bbuild -DCMAKE_CXX_COMPILER=${CXX_COMPILER} && cd build &&  make\n\n# Build ddisasm\nENV TERM xterm\nRUN rm -rf /ddisasm/build /ddisasm/CMakeCache.txt /ddisasm/CMakeFiles /ddisasm/CMakeScripts\nWORKDIR /ddisasm\nRUN cmake ./  -Bbuild -DCMAKE_CXX_COMPILER=${CXX_COMPILER} -DCORES=8 && cd build && make\nENV PATH=/ddisasm/build/bin:$PATH\n"
}