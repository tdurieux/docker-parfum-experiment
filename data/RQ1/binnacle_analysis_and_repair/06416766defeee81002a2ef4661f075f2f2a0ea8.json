{
  "startTime": 1674246292773,
  "endTime": 1674246293092,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 26,
        "lineEnd": 26,
        "columnStart": 5,
        "columnEnd": 73
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 78,
        "lineEnd": 78,
        "columnStart": 4,
        "columnEnd": 85
      }
    },
    {
      "rule": "curlUseHttpsUrl",
      "position": {
        "lineStart": 26,
        "lineEnd": 26,
        "columnStart": 5,
        "columnEnd": 73
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 81,
        "lineEnd": 81,
        "columnStart": 2,
        "columnEnd": 98
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 29,
        "lineEnd": 29,
        "columnStart": 5,
        "columnEnd": 39
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 30,
        "lineEnd": 30,
        "columnStart": 47,
        "columnEnd": 99
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 37,
        "lineEnd": 43,
        "columnStart": 4,
        "columnEnd": 7
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 37,
        "lineEnd": 43,
        "columnStart": 4,
        "columnEnd": 7
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM golang:1.10.1-stretch\n\n# Support Raspberry Pi 2 and newer\nENV GOARM 7\n\n# The names of the architectures that we're fetching cross-compilers for from the Debian packages\nENV DEB_CROSSPLATFORMS \\\n\tarmhf \\\n\tarm64 \\\n\tppc64el\n\n# The go platforms we are supporting to cross-compile\nENV GO_CROSSPLATFORMS \\\n\tlinux/arm \\\n\tlinux/arm64 \\\n\tlinux/ppc64le\n\n# The names of the gcc cross-compilers we have installed\nENV GCC_CROSSCOMPILERS \\\n\tarm-linux-gnueabihf \\\n\taarch64-linux-gnu \\\n\tpowerpc64le-linux-gnu\n\n# Temporarily add the Debian repositories, because we're going to install gcc cross-compilers from there\n# Install the build-essential and crossbuild-essential-ARCH packages\nRUN echo \"deb http://emdebian.org/tools/debian/ jessie main\" > /etc/apt/sources.list.d/cgocrosscompiling.list \\\n  && curl -f https://emdebian.org/tools/debian/emdebian-toolchain-archive.key | apt-key add - \\\n  && for platform in ${DEB_CROSSPLATFORMS}; do dpkg --add-architecture $platform; done \\\n  && apt-get update \\\n  && apt-get install --no-install-recommends -y build-essential \\\n  && for platform in ${DEB_CROSSPLATFORMS}; do apt-get install --no-install-recommends -y crossbuild-essential-${platform}; done \\\n  && apt-get clean && rm -rf /var/lib/apt/lists/*\n\n# Install some required packages\n# libpcap is required because we're linking against its C libraries from the prog/weaver binary\n# flex and bison are required packages for compiling libpcap manually later\nRUN apt-get update \\\n\t&& apt-get install --no-install-recommends -y \\\n\t\tlibpcap-dev \\\n\t\tpython-requests \\\n\t\ttime \\\n\t\tfile \\\n\t\tflex \\\n\t\tbison && rm -rf /var/lib/apt/lists/*;\n\nRUN curl -fsSLo shfmt https://github.com/mvdan/sh/releases/download/v1.3.0/shfmt_v1.3.0_linux_amd64 && \\\n\techo \"b1925c2c405458811f0c227266402cf1868b4de529f114722c2e3a5af4ac7bb2  shfmt\" | sha256sum -c && \\\n\tchmod +x shfmt && \\\n\tmv shfmt /usr/bin\n\n# Install common Go tools\nRUN go get \\\n    github.com/weaveworks/build-tools/cover \\\n    github.com/mattn/goveralls \\\n\tgolang.org/x/lint/golint \\\n\tgithub.com/fzipp/gocyclo \\\n\tgithub.com/fatih/hclfmt \\\n\tgithub.com/client9/misspell/cmd/misspell\n\n# First clean, because we're gonna rebuild the std both with -race enabled and disabled\n# Running go install std twice is intentional and required, as content is written in two different directories\n# (/usr/local/go/pkg/linux_amd64 vs /usr/local/go/pkg/linux_amd64_race)\n# The other architectures do not have support for -race\nRUN go clean -i net \\\n\t&& go install -tags netgo std \\\n\t&& go install -race -tags netgo std\n\n# Prebuild std for the other architectures\nRUN for platform in ${GO_CROSSPLATFORMS}; do \\\n\t\tGOOS=${platform%/*} GOARCH=${platform##*/} \\\n\t\t\tgo install -tags netgo std; done\n\n# Allow full write access to the Go folders for anyone\nRUN chmod -R a+w /usr/local/go\n\n# The libpcap version from Debian packages is 1.6.2, matching that version here although newer versions of libpcap have been released\n# We have to cross-compile the libpcap library for the new architectures, that's what we're doing here\nENV LIBPCAP_CROSS_VERSION=1.6.2\nRUN curl -f -sSL https://www.tcpdump.org/release/libpcap-${LIBPCAP_CROSS_VERSION}.tar.gz | tar -xz \\\n\t&& cd libpcap-${LIBPCAP_CROSS_VERSION} \\\n\t&& for crosscompiler in ${GCC_CROSSCOMPILERS}; do \\\n\t\tCC=${crosscompiler}-gcc ac_cv_linux_vers=2 ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --host=${crosscompiler} --with-pcap=linux \\\n\t\t&& make \\\n\t\t&& export LIB_DIR=\"/usr/local/lib/${crosscompiler}-gcc\" VER=\"$(cat ./VERSION)\" MAJOR_VER=\"$(sed 's/\\([0-9][0-9]*\\)\\..*/\\1/' ./VERSION)\" \\\n\t\t&& mkdir -p ${LIB_DIR} \\\n\t\t&& cp -f libpcap.a libpcap.so.${VER} ${LIB_DIR} \\\n\t\t&& ln -sf libpcap.so.${VER} /usr/local/lib/libpcap.so.${MAJOR_VER} \\\n\t\t&& ln -sf libpcap.so.${MAJOR_VER} /usr/local/lib/libpcap.so \\\n\t\t&& make clean; done\n\n# Install Docker\nRUN curl -fsSL https://get.docker.com | VERSION=18.06.0-ce /bin/sh\n\nCOPY build.sh /\nENTRYPOINT [\"sh\", \"/build.sh\"]\n"
}