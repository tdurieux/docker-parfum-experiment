{
  "startTime": 1674234188967,
  "endTime": 1674234189428,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 55,
        "lineEnd": 55,
        "columnStart": 4,
        "columnEnd": 87
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 58,
        "lineEnd": 58,
        "columnStart": 4,
        "columnEnd": 40
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM nvidia/cuda:9.2-cudnn7-devel-ubuntu16.04\n\nRUN apt-get update -y && \\\n    apt-get install -y --no-install-recommends \\\n    ffmpeg \\\n    curl \\\n    git \\\n    build-essential \\\n    gfortran \\\n    nasm \\\n    tmux \\\n    sudo \\\n    openssh-client \\\n    libgoogle-glog-dev \\\n    rsync \\\n    wget \\\n    cmake \\\n    automake \\\n    libgmp3-dev \\\n    cpio \\\n    libtool \\\n    libyaml-dev \\\n    realpath \\\n    valgrind \\\n    software-properties-common \\\n    unzip \\\n    libz-dev \\\n    vim \\\n    emacs \\\n    zsh \\\n    locales \\\n    python \\\n    python-dev \\\n    python-pip \\\n    python-pip \\\n    python-wheel \\\n    python-setuptools \\\n    python3 \\\n    python3-dev \\\n    python3-pip \\\n    python3-wheel \\\n    python3-setuptools \\\n    libibverbs-dev \\\n    libibumad-dev \\\n    libmlx4-1 \\\n    infiniband-diags \\\n    ibverbs-utils \\\n    perftest && \\\n    rm -rf /var/lib/apt/lists/* /var/cache/apt/archives/* && \\\n    echo \"en_US.UTF-8 UTF-8\" > /etc/locale.gen && locale-gen\nARG GROUP_ID=51000\nRUN addgroup --gid ${GROUP_ID} fulltime\n\n# Install OpenMPI with cuda & verbs\nRUN mkdir /root/lib && cd /root/lib && \\\n    curl -f -L -O https://download.open-mpi.org/release/open-mpi/v3.1/openmpi-3.1.1.tar.gz && \\\n    tar zxvf openmpi-3.1.1.tar.gz && rm -rf openmpi-3.1.1.tar.gz && \\\n    cd openmpi-3.1.1 && \\\n    ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --with-cuda --with-verbs && \\\n    make -j8 install\n\nARG USER_ID=1000\nARG USER_NAME=ubuntu\nRUN mkdir -p /home/${USER_NAME}\nRUN useradd -d /home/${USER_NAME} -g ${GROUP_ID} -u ${USER_ID} ${USER_NAME}\nRUN chown ${USER_NAME}:root /home/${USER_NAME}\nRUN chsh -s /usr/bin/zsh ${USER_NAME}\nUSER ${USER_NAME}\nWORKDIR /home/${USER_NAME}\nENV HOME /home/${USER_NAME}\n\n# Install oh-my-zsh\nRUN git clone https://github.com/robbyrussell/oh-my-zsh.git ~/.oh-my-zsh && \\\n    cp ~/.oh-my-zsh/templates/zshrc.zsh-template ~/.zshrc\n\n# Install pyenv\nRUN git clone https://github.com/pyenv/pyenv.git ~/.pyenv && \\\n    echo 'export PYENV_ROOT=\"$HOME/.pyenv\"' >> ~/.zshrc && \\\n    echo 'export PATH=\"$PYENV_ROOT/bin:$PATH\"' >> ~/.zshrc && \\\n    echo 'if command -v pyenv 1>/dev/null 2>&1; then\\n  eval \"$(pyenv init -)\"\\nfi' >> ~/.zshrc\nENV PYENV_ROOT $HOME/.pyenv\nENV PATH $PYENV_ROOT/bin:$PATH\nRUN eval \"$(pyenv init -)\"\n\n# Install miniconda3-4.3.0\nRUN pyenv install miniconda3-4.3.30 && \\\n    pyenv global miniconda3-4.3.30 && \\\n    pyenv rehash\n\nRUN CONDA=$(pyenv which conda) && \\\n    PIP=$(pyenv which pip) && \\\n    $PIP install -U pip && \\\n    $PIP install PyHamcrest && \\\n    $CONDA install -y numpy scipy scikit-learn jupyter matplotlib cython protobuf pandas h5py\n\nENV LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/usr/local/lib\nENV LIBRARY_PATH=$LIBRARY_PATH:/usr/local/lib\nENV CPATH=$CPATH:/usr/local/include\nRUN echo 'export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/usr/local/lib' >> ~/.zshrc && \\\n    echo 'export LIBRARY_PATH=$LIBRARY_PATH:/usr/local/lib' >> ~/.zshrc && \\\n    echo 'export CPATH=$CPATH:/usr/local/include' >> ~/.zshrc\n\nRUN PIP=$(pyenv which pip) && \\\n    $PIP install mpi4py && \\\n    $PIP install chainer==5.0.0b4 && \\\n    $PIP install cupy-cuda92==5.0.0b4 && \\\n    $PIP install chainermn==1.3.0 && \\\n    $PIP install chainercv==0.10.0 && \\\n    $PIP install jupyterthemes && \\\n    JT=$(pyenv which jt) && \\\n    $JT -f dejavu -T -N && \\\n    $PIP install xlrd && \\\n    $PIP install imageio && \\\n    $PIP install tqdm && \\\n    $PIP install pyyaml\n"
}