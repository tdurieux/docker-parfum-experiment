{
  "startTime": 1674246179890,
  "endTime": 1674246180253,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 102,
        "lineEnd": 102,
        "columnStart": 4,
        "columnEnd": 130
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 106,
        "lineEnd": 106,
        "columnStart": 4,
        "columnEnd": 141
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 110,
        "lineEnd": 110,
        "columnStart": 4,
        "columnEnd": 101
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 114,
        "lineEnd": 114,
        "columnStart": 4,
        "columnEnd": 122
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 94,
        "lineEnd": 94,
        "columnStart": 4,
        "columnEnd": 29
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 94,
        "lineEnd": 94,
        "columnStart": 33,
        "columnEnd": 51
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# Build the Go binaries using a multi-stage build phase named \"golang\"\nFROM golang:1.10.3-alpine3.7 as golang\nLABEL maintainer=\"Andrew Kutz <akutz@vmware.com>\"\n\nRUN apk --no-cache add git\n# Build the IBM Bluemix Terraform provider\nRUN git clone https://github.com/IBM-Cloud/terraform-provider-ibm.git \\\n    $GOPATH/src/github.com/IBM-Cloud/terraform-provider-ibm && \\\n    go install github.com/IBM-Cloud/terraform-provider-ibm\n\n# Build Oracle terraform provider\nRUN git clone https://github.com/terraform-providers/terraform-provider-oci.git \\\n    $GOPATH/src/github.com/terraform-providers/terraform-provider-oci && \\\n    cd $GOPATH/src/github.com/terraform-providers/terraform-provider-oci ; git checkout tags/v3.0.0 ; cd - && \\ \n    go install github.com/terraform-providers/terraform-provider-oci\n\n# Build the Packet.net terraform provider\nRUN git clone https://github.com/terraform-providers/terraform-provider-packet.git \\\n    $GOPATH/src/github.com/terraform-providers/terraform-provider-packet && \\\n    cd $GOPATH/src/github.com/terraform-providers/terraform-provider-packet && \\\n    go install github.com/terraform-providers/terraform-provider-packet\n\n# Build the Gzip+Base64 Terraform provider Gzip+base64 & ETCD Provider\nRUN go get github.com/jakexks/terraform-provider-gzip\n\n# Build the Etcd Terraform provider\nRUN go get github.com/paperg/terraform-provider-etcdiscovery\n\n# Build the vSphere CLI tool, govc.\nENV GOVC_VERSION=0.18.0\nRUN go get -d github.com/vmware/govmomi && \\\n    git --work-tree /go/src/github.com/vmware/govmomi \\\n        --git-dir /go/src/github.com/vmware/govmomi/.git \\\n        checkout -b v${GOVC_VERSION} v${GOVC_VERSION} && \\\n    go install github.com/vmware/govmomi/govc\n\n\n#FROM crosscloudci/debian-go:latest\nFROM alpine:3.7\nLABEL maintainer=\"Denver Williams <denver@debian.nz>\"\nENV KUBECTL_VERSION=v1.13.0\nENV HELM_VERSION=v2.13.1\n# PIN to Commit on Master\nENV TERRAFORM_VERSION=0.11.7\n# ENV TERRAFORM_VERSION=master\n# ENV TF_DEV=true\n# ENV TF_RELEASE=true\nENV ARC=amd64\n\n# Install the common dependencies.\nRUN apk --no-cache add \\\n    bash \\\n    ca-certificates \\\n    curl \\\n    git \\\n    jq \\\n    less \\\n    libc6-compat \\\n    openssh-client \\\n    tar \\\n    unzip \\\n    util-linux\n\n# Install the dependencies for rvm.\nRUN apk --no-cache add \\\n    gcc \\\n    gnupg \\\n    libssl1.0 \\\n    linux-headers \\\n    make \\\n    musl-dev \\\n    openssl \\\n    openssl-dev \\\n    procps \\\n    ruby \\\n    zlib \\\n    zlib-dev\n\n# Install pip, used to install the AWS CLI.\nRUN apk --no-cache add \\\n    py2-pip\n\n# Install the dependencies for the Google Cloud SDK.\nRUN apk --no-cache add \\\n    python \\\n    py-crcmod\n\n# Link lib64 to lib\nRUN ln -s /lib /lib64\n\n# Remove the package cache to free space.\nRUN rm -fr /var/cache/apk/*\n\n# Upgrade pip and install the AWS CLI.\nRUN pip install --no-cache-dir --upgrade pip && pip install --no-cache-dir awscli\n\n# Copy the GoVC binary from the golang build stage.\nCOPY --from=golang /go/bin/govc /usr/local/bin/\n\n# Install the Google Cloud SDK\nENV CLOUD_SDK_VERSION=203.0.0\nENV PATH=/google-cloud-sdk/bin:$PATH\nRUN curl -f -sSL https://dl.google.com/dl/cloudsdk/channels/rapid/downloads/google-cloud-sdk-${CLOUD_SDK_VERSION}-linux-x86_64.tar.gz | \\\n    tar xz -C /\n\n# Install the kubectl binary\nRUN curl -f -sSL -o /usr/local/bin/kubectl https://storage.googleapis.com/kubernetes-release/release/${KUBECTL_VERSION}/bin/linux/${ARC}/kubectl && \\\n    chmod +x /usr/local/bin/kubectl\n\n# Install the helm binary\nRUN curl -f -sSL https://storage.googleapis.com/kubernetes-helm/helm-${HELM_VERSION}-linux-${ARC}.tar.gz | \\\n    tar xz --strip-components=1 -C /usr/local/bin linux-${ARC}/helm\n\n# Install the terraform binary\nRUN curl -f -sSLO https://releases.hashicorp.com/terraform/$TERRAFORM_VERSION/terraform_\"${TERRAFORM_VERSION}\"_linux_$ARC.zip && \\\n    unzip terraform_\"${TERRAFORM_VERSION}\"_linux_${ARC}.zip -d /usr/bin\n\n# Copy the Terraform providers from the golang build stage\nCOPY --from=golang /go/bin/terraform-provider-* /usr/local/bin/\n\n# Write the configuration file Terraform uses to query available providers\n# and their binaries\nRUN echo providers { >> ~/.terraformrc && \\\n  echo '    gzip = \"/usr/local/bin/terraform-provider-gzip\"' >> ~/.terraformrc && \\\n  echo '    etcdiscovery = \"/usr/local/bin/terraform-provider-etcdiscovery\"' >> ~/.terraformrc && \\\n  echo '    ibm = \"/usr/local/bin/terraform-provider-ibm\"' >> ~/.terraformrc && \\\n  echo '    oci = \"/usr/local/bin/terraform-provider-oci\"' >> ~/.terraformrc && \\\n  echo '    packet = \"/usr/local/bin/terraform-provider-packet\"' >> ~/.terraformrc && \\\n  echo } >> ~/.terraformrc\n\n\n#Add Terraform Modules\nCOPY validate-cluster/ /cncf/validate-cluster/\n\nCOPY aws/ /cncf/aws/\nCOPY azure/ /cncf/azure/\nCOPY ibm/ /cncf/ibm/\nCOPY gce/ /cncf/gce/\nCOPY gke/ /cncf/gke/\nCOPY openstack/ /cncf/openstack/\nCOPY oci/ /cncf/oci/\nCOPY packet/ /cncf/packet/\nCOPY vsphere/ /cncf/vsphere/\n# END PROVIDERS - DO NOT REPLACE\n\nCOPY bootstrap/ /cncf/bootstrap/\nCOPY dns/ /cncf/dns/\nCOPY dns-etcd/ /cncf/dns-etcd/\n\nCOPY kubeconfig/ /cncf/kubeconfig/\nCOPY socat/ /cncf/socat/\nCOPY tls/ /cncf/tls/\n\nCOPY provision.sh /cncf/\nCOPY s3-backend.tf /cncf/\nCOPY file-backend.tf /cncf/\n\nCOPY rbac/ /cncf/rbac/\nCOPY addons/ /cncf/addons/\nCOPY addons-arm/ /cncf/addons-arm/\n\nCOPY master_templates-v1.7.2/ /cncf/master_templates-v1.7.2/\nCOPY master_templates-v1.8.1/ /cncf/master_templates-v1.8.1/\nCOPY master_templates-v1.9.0-alpha.1/ /cncf/master_templates-v1.9.0-alpha.1/\nCOPY master_templates-v1.9.0/ /cncf/master_templates-v1.9.0/\nCOPY master_templates-v1.9.0-dns-etcd/ /cncf/master_templates-v1.9.0-dns-etcd/\nCOPY master_templates-v1.10.0/ /cncf/master_templates-v1.10.0/\nCOPY master_templates-v1.10.0-ubuntu/ /cncf/master_templates-v1.10.0-ubuntu/\nCOPY master_templates-v1.13.0/ /cncf/master_templates-v1.13.0/\nCOPY master_templates-v1.13.0-ubuntu/ /cncf/master_templates-v1.13.0-ubuntu/\n\nCOPY worker_templates-v1.7.2/ /cncf/worker_templates-v1.7.2/\nCOPY worker_templates-v1.8.1/ /cncf/worker_templates-v1.8.1/\nCOPY worker_templates-v1.9.0-alpha.1/ /cncf/worker_templates-v1.9.0-alpha.1/\nCOPY worker_templates-v1.9.0/ /cncf/worker_templates-v1.9.0/\nCOPY worker_templates-v1.10.0/ /cncf/worker_templates-v1.10.0/\nCOPY worker_templates-v1.10.0-ubuntu/ /cncf/worker_templates-v1.10.0-ubuntu/\nCOPY worker_templates-v1.13.0/ /cncf/worker_templates-v1.13.0/\nCOPY worker_templates-v1.13.0-ubuntu/ /cncf/worker_templates-v1.13.0-ubuntu/\n\n# Ensure scripts are executable.\nRUN chmod +x /cncf/provision.sh \\\n             /cncf/vsphere/destroy-force.sh\n\nWORKDIR /cncf/\n\nCMD [\"bash\", \"-c\", \"/cncf/provision.sh\"]\n"
}