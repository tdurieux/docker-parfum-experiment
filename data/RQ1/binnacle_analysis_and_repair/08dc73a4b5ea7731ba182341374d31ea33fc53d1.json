{
  "startTime": 1674242216266,
  "endTime": 1674242217387,
  "originalSmells": [
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 24,
        "lineEnd": 24,
        "columnStart": 18,
        "columnEnd": 64
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 32,
        "lineEnd": 65,
        "columnStart": 52,
        "columnEnd": 6
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 71,
        "lineEnd": 73,
        "columnStart": 4,
        "columnEnd": 35
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 78,
        "lineEnd": 78,
        "columnStart": 22,
        "columnEnd": 90
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 124,
        "lineEnd": 124,
        "columnStart": 9,
        "columnEnd": 106
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 167,
        "lineEnd": 167,
        "columnStart": 18,
        "columnEnd": 64
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 175,
        "lineEnd": 208,
        "columnStart": 52,
        "columnEnd": 6
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 214,
        "lineEnd": 216,
        "columnStart": 4,
        "columnEnd": 35
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 124,
        "lineEnd": 124,
        "columnStart": 9,
        "columnEnd": 106
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 24,
        "lineEnd": 24,
        "columnStart": 18,
        "columnEnd": 64
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 78,
        "lineEnd": 78,
        "columnStart": 22,
        "columnEnd": 90
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 124,
        "lineEnd": 124,
        "columnStart": 9,
        "columnEnd": 106
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 167,
        "lineEnd": 167,
        "columnStart": 18,
        "columnEnd": 64
      }
    }
  ],
  "repairedSmells": [
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 124,
        "lineEnd": 124,
        "columnStart": 9,
        "columnEnd": 130
      }
    }
  ],
  "repairedDockerfile": "# This Dockerfile provides a starting point for a ROCm installation of\n# MIOpen and tensorflow.\n\n# This Dockerfile uses a multi-stage build\n# The first stage is to build the HCC, HIP and other tools we need for the TF build\n# The second stage is to do the TF CI build itself\n# The separation of stages allows to reduce the size of the final docker image\n# by copying over only the packages built in the first stage over to the second one\n\n\n###################################################\n# Stage 1 : build the tools needed for the TF build\n#     Note: experimental! hip-clang build/install\n###################################################\n\nFROM ubuntu:xenial\n\nARG DEB_ROCM_REPO=http://repo.radeon.com/rocm/apt/debian/\nARG ROCM_PATH=/opt/rocm\n\nENV DEBIAN_FRONTEND noninteractive\nENV HOME /home/rocm-user\nRUN mkdir -p $HOME\n\nRUN apt update && apt install --no-install-recommends -y wget software-properties-common && rm -rf /var/lib/apt/lists/*;\n\n# Add rocm repository\nRUN apt-get clean all\nRUN wget -qO - $DEB_ROCM_REPO/rocm.gpg.key | apt-key add -\nRUN sh -c  \"echo deb [arch=amd64] $DEB_ROCM_REPO xenial main > /etc/apt/sources.list.d/rocm.list\"\n\n# Install misc pkgs\nRUN apt-get update --allow-insecure-repositories && DEBIAN_FRONTEND=noninteractive apt-get --no-install-recommends install -y \\\n  build-essential \\\n  clang-3.8 \\\n  clang-format-3.8 \\\n  clang-tidy-3.8 \\\n  cmake \\\n  cmake-qt-gui \\\n  ssh \\\n  curl \\\n  apt-utils \\\n  pkg-config \\\n  g++-multilib \\\n  git \\\n  libunwind-dev \\\n  libfftw3-dev \\\n  libelf-dev \\\n  libncurses5-dev \\\n  libpthread-stubs0-dev \\\n  vim \\\n  gfortran \\\n  libboost-program-options-dev \\\n  libssl-dev \\\n  libboost-dev \\\n  libboost-system-dev \\\n  libboost-filesystem-dev \\\n  rpm \\\n  libnuma-dev \\\n  pciutils \\\n  virtualenv \\\n  python-pip \\\n  python3-pip \\\n  libxml2 \\\n  libxml2-dev \\\n  wget && \\\n  apt-get clean && \\\n  rm -rf /var/lib/apt/lists/*\n\n# Install rocm pkgs\nRUN apt-get update --allow-insecure-repositories && \\\n    DEBIAN_FRONTEND=noninteractive apt-get --no-install-recommends install -y --allow-unauthenticated \\\n    rocm-dev rocm-libs rocm-utils \\\n    rocm-profiler cxlactivitylogger && \\\n    apt-get clean && \\\n    rm -rf /var/lib/apt/lists/*\n\n# install packages needed for this image\nRUN apt-get update && apt-get install --no-install-recommends -y sudo python rpm git mercurial libxml2 libxml2-dev && rm -rf /var/lib/apt/lists/*;\n\n# Build and install LLVM with Clang and LLD. Checkout clang and lld into llvm/tools/ dir.\nRUN cd $HOME && git clone --single-branch -b amd-common https://github.com/RadeonOpenCompute/llvm.git\nWORKDIR $HOME/llvm/tools\nRUN git clone --single-branch -b amd-common http://github.com/radeonopencompute/clang.git\nRUN git clone --single-branch -b amd-common https://github.com/RadeonOpenCompute/lld.git\nRUN mkdir $HOME/llvm/build\nWORKDIR $HOME/llvm/build\nRUN cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=/opt/rocm/llvm -DLLVM_TARGETS_TO_BUILD=\"AMDGPU;X86\" .. && make -j$(nproc) && sudo make -j$(nproc) install\n\n# Build and install ROCDL\nWORKDIR $HOME\nRUN git clone --single-branch -b master https://github.com/RadeonOpenCompute/ROCm-Device-Libs\nRUN mkdir -p $HOME/ROCm-Device-Libs/build\nWORKDIR $HOME/ROCm-Device-Libs/build\nENV LLVM_BUILD=$HOME/llvm/build\nRUN CC=$LLVM_BUILD/bin/clang cmake -DCMAKE_BUILD_TYPE=Release -DLLVM_DIR=$LLVM_BUILD -DAMDHSACOD=/opt/rocm/hsa/bin/x86_64/amdhsacod .. && make -j$(nproc) package && sudo dpkg -i ./*.deb\n\n# Build and install comgr\nWORKDIR $HOME\nRUN git clone --single-branch -b master https://github.com/RadeonOpenCompute/ROCm-CompilerSupport.git\nRUN mkdir $HOME/ROCm-CompilerSupport/build\nWORKDIR $HOME/ROCm-CompilerSupport/build\nRUN cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_PREFIX_PATH=\"/opt/rocm/llvm;/opt/rocm/lib\" ../lib/comgr && make -j$(nproc) && cpack -G DEB && sudo dpkg -i ./*.deb\n\n# Build and install HCC\nWORKDIR $HOME\nRUN git clone --recursive --single-branch -b clang_tot_upgrade https://github.com/RadeonOpenCompute/hcc.git\nRUN mkdir -p $HOME/hcc/build\nWORKDIR $HOME/hcc/build\nRUN cmake -DCMAKE_BUILD_TYPE=Release .. && make -j$(nproc) package && sudo dpkg -i ./*.deb\n\n# Build and install HIP-HCC-RT\nWORKDIR $HOME\nRUN git clone --single-branch -b master https://github.com/ROCm-Developer-Tools/HIP\nRUN mkdir $HOME/HIP/build\nWORKDIR $HOME/HIP/build\nRUN cmake -DCMAKE_BUILD_TYPE=Release -DHIP_COMPILER=clang .. && make -j$(nproc) package && sudo dpkg -i ./*.deb\n\n# Set up environment for hip-clang\nENV HIP_CLANG_PATH=/opt/rocm/llvm/bin\nENV DEVICE_LIB_PATH=/opt/rocm/lib\nENV HIP_CLANG_HCC_COMPAT_MODE=1\n\n# Workaround : build MIOpen from source using fork of the public repo with the temporary fix for issue #1061 ($HOME env not set)\nRUN sudo apt-get install --no-install-recommends -y wget unzip libssl-dev libboost-dev libboost-system-dev libboost-filesystem-dev && rm -rf /var/lib/apt/lists/*;\n\nRUN cd $HOME && git clone https://github.com/RadeonOpenCompute/rocm-cmake.git\nRUN cd $HOME/rocm-cmake && mkdir build && cd build && cmake .. && sudo make package -j$(nproc) && sudo dpkg -i ./rocm-cmake*.deb\n\nRUN cd $HOME && git clone --single-branch -b master https://github.com/ROCmSoftwarePlatform/MIOpenGEMM.git\nRUN cd $HOME/MIOpenGEMM && mkdir build && cd build && cmake .. && sudo make package -j$(nproc) && sudo dpkg -i ./miopengemm*.deb\n\nRUN cd $HOME && mkdir half && cd half && sudo wget https://downloads.sourceforge.net/project/half/half/1.12.0/half-1.12.0.zip && sudo unzip *.zip\n\n# Build rocBLAS from source\nRUN cd $HOME && git clone --single-branch -b master-rocm-2.3 https://github.com/ROCmSoftwarePlatform/rocBLAS.git && cd rocBLAS && ./install.sh -id --hip-clang\nRUN cd $HOME && git clone --single-branch -b master-rocm-2.3 https://github.com/ROCmSoftwarePlatform/hipBLAS.git && cd hipBLAS && ./install.sh -id\n\n# Build rocFFT from source\nRUN cd $HOME && git clone --single-branch -b master https://github.com/ROCmSoftwarePlatform/rocFFT.git && cd rocFFT && ./install.sh -id --hip-clang\n\n# Build rocRAND from source\nRUN cd $HOME && git clone --single-branch -b master-rocm-2.3 https://github.com/ROCmSoftwarePlatform/rocRAND.git && mkdir rocRAND/build && cd rocRAND/build && CXX=/opt/rocm/hip/bin/hipcc cmake .. && make package -j $(nproc) && dpkg -i ./rocrand*.deb\n\nRUN cd $HOME && git clone --single-branch -b master https://github.com/ROCmSoftwarePlatform/MIOpen.git\nRUN cd $HOME/MIOpen && mkdir build && cd build && \\\n  CXX=/opt/rocm/hip/bin/hipcc cmake \\\n    -DMIOPEN_BACKEND=HIP \\\n    -DCMAKE_PREFIX_PATH=\"/opt/rocm/hcc;/opt/rocm/hip\" \\\n    -DCMAKE_CXX_FLAGS=\"-isystem /usr/include/x86_64-linux-gnu/ -I/opt/rocm/hcc/include\" \\\n    -DHALF_INCLUDE_DIR=$HOME/half/include \\\n    -DCMAKE_BUILD_TYPE=Release \\\n    .. && sudo make package -j$(nproc)\n\n###########################\n# Stage 2 : do the TF build\n###########################\n\nFROM ubuntu:xenial\nMAINTAINER Jeff Poznanovic <jeffrey.poznanovic@amd.com>\n\nARG DEB_ROCM_REPO=http://repo.radeon.com/rocm/apt/debian/\nARG ROCM_PATH=/opt/rocm\n\nENV DEBIAN_FRONTEND noninteractive\nENV TF_NEED_ROCM 1\nENV HOME /root/\nRUN apt update && apt install --no-install-recommends -y wget software-properties-common && rm -rf /var/lib/apt/lists/*;\n\n# Add rocm repository\nRUN apt-get clean all\nRUN wget -qO - $DEB_ROCM_REPO/rocm.gpg.key | apt-key add -\nRUN sh -c  \"echo deb [arch=amd64] $DEB_ROCM_REPO xenial main > /etc/apt/sources.list.d/rocm.list\"\n\n# Install misc pkgs\nRUN apt-get update --allow-insecure-repositories && DEBIAN_FRONTEND=noninteractive apt-get --no-install-recommends install -y \\\n  build-essential \\\n  clang-3.8 \\\n  clang-format-3.8 \\\n  clang-tidy-3.8 \\\n  cmake \\\n  cmake-qt-gui \\\n  ssh \\\n  curl \\\n  apt-utils \\\n  pkg-config \\\n  g++-multilib \\\n  git \\\n  libunwind-dev \\\n  libfftw3-dev \\\n  libelf-dev \\\n  libncurses5-dev \\\n  libpthread-stubs0-dev \\\n  vim \\\n  gfortran \\\n  libboost-program-options-dev \\\n  libssl-dev \\\n  libboost-dev \\\n  libboost-system-dev \\\n  libboost-filesystem-dev \\\n  rpm \\\n  libnuma-dev \\\n  pciutils \\\n  virtualenv \\\n  python-pip \\\n  python3-pip \\\n  libxml2 \\\n  libxml2-dev \\\n  wget && \\\n  apt-get clean && \\\n  rm -rf /var/lib/apt/lists/*\n\n# Install rocm pkgs\nRUN apt-get update --allow-insecure-repositories && \\\n    DEBIAN_FRONTEND=noninteractive apt-get --no-install-recommends install -y --allow-unauthenticated \\\n    rocm-dev rocm-libs rocm-utils \\\n    rocm-profiler cxlactivitylogger && \\\n    apt-get clean && \\\n    rm -rf /var/lib/apt/lists/*\n\n# COPY and install llvm built in the previous stage\nRUN rm -rf /opt/rocm/llvm && mkdir -p /opt/rocm/llvm\nCOPY --from=tool_builder /opt/rocm/llvm/ /opt/rocm/llvm/\n\n# COPY and install the ROCDL package built in the previous stage\nRUN mkdir -p $HOME/pkgs/ROCm-Device-Libs\nCOPY --from=tool_builder /home/rocm-user/ROCm-Device-Libs/build/*.deb $HOME/pkgs/ROCm-Device-Libs/\nRUN cd $HOME/pkgs/ROCm-Device-Libs && dpkg -i *.deb\n\n# COPY and install the comgr package built in the previous stage\nRUN mkdir -p $HOME/pkgs/ROCm-CompilerSupport\nCOPY --from=tool_builder /home/rocm-user/ROCm-Device-Libs/build/*.deb $HOME/pkgs/ROCm-CompilerSupport/\nRUN cd $HOME/pkgs/ROCm-CompilerSupport && dpkg -i *.deb\n\n# COPY and install the hcc package built in the previous stage\nRUN mkdir -p $HOME/pkgs/hcc\nCOPY --from=tool_builder /home/rocm-user/hcc/build/*.deb $HOME/pkgs/hcc/\nRUN cd $HOME/pkgs/hcc && dpkg -i *.deb\n\n# COPY and install the HIP package built in the previous stage\nRUN mkdir -p $HOME/pkgs/HIP\nCOPY --from=tool_builder /home/rocm-user/HIP/build/*.deb $HOME/pkgs/HIP/\nRUN cd $HOME/pkgs/HIP && dpkg -i *.deb\n\n# COPY and install the rocBLAS package built in the previous stage\nRUN mkdir -p $HOME/pkgs/rocBLAS\nCOPY --from=tool_builder /home/rocm-user/rocBLAS/build/release/*.deb $HOME/pkgs/rocBLAS/\nRUN cd $HOME/pkgs/rocBLAS && dpkg -i *.deb\n\n# COPY and install the hipBLAS package built in the previous stage\nRUN mkdir -p $HOME/pkgs/hipBLAS\nCOPY --from=tool_builder /home/rocm-user/hipBLAS/build/*.deb $HOME/pkgs/hipBLAS/\nRUN cd $HOME/pkgs/hipBLAS && dpkg -i *.deb\n\n# COPY and install the rocFFT package built in the previous stage\nRUN mkdir -p $HOME/pkgs/rocFFT\nCOPY --from=tool_builder /home/rocm-user/rocFFT/build/*.deb $HOME/pkgs/rocFFT/\nRUN cd $HOME/pkgs/rocFFT && dpkg -i *.deb\n\n# COPY and install the rocRAND package built in the previous stage\nRUN mkdir -p $HOME/pkgs/rocRAND\nCOPY --from=tool_builder /home/rocm-user/rocBLAS/build/*.deb $HOME/pkgs/rocRAND/\nRUN cd $HOME/pkgs/rocRAND && dpkg -i *.deb\n\n# COPY and install the MIOpenGEMM package built in the previous stage\nRUN mkdir -p $HOME/pkgs/MIOpenGEMM\nCOPY --from=tool_builder /home/rocm-user/MIOpenGEMM/build/*.deb $HOME/pkgs/MIOpenGEMM/\nRUN cd $HOME/pkgs/MIOpenGEMM && dpkg -i *.deb\n\n# COPY and install the MIOpen package built in the previous stage\nRUN mkdir -p $HOME/pkgs/MIOpen\nCOPY --from=tool_builder /home/rocm-user/MIOpen/build/*.deb $HOME/pkgs/MIOpen/\nRUN cd $HOME/pkgs/MIOpen && dpkg -i *.deb\n\nENV HCC_HOME=$ROCM_PATH/hcc\nENV HIP_PATH=$ROCM_PATH/hip\nENV OPENCL_ROOT=$ROCM_PATH/opencl\nENV PATH=\"$HCC_HOME/bin:$HIP_PATH/bin:${PATH}\"\nENV PATH=\"$ROCM_PATH/bin:${PATH}\"\nENV PATH=\"$OPENCL_ROOT/bin:${PATH}\"\n\n# Add target file to help determine which device(s) to build for\nRUN bash -c 'echo -e \"gfx803\\ngfx900\\ngfx906\" >> /opt/rocm/bin/target.lst'\n\n# Set up environment for hip-clang\nENV HIP_CLANG_PATH=/opt/rocm/llvm/bin\nENV DEVICE_LIB_PATH=/opt/rocm/lib\n\n# Copy and run the install scripts.\nCOPY install/*.sh /install/\nARG DEBIAN_FRONTEND=noninteractive\nRUN /install/install_bootstrap_deb_packages.sh\nRUN add-apt-repository -y ppa:openjdk-r/ppa && \\\n    add-apt-repository -y ppa:george-edison55/cmake-3.x\nRUN /install/install_deb_packages.sh\nRUN /install/install_pip_packages.sh\nRUN /install/install_bazel.sh\nRUN /install/install_golang.sh\n\n# Set up the master bazelrc configuration file.\nCOPY install/.bazelrc /etc/bazel.bazelrc\n\n# Configure the build for our CUDA configuration.\nENV TF_NEED_ROCM 1\n\n"
}