{
  "startTime": 1674243796427,
  "endTime": 1674243796640,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 144,
        "lineEnd": 144,
        "columnStart": 7,
        "columnEnd": 102
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM fedora:27\n\n# set this date to cause all images to be updated\nENV REFRESHED_AT 2019-05-23-09-00\n\n###################################################\n# create data directories and volumes\n###################################################\nWORKDIR /\nRUN mkdir /data\n\nVOLUME /data/install\nVOLUME /data/src\nVOLUME /data/build\n\nARG PROXY_HOST_BUILD_ARG=\"\"\nARG PROXY_PORT_BUILD_ARG=\"\"\n\nENV PROXY_HOST=$PROXY_HOST_BUILD_ARG\nENV PROXY_PORT=$PROXY_PORT_BUILD_ARG\n\nENV BUILD_DIR /data/build\nENV SRC_DIR /data/src\nENV INSTALL_DIR /data/install\nENV CURL_HOME /etc\n\n###################################################\n# copy scripts and set start command\n###################################################\nCOPY scripts /data/scripts\n\n###################################################\n# Setup dnf.conf\n###################################################\nRUN /data/scripts/setup-proxy.sh\n\n###################################################\n# set timezone\n###################################################\nRUN rm /etc/localtime \\\n    && ln -s /usr/share/zoneinfo/Europe/Berlin /etc/localtime\n\n###################################################\n# install base packages\n###################################################\nRUN dnf update -y \\\n    && dnf install -y \\\n    autoconf \\\n    automake \\\n    cmake \\\n    corkscrew \\\n    expat-devel \\\n    file \\\n    gcc-c++ \\\n    gdb \\\n    git \\\n    glibc.i686 \\\n    icecream \\\n    iputils \\\n    libcurl \\\n    libcurl-devel \\\n    libstdc++.i686 \\\n    libtool \\\n    libxcb \\\n    libxcb-devel \\\n    libX11-devel \\\n    libXi-devel \\\n    libXrender-devel \\\n    net-tools \\\n    openssl \\\n    openssl-devel \\\n    patch \\\n    perl-version \\\n    python \\\n    strace \\\n    tar \\\n    unzip \\\n    wget \\\n    which \\\n    xcb-util \\\n    xcb-util-devel \\\n    xcb-util-*-devel \\\n    zlib.i686 \\\n    java-1.8.0-openjdk \\\n    xz \\\n    maven \\\n    hostname.x86_64 \\\n    clang \\\n    libcxx-devel \\\n    && dnf groupinstall -y 'Development Tools' \\\n    && dnf clean all\n\n###################################################\n# Generate certificates\n###################################################\nCOPY openssl.conf /tmp/openssl.cnf\nRUN mkdir -p /data/ssl-data \\\n    && /data/scripts/gen-certificates.sh --configfile /tmp/openssl.cnf --destdir /data/ssl-data\n\n###################################################\n# Install payara\n###################################################\nENV PATH ${PATH}:/opt/payara41/glassfish/bin\n\nRUN wget --quiet -O /opt/payara-4.1.1.164.zip https://s3-eu-west-1.amazonaws.com/payara.fish/Payara+Downloads/Payara+4.1.1.164/payara-4.1.1.164.zip && \\\n    unzip -qq /opt/payara-4.1.1.164.zip -d /opt && \\\n    rm /opt/payara-4.1.1.164.zip\n\nRUN asadmin start-domain && \\\n    asadmin --user admin create-managed-scheduled-executor-service --corepoolsize=100 concurrent/joynrMessagingScheduledExecutor && \\\n    asadmin --user admin create-jdbc-connection-pool --datasourceclassname org.apache.derby.jdbc.ClientDataSource --restype javax.sql.XADataSource --property portNumber=1527:password=APP:user=APP:serverName=localhost:databaseName=joynr-discovery-directory:connectionAttributes=\\;create\\\\=true JoynrPool && \\\n    asadmin --user admin create-jdbc-resource --connectionpoolid JoynrPool joynr/DiscoveryDirectoryDS && \\\n    asadmin --user admin create-jdbc-resource --connectionpoolid JoynrPool joynr/DomainAccessControllerDS && \\\n    asadmin --user admin set-log-levels io.joynr.messaging=FINE && \\\n    asadmin --user admin set-log-levels io.joynr.dispatching=FINE && \\\n    asadmin --user admin set-log-levels io.joynr.jeeintegration=FINE && \\\n    asadmin --user admin set configs.config.server-config.network-config.network-listeners.network-listener.http-listener-1.enabled=false && \\\n    asadmin --user admin stop-domain --kill=true\n\nRUN chmod -R 777 /opt/payara41\n\n###################################################\n# install mosquitto mqtt broker\n###################################################\nRUN dnf update -y \\\n    && dnf install -y mosquitto \\\n    mosquitto-devel \\\n    && dnf clean all\nCOPY mosquitto.conf /etc/mosquitto/mosquitto.conf\n\n\n###################################################\n# add Tini - \"A tiny but valid init for containers\"\n###################################################\nENV TINI_VERSION v0.13.1\nADD https://github.com/krallin/tini/releases/download/${TINI_VERSION}/tini /tini\nRUN chmod +x /tini\n\n###################################################\n# set login user joynr\n###################################################\nENV GOSU_VERSION=1.3\nRUN cd /tmp \\\n    && . /etc/profile \\\n    && curl -f -o gosu -sSL \"https://github.com/tianon/gosu/releases/download/${GOSU_VERSION}/gosu-amd64\" \\\n    && mv gosu /usr/local/bin/gosu \\\n    && chmod 755 /usr/local/bin/gosu\n\nCOPY scripts/boot2user.sh /data/scripts/boot2user.sh\n\nENTRYPOINT [\"/tini\", \"-g\", \"--\", \"/data/scripts/boot2user.sh\"]\n"
}