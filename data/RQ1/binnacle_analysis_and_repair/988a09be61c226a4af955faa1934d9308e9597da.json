{
  "startTime": 1674641728089,
  "endTime": 1674641728212,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 18,
        "lineEnd": 18,
        "columnStart": 4,
        "columnEnd": 49
      }
    },
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 26,
        "lineEnd": 26,
        "columnStart": 4,
        "columnEnd": 15
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 19,
        "lineEnd": 19,
        "columnStart": 4,
        "columnEnd": 29
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 19,
        "lineEnd": 19,
        "columnStart": 4,
        "columnEnd": 29
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 19,
        "lineEnd": 19,
        "columnStart": 4,
        "columnEnd": 29
      }
    }
  ],
  "repairedSmells": [
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 19,
        "lineEnd": 19,
        "columnStart": 4,
        "columnEnd": 53
      }
    }
  ],
  "repairedDockerfile": "FROM microsoft/dotnet:2.2-aspnetcore-runtime AS Base\nWORKDIR /app\nEXPOSE 80\nEXPOSE 443\n\nFROM microsoft/dotnet:2.2-sdk AS build\n\n# Install node and npm\nENV NODE_VERSION 8.12.0\nENV NODE_DOWNLOAD_SHA 3df19b748ee2b6dfe3a03448ebc6186a3a86aeab557018d77a0f7f3314594ef6\nENV NODE_DOWNLOAD_URL https://nodejs.org/dist/v$NODE_VERSION/node-v$NODE_VERSION-linux-x64.tar.gz\n\nRUN wget \"$NODE_DOWNLOAD_URL\" -O nodejs.tar.gz \\\n\t&& echo \"$NODE_DOWNLOAD_SHA  nodejs.tar.gz\" | sha256sum -c - \\\n\t&& tar -xzf \"nodejs.tar.gz\" -C /usr/local --strip-components=1 \\\n\t&& rm nodejs.tar.gz \\\n\t&& ln -s /usr/local/bin/node /usr/local/bin/nodejs\n\nRUN curl -f -sL https://deb.nodesource.com/setup_6.x | bash -\nRUN apt-get install --no-install-recommends -y nodejs && rm -rf /var/lib/apt/lists/*;\n\n# Install npm packages first, this is slow so we want to minimise the number of un-cached runs\nWORKDIR /src/Northwind.WebUI/ClientApp/\nCOPY Northwind.WebUI/ClientApp/package.json .\nCOPY Northwind.WebUI/ClientApp/package-lock.json .\n\nRUN npm install && npm cache clean --force;\n\n# Restore dotnet before build to allow for caching\nWORKDIR /\nCOPY Northwind.Application/Northwind.Application.csproj /src/Northwind.Application/\nCOPY Northwind.Common/Northwind.Common.csproj /src/Northwind.Common/\nCOPY Northwind.Domain/Northwind.Domain.csproj /src/Northwind.Domain/\nCOPY Northwind.Infrastructure/Northwind.Infrastructure.csproj /src/Northwind.Infrastructure/\nCOPY Northwind.Persistence/Northwind.Persistence.csproj /src/Northwind.Persistence/\nCOPY Northwind.WebUI/Northwind.WebUI.csproj /src/Northwind.WebUI/\n\nRUN dotnet restore /src/Northwind.WebUI/Northwind.WebUI.csproj\n\n# Copy source files and build\nCOPY . /src\n\nRUN dotnet build /src/Northwind.WebUI/Northwind.WebUI.csproj --no-restore -c Release\nRUN dotnet publish /src/Northwind.WebUI/Northwind.WebUI.csproj --no-restore -c Release -o /app\n\n# Copy compiled app to runtime container\nFROM base AS final\nCOPY --from=build /app .\nCMD [\"dotnet\", \"Northwind.WebUI.dll\"]"
}