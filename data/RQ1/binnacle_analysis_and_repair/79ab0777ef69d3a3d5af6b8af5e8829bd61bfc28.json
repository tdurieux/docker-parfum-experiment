{
  "startTime": 1674243783530,
  "endTime": 1674243784018,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 96,
        "lineEnd": 96,
        "columnStart": 5,
        "columnEnd": 60
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 107,
        "lineEnd": 107,
        "columnStart": 5,
        "columnEnd": 146
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 158,
        "lineEnd": 158,
        "columnStart": 5,
        "columnEnd": 110
      }
    },
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 106,
        "lineEnd": 106,
        "columnStart": 5,
        "columnEnd": 43
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 98,
        "lineEnd": 102,
        "columnStart": 5,
        "columnEnd": 37
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 103,
        "lineEnd": 105,
        "columnStart": 5,
        "columnEnd": 90
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 85,
        "lineEnd": 85,
        "columnStart": 5,
        "columnEnd": 28
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# We start with a bare minimum. This image has at the time of writing 27MB.\nFROM ubuntu\n\n# Please change to whoever is going to maintain this.\nLABEL Sascha Just <sascha.just@cispa.saarland>\nLABEL description=\"v0.1\"\n\n# Tell debian that we are not in interactive mode.\nENV DEBIAN_FRONTEND noninteractive\n\n# FB_USER holds the username (and thus group and home name) of our notebook user.\nARG FB_USER=fuzzingbook\nENV FB_USER=${FB_USER}\n\n# Specify whether we install publish extensions.\nARG PUBLISH=no\n\n# This specifies the git repository that you want to clone.\nARG OWNER=uds-se\nENV OWNER=${OWNER}\nARG REPO=https://github.com/${OWNER}/fuzzingbook.git\n\n# Since you are running git within the container, this specifies the branch we\n# want to checkout and work on.\n# I'd prefer mounting the clone from the host machine into the container which would\n# drastically reduce the size of the imageâ€”not just because of the size of the Git\n# repository, but also because all of the dependencies we have to install to bring a\n# Git client. This almost doubles the size of the\nARG BRANCH=master\n\n# The directory that is used for the clone and for the jupyter notebook as base\n# directory.\nARG BASEDIR=FuzzingBook\n\n# Here, we specify package versions. This simplifies updates of individual packages\n# and dependencies without changing the actual routines within the Dockerfile.\nARG FUZZINGBOOK_VERSION=master\nARG FUZZMANAGER_VERSION=0.3.2\nARG GRCOV_VERSION=0.3.2\nARG TINI_VERSION=0.18.0\n\n# Set the default shell from /bin/sh to /bin/bash.\nSHELL [\"/bin/bash\", \"-c\"]\n\n# This gets rid of all man pages and docs when installing packages using apt.\n# The image is not made for comfortable shell access but only to serve the\n# fuzzingbook using jupyter notebook/hub.\nADD 01_nodoc /etc/dpkg/dpkg.cfg.d/01_nodoc\n\n# Create the notebook user and its home directory.\nRUN useradd -c 'FuzzingBook User' -d /home/${FB_USER} -m -s /bin/bash -U ${FB_USER}\n\n# Set the current working directory to the superuser's home\nUSER root\nWORKDIR /root\n\n# I moved all python package dependencies to an external file.\n# This avoids convolution of the Dockerfile while providing a central point for\n# authors to add dependencies they require. Please keep in mind, that we also\n# pull dependencies for fuzzmanager from the fuzzmanager GitHub repository which\n# should not collide. Chris losened the dependencies of fuzzmanager quite a bit.\n# So far, the only package for our internal dependencies are numpy; hence I\n# removed it from the file and kept everything else I could find in the original\n# Dockerfile.\nADD requirements.txt /root/install-requirements.txt\n# ADD https://raw.githubusercontent.com/$OWNER/fuzzingbook/${FUZZINGBOOK_VERSION}/deploy/fuzzingbook-base/requirements.txt /root/install-requirements.txt\nADD https://raw.githubusercontent.com/$OWNER/fuzzingbook/$FUZZINGBOOK_VERSION/binder/requirements.txt /root/fuzzingbook-requirements.txt\nADD https://raw.githubusercontent.com/MozillaSecurity/FuzzManager/${FUZZMANAGER_VERSION}/server/requirements.txt /root/fuzzmanager-requirements.txt\n\n# Same for the ubuntu packages. These have been moved to a file to facilitate\n# the installation and mainenance.\nADD apt.txt /root/install-packages.txt\n# ADD https://raw.githubusercontent.com/$OWNER/fuzzingbook/${FUZZINGBOOK_VERSION}/deploy/fuzzingbook-base/apt.txt /root/install-packages.txt\nADD https://raw.githubusercontent.com/$OWNER/fuzzingbook/${FUZZINGBOOK_VERSION}/binder/apt.txt /root/fuzzingbook-packages.txt\n\n# Install python3, curl and git using apt.\n# Install pip manually (to avoid installing 0.9 using apt first, upgrading and\n# fixing the installation later on)\n# We need distutils to work-around most python2to3 issues.\n# Lastly, install all python packages that are required to run jupyter, fuzzmanager\n# and fuzzingbook notebooks.\n# Clean up after us (IN THE SAME RUN COMMAND). This is important. If we do this\n# in two steps, the intermediate image layers will grow significantly in size.\nRUN set -x \\\n  && apt-get update \\\n  && apt-get install --no-install-recommends -y curl \\\n  && apt-get install --no-install-recommends -y \\\n    python3 \\\n    python3-distutils \\\n    git \\\n    npm \\\n  && apt-get install --no-install-recommends -y $(<install-packages.txt) $(grep -v -e '^\\s*#' fuzzingbook-packages.txt) \\\n  && sed -i -e 's/# en_US.UTF-8 UTF-8/en_US.UTF-8 UTF-8/' /etc/locale.gen \\\n  && echo 'LANG=\"en_US.UTF-8\"' > /etc/default/locale \\\n  && dpkg-reconfigure --frontend=noninteractive locales \\\n  && update-locale LANG=en_US.UTF-8 \\\n  && curl -f https://bootstrap.pypa.io/get-pip.py -o get-pip.py \\\n  && python3 get-pip.py \\\n  && pip3 install --no-cache-dir \\\n      jupyter \\\n      jupyterhub \\\n      -r install-requirements.txt \\\n      -r fuzzingbook-requirements \\\n  && pip3 install --no-cache-dir \\\n      -r fuzzmanager-requirements.txt \\\n      https://github.com/MozillaSecurity/FuzzManager/archive/${FUZZMANAGER_VERSION}.tar.gz \\\n  && npm install -g configurable-http-proxy \\\n  && curl -f -o grcov-linux-x86_64.tar.bz2 --location https://github.com/mozilla/grcov/releases/download/v${GRCOV_VERSION}/grcov-linux-x86_64.tar.bz2 \\\n  && tar xjf grcov-linux-x86_64.tar.bz2 \\\n  && mv grcov /usr/local/bin/ \\\n  && rm -f *-requirements.txt *-packages.txt grcov-linux-x86_64.tar.bz2 \\\n  && apt-get clean \\\n  && rm -rf /var/cache/apt/archives /var/lib/apt/lists/* && npm cache clean --force;\n\nADD notebookapp.py /usr/local/lib/python3.6/dist-packages/notebook/notebookapp.py\n\n# We run tini as an entry point.\nADD https://github.com/krallin/tini/releases/download/v${TINI_VERSION}/tini /tini\nRUN chmod +x /tini\n\nENTRYPOINT [\"/tini\", \"--\"]\n\n# Switch to the notebook user and prepare the work environment.\nUSER ${FB_USER}\nWORKDIR /home/${FB_USER}\n\n# Patch to change certain FuzzManager settings\nADD settings.py.patch /home/${FB_USER}/settings.py.patch\n\n# Clone the fuzzingbook repository and use it as working directory for\n# the jupyter instance. We shallow clone and omit history at this point\n# to speed up initial build process. You can change (remove the switch)\n# this at any time to get a full clone.\nRUN git clone --branch ${BRANCH} --depth 1 https://github.com/$OWNER/fuzzingbook.git ${BASEDIR} \\\n  && nbdime extensions --enable \\\n  && jupyter nbextension enable nbdime --py \\\n  && nbdime config-git --enable --global \\\n  && jupyter contrib nbextension install --user \\\n  && for extension in \\\n      toc2/main \\\n      exercise2/main \\\n      codefolding/main \\\n      execute_time/main \\\n      varInspector/main \\\n      collapsible_headings/main \\\n      select_keymap/main \\\n      spellchecker/main \\\n      scratchpad/main; do \\\n       jupyter nbextension enable --user \"$extension\"; \\\n     done \\\n  && test -n $PUBLISH && for extension in \\\n      code_prettify/autopep8 \\\n      code_prettify/code_prettify; do \\\n        jupyter nbextension enable --user \"$extension\"; \\\n     done || true \\\n  && shopt -s globstar \\\n  && jupyter trust ${BASEDIR}/**/*.ipynb \\\n  && mkdir -p .jupyter/custom && cp ${BASEDIR}/docs/beta/notebooks/custom.css .jupyter/custom/ \\\n  && curl -f -o fuzzmanager.tar.gz --location https://github.com/MozillaSecurity/FuzzManager/archive/0.3.2.tar.gz \\\n  && tar xzf fuzzmanager.tar.gz \\\n  && rm -f fuzzmanager.tar.gz \\\n  && mv FuzzManager-${FUZZMANAGER_VERSION} FuzzManager \\\n  && python3 FuzzManager/server/manage.py migrate \\\n  && python3 FuzzManager/server/manage.py createsuperuser --username demo --email demo@example.com --no-input \\\n  && python3 FuzzManager/server/manage.py shell -c 'from django.contrib.auth.models import User; user = User.objects.get(username=\"demo\"); user.set_password(\"demo\"); user.save();' \\\n  && echo -ne \"[Main]\\nsigdir = /home/${FB_USER}/signatures/\\ntool = fuzzingbook\\nserverport = 8000\\nserverproto = http\\nserverhost = 127.0.0.1\\nserverauthtoken = \" > .fuzzmanagerconf \\\n  && python3 FuzzManager/server/manage.py get_auth_token demo >> .fuzzmanagerconf \\\n  && mkdir /home/${FB_USER}/signatures/ \\\n  && (cd FuzzManager && patch -p1 < /home/${FB_USER}/settings.py.patch)\n\n# Adding configuration for jupyter. This sets a constant token, such that connecting\n# with external tools like VSCode, Atom or IntelliJ can use a constant config.\nADD --chown=fuzzingbook:fuzzingbook jupyter_notebook_config.py /home/${FB_USER}/.jupyter/\n\nUSER root\nADD startup.sh /startup.sh\nADD startup-user.sh /startup-user.sh\n\n# I am running notebook here. Feel free to change this to hub, lab, or whatever you guys prefer.\nEXPOSE 8000 8888\nCMD bash /startup.sh\n"
}