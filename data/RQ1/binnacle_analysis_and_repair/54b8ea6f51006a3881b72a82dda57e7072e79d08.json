{
  "startTime": 1674244363001,
  "endTime": 1674244363103,
  "originalSmells": [
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 31,
        "lineEnd": 31,
        "columnStart": 15,
        "columnEnd": 26
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 18,
        "lineEnd": 21,
        "columnStart": 4,
        "columnEnd": 39
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM node:6\n\n# add our user and group first to make sure their IDs get assigned consistently, regardless of whatever dependencies get added\nRUN groupadd -r mongodb && useradd -r -g mongodb mongodb\n\nRUN apt-get update \\\n\t&& apt-get install -y --no-install-recommends \\\n\t\tnumactl \\\n\t&& rm -rf /var/lib/apt/lists/*\n\nENV MONGO_MAJOR 3.4\nENV MONGO_VERSION 3.4.2\nENV MONGO_PACKAGE mongodb-org\n\nRUN echo \"deb http://repo.mongodb.org/apt/debian jessie/mongodb-org/$MONGO_MAJOR main\" > /etc/apt/sources.list.d/mongodb-org.list\n\nRUN set -x \\\n\t&& apt-get update \\\n\t&& apt-get install --no-install-recommends -y --force-yes \\\n\t\t${MONGO_PACKAGE}=$MONGO_VERSION \\\n\t\t${MONGO_PACKAGE}-shell=$MONGO_VERSION \\\n\t\t${MONGO_PACKAGE}-tools=$MONGO_VERSION \\\n\t&& rm -rf /var/lib/apt/lists/* \\\n\t&& rm -rf /var/lib/mongodb \\\n\t&& mv /etc/mongod.conf /etc/mongod.conf.orig\n\n\n\n# use changes to package.json to force Docker not to use the cache\n# when we change our application's nodejs dependencies:\nADD package.json /tmp/package.json\nRUN cd /tmp && npm install && npm cache clean --force;\nRUN mkdir -p /parse && cp -a /tmp/node_modules /parse/\n\n# From here we load our application's code in, therefore the previous docker\n# \"layer\" thats been cached will be used if possible\nWORKDIR /parse\nADD . /parse\n\nEXPOSE 1337\n\nVOLUME /parse/cloud\nVOLUME /parse/public\n\nENTRYPOINT [ \"/parse/start.sh\" ]\n"
}