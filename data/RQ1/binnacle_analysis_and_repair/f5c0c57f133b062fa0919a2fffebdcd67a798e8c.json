{
  "startTime": 1674234330555,
  "endTime": 1674234331172,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 52,
        "lineEnd": 52,
        "columnStart": 7,
        "columnEnd": 114
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 60,
        "lineEnd": 60,
        "columnStart": 4,
        "columnEnd": 114
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 69,
        "lineEnd": 69,
        "columnStart": 4,
        "columnEnd": 85
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 76,
        "lineEnd": 76,
        "columnStart": 4,
        "columnEnd": 104
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 85,
        "lineEnd": 85,
        "columnStart": 4,
        "columnEnd": 98
      }
    },
    {
      "rule": "curlUseHttpsUrl",
      "position": {
        "lineStart": 52,
        "lineEnd": 52,
        "columnStart": 7,
        "columnEnd": 114
      }
    },
    {
      "rule": "curlUseHttpsUrl",
      "position": {
        "lineStart": 60,
        "lineEnd": 60,
        "columnStart": 4,
        "columnEnd": 114
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 95,
        "lineEnd": 95,
        "columnStart": 4,
        "columnEnd": 29
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 97,
        "lineEnd": 97,
        "columnStart": 4,
        "columnEnd": 65
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 102,
        "lineEnd": 102,
        "columnStart": 4,
        "columnEnd": 35
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 119,
        "lineEnd": 119,
        "columnStart": 7,
        "columnEnd": 24
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 68,
        "lineEnd": 68,
        "columnStart": 4,
        "columnEnd": 65
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 71,
        "lineEnd": 71,
        "columnStart": 4,
        "columnEnd": 30
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 68,
        "lineEnd": 68,
        "columnStart": 4,
        "columnEnd": 65
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 64,
        "lineEnd": 64,
        "columnStart": 26,
        "columnEnd": 150
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 68,
        "lineEnd": 68,
        "columnStart": 4,
        "columnEnd": 65
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 71,
        "lineEnd": 71,
        "columnStart": 4,
        "columnEnd": 30
      }
    }
  ],
  "repairedSmells": [
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 68,
        "lineEnd": 68,
        "columnStart": 4,
        "columnEnd": 89
      }
    }
  ],
  "repairedDockerfile": "FROM debian:stretch-slim\n\n# Pre-cache neurodebian key\nCOPY docker/files/neurodebian.gpg /root/.neurodebian.gpg\n\nARG DEBIAN_FRONTEND=\"noninteractive\"\n\nENV LANG=\"C.UTF-8\" \\\n    LC_ALL=\"C.UTF-8\"\n\nRUN apt-get update -qq \\\n    && apt-get install -y --no-install-recommends software-properties-common \\\n    # Install system dependencies.\n    && apt-get install -y --no-install-recommends \\\n        bzip2 \\\n        ca-certificates \\\n        curl \\\n        libxtst6 \\\n        libgtk2.0-bin \\\n        libxft2 \\\n        lib32ncurses5 \\\n        libxmu-dev \\\n        vim \\\n        wget \\\n        libgl1-mesa-glx \\\n        graphviz \\\n        libpng-dev \\\n        gnupg \\\n        build-essential \\\n        libgomp1 \\\n        libmpich-dev \\\n        mpich \\\n        ffmpeg \\\n        unzip \\\n        screen \\\n        git \\\n        g++ \\\n        zip \\\n        unzip \\\n        libglu1 \\\n        zlib1g-dev \\\n        libfreetype6-dev \\\n        pkg-config \\\n        r-base-core \\\n        libgsl0-dev \\\n        openssl \\\n        gsl-bin \\\n        libglu1-mesa-dev \\\n        libglib2.0-0 \\\n        libglw1-mesa \\\n    && apt-get clean \\\n    && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/* \\\n    && curl -f -o /tmp/libxp6.deb -sSL https://mirrors.kernel.org/debian/pool/main/libx/libxp/libxp6_1.0.2-2_amd64.deb \\\n    && dpkg -i /tmp/libxp6.deb && rm -f /tmp/libxp6.deb \\\n    # Add new user.\n    && useradd --no-user-group --create-home --shell /bin/bash neuro \\\n    && chmod a+s /opt \\\n    && chmod 777 -R /opt\n\n# Add Neurodebian package repositories (i.e. for FSL)\nRUN curl -f -sSL https://neuro.debian.net/lists/stretch.us-tn.full >> /etc/apt/sources.list.d/neurodebian.sources.list && \\\n    apt-key add /root/.neurodebian.gpg && \\\n    (apt-key adv --refresh-keys --keyserver hkp://ha.pool.sks-keyservers.net 0xA5D32F012649A5A9 || true) && \\\n    apt-get update -qq\nRUN apt-get update -qq && apt-get install -y --no-install-recommends fsl-core fsl-atlases fsl-mni-structural-atlas fsl-mni152-templates fsl-first-data && rm -rf /var/lib/apt/lists/*;\n\n# Add git-lfs\n# Configure git-lfs\nRUN apt-get install --no-install-recommends -y apt-transport-https debian-archive-keyring && rm -rf /var/lib/apt/lists/*;\nRUN curl -f -s https://packagecloud.io/install/repositories/github/git-lfs/script.deb.sh | bash && \\\n    apt-get update && \\\n    apt-get install --no-install-recommends -y git-lfs && rm -rf /var/lib/apt/lists/*;\n\n# Installing ANTs 2.2.0 (NeuroDocker build)\nENV ANTSPATH=/usr/lib/ants\nRUN mkdir -p $ANTSPATH && \\\n    curl -f -sSL \"https://dl.dropbox.com/s/2f4sui1z6lcgyek/ANTs-Linux-centos5_x86_64-v2.2.0-0740f91.tar.gz\" \\\n    | tar -xzC $ANTSPATH --strip-components 1\n\nUSER neuro\nWORKDIR /home/neuro\n\n# Install Miniconda.\nARG miniconda_version=\"4.3.27\"\nENV PATH=\"/opt/conda/bin:$PATH\"\nRUN curl -f -sSLO https://repo.continuum.io/miniconda/Miniconda3-${miniconda_version}-Linux-x86_64.sh \\\n    && bash Miniconda3-${miniconda_version}-Linux-x86_64.sh -b -p /opt/conda \\\n    && conda config --system --prepend channels conda-forge \\\n    && conda config --system --set auto_update_conda false \\\n    && conda config --system --set show_channel_urls true \\\n    && conda clean -tipsy \\\n    && rm -rf Miniconda3-${miniconda_version}-Linux-x86_64.sh\n\n# Install pynets.\nRUN conda install -yq python=3.6 ipython\nRUN pip install --no-cache-dir --upgrade pip\nRUN conda clean -tipsy\nRUN pip install --no-cache-dir awscli pybids boto3 python-dateutil requests dipy\n\nRUN git clone -b development https://github.com/dPys/PyNets PyNets && \\\n    chmod 775 -R PyNets/*/*.py && \\\n    cd PyNets && \\\n    pip install --no-cache-dir -r requirements.txt && \\\n    python setup.py install\n\nRUN git clone -b jrdpg https://github.com/neurodata/graspy graspy && \\\n    cd graspy && \\\n    python setup.py install\n\nRUN sed -i '/mpl_patches = _get/,+3 d' /opt/conda/lib/python3.6/site-packages/nilearn/plotting/glass_brain.py \\\n    && sed -i '/for mpl_patch in mpl_patches:/,+2 d' /opt/conda/lib/python3.6/site-packages/nilearn/plotting/glass_brain.py\n\n# Install skggm\nRUN conda install -yq \\\n        cython \\\n        libgfortran \\\n        matplotlib \\\n        openblas \\\n    && conda clean -tipsy \\\n    && pip install --no-cache-dir skggm\n\nUSER root\nRUN chown -R neuro /opt \\\n    && chmod a+s -R /opt \\\n    && chmod 775 -R /opt/conda/lib/python3.6/site-packages \\\n    && find /opt -type f -iname \"*.py\" -exec chmod 777 {} \\;\n\n# Cleanup\nRUN apt-get remove --purge -y \\\n    git \\\n    build-essential\n\n# Delete buggy line in dipy\nRUN sed -i -e '189d;190d' /opt/conda/lib/python3.6/site-packages/dipy/tracking/eudx.py\n\n# Create mountpoints\nRUN mkdir /data && \\\n    chmod -R 777 /data\n\nRUN mkdir /outputs && \\\n    chmod -R 777 /outputs\n\nUSER neuro\n\n# Python ENV Config\nENV LD_LIBRARY_PATH=\"/opt/conda/lib\":$LD_LIBRARY_PATH\n\n# Link to local packages\nRUN echo PATH=\\\"\\$HOME/.local/bin:\\$PATH\\\" >> $HOME/.profile \\\n    && echo \"shell -bash\" >> ~/.screenrc\n\n# PyNets ENV Config\nENV PATH=\"/opt/conda/lib/python3.6/site-packages/pynets:$PATH\"\n\n# FSL ENV Config\nENV FSLDIR=/usr/share/fsl/5.0\nENV FSLOUTPUTTYPE=NIFTI_GZ\nENV PATH=/usr/lib/fsl/5.0:$PATH\nENV FSLMULTIFILEQUIT=TRUE\nENV POSSUMDIR=/usr/share/fsl/5.0\nENV LD_LIBRARY_PATH=/usr/lib/fsl/5.0:$LD_LIBRARY_PATH\nENV FSLTCLSH=/usr/bin/tclsh\nENV FSLWISH=/usr/bin/wish\nENV FSLOUTPUTTYPE=NIFTI_GZ\n\n# AFNI ENV Config\nENV AFNI_MODELPATH=\"/usr/lib/afni/models\" \\\n    AFNI_IMSAVE_WARNINGS=\"NO\" \\\n    AFNI_TTATLAS_DATASET=\"/usr/share/afni/atlases\" \\\n    AFNI_PLUGINPATH=\"/usr/lib/afni/plugins\"\nENV PATH=\"/usr/lib/afni/bin:$PATH\"\n\n# ANTs ENV Config\nENV PATH=$ANTSPATH:$PATH\nENV ANTS_VERSION=2.2.0\n\n# Misc environment vars\nENV MPLCONFIGDIR /tmp/matplotlib\nENV PYTHONWARNINGS ignore\n\n# Unless otherwise specified each process should only use one thread - nipype\n# will handle parallelization\nENV MKL_NUM_THREADS=1 \\\n    OMP_NUM_THREADS=1\n\n# Precaching fonts, set 'Agg' as default backend for matplotlib\nRUN python -c \"from matplotlib import font_manager\" && \\\n    sed -i 's/\\(backend *: \\).*$/\\1Agg/g' $( python -c \"import matplotlib; print(matplotlib.matplotlib_fname())\" )\n\n# and add it as an entrypoint\nENTRYPOINT [\"pynets_run\"]\n"
}