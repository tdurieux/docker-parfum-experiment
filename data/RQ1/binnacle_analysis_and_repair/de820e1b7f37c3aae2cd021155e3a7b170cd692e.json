{
  "startTime": 1674248698725,
  "endTime": 1674248699488,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 22,
        "lineEnd": 22,
        "columnStart": 5,
        "columnEnd": 59
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 30,
        "lineEnd": 30,
        "columnStart": 5,
        "columnEnd": 68
      }
    },
    {
      "rule": "wgetUseHttpsUrl",
      "position": {
        "lineStart": 97,
        "lineEnd": 97,
        "columnStart": 4,
        "columnEnd": 76
      }
    },
    {
      "rule": "wgetUseHttpsUrl",
      "position": {
        "lineStart": 110,
        "lineEnd": 110,
        "columnStart": 7,
        "columnEnd": 86
      }
    },
    {
      "rule": "wgetUseHttpsUrl",
      "position": {
        "lineStart": 123,
        "lineEnd": 123,
        "columnStart": 4,
        "columnEnd": 66
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 25,
        "lineEnd": 25,
        "columnStart": 5,
        "columnEnd": 55
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 33,
        "lineEnd": 33,
        "columnStart": 5,
        "columnEnd": 36
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 100,
        "lineEnd": 100,
        "columnStart": 7,
        "columnEnd": 18
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 113,
        "lineEnd": 113,
        "columnStart": 7,
        "columnEnd": 18
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 126,
        "lineEnd": 126,
        "columnStart": 7,
        "columnEnd": 18
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 23,
        "lineEnd": 23,
        "columnStart": 5,
        "columnEnd": 42
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 31,
        "lineEnd": 31,
        "columnStart": 5,
        "columnEnd": 50
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 124,
        "lineEnd": 124,
        "columnStart": 7,
        "columnEnd": 34
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM frolvlad/alpine-glibc:alpine-3.6\nMAINTAINER kensuke-mi <kensuke.mit@gmail.com>\n\n# Mecab install\nENV MECAB_VERSION 0.996\nENV IPADIC_VERSION 2.7.0-20070801\nENV mecab_url https://drive.google.com/uc?export=download&id=0B4y35FiV1wh7cENtOXlicTFaRUE\nENV ipadic_url https://drive.google.com/uc?export=download&id=0B4y35FiV1wh7MWVlSDBCSXZMTXM\nENV build_deps 'curl git bash file sudo openssh gcc make build-base'\nENV dependencies 'openssl'\n\nENV PATH=/opt/conda/bin:$PATH \\\n    LANG=C.UTF-8 \\\n    MINICONDA=Miniconda3-latest-Linux-x86_64.sh\n# apk update\nRUN apk update\n\n# mecab\nRUN apk add --update --no-cache ${build_deps} \\\n  # Install dependencies\n  && apk add --update --no-cache ${dependencies} \\\n  # Install MeCab \\\n  && curl -f -SL -o mecab-${MECAB_VERSION}.tar.gz ${mecab_url} \\\n  && tar zxf mecab-${MECAB_VERSION}.tar.gz \\\n  && cd mecab-${MECAB_VERSION} \\\n  && ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --enable-utf8-only --with-charset=utf8 \\\n  && make \\\n  && make install \\\n  && cd \\\n  # Install IPA dic\n  && curl -f -SL -o mecab-ipadic-${IPADIC_VERSION}.tar.gz ${ipadic_url} \\\n  && tar zxf mecab-ipadic-${IPADIC_VERSION}.tar.gz \\\n  && cd mecab-ipadic-${IPADIC_VERSION} \\\n  && ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --with-charset=utf8 \\\n  && make \\\n  && make install \\\n  && cd \\\n  # Install Neologd\n  && git clone --depth 1 https://github.com/neologd/mecab-ipadic-neologd.git \\\n  && mecab-ipadic-neologd/bin/install-mecab-ipadic-neologd -n -y \\\n  && rm -rf \\\n    mecab-${MECAB_VERSION}* \\\n    mecab-${IPADIC_VERSION}* \\\n    mecab-ipadic-neologd && rm mecab-${MECAB_VERSION}.tar.gz\n\n# general\nRUN apk --no-cache add vim \\\nwget \\\nlsof \\\ncurl \\\nbash \\\nswig \\\ngcc \\\nbuild-base \\\nmake \\\npython-dev \\\npy-pip \\\njpeg-dev \\\nzlib-dev \\\ngit \\\nlinux-headers\nENV LIBRARY_PATH=/lib:/usr/lib\n\nENV PLANTUML_VERSION 1.2017.18\nENV PLANTUML_DOWNLOAD_URL https://sourceforge.net/projects/plantuml/files/plantuml.$PLANTUML_VERSION.jar/download\nENV PANDOC_VERSION 1.19.2.4\nENV PANDOC_DOWNLOAD_URL https://hackage.haskell.org/package/pandoc-$PANDOC_VERSION/pandoc-$PANDOC_VERSION.tar.gz\nENV PANDOC_ROOT /usr/local/pandoc\n\nENV PATH $PATH:$PANDOC_ROOT/bin\n\n# Create Pandoc build space\nRUN mkdir -p /pandoc-build\nWORKDIR /pandoc-build\n\n# Install/Build Packages\nRUN apk upgrade --update && \\\n    apk add --no-cache --virtual .build-deps $BUILD_DEPS && \\\n    apk add --no-cache --virtual .persistent-deps $PERSISTENT_DEPS && \\\n    curl -fsSL \"$PLANTUML_DOWNLOAD_URL\" -o /usr/local/plantuml.jar && \\\n    apk add --no-cache --virtual .edge-deps $EDGE_DEPS -X http://dl-cdn.alpinelinux.org/alpine/edge/community && \\\n    curl -fsSL \"$PANDOC_DOWNLOAD_URL\" | tar -xzf - && \\\n        ( cd pandoc-$PANDOC_VERSION && cabal update && cabal install --only-dependencies && \\\n        cabal configure --prefix=$PANDOC_ROOT && \\\n        cabal build && \\\n        cabal copy && \\\n        cd .. ) && \\\n    rm -Rf pandoc-$PANDOC_VERSION/ && \\\n    rm -Rf /root/.cabal/ /root/.ghc/ && \\\n    rmdir /pandoc-build && \\\n    set -x; \\\n    addgroup -g 82 -S www-data; \\\n    adduser -u 82 -D -S -G www-data www-data && \\\n    mkdir -p /var/docs && \\\n    apk del .build-deps .edge-deps\n\n# Juman\nRUN wget https://nlp.ist.i.kyoto-u.ac.jp/nl-resource/juman/juman-7.01.tar.bz2 \\\n    && tar xvf juman-7.01.tar.bz2 \\\n    && cd juman-7.01 \\\n    && ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" \\\n    && make \\\n    && make install \\\n    && cd .. \\\n    && rm -rf juman-7.01 \\\n    && rm juman-7.01.tar.bz2\n\n# Juman++\nRUN apk add --update --no-cache --virtual=build-deps \\\n    boost-dev g++ make \\\n    && wget -q https://lotus.kuee.kyoto-u.ac.jp/nl-resource/jumanpp/jumanpp-1.02.tar.xz \\\n    && tar Jxfv jumanpp-1.02.tar.xz \\\n    && cd jumanpp-1.02/ \\\n    && ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" \\\n    && make \\\n    && make install \\\n    && cd .. \\\n    && rm jumanpp-1.02.tar.xz \\\n    && rm -rf /var/cache/* \\\n    && apk del build-deps \\\n    && apk add --update --no-cache boost\n\n# kytea\nRUN wget https://www.phontron.com/kytea/download/kytea-0.4.7.tar.gz \\\n    && tar -xvf kytea-0.4.7.tar.gz \\\n    && cd kytea-0.4.7 \\\n    && ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" \\\n    && make \\\n    && make install && rm kytea-0.4.7.tar.gz\n\n# Python\nRUN apk add --no-cache bash wget && \\\n    wget -q --no-check-certificate https://repo.continuum.io/miniconda/$MINICONDA && \\\n    bash $MINICONDA -b -p /opt/conda && \\\n    ln -s /opt/conda/bin/* /usr/local/bin/ && \\\n    rm -rf /root/.[acpw]* $MINICONDA /opt/conda/pkgs/*\n\nRUN conda config --add channels conda-forge --system\nRUN conda create -y -n p27 python=2.7\nRUN conda create -y -n p36 python=3.6\nRUN conda create -y -n p37 python=3.7\n\n#RUN source activate p27\n#RUN source deactivate\n\nCMD [\"/bin/bash\"]"
}