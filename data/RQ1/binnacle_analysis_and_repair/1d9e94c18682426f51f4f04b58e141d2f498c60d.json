{
  "startTime": 1674250490919,
  "endTime": 1674250491399,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 73,
        "lineEnd": 73,
        "columnStart": 4,
        "columnEnd": 50
      }
    },
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 95,
        "lineEnd": 95,
        "columnStart": 4,
        "columnEnd": 15
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 7,
        "lineEnd": 17,
        "columnStart": 26,
        "columnEnd": 44
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 18,
        "lineEnd": 22,
        "columnStart": 26,
        "columnEnd": 6
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 23,
        "lineEnd": 28,
        "columnStart": 4,
        "columnEnd": 5
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 74,
        "lineEnd": 74,
        "columnStart": 4,
        "columnEnd": 29
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 23,
        "lineEnd": 28,
        "columnStart": 4,
        "columnEnd": 5
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 74,
        "lineEnd": 74,
        "columnStart": 4,
        "columnEnd": 29
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 7,
        "lineEnd": 17,
        "columnStart": 26,
        "columnEnd": 44
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 18,
        "lineEnd": 22,
        "columnStart": 26,
        "columnEnd": 6
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 23,
        "lineEnd": 28,
        "columnStart": 4,
        "columnEnd": 5
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 58,
        "lineEnd": 61,
        "columnStart": 4,
        "columnEnd": 5
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 74,
        "lineEnd": 74,
        "columnStart": 4,
        "columnEnd": 29
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 80,
        "lineEnd": 80,
        "columnStart": 22,
        "columnEnd": 93
      }
    }
  ],
  "repairedSmells": [
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 23,
        "lineEnd": 28,
        "columnStart": 4,
        "columnEnd": 5
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 74,
        "lineEnd": 74,
        "columnStart": 4,
        "columnEnd": 53
      }
    }
  ],
  "repairedDockerfile": "FROM nvidia/cuda\n\n# TODO REPLACE CUDA_ARCH_BIN with your GPU value: https://developer.nvidia.com/cuda-gpus\n# For example my GeForce GTX 1050 is 6.1\n\n# This is a dev image, needed to compile OpenCV with CUDA\n# Install  Gstreamer and OpenCV Pre-requisite libs\nRUN apt-get update -y && apt-get install --no-install-recommends -y \\\n            libgstreamer1.0-0 \\\n            gstreamer1.0-plugins-base \\\n            gstreamer1.0-plugins-good \\\n            gstreamer1.0-plugins-bad \\\n            gstreamer1.0-plugins-ugly \\\n            gstreamer1.0-libav \\\n            gstreamer1.0-doc \\\n            gstreamer1.0-tools \\\n            libgstreamer1.0-dev \\\n            libgstreamer-plugins-base1.0-dev && rm -rf /var/lib/apt/lists/*;\nRUN apt-get update -y && apt-get install --no-install-recommends -y pkg-config \\\n zlib1g-dev libwebp-dev \\\n libtbb2 libtbb-dev \\\n libgtk2.0-dev pkg-config libavcodec-dev libavformat-dev libswscale-dev \\\n cmake && rm -rf /var/lib/apt/lists/*;\nRUN apt-get install --no-install-recommends -y \\\n  autoconf \\\n  autotools-dev \\\n  build-essential \\\n  gcc \\\n  git && rm -rf /var/lib/apt/lists/*;\nENV OPENCV_RELEASE_TAG 3.4.5\nRUN git clone --depth 1 -b ${OPENCV_RELEASE_TAG}  https://github.com/opencv/opencv.git /var/local/git/opencv\nRUN cd /var/local/git/opencv\nRUN mkdir -p /var/local/git/opencv/build && \\\n     cd /var/local/git/opencv/build $$ && \\\n    cmake -D CMAKE_BUILD_TYPE=Release -D BUILD_PNG=OFF -D \\\n    BUILD_TIFF=OFF -D BUILD_TBB=OFF -D BUILD_JPEG=ON \\\n    -D BUILD_JASPER=OFF -D BUILD_ZLIB=ON -D BUILD_EXAMPLES=OFF \\\n    -D BUILD_opencv_java=OFF -D BUILD_opencv_python2=ON \\\n    -D BUILD_opencv_python3=OFF -D ENABLE_NEON=OFF -D WITH_OPENCL=OFF \\\n    -D WITH_OPENMP=OFF -D WITH_FFMPEG=OFF -D WITH_GSTREAMER=ON -D WITH_GSTREAMER_0_10=OFF \\\n    -D WITH_CUDA=ON -D CUDA_TOOLKIT_ROOT_DIR=/usr/local/cuda/ -D WITH_GTK=ON \\\n    -D WITH_VTK=OFF -D WITH_TBB=ON -D WITH_1394=OFF -D WITH_OPENEXR=OFF \\\n     -D CUDA_ARCH_BIN=6.1 -D CUDA_ARCH_PTX=\"\" -D INSTALL_C_EXAMPLES=OFF -D INSTALL_TESTS=OFF ..\nRUN  cd /var/local/git/opencv/build && \\ \n      make install\n\n# Checkout and build darknet\n# for debug\n# apt-get install -y --no-install-recommends vim\n\nRUN git clone --depth 1 -b opendatacam https://github.com/opendatacam/darknet /var/local/darknet\nWORKDIR /var/local/darknet\nRUN sed -i -e s/GPU=0/GPU=1/ Makefile;\n# For some reason no need for a CUDNN=1 on my CUDA_ARCH_BIN=6.1\nRUN sed -i -e s/OPENCV=0/OPENCV=1/ Makefile;\nRUN make\n\nRUN apt-get update; \\\n    apt-get install -y --no-install-recommends \\\n    vim \\\n    wget \\\n    ; rm -rf /var/lib/apt/lists/*;\n\n# Get weights files\nRUN wget https://pjreddie.com/media/files/yolov3.weights -O /var/local/darknet/yolov3.weights\nRUN wget https://pjreddie.com/media/files/yolov3-tiny.weights -O /var/local/darknet/yolov3-tiny.weights\nRUN mkdir /var/local/darknet/opendatacam_videos && wget https://github.com/opendatacam/opendatacam/raw/v2.0.0-beta.2/static/demo/demo.mp4 -O /var/local/darknet/opendatacam_videos/demo.mp4\n\n# wget -N https://github.com/opendatacam/opendatacam/raw/v2.0.0-beta.2/static/demo/demo.mp4\n# Debug, test darknet : ./darknet detector demo cfg/coco.data cfg/yolov3.cfg yolov3.weights -ext_output -dont_show demo.mp4\n# Debug, test darknet : ./darknet detector demo cfg/coco.data cfg/yolov3-tiny.cfg yolov3-tiny.weights -ext_output -dont_show demo.mp4\n\n# Install node.js\nRUN curl -f -sL https://deb.nodesource.com/setup_10.x | bash -\nRUN apt-get install --no-install-recommends -y nodejs && rm -rf /var/lib/apt/lists/*;\n\n# Install mongodb\nENV DEBIAN_FRONTEND noninteractive\nRUN apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv 9DA31620334BD75D9DCB49F368818C72E52529D4 && \\\n    echo \"deb [ arch=amd64 ] https://repo.mongodb.org/apt/ubuntu xenial/mongodb-org/4.0 multiverse\" | tee /etc/apt/sources.list.d/mongodb-org-4.0.list\nRUN apt-get update && apt-get install -y --no-install-recommends openssl libcurl3 mongodb-org && rm -rf /var/lib/apt/lists/*;\nVOLUME [\"/data/db\"]\n\n# Technique to rebuild the docker file from here : https://stackoverflow.com/a/49831094/1228937\n# Build using date > marker && docker build .\n# date > marker && sudo docker build -t opendatacam .\nCOPY marker /dev/null\nRUN git clone --depth 1 https://github.com/opendatacam/opendatacam /var/local/opendatacam\n\nWORKDIR /var/local/opendatacam\nRUN sed -i -e s+/darknet+/var/local/darknet+ config.json\nRUN sed -i -e s+TO_REPLACE_VIDEO_INPUT+file+ config.json\nRUN sed -i -e s+TO_REPLACE_NEURAL_NETWORK+yolov3+ config.json\n\n# Build\nRUN npm install && npm cache clean --force;\nRUN npm run build\n\nEXPOSE 8080 8070 8090 27017\n\nRUN wget https://raw.githubusercontent.com/opendatacam/opendatacam/v2/docker/run-jetson/docker-start-mongo-and-opendatacam.sh\nRUN chmod 777 docker-start-mongo-and-opendatacam.sh\nCMD ./docker-start-mongo-and-opendatacam.sh\n"
}