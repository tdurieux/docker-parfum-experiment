{
  "startTime": 1674245792751,
  "endTime": 1674245792803,
  "originalSmells": [
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 9,
        "lineEnd": 9,
        "columnStart": 22,
        "columnEnd": 137
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "#The base image, with ruby pre-installed\n#see: https://hub.docker.com/_/ruby/\nFROM ruby:2.3\n\n# Install dependencies:\n# - build-essential: To ensure certain gems can be compiled\n# - nodejs: Compile assets\n# - libpq-dev: Communicate with postgres through the postgres gem\n# - postgresql-client-9.4: In case you want to talk directly to postgres\nRUN apt-get update && apt-get install -qq -y build-essential nodejs libpq-dev postgresql-client-9.4 --fix-missing --no-install-recommends && rm -rf /var/lib/apt/lists/*;\n\n# Set an environment variable to store where the app is installed to inside\n# of the Docker image.\nENV INSTALL_PATH /app\nRUN mkdir -p $INSTALL_PATH\n\n# This sets the context of where commands will be ran in and is documented\n# on Docker's website extensively.\nWORKDIR $INSTALL_PATH\n\n# (optional/recommended) Environment variables for Dockerized production Rails apps\n# ENV RAILS_ENV production\n# ENV RAILS_SERVE_STATIC_FILES true\n# ENV RAILS_LOG_TO_STDOUT true\n\n# Ensure gems are cached and only get updated when they change. This will\n# drastically increase build times when your gems do not change.\nCOPY Gemfile Gemfile\nCOPY Gemfile.lock Gemfile.lock\nRUN bundle install --deployment\n\n# Copy code from working directory outside Docker to working directory inside Docker\nCOPY . .\n#Sometime an extra bundle call is needed to install binaries / native extensions\nRUN bundle install --deployment\n\n# Precompile assets\nRUN bundle exec rake DATABASE_URL=postgresql:does_not_exist assets:precompile\n\n# The default command to start the Unicorn server.\nCMD bundle exec puma -p 5000\n"
}