{
  "startTime": 1674237067931,
  "endTime": 1674237068104,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 23,
        "lineEnd": 23,
        "columnStart": 4,
        "columnEnd": 151
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 27,
        "lineEnd": 27,
        "columnStart": 4,
        "columnEnd": 106
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 28,
        "lineEnd": 28,
        "columnStart": 4,
        "columnEnd": 114
      }
    },
    {
      "rule": "gpgUseBatchFlag",
      "position": {
        "lineStart": 34,
        "lineEnd": 34,
        "columnStart": 8,
        "columnEnd": 86
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# This Dockerfile builds our base image with gosu, dumb-init and the atlantis\n# user. We split this from the main Dockerfile because this base doesn't change\n# and also because it kept breaking the build due to flakiness.\nFROM alpine:3.10\nLABEL authors=\"Anubhav Mishra, Luke Kysow\"\n\n# We use gosu to step down from root and run as the atlantis user so we need\n# to create that user and group.\n# We add the atlantis user to the root group and make its home directory\n# owned by root so that OpenShift users can use /home/atlantis as their\n# data dir because OpenShift runs containers as a random uid that's part of\n# the root group.\nRUN addgroup atlantis && \\\n    adduser -S -G atlantis atlantis && \\\n    adduser atlantis root && \\\n    chown atlantis:root /home/atlantis/ && \\\n    chmod g=u /home/atlantis/ && \\\n    chmod g=u /etc/passwd\n\n# Install dumb-init and gosu.\nENV DUMB_INIT_VERSION=1.2.0\nENV GOSU_VERSION=1.10\nRUN apk add --no-cache ca-certificates gnupg curl git unzip bash openssh libcap openssl && \\\n    curl -f -L -s --output /bin/dumb-init \"https://github.com/Yelp/dumb-init/releases/download/v${DUMB_INIT_VERSION}/dumb-init_${DUMB_INIT_VERSION}_amd64\" && \\\n    chmod +x /bin/dumb-init && \\\n    mkdir -p /tmp/build && \\\n    cd /tmp/build && \\\n    curl -f -L -s --output gosu \"https://github.com/tianon/gosu/releases/download/${GOSU_VERSION}/gosu-amd64\" && \\\n    curl -f -L -s --output gosu.asc \"https://github.com/tianon/gosu/releases/download/${GOSU_VERSION}/gosu-amd64.asc\" && \\\n    for server in $(shuf -e ipv4.pool.sks-keyservers.net \\\n                            hkp://p80.pool.sks-keyservers.net:80 \\\n                            keyserver.ubuntu.com \\\n                            hkp://keyserver.ubuntu.com:80 \\\n                            pgp.mit.edu); do \\\n        gpg --batch --keyserver \"$server\" --recv-keys B42F6819007F00F88E364FD4036A9C25BF357DD4 && break || :; \\\n    done && \\\n    gpg --batch --verify gosu.asc gosu && \\\n    chmod +x gosu && \\\n    cp gosu /bin && \\\n        cd /tmp && \\\n        rm -rf /tmp/build && \\\n        apk del gnupg openssl && \\\n        rm -rf /root/.gnupg && rm -rf /var/cache/apk/*\n\n# Set up nsswitch.conf for Go's \"netgo\" implementation\n# - https://github.com/golang/go/blob/go1.9.1/src/net/conf.go#L194-L275\nRUN [ ! -e /etc/nsswitch.conf ] && echo 'hosts: files dns' > /etc/nsswitch.conf\n"
}