{
  "startTime": 1674245170104,
  "endTime": 1674245170338,
  "originalSmells": [
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 38,
        "lineEnd": 38,
        "columnStart": 4,
        "columnEnd": 19
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# This Dockerfile for ArchiveBox installs the following in a container:\n#     - curl, wget, python3, youtube-dl, google-chrome-unstable\n#     - ArchiveBox\n# Usage:\n#     docker build github.com/pirate/ArchiveBox -t archivebox\n#     echo 'https://example.com' | docker run -i --mount type=bind,source=./data,target=/data archivebox /bin/archive\n#     docker run --mount type=bind,source=./data,target=/data archivebox /bin/archive 'https://example.com/some/rss/feed.xml'\n# Documentation:\n#     https://github.com/pirate/ArchiveBox/wiki/Docker#docker\n\nFROM node:11-slim\nLABEL maintainer=\"Nick Sweeting <archivebox-git@sweeting.me>\"\n\nRUN apt-get update \\\n    && apt-get install -yq --no-install-recommends \\\n        git wget curl youtube-dl gnupg2 libgconf-2-4 python3 python3-pip \\\n    && rm -rf /var/lib/apt/lists/*\n\n# Install latest chrome package and fonts to support major charsets (Chinese, Japanese, Arabic, Hebrew, Thai and a few others)\nRUN apt-get update && apt-get install -y wget --no-install-recommends \\\n    && wget -q -O - https://dl-ssl.google.com/linux/linux_signing_key.pub | apt-key add - \\\n    && sh -c 'echo \"deb [arch=amd64] http://dl.google.com/linux/chrome/deb/ stable main\" >> /etc/apt/sources.list.d/google.list' \\\n    && apt-get update \\\n    && apt-get install -y google-chrome-unstable fonts-ipafont-gothic fonts-wqy-zenhei fonts-thai-tlwg fonts-kacst ttf-freefont \\\n      --no-install-recommends \\\n    && rm -rf /var/lib/apt/lists/* \\\n    && rm -rf /src/*.deb\n\n# It's a good idea to use dumb-init to help prevent zombie chrome processes.\nADD https://github.com/Yelp/dumb-init/releases/download/v1.2.0/dumb-init_1.2.0_amd64 /usr/local/bin/dumb-init\nRUN chmod +x /usr/local/bin/dumb-init\n\n# Uncomment to skip the chromium download when installing puppeteer. If you do,\n# you'll need to launch puppeteer with:\n#     browser.launch({executablePath: 'google-chrome-unstable'})\nENV PUPPETEER_SKIP_CHROMIUM_DOWNLOAD true\n\n# Install puppeteer so it's available in the container.\nRUN npm i puppeteer && npm cache clean --force;\n\n# Add user so we don't need --no-sandbox.\nRUN groupadd -r pptruser && useradd -r -g pptruser -G audio,video pptruser \\\n    && mkdir -p /home/pptruser/Downloads \\\n    && chown -R pptruser:pptruser /home/pptruser \\\n    && chown -R pptruser:pptruser /node_modules\n\n# Install the ArchiveBox repository and pip requirements\nCOPY . /home/pptruser/app\nRUN mkdir -p /data \\\n    && chown -R pptruser:pptruser /data \\\n    && ln -s /data /home/pptruser/app/archivebox/output \\\n    && ln -s /home/pptruser/app/bin/* /bin/ \\\n    && ln -s /home/pptruser/app/bin/archivebox /bin/archive \\\n    && chown -R pptruser:pptruser /home/pptruser/app/archivebox\n    # && pip3 install -r /home/pptruser/app/archivebox/requirements.txt\n\nVOLUME /data\n\nENV LANG=C.UTF-8 \\\n    LANGUAGE=en_US:en \\\n    LC_ALL=C.UTF-8 \\\n    PYTHONIOENCODING=UTF-8 \\\n    CHROME_SANDBOX=False \\\n    CHROME_BINARY=google-chrome-unstable \\\n    OUTPUT_DIR=/data\n\n# Run everything from here on out as non-privileged user\nUSER pptruser\nWORKDIR /home/pptruser/app\n\nENTRYPOINT [\"dumb-init\", \"--\"]\nCMD [\"/bin/archive\"]\n"
}