{
  "startTime": 1674236820832,
  "endTime": 1674236821108,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 18,
        "lineEnd": 18,
        "columnStart": 4,
        "columnEnd": 117
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 21,
        "lineEnd": 21,
        "columnStart": 4,
        "columnEnd": 72
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 2,
        "lineEnd": 15,
        "columnStart": 22,
        "columnEnd": 7
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM ubuntu:18.04\n\nRUN apt-get update && apt-get install -y --no-install-recommends \\\n  g++ \\\n  make \\\n  file \\\n  curl \\\n  ca-certificates \\\n  python \\\n  git \\\n  cmake \\\n  sudo \\\n  gdb \\\n  xz-utils \\\n  wget \\\n  patch && rm -rf /var/lib/apt/lists/*;\n\n# FIXME: build the `ptx-linker` instead.\nRUN curl -f -sL https://github.com/denzp/rust-ptx-linker/releases/download/v0.9.0-alpha.2/rust-ptx-linker.linux64.tar.gz | \\\n  tar -xzvC /usr/bin\n\nRUN curl -f -sL https://nodejs.org/dist/v9.2.0/node-v9.2.0-linux-x64.tar.xz | \\\n  tar -xJ\n\nWORKDIR /build/\nCOPY scripts/musl-toolchain.sh /build/\nRUN bash musl-toolchain.sh x86_64 && rm -rf build\nWORKDIR /\n\nCOPY scripts/sccache.sh /scripts/\nRUN sh /scripts/sccache.sh\n\nENV RUST_CONFIGURE_ARGS \\\n  --musl-root-x86_64=/usr/local/x86_64-linux-musl \\\n  --set build.nodejs=/node-v9.2.0-linux-x64/bin/node \\\n  --set rust.lld\n\n# Some run-make tests have assertions about code size, and enabling debug\n# assertions in libstd causes the binary to be much bigger than it would\n# otherwise normally be. We already test libstd with debug assertions in lots of\n# other contexts as well\nENV NO_DEBUG_ASSERTIONS=1\n\nENV WASM_TARGETS=wasm32-unknown-unknown\nENV WASM_SCRIPT python2.7 /checkout/x.py test --target $WASM_TARGETS \\\n  src/test/run-make \\\n  src/test/ui \\\n  src/test/run-pass \\\n  src/test/compile-fail \\\n  src/test/mir-opt \\\n  src/test/codegen-units \\\n  src/libcore\n\nENV NVPTX_TARGETS=nvptx64-nvidia-cuda\nENV NVPTX_SCRIPT python2.7 /checkout/x.py test --target $NVPTX_TARGETS \\\n  src/test/run-make \\\n  src/test/assembly\n\nENV MUSL_TARGETS=x86_64-unknown-linux-musl \\\n    CC_x86_64_unknown_linux_musl=x86_64-linux-musl-gcc \\\n    CXX_x86_64_unknown_linux_musl=x86_64-linux-musl-g++\nENV MUSL_SCRIPT python2.7 /checkout/x.py test --target $MUSL_TARGETS\n\nENV SCRIPT $WASM_SCRIPT && $NVPTX_SCRIPT && $MUSL_SCRIPT\n"
}