{
  "startTime": 1674243797609,
  "endTime": 1674243798159,
  "originalSmells": [
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 45,
        "lineEnd": 45,
        "columnStart": 4,
        "columnEnd": 57
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 49,
        "lineEnd": 49,
        "columnStart": 4,
        "columnEnd": 34
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 65,
        "lineEnd": 65,
        "columnStart": 4,
        "columnEnd": 22
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 71,
        "lineEnd": 71,
        "columnStart": 4,
        "columnEnd": 37
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 74,
        "lineEnd": 74,
        "columnStart": 4,
        "columnEnd": 50
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 83,
        "lineEnd": 83,
        "columnStart": 8,
        "columnEnd": 118
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 85,
        "lineEnd": 85,
        "columnStart": 8,
        "columnEnd": 39
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 87,
        "lineEnd": 87,
        "columnStart": 4,
        "columnEnd": 55
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 88,
        "lineEnd": 88,
        "columnStart": 4,
        "columnEnd": 29
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 91,
        "lineEnd": 91,
        "columnStart": 4,
        "columnEnd": 32
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 54,
        "lineEnd": 54,
        "columnStart": 29,
        "columnEnd": 67
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 42,
        "lineEnd": 42,
        "columnStart": 4,
        "columnEnd": 74
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 48,
        "lineEnd": 48,
        "columnStart": 4,
        "columnEnd": 41
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 57,
        "lineEnd": 57,
        "columnStart": 8,
        "columnEnd": 32
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 24,
        "lineEnd": 36,
        "columnStart": 4,
        "columnEnd": 44
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 42,
        "lineEnd": 42,
        "columnStart": 4,
        "columnEnd": 74
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 48,
        "lineEnd": 48,
        "columnStart": 4,
        "columnEnd": 41
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 57,
        "lineEnd": 57,
        "columnStart": 8,
        "columnEnd": 32
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 24,
        "lineEnd": 36,
        "columnStart": 4,
        "columnEnd": 44
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 42,
        "lineEnd": 42,
        "columnStart": 4,
        "columnEnd": 74
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 48,
        "lineEnd": 48,
        "columnStart": 4,
        "columnEnd": 41
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 57,
        "lineEnd": 57,
        "columnStart": 8,
        "columnEnd": 32
      }
    }
  ],
  "repairedSmells": [
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 24,
        "lineEnd": 36,
        "columnStart": 4,
        "columnEnd": 44
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 42,
        "lineEnd": 42,
        "columnStart": 4,
        "columnEnd": 98
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 48,
        "lineEnd": 48,
        "columnStart": 4,
        "columnEnd": 65
      }
    }
  ],
  "repairedDockerfile": "ARG CUDA_DOCKER_VERSION=9.0-devel-ubuntu16.04\nFROM nvidia/cuda:${CUDA_DOCKER_VERSION}\n\n# Arguments for the build. CUDA_DOCKER_VERSION needs to be repeated becaus\n# the first usage only applies to the FROM tag.\nARG CUDA_DOCKER_VERSION=9.0-devel-ubuntu16.04\nARG CUDNN_VERSION=7.4.1.5-1+cuda9.0\nARG NCCL_VERSION_OVERRIDE=2.3.7-1+cuda9.0\nARG MPI_KIND=OpenMPI\nARG PYTHON_VERSION=2.7\nARG TENSORFLOW_PACKAGE=tensorflow-gpu==1.12.0\nARG KERAS_PACKAGE=keras==2.2.2\nARG PYTORCH_PACKAGE=torch==1.0.0\nARG TORCHVISION_PACKAGE=torchvision==0.2.2.post3\nARG MXNET_PACKAGE=mxnet-cu90==1.4.1\nARG PYSPARK_PACKAGE=pyspark==2.4.0\nARG HOROVOD_BUILD_FLAGS=HOROVOD_GPU_ALLREDUCE=NCCL\nARG HOROVOD_MIXED_INSTALL=0\n\n# Set default shell to /bin/bash\nSHELL [\"/bin/bash\", \"-cu\"]\n\n# Install essential packages.\nRUN apt-get update -qq\nRUN apt-get install -y --allow-downgrades --allow-change-held-packages --no-install-recommends \\\n        wget \\\n        ca-certificates \\\n        openssh-client \\\n        git \\\n        build-essential \\\n        gcc-4.9 \\\n        g++-4.9 \\\n        gcc-4.9-base \\\n        software-properties-common \\\n        libcudnn7=${CUDNN_VERSION} \\\n        libnccl2=${NCCL_VERSION_OVERRIDE} \\\n        libnccl-dev=${NCCL_VERSION_OVERRIDE} && rm -rf /var/lib/apt/lists/*;\n\n# Install Python.\nRUN if [[ \"${PYTHON_VERSION}\" == \"3.6\" ]]; then \\\n        add-apt-repository ppa:deadsnakes/ppa && apt-get update -qq; \\\n    fi\nRUN apt-get install --no-install-recommends -y python${PYTHON_VERSION} python${PYTHON_VERSION}-dev && rm -rf /var/lib/apt/lists/*;\nRUN ln -s -f /usr/bin/python${PYTHON_VERSION} /usr/bin/python\nRUN wget https://bootstrap.pypa.io/get-pip.py && python get-pip.py && rm get-pip.py\nRUN pip install --no-cache-dir -U --force pip setuptools requests pytest\n\n# Install PySpark.\nRUN apt install --no-install-recommends -y openjdk-8-jdk-headless && rm -rf /var/lib/apt/lists/*;\nRUN pip install --no-cache-dir ${PYSPARK_PACKAGE}\n\n# Install MPI.\nRUN if [[ ${MPI_KIND} == \"OpenMPI\" ]]; then \\\n        wget -O /tmp/openmpi-3.0.0-bin.tar.gz https://github.com/horovod/horovod/files/1596799/openmpi-3.0.0-bin.tar.gz && \\\n            cd /usr/local && tar -zxf /tmp/openmpi-3.0.0-bin.tar.gz && ldconfig && \\\n            echo \"mpirun -allow-run-as-root -np 2 -H localhost:2 -bind-to none -map-by slot -mca mpi_abort_print_stack 1\" > /mpirun_command; rm /tmp/openmpi-3.0.0-bin.tar.gz \\\n    else \\\n        apt-get install --no-install-recommends -y mpich && \\\n            echo \"mpirun -np 2\" > /mpirun_command; rm -rf /var/lib/apt/lists/*; \\\n    fi\n\n# Set default NCCL parameters\nRUN echo NCCL_DEBUG=INFO >> /etc/nccl.conf\n\n# Install mpi4py.\nRUN pip install --no-cache-dir mpi4py\n\n### END OF CACHE ###\nCOPY . /horovod\n\n# Install TensorFlow.\nRUN pip install --no-cache-dir ${TENSORFLOW_PACKAGE}\n\n# Install Keras.\nRUN pip install --no-cache-dir ${KERAS_PACKAGE} h5py scipy pandas\nRUN mkdir -p ~/.keras\nRUN ldconfig /usr/local/cuda/targets/x86_64-linux/lib/stubs && \\\n    python -c \"from keras.datasets import mnist; mnist.load_data()\" && \\\n    ldconfig\n\n# Install PyTorch.\nRUN if [[ ${PYTORCH_PACKAGE} == \"torch-nightly\" ]]; then \\\n        PYTORCH_CUDA=$(echo ${CUDA_DOCKER_VERSION} | awk -F- '{print $1}' | sed 's/\\.//'); \\\n        pip install --no-cache-dir torch_nightly -v -f https://download.pytorch.org/whl/nightly/cu${PYTORCH_CUDA}/torch_nightly.html; \\\n    else \\\n        pip install --no-cache-dir ${PYTORCH_PACKAGE}; \\\n    fi\nRUN pip install --no-cache-dir ${TORCHVISION_PACKAGE} Pillow --no-deps\nRUN pip install --no-cache-dir future typing\n\n# Install MXNet.\nRUN pip install --no-cache-dir ${MXNET_PACKAGE}\n\n# Pin GCC to 4.9 (priority 200) to compile correctly against TensorFlow, PyTorch, and MXNet.\n# Backup existing GCC installation as priority 100, so that it can be recovered later.\nRUN update-alternatives --install /usr/bin/gcc gcc $(readlink -f $(which gcc)) 100 && \\\n    update-alternatives --install /usr/bin/x86_64-linux-gnu-gcc x86_64-linux-gnu-gcc $(readlink -f $(which gcc)) 100 && \\\n    update-alternatives --install /usr/bin/g++ g++ $(readlink -f $(which g++)) 100 && \\\n    update-alternatives --install /usr/bin/x86_64-linux-gnu-g++ x86_64-linux-gnu-g++ $(readlink -f $(which g++)) 100\nRUN update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-4.9 200 && \\\n    update-alternatives --install /usr/bin/x86_64-linux-gnu-gcc x86_64-linux-gnu-gcc /usr/bin/gcc-4.9 200 && \\\n    update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-4.9 200 && \\\n    update-alternatives --install /usr/bin/x86_64-linux-gnu-g++ x86_64-linux-gnu-g++ /usr/bin/g++-4.9 200\n\n# Install Horovod.\nRUN cd /horovod && python setup.py sdist\nRUN ldconfig /usr/local/cuda/targets/x86_64-linux/lib/stubs && \\\n    bash -c \"${HOROVOD_BUILD_FLAGS} pip install -v /horovod/dist/horovod-*.tar.gz\" && \\\n    ldconfig\n\n# Remove GCC pinning\nRUN update-alternatives --remove gcc /usr/bin/gcc-4.9 && \\\n    update-alternatives --remove x86_64-linux-gnu-gcc /usr/bin/gcc-4.9 && \\\n    update-alternatives --remove g++ /usr/bin/g++-4.9 && \\\n    update-alternatives --remove x86_64-linux-gnu-g++ /usr/bin/g++-4.9\n\n# Hack for compatibility of MNIST example with TensorFlow 1.1.0.\nRUN if [[ ${TENSORFLOW_PACKAGE} == \"tensorflow-gpu==1.1.0\" ]]; then \\\n        sed -i \"s/from tensorflow import keras/from tensorflow.contrib import keras/\" /horovod/examples/tensorflow_mnist.py; \\\n    fi\n\n# Hack TensorFlow MNIST example to be smaller.\nRUN sed -i \"s/last_step=20000/last_step=100/\" /horovod/examples/tensorflow_mnist.py\n\n# Hack TensorFlow Eager MNIST example to be smaller.\nRUN sed -i \"s/dataset.take(20000/dataset.take(100/\" /horovod/examples/tensorflow_mnist_eager.py\n\n# Hack Keras MNIST advanced example to be smaller.\nRUN sed -i \"s/epochs = .*/epochs = 9/\" /horovod/examples/keras_mnist_advanced.py\n\n# Hack PyTorch MNIST example to be smaller.\nRUN sed -i \"s/'--epochs', type=int, default=10,/'--epochs', type=int, default=2,/\" /horovod/examples/pytorch_mnist.py\n\n# Export HOROVOD_MIXED_INSTALL\nENV HOROVOD_MIXED_INSTALL=${HOROVOD_MIXED_INSTALL}\n"
}