{
  "startTime": 1674641721607,
  "endTime": 1674641721714,
  "originalSmells": [
    {
      "rule": "apkAddUseNoCache",
      "position": {
        "lineStart": 40,
        "lineEnd": 40,
        "columnStart": 4,
        "columnEnd": 53
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# Image 1: Begin with nightly SDK image that contains a build of the solution\nFROM jonmcquade/dotnetcore-runtime-sdk-node-python:dotnetcore-asp AS build\nARG aspenv=\"Production\"\nENV ASPNETCORE_ENVIRONMENT $aspenv\nARG runtime=\"Release\"\nENV RUNTIME $runtime\nARG verbosity=\"detailed\"\nENV VERBOSITY $verbosity\nARG serverUrls=\"http://*:$PORT;http://*:$SSL_PORT\"\nENV ASPNETCORE_URLS $serverUrls\nENV DOTNET_SKIP_FIRST_TIME_EXPERIENCE true\nWORKDIR /src\nCOPY ./src .\nRUN echo '.NET SDK Version:' && dotnet --version \\\n## Targeting Alpine, output to /app\n## This cam take a long time to package files together \nRUN echo -e \"\\n\\n\\nBuilding to /app ...\\n\\n\\n\" \\\n        && dotnet build -c $RUNTIME -r alpine.3.6-x64 -v $VERBOSITY -o /app \\\n        && echo -e \"\\n\\n\\nContents of /app ...\\n\\n\\n\" && cd /app && ls -l\n\n# Image 2: Publish the built solution with self-contained dependencies to an output dir\nFROM build AS publish\nARG aspenv=\"Production\"\nENV ASPNETCORE_ENVIRONMENT $aspenv\nARG runtime=\"Release\"\nENV RUNTIME $runtime\nARG verbosity=\"detailed\"\nENV VERBOSITY $verbosity\nCOPY ./README.md /\n## Publishing will build from source and run Webpack on dist folder assets\nRUN echo -e \"\\n\\n\\n...Publishing to /app/dist ...\\n\\n\\n\" \\\n    && dotnet publish --self-contained -c $RUNTIME -r alpine.3.6-x64 -v $VERBOSITY -o /app/dist\n\n# Image 3: Alpine .Net Core Runtime 2.1.0\n## Implementing:\n### ASP.NET Core 2.1.0-preview\nFROM microsoft/dotnet:2.1.0-preview1-runtime-deps-alpine as base\nARG aspenv=\"Production\"\nENV ASPNETCORE_ENVIRONMENT $aspenv\nCOPY ./src/entrypoint /\nRUN apk add --no-cache --update icu-libs libuv nodejs nodejs-npm \\\n    && ln -s /usr/lib/libuv.so.1 /usr/lib/libuv.so\nWORKDIR /dotnetcorespa\nCOPY ./src/Properties ./Properties\nCOPY ./README.md /\nCOPY ./src/tpl ./tpl\nCOPY ./src/App_Data ./App_Data\nCOPY --from=publish /app/dist .\n\n# Image 4: Establish runtime env vars, expose ports, set CMD to entrypoint shell\n## entrypoint uses .tpl files to rewrite host and port rules, then\n##   either execute `dotnet run` for (:dev) or the self-contained app (:prod)\nFROM base AS final\nARG aspenv=\"Production\"\nENV ASPNETCORE_ENVIRONMENT $aspenv\nARG port=\"3000\"\nENV PORT $port\nARG sslPort=\"3001\"\nENV SSL_PORT $sslPort\nENV DOTNET_SDK_VERSION 2.1.300-preview1-008174\nENV DOTNET_SYSTEM_GLOBALIZATION_INVARIANT false\nENV DOTNET_SKIP_FIRST_TIME_EXPERIENCE true\nENV LC_ALL en_US.UTF-8\nENV LANG en_US.UTF-8\nARG serverUrls=\"http://*:$PORT;https://*:$SSL_PORT\"\nENV ASPNETCORE_URLS $serverUrls\nEXPOSE 3000 3001 $port $sslPort\nCMD /dotnetcorespa/FlightSearch"
}