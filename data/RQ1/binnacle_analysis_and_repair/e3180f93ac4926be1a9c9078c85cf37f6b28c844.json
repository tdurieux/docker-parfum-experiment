{
  "startTime": 1674236547020,
  "endTime": 1674236547954,
  "originalSmells": [
    {
      "rule": "curlUseHttpsUrl",
      "position": {
        "lineStart": 85,
        "lineEnd": 85,
        "columnStart": 5,
        "columnEnd": 84
      }
    },
    {
      "rule": "curlUseHttpsUrl",
      "position": {
        "lineStart": 86,
        "lineEnd": 86,
        "columnStart": 5,
        "columnEnd": 93
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 215,
        "lineEnd": 215,
        "columnStart": 4,
        "columnEnd": 22
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 216,
        "lineEnd": 216,
        "columnStart": 4,
        "columnEnd": 26
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 109,
        "lineEnd": 109,
        "columnStart": 5,
        "columnEnd": 37
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 117,
        "lineEnd": 117,
        "columnStart": 5,
        "columnEnd": 24
      }
    },
    {
      "rule": "gpgUseBatchFlag",
      "position": {
        "lineStart": 98,
        "lineEnd": 98,
        "columnStart": 4,
        "columnEnd": 84
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM php:7.3.6-fpm-alpine3.9\n\nLABEL maintainer=\"Ric Harvey <ric@ngd.io>\"\n\nENV php_conf /usr/local/etc/php-fpm.conf\nENV fpm_conf /usr/local/etc/php-fpm.d/www.conf\nENV php_vars /usr/local/etc/php/conf.d/docker-vars.ini\n\nENV NGINX_VERSION 1.16.0\nENV LUA_MODULE_VERSION 0.10.14\nENV DEVEL_KIT_MODULE_VERSION 0.3.0\nENV LUAJIT_LIB=/usr/lib\nENV LUAJIT_INC=/usr/include/luajit-2.1\n\n# resolves #166\nENV LD_PRELOAD /usr/lib/preloadable_libiconv.so php\nRUN apk add --no-cache --repository http://dl-3.alpinelinux.org/alpine/edge/community gnu-libiconv\n\nRUN GPG_KEYS=B0F4253373F8F6F510D42178520A9993A1C052F8 \\\n  && CONFIG=\"\\\n    --prefix=/etc/nginx \\\n    --sbin-path=/usr/sbin/nginx \\\n    --modules-path=/usr/lib/nginx/modules \\\n    --conf-path=/etc/nginx/nginx.conf \\\n    --error-log-path=/var/log/nginx/error.log \\\n    --http-log-path=/var/log/nginx/access.log \\\n    --pid-path=/var/run/nginx.pid \\\n    --lock-path=/var/run/nginx.lock \\\n    --http-client-body-temp-path=/var/cache/nginx/client_temp \\\n    --http-proxy-temp-path=/var/cache/nginx/proxy_temp \\\n    --http-fastcgi-temp-path=/var/cache/nginx/fastcgi_temp \\\n    --http-uwsgi-temp-path=/var/cache/nginx/uwsgi_temp \\\n    --http-scgi-temp-path=/var/cache/nginx/scgi_temp \\\n    --user=nginx \\\n    --group=nginx \\\n    --with-http_ssl_module \\\n    --with-http_realip_module \\\n    --with-http_addition_module \\\n    --with-http_sub_module \\\n    --with-http_dav_module \\\n    --with-http_flv_module \\\n    --with-http_mp4_module \\\n    --with-http_gunzip_module \\\n    --with-http_gzip_static_module \\\n    --with-http_random_index_module \\\n    --with-http_secure_link_module \\\n    --with-http_stub_status_module \\\n    --with-http_auth_request_module \\\n    --with-http_xslt_module=dynamic \\\n    --with-http_image_filter_module=dynamic \\\n    --with-http_geoip_module=dynamic \\\n    --with-http_perl_module=dynamic \\\n    --with-threads \\\n    --with-stream \\\n    --with-stream_ssl_module \\\n    --with-stream_ssl_preread_module \\\n    --with-stream_realip_module \\\n    --with-stream_geoip_module=dynamic \\\n    --with-http_slice_module \\\n    --with-mail \\\n    --with-mail_ssl_module \\\n    --with-compat \\\n    --with-file-aio \\\n    --with-http_v2_module \\\n    --add-module=/usr/src/ngx_devel_kit-$DEVEL_KIT_MODULE_VERSION \\\n    --add-module=/usr/src/lua-nginx-module-$LUA_MODULE_VERSION \\\n  \" \\\n  && addgroup -S nginx \\\n  && adduser -D -S -h /var/cache/nginx -s /sbin/nologin -G nginx nginx \\ \n  && apk add --no-cache --virtual .build-deps \\\n    autoconf \\\n    gcc \\\n    libc-dev \\\n    make \\\n    libressl-dev \\\n    pcre-dev \\\n    zlib-dev \\\n    linux-headers \\\n    curl \\\n    gnupg \\\n    libxslt-dev \\\n    gd-dev \\\n    geoip-dev \\\n    perl-dev \\\n    luajit-dev \\\n  && curl -fSL https://nginx.org/download/nginx-$NGINX_VERSION.tar.gz -o nginx.tar.gz \\\n  && curl -fSL https://nginx.org/download/nginx-$NGINX_VERSION.tar.gz.asc -o nginx.tar.gz.asc \\\n  && curl -fSL https://github.com/simpl/ngx_devel_kit/archive/v$DEVEL_KIT_MODULE_VERSION.tar.gz -o ndk.tar.gz \\\n  && curl -fSL https://github.com/openresty/lua-nginx-module/archive/v$LUA_MODULE_VERSION.tar.gz -o lua.tar.gz \\\n  && export GNUPGHOME=\"$(mktemp -d)\" \\\n  && found=''; \\\n  for server in \\\n    ha.pool.sks-keyservers.net \\\n    hkp://keyserver.ubuntu.com:80 \\\n    hkp://p80.pool.sks-keyservers.net:80 \\\n    pgp.mit.edu; \\\n  do \\\n    echo \"Fetching GPG key $GPG_KEYS from $server\"; \\\n    gpg --batch --keyserver \"$server\" --keyserver-options timeout=10 --recv-keys \"$GPG_KEYS\" && found=yes && break; \\\n  done; \\\n  test -z \"$found\" && echo >&2 \"error: failed to fetch GPG key $GPG_KEYS\" && exit 1; \\\n  gpg --batch --verify nginx.tar.gz.asc nginx.tar.gz \\\n  #&& rm -r \"$GNUPGHOME\" nginx.tar.gz.asc \\\n  && mkdir -p /usr/src \\\n  && tar -zxC /usr/src -f nginx.tar.gz \\\n  && tar -zxC /usr/src -f ndk.tar.gz \\\n  && tar -zxC /usr/src -f lua.tar.gz \\\n  && rm nginx.tar.gz ndk.tar.gz lua.tar.gz \\ \n  && cd /usr/src/nginx-$NGINX_VERSION \\\n  && ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" $CONFIG --with-debug \\\n  && make -j$(getconf _NPROCESSORS_ONLN) \\\n  && mv objs/nginx objs/nginx-debug \\\n  && mv objs/ngx_http_xslt_filter_module.so objs/ngx_http_xslt_filter_module-debug.so \\\n  && mv objs/ngx_http_image_filter_module.so objs/ngx_http_image_filter_module-debug.so \\\n  && mv objs/ngx_http_geoip_module.so objs/ngx_http_geoip_module-debug.so \\\n  && mv objs/ngx_http_perl_module.so objs/ngx_http_perl_module-debug.so \\\n  && mv objs/ngx_stream_geoip_module.so objs/ngx_stream_geoip_module-debug.so \\\n  && ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" $CONFIG \\\n  && make -j$(getconf _NPROCESSORS_ONLN) \\\n  && make install \\\n  && rm -rf /etc/nginx/html/ \\\n  && mkdir /etc/nginx/conf.d/ \\\n  && mkdir -p /usr/share/nginx/html/ \\\n  && install -m644 html/index.html /usr/share/nginx/html/ \\\n  && install -m644 html/50x.html /usr/share/nginx/html/ \\\n  && install -m755 objs/nginx-debug /usr/sbin/nginx-debug \\\n  && install -m755 objs/ngx_http_xslt_filter_module-debug.so /usr/lib/nginx/modules/ngx_http_xslt_filter_module-debug.so \\\n  && install -m755 objs/ngx_http_image_filter_module-debug.so /usr/lib/nginx/modules/ngx_http_image_filter_module-debug.so \\\n  && install -m755 objs/ngx_http_geoip_module-debug.so /usr/lib/nginx/modules/ngx_http_geoip_module-debug.so \\\n  && install -m755 objs/ngx_http_perl_module-debug.so /usr/lib/nginx/modules/ngx_http_perl_module-debug.so \\\n  && install -m755 objs/ngx_stream_geoip_module-debug.so /usr/lib/nginx/modules/ngx_stream_geoip_module-debug.so \\\n  && ln -s ../../usr/lib/nginx/modules /etc/nginx/modules \\\n  && strip /usr/sbin/nginx* \\\n  && strip /usr/lib/nginx/modules/*.so \\\n  && rm -rf /usr/src/nginx-$NGINX_VERSION \\\n\n  # Bring in gettext so we can get `envsubst`, then throw\n  # the rest away. To do this, we need to install `gettext`\n  # then move `envsubst` out of the way so `gettext` can\n  # be deleted completely, then move `envsubst` back.\n  && apk add --no-cache --virtual .gettext gettext \\\n  && mv /usr/bin/envsubst /tmp/ \\\n\n  && runDeps=\"$( \\\n    scanelf --needed --nobanner /usr/sbin/nginx /usr/lib/nginx/modules/*.so /tmp/envsubst \\\n      | awk '{ gsub(/,/, \"\\nso:\", $2); print \"so:\" $2 }' \\\n      | sort -u \\\n      | xargs -r apk info --installed \\\n      | sort -u \\\n  )\" \\\n  && apk add --no-cache --virtual .nginx-rundeps $runDeps \\\n  && apk del .build-deps \\\n  && apk del .gettext \\\n  && mv /tmp/envsubst /usr/local/bin/ \\\n\n  # forward request and error logs to docker log collector\n  && ln -sf /dev/stdout /var/log/nginx/access.log \\\n  && ln -sf /dev/stderr /var/log/nginx/error.log\n\nRUN echo @testing http://nl.alpinelinux.org/alpine/edge/testing >> /etc/apk/repositories && \\\n    echo /etc/apk/respositories && \\\n    apk update && apk upgrade &&\\\n    apk add --no-cache \\\n    bash \\\n    openssh-client \\\n    wget \\\n    supervisor \\\n    curl \\\n    libcurl \\\n    libzip-dev \\\n    bzip2-dev \\\n    imap-dev \\\n    openssl-dev \\\n    git \\\n    python \\\n    python-dev \\\n    py-pip \\\n    augeas-dev \\\n    libressl-dev \\\n    ca-certificates \\\n    dialog \\\n    autoconf \\\n    make \\\n    gcc \\\n    musl-dev \\\n    linux-headers \\\n    libmcrypt-dev \\\n    libpng-dev \\\n    icu-dev \\\n    libpq \\\n    libxslt-dev \\\n    libffi-dev \\\n    freetype-dev \\\n    sqlite-dev \\\n    libjpeg-turbo-dev \\\n    postgresql-dev && \\\n    docker-php-ext-configure gd \\\n      --with-gd \\\n      --with-freetype-dir=/usr/include/ \\\n      --with-png-dir=/usr/include/ \\\n      --with-jpeg-dir=/usr/include/ && \\\n    #curl iconv session\n    #docker-php-ext-install pdo_mysql pdo_sqlite mysqli mcrypt gd exif intl xsl json soap dom zip opcache && \\\n    docker-php-ext-install iconv pdo_mysql pdo_sqlite pgsql pdo_pgsql mysqli gd exif intl xsl json soap dom zip opcache && \\\n    pecl install xdebug-2.7.2 && \\\n    pecl install -o -f redis && \\\n    echo \"extension=redis.so\" > /usr/local/etc/php/conf.d/redis.ini && \\\n    docker-php-source delete && \\\n    mkdir -p /etc/nginx && \\\n    mkdir -p /var/www/app && \\\n    mkdir -p /run/nginx && \\\n    mkdir -p /var/log/supervisor && \\\n    php -r \"copy('https://getcomposer.org/installer', 'composer-setup.php');\" && \\\n    php composer-setup.php --quiet --install-dir=/usr/bin --filename=composer && \\\n    rm composer-setup.php && \\\n    pip install --no-cache-dir -U pip && \\\n    pip install --no-cache-dir -U certbot && \\\n    mkdir -p /etc/letsencrypt/webrootauth && \\\n    apk del gcc musl-dev linux-headers libffi-dev augeas-dev python-dev make autoconf\n#    apk del .sys-deps\n#    ln -s /usr/bin/php7 /usr/bin/php\n\nADD conf/supervisord.conf /etc/supervisord.conf\n\n# Copy our nginx config\nRUN rm -Rf /etc/nginx/nginx.conf\nADD conf/nginx.conf /etc/nginx/nginx.conf\n\n# nginx site conf\nRUN mkdir -p /etc/nginx/sites-available/ && \\\nmkdir -p /etc/nginx/sites-enabled/ && \\\nmkdir -p /etc/nginx/ssl/ && \\\nrm -Rf /var/www/* && \\\nmkdir /var/www/html/\nADD conf/nginx-site.conf /etc/nginx/sites-available/default.conf\nADD conf/nginx-site-ssl.conf /etc/nginx/sites-available/default-ssl.conf\nRUN ln -s /etc/nginx/sites-available/default.conf /etc/nginx/sites-enabled/default.conf\n\n# tweak php-fpm config\nRUN echo \"cgi.fix_pathinfo=0\" > ${php_vars} &&\\\n    echo \"upload_max_filesize = 100M\"  >> ${php_vars} &&\\\n    echo \"post_max_size = 100M\"  >> ${php_vars} &&\\\n    echo \"variables_order = \\\"EGPCS\\\"\"  >> ${php_vars} && \\\n    echo \"memory_limit = 128M\"  >> ${php_vars} && \\\n    sed -i \\\n        -e \"s/;catch_workers_output\\s*=\\s*yes/catch_workers_output = yes/g\" \\\n        -e \"s/pm.max_children = 5/pm.max_children = 4/g\" \\\n        -e \"s/pm.start_servers = 2/pm.start_servers = 3/g\" \\\n        -e \"s/pm.min_spare_servers = 1/pm.min_spare_servers = 2/g\" \\\n        -e \"s/pm.max_spare_servers = 3/pm.max_spare_servers = 4/g\" \\\n        -e \"s/;pm.max_requests = 500/pm.max_requests = 200/g\" \\\n        -e \"s/user = www-data/user = nginx/g\" \\\n        -e \"s/group = www-data/group = nginx/g\" \\\n        -e \"s/;listen.mode = 0660/listen.mode = 0666/g\" \\\n        -e \"s/;listen.owner = www-data/listen.owner = nginx/g\" \\\n        -e \"s/;listen.group = www-data/listen.group = nginx/g\" \\\n        -e \"s/listen = 127.0.0.1:9000/listen = \\/var\\/run\\/php-fpm.sock/g\" \\\n        -e \"s/^;clear_env = no$/clear_env = no/\" \\\n        ${fpm_conf}\n#    ln -s /etc/php7/php.ini /etc/php7/conf.d/php.ini && \\\n#    find /etc/php7/conf.d/ -name \"*.ini\" -exec sed -i -re 's/^(\\s*)#(.*)/\\1;\\2/g' {} \\;\n\n\n# Add Scripts\nADD scripts/start.sh /start.sh\nADD scripts/pull /usr/bin/pull\nADD scripts/push /usr/bin/push\nADD scripts/letsencrypt-setup /usr/bin/letsencrypt-setup\nADD scripts/letsencrypt-renew /usr/bin/letsencrypt-renew\nRUN chmod 755 /usr/bin/pull && chmod 755 /usr/bin/push && chmod 755 /usr/bin/letsencrypt-setup && chmod 755 /usr/bin/letsencrypt-renew && chmod 755 /start.sh\n\n# copy in code\nADD src/ /var/www/html/\nADD errors/ /var/www/errors\n\n\nEXPOSE 443 80\n\nWORKDIR \"/var/www/html\"\nCMD [\"/start.sh\"]\n"
}