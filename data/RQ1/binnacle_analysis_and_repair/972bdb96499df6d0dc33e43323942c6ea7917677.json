{
  "startTime": 1674236467166,
  "endTime": 1674236467803,
  "originalSmells": [
    {
      "rule": "wgetUseHttpsUrl",
      "position": {
        "lineStart": 30,
        "lineEnd": 30,
        "columnStart": 4,
        "columnEnd": 73
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 25,
        "lineEnd": 25,
        "columnStart": 4,
        "columnEnd": 63
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 33,
        "lineEnd": 33,
        "columnStart": 4,
        "columnEnd": 32
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 73,
        "lineEnd": 73,
        "columnStart": 20,
        "columnEnd": 31
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 6,
        "lineEnd": 6,
        "columnStart": 7,
        "columnEnd": 29
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 15,
        "lineEnd": 15,
        "columnStart": 4,
        "columnEnd": 35
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 23,
        "lineEnd": 23,
        "columnStart": 4,
        "columnEnd": 31
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 31,
        "lineEnd": 31,
        "columnStart": 4,
        "columnEnd": 41
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 39,
        "lineEnd": 39,
        "columnStart": 4,
        "columnEnd": 27
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 97,
        "lineEnd": 97,
        "columnStart": 4,
        "columnEnd": 47
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 3,
        "lineEnd": 3,
        "columnStart": 4,
        "columnEnd": 82
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 3,
        "lineEnd": 3,
        "columnStart": 4,
        "columnEnd": 82
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM ubuntu:16.04\n\nRUN apt update && apt dist-upgrade -y && \\\n    apt install --no-install-recommends -y make git cmake wget build-essential automake libtool bison flex && rm -rf /var/lib/apt/lists/*;\n\nRUN wget https://github.com/open-source-parsers/jsoncpp/archive/1.8.4.tar.gz \\\n    && tar -xzvf 1.8.4.tar.gz && rm 1.8.4.tar.gz\nWORKDIR jsoncpp-1.8.4\nRUN cmake . -DJSONCPP_WITH_TESTS=NO -DBUILD_STATIC_LIBS=YES \\\n    -DBUILD_SHARED_LIBS=NO -DCMAKE_BUILD_TYPE=Release\nRUN make && make install\n\nWORKDIR ../\n\nRUN wget https://www.openssl.org/source/openssl-1.1.0h.tar.gz && \\\n    tar -xvzf openssl-1.1.0h.tar.gz && rm openssl-1.1.0h.tar.gz\nWORKDIR openssl-1.1.0h\nRUN ./Configure linux-x86_64 no-shared\nRUN make && make install\n\nWORKDIR ../\n\nRUN wget https://curl.haxx.se/download/curl-7.59.0.tar.gz && \\\n    tar xzvf curl-7.59.0.tar.gz && rm curl-7.59.0.tar.gz\nWORKDIR curl-7.59.0\nRUN ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --disable-shared --enable-static --disable-ldap\nRUN make && make install\n\nWORKDIR ../\n\nRUN wget https://ftp.gnu.org/gnu/libmicrohttpd/libmicrohttpd-0.9.59.tar.gz && \\\n    tar -xvzf libmicrohttpd-0.9.59.tar.gz && rm libmicrohttpd-0.9.59.tar.gz\nWORKDIR libmicrohttpd-0.9.59\nRUN ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --disable-shared\nRUN make && make install\n\nWORKDIR ../\n\nRUN wget https://github.com/cinemast/libjson-rpc-cpp/archive/v1.1.0.tar.gz && \\\n    tar -xvzf v1.1.0.tar.gz && rm v1.1.0.tar.gz\nWORKDIR libjson-rpc-cpp-1.1.0\nRUN cmake -E env CXXFLAGS=\"-DCURL_STATICLIB\" cmake . -DBUILD_SHARED_LIBS=NO \\\n    -DBUILD_STATIC_LIBS=YES -DCOMPILE_TESTS=NO \\\n    -DCOMPILE_STUBGEN=NO -DCOMPILE_EXAMPLES=NO -DCMAKE_BUILD_TYPE=Release \\\n    -DREDIS_CLIENT=NO -DREDIS_SERVER=NO \\\n    -DWITH_COVERAGE=NO\nRUN make && make install\n\nWORKDIR ../\n\nRUN git clone https://github.com/bitcoin-core/leveldb\nWORKDIR leveldb\n\nRUN make out-static/libleveldb.a out-static/libmemenv.a\nRUN cp -r out-static/*.a /usr/local/lib && \\\n    cp -r include/* /usr/local/include\n\nWORKDIR ../\n\nRUN git clone https://github.com/SFML/SFML.git\nWORKDIR SFML\nRUN cmake . -DBUILD_SHARED_LIBS=NO -DSFML_BUILD_DOC=NO -DSFML_BUILD_AUDIO=NO \\\n    -DSFML_BUILD_GRAPHICS=NO -DSFML_BUILD_WINDOW=NO -DSFML_BUILD_EXAMPLES=NO \\\n    -DCMAKE_BUILD_TYPE=Release\nRUN make && make install\nRUN cp /usr/local/lib/libsfml-network-s.a /usr/local/lib/libsfml-network.a && cp /usr/local/lib/libsfml-system-s.a /usr/local/lib/libsfml-system.a\n\nWORKDIR ../\n\nRUN git clone https://github.com/rweather/noise-c\nWORKDIR noise-c\nADD noise-c-linux.patch .\nRUN git apply noise-c-linux.patch\nRUN ./autogen.sh && ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\"\nRUN make && make install\n\nWORKDIR ../\n\nRUN git clone https://github.com/lhorgan/luack\nWORKDIR luack\nRUN git checkout 43e9e17984e4e992ac2dd0510ac15ebd22f38fdc\nWORKDIR src\nRUN make liblua.a SYSCFLAGS=\"-DLUA_USE_LINUX\" && cp liblua.a /usr/local/lib/liblua5.3.a && \\\n    mkdir /usr/include/lua5.3 && cp -r *.h /usr/include/lua5.3\n\nWORKDIR ../../\n\nRUN git clone https://github.com/metalicjames/selene.git\nRUN cp -r selene/include/* /usr/local/include\n\nRUN git clone https://github.com/metalicjames/lua-lz4.git\nWORKDIR lua-lz4\nRUN make\n\nWORKDIR ../\n\nRUN wget https://github.com/premake/premake-core/releases/download/v5.0.0-alpha12/premake-5.0.0-alpha12-linux.tar.gz && \\\n    tar zxvf premake-5.0.0-alpha12-linux.tar.gz && \\\n    cp premake5 /usr/bin && rm premake-5.0.0-alpha12-linux.tar.gz\n\nCOPY ./cryptokernel /cryptokernel\n\nRUN cp lua-lz4/lz4.so cryptokernel\n\nRUN git clone https://github.com/metalicjames/cschnorr.git\nWORKDIR cschnorr\nRUN premake5 gmake2 && make config=release_static cschnorr && \\\n    mkdir /usr/local/include/cschnorr/ && \\\n    cp src/*.h /usr/local/include/cschnorr/ && \\\n    cp bin/Static/Release/libcschnorr.a /usr/local/lib\nWORKDIR ../\n\nWORKDIR cryptokernel\n\nRUN premake5 gmake2 --include-dir=/usr/include/lua5.3 && make config=release_static ckd"
}