{
  "startTime": 1674249877443,
  "endTime": 1674249878085,
  "originalSmells": [
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 25,
        "lineEnd": 25,
        "columnStart": 4,
        "columnEnd": 41
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 163,
        "lineEnd": 163,
        "columnStart": 4,
        "columnEnd": 22
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 84,
        "lineEnd": 84,
        "columnStart": 4,
        "columnEnd": 66
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 82,
        "lineEnd": 82,
        "columnStart": 4,
        "columnEnd": 37
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 9,
        "lineEnd": 13,
        "columnStart": 4,
        "columnEnd": 67
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 43,
        "lineEnd": 43,
        "columnStart": 4,
        "columnEnd": 59
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 62,
        "lineEnd": 68,
        "columnStart": 4,
        "columnEnd": 14
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 136,
        "lineEnd": 136,
        "columnStart": 22,
        "columnEnd": 78
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 175,
        "lineEnd": 175,
        "columnStart": 4,
        "columnEnd": 56
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 180,
        "lineEnd": 180,
        "columnStart": 4,
        "columnEnd": 32
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 191,
        "lineEnd": 191,
        "columnStart": 4,
        "columnEnd": 37
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 9,
        "lineEnd": 13,
        "columnStart": 4,
        "columnEnd": 67
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 43,
        "lineEnd": 43,
        "columnStart": 4,
        "columnEnd": 59
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 62,
        "lineEnd": 68,
        "columnStart": 4,
        "columnEnd": 14
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 136,
        "lineEnd": 136,
        "columnStart": 22,
        "columnEnd": 78
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 175,
        "lineEnd": 175,
        "columnStart": 4,
        "columnEnd": 56
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 180,
        "lineEnd": 180,
        "columnStart": 4,
        "columnEnd": 32
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 191,
        "lineEnd": 191,
        "columnStart": 4,
        "columnEnd": 37
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM nvidia/cuda:8.0-cudnn5-devel\n\n# Use Tini as the init process with PID 1\nADD https://github.com/krallin/tini/releases/download/v0.10.0/tini /tini\nRUN chmod +x /tini\nENTRYPOINT [\"/tini\", \"--\"]\n\n# Install dependencies for OpenBLAS, Jupyter, and Torch\nRUN apt-get update \\\n && apt-get install --no-install-recommends -y \\\n    build-essential git gfortran \\\n    python3 python3-setuptools python3-dev \\\n    cmake curl wget unzip libreadline-dev libjpeg-dev libpng-dev ncurses-dev \\\n    imagemagick gnuplot gnuplot-x11 libssl-dev libzmq3-dev graphviz && rm -rf /var/lib/apt/lists/*;\n\n# Install OpenBLAS\nRUN git clone https://github.com/xianyi/OpenBLAS.git /tmp/OpenBLAS \\\n && cd /tmp/OpenBLAS \\\n && [ $(getconf _NPROCESSORS_ONLN) = 1 ] && export USE_OPENMP=0 || export USE_OPENMP=1 \\\n && make -j $(getconf _NPROCESSORS_ONLN) NO_AFFINITY=1 \\\n && make install \\\n && rm -rf /tmp/OpenBLAS\n\n# Install Jupyter\nRUN easy_install3 pip \\\n && pip install --no-cache-dir 'notebook==4.2.1' jupyter\n\n# Install Torch\nARG TORCH_DISTRO_COMMIT=9c2ef7f185c682ea333e06654cb6e5b67dfe7cd2\nRUN git clone https://github.com/torch/distro.git ~/torch --recursive \\\n && cd ~/torch \\\n && git checkout \"$TORCH_DISTRO_COMMIT\" \\\n && ./install.sh\n\n# Export environment variables manually\nENV LUA_PATH='/root/.luarocks/share/lua/5.1/?.lua;/root/.luarocks/share/lua/5.1/?/init.lua;/root/torch/install/share/lua/5.1/?.lua;/root/torch/install/share/lua/5.1/?/init.lua;./?.lua;/root/torch/install/share/luajit-2.1.0-alpha/?.lua;/usr/local/share/lua/5.1/?.lua;/usr/local/share/lua/5.1/?/init.lua' \\\n    LUA_CPATH='/root/.luarocks/lib/lua/5.1/?.so;/root/torch/install/lib/lua/5.1/?.so;./?.so;/usr/local/lib/lua/5.1/?.so;/usr/local/lib/lua/5.1/loadall.so' \\\n    PATH=/root/torch/install/bin:$PATH \\\n    LD_LIBRARY_PATH=/root/torch/install/lib:$LD_LIBRARY_PATH \\\n    DYLD_LIBRARY_PATH=/root/torch/install/lib:$DYLD_LIBRARY_PATH\n\n# Install GTK libraries\nRUN apt-get update \\\n && apt-get install --no-install-recommends -y libgtk2.0-dev libcanberra-gtk-module && rm -rf /var/lib/apt/lists/*;\n\n# Install OpenCV and Lua bindings\nRUN cd /tmp \\\n && wget -q https://github.com/Itseez/opencv/archive/3.1.0.zip \\\n && unzip 3.1.0.zip \\\n && mkdir opencv-3.1.0/build \\\n && cd opencv-3.1.0/build \\\n && cmake -D WITH_CUDA=off -D WITH_OPENCL=off -D BUILD_SHARED_LIBS=off \\\n      -D CMAKE_CXX_FLAGS=-fPIC -D WITH_QT=off -D WITH_VTK=off -D WITH_GTK=on \\\n      -D WITH_OPENGL=off -D CMAKE_BUILD_TYPE=RELEASE \\\n      -D CMAKE_INSTALL_PREFIX=/usr/local .. \\\n && make -j $(getconf _NPROCESSORS_ONLN) \\\n && make install \\\n && rm -rf /tmp/3.1.0.zip /tmp/opencv-3.1.0\nRUN luarocks install cv\n\n# Install FFmpeg and Lua bindings\nRUN apt-get update \\\n && apt-get install --no-install-recommends -y \\\n    libavformat-dev \\\n    libavcodec-dev \\\n    libavutil-dev \\\n    libavfilter-dev \\\n    ffmpeg \\\n    pkg-config && rm -rf /var/lib/apt/lists/*;\nARG TORCHVID_COMMIT=8dd49d6bc9279278fe438cf8a6d7bcfe0c58a7ab\nRUN git clone https://github.com/anibali/torchvid.git /tmp/torchvid \\\n && cd /tmp/torchvid \\\n && git checkout \"$TORCHVID_COMMIT\" \\\n && luarocks make rockspecs/torchvid-scm-0.rockspec \\\n && rm -rf /tmp/torchvid\n\n# Install HDF5 and Lua bindings\n# RUN apt-get update \\\n#  && apt-get install -y libhdf5-dev hdf5-tools\nRUN mkdir -p /tmp/hdf5 \\\n && cd /tmp/hdf5 \\\n && wget -q https://support.hdfgroup.org/ftp/HDF5/releases/hdf5-1.10/hdf5-1.10.0-patch1/src/hdf5-1.10.0-patch1.tar.gz \\\n && tar xzf hdf5-1.10.0-patch1.tar.gz \\\n && cd hdf5-1.10.0-patch1 \\\n && ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --prefix=/usr/local --with-default-api-version=v18 \\\n && make \\\n && make install \\\n && rm -rf /tmp/hdf5 && rm hdf5-1.10.0-patch1.tar.gz\n\nARG TORCH_HDF5_COMMIT=dd6b2cd6f56b17403bf46174cc84186cb6416c14\nRUN git clone https://github.com/anibali/torch-hdf5.git /tmp/torch-hdf5 \\\n && cd /tmp/torch-hdf5 \\\n && git checkout \"$TORCH_HDF5_COMMIT\" \\\n && luarocks make hdf5-0-0.rockspec \\\n && rm -rf /tmp/torch-hdf5\n\n# Install Moses for utilities\nRUN luarocks install moses\n\n# Install JSON parser\nRUN luarocks install lua-cjson\n\n# Install XML parser\nRUN luarocks install luaxpath\n\n# Install CSV parser\nRUN luarocks install csv\n\n# Install automatic differentiation library\nRUN luarocks install autograd\n\n# Install recurrent neural network modules\nRUN luarocks install rnn\n\n# Install unsupervised learning modules (includes PCA)\nRUN luarocks install unsup\n\n# Install fast t-SNE module\nRUN luarocks install https://raw.githubusercontent.com/DmitryUlyanov/Multicore-TSNE/master/torch/tsne-1.0-0.rockspec\n\n# Install HTTP client\nRUN luarocks install httpclient\n\n# Install Lua POSIX bindings\nRUN unset LIBRARY_PATH && luarocks install luaposix\n\n# Install random number generator which allows multiple RNG instances\nRUN luarocks install lrandom\n\n# Install iTorch\nRUN luarocks install itorch\n\n# Install helpers for loading datasets\nRUN luarocks install dataload\n\n# Install GraphicsMagick and Lua bindings\nRUN apt-get update && apt-get install --no-install-recommends -y graphicsmagick libgraphicsmagick1-dev && rm -rf /var/lib/apt/lists/*;\nRUN luarocks install graphicsmagick\n\n# Install neural network analysis library\nRUN luarocks install optnet\n\n# Install Lua web server\nRUN luarocks install lzlib ZLIB_LIBDIR=/lib/x86_64-linux-gnu\nRUN luarocks install pegasus\n\n# Install Base64 library\nRUN luarocks install lbase64\n\n# Install remote debugger for Lua\nRUN luarocks install https://gist.githubusercontent.com/anibali/d8a54118680ec0c300680aa12cb25e9d/raw/34917d844a19a44f58c720f5e2563e7baef23029/mobdebug-scm-1.rockspec\n\n# Install weight initialisation helper\nRUN luarocks install nninit\n\n# Install Torchnet framework\nRUN luarocks install torchnet\n\n# Install Spatial Transformer Network library\nRUN luarocks install https://raw.githubusercontent.com/qassemoquab/stnbhwd/master/stnbhwd-scm-1.rockspec\n\n# Install Stitch for executing and rendering markdown files with code in them\nRUN cd /tmp \\\n && pip install --no-cache-dir typing \\\n && wget -q https://github.com/jgm/pandoc/releases/download/1.18/pandoc-1.18-1-amd64.deb \\\n && dpkg -i pandoc-1.18-1-amd64.deb \\\n && git clone https://github.com/pystitch/stitch.git \\\n && cd stitch \\\n && git checkout 56b2107df8c79141cad8514ff3b954761b98156a \\\n && python3 setup.py install \\\n && rm -rf /tmp/stitch\nENV LC_ALL=C.UTF-8\n\n# Install Caffe model loader\nRUN apt-get update \\\n && apt-get install --no-install-recommends -y libprotobuf-dev protobuf-compiler && rm -rf /var/lib/apt/lists/*;\nRUN luarocks install loadcaffe\n\n# Install module for loading Matlab data files\nRUN apt-get update \\\n && apt-get install --no-install-recommends -y libmatio2 \\\n && luarocks install matio && rm -rf /var/lib/apt/lists/*;\n\n# Layer-wise learning rate module\nRUN luarocks install nnlr\n\n# Install distributions bindings\nRUN luarocks install https://raw.github.com/deepmind/torch-distributions/master/distributions-0-0.rockspec\n\n# Install manifold\nRUN apt-get update \\\n && apt-get install --no-install-recommends -y libatlas3-base \\\n && luarocks install manifold && rm -rf /var/lib/apt/lists/*;\n\n# Clean up\nRUN apt-get clean && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*\n\n# Set working dir\nRUN mkdir /root/notebook\nWORKDIR /root/notebook\n\n# Jupyter config\nRUN jupyter notebook --generate-config \\\n && echo \"\\nimport os\\nfrom IPython.lib import passwd\\npassword = os.environ.get('JUPYTER_PASSWORD')\\nif password:\\n  c.NotebookApp.password = passwd(password)\\n\" \\\n    >> ~/.jupyter/jupyter_notebook_config.py\nCOPY notebook.json /root/.jupyter/nbconfig/\n\n# Expose Jupyter port\nEXPOSE 8888\n\n\n# Install CuDNN with Torch bindings\nRUN luarocks install https://raw.githubusercontent.com/soumith/cudnn.torch/R5/cudnn-scm-1.rockspec\n\n\nCMD [\"jupyter\", \"notebook\", \"--no-browser\", \"--ip=0.0.0.0\"]\n"
}