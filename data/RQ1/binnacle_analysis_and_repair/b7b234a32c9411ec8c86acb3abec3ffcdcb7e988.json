{
  "startTime": 1674245225378,
  "endTime": 1674245225525,
  "originalSmells": [
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 21,
        "lineEnd": 21,
        "columnStart": 12,
        "columnEnd": 32
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 37,
        "lineEnd": 37,
        "columnStart": 12,
        "columnEnd": 25
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM        stibbons31/alpine-s6-python3-twisted:py3.6-tx17.9\nMAINTAINER  gaetan@xeberon.net\n\n# set environment variables\nENV         PYTHONIOENCODING=\"UTF-8\"\n\nRUN         apk add --no-cache --update \\\n                    curl \\\n                    gcc \\\n                    git \\\n                    linux-headers \\\n                    make \\\n                    musl-dev \\\n                    nodejs \\\n                    python2 \\\n                    python3-dev\n\n# Install frontend high level dependencies\nRUN apk add --no-cache --update \\\n                    nodejs \\\n                    nodejs-npm \\\n        && npm install -g npm@5 && npm cache clean --force;\n\n# Injecting files into containers\nRUN         mkdir -p /app\nWORKDIR     /app\n\n# Keep dependencies on its own Docker FS Layer\n# To avoid reinstall of all dependencies each time code changes\nCOPY        Pipfile* setup-pip.sh /app/\nRUN         ./setup-pip.sh \\\n        &&  pipenv install --system --skip-lock\n\n# installing main Python module so that PBR finds the version\n# used in later 'make version' targets\nCOPY        . /app/\nRUN cd /app \\\n        && pip install --no-cache-dir .\n\n# Adding rest of the application in next docker layers\nCOPY        frontend /app/frontend/\n\nRUN         cd /app/frontend \\\n        &&  make dev \\\n        &&  make version \\\n        &&  make build \\\n        &&  mkdir -p /www \\\n        &&  cp -rf dist/* /www/ \\\n        &&  rm -rf /app/frontend\n\nRUN         npm cache clear --force \\\n        &&  apk del \\\n                    nodejs \\\n                    nodejs-npm\n\n# copy containers's startup files\nCOPY        dockerfs/ /\nRUN         mkdir -p /media\n\nUSER        root\n# clean up\n# dopplerr is installed on the system, /www has the frontend\nRUN         rm -rfv /app\n\nRUN         apk del \\\n                    python3-dev \\\n                    make \\\n                    gcc \\\n                    curl \\\n                    linux-headers \\\n                    musl-dev \\\n                    nodejs  \\\n        &&  rm  -rf \\\n                /root/.cache \\\n                /tmp/*\n\n# Docker configuration\nEXPOSE      8086\nVOLUME      /config \\\n            /animes \\\n            /movies \\\n            /tv\n"
}