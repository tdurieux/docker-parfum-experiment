{
  "startTime": 1674236427757,
  "endTime": 1674236428007,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 9,
        "lineEnd": 9,
        "columnStart": 4,
        "columnEnd": 65
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 8,
        "lineEnd": 8,
        "columnStart": 4,
        "columnEnd": 118
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 17,
        "lineEnd": 17,
        "columnStart": 4,
        "columnEnd": 30
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM python:3.6\n\nARG userid=1000\nARG run_buildout=true\n\n# varnish 4.1 repo has a package for debian jessie, debian stretch,\n# ubuntu xenial (16.04), but not ubuntu zesty (17.04) so defaults to varnish 5.0.0 from ubuntu repo.\nRUN apt-get update && \\\n    DEBIAN_FRONTEND=noninteractive apt-get --no-install-recommends install -y curl git libzmq3-dev libyaml-dev apt-transport-https lsb-release && \\\n    curl -f -L https://packagecloud.io/varnishcache/varnish41/gpgkey | apt-key add - && \\\n    oslower=$(lsb_release -s -i | tr '[:upper:]' '[:lower:]') && \\\n    oscodename=$(lsb_release -s -c) && \\\n    echo \"Package: varnish\" >/etc/apt/preferences.d/varnish && \\\n    echo \"Pin: release l=varnish41\" >>/etc/apt/preferences.d/varnish && \\\n    echo \"Pin-Priority: 999\" >>/etc/apt/preferences.d/varnish && \\\n    (test $oscodename != 'zesty' && echo \"deb https://packagecloud.io/varnishcache/varnish41/${oslower}/ ${oscodename} main\" > /etc/apt/sources.list.d/varnishcache_varnish41.list || true) && \\\n    apt-get update && \\\n    apt-get install --no-install-recommends -y varnish && \\\n    rm -rf /var/lib/apt/lists/*\n\nRUN addgroup --quiet --gid $userid \"u1000\" && \\\n    adduser \\\n        --shell /bin/bash \\\n        --disabled-password \\\n        --force-badname \\\n        --no-create-home \\\n        --uid $userid \\\n        --gid $userid \\\n        --gecos '' \\\n        --quiet \\\n        --home \"/app\" \\\n        \"u1000\"\nRUN pip3 install --disable-pip-version-check --no-cache-dir zc.buildout==2.9.5 setuptools==32.2.0 && pip3 uninstall -y six || true\n\n# grab gosu for easy step-down from root\n#RUN gpg --keyserver ha.pool.sks-keyservers.net --recv-keys B42F6819007F00F88E364FD4036A9C25BF357DD4\nRUN arch=\"$(dpkg --print-architecture)\" \\\n    && set -x \\\n    && curl --silent -o /usr/local/bin/gosu -fSL \"https://github.com/tianon/gosu/releases/download/1.10/gosu-$arch\" \\\n    && EXPECTED_SHA=\"5b3b03713a888cee84ecbf4582b21ac9fd46c3d935ff2d7ea25dd5055d302d3c\" \\\n    && sha256sum /usr/local/bin/gosu | grep -q $EXPECTED_SHA \\\n    && chmod +x /usr/local/bin/gosu\n#    && curl -o /usr/local/bin/gosu.asc -fSL \"https://github.com/tianon/gosu/releases/download/1.10/gosu-$arch.asc\" \\\n#    && gpg --verify /usr/local/bin/gosu.asc \\\n#    && rm /usr/local/bin/gosu.asc\n\nRUN mkdir -p /app/cache\nCOPY . /app/\nCOPY start.bash /start\nRUN chown -R u1000:u1000 /app\n\n# compile all pyc in sys.path\nRUN python -m compileall\nUSER u1000\n# compile all pyc in in the /app folder\nRUN python -m compileall /app\n# all the pyc files in the image take 5MB. It's better to have them in the\n# image instead of having them generated when the container starts. Think\n# about 100 containers started in parallel... less disk write, and we gain\n# 495MB of disk space.\nWORKDIR /app\n\nRUN mkdir -p -m 700 /app/.ssh && \\\n    echo \"|1|mkhJkTqJT7XEFCg9zJ6vXr9F7KM=|1ihCQCq4xl9SQDtCAqwp4auiRIk= ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBNn6VI+Ekg/iOz3bZL6bb35tj6fOjmmMOvkw592XDXy+bSes+2qHhcA3uOg5/wEtmRaK583uZH/CJ4512BpLb7M=\" >> /app/.ssh/known_hosts && \\\n    echo \"|1|VmfmXO+MNtehwEnpYIEHO7zfvm8=|ya5Yt/ILBv/gMHQLAfSu2tOWO2I= ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBNn6VI+Ekg/iOz3bZL6bb35tj6fOjmmMOvkw592XDXy+bSes+2qHhcA3uOg5/wEtmRaK583uZH/CJ4512BpLb7M=\" >> /app/.ssh/known_hosts\nRUN buildout bootstrap -c heroku.cfg\n# bin/buildout -c heroku.cfg is done outside this build if do_buildout is false\nRUN $run_buildout && bin/buildout -c heroku.cfg || true\n\nUSER root\n\nCMD [\"/start\"]\n"
}