{
  "startTime": 1674240357727,
  "endTime": 1674240358140,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 17,
        "lineEnd": 17,
        "columnStart": 4,
        "columnEnd": 45
      }
    },
    {
      "rule": "wgetUseHttpsUrl",
      "position": {
        "lineStart": 7,
        "lineEnd": 7,
        "columnStart": 7,
        "columnEnd": 148
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 38,
        "lineEnd": 38,
        "columnStart": 57,
        "columnEnd": 96
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 39,
        "lineEnd": 39,
        "columnStart": 4,
        "columnEnd": 39
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 40,
        "lineEnd": 40,
        "columnStart": 4,
        "columnEnd": 37
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 6,
        "lineEnd": 6,
        "columnStart": 25,
        "columnEnd": 66
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# The underlying base is ubuntu:16.04\nFROM nvidia/cuda:8.0-runtime\n\n# NVIDIA driver version must match the host!\nENV DRIVER_VERSION 384.69\nRUN mkdir -p /opt/nvidia && cd /opt/nvidia/ \\\n    && apt-get update && apt-get install --no-install-recommends -y wget module-init-tools && apt-get clean && rm -rf /var/lib/apt/lists/* \\\n    && wget https://us.download.nvidia.com/XFree86/Linux-x86_64/${DRIVER_VERSION}/NVIDIA-Linux-x86_64-${DRIVER_VERSION}.run -O /opt/nvidia/driver.run \\\n    && chmod +x /opt/nvidia/driver.run \\\n    && /opt/nvidia/driver.run -s --no-nvidia-modprobe --no-kernel-module --no-nouveau-check --no-distro-scripts --no-opengl-files --no-kernel-module-source \\\n    && rm -rf /opt/nvidia && apt-get purge -y module-init-tools && apt-get autoremove -y\n\nRUN apt-get update && \\\n    apt-get install -y --no-install-suggests --no-install-recommends \\\n        ca-certificates locales git python3 libpython3.5 python3-dev \\\n        libgomp1 libxml2 libxml2-dev zlib1g-dev \\\n        libsnappy1v5 libsnappy-dev libonig2 make gcc g++ curl openjdk-8-jre && \\\n    curl -f https://bootstrap.pypa.io/get-pip.py | python3 && \\\n    pip3 install --no-cache-dir PyStemmer bblfsh py4j==0.10.4 modelforge parquet jinja2 libMHCUDA datasketch cassandra_driver python-igraph numpy humanize pygments && \\\n    apt-get remove -y python3-dev libxml2-dev libsnappy-dev zlib1g-dev make gcc g++ curl && \\\n    apt-get remove -y *-doc *-man >/dev/null && \\\n    apt-get autoremove -y && \\\n    apt-get clean && \\\n    rm -rf /var/lib/apt/lists/* && \\\n    locale-gen en_US.UTF-8\n\n# sudo mount -o bind ... bundle/*\nADD bundle/spark /spark/\nADD bundle/engine/python /bundle/sourced/engine/\nADD bundle/ml /bundle/sourced/ml/\n\nADD apollo/ /packages/apollo/apollo/\nADD setup.py /packages/apollo\n\nENV PYTHONPATH /packages:/spark/python\nENV LANG en_US.UTF-8\nWORKDIR /packages\n\nRUN echo '0.5.2' > /bundle/sourced/engine/version.txt && pip3 install --no-cache-dir -e /bundle/sourced/engine/\nRUN pip3 install --no-cache-dir -e /bundle/sourced/ml/\nRUN pip3 install --no-cache-dir --no-deps -e apollo/ && apollo warmup -s 'local[*]'\n\nENTRYPOINT [\"apollo\"]\n"
}