{
  "startTime": 1674238468311,
  "endTime": 1674238468547,
  "originalSmells": [
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 61,
        "lineEnd": 61,
        "columnStart": 4,
        "columnEnd": 91
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM buildpack-deps:{{ cookiecutter.ubuntu_version }} AS deps\n\nARG PROJECT_NAME\nARG DJANGO_SECRET_KEY\nRUN if [ -z \"$PROJECT_NAME\" -o -z \"$DJANGO_SECRET_KEY\" ]; then \\\n    echo '\\033[1;31m\\n\\tRefusing to build project.\\n\\\n          \\n\\tPlease run `cp .env-PLATFORM .env` or similar first! \\\n          \\n\\tMake sure the `.env` file has the COMPOSE_PROJECT_NAME setting.\\n'; exit 1; fi\n\nRUN apt-get update \\\n && apt-get install -y --no-install-recommends \\\n                    python3-dev libgraphviz-dev \\\n                    wget ca-certificates \\\n && echo 'deb http://apt.postgresql.org/pub/repos/apt/ {{ cookiecutter.ubuntu_version }}-pgdg main {{ cookiecutter.postgresql_version }}' > /etc/apt/sources.list.d/pgdg.list \\\n && curl -fsSL11 'https://www.postgresql.org/media/keys/ACCC4CF8.asc' | apt-key add - \\\n && apt-get update \\\n && apt-get install -y --no-install-recommends --allow-downgrades \\\n                    'libpq-dev={{ cookiecutter.postgresql_version }}.*' 'libpq5={{ cookiecutter.postgresql_version }}.*' \\\n && rm -rf /var/lib/apt/lists/*\n\nRUN bash -o pipefail -c \"curl -fsSL 'https://bootstrap.pypa.io/get-pip.py' | \\\n    python3 - --disable-pip-version-check --no-cache-dir --upgrade pip=={{ cookiecutter.pip_version }}\"\n\nCOPY requirements.txt /\nRUN mkdir /wheels \\\n && pip wheel --no-cache --wheel-dir=/wheels -rrequirements.txt\n\n\n########################################################################################################################\nFROM ubuntu:{{ cookiecutter.ubuntu_version }}\n########################################################################################################################\n\nRUN apt-get update \\\n && apt-get install -y --no-install-recommends \\\n                    locales software-properties-common \\\n                    curl wget ca-certificates gpg-agent \\\n                    strace gdb lsof locate net-tools htop iputils-ping dnsutils \\\n                    python3-distutils \\\n                    python3-dbg libpython3-dbg \\\n                    nano vim tree less telnet socat \\\n                    graphviz \\\n && echo 'deb http://apt.postgresql.org/pub/repos/apt/ {{ cookiecutter.ubuntu_version }}-pgdg main {{ cookiecutter.postgresql_version }}' > /etc/apt/sources.list.d/pgdg.list \\\n && curl -fsSL 'https://www.postgresql.org/media/keys/ACCC4CF8.asc' | apt-key add - \\\n && apt-get update \\\n && apt-get install -y --no-install-recommends --allow-downgrades \\\n                    'libpq5={{ cookiecutter.postgresql_version }}.*' \\\n                    postgresql-client-{{ cookiecutter.postgresql_version }} \\\n && rm -rf /var/lib/apt/lists/*\n\nENV LANG en_US.UTF-8\nENV LANGUAGE en_US:en\nENV LC_ALL en_US.UTF-8\nRUN locale-gen en_US.UTF-8\n\nENV TERM=xterm\n\nRUN bash -o pipefail -c \"curl -fsSL 'https://bootstrap.pypa.io/get-pip.py' | \\\n    python3 - --disable-pip-version-check --no-cache-dir --upgrade pip=={{ cookiecutter.pip_version }}\"\n\nRUN mkdir /deps\nCOPY --from=deps /wheels/* /deps/\nRUN pip install --no-cache-dir --force-reinstall --ignore-installed --upgrade --no-index --no-deps /deps/* \\\n && mkdir /app /var/app\n\n# Create django user, will own the Django app\nRUN adduser --no-create-home --disabled-login --group --system app\nRUN chown -R app:app /app /var/app\n\nRUN echo /app/src > $(python3 -c 'from distutils.sysconfig import get_python_lib; print(get_python_lib())')/app.pth\n\nENV DJANGO_SETTINGS_MODULE=\"{{ cookiecutter.django_project_name }}.settings\"\nENV PYTHONUNBUFFERED=x\nARG DJANGO_SECRET_KEY\nENV DJANGO_SECRET_KEY=$DJANGO_SECRET_KEY\n"
}