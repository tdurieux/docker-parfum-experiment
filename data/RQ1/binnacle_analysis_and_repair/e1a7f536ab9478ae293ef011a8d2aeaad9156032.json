{
  "startTime": 1674252321801,
  "endTime": 1674252322138,
  "originalSmells": [
    {
      "rule": "curlUseHttpsUrl",
      "position": {
        "lineStart": 73,
        "lineEnd": 73,
        "columnStart": 4,
        "columnEnd": 83
      }
    },
    {
      "rule": "curlUseHttpsUrl",
      "position": {
        "lineStart": 74,
        "lineEnd": 74,
        "columnStart": 4,
        "columnEnd": 92
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 99,
        "lineEnd": 99,
        "columnStart": 4,
        "columnEnd": 23
      }
    },
    {
      "rule": "gpgUseBatchFlag",
      "position": {
        "lineStart": 86,
        "lineEnd": 86,
        "columnStart": 2,
        "columnEnd": 82
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# Use the standard Nginx image from Docker Hub\n#FROM nginx\n# based on the original stable alpine image\n# https://github.com/nginxinc/docker-nginx/blob/014e624239987a0a46bee5b44088a8c5150bf0bb/stable/alpine/Dockerfile\n\nFROM alpine:3.6\n\nENV NGINX_VERSION 1.12.1\nENV NGINX_STICKY_MODULE_NG_VERSION 08a395c66e42\nENV NGINX_UPSTREAM_DYNAMIC_SERVERS_VERSION master\n\nRUN GPG_KEYS=B0F4253373F8F6F510D42178520A9993A1C052F8 \\\n\t&& CONFIG=\"\\\n\t\t--prefix=/etc/nginx \\\n\t\t--sbin-path=/usr/sbin/nginx \\\n\t\t--modules-path=/usr/lib/nginx/modules \\\n\t\t--conf-path=/etc/nginx/nginx.conf \\\n\t\t--error-log-path=/var/log/nginx/error.log \\\n\t\t--http-log-path=/var/log/nginx/access.log \\\n\t\t--pid-path=/var/run/nginx.pid \\\n\t\t--lock-path=/var/run/nginx.lock \\\n\t\t--http-client-body-temp-path=/var/cache/nginx/client_temp \\\n\t\t--http-proxy-temp-path=/var/cache/nginx/proxy_temp \\\n\t\t--http-fastcgi-temp-path=/var/cache/nginx/fastcgi_temp \\\n\t\t--http-uwsgi-temp-path=/var/cache/nginx/uwsgi_temp \\\n\t\t--http-scgi-temp-path=/var/cache/nginx/scgi_temp \\\n\t\t--user=nginx \\\n\t\t--group=nginx \\\n\t\t--with-http_ssl_module \\\n\t\t--with-http_realip_module \\\n\t\t--with-http_addition_module \\\n\t\t--with-http_sub_module \\\n\t\t--with-http_dav_module \\\n\t\t--with-http_flv_module \\\n\t\t--with-http_mp4_module \\\n\t\t--with-http_gunzip_module \\\n\t\t--with-http_gzip_static_module \\\n\t\t--with-http_random_index_module \\\n\t\t--with-http_secure_link_module \\\n\t\t--with-http_stub_status_module \\\n\t\t--with-http_auth_request_module \\\n\t\t--with-http_xslt_module=dynamic \\\n\t\t--with-http_image_filter_module=dynamic \\\n\t\t--with-http_geoip_module=dynamic \\\n\t\t--with-http_perl_module=dynamic \\\n\t\t--with-threads \\\n\t\t--with-stream \\\n\t\t--with-stream_ssl_module \\\n\t\t--with-http_slice_module \\\n\t\t--with-mail \\\n\t\t--with-mail_ssl_module \\\n\t\t--with-file-aio \\\n\t\t--with-http_v2_module \\\n\t\t--with-ipv6 \\\n\t\t--add-module=/usr/src/nginx-goodies-nginx-sticky-module-ng-$NGINX_STICKY_MODULE_NG_VERSION \\\n\t\t--add-module=/usr/src/nginx-upstream-dynamic-servers-$NGINX_UPSTREAM_DYNAMIC_SERVERS_VERSION \\\n\t\" \\\n\t&& addgroup -S nginx \\\n\t&& adduser -D -S -h /var/cache/nginx -s /sbin/nologin -G nginx nginx \\\n\t&& apk add --no-cache --virtual .build-deps \\\n\t\tgcc \\\n\t\tlibc-dev \\\n\t\tmake \\\n\t\topenssl-dev \\\n\t\tpcre-dev \\\n\t\tzlib-dev \\\n\t\tlinux-headers \\\n\t\tcurl \\\n\t\tgnupg \\\n\t\tlibxslt-dev \\\n\t\tgd-dev \\\n\t\tgeoip-dev \\\n\t\tperl-dev \\\n\t&& curl -fSL https://nginx.org/download/nginx-$NGINX_VERSION.tar.gz -o nginx.tar.gz \\\n\t&& curl -fSL https://nginx.org/download/nginx-$NGINX_VERSION.tar.gz.asc -o nginx.tar.gz.asc \\\n\t&& curl -fSL https://bitbucket.org/nginx-goodies/nginx-sticky-module-ng/get/$NGINX_STICKY_MODULE_NG_VERSION.tar.gz -o nginx-sticky-module-ng.tar.gz \\\n\t&& curl -fSL https://github.com/GUI/nginx-upstream-dynamic-servers/archive/$NGINX_UPSTREAM_DYNAMIC_SERVERS_VERSION.tar.gz -o nginx-upstream-dynamic-servers.tar.gz \\\n\t&& export GNUPGHOME=\"$(mktemp -d)\" \\\n\t&& found=''; \\\n\tfor server in \\\n\t\tha.pool.sks-keyservers.net \\\n\t\thkp://keyserver.ubuntu.com:80 \\\n\t\thkp://p80.pool.sks-keyservers.net:80 \\\n\t\tpgp.mit.edu; \\\n\tdo \\\n\t\techo \"Fetching GPG key $GPG_KEYS from $server\"; \\\n\t\tgpg --batch --keyserver \"$server\" --keyserver-options timeout=10 --recv-keys \"$GPG_KEYS\" && found=yes && break; \\\n\tdone; \\\n\ttest -z \"$found\" && echo >&2 \"error: failed to fetch GPG key $GPG_KEYS\" && exit 1; \\\n\tgpg --batch --verify nginx.tar.gz.asc nginx.tar.gz \\\n\t&& rm -r \"$GNUPGHOME\" nginx.tar.gz.asc \\\n\t&& mkdir -p /usr/src \\\n\t&& tar -zxC /usr/src -f nginx.tar.gz \\\n\t&& tar -zxC /usr/src -f nginx-sticky-module-ng.tar.gz \\\n\t&& tar -zxC /usr/src -f nginx-upstream-dynamic-servers.tar.gz \\\n\t&& rm nginx.tar.gz \\\n\t&& rm nginx-sticky-module-ng.tar.gz \\\n\t&& rm nginx-upstream-dynamic-servers.tar.gz \\\n\t&& cd /usr/src/nginx-$NGINX_VERSION \\\n\t&& ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" $CONFIG \\\n\t&& make -j$(getconf _NPROCESSORS_ONLN) \\\n\t&& make install \\\n\t&& rm -rf /etc/nginx/html/ \\\n\t&& mkdir /etc/nginx/conf.d/ \\\n\t&& mkdir -p /usr/share/nginx/html/ \\\n\t&& install -m644 html/index.html /usr/share/nginx/html/ \\\n\t&& install -m644 html/50x.html /usr/share/nginx/html/ \\\n\t&& ln -s ../../usr/lib/nginx/modules /etc/nginx/modules \\\n\t&& strip /usr/sbin/nginx* \\\n\t&& strip /usr/lib/nginx/modules/*.so \\\n\t&& rm -rf /usr/src/nginx-$NGINX_VERSION \\\n\t&& rm -rf /usr/src/nginx-goodies-nginx-sticky-module-ng-$NGINX_STICKY_MODULE_NG_VERSION \\\n\t&& rm -rf /usr/src/nginx-upstream-dynamic-servers-$NGINX_UPSTREAM_DYNAMIC_SERVERS_VERSION \\\n\n\t# Bring in gettext so we can get `envsubst`, then throw\n\t# the rest away. To do this, we need to install `gettext`\n\t# then move `envsubst` out of the way so `gettext` can\n\t# be deleted completely, then move `envsubst` back.\n\t&& apk add --no-cache --virtual .gettext gettext \\\n\t&& mv /usr/bin/envsubst /tmp/ \\\n\n\t&& runDeps=\"$( \\\n\t\tscanelf --needed --nobanner /usr/sbin/nginx /usr/lib/nginx/modules/*.so /tmp/envsubst \\\n\t\t\t| awk '{ gsub(/,/, \"\\nso:\", $2); print \"so:\" $2 }' \\\n\t\t\t| sort -u \\\n\t\t\t| xargs -r apk info --installed \\\n\t\t\t| sort -u \\\n\t)\" \\\n\t&& apk add --no-cache --virtual .nginx-rundeps $runDeps \\\n\t&& apk del .build-deps \\\n\t&& apk del .gettext \\\n\t&& mv /tmp/envsubst /usr/local/bin/ \\\n\n\t# forward request and error logs to docker log collector\n\t&& ln -sf /dev/stdout /var/log/nginx/access.log \\\n\t&& ln -sf /dev/stderr /var/log/nginx/error.log\n\n# Copy the configuration file from the current directory and paste\n# it inside the container to use it as Nginx's default config.\nCOPY nginx.conf /etc/nginx/nginx.conf\n\n# Port 8080 of the container will be exposed and then mapped to port\n# 8080 of our host machine via Compose. This way we'll be able to\n# access the server via localhost:8080 on our host.\nEXPOSE 80 443\n\n# Start Nginx when the container has provisioned.\nCMD [\"nginx\", \"-g\", \"daemon off;\"]\n"
}