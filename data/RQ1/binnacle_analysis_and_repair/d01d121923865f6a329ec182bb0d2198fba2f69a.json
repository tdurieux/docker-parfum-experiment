{
  "startTime": 1674239997566,
  "endTime": 1674239997755,
  "originalSmells": [
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 28,
        "lineEnd": 28,
        "columnStart": 74,
        "columnEnd": 136
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 29,
        "lineEnd": 29,
        "columnStart": 73,
        "columnEnd": 128
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 30,
        "lineEnd": 30,
        "columnStart": 73,
        "columnEnd": 128
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 31,
        "lineEnd": 31,
        "columnStart": 73,
        "columnEnd": 128
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 16,
        "lineEnd": 16,
        "columnStart": 25,
        "columnEnd": 36
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 4,
        "lineEnd": 9,
        "columnStart": 22,
        "columnEnd": 40
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "ARG CUDA_VERSION=9.2\nFROM nvidia/cuda:$CUDA_VERSION-cudnn7-devel-ubuntu16.04\nLABEL maintainer \"Matt Johnson <mattjj@google.com>\"\n\nRUN apt-get update && apt-get install -y --no-install-recommends \\\n            dh-autoreconf git curl \\\n            build-essential libssl-dev zlib1g-dev libbz2-dev libreadline-dev \\\n            libsqlite3-dev wget llvm libncurses5-dev xz-utils tk-dev \\\n            libxml2-dev libxmlsec1-dev libffi-dev openjdk-8-jdk curl \\\n            bash-completion unzip python && rm -rf /var/lib/apt/lists/*;\n\nRUN wget \"https://github.com/bazelbuild/bazel/releases/download/0.24.0/bazel_0.24.0-linux-x86_64.deb\" && \\\n    dpkg -i bazel_0.24.0-linux-x86_64.deb\n\nRUN git clone https://github.com/nixos/patchelf /tmp/patchelf\nWORKDIR /tmp/patchelf\nRUN bash bootstrap.sh && ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" && make && make install && rm -r /tmp/patchelf\n\n\nWORKDIR /\nRUN git clone https://github.com/pyenv/pyenv.git /pyenv\nENV PYENV_ROOT /pyenv\nRUN /pyenv/bin/pyenv install 2.7.15\nRUN /pyenv/bin/pyenv install 3.5.6\nRUN /pyenv/bin/pyenv install 3.6.8\nRUN /pyenv/bin/pyenv install 3.7.2\n\n# We pin numpy to a version < 1.16 to avoid version compatibility issues.\nRUN eval \"$(/pyenv/bin/pyenv init -)\" && /pyenv/bin/pyenv local 2.7.15 && pip install --no-cache-dir numpy==1.15.4 scipy cython setuptools wheel future\nRUN eval \"$(/pyenv/bin/pyenv init -)\" && /pyenv/bin/pyenv local 3.5.6 && pip install --no-cache-dir numpy==1.15.4 scipy cython setuptools wheel\nRUN eval \"$(/pyenv/bin/pyenv init -)\" && /pyenv/bin/pyenv local 3.6.8 && pip install --no-cache-dir numpy==1.15.4 scipy cython setuptools wheel\nRUN eval \"$(/pyenv/bin/pyenv init -)\" && /pyenv/bin/pyenv local 3.7.2 && pip install --no-cache-dir numpy==1.15.4 scipy cython setuptools wheel\n\n\nWORKDIR /\nCOPY build_wheel_docker_entrypoint.sh /build_wheel_docker_entrypoint.sh\nRUN chmod +x /build_wheel_docker_entrypoint.sh\n\nWORKDIR /build\nENV TEST_TMPDIR /build\nENTRYPOINT [\"/build_wheel_docker_entrypoint.sh\"]\n"
}