{
  "startTime": 1674252962939,
  "endTime": 1674252963454,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 34,
        "lineEnd": 34,
        "columnStart": 4,
        "columnEnd": 61
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 39,
        "lineEnd": 39,
        "columnStart": 4,
        "columnEnd": 91
      }
    },
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 102,
        "lineEnd": 102,
        "columnStart": 4,
        "columnEnd": 15
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 99,
        "lineEnd": 99,
        "columnStart": 4,
        "columnEnd": 65
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 135,
        "lineEnd": 135,
        "columnStart": 4,
        "columnEnd": 26
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 40,
        "lineEnd": 40,
        "columnStart": 4,
        "columnEnd": 22
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 16,
        "lineEnd": 16,
        "columnStart": 4,
        "columnEnd": 38
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 31,
        "lineEnd": 31,
        "columnStart": 4,
        "columnEnd": 27
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 49,
        "lineEnd": 49,
        "columnStart": 4,
        "columnEnd": 29
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 77,
        "lineEnd": 89,
        "columnStart": 4,
        "columnEnd": 14
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 124,
        "lineEnd": 129,
        "columnStart": 4,
        "columnEnd": 7
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 170,
        "lineEnd": 177,
        "columnStart": 4,
        "columnEnd": 10
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 31,
        "lineEnd": 31,
        "columnStart": 4,
        "columnEnd": 27
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# EDX-PLATFORM multi-stage docker build\n\n# Change release to build, by providing the EDXAPP_RELEASE build argument to\n# your build command:\n#\n# $ docker build \\\n#     --build-arg EDXAPP_RELEASE=\"open-release/hawthorn.1\" \\\n#     -t edxapp:hawthorn.1 \\\n#     .\nARG EDXAPP_RELEASE=release-2018-08-29-14.14\n\n# === BASE ===\nFROM ubuntu:16.04 as base\n\n# Configure locales\nRUN apt-get update && \\\n    apt-get install --no-install-recommends -y gettext locales && \\\n    rm -rf /var/lib/apt/lists/*\nRUN sed -i -e 's/# en_US.UTF-8 UTF-8/en_US.UTF-8 UTF-8/' /etc/locale.gen && \\\n    locale-gen\nENV LANG en_US.UTF-8\nENV LANGUAGE en_US:en\nENV LC_ALL en_US.UTF-8\n\n# === DOWNLOAD ===\nFROM base as downloads\n\nWORKDIR /downloads\n\n# Install curl\nRUN apt-get update && \\\n    apt-get install --no-install-recommends -y curl && rm -rf /var/lib/apt/lists/*;\n\n# Download pip installer\nRUN curl -f -sLo get-pip.py https://bootstrap.pypa.io/get-pip.py\n\n# Download edxapp release\n# Get default EDXAPP_RELEASE value (defined on top)\nARG EDXAPP_RELEASE\nRUN curl -f -sLo edxapp.tgz https://github.com/edx/edx-platform/archive/$EDXAPP_RELEASE.tar.gz && \\\n    tar xzf edxapp.tgz && rm edxapp.tgz\n\n\n# === EDXAPP ===\nFROM base as edxapp\n\n# Install base system dependencies\nRUN apt-get update && \\\n    apt-get upgrade -y && \\\n    apt-get install --no-install-recommends -y python && \\\n    rm -rf /var/lib/apt/lists/*\n\nWORKDIR /edx/app/edxapp/edx-platform\n\n# Get default EDXAPP_RELEASE value (defined on top)\nARG EDXAPP_RELEASE\nCOPY --from=downloads /downloads/edx-platform-* .\n\n# We copy default configuration files to \"/config\" and we point to them via\n# symlinks. That allows to easily override default configurations by mounting a\n# docker volume.\nCOPY ./config /config\nRUN ln -sf /config/lms /edx/app/edxapp/edx-platform/lms/envs/fun && \\\n    ln -sf /config/cms /edx/app/edxapp/edx-platform/cms/envs/fun\n\n# Add node_modules/.bin to the PATH so that paver-related commands can execute\n# node scripts\nENV PATH=\"/edx/app/edxapp/edx-platform/node_modules/.bin:${PATH}\"\n\n# === BUILDER ===\nFROM edxapp as builder\n\nWORKDIR /builder\n\n# Install builder system dependencies\nRUN apt-get update && \\\n    apt-get upgrade -y && \\\n    apt-get install --no-install-recommends -y \\\n    build-essential \\\n    gettext \\\n    git \\\n    graphviz-dev \\\n    libgeos-dev \\\n    libmysqlclient-dev \\\n    libxml2-dev \\\n    libxmlsec1-dev \\\n    nodejs \\\n    nodejs-legacy \\\n    npm \\\n    python-dev && \\\n    rm -rf /var/lib/apt/lists/*\n\n# Install the latest pip release\nCOPY --from=downloads /downloads/get-pip.py ./get-pip.py\nRUN python get-pip.py\n\nWORKDIR /edx/app/edxapp/edx-platform\n\n# Install python dependencies\nRUN pip install --no-cache-dir --src /usr/local/src -r requirements/edx/base.txt\n\n# Install Javascript requirements\nRUN npm install && npm cache clean --force;\n\n# Update assets skipping collectstatic (it should be done during deployment)\nRUN NO_PREREQ_INSTALL=1 \\\n    paver update_assets --settings=fun.docker_build_production --skip-collect\n\n# FIXME: we also copy /edx/app/edxapp/staticfiles/webpack-stats.json and\n# /edx/app/edxapp/staticfiles/studio/webpack-stats.json files in a path that\n# will be collected\nRUN cp -R /edx/app/edxapp/staticfiles/* /edx/app/edxapp/edx-platform/common/static/\n\n\n# === DEVELOPMENT ===\nFROM builder as development\n\nARG UID=1000\nARG GID=1000\nARG EDXAPP_RELEASE\n\n# Install system dependencies\nRUN apt-get update && \\\n    apt-get upgrade -y && \\\n    apt-get install --no-install-recommends -y \\\n    dnsutils \\\n    iputils-ping \\\n    libsqlite3-dev \\\n    mongodb \\\n    vim && \\\n    rm -rf /var/lib/apt/lists/*\n\n# To prevent permission issues related to the non-priviledged user running in\n# development, we will install development dependencies in a python virtual\n# environment belonging to that user\nRUN pip install --no-cache-dir virtualenv\n\n# Create the virtualenv directory where we will install python development\n# dependencies\nRUN mkdir -p /edx/app/edxapp/venv && \\\n    chown -R ${UID}:${GID} /edx/app/edxapp/venv\n\n# Change edxapp directory owner to allow the development image docker user to\n# perform installations from edxapp sources (yeah, I know...)\nRUN chown -R ${UID}:${GID} /edx/app/edxapp\n\n# Copy the entrypoint that will activate the virtualenv\nCOPY ./docker/files/usr/local/bin/entrypoint.sh /usr/local/bin/entrypoint.sh\n\n# Switch to an un-privileged user matching the host user to prevent permission\n# issues with volumes (host folders)\nUSER ${UID}:${GID}\n\n# Create the virtualenv with a non-priviledged user\nRUN virtualenv -p python2.7 --system-site-packages /edx/app/edxapp/venv\n\n# Install development dependencies in a virtualenv\nRUN bash -c \"source /edx/app/edxapp/venv/bin/activate && \\\n    pip install --no-cache-dir -r requirements/edx/testing.txt && \\\n    pip install --no-cache-dir -r requirements/edx/development.txt\"\n\nENTRYPOINT [ \"/usr/local/bin/entrypoint.sh\" ]\n\n\n# === PRODUCTION ===\nFROM edxapp as production\n\n# Install runner system dependencies\nRUN apt-get update && \\\n    apt-get upgrade -y && \\\n    apt-get install --no-install-recommends -y \\\n    libgeos-dev \\\n    libmysqlclient20 \\\n    libxml2 \\\n    libxmlsec1-dev \\\n    nodejs \\\n    nodejs-legacy \\\n    tzdata && \\\n    rm -rf /var/lib/apt/lists/*\n\n# Copy installed dependencies\nCOPY --from=builder /usr/local /usr/local\n\n# Copy modified sources (sic!)\nCOPY --from=builder /edx/app/edxapp/edx-platform  /edx/app/edxapp/edx-platform\n\n# Set container timezone and related timezones database and DST rules\n# See https://serverfault.com/a/856593\nENV TZ 'Etc/UTC'\nRUN echo $TZ > /etc/timezone && \\\n    rm /etc/localtime && \\\n    ln -snf /usr/share/zoneinfo/$TZ /etc/localtime && \\\n    dpkg-reconfigure -f noninteractive tzdata\n\n# Now that dependencies are installed and configuration has been set, the above\n# statements will run with a un-privileged user.\nUSER 10000\n\n# To start the CMS, inject the SERVICE_VARIANT=cms environment variable\n# (defaults to \"lms\")\nENV SERVICE_VARIANT=lms\n\n# Use Gunicorn in production as web server\nCMD DJANGO_SETTINGS_MODULE=${SERVICE_VARIANT}.envs.fun.docker_run \\\n    gunicorn --name=${SERVICE_VARIANT} --bind=0.0.0.0:8000 --max-requests=1000 ${SERVICE_VARIANT}.wsgi:application\n"
}