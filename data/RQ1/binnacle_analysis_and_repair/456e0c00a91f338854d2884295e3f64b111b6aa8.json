{
  "startTime": 1674235645145,
  "endTime": 1674235645332,
  "originalSmells": [
    {
      "rule": "gpgUseBatchFlag",
      "position": {
        "lineStart": 45,
        "lineEnd": 45,
        "columnStart": 8,
        "columnEnd": 86
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM ubuntu:xenial\n\nLABEL maintainer=\"Jacob Alberty <jacob.alberty@foundigital.com>\"\n\nARG DEBIAN_FRONTEND=noninteractive\n\nENV PKGURL=https://dl.ubnt.com/unifi/5.10.25/unifi_sysvinit_all.deb\n\nENV BASEDIR=/usr/lib/unifi \\\n    DATADIR=/unifi/data \\\n    LOGDIR=/unifi/log \\\n    CERTDIR=/unifi/cert \\\n    RUNDIR=/var/run/unifi \\\n    ODATADIR=/var/lib/unifi \\\n    OLOGDIR=/var/log/unifi \\\n    CERTNAME=cert.pem \\\n    CERT_PRIVATE_NAME=privkey.pem \\\n    CERT_IS_CHAIN=false \\\n    GOSU_VERSION=1.10 \\\n    BIND_PRIV=true \\\n    RUNAS_UID0=true \\\n    UNIFI_GID=999 \\\n    UNIFI_UID=999\n\n# Install gosu\n# https://github.com/tianon/gosu/blob/master/INSTALL.md\n# This should be integrated with the main run because it duplicates a lot of the steps there\n# but for now while shoehorning gosu in it is seperate\nRUN set -ex \\\n    && fetchDeps=' \\\n        ca-certificates \\\n        wget \\\n    ' \\\n    && apt-get update \\\n    && apt-get install -y --no-install-recommends $fetchDeps \\\n    && dpkgArch=\"$(dpkg --print-architecture | awk -F- '{ print $NF }')\" \\\n    && wget -O /usr/local/bin/gosu \"https://github.com/tianon/gosu/releases/download/$GOSU_VERSION/gosu-$dpkgArch\" \\\n    && wget -O /usr/local/bin/gosu.asc \"https://github.com/tianon/gosu/releases/download/$GOSU_VERSION/gosu-$dpkgArch.asc\" \\\n# verify the signature\n    && export GNUPGHOME=\"$(mktemp -d)\" \\\n    && for server in $(shuf -e ha.pool.sks-keyservers.net \\\n                            hkp://p80.pool.sks-keyservers.net:80 \\\n                            keyserver.ubuntu.com \\\n                            hkp://keyserver.ubuntu.com:80 \\\n                            pool.sks-keyservers.net); do \\\n        gpg --batch --keyserver \"$server\" --recv-keys B42F6819007F00F88E364FD4036A9C25BF357DD4 && break || :; \\\n    done \\\n    && gpg --batch --verify /usr/local/bin/gosu.asc /usr/local/bin/gosu \\\n    && rm -rf \"$GNUPGHOME\" /usr/local/bin/gosu.asc \\\n    && chmod +x /usr/local/bin/gosu \\\n# verify that the binary works\n    && gosu nobody true \\\n    && apt-get purge -y --auto-remove $fetchDeps \\\n    && rm -rf /var/lib/apt/lists/*\n\nRUN mkdir -p /usr/unifi \\\n     /usr/local/unifi/init.d \\\n     /usr/unifi/init.d\nCOPY docker-entrypoint.sh /usr/local/bin/\nCOPY docker-healthcheck.sh /usr/local/bin/\nCOPY docker-build.sh /usr/local/bin/\nCOPY functions /usr/unifi/functions\nCOPY import_cert /usr/unifi/init.d/\nRUN chmod +x /usr/local/bin/docker-entrypoint.sh \\\n && chmod +x /usr/unifi/init.d/import_cert \\\n && chmod +x /usr/local/bin/docker-healthcheck.sh \\\n && chmod +x /usr/local/bin/docker-build.sh\n\n# Push installing openjdk-8-jre first, so that the unifi package doesn't pull in openjdk-7-jre as a dependency? Else uncomment and just go with openjdk-7.\nRUN set -ex \\\n && mkdir -p /usr/share/man/man1/ \\\n && groupadd -r unifi -g $UNIFI_GID \\\n && useradd --no-log-init -r -u $UNIFI_UID -g $UNIFI_GID unifi \\\n && /usr/local/bin/docker-build.sh \"${PKGURL}\"\n\nVOLUME [\"/unifi\", \"${RUNDIR}\"]\n\nEXPOSE 6789/tcp 8080/tcp 8443/tcp 8880/tcp 8843/tcp 3478/udp\n\nWORKDIR /unifi\n\nHEALTHCHECK CMD /usr/local/bin/docker-healthcheck.sh || exit 1\n\n# execute controller using JSVC like original debian package does\nENTRYPOINT [\"/usr/local/bin/docker-entrypoint.sh\"]\n\nCMD [\"unifi\"]\n\n# execute the conroller directly without using the service\n#ENTRYPOINT [\"/usr/bin/java\", \"-Xmx${JVM_MAX_HEAP_SIZE}\", \"-jar\", \"/usr/lib/unifi/lib/ace.jar\"]\n  # See issue #12 on github: probably want to consider how JSVC handled creating multiple processes, issuing the -stop instraction, etc. Not sure if the above ace.jar class gracefully handles TERM signals.\n#CMD [\"start\"]\n"
}