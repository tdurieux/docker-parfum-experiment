{
  "startTime": 1674236854061,
  "endTime": 1674236856321,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 73,
        "lineEnd": 73,
        "columnStart": 7,
        "columnEnd": 152
      }
    },
    {
      "rule": "wgetUseHttpsUrl",
      "position": {
        "lineStart": 158,
        "lineEnd": 158,
        "columnStart": 7,
        "columnEnd": 143
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 178,
        "lineEnd": 178,
        "columnStart": 7,
        "columnEnd": 27
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 179,
        "lineEnd": 179,
        "columnStart": 7,
        "columnEnd": 23
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 180,
        "lineEnd": 180,
        "columnStart": 7,
        "columnEnd": 28
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 181,
        "lineEnd": 181,
        "columnStart": 7,
        "columnEnd": 25
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 105,
        "lineEnd": 107,
        "columnStart": 4,
        "columnEnd": 23
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 186,
        "lineEnd": 186,
        "columnStart": 44,
        "columnEnd": 69
      }
    },
    {
      "rule": "sha256sumEchoOneSpaces",
      "position": {
        "lineStart": 63,
        "lineEnd": 63,
        "columnStart": 7,
        "columnEnd": 59
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 159,
        "lineEnd": 159,
        "columnStart": 7,
        "columnEnd": 77
      }
    },
    {
      "rule": "gpgUseBatchFlag",
      "position": {
        "lineStart": 95,
        "lineEnd": 95,
        "columnStart": 5,
        "columnEnd": 80
      }
    },
    {
      "rule": "gpgUseBatchFlag",
      "position": {
        "lineStart": 96,
        "lineEnd": 96,
        "columnStart": 11,
        "columnEnd": 61
      }
    },
    {
      "rule": "gpgUseBatchFlag",
      "position": {
        "lineStart": 97,
        "lineEnd": 97,
        "columnStart": 11,
        "columnEnd": 70
      }
    },
    {
      "rule": "gpgUseHaPools",
      "position": {
        "lineStart": 95,
        "lineEnd": 95,
        "columnStart": 5,
        "columnEnd": 80
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 149,
        "lineEnd": 149,
        "columnStart": 7,
        "columnEnd": 80
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 152,
        "lineEnd": 152,
        "columnStart": 7,
        "columnEnd": 64
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 153,
        "lineEnd": 153,
        "columnStart": 7,
        "columnEnd": 64
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 26,
        "lineEnd": 26,
        "columnStart": 7,
        "columnEnd": 76
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 29,
        "lineEnd": 29,
        "columnStart": 7,
        "columnEnd": 53
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# Copyright 2018 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n# Licensed under the Apache License, Version 2.0 (the \"License\").\n# You may not use this file except in compliance with the License.\n# A copy of the License is located at\n#     http://www.apache.org/licenses/LICENSE-2.0\n# or in the \"license\" file accompanying this file. This file is distributed\n# on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n# express or implied. See the License for the specific language governing\n# permissions and limitations under the License.\n#\n\nFROM ubuntu:14.04.5\n\nENV LANG=\"C.UTF-8\"\n\nENV DOCKER_BUCKET=\"download.docker.com\" \\\n    DOCKER_VERSION=\"17.09.0-ce\" \\\n    DOCKER_CHANNEL=\"stable\" \\\n    DOCKER_SHA256=\"a9e90a73c3cdfbf238f148e1ec0eaff5eb181f92f35bdd938fd7dab18e1c4647\" \\\n    DIND_COMMIT=\"3b5fac462d21ca164b3778647420016315289034\" \\\n    DOCKER_COMPOSE_VERSION=\"1.16.1\" \\\n    GITVERSION_VERSION=\"3.6.5\"\n\n# Install git\nRUN set -ex \\\n    && apt-get update \\\n    && apt-get install software-properties-common -y --no-install-recommends\\\n    && apt-add-repository ppa:git-core/ppa \\\n    && apt-get update \\\n    && apt-get install git -y --no-install-recommends \\\n    && git version && rm -rf /var/lib/apt/lists/*;\n\nRUN set -ex \\\n    && echo 'Acquire::CompressionTypes::Order:: \"gz\";' > /etc/apt/apt.conf.d/99use-gzip-compression \\\n    && apt-get update \\\n    && apt-get install -y --no-install-recommends wget=1.15-* fakeroot=1.20-* ca-certificates \\\n        autoconf=2.69-* automake=1:1.14.* less=458-* groff=1.22.* \\\n        bzip2=1.0.* file=1:5.14-* g++=4:4.8.* gcc=4:4.8.* imagemagick=8:6.7.* \\\n        libbz2-dev=1.0.* libc6-dev=2.19-* libcurl4-openssl-dev=7.35.* curl=7.35.* \\\n        libdb-dev=1:5.3.* libevent-dev=2.0.* libffi-dev=3.1~* \\\n        libgeoip-dev=1.6.* libglib2.0-dev=2.40.* libjpeg-dev=8c-* \\\n        libkrb5-dev=1.12+* liblzma-dev=5.1.* libmagickcore-dev=8:6.7.* \\\n        libmagickwand-dev=8:6.7.* libmysqlclient-dev=5.5.* libncurses5-dev=5.9+* \\\n        libpng12-dev=1.2.* libpq-dev=9.3.* libreadline-dev=6.3-* libsqlite3-dev=3.8.* \\\n        libssl-dev=1.0.* libtool=2.4.* libwebp-dev=0.4.* libxml2-dev=2.9.* \\\n        libxslt1-dev=1.1.* libyaml-dev=0.1.* make=3.81-* patch=2.7.* xz-utils=5.1.* \\\n        zlib1g-dev=1:1.2.* tcl=8.6.* tk=8.6.* \\\n        e2fsprogs=1.42.* iptables=1.4.* xfsprogs=3.1.* xz-utils=5.1.* \\\n        mono-mcs=3.2.* libcurl4-openssl-dev=7.35.* liberror-perl=0.17-* unzip=6.0-*\\\n    && rm -rf /var/lib/apt/lists/* \\\n    && apt-get clean\n\n# Download and set up GitVersion\nRUN set -ex \\\n    && wget \"https://github.com/GitTools/GitVersion/releases/download/v${GITVERSION_VERSION}/GitVersion_${GITVERSION_VERSION}.zip\" -O /tmp/GitVersion_${GITVERSION_VERSION}.zip \\\n    && mkdir -p /usr/local/GitVersion_${GITVERSION_VERSION} \\\n    && unzip /tmp/GitVersion_${GITVERSION_VERSION}.zip -d /usr/local/GitVersion_${GITVERSION_VERSION} \\\n    && rm /tmp/GitVersion_${GITVERSION_VERSION}.zip \\\n    && echo \"mono /usr/local/GitVersion_${GITVERSION_VERSION}/GitVersion.exe /output json /showvariable \\$1\" >> /usr/local/bin/gitversion \\\n    && chmod +x /usr/local/bin/gitversion\n# Install Docker\nRUN set -ex \\\n    && curl -fSL \"https://${DOCKER_BUCKET}/linux/static/${DOCKER_CHANNEL}/x86_64/docker-${DOCKER_VERSION}.tgz\" -o docker.tgz \\\n    && echo \"${DOCKER_SHA256}  *docker.tgz\" | sha256sum -c - \\\n    && tar --extract --file docker.tgz --strip-components 1  --directory /usr/local/bin/ \\\n    && rm docker.tgz \\\n    && docker -v \\\n# set up subuid/subgid so that \"--userns-remap=default\" works out-of-the-box\n    && addgroup dockremap \\\n    && useradd -g dockremap dockremap \\\n    && echo 'dockremap:165536:65536' >> /etc/subuid \\\n    && echo 'dockremap:165536:65536' >> /etc/subgid \\\n    && wget \"https://raw.githubusercontent.com/docker/docker/${DIND_COMMIT}/hack/dind\" -O /usr/local/bin/dind \\\n    && curl -f -L https://github.com/docker/compose/releases/download/${DOCKER_COMPOSE_VERSION}/docker-compose-Linux-x86_64 > /usr/local/bin/docker-compose \\\n    && chmod +x /usr/local/bin/dind /usr/local/bin/docker-compose \\\n# Ensure docker-compose works\n    && docker-compose version\n\nVOLUME /var/lib/docker\n\nCOPY dockerd-entrypoint.sh /usr/local/bin/\n\nENV PATH=\"/usr/local/bin:$PATH\" \\\n    GPG_KEY=\"C01E1CAD5EA2C4F0B8E3571504C367C218ADD4FF\" \\\n    PYTHON_VERSION=\"2.7.12\" \\\n    PYTHON_PIP_VERSION=\"8.1.2\"\n\nRUN set -ex \\\n    && apt-get update \\\n    && apt-get install -y --no-install-recommends tcl-dev tk-dev \\\n    && rm -rf /var/lib/apt/lists/* \\\n\t\\\n\t&& wget -O python.tar.xz \"https://www.python.org/ftp/python/${PYTHON_VERSION%%[a-z]*}/Python-$PYTHON_VERSION.tar.xz\" \\\n\t&& wget -O python.tar.xz.asc \"https://www.python.org/ftp/python/${PYTHON_VERSION%%[a-z]*}/Python-$PYTHON_VERSION.tar.xz.asc\" \\\n\t&& export GNUPGHOME=\"$(mktemp -d)\" \\\n\t&& ( gpg --batch --keyserver hkp://p80.ha.pool.sks-keyservers.net:80 --recv-keys \"$GPG_KEY\" \\\n        || gpg --batch --keyserver pgp.mit.edu --recv-keys \"$GPG_KEY\" \\\n        || gpg --batch --keyserver keyserver.ubuntu.com --recv-keys \"$GPG_KEY\") \\\n\t&& gpg --batch --verify python.tar.xz.asc python.tar.xz \\\n\t&& rm -r \"$GNUPGHOME\" python.tar.xz.asc \\\n\t&& mkdir -p /usr/src/python \\\n\t&& tar -xJC /usr/src/python --strip-components=1 -f python.tar.xz \\\n\t&& rm python.tar.xz \\\n\n\t&& cd /usr/src/python \\\n\t&& ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" \\\n\t\t--enable-shared \\\n\t\t--enable-unicode=ucs4 \\\n\t&& make -j$(nproc) \\\n\t&& make install \\\n\t&& ldconfig \\\n\n\t\t&& wget -O /tmp/get-pip.py 'https://bootstrap.pypa.io/get-pip.py' \\\n\t\t&& python2 /tmp/get-pip.py \"pip==$PYTHON_PIP_VERSION\" \\\n\t\t&& rm /tmp/get-pip.py \\\n# we use \"--force-reinstall\" for the case where the version of pip we're trying to install is the same as the version bundled with Python\n# (\"Requirement already up-to-date: pip==8.1.2 in /usr/local/lib/python3.6/site-packages\")\n# https://github.com/docker-library/python/pull/143#issuecomment-241032683\n\t&& pip install --no-cache-dir --upgrade --force-reinstall \"pip==$PYTHON_PIP_VERSION\" \\\n        && pip install awscli==1.* --no-cache-dir \\\n# then we use \"pip list\" to ensure we don't have more than one pip version installed\n# https://github.com/docker-library/python/pull/100\n\t&& [ \"$(pip list |tac|tac| awk -F '[ ()]+' '$1 == \"pip\" { print $2; exit }')\" = \"$PYTHON_PIP_VERSION\" ] \\\n\n\t&& find /usr/local -depth \\\n\t\t\\( \\\n\t\t\t\\( -type d -a -name test -o -name tests \\) \\\n\t\t\t-o \\\n\t\t\t\\( -type f -a -name '*.pyc' -o -name '*.pyo' \\) \\\n\t\t\\) -exec rm -rf '{}' + \\\n\t&& apt-get purge -y --auto-remove tcl-dev tk-dev \\\n    && rm -rf /usr/src/python ~/.cache\n\nENV JAVA_VERSION=8 \\\n    JAVA_HOME=\"/usr/lib/jvm/java-8-openjdk-amd64\" \\\n    JDK_VERSION=\"8u171-b11-2~14.04\" \\\n    JDK_HOME=\"/usr/lib/jvm/java-8-openjdk-amd64\" \\\n    JRE_HOME=\"/usr/lib/jvm/java-8-openjdk-amd64/jre\" \\\n    ANT_VERSION=1.9.6 \\\n    MAVEN_VERSION=3.3.3 \\\n    MAVEN_HOME=\"/usr/share/maven\" \\\n    MAVEN_CONFIG=\"/root/.m2\" \\\n    GRADLE_VERSION=2.7 \\\n    PROPERTIES_COMMON_VERSIION=0.92.37.8 \\\n    PYTHON_TOOL_VERSION=\"3.3-*\"\n\n# Install Java\nRUN set -ex \\\n    && apt-get update \\\n    && apt-get install --no-install-recommends -y software-properties-common=$PROPERTIES_COMMON_VERSIION \\\n    && add-apt-repository ppa:openjdk-r/ppa \\\n    && apt-get update \\\n    && apt-get -y --no-install-recommends install python-setuptools=$PYTHON_TOOL_VERSION \\\n    && apt-get -y --no-install-recommends install openjdk-$JAVA_VERSION-jdk=$JDK_VERSION \\\n    && apt-get clean \\\n    # Ensure Java cacerts symlink points to valid location\n    && update-ca-certificates -f \\\n    && mkdir -p /usr/src/ant \\\n    && wget \"https://archive.apache.org/dist/ant/binaries/apache-ant-$ANT_VERSION-bin.tar.gz\" -O /usr/src/ant/apache-ant-$ANT_VERSION-bin.tar.gz \\\n    && tar -xzf /usr/src/ant/apache-ant-$ANT_VERSION-bin.tar.gz -C /usr/local \\\n    && ln -s /usr/local/apache-ant-$ANT_VERSION/bin/ant /usr/bin/ant \\\n    && rm -rf /usr/src/ant \\\n    && mkdir -p /usr/share/maven /usr/share/maven/ref $MAVEN_CONFIG \\\n    && curl -fsSL \"https://archive.apache.org/dist/maven/maven-3/$MAVEN_VERSION/binaries/apache-maven-$MAVEN_VERSION-bin.tar.gz\" \\\n        | tar -xzC /usr/share/maven --strip-components=1 \\\n    && ln -s /usr/share/maven/bin/mvn /usr/bin/mvn \\\n    && mkdir -p /usr/src/gradle \\\n    && wget \"https://services.gradle.org/distributions/gradle-$GRADLE_VERSION-bin.zip\" -O /usr/src/gradle/gradle-$GRADLE_VERSION-bin.zip \\\n    && unzip /usr/src/gradle/gradle-$GRADLE_VERSION-bin.zip -d /usr/local \\\n    && ln -s /usr/local/gradle-$GRADLE_VERSION/bin/gradle /usr/bin/gradle \\\n    && rm -rf /usr/src/gradle \\\n    && rm -fr /var/lib/apt/lists/* /tmp/* /var/tmp/* && rm /usr/src/ant/apache-ant-$ANT_VERSION-bin.tar.gz\n\nCOPY m2-settings.xml $MAVEN_CONFIG/settings.xml\n\n# MMS build environment\nRUN set -ex \\\n    && apt-get update \\\n    && pip install --no-cache-dir retrying \\\n    && pip install --no-cache-dir mock \\\n    && pip install --no-cache-dir pytest -U \\\n    && pip install --no-cache-dir pylint\n\n# Install protobuf\nRUN wget https://github.com/google/protobuf/archive/v3.4.1.zip \\\n    && unzip v3.4.1.zip && rm v3.4.1.zip \\\n    && cd protobuf-3.4.1 && ./autogen.sh && ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --prefix=/usr && make && make install && cd .. \\\n    && rm -r protobuf-3.4.1\n"
}