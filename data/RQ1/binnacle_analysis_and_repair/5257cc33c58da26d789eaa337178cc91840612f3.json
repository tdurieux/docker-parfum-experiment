{
  "startTime": 1674236332667,
  "endTime": 1674236332740,
  "originalSmells": [
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 24,
        "lineEnd": 24,
        "columnStart": 4,
        "columnEnd": 35
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 12,
        "lineEnd": 14,
        "columnStart": 22,
        "columnEnd": 24
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 12,
        "lineEnd": 14,
        "columnStart": 22,
        "columnEnd": 24
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "############################################################\n# Dockerfile to run a Django-based web application\n# Based on an AMI\n# https://medium.com/@rohitkhatana/deploying-django-app-on-aws-ecs-using-docker-gunicorn-nginx-c90834f76e21\n############################################################\n# Set the base image to use to Ubuntu\nFROM ubuntu:16.04\n\n# Set the file maintainer (your name - the file's author)\nMAINTAINER Thuan Nguyen\n\n# Update the default application repository sources list\nRUN apt-get update && apt-get install --no-install-recommends -y \\\n    python-setuptools python-dev build-essential python-pip \\\n    nginx gettext nodejs && rm -rf /var/lib/apt/lists/*;\n\n# Create application subdirectories\nWORKDIR /var/www\nCOPY . .\n\n# Port to expose\nEXPOSE 8000\n\nWORKDIR /var/www/portal\nRUN pip install --no-cache-dir -r requirements.txt\n\nCOPY ./docker-entrypoint.sh .\nCOPY ./django_nginx.conf /etc/nginx/sites-available/\nRUN ln -s /etc/nginx/sites-available/django_nginx.conf /etc/nginx/sites-enabled\nRUN echo \"daemon off;\" >> /etc/nginx/nginx.conf\nENTRYPOINT [\"./docker-entrypoint.sh\"]\n"
}