{
  "startTime": 1674250787247,
  "endTime": 1674250787451,
  "originalSmells": [
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 7,
        "lineEnd": 7,
        "columnStart": 4,
        "columnEnd": 41
      }
    },
    {
      "rule": "apkAddUseNoCache",
      "position": {
        "lineStart": 6,
        "lineEnd": 6,
        "columnStart": 4,
        "columnEnd": 133
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# We start from my nginx fork which includes the proxy-connect module from tEngine\n# Source is available at https://github.com/rpardini/nginx-proxy-connect-stable-alpine\nFROM rpardini/nginx-proxy-connect-stable-alpine:nginx-1.14.0-alpine-3.8\n\n# Add openssl, bash and ca-certificates, then clean apk cache -- yeah complain all you want.\n# Also added deps for mitmproxy.\nRUN apk add --no-cache --update openssl bash ca-certificates su-exec git g++ libffi libffi-dev libstdc++ openssl openssl-dev python3 python3-dev\nRUN LDFLAGS=-L/lib pip3 --no-cache-dir install mitmproxy\nRUN apk del --purge git g++ libffi-dev openssl-dev python3-dev && rm -rf /var/cache/apk/* && rm -rf ~/.cache/pip\n\n# Required for mitmproxy\nENV LANG=en_US.UTF-8\n\n# Check the installed mitmproxy version\nRUN mitmproxy --version\n\n# Create the cache directory and CA directory\nRUN mkdir -p /docker_mirror_cache /ca\n\n# Expose it as a volume, so cache can be kept external to the Docker image\nVOLUME /docker_mirror_cache\n\n# Expose /ca as a volume. Users are supposed to volume mount this, as to preserve it across restarts.\n# Actually, its required; if not, then docker clients will reject the CA certificate when the proxy is run the second time\nVOLUME /ca\n\n# Add our configuration\nADD nginx.conf /etc/nginx/nginx.conf\n\n# Add our very hackish entrypoint and ca-building scripts, make them executable\nADD entrypoint.sh /entrypoint.sh\nADD create_ca_cert.sh /create_ca_cert.sh\nRUN chmod +x /create_ca_cert.sh /entrypoint.sh\n\n# Clients should only use 3128, not anything else.\nEXPOSE 3128\n\n# In debug mode, 8081 exposes the mitmweb interface.\nEXPOSE 8081\n\n## Default envs.\n# A space delimited list of registries we should proxy and cache; this is in addition to the central DockerHub.\nENV REGISTRIES=\"k8s.gcr.io gcr.io quay.io\"\n# A space delimited list of registry:user:password to inject authentication for\nENV AUTH_REGISTRIES=\"some.authenticated.registry:oneuser:onepassword another.registry:user:password\"\n# Should we verify upstream's certificates? Default to true.\nENV VERIFY_SSL=\"true\"\n# Enable debugging mode; this inserts mitmproxy/mitmweb between the CONNECT proxy and the caching layer\nENV DEBUG=\"false\"\n# Enable nginx debugging mode; this uses nginx-debug binary and enabled debug logging, which is VERY verbose so separate setting\nENV DEBUG_NGINX=\"false\"\n\n# Did you want a shell? Sorry, the entrypoint never returns, because it runs nginx itself. Use 'docker exec' if you need to mess around internally.\nENTRYPOINT [\"/entrypoint.sh\"]"
}