{
  "startTime": 1674244897329,
  "endTime": 1674244897793,
  "originalSmells": [
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 66,
        "lineEnd": 66,
        "columnStart": 4,
        "columnEnd": 29
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 67,
        "lineEnd": 67,
        "columnStart": 4,
        "columnEnd": 41
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 70,
        "lineEnd": 70,
        "columnStart": 4,
        "columnEnd": 52
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 128,
        "lineEnd": 128,
        "columnStart": 4,
        "columnEnd": 15
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 80,
        "lineEnd": 80,
        "columnStart": 4,
        "columnEnd": 24
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 101,
        "lineEnd": 101,
        "columnStart": 4,
        "columnEnd": 25
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 120,
        "lineEnd": 120,
        "columnStart": 4,
        "columnEnd": 31
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 136,
        "lineEnd": 136,
        "columnStart": 4,
        "columnEnd": 26
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 156,
        "lineEnd": 156,
        "columnStart": 4,
        "columnEnd": 59
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 18,
        "lineEnd": 45,
        "columnStart": 4,
        "columnEnd": 18
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 50,
        "lineEnd": 50,
        "columnStart": 20,
        "columnEnd": 72
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 18,
        "lineEnd": 45,
        "columnStart": 4,
        "columnEnd": 18
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 50,
        "lineEnd": 50,
        "columnStart": 20,
        "columnEnd": 72
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# Copyright 2018 Google LLC\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\nARG DISTRO_VERSION=18.04\nFROM ubuntu:${DISTRO_VERSION}\n\nRUN apt update && \\\n    apt install --no-install-recommends -y \\\n        abi-compliance-checker \\\n        abi-dumper \\\n        automake \\\n        build-essential \\\n        ccache \\\n        clang \\\n        clang-format-7 \\\n        cmake \\\n        curl \\\n        doxygen \\\n        gawk \\\n        git \\\n        gcc \\\n        g++ \\\n        cmake \\\n        libcurl4-openssl-dev \\\n        libssl-dev \\\n        libtool \\\n        lsb-release \\\n        make \\\n        pkg-config \\\n        python-pip \\\n        shellcheck \\\n        tar \\\n        unzip \\\n        wget \\\n        zlib1g-dev && rm -rf /var/lib/apt/lists/*;\n\n# By default, Ubuntu 18.04 does not install the alternatives for clang-format\n# and clang-tidy, so we need to manually install those.\nRUN if grep -q 18.04 /etc/lsb-release; then \\\n      apt update && apt install --no-install-recommends -y clang-tidy clang-format-7 clang-tools; rm -rf /var/lib/apt/lists/*; \\\n      update-alternatives --install /usr/bin/clang-tidy clang-tidy /usr/bin/clang-tidy-6.0 100; \\\n      update-alternatives --install /usr/bin/clang-format clang-format /usr/bin/clang-format-7 100; \\\n      update-alternatives --install /usr/bin/scan-build scan-build /usr/bin/scan-build-6.0 100; \\\n    fi\n\n# Install the the buildifier tool, which does not compile with the default\n# golang compiler for Ubuntu 16.04 and Ubuntu 18.04.\nRUN wget -q -O /usr/bin/buildifier https://github.com/bazelbuild/buildtools/releases/download/0.17.2/buildifier\nRUN chmod 755 /usr/bin/buildifier\n\n# Install cmake_format to automatically format the CMake list files.\n#     https://github.com/cheshirekow/cmake_format\n# Pin this to an specific version because the formatting changes when the\n# \"latest\" version is updated, and we do not want the builds to break just\n# because some third party changed something.\nRUN pip install --no-cache-dir --upgrade pip\nRUN pip install --no-cache-dir numpy cmake_format==0.4.0\n\n# Install Python packages used in the integration tests.\nRUN pip install --no-cache-dir flask httpbin gevent gunicorn crc32c\n\n# Parallelize the builds if possible. The default is chosen to work well on\n# Travis, but developers may want to override this value when building on their\n# workstations.\nARG NCPU=2\n\n# Install Crc32c library.\nWORKDIR /var/tmp/build\nRUN wget -q https://github.com/google/crc32c/archive/1.0.6.tar.gz\nRUN tar -xf 1.0.6.tar.gz && rm 1.0.6.tar.gz\nWORKDIR /var/tmp/build/crc32c-1.0.6\nRUN cmake \\\n      -DCMAKE_BUILD_TYPE=Release \\\n      -DBUILD_SHARED_LIBS=yes \\\n      -DCRC32C_BUILD_TESTS=OFF \\\n      -DCRC32C_BUILD_BENCHMARKS=OFF \\\n      -DCRC32C_USE_GLOG=OFF \\\n      -H. -Bcmake-out/crc32c\nRUN cmake --build cmake-out/crc32c --target install -- -j ${NCPU}\nRUN ldconfig\n\n# Install protobuf using CMake. Some distributions include protobuf, but gRPC\n# requires 3.4.x or newer, and many of those distribution use older versions.\n# We need to install both the debug and Release version because:\n# - When using pkg-config, only the release version works, the pkg-config\n#   file is hard-coded to search for `libprotobuf.so` (or `.a`)\n# - When using CMake, only the version compiled with the same CMAKE_BUILD_TYPE\n#   as the dependent (gRPC or google-cloud-cpp) works.\nWORKDIR /var/tmp/build\nRUN wget -q https://github.com/google/protobuf/archive/v3.6.1.tar.gz\nRUN tar -xf v3.6.1.tar.gz && rm v3.6.1.tar.gz\nWORKDIR /var/tmp/build/protobuf-3.6.1/cmake\nRUN for build_type in \"Debug\" \"Release\"; do \\\n    cmake \\\n        -DCMAKE_BUILD_TYPE=\"${build_type}\" \\\n        -DBUILD_SHARED_LIBS=yes \\\n        -Dprotobuf_BUILD_TESTS=OFF \\\n        -H. -Bcmake-out-${build_type}; \\\n    cmake --build cmake-out-${build_type} --target install -- -j ${NCPU}; \\\n  done\nRUN ldconfig\n\n# Many distributions include c-ares, but they do not include the CMake support\n# files for the library, so manually install it.  c-ares requires two install\n# steps because (1) the CMake-based build does not install pkg-config files,\n# and (2) the Makefile-based build does not install CMake config files.\nWORKDIR /var/tmp/build\nRUN apt-get remove -y libc-ares-dev libc-ares2\nRUN wget -q https://github.com/c-ares/c-ares/archive/cares-1_14_0.tar.gz\nRUN tar -xf cares-1_14_0.tar.gz && rm cares-1_14_0.tar.gz\nWORKDIR /var/tmp/build/c-ares-cares-1_14_0\nRUN cmake \\\n      -DCMAKE_BUILD_TYPE=\"Release\" \\\n      -DBUILD_SHARED_LIBS=yes \\\n      -H. -Bcmake-out\nRUN cmake --build cmake-out --target install -- -j ${NCPU}\nRUN ./buildconf\nRUN ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\"\nRUN install -m 644 -D -t /usr/local/lib/pkgconfig libcares.pc\nRUN ldconfig\n\n# Install gRPC. Note that we use the system's zlib and ssl libraries.\n# For similar reasons to c-ares (see above), we need two install steps.\nWORKDIR /var/tmp/build\nRUN wget -q https://github.com/grpc/grpc/archive/v1.19.1.tar.gz\nRUN tar -xf v1.19.1.tar.gz && rm v1.19.1.tar.gz\nRUN ls -l\nWORKDIR /var/tmp/build/grpc-1.19.1\nRUN ls -l\nRUN cmake \\\n      -DCMAKE_BUILD_TYPE=\"Release\" \\\n      -DBUILD_SHARED_LIBS=yes \\\n      -DgRPC_BUILD_TESTS=OFF \\\n      -DgRPC_ZLIB_PROVIDER=package \\\n      -DgRPC_SSL_PROVIDER=package \\\n      -DgRPC_CARES_PROVIDER=package \\\n      -DgRPC_PROTOBUF_PROVIDER=package \\\n      -H. -Bcmake-out/grpc\nRUN cmake --build cmake-out/grpc --target install -- -j ${NCPU}\nRUN make install-pkg-config_c install-pkg-config_cxx install-certs\nRUN ldconfig\n\n# Install googletest.\nWORKDIR /var/tmp/build\nRUN wget -q https://github.com/google/googletest/archive/b6cd405286ed8635ece71c72f118e659f4ade3fb.tar.gz\nRUN tar -xf b6cd405286ed8635ece71c72f118e659f4ade3fb.tar.gz && rm b6cd405286ed8635ece71c72f118e659f4ade3fb.tar.gz\nWORKDIR /var/tmp/build/googletest-b6cd405286ed8635ece71c72f118e659f4ade3fb\nRUN cmake \\\n      -DCMAKE_BUILD_TYPE=\"Release\" \\\n      -DBUILD_SHARED_LIBS=yes \\\n      -H. -Bcmake-out/googletest\nRUN cmake --build cmake-out/googletest --target install -- -j ${NCPU}\nRUN ldconfig\n\nRUN find /usr/local -type d | xargs chmod 777\n\n# Install the Cloud Bigtable emulator and the Cloud Bigtable command-line\n# client.  They are used in the integration tests.\nCOPY . /var/tmp/ci\nWORKDIR /var/tmp/downloads\nRUN /var/tmp/ci/install-cloud-sdk.sh\n\n# Install Bazel because some of the builds need it.\nRUN /var/tmp/ci/install-bazel.sh\n"
}