{
  "startTime": 1674240862416,
  "endTime": 1674240862613,
  "originalSmells": [
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 11,
        "lineEnd": 20,
        "columnStart": 22,
        "columnEnd": 8
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM ubuntu:16.04\n\nRUN mkdir -p /opt/android-sdk-linux && mkdir -p ~/.android && touch ~/.android/repositories.cfg\n\nENV WORKING_DIR /opt\n\nENV ANDROID_NDK_HOME ${WORKING_DIR}/android-ndk-linux\nENV ANDROID_TOOLCHAIN_PATH /tmp/my-android-toolchain\nENV PATH ${ANDROID_TOOLCHAIN_PATH}/bin:${PATH}\nENV CLANG_FLAGS \"-target arm-linux-androideabi -marm -mfpu=vfp -mfloat-abi=softfp --sysroot ${ANDROID_TOOLCHAIN_PATH}/sysroot -gcc-toolchain ${ANDROID_TOOLCHAIN_PATH}\"\n\nRUN apt-get update && apt-get install -y --no-install-recommends \\\n    build-essential \\\n    ca-certificates \\\n    clang \\\n    file \\\n    gfortran \\\n    git \\\n    python \\\n    unzip \\\n    wget && \\\n    apt-get clean autoclean && \\\n    apt-get autoremove -y && rm -rf /var/lib/apt/lists/*;\n\n##### Install Android toolchain\nRUN cd ${WORKING_DIR} && \\\n    wget -q --output-document=android-ndk.zip https://dl.google.com/android/repository/android-ndk-r16b-linux-x86_64.zip && \\\n    unzip android-ndk.zip && \\\n    rm -f android-ndk.zip && \\\n    mv android-ndk-r16b ${ANDROID_NDK_HOME}\n\nRUN ${ANDROID_NDK_HOME}/build/tools/make_standalone_toolchain.py --arch arm --api 21 --stl=libc++ --install-dir ${ANDROID_TOOLCHAIN_PATH}\n\n##### Download, compile and install OpenBlas\nRUN cd ${WORKING_DIR} && \\\n    git clone https://github.com/xianyi/OpenBLAS && \\\n    cd OpenBLAS && \\\n    make TARGET=ARMV7 ONLY_CBLAS=1 AR=ar CC=\"clang ${CLANG_FLAGS}\" HOSTCC=gcc ARM_SOFTFP_ABI=1 USE_THREAD=0 NUM_THREADS=32 -j4 && \\\n    make install NO_SHARED=1 PREFIX=`pwd`/install\n\n\n##### Download, compile and install CLAPACK\nRUN cd ${WORKING_DIR} && \\\n    git clone https://github.com/simonlynen/android_libs && \\\n    cd android_libs/lapack && \\\n    sed -i 's/LOCAL_MODULE:= testlapack/#LOCAL_MODULE:= testlapack/g' jni/Android.mk && \\\n    sed -i 's/LOCAL_SRC_FILES:= testclapack.cpp/#LOCAL_SRC_FILES:= testclapack.cpp/g' jni/Android.mk && \\\n    sed -i 's/LOCAL_STATIC_LIBRARIES := lapack/#LOCAL_STATIC_LIBRARIES := lapack/g' jni/Android.mk && \\\n    sed -i 's/include $(BUILD_SHARED_LIBRARY)/#include $(BUILD_SHARED_LIBRARY)/g' jni/Android.mk && \\\n    ${ANDROID_NDK_HOME}/ndk-build && \\\n    cp obj/local/armeabi-v7a/*.a ${WORKING_DIR}/OpenBLAS/install/lib\n\n##### Compile kaldi\n# Using \"/opt\" because of a bug in Docker:\n# https://github.com/docker/docker/issues/25925\nCOPY ./compile-kaldi.sh /opt\n\nRUN chmod +x /opt/compile-kaldi.sh\n\nENTRYPOINT [\"./opt/compile-kaldi.sh\"]\n"
}