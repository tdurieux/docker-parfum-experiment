{
  "startTime": 1674250287549,
  "endTime": 1674250288233,
  "originalSmells": [
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 28,
        "lineEnd": 28,
        "columnStart": 7,
        "columnEnd": 45
      }
    },
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 29,
        "lineEnd": 29,
        "columnStart": 7,
        "columnEnd": 45
      }
    },
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 46,
        "lineEnd": 46,
        "columnStart": 5,
        "columnEnd": 43
      }
    },
    {
      "rule": "wgetUseHttpsUrl",
      "position": {
        "lineStart": 58,
        "lineEnd": 58,
        "columnStart": 7,
        "columnEnd": 80
      }
    },
    {
      "rule": "wgetUseHttpsUrl",
      "position": {
        "lineStart": 61,
        "lineEnd": 61,
        "columnStart": 7,
        "columnEnd": 90
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 68,
        "lineEnd": 96,
        "columnStart": 39,
        "columnEnd": 41
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 62,
        "lineEnd": 62,
        "columnStart": 7,
        "columnEnd": 40
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 63,
        "lineEnd": 63,
        "columnStart": 7,
        "columnEnd": 27
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 64,
        "lineEnd": 64,
        "columnStart": 7,
        "columnEnd": 30
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 65,
        "lineEnd": 65,
        "columnStart": 7,
        "columnEnd": 29
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 108,
        "lineEnd": 108,
        "columnStart": 7,
        "columnEnd": 27
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 13,
        "lineEnd": 16,
        "columnStart": 5,
        "columnEnd": 57
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 17,
        "lineEnd": 17,
        "columnStart": 5,
        "columnEnd": 52
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 13,
        "lineEnd": 16,
        "columnStart": 5,
        "columnEnd": 57
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 17,
        "lineEnd": 17,
        "columnStart": 5,
        "columnEnd": 52
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# Multi-stage build - See https://docs.docker.com/engine/userguide/eng-image/multistage-build\nFROM ubnt/unms:0.13.3 as unms\nFROM ubnt/unms-netflow:0.13.3 as unms-netflow\nFROM oznu/s6-node:10.15.1-debian-amd64\n\nENV DEBIAN_FRONTEND=noninteractive\n\n# base deps redis, rabbitmq, postgres 9.6\nRUN set -x \\\n  && echo \"deb http://ftp.debian.org/debian stretch-backports main\" >> /etc/apt/sources.list \\\n  && apt-get update \\\n  && mkdir -p /usr/share/man/man1 /usr/share/man/man7 \\\n  && mkdir -p /usr/share/man/man7 \\\n  && apt-get install --no-install-recommends -y build-essential rabbitmq-server redis-server \\\n    postgresql-9.6 postgresql-contrib-9.6 postgresql-client-9.6 libpq-dev \\\n    gzip bash vim openssl libcap-dev dumb-init sudo gettext zlibc zlib1g zlib1g-dev \\\n    iproute2 netcat wget libpcre3 libpcre3-dev libssl-dev \\\n  && apt-get install --no-install-recommends -y certbot -t stretch-backports && rm -rf /var/lib/apt/lists/*;\n\n# start ubnt/unms dockerfile #\nRUN mkdir -p /home/app/unms\n\nWORKDIR /home/app/unms\n\n# Copy UNMS app from offical image since the source code is not published at this time\nCOPY --from=unms /home/app/unms /home/app/unms\n\nRUN rm -rf node_modules \\\n    && JOBS=$(nproc) npm install sharp@latest \\\n    && JOBS=$(nproc) npm install --production \\\n    && mkdir -p -m 777 \"$HOME/unms/public/site-images\" \\\n    && mkdir -p -m 777 \"$HOME/unms/data/config-backups\" \\\n    && mkdir -p -m 777 \"$HOME/unms/data/unms-backups\" \\\n    && mkdir -p -m 777 \"$HOME/unms/data/import\" && npm cache clean --force;\n\nCOPY --from=unms /usr/local/bin/docker-entrypoint.sh /usr/local/bin/docker-entrypoint.sh\nRUN chmod +x /usr/local/bin/docker-entrypoint.sh\n# end ubnt/unms dockerfile #\n\n# start unms-netflow dockerfile #\nRUN mkdir -p /home/app/netflow\n\nCOPY --from=unms-netflow /home/app /home/app/netflow\n\nRUN cd /home/app/netflow \\\n  && rm -rf node_modules \\\n  && JOBS=$(nproc) npm install --production && npm cache clean --force;\n\n# end unms-netflow dockerfile #\n\n# ubnt/nginx docker file #\nENV NGINX_UID=1000 \\\n    NGINX_VERSION=nginx-1.12.2 \\\n    LUAJIT_VERSION=2.1.0-beta3 \\\n    LUA_NGINX_VERSION=0.10.13\n\nRUN set -x \\\n    && mkdir -p /tmp/src && cd /tmp/src \\\n    && wget -q https://nginx.org/download/${NGINX_VERSION}.tar.gz -O nginx.tar.gz \\\n    && wget -q https://github.com/openresty/lua-nginx-module/archive/v${LUA_NGINX_VERSION}.tar.gz -O lua-nginx-module.tar.gz \\\n    && wget -q https://github.com/simpl/ngx_devel_kit/archive/v0.3.0.tar.gz -O ndk.tar.gz \\\n    && wget -q https://luajit.org/download/LuaJIT-${LUAJIT_VERSION}.tar.gz -O luajit.tar.gz \\\n    && tar -zxvf lua-nginx-module.tar.gz \\\n    && tar -zxvf ndk.tar.gz \\\n    && tar -zxvf luajit.tar.gz \\\n    && tar -zxvf nginx.tar.gz \\\n    && cd /tmp/src/LuaJIT-${LUAJIT_VERSION} && make amalg PREFIX='/usr' && make install PREFIX='/usr' \\\n    && export LUAJIT_LIB=/usr/lib/libluajit-5.1.so && export LUAJIT_INC=/usr/include/luajit-2.1 \\\n    && cd /tmp/src/${NGINX_VERSION} && ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" \\\n        --with-cc-opt='-g -O2 -fPIE -fstack-protector-strong -Wformat -Werror=format-security -fPIC -Wdate-time -D_FORTIFY_SOURCE=2' \\\n        --with-ld-opt='-Wl,-Bsymbolic-functions -fPIE -pie -Wl,-z,relro -Wl,-z,now -fPIC' \\\n        --with-pcre-jit \\\n        --with-threads \\\n        --add-module=/tmp/src/lua-nginx-module-${LUA_NGINX_VERSION} \\\n        --add-module=/tmp/src/ngx_devel_kit-0.3.0 \\\n        --with-http_ssl_module \\\n        --with-http_realip_module \\\n        --with-http_gzip_static_module \\\n        --with-http_secure_link_module \\\n        --without-mail_pop3_module \\\n        --without-mail_imap_module \\\n        --without-http_upstream_ip_hash_module \\\n        --without-http_memcached_module \\\n        --without-http_auth_basic_module \\\n        --without-http_userid_module \\\n        --without-http_fastcgi_module \\\n        --without-http_uwsgi_module \\\n        --without-http_scgi_module \\\n        --prefix=/var/lib/nginx \\\n        --sbin-path=/usr/sbin/nginx \\\n        --conf-path=/etc/nginx/nginx.conf \\\n        --http-log-path=/dev/stdout \\\n        --error-log-path=/dev/stderr \\\n        --lock-path=/tmp/nginx.lock \\\n        --pid-path=/tmp/nginx.pid \\\n        --http-client-body-temp-path=/tmp/body \\\n        --http-proxy-temp-path=/tmp/proxy \\\n    && make -j $(nproc) \\\n    && make install \\\n    && rm /usr/bin/luajit-${LUAJIT_VERSION} \\\n    && rm -rf /tmp/src \\\n    && rm -rf /var/cache/apk/* \\\n    && echo \"unms ALL=(ALL) NOPASSWD: /usr/sbin/nginx -s *\" >> /etc/sudoers \\\n    && echo \"unms ALL=(ALL) NOPASSWD:SETENV: /copy-user-certs.sh reload\" >> /etc/sudoers && rm lua-nginx-module.tar.gz\n\nADD https://github.com/Ubiquiti-App/UNMS/archive/v0.13.0.tar.gz /tmp/unms.tar.gz\n\nRUN cd /tmp \\\n    && tar -xzf unms.tar.gz \\\n    && cd UNMS-*/src/nginx \\\n    && cp entrypoint.sh refresh-certificate.sh fill-template.sh openssl.cnf *.conf.template / \\\n    && mkdir -p /www/public \\\n    && cp -R public /www/ \\\n    && chmod +x /entrypoint.sh /fill-template.sh /refresh-certificate.sh && rm unms.tar.gz\n\n# make compatible with debian\nRUN sed -i \"s#/bin/sh#/bin/bash#g\" /entrypoint.sh \\\n  && sed -i \"s#adduser -D#adduser --disabled-password --gecos \\\"\\\"#g\" /entrypoint.sh\n# end ubnt/nginx docker file #\n\nENV PATH=/home/app/unms/node_modules/.bin:$PATH:/usr/lib/postgresql/9.6/bin \\\n  PGDATA=/config/postgres \\\n  POSTGRES_DB=unms \\\n  QUIET_MODE=0 \\\n  WS_PORT=443 \\\n  PUBLIC_HTTPS_PORT=443 \\\n  PUBLIC_WS_PORT=443 \\\n  UNMS_NETFLOW_PORT=2055 \\\n  SECURE_LINK_SECRET=enigma \\\n  SSL_CERT=\"\"\n\nEXPOSE 80 443 2055/udp\n\nVOLUME [\"/config\"]\n\nCOPY root /\n"
}