{
  "startTime": 1674244187529,
  "endTime": 1674244187827,
  "originalSmells": [
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 25,
        "lineEnd": 25,
        "columnStart": 7,
        "columnEnd": 32
      }
    },
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 26,
        "lineEnd": 26,
        "columnStart": 7,
        "columnEnd": 30
      }
    },
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 27,
        "lineEnd": 27,
        "columnStart": 7,
        "columnEnd": 18
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 13,
        "lineEnd": 14,
        "columnStart": 7,
        "columnEnd": 24
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 63,
        "lineEnd": 65,
        "columnStart": 7,
        "columnEnd": 63
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# First things first, we build an image which is where we're going to compile\n# our static assets with. It is important that the steps in this remain the\n# same as the steps in Dockerfile.static, EXCEPT this may include additional\n# steps appended onto the end.\nFROM node:8.15.1 as static\n\nWORKDIR /opt/warehouse/src/\n\n# The list of C packages we need are almost never going to change, so installing\n# them first, right off the bat lets us cache that and having node.js level\n# dependency changes not trigger a reinstall.\nRUN set -x \\\n    && apt-get update \\\n    && apt-get install --no-install-recommends -y \\\n        libjpeg-dev nasm && rm -rf /var/lib/apt/lists/*;\n\n# However, we do want to trigger a reinstall of our node.js dependencies anytime\n# our package.json changes, so we'll ensure that we're copying that into our\n# static container prior to actually installing the npm dependencies.\nCOPY package.json package-lock.json .babelrc /opt/warehouse/src/\n\n# Installing npm dependencies is done as a distinct step and *prior* to copying\n# over our static files so that, you guessed it, we don't invalidate the cache\n# of installed dependencies just because files have been modified.\nRUN set -x \\\n    && npm install -g npm@latest \\\n    && npm install -g gulp-cli \\\n    && npm install && npm cache clean --force;\n\n# Actually copy over our static files, we only copy over the static files to\n# save a small amount of space in our image and because we don't need them. We\n# copy Gulpfile.babel.js last even though it's least likely to change, because\n# it's very small so copying it needlessly isn't a big deal but it will save a\n# small amount of copying when only Gulpfile.babel.js is modified.\nCOPY warehouse/static/ /opt/warehouse/src/warehouse/static/\nCOPY warehouse/admin/static/ /opt/warehouse/src/warehouse/admin/static/\nCOPY Gulpfile.babel.js /opt/warehouse/src/\n\nRUN gulp dist\n\n\n\n\n\n\n# Now we're going to build our actual application, but not the actual production\n# image that it gets deployed into.\nFROM python:3.7.3-slim-stretch as build\n\n# Define whether we're building a production or a development image. This will\n# generally be used to control whether or not we install our development and\n# test dependencies.\nARG DEVEL=no\n\n# To enable Ipython in the development environment set to yes (for using ipython\n# as the warehouse shell interpreter,\n# i.e. 'docker-compose run --rm web python -m warehouse shell --type=ipython')\nARG IPYTHON=no\n\n# Install System level Warehouse build requirements, this is done before\n# everything else because these are rarely ever going to change.\nRUN set -x \\\n    && apt-get update \\\n    && apt-get install --no-install-recommends -y \\\n        build-essential libffi-dev libxml2-dev libxslt-dev libpq-dev libcurl4-openssl-dev libssl-dev \\\n        $(if [ \"$DEVEL\" = \"yes\" ]; then echo 'libjpeg-dev'; fi) && rm -rf /var/lib/apt/lists/*;\n\n# We need a way for the build system to pass in a repository that will be used\n# to install our theme from. For this we'll add the THEME_REPO build argument\n# which takes a PEP 503 compatible repository URL that must be available to\n# install the requirements/theme.txt requirement file.\nARG THEME_REPO\n\n# We create an /opt directory with a virtual environment in it to store our\n# application in.\nRUN set -x \\\n    && python3 -m venv /opt/warehouse\n\n\n# Now that we've created our virtual environment, we'll go ahead and update\n# our $PATH to refer to it first.\nENV PATH=\"/opt/warehouse/bin:${PATH}\"\n\n# Next, we want to update pip, setuptools, and wheel inside of this virtual\n# environment to ensure that we have the latest versions of them.\n# TODO: We use --require-hashes in our requirements files, but not here, making\n#       the ones in the requirements files kind of a moot point. We should\n#       probably pin these too, and update them as we do anything else.\nRUN pip --no-cache-dir --disable-pip-version-check install --upgrade pip setuptools wheel\n\n# We copy this into the docker container prior to copying in the rest of our\n# application so that we can skip installing requirements if the only thing\n# that has changed is the Warehouse code itself.\nCOPY requirements /tmp/requirements\n\n# Install our development dependencies if we're building a development install\n# otherwise this will do nothing.\nRUN set -x \\\n    && if [ \"$DEVEL\" = \"yes\" ]; then pip --no-cache-dir --disable-pip-version-check install -r /tmp/requirements/dev.txt; fi\n\nRUN set -x \\\n    && if [ \"$DEVEL\" = \"yes\" ] && [ \"$IPYTHON\" = \"yes\" ]; then pip --no-cache-dir --disable-pip-version-check install -r /tmp/requirements/ipython.txt; fi\n\n# Install the Python level Warehouse requirements, this is done after copying\n# the requirements but prior to copying Warehouse itself into the container so\n# that code changes don't require triggering an entire install of all of\n# Warehouse's dependencies.\nRUN set -x \\\n    && PIP_EXTRA_INDEX_URL=$THEME_REPO \\\n        pip --no-cache-dir --disable-pip-version-check \\\n            install --no-binary hiredis \\\n                    -r /tmp/requirements/deploy.txt \\\n                    -r /tmp/requirements/main.txt \\\n                    $(if [ \"$DEVEL\" = \"yes\" ]; then echo '-r /tmp/requirements/tests.txt'; fi) \\\n                    $(if [ \"$THEME_REPO\" != \"\" ]; then echo '-r /tmp/requirements/theme.txt'; fi) \\\n    && find /opt/warehouse -name '*.pyc' -delete\n\n\n\n\n\n# Now we're going to build our actual application image, which will eventually\n# pull in the static files that were built above.\nFROM python:3.7.3-slim-stretch\n\n# Setup some basic environment variables that are ~never going to change.\nENV PYTHONUNBUFFERED 1\nENV PYTHONPATH /opt/warehouse/src/\nENV PATH=\"/opt/warehouse/bin:${PATH}\"\n\nWORKDIR /opt/warehouse/src/\n\n# Define whether we're building a production or a development image. This will\n# generally be used to control whether or not we install our development and\n# test dependencies.\nARG DEVEL=no\n\n# This is a work around because otherwise postgresql-client bombs out trying\n# to create symlinks to these directories.\nRUN set -x \\\n    && mkdir -p /usr/share/man/man1 \\\n    && mkdir -p /usr/share/man/man7\n\n# Install System level Warehouse requirements, this is done before everything\n# else because these are rarely ever going to change.\nRUN set -x \\\n    && apt-get update \\\n    && apt-get install --no-install-recommends -y \\\n        libpq5 libxml2 libxslt1.1 libcurl3  \\\n        $(if [ \"$DEVEL\" = \"yes\" ]; then echo 'bash libjpeg62 postgresql-client'; fi) \\\n    && apt-get clean \\\n    && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*\n\n# Copy the directory into the container, this is done last so that changes to\n# Warehouse itself require the least amount of layers being invalidated from\n# the cache. This is most important in development, but it also useful for\n# deploying new code changes.\nCOPY --from=static /opt/warehouse/src/warehouse/static/dist/ /opt/warehouse/src/warehouse/static/dist/\nCOPY --from=static /opt/warehouse/src/warehouse/admin/static/dist/ /opt/warehouse/src/warehouse/admin/static/dist/\nCOPY --from=build /opt/warehouse/ /opt/warehouse/\nCOPY . /opt/warehouse/src/\n"
}