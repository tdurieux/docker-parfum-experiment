{
  "startTime": 1674251247404,
  "endTime": 1674251247649,
  "originalSmells": [
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 18,
        "lineEnd": 18,
        "columnStart": 4,
        "columnEnd": 27
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 3,
        "lineEnd": 3,
        "columnStart": 4,
        "columnEnd": 29
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 3,
        "lineEnd": 3,
        "columnStart": 4,
        "columnEnd": 29
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM java:8-jre\n\nRUN apt-get update && \\\n    apt-get install --no-install-recommends -y netcat && rm -rf /var/lib/apt/lists/*;\n\nARG DOWNLOAD_URL\nARG ELASTIC_VERSION\n\nENV URL ${DOWNLOAD_URL}/logstash/logstash-${ELASTIC_VERSION}.tar.gz\nENV PATH $PATH:/opt/logstash-${ELASTIC_VERSION}/bin\n\n# Cache variable can be set during building to invalidate the build cache with `--build-arg CACHE=$(date +%s) .`\nARG CACHE=1\n\n# As all snapshot builds have the same url, the image is cached. The date at then can be used to invalidate the image\nRUN set -x && \\\n    cd /opt && \\\n    wget -qO logstash.tar.gz $URL?${CACHE} && \\\n    tar xzf logstash.tar.gz && rm logstash.tar.gz\n\n\nCOPY logstash.conf.tmpl /logstash.conf.tmpl\nCOPY docker-entrypoint.sh /entrypoint.sh\n\nCOPY pki /etc/pki\n\nHEALTHCHECK CMD nc -z localhost 5044\n\nENTRYPOINT [\"/entrypoint.sh\"]\n\nEXPOSE 5044 5055 9600\n\nCMD logstash -f /logstash.conf --log.level=debug --config.debug --http.host=0.0.0.0\n"
}