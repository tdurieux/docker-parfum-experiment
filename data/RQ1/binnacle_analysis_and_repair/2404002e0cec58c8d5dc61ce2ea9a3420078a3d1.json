{
  "startTime": 1674251054936,
  "endTime": 1674251055190,
  "originalSmells": [
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 90,
        "lineEnd": 90,
        "columnStart": 8,
        "columnEnd": 37
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 91,
        "lineEnd": 91,
        "columnStart": 8,
        "columnEnd": 37
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 92,
        "lineEnd": 92,
        "columnStart": 8,
        "columnEnd": 37
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 93,
        "lineEnd": 93,
        "columnStart": 8,
        "columnEnd": 37
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 94,
        "lineEnd": 94,
        "columnStart": 8,
        "columnEnd": 37
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 95,
        "lineEnd": 95,
        "columnStart": 8,
        "columnEnd": 26
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM alpine:3.7\n\n# VERSIONS\nENV ALPINE_VERSION=3.7 \\\n    PYTHON_VERSION=3.6.5\n\n# PATHS\nENV PYTHON_PATH=/usr/lib/python$PYTHON_VERSION \\\n    PATH=\"/usr/lib/python$PYTHON_VERSION/bin/:${PATH}\"\n\n# PACKAGES\n#   * dumb-init: a proper init system for containers, to reap zombie children\n#   * musl: standard C library\n#   * lib6-compat: compatibility libraries for glibc\n#   * linux-headers: commonly needed, and an unusual package name from Alpine.\n#   * build-base: used so we include the basic development packages (gcc)\n#   * bash: so we can access /bin/bash\n#   * git: to ease up clones of repos\n#   * ca-certificates: for SSL verification during Pip and easy_install\nENV PACKAGES=\"\\\n    dumb-init \\\n    musl \\\n    libc6-compat \\\n    linux-headers \\\n    build-base \\\n    bash \\\n    git \\\n    ca-certificates \\\n\"\n\n# PACKAGES needed to built python\nENV PYTHON_BUILD_PACKAGES=\"\\\n    readline-dev \\\n    zlib-dev \\\n    bzip2-dev \\\n    sqlite-dev \\\n    libressl-dev \\\n\"\n\nRUN set -ex ;\\\n    # find MAJOR and MINOR python versions based on $PYTHON_VERSION\n    export PYTHON_MAJOR_VERSION=$(echo \"${PYTHON_VERSION}\" | rev | cut -d\".\" -f3-  | rev) ;\\\n    export PYTHON_MINOR_VERSION=$(echo \"${PYTHON_VERSION}\" | rev | cut -d\".\" -f2-  | rev) ;\\\n    # replacing default repositories with edge ones\n    echo \"http://dl-cdn.alpinelinux.org/alpine/v$ALPINE_VERSION/community\" >> /etc/apk/repositories ;\\\n    echo \"http://dl-cdn.alpinelinux.org/alpine/v$ALPINE_VERSION/main\" >> /etc/apk/repositories ;\\\n\n    # Add the packages, with a CDN-breakage fallback if needed\n    apk add --no-cache $PACKAGES || \\\n        (sed -i -e 's/dl-cdn/dl-4/g' /etc/apk/repositories && apk add --no-cache $PACKAGES) ;\\\n    # Add packages just for the python build process with a CDN-breakage fallback if needed\n    apk add --no-cache --virtual .build-deps $PYTHON_BUILD_PACKAGES || \\\n        (sed -i -e 's/dl-cdn/dl-4/g' /etc/apk/repositories && apk add --no-cache --virtual .build-deps $PYTHON_BUILD_PACKAGES) ;\\\n\n    # turn back the clock -- so hacky!\n    echo \"http://dl-cdn.alpinelinux.org/alpine/v$ALPINE_VERSION/main/\" > /etc/apk/repositories ;\\\n    # echo \"@community http://dl-cdn.alpinelinux.org/alpine/v$ALPINE_VERSION/community\" >> /etc/apk/repositories ;\\\n    # echo \"@testing http://dl-cdn.alpinelinux.org/alpine/v$ALPINE_VERSION/testing\" >> /etc/apk/repositories ;\\\n    # echo \"@edge-main http://dl-cdn.alpinelinux.org/alpine/edge/main\" >> /etc/apk/repositories ;\\\n\n    # use pyenv to download and compile specific python version\n    git clone --depth 1 https://github.com/pyenv/pyenv /usr/lib/pyenv ;\\\n    PYENV_ROOT=/usr/lib/pyenv /usr/lib/pyenv/bin/pyenv install $PYTHON_VERSION ;\\\n    # move specific version to correct path delete pyenv, no longer needed\n    mv /usr/lib/pyenv/versions/$PYTHON_VERSION/ $PYTHON_PATH ;\\\n    rm -rfv /usr/lib/pyenv ;\\\n    # change the path on the header of every file from PYENV_ROOT to PYTHON_PATH\n    cd $PYTHON_PATH/bin/ && sed -i \"s+/usr/lib/pyenv/versions/$PYTHON_VERSION/+$PYTHON_PATH/+g\" * ;\\\n    # delete binary \"duplicates\" and replace them with symlinks\n    # this also optimizes space since they are actually the same binary\n    rm -f $PYTHON_PATH/bin/python$PYTHON_MAJOR_VERSION \\\n          $PYTHON_PATH/bin/python$PYTHON_MINOR_VERSION \\\n          $PYTHON_PATH/bin/python$PYTHON_MAJOR_VERSION-config \\\n          $PYTHON_PATH/bin/python$PYTHON_MINOR_VERSION-config ;\\\n    ln -sf $PYTHON_PATH/bin/python $PYTHON_PATH/bin/python$PYTHON_MAJOR_VERSION ;\\\n    ln -sf $PYTHON_PATH/bin/python $PYTHON_PATH/bin/python$PYTHON_MINOR_VERSION ;\\\n    ln -sf $PYTHON_PATH/bin/python-config $PYTHON_PATH/bin/python$PYTHON_MAJOR_VERSION-config ;\\\n    ln -sf $PYTHON_PATH/bin/python-config $PYTHON_PATH/bin/python$PYTHON_MINOR_VERSION-config ;\\\n    # delete files to to reduce container size\n    # tips taken from main python docker repo\n    find /usr/lib/python$PYTHON_VERSION -depth \\( -name '*.pyo' -o -name '*.pyc' -o -name 'test' -o -name 'tests' \\) -exec rm -rf '{}' + ;\\\n\n    # remove build dependencies and any leftover apk cache\n    apk del --no-cache --purge .build-deps ;\\\n    rm -rf /var/cache/apk/* ;\\\n\n    # Need to re-get sqlite3?\n    apk add --no-cache sqlite-dev\n\n    # pip  install package\n    RUN pip install --no-cache-dir --upgrade pip; \\\n        pip install --no-cache-dir numpy; \\\n        pip install --no-cache-dir aiobotocore; \\\n        pip install --no-cache-dir pytz; \\\n        pip install --no-cache-dir requests; \\\n        pip install --no-cache-dir psutil\n\n# since we will be \"always\" mounting the volume, we can set this up\nENTRYPOINT [\"/usr/bin/dumb-init\"]\n#CMD [\"python\"]\n\n\n"
}