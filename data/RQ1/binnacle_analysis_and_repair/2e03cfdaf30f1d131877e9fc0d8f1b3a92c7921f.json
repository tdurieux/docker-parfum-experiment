{
  "startTime": 1674242772994,
  "endTime": 1674242773333,
  "originalSmells": [
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 25,
        "lineEnd": 51,
        "columnStart": 4,
        "columnEnd": 24
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 8,
        "lineEnd": 8,
        "columnStart": 5,
        "columnEnd": 66
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 10,
        "lineEnd": 10,
        "columnStart": 4,
        "columnEnd": 61
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 12,
        "lineEnd": 12,
        "columnStart": 4,
        "columnEnd": 36
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 10,
        "lineEnd": 10,
        "columnStart": 4,
        "columnEnd": 61
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 12,
        "lineEnd": 12,
        "columnStart": 4,
        "columnEnd": 36
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 8,
        "lineEnd": 8,
        "columnStart": 5,
        "columnEnd": 66
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 10,
        "lineEnd": 10,
        "columnStart": 4,
        "columnEnd": 61
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 12,
        "lineEnd": 12,
        "columnStart": 4,
        "columnEnd": 36
      }
    }
  ],
  "repairedSmells": [
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 10,
        "lineEnd": 10,
        "columnStart": 4,
        "columnEnd": 85
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 12,
        "lineEnd": 12,
        "columnStart": 4,
        "columnEnd": 60
      }
    }
  ],
  "repairedDockerfile": "FROM rocker/r-devel-ubsan-clang\n\nENV UBSAN_OPTIONS print_stacktrace=1\nENV ASAN_OPTIONS alloc_dealloc_mismatch=0:detect_leaks=0:detect_odr_violation=0:malloc_context_size=10:fast_unwind_on_malloc=false\n\nRUN apt-get -qq update \\\n  && apt-get -qq remove r-base-core r-cran-* -y \\\n  && apt-get -qq dist-upgrade -y \\\n  && apt-get -qq --no-install-recommends install git pandoc pandoc-citeproc libssl-dev -y && rm -rf /var/lib/apt/lists/*;\n\nRUN apt-get -qq --no-install-recommends install libgmp-dev libmpfr-dev libxml2-dev -y && rm -rf /var/lib/apt/lists/*;\n\nRUN apt-get -qq --no-install-recommends install clang-6.0 -y && rm -rf /var/lib/apt/lists/*;\n\n## Build Rdevel with clang-6.0\n\n## Add symlink and check out R-devel\nRUN rm /usr/local/bin/llvm-symbolizer \\\n    && ln -s $(which llvm-symbolizer-6.0) /usr/local/bin/llvm-symbolizer \\\n\t&& cd /tmp \\\n\t&& svn co https://svn.r-project.org/R/trunk R-devel\n\n## Build and install according extending the standard 'recipe' I emailed/posted years ago\n## Leak detection does not work at build time, see https://github.com/google/sanitizers/issues/764 and the fact that we cannot add privileges during build (e.g. https://unix.stackexchange.com/q/329816/19205)\nRUN cd /tmp/R-devel \\\n\t&& R_PAPERSIZE=letter \\\n\t\t\t\tR_BATCHSAVE=\"--no-save --no-restore\" \\\n\t\t\t\tR_BROWSER=xdg-open \\\n\t\t\t\tPAGER=/usr/bin/pager \\\n\t\t\t\tPERL=/usr/bin/perl \\\n\t\t\t\tR_UNZIPCMD=/usr/bin/unzip \\\n\t\t\t\tR_ZIPCMD=/usr/bin/zip \\\n\t\t\t\tR_PRINTCMD=/usr/bin/lpr \\\n\t\t\t\tLIBnn=lib \\\n\t\t\t\tAWK=/usr/bin/awk \\\n\t\t\t\tCC=\"clang-6.0 -fsanitize=address,undefined -fno-sanitize=float-divide-by-zero -fno-omit-frame-pointer -fsanitize-address-use-after-scope\" \\\n\t\t\t\tCXX=\"clang++-6.0 -stdlib=libc++ -fsanitize=address,undefined -fno-sanitize=float-divide-by-zero -fno-omit-frame-pointer -fsanitize-address-use-after-scope\" \\\n\t\t\t\tCFLAGS=\"-g -O3 -Wall -pedantic -mtune=native\" \\\n\t\t\t\tFFLAGS=\"-g -O2 -mtune=native\" \\\n\t\t\t\tFCFLAGS=\"-g -O2 -mtune=native\" \\\n\t\t\t\tCXXFLAGS=\"-g -O3 -Wall -pedantic -mtune=native\" \\\n\t\t\t\tMAIN_LD=\"clang++-6.0 -stdlib=libc++ -fsanitize=undefined,address\" \\\n\t\t\t\tFC=\"gfortran\" \\\n\t\t\t\tF77=\"gfortran\" \\\n\t\t\t\tASAN_OPTIONS=detect_leaks=0 \\\n\t\t\t\t./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" \\\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\t\t\t\t--enable-R-shlib \\\n\t\t\t\t\t\t\t\t--without-blas \\\n\t\t\t\t\t\t\t\t--without-lapack \\\n\t\t\t\t\t\t\t\t--with-readline \\\n\t\t\t\t\t\t\t\t--without-recommended-packages \\\n\t\t\t\t\t\t\t\t--program-suffix=dev \\\n\t\t\t\t\t\t\t\t--disable-openmp \\\n\t&& ASAN_OPTIONS=detect_leaks=0 make \\\n\t&& ASAN_OPTIONS=detect_leaks=0 make install \\\n\t&& ASAN_OPTIONS=detect_leaks=0 make clean\n\n## Set default CRAN repo\nRUN echo 'options(download.file.method=\"wget\")' >> /usr/local/lib/R/etc/Rprofile.site\n\nRUN chmod -R a+rw /usr/local/lib/R/site-library\n\nENV HOME /home/user\nRUN useradd --create-home --home-dir $HOME user \\\n  && chown -R user:user $HOME\nWORKDIR $HOME\nUSER user\n\nRUN mkdir -p ~/.R \\\n  && echo 'PKG_CXXFLAGS= -I../inst/include -stdlib=libc++ -fno-omit-frame-pointer -g -Wno-ignored-attributes -Wno-deprecated-declarations -Wno-sign-compare' > ~/.R/Makevars \\\n  && echo 'CXX=clang++-6.0 -stdlib=libc++' >> ~/.R/Makevars \\\n  && echo 'CXX11=clang++-6.0 -stdlib=libc++' >> ~/.R/Makevars\n\nRUN RDscript -e 'install.packages(\"Rcpp\")'\n\nRUN RDscript -e 'install.packages(\"Matrix\")'\nRUN RDscript -e 'install.packages(\"igraph\")'\nRUN RDscript -e 'install.packages(\"expm\")'\nRUN RDscript -e 'install.packages(\"lattice\")'\n\nRUN RDscript -e 'install.packages(\"devtools\")'\n#RUN RDscript -e 'install.packages(\"RcppParallel\")'\nRUN RDscript -e 'install.packages(\"RcppEigen\")'\nRUN RDscript -e 'install.packages(\"microbenchmark\")'\nRUN RDscript -e 'install.packages(\"stringi\")'\nRUN RDscript -e 'install.packages(\"MASS\")'\nRUN RDscript -e 'install.packages(\"survival\")'\nRUN RDscript -e 'install.packages(\"nnet\")'\nRUN RDscript -e 'install.packages(\"gnm\")'\nRUN RDscript -e 'install.packages(\"testthat\")'\nRUN RDscript -e 'install.packages(\"ggplot2\")'\nRUN RDscript -e 'install.packages(\"ff\")'\nRUN RDscript -e 'install.packages(\"ffbase\")'\nRUN RDscript -e 'install.packages(\"roxygen2\")'\nRUN RDscript -e 'install.packages(\"Cyclops\", dependencies = TRUE)'\n\nRUN mkdir -p ~/.R \\\n  && echo 'PKG_CXXFLAGS= -I../inst/include -stdlib=libc++ -fno-omit-frame-pointer -g' > ~/.R/Makevars \\\n  && echo 'CXX11=clang++-6.0 -stdlib=libc++ -fsanitize=address,undefined -fno-sanitize=float-divide-by-zero -fno-omit-frame-pointer -fsanitize-address-use-after-scope' >> ~/.R/Makevars\n\n#RUN git clone https://github.com/OHDSI/Cyclops \\\n#  && RD CMD build Cyclops --no-build-vignettes\n\nENV UBSAN_OPTIONS print_stacktrace=1\nENV ASAN_OPTIONS alloc_dealloc_mismatch=0:detect_leaks=0:detect_odr_violation=0:malloc_context_size=10:fast_unwind_on_malloc=false\n\n# To build container: docker build -t cyclops-san-clang .\n# To execute check: docker run --cap-add SYS_PTRACE -v /Users/msuchard/Dropbox/Projects/Cyclops:/home/user/Cyclops --rm -it cyclops-san-clang /usr/bin/bash\n# $ RD CMD check Cyclops*.tar.gz\n\n"
}