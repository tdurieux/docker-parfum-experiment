{
  "startTime": 1674240421937,
  "endTime": 1674240422348,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 20,
        "lineEnd": 20,
        "columnStart": 4,
        "columnEnd": 65
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 22,
        "lineEnd": 22,
        "columnStart": 4,
        "columnEnd": 29
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 38,
        "lineEnd": 38,
        "columnStart": 4,
        "columnEnd": 22
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# Get the base image by running the included `mkimage-alpine.sh` script, or\n# get a fresh copy from github.com/docker/docker/contrib/.\nFROM alpine:3.5\n\n# Copy app source.\nCOPY . /tmp/build/\n\n# Sneak the stf executable into $PATH.\nENV PATH /app/bin:$PATH\n\n# Build the whole thing. Since Docker Hub doesn't really support other archs,\n# we'll run a full daily build by ourselves, so it doesn't necessary have to\n# be separated into multiple steps for speed.\n#\n# Node build taken from https://github.com/mhart/alpine-node and slightly adapted.\nRUN set -xo pipefail && \\\n    echo '--- Updating repositories' && \\\n    apk update && \\\n    echo '--- Building node' && \\\n    apk add curl make gcc g++ binutils-gold python linux-headers paxctl libgcc libstdc++ && \\\n    curl -f -sSL https://nodejs.org/dist/v6.11.2/node-v6.11.2.tar.gz | tar -xz && \\\n    cd /node-v* && \\\n    ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --prefix=/usr && \\\n    make -j$(grep -c ^processor /proc/cpuinfo 2>/dev/null || 1) && \\\n    make install && \\\n    paxctl -cm /usr/bin/node && \\\n    echo '--- Building app' && \\\n    addgroup -S stf && \\\n    adduser -S -G stf stf && \\\n    chown -R stf:stf /tmp/build && \\\n    cd /tmp/build && \\\n    export PATH=$PWD/node_modules/.bin:$PATH && \\\n    sed -i'' -e '/phantomjs/d' package.json && \\\n    apk add git zeromq-dev protobuf-dev graphicsmagick && \\\n    export JOBS=$(grep -c ^processor /proc/cpuinfo 2>/dev/null || 1) && \\\n    echo 'npm install --no-optional' | su stf -s /bin/sh && \\\n    echo '--- Assembling app' && \\\n    echo 'npm pack' | su stf -s /bin/sh && \\\n    tar -xzf stf-*.tgz && \\\n    mv package /app && \\\n    echo 'bower cache clean' | su stf -s /bin/sh && \\\n    echo 'npm prune --production' | su stf -s /bin/sh && \\\n    mv node_modules /app && \\\n    chown -R root:root /app && \\\n    echo '--- Cleaning up' && \\\n    echo 'npm cache clean' | su stf -s /bin/sh && \\\n    rm -rf /home/stf/.node-gyp && \\\n    apk del curl make gcc g++ binutils-gold python linux-headers paxctl && \\\n    rm -rf /node-v* \\\n      /usr/share/man /tmp/* /var/cache/apk/* /root/.npm /root/.node-gyp \\\n      /usr/lib/node_modules/npm/man /usr/lib/node_modules/npm/doc /usr/lib/node_modules/npm/html && rm stf-*.tgz\n\n# Work in app dir by default.\nWORKDIR /app\n\n# Export default app port, not enough for all processes but it should do\n# for now.\nEXPOSE 3000\n\n# Switch to weak user.\nUSER stf\n\n# Show help by default.\nCMD stf --help\n"
}