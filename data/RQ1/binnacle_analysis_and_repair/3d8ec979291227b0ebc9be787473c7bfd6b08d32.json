{
  "startTime": 1674250295171,
  "endTime": 1674250296374,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 232,
        "lineEnd": 232,
        "columnStart": 4,
        "columnEnd": 143
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 256,
        "lineEnd": 256,
        "columnStart": 4,
        "columnEnd": 174
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 275,
        "lineEnd": 275,
        "columnStart": 4,
        "columnEnd": 121
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 270,
        "lineEnd": 270,
        "columnStart": 4,
        "columnEnd": 36
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 271,
        "lineEnd": 271,
        "columnStart": 4,
        "columnEnd": 36
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 177,
        "lineEnd": 177,
        "columnStart": 4,
        "columnEnd": 68
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 275,
        "lineEnd": 275,
        "columnStart": 131,
        "columnEnd": 156
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 260,
        "lineEnd": 260,
        "columnStart": 4,
        "columnEnd": 37
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 266,
        "lineEnd": 266,
        "columnStart": 4,
        "columnEnd": 36
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 23,
        "lineEnd": 35,
        "columnStart": 4,
        "columnEnd": 73
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 260,
        "lineEnd": 260,
        "columnStart": 4,
        "columnEnd": 37
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 11,
        "lineEnd": 11,
        "columnStart": 4,
        "columnEnd": 88
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 23,
        "lineEnd": 35,
        "columnStart": 4,
        "columnEnd": 73
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 260,
        "lineEnd": 260,
        "columnStart": 4,
        "columnEnd": 37
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 266,
        "lineEnd": 266,
        "columnStart": 4,
        "columnEnd": 36
      }
    }
  ],
  "repairedSmells": [
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 23,
        "lineEnd": 35,
        "columnStart": 4,
        "columnEnd": 73
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 260,
        "lineEnd": 260,
        "columnStart": 4,
        "columnEnd": 61
      }
    }
  ],
  "repairedDockerfile": "FROM ubuntu:16.04\n\n# number of concurrent threads during build\n# usage: docker build --build-arg PARALLELISM=8 -t name/name .\nARG PARALLELISM=1\nARG CMAKE_BUILD_TYPE=Release\n\nENV IROHA_HOME /opt/iroha\nENV IROHA_BUILD /opt/iroha/build\n\nRUN apt-get update && \\\n    apt-get -y --no-install-recommends install apt-utils software-properties-common wget; rm -rf /var/lib/apt/lists/*; \\\n    apt-get -y clean\n\n# add repos\nRUN set -e; \\\n    add-apt-repository -y ppa:git-core/ppa; \\\n    add-apt-repository -y ppa:ubuntu-toolchain-r/test; \\\n    wget -O - https://apt.llvm.org/llvm-snapshot.gpg.key | apt-key add -; \\\n    echo 'deb http://apt.llvm.org/xenial/ llvm-toolchain-xenial-6.0 main' >> /etc/apt/sources.list; \\\n    apt-get update\n\nRUN set -e; \\\n    apt-get -y --no-install-recommends install python-software-properties \\\n        automake libtool \\\n        # compilers (gcc-5, gcc-7, clang-6)\n        build-essential clang-6.0 lldb-6.0 lld-6.0 g++-7 \\\n        # dev dependencies\n        libssl-dev zlib1g-dev libcurl4-openssl-dev libc6-dbg golang \\\n        # CI dependencies\n        git ssh tar gzip ca-certificates gnupg \\\n        # Pythons\n        python-pip python3-pip python3-setuptools python-dev \\\n        # other\n        curl file gdb gdbserver ccache \\\n        gcovr cppcheck doxygen rsync graphviz graphviz-dev unzip vim zip; rm -rf /var/lib/apt/lists/*; \\\n    apt-get -y clean\n\n# install cmake 3.11.4\nRUN set -e; \\\n    git clone https://gitlab.kitware.com/cmake/cmake.git /tmp/cmake; \\\n    (cd /tmp/cmake ; git checkout 316bd45439ad8ced6b31bcb10303a788038387ef); \\\n    (cd /tmp/cmake ; /tmp/cmake/bootstrap --system-curl --parallel=${PARALLELISM} --enable-ccache); \\\n    make -j${PARALLELISM} -C /tmp/cmake; \\\n    make -C /tmp/cmake install; \\\n    ldconfig; \\\n    rm -rf /tmp/cmake\n\n# install boost 1.65.1\nRUN set -e; \\\n    git clone https://github.com/boostorg/boost /tmp/boost; \\\n    (cd /tmp/boost ; git checkout 436ad1dfcfc7e0246141beddd11c8a4e9c10b146); \\\n    (cd /tmp/boost ; git submodule update --init --recursive); \\\n    (cd /tmp/boost ; /tmp/boost/bootstrap.sh --with-libraries=system,filesystem,thread); \\\n    (cd /tmp/boost ; /tmp/boost/b2 headers); \\\n    (cd /tmp/boost ; /tmp/boost/b2 cxxflags=\"-std=c++14\" -j ${PARALLELISM} install --prefix=/opt/dependencies/boost); \\\n    ldconfig; \\\n    rm -rf /tmp/boost\n\n# install protobuf v3.5.1\nRUN set -e; \\\n    git clone https://github.com/google/protobuf /tmp/protobuf; \\\n    (cd /tmp/protobuf ; git checkout 106ffc04be1abf3ff3399f54ccf149815b287dd9); \\\n    cmake \\\n        -DCMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE} \\\n        -Dprotobuf_BUILD_TESTS=OFF \\\n        -Dprotobuf_BUILD_SHARED_LIBS=ON \\\n        -H/tmp/protobuf/cmake \\\n        -B/tmp/protobuf/.build \\\n        -DCMAKE_INSTALL_PREFIX=/opt/dependencies/protobuf; \\\n    cmake --build /tmp/protobuf/.build --target install -- -j${PARALLELISM}; \\\n    ldconfig; \\\n    rm -rf /tmp/protobuf\n\n# install gflags\nRUN set -e; \\\n    git clone https://github.com/gflags/gflags /tmp/gflags; \\\n    (cd /tmp/gflags ; git checkout f8a0efe03aa69b3336d8e228b37d4ccb17324b88); \\\n    cmake \\\n        -DCMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE} \\\n        -H/tmp/gflags \\\n        -B/tmp/gflags/build \\\n        -DCMAKE_INSTALL_PREFIX=/opt/dependencies/gflags; \\\n    cmake --build /tmp/gflags/build --target install -- -j${PARALLELISM}; \\\n    ldconfig; \\\n    rm -rf /tmp/gflags\n\n# install c-ares\nRUN set -e; \\\n    git clone https://github.com/c-ares/c-ares /tmp/c-ares; \\\n    (cd /tmp/c-ares ; git checkout 3be1924221e1326df520f8498d704a5c4c8d0cce); \\\n    cmake \\\n        -DCMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE} \\\n        -H/tmp/c-ares \\\n        -B/tmp/c-ares/build \\\n        -DCMAKE_INSTALL_PREFIX=/opt/dependencies/c-ares; \\\n    cmake --build /tmp/c-ares/build --target install -- -j${PARALLELISM}; \\\n    ldconfig; \\\n    rm -rf /tmp/c-ares\n\n# install grpc 1.11.0\nRUN set -e; \\\n    export LD_LIBRARY_PATH=\"/opt/dependencies/protobuf/lib:$LD_LIBRARY_PATH\"; \\\n    git clone https://github.com/grpc/grpc /tmp/grpc; \\\n    (cd /tmp/grpc ; git checkout bd44e485f69d70ca4095cea92decd98de3892aa6); \\\n    cmake \\\n        -DCMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE} \\\n        -DgRPC_BENCHMARK_PROVIDER=\"\" \\\n        -DgRPC_ZLIB_PROVIDER=package \\\n        -DgRPC_CARES_PROVIDER=package \\\n        -DgRPC_SSL_PROVIDER=package \\\n        -DgRPC_PROTOBUF_PROVIDER=package \\\n        -DgRPC_GFLAGS_PROVIDER=package \\\n        -DBUILD_SHARED_LIBS=ON \\\n        -H/tmp/grpc \\\n        -B/tmp/grpc/.build \\\n        -DCMAKE_PREFIX_PATH=\"/opt/dependencies/c-ares;/opt/dependencies/protobuf\" \\\n        -DCMAKE_INSTALL_PREFIX=/opt/dependencies/grpc; \\\n    cmake --build /tmp/grpc/.build --target install -- -j${PARALLELISM}; \\\n    ldconfig; \\\n    rm -rf /tmp/grpc\n\n# install gtest\nRUN set -e; \\\n    git clone https://github.com/google/googletest /tmp/googletest; \\\n    (cd /tmp/googletest ; git checkout ec44c6c1675c25b9827aacd08c02433cccde7780); \\\n    cmake \\\n        -DCMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE} \\\n        -H/tmp/googletest \\\n        -B/tmp/googletest/build \\\n        -DCMAKE_INSTALL_PREFIX=/opt/dependencies/gtest; \\\n    cmake --build /tmp/googletest/build --target install -- -j${PARALLELISM}; \\\n    ldconfig; \\\n    rm -rf /tmp/googletest\n\n# install spdlog v0.16.3\nRUN set -e; \\\n    git clone https://github.com/gabime/spdlog /tmp/spdlog; \\\n    (cd /tmp/spdlog ; git checkout ccd675a286f457068ee8c823f8207f13c2325b26); \\\n    cmake \\\n        -DCMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE} \\\n        -DSPDLOG_BUILD_TESTING=OFF -H/tmp/spdlog -B/tmp/spdlog/build \\\n        -DCMAKE_INSTALL_PREFIX=/opt/dependencies/spdlog; \\\n    cmake --build /tmp/spdlog/build --target install; \\\n    rm -rf /tmp/spdlog\n\n# install rxcpp\nRUN set -e; \\\n    git clone https://github.com/Reactive-Extensions/RxCpp /tmp/RxCpp; \\\n    (cd /tmp/RxCpp ; git checkout f38fb8e3c30b01b07c57e08039b2942f1685224d); \\\n    cmake \\\n        -DCMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE} \\\n        -H/tmp/RxCpp \\\n        -B/tmp/RxCpp/build \\\n        -DCMAKE_INSTALL_PREFIX=/opt/dependencies/rxcpp; \\\n    cmake --build /tmp/RxCpp/build --target install; \\\n    rm -rf /tmp/RxCpp\n\n# install rapidjson\nRUN set -e; \\\n    git clone https://github.com/miloyip/rapidjson /tmp/rapidjson; \\\n    (cd /tmp/rapidjson ; git checkout f54b0e47a08782a6131cc3d60f94d038fa6e0a51); \\\n    cmake \\\n        -DCMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE} \\\n        -DRAPIDJSON_BUILD_EXAMPLES=OFF \\\n        -H/tmp/rapidjson \\\n        -B/tmp/rapidjson/build \\\n        -DCMAKE_INSTALL_PREFIX=/opt/dependencies/rapidjson; \\\n    cmake --build /tmp/rapidjson/build --target install; \\\n    ldconfig; \\\n    rm -rf /tmp/rapidjson\n\n# install libpq\nRUN set -e; \\\n    git clone --progress https://git.postgresql.org/git/postgresql.git /tmp/postgresql; \\\n    cd /tmp/postgresql; \\\n    git checkout 029386ccbddd0a33d481b94e511f5219b03e6636; \\\n    ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --without-readline --prefix=/opt/dependencies/libpq; \\\n    # build\n    make -j${PARALLELISM} -C src/bin/pg_config; \\\n    make -j${PARALLELISM} -C src/interfaces/libpq; \\\n    make -j${PARALLELISM} -C src/backend/utils fmgroids.h; \\\n    cp src/backend/utils/fmgroids.h src/include/utils/fmgroids.h; \\\n    # install\n    make -C src/bin/pg_config install; \\\n    make -C src/interfaces/libpq install; \\\n    make -C src/include install; \\\n    ldconfig; \\\n    # remove\n    rm -rf /tmp/postgresql\n\n# install soci\nRUN set -e; \\\n    git clone https://github.com/SOCI/soci /tmp/soci; \\\n    (cd /tmp/soci ; git checkout 349ce86b79e63b99ba95200bc4bd1d83791e9094); \\\n    cmake \\\n        -DCMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE} \\\n        -DSOCI_CXX_C11=ON \\\n        -DSOCI_TESTS=OFF \\\n        -DSOCI_EMPTY=OFF \\\n        -DWITH_BOOST=ON \\\n        -DWITH_DB2=OFF \\\n        -DWITH_FIREBIRD=OFF \\\n        -DWITH_MYSQL=OFF \\\n        -DWITH_ODBC=OFF \\\n        -DWITH_ORACLE=OFF \\\n        -DWITH_POSTGRESQL=ON \\\n        -DWITH_SQLITE3=OFF \\\n        -H/tmp/soci \\\n        -B/tmp/soci/build \\\n        -DCMAKE_PREFIX_PATH=\"/opt/dependencies/libpq\" \\\n        -DCMAKE_INSTALL_PREFIX=/opt/dependencies/soci; \\\n    cmake --build /tmp/soci/build --target install; \\\n    ldconfig; \\\n    rm -rf /tmp/soci\n\n# install tbb\nRUN set -e; \\\n    git clone https://github.com/01org/tbb /tmp/tbb; \\\n    (cd /tmp/tbb ; git checkout eb6336ad29450f2a64af5123ca1b9429ff6bc11d); \\\n    make -j${PARALLELISM} -C /tmp/tbb tbb_build_prefix=build; \\\n    mkdir /opt/dependencies/tbb /opt/dependencies/tbb/lib /opt/dependencies/tbb/include; \\\n    cp /tmp/tbb/build/build_debug/*.so* /opt/dependencies/tbb/lib; \\\n    cp /tmp/tbb/build/build_release/*.so* /opt/dependencies/tbb/lib; \\\n    cp -r /tmp/tbb/include/* /opt/dependencies/tbb/include; \\\n    ldconfig; \\\n    rm -rf /tmp/tbb\n\n# install sonar cli\nENV SONAR_CLI_VERSION=3.0.3.778\nRUN set -e; \\\n    mkdir -p /opt/sonar; \\\n    curl -f -L -o /tmp/sonar.zip https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-${SONAR_CLI_VERSION}-linux.zip; \\\n    unzip -o -d /tmp/sonar-scanner /tmp/sonar.zip; \\\n    mv /tmp/sonar-scanner/sonar-scanner-${SONAR_CLI_VERSION}-linux /opt/sonar/scanner; \\\n    ln -s -f /opt/sonar/scanner/bin/sonar-scanner /usr/local/bin/sonar-scanner; \\\n    rm -rf /tmp/sonar*\n\n# install ed25519\nRUN set -e; \\\n    git clone git://github.com/hyperledger/iroha-ed25519.git /tmp/ed25519; \\\n    (cd /tmp/ed25519 ; git checkout b61a1e77af5dc458ed6a5aee395d5b22775a4917); \\\n    cmake \\\n        -DCMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE} \\\n        -DTESTING=OFF \\\n        -DHASH=sha3_brainhub \\\n        -DEDIMPL=ref10 \\\n        -H/tmp/ed25519 \\\n        -B/tmp/ed25519/build \\\n        -DCMAKE_INSTALL_PREFIX=/opt/dependencies/ed25519; \\\n    cmake --build /tmp/ed25519/build --target install -- -j${PARALLELISM}; \\\n    ldconfig; \\\n    rm -rf /tmp/ed25519\n\n# fetch lcov reports converter\nRUN set -e; \\\n    curl -f -L -o /tmp/lcov_cobertura.py https://raw.githubusercontent.com/eriwen/lcov-to-cobertura-xml/8c55cd11f80a21e7e46f20f8c81fcde0bf11f5e5/lcov_cobertura/lcov_cobertura.py\n\n# OpenJRE 8\nRUN set -e; \\\n    apt-get -y --no-install-recommends install openjdk-8-jre; rm -rf /var/lib/apt/lists/*; \\\n    java -version\n\nRUN set -e; \\\n    add-apt-repository -y ppa:jonathonf/python-3.6; \\\n    apt-get update; \\\n    apt-get -y --no-install-recommends install python3.6-dev && rm -rf /var/lib/apt/lists/*;\n\n# python bindings dependencies\nRUN set -e; \\\n    pip install --no-cache-dir grpcio_tools pysha3; \\\n    pip3 install --no-cache-dir grpcio_tools pysha3\n\n# install lcov\nRUN set -e; \\\n    curl -f -L -o /tmp/lcov-1.13.tar.gz https://github.com/linux-test-project/lcov/releases/download/v1.13/lcov-1.13.tar.gz; cd /tmp; tar zxf lcov-1.13.tar.gz; rm lcov-1.13.tar.gz cd lcov-1.13; make install\n\n# non-interactive adduser\n#   -m = create home dir\n#   -s = set default shell\n#   iroha-dpnds-test = username\n#   -u = userid, default for Ubuntu is 1000\n#   -U = create a group same as username\n#   no password\nRUN useradd -ms /bin/bash iroha-dpnds-test -u 1000 -U\n\nWORKDIR /opt/iroha\nRUN set -e; \\\n    chmod -R 777 /opt/iroha; \\\n    mkdir -p /tmp/ccache -m 777; \\\n    ccache --clear\n\nUSER iroha-dpnds-test\nCMD [\"/bin/bash\"]\n"
}