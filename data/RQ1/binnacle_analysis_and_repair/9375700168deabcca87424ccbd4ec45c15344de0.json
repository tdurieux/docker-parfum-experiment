{
  "startTime": 1674239208316,
  "endTime": 1674239208638,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 106,
        "lineEnd": 106,
        "columnStart": 4,
        "columnEnd": 142
      }
    },
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 30,
        "lineEnd": 30,
        "columnStart": 6,
        "columnEnd": 39
      }
    },
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 119,
        "lineEnd": 119,
        "columnStart": 4,
        "columnEnd": 23
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 23,
        "lineEnd": 23,
        "columnStart": 4,
        "columnEnd": 56
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 6,
        "lineEnd": 6,
        "columnStart": 4,
        "columnEnd": 45
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 6,
        "lineEnd": 6,
        "columnStart": 4,
        "columnEnd": 45
      }
    }
  ],
  "repairedSmells": [
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 1,
        "lineEnd": 1,
        "columnStart": 22,
        "columnEnd": 87
      }
    }
  ],
  "repairedDockerfile": "FROM openjdk:8-jdk\nRUN apt-get update && apt-get install --no-install-recommends -y $BASE_APKS $BUILD_APKS \\\n      && rm -rf /var/lib/apt/lists/*ENV BASE_APKS=\"sudo openssl openssh-client zip ttf-dejavu maven ruby\" \\\n    BUILD_APKS=\" make gcc clang g++ paxctl binutils-gold autoconf bison\"\n\n\n\n\nENV NODE_PREFIX=/usr/local \\\n    NODE_VERSION=6.4.0 \\\n    NPM_VERSION=latest \\\n    NODE_SOURCE=/usr/src/node\n\nRUN [ \"${NODE_VERSION}\" == \"latest\" ] && { \\\n        DOWNLOAD_PATH=https://nodejs.org/dist/node-latest.tar.gz; \\\n    } || { \\\n        DOWNLOAD_PATH=https://nodejs.org/dist/v${NODE_VERSION}/node-v${NODE_VERSION}.tar.gz; \\\n    }; \\\n    mkdir -p $NODE_SOURCE && \\\n    wget -O - $DOWNLOAD_PATH -nv | tar -xz --strip-components=1 -C $NODE_SOURCE && \\\n    cd $NODE_SOURCE && \\\n    export GYP_DEFINES=\"linux_use_gold_flags=0\" && \\\n    ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --prefix=$NODE_PREFIX $NODE_CONFIG_FLAGS && \\\n    make -j$(grep -c ^processor /proc/cpuinfo 2>/dev/null || 1) && \\\n    make install;\n\nRUN paxctl -cm ${NODE_PREFIX}/bin/node && \\\n    cd / && \\\n    if [ -x /usr/bin/npm ]; then \\\n      npm install -g npm@${NPM_VERSION} && \\\n      find /usr/lib/node_modules/npm -name test -o -name .bin -type d | xargs rm -rf; npm cache clean --force; \\\n    fi && \\\n    rm -rf \\\n        ${NODE_SOURCE} \\\n        ${NODE_PREFIX}/include \\\n        ${NODE_PREFIX}/share/man \\\n        /tmp/* \\\n        /var/cache/apk/* \\\n        /root/.npm \\\n        /root/.node-gyp \\\n        /root/.gnupg \\\n        ${NODE_PREFIX}/lib/node_modules/npm/man \\\n        ${NODE_PREFIX}/lib/node_modules/npm/doc \\\n        ${NODE_PREFIX}/lib/node_modules/npm/html \\\n    && \\\n    mkdir -p /app && \\\n    exit 0 || exit 1;\n\nRUN echo \"jenkins ALL=NOPASSWD: ALL\" >> /etc/sudoers\n\nENV JENKINS_HOME /var/jenkins_home\nENV JENKINS_SLAVE_AGENT_PORT 50000\n\nARG user=jenkins\nARG group=jenkins\nARG uid=1000\nARG gid=1000\n\n# Jenkins is run with user `jenkins`, uid = 1000\n# If you bind mount a volume from the host or a data container,\n# ensure you use the same uid\nRUN groupadd -g ${gid} ${group} \\\n    && useradd -d \"$JENKINS_HOME\" -u ${uid} -g ${gid} -m -s /bin/bash ${user}\n\n# Jenkins home directory is a volume, so configuration and build history\n# can be persisted and survive image upgrades\nVOLUME /var/jenkins_home\n\n# `/usr/share/jenkins/ref/` contains all reference configuration we want\n# to set on a fresh new installation. Use it to bundle additional plugins\n# or config file with your custom jenkins Docker image.\nRUN mkdir -p /usr/share/jenkins/ref/init.groovy.d\n\nENV TINI_VERSION 0.9.0\nENV TINI_SHA fa23d1e20732501c3bb8eeeca423c89ac80ed452\n\n# Use tini as subreaper in Docker container to adopt zombie processes\nRUN curl -fsSL https://github.com/krallin/tini/releases/download/v${TINI_VERSION}/tini-static -o /bin/tini && chmod +x /bin/tini \\\n  && echo \"$TINI_SHA  /bin/tini\" | sha1sum -c -\n\nCOPY init.groovy /usr/share/jenkins/ref/init.groovy.d/tcp-slave-agent-port.groovy\n\n# jenkins version being bundled in this docker image\nARG JENKINS_VERSION\nENV JENKINS_VERSION ${JENKINS_VERSION:-2.28}\n\n# jenkins.war checksum, download will be validated using it\nARG JENKINS_SHA=183125ee4e731a559f39d146a7ffbca08c3e011f\n\n# Can be used to customize where jenkins.war get downloaded from\nARG JENKINS_URL=https://repo.jenkins-ci.org/public/org/jenkins-ci/main/jenkins-war/${JENKINS_VERSION}/jenkins-war-${JENKINS_VERSION}.war\n\n# could use ADD but this one does not check Last-Modified header neither does it allow to control checksum\n# see https://github.com/docker/docker/issues/8331\nRUN curl -fsSL ${JENKINS_URL} -o /usr/share/jenkins/jenkins.war \\\n  && echo \"${JENKINS_SHA}  /usr/share/jenkins/jenkins.war\" | sha1sum -c -\n\nENV JENKINS_UC https://updates.jenkins.io\nRUN chown -R ${user} \"$JENKINS_HOME\" /usr/share/jenkins/ref\nRUN chown -R ${user} /usr/local\n\nRUN sudo rm /usr/bin/java \\\n  &&  sudo ln -s /usr/lib/jvm/java-1.8.0-openjdk-amd64/bin/java /usr/bin/java\n\n# Install docker-compose\nRUN curl -f -L \"https://github.com/docker/compose/releases/download/1.8.1/docker-compose-$(uname -s)-$(uname -m)\" > /usr/local/bin/docker-compose \\\n  && chmod +x /usr/local/bin/docker-compose\n\n# for main web interface:\nEXPOSE 8080\n\n# will be used by attached slave agents:\nEXPOSE 50000\n\nENV COPY_REFERENCE_FILE_LOG $JENKINS_HOME/copy_reference_file.log\n\nUSER ${user}\n\nRUN npm install -g yarn \\\n  && yarn global add gulp grunt node-sass bower && npm cache clean --force;\n\nCOPY jenkins-support /usr/local/bin/jenkins-support\nCOPY jenkins.sh /usr/local/bin/jenkins.sh\n\nENTRYPOINT [\"/bin/tini\", \"--\", \"/usr/local/bin/jenkins.sh\"]\n\n# from a derived Dockerfile, can use `RUN plugins.sh active.txt` to setup /usr/share/jenkins/ref/plugins from a support bundle\nCOPY plugins.sh /usr/local/bin/plugins.sh\nCOPY install-plugins.sh /usr/local/bin/install-plugins.sh\n"
}