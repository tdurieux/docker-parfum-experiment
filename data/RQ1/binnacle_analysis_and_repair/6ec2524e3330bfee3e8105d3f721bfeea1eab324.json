{
  "startTime": 1674236070156,
  "endTime": 1674236070488,
  "originalSmells": [
    {
      "rule": "mkdirUsrSrcThenRemove",
      "position": {
        "lineStart": 54,
        "lineEnd": 54,
        "columnStart": 1,
        "columnEnd": 19
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 78,
        "lineEnd": 96,
        "columnStart": 4,
        "columnEnd": 27
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "#\n# NOTE: THIS DOCKERFILE IS GENERATED VIA \"update.sh\"\n#\n# PLEASE DO NOT EDIT IT DIRECTLY.\n#\n\nFROM alpine:3.4\n\n# persistent / runtime deps\nENV PHPIZE_DEPS \\\n\t\tautoconf \\\n\t\tfile \\\n\t\tg++ \\\n\t\tgcc \\\n\t\tlibc-dev \\\n\t\tmake \\\n\t\tpkgconf \\\n\t\tre2c\nRUN apk add --no-cache --virtual .persistent-deps \\\n\t\tca-certificates \\\n\t\tcurl \\\n\t\ttar \\\n\t\tapache2 \\\n\t\tgettext \\\n\t\tbash \\\n\t\txz\n\nENV PHP_INI_DIR /usr/local/etc/php\nRUN mkdir -p $PHP_INI_DIR/conf.d\n\n##<autogenerated>##\n##</autogenerated>##\n\n# Apply stack smash protection to functions using local buffers and alloca()\n# Make PHP's main executable position-independent (improves ASLR security mechanism, and has no performance impact on x86_64)\n# Enable optimization (-O2)\n# Enable linker optimization (this sorts the hash buckets to improve cache locality, and is non-default)\n# Adds GNU HASH segments to generated executables (this is used if present, and is much faster than sysv hash; in this configuration, sysv hash is also generated)\n# https://github.com/docker-library/php/issues/272\nENV PHP_CFLAGS=\"-fstack-protector-strong -fpic -fpie -O2\"\nENV PHP_CPPFLAGS=\"$PHP_CFLAGS\"\nENV PHP_LDFLAGS=\"-Wl,-O1 -Wl,--hash-style=both -pie\"\nENV PHP_EXTRA_CONFIGURE_ARGS --with-apxs2\n\nENV PHP_VERSION 5.3.29\nENV PHP_URL=\"https://secure.php.net/get/php-${PHP_VERSION}.tar.xz/from/this/mirror\" PHP_ASC_URL=\"https://secure.php.net/get/php-${PHP_VERSION}.tar.xz.asc/from/this/mirror\"\n\nRUN set -xe; \\\n\n\tapk add --no-cache --virtual .fetch-deps \\\n\t\tgnupg \\\n\t\topenssl \\\n\t; \\\n\n\tmkdir -p /usr/src; rm -rf /usr/src \\\n\tcd /usr/src; \\\n\n\twget -O php.tar.xz \"$PHP_URL\"; \\\n\n\tapk del .fetch-deps\n\nCOPY docker-php-source /usr/local/bin/\n\nRUN set -xe \\\n\t&& apk add --no-cache --virtual .build-deps \\\n\t\t$PHPIZE_DEPS \\\n\t\tcurl-dev \\\n\t\tlibedit-dev \\\n\t\tlibxml2-dev \\\n\t\topenssl-dev \\\n\t\tsqlite-dev \\\n\t\tapache2-dev \\\n\t\\\n\t&& export CFLAGS=\"$PHP_CFLAGS\" \\\n\t\tCPPFLAGS=\"$PHP_CPPFLAGS\" \\\n\t\tLDFLAGS=\"$PHP_LDFLAGS\" \\\n\t&& docker-php-source extract \\\n\t&& cd /usr/src/php \\\n\t&& ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" \\\n\t\t--with-config-file-path=\"$PHP_INI_DIR\" \\\n\t\t--with-config-file-scan-dir=\"$PHP_INI_DIR/conf.d\" \\\n\n\t\t--disable-cgi \\\n\n# --enable-ftp is included here because ftp_ssl_connect() needs ftp to be compiled statically (see https://github.com/docker-library/php/issues/236)\n\t\t--enable-ftp \\\n# --enable-mbstring is included here because otherwise there's no way to get pecl to use it properly (see https://github.com/docker-library/php/issues/195)\n\t\t--enable-mbstring \\\n# --enable-mysqlnd is included here because it's harder to compile after the fact than extensions are (since it's a plugin for several extensions, not an extension in itself)\n\t\t--enable-mysqlnd \\\n\n\t\t--with-curl \\\n\t\t--with-libedit \\\n\t\t--with-openssl \\\n\t\t--with-zlib \\\n\t\t\\\n\t\t$PHP_EXTRA_CONFIGURE_ARGS \\\n\t&& make -j \"$(getconf _NPROCESSORS_ONLN)\" \\\n\t&& make install \\\n\t&& { find /usr/local/bin /usr/local/sbin -type f -perm +0111 -exec strip --strip-all '{}' + || true; } \\\n\t&& make clean \\\n\t&& docker-php-source delete \\\n\n\t&& runDeps=\"$( \\\n\t\tscanelf --needed --nobanner --recursive /usr/local \\\n\t\t\t| awk '{ gsub(/,/, \"\\nso:\", $2); print \"so:\" $2 }' \\\n\t\t\t| sort -u \\\n\t\t\t| xargs -r apk info --installed \\\n\t\t\t| sort -u \\\n\t)\" \\\n\t&& apk add --no-cache --virtual .php-rundeps $runDeps \\\n\n\t&& apk del .build-deps\n\nENV APACHE_CONFDIR /etc/apache2\nENV APACHE_ENVVARS $APACHE_CONFDIR/envvars\n\nCOPY envvars $APACHE_ENVVARS\n\nRUN set -ex \\\n\t\\\n# generically convert lines like\n#   export APACHE_RUN_USER=apache\n# into\n#   : ${APACHE_RUN_USER:=apache}\n#   export APACHE_RUN_USER\n# so that they can be overridden at runtime (\"-e APACHE_RUN_USER=...\")\n\t&& sed -ri 's/^export ([^=]+)=(.*)$/: ${\\1:=\\2}\\nexport \\1/' \"$APACHE_ENVVARS\" \\\n\t\\\n# setup directories and permissions\n\t&& . \"$APACHE_ENVVARS\" \\\n\t&& for dir in \\\n\t\t\"$APACHE_LOCK_DIR\" \\\n\t\t\"$APACHE_RUN_DIR\" \\\n\t\t\"$APACHE_LOG_DIR\" \\\n\t\t/var/www/html \\\n\t; do \\\n\t\trm -rvf \"$dir\" \\\n\t\t&& mkdir -p \"$dir\" \\\n\t\t&& chown -R \"$APACHE_RUN_USER:$APACHE_RUN_GROUP\" \"$dir\"; \\\n\tdone \\\n\t&& rm -fr /var/www/localhost\n\n# logs should go to stdout / stderr\nRUN set -ex \\\n\t&& . \"$APACHE_ENVVARS\" \\\n\t&& ln -sfT /dev/stderr \"$APACHE_LOG_DIR/error.log\" \\\n\t&& ln -sfT /dev/stdout \"$APACHE_LOG_DIR/access.log\" \\\n\t&& ln -sfT /dev/stdout \"$APACHE_LOG_DIR/other_vhosts_access.log\"\n\n# PHP files should be handled by PHP, and should be preferred over any other file type\nRUN { \\\n\t\techo -e '<FilesMatch \\.php$>'; \\\n\t\techo -e '\\tSetHandler application/x-httpd-php'; \\\n\t\techo -e '</FilesMatch>'; \\\n\t\techo; \\\n\t\techo -e 'DirectoryIndex disabled'; \\\n\t\techo -e 'DirectoryIndex index.php index.html'; \\\n\t\techo;  \\\n\t\techo -e '<Directory /var/www/>'; \\\n\t\techo -e '\\tOptions -Indexes'; \\\n\t\techo -e '\\tAllowOverride All'; \\\n\t\techo -e '</Directory>'; \\\n\t} | tee \"$APACHE_CONFDIR/conf.d/php.conf\"\n\n# Fix DocumentRoot and PHP module loading\nRUN sed -i 's@^DocumentRoot \"/var/www/localhost/htdocs\"@DocumentRoot \"/var/www/html\"@' /etc/apache2/httpd.conf \\\n\t&& sed -i 's@<Directory \"/var/www/localhost/htdocs\">@<Directory \"/var/www/html\">@' /etc/apache2/httpd.conf \\\n\t&& sed -i 's@LoadModule php5_module        lib/apache2/libphp5.so@LoadModule php5_module        modules/libphp5.so@'  /etc/apache2/httpd.conf\n\nCOPY docker-php-ext-* docker-php-entrypoint /usr/local/bin/\n\nENTRYPOINT [\"docker-php-entrypoint\"]\nCOPY apache2-foreground /usr/local/bin/\nCOPY httpd.conf /usr/local/etc/httpd.conf.tpl\n\nWORKDIR /var/www/html\n\nEXPOSE 80\nCMD [\"apache2-foreground\"]\n"
}