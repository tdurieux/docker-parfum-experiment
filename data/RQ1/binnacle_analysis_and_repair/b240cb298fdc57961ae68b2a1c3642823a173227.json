{
  "startTime": 1674234557292,
  "endTime": 1674234557753,
  "originalSmells": [
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 45,
        "lineEnd": 65,
        "columnStart": 5,
        "columnEnd": 34
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# Â© Copyright IBM Corporation 2017, 2019.\n# LICENSE: Apache License, Version 2.0 (http://www.apache.org/licenses/LICENSE-2.0)\n\n########## Dockerfile for Apache Mesos version 1.8.0 #########\n#\n# This Dockerfile builds a basic installation of Apache Mesos.\n#\n# Apache Mesos is a cluster manager that provides efficient resource isolation and sharing across distributed applications, or frameworks.\n# It can run Hadoop, Jenkins, Spark, Aurora, and other frameworks on a dynamically shared pool of nodes\n#\n# To build this image, from the directory containing this Dockerfile\n# (assuming that the file is named Dockerfile):\n# docker build -t <image_name> .\n#\n# To simply run the resultant image, and provide a bash shell:\n# docker run --name <container-name> -it <image_name> /bin/bash\n#\n# Start Master of Apache Mesos using below command :\n# docker run --name <container_name> -d -p <host-port>:5050 <image-name> mesos-master.sh --ip=<ip-address> --work_dir=/var/lib/mesos --log_dir=/var/log/mesos\n# e.g. docker run --name mesos -d -p 5055:5050 mesos:1.8.0 mesos-master.sh --ip=0.0.0.0 --work_dir=/var/lib/mesos --log_dir=/var/log/mesos\n#\n# Start Agent of Apache Mesos using below command :\n# docker run --name <container_name> -d <image-name> mesos-agent.sh --master=<ip address of master>:<port of master> --work_dir=/var/lib/mesos --log_dir=/var/log/mesos --launcher=posix\n#\n# Official website: http://mesos.apache.org/\n#\n###################################################################################\n\n# Base Image\nFROM s390x/ubuntu:16.04\n\n# The author\nLABEL maintainer=\"LoZ Open Source Ecosystem (https://www.ibm.com/developerworks/community/groups/community/lozopensource)\"\n\nENV SOURCE_DIR='/root'\nENV JAVA_HOME=/usr/lib/jvm/java-1.8.0-openjdk-s390x\nENV MESOS_HOME=/opt/mesos\nENV PATH=$PATH:$JAVA_HOME/bin:$MESOS_HOME/bin\nENV MESOS_work_dir=/var/lib/mesos\nENV MESOS_log_dir=/var/log/mesos\nENV MESOS_SYSTEMD_ENABLE_SUPPORT false\nWORKDIR $SOURCE_DIR\n\n# Install dependencies\nRUN apt-get update \\\n  && apt-get install --no-install-recommends -y \\\n                        autoconf \\\n                        automake \\\n                        build-essential \\\n                        bzip2 \\\n                        git \\\n                        g++ \\\n                        libapr1-dev \\\n                        libcurl4-nss-dev \\\n                        libsasl2-dev \\\n                        libsasl2-modules \\\n                        libssl-dev \\\n                        libsvn-dev \\\n                        libtool \\\n                        maven \\\n                        openjdk-8-jdk \\\n                        python \\\n                        python-dev \\\n                        tar \\\n                        wget \\\n                        zlib1g-dev \\\n\n# Download and build source code of Apache Mesos\n  && cd $SOURCE_DIR \\\n  && git clone https://github.com/apache/mesos \\\n  && cd $SOURCE_DIR/mesos/ \\\n  && git checkout 1.8.0 \\\n\n# Bundling gRPC-1.11.0\n  && cd 3rdparty/ \\\n  && git clone -b v1.11.0 https://github.com/grpc/grpc.git grpc-1.11.0 \\\n  && cd grpc-1.11.0/ \\\n  && git submodule update --init third_party/cares \\\n  && cd ../ \\\n  && tar zcvf grpc-1.11.0.tar.gz --exclude .git grpc-1.11.0 \\\n  && rm -rf grpc-1.11.0 \\\n\n  && cd $SOURCE_DIR/mesos/ \\\n  && sed -i '87i \\          \\<maxmemory>512m</maxmemory>' src/java/mesos.pom.in \\\n\n# Add patch for updated gRPC version\n  && sed -i -e 's/1.10.0/1.11.0/g' 3rdparty/versions.am \\\n  && sed -i -e 's/1.10.0/1.11.0/g' src/python/native_common/ext_modules.py.in \\\n\n# Add patch for protobuf\n  && echo \"diff --git a/src/google/protobuf/stubs/atomicops_internals_generic_gcc.h b/src/google/protobuf/stubs/atomicops_internals_generic_gcc.h\" >> 3rdparty/protobuf-3.5.0.patch \\\n  && echo \"index 0b0b06c..075c406 100644\" >> 3rdparty/protobuf-3.5.0.patch \\\n  && echo \"--- a/src/google/protobuf/stubs/atomicops_internals_generic_gcc.h\" >> 3rdparty/protobuf-3.5.0.patch \\\n  && echo \"+++ b/src/google/protobuf/stubs/atomicops_internals_generic_gcc.h\" >> 3rdparty/protobuf-3.5.0.patch \\\n  && echo \"@@ -146,6 +146,14 @@ inline Atomic64 NoBarrier_Load(volatile const Atomic64* ptr) {\" >> 3rdparty/protobuf-3.5.0.patch \\\n  && echo \"   return __atomic_load_n(ptr, __ATOMIC_RELAXED);\" >> 3rdparty/protobuf-3.5.0.patch \\\n  && echo \" }\" >> 3rdparty/protobuf-3.5.0.patch \\\n  && echo >> 3rdparty/protobuf-3.5.0.patch \\\n  && echo \"+inline Atomic64 Release_CompareAndSwap(volatile Atomic64* ptr,\" >> 3rdparty/protobuf-3.5.0.patch \\\n  && echo \"+                                       Atomic64 old_value,\" >> 3rdparty/protobuf-3.5.0.patch \\\n  && echo \"+                                       Atomic64 new_value) {\" >> 3rdparty/protobuf-3.5.0.patch \\\n  && echo \"+  __atomic_compare_exchange_n(ptr, &old_value, new_value, false,\" >> 3rdparty/protobuf-3.5.0.patch \\\n  && echo \"+                              __ATOMIC_RELEASE, __ATOMIC_ACQUIRE);\" >> 3rdparty/protobuf-3.5.0.patch \\\n  && echo \"+  return old_value;\" >> 3rdparty/protobuf-3.5.0.patch \\\n  && echo \"+}\" >> 3rdparty/protobuf-3.5.0.patch \\\n  && echo \"+\" >> 3rdparty/protobuf-3.5.0.patch \\\n  && echo \" #endif // defined(__LP64__)\" >> 3rdparty/protobuf-3.5.0.patch \\\n  && echo >> 3rdparty/protobuf-3.5.0.patch \\\n  && echo \" }  // namespace internal\" >> 3rdparty/protobuf-3.5.0.patch \\\n\n  && ./bootstrap \\\n  && mkdir build && cd build \\\n  && ../configure && make && make install \\\n\n# Edit the Files\n  && mkdir -p /opt/mesos/src \\\n  && mkdir -p /opt/mesos/src/.libs \\\n  && mkdir -p /opt/mesos/3rdparty \\\n\n  && cp -a $SOURCE_DIR/mesos/build/bin /opt/mesos \\\n  && cp -a $SOURCE_DIR/mesos/build/src/master /opt/mesos/src \\\n  && cp -a $SOURCE_DIR/mesos/build/src/slave /opt/mesos/src \\\n  && cp $SOURCE_DIR/mesos/build/src/.libs/* /opt/mesos/src/.libs/ \\\n  && cp -r $SOURCE_DIR/mesos/build/3rdparty/* /opt/mesos/3rdparty/ \\\n  && cp -a $SOURCE_DIR/mesos/src/webui /opt/mesos/src \\\n  && find $SOURCE_DIR/mesos/build/src/ -maxdepth 1 -type f -exec cp {} /opt/mesos/src \\; \\\n\n  && sed -i \"22s/.*/. \\/opt\\/mesos\\/bin\\/mesos-master-flags.sh/\" /opt/mesos/bin/mesos-master.sh \\\n  && sed -i \"24s/.*/exec \\/opt\\/mesos\\/src\\/mesos-master \\\"\\$\\{\\@\\}\\\"/\" /opt/mesos/bin/mesos-master.sh \\\n  && sed -i \"s/\\/root\\/mesos\\/build\\/src/\\/opt\\/mesos\\/src/g\" /opt/mesos/src/mesos-master \\\n\n  && sed -i \"22s/.*/. \\/opt\\/mesos\\/bin\\/mesos-agent-flags.sh/\" /opt/mesos/bin/mesos-agent.sh \\\n  && sed -i \"24s/.*/exec \\/opt\\/mesos\\/src\\/mesos-agent \\\"\\$\\{\\@\\}\\\"/\" /opt/mesos/bin/mesos-agent.sh \\\n  && sed -i \"s/\\/root\\/mesos\\/build\\/src/\\/opt\\/mesos\\/src/g\" /opt/mesos/src/mesos-agent \\\n\n  && sed -i \"s|/root/mesos/build/../src/webui|/opt/mesos/src/webui|\" /opt/mesos/bin/mesos-master-flags.sh \\\n  && sed -i \"s|/root/mesos/build/src|/opt/mesos/src|\" /opt/mesos/bin/mesos-agent-flags.sh \\\n\n  && sed -i \"23s|/root/mesos/build/../src/cli|/opt/mesos/src/cli|\" /opt/mesos/bin/mesos.sh \\\n  && sed -i \"26s|/root/mesos/build/src|/opt/mesos/src|\" /opt/mesos/bin/mesos.sh \\\n  && sed -i \"30s|/root/mesos/build/src/mesos|/opt/mesos/src/mesos|\" /opt/mesos/bin/mesos.sh \\\n\n# Clean up the unwanted packages and clear the source directory\n  && apt-get remove -y \\\n                        autoconf \\\n                        automake \\\n                        build-essential \\\n                        bzip2 \\\n                        git \\\n                        libtool \\\n                        maven \\\n                        python \\\n                        python-dev \\\n                        wget \\\n\n  && apt-get autoremove -y \\\n  && apt autoremove -y \\\n  && apt-get clean \\\n  && rm -rf $SOURCE_DIR/mesos /var/lib/apt/lists/* /root/.m2\n\n# Define mount point for important info like replicated logs of mesos\nVOLUME [\"/var/lib/mesos\", \"/var/log/mesos\"]\n\n# Port for Apache Mesos\nEXPOSE 5050\n\n# Set Entrypoint\nCMD mesos\n\n# End of Dockerfile\n"
}