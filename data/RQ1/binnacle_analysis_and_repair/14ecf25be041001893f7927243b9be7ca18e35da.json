{
  "startTime": 1674241220901,
  "endTime": 1674241221173,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 24,
        "lineEnd": 24,
        "columnStart": 4,
        "columnEnd": 130
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 30,
        "lineEnd": 30,
        "columnStart": 4,
        "columnEnd": 101
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 34,
        "lineEnd": 34,
        "columnStart": 4,
        "columnEnd": 90
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 48,
        "lineEnd": 48,
        "columnStart": 4,
        "columnEnd": 141
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 49,
        "lineEnd": 49,
        "columnStart": 4,
        "columnEnd": 141
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 50,
        "lineEnd": 50,
        "columnStart": 4,
        "columnEnd": 157
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 25,
        "lineEnd": 25,
        "columnStart": 4,
        "columnEnd": 37
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 31,
        "lineEnd": 31,
        "columnStart": 55,
        "columnEnd": 66
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 35,
        "lineEnd": 36,
        "columnStart": 58,
        "columnEnd": 124
      }
    },
    {
      "rule": "yumInstallRmVarCacheYum",
      "position": {
        "lineStart": 16,
        "lineEnd": 16,
        "columnStart": 4,
        "columnEnd": 33
      }
    },
    {
      "rule": "yumInstallRmVarCacheYum",
      "position": {
        "lineStart": 18,
        "lineEnd": 21,
        "columnStart": 4,
        "columnEnd": 60
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM lambci/lambda-base:build\n\nARG LEPTONICA_VERSION=1.78.0\nARG TESSERACT_VERSION=4.1.0-rc4\nARG AUTOCONF_ARCHIVE_VERSION=2017.09.28\nARG TMP_BUILD=/tmp\nARG TESSERACT=/opt/tesseract\nARG LEPTONICA=/opt/leptonica\nARG DIST=/opt/build-dist\n# change OCR_LANG to enable the layer for different languages\nARG OCR_LANG=deu\n# change TESSERACT_DATA_SUFFIX to use different datafiles (options: \"_best\", \"_fast\" and \"\")\nARG TESSERACT_DATA_SUFFIX=_fast\nARG TESSERACT_DATA_VERSION=4.0.0\n\nRUN yum makecache fast; yum clean all && yum -y update && yum -y upgrade; yum clean all && \\\n    yum install -y yum-plugin-ovl; rm -rf /var/cache/yum yum clean all && yum -y groupinstall \"Development Tools\"; yum clean all\n\nRUN yum -y install gcc gcc-c++ make autoconf aclocal automake libtool \\\n    libjpeg-devel libpng-devel libtiff-devel zlib-devel \\\n    libzip-devel freetype-devel lcms2-devel libwebp-devel \\\n    libicu-devel tcl-devel tk-devel pango-devel cairo-devel; rm -rf /var/cache/yum yum clean all\n\nWORKDIR ${TMP_BUILD}/leptonica-build\nRUN curl -f -L https://github.com/DanBloomberg/leptonica/releases/download/${LEPTONICA_VERSION}/leptonica-${LEPTONICA_VERSION}.tar.gz | tar xz && cd ${TMP_BUILD}/leptonica-build/leptonica-${LEPTONICA_VERSION} && \\\n    ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --prefix=${LEPTONICA} && make && make install && cp -r ./src/.libs /opt/liblept\n\nRUN echo \"/opt/leptonica/lib\" > /etc/ld.so.conf.d/leptonica.conf && ldconfig\n\nWORKDIR ${TMP_BUILD}/autoconf-build\nRUN curl -f https://ftp.gnu.org/gnu/autoconf-archive/autoconf-archive-${AUTOCONF_ARCHIVE_VERSION}.tar.xz | tar xJ && \\\n    cd autoconf-archive-${AUTOCONF_ARCHIVE_VERSION} && ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" && make && make install && cp ./m4/* /usr/share/aclocal/\n\nWORKDIR ${TMP_BUILD}/tesseract-build\nRUN curl -f -L https://github.com/tesseract-ocr/tesseract/archive/${TESSERACT_VERSION}.tar.gz | tar xz && \\\n    cd tesseract-${TESSERACT_VERSION} && ./autogen.sh && PKG_CONFIG_PATH=/opt/leptonica/lib/pkgconfig LIBLEPT_HEADERSDIR=/opt/leptonica/include \\\n    ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" \\\n    --prefix=${TESSERACT} --with-extra-includes=/opt/leptonica/include --with-extra-libraries=/opt/leptonica/lib && make && make install\n\nWORKDIR /opt\nRUN mkdir -p ${DIST}/lib && mkdir -p ${DIST}/bin && \\\n    cp ${TESSERACT}/bin/tesseract ${DIST}/bin/ && \\\n    cp ${TESSERACT}/lib/libtesseract.so.4  ${DIST}/lib/ && \\\n    cp ${LEPTONICA}/lib/liblept.so.5 ${DIST}/lib/liblept.so.5 && \\\n    cp /usr/lib64/libwebp.so.4 ${DIST}/lib/ && \\\n    echo -e \"LEPTONICA_VERSION=${LEPTONICA_VERSION}\\nTESSERACT_VERSION=${TESSERACT_VERSION}\\nTESSERACT_DATA_FILES=tessdata${TESSERACT_DATA_SUFFIX}/${TESSERACT_DATA_VERSION}\" > ${DIST}/TESSERACT-README.md && \\\n    find ${DIST}/lib -name '*.so*' | xargs strip -s\n\nWORKDIR ${DIST}/tesseract/share/tessdata\nRUN curl -f -L https://github.com/tesseract-ocr/tessdata${TESSERACT_DATA_SUFFIX}/raw/${TESSERACT_DATA_VERSION}/osd.traineddata > osd.traineddata && \\\n    curl -f -L https://github.com/tesseract-ocr/tessdata${TESSERACT_DATA_SUFFIX}/raw/${TESSERACT_DATA_VERSION}/eng.traineddata > eng.traineddata && \\\n    curl -f -L https://github.com/tesseract-ocr/tessdata${TESSERACT_DATA_SUFFIX}/raw/${TESSERACT_DATA_VERSION}/${OCR_LANG}.traineddata > ${OCR_LANG}.traineddata\n\nWORKDIR /var/task\n"
}