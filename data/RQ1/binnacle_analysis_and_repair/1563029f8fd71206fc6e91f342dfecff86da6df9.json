{
  "startTime": 1674242426715,
  "endTime": 1674242427200,
  "originalSmells": [
    {
      "rule": "wgetUseHttpsUrl",
      "position": {
        "lineStart": 44,
        "lineEnd": 44,
        "columnStart": 4,
        "columnEnd": 89
      }
    },
    {
      "rule": "wgetUseHttpsUrl",
      "position": {
        "lineStart": 65,
        "lineEnd": 65,
        "columnStart": 4,
        "columnEnd": 97
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 68,
        "lineEnd": 68,
        "columnStart": 4,
        "columnEnd": 43
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 15,
        "lineEnd": 19,
        "columnStart": 4,
        "columnEnd": 11
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 22,
        "lineEnd": 23,
        "columnStart": 4,
        "columnEnd": 46
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 29,
        "lineEnd": 30,
        "columnStart": 4,
        "columnEnd": 36
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 15,
        "lineEnd": 19,
        "columnStart": 4,
        "columnEnd": 11
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 22,
        "lineEnd": 23,
        "columnStart": 4,
        "columnEnd": 46
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 29,
        "lineEnd": 30,
        "columnStart": 4,
        "columnEnd": 36
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 15,
        "lineEnd": 19,
        "columnStart": 4,
        "columnEnd": 11
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 22,
        "lineEnd": 23,
        "columnStart": 4,
        "columnEnd": 46
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 29,
        "lineEnd": 30,
        "columnStart": 4,
        "columnEnd": 36
      }
    }
  ],
  "repairedSmells": [
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 15,
        "lineEnd": 19,
        "columnStart": 4,
        "columnEnd": 11
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 22,
        "lineEnd": 23,
        "columnStart": 4,
        "columnEnd": 46
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 29,
        "lineEnd": 30,
        "columnStart": 4,
        "columnEnd": 36
      }
    }
  ],
  "repairedDockerfile": "#\n# Container for ROS+OpenCog\n#\n# To build:\n# sudo docker build -t opencog/ros-indigo-opencog .\n#\nFROM opencog/ros-indigo-base\nMAINTAINER Linas VepÅ¡tas \"linasvepstas@gmail.com\"\n\n# Install required packages\nENV LAST_OS_UPDATE 2016-02-18\nRUN apt-get -y update\nRUN apt-get -y upgrade\n# Base stuff for cogutil. All on one line, to avoid error\n# `Cannot create container with more than 127 parents`\nRUN apt-get -y --no-install-recommends install gcc g++ cmake binutils-dev libiberty-dev \\\n    libboost-dev libboost-date-time-dev libboost-filesystem-dev \\\n    libboost-program-options-dev libboost-regex-dev \\\n    libboost-serialization-dev libboost-system-dev libboost-thread-dev \\\n    cxxtest && rm -rf /var/lib/apt/lists/*;\n\n# Additional stuff needed to build and run relex.\nRUN apt-get -y --no-install-recommends install wordnet-dev wordnet-sense-index openjdk-7-jdk \\\n    ant libcommons-logging-java libgetopt-java && rm -rf /var/lib/apt/lists/*;\n\n# Additional stuff for the AtomSpace: cython and guile and ODBC.\n# Additional stuff for OpenCog. We need telnet as a debug utility.\n# Need wget to download link-grammar source.\n# Need unzip to unzip JWNL.\nRUN apt-get -y --no-install-recommends install guile-2.0-dev cython unixodbc-dev odbc-postgresql \\\n    wget telnet locales rlwrap unzip && rm -rf /var/lib/apt/lists/*;\n\n# -------------------------------------------------------------\n# Right now, just clone the OpenCog sources. They will be built\n# later on.\nWORKDIR /opencog\nRUN git clone https://github.com/opencog/cogutil.git\nRUN git clone https://github.com/opencog/atomspace.git\nRUN git clone https://github.com/opencog/opencog.git\nRUN git clone https://github.com/opencog/relex.git\n\n# -------------------------------------------------------------\n# Download and install JWNL; its needed for relex.\nWORKDIR /src\nRUN wget https://downloads.sourceforge.net/project/jwordnet/jwnl/JWNL%201.4/jwnl14-rc2.zip\nRUN (unzip jwnl14-rc2.zip jwnl14-rc2/jwnl.jar ; \\\n    mkdir /usr/local/share/java ; \\\n    mv -v jwnl14-rc2/jwnl.jar /usr/local/share/java ; \\\n    rm -v jwnl14-rc2.zip ; rmdir jwnl14-rc2 ; \\\n    chmod -v 0644 /usr/local/share/java/jwnl.jar)\n\n# -------------------------------------------------------------\n# Download and build Link Grammar. Its needed for Sureal,\n# the language generation component of opencog.\nWORKDIR /src\n\n# Touch this tag to grab the latest version of LinkGrammar.\nENV LAST_LG_UPDATE 2016-02-18\n\n# Download the current released version of link-grammar.\n# We do NOT want to git-clone this; the git version is unstable;\n# it also requires extra tools and mish-mash to build it.\n# RUN http://www.abisource.com/downloads/link-grammar/current/link-grammar-5*.tar.gz\n# The wget tries to guess the correct file to download w/ wildcard\n# But that won't work.\nRUN wget -r --no-parent -nH --cut-dirs=2 https://www.abisource.com/downloads/link-grammar/current/\n\n# Unpack the sources, too.\nRUN tar -zxf current/link-grammar-5*.tar.gz && rm current/link-grammar-5*.tar.gz\n\n# Need the locales for utf8\nRUN (echo \"en_US.UTF-8 UTF-8\" > /etc/locale.gen && \\\n     echo \"ru_RU.UTF-8 UTF-8\" >> /etc/locale.gen && \\\n     echo \"he_IL.UTF-8 UTF-8\" >> /etc/locale.gen && \\\n     echo \"de_DE.UTF-8 UTF-8\" >> /etc/locale.gen && \\\n     echo \"lt_LT.UTF-8 UTF-8\" >> /etc/locale.gen && \\\n     echo \"fa_IR.UTF-8 UTF-8\" >> /etc/locale.gen && \\\n     echo \"ar_AE.UTF-8 UTF-8\" >> /etc/locale.gen && \\\n     echo \"kk_KZ.UTF-8 UTF-8\" >> /etc/locale.gen && \\\n     echo \"tr_TR.UTF-8 UTF-8\" >> /etc/locale.gen)\n\n# WTF. In debian wheezy, it is enough to just say locale-gen without\n# any arguments. But in trusty, we eneed to be explicit.  I'm confused.\n# RUN locale-gen\n# Note also: under trusty, fa_IR.UTF-8 causes locale-gen to fail,\n# must use the naked  fa_IR\n# Note also: Kazakh is kk_KZ not kz_KZ\nRUN locale-gen en_US.UTF-8 ru_RU.UTF-8 he_IL.UTF-8 \\\n     de_DE.UTF-8 lt_LT.UTF-8 fa_IR ar_AE.UTF-8 kk_KZ.UTF-8 tr_TR.UTF-8\n\n# Build the libraries and command-line parser only\n# Assumes that the sources have already been unpacked.\nRUN (cd link-grammar-5*; mkdir build; cd build; \\\n     ../configure; make -j12; make install; ldconfig)\n\nRUN adduser --disabled-password --gecos \"Link Parser User\" link-parser\n\nUSER link-parser\nRUN (cd /home/link-parser; echo \"export LANG=en_US.UTF-8\" >> .bash_aliases)\nCMD bash\n\nRUN export LANG=en_US.UTF-8\n\n# -------------------------------------------------------------\nUSER root\nWORKDIR /opencog\n\n# Change line below on rebuild. Will use Docker cache up to this line,\n# twigging this date will update the opencog sources.\nENV LAST_SOFTWARE_UPDATE 2016-03-10\n\n# Git pull for all packages\nRUN cd /opencog/ && find . -maxdepth 1 -mindepth 1 -type d \\\n\t-execdir git --git-dir=$PWD/{}/.git --work-tree=$PWD/{} pull \\;\n\n# Build the base software.\nRUN (mkdir /opencog/cogutil/build; cd /opencog/cogutil/build; \\\n\tcmake ..; make -j6; make install)\nRUN (mkdir /opencog/atomspace/build; cd /opencog/atomspace/build; \\\n\tcmake ..; make -j12; make install)\nRUN (mkdir /opencog/opencog/build; cd /opencog/opencog/build; \\\n\tcmake ..; make -j12; make install)\nRUN (cd /opencog/relex; ant build; ant install)\n\n# Build the unit tests. This is .. optional, but we do it anyway,\n# for right now, just to sanity-check things.\n# WORKDIR /opencog/cogutil/build\n# RUN bash -l -c \"make -j6 tests\"\n#\n# WORKDIR /opencog/atomspace/build\n# RUN bash -l -c \"make -j12 tests\"\n#\n# WORKDIR /opencog/opencog/build\n# RUN bash -l -c \"make -j12 tests\"\n#\nCOPY /scripts/.guile /root/\nCOPY /scripts/unit-test.sh /root/\nCOPY /scripts/tmux.sh /root/\n\n# Pre-compile the guile modules. We could say `guild comple ...`, but\n# this is easier. This avoids fly compilation during container start.\nRUN (bash -l -c \"echo \\\"(use-modules (opencog))\\\" | guile ; \\\n  echo \\\"(use-modules (opencog exec))\\\" | guile ; \\\n  echo \\\"(use-modules (opencog logger))\\\" | guile ; \\\n  echo \\\"(use-modules (opencog persist))\\\" | guile ; \\\n  echo \\\"(use-modules (opencog persist-sql))\\\" | guile ; \\\n  echo \\\"(use-modules (opencog query))\\\" | guile ; \\\n  echo \\\"(use-modules (opencog rule-engine))\\\" | guile ; \\\n  echo \\\"(use-modules (opencog atom-types))\\\" | guile ; \\\n  echo \\\"(use-modules (opencog cogserver))\\\" | guile ; \\\n  echo \\\"(use-modules (opencog nlp))\\\" | guile ; \\\n  echo \\\"(use-modules (opencog nlp chatbot))\\\" | guile ; \\\n  echo \\\"(use-modules (opencog nlp chatbot-eva))\\\" | guile ; \\\n  echo \\\"(use-modules (opencog nlp fuzzy))\\\" | guile ; \\\n  echo \\\"(use-modules (opencog nlp lg-dict))\\\" | guile ; \\\n  echo \\\"(use-modules (opencog nlp microplanning))\\\" | guile ; \\\n  echo \\\"(use-modules (opencog nlp relex2logic))\\\" | guile ; \\\n  echo \\\"(use-modules (opencog nlp sureal))\\\" | guile \")\n\nWORKDIR /root\n# ENTRYPOINT bash -l -c \"./unit-test.sh; bash\"\nENTRYPOINT bash -l -c \"./tmux.sh; bash\"\n# CMD /bin/bash\n"
}