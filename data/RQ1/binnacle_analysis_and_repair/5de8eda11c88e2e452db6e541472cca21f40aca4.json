{
  "startTime": 1674239524658,
  "endTime": 1674239524925,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 50,
        "lineEnd": 50,
        "columnStart": 4,
        "columnEnd": 59
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 52,
        "lineEnd": 52,
        "columnStart": 4,
        "columnEnd": 30
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 98,
        "lineEnd": 98,
        "columnStart": 4,
        "columnEnd": 21
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 109,
        "lineEnd": 109,
        "columnStart": 4,
        "columnEnd": 27
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 18,
        "lineEnd": 46,
        "columnStart": 25,
        "columnEnd": 10
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM qianjiangyuan/tutorial-horovod:1.8\n\nMAINTAINER Jin Li <jinlmsft@hotmail.com>\n\n###################\nRUN update-ca-certificates\n\n###################\n# Install cudnn.\nRUN mkdir /download && cd /download && \\\n    wget https://github.com/zhejianglab/qjy-binary/releases/download/cudnn7.5-runtime/libcudnn7_7.5.0.56-1+cuda9.0_amd64.deb && \\\n    wget https://github.com/zhejianglab/qjy-binary/releases/download/cudnn7.5-dev/libcudnn7-dev_7.5.0.56-1+cuda9.0_amd64.deb && \\\n    wget https://github.com/zhejianglab/qjy-binary/releases/download/cudnn7.5-code/libcudnn7-doc_7.5.0.56-1+cuda9.0_amd64.deb && \\\n    dpkg -i libcudnn7_7.5.0.56-1+cuda9.0_amd64.deb && \\\n    dpkg -i libcudnn7-dev_7.5.0.56-1+cuda9.0_amd64.deb && \\\n    dpkg -i libcudnn7-doc_7.5.0.56-1+cuda9.0_amd64.deb && \\\n    cd .. && rm -rf /download\n\nRUN apt-get update -y && apt-get install -y --no-install-recommends \\\n    \tprotobuf-compiler \\\n      \tbuild-essential \\\n        curl \\\n        git \\\n\t\tcmake \\\n        rsync \\\n        software-properties-common \\\n        unzip \\\n        zip \\\n        libcurl3-dev \\\n        libfreetype6-dev \\\n        libpng12-dev \\\n        libzmq3-dev \\\n        pkg-config \\\n        python3.5-dev \\\n        zlib1g-dev \\\n        libopencv-dev \\\n        # python3-opencv \\\n\t\tpython3-tk \\\n        build-essential autoconf libtool libcunit1-dev \\\n        libproj-dev libgdal-dev libgeos-dev libjson0-dev vim python3-gdal \\\n    \t# requirements for keras\n    \tpython3-h5py \\\n    \tpython3-yaml \\\n    \tpython3-pydot \\\n        python3-pip \\\n        python3-setuptools \\\n\t\tgraphviz && rm -rf /var/lib/apt/lists/*;\n\n###################\n# python packages\nRUN curl -f https://bootstrap.pypa.io/get-pip.py -o get-pip.py\nRUN python3 get-pip.py --force-reinstall\nRUN pip3 install --no-cache-dir --upgrade pip\nRUN pip3 --no-cache-dir install \\\n\t\tprotobuf \\\n\t\tipykernel \\\n    \tjupyter \\\n    \tmatplotlib \\\n    \tnumpy \\\n    \tscipy \\\n    \tsklearn \\\n\t\tscikit-image \\\n\t\tpandas \\\n\t\th5py \\\n\t\tshapely \\\n        opencv-python \\\n    \t&& \\\n    python3 -m ipykernel.kernelspec\n\n###################\n# Install TensorFlow GPU version.\n#pip install --upgrade https://storage.googleapis.com/tensorflow/linux/gpu/tensorflow_gpu-0.12.1-cp27-none-linux_x86_64.whl\n#pip install --upgrade https://storage.googleapis.com/tensorflow/linux/gpu/tensorflow_gpu-1.4.0-cp27-none-linux_x86_64.whl\n# ARG TENSORFLOW_VERSION=1.4.1\n# ARG TENSORFLOW_DEVICE=gpu\n# ARG TENSORFLOW_APPEND=_gpu\n# RUN pip3 --no-cache-dir install https://storage.googleapis.com/tensorflow/linux/${TENSORFLOW_DEVICE}/tensorflow${TENSORFLOW_APPEND}-${TENSORFLOW_VERSION}-cp35-none-linux_x86_64.whl\n#  RUN pip3 --no-cache-dir install tensorflow-gpu keras\n\n\n###################\n# keras\n# ARG KERAS_VERSION=2.0.6\n# ENV KERAS_BACKEND=tensorflow\n# RUN pip3 --no-cache-dir install --no-dependencies git+https://github.com/fchollet/keras.git@${KERAS_VERSION}\n\n###################\n# mxnet\n# RUN pip3 --no-cache-dir install mxnet-cu80mkl\n\n\n###################\n# object detection api\n# https://github.com/phipleg/tensorflow-object-detector/blob/master/Dockerfile\n# git clone --branch my_abc http://git.abc.net/git/abc.git\n\nRUN git clone --branch r1.5 https://github.com/tensorflow/models.git /opt/tensorflow-models\nRUN cd /opt/tensorflow-models/research && \\\n    pip3 install --no-cache-dir -e . && \\\n    protoc object_detection/protos/*.proto --python_out=.\n\nENV PYTHONPATH $PYTHONPATH:/opt/tensorflow-models:/opt/tensorflow-models/slim\nENV PYTHONPATH $PYTHONPATH:/opt/tensorflow-models:/opt/tensorflow-models/research/slim\n# test (do this after container has been created)?\n#RUN python /opt/tensorflow-models/research/object_detection/builders/model_builder_test.py\n\nRUN python3 -m pip install --upgrade pip\nRUN python3 -m pip install jupyter\n\nRUN pip3 install --no-cache-dir jupyterlab\nRUN python3 -m pip install ipykernel\nRUN python3 -m ipykernel install --user\n\nRUN rm /usr/bin/python && ln -s /usr/bin/python3.5 /usr/bin/python\n\n###################\n# TensorBoard\n"
}