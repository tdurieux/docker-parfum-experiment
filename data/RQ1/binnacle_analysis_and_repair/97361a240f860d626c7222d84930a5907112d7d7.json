{
  "startTime": 1674245635322,
  "endTime": 1674245635587,
  "originalSmells": [
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 23,
        "lineEnd": 23,
        "columnStart": 4,
        "columnEnd": 21
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 24,
        "lineEnd": 24,
        "columnStart": 4,
        "columnEnd": 67
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 27,
        "lineEnd": 27,
        "columnStart": 4,
        "columnEnd": 21
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 28,
        "lineEnd": 28,
        "columnStart": 4,
        "columnEnd": 67
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 31,
        "lineEnd": 31,
        "columnStart": 4,
        "columnEnd": 21
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 32,
        "lineEnd": 32,
        "columnStart": 4,
        "columnEnd": 67
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 7,
        "lineEnd": 10,
        "columnStart": 4,
        "columnEnd": 44
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 7,
        "lineEnd": 10,
        "columnStart": 4,
        "columnEnd": 44
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 15,
        "lineEnd": 18,
        "columnStart": 4,
        "columnEnd": 39
      }
    }
  ],
  "repairedSmells": [
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 7,
        "lineEnd": 10,
        "columnStart": 4,
        "columnEnd": 44
      }
    }
  ],
  "repairedDockerfile": "FROM ubuntu:xenial\n\nSHELL [\"/bin/bash\", \"-c\"]\nARG ARCH=x86_64\nARG BITS=64\nENV PYVER=3.5\nRUN apt-get update\nRUN DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends \\\n        build-essential ccache cmake curl g++-mingw-w64-`echo $ARCH | tr _ -` \\\n        git libffi-dev libpng-dev libz-mingw-w64-dev p7zip-full pkg-config \\\n        software-properties-common unzip zip && \\\n    apt-get clean && rm -rf /var/lib/apt/lists/*;\n\nRUN apt-add-repository -y ppa:deadsnakes/ppa && \\\n    apt-get update && \\\n    DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends \\\n        libpython3.5-dev python3.5-venv \\\n        libpython3.6-dev python3.6-venv \\\n        libpython3.7-dev python3.7-venv && \\\n    apt-get clean && rm -rf /var/lib/apt/lists/*;\n\nRUN python3.5 -m venv ~/venv3.5 && \\\n    . ~/venv3.5/bin/activate && \\\n    pip install --no-cache-dir wheel && \\\n    pip install --no-cache-dir google-cloud google-resumable-media pytest requests && \\\n    python3.6 -m venv ~/venv3.6 && \\\n    . ~/venv3.6/bin/activate && \\\n    pip install --no-cache-dir wheel && \\\n    pip install --no-cache-dir google-cloud google-resumable-media pytest requests && \\\n    python3.7 -m venv ~/venv3.7 && \\\n    . ~/venv3.7/bin/activate && \\\n    pip install --no-cache-dir wheel && \\\n    pip install --no-cache-dir google-cloud google-resumable-media pytest requests && \\\n    rm -rf ~/.cache && \\\n    ln -s ~/venv$PYVER ~/venv && \\\n    echo \"source /root/venv\\$PYVER/bin/activate\" > ~/.bash_profile\n\nWORKDIR /root\nCOPY docker/scripts scripts\nCOPY docker/cmake cmake\n\nRUN CROSS=win${BITS} ROOT=/usr/${ARCH}-w64-mingw32 ./scripts/install_python.sh\n\nCOPY third-party/libzip libzip\nRUN CROSS=win${BITS} ROOT=/usr/${ARCH}-w64-mingw32 ./scripts/build_libzip.sh && \\\n    rm -rf libzip\n\nCOPY third-party/capnproto capnproto\nRUN ROOT=/usr ./scripts/build_capnproto.sh && \\\n    CROSS=win${BITS} ROOT=/usr/${ARCH}-w64-mingw32 ./scripts/build_capnproto.sh && \\\n    rm -rf capnproto\n\nRUN CROSS=win${BITS} ROOT=/usr/${ARCH}-w64-mingw32 ./scripts/build_qt5.sh && \\\n    rm -rf qt5\n\nRUN ./scripts/build_ccache.sh && (cd /usr/local/libexec/ccache && \\\n    ln -s /usr/local/bin/ccache ${ARCH}-w64-mingw32-gcc && \\\n    ln -s /usr/local/bin/ccache ${ARCH}-w64-mingw32-g++)\nENV PATH /usr/local/libexec/ccache:$PATH\n\nENTRYPOINT [\"bash\", \"-lc\", \"exec $0 $@\"]\n"
}