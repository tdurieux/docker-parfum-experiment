{
  "startTime": 1674243710954,
  "endTime": 1674243712014,
  "originalSmells": [
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 65,
        "lineEnd": 65,
        "columnStart": 4,
        "columnEnd": 145
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 51,
        "lineEnd": 51,
        "columnStart": 4,
        "columnEnd": 70
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 55,
        "lineEnd": 55,
        "columnStart": 62,
        "columnEnd": 73
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM centos/systemd\n\nWORKDIR /root/\n\n# Timezone\nENV TZ=Asia/Shanghai\n\nENV GOPATH=/usr/local/go\n\n# MySQL\nENV DBIP 127.0.0.1\nENV DBPort 3306\nENV DBUser root\nENV DBPassword password\nENV DBTarsPass tars2015\n\n# Install\nRUN yum -y install https://repo.mysql.com/yum/mysql-8.0-community/el/7/x86_64/mysql80-community-release-el7-1.noarch.rpm \\\n\t&& yum -y install https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm \\\n\t&& yum -y install http://rpms.remirepo.net/enterprise/remi-release-7.rpm \\\n\t&& yum -y install yum-utils && yum-config-manager --enable remi-php72 \\\n\t&& yum -y install git gcc gcc-c++ go make wget cmake mysql mysql-devel unzip iproute which glibc-devel flex bison ncurses-devel protobuf-devel zlib-devel kde-l10n-Chinese glibc-common hiredis-devel rapidjson-devel boost boost-devel php php-cli php-devel php-mcrypt php-cli php-gd php-curl php-mysql php-zip php-fileinfo php-phpiredis php-seld-phar-utils tzdata \\\n\t# Set timezone\n\t&& ln -snf /usr/share/zoneinfo/$TZ /etc/localtime && echo $TZ > /etc/timezone \\\n\t&& localedef -c -f UTF-8 -i zh_CN zh_CN.utf8 \\\n\t# Install MySQL8 C++ Connector\n\t&& wget -c -t 0 https://dev.mysql.com/get/Downloads/Connector-C++/mysql-connector-c++-8.0.11-linux-el7-x86-64bit.tar.gz \\\n\t&& tar zxf mysql-connector-c++-8.0.11-linux-el7-x86-64bit.tar.gz && cd mysql-connector-c++-8.0.11-linux-el7-x86-64bit \\\n\t&& cp -Rf include/jdbc/* /usr/include/mysql/ && cp -Rf include/mysqlx/* /usr/include/mysql/ && cp -Rf lib64/* /usr/lib64/mysql/ \\\n\t&& cd /root && rm -rf mysql-connector* \\\n\t&& mkdir -p /usr/local/mysql && ln -s /usr/lib64/mysql /usr/local/mysql/lib && ln -s /usr/include/mysql /usr/local/mysql/include && echo \"/usr/local/mysql/lib/\" >> /etc/ld.so.conf && ldconfig \\\n\t&& cd /usr/local/mysql/lib/ && rm -f libmysqlclient.a && ln -s libmysqlclient.so.*.*.* libmysqlclient.a \\\n\t# Get latest tars src\n\t&& cd /root/ && git clone https://github.com/TarsCloud/Tars \\\n\t&& cd /root/Tars/ && git submodule update --init --recursive framework \\\n\t&& git submodule update --init --recursive php \\\n\t&& git submodule update --init --recursive go \\\n\t&& git submodule update --init --recursive java \\\n\t&& mkdir -p /data && chmod u+x /root/Tars/framework/build/build.sh \\\n\t# Modify for MySQL 8\n\t&& sed -i '32s/rt/rt crypto ssl/' /root/Tars/framework/CMakeLists.txt \\\n\t# Start to build\n\t&& cd /root/Tars/framework/build/ && ./build.sh all \\\n\t&& ./build.sh install \\\n\t&& cd /root/Tars/framework/build/ && make framework-tar \\\n\t&& mkdir -p /usr/local/app/tars/ && cp /root/Tars/framework/build/framework.tgz /usr/local/app/tars/ \\\n\t&& cd /usr/local/app/tars/ && tar xzfv framework.tgz && rm -rf framework.tgz \\\n\t&& mkdir -p /usr/local/app/patchs/tars.upload \\\n\t&& cd /tmp && curl -fsSL https://getcomposer.org/installer | php \\\n\t&& chmod +x composer.phar && mv composer.phar /usr/local/bin/composer \\\n\t&& cd /root/Tars/php/tars-extension/ && phpize --clean && phpize \\\n\t&& ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --enable-phptars --with-php-config=/usr/bin/php-config && make && make install \\\n\t&& echo \"extension=phptars.so\" > /etc/php.d/phptars.ini \\\n\t# Install PHP swoole module\n\t&& cd /root && wget -c -t 0 https://github.com/swoole/swoole-src/archive/v2.2.0.tar.gz \\\n\t&& tar zxf v2.2.0.tar.gz && cd swoole-src-2.2.0 && phpize && ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" && make && make install \\\n\t&& echo \"extension=swoole.so\" > /etc/php.d/swoole.ini \\\n\t&& cd /root && rm -rf v2.2.0.tar.gz swoole-src-2.2.0 \\\n\t&& mkdir -p /root/phptars && cp -f /root/Tars/php/tars2php/src/tars2php.php /root/phptars \\\n\t# Install tars go\n\t&& go get github.com/TarsCloud/TarsGo/tars \\\n\t&& cd $GOPATH/src/github.com/TarsCloud/TarsGo/tars/tools/tars2go && go build . \\\n\t# Get and install nodejs\n\t&& wget -qO- https://raw.githubusercontent.com/creationix/nvm/v0.33.11/install.sh | bash \\\n\t&& source ~/.bashrc && nvm install v8.11.3 \\\n\t&& npm install -g @tars/deploy @tars/stream @tars/rpc @tars/logs @tars/config @tars/monitor @tars/notify @tars/utils @tars/dyeing @tars/registry \\\n\t# Get and install JDK\n\t&& mkdir -p /root/init && cd /root/init/ \\\n\t&& wget https://mirror.its.sfu.ca/mirror/CentOS-Third-Party/NSG/common/x86_64/jdk-10.0.2_linux-x64_bin.rpm \\\n\t&& rpm -ivh /root/init/jdk-10.0.2_linux-x64_bin.rpm && rm -rf /root/init/jdk-10.0.2_linux-x64_bin.rpm \\\n\t&& echo \"export JAVA_HOME=/usr/java/jdk-10.0.2\" >> /etc/profile \\\n\t&& echo \"CLASSPATH=\\$JAVA_HOME/lib/dt.jar:\\$JAVA_HOME/lib/tools.jar\" >> /etc/profile \\\n\t&& echo \"PATH=\\$JAVA_HOME/bin:\\$PATH\" >> /etc/profile \\\n\t&& echo \"export PATH JAVA_HOME CLASSPATH\" >> /etc/profile \\\n\t&& echo \"export JAVA_HOME=/usr/java/jdk-10.0.2\" >> /root/.bashrc \\\n\t&& echo \"CLASSPATH=\\$JAVA_HOME/lib/dt.jar:\\$JAVA_HOME/lib/tools.jar\" >> /root/.bashrc \\\n\t&& echo \"PATH=\\$JAVA_HOME/bin:\\$PATH\" >> /root/.bashrc \\\n\t&& echo \"export PATH JAVA_HOME CLASSPATH\" >> /root/.bashrc \\\n\t&& cd /usr/local/ && wget -c -t 0 https://mirrors.tuna.tsinghua.edu.cn/apache/maven/maven-3/3.5.4/binaries/apache-maven-3.5.4-bin.tar.gz \\\n\t&& tar zxvf apache-maven-3.5.4-bin.tar.gz && echo \"export MAVEN_HOME=/usr/local/apache-maven-3.5.4/\" >> /etc/profile \\\n\t# Set aliyun maven mirror\n\t# && sed -i '/<mirrors>/a\\\\t<mirror>\\n\\t\\t<id>nexus-aliyun<\\/id>\\n\\t\\t<mirrorOf>*<\\/mirrorOf>\\n\\t\\t<name>Nexus aliyun<\\/name>\\n\\t\\t<url>http:\\/\\/maven.aliyun.com\\/nexus\\/content\\/groups\\/public<\\/url>\\n\\t<\\/mirror>' /usr/local/apache-maven-3.5.4/conf/settings.xml \\\n\t&& echo \"export PATH=\\$PATH:\\$MAVEN_HOME/bin\" >> /etc/profile \\\n\t&& echo \"export PATH=\\$PATH:\\$MAVEN_HOME/bin\" >> /root/.bashrc \\\n\t&& source /etc/profile && mvn -v \\\n\t&& rm -rf apache-maven-3.5.4-bin.tar.gz \\\n\t&& cd /root/Tars/java && source /etc/profile && mvn clean install && mvn clean install -f core/client.pom.xml \\\n\t&& mvn clean install -f core/server.pom.xml \\\n\t&& cd /root/init && mvn archetype:generate -DgroupId=com.tangramor -DartifactId=TestJava -DarchetypeArtifactId=maven-archetype-webapp -DinteractiveMode=false \\\n\t&& cd /root/Tars/java/examples/quickstart-server/ && mvn tars:tars2java && mvn package \\\n\t&& mkdir -p /root/sql && cp -rf /root/Tars/framework/sql/* /root/sql/ \\\n\t&& cd /root/Tars/framework/build/ && ./build.sh cleanall \\\n\t&& yum clean all && rm -rf /var/cache/yum && npm cache clean --force;\n\n# Whether mount Tars process path to outside, false to support windows\nENV MOUNT_DATA true\n\n# Network interface (if use --net=host, maybe network interface does not named eth0)\nENV INET_NAME eth0\n\nVOLUME [\"/data\"]\n\n# copy source\nCOPY install.sh /root/init/\nCOPY entrypoint.sh /sbin/\n\nRUN chmod 755 /sbin/entrypoint.sh\nENTRYPOINT [ \"/sbin/entrypoint.sh\", \"start\" ]\n"
}