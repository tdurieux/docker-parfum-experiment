{
  "startTime": 1674240275083,
  "endTime": 1674240275543,
  "originalSmells": [
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 62,
        "lineEnd": 62,
        "columnStart": 4,
        "columnEnd": 26
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 36,
        "lineEnd": 58,
        "columnStart": 22,
        "columnEnd": 25
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# © Copyright IBM Corporation 2017, 2018\n# LICENSE: Apache License, Version 2.0 (http://www.apache.org/licenses/LICENSE-2.0)\n\n############################# Dockerfile for Marathon 1.7.50 #####################################\n#\n# This Dockerfile builds a basic installation of Marathon.\n#\n# Marathon is a production-grade container orchestration platform for Mesosphere’s Datacenter Operating System (DC/OS) and Apache Mesos.\n#\n# To build this image, from the directory containing this Dockerfile\n# (assuming that the file is named Dockerfile):\n# docker build -t <image_name> .\n#\n# To start Marathon run the below command:\n# docker run --privileged --name <container_name> -p <portnumber>:8080 -d <image_name>\n#\n# Test in the browser by using the following url:\n# http://<hostname>:<port_number>/\n#\n#####################################################################################################\n\n# Base Image\nFROM s390x/ubuntu:16.04\n\n# The author\nMAINTAINER  LoZ Open Source Ecosystem (https://www.ibm.com/developerworks/community/groups/community/lozopensource)\n\nWORKDIR \"/tmp\"\n\n# Set the Environmental Variables\nENV JAVA_HOME=/usr/lib/jvm/java-8-openjdk-s390x\nENV JAVA_TOOL_OPTIONS='-Xmx2048M'\nENV PATH=$PATH:$JAVA_HOME/bin:/tmp/source_root/sbt/bin:/usr/share/zookeeper-3.4.8/bin:/usr/share/marathon/bin:$PATH\nENV LD_LIBRARY_PATH=/usr/local/lib:/usr/lib\n\n# Install dependencies\nRUN apt-get update && apt-get install --no-install-recommends -y \\\n        git \\\n        openjdk-8-jdk \\\n        patch \\\n        tar \\\n        wget \\\n        build-essential \\\n        python-dev \\\n        libcurl4-nss-dev \\\n        libsasl2-dev \\\n        libsasl2-modules \\\n        maven \\\n        libapr1-dev \\\n        libsvn-dev \\\n        zlib1g-dev \\\n        libssl-dev \\\n        autoconf \\\n        automake \\\n        libtool \\\n        bzip2 \\\n        unzip \\\n        python-six \\\n        python-virtualenv \\\n# Install sbt\n && mkdir source_root && cd source_root \\\n && wget https://github.com/sbt/sbt/releases/download/v1.1.1/sbt-1.1.1.tgz \\\n && tar -zxf sbt-1.1.1.tgz \\\n# Clone Mesos\n && git clone https://github.com/apache/mesos \\\n && cd mesos && git checkout 1.7.0 \\\n && cd 3rdparty/ \\\n && git clone -b v1.11.0 https://github.com/grpc/grpc.git grpc-1.11.0 \\\n && cd grpc-1.11.0/ \\\n && git submodule update --init third_party/cares \\\n && cd ../ \\\n && tar zcvf grpc-1.11.0.tar.gz --exclude .git grpc-1.11.0 \\\n && rm -rf grpc-1.11.0 \\\n && cd ../ \\\n# Add patch\n && sed -i -e 's/1.10.0/1.11.0/g' 3rdparty/versions.am \\\n && sed -i -e 's/1.10.0/1.11.0/g' src/python/native_common/ext_modules.py.in \\\n && sed -i '87i \\          \\<maxmemory>512m</maxmemory>' src/java/mesos.pom.in \\\n && echo \"diff --git a/src/google/protobuf/stubs/atomicops_internals_generic_gcc.h b/src/google/protobuf/stubs/atomicops_internals_generic_gcc.h\" >> 3rdparty/protobuf-3.5.0.patch \\\n && echo \"index 0b0b06c..075c406 100644\" >> 3rdparty/protobuf-3.5.0.patch \\\n && echo \"--- a/src/google/protobuf/stubs/atomicops_internals_generic_gcc.h\" >> 3rdparty/protobuf-3.5.0.patch \\\n && echo \"+++ b/src/google/protobuf/stubs/atomicops_internals_generic_gcc.h\" >> 3rdparty/protobuf-3.5.0.patch \\\n && echo \"@@ -146,6 +146,14 @@ inline Atomic64 NoBarrier_Load(volatile const Atomic64* ptr) {\" >> 3rdparty/protobuf-3.5.0.patch \\\n && echo \"   return __atomic_load_n(ptr, __ATOMIC_RELAXED);\" >> 3rdparty/protobuf-3.5.0.patch \\\n && echo \" }\" >> 3rdparty/protobuf-3.5.0.patch \\\n && echo >> 3rdparty/protobuf-3.5.0.patch \\\n && echo \"+inline Atomic64 Release_CompareAndSwap(volatile Atomic64* ptr,\" >> 3rdparty/protobuf-3.5.0.patch \\\n && echo \"+                                       Atomic64 old_value,\" >> 3rdparty/protobuf-3.5.0.patch \\\n && echo \"+                                       Atomic64 new_value) {\" >> 3rdparty/protobuf-3.5.0.patch \\\n && echo \"+  __atomic_compare_exchange_n(ptr, &old_value, new_value, false,\" >> 3rdparty/protobuf-3.5.0.patch \\\n && echo \"+                              __ATOMIC_RELEASE, __ATOMIC_ACQUIRE);\" >> 3rdparty/protobuf-3.5.0.patch \\\n && echo \"+  return old_value;\" >> 3rdparty/protobuf-3.5.0.patch \\\n && echo \"+}\" >> 3rdparty/protobuf-3.5.0.patch \\\n && echo \"+\" >> 3rdparty/protobuf-3.5.0.patch \\\n && echo \" #endif // defined(__LP64__)\" >> 3rdparty/protobuf-3.5.0.patch \\\n && echo >> 3rdparty/protobuf-3.5.0.patch \\\n && echo \" }  // namespace internal\" >> 3rdparty/protobuf-3.5.0.patch \\\n# Build Mesos\n && ./bootstrap && mkdir build && cd build \\\n && ../configure && make && make install \\\n# clone and install Marathon\n && cd /tmp/source_root && git clone https://github.com/mesosphere/marathon.git \\\n && cd marathon && git checkout v1.7.50 \\\n && sed -i -e 's/1.1.0/1.1.1/g' project/build.properties \\\n && sed -i -e 's/2.12.4/2.12.6/g' build.sbt \\\n && sbt stage \\\n && cp -r /tmp/source_root/mesos/build/3rdparty/zookeeper-3.4.8 /usr/share/ \\\n && cp -r /tmp/source_root/marathon /usr/share \\\n# Clean up source dir and unused packages/libraries\n && apt-get remove -y \\\n        patch \\\n        wget \\\n        maven \\\n        autoconf \\\n        automake \\\n && apt-get autoremove -y \\\n && apt autoremove -y \\\n && apt-get clean && rm -rf /var/lib/apt/lists/* && rm -rf /root/.m2 && rm -rf /tmp/source_root/m* && rm sbt-1.1.1.tgz\n\n# Port for Marathon\nEXPOSE 8080\n\n# Start ZooKeeper service\nRUN cd /usr/share/zookeeper-3.4.8 \\\n&& cp conf/zoo_sample.cfg conf/zoo.cfg\n\n# Start Marathon master\nCMD env PATH=$PATH zkServer.sh start \\\n&& env PATH=$PATH mesos-local \\\n&& cd /usr/share/marathon \\\n&& env PATH=$PATH sbt 'run --master 127.0.0.1:5050 --zk zk://127.0.0.1:2181/marathon'\n\n# End of Dockerfile\n"
}