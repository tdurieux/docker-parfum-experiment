{
  "startTime": 1674250432030,
  "endTime": 1674250432248,
  "originalSmells": [
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 19,
        "lineEnd": 19,
        "columnStart": 4,
        "columnEnd": 30
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 51,
        "lineEnd": 51,
        "columnStart": 4,
        "columnEnd": 35
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 52,
        "lineEnd": 52,
        "columnStart": 4,
        "columnEnd": 80
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 21,
        "lineEnd": 21,
        "columnStart": 68,
        "columnEnd": 91
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 11,
        "lineEnd": 18,
        "columnStart": 18,
        "columnEnd": 30
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 21,
        "lineEnd": 21,
        "columnStart": 68,
        "columnEnd": 91
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM nvidia/cuda:8.0-cudnn5-devel-ubuntu16.04\n\n# CUDA includes\nENV CUDA_PATH /usr/local/cuda\nENV CUDA_INCLUDE_PATH /usr/local/cuda/include\nENV CUDA_LIBRARY_PATH /usr/local/cuda/lib64\n\nRUN echo \"deb http://developer.download.nvidia.com/compute/machine-learning/repos/ubuntu1604/x86_64 /\" > /etc/apt/sources.list.d/nvidia-ml.list\n\nENV CUDNN_VERSION 6.0.20\n\nRUN apt update && apt install -y --allow-unauthenticated --no-install-recommends \\\n    build-essential apt-utils cmake git curl vim ca-certificates \\\n    libjpeg-dev libpng-dev python3.5 python3-pip python3-setuptools \\\n    libgtk3.0 libsm6 python3-venv cmake ffmpeg pkg-config \\\n    qtbase5-dev libqt5opengl5-dev libassimp-dev libpython3.5-dev \\\n    libboost-python-dev libtinyxml-dev bash python3-tk libcudnn6=$CUDNN_VERSION-1+cuda8.0 \\\n    libcudnn6-dev=$CUDNN_VERSION-1+cuda8.0 wget unzip libosmesa6-dev software-properties-common \\\n    libopenmpi-dev libglew-dev && rm -rf /var/lib/apt/lists/*;\nRUN pip3 install --no-cache-dir pip --upgrade\n\nRUN add-apt-repository ppa:jamesh/snap-support && apt-get update && apt install --no-install-recommends -y patchelf && rm -rf /var/lib/apt/lists/*;\nRUN rm -rf /var/lib/apt/lists/*\n\n# For some reason, I have to use a different account from the default one.\n# This is absolutely optional and not recommended. You can remove them safely.\n# But be sure to make corresponding changes to all the scripts.\n\nWORKDIR /shaang\nRUN chmod -R 777 /shaang\nRUN chmod -R 777 /usr/local\n\nRUN useradd -d /shaang -u 13071 shaang\nUSER shaang\n\nRUN mkdir -p /shaang/.mujoco \\\n    && wget https://www.roboti.us/download/mjpro150_linux.zip -O mujoco.zip \\\n    && unzip mujoco.zip -d /shaang/.mujoco \\\n    && rm mujoco.zip\nRUN wget https://www.roboti.us/download/mujoco200_linux.zip -O mujoco.zip \\\n    && unzip mujoco.zip -d /shaang/.mujoco \\\n    && rm mujoco.zip\n\n# Make sure you have a license, otherwise comment this line out\n# Of course you then cannot use Mujoco and DM Control, but Roboschool is still available\nCOPY ./mjkey.txt /shaang/.mujoco/mjkey.txt\n\nENV LD_LIBRARY_PATH /shaang/.mujoco/mjpro150/bin:${LD_LIBRARY_PATH}\nENV LD_LIBRARY_PATH /shaang/.mujoco/mjpro200_linux/bin:${LD_LIBRARY_PATH}\n\nCOPY requirements.txt requirements.txt\nRUN pip install --no-cache-dir -r requirements.txt\nRUN pip install --no-cache-dir git+git://github.com/openai/baselines.git@8e56dd#egg=baselines\n\nWORKDIR /shaang/DeepRL\n"
}