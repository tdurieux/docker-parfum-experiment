{
  "startTime": 1674252022516,
  "endTime": 1674252022704,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 28,
        "lineEnd": 28,
        "columnStart": 4,
        "columnEnd": 62
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 10,
        "lineEnd": 15,
        "columnStart": 18,
        "columnEnd": 6
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 30,
        "lineEnd": 30,
        "columnStart": 4,
        "columnEnd": 33
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 10,
        "lineEnd": 15,
        "columnStart": 18,
        "columnEnd": 6
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# https://www.wihlidal.com/blog/pipeline/2018-09-15-linux-dxc-docker/\n# https://www.wihlidal.com/blog/pipeline/2018-09-16-dxil-signing-post-compile/\n# https://www.wihlidal.com/blog/pipeline/2018-09-17-linux-fxc-docker/\n# https://www.wihlidal.com/blog/pipeline/2018-12-28-containerized_shader_compilers/\n\nFROM gwihlidal/docker-shader:10\n\n# Prevents annoying debconf errors during builds\nARG DEBIAN_FRONTEND=\"noninteractive\"\n\nRUN apt update && apt install --no-install-recommends -y \\\n\t\t# Required for service compilation\r\n\t\tbuild-essential \\\n\t\tlibssl-dev \\\n\t\tpkg-config \\\n\t\tcurl \\\n\t# Clean up\r\n\t&& apt autoremove -y \\\n\t&& apt autoclean \\\n\t&& apt clean \\\n\t&& apt autoremove && rm -rf /var/lib/apt/lists/*;\n\n# Install GCS Fuse\nRUN apt-get update && apt-get install --yes --no-install-recommends \\\r\n\t\tca-certificates \\\r\n\t\tcurl \\\r\n\t&& echo \"deb http://packages.cloud.google.com/apt gcsfuse-bionic main\" \\\r\n\t\t| tee /etc/apt/sources.list.d/gcsfuse.list \\\n\t&& curl -f https://packages.cloud.google.com/apt/doc/apt-key.gpg | apt-key add - \\\n\t&& apt-get update \\\n\t&& apt-get install --no-install-recommends --yes gcsfuse \\\n\t&& apt-get clean && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*\n\nWORKDIR /app\n\n# Install Rust\nWORKDIR /service\nRUN curl https://sh.rustup.rs -sSf | sh -s -- -y\nENV PATH=\"/root/.cargo/bin:${PATH}\"\n\n# Avoid having to install/build all dependencies when iterating\n# by copying the Cargo files and making dummy main source files\nCOPY Cargo.* ./\nRUN mkdir -p src/bin/compile && echo \"fn main() {}\" > src/bin/compile/main.rs && \\\r\n\tmkdir -p src/bin/service && echo \"fn main() {}\" > src/bin/service/main.rs && \\\r\n\techo \"fn fake() {}\" > src/lib.rs && \\\r\n\techo \"fn main() {}\" > build.rs && \\\r\n\tcargo build --release\n\n# Add source files\nCOPY src src\nCOPY proto proto\nCOPY build.rs .\n\n# We need to touch our real source files or\n# else docker will use the cached ones.\nRUN touch src/bin/compile/main.rs && \\\r\n\ttouch src/bin/service/main.rs && \\\r\n\ttouch src/lib.rs && \\\r\n\ttouch build.rs && \\\r\n\tcargo build --release --color never && \\\r\n\tmkdir -p /service/storage && \\\r\n\tmkdir -p /service/temp\n\nENV STORAGE_PATH=\"/service/data/storage\"\nENV TRANSFORM_PATH=\"/service/data/transform\"\nENV TEMP_PATH=\"/service/temp\"\n\nRUN echo \"\" > service.env\n\nEXPOSE 63999\nENTRYPOINT [\"./target/release/service\"]\n#ENTRYPOINT [\"/bin/bash\"]"
}