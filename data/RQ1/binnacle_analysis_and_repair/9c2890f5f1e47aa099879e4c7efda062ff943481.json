{
  "startTime": 1674250377012,
  "endTime": 1674250377527,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 26,
        "lineEnd": 26,
        "columnStart": 4,
        "columnEnd": 49
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 40,
        "lineEnd": 40,
        "columnStart": 4,
        "columnEnd": 69
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 62,
        "lineEnd": 62,
        "columnStart": 4,
        "columnEnd": 83
      }
    },
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 32,
        "lineEnd": 32,
        "columnStart": 4,
        "columnEnd": 25
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 43,
        "lineEnd": 43,
        "columnStart": 2,
        "columnEnd": 13
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 11,
        "lineEnd": 11,
        "columnStart": 22,
        "columnEnd": 60
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 21,
        "lineEnd": 21,
        "columnStart": 2,
        "columnEnd": 242
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 27,
        "lineEnd": 27,
        "columnStart": 2,
        "columnEnd": 27
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 55,
        "lineEnd": 55,
        "columnStart": 2,
        "columnEnd": 84
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 82,
        "lineEnd": 82,
        "columnStart": 20,
        "columnEnd": 157
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 27,
        "lineEnd": 27,
        "columnStart": 2,
        "columnEnd": 27
      }
    }
  ],
  "repairedSmells": [
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 27,
        "lineEnd": 27,
        "columnStart": 2,
        "columnEnd": 51
      }
    }
  ],
  "repairedDockerfile": "#######################\n### BASE (FIRST)\n#######################\n\nFROM quay.io/criticaljuncture/baseimage:16.04\n\n\n#######################\n### RUBY\n#######################\n\nRUN apt-get update && apt-get install --no-install-recommends -y ruby2.2 ruby2.2-dev && \\\n  apt-get clean && \\\n  rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/\n\n\n#######################\n### VARIOUS PACKAGES\n#######################\n\nRUN apt-get update && \\\n  apt-get install --no-install-recommends -y gettext-base patch libcurl4-openssl-dev libpcre3-dev git libmysqlclient-dev mysql-client apache2-utils fontconfig hunspell-en-us libhunspell-1.3-0 libhunspell-dev pngcrush secure-delete xfonts-75dpi xfonts-base xpdf pdftk && \\\n  apt-get clean && \\\n  rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/\n\n# node js - packages are out of date\nRUN curl -f -sL https://deb.nodesource.com/setup_8.x | bash - && \\\n  apt-get install --no-install-recommends -y nodejs && \\\n  apt-get clean && \\\n  rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/\n\n# npm packages for testing\nRUN npm install -g jshint && npm cache clean --force;\n\n\n#######################\n### SPHINX\n#######################\n\nWORKDIR /tmp\nRUN curl -f -O http://sphinxsearch.com/files/sphinx-2.1.2-release.tar.gz && \\\n  tar xzvf sphinx-2.1.2-release.tar.gz && \\\n  cd /tmp/sphinx-2.1.2-release && \\\n  ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" && \\\n  make && \\\n  make install && \\\n  rm /tmp/sphinx-2.1.2-release.tar.gz && \\\n  rm -Rf /tmp/sphinx-2.1.2-release\n\n\n##################\n### PRINCEXML\n##################\n\nRUN apt-get update && \\\n  apt-get install --no-install-recommends -y libc6 libtiff5 libgif7 libcurl3 libfontconfig1 libjpeg8 libxml2 && \\\n  apt-get clean && \\\n  rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/\n\nWORKDIR /tmp\n\n# install prince and license template\nRUN curl -f -O https://www.princexml.com/download/prince-8.1r5-ubuntu1604-amd64.tar.gz && \\\n  tar -xzvf prince-8.1r5-ubuntu1604-amd64.tar.gz && \\\n  cd /tmp/prince-8.1r5-ubuntu1604-amd64 && \\\n  ./install.sh && \\\n  rm /tmp/prince-8.1r5-ubuntu1604-amd64.tar.gz && \\\n  rm -Rf /tmp/prince-8.1r5-ubuntu1604-amd64\n\nCOPY docker/api/files/princexml/license.dat.tmpl /usr/local/lib/prince/license/license.dat.tmpl\n\n# add fonts\nCOPY docker/api/files/fonts/open-sans /usr/share/fonts/truetype/\n# update font cache\nRUN  fc-cache -f -v\n\n\n##################\n### IMAGEMAGICK\n##################\n\nRUN apt-get update &&\\\n  apt-get update && apt-get install --no-install-recommends -y checkinstall libtiff5-dev libx11-dev libxext-dev zlib1g-dev libpng12-dev libjpeg-dev ghostscript libgs-dev imagemagick && \\\n  apt-get clean && \\\n  rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/\n\nCOPY docker/api/files/imagemagick/policy.xml /etc/ImageMagick-6/policy.xml\n\n##################\n### TIMEZONE\n##################\n\nRUN ln -sf /usr/share/zoneinfo/US/Eastern /etc/localtime\n\n\n##################\n### APP USER\n##################\n\nRUN adduser app -uid 1000 --system &&\\\n  usermod -a -G docker_env app\n\n\n###############################\n### GEMS & PASSENGER INSTALL\n###############################\n\nRUN gem install bundler -v 1.17.3\nWORKDIR /tmp\nCOPY Gemfile /tmp/Gemfile\nCOPY Gemfile.lock /tmp/Gemfile.lock\nRUN bundle install --system --full-index &&\\\n  passenger-config install-standalone-runtime &&\\\n  passenger start --runtime-check-only\n\n# docker cached layer build optimization:\n# caches the latest security upgrade versions\n# at the same time we're doing something else slow (changing the bundle)\n# but something we do often enough that the final unattended upgrade at the\n# end of this dockerfile isn't installing the entire world of security updates\n# since we set up the dockerfile for the project\nRUN apt-get update && unattended-upgrade -d\n\nENV PASSENGER_MIN_INSTANCES 1\nENV WEB_PORT 3000\n\n\n##################\n### SERVICES\n##################\n\nCOPY docker/api/my_init.d /etc/my_init.d\nCOPY docker/api/service /etc/service\n\n\n##################\n### APP\n##################\n\nCOPY --chown=1000:1000 . /home/app/\nWORKDIR /home/app\n\n\n##################\n### BASE (LAST)\n##################\n\n# ensure all packages are as up to date as possible\n# installs all updates since we last bundled\nRUN apt-get update && unattended-upgrade -d\n\n# set terminal\nENV TERM=linux\n"
}