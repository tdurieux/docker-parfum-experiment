{
  "startTime": 1674250674410,
  "endTime": 1674250674918,
  "originalSmells": [
    {
      "rule": "wgetUseHttpsUrl",
      "position": {
        "lineStart": 49,
        "lineEnd": 49,
        "columnStart": 4,
        "columnEnd": 83
      }
    },
    {
      "rule": "wgetUseHttpsUrl",
      "position": {
        "lineStart": 50,
        "lineEnd": 50,
        "columnStart": 4,
        "columnEnd": 118
      }
    },
    {
      "rule": "wgetUseHttpsUrl",
      "position": {
        "lineStart": 51,
        "lineEnd": 51,
        "columnStart": 4,
        "columnEnd": 121
      }
    },
    {
      "rule": "wgetUseHttpsUrl",
      "position": {
        "lineStart": 52,
        "lineEnd": 52,
        "columnStart": 4,
        "columnEnd": 91
      }
    },
    {
      "rule": "wgetUseHttpsUrl",
      "position": {
        "lineStart": 73,
        "lineEnd": 73,
        "columnStart": 4,
        "columnEnd": 78
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 74,
        "lineEnd": 74,
        "columnStart": 4,
        "columnEnd": 30
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 35,
        "lineEnd": 35,
        "columnStart": 4,
        "columnEnd": 435
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 63,
        "lineEnd": 63,
        "columnStart": 22,
        "columnEnd": 71
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 35,
        "lineEnd": 35,
        "columnStart": 4,
        "columnEnd": 435
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 35,
        "lineEnd": 35,
        "columnStart": 4,
        "columnEnd": 435
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 63,
        "lineEnd": 63,
        "columnStart": 22,
        "columnEnd": 71
      }
    }
  ],
  "repairedSmells": [
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 35,
        "lineEnd": 35,
        "columnStart": 4,
        "columnEnd": 459
      }
    }
  ],
  "repairedDockerfile": "# Dockerfile to build SGE enabled container\n#\n# VERSION 0.1\n\n# use vanilla ubuntu base image\nFROM phusion/baseimage:0.9.15\n\n# maintained by me\nMAINTAINER Steve Moss <gawbul@gmail.com>\n\n# expose ports\nEXPOSE 6444\nEXPOSE 6445\nEXPOSE 6446\n\n# run everything as root to start with\nUSER root\n\n# set environment variables\nENV HOME /root\n\n# regenerate host ssh keys\nRUN /etc/my_init.d/00_regen_ssh_host_keys.sh\n\n# add pin priority to some graphical packages to stop them installing and borking the build\nRUN echo \"Package: xserver-xorg*\\nPin: release *\\nPin-Priority: -1\" >> /etc/apt/preferences\nRUN echo \"Package: unity*\\nPin: release *\\nPin-Priority: -1\" >> /etc/apt/preferences\nRUN echo \"Package: gnome*\\nPin: release *\\nPin-Priority: -1\" >> /etc/apt/preferences\n\n# turn off password requirement for sudo groups users\nRUN sed -i \"s/^\\%sudo\\tALL=(ALL:ALL)\\sALL/%sudo ALL=(ALL) NOPASSWD:ALL/\" /etc/sudoers\n\n# install required software as per README.BUILD\nRUN apt-get update -y\nRUN apt-get upgrade -y\nRUN apt-get install --no-install-recommends -y wget darcs git mercurial tcsh build-essential automake autoconf openssl libssl-dev munge libmunge2 libmunge-dev libjemalloc1 libjemalloc-dev db5.3-util libdb-dev libncurses5 libncurses5-dev libpam0g libpam0g-dev libpacklib-lesstif1-dev libmotif-dev libxmu-dev libxpm-dev hwloc libhwloc-dev openjdk-7-jre openjdk-7-jdk ant ant-optional javacc junit libswing-layout-java libxft2 libxft-dev libreadline-dev man gawk && rm -rf /var/lib/apt/lists/*;\n\n# add files to container from local directory\nADD izpack_auto_install.xml /root/izpack_auto_install.xml\nADD sge_auto_install.conf /root/sge_auto_install.conf\nADD docker_sge_init.sh /etc/my_init.d/01_docker_sge_init.sh\nADD sge_exec_host.conf /root/sge_exec_host.conf\nADD sge_queue.conf /root/sge_queue.conf\nRUN chmod ug+x /etc/my_init.d/01_docker_sge_init.sh\n\n# change to home directory\nWORKDIR $HOME\n\n# retrieve required files\nRUN wget -c https://dist.codehaus.org/izpack/releases/4.3.5/IzPack-install-4.3.5.jar\nRUN wget -c https://www.mirrorservice.org/sites/archive.ubuntu.com/ubuntu/pool/main/libz/libzip/libzip1_0.9-3_amd64.deb\nRUN wget -c https://www.mirrorservice.org/sites/archive.ubuntu.com/ubuntu/pool/main/libz/libzip/libzip-dev_0.9-3_amd64.deb\nRUN wget -c https://archive.cloudera.com/one-click-install/lucid/cdh3-repository_1.0_all.deb\n\n# install izpack\nRUN java -jar IzPack-install-4.3.5.jar ~/izpack_auto_install.xml\nENV PATH /usr/local/izpack/bin:$PATH\nRUN echo export PATH=/usr/local/izpack/bin:$PATH >> /etc/bashrc\n\n# install hadoop\nRUN dpkg -i libzip1_0.9-3_amd64.deb\nRUN dpkg -i libzip-dev_0.9-3_amd64.deb\nRUN dpkg -i cdh3-repository_1.0_all.deb\nRUN apt-get update && apt-get -y --no-install-recommends install hadoop-0.20 hadoop-0.20-native && rm -rf /var/lib/apt/lists/*;\n\n# clone the SGE git repository\n# git repo takes forever\n# issues with the hg repository currently\n# probems with darcs too that docker doesn't like\n#RUN hg clone http://arc.liv.ac.uk/repos/hg/sge\n#RUN darcs get --lazy --set-scripts-executable http://arc.liv.ac.uk/repos/darcs/sge\n#RUN git clone http://arc.liv.ac.uk/repos/git/sge\n# download source tarball instead\nRUN wget -c https://arc.liv.ac.uk/downloads/SGE/releases/8.1.8/sge-8.1.8.tar.gz\nRUN tar -zxvf sge-8.1.8.tar.gz && rm sge-8.1.8.tar.gz\n\n# change working directory\nWORKDIR $HOME/sge-8.1.8/source\n\n# setup SGE env\nENV SGE_ROOT /opt/sge\nENV SGE_CELL default\nRUN echo export SGE_ROOT=/opt/sge >> /etc/bashrc\nRUN echo export SGE_CELL=default >> /etc/bashrc\nRUN ln -s $SGE_ROOT/$SGE_CELL/common/settings.sh /etc/profile.d/sge_settings.sh\n\n#Â install SGE\nRUN mkdir /opt/sge\nRUN useradd -r -m -U -d /home/sgeadmin -s /bin/bash -c \"Docker SGE Admin\" sgeadmin\nRUN usermod -a -G sudo sgeadmin\nRUN sh scripts/bootstrap.sh && ./aimk && ./aimk -man\nRUN echo Y | ./scripts/distinst -local -allall -libs -noexit\nWORKDIR $SGE_ROOT\nRUN ./inst_sge -m -x -s -auto ~/sge_auto_install.conf \\\n&& /etc/my_init.d/01_docker_sge_init.sh && sed -i \"s/HOSTNAME/`hostname`/\" $HOME/sge_exec_host.conf \\\n&& /opt/sge/bin/lx-amd64/qconf -au sgeadmin arusers \\\n&& /opt/sge/bin/lx-amd64/qconf -Me $HOME/sge_exec_host.conf \\\n&& /opt/sge/bin/lx-amd64/qconf -Aq $HOME/sge_queue.conf\n\nENV PATH /opt/sge/bin:/opt/sge/bin/lx-amd64/:/opt/sge/utilbin/lx-amd64:$PATH\nRUN echo export PATH=/opt/sge/bin:/opt/sge/bin/lx-amd64/:/opt/sge/utilbin/lx-amd64:$PATH >> /etc/bashrc\n\n# return to home directory\nWORKDIR $HOME\n\n# clean up\nRUN rm *.deb\nRUN rm *.jar\nRUN rm *.tar.gz\nRUN rm -rf sge-8.1.8\nRUN apt-get clean && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*\n\n# start my_init on execution and pass bash to runit\nENTRYPOINT [\"/sbin/my_init\", \"--\"]\nCMD [\"/bin/bash\"]\n"
}