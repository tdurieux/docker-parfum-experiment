{
  "startTime": 1674250529025,
  "endTime": 1674250529237,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 31,
        "lineEnd": 31,
        "columnStart": 4,
        "columnEnd": 85
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM nutshells/base\nLABEL maintainer='Chao QU <mail@quchao.com>'\n\nWORKDIR /usr/local/src/\n\nARG DNSMASQ_COMMIT='3390db4'\nARG DNSMASQ_SHA256='9b1a08c5c6fa55784a21db7019bba16d07c8a6d57ec8029d1b52becb9e5626e1'\nARG DNSMASQ_VERSION='v2.77test4'\nARG WITH_DNSSEC='true'\nARG WITH_IDN='true'\n\nENV SAMPLE_CFG_DIR='/usr/local/share/dnsmasq' \\\n    CFG_DIR='/usr/local/etc/dnsmasq' \\\n    LISTEN_PORT='12345'\n\nRUN set -ex; \\\n    # build deps\n    apk add --no-cache --virtual .build-deps \\\n        build-base \\\n        linux-headers \\\n        libidn-dev \\\n        nettle-dev \\\n    ; \\\n    # runtime deps\n    apk add --no-cache --virtual .runtime-deps \\\n        nettle \\\n    ; \\\n    # extra tools\n    apk add --no-cache --virtual .extra-tools \\\n        bind-tools \\\n    ; \\\n    curl -f -sSLO \"https://github.com/infinet/dnsmasq/archive/${DNSMASQ_COMMIT}.tar.gz\"; \\\n    echo \"${DNSMASQ_SHA256}  ${DNSMASQ_COMMIT}.tar.gz\" | sha256sum -c -; \\\n    tar xzf \"${DNSMASQ_COMMIT}.tar.gz\"; \\\n    mv dnsmasq-* dnsmasq; \\\n    cd dnsmasq; \\\n    # fix version number\n    echo \"${DNSMASQ_VERSION}\" > VERSION; \\\n    # build with DNSSEC enabled, pt.1\n    if [ \"${WITH_DNSSEC}\" = 'true' ]; then \\\n        sed -i 's|^/\\* #define HAVE_DNSSEC \\*/|#define HAVE_DNSSEC|' src/config.h; \\\n    fi; \\\n    # build with IDN support\n    if [ \"${WITH_IDN}\" = 'true' ]; then \\\n        sed -i 's|^/\\* #define HAVE_IDN \\*/|#define HAVE_IDN|' src/config.h; \\\n        # runtime deps complement\n        apk add --no-cache --virtual .runtime-deps \\\n            libidn \\\n        ; \\\n    fi; \\\n    make; \\\n    # install w/o manpage\n    #make install; \\\n    mkdir /usr/local/sbin/; \\\n    cp src/dnsmasq /usr/local/sbin/; \\\n    # config loader\n    mkdir -p \"${CFG_DIR}\"; \\\n    echo \"conf-dir=${CFG_DIR},*.conf\" >> /etc/dnsmasq.conf; \\\n    # tailer the sample confs\n    mkdir -p \"${SAMPLE_CFG_DIR}\"; \\\n    # build with DNSSEC enabled, pt.2\n    if [ \"${WITH_DNSSEC}\" = 'true' ]; then \\\n        sed -i 's|^#dnssec|dnssec|g' dnsmasq.conf.example; \\\n        echo \"#Copy the DNSSEC Authenticated Data bit from upstream servers to downstream clients and cache it. This is an alternative to having dnsmasq validate DNSSEC, but it depends on the security of the network between dnsmasq and the upstream servers, and the trustworthiness of the upstream servers.\" >> dnsmasq.conf.example; \\\n        echo \"#proxy-dnssec\" >> dnsmasq.conf.example; \\\n        cat trust-anchors.conf >> dnsmasq.conf.example; \\\n    fi; \\\n    sed -i '/^# Include /d' dnsmasq.conf.example; \\\n    sed -i '/^#conf-/d' dnsmasq.conf.example; \\\n    cp dnsmasq.conf.example \"${SAMPLE_CFG_DIR}\"; \\\n    cd ..; \\\n    rm -f \"${DNSMASQ_COMMIT}.tar.gz\"; \\\n    rm -rf dnsmasq; \\\n    # do some cleanup\n    apk del --purge .build-deps; \\\n    rm -rf /tmp/* /var/tmp/* /var/cache/apk/* /usr/local/src/*;\n\nCOPY docker-entrypoint.sh /usr/local/bin/\n\nRUN set -ex; \\\n    chmod +x /usr/local/bin/docker-entrypoint.sh;\n\nHEALTHCHECK --interval=1m --timeout=3s \\\n    CMD [[ -n \"$(dig @127.0.0.1 +time=3 +short -p \"${LISTEN_PORT}\" google.com)\" ]] || exit 1\n\nEXPOSE ${LISTEN_PORT}/udp\n\n#VOLUME [ \"${CFG_DIR}\" ]\nWORKDIR /usr/local/var/dnsmasq\nENTRYPOINT [ \"docker-entrypoint.sh\" ]\n"
}