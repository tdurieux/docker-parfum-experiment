{
  "startTime": 1674240441244,
  "endTime": 1674240441601,
  "originalSmells": [
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 39,
        "lineEnd": 39,
        "columnStart": 4,
        "columnEnd": 15
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 48,
        "lineEnd": 48,
        "columnStart": 4,
        "columnEnd": 31
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 66,
        "lineEnd": 66,
        "columnStart": 7,
        "columnEnd": 35
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 74,
        "lineEnd": 74,
        "columnStart": 4,
        "columnEnd": 34
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 83,
        "lineEnd": 83,
        "columnStart": 7,
        "columnEnd": 35
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 119,
        "lineEnd": 132,
        "columnStart": 4,
        "columnEnd": 28
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 114,
        "lineEnd": 115,
        "columnStart": 26,
        "columnEnd": 14
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 114,
        "lineEnd": 115,
        "columnStart": 26,
        "columnEnd": 14
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM ampervue/python34\n\n# https://github.com/ampervue/docker-python34-opencv3\n\nMAINTAINER David Karchmer <dkarchmer@ampervue.com>\n\n#####################################################################\n#\n# Image based on Ubuntu:14.04\n#\n#   with\n#     - Python 3.4\n#     - OpenCV 3 (built)\n#     - FFMPEG (built)\n#   plus a bunch of build/web essentials via wheezy\n#   including MySQL and Postgres clients:\n#      https://github.com/docker-library/docs/tree/master/buildpack-deps\n#\n#####################################################################\n\nENV NUM_CORES 4\n\n\nWORKDIR /usr/local/src\n\nRUN git clone --depth 1 https://github.com/l-smash/l-smash \\\n    && git clone --depth 1 git://git.videolan.org/x264.git \\\n    && hg clone https://bitbucket.org/multicoreware/x265 \\\n    && git clone --depth 1 git://source.ffmpeg.org/ffmpeg \\\n    && git clone https://github.com/Itseez/opencv.git \\\n    && git clone https://github.com/Itseez/opencv_contrib.git \\\n    && git clone --depth 1 git://github.com/mstorsjo/fdk-aac.git \\\n    && git clone --depth 1 https://chromium.googlesource.com/webm/libvpx \\\n    && git clone https://git.xiph.org/opus.git \\\n    && git clone --depth 1 https://github.com/mulx/aacgain.git\n\n# Build L-SMASH\n# =================================\nWORKDIR /usr/local/src/l-smash\nRUN ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" \\\n    && make -j ${NUM_CORES} \\\n    && make install\n# =================================\n\n\n# Build libx264\n# =================================\nWORKDIR /usr/local/src/x264\nRUN ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --enable-static \\\n    && make -j ${NUM_CORES} \\\n    && make install\n# =================================\n\n\n# Build libx265\n# =================================\nWORKDIR  /usr/local/src/x265/build/linux\nRUN cmake -DCMAKE_INSTALL_PREFIX:PATH=/usr ../../source \\\n    && make -j ${NUM_CORES} \\\n    && make install\n# =================================\n\n# Build libfdk-aac\n# =================================\nWORKDIR /usr/local/src/fdk-aac\nRUN autoreconf -fiv \\\n    && ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --disable-shared \\\n    && make -j ${NUM_CORES} \\\n    && make install\n# =================================\n\n# Build libvpx\n# =================================\nWORKDIR /usr/local/src/libvpx\nRUN ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --disable-examples \\\n    && make -j ${NUM_CORES} \\\n    && make install\n# =================================\n\n# Build libopus\n# =================================\nWORKDIR /usr/local/src/opus\nRUN ./autogen.sh \\\n    && ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --disable-shared \\\n    && make -j ${NUM_CORES} \\\n    && make install\n# =================================\n\n\n\n# Build OpenCV 3.x\n# =================================\n#RUN apt-get update -qq && apt-get install -y --force-yes libopencv-dev\nRUN pip3 install --no-cache-dir --upgrade numpy\nWORKDIR /usr/local/src\nRUN mkdir -p opencv/release\nWORKDIR /usr/local/src/opencv/release\nRUN cmake -D CMAKE_BUILD_TYPE=RELEASE \\\n          -D CMAKE_INSTALL_PREFIX=/usr/local \\\n          -D WITH_TBB=ON \\\n          -D BUILD_PYTHON_SUPPORT=ON \\\n          -D WITH_V4L=ON \\\n          -D OPENCV_EXTRA_MODULES_PATH=../../opencv_contrib/modules \\\n          ..\n\nRUN make -j ${NUM_CORES} \\\n    && make install \\\n    && sh -c 'echo \"/usr/local/lib\" > /etc/ld.so.conf.d/opencv.conf' \\\n    && ldconfig\n# =================================\n\n\n# Build ffmpeg.\n# =================================\nRUN apt-get update -qq && apt-get install --no-install-recommends -y --force-yes \\\n    libass-dev && rm -rf /var/lib/apt/lists/*;\n\n#            --enable-libx265 - Does not work on recent builds\nWORKDIR /usr/local/src/ffmpeg\nRUN ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --extra-libs=\"-ldl\" \\\n            --enable-gpl \\\n            --enable-libass \\\n            --enable-libfdk-aac \\\n            --enable-libfontconfig \\\n            --enable-libfreetype \\\n            --enable-libfribidi \\\n            --enable-libmp3lame \\\n            --enable-libopus \\\n            --enable-libtheora \\\n            --enable-libvorbis \\\n            --enable-libvpx \\\n            --enable-libx264 \\\n            --enable-nonfree \\\n    && make -j ${NUM_CORES} \\\n    && make install\n# =================================\n\n\n# Remove all tmpfile\n# =================================\nWORKDIR /usr/local/\nRUN rm -rf /usr/local/src\n# =================================\n\n"
}