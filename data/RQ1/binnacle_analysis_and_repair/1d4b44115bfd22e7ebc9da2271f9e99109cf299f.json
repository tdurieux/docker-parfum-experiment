{
  "startTime": 1674248040464,
  "endTime": 1674248040718,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 35,
        "lineEnd": 35,
        "columnStart": 18,
        "columnEnd": 70
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 36,
        "lineEnd": 36,
        "columnStart": 4,
        "columnEnd": 116
      }
    },
    {
      "rule": "wgetUseHttpsUrl",
      "position": {
        "lineStart": 43,
        "lineEnd": 43,
        "columnStart": 4,
        "columnEnd": 59
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 44,
        "lineEnd": 44,
        "columnStart": 4,
        "columnEnd": 35
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 6,
        "lineEnd": 7,
        "columnStart": 36,
        "columnEnd": 48
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 34,
        "lineEnd": 34,
        "columnStart": 4,
        "columnEnd": 41
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 34,
        "lineEnd": 34,
        "columnStart": 4,
        "columnEnd": 41
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 6,
        "lineEnd": 7,
        "columnStart": 36,
        "columnEnd": 48
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 34,
        "lineEnd": 34,
        "columnStart": 4,
        "columnEnd": 41
      }
    }
  ],
  "repairedSmells": [
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 34,
        "lineEnd": 34,
        "columnStart": 4,
        "columnEnd": 65
      }
    }
  ],
  "repairedDockerfile": "FROM nvidia/cuda:9.0-base\nLABEL maintainer=\"Radek Osmulski <www.github.com/radekosmulski>\"\n\nENV LANG=C.UTF-8 LC_ALL=C.UTF-8\nENV PATH /opt/conda/bin:$PATH\n\nRUN apt-get update --fix-missing && apt-get install --no-install-recommends -y wget bzip2 ca-certificates \\\n    libglib2.0-0 libxext6 libsm6 libxrender1 git && rm -rf /var/lib/apt/lists/*;\n\nRUN wget --quiet https://repo.continuum.io/archive/Anaconda3-5.2.0-Linux-x86_64.sh -O ~/anaconda.sh && \\\n    /bin/bash ~/anaconda.sh -b -p /opt/conda && \\\n    rm ~/anaconda.sh && \\\n    ln -s /opt/conda/etc/profile.d/conda.sh /etc/profile.d/conda.sh && \\\n    echo \". /opt/conda/etc/profile.d/conda.sh\" >> ~/.bashrc && \\\n    echo \"conda activate fastai\" >> ~/.bashrc\n\nWORKDIR /root\n\nRUN git clone https://github.com/fastai/fastai.git && cd fastai && conda env create\n\n# configure jupyter\nRUN jupyter notebook --generate-config\n\n# This will set the password on the notebook to 'jupyter'. To generate a hash corresponding to a password\n# of your choice, run the code below inside a Python interpreter\n# from notebook.auth import passwd; print(passwd(<your_password>))\nARG jupass=sha1:85ff16c0f1a9:c296112bf7b82121f5ec73ef4c1b9305b9e538af\n\nRUN echo \"c.NotebookApp.password = u'\"$jupass\"'\" >> $HOME/.jupyter/jupyter_notebook_config.py\nRUN echo \"c.NotebookApp.ip = '*'\\nc.NotebookApp.open_browser = False\" >> $HOME/.jupyter/jupyter_notebook_config.py\n\n# create ssl cert for jupyter notebook\nRUN openssl req -x509 -nodes -days 365 -newkey rsa:1024 -keyout $HOME/mykey.key -out $HOME/mycert.pem -subj \"/C=IE\"\n\nRUN apt-get install --no-install-recommends -y curl grep sed dpkg && \\\n    TINI_VERSION=$( curl -f https://github.com/krallin/tini/releases/latest | grep -o \"/v.*\\\"\" | sed 's:^..\\(.*\\).$:\\1:') && \\\n    curl -f -L \"https://github.com/krallin/tini/releases/download/v${TINI_VERSION}/tini_${TINI_VERSION}.deb\" > tini.deb && \\\n    dpkg -i tini.deb && \\\n    rm tini.deb && \\\n    apt-get clean && rm -rf /var/lib/apt/lists/*;\n\nCOPY data.py .\nRUN mkdir data\nRUN wget https://pjreddie.com/media/files/cifar.tgz -P data/\nRUN tar -xf data/cifar.tgz -C data/ && rm data/cifar.tgz\nRUN python data.py\nRUN rm -rf data/cifar.tgz data/cifar\n\nVOLUME workspace /root/workspace\n\nEXPOSE 8888\n\nRUN cd fastai && /bin/bash -c \"source activate fastai && python setup.py install\"\n\nENTRYPOINT [ \"/usr/bin/tini\", \"--\" ]\nSHELL [ \"/bin/bash\", \"-c\" ]\nCMD source activate fastai && jupyter notebook --certfile=mycert.pem --keyfile mykey.key --allow-root --notebook-dir='workspace'\n"
}