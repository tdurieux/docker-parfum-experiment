{
  "startTime": 1674240701655,
  "endTime": 1674240702125,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 77,
        "lineEnd": 77,
        "columnStart": 4,
        "columnEnd": 48
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 8,
        "lineEnd": 67,
        "columnStart": 4,
        "columnEnd": 19
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 8,
        "lineEnd": 67,
        "columnStart": 4,
        "columnEnd": 19
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM nvidia/cuda:8.0-cudnn5-devel\n\nMAINTAINER berlius <berlius52@yahoo.com>\n\n# This project contains my code and that of https://github.com/saiprashanths/dl-docker/\n\nRUN apt-get update && apt-get install --no-install-recommends -y swig \\\n\t\tbc \\\n\t\tbuild-essential \\\n\t\tcmake \\\n\t\tcurl \\\n\t\tg++ \\\n\t\tgfortran \\\n\t\tgit \\\n\t\tlibffi-dev \\\n\t\tlibfreetype6-dev \\\n\t\tlibhdf5-dev \\\n\t\tlibjpeg-dev \\\n\t\tliblcms2-dev \\\n\t\tlibopenblas-dev \\\n\t\tliblapack-dev \\\n\t\tlibopenjpeg2 \\\n\t\tlibpng12-dev \\\n\t\tlibssl-dev \\\n\t\tlibtiff5-dev \\\n\t\tlibwebp-dev \\\n\t\tlibzmq3-dev \\\n\t\tnano \\\n\t\tpkg-config \\\n\t\tpython-dev \\\n\t\tsoftware-properties-common \\\n\t\tunzip \\\n\t\tvim \\\n\t\twget \\\n\t\tzlib1g-dev \\\n\t\tlibsdl2-2.0 \\\n\t\tlibsdl2-dev \\\n\t\topenjdk-7-jdk \\\n\t\tlua5.1 \\\n\t\tlibxerces-c3.1 \\\n\t\tliblua5.1-0-dev \\\n\t\tlibav-tools python-tk \\\n\t\ttimidity \\\n\t\tjackd1 \\\n\t\tlxterminal \\\n\t\tmencoder \\\n\t\tgnome-terminal \\\n\t\tpython-numpy \\\n\t\tpython-scipy \\\n\t\tpython-nose \\\n\t\tpython-h5py \\\n\t\tpython-skimage \\\n\t\tpython-matplotlib \\\n\t\tpython-pandas \\\n\t\tpython-sklearn \\\n\t\tpython-sympy \\\n\t\tlibboost-all-dev \\\n\t\tlibgflags-dev \\\n\t\tlibgoogle-glog-dev \\\n\t\tlibhdf5-serial-dev \\\n\t\tlibleveldb-dev \\\n\t\tliblmdb-dev \\\n\t\tlibopencv-dev \\\n\t\tlibprotobuf-dev \\\n\t\tlibsnappy-dev \\\n\t\tprotobuf-compiler \\\n\t\t&& \\\n\tapt-get clean && \\\n\tapt-get autoremove && \\\n\trm -rf /var/lib/apt/lists/* && \\\n# Link BLAS library to use OpenBLAS using the alternatives mechanism (https://www.scipy.org/scipylib/building/linux.html#debian-ubuntu)\n\tupdate-alternatives --set libblas.so.3 /usr/lib/openblas-base/libblas.so.3\n\n\n# Install pip\nRUN curl -f -O https://bootstrap.pypa.io/get-pip.py && \\\n\tpython get-pip.py && \\\n\trm get-pip.py\n\n# Add SNI support to Python\nRUN pip --no-cache-dir install \\\n\t\tpyopenssl \\\n\t\tndg-httpsclient \\\n\t\tpyasn1\n\n# Install TensorFlow\nRUN pip --no-cache-dir install tensorflow-gpu\n\n\n\n# Install other useful Python packages using pip\nRUN pip --no-cache-dir install --upgrade ipython && \\\n\tpip --no-cache-dir install \\\n\t\tCython \\\n\t\tipykernel \\\n\t\tjupyter \\\n\t\tpath.py \\\n\t\tPillow \\\n\t\tpygments \\\n\t\ttflearn \\\n\t\tsix \\\n\t\tsphinx \\\n\t\twheel \\\n\t\tzmq \\\n\t\ttqdm  \\\n\t\tgym[all] \\\n\t\tchainer \\\n\t\tprettytensor \\\n\t\tprogressbar \\\n\t\tipdb \\\n\t\tscikit-neuralnetwork \\\n\t\t&& \\\n\tpython -m ipykernel.kernelspec\n\n\nRUN update-ca-certificates -f\n\nENV JAVA_HOME=/usr/lib/jvm/java-7-openjdk-amd64 \\\n    CLASSPATH=/usr/lib/jvm/java-7-openjdk-amd64/libtools.jar:$CLASSPATH \\\n    PATH=/usr/lib/jvm/java-7-openjdk-amd64/bin:$PATH\n\n# Install Caffe\nRUN git clone -b master --depth 1 https://github.com/BVLC/caffe.git /root/caffe && \\\n\tcd /root/caffe && \\\n\tcat python/requirements.txt | xargs -n1 pip install && \\\n\tmkdir build && cd build && \\\n\tcmake -DUSE_CUDNN=1 -DBLAS=Open .. && \\\n\tmake -j\"$(nproc)\" all && \\\n\tmake install\n\n# Set up Caffe environment variables\nENV CAFFE_ROOT=/root/caffe\nENV PYCAFFE_ROOT=$CAFFE_ROOT/python\nENV PYTHONPATH=$PYCAFFE_ROOT:$PYTHONPATH \\\n\tPATH=$CAFFE_ROOT/build/tools:$PYCAFFE_ROOT:$PATH\n\nRUN echo \"$CAFFE_ROOT/build/lib\" >> /etc/ld.so.conf.d/caffe.conf && ldconfig\n\n\n# Install Theano and set up Theano config (.theanorc) for CUDA and OpenBLAS\nRUN pip --no-cache-dir install git+git://github.com/Theano/Theano.git && \\\n\t\\\n\techo \"[global]\\ndevice=gpu\\nfloatX=float32\\noptimizer_including=cudnn\\nmode=FAST_RUN \\\n\t\t\\n[lib]\\ncnmem=0.95 \\\n\t\t\\n[nvcc]\\nfastmath=True \\\n\t\t\\n[blas]\\nldflag = -L/usr/lib/openblas-base -lopenblas \\\n\t\t\\n[DebugMode]\\ncheck_finite=1\" \\\n\t> /root/.theanorc\n\n\n# Install Keras\nRUN pip --no-cache-dir install git+git://github.com/fchollet/keras.git@\n\n\n# Install Lasagne\nRUN pip --no-cache-dir install git+git://github.com/Lasagne/Lasagne.git\n\n\n# Install Torch\nRUN git clone https://github.com/torch/distro.git /root/torch --recursive && \\\n\tcd /root/torch && \\\n\tbash install-deps && \\\n\tyes no | ./install.sh\n\n# Export the LUA evironment variables manually\nENV LUA_PATH='/root/.luarocks/share/lua/5.1/?.lua;/root/.luarocks/share/lua/5.1/?/init.lua;/root/torch/install/share/lua/5.1/?.lua;/root/torch/install/share/lua/5.1/?/init.lua;./?.lua;/root/torch/install/share/luajit-2.1.0-beta1/?.lua;/usr/local/share/lua/5.1/?.lua;/usr/local/share/lua/5.1/?/init.lua' \\\n\tLUA_CPATH='/root/.luarocks/lib/lua/5.1/?.so;/root/torch/install/lib/lua/5.1/?.so;./?.so;/usr/local/lib/lua/5.1/?.so;/usr/local/lib/lua/5.1/loadall.so' \\\n\tPATH=/root/torch/install/bin:$PATH \\\n\tLD_LIBRARY_PATH=/root/torch/install/lib:$LD_LIBRARY_PATH \\\n\tDYLD_LIBRARY_PATH=/root/torch/install/lib:$DYLD_LIBRARY_PATH\nENV LUA_CPATH='/root/torch/install/lib/?.so;'$LUA_CPATH\n\n\nRUN luarocks install display\nRUN luarocks install hdf5\nRUN luarocks install image\nRUN luarocks install loadcaffe\nRUN luarocks install mnist\n\n# Install the latest versions of nn, cutorch, cunn, cuDNN bindings and iTorch\nRUN luarocks install nn && \\\n\tluarocks install cutorch && \\\n\tluarocks install cunn && \\\n\t\\\n\tcd /root && git clone https://github.com/soumith/cudnn.torch.git && cd cudnn.torch && \\\n\tgit checkout R4 && \\\n\tluarocks make && \\\n\t\\\n\tcd /root && git clone https://github.com/facebook/iTorch.git && \\\n\tcd iTorch && \\\n\tluarocks make\n\n# Set up notebook config\nCOPY jupyter_notebook_config.py /root/.jupyter/\n\n# Jupyter has issues with being run directly: https://github.com/ipython/ipython/issues/7062\nCOPY run_jupyter.sh /root/\n\n# Expose Ports for TensorBoard (6006), Ipython (8888)\nEXPOSE 6006 8888 8000\n\nWORKDIR \"/root\"\nCMD [\"jackd -R -d alsa -d hw:1\"]\nCMD [\"/bin/bash\"]\n"
}