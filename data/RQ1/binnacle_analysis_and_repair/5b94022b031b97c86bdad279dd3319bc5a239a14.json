{
  "startTime": 1674239703217,
  "endTime": 1674239703666,
  "originalSmells": [
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 25,
        "lineEnd": 25,
        "columnStart": 1,
        "columnEnd": 23
      }
    },
    {
      "rule": "gpgUseBatchFlag",
      "position": {
        "lineStart": 41,
        "lineEnd": 41,
        "columnStart": 5,
        "columnEnd": 109
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 136,
        "lineEnd": 139,
        "columnStart": 1,
        "columnEnd": 2
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "ARG BASE_IMAGE\nFROM ${BASE_IMAGE}\nLABEL maintainer=\"support@strapdata.com\"\nLABEL description=\"Elassandra docker image\"\n\n# explicitly set user/group IDs\nRUN groupadd -r cassandra --gid=999 && useradd -r -g cassandra --uid=999 cassandra\n\nRUN set -ex; \\\n\tapt-get update; \\\n\tapt-get install -y --no-install-recommends \\\n# solves warning: \"jemalloc shared library could not be preloaded to speed up memory allocations\"\n\t\tlibjemalloc1 \\\n# free is used by cassandra-env.sh\n\t\tprocps \\\n# \"ip\" is not required by Cassandra itself, but is commonly used in scripting Cassandra's configuration (since it is so fixated on explicit IP addresses)\n\t\tiproute2 \\\n# it's nice to have curl for elasticsearch request\n\t\tcurl \\\n\t\tpython \\\n\t\tpython-pip \\\n\t\tpython-setuptools \\\n\t\tjq \\\n\t; \\\n\tpip install --no-cache-dir -U pip yq; \\\n\tif ! command -v gpg > /dev/null; then \\\n\t\tapt-get install -y --no-install-recommends \\\n\t\t\tdirmngr \\\n\t\t\tgnupg \\\n\t\t; \\\n\tfi; \\\n\trm -rf /var/lib/apt/lists/*\n\n# grab gosu for easy step-down from root\nENV GOSU_VERSION 1.10\nRUN set -x \\\n\t&& apt-get update && apt-get install -y --no-install-recommends ca-certificates wget && rm -rf /var/lib/apt/lists/* \\\n\t&& wget -O /usr/local/bin/gosu \"https://github.com/tianon/gosu/releases/download/$GOSU_VERSION/gosu-$(dpkg --print-architecture)\" \\\n\t&& wget -O /usr/local/bin/gosu.asc \"https://github.com/tianon/gosu/releases/download/$GOSU_VERSION/gosu-$(dpkg --print-architecture).asc\" \\\n\t&& export GNUPGHOME=\"$(mktemp -d)\" \\\n\t\t&& gpg --batch --no-tty --keyserver ha.pool.sks-keyservers.net --recv-keys B42F6819007F00F88E364FD4036A9C25BF357DD4 \\\n\t&& gpg --no-tty --batch --verify /usr/local/bin/gosu.asc /usr/local/bin/gosu \\\n\t&& { command -v gpgconf && gpgconf --kill all || :; } \\\n\t&& rm -rf \"$GNUPGHOME\" /usr/local/bin/gosu.asc \\\n\t&& chmod +x /usr/local/bin/gosu \\\n\t&& gosu nobody true \\\n\t&& apt-get purge -y --auto-remove ca-certificates wget\n\n# https://wiki.apache.org/cassandra/DebianPackaging#Adding_Repository_Keys\nENV GPG_KEYS \\\n# gpg: key 0353B12C: public key \"T Jake Luciani <jake@apache.org>\" imported\n\t514A2AD631A57A16DD0047EC749D6EEC0353B12C \\\n# gpg: key FE4B2BDA: public key \"Michael Shuler <michael@pbandjelly.org>\" imported\n\tA26E528B271F19B9E5D8E19EA278B781FE4B2BDA\n#RUN set -ex; \\\n#\texport GNUPGHOME=\"$(mktemp -d)\"; \\\n#\tfor key in $GPG_KEYS; do \\\n#\t\tgpg --keyserver ha.pool.sks-keyservers.net --recv-keys \"$key\"; \\\n#\tdone; \\\n#\tgpg --export $GPG_KEYS > /etc/apt/trusted.gpg.d/cassandra.gpg; \\\n#\tcommand -v gpgconf && gpgconf --kill all || :; \\\n#\trm -rf \"$GNUPGHOME\"; \\\n#\tapt-key list\n\n\n# build-time arguments\nARG ELASSANDRA_VERSION\nENV ELASSANDRA_VERSION=${ELASSANDRA_VERSION}\n\n# optional sha1 of the commit\nARG ELASSANDRA_COMMIT\nENV ELASSANDRA_COMMIT=${ELASSANDRA_COMMIT}\n\n# location of the elassandra package on the building machine\nARG ELASSANDRA_PACKAGE\n\n# copy the elassandra package into the image\nCOPY ${ELASSANDRA_PACKAGE} /elassandra-${ELASSANDRA_VERSION}.deb\n\nRUN set -ex; \\\n\n# https://bugs.debian.org/877677\n# update-alternatives: error: error creating symbolic link '/usr/share/man/man1/rmid.1.gz.dpkg-tmp': No such file or directory\n\tmkdir -p /usr/share/man/man1/; \\\n\n\tdpkgArch=\"$(dpkg --print-architecture)\"; \\\n\tcase \"$dpkgArch\" in \\\n# \t\tamd64|i386) \\\n# # arches officialy included in upstream's repo metadata\n# \t\t\techo 'deb http://www.apache.org/dist/cassandra/debian %%CASSANDRA_DIST%%x main' > /etc/apt/sources.list.d/cassandra.list; \\\n# \t\t\tapt-get update; \\\n# \t\t\t;; \\\n\t\t# elassandra edit: we do not have a debian repository, so we are always going to the special case below\n\t\t*) \\\n# we're on an architecture upstream doesn't include in their repo Architectures\n# but their provided packages are \"Architecture: all\" so we can download them directly instead\n\t\t\t\\\n# save a list of installed packages so build deps can be removed cleanly\n\t\t\tsavedAptMark=\"$(apt-mark showmanual)\"; \\\n\t\t\t\\\n# fetch a few build dependencies\n\t\t\tapt-get update; \\\n\t\t\tapt-get install -y --no-install-recommends \\\n\t\t\t\twget ca-certificates \\\n\t\t\t\tdpkg-dev \\\n\t\t\t; \\\n# we don't remove APT lists here because they get re-downloaded and removed later\n\t\t\t\\\n# reset apt-mark's \"manual\" list so that \"purge --auto-remove\" will remove all build dependencies\n# (which is done after we install the built packages so we don't have to redownload any overlapping dependencies)\n\t\t\tapt-mark showmanual | xargs apt-mark auto > /dev/null; \\\n\t\t\tapt-mark manual $savedAptMark; \\\n\t\t\t\\\n# # download the two \"arch: all\" packages we need\n\t\t\ttempDir=\"$(mktemp -d)\"; \\\n\t\t\t# for pkg in cassandra cassandra-tools; do \\\n\t\t\t# \tdeb=\"${pkg}_${CASSANDRA_VERSION}_all.deb\"; \\\n\t\t\t# \twget -O \"$tempDir/$deb\" \"https://www.apache.org/dist/cassandra/debian/pool/main/c/cassandra/$deb\"; \\\n\t\t\t# done; \\\n\t\t\t\\\n\t\t\t# elassandra edit: we copy the deb file into the local temp repository\n\t\t  cp /elassandra-${ELASSANDRA_VERSION}.deb $tempDir/ ; \\\n# create a temporary local APT repo to install from (so that dependency resolution can be handled by APT, as it should be)\n\t\t\tls -lAFh \"$tempDir\"; \\\n\t\t\t( cd \"$tempDir\" && dpkg-scanpackages . > Packages ); \\\n\t\t\tgrep '^Package: ' \"$tempDir/Packages\"; \\\n\t\t\techo \"deb [ trusted=yes ] file://$tempDir ./\" > /etc/apt/sources.list.d/temp.list; \\\n# work around the following APT issue by using \"Acquire::GzipIndexes=false\" (overriding \"/etc/apt/apt.conf.d/docker-gzip-indexes\")\n#   Could not open file /var/lib/apt/lists/partial/_tmp_tmp.ODWljpQfkE_._Packages - open (13: Permission denied)\n#   ...\n#   E: Failed to fetch store:/var/lib/apt/lists/partial/_tmp_tmp.ODWljpQfkE_._Packages  Could not open file /var/lib/apt/lists/partial/_tmp_tmp.ODWljpQfkE_._Packages - open (13: Permission denied)\n\t\t\tapt-get -o Acquire::GzipIndexes=false update; \\\n\t\t\t;; \\\n\tesac; \\\n\n\tapt-get install --no-install-recommends -y \\\n\t\t# we ins\n\t\telassandra=\"$ELASSANDRA_VERSION\" \\\n\t; \\\n\n\trm -rf /var/lib/apt/lists/*; \\\n\trm /elassandra-${ELASSANDRA_VERSION}.deb; \\\n\n\tif [ -n \"$tempDir\" ]; then \\\n# if we have leftovers from building, let's purge them (including extra, unnecessary build deps)\n\t\tapt-get purge -y --auto-remove; \\\n\t\trm -rf \"$tempDir\" /etc/apt/sources.list.d/temp.list; \\\n\tfi\n\nENV CASSANDRA_CONFIG /etc/cassandra\n\nRUN set -ex; \\\n\t\\\n\tdpkgArch=\"$(dpkg --print-architecture)\"; \\\n\tcase \"$dpkgArch\" in \\\n\t\tppc64el) \\\n# https://issues.apache.org/jira/browse/CASSANDRA-13345\n# \"The stack size specified is too small, Specify at least 328k\"\n\t\t\tif grep -q -- '^-Xss' \"$CASSANDRA_CONFIG/jvm.options\"; then \\\n# 3.11+ (jvm.options)\n\t\t\t\tgrep -- '^-Xss256k$' \"$CASSANDRA_CONFIG/jvm.options\"; \\\n\t\t\t\tsed -ri 's/^-Xss256k$/-Xss512k/' \"$CASSANDRA_CONFIG/jvm.options\"; \\\n\t\t\t\tgrep -- '^-Xss512k$' \"$CASSANDRA_CONFIG/jvm.options\"; \\\n\t\t\telif grep -q -- '-Xss256k' \"$CASSANDRA_CONFIG/cassandra-env.sh\"; then \\\n# 3.0 (cassandra-env.sh)\n\t\t\t\tsed -ri 's/-Xss256k/-Xss512k/g' \"$CASSANDRA_CONFIG/cassandra-env.sh\"; \\\n\t\t\t\tgrep -- '-Xss512k' \"$CASSANDRA_CONFIG/cassandra-env.sh\"; \\\n\t\t\tfi; \\\n\t\t\t;; \\\n\tesac; \\\n\t\\\n# https://issues.apache.org/jira/browse/CASSANDRA-11661\n\tsed -ri 's/^(JVM_PATCH_VERSION)=.*/\\1=25/' \"$CASSANDRA_CONFIG/cassandra-env.sh\"\n\n# copy readiness probe script for kubernetes\nCOPY ready-probe.sh /\n# Add custom logback.xml including variables.\nCOPY logback.xml $CASSANDRA_CONFIG/\n\n# Add default JMX password file\nCOPY jmxremote.password $CASSANDRA_CONFIG/\n\n# Can't use COPY --chown here because it is not supported on old docker versions\nRUN chown cassandra:cassandra ready-probe.sh $CASSANDRA_CONFIG/logback.xml $CASSANDRA_CONFIG/jmxremote.password && chmod 0400 $CASSANDRA_CONFIG/jmxremote.password\n\nCOPY docker-entrypoint.sh /usr/local/bin/\nRUN ln -s usr/local/bin/docker-entrypoint.sh /docker-entrypoint.sh # backwards compat\nENTRYPOINT [\"docker-entrypoint.sh\"]\n\n# create the entrypoint init.d directory\nRUN mkdir -p /docker-entrypoint-init.d && chown cassandra:cassandra /docker-entrypoint-init.d\n\nVOLUME /var/lib/cassandra\n\n# elassandra installation directories\nENV CASSANDRA_HOME /usr/share/cassandra\nENV CASSANDRA_CONF /etc/cassandra\nENV CASSANDRA_LOGDIR /var/log/cassandra\nENV CASSANDRA_DATA /var/lib/cassandra\n\n# docker-entrypoint.sh defines some default env vars when starting the container.\n# But those vars are not available from other entrypoint, such as ready-probe.sh, or 'docker exec'.\n# A workaround is to define important defaults right in the Dockerfile\nENV CASSANDRA_DAEMON org.apache.cassandra.service.ElassandraDaemon\n\n# 7000: intra-node communication\n# 7001: TLS intra-node communication\n# 7199: JMX\n# 9042: CQL\n# 9142 : encrypted CQL\n# 9160: thrift service\n# 9200: elassandra HTTP\n# 9300: elasticsearch transport\nEXPOSE 7000 7001 7199 9042 9142 9160 9200 9300\nCMD [\"cassandra\", \"-f\"]\n"
}