{
  "startTime": 1674240658270,
  "endTime": 1674240658585,
  "originalSmells": [
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 18,
        "lineEnd": 18,
        "columnStart": 4,
        "columnEnd": 134
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 19,
        "lineEnd": 19,
        "columnStart": 4,
        "columnEnd": 60
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 20,
        "lineEnd": 20,
        "columnStart": 4,
        "columnEnd": 61
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 21,
        "lineEnd": 21,
        "columnStart": 4,
        "columnEnd": 58
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 70,
        "lineEnd": 70,
        "columnStart": 4,
        "columnEnd": 80
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# ====================================================================== #\n# Android SDK Docker Image\n# ====================================================================== #\n\n# Base image\n# ---------------------------------------------------------------------- #\nFROM ubuntu:18.04\n\n# Author\n# ---------------------------------------------------------------------- #\nLABEL maintainer \"thyrlian@gmail.com\"\n\n# support multiarch: i386 architecture\n# install Java\n# install essential tools\n# install Qt\nRUN dpkg --add-architecture i386 && \\\n    apt-get update -y && \\\n    apt-get install -y --no-install-recommends libncurses5:i386 libc6:i386 libstdc++6:i386 lib32gcc1 lib32ncurses5 lib32z1 zlib1g:i386 && \\\n    apt-get install -y --no-install-recommends openjdk-8-jdk && \\\n    apt-get install -y --no-install-recommends git wget unzip && \\\n    apt-get install -y --no-install-recommends qt5-default && rm -rf /var/lib/apt/lists/*;\n\n# download and install Gradle\n# https://services.gradle.org/distributions/\nARG GRADLE_VERSION=5.2.1\nRUN cd /opt && \\\n    wget -q https://services.gradle.org/distributions/gradle-${GRADLE_VERSION}-bin.zip && \\\n    unzip gradle*.zip && \\\n    ls -d */ | sed 's/\\/*$//g' | xargs -I{} mv {} gradle && \\\n    rm gradle*.zip\n\n# download and install Kotlin compiler\n# https://github.com/JetBrains/kotlin/releases/latest\nARG KOTLIN_VERSION=1.3.21\nRUN cd /opt && \\\n    wget -q https://github.com/JetBrains/kotlin/releases/download/v${KOTLIN_VERSION}/kotlin-compiler-${KOTLIN_VERSION}.zip && \\\n    unzip *kotlin*.zip && \\\n    rm *kotlin*.zip\n\n# download and install Android SDK\n# https://developer.android.com/studio/#downloads\nARG ANDROID_SDK_VERSION=4333796\nENV ANDROID_HOME /opt/android-sdk\nRUN mkdir -p ${ANDROID_HOME} && cd ${ANDROID_HOME} && \\\n    wget -q https://dl.google.com/android/repository/sdk-tools-linux-${ANDROID_SDK_VERSION}.zip && \\\n    unzip *tools*linux*.zip && \\\n    rm *tools*linux*.zip\n\n# set the environment variables\nENV JAVA_HOME /usr/lib/jvm/java-8-openjdk-amd64\nENV GRADLE_HOME /opt/gradle\nENV KOTLIN_HOME /opt/kotlinc\nENV PATH ${PATH}:${GRADLE_HOME}/bin:${KOTLIN_HOME}/bin:${ANDROID_HOME}/emulator:${ANDROID_HOME}/tools:${ANDROID_HOME}/platform-tools:${ANDROID_HOME}/tools/bin\nENV _JAVA_OPTIONS -XX:+UnlockExperimentalVMOptions -XX:+UseCGroupMemoryLimitForHeap\n# WORKAROUND: for issue https://issuetracker.google.com/issues/37137213\nENV LD_LIBRARY_PATH ${ANDROID_HOME}/emulator/lib64:${ANDROID_HOME}/emulator/lib64/qt/lib\n\n# accept the license agreements of the SDK components\nADD license_accepter.sh /opt/\nRUN chmod +x /opt/license_accepter.sh && /opt/license_accepter.sh $ANDROID_HOME\n\n# setup adb server\nEXPOSE 5037\n\n# install and configure SSH server\nEXPOSE 22\nADD sshd-banner /etc/ssh/\nADD authorized_keys /tmp/\nRUN apt-get update -y && \\\n    apt-get install -y --no-install-recommends openssh-server supervisor locales && \\\n    mkdir -p /var/run/sshd /var/log/supervisord && \\\n    locale-gen en en_US en_US.UTF-8 && \\\n    apt-get remove -y locales && apt-get autoremove -y && \\\n    FILE_SSHD_CONFIG=\"/etc/ssh/sshd_config\" && \\\n    echo \"\\nBanner /etc/ssh/sshd-banner\" >> $FILE_SSHD_CONFIG && \\\n    echo \"\\nPermitUserEnvironment=yes\" >> $FILE_SSHD_CONFIG && \\\n    ssh-keygen -q -N \"\" -f /root/.ssh/id_rsa && \\\n    FILE_SSH_ENV=\"/root/.ssh/environment\" && \\\n    touch $FILE_SSH_ENV && chmod 600 $FILE_SSH_ENV && \\\n    printenv | grep \"JAVA_HOME\\|GRADLE_HOME\\|KOTLIN_HOME\\|ANDROID_HOME\\|LD_LIBRARY_PATH\\|PATH\" >> $FILE_SSH_ENV && \\\n    FILE_AUTH_KEYS=\"/root/.ssh/authorized_keys\" && \\\n    touch $FILE_AUTH_KEYS && chmod 600 $FILE_AUTH_KEYS && \\\n    for file in /tmp/*.pub; \\\n    do if [ -f \"$file\" ]; then echo \"\\n\" >> $FILE_AUTH_KEYS && cat $file >> $FILE_AUTH_KEYS && echo \"\\n\" >> $FILE_AUTH_KEYS; fi; \\\n    done && \\\n    (rm /tmp/*.pub 2> /dev/null || true) && rm -rf /var/lib/apt/lists/*;\n\nADD supervisord.conf /etc/supervisor/conf.d/\nCMD [\"/usr/bin/supervisord\"]\n"
}