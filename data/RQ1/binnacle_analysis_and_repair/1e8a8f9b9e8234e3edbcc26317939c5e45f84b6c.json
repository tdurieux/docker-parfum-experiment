{
  "startTime": 1674250847020,
  "endTime": 1674250847222,
  "originalSmells": [
    {
      "rule": "apkAddUseNoCache",
      "position": {
        "lineStart": 11,
        "lineEnd": 11,
        "columnStart": 4,
        "columnEnd": 30
      }
    },
    {
      "rule": "apkAddUseNoCache",
      "position": {
        "lineStart": 12,
        "lineEnd": 12,
        "columnStart": 4,
        "columnEnd": 16
      }
    },
    {
      "rule": "apkAddUseNoCache",
      "position": {
        "lineStart": 13,
        "lineEnd": 13,
        "columnStart": 4,
        "columnEnd": 16
      }
    },
    {
      "rule": "apkAddUseNoCache",
      "position": {
        "lineStart": 14,
        "lineEnd": 14,
        "columnStart": 4,
        "columnEnd": 19
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM golang:1.10-alpine3.7 AS src\nRUN apk add --no-cache git\nWORKDIR /go/src\nRUN go get -u github.com/kardianos/govendor\nCOPY cmd /go/src/cmd\nCOPY vendor /go/src/vendor\nRUN govendor sync -v\nRUN go install ./cmd/authorized-keys\n\nFROM alpine:3.7\nRUN apk update\nRUN apk add --no-cache openssh git shadow\nRUN apk add --no-cache curl\nRUN apk add --no-cache bash\nRUN apk add --no-cache mongodb\n\n# Generate host keys\nRUN ssh-keygen -A\nWORKDIR /home/git\n\n# --create-home             create the user's home directory\n# --user-group              create a group with the same name as the user\n# RUN adduser -D -s /usr/bin/git-shell git \\\nRUN useradd --user-group --create-home --shell /bin/bash git \\\n && usermod -p '*' git \\\n && mkdir -p /home/git/keys /home/git/.ssh \\\n && chown -R git:git /home/git \\\n && chmod 700 /home/git/keys /home/git/.ssh \\\n && find /home/git/.ssh /home/git/keys -type f -exec chmod 600 {} \\;\n\nARG REPOS_DIR=/repositories\nRUN mkdir -p $REPOS_DIR \\\n && chmod 700 $REPOS_DIR \\\n && git init --bare $REPOS_DIR/test.git \\\n && chown -R git:git $REPOS_DIR \\\n && find $REPOS_DIR -type f -exec chmod 600 {} \\;\n\n# This is a login shell for SSH accounts to provide restricted Git access.\n# It permits execution only of server-side Git commands implementing the\n# pull/push functionality, plus custom commands present in a subdirectory\n# named git-shell-commands in the userâ€™s home directory.\n# More info: https://git-scm.com/docs/git-shell\nCOPY git-shell-commands /home/git/git-shell-commands\n\n# COPY git-authorized-keys.sh /authorized-keys\nARG CACHE\nCOPY --from=src /go/bin/authorized-keys /authorized-keys\n\nCOPY git-command.sh /git-command\n\nRUN mkdir -p /var/log/git && chown -R git:git /var/log/git\nARG CONFIG=config/docker.json\n\nRUN mkdir -p /etc/gitorbit\nCOPY $CONFIG /etc/gitorbit/authorized_keys.json\n\n# sshd_config file is edited for enable access key and disable access password\n# COPY sshd_config /etc/ssh/sshd_config\nCOPY start.sh /start.sh\n\n# %f token passes the fingerprint SHA256:wi76P4RkpL9gWJx/p1Jr35r0Ri0/50NFPI4cVbT/4vc\nRUN sed -i -e \"/AuthorizedKeysCommand none/c\\AuthorizedKeysCommand /authorized-keys -config /etc/gitorbit/authorized_keys.json %f\" /etc/ssh/sshd_config\nRUN sed -i -e \"/AuthorizedKeysCommandUser /c\\AuthorizedKeysCommandUser git\" /etc/ssh/sshd_config\n\n# Disable password authentication\nRUN sed -i -e \"/#PasswordAuthentication/c\\PasswordAuthentication no\" /etc/ssh/sshd_config\n\n# Use public key authentication\nRUN sed -i -e \"/#PubkeyAuthentication/c\\PubkeyAuthentication yes\" /etc/ssh/sshd_config\n\n# Enable password-locked account\n# see also https://unix.stackexchange.com/questions/193066/how-to-unlock-account-for-public-key-ssh-authorization-but-not-for-password-aut\n# RUN sed -i -e \"/#UsePAM/c\\UsePAM yes\" /etc/ssh/sshd_config\n\nRUN sed -i -e \"/#LogLevel /c\\LogLevel DEBUG\" /etc/ssh/sshd_config\n\nEXPOSE 22\nCMD [\"sh\", \"/start.sh\"]\n"
}