{
  "startTime": 1674248093582,
  "endTime": 1674248094054,
  "originalSmells": [
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 92,
        "lineEnd": 92,
        "columnStart": 4,
        "columnEnd": 40
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 157,
        "lineEnd": 157,
        "columnStart": 19,
        "columnEnd": 30
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 45,
        "lineEnd": 45,
        "columnStart": 4,
        "columnEnd": 32
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 90,
        "lineEnd": 90,
        "columnStart": 4,
        "columnEnd": 29
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 105,
        "lineEnd": 105,
        "columnStart": 4,
        "columnEnd": 24
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 127,
        "lineEnd": 127,
        "columnStart": 4,
        "columnEnd": 25
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 155,
        "lineEnd": 155,
        "columnStart": 4,
        "columnEnd": 31
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 170,
        "lineEnd": 170,
        "columnStart": 4,
        "columnEnd": 26
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 32,
        "lineEnd": 32,
        "columnStart": 18,
        "columnEnd": 59
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 35,
        "lineEnd": 36,
        "columnStart": 4,
        "columnEnd": 18
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 32,
        "lineEnd": 32,
        "columnStart": 18,
        "columnEnd": 59
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 35,
        "lineEnd": 36,
        "columnStart": 4,
        "columnEnd": 18
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# Copyright 2018 Google LLC\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\nARG DISTRO_VERSION=trusty\nFROM ubuntu:${DISTRO_VERSION} AS devtools\n\nCOPY ci/install-retry.sh /retry3\n\n# Please keep the formatting below, it is used by `extract-readme.sh` and\n# `extract-install.md` to generate the contents of the top-level README.md and\n# INSTALL.md files.\n\n## [START INSTALL.md]\n\n# Install the minimal development tools.\n\n## [START README.md]\n\n# We use the `ubuntu-toolchain-r` PPA to get a modern version of CMake:\n\n# ```bash\nRUN apt update && apt install --no-install-recommends -y software-properties-common && rm -rf /var/lib/apt/lists/*;\nRUN add-apt-repository ppa:ubuntu-toolchain-r/test -y\nRUN apt update && \\\n    apt install --no-install-recommends -y cmake3 git gcc g++ make pkg-config tar wget \\\n        zlib1g-dev && rm -rf /var/lib/apt/lists/*;\n# ```\n\n# Ubuntu:14.04 ships with a very old version of OpenSSL, this version is not\n# supported by gRPC. We need to compile and install OpenSSL-1.0.2 from source.\n\n# ```bash\nWORKDIR /var/tmp/build\nRUN wget -q https://www.openssl.org/source/openssl-1.0.2n.tar.gz\nRUN tar xf openssl-1.0.2n.tar.gz && rm openssl-1.0.2n.tar.gz\nWORKDIR /var/tmp/build/openssl-1.0.2n\nRUN ./config --shared\nRUN make -j $(nproc)\nRUN make install\n# ```\n\n# Note that by default OpenSSL installs itself in `/usr/local/ssl`. Installing\n# on a more conventional location, such as `/usr/local` or `/usr`, can break\n# many programs in your system. OpenSSL 1.0.2 is actually incompatible with\n# with OpenSSL 1.0.0 which is the version expected by the programs already\n# installed by Ubuntu 14.04.\n\n# In any case, as the library installs itself in this non-standard location, we\n# also need to configure CMake and other build program to find this version of\n# OpenSSL:\n\n# ```bash\nENV OPENSSL_ROOT_DIR=/usr/local/ssl\nENV PKG_CONFIG_PATH=/usr/local/ssl/lib/pkgconfig\n# ```\n\n## [START IGNORED]\n# Verify that the tools above are enough to compile google-cloud-cpp when using\n# external projects.\nWORKDIR /home/build/external\nCOPY . /home/build/external\nRUN cmake -H. -Bcmake-out -DCMAKE_BUILD_TYPE=Debug\nRUN cmake --build cmake-out -- -j $(nproc)\nRUN (cd cmake-out && ctest --output-on-failure)\n## [END IGNORED]\n\n## [END README.md]\n\nFROM devtools\nCOPY ci/install-retry.sh /retry3\n\n# #### libcurl.\n\n# Because google-cloud-cpp uses both gRPC and curl, we need to compile libcurl\n# against the same version of OpenSSL:\n\n# ```bash\nWORKDIR /var/tmp/build\nRUN /retry3 wget -q https://curl.haxx.se/download/curl-7.61.0.tar.gz\nRUN tar xf curl-7.61.0.tar.gz && rm curl-7.61.0.tar.gz\nWORKDIR /var/tmp/build/curl-7.61.0\nRUN ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --prefix=/usr/local/curl\nRUN make -j $(nproc)\nRUN make install\nRUN ldconfig\n# ```\n\n# #### crc32c\n\n# There is no Ubuntu Trusty package for this library. To install it, use:\n\n# ```bash\nWORKDIR /var/tmp/build\nRUN /retry3 wget -q https://github.com/google/crc32c/archive/1.0.6.tar.gz\nRUN tar -xf 1.0.6.tar.gz && rm 1.0.6.tar.gz\nWORKDIR /var/tmp/build/crc32c-1.0.6\nRUN cmake \\\n      -DCMAKE_BUILD_TYPE=Release \\\n      -DBUILD_SHARED_LIBS=yes \\\n      -DCRC32C_BUILD_TESTS=OFF \\\n      -DCRC32C_BUILD_BENCHMARKS=OFF \\\n      -DCRC32C_USE_GLOG=OFF \\\n      -H. -Bcmake-out/crc32c\nRUN cmake --build cmake-out/crc32c --target install -- -j $(nproc)\nRUN ldconfig\n# ```\n\n# #### Protobuf\n\n# While protobuf-2.5 is distributed with Ubuntu:trusty, the Google Cloud Plaform\n# proto files require more recent versions (circa 3.4.x). To manually install a\n# more recent version use:\n\n# ```bash\nWORKDIR /var/tmp/build\nRUN /retry3 wget -q https://github.com/google/protobuf/archive/v3.6.1.tar.gz\nRUN tar -xf v3.6.1.tar.gz && rm v3.6.1.tar.gz\nWORKDIR /var/tmp/build/protobuf-3.6.1/cmake\nRUN cmake \\\n        -DCMAKE_BUILD_TYPE=Release \\\n        -DBUILD_SHARED_LIBS=yes \\\n        -Dprotobuf_BUILD_TESTS=OFF \\\n        -H. -Bcmake-out\nRUN cmake --build cmake-out --target install -- -j $(nproc)\nRUN ldconfig\n# ```\n\n# #### c-ares\n\n# Recent versions of gRPC require c-ares >= 1.11, while Ubuntu-16.04\n# distributes c-ares-1.10. We need some additional development tools to compile\n# this library:\n\n# ```bash\nRUN /retry3 apt update && \\\n    /retry3 apt install -y automake libtool\n# ```\n\n# After installing these tools we can manually install a newer version\n# of c-ares:\n\n# ```bash\nWORKDIR /var/tmp/build\nRUN /retry3 wget -q https://github.com/c-ares/c-ares/archive/cares-1_14_0.tar.gz\nRUN tar -xf cares-1_14_0.tar.gz && rm cares-1_14_0.tar.gz\nWORKDIR /var/tmp/build/c-ares-cares-1_14_0\nRUN ./buildconf && ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" && make -j $(nproc)\nRUN make install\n# ```\n\n# #### gRPC\n\n# Ubuntu:trusty does not provide a package for gRPC. Manually install this\n# library:\n\n# ```bash\nENV PKG_CONFIG_PATH=/usr/local/ssl/lib/pkgconfig:/usr/local/curl/lib/pkgconfig\nWORKDIR /var/tmp/build\nRUN /retry3 wget -q https://github.com/grpc/grpc/archive/v1.19.1.tar.gz\nRUN tar -xf v1.19.1.tar.gz && rm v1.19.1.tar.gz\nWORKDIR /var/tmp/build/grpc-1.19.1\nRUN make -j $(nproc)\nRUN make install\n# ```\n\n# #### google-cloud-cpp\n\n# We can now compile and install `google-cloud-cpp`.\n\n# ```bash\nWORKDIR /home/build/google-cloud-cpp\nCOPY . /home/build/google-cloud-cpp\nRUN cmake -H. -Bcmake-out \\\n    -DCMAKE_FIND_ROOT_PATH=\"/usr/local/curl;/usr/local/ssl\" \\\n    -DGOOGLE_CLOUD_CPP_DEPENDENCY_PROVIDER=package \\\n    -DGOOGLE_CLOUD_CPP_GMOCK_PROVIDER=external\nRUN cmake --build cmake-out -- -j $(nproc)\nWORKDIR /home/build/google-cloud-cpp/cmake-out\nRUN ctest --output-on-failure\nRUN cmake --build . --target install\n# ```\n\n## [END INSTALL.md]\n\n# Verify that the installed files are actually usable\nWORKDIR /home/build/test-install-plain-make\nCOPY ci/test-install /home/build/test-install-plain-make\nRUN make\n\nWORKDIR /home/build/test-install-cmake-bigtable\nCOPY ci/test-install/bigtable /home/build/test-install-cmake-bigtable\nRUN cmake -H. -Bcmake-out -DCMAKE_FIND_ROOT_PATH=\"/usr/local/curl;/usr/local/ssl\"\nRUN cmake --build cmake-out -- -j $(nproc)\n\nWORKDIR /home/build/test-install-cmake-storage\nCOPY ci/test-install/storage /home/build/test-install-cmake-storage\nRUN cmake -H. -Bcmake-out -DCMAKE_FIND_ROOT_PATH=\"/usr/local/curl;/usr/local/ssl\"\nRUN cmake --build cmake-out -- -j $(nproc)\n\nWORKDIR /home/build/test-submodule\nCOPY ci/test-install /home/build/test-submodule\nCOPY . /home/build/test-submodule/submodule/google-cloud-cpp\nRUN cmake -Hsubmodule -Bcmake-out -DCMAKE_FIND_ROOT_PATH=\"/usr/local/curl;/usr/local/ssl\"\nRUN cmake --build cmake-out -- -j $(nproc)\n"
}