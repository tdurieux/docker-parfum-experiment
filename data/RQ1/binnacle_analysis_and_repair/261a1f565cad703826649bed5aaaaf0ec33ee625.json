{
  "startTime": 1674242767948,
  "endTime": 1674242768055,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 28,
        "lineEnd": 28,
        "columnStart": 4,
        "columnEnd": 49
      }
    },
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 40,
        "lineEnd": 40,
        "columnStart": 15,
        "columnEnd": 26
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 36,
        "lineEnd": 36,
        "columnStart": 4,
        "columnEnd": 98
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 11,
        "lineEnd": 24,
        "columnStart": 36,
        "columnEnd": 19
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 28,
        "lineEnd": 28,
        "columnStart": 62,
        "columnEnd": 87
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 28,
        "lineEnd": 28,
        "columnStart": 62,
        "columnEnd": 87
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 28,
        "lineEnd": 28,
        "columnStart": 62,
        "columnEnd": 87
      }
    }
  ],
  "repairedSmells": [
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 28,
        "lineEnd": 28,
        "columnStart": 65,
        "columnEnd": 114
      }
    }
  ],
  "repairedDockerfile": "FROM python:3.6.3-jessie\n\nENV LC_ALL=C.UTF-8\nENV LANG=C.UTF-8\nENV PATH /usr/local/nvidia/bin/:$PATH\n\nENV LD_LIBRARY_PATH /usr/local/nvidia/lib64\n\nWORKDIR /stage\n\n# Install base packages.\nRUN apt-get update --fix-missing && apt-get install --no-install-recommends -y \\\n    bzip2 \\\n    ca-certificates \\\n    curl \\\n    gcc \\\n    git \\\n    libc-dev \\\n    libglib2.0-0 \\\n    libsm6 \\\n    libxext6 \\\n    libxrender1 \\\n    wget \\\n    libevent-dev \\\n    build-essential && \\\n    rm -rf /var/lib/apt/lists/*\n\n# Install npm\nRUN curl -f -sL https://deb.nodesource.com/setup_8.x | bash - && apt-get install --no-install-recommends -y nodejs && rm -rf /var/lib/apt/lists/*;\n\n# Copy select files needed for installing requirements.\n# We only copy what we need here so small changes to the repository does not trigger re-installation of the requirements.\nCOPY requirements.txt .\nCOPY requirements_test.txt .\nCOPY scripts/install_requirements.sh scripts/install_requirements.sh\nRUN INSTALL_TEST_REQUIREMENTS=\"true\" ./scripts/install_requirements.sh\nRUN pip install --no-cache-dir http://download.pytorch.org/whl/cu80/torch-0.3.0.post4-cp36-cp36m-linux_x86_64.whl\n\n# Build demo\nCOPY demo/ demo/\nRUN cd demo && npm install && npm run build && cd .. && npm cache clean --force;\n\nCOPY allennlp/ allennlp/\nCOPY tests/ tests/\nCOPY pytest.ini pytest.ini\nCOPY .pylintrc .pylintrc\nCOPY scripts/ scripts/\nCOPY tutorials/ tutorials/\nCOPY training_config training_config/\n\n# Add model caching\nARG CACHE_MODELS=false\nRUN ./scripts/cache_models.py\n\n# Optional argument to set an environment variable with the Git SHA\nARG SOURCE_COMMIT\nENV SOURCE_COMMIT $SOURCE_COMMIT\n\nLABEL maintainer=\"allennlp-contact@allenai.org\"\n\nEXPOSE 8000\nCMD [\"/bin/bash\"]\n"
}