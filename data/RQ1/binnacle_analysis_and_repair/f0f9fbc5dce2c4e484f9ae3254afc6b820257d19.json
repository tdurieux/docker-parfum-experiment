{
  "startTime": 1674235425534,
  "endTime": 1674235426069,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 44,
        "lineEnd": 44,
        "columnStart": 7,
        "columnEnd": 95
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 73,
        "lineEnd": 73,
        "columnStart": 7,
        "columnEnd": 120
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# Generated by Neurodocker v0.3.2.\n#\n# Thank you for using Neurodocker. If you discover any issues\n# or ways to improve this software, please submit an issue or\n# pull request on our GitHub repository:\n#     https://github.com/kaczmarj/neurodocker\n#\n# Timestamp: 2018-03-03 16:48:45\n\nFROM debian:stretch\n\nARG DEBIAN_FRONTEND=noninteractive\n\n#----------------------------------------------------------\n# Install common dependencies and create default entrypoint\n#----------------------------------------------------------\nENV LANG=\"en_US.UTF-8\" \\\n    LC_ALL=\"C.UTF-8\" \\\n    ND_ENTRYPOINT=\"/neurodocker/startup.sh\"\nRUN apt-get update -qq && apt-get install -yq --no-install-recommends  \\\n    \tapt-utils bzip2 ca-certificates curl locales unzip \\\n    && apt-get clean \\\n    && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/* \\\n    && localedef --force --inputfile=en_US --charmap=UTF-8 C.UTF-8 \\\n    && chmod 777 /opt && chmod a+s /opt \\\n    && mkdir -p /neurodocker \\\n    && if [ ! -f \"$ND_ENTRYPOINT\" ]; then \\\n         echo '#!/usr/bin/env bash' >> $ND_ENTRYPOINT \\\n         && echo 'set +x' >> $ND_ENTRYPOINT \\\n         && echo 'if [ -z \"$*\" ]; then /usr/bin/env bash; else $*; fi' >> $ND_ENTRYPOINT; \\\n       fi \\\n    && chmod -R 777 /neurodocker && chmod a+s /neurodocker\nENTRYPOINT [\"/neurodocker/startup.sh\"]\n\n#-----------------------------------------------------------\n# Install FSL v5.0.10\n# FSL is non-free. If you are considering commerical use\n# of this Docker image, please consult the relevant license:\n# https://fsl.fmrib.ox.ac.uk/fsl/fslwiki/Licence\n#-----------------------------------------------------------\nRUN apt-get update -qq && apt-get install -yq --no-install-recommends bc dc libfontconfig1 libfreetype6 libgl1-mesa-dev libglu1-mesa-dev libgomp1 libice6 libxcursor1 libxft2 libxinerama1 libxrandr2 libxrender1 libxt6 \\\n    && apt-get clean \\\n    && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/* \\\n    && echo \"Downloading FSL ...\" \\\n    && curl -f -sSL --retry 5 https://fsl.fmrib.ox.ac.uk/fsldownloads/fsl-5.0.10-centos6_64.tar.gz \\\n    | tar zx -C /opt \\\n    && /bin/bash /opt/fsl/etc/fslconf/fslpython_install.sh -q -f /opt/fsl \\\n    && sed -i '$iecho Some packages in this Docker container are non-free' $ND_ENTRYPOINT \\\n    && sed -i '$iecho If you are considering commercial use of this container, please consult the relevant license:' $ND_ENTRYPOINT \\\n    && sed -i '$iecho https://fsl.fmrib.ox.ac.uk/fsl/fslwiki/Licence' $ND_ENTRYPOINT \\\n    && sed -i '$isource $FSLDIR/etc/fslconf/fsl.sh' $ND_ENTRYPOINT\nENV FSLDIR=/opt/fsl \\\n    PATH=/opt/fsl/bin:$PATH\n\nUSER root\n\nRUN apt-get update -qq \\\n    && apt-get install -y -q --no-install-recommends git \\\n                                                     vim \\\n    && apt-get clean \\\n    && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*\n\n# Create new user: neuro\nRUN useradd --no-user-group --create-home --shell /bin/bash neuro\nUSER neuro\n\n#------------------\n# Install Miniconda\n#------------------\nENV CONDA_DIR=/opt/conda \\\n    PATH=/opt/conda/bin:$PATH\nRUN echo \"Downloading Miniconda installer ...\" \\\n    && miniconda_installer=/tmp/miniconda.sh \\\n    && curl -f -sSL --retry 5 -o $miniconda_installer https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh \\\n    && /bin/bash $miniconda_installer -b -p $CONDA_DIR \\\n    && rm -f $miniconda_installer \\\n    && conda config --system --prepend channels conda-forge \\\n    && conda config --system --set auto_update_conda false \\\n    && conda config --system --set show_channel_urls true \\\n    && conda update -n base conda \\\n    && conda clean -tipsy && sync\n\n#-------------\n# Copy in code\n#-------------\nCOPY . /pydeface\nUSER root\nRUN chown -R neuro:users /pydeface\nUSER neuro\n\n#-------------------------\n# Create conda environment\n#-------------------------\nRUN conda create -y -q --name neuro --channel conda-forge python \\\n                                                          nipype \\\n                                                          nibabel \\\n                                                          pytest \\\n    && sync && conda clean -tipsy && sync \\\n    && /bin/bash -c \"source activate neuro \\\n      && pip install -e /pydeface\" \\\n    && sync \\\n    && sed -i '$isource activate neuro' $ND_ENTRYPOINT\n\nWORKDIR /home/neuro\n\n#--------------------------------------\n# Save container specifications to JSON\n#--------------------------------------\nRUN echo '{ \\\n    \\n  \"pkg_manager\": \"apt\", \\\n    \\n  \"check_urls\": false, \\\n    \\n  \"instructions\": [ \\\n    \\n    [ \\\n    \\n      \"base\", \\\n    \\n      \"debian:stretch\" \\\n    \\n    ], \\\n    \\n    [ \\\n    \\n      \"fsl\", \\\n    \\n      { \\\n    \\n        \"version\": \"5.0.10\" \\\n    \\n      } \\\n    \\n    ], \\\n    \\n    [ \\\n    \\n      \"user\", \\\n    \\n      \"root\" \\\n    \\n    ], \\\n    \\n    [ \\\n    \\n      \"install\", \\\n    \\n      [ \\\n    \\n        \"git\", \\\n    \\n        \"vim\" \\\n    \\n      ] \\\n    \\n    ], \\\n    \\n    [ \\\n    \\n      \"user\", \\\n    \\n      \"neuro\" \\\n    \\n    ], \\\n    \\n    [ \\\n    \\n      \"miniconda\", \\\n    \\n      { \\\n    \\n        \"env_name\": \"neuro\", \\\n    \\n        \"conda_opts\": \"--channel conda-forge\", \\\n    \\n        \"conda_install\": \"python nipype nibabel pytest\", \\\n    \\n        \"pip_install\": \"git+git://github.com/poldracklab/pydeface.git\", \\\n    \\n        \"activate\": true \\\n    \\n      } \\\n    \\n    ], \\\n    \\n    [ \\\n    \\n      \"workdir\", \\\n    \\n      \"/home/neuro\" \\\n    \\n    ] \\\n    \\n  ], \\\n    \\n  \"generation_timestamp\": \"2018-03-03 16:48:45\", \\\n    \\n  \"neurodocker_version\": \"0.3.2\" \\\n    \\n}' > /neurodocker/neurodocker_specs.json\n"
}