{
  "startTime": 1674641689323,
  "endTime": 1674641689408,
  "originalSmells": [
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 35,
        "lineEnd": 35,
        "columnStart": 7,
        "columnEnd": 67
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# Copyright (c) Microsoft Corporation. All rights reserved.\n# Licensed under the MIT License.\n#\n# Docker image file that describes an VMware Photon image with PowerShell\n# installed from full PowerShell linux tar.gz package\n\n# Define arg(s) needed for the From statement\nARG fromTag=2.0-20181017\nARG imageRepo=photon\n\nFROM ${imageRepo}:${fromTag} AS installer-env\n\n# Define Args for the needed to add the package\nARG PS_VERSION=6.1.0\nARG PS_PACKAGE=powershell-${PS_VERSION}-linux-x64.tar.gz\nARG PS_PACKAGE_URL=https://github.com/PowerShell/PowerShell/releases/download/v${PS_VERSION}/${PS_PACKAGE}\nARG PS_INSTALL_VERSION=6\n\n# Define Args and Env needed to create links\nENV PS_INSTALL_FOLDER=/opt/microsoft/powershell/$PS_INSTALL_VERSION\n\n# Download the PowerShell Core Linux tar.gz and save it\nADD ${PS_PACKAGE_URL} /tmp/powershell-linux.tar.gz\n\n# Installation of packages to uncompress downloaded package\nRUN \\\n\n    tdnf -y distro-sync \\\n    # install dependencies\n    && tdnf -y install \\\n      gzip \\\n      tar \\\n    # create powershell folder\n    && mkdir -p ${PS_INSTALL_FOLDER} \\\n    # uncompress powershell linux tar file \\\n    && tar zxf /tmp/powershell-linux.tar.gz -C ${PS_INSTALL_FOLDER} && rm /tmp/powershell-linux.tar.gz\n\n# Start a new stage so we lose all the tar.gz layers from the final image\nFROM ${imageRepo}:${fromTag}\n\n# Copy only the files we need from the previous stage\nCOPY --from=installer-env [\"/opt/microsoft/powershell\", \"/opt/microsoft/powershell\"]\n\n# Define Args and Env needed to create links\nARG PS_VERSION=6.1.0\nARG PS_INSTALL_VERSION=6\nENV PS_INSTALL_FOLDER=/opt/microsoft/powershell/$PS_INSTALL_VERSION \\\n    \\\n    # Define ENVs for Localization/Globalization\n    DOTNET_SYSTEM_GLOBALIZATION_INVARIANT=false \\\n    LC_ALL=en_US.UTF-8 \\\n    LANG=en_US.UTF-8 \\\n    # Set up PowerShell module analysis cache path\n    PSModuleAnalysisCachePath=/var/cache/microsoft/powershell/PSModuleAnalysisCache/ModuleAnalysisCache \\\n    # Opt out of SocketsHttpHandler in DotNet Core 2.1 to use HttpClientHandler\n    # with installed libcurl4 package to resolve\n    # Invoke-WebRequest : Authentication failed\" issue when executing using\n    # docker run [OPTIONS] IMAGE[:TAG|@DIGEST] [Invoke-WebRequest] [-Uri <HTTPS URL>]\n    DOTNET_SYSTEM_NET_HTTP_USESOCKETSHTTPHANDLER=0 \\\n    # Set terminal to linux because there is no xterm library in Photon image\n    # when docker allocate pseudo-tty\n    TERM=linux\n\n# Installation\nRUN \\\n    # update package list\n    tdnf -y distro-sync \\\n    # install dependencies\n    && tdnf -y install \\\n      # required for locales\n      glibc-i18n \\\n      # required for uncompressing locale files in /usr/share/i18n/charmaps/\n      gzip \\\n      # required for International Components for Unicode\n      icu \\\n      # required for help in powershell\n      less \\\n    # generate locale\n    && locale-gen.sh \\\n    # create the pwsh symbolic link that points to powershell\n    && ln -s ${PS_INSTALL_FOLDER}/pwsh /usr/bin/pwsh \\\n    # Give all user execute permissions and remove write permissions for others\n    && chmod a+x,o-w ${PS_INSTALL_FOLDER}/pwsh \\\n    # intialize powershell module cache\n    && pwsh \\\n        -NoLogo \\\n        -NoProfile \\\n        -Command \" \\\n          \\$ErrorActionPreference = 'Stop' ; \\\n          \\$ProgressPreference = 'SilentlyContinue' ; \\\n          while(!(Test-Path -Path \\$env:PSModuleAnalysisCachePath)) {  \\\n            Write-Host \"'Waiting for $env:PSModuleAnalysisCachePath'\" ; \\\n            Start-Sleep -Seconds 6 ; \\\n          }\" \\\n    # upgrade packages\n    && tdnf -y upgrade \\\n    # clean cached data\n    && tdnf clean all\n\n# Define args needed only for the labels\nARG IMAGE_NAME=pshorg/powershellcommunity:photon-2.0\nARG VCS_REF=\"none\"\n\n# Add label last as it's just metadata and uses a lot of parameters\nLABEL maintainer=\"PowerShell Team <powershellteam@hotmail.com>\" \\\n      readme.md=\"https://github.com/PowerShell/PowerShell/blob/master/docker/README.md\" \\\n      description=\"This Dockerfile will install the latest release of PowerShell.\" \\\n      org.label-schema.usage=\"https://github.com/PowerShell/PowerShell/tree/master/docker#run-the-docker-image-you-built\" \\\n      org.label-schema.url=\"https://github.com/PowerShell/PowerShell/blob/master/docker/README.md\" \\\n      org.label-schema.vcs-url=\"https://github.com/PowerShell/PowerShell-Docker\" \\\n      org.label-schema.name=\"powershell\" \\\n      org.label-schema.vendor=\"PowerShell\" \\\n      org.label-schema.vcs-ref=${VCS_REF} \\\n      org.label-schema.version=${PS_VERSION} \\\n      org.label-schema.schema-version=\"1.0\" \\\n      org.label-schema.docker.cmd=\"docker run ${IMAGE_NAME} pwsh -c '$psversiontable'\" \\\n      org.label-schema.docker.cmd.devel=\"docker run ${IMAGE_NAME}\" \\\n      org.label-schema.docker.cmd.test=\"docker run ${IMAGE_NAME} pwsh -c Invoke-Pester\" \\\n      org.label-schema.docker.cmd.help=\"docker run ${IMAGE_NAME} pwsh -c Get-Help\"\n\nCMD [ \"pwsh\" ]\n"
}