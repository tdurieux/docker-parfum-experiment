{
  "startTime": 1674241192996,
  "endTime": 1674241193207,
  "originalSmells": [
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 93,
        "lineEnd": 93,
        "columnStart": 4,
        "columnEnd": 25
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 9,
        "lineEnd": 17,
        "columnStart": 22,
        "columnEnd": 30
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 23,
        "lineEnd": 26,
        "columnStart": 22,
        "columnEnd": 10
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 38,
        "lineEnd": 40,
        "columnStart": 20,
        "columnEnd": 26
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 68,
        "lineEnd": 79,
        "columnStart": 22,
        "columnEnd": 19
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM ubuntu:14.04\n\nMAINTAINER fcarey@gmail.com\n\n# Temporarily shut up warnings.\nENV DISPLAY :0\nENV TERM xterm\n\n# Basic Dependencies\nRUN apt-get update && apt-get install --no-install-recommends -y \\\n    curl \\\n    git \\\n    zip \\\n    unzip \\\n    software-properties-common \\\n    python-dev \\\n    python-setuptools \\\n    python-software-properties && \\\n  apt-get clean && \\\n  rm -rf /var/lib/apt/lists/* && \\\n  easy_install pip\n\n# Dependencies for vnc setup.\nRUN apt-get update && apt-get install --no-install-recommends -y \\\n    xvfb \\\n    fluxbox \\\n    x11vnc && \\\n  apt-get clean && \\\n  rm -rf /var/lib/apt/lists/*\n\n\n# We need to add a custom PPA to pick up JDK8, since trusty doesn't\n# have an openjdk8 backport.  openjdk-r is maintained by a reliable contributor:\n# Matthias Klose (https://launchpad.net/~doko).  It will do until\n# we either update the base image beyond 14.04 or openjdk-8 is\n# finally backported to trusty; see e.g.\n#   https://bugs.launchpad.net/trusty-backports/+bug/1368094\nRUN add-apt-repository -y ppa:openjdk-r/ppa && \\\n  apt-get update && apt-get install --no-install-recommends -y \\\n    openjdk-8-jdk \\\n    openjdk-8-jre-headless && \\\n  apt-get clean && \\\n  rm -rf /var/lib/apt/lists/* && \\\n  which java && \\\n  java -version && \\\n  update-ca-certificates -f\n\n# Running bazel inside a `docker build` command causes trouble, cf:\n#   https://github.com/bazelbuild/bazel/issues/134\n# The easiest solution is to set up a bazelrc file forcing --batch.\n# RUN echo \"startup --batch\" >>/root/.bazelrc\n# Similarly, we need to workaround sandboxing issues:\n#   https://github.com/bazelbuild/bazel/issues/418\n# RUN echo \"build --spawn_strategy=standalone --genrule_strategy=standalone\" \\\n#    >>/root/.bazelrc\n# ENV BAZELRC /root/.bazelrc\n# Install the most recent bazel release.\nENV BAZEL_VERSION 0.4.3\nRUN mkdir /bazel && \\\n    cd /bazel && \\\n    curl -fSsL -O https://github.com/bazelbuild/bazel/releases/download/$BAZEL_VERSION/bazel-$BAZEL_VERSION-installer-linux-x86_64.sh && \\\n    curl -fSsL -o /bazel/LICENSE https://github.com/bazelbuild/bazel/blob/master/LICENSE && \\\n    chmod +x bazel-*.sh && \\\n    ./bazel-$BAZEL_VERSION-installer-linux-x86_64.sh && \\\n    cd / && \\\n    rm -f /bazel/bazel-$BAZEL_VERSION-installer-linux-x86_64.sh\n\n# Install deepmind-lab dependencies\nRUN apt-get update && apt-get install --no-install-recommends -y \\\n    lua5.1 \\\n    liblua5.1-0-dev \\\n    libffi-dev \\\n    gettext \\\n    freeglut3-dev \\\n    libsdl2-dev \\\n    libosmesa6-dev \\\n    python-dev \\\n    python-numpy \\\n    realpath \\\n    build-essential && \\\n  apt-get clean && \\\n  rm -rf /var/lib/apt/lists/*\n\n\n# Set the default X11 Display.\nENV DISPLAY :1\nENV VNC_PASSWORD=password\nENV XVFB_RESOLUTION=800x600x16\n\n# Set up relaax\nRUN git clone https://github.com/deeplearninc/relaax.git && \\\n    cd /relaax && \\\n    git checkout pixie && \\\n    pip install --no-cache-dir -e .[all] && \\\n    cd ..\n\n# Set up deepmind-lab\n# Run an actual (headless=false) build since this should make subsequent builds much faster.\n# Alternative commands based on the Documentation:\n# bazel build :deepmind_lab.so --define headless=osmesa && \\\n# bazel run :python_module_test --define headless=osmesa && \\\nRUN git clone https://github.com/deepmind/lab && \\\n  cd /lab && \\\n  bazel build :random_agent --define headless=false && \\\n  cd ..\n\n# This port is the default for connecting to VNC display :1\nEXPOSE 5901\n\n# Copy VNC script that handles restarts and make it executable.\nCOPY ./startup.sh /opt/\nRUN chmod u+x /opt/startup.sh\n\nENV RELAAX_DIR /relaax\nENV DM_LAB_DIR /lab\nENV APP_DIR /app\nWORKDIR $APP_DIR\n\n# Finally, start application\nCMD [\"--show-ui\", \"false\"]\nENTRYPOINT [\"python\", \"environment/start-lab.py\", \"--config\", \"/app/app.yaml\"]\n"
}