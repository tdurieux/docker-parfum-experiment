{
  "startTime": 1674241749640,
  "endTime": 1674241750007,
  "originalSmells": [
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 77,
        "lineEnd": 88,
        "columnStart": 22,
        "columnEnd": 20
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM nvidia/cuda:9.0-cudnn7-devel-ubuntu16.04 as build\n\nENV CUDA_ARCH_BIN \"35 52 60 61 70\"\nENV CUDA_ARCH_PTX \"70\"\n\n# Install dependencies.\nRUN apt-get update && apt-get install -y --no-install-recommends \\\n        ca-certificates \\\n        cmake \\\n        git \\\n        libatlas-base-dev \\\n        libatlas-dev \\\n        libboost-all-dev \\\n        libgflags-dev \\\n        libgoogle-glog-dev \\\n        libhdf5-dev \\\n        libprotobuf-dev \\\n        pkg-config \\\n        protobuf-compiler \\\n        python-yaml \\\n        python-six \\\n        wget && \\\n    rm -rf /var/lib/apt/lists/*\n\n# OpenCV 3.3.1 is needed to support custom allocators for GpuMat objects.\nRUN git clone --depth 1 -b 3.3.1 https://github.com/opencv/opencv.git /opencv && \\\n    mkdir /opencv/build && cd /opencv/build && \\\n    cmake -DCMAKE_BUILD_TYPE=Release -DBUILD_SHARED_LIBS=ON \\\n          -DWITH_CUDA=ON -DWITH_CUFFT=OFF -DCUDA_ARCH_BIN=\"${CUDA_ARCH_BIN}\" -DCUDA_ARCH_PTX=\"${CUDA_ARCH_PTX}\" \\\n          -DWITH_JPEG=ON -DBUILD_JPEG=ON -DWITH_PNG=ON -DBUILD_PNG=ON \\\n          -DBUILD_TESTS=OFF -DBUILD_EXAMPLES=OFF -DWITH_FFMPEG=OFF -DWITH_GTK=OFF \\\n          -DWITH_OPENCL=OFF -DWITH_QT=OFF -DWITH_V4L=OFF -DWITH_JASPER=OFF \\\n          -DWITH_1394=OFF -DWITH_TIFF=OFF -DWITH_OPENEXR=OFF -DWITH_IPP=OFF -DWITH_WEBP=OFF \\\n          -DBUILD_opencv_superres=OFF -DBUILD_opencv_java=OFF -DBUILD_opencv_python2=OFF \\\n          -DBUILD_opencv_videostab=OFF -DBUILD_opencv_apps=OFF -DBUILD_opencv_flann=OFF \\\n          -DBUILD_opencv_ml=OFF -DBUILD_opencv_photo=OFF -DBUILD_opencv_shape=OFF \\\n          -DBUILD_opencv_cudabgsegm=OFF -DBUILD_opencv_cudaoptflow=OFF -DBUILD_opencv_cudalegacy=OFF \\\n          -DCUDA_NVCC_FLAGS=\"-O3\" -DCUDA_FAST_MATH=ON .. && \\\n    make -j\"$(nproc)\" install && \\\n    ldconfig && \\\n    rm -rf /opencv\n\n# A modified version of Caffe is used to properly handle multithreading and CUDA streams.\nRUN git clone --depth 1 -b bvlc_inference https://github.com/flx42/caffe.git /caffe && \\\n    cd /caffe && \\\n    cmake -DCMAKE_BUILD_TYPE=Release -DBUILD_SHARED_LIBS=ON \\\n          -DCUDA_ARCH_NAME=Manual -DCUDA_ARCH_BIN=\"${CUDA_ARCH_BIN}\" -DCUDA_ARCH_PTX=\"${CUDA_ARCH_PTX}\" \\\n          -DUSE_CUDNN=ON -DUSE_OPENCV=ON -DUSE_LEVELDB=OFF -DUSE_LMDB=OFF \\\n          -DBUILD_python=OFF -DBUILD_python_layer=OFF -DBUILD_matlab=OFF \\\n          -DCMAKE_INSTALL_PREFIX=/usr/local \\\n          -DCUDA_NVCC_FLAGS=\"-O3\" && \\\n    make -j\"$(nproc)\" install && \\\n    ldconfig && \\\n    make clean\n\n# Download Caffenet\nRUN /caffe/scripts/download_model_binary.py /caffe/models/bvlc_reference_caffenet && \\\n    /caffe/data/ilsvrc12/get_ilsvrc_aux.sh\n\n# Install golang\nENV GOLANG_VERSION 1.9.2\nRUN wget -nv -O - https://storage.googleapis.com/golang/go${GOLANG_VERSION}.linux-amd64.tar.gz \\\n    | tar -C /usr/local -xz\nENV GOPATH /go\nENV PATH $GOPATH/bin:/usr/local/go/bin:$PATH\n\n# Build inference server\nCOPY caffe /go/src/caffe-server\nCOPY common.h /go/src/common.h\nRUN go get -ldflags=\"-s -w\" caffe-server\n\n\n# We use a multi-stage build to get a smaller image for deployment.\nFROM nvidia/cuda:9.0-base-ubuntu16.04\n\nMAINTAINER Felix Abecassis \"fabecassis@nvidia.com\"\n\nRUN apt-get update && apt-get install -y --no-install-recommends \\\n        libatlas3-base \\\n        libboost-system1.58.0 \\\n        libboost-thread1.58.0 \\\n        libgflags2v5 \\\n        libgoogle-glog0v5 \\\n        libhdf5-10 \\\n        libprotobuf9v5 \\\n        libcudnn7=7.0.5.15-1+cuda9.0 \\\n        cuda-cublas-9-0 \\\n        cuda-curand-9-0 \\\n        cuda-npp-9-0 && \\\n    rm -rf /var/lib/apt/lists/ && rm -rf /var/lib/apt/lists/*;\n\n# Copy binary and dependencies\nCOPY --from=build /go/bin/caffe-server /usr/local/bin/caffe-server\nCOPY --from=build /usr/local/lib /usr/local/lib\nRUN ldconfig\n\n# Copy dataset. If you use your own dataset: delete these lines and mount a volume from the host.\nCOPY --from=build /caffe/models/bvlc_reference_caffenet/deploy.prototxt /opt/caffenet/deploy.prototxt\nCOPY --from=build /caffe/models/bvlc_reference_caffenet/bvlc_reference_caffenet.caffemodel /opt/caffenet/bvlc_reference_caffenet.caffemodel\nCOPY --from=build /caffe/data/ilsvrc12/imagenet_mean.binaryproto /opt/caffenet/imagenet_mean.binaryproto\nCOPY --from=build /caffe/data/ilsvrc12/synset_words.txt /opt/caffenet/synset_words.txt\n\nWORKDIR /opt/caffenet\nCMD [\"caffe-server\", \"deploy.prototxt\", \"bvlc_reference_caffenet.caffemodel\", \"imagenet_mean.binaryproto\", \"synset_words.txt\"]\n"
}