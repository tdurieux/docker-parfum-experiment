{
  "startTime": 1674234255611,
  "endTime": 1674234255764,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 36,
        "lineEnd": 38,
        "columnStart": 4,
        "columnEnd": 138
      }
    },
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 18,
        "lineEnd": 18,
        "columnStart": 4,
        "columnEnd": 31
      }
    },
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 19,
        "lineEnd": 19,
        "columnStart": 5,
        "columnEnd": 16
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 39,
        "lineEnd": 39,
        "columnStart": 5,
        "columnEnd": 89
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM node:11.15.0-alpine as npm\nMAINTAINER Lubos Kozmon <lubosh91@gmail.com>\n\n# Arguments\nARG DOCKERIZE_VERSION=0.6.1\nARG BASE_HREF=\"/\"\n\n# Validate base href\nRUN echo ${BASE_HREF} | grep -Eq '^\\/(.*\\/)?$' || (>&2 echo \"BASE_HREF must start and end with a forward slash\" && exit 1)\n\n# Copy source code\nWORKDIR /src\nCOPY . .\n\n# Install required packages\nRUN apk --no-cache add tar curl gettext python-dev make g++\n\n# Install dependencies & build\nRUN npm install -g @angular/cli \\\n  && npm install \\\n  && ng build --prod --base-href ${BASE_HREF} && npm cache clean --force;\n\n# Update nginx config\nRUN envsubst '${BASE_HREF}' \\\n    < docker/files/etc/nginx/nginx.conf.template \\\n    > docker/files/etc/nginx/nginx.conf.template.sub \\\n  && mv -f \\\n    docker/files/etc/nginx/nginx.conf.template.sub \\\n    docker/files/etc/nginx/nginx.conf.template\n\n# Make scripts executable\nRUN chmod +x \\\n  docker/files/app/run.sh \\\n  docker/files/app/healthcheck.sh\n\n# Get dockerize\nRUN curl -f \\\n    -Lo dockerize-alpine-linux-amd64-v${DOCKERIZE_VERSION}.tar.gz \\\n    https://github.com/jwilder/dockerize/releases/download/v${DOCKERIZE_VERSION}/dockerize-alpine-linux-amd64-v${DOCKERIZE_VERSION}.tar.gz \\\n  && tar xzvf dockerize-alpine-linux-amd64-v${DOCKERIZE_VERSION}.tar.gz -C /usr/local/bin && rm dockerize-alpine-linux-amd64-v${DOCKERIZE_VERSION}.tar.gz\n\nFROM nginxinc/nginx-unprivileged:1.14.2-alpine\n\n# The unprivileged nginx Dockerfile switches to user 1001\n# We switch back to root during the build process\nUSER root\n\n# Default config\nENV WEB_HTTP_PORT=8000 \\\n  API_HOST=api \\\n  API_PORT=9000 \\\n  API_REQUEST_TIMEOUT_MILLIS=10000\n\n# Copy app files\nCOPY --from=npm /usr/local/bin/dockerize /usr/local/bin/dockerize\nCOPY --from=npm /src/docker/files /\nCOPY --from=npm /src/dist /app/public\n\nWORKDIR /app\n\n# Install curl\nRUN apk --no-cache add curl\n\n# We need to ensure that user 1001 has read on everything we installed\nRUN chown -R 1001 \\\n  /app/public \\\n  /etc/nginx/nginx.conf\n\n# Now that we are done with the image build, we switch back to user 1001\nUSER 1001\n\n# Add health check\nHEALTHCHECK --interval=30s --timeout=3s \\\n    CMD ./healthcheck.sh\n\n# Expose default HTTP port\nEXPOSE 8000\n\nCMD [\"./run.sh\"]\n"
}