{
  "startTime": 1674248218256,
  "endTime": 1674248218365,
  "originalSmells": [
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 44,
        "lineEnd": 44,
        "columnStart": 3,
        "columnEnd": 28
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "############################################################ \n# Dockerfile to create GeoLite2 Country and City databases \n# with automatic weekly updates. \n# \n# Adapted from tkrs/maxmind-lite2-db and \n# tkrs/maxmind-geoipupdate by Takeru Sato. \n############################################################ \n\nFROM alpine:3.5 \n\nMAINTAINER Leila Hadj-Chikh <leila.hadj-chikh@dunbarsecured.com> \n\n\n### DOWNLOAD DATABASES \n\nENV GEOIP_BASE_URL http://geolite.maxmind.com/download/geoip/database \nENV GEOIP_CNTR_DB GeoLite2-Country.mmdb \nENV GEOIP_CITY_DB GeoLite2-City.mmdb \nENV GEOIP_DB_DIR /usr/share/GeoIP \n\n# download gzip database files to /tmp/ \nADD ${GEOIP_BASE_URL}/${GEOIP_CNTR_DB}.gz /tmp/ \nADD ${GEOIP_BASE_URL}/${GEOIP_CITY_DB}.gz /tmp/ \n\n# unzip databases into database directory \nRUN mkdir -p ${GEOIP_DB_DIR} \\  \n&& gunzip -c /tmp/${GEOIP_CNTR_DB}.gz > ${GEOIP_DB_DIR}/${GEOIP_CNTR_DB} \\  \n&& gunzip -c /tmp/${GEOIP_CITY_DB}.gz > ${GEOIP_DB_DIR}/${GEOIP_CITY_DB} \\  \n&& rm -f /tmp/GeoLite2-* \n\nVOLUME ${GEOIP_DB_DIR} \n\n\n### INSTALL GEOIPUPDATE \n\n# copy geoipupdate settings \nCOPY GeoIP.conf /usr/etc/GeoIP.conf \n\n# install geoipupdate \nRUN BUILD_DEPS='gcc make libc-dev libtool automake autoconf git' \\  \n&& apk --no-cache add curl-dev ${BUILD_DEPS} \\  \n&& git clone https://github.com/maxmind/geoipupdate /tmp/geoipupdate \\  \n&& cd /tmp/geoipupdate \\  \n&& ./bootstrap \\\n&& ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --prefix=/usr \\\n&& make \\\n&& make install \\\n&& cd \\\n&& apk del --purge ${BUILD_DEPS} \\\n&& rm -rf /var/cache/apk/* \\\n&& rm -rf /tmp/geoipupdate\n\n\n### CONFIGURE AUTOMATIC UPDATES \n\n# copy crontab for running updates \nCOPY cronfile /var/spool/cron/crontabs/root \n\n# run crond in foreground \nENTRYPOINT [\"crond\", \"-f\"] \n\n# set crond options: log to stderr with log level 8 \nCMD [\"-d\", \"8\"] \n\n"
}