{
  "startTime": 1674641755551,
  "endTime": 1674641755648,
  "originalSmells": [
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 33,
        "lineEnd": 33,
        "columnStart": 4,
        "columnEnd": 53
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# Docker image file that describes an OpenSuse 42.3 image with PowerShell installed from tar.gz\n# Implemented in two stages, one that downloads and uncompresses the tar.gz\n# The next stage simply copies the files from the first stage,\n# effectively removing the tar.gz and packages that are not needed from the final image.\n\n# Define arg(s) needed for the From statement\nARG fromTag=42.3\nARG imageRepo=opensuse/leap\n\nFROM ${imageRepo}:${fromTag} AS installer-env\n\n# Define Args for the needed to add the package\nARG PS_VERSION=6.2.0-preview.3\nARG PS_PACKAGE=powershell-${PS_VERSION}-linux-x64.tar.gz\nARG PS_PACKAGE_URL=https://github.com/PowerShell/PowerShell/releases/download/v${PS_VERSION}/${PS_PACKAGE}\nARG PS_INSTALL_VERSION=7-preview\n\n# define the folder we will be installing PowerShell to\nENV PS_INSTALL_FOLDER=/opt/microsoft/powershell/$PS_INSTALL_VERSION\n\n# Create the install folder\nRUN mkdir -p ${PS_INSTALL_FOLDER}\n\n# Install dependencies\nRUN zypper --non-interactive update --skip-interactive\n\nRUN zypper --non-interactive install \\\n        tar\n\n# Download the Linux tar.gz and save it\nADD ${PS_PACKAGE_URL} /tmp/linux.tar.gz\n\n# Unzip the Linux tar.gz\nRUN tar zxf /tmp/linux.tar.gz -C ${PS_INSTALL_FOLDER} && rm /tmp/linux.tar.gz\n\n# ------ Second stage ------\n# Start a new stage so we lose all the tar.gz layers from the final image\nFROM ${imageRepo}:${fromTag}\n\n# Copy only the files we need from the previous stage\nCOPY --from=installer-env [\"/opt/microsoft/powershell\", \"/opt/microsoft/powershell\"]\n\n# Define Args and Env needed to create links\nARG PS_INSTALL_VERSION=7-preview\nENV PS_INSTALL_FOLDER=/opt/microsoft/powershell/$PS_INSTALL_VERSION \\\n    \\\n    # Define ENVs for Localization/Globalization\n    DOTNET_SYSTEM_GLOBALIZATION_INVARIANT=false \\\n    LC_ALL=en_US.UTF-8 \\\n    LANG=en_US.UTF-8 \\\n    # set a fixed location for the Module analysis cache\n    PSModuleAnalysisCachePath=/var/cache/microsoft/powershell/PSModuleAnalysisCache/ModuleAnalysisCache\n\n\n# Install dependencies\nRUN zypper --non-interactive update --skip-interactive \\\n    && zypper --non-interactive install \\\n        glibc-locale \\\n        glibc-i18ndata \\\n        libicu \\\n        openssl \\\n        less \\\n    && localedef --charmap=UTF-8 --inputfile=en_US $LANG \\\n    # Create the pwsh symbolic link that points to powershell\n    && ln -s ${PS_INSTALL_FOLDER}/pwsh /usr/bin/pwsh \\\n    && ln -sf ${PS_INSTALL_FOLDER}/pwsh /usr/bin/pwsh-preview \\\n    # Give all user execute permissions and remove write permissions for others\n    && chmod a+x,o-w ${PS_INSTALL_FOLDER}/pwsh \\\n    # clean package manager cache\n    && zypper clean -a \\\n    # remove package manager log file\n    && rm -f /var/log/zypp/history /var/log/zypper.log \\\n    # intialize powershell module cache\n    && pwsh \\\n        -NoLogo \\\n        -NoProfile \\\n        -Command \" \\\n          \\$ErrorActionPreference = 'Stop' ; \\\n          \\$ProgressPreference = 'SilentlyContinue' ; \\\n          while(!(Test-Path -Path \\$env:PSModuleAnalysisCachePath)) {  \\\n            Write-Host \"'Waiting for $env:PSModuleAnalysisCachePath'\" ; \\\n            Start-Sleep -Seconds 6 ; \\\n          }\"\n\n# Define args needed only for the labels\nARG PS_VERSION=6.2.0-preview.3\nARG IMAGE_NAME=mcr.microsoft.com/powershell:opensuse-42.3\nARG VCS_REF=\"none\"\n\n# Add label last as it's just metadata and uses a lot of parameters\nLABEL maintainer=\"PowerShell Team <powershellteam@hotmail.com>\" \\\n      readme.md=\"https://github.com/PowerShell/PowerShell/blob/master/docker/README.md\" \\\n      description=\"This Dockerfile will install the latest release of PowerShell.\" \\\n      org.label-schema.usage=\"https://github.com/PowerShell/PowerShell/tree/master/docker#run-the-docker-image-you-built\" \\\n      org.label-schema.url=\"https://github.com/PowerShell/PowerShell/blob/master/docker/README.md\" \\\n      org.label-schema.vcs-url=\"https://github.com/PowerShell/PowerShell-Docker\" \\\n      org.label-schema.name=\"powershell\" \\\n      org.label-schema.vendor=\"PowerShell\" \\\n      org.label-schema.vcs-ref=${VCS_REF} \\\n      org.label-schema.version=${PS_VERSION} \\\n      org.label-schema.schema-version=\"1.0\" \\\n      org.label-schema.docker.cmd=\"docker run ${IMAGE_NAME} pwsh -c '$psversiontable'\" \\\n      org.label-schema.docker.cmd.devel=\"docker run ${IMAGE_NAME}\" \\\n      org.label-schema.docker.cmd.test=\"docker run ${IMAGE_NAME} pwsh -c Invoke-Pester\" \\\n      org.label-schema.docker.cmd.help=\"docker run ${IMAGE_NAME} pwsh -c Get-Help\"\n\nCMD [ \"pwsh\" ]\n"
}