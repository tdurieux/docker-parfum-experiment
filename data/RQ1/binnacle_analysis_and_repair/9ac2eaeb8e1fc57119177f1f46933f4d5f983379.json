{
  "startTime": 1674245025527,
  "endTime": 1674245025954,
  "originalSmells": [
    {
      "rule": "wgetUseHttpsUrl",
      "position": {
        "lineStart": 13,
        "lineEnd": 13,
        "columnStart": 7,
        "columnEnd": 82
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 130,
        "lineEnd": 130,
        "columnStart": 11,
        "columnEnd": 22
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM joynr-base:latest\n\nENV PKG_CONFIG_PATH /usr/local/lib/pkgconfig:$PKG_CONFIG_PATH\n\n###################################################\n# enable gold linker\n###################################################\nRUN  update-alternatives  --set ld /usr/bin/ld.gold\n\n###################################################\n# install clang 3.5 for formatting\n###################################################\nRUN cd /tmp/ \\\n    && wget https://llvm.org/releases/3.5.0/clang+llvm-3.5.0-x86_64-fedora20.tar.xz \\\n    && tar -xf clang+llvm-3.5.0-x86_64-fedora20.tar.xz \\\n    clang+llvm-3.5.0-x86_64-fedora20/bin/clang-format \\\n    --strip-components=2 \\\n    && mv clang-format /usr/local/bin/ \\\n    && rm -f clang+llvm-3.5.0-x86_64-fedora20.tar.xz\n\n###################################################\n# install rpm-build required by CMake / CPack\n###################################################\nRUN dnf update -y \\\n\t&& dnf install -y \\\n\trpm-build \\\n\t&& dnf clean all\n\n###################################################\n# install spdlog\n###################################################\n\nRUN cd /opt \\\n    && . /etc/profile \\\n    && git clone https://github.com/gabime/spdlog.git \\\n    && cd spdlog \\\n    && git checkout 799ba2a57bb16b921099bd9ab64a513e4ebe4217 \\\n    && mkdir build \\\n    && cd build \\\n    && cmake .. \\\n    && make install -j\"$(nproc)\" \\\n    && cd /opt/ \\\n    && rm -rf spdlog\n\n###################################################\n# install websocket++\n###################################################\n\nRUN cd /opt \\\n    && . /etc/profile \\\n    && git clone https://github.com/zaphoyd/websocketpp.git \\\n    && cd websocketpp \\\n    && git checkout 0.8.1 \\\n    && mkdir build \\\n    && cd build \\\n    && cmake .. \\\n    && make install -j\"$(nproc)\" \\\n    && cd /opt/ \\\n    && rm -rf websocketpp\n\n###################################################\n# install DLT\n###################################################\n\nRUN cd /opt \\\n    && . /etc/profile \\\n    && git clone https://github.com/GENIVI/dlt-daemon \\\n    && cd dlt-daemon \\\n    && git checkout v2.15.0 \\\n    && sed -i 's/libdir=${exec_prefix}\\/lib/libdir=@CMAKE_INSTALL_FULL_LIBDIR@/' automotive-dlt.pc.in \\\n    && sed -i 's/includedir=${exec_prefix}\\/include/includedir=@CMAKE_INSTALL_FULL_INCLUDEDIR@/' automotive-dlt.pc.in \\\n    && mkdir build \\\n    && cd build \\\n    && cmake .. -DWITH_DLT_DBUS=OFF -DWITH_DLT_TESTS=OFF -DWITH_DLT_EXAMPLES=OFF \\\n    && make install -j\"$(nproc)\" \\\n    && cd /opt/ \\\n    && rm -rf dlt-daemon \\\n    && echo '/usr/local/lib64' > /etc/ld.so.conf.d/dlt.conf\n\n###################################################\n# install boost\n###################################################\nRUN dnf update -y \\\n    && dnf install -y \\\n    boost \\\n    boost-devel \\\n    && dnf clean all\n\n###################################################\n# install MoCOCrW\n###################################################\n\nRUN export MoCOCrW_VERSION=openssl1.1 \\\n    && . /etc/profile \\\n    && cd /opt \\\n    && git clone https://github.com/bmwcarit/MoCOCrW.git \\\n    && cd MoCOCrW \\\n    && git checkout $MoCOCrW_VERSION \\\n    && mkdir build \\\n    && cd build \\\n    && cmake -DBUILD_TESTING=Off .. \\\n    && make install -j\"$(nproc)\" \\\n    && cd /opt \\\n    && rm -rf MoCOCrW\n\n###################################################\n# install flatbuffers\n###################################################\n\nRUN export FLATBUFFERS_VERSION=v1.10.0 \\\n        && . /etc/profile \\\n        && cd /tmp \\\n        && git clone https://github.com/google/flatbuffers.git \\\n        && cd flatbuffers \\\n        && git checkout $FLATBUFFERS_VERSION \\\n        && mkdir build \\\n        && cd build \\\n        && cmake .. -DFLATBUFFERS_BUILD_TESTS=OFF -DCMAKE_BUILD_TYPE=Release \\\n        && make install -j\"$(nproc)\" \\\n        && rm -rf /tmp/flatbuffers\n\n###################################################\n# install valgrind\n###################################################\n\nRUN export VALGRIND_VERSION=3.13.0 \\\n        && cd /tmp \\\n        && wget https://sourceware.org/pub/valgrind/valgrind-$VALGRIND_VERSION.tar.bz2 \\\n        && tar xf valgrind-$VALGRIND_VERSION.tar.bz2 \\\n        && cd valgrind-$VALGRIND_VERSION \\\n        && ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" \\\n        && make install -j\"$(nproc)\" \\\n        && rm -rf /tmp/valgrind-$VALGRIND_VERSION /tmp/valgrind-$VALGRIND_VERSION.tar.bz2\n\n# DLT installs itself in /usr/local/lib64\nENV PKG_CONFIG_PATH $PKG_CONFIG_PATH:/usr/local/lib64/pkgconfig\n\n###################################################\n# Copy build scripts\n###################################################\nCOPY scripts /data/scripts\n\n###################################################\n# setup build environment\n###################################################\nRUN mkdir -p /home/joynr/\nRUN mkdir /home/joynr/build\nRUN date -R > /data/timestamp\n"
}