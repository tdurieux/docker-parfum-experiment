{
  "startTime": 1674237056769,
  "endTime": 1674237057457,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 48,
        "lineEnd": 48,
        "columnStart": 7,
        "columnEnd": 73
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 93,
        "lineEnd": 93,
        "columnStart": 30,
        "columnEnd": 139
      }
    },
    {
      "rule": "curlUseHttpsUrl",
      "position": {
        "lineStart": 48,
        "lineEnd": 48,
        "columnStart": 7,
        "columnEnd": 73
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 70,
        "lineEnd": 70,
        "columnStart": 7,
        "columnEnd": 62
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 111,
        "lineEnd": 116,
        "columnStart": 7,
        "columnEnd": 16
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "##\n# osgeo/gdal:alpine-small\n\n# This file is available at the option of the licensee under:\n# Public domain\n# or licensed under X/MIT (LICENSE.TXT) Copyright 2019 Even Rouault <even.rouault@spatialys.com>\n\nARG ALPINE_VERSION=3.10\nFROM alpine:${ALPINE_VERSION} as builder\n\n# Derived from osgeo/proj by Howard Butler <howard@hobu.co>\nMAINTAINER Even Rouault <even.rouault@spatialys.com>\n\n# Setup build env for PROJ\nRUN apk add --no-cache wget curl unzip make libtool autoconf automake pkgconfig g++ sqlite sqlite-dev\n\n# For GDAL\nRUN apk add --no-cache \\\n    linux-headers \\\n    curl-dev \\\n    zlib-dev zstd-dev \\\n    libjpeg-turbo-dev libpng-dev libwebp-dev expat-dev postgresql-dev openjpeg-dev\n\n# Build openjpeg\n#ARG OPENJPEG_VERSION=2.3.1\nRUN if test \"${OPENJPEG_VERSION}\" != \"\"; then ( \\\n    apk add --no-cache cmake \\\n    && wget -q https://github.com/uclouvain/openjpeg/archive/v${OPENJPEG_VERSION}.tar.gz \\\n    && tar xzf v${OPENJPEG_VERSION}.tar.gz \\\n    && rm -f v${OPENJPEG_VERSION}.tar.gz \\\n    && cd openjpeg-${OPENJPEG_VERSION} \\\n    && cmake . -DBUILD_SHARED_LIBS=ON  -DBUILD_STATIC_LIBS=OFF -DCMAKE_BUILD_TYPE=Release \\\n        -DCMAKE_INSTALL_PREFIX=/usr \\\n    && make -j$(nproc) \\\n    && make install \\\n    && mkdir -p /build_thirdparty/usr/lib \\\n    && cp -P /usr/lib/libopenjp2*.so* /build_thirdparty/usr/lib \\\n    && for i in /build_thirdparty/usr/lib/*; do strip -s $i 2>/dev/null || /bin/true; done \\\n    && cd .. \\\n    && rm -rf openjpeg-${OPENJPEG_VERSION} \\\n    && apk del cmake \\\n    ); fi\n\nRUN apk add --no-cache rsync ccache\n\nARG PROJ_DATUMGRID_LATEST_LAST_MODIFIED\nRUN \\\n    mkdir -p /build_projgrids/usr/share/proj \\\n    && curl -f -LOs https://download.osgeo.org/proj/proj-datumgrid-latest.zip \\\n    && unzip -q -j -u -o proj-datumgrid-latest.zip  -d /build_projgrids/usr/share/proj \\\n    && rm -f *.zip\n\nARG RSYNC_REMOTE\n\n# Build PROJ\nARG PROJ_VERSION=master\nRUN mkdir proj \\\n    && wget -q https://github.com/OSGeo/proj.4/archive/${PROJ_VERSION}.tar.gz -O - \\\n        | tar xz -C proj --strip-components=1 \\\n    && cd proj \\\n    && ./autogen.sh \\\n    && if test \"${RSYNC_REMOTE}\" != \"\"; then \\\n        echo \"Downloading cache...\"; \\\n        rsync -ra ${RSYNC_REMOTE}/proj/ $HOME/; \\\n        echo \"Finished\"; \\\n        export CC=\"ccache gcc\"; \\\n        export CXX=\"ccache g++\"; \\\n        export PROJ_DB_CACHE_DIR=\"$HOME/.ccache\"; \\\n        ccache -M 100M; \\\n    fi \\\n    && ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --prefix=/usr --disable-static --enable-lto \\\n    && make -j$(nproc) \\\n    && make install \\\n    && make install DESTDIR=\"/build_proj\" \\\n    && if test \"${RSYNC_REMOTE}\" != \"\"; then \\\n        ccache -s; \\\n        echo \"Uploading cache...\"; \\\n        rsync -ra --delete $HOME/.ccache ${RSYNC_REMOTE}/proj/; \\\n        echo \"Finished\"; \\\n        rm -rf $HOME/.ccache; \\\n        unset CC; \\\n        unset CXX; \\\n    fi \\\n    && cd .. \\\n    && rm -rf proj \\\n    && for i in /build_proj/usr/lib/*; do strip -s $i 2>/dev/null || /bin/true; done \\\n    && for i in /build_proj/usr/bin/*; do strip -s $i 2>/dev/null || /bin/true; done\n\n# Build GDAL\nARG GDAL_VERSION=master\nARG GDAL_RELEASE_DATE\nARG GDAL_BUILD_IS_RELEASE\nRUN if test \"${GDAL_VERSION}\" = \"master\"; then \\\n        export GDAL_VERSION=$( curl -f -Ls https://api.github.com/repos/OSGeo/gdal/commits/HEAD -H \"Accept: application/vnd.github.VERSION.sha\"); \\\n        export GDAL_RELEASE_DATE=$(date \"+%Y%m%d\"); \\\n    fi \\\n    && if test \"x${GDAL_BUILD_IS_RELEASE}\" = \"x\"; then \\\n        export GDAL_SHA1SUM=${GDAL_VERSION}; \\\n    fi \\\n    && if test \"${RSYNC_REMOTE}\" != \"\"; then \\\n        echo \"Downloading cache...\"; \\\n        rsync -ra ${RSYNC_REMOTE}/gdal/ $HOME/; \\\n        echo \"Finished\"; \\\n        export CC=\"ccache gcc\"; \\\n        export CXX=\"ccache g++\"; \\\n        ccache -M 1G; \\\n    fi \\\n    && mkdir gdal \\\n    && wget -q https://github.com/OSGeo/gdal/archive/${GDAL_VERSION}.tar.gz -O - \\\n        | tar xz -C gdal --strip-components=1 \\\n    && cd gdal/gdal \\\n    && ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --prefix=/usr --without-libtool \\\n    --with-hide-internal-symbols \\\n    --with-proj=/usr \\\n    --with-libtiff=internal --with-rename-internal-libtiff-symbols \\\n    --with-geotiff=internal --with-rename-internal-libgeotiff-symbols \\\n    --enable-lto \\\n    && make -j$(nproc) \\\n    && make install DESTDIR=\"/build\" \\\n    && if test \"${RSYNC_REMOTE}\" != \"\"; then \\\n        ccache -s; \\\n        echo \"Uploading cache...\"; \\\n        rsync -ra --delete $HOME/.ccache ${RSYNC_REMOTE}/gdal/; \\\n        echo \"Finished\"; \\\n        rm -rf $HOME/.ccache; \\\n        unset CC; \\\n        unset CXX; \\\n    fi \\\n    && cd ../.. \\\n    && rm -rf gdal \\\n    && mkdir -p /build_gdal_version_changing/usr/include \\\n    && mv /build/usr/lib                    /build_gdal_version_changing/usr \\\n    && mv /build/usr/include/gdal_version.h /build_gdal_version_changing/usr/include \\\n    && mv /build/usr/bin                    /build_gdal_version_changing/usr \\\n    && for i in /build_gdal_version_changing/usr/lib/*; do strip -s $i 2>/dev/null || /bin/true; done \\\n    && for i in /build_gdal_version_changing/usr/bin/*; do strip -s $i 2>/dev/null || /bin/true; done \\\n    # Remove resource files of uncompiled drivers\n    && (for i in \\\n            # BAG driver\n            /build/usr/share/gdal/bag*.xml \\\n            # unused\n            /build/usr/share/gdal/*.svg \\\n            # unused\n            /build/usr/share/gdal/*.png \\\n            # GMLAS driver\n            /build/usr/share/gdal/gmlas* \\\n            # netCDF driver\n            /build/usr/share/gdal/netcdf_config.xsd \\\n       ;do rm $i; done)\n\n# Build final image\nFROM alpine:${ALPINE_VERSION} as runner\n\nRUN date\n\nRUN apk add --no-cache \\\n        libstdc++ \\\n        sqlite-libs \\\n        libcurl \\\n        zlib zstd-libs\\\n        libjpeg-turbo libpng openjpeg libwebp expat libpq \\\n    # libturbojpeg.so is not used by GDAL. Only libjpeg.so*\n    && rm -f /usr/lib/libturbojpeg.so* \\\n    # Only libwebp.so is used by GDAL\n    && rm -f /usr/lib/libwebpmux.so* /usr/lib/libwebpdemux.so* /usr/lib/libwebpdecoder.so*\n\n# Order layers starting with less frequently varying ones\n#COPY --from=builder  /build_thirdparty/usr/ /usr/\n\nCOPY --from=builder  /build_projgrids/usr/ /usr/\n\nCOPY --from=builder  /build_proj/usr/share/proj/ /usr/share/proj/\nCOPY --from=builder  /build_proj/usr/include/ /usr/include/\nCOPY --from=builder  /build_proj/usr/bin/ /usr/bin/\nCOPY --from=builder  /build_proj/usr/lib/ /usr/lib/\n\nCOPY --from=builder  /build/usr/share/gdal/ /usr/share/gdal/\nCOPY --from=builder  /build/usr/include/ /usr/include/\nCOPY --from=builder  /build_gdal_version_changing/usr/ /usr/\n"
}