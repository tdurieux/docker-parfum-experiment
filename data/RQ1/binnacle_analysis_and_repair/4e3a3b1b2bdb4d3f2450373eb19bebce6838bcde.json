{
  "startTime": 1674250070564,
  "endTime": 1674250070855,
  "originalSmells": [
    {
      "rule": "wgetUseHttpsUrl",
      "position": {
        "lineStart": 89,
        "lineEnd": 89,
        "columnStart": 2,
        "columnEnd": 65
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 43,
        "lineEnd": 52,
        "columnStart": 2,
        "columnEnd": 14
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 94,
        "lineEnd": 118,
        "columnStart": 2,
        "columnEnd": 30
      }
    },
    {
      "rule": "apkAddUseNoCache",
      "position": {
        "lineStart": 12,
        "lineEnd": 28,
        "columnStart": 4,
        "columnEnd": 10
      }
    },
    {
      "rule": "apkAddUseNoCache",
      "position": {
        "lineStart": 63,
        "lineEnd": 82,
        "columnStart": 4,
        "columnEnd": 6
      }
    },
    {
      "rule": "apkAddUseNoCache",
      "position": {
        "lineStart": 85,
        "lineEnd": 85,
        "columnStart": 4,
        "columnEnd": 32
      }
    },
    {
      "rule": "apkAddUseNoCache",
      "position": {
        "lineStart": 129,
        "lineEnd": 143,
        "columnStart": 4,
        "columnEnd": 10
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "ARG NGINX_VERSION=1.16.0\nARG NGINX_RTMP_VERSION=1.2.1\nARG FFMPEG_VERSION=4.1.3\n\n\n##############################\n# Build the NGINX-build image.\nFROM alpine:3.8 as build-nginx\nARG NGINX_VERSION\nARG NGINX_RTMP_VERSION\n\n# Build dependencies.\nRUN apk add --no-cache --update \\\n  build-base \\\n  ca-certificates \\\n  curl \\\n  gcc \\\n  libc-dev \\\n  libgcc \\\n  linux-headers \\\n  make \\\n  musl-dev \\\n  openssl \\\n  openssl-dev \\\n  pcre \\\n  pcre-dev \\\n  pkgconf \\\n  pkgconfig \\\n  zlib-dev\n\n# Get nginx source.\nRUN cd /tmp && \\\n  wget https://nginx.org/download/nginx-${NGINX_VERSION}.tar.gz && \\\n  tar zxf nginx-${NGINX_VERSION}.tar.gz && \\\n  rm nginx-${NGINX_VERSION}.tar.gz\n\n# Get nginx-rtmp module.\nRUN cd /tmp && \\\n  wget https://github.com/arut/nginx-rtmp-module/archive/v${NGINX_RTMP_VERSION}.tar.gz && \\\n  tar zxf v${NGINX_RTMP_VERSION}.tar.gz && rm v${NGINX_RTMP_VERSION}.tar.gz\n\n# Compile nginx with nginx-rtmp module.\nRUN cd /tmp/nginx-${NGINX_VERSION} && \\\n  ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" \\\n  --prefix=/opt/nginx \\\n  --add-module=/tmp/nginx-rtmp-module-${NGINX_RTMP_VERSION} \\\n  --conf-path=/opt/nginx/nginx.conf \\\n  --with-threads \\\n  --with-file-aio \\\n  --with-http_ssl_module \\\n  --error-log-path=/opt/nginx/logs/error.log \\\n  --http-log-path=/opt/nginx/logs/access.log \\\n  --with-debug && \\\n  cd /tmp/nginx-${NGINX_VERSION} && make && make install\n\n###############################\n# Build the FFmpeg-build image.\nFROM alpine:3.8 as build-ffmpeg\nARG FFMPEG_VERSION\nARG PREFIX=/usr/local\nARG MAKEFLAGS=\"-j4\"\n\n# FFmpeg build dependencies.\nRUN apk add --no-cache --update \\\n  build-base \\\n  coreutils \\\n  freetype-dev \\\n  lame-dev \\\n  libogg-dev \\\n  libass \\\n  libass-dev \\\n  libvpx-dev \\\n  libvorbis-dev \\\n  libwebp-dev \\\n  libtheora-dev \\\n  opus-dev \\\n  pkgconf \\\n  pkgconfig \\\n  rtmpdump-dev \\\n  wget \\\n  x264-dev \\\n  x265-dev \\\n  yasm\n\nRUN echo http://dl-cdn.alpinelinux.org/alpine/edge/testing >> /etc/apk/repositories\nRUN apk add --no-cache --update fdk-aac-dev\n\n# Get FFmpeg source.\nRUN cd /tmp/ && \\\n  wget https://ffmpeg.org/releases/ffmpeg-${FFMPEG_VERSION}.tar.gz && \\\n  tar zxf ffmpeg-${FFMPEG_VERSION}.tar.gz && rm ffmpeg-${FFMPEG_VERSION}.tar.gz\n\n# Compile ffmpeg.\nRUN cd /tmp/ffmpeg-${FFMPEG_VERSION} && \\\n  ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" \\\n  --prefix=${PREFIX} \\\n  --enable-version3 \\\n  --enable-gpl \\\n  --enable-nonfree \\\n  --enable-small \\\n  --enable-libmp3lame \\\n  --enable-libx264 \\\n  --enable-libx265 \\\n  --enable-libvpx \\\n  --enable-libtheora \\\n  --enable-libvorbis \\\n  --enable-libopus \\\n  --enable-libfdk-aac \\\n  --enable-libass \\\n  --enable-libwebp \\\n  --enable-librtmp \\\n  --enable-postproc \\\n  --enable-avresample \\\n  --enable-libfreetype \\\n  --enable-openssl \\\n  --disable-debug \\\n  --disable-doc \\\n  --disable-ffplay \\\n  --extra-libs=\"-lpthread -lm\" && \\\n  make && make install && make distclean\n\n# Cleanup.\nRUN rm -rf /var/cache/* /tmp/*\n\n##########################\n# Build the release image.\nFROM alpine:3.8\nLABEL MAINTAINER Alfred Gutierrez <alf.g.jr@gmail.com>\n\nRUN apk add --no-cache --update \\\n  ca-certificates \\\n  openssl \\\n  pcre \\\n  lame \\\n  libogg \\\n  libass \\\n  libvpx \\\n  libvorbis \\\n  libwebp \\\n  libtheora \\\n  opus \\\n  rtmpdump \\\n  x264-dev \\\n  x265-dev\n\nCOPY --from=build-nginx /opt/nginx /opt/nginx\nCOPY --from=build-ffmpeg /usr/local /usr/local\nCOPY --from=build-ffmpeg /usr/lib/libfdk-aac.so.2 /usr/lib/libfdk-aac.so.2\n\n# Add NGINX config and static files.\nADD nginx.conf /opt/nginx/nginx.conf\nRUN mkdir -p /opt/data && mkdir /www\nADD static /www/static\n\nEXPOSE 1935\nEXPOSE 80\n\nCMD [\"/opt/nginx/sbin/nginx\"]\n"
}