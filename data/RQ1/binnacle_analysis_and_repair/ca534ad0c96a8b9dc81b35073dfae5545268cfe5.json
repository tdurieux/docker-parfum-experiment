{
  "startTime": 1674252329144,
  "endTime": 1674252329353,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 65,
        "lineEnd": 65,
        "columnStart": 4,
        "columnEnd": 70
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 26,
        "lineEnd": 26,
        "columnStart": 4,
        "columnEnd": 54
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 22,
        "lineEnd": 24,
        "columnStart": 4,
        "columnEnd": 15
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 22,
        "lineEnd": 24,
        "columnStart": 4,
        "columnEnd": 15
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 9,
        "lineEnd": 20,
        "columnStart": 4,
        "columnEnd": 14
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 22,
        "lineEnd": 24,
        "columnStart": 4,
        "columnEnd": 15
      }
    }
  ],
  "repairedSmells": [
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 22,
        "lineEnd": 24,
        "columnStart": 4,
        "columnEnd": 15
      }
    }
  ],
  "repairedDockerfile": "FROM debian:stretch\n\nMAINTAINER Phil J. ≈Åaszkowicz <phil@fillip.pro>\n\n# The Rust toolchain to use when building our image.  Set by `--build-arg`.\nARG TOOLCHAIN=stable\n\n# build packages\nRUN apt-get update && \\\n    apt-get install --no-install-recommends -y \\\n    autoconf \\\n    automake \\\n    autotools-dev \\\n    build-essential \\\n    ca-certificates \\\n    curl \\\n    file \\\n    libtool \\\n    musl-tools \\\n    sudo \\\n    xutils-dev && rm -rf /var/lib/apt/lists/*;\n\nRUN apt-get install --no-install-recommends -y \\\n    cmake \\\n    python3-pip && rm -rf /var/lib/apt/lists/*;\n\nRUN pip3 install --no-cache-dir eth-utils rlp py_ecc coincurve pysha3\n\nRUN useradd rust --user-group --create-home --shell /bin/bash --groups sudo\n\n# Allow sudo without a password.\nADD sudoers /etc/sudoers.d/nopasswd\nRUN chmod -R 0755 /etc/sudoers.d\n\n# Run all further code as user `rust`, and create our working directories\n# as the appropriate user.\nUSER rust\nRUN mkdir -p /home/rust/libs /home/rust/src\n\n# Set up our path with all our binary directories, including those for the\n# musl-gcc toolchain and for our Rust toolchain.\nENV PATH=/home/rust/.cargo/bin:/usr/local/musl/bin:/usr/local/bin:/usr/bin:/bin\n\n# Install our Rust toolchain and the `musl` target.  We patch the\n# command-line we pass to the installer so that it won't attempt to\n# interact with the user or fool around with TTYs.  We also set the default\n# `--target` to musl so that our users don't need to keep overriding it\n# manually.\nRUN curl https://sh.rustup.rs -sSf | \\\n    sh -s -- -y --default-toolchain none\n\nRUN rustup default $TOOLCHAIN && \\\n    rustup target add x86_64-unknown-linux-musl && \\\n    rustup target add i686-unknown-linux-musl\nADD cargo-config.toml /home/rust/.cargo/config\n\n# We'll build our libraries in subdirectories of /home/rust/libs.  Please\n# clean up when you're done.\nWORKDIR /home/rust/libs\n\n# set openssl version\nENV SSL_VERSION=1.0.2l\n\n# Build a static library version of OpenSSL using musl-libc.  This is\n# needed by the popular `rust-openssl` crate.\nRUN curl -f -O https://www.openssl.org/source/openssl-$SSL_VERSION.tar.gz && \\\n    tar xvzf openssl-$SSL_VERSION.tar.gz && cd openssl-$SSL_VERSION && \\\n    env CC=musl-gcc ./config --prefix=/usr/local/musl && \\\n    env C_INCLUDE_PATH=/usr/local/musl/include/ && \\\n    make depend && \\\n    make && \\\n    sudo make install && \\\n    cd .. && \\\n    rm -rf openssl-$SSL_VERSION.tar.gz openssl-$SSL_VERSION\n\nENV OPENSSL_DIR=/usr/local/musl/ \\\n    OPENSSL_INCLUDE_DIR=/usr/local/musl/include/ \\\n    DEP_OPENSSL_INCLUDE=/usr/local/musl/include/ \\\n    OPENSSL_LIB_DIR=/usr/local/musl/lib/ \\\n    OPENSSL_STATIC=1\n\n# clean up\nRUN sudo apt-get remove -y --purge \\\n    curl && \\\n    sudo apt-get autoremove -y && \\\n    sudo rm -rf /var/lib/apt/lists/*\n\n# Expect our source code to live in /home/rust/src.  We'll run the build as\n# user `rust`, which will be uid 1000, gid 1000 outside the container.\nWORKDIR /home/rust/src\n"
}