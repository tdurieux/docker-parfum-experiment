{
  "startTime": 1674244435379,
  "endTime": 1674244435779,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 28,
        "lineEnd": 28,
        "columnStart": 2,
        "columnEnd": 75
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 86,
        "lineEnd": 86,
        "columnStart": 4,
        "columnEnd": 29
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 87,
        "lineEnd": 87,
        "columnStart": 4,
        "columnEnd": 37
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 116,
        "lineEnd": 116,
        "columnStart": 2,
        "columnEnd": 13
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 29,
        "lineEnd": 29,
        "columnStart": 26,
        "columnEnd": 62
      }
    },
    {
      "rule": "gpgUseBatchFlag",
      "position": {
        "lineStart": 93,
        "lineEnd": 93,
        "columnStart": 4,
        "columnEnd": 93
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 27,
        "lineEnd": 27,
        "columnStart": 22,
        "columnEnd": 64
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 34,
        "lineEnd": 72,
        "columnStart": 22,
        "columnEnd": 6
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 125,
        "lineEnd": 127,
        "columnStart": 4,
        "columnEnd": 8
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 131,
        "lineEnd": 133,
        "columnStart": 4,
        "columnEnd": 5
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 125,
        "lineEnd": 127,
        "columnStart": 4,
        "columnEnd": 8
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 131,
        "lineEnd": 133,
        "columnStart": 4,
        "columnEnd": 5
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 27,
        "lineEnd": 27,
        "columnStart": 22,
        "columnEnd": 64
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 34,
        "lineEnd": 72,
        "columnStart": 22,
        "columnEnd": 6
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 125,
        "lineEnd": 127,
        "columnStart": 4,
        "columnEnd": 8
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 131,
        "lineEnd": 133,
        "columnStart": 4,
        "columnEnd": 5
      }
    }
  ],
  "repairedSmells": [
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 125,
        "lineEnd": 127,
        "columnStart": 4,
        "columnEnd": 8
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 131,
        "lineEnd": 133,
        "columnStart": 4,
        "columnEnd": 5
      }
    }
  ],
  "repairedDockerfile": "# This Dockerfile specifies the recipe for creating an image for the tests\n# to run in.\n#\n# We install as many test dependencies here as we can, because these setup\n# steps can be cached.  They do *not* run every time we run the build.\n# The Docker image is only rebuilt when the Dockerfile (ie. this file)\n# changes.\n\n# Base Dockerfile for gRPC dev images\nFROM debian:latest\n\n# Apt source for old Python versions.\nRUN echo 'deb http://ppa.launchpad.net/fkrull/deadsnakes/ubuntu trusty main' > /etc/apt/sources.list.d/deadsnakes.list && \\\n  apt-key adv --keyserver keyserver.ubuntu.com --recv-keys DB82666C\n\n# Apt source for Oracle Java.\nrun echo 'deb http://ppa.launchpad.net/webupd8team/java/ubuntu trusty main' > /etc/apt/sources.list.d/webupd8team-java-trusty.list && \\\n  apt-key adv --keyserver keyserver.ubuntu.com --recv-keys EEA14886 && \\\n  echo \"oracle-java7-installer shared/accepted-oracle-license-v1-1 select true\" | debconf-set-selections\n\n# Apt source for Mono\nrun echo \"deb http://download.mono-project.com/repo/debian wheezy main\" | tee /etc/apt/sources.list.d/mono-xamarin.list && \\\n  echo \"deb http://download.mono-project.com/repo/debian wheezy-libjpeg62-compat main\" | tee -a /etc/apt/sources.list.d/mono-xamarin.list && \\\n  apt-key adv --keyserver keyserver.ubuntu.com --recv-keys 3FA7E0328081BFF6A14DA29AA6A19B38D3D831EF\n\n# Install dotnet SDK based on https://www.microsoft.com/net/core#debian\n# (Ubuntu instructions need apt to support https)\nRUN apt-get update && apt-get install --no-install-recommends -y curl libunwind8 gettext && \\\n  curl -f -sSL -o dotnet.tar.gz https://go.microsoft.com/fwlink/?LinkID=809130 && \\\n  mkdir -p /opt/dotnet && tar zxf dotnet.tar.gz -C /opt/dotnet && \\\n  ln -s /opt/dotnet/dotnet /usr/local/bin && rm dotnet.tar.gz && rm -rf /var/lib/apt/lists/*;\n\n# Install dependencies.  We start with the basic ones require to build protoc\n# and the C++ build\nRUN apt-get update && apt-get install --no-install-recommends -y \\\n  autoconf \\\n  autotools-dev \\\n  build-essential \\\n  bzip2 \\\n  ccache \\\n  curl \\\n  gcc \\\n  git \\\n  libc6 \\\n  libc6-dbg \\\n  libc6-dev \\\n  libgtest-dev \\\n  libtool \\\n  make \\\n  parallel \\\n  time \\\n  wget \\\n  # -- For csharp --\n  mono-devel \\\n  referenceassemblies-pcl \\\n  nunit \\\n  # -- For all Java builds -- \\\n  maven \\\n  # -- For java_jdk6 -- \\\n  #   oops! not in jessie. too old? openjdk-6-jdk \\\n  # -- For java_jdk7 -- \\\n  openjdk-7-jdk \\\n  # -- For java_oracle7 -- \\\n  oracle-java7-installer \\\n  # -- For python / python_cpp -- \\\n  python-setuptools \\\n  python-pip \\\n  python-dev \\\n  python2.6-dev \\\n  python3.3-dev \\\n  python3.4-dev \\\n  # -- For Ruby --\n  ruby \\\n  && apt-get clean && rm -rf /var/lib/apt/lists/*;\n\n##################\n# C# dependencies\n\nRUN wget www.nuget.org/NuGet.exe -O /usr/local/bin/nuget.exe\n\n##################\n# Python dependencies\n\n# These packages exist in apt-get, but their versions are too old, so we have\n# to get updates from pip.\n\nRUN pip install --no-cache-dir pip --upgrade\nRUN pip install --no-cache-dir virtualenv tox yattag\n\n##################\n# Ruby dependencies\n\n# Install rvm\nRUN gpg --batch --keyserver hkp://keys.gnupg.net --recv-keys 409B6B1796C275462A1703113804BB82D39DC0E3\nRUN \\curl -sSL https://get.rvm.io | bash -s stable\n\n# Install Ruby 2.1, Ruby 2.2 and JRuby 1.7\nRUN /bin/bash -l -c \"rvm install ruby-2.1\"\nRUN /bin/bash -l -c \"rvm install ruby-2.2\"\nRUN /bin/bash -l -c \"rvm install jruby-1.7\"\nRUN /bin/bash -l -c \"echo 'gem: --no-ri --no-rdoc' > ~/.gemrc\"\nRUN /bin/bash -l -c \"echo 'export PATH=/usr/local/rvm/bin:$PATH' >> ~/.bashrc\"\nRUN /bin/bash -l -c \"gem install bundler --no-ri --no-rdoc\"\n\n##################\n# Java dependencies\n\n# This step requires compiling protoc. :(\n\nENV MAVEN_REPO /var/maven_local_repository\nENV MVN mvn --batch-mode\n\nRUN cd /tmp && \\\n  git clone https://github.com/google/protobuf.git && \\\n  cd protobuf && \\\n  ./autogen.sh && \\\n  ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" && \\\n  make -j4 && \\\n  cd java && \\\n  $MVN install dependency:go-offline -Dmaven.repo.local=$MAVEN_REPO && \\\n  cd ../javanano && \\\n  $MVN install dependency:go-offline -Dmaven.repo.local=$MAVEN_REPO\n\n##################\n# Go dependencies.\nRUN apt-get install --no-install-recommends -y \\\n\n  golang && rm -rf /var/lib/apt/lists/*;\n\n##################\n# Javascript dependencies.\nRun apt-get install --no-install-recommends -y \\\n\n  npm && rm -rf /var/lib/apt/lists/*;\n\n# On Debian/Ubuntu, nodejs binary is named 'nodejs' because the name 'node'\n# is taken by another legacy binary. We don't have that legacy binary and\n# npm expects the binary to be named 'node', so we just create a symbol\n# link here.\nRUN ln -s `which nodejs` /usr/bin/node\n\n##################\n# Prepare ccache\n\nRUN ln -s /usr/bin/ccache /usr/local/bin/gcc\nRUN ln -s /usr/bin/ccache /usr/local/bin/g++\nRUN ln -s /usr/bin/ccache /usr/local/bin/cc\nRUN ln -s /usr/bin/ccache /usr/local/bin/c++\nRUN ln -s /usr/bin/ccache /usr/local/bin/clang\nRUN ln -s /usr/bin/ccache /usr/local/bin/clang++\n\n# Define the default command.\nCMD [\"bash\"]\n"
}