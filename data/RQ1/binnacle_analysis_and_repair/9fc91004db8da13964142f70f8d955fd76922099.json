{
  "startTime": 1674242852475,
  "endTime": 1674242853006,
  "originalSmells": [
    {
      "rule": "wgetUseHttpsUrl",
      "position": {
        "lineStart": 90,
        "lineEnd": 90,
        "columnStart": 4,
        "columnEnd": 100
      }
    },
    {
      "rule": "wgetUseHttpsUrl",
      "position": {
        "lineStart": 91,
        "lineEnd": 91,
        "columnStart": 7,
        "columnEnd": 97
      }
    },
    {
      "rule": "wgetUseHttpsUrl",
      "position": {
        "lineStart": 98,
        "lineEnd": 98,
        "columnStart": 4,
        "columnEnd": 132
      }
    },
    {
      "rule": "wgetUseHttpsUrl",
      "position": {
        "lineStart": 99,
        "lineEnd": 99,
        "columnStart": 7,
        "columnEnd": 129
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 129,
        "lineEnd": 129,
        "columnStart": 4,
        "columnEnd": 23
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 131,
        "lineEnd": 131,
        "columnStart": 4,
        "columnEnd": 36
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 11,
        "lineEnd": 11,
        "columnStart": 7,
        "columnEnd": 78
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 30,
        "lineEnd": 30,
        "columnStart": 7,
        "columnEnd": 74
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 32,
        "lineEnd": 38,
        "columnStart": 7,
        "columnEnd": 38
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 52,
        "lineEnd": 59,
        "columnStart": 4,
        "columnEnd": 24
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 104,
        "lineEnd": 104,
        "columnStart": 7,
        "columnEnd": 89
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# This GDAL image comes with support for FileGDB and has Python 3.6 already installed.\n# Based on official Ubuntu docker image.\n\nFROM geometalab/gdal-docker:v3.0.0\n\nUSER root\n\nENV PYTHONUNBUFFERED=non-empty-string PYTHONIOENCODING=utf-8 LC_ALL=C.UTF-8 LANG=C.UTF-8\n\n# make the \"en_US.UTF-8\" locale so postgres will be utf-8 enabled by default\nRUN DEBIAN_FRONTEND=noninteractive apt-get update \\\n    && DEBIAN_FRONTEND=noninteractive apt-get --no-install-recommends install -y apt-utils locales gpg \\\n    && rm -rf /var/lib/apt/lists/* \\\n    && localedef -i en_US -c -f UTF-8 -A /usr/share/locale/locale.alias en_US.UTF-8 \\\n    && rm -rf /var/lib/apt/lists/*\n\n################## SETUP POSTGIS DATABASE with UTF8 support #############\n# explicitly set user/group IDs\nRUN groupadd -r postgres --gid=999 && useradd -r -g postgres --uid=999 postgres\n\nRUN mkdir /docker-entrypoint-initdb.d\n\nRUN APT_KEY_DONT_WARN_ON_DANGEROUS_USAGE=DontWarn \\\n    apt-key adv --keyserver ha.pool.sks-keyservers.net --recv-keys B97B0AFCAA1A47F044F244A07FCC7D46ACCC4CF8\n\nENV PG_MAJOR 11\nENV POSTGIS_MAJOR 2.5\n\nRUN echo 'deb http://apt.postgresql.org/pub/repos/apt/ bionic-pgdg main' $PG_MAJOR > /etc/apt/sources.list.d/pgdg.list \\\n    && DEBIAN_FRONTEND=noninteractive apt-get update \\\n    && DEBIAN_FRONTEND=noninteractive apt-get --no-install-recommends install -y postgresql-common \\\n    && sed -ri 's/#(create_main_cluster) .*$/\\1 = false/' /etc/postgresql-common/createcluster.conf \\\n    && DEBIAN_FRONTEND=noninteractive apt-get --no-install-recommends install -y \\\n        postgresql-${PG_MAJOR} \\\n        postgresql-contrib-${PG_MAJOR} \\\n        postgresql-${PG_MAJOR}-postgis-${POSTGIS_MAJOR} \\\n        postgresql-${PG_MAJOR}-postgis-scripts \\\n        postgresql-server-dev-${PG_MAJOR} \\\n        postgresql-contrib-${PG_MAJOR} \\\n    && DEBIAN_FRONTEND=noninteractive apt-get clean \\\n    && rm -rf /var/lib/apt/lists/* \\\n    && mkdir -p /var/run/postgresql && chown -R 999:999 /var/run/postgresql\n\nENV PATH /usr/lib/postgresql/$PG_MAJOR/bin:$PATH\nENV PGDATA /var/lib/postgresql/data\n\nRUN mkdir -p $PGDATA && chown -R 999:999 /var/lib/postgresql \\\n    && pg_createcluster --locale=en_US.UTF-8 -d $PGDATA ${PG_MAJOR} main\n\n################## END SETUP POSTGIS DATABASE with UTF8 support #############\n\nRUN DEBIAN_FRONTEND=noninteractive apt-get update && \\\n    DEBIAN_FRONTEND=noninteractive apt-get --no-install-recommends install -y\\\n\n    make cmake g++ libboost-dev libboost-system-dev \\\n    libboost-filesystem-dev libexpat1-dev zlib1g-dev \\\n    libbz2-dev libpq-dev lua5.2 liblua5.2-dev \\\n    libproj-dev \\\n    curl git wget \\\n    libstdc++6 osmctools \\\n    && DEBIAN_FRONTEND=noninteractive apt-get clean \\\n    && rm -rf /var/lib/apt/lists/*\n\nENV LD_LIBRARY_PATH=/usr/lib/x86_64-linux-gnu:/usr/lib:${LD_LIBRARY_PATH}\nRUN ldconfig\n\nWORKDIR /root/osm2pgsql\n\n# OSM2PGSQL\nENV OSM2PGSQL_VERSION=0.96.0 CXXFLAGS=-DACCEPT_USE_OF_DEPRECATED_PROJ_API_H=1\nRUN mkdir src &&\\\n    cd src &&\\\n    GIT_SSL_NO_VERIFY=true git clone https://github.com/openstreetmap/osm2pgsql.git &&\\\n    cd osm2pgsql &&\\\n    git checkout ${OSM2PGSQL_VERSION} &&\\\n    mkdir -p build &&\\\n    cd build &&\\\n    cmake .. &&\\\n    make &&\\\n    make install\n\n# correcter/more portable would be:\n#    cmake .. &&\\\n#    echo 'cmake worked' &&\\\n#    cmake --build . &&\\\n#    echo 'also make worked' &&\\\n#    cmake --build . --target install\n\nWORKDIR /var/data/garmin/additional_data/\n# Fetch required additional data for Garmin as documented http://www.mkgmap.org.uk/download/mkgmap.html\nRUN wget -O /var/data/garmin/additional_data/bounds.zip https://osm.thkukuk.de/data/bounds-latest.zip \\\n    && wget -O /var/data/garmin/additional_data/sea.zip https://osm.thkukuk.de/data/sea-latest.zip\n\nENV CODE /code\nWORKDIR $CODE\n\n# Install dependencies\nENV LIBUTF8PROCVERSION 2.3.0-1\nRUN wget -O libutf8proc-dev.deb https://ftp.ch.debian.org/debian/pool/main/u/utf8proc/libutf8proc-dev_${LIBUTF8PROCVERSION}_amd64.deb \\\n    && wget -O libutf8proc1.deb https://ftp.ch.debian.org/debian/pool/main/u/utf8proc/libutf8proc2_${LIBUTF8PROCVERSION}_amd64.deb \\\n    && dpkg --install libutf8proc1.deb libutf8proc-dev.deb \\\n    && rm libutf8proc1.deb libutf8proc-dev.deb\n\nRUN DEBIAN_FRONTEND=noninteractive apt-get update \\\n    && DEBIAN_FRONTEND=noninteractive apt-get --no-install-recommends install -y pandoc libkakasi2-dev libicu-dev \\\n    && git clone https://github.com/giggls/mapnik-german-l10n.git mapnik-german-l10n \\\n    && cd mapnik-german-l10n && git checkout v2.5.1 \\\n    && make && make install && make clean \\\n    && DEBIAN_FRONTEND=noninteractive apt-get purge -y pandoc \\\n    && DEBIAN_FRONTEND=noninteractive apt-get clean \\\n    && rm -rf /var/lib/apt/lists/*\n\nENV HOME /home/py\n\n# Workaround for AUFS-related(?) permission issue:\n# See https://github.com/docker/docker/issues/783#issuecomment-56013588\nRUN mkdir /etc/ssl/private-copy; mv /etc/ssl/private/* /etc/ssl/private-copy/; rm -r /etc/ssl/private; mv /etc/ssl/private-copy /etc/ssl/private; chmod -R 0700 /etc/ssl/private; chown -R postgres /etc/ssl/private\n\n# activate translit\nRUN mkdir -p $HOME/osmaxx/worker $HOME/entrypoint\nCOPY ./docker_entrypoint/osmaxx/worker $HOME/entrypoint\nCOPY ./docker_entrypoint/wait-for-it/wait-for-it.sh $HOME/entrypoint/wait-for-it.sh\n\nRUN sed -i '1ilocal   all             all                                     trust' /etc/postgresql/${PG_MAJOR}/main/pg_hba.conf\n\nRUN chmod a+rx $CODE\n\nWORKDIR $HOME\n\nRUN pip3 install --no-cache-dir honcho\nADD ./requirements.txt $HOME/requirements.txt\nRUN pip3 install --no-cache-dir -r requirements.txt\n\n# TODO: this is just a temporary solution, use pip for production as soon as geometalab.osmaxx is published there\nADD ./osmaxx $HOME/osmaxx\nADD ./conversion_service $HOME/conversion_service\n\n# expose modules\nENV PYTHONPATH=PYTHONPATH:$HOME\nENV DJANGO_SETTINGS_MODULE=conversion_service.config.settings.worker\nENV WORKER_QUEUES default high\n\nENTRYPOINT [\"/home/py/entrypoint/entrypoint.sh\"]\n\nCMD [\"honcho\", \"-f\", \"./conversion_service/Procfile.worker\", \"start\"]\n"
}