{
  "startTime": 1674251405084,
  "endTime": 1674251405645,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 98,
        "lineEnd": 98,
        "columnStart": 4,
        "columnEnd": 81
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 113,
        "lineEnd": 113,
        "columnStart": 4,
        "columnEnd": 74
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 130,
        "lineEnd": 132,
        "columnStart": 4,
        "columnEnd": 24
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 165,
        "lineEnd": 165,
        "columnStart": 4,
        "columnEnd": 36
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 167,
        "lineEnd": 167,
        "columnStart": 4,
        "columnEnd": 46
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 168,
        "lineEnd": 168,
        "columnStart": 4,
        "columnEnd": 45
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 133,
        "lineEnd": 133,
        "columnStart": 4,
        "columnEnd": 23
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 74,
        "lineEnd": 95,
        "columnStart": 22,
        "columnEnd": 7
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 146,
        "lineEnd": 158,
        "columnStart": 22,
        "columnEnd": 7
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM ubuntu:14.04\nMAINTAINER NVIDIA CORPORATION <digits@nvidia.com>\n\nLABEL com.nvidia.volumes.needed=\"nvidia_driver\"\n\nENV NVIDIA_GPGKEY_SUM bd841d59a27a406e513db7d405550894188a4c1cd96bf8aa4f82f1b39e0b5c1c\nENV NVIDIA_GPGKEY_FPR 889bee522da690103c4b085ed88c3d385c37d3be\n\nRUN apt-key adv --fetch-keys http://developer.download.nvidia.com/compute/cuda/repos/GPGKEY && \\\n    apt-key adv --export --no-emit-version -a $NVIDIA_GPGKEY_FPR | tail -n +2 > cudasign.pub && \\\n    echo \"$NVIDIA_GPGKEY_SUM  cudasign.pub\" | sha256sum -c --strict - && rm cudasign.pub && \\\n    echo \"deb http://developer.download.nvidia.com/compute/cuda/repos/ubuntu1404/x86_64 /\" > /etc/apt/sources.list.d/cuda.list\n\nENV CUDA_VERSION 7.5\nLABEL com.nvidia.cuda.version=\"7.5\"\n\nENV CUDA_PKG_VERSION 7-5=7.5-18\nRUN apt-get update && apt-get install -y --no-install-recommends --force-yes \\\n        cuda-nvrtc-$CUDA_PKG_VERSION \\\n        cuda-cusolver-$CUDA_PKG_VERSION \\\n        cuda-cublas-$CUDA_PKG_VERSION \\\n        cuda-cufft-$CUDA_PKG_VERSION \\\n        cuda-curand-$CUDA_PKG_VERSION \\\n        cuda-cusparse-$CUDA_PKG_VERSION \\\n        cuda-npp-$CUDA_PKG_VERSION \\\n        cuda-cudart-$CUDA_PKG_VERSION && \\\n    ln -s cuda-$CUDA_VERSION /usr/local/cuda && \\\n    rm -rf /var/lib/apt/lists/*\n\nRUN echo \"/usr/local/cuda/lib\" >> /etc/ld.so.conf.d/cuda.conf && \\\n    echo \"/usr/local/cuda/lib64\" >> /etc/ld.so.conf.d/cuda.conf && \\\n    ldconfig\n\nRUN echo \"/usr/local/nvidia/lib\" >> /etc/ld.so.conf.d/nvidia.conf && \\\n    echo \"/usr/local/nvidia/lib64\" >> /etc/ld.so.conf.d/nvidia.conf\n\nENV PATH /usr/local/nvidia/bin:/usr/local/cuda/bin:${PATH}\nENV LD_LIBRARY_PATH /usr/local/nvidia/lib:/usr/local/nvidia/lib64:${LD_LIBRARY_PATH}\n\nRUN apt-get update && apt-get install -y --no-install-recommends --force-yes \\\n        cuda-core-$CUDA_PKG_VERSION \\\n        cuda-misc-headers-$CUDA_PKG_VERSION \\\n        cuda-command-line-tools-$CUDA_PKG_VERSION \\\n        cuda-license-$CUDA_PKG_VERSION \\\n        cuda-nvrtc-dev-$CUDA_PKG_VERSION \\\n        cuda-cusolver-dev-$CUDA_PKG_VERSION \\\n        cuda-cublas-dev-$CUDA_PKG_VERSION \\\n        cuda-cufft-dev-$CUDA_PKG_VERSION \\\n        cuda-curand-dev-$CUDA_PKG_VERSION \\\n        cuda-cusparse-dev-$CUDA_PKG_VERSION \\\n        cuda-npp-dev-$CUDA_PKG_VERSION \\\n        cuda-cudart-dev-$CUDA_PKG_VERSION \\\n        cuda-driver-dev-$CUDA_PKG_VERSION && \\\n    cd /tmp && apt-get download gpu-deployment-kit && \\\n    rm -rf /var/lib/apt/lists/*\n\nRUN mkdir /tmp/gpu-deployment-kit && cd /tmp/gpu-deployment-kit && \\\n    dpkg -x /tmp/gpu-deployment-kit_*.deb . && \\\n    mv usr/include/nvidia/gdk/* /usr/local/cuda/include && \\\n    mv usr/src/gdk/nvml/lib/* /usr/local/cuda/lib64/stubs && \\\n    rm -rf /tmp/gpu-deployment-kit*\n\nENV LIBRARY_PATH /usr/local/cuda/lib64/stubs:${LIBRARY_PATH}\nRUN echo \"deb http://developer.download.nvidia.com/compute/machine-learning/repos/ubuntu1404/x86_64 /\" > /etc/apt/sources.list.d/nvidia-ml.list\n\nENV CUDNN_VERSION 5\nLABEL com.nvidia.cudnn.version=\"5\"\n\n# workaround: libcudnn5-dev should have an exact version dependency on the runtime library libcudnn5\nRUN apt-get update && apt-get install -y --no-install-recommends --force-yes \\\n            libcudnn5=5.0.5-1+cuda7.5 \\\n            libcudnn5-dev=5.0.5-1+cuda7.5 && \\\n    rm -rf /var/lib/apt/lists/*\n\nRUN apt-get update && apt-get install --no-install-recommends -y \\\n    build-essential \\\n    cmake \\\n    curl \\\n    gfortran \\\n    git \\\n    graphicsmagick \\\n    libgraphicsmagick1-dev \\\n    libatlas-dev \\\n    libavcodec-dev \\\n    libavformat-dev \\\n    libboost-all-dev \\\n    libgtk2.0-dev \\\n    libjpeg-dev \\\n    liblapack-dev \\\n    libswscale-dev \\\n    pkg-config \\\n    python-dev \\\n    python-numpy \\\n    python-protobuf \\\n    software-properties-common \\\n    zip \\\n    && apt-get clean && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*\n\nRUN curl -f -s https://raw.githubusercontent.com/torch/ezinstall/master/install-deps | bash -e\nRUN git clone https://github.com/torch/distro.git ~/torch --recursive\nRUN cd ~/torch && ./install.sh && \\\n    cd install/bin && \\\n    ./luarocks install nn && \\\n    ./luarocks install dpnn && \\\n    ./luarocks install image && \\\n    ./luarocks install optim && \\\n    ./luarocks install csvigo && \\\n    ./luarocks install torchx && \\\n    ./luarocks install tds\n\nRUN cd ~ && \\\n    mkdir -p ocv-tmp && \\\n    cd ocv-tmp && \\\n    curl -f -L https://github.com/Itseez/opencv/archive/2.4.11.zip -o ocv.zip && \\\n    unzip ocv.zip && \\\n    cd opencv-2.4.11 && \\\n    mkdir release && \\\n    cd release && \\\n    cmake -D CMAKE_BUILD_TYPE=RELEASE \\\n          -D CMAKE_INSTALL_PREFIX=/usr/local \\\n          -D BUILD_PYTHON_SUPPORT=ON \\\n          -D CUDA_GENERATION=Kepler \\\n          .. && \\\n    make -j8 && \\\n    make install && \\\n    rm -rf ~/ocv-tmp\n\nRUN cd ~ && \\\n    mkdir -p dlib-tmp && \\\n    cd dlib-tmp && \\\n    curl -f -L \\\n         https://github.com/davisking/dlib/archive/v19.0.tar.gz \\\n         -o dlib.tar.bz2 && \\\n    tar xf dlib.tar.bz2 && \\\n    cd dlib-19.0/python_examples && \\\n    mkdir build && \\\n    cd build && \\\n    cmake ../../tools/python && \\\n    cmake --build . --config Release && \\\n    cp dlib.so /usr/local/lib/python2.7/dist-packages && \\\n    rm -rf ~/dlib-tmp && rm dlib.tar.bz2\n\nRUN cd ~/torch/install/bin && \\\n    ./luarocks install torch && \\\n    ./luarocks install cutorch\n\nRUN apt-get update && apt-get install --no-install-recommends -y \\\n    curl \\\n    git \\\n    graphicsmagick \\\n    python-dev \\\n    python-pip \\\n    python-numpy \\\n    python-nose \\\n    python-scipy \\\n    python-pandas \\\n    python-protobuf \\\n    wget \\\n    zip \\\n    && apt-get clean && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*\n\n#ADD . /root/openface\nRUN git clone https://github.com/cmusatyalab/openface.git ~/openface --recursive\nRUN cd ~/openface && \\\n    ./models/get-models.sh && \\\n    pip2 install --no-cache-dir -r requirements.txt && \\\n    python2 setup.py install && \\\n    pip2 install --no-cache-dir -r demos/web/requirements.txt && \\\n    pip2 install --no-cache-dir -r training/requirements.txt\n\nEXPOSE 8000 9000\n#CMD /bin/bash -l -c '/root/openface/demos/web/start-servers.sh'\n"
}