{
  "startTime": 1674251794502,
  "endTime": 1674251795144,
  "originalSmells": [
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 55,
        "lineEnd": 55,
        "columnStart": 56,
        "columnEnd": 73
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 177,
        "lineEnd": 177,
        "columnStart": 4,
        "columnEnd": 51
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 211,
        "lineEnd": 211,
        "columnStart": 4,
        "columnEnd": 33
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 214,
        "lineEnd": 214,
        "columnStart": 4,
        "columnEnd": 25
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 217,
        "lineEnd": 217,
        "columnStart": 4,
        "columnEnd": 42
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 228,
        "lineEnd": 228,
        "columnStart": 4,
        "columnEnd": 74
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 238,
        "lineEnd": 238,
        "columnStart": 4,
        "columnEnd": 29
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 246,
        "lineEnd": 246,
        "columnStart": 4,
        "columnEnd": 79
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 249,
        "lineEnd": 249,
        "columnStart": 4,
        "columnEnd": 21
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 258,
        "lineEnd": 258,
        "columnStart": 4,
        "columnEnd": 31
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 174,
        "lineEnd": 174,
        "columnStart": 4,
        "columnEnd": 15
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 73,
        "lineEnd": 106,
        "columnStart": 22,
        "columnEnd": 16
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 130,
        "lineEnd": 130,
        "columnStart": 4,
        "columnEnd": 59
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "#docker build --rm -t imcomking/ttskc -f Dockerfile_ttskc .\n\n#docker run -it --device /dev/nvidiactl --device /dev/nvidia-uvm --device /dev/nvidia0 -p 22 -p 6006 -p 8888 imcomking/ttskc\n\n#if you want to solve the bug \"libdc1394 error: Failed to initialize libdc1394\" \n#ln /dev/null /dev/raw1394\n\n##################################\n\n# Start with cuda7.5 base image\n# NVIDIA-SMI 352.39     Driver Version: 352.39\nFROM kaixhin/cuda:latest\nMAINTAINER Dong-Hyun Kwak <imcomking@gmail.com>\n\n# Install [cudnn 7.0 (v4)]\nRUN wget --quiet https://www.dropbox.com/s/dcux1l862p4ml4m/cudnn-7.0-linux-x64-v4.0-rc.tar?dl=0 -O cudnn-7.0-linux-x64-v4.0-rc.tar\nRUN tar -xvf cudnn-7.0-linux-x64-v4.0-rc.tar && \\\n    rm cudnn-7.0-linux-x64-v4.0-rc.tar\n\nRUN ls /cuda/include/cudnn.h\nRUN cp /cuda/include/cudnn.h /usr/local/cuda/include/\nRUN cp /cuda/lib64/libcudnn.so* /usr/local/cuda/lib64/\n\n\n\n# install [caffe]\nRUN apt-get update && apt-get install -y --no-install-recommends \\\n        build-essential \\\n        cmake \\\n        git \\\n        wget \\\n        libatlas-base-dev \\\n        libboost-all-dev \\\n        libgflags-dev \\\n        libgoogle-glog-dev \\\n        libhdf5-serial-dev \\\n        libleveldb-dev \\\n        liblmdb-dev \\\n        libopencv-dev \\\n        libprotobuf-dev \\\n        libsnappy-dev \\\n        protobuf-compiler \\\n        python-dev \\\n        python-numpy \\\n        python-pip \\\n        python-scipy && \\\n    rm -rf /var/lib/apt/lists/*\n\nENV CAFFE_ROOT=/opt/caffe\nWORKDIR $CAFFE_ROOT\n\n# FIXME: clone a specific git tag and use ARG instead of ENV once DockerHub supports this.\nENV CLONE_TAG=master\n\nRUN git clone -b ${CLONE_TAG} --depth 1 https://github.com/BVLC/caffe.git . && \\\n    for req in $(cat python/requirements.txt) pydot; do pip install --no-cache-dir $req; done && \\\n    mkdir build && cd build && \\\n    cmake -DUSE_CUDNN=1 .. && \\\n    make -j\"$(nproc)\"\n\nENV PYCAFFE_ROOT $CAFFE_ROOT/python\nENV PYTHONPATH $PYCAFFE_ROOT:$PYTHONPATH\nENV PATH $CAFFE_ROOT/build/tools:$PYCAFFE_ROOT:$PATH\nRUN echo \"$CAFFE_ROOT/build/lib\" >> /etc/ld.so.conf.d/caffe.conf && ldconfig\n\n\n\n\n\n\n\n\n# install [tensorflow]\nRUN apt-get update && apt-get install --no-install-recommends -y \\\n        # Tensorflow. this is come from the official tensorflow docker file\n        build-essential \\\n        curl \\\n        git \\\n        libfreetype6-dev \\\n        libpng12-dev \\\n        libzmq3-dev \\\n        pkg-config \\\n        python-dev \\\n        python-numpy \\\n        python-pip \\\n        software-properties-common \\\n        swig \\\n        zip \\\n        zlib1g-dev \\\n\n        # for etc\n        python-scipy \\\n        python-nose \\\n        python-setuptools \\\n        python-h5py \\\n        python-matplotlib \\\n        python-yaml \\\n        libopenblas-dev \\\n        screen \\\n        vim \\\n        unzip \\\n        libatlas-dev \\\n        libhdf5-dev \\\n        libatlas3gf-base \\\n        openssh-server \\\n        mcrypt \\\n        graphviz \\\n        && \\\n    apt-get clean && \\\n    rm -rf /var/lib/apt/lists/*\n\n\n\n# Install recent pip # this must be done before tensorflow\nRUN curl -fSsL -O https://bootstrap.pypa.io/get-pip.py && \\\n    python get-pip.py && \\\n    rm get-pip.py\n\n\n# Install Tensorflow\n    # Set up Bazel.\n\n# We need to add a custom PPA to pick up JDK8, since trusty doesn't\n# have an openjdk8 backport.  openjdk-r is maintained by a reliable contributor:\n# Matthias Klose (https://launchpad.net/~doko).  It will do until\n# we either update the base image beyond 14.04 or openjdk-8 is\n# finally backported to trusty; see e.g.\n#   https://bugs.launchpad.net/trusty-backports/+bug/1368094\nRUN add-apt-repository -y ppa:openjdk-r/ppa && \\\n    apt-get update && \\\n    apt-get install --no-install-recommends -y openjdk-8-jdk openjdk-8-jre-headless && \\\n    apt-get clean && \\\n    rm -rf /var/lib/apt/lists/*\n\n# Running bazel inside a `docker build` command causes trouble, cf:\n#   https://github.com/bazelbuild/bazel/issues/134\n# The easiest solution is to set up a bazelrc file forcing --batch.\nRUN echo \"startup --batch\" >>/root/.bazelrc\n# Similarly, we need to workaround sandboxing issues:\n#   https://github.com/bazelbuild/bazel/issues/418\nRUN echo \"build --spawn_strategy=standalone --genrule_strategy=standalone\" \\\n    >>/root/.bazelrc\nENV BAZELRC /root/.bazelrc\n# Install the most recent bazel release.\nENV BAZEL_VERSION 0.2.1\nWORKDIR /\nRUN mkdir /bazel && \\\n    cd /bazel && \\\n    curl -fSsL -O https://github.com/bazelbuild/bazel/releases/download/$BAZEL_VERSION/bazel-$BAZEL_VERSION-installer-linux-x86_64.sh && \\\n    curl -fSsL -o /bazel/LICENSE.txt https://raw.githubusercontent.com/bazelbuild/bazel/master/LICENSE.txt && \\\n    chmod +x bazel-*.sh && \\\n    ./bazel-$BAZEL_VERSION-installer-linux-x86_64.sh && \\\n    cd / && \\\n    rm -f /bazel/bazel-$BAZEL_VERSION-installer-linux-x86_64.sh\n\n\n# Download and build TensorFlow.\n\nRUN git clone --recursive https://github.com/tensorflow/tensorflow.git && \\\n    cd tensorflow && \\\n    git checkout r0.7\nWORKDIR /tensorflow\n\n# Configure the build for our CUDA configuration.\nENV CUDA_TOOLKIT_PATH /usr/local/cuda\nENV CUDNN_INSTALL_PATH /usr/local/cuda\nENV TF_NEED_CUDA 1\n\n\n# change the setting of protobuf\nRUN sed -i \"s/kDefaultTotalBytesLimit = 64/kDefaultTotalBytesLimit = 1024/g\" google/protobuf/src/google/protobuf/io/coded_stream.h\nRUN sed -i \"s/kDefaultTotalBytesWarningThreshold = 32/kDefaultTotalBytesWarningThreshold = 1024/g\" google/protobuf/src/google/protobuf/io/coded_stream.h\n\n\nRUN ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" && \\\n    bazel build -c opt --config=cuda tensorflow/tools/pip_package:build_pip_package && \\\n    bazel-bin/tensorflow/tools/pip_package/build_pip_package /tmp/pip && \\\n    pip install --no-cache-dir --upgrade /tmp/pip/tensorflow-*.whl\n\n# Set up CUDA variables\nENV CUDA_PATH /usr/local/cuda\n\n\n\n\n# SSH settings \n#RUN apt-get install -y openssh-server mcrypt && \\\n#    mkdir /var/run/sshd && chmod 0755 /var/run/sshd\n\nRUN mkdir /var/run/sshd && chmod 0755 /var/run/sshd\n\n#ADD https://raw.githubusercontent.com/GeographicaGS/Docker-SFTP/master/sshd_config /etc/ssh/sshd_config\n#ADD https://raw.githubusercontent.com/GeographicaGS/Docker-SFTP/master/start.sh /usr/local/bin/start.sh\n\n#my custom files\n#ADD https://www.dropbox.com/s/ufu6ckktl4q2vnj/sshd_config?dl=0 /etc/ssh/sshd_config\nRUN wget --quiet https://www.dropbox.com/s/ufu6ckktl4q2vnj/sshd_config?dl=0 -O /etc/ssh/sshd_config\n#ADD https://www.dropbox.com/s/u94mdss02amvjsz/start.sh?dl=0 /usr/local/bin/start.sh\n\n#VOLUME [\"/data\"]\n\n#ENTRYPOINT [\"/bin/bash\"]\n#ENTRYPOINT [\"/bin/bash\", \"/usr/local/bin/start.sh\"]\n\n\n\n\n\n# pip install\n#RUN pip install --upgrade pip\n#RUN pip --no-cache-dir install matplotlib\nRUN pip install --no-cache-dir --upgrade Request\n\n#pydot is not supported under python 3 and pydot2 doesn't work properly. pydotplus works nicely (pip install pydotplus)\nRUN pip install --no-cache-dir pydotplus\n\n# Install [Ipython 3.2.1]\nRUN pip install --no-cache-dir \"ipython[notebook]==3.2.1\"\n\n# IPython nbserver\nRUN ipython profile create nbserver\n#RUN cd /root && wget --quiet https://www.dropbox.com/s/7z43hnuza0eb8ba/setup_nbserver_v2.py?dl=0 -O setup_nbserver.py\n\n\n\n\n# Install [Theano]\nENV CUDA_ROOT /usr/local/cuda/bin\nRUN pip install --no-cache-dir --upgrade --no-deps git+git://github.com/Theano/Theano.git\nRUN printf \"[global]\\ndevice=gpu0\\nfloatX=float32\\ncuda.root=/usr/local/cuda/bin\\n[nvcc]\\nfastmath=True\" > /root/.theanorc\n\n# Gitclone Deeplearning tutorial(theano)\nRUN cd /root && git clone git://github.com/lisa-lab/DeepLearningTutorials.git\n\n\n# Install [Keras]\n\n# Upgrade six\nRUN pip install --no-cache-dir --upgrade six\n\n# Clone Keras repo and move into it\nRUN cd /root && git clone https://github.com/fchollet/keras.git && cd keras && \\\n  python setup.py install\n\n\n# Install [bleeding-edge Lasagne] # this is from Kaixhin's docker file\nRUN pip install --no-cache-dir --upgrade https://github.com/Lasagne/Lasagne/archive/master.zip\n\n# Install [mpld3]\nRUN pip install --no-cache-dir mpld3\n\n\n# Install [Scikit-learn]\nRUN update-alternatives --set libblas.so.3 \\\n      /usr/lib/atlas-base/atlas/libblas.so.3; \\\n    update-alternatives --set liblapack.so.3 \\\n      /usr/lib/atlas-base/atlas/liblapack.so.3\n\nRUN pip install --no-cache-dir -U scikit-learn\n\n\n\n\n# Install [bleeding-edge JSAnimation]\nWORKDIR $HOME\nRUN git clone https://github.com/jakevdp/JSAnimation.git\nRUN python JSAnimation/setup.py install\nENV PYTHONPATH $PYTHONPATH:$HOME/JSAnimation/:\n\n\n#RUN apt-get clean && \\\n    #rm -rf /var/lib/apt/lists/*\n\n\n# screen setting\nRUN printf \"\\nexport PATH=/usr/local/cuda/bin:$PATH\\nexport LD_LIBRARY_PATH=/usr/local/cuda/lib64:$LD_LIBRARY_PATH\\n\" >> /root/.bashrc\nRUN printf \"\\nshell -/bin/bash\\n\" >> /root/.screenrc\n\n\n\n\n# TensorBoard\n#EXPOSE 6006\n\n# IPython\n#EXPOSE 8888\n\n# sftp\n#EXPOSE 22\n\n\n#port open for variable purpose. to use these, you should run with '-P' option which opens all exposed port randomly\n\n#EXPOSE 32000 32001 32002 32003 32004\n#32005 32006 32007 32008 32009 32010 32011 32012\n\nWORKDIR /root\nRUN [\"/bin/bash\"]\n\n"
}