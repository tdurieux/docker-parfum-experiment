{
  "startTime": 1674251147144,
  "endTime": 1674251147322,
  "originalSmells": [
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 49,
        "lineEnd": 49,
        "columnStart": 4,
        "columnEnd": 26
      }
    },
    {
      "rule": "apkAddUseNoCache",
      "position": {
        "lineStart": 21,
        "lineEnd": 21,
        "columnStart": 4,
        "columnEnd": 58
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# -------------------------------------------------------------------------\n# Good read about using Node in Docker\n# https://github.com/nodejs/docker-node/blob/master/docs/BestPractices.md\n#\n# Build image like this:\n# docker build -t name_of_image . --build-arg NPM_TOKEN=${NPM_TOKEN}\n# -------------------------------------------------------------------------\n\n# Base image\n# As of now (Nov 2018), node 8 is as high as you can go.\nFROM node:8-alpine\n\n# File Author / Maintainer\nMAINTAINER Your name\n\n# Install Poppler and other dependencies\n# Alpine image is small, but lacks some essentials\n# - Add alpine-sdk to get build tools, python, etc\n# - Add pkgconfig, poppler-simple needs this to build\n# - Add poppler-dev, the standard poppler package won't do\n# - Add bash if you want to run wait-for-it.sh or just interact with the shell\nRUN apk --update --no-cache add alpine-sdk pkgconfig poppler-dev bash\n\n# Remove apk cache to slim down the image\nRUN rm -rf /var/cache/apk/*\n\n# Need to wait for other Docker containers before spinning up this one?\n# wait-for-it will help you with this\n# https://github.com/vishnubob/wait-for-it\nCOPY wait-for-it.sh /home/node/wait-for-it.sh\nRUN [\"chmod\", \"+x\", \"/home/node/wait-for-it.sh\"]\n\n#Copy .npmrc and define build time env-variable for use in .npmrc\n#This is needed in order for npm to install private npm packages\n#N.B. \"docker build\" needs to be passed your local env-variable NPM_TOKEN\n# via the argument \"--build-arg NPM_TOKEN\"\nCOPY .npmrc /tmp/.npmrc\nARG NPM_TOKEN\n\n# Define working directory, copy code and package.json\nWORKDIR /home/node/app\nCOPY ./src /home/node/app/src\nCOPY package.json /home/node/app/package.json\nCOPY package-lock.json /home/node/app/package-lock.json\n\n# Tell npm to put global packages in homedir instead of root\nENV NPM_CONFIG_PREFIX=/home/node/.npm-global\n\n# Install nodemon\nRUN npm install -g nodemon && npm cache clean --force;\n\n# The Node Docker image has a non privileged user \"node\" for running node processes. Let's use it\nUSER node\n\n# Run app using nodemon\n# In production this would probably be PM2, but I find nodemon easier to work with in development\n#CMD [\"node\", \"./src/start.js\"]\n"
}