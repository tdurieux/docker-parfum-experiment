{
  "startTime": 1674253144432,
  "endTime": 1674253144597,
  "originalSmells": [
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 30,
        "lineEnd": 31,
        "columnStart": 4,
        "columnEnd": 57
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 44,
        "lineEnd": 47,
        "columnStart": 4,
        "columnEnd": 23
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 16,
        "lineEnd": 18,
        "columnStart": 26,
        "columnEnd": 37
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 61,
        "lineEnd": 65,
        "columnStart": 26,
        "columnEnd": 13
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 16,
        "lineEnd": 18,
        "columnStart": 26,
        "columnEnd": 37
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 61,
        "lineEnd": 65,
        "columnStart": 26,
        "columnEnd": 13
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# VAST\n#\n# VERSION               0.1\n\nFROM debian:buster-slim as builder\nLABEL maintainer=\"tobias.mayer@tenzir.com\"\nLABEL builder=true\n\n\nENV PREFIX /usr/local\nENV CC clang-7\nENV CXX clang++-7\nENV BUILD_TYPE Release\nENV BUILD_DIR /tmp/src\n\n# Compiler and dependency setup\nRUN apt-get -qq update && apt-get -qqy --no-install-recommends install \\\n    clang-7 libc++-dev libc++abi-dev cmake git-core \\\n    libpcap-dev libssl-dev libatomic1 && rm -rf /var/lib/apt/lists/*;\n\n# By placing the ADD directive at this point, we build both CAF and VAST\n# every time. This ensures that the CI integration will always fetch a fresh\n# CAF tree, regardless of the Docker cache. The correct way to handle this\n# would be to provide a CAF docker image and use it in the FROM directive.\nADD . $BUILD_DIR/vast\n\n# CAF\nWORKDIR $BUILD_DIR\nRUN git clone https://github.com/actor-framework/actor-framework.git caf\nWORKDIR caf\nRUN ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --prefix=$PREFIX --build-type=$BUILD_TYPE \\\n    --no-examples --no-opencl --no-unit-tests --no-python && \\\n    make -C build all install\n\n# Broker\n#WORKDIR $BUILD_DIR\n#RUN git clone --recurse-submodules https://github.com/zeek/broker.git\n#WORKDIR broker\n#RUN ./configure --prefix=$PREFIX --with-caf=$PREFIX --build-type=$BUILD_TYPE \\\n#    --disable-python --disable-docs --disable-tests && \\\n#    make -C build all install\n\n# VAST\nWORKDIR $BUILD_DIR/vast\nRUN ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" \\\n       --prefix=$PREFIX \\\n       --build-type=$BUILD_TYPE \\\n       --log-level=INFO && \\\n    make -C build all test install\n\n# Stage 2: copy application\nFROM debian:buster-slim\nLABEL maintainer=\"tobias.mayer@tenzir.com\"\nLABEL builder=false\n\nENV PREFIX /usr/local\nENV LD_LIBRARY_PATH $PREFIX/lib\n\nCOPY --from=builder $PREFIX/ $PREFIX/\nCOPY --from=builder /usr/lib/x86_64-linux-gnu/libatomic.so.1 /usr/lib/x86_64-linux-gnu/libatomic.so.1\nVOLUME [\"/data\"]\nRUN apt-get -qq update && apt-get -qq --no-install-recommends install -y \\\n      libc++1 \\\n      libc++abi1 \\\n      libpcap0.8 \\\n      openssl && \\\n    echo \"Adding tenzir user\" && \\\n    groupadd --gid 20354 tenzir && useradd --system --uid 20354 --gid tenzir tenzir && rm -rf /var/lib/apt/lists/*;\n\nEXPOSE 42000/tcp\n\nUSER tenzir:tenzir\nWORKDIR /data\nENTRYPOINT [\"/usr/local/bin/vast\"]\nCMD [\"--help\"]\n"
}