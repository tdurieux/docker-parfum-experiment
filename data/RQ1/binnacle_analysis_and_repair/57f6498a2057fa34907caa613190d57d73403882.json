{
  "startTime": 1674250175572,
  "endTime": 1674250175799,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 40,
        "lineEnd": 40,
        "columnStart": 4,
        "columnEnd": 53
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 51,
        "lineEnd": 51,
        "columnStart": 4,
        "columnEnd": 46
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 56,
        "lineEnd": 56,
        "columnStart": 4,
        "columnEnd": 89
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 14,
        "lineEnd": 21,
        "columnStart": 26,
        "columnEnd": 9
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 29,
        "lineEnd": 37,
        "columnStart": 4,
        "columnEnd": 14
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 71,
        "lineEnd": 71,
        "columnStart": 4,
        "columnEnd": 31
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 29,
        "lineEnd": 37,
        "columnStart": 4,
        "columnEnd": 14
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 71,
        "lineEnd": 71,
        "columnStart": 4,
        "columnEnd": 31
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 14,
        "lineEnd": 21,
        "columnStart": 26,
        "columnEnd": 9
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 29,
        "lineEnd": 37,
        "columnStart": 4,
        "columnEnd": 14
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 71,
        "lineEnd": 71,
        "columnStart": 4,
        "columnEnd": 31
      }
    }
  ],
  "repairedSmells": [
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 29,
        "lineEnd": 37,
        "columnStart": 4,
        "columnEnd": 14
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 71,
        "lineEnd": 71,
        "columnStart": 4,
        "columnEnd": 55
      }
    }
  ],
  "repairedDockerfile": "# See https://github.com/docker-library/php/blob/master/7.1/jessie/fpm/Dockerfile\nFROM php:7.1-fpm\nARG TIMEZONE\nARG DEBIAN_FRONTEND=noninteractive\n\nMAINTAINER Yahya ERTURAN <root@yahyaerturan.com>\n\nENV NVM_DIR /usr/local/nvm\nENV NODE_VERSION 8.9.3\n\n\nCOPY ./utils/.bashrc /root/\nRUN /bin/bash -c \"source /root/.bashrc\"\n\nRUN apt-get update -qq && apt-get install --no-install-recommends -y -qq \\\n    openssl \\\n    git \\\n    nano \\\n    apt-transport-https \\\n    curl \\\n    zip \\\n    unzip; rm -rf /var/lib/apt/lists/*;\n\n# soap => dependency: libxml2-dev\n# mcrypt => dependency: libmcrypt-dev\n# ftp => dependency: libssl-dev\n# intl => dependency: libicu-dev\n# xsl => dependency: libxslt-dev\n# gd => dependecy: libfreetype6-dev libjpeg62-turbo-dev libpng-dev\nRUN apt-get install --no-install-recommends -y -qq \\\n    libxml2-dev \\\n    libmcrypt-dev \\\n    libssl-dev \\\n    libicu-dev \\\n    libxslt-dev \\\n    libfreetype6-dev \\\n    libjpeg62-turbo-dev \\\n    libpng-dev && rm -rf /var/lib/apt/lists/*;\n\n# Add Yarn as PPA\nRUN curl -f -sS https://dl.yarnpkg.com/debian/pubkey.gpg | apt-key add -\nRUN echo \"deb https://dl.yarnpkg.com/debian/ stable main\" | tee /etc/apt/sources.list.d/yarn.list\nRUN apt-get -qq update\n\n# Config Git Globally\nRUN git config --global user.name \"${GIT_USER_NAME}\"\nRUN git config --global user.email \"${GIT_USER_EMAIL}\"\nRUN git config --global core.fileMode false\nRUN git config --global color.ui true\n\n# Install Composer\nRUN curl -f -sS https://getcomposer.org/installer | php -- --install-dir=/usr/local/bin --filename=composer\nRUN composer --version\n\n# Install NVM\n# https://github.com/creationix/nvm#install-script\nRUN curl -f --silent -o- https://raw.githubusercontent.com/creationix/nvm/v0.33.8/install.sh | bash\n\n# install node and npm\nRUN . $NVM_DIR/nvm.sh \\\n    && nvm install $NODE_VERSION \\\n    && nvm alias default $NODE_VERSION \\\n    && nvm use default\n\n# add node and npm to path so the commands are available\nENV NODE_PATH $NVM_DIR/v$NODE_VERSION/lib/node_modules\nENV PATH $NVM_DIR/versions/node/v$NODE_VERSION/bin:$PATH\n\nRUN /bin/bash -c \"npm upgrade minimatch@3 graceful-fs@4 --global\"\n\n# Intall Yarn\nRUN apt-get install --no-install-recommends -y -qq yarn && rm -rf /var/lib/apt/lists/*;\n\n# Set timezone\nRUN ln -snf /usr/share/zoneinfo/${TIMEZONE} /etc/localtime && echo ${TIMEZONE} > /etc/timezone\nRUN printf '[PHP]\\ndate.timezone = \"%s\"\\n', ${TIMEZONE} > /usr/local/etc/php/conf.d/tzone.ini\nRUN \"date\"\n\n# Type docker-php-ext-install to see available extensions\n# Possible values for ext-name:\n# bcmath bz2 calendar ctype curl dba dom enchant exif fileinfo filter ftp\n# gd gettext gmp hash iconv imap interbase intl json ldap mbstring mcrypt mysqli\n# oci8 odbc opcache pcntl pdo pdo_dblib pdo_firebird pdo_mysql pdo_oci pdo_odbc pdo_pgsql pdo_sqlite\n# pgsql phar posix pspell readline recode reflection session shmop simplexml snmp soap sockets\n# spl standard sysvmsg sysvsem sysvshm tidy tokenizer wddx xml xmlreader xmlrpc xmlwriter xsl zip\n\nRUN docker-php-ext-install gettext zip xsl pdo pdo_mysql mysqli intl hash && docker-php-ext-install -j$(nproc) iconv mcrypt \\\n    && docker-php-ext-configure gd --with-freetype-dir=/usr/include/ --with-jpeg-dir=/usr/include/ \\\n    && docker-php-ext-install -j$(nproc) gd opcache\n\n# Installed Extension with this configuration\n# Core        hash        pdo_mysql       standard\n# ctype       iconv       pdo_sqlite      tokenizer\n# curl        json        Phar            xml\n# date        libxml      posix           xmlreader\n# dom         mbstring    readline        xmlwriter\n# fileinfo    mcrypt      Reflection      xsl\n# filter      mysqlnd     session         zip\n# ftp         openssl     SimpleXML       zlib\n# gd          pcre        SPL             [Zend Modules]\n# gettext     PDO         sqlite3         Zend OPcache\n\n\n# Install and enable xdebug\n# RUN pecl install xdebug\n# RUN docker-php-ext-enable xdebug\n# RUN echo \"error_reporting = E_ALL\" >> /usr/local/etc/php/conf.d/docker-php-ext-xdebug.ini\n# RUN echo \"display_startup_errors = On\" >> /usr/local/etc/php/conf.d/docker-php-ext-xdebug.ini\n# RUN echo \"display_errors = On\" >> /usr/local/etc/php/conf.d/docker-php-ext-xdebug.ini\n# RUN echo \"xdebug.remote_enable=1\" >> /usr/local/etc/php/conf.d/docker-php-ext-xdebug.ini\n# RUN echo \"xdebug.remote_connect_back=1\" >> /usr/local/etc/php/conf.d/docker-php-ext-xdebug.ini\n# RUN echo \"xdebug.idekey=\\\"PHPSTORM\\\"\" >> /usr/local/etc/php/conf.d/docker-php-ext-xdebug.ini\n# RUN echo \"xdebug.remote_port=9001\" >> /usr/local/etc/php/conf.d/docker-php-ext-xdebug.ini\n\n# Disable opcahce temporarily\n# RUN mkdir -p /usr/local/etc/php/conf.d/disabled && mv /usr/local/etc/php/conf.d/docker-php-ext-opcache.ini /usr/local/etc/php/conf.d/disabled/docker-php-ext-opcache.ini\n\nRUN mkdir -p /root/.ssh\nCOPY ./utils/id_rsa /root/.ssh\nCOPY ./utils/id_rsa.pub /root/.ssh\n\nWORKDIR /var/www/symfony\n"
}