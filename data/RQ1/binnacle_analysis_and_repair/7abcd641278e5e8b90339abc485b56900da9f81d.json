{
  "startTime": 1674245578862,
  "endTime": 1674245579650,
  "originalSmells": [
    {
      "rule": "curlUseHttpsUrl",
      "position": {
        "lineStart": 54,
        "lineEnd": 54,
        "columnStart": 4,
        "columnEnd": 83
      }
    },
    {
      "rule": "curlUseHttpsUrl",
      "position": {
        "lineStart": 55,
        "lineEnd": 55,
        "columnStart": 4,
        "columnEnd": 92
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 75,
        "lineEnd": 75,
        "columnStart": 4,
        "columnEnd": 36
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 78,
        "lineEnd": 78,
        "columnStart": 4,
        "columnEnd": 23
      }
    },
    {
      "rule": "gpgUseBatchFlag",
      "position": {
        "lineStart": 66,
        "lineEnd": 66,
        "columnStart": 2,
        "columnEnd": 82
      }
    },
    {
      "rule": "gpgUseBatchFlag",
      "position": {
        "lineStart": 165,
        "lineEnd": 165,
        "columnStart": 2,
        "columnEnd": 64
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM alpine:3.7\n\n# We want people to install this easily by docker run\n# so we merge everything into one image\n\nENV NGINX_VERSION 1.15.0\nENV PHP_VERSION 7.2.7\n\n# Copied from nginx:alpine image\n\nRUN GPG_KEYS=B0F4253373F8F6F510D42178520A9993A1C052F8 \\\n\t&& CONFIG=\"\\\n\t\t--prefix=/etc/nginx \\\n\t\t--sbin-path=/usr/sbin/nginx \\\n\t\t--modules-path=/usr/lib/nginx/modules \\\n\t\t--conf-path=/etc/nginx/nginx.conf \\\n\t\t--error-log-path=/var/log/nginx/error.log \\\n\t\t--http-log-path=/var/log/nginx/access.log \\\n\t\t--pid-path=/var/run/nginx.pid \\\n\t\t--lock-path=/var/run/nginx.lock \\\n\t\t--http-client-body-temp-path=/var/cache/nginx/client_temp \\\n\t\t--http-proxy-temp-path=/var/cache/nginx/proxy_temp \\\n\t\t--http-fastcgi-temp-path=/var/cache/nginx/fastcgi_temp \\\n\t\t--http-uwsgi-temp-path=/var/cache/nginx/uwsgi_temp \\\n\t\t--http-scgi-temp-path=/var/cache/nginx/scgi_temp \\\n\t\t--user=nginx \\\n\t\t--group=nginx \\\n\t\t--with-http_realip_module \\\n\t\t--with-http_flv_module \\\n\t\t--with-http_mp4_module \\\n\t\t--with-http_gunzip_module \\\n\t\t--with-http_gzip_static_module \\\n\t\t--with-http_secure_link_module \\\n\t\t--with-http_stub_status_module \\\n\t\t--with-http_auth_request_module \\\n\t\t--with-threads \\\n\t\t--with-compat \\\n\t\t--with-file-aio \\\n\t\t--with-http_v2_module \\\n\t\t--add-module=/push-stream \\\n\t\" \\\n\t&& addgroup -S nginx \\\n\t&& adduser -D -S -h /var/cache/nginx -s /sbin/nologin -G nginx nginx \\\n\t&& apk add --no-cache --virtual .build-deps \\\n\t\tgcc \\\n\t\tlibc-dev \\\n\t\tmake \\\n\t\tlibressl-dev \\\n\t\tpcre-dev \\\n\t\tzlib-dev \\\n\t\tlinux-headers \\\n\t\tcurl \\\n\t\tgnupg \\\n\t\tgit \\\n\t&& curl -fSL https://nginx.org/download/nginx-$NGINX_VERSION.tar.gz -o nginx.tar.gz \\\n\t&& curl -fSL https://nginx.org/download/nginx-$NGINX_VERSION.tar.gz.asc -o nginx.tar.gz.asc \\\n\t&& git clone --single-branch --depth 1 https://github.com/wandenberg/nginx-push-stream-module.git /push-stream/ \\\n\t&& export GNUPGHOME=\"$(mktemp -d)\" \\\n\t&& found=''; \\\n\tfor server in \\\n\t\tha.pool.sks-keyservers.net \\\n\t\thkp://keyserver.ubuntu.com:80 \\\n\t\thkp://p80.pool.sks-keyservers.net:80 \\\n\t\tpgp.mit.edu; \\\n\tdo \\\n\t\techo \"Fetching GPG key $GPG_KEYS from $server\"; \\\n\t\tgpg --batch --keyserver \"$server\" --keyserver-options timeout=10 --recv-keys \"$GPG_KEYS\" && found=yes && break; \\\n\tdone; \\\n\ttest -z \"$found\" && echo >&2 \"error: failed to fetch GPG key $GPG_KEYS\" && exit 1; \\\n\tgpg --batch --verify nginx.tar.gz.asc nginx.tar.gz \\\n\t&& rm -r \"$GNUPGHOME\" nginx.tar.gz.asc; \\\n\tmkdir -p /usr/src \\\n\t&& tar -zxC /usr/src -f nginx.tar.gz \\\n\t&& rm nginx.tar.gz \\\n\t&& cd /usr/src/nginx-$NGINX_VERSION \\\n\t&& ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" $CONFIG --with-debug \\\n\t&& make -j$(getconf _NPROCESSORS_ONLN) \\\n\t&& mv objs/nginx objs/nginx-debug \\\n\t&& ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" $CONFIG \\\n\t&& make -j$(getconf _NPROCESSORS_ONLN) \\\n\t&& make install \\\n\t&& rm -rf /etc/nginx/html/ \\\n\t&& mkdir /etc/nginx/conf.d/ \\\n\t&& mkdir -p /usr/share/nginx/html/ \\\n\t&& install -m644 html/index.html /usr/share/nginx/html/ \\\n\t&& install -m644 html/50x.html /usr/share/nginx/html/ \\\n\t&& install -m755 objs/nginx-debug /usr/sbin/nginx-debug \\\n\t&& ln -s ../../usr/lib/nginx/modules /etc/nginx/modules \\\n\t&& strip /usr/sbin/nginx* \\\n\t&& rm -rf /usr/src/nginx-$NGINX_VERSION \\\n\t&& rm -rf /push-stream/ \\\n\n\t# Bring in gettext so we can get `envsubst`, then throw\n\t# the rest away. To do this, we need to install `gettext`\n\t# then move `envsubst` out of the way so `gettext` can\n\t# be deleted completely, then move `envsubst` back.\n\t&& apk add --no-cache --virtual .gettext gettext \\\n\t&& mv /usr/bin/envsubst /tmp/ \\\n\n\t&& runDeps=\"$( \\\n\t\tscanelf --needed --nobanner /usr/sbin/nginx /tmp/envsubst \\\n\t\t\t| awk '{ gsub(/,/, \"\\nso:\", $2); print \"so:\" $2 }' \\\n\t\t\t| sort -u \\\n\t\t\t| xargs -r apk info --installed \\\n\t\t\t| sort -u \\\n\t)\" \\\n\t&& apk add --no-cache --virtual .nginx-rundeps $runDeps \\\n\t&& apk del .build-deps \\\n\t&& apk del .gettext \\\n\t&& mv /tmp/envsubst /usr/local/bin/ \\\n\n\t# forward request and error logs to docker log collector\n\t&& ln -sf /dev/stdout /var/log/nginx/access.log \\\n\t&& ln -sf /dev/stderr /var/log/nginx/error.log\n\nEXPOSE 80\nSTOPSIGNAL SIGTERM\n\n# From php-fpm\n\nENV PHPIZE_DEPS \\\n\t\tautoconf \\\n\t\tdpkg-dev dpkg \\\n\t\tfile \\\n\t\tg++ \\\n\t\tgcc \\\n\t\tlibc-dev \\\n\t\tmake \\\n\t\tpcre-dev \\\n\t\tpkgconf \\\n\t\tre2c\n\nENV PHP_INI_DIR /usr/local/etc/php\n\nENV PHP_EXTRA_CONFIGURE_ARGS --enable-fpm --with-fpm-user=www-data --with-fpm-group=www-data\nENV PHP_CFLAGS=\"-fstack-protector-strong -fpic -fpie -O2\"\nENV PHP_CPPFLAGS=\"$PHP_CFLAGS\"\nENV PHP_LDFLAGS=\"-Wl,-O1 -Wl,--hash-style=both -pie\"\n\nENV GPG_KEYS A917B1ECDA84AEC2B568FED6F50ABC807BD5DCD0 528995BFEDFBA7191D46839EF9BA0ADA31CBD89E\n\nRUN set -xe; \\\n\tmkdir -p $PHP_INI_DIR/conf.d \\\n\t&& apk add --no-cache --virtual .persistent-deps \\\n\t\tca-certificates \\\n\t\tcurl \\\n\t\ttar \\\n\t\txz \\\n\t&& set -x \\\n\t&& addgroup -g 82 -S www-data \\\n\t&& adduser -u 82 -D -S -G www-data www-data \\\n\t\\\n\t&& apk add --no-cache --virtual .fetch-deps \\\n\t\tgnupg \\\n\t\tlibressl \\\n\t; \\\n\n\tmkdir -p /usr/src; \\\n\tcd /usr/src; \\\n\n\twget -O php.tar.xz \"https://secure.php.net/get/php-${PHP_VERSION}.tar.xz/from/this/mirror\"; \\\n\n\twget -O php.tar.xz.asc \"https://secure.php.net/get/php-${PHP_VERSION}.tar.xz.asc/from/this/mirror\"; \\\n\texport GNUPGHOME=\"$(mktemp -d)\"; \\\n\tfor key in $GPG_KEYS; do \\\n\t\tgpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys \"$key\"; \\\n\tdone; \\\n\tgpg --batch --verify php.tar.xz.asc php.tar.xz; \\\n\trm -rf \"$GNUPGHOME\"; \\\n\n\tapk del .fetch-deps \\\n\t&& apk add --no-cache --virtual .build-deps \\\n\t\t$PHPIZE_DEPS \\\n\t\tcoreutils \\\n\t\tcurl-dev \\\n\t\tlibedit-dev \\\n\t\tlibxml2-dev \\\n\t\tlibressl-dev \\\n\t\tsqlite-dev \\\n\t\\\n\t&& export CFLAGS=\"$PHP_CFLAGS\" \\\n\t\tCPPFLAGS=\"$PHP_CPPFLAGS\" \\\n\t\tLDFLAGS=\"$PHP_LDFLAGS\" \\\n\t# from docker-php-source\n\t&& mkdir -p /usr/src/php/ \\\n\t&& tar -Jxf /usr/src/php.tar.xz -C /usr/src/php/ --strip-components=1 \\\n\t&& cd /usr/src/php \\\n\t&& gnuArch=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" \\\n\t&& ./configure \\\n\t\t--build=\"$gnuArch\" \\\n\t\t--with-config-file-path=\"$PHP_INI_DIR\" \\\n\t\t--with-config-file-scan-dir=\"$PHP_INI_DIR/conf.d\" \\\n\t\t--disable-cgi \\\n\t\t--enable-mbstring \\\n\t\t--with-curl \\\n\t\t--with-libedit \\\n\t\t--with-openssl \\\n\t\t--with-zlib \\\n\t\t--with-pcre-regex=/usr \\\n\t\t$PHP_EXTRA_CONFIGURE_ARGS \\\n\t&& make -j \"$(nproc)\" \\\n\t&& make install \\\n\t&& { find /usr/local/bin /usr/local/sbin -type f -perm +0111 -exec strip --strip-all '{}' + || true; } \\\n\t&& make clean \\\n\t&& cd / \\\n\t&& rm -rf /usr/src/php/ /usr/src/php.tar.xz* \\\n\t\\\n\t&& runDeps=\"$( \\\n\t\tscanelf --needed --nobanner --recursive /usr/local \\\n\t\t\t| awk '{ gsub(/,/, \"\\nso:\", $2); print \"so:\" $2 }' \\\n\t\t\t| sort -u \\\n\t\t\t| xargs -r apk info --installed \\\n\t\t\t| sort -u \\\n\t)\" \\\n\t&& apk add --no-cache --virtual .php-rundeps $runDeps \\\n\t\\\n\t&& apk del .build-deps \\\n\t&& sed 's!=NONE/!=!g' /usr/local/etc/php-fpm.conf.default | tee /usr/local/etc/php-fpm.conf > /dev/null\n\n\n# Install streaming\n\nCOPY . /var/www/html\n\nRUN mv /var/www/html/docker/nginx.conf /etc/nginx/nginx.conf \\\n\t&& mv /var/www/html/docker/run.sh / \\\n\t&& chmod +x /run.sh \\\n\t&& mv /var/www/html/docker/config.php /var/www/html/config.php \\\n\t&& rm -r /var/www/html/docker /var/www/html/Dockerfile \\\n\t&& cp /usr/local/etc/php-fpm.d/www.conf.default /usr/local/etc/php-fpm.d/www.conf \\\n\t&& sed -i 's!127\\.0\\.0\\.1:9000!/var/run/php-fpm.sock!g' /usr/local/etc/php-fpm.d/www.conf \\\n\t&& echo -e 'env[FB_ID] = $FB_ID\\nenv[FB_SECRET] = $FB_SECRET' >> /usr/local/etc/php-fpm.d/www.conf\n\nCMD [\"/bin/sh\", \"/run.sh\"]\n"
}