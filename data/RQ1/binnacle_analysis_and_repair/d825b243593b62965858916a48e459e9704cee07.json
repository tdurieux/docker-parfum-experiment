{
  "startTime": 1674243630248,
  "endTime": 1674243630363,
  "originalSmells": [
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 16,
        "lineEnd": 16,
        "columnStart": 7,
        "columnEnd": 25
      }
    },
    {
      "rule": "mkdirUsrSrcThenRemove",
      "position": {
        "lineStart": 3,
        "lineEnd": 3,
        "columnStart": 4,
        "columnEnd": 25
      }
    },
    {
      "rule": "mkdirUsrSrcThenRemove",
      "position": {
        "lineStart": 3,
        "lineEnd": 3,
        "columnStart": 29,
        "columnEnd": 55
      }
    },
    {
      "rule": "mkdirUsrSrcThenRemove",
      "position": {
        "lineStart": 3,
        "lineEnd": 3,
        "columnStart": 59,
        "columnEnd": 89
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM python:3.6-alpine\nVOLUME /config\n\nRUN mkdir -p /usr/src/app && mkdir -p /usr/src/app/enet && mkdir -p /usr/src/app/pyspades && rm -rf /usr/src/app\nWORKDIR /usr/src/app\n\n# Installing dependencies.\n# In order to keep layers lean we instantly remove the build essentials\nCOPY requirements.txt /usr/src/app/\n\n# Note: manylinux wheel support isn't enabled by default for alpinelinux\n# we temporarly enable it for pyenet since it is compatible\nRUN apk add --no-cache --virtual .build-deps-cython gcc musl-dev \\\n    && apk add --no-cache --virtual .build-deps-crypto libffi-dev openssl-dev \\\n    \\\n    && echo \"manylinux1_compatible = True\" > /usr/local/lib/python3.6/_manylinux.py \\\n    && pip install --no-cache-dir pyenet \\\n    && rm /usr/local/lib/python3.6/_manylinux.py \\\n    && pip install --no-cache-dir -r requirements.txt \\\n\n    && apk del .build-deps-cython \\\n    && apk del .build-deps-crypto\n\n# The fact that we removed gcc beforehand makes us download it again\n# This is remedied by building the server core first and leaving all .py scripts\n# to the last. A change in python script won't trigger downloading gcc all over again\n# but a change in .pyx or .c file will.\n# TODO: while this behaviour suits production envs perfectly, make a dev env option\nCOPY pyspades/ /usr/src/app/pyspades/\nCOPY piqueserver/ /usr/src/app/piqueserver/\nCOPY setup.py COPYING.txt CREDITS.txt LICENSE README.rst /usr/src/app/\n\nRUN apk add --no-cache --virtual .build-deps-server gcc musl-dev g++ \\\n    && STDCPP_STATIC=1 python ./setup.py install \\\n    && apk del .build-deps-server \\\n    && cd / && rm -rf /usr/src/app\n\n# We need ssl support for fetching server's IP\nRUN apk add --no-cache openssl\n\n# Copy over the rest and default to launching the server\nCMD piqueserver -d /config\n\nEXPOSE 32887/udp 32887 32886 32885\n"
}