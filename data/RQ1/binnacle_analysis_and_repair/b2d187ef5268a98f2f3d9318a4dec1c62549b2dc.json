{
  "startTime": 1674241061638,
  "endTime": 1674241061932,
  "originalSmells": [
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 68,
        "lineEnd": 78,
        "columnStart": 22,
        "columnEnd": 21
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 68,
        "lineEnd": 78,
        "columnStart": 22,
        "columnEnd": 21
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# -----------------------------------------\n#\n# start with basic debian\n#\n# -----------------------------------------\nFROM debian:testing\nADD tools/rootfs.tar.xz /\n\n# -----------------------------------------\n#\n# FROM R-BASE\n#\n# -----------------------------------------\nRUN useradd docker \\\n    && mkdir /home/docker \\\n    && chown docker:docker /home/docker \\\n    && addgroup docker staff\n\nRUN apt-get update \\\n    && apt-get install -y --no-install-recommends \\\n        ed \\\n        less \\\n        locales \\\n        vim-tiny \\\n        wget \\\n        ca-certificates \\\n        procps \\\n    && rm -rf /var/lib/apt/lists/*\n\n## Configure default locale, see https://github.com/rocker-org/rocker/issues/19\nRUN echo \"en_US.UTF-8 UTF-8\" >> /etc/locale.gen \\\n    && locale-gen en_US.utf8 \\\n    && /usr/sbin/update-locale LANG=en_US.UTF-8\n\nENV LC_ALL en_US.UTF-8\nENV LANG en_US.UTF-8\n\n## Use Debian unstable via pinning -- new style via APT::Default-Release\nRUN echo \"deb http://http.debian.net/debian sid main\" > /etc/apt/sources.list.d/debian-unstable.list \\\n    && echo 'APT::Default-Release \"testing\";' > /etc/apt/apt.conf.d/default\n\nENV R_BASE_VERSION 3.4.1\n\n## Now install R and littler, and create a link for littler in /usr/local/bin\n## Also set a default CRAN repo, and make sure littler knows about it too\nRUN apt-get update \\\n    && apt-get install -t unstable -y --no-install-recommends \\\n        littler \\\n        r-cran-littler \\\n        r-base=${R_BASE_VERSION}* \\\n        r-base-dev=${R_BASE_VERSION}* \\\n        r-recommended=${R_BASE_VERSION}* \\\n        && echo 'options(repos = c(CRAN = \"https://cran.rstudio.com/\"), download.file.method = \"libcurl\")' >> /etc/R/Rprofile.site \\\n        && echo 'source(\"/etc/R/Rprofile.site\")' >> /etc/littler.r \\\n    && ln -s /usr/share/doc/littler/examples/install.r /usr/local/bin/install.r \\\n    && ln -s /usr/share/doc/littler/examples/install2.r /usr/local/bin/install2.r \\\n    && ln -s /usr/share/doc/littler/examples/installGithub.r /usr/local/bin/installGithub.r \\\n    && ln -s /usr/share/doc/littler/examples/testInstalled.r /usr/local/bin/testInstalled.r \\\n    && install.r docopt \\\n    && rm -rf /tmp/downloaded_packages/ /tmp/*.rds \\\n    && rm -rf /var/lib/apt/lists/*\n\n# --------------------------------------------------------\n#\n# Install all the pre-reqs (and optional supplied in system-libraries.txt)\n#\n# --------------------------------------------------------\nENV SYS_LIBS \"${SYSLIBS}\"\nRUN apt-get update && apt-get install --no-install-recommends -y -t unstable \\\n    sudo \\\n    gdebi-core \\\n    pandoc \\\n    pandoc-citeproc \\\n    libcurl4-openssl-dev \\\n    libssl-dev \\\n    libcairo2-dev/unstable \\\n    libxt-dev \\\n    libnss-wrapper \\\n    gettext $SYS_LIBS && rm -rf /var/lib/apt/lists/*;\n\n\n# --------------------------------------------------------\n#\n# Install shiny and rmarkdown\n#\n# --------------------------------------------------------\nRUN install2.r --error shiny rmarkdown\n\n# --------------------------------------------------------\n#\n# Download and install shiny server\n#\n# --------------------------------------------------------\nRUN wget --no-verbose https://s3.amazonaws.com/rstudio-shiny-server-os-build/ubuntu-12.04/x86_64/VERSION -O \"version.txt\" && \\\n    VERSION=$(cat version.txt)  && \\\n    wget --no-verbose \"https://s3.amazonaws.com/rstudio-shiny-server-os-build/ubuntu-12.04/x86_64/shiny-server-$VERSION-amd64.deb\" -O ss-latest.deb && \\\n    gdebi -n ss-latest.deb && \\\n    rm -f version.txt ss-latest.deb && \\\n    cp -R /usr/local/lib/R/site-library/shiny/examples/* /srv/shiny-server/\n\n# --------------------------------------------------------\n#\n# Install R packages if required\n#\n# --------------------------------------------------------\nENV R_LIBS \"${RLIBS}\"\nRUN if [ \"$R_LIBS\" ]; \\\n   then \\\n   echo \"Installing CRAN packages: '$R_LIBS'\" && \\\n   install2.r --error $R_LIBS; \\\n   fi\n\n# --------------------------------------------------------\n# GitHub R packages\n# --------------------------------------------------------\nENV R_GH_LIBS \"${RGHLIBS}\"\nRUN if [ \"$R_GH_LIBS\" ]; \\\n   then \\\n   echo \"Installing GitHub packages: '$R_GH_LIBS'\" && \\\n   install2.r --error remotes && \\\n   R -e \"lapply(strsplit(Sys.getenv('R_GH_LIBS'), '\\\\\\s+')[[1]], remotes::install_github)\"; \\\n   fi\n\n# --------------------------------------------------------\n#\n# add custom configuration\n#\n# --------------------------------------------------------\nCOPY tools/shiny-server.conf /etc/shiny-server/\n\n# --------------------------------------------------------\n#\n# Make and set permissions for log & bookmarks directories\n#\n# --------------------------------------------------------\n\nRUN sudo mkdir -p /var/shinylogs/shiny-server && \\\n    mkdir -p /var/lib/shiny-server/bookmarks && \\\n    chown shiny:shiny /var/shinylogs/shiny-server/ && \\\n    chown shiny:shiny /var/lib/shiny-server/bookmarks/\n\n# --------------------------------------------------------\n#\n# expose the 3838 port\n#\n# --------------------------------------------------------\nEXPOSE 3838\n\n\n# --------------------------------------------------------\n#\n# copy over the startup script\n#\n# --------------------------------------------------------\nCOPY tools/passwd.template /passwd.template\nCOPY tools/run-server.sh /usr/bin/shiny-server.sh\nCOPY tools/run-test.sh /usr/bin/run-test.sh\nRUN chmod a+x /usr/bin/shiny-server.sh\nRUN chmod a+x /usr/bin/run-test.sh\n\n# --------------------------------------------------------\n#\n# copy over your application and the supporting files in\n# the data and www directory. This is done last because it\n# is most likely to change frequently. This allows greater\n# use of Docker caching as everying downstream of a change\n# will invalidate the cache for those steps.\n#\n# --------------------------------------------------------\nCOPY app/ /srv/shiny-server/\nRUN mkdir /srv/shiny-server/output/ && \\\n    chown -R shiny:shiny /srv/shiny-server/\n\n# --------------------------------------------------------\n#\n# run the server\n#\n# -----------------------------------------\n#USER shiny\n#CMD [\"shiny-server\"]\nCMD [\"/usr/bin/shiny-server.sh\"]\n"
}