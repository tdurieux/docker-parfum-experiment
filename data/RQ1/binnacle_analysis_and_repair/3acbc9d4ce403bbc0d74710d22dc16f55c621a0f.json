{
  "startTime": 1674234093516,
  "endTime": 1674234094132,
  "originalSmells": [
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 53,
        "lineEnd": 53,
        "columnStart": 4,
        "columnEnd": 23
      }
    },
    {
      "rule": "yarnCacheCleanAfterInstall",
      "position": {
        "lineStart": 63,
        "lineEnd": 63,
        "columnStart": 1,
        "columnEnd": 29
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 14,
        "lineEnd": 14,
        "columnStart": 1,
        "columnEnd": 31
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 27,
        "lineEnd": 27,
        "columnStart": 1,
        "columnEnd": 35
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 43,
        "lineEnd": 46,
        "columnStart": 1,
        "columnEnd": 24
      }
    },
    {
      "rule": "sha256sumEchoOneSpaces",
      "position": {
        "lineStart": 101,
        "lineEnd": 101,
        "columnStart": 4,
        "columnEnd": 42
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 12,
        "lineEnd": 12,
        "columnStart": 1,
        "columnEnd": 30
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 24,
        "lineEnd": 24,
        "columnStart": 1,
        "columnEnd": 22
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 41,
        "lineEnd": 41,
        "columnStart": 1,
        "columnEnd": 29
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 9,
        "lineEnd": 9,
        "columnStart": 1,
        "columnEnd": 40
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 21,
        "lineEnd": 21,
        "columnStart": 1,
        "columnEnd": 24
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 36,
        "lineEnd": 38,
        "columnStart": 1,
        "columnEnd": 50
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 56,
        "lineEnd": 57,
        "columnStart": 1,
        "columnEnd": 44
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 81,
        "lineEnd": 81,
        "columnStart": 1,
        "columnEnd": 26
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 91,
        "lineEnd": 91,
        "columnStart": 1,
        "columnEnd": 19
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 87,
        "lineEnd": 90,
        "columnStart": 4,
        "columnEnd": 43
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 91,
        "lineEnd": 91,
        "columnStart": 1,
        "columnEnd": 19
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 9,
        "lineEnd": 9,
        "columnStart": 1,
        "columnEnd": 40
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 21,
        "lineEnd": 21,
        "columnStart": 1,
        "columnEnd": 24
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 36,
        "lineEnd": 38,
        "columnStart": 1,
        "columnEnd": 50
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 56,
        "lineEnd": 57,
        "columnStart": 1,
        "columnEnd": 44
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 81,
        "lineEnd": 81,
        "columnStart": 1,
        "columnEnd": 26
      }
    }
  ],
  "repairedSmells": [
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 87,
        "lineEnd": 90,
        "columnStart": 4,
        "columnEnd": 43
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 91,
        "lineEnd": 91,
        "columnStart": 1,
        "columnEnd": 43
      }
    }
  ],
  "repairedDockerfile": "FROM ubuntu:18.04 as build-dep\n\n# Use bash for the shell\nSHELL [\"bash\", \"-c\"]\n\n# Install Node\nENV NODE_VER=\"8.15.0\"\nRUN echo \"Etc/UTC\" > /etc/localtime && \\\n\tapt update && \\\n\tapt -y --no-install-recommends install wget make gcc g++ python && \\\n\tcd ~ && \\\n\twget https://nodejs.org/download/release/v$NODE_VER/node-v$NODE_VER.tar.gz && \\\n\ttar xf node-v$NODE_VER.tar.gz && \\\n\tcd node-v$NODE_VER && \\\n\t./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --prefix=/opt/node && \\\n\tmake -j$(nproc) > /dev/null && \\\n\tmake install && rm node-v$NODE_VER.tar.gz && rm -rf /var/lib/apt/lists/*;\n\n# Install jemalloc\nENV JE_VER=\"5.1.0\"\nRUN apt update && \\\n\tapt -y --no-install-recommends install autoconf && \\\n\tcd ~ && \\\n\twget https://github.com/jemalloc/jemalloc/archive/$JE_VER.tar.gz && \\\n\ttar xf $JE_VER.tar.gz && \\\n\tcd jemalloc-$JE_VER && \\\n\t./autogen.sh && \\\n\t./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --prefix=/opt/jemalloc && \\\n\tmake -j$(nproc) > /dev/null && \\\n\tmake install_bin install_include install_lib && rm $JE_VER.tar.gz && rm -rf /var/lib/apt/lists/*;\n\n# Install ruby\nENV RUBY_VER=\"2.6.1\"\nENV CPPFLAGS=\"-I/opt/jemalloc/include\"\nENV LDFLAGS=\"-L/opt/jemalloc/lib/\"\nRUN apt update && \\\n\tapt -y --no-install-recommends install build-essential \\\n\t\tbison libyaml-dev libgdbm-dev libreadline-dev \\\n\t\tlibncurses5-dev libffi-dev zlib1g-dev libssl-dev && \\\n\tcd ~ && \\\n\twget https://cache.ruby-lang.org/pub/ruby/${RUBY_VER%.*}/ruby-$RUBY_VER.tar.gz && \\\n\ttar xf ruby-$RUBY_VER.tar.gz && \\\n\tcd ruby-$RUBY_VER && \\\n\t./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --prefix=/opt/ruby \\\n\t\t\t--with-jemalloc \\\n\t\t\t--with-shared \\\n\t\t\t--disable-install-doc && \\\n\tln -s /opt/jemalloc/lib/* /usr/lib/ && \\\n\tmake -j$(nproc) > /dev/null && \\\n\tmake install && rm ruby-$RUBY_VER.tar.gz && rm -rf /var/lib/apt/lists/*;\n\nENV PATH=\"${PATH}:/opt/ruby/bin:/opt/node/bin\"\n\nRUN npm install -g yarn && \\\n\tgem install bundler && \\\n\tapt update && \\\n\tapt -y --no-install-recommends install git libicu-dev libidn11-dev \\\n\tlibpq-dev libprotobuf-dev protobuf-compiler && npm cache clean --force; && rm -rf /var/lib/apt/lists/*;\n\nCOPY Gemfile* package.json yarn.lock /opt/mastodon/\n\nRUN cd /opt/mastodon && \\\n\tbundle install -j$(nproc) --deployment --without development test && \\\n\tyarn install --pure-lockfile && yarn cache clean;\n\nFROM ubuntu:18.04\n\n# Copy over all the langs needed for runtime\nCOPY --from=build-dep /opt/node /opt/node\nCOPY --from=build-dep /opt/ruby /opt/ruby\nCOPY --from=build-dep /opt/jemalloc /opt/jemalloc\n\n# Add more PATHs to the PATH\nENV PATH=\"${PATH}:/opt/ruby/bin:/opt/node/bin:/opt/mastodon/bin\"\n\n# Create the mastodon user\nARG UID=991\nARG GID=991\nRUN apt update && \\\n\techo \"Etc/UTC\" > /etc/localtime && \\\n\tln -s /opt/jemalloc/lib/* /usr/lib/ && \\\n\tapt install --no-install-recommends -y whois wget && \\\n\taddgroup --gid $GID mastodon && \\\n\tuseradd -m -u $UID -g $GID -d /opt/mastodon mastodon && \\\n\techo \"mastodon:`head /dev/urandom | tr -dc A-Za-z0-9 | head -c 24 | mkpasswd -s -m sha-256`\" | chpasswd && rm -rf /var/lib/apt/lists/*;\n\n# Install mastodon runtime deps\nRUN apt -y --no-install-recommends install \\\n\t  libssl1.1 libpq5 imagemagick ffmpeg \\\n\t  libicu60 libprotobuf10 libidn11 libyaml-0-2 \\\n\t  file ca-certificates tzdata libreadline7 && \\\n\tapt -y --no-install-recommends install gcc && \\\n\tln -s /opt/mastodon /mastodon && \\\n\tgem install bundler && \\\n\trm -rf /var/cache && \\\n\trm -rf /var/lib/apt/lists/*\n\n# Add tini\nENV TINI_VERSION=\"0.18.0\"\nENV TINI_SUM=\"12d20136605531b09a2c2dac02ccee85e1b874eb322ef6baf7561cd93f93c855\"\nADD https://github.com/krallin/tini/releases/download/v${TINI_VERSION}/tini /tini\nRUN echo \"$TINI_SUM  tini\" | sha256sum -c -\nRUN chmod +x /tini\n\n# Copy over mastodon source, and dependencies from building, and set permissions\nCOPY --chown=mastodon:mastodon . /opt/mastodon\nCOPY --from=build-dep --chown=mastodon:mastodon /opt/mastodon /opt/mastodon\n\n# Run mastodon services in prod mode\nENV RAILS_ENV=\"production\"\nENV NODE_ENV=\"production\"\n\n# Tell rails to serve static files\nENV RAILS_SERVE_STATIC_FILES=\"true\"\n\n# Set the run user\nUSER mastodon\n\n# Precompile assets\nRUN cd ~ && \\\n\tOTP_SECRET=precompile_placeholder SECRET_KEY_BASE=precompile_placeholder rails assets:precompile && \\\n\tyarn cache clean\n\n# Set the work dir and the container entry point\nWORKDIR /opt/mastodon\nENTRYPOINT [\"/tini\", \"--\"]\n"
}