{
  "startTime": 1674237035003,
  "endTime": 1674237035261,
  "originalSmells": [
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 68,
        "lineEnd": 68,
        "columnStart": 4,
        "columnEnd": 31
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 9,
        "lineEnd": 9,
        "columnStart": 18,
        "columnEnd": 72
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 17,
        "lineEnd": 17,
        "columnStart": 4,
        "columnEnd": 70
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 38,
        "lineEnd": 38,
        "columnStart": 22,
        "columnEnd": 51
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 9,
        "lineEnd": 9,
        "columnStart": 18,
        "columnEnd": 72
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM python:2.7\n\nMAINTAINER xina1i <daitaomail@gmail.com>\n\n# set proxy\nENV http_proxy http://192.168.123.4:8123\nENV https_proxy https://192.168.123.4:8123\n\n# for requirements\nRUN apt update && apt install --no-install-recommends -y build-essential python-dev libffi-dev && rm -rf /var/lib/apt/lists/*;\n\n# Standard set up Nginx\nENV NGINX_VERSION 1.9.11-1~jessie\n\nRUN apt-key adv --keyserver hkp://pgp.mit.edu:80 --recv-keys 573BFD6B3D8FBC641079A6ABABF5BD827BD9BF62 \\\n\t&& echo \"deb http://nginx.org/packages/mainline/debian/ jessie nginx\" >> /etc/apt/sources.list \\\n\t&& apt update \\\n\t&& apt install --no-install-recommends -y ca-certificates nginx=${NGINX_VERSION} gettext-base \\\n\t&& rm -rf /var/lib/apt/lists/*\n# forward request and error logs to docker log collector\nRUN ln -sf /dev/stdout /var/log/nginx/access.log \\\n\t&& ln -sf /dev/stderr /var/log/nginx/error.log\nEXPOSE 80\n# Finished setting up Nginx\n\n# Make NGINX run on the foreground\nRUN echo \"daemon off;\" >> /etc/nginx/nginx.conf\n# Remove default configuration from Nginx\nRUN rm -f /etc/nginx/conf.d/default.conf\n# Copy the modified Nginx conf\n# COPY nginx.conf /etc/nginx/conf.d/\n\n# Copy the base uWSGI ini file to enable default dynamic uwsgi process number\n# COPY uwsgi.ini /etc/uwsgi/\n# Which uWSGI .ini file should be used, to make it customizable\n# ENV UWSGI_INI /app/uwsgi.ini\n\n# Install Supervisord\nRUN apt-get update && apt-get install --no-install-recommends -y supervisor \\\n&& rm -rf /var/lib/apt/lists/*\n# Custom Supervisord config\nCOPY supervisord.conf /etc/supervisor/conf.d/supervisord.conf\n\n\n# By default, allow unlimited file sizes, modify it to limit the file sizes\n# To have a maximum of 1 MB (Nginx's default) change the line to:\n# ENV NGINX_MAX_UPLOAD 1m\nENV NGINX_MAX_UPLOAD 0\n\n# By default, Nginx will run a single worker process, setting it to auto\n# will create a worker for each CPU core\nENV NGINX_WORKER_PROCESSES 1\n\n# By default, Nginx listens on port 80.\n# To modify this, change LISTEN_PORT environment variable.\n# (in a Dockerfile or with an option for `docker run`)\nENV LISTEN_PORT 80\n\n# Copy the entrypoint that will generate Nginx additional configs\nCOPY entrypoint.sh /entrypoint.sh\nRUN chmod +x /entrypoint.sh\n\nENTRYPOINT [\"/entrypoint.sh\"]\n\n# Add demo app\n# COPY ./app /app\nCOPY ./requirements.txt /tmp/req.txt\n# RUN pip install -U pip && pip install -r /tmp/req.txt\nRUN pip install --no-cache-dir -r /tmp/req.txt\nWORKDIR /app\n\nCMD [\"/usr/bin/supervisord\"]\n"
}