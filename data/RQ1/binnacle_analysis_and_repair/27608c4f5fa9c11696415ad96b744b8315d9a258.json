{
  "startTime": 1674235664432,
  "endTime": 1674235665294,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 106,
        "lineEnd": 106,
        "columnStart": 4,
        "columnEnd": 119
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 160,
        "lineEnd": 160,
        "columnStart": 4,
        "columnEnd": 75
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 82,
        "lineEnd": 82,
        "columnStart": 4,
        "columnEnd": 31
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 203,
        "lineEnd": 203,
        "columnStart": 4,
        "columnEnd": 37
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 204,
        "lineEnd": 204,
        "columnStart": 4,
        "columnEnd": 40
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 207,
        "lineEnd": 207,
        "columnStart": 4,
        "columnEnd": 31
      }
    },
    {
      "rule": "mkdirUsrSrcThenRemove",
      "position": {
        "lineStart": 159,
        "lineEnd": 159,
        "columnStart": 1,
        "columnEnd": 23
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 118,
        "lineEnd": 118,
        "columnStart": 5,
        "columnEnd": 36
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 158,
        "lineEnd": 158,
        "columnStart": 4,
        "columnEnd": 33
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 158,
        "lineEnd": 158,
        "columnStart": 4,
        "columnEnd": 33
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 37,
        "lineEnd": 81,
        "columnStart": 22,
        "columnEnd": 24
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 158,
        "lineEnd": 158,
        "columnStart": 4,
        "columnEnd": 33
      }
    }
  ],
  "repairedSmells": [
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 157,
        "lineEnd": 157,
        "columnStart": 4,
        "columnEnd": 57
      }
    }
  ],
  "repairedDockerfile": "# This file describes the standard way to build Docker, using docker\n#\n# Usage:\n#\n# # Assemble the full dev environment. This is slow the first time.\n# docker build -t docker .\n#\n# # Mount your source in an interactive container for quick testing:\n# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash\n#\n# # Run the test suite:\n# docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py\n#\n# # Publish a release:\n# docker run --privileged \\\n#  -e AWS_S3_BUCKET=baz \\\n#  -e AWS_ACCESS_KEY=foo \\\n#  -e AWS_SECRET_KEY=bar \\\n#  -e GPG_PASSPHRASE=gloubiboulga \\\n#  docker hack/release.sh\n#\n# Note: AppArmor used to mess with privileged mode, but this is no longer\n# the case. Therefore, you don't have to disable it anymore.\n#\n\nFROM debian:jessie\n\n# allow replacing httpredir or deb mirror\nARG APT_MIRROR=deb.debian.org\nRUN sed -ri \"s/(httpredir|deb).debian.org/$APT_MIRROR/g\" /etc/apt/sources.list\n\n# Add zfs ppa\nCOPY keys/launchpad-ppa-zfs.asc /go/src/github.com/docker/docker/keys/\nRUN apt-key add /go/src/github.com/docker/docker/keys/launchpad-ppa-zfs.asc\nRUN echo deb http://ppa.launchpad.net/zfs-native/stable/ubuntu trusty main > /etc/apt/sources.list.d/zfs.list\n\n# Packaged dependencies\nRUN apt-get update && apt-get install -y \\\n\tapparmor \\\n\tapt-utils \\\n\taufs-tools \\\n\tautomake \\\n\tbash-completion \\\n\tbinutils-mingw-w64 \\\n\tbsdmainutils \\\n\tbtrfs-tools \\\n\tbuild-essential \\\n\tclang \\\n\tcmake \\\n\tcreaterepo \\\n\tcurl \\\n\tdpkg-sig \\\n\tgcc-mingw-w64 \\\n\tgit \\\n\tiptables \\\n\tjq \\\n\tless \\\n\tlibapparmor-dev \\\n\tlibcap-dev \\\n\tlibltdl-dev \\\n\tlibnl-3-dev \\\n\tlibprotobuf-c0-dev \\\n\tlibprotobuf-dev \\\n\tlibsystemd-journal-dev \\\n\tlibtool \\\n\tlibzfs-dev \\\n\tmercurial \\\n\tnet-tools \\\n\tpkg-config \\\n\tprotobuf-compiler \\\n\tprotobuf-c-compiler \\\n\tpython-dev \\\n\tpython-mock \\\n\tpython-pip \\\n\tpython-websocket \\\n\ttar \\\n\tubuntu-zfs \\\n\tvim \\\n\tvim-common \\\n\txfsprogs \\\n\tzip \\\n\t--no-install-recommends \\\n\t&& pip install --no-cache-dir awscli==1.10.15 && rm -rf /var/lib/apt/lists/*;\n# Get lvm2 source for compiling statically\nENV LVM2_VERSION 2.02.103\nRUN mkdir -p /usr/local/lvm2 \\\n\t&& curl -fsSL \"https://mirrors.kernel.org/sourceware/lvm2/LVM2.${LVM2_VERSION}.tgz\" \\\n\t\t| tar -xzC /usr/local/lvm2 --strip-components=1\n# See https://git.fedorahosted.org/cgit/lvm2.git/refs/tags for release tags\n\n# Compile and install lvm2\nRUN cd /usr/local/lvm2 \\\n\t&& ./configure \\\n\t\t--build=\"$(gcc -print-multiarch)\" \\\n\t\t--enable-static_link \\\n\t&& make device-mapper \\\n\t&& make install_device-mapper\n# See https://git.fedorahosted.org/cgit/lvm2.git/tree/INSTALL\n\n# Configure the container for OSX cross compilation\nENV OSX_SDK MacOSX10.11.sdk\nENV OSX_CROSS_COMMIT a9317c18a3a457ca0a657f08cc4d0d43c6cf8953\nRUN set -x \\\n\t&& export OSXCROSS_PATH=\"/osxcross\" \\\n\t&& git clone https://github.com/tpoechtrager/osxcross.git $OSXCROSS_PATH \\\n\t&& ( cd $OSXCROSS_PATH && git checkout -q $OSX_CROSS_COMMIT) \\\n\t&& curl -f -sSL https://s3.dockerproject.org/darwin/v2/${OSX_SDK}.tar.xz -o \"${OSXCROSS_PATH}/tarballs/${OSX_SDK}.tar.xz\" \\\n\t&& UNATTENDED=yes OSX_VERSION_MIN=10.6 ${OSXCROSS_PATH}/build.sh\nENV PATH /osxcross/target/bin:$PATH\n\n# Install seccomp: the version shipped upstream is too old\nENV SECCOMP_VERSION 2.3.2\nRUN set -x \\\n\t&& export SECCOMP_PATH=\"$(mktemp -d)\" \\\n\t&& curl -fsSL \"https://github.com/seccomp/libseccomp/releases/download/v${SECCOMP_VERSION}/libseccomp-${SECCOMP_VERSION}.tar.gz\" \\\n\t\t| tar -xzC \"$SECCOMP_PATH\" --strip-components=1 \\\n\t&& ( cd \"$SECCOMP_PATH\" \\\n\t\t&& ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --prefix=/usr/local \\\n\t\t&& make \\\n\t\t&& make install \\\n\t\t&& ldconfig) \\\n\n\t&& rm -rf \"$SECCOMP_PATH\"\n\n# Install Go\n# IMPORTANT: If the version of Go is updated, the Windows to Linux CI machines\n#            will need updating, to avoid errors. Ping #docker-maintainers on IRC\n#            with a heads-up.\nENV GO_VERSION 1.7.5\nRUN curl -fsSL \"https://golang.org/dl/go${GO_VERSION}.linux-amd64.tar.gz\" \\\n\t| tar -xzC /usr/local\n\nENV PATH /go/bin:/usr/local/go/bin:$PATH\nENV GOPATH /go\n\n# Compile Go for cross compilation\nENV DOCKER_CROSSPLATFORMS \\\n\tlinux/386 linux/arm \\\n\tdarwin/amd64 \\\n\tfreebsd/amd64 freebsd/386 freebsd/arm \\\n\twindows/amd64 windows/386 \\\n\tsolaris/amd64\n\n# Dependency for golint\nENV GO_TOOLS_COMMIT 823804e1ae08dbb14eb807afc7db9993bc9e3cc3\nRUN git clone https://github.com/golang/tools.git /go/src/golang.org/x/tools \\\n\t&& (cd /go/src/golang.org/x/tools && git checkout -q $GO_TOOLS_COMMIT)\n\n# Grab Go's lint tool\nENV GO_LINT_COMMIT 32a87160691b3c96046c0c678fe57c5bef761456\nRUN git clone https://github.com/golang/lint.git /go/src/github.com/golang/lint \\\n\t&& (cd /go/src/github.com/golang/lint && git checkout -q $GO_LINT_COMMIT) \\\n\t&& go install -v github.com/golang/lint/golint\n\n# Install CRIU for checkpoint/restore support\nENV CRIU_VERSION 2.12.1\n# Install dependancy packages specific to criu\nRUN apt-get install --no-install-recommends libnet-dev -y && \\\n\tmkdir -p /usr/src/criu \\\n\t&& curl -f -sSL https://github.com/xemul/criu/archive/v${CRIU_VERSION}.tar.gz | tar -v -C /usr/src/criu/ -xz --strip-components=1 \\\n\t&& cd /usr/src/criu \\\n\t&& make \\\n\t&& make install-criu && rm -rf /usr/src/criu && rm -rf /var/lib/apt/lists/*;\n\n# Install two versions of the registry. The first is an older version that\n# only supports schema1 manifests. The second is a newer version that supports\n# both. This allows integration-cli tests to cover push/pull with both schema1\n# and schema2 manifests.\nENV REGISTRY_COMMIT_SCHEMA1 ec87e9b6971d831f0eff752ddb54fb64693e51cd\nENV REGISTRY_COMMIT 47a064d4195a9b56133891bbb13620c3ac83a827\nRUN set -x \\\n\t&& export GOPATH=\"$(mktemp -d)\" \\\n\t&& git clone https://github.com/docker/distribution.git \"$GOPATH/src/github.com/docker/distribution\" \\\n\t&& (cd \"$GOPATH/src/github.com/docker/distribution\" && git checkout -q \"$REGISTRY_COMMIT\") \\\n\t&& GOPATH=\"$GOPATH/src/github.com/docker/distribution/Godeps/_workspace:$GOPATH\" \\\n\t\tgo build -o /usr/local/bin/registry-v2 github.com/docker/distribution/cmd/registry \\\n\t&& (cd \"$GOPATH/src/github.com/docker/distribution\" && git checkout -q \"$REGISTRY_COMMIT_SCHEMA1\") \\\n\t&& GOPATH=\"$GOPATH/src/github.com/docker/distribution/Godeps/_workspace:$GOPATH\" \\\n\t\tgo build -o /usr/local/bin/registry-v2-schema1 github.com/docker/distribution/cmd/registry \\\n\t&& rm -rf \"$GOPATH\"\n\n# Install notary and notary-server\nENV NOTARY_VERSION v0.5.0\nRUN set -x \\\n\t&& export GOPATH=\"$(mktemp -d)\" \\\n\t&& git clone https://github.com/docker/notary.git \"$GOPATH/src/github.com/docker/notary\" \\\n\t&& (cd \"$GOPATH/src/github.com/docker/notary\" && git checkout -q \"$NOTARY_VERSION\") \\\n\t&& GOPATH=\"$GOPATH/src/github.com/docker/notary/vendor:$GOPATH\" \\\n\t\tgo build -o /usr/local/bin/notary-server github.com/docker/notary/cmd/notary-server \\\n\t&& GOPATH=\"$GOPATH/src/github.com/docker/notary/vendor:$GOPATH\" \\\n\t\tgo build -o /usr/local/bin/notary github.com/docker/notary/cmd/notary \\\n\t&& rm -rf \"$GOPATH\"\n\n# Get the \"docker-py\" source so we can run their integration tests\nENV DOCKER_PY_COMMIT 4a08d04aef0595322e1b5ac7c52f28a931da85a5\n# To run integration tests docker-pycreds is required.\n# Before running the integration tests conftest.py is\n# loaded which results in loads auth.py that\n# imports the docker-pycreds module.\nRUN git clone https://github.com/docker/docker-py.git /docker-py \\\n\t&& cd /docker-py \\\n\t&& git checkout -q $DOCKER_PY_COMMIT \\\n\t&& pip install --no-cache-dir docker-pycreds==0.2.1 \\\n\t&& pip install --no-cache-dir -r test-requirements.txt\n\n# Install yamllint for validating swagger.yaml\nRUN pip install --no-cache-dir yamllint==1.5.0\n\n# Install go-swagger for validating swagger.yaml\nENV GO_SWAGGER_COMMIT c28258affb0b6251755d92489ef685af8d4ff3eb\nRUN git clone https://github.com/go-swagger/go-swagger.git /go/src/github.com/go-swagger/go-swagger \\\n\t&& (cd /go/src/github.com/go-swagger/go-swagger && git checkout -q $GO_SWAGGER_COMMIT) \\\n\t&& go install -v github.com/go-swagger/go-swagger/cmd/swagger\n\n# Set user.email so crosbymichael's in-container merge commits go smoothly\nRUN git config --global user.email 'docker-dummy@example.com'\n\n# Add an unprivileged user to be used for tests which need it\nRUN groupadd -r docker\nRUN useradd --create-home --gid docker unprivilegeduser\n\nVOLUME /var/lib/docker\nWORKDIR /go/src/github.com/docker/docker\nENV DOCKER_BUILDTAGS apparmor pkcs11 seccomp selinux\n\n# Let us use a .bashrc file\nRUN ln -sfv $PWD/.bashrc ~/.bashrc\n# Add integration helps to bashrc\nRUN echo \"source $PWD/hack/make/.integration-test-helpers\" >> /etc/bash.bashrc\n\n# Register Docker's bash completion.\nRUN ln -sv $PWD/contrib/completion/bash/docker /etc/bash_completion.d/docker\n\n# Get useful and necessary Hub images so we can \"docker load\" locally instead of pulling\nCOPY contrib/download-frozen-image-v2.sh /go/src/github.com/docker/docker/contrib/\nRUN ./contrib/download-frozen-image-v2.sh /docker-frozen-images \\\n\tbuildpack-deps:jessie@sha256:85b379ec16065e4fe4127eb1c5fb1bcc03c559bd36dbb2e22ff496de55925fa6 \\\n\tbusybox:latest@sha256:32f093055929dbc23dec4d03e09dfe971f5973a9ca5cf059cbfb644c206aa83f \\\n\tdebian:jessie@sha256:72f784399fd2719b4cb4e16ef8e369a39dc67f53d978cd3e2e7bf4e502c7b793 \\\n\thello-world:latest@sha256:c5515758d4c5e1e838e9cd307f6c6a0d620b5e07e6f927b07d05f6d12a1ac8d7\n# See also ensureFrozenImagesLinux() in \"integration-cli/fixtures_linux_daemon_test.go\" (which needs to be updated when adding images to this list)\n\n# Install tomlv, vndr, runc, containerd, tini, docker-proxy\n# Please edit hack/dockerfile/install-binaries.sh to update them.\nCOPY hack/dockerfile/binaries-commits /tmp/binaries-commits\nCOPY hack/dockerfile/install-binaries.sh /tmp/install-binaries.sh\nRUN /tmp/install-binaries.sh tomlv vndr runc containerd tini proxy bindata\n\n# Wrap all commands in the \"docker-in-docker\" script to allow nested containers\nENTRYPOINT [\"hack/dind\"]\n\n# Upload docker source\nCOPY . /go/src/github.com/docker/docker\n"
}