{
  "startTime": 1674234196244,
  "endTime": 1674234196317,
  "originalSmells": [
    {
      "rule": "apkAddUseNoCache",
      "position": {
        "lineStart": 12,
        "lineEnd": 12,
        "columnStart": 4,
        "columnEnd": 46
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM docker@sha256:453c52a7a7200677f9effa3acc8498a2f71af77c2951ac5e1ac1391053573374 AS docker\nFROM alpine:latest\n\nCOPY --from=docker /usr/local/bin/docker /usr/local/bin/docker\n\nRUN apk --no-cache add curl python py-crcmod bash libc6-compat openssh-client git gnupg\n\nENV RUBY_PACKAGES ruby ruby-io-console ruby-irb ruby-rake ruby-bundler ruby-bigdecimal ruby-json\nENV RUBY_DEPS libstdc++ tzdata bash ca-certificates openssl sqlite sqlite-dev\n\nRUN apk update && \\\n    apk upgrade && \\\n    apk --update --no-cache add $RUBY_PACKAGES $RUBY_DEPS && \\\n    echo 'gem: --no-document' > /etc/gemrc\n\nRUN mkdir /app && \\\n    mkdir -p /data/ionosphere\n\nCOPY Gemfile /app\nCOPY Gemfile.lock /app\nWORKDIR /app\n\n# install packages needed for building compiled gems; install gems; then delete build dependencies to keep Docker image small\nENV BUILD_PACKAGES sudo build-base ruby-dev libc-dev linux-headers openssl-dev\nRUN apk --update add --virtual build_deps $BUILD_PACKAGES && \\\n    bundle install && \\\n    apk del build_deps && \\\n    rm -rf /var/cache/apk/*\n\nCOPY . /app\n"
}