{
  "startTime": 1674246080468,
  "endTime": 1674246080635,
  "originalSmells": [
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 66,
        "lineEnd": 66,
        "columnStart": 52,
        "columnEnd": 253
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 41,
        "lineEnd": 41,
        "columnStart": 4,
        "columnEnd": 92
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 41,
        "lineEnd": 41,
        "columnStart": 4,
        "columnEnd": 92
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 41,
        "lineEnd": 41,
        "columnStart": 4,
        "columnEnd": 92
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# Docker image for OpenResty study\n# VERSION 0.0.1\n# Author: bolingcavalry\n\n#基础镜像使用ubuntu:16.04\nFROM ubuntu:16.04\n\n#作者\nMAINTAINER BolingCavalry <zq2599@gmail.com>\n\n#定义工作目录\nENV WORK_PATH /usr/local/work\n\n#定义安装目录\nENV INSTALL_PATH /usr/servers\n\n#定义nginx-openresty文件夹名称\nENV NGX_OPENRESTY_PACKAGE_NAME ngx_openresty-1.7.7.2\n\n#定义ngx_cache_purge文件夹名称，该模块用于清理nginx缓存\nENV NGX_CACHE_PURGE_PACKAGE_NAME ngx_cache_purge-2.3\n\n#定义nginx_upstream_check_module文件夹名称，该模块用于ustream健康检查\nENV NGX_UPSTREAM_CHECK_PACKAGE_NAME nginx_upstream_check_module-0.3.0\n\n#创建工作目录\nRUN mkdir -p $WORK_PATH\n\n#创建安装目录\nRUN mkdir -p $INSTALL_PATH\n\n#apt换源，用阿里云的源，删除原有的源\nRUN rm /etc/apt/sources.list\n\n#apt换源，用阿里云的源，复制新的源\nCOPY ./sources.list /etc/apt/sources.list\n\n#apt更新\nRUN apt-get update && apt-get install --no-install-recommends -y make gcc libreadline-dev libncurses5-dev libpcre3-dev libssl-dev perl && rm -rf /var/lib/apt/lists/*; #创建安装目录\n\n\n#把nginx-openresty文件夹复制到工作目录\nCOPY ./$NGX_OPENRESTY_PACKAGE_NAME $INSTALL_PATH/$NGX_OPENRESTY_PACKAGE_NAME\n\n######luajit start######\n#进入make目录，执行编译luajit\nRUN cd $INSTALL_PATH/$NGX_OPENRESTY_PACKAGE_NAME/bundle/LuaJIT-2.1-20150120/ && make clean && make && make install\n\n#软连接\nRUN ln -sf luajit-2.1.0-alpha /usr/local/bin/luajit\n######luajit end######\n\n\n######module start######\n#把ngx_cache_purge文件夹复制到工作目录\nCOPY ./$NGX_CACHE_PURGE_PACKAGE_NAME $INSTALL_PATH/$NGX_OPENRESTY_PACKAGE_NAME/bundle/$NGX_CACHE_PURGE_PACKAGE_NAME\n\n#把nginx_upstream_check_module文件夹复制到工作目录\nCOPY ./$NGX_UPSTREAM_CHECK_PACKAGE_NAME $INSTALL_PATH/$NGX_OPENRESTY_PACKAGE_NAME/bundle/$NGX_UPSTREAM_CHECK_PACKAGE_NAME\n######module end######\n\n\n######ngx_openresty start######\n#进入ngx_openresty目录，执行configure，执行构建\nRUN cd $INSTALL_PATH/$NGX_OPENRESTY_PACKAGE_NAME && ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --prefix=$INSTALL_PATH --with-http_realip_module --with-pcre --with-luajit --add-module=./bundle/$NGX_CACHE_PURGE_PACKAGE_NAME/ --add-module=./bundle/$NGX_UPSTREAM_CHECK_PACKAGE_NAME/ -j2 && make && make install\n######ngx_openresty end######\n\n\n######复制配置文件 start######\n#删除原有的nginx.conf\nRUN rm $INSTALL_PATH/nginx/conf/nginx.conf\n#用定制的nginx.conf\nCOPY ./nginx.conf $INSTALL_PATH/nginx/conf/\n#将新的conf文件放入指定位置，nginx.conf中对此文件有include\nCOPY ./boling_cavalry.conf $WORK_PATH/\n#创建放置lua库的目录\nRUN mkdir $WORK_PATH/lualib\n#复制一个lua库文件\nCOPY ./sequare.lua $WORK_PATH/lualib\n#创建放置lua脚本的目录\nRUN mkdir $WORK_PATH/lua\n#复制一个lua的demo脚本\nCOPY ./test_request.lua $WORK_PATH/lua\nCOPY ./get_sequare.lua $WORK_PATH/lua\n######复制配置文件 end######\n\n\n#暴露8080端口\nEXPOSE 80\n\n#启动NGINX\nCMD [\"/usr/servers/nginx/sbin/nginx\", \"-g\", \"daemon off;\"]\n\n"
}