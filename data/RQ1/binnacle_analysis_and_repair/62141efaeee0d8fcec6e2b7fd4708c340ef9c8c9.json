{
  "startTime": 1674235097077,
  "endTime": 1674235097174,
  "originalSmells": [
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 23,
        "lineEnd": 23,
        "columnStart": 4,
        "columnEnd": 15
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 17,
        "lineEnd": 17,
        "columnStart": 22,
        "columnEnd": 44
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 21,
        "lineEnd": 21,
        "columnStart": 4,
        "columnEnd": 97
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 21,
        "lineEnd": 21,
        "columnStart": 4,
        "columnEnd": 97
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 17,
        "lineEnd": 17,
        "columnStart": 22,
        "columnEnd": 44
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 21,
        "lineEnd": 21,
        "columnStart": 4,
        "columnEnd": 97
      }
    }
  ],
  "repairedSmells": [
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 21,
        "lineEnd": 21,
        "columnStart": 4,
        "columnEnd": 121
      }
    }
  ],
  "repairedDockerfile": "ARG UBUNTU_VERSION=16.04\nFROM ubuntu:${UBUNTU_VERSION}\n\nLABEL authors=\"hoatle <hoatle@teracy.com>\"\n\n# add more arguments from CI to the image so that `$ env` should reveal more info\n\nARG CI_BUILD_ID\nARG CI_BUILD_REF\nARG CI_REGISTRY_IMAGE\nARG CI_BUILD_TIME\nARG WATCHMAN_VERSION=v4.9.0\n\nENV CI_BUILD_ID=$CI_BUILD_ID CI_BUILD_REF=$CI_BUILD_REF CI_REGISTRY_IMAGE=$CI_REGISTRY_IMAGE \\\n    CI_BUILD_TIME=$CI_BUILD_TIME \\\n    WATCHMAN_VERSION=$WATCHMAN_VERSION\n\nRUN apt-get update && apt-get install --no-install-recommends -y git && rm -rf /var/lib/apt/lists/*;\nRUN git clone https://github.com/facebook/watchman.git\nWORKDIR watchman/\nRUN git checkout $WATCHMAN_VERSION\nRUN apt-get install --no-install-recommends -y autoconf automake build-essential python-dev libssl-dev libtool pkg-config && rm -rf /var/lib/apt/lists/*;\nRUN ./autogen.sh\nRUN ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\"\nRUN make\nRUN make install\n# clean up the source\nRUN cd .. && rm -rf watchman\nWORKDIR /\n"
}