{
  "startTime": 1674242177266,
  "endTime": 1674242177460,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 63,
        "lineEnd": 63,
        "columnStart": 5,
        "columnEnd": 38
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 71,
        "lineEnd": 71,
        "columnStart": 31,
        "columnEnd": 64
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 75,
        "lineEnd": 75,
        "columnStart": 4,
        "columnEnd": 144
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 2,
        "lineEnd": 2,
        "columnStart": 22,
        "columnEnd": 49
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 71,
        "lineEnd": 71,
        "columnStart": 4,
        "columnEnd": 27
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 71,
        "lineEnd": 71,
        "columnStart": 4,
        "columnEnd": 27
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 71,
        "lineEnd": 71,
        "columnStart": 4,
        "columnEnd": 27
      }
    }
  ],
  "repairedSmells": [
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 71,
        "lineEnd": 71,
        "columnStart": 4,
        "columnEnd": 51
      }
    }
  ],
  "repairedDockerfile": "FROM openjdk:8-jdk\n\nRUN apt-get update && apt-get install --no-install-recommends -y git curl && rm -rf /var/lib/apt/lists/*\n\nENV JENKINS_HOME /var/jenkins_home\nENV JENKINS_SLAVE_AGENT_PORT 50000\n\nARG user=jenkins\nARG group=jenkins\nARG uid=1000\nARG gid=1000\n\n# Jenkins is run with user `jenkins`, uid = 1000\n# If you bind mount a volume from the host or a data container,\n# ensure you use the same uid\nRUN groupadd -g ${gid} ${group} \\\n    && useradd -d \"$JENKINS_HOME\" -u ${uid} -g ${gid} -m -s /bin/bash ${user}\n\n# Jenkins home directory is a volume, so configuration and build history\n# can be persisted and survive image upgrades\nVOLUME /var/jenkins_home\n\n# `/usr/share/jenkins/ref/` contains all reference configuration we want\n# to set on a fresh new installation. Use it to bundle additional plugins\n# or config file with your custom jenkins Docker image.\nRUN mkdir -p /usr/share/jenkins/ref/init.groovy.d\n\nENV TINI_VERSION 0.16.1\nENV TINI_SHA d1cb5d71adc01d47e302ea439d70c79bd0864288\n\n# Use tini as subreaper in Docker container to adopt zombie processes\nRUN curl -fsSL https://github.com/krallin/tini/releases/download/v${TINI_VERSION}/tini-static-amd64 -o /bin/tini && chmod +x /bin/tini \\\n  && echo \"$TINI_SHA  /bin/tini\" | sha1sum -c -\n\nCOPY init.groovy /usr/share/jenkins/ref/init.groovy.d/tcp-slave-agent-port.groovy\n\n# jenkins version being bundled in this docker image\nARG JENKINS_VERSION\nENV JENKINS_VERSION ${JENKINS_VERSION:-2.89.2}\n\n# jenkins.war checksum, download will be validated using it\n# 2.89.2\nARG JENKINS_SHA=014f669f32bc6e925e926e260503670b32662f006799b133a031a70a794c8a14\n\n\n# Can be used to customize where jenkins.war get downloaded from\nARG JENKINS_URL=https://repo.jenkins-ci.org/public/org/jenkins-ci/main/jenkins-war/${JENKINS_VERSION}/jenkins-war-${JENKINS_VERSION}.war\n\n# could use ADD but this one does not check Last-Modified header neither does it allow to control checksum\n# see https://github.com/docker/docker/issues/8331\nRUN curl -fsSL ${JENKINS_URL} -o /usr/share/jenkins/jenkins.war \\\n  && echo \"${JENKINS_SHA}  /usr/share/jenkins/jenkins.war\" | sha256sum -c -\n\nENV JENKINS_UC https://updates.jenkins.io\nRUN chown -R ${user} \"$JENKINS_HOME\" /usr/share/jenkins/ref\n\n\n# Add jenkins to the correct group\n# see http://stackoverflow.com/questions/42164653/docker-in-docker-permissions-error\n# use \"getent group docker | awk -F: '{printf \"%d\\n\", $3}'\" command on host to find correct value for gid or simply use 'id'\nARG DOCKER_GID=998\n\nRUN groupadd -g ${DOCKER_GID} docker \\\n  && curl -f -sSL https://get.docker.com/ | sh \\\n  && apt-get -q autoremove \\\n  && apt-get -q clean -y \\\n  && rm -rf /var/lib/apt/lists/* /var/cache/apt/*.bin\n\n# Install Docker-in-Docker from git@github.com:jpetazzo/dind.git\n# RUN apt-get update -qq && apt-get install -qqy apt-transport-https ca-certificates curl lxc iptables\n# Install Docker from Docker Inc. repositories.\nRUN apt-get install --no-install-recommends -y curl && curl -f -sSL https://get.docker.com/ | sh && rm -rf /var/lib/apt/lists/*;\nRUN usermod -aG docker jenkins\n\n# Install Docker-Compose\nRUN curl -f -L \"https://github.com/docker/compose/releases/download/1.16.1/docker-compose-$(uname -s)-$(uname -m)\" -o /usr/local/bin/docker-compose\nRUN chmod +x /usr/local/bin/docker-compose\n\n\n# for main web interface:\nEXPOSE 8080\n\n# will be used by attached slave agents:\nEXPOSE 50000\n\nENV COPY_REFERENCE_FILE_LOG $JENKINS_HOME/copy_reference_file.log\n\nUSER ${user}\n\nCOPY jenkins-support /usr/local/bin/jenkins-support\nCOPY jenkins.sh /usr/local/bin/jenkins.sh\nENTRYPOINT [\"/bin/tini\", \"--\", \"/usr/local/bin/jenkins.sh\"]\n\n# from a derived Dockerfile, can use `RUN plugins.sh active.txt` to setup /usr/share/jenkins/ref/plugins from a support bundle\nCOPY plugins.sh /usr/local/bin/plugins.sh\nCOPY install-plugins.sh /usr/local/bin/install-plugins.sh\n\n# Only need below if we are starting from empty jenkins_home\n## Copy the RSA keys\n#RUN mkdir -p /var/jenkins_home/.ssh\n#RUN chown jenkins:jenkins /var/jenkins_home/.ssh\n#COPY keys/id_rsa /var/jenkins_home/.ssh/id_rsa.pub\n#COPY keys/id_rsa /var/jenkins_home/.ssh/id_rsa\n#COPY keys/known_hosts /var/jenkins_home/.ssh/known_hosts\n#\n#USER root\n#RUN chmod 600 /var/jenkins_home/.ssh/id_rsa\n#RUN chmod 644 /var/jenkins_home/.ssh/id_rsa.pub\n## ssh-keyscan -H github.com >> ~/.ssh/known_hosts\n## ssh-keyscan -H bitbucket.org >> ~/.ssh/known_hosts\n"
}