{
  "startTime": 1674243241541,
  "endTime": 1674243241732,
  "originalSmells": [
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 15,
        "lineEnd": 44,
        "columnStart": 22,
        "columnEnd": 12
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "ARG BAZEL_VERSION\nARG CUDA_VERSION\nARG CUDA_POSTFIX\nFROM nvidia/cuda:${CUDA_VERSION}-devel-ubuntu16.04\n\nARG BAZEL_VERSION\nARG CUDA_POSTFIX\nARG CUDNN_VERSION\nRUN echo \"BAZEL_VERSION\" ${BAZEL_VERSION}\nRUN echo \"CUDA_VERSION\" ${CUDA_VERSION}\nRUN echo \"CUDA_POSTFIX\" ${CUDA_POSTFIX}\nRUN echo \"CUDNN_VERSION\" ${CUDNN_VERSION}\nLABEL maintainer=\"Patrick Wieschollek <mail@patwie.com>\"\n\n\nRUN apt-get update && apt-get install -y --no-install-recommends \\\n        build-essential \\\n        cuda-command-line-tools-${CUDA_POSTFIX} \\\n        cuda-cublas-dev-${CUDA_POSTFIX} \\\n        cuda-cudart-dev-${CUDA_POSTFIX} \\\n        cuda-cufft-dev-${CUDA_POSTFIX} \\\n        cuda-curand-dev-${CUDA_POSTFIX} \\\n        cuda-cusolver-dev-${CUDA_POSTFIX} \\\n        cuda-cusparse-dev-${CUDA_POSTFIX} \\\n        curl \\\n        git \\\n        nano \\\n        cmake \\\n        libcudnn7=${CUDNN_VERSION} \\\n        libcudnn7-dev=${CUDNN_VERSION} \\\n        libnccl2 \\\n        libnccl-dev \\\n        libcurl3-dev \\\n        libfreetype6-dev \\\n        libhdf5-serial-dev \\\n        libpng12-dev \\\n        libzmq3-dev \\\n        pkg-config \\\n        python-dev \\\n        rsync \\\n        software-properties-common \\\n        unzip \\\n        zip \\\n        zlib1g-dev \\\n        wget \\\n        && \\\n    find /usr/local/cuda-9.0/lib64/ -type f -name 'lib*_static.a' -not -name 'libcudart_static.a' -delete && \\\n    rm /usr/lib/x86_64-linux-gnu/libcudnn_static_v7.a && rm -rf /var/lib/apt/lists/*;\n    # rm -rf /var/lib/apt/lists/* && \\\n\nRUN curl -fSsL -O https://bootstrap.pypa.io/get-pip.py && \\\n    python get-pip.py && \\\n    rm get-pip.py\n\nRUN pip --no-cache-dir install \\\n        Pillow \\\n        h5py \\\n        ipykernel \\\n        jupyter \\\n        matplotlib \\\n        mock \\\n        numpy \\\n        scipy \\\n        sklearn \\\n        pandas \\\n        keras_applications \\\n        keras_preprocessing \\\n        && \\\n    python -m ipykernel.kernelspec\n\n# Set up Bazel.\n\n# Running bazel inside a `docker build` command causes trouble, cf:\n#   https://github.com/bazelbuild/bazel/issues/134\n# The easiest solution is to set up a bazelrc file forcing --batch.\nRUN echo \"startup --batch\" >>/etc/bazel.bazelrc\n\n# Similarly, we need to workaround sandboxing issues:\n#   https://github.com/bazelbuild/bazel/issues/418\nRUN echo \"build --spawn_strategy=standalone --genrule_strategy=standalone\" \\\n    >>/etc/bazel.bazelrc\n\n\nWORKDIR /\nRUN echo https://github.com/bazelbuild/bazel/releases/download/${BAZEL_VERSION}/bazel-${BAZEL_VERSION}-installer-linux-x86_64.sh\nRUN mkdir /bazel && \\\n    cd /bazel && \\\n    curl -H \"User-Agent: Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/57.0.2987.133 Safari/537.36\" -fSsL -O https://github.com/bazelbuild/bazel/releases/download/${BAZEL_VERSION}/bazel-${BAZEL_VERSION}-installer-linux-x86_64.sh && \\\n    curl -H \"User-Agent: Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/57.0.2987.133 Safari/537.36\" -fSsL -o /bazel/LICENSE.txt https://raw.githubusercontent.com/bazelbuild/bazel/master/LICENSE && \\\n    chmod +x bazel-*.sh && \\\n    ./bazel-${BAZEL_VERSION}-installer-linux-x86_64.sh && \\\n    cd / && \\\n    rm -f /bazel/bazel-${BAZEL_VERSION}-installer-linux-x86_64.sh\n\n"
}