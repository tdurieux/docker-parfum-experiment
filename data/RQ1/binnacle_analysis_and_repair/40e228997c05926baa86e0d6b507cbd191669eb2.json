{
  "startTime": 1674234558505,
  "endTime": 1674234558757,
  "originalSmells": [
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 38,
        "lineEnd": 38,
        "columnStart": 4,
        "columnEnd": 59
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 6,
        "lineEnd": 6,
        "columnStart": 5,
        "columnEnd": 117
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 8,
        "lineEnd": 8,
        "columnStart": 5,
        "columnEnd": 93
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM golang:1.10.2\nENV SCOPE_SKIP_UI_ASSETS true\nRUN set -eux; \\\n   export arch_val=\"$(dpkg --print-architecture)\"; \\\n   apt-get update && \\\n   if [ \"$arch_val\" = \"amd64\" ]; then \\\n     apt-get install --no-install-recommends -y libpcap-dev time file shellcheck git gcc-arm-linux-gnueabihf curl build-essential python-pip; \\\n   else \\\n     apt-get install --no-install-recommends -y libpcap-dev time file shellcheck git curl build-essential python-pip; \\\n   fi; \\\n\n   rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*\n\nRUN go clean -i net && \\\n\tgo install -tags netgo std && \\\n   export arch_val=\"$(dpkg --print-architecture)\"; \\\n   if [ \"$arch_val\" != \"ppc64el\" ]; then \\\n\tgo install -race -tags netgo std; \\\n   fi; \\\n    go get -tags netgo \\\n\t\tgithub.com/fzipp/gocyclo \\\n\t\tgolang.org/x/lint/golint \\\n\t\tgithub.com/kisielk/errcheck \\\n\t\tgithub.com/fatih/hclfmt \\\n\t\tgithub.com/mjibson/esc \\\n\t\tgithub.com/client9/misspell/cmd/misspell && \\\n\tchmod a+wr --recursive /usr/local/go && \\\n\trm -rf /go/pkg/ /go/src/\n\n   # Only install shfmt on amd64, as the version v1.3.0 isn't supported for ppc64le\n   # and the later version of shfmt doesn't work with the application well\nRUN export arch_val=\"$(dpkg --print-architecture)\"; \\\n   if [ \"$arch_val\" = \"amd64\" ]; then \\\n     curl -fsSL -o shfmt https://github.com/mvdan/sh/releases/download/v1.3.0/shfmt_v1.3.0_linux_amd64 && \\\n     chmod +x shfmt && \\\n     mv shfmt /usr/bin; \\\n   fi;\n\nRUN pip install --no-cache-dir yapf==0.16.2 flake8==3.3.0 requests==2.19.1\n\n# Install Docker (client only)\nENV DOCKERVERSION=17.09.1-ce\nRUN export arch_val=\"$(dpkg --print-architecture)\"; \\\n    if [ \"$arch_val\" = \"arm64\" ]; then \\\n        curl -fsSLO https://download.docker.com/linux/static/stable/aarch64/docker-${DOCKERVERSION}.tgz; \\\n    elif [ \"$arch_val\" = \"amd64\" ]; then \\\n        curl -fsSLO https://download.docker.com/linux/static/stable/x86_64/docker-${DOCKERVERSION}.tgz; \\\n    elif [ \"$arch_val\" = \"ppc64el\" ]; then \\\n        curl -fsSLO https://download.docker.com/linux/static/stable/ppc64le/docker-${DOCKERVERSION}.tgz; \\\n    else \\\n        echo \"No Docker client found for architecture $(arch_val).\" && \\\n        exit 1; \\\n    fi; \\\n    tar xzvf docker-${DOCKERVERSION}.tgz --strip 1 -C /usr/local/bin docker/docker && \\\n    rm docker-${DOCKERVERSION}.tgz;\n\nCOPY build.sh /\nENTRYPOINT [\"/build.sh\"]\n\nARG revision\nLABEL maintainer=\"Weaveworks <help@weave.works>\" \\\n      org.opencontainers.image.title=\"backend\" \\\n      org.opencontainers.image.source=\"https://github.com/weaveworks/scope/tree/master/backend\" \\\n      org.opencontainers.image.revision=\"${revision}\" \\\n      org.opencontainers.image.vendor=\"Weaveworks\"\n"
}