{
  "startTime": 1674246110469,
  "endTime": 1674246110922,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 35,
        "lineEnd": 35,
        "columnStart": 4,
        "columnEnd": 45
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 5,
        "lineEnd": 16,
        "columnStart": 4,
        "columnEnd": 16
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 5,
        "lineEnd": 16,
        "columnStart": 4,
        "columnEnd": 16
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM lablup/common-tensorflow:1.11-py36-cuda9 as tf-binary\nFROM nvidia/cuda:9.0-cudnn7-runtime-ubuntu16.04\nMAINTAINER Mario Cho \"m.cho@lablup.com\"\n\nRUN apt-get update && \\\n    apt-get install --no-install-recommends -y \\\n        ca-certificates \\\n        wget curl git-core \\\n        vim-tiny zip unzip \\\n        python3 python3-pip \\\n        libssl-dev \\\n        libmpdec2 \\\n        proj-bin libproj-dev \\\n        libgeos-dev libgeos++-dev \\\n        mime-support \\\n        gcc g++ make \\\n        xz-utils \\\n\t&& \\\n    apt-get clean && \\\n    rm -rf /var/lib/apt/lists/ && rm -rf /var/lib/apt/lists/*;\n\nENV PYTHONUNBUFFERED=1 \\\n    LD_LIBRARY_PATH=\"/usr/local/cuda/lib64:/usr/local/nvidia/lib64\" \\\n    PATH=\"/usr/local/nvidia/bin:/usr/local/cuda/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin\" \\\n    LANG=C.UTF-8\n\n# Install CUDA-9.0 + cuDNN 7.4\nRUN ln -s /usr/local/cuda-9.0 /usr/local/cuda && \\\n    ln -s /usr/lib/x86_64-linux-gnu/libcudnn.so.7.4.1 /usr/local/cuda/lib64/libcudnn.so && \\\n    ldconfig\n\n# As we mostly have \"manylinux\" glibc-compatible binary packaes,\n# we don't have to rebuild these!\nCOPY --from=tf-binary /tmp/tensorflow_pkg/tensorflow-*.whl /tmp\n\nRUN curl -f https://bootstrap.pypa.io/get-pip.py | python3 && \\\n    python3 -m pip install --no-cache-dir -U setuptools && \\\n    python3 -m pip install --no-cache-dir wheel && \\\n    python3 -m pip install --no-cache-dir pyzmq simplejson msgpack-python uvloop && \\\n    python3 -m pip install --no-cache-dir aiozmq dataclasses tabulate && \\\n    python3 -m pip install --no-cache-dir namedlist six \"python-dateutil>=2\" && \\\n    python3 -m pip install --no-cache-dir h5py && \\\n    python3 -m pip install --no-cache-dir Cython && \\\n    python3 -m pip install --no-cache-dir numpy scipy && \\\n    python3 -m pip install --no-cache-dir versioneer==0.17 && \\\n    python3 -m pip install --no-cache-dir pyproj Cartopy==0.16 && \\\n    python3 -m pip install --no-cache-dir matplotlib bokeh && \\\n    python3 -m pip install --no-cache-dir opencv-python && \\\n    python3 -m pip install --no-cache-dir pandas && \\\n    python3 -m pip install --no-cache-dir seaborn && \\\n    python3 -m pip install --no-cache-dir pillow && \\\n    python3 -m pip install --no-cache-dir networkx cvxpy && \\\n    python3 -m pip install --no-cache-dir scikit-learn scikit-image && \\\n    python3 -m pip install --no-cache-dir pygments && \\\n    python3 -m pip install --no-cache-dir wheel /tmp/*.whl && \\\n    python3 -m pip install --no-cache-dir keras && \\\n    python3 -m pip install --no-cache-dir keras_applications && \\\n    python3 -m pip install --no-cache-dir keras_preprocessing && \\\n    python3 -m pip install --no-cache-dir ipython && \\\n    python3 -m pip install --no-cache-dir jupyter && \\\n    python3 -m pip install --no-cache-dir jupyterlab && \\\n    rm -rf /root/.cache && \\\n    rm -f /tmp/*.whl\n\n# python alternative support\nRUN update-alternatives --install /usr/bin/python python /usr/bin/python3 2\n\n# Install ipython kernelspec\nRUN python -m ipykernel install --display-name \"TensorFlow 1.11 on Python 3.6 (CUDA 9.0)\" && \\\n    cat /usr/local/share/jupyter/kernels/python3/kernel.json\n\n# Install Jupyter notebook logo\nRUN mkdir -p /home/work/.jupyter/custom\nCOPY custom.css /home/work/.jupyter/custom/custom.css\nCOPY logo.svg /home/work/.jupyter/custom/logo.svg\n\n# Backend.AI specifics\nLABEL ai.backend.kernelspec=\"1\" \\\n      ai.backend.envs.corecount=\"OPENBLAS_NUM_THREADS,OMP_NUM_THREADS,NPROC\" \\\n      ai.backend.features=\"batch query uid-match user-input\" \\\n      ai.backend.base-distro=\"ubuntu16.04\" \\\n      ai.backend.resource.min.cpu=\"1\" \\\n      ai.backend.resource.min.mem=\"1g\" \\\n      ai.backend.resource.min.cuda.device=1 \\\n      ai.backend.resource.min.cuda.shares=0.1 \\\n      ai.backend.runtime-type=\"python\" \\\n      ai.backend.runtime-path=\"/usr/bin/python\" \\\n      ai.backend.service-ports=\"ipython:pty:3000,jupyter:http:8080,jupyterlab:http:8090\"\n\nCOPY policy.yml /etc/backend.ai/jail/policy.yml\n\n# vim: ft=dockerfile"
}