{
  "startTime": 1674236024868,
  "endTime": 1674236025858,
  "originalSmells": [
    {
      "rule": "wgetUseHttpsUrl",
      "position": {
        "lineStart": 166,
        "lineEnd": 168,
        "columnStart": 4,
        "columnEnd": 96
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 157,
        "lineEnd": 157,
        "columnStart": 4,
        "columnEnd": 35
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 133,
        "lineEnd": 135,
        "columnStart": 4,
        "columnEnd": 12
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 10,
        "lineEnd": 13,
        "columnStart": 4,
        "columnEnd": 12
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 24,
        "lineEnd": 54,
        "columnStart": 4,
        "columnEnd": 15
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 133,
        "lineEnd": 135,
        "columnStart": 4,
        "columnEnd": 12
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 146,
        "lineEnd": 156,
        "columnStart": 4,
        "columnEnd": 12
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "#\n# Downloads and builds Qt from source. This is simpler than using the Qt online\n# installer. We do it in a separate stage to keep the number of dependencies low\n# in the final Docker image.\n#\nFROM debian:9 as build-qt-linux-x86_64\nARG QT_VERSION\n\n# Downloader dependencies\nRUN apt-get update -qq && \\\n    apt-get install -qq -y --no-install-recommends \\\n        ca-certificates \\\n        xz-utils \\\n        wget && rm -rf /var/lib/apt/lists/*;\n\n# Download\nRUN mkdir -p /qt/source && \\\n    wget -nv --continue --tries=20 --waitretry=10 --retry-connrefused \\\n        --no-dns-cache --timeout 300 -qO- \\\n        https://download.qt.io/official_releases/qt/${QT_VERSION%??}/${QT_VERSION}/single/qt-everywhere-src-${QT_VERSION}.tar.xz \\\n        | tar --strip-components=1 -C /qt/source -xJf-\n\n# Build dependencies\nRUN apt-get update -qq && \\\n    apt-get install -qq -y --no-install-recommends \\\n        autoconf \\\n        automake \\\n        autopoint \\\n        binutils \\\n        bison \\\n        build-essential \\\n        flex \\\n        intltool \\\n        libclang-3.9-dev \\\n        libgdk-pixbuf2.0-dev \\\n        libffi-dev \\\n        libfontconfig1-dev \\\n        libfreetype6-dev \\\n        libgmp-dev \\\n        libicu-dev \\\n        libmpc-dev \\\n        libmpfr-dev \\\n        libtool \\\n        libtool-bin \\\n        libx11-dev \\\n        libxext-dev \\\n        libxfixes-dev \\\n        libxi-dev \\\n        libxrender-dev \\\n        libxcb1-dev \\\n        libx11-xcb-dev \\\n        libxcb-glx0-dev \\\n        libz-dev \\\n        python \\\n        openssl && rm -rf /var/lib/apt/lists/*;\n\nENV LLVM_INSTALL_DIR=/usr/lib/llvm-3.9\n\n# Build Qt\nRUN mkdir -p qt/build && \\\n    cd qt/build && \\\n    ../source/configure \\\n        -prefix /opt/qt5-linux-x86_64 \\\n        -release \\\n        -shared \\\n        -opensource \\\n        -confirm-license \\\n        -nomake examples \\\n        -nomake tests \\\n        -platform linux-g++ \\\n        -no-use-gold-linker \\\n        -R . \\\n        -sysconfdir /etc/xdg \\\n        -qt-freetype -qt-harfbuzz -qt-pcre -qt-sqlite -qt-xcb -qt-zlib \\\n        -no-cups -no-dbus -no-pch -no-libudev \\\n        -no-feature-accessibility -no-opengl \\\n        -skip qtactiveqt \\\n        -skip qt3d \\\n        -skip qtcanvas3d \\\n        -skip qtcharts \\\n        -skip qtconnectivity \\\n        -skip qtdatavis3d \\\n        -skip qtdoc \\\n        -skip qtgamepad \\\n        -skip qtgraphicaleffects \\\n        -skip qtimageformats \\\n        -skip qtlocation \\\n        -skip qtmultimedia \\\n        -skip qtnetworkauth \\\n        -skip qtquickcontrols \\\n        -skip qtquickcontrols2 \\\n        -skip qtpurchasing \\\n        -skip qtremoteobjects \\\n        -skip qtscxml \\\n        -skip qtsensors \\\n        -skip qtserialbus \\\n        -skip qtspeech \\\n        -skip qtsvg \\\n        -skip qttranslations \\\n        -skip qtwayland \\\n        -skip qtvirtualkeyboard \\\n        -skip qtwebchannel \\\n        -skip qtwebengine \\\n        -skip qtwebsockets \\\n        -skip qtwebview \\\n        -skip qtwinextras \\\n        -skip qtxmlpatterns \\\n        -skip qtx11extras\n\nRUN cd qt/build && \\\n    make -j $(nproc --all) | stdbuf -o0 tr -cd '\\n' | stdbuf -o0 tr '\\n' '.' && \\\n    make install\n\n# Build a stable Qbs release\nFROM debian:9\nLABEL Description=\"Debian development environment for Qbs with Qt and various dependencies for testing Qbs modules and functionality\"\nARG QBS_VERSION=1.13.0\n\n# Allow colored output on command line.\nENV TERM=xterm-color\n\n\n#\n# Make it possible to change UID/GID in the entrypoint script. The docker\n# container usually runs as root user on Linux hosts. When the Docker container\n# mounts a folder on the host and creates files there, those files would be\n# owned by root instead of the current user. Thus we create a user here who's\n# UID will be changed in the entrypoint script to match the UID of the current\n# host user.\n#\nARG USER_UID=1000\nARG USER_NAME=devel\nRUN apt-get update -qq && \\\n    apt-get install --no-install-recommends -qq -y \\\n        gosu \\\n        sudo && \\\n    groupadd -g ${USER_UID} ${USER_NAME} && \\\n    useradd -s /bin/bash -u ${USER_UID} -g ${USER_NAME} -o -c \"\" -m ${USER_NAME} && \\\n    usermod -a -G sudo ${USER_NAME} && \\\n    echo \"%devel         ALL = (ALL) NOPASSWD: ALL\" >> /etc/sudoers && rm -rf /var/lib/apt/lists/*;\n\nCOPY entrypoint.sh entrypoint.sh\nENTRYPOINT [\"/entrypoint.sh\"]\n\n# Qbs build dependencies\nRUN apt-get update -qq && \\\n    apt-get install -qq -y --no-install-recommends \\\n        build-essential \\\n        ca-certificates \\\n        git \\\n        libclang-3.9 \\\n        libicu57 \\\n        pkg-config \\\n        make \\\n        help2man \\\n        python-pip \\\n        wget && \\\n    pip install --no-cache-dir beautifulsoup4 lxml && rm -rf /var/lib/apt/lists/*; # for building the documentation\n\n# Install Qt installation from build stage\nCOPY --from=build-qt-linux-x86_64 /opt/qt5-linux-x86_64 /opt/qt5-linux-x86_64\nENV PATH=/opt/qt5-linux-x86_64/bin:${PATH}\nRUN echo \"export PATH=/opt/qt5-linux-x86_64/bin:\\${PATH}\" > /etc/profile.d/qt.sh\n\n# Download and build Qbs\nRUN mkdir -p /qbs && \\\n    wget -nv --continue --tries=20 --waitretry=10 --retry-connrefused \\\n        --no-dns-cache --timeout 300 -qO- \\\n        https://download.qt.io/official_releases/qbs/${QBS_VERSION}/qbs-src-${QBS_VERSION}.tar.gz \\\n        | tar --strip-components=1 -C /qbs -xzf- && \\\n    cd /qbs && \\\n    qmake -r qbs.pro && \\\n    make -j $(nproc --all) && \\\n    make install INSTALL_ROOT=/ && \\\n    rm -rf /qbs\n\n# Configure Qbs\nUSER $USER_NAME\nRUN qbs-setup-toolchains --detect && \\\n    qbs-setup-qt /opt/qt5-linux-x86_64/bin/qmake qt5-linux-x86_64 && \\\n    qbs config defaultProfile qt5-linux-x86_64\n\n# Switch back to root user for the entrypoint script.\nUSER root\n"
}