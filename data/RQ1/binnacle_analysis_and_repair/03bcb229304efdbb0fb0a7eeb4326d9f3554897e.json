{
  "startTime": 1674237024881,
  "endTime": 1674237025200,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 17,
        "lineEnd": 17,
        "columnStart": 2,
        "columnEnd": 60
      }
    },
    {
      "rule": "wgetUseHttpsUrl",
      "position": {
        "lineStart": 28,
        "lineEnd": 28,
        "columnStart": 5,
        "columnEnd": 80
      }
    },
    {
      "rule": "wgetUseHttpsUrl",
      "position": {
        "lineStart": 30,
        "lineEnd": 30,
        "columnStart": 5,
        "columnEnd": 76
      }
    },
    {
      "rule": "wgetUseHttpsUrl",
      "position": {
        "lineStart": 32,
        "lineEnd": 32,
        "columnStart": 5,
        "columnEnd": 69
      }
    },
    {
      "rule": "wgetUseHttpsUrl",
      "position": {
        "lineStart": 37,
        "lineEnd": 37,
        "columnStart": 14,
        "columnEnd": 87
      }
    },
    {
      "rule": "wgetUseHttpsUrl",
      "position": {
        "lineStart": 39,
        "lineEnd": 39,
        "columnStart": 5,
        "columnEnd": 79
      }
    },
    {
      "rule": "wgetUseHttpsUrl",
      "position": {
        "lineStart": 41,
        "lineEnd": 41,
        "columnStart": 5,
        "columnEnd": 81
      }
    },
    {
      "rule": "wgetUseHttpsUrl",
      "position": {
        "lineStart": 43,
        "lineEnd": 43,
        "columnStart": 5,
        "columnEnd": 95
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 49,
        "lineEnd": 49,
        "columnStart": 4,
        "columnEnd": 46
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 34,
        "lineEnd": 34,
        "columnStart": 24,
        "columnEnd": 35
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 35,
        "lineEnd": 35,
        "columnStart": 23,
        "columnEnd": 34
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 36,
        "lineEnd": 36,
        "columnStart": 22,
        "columnEnd": 33
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# Dockerfile for text to speech (TTS) based on\n# Merlin project (https://github.com/CSTR-Edinburgh/merlin/)\n# The Neural Network (NN) based Speech Synthesis System\n#\n# (c) Abylay Ospan <aospan@jokersys.com>, 2017\n# https://jokersys.com\n# under GPLv2 license\n\nFROM ubuntu:14.04\nMAINTAINER aospan@jokersys.com\n\nENV USER root\n\nRUN apt-get update && apt-get install -y --no-install-recommends \\\n  build-essential cmake git wget python-dev unzip \\\n  python-numpy python-scipy curl python-tk libatlas3-base libncurses5-dev \\\n  ca-certificates zlib1g-dev automake autoconf libtool subversion csh gawk && \\\n  curl -f -k https://bootstrap.pypa.io/get-pip.py > get-pip.py && python get-pip.py && \\\n  rm -rf /var/lib/apt/lists/*\n\nWORKDIR /opt\n\n# * compile Merlin tools\n# * download and install festival&festvox\n# * download festival voices\nRUN git clone -b aospan --depth=1 https://github.com/aospan/merlin.git \\\n  && sudo ln -s -f bash /bin/sh \\\n  && cd merlin/tools/ && ./compile_tools.sh \\\n  && wget https://festvox.org/packed/festival/2.4/speech_tools-2.4-release.tar.gz \\\n  && tar -xvzf speech_tools-2.4-release.tar.gz && rm speech_tools-2.4-release.tar.gz \\\n  && wget https://festvox.org/packed/festival/2.4/festival-2.4-release.tar.gz \\\n  && tar -xvzf festival-2.4-release.tar.gz && rm festival-2.4-release.tar.gz \\\n  && wget https://festvox.org/festvox-2.7/festvox-2.7.0-release.tar.gz \\\n  && tar -xvzf festvox-2.7.0-release.tar.gz && rm festvox-2.7.0-release.tar.gz \\\n  && cd speech_tools && ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" && make \\\n  && cd ../festival && ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" && make \\\n  && cd ../festvox && ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" && make \\\n  && cd .. && wget \"https://www.cstr.ed.ac.uk/downloads/festival/2.4/festlex_CMU.tar.gz\" \\\n  && tar xvfz festlex_CMU.tar.gz && rm festlex_CMU.tar.gz \\\n  && wget \"https://www.cstr.ed.ac.uk/downloads/festival/2.4/festlex_OALD.tar.gz\" \\\n  && tar xvfz festlex_OALD.tar.gz && rm festlex_OALD.tar.gz \\\n  && wget \"https://www.cstr.ed.ac.uk/downloads/festival/2.4/festlex_POSLEX.tar.gz\" \\\n  && tar xvfz festlex_POSLEX.tar.gz && rm festlex_POSLEX.tar.gz \\\n  && wget \"https://www.cstr.ed.ac.uk/downloads/festival/2.4/voices/festvox_cmu_us_bdl_cg.tar.gz\" \\\n  && tar xvfz festvox_cmu_us_bdl_cg.tar.gz && rm festvox_cmu_us_bdl_cg.tar.gz \\\n  && find /opt/merlin/tools/ -type f -perm +100 -exec strip {} \\; 2>/dev/null \\\n  && find /opt/merlin/tools/ -type f -perm +100 -exec strip {} \\;\n\n# install python modules\nRUN pip install --no-cache-dir Theano lxml matplotlib bandmat\n\nWORKDIR /opt/merlin/egs/slt_arctic/s1/\n\n# download trained NN (or train your own - see next section )\n# and prepare config files\nRUN mkdir experiments && cd experiments \\\n  && wget \"https://github.com/aospan/merlin-tts/raw/master/bdl_arctic_full.tbz2\" \\\n  && tar xvfjp bdl_arctic_full.tbz2 && rm bdl_arctic_full.tbz2 \\\n  && cd .. && touch bdl_arctic_full_data.zip && mkdir bdl_arctic_full_data \\\n  && ./scripts/setup.sh bdl_arctic_full \\\n  && ./scripts/prepare_config_files.sh conf/global_settings.cfg \\\n  && ./scripts/prepare_config_files_for_synthesis.sh conf/global_settings.cfg\n\n# Uncomment this if you want to train NN from dataset.\n# This can take up to 10 hours on CPU\n# * download dataset (bdl male voice) and train NN\n#RUN cd /opt/merlin/egs/slt_arctic/s1/ && ./run_full_voice.sh bdl\n\nWORKDIR /opt/merlin\nCOPY entrypoint.sh /entrypoint.sh\nENTRYPOINT [\"/bin/bash\", \"-c\", \"/entrypoint.sh ${*}\", \"--\"]\n\n"
}