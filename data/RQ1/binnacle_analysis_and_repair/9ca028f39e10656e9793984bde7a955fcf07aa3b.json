{
  "startTime": 1674251857659,
  "endTime": 1674251858076,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 32,
        "lineEnd": 32,
        "columnStart": 4,
        "columnEnd": 50
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 33,
        "lineEnd": 53,
        "columnStart": 25,
        "columnEnd": 13
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# Set the python version here so that we can use it to set the base image.\nARG PYTHON_VERSION=2.7.15\n# Docker file for the Overwatch base image\n# We build from the python base image, which is based on Debian and contains many common and useful packages\nFROM python:${PYTHON_VERSION}-stretch\nLABEL maintainer=\"Raymond Ehlers <raymond.ehlers@cern.ch>, Yale University\"\n\n# Make the python version available in the container.\nARG PYTHON_VERSION\n\n# Needed to ensure that krb5-user installs successfully\n# See: https://stackoverflow.com/a/39805151\nENV DEBIAN_FRONTEND noninteractive\n# Installed neede packages\n# ROOT dependencies from https://root.cern.ch/build-prerequisites\n#   - The required dependencies span from git to python\n#   - Optional are python-dev and libssl-dev (although libssl-dev is needed for xrootd)\n#     and python-dev is required for Overwatch\n#   - We can't use gsl because the version is incompatible -> MathMore lib is disabled\n#   - npm (via nodejs) is for bower\n#   - python-pip is required for overwatch\n#   - supervisor is required for running multiple programs in docker\n#   - nginx is required to serve the webapp\n#   - zmq is required for the overwatch HLT receiver.\n#         NOTE: libzmqq3-dev is actually version 4 (ie up to date)...\n#   - libkrb5-dev and krb5-user are for kerberos (XRootD needs it for auth)\n#   - autossh for managing ssh connects for ZMQ receivers.\n#   - rsync for installing the AliEn CAs (and for Overwatch data transfers).\n# NOTE: Most of the dependencies are commented out because the python base image already\n#       has these packages installed! We keep them so we don't have to sort them out again later\n#       if the base image changes what is available.\n# NOTE: Need to setup the nodejs source before getting updates. We will install version 10.\nRUN curl -f -sL https://deb.nodesource.com/setup_10.x | bash - \\\n    && apt-get update && apt-get install --no-install-recommends -y \\\n        #git \\\n        #dpkg-dev \\\n        cmake \\\n        #g++ \\\n        #gcc \\\n        #binutils \\\n        #libx11-dev \\\n        libxpm-dev \\\n        #libxft-dev \\\n        #libxext-dev \\\n        #libpng-dev \\\n        #libjpeg-dev \\\n        #libssl-dev \\\n        nodejs \\\n        nginx \\\n        libzmq3-dev \\\n        #libkrb5-dev \\\n        krb5-user \\\n        autossh \\\n        rsync \\\n    && rm -rf /var/lib/apt/lists/*\n        # We delete the intermediate apt-get files once we are done\n\n# Install supervisor.\n# As of September 2018, the supervisor package on PyPI doesn't support python 3, so we take the master,\n# which does (but perhaps has more bugs).\nRUN /bin/bash -c 'if [[ \"${PYTHON_VERSION}\" == \"2.7\"* ]]; then pip install supervisor; else pip install git+https://github.com/Supervisor/supervisor.git#egg=supervisor; fi'\n\n# Install required packages through npm.\n# bower is required for isntalling polymer packages (should move to yarn eventually).\n# polymer-bundler is for combining polymer packages into one file for efficiency.\n# n allows updates of nodejs, which is needed for polymer-bundler.\n# We intentionally run cache clean at the end to try to reclaim as much disk space as possible.\nRUN npm install -g bower polymer-bundler n \\\n        && n lts \\\n        && npm cache clean --force\n\n# nginx configuration.\n# Explicitly configure nginx to run in the foreground and remove the default site. If we want to run it, we must run it explicitly.\nRUN echo \"daemon off;\" >> /etc/nginx/nginx.conf && rm /etc/nginx/sites-enabled/default\n\n# Setup a user so we don't have to run everything as root.\n# Many packages expect root (or at least sudo to be available), so it takes a bit more care to get things\n# setup properly. If absolutely required, one can switch back to the root user temporarily, but as of\n# Oct 2018, this shouldn't be necessary for this Dockerfile.\n# We also create the overwatch home directory since it makes installing things with python (and npm(?))\n# much easier. uid of 2143 may not follow convention, but we need to select a uid which is unlikely to\n# be used elsewhere, so we pick something far away from 500 and 1000, but not too large (which can\n# apparently trigger a docker bug).\nRUN groupadd -g 2143 overwatch \\\n        && useradd -r -u 2143 -g overwatch overwatch \\\n        && mkdir -p /home/overwatch \\\n        && chown -R overwatch:overwatch /home/overwatch\n\n# Setup directory structure\nENV SCRATCH /opt/scratch\nRUN mkdir -p ${SCRATCH} && chown -R overwatch:overwatch /opt\n\n# Once we've installed the packages and setup the proper directories, root isn't needed. So switch to a\n# less privileged user. Furthermore, we actually want to build and install as many packages as possible\n# as the less privileged user to ensure that this user can access the files. If built as root, the file\n# permissions may not be correct, which would require a chmod. chmod on many files will increase the docker\n# image size substantially, so it's best to avoid this if possible.\nUSER overwatch\n\n# Provide build scripts\nCOPY --chown=overwatch:overwatch buildScripts/*.sh ${SCRATCH}/buildScripts/\n\n# Install XRootD\nRUN mkdir -p ${SCRATCH}/xrootd && cd ${SCRATCH}/xrootd \\\n        && chmod +x ${SCRATCH}/buildScripts/buildXRootD.sh \\\n        && git clone https://github.com/xrootd/xrootd.git . \\\n        && git checkout tags/v4.8.4 \\\n        && mkdir build && cd build \\\n        && ${SCRATCH}/buildScripts/buildXRootD.sh ../ /opt/xrootd \\\n        && make -j2 install \\\n        && rm -r ${SCRATCH}/xrootd\n# Remove src and build files to keep container size down (since we can't cache the build process\n# to speed up later compilation). Someday docker might support such a volume build cache which\n# would make this split into two docker files particularly useful\n\n# Setup environment variables for the build type.\n# We set it here because we only care about the build type for ROOT (not XRootD).\n# For development, it would probably be best to be \"RelWithDebInfo\"\nARG ROOT_CMAKE_BUILD_TYPE\nENV CMAKE_BUILD_TYPE ${ROOT_CMAKE_BUILD_TYPE:-\"RELEASE\"}\n\n# Install ROOT\nRUN mkdir -p ${SCRATCH}/root && cd ${SCRATCH}/root \\\n        && chmod +x ${SCRATCH}/buildScripts/buildRoot.sh \\\n        && git clone --depth 1 --branch v6-14-06 https://github.com/root-project/root.git src \\\n        && mkdir build && cd build \\\n        && ${SCRATCH}/buildScripts/buildRoot.sh ../src /opt/root \\\n        && make -j2 install \\\n        && rm -r ${SCRATCH}/root\n# Remove src and build files to keep container size down (since we can't cache the build process\n# to speed up later compilation). Someday docker might support such a volume build cache which\n# would make this split into two docker files particularly useful\n\n# AliEn Certs needed for EOS\n# The certs are not a dependency until runtime, so we can install it after XRootD and ROOT.\n# We install them last because they are mostly likely to need the update (and we would like to\n# avoid rebuilding the above)\nRUN mkdir -p /opt/scratch/alienCAs && cd /opt/scratch/alienCAs \\\n        && git clone https://github.com/alisw/alien-cas.git . \\\n        && /opt/scratch/buildScripts/buildAlienCAs.sh /opt/scratch/alienCAs /opt/alienCAs \\\n        && rm -r /opt/scratch/alienCAs\n# Remove src and build files to keep container size down (since we can't cache the build process\n# to speed up later compilation). Someday docker might support such a volume build cache which\n# would make this split into two docker files particularly useful\n\n# Nothing further is configured here since this is just a base image!\nCMD [\"/bin/bash\"]\n"
}