{
  "startTime": 1674234570621,
  "endTime": 1674234570858,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 30,
        "lineEnd": 31,
        "columnStart": 7,
        "columnEnd": 73
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 39,
        "lineEnd": 40,
        "columnStart": 7,
        "columnEnd": 74
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 56,
        "lineEnd": 57,
        "columnStart": 7,
        "columnEnd": 127
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 84,
        "lineEnd": 84,
        "columnStart": 7,
        "columnEnd": 131
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 2,
        "lineEnd": 22,
        "columnStart": 22,
        "columnEnd": 16
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM ubuntu:disco\n\nRUN apt-get update && apt-get -y --no-install-recommends install \\\n        antlr4 \\\n        bison \\\n        build-essential \\\n        clang-8 \\\n        cmake \\\n        curl \\\n        ed \\\n        git \\\n        libantlr4-runtime-dev \\\n        libyaml-cpp-dev \\\n        llvm \\\n        locales \\\n        moreutils \\\n        ninja-build \\\n        perl \\\n        pkg-config \\\n        python3-dev \\\n        ruby-dev \\\n        tao-pegtl-dev \\\n        valgrind \\\n    && rm -rf /var/lib/apt/lists/*\n\n# Google Test\nENV GTEST_ROOT=/opt/gtest\nARG GTEST_VER=release-1.8.1\nRUN mkdir -p ${GTEST_ROOT} \\\n    && cd /tmp \\\n    && curl -f -o gtest.tar.gz \\\n      -L https://github.com/google/googletest/archive/${GTEST_VER}.tar.gz \\\n    && tar -zxvf gtest.tar.gz --strip-components=1 -C ${GTEST_ROOT} \\\n    && rm gtest.tar.gz\n\n# YAEP\nARG YAEP_VERSION=550de4cc5600d5f6109c7ebcfbacec51bf80d8d3\nRUN cd /tmp \\\n    && mkdir yaep \\\n    && curl -f -o yaep.tar.gz \\\n       -L https://github.com/vnmakarov/yaep/archive/${YAEP_VERSION}.tar.gz \\\n    && tar -zxvf yaep.tar.gz --strip-components=1 -C yaep \\\n    && cd yaep \\\n    && mkdir build \\\n    && cd build \\\n    && env CFLAGS='-fPIC' CXXFLAGS='-fPIC' cmake -DCMAKE_BUILD_TYPE=Release .. \\\n    && make install \\\n    && cd ../.. \\\n    && rm -r yaep yaep.tar.gz\n\n# Update cache for shared libraries\nRUN ldconfig\n\n# hyperfine\nARG HYPERFINE_VERSION=1.5.0\nRUN cd /tmp \\\n    && curl -f -o hyperfine.deb \\\n       -L https://github.com/sharkdp/hyperfine/releases/download/v${HYPERFINE_VERSION}/hyperfine_${HYPERFINE_VERSION}_amd64.deb \\\n    && dpkg -i hyperfine.deb \\\n    && rm hyperfine.deb\n\n# Create User:Group\n# The id is important as jenkins docker agents use the same id that is running\n# on the slaves to execute containers\nARG JENKINS_GROUPID\nRUN groupadd \\\n    -g ${JENKINS_GROUPID} \\\n    -f \\\n    jenkins\n\nARG JENKINS_USERID\nRUN useradd \\\n    --create-home \\\n    --uid ${JENKINS_USERID} \\\n    --gid ${JENKINS_GROUPID} \\\n    --shell \"/bin/bash\" \\\n    jenkins\n\nUSER ${JENKINS_USERID}\n\n# flamegraph.pl\nARG FLAME_GRAPH_PATH=/home/jenkins/bin\nENV PATH=\"${FLAME_GRAPH_PATH}:${PATH}\"\nRUN mkdir -p \"${FLAME_GRAPH_PATH}\" \\\n    && curl -f -L \"https://raw.githubusercontent.com/brendangregg/FlameGraph/master/flamegraph.pl\" -o \"${FLAME_GRAPH_PATH}/flamegraph\" \\\n    && chmod a+x \"${FLAME_GRAPH_PATH}/flamegraph\"\n"
}