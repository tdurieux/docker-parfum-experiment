{
  "startTime": 1674234968630,
  "endTime": 1674234969188,
  "originalSmells": [
    {
      "rule": "sha256sumEchoOneSpaces",
      "position": {
        "lineStart": 87,
        "lineEnd": 87,
        "columnStart": 5,
        "columnEnd": 63
      }
    },
    {
      "rule": "apkAddUseNoCache",
      "position": {
        "lineStart": 121,
        "lineEnd": 128,
        "columnStart": 5,
        "columnEnd": 10
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM docker:edge-dind\n\nRUN addgroup -g 2999 docker\n\n# From https://hub.docker.com/r/frolvlad/alpine-glibc/\nRUN ALPINE_GLIBC_BASE_URL=\"https://github.com/sgerrand/alpine-pkg-glibc/releases/download\" && \\\n  ALPINE_GLIBC_PACKAGE_VERSION=\"2.25-r0\" && \\\n  ALPINE_GLIBC_BASE_PACKAGE_FILENAME=\"glibc-$ALPINE_GLIBC_PACKAGE_VERSION.apk\" && \\\n  ALPINE_GLIBC_BIN_PACKAGE_FILENAME=\"glibc-bin-$ALPINE_GLIBC_PACKAGE_VERSION.apk\" && \\\n  ALPINE_GLIBC_I18N_PACKAGE_FILENAME=\"glibc-i18n-$ALPINE_GLIBC_PACKAGE_VERSION.apk\" && \\\n  apk add --no-cache --virtual=.build-dependencies wget ca-certificates && \\\n  apk add --no-cache python py-pip && \\\n  pip install --upgrade --no-cache-dir pip && \\\n  pip install --no-cache-dir awscli && \\\n  apk --purge del py-pip && \\\n  wget -q -O \"/etc/apk/keys/sgerrand.rsa.pub\" \"https://alpine-pkgs.sgerrand.com/sgerrand.rsa.pub\" && \\\n  wget -q \\\n  \"$ALPINE_GLIBC_BASE_URL/$ALPINE_GLIBC_PACKAGE_VERSION/$ALPINE_GLIBC_BASE_PACKAGE_FILENAME\" \\\n  \"$ALPINE_GLIBC_BASE_URL/$ALPINE_GLIBC_PACKAGE_VERSION/$ALPINE_GLIBC_BIN_PACKAGE_FILENAME\" \\\n  \"$ALPINE_GLIBC_BASE_URL/$ALPINE_GLIBC_PACKAGE_VERSION/$ALPINE_GLIBC_I18N_PACKAGE_FILENAME\" && \\\n  apk add --no-cache \\\n  \"$ALPINE_GLIBC_BASE_PACKAGE_FILENAME\" \\\n  \"$ALPINE_GLIBC_BIN_PACKAGE_FILENAME\" \\\n  \"$ALPINE_GLIBC_I18N_PACKAGE_FILENAME\" && \\\n  \\\n  rm \"/etc/apk/keys/sgerrand.rsa.pub\" && \\\n  /usr/glibc-compat/bin/localedef --force --inputfile POSIX --charmap UTF-8 C.UTF-8 || true && \\\n  echo \"export LANG=C.UTF-8\" > /etc/profile.d/locale.sh && \\\n  \\\n  apk del glibc-i18n && \\\n  \\\n  rm \"/root/.wget-hsts\" && \\\n  apk del .build-dependencies && \\\n  rm \\\n  \"$ALPINE_GLIBC_BASE_PACKAGE_FILENAME\" \\\n  \"$ALPINE_GLIBC_BIN_PACKAGE_FILENAME\" \\\n  \"$ALPINE_GLIBC_I18N_PACKAGE_FILENAME\"\n\n# The following is from docker/ruby, https://github.com/docker-library/ruby\nRUN mkdir -p /usr/local/etc \\\n  && { \\\n  echo 'install: --no-document'; \\\n  echo 'update: --no-document'; \\\n  } >> /usr/local/etc/gemrc\n\nENV RUBY_MAJOR 2.5\nENV RUBY_VERSION 2.5.1\nENV RUBY_DOWNLOAD_SHA256 886ac5eed41e3b5fc699be837b0087a6a5a3d10f464087560d2d21b3e71b754d\nENV RUBYGEMS_VERSION 2.7.6\nENV BUNDLER_VERSION 1.16.1\n\n# some of ruby's build scripts are written in ruby\n#   we purge system ruby later to make sure our final image uses what we just built\n# readline-dev vs libedit-dev: https://bugs.ruby-lang.org/issues/11869 and https://github.com/docker-library/ruby/issues/75\n# hadolint ignore=DL3003,DL3019,DL4006,SC2086\nRUN set -ex \\\n  \\\n  && apk add --no-cache --virtual .ruby-builddeps \\\n  bash \\\n  autoconf \\\n  bison \\\n  bzip2 \\\n  bzip2-dev \\\n  ca-certificates \\\n  coreutils \\\n  dpkg-dev dpkg \\\n  gcc \\\n  gdbm-dev \\\n  glib-dev \\\n  libc-dev \\\n  libffi-dev \\\n  openssl \\\n  openssl-dev \\\n  libxml2-dev \\\n  libxslt-dev \\\n  linux-headers \\\n  make \\\n  ncurses-dev \\\n  procps \\\n  readline-dev \\\n  ruby \\\n  tar \\\n  xz \\\n  yaml-dev \\\n  zlib-dev \\\n  \\\n  && wget -O ruby.tar.xz \"https://cache.ruby-lang.org/pub/ruby/${RUBY_MAJOR%-rc}/ruby-$RUBY_VERSION.tar.xz\" \\\n  && echo \"$RUBY_DOWNLOAD_SHA256  *ruby.tar.xz\" | sha256sum -c - \\\n\n  && mkdir -p /usr/src/ruby \\\n  && tar -xJf ruby.tar.xz -C /usr/src/ruby --strip-components=1 \\\n  && rm ruby.tar.xz \\\n\n  && cd /usr/src/ruby \\\n\n  # hack in \"ENABLE_PATH_CHECK\" disabling to suppress:\n  #   warning: Insecure world writable dir\n  && { \\\n  echo '#define ENABLE_PATH_CHECK 0'; \\\n  echo; \\\n  cat file.c; \\\n  } > file.c.new \\\n  && mv file.c.new file.c \\\n\n  && autoconf \\\n  && gnuArch=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" \\\n  # the configure script does not detect isnan/isinf as macros\n  && export ac_cv_func_isnan=yes ac_cv_func_isinf=yes \\\n  && ./configure \\\n  --build=\"$gnuArch\" \\\n  --disable-install-doc \\\n  --enable-shared \\\n  && make -j \"$(nproc)\" \\\n  && make install \\\n\n  && runDeps=\"$( \\\n  scanelf --needed --nobanner --format '%n#p' --recursive /usr/local \\\n  | tr ',' '\\n' \\\n  | sort -u \\\n  | awk 'system(\"[ -e /usr/local/lib/\" $1 \" ]\") == 0 { next } { print \"so:\" $1 }' \\\n  )\" \\\n  && apk add --no-cache --virtual .ruby-rundeps $runDeps \\\n  bzip2 \\\n  ca-certificates \\\n  libffi-dev \\\n  openssl-dev \\\n  procps \\\n  yaml-dev \\\n  zlib-dev \\\n  # WARNING: This is commented so that we can build gems ourselves later\n  # && apk del .ruby-builddeps \\\n  && cd / \\\n  && rm -r /usr/src/ruby \\\n\n  && gem update --system \"$RUBYGEMS_VERSION\" \\\n  && gem install bundler --version \"$BUNDLER_VERSION\" --force \\\n  && rm -r /root/.gem/\n\n# install things globally, for great justice\n# and don't create \".bundle\" in all our apps\nENV GEM_HOME /usr/local/bundle\nENV BUNDLE_PATH=\"$GEM_HOME\" \\\n  BUNDLE_BIN=\"$GEM_HOME/bin\" \\\n  BUNDLE_SILENCE_ROOT_WARNING=1 \\\n  BUNDLE_APP_CONFIG=\"$GEM_HOME\"\nENV PATH $BUNDLE_BIN:$PATH\nRUN mkdir -p \"$GEM_HOME\" \"$BUNDLE_BIN\" \\\n  && chmod 777 \"$GEM_HOME\" \"$BUNDLE_BIN\"\n\n# End docker/ruby contents\n"
}