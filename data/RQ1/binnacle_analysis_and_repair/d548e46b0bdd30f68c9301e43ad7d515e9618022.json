{
  "startTime": 1674237256966,
  "endTime": 1674237257485,
  "originalSmells": [
    {
      "rule": "yarnCacheCleanAfterInstall",
      "position": {
        "lineStart": 117,
        "lineEnd": 117,
        "columnStart": 26,
        "columnEnd": 38
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 41,
        "lineEnd": 41,
        "columnStart": 4,
        "columnEnd": 63
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 28,
        "lineEnd": 28,
        "columnStart": 4,
        "columnEnd": 70
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 41,
        "lineEnd": 41,
        "columnStart": 4,
        "columnEnd": 63
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 53,
        "lineEnd": 72,
        "columnStart": 4,
        "columnEnd": 8
      }
    }
  ],
  "repairedSmells": [
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 41,
        "lineEnd": 41,
        "columnStart": 4,
        "columnEnd": 63
      }
    }
  ],
  "repairedDockerfile": "FROM ubuntu:artful-20170916\n\n# This Dockerfile bundles several language runtimes and test frameworks into one\n# container for our acceptance tests.\n#\n# Here are some tips for keeping this file maintainable.\n#\n#   - When possible, keep commands that are slow to rebuild towards the top of\n#     the file and keep commands that change frequently towards the bottom of\n#     the file. Changing a command invalidates the build cache for all following\n#     commands.\n#\n#   - Group logical stages into one RUN command, but not when it groups a slow\n#     step that's unlikely to change with a step that's likely to change\n#     frequently.\n#\n#   - Follow the visual indentation scheme.\n#\n#   - Don't cargo cult installation instructions from the web. There are many\n#     ways to add a new APT repository, for example; we should only use one.\n#     There are many ways to invoke curl and tar; we should be consistent.\n#\n#   - Store artifacts in /opt rather than cluttering the root directory.\n#\n#   - Prefer packages from APT to packages from each language's package\n#     managers.\n\nRUN apt-get update \\\n && apt-get install --yes --no-install-recommends ca-certificates curl && rm -rf /var/lib/apt/lists/*;\n\n# The forward reference version is the oldest version from which we support\n# upgrading. The bidirectional reference version is the oldest version that we\n# support upgrading from and downgrading to.\nENV FORWARD_REFERENCE_VERSION=\"v2.0.0\"\nENV BIDIRECTIONAL_REFERENCE_VERSION=\"v2.0.0\"\nRUN mkdir /opt/forward-reference-version /opt/bidirectional-reference-version \\\n && curl -fsSL https://binaries.cockroachdb.com/cockroach-${FORWARD_REFERENCE_VERSION}.linux-amd64.tgz \\\n    | tar xz -C /opt/forward-reference-version --strip-components=1 \\\n && curl -fsSL https://binaries.cockroachdb.com/cockroach-${BIDIRECTIONAL_REFERENCE_VERSION}.linux-amd64.tgz \\\n    | tar xz -C /opt/bidirectional-reference-version --strip-components=1\n\nRUN apt-get install --yes --no-install-recommends openjdk-8-jdk \\\n && curl -fsSL https://github.com/cockroachdb/finagle-postgres/archive/94b1325270.tar.gz | tar xz \\\n && cd finagle-postgres-* \\\n && ./sbt assembly \\\n && mv target/scala-2.11/finagle-postgres-tests.jar /opt/finagle-postgres-tests.jar \\\n && rm -rf /finagle-postgres-* ~/.ivy2 && rm -rf /var/lib/apt/lists/*;\n\nRUN curl -fsSL https://dl.yarnpkg.com/debian/pubkey.gpg > /etc/apt/trusted.gpg.d/yarn.asc \\\n && echo \"deb https://dl.yarnpkg.com/debian/ stable main\" > /etc/apt/sources.list.d/yarn.list \\\n && curl -fsSL https://packages.microsoft.com/keys/microsoft.asc > /etc/apt/trusted.gpg.d/microsoft.asc \\\n && echo \"deb https://packages.microsoft.com/repos/microsoft-ubuntu-zesty-prod zesty main\" > /etc/apt/sources.list.d/microsoft.list \\\n && apt-get update \\\n && apt-get install --yes --no-install-recommends \\\n    dotnet-sdk-2.0.0 \\\n    expect \\\n    libc6-dev \\\n    libpq-dev \\\n    libpqtypes-dev \\\n    make \\\n    maven \\\n    nodejs \\\n    gcc \\\n    golang \\\n    php-cli \\\n    php-pgsql \\\n    postgresql-client \\\n    python \\\n    python-psycopg2 \\\n    ruby \\\n    ruby-pg \\\n    xmlstarlet \\\n    yarn && rm -rf /var/lib/apt/lists/*;\n\nRUN curl -fsSL https://github.com/benesch/autouseradd/releases/download/1.0.0/autouseradd-1.0.0-amd64.tar.gz \\\n    | tar xz -C /usr --strip-components 1\n\n# When system packages are not available for a language's PostgreSQL driver,\n# fall back to using that language's package manager. The high-level process\n# looks like this:\n#\n#   1. Configure the package manager to install dependencies into a system-wide\n#      location (/var/lib/...) instead of a user-specific location (/root/...).\n#      /root is not world-readable, and we want the packages to be available to\n#      non-root users.\n#\n#   2. Instruct the package manager to install the dependencies by reading\n#      whatever language-specific package manifest exists in testdata/LANG.\n#\n#   3. Either remove the package manager entirely, if it's not used to drive\n#      tests, or put it into offline mode. This ensures that future dependencies\n#      get baked into the container, lest we accidentally introduce a CI-time\n#      dependency on the remote package repository.\n\nCOPY . /testdata\n\n# Handle C# dependencies using the NuGet package manager.\nENV DOTNET_CLI_TELEMETRY_OPTOUT=1 NUGET_PACKAGES=/var/lib/nuget/packages\nRUN (cd /testdata/csharp && dotnet restore --no-cache) \\\n && xmlstarlet ed --inplace \\\n    --subnode /configuration --type elem --name packageRestore \\\n    --subnode '$prev' --type elem --name add \\\n    --insert '$prev' --type attr --name key --value enabled \\\n    --insert '$prev' --type attr --name value --value false \\\n    --delete /configuration/packageSources \\\n    ~/.nuget/NuGet/NuGet.Config\n\n# Handle Java dependencies using the Maven package manager.\nRUN xmlstarlet ed --inplace \\\n    --subnode /_:settings --type elem --name localRepository --value /var/lib/maven/repository \\\n    /usr/share/maven/conf/settings.xml \\\n && (cd /testdata/java && mvn -Dtest=NoopTest dependency:go-offline package) \\\n && xmlstarlet ed --inplace \\\n    --subnode /_:settings --type elem --name offline --value true \\\n    /usr/share/maven/conf/settings.xml\n\n# Handle Node dependencies using the Yarn package manager.\nRUN (cd /testdata/node && yarn install && mv node_modules /usr/lib/node) \\\n && apt-get purge --yes yarn && yarn cache clean;\n\nRUN apt-get purge --yes \\\n    curl \\\n    xmlstarlet \\\n && rm -rf /tmp/* /var/lib/apt/lists/* /testdata\n"
}