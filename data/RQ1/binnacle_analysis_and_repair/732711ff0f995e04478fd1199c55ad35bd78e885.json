{
  "startTime": 1674244388653,
  "endTime": 1674244388915,
  "originalSmells": [
    {
      "rule": "wgetUseHttpsUrl",
      "position": {
        "lineStart": 61,
        "lineEnd": 61,
        "columnStart": 4,
        "columnEnd": 56
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 78,
        "lineEnd": 78,
        "columnStart": 4,
        "columnEnd": 199
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 29,
        "lineEnd": 29,
        "columnStart": 4,
        "columnEnd": 71
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 51,
        "lineEnd": 51,
        "columnStart": 4,
        "columnEnd": 34
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 62,
        "lineEnd": 62,
        "columnStart": 4,
        "columnEnd": 31
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 74,
        "lineEnd": 74,
        "columnStart": 4,
        "columnEnd": 39
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 9,
        "lineEnd": 9,
        "columnStart": 4,
        "columnEnd": 46
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 9,
        "lineEnd": 9,
        "columnStart": 4,
        "columnEnd": 46
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 9,
        "lineEnd": 9,
        "columnStart": 4,
        "columnEnd": 46
      }
    }
  ],
  "repairedSmells": [
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 9,
        "lineEnd": 9,
        "columnStart": 4,
        "columnEnd": 70
      }
    }
  ],
  "repairedDockerfile": "# Start with the latest version of the Debian Docker container\nFROM debian:stretch\n\nRUN ls -la\n\n# Fetch and install all outstanding updates\nRUN apt-get update && apt-get -y upgrade\n\n# Install wget git cmake xz-utils\nRUN apt-get install --no-install-recommends -y wget git cmake xz-utils && rm -rf /var/lib/apt/lists/*;\n\n# Add a non-root user\nRUN useradd -d /home/builder -ms /bin/bash -G sudo -p builder builder\n\n# Switch to new user\nUSER builder\nWORKDIR /home/builder\n#WORKDIR /root\n\n# Don't use RPiTools because gcc is old, use linaro's toolchain\n#RUN mkdir RPiTools\n#WORKDIR RPiTools\n#RUN git clone https://github.com/raspberrypi/tools.git\n\nRUN mkdir RPiBuild\nENV WORK_ROOT=/home/builder/RPiBuild\nWORKDIR ${WORK_ROOT}\n\nRUN wget https://releases.linaro.org/components/toolchain/binaries/latest-7/arm-linux-gnueabihf/gcc-linaro-7.3.1-2018.05-x86_64_arm-linux-gnueabihf.tar.xz\nRUN tar -xvf gcc-linaro-7.3.1-2018.05-x86_64_arm-linux-gnueabihf.tar.xz && rm gcc-linaro-7.3.1-2018.05-x86_64_arm-linux-gnueabihf.tar.xz\n\n# Set up environment variables for builds\nENV TOOLCHAIN_ROOT=${WORK_ROOT}/gcc-linaro-7.3.1-2018.05-x86_64_arm-linux-gnueabihf\nENV TOOLCHAIN_SYSROOT=${TOOLCHAIN_ROOT}\nENV TOOLCHAIN_EXES=${TOOLCHAIN_SYSROOT}/bin\nENV TOOLCHAIN_NAME=arm-linux-gnueabihf\nENV TOOLCHAIN_PREFIX=${TOOLCHAIN_SYSROOT}/usr\n\nENV AR=${TOOLCHAIN_EXES}/${TOOLCHAIN_NAME}-ar\nENV AS=${TOOLCHAIN_EXES}/${TOOLCHAIN_NAME}-as\nENV CC=${TOOLCHAIN_EXES}/${TOOLCHAIN_NAME}-gcc\nENV LD=${TOOLCHAIN_EXES}/${TOOLCHAIN_NAME}-ld\nENV NM=${TOOLCHAIN_EXES}/${TOOLCHAIN_NAME}-nm\n\nENV LDFLAGS=\"-L${TOOLCHAIN_SYSROOT}/usr/lib\"\nENV LIBS=\"-lssl -lcrypto -ldl -lpthread\"\nENV TOOLCHAIN_PREFIX=${TOOLCHAIN_SYSROOT}/usr\nENV STAGING_DIR=${TOOLCHAIN_SYSROOT}\n\n# Download OpenSSL source and expand it\nRUN wget https://www.openssl.org/source/openssl-1.1.0f.tar.gz\nRUN tar -xvf openssl-1.1.0f.tar.gz && rm openssl-1.1.0f.tar.gz\n\n# Build OpenSSL\nWORKDIR openssl-1.1.0f\nRUN ./Configure linux-generic32 shared --prefix=${TOOLCHAIN_PREFIX} --openssldir=${TOOLCHAIN_PREFIX}\nRUN make\nRUN make install\nWORKDIR ..\n\n# Download cURL source and expand it\nRUN wget https://curl.haxx.se/download/curl-7.60.0.tar.gz\nRUN tar -xvf curl-7.60.0.tar.gz && rm curl-7.60.0.tar.gz\n\n# Build cURL\n# we need to set the path for openssl with --with-ssl=...\nWORKDIR curl-7.60.0\nRUN ./configure --with-sysroot=${TOOLCHAIN_SYSROOT} --prefix=${TOOLCHAIN_PREFIX} --target=${TOOLCHAIN_NAME} --with-ssl=${TOOLCHAIN_PREFIX} --with-zlib --host=${TOOLCHAIN_NAME} --build=x86_64-linux-gnu\nRUN make\nRUN make install\nWORKDIR ..\n\n# Download the Linux utilities for libuuid and expand it\nRUN wget https://mirrors.edge.kernel.org/pub/linux/utils/util-linux/v2.32/util-linux-2.32-rc2.tar.gz\nRUN tar -xvf util-linux-2.32-rc2.tar.gz && rm util-linux-2.32-rc2.tar.gz\n\n# Build uuid\nWORKDIR util-linux-2.32-rc2\nRUN ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --prefix=${TOOLCHAIN_PREFIX} --with-sysroot=${TOOLCHAIN_SYSROOT} --target=${TOOLCHAIN_NAME} --host=${TOOLCHAIN_NAME} --disable-all-programs --disable-bash-completion --enable-libuuid\nRUN make\nRUN make install\nWORKDIR ..\n\n# clone azure\nRUN git clone --recursive https://github.com/Azure/azure-iot-sdk-c.git\nWORKDIR azure-iot-sdk-c\n\n# Create a working directory for the cmake operations\nRUN mkdir cmake\nWORKDIR cmake\n\n# Create a cmake toolchain file on the fly\nRUN echo \"SET(CMAKE_SYSTEM_NAME Linux)     # this one is important\" > toolchain.cmake\nRUN echo \"SET(CMAKE_SYSTEM_VERSION 1)      # this one not so much\" >> toolchain.cmake\n\nRUN echo \"SET(CMAKE_C_COMPILER ${TOOLCHAIN_EXES}/${TOOLCHAIN_NAME}-gcc)\" >> toolchain.cmake\nRUN echo \"SET(CMAKE_CXX_COMPILER ${TOOLCHAIN_EXES}/${TOOLCHAIN_NAME}-g++)\" >> toolchain.cmake\nRUN echo \"SET(CMAKE_FIND_ROOT_PATH ${TOOLCHAIN_SYSROOT})\" >> toolchain.cmake\nRUN echo \"SET(CMAKE_FIND_ROOT_PATH_MODE_PROGRAM NEVER)\" >> toolchain.cmake\nRUN echo \"SET(CMAKE_FIND_ROOT_PATH_MODE_LIBRARY ONLY)\" >> toolchain.cmake\nRUN echo \"SET(CMAKE_FIND_ROOT_PATH_MODE_INCLUDE ONLY)\" >> toolchain.cmake\n\n# Build the SDK. This will use the OpenSSL, cURL and uuid binaries that we built before\nRUN cmake -DCMAKE_TOOLCHAIN_FILE=toolchain.cmake -Duse_prov_client:BOOL=OFF -DCMAKE_INSTALL_PREFIX=${TOOLCHAIN_PREFIX} ..\nRUN make -j 2\nRUN make install\n# or RUN cmake --build .\n\nWORKDIR ../..\n\nCMD [\"/bin/bash\"]"
}