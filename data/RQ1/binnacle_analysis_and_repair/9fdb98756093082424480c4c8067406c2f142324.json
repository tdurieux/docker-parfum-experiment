{
  "startTime": 1674249746325,
  "endTime": 1674249746523,
  "originalSmells": [
    {
      "rule": "sha256sumEchoOneSpaces",
      "position": {
        "lineStart": 44,
        "lineEnd": 44,
        "columnStart": 1,
        "columnEnd": 48
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM ubuntu:xenial\n\nARG USER_ID\nARG AUTHOR\nARG GOCRACK_PROJ\nARG HASHCAT_VER\n\nLABEL AUTHOR=${AUTHOR}\n\n# https://github.com/docker-library/golang/blob/9bf6daddb324a4d8e82b0613cf348a6eff363f95/1.10/stretch/Dockerfile\n\n# gcc for cgo\nRUN apt-get update && apt-get install -y --no-install-recommends \\\n\t\tg++ \\\n\t\tgcc \\\n\t\tlibc6-dev \\\n\t\tmake \\\n        wget \\\n        ca-certificates \\\n\t\tpkg-config \\\n        git \\\n        ocl-icd-opencl-dev \\\n\t&& rm -rf /var/lib/apt/lists/*\n\nENV GOLANG_VERSION 1.10\n\n# There is no golang ubuntu image for ubuntu:xenial :( https://github.com/docker-library/golang\nRUN set -eux; \\\n\n# this \"case\" statement is generated via \"update.sh\"\n\tdpkgArch=\"$(dpkg --print-architecture)\"; \\\n\tcase \"${dpkgArch##*-}\" in \\\n\t\tamd64) goRelArch='linux-amd64'; goRelSha256='b5a64335f1490277b585832d1f6c7f8c6c11206cba5cd3f771dcb87b98ad1a33' ;; \\\n\t\tarmhf) goRelArch='linux-armv6l'; goRelSha256='6ff665a9ab61240cf9f11a07e03e6819e452a618a32ea05bbb2c80182f838f4f' ;; \\\n\t\tarm64) goRelArch='linux-arm64'; goRelSha256='efb47e5c0e020b180291379ab625c6ec1c2e9e9b289336bc7169e6aa1da43fd8' ;; \\\n\t\ti386) goRelArch='linux-386'; goRelSha256='2d26a9f41fd80eeb445cc454c2ba6b3d0db2fc732c53d7d0427a9f605bfc55a1' ;; \\\n\t\tppc64el) goRelArch='linux-ppc64le'; goRelSha256='a1e22e2fbcb3e551e0bf59d0f8aeb4b3f2df86714f09d2acd260c6597c43beee' ;; \\\n\t\ts390x) goRelArch='linux-s390x'; goRelSha256='71cde197e50afe17f097f81153edb450f880267699f22453272d184e0f4681d7' ;; \\\n\t\t*) goRelArch='src'; goRelSha256='f3de49289405fda5fd1483a8fe6bd2fa5469e005fd567df64485c4fa000c7f24'; \\\n\t\t\techo >&2; echo >&2 \"warning: current architecture ($dpkgArch) does not have a corresponding Go binary release; will be building from source\"; echo >&2 ;; \\\n\tesac; \\\n\n\turl=\"https://golang.org/dl/go${GOLANG_VERSION}.${goRelArch}.tar.gz\"; \\\n\twget -O go.tgz \"$url\"; \\\n\techo \"${goRelSha256}  *go.tgz\" | sha256sum -c -; \\\n\ttar -C /usr/local -xzf go.tgz; \\\n\trm go.tgz; \\\n\n\tif [ \"$goRelArch\" = 'src' ]; then \\\n\t\techo >&2; \\\n\t\techo >&2 'error: UNIMPLEMENTED'; \\\n\t\techo >&2 'TODO install golang-any from jessie-backports for GOROOT_BOOTSTRAP (and uninstall after build)'; \\\n\t\techo >&2; \\\n\t\texit 1; \\\n\tfi; \\\n\n\texport PATH=\"/usr/local/go/bin:$PATH\"; \\\n\tgo version\n\nRUN echo \"/usr/local/cuda/lib64\" >> /etc/ld.so.conf.d/cuda.conf && \\\n    ldconfig\n\n# nvidia-docker 1.0\nLABEL com.nvidia.volumes.needed=\"nvidia_driver\"\n\nRUN echo \"/usr/local/nvidia/lib\" >> /etc/ld.so.conf.d/nvidia.conf && \\\n    echo \"/usr/local/nvidia/lib64\" >> /etc/ld.so.conf.d/nvidia.conf\n\nENV PATH /usr/local/nvidia/bin:/usr/local/cuda/bin:${PATH}\nENV LD_LIBRARY_PATH /usr/local/nvidia/lib:/usr/local/nvidia/lib64\n\nENV GOPATH /go\nENV PATH $GOPATH/bin:/usr/local/go/bin:$PATH\n\nCOPY external/hashcat/deps/OpenCL-Headers/CL /usr/local/include/CL\nCOPY external/hashcat/include /usr/local/include/hashcat\nCOPY dist/hashcat/lib/libhashcat.so /usr/local/lib/\n\nRUN mkdir -p \"$GOPATH/src\" \"$GOPATH/bin\"\nWORKDIR $GOPATH/src/$GOCRACK_PROJ\n\nRUN useradd --non-unique --uid $USER_ID build\nUSER build\n\nENV HASHCAT_VER=$HASHCAT_VER\n\nCMD [\"make\", \"BINDIR=/out\"]\n"
}