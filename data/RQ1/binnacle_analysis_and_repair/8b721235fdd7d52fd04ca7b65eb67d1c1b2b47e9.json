{
  "startTime": 1674252552280,
  "endTime": 1674252552415,
  "originalSmells": [
    {
      "rule": "apkAddUseNoCache",
      "position": {
        "lineStart": 34,
        "lineEnd": 34,
        "columnStart": 4,
        "columnEnd": 31
      }
    },
    {
      "rule": "apkAddUseNoCache",
      "position": {
        "lineStart": 35,
        "lineEnd": 35,
        "columnStart": 4,
        "columnEnd": 24
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# To build, run in root of tegola source tree:\n#  1. git clone git@github.com:go-spatial/tegola.git or git clone https://github.com/go-spatial/tegola.git\n#  2. cd tegola\n#  3. docker build -f docker/Dockerfile -t gospatial/tegola:<version> .\n#\n# To use with local files, add file data sources (i.e. Geopackages) and config as config.toml to a\n#\tlocal directory and mount that directory as a volume at /opt/tegola_config/.  Examples:\n#\n# To display command-line options available:\n#  1. `docker run --rm tegola /opt/tegola -h`\n#\n# Example PostGIS use w/ http-based config:\n#  1. `docker run -p 8080 tegola /opt/tegola --config http://my-domain.com/config serve`\n#\n# Example PostGIS use w/ local config:\n#  1. `mkdir docker-config`\n#  2. `cp my-config-file docker-config/config.toml`\n#  3. `docker run -v /path/to/docker-config:/opt/tegola_config -p 8080 tegola serve`\n#\n# Example gpkg use:\n#  1. `mkdir docker-config`\n#  2. `cp my-config-file docker-config/config.toml`\n#  3. `cp my-db.gpkg docker-config/`\n#  4. update docker-config/config.toml with my-db.gpkg located at /opt/tegola_config/my-db.gpkg\n#  5. `docker run -v /path/to/docker-config:/opt/tegola_config -p 8080 tegola serve`\n\n\n# --- Build the binary\nFROM golang:1.11.0-alpine3.8 AS build\n\n# Only needed for CGO support at time of build, results in no noticable change in binary size\n# incurs approximately 1:30 extra build time (1:54 vs 0:27) to install packages.  Doesn't impact\n# development as these layers are drawn from cache after the first build.\nRUN apk update \\\n\t&& apk add --no-cache musl-dev=1.1.19-r10 \\\n\t&& apk add --no-cache gcc=6.4.0-r9\n\n# Set up source for compilation\nRUN mkdir -p /go/src/github.com/go-spatial/tegola\nCOPY . /go/src/github.com/go-spatial/tegola\n\n# Build binary\nRUN cd /go/src/github.com/go-spatial/tegola/cmd/tegola \\\n\t&& go build -v {{.flags}} -gcflags \"-N -l\" -o /opt/tegola \\ \n\t&& chmod a+x /opt/tegola\n\n# --- Create minimal deployment image, just alpine & the binary\nFROM alpine:3.8\n\nRUN apk update \\\n\t&& apk add ca-certificates \\\n\t&& rm -rf /var/cache/apk/*\n\nLABEL maintainer=\"{{.maintainer}}\"\nLABEL io.go-spatial.version=\"{{.version}}\"\n\nCOPY --from=build /opt/tegola /opt/\nWORKDIR /opt\nENTRYPOINT [\"/opt/tegola\"]"
}