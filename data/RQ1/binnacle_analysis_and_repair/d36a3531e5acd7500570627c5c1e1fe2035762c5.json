{
  "startTime": 1674235202109,
  "endTime": 1674235202473,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 45,
        "lineEnd": 45,
        "columnStart": 4,
        "columnEnd": 105
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 191,
        "lineEnd": 191,
        "columnStart": 4,
        "columnEnd": 39
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 200,
        "lineEnd": 200,
        "columnStart": 4,
        "columnEnd": 33
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 203,
        "lineEnd": 203,
        "columnStart": 4,
        "columnEnd": 27
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 161,
        "lineEnd": 161,
        "columnStart": 4,
        "columnEnd": 15
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 42,
        "lineEnd": 42,
        "columnStart": 4,
        "columnEnd": 129
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 49,
        "lineEnd": 49,
        "columnStart": 4,
        "columnEnd": 55
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 42,
        "lineEnd": 42,
        "columnStart": 4,
        "columnEnd": 129
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 49,
        "lineEnd": 49,
        "columnStart": 4,
        "columnEnd": 55
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 8,
        "lineEnd": 37,
        "columnStart": 22,
        "columnEnd": 13
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 42,
        "lineEnd": 42,
        "columnStart": 4,
        "columnEnd": 129
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 49,
        "lineEnd": 49,
        "columnStart": 4,
        "columnEnd": 55
      }
    }
  ],
  "repairedSmells": [
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 42,
        "lineEnd": 42,
        "columnStart": 4,
        "columnEnd": 153
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 49,
        "lineEnd": 49,
        "columnStart": 4,
        "columnEnd": 79
      }
    }
  ],
  "repairedDockerfile": "# Need devel version cause we need /usr/include/cudnn.h\n# for compiling libctc_decoder_with_kenlm.so\nFROM nvidia/cuda:10.0-cudnn7-devel-ubuntu18.04\n\n\n# >> START Install base software\n\n# Get basic packages\nRUN apt-get update && apt-get install -y --no-install-recommends \\\n        build-essential \\\n        curl \\\n        wget \\\n        git \\\n        python3 \\\n        python3-dev \\\n        python3-pip \\\n        python3-wheel \\\n        python3-numpy \\\n        libcurl3-dev  \\\n        ca-certificates \\\n        gcc \\\n        sox \\\n        libsox-fmt-mp3 \\\n        htop \\\n        nano \\\n        swig \\\n        cmake \\\n        libboost-all-dev \\\n        zlib1g-dev \\\n        libbz2-dev \\\n        liblzma-dev \\\n        locales \\\n        pkg-config \\\n        libsox-dev \\\n        openjdk-8-jdk \\\n        bash-completion \\\n        g++ \\\n        unzip && rm -rf /var/lib/apt/lists/*;\n\nRUN ln -s -f /usr/bin/python3 /usr/bin/python\n\n# Install NCCL 2.2\nRUN apt-get install --no-install-recommends -qq -y --allow-downgrades --allow-change-held-packages libnccl2=2.3.7-1+cuda10.0 libnccl-dev=2.3.7-1+cuda10.0 && rm -rf /var/lib/apt/lists/*;\n\n# Install Bazel\nRUN curl -f -LO \"https://github.com/bazelbuild/bazel/releases/download/0.19.2/bazel_0.19.2-linux-x86_64.deb\"\nRUN dpkg -i bazel_*.deb\n\n# Install CUDA CLI Tools\nRUN apt-get install --no-install-recommends -qq -y cuda-command-line-tools-10-0 && rm -rf /var/lib/apt/lists/*;\n\n# Install pip\nRUN wget https://bootstrap.pypa.io/get-pip.py && \\\n    python3 get-pip.py && \\\n    rm get-pip.py\n\n# << END Install base software\n\n\n\n\n# >> START Configure Tensorflow Build\n\n# Clone TensoFlow from Mozilla repo\nRUN git clone https://github.com/mozilla/tensorflow/\nWORKDIR /tensorflow\nRUN git checkout r1.13\n\n\n# GPU Environment Setup\nENV TF_NEED_CUDA 1\nENV CUDA_TOOLKIT_PATH /usr/local/cuda\nENV TF_CUDA_VERSION 10.0\nENV TF_CUDNN_VERSION 7\nENV CUDNN_INSTALL_PATH /usr/lib/x86_64-linux-gnu/\nENV TF_CUDA_COMPUTE_CAPABILITIES 6.0\nENV TF_NCCL_VERSION 2.3\n# ENV NCCL_INSTALL_PATH /usr/lib/x86_64-linux-gnu/\n\n# Common Environment Setup\nENV TF_BUILD_CONTAINER_TYPE GPU\nENV TF_BUILD_OPTIONS OPT\nENV TF_BUILD_DISABLE_GCP 1\nENV TF_BUILD_ENABLE_XLA 0\nENV TF_BUILD_PYTHON_VERSION PYTHON3\nENV TF_BUILD_IS_OPT OPT\nENV TF_BUILD_IS_PIP PIP\n\n# Other Parameters\nENV CC_OPT_FLAGS -mavx -mavx2 -msse4.1 -msse4.2 -mfma\nENV TF_NEED_GCP 0\nENV TF_NEED_HDFS 0\nENV TF_NEED_JEMALLOC 1\nENV TF_NEED_OPENCL 0\nENV TF_CUDA_CLANG 0\nENV TF_NEED_MKL 0\nENV TF_ENABLE_XLA 0\nENV TF_NEED_AWS 0\nENV TF_NEED_KAFKA 0\nENV TF_NEED_NGRAPH 0\nENV TF_DOWNLOAD_CLANG 0\nENV TF_NEED_TENSORRT 0\nENV TF_NEED_GDR 0\nENV TF_NEED_VERBS 0\nENV TF_NEED_OPENCL_SYCL 0\nENV PYTHON_BIN_PATH /usr/bin/python3.6\nENV PYTHON_LIB_PATH /usr/lib/python3.6/dist-packages\n\n# << END Configure Tensorflow Build\n\n\n\n\n# >> START Configure Bazel\n\n# Running bazel inside a `docker build` command causes trouble, cf:\n#   https://github.com/bazelbuild/bazel/issues/134\n# The easiest solution is to set up a bazelrc file forcing --batch.\nRUN echo \"startup --batch\" >>/etc/bazel.bazelrc\n# Similarly, we need to workaround sandboxing issues:\n#   https://github.com/bazelbuild/bazel/issues/418\nRUN echo \"build --spawn_strategy=standalone --genrule_strategy=standalone\" \\\n    >>/etc/bazel.bazelrc\n\n# Put cuda libraries to where they are expected to be\nRUN mkdir /usr/local/cuda/lib &&  \\\n    ln -s /usr/lib/x86_64-linux-gnu/libnccl.so.2 /usr/local/cuda/lib/libnccl.so.2 && \\\n    ln -s /usr/include/nccl.h /usr/local/cuda/include/nccl.h && \\\n    ln -s /usr/local/cuda/lib64/stubs/libcuda.so /usr/local/cuda/lib64/stubs/libcuda.so.1 && \\\n    ln -s /usr/include/cudnn.h /usr/local/cuda/include/cudnn.h\n\n\n# Set library paths\nENV LD_LIBRARY_PATH $LD_LIBRARY_PATH:/usr/local/cuda/extras/CUPTI/lib64:/usr/local/cuda/lib64:/usr/lib/x86_64-linux-gnu/:/usr/local/cuda/lib64/stubs/\n\n# << END Configure Bazel\n\n\n# Copy DeepSpeech repo contents to container's /DeepSpeech\nCOPY . /DeepSpeech/\n\n# Alternative clone from GitHub\n# RUN apt-get update && apt-get install -y git-lfs\n# WORKDIR /\n# RUN git clone https://github.com/mozilla/DeepSpeech.git\n\nWORKDIR /DeepSpeech\n\nRUN pip3 --no-cache-dir install -r requirements.txt\n\n# Link DeepSpeech native_client libs to tf folder\nRUN ln -s /DeepSpeech/native_client /tensorflow\n\n\n\n\n# >> START Build and bind\n\nWORKDIR /tensorflow\n\n# Fix for not found script https://github.com/tensorflow/tensorflow/issues/471\nRUN ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\"\n\n# Using CPU optimizations:\n# -mtune=generic -march=x86-64 -msse -msse2 -msse3 -msse4.1 -msse4.2 -mavx.\n# Adding --config=cuda flag to build using CUDA.\n\n# passing LD_LIBRARY_PATH is required cause Bazel doesn't pickup it from environment\n\n\n# Build DeepSpeech\nRUN bazel build --config=monolithic --config=cuda -c opt --copt=-O3 --copt=\"-D_GLIBCXX_USE_CXX11_ABI=0\" --copt=-mtune=generic --copt=-march=x86-64 --copt=-msse --copt=-msse2 --copt=-msse3 --copt=-msse4.1 --copt=-msse4.2 --copt=-mavx --copt=-fvisibility=hidden //native_client:libdeepspeech.so //native_client:generate_trie --verbose_failures --action_env=LD_LIBRARY_PATH=${LD_LIBRARY_PATH}\n\n###\n### Using TensorFlow upstream should work\n###\n# # Build TF pip package\n# RUN bazel build --config=opt --config=cuda --copt=\"-D_GLIBCXX_USE_CXX11_ABI=0\" --copt=-mtune=generic --copt=-march=x86-64 --copt=-msse --copt=-msse2 --copt=-msse3 --copt=-msse4.1 --copt=-msse4.2 --copt=-mavx //tensorflow/tools/pip_package:build_pip_package --verbose_failures --action_env=LD_LIBRARY_PATH=${LD_LIBRARY_PATH}\n#\n# # Build wheel\n# RUN bazel-bin/tensorflow/tools/pip_package/build_pip_package /tmp/tensorflow_pkg\n#\n# # Install tensorflow from our custom wheel\n# RUN pip3 install /tmp/tensorflow_pkg/*.whl\n\n# Copy built libs to /DeepSpeech/native_client\nRUN cp /tensorflow/bazel-bin/native_client/generate_trie /DeepSpeech/native_client/ \\\n    && cp /tensorflow/bazel-bin/native_client/libdeepspeech.so /DeepSpeech/native_client/\n\n# Install TensorFlow\nWORKDIR /DeepSpeech/\nRUN pip3 install --no-cache-dir tensorflow-gpu==1.13.1\n\n\n# Make DeepSpeech and install Python bindings\nENV TFDIR /tensorflow\nWORKDIR /DeepSpeech/native_client\nRUN make deepspeech\nWORKDIR /DeepSpeech/native_client/python\nRUN make bindings\nRUN pip3 install --no-cache-dir dist/deepspeech*\nWORKDIR /DeepSpeech/native_client/ctcdecode\nRUN make\nRUN pip3 install --no-cache-dir dist/*.whl\n\n\n# << END Build and bind\n\n\n\n\n# Allow Python printing utf-8\nENV PYTHONIOENCODING UTF-8\n\n# Build KenLM in /DeepSpeech/native_client/kenlm folder\nWORKDIR /DeepSpeech/native_client\nRUN rm -rf kenlm \\\n    && git clone --depth 1 https://github.com/kpu/kenlm && cd kenlm \\\n    && mkdir -p build \\\n    && cd build \\\n    && cmake .. \\\n    && make -j 4\n\n# Done\nWORKDIR /DeepSpeech\n"
}