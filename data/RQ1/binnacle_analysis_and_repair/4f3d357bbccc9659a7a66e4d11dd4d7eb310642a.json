{
  "startTime": 1674241366671,
  "endTime": 1674241367623,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 64,
        "lineEnd": 64,
        "columnStart": 4,
        "columnEnd": 114
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 69,
        "lineEnd": 69,
        "columnStart": 4,
        "columnEnd": 199
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 69,
        "lineEnd": 69,
        "columnStart": 98,
        "columnEnd": 174
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 74,
        "lineEnd": 74,
        "columnStart": 4,
        "columnEnd": 110
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 82,
        "lineEnd": 82,
        "columnStart": 4,
        "columnEnd": 144
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 196,
        "lineEnd": 196,
        "columnStart": 4,
        "columnEnd": 53
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 211,
        "lineEnd": 211,
        "columnStart": 4,
        "columnEnd": 122
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 212,
        "lineEnd": 212,
        "columnStart": 4,
        "columnEnd": 125
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 213,
        "lineEnd": 213,
        "columnStart": 4,
        "columnEnd": 126
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 214,
        "lineEnd": 214,
        "columnStart": 4,
        "columnEnd": 107
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 215,
        "lineEnd": 215,
        "columnStart": 4,
        "columnEnd": 146
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 76,
        "lineEnd": 76,
        "columnStart": 4,
        "columnEnd": 25
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 17,
        "lineEnd": 17,
        "columnStart": 25,
        "columnEnd": 55
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 23,
        "lineEnd": 41,
        "columnStart": 22,
        "columnEnd": 3
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 17,
        "lineEnd": 17,
        "columnStart": 25,
        "columnEnd": 55
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 23,
        "lineEnd": 41,
        "columnStart": 22,
        "columnEnd": 3
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "ARG GOLANG_VERSION=1.12.3\nARG RUST_VERSION=1.35.0\nARG TERRAFORM_VERSION=0.12.1\nARG DEBIAN_BUSTER_HASH=sha256:9646b0ee6d68448e09cdee7ac8deb336e519113e5717ec0856d38ca813912930\nARG DEBIAN_SID_HASH=sha256:fc6ae865d58728644a7242375b777a03c8933600c0aff9df491e745b15ba9d3e\nARG SSH_HOST_KEYS_HASH=sha256:9a6630c2fbed11a3f806c5a5c1fe1550b628311d8701680fd740cae94b377e6c\n\n## golang tools\nFROM golang:$GOLANG_VERSION as golang_builder\nRUN go get github.com/genuinetools/reg\nRUN go get github.com/golang/dep/cmd/dep\nRUN GO111MODULE=on go get github.com/wagoodman/dive@v0.7.2\nRUN GO111MODULE=on go get github.com/sachaos/todoist@v0.13.1\nRUN GO111MODULE=on go get github.com/screwdriver-cd/gitversion@v1.1.2\n\n# vim-go dependencies\nFROM golang:$GOLANG_VERSION as vimgo_deps\nRUN apt-get update -q && apt-get install --no-install-recommends -y -qq vim-nox && rm -rf /var/lib/apt/lists/*;\nRUN git clone https://github.com/fatih/vim-go.git /root/.vim/pack/lang/start/vim-go\nRUN vim +\":set nomore\" +GoInstallBinaries +qall\n\n# rust tools\nFROM debian:sid@$DEBIAN_SID_HASH as rust_builder\nRUN apt-get update && apt-get install --no-install-recommends \\\n\tbuild-essential \\\n\tca-certificates \\\n\tcargo \\\n\tcmake \\\n\tdefault-libmysqlclient-dev \\\n\tlibclang-dev \\\n\tliblzma-dev \\\n\tliblzma-dev \\\n\tlibpq-dev \\\n\tlibsqlite3-dev \\\n\tlibssl-dev \\\n\tlibssl-dev \\\n\tpkg-config \\\n\trustc \\\n\trust-src \\\n\tzlib1g-dev \\\n\tzlib1g-dev \\\n\t-y && rm -rf /var/lib/apt/lists/*;\nRUN cargo install --root /opt/rust-tools bat\nRUN cargo install --root /opt/rust-tools cargo-bloat\nRUN cargo install --root /opt/rust-tools cargo-bump\nRUN cargo install --root /opt/rust-tools cargo-bundle\nRUN cargo install --root /opt/rust-tools cargo-deb\nRUN cargo install --root /opt/rust-tools cargo-debstatus\nRUN cargo install --root /opt/rust-tools cargo-edit\nRUN cargo install --root /opt/rust-tools cargo-expand\nRUN cargo install --root /opt/rust-tools cargo-generate\nRUN cargo install --root /opt/rust-tools cargo-license\nRUN cargo install --root /opt/rust-tools cargo-release\nRUN cargo install --root /opt/rust-tools cargo-tree\nRUN cargo install --root /opt/rust-tools cargo-watch\nRUN cargo install --root /opt/rust-tools cargo-web\nRUN cargo install --root /opt/rust-tools diesel_cli\nRUN cargo install --root /opt/rust-tools perf-focus\nRUN cargo install --root /opt/rust-tools sccache\nRUN cargo install --root /opt/rust-tools systemfd\nRUN cargo install --root /opt/rust-tools wasm-pack\n\n# install terraform\nFROM qmxme/curl as terraform_builder\nRUN curl -f -L -o /tmp/terraform.zip https://releases.hashicorp.com/terraform/0.12.1/terraform_0.12.1_linux_amd64.zip\nRUN cd /usr/local/bin && unzip /tmp/terraform.zip && chmod 755 /usr/local/bin/terraform\n\n# install kubectl\nFROM qmxme/curl as kubectl_builder\nRUN curl -f -L -o /usr/local/bin/kubectl https://storage.googleapis.com/kubernetes-release/release/$( curl -f -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/amd64/kubectl\nRUN chmod 755 /usr/local/bin/kubectl\n\n# install helm\nFROM qmxme/curl as helm_builder\nRUN curl -f -L -o /tmp/helm.tar.gz https://storage.googleapis.com/kubernetes-helm/helm-v2.13.0-linux-amd64.tar.gz\nWORKDIR /tmp\nRUN tar -zxvf helm.tar.gz && rm helm.tar.gz\nRUN cp linux-amd64/helm /usr/local/bin\nRUN cp linux-amd64/tiller /usr/local/bin\n\n# install docker-compose\nFROM qmxme/curl as compose_builder\nRUN curl -f -L \"https://github.com/docker/compose/releases/download/1.23.2/docker-compose-$(uname -s)-$(uname -m)\" -o /usr/local/bin/docker-compose\nRUN chmod 755 /usr/local/bin/docker-compose\n\n# SSH host keys\nFROM qmxme/openssh@$SSH_HOST_KEYS_HASH as ssh_host_keys\n\n\n# base distro\nFROM debian:sid@$DEBIAN_SID_HASH\n\n# setup env\nENV DEBIAN_FRONTEND noninteractive\nENV TERM linux\n\nENV LANGUAGE en_US.UTF-8\nENV LANG en_US.UTF-8\nENV LC_ALL en_US.UTF-8\nENV LC_CTYPE en_US.UTF-8\nENV LC_MESSAGES en_US.UTF-8\n\n# default package set\nRUN apt-get update -qq && apt-get upgrade -y && apt-get install -qq -y \\\n\tapache2-utils \\\n\tapt-transport-https \\\n\tbuild-essential \\\n\tca-certificates \\\n\tcargo \\\n\tclang \\\n\tcmake \\\n\tcurl \\\n\tdebcargo \\\n\tdefault-libmysqlclient-dev \\\n\tdefault-mysql-client \\\n\tdirenv \\\n\tdnsutils \\\n\tdocker.io \\\n\tentr \\\n\texuberant-ctags \\\n\tfakeroot-ng \\\n\tflake8 \\\n\tfzf \\\n\tgdb \\\n\tgit \\\n\tgit-crypt \\\n\tgnupg \\\n\tgolang-1.12 \\\n\thtop \\\n\thub \\\n\thugo \\\n\tipcalc \\\n\tjq \\\n\tkafkacat \\\n\tless \\\n\tlibclang-dev \\\n\tliblzma-dev \\\n\tlibpq-dev \\\n\tlibprotoc-dev \\\n\tlibrdkafka-dev \\\n\tlibsqlite3-dev \\\n\tlibssl-dev \\\n\tlldb \\\n\tlocales \\\n\tman \\\n\tmosh \\\n\tmtr-tiny \\\n\tmusl-tools \\\n\tncdu \\\n\tnetcat-openbsd \\\n\tnodejs \\\n\tnpm \\\n\topenjdk-11-jdk-headless \\\n\topenssh-server \\\n\tpkg-config \\\n\tprotobuf-compiler \\\n\tpwgen \\\n\tpython \\\n\tpython3 \\\n\tpython3-flake8 \\\n\tpython3-pip \\\n\tpython3-setuptools \\\n\tpython3-venv \\\n\tpython3-wheel \\\n\tqrencode \\\n\tquilt \\\n\tredis-server \\\n\trestic \\\n\tripgrep \\\n\trsync \\\n\trustc \\\n\trust-src \\\n\tshellcheck \\\n\tsocat \\\n\tsqlite3 \\\n\tstow \\\n\tstrace \\\n\tsudo \\\n\ttmate \\\n\ttmux \\\n\tunzip \\\n\tvim-nox \\\n\twabt \\\n\tzgen \\\n\tzip \\\n\tzlib1g-dev \\\n\tzsh \\\n\t--no-install-recommends \\\n\t&& rm -rf /var/lib/apt/lists/*\n\nRUN echo \"en_US.UTF-8 UTF-8\" > /etc/locale.gen && \\\n\tlocale-gen --purge $LANG && \\\n\tdpkg-reconfigure --frontend=noninteractive locales && \\\n\tupdate-locale LANG=$LANG LC_ALL=$LC_ALL LANGUAGE=$LANGUAGE\n\n# enable yarn repo\nRUN curl -f -sS https://dl.yarnpkg.com/debian/pubkey.gpg | apt-key add -\nRUN echo \"deb https://dl.yarnpkg.com/debian/ stable main\" > /etc/apt/sources.list.d/yarn.list\nRUN apt-get update -qq && apt-get install -qq -y \\\n\tyarn \\\n\t--no-install-recommends \\\n\t&& rm -rf /var/lib/apt/lists/*\n\n# sshd setup\nRUN mkdir /var/run/sshd\nRUN sed 's@session\\s*required\\s*pam_loginuid.so@session optional pam_loginuid.so@g' -i /etc/pam.d/sshd\nRUN sed 's/#Port 22/Port 3222/' -i /etc/ssh/sshd_config\nRUN echo 'StreamLocalBindUnlink yes' >> /etc/ssh/sshd_config\nCOPY --from=ssh_host_keys /etc/ssh/ssh_host* /etc/ssh/\n\n# rust tools\nRUN curl -f -L -o /tmp/cpubars_0.2.1_amd64.deb https://github.com/qmx/cpubars/releases/download/0.2.1/cpubars_0.2.1_amd64.deb && dpkg -i /tmp/cpubars_0.2.1_amd64.deb && rm /tmp/*.deb\nRUN curl -f -L -o /tmp/marinara_0.2.0_amd64.deb https://github.com/qmx/marinara/releases/download/0.2.0/marinara_0.2.0_amd64.deb && dpkg -i /tmp/marinara_0.2.0_amd64.deb && rm /tmp/*.deb\nRUN curl -f -L -o /tmp/jump_0.22.0_amd64.deb https://github.com/gsamokovarov/jump/releases/download/v0.22.0/jump_0.22.0_amd64.deb && dpkg -i /tmp/jump_0.22.0_amd64.deb && rm /tmp/*.deb\nRUN curl -f -L -o /tmp/wk_0.1.1_amd64.deb https://github.com/qmx/wk/releases/download/0.1.1/wk_0.1.1_amd64.deb && dpkg -i /tmp/wk_0.1.1_amd64.deb && rm /tmp/*.deb\nRUN curl -f -L -o /tmp/cargo-docserver_0.1.2_amd64.deb https://github.com/qmx/cargo-docserver/releases/download/0.1.2/cargo-docserver_0.1.2_amd64.deb && dpkg -i /tmp/cargo-docserver_0.1.2_amd64.deb && rm /tmp/*.deb\n\n# rust essential crates\nCOPY --from=rust_builder /opt/rust-tools/bin/* /usr/local/bin/\n\n# golang tools\nCOPY --from=golang_builder /go/bin/* /usr/local/bin/\n\n# vim-go tools\nCOPY --from=vimgo_deps /go/bin/* /usr/local/bin/\n\n# terraform\nCOPY --from=terraform_builder /usr/local/bin/terraform /usr/local/bin/\n\n# kubectl\nCOPY --from=kubectl_builder /usr/local/bin/kubectl /usr/local/bin/\n\n# helm\nCOPY --from=helm_builder /usr/local/bin/helm /usr/local/bin/tiller /usr/local/bin/\n\n# docker-compose\nCOPY --from=compose_builder /usr/local/bin/docker-compose /usr/local/bin/\n\n# user setup\nARG user=qmx\nARG uid=1000\nARG github_user=qmx\nRUN useradd -m $user -u $uid -G users,sudo,docker -s /bin/zsh\nUSER $user\nRUN mkdir ~/.ssh && curl -fsL https://github.com/$github_user.keys > ~/.ssh/authorized_keys && chmod 700 ~/.ssh && chmod 600 ~/.ssh/authorized_keys\n\n# some empty folders, with proper permissions\nRUN mkdir -p ~/bin ~/.cargo/bin ~/.config ~/tmp ~/.gnupg ~/.local ~/.vim && chmod 700 ~/.gnupg\n\n# dotfile setup\nRUN git clone --recursive https://github.com/qmx/dotfiles.git ~/.dotfiles\nRUN cd ~/.dotfiles && stow -v .\n\n# install rust\nRUN curl -sSf https://sh.rustup.rs | zsh -s -- -y --default-toolchain none\nRUN /home/$user/.cargo/bin/rustup toolchain link system /usr\nRUN /home/$user/.cargo/bin/rustup default system\n\n# make sure we start sshd at the end - always keep this at the bottom\nUSER root\nEXPOSE 3222\nADD entrypoint.sh /entrypoint.sh\nENTRYPOINT [\"/entrypoint.sh\"]\nCMD [\"/usr/sbin/sshd\", \"-D\"]\n"
}