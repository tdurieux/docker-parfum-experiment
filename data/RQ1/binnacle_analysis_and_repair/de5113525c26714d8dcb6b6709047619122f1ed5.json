{
  "startTime": 1674236141872,
  "endTime": 1674236142052,
  "originalSmells": [
    {
      "rule": "yarnCacheCleanAfterInstall",
      "position": {
        "lineStart": 11,
        "lineEnd": 11,
        "columnStart": 4,
        "columnEnd": 32
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 61,
        "lineEnd": 61,
        "columnStart": 4,
        "columnEnd": 30
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 64,
        "lineEnd": 64,
        "columnStart": 7,
        "columnEnd": 32
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 65,
        "lineEnd": 65,
        "columnStart": 7,
        "columnEnd": 36
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 66,
        "lineEnd": 66,
        "columnStart": 7,
        "columnEnd": 30
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 67,
        "lineEnd": 67,
        "columnStart": 7,
        "columnEnd": 40
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# Use node base image\nFROM node:latest AS build\nENV NODE_ENV=development\n\n# Create a working app directory\nWORKDIR /app\n\n# Copy the package.json file into app directory to install the npm packages\nCOPY ./package.json /app\n\n# Install all the npm packages\nRUN yarn install --pure-lockfile && yarn cache clean;\n\n# Copy all the files of the project into the app directory\nCOPY . /app\n\n# Run the yarn run build script\nRUN yarn build\n\n# Base image that is derived from alpine and has R installed as a shared library\nFROM achillesrasquinha/rpy2\n\n# Add label for metadata\nLABEL maintainer achillesrasquinha@gmail.com\n\n# Install dependencies\nRUN apk update \\\n\t&& apk --no-cache add \\\n\tbuild-base \\\n\tgit \\\n\tpython3-dev \\\n\tpython3-tkinter \\\n\tgraphviz-dev \\\n\tcurl \\\n\tpostgresql-dev \\\n\tfreetype-dev \\\n\topenblas-dev\n\n# Install Java\nRUN { \\\n\techo '#!/bin/sh'; \\\n\techo 'set -e'; \\\n\techo; \\\n\techo 'dirname \"$(dirname \"$(readlink -f \"$(which javac || which java)\")\")\"'; \\\n\t} > /usr/local/bin/docker-java-home \\\n\t&& chmod +x /usr/local/bin/docker-java-home\n\nENV JAVA_HOME=/usr/lib/jvm/java-1.8-openjdk \\\n    PATH=$PATH:/usr/lib/jvm/java-1.8-openjdk/jre/bin:/usr/lib/jvm/java-1.8-openjdk/bin \\\n    JAVA_VERSION=8u212 \\\n    JAVA_ALPINE_VERSION=8.212.04-r0\n\nRUN set -x \\\n\t&& apk add --no-cache \\\n\topenjdk8=\"$JAVA_ALPINE_VERSION\" \\\n\t&& [ \"$JAVA_HOME\" = \"$(docker-java-home)\" ]\n\n# Copy the pip requirements file into the container\nCOPY ./requirements.txt  /requirements.txt\n\n# Install pip packages\nRUN pip3 install --no-cache-dir --upgrade pip \\\n    && echo \"http://dl-8.alpinelinux.org/alpine/edge/community\" >> /etc/apk/repositories \\\n    && ln -s /usr/include/locale.h /usr/include/xlocale.h \\\n    && pip3 install --no-cache-dir numpy pyyaml \\\n    && pip3 install --no-cache-dir setuptools wheel \\\n    && pip3 install --no-cache-dir javabridge \\\n    && pip3 install --no-cache-dir -r /requirements.txt \\\n    && rm /requirements.txt\n\n# Work in the app directory of the container\nWORKDIR /app\n\n# Change the app directory into volumes\nVOLUME /app\n\n# Use docker build args to copy the static asset files built previously into this container\nRUN rm -rf /app/candis/app/assets\nCOPY --from=build  /app/candis/app/assets  /app/candis/app/assets\n\n# Export python path\nENV PYTHONPATH=\"/app/candis\"\n\n# Expose port 5000 and 8888\nEXPOSE 5000 8888\n\n# Launch Candis server\nCMD [\"python3\", \"-m\", \"candis\"]\t\n"
}