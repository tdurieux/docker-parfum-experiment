{
  "startTime": 1674244204174,
  "endTime": 1674244204392,
  "originalSmells": [
    {
      "rule": "yumInstallRmVarCacheYum",
      "position": {
        "lineStart": 5,
        "lineEnd": 12,
        "columnStart": 4,
        "columnEnd": 33
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM manageiq/manageiq-pods:frontend-latest\nMAINTAINER ManageIQ https://github.com/ManageIQ/manageiq\n\nENV DATABASE_URL=postgresql://root@localhost/vmdb_production?encoding=utf8&pool=5&wait_timeout=5\n\nRUN yum -y install --setopt=tsflags=nodocs \\\n                   memcached               \\\n                   rh-postgresql95-postgresql-server \\\n                   rh-postgresql95-postgresql-pglogical \\\n                   rh-postgresql95-repmgr  \\\n                   mod_ssl                 \\\n                   openssh-clients         \\\n                   openssh-server \\\n                   && \\\n    yum clean all && rm -rf /var/cache/yum\n\nVOLUME [ \"/var/opt/rh/rh-postgresql95/lib/pgsql/data\" ]\n\n# Initialize SSH\nRUN ssh-keygen -q -t dsa -N '' -f /etc/ssh/ssh_host_dsa_key && \\\n    ssh-keygen -q -t rsa -N '' -f /etc/ssh/ssh_host_rsa_key && \\\n    ssh-keygen -q -t rsa -N '' -f /root/.ssh/id_rsa && \\\n    cp /root/.ssh/id_rsa.pub /root/.ssh/authorized_keys && \\\n    for key in /etc/ssh/ssh_host_*_key.pub; do echo \"localhost $(cat ${key})\" >> /root/.ssh/known_hosts; done && \\\n    echo \"root:smartvm\" | chpasswd && \\\n    chmod 700 /root/.ssh && \\\n    chmod 600 /root/.ssh/*\n\n## Copy/link the appliance files again so that we get ssl\nRUN ${APPLIANCE_ROOT}/setup && \\\n    mv /etc/httpd/conf.d/ssl.conf{,.orig} && \\\n    echo \"# This file intentionally left blank. ManageIQ maintains its own SSL configuration\" > /etc/httpd/conf.d/ssl.conf\n\n## Copy appliance-initialize script and service unit file\nCOPY docker-assets/appliance-initialize.sh /usr/bin\n\nEXPOSE 443 22\n\n## Atomic Labels\n# The UNINSTALL label by DEFAULT will attempt to delete a container (rm) and image (rmi) if the container NAME is the same as the actual IMAGE\n# NAME is set via -n flag to ALL atomic commands (install,run,stop,uninstall)\nLABEL name=\"manageiq\" \\\n      vendor=\"ManageIQ\" \\\n      version=\"Master\" \\\n      release=${REF} \\\n      architecture=\"x86_64\" \\\n      url=\"http://manageiq.org/\" \\\n      summary=\"ManageIQ appliance image\" \\\n      description=\"ManageIQ is a management and automation platform for virtual, private, and hybrid cloud infrastructures.\" \\\n      INSTALL='docker run -ti \\\n                --name ${NAME}_volume \\\n                --entrypoint /usr/bin/appliance-initialize.sh \\\n                $IMAGE' \\\n      RUN='docker run -di \\\n            --name ${NAME}_run \\\n            -v /etc/localtime:/etc/localtime:ro \\\n            --volumes-from ${NAME}_volume \\\n            -p 443:443 \\\n            $IMAGE' \\\n      STOP='docker stop ${NAME}_run && echo \"Container ${NAME}_run has been stopped\"' \\\n      UNINSTALL='docker rm -v ${NAME}_volume ${NAME}_run && echo \"Uninstallation complete\"'\n\nLABEL io.k8s.description=\"ManageIQ is a management and automation platform for virtual, private, and hybrid cloud infrastructures.\" \\\n      io.k8s.display-name=\"ManageIQ\" \\\n      io.openshift.expose-services=\"443:https\" \\\n      io.openshift.tags=\"ManageIQ,miq,manageiq\"\n"
}