{
  "startTime": 1674234533785,
  "endTime": 1674234534006,
  "originalSmells": [
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 87,
        "lineEnd": 87,
        "columnStart": 4,
        "columnEnd": 59
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 57,
        "lineEnd": 57,
        "columnStart": 4,
        "columnEnd": 30
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 65,
        "lineEnd": 65,
        "columnStart": 22,
        "columnEnd": 54
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 71,
        "lineEnd": 71,
        "columnStart": 18,
        "columnEnd": 50
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 72,
        "lineEnd": 72,
        "columnStart": 18,
        "columnEnd": 42
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 73,
        "lineEnd": 73,
        "columnStart": 18,
        "columnEnd": 47
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 57,
        "lineEnd": 57,
        "columnStart": 4,
        "columnEnd": 30
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 65,
        "lineEnd": 65,
        "columnStart": 22,
        "columnEnd": 54
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 71,
        "lineEnd": 71,
        "columnStart": 18,
        "columnEnd": 50
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 72,
        "lineEnd": 72,
        "columnStart": 18,
        "columnEnd": 42
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 73,
        "lineEnd": 73,
        "columnStart": 18,
        "columnEnd": 47
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# Dockerfile to load a haskell environment for running binary's test suite.\n#\n# Building the Dockerfile creates an image which has the haskell environment\n# with ghc and cabal setup and ready to use.\n#\n# Use a docker volume to cache built dependencies. It will greatly speed up\n# running the tests repeatedly.\n#\n# Create a volume:\n#\n#   docker volume create cabal-store-cache\n#\n# How to build:\n#\n#   docker build -f docker/Dockerfile.ghc843 -t haskell/binary .\n#\n# How to run (caching the cabal store directory), default is 'cabal new-test':\n#\n#   docker run -it haskell/binary -v cabal-store-cache:/root/.cabal/store\n#\n# Run 'cabal new-bench' or any other command (bash, to get into the machine):\n#\n#   docker run -it haskell/binary -v cabal-store-cache:/root/.cabal/store \\\n#     cabal new-bench\n#\n# Hacks to build binary:\n#\n#   1) Copy all files from the host machine.\n#\n#   2) Rename binary to binary-next. This is an unfortunate consequence of\n#      binary being used by its test and benchmark dependencies.\n#      Not renaming binary will make cabal confused and it'll fail to build.\n#\n#      Cabal can be made to build properly by carefully installing the test\n#      and benchmark dependencies manually, like it's done in .travis.yml.\n#      Unfortunately that setup is very fragile since changing the\n#      dependencies in binary.cabal also requires updating .travis.yml.\n#      Thus .travis.yml gets out of sync when we forget.\n#      This method also doesn't work with the nix-style commands which\n#      themselves take care of installing dependencies.\n#      The simples workaround I've found, and the only thing that works\n#      with nix-style commands, is to simply rename the package\n#\n#   3) Do 'cabal sdist' to get only the files for source distribution.\n#\n#   4) Unpack the .tar.gz file from (3) and copy generics-bench.cache.gz\n#      to the same dir.\n#\n#   5) The setup is complete. You may run cabal new-test,\n#      or any other command.\n#\n\nFROM debian:stable\n\n# setup locale.\n# not setting a locale will make some apps fail when outputting utf8.\nRUN apt-get update && \\\n    apt-get install --no-install-recommends -y locales && \\\n    locale-gen C.UTF-8 && \\\n    /usr/sbin/update-locale LANG=C.UTF-8 && \\\n    apt-get remove -y locales && rm -rf /var/lib/apt/lists/*;\n\nENV LANG C.UTF-8\n\n# key used by haskell repo\nRUN apt-get update && apt-get install --no-install-recommends -y gnupg dirmngr && rm -rf /var/lib/apt/lists/*;\nRUN apt-key adv --keyserver keyserver.ubuntu.com  --recv-keys BA3CBA3FFE22B574\n\n# add haskell repo for debian\nRUN echo \"deb http://downloads.haskell.org/debian stretch main\" > /etc/apt/sources.list.d/haskell.list\n\nRUN apt update && apt install --no-install-recommends -y cabal-install-2.2 && rm -rf /var/lib/apt/lists/*;\nRUN apt update && apt install --no-install-recommends -y ghc-8.4.3 && rm -rf /var/lib/apt/lists/*;\nRUN apt update && apt-get install --no-install-recommends -y zlib1g-dev && rm -rf /var/lib/apt/lists/*;\n\nENV PATH=/opt/ghc/bin:$PATH\n\nRUN cabal update\n\nCOPY . /workdir/copy\n\nWORKDIR /workdir/copy\nRUN sed -i.bak -e 's/name:\\s*binary/name: binary-next/' binary.cabal\nRUN mv binary.cabal binary-next.cabal\nRUN cabal sdist\n\nWORKDIR /workdir/builddir\nRUN tar xf /workdir/copy/dist/*.tar.gz -C /workdir/builddir && rm /workdir/copy/dist/*.tar.gz\nRUN mv /workdir/builddir/binary-* /workdir/builddir/binary-next\n# generics-bench.cache.gz is not part of the binary distribution,\n# it's too large. It only lives in the git repo. Copy it manually.\nRUN mv /workdir/copy/generics-bench.cache.gz /workdir/builddir/binary-next\nWORKDIR /workdir/builddir/binary-next\n\nCMD cabal new-test\n"
}