{
  "startTime": 1674248132471,
  "endTime": 1674248132751,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 65,
        "lineEnd": 65,
        "columnStart": 4,
        "columnEnd": 45
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# Build target: lablup/common-tensorflow:1.8-py36\n\n# import python-binary\nFROM lablup/kernel-base:python3.6 as python-binary\n\nFROM ubuntu:16.04\nLABEL maintainer=\"Mario Cho <m.cho@lablup.com>\"\n\n# The TensorFlow version\nENV TF_VERSION 1.8\nENV BAZEL_VERSION 0.11.0\nENV PYTHON_BIN_PATH /usr/local/bin/python\nENV PYTHON_LIB_PATH /usr/local/lib/python3.6/site-packages\nENV GCC_HOST_COMPILER_PATH /usr/bin/gcc\nENV CC_OPT_FLAGS \"-march=x86-64 -mavx -mavx2 -mfma -mfpmath=both -msse4.1 -msse4.2\"\nENV TF_NEED_JEMALLOC 1\nENV TF_NEED_GCP 1\nENV TF_NEED_HDFS 1\nENV TF_ENABLE_XLA 1\nENV TF_NEED_VERBS 0\nENV TF_NEED_MPI 0\nENV TF_NEED_GDR 1\nENV TF_NEED_S3 1\nENV TF_NEED_KAFKA 0\nENV TF_NEED_OPENCL 0\nENV TF_NEED_OPENCL_SYCL 0\nENV TF_NEED_CUDA 0\nENV TF_CUDA_CLANG 0\nENV TF_DOWNLOAD_CLANG 0\nENV TF_NEED_TENSORRT 0\nENV TF_SET_ANDROID_WORKSPACE 0\n\n# Install system package dependencies\n# NOTE: running bazel requires JDK, not JRE!\nRUN apt-get update && \\\n    apt-get install -y --no-install-recommends openjdk-8-jdk-headless && \\\n    apt-get install -y --no-install-recommends \\\n    \tgcc g++ make \\\n\tlibssl-dev \\\n        libfreetype6-dev \\\n        libhdf5-serial-dev \\\n        libzmq3-dev \\\n        pkg-config \\\n        rsync \\\n        software-properties-common \\\n        zip unzip \\\n        zlib1g-dev \\\n        wget \\\n        imagemagick \\\n        graphviz \\\n        cmake \\\n        curl \\\n\twget \\\n        rsync \\\n        sed \\\n        swig \\\n        git-core \\\n\tlibcurl3-dev \\\n\tzip && \\\n    rm -rf /var/lib/apt/lists/*\n\nCOPY --from=python-binary /python.tar.gz /\nRUN cd /; tar xzpf python.tar.gz; rm python.tar.gz; ldconfig\n\n# Prepare for building TensorFlow wheel\nRUN curl -f https://bootstrap.pypa.io/get-pip.py | python3 && \\\n    python3 -m pip install --no-cache-dir -U setuptools pip && \\\n    python3 -m pip install --no-cache-dir \\\n    \twheel \\\n    \tnumpy \\\n\tscipy \\\n        sklearn \\\n        pandas \\\n        keras_applications \\\n        keras_preprocessing \\\n        matplotlib \\\n\tfuture \\\n\t&& \\\n    rm -f /tmp/*.whl\n\n# Check Python is runnable.\nRUN python3 -c \"import sys; print(sys.prefix); print(sys.version_info)\"\n\n# Running bazel inside a `docker build` command causes trouble, cf:\n#   https://github.com/bazelbuild/bazel/issues/134\n# The easiest solution is to set up a bazelrc file forcing --batch.\nRUN echo \"startup --batch\" >>/etc/bazel.bazelrc\nRUN echo \"build --spawn_strategy=standalone --genrule_strategy=standalone\" >>/etc/bazel.bazelrc\n\nWORKDIR /\nRUN mkdir /bazel && \\\n    cd /bazel && \\\n    curl -H \"User-Agent: Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/57.0.2987.133 Safari/537.36\" -fSsL -O https://github.com/bazelbuild/bazel/releases/download/$BAZEL_VERSION/bazel-$BAZEL_VERSION-installer-linux-x86_64.sh && \\\n    curl -H \"User-Agent: Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/57.0.2987.133 Safari/537.36\" -fSsL -o /bazel/LICENSE.txt https://raw.githubusercontent.com/bazelbuild/bazel/master/LICENSE && \\\n    chmod +x bazel-*.sh && \\\n    ./bazel-$BAZEL_VERSION-installer-linux-x86_64.sh && \\\n    cd / && \\\n    rm -f /bazel/bazel-$BAZEL_VERSION-installer-linux-x86_64.sh && \\\n    bazel version && \\\n    python3 -c \"import sys; print(sys.prefix); print(sys.version_info)\" && \\\n    python3 -c \"import numpy; numpy.show_config()\" && \\\n    python3 -c \"import scipy; scipy.show_config()\"\n\nRUN : build TensorFlow pip package && \\\n    cd /tmp && \\\n    git clone --branch=r${TF_VERSION} --depth=1 https://github.com/tensorflow/tensorflow.git tensorflow-${TF_VERSION} && \\\n    ldconfig\n\nRUN cd /tmp/tensorflow-${TF_VERSION} && \\\n# AVX & AVX2 support under haswell core\n        CC_OPT_FLAGS=\"-march=x86-64 -mavx -mavx2 -mfma -mfpmath=both -msse4.1 -msse4.2\" \\\n# AVX512 support over skylake core\n#        CC_OPT_FLAGS=\"-march=x86-64 -mavx -mavx2 -mfma -mavx512f -mavx512pf -mavx512cd -mavx512er -mfpmath=both -msse4.1 -msse4.2\" \\\n    tensorflow/tools/ci_build/builds/configured CPU \\\n    bazel build \\\n    \t-c opt \\\n\t--copt=-mavx \\\n\t--copt=-mavx2 \\\n\t--config=mkl \\\n\t--config=monolithic \\\n#\t--config=gdr \\\n#\t--config=verbs \\\n#\t--config=ngraph \\\n        --cxxopt=\"-D_GLIBCXX_USE_CXX11_ABI=0\" \\\n        //tensorflow/tools/pip_package:build_pip_package && \\\n    ./bazel-bin/tensorflow/tools/pip_package/build_pip_package /tmp/tensorflow_pkg && \\\n    rm -fr /root/.cache\n\nRUN ls -l /tmp/tensorflow_pkg\n\n# vim: ft=dockerfile sts=4 sw=4 et tw=0"
}