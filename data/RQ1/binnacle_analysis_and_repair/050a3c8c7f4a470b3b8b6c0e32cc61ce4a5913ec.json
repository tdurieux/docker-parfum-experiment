{
  "startTime": 1674249925650,
  "endTime": 1674249925735,
  "originalSmells": [
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 12,
        "lineEnd": 12,
        "columnStart": 15,
        "columnEnd": 44
      }
    },
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 14,
        "lineEnd": 14,
        "columnStart": 15,
        "columnEnd": 26
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# --- Base Node ---\nFROM node:boron AS base\nRUN mkdir -p /var/www\nRUN mkdir -p /var/log/portal-service\nADD package.json /var/www\n\n# use changes to package.json to force Docker not to use the cache\n# when we change our application's nodejs dependencies:\n\n# --- Dependencies ---\nFROM base AS dependencies\nCOPY . /tmp/\nRUN cd /tmp && npm install --only=production && npm cache clean --force;\nRUN cp -R /tmp/node_modules /tmp/prod_node_modules\nRUN cd /tmp && npm install && npm cache clean --force;\n\n# --- Build ---\nFROM dependencies AS build\nCOPY ./src /tmp/src\nRUN cd /tmp && npm run build\nCOPY ./src/common/config/creds /tmp/dist/common/config/creds\n\n# --- Release ---\nFROM base AS release\nWORKDIR /var/www\n# create empty .env file for dotenv lib\nRUN touch .env\nCOPY --from=dependencies /tmp/prod_node_modules ./node_modules\nCOPY --from=build /tmp/dist ./dist\n\nVOLUME /var/log/portal-service\nEXPOSE 3000\nCMD [ \"npm\", \"run\", \"start:prod\" ]\n"
}