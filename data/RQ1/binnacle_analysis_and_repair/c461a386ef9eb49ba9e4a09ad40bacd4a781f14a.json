{
  "startTime": 1674245847858,
  "endTime": 1674245848117,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 9,
        "lineEnd": 9,
        "columnStart": 4,
        "columnEnd": 64
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 40,
        "lineEnd": 40,
        "columnStart": 4,
        "columnEnd": 105
      }
    },
    {
      "rule": "yarnCacheCleanAfterInstall",
      "position": {
        "lineStart": 75,
        "lineEnd": 75,
        "columnStart": 31,
        "columnEnd": 56
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 12,
        "lineEnd": 27,
        "columnStart": 4,
        "columnEnd": 18
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 43,
        "lineEnd": 43,
        "columnStart": 4,
        "columnEnd": 27
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 12,
        "lineEnd": 27,
        "columnStart": 4,
        "columnEnd": 18
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 43,
        "lineEnd": 43,
        "columnStart": 4,
        "columnEnd": 27
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM metabrainz/base-image\nLABEL maintainer=jeffsturgis@gmail.com\n\nENV DOCKERIZE_VERSION v0.5.0\nRUN wget https://github.com/jwilder/dockerize/releases/download/$DOCKERIZE_VERSION/dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz && \\\n    tar -C /usr/local/bin -xzvf dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz && \\\n    rm -f dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz\n\nARG POSTGRES_VERSION=9.5\nRUN curl -f -sSL https://www.postgresql.org/media/keys/ACCC4CF8.asc | apt-key add - && \\\n    echo \"deb http://apt.postgresql.org/pub/repos/apt/ $(lsb_release -cs)-pgdg main\" > /etc/apt/sources.list.d/pgdg.list && \\\n    apt-get update && \\\n    apt-get install --no-install-recommends -y \\\n        cpanminus \\\n        build-essential \\\n        gettext \\\n        git-core \\\n        libdb-dev \\\n        libexpat1-dev \\\n        libicu-dev \\\n        liblocal-lib-perl \\\n        libpq-dev \\\n        libxml2-dev \\\n        libssl-dev \\\n        memcached \\\n        postgresql-${POSTGRES_VERSION} \\\n        python-minimal \\\n        zlib1g-dev && rm -rf /var/lib/apt/lists/*;\n\nRUN git clone https://github.com/metabrainz/musicbrainz-server.git musicbrainz-server && \\\n    cd musicbrainz-server && \\\n    git checkout v-2019-05-13-schema-change\n\nRUN cd musicbrainz-server && \\\n    cp docker/yarn_pubkey.txt /tmp && \\\n    cd /tmp && \\\n    apt-key add yarn_pubkey.txt && \\\n    apt-key adv --keyserver hkps.pool.sks-keyservers.net --refresh-keys Yarn && \\\n    echo \"deb https://dl.yarnpkg.com/debian/ stable main\" | tee /etc/apt/sources.list.d/yarn.list && \\\n    apt-get update -o Dir::Etc::sourcelist=\"sources.list.d/yarn.list\" -o Dir::Etc::sourceparts=\"-\" -o APT::Get::List-Cleanup=\"0\" && \\\n    curl -f -sLO https://deb.nodesource.com/node_8.x/pool/main/n/nodejs/nodejs_8.11.3-1nodesource1_amd64.deb && \\\n    dpkg -i nodejs_8.11.3-1nodesource1_amd64.deb && \\\n    apt remove -y cmdtest && \\\n    apt-get install --no-install-recommends -y yarn && rm -rf /var/lib/apt/lists/*;\n\nRUN cd /musicbrainz-server/ && \\\n    eval $( perl -Mlocal::lib) && cpanm --installdeps --notest .\nRUN eval $( perl -Mlocal::lib) && cpanm --notest \\\n        Cache::Memcached::Fast \\\n        Cache::Memory \\\n        Catalyst::Plugin::Cache::HTTP \\\n        Catalyst::Plugin::StackTrace \\\n        Digest::MD5::File \\\n        JSON::Any \\\n        LWP::Protocol::https \\\n        Plack::Handler::Starlet \\\n        Plack::Middleware::Debug::Base \\\n        Server::Starter \\\n        Starlet \\\n        Starlet::Server \\\n        Term::Size::Any \\\n        TURNSTEP/DBD-Pg-3.7.4.tar.gz\n\nADD DBDefs.pm /musicbrainz-server/lib/\nADD scripts/start.sh /start.sh\nADD scripts/start_mb_renderer.pl /start_mb_renderer.pl\nADD scripts/crons.conf /crons.conf\nADD scripts/replication.sh /replication.sh\nADD scripts/createdb.sh /createdb.sh\nADD scripts/recreatedb.sh /recreatedb.sh\nADD scripts/set-token.sh /set-token.sh\n\n# Postgres user/password would be solely needed to compile tests\nARG POSTGRES_USER=doesntmatteraslongasyoudontcompiletests\nARG POSTGRES_PASSWORD=doesntmatteraslongasyoudontcompiletests\nRUN cd /musicbrainz-server/ && yarn install --production && \\\n    eval $( perl -Mlocal::lib) && /musicbrainz-server/script/compile_resources.sh && yarn cache clean;\n\nRUN apt-get clean && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*\nRUN crontab /crons.conf\n\nVOLUME  [\"/media/dbdump\"]\nWORKDIR /musicbrainz-server\nCMD dockerize -wait tcp://db:5432 -timeout 60s \\\n        -wait tcp://redis:6379 -timeout 60s \\\n        /start.sh\n"
}