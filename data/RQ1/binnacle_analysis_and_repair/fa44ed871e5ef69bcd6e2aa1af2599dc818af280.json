{
  "startTime": 1674242287440,
  "endTime": 1674242287596,
  "originalSmells": [
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 57,
        "lineEnd": 66,
        "columnStart": 7,
        "columnEnd": 23
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 86,
        "lineEnd": 86,
        "columnStart": 7,
        "columnEnd": 39
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 70,
        "lineEnd": 80,
        "columnStart": 8,
        "columnEnd": 19
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM alpine:3.7\n\nENV JAVA_HOME /usr/lib/jvm/default-jvm\nENV BAZEL_VERSION 0.5.4\n\nWORKDIR /tmp\n\n# Build directory trees\nRUN mkdir -p /opt\n\n# Build and install Tensorflow/SyntaxNet\nRUN set -x \\\n    # Bazel\n    && apk --no-cache --update add --virtual .builddeps.bazel \\\n        bash \\\n        build-base \\\n        linux-headers \\\n        python \\\n        openjdk8 \\\n        wget \\\n        zip \\\n    && mkdir /tmp/bazel \\\n    && wget -q -O /tmp/bazel-dist.zip https://github.com/bazelbuild/bazel/releases/download/${BAZEL_VERSION}/bazel-${BAZEL_VERSION}-dist.zip \\\n    && unzip -q -d /tmp/bazel /tmp/bazel-dist.zip \\\n    && cd /tmp/bazel \\\n    # add -fpermissive compiler option to avoid compilation failure\n    && sed -i -e '/\"-std=c++0x\"/{h;s//\"-fpermissive\"/;x;G}' tools/cpp/cc_configure.bzl \\\n    # add '#include <sys/stat.h>' to avoid mode_t type error\n    && sed -i -e '/#endif  \\/\\/ COMPILER_MSVC/{h;s//#else/;G;s//#include <sys\\/stat.h>/;G;}' third_party/ijar/common.h \\\n    # add jvm opts for circleci\n    # && sed -i -E 's/(jvm_opts.*\\[)/\\1 \"-Xmx1024m\",/g' src/java_tools/buildjar/BUILD \\\n    && export EXTRA_BAZEL_ARGS=\"--jobs $(grep -c ^processor /proc/cpuinfo)\" \\\n    && bash compile.sh \\\n    && cp output/bazel /usr/local/bin/ \\\n    # Syntaxnet with Tensorflow\n    && cd /tmp \\\n    && apk --no-cache --update add \\\n      python \\\n      py-pip \\\n      jemalloc \\\n      libc6-compat \\\n    && apk --no-cache add \\\n        --repository http://dl-cdn.alpinelinux.org/alpine/edge/testing/ \\\n        hdf5 \\\n    && apk --no-cache add --virtual .builddeps.edge \\\n        --repository http://dl-cdn.alpinelinux.org/alpine/edge/testing/ \\\n        hdf5-dev \\\n    && apk --no-cache add --virtual .builddeps.tensorflow \\\n      git \\\n      bash \\\n      patch \\\n      perl \\\n      sed \\\n      swig \\\n      graphviz \\\n      python-dev \\\n      graphviz-dev \\\n    && pip install --no-cache-dir -U \\\n      wheel \\\n      mock \\\n      asciitree \\\n      numpy \\\n      h5py \\\n      autograd==1.1.13 \\\n      protobuf==3.3.0 \\\n      pygraphviz \\\n      backports.weakref \\\n    && git clone --recursive https://github.com/tensorflow/models.git \\\n    && cd /tmp/models/research/syntaxnet/tensorflow \\\n    && echo | \\\n        CC_OPT_FLAGS=-march=native \\\n        PYTHON_BIN_PATH=$(which python) \\\n        TF_NEED_MKL=0 \\\n        TF_NEED_VERBS=0 \\\n        TF_NEED_CUDA=0 \\\n        TF_NEED_GCP=0 \\\n        TF_NEED_JEMALLOC=0 \\\n        TF_NEED_HDFS=0 \\\n        TF_NEED_OPENCL=0 \\\n        TF_ENABLE_XLA=0 \\\n        ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" \\\n\n\n\n\n\n\n\n\n\n\n    && cd .. \\\n    && CPU_COUNT=$(grep -c ^processor /proc/cpuinfo) \\\n    && bazel test --local_resources 4096,$CPU_COUNT,1.0 ... \\\n    && mkdir /tmp/syntaxnet_pkg \\\n    && bazel-bin/dragnn/tools/build_pip_package --output-dir=/tmp/syntaxnet_pkg --include-tensorflow \\\n    && pip install --no-cache-dir /tmp/syntaxnet_pkg/* \\\n    && cd /opt \\\n    # Cleanup\n    && apk del \\\n        .builddeps.bazel \\\n        .builddeps.edge \\\n        .builddeps.tensorflow \\\n    && rm -rf /tmp/* \\\n    && rm -rf /root/.cache/*\n\n# Build directory trees for models and dragnn wrapper\nRUN set -x \\\n    && mkdir -p /usr/local/tfmodels \\\n    && mkdir -p /usr/lib/python2.7/site-packages/dragnn/wrapper\n\nCOPY wrapper.py /usr/lib/python2.7/site-packages/dragnn/wrapper/__init__.py\n\nWORKDIR /opt\nCMD [\"/bin/sh\"]\n"
}