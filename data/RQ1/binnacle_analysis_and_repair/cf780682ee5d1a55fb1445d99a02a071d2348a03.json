{
  "startTime": 1674240656071,
  "endTime": 1674240656255,
  "originalSmells": [
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 112,
        "lineEnd": 112,
        "columnStart": 7,
        "columnEnd": 40
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM openjdk:8-jdk-alpine\n\nRUN apk add --no-cache git openssh-client curl unzip bash jq ttf-dejavu coreutils tini nodejs nodejs-npm\n\nARG user=jenkins\nARG group=jenkins\nARG uid=1000\nARG gid=1000\nARG http_port=8080\nARG agent_port=50000\nARG JENKINS_HOME=/var/jenkins_home\n\nENV JENKINS_HOME $JENKINS_HOME\nENV JENKINS_SLAVE_AGENT_PORT ${agent_port}\n\n# Privacy policy parameters - REQUIRED!\nARG default_reporting=no\nENV reporting=$default_reporting\n\nARG default_license_key=\"\"\nENV license_key=$default_license_key\n\nARG default_reporting_user=\"\"\nENV reporting_user=$default_reporting_user\n\n# Jenkins is run with user `jenkins`, uid = 1000\n# If you bind mount a volume from the host or a data container,\n# ensure you use the same uid\nRUN addgroup -S -g ${gid} ${group} \\\n  && adduser -h ${JENKINS_HOME} -G ${group} -D -u ${uid} -s bin/sh ${user}\n\n# `/usr/share/jenkins/ref/` contains all reference configuration we want\n# to set on a fresh new installation. Use it to bundle additional plugins\n# or config file with your custom jenkins Docker image.\nRUN mkdir -p /usr/share/jenkins/ref/init.groovy.d\nCOPY --chown=jenkins:jenkins init.groovy /usr/share/jenkins/ref/init.groovy.d/tcp-slave-agent-port.groovy\n\n# jenkins version being bundled in this docker image\nARG JENKINS_VERSION\nENV JENKINS_VERSION ${JENKINS_VERSION:-2.138.4}\n\n# jenkins.war checksum, download will be validated using it\nARG JENKINS_SHA=053d2941d558092c934a0f95798ff2177170eecfffab27a46e30744cf12bc3da\n\n# Can be used to customize where jenkins.war get downloaded from\nARG JENKINS_URL=https://repo.jenkins-ci.org/public/org/jenkins-ci/main/jenkins-war/${JENKINS_VERSION}/jenkins-war-${JENKINS_VERSION}.war\n\n# Download Jenkins and verify it\nRUN curl -fsSL ${JENKINS_URL} -o /usr/share/jenkins/jenkins.war \\\n  && echo \"${JENKINS_SHA}  /usr/share/jenkins/jenkins.war\" | sha256sum -c -\n\nENV JENKINS_UC https://updates.jenkins.io\nENV JENKINS_UC_EXPERIMENTAL=https://updates.jenkins.io/experimental\nENV JENKINS_INCREMENTALS_REPO_MIRROR=https://repo.jenkins-ci.org/incrementals\n\n# for main web interface:\nEXPOSE ${http_port}\n\n# will be used by attached slave agents:\nEXPOSE ${agent_port}\n\nENV COPY_REFERENCE_FILE_LOG $JENKINS_HOME/copy_reference_file.log\n\n# Add the admin user \n COPY --chown=jenkins:jenkins /configs/users \"$JENKINS_HOME\"/users/\n\n# Add the main, CLI and global config files to the jenkins path \nCOPY --chown=jenkins:jenkins /configs/jenkins_home_config.xml \"$JENKINS_HOME\"/config.xml\nCOPY --chown=jenkins:jenkins /configs/jenkins.model.JenkinsLocationConfiguration.xml \"$JENKINS_HOME\"/jenkins.model.JenkinsLocationConfiguration.xml\nCOPY --chown=jenkins:jenkins /configs/jenkins.CLI.xml \"$JENKINS_HOME\"/jenkins.CLI.xml\nCOPY --chown=jenkins:jenkins /configs/jenkins.security.apitoken.ApiTokenPropertyConfiguration.xml \"$JENKINS_HOME\"/jenkins.security.apitoken.ApiTokenPropertyConfiguration.xml\n\n# Create Job\n# Name the jobs \nARG job_name_1=\"look_at_me_sideways\"\n\n# Create the job workspaces \nRUN mkdir -p \"$JENKINS_HOME\"/workspace/${job_name_1}\n\n# Create the jobs folder recursively \nRUN mkdir -p \"$JENKINS_HOME\"/jobs/${job_name_1}\n\n# Add the custom configs to the container \nCOPY --chown=jenkins:jenkins /configs/${job_name_1}_config.xml \"$JENKINS_HOME\"/jobs/${job_name_1}/config.xml\n\n# Create build file structure \nRUN mkdir -p \"$JENKINS_HOME\"/jobs/${job_name_1}/latest/ \n# RUN mkdir -p \"$JENKINS_HOME\"/jobs/${job_name_1}/builds/1/\n\n# Add all necessary scripts\nCOPY --chown=jenkins:jenkins jenkins-support /usr/local/bin/jenkins-support\nCOPY --chown=jenkins:jenkins jenkins.sh /usr/local/bin/jenkins.sh\nCOPY --chown=jenkins:jenkins set-commit-status.sh /usr/local/bin/set-commit-status.sh\nCOPY --chown=jenkins:jenkins tini-shim.sh /bin/tini\nCOPY --chown=jenkins:jenkins install-plugins.sh /usr/local/bin/install-plugins.sh\n\n# Install plugins\nRUN \\\n  ATTEMPTS=3 \\ \n  /usr/local/bin/install-plugins.sh \\\n  generic-webhook-trigger:1.50 \\\n  github:1.29.3 \\\n  postbuild-task:1.8\n\n# chown and chmod to jenkins user\nRUN chown -R ${user} $JENKINS_HOME && chown -R ${user} /usr/share/jenkins/ref\nRUN chgrp -R ${group} $JENKINS_HOME && chgrp -R ${group} /usr/share/jenkins/ref\n\n# Temporarily solution: Install LAMS as a global package from the repo\nRUN git clone https://github.com/looker-open-source/look-at-me-sideways.git /usr/local/bin/lams\nRUN cd /usr/local/bin/lams \\\n    &&  npm config set unsafe-perm true \\\n    && npm install --global --production \\\n    && npm config set unsafe-perm false && npm cache clean --force;\nRUN chown -R ${user} /usr/local/bin/lams && chgrp -R ${group} /usr/local/bin/lams\n\nUSER ${user}\nRUN git config --global user.name \"Jenkins\"\nRUN git config --global user.email \"lams@host.com\"\n\n# Jenkins home directory is a volume, so configuration and build history\n# can be persisted and survive image upgrades\nVOLUME $JENKINS_HOME\n\nENTRYPOINT [\"/sbin/tini\", \"--\", \"/usr/local/bin/jenkins.sh\"]\n"
}