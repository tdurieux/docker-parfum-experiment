{
  "startTime": 1674234143965,
  "endTime": 1674234144125,
  "originalSmells": [
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 60,
        "lineEnd": 63,
        "columnStart": 24,
        "columnEnd": 9
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 60,
        "lineEnd": 63,
        "columnStart": 24,
        "columnEnd": 9
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# DOCKER Configuration file\n\n\n# -------- Licence -------------------------------------------------------------\n# The MIT License (MIT)\n#\n# Copyright (c) 2017 Pantelis Sopasakis (https://alphaville.github.io),\n#                    Krina Menounou (https://www.linkedin.com/in/krinamenounou),\n#                    Panagiotis Patrinos (http://homes.esat.kuleuven.be/~ppatrino)\n# Copyright (c) 2012 Brendan O'Donoghue (bodonoghue85@gmail.com)\n# ------------------------------------------------------------------------------\n\n\n\n# -------- Instructions --------------------------------------------------------\n# Build the docker image by running:\n#\n# $ docker image build -t kulforbes/superscs:{version-name} .\n#\n# from within the base directory of this project.\n#\n#\n# Run the docker image and start a terminal to access it by running:\n#\n# $ docker run -it kulforbes/superscs:{version-name}\n#\n# To run the latest version, simply run `docker run -it kulforbes/superscs`\n#\n# Once you access the docker image using a terminal, you may compile the C file\n# `superscs_test.c` as follows:\n# $ gcc superscs_test.c -o superscs_test -lscsindir -lblas -llapack -lm\n# ------------------------------------------------------------------------------\n\n\n\n# Build on top of Ubuntu trusty\nFROM ubuntu:trusty\n\n# Labels for the SuperSCS docker image\nLABEL \tmaintainer=\"Pantelis Sopasakis <p.sopasakis@gmail.com>\" \\\n\tversion=\"v1.3.3\" \\\n        license=\"MIT license\" \\\n        description=\"Fast and accurate conic programming\"\n\n# Environment variables\nENV CC=gcc \\\n    SUPERSCS_VERSION=\"v1.3.3\" \\\n    SUPERSCS_INSTALL_DIR=\"/superscs\"\n\nWORKDIR /superscs\n\n# Copy all necessary files\nCOPY src/ /superscs/src/\nCOPY include/ /superscs/include/\nCOPY linsys/ /superscs/linsys/\nCOPY tests/c/ /superscs/tests/c\nCOPY scs.mk Makefile LICENSE.txt examples/c/superscs_test.c /superscs/\nCOPY .motd /etc/\n\n# Install necessary dependencies (blas, lapack, make and gcc)\nRUN apt-get update && apt-get -y --no-install-recommends install \\\n\tlibblas-dev \\\n\tliblapack-dev \\\n\tmake gcc && rm -rf /var/lib/apt/lists/*;\n\n# Build, test and install\nRUN\tmake \\\n        # run the unit tests\n\t&& make run-test \\\n        # copy library files to /usr/lib/superscs\n\t&& mkdir -p /usr/lib/superscs/ \\        \n\t&& cp out/libscsdir.a /usr/lib/superscs/ \\\n\t&& cp out/libscsindir.a /usr/lib/superscs/ \\\n\t&& cp out/libscsdir.so /usr/lib/superscs/ \\\n        && cp out/libscsindir.so /usr/lib/superscs/ \\\n        # create symbolic links in /usr/lib \n\t&& ln -s /usr/lib/superscs/libscsdir.a /usr/lib/libscsdir.a \\\n\t&& ln -s /usr/lib/superscs/libscsindir.a /usr/lib/libscsindir.a \\\n\t&& ln -s /usr/lib/superscs/libscsdir.so /usr/lib/libscsdir.so \\\n        && ln -s /usr/lib/superscs/libscsindir.so /usr/lib/libscsindir.so \\\n        # install header files in /usr/include\n        # users will have use: #include \"superscs/scs.h\"\n\t&& cp -r ./include/ /usr/include/superscs \\\n        # copy the header files of linsys in /usr/include/linsys\n\t&& mkdir -p /usr/include/linsys \\\n\t&& cp linsys/amatrix.h /usr/include/linsys/ \\\n\t&& cp linsys/common.h /usr/include/linsys/ \\\n        # compile the example\n\t&& gcc superscs_test.c -o superscs_run -lscsindir -lblas -llapack -lm \\\n        # make the example runnable (+x)\n        && chmod +x /superscs/superscs_run \\\n        # make motd runnable and modify bashrc\n\t&& mv /etc/.motd /etc/motd \\\n        && chmod +x /etc/motd \\\n        && echo '/etc/motd' >> /etc/bash.bashrc\n"
}