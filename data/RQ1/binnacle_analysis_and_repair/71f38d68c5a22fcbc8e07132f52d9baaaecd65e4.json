{
  "startTime": 1674244554877,
  "endTime": 1674244555298,
  "originalSmells": [
    {
      "rule": "wgetUseHttpsUrl",
      "position": {
        "lineStart": 19,
        "lineEnd": 19,
        "columnStart": 15,
        "columnEnd": 80
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 23,
        "lineEnd": 39,
        "columnStart": 4,
        "columnEnd": 29
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 10,
        "lineEnd": 10,
        "columnStart": 4,
        "columnEnd": 40
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 14,
        "lineEnd": 18,
        "columnStart": 4,
        "columnEnd": 16
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 46,
        "lineEnd": 46,
        "columnStart": 4,
        "columnEnd": 46
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 56,
        "lineEnd": 56,
        "columnStart": 4,
        "columnEnd": 27
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 14,
        "lineEnd": 18,
        "columnStart": 4,
        "columnEnd": 16
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 46,
        "lineEnd": 46,
        "columnStart": 4,
        "columnEnd": 46
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 56,
        "lineEnd": 56,
        "columnStart": 4,
        "columnEnd": 27
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 10,
        "lineEnd": 10,
        "columnStart": 4,
        "columnEnd": 40
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 14,
        "lineEnd": 18,
        "columnStart": 4,
        "columnEnd": 16
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 46,
        "lineEnd": 46,
        "columnStart": 4,
        "columnEnd": 46
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 56,
        "lineEnd": 56,
        "columnStart": 4,
        "columnEnd": 27
      }
    }
  ],
  "repairedSmells": [
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 14,
        "lineEnd": 18,
        "columnStart": 4,
        "columnEnd": 16
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 46,
        "lineEnd": 46,
        "columnStart": 4,
        "columnEnd": 70
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 56,
        "lineEnd": 56,
        "columnStart": 4,
        "columnEnd": 51
      }
    }
  ],
  "repairedDockerfile": "ARG CUDA_VERSION=9.1\nFROM nvidia/cuda:${CUDA_VERSION}-devel-ubuntu16.04\n\nARG FFMPEG_VERSION=3.4.2\nARG CMAKE_VERSION=3.10.2\nARG OPENCV_VERSION=3.4.0\nARG OPENCV_CUDA_GENERATION=Volta\n\n# nvcuvid deps\nRUN apt-get update --fix-missing && \\\n    apt-get install --no-install-recommends -y libx11-6 libxext6 && rm -rf /var/lib/apt/lists/*;\nENV NVIDIA_DRIVER_CAPABILITIES=video,compute,utility\n\n# small ffmpeg from source\nRUN apt-get install --no-install-recommends -y \\\n      yasm wget \\\n      libx264-148 libx264-dev \\\n      libx265-79 libx265-dev \\\n      pkg-config && \\\n    cd /tmp && wget -q https://ffmpeg.org/releases/ffmpeg-$FFMPEG_VERSION.tar.bz2 && \\\n    tar xf ffmpeg-$FFMPEG_VERSION.tar.bz2 && \\\n    rm ffmpeg-$FFMPEG_VERSION.tar.bz2 && \\\n    cd ffmpeg-$FFMPEG_VERSION && \\\n    ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" \\\n    --prefix=/usr/local \\\n    --disable-static --enable-shared \\\n    --disable-all --disable-autodetect --disable-iconv \\\n    --enable-avformat --enable-avcodec --enable-avfilter \\\n    --enable-protocol=file \\\n    --enable-demuxer=mov,matroska \\\n    --enable-bsf=h264_mp4toannexb,hevc_mp4toannexb \\\n    --enable-gpl --enable-libx264 --enable-libx265 \\\n    --enable-swresample --enable-ffmpeg \\\n    --enable-swscale --enable-filter=scale \\\n    --enable-muxer=mp4,matroska \\\n    --enable-cuvid --enable-nvenc --enable-cuda \\\n    --enable-decoder=h264,h264_cuvid,hevc,hevc_cuvid \\\n    --enable-encoder=h264_nvenc,hevc_nvenc,libx264,libx265 \\\n    --enable-hwaccel=h264_cuvid,hevc_cuvid \\\n    --enable-parser=h264,hevc && \\\n    make -j8 && make install && \\\n    cd /tmp && rm -rf ffmpeg-$FFMPEG_VERSION && \\\n    apt-get remove -y yasm wget libx264-dev libx265-dev pkg-config && \\\n    apt-get auto-remove -y && rm -rf /var/lib/apt/lists/*;\n\n# video_reader build deps (pkg-config, Doxygen, recent cmake)\nRUN apt-get install --no-install-recommends -y pkg-config doxygen wget && \\\n    cd /tmp && \\\n    export dir=$(echo $CMAKE_VERSION | sed \"s/^\\([0-9]*\\.[0-9]*\\).*/v\\1/\") && \\\n    wget -q https://cmake.org/files/${dir}/cmake-$CMAKE_VERSION-Linux-x86_64.sh && \\\n    /bin/sh cmake-$CMAKE_VERSION-Linux-x86_64.sh --skip-license --prefix=/usr/local && \\\n    rm cmake-$CMAKE_VERSION-Linux-x86_64.sh && \\\n    apt-get purge -y wget && \\\n    apt-get autoremove -y && rm -rf /var/lib/apt/lists/*;\n\n# paired down OpenCV build, just enough for examples\nRUN apt-get install --no-install-recommends -y wget && \\\n    cd /tmp && \\\n    wget https://github.com/opencv/opencv/archive/$OPENCV_VERSION.tar.gz && \\\n    tar xf $OPENCV_VERSION.tar.gz && \\\n    rm $OPENCV_VERSION.tar.gz && \\\n    cd opencv-$OPENCV_VERSION && \\\n    mkdir build && cd build && \\\n    cmake -DCUDA_GENERATION=$OPENCV_CUDA_GENERATION \\\n      $(for m in cudabgsegm cudacodec cudafeatures2d \\\n      cudafilters cudalegacy cudaoptflow cudaobjdetect \\\n      cudawarping cudev dnn features2d flann highgui ml \\\n      objdetect photo python_bindings_generator shape \\\n      superres ts video videoio; do echo -DBUILD_opencv_$m=OFF; done) \\\n      $(for f in WEBP TIFF OPENEXR JASPER; do echo -DWITH_$f=OFF; done) \\\n      .. && \\\n    make -j8 && make install && \\\n    ldconfig && \\\n    cd /tmp && rm -rf opencv-$OPENCV_VERSION && \\\n    apt-get purge -y wget && \\\n    apt-get autoremove -y && rm -rf /var/lib/apt/lists/*;\n\n# nvidia-docker only provides libraries for runtime use, not for\n# development, to hack it so we can develop inside a container (not a\n# normal or supported practice), we need to make an unversioned\n# symlink so gcc can find the library.  Additional, different\n# nvidia-docker versions put the lib in different places, so we make\n# symlinks for both places.\nRUN ln -s /usr/local/nvidia/lib64/libnvcuvid.so.1 /usr/local/lib/libnvcuvid.so && \\\n    ln -s libnvcuvid.so.1 /usr/lib/x86_64-linux-gnu/libnvcuvid.so\n"
}