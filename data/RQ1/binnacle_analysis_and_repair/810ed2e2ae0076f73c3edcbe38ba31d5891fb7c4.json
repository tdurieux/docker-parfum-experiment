{
  "startTime": 1674238660002,
  "endTime": 1674238660189,
  "originalSmells": [
    {
      "rule": "sha256sumEchoOneSpaces",
      "position": {
        "lineStart": 60,
        "lineEnd": 60,
        "columnStart": 2,
        "columnEnd": 58
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "#\n# NOTE: THIS DOCKERFILE IS GENERATED VIA \"update.sh\"\n#\n# PLEASE DO NOT EDIT IT DIRECTLY.\n#\n\nFROM alpine:3.8\n\n# add our user and group first to make sure their IDs get assigned consistently, regardless of whatever dependencies get added\nRUN set -eux; \\\n\taddgroup -S varnish; \\\n\tfor user in varnish vcache; do \\\n\t\tadduser -S -G varnish $user; \\\n\tdone\n\n# dependencies required for building VMOD (Varnish modules)\nENV VMOD_BUILD_DEPS \\\n\t\tautoconf \\\n\t\t# autoconf-archive \\\n\t\tautomake \\\n\t\tlibtool \\\n\t\tmake \\\n\t\tpkgconf \\\n\t\tpython3\n\n# persistent / runtime deps\nRUN apk add --no-cache --virtual .persistent-deps \\\n\t\tgcc \\\n\t\tlibc-dev \\\n\t\tlibgcc\n\nENV VARNISH_VERSION 6.0.3\nENV VARNISH_URL https://varnish-cache.org/_downloads/varnish-6.0.3.tgz\nENV VARNISH_SHA256 4e0a4803b54726630719a22e79a2c5b36876506497e24fb39a47e9df219778d7\n\nCOPY *.patch /varnish-alpine-patches/\n\nRUN set -eux; \\\n\n\tfetchDeps=' \\\n\t\tca-certificates \\\n\t\twget \\\n\t'; \\\n\tbuildDeps=\" \\\n\t\t$VMOD_BUILD_DEPS \\\n\t\tcoreutils \\\n\t\tdpkg \\\n\t\tdpkg-dev \\\n\t\tlibedit-dev \\\n\t\tlibexecinfo-dev \\\n\t\tlinux-headers \\\n\t\tncurses-dev \\\n\t\tpatch \\\n\t\tpcre-dev \\\n\t\"; \\\n\tapk add --no-cache --virtual .build-deps $fetchDeps $buildDeps; \\\n\n\twget -O varnish.tar.gz \"$VARNISH_URL\"; \\\n\n\tif [ -n \"$VARNISH_SHA256\" ]; then \\\n\t\techo \"$VARNISH_SHA256  *varnish.tar.gz\" | sha256sum -c -; \\\n\tfi; \\\n\n\tmkdir -p /usr/src/varnish; \\\n\ttar -zxf varnish.tar.gz -C /usr/src/varnish --strip-components=1; \\\n\trm varnish.tar.gz; \\\n\n\tcd /usr/src/varnish; \\\n\tfor p in /varnish-alpine-patches/*.patch; do \\\n\t\t[ -f \"$p\" ] || continue; \\\n\t\tpatch -p1 -i \"$p\"; \\\n\tdone; \\\n\tgnuArch=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\"; \\\n\t./autogen.sh; \\\n\t./configure \\\n\t\t--build=\"$gnuArch\" \\\n\t\t--without-jemalloc \\\n\t\t--with-rst2man=$(command -v true) \\\n\t\t--with-sphinx-build=$(command -v true) \\\n\t; \\\n\tmake -j \"$(nproc)\"; \\\n\tmake install; \\\n\n\tcd /; \\\n\trm -r /usr/src/varnish; \\\n\n\trunDeps=\"$( \\\n\t\tscanelf --needed --nobanner --format '%n#p' --recursive /usr/local \\\n\t\t\t| tr ',' '\\n' \\\n\t\t\t| sort -u \\\n\t\t\t| awk 'system(\"[ -e /usr/local/lib/\" $1 \" ] || [ -e /usr/local/lib/varnish/\" $1 \" ]\") == 0 { next } { print \"so:\" $1 }' \\\n\t)\"; \\\n\tapk add --no-cache --virtual .varnish-rundeps $runDeps; \\\n\n\tapk del .build-deps; \\\n\n\tvarnishd -V\n\nWORKDIR /usr/local/var/varnish\nRUN chown -R varnish:varnish /usr/local/var/varnish\nVOLUME /usr/local/var/varnish\n\nCOPY docker-varnish-entrypoint /usr/local/bin/\nENTRYPOINT [\"docker-varnish-entrypoint\"]\n\nEXPOSE 80\nCMD [\"varnishd\", \"-F\", \"-f\", \"/usr/local/etc/varnish/default.vcl\"]\n"
}