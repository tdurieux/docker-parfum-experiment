{
  "startTime": 1674246447934,
  "endTime": 1674246448793,
  "originalSmells": [
    {
      "rule": "rmRecursiveAfterMktempD",
      "position": {
        "lineStart": 35,
        "lineEnd": 35,
        "columnStart": 27,
        "columnEnd": 36
      }
    },
    {
      "rule": "rmRecursiveAfterMktempD",
      "position": {
        "lineStart": 61,
        "lineEnd": 61,
        "columnStart": 27,
        "columnEnd": 36
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 79,
        "lineEnd": 79,
        "columnStart": 7,
        "columnEnd": 54
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 138,
        "lineEnd": 138,
        "columnStart": 7,
        "columnEnd": 29
      }
    },
    {
      "rule": "gpgUseHaPools",
      "position": {
        "lineStart": 39,
        "lineEnd": 39,
        "columnStart": 6,
        "columnEnd": 85
      }
    },
    {
      "rule": "gpgUseHaPools",
      "position": {
        "lineStart": 40,
        "lineEnd": 40,
        "columnStart": 6,
        "columnEnd": 83
      }
    },
    {
      "rule": "gpgUseHaPools",
      "position": {
        "lineStart": 65,
        "lineEnd": 65,
        "columnStart": 6,
        "columnEnd": 85
      }
    },
    {
      "rule": "gpgUseHaPools",
      "position": {
        "lineStart": 66,
        "lineEnd": 66,
        "columnStart": 6,
        "columnEnd": 83
      }
    },
    {
      "rule": "gpgUseHaPools",
      "position": {
        "lineStart": 115,
        "lineEnd": 115,
        "columnStart": 6,
        "columnEnd": 85
      }
    },
    {
      "rule": "gpgUseHaPools",
      "position": {
        "lineStart": 116,
        "lineEnd": 116,
        "columnStart": 6,
        "columnEnd": 83
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM python:2.7.16-slim-stretch\n\n# add our user and group first to make sure their IDs get assigned consistently\nRUN groupadd -r sentry && useradd -r -m -g sentry sentry\n\nRUN apt-get update && apt-get install -y --no-install-recommends \\\n        gcc \\\n        git \\\n        libffi-dev \\\n        libgeoip-dev \\\n        libjpeg-dev \\\n        libpq-dev \\\n        libxml2-dev \\\n        libxmlsec1-dev \\\n        libxslt-dev \\\n        libyaml-dev \\\n        pkg-config \\\n    && rm -rf /var/lib/apt/lists/*\n\n# Sane defaults for pip\nENV PIP_NO_CACHE_DIR off\nENV PIP_DISABLE_PIP_VERSION_CHECK on\n\n# grab gosu for easy step-down from root\nRUN set -x \\\n    && export GOSU_VERSION=1.11 \\\n    && fetchDeps=\" \\\n        dirmngr \\\n        gnupg \\\n        wget \\\n    \" \\\n    && apt-get update && apt-get install -y --no-install-recommends $fetchDeps && rm -rf /var/lib/apt/lists/* \\\n    && wget -O /usr/local/bin/gosu \"https://github.com/tianon/gosu/releases/download/$GOSU_VERSION/gosu-$(dpkg --print-architecture)\" \\\n    && wget -O /usr/local/bin/gosu.asc \"https://github.com/tianon/gosu/releases/download/$GOSU_VERSION/gosu-$(dpkg --print-architecture).asc\" \\\n    && export GNUPGHOME=\"$(mktemp -d)\" \\\n    && for key in \\\n      B42F6819007F00F88E364FD4036A9C25BF357DD4; \\\n    do \\\n      gpg --batch --keyserver hkp://p80.ha.pool.sks-keyservers.net:80 --recv-keys \"$key\" || \\\n      gpg --batch --keyserver hkp://ipv4.ha.pool.sks-keyservers.net --recv-keys \"$key\" || \\\n      gpg --batch --keyserver hkp://pgp.mit.edu:80 --recv-keys \"$key\"; \\\n    done \\\n    && gpg --batch --verify /usr/local/bin/gosu.asc /usr/local/bin/gosu \\\n    && gpgconf --kill all \\\n    && rm -r \"$GNUPGHOME\" /usr/local/bin/gosu.asc \\\n    && chmod +x /usr/local/bin/gosu \\\n    && gosu nobody true \\\n    && apt-get purge -y --auto-remove $fetchDeps && rm -rf -d\n\n# grab tini for signal processing and zombie killing\nRUN set -x \\\n    && export TINI_VERSION=0.18.0 \\\n    && fetchDeps=\" \\\n        dirmngr \\\n        gnupg \\\n        wget \\\n    \" \\\n    && apt-get update && apt-get install -y --no-install-recommends $fetchDeps && rm -rf /var/lib/apt/lists/* \\\n    && wget -O /usr/local/bin/tini \"https://github.com/krallin/tini/releases/download/v$TINI_VERSION/tini\" \\\n    && wget -O /usr/local/bin/tini.asc \"https://github.com/krallin/tini/releases/download/v$TINI_VERSION/tini.asc\" \\\n    && export GNUPGHOME=\"$(mktemp -d)\" \\\n    && for key in \\\n      595E85A6B1B4779EA4DAAEC70B588DFF0527A9B7; \\\n    do \\\n      gpg --batch --keyserver hkp://p80.ha.pool.sks-keyservers.net:80 --recv-keys \"$key\" || \\\n      gpg --batch --keyserver hkp://ipv4.ha.pool.sks-keyservers.net --recv-keys \"$key\" || \\\n      gpg --batch --keyserver hkp://pgp.mit.edu:80 --recv-keys \"$key\"; \\\n    done \\\n    && gpg --batch --verify /usr/local/bin/tini.asc /usr/local/bin/tini \\\n    && gpgconf --kill all \\\n    && rm -r \"$GNUPGHOME\" /usr/local/bin/tini.asc \\\n    && chmod +x /usr/local/bin/tini \\\n    && tini -h \\\n    && apt-get purge -y --auto-remove $fetchDeps && rm -rf -d\n\n# Support for RabbitMQ and GeoIP\nRUN set -x \\\n    && apt-get update && apt-get install -y --no-install-recommends make && rm -rf /var/lib/apt/lists/* \\\n    && pip install --no-cache-dir librabbitmq==1.6.1 maxminddb==1.4.1 \\\n    && python -c 'import librabbitmq' \\\n    && python -c 'import maxminddb' \\\n    && apt-get purge -y --auto-remove make\n\nARG SENTRY_BUILD=master\nENV SENTRY_BUILD $SENTRY_BUILD\n\nRUN [ \"$SENTRY_BUILD\" != '' ] \\\n    # Install node to build assets\n    && export NODE_VERSION=8.15.1 \\\n    && export GNUPGHOME=\"$(mktemp -d)\" \\\n    && export YARN_CACHE_FOLDER=\"$(mktemp -d)\" \\\n    && buildDeps=\" \\\n        make \\\n        g++ \\\n        dirmngr \\\n        gnupg \\\n        wget \\\n    \" \\\n    && apt-get update && apt-get install -y --no-install-recommends $buildDeps && rm -rf /var/lib/apt/lists/* \\\n    # gpg keys listed at https://github.com/nodejs/node\n    && set -ex \\\n    && for key in \\\n      94AE36675C464D64BAFA68DD7434390BDBE9B9C5 \\\n      FD3A5288F042B6850C66B31F09FE44734EB7990E \\\n      71DCFD284A79C3B38668286BC97EC7A07EDE3FC1 \\\n      DD8F2338BAE7501E3DD5AC78C273792F7D83545D \\\n      C4F0DFFF4E8C1A8236409D08E73BC641CC11F4C8 \\\n      B9AE9905FFD7803F25714661B63B535A4C206CA9 \\\n      77984A986EBC2AA786BC0F66B01FBB92821C587A \\\n      8FCCA13FEF1D0C2E91008E09770F7A9A5AE15600 \\\n      4ED778F539E3634C779C87C6D7062848A1AB005C \\\n      A48C2BEE680E841632CD4E44F07496B3EB3C1762 \\\n      B9E2F5981AA6E0CD28160D9FF13993A75599653C; \\\n    do \\\n      gpg --batch --keyserver hkp://p80.ha.pool.sks-keyservers.net:80 --recv-keys \"$key\" || \\\n      gpg --batch --keyserver hkp://ipv4.ha.pool.sks-keyservers.net --recv-keys \"$key\" || \\\n      gpg --batch --keyserver hkp://pgp.mit.edu:80 --recv-keys \"$key\"; \\\n    done \\\n    && mkdir -p /usr/local/node && PATH=/usr/local/node/bin:$PATH \\\n    && rm -rf /var/lib/apt/lists/* \\\n    && wget \"https://nodejs.org/dist/v$NODE_VERSION/node-v$NODE_VERSION-linux-x64.tar.gz\" \\\n    && wget \"https://nodejs.org/dist/v$NODE_VERSION/SHASUMS256.txt.asc\" \\\n    && gpg --batch --verify SHASUMS256.txt.asc \\\n    && gpgconf --kill all \\\n    && grep \" node-v$NODE_VERSION-linux-x64.tar.gz\\$\" SHASUMS256.txt.asc | sha256sum -c - \\\n    && tar -xzf \"node-v$NODE_VERSION-linux-x64.tar.gz\" -C /usr/local/node --strip-components=1 \\\n    && rm -r \"$GNUPGHOME\" \"node-v$NODE_VERSION-linux-x64.tar.gz\" SHASUMS256.txt.asc \\\n\n    && mkdir -p /usr/src/sentry \\\n    && cd /usr/src/sentry \\\n    && wget -qO - \"https://github.com/getsentry/sentry/archive/${SENTRY_BUILD}.tar.gz\" | tar -xzf - --strip-components=1 \\\n    && python setup.py bdist_wheel \\\n\n    # Now remove node since it's not needed anymore in the final container\n    && rm -r \"$YARN_CACHE_FOLDER\" \\\n    && rm -rf /usr/local/node \\\n\n    && pip install --no-cache-dir dist/*.whl \\\n\n    && apt-get purge -y --auto-remove $buildDeps \\\n    && rm -rf /usr/src/sentry\n\nENV SENTRY_CONF=/etc/sentry \\\n    SENTRY_FILESTORE_DIR=/var/lib/sentry/files\n\nRUN mkdir -p $SENTRY_CONF && mkdir -p $SENTRY_FILESTORE_DIR\n\nCOPY sentry.conf.py /etc/sentry/\nCOPY config.yml /etc/sentry/\n\nCOPY docker-entrypoint.sh /entrypoint.sh\n\nEXPOSE 9000\nVOLUME /var/lib/sentry/files\n\nENTRYPOINT [\"/entrypoint.sh\"]\nCMD [\"run\", \"web\"]\n"
}