{
  "startTime": 1674242715877,
  "endTime": 1674242716371,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 20,
        "lineEnd": 20,
        "columnStart": 4,
        "columnEnd": 65
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 22,
        "lineEnd": 22,
        "columnStart": 4,
        "columnEnd": 110
      }
    },
    {
      "rule": "curlUseHttpsUrl",
      "position": {
        "lineStart": 22,
        "lineEnd": 22,
        "columnStart": 4,
        "columnEnd": 110
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 76,
        "lineEnd": 76,
        "columnStart": 36,
        "columnEnd": 78
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 81,
        "lineEnd": 81,
        "columnStart": 8,
        "columnEnd": 35
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 18,
        "lineEnd": 18,
        "columnStart": 25,
        "columnEnd": 95
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM ubuntu:16.04\nLABEL maintainer=\"John Chilton <jmchilton@gmail.com>\"\n\nARG CHROME_VERSION=\"google-chrome-beta\"\nARG CHROME_DRIVER_VERSION=\"2.38\"\n\n# TODO: merge with first ENV statement.\nENV DEBIAN_FRONTEND=noninteractive \\\n    DEBCONF_NONINTERACTIVE_SEEN=true \\\n    MYSQL_MAJOR=5.7 \\\n    POSTGRES_MAJOR=9.5 \\\n    GALAXY_ROOT=/galaxy \\\n    GALAXY_VIRTUAL_ENV=/galaxy_venv \\\n    GALAXY_VIRTUAL_ENV_2=/galaxy_venv \\\n    GALAXY_VIRTUAL_ENV_3=/galaxy_venv3 \\\n    LC_ALL=C.UTF-8\n\n# Pre-install a bunch of packages to speed up ansible steps.\nRUN apt-get update -y && apt-get install --no-install-recommends -y software-properties-common apt-transport-https curl && \\\n    apt-add-repository -y ppa:ansible/ansible && \\\n    curl -f -s https://dl-ssl.google.com/linux/linux_signing_key.pub | apt-key add - && \\\n    echo \"deb http://dl.google.com/linux/chrome/deb/ stable main\" >> /etc/apt/sources.list.d/google-chrome.list && \\\n    curl -f -s https://neuro.debian.net/lists/xenial.us-ca.full > /etc/apt/sources.list.d/neurodebian.sources.list && \\\n    apt-key adv --recv-keys --keyserver hkp://pool.sks-keyservers.net:80 0xA5D32F012649A5A9 && \\\n    apt-get update -y && \\\n    apt-get install -y --no-install-recommends postgresql postgresql-client ansible wget \\\n            python3-dev \\\n            git-core \\\n            python-prettytable python-virtualenv python-pip \\\n            rsync swig sysstat unzip \\\n            openssl \\\n            bzip2 \\\n            ca-certificates \\\n            openjdk-8-jre-headless \\\n            tzdata \\\n            sudo \\\n            locales \\\n            xvfb \\\n            ${CHROME_VERSION:-google-chrome-stable} \\\n            ffmpeg \\\n            bcftools \\\n            singularity-container \\\n            libnss3 libgconf-2-4 && \\\n    apt-get autoremove -y && apt-get clean && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*\n\n\nRUN mkdir -p /tmp/ansible && \\\n    mkdir -p /opt/galaxy/db && \\\n    chown -R postgres:postgres /opt/galaxy/db\n\nADD ansible_vars.yml /tmp/ansible/ansible_vars.yml\nADD provision.yml /tmp/ansible/provision.yml\n\nRUN mkdir /etc/galaxy && cd /tmp/ansible && mkdir roles && \\\n    mkdir roles/galaxyprojectdotorg.galaxy-os && \\\n    wget --quiet -O- https://github.com/galaxyproject/ansible-galaxy-os/archive/master.tar.gz | tar -xzf- --strip-components=1 -C roles/galaxyprojectdotorg.galaxy-os && \\\n    mkdir roles/galaxyprojectdotorg.cloudman-database && \\\n    wget --quiet -O- https://github.com/galaxyproject/ansible-cloudman-database/archive/master.tar.gz | tar -xzf- --strip-components=1 -C roles/galaxyprojectdotorg.cloudman-database && \\\n    mkdir roles/galaxyprojectdotorg.galaxy && \\\n    wget --quiet -O- https://github.com/galaxyproject/ansible-galaxy/archive/master.tar.gz | tar -xzf- --strip-components=1 -C roles/galaxyprojectdotorg.galaxy && \\\n    mkdir roles/galaxyprojectdotorg.galaxy-extras && \\\n    wget --quiet -O- https://github.com/galaxyproject/ansible-galaxy-extras/archive/dynamic_uwsgi_config.tar.gz | tar -xzf- --strip-components=1 -C roles/galaxyprojectdotorg.galaxy-extras && \\\n    mkdir roles/galaxyprojectdotorg.galaxy-toolshed && \\\n    wget --quiet -O- https://github.com/galaxyproject/ansible-galaxy-toolshed/archive/master.tar.gz | tar -xzf- --strip-components=1 -C roles/galaxyprojectdotorg.galaxy-toolshed && \\\n    ANSIBLE_FORCE_COLOR=1 PYTHONUNBUFFERED=1 ansible-playbook /tmp/ansible/provision.yml --tags=image -c local -e \"@ansible_vars.yml\" && \\\n    ANSIBLE_FORCE_COLOR=1 PYTHONUNBUFFERED=1 ansible-playbook /tmp/ansible/provision.yml --tags=database -c local -e \"@ansible_vars.yml\" && \\\n    ANSIBLE_FORCE_COLOR=1 PYTHONUNBUFFERED=1 ansible-playbook /tmp/ansible/provision.yml --tags=galaxy -c local -e \"@ansible_vars.yml\" && \\\n    ANSIBLE_FORCE_COLOR=1 PYTHONUNBUFFERED=1 ansible-playbook /tmp/ansible/provision.yml --tags=toolshed -c local -e \"@ansible_vars.yml\" && \\\n    apt-get autoremove -y && apt-get clean && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*\n\nRUN cd $GALAXY_ROOT && \\\n    virtualenv -p /usr/bin/python3 $GALAXY_VIRTUAL_ENV_3 && \\\n    for VENV in $GALAXY_VIRTUAL_ENV_2 $GALAXY_VIRTUAL_ENV_3; do \\\n        export GALAXY_VIRTUAL_ENV=$VENV && \\\n        ./scripts/common_startup.sh && \\\n        dev_requirements=./lib/galaxy/dependencies/dev-requirements.txt && \\\n        [ -f $dev_requirements ] && $VENV/bin/pip install --no-cache-dir -r $dev_requirements; done\n\nRUN for VENV in $GALAXY_VIRTUAL_ENV_3 $GALAXY_VIRTUAL_ENV_2; do \\\n        export GALAXY_VIRTUAL_ENV=$VENV && \\\n        . $GALAXY_VIRTUAL_ENV/bin/activate && \\\n        pip install --no-cache-dir psycopg2-binary; done && \\\n    cd $GALAXY_ROOT && \\\n    echo \"Prepopulating postgres database\" && \\\n    su -c '/usr/lib/postgresql/${POSTGRES_MAJOR}/bin/pg_ctl -o \"-F\" start -D /opt/galaxy/db' postgres && \\\n    sleep 3 && \\\n    GALAXY_CONFIG_DATABASE_CONNECTION=\"postgresql://root@localhost:5930/galaxy\" bash create_db.sh && \\\n    echo \"Prepopulating sqlite database\" && \\\n    GALAXY_CONFIG_DATABASE_CONNECTION=\"sqlite:////opt/galaxy/galaxy.sqlite\" bash create_db.sh && \\\n    echo \"Prepopulating toolshed postgres database\" && \\\n    TOOL_SHED_CONFIG_DATABASE_CONNECTION=\"postgresql://root@localhost:5930/toolshed\" bash create_db.sh tool_shed && \\\n    echo \"Prepopulating toolshed sqlite database\" && \\\n    TOOL_SHED_CONFIG_DATABASE_CONNECTION=\"sqlite:////opt/galaxy/toolshed.sqlite\" bash create_db.sh tool_shed\n\n#========================================\n# Add Selenium user with passwordless sudo\n#========================================\nRUN useradd seluser \\\n         --shell /bin/bash  \\\n         --create-home \\\n  && usermod -a -G sudo seluser \\\n  && echo 'ALL ALL = (ALL) NOPASSWD: ALL' >> /etc/sudoers \\\n  && echo 'seluser:secret' | chpasswd\n\nUSER seluser\n\n#==========\n# Selenium\n#==========\nRUN  sudo mkdir -p /opt/selenium \\\n  && sudo chown seluser:seluser /opt/selenium \\\n  && wget --no-verbose https://selenium-release.storage.googleapis.com/3.6/selenium-server-standalone-3.6.0.jar \\\n    -O /opt/selenium/selenium-server-standalone.jar\n\nUSER root\n\n#==============================\n# Scripts to run Selenium Node\n#==============================\nCOPY selenium/entry_point.sh selenium/functions.sh selenium/wrap_chrome_binary selenium/generate_config /opt/bin/\n\nRUN /opt/bin/wrap_chrome_binary\n\nUSER seluser\n\nRUN CD_VERSION=$(if [ ${CHROME_DRIVER_VERSION:-latest} = \"latest\" ]; then echo $(wget -qO- https://chromedriver.storage.googleapis.com/LATEST_RELEASE); else echo $CHROME_DRIVER_VERSION; fi) \\\n  && echo \"Using chromedriver version: \"$CD_VERSION \\\n  && wget --no-verbose -O /tmp/chromedriver_linux64.zip https://chromedriver.storage.googleapis.com/$CD_VERSION/chromedriver_linux64.zip \\\n  && rm -rf /opt/selenium/chromedriver \\\n  && unzip /tmp/chromedriver_linux64.zip -d /opt/selenium \\\n  && rm /tmp/chromedriver_linux64.zip \\\n  && mv /opt/selenium/chromedriver /opt/selenium/chromedriver-$CD_VERSION \\\n  && chmod 755 /opt/selenium/chromedriver-$CD_VERSION \\\n  && sudo ln -fs /opt/selenium/chromedriver-$CD_VERSION /usr/bin/chromedriver\n\nRUN /opt/bin/generate_config > /opt/selenium/config.json\n\n#============================\n# Some configuration options\n#============================\nENV SCREEN_WIDTH=1360 \\\n    SCREEN_HEIGHT=1020 \\\n    SCREEN_DEPTH=24 \\\n    DISPLAY=:99.0 \\\n    NODE_MAX_INSTANCES=1 \\\n    NODE_MAX_SESSION=1 \\\n    NODE_PORT=5555 \\\n    NODE_REGISTER_CYCLE=5000 \\\n    NODE_POLLING=5000 \\\n    NODE_UNREGISTER_IF_STILL_DOWN_AFTER=60000 \\\n    NODE_DOWN_POLLING_LIMIT=2 \\\n    NODE_APPLICATION_NAME=\"\" \\\n    DBUS_SESSION_BUS_ADDRESS=/dev/null\n\nUSER root\n\nADD run_test_wrapper.sh /usr/local/bin/run_test_wrapper.sh\n\nEXPOSE 9009\nEXPOSE 8080\nEXPOSE 80\n\nENTRYPOINT [\"/bin/bash\", \"/usr/local/bin/run_test_wrapper.sh\"]\n"
}