{
  "startTime": 1674241376034,
  "endTime": 1674241376253,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 37,
        "lineEnd": 37,
        "columnStart": 4,
        "columnEnd": 46
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 7,
        "lineEnd": 16,
        "columnStart": 4,
        "columnEnd": 10
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 34,
        "lineEnd": 34,
        "columnStart": 4,
        "columnEnd": 32
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 34,
        "lineEnd": 34,
        "columnStart": 4,
        "columnEnd": 32
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 7,
        "lineEnd": 16,
        "columnStart": 4,
        "columnEnd": 10
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 34,
        "lineEnd": 34,
        "columnStart": 4,
        "columnEnd": 32
      }
    }
  ],
  "repairedSmells": [
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 34,
        "lineEnd": 34,
        "columnStart": 4,
        "columnEnd": 56
      }
    }
  ],
  "repairedDockerfile": "FROM php:7.0-fpm\nWORKDIR /tmp\n\n# Install php exts and their dependencies\nRUN apt-get remove imagemagick\n\nRUN apt-get update && \\\n    apt-get install --no-install-recommends -y \\\n      libpng-dev \\\n      libmcrypt-dev \\\n      libssl-dev \\\n      libcurl4-openssl-dev \\\n      pkg-config \\\n      libxml2-dev \\\n      libyaml-dev \\\n      libmagickwand-dev \\\n      curl && rm -rf /var/lib/apt/lists/*;\n\nRUN docker-php-ext-install gd mcrypt mbstring xml mysqli pdo_mysql zip\nRUN pecl install imagick-beta redis yaml\nRUN docker-php-ext-enable imagick redis yaml\n\n# Remove the build-time deps\nRUN apt-get remove -y \\\n      libpng-dev \\\n      libmcrypt-dev \\\n      libssl-dev \\\n      libcurl4-openssl-dev \\\n      pkg-config \\\n      libxml2-dev \\\n      libyaml-dev \\\n      libmagickwand-dev\n\n# Install some other needed stuff\nRUN apt-get install --no-install-recommends -y git nginx && rm -rf /var/lib/apt/lists/*;\n\n# Install Composer\nRUN curl -f -sS https://getcomposer.org/installer | php -- --install-dir=/usr/bin --filename=composer\n\n# Make Composer not complain about root\nENV COMPOSER_ALLOW_SUPERUSER 1\n\n# Install Composer dependencies\nWORKDIR /app\nCOPY composer* ./\nRUN composer install --no-autoloader --no-scripts\n\n# Copy code to the docker container and run it\nCOPY . .\nRUN composer dump-autoload\n\n# Shrink the image size by removing deps that aren't needed anymore\nRUN apt-get autoremove -y\n\n# Configure nginx\nCOPY ./docker/nginx-site /etc/nginx/sites-enabled/default\n\n# Do some stuff for error logging\nCOPY ./docker/php-fpm.conf /usr/local/etc/php-fpm.d/enable-logging.conf\n\n# Make some dirs for mount points\nRUN mkdir -p /app/storage /app/storage/logs /app/storage/framework /app/boostrap\n\n# Fix permissions for some directories\nRUN chown -R www-data /app/storage\nRUN chown -R www-data /app/bootstrap\n\n# Expose the nginx port\nEXPOSE 80\n\n# Start things\nCMD [ \"bash\", \"./docker-entrypoint.sh\" ]\n"
}