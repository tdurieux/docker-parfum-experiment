{
  "startTime": 1674250635357,
  "endTime": 1674250635439,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 20,
        "lineEnd": 20,
        "columnStart": 16,
        "columnEnd": 81
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# Instructions for this package are taken from:\n#   https://wiki.ubuntu.com/UEFI/EDK2\n#   https://wiki.linaro.org/LEG/UEFIforQEMU\n#\n# On ARM here's what works for other boars:\n#   git clone https://github.com/tianocore/edk2\n#   git clone https://github.com/tianocore/edk2-platforms\n#   git clone https://github.com/tianocore/edk2-non-osi\n#   git clone https://git.linaro.org/uefi/uefi-tools.git\n#   ./uefi-tools/edk2-build.sh -b DEBUG -b RELEASE all\n#\n# It is possible to do a docker-based aarch64 build on x86.\n# If you want to do that -- make sure to pass the following\n# argument to the docker build:\n#   --build-arg BUILD_CONTAINER=alpine@sha256:286be1c7f84de7cbae6cf8aa4e13b3ce2f2512353b3e734336e47e92de4a881e\nARG BUILD_CONTAINER=alpine:3.7\nFROM ${BUILD_CONTAINER} as build\n\n# hadolint ignore=DL3018\nRUN apk add --no-cache curl make gcc g++ python libuuid iasl nasm util-linux-dev bash\nRUN mkdir /ws ; curl -f -L https://github.com/tianocore/edk2/archive/vUDK2018.tar.gz | tar --strip-components 1 -C /ws -xzf -\n\nWORKDIR /ws\nENV BUILD_ARGS_aarch64 -b RELEASE -t GCC5 -a AARCH64 -p ArmVirtPkg/ArmVirtQemu.dsc\nENV BUILD_ARGS_x86_64  -b RELEASE -t GCC5 -a X64 -p OvmfPkg/OvmfPkgX64.dsc\nCOPY patch /ws/patch\nRUN bash -c 'patch -p0 < patch/*'\nRUN make -C BaseTools\nRUN bash -c \". edksetup.sh ; build \\$BUILD_ARGS_\"`uname -m`\nRUN cp Build/OvmfX64/RELEASE_*/FV/OVMF*.fd . 2>/dev/null || \\\n    (cp Build/ArmVirtQemu-AARCH64/RELEASE_GCC5/FV/QEMU_EFI.fd OVMF.fd ;\\\n     cp Build/ArmVirtQemu-AARCH64/RELEASE_GCC5/FV/QEMU_VARS.fd OVMF_VARS.fd)\n\nFROM scratch\nCOPY --from=build /ws/OVMF*.fd /\n"
}