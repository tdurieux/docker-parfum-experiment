{
  "startTime": 1674244419553,
  "endTime": 1674244419691,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 35,
        "lineEnd": 35,
        "columnStart": 4,
        "columnEnd": 90
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 31,
        "lineEnd": 31,
        "columnStart": 9,
        "columnEnd": 37
      }
    },
    {
      "rule": "aptGetInstallUseY",
      "position": {
        "lineStart": 29,
        "lineEnd": 29,
        "columnStart": 9,
        "columnEnd": 61
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 29,
        "lineEnd": 29,
        "columnStart": 9,
        "columnEnd": 61
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 29,
        "lineEnd": 29,
        "columnStart": 9,
        "columnEnd": 61
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 29,
        "lineEnd": 29,
        "columnStart": 9,
        "columnEnd": 61
      }
    }
  ],
  "repairedSmells": [
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 29,
        "lineEnd": 29,
        "columnStart": 9,
        "columnEnd": 88
      }
    }
  ],
  "repairedDockerfile": "# To build and deploy, from this directory:\n# $ docker build -f Dockerfile.circle_build -t allofustest/workbench:buildimage-X.Y.Z .\n# Test out the new image with:\n# $ docker run -it allofustest/workbench:buildimage-X.Y.Z /bin/bash\n# Update all mentions of allofustest/workbench:buildimage-X.Y.Z in\n# .circleci/circle.yml by incrementing the numbers. Using the new values, run:\n# $ docker login  # interactive prompts\n# $ docker push allofustest/workbench:buildimage-X.Y.Z\n# For permission to push, request to be added to the DockerHub repository.\n# Include your changes to circle.yml in the PR that uses the build image.\n\n# Note: we depend on dockerize being installed on this image.\n#\n# We use OpenJDK 8, Node, and some common browsers from CircleCI's base image\n# see: https://circleci.com/docs/2.0/circleci-images/#language-image-variants\nFROM circleci/openjdk:8-jdk-node-browsers\n\nUSER circleci\n\nENV CLOUD_SDK_VERSION 215.0.0\n\nRUN cd && \\\n  wget https://dl.google.com/dl/cloudsdk/channels/rapid/downloads/google-cloud-sdk-${CLOUD_SDK_VERSION}-linux-x86_64.tar.gz -O gcloud.tgz && \\\n  tar -xf gcloud.tgz && \\\n  ./google-cloud-sdk/install.sh  --quiet && \\\n  ~/google-cloud-sdk/bin/gcloud components install app-engine-java && \\\n  rm -rf gcloud.tgz\n\nRUN sudo apt-get update\nRUN sudo apt-get install -y --no-install-recommends gettext ruby mysql-client python-pip && rm -rf /var/lib/apt/lists/*;\nRUN sudo pip install --upgrade pip\nRUN sudo pip install --no-cache-dir --upgrade pylint\n\nENV PATH=/home/circleci/node/bin:/home/circleci/google-cloud-sdk/bin:$PATH\n\nRUN curl -f https://dl.google.com/cloudsql/cloud_sql_proxy.linux.amd64 > /tmp/cloud_sql_proxy \\\n  && sudo mv /tmp/cloud_sql_proxy /usr/local/bin && sudo chmod +x /usr/local/bin/cloud_sql_proxy\n\n# It never makes sense for Gradle to run a daemon within a docker container.\nENV GRADLE_OPTS=\"-Dorg.gradle.daemon=false\"\n\n# We're not yet ready to upgrade to gradle 5 (the new default for apt-get).\nENV GRADLE_VERSION 4.10.2\n\nRUN wget \"https://services.gradle.org/distributions/gradle-${GRADLE_VERSION}-bin.zip\" -O /tmp/gradle.zip \\\n  && sudo unzip /tmp/gradle.zip -d /opt/gradle\nENV PATH=\"/opt/gradle/gradle-${GRADLE_VERSION}/bin:${PATH}\"\n\nRUN sudo gem install jira-ruby"
}