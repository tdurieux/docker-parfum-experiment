{
  "startTime": 1674248620951,
  "endTime": 1674248621080,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 27,
        "lineEnd": 28,
        "columnStart": 4,
        "columnEnd": 22
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 29,
        "lineEnd": 29,
        "columnStart": 4,
        "columnEnd": 23
      }
    },
    {
      "rule": "apkAddUseNoCache",
      "position": {
        "lineStart": 1,
        "lineEnd": 15,
        "columnStart": 4,
        "columnEnd": 10
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM alpine:3.8\nRUN apk add --no-cache --update \\\n  bison \\\n  build-base \\\n  clang-dev \\\n  clang-static \\\n  curl \\\n  cmake \\\n  elfutils-dev \\\n  flex-dev \\\n  git \\\n  linux-headers \\\n  llvm5-dev \\\n  llvm5-static \\\n  python \\\n  zlib-dev\n\n# Put LLVM directories where CMake expects them to be\nRUN ln -s /usr/lib/cmake/llvm5 /usr/lib/cmake/llvm\nRUN ln -s /usr/include/llvm5/llvm /usr/include/llvm\nRUN ln -s /usr/include/llvm5/llvm-c /usr/include/llvm-c\n\n# Alpine currently does not have a package for bcc. Until they do,\n# we'll peg the alpine build to bcc v0.8.0\n#\n# We're building here so docker can cache the build layer\nWORKDIR /\nRUN curl -f -L https://github.com/iovisor/bcc/archive/v0.8.0.tar.gz \\\n  --output /bcc.tar.gz\nRUN tar xvf /bcc.tar.gz && rm /bcc.tar.gz\nRUN mv bcc-0.8.0 bcc\nRUN cd /bcc && mkdir build && cd build && cmake .. && make install -j4 && \\\n  cp src/cc/libbcc.a /usr/local/lib64/libbcc.a && \\\n  cp src/cc/libbcc-loader-static.a /usr/local/lib64/libbcc-loader-static.a && \\\n  cp src/cc/libbpf.a /usr/local/lib64/libbpf.a\n\n\nCOPY build.sh /build.sh\nENTRYPOINT [\"/bin/sh\", \"/build.sh\"]\n"
}