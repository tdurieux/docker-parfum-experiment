{
  "startTime": 1674241136821,
  "endTime": 1674241137490,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 34,
        "lineEnd": 34,
        "columnStart": 4,
        "columnEnd": 87
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 39,
        "lineEnd": 39,
        "columnStart": 4,
        "columnEnd": 87
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 45,
        "lineEnd": 45,
        "columnStart": 4,
        "columnEnd": 87
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 56,
        "lineEnd": 56,
        "columnStart": 4,
        "columnEnd": 82
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 64,
        "lineEnd": 64,
        "columnStart": 4,
        "columnEnd": 115
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 67,
        "lineEnd": 67,
        "columnStart": 4,
        "columnEnd": 142
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 68,
        "lineEnd": 68,
        "columnStart": 4,
        "columnEnd": 148
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 86,
        "lineEnd": 86,
        "columnStart": 4,
        "columnEnd": 79
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 69,
        "lineEnd": 69,
        "columnStart": 32,
        "columnEnd": 67
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM gcr.io/google_containers/kube-cross:v1.6.2-1\n\nARG GOARCH=arm\nARG CC=arm-linux-gnueabi-gcc\n\nENV GOARM=6 \\\n\tCGO_ENABLED=0 \\\n\tOUTPUT_DIR=/build/bin \\\n\tREGISTRY_DIR=${GOPATH}/src/github.com/docker/distribution \\\n\tHEAPSTER_DIR=${GOPATH}/src/k8s.io/heapster \\\n\tINFLUXDB_DIR=${GOPATH}/src/github.com/influxdb/influxdb \\\n\tGRAFANA_DIR=${GOPATH}/src/github.com/grafana/grafana \\\n\tGRAFANA_ROOTFS_DIR=/tmp/grafana \\\n\tCONTRIB_DIR=${GOPATH}/src/k8s.io/contrib \\\n\tHELM_DIR=${GOPATH}/src/k8s.io/helm\n\nENV REGISTRY_VERSION=v2.5.0 \\\n\tHEAPSTER_VERSION=v1.2.0-beta.2 \\\n\tINFLUXDB_VERSION=v0.13.0 \\\n\tGRAFANA_VERSION=v3.1.1 \\\n\tGRAFANA_DL_VERSION=3.1.1-1470047149 \\\n\tCONTRIB_COMMIT=c694368aadb0e9d7d5710ea6d76ee9d10756580c \\\n\tINGRESS_CONTROLLER_VERSION=0.8.3 \\\n\tHELM_VERSION=v2.0.0-alpha.3\n\nRUN mkdir -p \\\n\t${OUTPUT_DIR} \\\n\t${REGISTRY_DIR} \\\n\t${HEAPSTER_DIR} \\\n\t${INFLUXDB_DIR} \\\n\t${GRAFANA_DIR} \\\n\t${CONTRIB_DIR} \\\n\t${HELM_DIR}\n\nRUN curl -f -sSL https://github.com/docker/distribution/archive/${REGISTRY_VERSION}.tar.gz | tar -xz -C ${REGISTRY_DIR} --strip-components=1 \\\n\t&& cd ${REGISTRY_DIR} \\\n\t&& go build -a --installsuffix cgo --ldflags \"-X `go list ./version`.Version=${REGISTRY_VERSION}\" -o bin/registry ./cmd/registry \\\n\t&& cp bin/registry ${OUTPUT_DIR}\n\nRUN curl -f -sSL https://github.com/kubernetes/heapster/archive/${HEAPSTER_VERSION}.tar.gz | tar -C ${HEAPSTER_DIR} -xz --strip-components=1 \\\n\t&& cd ${HEAPSTER_DIR} \\\n\t&& go build -a --installsuffix cgo -o heapster k8s.io/heapster/metrics \\\n\t&& go build -a --installsuffix cgo -o eventer k8s.io/heapster/events \\\n\t&& cp heapster eventer ${OUTPUT_DIR}\n\nRUN curl -f -sSL https://github.com/influxdata/influxdb/archive/${INFLUXDB_VERSION}.tar.gz | tar -C ${INFLUXDB_DIR} -xz --strip-components=1 \\\n\t&& cd ${INFLUXDB_DIR} \\\n\t&& GOARCH=amd64 go get github.com/sparrc/gdm \\\n\t&& gdm restore \\\n\t&& ln -s $GOPATH/src/github.com/influxdb/influxdb $GOPATH/src/github.com/influxdata/ \\\n\t&& go build -a --installsuffix cgo --ldflags=\"-s\" -o influxd ./cmd/influxd \\\n\t&& cp influxd ${OUTPUT_DIR} \\\n\t&& GOARCH=amd64 go build -a --installsuffix cgo --ldflags=\"-s\" -o influxd ./cmd/influxd \\\n\t&& ./influxd config > ${OUTPUT_DIR}/influxdb.toml \\\n\t&& sed -i 's/dir = \"\\/.*influxdb/dir = \"\\/data/' ${OUTPUT_DIR}/influxdb.toml\n\nRUN curl -f -sSL https://github.com/grafana/grafana/archive/${GRAFANA_VERSION}.tar.gz | tar -C ${GRAFANA_DIR} -xz --strip-components=1 \\\n\t&& cd ${GRAFANA_DIR} \\\n\t&& GOARCH=amd64 CGO_ENABLED=1 CC=gcc go run build.go setup \\\n\t&& godep restore \\\n\t&& CGO_ENABLED=1 go build --ldflags=\"-w -X main.version=${GRAFANA_VERSION} -X main.commit=unknown-dev -X main.timestamp=0 -extldflags '-static'\" -o grafana-server ./pkg/cmd/grafana-server \\\n\t&& CGO_ENABLED=1 go build --ldflags=\"-w -X main.version=${GRAFANA_VERSION} -X main.commit=unknown-dev -X main.timestamp=0 -extldflags '-static'\" -o grafana-cli ./pkg/cmd/grafana-cli \\\n\t&& cp grafana-server grafana-cli ${OUTPUT_DIR}\n\nRUN curl -f -sSL https://grafanarel.s3.amazonaws.com/builds/grafana_${GRAFANA_DL_VERSION}_amd64.deb > /tmp/grafana.deb \\\n\t&& dpkg -x /tmp/grafana.deb ${GRAFANA_ROOTFS_DIR} \\\n\t&& cp -f ${GRAFANA_DIR}/grafana-server ${GRAFANA_DIR}/grafana-cli ${GRAFANA_ROOTFS_DIR}/usr/sbin/ \\\n\t&& curl -f -sSL https://raw.githubusercontent.com/kubernetes/heapster/${HEAPSTER_VERSION}/grafana/dashboards/pods.json > ${OUTPUT_DIR}/pods.json \\\n\t&& curl -f -sSL https://raw.githubusercontent.com/kubernetes/heapster/${HEAPSTER_VERSION}/grafana/dashboards/cluster.json > ${OUTPUT_DIR}/cluster.json \\\n\t&& cd ${GRAFANA_ROOTFS_DIR} && tar -cf ${OUTPUT_DIR}/grafana.tar . && rm ${OUTPUT_DIR}/grafana.tar\n\nRUN git clone https://github.com/kubernetes/contrib ${CONTRIB_DIR} \\\n\t&& cd ${CONTRIB_DIR} && git checkout ${CONTRIB_COMMIT} \\\n\t&& cd ${CONTRIB_DIR}/service-loadbalancer \\\n\t&& godep go build -a --installsuffix cgo -ldflags '-w' -o service_loadbalancer ./service_loadbalancer.go ./loadbalancer_log.go \\\n\t&& cp service_loadbalancer ${OUTPUT_DIR} \\\n\t&& cd ${CONTRIB_DIR}/scale-demo/aggregator \\\n    && make aggregator \\\n    && cp aggregator ${OUTPUT_DIR} \\\n\t&& cd ${CONTRIB_DIR}/scale-demo/vegeta \\\n    && CGO_ENABLED=0 GOOS=linux godep go build -a -installsuffix cgo -ldflags '-w' -o loader \\\n    && cp loader ${OUTPUT_DIR} \\\n\t&& cd ${CONTRIB_DIR}/ingress/controllers/nginx \\\n    && CGO_ENABLED=0 GOOS=linux godep go build -a -installsuffix cgo -ldflags \"-w -X main.version=${INGRESS_CONTROLLER_VERSION} -X main.gitRepo=git@github.com:kubernetes/contrib\" -o nginx-ingress-controller \\\n    && cp nginx-ingress-controller ${OUTPUT_DIR}\n\nRUN curl -f -sSL https://github.com/kubernetes/helm/archive/${HELM_VERSION}.tar.gz | tar -xz -C ${HELM_DIR} --strip-components=1 \\\n\t&& cd ${HELM_DIR} \\\n\t&& GOARCH=amd64 make bootstrap \\\n\t&& go build -a -installsuffix cgo -ldflags '-w' -o helm ./cmd/helm \\\n\t&& go build -a -installsuffix cgo -ldflags '-w' -o tiller ./cmd/tiller \\\n\t&& cp helm tiller ${OUTPUT_DIR}\n"
}