{
  "startTime": 1674241181841,
  "endTime": 1674241182121,
  "originalSmells": [
    {
      "rule": "wgetUseHttpsUrl",
      "position": {
        "lineStart": 13,
        "lineEnd": 13,
        "columnStart": 4,
        "columnEnd": 90
      }
    },
    {
      "rule": "wgetUseHttpsUrl",
      "position": {
        "lineStart": 14,
        "lineEnd": 14,
        "columnStart": 4,
        "columnEnd": 89
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 6,
        "lineEnd": 7,
        "columnStart": 4,
        "columnEnd": 83
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 6,
        "lineEnd": 7,
        "columnStart": 4,
        "columnEnd": 83
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM ubuntu:16.04\n\nLABEL maintainer yutopp\n\n# Setup\nRUN apt-get update -y && \\\n    apt-get install --no-install-recommends -y git wget curl unzip \\\n                       g++ aspcud cmake ninja-build python m4 pkg-config libffi-dev && rm -rf /var/lib/apt/lists/*;\n\n# https://llvm.org/svn/llvm-project/llvm/tags/RELEASE_500/final/CMakeLists.txt\nENV llvm_version 5.0.0\n\n# Download LLVM/Clang 5.0.0\nRUN wget https://www.llvm.org/releases/${llvm_version}/llvm-${llvm_version}.src.tar.xz -O - | tar -xJ\nRUN wget https://www.llvm.org/releases/${llvm_version}/cfe-${llvm_version}.src.tar.xz -O - | tar -xJ\nRUN mv cfe-${llvm_version}.src llvm-${llvm_version}.src/tools/clang\nRUN cd llvm-${llvm_version}.src && \\\n    mkdir build && \\\n    cd build && \\\n    cmake -G 'Ninja' \\\n          -DCMAKE_INSTALL_PREFIX=/usr/local \\\n          -DCMAKE_BUILD_TYPE=Release \\\n          -DLLVM_TARGETS_TO_BUILD=\"X86\" \\\n          -DLLVM_TARGETS_WITH_JIT=\"X86\" \\\n          -DLLVM_EXPERIMENTAL_TARGETS_TO_BUILD=\"WebAssembly\" \\\n          -DLLVM_ENABLE_TERMINFO=OFF \\\n          -DLLVM_ENABLE_ZLIB=OFF \\\n          -DLLVM_BUILD_TOOLS=clang,llc \\\n          -DLLVM_INCLUDE_UTILS=OFF \\\n          -DLLVM_BUILD_UTILS=OFF \\\n          -DLLVM_INCLUDE_EXAMPLES=OFF \\\n          -DLLVM_INCLUDE_TESTS=OFF \\\n          -DLLVM_INCLUDE_GO_TESTS=OFF \\\n          -DLLVM_INCLUDE_DOCS=OFF \\\n          -DLLVM_BUILD_DOCS=OFF \\\n          ..\n\n# Build LLVM for static lib, Clang\nRUN cd llvm-${llvm_version}.src/build && \\\n    ninja\nRUN cd llvm-${llvm_version}.src/build && \\\n    ninja llvm-config\n\n# Install LLVM, Clang (with adhoc cp)\nRUN cd llvm-${llvm_version}.src/build && \\\n    ninja install && \\\n    ninja install llc && \\\n    cp bin/llvm-config /usr/local/bin/.\n\n# Clean up LLVM src\nRUN rm -rf llvm-${llvm_version}.src\n\n# OCaml version\nENV ocaml_version 4.04.2\n\n# Install OCaml and packages\nRUN wget https://raw.github.com/ocaml/opam/master/shell/opam_installer.sh -O - | sh -s /usr/local/bin\nENV OPAMKEEPBUILDDIR false\nENV OPAMBUILDDOC false\nENV OPAMDOWNLOADJOBS 1\nRUN opam init -y -a --comp=${ocaml_version}\nRUN opam install omake.0.10.2 menhir batteries ctypes-foreign stdint ocamlgraph loga\nRUN opam install ounit bisect_ppx ocveralls\n# BEGIN: adhoc for WebAssembly\nRUN opam install llvm.${llvm_version} --deps-only\nRUN mkdir opam_source && \\\n    cd opam_source && \\\n    opam source llvm.${llvm_version}\nCOPY patches /patches\nRUN cd opam_source/llvm.${llvm_version} && \\\n    patch install.sh /patches/opam_llvm.5.0.0_install.sh.patch && \\\n    patch opam /patches/opam_llvm.5.0.0_opam.patch && \\\n    opam pin add llvm-custom . --kind=path\n# END: adhoc for WebAssembly\nRUN cp ~/.opam/${ocaml_version}/lib/llvm/static/*.cmxa ~/.opam/${ocaml_version}/lib/llvm/. # adhoc\nRUN rm ~/.opam/archives/* && \\\n    rm ~/.opam/repo/default/archives/* && \\\n    rm ~/.opam/${ocaml_version}/bin/*.byte && \\\n    rm -r ~/.opam/repo/default/packages/* && \\\n    rm -r ~/.opam/repo/default/compilers/*\n\n#\nRUN echo 'eval `opam config env`' > ~/.bashrc\n\nRUN apt-get clean -qq -y && rm -rf /var/lib/apt/lists/*\n\n#\nRUN mkdir /cibase\nWORKDIR /cibase\n\nENTRYPOINT [\"/bin/bash\"]\n"
}