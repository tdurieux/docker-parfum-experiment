{
  "startTime": 1674238524606,
  "endTime": 1674238525108,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 33,
        "lineEnd": 34,
        "columnStart": 4,
        "columnEnd": 191
      }
    },
    {
      "rule": "curlUseHttpsUrl",
      "position": {
        "lineStart": 33,
        "lineEnd": 34,
        "columnStart": 4,
        "columnEnd": 191
      }
    },
    {
      "rule": "wgetUseHttpsUrl",
      "position": {
        "lineStart": 78,
        "lineEnd": 78,
        "columnStart": 4,
        "columnEnd": 91
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 14,
        "lineEnd": 14,
        "columnStart": 2,
        "columnEnd": 27
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 11,
        "lineEnd": 11,
        "columnStart": 2,
        "columnEnd": 44
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 5,
        "lineEnd": 5,
        "columnStart": 2,
        "columnEnd": 151
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 5,
        "lineEnd": 5,
        "columnStart": 2,
        "columnEnd": 151
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM ubuntu:14.04\nMAINTAINER xenron <xenron@hotmail.com>\n\n# install software package\nRUN apt-get update -y && \\\n  apt-get install --no-install-recommends -y vim tar unzip dnsmasq wget net-tools curl openssh-server nano g++ autoconf automake libtool cmake zlib1g-dev pkg-config libssl-dev && rm -rf /var/lib/apt/lists/*;\n\nRUN mkdir -p /opt\n\n# Protocol buffers\nRUN wget -q -o out.log -P /tmp https://github.com/google/protobuf/releases/download/v2.5.0/protobuf-2.5.0.tar.gz && \\\n  tar xzf /tmp/protobuf-2.5.0.tar.gz -C /opt && \\\n  cd /opt/protobuf-2.5.0 && \\\n  ./autogen.sh && \\\n  ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --prefix=/usr && \\\n  make && \\\n  make check && \\\n  make install && \\\n  protoc --version && rm /tmp/protobuf-2.5.0.tar.gz\n\n# Clean\nRUN apt-get clean -y && apt-get autoclean -y && apt-get autoremove -y && \\\n  rm -rf /var/lib/{apt,dpkg,cache,log}/ && \\\n  rm -rf /tmp\n\n# Java Version\nENV JAVA_VERSION_MAJOR 8\nENV JAVA_VERSION_MINOR 111\nENV JAVA_VERSION_BUILD 14\nENV JAVA_PACKAGE       jdk\n\n# Download and unarchive Java\nRUN mkdir -p /opt && \\\n    curl -f -jksSLH \"Cookie: oraclelicense=accept-securebackup-cookie\" \\\n    https://download.oracle.com/otn-pub/java/jdk/${JAVA_VERSION_MAJOR}u${JAVA_VERSION_MINOR}-b${JAVA_VERSION_BUILD}/${JAVA_PACKAGE}-${JAVA_VERSION_MAJOR}u${JAVA_VERSION_MINOR}-linux-x64.tar.gz | gunzip -c - | tar -xf - -C /opt && \\\n    ln -s /opt/jdk1.${JAVA_VERSION_MAJOR}.0_${JAVA_VERSION_MINOR} /opt/jdk && \\\n    rm -rf /opt/jdk/*src.zip \\\n         /opt/jdk/lib/missioncontrol \\\n         /opt/jdk/lib/visualvm \\\n         /opt/jdk/lib/*javafx* \\\n         /opt/jdk/jre/lib/plugin.jar \\\n         /opt/jdk/jre/lib/ext/jfxrt.jar \\\n         /opt/jdk/jre/bin/javaws \\\n         /opt/jdk/jre/lib/javaws.jar \\\n         /opt/jdk/jre/lib/desktop \\\n         /opt/jdk/jre/plugin \\\n         /opt/jdk/jre/lib/deploy* \\\n         /opt/jdk/jre/lib/*javafx* \\\n         /opt/jdk/jre/lib/*jfx* \\\n         /opt/jdk/jre/lib/amd64/libdecora_sse.so \\\n         /opt/jdk/jre/lib/amd64/libprism_*.so \\\n         /opt/jdk/jre/lib/amd64/libfxplugins.so \\\n         /opt/jdk/jre/lib/amd64/libglass.so \\\n         /opt/jdk/jre/lib/amd64/libgstreamer-lite.so \\\n         /opt/jdk/jre/lib/amd64/libjavafx*.so \\\n         /opt/jdk/jre/lib/amd64/libjfx*.so\n\n# move all configuration files into container\nADD files/* /usr/local/ \n\n# set environment variable\nENV JAVA_HOME /opt/jdk\nENV PATH ${PATH}:${JAVA_HOME}/bin\n\n# configure ssh free key access\nRUN mkdir /var/run/sshd && \\\n  ssh-keygen -t rsa -f ~/.ssh/id_rsa -P '' && \\\n  cat ~/.ssh/id_rsa.pub >> ~/.ssh/authorized_keys && \\\n  mv /usr/local/ssh_config ~/.ssh/config && \\\n  sed 's@session\\s*required\\s*pam_loginuid.so@session optional pam_loginuid.so@g' -i /etc/pam.d/sshd\n\n# Hadoop\nRUN wget -q -o out.log -P /tmp https://archive.apache.org/dist/hadoop/common/hadoop-2.7.3/hadoop-2.7.3-src.tar.gz && \\\n  tar xzf /tmp/hadoop-2.7.3-src.tar.gz -C /opt && \\\n  rm /tmp/hadoop-2.7.3-src.tar.gz && \\\n  mv /opt/hadoop-2.7.3-src /opt/hadoop\n\n# Scala\nRUN wget -q -o out.log -P /tmp https://downloads.lightbend.com/scala/2.11.8/scala-2.11.8.tgz && \\\n  tar xzf /tmp/scala-2.11.8.tgz -C /opt && \\\n  rm /tmp/scala-2.11.8.tgz && \\\n  mv /opt/scala-2.11.8 /opt/scala\n\n# Sbt\nRUN wget -q -o out.log -P /tmp https://dl.bintray.com/sbt/native-packages/sbt/0.13.13/sbt-0.13.13.tgz && \\\n  tar xzf /tmp/sbt-0.13.13.tgz -C /opt && \\\n  rm /tmp/sbt-0.13.13.tgz && \\\n  mv /opt/sbt-launcher-packaging-0.13.13 /opt/sbt\n\n# Spark\nRUN wget -q -o out.log -P /tmp https://archive.apache.org/dist/spark/spark-1.6.3/spark-1.6.3.tgz && \\\n  tar xzf /tmp/spark-1.6.3.tgz -C /opt && \\\n  rm /tmp/spark-1.6.3.tgz && \\\n  mv /opt/spark-1.6.3 /opt/spark\n\nRUN mv /usr/local/bashrc ~/.bashrc\n\nRUN . ~/.bashrc && \\\n  cd /opt/spark && \\\n  sbt assembly -Pyarn -Phadoop-2.7 -Pspark-ganglia-lgpl -Pkinesis-asl -Phive\n\n\n"
}