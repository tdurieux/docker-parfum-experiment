{
  "startTime": 1674235658933,
  "endTime": 1674235659295,
  "originalSmells": [
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 107,
        "lineEnd": 107,
        "columnStart": 19,
        "columnEnd": 30
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 55,
        "lineEnd": 55,
        "columnStart": 4,
        "columnEnd": 24
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 77,
        "lineEnd": 77,
        "columnStart": 4,
        "columnEnd": 25
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 105,
        "lineEnd": 105,
        "columnStart": 4,
        "columnEnd": 31
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 120,
        "lineEnd": 120,
        "columnStart": 4,
        "columnEnd": 26
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 28,
        "lineEnd": 30,
        "columnStart": 4,
        "columnEnd": 38
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 28,
        "lineEnd": 30,
        "columnStart": 4,
        "columnEnd": 38
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# Copyright 2018 Google LLC\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\nARG DISTRO_VERSION=xenial\nFROM ubuntu:${DISTRO_VERSION} AS devtools\n\n# Please keep the formatting in these commands, it is optimized to cut & paste\n# into the README.md file.\n\n## [START INSTALL.md]\n\n# Install the minimal development tools:\n\n## [START README.md]\n\n# ```bash\nRUN apt update && \\\n    apt install --no-install-recommends -y build-essential cmake git gcc g++ cmake \\\n        libcurl4-openssl-dev libssl-dev make \\\n        pkg-config tar wget zlib1g-dev && rm -rf /var/lib/apt/lists/*;\n# ```\n\n## [END README.md]\n\nFROM devtools\nCOPY ci/install-retry.sh /retry3\n\n## [START IGNORED]\n# Verify that the tools above are enough to compile google-cloud-cpp when using\n# external projects.\nWORKDIR /home/build/external\nCOPY . /home/build/external\nRUN cmake -H. -Bcmake-out -DCMAKE_BUILD_TYPE=Debug\nRUN cmake --build cmake-out -- -j $(nproc)\nRUN (cd cmake-out && ctest --output-on-failure)\n## [END IGNORED]\n\n# #### crc32c\n\n# There is no Ubuntu-16.04 package for this library. To install it use:\n\n# ```bash\nWORKDIR /var/tmp/build\nRUN /retry3 wget -q https://github.com/google/crc32c/archive/1.0.6.tar.gz\nRUN tar -xf 1.0.6.tar.gz && rm 1.0.6.tar.gz\nWORKDIR /var/tmp/build/crc32c-1.0.6\nRUN cmake \\\n      -DCMAKE_BUILD_TYPE=Release \\\n      -DBUILD_SHARED_LIBS=yes \\\n      -DCRC32C_BUILD_TESTS=OFF \\\n      -DCRC32C_BUILD_BENCHMARKS=OFF \\\n      -DCRC32C_USE_GLOG=OFF \\\n      -H. -Bcmake-out/crc32c\nRUN cmake --build cmake-out/crc32c --target install -- -j $(nproc)\nRUN ldconfig\n# ```\n\n# #### Protobuf\n\n# While protobuf-2.6 is distributed with Ubuntu-16.04, the Google Cloud Plaform\n# proto files require more recent versions (circa 3.4.x). To manually install a\n# more recent version use:\n\n# ```bash\nWORKDIR /var/tmp/build\nRUN /retry3 wget -q https://github.com/google/protobuf/archive/v3.6.1.tar.gz\nRUN tar -xf v3.6.1.tar.gz && rm v3.6.1.tar.gz\nWORKDIR /var/tmp/build/protobuf-3.6.1/cmake\nRUN cmake \\\n        -DCMAKE_BUILD_TYPE=Release \\\n        -DBUILD_SHARED_LIBS=yes \\\n        -Dprotobuf_BUILD_TESTS=OFF \\\n        -H. -Bcmake-out\nRUN cmake --build cmake-out --target install -- -j $(nproc)\nRUN ldconfig\n# ```\n\n# #### c-ares\n\n# Recent versions of gRPC require c-ares >= 1.11, while Ubuntu-16.04\n# distributes c-ares-1.10. We need some additional development tools to compile\n# this library:\n\n# ```bash\nRUN /retry3 apt update && \\\n    /retry3 apt install -y automake libtool\n# ```\n\n# After installing these tools we can manually install a newer version\n# of c-ares:\n\n# ```bash\nWORKDIR /var/tmp/build\nRUN /retry3 wget -q https://github.com/c-ares/c-ares/archive/cares-1_14_0.tar.gz\nRUN tar -xf cares-1_14_0.tar.gz && rm cares-1_14_0.tar.gz\nWORKDIR /var/tmp/build/c-ares-cares-1_14_0\nRUN ./buildconf && ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" && make -j $(nproc)\nRUN make install\nRUN ldconfig\n# ```\n\n# #### gRPC\n\n# Ubuntu-16.04 does not provide packages for the C++ gRPC bindings, install the\n# library manually:\n\n# ```bash\nWORKDIR /var/tmp/build\nRUN /retry3 wget -q https://github.com/grpc/grpc/archive/v1.19.1.tar.gz\nRUN tar -xf v1.19.1.tar.gz && rm v1.19.1.tar.gz\nWORKDIR /var/tmp/build/grpc-1.19.1\nRUN make -j $(nproc)\nRUN make install\nRUN ldconfig\n# ```\n\n# #### google-cloud-cpp\n\n# Finally we can install `google-cloud-cpp`.\n\n# ```bash\nWORKDIR /home/build/google-cloud-cpp\nCOPY . /home/build/google-cloud-cpp\nRUN cmake -H. -Bcmake-out \\\n    -DGOOGLE_CLOUD_CPP_DEPENDENCY_PROVIDER=package \\\n    -DGOOGLE_CLOUD_CPP_GMOCK_PROVIDER=external\nRUN cmake --build cmake-out -- -j $(nproc)\nWORKDIR /home/build/google-cloud-cpp/cmake-out\nRUN ctest --output-on-failure\nRUN cmake --build . --target install\n# ```\n\n## [END INSTALL.md]\n\n# Verify that the installed files are actually usable\nWORKDIR /home/build/test-install-plain-make\nCOPY ci/test-install /home/build/test-install-plain-make\nRUN make\n\nWORKDIR /home/build/test-install-cmake-bigtable\nCOPY ci/test-install/bigtable /home/build/test-install-cmake-bigtable\nRUN env -u PKG_CONFIG_PATH cmake -H. -Bcmake-out\nRUN cmake --build cmake-out -- -j $(nproc)\n\nWORKDIR /home/build/test-install-cmake-storage\nCOPY ci/test-install/storage /home/build/test-install-cmake-storage\nRUN env -u PKG_CONFIG_PATH cmake -H. -Bcmake-out\nRUN cmake --build cmake-out -- -j $(nproc)\n\nWORKDIR /home/build/test-submodule\nCOPY ci/test-install /home/build/test-submodule\nCOPY . /home/build/test-submodule/submodule/google-cloud-cpp\nRUN cmake -Hsubmodule -Bcmake-out\nRUN cmake --build cmake-out -- -j $(nproc)\n"
}