{
  "startTime": 1674248007252,
  "endTime": 1674248008158,
  "originalSmells": [
    {
      "rule": "wgetUseHttpsUrl",
      "position": {
        "lineStart": 171,
        "lineEnd": 171,
        "columnStart": 4,
        "columnEnd": 75
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 47,
        "lineEnd": 47,
        "columnStart": 7,
        "columnEnd": 34
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 48,
        "lineEnd": 48,
        "columnStart": 7,
        "columnEnd": 30
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 49,
        "lineEnd": 49,
        "columnStart": 7,
        "columnEnd": 51
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 22,
        "lineEnd": 33,
        "columnStart": 7,
        "columnEnd": 36
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 38,
        "lineEnd": 38,
        "columnStart": 7,
        "columnEnd": 58
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 40,
        "lineEnd": 40,
        "columnStart": 7,
        "columnEnd": 54
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 43,
        "lineEnd": 43,
        "columnStart": 4,
        "columnEnd": 37
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 46,
        "lineEnd": 46,
        "columnStart": 4,
        "columnEnd": 33
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 53,
        "lineEnd": 53,
        "columnStart": 7,
        "columnEnd": 34
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 58,
        "lineEnd": 58,
        "columnStart": 7,
        "columnEnd": 41
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 64,
        "lineEnd": 64,
        "columnStart": 7,
        "columnEnd": 35
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 159,
        "lineEnd": 159,
        "columnStart": 7,
        "columnEnd": 67
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 43,
        "lineEnd": 43,
        "columnStart": 4,
        "columnEnd": 37
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 46,
        "lineEnd": 46,
        "columnStart": 4,
        "columnEnd": 33
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 22,
        "lineEnd": 33,
        "columnStart": 7,
        "columnEnd": 36
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 38,
        "lineEnd": 38,
        "columnStart": 7,
        "columnEnd": 58
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 40,
        "lineEnd": 40,
        "columnStart": 7,
        "columnEnd": 54
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 43,
        "lineEnd": 43,
        "columnStart": 4,
        "columnEnd": 37
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 46,
        "lineEnd": 46,
        "columnStart": 4,
        "columnEnd": 33
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 53,
        "lineEnd": 53,
        "columnStart": 7,
        "columnEnd": 34
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 58,
        "lineEnd": 58,
        "columnStart": 7,
        "columnEnd": 41
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 64,
        "lineEnd": 64,
        "columnStart": 7,
        "columnEnd": 35
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 159,
        "lineEnd": 159,
        "columnStart": 7,
        "columnEnd": 67
      }
    }
  ],
  "repairedSmells": [
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 43,
        "lineEnd": 43,
        "columnStart": 4,
        "columnEnd": 61
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 46,
        "lineEnd": 46,
        "columnStart": 4,
        "columnEnd": 57
      }
    }
  ],
  "repairedDockerfile": "# Distributed under the MIT License.\n# See LICENSE.txt for details.\n\n# If you change this file please push a new image to DockerHub so that the\n# new image is used for testing. Docker must be run as root on your machine,\n# so to build a new image run the following as root (e.g. sudo su):\n#   cd $SPECTRE_HOME/containers\n#   docker build  -t sxscollaboration/spectrebuildenv:latest \\\n#                 -f ./Dockerfile.buildenv .\n# and then to push to DockerHub:\n#   docker push sxscollaboration/spectrebuildenv\n# If you do not have permission to push to DockerHub please coordinate with\n# someone who does. Since changes to this image effect our testing\n# infrastructure it is important all changes be carefully reviewed.\n\nFROM ubuntu:18.04\n\nARG PARALLEL_MAKE_ARG=-j2\nARG DEBIAN_FRONTEND=noninteractive\n\n# Install required packages for SpECTRE\nRUN apt-get update -y \\\n    && apt-get install --no-install-recommends -y gcc-6 g++-6 gfortran-6 \\\n                          gcc-7 g++-7 gfortran-7 \\\n                          gcc-8 g++-8 gfortran-8 \\\n                          gdb git cmake \\\n                          libopenblas-dev liblapack-dev \\\n                          libhdf5-dev hdf5-tools \\\n                          libgsl0-dev \\\n                          clang-5.0 clang-format-5.0 clang-tidy-5.0 \\\n                          libclang-5.0-dev wget libncurses-dev \\\n                          lcov cppcheck \\\n                          libboost-all-dev \\\n                          libssl-dev && rm -rf /var/lib/apt/lists/*;\n\n# Update is needed to get libc++ correctly\n# Install jemalloc\nRUN apt-get update -y \\\n    && apt-get install --no-install-recommends -y libc++-dev libc++1 libc++abi-dev \\\n    && apt-get update -y \\\n    && apt-get install --no-install-recommends -y libjemalloc1 libjemalloc-dev && rm -rf /var/lib/apt/lists/*;\n\n# Install ccache to cache compilations for reduced compile time, and Doxygen\nRUN apt-get install --no-install-recommends -y ccache doxygen && rm -rf /var/lib/apt/lists/*;\n\n# Install Python packages\nRUN apt-get install --no-install-recommends -y python-pip \\\n    && pip install --no-cache-dir autopep8 flake8 \\\n    && pip install --no-cache-dir numpy scipy \\\n    && pip install --no-cache-dir coverxygen beautifulsoup4 pybtex && rm -rf /var/lib/apt/lists/*;\n\n# Add ruby gems and install coveralls using gem\nRUN apt-get update -y \\\n    && apt-get install --no-install-recommends -y rubygems \\\n    && gem install coveralls-lcov && rm -rf /var/lib/apt/lists/*;\n\n# Enable bash-completion by installing it and then adding it to the .bashrc file\nRUN apt-get update -y \\\n    && apt-get install --no-install-recommends -y bash-completion \\\n    && printf \"if [ -f /etc/bash_completion ] && ! shopt -oq posix; then\\n\\\n    . /etc/bash_completion\\nfi\\n\\n\" >> /root/.bashrc && rm -rf /var/lib/apt/lists/*;\n\n# Install LMod which is needed by Spack and set it to load at login\nRUN apt-get update -y \\\n    && apt-get install --no-install-recommends -y curl lmod \\\n    && printf '. /etc/profile.d/lmod.sh\\n' >> /root/.bashrc \\\n    && . /etc/profile.d/lmod.sh && rm -rf /var/lib/apt/lists/*;\n\n# Install Spack to get remaining dependencies\nWORKDIR /work\nRUN git clone https://github.com/LLNL/spack.git\nWORKDIR /work/spack\n# Since spack/develop is rather unstable, we check out a commit we\n# know is stable. This should be updated periodically to update\n# installed packages.\nRUN git checkout 470a45c51659156e7d154ea890e798ce32b8767d\nWORKDIR /work\n\n# Spack needs to be pointed to the system OpenSSL to work properly, we add this\n# in the general configure script for Spack rather than a user-specific\n# configure script. The below code is documented in the Spack manual.\nRUN printf \"\\n  openssl:\\n    paths:\\n      openssl@1.0.2g: /usr\\n\\\n    buildable: False\\n\" >> /work/spack/etc/spack/defaults/packages.yaml\n\n# Add Spack to PATH and install required dependencies\n# The sed commands are necessary because spack fails to find the\n# fortran compilers for an unknown reason. We compile the libraries with GCC6\n# so that we do not need separate versions for GCC6 and GCC7.\nRUN echo \"export PATH=\\$PATH:/work/spack/bin\" >> /root/.bashrc\\\n    && echo '. /work/spack/share/spack/setup-env.sh' >> /root/.bashrc \\\n    && export PATH=$PATH:/work/spack/bin \\\n    && spack compiler find \\\n    && sed -i 's@fc: null@fc: /usr/bin/gfortran@' \\\n    /root/.spack/linux/compilers.yaml \\\n    && sed -i 's@f77: null@f77: /usr/bin/gfortran@' \\\n    /root/.spack/linux/compilers.yaml\nRUN /work/spack/bin/spack install cmake \\\n    && /work/spack/bin/spack install --no-checksum catch@2.1.0 \\\n    && /work/spack/bin/spack install brigand@master \\\n    && /work/spack/bin/spack install blaze \\\n    && /work/spack/bin/spack install gsl%gcc@6.5.0 \\\n    && /work/spack/bin/spack install libsharp -openmp -mpi \\\n    && /work/spack/bin/spack install libxsmm%gcc@6.5.0 \\\n    && /work/spack/bin/spack install yaml-cpp@develop%gcc@6.5.0 \\\n    && /work/spack/bin/spack install benchmark%gcc@6.5.0\n\n# Install include-what-you-use\n# We patch it to allow cyclic includes in boost\nRUN wget https://github.com/include-what-you-use/include-what-you-use/archive/clang_5.0.tar.gz \\\n    && tar -xzf clang_5.0.tar.gz \\\n    && rm clang_5.0.tar.gz \\\n    && mkdir /work/include-what-you-use-clang_5.0/build \\\n    && cd /work/include-what-you-use-clang_5.0/ \\\n    && sed -i 's^\\\\\\\"third_party/^<boost/^' iwyu_include_picker.cc \\\n    && cd /work/include-what-you-use-clang_5.0/build \\\n    && cmake -D CMAKE_CXX_COMPILER=clang++-5.0 \\\n        -D CMAKE_C_COMPILER=clang-5.0 \\\n        -D IWYU_LLVM_ROOT_PATH=/usr/lib/llvm-5.0 .. \\\n    && make -j2 \\\n    && make install \\\n    && cd /work \\\n    && rm -rf /work/include-what-you-use-clang_5.0\n\n# Download and build the Charm++ version used by SpECTRE\n# We build both Clang and GCC versions of Charm++ so that all our tests can\n# use the same build environment.\nWORKDIR /work\nARG CHARM_GIT_TAG=v6.8.0\n# Charm doesn't support compiling with clang-5 without symbolic links\nRUN ln -s $(which clang++-5.0) /usr/local/bin/clang++ \\\n    && ln -s $(which clang-5.0) /usr/local/bin/clang \\\n    && ln -s $(which clang-format-5.0) /usr/local/bin/clang-format \\\n    && ln -s $(which clang-tidy-5.0) /usr/local/bin/clang-tidy\nRUN git clone https://charm.cs.illinois.edu/gerrit/charm \\\n    && cd /work/charm \\\n    && git checkout ${CHARM_GIT_TAG} \\\n    && ./build charm++ multicore-linux64 gcc ${PARALLEL_MAKE_ARG} -g -O0  \\\n    && ./build charm++ multicore-linux64 clang ${PARALLEL_MAKE_ARG} -g -O0 \\\n    && wget https://raw.githubusercontent.com/sxs-collaboration/spectre/develop/support/Charm/v6.8.patch \\\n    && git apply /work/charm/v6.8.patch \\\n    && rm /work/charm/v6.8.patch\n\nWORKDIR /work\n\n# Load Spack dependencies at container load\nRUN echo 'spack load catch' >> /root/.bashrc \\\n    && echo 'spack load brigand' >> /root/.bashrc \\\n    && echo 'spack load blaze' >> /root/.bashrc \\\n    && echo 'spack load gsl' >> /root/.bashrc \\\n    && echo 'spack load libsharp' >> /root/.bashrc \\\n    && echo 'spack load libxsmm' >> /root/.bashrc \\\n    && echo 'spack load yaml-cpp' >> /root/.bashrc \\\n    && echo 'spack load benchmark' >> /root/.bashrc\n\n# - Set the environment variable SPECTRE_CONTAINER so we can check if we are\n#   inside a container (0 is true in bash)\n# - The singularity containers work better if the locale is set properly\nENV SPECTRE_CONTAINER 0\nRUN apt-get update \\\n    && apt-get install --no-install-recommends -y locales language-pack-fi language-pack-en \\\n    && export LANGUAGE=en_US.UTF-8 \\\n    && export LANG=en_US.UTF-8 \\\n    && export LC_ALL=en_US.UTF-8 \\\n    && locale-gen en_US.UTF-8 \\\n    && dpkg-reconfigure locales && rm -rf /var/lib/apt/lists/*;\n\n# Install bibtex for Doxygen bibliography management\n# We first install the TeXLive infrastructure according to the configuration in\n# support/TeXLive/texlive.profile and then use it to install the bibtex package.\nRUN mkdir /work/texlive\nWORKDIR /work/texlive\nRUN wget https://mirror.ctan.org/systems/texlive/tlnet/install-tl-unx.tar.gz \\\n    && tar -xzf install-tl-unx.tar.gz \\\n    && rm install-tl-unx.tar.gz \\\n    && wget https://raw.githubusercontent.com/sxs-collaboration/spectre/develop/support/TeXLive/texlive.profile \\\n    && install-tl-*/install-tl -profile=texlive.profile \\\n    && rm -r install-tl-* texlive.profile install-tl.log \\\n    && echo \"export PATH=\\$PATH:/work/texlive/bin/x86_64-linux\" \\\n            >> /root/.bashrc \\\n    && /work/texlive/bin/x86_64-linux/tlmgr install bibtex\nWORKDIR /work\n\n# Work around posix rename bug:\n#   https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=891541\nRUN ln -s /usr/lib/x86_64-linux-gnu/lua/5.1/posix_c.so \\\n    /usr/lib/x86_64-linux-gnu/lua/5.1/posix.so \\\n    && ln -s /usr/lib/x86_64-linux-gnu/lua/5.2/posix_c.so \\\n    /usr/lib/x86_64-linux-gnu/lua/5.2/posix.so \\\n    && ln -s /usr/lib/x86_64-linux-gnu/lua/5.3/posix_c.so \\\n    /usr/lib/x86_64-linux-gnu/lua/5.3/posix.so\n"
}