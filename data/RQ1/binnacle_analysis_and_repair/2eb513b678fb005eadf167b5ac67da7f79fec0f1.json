{
  "startTime": 1674253070639,
  "endTime": 1674253073305,
  "originalSmells": [
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 21,
        "lineEnd": 21,
        "columnStart": 4,
        "columnEnd": 63
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 32,
        "lineEnd": 32,
        "columnStart": 5,
        "columnEnd": 52
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 42,
        "lineEnd": 42,
        "columnStart": 5,
        "columnEnd": 52
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 52,
        "lineEnd": 52,
        "columnStart": 4,
        "columnEnd": 67
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 63,
        "lineEnd": 63,
        "columnStart": 4,
        "columnEnd": 67
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 74,
        "lineEnd": 74,
        "columnStart": 4,
        "columnEnd": 81
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 86,
        "lineEnd": 86,
        "columnStart": 4,
        "columnEnd": 67
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 98,
        "lineEnd": 98,
        "columnStart": 4,
        "columnEnd": 67
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 110,
        "lineEnd": 110,
        "columnStart": 4,
        "columnEnd": 143
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 136,
        "lineEnd": 136,
        "columnStart": 5,
        "columnEnd": 68
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 493,
        "lineEnd": 493,
        "columnStart": 8,
        "columnEnd": 54
      }
    },
    {
      "rule": "yumInstallRmVarCacheYum",
      "position": {
        "lineStart": 5,
        "lineEnd": 5,
        "columnStart": 4,
        "columnEnd": 163
      }
    },
    {
      "rule": "yumInstallRmVarCacheYum",
      "position": {
        "lineStart": 146,
        "lineEnd": 146,
        "columnStart": 5,
        "columnEnd": 55
      }
    },
    {
      "rule": "yumInstallRmVarCacheYum",
      "position": {
        "lineStart": 159,
        "lineEnd": 159,
        "columnStart": 4,
        "columnEnd": 46
      }
    },
    {
      "rule": "yumInstallRmVarCacheYum",
      "position": {
        "lineStart": 160,
        "lineEnd": 160,
        "columnStart": 4,
        "columnEnd": 34
      }
    },
    {
      "rule": "yumInstallRmVarCacheYum",
      "position": {
        "lineStart": 212,
        "lineEnd": 212,
        "columnStart": 4,
        "columnEnd": 138
      }
    },
    {
      "rule": "yumInstallRmVarCacheYum",
      "position": {
        "lineStart": 283,
        "lineEnd": 283,
        "columnStart": 5,
        "columnEnd": 125
      }
    },
    {
      "rule": "yumInstallRmVarCacheYum",
      "position": {
        "lineStart": 318,
        "lineEnd": 318,
        "columnStart": 5,
        "columnEnd": 139
      }
    },
    {
      "rule": "yumInstallRmVarCacheYum",
      "position": {
        "lineStart": 320,
        "lineEnd": 320,
        "columnStart": 5,
        "columnEnd": 38
      }
    },
    {
      "rule": "yumInstallRmVarCacheYum",
      "position": {
        "lineStart": 341,
        "lineEnd": 341,
        "columnStart": 5,
        "columnEnd": 50
      }
    },
    {
      "rule": "yumInstallRmVarCacheYum",
      "position": {
        "lineStart": 360,
        "lineEnd": 360,
        "columnStart": 5,
        "columnEnd": 36
      }
    },
    {
      "rule": "yumInstallRmVarCacheYum",
      "position": {
        "lineStart": 394,
        "lineEnd": 394,
        "columnStart": 4,
        "columnEnd": 46
      }
    },
    {
      "rule": "yumInstallRmVarCacheYum",
      "position": {
        "lineStart": 444,
        "lineEnd": 444,
        "columnStart": 4,
        "columnEnd": 51
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 434,
        "lineEnd": 434,
        "columnStart": 4,
        "columnEnd": 34
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM centos:7.6.1810 AS build\nWORKDIR /home\n\n# COMMON BUILD TOOLS\nRUN yum install -y -q bzip2 make autoconf libtool git wget ca-certificates pkg-config gcc gcc-c++ bison flex patch epel-release yum-devel libcurl-devel zlib-devel; rm -rf /var/cache/yum\n\n# Install cmake\nARG CMAKE_VER=3.13.1\nARG CMAKE_REPO=https://cmake.org/files\nRUN wget -O - ${CMAKE_REPO}/v${CMAKE_VER%.*}/cmake-${CMAKE_VER}.tar.gz | tar xz && \\\n    cd cmake-${CMAKE_VER} && \\\n    ./bootstrap --prefix=\"/usr\" --system-curl && \\\n    make -j8 && \\\n    make install\n\n# Install automake, use version 1.14 on CentOS\nARG AUTOMAKE_VER=1.14\nARG AUTOMAKE_REPO=https://ftp.gnu.org/pub/gnu/automake/automake-${AUTOMAKE_VER}.tar.xz\nRUN wget -O - ${AUTOMAKE_REPO} | tar xJ && \\\n    cd automake-${AUTOMAKE_VER} && \\\n    ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --prefix=/usr --libdir=/usr/lib64 --disable-doc && \\\n    make -j8 && \\\n    make install\n\n# Build NASM\nARG NASM_VER=2.13.03\nARG NASM_REPO=https://www.nasm.us/pub/nasm/releasebuilds/${NASM_VER}/nasm-${NASM_VER}.tar.bz2\nRUN wget ${NASM_REPO} && \\\n     tar -xaf nasm* && \\\n     cd nasm-${NASM_VER} && \\\n     ./autogen.sh && \\\n     ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --prefix=\"/usr\" --libdir=/usr/lib64 && \\\n     make -j8 && \\\n     make install\n\n# Build YASM\nARG YASM_VER=1.3.0\nARG YASM_REPO=https://www.tortall.net/projects/yasm/releases/yasm-${YASM_VER}.tar.gz\nRUN wget -O - ${YASM_REPO} | tar xz && \\\n     cd yasm-${YASM_VER} && \\\n     sed -i \"s/) ytasm.*/)/\" Makefile.in && \\\n     ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --prefix=\"/usr\" --libdir=/usr/lib64 && \\\n     make -j8 && \\\n     make install\n\n# Build ogg\nARG OGG_VER=1.3.3\nARG OGG_REPO=https://downloads.xiph.org/releases/ogg/libogg-${OGG_VER}.tar.xz\n\nRUN wget -O - ${OGG_REPO} | tar xJ && \\\n    cd libogg-${OGG_VER} && \\\n    ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --prefix=\"/usr\" --libdir=/usr/lib64 --enable-shared && \\\n    make -j8 && \\\n    make install DESTDIR=/home/build && \\\n    make install\n\n# Build vorbis\nARG VORBIS_VER=1.3.6\nARG VORBIS_REPO=https://downloads.xiph.org/releases/vorbis/libvorbis-${VORBIS_VER}.tar.xz\n\nRUN wget -O - ${VORBIS_REPO} | tar xJ && \\\n    cd libvorbis-${VORBIS_VER} && \\\n    ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --prefix=\"/usr\" --libdir=/usr/lib64 --enable-shared && \\\n    make -j8 && \\\n    make install DESTDIR=/home/build && \\\n    make install\n\n# Build mp3lame\nARG MP3LAME_VER=3.100\nARG MP3LAME_REPO=https://sourceforge.net/projects/lame/files/lame/${MP3LAME_VER}/lame-${MP3LAME_VER}.tar.gz\n\nRUN wget -O - ${MP3LAME_REPO} | tar xz && \\\n    cd lame-${MP3LAME_VER} && \\\n    ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --prefix=\"/usr\" --libdir=/usr/lib64 --enable-shared --enable-nasm && \\\n    make -j8 && \\\n    make install DESTDIR=/home/build && \\\n    make install\n\n# Build fdk-aac\nARG FDK_AAC_VER=v0.1.6\nARG FDK_AAC_REPO=https://github.com/mstorsjo/fdk-aac/archive/${FDK_AAC_VER}.tar.gz\n\nRUN wget -O - ${FDK_AAC_REPO} | tar xz && mv fdk-aac-${FDK_AAC_VER#v} fdk-aac && \\\n    cd fdk-aac && \\\n    autoreconf -fiv && \\\n    ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --prefix=\"/usr\" --libdir=/usr/lib64 --enable-shared && \\\n    make -j8 && \\\n    make install DESTDIR=/home/build && \\\n    make install\n\n\n# Build opus\nARG OPUS_VER=1.2.1\nARG OPUS_REPO=https://archive.mozilla.org/pub/opus/opus-${OPUS_VER}.tar.gz\n\nRUN wget -O - ${OPUS_REPO} | tar xz && \\\n    cd opus-${OPUS_VER} && \\\n    ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --prefix=\"/usr\" --libdir=/usr/lib64 --enable-shared && \\\n    make -j8 && \\\n    make install DESTDIR=/home/build && \\\n    make install\n\n# Build vpx\nARG VPX_VER=tags/v1.7.0\nARG VPX_REPO=https://chromium.googlesource.com/webm/libvpx.git\n\nRUN git clone ${VPX_REPO} && \\\n    cd libvpx && \\\n    git checkout ${VPX_VER} && \\\n    ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --prefix=\"/usr\" --libdir=/usr/lib64 --enable-shared --disable-examples --disable-unit-tests --enable-vp9-highbitdepth --as=nasm && \\\n    make -j8 && \\\n    make install DESTDIR=/home/build && \\\n    make install\n\n\n# Build AOM\nARG AOM_VER=b6f1767eedbaddeb1ff5aa409a710ef61078640e\nARG AOM_REPO=https://aomedia.googlesource.com/aom\n\nRUN  git clone ${AOM_REPO} && \\\n     mkdir aom/aom_build && \\\n     cd aom/aom_build && \\\n     git checkout ${AOM_VER} && \\\n     cmake -DBUILD_SHARED_LIBS=ON -DENABLE_NASM=ON -DENABLE_TESTS=OFF -DENABLE_DOCS=OFF -DCMAKE_INSTALL_PREFIX=\"/usr\" -DLIB_INSTALL_DIR=/usr/lib64 .. && \\\n     make -j8 && \\\n     make install DESTDIR=\"/home/build\" && \\\n     make install\n\n# Build x264\nARG X264_VER=stable\nARG X264_REPO=https://github.com/mirror/x264\n\nRUN git clone ${X264_REPO} && \\\n     cd x264 && \\\n     git checkout ${X264_VER} && \\\n     ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --prefix=\"/usr\" --libdir=/usr/lib64 --enable-shared && \\\n     make -j8 && \\\n     make install DESTDIR=\"/home/build\" && \\\n     make install\n\n\n# Build x265\nARG X265_VER=2.9\nARG X265_REPO=https://github.com/videolan/x265/archive/${X265_VER}.tar.gz\n\nRUN yum install -y -q numactl-devel libpciaccess-devel && rm -rf /var/cache/yum\n\nRUN  wget -O - ${X265_REPO} | tar xz && mv x265-${X265_VER} x265 && \\\n     cd x265/build/linux && \\\n     cmake -DBUILD_SHARED_LIBS=ON -DENABLE_TESTS=OFF -DCMAKE_INSTALL_PREFIX=/usr -DLIB_INSTALL_DIR=/usr/lib64 ../../source && \\\n     make -j8 && \\\n     make install DESTDIR=\"/home/build\" && \\\n     make install\n\n# Fetch SVT-HEVC\nARG SVT_HEVC_VER=20a47b0d904e9d99e089d93d7c33af92788cbfdb\nARG SVT_HEVC_REPO=https://github.com/intel/SVT-HEVC\n\nRUN yum install -y -q patch centos-release-scl && \\\n    yum install -y -q devtoolset-7 && rm -rf /var/cache/yum\n\nRUN git clone ${SVT_HEVC_REPO} && \\\n    cd SVT-HEVC/Build/linux && \\\n    git checkout ${SVT_HEVC_VER} && \\\n    mkdir -p ../../Bin/Release && \\\n    ( source /opt/rh/devtoolset-7/enable && \\\n    cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=/usr -DCMAKE_INSTALL_LIBDIR=lib64 -DCMAKE_ASM_NASM_COMPILER=yasm ../.. && \\\n    make -j8 && \\\n    make install DESTDIR=/home/build && \\\n    make install )\n\n\n# Fetch SVT-AV1\nARG SVT_AV1_VER=v0.5.0\nARG SVT_AV1_REPO=https://github.com/OpenVisualCloud/SVT-AV1\n\nRUN git clone ${SVT_AV1_REPO} && \\\n    cd SVT-AV1/Build/linux && \\\n    git checkout ${SVT_AV1_VER} && \\\n    mkdir -p ../../Bin/Release && \\\n    cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=/usr -DCMAKE_INSTALL_LIBDIR=lib64 -DCMAKE_ASM_NASM_COMPILER=yasm ../.. && \\\n    make -j8 && \\\n    make install DESTDIR=/home/build && \\\n    make install\n\n#Remove build residue from SVT-AV1 build -- temp fix for bug\nRUN if [ -d \"build/home/\" ]; then rm -rf build/home/; fi\n\n\n# Fetch SVT-VP9\nARG SVT_VP9_VER=d18b4acf9139be2e83150e318ffd3dba1c432e74\nARG SVT_VP9_REPO=https://github.com/OpenVisualCloud/SVT-VP9\n\nRUN git clone ${SVT_VP9_REPO} && \\\n    cd SVT-VP9/Build/linux && \\\n    git checkout ${SVT_VP9_VER} && \\\n    mkdir -p ../../Bin/Release && \\\n  ( source /opt/rh/devtoolset-7/enable && \\\n    cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=/usr -DCMAKE_INSTALL_LIBDIR=lib64 -DCMAKE_ASM_NASM_COMPILER=yasm ../.. && \\\n    make -j8 && \\\n    make install DESTDIR=/home/build && \\\n    make install )\n\n# Build DLDT-Inference Engine\nARG DLDT_VER=2019_R1.1\nARG DLDT_REPO=https://github.com/opencv/dldt.git\nARG DLDT_C_API_1=https://raw.githubusercontent.com/VCDP/FFmpeg-patch/master/thirdparty/0001-Add-inference-engine-C-API.patch\nARG DLDT_C_API_2=https://raw.githubusercontent.com/VCDP/FFmpeg-patch/master/thirdparty/0002-Change-to-match-image-with-separate-planes.patch\nARG DLDT_C_API_3=https://raw.githubusercontent.com/VCDP/FFmpeg-patch/master/thirdparty/0003-Refine-IE-C-API.patch\nARG DLDT_C_API_4=https://raw.githubusercontent.com/VCDP/FFmpeg-patch/master/thirdparty/0004-Fix-code-style-and-symbols-visibility-for-2019R1.patch\n\nRUN yum install -y -q boost-devel glibc-static glibc-devel libstdc++-static libstdc++-devel libstdc++ libgcc libusbx-devel openblas-devel; rm -rf /var/cache/yum\n\nRUN git clone -b ${DLDT_VER} ${DLDT_REPO} && \\\n    cd dldt && \\\n    git submodule init && \\\n    git submodule update --recursive && \\\n    cd inference-engine && \\\n    wget -O - ${DLDT_C_API_1} | patch -p2 && \\\n    wget -O - ${DLDT_C_API_2} | patch -p2 && \\\n    wget -O - ${DLDT_C_API_3} | patch -p2 && \\\n    wget -O - ${DLDT_C_API_4} | patch -p2 && \\\n    mkdir build && \\\n    cd build && \\\n    cmake  -DCMAKE_INSTALL_PREFIX=/opt/intel/dldt -DLIB_INSTALL_PATH=/opt/intel/dldt -DENABLE_MKL_DNN=ON -DENABLE_CLDNN=OFF -DENABLE_SAMPLES=OFF .. && \\\n    make -j $(nproc) && \\\n    rm -rf ../bin/intel64/Release/lib/libgtest* && \\\n    rm -rf ../bin/intel64/Release/lib/libgmock* && \\\n    rm -rf ../bin/intel64/Release/lib/libmock* && \\\n    rm -rf ../bin/intel64/Release/lib/libtest*\n\nARG libdir=/opt/intel/dldt/inference-engine/lib/intel64\n\nRUN mkdir -p /opt/intel/dldt/inference-engine/include && \\\n    cp -r dldt/inference-engine/include/* /opt/intel/dldt/inference-engine/include && \\\n    mkdir -p ${libdir} && \\\n    cp -r dldt/inference-engine/bin/intel64/Release/lib/* ${libdir} && \\\n    mkdir -p /opt/intel/dldt/inference-engine/src && \\\n    cp -r dldt/inference-engine/src/* /opt/intel/dldt/inference-engine/src/ && \\\n    mkdir -p /opt/intel/dldt/inference-engine/share && \\\n    cp -r dldt/inference-engine/build/share/* /opt/intel/dldt/inference-engine/share/ && \\\n    mkdir -p /opt/intel/dldt/inference-engine/external/ && \\\n    cp -r dldt/inference-engine/temp/tbb /opt/intel/dldt/inference-engine/external/\n\nRUN mkdir -p build/opt/intel/dldt/inference-engine/include && \\\n    cp -r dldt/inference-engine/include/* build/opt/intel/dldt/inference-engine/include && \\\n    mkdir -p build${libdir} && \\\n    cp -r dldt/inference-engine/bin/intel64/Release/lib/* build${libdir} && \\\n    mkdir -p build/opt/intel/dldt/inference-engine/src && \\\n    cp -r dldt/inference-engine/src/* build/opt/intel/dldt/inference-engine/src/ && \\\n    mkdir -p build/opt/intel/dldt/inference-engine/share && \\\n    cp -r dldt/inference-engine/build/share/* build/opt/intel/dldt/inference-engine/share/ && \\\n    mkdir -p build/opt/intel/dldt/inference-engine/external/ && \\\n    cp -r dldt/inference-engine/temp/tbb build/opt/intel/dldt/inference-engine/external/\n\nRUN for p in /usr /home/build/usr /opt/intel/dldt/inference-engine /home/build/opt/intel/dldt/inference-engine; do \\\n        pkgconfiglibdir=\"$p/lib64\" && \\\n        mkdir -p \"${pkgconfiglibdir}/pkgconfig\" && \\\n        pc=\"${pkgconfiglibdir}/pkgconfig/dldt.pc\" && \\\n        echo \"prefix=/opt\" > \"$pc\" && \\\n        echo \"libdir=${libdir}\" >> \"$pc\" && \\\n        echo \"includedir=/opt/intel/dldt/inference-engine/include\" >> \"$pc\" && \\\n        echo \"\" >> \"$pc\" && \\\n        echo \"Name: DLDT\" >> \"$pc\" && \\\n        echo \"Description: Intel Deep Learning Deployment Toolkit\" >> \"$pc\" && \\\n        echo \"Version: 5.0\" >> \"$pc\" && \\\n        echo \"\" >> \"$pc\" && \\\n        echo \"Libs: -L\\${libdir} -linference_engine -linference_engine_c_wrapper\" >> \"$pc\" && \\\n        echo \"Cflags: -I\\${includedir}\" >> \"$pc\"; \\\n    done;\n\nENV InferenceEngine_DIR=/opt/intel/dldt/inference-engine/share\nENV LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/opt/intel/dldt/inference-engine/lib:/opt/intel/dldt/inference-engine/external/tbb/lib:${libdir}\n\n#install Model Optimizer in the DLDT for Dev\n\n\n\n# Build the gstremaer core\nARG GST_VER=1.16.0\nARG GST_REPO=https://gstreamer.freedesktop.org/src/gstreamer/gstreamer-${GST_VER}.tar.xz\n\nRUN yum install -y -q glib2-devel-2.56.1 gettext-devel gobject-introspection gobject-introspection-devel python-gobject-base && rm -rf /var/cache/yum\nRUN  wget -O - ${GST_REPO} | tar xJ && \\\n     cd gstreamer-${GST_VER} && \\\n     ./autogen.sh \\\n        --prefix=/usr \\\n        --libdir=/usr/lib64 \\\n        --libexecdir=/usr/lib64 \\\n        --enable-shared \\\n        --enable-introspection \\\n        --disable-examples \\\n        --disable-debug \\\n        --disable-benchmarks \\\n        --disable-gtk-doc && \\\n     make -j $(nproc) && \\\n     make install DESTDIR=/home/build && \\\n     make install;\n\n# Build the gstremaer plugin bad set\nARG GST_ORC_VER=0.4.28\nARG GST_ORC_REPO=https://gstreamer.freedesktop.org/src/orc/orc-${GST_ORC_VER}.tar.xz\n\nRUN  wget -O - ${GST_ORC_REPO} | tar xJ && \\\n     cd orc-${GST_ORC_VER} && \\\n     ./autogen.sh --prefix=/usr --libdir=/usr/lib64 \\\n                --libexecdir=/usr/lib64 \\\n                --enable-shared \\\n                --disable-examples --disable-debug \\\n                --disable-gtk-doc && \\\n     make -j $(nproc) && \\\n     make install DESTDIR=/home/build && \\\n     make install\n\n# Build the gstremaer plugin base\nARG GST_PLUGIN_BASE_REPO=https://gstreamer.freedesktop.org/src/gst-plugins-base/gst-plugins-base-${GST_VER}.tar.xz\n\nRUN yum install -y -q libXv-devel libvisual-devel libtheora-devel glib2-devel alsa-lib-devel cdparanoia-devel mesa-libGL-devel pango-devel && rm -rf /var/cache/yum\n\nRUN yum install -y -q libXrandr-devel && rm -rf /var/cache/yum\n\n\nRUN  wget -O - ${GST_PLUGIN_BASE_REPO} | tar xJ && \\\n     cd gst-plugins-base-${GST_VER} && \\\n     ./autogen.sh \\\n        --prefix=/usr \\\n        --libdir=/usr/lib64 \\\n        --libexecdir=/usr/lib64 \\\n        --enable-introspection \\\n        --enable-shared \\\n        --disable-examples --disable-debug \\\n        --disable-gtk-doc && \\\n     make -j $(nproc) && \\\n     make install DESTDIR=/home/build && \\\n     make install\n\n\n# Build the gstremaer plugin good set\nARG GST_PLUGIN_GOOD_REPO=https://gstreamer.freedesktop.org/src/gst-plugins-good/gst-plugins-good-${GST_VER}.tar.xz\n\nRUN yum install -y -q libsoup-devel libjpeg-devel && rm -rf /var/cache/yum\n\nRUN  wget -O - ${GST_PLUGIN_GOOD_REPO} | tar xJ && \\\n     cd gst-plugins-good-${GST_VER} && \\\n     ./autogen.sh \\\n        --prefix=/usr \\\n        --libdir=/usr/lib64 \\\n        --libexecdir=/usr/lib64 \\\n        --enable-shared \\\n        --disable-examples --disable-debug \\\n        --disable-gtk-doc && \\\n     make -j $(nproc) && \\\n     make install DESTDIR=/home/build && \\\n     make install\n\n\n# Build the gstremaer plugin bad set\nARG GST_PLUGIN_BAD_REPO=https://gstreamer.freedesktop.org/src/gst-plugins-bad/gst-plugins-bad-${GST_VER}.tar.xz\n\nRUN yum install -y -q openssl-devel && rm -rf /var/cache/yum\n\nRUN  wget -O - ${GST_PLUGIN_BAD_REPO} | tar xJ && \\\n     cd gst-plugins-bad-${GST_VER} && \\\n     ./autogen.sh \\\n        --prefix=/usr \\\n        --libdir=/usr/lib64 \\\n        --libexecdir=/usr/lib64 \\\n        --enable-shared \\\n        --disable-examples --disable-debug \\\n        --disable-gtk-doc && \\\n     make -j $(nproc) && \\\n     make install DESTDIR=/home/build && \\\n     make install\n\n# Build the gstremaer plugin ugly set\nARG GST_PLUGIN_UGLY_REPO=https://gstreamer.freedesktop.org/src/gst-plugins-ugly/gst-plugins-ugly-${GST_VER}.tar.xz\n\nRUN  wget -O - ${GST_PLUGIN_UGLY_REPO} | tar xJ; \\\n     cd gst-plugins-ugly-${GST_VER}; \\\n     ./autogen.sh \\\n        --prefix=/usr \\\n        --libdir=/usr/lib64 \\\n        --libexecdir=/usr/lib64 \\\n        --enable-shared \\\n        --disable-examples --disable-debug \\\n        --disable-gtk-doc && \\\n     make -j $(nproc) && \\\n     make install DESTDIR=/home/build && \\\n     make install\n\n# Build gst-libav\nARG GST_PLUGIN_LIBAV_REPO=https://gstreamer.freedesktop.org/src/gst-libav/gst-libav-${GST_VER}.tar.xz\n\nRUN yum install -y -q zlib-devel openssl-devel && rm -rf /var/cache/yum\n\nRUN wget -O - ${GST_PLUGIN_LIBAV_REPO} | tar xJ && \\\n    cd gst-libav-${GST_VER} && \\\n    ./autogen.sh \\\n        --prefix=\"/usr\" \\\n        --libdir=/usr/lib64 \\\n        --enable-shared \\\n        --enable-gpl \\\n        --disable-gtk-doc && \\\n    make -j $(nproc) && \\\n    make install DESTDIR=/home/build && \\\n    make install\n\n\n# Build gstremaer plugin for svt\n\nRUN cd SVT-HEVC/gstreamer-plugin && \\\n    cmake . && \\\n    make -j8 && \\\n    make install DESTDIR=/home/build && \\\n    make install\n\nRUN cd SVT-VP9/gstreamer-plugin && \\\n    cmake . && \\\n    make -j8 && \\\n    make install DESTDIR=/home/build && \\\n    make install\n\nRUN cd SVT-AV1/gstreamer-plugin && \\\n    cmake . && \\\n    make -j8 && \\\n    make install DESTDIR=/home/build && \\\n    make install\n\nARG OPENCV_VER=4.1.0\nARG OPENCV_REPO=https://github.com/opencv/opencv/archive/${OPENCV_VER}.tar.gz\n\n\nRUN wget ${OPENCV_REPO} && \\\n    tar -zxvf ${OPENCV_VER}.tar.gz && \\\n    cd opencv-${OPENCV_VER} && \\\n    mkdir build && \\\n    cd build && \\\n    cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=/usr/local -D BUILD_EXAMPLES=OFF -D BUILD_PERF_TESTS=OFF -D BUILD_DOCS=OFF -D BUILD_TESTS=OFF .. && \\\n    make -j $(nproc) && \\\n    make install DESTDIR=/home/build && \\\n    make install && rm ${OPENCV_VER}.tar.gz\n\n\nRUN yum install -y -q glib2-devel gtk-dock openblas && rm -rf /var/cache/yum\n\n\n\nARG PAHO_INSTALL=true\nARG PAHO_VER=1.3.0\nARG PAHO_REPO=https://github.com/eclipse/paho.mqtt.c/archive/v${PAHO_VER}.tar.gz\nRUN if [ \"$PAHO_INSTALL\" = \"true\" ] ; then \\\n        wget -O - ${PAHO_REPO} | tar -xz && \\\n        cd paho.mqtt.c-${PAHO_VER} && \\\n        make && \\\n        make install && \\\n        cp build/output/libpaho-mqtt3c.so.1.0 /home/build/usr/lib64/ && \\\n        cp build/output/libpaho-mqtt3cs.so.1.0 /home/build/usr/lib64/ && \\\n        cp build/output/libpaho-mqtt3a.so.1.0 /home/build/usr/lib64/ && \\\n        cp build/output/libpaho-mqtt3as.so.1.0 /home/build/usr/lib64/ && \\\n        cp build/output/paho_c_version /home/build/usr/bin/ && \\\n        cp build/output/samples/paho_c_pub /home/build/usr/bin/ && \\\n        cp build/output/samples/paho_c_sub /home/build/usr/bin/ && \\\n        cp build/output/samples/paho_cs_pub /home/build/usr/bin/ && \\\n        cp build/output/samples/paho_cs_sub /home/build/usr/bin/ && \\\n        chmod 644 /home/build/usr/lib64/libpaho-mqtt3c.so.1.0 && \\\n        chmod 644 /home/build/usr/lib64/libpaho-mqtt3cs.so.1.0 && \\\n        chmod 644 /home/build/usr/lib64/libpaho-mqtt3a.so.1.0 && \\\n        chmod 644 /home/build/usr/lib64/libpaho-mqtt3as.so.1.0 && \\\n        ln /home/build/usr/lib64/libpaho-mqtt3c.so.1.0 /home/build/usr/lib64/libpaho-mqtt3c.so.1 && \\\n        ln /home/build/usr/lib64/libpaho-mqtt3cs.so.1.0 /home/build/usr/lib64/libpaho-mqtt3cs.so.1 && \\\n        ln /home/build/usr/lib64/libpaho-mqtt3a.so.1.0 /home/build/usr/lib64/libpaho-mqtt3a.so.1 && \\\n        ln /home/build/usr/lib64/libpaho-mqtt3as.so.1.0 /home/build/usr/lib64/libpaho-mqtt3as.so.1 && \\\n        ln /home/build/usr/lib64/libpaho-mqtt3c.so.1 /home/build/usr/lib64/libpaho-mqtt3c.so && \\\n        ln /home/build/usr/lib64/libpaho-mqtt3cs.so.1 /home/build/usr/lib64/libpaho-mqtt3cs.so && \\\n        ln /home/build/usr/lib64/libpaho-mqtt3a.so.1 /home/build/usr/lib64/libpaho-mqtt3a.so && \\\n        ln /home/build/usr/lib64/libpaho-mqtt3as.so.1 /home/build/usr/lib64/libpaho-mqtt3as.so && \\\n        cp src/MQTTAsync.h /home/build/usr/include/ && \\\n        cp src/MQTTClient.h /home/build/usr/include/ && \\\n        cp src/MQTTClientPersistence.h /home/build/usr/include/ && \\\n        cp src/MQTTProperties.h /home/build/usr/include/ && \\\n        cp src/MQTTReasonCodes.h /home/build/usr/include/ && \\\n        cp src/MQTTSubscribeOpts.h /home/build/usr/include/; \\\n    else \\\n        echo \"PAHO install disabled\"; \\\n    fi\n\nARG RDKAFKA_INSTALL=true\nARG RDKAFKA_VER=1.0.0\nARG RDKAFKA_REPO=https://github.com/edenhill/librdkafka/archive/v${RDKAFKA_VER}.tar.gz\nRUN if [ \"$RDKAFKA_INSTALL\" = \"true\" ] ; then \\\n        wget -O - ${RDKAFKA_REPO} | tar -xz && \\\n        cd librdkafka-${RDKAFKA_VER} && \\\n        ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --prefix=/usr --libdir=/usr/lib64/ && \\\n        make && \\\n        make install && \\\n        make install DESTDIR=/home/build; \\\n    else \\\n        echo \"RDKAFKA install disabled\"; \\\n    fi\n\n\n#Install va gstreamer plugins\n#Has a dependency on OpenCV, GStreamer\nARG VA_GSTREAMER_PLUGINS_VER=0.4\nARG VA_GSTREAMER_PLUGINS_REPO=https://github.com/opencv/gst-video-analytics/archive/v${VA_GSTREAMER_PLUGINS_VER}.tar.gz\n\nRUN wget -O - ${VA_GSTREAMER_PLUGINS_REPO} | tar xz && \\\n    cd gst-video-analytics-${VA_GSTREAMER_PLUGINS_VER} && \\\n    wget -O - ${VA_GSTREAMER_PLUGINS_PATCH_01} | patch -p1 && \\\n    mkdir build && \\\n    cd build && \\\n    export CFLAGS=\"-std=gnu99 -Wno-missing-field-initializers\" && \\\n    export CXXFLAGS=\"-std=c++11 -Wno-missing-field-initializers\" && \\\n    cmake \\\n    -DVERSION_PATCH=$(echo \"$(git rev-list --count --first-parent HEAD)\") \\\n    -DGIT_INFO=$(echo \"git_$(git rev-parse --short HEAD)\") \\\n    -DCMAKE_BUILD_TYPE=Release \\\n    -DDISABLE_SAMPLES=ON \\\n    -DMQTT=ON \\\n    -DKAFKA=ON \\\n    -DDISABLE_VAAPI=ON \\\n    -DBUILD_SHARED_LIBS=ON -DCMAKE_INSTALL_PREFIX=/usr .. && \\\n    make -j4\nRUN mkdir -p build/usr/lib64/gstreamer-1.0 && \\\n    cp -r gst-video-analytics-${VA_GSTREAMER_PLUGINS_VER}/build/intel64/Release/lib/* build/usr/lib64/gstreamer-1.0\nRUN mkdir -p /usr/lib64/gstreamer-1.0 && \\\n    cp -r gst-video-analytics-${VA_GSTREAMER_PLUGINS_VER}/build/intel64/Release/lib/* /usr/lib64/gstreamer-1.0\n\n\n\n# Clean up after build\nRUN rm -rf /home/build/usr/include && \\\n    rm -rf /home/build/usr/share/doc && \\\n    rm -rf /home/build/usr/share/gtk-doc && \\\n    rm -rf /home/build/usr/share/man && \\\n    find /home/build -name \"*.a\" -exec rm -f {} \\;\n\nFROM centos:7.6.1810\nLABEL Description=\"This is the image for DLDT and GSTREAMER on CentOS 7.6\"\nLABEL Vendor=\"Intel Corporation\"\nWORKDIR /home\n\n# Prerequisites\nRUN yum install -y epel-release; \\\n    yum install -y -q numactl openssl glib2-2.56.1 pango gobject-introspection libpng12 libXv libvisual mesa-libGL pango glib2 alsa-lib openblas-serial \\\nlibsoup libjpeg-turbo ; \\\n    yum remove -y -q epel-release; \\\n    rm -rf /var/cache/yum/*;\n\n# Install\nCOPY --from=build /home/build /\nARG libdir=/opt/intel/dldt/inference-engine/lib/intel64\nENV LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/opt/intel/dldt/inference-engine/lib:/opt/intel/dldt/inference-engine/external/tbb/lib:${libdir}\nENV InferenceEngine_DIR=/opt/intel/dldt/inference-engine/share\nENV LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/usr/lib64/gstreamer-1.0\nENV PKG_CONFIG_PATH=/usr/lib64/pkgconfig\nENV LIBRARY_PATH=${LIBRARY_PATH}:/usr/lib\nENV PATH=${PATH}:/usr/bin\n\n"
}