{
  "startTime": 1674252663017,
  "endTime": 1674252663609,
  "originalSmells": [
    {
      "rule": "mkdirUsrSrcThenRemove",
      "position": {
        "lineStart": 141,
        "lineEnd": 141,
        "columnStart": 1,
        "columnEnd": 19
      }
    },
    {
      "rule": "sha256sumEchoOneSpaces",
      "position": {
        "lineStart": 147,
        "lineEnd": 147,
        "columnStart": 2,
        "columnEnd": 50
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "#\n# NOTE: THIS DOCKERFILE IS GENERATED VIA \"update.sh\"\n#\n# PLEASE DO NOT EDIT IT DIRECTLY.\n#\n\nFROM debian:stretch-slim\n\n# prevent Debian's PHP packages from being installed\n# https://github.com/docker-library/php/pull/542\nRUN set -eux; \\\n\t{ \\\n\t\techo 'Package: php*'; \\\n\t\techo 'Pin: release *'; \\\n\t\techo 'Pin-Priority: -1'; \\\n\t} > /etc/apt/preferences.d/no-debian-php\n\n# dependencies required for running \"phpize\"\n# (see persistent deps below)\nENV PHPIZE_DEPS \\\n\t\tautoconf \\\n\t\tdpkg-dev \\\n\t\tfile \\\n\t\tg++ \\\n\t\tgcc \\\n\t\tlibc-dev \\\n\t\tmake \\\n\t\tpkg-config \\\n\t\tre2c\n\n# persistent / runtime deps\nRUN apt-get update && apt-get install -y \\\n\t\t$PHPIZE_DEPS \\\n\t\tca-certificates \\\n\t\tcurl \\\n\t\txz-utils \\\n\t--no-install-recommends && rm -r /var/lib/apt/lists/*\n\nENV PHP_INI_DIR /usr/local/etc/php\nRUN set -eux; \\\n\tmkdir -p \"$PHP_INI_DIR/conf.d\"; \\\n# allow running as an arbitrary user (https://github.com/docker-library/php/issues/743)\n\t[ ! -d /var/www/html ]; \\\n\tmkdir -p /var/www/html; \\\n\tchown www-data:www-data /var/www/html; \\\n\tchmod 777 /var/www/html\n\n##<autogenerated>##\nENV APACHE_CONFDIR /etc/apache2\nENV APACHE_ENVVARS $APACHE_CONFDIR/envvars\n\nRUN set -eux; \\\n\tapt-get update; \\\n\tapt-get install -y --no-install-recommends apache2; \\\n\trm -rf /var/lib/apt/lists/*; \\\n\t\\\n# generically convert lines like\n#   export APACHE_RUN_USER=www-data\n# into\n#   : ${APACHE_RUN_USER:=www-data}\n#   export APACHE_RUN_USER\n# so that they can be overridden at runtime (\"-e APACHE_RUN_USER=...\")\n\tsed -ri 's/^export ([^=]+)=(.*)$/: ${\\1:=\\2}\\nexport \\1/' \"$APACHE_ENVVARS\"; \\\n\t\\\n# setup directories and permissions\n\t. \"$APACHE_ENVVARS\"; \\\n\tfor dir in \\\n\t\t\"$APACHE_LOCK_DIR\" \\\n\t\t\"$APACHE_RUN_DIR\" \\\n\t\t\"$APACHE_LOG_DIR\" \\\n\t; do \\\n\t\trm -rvf \"$dir\"; \\\n\t\tmkdir -p \"$dir\"; \\\n\t\tchown \"$APACHE_RUN_USER:$APACHE_RUN_GROUP\" \"$dir\"; \\\n# allow running as an arbitrary user (https://github.com/docker-library/php/issues/743)\n\t\tchmod 777 \"$dir\"; \\\n\tdone; \\\n\t\\\n# delete the \"index.html\" that installing Apache drops in here\n\trm -rvf /var/www/html/*; \\\n\t\\\n# logs should go to stdout / stderr\n\tln -sfT /dev/stderr \"$APACHE_LOG_DIR/error.log\"; \\\n\tln -sfT /dev/stdout \"$APACHE_LOG_DIR/access.log\"; \\\n\tln -sfT /dev/stdout \"$APACHE_LOG_DIR/other_vhosts_access.log\"; \\\n\tchown -R --no-dereference \"$APACHE_RUN_USER:$APACHE_RUN_GROUP\" \"$APACHE_LOG_DIR\"\n\n# Apache + PHP requires preforking Apache for best results\nRUN a2dismod mpm_event && a2enmod mpm_prefork\n\n# PHP files should be handled by PHP, and should be preferred over any other file type\nRUN { \\\n\t\techo '<FilesMatch \\.php$>'; \\\n\t\techo '\\tSetHandler application/x-httpd-php'; \\\n\t\techo '</FilesMatch>'; \\\n\t\techo; \\\n\t\techo 'DirectoryIndex disabled'; \\\n\t\techo 'DirectoryIndex index.php index.html'; \\\n\t\techo; \\\n\t\techo '<Directory /var/www/>'; \\\n\t\techo '\\tOptions -Indexes'; \\\n\t\techo '\\tAllowOverride All'; \\\n\t\techo '</Directory>'; \\\n\t} | tee \"$APACHE_CONFDIR/conf-available/docker-php.conf\" \\\n\t&& a2enconf docker-php\n\nENV PHP_EXTRA_BUILD_DEPS apache2-dev\nENV PHP_EXTRA_CONFIGURE_ARGS --with-apxs2 --disable-cgi\n##</autogenerated>##\n\n# Apply stack smash protection to functions using local buffers and alloca()\n# Make PHP's main executable position-independent (improves ASLR security mechanism, and has no performance impact on x86_64)\n# Enable optimization (-O2)\n# Enable linker optimization (this sorts the hash buckets to improve cache locality, and is non-default)\n# Adds GNU HASH segments to generated executables (this is used if present, and is much faster than sysv hash; in this configuration, sysv hash is also generated)\n# https://github.com/docker-library/php/issues/272\nENV PHP_CFLAGS=\"-fstack-protector-strong -fpic -fpie -O2\"\nENV PHP_CPPFLAGS=\"$PHP_CFLAGS\"\nENV PHP_LDFLAGS=\"-Wl,-O1 -Wl,--hash-style=both -pie\"\n\nENV GPG_KEYS A917B1ECDA84AEC2B568FED6F50ABC807BD5DCD0 528995BFEDFBA7191D46839EF9BA0ADA31CBD89E 1729F83938DA44E27BA0F4D3DBDB397470D12172\n\nENV PHP_VERSION 7.1.30\nENV PHP_URL=\"https://www.php.net/get/php-7.1.30.tar.xz/from/this/mirror\" PHP_ASC_URL=\"https://www.php.net/get/php-7.1.30.tar.xz.asc/from/this/mirror\"\nENV PHP_SHA256=\"6310599811536dbe87e4bcf212bf93196bdfaff519d0c821e4c0068efd096a7c\" PHP_MD5=\"\"\n\nRUN set -xe; \\\n\n\tfetchDeps=' \\\n\t\twget \\\n\t'; \\\n\tif ! command -v gpg > /dev/null; then \\\n\t\tfetchDeps=\"$fetchDeps \\\n\t\t\tdirmngr \\\n\t\t\tgnupg \\\n\t\t\"; \\\n\tfi; \\\n\tapt-get update; \\\n\tapt-get install -y --no-install-recommends $fetchDeps; \\\n\trm -rf /var/lib/apt/lists/*; \\\n\n\tmkdir -p /usr/src; rm -rf /usr/src \\\n\tcd /usr/src; \\\n\n\twget -O php.tar.xz \"$PHP_URL\"; \\\n\n\tif [ -n \"$PHP_SHA256\" ]; then \\\n\t\techo \"$PHP_SHA256  *php.tar.xz\" | sha256sum -c -; \\\n\tfi; \\\n\tif [ -n \"$PHP_MD5\" ]; then \\\n\t\techo \"$PHP_MD5 *php.tar.xz\" | md5sum -c -; \\\n\tfi; \\\n\n\tif [ -n \"$PHP_ASC_URL\" ]; then \\\n\t\twget -O php.tar.xz.asc \"$PHP_ASC_URL\"; \\\n\t\texport GNUPGHOME=\"$(mktemp -d)\"; \\\n\t\tfor key in $GPG_KEYS; do \\\n\t\t\tgpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys \"$key\"; \\\n\t\tdone; \\\n\t\tgpg --batch --verify php.tar.xz.asc php.tar.xz; \\\n\t\tcommand -v gpgconf > /dev/null && gpgconf --kill all; \\\n\t\trm -rf \"$GNUPGHOME\"; \\\n\tfi; \\\n\n\tapt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false $fetchDeps\n\nCOPY docker-php-source /usr/local/bin/\n\nRUN set -eux; \\\n\t\\\n\tsavedAptMark=\"$(apt-mark showmanual)\"; \\\n\tapt-get update; \\\n\tapt-get install -y --no-install-recommends \\\n\t\tlibcurl4-openssl-dev \\\n\t\tlibedit-dev \\\n\t\tlibsqlite3-dev \\\n\t\tlibssl-dev \\\n\t\tlibxml2-dev \\\n\t\tzlib1g-dev \\\n\t\t${PHP_EXTRA_BUILD_DEPS:-} \\\n\t; \\\n\trm -rf /var/lib/apt/lists/*; \\\n\t\\\n\texport \\\n\t\tCFLAGS=\"$PHP_CFLAGS\" \\\n\t\tCPPFLAGS=\"$PHP_CPPFLAGS\" \\\n\t\tLDFLAGS=\"$PHP_LDFLAGS\" \\\n\t; \\\n\tdocker-php-source extract; \\\n\tcd /usr/src/php; \\\n\tgnuArch=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\"; \\\n\tdebMultiarch=\"$(dpkg-architecture --query DEB_BUILD_MULTIARCH)\"; \\\n# https://bugs.php.net/bug.php?id=74125\n\tif [ ! -d /usr/include/curl ]; then \\\n\t\tln -sT \"/usr/include/$debMultiarch/curl\" /usr/local/include/curl; \\\n\tfi; \\\n\t./configure \\\n\t\t--build=\"$gnuArch\" \\\n\t\t--with-config-file-path=\"$PHP_INI_DIR\" \\\n\t\t--with-config-file-scan-dir=\"$PHP_INI_DIR/conf.d\" \\\n\t\t\\\n# make sure invalid --configure-flags are fatal errors intead of just warnings\n\t\t--enable-option-checking=fatal \\\n\t\t\\\n# https://github.com/docker-library/php/issues/439\n\t\t--with-mhash \\\n\t\t\\\n# --enable-ftp is included here because ftp_ssl_connect() needs ftp to be compiled statically (see https://github.com/docker-library/php/issues/236)\n\t\t--enable-ftp \\\n# --enable-mbstring is included here because otherwise there's no way to get pecl to use it properly (see https://github.com/docker-library/php/issues/195)\n\t\t--enable-mbstring \\\n# --enable-mysqlnd is included here because it's harder to compile after the fact than extensions are (since it's a plugin for several extensions, not an extension in itself)\n\t\t--enable-mysqlnd \\\n\t\t\\\n\t\t--with-curl \\\n\t\t--with-libedit \\\n\t\t--with-openssl \\\n\t\t--with-zlib \\\n\t\t\\\n# bundled pcre does not support JIT on s390x\n# https://manpages.debian.org/stretch/libpcre3-dev/pcrejit.3.en.html#AVAILABILITY_OF_JIT_SUPPORT\n\t\t$(test \"$gnuArch\" = 's390x-linux-gnu' && echo '--without-pcre-jit') \\\n\t\t--with-libdir=\"lib/$debMultiarch\" \\\n\t\t\\\n\t\t${PHP_EXTRA_CONFIGURE_ARGS:-} \\\n\t; \\\n\tmake -j \"$(nproc)\"; \\\n\tfind -type f -name '*.a' -delete; \\\n\tmake install; \\\n\tfind /usr/local/bin /usr/local/sbin -type f -executable -exec strip --strip-all '{}' + || true; \\\n\tmake clean; \\\n\t\\\n# https://github.com/docker-library/php/issues/692 (copy default example \"php.ini\" files somewhere easily discoverable)\n\tcp -v php.ini-* \"$PHP_INI_DIR/\"; \\\n\t\\\n\tcd /; \\\n\tdocker-php-source delete; \\\n\t\\\n# reset apt-mark's \"manual\" list so that \"purge --auto-remove\" will remove all build dependencies\n\tapt-mark auto '.*' > /dev/null; \\\n\t[ -z \"$savedAptMark\" ] || apt-mark manual $savedAptMark; \\\n\tfind /usr/local -type f -executable -exec ldd '{}' ';' \\\n\t\t| awk '/=>/ { print $(NF-1) }' \\\n\t\t| sort -u \\\n\t\t| xargs -r dpkg-query --search \\\n\t\t| cut -d: -f1 \\\n\t\t| sort -u \\\n\t\t| xargs -r apt-mark manual \\\n\t; \\\n\tapt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false; \\\n\t\\\n# update pecl channel definitions https://github.com/docker-library/php/issues/443\n\tpecl update-channels; \\\n\trm -rf /tmp/pear ~/.pearrc; \\\n# smoke test\n\tphp --version\n\nCOPY docker-php-ext-* docker-php-entrypoint /usr/local/bin/\n\nENTRYPOINT [\"docker-php-entrypoint\"]\n##<autogenerated>##\nCOPY apache2-foreground /usr/local/bin/\nWORKDIR /var/www/html\n\nEXPOSE 80\nCMD [\"apache2-foreground\"]\n##</autogenerated>##\n"
}