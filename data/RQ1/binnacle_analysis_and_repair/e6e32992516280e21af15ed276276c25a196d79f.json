{
  "startTime": 1674251958372,
  "endTime": 1674251958757,
  "originalSmells": [
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 86,
        "lineEnd": 86,
        "columnStart": 4,
        "columnEnd": 70
      }
    },
    {
      "rule": "yumInstallRmVarCacheYum",
      "position": {
        "lineStart": 15,
        "lineEnd": 15,
        "columnStart": 4,
        "columnEnd": 87
      }
    },
    {
      "rule": "yumInstallRmVarCacheYum",
      "position": {
        "lineStart": 60,
        "lineEnd": 60,
        "columnStart": 4,
        "columnEnd": 78
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 25,
        "lineEnd": 25,
        "columnStart": 4,
        "columnEnd": 61
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM registry.access.redhat.com/ubi7/ubi:7.6-123 as anchore-cli-builder\n\n######## This is stage1 where anchore wheels, binary deps, and any items from the source tree get staged to /build_output ########\n\nENV LANG=en_US.UTF-8 LC_ALL=en_US.UTF-8\n\nCOPY . /buildsource\nWORKDIR /buildsource\n\nRUN set -ex && \\\n    mkdir -p /build_output /build_output/deps /build_output/configs /build_output/wheels\n\nRUN set -ex && \\\n    echo \"installing OS dependencies\" && \\\n    yum update -y && \\\n    yum install -y gcc make rh-python36 rh-python36-python-wheel rh-python36-python-pip && rm -rf /var/cache/yum\n\n# create anchore binaries\nRUN set -ex && \\\n    echo \"installing anchore\" && \\\n    source /opt/rh/rh-python36/enable && \\\n    pip3 wheel --wheel-dir=/build_output/wheels . && \\\n    cp ./LICENSE /build_output/ && \\\n    cp ./docker-entrypoint.sh /build_output/configs/docker-entrypoint.sh\n\nRUN tar -z -c -v -C /build_output -f /anchore-buildblob.tgz . && rm /anchore-buildblob.tgz\n\nFROM registry.access.redhat.com/ubi7/ubi:7.6-123 as anchore-cli-final\n\nARG CLI_COMMIT\nARG ANCHORE_CLI_VERSION=\"0.4.1\"\nARG ANCHORE_CLI_RELEASE=\"dev\"\n\n# Copy artifacts from build step\nCOPY --from=anchore-cli-builder /build_output /build_output\n\n# Container metadata section\n\nMAINTAINER dev@anchore.com\n\nLABEL anchore_cli_commit=$CLI_COMMIT \\\n      source=\"https://github.com/anchore/anchore-cli\" \\\n      name=\"anchore-cli\" \\\n      maintainer=\"dev@anchore.com\" \\\n      vendor=\"Anchore Inc.\" \\\n      version=$ANCHORE_CLI_VERSION \\\n      release=$ANCHORE_CLI_RELEASE \\\n      summary=\"Anchore Engine CLI - python client for use against the anchore-engine container image scanning service, for policy-based security, best-practice and compliance enforcement.\" \\\n      description=\"Anchore is an open platform for container security and compliance that allows developers, operations, and security teams to discover, analyze, and certify container images on-premises or in the cloud. The Anchore CLI is a python client that can be used to access and manager Anchore Engine - the on-prem, OSS, API accessible service that allows ops and developers to perform detailed analysis, run queries, produce reports and define policies on container images that can be used in CI/CD pipelines to ensure that only containers that meet your organizationâ€™s requirements are deployed into production.\"\n\n# Default values that should be overridden in most cases on each container exec\nENV ANCHORE_CLI_USER=admin\nENV ANCHORE_CLI_PASS=foobar\nENV ANCHORE_CLI_URL=http://localhost:8228/v1/\nENV LANG=en_US.UTF-8\nENV LC_ALL=en_US.UTF-8\n\n# Build dependencies\n\nRUN yum update -y && \\\n    yum install -y rh-python36 rh-python36-python-wheel rh-python36-python-pip && rm -rf /var/cache/yum\n\n# Setup container default configs and directories\n\nWORKDIR /anchore-cli\n\n# Perform OS setup\n\nRUN set -ex && \\\n    groupadd --gid 1000 anchore && \\\n    useradd --uid 1000 --gid anchore --shell /bin/bash --create-home anchore && \\\n    mkdir -p /licenses/ && \\\n    cp /build_output/LICENSE /licenses/ && \\\n    cp /build_output/configs/docker-entrypoint.sh /docker-entrypoint.sh\n\n# Perform any base OS specific setup\n\n# Setup python3 environment & create anchore-cli wrapper script for UBI7\nRUN echo -e '#!/usr/bin/env bash\\n\\nsource /opt/rh/rh-python36/enable' > /etc/profile.d/python3.sh && \\\n    echo -e '#!/usr/bin/env bash\\n\\n/docker-entrypoint.sh anchore-cli $@' > /usr/local/bin/anchore-cli && \\\n    chmod +x /usr/local/bin/anchore-cli\n\n# Perform the anchore-cli build and install\n\nRUN set -ex && \\\n    source /opt/rh/rh-python36/enable && \\\n    pip3 install --no-cache-dir --no-index --find-links=./ /build_output/wheels/*.whl && \\\n    rm -rf /build_output /root/.cache\n\nUSER anchore:anchore\n\nENTRYPOINT [\"/docker-entrypoint.sh\"]\nCMD [\"/bin/bash\"]\n"
}