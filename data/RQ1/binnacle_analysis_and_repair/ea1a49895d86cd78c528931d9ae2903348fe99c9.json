{
  "startTime": 1674242935232,
  "endTime": 1674242935437,
  "originalSmells": [
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 33,
        "lineEnd": 33,
        "columnStart": 4,
        "columnEnd": 44
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 14,
        "lineEnd": 17,
        "columnStart": 4,
        "columnEnd": 83
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 28,
        "lineEnd": 28,
        "columnStart": 4,
        "columnEnd": 86
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# This Dockerfile is for development/evaluation purposes only (insecure config, hardcoded secrets).\n# Example usage:\n#     docker build -t pdnscontrol . && docker run -p 5301:5301 -p 8081:8081 -p 5000:5000 --name pdnscontrol pdnscontrol\n#\n# Default email/password for pdnscontrol: admin@example.org/changeme\n#\n# Ports:\n# 5000: pdnscontrol web\n# 5301: Auth. DNS\n# 8081: Auth. DNS Web & API\n\nFROM debian:testing\n\nRUN apt-get update && \\\n    DEBIAN_FRONTEND=noninteractive apt-get --no-install-recommends -y install \\\n        libpq-dev libmysqlclient-dev \\\n        python-virtualenv python-dev python-pip python-flask python-sqlalchemy python-psycopg2 python-mysqldb python-blinker python-passlib python-requests \\\n        sqlite3 build-essential libpython-dev graphite-carbon graphite-web gunicorn && \\\n    rm -rf /var/lib/apt/lists/*\n\nRUN mkdir -p /opt && \\\n    useradd -d /opt/pdnscontrol -m --system pdnscontrol\n\nUSER _graphite\nRUN graphite-manage syncdb --noinput\nUSER root\n\nRUN apt-get update && \\\n    DEBIAN_FRONTEND=noninteractive apt-get --no-install-recommends -y install pdns-server pdns-backend-sqlite3 && \\\n    rm -rf /var/lib/apt/lists/*\n\nWORKDIR /opt/pdnscontrol\nCOPY requirements-flexible.txt /opt/pdnscontrol/\nRUN pip install --no-cache-dir -r requirements-flexible.txt\nCOPY . /opt/pdnscontrol\n\n#VOLUME /opt/pdnscontrol/instance\nRUN mkdir -p /opt/pdnscontrol/instance && chown -R pdnscontrol: /opt/pdnscontrol/\nWORKDIR /opt/pdnscontrol/instance\n\nUSER pdnscontrol\n\n# Configure PowerDNS Auth.\nRUN set -x && \\\n    echo \"# generated by dockerfile\" > pdns.conf && \\\n    echo \"socket-dir=/opt/pdnscontrol/instance\" >> pdns.conf && \\\n    echo \"launch=gsqlite3\" >> pdns.conf && \\\n    echo \"gsqlite3-database=/opt/pdnscontrol/instance/pdns.sqlite3\" >> pdns.conf && \\\n    echo \"local-address=0.0.0.0\" >> pdns.conf && \\\n    echo \"local-port=5301\" >> pdns.conf && \\\n    echo \"webserver=yes\" >> pdns.conf && \\\n    echo \"webserver-address=0.0.0.0\" >> pdns.conf && \\\n    echo \"webserver-password=changeme\" >> pdns.conf && \\\n    echo \"webserver-port=8081\" >> pdns.conf && \\\n    echo \"experimental-api-key=apikey123456\" >> pdns.conf && \\\n    echo \"experimental-json-interface=yes\" >> pdns.conf && \\\n    true && cat pdns.conf\n\n# Import empty PowerDNS Auth. database\nRUN set -x && if [ ! -f pdns.sqlite3 ]; then \\\n    sqlite3 -bail -batch pdns.sqlite3 \".read /usr/share/doc/pdns-backend-sqlite3/schema.sqlite3.sql\"; \\\n    fi\n\n# Configure pdnscontrol and initialize it's database\nRUN set -x && if [ ! -f pdnscontrol.conf ]; then \\\n    echo \"# generated by dockerfile\" > pdnscontrol.conf && \\\n    echo \"DATABASE_URI='sqlite:////opt/pdnscontrol/instance/pdnscontrol.sqlite'\" >> pdnscontrol.conf && \\\n    echo \"SECRET_KEY='notsecret'\" >> pdnscontrol.conf && \\\n    echo \"DEBUG = True\" >> pdnscontrol.conf && \\\n    echo \"SECURITY_PASSWORD_SALT = 'for-evaluation-only'\" >> pdnscontrol.conf && \\\n    echo \"IGNORE_SSL_ERRORS = True\" >> pdnscontrol.conf ; \\\n    fi && cat pdnscontrol.conf && python ../install.py\n\nUSER root\n\nEXPOSE 5000 5301 8081\nENTRYPOINT [\"/opt/pdnscontrol/docker-entrypoint.sh\"]\nCMD [\"debug\"]\n\n"
}