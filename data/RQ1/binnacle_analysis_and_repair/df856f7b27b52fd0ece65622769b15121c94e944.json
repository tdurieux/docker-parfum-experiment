{
  "startTime": 1674244242014,
  "endTime": 1674244242048,
  "originalSmells": [
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 11,
        "lineEnd": 24,
        "columnStart": 36,
        "columnEnd": 19
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM python:3.6.3-jessie\n\nENV LC_ALL=C.UTF-8\nENV LANG=C.UTF-8\n\n\n# This specifies where the current working\n# directory is when we start copying files in.\nWORKDIR /stage\n\n# Install base packages like gcc, git etc.\nRUN apt-get update --fix-missing && apt-get install --no-install-recommends -y \\\n    bzip2 \\\n    ca-certificates \\\n    curl \\\n    gcc \\\n    git \\\n    libc-dev \\\n    libglib2.0-0 \\\n    libsm6 \\\n    libxext6 \\\n    libxrender1 \\\n    wget \\\n    libevent-dev \\\n    build-essential && \\\n    rm -rf /var/lib/apt/lists/*\n\n#### Add your code in here! ####\n\n# Example commands:\n#\n# Copies a directory into the dockerfile.\n# COPY folder/ folder/\n#\n# Installs some requirements. Remember to COPY the\n# requirements.txt file into the Docker image first!\n# RUN pip install -r requirements.txt\n\n\n# Optional argument to set an environment variable with the Git SHA\nARG SOURCE_COMMIT\nENV SOURCE_COMMIT $SOURCE_COMMIT\n\n# This exposes port 8000 to outside of the Docker container.\n# This is helful if you want to run a model server or something.\nEXPOSE 8000\n\n\n# You could change this to actually run your training script.\n# Currently, it just runs a shell inside the container.\nCMD [\"/bin/bash\"]\n"
}