{
  "startTime": 1674238991795,
  "endTime": 1674238991979,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 35,
        "lineEnd": 35,
        "columnStart": 14,
        "columnEnd": 109
      }
    },
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 57,
        "lineEnd": 57,
        "columnStart": 4,
        "columnEnd": 28
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 43,
        "lineEnd": 43,
        "columnStart": 2,
        "columnEnd": 51
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "ARG  NODE_VERSION=8.12.0-slim\nFROM node:${NODE_VERSION}\nARG GITHUB_ACCOUNT=fiware\nARG GITHUB_REPOSITORY=tutorials.Step-by-Step\nARG DOWNLOAD=latest\n\n# Copying Build time arguments to environment variables so they are persisted at run time and can be\n# inspected within a running container.\n# see: https://vsupalov.com/docker-build-time-env-values/  for a deeper explanation.\n\nENV GITHUB_ACCOUNT=${GITHUB_ACCOUNT}\nENV GITHUB_REPOSITORY=${GITHUB_REPOSITORY}\nENV DOWNLOAD=${DOWNLOAD}\n\n#\n# The following RUN command retrieves the source code from GitHub.\n#\n# To obtain the latest stable release run this Docker file with the parameters\n# --no-cache --build-arg DOWNLOAD=stable\n# To obtain any speciifc version of a release run this Docker file with the parameters\n# --no-cache --build-arg DOWNLOAD=1.7.0\n#\n# The default download is the latest tip of the master of the named repository on GitHub\n#\n# Alternatively for local development, just copy this Dockerfile into file the root of the repository and\n# replace the whole RUN statement by the following COPY statement in your local source using :\n#\n# COPY context-provider /usr/src/app\n#\nRUN if [ \"${DOWNLOAD}\" = \"latest\" ] ; \\\n  then \\\n    RELEASE=\"master\"; \\\n    echo \"INFO: Building Latest Development\"; \\\n  elif [ \"${DOWNLOAD}\" = \"stable\" ]; \\\n  then \\\n    RELEASE=$( curl -f -s https://api.github.com/repos/\"${GITHUB_ACCOUNT}\"/\"${GITHUB_REPOSITORY}\"/releases/latest | grep 'tag_name' | cut -d\\\" -f4) ; \\\n    echo \"INFO: Building Latest Stable Release: ${RELEASE}\"; \\\n  else \\\n    RELEASE=\"${DOWNLOAD}\"; \\\n    echo \"INFO: Building Release: ${RELEASE}\"; \\\n  fi && \\\n  # Ensure that unzip is installed, and download the sources\n  apt-get update && \\\n  apt-get install -y  --no-install-recommends unzip && \\\n  wget --no-check-certificate -O source.zip https://github.com/\"${GITHUB_ACCOUNT}\"/\"${GITHUB_REPOSITORY}\"/archive/\"${RELEASE}\".zip && \\\n  unzip source.zip && \\\n  rm source.zip && \\\n  mv \"${GITHUB_REPOSITORY}-${RELEASE}\"/context-provider /usr/src/app && \\\n  rm -rf \"${GITHUB_REPOSITORY}-${RELEASE}\" && \\\n  # Remove unzip and clean apt cache\n  apt-get clean && \\\n  apt-get remove -y unzip && \\\n  apt-get -y autoremove && rm -rf /var/lib/apt/lists/*;\n\n# Create app directory\nWORKDIR /usr/src/app\n\nRUN npm install --production && \\\n    rm -rf /root/.npm/cache/* && npm cache clean --force;\n\n# Ports used by application\nEXPOSE ${WEB_APP_PORT:-3000} ${DUMMY_DEVICES_PORT:-3001}\n\nCMD [\"npm\", \"start\" ]"
}