{
  "startTime": 1674242901225,
  "endTime": 1674242901624,
  "originalSmells": [
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 143,
        "lineEnd": 143,
        "columnStart": 4,
        "columnEnd": 27
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 161,
        "lineEnd": 161,
        "columnStart": 4,
        "columnEnd": 27
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# inspired by sn4_baseline\nFROM nvidia/cuda:9.0-devel-ubuntu16.04\nMAINTAINER avanetten\n\n# nvidia-docker build -t simrdwn2.1 .  # build (use existing packages)\n# nvidia-docker build --no-cache -t simrdwn2.2 .  # rebuild from scratch\n# NV_GPU=0 nvidia-docker run -it -v /local_data:/local_data --name simrdwn2.2_gpu0 simrdwn2.2\n# NV_GPU=0 nvidia-docker run -it -v /local_data:/local_data -v /cosmiq:/cosmiq --name simrdwn2.1_gpu0 simrdwn2.1\n\n# IF YOU WANT PROGRESS PRINTED TO TERMINAL\n# Update model_main to log to screen...\n# https://stackoverflow.com/questions/52016255/tensorflow-object-detection-api-not-displaying-global-steps\n# #. Add tf.logging.set_verbosity(tf.logging.INFO) after the import section of the model_main.py script. It will display a summary after every 100th step. (Can change frequency by log_step_count)\n# vi /tensorflow/models/research/object_detection/model_main.py\n# insert in on line 27:\n#  tf.logging.set_verbosity(tf.logging.INFO)\n# change line 63 to:\n#  config = tf.estimator.RunConfig(model_dir=FLAGS.model_dir, log_step_count_steps=10)\n\n# once started run:\n# export PYTHONPATH=$PYTHONPATH:/tensorflow/models/research/:/tensorflow/models/research/slim\n\n# # check if it's using gpu\n# python\n# import tensorflow as tf\n# sess = tf.Session(config=tf.ConfigProto(log_device_placement=True))\n\n# resources:\n#. https://github.com/jkjung-avt/hand-detection-tutorial\n\nENV CUDNN_VERSION 7.3.0.29\nLABEL com.nvidia.cudnn.version=\"${CUDNN_VERSION}\"\n\n# prep apt-get and cudnn\nRUN apt-get update && apt-get install -y --no-install-recommends \\\n\t    apt-utils \\\n            libcudnn7=$CUDNN_VERSION-1+cuda9.0 \\\n            libcudnn7-dev=$CUDNN_VERSION-1+cuda9.0 && \\\n    apt-mark hold libcudnn7 && \\\n    rm -rf /var/lib/apt/lists/*\n\n# install requirements\nRUN apt-get update \\\n  \t&& apt-get install -y --no-install-recommends \\\n\t    bc \\\n\t    bzip2 \\\n\t    ca-certificates \\\n\t    curl \\\n\t    git \\\n\t    libgdal-dev \\\n\t    libssl-dev \\\n\t    libffi-dev \\\n\t    libncurses-dev \\\n\t    libgl1 \\\n\t    jq \\\n\t    nfs-common \\\n\t    parallel \\\n\t    python-dev \\\n\t    python-pip \\\n\t    python-wheel \\\n\t    python-setuptools \\\n\t    unzip \\\n\t    vim \\\n\t\ttmux \\\n\t    wget \\\n\t    build-essential \\\n        libopencv-dev \\\n        python-opencv \\\n\t  && apt-get clean \\\n\t  && rm -rf /var/lib/apt/lists/*\n\nSHELL [\"/bin/bash\", \"-c\"]\nENV PATH /opt/conda/bin:$PATH\n\n# install anaconda\nRUN wget --quiet https://repo.anaconda.com/miniconda/Miniconda3-4.5.4-Linux-x86_64.sh -O ~/miniconda.sh && \\\n    /bin/bash ~/miniconda.sh -b -p /opt/conda && \\\n    rm ~/miniconda.sh && \\\n    /opt/conda/bin/conda clean -tipsy && \\\n    ln -s /opt/conda/etc/profile.d/conda.sh /etc/profile.d/conda.sh && \\\n    echo \". /opt/conda/etc/profile.d/conda.sh\" >> ~/.bashrc && \\\n    echo \"conda activate base\" >> ~/.bashrc\nENV TINI_VERSION v0.16.1\nADD https://github.com/krallin/tini/releases/download/${TINI_VERSION}/tini /usr/bin/tini\nRUN chmod +x /usr/bin/tini\n\n# use conda-forge instead of default channel\nRUN conda update conda && \\\n    conda config --remove channels defaults && \\\n    conda config --add channels conda-forge\n\n# set up conda environment and add to $PATH\nRUN conda create -n simrdwn2 python=3.6 \\\n                    && echo \"source activate simrdwn2\" > ~/.bashrc\nENV PATH /opt/conda/envs/simrdwn2/bin:$PATH\n\n# install GPU version of tensorflow\nRUN source activate simrdwn2 && \\\n    conda install -n simrdwn2 -c defaults tensorflow-gpu=1.13.1\n\n# install keras with tf backend\nENV KERAS_BACKEND=tensorflow\nRUN source activate simrdwn2 \\\n  && conda install -n simrdwn2 keras\n\nRUN conda install -n simrdwn2 \\\n\t              #awscli \\\n\t              affine \\\n\t              pyproj \\\n\t              pyhamcrest=1.9.0 \\\n\t              cython \\\n\t\t\t\t  contextlib2 \\\n\t              fiona \\\n\t              h5py \\\n\t              ncurses \\\n\t              jupyter \\\n\t              jupyterlab \\\n\t              ipykernel \\\n\t              libgdal \\\n\t              matplotlib \\\n\t\t\t\t  ncurses \\\n\t              numpy \\\n\t              #opencv=3.4.1 \\\n\t              #py-opencv \\\n\t              pandas \\\n\t              pillow \\\n\t              pip \\\n\t              scipy \\\n\t              scikit-image \\\n\t              scikit-learn \\\n\t              shapely \\\n\t              gdal \\\n\t              rtree \\\n\t              testpath \\\n\t              tqdm \\\n\t              pandas \\\n\t              geopandas \\\n\t              rasterio \\\n\t\t\t\t  opencv=4.0.0 \\\n\t&& conda clean -p \\\n\t&& conda clean -t \\\n\t&& conda clean --yes --all\n\nRUN pip install --no-cache-dir statsmodels\n\n# tf object detection api\nRUN git clone https://github.com/tensorflow/models.git /tensorflow/models\n#WORKDIR /tensorflow/models/research/\n#RUN protoc object_detection/protos/*.proto --python_out=.\n# WORKDIR /tensorflow/models/research/\n# RUN export PYTHONPATH=$PYTHONPATH:`pwd`:`pwd`/slim\n# ENV PYTHONPATH $PYTHONPATH:/tensorflow/models/:/tensorflow/models/slim\n# ENV PYTHONPATH $PYTHONPATH:/tensorflow/models/:/tensorflow/models/research/slim\n\n# also need coco api\n# manually\n# From tensorflow/models/research/\nWORKDIR /tensorflow/models/research/\nRUN wget -O protobuf.zip https://github.com/google/protobuf/releases/download/v3.0.0/protoc-3.0.0-linux-x86_64.zip\nRUN unzip protobuf.zip\nRUN ./bin/protoc object_detection/protos/*.proto --python_out=.\nRUN pip install --no-cache-dir pycocotools\n\n# From tensorflow/models/research/\nWORKDIR /tensorflow/models/research/\nRUN export PYTHONPATH=$PYTHONPATH:`pwd`:`pwd`/slim\nENV PYTHONPATH $PYTHONPATH:/tensorflow/models/:/tensorflow/models/slim\nENV PYTHONPATH $PYTHONPATH:/tensorflow/models/:/tensorflow/models/research/slim\n\n# # add a jupyter kernel for the conda environment in case it's wanted\nRUN source activate simrdwn2 && python -m ipykernel.kernelspec\nRUN python -m ipykernel.kernelspec\n\n\n###################\n# Set up our notebook config.\nWORKDIR /\n# TensorBoard\n# open ports for jupyterlab and tensorboard\nEXPOSE 8888 6006\nRUN [\"/bin/bash\"]\n"
}