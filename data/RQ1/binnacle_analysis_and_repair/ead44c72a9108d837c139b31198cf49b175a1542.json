{
  "startTime": 1674249201161,
  "endTime": 1674249202273,
  "originalSmells": [
    {
      "rule": "wgetUseHttpsUrl",
      "position": {
        "lineStart": 165,
        "lineEnd": 165,
        "columnStart": 7,
        "columnEnd": 75
      }
    },
    {
      "rule": "wgetUseHttpsUrl",
      "position": {
        "lineStart": 175,
        "lineEnd": 175,
        "columnStart": 7,
        "columnEnd": 77
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 78,
        "lineEnd": 78,
        "columnStart": 11,
        "columnEnd": 44
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 89,
        "lineEnd": 89,
        "columnStart": 8,
        "columnEnd": 20
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 131,
        "lineEnd": 131,
        "columnStart": 8,
        "columnEnd": 20
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 169,
        "lineEnd": 169,
        "columnStart": 8,
        "columnEnd": 20
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 179,
        "lineEnd": 179,
        "columnStart": 8,
        "columnEnd": 20
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 167,
        "lineEnd": 167,
        "columnStart": 7,
        "columnEnd": 65
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 177,
        "lineEnd": 177,
        "columnStart": 7,
        "columnEnd": 66
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM alpine:3.5\nMAINTAINER mail@racktear.com\n\nRUN addgroup -S tarantool \\\n    && adduser -S -G tarantool tarantool \\\n    && apk add --no-cache 'su-exec>=0.2'\n\nENV TARANTOOL_VERSION=1.7.6-11-gcd17b77f9 \\\n    TARANTOOL_DOWNLOAD_URL=https://github.com/tarantool/tarantool.git \\\n    TARANTOOL_INSTALL_LUADIR=/usr/local/share/tarantool \\\n    CURL_REPO=https://github.com/curl/curl.git \\\n    CURL_TAG=curl-7_59_0 \\\n    GPERFTOOLS_REPO=https://github.com/gperftools/gperftools.git \\\n    GPERFTOOLS_TAG=gperftools-2.5 \\\n    LUAROCKS_URL=https://github.com/tarantool/luarocks/archive/6e6fe62d9409fe2103c0fd091cccb3da0451faf5.tar.gz \\\n    LUAROCK_SHARD_REPO=https://github.com/tarantool/shard.git \\\n    LUAROCK_SHARD_TAG=8f8c5a7 \\\n    LUAROCK_AVRO_SCHEMA_VERSION=2.0.1 \\\n    LUAROCK_EXPERATIOND_VERSION=1.0.1 \\\n    LUAROCK_QUEUE_VERSION=1.0.2 \\\n    LUAROCK_CONNPOOL_VERSION=1.1.1 \\\n    LUAROCK_HTTP_VERSION=1.0.1 \\\n    LUAROCK_MEMCACHED_VERSION=1.0.0 \\\n    LUAROCK_TARANTOOL_PG_VERSION=2.0.1 \\\n    LUAROCK_TARANTOOL_MYSQL_VERSION=2.0.1 \\\n    LUAROCK_TARANTOOL_CURL_VERSION=2.3.1 \\\n    LUAROCK_TARANTOOL_MQTT_VERSION=1.2.1 \\\n    LUAROCK_TARANTOOL_GIS_VERSION=1.0.0 \\\n    LUAROCK_TARANTOOL_PROMETHEUS_VERSION=1.0.0 \\\n    LUAROCK_TARANTOOL_GPERFTOOLS_VERSION=1.0.1\n\nCOPY gperftools_alpine.diff /\n\nRUN set -x \\\n    && apk add --no-cache --virtual .run-deps \\\n        libstdc++ \\\n        readline \\\n        libressl \\\n        yaml \\\n        lz4 \\\n        binutils \\\n        ncurses \\\n        libgomp \\\n        lua \\\n        tar \\\n        zip \\\n        libunwind \\\n        icu \\\n        ca-certificates \\\n    && apk add --no-cache --virtual .build-deps \\\n        perl \\\n        gcc \\\n        g++ \\\n        cmake \\\n        readline-dev \\\n        libressl-dev \\\n        yaml-dev \\\n        lz4-dev \\\n        binutils-dev \\\n        ncurses-dev \\\n        lua-dev \\\n        musl-dev \\\n        make \\\n        git \\\n        libunwind-dev \\\n        autoconf \\\n        automake \\\n        libtool \\\n        linux-headers \\\n        go \\\n        icu-dev \\\n        wget \\\n    && : \"---------- curl ----------\" \\\n    && mkdir -p /usr/src/curl \\\n    && git clone \"$CURL_REPO\" /usr/src/curl \\\n    && git -C /usr/src/curl checkout \"$CURL_TAG\" \\\n    && ( cd /usr/src/curl \\\n        && ./buildconf \\\n        && ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --prefix \"/usr/local\" \\\n        && make -j \\\n        && make install) \\\n    && : \"---------- gperftools ----------\" \\\n    && mkdir -p /usr/src/gperftools \\\n    && git clone \"$GPERFTOOLS_REPO\" /usr/src/gperftools \\\n    && git -C /usr/src/gperftools checkout \"$GPERFTOOLS_TAG\" \\\n    && ( cd /usr/src/gperftools; \\\n        patch -p1 < /gperftools_alpine.diff; \\\n        rm /gperftools_alpine.diff; \\\n        ./autogen.sh; \\\n        ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\"; \\\n        make; \\\n        cp .libs/libprofiler.so* /usr/local/lib;) \\\n    && (GOPATH=/usr/src/go go get github.com/google/pprof; \\\n        cp /usr/src/go/bin/pprof /usr/local/bin) \\\n    && : \"---------- tarantool ----------\" \\\n    && mkdir -p /usr/src/tarantool \\\n    && git clone \"$TARANTOOL_DOWNLOAD_URL\" /usr/src/tarantool \\\n    && git -C /usr/src/tarantool checkout \"$TARANTOOL_VERSION\" \\\n    && git -C /usr/src/tarantool submodule update --init --recursive \\\n    && (cd /usr/src/tarantool; \\\n       cmake -DCMAKE_BUILD_TYPE=RelWithDebInfo\\\n             -DENABLE_BUNDLED_LIBYAML:BOOL=OFF\\\n             -DENABLE_BACKTRACE:BOOL=ON\\\n             -DENABLE_DIST:BOOL=ON\\\n             .) \\\n    && make -C /usr/src/tarantool -j \\\n    && make -C /usr/src/tarantool install \\\n    && make -C /usr/src/tarantool clean \\\n    && : \"---------- small ----------\" \\\n    && (cd /usr/src/tarantool/src/lib/small; \\\n        cmake -DCMAKE_INSTALL_PREFIX=/usr \\\n              -DCMAKE_INSTALL_LIBDIR=lib \\\n              -DCMAKE_BUILD_TYPE=RelWithDebInfo \\\n              .) \\\n    && make -C /usr/src/tarantool/src/lib/small \\\n    && make -C /usr/src/tarantool/src/lib/small install \\\n    && make -C /usr/src/tarantool/src/lib/small clean \\\n    && : \"---------- msgpuck ----------\" \\\n    && (cd /usr/src/tarantool/src/lib/msgpuck; \\\n        cmake -DCMAKE_INSTALL_PREFIX=/usr \\\n              -DCMAKE_INSTALL_LIBDIR=lib \\\n              -DCMAKE_BUILD_TYPE=RelWithDebInfo \\\n              .) \\\n    && make -C /usr/src/tarantool/src/lib/msgpuck \\\n    && make -C /usr/src/tarantool/src/lib/msgpuck install \\\n    && make -C /usr/src/tarantool/src/lib/msgpuck clean \\\n    && : \"---------- luarocks ----------\" \\\n    && wget -O luarocks.tar.gz \"$LUAROCKS_URL\" \\\n    && mkdir -p /usr/src/luarocks \\\n    && tar -xzf luarocks.tar.gz -C /usr/src/luarocks --strip-components=1 \\\n    && ( cd /usr/src/luarocks; \\\n        ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\"; \\\n        make build; \\\n        make install) \\\n    && rm -r /usr/src/luarocks \\\n    && rm -rf /usr/src/tarantool \\\n    && rm -rf /usr/src/gperftools \\\n    && rm -rf /usr/src/go \\\n    && : \"---------- remove build deps ----------\" \\\n    && apk del .build-deps\n\nCOPY luarocks-config.lua /usr/local/etc/luarocks/config-5.1.lua\n\nRUN set -x \\\n    && apk add --no-cache --virtual .run-deps \\\n        mariadb-client-libs \\\n        libpq \\\n        cyrus-sasl \\\n        mosquitto-libs \\\n        libev \\\n    && apk add --no-cache --virtual .build-deps \\\n        git \\\n        cmake \\\n        make \\\n        coreutils \\\n        gcc \\\n        g++ \\\n        postgresql-dev \\\n        lua-dev \\\n        musl-dev \\\n        cyrus-sasl-dev \\\n        mosquitto-dev \\\n        libev-dev \\\n    && mkdir -p /rocks \\\n    && : \"---------- proj (for gis module) ----------\" \\\n    && wget -O proj.tar.gz https://download.osgeo.org/proj/proj-4.9.3.tar.gz \\\n    && mkdir -p /usr/src/proj \\\n    && tar -xzf proj.tar.gz -C /usr/src/proj --strip-components=1 \\\n    && ( cd /usr/src/proj; \\\n        ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\"; \\\n        make; \\\n        make install) \\\n    && rm -r /usr/src/proj \\\n    && rm -rf /usr/src/proj \\\n    && : \"---------- geos (for gis module) ----------\" \\\n    && wget -O geos.tar.bz2 https://download.osgeo.org/geos/geos-3.6.0.tar.bz2 \\\n    && mkdir -p /usr/src/geos \\\n    && tar -xjf geos.tar.bz2 -C /usr/src/geos --strip-components=1 \\\n    && ( cd /usr/src/geos; \\\n        ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\"; \\\n        make; \\\n        make install) \\\n    && rm -r /usr/src/geos \\\n    && rm -rf /usr/src/geos \\\n    && : \"---------- luarocks ----------\" \\\n    && luarocks install lua-term \\\n    && luarocks install ldoc \\\n    && : \"avro\" \\\n    && luarocks install avro-schema $LUAROCK_AVRO_SCHEMA_VERSION \\\n    && : \"expirationd\" \\\n    && luarocks install expirationd $LUAROCK_EXPERATIOND_VERSION \\\n    && : \"queue\" \\\n    && luarocks install queue $LUAROCK_QUEUE_VERSION \\\n    && : \"connpool\" \\\n    && luarocks install connpool $LUAROCK_CONNPOOL_VERSION \\\n    && : \"shard\" \\\n    && git clone $LUAROCK_SHARD_REPO /rocks/shard \\\n    && git -C /rocks/shard checkout $LUAROCK_SHARD_TAG \\\n    && (cd /rocks/shard && luarocks make *rockspec) \\\n    && : \"http\" \\\n    && luarocks install http $LUAROCK_HTTP_VERSION \\\n    && : \"pg\" \\\n    && luarocks install pg $LUAROCK_TARANTOOL_PG_VERSION \\\n    && : \"mysql\" \\\n    && luarocks install mysql $LUAROCK_TARANTOOL_MYSQL_VERSION \\\n    && : \"memcached\" \\\n    && luarocks install memcached $LUAROCK_MEMCACHED_VERSION \\\n    && : \"prometheus\" \\\n    && luarocks install prometheus $LUAROCK_TARANTOOL_PROMETHEUS_VERSION \\\n    && : \"curl\" \\\n    && luarocks install tarantool-curl $LUAROCK_TARANTOOL_CURL_VERSION \\\n    && : \"mqtt\" \\\n    && luarocks install mqtt $LUAROCK_TARANTOOL_MQTT_VERSION \\\n    && : \"gis\" \\\n    && luarocks install gis $LUAROCK_TARANTOOL_GIS_VERSION \\\n    && : \"gperftools\" \\\n    && luarocks install gperftools $LUAROCK_TARANTOOL_GPERFTOOLS_VERSION \\\n    && : \"---------- remove build deps ----------\" \\\n    && apk del .build-deps \\\n    && rm -rf /rocks && rm proj.tar.gz\n\nRUN mkdir -p /var/lib/tarantool \\\n    && chown tarantool:tarantool /var/lib/tarantool \\\n    && mkdir -p /opt/tarantool \\\n    && chown tarantool:tarantool /opt/tarantool \\\n    && mkdir -p /var/run/tarantool \\\n    && chown tarantool:tarantool /var/run/tarantool \\\n    && mkdir /etc/tarantool \\\n    && chown tarantool:tarantool /etc/tarantool\n\nVOLUME /var/lib/tarantool\nWORKDIR /opt/tarantool\n\nCOPY tarantool-entrypoint.lua /usr/local/bin/\nCOPY tarantool_set_config.lua /usr/local/bin/\nCOPY docker-entrypoint.sh /usr/local/bin/\nCOPY console /usr/local/bin/\nCOPY tarantool_is_up /usr/local/bin/\nCOPY tarantool.default /usr/local/etc/default/tarantool\n\nRUN ln -s usr/local/bin/docker-entrypoint.sh /entrypoint.sh # backwards compat\nENTRYPOINT [\"docker-entrypoint.sh\"]\n\nHEALTHCHECK CMD tarantool_is_up\n\nEXPOSE 3301\nCMD [ \"tarantool\" ]\n"
}