{
  "startTime": 1674240542672,
  "endTime": 1674240543147,
  "originalSmells": [
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 64,
        "lineEnd": 64,
        "columnStart": 4,
        "columnEnd": 29
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 65,
        "lineEnd": 65,
        "columnStart": 4,
        "columnEnd": 30
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 68,
        "lineEnd": 68,
        "columnStart": 4,
        "columnEnd": 78
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 70,
        "lineEnd": 70,
        "columnStart": 4,
        "columnEnd": 22
      }
    },
    {
      "rule": "sha256sumEchoOneSpaces",
      "position": {
        "lineStart": 32,
        "lineEnd": 32,
        "columnStart": 4,
        "columnEnd": 127
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 4,
        "lineEnd": 4,
        "columnStart": 22,
        "columnEnd": 55
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 30,
        "lineEnd": 30,
        "columnStart": 4,
        "columnEnd": 73
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 4,
        "lineEnd": 4,
        "columnStart": 22,
        "columnEnd": 55
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 30,
        "lineEnd": 30,
        "columnStart": 4,
        "columnEnd": 73
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# add 7z tar and zip archivers\nFROM nvidia/cuda:9.0-cudnn7-devel\n\n# https://docs.docker.com/engine/examples/running_ssh_service/\nRUN apt-get update && apt-get install --no-install-recommends -y openssh-server && rm -rf /var/lib/apt/lists/*;\nRUN mkdir /var/run/sshd\nRUN echo 'root:Ubuntu@41' | chpasswd\nRUN sed -i 's/PermitRootLogin prohibit-password/PermitRootLogin yes/' /etc/ssh/sshd_config\nRUN sed -i 's/#PasswordAuthentication yes/PasswordAuthentication no/' /etc/ssh/sshd_config\nRUN mkdir ~/.ssh/\nRUN touch ~/.ssh/authorized_keys\nRUN echo 'ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDPlILkHRoLnwMS3JlNO94FAYChrW+jGXMxFK5eRmCcBtTJRrV7zyv5mqIBhyJQFiQOqeycttVQP/HTJ9XCwVY0/WK5b45Z6PmfY9PJ5uiLahTCLi8ayoqhDsIWTlWYL03dG7Oz0WEwWQ6BDmSbfS12GEzWQTLqNh7nwsmTXE5503bRtmTre69625gT8c+mgvBOoQfMN1XePxJ14j8h1dVB1Y0geRLJb7yYd4Dl6tnEb3PyGizNVaiVYeBBTx6N/8lvSVA+FYR9mOg3yzYrJ0Aqyj33Oi+jvPqZP16EUhjCukKQWH3IzS1pRvYPCXzPYwvMGvBa00f9GPDccE0eiawH atmyre@Everett' >> ~/.ssh/authorized_keys\n\n\n# SSH login fix. Otherwise user is kicked off after login\nRUN sed 's@session\\s*required\\s*pam_loginuid.so@session optional pam_loginuid.so@g' -i /etc/pam.d/sshd\n\nENV NOTVISIBLE \"in users profile\"\nRUN echo \"export VISIBLE=now\" >> /etc/profile\n\nENV CONDA_DIR /opt/conda\nENV PATH $CONDA_DIR/bin:$PATH\n\n# writing env variables to /etc/profile as mentioned here https://docs.docker.com/engine/examples/running_ssh_service/#run-a-test_sshd-container\nRUN echo \"export CONDA_DIR=/opt/conda\" >> /etc/profile\nRUN echo \"export PATH=$CONDA_DIR/bin:$PATH\" >> /etc/profile\n\nRUN mkdir -p $CONDA_DIR && \\\n    echo export PATH=$CONDA_DIR/bin:'$PATH' > /etc/profile.d/conda.sh && \\\n    apt-get update && \\\n    apt-get install --no-install-recommends -y wget git libhdf5-dev g++ graphviz openmpi-bin nano && \\\n    wget --quiet https://repo.continuum.io/miniconda/Miniconda3-4.2.12-Linux-x86_64.sh && \\\n    echo \"c59b3dd3cad550ac7596e0d599b91e75d88826db132e4146030ef471bb434e9a  *Miniconda3-4.2.12-Linux-x86_64.sh\" | sha256sum -c - && \\\n    /bin/bash /Miniconda3-4.2.12-Linux-x86_64.sh -f -b -p $CONDA_DIR && \\\n    ln /usr/lib/x86_64-linux-gnu/libcudnn.so /usr/local/cuda/lib64/libcudnn.so && \\\n    ln /usr/lib/x86_64-linux-gnu/libcudnn.so.7 /usr/local/cuda/lib64/libcudnn.so.7 && \\\n    ln /usr/include/cudnn.h /usr/local/cuda/include/cudnn.h && \\\n    rm Miniconda3-4.2.12-Linux-x86_64.sh && rm -rf /var/lib/apt/lists/*;\n\nENV NB_USER keras\nENV NB_UID 1000\n\nRUN echo \"export NB_USER=keras\" >> /etc/profile\nRUN echo \"export NB_UID=1000\" >> /etc/profile\n\nRUN echo \"export LD_LIBRARY_PATH=/usr/local/cuda/lib64:/lib/x86_64-linux-gnu:$LD_LIBRARY_PATH\" >> /etc/profile\nRUN echo \"export CPATH=/usr/include:/usr/include/x86_64-linux-gnu:/usr/local/cuda/include:$CPATH\" >> /etc/profile\nRUN echo \"export LIBRARY_PATH=/usr/local/cuda/lib64:/lib/x86_64-linux-gnu:$LIBRARY_PATH\" >> /etc/profile\nRUN echo \"export CUDA_HOME=/usr/local/cuda\" >> /etc/profile\nRUN echo \"export CPLUS_INCLUDE_PATH=$CPATH\" >> /etc/profile\nRUN echo \"export KERAS_BACKEND=tensorflow\" >> /etc/profile\n\nRUN useradd -m -s /bin/bash -N -u $NB_UID $NB_USER && \\\n    mkdir -p $CONDA_DIR && \\ \n    chown keras $CONDA_DIR -R \n\nUSER keras\n\nRUN  mkdir -p /home/keras/notebook\n\n# Python\nARG python_version=3.5\n\nRUN conda install -y python=${python_version} && \\\n    pip install --no-cache-dir --upgrade pip && \\\n    pip install --no-cache-dir tensorflow-gpu && \\\n    conda install Pillow scikit-learn notebook pandas matplotlib mkl nose pyyaml six h5py && \\\n    conda install theano pygpu bcolz && \\\n    pip install --no-cache-dir keras kaggle-cli lxml opencv-python requests scipy tqdm visdom && \\\n    conda install pytorch=0.3.0 cuda90 -c pytorch && \\\n    pip install --no-cache-dir imgaug && \\\n    conda clean -yt\n\nENV LD_LIBRARY_PATH /usr/local/cuda/lib64:/lib/x86_64-linux-gnu:$LD_LIBRARY_PATH\nENV CPATH /usr/include:/usr/include/x86_64-linux-gnu:/usr/local/cuda/include:$CPATH\nENV LIBRARY_PATH /usr/local/cuda/lib64:/lib/x86_64-linux-gnu:$LIBRARY_PATH\nENV CUDA_HOME /usr/local/cuda\nENV CPLUS_INCLUDE_PATH $CPATH\nENV KERAS_BACKEND tensorflow\n\nWORKDIR /home/keras/notebook\n\nEXPOSE 8888 6006 22 8097\n\nCMD jupyter notebook --port=8888 --ip=0.0.0.0 --no-browser"
}