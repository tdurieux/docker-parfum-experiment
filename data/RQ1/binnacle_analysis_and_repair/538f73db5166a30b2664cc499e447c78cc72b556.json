{
  "startTime": 1674240388521,
  "endTime": 1674240388667,
  "originalSmells": [
    {
      "rule": "yarnCacheCleanAfterInstall",
      "position": {
        "lineStart": 54,
        "lineEnd": 54,
        "columnStart": 4,
        "columnEnd": 16
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 91,
        "lineEnd": 91,
        "columnStart": 4,
        "columnEnd": 58
      }
    },
    {
      "rule": "apkAddUseNoCache",
      "position": {
        "lineStart": 123,
        "lineEnd": 123,
        "columnStart": 2,
        "columnEnd": 23
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# Development Application\n\nFROM wunsh/alpine-elixir-elm as app\n\nMAINTAINER Docdog Developers <dev@docdog.io>\n\n\nARG BUILD_ENV=prod\n\nARG PORT=4000\n\nENV \\\n  APP_NAME=docdog \\\n  \\\n  MIX_ENV=$BUILD_ENV \\\n  PORT=$PORT \\\n  \\\n  MIX_HOME=/opt/mix \\\n  HEX_HOME=/opt/hex \\\n  HOME=/opt/app\n\nEXPOSE ${PORT}\n\n\nRUN \\\n  echo \"Build Docker image for Mix env: ${MIX_ENV}.\" && \\\n  \\\n  mkdir -p ${HOME} && \\\n  chmod -R 777 ${HOME} && \\\n  apk update && \\\n  apk --no-cache --update add \\\n    g++ inotify-tools make python yarn && \\\n  update-ca-certificates --fresh && \\\n  rm -rf /var/cache/apk/* && \\\n  \\\n  mix local.hex --force && \\\n  mix local.rebar --force\n\n\n# Cache Mix dependencies\n\nWORKDIR ${HOME}\n\nADD mix.exs mix.lock ./\n\nRUN mix do deps.get --only=${MIX_ENV}, deps.compile\n\n\n# Cache Yarn dependencies\n\nWORKDIR assets\n\nADD assets/package.json assets/yarn.lock ./\n\nRUN yarn install && yarn cache clean;\n\n\n# Cache Elm dependencies\n\nWORKDIR elm\n\nADD assets/elm/elm-package.json ./\n\nRUN elm package install -y\n\n\nWORKDIR ${HOME}\n\nADD . .\n\n\nWORKDIR assets/elm\n\nRUN elm-make Main.elm --output=../js/main.js\n\n\nWORKDIR assets\n\nRUN if [ ${MIX_ENV} = \"prod\" ]; then yarn run deploy; else yarn run build; fi\n\n\nWORKDIR ${HOME}\n\nRUN mix do compile, phx.digest\n\nRUN \\\n  if [ ${MIX_ENV} = \"prod\" ]; then \\\n    mix release --env=${MIX_ENV}; \\\n\n    RELEASE_DIR=`ls -d _build/${MIX_ENV}/rel/${APP_NAME}/releases/*/` && \\\n    mkdir /release && \\\n    tar -xf \"${RELEASE_DIR}${APP_NAME}.tar.gz\" -C /release; rm \"${RELEASE_DIR}${APP_NAME}.tar.gz\" \\\n  fi\n\n\nCMD [\"mix\", \"phx.server\"]\n\n\n# Release Application\n\nFROM bitwalker/alpine-erlang:21.0.3\n\nMAINTAINER Docdog Developers <dev@docdog.io>\n\n\nARG BUILD_ENV=prod\n\nARG PORT=4000\n\nENV \\\n  APP_NAME=docdog \\\n  HOME=/opt/app \\\n  MIX_ENV=$BUILD_ENV \\\n  PORT=$PORT \\\n  REPLACE_OS_VARS=true\n\nEXPOSE ${PORT}\n\n\nCOPY --from=app /release/ .\n\nRUN \\\n  apk update && \\\n  apk add --no-cache inotify-tools\n\n\nENTRYPOINT [\"/opt/app/bin/docdog\"]\n\nCMD [\"foreground\"]\n"
}