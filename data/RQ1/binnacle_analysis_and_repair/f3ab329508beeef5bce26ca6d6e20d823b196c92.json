{
  "startTime": 1674253210470,
  "endTime": 1674253210915,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 111,
        "lineEnd": 111,
        "columnStart": 4,
        "columnEnd": 64
      }
    },
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 115,
        "lineEnd": 115,
        "columnStart": 4,
        "columnEnd": 28
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 103,
        "lineEnd": 107,
        "columnStart": 4,
        "columnEnd": 14
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 121,
        "lineEnd": 121,
        "columnStart": 4,
        "columnEnd": 15
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 135,
        "lineEnd": 135,
        "columnStart": 7,
        "columnEnd": 37
      }
    },
    {
      "rule": "gpgUseBatchFlag",
      "position": {
        "lineStart": 39,
        "lineEnd": 39,
        "columnStart": 7,
        "columnEnd": 104
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 21,
        "lineEnd": 29,
        "columnStart": 25,
        "columnEnd": 15
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 114,
        "lineEnd": 114,
        "columnStart": 25,
        "columnEnd": 50
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 89,
        "lineEnd": 101,
        "columnStart": 25,
        "columnEnd": 18
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 114,
        "lineEnd": 114,
        "columnStart": 25,
        "columnEnd": 50
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n# use this file except in compliance with the License. You may obtain a copy of\n# the License at\n#\n#   http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n# License for the specific language governing permissions and limitations under\n# the License.\n\n# Base layer containing dependencies needed at runtime. This layer will be\n# cached after the initial build.\nFROM debian:stretch as runtime\n\nMAINTAINER CouchDB Developers dev@couchdb.apache.org\n\n# Add CouchDB user account\nRUN groupadd -g 5984 -r couchdb && useradd -u 5984 -d /opt/couchdb -g couchdb couchdb\n\nRUN apt-get update -y && apt-get install --no-install-recommends -y \\\n        apt-transport-https \\\n        ca-certificates \\\n        curl \\\n        dirmngr \\\n        gnupg \\\n        libicu57 \\\n        libssl1.1 \\\n        openssl \\\n    && echo \"deb https://apache.bintray.com/couchdb-deb stretch main\" \\\n        | tee /etc/apt/sources.list.d/couchdb.list \\\n    && cat /etc/apt/sources.list.d/couchdb.list \\\n    && for server in $(shuf -e pgpkeys.mit.edu \\\n            ha.pool.sks-keyservers.net \\\n            hkp://p80.pool.sks-keyservers.net:80 \\\n            pgp.mit.edu) ; do \\\n        gpg --batch --keyserver $server --recv-keys 8756C4F765C9AC3CB6B85D62379CE192D401AB61 && break || : ; \\\n        done \\\n    && gpg --batch -a --export 8756C4F765C9AC3CB6B85D62379CE192D401AB61 > /etc/apt/trusted.gpg.d/couchdb.gpg.asc \\\n    && apt-get update -y && apt-get install -y --no-install-recommends couch-libmozjs185-1.0 \\\n    && rm -rf /var/lib/apt/lists/*\n\n# grab gosu for easy step-down from root and tini for signal handling\n# see https://github.com/apache/couchdb-docker/pull/28#discussion_r141112407\nENV GOSU_VERSION 1.10\nENV TINI_VERSION 0.16.1\nRUN set -ex; \\\n    apt-get update; \\\n    apt-get install -y --no-install-recommends wget; \\\n    rm -rf /var/lib/apt/lists/*; \\\n    dpkgArch=\"$(dpkg --print-architecture | awk -F- '{ print $NF }')\"; \\\n# install gosu\n    wget -O /usr/local/bin/gosu \"https://github.com/tianon/gosu/releases/download/${GOSU_VERSION}/gosu-$dpkgArch\"; \\\n    wget -O /usr/local/bin/gosu.asc \"https://github.com/tianon/gosu/releases/download/$GOSU_VERSION/gosu-$dpkgArch.asc\"; \\\n    export GNUPGHOME=\"$(mktemp -d)\"; \\\n        echo \"disable-ipv6\" >> ${GNUPGHOME}/dirmngr.conf; \\\n        for server in $(shuf -e pgpkeys.mit.edu \\\n            ha.pool.sks-keyservers.net \\\n            hkp://p80.pool.sks-keyservers.net:80 \\\n            pgp.mit.edu) ; do \\\n        gpg --batch --keyserver $server --recv-keys B42F6819007F00F88E364FD4036A9C25BF357DD4 && break || : ; \\\n        done; \\\n\tgpg --batch --verify /usr/local/bin/gosu.asc /usr/local/bin/gosu; \\\n\trm -rf \"$GNUPGHOME\" /usr/local/bin/gosu.asc; \\\n\tchmod +x /usr/local/bin/gosu; \\\n\tgosu nobody true; \\\n    \\\n# install tini\n\twget -O /usr/local/bin/tini \"https://github.com/krallin/tini/releases/download/v${TINI_VERSION}/tini-$dpkgArch\"; \\\n\twget -O /usr/local/bin/tini.asc \"https://github.com/krallin/tini/releases/download/v${TINI_VERSION}/tini-$dpkgArch.asc\"; \\\n\texport GNUPGHOME=\"$(mktemp -d)\"; \\\n        echo \"disable-ipv6\" >> ${GNUPGHOME}/dirmngr.conf; \\\n        for server in $(shuf -e pgpkeys.mit.edu \\\n            ha.pool.sks-keyservers.net \\\n            hkp://p80.pool.sks-keyservers.net:80 \\\n            pgp.mit.edu) ; do \\\n        gpg --batch --keyserver $server --recv-keys 595E85A6B1B4779EA4DAAEC70B588DFF0527A9B7 && break || : ; \\\n        done; \\\n\tgpg --batch --verify /usr/local/bin/tini.asc /usr/local/bin/tini; \\\n\trm -rf \"$GNUPGHOME\" /usr/local/bin/tini.asc; \\\n\tchmod +x /usr/local/bin/tini; \\\n\ttini --version; \\\n\t\\\n\tapt-get purge -y --auto-remove wget\n\n# Dependencies only needed during build time. This layer will also be cached\nFROM runtime AS build_dependencies\n\nRUN apt-get update -y && apt-get install -y --no-install-recommends \\\n    build-essential \\\n    couch-libmozjs185-dev \\\n    erlang-nox \\\n    erlang-reltool \\\n    erlang-dev \\\n    git \\\n    libcurl4-openssl-dev \\\n    libicu-dev \\\n    python3 \\\n    libpython3-dev \\\n    python3-pip \\\n    python3-sphinx && rm -rf /var/lib/apt/lists/*;\n\nRUN pip3 install --no-cache-dir --upgrade \\\n    sphinx_rtd_theme \\\n    nose \\\n    requests \\\n    hypothesis\n\n# Node is special\nRUN set -ex; \\\n    curl -f -s https://deb.nodesource.com/gpgkey/nodesource.gpg.key | apt-key add -; \\\n    echo 'deb https://deb.nodesource.com/node_8.x stretch main' > /etc/apt/sources.list.d/nodesource.list; \\\n    echo 'deb-src https://deb.nodesource.com/node_8.x stretch main' >> /etc/apt/sources.list.d/nodesource.list; \\\n    apt-get update -y && apt-get install --no-install-recommends -y nodejs; rm -rf /var/lib/apt/lists/*; \\\n    npm install -g grunt-cli && npm cache clean --force;\n\n# Clone CouchDB source code including all dependencies\nARG clone_url=https://github.com/apache/couchdb.git\nRUN git clone $clone_url /usr/src/couchdb\nWORKDIR /usr/src/couchdb\nRUN ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\"\n\n# This layer performs the actual build of a relocatable, self-contained\n# release of CouchDB. It pulls down the latest changes from the remote\n# origin (because the layer above will be cached) and switches to the\n# branch specified in the build_arg (defaults to master)\nFROM build_dependencies AS build\n\nARG checkout_branch=master\nARG configure_options\n\nWORKDIR /usr/src/couchdb/\nRUN git fetch origin \\\n    && git checkout $checkout_branch \\\n    && ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" $configure_options \\\n    && make release\n\n# This results in a single layer image (or at least skips the build stuff?)\nFROM runtime\nCOPY --from=build /usr/src/couchdb/rel/couchdb /opt/couchdb\n\n# Add configuration\nCOPY local.ini /opt/couchdb/etc/default.d/\nCOPY vm.args /opt/couchdb/etc/\nCOPY docker-entrypoint.sh /\n\n# Setup directories and permissions\nRUN find /opt/couchdb \\! \\( -user couchdb -group couchdb \\) -exec chown -f couchdb:couchdb '{}' +\n\nWORKDIR /opt/couchdb\nEXPOSE 5984 4369 9100\nVOLUME [\"/opt/couchdb/data\"]\n\nENTRYPOINT [\"tini\", \"--\", \"/docker-entrypoint.sh\"]\nCMD [\"/opt/couchdb/bin/couchdb\"]\n"
}