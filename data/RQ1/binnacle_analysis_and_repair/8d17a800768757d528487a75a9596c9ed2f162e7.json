{
  "startTime": 1674251531627,
  "endTime": 1674251531765,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 17,
        "lineEnd": 17,
        "columnStart": 4,
        "columnEnd": 49
      }
    },
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 30,
        "lineEnd": 30,
        "columnStart": 43,
        "columnEnd": 54
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 16,
        "lineEnd": 16,
        "columnStart": 4,
        "columnEnd": 121
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 17,
        "lineEnd": 17,
        "columnStart": 73,
        "columnEnd": 125
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 16,
        "lineEnd": 16,
        "columnStart": 4,
        "columnEnd": 121
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 17,
        "lineEnd": 17,
        "columnStart": 73,
        "columnEnd": 125
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "#\n# Dockerfile with Ubuntu as the container OS\n#\n# This is intended for non-prodution experimentation, where Ubuntu is helpful\n# because nearly all packages/libraries work \"out of the box\". Not recommended\n# for production due to large package size and downloads - instead consider\n# Dockerfile-kyrix-alpine\n#\n\n# 18.04 works too, but is even larger\nFROM ubuntu:18.04\n#FROM ubuntu:16.04\n\n# update Ubuntu and adding basic packages\nENV DEBIAN_FRONTEND noninteractive\nRUN apt-get -qq -y update > apt-update.out && apt-get -qq -y upgrade > apt-upgrade.out && \\\n    apt-get -qq --no-install-recommends -y install npm postgresql-client postgresql-server-dev-10 maven openjdk-8-jdk git curl wget > apt-get.out && \\\n    curl -f -sL https://deb.nodesource.com/setup_8.x | bash > nodejs.out && apt-get -qq --no-install-recommends -y install nodejs > apt-install-node.out && rm -rf /var/lib/apt/lists/*;\n\n# copy kyrix source, then work in /root\nRUN mkdir -p /kyrix/compiler /kyrix/back-end\nADD ./front-end /kyrix/front-end/\nADD ./compiler /kyrix/compiler/\nADD ./back-end /kyrix/back-end/\n\n# if instead you want to get from git...\n#RUN git clone https://github.com/tracyhenry/kyrix > git-clone.out\n\n# setup Kyrix compiler - rebuild node_modules because of native modules\nWORKDIR /kyrix/compiler\nRUN rm -fr /kyrix/compiler/node_modules && npm install && npm cache clean --force;\nRUN sed -i 's/\\(.\\+\\equest\\)/\\/\\/\\1/' node_modules/d3/build/d3.node.js\n\n# TODO(asah): is this needed?\n#cd /kyrix/compiler\n#npm rebuild | egrep -v '(@[0-9.]+ /kyrix/compiler/node_modules/)'\n\nCOPY docker-scripts/wait-for-postgres docker-scripts/start-kyrix.sh /\nRUN chmod 755 /wait-for-postgres /start-kyrix.sh\n\nEXPOSE 8000\n\n# setup backend server\nWORKDIR /kyrix/back-end\nRUN mvn -B -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=warn compile | tee mvn-compile.out\n\nENTRYPOINT sh -c 'sleep 5; /wait-for-postgres ${PGHOST}:5432 -t 60 -- /start-kyrix.sh'\n"
}