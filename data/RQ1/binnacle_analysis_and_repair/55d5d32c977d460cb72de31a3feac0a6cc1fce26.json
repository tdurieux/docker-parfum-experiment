{
  "startTime": 1674234939410,
  "endTime": 1674234939488,
  "originalSmells": [
    {
      "rule": "yarnCacheCleanAfterInstall",
      "position": {
        "lineStart": 67,
        "lineEnd": 71,
        "columnStart": 4,
        "columnEnd": 19
      }
    },
    {
      "rule": "yarnCacheCleanAfterInstall",
      "position": {
        "lineStart": 73,
        "lineEnd": 76,
        "columnStart": 4,
        "columnEnd": 17
      }
    },
    {
      "rule": "yarnCacheCleanAfterInstall",
      "position": {
        "lineStart": 78,
        "lineEnd": 80,
        "columnStart": 4,
        "columnEnd": 23
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM node:8-alpine\n\nARG NAME=reaction-docs\nARG DESCRIPTION=\"Reaction Docs: Docusarus static documentation site generator\"\nARG URL=https://github.com/reactioncommerce/reaction-docs\nARG DOC_URL=https://github.com/reactioncommerce/reaction-docs\nARG VCS_URL=https://github.com/reactioncommerce/reaction-docs\nARG VCS_REF\nARG VENDOR\nARG BUILD_DATE\nARG BUILD_COMPARE_URL\nARG BUILD_ENV=test\nARG BUILD_NUMBER\nARG BUILD_PLATFORM\nARG BUILD_PLATFORM_PROJECT_USERNAME\nARG BUILD_PLATFORM_PROJECT_REPONAME\nARG BUILD_PULL_REQUESTS\nARG BUILD_TRIGGERED_BY_TAG\nARG BUILD_URL\nARG CIRCLE_WORKSPACE_ID\nARG CIRCLE_WORKFLOW_ID\nARG CIRCLE_WORKFLOW_JOB_ID\nARG CIRCLE_WORKFLOW_UPSTREAM_JOB_IDS\nARG CIRCLE_WORKSPACE_ID\nARG GIT_REPOSITORY_URL\nARG GIT_SHA1\nARG LICENSE\n\nENV APP_SOURCE_DIR=/usr/local/src/reaction-app \\\n    PATH=$PATH:/usr/local/src/node_modules/.bin\n\nLABEL maintainer=\"Reaction Commerce <engineering@reactioncommerce.com>\" \\\n      com.reactioncommerce.build-date=$BUILD_DATE \\\n      com.reactioncommerce.name=$NAME \\\n      com.reactioncommerce.description=$DESCRIPTION \\\n      com.reactioncommerce.url=$URL \\\n      com.reactioncommerce.vcs-url=$VCS_URL \\\n      com.reactioncommerce.vcs-ref=$VCS_REF \\\n      com.reactioncommerce.vendor=$VENDOR \\\n      com.reactioncommerce.docker.build.compare-url=$BUILD_COMPARE_URL \\\n      com.reactioncommerce.docker.build.number=$BUILD_NUMBER \\\n      com.reactioncommerce.docker.build.platform=$BUILD_PLATFORM \\\n      com.reactioncommerce.docker.build.platform.project.username=$BUILD_PLATFORM_PROJECT_USERNAME \\\n      com.reactioncommerce.docker.build.platform.project.reponame=$BUILD_PLATFORM_PROJECT_REPONAME \\\n      com.reactioncommerce.docker.build.pull-requests=$BUILD_PULL_REQUESTS \\\n      com.reactioncommerce.docker.build.triggered-by-tag=$BUILD_TRIGGERED_BY_TAG \\\n      com.reactioncommerce.docker.build.url=$BUILD_URL \\\n      com.reactioncommerce.docker.build.circle.workflow.id=$CIRCLE_WORKFLOW_ID \\\n      com.reactioncommerce.docker.build.circle.workflow.job.id=$CIRCLE_WORKFLOW_JOB_ID \\\n      com.reactioncommerce.docker.build.circle.workflow.upstream.job.ids=$CIRCLE_WORKFLOW_UPSTREAM_JOB_IDS \\\n      com.reactioncommerce.docker.build.circle.workflow.url=https://circleci.com/workflow-run/$CIRCLE_WORKFLOW_ID \\\n      com.reactioncommerce.docker.build.circle.workspace.id=$CIRCLE_WORKSPACE_ID \\\n      com.reactioncommerce.docker.git.repository.url=$GIT_REPOSITORY_URL \\\n      com.reactioncommerce.docker.git.sha1=$GIT_SHA1 \\\n      com.reactioncommerce.docker.license=$LICENSE\n\nWORKDIR $APP_SOURCE_DIR/..\nCOPY package.json yarn.lock $APP_SOURCE_DIR/../\n\n# Build the dependencies into the Docker image in a cacheable way. Dependencies\n# are only rebuilt when package.json or yarn.lock is modified.\n#\n# The project directory will be mounted during development. Therefore, we'll\n# install dependencies into an external directory (one level up.) This works\n# because Node traverses up the fs to find node_modules.\nRUN set -ex; \\\n  if [ \"$BUILD_ENV\" = \"production\" ]; then \\\n    yarn install \\\n      --frozen-lockfile \\\n      --ignore-scripts \\\n      --no-cache \\\n      --production; yarn cache clean; \\\n  elif [ \"$BUILD_ENV\" = \"test\" ]; then \\\n    yarn install \\\n      --frozen-lockfile \\\n      --ignore-scripts \\\n      --no-cache; yarn cache clean; \\\n  elif [ \"$BUILD_ENV\" = \"development\" ]; then \\\n    yarn install \\\n      --cache-folder /home/node/.cache/yarn \\\n      --ignore-scripts; yarn cache clean; \\\n  fi; \\\n  rm package.json yarn.lock\n\nWORKDIR $APP_SOURCE_DIR\nCOPY . $APP_SOURCE_DIR\n\nRUN yarn run build\n\nCMD [\"yarn start\"]\n"
}