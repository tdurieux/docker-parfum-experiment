{
  "startTime": 1674242099756,
  "endTime": 1674242099982,
  "originalSmells": [
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 19,
        "lineEnd": 26,
        "columnStart": 4,
        "columnEnd": 7
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 35,
        "lineEnd": 45,
        "columnStart": 4,
        "columnEnd": 22
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 19,
        "lineEnd": 26,
        "columnStart": 4,
        "columnEnd": 7
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 35,
        "lineEnd": 45,
        "columnStart": 4,
        "columnEnd": 22
      }
    }
  ],
  "repairedSmells": [
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 19,
        "lineEnd": 26,
        "columnStart": 4,
        "columnEnd": 7
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 35,
        "lineEnd": 45,
        "columnStart": 4,
        "columnEnd": 22
      }
    }
  ],
  "repairedDockerfile": "# Flutter (https://flutter.dev) Developement Environment for Linux\n# ===============================================================\n#\n# This environment passes all Linux Flutter Doctor checks and is sufficient\n# for building Android applications and running Flutter tests.\n#\n# To build iOS applications, a Mac development environment is necessary.\n#\n# This includes applications and sdks that are needed only by the CI system\n# for performing pushes to production, and so this image is quite a bit larger\n# than strictly needed for just building Flutter apps.\n\nFROM debian:stretch\nMAINTAINER Flutter Developers <flutter-dev@googlegroups.com>\n\nRUN apt-get update -y\nRUN apt-get upgrade -y\n\n# Install basics\nRUN apt-get install -y --no-install-recommends \\\n  git \\\n  wget \\\n  curl \\\n  zip \\\n  unzip \\\n  ca-certificates \\\n  gnupg && rm -rf /var/lib/apt/lists/*;\n\n# Add nodejs repository to apt sources and install it.\nENV NODEJS_INSTALL=\"/opt/nodejs_install\"\nRUN mkdir -p \"${NODEJS_INSTALL}\"\nRUN wget -q https://deb.nodesource.com/setup_10.x -O \"${NODEJS_INSTALL}/nodejs_install.sh\"\nRUN bash \"${NODEJS_INSTALL}/nodejs_install.sh\"\n\n# Install the rest of the dependencies.\nRUN apt-get install -y --no-install-recommends \\\n  locales \\\n  golang \\\n  ruby \\\n  ruby-dev \\\n  nodejs \\\n  lib32stdc++6 \\\n  libstdc++6 \\\n  libglu1-mesa \\\n  build-essential \\\n  default-jdk-headless && rm -rf /var/lib/apt/lists/*;\n\n# Install the Android SDK Dependency.\nENV ANDROID_SDK_URL=\"https://dl.google.com/android/repository/sdk-tools-linux-4333796.zip\"\nENV ANDROID_TOOLS_ROOT=\"/opt/android_sdk\"\nRUN mkdir -p \"${ANDROID_TOOLS_ROOT}\"\nRUN mkdir -p ~/.android\n# Silence warning.\nRUN touch ~/.android/repositories.cfg\nENV ANDROID_SDK_ARCHIVE=\"${ANDROID_TOOLS_ROOT}/archive\"\nRUN wget --progress=dot:giga \"${ANDROID_SDK_URL}\" -O \"${ANDROID_SDK_ARCHIVE}\"\nRUN unzip -q -d \"${ANDROID_TOOLS_ROOT}\" \"${ANDROID_SDK_ARCHIVE}\"\n# Suppressing output of sdkmanager to keep log size down\n# (it prints install progress WAY too often).\nRUN yes \"y\" | \"${ANDROID_TOOLS_ROOT}/tools/bin/sdkmanager\" \"tools\" > /dev/null\nRUN yes \"y\" | \"${ANDROID_TOOLS_ROOT}/tools/bin/sdkmanager\" \"build-tools;28.0.3\" > /dev/null\nRUN yes \"y\" | \"${ANDROID_TOOLS_ROOT}/tools/bin/sdkmanager\" \"platforms;android-28\" > /dev/null\nRUN yes \"y\" | \"${ANDROID_TOOLS_ROOT}/tools/bin/sdkmanager\" \"platform-tools\" > /dev/null\nRUN yes \"y\" | \"${ANDROID_TOOLS_ROOT}/tools/bin/sdkmanager\" \"extras;android;m2repository\" > /dev/null\nRUN yes \"y\" | \"${ANDROID_TOOLS_ROOT}/tools/bin/sdkmanager\" \"extras;google;m2repository\" > /dev/null\nRUN yes \"y\" | \"${ANDROID_TOOLS_ROOT}/tools/bin/sdkmanager\" \"patcher;v4\" > /dev/null\nRUN rm \"${ANDROID_SDK_ARCHIVE}\"\nENV PATH=\"${ANDROID_TOOLS_ROOT}/tools:${PATH}\"\nENV PATH=\"${ANDROID_TOOLS_ROOT}/tools/bin:${PATH}\"\n# Silence warnings when accepting android licenses.\nRUN mkdir -p ~/.android\nRUN touch ~/.android/repositories.cfg\n\n# Setup gradle\nENV GRADLE_ROOT=\"/opt/gradle\"\nRUN mkdir -p \"${GRADLE_ROOT}\"\nENV GRADLE_ARCHIVE=\"${GRADLE_ROOT}/gradle.zip\"\nENV GRADLE_URL=\"http://services.gradle.org/distributions/gradle-4.4-bin.zip\"\nRUN wget --progress=dot:giga \"$GRADLE_URL\" -O \"${GRADLE_ARCHIVE}\"\nRUN unzip -q -d \"${GRADLE_ROOT}\" \"${GRADLE_ARCHIVE}\"\nENV PATH=\"$GRADLE_ROOT/bin:$PATH\"\n\n# Add npm to path.\nENV PATH=\"/usr/bin:${PATH}\"\nRUN dpkg-query -L nodejs\n# Install Firebase\n# This is why we need nodejs installed.\nRUN /usr/bin/npm --verbose install -g firebase-tools\n\n# Install dashing\n# This is why we need golang installed.\nRUN mkdir -p /opt/gopath/bin\nENV GOPATH=/opt/gopath\nENV PATH=\"${GOPATH}/bin:${PATH}\"\nRUN go get -u github.com/technosophos/dashing\n\n# Set locale to en_US\nRUN locale-gen en_US \"en_US.UTF-8\" && dpkg-reconfigure locales\nENV LANG en_US.UTF-8\n\n# Install coveralls and Firebase\n# This is why we need ruby installed.\n# Skip all the documentation (-N) since it's just on CI.\nRUN gem install coveralls -N\nRUN gem install bundler -N\n# Install fastlane which is used on Linux to build and deploy Android\n# builds to the Play Store.\nRUN gem install fastlane -N\n\n"
}