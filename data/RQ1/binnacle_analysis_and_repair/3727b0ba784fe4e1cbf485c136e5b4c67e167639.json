{
  "startTime": 1674244794125,
  "endTime": 1674244794205,
  "originalSmells": [
    {
      "rule": "yumInstallRmVarCacheYum",
      "position": {
        "lineStart": 30,
        "lineEnd": 30,
        "columnStart": 4,
        "columnEnd": 40
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# To push a new version:\n# TODO(klimek): This currently only works on an OS that supports vsyscall, which\n# ubuntu and debian machines do not; once a docker image of centos without\n# vsyscall use is available, use that instead. For now, the best way to run this\n# is to run it from a centos7 machine.\n# 0. Copy this file and the corresponding shell script to the centos7 machine.\n# 1. Download tensorrt from\n#    https://developer.nvidia.com/nvidia-tensorrt-5x-download\n#    and copy it into /tmp.\n# 2. $ ./Dockerfile.rbe.cuda10.0-cudnn7-centos.sh\n# 3. $ docker push gcr.io/tensorflow-testing/nosla-cuda10.0-cudnn7-centos6\n#\n# We can't currently build this Dockerfile directly:\n# tensorrt for centos is only availble via a authenticated download link from\n# nvidia, and it's larger than citc's max file size.\n# To work around this, we create a Docker environment in /tmp to build the\n# image from in a shell script (2).\n\nFROM nvidia/cuda:10.0-cudnn7-devel-centos6\nLABEL maintainer=\"Amit Patankar <amitpatankar@google.com>\"\n\n# Install yum packages required to build tensorflow.\nCOPY install/*.sh /install/\nRUN bash install/install_yum_packages.sh\n\n# TODO(klimek): Once nvidia provides a way to install tensorrt from within\n# docker, switch to that. Until then, we copy the tensorrt rpm into the docker\n# environment.\nADD tensorrt.rpm tensorrt.rpm\nRUN rpm -ihv tensorrt.rpm && \\\n    yum install -y --nogpgcheck tensorrt && \\\n    rm -f tensorrt.rpm && rm -rf /var/cache/yum\n\n# Enable devtoolset-7 and python27 in the docker image.\nenv PATH=\"/opt/rh/python27/root/usr/bin:/opt/rh/devtoolset-7/root/usr/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin\" \\\n    LD_LIBRARY_PATH=\"/opt/rh/python27/root/usr/lib64:/opt/rh/devtoolset-7/root/usr/lib64:/opt/rh/devtoolset-7/root/usr/lib:/opt/rh/devtoolset-7/root/usr/lib64/dyninst:/opt/rh/devtoolset-7/root/usr/lib/dyninst:/opt/rh/devtoolset-7/root/usr/lib64:/opt/rh/devtoolset-7/root/usr/lib:/usr/local/nvidia/lib:/usr/local/nvidia/lib64\" \\\n    PCP_DIR=\"/opt/rh/devtoolset-7/root\" \\\n    PERL5LIB=\"/opt/rh/devtoolset-7/root//usr/lib64/perl5/vendor_perl:/opt/rh/devtoolset-7/root/usr/lib/perl5:/opt/rh/devtoolset-7/root//usr/share/perl5/vendor_perl\" \\\n    PKG_CONFIG_PATH=\"/opt/rh/python27/root/usr/lib64/pkgconfig/\"\n\n# Install python3.6 and pip packages needed to build tensorflow.\nRUN bash install/install_centos_python36.sh\nRUN bash install/install_centos_pip_packages.sh\n\n# Install a /usr/bin/python3 link.\n# centos by default does not provide links, and instead relies on paths into\n# /opt/ to switch to alternative configurations. For bazel remote builds,\n# the python path between the local machine running bazel and the remote setup\n# must be the same.\nRUN update-alternatives --install /usr/bin/python2 python2 /opt/rh/python27/root/usr/bin/python2.7 0\nRUN update-alternatives --install /usr/bin/python3 python3 /usr/local/bin/python3.6 0\n\n# Install a ubuntu-compatible openjdk link so that ubuntu JAVA_HOME works\n# for this image.\n# TODO(klimek): Figure out a way to specify a different remote java path from\n# the local one.\nRUN ln -s /usr/lib/jvm/java /usr/lib/jvm/java-8-openjdk-amd64\n"
}