{
  "startTime": 1674249304754,
  "endTime": 1674249305536,
  "originalSmells": [
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 51,
        "lineEnd": 51,
        "columnStart": 7,
        "columnEnd": 38
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 58,
        "lineEnd": 58,
        "columnStart": 7,
        "columnEnd": 38
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 70,
        "lineEnd": 70,
        "columnStart": 7,
        "columnEnd": 38
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 76,
        "lineEnd": 76,
        "columnStart": 7,
        "columnEnd": 38
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 8,
        "lineEnd": 10,
        "columnStart": 7,
        "columnEnd": 52
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 8,
        "lineEnd": 10,
        "columnStart": 7,
        "columnEnd": 52
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM debian:buster-slim\n\nLABEL author=\"Harry <harrywong@live.com>\" maintainer=\"Harry <harrywong@live.com>\" version=\"1.5.0\" \\\n  description=\"This is a base image for building everitoken/evt\"\n\nRUN echo 'APT::Install-Recommends 0;' >> /etc/apt/apt.conf.d/01norecommends \\\n    && echo 'APT::Install-Suggests 0;' >> /etc/apt/apt.conf.d/01norecommends \\\n    && apt-get update \\\n    && DEBIAN_FRONTEND=noninteractive apt-get --no-install-recommends install -y sudo wget curl cmake net-tools ccache ninja-build ca-certificates \\\n       unzip gnupg git make libtool autoconf automake m4 openssl libssl1.1 libssl-dev libgmp-dev zlib1g-dev \\\n       libreadline-dev gcc-8 g++-8 llvm-7 llvm-7-dev && rm -rf /var/lib/apt/lists/*;\n\nRUN update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-8 999\nRUN update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-8 999\nRUN update-alternatives --install /usr/bin/cc  cc  /usr/bin/gcc   999\nRUN update-alternatives --install /usr/bin/c++ c++ /usr/bin/g++   999\n\nRUN update-alternatives --install /usr/bin/gcc-ar     gcc-ar     /usr/bin/gcc-ar-8     999\nRUN update-alternatives --install /usr/bin/gcc-nm     gcc-nm     /usr/bin/gcc-nm-8     999\nRUN update-alternatives --install /usr/bin/gcc-ranlib gcc-ranlib /usr/bin/gcc-ranlib-8 999\n\nRUN update-alternatives --set cc  /usr/bin/gcc\nRUN update-alternatives --set c++ /usr/bin/g++\n\nRUN git clone --depth 1 --single-branch --branch master https://github.com/lz4/lz4.git \\\n    && cd lz4 \\\n    && make -j${nproc} install \\\n    && cd .. && rm -rf lz4\n\nRUN git clone --depth 1 --single-branch --branch master https://github.com/facebook/zstd.git \\\n    && cd zstd \\\n    && make -j${nproc} install \\\n    && cd .. && rm -rf zstd\n\nRUN wget https://dl.bintray.com/boostorg/release/1.69.0/source/boost_1_69_0.tar.gz -O - | tar -xz \\\n    && cd boost_1_69_0 \\\n    && ./bootstrap.sh --prefix=/usr/local --with-toolset=gcc \\\n    && ./b2 -d0 -j$(nproc) --with-thread --with-date_time --with-system --with-filesystem --with-program_options --with-timer \\\n       --with-serialization --with-chrono --with-test --with-context --with-locale --with-coroutine --with-iostreams toolset=gcc link=shared install \\\n    && cd .. && rm -rf boost_1_69_0\n\nRUN wget https://github.com/01org/tbb/archive/2019_U8.tar.gz -O - | tar -xz \\\n    && cd tbb-2019_U8 \\\n    && make tbb -j${nproc} \\\n    && sudo cp build/*release/*.so* /usr/local/lib \\\n    && sudo cp -R include/tbb /usr/local/include \\\n    && cd .. && rm -rf tbb-2019_U8\n\nRUN git clone --depth 1 git://github.com/cryptonomex/secp256k1-zkp \\\n    && cd secp256k1-zkp \\\n    && ./autogen.sh \\\n    && ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --prefix=/usr/local \\\n    && make -j$(nproc) install \\\n    && cd .. && rm -rf secp256k1-zkp\n\nRUN git clone --depth 1 --single-branch --branch master https://github.com/jemalloc/jemalloc.git \\\n    && cd jemalloc \\\n    && ./autogen.sh \\\n    && ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --prefix=/usr/local \\\n    && make -j${nproc} install_bin install_include install_lib \\\n    && cd .. && rm -rf jemalloc\n\nRUN git clone -b master https://github.com/google/benchmark.git \\\n    && cd benchmark \\\n    && cmake -H. -Bbuild -DCMAKE_BUILD_TYPE=Release -DBENCHMARK_ENABLE_TESTING=OFF -DBENCHMARK_ENABLE_LTO=OFF -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=/usr/local\\\n    && cmake --build build --target install \\\n    && cd .. && rm -rf benchmark\n\nRUN git clone -b master https://github.com/everitoken/breakpad.git \\\n    && cd breakpad \\\n    && ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --prefix=/usr/local \\\n    && make -j$(nproc) install \\\n    && cd .. && rm -rf breakpad\n\nRUN wget https://ftp.postgresql.org/pub/source/v11.3/postgresql-11.3.tar.gz -O - | tar -xz \\\n    && cd postgresql-11.3 \\\n    && ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --prefix=/usr/local \\\n    && make -C src/include install \\\n    && make -C src/interfaces install \\\n    && cd .. && rm -rf postgresql-11.3\n\nRUN git clone --depth 1 -b r1.13 git://github.com/mongodb/mongo-c-driver \\\n    && cd mongo-c-driver \\\n    && cmake -H. -Bbuild -DCMAKE_BUILD_TYPE=Release -DENABLE_SSL=OPENSSL -DENABLE_STATIC=OFF -DENABLE_BSON=ON -DENABLE_TESTS=OFF \\\n    && cmake --build build --target install \\\n    && cd .. && rm -rf mongo-c-driver\n\nRUN git clone --depth 1 -b releases/stable git://github.com/mongodb/mongo-cxx-driver \\\n    && cd mongo-cxx-driver \\\n    && cmake -H. -Bbuild -DBUILD_SHARED_LIBS=ON -DCMAKE_BUILD_TYPE=Release  -DCMAKE_INSTALL_PREFIX=/usr/local\\\n    && cmake --build build --target install \\\n    && cd .. && rm -rf mongo-cxx-driver\n\nRUN cp /usr/bin/ccache /usr/local/bin/\nRUN ln -s ccache /usr/local/bin/gcc\nRUN ln -s ccache /usr/local/bin/g++\nRUN ln -s ccache /usr/local/bin/cc\nRUN ln -s ccache /usr/local/bin/c++\n"
}