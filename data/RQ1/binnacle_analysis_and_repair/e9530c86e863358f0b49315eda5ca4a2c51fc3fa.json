{
  "startTime": 1674252714446,
  "endTime": 1674252715419,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 53,
        "lineEnd": 53,
        "columnStart": 4,
        "columnEnd": 44
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 171,
        "lineEnd": 171,
        "columnStart": 4,
        "columnEnd": 80
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 202,
        "lineEnd": 202,
        "columnStart": 4,
        "columnEnd": 46
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 204,
        "lineEnd": 204,
        "columnStart": 4,
        "columnEnd": 46
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 336,
        "lineEnd": 336,
        "columnStart": 4,
        "columnEnd": 47
      }
    },
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 176,
        "lineEnd": 176,
        "columnStart": 4,
        "columnEnd": 37
      }
    },
    {
      "rule": "curlUseHttpsUrl",
      "position": {
        "lineStart": 53,
        "lineEnd": 53,
        "columnStart": 4,
        "columnEnd": 44
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 12,
        "lineEnd": 12,
        "columnStart": 4,
        "columnEnd": 49
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 23,
        "lineEnd": 49,
        "columnStart": 4,
        "columnEnd": 21
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 83,
        "lineEnd": 83,
        "columnStart": 4,
        "columnEnd": 32
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 97,
        "lineEnd": 97,
        "columnStart": 4,
        "columnEnd": 57
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 252,
        "lineEnd": 252,
        "columnStart": 4,
        "columnEnd": 47
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 12,
        "lineEnd": 12,
        "columnStart": 4,
        "columnEnd": 49
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 252,
        "lineEnd": 252,
        "columnStart": 4,
        "columnEnd": 47
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 12,
        "lineEnd": 12,
        "columnStart": 4,
        "columnEnd": 49
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 23,
        "lineEnd": 49,
        "columnStart": 4,
        "columnEnd": 21
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 83,
        "lineEnd": 83,
        "columnStart": 4,
        "columnEnd": 32
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 97,
        "lineEnd": 97,
        "columnStart": 4,
        "columnEnd": 57
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 252,
        "lineEnd": 252,
        "columnStart": 4,
        "columnEnd": 47
      }
    }
  ],
  "repairedSmells": [
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 12,
        "lineEnd": 12,
        "columnStart": 4,
        "columnEnd": 73
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 254,
        "lineEnd": 254,
        "columnStart": 4,
        "columnEnd": 71
      }
    }
  ],
  "repairedDockerfile": "FROM phusion/baseimage:latest\n\nRUN DEBIAN_FRONTEND=noninteractive\nRUN locale-gen en_US.UTF-8\n\nENV LANGUAGE=en_US.UTF-8\nENV LC_ALL=en_US.UTF-8\nENV LC_CTYPE=UTF-8\nENV LANG=en_US.UTF-8\nENV TERM xterm\n\n# Add the \"PHP 7\" ppa\nRUN apt-get install --no-install-recommends -y software-properties-common && \\\n    add-apt-repository -y ppa:ondrej/php && rm -rf /var/lib/apt/lists/*;\n\n#--------------------------------------------------------------------------\n# Mandatory Software's Installation\n#--------------------------------------------------------------------------\n\nARG PHP_VERSION\n\n# Install \"PHP Extentions\", \"libraries\", \"Software's\"\nRUN apt-get update && \\\n    apt-get install --no-install-recommends -y --allow-downgrades --allow-remove-essential \\\n    --allow-change-held-packages \\\n    php${PHP_VERSION}-cli \\\n    php${PHP_VERSION}-common \\\n    php${PHP_VERSION}-curl \\\n    php${PHP_VERSION}-intl \\\n    php${PHP_VERSION}-json \\\n    php${PHP_VERSION}-xml \\\n    php${PHP_VERSION}-mbstring \\\n    php${PHP_VERSION}-mysql \\\n    php${PHP_VERSION}-pgsql \\\n    php${PHP_VERSION}-zip \\\n    php${PHP_VERSION}-bcmath \\\n    php${PHP_VERSION}-memcached \\\n    php${PHP_VERSION}-gd \\\n    php${PHP_VERSION}-dev \\\n    pkg-config \\\n    libcurl4-openssl-dev \\\n    libedit-dev \\\n    libssl-dev \\\n    libxml2-dev \\\n    xz-utils \\\n    git \\\n    curl \\\n    vim \\\n    nano \\\n    postgresql-client \\\n    && apt-get clean && rm -rf /var/lib/apt/lists/*;\n\n# Install composer and add its bin to the PATH.\nRUN curl -f -s https://getcomposer.org/installer | php && \\\n    echo \"export PATH=${PATH}:/var/www/vendor/bin\" >> ~/.bashrc && \\\n    mv composer.phar /usr/local/bin/composer\n\n# Source the bash\nRUN . ~/.bashrc\n\n#--------------------------------------------------------------------------\n# Optional Software's Installation\n#--------------------------------------------------------------------------\n# Optional Software's will only be installed if you set them to `true`\n# in the `docker-compose.yml` before the build.\n#\n#   - COMPOSER_GLOBAL_INSTALL=  false\n#   - INSTALL_NODE=             false\n\n\n#####################################\n# Non-Root User:\n#####################################\n# Add a non-root user to prevent files being created with root permissions on host machine.\nARG PUID=1000\nARG PGID=1000\n\nENV PUID ${PUID}\nENV PGID ${PGID}\n\nRUN groupadd -g ${PGID} devdock && \\\n    useradd -u ${PUID} -g devdock -m devdock && \\\n    apt-get update -yqq && \\\n    apt-get install --no-install-recommends -y python2.7 && rm -rf /var/lib/apt/lists/*;\n\n#####################################\n# SOAP:\n#####################################\nUSER root\n\nARG INSTALL_SOAP=false\nENV INSTALL_SOAP ${INSTALL_SOAP}\n\nRUN if [ ${INSTALL_SOAP} = true ]; then \\\n    add-apt-repository -y ppa:ondrej/php && \\\n    apt-get update -yqq && \\\n    apt-get -y --no-install-recommends install libxml2-dev php${PHP_VERSION}-soap \\\n    ; rm -rf /var/lib/apt/lists/*; fi\n\n#####################################\n# Set Timezone\n#####################################\nARG TZ=UTC\nENV TZ ${TZ}\nRUN ln -snf /usr/share/zoneinfo/$TZ /etc/localtime && echo $TZ > /etc/timezone\n\n###########################################################################\n# Composer:\n###########################################################################\n\nUSER root\n\n# Add the composer.json\nCOPY ./composer.json /home/devdock/.composer/composer.json\n\n# Make sure that ~/.composer belongs to devdock\nRUN chown -R devdock:devdock /home/devdock/.composer\n\nUSER devdock\n\n# Check if global install need to be ran\nARG COMPOSER_GLOBAL_INSTALL=false\nENV COMPOSER_GLOBAL_INSTALL ${COMPOSER_GLOBAL_INSTALL}\n\nRUN if [ ${COMPOSER_GLOBAL_INSTALL} = true ]; then \\\n    # run the install\n    composer global install \\\n    ;fi\n\nARG COMPOSER_REPO_PACKAGIST\nENV COMPOSER_REPO_PACKAGIST ${COMPOSER_REPO_PACKAGIST}\n\nRUN if [ ${COMPOSER_REPO_PACKAGIST} ]; then \\\n    composer config -g repo.packagist composer ${COMPOSER_REPO_PACKAGIST} \\\n    ;fi\n\n# Export composer vendor path\nRUN echo \"\" >> ~/.bashrc && \\\n    echo 'export PATH=\"~/.composer/vendor/bin:$PATH\"' >> ~/.bashrc\n\n###########################################################################\n# Non-root user : PHPUnit path\n###########################################################################\n\n# add ./vendor/bin to non-root user's bashrc (needed for phpunit)\nUSER devdock\n\nRUN echo \"\" >> ~/.bashrc && \\\n    echo 'export PATH=\"/var/www/vendor/bin:$PATH\"' >> ~/.bashrc\n\n#####################################\n# Crontab\n#####################################\nUSER root\n\nCOPY ./crontab /etc/cron.d\nRUN chmod -R 644 /etc/cron.d\n\n#####################################\n# Node / NVM:\n#####################################\nUSER devdock\n# Check if NVM needs to be installed\nARG NODE_VERSION=stable\nENV NODE_VERSION ${NODE_VERSION}\nARG INSTALL_NODE=false\nENV INSTALL_NODE ${INSTALL_NODE}\nENV NVM_DIR /home/devdock/.nvm\nRUN if [ ${INSTALL_NODE} = true ]; then \\\n    curl -f -o- https://raw.githubusercontent.com/creationix/nvm/v0.33.1/install.sh | bash && \\\n    . $NVM_DIR/nvm.sh && \\\n    nvm install ${NODE_VERSION} && \\\n    nvm use ${NODE_VERSION} && \\\n    nvm alias ${NODE_VERSION} && \\\n    npm install -g gulp bower vue-cli \\\n    ; npm cache clean --force; fi\n\n# Wouldn't execute when added to the RUN statement in the above block\n# Source NVM when loading bash since ~/.profile isn't loaded on non-login shell\nRUN if [ ${INSTALL_NODE} = true ]; then \\\n    echo \"\" >> ~/.bashrc && \\\n    echo 'export NVM_DIR=\"$HOME/.nvm\"' >> ~/.bashrc && \\\n    echo '[ -s \"$NVM_DIR/nvm.sh\" ] && . \"$NVM_DIR/nvm.sh\"  # This loads nvm' >> ~/.bashrc \\\n    ;fi\n\n\n#####################################\n# YARN:\n#####################################\n\nUSER devdock\n\nARG INSTALL_YARN=false\nENV INSTALL_YARN ${INSTALL_YARN}\nARG YARN_VERSION=latest\nENV YARN_VERSION ${YARN_VERSION}\n\nRUN if [ ${INSTALL_YARN} = true ]; then \\\n    [ -s \"$NVM_DIR/nvm.sh\" ] && . \"$NVM_DIR/nvm.sh\" && \\\n    if [ ${YARN_VERSION} = \"latest\" ]; then \\\n    curl -f -o- -L https://yarnpkg.com/install.sh | bash; \\\n    else \\\n    curl -f -o- -L https://yarnpkg.com/install.sh | bash -s -- --version ${YARN_VERSION}; \\\n    fi && \\\n    echo \"\" >> ~/.bashrc && \\\n    echo 'export PATH=\"$HOME/.yarn/bin:$PATH\"' >> ~/.bashrc \\\n    ; else \\\n    curl -f -o- -L https://yarnpkg.com/install.sh | bash -s -- --version ${YARN_VERSION}; \\\n    fi \\\n\n\n    fi\n\n# Add YARN binaries to root's .bashrc\nUSER root\n\nRUN if [ ${INSTALL_YARN} = true ]; then \\\n    echo \"\" >> ~/.bashrc && \\\n    echo 'export YARN_DIR=\"/home/devdock/.yarn\"' >> ~/.bashrc && \\\n    echo 'export PATH=\"$YARN_DIR/bin:$PATH\"' >> ~/.bashrc \\\n    ;fi\n\n#####################################\n# User Aliases\n#####################################\n\nUSER root\n\nCOPY ./aliases.sh /root/aliases.sh\nCOPY ./aliases.sh /home/devdock/aliases.sh\n\nRUN sed -i 's/\\r//' /root/aliases.sh && \\\n    sed -i 's/\\r//' /home/devdock/aliases.sh && \\\n    chown devdock:devdock /home/devdock/aliases.sh && \\\n    echo \"\" >> ~/.bashrc && \\\n    echo \"# Load Custom Aliases\" >> ~/.bashrc && \\\n    echo \"source ~/aliases.sh\" >> ~/.bashrc && \\\n    echo \"\" >> ~/.bashrc\n\nUSER devdock\n\nRUN echo \"\" >> ~/.bashrc && \\\n    echo \"# Load Custom Aliases\" >> ~/.bashrc && \\\n    echo \"source ~/aliases.sh\" >> ~/.bashrc && \\\n    echo \"\" >> ~/.bashrc\n\n###########################################################################\n# xDebug:\n###########################################################################\nUSER root\n\nARG INSTALL_XDEBUG=false\n\nRUN if [ ${INSTALL_XDEBUG} = true ]; then \\\n    apt-get install --no-install-recommends -y php${PHP_VERSION}-xdebug && \\\n    sed -i 's/^;//g' /etc/php/${PHP_VERSION}/cli/conf.d/20-xdebug.ini && \\\n    echo \"alias phpunit='php -dzend_extension=xdebug.so /var/www/vendor/bin/phpunit'\" >> ~/.bashrc \\\n    ; rm -rf /var/lib/apt/lists/*; fi\n\n# ADD for REMOTE debugging\nCOPY ./xdebug.ini /etc/php/${PHP_VERSION}/cli/conf.d/xdebug.ini\n\nRUN sed -i \"s/xdebug.remote_autostart=0/xdebug.remote_autostart=1/\" /etc/php/${PHP_VERSION}/cli/conf.d/xdebug.ini && \\\n    sed -i \"s/xdebug.remote_enable=0/xdebug.remote_enable=1/\" /etc/php/${PHP_VERSION}/cli/conf.d/xdebug.ini && \\\n    sed -i \"s/xdebug.cli_color=0/xdebug.cli_color=1/\" /etc/php/${PHP_VERSION}/cli/conf.d/xdebug.ini\n\n#####################################\n# ssh:\n#####################################\nARG INSTALL_WORKSPACE_SSH=false\n\nCOPY insecure_id_rsa /tmp/id_rsa\nCOPY insecure_id_rsa.pub /tmp/id_rsa.pub\n\nRUN if [ ${INSTALL_WORKSPACE_SSH} = true ]; then \\\n    rm -f /etc/service/sshd/down && \\\n    cat /tmp/id_rsa.pub >> /root/.ssh/authorized_keys \\\n    && cat /tmp/id_rsa.pub >> /root/.ssh/id_rsa.pub \\\n    && cat /tmp/id_rsa >> /root/.ssh/id_rsa \\\n    && rm -f /tmp/id_rsa* \\\n    && chmod 644 /root/.ssh/authorized_keys /root/.ssh/id_rsa.pub \\\n    && chmod 400 /root/.ssh/id_rsa \\\n    && cp -rf /root/.ssh /home/devdock \\\n    && chown -R devdock:devdock /home/devdock/.ssh \\\n    ;fi\n\n#####################################\n# MongoDB:\n#####################################\n\nARG INSTALL_MONGO=false\n\nRUN if [ ${INSTALL_MONGO} = true ]; then \\\n    # Install the mongodb extension\n    if [ $(php -r \"echo PHP_MAJOR_VERSION;\") = \"5\" ]; then \\\n    pecl install mongo && \\\n    echo \"extension=mongo.so\" >> /etc/php/${PHP_VERSION}/mods-available/mongo.ini && \\\n    ln -s /etc/php/${PHP_VERSION}/mods-available/mongo.ini /etc/php/${PHP_VERSION}/cli/conf.d/30-mongo.ini \\\n    ;fi && \\\n    pecl install mongodb && \\\n    echo \"extension=mongodb.so\" >> /etc/php/${PHP_VERSION}/mods-available/mongodb.ini && \\\n    ln -s /etc/php/${PHP_VERSION}/mods-available/mongodb.ini /etc/php/${PHP_VERSION}/cli/conf.d/30-mongodb.ini \\\n    ;fi\n\n###########################################################################\n# Swoole EXTENSION\n###########################################################################\n\nARG INSTALL_SWOOLE=false\n\nRUN if [ ${INSTALL_SWOOLE} = true ]; then \\\n  # Install Php Swoole Extension\n  if [ $(php -r \"echo PHP_MAJOR_VERSION;\") = \"5\" ]; then \\\n  pecl -q install swoole-2.0.10; \\\n  else \\\n  if [ $(php -r \"echo PHP_MINOR_VERSION;\") = \"0\" ]; then \\\n  pecl install swoole-2.2.0; \\\n  else \\\n  pecl install swoole; \\\n  fi \\\n  fi && \\\n  echo \"extension=swoole.so\" >> /etc/php/${PHP_VERSION}/mods-available/swoole.ini && \\\n  ln -s /etc/php/${PHP_VERSION}/mods-available/swoole.ini /etc/php/${PHP_VERSION}/cli/conf.d/20-swoole.ini \\\n  && php -m | grep -q 'swoole' \\\n  ;fi\n\n###########################################################################\n# Deployer:\n###########################################################################\n\nUSER root\n\nARG INSTALL_DEPLOYER=false\n\nRUN if [ ${INSTALL_DEPLOYER} = true ]; then \\\n    curl -f -LO https://deployer.org/deployer.phar && \\\n    mv deployer.phar /usr/local/bin/dep && \\\n    chmod +x /usr/local/bin/dep \\\n; fi\n\n#--------------------------------------------------------------------------\n# Final Touch\n#--------------------------------------------------------------------------\n\n# Clean up\nUSER root\nRUN apt-get clean && \\\n    rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*\n\n# Set default work directory\nWORKDIR /var/www\n"
}