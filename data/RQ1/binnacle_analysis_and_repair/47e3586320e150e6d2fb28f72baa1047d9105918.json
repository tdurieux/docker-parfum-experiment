{
  "startTime": 1674240305285,
  "endTime": 1674240305432,
  "originalSmells": [
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 36,
        "lineEnd": 36,
        "columnStart": 4,
        "columnEnd": 15
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 26,
        "lineEnd": 26,
        "columnStart": 4,
        "columnEnd": 67
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 24,
        "lineEnd": 24,
        "columnStart": 22,
        "columnEnd": 45
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 30,
        "lineEnd": 30,
        "columnStart": 22,
        "columnEnd": 61
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 24,
        "lineEnd": 24,
        "columnStart": 22,
        "columnEnd": 45
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 30,
        "lineEnd": 30,
        "columnStart": 22,
        "columnEnd": 61
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# This dockerfile is used to build a web app\n# docker build -t  \"pradeep/web_app\" -f Dockerfile .\n# docker build --build-arg VCS_REF=$(git rev-parse --short HEAD) --build-arg BUILD_DATE=$(date -u +\"%Y-%m-%dT%H:%M:%SZ\") --build-arg VERSION=0.1 -t \"pradeep/web_app\" .\n# Pull base image\nFROM node:4.4-wheezy\n# Maintainer\nMAINTAINER pradeep@seleniumframework.com\n\nARG BUILD_DATE\nARG VCS_REF\nARG VERSION\nLABEL org.label-schema.build-date=$BUILD_DATE \\\n      org.label-schema.name=\"Docker for all\" \\\n      org.label-schema.description=\"Example project description in 300 chars or less\" \\\n      org.label-schema.url=\"https://www.seleniumframework.com\" \\\n      org.label-schema.vcs-ref=$VCS_REF \\\n      org.label-schema.vcs-url=\"https://github.com/machzqcq/docker-for-all\" \\\n      org.label-schema.vendor=\"Continuous Automation Inc.\" \\\n      org.label-schema.version=$VERSION \\\n      org.label-schema.schema-version=\"1.0\"\n\n# Expose ports\nEXPOSE 80 443 3000\n\nRUN apt-get update && apt-get install --no-install-recommends -y wget && rm -rf /var/lib/apt/lists/*;\nRUN wget https://github.com/jwilder/dockerize/releases/download/v0.2.0/dockerize-linux-amd64-v0.2.0.tar.gz\nRUN tar -C /usr/local/bin -xzvf dockerize-linux-amd64-v0.2.0.tar.gz && rm dockerize-linux-amd64-v0.2.0.tar.gz\n\n\n# Install git client and clone repo\nRUN apt-get update && apt-get install --no-install-recommends -y git curl wget procps && \\\n    git clone https://github.com/machzqcq/docker-for-all.git && rm -rf /var/lib/apt/lists/*;\n# Change git:// to https:// as sometimes firewall seems to block git\nRUN git config --global url.\"https://\".insteadOf git://\n# Run npm install to get all dependencies\nWORKDIR docker-for-all/developer/web_app\nRUN npm install && npm cache clean --force;\n\nCMD npm start > server.log\n\n# Define default command and wait until db is started\n# An alternative to dockerize is plain shell script as described here - https://docs.docker.com/compose/startup-order/\n# entrypoint: ./wait-for-it.sh db:5432 under depends_on section for web\n#CMD dockerize -wait tcp://db:5432 npm start\n"
}