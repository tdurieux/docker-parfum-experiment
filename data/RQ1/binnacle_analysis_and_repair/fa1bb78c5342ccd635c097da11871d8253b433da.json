{
  "startTime": 1674238676224,
  "endTime": 1674238676326,
  "originalSmells": [
    {
      "rule": "wgetUseHttpsUrl",
      "position": {
        "lineStart": 21,
        "lineEnd": 21,
        "columnStart": 4,
        "columnEnd": 79
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 34,
        "lineEnd": 34,
        "columnStart": 4,
        "columnEnd": 204
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 36,
        "lineEnd": 36,
        "columnStart": 4,
        "columnEnd": 23
      }
    },
    {
      "rule": "apkAddUseNoCache",
      "position": {
        "lineStart": 7,
        "lineEnd": 7,
        "columnStart": 4,
        "columnEnd": 41
      }
    },
    {
      "rule": "apkAddUseNoCache",
      "position": {
        "lineStart": 10,
        "lineEnd": 10,
        "columnStart": 4,
        "columnEnd": 29
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM alpine:3.6\n\n# Here we use several hacks collected from https://github.com/gliderlabs/docker-alpine/issues/11:\n# 1. install GLibc (which is not the cleanest solution at all)\n# 2. hotfix /etc/nsswitch.conf, which is apperently required by glibc and is not used in Alpine Linux\n\n# Install glibc\nRUN apk add --no-cache --update wget ca-certificates && \\\n    wget -q -O /etc/apk/keys/sgerrand.rsa.pub https://alpine-pkgs.sgerrand.com/sgerrand.rsa.pub && \\\n    wget https://github.com/sgerrand/alpine-pkg-glibc/releases/download/2.25-r0/glibc-2.25-r0.apk && \\\n    apk add --no-cache glibc-2.25-r0.apk && \\\n    echo 'hosts: files mdns4_minimal [NOTFOUND=return] dns mdns4' >> /etc/nsswitch.conf && \\\n    apk del wget ca-certificates\n\n    # && \\\n    # rm \"$ALPINE_GLIBC_PACKAGE\" \"$ALPINE_GLIBC_BIN_PACKAGE\" /var/cache/apk/*\n    # /usr/glibc/usr/bin/ldconfig \"/lib\" \"/usr/glibc/usr/lib\" && \\\n\n\n# Install python compiled for glibc\nRUN apk add --update bash wget ca-certificates && \\\n    wget \"https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh\" && \\\n    bash ./Miniconda3-latest-Linux-x86_64.sh -b -p /usr/local/miniconda && \\\n    rm ./Miniconda3-latest-Linux-x86_64.sh && \\\n    ln -s ../miniconda/bin/* /usr/local/bin/ && \\\n    apk del bash wget && \\\n    rm /var/cache/apk/*\n\n#RUN /usr/glibc/usr/bin/ldconfig /lib /usr/local/miniconda/lib\nENV PATH /usr/local/miniconda/bin:$PATH\nRUN conda install -y python==3.6\nRUN conda install -y numpy libgcc freetype pyzmq swig scipy\n# jupyter matplotlib requests ipykernel\n# RUN python -m ipykernel.kernelspec\nRUN pip install --no-cache-dir https://pypi.python.org/packages/7d/d0/96269b9ecfcc55cb38779831595e0521c34ef4ecdeba08b1ba4194cc4813/tensorflow-1.2.1-cp36-cp36m-manylinux1_x86_64.whl#md5=525ab154b9e177f84fc7e15a38f891ff\n\nRUN pip install --no-cache-dir deepcut\n\nWORKDIR /root\n\nENTRYPOINT /bin/sh\n"
}