{
  "startTime": 1674242686579,
  "endTime": 1674242686888,
  "originalSmells": [
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 61,
        "lineEnd": 61,
        "columnStart": 28,
        "columnEnd": 51
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 62,
        "lineEnd": 62,
        "columnStart": 4,
        "columnEnd": 26
      }
    },
    {
      "rule": "yumInstallRmVarCacheYum",
      "position": {
        "lineStart": 7,
        "lineEnd": 7,
        "columnStart": 21,
        "columnEnd": 48
      }
    },
    {
      "rule": "yumInstallRmVarCacheYum",
      "position": {
        "lineStart": 10,
        "lineEnd": 56,
        "columnStart": 4,
        "columnEnd": 11
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM centos:7\n\nUSER root\n\nADD ansible.repo /etc/yum.repos.d/ansible.repo\nADD RPM-GPG-KEY-ansible-release /etc/pki/rpm-gpg/RPM-GPG-KEY-ansible-release\n\nRUN yum -y update && yum -y install epel-release && rm -rf /var/cache/yum\n\n# sync with tools/docker-compose/Dockerfile\nRUN yum -y install acl \\\n  ansible \\\n  bubblewrap \\\n  curl \\\n  cyrus-sasl \\\n  cyrus-sasl-devel \\\n  gcc \\\n  gcc-c++ \\\n  git \\\n  krb5-devel \\\n  krb5-libs \\\n  krb5-workstation \\\n  libcurl-devel \\\n  libffi-devel \\\n  libselinux-python \\\n  libstdc++.so.6 \\\n  libtool-ltdl-devel \\\n  libxml2-devel \\\n  libxslt-devel \\\n  make \\\n  mercurial \\\n  mg \\\n  nginx \\\n  nodejs \\\n  openldap-devel \\\n  openssh-server \\\n  postgresql-devel \\\n  python-devel \\\n  python-pip \\\n  python-psutil \\\n  python-psycopg2 \\\n  python-setuptools \\\n  python36-devel \\\n  python36-setuptools \\\n  rsync \\\n  setools-libs \\\n  subversion \\\n  sudo \\\n  swig \\\n  tmux \\\n  unzip \\\n  vim \\\n  xmlsec1 \\\n  xmlsec1-devel \\\n  xmlsec1-openssl \\\n  xmlsec1-openssl-devel \\\n  yum-utils && rm -rf /var/cache/yum\n\nADD https://github.com/krallin/tini/releases/download/v0.14.0/tini /tini\nRUN chmod +x /tini\n\nRUN python3 -m ensurepip && pip3 install --no-cache-dir virtualenv\nRUN pip install --no-cache-dir supervisor\n\nADD Makefile /tmp/Makefile\nRUN mkdir /tmp/requirements\nADD requirements/requirements_ansible.txt \\\n    requirements/requirements_ansible_uninstall.txt \\\n    requirements/requirements_ansible_git.txt \\\n    requirements/requirements.txt \\\n    requirements/requirements_tower_uninstall.txt \\\n    requirements/requirements_git.txt \\\n    /tmp/requirements/\nRUN cd /tmp && VENV_BASE=\"/var/lib/awx/venv\" make requirements\n\nRUN yum -y remove cyrus-sasl-devel \\\n  gcc \\\n  gcc-c++ \\\n  krb5-devel \\\n  libtool-ltdl-devel \\\n  libxml2-devel \\\n  libxslt-devel \\\n  openldap-devel \\\n  postgresql-devel \\\n  python-devel \\\n  python36-devel \\\n  nodejs \\\n  xmlsec1-devel \\\n  xmlsec1-openssl-devel\n\nRUN yum -y clean all\nRUN rm -rf /root/.cache\n\nRUN localedef -c -i en_US -f UTF-8 en_US.UTF-8\nENV LANG en_US.UTF-8\nENV LANGUAGE en_US:en\nENV LC_ALL en_US.UTF-8\n\nRUN ln -s /var/lib/awx/venv/awx/bin/awx-manage /usr/bin/awx-manage\nRUN rm -rf /tmp/*\n\nRUN echo \"{{ awx_version }}\" > /var/lib/awx/.tower_version\nCOPY {{ awx_sdist_file }} /tmp/{{ awx_sdist_file }}\nRUN OFFICIAL=yes /var/lib/awx/venv/awx/bin/pip install /tmp/{{ awx_sdist_file }}\n\nADD settings.py /etc/tower/settings.py\nADD nginx.conf /etc/nginx/nginx.conf\nADD supervisor.conf /supervisor.conf\nADD supervisor_task.conf /supervisor_task.conf\nADD launch_awx.sh /usr/bin/launch_awx.sh\nADD launch_awx_task.sh /usr/bin/launch_awx_task.sh\nADD config-watcher /usr/bin/config-watcher\nRUN chmod +rx /usr/bin/launch_awx.sh && \\\n    chmod +rx /usr/bin/launch_awx_task.sh && \\\n    chmod +rx /usr/bin/config-watcher\n\nRUN find /var/lib/awx -not -path '/var/lib/awx/venv*' | xargs chgrp root\nRUN find /var/lib/awx -not -path '/var/lib/awx/venv*' | xargs chmod g+w\n\n# Pre-create things that we need to write to\nRUN for dir in /home/awx /var/log/tower /var/log/nginx /var/lib/nginx; \\\n  do mkdir -p $dir; chmod -R g+rwx $dir; chgrp -R root $dir; done\n\nRUN for file in /etc/passwd /var/run/nginx.pid; \\\n  do touch $file; chmod -R g+rwx $file; chgrp -R root $file; done\n\nVOLUME /var/lib/nginx\nRUN ln -sf /dev/stdout /var/log/nginx/access.log \\\n    && ln -sf /dev/stderr /var/log/nginx/error.log\n\nENV HOME=/home/awx\nWORKDIR ${HOME}\nUSER 1000\nEXPOSE 8052\n\nENTRYPOINT [\"/tini\", \"--\"]\nCMD /usr/bin/launch_awx.sh\n"
}