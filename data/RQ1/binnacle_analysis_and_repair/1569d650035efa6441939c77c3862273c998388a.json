{
  "startTime": 1674249472219,
  "endTime": 1674249472624,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 38,
        "lineEnd": 38,
        "columnStart": 7,
        "columnEnd": 119
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 51,
        "lineEnd": 51,
        "columnStart": 7,
        "columnEnd": 94
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM alpine:3.6\n\nENV JAVA_HOME /usr/lib/jvm/java-1.8-openjdk\nENV LOCAL_RESOURCES 2048,.5,1.0\n\nENV BAZEL_VERSION 0.7.0\nENV TENSORFLOW_VERSION 1.4.0\n\nRUN apk add --no-cache python3 python3-tkinter py3-numpy py3-numpy-f2py freetype libpng libjpeg-turbo imagemagick graphviz git\nRUN apk add --no-cache --virtual=.build-deps \\\n        bash \\\n        cmake \\\n        curl \\\n        freetype-dev \\\n        g++ \\\n        libjpeg-turbo-dev \\\n        libpng-dev \\\n        linux-headers \\\n        make \\\n        musl-dev \\\n        openblas-dev \\\n        openjdk8 \\\n        patch \\\n        perl \\\n        python3-dev \\\n        py-numpy-dev \\\n        rsync \\\n        sed \\\n        swig \\\n        zip \\\n    && : prepare for building TensorFlow \\\n    && : install wheel python module \\\n    && cd /tmp \\\n    && pip3 install --no-cache-dir wheel \\\n    && : \\\n    && : add python symlink to avoid python detection error \\\n    && $(cd /usr/bin && ln -s python3 python) \\\n    && : install Bazel to build TensorFlow \\\n    && curl -f -SLO https://github.com/bazelbuild/bazel/releases/download/${BAZEL_VERSION}/bazel-${BAZEL_VERSION}-dist.zip \\\n    && mkdir bazel-${BAZEL_VERSION} \\\n    && unzip -qd bazel-${BAZEL_VERSION} bazel-${BAZEL_VERSION}-dist.zip \\\n    && cd bazel-${BAZEL_VERSION} \\\n    && : add -fpermissive compiler option to avoid compilation failure \\\n    && sed -i -e '/\"-std=c++0x\"/{h;s//\"-fpermissive\"/;x;G}' tools/cpp/cc_configure.bzl \\\n    && : add '#include <sys/stat.h>' to avoid mode_t type error \\\n    && sed -i -e '/#endif  \\/\\/ COMPILER_MSVC/{h;s//#else/;G;s//#include <sys\\/stat.h>/;G;}' third_party/ijar/common.h \\\n    && bash compile.sh \\\n    && cp -p output/bazel /usr/bin/ \\\n    && : \\\n    && : build TensorFlow pip package \\\n    && cd /tmp \\\n    && curl -f -SL https://github.com/tensorflow/tensorflow/archive/v${TENSORFLOW_VERSION}.tar.gz \\\n        | tar xzf - \\\n    && cd tensorflow-${TENSORFLOW_VERSION} \\\n    && : musl-libc does not have \"secure_getenv\" function \\\n    && sed -i -e '/JEMALLOC_HAVE_SECURE_GETENV/d' third_party/jemalloc.BUILD \\\n    && PYTHON_BIN_PATH=/usr/bin/python \\\n        PYTHON_LIB_PATH=/usr/lib/python3.6/site-packages \\\n        CC_OPT_FLAGS=\"-march=native\" \\\n        TF_NEED_JEMALLOC=1 \\\n        TF_NEED_GCP=0 \\\n        TF_NEED_HDFS=0 \\\n        TF_NEED_S3=0 \\\n        TF_ENABLE_XLA=0 \\\n        TF_NEED_GDR=0 \\\n        TF_NEED_VERBS=0 \\\n        TF_NEED_OPENCL=0 \\\n        TF_NEED_CUDA=0 \\\n        TF_NEED_MPI=0 \\\n        bash configure \\\n    && bazel build -c opt --local_resources ${LOCAL_RESOURCES} //tensorflow/tools/pip_package:build_pip_package \\\n    && ./bazel-bin/tensorflow/tools/pip_package/build_pip_package /tmp/tensorflow_pkg \\\n    && : \\\n    && : install python modules including TensorFlow \\\n    && cd \\\n    && pip3 install --no-cache-dir /tmp/tensorflow_pkg/tensorflow-${TENSORFLOW_VERSION}-cp36-cp36m-linux_x86_64.whl \\\n    && pip3 install --no-cache-dir pandas scipy jupyter \\\n    && pip3 install --no-cache-dir scikit-learn matplotlib Pillow \\\n    && pip3 install --no-cache-dir google-api-python-client \\\n    && : \\\n    && : clean up unneeded packages and files \\\n    && apk del .build-deps \\\n    && rm -f /usr/bin/bazel \\\n    && rm -rf /tmp/* /root/.cache\n\nRUN jupyter notebook --generate-config --allow-root \\\n    && sed -i -e \"/c\\.NotebookApp\\.ip/a c.NotebookApp.ip = '*'\" \\\n        -e \"/c\\.NotebookApp\\.open_browser/a c.NotebookApp.open_browser = False\" \\\n            /root/.jupyter/jupyter_notebook_config.py\nRUN ipython profile create \\\n    && sed -i -e \"/c\\.InteractiveShellApp\\.matplotlib/a c.InteractiveShellApp.matplotlib = 'inline'\" \\\n            /root/.ipython/profile_default/ipython_kernel_config.py\n\nADD init.sh /usr/local/bin/init.sh\nRUN chmod u+x /usr/local/bin/init.sh\nEXPOSE 8888\nCMD [\"/usr/local/bin/init.sh\"]\n"
}