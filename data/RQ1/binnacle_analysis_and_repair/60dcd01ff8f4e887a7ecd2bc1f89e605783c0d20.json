{
  "startTime": 1674236740459,
  "endTime": 1674236740681,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 95,
        "lineEnd": 95,
        "columnStart": 7,
        "columnEnd": 61
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# Copyright 2018 The Kubernetes Authors.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n# kind cluster base image\n#\n# For systemd + docker configuration used below, see the following references:\n# https://www.freedesktop.org/wiki/Software/systemd/ContainerInterface/\n# https://developers.redhat.com/blog/2014/05/05/running-systemd-within-docker-container/\n# https://developers.redhat.com/blog/2016/09/13/running-systemd-in-a-non-privileged-container/\n\nARG BASE_IMAGE=\"ubuntu:19.04\"\nFROM ${BASE_IMAGE}\n\n# setting DEBIAN_FRONTEND=noninteractive stops some apt warnings, this is not\n# a real argument, we're (ab)using ARG to get a temporary ENV again.\nARG DEBIAN_FRONTEND=noninteractive\n\nCOPY clean-install /usr/local/bin/clean-install\nRUN chmod +x /usr/local/bin/clean-install\n\n# Get dependencies\n# The base image already has: ssh, apt, snapd\n# This is broken down into (each on a line):\n# - packages needed to run services (systemd)\n# - CRI (containerd)\n# - packages needed for kubernetes components\n# - misc packages kind uses itself\n# Then we cleanup (removing unwanted systemd services)\n# Then we disable kmsg in journald (these log entries would be confusing)\n#\n# ********************************<TEMPORARY>***********************************\n#\n# We then download a ctr binary with a tiny additional feature\n# we use that is not yet merged / packaged.\n#\n# See: https://github.com/containerd/containerd/pull/3259\n#\n# This binary is built with hack/build/ctr/run.sh\n# Sources: https://github.com/BenTheElder/containerd/tree/kind\n# Additional commit:\n# https://github.com/BenTheElder/containerd/commit/cb7c780af2394ab08d5d8a3932ca7437074ae179\n#\n# TODO(bentheelder): remove this once --no-unpack is packaged upstream.\n#\n# *******************************</TEMPORARY>***********************************\n#\n# https://developers.redhat.com/blog/2014/05/05/running-systemd-within-docker-container/\nRUN clean-install \\\n      systemd systemd-sysv libsystemd0 \\\n      containerd \\\n      conntrack iptables iproute2 ethtool socat util-linux mount ebtables udev kmod \\\n      bash ca-certificates curl rsync \\\n    && find /lib/systemd/system/sysinit.target.wants/ -name \"systemd-tmpfiles-setup.service\" -delete \\\n    && rm -f /lib/systemd/system/multi-user.target.wants/* \\\n    && rm -f /etc/systemd/system/*.wants/* \\\n    && rm -f /lib/systemd/system/local-fs.target.wants/* \\\n    && rm -f /lib/systemd/system/sockets.target.wants/*udev* \\\n    && rm -f /lib/systemd/system/sockets.target.wants/*initctl* \\\n    && rm -f /lib/systemd/system/basic.target.wants/* \\\n    && echo \"ReadKMsg=no\" >> /etc/systemd/journald.conf \\\n    && systemctl enable containerd \\\n    && export ARCH=$(dpkg --print-architecture | sed 's/ppc64el/ppc64le/') \\\n    && curl -fSL -o /usr/local/bin/ctr \\\n      \"https://storage.googleapis.com/bentheelder-kind-dev/containerd/linux/${ARCH}/ctr\" \\\n    && chmod +x /usr/local/bin/ctr \\\n    && echo \"done installing packages\"\n\n# add restart override to containerd\nCOPY 10-restart.conf /etc/systemd/system/containerd.service.d/\n\n# debug containerd version and create default config\n# additionally, disable some plugins we don't use / support\nRUN containerd --version \\\n    && mkdir -p /etc/containerd \\\n    && echo 'disabled_plugins = [\"aufs\", \"btrfs\", \"zfs\"]' > /etc/containerd/config.toml \\\n    && containerd config default >> /etc/containerd/config.toml\n\n# Install CNI binaries to /opt/cni/bin\n# TODO(bentheelder): doc why / what here\nARG CNI_VERSION=\"0.7.5\"\nARG CNI_BASE_URL=\"https://storage.googleapis.com/kubernetes-release/network-plugins/\"\nRUN export ARCH=$(dpkg --print-architecture | sed 's/ppc64el/ppc64le/') \\\n    && export CNI_TARBALL=\"cni-plugins-${ARCH}-v${CNI_VERSION}.tgz\" \\\n    && export CNI_URL=\"${CNI_BASE_URL}${CNI_TARBALL}\" \\\n    && curl -f -sSL --retry 5 --output /tmp/cni.tgz \"${CNI_URL}\" \\\n    && sha256sum /tmp/cni.tgz \\\n    && mkdir -p /opt/cni/bin \\\n    && tar -C /opt/cni/bin -xzf /tmp/cni.tgz \\\n    && rm -rf /tmp/cni.tgz\n\n# Install crictl to /usr/local/bin\nARG CRICTL_VERSION=\"v1.14.0\"\nRUN export ARCH=$(dpkg --print-architecture | sed 's/ppc64el/ppc64le/') \\\n    && curl -fSL \"https://github.com/kubernetes-sigs/cri-tools/releases/download/${CRICTL_VERSION}/crictl-${CRICTL_VERSION}-linux-${ARCH}.tar.gz\" | tar xzC /usr/local/bin \\\n    && echo 'runtime-endpoint: unix:///var/run/containerd/containerd.sock' > /etc/crictl.yaml\n\n# tell systemd that it is in docker (it will check for the container env)\n# https://www.freedesktop.org/wiki/Software/systemd/ContainerInterface/\nENV container docker\n# systemd exits on SIGRTMIN+3, not SIGTERM (which re-executes it)\n# https://bugzilla.redhat.com/show_bug.cgi?id=1201657\nSTOPSIGNAL SIGRTMIN+3\n\n# wrap systemd with our special entrypoint, see pkg/build for how this is built\n# basically this just lets us set up some things before continuing on to systemd\n# while preserving that systemd is PID1\n# for how we leverage this, see pkg/cluster\nCOPY [ \"entrypoint\", \"/usr/local/bin/\" ]\n# We need systemd to be PID1 to run the various services (docker, kubelet, etc.)\n# NOTE: this is *only* for documentation, the entrypoint is overridden by the node image\nENTRYPOINT [ \"/usr/local/bin/entrypoint\", \"/sbin/init\" ]\n"
}