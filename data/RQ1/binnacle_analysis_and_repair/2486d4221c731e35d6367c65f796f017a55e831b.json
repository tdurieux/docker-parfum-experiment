{
  "startTime": 1674243858265,
  "endTime": 1674243858767,
  "originalSmells": [
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 177,
        "lineEnd": 177,
        "columnStart": 4,
        "columnEnd": 30
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 178,
        "lineEnd": 178,
        "columnStart": 4,
        "columnEnd": 28
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 181,
        "lineEnd": 181,
        "columnStart": 4,
        "columnEnd": 27
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 182,
        "lineEnd": 182,
        "columnStart": 4,
        "columnEnd": 29
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 185,
        "lineEnd": 185,
        "columnStart": 4,
        "columnEnd": 26
      }
    },
    {
      "rule": "sha256sumEchoOneSpaces",
      "position": {
        "lineStart": 35,
        "lineEnd": 35,
        "columnStart": 4,
        "columnEnd": 98
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 10,
        "lineEnd": 10,
        "columnStart": 39,
        "columnEnd": 65
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 20,
        "lineEnd": 26,
        "columnStart": 22,
        "columnEnd": 17
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 10,
        "lineEnd": 10,
        "columnStart": 39,
        "columnEnd": 65
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM nvidia/cuda:8.0-cudnn5-devel\n\nMAINTAINER Jon Krohn <jon@untapt.com>\n\nENV PATH=\"/usr/local/cuda-8.0/bin:${PATH}\"\nENV LD_LIBRARY_PATH=\"/usr/local/cuda-8.0/lib64:${LD_LIBRARY_PATH}\"\n\n\n## from core/Dockerfile-gpu\n# Setup locales\nRUN apt-get clean && apt-get update && apt-get install --no-install-recommends -y locales && rm -rf /var/lib/apt/lists/*;\nRUN locale-gen en_US.UTF-8\nENV LANG en_US.UTF-8\nENV LANGUAGE en_US:en\nENV LC_ALL en_US.UTF-8\n\n# Purge existing python installs\nRUN apt-get purge -y python.*\n\n# Install prereqs\nRUN apt-get update && DEBIAN_FRONTEND=noninteractive apt-get --no-install-recommends install -y build-essential checkinstall \\\n\twget \\\n\tbzip2 \\\n\tca-certificates \\\n\tsudo \\\n\tlocales \\\n\tfonts-liberation \\\n && apt-get clean \\\n && rm -rf /var/lib/apt/lists/*\n\n\n## below mostly from jupyter/minimal-notebook (there's a bit of it in the line above too)\n## -- see https://github.com/jupyter/docker-stacks/blob/master/LICENSE.md\n# Install Tini\nRUN wget --quiet https://github.com/krallin/tini/releases/download/v0.10.0/tini && \\\n    echo \"1361527f39190a7338a0b434bd8c88ff7233ce7b9a4876f3315c22fce7eca1b0  *tini\" | sha256sum -c - && \\\n    mv tini /usr/local/bin/tini && \\\n    chmod +x /usr/local/bin/tini\n\n# Configure environment\nENV CONDA_DIR /opt/conda\nENV PATH $CONDA_DIR/bin:$PATH\nENV SHELL /bin/bash\nENV NB_USER jovyan\nENV NB_UID 1000\nENV HOME /home/$NB_USER\n\n# Create jovyan user with UID=1000 and in the 'users' group\nRUN useradd -m -s /bin/bash -N -u $NB_UID $NB_USER && \\\n\tmkdir -p $CONDA_DIR && \\\n\tchown $NB_USER $CONDA_DIR\n\nUSER $NB_USER\n\n# Setup work directory for backward-compatibility\nRUN mkdir /home/$NB_USER/work\n\n# Install conda as jovyan and check the md5 sum provided on the download site\nENV MINICONDA_VERSION 4.3.21\nRUN cd /tmp && \\\n    mkdir -p $CONDA_DIR && \\\n    wget --quiet https://repo.continuum.io/miniconda/Miniconda3-${MINICONDA_VERSION}-Linux-x86_64.sh && \\\n    echo \"c1c15d3baba15bf50293ae963abef853 *Miniconda3-${MINICONDA_VERSION}-Linux-x86_64.sh\" | md5sum -c - && \\\n    /bin/bash Miniconda3-${MINICONDA_VERSION}-Linux-x86_64.sh -f -b -p $CONDA_DIR && \\\n    rm Miniconda3-${MINICONDA_VERSION}-Linux-x86_64.sh && \\\n    $CONDA_DIR/bin/conda config --system --prepend channels conda-forge && \\\n    $CONDA_DIR/bin/conda config --system --set auto_update_conda false && \\\n    $CONDA_DIR/bin/conda config --system --set show_channel_urls true && \\\n    $CONDA_DIR/bin/conda update --all && \\\n    conda clean -tipsy\n\n# Install Jupyter Notebook and Hub\nRUN conda install --quiet --yes \\\n    'notebook=5.0.*' \\\n    'jupyterhub=0.7.*' \\\n    'jupyterlab=0.24.*' \\\n    && conda clean -tipsy\n\nUSER root\n\nEXPOSE 8888\nWORKDIR $HOME\n\n# Configure container startup\nENTRYPOINT [\"tini\", \"--\"]\nCMD [\"start-notebook.sh\"]\n\n# Add local files as late as possible to avoid cache busting\nCOPY installation/docker-stack-scripts/start.sh /usr/local/bin/\nCOPY installation/docker-stack-scripts/start-notebook.sh /usr/local/bin/\nCOPY installation/docker-stack-scripts/start-singleuser.sh /usr/local/bin/\nCOPY installation/docker-stack-scripts/jupyter_notebook_config.py /etc/jupyter/\nRUN chown -R $NB_USER:users /etc/jupyter/\n\n\n## the next chunk of code is from jupyter/minimal-notebook\n\n# Install all OS dependencies for fully functional notebook server\nRUN apt-get update && apt-get install -yq --no-install-recommends \\\n    build-essential \\\n    emacs \\\n    git \\\n    inkscape \\\n    jed \\\n    libsm6 \\\n    libxext-dev \\\n    libxrender1 \\\n    lmodern \\\n    pandoc \\\n    python-dev \\\n    texlive-fonts-extra \\\n    texlive-fonts-recommended \\\n    texlive-generic-recommended \\\n    texlive-latex-base \\\n    texlive-latex-extra \\\n    texlive-xetex \\\n    vim \\\n    unzip \\\n    && apt-get clean && \\\n    rm -rf /var/lib/apt/lists/*\n\n\n## the next chunk of code is from jupyter/scipy-notebook\n\n# libav-tools for matplotlib anim\nRUN apt-get update && \\\n    apt-get install -y --no-install-recommends libav-tools && \\\n    apt-get clean && \\\n    rm -rf /var/lib/apt/lists/*\n\nUSER $NB_USER\n\n# Install Python 3 packages\n# Remove pyqt and qt pulled in for matplotlib since we're only ever going to\n# use notebook-friendly backends in these images\nRUN conda install --quiet --yes \\\n    'nomkl' \\\n    'ipywidgets=6.0*' \\\n    'pandas=0.19*' \\\n    'numexpr=2.6*' \\\n    'matplotlib=2.0*' \\\n    'scipy=0.19*' \\\n    'seaborn=0.7*' \\\n    'scikit-learn=0.18*' \\\n    'scikit-image=0.12*' \\\n    'sympy=1.0*' \\\n    'cython=0.25*' \\\n    'patsy=0.4*' \\\n    'statsmodels=0.8*' \\\n    'cloudpickle=0.2*' \\\n    'dill=0.2*' \\\n    'numba=0.31*' \\\n    'bokeh=0.12*' \\\n    'sqlalchemy=1.1*' \\\n    'hdf5=1.8.17' \\\n    'h5py=2.6*' \\\n    'vincent=0.4.*' \\\n    'beautifulsoup4=4.5.*' \\\n    'xlrd'  && \\\n    conda remove --quiet --yes --force qt pyqt && \\\n    conda clean -tipsy\n\n# Activate ipywidgets extension in the environment that runs the notebook server\nRUN jupyter nbextension enable --py widgetsnbextension --sys-prefix\n\n# Import matplotlib the first time to build the font cache.\nENV XDG_CACHE_HOME /home/$NB_USER/.cache/\nRUN MPLBACKEND=Agg python -c \"import matplotlib.pyplot\"\n\nUSER $NB_USER\n\n\n\n## Install TensorFlow for GPU\nRUN conda install --quiet --yes 'tensorflow-gpu=1.0*'\n\n## Install high-level TensorFlow APIs\nRUN pip install --no-cache-dir tflearn==0.3.2\nRUN pip install --no-cache-dir keras==2.0.8\n\n## Install NLP packages\nRUN pip install --no-cache-dir nltk==3.2.4\nRUN pip install --no-cache-dir gensim==2.3.0\n\n# install Reinforcement Learning packages:\nRUN pip install --no-cache-dir gym==0.9.4\n"
}