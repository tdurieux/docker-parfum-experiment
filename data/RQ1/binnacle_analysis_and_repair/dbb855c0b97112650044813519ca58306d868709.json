{
  "startTime": 1674244174957,
  "endTime": 1674244175508,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 135,
        "lineEnd": 135,
        "columnStart": 4,
        "columnEnd": 62
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 128,
        "lineEnd": 128,
        "columnStart": 4,
        "columnEnd": 60
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 66,
        "lineEnd": 66,
        "columnStart": 4,
        "columnEnd": 36
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 38,
        "lineEnd": 38,
        "columnStart": 4,
        "columnEnd": 56
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 54,
        "lineEnd": 54,
        "columnStart": 4,
        "columnEnd": 35
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 64,
        "lineEnd": 64,
        "columnStart": 4,
        "columnEnd": 43
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# Build with: docker build -f docker/Dockerfile .\n\nFROM ubuntu:16.04\n\nMAINTAINER Julia Kodysh <julia326@gmail.com>\n\nRUN echo 'debconf debconf/frontend select Noninteractive' | debconf-set-selections && \\\n    apt-get clean && \\\n    apt-get update && \\\n    apt-get install --no-install-recommends --no-upgrade -y \\\n        ca-certificates \\\n        curl \\\n        gawk \\\n        git \\\n        graphviz \\\n        g++ \\\n        libfreetype6-dev \\\n        libx11-dev \\\n        make \\\n        perl \\\n        pkg-config \\\n        python-tk \\\n        python2.7-dev \\\n        python3.5-dev \\\n        rsync \\\n        sudo \\\n        tar \\\n        tcsh \\\n        unzip \\\n        wget \\\n        xvfb \\\n        zlib1g-dev && \\\n    apt-get clean -y && \\\n    rm -rf /var/lib/apt/lists/*\n\n# install wkhtmltopdf from source, this version comes with patched QT necessary for PDF gen\nRUN cd /tmp && \\\n    wget https://github.com/wkhtmltopdf/wkhtmltopdf/releases/download/0.12.4/wkhtmltox-0.12.4_linux-generic-amd64.tar.xz && \\\n    tar xvfJ wkhtmltox-0.12.4_linux-generic-amd64.tar.xz && \\\n    cd /tmp/wkhtmltox/bin && sudo chown root:root wkhtmltopdf && \\\n    sudo cp /tmp/wkhtmltox/bin/wkhtmltopdf /usr/local/bin/wkhtmltopdf && \\\n    rm -rf /tmp/* && rm wkhtmltox-0.12.4_linux-generic-amd64.tar.xz\n\nRUN useradd --create-home --home-dir /home/user --shell /bin/bash -G sudo user && \\\n    echo '%sudo ALL=(ALL) NOPASSWD:ALL' >> /etc/sudoers\n\nUSER user\nENV HOME=/home/user\nENV SHELL=/bin/bash\nENV USER=user\nWORKDIR /home/user\n\n# Install the Perl vcftools\nRUN cd /tmp && wget https://kent.dl.sourceforge.net/project/vcftools/vcftools_0.1.13.tar.gz && \\\n    tar xvfz vcftools_0.1.13.tar.gz && cd vcftools_0.1.13/ && make && \\\n    sudo cp -r /tmp/vcftools_0.1.13/bin/* /usr/local/bin && \\\n    sudo cp -r /tmp/vcftools_0.1.13/lib/perl5/site_perl/* /usr/local/lib && \\\n    rm -rf /tmp/* && rm vcftools_0.1.13.tar.gz\n\nENV PERL5LIB /usr/local/lib\n\n# Install Strelka\nRUN mkdir $HOME/strelka && \\\n    cd /tmp && wget ftp://strelka:%27%27@ftp.illumina.com/v1-branch/v1.0.14/strelka_workflow-1.0.14.tar.gz && \\\n    tar xvfz strelka_workflow-1.0.14.tar.gz && \\\n    cd strelka_workflow-1.0.14 && \\\n    ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" prefix=$HOME/strelka && \\\n    make && \\\n    chmod -R a+rx ./* && \\\n    make install && \\\n    rm -rf /tmp/* && rm strelka_workflow-1.0.14.tar.gz\n\nENV STRELKA_BIN $HOME/strelka/bin\n\n# Install Miniconda\nRUN wget https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh -O miniconda.sh && \\\n    bash miniconda.sh -b -p $HOME/miniconda\nENV PATH $HOME/miniconda/bin:$PATH\n\nENV PGV_BIN /home/user/miniconda/envs/pgv/bin\nENV JAVA7_BIN /home/user/miniconda/envs/java7/bin\n\n# install a bunch of bfx tools; gatk needs to be this version, latest doesn't work\n# graphviz needed for DAG visualization\n# ucsc-liftover for converting coverage bed files between various alignments\n# java version specific to MuTect\nRUN conda config --add channels r && \\\n    conda config --add channels defaults && \\\n    conda config --add channels conda-forge && \\\n    conda config --add channels bioconda && \\\n    conda create -n pgv \\\n    bedtools \\\n    bwa==0.7.17 \\\n    cython \\\n    fastqc \\\n    gatk==3.7 \\\n    java-jdk==8.0.92 \\\n    picard==2.18.5 \\\n    pip \\\n    sambamba==0.6.6 \\\n    samtools==1.8 \\\n    snakemake \\\n    star==2.6.0c \\\n    vcftools==0.1.15 \\\n    && conda clean --all -y\n\n# most of the tools we're using are in the pgv environment; adding to PATH for convenience\nENV PATH $PGV_BIN:$PATH\n\n# MuTect needs Java 1.7, while GATK and other things need Java 1.8.\n# Dealing with this by setting up a separate Conda environment, specifically for Java 7\nRUN conda create -n java7 java-jdk==7.0.91 && conda clean --all -y\n\n# Set up MuTect 1.1.7\nRUN wget --content-disposition https://software.broadinstitute.org/gatk/download/auth?package=M1 \\\n    && unzip mutect-1.1.7.jar.zip && rm mutect-1.1.7.jar.zip\nENV MUTECT $HOME/mutect-1.1.7.jar\n\n# Set up GATK 3.7; need to link with gatk-register\nRUN wget --content-disposition \"https://software.broadinstitute.org/gatk/download/auth?package=GATK-archive&version=3.7-0-gcfedb67\" \\\n    && tar -xvjf GenomeAnalysisTK-3.7-0-gcfedb67.tar.bz2 \\\n    && rm -rf resources/ GenomeAnalysisTK-3.7-0-gcfedb67.tar.bz2\nRUN $PGV_BIN/gatk-register $HOME/GenomeAnalysisTK.jar\n\n# Copy and install Vaxrank and other python dependencies; they won't change very often,\n# so we want to do this before any further COPY commands in this Dockerfile.\n# See https://docs.docker.com/develop/develop-images/dockerfile_best-practices/#add-or-copy\nCOPY requirements.txt $HOME\nRUN pip install --no-cache-dir --ignore-installed -r $HOME/requirements.txt\n\n# Vaxrank-required env variables and setup\nENV KERAS_BACKEND tensorflow\nENV PYENSEMBL_CACHE_DIR /reference-genome/pyensembl-cache\nENV VAXRANK_REF_PEPTIDES_DIR /reference-genome/reference-peptides\n# this is needed for Vaxrank reports to be reasonably formatted, otherwise kerning is off\nRUN curl -f https://pastebin.com/raw/AmfYN3er > $HOME/.fonts.conf\n\n# Copy the current directory contents into the container\nCOPY . $HOME\n\n# Strelka setup\nENV STRELKA_CONFIG $HOME/pipeline/strelka_config.txt\n\n# Python scripts setup, for things that are too small/simple to be their own modules\nENV SCRIPTS $HOME/pipeline/scripts\n\n# snakemake logs get written here (hidden dir)\nRUN mkdir -p $HOME/.snakemake && sudo chown -R $USER $HOME/.snakemake\n\nENTRYPOINT [\"python\", \"run_snakemake.py\"]\n"
}