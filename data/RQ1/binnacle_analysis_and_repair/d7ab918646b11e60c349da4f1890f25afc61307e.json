{
  "startTime": 1674243041938,
  "endTime": 1674243042396,
  "originalSmells": [
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 76,
        "lineEnd": 76,
        "columnStart": 5,
        "columnEnd": 30
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 98,
        "lineEnd": 98,
        "columnStart": 6,
        "columnEnd": 17
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 40,
        "lineEnd": 75,
        "columnStart": 22,
        "columnEnd": 12
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# Â© Copyright IBM Corporation 2017, 2019.\n# LICENSE: Apache License, Version 2.0 (http://www.apache.org/licenses/LICENSE-2.0)\n\n############## Dockerfile for Apache Zeppelin version 0.8.1 ###############\n#\n# This Dockerfile builds a basic installation of Apache Zeppelin.\n#\n# Web-based notebook that enables data-driven,interactive data analytics and collaborative documents with SQL, Scala and more.\n#\n# To build this image, from the directory containing this Dockerfile\n# (assuming that the file is named Dockerfile):\n# docker build -t <image_name> .\n#\n# To start Apache Zeppelin run the below command:\n# docker run --name <container_name> -p <host_port>:8080 -d <image_name> \n#\n# We can view the Apache Zeppelin UI at http://<zeppelin-host-ip>:<port_number>\n#\n# Reference:\n# http://zeppelin.apache.org/docs/0.8.1/index.html\n#\n#################################################################################\n\n# Base Image\nFROM s390x/ubuntu:16.04\n\n# The author\nMAINTAINER  LoZ Open Source Ecosystem (https://www.ibm.com/developerworks/community/groups/community/lozopensource)\n\nARG ZEPPELIN_VER=0.8.1\n\nENV SOURCE_DIR=/tmp/source MAVEN_OPTS=\"-Xmx2g -XX:MaxPermSize=1024m\" \\\n\tJAVA_HOME=/usr/lib/jvm/java-8-openjdk-s390x \\\n\tPATH=$PATH:$JAVA_HOME/bin \\\n\tQT_QPA_PLATFORM=offscreen \\\n\tLD_LIBRARY_PATH=/usr/local/lib\n\nWORKDIR $SOURCE_DIR\n\n# Install dependencies\nRUN apt-get update && apt-get -y --no-install-recommends install \\\n\t\tautoconf \\\n\t\tautomake \\\n\t\tbuild-essential \\\n\t\tbzip2 \\\n\t\tcurl \\\n\t\tg++ \\\n\t\tgit \\\n     libtool \\\n      make \\\n      maven \\\n\t\topenjdk-8-jdk \\\n\t\topenjdk-8-jdk-headless \\\n\t\tphantomjs \\\n      tar \\\n      unzip \\\n\t\t\t\t\twget \\\n\n# Install python related packages (Optional)\n\t\tpython-dev \\\n\t\tpython-pip \\\n\t\tgfortran \\\n\t\tlibblas-dev \\\n\t\tlibatlas-dev \\\n\t\tliblapack-dev \\\n\t\tlibpng-dev \\\n\t\tlibfreetype6-dev \\\n\t\tlibxft-dev \\\n\t\tpython-tk \\\n\t\tlibxml2-dev \\\n\t\tlibxslt-dev \\\n\t\tzlib1g-dev \\\n\t\tr-base \\\n\t\tr-base-dev \\\n\t\tlibcurl4-gnutls-dev \\\n\t\tlibssl-dev \\\n\t&& pip install --no-cache-dir --upgrade pip \\\n\t&& python -m pip install numpy \\\n\t&& python -m pip install matplotlib \\\n\n# Install R related packages (Optional)\n\t&& R -e \"install.packages('knitr', repos='http://cran.us.r-project.org')\" \\\n\t&& R -e \"install.packages('ggplot2', repos='http://cran.us.r-project.org')\" \\\n\t&& R -e \"install.packages('googleVis', repos='http://cran.us.r-project.org')\" \\\n\t&& R -e \"install.packages('data.table', repos='http://cran.us.r-project.org')\" \\\n\t&& R -e \"install.packages('devtools', repos='http://cran.us.r-project.org')\" \\\n\t&& R -e \"install.packages('Rcpp', repos='http://cran.us.r-project.org')\" \\\n\t&& Rscript -e \"library('devtools'); library('Rcpp'); install_github('ramnathv/rCharts')\" \\\n\n# Download and install Protobuf 3.3.0\n\t&& cd $SOURCE_DIR \\\n\t&& git clone git://github.com/google/protobuf.git \\\n  && cd protobuf \\\n\t&& git checkout v3.3.0 \\\n\t&& git config --global url.\"git://github.com/\".insteadOf \"https://github.com/\" \\\n  && git submodule update --init --recursive \\\n\n  && ./autogen.sh \\\n  && ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" \\\n  && make && make install && ldconfig \\\n\n# Download and install gRPC-Java 1.4.0\t\n\t&& cd $SOURCE_DIR \\\n\t&& git clone https://github.com/grpc/grpc-java.git \\\n\t&& cd grpc-java \\\n\t&& git checkout v1.4.0 \\\n\t&& sed -i '52i gcc(Gcc) { target(\"s390_64\") }' compiler/build.gradle \\\n\t&& sed -i '67i s390_64 { architecture \"s390_64\" }' compiler/build.gradle \\\n\t&& sed -i '72d' compiler/build.gradle \\\n\t&& sed -i \"72i if (arch in ['x86_32', 'x86_64', 'ppcle_64', 's390_64']) {\" compiler/build.gradle \\\n\t&& ./gradlew install -Pprotoc=/usr/local/bin/protoc \\\n\n# Download zeppelin source\n\t&& cd $SOURCE_DIR \\\n\t&& git clone https://github.com/apache/zeppelin.git \\\n\t&& cd zeppelin \\\n\t&& git checkout v${ZEPPELIN_VER} \\\n\n# Edit $SOURCE_DIR/zeppelin/zeppelin-web/.bowerrc and pom.xml\n  && sed -i 's/\"json\": \"bower.json\"/\"json\": \"bower.json\",/g' zeppelin-web/.bowerrc \\\n   && sed -i '4i \"allow_root\": true' zeppelin-web/.bowerrc \\\n  && sed -i -e 's/install --no-lockfile/install --no-lockfile --unsafe-perm/g' zeppelin-web/pom.xml \\\n\n# Edit $SOURCE_DIR/zeppelin/pom.xml\n    && sed -i '98d' pom.xml \\\n    && sed -i '97a <plugin.frontend.version>1.5</plugin.frontend.version>' pom.xml \\\n\n# Build Apache Zeppelin\t\n  && mvn install:install-file -DgroupId=com.google.protobuf -DartifactId=protoc -Dversion=3.3.0 -Dclassifier=linux-s390_64 -Dpackaging=exe -Dfile=$SOURCE_DIR/protobuf/src/.libs/protoc \\\n  && mvn install:install-file -DgroupId=io.grpc -DartifactId=protoc-gen-grpc-java -Dversion=1.4.0 -Dclassifier=linux-s390_64 -Dpackaging=exe -Dfile=$SOURCE_DIR/grpc-java/compiler/build/exe/java_plugin/protoc-gen-grpc-java \\\n\t&& mvn clean package -DskipTests \\\n\n# Copy files\n\t&& mkdir -p /zeppelin \\\n\t&& cp -R README.md NOTICE LICENSE bin/ conf/ dev/ docs/ interpreter/ licenses/ notebook/ \\\n\t\t\tzeppelin-interpreter/ zeppelin-server/ zeppelin-web/ zeppelin-zengine/ /zeppelin/ \\\n\t&& chmod 755 /zeppelin/bin/* \\\n\n# Clean up cache data and remove dependencies which are not required\n\t&& rm -rf $HOME/.cache $HOME/.m2 $SOURCE_DIR \\\n\t&& apt-get -y remove \\\n\t\tautoconf \\\n\t\tautomake \\\n\t\tbzip2 \\\n\t\tcurl \\\n\t\tg++ \\\n\t\tgit \\\n\t    libtool \\\n\t    make \\\n\t    maven \\\n \t    unzip \\\n\t    wget \\\n\t&& apt-get autoremove -y \\\n\t&& apt autoremove -y \\\n\t&& apt-get clean \\\n\t&& rm -rf /var/lib/apt/lists/*\n\nEXPOSE 8080\n\nWORKDIR /zeppelin\n\nCMD [\"bin/zeppelin.sh\", \"start\"]\n\n# End of Dockerfile\n"
}