{
  "startTime": 1674235646605,
  "endTime": 1674235646797,
  "originalSmells": [
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 19,
        "lineEnd": 19,
        "columnStart": 5,
        "columnEnd": 30
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 18,
        "lineEnd": 18,
        "columnStart": 5,
        "columnEnd": 30
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 31,
        "lineEnd": 31,
        "columnStart": 4,
        "columnEnd": 40
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 32,
        "lineEnd": 32,
        "columnStart": 5,
        "columnEnd": 35
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM alpine:latest\n\n# Install Python\nRUN echo \"http://dl-cdn.alpinelinux.org/alpine/edge/community\" >> /etc/apk/repositories \\\n  && apk add --update \\\n              bash \\\n              build-base \\\n              git \\\n              libffi-dev \\\n              musl \\\n              nodejs \\\n              nodejs-npm \\\n              postgresql-dev \\\n              py2-pip \\\n              python \\\n              python-dev \\\n              redis \\\n              runit \\\n  && pip install --no-cache-dir --upgrade pip \\\n  && npm install -g bower less \\\n  && rm /var/cache/apk/* && npm cache clean --force;\n\n# Make some useful symlinks that are expected to exist\nRUN cd /usr/bin \\\n  && ln -sf easy_install-2.7 easy_install \\\n  && ln -sf python2.7 python \\\n  && ln -sf python2.7-config python-config \\\n  && ln -sf pip2.7 pip\n\n# Copy and install our requirements first, so they can be cached\nCOPY ./requirements/prod.txt /tmp/requirements.txt\nRUN pip install --no-cache-dir -r /tmp/requirements.txt \\\n  && pip install --no-cache-dir 'gunicorn==19.6.0'\n\n# Add our application to the container\nCOPY . /src/\n\n# Create service directories to allow running services, along with the Doorman\n# user/group.\nRUN rm -rf /etc/service \\\n  && mv /src/docker/service /etc/ \\\n  && mv /src/docker/redis.conf /etc/ \\\n  && if [ ! -f /src/settings.cfg ]; then \\\n       mv /src/docker/default-settings.cfg /src/settings.cfg; \\\n     fi \\\n  && addgroup doorman \\\n  && adduser -G doorman -D doorman\n\n# Install vendor libraries, pre-build static assets, and create default log\n# file directory.\nRUN cd /src/ \\\n  && bower install --allow-root \\\n  && python manage.py assets build \\\n  && mkdir /var/log/doorman/ \\\n  && chown doorman:doorman -R . \\\n  && chown doorman:doorman /var/log/doorman/\n\nCMD [\"runsvdir\", \"/etc/service\"]\n"
}