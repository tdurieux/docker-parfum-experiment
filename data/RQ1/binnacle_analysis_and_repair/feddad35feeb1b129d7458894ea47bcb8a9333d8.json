{
  "startTime": 1674236243627,
  "endTime": 1674236243700,
  "originalSmells": [
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 21,
        "lineEnd": 21,
        "columnStart": 4,
        "columnEnd": 26
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 20,
        "lineEnd": 20,
        "columnStart": 4,
        "columnEnd": 64
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 20,
        "lineEnd": 20,
        "columnStart": 4,
        "columnEnd": 64
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 20,
        "lineEnd": 20,
        "columnStart": 4,
        "columnEnd": 64
      }
    }
  ],
  "repairedSmells": [
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 20,
        "lineEnd": 20,
        "columnStart": 4,
        "columnEnd": 88
      }
    }
  ],
  "repairedDockerfile": "# Example dockerfile for a Two Scoops-style Django project\n# https://github.com/atbaker/docker-tutorial | https://github.com/twoscoops/django-twoscoops-project\n\n# All Dockerfiles start from a base image. In this case, Ubuntu 12.04 LTS\nFROM ubuntu:precise\n\n# Add yourself as maintainer\nMAINTAINER\n\n# The ENV command applies environment variables to the rest of the build steps.\n# Add these environment variables to the build:\n#   PYTHONPATH=$PYTHONPATH:/var/www/django/sd_sample_project\n#   DJANGO_SETTINGS_MODULE=sd_sample_project.settings.production\n#   SECRET_KEY no-so-secret # Fix for your own site!\n\n# Add a command to copy the sd_sample_project to the /var/www/django directory\n# in the image\n# (your command here)\n\n# Install pip and requirements\nRUN DEBIAN_FRONTEND=noninteractive apt-get --no-install-recommends install -y python-pip && rm -rf /var/lib/apt/lists/*;\nRUN pip install --no-cache-dir virtualenv\nRUN virtualenv /var/www/venv\nRUN /var/www/venv/bin/pip install -r /var/www/django/requirements/production.txt\n\n# Syncdb (a sqlite3 database for simplicity)\nRUN /var/www/venv/bin/django-admin.py syncdb --migrate --noinput\nRUN /var/www/venv/bin/django-admin.py collectstatic --noinput\n\n# Create gunicorn log files\nRUN mkdir /var/log/gunicorn\nRUN touch /var/log/gunicorn/access.log\nRUN touch /var/log/gunicorn/error.log\n\n# Clean up APT when done\nRUN apt-get clean && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*\n\n# Add a command to expose port 80 to the host container\n# (your command here)\n\n# Add a CMD statement to start the gunicorn server. The basic command is:\n# /var/www/venv/bin/gunicorn sd_sample_project.wsgi:application\n# (your command here)\n\n# HINT: You also need to use the --bind option to tell gunicorn to respond to\n# requests from all hosts, since all incoming requests through docker will\n# appear to be from another machine.\n"
}