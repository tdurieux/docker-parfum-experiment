{
  "startTime": 1674235010600,
  "endTime": 1674235010818,
  "originalSmells": [
    {
      "rule": "yumInstallRmVarCacheYum",
      "position": {
        "lineStart": 7,
        "lineEnd": 7,
        "columnStart": 4,
        "columnEnd": 47
      }
    },
    {
      "rule": "yumInstallRmVarCacheYum",
      "position": {
        "lineStart": 9,
        "lineEnd": 9,
        "columnStart": 4,
        "columnEnd": 78
      }
    },
    {
      "rule": "yumInstallRmVarCacheYum",
      "position": {
        "lineStart": 10,
        "lineEnd": 10,
        "columnStart": 4,
        "columnEnd": 137
      }
    },
    {
      "rule": "yumInstallRmVarCacheYum",
      "position": {
        "lineStart": 11,
        "lineEnd": 11,
        "columnStart": 4,
        "columnEnd": 86
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM centos:centos7\n\n# Install any required system packages. We need the Apache httpd web\n# server in this instance, plus the 'rsync' package so we can copy\n# files into the running container if necessary.\n\nRUN rpmkeys --import file:///etc/pki/rpm-gpg/RPM-GPG-KEY-CentOS-7 && \\\n    yum install -y centos-release-scl scl-utils && \\\n    PACKAGES=\"httpd24 httpd24-httpd-devel httpd24-mod_auth_kerb httpd24-mod_ldap httpd24-mod_session rsync\" && \\\n    yum install -y --setopt=tsflags=nodocs --enablerepo=centosplus ${PACKAGES} && \\\n    yum -y install --setopt=tsflags=nodocs --enablerepo=centosplus https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm && \\\n    yum -y install --setopt=tsflags=nodocs --enablerepo=centosplus rubygem-asciidoctor && \\\n    rpm -V ${PACKAGES} && \\\n    yum clean all -y && rm -rf /var/cache/yum\n\n# Create a non root account called 'default' to be the owner of all the\n# files which the Apache httpd server will be hosting. This account\n# needs to be in group 'root' (gid=0) as that is the group that the\n# Apache httpd server would use if the container is later run with a\n# unique user ID not present in the host account database, using the\n# command 'docker run -u'.\n\nENV HOME=/opt/app-root\n\nRUN mkdir -p ${HOME} && \\\n    useradd -u 1001 -r -g 0 -d ${HOME} -s /sbin/nologin \\\n            -c \"Default Application User\" default\n\n# Modify the default Apache configuration to listen on a non privileged\n# port of 8080 and log everything to stdout/stderr. Also include our own\n# configuration file so we can override other configuration.\n\nRUN mkdir -p ${HOME}/htdocs && \\\n    sed -ri -e 's/^Listen 80$/Listen 8080/' \\\n            -e 's%\"logs/access_log\"%\"/proc/self/fd/1\"%' \\\n            -e 's%\"logs/error_log\"%\"/proc/self/fd/2\"%' \\\n            /opt/rh/httpd24/root/etc/httpd/conf/httpd.conf && \\\n    echo \"Include ${HOME}/httpd.conf\" >> /opt/rh/httpd24/root/etc/httpd/conf/httpd.conf\n\nCOPY openshift/httpd.conf ${HOME}/httpd.conf\n\nEXPOSE 8080\n\n# Copy into place S2I builder scripts, the run script, and label the Docker\n# image so that the 's2i' program knows where to find them.\n\nCOPY openshift/s2i ${HOME}/s2i\nCOPY openshift/run ${HOME}/run\n\nLABEL io.k8s.description=\"S2I builder for hosting files with Apache HTTPD server\" \\\n      io.k8s.display-name=\"Apache HTTPD Server\" \\\n      io.openshift.expose-services=\"8080:http\" \\\n      io.openshift.tags=\"builder,httpd\" \\\n      io.openshift.s2i.scripts-url=\"image://${HOME}/s2i/bin\"\n\n# Fixup all the directories under the account so they are group writable\n# to the 'root' group (gid=0) so they can be updated if necessary, such\n# as would occur if using 'oc rsync' to copy files into a container.\n\nADD images /opt/app-root/htdocs/images\nADD *.adoc /opt/app-root/htdocs/\nRUN for i in $(ls -1 /opt/app-root/htdocs/*_*.adoc | grep -v 0_toc); do sed -i 's/0_toc.adoc/index.html/g' $i; done\nRUN sed -e 's/\\.adoc/\\.html/g' /opt/app-root/htdocs/0_toc.adoc > /opt/app-root/htdocs/index.adoc\nRUN asciidoctor /opt/app-root/htdocs/*.adoc -D /opt/app-root/htdocs/\nRUN rm -rf /opt/app-root/htdocs/*.adoc\n\nRUN chown -R 1001:0 /opt/app-root && \\\n    find ${HOME} -type d -exec chmod g+ws {} \\;\n\n# Ensure container runs as non root account from its home directory.\n\nWORKDIR ${HOME}\n\nUSER 1001\n\n# Set the Apache httpd server to be run when the container is run.\n\nCMD [ \"/opt/app-root/run\" ]\n"
}