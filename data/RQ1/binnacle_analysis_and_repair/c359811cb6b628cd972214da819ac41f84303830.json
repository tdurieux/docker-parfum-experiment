{
  "startTime": 1674234960089,
  "endTime": 1674234960235,
  "originalSmells": [
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 38,
        "lineEnd": 40,
        "columnStart": 4,
        "columnEnd": 67
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 33,
        "lineEnd": 35,
        "columnStart": 4,
        "columnEnd": 26
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 38,
        "lineEnd": 40,
        "columnStart": 4,
        "columnEnd": 67
      }
    }
  ],
  "repairedSmells": [
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 38,
        "lineEnd": 40,
        "columnStart": 4,
        "columnEnd": 67
      }
    }
  ],
  "repairedDockerfile": "FROM node:10.16.0-slim@sha256:9afe43a8f8944377272e5f000695cc350db8e723639a4a44cf6e5c96c8a0ac9f as frontend\n\n# these build args are turned into env vars\n# and used in bin/build_frontend.sh\nARG FRONTEND_SENTRY_PUBLIC_DSN=UNSET_DSN\nENV FRONTEND_SENTRY_PUBLIC_DSN=${FRONTEND_SENTRY_PUBLIC_DSN}\nARG CI=false\nENV CI=${CI}\n\nRUN echo \"Running in CI: ${CI}\"\n\nCOPY . /app\nWORKDIR /app\nRUN bin/build_frontend.sh\n\nFROM python:3.6-slim@sha256:bab4801d3ea2b1b5a796e96c37654e6e8c2619d0ddbdc1314bb03e09361cc117\n\nENV PYTHONUNBUFFERED=1 \\\n    PYTHONPATH=/app/ \\\n    DJANGO_CONFIGURATION=Prod \\\n    PORT=8000\n\nEXPOSE $PORT\n\n# add a non-privileged user for installing and running the application\n# don't use --create-home option to prevent populating with skeleton files\nRUN mkdir /app && \\\n    chown 10001:10001 /app && \\\n    groupadd --gid 10001 app && \\\n    useradd --no-create-home --uid 10001 --gid 10001 --home-dir /app app\n\n# install a few essentials and clean apt caches afterwards\nRUN apt-get update && \\\n    apt-get install -y --no-install-recommends \\\n    apt-transport-https build-essential curl git libpq-dev \\\n    gettext libffi-dev jed && rm -rf /var/lib/apt/lists/*;\n\n# Install dump_syms\nRUN DEBIAN_FRONTEND=noninteractive \\\n    apt-get install -y --no-install-recommends \\\n    gyp ninja-build binutils-gold gcc-6 g++-6 pkg-config cabextract && rm -rf /var/lib/apt/lists/*;\nCOPY ./docker/build_dump_syms.sh /tmp\nRUN /tmp/build_dump_syms.sh\n\n# Clean up apt\nRUN apt-get autoremove -y && \\\n    apt-get clean && \\\n    rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*\n\n# Install Python dependencies\nCOPY requirements.txt /tmp/\nCOPY requirements-constraints.txt /tmp/\n# Switch to /tmp to install dependencies outside home dir\nWORKDIR /tmp\nRUN pip install --no-cache-dir -r requirements.txt\n\nCOPY . /app\n\n# Switch back to home directory\nWORKDIR /app\n\n# Copy static assets\nCOPY --from=frontend /app/frontend/build /app/frontend/build\n\nRUN chown -R 10001:10001 /app\n\nUSER 10001\n\n# Using /bin/bash as the entrypoint works around some volume mount issues on Windows\n# where volume-mounted files do not have execute bits set.\n# https://github.com/docker/compose/issues/2301#issuecomment-154450785 has additional background.\nENTRYPOINT [\"/bin/bash\", \"/app/bin/run.sh\"]\n\nCMD [\"web\"]\n"
}