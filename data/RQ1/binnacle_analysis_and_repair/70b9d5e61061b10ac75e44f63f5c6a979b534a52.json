{
  "startTime": 1674240000021,
  "endTime": 1674240000110,
  "originalSmells": [
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 13,
        "lineEnd": 16,
        "columnStart": 4,
        "columnEnd": 11
      }
    },
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 26,
        "lineEnd": 26,
        "columnStart": 20,
        "columnEnd": 31
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 9,
        "lineEnd": 9,
        "columnStart": 5,
        "columnEnd": 27
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM node:0.12.0\n\n## set some ENV vars\nENV HOME /root\nENV TERM dumb\nENV PROJECT_ROOT /opt/app\n\n# install some apt packages (man)\nRUN apt-get update \\\n  && apt-get install --no-install-recommends -y man \\\n  && rm -rf /var/lib/apt/lists/*\n\n# install some global node modules\nRUN npm install -g \\\n  nodemon@1.3.7 \\\n  node-inspector@0.12.1 \\\n  lab@5.4.0 && npm cache clean --force;\n\n# use changes to dependency files to force Docker not to use the cache\n# when we change our application's dependencies:\nRUN mkdir -p /tmp/app\n\n# add our dependency files to a /tmp location\nADD package.json /tmp/app/package.json\n\n# install dependencies\nRUN cd /tmp/app/ && npm install && npm cache clean --force;\n\n# create app log folder\nRUN mkdir -p /var/log/zg-site\n\n# forward request and error logs to docker log collector\nRUN ln -sf /dev/stdout /var/log/zg-site/zg-site.log\n\n# add our app files\nRUN mkdir -p $PROJECT_ROOT\nADD . $PROJECT_ROOT\nWORKDIR $PROJECT_ROOT\n\n## move our node_modules back into app\nRUN cp -a /tmp/app/node_modules $PROJECT_ROOT\n\n## build static assets\nRUN ./bin/build-static.sh\n\n## Expose our app folder as a volume\n# VOLUME $PROJECT_ROOT\n\n## expose app port\nEXPOSE 8003\n\nCMD [\"./bin/start.sh\"]\n"
}