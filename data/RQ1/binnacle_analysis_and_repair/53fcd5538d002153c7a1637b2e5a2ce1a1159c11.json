{
  "startTime": 1674241251582,
  "endTime": 1674241251870,
  "originalSmells": [
    {
      "rule": "gpgUseBatchFlag",
      "position": {
        "lineStart": 33,
        "lineEnd": 33,
        "columnStart": 2,
        "columnEnd": 56
      }
    },
    {
      "rule": "gpgUseBatchFlag",
      "position": {
        "lineStart": 79,
        "lineEnd": 79,
        "columnStart": 2,
        "columnEnd": 72
      }
    },
    {
      "rule": "gpgUseBatchFlag",
      "position": {
        "lineStart": 75,
        "lineEnd": 75,
        "columnStart": 2,
        "columnEnd": 57
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 97,
        "lineEnd": 97,
        "columnStart": 23,
        "columnEnd": 135
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM gcr.io/google-appengine/debian9:latest\n\n# add our user and group first to make sure their IDs get assigned consistently, regardless of whatever dependencies get added\nRUN groupadd -r mysql && useradd -r -g mysql mysql\n\n# add gosu for easy step-down from root\nENV GOSU_VERSION 1.10\nENV GOSU_GPG B42F6819007F00F88E364FD4036A9C25BF357DD4\nRUN set -x \\\n  && apt-get update && apt-get install -y --no-install-recommends \\\n        ca-certificates \\\n        wget \\\n        numactl \\\n        gnupg \\\n        dirmngr \\\n  && rm -rf /var/lib/apt/lists/* \\\n  && wget -O /usr/local/bin/gosu \"https://github.com/tianon/gosu/releases/download/$GOSU_VERSION/gosu-$(dpkg --print-architecture)\" \\\n  && wget -O /usr/local/bin/gosu.asc \"https://github.com/tianon/gosu/releases/download/$GOSU_VERSION/gosu-$(dpkg --print-architecture).asc\" \\\n# copy source /usr/local/src OSS compliance\n  && wget -O /usr/local/src/gosu.tar.gz \"https://github.com/tianon/gosu/archive/$GOSU_VERSION.tar.gz\" \\\n# extract gosu binary and check signature\n  && export GNUPGHOME=\"$(mktemp -d)\" \\\n  && found='' && \\\n\tfor server in \\\n\t\tpool.sks-keyservers.net \\\n\t\tna.pool.sks-keyservers.net \\\n\t\teu.pool.sks-keyservers.net \\\n\t\toc.pool.sks-keyservers.net \\\n\t\tha.pool.sks-keyservers.net \\\n\t\thkp://p80.pool.sks-keyservers.net:80 \\\n\t\thkp://keyserver.ubuntu.com:80 \\\n\t\tpgp.mit.edu; \\\n\tdo \\\n\t\tgpg --batch --no-tty --keyserver $server --recv-keys $GOSU_GPG \\\n\t\t\t&& found=yes && break; \\\n\tdone; \\\n\ttest -n \"$found\" \\\n  && gpg --no-tty --batch --verify /usr/local/bin/gosu.asc /usr/local/bin/gosu \\\n  && rm -rf \"$GNUPGHOME\" /usr/local/bin/gosu.asc \\\n  && chmod +x /usr/local/bin/gosu \\\n  && gosu nobody true \\\n  && apt-get purge -y --auto-remove ca-certificates wget\n\nRUN mkdir /docker-entrypoint-initdb.d\n\nRUN apt-get update && apt-get install -y --no-install-recommends \\\n# for MYSQL_RANDOM_ROOT_PASSWORD\n    pwgen \\\n# for mysql_ssl_rsa_setup\n    openssl \\\n# FATAL ERROR: please install the following Perl modules before executing /usr/local/mysql/scripts/mysql_install_db:\n# File::Basename\n# File::Copy\n# Sys::Hostname\n# Data::Dumper\n    perl \\\n  && rm -rf /var/lib/apt/lists/*\n\n\nENV MYSQL_GPG A4A9406876FCBD3C456770C88C718D3B5072E1F5\nRUN set -ex; \\\n# gpg: key 5072E1F5: public key \"MySQL Release Engineering <mysql-build@oss.oracle.com>\" imported\n  key='A4A9406876FCBD3C456770C88C718D3B5072E1F5'; \\\n  export GNUPGHOME=\"$(mktemp -d)\"; \\\n  found='' && \\\n\tfor server in \\\n\t\tpool.sks-keyservers.net \\\n\t\tna.pool.sks-keyservers.net \\\n\t\teu.pool.sks-keyservers.net \\\n\t\toc.pool.sks-keyservers.net \\\n\t\tha.pool.sks-keyservers.net \\\n\t\thkp://p80.pool.sks-keyservers.net:80 \\\n\t\thkp://keyserver.ubuntu.com:80 \\\n\t\tpgp.mit.edu; \\\n\tdo \\\n\t\tgpg --batch --no-tty --keyserver $server --recv-keys $MYSQL_GPG \\\n\t\t\t&& found=yes && break; \\\n\tdone; \\\n\ttest -n \"$found\"; \\\n  gpg --batch --no-tty --export \"$MYSQL_GPG\" > /etc/apt/trusted.gpg.d/mysql.gpg; \\\n  rm -rf \"$GNUPGHOME\"; \\\n  apt-key list > /dev/null\n\nENV MYSQL_MAJOR 8.0\nENV MYSQL_VERSION 8.0.16-2debian9\n\nRUN DEBIAN_RELASE=$(cat /etc/*-release | grep PRETTY_NAME | sed  's/.*(//;s/).*//') \\\n    && echo \"deb http://repo.mysql.com/apt/debian/ $DEBIAN_RELASE mysql-${MYSQL_MAJOR}\" > /etc/apt/sources.list.d/mysql.list\n\n# the \"/var/lib/mysql\" stuff here is because the mysql-server postinst doesn't have an explicit way to disable the mysql_install_db codepath besides having a database already \"configured\" (ie, stuff in /var/lib/mysql/mysql)\n# also, we set debconf keys to make APT a little quieter\nRUN { \\\n    echo mysql-community-server mysql-community-server/data-dir select ''; \\\n    echo mysql-community-server mysql-community-server/root-pass password ''; \\\n    echo mysql-community-server mysql-community-server/re-root-pass password ''; \\\n    echo mysql-community-server mysql-community-server/remove-test-db select false; \\\n  } | debconf-set-selections \\\n  && apt-get update && apt-get install --no-install-recommends -y mysql-community-client-core=\"${MYSQL_VERSION}\" mysql-community-server-core=\"${MYSQL_VERSION}\" && rm -rf /var/lib/apt/lists/* \\\n  && rm -rf /var/lib/mysql && mkdir -p /var/lib/mysql /var/run/mysqld \\\n  && chown -R mysql:mysql /var/lib/mysql /var/run/mysqld \\\n# ensure that /var/run/mysqld (used for socket and lock files) is writable regardless of the UID our mysqld instance ends up having at runtime\n  && chmod 777 /var/run/mysqld\n\nVOLUME /var/lib/mysql\n\n# Config files\nCOPY config/ /etc/mysql/\n\nCOPY docker-entrypoint.sh /usr/local/bin/\nRUN ln -s usr/local/bin/docker-entrypoint.sh /entrypoint.sh  # for backwards compatibility\nENTRYPOINT [\"docker-entrypoint.sh\"]\n\nEXPOSE 3306\nCMD [\"mysqld\"]\n"
}