{
  "startTime": 1674250425318,
  "endTime": 1674250425617,
  "originalSmells": [
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 48,
        "lineEnd": 48,
        "columnStart": 8,
        "columnEnd": 33
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 49,
        "lineEnd": 49,
        "columnStart": 8,
        "columnEnd": 24
      }
    },
    {
      "rule": "yumInstallRmVarCacheYum",
      "position": {
        "lineStart": 8,
        "lineEnd": 8,
        "columnStart": 4,
        "columnEnd": 33
      }
    },
    {
      "rule": "yumInstallRmVarCacheYum",
      "position": {
        "lineStart": 13,
        "lineEnd": 13,
        "columnStart": 1,
        "columnEnd": 30
      }
    },
    {
      "rule": "yumInstallRmVarCacheYum",
      "position": {
        "lineStart": 17,
        "lineEnd": 17,
        "columnStart": 1,
        "columnEnd": 38
      }
    },
    {
      "rule": "yumInstallRmVarCacheYum",
      "position": {
        "lineStart": 45,
        "lineEnd": 45,
        "columnStart": 1,
        "columnEnd": 73
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# Dockerfile to build mxnet on Rhel_7.4 (CPU)\n\nFROM rhel_ppc64le:7.4\n\n# Building MXNet from source is a 2 step process.\n   # 1.Build the MXNet core shared library, libmxnet.so, from the C++ sources.\n   # 2.Build the language specific bindings. Example - Python bindings, Scala bindings.\n\nRUN yum install -y yum-plugin-ovl && \\\n\tyum update -y && \\\n\t# 1. ------------ Build the MXNet core shared library ------------------ \n        # libraries for building mxnet c++ core on ubuntu\n\tyum groupinstall 'Development Tools' -y && \\\n\tyum install -y wget git cmake && \\\n\twget https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm && \\\n\trpm -ivh epel-release-latest-7.noarch.rpm && \\\n\tyum update -y && \\\n\tyum install -y openblas-devel.ppc64le && \\\n\tln -s /usr/include/openblas/* /usr/include/  \\\n\t&& \\\n\twget https://github.com/opencv/opencv/archive/3.3.0.zip && \\\n\tunzip 3.3.0.zip && \\\n\tcd opencv-3.3.0 && \\\n\tmkdir build && \\\n\tcd build && \\\n\tcmake -D CMAKE_BUILD_TYPE=Release -D CMAKE_INSTALL_PREFIX=/usr/local .. && \\\n\tmake && \\\n\tmake install && \\\n\texport PKG_CONFIG_PATH=/usr/local/lib/pkgconfig && \\\n\ttouch /etc/ld.so.conf.d/opencv.conf && \\\n\techo \"/usr/local/lib/\" | tee /etc/ld.so.conf.d/opencv.conf && \\\n\tldconfig -v \\\n\t&& \\\n\tcd / && \\\n\t# Download MXNet sources and build MXNet core shared library\n        git clone --recursive https://github.com/apache/incubator-mxnet.git mxnet && \\\n        cd mxnet && \\\n        git checkout 1.0.0 && \\\n        git submodule update --recursive && \\\n        make -j $(nproc) USE_OPENCV=1 USE_BLAS=openblas USE_PROFILER=1 && \\\n        rm -rf build \\\n        && \\\n\t# 2. -------------- Build the MXNet Python binding ------------------\n        # install libraries for mxnet's python package on ubuntu\n        yum update -y && \\\n\tyum install -y python-devel.ppc64le  python-setuptools  python-pip numpy && \\\n\t# Install the MXNet Python binding.\n        cd python && \\\n        pip install --no-cache-dir --upgrade pip && \\\n        pip install --no-cache-dir -e . && \\\n\tyum remove -y  'Development Tools' git cmake wget yum-plugin-ovl && \\\n\tyum autoremove -y && \\\n\tyum clean all && \\\n\trm -rf /epel-release-latest-7.noarch.rpm /3.3.0.zip /opencv-3.3.0 && rm -rf /var/cache/yum\n\nENV PYTHONPATH=/mxnet/python\nCMD  bash\n\n\n# Install Graphviz. (Optional, needed for graph visualization using mxnet.viz package).\n  # yum install -y graphviz\n  # pip install graphviz\n\n# ------------------ Running the unit tests (run the following from MXNet root directory)-------------------\n # pip install pytest==3.0.6 nose numpy==1.11.0 scipy pytest-xdist\n # yum install -y scipy\n # python -m pytest -n1 -v tests/python/unittest\n # python -m pytest -n1 -v tests/python/train\n\n# On RHEL following 5 tests are failing on both the platforms (ppc64le and X86),we can ignore these failures\n# 1.tests/python/unittest/test_operator.py::test_laop,\n# 2.tests/python/unittest/test_operator.py::test_laop_2,\n# 3.tests/python/unittest/test_operator.py::test_laop_3, and\n# 4.tests/python/unittest/test_operator.py::test_laop_4\n# 5.tests/python/unittest/test_ndarray.py::test_ndarray_indexing \n"
}