{
  "startTime": 1674243417381,
  "endTime": 1674243417421,
  "originalSmells": [
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 17,
        "lineEnd": 17,
        "columnStart": 4,
        "columnEnd": 22
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM python:3.7-alpine AS base\n\nFROM base as builder\n\nENV PIP_DISABLE_PIP_VERSION_CHECK on\nENV PYTHONDONTWRITEBYTECODE 1\nENV PYTHONUNBUFFERED 1\n\nRUN apk update && \\\n    apk add --no-cache build-base musl-dev python3-dev\n\nRUN python -m venv /opt/venv\n# Make sure we use the virtualenv:\nENV PATH=\"/opt/venv/bin:$PATH\"\n\nCOPY poetry.lock pyproject.toml ./\n\nRUN pip install --no-cache-dir poetry && \\\n    poetry config settings.virtualenvs.create false && \\\n    poetry install --no-dev --no-interaction\n\n# The `built-image` stage is the base for all remaining images\n# Pulls all of the built dependencies from the builder stage\nFROM base as built-image\nENV PIP_DISABLE_PIP_VERSION_CHECK on\nENV PYTHONDONTWRITEBYTECODE 1\nENV PYTHONUNBUFFERED 1\n\n# copy installed deps from builder image\nCOPY --from=builder /opt/venv /opt/venv\n\n# Make sure we use the virtualenv\nENV PATH=\"/opt/venv/bin:$PATH\"\n\n# The `app` stage is used as the base for images that don't\n# need the development dependencies\nFROM built-image as app\n\nCOPY . /src\nWORKDIR /src\n\n# The `Prod` stage creates an image that will run the application using a\n# production webserver and the `environments/production.py` configuration\nFROM app As Prod\nENTRYPOINT [\"python3\", \"-m\", \"pybot\"]\n"
}