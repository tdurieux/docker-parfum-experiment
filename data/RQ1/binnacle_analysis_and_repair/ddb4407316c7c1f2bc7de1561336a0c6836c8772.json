{
  "startTime": 1674248916530,
  "endTime": 1674248916768,
  "originalSmells": [
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 62,
        "lineEnd": 75,
        "columnStart": 4,
        "columnEnd": 29
      }
    },
    {
      "rule": "apkAddUseNoCache",
      "position": {
        "lineStart": 27,
        "lineEnd": 57,
        "columnStart": 18,
        "columnEnd": 14
      }
    },
    {
      "rule": "apkAddUseNoCache",
      "position": {
        "lineStart": 81,
        "lineEnd": 106,
        "columnStart": 4,
        "columnEnd": 27
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# Usage of Docker image.\n#\n# While building:\n# --build-arg DISK_IMAGE=<sdimg>\n#       image to add to the Docker image\n# --build-arg BOOTLOADER=<u-boot.elf>\n#       U-Boot ELF image to add to Docker image.\n#\n# While launching:\n# -v $BUILDDIR:/mnt/build:ro\n#       Use BUILDDIR from a poky build as image input.\n# -v <config-dir>:/mnt/config:ro\n#       Use server.crt and/or artifact-verify-key.pem from config-dir, if it exists.\n# -e SERVER_URL=https://whatever.mender.io\n#       Use SERVER_URL as server address for client.\n# -e TENANT_TOKEN=<token>\n#       Use token as tenant token for client.\n\nFROM alpine:3.6\n\n# Install packages\nRUN apk update && apk upgrade && \\\n    apk add util-linux \\\n            bash e2fsprogs-extra python3 && \\\n    rm -rf /var/cache/apk/*\n\n# Install qemu from source\nRUN apk update && apk add --no-cache --virtual build-dependencies \\\n    alsa-lib-dev \\\n    bison \\\n    curl-dev \\\n    flex \\\n\t\t\tglib-dev \\\n\t\t\tglib-static \\\n\t\t\tgnutls-dev \\\n\t\t\tgtk+3.0-dev \\\n\t\t\tlibaio-dev \\\n\t\t\tlibcap-dev \\\n\t\t\tlibcap-ng-dev \\\n\t\t\tlibjpeg-turbo-dev \\\n\t\t\tlibnfs-dev \\\n\t\t\tlibpng-dev \\\n\t\t\tlibssh2-dev \\\n\t\t\tlibusb-dev \\\n\t\t\tlinux-headers \\\n\t\t\tlzo-dev \\\n\t\t\tncurses-dev \\\n\t\t\tpaxmark \\\n\t\t\tsnappy-dev \\\n\t\t\tspice-dev \\\n\t\t\ttexinfo \\\n\t\t\tusbredir-dev \\\n\t\t\tutil-linux-dev \\\n\t\t\tvde2-dev \\\n\t\t\txfsprogs-dev \\\n\t\t\tzlib-dev \\\n    git \\\n    alpine-sdk \\\n    && \\\n    git clone --progress -b qemu-system-reset-race-fix git://github.com/mendersoftware/qemu.git && \\\n    cd qemu && \\\n    git submodule update --init dtc && \\\n    ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --target-list=arm-softmmu \\\n                --disable-werror \\\n                --prefix=/usr \\\n                --localstatedir=/var \\\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t--sysconfdir=/etc \\\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t--libexecdir=/usr/lib/qemu \\\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t--disable-glusterfs \\\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t--disable-debug-info \\\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t--disable-bsd-user \\\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t--disable-werror \\\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t--disable-sdl \\\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t--disable-xen \\\n                --disable-attr \\\n                --disable-gtk \\\n                && \\\n    make install -j4 V=1 && \\\n    cd .. && \\\n    rm -rf qemu && \\\n    apk del build-dependencies && \\\n    apk add --no-cache so:libaio.so.1 \\\n            so:libasound.so.2 \\\n            so:libbz2.so.1 \\\n            so:libc.musl-x86_64.so.1 \\\n            so:libcurl.so.4 \\\n            so:libepoxy.so.0 \\\n            so:libgbm.so.1 \\\n            so:libgcc_s.so.1 \\\n            so:libglib-2.0.so.0 \\\n            so:libgnutls.so.30 \\\n            so:libjpeg.so.8 \\\n            so:liblzo2.so.2 \\\n            so:libncursesw.so.6 \\\n            so:libnettle.so.6 \\\n            so:libnfs.so.8 \\\n            so:libpixman-1.so.0 \\\n            so:libpng16.so.16 \\\n            so:libsnappy.so.1 \\\n            so:libspice-server.so.1 \\\n            so:libssh2.so.1 \\\n            so:libstdc++.so.6 \\\n            so:libusb-1.0.so.0 \\\n            so:libusbredirparser.so.1 \\\n            so:libvdeplug.so.3 \\\n            so:libz.so.1 \\\n    rm -rf /var/cache/apk/*\n\nRUN echo vexpress-qemu > /machine.txt\n\nARG DISK_IMAGE=scripts/docker/empty-file\nARG BOOTLOADER=scripts/docker/empty-file\n\nCOPY $BOOTLOADER ./u-boot.elf\nCOPY $DISK_IMAGE .\n\nADD scripts/mender-qemu ./\nADD scripts/docker/entrypoint.sh ./\nADD scripts/docker/setup-mender-configuration.py ./\nADD env.txt ./\n\n# Delete images if they are empty. This is to save space if the artifacts are\n# mounted on /mnt/build instead.\nRUN if [ `stat -c %s core-image-full-cmdline-vexpress-qemu.sdimg` -eq 0 ]; then rm -f core-image-full-cmdline-vexpress-qemu.sdimg; fi\nRUN if [ `stat -c %s u-boot.elf` -eq 0 ]; then rm -f u-boot.elf; fi\n\nRUN chmod +x entrypoint.sh mender-qemu\nEXPOSE 8822\nENTRYPOINT [\"./entrypoint.sh\"]\n"
}