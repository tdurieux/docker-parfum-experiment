{
  "startTime": 1674244091958,
  "endTime": 1674244092250,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 36,
        "lineEnd": 36,
        "columnStart": 4,
        "columnEnd": 49
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 59,
        "lineEnd": 59,
        "columnStart": 7,
        "columnEnd": 110
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 46,
        "lineEnd": 46,
        "columnStart": 22,
        "columnEnd": 57
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 46,
        "lineEnd": 46,
        "columnStart": 22,
        "columnEnd": 57
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# Generated by Neurodocker v0.2.0-dev.\n#\n# Thank you for using Neurodocker. If you discover any issues\n# or ways to improve this software, please submit an issue or\n# pull request on our GitHub repository:\n#     https://github.com/kaczmarj/neurodocker\n#\n# Timestamp: 2017-08-15 21:10:19\n\nFROM neurodebian:stretch-non-free\n\nARG DEBIAN_FRONTEND=noninteractive\n\n#----------------------------------------------------------\n# Install common dependencies and create default entrypoint\n#----------------------------------------------------------\nENV LANG=\"C.UTF-8\" \\\n    LC_ALL=\"C\" \\\n    ND_ENTRYPOINT=\"/neurodocker/startup.sh\"\nRUN apt-get update -qq && apt-get install -yq --no-install-recommends  \\\n    \tbzip2 ca-certificates curl unzip \\\n    && apt-get clean \\\n    && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/* \\\n    && chmod 777 /opt && chmod a+s /opt \\\n    && mkdir /neurodocker \\\n    && echo '#!/usr/bin/env bash' >> $ND_ENTRYPOINT \\\n    && echo 'set +x' >> $ND_ENTRYPOINT \\\n    && echo 'if [ -z \"$*\" ]; then /usr/bin/env bash; else $*; fi' >> $ND_ENTRYPOINT \\\n    && chmod -R 777 /neurodocker && chmod a+s /neurodocker\nENTRYPOINT [\"/neurodocker/startup.sh\"]\n\nRUN apt-get update -qq && apt-get install -yq --no-install-recommends tree git-annex-standalone vim emacs-nox nano less ncdu tig git-annex-remote-rclone \\\n    && apt-get clean \\\n    && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*\n\n# User-defined instruction\nRUN curl -f -sL https://deb.nodesource.com/setup_6.x | bash -\n\nRUN apt-get update -qq && apt-get install -yq --no-install-recommends nodejs build-essential \\\n    && apt-get clean \\\n    && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*\n\n# User-defined instruction\nENV LC_ALL=C.UTF-8\n\n# User-defined instruction\nRUN apt-get update && apt-get install --no-install-recommends -yq xvfb mesa-utils && rm -rf /var/lib/apt/lists/*;\n\n# Create new user: neuro\nRUN useradd --no-user-group --create-home --shell /bin/bash neuro\nUSER neuro\n\n#------------------\n# Install Miniconda\n#------------------\nENV CONDA_DIR=/opt/conda \\\n    PATH=/opt/conda/bin:$PATH\nRUN echo \"Downloading Miniconda installer ...\" \\\n    && miniconda_installer=/tmp/miniconda.sh \\\n    && curl -f -sSL -o $miniconda_installer https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh \\\n    && /bin/bash $miniconda_installer -f -b -p $CONDA_DIR \\\n    && rm -f $miniconda_installer \\\n    && conda config --system --prepend channels conda-forge \\\n    && conda config --system --set auto_update_conda false \\\n    && conda config --system --set show_channel_urls true \\\n    && conda update -y --all \\\n    && conda clean -tipsy \\\n    && find /opt/conda -name \".wh*\" -exec rm {} +\n\n#-------------------------\n# Create conda environment\n#-------------------------\nRUN conda create -y -q --name neuro python=3.6 \\\n    \tjupyter jupyterlab pandas matplotlib scikit-learn seaborn altair traitsui apptools configobj reprozip reprounzip vtk \\\n    && conda clean -tipsy \\\n    && /bin/bash -c \"source activate neuro \\\n    \t&& pip install -q --no-cache-dir \\\n    \tnilearn datalad mayavi\" \\\n    && find /opt/conda -name \".wh*\" -exec rm {} +\nENV PATH=/opt/conda/envs/neuro/bin:$PATH\n\n# User-defined instruction\nRUN bash -c \"source activate neuro && pip install --pre --upgrade ipywidgets pythreejs \"\n\n# User-defined instruction\nRUN bash -c \"source activate neuro && pip install  --upgrade https://github.com/maartenbreddels/ipyvolume/archive/23eb91685dfcf200ee82f89ab6f7294f9214db8c.zip && jupyter nbextension install --py --sys-prefix ipyvolume && jupyter nbextension enable --py --sys-prefix ipyvolume \"\n\n# User-defined instruction\nRUN bash -c \"source activate neuro && conda install jupyter_contrib_nbextensions \"\n\n# User-defined instruction\nRUN bash -c \"source activate neuro && pip install --upgrade https://github.com/nipy/nibabel/archive/master.zip \"\n\n# User-defined instruction\nCOPY cifti-data /cifti-data\n\n# User-defined instruction\nUSER root\n\n# User-defined instruction\nRUN chmod -R a+r /cifti-data\n\n# User-defined instruction\nUSER neuro\n\n# User-defined instruction\nRUN bash -c \"source activate neuro && jupyter nbextension enable rubberband/main && jupyter nbextension enable exercise2/main && jupyter nbextension enable spellchecker/main && conda install bokeh scikit-image \"\n\nWORKDIR /home/neuro\n\n"
}