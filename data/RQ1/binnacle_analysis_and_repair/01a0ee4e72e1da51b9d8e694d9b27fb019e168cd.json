{
  "startTime": 1674234182496,
  "endTime": 1674234182607,
  "originalSmells": [
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 10,
        "lineEnd": 12,
        "columnStart": 4,
        "columnEnd": 64
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 10,
        "lineEnd": 12,
        "columnStart": 4,
        "columnEnd": 64
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 10,
        "lineEnd": 12,
        "columnStart": 4,
        "columnEnd": 64
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM tcm1911/wheezy-i386\nMAINTAINER sean.seefried@gmail.com\n\n#\n# I live in Australia so change the mirror to one more appropriate\n# to where you live.\n#\nrun echo \"deb http://ftp.au.debian.org/debian wheezy main\" > /etc/apt/sources.list\nrun echo \"deb-src http://ftp.au.debian.org/debian wheezy main\" >> /etc/apt/sources.list\nRUN apt-get update && apt-get -y --no-install-recommends install build-essential ghc git libncurses5-dev cabal-install \\\n  llvm-3.0 ca-certificates curl file m4 autoconf zlib1g-dev \\\n  libgnutls-dev libxml2-dev libgsasl7-dev pkg-config python c2hs && rm -rf /var/lib/apt/lists/*;\nWORKDIR /root\nENV TERM xterm\n\n# Install automake-1.14\nADD root-scripts/install-automake.sh /root/\nRUN bash -c ./install-automake.sh\n\n# Create a new user 'androidbuilder'\nADD root-scripts/create-androidbuilder-user.sh /root/\nRUN bash -c ./create-androidbuilder-user.sh\n\n# Log-in to the new user\nUSER androidbuilder\n\n# Update cabal and install the latest\nWORKDIR /home/androidbuilder\n\n# Set the working directory\nENV BASE /home/androidbuilder/ghc-build\n\n# FIXME: Move the adding of the patches until later in the Docker build,\n# just before GHC is built\nRUN mkdir -p $BASE/patches\nADD patches/* $BASE/patches/\n\nADD user-scripts/set-env.sh $BASE/\nWORKDIR $BASE\n\n#\n# Update cabal\n#\nADD user-scripts/update-host-cabal.sh $BASE/\nRUN ./update-host-cabal.sh\n\n#\n# These downloads take quite a while and are annoying. I put them here\n# at the beginning to get them out of the way. If something breaks in the\n# build it would suck if you had to rewind to a Docker image BEFORE\n# the downloads had occurred.\n#\nADD user-scripts/download-iconv.sh $BASE/\nRUN ./download-iconv.sh\nADD user-scripts/download-ncurses.sh $BASE/\nRUN ./download-ncurses.sh\nADD user-scripts/download-gmp.sh $BASE/\nRUN ./download-gmp.sh\nADD user-scripts/download-ghc.sh $BASE/\nRUN ./download-ghc.sh\nADD user-scripts/download-ndk.sh $BASE/\nRUN ./download-ndk.sh\n\n#\n# Start preparing the environment.\n#\nADD user-scripts/unpack-ndk.sh $BASE/\nRUN ./unpack-ndk.sh\n\nADD user-scripts/create-ndk-standalone-toolchain.sh $BASE/\nRUN ./create-ndk-standalone-toolchain.sh\n\nADD user-scripts/unpack-ncurses.sh $BASE/\nRUN ./unpack-ncurses.sh\n\nADD user-scripts/set-env-1.sh $BASE/\n\n#\n# From this point on all scripts should include set-env-1.sh which\n# itself builds upon set-env.sh\n#\n\nADD user-scripts/build-iconv.sh $BASE/\nRUN ./build-iconv.sh\n\nADD user-scripts/build-ncurses.sh $BASE/\nRUN ./build-ncurses.sh\n\nADD user-scripts/build-gmp.sh $BASE/\nRUN ./build-gmp.sh\n\nADD user-scripts/build-gsasl.sh $BASE/\nRUN ./build-gsasl.sh\n\nADD user-scripts/build-libidn.sh $BASE/\nRUN ./build-libidn.sh\n\nADD user-scripts/build-libxml2.sh $BASE/\nRUN ./build-libxml2.sh\n\nADD user-scripts/build-nettle.sh $BASE/\nRUN ./build-nettle.sh\n\nADD user-scripts/build-gnutls26.sh $BASE/\nRUN ./build-gnutls26.sh\n\n#\n# At last we are ready to build GHC. First we build it for the host\n# architecture and then we build the cross-compiler.\n#\n\n# This will take a while\nADD user-scripts/build-ghc-host.sh $BASE/\nRUN ./build-ghc-host.sh\n\n# This takes a while too\nADD user-scripts/build-ghc-cross-compiler.sh $BASE/\nRUN ./build-ghc-cross-compiler.sh\n\nADD user-scripts/build-hsc2hs-wrapper.sh $BASE/\nRUN ./build-hsc2hs-wrapper.sh\n\nADD user-scripts/build-cross-compile-cabal.sh $BASE/\nRUN ./build-cross-compile-cabal.sh\n\nADD user-scripts/add-bindir-links.sh $BASE/\nRUN ./add-bindir-links.sh\n\nADD user-scripts/update-cabal-install.sh $BASE/\nRUN ./update-cabal-install.sh\n\n#\n# Now to add add some PATHs to the .bashrc\n#\nADD user-scripts/add-paths-to-bashrc.sh $BASE/\nRUN ./add-paths-to-bashrc.sh\n\n#\n# Now to clean up the build directory. It takes up a lot of space (3.6G).\n#\n\nWORKDIR /home/androidbuilder\nRUN rm -rf $BASE\n\nADD user-scripts/README /home/androidbuilder/\nRUN cat README\n\n"
}