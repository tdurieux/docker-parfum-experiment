{
  "startTime": 1674248935622,
  "endTime": 1674248936187,
  "originalSmells": [
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 16,
        "lineEnd": 16,
        "columnStart": 4,
        "columnEnd": 38
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 16,
        "lineEnd": 16,
        "columnStart": 4,
        "columnEnd": 38
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 17,
        "lineEnd": 76,
        "columnStart": 4,
        "columnEnd": 31
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM debian:testing\n\nENV DEBIAN_FRONTEND=noninteractive\n\nRUN echo 'path-exclude=/usr/share/doc/*' > /etc/dpkg/dpkg.cfg.d/99-exclude-cruft\nRUN echo 'path-exclude=/usr/share/man/*' >> /etc/dpkg/dpkg.cfg.d/99-exclude-cruft\nRUN echo '#!/bin/sh' > /usr/sbin/policy-rc.d\nRUN echo 'exit 101' >> /usr/sbin/policy-rc.d\nRUN chmod +x /usr/sbin/policy-rc.d\n\n############### Install packages for building\n\nARG DEBIAN_ARCH\nRUN dpkg --add-architecture ${DEBIAN_ARCH}\nRUN echo deb-src http://deb.debian.org/debian testing main >> /etc/apt/sources.list\nRUN apt-get update && \\\n    apt-get -y --no-install-recommends install ca-certificates && \\\n    apt-get -y install --no-install-recommends \\\n      crossbuild-essential-${DEBIAN_ARCH} \\\n      meson \\\n      g++ \\\n      git \\\n      ccache \\\n      pkg-config \\\n      python3-mako \\\n      python-numpy \\\n      python-six \\\n      python-mako \\\n      python3-pip \\\n      python3-setuptools \\\n      python3-six \\\n      python3-wheel \\\n      python3-jinja2 \\\n      bison \\\n      flex \\\n      libwayland-dev \\\n      gettext \\\n      cmake \\\n      bc \\\n      libssl-dev \\\n      lavacli \\\n      csvkit \\\n      curl \\\n      unzip \\\n      wget \\\n      debootstrap \\\n      procps \\\n      qemu-user-static \\\n      cpio \\\n      \\\n      libdrm-dev:${DEBIAN_ARCH} \\\n      libx11-dev:${DEBIAN_ARCH} \\\n      libxxf86vm-dev:${DEBIAN_ARCH} \\\n      libexpat1-dev:${DEBIAN_ARCH} \\\n      libsensors-dev:${DEBIAN_ARCH} \\\n      libxfixes-dev:${DEBIAN_ARCH} \\\n      libxdamage-dev:${DEBIAN_ARCH} \\\n      libxext-dev:${DEBIAN_ARCH} \\\n      x11proto-dev:${DEBIAN_ARCH} \\\n      libx11-xcb-dev:${DEBIAN_ARCH} \\\n      libxcb-dri2-0-dev:${DEBIAN_ARCH} \\\n      libxcb-glx0-dev:${DEBIAN_ARCH} \\\n      libxcb-xfixes0-dev:${DEBIAN_ARCH} \\\n      libxcb-dri3-dev:${DEBIAN_ARCH} \\\n      libxcb-present-dev:${DEBIAN_ARCH} \\\n      libxcb-randr0-dev:${DEBIAN_ARCH} \\\n      libxcb-sync-dev:${DEBIAN_ARCH} \\\n      libxrandr-dev:${DEBIAN_ARCH} \\\n      libxshmfence-dev:${DEBIAN_ARCH} \\\n      libelf-dev:${DEBIAN_ARCH} \\\n      libwayland-dev:${DEBIAN_ARCH} \\\n      libwayland-egl-backend-dev:${DEBIAN_ARCH} \\\n      libclang-7-dev:${DEBIAN_ARCH} \\\n      zlib1g-dev:${DEBIAN_ARCH} \\\n      libglvnd-core-dev:${DEBIAN_ARCH} \\\n      wayland-protocols:${DEBIAN_ARCH} \\\n      libpng-dev:${DEBIAN_ARCH} && \\\n    rm -rf /var/lib/apt/lists && rm -rf /var/lib/apt/lists/*;\n\n############### Cross-build dEQP\nARG GCC_ARCH\nRUN mkdir -p /artifacts/rootfs/deqp                                             && \\\n  wget https://github.com/KhronosGroup/VK-GL-CTS/archive/opengl-es-cts-3.2.5.0.zip && \\\n  unzip -q opengl-es-cts-3.2.5.0.zip -d /                                       && \\\n  rm opengl-es-cts-3.2.5.0.zip                                                  && \\\n  cd /VK-GL-CTS-opengl-es-cts-3.2.5.0                                           && \\\n  python3 external/fetch_sources.py                                             && \\\n  cd /artifacts/rootfs/deqp                                                     && \\\n  cmake -DDEQP_TARGET=wayland                                                      \\\n    -DCMAKE_BUILD_TYPE=Release                                                     \\\n    -DCMAKE_C_COMPILER=${GCC_ARCH}-gcc                                             \\\n    -DCMAKE_CXX_COMPILER=${GCC_ARCH}-g++                                           \\\n    /VK-GL-CTS-opengl-es-cts-3.2.5.0                                            && \\\n  make -j$(nproc)                                                               && \\\n  rm -rf /artifacts/rootfs/deqp/external                                        && \\\n  rm -rf /artifacts/rootfs/deqp/modules/gles3                                   && \\\n  rm -rf /artifacts/rootfs/deqp/modules/gles31                                  && \\\n  rm -rf /artifacts/rootfs/deqp/modules/internal                                && \\\n  rm -rf /artifacts/rootfs/deqp/executor                                        && \\\n  rm -rf /artifacts/rootfs/deqp/execserver                                      && \\\n  rm -rf /artifacts/rootfs/deqp/modules/egl                                     && \\\n  rm -rf /artifacts/rootfs/deqp/framework                                       && \\\n  find . -name CMakeFiles | xargs rm -rf                                        && \\\n  find . -name lib\\*.a | xargs rm -rf                                           && \\\n  du -sh *                                                                      && \\\n  rm -rf /VK-GL-CTS-opengl-es-cts-3.2.5.0\n\n\n############### Cross-build kernel\n\nARG KERNEL_ARCH\nARG DEFCONFIG\nARG DEVICE_TREES\nARG KERNEL_IMAGE_NAME\nENV KERNEL_URL=\"https://kernel.googlesource.com/pub/scm/linux/kernel/git/torvalds/linux/+archive/refs/tags/v5.2-rc2.tar.gz\"\n\nCOPY ${KERNEL_ARCH}.config /panfrost-ci/\nRUN mkdir -p /kernel                                                                   && \\\n  wget -qO- ${KERNEL_URL} | tar -xvz -C /kernel                                        && \\\n  cd /kernel                                                                           && \\\n  ARCH=${KERNEL_ARCH} CROSS_COMPILE=\"${GCC_ARCH}-\" ./scripts/kconfig/merge_config.sh ${DEFCONFIG} /panfrost-ci/${KERNEL_ARCH}.config && \\\n  ARCH=${KERNEL_ARCH} CROSS_COMPILE=\"${GCC_ARCH}-\" make -j12 ${KERNEL_IMAGE_NAME} dtbs && \\\n  cp arch/${KERNEL_ARCH}/boot/${KERNEL_IMAGE_NAME} /artifacts/.                        && \\\n  cp ${DEVICE_TREES} /artifacts/.                                                      && \\\n  rm -rf /kernel\n\n\n############### Create rootfs\n\nCOPY create-rootfs.sh /artifacts/rootfs/\nRUN debootstrap --variant=minbase --arch=${DEBIAN_ARCH} testing /artifacts/rootfs/ http://deb.debian.org/debian && \\\n    chroot /artifacts/rootfs sh /create-rootfs.sh                                                               && \\\n    rm /artifacts/rootfs/create-rootfs.sh\n\nENTRYPOINT [\"\"]\n"
}