{
  "startTime": 1674248024051,
  "endTime": 1674248024423,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 85,
        "lineEnd": 85,
        "columnStart": 4,
        "columnEnd": 49
      }
    },
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 89,
        "lineEnd": 89,
        "columnStart": 4,
        "columnEnd": 32
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 77,
        "lineEnd": 77,
        "columnStart": 7,
        "columnEnd": 59
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 82,
        "lineEnd": 82,
        "columnStart": 4,
        "columnEnd": 41
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 36,
        "lineEnd": 47,
        "columnStart": 7,
        "columnEnd": 11
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 52,
        "lineEnd": 66,
        "columnStart": 7,
        "columnEnd": 13
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 86,
        "lineEnd": 86,
        "columnStart": 7,
        "columnEnd": 56
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 36,
        "lineEnd": 47,
        "columnStart": 7,
        "columnEnd": 11
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 52,
        "lineEnd": 66,
        "columnStart": 7,
        "columnEnd": 13
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 86,
        "lineEnd": 86,
        "columnStart": 7,
        "columnEnd": 56
      }
    }
  ],
  "repairedSmells": [
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 36,
        "lineEnd": 47,
        "columnStart": 7,
        "columnEnd": 11
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 52,
        "lineEnd": 66,
        "columnStart": 7,
        "columnEnd": 13
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 86,
        "lineEnd": 86,
        "columnStart": 7,
        "columnEnd": 56
      }
    }
  ],
  "repairedDockerfile": "FROM ubuntu:16.04\n\n# Let's try to limit the number of layers to minimum:\nENV OPENRESTY_VERSION=1.13.6.2 \\\n    OPENRESTY_DOWNLOAD_SHASUM=870055f4698168f1f045de92c467a33361dee5d7 \\\n    OPENRESTY_DIR=/usr/local/src/openresty \\\n    OPENRESTY_COMPILE_SCRIPT=/usr/local/src/build-resty.sh \\\n    OPENRESTY_COMPILE_OPTS=\"\" \\\n    VENV_DIR=/usr/local/venv \\\n    AR_BIN_DIR=/usr/local/adminrouter/ \\\n    VTS_MODULE_DIR=/usr/local/src/jongiddy-nginx-module-vts-3686706 \\\n    VTS_MODULE_DOWNLOAD_SHASUM=785a1a412355dd78c9b0c56318ac5e2fa7428292 \\\n    VTS_MODULE_DOWNLOAD_URL=https://github.com/jongiddy/nginx-module-vts/tarball/36867068fd0a20f0ce1c0b01bb1539be70a7224f \\\n    VEGETA_DOWNLOAD_SHA256=2f0a69d0ae6f0bf268b7f655bd37c0104d5568d5b2bc45bbb2c405266f74e33d \\\n    VEGETA_DOWNLOAD_URL=https://github.com/tsenart/vegeta/releases/download/v6.1.1/vegeta-v6.1.1-linux-amd64.tar.gz \\\n    IAM_PUBKEY_FILE_PATH=/usr/local/iam.jwt-key.pub \\\n    IAM_PRIVKEY_FILE_PATH=/usr/local/iam.jwt-key.priv \\\n    IAM_SHARED_SECRET_FILE_PATH=/usr/local/iam.jwt-key.shared-secret\n\n# These depend on other ENV vars, so we need a separate ENV block:\nENV OPENRESTY_DOWNLOAD_URL=https://openresty.org/download/openresty-$OPENRESTY_VERSION.tar.gz \\\n    AUTH_ERROR_PAGE_DIR_PATH=${AR_BIN_DIR}/nginx/conf/errorpages\n\nWORKDIR /usr/local/src/\n\n# Some remarks when it comes to apt-get update:\n# * `apt-get update` and `apt-get install` are unreliable. Because of that there\n#   is some basic retrying logic\n# * we put it on top of every apt-get install, because docker layer cache will\n#   not re-run it when updating image with `make update-devkit` if it is a\n#   separate `RUN` line. This leads to `404 Not Found errors.\n\n#### Stuff useful while debugging docker container, not strictly needed for\n#### building:\nRUN set -ex \\\n    && bash -x -c 'for i in {1..5}; do apt-get update && break || sleep 2; done' \\\n    && apt-get install -y --no-install-recommends \\\n        apt-file \\\n        dnsutils \\\n        git \\\n        iproute2 \\\n        less \\\n        psmisc \\\n        strace \\\n        tcpdump \\\n        telnet \\\n        tree \\\n        vim && rm -rf /var/lib/apt/lists/*;\n\n# AR related:\nRUN set -ex \\\n    && bash -x -c 'for i in {1..5}; do apt-get update && break || sleep 2; done' \\\n    && apt-get install -y --no-install-recommends \\\n        gcc \\\n        gettext-base \\\n        libdigest-sha-perl \\\n        libffi-dev \\\n        libffi6 \\\n        libpcre++-dev \\\n        libssl-dev \\\n        make \\\n        patch \\\n        python3 \\\n        python3-dev \\\n        python3-pip \\\n        python3-virtualenv \\\n        rsync && rm -rf /var/lib/apt/lists/*;\n\n# Upgrading pip/setuptools and making the upgrade actually apply in the\n# following filesystem layers works more reliable when using a virtualenv for\n# creating the Python environment, especially on overlayfs.\n# Refs:\n#   https://github.com/docker/docker/issues/12327#issuecomment-188921470\n#   https://github.com/docker/docker/issues/12327#issuecomment-187158265\nRUN python3 -m pip install --upgrade virtualenv\nRUN set -ex \\\n    && virtualenv --no-site-packages $VENV_DIR \\\n    && ${VENV_DIR}/bin/pip install --no-cache-dir --upgrade setuptools pip\n\nENV PATH ${VENV_DIR}/bin:$PATH\n\nCOPY ./requirements-tests.txt .\nRUN pip install --no-cache-dir -r requirements-tests.txt\n\n# Install Node & NPM\nRUN curl -f -sL https://deb.nodesource.com/setup_6.x | bash - \\\n    && apt-get install -y --no-install-recommends nodejs && rm -rf /var/lib/apt/lists/*;\n\n# Install Ngindox for API doc generation\nRUN npm install -g ngindox@0.2.0 && npm cache clean --force;\n\n# Download Vegeta tool for benchmarking\nRUN curl -fsSL \"$VEGETA_DOWNLOAD_URL\" -o vegeta.tar.gz \\\n    && echo \"$VEGETA_DOWNLOAD_SHA256  vegeta.tar.gz\" | sha256sum -c - \\\n        && tar -C /usr/local/bin -xzf vegeta.tar.gz \\\n        && rm vegeta.tar.gz\n\n# Download VTS module for metrics\nRUN curl -fsSL \"$VTS_MODULE_DOWNLOAD_URL\" -o vts-module.tar.gz \\\n    && echo \"$VTS_MODULE_DOWNLOAD_SHASUM  vts-module.tar.gz\" | shasum -c - \\\n    && mkdir -pv $VTS_MODULE_DIR \\\n    && tar --strip-components=1 -C $VTS_MODULE_DIR -xzf vts-module.tar.gz \\\n    && rm vts-module.tar.gz\n\n# Prepare Openresty. Compilation is done in Makefile itself so that\n# this container can be reused during DC/OS build.\nRUN set -ex \\\n    && curl -fsSL \"$OPENRESTY_DOWNLOAD_URL\" -o openresty.tar.gz \\\n    && echo \"$OPENRESTY_DOWNLOAD_SHASUM  openresty.tar.gz\" | shasum -c - \\\n    && mkdir -pv $OPENRESTY_DIR \\\n    && tar --strip-components=1 -C $OPENRESTY_DIR -xzf openresty.tar.gz \\\n    && rm openresty.tar.gz\n\nCOPY build-resty.sh $OPENRESTY_COMPILE_SCRIPT\n\n# Some files that mimic DC/OS environment:\nCOPY iam.jwt-key.pub \\\n     iam.jwt-key.priv \\\n     iam.jwt-key.shared-secret \\\n     detect_ip_public_data.txt \\\n        /usr/local/\nCOPY cluster-id /var/lib/dcos/cluster-id\nCOPY detect_ip_public /opt/mesosphere/bin/detect_ip_public\nRUN chmod -v a+x /opt/mesosphere/bin/detect_ip_public\nCOPY active.buildinfo.full.json /opt/mesosphere/active.buildinfo.full.json\nRUN mkdir -pv /var/lib/dcos/dcos-ui-update-service/dist/ui/nest1/\nCOPY plain-ui-testfile.html /var/lib/dcos/dcos-ui-update-service/dist/ui/\nCOPY nested-ui-testfile.html /var/lib/dcos/dcos-ui-update-service/dist/ui/nest1/\nCOPY plain-metadata-testfile.json \\\n     dcos-version.json \\\n        /opt/mesosphere/active/dcos-metadata/etc/\nCOPY nested-metadata-testfile.json /opt/mesosphere/active/dcos-metadata/etc/nest1/\n\n# The contents of adminrouter-listen* files differ from the ones that are\n# shipped with DC/OS - the IP addresses Nginx binds to are limited to only\n# 127.0.0.1 instead of *. The reason for it is that some endpoints also need to\n# listen on TCP port 80 and this causes conflicts.\nCOPY adminrouter-redirect-http-https.conf \\\n     adminrouter-upstreams-ee.conf \\\n     adminrouter-upstreams-open.conf \\\n     adminrouter-listen-master.conf \\\n     adminrouter-listen-agent.conf \\\n     adminrouter-tls-agent.conf \\\n     adminrouter-tls-master.conf \\\n     adminrouter-ui-security.conf \\\n        /opt/mesosphere/etc/\n\n# The `ca.crt` file is copied into two places due to the fact that\n# `ca-bundle.crt` file is used by AR Lua code for certificate verification\n# (trust anchors, see below) and the ca.crt is a cert that was used to actually\n# sign all other certificates and together with `ca.key` file is copied into\n# the container for conveniance.  The `ca-bundle.crt` in a real DC/OS cluster\n# may contain more than one trust anchor, but in our case there is only one\n# certifcate - root CA cert that should be trusted.\nCOPY ca.crt /run/dcos/pki/CA/certs/\nCOPY ca.key /run/dcos/pki/CA/private/\nCOPY ca.crt /run/dcos/pki/CA/ca-bundle.crt\nCOPY adminrouter-ec.crt \\\n     adminrouter-rsa.crt \\\n     /run/dcos/pki/tls/certs/\nCOPY adminrouter-ec.key \\\n     adminrouter-rsa.key \\\n     /run/dcos/pki/tls/private/\n\n# Workers run as the dcos_adminrouter group.\nRUN groupadd --system dcos_adminrouter\n\nWORKDIR $AR_BIN_DIR/nginx/conf/\n\nCMD [\"/bin/bash\"]\n"
}