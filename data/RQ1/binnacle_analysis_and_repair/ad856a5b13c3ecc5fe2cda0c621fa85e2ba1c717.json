{
  "startTime": 1674234923770,
  "endTime": 1674234924008,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 73,
        "lineEnd": 74,
        "columnStart": 4,
        "columnEnd": 36
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 78,
        "lineEnd": 78,
        "columnStart": 4,
        "columnEnd": 50
      }
    },
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 80,
        "lineEnd": 80,
        "columnStart": 4,
        "columnEnd": 29
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 39,
        "lineEnd": 42,
        "columnStart": 1,
        "columnEnd": 2
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 79,
        "lineEnd": 79,
        "columnStart": 4,
        "columnEnd": 29
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 79,
        "lineEnd": 79,
        "columnStart": 4,
        "columnEnd": 29
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 79,
        "lineEnd": 79,
        "columnStart": 4,
        "columnEnd": 29
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM debian:stretch\nMAINTAINER support@openremote.io\n\n# Install utilities\nRUN apt-get update && apt-get install -y --no-install-recommends \\\n        apt-transport-https \\\n        gnupg2 \\\n        software-properties-common \\\n        procps \\\n\t\tca-certificates \\\n\t\tcurl \\\n\t\twget \\\n\t&& rm -rf /var/lib/apt/lists/*\n\n# Default to UTF-8 file.encoding\nENV LANG C.UTF-8\n\n# add a simple script that can auto-detect the appropriate JAVA_HOME value\n# based on whether the JDK or only the JRE is installed\nRUN { \\\n\t\techo '#!/bin/sh'; \\\n\t\techo 'set -e'; \\\n\t\techo; \\\n\t\techo 'dirname \"$(dirname \"$(readlink -f \"$(which javac || which java)\")\")\"'; \\\n\t} > /usr/local/bin/docker-java-home \\\n\t&& chmod +x /usr/local/bin/docker-java-home\n\n# do some fancy footwork to create a JAVA_HOME that's cross-architecture-safe\nRUN ln -svT \"/usr/lib/jvm/java-8-openjdk-$(dpkg --print-architecture)\" /docker-java-home\nENV JAVA_HOME /docker-java-home\n\nRUN set -ex; \\\n\n# deal with slim variants not having man page directories (which causes \"update-alternatives\" to fail)\n\tif [ ! -d /usr/share/man/man1 ]; then \\\n\t\tmkdir -p /usr/share/man/man1; \\\n\tfi; \\\n\n\tapt-get update; \\\n\tapt-get install --no-install-recommends -y \\\n\t\topenjdk-8-jdk \\\n\t\tca-certificates-java \\\n\t; \\\n\trm -rf /var/lib/apt/lists/*; \\\n\n# verify that \"docker-java-home\" returns what we expect\n\t[ \"$(readlink -f \"$JAVA_HOME\")\" = \"$(docker-java-home)\" ]; \\\n\n# update-alternatives so that future installs of other OpenJDK versions don't change /usr/bin/java\n\tupdate-alternatives --get-selections | awk -v home=\"$(readlink -f \"$JAVA_HOME\")\" 'index($3, home) == 1 { $2 = \"manual\"; print | \"update-alternatives --set-selections\" }'; \\\n# ... and verify that it actually worked for one of the alternatives we care about\n\tupdate-alternatives --query java | grep -q 'Status: manual'\n\n# Run postinst because it might not happen on install\nRUN /var/lib/dpkg/info/ca-certificates-java.postinst configure\n\n# Add git commit label must be specified at build time using --build-arg GIT_COMMIT=dadadadadad\nARG GIT_COMMIT=unknown\nLABEL git-commit=$GIT_COMMIT\n\n############ EDITS ABOVE THIS LINE SHOULD BE DONE IN ALL DOCKERFILES! ################\n\n# Install Docker client\nRUN curl -fsSL https://download.docker.com/linux/debian/gpg | apt-key add -\nRUN add-apt-repository \\\n       \"deb [arch=amd64] https://download.docker.com/linux/debian \\\n       $(lsb_release -cs) \\\n       stable\"\nRUN apt-get update && apt-get install -y --no-install-recommends \\\n    docker-ce docker-ce-cli containerd.io \\\n    && rm -rf /var/lib/apt/lists/*\n\n# Install Docker Compose executable\nRUN curl -f -L https://github.com/docker/compose/releases/download/1.23.2/docker-compose-`uname -s`-`uname -m` \\\n    -o /usr/local/bin/docker-compose && \\\n    chmod +x /usr/local/bin/docker-compose\n\n# Install NodeJS 10 and Yarn\nRUN curl -f -sL https://deb.nodesource.com/setup_10.x | bash - && \\\n    apt-get install --no-install-recommends -y nodejs && \\\n    npm install --global yarn && npm cache clean --force; && rm -rf /var/lib/apt/lists/*;\n\nWORKDIR /openremote"
}