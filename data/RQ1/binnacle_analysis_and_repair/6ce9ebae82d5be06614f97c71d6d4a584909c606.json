{
  "startTime": 1674245904726,
  "endTime": 1674245904874,
  "originalSmells": [
    {
      "rule": "wgetUseHttpsUrl",
      "position": {
        "lineStart": 20,
        "lineEnd": 20,
        "columnStart": 4,
        "columnEnd": 83
      }
    },
    {
      "rule": "wgetUseHttpsUrl",
      "position": {
        "lineStart": 22,
        "lineEnd": 22,
        "columnStart": 4,
        "columnEnd": 82
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 21,
        "lineEnd": 21,
        "columnStart": 4,
        "columnEnd": 45
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 23,
        "lineEnd": 23,
        "columnStart": 4,
        "columnEnd": 44
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 14,
        "lineEnd": 14,
        "columnStart": 4,
        "columnEnd": 44
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 14,
        "lineEnd": 14,
        "columnStart": 4,
        "columnEnd": 44
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 14,
        "lineEnd": 14,
        "columnStart": 4,
        "columnEnd": 44
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM ubuntu:16.04\n\n# Stop script if any individual command fails.\nRUN set -e\n\n# Define LLVM version.\nENV llvm_version=7.0.0\n\n# Define dependencies.\nENV lib_deps=\"make g++ git zlib1g-dev libncurses5-dev libssl-dev libpcre2-dev zip vim\"\nENV build_deps=\"wget xz-utils cmake python\"\n\n# Fetch dependencies.\nRUN apt-get update && apt-get install --no-install-recommends -y $build_deps $lib_deps && rm -rf /var/lib/apt/lists/*;\n\n# Fetch and extract LLVM source.\nRUN echo \"Building LLVM ${llvm_version}\"\nRUN mkdir -p /home/ysui/llvm-${llvm_version}\nWORKDIR /home/ysui/llvm-${llvm_version}\nRUN wget \"https://llvm.org/releases/${llvm_version}/llvm-${llvm_version}.src.tar.xz\"\nRUN tar xvf \"llvm-${llvm_version}.src.tar.xz\" && rm \"llvm-${llvm_version}.src.tar.xz\"\nRUN wget \"https://llvm.org/releases/${llvm_version}/cfe-${llvm_version}.src.tar.xz\"\nRUN tar xvf \"cfe-${llvm_version}.src.tar.xz\" && rm \"cfe-${llvm_version}.src.tar.xz\"\nRUN mv \"cfe-${llvm_version}.src\" \"llvm-${llvm_version}.src/tools/clang\"\nRUN rm \"llvm-${llvm_version}.src.tar.xz\"\nRUN rm \"cfe-${llvm_version}.src.tar.xz\"\nRUN mkdir llvm-${llvm_version}.obj\nWORKDIR /home/ysui/llvm-${llvm_version}/llvm-${llvm_version}.obj\nRUN cmake -DCMAKE_BUILD_TYPE=MinSizeRel ../llvm-${llvm_version}.src\nRUN make -j4\n\n# Fetch and extract SVF source.\nRUN echo \"Building SVF\"\nWORKDIR /\nRUN wget \"https://github.com/SVF-tools/SVF/archive/master.zip\"\nRUN unzip master.zip\nWORKDIR /SVF-master\nRUN bash ./build.sh\n\n\n# Build and install LLVM from source.\n#RUN mkdir build && cd build\n#RUN cmake -j4 -DCMAKE_BUILD_TYPE=MinSizeRel ..\n#RUN cmake -j4 --build .\n\n\n# Cleanup LLVM source directory.\n#rm -rf /src\n\n# Cleanup build dependencies and apt cache.\nRUN rm -rf /master.zip\n\n\n\n"
}