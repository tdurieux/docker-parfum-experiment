{
  "startTime": 1674240704863,
  "endTime": 1674240705483,
  "originalSmells": [
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 48,
        "lineEnd": 48,
        "columnStart": 7,
        "columnEnd": 70
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 35,
        "lineEnd": 35,
        "columnStart": 7,
        "columnEnd": 34
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 46,
        "lineEnd": 46,
        "columnStart": 7,
        "columnEnd": 44
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 13,
        "lineEnd": 18,
        "columnStart": 22,
        "columnEnd": 71
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM ubuntu:trusty\nMAINTAINER Wyatt Pan <wppurking@gmail.com>\n\nADD ./certs /opt/certs\nADD ./bin /usr/local/bin\nADD dnsmasq.conf /usr/local/etc/dnsmasq.conf\nRUN chmod a+x /usr/local/bin/*\nWORKDIR /etc/ocserv\n\n# china timezone\nRUN echo \"Asia/Shanghai\" > /etc/timezone\n\n# install compiler, dependencies, tools , dnsmasq\nRUN apt-get update && apt-get install --no-install-recommends -y \\\n    build-essential wget xz-utils libgnutls28-dev \\\n    libev-dev libwrap0-dev libpam0g-dev libseccomp-dev libreadline-dev \\\n    libnl-route-3-dev libkrb5-dev liboath-dev libtalloc-dev \\\n    libhttp-parser-dev libpcl1-dev libopts25-dev autogen pkg-config nettle-dev \\\n    gnutls-bin gperf liblockfile-bin nuttcp lcov iptables unzip dnsmasq \\\n    && rm -rf /var/lib/apt/lists/*\n\n# configuration dnsmasq\nRUN mkdir -p /temp && cd /temp \\\n    && wget https://github.com/felixonmars/dnsmasq-china-list/archive/master.zip \\\n    && unzip master.zip \\\n    && cd dnsmasq-china-list-master \\\n    && cp *.conf /etc/dnsmasq.d/ \\\n    && cd / && rm -rf /temp\n\n# configuration lz4\nRUN mkdir -p /temp && cd /temp \\\n    && wget https://github.com/lz4/lz4/releases/latest -O lz4.html \\\n    && export lz4_version=$(cat lz4.html | grep -m 1 -o 'v[0-9]\\.[0-9]\\.[0-9]') \\\n    && export lz4_suffix=$(cat lz4.html | grep -m 1 -o '[0-9]\\.[0-9]\\.[0-9]') \\\n    && wget https://github.com/lz4/lz4/archive/$lz4_version.tar.gz \\\n    && tar xvf $lz4_version.tar.gz \\\n    && cd lz4-$lz4_suffix \\\n    && make install \\\n    && ln -sf /usr/local/lib/liblz4.* /usr/lib/ \\\n    && cd / && rm -rf /temp && rm $lz4_version.tar.gz\n\n# configuration ocserv\nRUN mkdir -p /temp && cd /temp \\\n    && wget https://ocserv.gitlab.io/www/download.html \\\n    && export ocserv_version=$(cat download.html | grep -o '[0-9]*\\.[0-9]*\\.[0-9]*') \\\n    && wget ftp://ftp.infradead.org/pub/ocserv/ocserv-$ocserv_version.tar.xz \\\n    && tar xvf ocserv-$ocserv_version.tar.xz \\\n    && cd ocserv-$ocserv_version \\\n    && ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --prefix=/usr --sysconfdir=/etc --with-local-talloc \\\n    && make && make install \\\n    && cd / && rm -rf /temp && rm ocserv-$ocserv_version.tar.xz\n\n# generate sll keys\nRUN cd /opt/certs && ls \\\n    && ca_cn=$(cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w ${1:-32} | head -n 1) && bash -c \"sed -i 's/Your desired authority name/$ca_cn/g' /opt/certs/ca-tmp\" \\\n    && ca_org=$(cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w ${1:-32} | head -n 1) && bash -c \"sed -i 's/Your desired orgnization name/$ca_org/g' /opt/certs/ca-tmp\" \\\n    && serv_domain=$(cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w ${1:-12} | head -n 1) && bash -c -i \"sed -i 's/yourdomainname/$serv_domain/g' /opt/certs/serv-tmp\" \\\n    && serv_org=$(cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w ${1:-32} | head -n 1) && bash -c \"sed -i 's/Your desired orgnization name/$serv_org/g' /opt/certs/serv-tmp\" \\\n    && user_id=$(cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w ${1:-10} | head -n 1) && bash -c \"sed -i 's/user/$user_id/g' /opt/certs/user-tmp\"\n\n# generate [ca-key.pem] -> ca-cert.pem [ca-key]\nRUN certtool --generate-privkey --outfile /opt/certs/ca-key.pem && certtool --generate-self-signed --load-privkey /opt/certs/ca-key.pem --template /opt/certs/ca-tmp --outfile /opt/certs/ca-cert.pem\n# generate [server-key.pem] -> server-cert.pem [ca-key, server-key]\nRUN certtool --generate-privkey --outfile /opt/certs/server-key.pem && certtool --generate-certificate --load-privkey /opt/certs/server-key.pem --load-ca-certificate /opt/certs/ca-cert.pem --load-ca-privkey /opt/certs/ca-key.pem --template /opt/certs/serv-tmp --outfile /opt/certs/server-cert.pem\n# generate [user-key.pem] -> user-cert.pem [ca-key, user-key]\nRUN certtool --generate-privkey --outfile /opt/certs/user-key.pem && certtool --generate-certificate --load-privkey /opt/certs/user-key.pem --load-ca-certificate /opt/certs/ca-cert.pem --load-ca-privkey /opt/certs/ca-key.pem --template /opt/certs/user-tmp --outfile /opt/certs/user-cert.pem\n# generate user.p12 [user-key, user-cert, ca-cert]\nRUN openssl pkcs12 -export -inkey /opt/certs/user-key.pem -in /opt/certs/user-cert.pem -certfile /opt/certs/ca-cert.pem -out /opt/certs/user.p12 -passout pass:616\n\nCMD [\"vpn_run\"]\n"
}