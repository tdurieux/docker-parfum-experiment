{
  "startTime": 1674239416915,
  "endTime": 1674239417191,
  "originalSmells": [
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 9,
        "lineEnd": 9,
        "columnStart": 4,
        "columnEnd": 47
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 9,
        "lineEnd": 9,
        "columnStart": 4,
        "columnEnd": 47
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 9,
        "lineEnd": 9,
        "columnStart": 4,
        "columnEnd": 47
      }
    }
  ],
  "repairedSmells": [
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 9,
        "lineEnd": 9,
        "columnStart": 4,
        "columnEnd": 71
      }
    }
  ],
  "repairedDockerfile": "FROM node:10-stretch\n\n# Build from master branch by default.\n# One can override this using --build-arg when building the docker\n# image from this file.\nARG BRANCH=master\n\n# Install dependencies\nRUN apt-get update && apt-get -y upgrade\nRUN apt-get install --no-install-recommends -y build-essential git-core && rm -rf /var/lib/apt/lists/*;\n\n# We're going to execute nimiq in the context of its own user, what else?\nENV USER=nimiq\nRUN useradd -m ${USER}\n\n# Create a working directory for the nimiq process\nENV DATA_PATH=/nimiq\nRUN mkdir ${DATA_PATH} && chown ${USER}:root ${DATA_PATH}\nWORKDIR ${DATA_PATH}\n\n# Build environment as non-root user\nUSER ${USER}\n\n# Clone\nRUN git clone --branch ${BRANCH} https://github.com/nimiq/core-js.git core\n\n# Build\nRUN cd core && yarn\n\n# Remove build tools\nUSER root\nRUN apt-get remove -y build-essential\n\n# Execute client as non-root user\nUSER ${USER}\n\n# Just execute the nimiq process. One can customize the created container easily\n# to one's needs by (at least) the following options:\n# - supply your own arguments to the entrypoint while creating the container, e.g.\n#    docker run nimiq/nodejs-client --miner\n# - just bind mount your own nimiq.conf to the container at /etc/nimiq/nimiq.conf\n#   then you can just create the container like (assuming the config is in the\n#   current working directory)\n#     docker run nimiq/nodejs-client -v $(pwd)/nimiq.conf:/etc/nimiq/nimiq.conf --config=/etc/nimiq.conf\n# (- of course, you can combine and modify these options suitable to your needs)\nENTRYPOINT [ \"./core/clients/nodejs/nimiq\" ]\n"
}