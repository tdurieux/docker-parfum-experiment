{
  "startTime": 1674253093240,
  "endTime": 1674253093685,
  "originalSmells": [
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 33,
        "lineEnd": 37,
        "columnStart": 4,
        "columnEnd": 34
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 66,
        "lineEnd": 66,
        "columnStart": 4,
        "columnEnd": 37
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 10,
        "lineEnd": 29,
        "columnStart": 4,
        "columnEnd": 38
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 10,
        "lineEnd": 29,
        "columnStart": 4,
        "columnEnd": 38
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM quay.io/fenicsproject/stable:2017.2.0.r4\nMAINTAINER pf4d <mail@cummings.evan@gmail.com>\n\nUSER fenics\nENV  CSLVR_VERSION 2017.2.0\nCOPY WELCOME $FENICS_HOME/WELCOME\n\nUSER root\n\nRUN apt-get update && \\\n    apt-get -y --no-install-recommends install python-pip \\\n                       python-netcdf4 \\\n                       python-matplotlib \\\n                       git \\\n                       curl \\\n                       wget \\\n                       subversion \\\n                       patch \\\n                       gmsh \\\n                       libxrender1 \\\n                       libglu1-mesa \\\n                       libsm6 \\\n                       libxcursor1 \\\n                       libgeos-dev \\\n                       texlive-base \\\n                       texlive-fonts-recommended \\\n                       texlive-latex-extra \\\n                       texlive-math-extra \\\n                       texlive-fonts-extra \\\n                       texlive-science && rm -rf /var/lib/apt/lists/*;\n\n\n# get the latest python packages :\nRUN pip install --no-cache-dir --upgrade colored \\\n                          termcolor \\\n                          shapely \\\n                          pyproj \\\n                          tifffile\n\n# install libadjoint :\nRUN git clone -b libadjoint-2017.2.0 https://bitbucket.org/dolfin-adjoint/libadjoint\nRUN cd libadjoint && \\\n    mkdir build; cd build && \\\n    cmake -DCMAKE_INSTALL_PREFIX=\"/usr/local\" .. && \\\n    make install && \\\n    cd ../.. && \\\n    rm -r libadjoint\n\n# install dolfin-adjoint :\nRUN git clone -b dolfin-adjoint-2017.2.0 https://bitbucket.org/dolfin-adjoint/dolfin-adjoint\nENV PYTHONPATH /home/fenics/dolfin-adjoint:$PYTHONPATH\n\n# install ipopt with default packages -- these overlap with those used by\n# fenics, but it works, and is supported by IPOPT crew :\nRUN svn co https://projects.coin-or.org/svn/Ipopt/stable/3.12 CoinIpopt\nRUN cd CoinIpopt/ThirdParty/Metis && \\\n    ./get.Metis && \\\n    cd ../Lapack && \\\n    ./get.Lapack && \\\n    cd ../Blas && \\\n    ./get.Blas && \\\n    cd ../Mumps && \\\n    ./get.Mumps && \\\n    cd ../ASL && \\\n    ./get.ASL && \\\n    cd ../../ && \\\n    ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --prefix=\"/usr/local\" && \\\n    make -j 8 && \\\n    make install && \\\n    cd ../ && \\\n    rm -r CoinIpopt\n\n# install pyipopt :\nRUN git clone https://github.com/xuy/pyipopt.git\nRUN cd pyipopt && \\\n    python setup.py build && \\\n    python setup.py install && \\\n    cd ../ && \\\n    ldconfig && \\\n    rm -r pyipopt\n\n# install basemap for matplotlib :\nRUN git clone https://github.com/matplotlib/basemap.git\nRUN cd basemap && \\\n    python setup.py install && \\\n    cd ..\n\n# install gmsh :\nRUN git clone https://gitlab.onelab.info/gmsh/gmsh.git\nRUN cd gmsh && \\\n    mkdir build && \\\n    cd build && \\\n    cmake -D ENABLE_WRAP_PYTHON=ON \\\n          -D ENABLE_FLTK=ON \\\n          -D ENABLE_PRIVATE_API=ON \\\n          -D PYTHON_EXECUTABLE:FILEPATH=$(which python) \\\n          -D ENABLE_PETSC=OFF \\\n          -D ENABLE_SLEPC=OFF \\\n          -D ENABLE_PETSC4PY=OFF \\\n          -D ENABLE_MPI=ON \\\n          -D CMAKE_C_COMPILER=mpicc \\\n          -D CMAKE_CXX_COMPILER=mpicxx \\\n          -D CMAKE_Fortran_COMPILER=mpifort \\\n          -D CMAKE_INSTALL_PREFIX=\"/usr/local\" .. && \\\n    make && \\\n    make install\n\n\n## install cslvr :\n#RUN git clone https://github.com/pf4d/cslvr\n#ENV PYTHONPATH /home/fenics/cslvr:$PYTHONPATH\n\n# finally, cleanup :\nRUN apt-get clean && \\ \n    rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*\n\n\n\n"
}