{
  "startTime": 1674250551561,
  "endTime": 1674250551731,
  "originalSmells": [
    {
      "rule": "wgetUseHttpsUrl",
      "position": {
        "lineStart": 39,
        "lineEnd": 39,
        "columnStart": 7,
        "columnEnd": 136
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 40,
        "lineEnd": 40,
        "columnStart": 7,
        "columnEnd": 55
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 25,
        "lineEnd": 25,
        "columnStart": 7,
        "columnEnd": 143
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 25,
        "lineEnd": 25,
        "columnStart": 7,
        "columnEnd": 143
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM phusion/baseimage:0.10.0\n\n#\n# best run using build-docker-image.sh\n#\n\nENV TOMCAT_RELEASE=8  \\\n    TOMCAT_VERSION=8.0.32 \\\n    JAVA_HOME=/usr/lib/jvm/java-8-openjdk-amd64 \\\n    CATALINA_HOME=/usr/local/tomcat \\\n    PATH=/usr/local/bin:/usr/local/sbin:/bin:/sbin:/usr/bin:/usr/sbin:$CATALINA_HOME/bin:$PATH \\\n    CLASSPATH=/usr/share/java \\\n    HOME=/root \\\n    WORKDIR=/root/build/ \\\n    XML_STORE=/home/xml-store \\\n    SYS=demo \\\n    JAVA_OPTS=\"-Xmx4096m\"\n\n#\n# suppose I should cut away some unused stuff here\n#\n\nRUN apt-get update \\\n    && apt-get clean \\\n    && apt-get upgrade -y \\\n    && apt-get install --no-install-recommends -y openjdk-8-jdk-headless tar wget apache2 sudo zip unzip vim git ant tzdata perl libwww-perl authbind libapache2-mod-jk \\\n    && apt-get clean \\\n    && a2enmod proxy_http \\\n    && a2enmod proxy_ajp \\\n    && a2enmod headers && rm -rf /var/lib/apt/lists/*;\n\n\n#\n# want these to be persistent\n#\n\nVOLUME [\"${CATALINA_HOME}/webapps\"]\n\nRUN cd /usr/local \\\n    && wget https://archive.apache.org/dist/tomcat/tomcat-${TOMCAT_RELEASE}/v${TOMCAT_VERSION}/bin/apache-tomcat-${TOMCAT_VERSION}.tar.gz \\\n    && tar -xzvf apache-tomcat-${TOMCAT_VERSION}.tar.gz \\\n    && cp -rf apache-tomcat-${TOMCAT_VERSION}/* tomcat \\\n    && rm -rf apache-tomcat-${TOMCAT_VERSION}* && rm apache-tomcat-${TOMCAT_VERSION}.tar.gz\n\n#\n# Enable sshd by uncommenting the following. Can be nice for debugging and maintenance.\n#\n# RUN rm -f /etc/service/sshd/down\n# COPY id_rsa.pub /tmp/your_key.pub\n# RUN cat /tmp/your_key.pub >> /root/.ssh/authorized_keys && rm -f /tmp/your_key.pub\n#\n\n#\n# Setting up Apache2 as a daemon\n#\n\nRUN mkdir -p /etc/apache2/sites-enabled/\nCOPY apache-httpd/conf-devel.conf /etc/apache2/sites-enabled/conf-devel.conf\n\n#\n# note that editor is the one only Apache2 user, and s/he has password editor\n#\n\nRUN mkdir -p ${XML_STORE} \\\n    && htpasswd -bc /home/xml-store/passwordfile editor editor\nRUN mkdir -p /etc/service/apache2\nCOPY docker-daemons/apache2.sh /etc/service/apache2/run\nRUN chmod +x /etc/service/apache2/run\n\n#\n# Preparing tomcat\n#\n\nRUN mkdir /etc/service/tomcat\nCOPY docker-daemons/tomcat.sh /etc/service/tomcat/run\nRUN chmod +x /etc/service/tomcat/run\n\n#\n# Installing all of MerMEId.\n# Note that you have to build editor.war yourself,\n# and that orbeon and exist has to be hacked a bit before we run this.\n# see build-docker-image.sh\n#\n# You almost certainly want to change the passwords set in the tomcat-users.xml\n#\n\nADD mermeid/editor.war other-wars/exist.war  build/orbeon.war  ${CATALINA_HOME}/webapps/\nCOPY apache-tomcat/tomcat-users.xml  ${CATALINA_HOME}/conf/tomcat-users.xml\n\n# Use baseimage-docker's init system.\n\nCMD [\"/sbin/my_init\"]\n\n"
}