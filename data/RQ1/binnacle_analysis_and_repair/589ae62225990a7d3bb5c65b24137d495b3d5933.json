{
  "startTime": 1674242482600,
  "endTime": 1674242482766,
  "originalSmells": [
    {
      "rule": "gpgUseBatchFlag",
      "position": {
        "lineStart": 37,
        "lineEnd": 37,
        "columnStart": 5,
        "columnEnd": 55
      }
    },
    {
      "rule": "gpgUseBatchFlag",
      "position": {
        "lineStart": 38,
        "lineEnd": 38,
        "columnStart": 5,
        "columnEnd": 32
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 2,
        "lineEnd": 2,
        "columnStart": 44,
        "columnEnd": 71
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM openjdk:8-jdk-stretch\n\nRUN apt-get update && apt-get upgrade -y && apt-get install --no-install-recommends -y git curl && rm -rf /var/lib/apt/lists/*\n\nARG user=jenkins\nARG group=jenkins\nARG uid=1000\nARG gid=1000\nARG http_port=8080\nARG agent_port=50000\nARG JENKINS_HOME=/var/jenkins_home\n\nENV JENKINS_HOME $JENKINS_HOME\nENV JENKINS_SLAVE_AGENT_PORT ${agent_port}\n\n# Jenkins is run with user `jenkins`, uid = 1000\n# If you bind mount a volume from the host or a data container,\n# ensure you use the same uid\nRUN mkdir -p $JENKINS_HOME \\\n  && chown ${uid}:${gid} $JENKINS_HOME \\\n  && groupadd -g ${gid} ${group} \\\n  && useradd -d \"$JENKINS_HOME\" -u ${uid} -g ${gid} -m -s /bin/bash ${user}\n\n# Jenkins home directory is a volume, so configuration and build history\n# can be persisted and survive image upgrades\nVOLUME $JENKINS_HOME\n\n# `/usr/share/jenkins/ref/` contains all reference configuration we want\n# to set on a fresh new installation. Use it to bundle additional plugins\n# or config file with your custom jenkins Docker image.\nRUN mkdir -p /usr/share/jenkins/ref/init.groovy.d\n\n# Use tini as subreaper in Docker container to adopt zombie processes\nARG TINI_VERSION=v0.16.1\nCOPY tini_pub.gpg ${JENKINS_HOME}/tini_pub.gpg\nRUN curl -fsSL https://github.com/krallin/tini/releases/download/${TINI_VERSION}/tini-static-$(dpkg --print-architecture) -o /sbin/tini \\\n  && curl -fsSL https://github.com/krallin/tini/releases/download/${TINI_VERSION}/tini-static-$(dpkg --print-architecture).asc -o /sbin/tini.asc \\\n  && gpg --batch --no-tty --import ${JENKINS_HOME}/tini_pub.gpg \\\n  && gpg --batch --verify /sbin/tini.asc \\\n  && rm -rf /sbin/tini.asc /root/.gnupg \\\n  && chmod +x /sbin/tini\n\n# jenkins version being bundled in this docker image\nARG JENKINS_VERSION\nENV JENKINS_VERSION ${JENKINS_VERSION:-2.121.1}\n\n# jenkins.war checksum, download will be validated using it\nARG JENKINS_SHA=5bb075b81a3929ceada4e960049e37df5f15a1e3cfc9dc24d749858e70b48919\n\n# Can be used to customize where jenkins.war get downloaded from\nARG JENKINS_URL=https://repo.jenkins-ci.org/public/org/jenkins-ci/main/jenkins-war/${JENKINS_VERSION}/jenkins-war-${JENKINS_VERSION}.war\n\n# could use ADD but this one does not check Last-Modified header neither does it allow to control checksum\n# see https://github.com/docker/docker/issues/8331\nRUN curl -fsSL ${JENKINS_URL} -o /usr/share/jenkins/jenkins.war \\\n  && echo \"${JENKINS_SHA}  /usr/share/jenkins/jenkins.war\" | sha256sum -c -\n\nENV JENKINS_UC https://updates.jenkins.io\nENV JENKINS_UC_EXPERIMENTAL=https://updates.jenkins.io/experimental\nENV JENKINS_INCREMENTALS_REPO_MIRROR=https://repo.jenkins-ci.org/incrementals\nRUN chown -R ${user} \"$JENKINS_HOME\" /usr/share/jenkins/ref\n\n# for main web interface:\nEXPOSE ${http_port}\n\n# will be used by attached slave agents:\nEXPOSE ${agent_port}\n\nENV COPY_REFERENCE_FILE_LOG $JENKINS_HOME/copy_reference_file.log\n\nUSER ${user}\n\nCOPY jenkins-support /usr/local/bin/jenkins-support\nCOPY jenkins.sh /usr/local/bin/jenkins.sh\nCOPY tini-shim.sh /bin/tini\nENTRYPOINT [\"/sbin/tini\", \"--\", \"/usr/local/bin/jenkins.sh\"]\n\n# from a derived Dockerfile, can use `RUN plugins.sh active.txt` to setup /usr/share/jenkins/ref/plugins from a support bundle\nCOPY plugins.sh /usr/local/bin/plugins.sh\nCOPY install-plugins.sh /usr/local/bin/install-plugins.sh\n"
}