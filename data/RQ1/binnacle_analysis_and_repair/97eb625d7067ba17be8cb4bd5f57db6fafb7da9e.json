{
  "startTime": 1674249365793,
  "endTime": 1674249366014,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 7,
        "lineEnd": 7,
        "columnStart": 4,
        "columnEnd": 78
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 15,
        "lineEnd": 15,
        "columnStart": 4,
        "columnEnd": 133
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 10,
        "lineEnd": 10,
        "columnStart": 4,
        "columnEnd": 47
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 18,
        "lineEnd": 18,
        "columnStart": 4,
        "columnEnd": 29
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 8,
        "lineEnd": 8,
        "columnStart": 4,
        "columnEnd": 44
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 16,
        "lineEnd": 16,
        "columnStart": 4,
        "columnEnd": 67
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM golang:alpine3.8 AS ctnr-build\nRUN apk add --update --no-cache gcc musl-dev libseccomp-dev btrfs-progs-dev lvm2-dev make git\n\nFROM fedora:28 as proot\nRUN dnf install -y make gcc gcc-c++ glibc-devel glibc-static libstdc++-static libattr-devel libseccomp-devel protobuf-devel curl python \\\n\t&& (dnf install -y git || true)\nARG TALLOC_VERSION=2.1.8\nRUN curl -f -LOk https://www.samba.org/ftp/talloc/talloc-${TALLOC_VERSION}.tar.gz \\\n\t&& tar zxvf talloc-${TALLOC_VERSION}.tar.gz \\\n\t&& cd talloc-${TALLOC_VERSION} \\\n\t&& ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --without-gettext --prefix=/usr \\\n\t&& make install \\\n\t&& ar rcs /usr/local/lib64/libtalloc.a bin/default/talloc*.o \\\n\t&& rm -rf talloc-${TALLOC_VERSION}* && rm talloc-${TALLOC_VERSION}.tar.gz\nARG PROTOBUFC_VERSION=1.3.1\nRUN curl -f -LOk https://github.com/protobuf-c/protobuf-c/releases/download/v${PROTOBUFC_VERSION}/protobuf-c-${PROTOBUFC_VERSION}.tar.gz \\\n\t&& tar zxvf protobuf-c-${PROTOBUFC_VERSION}.tar.gz --no-same-owner \\\n\t&& cd protobuf-c-${PROTOBUFC_VERSION} \\\n\t&& ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --prefix=/usr && make && make install \\\n\t&& rm -rf protobuf-c-${PROTOBUFC_VERSION}* && rm protobuf-c-${PROTOBUFC_VERSION}.tar.gz\nARG PROOT_VERSION=f4dc8cb6f5f31beda5f69f0d476a3196d31c4336\nRUN git clone https://github.com/rootless-containers/PRoot.git \\\n\t&& cd PRoot \\\n\t&& git checkout ${PROOT_VERSION}\nWORKDIR /PRoot/src\nENV PKG_CONFIG_PATH=/usr/lib/pkgconfig\nRUN make && mv proot / && make clean\n\nFROM ctnr-build AS liteide\nARG LITEIDE_PKGS=\"g++ qt5-qttools qt5-qtbase-dev qt5-qtbase-x11 qt5-qtwebkit xkeyboard-config libcanberra-gtk3 adwaita-icon-theme ttf-dejavu\"\nRUN apk add --update --no-cache ${LITEIDE_PKGS} || /usr/lib/qt5/bin/qmake -help >/dev/null\nRUN git clone https://github.com/visualfc/liteide.git \\\n\t&& cd liteide/build \\\n\t&& ./update_pkg.sh && QTDIR=/usr/lib/qt5 ./build_linux.sh \\\n\t&& rm -rf /usr/local/bin \\\n\t&& ln -s `pwd`/liteide/bin /usr/local/bin"
}