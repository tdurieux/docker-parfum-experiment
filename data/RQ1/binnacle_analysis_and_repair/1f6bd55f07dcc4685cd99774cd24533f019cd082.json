{
  "startTime": 1674242342198,
  "endTime": 1674242342393,
  "originalSmells": [
    {
      "rule": "aptGetInstallUseY",
      "position": {
        "lineStart": 90,
        "lineEnd": 96,
        "columnStart": 5,
        "columnEnd": 20
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 36,
        "lineEnd": 42,
        "columnStart": 5,
        "columnEnd": 15
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 36,
        "lineEnd": 42,
        "columnStart": 5,
        "columnEnd": 15
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 90,
        "lineEnd": 96,
        "columnStart": 5,
        "columnEnd": 20
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# Dockerfile for a generic Ubuntu image with just the basics we need\n# to make it suitable for CI.  In particular:\n#  * a non-root user to run as (a pain to try to do in setup,\n#    because by then we've already cloned the repo);\n#  * Git and other basic utilities.\n#\n# Based on CircleCI's provided images, but those are on Debian Jessie\n# and we want Ubuntu, to match our supported environments in production.\n# See these templates and code:\n#   https://github.com/circleci/circleci-images/blob/1949c44df/shared/images/\n# which we've borrowed from, chiefly Dockerfile-basic.template.\n#\n# The CircleCI `python` images are based on upstream's `python` (i.e.,\n# https://hub.docker.com/_/python/), which also come only for Debian\n# (and various obscure distros, and Windows) and not Ubuntu.  Those\n# are in turn based on upstream's `buildpack-deps`, which do come in\n# Ubuntu flavors.\n#\n# So this image starts from `buildpack-deps`, does the job of `python`\n# (but much simpler, with a couple of packages from the distro), and\n# then borrows from the CircleCI Dockerfile.\n\n# To rebuild from this file for a given release, say trusty:\n#   0. $ tools/circleci/generate-dockerfiles\n#   1. pick a new image name, like `gregprice/circleci:trusty-python-3.test`\n#   2. $ sudo docker build tools/circleci/images/$RELEASE/ --tag $NAME\n#   3. $ sudo docker push $NAME\n#   4. update .circleci/config.yml to refer to the new name\n\nFROM {base_image}\n\nRUN echo 'APT::Get::Assume-Yes \"true\";' > /etc/apt/apt.conf.d/90circleci \\\n  && echo 'DPkg::Options \"--force-confnew\";' >> /etc/apt/apt.conf.d/90circleci\nENV DEBIAN_FRONTEND=noninteractive\n\nRUN apt-get update \\\n  && apt-get install --no-install-recommends -y \\\n    sudo \\\n    locales \\\n    xvfb \\\n    parallel \\\n    netcat unzip zip jq \\\n    python3-pip \\\n  && ln -sf /usr/share/zoneinfo/Etc/UTC /etc/localtime \\\n  && {{ locale-gen en_US.UTF-8 || true; rm -rf /var/lib/apt/lists/*; }} \\\n  && echo \"LC_ALL=en_US.UTF-8\" | sudo tee -a /etc/default/locale\n\n# Set the locale, together with the locale-related steps above.\n# It's not entirely clear why, but alternatives that don't work include\n#  * using `C.UTF-8` instead of `en_US.UTF-8`, here and above\n#    (causes mysterious failures in zerver.tests.test_narrow)\n#  * skipping the /etc/default/locale step above (ditto)\n#  * skipping this ENV instruction (causes provision to fail,\n#    because Python tries to use the `ascii` codec)\n# Details in https://github.com/zulip/zulip/pull/7762#issuecomment-353197289\n# and particularly https://circleci.com/gh/hackerkid/zulip/80 .\nENV LC_ALL en_US.UTF-8\n\n# Install Docker.  This logic comes from Circle's Dockerfile; it's probably\n# faster than the upstream-recommended approach of using their apt repo,\n# and fine for an image that will be rebuilt rather than upgraded.\n\n# Docker core...\nRUN set -e \\\n  && export DOCKER_VERSION=$(curl --silent --fail --retry 3 https://download.docker.com/linux/static/stable/x86_64/ | grep -o -e 'docker-[.0-9]*-ce\\.tgz' | sort -r | head -n 1) \\\n  && DOCKER_URL=\"https://download.docker.com/linux/static/stable/x86_64/${{DOCKER_VERSION}}\" \\\n  && echo Docker URL: $DOCKER_URL \\\n  && curl --silent --show-error --location --fail --retry 3 --output /tmp/docker.tgz \"${{DOCKER_URL}}\" \\\n  && ls -lha /tmp/docker.tgz \\\n  && tar -xz -C /tmp -f /tmp/docker.tgz \\\n  && mv /tmp/docker/* /usr/bin \\\n  && rm -rf /tmp/docker /tmp/docker.tgz \\\n  && which docker \\\n  && (docker version 2>/dev/null || true)\n\n# ...docker-compose...\nRUN COMPOSE_URL=\"https://circle-downloads.s3.amazonaws.com/circleci-images/cache/linux-amd64/docker-compose-latest\" \\\n  && curl --silent --show-error --location --fail --retry 3 --output /usr/bin/docker-compose $COMPOSE_URL \\\n  && chmod +x /usr/bin/docker-compose \\\n  && docker-compose version\n\n# ... and dockerize.\nRUN DOCKERIZE_URL=\"https://circle-downloads.s3.amazonaws.com/circleci-images/cache/linux-amd64/dockerize-latest.tar.gz\" \\\n  && curl --silent --show-error --location --fail --retry 3 --output /tmp/dockerize-linux-amd64.tar.gz $DOCKERIZE_URL \\\n  && tar -C /usr/local/bin -xzvf /tmp/dockerize-linux-amd64.tar.gz \\\n  && rm -rf /tmp/dockerize-linux-amd64.tar.gz \\\n  && dockerize --version\n\n# Extra packages used by Zulip.\nRUN apt-get update \\\n  && apt-get install -y --no-install-recommends \\\n    closure-compiler memcached rabbitmq-server redis-server \\\n    hunspell-en-us supervisor libssl-dev yui-compressor puppet \\\n    gettext libffi-dev libfreetype6-dev zlib1g-dev libjpeg-dev \\\n    libldap2-dev libmemcached-dev python-dev python-pip \\\n    python-six libxml2-dev libxslt1-dev libpq-dev \\\n    {extra_packages} && rm -rf /var/lib/apt/lists/*;\n\nRUN groupadd --gid 3434 circleci \\\n  && useradd --uid 3434 --gid circleci --shell /bin/bash --create-home circleci \\\n  && echo 'circleci ALL = (ALL) NOPASSWD: ALL' >> /etc/sudoers.d/50-circleci \\\n  && echo 'Defaults    env_keep += \"DEBIAN_FRONTEND\"' >> /etc/sudoers.d/env_keep\n\nUSER circleci\n\nCMD [\"/bin/sh\"]\n"
}