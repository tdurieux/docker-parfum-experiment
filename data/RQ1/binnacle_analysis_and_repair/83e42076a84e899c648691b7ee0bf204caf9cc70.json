{
  "startTime": 1674250770590,
  "endTime": 1674250771676,
  "originalSmells": [
    {
      "rule": "mkdirUsrSrcThenRemove",
      "position": {
        "lineStart": 148,
        "lineEnd": 148,
        "columnStart": 4,
        "columnEnd": 21
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 401,
        "lineEnd": 401,
        "columnStart": 14,
        "columnEnd": 25
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 415,
        "lineEnd": 415,
        "columnStart": 9,
        "columnEnd": 40
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM --platform=$TARGETPLATFORM alpine:3.10 as php\n\nLABEL maintainer=\"khs1994-docker/lnmp <khs1994@khs1994.com>\"\n\nENV TZ=Asia/Shanghai \\\n    APP_ENV=development\n\n# ARG PHP_VERSION=\n\nARG ALPINE_URL=dl-cdn.alpinelinux.org\n\nARG PHP_EXTENSION_EXTRA\n\nARG PECL_EXTENSION_EXTRA\n\nARG APK_EXTRA\n\nARG APK_DEV_EXTRA\n\n# dependencies required for running \"phpize\"\n# these get automatically installed and removed by \"docker-php-ext-*\" (unless they're already installed)\nENV PHPIZE_DEPS \\\n      autoconf \\\n      dpkg-dev dpkg \\\n      file \\\n      g++ \\\n      gcc \\\n      libc-dev \\\n      make \\\n      pkgconf \\\n      re2c\n\n# persistent / runtime deps\nRUN set -ex \\\n      && sed -i \"s/dl-cdn.alpinelinux.org/${ALPINE_URL}/g\" /etc/apk/repositories \\\n      && apk add --no-cache \\\n                 curl \\\n                 tar \\\n                 xz \\\n# https://github.com/docker-library/php/issues/494\n                 openssl \\\n                 tzdata \\\n# ensure www-data user exists\n# RUN set -x \\\n      && addgroup -g 82 -S www-data \\\n      && adduser -u 82 -D -S -G www-data www-data\n# 82 is the standard uid/gid for \"www-data\" in Alpine\n# http://git.alpinelinux.org/cgit/aports/tree/main/apache2/apache2.pre-install?h=v3.3.2\n# http://git.alpinelinux.org/cgit/aports/tree/main/lighttpd/lighttpd.pre-install?h=v3.3.2\n# http://git.alpinelinux.org/cgit/aports/tree/main/nginx-initscripts/nginx-initscripts.pre-install?h=v3.3.2\n\nENV PHP_INI_DIR /usr/local/etc/php\n# RUN mkdir -p $PHP_INI_DIR/conf.d\n\n##<autogenerated>##\nENV PHP_EXTRA_CONFIGURE_ARGS \\\n        --disable-phpdbg \\\n        # https://github.com/docker-library/php/issues/510\n        # --enable-embed=shared \\\n        --enable-fpm \\\n        --with-fpm-user=www-data \\\n        --with-fpm-group=www-data \\\n        --disable-cgi \\\n        --with-gettext=shared \\\n        --enable-gd=shared \\\n            --with-freetype \\\n            --disable-gd-jis-conv \\\n            --with-jpeg \\\n            --with-webp \\\n            --with-xpm \\\n        --with-pdo-mysql=shared \\\n        --with-pdo-pgsql=shared \\\n        --with-xsl=shared \\\n        --enable-bcmath=shared \\\n        --with-libxml \\\n        --enable-inline-optimization \\\n        --enable-mbregex \\\n        --enable-pcntl=shared \\\n        --enable-shmop=shared \\\n        --enable-soap=shared \\\n        --enable-sockets=shared \\\n        --enable-sysvmsg=shared \\\n        --enable-sysvsem=shared \\\n        --enable-sysvshm=shared \\\n        --enable-xml \\\n        --with-zip \\\n        --enable-calendar=shared \\\n        --enable-intl=shared \\\n        --enable-exif=shared \\\n        --with-bz2=shared \\\n        --with-tidy=shared \\\n        --with-gmp=shared \\\n        --with-imap=shared \\\n            --with-kerberos \\\n            --with-imap-ssl \\\n        --with-xmlrpc=shared \\\n        --with-pic \\\n        --with-enchant=shared \\\n        --enable-fileinfo=shared \\\n        --with-ldap=shared \\\n            --with-ldap-sasl \\\n        --enable-phar \\\n        --enable-posix=shared \\\n        --with-pspell=shared \\\n        --enable-shmop=shared \\\n        --with-snmp=shared \\\n        --with-mysqli=shared \\\n        --with-pgsql=shared \\\n        --with-ffi=shared\n##</autogenerated>##\n\n# Apply stack smash protection to functions using local buffers and alloca()\n# Make PHP's main executable position-independent (improves ASLR security mechanism, and has no performance impact on x86_64)\n# Enable optimization (-O2)\n# Enable linker optimization (this sorts the hash buckets to improve cache locality, and is non-default)\n# Adds GNU HASH segments to generated executables (this is used if present, and is much faster than sysv hash; in this configuration, sysv hash is also generated)\n# https://github.com/docker-library/php/issues/272\nENV PHP_CFLAGS=\"-fstack-protector-strong -fpic -fpie -O2\"\nENV PHP_CPPFLAGS=\"$PHP_CFLAGS\"\nENV PHP_LDFLAGS=\"-Wl,-O1 -Wl,--hash-style=both -pie\"\n\n# ENV GPG_KEYS CBAF69F173A0FEA4B537F470D66C9593118BCCB6 F38252826ACD957EF380D39F2F7956BC5DA04B5D\n\n# ENV PHP_VERSION 7.3.0beta2\n# ENV PHP_URL=\"https://downloads.php.net/~cmb/php-7.3.0beta2.tar.xz\" PHP_ASC_URL=\"https://downloads.php.net/~cmb/php-7.3.0beta2.tar.xz.asc\"\n# ENV PHP_SHA256=\"32670f40aecce130727d841e3191d30237caff643a239d3c16cd579e762bc4c6\" PHP_MD5=\"\"\n\n# COPY --from=php:alpine /usr/local/bin/docker-php-* /usr/local/bin/\n\n# COPY --from=php:alpine /usr/local/bin/docker-php-source /usr/local/bin/\n# COPY --from=php:alpine /usr/local/bin/docker-php-entrypoint /usr/local/bin/\n# COPY --from=php:alpine /usr/local/bin/docker-php-ext-configure /usr/local/bin/\n# COPY --from=php:alpine /usr/local/bin/docker-php-ext-enable /usr/local/bin/\n# COPY --from=php:alpine /usr/local/bin/docker-php-ext-install /usr/local/bin/\n\nARG PHP_GIT=https://github.com/php/php-src.git\n# ARG PHP_GIT=https://gitee.com/khs1994-php/php-src.git\n\nRUN --mount=type=cache,target=/usr/src,id=php_src_nightly \\\n  --mount=type=bind,from=php:alpine,source=/usr/local/bin,target=/opt/bin,rw \\\n  set -xe \\\n  \\\n  && export PATH=$PATH:/opt/bin \\\n  ; cp /opt/bin/docker-php-entrypoint /usr/local/bin \\\n  \\\n  ; mkdir -p $PHP_INI_DIR/conf.d \\\n  # && apk add --no-cache --virtual .fetch-deps gnupg \\\n\t&& mkdir -p /usr/src \\\n\t&& cd /usr/src \\\n  && apk add --no-cache git openssh-client \\\n  \\\n  && if [ -d php ];then \\\n       cd php; \\\n       git reset --hard origin/master; \\\n       git pull --depth=1; \\\n     else \\\n       git clone --depth=1 ${PHP_GIT} php; \\\n     fi \\\n  \\\n  && apk del --no-network --no-cache git openssh-client \\\n\t# wget -O php.tar.xz \"$PHP_URL\"; \\\n\t# if [ -n \"$PHP_SHA256\" ]; then \\\n\t# \techo \"$PHP_SHA256 *php.tar.xz\" | sha256sum -c -; \\\n\t# fi; \\\n\t# if [ -n \"$PHP_MD5\" ]; then \\\n\t# \techo \"$PHP_MD5 *php.tar.xz\" | md5sum -c -; \\\n\t# fi; \\\n\t# \\\n\t# if [ -n \"$PHP_ASC_URL\" ]; then \\\n\t# \twget -O php.tar.xz.asc \"$PHP_ASC_URL\"; \\\n\t# \texport GNUPGHOME=\"$(mktemp -d)\"; \\\n\t# \tfor key in $GPG_KEYS; do \\\n\t# \t\tgpg --keyserver ha.pool.sks-keyservers.net --recv-keys \"$key\"; \\\n\t# \tdone; \\\n\t# \tgpg --batch --verify php.tar.xz.asc php.tar.xz; \\\n\t# \tcommand -v gpgconf > /dev/null && gpgconf --kill all; \\\n\t# \trm -rf \"$GNUPGHOME\"; \\\n\t# fi; \\\n\t# && apk del --no-network --no-cache .fetch-deps \\\n\t&& apk add --no-cache --virtual .build-deps \\\n          $PHPIZE_DEPS \\\n          coreutils \\\n          curl-dev \\\n          libedit-dev \\\n          openssl-dev \\\n          libsodium-dev \\\n          libxml2-dev \\\n          sqlite-dev \\\n          argon2-dev \\\n          cyrus-sasl-dev \\\n          postgresql-dev \\\n          libzip-dev \\\n          zlib-dev \\\n          libpng-dev \\\n          freetype-dev \\\n          libjpeg-turbo-dev \\\n          libwebp-dev \\\n          libxpm-dev \\\n          libexif-dev \\\n          libxslt-dev \\\n          gmp-dev \\\n          xmlrpc-c-dev \\\n          bzip2-dev \\\n          enchant-dev \\\n          imap-dev \\\n          gettext-dev \\\n          icu-dev \\\n          krb5-dev \\\n          aspell-dev \\\n          openldap-dev \\\n          pcre-dev \\\n          pcre2-dev \\\n          tidyhtml-dev \\\n          net-snmp-dev \\\n          openldap-dev \\\n          oniguruma-dev \\\n          \\\n          bison \\\n          libgcrypt-dev \\\n          libgpg-error-dev \\\n          ${APK_DEV_EXTRA:-} \\\n\t\\\n\t&& export CFLAGS=\"$PHP_CFLAGS\" \\\n\t\t        CPPFLAGS=\"$PHP_CPPFLAGS\" \\\n\t\t        LDFLAGS=\"$PHP_LDFLAGS\" \\\n            ARGON2_LIBS=\"-largon2\" \\\n            ARGON2_CFLAGS=\"-I/usr/include\" \\\n\t# && docker-php-source extract \\\n\t&& cd /usr/src/php \\\n  && make clean || echo \\\n\t&& gnuArch=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" \\\n  && ./buildconf --force \\\n\t&& ./configure \\\n\t\t--build=\"$gnuArch\" \\\n\t\t--with-config-file-path=\"$PHP_INI_DIR\" \\\n\t\t--with-config-file-scan-dir=\"$PHP_INI_DIR/conf.d\" \\\n\t\t\\\n# make sure invalid --configure-flags are fatal errors intead of just warnings\n\t\t--enable-option-checking=fatal \\\n\t\t\\\n# https://github.com/docker-library/php/issues/439\n\t\t--with-mhash \\\n\t\t\\\n# --enable-ftp is included here because ftp_ssl_connect() needs ftp to be compiled statically (see https://github.com/docker-library/php/issues/236)\n\t\t--enable-ftp \\\n# --enable-mbstring is included here because otherwise there's no way to get pecl to use it properly (see https://github.com/docker-library/php/issues/195)\n\t\t--enable-mbstring \\\n# --enable-mysqlnd is included here because it's harder to compile after the fact than extensions are (since it's a plugin for several extensions, not an extension in itself)\n\t\t--enable-mysqlnd \\\n# https://wiki.php.net/rfc/libsodium\n\t\t--with-sodium=shared \\\n\t\t\\\n\t\t--with-curl \\\n\t\t--with-libedit \\\n\t\t--with-openssl \\\n\t\t--with-zlib \\\n# https://wiki.php.net/rfc/argon2_password_hash (7.2+)\n\t\t--with-password-argon2 \\\n\t\t\\\n# bundled pcre does not support JIT on s390x\n# https://manpages.debian.org/stretch/libpcre3-dev/pcrejit.3.en.html#AVAILABILITY_OF_JIT_SUPPORT\n\t\t$(test \"$gnuArch\" = 's390x-linux-gnu' && echo '--without-pcre-jit') \\\n\t\t\\\n\t\t$PHP_EXTRA_CONFIGURE_ARGS \\\n\t&& make -j \"$(nproc)\" \\\n  && find -type f -name '*.a' -delete \\\n\t&& make install \\\n\t&& { find /usr/local/bin /usr/local/sbin -type f -perm +0111 -exec strip --strip-all '{}' + || true; } \\\n\t&& make clean \\\n\t&& cd / \\\n  # && docker-php-source delete \\\n  # && rm -rf /usr/src/php \\\n  && docker-php-ext-enable bcmath \\\n                           bz2 \\\n                           calendar \\\n                           enchant \\\n                           exif \\\n                           fileinfo \\\n                           gd \\\n                           gettext \\\n                           gmp \\\n                           imap \\\n                           intl \\\n                           mysqli \\\n                           pcntl \\\n                           pdo_mysql \\\n                           pdo_pgsql \\\n                           pgsql \\\n                           posix \\\n                           pspell \\\n                           shmop \\\n                           snmp \\\n                           soap \\\n                           sodium \\\n                           sockets \\\n                           sysvmsg \\\n                           sysvsem \\\n                           sysvshm \\\n                           tidy \\\n                           xmlrpc \\\n                           xsl \\\n                           # opcache 已默认安装，需要自行载入\n                           opcache \\\n                           # 7.4 +\n                           ffi \\\n                           ${PHP_EXTENSION_EXTRA:-} \\\n\t&& runDeps=\"$( \\\n\t\tscanelf --needed --nobanner --format '%n#p' --recursive /usr/local \\\n\t\t\t| tr ',' '\\n' \\\n\t\t\t| sort -u \\\n\t\t\t| awk 'system(\"[ -e /usr/local/lib/\" $1 \" ]\") == 0 { next } { print \"so:\" $1 }' \\\n\t)\" \\\n\t&& apk add --no-cache $runDeps \\\n  \\\n#  && { find $(php-config --extension-dir) -type f -perm +0111 -exec strip --strip-all '{}' + || true; } \\\n  && apk del --no-network --no-cache .build-deps \\\n  \\\n# sodium was built as a shared module (so that it can be replaced later if so desired), so let's enable it too (https://github.com/docker-library/php/issues/598)\n# RUN docker-php-ext-enable sodium\n  \\\n# ENTRYPOINT [\"docker-php-entrypoint\"]\n  \\\n# RUN set -ex \\\n\t&& cd /usr/local/etc \\\n\t&& if [ -d php-fpm.d ]; then \\\n\t\t# for some reason, upstream's php-fpm.conf.default has \"include=NONE/etc/php-fpm.d/*.conf\"\n\t\tsed 's!=NONE/!=!g' php-fpm.conf.default | tee php-fpm.conf > /dev/null; \\\n\t\tcp php-fpm.d/www.conf.default php-fpm.d/www.conf; \\\n\telse \\\n\t\t# PHP 5.x doesn't use \"include=\" by default, so we'll create our own simple config that mimics PHP 7+ for consistency\n\t\tmkdir php-fpm.d; \\\n\t\tcp php-fpm.conf.default php-fpm.d/www.conf; \\\n\t\t{ \\\n\t\t\techo '[global]'; \\\n\t\t\techo 'include=etc/php-fpm.d/*.conf'; \\\n\t\t} | tee php-fpm.conf; \\\n\tfi \\\n\t&& { \\\n\t\techo '[global]'; \\\n\t\techo 'error_log = /proc/self/fd/2'; \\\n\t\techo; \\\n\t\techo '[www]'; \\\n\t\techo '; if we send this to /proc/self/fd/1, it never appears'; \\\n\t\techo 'access.log = /proc/self/fd/2'; \\\n\t\techo; \\\n\t\techo 'clear_env = no'; \\\n\t\techo; \\\n\t\techo '; Ensure worker stdout and stderr are sent to the main error log.'; \\\n\t\techo 'catch_workers_output = yes'; \\\n\t} | tee php-fpm.d/docker.conf \\\n\t&& { \\\n\t\techo '[global]'; \\\n\t\techo 'daemonize = no'; \\\n\t\techo; \\\n\t\techo '[www]'; \\\n\t\techo 'listen = 9000'; \\\n\t} | tee php-fpm.d/zz-docker.conf \\\n# 创建日志文件夹\n  && mkdir -p /var/log/php-fpm \\\n  && ln -sf /dev/stdout /var/log/php-fpm/access.log \\\n  && ln -sf /dev/stderr /var/log/php-fpm/error.log \\\n  && ln -sf /dev/stderr /var/log/php-fpm/xdebug-remote.log \\\n  && chmod -R 777 /var/log/php-fpm && rm -rf /usr/src\n\nENTRYPOINT [\"docker-php-entrypoint\"]\n\nENV PECL_BUILD_DEPS \\\n      libmemcached-dev \\\n      yaml-dev \\\n      zlib-dev\n\nENV PECL_RUN_DEPS \\\n      libmemcached-libs \\\n      yaml \\\n      zlib\n\nENV PECL_EXTENSION \\\n      mongodb-beta \\\n      igbinary-beta \\\n      redis-beta \\\n      memcached-beta \\\n      xdebug-beta \\\n      yaml-beta \\\n      ${PECL_EXTENSION_EXTRA:-}\n\nRUN --mount=type=bind,from=php:alpine,source=/usr/local/bin,target=/opt/bin,rw \\\n    --mount=type=cache,target=/usr/local/lib/php/test \\\n    --mount=type=cache,target=/usr/local/lib/php/doc \\\n      set -x \\\n      && export PATH=$PATH:/opt/bin \\\n      && apk add --no-cache --virtual .pecl_build_deps $PECL_BUILD_DEPS $PHPIZE_DEPS \\\n      && apk add --no-cache --virtual .pecl_run_deps $PECL_RUN_DEPS \\\n      && curl -sfL -o /usr/local/bin/pickle \\\n        https://github.com/khs1994-php/pickle/releases/download/v0.4.0-2019-02-14/pickle.phar \\\n      && chmod +x /usr/local/bin/pickle \\\n      && for extension in $PECL_EXTENSION; do \\\n           EXT_REAL_NAME=$(echo ${extension} | cut -d '-' -f 1) \\\n           && pickle install $extension -n --defaults \\\n           || ( cd /tmp/${EXT_REAL_NAME}/${EXT_REAL_NAME}* \\\n           && phpize \\\n           && ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" \\\n           && make \\\n           && make install \\\n           && rm -rf /tmp/${EXT_REAL_NAME}) \\\n           && docker-php-ext-enable ${EXT_REAL_NAME} || echo \"pecl ${extension} install error\" \\\n           && rm -rf /usr/local/include/php/ext/${EXT_REAL_NAME} \\\n           && strip --strip-all $(php-config --extension-dir)/${EXT_REAL_NAME}.so || true; \\\n         done \\\n\n      && ( apk add --no-cache git openssh-client \\\n      && git clone --depth=1 https://github.com/xdebug/xdebug.git \\\n      && apk del --no-network --no-cache git openssh-client \\\n      && cd xdebug \\\n      && phpize \\\n      && ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --enable-xdebug-dev \\\n      && make all \\\n      && make install \\\n      && cd - \\\n      && rm -rf xdebug \\\n      && docker-php-ext-enable xdebug \\\n# 默认不启用 xdebug\n      && mv /usr/local/etc/php/conf.d/docker-php-ext-xdebug.ini \\\n             /usr/local/etc/php/conf.d/docker-php-ext-xdebug.ini.default) \\\n      ; apk del --no-network --no-cache .pecl_build_deps \\\n      ; mv /usr/local/etc/php/conf.d/docker-php-ext-tideways_xhprof.ini \\\n           /usr/local/etc/php/conf.d/docker-php-ext-tideways_xhprof.ini.default \\\n      ; rm -rf /tmp/* \\\n      && rm -rf /usr/local/lib/php/.registry/.channel.pecl.php.net/*\n\nSTOPSIGNAL SIGQUIT\nEXPOSE 9000\nCMD [\"php-fpm\"]\n\nWORKDIR /app\n"
}