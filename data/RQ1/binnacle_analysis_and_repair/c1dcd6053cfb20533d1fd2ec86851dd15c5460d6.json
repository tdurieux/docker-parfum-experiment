{
  "startTime": 1674251252957,
  "endTime": 1674251253108,
  "originalSmells": [
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 2,
        "lineEnd": 5,
        "columnStart": 26,
        "columnEnd": 14
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM ubuntu:16.04\n\nRUN apt-get update -qq && apt-get install --no-install-recommends -qqy \\\n    git wget bzip2 file unzip libtool pkg-config cmake build-essential \\\n    automake yasm gettext autopoint vim python git-svn ninja-build \\\n    subversion && \\\n    apt-get clean -y && \\\n    rm -rf /var/lib/apt/lists/*\n\n\nRUN git config --global user.name \"LLVM MinGW\" && \\\n    git config --global user.email root@localhost\n\nWORKDIR /build\n\nENV TOOLCHAIN_PREFIX=/opt/llvm-mingw\n\n# Build and strip the LLVM installation\nCOPY build-llvm.sh strip-llvm.sh ./\nRUN ./build-llvm.sh $TOOLCHAIN_PREFIX && \\\n    ./strip-llvm.sh $TOOLCHAIN_PREFIX && \\\n    rm -rf /build/*\n\nARG TOOLCHAIN_ARCHS=\"i686 x86_64 armv7 aarch64\"\n\n# Install the usual $TUPLE-clang binaries\nCOPY wrappers/*.sh wrappers/*.c wrappers/*.h ./wrappers/\nCOPY install-wrappers.sh ./\nRUN ./install-wrappers.sh $TOOLCHAIN_PREFIX && \\\n    rm -rf /build/*\n\n# Build MinGW-w64, compiler-rt and mingw-w64's extra libraries\nCOPY build-mingw-w64.sh build-compiler-rt.sh build-mingw-w64-libraries.sh ./\nRUN ./build-mingw-w64.sh $TOOLCHAIN_PREFIX && \\\n    ./build-compiler-rt.sh $TOOLCHAIN_PREFIX && \\\n    ./build-mingw-w64-libraries.sh $TOOLCHAIN_PREFIX && \\\n    rm -rf /build/*\n\n# Build libunwind/libcxxabi/libcxx\nCOPY build-libcxx.sh ./\nRUN ./build-libcxx.sh $TOOLCHAIN_PREFIX && \\\n    rm -rf /build/*\n\n# Build sanitizers\nCOPY build-compiler-rt.sh ./\nRUN ./build-compiler-rt.sh $TOOLCHAIN_PREFIX --build-sanitizers && \\\n    rm -rf /build/*\n\n# Build libssp\nCOPY build-libssp.sh libssp-Makefile ./\nRUN ./build-libssp.sh $TOOLCHAIN_PREFIX && \\\n    rm -rf /build/*\n\nENV PATH=$TOOLCHAIN_PREFIX/bin:$PATH\n"
}