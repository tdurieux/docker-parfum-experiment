{
  "startTime": 1674248207034,
  "endTime": 1674248207247,
  "originalSmells": [
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 11,
        "lineEnd": 11,
        "columnStart": 7,
        "columnEnd": 40
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 12,
        "lineEnd": 12,
        "columnStart": 7,
        "columnEnd": 52
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 16,
        "lineEnd": 16,
        "columnStart": 7,
        "columnEnd": 46
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 19,
        "lineEnd": 19,
        "columnStart": 7,
        "columnEnd": 64
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 20,
        "lineEnd": 20,
        "columnStart": 7,
        "columnEnd": 42
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM ubuntu:16.04\nLABEL maintainer=\"Andrew Champion <andrew.champion@gmail.com>, Tom Kazimiers <tom@voodoo-arts.net>\"\n\n# For building the image, let dpkg/apt know that we install and configure\n# non-interactively.\nARG DEBIAN_FRONTEND=noninteractive\n\n# Install dependencies. Even though this image doesn't run its own Postgres\n# instance, make sure we install the upstream version to match the manual (and\n# make building images on top of this one easier).\nRUN apt-get update -y \\\n    && apt-get install --no-install-recommends -y apt-utils gawk \\\n    && apt-get install --no-install-recommends -y software-properties-common \\\n    && add-apt-repository ppa:deadsnakes/ppa \\\n    && add-apt-repository -y ppa:nginx/stable \\\n    && add-apt-repository \"deb http://apt.postgresql.org/pub/repos/apt/ xenial-pgdg main\" \\\n    && apt-get install --no-install-recommends -y wget ca-certificates \\\n    && wget --quiet -O - https://postgresql.org/media/keys/ACCC4CF8.asc | apt-key add - \\\n    && apt-get update -y \\\n    && apt-get install --no-install-recommends -y python3.6 python3.6-dev git python-pip \\\n    && apt-get install --no-install-recommends -y nginx supervisor \\\n    && rm -rf /var/lib/apt/lists/*\nADD packagelist-ubuntu-16.04-apt.txt /home/\nRUN apt-get update -y  \\\n    && xargs apt-get install -y < /home/packagelist-ubuntu-16.04-apt.txt \\\n    && rm -rf /var/lib/apt/lists/*\nADD django/requirements.txt /home/django/\nENV WORKON_HOME /opt/virtualenvs\nRUN mkdir -p /opt/virtualenvs \\\n    && /bin/bash -c \"source /usr/share/virtualenvwrapper/virtualenvwrapper.sh \\\n    && mkvirtualenv catmaid -p /usr/bin/python3.6 \\\n    && workon catmaid \\\n    && pip install -U pip setuptools \\\n    && pip install -r /home/django/requirements.txt\"\n\nADD . /home/\n\n# Add Git commit build information to container by copying the Git repo (.git\n# folder) into the container to run \"git describe\" and pipe its result in the\n# file /home/git-version. After this is done, the repo is removed again from the\n# container. We expect the environment to have a full git history, including\n# tags. For DockerHub this is ensured with a post_checkout hook.\nCOPY .git /home/.git\nRUN cd /home/ && git describe > /home/git-version && rm -r /home/.git\n\n# uWSGI setup\nRUN /bin/bash -c \"source /usr/share/virtualenvwrapper/virtualenvwrapper.sh \\\n    && workon catmaid \\\n    && pip install uwsgi\" \\\n    && ln -s /home/scripts/docker/supervisor-catmaid.conf /etc/supervisor/conf.d/ \\\n    && chmod +x /home/scripts/docker/start-catmaid.sh \\\n    && chmod +x /home/scripts/docker/catmaid-entry.sh\n\n# Fix AUFS bug that breaks PostgreSQL\n# See: https://github.com/docker/docker/issues/783\nRUN mkdir /etc/ssl/private-copy; \\\n    mv /etc/ssl/private/* /etc/ssl/private-copy/; \\\n    rm -r /etc/ssl/private; \\\n    mv /etc/ssl/private-copy /etc/ssl/private; \\\n    chmod -R 0700 /etc/ssl/private; \\\n    chown -R postgres /etc/ssl/private\n\nENTRYPOINT [\"/home/scripts/docker/catmaid-entry.sh\"]\n\nEXPOSE 8000\nWORKDIR /home/django/projects/\nCMD [\"platform\"]\n"
}