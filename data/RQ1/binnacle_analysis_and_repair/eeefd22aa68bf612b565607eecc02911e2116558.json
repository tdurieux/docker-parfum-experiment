{
  "startTime": 1674244051656,
  "endTime": 1674244051893,
  "originalSmells": [
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 18,
        "lineEnd": 18,
        "columnStart": 4,
        "columnEnd": 28
      }
    },
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 19,
        "lineEnd": 19,
        "columnStart": 4,
        "columnEnd": 24
      }
    },
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 24,
        "lineEnd": 24,
        "columnStart": 4,
        "columnEnd": 15
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 11,
        "lineEnd": 11,
        "columnStart": 4,
        "columnEnd": 51
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 11,
        "lineEnd": 11,
        "columnStart": 4,
        "columnEnd": 51
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 11,
        "lineEnd": 11,
        "columnStart": 4,
        "columnEnd": 51
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# Docker version 1.9.1, build a34a1d5\n# Build image using the latest version of Ubuntu from the Docker Hub Ubuntu repository.\nFROM ubuntu:16.04\n\n# Declare the MAINTAINER of the Dockerfile\nMAINTAINER Ashwin Hegde <ashwin.hegde3@gmail.com>\n\n# Make sure apt is up to date\nRUN apt-get update && apt-get install --no-install-recommends -y nodejs nodejs-legacy npm git && rm -rf /var/lib/apt/lists/*; # Install nodejs and npm\n\n\n# Create app directory\nRUN mkdir -p /usr/nebula\nWORKDIR /usr/nebula\n\n# Install dependencies at global level\nRUN npm install -g grunt-cli && npm cache clean --force;\nRUN npm install -g bower && npm cache clean --force;\n\n# Install app dependencies\nCOPY package.json /usr/nebula\nCOPY bower.json /usr/nebula\nRUN npm install && npm cache clean --force;\nRUN bower install --allow-root\n\n# Bundle app source\nCOPY . /usr/nebula\n\n# Run source build\nRUN grunt build\n\n# Your app binds to port 8000 so you'll use the EXPOSE instruction\n# to have it mapped by the docker daemon\nEXPOSE 8000\n\n# Execute command and start Node.js server\nCMD [ \"npm\", \"run\", \"docker\" ]\n"
}