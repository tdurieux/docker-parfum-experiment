{
  "startTime": 1674244799078,
  "endTime": 1674244799230,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 32,
        "lineEnd": 32,
        "columnStart": 20,
        "columnEnd": 93
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 47,
        "lineEnd": 47,
        "columnStart": 4,
        "columnEnd": 93
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 33,
        "lineEnd": 33,
        "columnStart": 36,
        "columnEnd": 70
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 28,
        "lineEnd": 28,
        "columnStart": 4,
        "columnEnd": 171
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 28,
        "lineEnd": 28,
        "columnStart": 4,
        "columnEnd": 171
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 28,
        "lineEnd": 28,
        "columnStart": 4,
        "columnEnd": 171
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# gitlab-ci-runner\n\nFROM ubuntu:14.04\nMAINTAINER  Sytse Sijbrandij \"sytse@gitlab.com\"\n\n# This script will start a runner in a docker container.\n#\n# First build the container and give a name to the resulting image:\n# docker build -t gitlabhq/gitlab-ci-runner github.com/gitlabhq/gitlab-ci-runner\n#\n# Then set the environment variables and run the gitlab-ci-runner in the container:\n# docker run -e CI_SERVER_URL=https://ci.example.com -e REGISTRATION_TOKEN=replaceme -e HOME=/root -e GITLAB_SERVER_FQDN=gitlab.example.com gitlabhq/gitlab-ci-runner\n#\n# After you start the runner you can send it to the background with ctrl-z\n# The new runner should show up in the GitLab CI interface on /runners\n#\n# You can start an interactive session to test new commands with:\n# docker run -e CI_SERVER_URL=https://ci.example.com -e REGISTRATION_TOKEN=replaceme -e HOME=/root -i -t gitlabhq/gitlab-ci-runner:latest /bin/bash\n#\n# If you ever want to freshly rebuild the runner please use:\n# docker build -no-cache -t gitlabhq/gitlab-ci-runner github.com/gitlabhq/gitlab-ci-runner\n\n# Get rid of the debconf messages\nENV DEBIAN_FRONTEND noninteractive\n\n# Update your packages and install the ones that are needed to compile Ruby\nRUN apt-get update -y && apt-get install --no-install-recommends -y curl libxml2-dev libxslt-dev libcurl4-openssl-dev libreadline6-dev libssl-dev patch build-essential zlib1g-dev openssh-server libyaml-dev libicu-dev && rm -rf /var/lib/apt/lists/*;\nRUN apt-get upgrade -y\n\n\n# Download Ruby and compile it\nRUN mkdir /tmp/ruby\nRUN cd /tmp/ruby && curl -f --silent ftp://ftp.ruby-lang.org/pub/ruby/2.0/ruby-2.0.0-p481.tar.gz | tar xz\nRUN cd /tmp/ruby/ruby-2.0.0-p481 && ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --disable-install-rdoc && make install\n\nRUN gem install bundler\n\n# Set an utf-8 locale\nRUN echo \"LC_ALL=\\\"en_US.UTF-8\\\"\" >> /etc/default/locale\nRUN locale-gen en_US.UTF-8\nRUN update-locale LANG=en_US.UTF-8\n\n# Prepare a known host file for non-interactive ssh connections\nRUN mkdir -p /root/.ssh\nRUN touch /root/.ssh/known_hosts\n\n# Install the runner\nRUN curl -f --silent -L https://gitlab.com/gitlab-org/gitlab-ci-runner/repository/archive.tar.gz | tar xz\nRUN cd gitlab-ci-runner.git && bundle install --deployment\n\nWORKDIR /gitlab-ci-runner.git\n\n# When the image is started add the remote server key, set up the runner and run it\nCMD ssh-keyscan -H $GITLAB_SERVER_FQDN >> /root/.ssh/known_hosts && bundle exec ./bin/setup_and_run\n\n## Optional dependencies\n##\n## Install packages commonly required to test Rails projects before the test run starts\n## If they are not here you have to add them to the test script in the project settings\n#RUN apt-get install -y libqtwebkit-dev # test with capybara\n#RUN apt-get install -y sqlite3 libsqlite3-dev # sqlite is the default datastore\n#RUN apt-get install -y libmysqlclient-dev # native extensions for the mysql2 gem\n#RUN apt-get install -q -y mysql-server # install MySQL with blank root password\n#RUN cd /root && wget http://download.redis.io/redis-stable.tar.gz && tar xvzf redis-stable.tar.gz && cd redis-stable && make\n#\n## Install PostgreSQL, after install this should work: psql --host=127.0.0.1 roottestdb\n#RUN apt-get install -y postgresql\n#RUN cat /dev/null > /etc/postgresql/9.3/main/pg_hba.conf\n#RUN echo \"# TYPE DATABASE USER ADDRESS METHOD\" >> /etc/postgresql/9.3/main/pg_hba.conf\n#RUN echo \"local  all  all  trust\" >> /etc/postgresql/9.3/main/pg_hba.conf\n#RUN echo \"host all all 127.0.0.1/32 trust\" >> /etc/postgresql/9.3/main/pg_hba.conf\n#RUN echo \"host all all  ::1/128 trust\" >> /etc/postgresql/9.3/main/pg_hba.conf\n#RUN /etc/init.d/postgresql start && su postgres -c \"psql -c \\\"create user root;\\\"\" && su postgres -c \"psql -c \\\"alter user root createdb;\\\"\" && su postgres -c \"psql -c \\\"create database roottestdb owner root;\\\"\"\n#\n## When the image is started add the remote server key, set up the runner and run it\n#WORKDIR /gitlab-ci-runner.git\n#\n#CMD ssh-keyscan -H $GITLAB_SERVER_FQDN >> /root/.ssh/known_hosts && mysqld & /root/redis-stable/src/redis-server & /etc/init.d/postgresql start & bundle exec ./bin/setup_and_run\n"
}