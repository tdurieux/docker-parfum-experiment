{
  "startTime": 1674240258439,
  "endTime": 1674240258540,
  "originalSmells": [
    {
      "rule": "yarnCacheCleanAfterInstall",
      "position": {
        "lineStart": 11,
        "lineEnd": 11,
        "columnStart": 4,
        "columnEnd": 29
      }
    },
    {
      "rule": "yarnCacheCleanAfterInstall",
      "position": {
        "lineStart": 18,
        "lineEnd": 18,
        "columnStart": 4,
        "columnEnd": 25
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "### STAGE 1: Build ###\n# We label our stage as 'builder'\nFROM node:8.6-alpine as builder\n\nENV APP_PATH /app\nMAINTAINER Sergey Moiseev <sergey.moiseev@toptal.com>\n\nCOPY package.json .\nCOPY yarn.lock .\n\n## Storing node modules on a separate layer will prevent unnecessary npm installs at each build\nRUN yarn install --production && yarn global add gulp && mkdir $APP_PATH && cp -R ./node_modules .$APP_PATH && yarn cache clean;\n\nWORKDIR $APP_PATH\n\nCOPY . .\n\n## Build the angular app in production mode and store the artifacts in dist folder\nRUN yarn remove node-sass && yarn add node-sass && yarn run build-i18n && yarn run gulp compress && yarn cache clean;\n\n### STAGE 2: Setup ###\nFROM nginx:1.13.3-alpine\n\nENV APP_PATH /app\nMAINTAINER Sergey Moiseev <sergey.moiseev@toptal.com>\n\n## Copy our default nginx config\nRUN rm -rf /etc/nginx/conf.d/*\nCOPY nginx/default.conf /etc/nginx/conf.d/\n\n## Remove default nginx website\nRUN rm -rf /usr/share/nginx/html/*\n\nEXPOSE 80\n\n## From 'builder' stage copy over the artifacts in dist folder to default nginx public folder\nCOPY --from=builder $APP_PATH/dist/ /usr/share/nginx/html/\n\nCMD [\"nginx\", \"-g\", \"daemon off;\"]"
}