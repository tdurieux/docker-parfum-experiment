{
  "startTime": 1674245653468,
  "endTime": 1674245653836,
  "originalSmells": [
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 10,
        "lineEnd": 14,
        "columnStart": 2,
        "columnEnd": 11
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 10,
        "lineEnd": 14,
        "columnStart": 2,
        "columnEnd": 11
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 28,
        "lineEnd": 38,
        "columnStart": 2,
        "columnEnd": 21
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# code: language=Dockerfile\n\n# The code for the build image should be idendical with the code in\n# Dockerfile.nginx to use the caching mechanism of Docker.\n\nFROM python:2 as build\nWORKDIR /app\nRUN \\\n  apt-get -y update && \\\n  apt-get -y --no-install-recommends install \\\n    dnsutils \\\n    mysql-client \\\n    postgresql-client \\\n    xmlsec1 \\\n    && \\\n  apt-get clean && \\\n  rm -rf /var/lib/apt/lists && \\\n  true && rm -rf /var/lib/apt/lists/*;\nCOPY requirements.txt ./\nRUN pip wheel --wheel-dir=/tmp/wheels -r ./requirements.txt\n\nFROM python:2-slim\nWORKDIR /app\nRUN \\\n  apt-get -y update && \\\n  # ugly fix to install postgresql-client without errors\n  mkdir -p /usr/share/man/man1 /usr/share/man/man7 && \\\n  apt-get -y install --no-install-recommends \\\n    # libopenjp2-7 libjpeg62 libtiff5 are required by the pillow package\n    libopenjp2-7 \\\n    libjpeg62 \\\n    libtiff5 \\\n    dnsutils \\\n    mysql-client \\\n    libmariadbclient18 \\\n    xmlsec1 \\\n    # only required for the dbshell (used by the initializer job)\n    postgresql-client \\\n    && \\\n  apt-get clean && \\\n  rm -rf /var/lib/apt/lists && \\\n  true && rm -rf /var/lib/apt/lists/*;\nRUN pip install --no-cache-dir --upgrade pip\nCOPY --from=build /tmp/wheels /tmp/wheels\nCOPY requirements.txt ./\nRUN pip install \\\n\t--no-cache-dir \\\n\t--no-index \\\n  --find-links=/tmp/wheels \\\n  -r ./requirements.txt\nCOPY \\\n  docker/entrypoint-celery-beat.sh \\\n  docker/entrypoint-celery-worker.sh \\\n  docker/entrypoint-initializer.sh \\\n  docker/entrypoint-uwsgi.sh \\\n  docker/entrypoint-uwsgi-dev.sh \\\n  docker/entrypoint-unit-tests.sh \\\n  docker/entrypoint-unit-tests-devDocker.sh \\\n  docker/wait-for-it.sh \\\n  /\nCOPY wsgi.py manage.py tests/unit-tests.sh ./\nCOPY dojo/ ./dojo/\n# Legacy installs need the modified settings.py, do not remove!\nRUN \\\n  cp dojo/settings/settings.dist.py dojo/settings/settings.py\nCOPY tests/ ./tests/\nRUN \\\n  mkdir dojo/migrations && \\\n  chmod g=u dojo/migrations && \\\n  chmod g=u /var/run && \\\n  true\nUSER 1001\nENV \\\n  DD_ADMIN_USER=admin \\\n  DD_ADMIN_MAIL=admin@defectdojo.local \\\n  DD_ADMIN_PASSWORD='' \\\n  DD_ADMIN_FIRST_NAME=Administrator \\\n  DD_ADMIN_LAST_NAME=User \\\n  DD_ALLOWED_HOSTS=\"*\" \\\n  DD_CELERY_BEAT_SCHEDULE_FILENAME=\"/run/celery-beat-schedule\" \\\n  DD_CELERY_BROKER_SCHEME=\"amqp\" \\\n  DD_CELERY_BROKER_USER=\"defectdojo\" \\\n  DD_CELERY_BROKER_PASSWORD=\"defectdojo\" \\\n  DD_CELERY_BROKER_HOST=\"rabbitmq\" \\\n  DD_CELERY_BROKER_PORT=\"5672\" \\\n  DD_CELERY_BROKER_PATH=\"//\" \\\n  DD_CELERY_LOG_LEVEL=\"INFO\" \\\n  DD_DATABASE_ENGINE=\"django.db.backends.mysql\" \\\n  DD_DATABASE_HOST=\"mysql\" \\\n  DD_DATABASE_NAME=\"defectdojo\" \\\n  DD_DATABASE_PASSWORD=\"defectdojo\" \\\n  DD_DATABASE_PORT=\"3306\" \\\n  DD_DATABASE_USER=\"defectdojo\" \\\n  DD_SECRET_KEY=\"hhZCp@D28z!n@NED*yB!ROMt+WzsY*iq\" \\\n  DD_CREDENTIAL_AES_256_KEY=\"&91a*agLqesc*0DJ+2*bAbsUZfR*4nLw\" \\\n  DD_INITIALIZE=true \\\n  DD_UWSGI_MODE=\"socket\" \\\n  DD_UWSGI_ENDPOINT=\"0.0.0.0:3031\" \\\n  DD_DJANGO_ADMIN_ENABLED=\"on\" \\\n  DD_TRACK_MIGRATIONS=\"on\"\nENTRYPOINT [\"/entrypoint-uwsgi.sh\"]"
}