{
  "startTime": 1674234273811,
  "endTime": 1674234274866,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 109,
        "lineEnd": 109,
        "columnStart": 4,
        "columnEnd": 128
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 110,
        "lineEnd": 110,
        "columnStart": 4,
        "columnEnd": 147
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 111,
        "lineEnd": 111,
        "columnStart": 4,
        "columnEnd": 126
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 112,
        "lineEnd": 112,
        "columnStart": 4,
        "columnEnd": 110
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 113,
        "lineEnd": 113,
        "columnStart": 4,
        "columnEnd": 143
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 114,
        "lineEnd": 114,
        "columnStart": 4,
        "columnEnd": 170
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 115,
        "lineEnd": 115,
        "columnStart": 4,
        "columnEnd": 126
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 212,
        "lineEnd": 212,
        "columnStart": 4,
        "columnEnd": 107
      }
    },
    {
      "rule": "curlUseHttpsUrl",
      "position": {
        "lineStart": 89,
        "lineEnd": 89,
        "columnStart": 4,
        "columnEnd": 85
      }
    },
    {
      "rule": "curlUseHttpsUrl",
      "position": {
        "lineStart": 90,
        "lineEnd": 90,
        "columnStart": 4,
        "columnEnd": 93
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 199,
        "lineEnd": 199,
        "columnStart": 4,
        "columnEnd": 45
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 106,
        "lineEnd": 106,
        "columnStart": 4,
        "columnEnd": 23
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 117,
        "lineEnd": 117,
        "columnStart": 4,
        "columnEnd": 46
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 119,
        "lineEnd": 119,
        "columnStart": 4,
        "columnEnd": 60
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 121,
        "lineEnd": 121,
        "columnStart": 4,
        "columnEnd": 50
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 123,
        "lineEnd": 123,
        "columnStart": 4,
        "columnEnd": 56
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 125,
        "lineEnd": 125,
        "columnStart": 4,
        "columnEnd": 70
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 127,
        "lineEnd": 127,
        "columnStart": 4,
        "columnEnd": 56
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 129,
        "lineEnd": 129,
        "columnStart": 4,
        "columnEnd": 42
      }
    },
    {
      "rule": "gpgUseBatchFlag",
      "position": {
        "lineStart": 101,
        "lineEnd": 101,
        "columnStart": 2,
        "columnEnd": 82
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "#//----------------------------------------------------------------------------\n#// KUSANAGI RoD (kusanagi-nginx)\n#//----------------------------------------------------------------------------\nFROM alpine:3.10\nMAINTAINER kusanagi@prime-strategy.co.jp\n\nENV PATH /bin:/usr/bin:/usr/local/bin:/sbin:/usr/sbin\n\n# add user\nRUN : \\\n        && apk update \\\n        && apk upgrade \\\n        && apk add --no-cache --virtual .user shadow \\\n        && groupadd -g 1001 www \\\n        && useradd -d /var/lib/www -s /bin/nologin -g www -M -u 1001 httpd \\\n        && groupadd -g 1000 kusanagi \\\n        && useradd -d /home/kusanagi -s /bin/nologin -g kusanagi -G www -u 1000 -m kusanagi \\\n        && chmod 755 /home/kusanagi \\\n        && apk del --purge .user \\\n        && mkdir /tmp/build \\\n        && : # END of RUN\n\nCOPY files/fast_cgiparams_CVE-2016-5387.patch /tmp/build\nCOPY files/add_dev.sh /usr/local/bin\nCOPY files/del_dev.sh /usr/local/bin\n\nENV NGINX_VERSION=1.16.0\nENV NGINX_DEPS gnupg1 \\\n\t\tgcc \\\n\t\tg++ \\\n\t\tmake  \\\n\t\tautoconf \\\n\t\tautomake \\\n\t\tpatch \\\n\t\truby-rake \\\n\t\tcurl \\\n\t\tcurl-dev \\\n\t\tmusl-dev \\\n\t\tperl-dev \\\n\t\tlibxslt-dev \\\n\t\topenssl-dev \\\n\t\tlinux-headers \\\n\t\tluajit-dev \\\n\t\tlibpng-dev \\\n\t\tfreetype-dev \\\n\t\tlibxpm-dev \\\n\t\texpat-dev \\\n\t\ttiff-dev \\\n\t\tlibxcb-dev \\\n\t\tlua-dev \\\n\t\tpcre-dev \\\n\t\tgeoip-dev \\\n\t\tgd-dev \\\n\t\truby-etc \\\n\t\truby-dev \\\n\t\tlibxpm-dev \\\n\t\tfontconfig-dev \\\n\t\tlibuuid \\\n\t\tutil-linux-dev \\\n\t\tzlib-dev \\\n\t\tgo \\\n\t\tgnupg \\\n\t\tgettext\n\n\n# prep\nRUN : \\\n\\\n\t# add build pkg\n\t&& nginx_ct_version=1.3.2 \\\n\t&& ngx_cache_purge_version=2.3 \\\n\t&& ngx_brotli_version=master \\\n\t&& naxsi_version=0.56 \\\n\t&& nps_version=1.13.35.2 \\\n\t&& GPG_KEYS=B0F4253373F8F6F510D42178520A9993A1C052F8 \\\n\t&& brotli_version=222564a95d9ab58865a096b8d9f7324ea5f2e03e \\\n\t&& naxsi_tarball_name=naxsi \\\n\t&& lua_nginx_module_name=lua-nginx-module \\\n\t&& ngx_devel_kit_version=0.3.0 \\\n\t&& LUAJIT_VERSION=2.1.0-beta3 \\\n\t&& LUA_VERSION=2.1 \\\n\t&& lua_nginx_module_version=0.10.13 \\\n\t&& CT_SUBMIT_VERSION=1.1.2 \\\n\t&& LUAJIT_LIB=/usr/lib \\\n\t&& LUAJIT_INC=/usr/include/luajit-$LUA_VERSION \\\n\t&& CC=/usr/bin/cc \\\n\t&& CXX=/usr/bin/c++ \\\n\t&& apk add --no-cache --virtual .builddep $NGINX_DEPS \\\n\t&& cd /tmp/build \\\n\t&& curl -fSL https://nginx.org/download/nginx-${NGINX_VERSION}.tar.gz -o nginx.tar.gz \\\n\t&& curl -fSL https://nginx.org/download/nginx-${NGINX_VERSION}.tar.gz.asc -o nginx.tar.gz.asc \\\n\t&& export GNUPGHOME=\"$(mktemp -d)\" \\\n\t&& found=''; \\\n\tfor server in \\\n\t\tkeys.gnupg.net \\\n\t\tha.pool.sks-keyservers.net \\\n\t\thkp://keyserver.ubuntu.com:80 \\\n\t\thkp://p80.pool.sks-keyservers.net:80 \\\n\t\tpgp.mit.edu; \\\n\tdo \\\n\t\techo \"Fetching GPG key $GPG_KEYS from $server\"; \\\n\t\tgpg --batch --keyserver \"$server\" --keyserver-options timeout=10 --recv-keys \"$GPG_KEYS\" && found=yes && break; \\\n\tdone; \\\n\ttest -z \"$found\" && echo >&2 \"error: failed to fetch GPG key $GPG_KEYS\" && exit 1; \\\n\tgpg --batch --verify nginx.tar.gz.asc nginx.tar.gz \\\n\t&& rm -rf \"$GNUPGHOME\" nginx.tar.gz.asc \\\n\t&& tar xf nginx.tar.gz \\\n\t&& mkdir nginx-${NGINX_VERSION}/extensions \\\n\t&& cd ./nginx-${NGINX_VERSION}/extensions \\\n\t&& curl -f -Lo nginx-ct-${nginx_ct_version}.tar.gz https://github.com/grahamedgecombe/nginx-ct/archive/v${nginx_ct_version}.tar.gz \\\n\t&& curl -f -Lo ngx_cache_purge-${ngx_cache_purge_version}.tar.gz https://github.com/FRiCKLE/ngx_cache_purge/archive/${ngx_cache_purge_version}.tar.gz \\\n\t&& curl -f -Lo ngx_brotli-${ngx_brotli_version}.tar.gz https://github.com/google/ngx_brotli/archive/${ngx_brotli_version}.tar.gz \\\n\t&& curl -f -Lo brotli-${brotli_version}.tar.gz https://github.com/google/brotli/archive/${brotli_version}.tar.gz \\\n\t&& curl -f -Lo ngx_devel_kit-${ngx_devel_kit_version}.tar.gz https://github.com/simplresty/ngx_devel_kit/archive/v${ngx_devel_kit_version}.tar.gz \\\n\t&& curl -f -Lo ${lua_nginx_module_name}-${lua_nginx_module_version}.tar.gz https://github.com/openresty/${lua_nginx_module_name}/archive/v${lua_nginx_module_version}.tar.gz \\\n\t&& curl -f -Lo ${naxsi_tarball_name}-${naxsi_version}.tar.gz https://github.com/nbs-system/naxsi/archive/${naxsi_version}.tar.gz \\\n\n\t&& tar xf nginx-ct-${nginx_ct_version}.tar.gz \\\n\t&& mv nginx-ct-${nginx_ct_version} nginx-ct \\\n\t&& tar xf ngx_cache_purge-${ngx_cache_purge_version}.tar.gz \\\n\t&& mv ngx_cache_purge-${ngx_cache_purge_version} ngx_cache_purge \\\n\t&& tar xf ngx_brotli-${ngx_brotli_version}.tar.gz \\\n\t&& mv ngx_brotli-${ngx_brotli_version} ngx_brotli \\\n\t&& tar xf ngx_devel_kit-${ngx_devel_kit_version}.tar.gz \\\n\t&& mv ngx_devel_kit-${ngx_devel_kit_version} ngx_devel_kit \\\n\t&& tar xf ${lua_nginx_module_name}-${lua_nginx_module_version}.tar.gz \\\n\t&& mv ${lua_nginx_module_name}-${lua_nginx_module_version} ${lua_nginx_module_name} \\\n\t&& tar xf ${naxsi_tarball_name}-${naxsi_version}.tar.gz \\\n\t&& mv ${naxsi_tarball_name}-${naxsi_version} ${naxsi_tarball_name} \\\n\t&& tar xf brotli-${brotli_version}.tar.gz \\\n\t&& (test -d ngx_brotli/deps/brotli && rmdir ngx_brotli/deps/brotli) \\\n\t&& mv brotli-${brotli_version} ngx_brotli/deps/brotli \\\n\t&& cd .. \\\n\t&& patch -p1 < ../fast_cgiparams_CVE-2016-5387.patch \\\n\n# configure\n\t&& cd /tmp/build/nginx-${NGINX_VERSION} \\\n\t&& CONF=\"\\\n\t\t--prefix=/etc/nginx \\\n\t\t--conf-path=/etc/nginx/nginx.conf \\\n\t\t--sbin-path=/usr/sbin/nginx \\\n\t\t--modules-path=/usr/lib/nginx/modules \\\n\t\t--error-log-path=/dev/stderr \\\n\t\t--http-log-path=dev/stdout \\\n\t\t--pid-path=/var/run/nginx.pid \\\n\t\t--lock-path=/var/run/nginx.lock \\\n\t\t--http-client-body-temp-path=/var/cache/nginx/client_temp \\\n\t\t--http-proxy-temp-path=/var/cache/nginx/proxy_temp \\\n\t\t--http-fastcgi-temp-path=/var/cache/nginx/fastcgi_temp \\\n\t\t--http-uwsgi-temp-path=/var/cache/nginx/uwsgi_temp \\\n\t\t--http-scgi-temp-path=/var/cache/nginx/scgi_temp \\\n\t\t--user=httpd \\\n\t\t--group=www \\\n\t\t--with-http_ssl_module \\\n\t\t--with-http_realip_module \\\n\t\t--with-http_addition_module \\\n\t\t--with-http_sub_module \\\n\t\t--with-http_dav_module \\\n\t\t--with-http_flv_module \\\n\t\t--with-http_mp4_module \\\n\t\t--with-http_gunzip_module \\\n\t\t--with-http_gzip_static_module \\\n\t\t--with-http_random_index_module \\\n\t\t--with-http_secure_link_module \\\n\t\t--with-http_stub_status_module \\\n\t\t--with-http_auth_request_module \\\n\t\t--with-http_xslt_module \\\n\t\t--with-http_image_filter_module \\\n\t\t--with-http_geoip_module \\\n\t\t--with-threads \\\n\t\t--with-stream \\\n\t\t--with-stream_ssl_module \\\n\t\t--with-stream_ssl_preread_module \\\n\t\t--with-stream_realip_module \\\n\t\t--with-stream_geoip_module \\\n\t\t--with-http_slice_module \\\n\t\t--with-mail \\\n\t\t--with-mail_ssl_module \\\n\t\t--with-compat \\\n\t\t--with-file-aio \\\n\t\t--with-http_v2_module \\\n\t    \t--with-http_image_filter_module \\\n\t\t--with-http_geoip_module \\\n\t\t--with-http_perl_module \\\n\t\t--add-module=./extensions/ngx_devel_kit \\\n\t\t--add-module=./extensions/${lua_nginx_module_name} \\\n\t\t--add-module=./extensions/ngx_cache_purge \\\n\t\t--add-module=./extensions/nginx-ct \\\n\t\t--add-module=./extensions/ngx_brotli \\\n\t\t--add-module=./extensions/${naxsi_tarball_name}/naxsi_src \\\n\t\" \\\n\t&& CFLAGS='-O2 -g -pipe -Wp,-D_FORTIFY_SOURCE=2 \\\n\t\t-fexceptions -fstack-protector \\\n\t\t-m64 -mtune=generic \\\n\t\t-Wno-deprecated-declarations \\\n\t\t-Wno-cast-function-type \\\n\t\t-Wno-unused-parameter \\\n\t\t-Wno-stringop-truncation \\\n\t\t-Wno-stringop-overflow' \\\n\t&& ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" $CONF --with-cc-opt=\"$CFLAGS\" \\\n\n# build\n\t&& make -j$(getconf _NPROCESSORS_ONLN) \\\n\t&& (find . -type f -a -name 'nginx' -o -name '*.so*' | xargs strip ; true) \\\n\t&& (find . -type f -a -name '*.so*' | xargs chmod 755 ; true) \\\n\t&& make install \\\n\t&& mkdir -p /usr/lib/nginx/modules /etc/nginx/naxsi.d \\\n\t&& install -m644 extensions/${naxsi_tarball_name}/naxsi_config/naxsi_core.rules /etc/nginx/naxsi.d/naxsi_core.rules.conf \\\n\t&& (for so in `find extensions -type f -name '*.so'`; do mv $so /usr/lib/nginx/modules ; done; true) \\\n\t&& mv /usr/bin/envsubst /tmp/ \\\n\n# add ct-submit\n\t&& curl -f -LO https://raw.githubusercontent.com/grahamedgecombe/ct-submit/v${CT_SUBMIT_VERSION}/ct-submit.go \\\n\t&& go build ct-submit.go \\\n\t&& cp ct-submit /tmp \\\n\n# remove pkg\n\t&& runDeps=\"$( \\\n\t\tscanelf --needed --nobanner --format '%n#p' /usr/sbin/nginx /usr/lib/nginx/modules/*.so /tmp/envsubst /tmp/ct-submit \\\n\t\t\t| tr ',' '\\n' \\\n\t\t\t| sort -u \\\n\t\t\t| awk 'system(\"[ -e /usr/local/lib/\" $1 \" ]\") == 0 { next } { print \"so:\" $1 }' \\\n\t)\" \\\n\t&& apk add --no-cache --virtual .nginx-rundeps $runDeps \\\n\t&& apk del --purge .builddep \\\n\n\t&& mv /tmp/envsubst /usr/bin/envsubst \\\n\t&& mv /tmp/ct-submit /usr/bin/ct-submit \\\n\t&& chmod 700 /usr/bin/ct-submit \\\n\n# setup configures\n\t&& mkdir -p -m755 /var/www/html \\\n\t\t/etc/nginx/conf.d \\\n\t\t/var/cache/nginx \\\n\t\t/var/log/nginx \\\n\t&& chown -R httpd:www /etc/nginx \\\n\t\t/var/www/html \\\n\t\t/var/cache/nginx \\\n\t\t/var/log/nginx \\\n\t\t/etc/hosts \\\n\t&& install -m644 /etc/nginx/html/50x.html /var/www/html \\\n\t&& install -m644 /etc/nginx/html/index.html /var/www/html \\\n\t&& mkdir -p -m755 /etc/nginx/scts /etc/nginx/naxsi.d /etc/nginx/conf.d/templates \\\n\t&& rm -rf /tmp/build \\\n\t&& : && rm nginx.tar.gz\n\nCOPY files/nginx.conf /etc/nginx/nginx.conf\nCOPY files/nginx_httpd.conf /etc/nginx/conf.d/_nginx.conf\nCOPY files/nginx_ssl.conf /etc/nginx/conf.d/_ssl.conf\nCOPY files/kusanagi_naxsi_core.conf /etc/nginx/conf.d/kusanagi_naxsi_core.conf\nCOPY files/naxsi.d/ /etc/nginx/naxsi.d/\nCOPY files/templates/ /etc/nginx/conf.d/\nCOPY files/security.conf /etc/nginx/conf.d/security.conf\nCOPY files/ct-submit.sh /usr/bin/ct-submit.sh\n\n# forward request and error logs to docker log collector\nRUN cd /etc/nginx/ \\\n\t&& chmod 700 /usr/bin/ct-submit.sh \\\n\t&& ln -s ../../usr/lib/nginx/modules /etc/nginx/modules \\\n\t&& apk add --no-cache tzdata openssl certbot \\\n\t&& mkdir /etc/letsencrypt /var/lib/letsencrypt /var/log/letsencrypt \\\n\t&& chown -R httpd:www /etc/letsencrypt /var/lib/letsencrypt /var/log/letsencrypt \\\n\t&& : # END of RUN\n\nARG MICROSCANNER_TOKEN\nRUN if [ x${MICROSCANNER_TOKEN} != x ] ; then \\\n\tapk add --no-cache --virtual .ca ca-certificates \\\n\t&& update-ca-certificates\\\n\t&& wget --no-check-certificate https://get.aquasec.com/microscanner \\\n\t&& chmod +x microscanner \\\n\t&& ./microscanner ${MICROSCANNER_TOKEN} || exit 1\\\n\t&& rm ./microscanner \\\n\t&& apk del --purge .ca ;\\\n    fi\n\nEXPOSE 8080\nEXPOSE 8443\n\nVOLUME /home/kusanagi\nVOLUME /etc/letsencrypt\n\nUSER httpd\nCOPY files/docker-entrypoint.sh /\nENTRYPOINT [ \"/docker-entrypoint.sh\" ]\nCMD [ \"/usr/sbin/nginx\", \"-g\", \"daemon off;\" ]\n"
}