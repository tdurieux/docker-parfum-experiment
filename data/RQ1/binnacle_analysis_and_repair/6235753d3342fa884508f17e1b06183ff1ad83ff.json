{
  "startTime": 1674248405662,
  "endTime": 1674248406014,
  "originalSmells": [
    {
      "rule": "curlUseHttpsUrl",
      "position": {
        "lineStart": 80,
        "lineEnd": 80,
        "columnStart": 4,
        "columnEnd": 83
      }
    },
    {
      "rule": "curlUseHttpsUrl",
      "position": {
        "lineStart": 81,
        "lineEnd": 81,
        "columnStart": 4,
        "columnEnd": 92
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 97,
        "lineEnd": 97,
        "columnStart": 4,
        "columnEnd": 36
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 104,
        "lineEnd": 104,
        "columnStart": 4,
        "columnEnd": 23
      }
    },
    {
      "rule": "gpgUseBatchFlag",
      "position": {
        "lineStart": 83,
        "lineEnd": 83,
        "columnStart": 4,
        "columnEnd": 70
      }
    },
    {
      "rule": "apkAddUseNoCache",
      "position": {
        "lineStart": 129,
        "lineEnd": 129,
        "columnStart": 4,
        "columnEnd": 45
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "##################\n# nginx 1.11 with lua support to build up a canary release solution.\n# Extended from https://github.com/nginxinc/docker-nginx/blob/11fc019b2be3ad51ba5d097b1857a099c4056213/mainline/alpine/Dockerfile\n##################\n\nFROM alpine:3.4\n\nMAINTAINER TDAF Team \"tdaf@tid.es\"\n\nARG NGINX_VERSION=1.11.5\nARG NDK_VERSION=0.3.0\nARG LUA_NGINX_VERSION=0.10.7\nARG GPG_KEYS=B0F4253373F8F6F510D42178520A9993A1C052F8\nARG CONFIG=\"\\\n\t--prefix=/etc/nginx \\\n\t--sbin-path=/usr/sbin/nginx \\\n\t--modules-path=/usr/lib/nginx/modules \\\n\t--conf-path=/etc/nginx/nginx.conf \\\n\t--error-log-path=/var/log/nginx/error.log \\\n\t--http-log-path=/var/log/nginx/access.log \\\n\t--pid-path=/var/run/nginx.pid \\\n\t--lock-path=/var/run/nginx.lock \\\n\t--http-client-body-temp-path=/var/cache/nginx/client_temp \\\n\t--http-proxy-temp-path=/var/cache/nginx/proxy_temp \\\n\t--http-fastcgi-temp-path=/var/cache/nginx/fastcgi_temp \\\n\t--http-uwsgi-temp-path=/var/cache/nginx/uwsgi_temp \\\n\t--http-scgi-temp-path=/var/cache/nginx/scgi_temp \\\n\t--user=nginx \\\n\t--group=nginx \\\n\t--with-http_ssl_module \\\n\t--with-http_realip_module \\\n\t--with-http_addition_module \\\n\t--with-http_sub_module \\\n\t--with-http_dav_module \\\n\t--with-http_flv_module \\\n\t--with-http_mp4_module \\\n\t--with-http_gunzip_module \\\n\t--with-http_gzip_static_module \\\n\t--with-http_random_index_module \\\n\t--with-http_secure_link_module \\\n\t--with-http_stub_status_module \\\n\t--with-http_auth_request_module \\\n\t--with-http_xslt_module=dynamic \\\n\t--with-http_image_filter_module=dynamic \\\n\t--with-http_geoip_module=dynamic \\\n\t--with-http_perl_module=dynamic \\\n\t--with-threads \\\n\t--with-stream \\\n\t--with-stream_ssl_module \\\n\t--with-http_slice_module \\\n\t--with-mail \\\n\t--with-mail_ssl_module \\\n\t--with-file-aio \\\n\t--with-http_v2_module \\\n\t--with-ipv6 \\\n  --with-ld-opt=\"-Wl,-rpath,/usr/lib64\" \\\n  --add-module=/usr/src/ngx_devel_kit-${NDK_VERSION} \\\n  --add-module=/usr/src/lua-nginx-module-${LUA_NGINX_VERSION} \\\n\t\"\n\nRUN \\\n\taddgroup -S nginx \\\n\t&& adduser -D -S -h /var/cache/nginx -s /sbin/nologin -G nginx nginx \\\n\t&& apk add --no-cache lua luajit gettext bash \\\n\t&& apk add --no-cache --virtual .build-deps \\\n\t\tgcc \\\n\t\tlibc-dev \\\n\t\tmake \\\n\t\topenssl-dev \\\n\t\tpcre-dev \\\n\t\tzlib-dev \\\n\t\tlinux-headers \\\n\t\tcurl \\\n\t\tgnupg \\\n\t\tlibxslt-dev \\\n\t\tgd-dev \\\n\t\tgeoip-dev \\\n\t\tperl-dev \\\n    lua-dev \\\n    luajit-dev \\\n\t&& curl -fSL https://nginx.org/download/nginx-$NGINX_VERSION.tar.gz -o nginx.tar.gz \\\n\t&& curl -fSL https://nginx.org/download/nginx-$NGINX_VERSION.tar.gz.asc -o nginx.tar.gz.asc \\\n\t&& export GNUPGHOME=\"$(mktemp -d)\" \\\n\t&& gpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys \"$GPG_KEYS\" \\\n\t&& gpg --batch --verify nginx.tar.gz.asc nginx.tar.gz \\\n\t&& rm -r \"$GNUPGHOME\" nginx.tar.gz.asc \\\n\t&& mkdir -p /usr/src \\\n\t&& tar -zxC /usr/src -f nginx.tar.gz \\\n\t&& rm nginx.tar.gz \\\n  && curl -fSL https://github.com/simpl/ngx_devel_kit/archive/v${NDK_VERSION}.tar.gz -o ngx_devel_kit-${NDK_VERSION}.tar.gz \\\n  && curl -fSL https://github.com/openresty/lua-nginx-module/archive/v${LUA_NGINX_VERSION}.tar.gz -o lua-nginx-module-${LUA_NGINX_VERSION}.tar.gz \\\n\t&& mkdir -p /usr/src \\\n  && tar -zxC /usr/src -f ngx_devel_kit-${NDK_VERSION}.tar.gz \\\n  && tar -zxC /usr/src -f lua-nginx-module-${LUA_NGINX_VERSION}.tar.gz \\\n\t&& rm ngx_devel_kit-${NDK_VERSION}.tar.gz \\\n\t&& rm lua-nginx-module-${LUA_NGINX_VERSION}.tar.gz \\\n\t&& cd /usr/src/nginx-$NGINX_VERSION \\\n\t&& ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" $CONFIG --with-debug \\\n\t&& make \\\n\t&& mv objs/nginx objs/nginx-debug \\\n\t&& mv objs/ngx_http_xslt_filter_module.so objs/ngx_http_xslt_filter_module-debug.so \\\n\t&& mv objs/ngx_http_image_filter_module.so objs/ngx_http_image_filter_module-debug.so \\\n\t&& mv objs/ngx_http_geoip_module.so objs/ngx_http_geoip_module-debug.so \\\n\t&& mv objs/ngx_http_perl_module.so objs/ngx_http_perl_module-debug.so \\\n\t&& ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" $CONFIG \\\n\t&& make \\\n\t&& make install \\\n\t&& rm -rf /etc/nginx/html/ \\\n\t&& mkdir /etc/nginx/conf.d/ \\\n\t&& mkdir -p /usr/share/nginx/html/ \\\n\t&& install -m644 html/index.html /usr/share/nginx/html/ \\\n\t&& install -m644 html/50x.html /usr/share/nginx/html/ \\\n\t&& install -m755 objs/nginx-debug /usr/sbin/nginx-debug \\\n\t&& install -m755 objs/ngx_http_xslt_filter_module-debug.so /usr/lib/nginx/modules/ngx_http_xslt_filter_module-debug.so \\\n\t&& install -m755 objs/ngx_http_image_filter_module-debug.so /usr/lib/nginx/modules/ngx_http_image_filter_module-debug.so \\\n\t&& install -m755 objs/ngx_http_geoip_module-debug.so /usr/lib/nginx/modules/ngx_http_geoip_module-debug.so \\\n\t&& install -m755 objs/ngx_http_perl_module-debug.so /usr/lib/nginx/modules/ngx_http_perl_module-debug.so \\\n\t&& ln -s ../../usr/lib/nginx/modules /etc/nginx/modules \\\n\t&& strip /usr/sbin/nginx* \\\n\t&& strip /usr/lib/nginx/modules/*.so \\\n\t&& runDeps=\"$( \\\n\t\tscanelf --needed --nobanner /usr/sbin/nginx /usr/lib/nginx/modules/*.so \\\n\t\t\t| awk '{ gsub(/,/, \"\\nso:\", $2); print \"so:\" $2 }' \\\n\t\t\t| sort -u \\\n\t\t\t| xargs -r apk info --installed \\\n\t\t\t| sort -u \\\n\t)\" \\\n\t&& mkdir -p /var/run/nginx \\\n\t&& chown -R nginx:nginx /var/run/nginx \\\n\t&& apk add --no-cache --virtual .nginx-rundeps $runDeps \\\n\t&& apk del .build-deps \\\n\t&& rm -rf /usr/src\n\nADD config /etc/nginx/\nADD *.sh /usr/bin/\n\nVOLUME /etc/nginx/conf.d /etc/nginx/canary /var/log/nginx\n\nEXPOSE 8080\n\nENTRYPOINT [\"/usr/bin/nginx-docker-entrypoint.sh\"]\n"
}