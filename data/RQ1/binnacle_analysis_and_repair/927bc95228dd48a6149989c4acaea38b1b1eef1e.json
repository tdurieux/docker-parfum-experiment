{
  "startTime": 1674244900427,
  "endTime": 1674244900519,
  "originalSmells": [
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 15,
        "lineEnd": 15,
        "columnStart": 4,
        "columnEnd": 36
      }
    },
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 24,
        "lineEnd": 24,
        "columnStart": 4,
        "columnEnd": 36
      }
    },
    {
      "rule": "apkAddUseNoCache",
      "position": {
        "lineStart": 9,
        "lineEnd": 9,
        "columnStart": 4,
        "columnEnd": 29
      }
    },
    {
      "rule": "apkAddUseNoCache",
      "position": {
        "lineStart": 30,
        "lineEnd": 30,
        "columnStart": 4,
        "columnEnd": 21
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "ARG NODE_VERSION=8.11\n\nFROM node:${NODE_VERSION}-alpine as builder\n\nLABEL maintainer=\"SparkSwap <dev@sparkswap.com>\"\n\nRUN apk update && apk --no-cache add bash ca-certificates g++ git make openssl python wget && \\\n    wget -q -O /etc/apk/keys/sgerrand.rsa.pub https://alpine-pkgs.sgerrand.com/sgerrand.rsa.pub && \\\n    wget -q https://github.com/sgerrand/alpine-pkg-glibc/releases/download/2.28-r0/glibc-2.28-r0.apk && \\\n    apk add --no-cache glibc-2.28-r0.apk\n\nWORKDIR /home/app\n\nCOPY . /home/app\n\nRUN npm install --quiet --production && npm cache clean --force;\n# --no-docker is set so we don't get into an infinite loop\n# --no-identity makes it so we do not generate keys for the daemons identity because we do this externally\n# --no-certs  makes it so we do not re-generate tls certs for the daemon because we do this externally\nRUN npm run build -- --no-docker --no-identity --no-certs\n\n# Go into broker-cli to install node modules\nWORKDIR /home/app/broker-cli\n\nRUN npm install --quiet --production && npm cache clean --force;\n\n# Create a final image as this will be < 50% the size of the build image\nFROM node:${NODE_VERSION}-alpine as final\n\nRUN apk update\nRUN apk add --no-cache bash curl\n\n# Copy the application\nCOPY --from=builder /home/app/broker-daemon /home/app/broker-daemon\nCOPY --from=builder /home/app/broker-cli /home/app/broker-cli\nCOPY --from=builder /home/app/scripts/start-sparkswapd.sh /home/app/scripts/start-sparkswapd.sh\nCOPY --from=builder /home/app/package.json /home/app/package.json\nCOPY --from=builder /home/app/pm2.json /home/app/pm2.json\n\n# Copy relayer-proto files\nCOPY --from=builder /home/app/proto /home/app/proto\n\n# Copy node_modules\nCOPY --from=builder /home/app/node_modules /home/app/node_modules\nCOPY --from=builder /home/app/broker-cli/node_modules /home/app/broker-cli/node_modules\n\n# Broker CLI expects config to be at ~/.sparkswap, so we need the default docker user's home\n# directory to install our container config into\nARG USER_HOME=/root\n\n# Copy configuration file for use inside the container\nCOPY --from=builder /home/app/broker-cli/container-config.js ${USER_HOME}/.sparkswap/config.js\n\n# Set path so we can directly use `sparkswap` command\nENV PATH=\"./broker-cli/bin:${PATH}\"\n\nWORKDIR /home/app\n\nCMD [\"bash\", \"-c\", \"npm run start-sparkswapd\"]\n"
}