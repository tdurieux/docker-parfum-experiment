{
  "startTime": 1674243654895,
  "endTime": 1674243655324,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 102,
        "lineEnd": 102,
        "columnStart": 4,
        "columnEnd": 19
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 99,
        "lineEnd": 99,
        "columnStart": 4,
        "columnEnd": 59
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 99,
        "lineEnd": 99,
        "columnStart": 4,
        "columnEnd": 59
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM debian:stretch-slim\n\nLABEL maintainer=\"NGINX Docker Maintainers <docker-maint@nginx.com>\"\n\nENV NGINX_VERSION 1.15.7-1~stretch\nENV NJS_VERSION   1.15.7.0.2.6-1~stretch\n\nRUN set -x \\\n\t&& apt-get update \\\n\t&& apt-get install --no-install-recommends --no-install-suggests -y gnupg1 apt-transport-https ca-certificates \\\n\t&& \\\n\tNGINX_GPGKEY=573BFD6B3D8FBC641079A6ABABF5BD827BD9BF62; \\\n\tfound=''; \\\n\tfor server in \\\n\t\tha.pool.sks-keyservers.net \\\n\t\thkp://keyserver.ubuntu.com:80 \\\n\t\thkp://p80.pool.sks-keyservers.net:80 \\\n\t\tpgp.mit.edu \\\n\t; do \\\n\t\techo \"Fetching GPG key $NGINX_GPGKEY from $server\"; \\\n\t\tapt-key adv --keyserver \"$server\" --keyserver-options timeout=10 --recv-keys \"$NGINX_GPGKEY\" && found=yes && break; \\\n\tdone; \\\n\ttest -z \"$found\" && echo >&2 \"error: failed to fetch GPG key $NGINX_GPGKEY\" && exit 1; \\\n\tapt-get remove --purge --auto-remove -y gnupg1 && rm -rf /var/lib/apt/lists/* \\\n\t&& dpkgArch=\"$(dpkg --print-architecture)\" \\\n\t&& nginxPackages=\" \\\n\t\tnginx=${NGINX_VERSION} \\\n\t\tnginx-module-xslt=${NGINX_VERSION} \\\n\t\tnginx-module-geoip=${NGINX_VERSION} \\\n\t\tnginx-module-image-filter=${NGINX_VERSION} \\\n\t\tnginx-module-njs=${NJS_VERSION} \\\n\t\" \\\n\t&& case \"$dpkgArch\" in \\\n\t\tamd64|i386) \\\n# arches officialy built by upstream\n\t\t\techo \"deb https://nginx.org/packages/mainline/debian/ stretch nginx\" >> /etc/apt/sources.list.d/nginx.list \\\n\t\t\t&& apt-get update \\\n\t\t\t;; \\\n\t\t*) \\\n# we're on an architecture upstream doesn't officially build for\n# let's build binaries from the published source packages\n\t\t\techo \"deb-src https://nginx.org/packages/mainline/debian/ stretch nginx\" >> /etc/apt/sources.list.d/nginx.list \\\n\t\t\t\\\n# new directory for storing sources and .deb files\n\t\t\t&& tempDir=\"$(mktemp -d)\" \\\n\t\t\t&& chmod 777 \"$tempDir\" \\\n# (777 to ensure APT's \"_apt\" user can access it too)\n\t\t\t\\\n# save list of currently-installed packages so build dependencies can be cleanly removed later\n\t\t\t&& savedAptMark=\"$(apt-mark showmanual)\" \\\n\t\t\t\\\n# build .deb files from upstream's source packages (which are verified by apt-get)\n\t\t\t&& apt-get update \\\n\t\t\t&& apt-get build-dep -y $nginxPackages \\\n\t\t\t&& ( \\\n\t\t\t\tcd \"$tempDir\" \\\n\t\t\t\t&& DEB_BUILD_OPTIONS=\"nocheck parallel=$(nproc)\" \\\n\t\t\t\t\tapt-get source --compile $nginxPackages \\\n\t\t\t) \\\n# we don't remove APT lists here because they get re-downloaded and removed later\n\t\t\t\\\n# reset apt-mark's \"manual\" list so that \"purge --auto-remove\" will remove all build dependencies\n# (which is done after we install the built packages so we don't have to redownload any overlapping dependencies)\n\t\t\t&& apt-mark showmanual | xargs apt-mark auto > /dev/null \\\n\t\t\t&& { [ -z \"$savedAptMark\" ] || apt-mark manual $savedAptMark; } \\\n\t\t\t\\\n# create a temporary local APT repo to install from (so that dependency resolution can be handled by APT, as it should be)\n\t\t\t&& ls -lAFh \"$tempDir\" \\\n\t\t\t&& ( cd \"$tempDir\" && dpkg-scanpackages . > Packages ) \\\n\t\t\t&& grep '^Package: ' \"$tempDir/Packages\" \\\n\t\t\t&& echo \"deb [ trusted=yes ] file://$tempDir ./\" > /etc/apt/sources.list.d/temp.list \\\n# work around the following APT issue by using \"Acquire::GzipIndexes=false\" (overriding \"/etc/apt/apt.conf.d/docker-gzip-indexes\")\n#   Could not open file /var/lib/apt/lists/partial/_tmp_tmp.ODWljpQfkE_._Packages - open (13: Permission denied)\n#   ...\n#   E: Failed to fetch store:/var/lib/apt/lists/partial/_tmp_tmp.ODWljpQfkE_._Packages  Could not open file /var/lib/apt/lists/partial/_tmp_tmp.ODWljpQfkE_._Packages - open (13: Permission denied)\n\t\t\t&& apt-get -o Acquire::GzipIndexes=false update \\\n\t\t\t;; \\\n\tesac \\\n\t\\\n\t&& apt-get install --no-install-recommends --no-install-suggests -y \\\n\t\t\t\t\t\t$nginxPackages \\\n\t\t\t\t\t\tgettext-base \\\n\t&& apt-get remove --purge --auto-remove -y apt-transport-https ca-certificates && rm -rf /var/lib/apt/lists/* /etc/apt/sources.list.d/nginx.list \\\n\t\\\n# if we have leftovers from building, let's purge them (including extra, unnecessary build deps)\n\t&& if [ -n \"$tempDir\" ]; then \\\n\t\tapt-get purge -y --auto-remove \\\n\t\t&& rm -rf \"$tempDir\" /etc/apt/sources.list.d/temp.list; \\\n\tfi\n\n# forward request and error logs to docker log collector\nRUN ln -sf /dev/stdout /var/log/nginx/access.log \\\n\t&& ln -sf /dev/stderr /var/log/nginx/error.log\n\nEXPOSE 80 443\n\nSTOPSIGNAL SIGTERM\n\nRUN apt-get update \\\n\t&& apt-get install --no-install-recommends -y -q wget curl unzip lsb-release runit && rm -rf /var/lib/apt/lists/*;\n\nENV CT_URL https://releases.hashicorp.com/consul-template/0.19.5/consul-template_0.19.5_linux_amd64.zip\nRUN curl -f -O $CT_URL\nRUN unzip consul-template_0.19.5_linux_amd64.zip -d /usr/local/bin\n# https://releases.hashicorp.com/consul-template/0.19.5/\nADD nginx.service /etc/service/nginx/run\nADD consul-template.service /etc/service/consul-template/run\nRUN chmod +x /etc/service/nginx/run\nRUN chmod +x /etc/service/consul-template/run\n\nRUN rm -v /etc/nginx/conf.d/*\nADD nginx.conf /etc/consul-templates/nginx.conf\nADD index.html /etc/consul-templates/index.html\n\nCMD [\"/usr/bin/runsvdir\", \"/etc/service\"]\n"
}