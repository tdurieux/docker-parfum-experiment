{
  "startTime": 1674240522572,
  "endTime": 1674240522703,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 29,
        "lineEnd": 29,
        "columnStart": 2,
        "columnEnd": 92
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 27,
        "lineEnd": 27,
        "columnStart": 2,
        "columnEnd": 157
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM rocker/r-ver:3.5.0\n\nLABEL maintainer=\"Scott Came (scottcame10@gmail.com)\" \\\n  org.label-schema.description=\"Image with shiny-server 1.5.7.907 and R 3.5.0 that supports SAML assertions in session\" \\\n  org.label-schema.vcs-url=\"https://github.com/scottcame/shiny-microservice-demo/docker/shiny\" \\\n  license=\"AGPLv3\"\n\n# Underlying Shiny Server software is licensed under the GNU Affero Public License.\n# See https://github.com/rstudio/shiny-server/blob/master/COPYING for details.\n\n#     This program is free software: you can redistribute it and/or modify\n#     it under the terms of the GNU Affero General Public License as published by\n#     the Free Software Foundation, either version 3 of the License, or\n#     (at your option) any later version.\n#\n#     This program is distributed in the hope that it will be useful,\n#     but WITHOUT ANY WARRANTY; without even the implied warranty of\n#     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n#     GNU Affero General Public License for more details.\n#\n#     You should have received a copy of the GNU Affero General Public License\n#     along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\n# We need to build to a specific version of shiny-server, since we will be editing some of the node js files\n# This also gives us the opportunity to include some additional libraries/packages that we need\n\nRUN apt-get update && \\\n  apt-get install --no-install-recommends -y net-tools libssl-dev libxml2-dev gdebi-core pandoc pandoc-citeproc libcurl4-gnutls-dev libcairo2-dev libxt-dev curl libmariadbclient-dev && \\\n  cd /tmp && \\\n  curl -f -O https://download3.rstudio.org/ubuntu-14.04/x86_64/shiny-server-1.5.7.907-amd64.deb && \\\n  R -e 'install.packages(c(\"xml2\", \"lubridate\", \"tidyverse\", \"shiny\", \"rmarkdown\", \"RMariaDB\"), repos=\"https://cran.rstudio.com/\")' && \\\n  gdebi -n shiny-server-1.5.7.907-amd64.deb && \\\n  rm shiny-server-1.5.7.907-amd64.deb && rm -rf /var/lib/apt/lists/*\n\nCOPY files/shiny-server.conf /etc/shiny-server/\n\n# Here we apply edits to pass around whitelisted headers defined in files/header-whitelist.js\n# With some effort, this could be refactored to support a config parameter, but this is the minimal thing needed to meet the objectives of the demo\n# These edits were based upon those in this PR: https://github.com/rstudio/shiny-server/pull/257\n\nRUN sed -i \\\n  -e \"17c\\    exitPromise, kill, headers) {\" \\\n  -e \"25i\\  this.headers=headers;\" \\\n  /opt/shiny-server/lib/worker/app-worker-handle.js\n\nRUN sed -i \\\n  -e \"23ivar whitelistedHeaders = require('../header-whitelist').headerWhitelist;\" \\\n  -e \"121i\\    var headers = _.pick(conn.headers, whitelistedHeaders);\" \\\n  -e \"129c\\      wrk = schedulerRegistry.getWorker(appSpec, 'ws', null, headers);\" \\\n  -e \"167c\\      wsClient = appWorkerHandle.endpoint.createWebSocketClient(pathInfo, headers);\" \\\n  /opt/shiny-server/lib/proxy/sockjs.js\n\nRUN sed -i \\\n  -e \"25ivar whitelistedHeaders = require('../header-whitelist').headerWhitelist;\" \\\n  -e \"138i\\      var headers = _.pick(req.headers, whitelistedHeaders);\" \\\n  -e \"144c\\        wrk = schedulerRegistry.getWorker(appSpec, pathname, worker, headers);\" \\\n  /opt/shiny-server/lib/proxy/http.js\n\nRUN sed -i \\\n  -e \"66c\\  this.getWorker = function(appSpec, url, worker, headers) {\" \\\n  -e \"77c\\    return this.\\$schedulers[key].acquireWorker(appSpec, url, worker, headers);\" \\\n  /opt/shiny-server/lib/scheduler/scheduler-registry.js\n\nRUN sed -i \\\n  -e \"226c\\          _.bind(appWorker.kill, appWorker, workerData.headers));\" \\\n  /opt/shiny-server/lib/scheduler/scheduler.js\n\nRUN sed -i \\\n  -e \"34c\\        this.acquireWorker = function(appSpec, url, worker, headers) {\" \\\n  -e \"71c\\            return this.spawnWorker(appSpec, {headers: headers});\" \\\n  /opt/shiny-server/lib/scheduler/simple-scheduler.js\n\nCOPY files/header-whitelist.js /opt/shiny-server/lib/\n\n# We also need to modify the hardcoded list of passed-thru headers in sockjs, to add the one that Shibboleth SP adds to each request containing\n#  the address at which the user's assertion is available\n\nRUN sed -i '169i     ref.push(\"shib-assertion-01\");' /opt/shiny-server/node_modules/sockjs/lib/transport.js\n\n# uncomment if you want all the shiny examples available\n# RUN cp -R /usr/local/lib/R/site-library/shiny/examples/* /srv/shiny-server/\n\nRUN mkdir -p /srv/shiny-server/hostinfo\nRUN mkdir -p /srv/shiny-server/saml\n\nCOPY files/hostinfo/app.R /srv/shiny-server/hostinfo/\nCOPY files/saml/app.R /srv/shiny-server/saml/\nCOPY files/db-access/app.R /srv/shiny-server/db-access/\nCOPY files/db-access-secure/app.R /srv/shiny-server/db-access-secure/\n\nRUN mkdir -p /var/log/shiny-server\n\n# If docker exec-ing into a running container, 99 times out of 100 you want to be in the app logs directory, so here you go...\nWORKDIR /var/log/shiny-server\n\nCMD [\"/opt/shiny-server/bin/shiny-server\"]\n"
}