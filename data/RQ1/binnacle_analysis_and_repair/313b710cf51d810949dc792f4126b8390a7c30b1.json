{
  "startTime": 1674243750419,
  "endTime": 1674243750717,
  "originalSmells": [
    {
      "rule": "mkdirUsrSrcThenRemove",
      "position": {
        "lineStart": 60,
        "lineEnd": 60,
        "columnStart": 4,
        "columnEnd": 22
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 83,
        "lineEnd": 102,
        "columnStart": 7,
        "columnEnd": 33
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "#\n# NOTE: THIS DOCKERFILE IS GENERATED VIA \"update.sh\"\n#\n# PLEASE DO NOT EDIT IT DIRECTLY.\n#\n\nFROM alpine:3.4\n\n# persistent / runtime deps\nENV PHPIZE_DEPS \\\n        autoconf \\\n        file \\\n        g++ \\\n        gcc \\\n        libc-dev \\\n        make \\\n        pkgconf \\\n        re2c\nRUN apk add --no-cache --virtual .persistent-deps \\\n        ca-certificates \\\n        curl \\\n        tar \\\n        xz\n\n# ensure www-data user exists\nRUN set -x \\\n    && addgroup -g 82 -S www-data \\\n    && adduser -u 82 -D -S -G www-data www-data\n# 82 is the standard uid/gid for \"www-data\" in Alpine\n# http://git.alpinelinux.org/cgit/aports/tree/main/apache2/apache2.pre-install?h=v3.3.2\n# http://git.alpinelinux.org/cgit/aports/tree/main/lighttpd/lighttpd.pre-install?h=v3.3.2\n# http://git.alpinelinux.org/cgit/aports/tree/main/nginx-initscripts/nginx-initscripts.pre-install?h=v3.3.2\n\nENV PHP_INI_DIR /usr/local/etc/php\nRUN mkdir -p $PHP_INI_DIR/conf.d\n\n##<autogenerated>##\nENV PHP_EXTRA_CONFIGURE_ARGS --enable-fpm --with-fpm-user=www-data --with-fpm-group=www-data\n##</autogenerated>##\n\n# Apply stack smash protection to functions using local buffers and alloca()\n# Make PHP's main executable position-independent (improves ASLR security mechanism, and has no performance impact on x86_64)\n# Enable optimization (-O2)\n# Enable linker optimization (this sorts the hash buckets to improve cache locality, and is non-default)\n# Adds GNU HASH segments to generated executables (this is used if present, and is much faster than sysv hash; in this configuration, sysv hash is also generated)\n# https://github.com/docker-library/php/issues/272\nENV PHP_CFLAGS=\"-fstack-protector-strong -fpic -fpie -O2\"\nENV PHP_CPPFLAGS=\"$PHP_CFLAGS\"\nENV PHP_LDFLAGS=\"-Wl,-O1 -Wl,--hash-style=both -pie\"\n\nENV PHP_VERSION 5.3.28\nENV PHP_URL=\"https://secure.php.net/get/php-${PHP_VERSION}.tar.gz/from/this/mirror\" PHP_ASC_URL=\"https://secure.php.net/get/php-${PHP_VERSION}.tar.gz.asc/from/this/mirror\"\n\nRUN set -xe; \\\n\n    apk add --no-cache --virtual .fetch-deps \\\n        gnupg \\\n        openssl \\\n    ; \\\n\n    mkdir -p /usr/src; rm -rf /usr/src \\\n    cd /usr/src; \\\n\n    wget -O php.tar.gz \"$PHP_URL\"; \\\n\n    apk del .fetch-deps\n\nCOPY docker-php-source /usr/local/bin/\n\nRUN set -xe \\\n    && apk add --no-cache --virtual .build-deps \\\n        $PHPIZE_DEPS \\\n        curl-dev \\\n        libedit-dev \\\n        libxml2-dev \\\n        openssl-dev \\\n        sqlite-dev \\\n    \\\n    && export CFLAGS=\"$PHP_CFLAGS\" \\\n        CPPFLAGS=\"$PHP_CPPFLAGS\" \\\n        LDFLAGS=\"$PHP_LDFLAGS\" \\\n    && docker-php-source extract \\\n    && cd /usr/src/php \\\n    && ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" \\\n        --with-config-file-path=\"$PHP_INI_DIR\" \\\n        --with-config-file-scan-dir=\"$PHP_INI_DIR/conf.d\" \\\n\n        --disable-cgi \\\n\n# --enable-ftp is included here because ftp_ssl_connect() needs ftp to be compiled statically (see https://github.com/docker-library/php/issues/236)\n        --enable-ftp \\\n# --enable-mbstring is included here because otherwise there's no way to get pecl to use it properly (see https://github.com/docker-library/php/issues/195)\n        --enable-mbstring \\\n# --enable-mysqlnd is included here because it's harder to compile after the fact than extensions are (since it's a plugin for several extensions, not an extension in itself)\n        --enable-mysqlnd \\\n\n        --with-curl \\\n        --with-libedit \\\n        --with-openssl \\\n        --with-zlib \\\n        --with-mhash \\\n        \\\n        $PHP_EXTRA_CONFIGURE_ARGS \\\n    && make -j \"$(getconf _NPROCESSORS_ONLN)\" \\\n    && make install \\\n    && { find /usr/local/bin /usr/local/sbin -type f -perm +0111 -exec strip --strip-all '{}' + || true; } \\\n    && make clean \\\n    && docker-php-source delete \\\n\n    && runDeps=\"$( \\\n        scanelf --needed --nobanner --recursive /usr/local \\\n            | awk '{ gsub(/,/, \"\\nso:\", $2); print \"so:\" $2 }' \\\n            | sort -u \\\n            | xargs -r apk info --installed \\\n            | sort -u \\\n    )\" \\\n    && apk add --no-cache --virtual .php-rundeps $runDeps \\\n\n    && apk del .build-deps\n\nCOPY docker-php-ext-* docker-php-entrypoint /usr/local/bin/\n\nENTRYPOINT [\"docker-php-entrypoint\"]\nWORKDIR /var/www/html\n\nRUN set -ex \\\n    && cd /usr/local/etc \\\n    && if [ -d php-fpm.d ]; then \\\n        # for some reason, upstream's php-fpm.conf.default has \"include=NONE/etc/php-fpm.d/*.conf\"\n        sed 's!=NONE/!=!g' php-fpm.conf.default | tee php-fpm.conf > /dev/null; \\\n        cp php-fpm.d/www.conf.default php-fpm.d/www.conf; \\\n    else \\\n        # PHP 5.x doesn't use \"include=\" by default, so we'll create our own simple config that mimics PHP 7+ for consistency\n        mkdir php-fpm.d; \\\n        cp php-fpm.conf.default php-fpm.d/www.conf; \\\n        { \\\n            echo '[global]'; \\\n            echo 'include=etc/php-fpm.d/*.conf'; \\\n        } | tee php-fpm.conf; \\\n    fi \\\n    && { \\\n        echo '[global]'; \\\n        echo 'error_log = /proc/self/fd/2'; \\\n        echo; \\\n        echo '[www]'; \\\n        echo '; if we send this to /proc/self/fd/1, it never appears'; \\\n        echo 'access.log = /proc/self/fd/2'; \\\n        echo; \\\n        echo '; Ensure worker stdout and stderr are sent to the main error log.'; \\\n        echo 'catch_workers_output = yes'; \\\n    } | tee php-fpm.d/docker.conf \\\n    && { \\\n        echo '[global]'; \\\n        echo 'daemonize = no'; \\\n        echo; \\\n        echo '[www]'; \\\n        echo 'listen = 9000'; \\\n    } | tee php-fpm.d/zz-docker.conf \\\n  && sed -i 's/^listen =/;listen =/' /usr/local/etc/php-fpm.d/www.conf \\\n  && sed -i 's/^listen =/;listen =/' /usr/local/etc/php-fpm.conf.default\n\nEXPOSE 9000\nCMD [\"php-fpm\"]\n"
}