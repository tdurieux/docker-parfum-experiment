{
  "startTime": 1674239314601,
  "endTime": 1674239315667,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 61,
        "lineEnd": 61,
        "columnStart": 7,
        "columnEnd": 148
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 72,
        "lineEnd": 72,
        "columnStart": 7,
        "columnEnd": 79
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 96,
        "lineEnd": 96,
        "columnStart": 7,
        "columnEnd": 72
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 113,
        "lineEnd": 113,
        "columnStart": 7,
        "columnEnd": 83
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 153,
        "lineEnd": 153,
        "columnStart": 7,
        "columnEnd": 114
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 179,
        "lineEnd": 179,
        "columnStart": 7,
        "columnEnd": 110
      }
    },
    {
      "rule": "curlUseHttpsUrl",
      "position": {
        "lineStart": 179,
        "lineEnd": 179,
        "columnStart": 7,
        "columnEnd": 110
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 88,
        "lineEnd": 88,
        "columnStart": 7,
        "columnEnd": 83
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 99,
        "lineEnd": 99,
        "columnStart": 7,
        "columnEnd": 100
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 117,
        "lineEnd": 117,
        "columnStart": 7,
        "columnEnd": 65
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 128,
        "lineEnd": 128,
        "columnStart": 7,
        "columnEnd": 65
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 158,
        "lineEnd": 158,
        "columnStart": 7,
        "columnEnd": 245
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 183,
        "lineEnd": 183,
        "columnStart": 7,
        "columnEnd": 69
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 201,
        "lineEnd": 201,
        "columnStart": 7,
        "columnEnd": 141
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 213,
        "lineEnd": 213,
        "columnStart": 7,
        "columnEnd": 104
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 225,
        "lineEnd": 225,
        "columnStart": 7,
        "columnEnd": 83
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 63,
        "lineEnd": 63,
        "columnStart": 7,
        "columnEnd": 46
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 74,
        "lineEnd": 74,
        "columnStart": 7,
        "columnEnd": 49
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 97,
        "lineEnd": 97,
        "columnStart": 7,
        "columnEnd": 49
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 115,
        "lineEnd": 115,
        "columnStart": 7,
        "columnEnd": 51
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 180,
        "lineEnd": 180,
        "columnStart": 7,
        "columnEnd": 52
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 37,
        "lineEnd": 49,
        "columnStart": 4,
        "columnEnd": 16
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 136,
        "lineEnd": 148,
        "columnStart": 4,
        "columnEnd": 14
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 188,
        "lineEnd": 191,
        "columnStart": 4,
        "columnEnd": 11
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# NOTE: This is only for Linux\n# NOTE: This downloads Qt and builds it statically, so this can take a long time\n\n# To run this, execute in the root of the repository\n#    docker build -t loki-gui-image .\n\n# Then execute the script in the root of the repository to copy out the release\n# binaries into build/release/bin\n#    ./collect_from_docker_container.sh\n\n# This produces a loki-wallet-gui binary with the following dependencies\n# linux-vdso.so.1\n# libxcb-glx.so.0\n# libX11-xcb.so.1\n# libxcb.so.1\n# libX11.so.6\n# libfontconfig.so.1\n# libfreetype.so.6\n# libdl.so.2\n# librt.so.1\n# libGL.so.1\n# libpthread.so.0\n# libm.so.6\n# libc.so.6\n# /lib64/ld-linux-x86-64.so.2\n# libXau.so.6\n# libXdmcp.so.6\n# libexpat.so.1\n# libz.so.1\n# libGLX.so.0\n# libGLdispatch.so.0\n# libbsd.so.0\n\nFROM ubuntu:16.04 as builder\n\nRUN set -ex && \\\n    apt-get update && \\\n    apt-get --no-install-recommends --yes install \\\n        ca-certificates \\\n        cmake \\\n        g++ \\\n        make \\\n        pkg-config \\\n        graphviz \\\n        doxygen \\\n        git \\\n        curl \\\n        libtool-bin \\\n        autoconf \\\n        automake && rm -rf /var/lib/apt/lists/*;\n\nARG NUM_COMPILE_JOBS=1\nWORKDIR /usr/local\n\n# NOTE: We install boost and openssl to their default locations because the GUI\n# script is less flexible and it sets us up for success in the general case if\n# it's in a common location.\nARG BOOST_VERSION=1_66_0\nARG BOOST_VERSION_DOT=1.66.0\nARG BOOST_HASH=5721818253e6a0989583192f96782c4a98eb6204965316df9f5ad75819225ca9\nRUN set -ex \\\n    && curl -f -L -o  boost_${BOOST_VERSION}.tar.bz2 https://dl.bintray.com/boostorg/release/${BOOST_VERSION_DOT}/source/boost_${BOOST_VERSION}.tar.bz2 \\\n    && echo \"${BOOST_HASH}  boost_${BOOST_VERSION}.tar.bz2\" | sha256sum -c \\\n    && tar -xvf boost_${BOOST_VERSION}.tar.bz2 \\\n    && cd boost_${BOOST_VERSION} \\\n    && ./bootstrap.sh --prefix=/usr/ \\\n    && ./b2 -j${NUM_COMPILE_JOBS} --build-type=minimal link=static runtime-link=static --with-chrono --with-date_time --with-filesystem --with-program_options --with-regex --with-serialization --with-system --with-thread --with-locale threading=multi threadapi=pthread cflags=\"-fPIC\" cxxflags=\"-fPIC\" stage install && rm boost_${BOOST_VERSION}.tar.bz2\nENV BOOST_ROOT /usr/\n\nARG OPENSSL_VERSION=1.0.2n\nARG OPENSSL_HASH=370babb75f278c39e0c50e8c4e7493bc0f18db6867478341a832a982fd15a8fe\nRUN set -ex \\\n    && curl -f -O https://www.openssl.org/source/openssl-${OPENSSL_VERSION}.tar.gz \\\n    && echo \"${OPENSSL_HASH}  openssl-${OPENSSL_VERSION}.tar.gz\" | sha256sum -c \\\n    && tar -xzf openssl-${OPENSSL_VERSION}.tar.gz \\\n    && cd openssl-${OPENSSL_VERSION} \\\n    && ./Configure --prefix=/usr/ linux-x86_64 no-shared --static -fPIC \\\n    && make build_crypto build_ssl -j${NUM_COMPILE_JOBS} \\\n    && make install && rm openssl-${OPENSSL_VERSION}.tar.gz\nENV OPENSSL_ROOT_DIR=/usr/\n\nARG ZMQ_VERSION=v4.2.3\nARG ZMQ_HASH=3226b8ebddd9c6c738ba42986822c26418a49afb\nRUN set -ex \\\n    && git clone https://github.com/zeromq/libzmq.git -b ${ZMQ_VERSION} --depth=1 \\\n    && cd libzmq \\\n    && test `git rev-parse HEAD` = ${ZMQ_HASH} || exit 1 \\\n    && ./autogen.sh \\\n    && CFLAGS=\"-fPIC\" CXXFLAGS=\"-fPIC\" ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --enable-static --disable-shared \\\n    && make -j${NUM_COMPILE_JOBS} \\\n    && make install \\\n    && ldconfig\n\nARG NCURSES_VERSION=6.1\nARG READLINE_HASH=750d437185286f40a369e1e4f4764eda932b9459b5ec9a731628393dd3d32334\nRUN set -ex \\\n    && curl -f -O ftp://ftp.invisible-island.net/ncurses/ncurses-6.1.tar.gz \\\n    && tar -xzf ncurses-${NCURSES_VERSION}.tar.gz \\\n    && cd ncurses-${NCURSES_VERSION} \\\n    && CFLAGS=\"-fPIC\" CXXFLAGS=\"-P -fPIC\" ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --prefix=/usr/ --enable-termcap --with-termlib \\\n    && make -j${NUM_COMPILE_JOBS} \\\n    && make install && rm ncurses-${NCURSES_VERSION}.tar.gz\n\nARG CPPZMQ_HASH=6aa3ab686e916cb0e62df7fa7d12e0b13ae9fae6\nRUN set -ex \\\n    && git clone https://github.com/zeromq/cppzmq.git -b ${ZMQ_VERSION} --depth=1 \\\n    && cd cppzmq \\\n    && test `git rev-parse HEAD` = ${CPPZMQ_HASH} || exit 1 \\\n    && cp *.hpp /usr/local/include\n\nARG READLINE_VERSION=7.0\nARG READLINE_HASH=750d437185286f40a369e1e4f4764eda932b9459b5ec9a731628393dd3d32334\nRUN set -ex \\\n    && curl -f -O https://ftp.gnu.org/gnu/readline/readline-${READLINE_VERSION}.tar.gz \\\n    && echo \"${READLINE_HASH}  readline-${READLINE_VERSION}.tar.gz\" | sha256sum -c \\\n    && tar -xzf readline-${READLINE_VERSION}.tar.gz \\\n    && cd readline-${READLINE_VERSION} \\\n    && CFLAGS=\"-fPIC\" CXXFLAGS=\"-fPIC\" ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --prefix=/usr/ \\\n    && make -j${NUM_COMPILE_JOBS} \\\n    && make install && rm readline-${READLINE_VERSION}.tar.gz\n\nARG SODIUM_VERSION=1.0.16\nARG SODIUM_HASH=675149b9b8b66ff44152553fb3ebf9858128363d\nRUN set -ex \\\n    && git clone https://github.com/jedisct1/libsodium.git -b ${SODIUM_VERSION} --depth=1 \\\n    && cd libsodium \\\n    && test `git rev-parse HEAD` = ${SODIUM_HASH} || exit 1 \\\n    && ./autogen.sh \\\n    && CFLAGS=\"-fPIC\" CXXFLAGS=\"-fPIC\" ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --prefix=/usr/ \\\n    && make -j${NUM_COMPILE_JOBS} \\\n    && make install\n\n# Setup gui dependencies\n# QT External Dependencies\nRUN set -ex && \\\n    apt-get update && \\\n    apt-get --no-install-recommends --yes install \\\n        ^libxcb.* \\\n        libfontconfig1-dev \\\n        libfreetype6-dev \\\n        libgl1-mesa-dev \\\n        libglu1-mesa-dev \\\n        libx11-dev \\\n        libx11-xcb-dev \\\n        libxfixes-dev \\\n        libxkbcommon-dev \\\n        libxrender-dev \\\n        p7zip-full \\\n        python && rm -rf /var/lib/apt/lists/*;\n\n# Setup QT in separate steps because its absurdly slow, so we can cache as much work as possible\nARG QT_VERSION=5.7.1\nRUN set -ex \\\n    && curl -f -O -L https://download.qt.io/archive/qt/5.7/5.7.1/single/qt-everywhere-opensource-src-${QT_VERSION}.7z \\\n    && 7z x qt-everywhere-opensource-src-${QT_VERSION}.7z\n\nRUN set -ex \\\n    && cd qt-everywhere-opensource-src-${QT_VERSION} \\\n    && ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" -prefix /usr/lib/x86_64-linux-gnu/qt5 -static -nomake tests -nomake examples -opensource -confirm-license -opengl desktop -qt-zlib -qt-libjpeg -qt-libpng -qt-xcb -qt-xkbcommon-x11 -qt-freetype -qt-pcre -qt-harfbuzz -fontconfig\n\nRUN set -ex \\\n    && cd qt-everywhere-opensource-src-${QT_VERSION} \\\n    && make -j${NUM_COMPILE_JOBS} \\\n    && make install\n\nARG QT_DIR=/usr/lib/x86_64-linux-gnu/qt5\nENV PATH=/usr/lib/x86_64-linux-gnu/qt5/bin:${PATH}\nRUN set -ex \\\n    && cd qt-everywhere-opensource-src-${QT_VERSION}/qtdeclarative \\\n    && qmake && make -j${NUM_COMPILE_JOBS} \\\n    && make install\n\n# I don't know why this is necessary for the GUI and not the daemon, but it works\nARG ZMQ_INCLUDE_PATH=/usr/local/include/\nARG ZMQ_LIBRARY=/usr/local/libzmq/src/.libs/libzmq.a\n\nARG LIBUNWIND_VERSION=1.2.1\nARG LIBUNWIND_HASH=3f3ecb90e28cbe53fba7a4a27ccce7aad188d3210bb1964a923a731a27a75acb\nRUN set -ex \\\n    && curl -f -O -L https://download.savannah.nongnu.org/releases/libunwind/libunwind-${LIBUNWIND_VERSION}.tar.gz \\\n    && tar xvf libunwind-${LIBUNWIND_VERSION}.tar.gz \\\n    && echo \"${LIBUNWIND_HASH}  libunwind-${LIBUNWIND_VERSION}.tar.gz\" | sha256sum -c \\\n    && cd libunwind-${LIBUNWIND_VERSION} \\\n    && CFLAGS=\"-fPIC\" CXXFLAGS=\"-fPIC\" ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --enable-shared=no \\\n    && make install && rm libunwind-${LIBUNWIND_VERSION}.tar.gz\n\nRUN set -ex && \\\n    apt-get update && \\\n    apt-get --no-install-recommends --yes install \\\n      bzip2 \\\n      xsltproc \\\n      gperf && rm -rf /var/lib/apt/lists/*;\n\n# Udev\nARG UDEV_VERSION=v3.2.6\nARG UDEV_HASH=0c35b136c08d64064efa55087c54364608e65ed6\nRUN set -ex \\\n    && git clone https://github.com/gentoo/eudev -b ${UDEV_VERSION} --depth=1 \\\n    && cd eudev \\\n    && test `git rev-parse HEAD` = ${UDEV_HASH} || exit 1 \\\n    && ./autogen.sh \\\n    && CFLAGS=\"-fPIC\" CXXFLAGS=\"-fPIC\" ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --disable-gudev --disable-introspection --disable-hwdb --disable-manpages --disable-shared \\\n    && make \\\n    && make install\n\n# Libusb\nARG USB_VERSION=v1.0.22\nARG USB_HASH=0034b2afdcdb1614e78edaa2a9e22d5936aeae5d\nRUN set -ex \\\n    && git clone https://github.com/libusb/libusb.git -b ${USB_VERSION} --depth=1 \\\n    && cd libusb \\\n    && test `git rev-parse HEAD` = ${USB_HASH} || exit 1 \\\n    && ./autogen.sh \\\n    && CFLAGS=\"-fPIC\" CXXFLAGS=\"-fPIC\" ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --prefix=/usr/ --enable-static=yes --enable-shared=no \\\n    && make \\\n    && make install\n\n# Hidapi\nARG HIDAPI_VERSION=hidapi-0.8.0-rc1\nARG HIDAPI_HASH=40cf516139b5b61e30d9403a48db23d8f915f52c\nRUN set -ex \\\n    && git clone https://github.com/signal11/hidapi -b ${HIDAPI_VERSION} --depth=1 \\\n    && cd hidapi \\\n    && test `git rev-parse HEAD` = ${HIDAPI_HASH} || exit 1 \\\n    && ./bootstrap \\\n    && CFLAGS=\"-fPIC\" CXXFLAGS=\"-fPIC\" ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --enable-static --disable-shared \\\n    && make \\\n    && make install\n\nADD . /src\nWORKDIR /src\n\nENV USE_SINGLE_BUILDDIR=1\nRUN set -ex \\\n    && rm -rf build \\\n    && ./build.sh release-static \\\n    && cd build \\\n    && make deploy\n"
}