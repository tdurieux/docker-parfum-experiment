{
  "startTime": 1674240629811,
  "endTime": 1674240629851,
  "originalSmells": [
    {
      "rule": "apkAddUseNoCache",
      "position": {
        "lineStart": 12,
        "lineEnd": 12,
        "columnStart": 4,
        "columnEnd": 24
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM golang:1.10-alpine as builder\n\nMAINTAINER halewang@tencent.com\nWORKDIR /go/src\n\nCOPY ./ /go/src\n\nRUN set -ex && \\\ngo build -v -o /usr/bin/component-gotest \\\n-gcflags '-N -l' \\\n./*.go\n\nRUN apk add --no-cache --update git\n\nCMD [\"component-gotest\"]\n\nLABEL TencentHubComponent='{\\\n  \"description\": \"TencentHub官方组件(Golang Gotest Analysis), 用以对Golang编写的程序进行测试.\",\\\n  \"input\": [\\\n    {\"name\": \"GIT_CLONE_URL\", \"desc\": \"必填，源代码地址，如为私有仓库需要授权; 如需使用系统关联的git仓库, 可以从系统提供的全局环境变量中获取: ${_WORKFLOW_GIT_CLONE_URL}\"},\\\n    {\"name\": \"GIT_REF\", \"desc\": \"非必填，源代码git目标引用，可以是一个git branch, git tag 或者git commit ID, 默认值master\"},\\\n    {\"name\": \"GTEST_PACKAGE_FILE\", \"desc\": \"非必填, 待测试的代码包(多个代码包通过空格分割)或者文件(test文件和源码文件通过空格分割), 代码包通过路径的形式给出, 默认检索所有的代码包\"},\\\n    {\"name\": \"GTEST_PARAMS\", \"desc\": \"非必填, 参数，用于指明代码测试信息的输出格式\"}\\\n  ],\\\n  \"output\": []\\\n}'"
}