{
  "startTime": 1674235177503,
  "endTime": 1674235177971,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 10,
        "lineEnd": 10,
        "columnStart": 4,
        "columnEnd": 115
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 42,
        "lineEnd": 42,
        "columnStart": 4,
        "columnEnd": 51
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 71,
        "lineEnd": 71,
        "columnStart": 4,
        "columnEnd": 104
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 77,
        "lineEnd": 77,
        "columnStart": 4,
        "columnEnd": 117
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 95,
        "lineEnd": 95,
        "columnStart": 4,
        "columnEnd": 84
      }
    },
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 92,
        "lineEnd": 92,
        "columnStart": 4,
        "columnEnd": 23
      }
    },
    {
      "rule": "curlUseHttpsUrl",
      "position": {
        "lineStart": 10,
        "lineEnd": 10,
        "columnStart": 4,
        "columnEnd": 115
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# Use Ubuntu 16.04 LTS\nFROM ubuntu:xenial-20161213\n\n# Pre-cache neurodebian key\nCOPY docker/files/neurodebian.gpg /usr/local/etc/neurodebian.gpg\n\n# Installing Neurodebian packages (FSL, AFNI, git)\nRUN apt-get update && \\\n    apt-get install -y --no-install-recommends curl && \\\n    apt-get clean && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/* && \\\n    curl -f -sSL \"https://neuro.debian.net/lists/xenial.us-ca.full\" >> /etc/apt/sources.list.d/neurodebian.sources.list && \\\n    apt-key add /usr/local/etc/neurodebian.gpg && \\\n    (apt-key adv --refresh-keys --keyserver hkp://ha.pool.sks-keyservers.net 0xA5D32F012649A5A9 || true)\n\n# Prepare environment\nRUN apt-get update && \\\n    apt-get install -y --no-install-recommends \\\n                    autoconf \\\n                    build-essential \\\n                    bzip2 \\\n                    ca-certificates \\\n                    curl \\\n                    cython3 \\\n                    ed \\\n                    git \\\n                    git-annex-standalone \\\n                    graphviz=2.38.0-12ubuntu2 \\\n                    gsl-bin \\\n                    libglib2.0-0 \\\n                    libglu1-mesa-dev \\\n                    libglw1-mesa \\\n                    libgomp1 \\\n                    libjpeg62 \\\n                    libtool \\\n                    libxm4 \\\n                    netpbm \\\n                    pkg-config \\\n                    tcsh \\\n                    xfonts-base \\\n                    xvfb \\\n                    fsl-core=5.0.9-5~nd16.04+1 \\\n                    fsl-mni152-templates && \\\n    curl -f -sSL https://deb.nodesource.com/setup_10.x | bash - && \\\n    apt-get install -y --no-install-recommends \\\n                    nodejs && \\\n    echo \"Install libxp (not in all ubuntu/debian repositories)\" && \\\n    apt-get install -yq --no-install-recommends libxp6 \\\n    || /bin/bash -c \" \\\n       curl --retry 5 -o /tmp/libxp6.deb -sSL http://mirrors.kernel.org/debian/pool/main/libx/libxp/libxp6_1.0.2-2_amd64.deb \\\n       && dpkg -i /tmp/libxp6.deb && rm -f /tmp/libxp6.deb\" && \\\n    echo \"Install libpng12 (not in all ubuntu/debian repositories\" && \\\n    apt-get install -yq --no-install-recommends libpng12-0 \\\n    || /bin/bash -c \" \\\n       curl -o /tmp/libpng12.deb -sSL http://mirrors.kernel.org/debian/pool/main/libp/libpng/libpng12-0_1.2.49-1%2Bdeb7u2_amd64.deb \\\n       && dpkg -i /tmp/libpng12.deb && rm -f /tmp/libpng12.deb\" && \\\n    ln -s /usr/lib/x86_64-linux-gnu/libgsl.so.19 /usr/lib/x86_64-linux-gnu/libgsl.so.0 && \\\n    ldconfig && \\\n    apt-get clean && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*\n\nENV FSLDIR=\"/usr/share/fsl/5.0\" \\\n    FSLOUTPUTTYPE=\"NIFTI_GZ\" \\\n    FSLMULTIFILEQUIT=\"TRUE\" \\\n    POSSUMDIR=\"/usr/share/fsl/5.0\" \\\n    LD_LIBRARY_PATH=\"/usr/lib/fsl/5.0:$LD_LIBRARY_PATH\" \\\n    FSLTCLSH=\"/usr/bin/tclsh\" \\\n    FSLWISH=\"/usr/bin/wish\"\nENV PATH=\"/usr/lib/fsl/5.0:/usr/lib/afni/bin:$PATH\"\n\n# Installing ANTs 2.2.0 (NeuroDocker build)\nENV ANTSPATH=/usr/lib/ants\nRUN mkdir -p $ANTSPATH && \\\n    curl -f -sSL \"https://dl.dropbox.com/s/2f4sui1z6lcgyek/ANTs-Linux-centos5_x86_64-v2.2.0-0740f91.tar.gz\" \\\n    | tar -xzC $ANTSPATH --strip-components 1\nENV PATH=$ANTSPATH:$PATH\n\n# Installing AFNI (version 17_3_03 archived on OSF)\nRUN mkdir -p /opt/afni && \\\n    curl -f -o afni.tar.gz -sSLO \"https://files.osf.io/v1/resources/fvuh8/providers/osfstorage/5a0dd9a7b83f69027512a12b\" && \\\n    tar zxv -C /opt/afni --strip-components=1 -f afni.tar.gz && \\\n    rm -rf afni.tar.gz\nENV PATH=/opt/afni:$PATH \\\n    AFNI_MODELPATH=\"/opt/afni/models\" \\\n    AFNI_IMSAVE_WARNINGS=\"NO\" \\\n    AFNI_TTATLAS_DATASET=\"/opt/afni/atlases\" \\\n    AFNI_PLUGINPATH=\"/opt/afni/plugins\"\n\n# Create a shared $HOME directory\nRUN useradd -m -s /bin/bash -G users bidsapp\nWORKDIR /home/bidsapp\nENV HOME=\"/home/bidsapp\"\n\n# Installing SVGO\nRUN npm install -g svgo && npm cache clean --force;\n\n# Installing and setting up miniconda\nRUN curl -f -sSLO https://repo.continuum.io/miniconda/Miniconda3-4.5.11-Linux-x86_64.sh && \\\n    bash Miniconda3-4.5.11-Linux-x86_64.sh -b -p /usr/local/miniconda && \\\n    rm Miniconda3-4.5.11-Linux-x86_64.sh\n\n# Set CPATH for packages relying on compiled libs (e.g. indexed_gzip)\nENV PATH=\"/usr/local/miniconda/bin:$PATH\" \\\n    CPATH=\"/usr/local/miniconda/include/:$CPATH\" \\\n    LANG=\"C.UTF-8\" \\\n    LC_ALL=\"C.UTF-8\" \\\n    # PYTHONWARNINGS=\"ignore,default:::mriqc,default:::nipype\" \\\n    PYTHONNOUSERSITE=1\n\n# Installing precomputed python packages\nRUN conda install -y python=3.7.1 \\\n                     graphviz=2.40.1 \\\n                     libxml2=2.9.8 \\\n                     libxslt=1.1.32 \\\n                     matplotlib=2.2.2 \\\n                     mkl-service \\\n                     mkl=2018.0.3 \\\n                     numpy=1.15.4 \\\n                     pandas=0.23.4 \\\n                     scikit-learn=0.19.1 \\\n                     scipy=1.1.0 \\\n                     setuptools>=40.0.0 \\\n                     traits=4.6.0 \\\n                     zlib; sync && \\\n    chmod -R a+rX /usr/local/miniconda; sync && \\\n    chmod +x /usr/local/miniconda/bin/*; sync && \\\n    conda build purge-all; sync && \\\n    conda clean -tipsy && sync\n\n# Unless otherwise specified each process should only use one thread - nipype\n# will handle parallelization\nENV MKL_NUM_THREADS=1 \\\n    OMP_NUM_THREADS=1\n\n# Precaching fonts, set 'Agg' as default backend for matplotlib\nRUN python -c \"from matplotlib import font_manager\" && \\\n    sed -i 's/\\(backend *: \\).*$/\\1Agg/g' $( python -c \"import matplotlib; print(matplotlib.matplotlib_fname())\" )\n\n\n# Installing dev requirements (packages that are not in pypi)\nWORKDIR /src/\nCOPY requirements.txt requirements.txt\nRUN pip install --no-cache-dir -r requirements.txt\n\n# Precaching atlases\nENV TEMPLATEFLOW_HOME=\"/opt/templateflow\"\nRUN mkdir -p $TEMPLATEFLOW_HOME\nRUN python -c \"from templateflow import api as tfapi; \\\n               tfapi.get('MNI152NLin2009cAsym')\"\n\n# Installing MRIQC\nCOPY . /src/mriqc\nARG VERSION\n# Force static versioning within container\nRUN echo \"${VERSION}\" > /src/mriqc/mriqc/VERSION && \\\n    echo \"include mriqc/VERSION\" >> /src/mriqc/MANIFEST.in && \\\n    cd /src/mriqc && \\\n    pip install --no-cache-dir .[all]\n\nRUN find $HOME -type d -exec chmod go=u {} + && \\\n    find $HOME -type f -exec chmod go=u {} +\n\n# Best practices\nRUN ldconfig\nWORKDIR /tmp/\n\n# Run mriqc by default\nENTRYPOINT [\"/usr/local/miniconda/bin/mriqc\"]\n\nARG BUILD_DATE\nARG VCS_REF\nLABEL org.label-schema.build-date=$BUILD_DATE \\\n      org.label-schema.name=\"MRIQC\" \\\n      org.label-schema.description=\"MRIQC - Automated Quality Control and visual reports for Quality Assesment of structural (T1w, T2w) and functional MRI of the brain\" \\\n      org.label-schema.url=\"http://mriqc.readthedocs.io\" \\\n      org.label-schema.vcs-ref=$VCS_REF \\\n      org.label-schema.vcs-url=\"https://github.com/poldracklab/mriqc\" \\\n      org.label-schema.version=$VERSION \\\n      org.label-schema.schema-version=\"1.0\"\n"
}