{
  "startTime": 1674244064021,
  "endTime": 1674244064203,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 13,
        "lineEnd": 13,
        "columnStart": 4,
        "columnEnd": 85
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 18,
        "lineEnd": 18,
        "columnStart": 4,
        "columnEnd": 34
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 74,
        "lineEnd": 74,
        "columnStart": 4,
        "columnEnd": 31
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 84,
        "lineEnd": 84,
        "columnStart": 31,
        "columnEnd": 57
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "## Base image with python and entrypoint scripts ##\n## ============================================= ##\nFROM python:3.6.8-alpine3.9 AS base\n\nLABEL maintainer=\"Adam Hodges <ahodges@shipchain.io>\"\n\nENV LANG C.UTF-8\nENV PYTHONUNBUFFERED 1\n\n# Essential packages for our app environment\nRUN apk add --no-cache bash curl binutils && \\\n    apk add --no-cache --repository http://dl-3.alpinelinux.org/alpine/edge/main/ libcrypto1.1 && \\\n    apk add --no-cache --repository http://dl-3.alpinelinux.org/alpine/edge/testing/ proj-dev gdal geos && \\\n    curl -f -sSL https://raw.githubusercontent.com/sdispater/poetry/master/get-poetry.py | python && \\\n    apk del curl\nRUN ln -s /usr/lib/libgeos_c.so.1 /usr/local/lib/libgeos_c.so && ln -s /usr/lib/libgdal.so.20 /usr/lib/libgdal.so\n\n# Install and configure virtualenv\nRUN pip install --no-cache-dir virtualenv==16.3.*\nENV VIRTUAL_ENV=/app/.virtualenv\nENV PATH=$VIRTUAL_ENV/bin:/root/.poetry/bin:$PATH\n\n# Initialize app dir and entrypoint scripts\nRUN mkdir /app\nWORKDIR /app\nCOPY ./compose/django/*.sh /\nRUN chmod +x /*.sh\nENTRYPOINT [\"/entrypoint.sh\"]\n\n## Image with system dependencies for building ##\n## =========================================== ##\nFROM base AS build\n\n# Essential packages for building python packages\nRUN apk add --no-cache build-base git libffi-dev linux-headers jpeg-dev libressl2.7-libssl freetype-dev postgresql-dev su-exec\n\n\n## Image with additional dependencies for local docker usage ##\n## ========================================================= ##\nFROM build as local\nRUN chmod -R 777 /root/  ## Grant all local users access to poetry\n\n\n## Image with dev-dependencies ##\n## =========================== ##\nFROM build AS test\n\nCOPY . /app/\nRUN \\[ -d \"$VIRTUAL_ENV\" \\] || virtualenv \"$VIRTUAL_ENV\"\nRUN . \"$VIRTUAL_ENV/bin/activate\" && poetry install\n\n\n## Image only used for production building ##\n## ======================================= ##\nFROM build AS prod\n\nCOPY . /app/\nRUN \\[ -d \"$VIRTUAL_ENV\" \\] || virtualenv \"$VIRTUAL_ENV\"\nRUN . \"$VIRTUAL_ENV/bin/activate\" && poetry install --no-dev\n\n# Generate static assets\nRUN python manage.py collectstatic -c --noinput\n\n\n## Image to be deployed to ECS with additional utils and no build tools ##\n## ==================================================================== ##\nFROM base AS deploy\n\n# Install openssh for ECS management container\nRUN apk add --no-cache jq openssl openssh-server-pam shadow nano\nRUN sed -i 's/^CREATE_MAIL_SPOOL=yes/CREATE_MAIL_SPOOL=no/' /etc/default/useradd\n\n# Keymaker for SSH auth via IAM\nRUN mkdir /var/run/sshd /etc/cron.d && touch /etc/pam.d/sshd\nRUN pip install --no-cache-dir keymaker==1.0.8\n\n# Configure public key SSH\nRUN echo \"PubkeyAuthentication yes\" >> /etc/ssh/sshd_config\nRUN echo \"UsePAM yes\" >> /etc/ssh/sshd_config\nRUN echo \"AllowAgentForwarding yes\" >> /etc/ssh/sshd_config\nRUN echo \"PasswordAuthentication no\" >> /etc/ssh/sshd_config\n\n# Create virtualenv for using awscli in entrypoint scripts\nRUN virtualenv /opt/aws\nRUN . /opt/aws/bin/activate && pip install --no-cache-dir awscli==1.16.*\n\n# Copy built virtualenv without having to install build-essentials, etc\nCOPY --from=prod /app /app\n"
}