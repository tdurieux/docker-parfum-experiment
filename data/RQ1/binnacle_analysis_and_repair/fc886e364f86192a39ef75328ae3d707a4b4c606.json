{
  "startTime": 1674236392926,
  "endTime": 1674236394542,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 110,
        "lineEnd": 110,
        "columnStart": 4,
        "columnEnd": 53
      }
    },
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 241,
        "lineEnd": 241,
        "columnStart": 4,
        "columnEnd": 71
      }
    },
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 242,
        "lineEnd": 242,
        "columnStart": 21,
        "columnEnd": 36
      }
    },
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 273,
        "lineEnd": 273,
        "columnStart": 98,
        "columnEnd": 109
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 21,
        "lineEnd": 21,
        "columnStart": 4,
        "columnEnd": 63
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 32,
        "lineEnd": 32,
        "columnStart": 5,
        "columnEnd": 52
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 42,
        "lineEnd": 42,
        "columnStart": 5,
        "columnEnd": 52
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 62,
        "lineEnd": 62,
        "columnStart": 4,
        "columnEnd": 31
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 100,
        "lineEnd": 100,
        "columnStart": 4,
        "columnEnd": 31
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 113,
        "lineEnd": 113,
        "columnStart": 4,
        "columnEnd": 145
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 124,
        "lineEnd": 124,
        "columnStart": 4,
        "columnEnd": 67
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 143,
        "lineEnd": 143,
        "columnStart": 4,
        "columnEnd": 175
      }
    },
    {
      "rule": "yumInstallRmVarCacheYum",
      "position": {
        "lineStart": 5,
        "lineEnd": 5,
        "columnStart": 4,
        "columnEnd": 163
      }
    },
    {
      "rule": "yumInstallRmVarCacheYum",
      "position": {
        "lineStart": 54,
        "lineEnd": 54,
        "columnStart": 4,
        "columnEnd": 33
      }
    },
    {
      "rule": "yumInstallRmVarCacheYum",
      "position": {
        "lineStart": 94,
        "lineEnd": 94,
        "columnStart": 4,
        "columnEnd": 27
      }
    },
    {
      "rule": "yumInstallRmVarCacheYum",
      "position": {
        "lineStart": 108,
        "lineEnd": 108,
        "columnStart": 4,
        "columnEnd": 26
      }
    },
    {
      "rule": "yumInstallRmVarCacheYum",
      "position": {
        "lineStart": 137,
        "lineEnd": 137,
        "columnStart": 4,
        "columnEnd": 113
      }
    },
    {
      "rule": "yumInstallRmVarCacheYum",
      "position": {
        "lineStart": 152,
        "lineEnd": 152,
        "columnStart": 4,
        "columnEnd": 51
      }
    },
    {
      "rule": "yumInstallRmVarCacheYum",
      "position": {
        "lineStart": 169,
        "lineEnd": 169,
        "columnStart": 4,
        "columnEnd": 70
      }
    },
    {
      "rule": "yumInstallRmVarCacheYum",
      "position": {
        "lineStart": 183,
        "lineEnd": 183,
        "columnStart": 4,
        "columnEnd": 84
      }
    },
    {
      "rule": "yumInstallRmVarCacheYum",
      "position": {
        "lineStart": 231,
        "lineEnd": 231,
        "columnStart": 4,
        "columnEnd": 72
      }
    },
    {
      "rule": "yumInstallRmVarCacheYum",
      "position": {
        "lineStart": 291,
        "lineEnd": 291,
        "columnStart": 4,
        "columnEnd": 51
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 111,
        "lineEnd": 111,
        "columnStart": 4,
        "columnEnd": 39
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 155,
        "lineEnd": 155,
        "columnStart": 4,
        "columnEnd": 44
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 275,
        "lineEnd": 275,
        "columnStart": 139,
        "columnEnd": 155
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 294,
        "lineEnd": 294,
        "columnStart": 4,
        "columnEnd": 44
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM centos:7.6.1810 AS build\nWORKDIR /home\n\n# COMMON BUILD TOOLS\nRUN yum install -y -q bzip2 make autoconf libtool git wget ca-certificates pkg-config gcc gcc-c++ bison flex patch epel-release yum-devel libcurl-devel zlib-devel; rm -rf /var/cache/yum\n\n# Install cmake\nARG CMAKE_VER=3.13.1\nARG CMAKE_REPO=https://cmake.org/files\nRUN wget -O - ${CMAKE_REPO}/v${CMAKE_VER%.*}/cmake-${CMAKE_VER}.tar.gz | tar xz && \\\n    cd cmake-${CMAKE_VER} && \\\n    ./bootstrap --prefix=\"/usr\" --system-curl && \\\n    make -j8 && \\\n    make install\n\n# Install automake, use version 1.14 on CentOS\nARG AUTOMAKE_VER=1.14\nARG AUTOMAKE_REPO=https://ftp.gnu.org/pub/gnu/automake/automake-${AUTOMAKE_VER}.tar.xz\nRUN wget -O - ${AUTOMAKE_REPO} | tar xJ && \\\n    cd automake-${AUTOMAKE_VER} && \\\n    ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --prefix=/usr --libdir=/usr/lib64 --disable-doc && \\\n    make -j8 && \\\n    make install\n\n# Build NASM\nARG NASM_VER=2.13.03\nARG NASM_REPO=https://www.nasm.us/pub/nasm/releasebuilds/${NASM_VER}/nasm-${NASM_VER}.tar.bz2\nRUN wget ${NASM_REPO} && \\\n     tar -xaf nasm* && \\\n     cd nasm-${NASM_VER} && \\\n     ./autogen.sh && \\\n     ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --prefix=\"/usr\" --libdir=/usr/lib64 && \\\n     make -j8 && \\\n     make install\n\n# Build YASM\nARG YASM_VER=1.3.0\nARG YASM_REPO=https://www.tortall.net/projects/yasm/releases/yasm-${YASM_VER}.tar.gz\nRUN wget -O - ${YASM_REPO} | tar xz && \\\n     cd yasm-${YASM_VER} && \\\n     sed -i \"s/) ytasm.*/)/\" Makefile.in && \\\n     ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --prefix=\"/usr\" --libdir=/usr/lib64 && \\\n     make -j8 && \\\n     make install\n\n# Build libnice\nARG NICE_VER=\"0.1.4\"\nARG NICE_REPO=http://nice.freedesktop.org/releases/libnice-${NICE_VER}.tar.gz\nARG LIBNICE_PATCH_REPO_01=https://raw.githubusercontent.com/open-webrtc-toolkit/owt-server/master/scripts/patches/libnice014-agentlock.patch\nARG LIBNICE_PATCH_REPO_02=https://raw.githubusercontent.com/open-webrtc-toolkit/owt-server/master/scripts/patches/libnice014-agentlock-plus.patch\nARG LIBNICE_PATCH_REPO_03=https://raw.githubusercontent.com/open-webrtc-toolkit/owt-server/master/scripts/patches/libnice014-removecandidate.patch\nARG LIBNICE_PATCH_REPO_04=https://raw.githubusercontent.com/open-webrtc-toolkit/owt-server/master/scripts/patches/libnice014-keepalive.patch\n\nRUN yum install -y -q glib2-devel && rm -rf /var/cache/yum\n\nRUN wget -O - ${NICE_REPO} | tar xz && \\\n    cd libnice-${NICE_VER} && \\\n    wget -O - ${LIBNICE_PATCH_REPO_01} | patch -p1 && \\\n    wget -O - ${LIBNICE_PATCH_REPO_02} | patch -p1 && \\\n    wget -O - ${LIBNICE_PATCH_REPO_03} | patch -p1 && \\\n    wget -O - ${LIBNICE_PATCH_REPO_04} | patch -p1 && \\\n    ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --prefix=\"/usr\" && \\\n    make -s V= && \\\n    make install\n\n# Build open ssl\nARG OPENSSL_VER=\"1.0.2r\"\nARG OPENSSL_REPO=http://www.openssl.org/source/openssl-${OPENSSL_VER}.tar.gz\n\nRUN wget -O - ${OPENSSL_REPO} | tar xz && \\\n    cd openssl-${OPENSSL_VER} && \\\n    ./config no-ssl3 --prefix=\"/usr\" -fPIC && \\\n    make depend && \\\n    make -s V=0  && \\\n    make install\n\n# Build libre\nARG LIBRE_VER=\"v0.4.16\"\nARG LIBRE_REPO=https://github.com/creytiv/re.git\n\nRUN git clone ${LIBRE_REPO} && \\\n    cd re && \\\n    git checkout ${LIBRE_VER} && \\\n    make SYSROOT_ALT=\"/usr\" RELEASE=1 && \\\n    make install SYSROOT_ALT=\"/usr\" RELEASE=1 PREFIX=\"/usr\"\n\n# Build usrsctp\n\nARG USRSCTP_VERSION=\"30d7f1bd0b58499e1e1f2415e84d76d951665dc8\"\nARG USRSCTP_FILE=\"${USRSCTP_VERSION}.tar.gz\"\nARG USRSCTP_EXTRACT=\"usrsctp-${USRSCTP_VERSION}\"\nARG USRSCTP_URL=\"https://github.com/sctplab/usrsctp/archive/${USRSCTP_FILE}\"\n\nRUN yum install -y -q which && rm -rf /var/cache/yum\n\nRUN wget -O - ${USRSCTP_URL} | tar xz && \\\n    mv ${USRSCTP_EXTRACT} usrsctp && \\\n    cd usrsctp && \\\n    ./bootstrap && \\\n    ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --prefix=\"/usr\" && \\\n    make && \\\n    make install\n\n# Build libsrtp2\nARG SRTP2_VER=\"2.1.0\"\nARG SRTP2_REPO=https://codeload.github.com/cisco/libsrtp/tar.gz/v${SRTP2_VER}\n\nRUN yum install -y -q curl && rm -rf /var/cache/yum\n\nRUN curl -f -o libsrtp-${SRTP2_VER}.tar.gz ${SRTP2_REPO} && \\\n    tar xzf libsrtp-${SRTP2_VER}.tar.gz && \\\n    cd libsrtp-${SRTP2_VER} && \\\n    PKG_CONFIG_PATH=/usr/lib/pkgconfig:/usr/lib64/pkgconfig CFLAGS=\"-fPIC\" ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --enable-openssl --prefix=\"/usr\" --with-openssl-dir=\"/usr\" && \\\n    make -s V=0 && \\\n    make install && rm libsrtp-${SRTP2_VER}.tar.gz\n\n# Build fdk-aac\nARG FDK_AAC_VER=v0.1.6\nARG FDK_AAC_REPO=https://github.com/mstorsjo/fdk-aac/archive/${FDK_AAC_VER}.tar.gz\n\nRUN wget -O - ${FDK_AAC_REPO} | tar xz && mv fdk-aac-${FDK_AAC_VER#v} fdk-aac && \\\n    cd fdk-aac && \\\n    autoreconf -fiv && \\\n    ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --prefix=\"/usr\" --libdir=/usr/lib64 --enable-shared && \\\n    make -j8 && \\\n    make install DESTDIR=/home/build && \\\n    make install\n\n\n# Fetch FFmpeg source\nARG FFMPEG_VER=n4.1\nARG FFMPEG_REPO=https://github.com/FFmpeg/FFmpeg/archive/${FFMPEG_VER}.tar.gz\nARG FFMPEG_FLV_PATCH_REPO=https://raw.githubusercontent.com/VCDP/CDN/master/The-RTMP-protocol-extensions-for-H.265-HEVC.patch\nARG FFMPEG_1TN_PATCH_REPO=https://patchwork.ffmpeg.org/patch/11625/raw\nARG FFMPEG_THREAD_PATCH_REPO=https://patchwork.ffmpeg.org/patch/11035/raw\n\nRUN yum install -y -q libass-devel freetype-devel SDL2-devel libxcb-devel libvdpau-devel zlib-devel openssl-devel && rm -rf /var/cache/yum\n\nRUN wget -O - ${FFMPEG_REPO} | tar xz && mv FFmpeg-${FFMPEG_VER} FFmpeg && \\\n    cd FFmpeg  ;\n# Compile FFmpeg\nRUN cd /home/FFmpeg && \\\n    ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --prefix=\"/usr\" --libdir=/usr/lib64 --enable-shared --disable-static --disable-libvpx --disable-vaapi --enable-libfreetype --enable-libfdk-aac --enable-nonfree && \\\n    make -j8 && \\\n    make install && make install DESTDIR=\"/home/build\"\n\n\n# Install node\nARG NODE_VER=v8.15.0\nARG NODE_REPO=https://nodejs.org/dist/${NODE_VER}/node-${NODE_VER}-linux-x64.tar.xz\n\nRUN yum install -y -q ca-certificates wget xz-utils && rm -rf /var/cache/yum\n\nRUN wget ${NODE_REPO} && \\\n    tar xf node-${NODE_VER}-linux-x64.tar.xz && \\\n    cp node-*/* /usr/ -rf && rm -rf node-* && rm node-${NODE_VER}-linux-x64.tar.xz\n\n# Fetch gmmlib\nARG GMMLIB_VER=intel-gmmlib-18.3.0\nARG GMMLIB_REPO=https://github.com/intel/gmmlib/archive/${GMMLIB_VER}.tar.gz\n\nRUN wget -O - ${GMMLIB_REPO} | tar xz && mv gmmlib-${GMMLIB_VER} gmmlib;\n\n\n# Build libva\nARG LIBVA_VER=2.4.0\nARG LIBVA_REPO=https://github.com/intel/libva/archive/${LIBVA_VER}.tar.gz\n\nRUN yum install -y -q libX11-devel mesa-libGL-devel which libdrm-devel && rm -rf /var/cache/yum\n\nRUN wget -O - ${LIBVA_REPO} | tar xz && \\\n    cd libva-${LIBVA_VER} && \\\n    ./autogen.sh --prefix=/usr --libdir=/usr/lib64 && \\\n    make -j8 && \\\n    make install DESTDIR=/home/build && \\\n    make install;\n\n\n# Build media driver\nARG MEDIA_DRIVER_VER=intel-media-kbl-19.1.0\nARG MEDIA_DRIVER_REPO=https://github.com/VCDP/media-driver/archive/${MEDIA_DRIVER_VER}.tar.gz\n\nRUN yum install -y -q libX11-devel mesa-libGL-devel libpciaccess-devel libXext-devel && rm -rf /var/cache/yum\n\nRUN wget -O - ${MEDIA_DRIVER_REPO} | tar xz && mv media-driver-${MEDIA_DRIVER_VER} media-driver && \\\n    mkdir -p media-driver/build && \\\n    cd media-driver/build && \\\n    cmake -DBUILD_TYPE=release -DBUILD_ALONG_WITH_CMRTLIB=1 -DMEDIA_VERSION=\"2.0.0\" -DBS_DIR_GMMLIB=/home/gmmlib/Source/GmmLib -DBS_DIR_COMMON=/home/gmmlib/Source/Common -DBS_DIR_INC=/home/gmmlib/Source/inc -DBS_DIR_MEDIA=/home/media-driver -Wno-dev -DCMAKE_INSTALL_PREFIX=/usr .. && \\\n    make -j8 && \\\n    make install DESTDIR=/home/build && \\\n    make install\n\n\n\n# Build Intel(R) Media SDK\nARG MSDK_VER=MSS-KBL-2019-R1\nARG MSDK_REPO=https://github.com/Intel-Media-SDK/MediaSDK/archive/${MSDK_VER}.tar.gz\n\nRUN wget -O - ${MSDK_REPO} | tar xz && mv MediaSDK-${MSDK_VER} MediaSDK && \\\n    mkdir -p MediaSDK/build && \\\n    cd MediaSDK/build && \\\n    cmake -DCMAKE_INSTALL_PREFIX=/usr -DCMAKE_INSTALL_INCLUDEDIR=include -DBUILD_SAMPLES=OFF -DENABLE_OPENCL=OFF -Wno-dev .. && \\\n    make -j8 && \\\n    make install DESTDIR=/home/build && \\\n    rm -rf /home/build/usr/samples && \\\n    rm -rf /home/build/usr/plugins && \\\n    make install;\n\n# Build OWT specific modules\n\nARG OWTSERVER_REPO=https://github.com/open-webrtc-toolkit/owt-server.git\nARG OPENH264_MAJOR=1\nARG OPENH264_MINOR=7\nARG OPENH264_SOVER=4\nARG OPENH264_SOURCENAME=v${OPENH264_MAJOR}.${OPENH264_MINOR}.0.tar.gz\nARG OPENH264_SOURCE=https://github.com/cisco/openh264/archive/v${OPENH264_MAJOR}.${OPENH264_MINOR}.0.tar.gz\nARG OPENH264_BINARYNAME=libopenh264-${OPENH264_MAJOR}.${OPENH264_MINOR}.0-linux64.${OPENH264_SOVER}.so\nARG OPENH264_BINARY=https://github.com/cisco/openh264/releases/download/v${OPENH264_MAJOR}.${OPENH264_MINOR}.0/${OPENH264_BINARYNAME}.bz2\nARG LICODE_COMMIT=\"4c92ddb42ad8bd2eab4dfb39bbb49f985b454fc9\"\nARG LICODE_CHERRY_PICK=\"71b38f9bf1d582d5afb1dca8f390c281dbe8ae43\"\nARG LICODE_REPO=https://github.com/lynckia/licode.git\nARG LICODE_PATCH_REPO=https://github.com/open-webrtc-toolkit/owt-server/tree/master/scripts/patches/licode/\nARG WEBRTC_REPO=https://github.com/open-webrtc-toolkit/owt-deps-webrtc.git\nARG SVT_VER=v1.3.0\nARG SVT_REPO=https://github.com/intel/SVT-HEVC.git\nARG SERVER_PATH=/home/owt-server\nARG OWT_SDK_REPO=https://github.com/open-webrtc-toolkit/owt-client-javascript.git\nARG OWT_BRANCH=4.2.x\n\nARG FDKAAC_LIB=/home/build/usr/lib64\nRUN yum install -y -q python-devel glib2-devel boost-devel log4cxx-devel && rm -rf /var/cache/yum\n\n# 1. Clone OWT server source code\n# 2. Clone licode source code and patch\n# 3. Clone webrtc source code and patch\nRUN git config --global user.email \"you@example.com\" && \\\n    git config --global user.name \"Your Name\" && \\\n    git clone -b ${OWT_BRANCH} ${OWTSERVER_REPO} && \\\n\n    # Install node modules for owt\n    npm install -g --loglevel error node-gyp grunt-cli underscore jsdoc && \\\n    cd owt-server && npm install nan && \\\n\n    # Get openh264 for owt\n    cd third_party && \\\n    mkdir openh264 && cd openh264 && \\\n    wget ${OPENH264_SOURCE} && \\\n    wget ${OPENH264_BINARY} && \\\n    tar xzf ${OPENH264_SOURCENAME} openh264-${OPENH264_MAJOR}.${OPENH264_MINOR}.0/codec/api && \\\n    ln -s -v openh264-${OPENH264_MAJOR}.${OPENH264_MINOR}.0/codec codec && \\\n    bzip2 -d ${OPENH264_BINARYNAME}.bz2 && \\\n    ln -s -v ${OPENH264_BINARYNAME} libopenh264.so.${OPENH264_SOVER} && \\\n    ln -s -v libopenh264.so.${OPENH264_SOVER} libopenh264.so && \\\n    echo 'const char* stub() {return \"this is a stub lib\";}' > pseudo-openh264.cpp && \\\n    gcc pseudo-openh264.cpp -fPIC -shared -o pseudo-openh264.so && \\ \n\n    # Get licode for owt\n    cd ${SERVER_PATH}/third_party && git clone ${LICODE_REPO} && \\\n    cd licode && \\\n    git reset --hard ${LICODE_COMMIT} && \\\n    wget -r -nH --cut-dirs=5 --no-parent ${LICODE_PATCH_REPO} && \\\n    git am ${SERVER_PATH}/scripts/patches/licode/*.patch && \\\n    git cherry-pick ${LICODE_CHERRY_PICK} && \\\n\n    # Install webrtc for owt\n    cd ${SERVER_PATH}/third_party && mkdir webrtc  && cd webrtc &&\\\n    export GIT_SSL_NO_VERIFY=1 && \\\n    git clone -b 59-server ${WEBRTC_REPO} src && \\\n    ./src/tools-woogeen/install.sh && \\\n    ./src/tools-woogeen/build.sh && \\\n\n    # Get js client sdk for owt\n    cd /home && git clone -b ${OWT_BRANCH} ${OWT_SDK_REPO} && cd owt-client-javascript/scripts && npm install && grunt  && \\\n    mkdir ${SERVER_PATH}/third_party/quic-lib && \\\n    cd ${SERVER_PATH}/third_party/quic-lib && wget https://github.com/open-webrtc-toolkit/owt-deps-quic/releases/download/v0.1/dist.tgz && tar xzf dist.tgz && \\\n\n    #Build and pack owt\n    cd ${SERVER_PATH} && export PKG_CONFIG_PATH=/usr/lib/pkgconfig && ./scripts/build.js -t mcu-all -r -c && \\\n    ./scripts/pack.js -t all --install-module --no-pseudo --sample-path /home/owt-client-javascript/dist/samples/conference && npm cache clean --force; && rm dist.tgz\n\nFROM centos:7.6.1810\nLABEL Description=\"This is the image for owt development on CentOS 7.6\"\nLABEL Vendor=\"Intel Corporation\"\nWORKDIR /home\n\n# Prerequisites\n# Install node\nARG NODE_VER=v8.15.0\nARG NODE_REPO=https://nodejs.org/dist/${NODE_VER}/node-${NODE_VER}-linux-x64.tar.xz\n\nRUN yum install -y -q ca-certificates wget xz-utils && rm -rf /var/cache/yum\n\nRUN wget ${NODE_REPO} && \\\n    tar xf node-${NODE_VER}-linux-x64.tar.xz && \\\n    cp node-*/* /usr/ -rf && rm -rf node-* && rm node-${NODE_VER}-linux-x64.tar.xz\n\nCOPY --from=build /home/owt-server/dist /home/owt\nCOPY --from=build /home/build /\n\n\nRUN yum install epel-release boost-system boost-thread log4cxx glib2 freetype-devel -y && \\\t\n    yum install rabbitmq-server mongodb mongodb-server -y && \\\n    yum remove -y -q epel-release && \\\n    yum install intel-gpu-tools mesa-libGL-devel libvdpau-dev -y && \\\n        echo \"#!/bin/bash -e\" >> /home/launch.sh && \\\n    echo \"mongod --config /etc/mongod.conf &\" >> /home/launch.sh && \\\n    echo \"rabbitmq-server &\" >> /home/launch.sh && \\\n    echo \"sleep 5\" >> /home/launch.sh && \\\n    echo \"cd /home/owt\" >> /home/launch.sh && \\\n    echo \"./video_agent/init.sh --hardware\" >> /home/launch.sh && \\\n    \n    echo \"./management_api/init.sh && ./bin/start-all.sh \" >> /home/launch.sh && \\\n    chmod +x /home/launch.sh && \\\n    rm -rf /var/cache/yum/*;\n\nENV LIBVA_DRIVER_NAME=iHD\n\n\n\n"
}