{
  "startTime": 1674249338887,
  "endTime": 1674249339007,
  "originalSmells": [
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 6,
        "lineEnd": 6,
        "columnStart": 25,
        "columnEnd": 127
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 6,
        "lineEnd": 6,
        "columnStart": 25,
        "columnEnd": 127
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# Build the app on top of Ubuntu\nFROM ubuntu:xenial\n\nRUN echo 'deb http://ppa.launchpad.net/chris-lea/redis-server/ubuntu xenial main' > /etc/apt/sources.list.d/redis-server.list && apt-key adv --keyserver keyserver.ubuntu.com --recv-keys C7917B12\n\n# Patch and Install Dependencies\nRUN apt-get -y update && apt-get -y --no-install-recommends install git python-dev make python-pip libpq-dev postgresql postgresql-contrib redis-server && apt-get -y clean && rm -rf /var/lib/apt/lists/*;\n\n# Updating redis config\nRUN sed -i 's/# bind 127\\.0\\.0\\.1/bind 127\\.0\\.0\\.1/' /etc/redis/redis.conf\n\nCMD mkdir -p /app && chown -R postgres:postgres /app\n\n# Add python requirements to the image\nADD requirements.txt /app/requirements.txt\nADD test-requirements.txt /app/test-requirements.txt\n\n# Set a working directory\nWORKDIR /app/\n\n# Build the application\nRUN pip install --no-cache-dir -r requirements.txt\n\n# Add the application code to the image\nADD . /app/\n\n# Start postgres database and use it while it is running in the container\n# Create the default db user (ash)\nRUN service postgresql start                                 && \\\n    service redis-server start                               && \\\n    su - postgres -c \"psql --command \\\"CREATE USER ash WITH PASSWORD 'pokemon'\\\"\" \t&& \\\n    su - postgres -c \"createdb -O ash pokeapi\"                                  \t&& \\\n    python manage.py migrate --settings=config.docker                         \t\t&& \\\n    echo \"from data.v2.build import build_all; build_all(); quit()\" | python -u manage.py shell --settings=config.docker\n\n# Expose the app and serve the API.\nEXPOSE 8000\nCMD service postgresql start && service redis-server start && python manage.py runserver --settings=config.docker 0.0.0.0:8000\n"
}