{
  "startTime": 1674236604560,
  "endTime": 1674236604914,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 15,
        "lineEnd": 15,
        "columnStart": 4,
        "columnEnd": 46
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 37,
        "lineEnd": 37,
        "columnStart": 7,
        "columnEnd": 32
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 38,
        "lineEnd": 38,
        "columnStart": 7,
        "columnEnd": 55
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM alpine:3.9\n\n#Install dependencies\nRUN apk --no-cache upgrade\nRUN apk add --no-cache \\\n    apache2 apache2-ssl git php7 php7-tokenizer php7-ctype php7-session php7-apache2 \\\n    php7-json php7-pdo php7-pdo_mysql php7-curl php7-ldap php7-openssl php7-iconv \\\n    php7-xml php7-xsl php7-gd php7-zip php7-soap php7-mbstring php7-zlib \\\n    php7-mysqli php7-sockets php7-xmlreader php7-redis php7-simplexml php7-xmlwriter php7-phar php7-fileinfo \\\n    perl mysql-client tar curl imagemagick nodejs nodejs-npm \\\n    python openssl py-pip openssl-dev dcron \\\n    shadow\n# Needed to ensure permissions work across shared volumes with openemr, nginx, and php-fpm dockers\nRUN usermod -u 1000 apache\n# Install composer for openemr package building\nRUN curl -f -sS https://getcomposer.org/installer | php -- --install-dir=/usr/bin --filename=composer\n#clone openemr\nRUN apk add --no-cache git build-base libffi-dev python-dev \\\n    && git clone https://github.com/openemr/openemr.git --depth 1 \\\n    && rm -rf openemr/.git \\\n    && cd openemr \\\n    && composer install \\\n    && npm install --unsafe-perm \\\n    && npm run build \\\n    && composer global require phing/phing \\\n    && /root/.composer/vendor/bin/phing vendor-clean \\\n    && /root/.composer/vendor/bin/phing assets-clean \\\n    && composer global remove phing/phing \\\n    && composer dump-autoload -o \\\n    && composer clearcache \\\n    && npm cache clear --force \\\n    && rm -fr node_modules \\\n    && cd ../ \\\n    && chmod 666 openemr/sites/default/sqlconf.php \\\n    && chown -R apache openemr/ \\\n    && mv openemr /var/www/localhost/htdocs/ \\\n    && git clone https://github.com/letsencrypt/letsencrypt /opt/certbot \\\n    && pip install --no-cache-dir --upgrade pip \\\n    && pip install --no-cache-dir -e /opt/certbot/acme -e \\\n    && mkdir -p /etc/ssl/certs /etc/ssl/private \\\n    && apk del --no-cache git build-base libffi-dev python-dev\nWORKDIR /var/www/localhost/htdocs/openemr\nVOLUME [ \"/etc/letsencrypt/\", \"/etc/ssl\" ]\n#configure apache & php properly\nENV APACHE_LOG_DIR=/var/log/apache2\nCOPY php.ini /etc/php7/php.ini\nCOPY openemr.conf /etc/apache2/conf.d/\n#add runner and auto_configure and prevent auto_configure from being run w/o being enabled\nCOPY run_openemr.sh autoconfig.sh auto_configure.php /var/www/localhost/htdocs/openemr/\nCOPY utilities/unlock_admin.php utilities/unlock_admin.sh /root/\nRUN chmod 500 run_openemr.sh autoconfig.sh /root/unlock_admin.sh \\\n    && chmod 000 auto_configure.php /root/unlock_admin.php\n#fix issue with apache2 dying prematurely\nRUN mkdir -p /run/apache2\n#go\nCMD [ \"./run_openemr.sh\" ]\n\nEXPOSE 80 443\n"
}