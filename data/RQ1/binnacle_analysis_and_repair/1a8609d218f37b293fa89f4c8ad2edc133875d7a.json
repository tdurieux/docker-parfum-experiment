{
  "startTime": 1674252137563,
  "endTime": 1674252138140,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 146,
        "lineEnd": 146,
        "columnStart": 4,
        "columnEnd": 111
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 148,
        "lineEnd": 148,
        "columnStart": 4,
        "columnEnd": 110
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 155,
        "lineEnd": 155,
        "columnStart": 7,
        "columnEnd": 18
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 36,
        "lineEnd": 49,
        "columnStart": 4,
        "columnEnd": 24
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 69,
        "lineEnd": 69,
        "columnStart": 4,
        "columnEnd": 43
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 69,
        "lineEnd": 69,
        "columnStart": 4,
        "columnEnd": 43
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 36,
        "lineEnd": 49,
        "columnStart": 4,
        "columnEnd": 24
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 69,
        "lineEnd": 69,
        "columnStart": 4,
        "columnEnd": 43
      }
    }
  ],
  "repairedSmells": [
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 68,
        "lineEnd": 68,
        "columnStart": 4,
        "columnEnd": 67
      }
    }
  ],
  "repairedDockerfile": "ARG PHP_VERSION\n\nFROM php:${PHP_VERSION}-fpm\n\n#--------------------------------------------------------------------------\n# 必需安装项\n#--------------------------------------------------------------------------\n\nRUN apt-get update && \\\n    apt-get upgrade -y && \\\n    apt-get install -y --no-install-recommends \\\n    curl \\\n    libmemcached-dev \\\n    libz-dev \\\n    libpq-dev \\\n    libjpeg-dev \\\n    libpng-dev \\\n    libfreetype6-dev \\\n    libssl-dev \\\n    libmcrypt-dev \\\n    && rm -rf /var/lib/apt/lists/*\n\n# Install the PHP pdo_mysql extention\nRUN docker-php-ext-install pdo_mysql \\\n    # Install the PHP pdo_pgsql extention\n    && docker-php-ext-install pdo_pgsql \\\n    # Install the PHP gd library\n    && docker-php-ext-configure gd \\\n    --with-jpeg-dir=/usr/lib \\\n    --with-freetype-dir=/usr/include/freetype2 && \\\n    docker-php-ext-install gd\n\n# always run apt update when start and after add new source list, then clean up at end.\nRUN set -xe; \\\n    apt-get update -yqq && \\\n    pecl channel-update pecl.php.net && \\\n    apt-get install --no-install-recommends -yqq \\\n    apt-utils \\\n    #\n    #--------------------------------------------------------------------------\n    # Mandatory Software's Installation\n    #--------------------------------------------------------------------------\n    #\n    # Mandatory Software's such as (\"mcrypt\", \"pdo_mysql\", \"libssl-dev\", ....)\n    # are installed on the base image 'laradock/php-fpm' image. If you want\n    # to add more Software's or remove existing one, you need to edit the\n    # base image (https://github.com/Laradock/php-fpm).\n    #\n    # next lines are here becase there is no auto build on dockerhub see https://github.com/laradock/laradock/pull/1903#issuecomment-463142846\n    libzip-dev zip unzip && \\\n    docker-php-ext-configure zip --with-libzip && \\\n    # Install the zip extension\n    docker-php-ext-install zip && \\\n    php -m | grep -q 'zip' && rm -rf /var/lib/apt/lists/*;\n\nENV DEBIAN_FRONTEND noninteractive\n\n#--------------------------------------------------------------------------\n# 可选安装项\n#--------------------------------------------------------------------------\n\n#####################################\n# SOAP:\n#####################################\n\nARG INSTALL_SOAP=false\nRUN if [ ${INSTALL_SOAP} = true ]; then \\\n    rm /etc/apt/preferences.d/no-debian-php && \\\n    apt-get -y --no-install-recommends install libxml2-dev php-soap && \\\n    docker-php-ext-install soap \\\n    ; rm -rf /var/lib/apt/lists/*; fi\n\n#####################################\n# xDebug:\n#####################################\n\nARG INSTALL_XDEBUG=false\n\nRUN if [ ${INSTALL_XDEBUG} = true ]; then \\\n    if [ $(php -r \"echo PHP_MAJOR_VERSION;\") = \"5\" ]; then \\\n    pecl install xdebug-2.5.5; \\\n    else \\\n    pecl install xdebug; \\\n    fi && \\\n    docker-php-ext-enable xdebug \\\n    ;fi\n\nCOPY ./xdebug.ini /usr/local/etc/php/conf.d/xdebug.ini\n\nRUN sed -i \"s/xdebug.remote_autostart=0/xdebug.remote_autostart=1/\" /usr/local/etc/php/conf.d/xdebug.ini && \\\n    sed -i \"s/xdebug.remote_enable=0/xdebug.remote_enable=1/\" /usr/local/etc/php/conf.d/xdebug.ini && \\\n    sed -i \"s/xdebug.cli_color=0/xdebug.cli_color=1/\" /usr/local/etc/php/conf.d/xdebug.ini\n\n###########################################################################\n# PHP REDIS EXTENSION\n###########################################################################\n\nARG INSTALL_PHPREDIS=false\n\nRUN if [ ${INSTALL_PHPREDIS} = true ]; then \\\n    # Install Php Redis Extension\n    printf \"\\n\" | pecl install -o -f redis \\\n    &&  rm -rf /tmp/pear \\\n    &&  docker-php-ext-enable redis \\\n    ;fi\n\n###########################################################################\n# Swoole EXTENSION\n###########################################################################\n\nARG INSTALL_SWOOLE=false\n\nRUN if [ ${INSTALL_SWOOLE} = true ]; then \\\n    if [ $(php -r \"echo PHP_MAJOR_VERSION;\") = \"5\" ]; then \\\n    pecl install swoole-2.0.10; \\\n    else \\\n    if [ $(php -r \"echo PHP_MINOR_VERSION;\") = \"0\" ]; then \\\n    pecl install swoole-2.2.0; \\\n    else \\\n    pecl install swoole; \\\n    fi \\\n    fi && \\\n    docker-php-ext-enable swoole \\\n    && php -m | grep -q 'swoole' \\\n    ;fi\n\n#####################################\n# ZipArchive:\n#####################################\n\nARG INSTALL_ZIP_ARCHIVE=false\nRUN if [ ${INSTALL_ZIP_ARCHIVE} = true ]; then \\\n    docker-php-ext-install zip && \\\n    docker-php-ext-install zip \\\n    ;fi\n\n#####################################\n# PHP Memcached:\n#####################################\n\nARG INSTALL_MEMCACHED=false\n\nRUN if [ ${INSTALL_MEMCACHED} = true ]; then \\\n    if [ $(php -r \"echo PHP_MAJOR_VERSION;\") = \"5\" ]; then \\\n    curl -f -L -o /tmp/memcached.tar.gz \"https://github.com/php-memcached-dev/php-memcached/archive/2.2.0.tar.gz\"; \\\n    else \\\n    curl -f -L -o /tmp/memcached.tar.gz \"https://github.com/php-memcached-dev/php-memcached/archive/php7.tar.gz\"; \\\n    fi \\\n    && mkdir -p memcached \\\n    && tar -C memcached -zxvf /tmp/memcached.tar.gz --strip 1 \\\n    && ( cd memcached \\\n    && phpize \\\n    && ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" \\\n    && make -j$(nproc) \\\n    && make install) \\\n\n    && rm -r memcached \\\n    && rm /tmp/memcached.tar.gz \\\n    && docker-php-ext-enable memcached \\\n    ; else \\\n    curl -f -L -o /tmp/memcached.tar.gz \"https://github.com/php-memcached-dev/php-memcached/archive/php7.tar.gz\"; \\\n    fi \\\n\n\n\n\n\n\n\n\n\n\n\n\n    fi\n\n#####################################\n# MongoDB:\n#####################################\n\nARG INSTALL_MONGO=false\n\nRUN if [ ${INSTALL_MONGO} = true ]; then \\\n    if [ $(php -r \"echo PHP_MAJOR_VERSION;\") = \"5\" ]; then \\\n    pecl install mongo && \\\n    docker-php-ext-enable mongo \\\n    ;fi && \\\n    pecl install mongodb && \\\n    docker-php-ext-enable mongodb \\\n    ;fi\n\n###########################################################################\n# Opcache:\n###########################################################################\n\nARG INSTALL_OPCACHE=false\n\nRUN if [ ${INSTALL_OPCACHE} = true ]; then \\\n    docker-php-ext-install opcache \\\n    ;fi\n\nCOPY ./opcache.ini /usr/local/etc/php/conf.d/opcache.ini\n\n###########################################################################\n# Check PHP version:\n###########################################################################\n\nRUN set -xe; php -v | head -n 1 | grep -q \"PHP ${PHP_VERSION}.\"\n\n#\n#--------------------------------------------------------------------------\n# Final Touch\n#--------------------------------------------------------------------------\n#\n\nADD ./site.ini /usr/local/etc/php/conf.d\nADD ./site.pool.conf /usr/local/etc/php-fpm.d/\n\nUSER root\n\nRUN apt-get clean && \\\n    rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/* && \\\n    rm /var/log/lastlog /var/log/faillog\n\nRUN usermod -u 1000 www-data\n\nWORKDIR /var/www\n\nCMD [\"php-fpm\"]\n\nEXPOSE 9000\n"
}