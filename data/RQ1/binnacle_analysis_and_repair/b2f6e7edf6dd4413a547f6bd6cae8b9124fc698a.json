{
  "startTime": 1674250129497,
  "endTime": 1674250130048,
  "originalSmells": [
    {
      "rule": "wgetUseHttpsUrl",
      "position": {
        "lineStart": 81,
        "lineEnd": 81,
        "columnStart": 4,
        "columnEnd": 138
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 42,
        "lineEnd": 50,
        "columnStart": 5,
        "columnEnd": 7
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 61,
        "lineEnd": 61,
        "columnStart": 4,
        "columnEnd": 15
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 83,
        "lineEnd": 83,
        "columnStart": 4,
        "columnEnd": 30
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM ubuntu:16.04\n\n# Install system packages\nRUN apt-get -qq update && apt-get -qq install --no-install-recommends -y python3 \\ \n python3-dev \\\n python-pil \\\n python-lxml \\\n python-tk \\\n build-essential \\\n cmake \\ \n git \\ \n libgtk2.0-dev \\ \n pkg-config \\ \n libavcodec-dev \\ \n libavformat-dev \\ \n libswscale-dev \\ \n libtbb2 \\\n libtbb-dev \\ \n libjpeg-dev \\\n libpng-dev \\\n libtiff-dev \\\n libjasper-dev \\\n libdc1394-22-dev \\\n x11-apps \\\n wget \\\n vim \\\n ffmpeg \\\n unzip \\\n libusb-1.0-0-dev \\\n python3-setuptools \\\n python3-numpy \\\n zlib1g-dev \\\n libgoogle-glog-dev \\\n swig \\\n libunwind-dev \\\n libc++-dev \\\n libc++abi-dev \\\n build-essential \\\n && rm -rf /var/lib/apt/lists/*\n\n# Install core packages\nRUN wget -q -O /tmp/get-pip.py --no-check-certificate https://bootstrap.pypa.io/get-pip.py && python3 /tmp/get-pip.py\nRUN pip install --no-cache-dir -U pip \\\n numpy \\\n pillow \\\n matplotlib \\\n notebook \\\n Flask \\\n imutils \\\n paho-mqtt \\\n PyYAML\n\n# Install tensorflow models object detection\nRUN GIT_SSL_NO_VERIFY=true git clone -q https://github.com/tensorflow/models /usr/local/lib/python3.5/dist-packages/tensorflow/models\nRUN wget -q -P /usr/local/src/ --no-check-certificate https://github.com/google/protobuf/releases/download/v3.5.1/protobuf-python-3.5.1.tar.gz\n\n# Download & build protobuf-python\nRUN cd /usr/local/src/ \\\n && tar xf protobuf-python-3.5.1.tar.gz \\\n && rm protobuf-python-3.5.1.tar.gz \\\n && cd /usr/local/src/protobuf-3.5.1/ \\\n && ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" \\\n && make \\\n && make install \\\n && ldconfig \\\n && rm -rf /usr/local/src/protobuf-3.5.1/\n\n# Download & build OpenCV\nRUN wget -q -P /usr/local/src/ --no-check-certificate https://github.com/opencv/opencv/archive/4.0.1.zip\nRUN cd /usr/local/src/ \\\n && unzip 4.0.1.zip \\\n && rm 4.0.1.zip \\\n && cd /usr/local/src/opencv-4.0.1/ \\\n && mkdir build \\\n && cd /usr/local/src/opencv-4.0.1/build \\ \n && cmake -D CMAKE_INSTALL_TYPE=Release -D CMAKE_INSTALL_PREFIX=/usr/local/ .. \\\n && make -j4 \\\n && make install \\\n && rm -rf /usr/local/src/opencv-4.0.1\n\n# Download and install EdgeTPU libraries\nRUN wget -q -O edgetpu_api.tar.gz --no-check-certificate https://storage.googleapis.com/cloud-iot-edge-pretrained-models/edgetpu_api.tar.gz\n\nRUN tar xzf edgetpu_api.tar.gz \\\n  && cd python-tflite-source \\\n  && cp -p libedgetpu/libedgetpu_x86_64.so /lib/x86_64-linux-gnu/libedgetpu.so \\\n  && cp edgetpu/swig/compiled_so/_edgetpu_cpp_wrapper_x86_64.so edgetpu/swig/_edgetpu_cpp_wrapper.so \\\n  && cp edgetpu/swig/compiled_so/edgetpu_cpp_wrapper.py edgetpu/swig/ \\\n  && python3 setup.py develop --user && rm edgetpu_api.tar.gz\n\n# Minimize image size\nRUN (apt-get autoremove -y; \\\n     apt-get autoclean -y)\n\n# symlink the model and labels\nRUN ln -s /python-tflite-source/edgetpu/test_data/mobilenet_ssd_v2_coco_quant_postprocess_edgetpu.tflite /frozen_inference_graph.pb\nRUN ln -s /python-tflite-source/edgetpu/test_data/coco_labels.txt /label_map.pbtext\n\n# Set TF object detection available\nENV PYTHONPATH \"$PYTHONPATH:/usr/local/lib/python3.5/dist-packages/tensorflow/models/research:/usr/local/lib/python3.5/dist-packages/tensorflow/models/research/slim\"\nRUN cd /usr/local/lib/python3.5/dist-packages/tensorflow/models/research && protoc object_detection/protos/*.proto --python_out=.\n\nWORKDIR /opt/frigate/\nADD frigate frigate/\nCOPY detect_objects.py .\n\nCMD [\"python3\", \"-u\", \"detect_objects.py\"]\n"
}