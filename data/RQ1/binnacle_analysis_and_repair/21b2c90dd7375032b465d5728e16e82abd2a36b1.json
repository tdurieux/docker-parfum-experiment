{
  "startTime": 1674236806089,
  "endTime": 1674236806387,
  "originalSmells": [
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 126,
        "lineEnd": 126,
        "columnStart": 4,
        "columnEnd": 71
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 127,
        "lineEnd": 127,
        "columnStart": 7,
        "columnEnd": 55
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 103,
        "lineEnd": 103,
        "columnStart": 4,
        "columnEnd": 23
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM node:10-alpine as glibcbuild\n\n\nENV LANG=C.UTF-8\n\n# Here we install GNU libc (aka glibc) and set C.UTF-8 locale as default.\n\nRUN ALPINE_GLIBC_BASE_URL=\"https://github.com/sgerrand/alpine-pkg-glibc/releases/download\" && \\\n    ALPINE_GLIBC_PACKAGE_VERSION=\"2.29-r0\" && \\\n    ALPINE_GLIBC_BASE_PACKAGE_FILENAME=\"glibc-$ALPINE_GLIBC_PACKAGE_VERSION.apk\" && \\\n    ALPINE_GLIBC_BIN_PACKAGE_FILENAME=\"glibc-bin-$ALPINE_GLIBC_PACKAGE_VERSION.apk\" && \\\n    ALPINE_GLIBC_I18N_PACKAGE_FILENAME=\"glibc-i18n-$ALPINE_GLIBC_PACKAGE_VERSION.apk\" && \\\n    apk add --no-cache --virtual=.build-dependencies wget ca-certificates && \\\n    echo \\\n        \"-----BEGIN PUBLIC KEY-----\\\n        MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEApZ2u1KJKUu/fW4A25y9m\\\n        y70AGEa/J3Wi5ibNVGNn1gT1r0VfgeWd0pUybS4UmcHdiNzxJPgoWQhV2SSW1JYu\\\n        tOqKZF5QSN6X937PTUpNBjUvLtTQ1ve1fp39uf/lEXPpFpOPL88LKnDBgbh7wkCp\\\n        m2KzLVGChf83MS0ShL6G9EQIAUxLm99VpgRjwqTQ/KfzGtpke1wqws4au0Ab4qPY\\\n        KXvMLSPLUp7cfulWvhmZSegr5AdhNw5KNizPqCJT8ZrGvgHypXyiFvvAH5YRtSsc\\\n        Zvo9GI2e2MaZyo9/lvb+LbLEJZKEQckqRj4P26gmASrZEPStwc+yqy1ShHLA0j6m\\\n        1QIDAQAB\\\n        -----END PUBLIC KEY-----\" | sed 's/   */\\n/g' > \"/etc/apk/keys/sgerrand.rsa.pub\" && \\\n    wget \\\n        \"$ALPINE_GLIBC_BASE_URL/$ALPINE_GLIBC_PACKAGE_VERSION/$ALPINE_GLIBC_BASE_PACKAGE_FILENAME\" \\\n        \"$ALPINE_GLIBC_BASE_URL/$ALPINE_GLIBC_PACKAGE_VERSION/$ALPINE_GLIBC_BIN_PACKAGE_FILENAME\" \\\n        \"$ALPINE_GLIBC_BASE_URL/$ALPINE_GLIBC_PACKAGE_VERSION/$ALPINE_GLIBC_I18N_PACKAGE_FILENAME\" && \\\n    apk add --no-cache \\\n        \"$ALPINE_GLIBC_BASE_PACKAGE_FILENAME\" \\\n        \"$ALPINE_GLIBC_BIN_PACKAGE_FILENAME\" \\\n        \"$ALPINE_GLIBC_I18N_PACKAGE_FILENAME\" && \\\n    \\\n    rm \"/etc/apk/keys/sgerrand.rsa.pub\" && \\\n    /usr/glibc-compat/bin/localedef --force --inputfile POSIX --charmap UTF-8 \"$LANG\" || true && \\\n    echo \"export LANG=$LANG\" > /etc/profile.d/locale.sh && \\\n    \\\n    apk del glibc-i18n && \\\n    \\\n    rm \"/root/.wget-hsts\" && \\\n    apk del .build-dependencies && \\\n    rm \\\n        \"$ALPINE_GLIBC_BASE_PACKAGE_FILENAME\" \\\n        \"$ALPINE_GLIBC_BIN_PACKAGE_FILENAME\" \\\n        \"$ALPINE_GLIBC_I18N_PACKAGE_FILENAME\"\n\n\n\nFROM glibcbuild\n\nARG GITHUB_TOKEN\nARG PY_REQUIREMENTS\nENV TINI_VERSION v0.16.1\nLABEL band.images.theia.version=\"0.2.0\"\n\nENV RST_UID=472 \\ \n    RST_GID=472 \\\n    WORKSPACE_PATH=/home/theia/project \\\n    BUILD_PATH=/home/theia/.build \\\n    THEIA=/home/theia/.build/theia \\\n    LANG=C.UTF-8\n\nRUN apk add --no-cache \\\n    ca-certificates \\\n    make gcc g++ \\\n    util-linux pciutils usbutils coreutils binutils findutils grep \\\n    libffi-dev \\\n    gzip bzip2 curl nano jq \\\n    git openssh-client \\\n    su-exec sudo zsh \\\n    python\n\nRUN wget --quiet https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh -O ~/miniconda.sh \\\n    && /bin/zsh ~/miniconda.sh -b -p /opt/conda \\\n    && rm ~/miniconda.sh \\\n    && /opt/conda/bin/conda clean -tipsy \\\n    && chmod 0755 /opt/conda/etc/profile.d/conda.sh\n\nADD https://github.com/krallin/tini/releases/download/${TINI_VERSION}/tini /usr/bin/tini\nRUN chmod +x /usr/bin/tini\n\nWORKDIR /home/theia\n\nRUN echo \"theia ALL=(ALL) NOPASSWD: ALL\" >> /etc/sudoers.d/default \\\n    && chmod 0440 /etc/sudoers.d/default \\\n    && addgroup -g ${RST_GID} theia \\\n    && adduser -u ${RST_UID} -G theia -s /bin/sh -D theia \\\n    && chmod g+rw /home/theia \\\n    && mkdir -p ${HOME}/.build ${HOME}/project  \\\n    && chown -R theia:theia /opt/conda\n\nUSER theia\n\nENV PORT_THEIA=${PORT_THEIA:-8000} \\\n    PORT=${PORT_DEV:-8080} \\\n    SHELL=/bin/zsh \\\n    USE_LOCAL_GIT=true \\\n    VIRTUAL_ENV_DISABLE_PROMPT=yes \\\n    JSON_LOGS=0\n\n# ##### ZSH\n\nCOPY --chown=theia:theia prezto.tgz init_zprezto ${BUILD_PATH}/\nRUN cd ${BUILD_PATH} && \\\n    tar -zxf prezto.tgz && \\\n    mv prezto $HOME/.zprezto && \\\n    ./init_zprezto && rm prezto.tgz\n\n\n# ##### Node.js part\n\nCOPY --chown=theia:theia package/package.json ./.build\n\nRUN cd ${BUILD_PATH} && yarn --cache-folder ./ycache && rm -rf ./ycache\nRUN cd ${BUILD_PATH} && yarn theia build\n\nENV NODE_ENV=production\n\n# ##### Python part\n\nRUN /opt/conda/bin/conda upgrade -y pip && \\\n    /opt/conda/bin/conda config --add channels conda-forge && \\\n    /opt/conda/bin/conda clean --all\n\nENV PATH /opt/conda/bin:$PATH\nCOPY --chown=theia:theia requirements.txt .editorconfig ${BUILD_PATH}/\n\nRUN pip install --no-cache-dir -U git+https://github.com/rockstat/band@master#egg=band \\\n    && pip install --no-cache-dir -U -r ${BUILD_PATH}/requirements.txt\n\nCOPY --chown=theia:theia init_app ./.build/\nCOPY --chown=theia:theia .theia/settings.json .theia/tasks.json .theia/tasks.json-tmpl ./.build/.theia/\n\nEXPOSE 8080 8000\n\n# ENTRYPOINT [ \"/usr/bin/tini\", \"--\" ]\n\nCMD ${BUILD_PATH}/init_app\n"
}