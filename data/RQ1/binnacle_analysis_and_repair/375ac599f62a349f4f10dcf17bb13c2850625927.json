{
  "startTime": 1674245097196,
  "endTime": 1674245097893,
  "originalSmells": [
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 144,
        "lineEnd": 150,
        "columnStart": 4,
        "columnEnd": 16
      }
    },
    {
      "rule": "gpgUseBatchFlag",
      "position": {
        "lineStart": 26,
        "lineEnd": 26,
        "columnStart": 4,
        "columnEnd": 99
      }
    },
    {
      "rule": "gpgUseBatchFlag",
      "position": {
        "lineStart": 46,
        "lineEnd": 46,
        "columnStart": 1,
        "columnEnd": 63
      }
    },
    {
      "rule": "gpgUseBatchFlag",
      "position": {
        "lineStart": 47,
        "lineEnd": 47,
        "columnStart": 1,
        "columnEnd": 59
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 34,
        "lineEnd": 34,
        "columnStart": 22,
        "columnEnd": 48
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 104,
        "lineEnd": 104,
        "columnStart": 1,
        "columnEnd": 38
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 106,
        "lineEnd": 109,
        "columnStart": 1,
        "columnEnd": 2
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 126,
        "lineEnd": 140,
        "columnStart": 22,
        "columnEnd": 18
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 142,
        "lineEnd": 142,
        "columnStart": 22,
        "columnEnd": 56
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 126,
        "lineEnd": 140,
        "columnStart": 22,
        "columnEnd": 18
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 142,
        "lineEnd": 142,
        "columnStart": 22,
        "columnEnd": 56
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# postgres docker file adapted for use\n# vim:set ft=dockerfile:\nFROM debian:jessie\n# added extra field\nLABEL maintainer-1=\"Haaroon Yousaf (h.yousaf [at] ucl.ac.uk)\"\n\nRUN set -ex; \\\n\tif ! command -v gpg > /dev/null; then \\\n\t\tapt-get update; \\\n\t\tapt-get install -y --no-install-recommends \\\n\t\t\tgnupg \\\n\t\t\tdirmngr \\\n\t\t; \\\n\t\trm -rf /var/lib/apt/lists/*; \\\n\tfi\n\n# explicitly set user/group IDs\nRUN groupadd -r postgres --gid=999 && useradd -m -r -g postgres --uid=999 postgres\n\n# grab gosu for easy step-down from root\nENV GOSU_VERSION 1.10\nRUN set -x \\\n\t&& apt-get update && apt-get install -y --no-install-recommends ca-certificates wget && rm -rf /var/lib/apt/lists/* \\\n\t&& wget -O /usr/local/bin/gosu \"https://github.com/tianon/gosu/releases/download/$GOSU_VERSION/gosu-$(dpkg --print-architecture)\" \\\n\t&& wget -O /usr/local/bin/gosu.asc \"https://github.com/tianon/gosu/releases/download/$GOSU_VERSION/gosu-$(dpkg --print-architecture).asc\" \\\n\t&& export GNUPGHOME=\"$(mktemp -d)\" \\\n\t&& gpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys B42F6819007F00F88E364FD4036A9C25BF357DD4 \\\n\t&& gpg --batch --verify /usr/local/bin/gosu.asc /usr/local/bin/gosu \\\n\t&& rm -rf \"$GNUPGHOME\" /usr/local/bin/gosu.asc \\\n\t&& chmod +x /usr/local/bin/gosu \\\n\t&& gosu nobody true \\\n\t&& apt-get purge -y --auto-remove ca-certificates wget\n\n# make the \"en_US.UTF-8\" locale so postgres will be utf-8 enabled by default\nRUN apt-get update && apt-get install --no-install-recommends -y locales && rm -rf /var/lib/apt/lists/* \\\n\t&& localedef -i en_US -c -f UTF-8 -A /usr/share/locale/locale.alias en_US.UTF-8\nENV LANG en_US.utf8\n\nRUN mkdir /docker-entrypoint-initdb.d\n\nRUN set -ex; \\\n# pub   4096R/ACCC4CF8 2011-10-13 [expires: 2019-07-02]\n#       Key fingerprint = B97B 0AFC AA1A 47F0 44F2  44A0 7FCC 7D46 ACCC 4CF8\n# uid                  PostgreSQL Debian Repository\n\tkey='B97B0AFCAA1A47F044F244A07FCC7D46ACCC4CF8'; \\\n\texport GNUPGHOME=\"$(mktemp -d)\"; \\\n\tgpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys \"$key\"; \\\n\tgpg --batch --export \"$key\" > /etc/apt/trusted.gpg.d/postgres.gpg; \\\n\trm -rf \"$GNUPGHOME\"; \\\n\tapt-key list\n\nENV PG_MAJOR 9.5\nENV PG_VERSION 9.5.12-1.pgdg80+1\n\nRUN set -ex; \\\n\n\tdpkgArch=\"$(dpkg --print-architecture)\"; \\\n\tcase \"$dpkgArch\" in \\\n\t\tamd64|i386|ppc64el) \\\n# arches officialy built by upstream\n\t\t\techo \"deb http://apt.postgresql.org/pub/repos/apt/ jessie-pgdg main $PG_MAJOR\" > /etc/apt/sources.list.d/pgdg.list; \\\n\t\t\tapt-get update; \\\n\t\t\t;; \\\n\t\t*) \\\n# we're on an architecture upstream doesn't officially build for\n# let's build binaries from their published source packages\n\t\t\techo \"deb-src http://apt.postgresql.org/pub/repos/apt/ jessie-pgdg main $PG_MAJOR\" > /etc/apt/sources.list.d/pgdg.list; \\\n\t\t\t\\\n\t\t\ttempDir=\"$(mktemp -d)\"; \\\n\t\t\tcd \"$tempDir\"; \\\n\t\t\t\\\n\t\t\tsavedAptMark=\"$(apt-mark showmanual)\"; \\\n\t\t\t\\\n# build .deb files from upstream's source packages (which are verified by apt-get)\n\t\t\tapt-get update; \\\n\t\t\tapt-get build-dep -y \\\n\t\t\t\tpostgresql-common pgdg-keyring \\\n\t\t\t\t\"postgresql-$PG_MAJOR=$PG_VERSION\" \\\n\t\t\t; \\\n\t\t\tDEB_BUILD_OPTIONS=\"nocheck parallel=$(nproc)\" \\\n\t\t\t\tapt-get source --compile \\\n\t\t\t\t\tpostgresql-common pgdg-keyring \\\n\t\t\t\t\t\"postgresql-$PG_MAJOR=$PG_VERSION\" \\\n\t\t\t; \\\n# we don't remove APT lists here because they get re-downloaded and removed later\n\t\t\t\\\n# reset apt-mark's \"manual\" list so that \"purge --auto-remove\" will remove all build dependencies\n# (which is done after we install the built packages so we don't have to redownload any overlapping dependencies)\n\t\t\tapt-mark showmanual | xargs apt-mark auto > /dev/null; \\\n\t\t\tapt-mark manual $savedAptMark; \\\n\t\t\t\\\n# create a temporary local APT repo to install from (so that dependency resolution can be handled by APT, as it should be)\n\t\t\tls -lAFh; \\\n\t\t\tdpkg-scanpackages . > Packages; \\\n\t\t\tgrep '^Package: ' Packages; \\\n\t\t\techo \"deb [ trusted=yes ] file://$tempDir ./\" > /etc/apt/sources.list.d/temp.list; \\\n# work around the following APT issue by using \"Acquire::GzipIndexes=false\" (overriding \"/etc/apt/apt.conf.d/docker-gzip-indexes\")\n#   Could not open file /var/lib/apt/lists/partial/_tmp_tmp.ODWljpQfkE_._Packages - open (13: Permission denied)\n#   ...\n#   E: Failed to fetch store:/var/lib/apt/lists/partial/_tmp_tmp.ODWljpQfkE_._Packages  Could not open file /var/lib/apt/lists/partial/_tmp_tmp.ODWljpQfkE_._Packages - open (13: Permission denied)\n\t\t\tapt-get -o Acquire::GzipIndexes=false update; \\\n\t\t\t;; \\\n\tesac; \\\n\n\tapt-get install --no-install-recommends -y postgresql-common; \\\n\tsed -ri 's/#(create_main_cluster) .*$/\\1 = false/' /etc/postgresql-common/createcluster.conf; \\\n\tapt-get install --no-install-recommends -y \\\n\t\t\"postgresql-$PG_MAJOR=$PG_VERSION\" \\\n\t\t\"postgresql-contrib-$PG_MAJOR=$PG_VERSION\" \\\n\t; \\\n\n\trm -rf /var/lib/apt/lists/*; \\\n\n\tif [ -n \"$tempDir\" ]; then \\\n# if we have leftovers from building, let's purge them (including extra, unnecessary build deps)\n\t\tapt-get purge -y --auto-remove; \\\n\t\trm -rf \"$tempDir\" /etc/apt/sources.list.d/temp.list; \\\n\tfi\n\n# make the sample config easier to munge (and \"correct by default\")\nRUN mv -v \"/usr/share/postgresql/$PG_MAJOR/postgresql.conf.sample\" /usr/share/postgresql/ \\\n\t&& ln -sv ../postgresql.conf.sample \"/usr/share/postgresql/$PG_MAJOR/\" \\\n\t&& sed -ri \"s!^#?(listen_addresses)\\s*=\\s*\\S+.*!\\1 = '*'!\" /usr/share/postgresql/postgresql.conf.sample\n\nRUN mkdir -p /var/run/postgresql && chown -R postgres:postgres /var/run/postgresql && chmod 2777 /var/run/postgresql\n\nRUN apt-get update && apt-get install --no-install-recommends -y build-essential \\\n        checkinstall \\\n        wget \\\n        curl \\\n        libreadline-gplv2-dev \\\n        libncursesw5-dev \\\n        libssl-dev \\\n        libsqlite3-dev \\\n        tk-dev \\\n        libgdbm-dev \\\n        libc6-dev \\\n        libbz2-dev \\\n        python2.7 \\\n        python-pip \\\n        python-dev && rm -rf /var/lib/apt/lists/*;\n\nRUN apt-get update && apt-get install --no-install-recommends -y python-psycopg2 && rm -rf /var/lib/apt/lists/*;\n\nRUN pip install --no-cache-dir python-bitcoinrpc \\\n        SQLAlchemy==1.1.13 \\\n        jsonschema==2.6.0 \\\n        requests==2.18.4 \\\n        simplejson==3.11.1 \\\n        sqlalchemy-utils==0.33.2 \\\n        psycopg2\n\n\nENV PATH $PATH:/usr/lib/postgresql/$PG_MAJOR/bin\nENV PGDATA /var/run/postgresql/data/pgdata\nENV SCRIPTS /var/run/postgresql/data/scripts\nENV POSTGRES_DB \"zcashdb\"\n\nRUN mkdir -p \"$SCRIPTS\" && chown -R postgres:postgres \"$SCRIPTS\" && chmod 777 \"$SCRIPTS\" # this 777 will be replaced by 700 at runtime (allows semi-arbitrary \"--user\" values)\nADD docker/*.py $SCRIPTS/\nRUN mkdir -p \"$PGDATA\" && chown -R postgres:postgres \"$PGDATA\" && chmod 777 \"$PGDATA\" # this 777 will be replaced by 700 at runtime (allows semi-arbitrary \"--user\" values)\nCOPY docker-entrypoint.sh /usr/local/bin/\nRUN chmod +x /usr/local/bin/docker-entrypoint.sh\nRUN ln -s usr/local/bin/docker-entrypoint.sh / # backwards compatibility\nENTRYPOINT [\"docker-entrypoint.sh\"]\n\nVOLUME [\"/var/run/postgresql/data/pgdata\"]\nVOLUME [\"/root/research\"]\n\nEXPOSE 5432\nCMD [\"postgres\"]\n"
}