{
  "startTime": 1674248754476,
  "endTime": 1674248754677,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 23,
        "lineEnd": 23,
        "columnStart": 4,
        "columnEnd": 64
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 26,
        "lineEnd": 26,
        "columnStart": 4,
        "columnEnd": 53
      }
    },
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 37,
        "lineEnd": 37,
        "columnStart": 15,
        "columnEnd": 26
      }
    },
    {
      "rule": "yarnCacheCleanAfterInstall",
      "position": {
        "lineStart": 38,
        "lineEnd": 38,
        "columnStart": 24,
        "columnEnd": 36
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 18,
        "lineEnd": 18,
        "columnStart": 4,
        "columnEnd": 27
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 29,
        "lineEnd": 29,
        "columnStart": 4,
        "columnEnd": 65
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 29,
        "lineEnd": 29,
        "columnStart": 4,
        "columnEnd": 65
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "ARG pythonversion\nFROM local/pontoon_base_${pythonversion}\n\nENV DEBIAN_FRONTEND=noninteractive\nENV HGPYTHON3=1\n\nWORKDIR /app\n\n# Install OS-level things\nCOPY docker/set_up_ubuntu.sh /tmp/set_up_ubuntu.sh\n\nRUN /tmp/set_up_ubuntu.sh\n\n# Create the app user\nRUN useradd --shell /bin/bash -c \"\" -m app\n\n# Install Pontoon Python requirements\nCOPY requirements/* /app/requirements/\nRUN pip install --no-cache-dir -U 'pip>=8' && \\\n    pip install --no-cache-dir --require-hashes -r requirements/dev.txt && \\\n    pip install --no-cache-dir --require-hashes -r requirements/test.txt\n\n# Install nodejs and npm from Nodesource's 10.x branch, as well as yarn\nRUN curl -f -s https://deb.nodesource.com/gpgkey/nodesource.gpg.key | apt-key add - && \\\n    echo 'deb https://deb.nodesource.com/node_10.x jessie main' > /etc/apt/sources.list.d/nodesource.list && \\\n    echo 'deb-src https://deb.nodesource.com/node_10.x jessie main' >> /etc/apt/sources.list.d/nodesource.list\nRUN curl -f -sS https://dl.yarnpkg.com/debian/pubkey.gpg | apt-key add - && \\\n    echo 'deb https://dl.yarnpkg.com/debian/ stable main' > /etc/apt/sources.list.d/yarn.list\nRUN DEBIAN_FRONTEND=noninteractive apt-get update && \\\n    DEBIAN_FRONTEND=noninteractive apt-get --no-install-recommends install -y nodejs yarn && rm -rf /var/lib/apt/lists/*;\n\nCOPY . /app/\n\n# Create the folder for front-end assets\nRUN mkdir -p /app/assets\n\n# Install node requirements\nRUN cd /app && npm install && npm cache clean --force;\nRUN cd /app/frontend && yarn install && yarn cache clean;\n\nCOPY ./docker/config/webapp.env /app/.env\n\n# Python environment variables\nENV PYTHONUNBUFFERED 1\nENV PYTHONDONTWRITEBYTECODE 1\nENV PYTHONPATH /app\n\n# JavaScript applications paths\nENV WEBPACK_BINARY /app/node_modules/.bin/webpack\nENV YUGLIFY_BINARY /app/node_modules/.bin/yuglify\n\n# Run webpack to compile JS files\nRUN cd /app/ && $WEBPACK_BINARY\n\n# Build Translate.Next frontend resources\nRUN cd /app/frontend/ && yarn build\n\n# Run collectstatic in container which puts files in the default place for\n# static files.\nRUN cd /app/ && python manage.py collectstatic --noinput\n\nRUN chown -R app:app /app\n\nCMD [\"/app/docker/run_webapp.sh\"]\n"
}