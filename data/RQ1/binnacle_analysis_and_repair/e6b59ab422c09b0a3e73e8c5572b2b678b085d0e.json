{
  "startTime": 1674251122352,
  "endTime": 1674251122480,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 30,
        "lineEnd": 30,
        "columnStart": 7,
        "columnEnd": 177
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 30,
        "lineEnd": 30,
        "columnStart": 76,
        "columnEnd": 152
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 9,
        "lineEnd": 9,
        "columnStart": 4,
        "columnEnd": 23
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 10,
        "lineEnd": 10,
        "columnStart": 4,
        "columnEnd": 20
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM quay.io/appr/appr:base\n\nENV workdir /opt/appr-server\nRUN mkdir -p $workdir\nRUN apk --no-cache --update add python py-pip openssl ca-certificates\nRUN apk --no-cache --update add --virtual build-dependencies \\\n      python-dev build-base wget openssl-dev libffi-dev libstdc++\nCOPY . $workdir\nWORKDIR $workdir\nRUN pip install --no-cache-dir jsonnet\nRUN pip install --no-cache-dir -e .\n\nRUN /pyinstaller/pyinstaller.sh --onefile --noconfirm \\\n    --add-data \"appr/jsonnet/:appr/jsonnet\" \\\n    --onefile \\\n    --hidden-import _jsonnet \\\n    --log-level DEBUG \\\n    --clean \\\n    bin/appr\n\n\nfrom alpine:latest\nARG with_kubectl=false\nENV HOME=/appr\nRUN mkdir -p /opt/bin && mkdir -p /opt/bin/k8s && mkdir $HOME && mkdir -p $HOME/local\nENV PATH=${PATH}:/opt/bin:/opt/bin/k8s\nRUN apk --no-cache add ca-certificates\nENV WITH_KUBECTL ${with_kubectl}\nRUN if [ \"$WITH_KUBECTL\" = true ]; then \\\n    apk add --update curl && rm -rf /var/cache/apk/* \\\n    && curl -f -LO https://storage.googleapis.com/kubernetes-release/release/$( curl -f -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/amd64/kubectl \\\n    && chmod +x ./kubectl \\\n    && cp ./kubectl /opt/bin/k8s; \\\n    fi\n\nWORKDIR /appr/local\n\nCOPY --from=0 /opt/appr-server/dist/appr /opt/bin\nRUN appr plugins install helm\n\nENTRYPOINT [\"appr\"]\n"
}