{
  "startTime": 1674238630350,
  "endTime": 1674238630500,
  "originalSmells": [
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 10,
        "lineEnd": 10,
        "columnStart": 25,
        "columnEnd": 163
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM ubuntu:14.04\nMAINTAINER Dmitry Babokin <dmitry.y.babokin@intel.com>\n\n# !!! Make sure that your docker config provides enough memory to the container,\n# otherwise LLVM build may fail, as it will use all the cores available to container.\n\n# If you are behind a proxy, let apt-get know about it\n#ENV http_proxy=http://proxy.yourcompany.com:888\n\n# Packages required to build ISPC and Clang.\nRUN apt-get -y update && apt-get install --no-install-recommends -y wget build-essential vim gcc g++ git subversion python m4 bison flex zlib1g-dev ncurses-dev libtinfo-dev libc6-dev-i386 && \\\n    rm -rf /var/lib/apt/lists/*\n\n# Download and install required version of cmake (3.8) for ISPC build\nRUN wget https://cmake.org/files/v3.8/cmake-3.8.0-Linux-x86_64.sh && mkdir /opt/cmake && sh cmake-3.8.0-Linux-x86_64.sh --prefix=/opt/cmake --skip-license && \\\n    ln -s /opt/cmake/bin/cmake /usr/local/bin/cmake && rm cmake-3.8.0-Linux-x86_64.sh\n\n# If you are behind a proxy, you need to configure git and svn.\n#RUN git config --global --add http.proxy http://proxy.yourcompany.com:888\n\n# Initialize svn configs\n#RUN svn --version --quiet\n#RUN echo \"http-proxy-host=proxy.yourcompany.com\" >> ~/.subversion/servers\n#RUN echo \"http-proxy-port=888\" >> ~/.subversion/servers\n\nWORKDIR /usr/local/src\n\n# Fork ispc on github and clone *your* fork.\nRUN git clone https://github.com/ispc/ispc.git\n\n# This is home for Clang builds\nRUN mkdir /usr/local/src/llvm\n\nENV ISPC_HOME=/usr/local/src/ispc\nENV LLVM_HOME=/usr/local/src/llvm\n\n# If you are going to run test for future platforms, go to\n# http://www.intel.com/software/sde and download the latest version,\n# extract it, add to path and set SDE_HOME.\n\nWORKDIR /usr/local/src/ispc\n\n# Build Clang with all required patches.\n# Pass required LLVM_VERSION with --build-arg LLVM_VERSION=<version>.\n# By default 8.0 is used.\n# Note self-build options, it's required to build clang and ispc with the same compiler,\n# i.e. if clang was built by gcc, you may need to use gcc to build ispc (i.e. run \"make gcc\"),\n# or better do clang selfbuild and use it for ispc build as well (i.e. just \"make\").\n# \"rm\" are just to keep docker image small.\nARG LLVM_VERSION=8.0\nRUN ./alloy.py -b --version=$LLVM_VERSION --selfbuild --git && \\\n    rm -rf $LLVM_HOME/build-$LLVM_VERSION $LLVM_HOME/llvm-$LLVM_VERSION $LLVM_HOME/bin-$LLVM_VERSION_temp $LLVM_HOME/build-$LLVM_VERSION_temp\n\nENV PATH=$LLVM_HOME/bin-$LLVM_VERSION/bin:$PATH\n\n# Configure ISPC build\nRUN mkdir build_$LLVM_VERSION\nWORKDIR build_$LLVM_VERSION\nRUN cmake ../ -DCMAKE_CXX_COMPILER=clang++ -DCMAKE_INSTALL_PREFIX=/usr/local/src/ispc/bin-$LLVM_VERSION\n\n# Build ISPC\nRUN make ispc -j8 && make install\nWORKDIR ../\nRUN rm -rf build_$LLVM_VERSION\n"
}