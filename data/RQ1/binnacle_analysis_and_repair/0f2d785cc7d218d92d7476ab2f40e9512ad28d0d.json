{
  "startTime": 1674241293413,
  "endTime": 1674241293710,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 32,
        "lineEnd": 32,
        "columnStart": 4,
        "columnEnd": 49
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 42,
        "lineEnd": 42,
        "columnStart": 4,
        "columnEnd": 85
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM php:7.0.6-fpm-alpine\nMAINTAINER Tomaz Zaman <tomaz@codeable.io>\n\n# We need these system-level scritps to run WordPress successfully\nRUN apk add --no-cache nginx mysql-client supervisor curl \\\n    bash redis imagemagick-dev\n\n# As per image documentation, this is how we install PHP modules\nRUN docker-php-ext-install -j$(grep -c ^processor /proc/cpuinfo 2>/dev/null || 1) \\\n    iconv gd mbstring fileinfo curl xmlreader xmlwriter spl ftp mysqli opcache\n\n# Install imagemagick for PHP\nRUN apk add --no-cache libtool build-base autoconf \\\n    && pecl install imagick \\\n    && docker-php-ext-enable imagick \\\n    && apk del libtool build-base autoconf\n\n# Create a user called \"deployer\" without a password and belonging\n# to the same group as php-fpm and nginx belong to\nRUN adduser -D deployer -s /bin/bash -G www-data\n\n# Set working directory to wp-content, which is a mounted volume\nVOLUME /var/www/content\nWORKDIR /var/www/content\n\n# Environment variables that make the reuse easier\nENV WP_ROOT /usr/src/wordpress\nENV WP_VERSION 4.5.2\nENV WP_SHA1 bab94003a5d2285f6ae76407e7b1bbb75382c36e\nENV WP_DOWNLOAD_URL https://wordpress.org/wordpress-$WP_VERSION.tar.gz\n\n# Download WP and extract it to /usr/src/wordpress\nRUN curl -f -o wordpress.tar.gz -SL $WP_DOWNLOAD_URL \\\n\t&& echo \"$WP_SHA1 *wordpress.tar.gz\" | sha1sum -c - \\\n\t&& tar -xzf wordpress.tar.gz -C /usr/src/ \\\n\t&& rm wordpress.tar.gz\n\n# Copy our cron configuration and set proper permissions\nCOPY cron.conf /etc/crontabs/deployer\nRUN chmod 600 /etc/crontabs/deployer\n\n# Install WP-CLI (for convenience)\nRUN curl -f -O https://raw.githubusercontent.com/wp-cli/builds/gh-pages/phar/wp-cli.phar \\\n    && chmod +x wp-cli.phar \\\n    && mv wp-cli.phar /usr/local/bin/wp\n\n# Copy over our custom Nginx configuration and log to stderr/stdout\nCOPY nginx.conf /etc/nginx/nginx.conf\nCOPY virtual-host.conf /etc/nginx/conf.d/\nRUN ln -sf /dev/stdout /var/log/nginx/access.log \\\n    && ln -sf /dev/stderr /var/log/nginx/error.log \\\n    && chown -R www-data:www-data /var/lib/nginx\n\n# Copy our configuration and set proper permissions\nCOPY wp-config.php $WP_ROOT\nRUN chown -R deployer:www-data $WP_ROOT \\\n    && chmod 640 $WP_ROOT/wp-config.php\n\nRUN mkdir -p /var/www/content/uploads \\\n    && chown -R www-data:www-data /var/www/content/uploads\n\n# Copy supervisor configuration for both processes\nRUN mkdir -p /var/log/supervisor\nCOPY supervisord.conf /etc/supervisord.conf\n\n# Copy and prepare the entrypoint\nCOPY docker-entrypoint.sh /\nRUN chmod +x /docker-entrypoint.sh\nENTRYPOINT [ \"/docker-entrypoint.sh\" ]\n\nCMD [ \"/usr/bin/supervisord\", \"-c\", \"/etc/supervisord.conf\" ]\n"
}