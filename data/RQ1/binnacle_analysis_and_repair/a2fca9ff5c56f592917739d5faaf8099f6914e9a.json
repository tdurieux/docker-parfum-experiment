{
  "startTime": 1674251830228,
  "endTime": 1674251832454,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 219,
        "lineEnd": 219,
        "columnStart": 4,
        "columnEnd": 43
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 308,
        "lineEnd": 308,
        "columnStart": 4,
        "columnEnd": 62
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 338,
        "lineEnd": 338,
        "columnStart": 8,
        "columnEnd": 84
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 347,
        "lineEnd": 347,
        "columnStart": 8,
        "columnEnd": 84
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 396,
        "lineEnd": 396,
        "columnStart": 8,
        "columnEnd": 50
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 398,
        "lineEnd": 398,
        "columnStart": 8,
        "columnEnd": 50
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 430,
        "lineEnd": 430,
        "columnStart": 4,
        "columnEnd": 121
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 675,
        "lineEnd": 675,
        "columnStart": 5,
        "columnEnd": 70
      }
    },
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 343,
        "lineEnd": 343,
        "columnStart": 12,
        "columnEnd": 88
      }
    },
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 352,
        "lineEnd": 352,
        "columnStart": 12,
        "columnEnd": 45
      }
    },
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 357,
        "lineEnd": 357,
        "columnStart": 4,
        "columnEnd": 76
      }
    },
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 660,
        "lineEnd": 660,
        "columnStart": 23,
        "columnEnd": 42
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 697,
        "lineEnd": 697,
        "columnStart": 5,
        "columnEnd": 30
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 698,
        "lineEnd": 698,
        "columnStart": 5,
        "columnEnd": 37
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 597,
        "lineEnd": 597,
        "columnStart": 11,
        "columnEnd": 22
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 610,
        "lineEnd": 610,
        "columnStart": 11,
        "columnEnd": 44
      }
    },
    {
      "rule": "aptGetInstallUseY",
      "position": {
        "lineStart": 222,
        "lineEnd": 222,
        "columnStart": 4,
        "columnEnd": 35
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 86,
        "lineEnd": 86,
        "columnStart": 2,
        "columnEnd": 44
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 98,
        "lineEnd": 98,
        "columnStart": 4,
        "columnEnd": 35
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 99,
        "lineEnd": 99,
        "columnStart": 4,
        "columnEnd": 34
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 111,
        "lineEnd": 111,
        "columnStart": 4,
        "columnEnd": 34
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 200,
        "lineEnd": 200,
        "columnStart": 4,
        "columnEnd": 48
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 222,
        "lineEnd": 222,
        "columnStart": 4,
        "columnEnd": 35
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 292,
        "lineEnd": 292,
        "columnStart": 4,
        "columnEnd": 35
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 307,
        "lineEnd": 307,
        "columnStart": 4,
        "columnEnd": 35
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 427,
        "lineEnd": 427,
        "columnStart": 4,
        "columnEnd": 32
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 458,
        "lineEnd": 458,
        "columnStart": 7,
        "columnEnd": 60
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 532,
        "lineEnd": 536,
        "columnStart": 4,
        "columnEnd": 33
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 570,
        "lineEnd": 570,
        "columnStart": 8,
        "columnEnd": 127
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 593,
        "lineEnd": 594,
        "columnStart": 8,
        "columnEnd": 104
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 630,
        "lineEnd": 630,
        "columnStart": 4,
        "columnEnd": 30
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 658,
        "lineEnd": 658,
        "columnStart": 4,
        "columnEnd": 70
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 696,
        "lineEnd": 696,
        "columnStart": 5,
        "columnEnd": 68
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 708,
        "lineEnd": 709,
        "columnStart": 4,
        "columnEnd": 1
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 719,
        "lineEnd": 719,
        "columnStart": 7,
        "columnEnd": 41
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 734,
        "lineEnd": 734,
        "columnStart": 4,
        "columnEnd": 40
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 748,
        "lineEnd": 751,
        "columnStart": 5,
        "columnEnd": 40
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 532,
        "lineEnd": 536,
        "columnStart": 4,
        "columnEnd": 33
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 658,
        "lineEnd": 658,
        "columnStart": 4,
        "columnEnd": 70
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 708,
        "lineEnd": 709,
        "columnStart": 4,
        "columnEnd": 1
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 86,
        "lineEnd": 86,
        "columnStart": 2,
        "columnEnd": 44
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 98,
        "lineEnd": 98,
        "columnStart": 4,
        "columnEnd": 35
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 99,
        "lineEnd": 99,
        "columnStart": 4,
        "columnEnd": 34
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 111,
        "lineEnd": 111,
        "columnStart": 4,
        "columnEnd": 34
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 200,
        "lineEnd": 200,
        "columnStart": 4,
        "columnEnd": 48
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 222,
        "lineEnd": 222,
        "columnStart": 4,
        "columnEnd": 35
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 292,
        "lineEnd": 292,
        "columnStart": 4,
        "columnEnd": 35
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 307,
        "lineEnd": 307,
        "columnStart": 4,
        "columnEnd": 35
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 427,
        "lineEnd": 427,
        "columnStart": 4,
        "columnEnd": 32
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 458,
        "lineEnd": 458,
        "columnStart": 7,
        "columnEnd": 60
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 532,
        "lineEnd": 536,
        "columnStart": 4,
        "columnEnd": 33
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 570,
        "lineEnd": 570,
        "columnStart": 8,
        "columnEnd": 127
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 593,
        "lineEnd": 594,
        "columnStart": 8,
        "columnEnd": 104
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 630,
        "lineEnd": 630,
        "columnStart": 4,
        "columnEnd": 30
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 658,
        "lineEnd": 658,
        "columnStart": 4,
        "columnEnd": 70
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 696,
        "lineEnd": 696,
        "columnStart": 5,
        "columnEnd": 68
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 708,
        "lineEnd": 709,
        "columnStart": 4,
        "columnEnd": 1
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 719,
        "lineEnd": 719,
        "columnStart": 7,
        "columnEnd": 41
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 734,
        "lineEnd": 734,
        "columnStart": 4,
        "columnEnd": 40
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 748,
        "lineEnd": 751,
        "columnStart": 5,
        "columnEnd": 40
      }
    }
  ],
  "repairedSmells": [
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 539,
        "lineEnd": 543,
        "columnStart": 4,
        "columnEnd": 33
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 662,
        "lineEnd": 662,
        "columnStart": 4,
        "columnEnd": 94
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 711,
        "lineEnd": 712,
        "columnStart": 4,
        "columnEnd": 1
      }
    }
  ],
  "repairedDockerfile": "#\n#--------------------------------------------------------------------------\n# Image Setup\n#--------------------------------------------------------------------------\n#\n# To edit the 'workspace' base Image, visit its repository on Github\n#    https://github.com/Laradock/workspace\n#\n# To change its version, see the available Tags on the Docker Hub:\n#    https://hub.docker.com/r/laradock/workspace/tags/\n#\n# Note: Base Image name format {image-tag}-{php-version}\n#\n\nFROM laradock/workspace:2.0-71\n\nMAINTAINER Mahmoud Zalt <mahmoud@zalt.me>\n\n# Remove Faillog and Lastlog to reduce the size of the final image.\nRUN rm /var/log/lastlog /var/log/faillog\n\n#\n#--------------------------------------------------------------------------\n# Mandatory Software's Installation\n#--------------------------------------------------------------------------\n#\n# Mandatory Software's such as (\"php7.1-cli\", \"git\", \"vim\", ....) are\n# installed on the base image 'laradock/workspace' image. If you want\n# to add more Software's or remove existing one, you need to edit the\n# base image (https://github.com/Laradock/workspace).\n#\n\n#\n#--------------------------------------------------------------------------\n# Optional Software's Installation\n#--------------------------------------------------------------------------\n#\n# Optional Software's will only be installed if you set them to `true`\n# in the `docker-compose.yml` before the build.\n# Example:\n#   - INSTALL_NODE=false\n#   - ...\n#\n\nARG CHANGE_SOURCE=true\nENV CHANGE_SOURCE ${CHANGE_SOURCE}\nRUN if [ ${CHANGE_SOURCE} = true ]; then \\\n    echo \"Change Source\" \\\n;fi\n\nRUN echo ${CHANGE_SOURCE}\n\n#####################################\n# Non-Root User:\n#####################################\n\n# Add a non-root user to prevent files being created with root permissions on host machine.\nARG PUID=1000\nARG PGID=1000\n\nENV PUID ${PUID}\nENV PGID ${PGID}\n\nRUN groupadd -g ${PGID} laradock && \\\n    useradd -u ${PUID} -g laradock -m laradock\n\n#ARG CHANGE_SOURCE=false\n#ENV CHANGE_SOURCE ${CHANGE_SOURCE}\nRUN if [ ${CHANGE_SOURCE} = true ]; then \\\n    sed -i 's/archive.ubuntu.com/mirrors.aliyun.com/g' /etc/apt/sources.list \\\n;fi\n\nRUN cat /etc/apt/sources.list\n\n#####################################\n# SOAP:\n#####################################\nUSER root\n\nARG INSTALL_SOAP=false\nENV INSTALL_SOAP ${INSTALL_SOAP}\n\nRUN if [ ${INSTALL_SOAP} = true ]; then \\\n  add-apt-repository -y ppa:ondrej/php && \\\n  apt-get update -yqq && \\\n  apt-get -y --no-install-recommends install libxml2-dev php7.1-soap \\\n; rm -rf /var/lib/apt/lists/*; fi\n\n#####################################\n# LDAP:\n#####################################\n\nARG INSTALL_LDAP=false\nENV INSTALL_LDAP ${INSTALL_LDAP}\n\nRUN if [ ${INSTALL_LDAP} = true ]; then \\\n    apt-get update -yqq && \\\n    apt-get install --no-install-recommends -y libldap2-dev && \\\n    apt-get install --no-install-recommends -y php7.1-ldap \\\n; rm -rf /var/lib/apt/lists/*; fi\n\n#####################################\n# IMAP:\n#####################################\n\nARG INSTALL_IMAP=false\nENV INSTALL_IMAP ${INSTALL_IMAP}\n\nRUN if [ ${INSTALL_IMAP} = true ]; then \\\n    apt-get update -yqq && \\\n    apt-get install --no-install-recommends -y php7.1-imap \\\n; rm -rf /var/lib/apt/lists/*; fi\n\n#####################################\n# Set Timezone\n#####################################\n\nARG TZ=UTC\nENV TZ ${TZ}\nRUN ln -snf /usr/share/zoneinfo/$TZ /etc/localtime && echo $TZ > /etc/timezone\n\n#####################################\n# Composer:\n#####################################\n\n# Add the composer.json\nCOPY ./composer.json /home/laradock/.composer/composer.json\nCOPY ./config.json /home/laradock/.composer/config.json\n\n# Make sure that ~/.composer belongs to laradock\nRUN chown -R laradock:laradock /home/laradock/.composer\nUSER laradock\n\n# If you're in China, or you need to change sources, will be set CHANGE_SOURCE to true in .env.\n\n#ARG CHANGE_SOURCE=false\n#ENV CHANGE_SOURCE ${CHANGE_SOURCE}\nRUN if [ ${CHANGE_SOURCE} = true ]; then \\\n    composer config -g repo.packagist composer https://packagist.phpcomposer.com && \\\n    composer config -g process-timeout 2000 \\\n;fi\n\n# Check if global install need to be ran\nARG COMPOSER_GLOBAL_INSTALL=false\nENV COMPOSER_GLOBAL_INSTALL ${COMPOSER_GLOBAL_INSTALL}\nRUN if [ ${COMPOSER_GLOBAL_INSTALL} = true ]; then \\\n    # run the install\n    composer global install -vvv \\\n;fi\n\n#####################################\n# Crontab\n#####################################\nUSER root\n\nCOPY ./crontab /etc/cron.d\nRUN chmod -R 644 /etc/cron.d\n\nCOPY ./composer.json /root/.composer/composer.json\nCOPY ./config.json /root/.composer/config.json\n\n# If you're in China, or you need to change sources, will be set CHANGE_SOURCE to true in .env.\n\n#ARG CHANGE_SOURCE=false\n#ENV CHANGE_SOURCE ${CHANGE_SOURCE}\nRUN if [ ${CHANGE_SOURCE} = true ]; then \\\n    composer config -g repo.packagist composer https://packagist.phpcomposer.com && \\\n    composer config -g process-timeout 2000 \\\n;fi\n\n#####################################\n# User Aliases\n#####################################\n\nUSER laradock\nCOPY ./aliases.sh /home/laradock/aliases.sh\nRUN echo \"\" >> ~/.bashrc && \\\n    echo \"# Load Custom Aliases\" >> ~/.bashrc && \\\n    echo \"source /home/laradock/aliases.sh\" >> ~/.bashrc && \\\n\techo \"\" >> ~/.bashrc && \\\n\tsed -i 's/\\r//' /home/laradock/aliases.sh && \\\n\tsed -i 's/^#! \\/bin\\/sh/#! \\/bin\\/bash/' /home/laradock/aliases.sh\n\nUSER root\nRUN echo \"\" >> ~/.bashrc && \\\n    echo \"# Load Custom Aliases\" >> ~/.bashrc && \\\n    echo \"source /home/laradock/aliases.sh\" >> ~/.bashrc && \\\n\techo \"\" >> ~/.bashrc && \\\n\tsed -i 's/\\r//' /home/laradock/aliases.sh && \\\n\tsed -i 's/^#! \\/bin\\/sh/#! \\/bin\\/bash/' /home/laradock/aliases.sh\n\n#####################################\n# xDebug:\n#####################################\n\nARG INSTALL_XDEBUG=false\nRUN if [ ${INSTALL_XDEBUG} = true ]; then \\\n    apt-get update && \\\n    apt-get install --no-install-recommends -y --force-yes php7.1-xdebug && \\\n    sed -i 's/^;//g' /etc/php/7.1/cli/conf.d/20-xdebug.ini && \\\n    echo \"alias phpunit='php -dzend_extension=xdebug.so /var/www/vendor/bin/phpunit'\" >> ~/.bashrc \\\n; rm -rf /var/lib/apt/lists/*; fi\n# ADD for REMOTE debugging\nCOPY ./xdebug.ini /etc/php/7.1/cli/conf.d/xdebug.ini\n\n#####################################\n# Blackfire:\n#####################################\n\nARG INSTALL_BLACKFIRE=false\nARG BLACKFIRE_CLIENT_ID\nARG BLACKFIRE_CLIENT_TOKEN\n\nENV BLACKFIRE_CLIENT_ID ${BLACKFIRE_CLIENT_ID}\nENV BLACKFIRE_CLIENT_TOKEN ${BLACKFIRE_CLIENT_TOKEN}\n\nRUN if [ ${INSTALL_XDEBUG} = false -a ${INSTALL_BLACKFIRE} = true ]; then \\\n    curl -f -L https://packagecloud.io/gpg.key | apt-key add - && \\\n    echo \"deb http://packages.blackfire.io/debian any main\" | tee /etc/apt/sources.list.d/blackfire.list && \\\n    apt-get update -yqq && \\\n    apt-get install -y --no-install-recommends blackfire-agent \\\n; rm -rf /var/lib/apt/lists/*; fi\n\n#####################################\n# ssh:\n#####################################\nARG INSTALL_WORKSPACE_SSH=false\nENV INSTALL_WORKSPACE_SSH ${INSTALL_WORKSPACE_SSH}\n\nADD insecure_id_rsa /tmp/id_rsa\nADD insecure_id_rsa.pub /tmp/id_rsa.pub\n\nRUN if [ ${INSTALL_WORKSPACE_SSH} = true ]; then \\\n    rm -f /etc/service/sshd/down && \\\n    cat /tmp/id_rsa.pub >> /root/.ssh/authorized_keys \\\n        && cat /tmp/id_rsa.pub >> /root/.ssh/id_rsa.pub \\\n        && cat /tmp/id_rsa >> /root/.ssh/id_rsa \\\n        && rm -f /tmp/id_rsa* \\\n        && chmod 644 /root/.ssh/authorized_keys /root/.ssh/id_rsa.pub \\\n    && chmod 400 /root/.ssh/id_rsa \\\n;fi\n\n#####################################\n# MongoDB:\n#####################################\n\n# Check if Mongo needs to be installed\nARG INSTALL_MONGO=false\nENV INSTALL_MONGO ${INSTALL_MONGO}\nRUN if [ ${INSTALL_MONGO} = true ]; then \\\n    # Install the mongodb extension\n    pecl -q install mongodb && \\\n    echo \"extension=mongodb.so\" >> /etc/php/7.1/mods-available/mongodb.ini && \\\n    ln -s /etc/php/7.1/mods-available/mongodb.ini /etc/php/7.1/cli/conf.d/30-mongodb.ini \\\n;fi\n\n#####################################\n# PHP REDIS EXTENSION FOR PHP 7.1\n#####################################\n\nARG INSTALL_PHPREDIS=false\nENV INSTALL_PHPREDIS ${INSTALL_PHPREDIS}\nRUN if [ ${INSTALL_PHPREDIS} = true ]; then \\\n    # Install Php Redis extension\n    printf \"\\n\" | pecl -q install -o -f redis && \\\n    echo \"extension=redis.so\" >> /etc/php/7.1/mods-available/redis.ini && \\\n    phpenmod redis \\\n;fi\n\n#####################################\n# Swoole EXTENSION FOR PHP 7\n#####################################\n\nARG INSTALL_SWOOLE=false\nRUN if [ ${INSTALL_SWOOLE} = true ]; then \\\n    # Install Php Swoole Extension\n    pecl -q install swoole && \\\n    echo \"extension=swoole.so\" >> /etc/php/7.1/mods-available/swoole.ini && \\\n    ln -s /etc/php/7.1/mods-available/swoole.ini /etc/php/7.1/cli/conf.d/20-swoole.ini \\\n;fi\n\n#####################################\n# Drush:\n#####################################\nUSER root\nENV DRUSH_VERSION 8.1.2\nARG INSTALL_DRUSH=false\nENV INSTALL_DRUSH ${INSTALL_DRUSH}\nRUN if [ ${INSTALL_DRUSH} = true ]; then \\\n    apt-get update -yqq && \\\n    apt-get -y --no-install-recommends install mysql-client && \\\n    # Install Drush 8 with the phar file.\n    curl -fsSL -o /usr/local/bin/drush https://github.com/drush-ops/drush/releases/download/$DRUSH_VERSION/drush.phar | bash && \\\n    chmod +x /usr/local/bin/drush && \\\n    drush core-status \\\n; rm -rf /var/lib/apt/lists/*; fi\n\n#####################################\n# Drupal Console:\n#####################################\nUSER root\nARG INSTALL_DRUPAL_CONSOLE=false\nENV INSTALL_DRUPAL_CONSOLE ${INSTALL_DRUPAL_CONSOLE}\nRUN if [ ${INSTALL_DRUPAL_CONSOLE} = true ]; then \\\n    apt-get update -yqq && \\\n    apt-get -y --no-install-recommends install mysql-client && \\\n    curl -f https://drupalconsole.com/installer -L -o drupal.phar && \\\n    mv drupal.phar /usr/local/bin/drupal && \\\n    chmod +x /usr/local/bin/drupal \\\n; rm -rf /var/lib/apt/lists/*; fi\n\nUSER laradock\n\n#####################################\n# Node / NVM:\n#####################################\n\n# Check if NVM needs to be installed\nARG NODE_VERSION=stable\nENV NODE_VERSION ${NODE_VERSION}\nARG INSTALL_NODE=false\nENV INSTALL_NODE ${INSTALL_NODE}\nENV NVM_DIR /home/laradock/.nvm\n#ARG CHANGE_SOURCE=false\n#ENV CHANGE_SOURCE ${CHANGE_SOURCE}\nRUN if [ ${INSTALL_NODE} = true && ${CHANGE_SOURCE} = true ]; then \\\n    echo \"\" >> ~/.bashrc && \\\n    echo 'export NVM_NODEJS_ORG_MIRROR=https://npm.taobao.org/mirrors/node' >> ~/.bashrc && \\\n    echo 'registry=https://registry.npm.taobao.org' >> ~/.npmrc && \\\n    echo 'registry \"https://registry.npm.taobao.org\"' >> ~/.yarnrc && \\\n    NVM_NODEJS_ORG_MIRROR=https://npm.taobao.org/mirrors/node \\\n;fi\n\nRUN if [ ${INSTALL_NODE} = true ]; then \\\n    if [ ${CHANGE_SOURCE} = true ]; then \\\n        curl -f -o- https://raw.githubusercontent.com/creationix/nvm/v0.33.1/install.sh | bash && \\\n            . $NVM_DIR/nvm.sh && \\\n            NVM_NODEJS_ORG_MIRROR=https://npm.taobao.org/mirrors/node nvm install ${NODE_VERSION} && \\\n            nvm use ${NODE_VERSION} && \\\n            nvm alias ${NODE_VERSION} && \\\n            npm --registry https://registry.npm.taobao.org install -g gulp bower vue-cli && \\\n            npm config set registry https://registry.npm.taobao.org \\\n    ; npm cache clean --force; else \\\n\n        curl -f -o- https://raw.githubusercontent.com/creationix/nvm/v0.33.1/install.sh | bash && \\\n            . $NVM_DIR/nvm.sh && \\\n            nvm install ${NODE_VERSION} && \\\n            nvm use ${NODE_VERSION} && \\\n            nvm alias ${NODE_VERSION} && \\\n            npm install -g gulp bower vue-cli \\\n    ; npm cache clean --force; fi \\\n; else \\\n\n        curl -f -o- https://raw.githubusercontent.com/creationix/nvm/v0.33.1/install.sh | bash && \\\n            . $NVM_DIR/nvm.sh && \\\n            nvm install ${NODE_VERSION} && \\\n            nvm use ${NODE_VERSION} && \\\n            nvm alias ${NODE_VERSION} && \\\n            npm install -g gulp bower vue-cli \\\n    ; npm cache clean --force; fi \\\nfi\n\nRUN if [ ${INSTALL_NODE} = true && ${CHANGE_SOURCE} = true ]; then \\\n    npm --registry https://registry.npm.taobao.org install -g cnpm cyarn nrm && \\\n    npm config set registry https://registry.npm.taobao.org \\\n; npm cache clean --force; fi\n\n# Wouldn't execute when added to the RUN statement in the above block\n# Source NVM when loading bash since ~/.profile isn't loaded on non-login shell\nRUN if [ ${INSTALL_NODE} = true ]; then \\\n    echo \"\" >> ~/.bashrc && \\\n    echo 'export NVM_DIR=\"$HOME/.nvm\"' >> ~/.bashrc && \\\n    echo '[ -s \"$NVM_DIR/nvm.sh\" ] && . \"$NVM_DIR/nvm.sh\"  # This loads nvm' >> ~/.bashrc \\\n;fi\n\n# Add NVM binaries to root's .bashrc\nUSER root\n\nRUN if [ ${INSTALL_NODE} = true ]; then \\\n    echo \"\" >> ~/.bashrc && \\\n    echo 'export NVM_DIR=\"/home/laradock/.nvm\"' >> ~/.bashrc && \\\n    echo '[ -s \"$NVM_DIR/nvm.sh\" ] && . \"$NVM_DIR/nvm.sh\"  # This loads nvm' >> ~/.bashrc \\\n;fi\n\n# Add PATH for node\nENV PATH $PATH:$NVM_DIR/versions/node/v${NODE_VERSION}/bin\n\n\n#####################################\n# YARN:\n#####################################\n\nUSER laradock\n\nARG INSTALL_YARN=false\nENV INSTALL_YARN ${INSTALL_YARN}\nARG YARN_VERSION=latest\nENV YARN_VERSION ${YARN_VERSION}\n\nRUN if [ ${INSTALL_YARN} = true ]; then \\\n    [ -s \"$NVM_DIR/nvm.sh\" ] && . \"$NVM_DIR/nvm.sh\" && \\\n    if [ ${YARN_VERSION} = \"latest\" ]; then \\\n        curl -f -o- -L https://yarnpkg.com/install.sh | bash; \\\n    else \\\n        curl -f -o- -L https://yarnpkg.com/install.sh | bash -s -- --version ${YARN_VERSION}; \\\n    fi && \\\n    echo \"\" >> ~/.bashrc && \\\n    echo 'export PATH=\"$HOME/.yarn/bin:$PATH\"' >> ~/.bashrc \\\n; else \\\n        curl -f -o- -L https://yarnpkg.com/install.sh | bash -s -- --version ${YARN_VERSION}; \\\n    fi \\\n\n\nfi\n\n# Add YARN binaries to root's .bashrc\nUSER root\n\nRUN if [ ${INSTALL_YARN} = true ]; then \\\n    echo \"\" >> ~/.bashrc && \\\n    echo 'export YARN_DIR=\"/home/laradock/.yarn\"' >> ~/.bashrc && \\\n    echo 'export PATH=\"$YARN_DIR/bin:$PATH\"' >> ~/.bashrc \\\n;fi\n\n#####################################\n# PHP Aerospike:\n#####################################\nUSER root\n\nARG INSTALL_AEROSPIKE=false\nENV INSTALL_AEROSPIKE ${INSTALL_AEROSPIKE}\n\n# Copy aerospike configration for remote debugging\nCOPY ./aerospike.ini /etc/php/7.1/cli/conf.d/aerospike.ini\n\nRUN if [ ${INSTALL_AEROSPIKE} = true ]; then \\\n    apt-get update -yqq && \\\n    apt-get -y --no-install-recommends install sudo wget && \\\n\n    # Install the php aerospike extension\n    curl -f -L -o /tmp/aerospike-client-php.tar.gz \"https://github.com/aerospike/aerospike-client-php/archive/master.tar.gz\" \\\n    && mkdir -p aerospike-client-php \\\n    && tar -C aerospike-client-php -zxvf /tmp/aerospike-client-php.tar.gz --strip 1 \\\n    && ( \\\n        cd aerospike-client-php/src \\\n        && phpize \\\n        && ./build.sh \\\n        && make install \\\n    ) \\\n    && rm /tmp/aerospike-client-php.tar.gz \\\n; rm -rf /var/lib/apt/lists/*; fi\n\nRUN if [ ${INSTALL_AEROSPIKE} = false ]; then \\\n    rm /etc/php/7.1/cli/conf.d/aerospike.ini \\\n;fi\n\n#####################################\n# PHP V8JS:\n#####################################\nUSER root\n\nARG INSTALL_V8JS=false\nENV INSTALL_V8JS ${INSTALL_V8JS}\n\nRUN if [ ${INSTALL_V8JS} = true ]; then \\\n    add-apt-repository -y ppa:pinepain/libv8-5.4 \\\n    && apt-get update -yqq \\\n    && apt-get install --no-install-recommends -y php-xml php-dev php-pear libv8-5.4 \\\n    && pecl install v8js \\\n    && echo \"extension=v8js.so\" >> /etc/php/7.1/cli/php.ini \\\n; rm -rf /var/lib/apt/lists/*; fi\n\n#####################################\n# Non-root user : PHPUnit path\n#####################################\n\n# add ./vendor/bin to non-root user's bashrc (needed for phpunit)\nUSER laradock\n\nRUN echo \"\" >> ~/.bashrc && \\\n    echo 'export PATH=\"/var/www/vendor/bin:$PATH\"' >> ~/.bashrc\n\n#####################################\n# Laravel Envoy:\n#####################################\nUSER laradock\n\nARG INSTALL_LARAVEL_ENVOY=false\nENV INSTALL_LARAVEL_ENVOY ${INSTALL_LARAVEL_ENVOY}\n\nRUN if [ ${INSTALL_LARAVEL_ENVOY} = true ]; then \\\n    # Install the Laravel Envoy\n    composer global require \"laravel/envoy=~1.0\" -vvv \\\n;fi\n\n#####################################\n# Laravel Installer:\n#####################################\nUSER root\n\nARG INSTALL_LARAVEL_INSTALLER=false\nENV INSTALL_LARAVEL_INSTALLER ${INSTALL_LARAVEL_INSTALLER}\n\nRUN if [ ${INSTALL_LARAVEL_INSTALLER} = true ]; then \\\n    # Install the Laravel Installer\n\techo \"\" >> ~/.bashrc && \\\n\techo 'export PATH=\"~/.composer/vendor/bin:$PATH\"' >> ~/.bashrc \\\n\t&& composer global require \"laravel/installer\" -vvv \\\n;fi\n\nUSER laradock\n\n#####################################\n# Deployer:\n#####################################\nUSER laradock\n\nARG INSTALL_DEPLOYER=false\nENV INSTALL_DEPLOYER ${INSTALL_DEPLOYER}\n\nRUN if [ ${INSTALL_DEPLOYER} = true ]; then \\\n    # Install the Deployer\n    composer global require \"deployer/deployer\" -vvv \\\n;fi\n\n#####################################\n# Linuxbrew:\n#####################################\nUSER root\n\nARG INSTALL_LINUXBREW=false\nENV INSTALL_LINUXBREW ${INSTALL_LINUXBREW}\n#ARG CHANGE_SOURCE=false\n#ENV CHANGE_SOURCE ${CHANGE_SOURCE}\nRUN if [ ${CHANGE_SOURCE} = true ]; then \\\n    sed -i 's/archive.ubuntu.com/mirrors.aliyun.com/g' /etc/apt/sources.list \\\n;fi\nRUN if [ ${INSTALL_LINUXBREW} = true ]; then \\\n    apt-get upgrade -y && \\\n    apt-get install --no-install-recommends -y build-essential make cmake scons curl git \\\n      ruby autoconf automake autoconf-archive \\\n      gettext libtool flex bison \\\n      libbz2-dev libcurl4-openssl-dev \\\n      libexpat-dev libncurses-dev && \\\n\n    # Install the Linuxbrew\n    git clone --depth=1 https://github.com/Homebrew/linuxbrew.git ~/.linuxbrew && \\\n\n    echo \"\" >> ~/.bashrc && \\\n    echo 'export PKG_CONFIG_PATH\"=/usr/local/lib/pkgconfig:/usr/local/lib64/pkgconfig:/usr/lib64/pkgconfig:/usr/lib/pkgconfig:/usr/lib/x86_64-linux-gnu/pkgconfig:/usr/lib64/pkgconfig:/usr/share/pkgconfig:$PKG_CONFIG_PATH\"' >> ~/.bashrc && \\\n\n    # Setup linuxbrew\n    echo 'export LINUXBREWHOME=\"$HOME/.linuxbrew\"' >> ~/.bashrc && \\\n    echo 'export PATH=\"$LINUXBREWHOME/bin:$PATH\"' >> ~/.bashrc && \\\n    echo 'export MANPATH=\"$LINUXBREWHOME/man:$MANPATH\"' >> ~/.bashrc && \\\n    echo 'export PKG_CONFIG_PATH=\"$LINUXBREWHOME/lib64/pkgconfig:$LINUXBREWHOME/lib/pkgconfig:$PKG_CONFIG_PATH\"' >> ~/.bashrc && \\\n    echo 'export LD_LIBRARY_PATH=\"$LINUXBREWHOME/lib64:$LINUXBREWHOME/lib:$LD_LIBRARY_PATH\"' >> ~/.bashrc \\\n; rm -rf /var/lib/apt/lists/*; fi\n\n#####################################\n# SQL SERVER:\n#####################################\nARG INSTALL_MSSQL=false\nENV INSTALL_MSSQL ${INSTALL_MSSQL}\n\n#ARG CHANGE_SOURCE=false\n#ENV CHANGE_SOURCE ${CHANGE_SOURCE}\nRUN if [ ${CHANGE_SOURCE} = true ]; then \\\n    sed -i 's/archive.ubuntu.com/mirrors.aliyun.com/g' /etc/apt/sources.list \\\n;fi\n\nRUN if [ ${INSTALL_MSSQL} = true ]; then \\\n        cd / && \\\n        apt-get update -yqq && \\\n        apt-get install --no-install-recommends -y --force-yes wget apt-transport-https curl freetds-common libsybdb5 freetds-bin unixodbc unixodbc-dev && \\\n\n    #####################################\n    #  The following steps were taken from\n    #  Microsoft's github account:\n    #  https://github.com/Microsoft/msphpsql/wiki/Dockerfile-for-getting-pdo_sqlsrv-for-PHP-7.0-on-Debian-in-3-ways\n    #####################################\n\n    # Add PHP 7 repository\n    # for Debian jessie\n    # And System upgrade\n        cd / && \\\n        echo \"deb http://packages.dotdeb.org jessie all\" \\\n        | tee /etc/apt/sources.list.d/dotdeb.list \\\n        && wget -qO- https://www.dotdeb.org/dotdeb.gpg \\\n        | apt-key add - \\\n        && apt-get update -yqq \\\n        && apt-get upgrade -qq && \\\n\n    # Install UnixODBC\n    # Compile odbc_config as it is not part of unixodbc package\n        cd / && \\\n        apt-get update -yqq && \\\n        apt-get install --no-install-recommends -y whiptail \\\n        unixodbc libgss3 odbcinst devscripts debhelper dh-exec dh-autoreconf libreadline-dev libltdl-dev \\\n        && dget -u -x http://http.debian.net/debian/pool/main/u/unixodbc/unixodbc_2.3.1-3.dsc \\\n        && cd unixodbc-*/ \\\n        && ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" && make && make install \\\n        && cp -v ./exe/odbc_config /usr/local/bin/ && \\\n\n    # Fake uname for install.sh\n        printf '#!/bin/bash\\nif [ \"$*\" == \"-p\" ]; then echo \"x86_64\"; else /bin/uname \"$@\"; fi' \\\n        | tee /usr/local/bin/uname \\\n        && chmod +x /usr/local/bin/uname && \\\n\n    # Microsoft ODBC Driver 13 for Linux\n    # Note: There's a copy of this tar on my hubiC\n        cd / && \\\n        wget -nv -O msodbcsql-13.0.0.0.tar.gz \\\n        \"https://meetsstorenew.blob.core.windows.net/contianerhd/Ubuntu%2013.0%20Tar/msodbcsql-13.0.0.0.tar.gz?st=2016-10-18T17%3A29%3A00Z&se=2022-10-19T17%3A29%3A00Z&sp=rl&sv=2015-04-05&sr=b&sig=cDwPfrouVeIQf0vi%2BnKt%2BzX8Z8caIYvRCmicDL5oknY%3D\" \\\n        && tar -xf msodbcsql-13.0.0.0.tar.gz \\\n        && cd msodbcsql-*/ \\\n        && ldd lib64/libmsodbcsql-13.0.so.0.0 \\\n        && ./install.sh install --accept-license \\\n        && ls -l /opt/microsoft/msodbcsql/ \\\n        && odbcinst -q -d -n \"ODBC Driver 13 for SQL Server\" && \\\n\n\n    #####################################\n    # Install sqlsrv y pdo_sqlsrv\n    # extensions:\n    #####################################\n\n    pecl install sqlsrv-4.0.8 && \\\n    pecl install pdo_sqlsrv-4.0.8 && \\\n\n    #####################################\n    # Set locales for the container\n    #####################################\n\n    apt-get install --no-install-recommends -y locales \\\n    && echo \"en_US.UTF-8 UTF-8\" > /etc/locale.gen \\\n    && locale-gen \\\n    && echo \"extension=sqlsrv.so\" > /etc/php/7.1/cli/conf.d/20-sqlsrv.ini \\\n    && echo \"extension=pdo_sqlsrv.so\" > /etc/php/7.1/cli/conf.d/20-pdo_sqlsrv.ini \\\n; rm msodbcsql-13.0.0.0.tar.gz rm -rf /var/lib/apt/lists/*; fi\n\n#####################################\n# Minio:\n#####################################\nUSER root\nARG INSTALL_MC=false\nENV INSTALL_MC ${INSTALL_MC}\n\nCOPY mc/config.json /root/.mc/config.json\n\nRUN if [ ${INSTALL_MC} = true ]; then\\\n    curl -fsSL -o /usr/local/bin/mc https://dl.minio.io/client/mc/release/linux-amd64/mc && \\\n    chmod +x /usr/local/bin/mc \\\n;fi\n\n#####################################\n# Image optimizers:\n#####################################\nUSER root\nARG INSTALL_IMAGE_OPTIMIZERS=false\nENV INSTALL_IMAGE_OPTIMIZERS ${INSTALL_IMAGE_OPTIMIZERS}\nRUN if [ ${INSTALL_IMAGE_OPTIMIZERS} = true ]; then \\\n    apt-get install --no-install-recommends -y --force-yes jpegoptim optipng pngquant gifsicle && \\\n    if [ ${INSTALL_NODE} = true ]; then \\\n        . ~/.bashrc && npm install -g svgo \\\n    ; npm cache clean --force; fi \\\n; rm -rf /var/lib/apt/lists/*; fi\n\nUSER laradock\n\n#####################################\n# Symfony:\n#####################################\nUSER root\nARG INSTALL_SYMFONY=false\nENV INSTALL_SYMFONY ${INSTALL_SYMFONY}\nRUN if [ ${INSTALL_SYMFONY} = true ]; then \\\n  mkdir -p /usr/local/bin \\\n  && curl -f -LsS https://symfony.com/installer -o /usr/local/bin/symfony \\\n  && chmod a+x /usr/local/bin/symfony \\\n\n  #  Symfony 3 alias\n  && echo 'alias dev=\"php bin/console -e=dev\"' >> ~/.bashrc \\\n  && echo 'alias prod=\"php bin/console -e=prod\"' >> ~/.bashrc \\\n\n\n\n\n\n; fi\n\n#####################################\n# PYTHON:\n#####################################\n\nARG INSTALL_PYTHON=false\nENV INSTALL_PYTHON ${INSTALL_PYTHON}\nRUN if [ ${INSTALL_PYTHON} = true ]; then \\\n  apt-get update \\\n  && apt-get -y --no-install-recommends install python python-pip python-dev build-essential \\\n  && pip install --no-cache-dir --upgrade pip \\\n  && pip install --no-cache-dir --upgrade virtualenv \\\n; rm -rf /var/lib/apt/lists/*; fi\n\n#####################################\n# ImageMagick:\n#####################################\nUSER root\nARG INSTALL_IMAGEMAGICK=false\nENV INSTALL_IMAGEMAGICK ${INSTALL_IMAGEMAGICK}\nRUN if [ ${INSTALL_IMAGEMAGICK} = true ]; then \\\n    apt-get install --no-install-recommends -y --force-yes imagemagick php-imagick \\\n; rm -rf /var/lib/apt/lists/*; fi\n\n#####################################\n# Terraform:\n#####################################\nUSER root\nARG INSTALL_TERRAFORM=false\nENV INSTALL_TERRAFORM ${INSTALL_TERRAFORM}\nRUN if [ ${INSTALL_TERRAFORM} = true ]; then \\\n    apt-get update -yqq \\\n    && apt-get -y --no-install-recommends install sudo wget unzip \\\n    && wget https://releases.hashicorp.com/terraform/0.10.6/terraform_0.10.6_linux_amd64.zip \\\n    && unzip terraform_0.10.6_linux_amd64.zip \\\n    && mv terraform /usr/local/bin \\\n    && rm terraform_0.10.6_linux_amd64.zip \\\n; rm -rf /var/lib/apt/lists/*; fi\n#####################################\n# pgsql client\n#####################################\nUSER root\nARG INSTALL_PG_CLIENT=false\nENV INSTALL_PG_CLIENT ${INSTALL_PG_CLIENT}\nRUN if [ ${INSTALL_PG_CLIENT} = true ]; then \\\n    apt-get update -yqq && \\\n    apt-get -y --no-install-recommends install postgresql-client \\\n; rm -rf /var/lib/apt/lists/*; fi\n\n#####################################\n# Dusk Dependencies:\n#####################################\nUSER root\nARG CHROME_DRIVER_VERSION=stable\nENV CHROME_DRIVER_VERSION ${CHROME_DRIVER_VERSION}\nARG INSTALL_DUSK_DEPS=false\nENV INSTALL_DUSK_DEPS ${INSTALL_DUSK_DEPS}\nRUN if [ ${INSTALL_DUSK_DEPS} = true ]; then \\\n  add-apt-repository ppa:ondrej/php \\\n  && apt-get update \\\n  && apt-get -y --no-install-recommends install zip wget unzip xdg-utils \\\n    libxpm4 libxrender1 libgtk2.0-0 libnss3 libgconf-2-4 xvfb \\\n    gtk2-engines-pixbuf xfonts-cyrillic xfonts-100dpi xfonts-75dpi \\\n    xfonts-base xfonts-scalable x11-apps \\\n  && wget https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb \\\n  && dpkg -i --force-depends google-chrome-stable_current_amd64.deb \\\n  && apt-get -y -f install \\\n  && dpkg -i --force-depends google-chrome-stable_current_amd64.deb \\\n  && rm google-chrome-stable_current_amd64.deb \\\n  && wget https://chromedriver.storage.googleapis.com/${CHROME_DRIVER_VERSION}/chromedriver_linux64.zip \\\n  && unzip chromedriver_linux64.zip \\\n  && mv chromedriver /usr/local/bin/ \\\n  && rm chromedriver_linux64.zip \\\n; rm -rf /var/lib/apt/lists/*; fi\n\n#\n#--------------------------------------------------------------------------\n# Final Touch\n#--------------------------------------------------------------------------\n#\n\n# Clean up\nUSER root\nRUN apt-get clean && \\\n    rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*\n\n# Set default work directory\nWORKDIR /var/www\n"
}