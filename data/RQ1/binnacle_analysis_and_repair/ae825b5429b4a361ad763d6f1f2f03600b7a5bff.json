{
  "startTime": 1674248018050,
  "endTime": 1674248018209,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 55,
        "lineEnd": 55,
        "columnStart": 4,
        "columnEnd": 37
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 6,
        "lineEnd": 18,
        "columnStart": 22,
        "columnEnd": 6
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 6,
        "lineEnd": 18,
        "columnStart": 22,
        "columnEnd": 6
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM ruby:2.5-slim\nLABEL maintainer=\"martinc@ucar.edu\"\n\n# Install apt based dependencies required to run Rails as\n# well as RubyGems. As the Ruby image itself is based on a\n# Debian image, we use apt-get to install those.\nRUN apt-get update && apt-get install --no-install-recommends -y \\\n  build-essential \\\n  nodejs \\\n  mysql-client \\\n  default-libmysqlclient-dev \\\n  dos2unix \\\n  nginx \\\n  cron \\\n  git \\\n  apt-utils \\\n  curl \\\n  logrotate \\\n  nano && rm -rf /var/lib/apt/lists/*;\n\n# Configure the main working directory. This is the base\n# directory used in any further RUN, COPY, and ENTRYPOINT\n# commands.\nRUN mkdir -p /chords\nWORKDIR /chords\n\n# Copy the Gemfile as well as the Gemfile.lock and install\n# the RubyGems. This is a separate step so the dependencies\n# will be cached unless changes to one of those two files\n# are made.\nCOPY Gemfile Gemfile.lock ./\n#\n# setting BUNDLE_JOBS to more than 1 will cause bundle install's console\n# output to show up asynchronously, potentially making debugging more difficult\n#\nENV BUNDLE_JOBS 1\nRUN gem install bundler && bundle install --jobs $BUNDLE_JOBS --retry 5\n\n# Copy the main application.\nCOPY . ./\n\n# Bake the assets (for production mode) into the image\nRUN mkdir -p /chords/log && RAILS_ENV=production bundle exec rake assets:precompile\n\n# Customize the nginx configuration and log rotation\nCOPY ./nginx_default.conf /etc/nginx/sites-available/default\nCOPY ./logrotate_nginx /etc/logrotate.d/nginx\nCOPY ./logrotate_nginx_cron /etc/cron.d/nginx\n\n# Create the CHORDS environment value setting script chords_env.sh.\n# Use this bit of magic to invalidate the Dokcker cache to ensure that the command is run.\nADD https://www.random.org/integers/\\?num\\=1\\&min\\=1\\&max\\=1000000000\\&col\\=1\\&base\\=10\\&format\\=plain\\&rnd\\=new cache_invalidator\nRUN /bin/bash -f create_chords_env_script.sh > chords_env.sh && chmod a+x chords_env.sh\n\n# Install Docker on the container itself\nRUN curl -f -sSL https://get.docker.com/ | DEBIAN_FRONTEND=noninteractive sh\n\n# Remove artifacts that are not needed. The docker image will only shrink\n# however if the docker build command is run with the --squash option\nRUN rm -rf .git log/* tmp/*\n\n# Expose port 80 to the Docker host, so we can access it\n# from the outside.\nEXPOSE 80\n\n# Create the log file to be able to run tail\nRUN touch /var/log/cron.log\n\n# Configure an entry point, so we don't need to specify\n# \"bundle exec\" for each of our commands.\nENTRYPOINT [\"bundle\", \"exec\"]\n\n# Start CHORDS\nCMD [\"cron\", \"&&\", \"/bin/bash\", \"-f\", \"chords_start.sh\"]\n"
}