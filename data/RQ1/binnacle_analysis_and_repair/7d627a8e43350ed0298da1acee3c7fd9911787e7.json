{
  "startTime": 1674249138347,
  "endTime": 1674249138514,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 26,
        "lineEnd": 26,
        "columnStart": 4,
        "columnEnd": 120
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 40,
        "lineEnd": 40,
        "columnStart": 4,
        "columnEnd": 130
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 48,
        "lineEnd": 48,
        "columnStart": 4,
        "columnEnd": 138
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# This dockerfile creates a container of a truly basic DIRAC installation which contains only the DIRAC externals.\n# The sole purpose of this container is for developing (and testing) DIRAC \"stuff that run\",\n# meaning DIRAC components like agents and services. Instructions in ...\n\n# THIS IS A WORK IN PROGRESS\n# TODO:\n#   verify about certificates\n#   correct openssl_config URL location\n#   lcgBundle now fix version\n#   start mySQL + install/start ElasticSearch (?) + install/start ActiveMQ (?) or better use docker-compose\n#\n\n\n# CC7 as base (the latest tag doesn't work!)\nFROM cern/cc7-base:20170113\nMAINTAINER Federico Stagni <federico.stagni@cern.ch>\n\n# Create DIRAC dirs\nRUN mkdir -p /opt/dirac/DIRAC && \\\n    mkdir -p /opt/dirac/etc/grid-security/certificates && \\\n    mkdir -p /opt/dirac/user && \\\n    cd /opt/dirac\n\n# Installing DIRAC in /opt/dirac\nRUN \\\n    cd /opt/dirac && \\\n    curl -f -L -o dirac-install https://raw.githubusercontent.com/DIRACGrid/DIRAC/integration/Core/scripts/dirac-install.py && \\\n    chmod +x dirac-install && \\\n    ./dirac-install -r v6r20 -t server -i 27 -g v14r1 && \\\n    rm -rf /opt/dirac/.installCache && \\\n    rm dirac-install\n\n# Copying in ENTRYPOINT script (for running DIRAC scripts directly, e.g. dirac-service)\nCOPY dockerEntrypoint.sh /opt/dirac/dockerEntrypoint.sh\nRUN chmod 755 /opt/dirac/dockerEntrypoint.sh\nENTRYPOINT [ \"/opt/dirac/dockerEntrypoint.sh\" ]\n\n# Create self-signed host certificate from auto-generated CA\nWORKDIR /opt/dirac/etc/grid-security\nRUN source /opt/dirac/bashrc && openssl genrsa -out hostkey.pem 2048\nRUN curl -f -L -o openssl_config https://raw.githubusercontent.com/DIRACGrid/DIRAC/integration/tests/openssl_config_DIRACDockerDevBox && \\\n    source /opt/dirac/bashrc && \\\n    openssl req -new -x509 -key hostkey.pem -out hostcert.pem -days 365 -config openssl_config && \\\n    cp hostcert.pem certificates/ && \\\n    cp hostkey.pem certificates/\n\n# Now generating the user credentials, which would need to be used for connecting to DIRAC components running here\nWORKDIR /opt/dirac/user\nRUN curl -f -L -o openssl_config_usr https://raw.githubusercontent.com/DIRACGrid/DIRAC/integration/tests/openssl_config_DIRACDockerDevBox_usr\nRUN sed -i 's/DIRACDockerDevBox/ciuser/g' openssl_config_usr\nRUN source /opt/dirac/bashrc && \\\n    openssl genrsa -out client.key 1024 && \\\n    openssl req -key client.key -new -out client.req -config openssl_config_usr\n# This is a little hack to make OpenSSL happy...\nRUN echo 00 > file.srl\nRUN source /opt/dirac/bashrc && \\\n    openssl x509 -req -in client.req \\\n    -CA /opt/dirac/etc/grid-security/hostcert.pem \\\n    -CAkey /opt/dirac/etc/grid-security/hostkey.pem \\\n    -CAserial /opt/dirac/user/file.srl \\\n    -out /opt/dirac/user/client.pem\n\n# Copy the script so that when logging interactively the environment is correct\nRUN cp /opt/dirac/bashrc /root/.bashrc\n\n# Just standard working dir\nWORKDIR /opt/dirac/\n"
}