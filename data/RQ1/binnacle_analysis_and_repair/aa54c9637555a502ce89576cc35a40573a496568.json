{
  "startTime": 1674252289034,
  "endTime": 1674252289545,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 79,
        "lineEnd": 79,
        "columnStart": 4,
        "columnEnd": 82
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 84,
        "lineEnd": 84,
        "columnStart": 40,
        "columnEnd": 80
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 114,
        "lineEnd": 114,
        "columnStart": 4,
        "columnEnd": 53
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 122,
        "lineEnd": 122,
        "columnStart": 4,
        "columnEnd": 53
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 169,
        "lineEnd": 169,
        "columnStart": 4,
        "columnEnd": 15
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM alpine\nMAINTAINER HyperApp <hyperappcloud@gmail.com>\n\n#### Build ARGS ####\n\nARG SS_VER=3.2.3\nARG SS_OBFS_VER=0.0.5\nARG OC_VERSION=0.11.11\n# V2Ray is always installed from latest official build\n\n#### VOLUME\nENV TLS_PORT=\nENV DASHBOARD_PORT=\nENV DASHBOARD_PASS hyperapp\nENV CERTS_ROOT /srv/certs\nENV CA_ROOT /srv/ca\n\nRUN mkdir -p /srv/certs && \\\n    mkdir -p /var/log/love && \\\n    mkdir -p /etc/love/ && \\\n    mkdir -p /opt/ && \\\n    mkdir -p $CA_ROOT\n\n# certs dir\nVOLUME /srv/certs/\nVOLUME $CA_ROOT\n# log dir\nVOLUME /var/log/love\n# config dir\nVOLUME /etc/love\n\n\n#### CONFIGURATION ####\n\n# Global\nENV LOVE_USERNAME hyperapp\nENV LOVE_PASSWORD hyperapp\n\nENV LISTEN_ADDRESS 127.0.0.1\nENV SS_TLS_PORT 21025\nENV SSR_TLS_PORT 21027\nENV V2RAY_TLS_PORT 21029\nENV V2RAY_WS_PORT 21030\nENV HTTP2_PORT 21031\nENV HTTP_PROXY_PORT 21032\nENV OCSERV_PORT 21033\nENV OC_LAN_NETWORK 10.10.10.0\n\n# Shadowsocks\nENV ENABLE_SS true\nENV SS_METHOD rc4-md5\nENV SS_TLS_DOMAINS bing.com\n\n# ShadowsocksR\nENV ENABLE_SSR true\nENV SSR_METHOD none\nENV SSR_PROTOCOL auth_chain_b\nENV SSR_TLS_DOMAIN cloudflare.com\n\n# V2ray\nENV ENABLE_V2RAY true\nENV V2RAY_INSECURE true\nENV V2RAY_TLS_DOMAIN=\nENV V2RAY_WS_DOMAIN=\n\n# nghttpx\nENV ENABLE_HTTP2 true\nENV HTTP2_DOMAIN=\n\n# OCSERV\nENV ENABLE_OCSERV true\nENV OCSERV_INSECURE false\nENV OCSERV_DOMAIN=\n\n\nADD etc /etc/love/templates\n\n######## INSTALLATION #########\nRUN apk add --no-cache curl bash && \\\n    curl -f -sSO https://raw.githubusercontent.com/tests-always-included/mo/master/mo && \\\n    mv mo /usr/local/bin && \\\n    chmod +x /usr/local/bin/mo\n\n#### Install supervisord ####\nRUN apk add --no-cache python py-pip && pip install --no-cache-dir supervisor supervisor-stdout\n\n\n\n#### Install Shadowsocks ####\nRUN set -ex && \\\n    apk add --no-cache udns && \\\n    apk add --no-cache --virtual .build-deps \\\n                                git \\\n                                autoconf \\\n                                automake \\\n                                make \\\n                                build-base \\\n                                curl \\\n                                libev-dev \\\n                                c-ares-dev \\\n                                libtool \\\n                                linux-headers \\\n                                libsodium-dev \\\n                                mbedtls-dev \\\n                                pcre-dev \\\n                                tar \\\n                                udns-dev && \\\n\n    cd /tmp/ && \\\n    git clone https://github.com/shadowsocks/shadowsocks-libev.git && \\\n    cd shadowsocks-libev && \\\n    git checkout v$SS_VER && \\\n    git submodule update --init --recursive && \\\n    ./autogen.sh && \\\n    ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --prefix=/usr --disable-documentation && \\\n    make install && \\\n    cd /tmp/ && \\\n    git clone https://github.com/shadowsocks/simple-obfs.git shadowsocks-obfs && \\\n    cd shadowsocks-obfs && \\\n    git checkout v$SS_OBFS_VER && \\\n    git submodule update --init --recursive && \\\n    ./autogen.sh && \\\n    ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --prefix=/usr --disable-documentation && \\\n    make install && \\\n    cd .. && \\\n\n    runDeps=\"$( \\\n        scanelf --needed --nobanner /usr/bin/ss-* \\\n            | awk '{ gsub(/,/, \"\\nso:\", $2); print \"so:\" $2 }' \\\n            | xargs -r apk info --installed \\\n            | sort -u \\\n    )\" && \\\n    apk add --no-cache --virtual .run-deps $runDeps && \\\n    apk del .build-deps && \\\n    rm -rf /tmp/*\n\n\n#### Install SSR\nADD shadowsocksr-manyuser.zip /tmp\nRUN unzip /tmp/shadowsocksr-manyuser.zip -d /tmp/ \\\n    && mv /tmp/shadowsocksr-manyuser /opt/ \\\n    && rm /tmp/shadowsocksr-manyuser.zip\n\n#### Install V2ray\nCOPY --from=v2ray/official:latest  /usr/bin/v2ray/v2ray /usr/local/bin/\nCOPY --from=v2ray/official:latest  /usr/bin/v2ray/v2ctl /usr/local/bin/\nCOPY --from=v2ray/official:latest  /usr/bin/v2ray/geoip.dat /usr/local/bin/\nCOPY --from=v2ray/official:latest  /usr/bin/v2ray/geosite.dat /usr/local/bin/\n\n#### Install nghttpx\n\nRUN apk add --no-cache nghttp2 openssl ca-certificates apache2-utils\n#CMD nghttpx --http2-proxy -f $FRONTEND -b $BACKEEND $OPTIONS /certs/${DOMAIN}.key /certs/${DOMAIN}.crt\n\n\n#### Install ocserv\nRUN apk add --update --no-cache musl-dev iptables libev openssl gnutls-dev readline-dev libnl3-dev lz4-dev libseccomp-dev gnutls-utils\n\nRUN buildDeps=\"xz gcc autoconf make linux-headers libev-dev  \"; \\\n\tset -x \\\n\t&& apk add --no-cache $buildDeps \\\n\t&& mkdir /src && cd /src \\\n\t&& OC_FILE=\"ocserv-$OC_VERSION\" \\\n\t&& rm -fr download.html \\\n\t&& wget ftp://ftp.infradead.org/pub/ocserv/$OC_FILE.tar.xz \\\n\t&& tar xJf $OC_FILE.tar.xz \\\n\t&& rm -fr $OC_FILE.tar.xz \\\n\t&& cd $OC_FILE \\\n\t&& sed -i '/#define DEFAULT_CONFIG_ENTRIES /{s/96/200/}' src/vpn.h \\\n\t&& ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" \\\n\t&& make -j\"$(nproc)\" \\\n\t&& make install \\\n\t&& mkdir -p /etc/ocserv \\\n\t&& cp ./doc/sample.config /etc/ocserv/ocserv.conf \\\n\t&& cd \\\n\t&& rm -fr ./$OC_FILE \\\n\t&& apk del --purge $buildDeps \\\n        && rm -rf /src\n\n### Install haproxy\nRUN apk add --no-cache haproxy\n\nADD entrypoint.sh /usr/local/bin\nADD gencert.sh /usr/local/bin\nENTRYPOINT [\"entrypoint.sh\"]\n"
}