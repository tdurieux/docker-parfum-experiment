{
  "startTime": 1674248193674,
  "endTime": 1674248193796,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 45,
        "lineEnd": 45,
        "columnStart": 2,
        "columnEnd": 128
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 10,
        "lineEnd": 10,
        "columnStart": 2,
        "columnEnd": 30
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# Keep version in-sync with .travis.yml, .mono_repo.yml and app/lib/shared/versions.dart\nFROM google/dart-runtime-base:2.3.2\n\n# `apt-mark hold dart` ensures that Dart is not upgraded with the other packages\n#   We want to make sure SDK upgrades are explicit.\n\n# After install we remove the apt-index again to keep the docker image diff small.\nRUN apt-mark hold dart &&\\\n  apt-get update && \\\n  apt-get upgrade -y && \\\n  apt-get install --no-install-recommends -y git unzip && \\\n  rm -rf /var/lib/apt/lists/*\n\n# Let the pub server know that this is not a \"typical\" pub client but rather a bot.\nENV PUB_ENVIRONMENT=\"bot.pub_dartlang_org.docker\"\n\nCOPY app /project/app\nCOPY pkg /project/pkg\nCOPY static /project/static\nCOPY third_party /project/third_party\n\nWORKDIR /project/pkg/pub_dartdoc\nRUN pub get --no-precompile\nRUN pub get --offline --no-precompile\n\nWORKDIR /project/pkg/web_app\nRUN pub get --no-precompile\nRUN pub get --offline --no-precompile\nRUN ./build.sh\n\nWORKDIR /project/pkg/web_css\nRUN pub get --no-precompile\nRUN pub get --offline --no-precompile\nRUN ./build.sh\n\nWORKDIR /project/app\nRUN pub get --no-precompile\nRUN pub get --offline --no-precompile\n\n## NOTE: Uncomment the following lines for local testing:\n#ADD key.json /project/key.json\n#ENV GCLOUD_KEY /project/key.json\n#ENV GCLOUD_PROJECT dartlang-pub\n\nRUN cd / && \\\n  curl -f -sS https://storage.googleapis.com/dart-archive/channels/stable/raw/2.3.2/sdk/dartsdk-linux-x64-release.zip >/dartsdk.zip && \\\n  unzip -q /dartsdk.zip && \\\n  rm -f /dartsdk.zip\n\n# Clear out any arguments the base images might have set and ensure we start\n# memcached and wait for it to come up before running the Dart app.\nCMD []\nENTRYPOINT /bin/bash /dart_runtime/dart_run.sh\n"
}