{
  "startTime": 1674250073915,
  "endTime": 1674250074043,
  "originalSmells": [
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 23,
        "lineEnd": 23,
        "columnStart": 4,
        "columnEnd": 34
      }
    },
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 24,
        "lineEnd": 24,
        "columnStart": 4,
        "columnEnd": 35
      }
    },
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 25,
        "lineEnd": 25,
        "columnStart": 4,
        "columnEnd": 37
      }
    },
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 37,
        "lineEnd": 37,
        "columnStart": 4,
        "columnEnd": 23
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 7,
        "lineEnd": 13,
        "columnStart": 26,
        "columnEnd": 11
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM node:10.12\n\n# Install prerequisites\n# https://docs.docker.com/engine/articles/dockerfile_best-practices/#apt-get\n# Base image should also have these already installed: gcc, git, make, python\n# - `build-essential` and `make` are required by some Node modules\n# - `unzip` & `wget` are required by API docs generator\nRUN apt-get -qq update && apt-get -q --no-install-recommends install -y \\\n    build-essential \\\n    unzip \\\n    wget \\\n    graphicsmagick \\\n    imagemagick \\\n    openssl \\\n && apt-get clean \\\n && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*\n\n# Install Dump-init\n# https://github.com/Yelp/dumb-init\nRUN wget https://github.com/Yelp/dumb-init/releases/download/v1.0.0/dumb-init_1.0.0_amd64.deb\nRUN dpkg -i dumb-init_*.deb\n\n# Install global node modules\nRUN npm install -g -y gulp --quiet && npm cache clean --force;\nRUN npm install -g -y faker --quiet && npm cache clean --force;\nRUN npm install -g -y migrate --quiet && npm cache clean --force;\n\n# Create working directory\nRUN mkdir -p /trustroots\nWORKDIR /trustroots\n\n# Copies the local package.json file to the container\n# and utilities docker container cache to not needing to rebuild\n# and install node_modules/ every time we build the docker, but only\n# when the local package.json file changes.\n# Install npm packages\nCOPY package.json /trustroots/\nRUN npm install --quiet && npm cache clean --force;\n\n# Set environment variables\nENV NODE_ENV development\nENV DB_1_PORT_27017_TCP_ADDR mongodb\nENV PORT 3000\n\n# Share local directory on the docker container\n# ...therefore the previous docker \"layer\" thats been cached will be used if possible\nCOPY . /trustroots\n\n# Expose ports\n# - Nginx proxy     80\n# - Nodemon server  3000\n# - Node debug      5858\n# - LiveReload      35729\n# - MongoDB         27017\nEXPOSE 80\nEXPOSE 3000\nEXPOSE 5858\nEXPOSE 35729\nEXPOSE 27017\nCMD [\"dumb-init\", \"npm\", \"start:docker\"]\n"
}