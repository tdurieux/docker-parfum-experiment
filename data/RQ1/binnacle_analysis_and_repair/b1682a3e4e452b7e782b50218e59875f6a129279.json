{
  "startTime": 1674238819421,
  "endTime": 1674238819581,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 57,
        "lineEnd": 57,
        "columnStart": 4,
        "columnEnd": 42
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 42,
        "lineEnd": 52,
        "columnStart": 4,
        "columnEnd": 16
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "ARG CUDA_VERSION=9.2\nARG CUDA_SHORT_VERSION=${CUDA_VERSION}\nARG LINUX_VERSION=ubuntu16.04\nFROM nvidia/cuda:${CUDA_VERSION}-devel-${LINUX_VERSION}\n\n# Define arguments\nARG CUDA_SHORT_VERSION\nARG CC_VERSION=5\nARG CXX_VERSION=5\nARG PYTHON_VERSION=3.6\nARG CFFI_VERSION=1.11.5\nARG CYTHON_VERSION=0.29\nARG CMAKE_VERSION=3.12\nARG NUMBA_VERSION=0.41\nARG NUMPY_VERSION=1.16.2\nARG PANDAS_VERSION=0.23.4\nARG PYARROW_VERSION=0.12.1\nARG ARROW_CPP_VERSION=0.12.1\nARG SKLEARN_VERSION=0.20.3\nARG SCIPY_VERSION=1.2.1\nARG LIBGCC_NG_VERSION=7.3.0\nARG LIBGFORTRAIN_NG_VERSION=7.3.0\nARG LIBSTDCXX_NG_VERSION=7.3.0\nARG TINI_VERSION=v0.18.0\nARG HASH_JOIN=ON\nARG MINICONDA_URL=\"https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh\"\n\n# Set environment\nENV LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/usr/local/cuda/lib64:/usr/local/lib\n## Needed for pygdf.concat(), avoids \"OSError: library nvvm not found\"\nENV NUMBAPRO_NVVM=/usr/local/cuda/nvvm/lib64/libnvvm.so\nENV NUMBAPRO_LIBDEVICE=/usr/local/cuda/nvvm/libdevice/\nENV CC=/usr/bin/gcc-${CC_VERSION}\nENV CXX=/usr/bin/g++-${CXX_VERSION}\nENV CUDAHOSTCXX=/usr/bin/g++-${CXX_VERSION}\nENV PATH=${PATH}:/conda/bin\nENV DEBIAN_FRONTEND=noninteractive\n\n# Update and add pkgs\nRUN apt-get update -y --fix-missing && \\\n    apt-get upgrade -y && \\\n    apt-get -qq install apt-utils -y --no-install-recommends && \\\n    apt-get install --no-install-recommends -y \\\n      curl \\\n      git \\\n      screen \\\n      gcc-${CC_VERSION} \\\n      g++-${CXX_VERSION} \\\n      libboost-all-dev \\\n      tzdata \\\n      wget \\\n      vim \\\n      zlib1g-dev \\\n    && rm -rf /var/lib/apt/lists/*\n\n# Install conda\n## Build combined libgdf/pygdf conda env\nRUN curl -f ${MINICONDA_URL} -o /miniconda.sh && \\\n    sh /miniconda.sh -b -p /conda && \\\n    rm -f /miniconda.sh && \\\n    conda update -y -n base -c conda-forge conda\n\n# Add a condarc to remove blacklist\nADD .condarc-cuda${CUDA_SHORT_VERSION} /conda/.condarc\n\nRUN conda create --no-default-packages -n gdf \\\n      python=${PYTHON_VERSION} \\\n      anaconda-client \\\n      arrow-cpp=${ARROW_CPP_VERSION} \\\n      cmake=${CMAKE_VERSION} \\\n      cmake_setuptools \\\n      conda-build \\\n      conda-verify \\\n      cffi=${CFFI_VERSION} \\\n      cmake=${CMAKE_VERSION} \\\n      cython=${CYTHON_VERSION} \\\n      flake8 \\\n      make \\\n      numba>=${NUMBA_VERSION} \\\n      numpy=${NUMPY_VERSION} \\\n      pandas=${PANDAS_VERSION} \\\n      pyarrow=${PYARROW_VERSION} \\\n      pytest \\\n      pytest-cov \\\n      scikit-learn=${SKLEARN_VERSION} \\\n      scipy=${SCIPY_VERSION} \\\n      conda-forge::blas=1.1=openblas \\\n      libgcc-ng=${LIBGCC_NG_VERSION} \\\n      libgfortran-ng=${LIBGFORTRAIN_NG_VERSION} \\\n      libstdcxx-ng=${LIBSTDCXX_NG_VERSION} \\\n    && conda clean -a && \\\n    chmod 777 -R /conda\n\n## Enables \"source activate conda\"\nSHELL [\"/bin/bash\", \"-c\"]\n\nADD https://github.com/krallin/tini/releases/download/${TINI_VERSION}/tini /usr/bin/tini\nRUN chmod +x /usr/bin/tini\n\nENTRYPOINT [ \"/usr/bin/tini\", \"--\" ]\nCMD [ \"/bin/bash\" ]\n"
}