{
  "startTime": 1674243997252,
  "endTime": 1674243997594,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 49,
        "lineEnd": 50,
        "columnStart": 4,
        "columnEnd": 218
      }
    },
    {
      "rule": "curlUseHttpsUrl",
      "position": {
        "lineStart": 49,
        "lineEnd": 50,
        "columnStart": 4,
        "columnEnd": 218
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 74,
        "lineEnd": 74,
        "columnStart": 4,
        "columnEnd": 41
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 75,
        "lineEnd": 75,
        "columnStart": 4,
        "columnEnd": 25
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM alpine:3.6\nMAINTAINER Sofia Karvounari <karvoun@di.uoa.gr>\n\n# Here we install GNU libc (aka glibc) and set C.UTF-8 locale as default.\nRUN ALPINE_GLIBC_BASE_URL=\"https://github.com/sgerrand/alpine-pkg-glibc/releases/download\" && \\\n    ALPINE_GLIBC_PACKAGE_VERSION=\"2.23-r2\" && \\\n    ALPINE_GLIBC_BASE_PACKAGE_FILENAME=\"glibc-$ALPINE_GLIBC_PACKAGE_VERSION.apk\" && \\\n    ALPINE_GLIBC_BIN_PACKAGE_FILENAME=\"glibc-bin-$ALPINE_GLIBC_PACKAGE_VERSION.apk\" && \\\n    ALPINE_GLIBC_I18N_PACKAGE_FILENAME=\"glibc-i18n-$ALPINE_GLIBC_PACKAGE_VERSION.apk\" && \\\n    apk add --no-cache --virtual=build-dependencies wget ca-certificates && \\\n    wget \\\n        \"$ALPINE_GLIBC_BASE_URL/$ALPINE_GLIBC_PACKAGE_VERSION/$ALPINE_GLIBC_BASE_PACKAGE_FILENAME\" \\\n        \"$ALPINE_GLIBC_BASE_URL/$ALPINE_GLIBC_PACKAGE_VERSION/$ALPINE_GLIBC_BIN_PACKAGE_FILENAME\" \\\n        \"$ALPINE_GLIBC_BASE_URL/$ALPINE_GLIBC_PACKAGE_VERSION/$ALPINE_GLIBC_I18N_PACKAGE_FILENAME\" && \\\n    apk add --allow-untrusted --no-cache \\\n        \"$ALPINE_GLIBC_BASE_PACKAGE_FILENAME\" \\\n        \"$ALPINE_GLIBC_BIN_PACKAGE_FILENAME\" \\\n        \"$ALPINE_GLIBC_I18N_PACKAGE_FILENAME\" && \\\n    /usr/glibc-compat/bin/localedef --force --inputfile POSIX --charmap UTF-8 C.UTF-8 || true && \\\n    echo \"export LANG=C.UTF-8\" > /etc/profile.d/locale.sh && \\\n    apk del glibc-i18n && \\\n    apk del build-dependencies && \\\n    rm \\\n        \"$ALPINE_GLIBC_BASE_PACKAGE_FILENAME\" \\\n        \"$ALPINE_GLIBC_BIN_PACKAGE_FILENAME\" \\\n        \"$ALPINE_GLIBC_I18N_PACKAGE_FILENAME\"\n\nENV LANG=C.UTF-8\n\n########################################################\n# Install Java (Shamelessly copy pasted from develar/java,\n# https://github.com/develar/docker-java/blob/master/Dockerfile)\n#\n# LSC: Updated for new URLs schemes on the Oracle website.\nENV JAVA_VERSION_MAJOR=8 \\\n    JAVA_VERSION_MINOR=141 \\\n    JAVA_VERSION_BUILD=15 \\\n    JAVA_VERSION_HASH=336fa29ff2bb4ef291e347e091f7f4a7 \\\n    JAVA_PACKAGE=server-jre \\\n    JAVA_HOME=/jre \\\n    PATH=${PATH}:/jre/bin \\\n    LANG=C.UTF-8\n\n# about nsswitch.conf - see https://registry.hub.docker.com/u/frolvlad/alpine-oraclejdk8/dockerfile/\n    #/usr/glibc/usr/bin/ldconfig /lib /usr/glibc/usr/lib && \\\n\nRUN apk add --update curl ca-certificates && \\\n        cd /tmp && \\\n    echo 'hosts: files mdns4_minimal [NOTFOUND=return] dns mdns4' >> /etc/nsswitch.conf && \\\n    curl -f -jksSLH \"Cookie: oraclelicense=accept-securebackup-cookie\" \\\n        \"https://download.oracle.com/otn-pub/java/jdk/${JAVA_VERSION_MAJOR}u${JAVA_VERSION_MINOR}-b${JAVA_VERSION_BUILD}/${JAVA_VERSION_HASH}/${JAVA_PACKAGE}-${JAVA_VERSION_MAJOR}u${JAVA_VERSION_MINOR}-linux-x64.tar.gz\" \\\n        | gunzip -c - | tar -xf - && \\\n    apk del curl ca-certificates && \\\n    mv jdk1.${JAVA_VERSION_MAJOR}.0_${JAVA_VERSION_MINOR}/jre /jre && \\\n    rm /jre/bin/jjs && \\\n    rm /jre/bin/keytool && \\\n    rm /jre/bin/orbd && \\\n    rm /jre/bin/pack200 && \\\n    rm /jre/bin/policytool && \\\n    rm /jre/bin/rmid && \\\n    rm /jre/bin/rmiregistry && \\\n    rm /jre/bin/servertool && \\\n    rm /jre/bin/tnameserv && \\\n    rm /jre/bin/unpack200 && \\\n    rm /jre/lib/ext/nashorn.jar && \\\n    rm /jre/lib/jfr.jar && \\\n    rm -rf /jre/lib/jfr && \\\n    rm -rf /jre/lib/oblique-fonts && \\\n    rm -rf /tmp/* /var/cache/apk/*\n\n# Some extra python libraries for the mip-algorithms, which needs to be\n# compiled by hand\nADD files/requirements.txt /root/requirements.txt\nRUN apk add --update py-psycopg2 py-pip ca-certificates gcc musl-dev python-dev lapack-dev g++ gfortran && \\\n    pip install --no-cache-dir -r /root/requirements.txt && \\\n    pip install --no-cache-dir liac-arff && \\\n    apk del py-pip ca-certificates gcc musl-dev python-dev lapack-dev gfortran && \\\n    rm -rf /tmp/* /var/cache/apk/*\n\n# Runtime dependencies for Exareme\nRUN apk add --update rsync curl bash jq python py-requests lapack --no-cache procps && \\\n    rm -rf /tmp/* /var/cache/apk/*\n\n\n# Add Exareme\nADD src/exareme/exareme-distribution/target/exareme /root/exareme\n\n# Add the algorithms\nADD src/mip-algorithms /root/mip-algorithms\n\n# Exareme configuration, ssh keys and so on\n# This has to be done after copying in the algorithms and exareme, as some\n# files are placed in folders created by those two steps.\nADD files/java.sh /etc/profile.d/java.sh\nRUN chmod 755 /etc/profile.d/java.sh\nADD files/root /root\nRUN chmod -R 755 /root/exareme/\n\nEXPOSE 9090\nEXPOSE 22\n\nENV USER=root\nWORKDIR /root/exareme\n\nCMD [\"/bin/bash\",\"bootstrap.sh\"]\n# While debugging\n#ENTRYPOINT /bin/sh\n"
}