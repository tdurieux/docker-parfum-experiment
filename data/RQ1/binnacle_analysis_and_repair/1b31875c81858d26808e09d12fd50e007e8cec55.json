{
  "startTime": 1674248537478,
  "endTime": 1674248537760,
  "originalSmells": [
    {
      "rule": "wgetUseHttpsUrl",
      "position": {
        "lineStart": 109,
        "lineEnd": 109,
        "columnStart": 4,
        "columnEnd": 76
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 61,
        "lineEnd": 61,
        "columnStart": 4,
        "columnEnd": 130
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 62,
        "lineEnd": 62,
        "columnStart": 4,
        "columnEnd": 131
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 68,
        "lineEnd": 68,
        "columnStart": 4,
        "columnEnd": 50
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 18,
        "lineEnd": 57,
        "columnStart": 4,
        "columnEnd": 38
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM nvidia/cuda:9.0-devel-ubuntu16.04\n\n# TensorFlow version is tightly coupled to CUDA and cuDNN so it should be selected carefully\nENV TENSORFLOW_VERSION=1.12.0\nENV PYTORCH_VERSION=1.0.0\nENV CUDNN_VERSION=7.4.1.5-1+cuda9.0\nENV NCCL_VERSION=2.4.2-1+cuda9.0\nENV MXNET_URL=https://s3-us-west-2.amazonaws.com/mxnet-python-packages-gcc5/mxnet_cu90_gcc5-1.4.0-py2.py3-none-manylinux1_x86_64.whl\n\n#  Set MOFED directory, image and working directory\nENV MOFED_DIR MLNX_OFED_LINUX-4.2-1.0.0.0-ubuntu16.04-x86_64\nENV MOFED_SITE_PLACE MLNX_OFED-4.2-1.0.0.0\nENV MOFED_IMAGE MLNX_OFED_LINUX-4.2-1.0.0.0-ubuntu16.04-x86_64.tgz\n\nWORKDIR /root\n\nRUN apt-get update && apt-get install -y --allow-downgrades --allow-change-held-packages --no-install-recommends \\\n        build-essential \\\n        cmake \\\n        git \\\n        curl \\\n        vim \\\n        wget \\\n\tnet-tools \\\n        ethtool \\\n        perl \\\n        vim \\\n        lsb-release \\\n        iproute2 \\\n        pciutils \\\n        libnl-route-3-200 \\\n        kmod \\\n        libnuma1 \\\n        lsof \\\n        iputils-ping \\\n        traceroute \\\n        ca-certificates \\\n        openssh-client \\ \n        openssh-server \\\n        subversion \\\n        libcudnn7=${CUDNN_VERSION} \\\n        libnccl2=${NCCL_VERSION} \\\n        libnccl-dev=${NCCL_VERSION} \\\n        libjpeg-dev \\\n        libpng-dev \\\n        cython \\\t\t\n        python-dev \\\n\tpython3-dev \\\n\tpython-pip \\\n\tpython3-pip \\\n\tpython-tk \\\n\tpython3-tk \\\n        python-libxml2 \\\n        python-setuptools \\\n        python3-setuptools \\\n        linux-headers-4.4.0-92-generic && \\\n        rm -rf /var/lib/apt/lists/*\n\n# Install TensorFlow, Keras, PyTorch and MXNet\nRUN pip install --no-cache-dir 'numpy<1.15.0' tensorflow-gpu==${TENSORFLOW_VERSION} keras h5py torch==${PYTORCH_VERSION} torchvision ${MXNET_URL}\nRUN pip3 install --no-cache-dir 'numpy<1.15.0' tensorflow-gpu==${TENSORFLOW_VERSION} keras h5py torch==${PYTORCH_VERSION} torchvision ${MXNET_URL}\n\n# Install Open MPI\nRUN wget https://www.open-mpi.org/software/ompi/v3.1/downloads/openmpi-3.1.2.tar.gz && \\\n    tar zxf openmpi-3.1.2.tar.gz && \\\n    cd openmpi-3.1.2 && \\\n    ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --enable-orterun-prefix-by-default && \\\n    make -j $(nproc) all && \\\n    make install && \\\n    ldconfig && \\\n    cd /root && \\\n    rm -rf openmpi-3.1.2.tar.gz openmpi-3.1.2\n\n# Install Horovod, temporarily using CUDA stubs\nRUN ldconfig /usr/local/cuda-9.0/targets/x86_64-linux/lib/stubs && \\\n    HOROVOD_GPU_ALLREDUCE=NCCL HOROVOD_WITH_TENSORFLOW=1 HOROVOD_WITH_PYTORCH=1 HOROVOD_WITH_MXNET=1 pip install --no-cache-dir horovod && \\\n    ldconfig\n\n# Create a wrapper for OpenMPI to allow running as root by default\nRUN mv /usr/local/bin/mpirun /usr/local/bin/mpirun.real && \\\n    echo '#!/bin/bash' > /usr/local/bin/mpirun && \\\n    echo 'mpirun.real --allow-run-as-root \"$@\"' >> /usr/local/bin/mpirun && \\\n    chmod a+x /usr/local/bin/mpirun\n\n# Configure OpenMPI to run good defaults:\n#   --bind-to none --map-by slot --mca btl_tcp_if_exclude lo,docker0\nRUN echo \"hwloc_base_binding_policy = none\" >> /usr/local/etc/openmpi-mca-params.conf && \\\n    echo \"rmaps_base_mapping_policy = slot\" >> /usr/local/etc/openmpi-mca-params.conf && \\\n    echo \"btl_tcp_if_exclude = lo,docker0\" >> /usr/local/etc/openmpi-mca-params.conf\n\n# Set default NCCL parameters\nRUN echo NCCL_DEBUG=INFO >> /etc/nccl.conf\n\n# Install OpenSSH for MPI to communicate between containers\nRUN mkdir -p /var/run/sshd\n\n# Allow OpenSSH to talk to containers without asking for confirmation\nRUN cat /etc/ssh/ssh_config | grep -v StrictHostKeyChecking > /etc/ssh/ssh_config.new && \\\n    echo \"    StrictHostKeyChecking no\" >> /etc/ssh/ssh_config.new && \\\n    mv /etc/ssh/ssh_config.new /etc/ssh/ssh_config\n\n# Download examples\nRUN svn checkout https://github.com/horovod/horovod/trunk/examples && \\\n    rm -rf /examples/.svn\n\n# Install MOFED\nRUN cd /root && \\\n    wget https://content.mellanox.com/ofed/${MOFED_SITE_PLACE}/${MOFED_IMAGE} && \\\n    tar -xzvf ${MOFED_IMAGE} && \\\n    ${MOFED_DIR}/mlnxofedinstall --user-space-only --without-fw-update --all -q && \\\n    cd /root && \\\n    rm -rf ${MOFED_DIR} && \\\n    rm -rf *.tgz\n\nWORKDIR /root\n\n"
}