{
  "startTime": 1674252740951,
  "endTime": 1674252742332,
  "originalSmells": [
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 36,
        "lineEnd": 43,
        "columnStart": 29,
        "columnEnd": 18
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 156,
        "lineEnd": 157,
        "columnStart": 29,
        "columnEnd": 16
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM debian:stretch AS stage_build\n\n# ------------------------------ ABOUT THIS IMAGE  -----------------------------\n# This Dockerfile has two major sections:\n# * STAGE BUILD: Which uses required tools to build a static version of Emscripten SDK\n# * STAGE DEPLOY: Which copies folder of Emscripten (/emsd_portable) from previous stage, and installs very based tools to make Emscripten work.\n#\n# Compiled Emscripten SDK meant to be ready to go out of the shelf. That is `/emsdk_portable`:\n# - contains every required part of Emscripten SDK\n# - contains entrypoint that should be used for derived images\n# - is able to work with further changes coming from SDK updates (`emsdk install ...`, etc)\n# - contains some useful symbolic links that makes sure you can use Emscripten SDK in the same way, regardless of version that it holds\n# Created symbolic links:\n# - `/emsdk_portable/emscripten/sdk`: Points to folder that holds Emscripten SDK tools like `emcc`, (example: `/emsdk_portable/emscripten/tag-1.38.31`)\n# - `/emsdk_portable/binaryen/bin`: (example: `/emsdk_portable/tag-1.38.31_64bit_binaryen/bin`)\n# - `/emsdk_portable/llvm/clang`: Emscripten version of Clang (example: `/emsdk_portable/clang/tag-1.38.31/build_tag-1.38.31_64`)\n# - `/emsdk_portable/node/current`: Embedded version of NodeJS (example: `/emsdk_portable/node/8.9.1_64bit`)\n\n# ------------------------------------------------------------------------------\n# -------------------------------- STAGE BUILD  --------------------------------\n# ------------------------------------------------------------------------------\n\nARG EMSCRIPTEN_SDK=sdk-tag-1.37.16-64bit\nARG EMSDK_CHANGESET=master\n\n# ------------------------------------------------------------------------------\n# Following variables are important to tell Emscripten to use pre-defined locations\n# for loading config file and place cache files. Otherwise SDK will use own folders under `/root/` folder\nENV EMSDK /emsdk_portable\nENV EM_DATA ${EMSDK}/.data\nENV EM_CONFIG ${EMSDK}/.emscripten\nENV EM_CACHE ${EM_DATA}/cache\nENV EM_PORTS ${EM_DATA}/ports\n# ------------------------------------------------------------------------------\n\nRUN echo \"## Update and install packages\" \\\n&&  apt-get -qq -y update && apt-get -qq install -y --no-install-recommends \\\n        wget \\\n        git-core \\\n        ca-certificates \\\n        build-essential \\\n        file \\\n        python \\\n        python-pip \\\n&& echo \"## Done\" && rm -rf /var/lib/apt/lists/*;\n\n\nRUN  echo \"## Installing CMake\" \\\n    &&  wget https://cmake.org/files/v3.6/cmake-3.6.3-Linux-x86_64.sh -q \\\n    &&  mkdir /opt/cmake \\\n    &&  printf \"y\\nn\\n\" | sh cmake-3.6.3-Linux-x86_64.sh --prefix=/opt/cmake > /dev/null \\\n    &&  ln -s /opt/cmake/bin/cmake /usr/local/bin/cmake \\\n&&  echo \"## Done\"\n\nRUN  echo \"## Get EMSDK\" \\\n    &&  git clone https://github.com/juj/emsdk.git ${EMSDK} && cd ${EMSDK} && git reset --hard ${EMSDK_CHANGESET} \\\n        \\\n    # Update emscripten-tags.txt file manually with request version, this will tell emsdk that wanted version to compile is available\n    &&  echo ${EMSCRIPTEN_SDK} | sed  's/.\\+-\\([0-9]\\+\\.[0-9]\\+\\.[0-9]\\+\\).\\+/\\1/g' > emscripten-tags.txt \\\n&&  echo \"## Done\"\n\nRUN echo \"## Compile Emscripten\" \\\n    &&  cd ${EMSDK} \\\n        \\\n    &&  ./emsdk install node-8.9.1-64bit > /dev/null \\\n    # Compile llvm with dynamic libs support\n    # This will create local shared objects that are used on all LLVM tool.\n    # It significantly reduces final size of image.\n    &&  LLVM_CMAKE_ARGS=-DLLVM_LINK_LLVM_DYLIB=ON,-DLLVM_LINK_LLVM_DYLIB=ON \\\n        ./emsdk install --build=MinSizeRel ${EMSCRIPTEN_SDK} \\\n        \\\n&&  echo \"## Done\"\n\n# This generates configuration that contains all valid paths according to installed SDK\nRUN cd ${EMSDK} \\\n    &&  echo \"## Generate standard configuration\" \\\n        \\\n    &&  ./emsdk activate ${EMSCRIPTEN_SDK} --embedded \\\n    &&  ./emsdk construct_env > /dev/null \\\n        \\\n    # remove wrongly created entry with EM_CACHE, variable will be picked up from ENV\n    &&  sed -i -e \"/EM_CACHE/d\" ${EMSDK}/emsdk_set_env.sh \\\n        \\\n&&  echo \"## Done\"\n\n# Create a structure and make mutable folders accessible for r/w\nRUN cd ${EMSDK} \\\n    &&  echo \"## Create .data structure\" \\\n    &&  for mutable_dir in ${EM_DATA} ${EM_PORTS} ${EM_CACHE} ${EMSDK}/zips ${EMSDK}/tmp; do \\\n            mkdir -p ${mutable_dir}; \\\n            chmod -R 777 ${mutable_dir}; \\\n        done \\\n        \\\n&&  echo \"## Done\"\n\n# Step uses some bashizm\nSHELL [\"/bin/bash\", \"-c\"]\nRUN cd ${EMSDK} \\\n    &&  echo \"## Clean-up Emscripten Installation\" \\\n    # Allow to use ** for recursive wildcard - bash only!\n    &&  shopt -s globstar \\\n        \\\n    # Issue #34: emcc.txt file is essential for error free execution of emcc\n    &&  _file=`echo ./emscripten/*/site/build/text/docs/tools_reference/emcc.txt` \\\n    &&  _content=`cat ${_file}` \\\n    &&  rm -fr \\\n            ./emscripten/*/docs \\\n            ./emscripten/*/media \\\n            ./emscripten/*/site \\\n    &&  mkdir -p `dirname ${_file}` \\\n    &&  echo ${_content} >> ${_file} \\\n        \\\n    # emscripten-version.txt is crucial to make emcc work\n    &&  _file=`echo clang/*/src/emscripten-version.txt` \\\n    &&  _content=`cat ${_file}` \\\n    &&  rm -fr clang/*/src \\\n    &&  mkdir -p `dirname ${_file}` \\\n    &&  echo ${_content} >> ${_file} \\\n    \\\n    # will clean both: bin and src folder\n    &&  rm -fr binaryen/*/src \\\n    &&  rm -fr binaryen/**/test \\\n    &&  rm -fr binaryen/**/*.cmake \\\n    &&  rm -fr binaryen/**/Makefile \\\n    \\\n    &&  rm -fr clang/*/*/docs \\\n    &&  rm -fr clang/*/*/tools \\\n    &&  rm -fr clang/*/*/projects \\\n    &&  rm -fr clang/*/*/cmake \\\n    &&  rm -fr clang/**/*.cmake \\\n    &&  rm -fr clang/**/Makefile \\\n        \\\n    &&  find . -name \"*.pyc\" -exec rm {} \\; \\\n    &&  find . -name \"CMakeFiles\" -type d -prune -exec rm -fr {} \\; \\\n    &&  find . -name \"CMakeCache.txt\" -exec rm {} \\; \\\n        \\\n    &&  find . -name \"*.o\" -exec rm {} \\; \\\n    &&  find . -name \"*.a\" -exec rm {} \\; \\\n    &&  find . -name \"*.inc*\" -exec rm {} \\; \\\n    &&  find . -name \"*.gen.tmp\" -exec rm {} \\; \\\n        \\\n    # remove empty folders\n    &&  find clang -type d -depth -empty -exec rmdir \"{}\" \\; \\\n    &&  find binaryen -type d -depth -empty -exec rmdir \"{}\" \\; \\\n        \\\n    &&  rm -fr **/*_32bit \\\n    &&  rm -rf **/.git \\\n    &&  rm -rf **/tests \\\n    &&  rm -fr zips/* \\\n        \\\n    &&  rm -fr /opt/cmake /usr/local/bin/cmake /cmake* \\\n        \\\n    # sleep will make sure that created cache will be stored correctly\n    &&  sleep 2 \\\n&&  echo \"## Done\"\n\nRUN apt-get -qq -y update && apt-get -qq install -y --no-install-recommends \\\n        binutils \\\n    && . ${EMSDK}/emsdk_set_env.sh \\\n    # Remove debugging symbols from embedded node (extra 7MB)\n    && strip -s `which node` \\\n    # && strip -s `which asm2wasm` \\ # extra just 1 MB, not worth to do it in favor of better bugtracking\n    # strip out symbols from clang (extra 50MB!)\n    && find $(dirname $(which clang-6.0)) -type f -exec strip -s {} + || true \\\n&& echo \"## Done\" && rm -rf /var/lib/apt/lists/*;\n\n# ------------------------------------------------------------------------------\n\nRUN echo \"## Create transferable entrypoint\" \\\n    &&  printf '#!/bin/sh\\n'                                            >  ${EMSDK}/entrypoint \\\n    # In case when mapped user id by `docker run -u` is not created inside docker image\n    # The `$HOME` variable points to `/` - which prevents any tool to write to, as it requires root access\n    # In such case we set `$HOME` to `/tmp` as it should r/w for everyone\n    &&  printf 'if [ \"$HOME\" = \"/\" ] ; then\\n'                          >> ${EMSDK}/entrypoint \\\n    &&  printf '    export HOME=/tmp\\n'                                 >> ${EMSDK}/entrypoint \\\n    &&  printf 'fi\\n'                                                   >> ${EMSDK}/entrypoint \\\n    &&  printf '\\n'                                                     >> ${EMSDK}/entrypoint \\\n    # In case of running as root, use `umask` to reduce problem of file permission on host\n    &&  printf 'if [ \"$(id -g)\" = \"0\" ] && [ \"$(id -u)\" = \"0\" ] ;\\n'    >> ${EMSDK}/entrypoint \\\n    &&  printf 'then\\n'                                                 >> ${EMSDK}/entrypoint \\\n    &&  printf '    umask 0000\\n'                                       >> ${EMSDK}/entrypoint \\\n    &&  printf 'fi\\n'                                                   >> ${EMSDK}/entrypoint \\\n    # Export this image specific Environment variables\n    # Those variables are important to use dedicated folder for all cache and predefined config file\n    &&  printf \"export EMSDK=${EMSDK}\\n\"                                >> ${EMSDK}/entrypoint \\\n    &&  printf \"export EM_DATA=${EM_DATA}\\n\"                            >> ${EMSDK}/entrypoint \\\n    &&  printf \"export EM_CONFIG=${EM_CONFIG}\\n\"                        >> ${EMSDK}/entrypoint \\\n    &&  printf \"export EM_CACHE=${EM_CACHE}\\n\"                          >> ${EMSDK}/entrypoint \\\n    &&  printf \"export EM_PORTS=${EM_PORTS}\\n\"                          >> ${EMSDK}/entrypoint \\\n    # Activate Emscripten SDK\n    &&  printf '. ${EMSDK}/emsdk_set_env.sh > /dev/null\\n'              >> ${EMSDK}/entrypoint \\\n    # Evaluate a command that's coming after `docker run` / `docker exec`\n    &&  printf '\"$@\"\\n'                                                 >> ${EMSDK}/entrypoint \\\n    \\\n    &&  chmod +x ${EMSDK}/entrypoint \\\n    \\\n&&  echo \"## Done\"\n\n\n# Populate Emscripten SDK cache with libc++, to improve further compilation times.\nRUN echo \"## Pre-populate cache\" \\\n    &&  . ${EMSDK}/emsdk_set_env.sh \\\n    \\\n    &&  mkdir -p /tmp/emscripten_test \\\n    &&  cd /tmp/emscripten_test \\\n    \\\n        &&  printf '#include <iostream>\\nint main(){std::cout << \"HELLO FROM DOCKER C++\"<<std::endl;return 0;}' > test.cpp \\\n        &&  em++ --std=c++11 test.cpp -o test.js -s WASM=0 &&  node test.js \\\n        &&  em++ --std=c++11 -g4 test.cpp -o test.js -s WASM=0 &&  node test.js \\\n        &&  em++ --std=c++11 test.cpp -o test.js -s WASM=1 &&  node test.js \\\n    \\\n    &&  cd / \\\n    &&  rm -fr /tmp/emscripten_test \\\n    \\\n    # some files were created, and we need to make sure that those can be accessed by non-root people\n    &&  chmod -R 777 ${EM_DATA} \\\n    \\\n    # cleanup\n    &&  find ${EMSDK} -name \"*.pyc\" -exec rm {} \\; \\\n    \\\n    &&  echo \"## Done\"\n\n\n# Create symbolic links for critical Emscripten Tools\n# This is important for letting people using Emscripten in Dockerfiles without activation\n# As each Emscripten release is placed to a different folder (i.e. /emsdk_portable/emscripten/tag-1.38.31)\n# We need to somehow make it fixed. An old solution was to move folders around but it has some drawbacks.\n# Current solution is to create symlinks that matches old solution: which maintains compatibility\n# The ultimate goal is to simplify a way to use Emscripten SDK without a need to activate it.\nRUN echo \"## Create symbolic links\" \\\n    &&  . ${EMSDK}/emsdk_set_env.sh \\\n    \\\n    &&  mkdir -p ${EMSDK}/llvm \\\n    \\\n    &&  ln -s $(dirname $(which node))/..       ${EMSDK}/node/current \\\n    &&  ln -s $(dirname $(which clang))/..      ${EMSDK}/llvm/clang \\\n    &&  ln -s $(dirname $(which emcc))          ${EMSDK}/emscripten/sdk \\\n    &&  ln -s $(dirname $(which asm2wasm))      ${EMSDK}/binaryen/bin \\\n    \\\n    &&  echo \"## Done\"\n\n# ------------------------------------------------------------------------------\n# -------------------------------- STAGE DEPLOY --------------------------------\n# ------------------------------------------------------------------------------\nFROM debian:stretch-slim AS stage_deploy\n\nCOPY --from=stage_build /emsdk_portable /emsdk_portable\n\n# Fallback in case Emscripten isn't activated.\n# This will let use tools offered by this image inside other Docker images (sub-stages) or with custom / no entrypoint\nENV EMSDK /emsdk_portable\nENV EMSCRIPTEN=${EMSDK}/emscripten/sdk\n\nENV EM_DATA ${EMSDK}/.data\nENV EM_CONFIG ${EMSDK}/.emscripten\nENV EM_CACHE ${EM_DATA}/cache\nENV EM_PORTS ${EM_DATA}/ports\n\n# Fallback in case Emscripten isn't activated\n# Expose Major tools to system PATH, so that emcc, node, asm2wasm etc can be used without activation\nENV PATH=\"${EMSDK}:${EMSDK}/emscripten/sdk:${EMSDK}/llvm/clang/bin:${EMSDK}/node/current/bin:${EMSDK}/binaryen/bin:${PATH}\"\n\n# Use entrypoint that's coming from emscripten-slim image. It sets all required system paths and variables\nENTRYPOINT [\"/emsdk_portable/entrypoint\"]\n\n# ------------------------------------------------------------------------------\n\n# Create a 'standard` 1000:1000 user\n# Thanks to that this image can be executed as non-root user and created files will not require root access level on host machine\n# Please note that this solution even if widely spread (even node Dockerimages use that) is far from perfect as user 1000:1000 might not exist on\n# host machine, and in this case running any docker image will cause other random problems (mostly due `$HOME` pointing to `/`)\n# This extra user works nicely with entrypoint provided in `/emsdk_portable/entrypoint` as it detects case explained before.\nRUN echo \"## Create emscripten user (1000:1000)\" \\\n    &&  groupadd --gid 1000 emscripten \\\n    &&  useradd --uid 1000 --gid emscripten --shell /bin/bash --create-home emscripten \\\n    \\\n&&  echo \"## Done\"\n\n\nRUN echo \"## Update and install packages\" \\\n&&  apt-get -qq -y update && apt-get -qq install -y --no-install-recommends \\\n        ca-certificates \\\n        python \\\n        python-pip \\\n    \\\n    # Standard Cleanup on Debian images\n    &&  apt-get -y clean \\\n    &&  apt-get -y autoclean \\\n    &&  apt-get -y autoremove \\\n    &&  rm -rf /var/lib/apt/lists/* \\\n    &&  rm -rf /var/cache/debconf/*-old \\\n    &&  rm -rf /usr/share/doc/* \\\n    &&  rm -rf /usr/share/man/?? \\\n    &&  rm -rf /usr/share/man/??_* \\\n&&  echo \"## Done\"\n\n# Docker's convention is to create entrypoint in /entrypoint path.\n# Let's create this entrypoint for compatibility and to keep tradition, which forward command to the real entrypoint\n# Main intentions is to keep compatibility with previous images\nRUN echo \"## Create standard docker entrypoint\" \\\n    &&  printf '#!/bin/bash\\n'                  >  /entrypoint \\\n    &&  printf \". ${EMSDK}/entrypoint \\\"$@\\\"\\n\"     >> /entrypoint \\\n    \\\n    &&  chmod +x /entrypoint \\\n    \\\n&&  echo \"## Done\"\n\n# Arbitrary folder, nothing special here\nWORKDIR /src\n\n# ------------------------------------------------------------------------------\n# Copy this Dockerimage into image, so that it will be possible to recreate it later\nCOPY Dockerfile /emsdk_portable/dockerfiles/trzeci/emscripten-slim/\n\nLABEL maintainer=\"kontakt@trzeci.eu\" \\\n      org.label-schema.name=\"emscripten-slim\" \\\n      org.label-schema.description=\"This image includes EMSDK, Emscripten and WebAssembly compiler and tools that are very required to compile sources.\" \\\n      org.label-schema.url=\"https://trzeci.eu\" \\\n      org.label-schema.vcs-url=\"https://github.com/trzecieu/emscripten-docker\" \\\n      org.label-schema.docker.dockerfile=\"/docker/trzeci/emscripten-slim/Dockerfile\"\n\n# ------------------------- POST BUILD IN-PLACE TESTING ------------------------\n\nRUN echo \"## Internal Testing of image (activated)\" \\\n    &&  . ${EMSDK}/emsdk_set_env.sh \\\n    &&  set -x \\\n    # binaryen\n    &&  which asm2wasm \\\n    # clang\n    &&  which llvm-ar \\\n    # emscritpen\n    &&  which emsdk \\\n    \\\n    &&  node --version \\\n    &&  npm --version \\\n    &&  python --version \\\n    &&  pip --version \\\n    \\\n    &&  em++ --version \\\n    &&  emcc --version \\\n    \\\n    &&  find ${EMSDK} -name \"*.pyc\" -exec rm {} \\; \\\n    \\\n&&  echo \"## Done\"\n\nRUN echo \"## Internal Testing of image (no activation)\" \\\n    &&  set -x \\\n    # binaryen\n    &&  which asm2wasm \\\n    # clang\n    &&  which llvm-ar \\\n    # emscritpen\n    &&  which emsdk \\\n    \\\n    &&  node --version \\\n    &&  npm --version \\\n    &&  python --version \\\n    &&  pip --version \\\n    \\\n    &&  em++ --version \\\n    &&  emcc --version \\\n    \\\n    &&  find ${EMSDK} -name \"*.pyc\" -exec rm {} \\; \\\n    \\\n&&  echo \"## Done\"\n\n# ------------------------------------------------------------------------------\n"
}