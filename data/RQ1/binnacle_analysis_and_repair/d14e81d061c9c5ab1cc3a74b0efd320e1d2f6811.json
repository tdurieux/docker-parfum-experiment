{
  "startTime": 1674234665499,
  "endTime": 1674234666070,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 31,
        "lineEnd": 31,
        "columnStart": 11,
        "columnEnd": 131
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 43,
        "lineEnd": 43,
        "columnStart": 11,
        "columnEnd": 98
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 56,
        "lineEnd": 56,
        "columnStart": 11,
        "columnEnd": 92
      }
    },
    {
      "rule": "curlUseHttpsUrl",
      "position": {
        "lineStart": 56,
        "lineEnd": 56,
        "columnStart": 11,
        "columnEnd": 92
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 36,
        "lineEnd": 36,
        "columnStart": 14,
        "columnEnd": 91
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 61,
        "lineEnd": 61,
        "columnStart": 14,
        "columnEnd": 122
      }
    },
    {
      "rule": "yumInstallRmVarCacheYum",
      "position": {
        "lineStart": 17,
        "lineEnd": 19,
        "columnStart": 14,
        "columnEnd": 18
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# manylinux2010 wheels\n# https://github.com/pypa/manylinux\n#\nFROM       quay.io/pypa/manylinux2010_x86_64 as build-env\n# FROM       quay.io/pypa/manylinux1_x86_64 as build-env\nENV        DEBIAN_FRONTEND noninteractive\n\n# Python 3.5-3.7 via \"35 36 37\"\nARG        PY_VERSIONS=\"35 36 37\"\n\n# static libs need relocatable symbols for linking to shared python lib\nENV        CFLAGS=\"-fPIC ${CFLAGS}\"\nENV        CXXFLAGS=\"-fPIC ${CXXFLAGS}\"\n\n# install dependencies\n#   CMake, zlib?, HDF5, c-blosc, ADIOS1, ADIOS2?\nRUN yum check-update -y \\\n           && yum -y install \\\n               glibc-static \\\n               tar && rm -rf /var/cache/yum\n#RUN        curl -sOL https://github.com/Kitware/CMake/releases/download/v3.14.5/cmake-3.14.5-Linux-x86_64.tar.gz \\\n#           && file cmake*.tar.gz \\\n#           && tar -xzf cmake*.tar.gz \\\n#           && rm cmake*.tar.gz \\\n#           && mv cmake* /opt/cmake\n#ENV        PATH=/opt/cmake/bin:${PATH}\nRUN        for PY_TARGET in ${PY_VERSIONS}; do \\\n               PY_BIN=/opt/python/cp${PY_TARGET}-cp${PY_TARGET}m/bin/python \\\n               && ${PY_BIN} -m pip install setuptools cmake; \\\n           done;\n\nRUN curl -f -sLo hdf5-1.10.5.tar.gz https://support.hdfgroup.org/ftp/HDF5/releases/hdf5-1.10/hdf5-1.10.5/src/hdf5-1.10.5.tar.gz \\\n           && file hdf5*.tar.gz \\\n           && tar -xzf hdf5*.tar.gz \\\n           && rm hdf5*.tar.gz \\\n           && cd hdf5-* \\\n           && ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --disable-parallel --disable-shared --enable-static --prefix /usr \\\n           && make \\\n           && make install\n\n# avoid picking up a static libpthread in adios (also: those libs lack -fPIC)\nRUN        rm /usr/lib64/libpthread.a /usr/lib64/libm.a /usr/lib64/librt.a\n\nRUN curl -f -sLo c-blosc-1.15.0.tar.gz https://github.com/Blosc/c-blosc/archive/v1.15.0.tar.gz \\\n           && file c-blosc*.tar.gz \\\n           && tar -xzf c-blosc*.tar.gz \\\n           && rm c-blosc*.tar.gz \\\n           && mkdir c-blosc-build \\\n           && cd c-blosc-build \\\n           && PY_TARGET=${PY_VERSIONS:0:2} \\\n           && PY_BIN=/opt/python/cp${PY_TARGET}-cp${PY_TARGET}m/bin/python \\\n           && CMAKE_BIN=\"$(${PY_BIN} -m pip show cmake 2>/dev/null | grep Location | cut -d' ' -f2)/cmake/data/bin/\" \\\n           && PATH=${CMAKE_BIN}:${PATH} cmake -DDEACTIVATE_SNAPPY=ON -DBUILD_SHARED=OFF -DBUILD_TESTS=OFF -DBUILD_BENCHMARKS=OFF -DCMAKE_INSTALL_PREFIX=/usr ../c-blosc-1.15.0 \\\n           && make \\\n           && make install\n\nRUN curl -f -sLo adios-1.13.1.tar.gz https://users.nccs.gov/~pnorbert/adios-1.13.1.tar.gz \\\n           && file adios*.tar.gz \\\n           && tar -xzf adios*.tar.gz \\\n           && rm adios*.tar.gz \\\n           && cd adios-* \\\n           && ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --enable-static --disable-shared --disable-fortran --without-mpi --prefix=/usr --with-blosc=/usr \\\n           && make \\\n           && make install\n\nADD        . /opt/src\n\nRUN        ls /opt/python/\n\nENV        HDF5_USE_STATIC_LIBRARIES=ON \\\n           ADIOS_USE_STATIC_LIBS=ON \\\n           BUILD_SHARED_LIBS=OFF \\\n           BUILD_TESTING=OFF \\\n           BUILD_EXAMPLES=OFF\n\n# build matrix\nRUN        cd /opt/src; \\\n           for PY_TARGET in ${PY_VERSIONS}; do \\\n               PY_BIN=/opt/python/cp${PY_TARGET}-cp${PY_TARGET}m/bin/python \\\n               && CMAKE_BIN=\"$(${PY_BIN} -m pip show cmake 2>/dev/null | grep Location | cut -d' ' -f2)/cmake/data/bin/\" \\\n               && PATH=${CMAKE_BIN}:${PATH} ${PY_BIN} setup.py bdist_wheel \\\n               && ${PY_BIN} setup.py clean --all \\\n               && rm -rf openPMD_api.egg-info/; \\\n           done; \\\n           ls dist/\n\n#RUN        mkdir build \\\n#           && cd build \\\n#           && /opt/cmake/bin/cmake \\\n#               -DPYTHON_EXECUTABLE=$(which /opt/python/cp${PY_TARGET}-cp${PY_TARGET}m/bin/python) \\\n#               -DHDF5_USE_STATIC_LIBRARIES=ON \\\n#               -DBUILD_SHARED_LIBS=OFF \\\n#               -DBUILD_TESTING=OFF \\\n#               -DBUILD_EXAMPLES=OFF \\\n#               /opt/src \\\n#           && make\n\n\n# verify wheel\n# https://github.com/pypa/auditwheel\n#RUN        pip install auditwheel  # already installed\nRUN         for whl in /opt/src/dist/*.whl; do \\\n                auditwheel show ${whl} && \\\n                auditwheel repair --plat manylinux2010_x86_64 ${whl}; \\\n            done \\\n            && du -hs /opt/src/dist/* \\\n            && du -hs /wheelhouse/*\n\n# test in fresh env: Debian:Buster + Python 3.7\nFROM       debian:buster\nENV        DEBIAN_FRONTEND noninteractive\nCOPY --from=build-env /wheelhouse/openPMD_api-*-cp37-cp37m-manylinux2010_x86_64.whl .\nRUN        apt-get update \\\n           && apt-get install -y --no-install-recommends python3 python3-pip \\\n           && rm -rf /var/lib/apt/lists/*\nRUN        python3 --version \\\n           && python3 -m pip install -U pip \\\n           && python3 -m pip install openPMD_api-*-cp37-cp37m-manylinux2010_x86_64.whl\nRUN        find / -name \"openpmd*\"\nRUN        ldd /usr/local/lib/python3.7/dist-packages/openpmd_api.cpython-37m-x86_64-linux-gnu.so\nRUN        python3 -c \"import openpmd_api as api; print(api.__version__); print(api.variants)\"\n#RUN        echo \"* soft core 100000\" >> /etc/security/limits.conf && \\\n#           python3 -c \"import openpmd_api as api;\"; \\\n#           gdb -ex bt -c core\n\n# test in fresh env: Ubuntu:18.04 + Python 3.6\nFROM       ubuntu:18.04\nENV        DEBIAN_FRONTEND noninteractive\nCOPY --from=build-env /wheelhouse/openPMD_api-*-cp36-cp36m-manylinux2010_x86_64.whl .\nRUN        apt-get update \\\n           && apt-get install -y --no-install-recommends python3 python3-pip \\\n           && rm -rf /var/lib/apt/lists/*\nRUN        python3 --version \\\n           && python3 -m pip install -U pip \\\n           && python3 -m pip install openPMD_api-*-cp36-cp36m-manylinux2010_x86_64.whl\nRUN        python3 -c \"import openpmd_api as api; print(api.__version__); print(api.variants)\"\n\n# test in fresh env: Debian:Stretch + Python 3.5\nFROM       debian:stretch\nENV        DEBIAN_FRONTEND noninteractive\nCOPY --from=build-env /wheelhouse/openPMD_api-*-cp35-cp35m-manylinux2010_x86_64.whl .\nRUN        apt-get update \\\n           && apt-get install -y --no-install-recommends python3 python3-pip \\\n           && rm -rf /var/lib/apt/lists/*\nRUN        python3 --version \\\n           && python3 -m pip install -U pip \\\n           && python3 -m pip install openPMD_api-*-cp35-cp35m-manylinux2010_x86_64.whl\nRUN        python3 -c \"import openpmd_api as api; print(api.__version__); print(api.variants)\"\n\n\n# copy binary artifacts (wheels)\nFROM       quay.io/pypa/manylinux2010_x86_64\nMAINTAINER Axel Huebl <a.huebl@hzdr.de>\nCOPY --from=build-env /wheelhouse/openPMD_api-*.whl /opt/wheels/\nRUN        ls /opt/wheels/\nENTRYPOINT if [ -d /dist ]; then cp /opt/wheels/* /dist/; fi\n"
}