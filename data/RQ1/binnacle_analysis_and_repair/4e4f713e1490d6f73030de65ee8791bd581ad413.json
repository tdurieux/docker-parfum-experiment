{
  "startTime": 1674249864190,
  "endTime": 1674249865547,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 35,
        "lineEnd": 35,
        "columnStart": 15,
        "columnEnd": 94
      }
    },
    {
      "rule": "curlUseHttpsUrl",
      "position": {
        "lineStart": 138,
        "lineEnd": 138,
        "columnStart": 4,
        "columnEnd": 121
      }
    },
    {
      "rule": "mkdirUsrSrcThenRemove",
      "position": {
        "lineStart": 232,
        "lineEnd": 232,
        "columnStart": 1,
        "columnEnd": 19
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 153,
        "lineEnd": 153,
        "columnStart": 4,
        "columnEnd": 102
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 157,
        "lineEnd": 157,
        "columnStart": 4,
        "columnEnd": 122
      }
    },
    {
      "rule": "sha256sumEchoOneSpaces",
      "position": {
        "lineStart": 238,
        "lineEnd": 238,
        "columnStart": 2,
        "columnEnd": 50
      }
    },
    {
      "rule": "apkAddUseNoCache",
      "position": {
        "lineStart": 410,
        "lineEnd": 410,
        "columnStart": 1,
        "columnEnd": 55
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM alpine:3.10.0\n\nLABEL image=\"demyx/nginx-php-wordpress\"\nLABEL maintainer=\"Demyx <info@demyx.sh>\"\nLABEL url=\"https://demyx.sh\"\nLABEL github=\"https://github.com/demyxco/demyx\"\nLABEL registry=\"https://hub.docker.com/u/demyx\"\n\nENV TZ=America/Los_Angeles\nENV NGINX_VERSION 1.17.0\nENV NJS_VERSION 0.3.2\nENV PKG_RELEASE 1\nENV NGX_CACHE_PURGE_VERSION 2.3\nENV NGX_CACHE_PURGE_SHA1 69ed46a23435e8dfd5579422c0c3996cf9a44291\nENV HEADERS_MORE_NGINX_MODULE_VERSION 0.33\n\nRUN set -x \\\n# create nginx user/group first, to be consistent throughout docker variants\n    && addgroup -g 101 -S nginx \\\n    && adduser -S -D -H -u 101 -h /var/cache/nginx -s /sbin/nologin -G nginx -g nginx nginx \\\n    && apkArch=\"$(cat /etc/apk/arch)\" \\\n    && nginxPackages=\" \\\n        nginx=${NGINX_VERSION}-r${PKG_RELEASE} \\\n        nginx-module-xslt=${NGINX_VERSION}-r${PKG_RELEASE} \\\n        nginx-module-geoip=${NGINX_VERSION}-r${PKG_RELEASE} \\\n        nginx-module-image-filter=${NGINX_VERSION}-r${PKG_RELEASE} \\\n        nginx-module-njs=${NGINX_VERSION}.${NJS_VERSION}-r${PKG_RELEASE} \\\n    \" \\\n    && case \"$apkArch\" in \\\n        x86_64 \\\n\n            set -x \\\n            && KEY_SHA512=\"e7fa8303923d9b95db37a77ad46c68fd4755ff935d0a534d26eba83de193c76166c68bfe7f65471bf8881004ef4aa6df3e34689c305662750c0172fca5d8552a *stdin\" \\\n            && apk add --no-cache --virtual .cert-deps \\\n                openssl curl ca-certificates \\\n            && curl -f -o /tmp/nginx_signing.rsa.pub https://nginx.org/keys/nginx_signing.rsa.pub \\\n            && if [ \"$(openssl rsa -pubin -in /tmp/nginx_signing.rsa.pub -text -noout | openssl sha512 -r)\" = \"$KEY_SHA512\" ]; then \\\n                 echo \"key verification succeeded!\"; \\\n                 mv /tmp/nginx_signing.rsa.pub /etc/apk/keys/; \\\n               else \\\n                 echo \"key verification failed!\"; \\\n                 exit 1; \\\n               fi \\\n            && printf \"%s%s%s\\n\" \\\n                \"http://nginx.org/packages/mainline/alpine/v3.9\" \\\n                #`egrep -o '^[0-9]+\\.[0-9]+' /etc/alpine-release` \\\n                \"/main\" \\\n            | tee -a /etc/apk/repositories \\\n            && apk del .cert-deps \\\n            ;; \\\n        *) \\\n# we're on an architecture upstream doesn't officially build for\n# let's build binaries from the published packaging sources\n            set -x \\\n            && tempDir=\"$(mktemp -d)\" \\\n            && chown nobody:nobody $tempDir \\\n            && apk add --no-cache --virtual .build-deps \\\n                gcc \\\n                libc-dev \\\n                make \\\n                openssl-dev \\\n                pcre-dev \\\n                zlib-dev \\\n                linux-headers \\\n                libxslt-dev \\\n                gd-dev \\\n                geoip-dev \\\n                perl-dev \\\n                libedit-dev \\\n                mercurial \\\n                bash \\\n                alpine-sdk \\\n                findutils \\\n            && su - nobody -s /bin/sh -c \" \\\n                export HOME=${tempDir} \\\n                && cd ${tempDir} \\\n                && hg clone https://hg.nginx.org/pkg-oss \\\n                && cd pkg-oss \\\n                && hg up ${NGINX_VERSION}-${PKG_RELEASE} \\\n                && cd alpine \\\n                && make all \\\n                && apk index -o ${tempDir}/packages/alpine/${apkArch}/APKINDEX.tar.gz ${tempDir}/packages/alpine/${apkArch}/*.apk \\\n                && abuild-sign -k ${tempDir}/.abuild/abuild-key.rsa ${tempDir}/packages/alpine/${apkArch}/APKINDEX.tar.gz \\\n                \" \\\n            && echo \"${tempDir}/packages/alpine/\" >> /etc/apk/repositories \\\n            && cp ${tempDir}/.abuild/abuild-key.rsa.pub /etc/apk/keys/ \\\n            && apk del .build-deps \\\n            ;; \\\n       esac \\\n    && apk add --no-cache $nginxPackages \\\n# if we have leftovers from building, let's purge them (including extra, unnecessary build deps)\n    && if [ -n \"$tempDir\" ]; then rm -rf \"$tempDir\"; fi \\\n    && if [ -n \"/etc/apk/keys/abuild-key.rsa.pub\" ]; then rm -f /etc/apk/keys/abuild-key.rsa.pub; fi \\\n    && if [ -n \"/etc/apk/keys/nginx_signing.rsa.pub\" ]; then rm -f /etc/apk/keys/nginx_signing.rsa.pub; fi \\\n# remove the last line with the packages repos in the repositories file\n    && sed -i '$ d' /etc/apk/repositories \\\n# Bring in gettext so we can get `envsubst`, then throw\n# the rest away. To do this, we need to install `gettext`\n# then move `envsubst` out of the way so `gettext` can\n# be deleted completely, then move `envsubst` back.\n    && apk add --no-cache --virtual .gettext gettext \\\n    && mv /usr/bin/envsubst /tmp/ \\\n\n    && runDeps=\"$( \\\n        scanelf --needed --nobanner /tmp/envsubst \\\n            | awk '{ gsub(/,/, \"\\nso:\", $2); print \"so:\" $2 }' \\\n            | sort -u \\\n            | xargs -r apk info --installed \\\n            | sort -u \\\n    )\" \\\n    && apk add --no-cache $runDeps \\\n    && apk del .gettext \\\n    && mv /tmp/envsubst /usr/local/bin/ \\\n# Bring in tzdata so users could set the timezones through the environment\n# variables\n    && apk add --no-cache tzdata \\\n# forward request and error logs to docker log collector\n    && ln -sf /dev/stdout /var/log/nginx/access.log \\\n    && ln -sf /dev/stderr /var/log/nginx/error.log\n\n#   \n# BUILD CUSTOM MODULES\n#\nRUN apk add --no-cache --virtual .build-deps \\\n\tgcc \\\n\tlibc-dev \\\n\tmake \\\n\topenssl-dev \\\n\tpcre-dev \\\n\tzlib-dev \\\n\tlinux-headers \\\n\tcurl \\\n\tgnupg1 \\\n\tlibxslt-dev \\\n\tgd-dev \\\n\tgeoip-dev \\\n\t\\\n\t&& mkdir -p /usr/src \\\n\t&& curl -o ngx_cache_purge.tar.gz -fSL \"https://labs.frickle.com/files/ngx_cache_purge-${NGX_CACHE_PURGE_VERSION}.tar.gz\" \\\n\t&& echo \"$NGX_CACHE_PURGE_SHA1 *ngx_cache_purge.tar.gz\" | sha1sum -c - \\\n\t&& tar -xzf ngx_cache_purge.tar.gz -C /usr/src/ \\\n\t&& rm ngx_cache_purge.tar.gz \\\n\t&& curl -o headers-more-nginx-module.tar.gz -fSL \"https://github.com/openresty/headers-more-nginx-module/archive/v${HEADERS_MORE_NGINX_MODULE_VERSION}.tar.gz\" \\\n\t&& tar -xzf headers-more-nginx-module.tar.gz -C /usr/src/ \\\n\t&& rm headers-more-nginx-module.tar.gz \\\n\t&& curl -o nginx.tar.gz -fSL \"https://nginx.org/download/nginx-${NGINX_VERSION}.tar.gz\" \\\n\t&& tar -xzf nginx.tar.gz -C /usr/src/ \\\n\t&& rm nginx.tar.gz \\\n\t&& sed -i \"s/HTTP_MODULES/#HTTP_MODULES/g\" /usr/src/ngx_cache_purge-\"$NGX_CACHE_PURGE_VERSION\"/config \\\n\t&& sed -i \"s/NGX_ADDON_SRCS/#NGX_ADDON_SRCS/g\" /usr/src/ngx_cache_purge-\"$NGX_CACHE_PURGE_VERSION\"/config \\\n\t&& sed -i \"s|ngx_addon_name=ngx_http_cache_purge_module|ngx_addon_name=ngx_http_cache_purge_module; if test -n \\\"\\$ngx_module_link\\\"; then ngx_module_type=HTTP; ngx_module_name=ngx_http_cache_purge_module; ngx_module_srcs=\\\"\\$ngx_addon_dir/ngx_cache_purge_module.c\\\"; . auto/module; else HTTP_MODULES=\\\"\\$HTTP_MODULES ngx_http_cache_purge_module\\\"; NGX_ADDON_SRCS=\\\"\\$NGX_ADDON_SRCS \\$ngx_addon_dir/ngx_cache_purge_module.c\\\"; fi|g\" /usr/src/ngx_cache_purge-${NGX_CACHE_PURGE_VERSION}/config \\\n\t&& sed -i \"s|ngx_addon_name=ngx_http_headers_more_filter_module|ngx_addon_name=ngx_http_headers_more_filter_module; if test -n \\\"\\$ngx_module_link\\\"; then ngx_module_type=HTTP; ngx_module_name=ngx_http_headers_more_filter_module; ngx_module_srcs=\\\"\\$ngx_addon_dir/ngx_http_headers_more_filter_module.c\\\"; . auto/module; else HTTP_MODULES=\\\"\\$HTTP_MODULES ngx_http_headers_more_filter_module\\\"; NGX_ADDON_SRCS=\\\"\\$NGX_ADDON_SRCS \\$ngx_addon_dir/ngx_http_headers_more_filter_module.c\\\"; fi|g\" /usr/src/headers-more-nginx-module-${HEADERS_MORE_NGINX_MODULE_VERSION}/config \\\n\t&& cd /usr/src/nginx-\"$NGINX_VERSION\" \\\n\t&& ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --with-compat --add-dynamic-module=/usr/src/ngx_cache_purge-\"$NGX_CACHE_PURGE_VERSION\" \\\n\t&& make modules \\\n\t&& cp objs/ngx_http_cache_purge_module.so /etc/nginx/modules \\\n\t&& make clean \\\n\t&& ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --with-compat --add-dynamic-module=/usr/src/headers-more-nginx-module-\"$HEADERS_MORE_NGINX_MODULE_VERSION\" \\\n\t&& make modules \\\n\t&& cp objs/ngx_http_headers_more_filter_module.so /etc/nginx/modules \\\n\t&& rm -rf /usr/src/nginx-\"$NGINX_VERSION\" /usr/src/ngx_cache_purge-\"$NGX_CACHE_PURGE_VERSION\" /usr/src/headers-more-nginx-module-\"$HEADERS_MORE_NGINX_MODULE_VERSION\" \\\n\t&& apk del .build-deps\n#   \n# END BUILD CUSTOM MODULES\n#\n\n# dependencies required for running \"phpize\"\n# these get automatically installed and removed by \"docker-php-ext-*\" (unless they're already installed)\nENV PHPIZE_DEPS \\\n\t\tautoconf \\\n\t\tdpkg-dev dpkg \\\n\t\tfile \\\n\t\tg++ \\\n\t\tgcc \\\n\t\tlibc-dev \\\n\t\tmake \\\n\t\tpkgconf \\\n\t\tre2c\n\n# persistent / runtime deps\nRUN apk add --no-cache \\\n\t\tca-certificates \\\n\t\tcurl \\\n\t\ttar \\\n\t\txz \\\n# https://github.com/docker-library/php/issues/494\n\t\topenssl\n\n# ensure www-data user exists\nRUN set -ex \\\n\t&& adduser -u 82 -D -S -G www-data www-data\n# 82 is the standard uid/gid for \"www-data\" in Alpine\n# https://git.alpinelinux.org/aports/tree/main/apache2/apache2.pre-install?h=3.9-stable\n# https://git.alpinelinux.org/aports/tree/main/lighttpd/lighttpd.pre-install?h=3.9-stable\n# https://git.alpinelinux.org/aports/tree/main/nginx/nginx.pre-install?h=3.9-stable\n\nENV PHP_INI_DIR /usr/local/etc/php\nRUN set -eux; \\\n\tmkdir -p \"$PHP_INI_DIR/conf.d\"; \\\n# allow running as an arbitrary user (https://github.com/docker-library/php/issues/743)\n\t[ ! -d /var/www/html ]; \\\n\tmkdir -p /var/www/html; \\\n\tchown www-data:www-data /var/www/html; \\\n\tchmod 777 /var/www/html\n\n##<autogenerated>##\nENV PHP_EXTRA_CONFIGURE_ARGS --enable-fpm --with-fpm-user=www-data --with-fpm-group=www-data --disable-cgi\n##</autogenerated>##\n\n# Apply stack smash protection to functions using local buffers and alloca()\n# Make PHP's main executable position-independent (improves ASLR security mechanism, and has no performance impact on x86_64)\n# Enable optimization (-O2)\n# Enable linker optimization (this sorts the hash buckets to improve cache locality, and is non-default)\n# Adds GNU HASH segments to generated executables (this is used if present, and is much faster than sysv hash; in this configuration, sysv hash is also generated)\n# https://github.com/docker-library/php/issues/272\nENV PHP_CFLAGS=\"-fstack-protector-strong -fpic -fpie -O2\"\nENV PHP_CPPFLAGS=\"$PHP_CFLAGS\"\nENV PHP_LDFLAGS=\"-Wl,-O1 -Wl,--hash-style=both -pie\"\n\nENV GPG_KEYS CBAF69F173A0FEA4B537F470D66C9593118BCCB6 F38252826ACD957EF380D39F2F7956BC5DA04B5D\n\nENV PHP_VERSION 7.3.6\nENV PHP_URL=\"https://www.php.net/get/php-7.3.6.tar.xz/from/this/mirror\" PHP_ASC_URL=\"https://www.php.net/get/php-7.3.6.tar.xz.asc/from/this/mirror\"\nENV PHP_SHA256=\"fefc8967daa30ebc375b2ab2857f97da94ca81921b722ddac86b29e15c54a164\" PHP_MD5=\"\"\n\nRUN set -ex; \\\n\n\tapk add --no-cache --virtual .fetch-deps \\\n\t\tgnupg \\\n\t\twget \\\n\t; \\\n\n\tmkdir -p /usr/src; rm -rf /usr/src \\\n\tcd /usr/src; \\\n\n\twget -O php.tar.xz \"$PHP_URL\"; \\\n\n\tif [ -n \"$PHP_SHA256\" ]; then \\\n\t\techo \"$PHP_SHA256  *php.tar.xz\" | sha256sum -c -; \\\n\tfi; \\\n\tif [ -n \"$PHP_MD5\" ]; then \\\n\t\techo \"$PHP_MD5 *php.tar.xz\" | md5sum -c -; \\\n\tfi; \\\n\n\tif [ -n \"$PHP_ASC_URL\" ]; then \\\n\t\twget -O php.tar.xz.asc \"$PHP_ASC_URL\"; \\\n\t\texport GNUPGHOME=\"$(mktemp -d)\"; \\\n\t\tfor key in $GPG_KEYS; do \\\n\t\t\tgpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys \"$key\"; \\\n\t\tdone; \\\n\t\tgpg --batch --verify php.tar.xz.asc php.tar.xz; \\\n\t\tcommand -v gpgconf > /dev/null && gpgconf --kill all; \\\n\t\trm -rf \"$GNUPGHOME\"; \\\n\tfi; \\\n\n\tapk del --no-network .fetch-deps\n\nCOPY docker-php-source /usr/local/bin/\nRUN chmod +x /usr/local/bin/docker-php-source\n\nRUN set -ex \\\n\t&& apk add --no-cache --virtual .build-deps \\\n\t\t$PHPIZE_DEPS \\\n\t\targon2-dev \\\n\t\tcoreutils \\\n\t\tcurl-dev \\\n\t\tlibedit-dev \\\n\t\tlibsodium-dev \\\n\t\tlibxml2-dev \\\n\t\topenssl-dev \\\n\t\tsqlite-dev \\\n\t\\\n\t&& export CFLAGS=\"$PHP_CFLAGS\" \\\n\t\tCPPFLAGS=\"$PHP_CPPFLAGS\" \\\n\t\tLDFLAGS=\"$PHP_LDFLAGS\" \\\n\t&& docker-php-source extract \\\n\t&& cd /usr/src/php \\\n\t&& gnuArch=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" \\\n\t&& ./configure \\\n\t\t--build=\"$gnuArch\" \\\n\t\t--with-config-file-path=\"$PHP_INI_DIR\" \\\n\t\t--with-config-file-scan-dir=\"$PHP_INI_DIR/conf.d\" \\\n\t\t\\\n# make sure invalid --configure-flags are fatal errors intead of just warnings\n\t\t--enable-option-checking=fatal \\\n\t\t\\\n# https://github.com/docker-library/php/issues/439\n\t\t--with-mhash \\\n\t\t\\\n# --enable-ftp is included here because ftp_ssl_connect() needs ftp to be compiled statically (see https://github.com/docker-library/php/issues/236)\n\t\t--enable-ftp \\\n# --enable-mbstring is included here because otherwise there's no way to get pecl to use it properly (see https://github.com/docker-library/php/issues/195)\n\t\t--enable-mbstring \\\n# --enable-mysqlnd is included here because it's harder to compile after the fact than extensions are (since it's a plugin for several extensions, not an extension in itself)\n\t\t--enable-mysqlnd \\\n# https://wiki.php.net/rfc/argon2_password_hash (7.2+)\n\t\t--with-password-argon2 \\\n# https://wiki.php.net/rfc/libsodium\n\t\t--with-sodium=shared \\\n\t\t\\\n\t\t--with-curl \\\n\t\t--with-libedit \\\n\t\t--with-openssl \\\n\t\t--with-zlib \\\n\t\t\\\n# bundled pcre does not support JIT on s390x\n# https://manpages.debian.org/stretch/libpcre3-dev/pcrejit.3.en.html#AVAILABILITY_OF_JIT_SUPPORT\n\t\t$(test \"$gnuArch\" = 's390x-linux-gnu' && echo '--without-pcre-jit') \\\n\t\t\\\n\t\t$PHP_EXTRA_CONFIGURE_ARGS \\\n\t&& make -j \"$(nproc)\" \\\n\t&& find -type f -name '*.a' -delete \\\n\t&& make install \\\n\t&& { find /usr/local/bin /usr/local/sbin -type f -perm +0111 -exec strip --strip-all '{}' + || true; } \\\n\t&& make clean \\\n\t\\\n# https://github.com/docker-library/php/issues/692 (copy default example \"php.ini\" files somewhere easily discoverable)\n\t&& cp -v php.ini-* \"$PHP_INI_DIR/\" \\\n\t\\\n\t&& cd / \\\n\t&& docker-php-source delete \\\n\t\\\n\t&& runDeps=\"$( \\\n\t\tscanelf --needed --nobanner --format '%n#p' --recursive /usr/local \\\n\t\t\t| tr ',' '\\n' \\\n\t\t\t| sort -u \\\n\t\t\t| awk 'system(\"[ -e /usr/local/lib/\" $1 \" ]\") == 0 { next } { print \"so:\" $1 }' \\\n\t)\" \\\n\t&& apk add --no-cache $runDeps \\\n\t\\\n\t&& apk del --no-network .build-deps \\\n\t\\\n# https://github.com/docker-library/php/issues/443\n\t&& pecl update-channels \\\n\t&& rm -rf /tmp/pear ~/.pearrc\n\nCOPY docker-php-ext-* docker-php-entrypoint /usr/local/bin/\nRUN chmod +x /usr/local/bin/docker-php*\n\n# sodium was built as a shared module (so that it can be replaced later if so desired), so let's enable it too (https://github.com/docker-library/php/issues/598)\nRUN docker-php-ext-enable sodium\n\nWORKDIR /var/www/html\n\nRUN set -ex \\\n\t&& cd /usr/local/etc \\\n\t&& if [ -d php-fpm.d ]; then \\\n\t\t# for some reason, upstream's php-fpm.conf.default has \"include=NONE/etc/php-fpm.d/*.conf\"\n\t\tsed 's!=NONE/!=!g' php-fpm.conf.default | tee php-fpm.conf > /dev/null; \\\n\t\tcp php-fpm.d/www.conf.default php-fpm.d/www.conf; \\\n\telse \\\n\t\t# PHP 5.x doesn't use \"include=\" by default, so we'll create our own simple config that mimics PHP 7+ for consistency\n\t\tmkdir php-fpm.d; \\\n\t\tcp php-fpm.conf.default php-fpm.d/www.conf; \\\n\t\t{ \\\n\t\t\techo '[global]'; \\\n\t\t\techo 'include=etc/php-fpm.d/*.conf'; \\\n\t\t} | tee php-fpm.conf; \\\n\tfi \\\n\t&& { \\\n\t\techo '[global]'; \\\n\t\techo 'error_log = /proc/self/fd/2'; \\\n\t\techo; echo '; https://github.com/docker-library/php/pull/725#issuecomment-443540114'; echo 'log_limit = 8192'; \\\n\t\techo; \\\n\t\techo '[www]'; \\\n\t\techo '; if we send this to /proc/self/fd/1, it never appears'; \\\n\t\techo 'access.log = /proc/self/fd/2'; \\\n\t\techo; \\\n\t\techo 'clear_env = no'; \\\n\t\techo; \\\n\t\techo '; Ensure worker stdout and stderr are sent to the main error log.'; \\\n\t\techo 'catch_workers_output = yes'; \\\n\t\techo 'decorate_workers_output = no'; \\\n\t} | tee php-fpm.d/docker.conf \\\n\t&& { \\\n\t\techo '[global]'; \\\n\t\techo 'daemonize = no'; \\\n\t\techo; \\\n\t\techo '[www]'; \\\n\t\techo 'listen = 9000'; \\\n\t} | tee php-fpm.d/zz-docker.conf\n\n############\n# WORDPRESS\n############\n\nRUN apk add --no-cache \\\n# in theory, docker-entrypoint.sh is POSIX-compliant, but priority is a working, consistent image\n\t\tbash \\\n# BusyBox sed is not sufficient for some of our sed expressions\n\t\tsed\n\n# install the PHP extensions we need\nRUN set -ex; \\\n\n\tapk add --no-cache --virtual .build-deps \\\n\t\tlibjpeg-turbo-dev \\\n\t\tlibpng-dev \\\n\t\tlibzip-dev \\\n\t; \\\n\n\tdocker-php-ext-configure gd --with-png-dir=/usr --with-jpeg-dir=/usr; \\\n\tdocker-php-ext-install gd mysqli opcache zip; \\\n\n\trunDeps=\"$( \\\n\t\tscanelf --needed --nobanner --format '%n#p' --recursive /usr/local/lib/php/extensions \\\n\t\t\t| tr ',' '\\n' \\\n\t\t\t| sort -u \\\n\t\t\t| awk 'system(\"[ -e /usr/local/lib/\" $1 \" ]\") == 0 { next } { print \"so:\" $1 }' \\\n\t)\"; \\\n\tapk add --no-cache --virtual .wordpress-phpexts-rundeps $runDeps; \\\n\tapk del .build-deps\n\nRUN set -ex \\\n    && apk add --no-cache --virtual .phpize-deps $PHPIZE_DEPS imagemagick-dev libtool libxml2-dev \\\n    && pecl install imagick \\\n    && docker-php-ext-enable imagick \\\n    && docker-php-ext-install exif sockets soap \\\n    && apk add --no-cache --virtual .imagick-runtime-deps imagemagick \\\n    && apk del .phpize-deps\n\nENV WORDPRESS_VERSION 5.2.2\nENV WORDPRESS_SHA1 3605bcbe9ea48d714efa59b0eb2d251657e7d5b0\nENV TZ=America/Los_Angeles\n\nRUN set -ex; \\\n\tcurl -o wordpress.tar.gz -fSL \"https://wordpress.org/wordpress-${WORDPRESS_VERSION}.tar.gz\"; \\\n\techo \"$WORDPRESS_SHA1 *wordpress.tar.gz\" | sha1sum -c -; \\\n\ttar -xzf wordpress.tar.gz -C /usr/src/; \\\n\trm wordpress.tar.gz; \\\n\tchown -R www-data:www-data /usr/src/wordpress;\n\nRUN set -ex; \\\n\tapk add --no-cache ed dumb-init\n\nCOPY common /etc/nginx/common\nCOPY cache /etc/nginx/cache\nCOPY demyx-entrypoint.sh /usr/local/bin/demyx-entrypoint\nCOPY nginx.conf /etc/nginx/nginx.conf\nCOPY php.ini /usr/local/etc/php/php.ini\nCOPY www.conf /usr/local/etc/php-fpm.d\n\nRUN chmod +x /usr/local/bin/demyx-entrypoint\n\nEXPOSE 80\n\nENTRYPOINT [\"dumb-init\", \"demyx-entrypoint\"]\n"
}