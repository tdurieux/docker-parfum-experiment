{
  "startTime": 1674246151560,
  "endTime": 1674246152272,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 168,
        "lineEnd": 168,
        "columnStart": 7,
        "columnEnd": 49
      }
    },
    {
      "rule": "curlUseHttpsUrl",
      "position": {
        "lineStart": 73,
        "lineEnd": 73,
        "columnStart": 7,
        "columnEnd": 86
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 93,
        "lineEnd": 93,
        "columnStart": 7,
        "columnEnd": 39
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 100,
        "lineEnd": 100,
        "columnStart": 7,
        "columnEnd": 26
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM php:7.3-fpm-alpine3.8 AS stage0\n\nLABEL maintainer=\"Dean Tedesco <dean@ethicaljobs.com.au>\"\n\n#\n#--------------------------------------------------------------------------\n# Install nginx\n#--------------------------------------------------------------------------\n#\n\nENV NGINX_VERSION 1.13.8\n\nRUN GPG_KEYS=B0F4253373F8F6F510D42178520A9993A1C052F8 \\\n    && CONFIG=\"\\\n        --prefix=/etc/nginx \\\n        --sbin-path=/usr/sbin/nginx \\\n        --modules-path=/usr/lib/nginx/modules \\\n        --conf-path=/etc/nginx/nginx.conf \\\n        --error-log-path=/var/log/nginx/error.log \\\n        --http-log-path=/var/log/nginx/access.log \\\n        --pid-path=/var/run/nginx.pid \\\n        --lock-path=/var/run/nginx.lock \\\n        --http-client-body-temp-path=/var/cache/nginx/client_temp \\\n        --http-proxy-temp-path=/var/cache/nginx/proxy_temp \\\n        --http-fastcgi-temp-path=/var/cache/nginx/fastcgi_temp \\\n        --http-uwsgi-temp-path=/var/cache/nginx/uwsgi_temp \\\n        --http-scgi-temp-path=/var/cache/nginx/scgi_temp \\\n        --user=nginx \\\n        --group=nginx \\\n        --with-http_ssl_module \\\n        --with-http_realip_module \\\n        --with-http_addition_module \\\n        --with-http_sub_module \\\n        --with-http_dav_module \\\n        --with-http_flv_module \\\n        --with-http_mp4_module \\\n        --with-http_gunzip_module \\\n        --with-http_gzip_static_module \\\n        --with-http_random_index_module \\\n        --with-http_secure_link_module \\\n        --with-http_stub_status_module \\\n        --with-http_auth_request_module \\\n        --with-http_xslt_module=dynamic \\\n        --with-http_image_filter_module=dynamic \\\n        --with-http_geoip_module=dynamic \\\n        --with-threads \\\n        --with-stream \\\n        --with-stream_ssl_module \\\n        --with-stream_ssl_preread_module \\\n        --with-stream_realip_module \\\n        --with-stream_geoip_module=dynamic \\\n        --with-http_slice_module \\\n        --with-mail \\\n        --with-mail_ssl_module \\\n        --with-compat \\\n        --with-file-aio \\\n        --with-http_v2_module \\\n    \" \\\n    && addgroup -S nginx \\\n    && adduser -D -S -h /var/cache/nginx -s /sbin/nologin -G nginx nginx \\\n    && apk add --no-cache --virtual .build-deps \\\n        gcc \\\n        libc-dev \\\n        make \\\n        openssl-dev \\\n        pcre-dev \\\n        zlib-dev \\\n        linux-headers \\\n        curl \\\n        gnupg \\\n        libxslt-dev \\\n        gd-dev \\\n        geoip-dev \\\n    && curl -fSL https://nginx.org/download/nginx-$NGINX_VERSION.tar.gz -o nginx.tar.gz \\\n    # && curl -fSL http://nginx.org/download/nginx-$NGINX_VERSION.tar.gz.asc  -o nginx.tar.gz.asc \\\n    # && export GNUPGHOME=\"$(mktemp -d)\" \\\n    # && found=''; \\\n    # for server in \\\n    #     ha.pool.sks-keyservers.net \\\n    #     hkp://keyserver.ubuntu.com:80 \\\n    #     hkp://p80.pool.sks-keyservers.net:80 \\\n    #     pgp.mit.edu \\\n    # ; do \\\n    #     echo \"Fetching GPG key $GPG_KEYS from $server\"; \\\n    #     gpg --keyserver \"$server\" --keyserver-options timeout=10 --recv-keys \"$GPG_KEYS\" && found=yes && break; \\\n    # done; \\\n    # test -z \"$found\" && echo >&2 \"error: failed to fetch GPG key $GPG_KEYS\" && exit 1; \\\n    # gpg --batch --verify nginx.tar.gz.asc nginx.tar.gz \\\n    # && rm -r \"$GNUPGHOME\" nginx.tar.gz.asc \\\n    && mkdir -p /usr/src \\\n    && tar -zxC /usr/src -f nginx.tar.gz \\\n    && rm nginx.tar.gz \\\n    && cd /usr/src/nginx-$NGINX_VERSION \\\n    && ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" $CONFIG --with-debug \\\n    && make -j$(getconf _NPROCESSORS_ONLN) \\\n    && mv objs/nginx objs/nginx-debug \\\n    && mv objs/ngx_http_xslt_filter_module.so objs/ngx_http_xslt_filter_module-debug.so \\\n    && mv objs/ngx_http_image_filter_module.so objs/ngx_http_image_filter_module-debug.so \\\n    && mv objs/ngx_http_geoip_module.so objs/ngx_http_geoip_module-debug.so \\\n    && mv objs/ngx_stream_geoip_module.so objs/ngx_stream_geoip_module-debug.so \\\n    && ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" $CONFIG \\\n    && make -j$(getconf _NPROCESSORS_ONLN) \\\n    && make install \\\n    && rm -rf /etc/nginx/html/ \\\n    && mkdir /etc/nginx/conf.d/ \\\n    && mkdir -p /usr/share/nginx/html/ \\\n    && install -m644 html/index.html /usr/share/nginx/html/ \\\n    && install -m644 html/50x.html /usr/share/nginx/html/ \\\n    && install -m755 objs/nginx-debug /usr/sbin/nginx-debug \\\n    && install -m755 objs/ngx_http_xslt_filter_module-debug.so /usr/lib/nginx/modules/ngx_http_xslt_filter_module-debug.so \\\n    && install -m755 objs/ngx_http_image_filter_module-debug.so /usr/lib/nginx/modules/ngx_http_image_filter_module-debug.so \\\n    && install -m755 objs/ngx_http_geoip_module-debug.so /usr/lib/nginx/modules/ngx_http_geoip_module-debug.so \\\n    && install -m755 objs/ngx_stream_geoip_module-debug.so /usr/lib/nginx/modules/ngx_stream_geoip_module-debug.so \\\n    && ln -s ../../usr/lib/nginx/modules /etc/nginx/modules \\\n    && strip /usr/sbin/nginx* \\\n    && strip /usr/lib/nginx/modules/*.so \\\n    && rm -rf /usr/src/nginx-$NGINX_VERSION \\\n\n    # Bring in gettext so we can get `envsubst`, then throw\n    # the rest away. To do this, we need to install `gettext`\n    # then move `envsubst` out of the way so `gettext` can\n    # be deleted completely, then move `envsubst` back.\n    && apk add --no-cache --virtual .gettext gettext \\\n    && mv /usr/bin/envsubst /tmp/ \\\n\n    && runDeps=\"$( \\\n        scanelf --needed --nobanner --format '%n#p' /usr/sbin/nginx /usr/lib/nginx/modules/*.so /tmp/envsubst \\\n            | tr ',' '\\n' \\\n            | sort -u \\\n            | awk 'system(\"[ -e /usr/local/lib/\" $1 \" ]\") == 0 { next } { print \"so:\" $1 }' \\\n    )\" \\\n    && apk add --no-cache --virtual .nginx-rundeps $runDeps \\\n    && apk del .build-deps \\\n    && apk del .gettext \\\n    && mv /tmp/envsubst /usr/local/bin/ \\\n\n    # Bring in tzdata so users could set the timezones through the environment\n    # variables\n    && apk add --no-cache tzdata \\\n\n    # forward request and error logs to docker log collector\n    && ln -sf /dev/stdout /var/log/nginx/access.log \\\n    && ln -sf /dev/stderr /var/log/nginx/error.log\n\n#\n#--------------------------------------------------------------------------\n# Install dependencies and extensions\n#--------------------------------------------------------------------------\n#\n\nRUN apk --no-cache add \\\n        freetype libpng libjpeg-turbo freetype-dev libpng-dev libjpeg-turbo-dev \\\n        wget \\\n        git \\\n        supervisor \\\n        bash \\\n    && docker-php-ext-install \\\n        mysqli \\\n        pdo_mysql \\\n        opcache \\\n        pcntl \\\n    && docker-php-ext-configure gd \\\n        --with-gd \\\n        --with-freetype-dir=/usr/include/ \\\n        --with-png-dir=/usr/include/ \\\n        --with-jpeg-dir=/usr/include/ \\\n    && NPROC=$(grep -c ^processor /proc/cpuinfo 2>/dev/null || 1) \\\n    && docker-php-ext-install -j${NPROC} gd \\\n    && curl -f -sS https://getcomposer.org/installer | php -- --install-dir=/usr/bin --filename=composer \\\n    && composer global require \"hirak/prestissimo\"\n\nRUN mkdir -p /var/log/cron \\\n    && mkdir -p /var/www \\\n    && mkdir -p /var/entrypoints \\\n    && touch /var/log/cron/cron.log \\\n    && mkdir -m 0644 -p /etc/cron.d \\\n    && chmod -R 0644 /etc/cron.d\n\n#\n#--------------------------------------------------------------------------\n# Application\n#--------------------------------------------------------------------------\n#\n\nADD ./config/bin/schedule /etc/crontabs/root\n\nADD ./config/supervisord/* /etc/supervisord/\n\nADD ./config/entrypoints/* /var/entrypoints/\n\nENV TZ='Australia/Melbourne'\n\nENV PATH=\"$PATH:/var/www/vendor/bin\"\n\nWORKDIR /var/www\n\nRUN touch /var/log/cron/cron.log\n\nENV SCHEDULE_LOG_PATH /var/log/cron/cron.log\n\n#\n#--------------------------------------------------------------------------\n# Init\n#--------------------------------------------------------------------------\n#\n\nEXPOSE 80 443\n\nENTRYPOINT [\"/var/entrypoints/laravel\"]\n\nFROM scratch AS release\nCOPY --from=stage0 / /\nCMD /usr/bin/supervisord -n -c /etc/supervisord/web.conf\n\nFROM php:7.3-fpm-alpine3.8 AS xdebug\nCOPY --from=release / /\n\n# Add prerequisites for xdebug\nRUN apk add --no-cache $PHPIZE_DEPS\n\n# Install xdebug\nRUN pecl install xdebug-2.7.0\n\n# Configure xdebug for remote debugging with PhpStorm\nRUN echo \"zend_extension=$(find /usr/local/lib/php/extensions/ -name xdebug.so)\" > /usr/local/etc/php/conf.d/xdebug.ini \\\n && echo \"xdebug.remote_enable=on\" >> /usr/local/etc/php/conf.d/xdebug.ini \\\n && echo \"xdebug.remote_autostart=on\" >> /usr/local/etc/php/conf.d/xdebug.ini \\\n && echo \"xdebug.remote_host=docker.for.mac.localhost\" >> /usr/local/etc/php/conf.d/xdebug.ini \\\n && echo \"xdebug.remote_port=9000\" >> /usr/local/etc/php/conf.d/xdebug.ini \\\n && echo \"xdebug.remote_log=/var/www/storage/logs/xdebug.log\" >> /usr/local/etc/php/conf.d/xdebug.ini\n\nFROM release\n"
}