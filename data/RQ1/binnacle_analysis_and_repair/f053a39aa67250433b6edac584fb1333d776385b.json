{
  "startTime": 1674251701896,
  "endTime": 1674251702159,
  "originalSmells": [
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 131,
        "lineEnd": 131,
        "columnStart": 4,
        "columnEnd": 30
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 132,
        "lineEnd": 132,
        "columnStart": 4,
        "columnEnd": 42
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 86,
        "lineEnd": 86,
        "columnStart": 4,
        "columnEnd": 15
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 98,
        "lineEnd": 98,
        "columnStart": 4,
        "columnEnd": 15
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM nvidia/cuda:7.5-cudnn5-devel-ubuntu14.04\nLABEL version=\"0.1.0\"\nLABEL version_convention=\"Semantic Versioning (see www.semver.org)\"\nLABEL title=\"Dockerfile for TextBoxes++ with CRNN\"\nLABEL description=\"This Dockerfile sets up TextBoxes++\\\nand CRNN with all their respective dependencies.\\\nMake sure to run with nvidia-docker\"\n\nRUN apt-get update && apt-get install -y --no-install-recommends \\\n        autoconf \\\n        autoconf-archive \\\n        automake \\\n        binutils-dev \\\n        bison \\\n        build-essential \\\n        cmake \\\n        curl \\\n        flex \\\n        g++ \\\n        git \\\n        libatlas-base-dev \\\n        libboost-all-dev \\\n        libdouble-conversion-dev \\\n        libedit-dev \\\n        libevent-dev \\\n        libgeos-dev \\\n        libgflags-dev \\\n        libgoogle-glog-dev \\\n        libhdf5-serial-dev \\\n        libjemalloc-dev \\\n        libkrb5-dev \\\n        libleveldb-dev \\\n        liblmdb-dev \\\n        liblz4-dev \\\n        liblzma-dev \\\n        libmatio-dev \\\n        libnuma-dev \\\n        libopencv-dev \\\n        libprotobuf-dev \\\n        libpython3-dev \\\n        libpython-dev \\\n        libsasl2-dev \\\n        libsnappy-dev \\\n        libssl-dev \\\n        libtool \\\n        pkg-config \\\n        protobuf-compiler \\\n        python-dev \\\n        python-numpy \\\n        python-opencv \\\n        python-pip \\\n        python-scipy \\\n        wget \\\n        zlib1g-dev && \\\n        rm -rf /var/lib/apt/lists/*\n\nENV CAFFE_ROOT=/opt/caffe\nWORKDIR $CAFFE_ROOT\n\n\n########################################\n#### Install CRNN Dependencies #########\n########################################\n\n# Install pytorch\nWORKDIR /root\nRUN git clone https://github.com/torch/distro.git /root/torch --recursive\nRUN cd /root/torch && \\\n    bash install-deps;\nRUN cd /root/torch && \\\n    ./install.sh\n\n# Update the PATHs\n# This is normally done by calling\n#     source ~/torch/install/bin/torch-activate\nENV LUA_PATH='/root/.luarocks/share/lua/5.1/?.lua;/root/.luarocks/share/lua/5.1/?/init.lua;/root/torch/install/share/lua/5.1/?.lua;/root/torch/install/share/lua/5.1/?/init.lua;./?.lua;/root/torch/install/share/luajit-2.1.0-beta1/?.lua;/usr/local/share/lua/5.1/?.lua;/usr/local/share/lua/5.1/?/init.lua'\nENV LUA_CPATH='/root/.luarocks/lib/lua/5.1/?.so;/root/torch/install/lib/lua/5.1/?.so;./?.so;/usr/local/lib/lua/5.1/?.so;/usr/local/lib/lua/5.1/loadall.so'\nENV PATH=/root/torch/install/bin:$PATH\nENV LD_LIBRARY_PATH=/root/torch/install/lib:$LD_LIBRARY_PATH\nENV DYLD_LIBRARY_PATH=/root/torch/install/lib:$DYLD_LIBRARY_PATH\nENV LUA_CPATH='/root/torch/install/lib/?.so;'$LUA_CPATH\n\n# Install Folly\nRUN git clone -b v0.35.0  --depth 1 https://github.com/facebook/folly\nRUN cd /root/folly/folly && \\\n    autoreconf -ivf && \\\n    ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" && \\\n    make && \\\n    make install && \\\n    ldconfig\n\n# Install fbthrift\nRUN git clone -b v0.24.0  --depth 1 https://github.com/facebook/fbthrift\nCOPY patches/fbthrift.diff ${CAFFE_ROOT}/patches/fbthrift.diff\nRUN cd /root/fbthrift && \\\n    git apply ${CAFFE_ROOT}/patches/fbthrift.diff\nRUN cd /root/fbthrift/thrift && \\\n    autoreconf -ivf && \\\n    ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" && \\\n    make && \\\n    make install\n\n# Install thpp\nRUN git clone -b v1.0 https://github.com/facebook/thpp\nCOPY patches/thpp.diff ${CAFFE_ROOT}/patches/thpp.diff\nRUN cd /root/thpp && \\\n    git apply ${CAFFE_ROOT}/patches/thpp.diff\nRUN cd /root/thpp/thpp && \\\n    ./build.sh\n\n# Install fblualib\nRUN git clone -b v1.0 https://github.com/facebook/fblualib\nRUN cd /root/fblualib/fblualib && \\\n    ./build.sh\n\n########################################\n#### Install CRNN ######################\n########################################\nCOPY crnn/src ${CAFFE_ROOT}/crnn/src\n\n# Install CRNN\nRUN cd ${CAFFE_ROOT}/crnn/src && \\\n    ./build_cpp.sh\n\n########################################\n#### Install Textboxes++ Dependencies ##\n########################################\nWORKDIR $CAFFE_ROOT\n\n# Cython needs to be installed seperately\nCopy python ${CAFFE_ROOT}/python\nRUN pip install --no-cache-dir Cython==0.28.5\nRUN pip install --no-cache-dir -r python/requirements.txt\n\n########################################\n#### Install Textboxes++ ###############\n########################################\nWORKDIR $CAFFE_ROOT\n# Include Build context\nCOPY caffe.cloc ${CAFFE_ROOT}/caffe.cloc\nCopy cmake ${CAFFE_ROOT}/cmake\nCopy CMakeLists.txt ${CAFFE_ROOT}/CMakeLists.txt\nCopy include ${CAFFE_ROOT}/include\nCopy matlab ${CAFFE_ROOT}/matlab\nCopy src ${CAFFE_ROOT}/src\nCOPY tools ${CAFFE_ROOT}/tools\nCOPY LICENSE ${CAFFE_ROOT}/LICENSE\nCOPY scripts ${CAFFE_ROOT}/scripts\n\n# CUDA_ARCH_NAME=Manual is a workaround the lack of compute_60 or higher in cuda7.5's cuda\n# Required for recent GPUs\nRUN mkdir build && \\\n    cd build && \\\n    cmake .. -DCUDA_ARCH_NAME=Manual && \\\n    make -j\"$(nproc)\"\n\n# HACK: OpenCV can be confused by (the lack of) this driver in some systems\nRUN ln /dev/null /dev/raw1394\n\nENV PYCAFFE_ROOT $CAFFE_ROOT/python\nENV PYTHONPATH $PYCAFFE_ROOT:$PYTHONPATH\nENV PATH $CAFFE_ROOT/build/tools:$PYCAFFE_ROOT:$PATH\nRUN echo \"$CAFFE_ROOT/build/lib\" >> /etc/ld.so.conf.d/caffe.conf && ldconfig\n\n\n########################################\n#### COPY Context required at runtime ##\n########################################\nCOPY crnn/data ${CAFFE_ROOT}/crnn/data\nCOPY data ${CAFFE_ROOT}/data\nCOPY demo_images ${CAFFE_ROOT}/demo_images\nCOPY examples ${CAFFE_ROOT}/examples\nCOPY README.md ${CAFFE_ROOT}/README.md\n\n\nWORKDIR /opt/caffe\n"
}