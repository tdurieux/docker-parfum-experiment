{
  "startTime": 1674237253366,
  "endTime": 1674237253425,
  "originalSmells": [
    {
      "rule": "apkAddUseNoCache",
      "position": {
        "lineStart": 3,
        "lineEnd": 3,
        "columnStart": 4,
        "columnEnd": 68
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# Inspired by https://container-solutions.com/faster-builds-in-docker-with-go-1-11/\n# Base build image\nFROM golang:1.11.2-alpine3.8 AS build_base\nRUN apk add --no-cache bash make git curl unzip rsync libc6-compat gcc musl-dev\nWORKDIR /go/src/github.com/spacemeshos/go-spacemesh\n\n# Force the go compiler to use modules\nENV GO111MODULE=on\n\n# We want to populate the module cache based on the go.{mod,sum} files.\nCOPY go.mod .\nCOPY go.sum .\n\n# Download dependencies\nRUN go mod download\n\nCOPY setup_env.sh .\nCOPY scripts/* scripts/\n\nRUN ./setup_env.sh\n\n# This image builds the go-spacemesh server\nFROM build_base AS server_builder\n# Here we copy the rest of the source code\nCOPY . .\n\n# And compile the project\nRUN make build\nRUN make hare\nRUN make p2p\nRUN make sync\n\n#In this last stage, we start from a fresh Alpine image, to reduce the image size and not ship the Go compiler in our production artifacts.\nFROM alpine AS spacemesh\n\n# Finally we copy the statically compiled Go binary.\nCOPY --from=server_builder /go/src/github.com/spacemeshos/go-spacemesh/build/go-spacemesh /bin/go-spacemesh\nCOPY --from=server_builder /go/src/github.com/spacemeshos/go-spacemesh/build/go-hare /bin/go-hare\nCOPY --from=server_builder /go/src/github.com/spacemeshos/go-spacemesh/build/go-p2p /bin/go-p2p\nCOPY --from=server_builder /go/src/github.com/spacemeshos/go-spacemesh/build/go-sync /bin/go-sync\nCOPY --from=server_builder /go/src/github.com/spacemeshos/go-spacemesh/tests/sync/data /bin/data\n\n\nENTRYPOINT [\"/bin/go-spacemesh\"]\nEXPOSE 7513\n\n# profiling port\nEXPOSE 6060\n"
}