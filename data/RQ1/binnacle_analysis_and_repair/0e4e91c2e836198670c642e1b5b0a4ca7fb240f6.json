{
  "startTime": 1674241532514,
  "endTime": 1674241532592,
  "originalSmells": [
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 7,
        "lineEnd": 7,
        "columnStart": 4,
        "columnEnd": 30
      }
    },
    {
      "rule": "yarnCacheCleanAfterInstall",
      "position": {
        "lineStart": 10,
        "lineEnd": 10,
        "columnStart": 4,
        "columnEnd": 40
      }
    },
    {
      "rule": "yarnCacheCleanAfterInstall",
      "position": {
        "lineStart": 26,
        "lineEnd": 26,
        "columnStart": 4,
        "columnEnd": 16
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# This is the build environment\nFROM node:10-alpine as build-env\n\n# Base packages and utils\nRUN apk add --update --no-cache git tar curl vim python python-dev make gcc g++ automake autoconf linux-headers libgcc libstdc++\n\n# Use yarn as package manager\nRUN npm install -g yarn@latest && npm cache clean --force;\n\n# Set cache for mounting docker volumes\nRUN yarn config set cache-folder ~/.yarn && yarn cache clean;\n\n# Install build dependencies\nRUN yarn global add node-sass @angular/cli\n\n# Create build environment\nRUN mkdir -p /opt/build\nWORKDIR /opt/build\n\n# Only do a reinstall if package.json changed.\nCOPY package.json .\n\n# Copy the project\nCOPY . .\n\n# Install deps\nRUN yarn install && yarn cache clean;\n\n# Run build\nRUN yarn build\n\n# Create the final image\nFROM node:10-alpine\n\n# Set the working directory\nWORKDIR /opt/app\n\n# Selectively copy the app to the new image\nCOPY --from=build-env /opt/build/dist /opt/app/dist\n\n# And go ðŸš€\nCMD [ \"node\", \"/opt/app/dist/apps/api/main\" ]\n"
}