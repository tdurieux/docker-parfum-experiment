{
  "startTime": 1674248789738,
  "endTime": 1674248790599,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 172,
        "lineEnd": 172,
        "columnStart": 4,
        "columnEnd": 49
      }
    },
    {
      "rule": "wgetUseHttpsUrl",
      "position": {
        "lineStart": 55,
        "lineEnd": 55,
        "columnStart": 4,
        "columnEnd": 68
      }
    },
    {
      "rule": "wgetUseHttpsUrl",
      "position": {
        "lineStart": 149,
        "lineEnd": 149,
        "columnStart": 4,
        "columnEnd": 92
      }
    },
    {
      "rule": "wgetUseHttpsUrl",
      "position": {
        "lineStart": 155,
        "lineEnd": 155,
        "columnStart": 4,
        "columnEnd": 93
      }
    },
    {
      "rule": "wgetUseHttpsUrl",
      "position": {
        "lineStart": 162,
        "lineEnd": 162,
        "columnStart": 4,
        "columnEnd": 81
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 164,
        "lineEnd": 164,
        "columnStart": 14,
        "columnEnd": 44
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 5,
        "lineEnd": 27,
        "columnStart": 22,
        "columnEnd": 24
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 144,
        "lineEnd": 144,
        "columnStart": 22,
        "columnEnd": 79
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 5,
        "lineEnd": 27,
        "columnStart": 22,
        "columnEnd": 24
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 30,
        "lineEnd": 31,
        "columnStart": 22,
        "columnEnd": 32
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 144,
        "lineEnd": 144,
        "columnStart": 22,
        "columnEnd": 79
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM rocker/r-ver:3.4.3\n\nMAINTAINER Jan Winter \"jan.winter@dkfz.de\"\n\n#### LINUX DEPENDENCIES\nRUN apt-get update && apt-get install --no-install-recommends -y \\\n    wget \\\n    sudo \\\n    gdebi-core \\\n    pandoc \\\n    pandoc-citeproc \\\n    libcurl4-gnutls-dev \\\n    libcairo2-dev \\\n    libxt-dev \\\n    build-essential \\\n    libgd-dev \\\n    libexpat1-dev \\\n    libxml2-dev \\\n    git \\\n    libssl-dev \\\n    curl \\\n    libssl-dev \\\n    libtiff5-dev \\\n    htop \\\n    ghostscript \\\n    nginx \\\n    libtbb2 \\\n    libmariadbclient-dev && rm -rf /var/lib/apt/lists/*;\n\n# Add TEX for report and R Markdown\nRUN apt-get update && apt-get -y --no-install-recommends \\\n   install texlive texlive-xetex && rm -rf /var/lib/apt/lists/*;\n\n# install the shiny server debian package from r-studio\nRUN wget https://download3.rstudio.org/ubuntu-12.04/x86_64/shiny-server-1.5.3.838-amd64.deb -P /tmp/\nRUN gdebi -n /tmp/shiny-server-1.5.3.838-amd64.deb && \\\n    rm -f /tmp/shiny-server-1.5.3.838-amd64.deb\n\nCOPY ./shiny-server.sh /usr/bin/shiny-server.sh\nRUN chmod +x /usr/bin/shiny-server.sh\n\n#### R PACKAGES\n\n# First we need devtools for all the installation of all further packages\nRUN R -e 'install.packages(\"devtools\", repos = \"http://cloud.r-project.org/\")'\n\n# install all the packages we need from CRAN, Bioconductor and GitHub\n\nRUN R -e 'devtools::install_version(\"RCurl\", repos = \"http://cloud.r-project.org/\")'\nRUN R -e 'devtools::install_version(\"XML\", repos = \"http://cloud.r-project.org/\")'\nRUN R -e 'source(\"http://bioconductor.org/biocLite.R\");biocLite()'\nRUN R -e 'source(\"http://bioconductor.org/biocLite.R\");biocLite(\"BiocParallel\")'\nRUN R -e 'source(\"http://bioconductor.org/biocLite.R\");biocLite(\"rtracklayer\")'\n\n# We have to retrieve thise package as it is not available anymore, but required by some packages\nRUN wget https://www.omegahat.net/XMLRPC/XMLRPC_0.3-0.tar.gz -P /tmp/\nRUN R -e 'install.packages(\"/tmp/XMLRPC_0.3-0.tar.gz\", repos = NULL, type=\"source\")'\n\nRUN R -e 'source(\"http://bioconductor.org/biocLite.R\");biocLite(\"RCytoscape\")'\nRUN R -e 'source(\"http://bioconductor.org/biocLite.R\");biocLite(\"RamiGO\")'\nRUN R -e 'source(\"http://bioconductor.org/biocLite.R\");biocLite(\"BiocGenerics\")'\nRUN R -e 'source(\"http://bioconductor.org/biocLite.R\");biocLite(\"limma\")'\nRUN R -e 'devtools::install_version(\"RMySQL\", repos = \"http://cloud.r-project.org/\")'\nRUN R -e 'source(\"http://bioconductor.org/biocLite.R\");biocLite(\"GenomicFeatures\")'\nRUN R -e 'source(\"http://bioconductor.org/biocLite.R\");biocLite(\"Rqc\")'\nRUN R -e 'source(\"http://bioconductor.org/biocLite.R\");biocLite(\"IRanges\")'\nRUN R -e 'source(\"http://bioconductor.org/biocLite.R\");biocLite(\"ShortRead\")'\nRUN R -e 'source(\"http://bioconductor.org/biocLite.R\");biocLite(\"KEGGREST\")'\nRUN R -e 'source(\"http://bioconductor.org/biocLite.R\");biocLite(\"GenomicRanges\")'\nRUN R -e 'source(\"http://bioconductor.org/biocLite.R\");biocLite(\"biomaRt\")'\nRUN R -e 'source(\"http://bioconductor.org/biocLite.R\");biocLite(\"DESeq2\")'\nRUN R -e 'source(\"http://bioconductor.org/biocLite.R\");biocLite(\"edgeR\")'\nRUN R -e 'source(\"http://bioconductor.org/biocLite.R\");biocLite(\"Gviz\")'\nRUN R -e 'source(\"http://bioconductor.org/biocLite.R\");biocLite(\"STRINGdb\")'\nRUN R -e 'devtools::install_version(\"dplyr\", version = \"0.7.4\", repos = \"http://cloud.r-project.org/\")'\nRUN R -e 'devtools::install_github(\"jyyu/ScreenBEAM\", ref = \"d6204b3\")'\nRUN R -e 'devtools::install_version(\"shinydashboard\", version = \"0.5.3\", repos = \"http://cloud.r-project.org/\")'\nRUN R -e 'devtools::install_version(\"jsonlite\", version = \"1.1\", repos = \"http://cloud.r-project.org/\")'\nRUN R -e 'devtools::install_version(\"shinyBS\", version = \"0.61\", repos = \"http://cloud.r-project.org/\")'\nRUN R -e 'devtools::install_version(\"highcharter\", version = \"0.5.0\", repos = \"http://cloud.r-project.org/\")'\nRUN R -e 'devtools::install_version(\"seqinr\", version = \"3.3-6\", repos = \"http://cloud.r-project.org/\")'\nRUN R -e 'devtools::install_version(\"openxlsx\", version = \"4.0.17\", repos = \"http://cloud.r-project.org/\")'\nRUN R -e 'devtools::install_version(\"caTools\", version = \"1.17.1\", repos = \"http://cloud.r-project.org/\")'\nRUN R -e 'devtools::install_version(\"reshape2\", version = \"1.4.2\", repos = \"http://cloud.r-project.org/\")'\nRUN R -e 'devtools::install_version(\"MESS\", version = \"0.4-3\", repos = \"http://cloud.r-project.org/\")'\nRUN R -e 'devtools::install_version(\"igraph\", version = \"1.0.1\", repos = \"http://cloud.r-project.org/\")'\nRUN R -e 'devtools::install_version(\"data.table\", version = \"1.10.4\", repos = \"http://cloud.r-project.org/\")'\nRUN R -e 'devtools::install_github(\"jimhester/gmailr\", ref = \"d5ee3c2\")' #OLD d5ee3c2 # new 59dac01\nRUN R -e 'devtools::install_version(\"d3heatmap\", version = \"0.6.1.1\", repos = \"http://cloud.r-project.org/\")'\nRUN R -e 'devtools::install_version(\"DEoptim\", version = \"2.2-3\", repos = \"http://cloud.r-project.org/\")'\nRUN R -e 'devtools::install_version(\"httr\", version = \"1.3.1\", repos = \"http://cloud.r-project.org/\")'\nRUN R -e 'devtools::install_version(\"sgRSEA\", version = \"0.1\", repos = \"http://cloud.r-project.org/\")'\nRUN R -e 'devtools::install_version(\"VennDiagram\", version = \"1.6.17\", repos = \"http://cloud.r-project.org/\")'\nRUN R -e 'devtools::install_version(\"tidyverse\", version = \"1.2.1\", repos = \"http://cloud.r-project.org/\")'\nRUN R -e 'devtools::install_version(\"htmltools\", version = \"0.3.6\", repos = \"http://cloud.r-project.org/\")'\nRUN R -e 'devtools::install_version(\"DT\", version = \"0.2\", repos = \"http://cloud.r-project.org/\")'\nRUN R -e 'devtools::install_version(\"sm\", version = \"2.2-5.4\", repos = \"http://cloud.r-project.org/\")'\nRUN R -e 'devtools::install_version(\"shinyjs\", version = \"0.9.1\", repos = \"http://cloud.r-project.org/\")'\nRUN R -e 'devtools::install_version(\"markdown\", repos = \"http://cloud.r-project.org/\")'\nRUN R -e 'devtools::install_version(\"knitr\", version = \"1.16\", repos = \"http://cloud.r-project.org/\")'\nRUN R -e 'devtools::install_version(\"shiny\", version = \"1.0.5\", repos = \"http://cloud.r-project.org/\")'\nRUN R -e 'devtools::install_version(\"bookdown\", version = \"0.4\", repos = \"http://cloud.r-project.org/\")'\nRUN R -e 'devtools::install_version(\"R.utils\", version = \"2.5.0\", repos = \"http://cloud.r-project.org/\")'\nRUN R -e 'devtools::install_version(\"shinyWidgets\", repos = \"http://cloud.r-project.org/\")'\n\n\n\n# cleaning up downloaded deb packages for keeping clean our docker image\nRUN apt-get -qq clean && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*\n\n# now install the reannotate-crispr PERL package, which is based on the CRISPR LIBRARY DESIGNER\n\nENV PERL_MM_USE_DEFAULT=1\nRUN perl -MCPAN -e 'CPAN::Shell->install(\"Bundle::CPAN\")'\n\n# now install all the modules we need for crispr reannotator\nRUN perl -MCPAN -e 'CPAN::Shell->install(\"Bio::DB::Fasta\")'\nRUN perl -MCPAN -e 'CPAN::Shell->install(\"Bio::SeqIO\")'\nRUN perl -MCPAN -e 'CPAN::Shell->install(\"Bio::Tools::GFF\")'\nRUN perl -MCPAN -e 'CPAN::Shell->install(\"Scalar::Util\")'\nRUN perl -MCPAN -e 'CPAN::Shell->install(\"Bio::SeqFeature::Generic\")'\nRUN perl -MCPAN -e 'CPAN::Shell->install(\"Bio::Location::Split\")'\nRUN perl -MCPAN -e 'CPAN::Shell->install(\"JSON::XS\")'\nRUN perl -MCPAN -e 'CPAN::Shell->install(\"File::Slurp\")'\nRUN perl -MCPAN -e 'CPAN::Shell->install(\"List::MoreUtils\")'\nRUN perl -MCPAN -e 'CPAN::Shell->install(\"List::Util\")'\nRUN perl -MCPAN -e 'CPAN::Shell->install(\"Archive::Zip\")'\nRUN perl -MCPAN -e 'CPAN::Shell->install(\"Parallel::ForkManager\")'\nRUN perl -MCPAN -e 'CPAN::Shell->install(\"Cwd\")'\nRUN perl -MCPAN -e 'CPAN::Shell->install(\"Getopt::Long\")'\nRUN perl -MCPAN -e 'CPAN::Shell->install(\"File::Grep\")'\nRUN perl -MCPAN -e 'CPAN::Shell->install(\"Text::Wrap\")'\nRUN perl -MCPAN -e 'CPAN::Shell->install(\"Unix::Processors\")'\n\nRUN git clone https://github.com/boutroslab/Supplemental-Material.git /tmp/Supplemental-Material\nRUN cp -r /tmp/Supplemental-Material/Rauscher\\&Heigwer_2016/crispr-reannotation /opt/\nRUN chmod +x /opt/crispr-reannotation/reannotate_crispr.pl\nenv PATH /opt/crispr-reannotation:$PATH\nRUN rm -rf /tmp/Supplemental-Material\n\n# install intervaltree...another dependency for  reannotate-crispr\nRUN cd /opt/crispr-reannotation/depends/Set-IntervalTree-0.10-OD; perl Makefile.PL; make; make test && make install\n\n# Install Python NumPy and SciPy required for BAGEL\nRUN apt-get update && apt-get install --no-install-recommends -y python-numpy python-scipy python-sympy && rm -rf /var/lib/apt/lists/*;\n\n## Install Software packages, Download and Install them\n\n# Bowtie 2\nRUN wget https://www.dkfz.de/signaling/crispranalyzer/bowtie2-2.2.9-linux-x86_64.zip -P /tmp/\nRUN unzip /tmp/bowtie2-2.2.9-linux-x86_64.zip -d /opt\nENV PATH=/opt/bowtie2-2.2.9:$PATH\nRUN echo 'export PATH=/opt/bowtie2-2.2.9/:$PATH' >> /etc/profile\n\n# Bowtie 1\nRUN wget https://www.dkfz.de/signaling/crispranalyzer/bowtie-1.2.1.1-linux-x86_64.zip -P /tmp/\nRUN unzip /tmp/bowtie-1.2.1.1-linux-x86_64.zip -d /opt\nENV PATH=/opt/bowtie-1.2.1.1/:$PATH\nRUN echo 'export PATH=/opt/bowtie-1.2.1.1/:$PATH' >> /etc/profile\n\n\n# install MAGeCK from Sourceforge\nRUN wget https://www.dkfz.de/signaling/crispranalyzer/mageck-0.5.5.tar.gz -P /tmp/\n#COPY ./mageck-0.5.5.tar.gz /tmp/\nRUN cd /tmp/; tar xvf ./mageck-0.5.5.tar.gz; rm ./mageck-0.5.5.tar.gz cd /tmp/mageck-0.5.5; python setup.py install\nRUN rm -rf /tmp/mageck-0.5.5 /tmp/mageck-0.5.5.tar.gz\n\n### RUST-based FASTQ Extraction and SAM Extraction\n# PERL-based backup variants are included in CRISPRAnalyzeR source\n\n# Install RUST compiler\nRUN \\\n    curl -f https://sh.rustup.rs > /tmp/sh.rustup.rs && \\\n         chmod +x /tmp/sh.rustup.rs && \\\n           /tmp/sh.rustup.rs -y && \\\n rm /tmp/sh.rustup.rs\n\nENV PATH=/root/.cargo/bin:$PATH\n\n# compile CRISPRAnalyzer mapper and extractor from source\nRUN \\\n     git clone https://github.com/OliPelz/fastq_extractor_proof_of_principle.git \\\n     /tmp/crispranalyzer-rust-tools\n# target dir for compiled executables\nRUN \\\n     mkdir -p /opt/crispranalyzer-tools\n\n# source cargo env file so we can use it\nRUN \\\n     cd /tmp/crispranalyzer-rust-tools/extractor_in_RUST/fastq_parser && \\\n     cargo build --release && \\\n     cp ./target/release/fastq_parser /opt/crispranalyzer-tools/ && \\\n     chmod +x /opt/crispranalyzer-tools/fastq_parser\n\nRUN \\\n    cd /tmp/crispranalyzer-rust-tools/sam_mapper_in_RUST/sam_mapper/ && \\\n    cargo build --release && \\\n    cp ./target/release/sam_mapper /opt/crispranalyzer-tools/ && \\\n    chmod +x /opt/crispranalyzer-tools/sam_mapper\n\nENV PATH=/opt/crispranalyzer-tools:$PATH\nRUN echo 'export PATH=/opt/crispranalyzer-tools/:$PATH' >> /etc/profile\n\n### CRISPRAnalyzeR FROM SOURCE\n\n## Now we add CRISPRAnalyzeR code directly from Github Repository\nARG CACHEBUST=1\n# We use CACHEBUST=1 arg to FORCE docker to start from here without caching\n# This can be achieved by a build argument as described here : https://github.com/moby/moby/issues/1996#issuecomment-185872769\n# docker build --rm --label crispranalyzer --build-arg CACHEBUST=$(date +%s) -t boutroslab/crispranalyzer:latest\n\n# install CRISPRAnalyzeR\nRUN mkdir /srv/shiny-server/CRISPRAnalyzeR\nRUN git clone --depth=1 https://github.com/boutroslab/CRISPRAnalyzeR.git /tmp/CRISPRAnalyzeR\nRUN cp -r /tmp/CRISPRAnalyzeR/source/* /srv/shiny-server/CRISPRAnalyzeR/\n\n# Generate Directories\nRUN mkdir /srv/shiny-server/CRISPRAnalyzeR2 \\\n\t /srv/shiny-server/CRISPRAnalyzeR3 \\\n\t /srv/shiny-server/CRISPRAnalyzeR4 \\\n\t /srv/shiny-server/CRISPRAnalyzeR5\n\nRUN cp -r /srv/shiny-server/CRISPRAnalyzeR/multiuser/* /srv/shiny-server/CRISPRAnalyzeR2 && \\\n\t cp -r /srv/shiny-server/CRISPRAnalyzeR/multiuser/* /srv/shiny-server/CRISPRAnalyzeR3 && \\\n\t cp -r /srv/shiny-server/CRISPRAnalyzeR/multiuser/* /srv/shiny-server/CRISPRAnalyzeR4 && \\\n\t cp -r /srv/shiny-server/CRISPRAnalyzeR/multiuser/* /srv/shiny-server/CRISPRAnalyzeR5\n\n# take CSS and web files\nRUN cp -r /srv/shiny-server/CRISPRAnalyzeR/www /srv/shiny-server/CRISPRAnalyzeR2 && \\\n\t cp -r /srv/shiny-server/CRISPRAnalyzeR/www /srv/shiny-server/CRISPRAnalyzeR3 && \\\n\t cp -r /srv/shiny-server/CRISPRAnalyzeR/www /srv/shiny-server/CRISPRAnalyzeR4 && \\\n\t cp -r /srv/shiny-server/CRISPRAnalyzeR/www /srv/shiny-server/CRISPRAnalyzeR5\n\n# we will run crispranalyzer as user shiny, so not as root!\nRUN chown -R shiny:shiny /srv/shiny-server/CRISPRAnalyzeR\nRUN chown -R shiny:shiny /srv/shiny-server/CRISPRAnalyzeR/userdata\n\n\n# add R profile options\nRUN echo 'setwd(\"/srv/shiny-server/CRISPRAnalyzeR\")' >> /usr/local/lib/R/etc/Rprofile.site\nRUN echo 'options(download.file.method = \"libcurl\")' >> /usr/local/lib/R/etc/Rprofile.site\n\n\n# NGINX (copy the config)\nCOPY nginx.conf /etc/nginx/nginx.conf\n\n# shiny-server.conf\n# shiny-server.conf will be automatically created with default values, which is totally fine\n\n# Copy docker entrypoint and shiny-server.sh, in which is stated how we start shiny and nginx\n# Moreover we copy the index.html to do a forward of the base directory to ./CRISPRAnalyzeR/, from which NGINX will do the rest\nCOPY docker-entrypoint.sh /\nCOPY index.html /srv/shiny-server\nRUN chmod +x /docker-entrypoint.sh\nRUN chmod +x /srv/shiny-server/index.html\n\nEXPOSE 8000\n\n# Add ENV for KiteMatic\n# this ENV vars are required to be able to change these settings using Kitematic\n\nENV websockets_behind_proxy=FALSE\nENV verbose_logfiles=FALSE\nENV COSMIC_database=\"CosmicMutantExport.tsv\"\nENV EnrichR_URL=\"http://amp.pharm.mssm.edu/Enrichr/\"\nENV EnrichR=TRUE\nENV bowtie_threads=2\nENV proxy_url=\nENV proxy_port=\nENV max_upload=4096\nENV downloadlogs=TRUE\n\nENTRYPOINT [\"/docker-entrypoint.sh\"]\n# finally run\nCMD [\"crispranalyzer\"]\n"
}