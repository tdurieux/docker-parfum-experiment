{
  "startTime": 1674641676255,
  "endTime": 1674641676332,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 27,
        "lineEnd": 27,
        "columnStart": 4,
        "columnEnd": 169
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 36,
        "lineEnd": 36,
        "columnStart": 4,
        "columnEnd": 151
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 21,
        "lineEnd": 21,
        "columnStart": 4,
        "columnEnd": 25
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "ARG BASEIMAGE\nFROM ${BASEIMAGE} AS dlls\nSHELL [\"cmd\", \"/S\", \"/C\"]\n\n# Include our sentinel so `ue4-docker clean` can find this intermediate image\nLABEL com.adamrehn.ue4-docker.sentinel=\"1\"\n\n# Create a directory in which to gather the DLL files we need\nRUN mkdir C:\\GatheredDlls\n\n# Install 7-Zip, curl, and Python using Chocolatey\n# (Note that these need to be separate RUN directives for `choco` to work)\nRUN powershell -NoProfile -ExecutionPolicy Bypass -Command \"iex ((New-Object System.Net.WebClient).DownloadString('https://chocolatey.org/install.ps1'))\"\nRUN choco install -y 7zip curl python\n\n# Copy the required DirectSound/DirectDraw and OpenGL DLL files from the host system (since these ship with Windows and don't have installers)\nCOPY *.dll C:\\GatheredDlls\\\n\n# Verify that the DLL files copied from the host can be loaded by the container OS\nARG HOST_VERSION\nRUN pip install --no-cache-dir pypiwin32\nCOPY copy.py verify-host-dlls.py C:\\\nRUN C:\\copy.py \"C:\\GatheredDlls\\*.dll\" C:\\Windows\\System32\\\nRUN python C:\\verify-host-dlls.py %HOST_VERSION% C:\\GatheredDlls\n\n# Gather the required DirectX runtime files, since Windows Server Core does not include them\nRUN curl -f --progress -L \"https://download.microsoft.com/download/8/4/A/84A35BF1-DAFE-4AE8-82AF-AD2AE20B6B14/directx_Jun2010_redist.exe\" --output %TEMP%\\directx_redist.exe\nRUN start /wait %TEMP%\\directx_redist.exe /Q /T:%TEMP% && `\n\texpand %TEMP%\\APR2007_xinput_x64.cab -F:xinput1_3.dll C:\\GatheredDlls\\ && `\n\texpand %TEMP%\\Jun2010_D3DCompiler_43_x64.cab -F:D3DCompiler_43.dll C:\\GatheredDlls\\ && `\n\texpand %TEMP%\\Feb2010_X3DAudio_x64.cab -F:X3DAudio1_7.dll C:\\GatheredDlls\\ && `\n\texpand %TEMP%\\Jun2010_XAudio_x64.cab -F:XAPOFX1_5.dll C:\\GatheredDlls\\ && `\n\texpand %TEMP%\\Jun2010_XAudio_x64.cab -F:XAudio2_7.dll C:\\GatheredDlls\\\n\n# Gather the Vulkan runtime library\nRUN curl -f --progress -L \"https://sdk.lunarg.com/sdk/download/1.1.73.0/windows/VulkanSDK-1.1.73.0-Installer.exe?Human=true\" --output %TEMP%\\VulkanSDK.exe\nRUN 7z e %TEMP%\\VulkanSDK.exe -oC:\\GatheredDlls -y RunTimeInstaller\\x64\\vulkan-1.dll\n\n# Gather pdbcopy.exe (needed for creating an Installed Build of the Engine)\nRUN choco install -y windbg\nRUN C:\\copy.py \"C:\\Program Files (x86)\\Windows Kits\\10\\Debuggers\\x64\\pdbcopy.exe\" C:\\GatheredDlls\\\n\n# Copy our gathered DLLs (and pdbcopy.exe) into a clean image to reduce image size\nFROM ${BASEIMAGE}\nSHELL [\"cmd\", \"/S\", \"/C\"]\nCOPY --from=dlls C:\\GatheredDlls\\ C:\\Windows\\System32\\\n\n# Add a sentinel label so we can easily identify all derived images, including intermediate images\nLABEL com.adamrehn.ue4-docker.sentinel=\"1\"\n\n# Install Chocolatey\nRUN powershell -NoProfile -ExecutionPolicy Bypass -Command \"iex ((New-Object System.Net.WebClient).DownloadString('https://chocolatey.org/install.ps1'))\"\n\n# Install the rest of our build prerequisites and clean up afterwards to minimise image size\nCOPY buildtools-exitcode.py copy.py copy-pdbcopy.py install-prerequisites.bat C:\\\nRUN C:\\install-prerequisites.bat\n"
}