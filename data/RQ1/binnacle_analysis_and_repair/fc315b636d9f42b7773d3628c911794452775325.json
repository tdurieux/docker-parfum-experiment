{
  "startTime": 1674243794981,
  "endTime": 1674243795009,
  "originalSmells": [
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 13,
        "lineEnd": 13,
        "columnStart": 4,
        "columnEnd": 15
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "#### Stage 1: Build the react application\nFROM node:12.4.0-alpine as build\n\n# Configure the main working directory inside the docker image.\n# This is the base directory used in any further RUN, COPY, and ENTRYPOINT\n# commands.\nWORKDIR /app\n\n# Copy the package.json as well as the package-lock.json and install\n# the dependencies. This is a separate step so the dependencies\n# will be cached unless changes to one of those two files\n# are made.\nCOPY package.json package-lock.json ./\nRUN npm install && npm cache clean --force;\n\n# Copy the main application\nCOPY . ./\n\n# Arguments\nARG REACT_APP_API_BASE_URL\nENV REACT_APP_API_BASE_URL=${REACT_APP_API_BASE_URL}\n\n# Build the application\nRUN npm run build\n\n#### Stage 2: Serve the React application from Nginx\nFROM nginx:1.17.0-alpine\n\n# Copy the react build from Stage 1\nCOPY --from=build /app/build /var/www\n\n# Copy our custom nginx config\nCOPY nginx.conf /etc/nginx/nginx.conf\n\n# Expose port 3000 to the Docker host, so we can access it\n# from the outside.\nEXPOSE 80\n\nENTRYPOINT [\"nginx\",\"-g\",\"daemon off;\"]\n"
}