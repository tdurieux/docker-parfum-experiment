{
  "startTime": 1674243280008,
  "endTime": 1674243280501,
  "originalSmells": [
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 8,
        "lineEnd": 8,
        "columnStart": 4,
        "columnEnd": 20
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "ARG BASE_IMG\n\nFROM golang as verify-stage\n\nRUN apt-get update \\\n && apt-get install -y --no-install-recommends \\\n    patch python3-pip python3 \\\n && rm -rf /var/lib/apt/lists/* \\\n && pip3 install --no-cache-dir ply\n\nARG VPP_REPO_URL\nARG VPP_COMMIT\n\nRUN git clone ${VPP_REPO_URL} /opt/vpp \\\n && cd /opt/vpp \\\n && git checkout ${VPP_COMMIT}\n\nCOPY scripts/genjsonapi.sh /opt/genjsonapi.sh\nRUN /opt/genjsonapi.sh\n\nWORKDIR /go/src/github.com/ligato/vpp-agent\n\nCOPY plugins/vpp/binapi plugins/vpp/binapi\nCOPY vendor vendor\nCOPY Makefile vpp.env ./\n\nRUN cp -r plugins/vpp/binapi /tmp/orig_binapi \\\n && make generate-binapi \\\n && diff -r plugins/vpp/binapi /tmp/orig_binapi\n\nFROM ${BASE_IMG} as dev-stage\n\nRUN apt-get update \\\n && apt-get install -y --no-install-recommends \\\n    autoconf automake build-essential ca-certificates curl gdb git \\\n    graphviz inetutils-traceroute iproute2 ipsec-tools iputils-ping \\\n    libapr1 libmbedcrypto1 libmbedtls10 libmbedx509-0 libtool \\\n    make mc nano netcat python software-properties-common sudo supervisor \\\n    telnet unzip wget python-cffi python3-cffi \\\n    gcc-8 g++-8 \\\n && rm -rf /var/lib/apt/lists/* \\\n && rm /usr/bin/gcc \\\n && rm /usr/bin/g++ \\\n && ln -s /usr/bin/gcc-8 /usr/bin/gcc \\\n && ln -s /usr/bin/g++-8 /usr/bin/g++\n\n# install Protobuf\nARG PROTOC_VERSION=3.6.1\nARG PROTOC_OS_ARCH=linux_x86_64\nRUN wget -q https://github.com/google/protobuf/releases/download/v${PROTOC_VERSION}/protoc-${PROTOC_VERSION}-${PROTOC_OS_ARCH}.zip \\\n && unzip protoc-${PROTOC_VERSION}-${PROTOC_OS_ARCH}.zip -d protoc3 \\\n && mv protoc3/bin/protoc /usr/local/bin \\\n && mv protoc3/include/google /usr/local/include \\\n && rm -rf protoc-${PROTOC_VERSION}-${PROTOC_OS_ARCH}.zip protoc3\n\nRUN mkdir -p /opt/vpp-agent/dev /opt/vpp-agent/plugin\n\nWORKDIR /opt/vpp-agent/dev\n\nARG VPP_REPO_URL\nARG VPP_COMMIT\n\nARG VPP_DEBUG_DEB\n\nRUN set -eux; \\\n    git clone \"${VPP_REPO_URL}\" vpp; \\\n    cd vpp; \\\n    git checkout \"${VPP_COMMIT}\"; \\\n    sed -i -e 's/vpp vom/vpp/g' build-data/platforms/vpp.mk; \\\n    export UNATTENDED=y; \\\n    make install-dep dpdk-install-dev; \\\n    if [ -n \"${VPP_DEBUG_DEB}\" ]; then \\\n        make build; \\\n        make -C build-root PLATFORM=vpp TAG=vpp_debug install-deb; \\\n    else \\\n        make build-release pkg-deb; \\\n    fi; \\\n    cd build-root; \\\n    dpkg -i *.deb; \\\n    rm -rf .ccache /var/lib/apt/lists/*; \\\n    find . -type f -name '*.o' -exec rm -rf '{}' \\;\n\n# install Go\nENV GOLANG_VERSION 1.11.8\nARG GOLANG_OS_ARCH=linux-amd64\nRUN wget -O go.tgz \"https://golang.org/dl/go${GOLANG_VERSION}.${GOLANG_OS_ARCH}.tar.gz\" \\\n && tar -C /usr/local -xzf go.tgz \\\n && rm go.tgz\n\nENV GOPATH /go\nENV PATH $GOPATH/bin:/usr/local/go/bin:$PATH\nRUN mkdir -p \"$GOPATH/src\" \"$GOPATH/bin\" \\\n && chmod -R 777 \"$GOPATH\"\n\n# install debugger\nRUN \\\n\tgo get -u github.com/go-delve/delve/cmd/dlv && dlv version; \\\n\tgo get -u github.com/golang/dep/cmd/dep && dep version;\n# copy configs\nCOPY \\\n    docker/dev/etcd.conf \\\n    docker/dev/vpp-ifplugin.conf \\\n    docker/dev/linux-ifplugin.conf \\\n    docker/dev/logs.conf \\\n ./\n\nCOPY docker/dev/vpp.conf /etc/vpp/vpp.conf\nCOPY docker/dev/supervisord.conf /etc/supervisord/supervisord.conf\n\n# copy scripts\nCOPY \\\n    docker/dev/exec_vpp.sh \\\n    docker/dev/exec_agent.sh \\\n    docker/dev/supervisord_kill.py \\\n /usr/bin/\n\nARG VERSION\nARG COMMIT\nARG DATE\n\n# copy & build agent\nCOPY . $GOPATH/src/github.com/ligato/vpp-agent\n\nRUN cd $GOPATH/src/github.com/ligato/vpp-agent \\\n && VERSION=$VERSION COMMIT=$COMMIT DATE=$DATE make install\n\nWORKDIR /\n\n# run supervisor as the default executable\nCMD rm -f /dev/shm/db /dev/shm/global_vm /dev/shm/vpe-api && \\\n    exec /usr/bin/supervisord -c /etc/supervisord/supervisord.conf\n"
}