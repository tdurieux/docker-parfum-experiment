{
  "startTime": 1674248076286,
  "endTime": 1674248077122,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 107,
        "lineEnd": 107,
        "columnStart": 4,
        "columnEnd": 280
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "#\n# RIOT Dockerfile\n#\n# the resulting image will contain everything needed to build RIOT for all\n# supported platforms. This is the largest build image, it takes about 1.5 GB in\n# total.\n#\n# Setup: (only needed once per Dockerfile change)\n# 1. install docker, add yourself to docker group, enable docker, relogin\n# 2. # docker build -t riotbuild .\n#\n# Usage:\n# 3. cd to riot root\n# 4. # docker run -i -t -u $UID -v $(pwd):/data/riotbuild riotbuild ./dist/tools/compile_test/compile_test.py\n\nFROM ubuntu:bionic\n\nMAINTAINER Joakim Nohlg√•rd <joakim.nohlgard@eistec.se>\n\nENV DEBIAN_FRONTEND noninteractive\n\n# The following package groups will be installed:\n# - upgrade all system packages to latest available version\n# - native platform development and build system functionality (about 400 MB installed)\n# - Cortex-M development (about 550 MB installed), through the gcc-arm-embedded PPA\n# - MSP430 development (about 120 MB installed)\n# - AVR development (about 110 MB installed)\n# - LLVM/Clang build environment (about 125 MB installed)\n# All apt files will be deleted afterwards to reduce the size of the container image.\n# This is all done in a single RUN command to reduce the number of layers and to\n# allow the cleanup to actually save space.\n# Total size without cleaning is approximately 1.525 GB (2016-03-08)\n# After adding the cleanup commands the size is approximately 1.497 GB\nRUN \\\n    dpkg --add-architecture i386 >&2 && \\\n    echo 'Upgrading all system packages to the latest available versions' >&2 && \\\n    apt-get update && apt-get -y dist-upgrade \\\n    && echo 'Installing native toolchain and build system functionality' >&2 && \\\n    apt-get -y --no-install-recommends install \\\n        automake \\\n        bsdmainutils \\\n        build-essential \\\n        ca-certificates \\\n        ccache \\\n        cmake \\\n        coccinelle \\\n        curl \\\n        cppcheck \\\n        doxygen \\\n        gcc-multilib \\\n        gdb \\\n        g++-multilib \\\n        git \\\n        graphviz \\\n        less \\\n        libpcre3 \\\n        libtool \\\n        m4 \\\n        parallel \\\n        pcregrep \\\n        python \\\n        python3 \\\n        python3-dev \\\n        python3-pip \\\n        p7zip \\\n        rsync \\\n        ssh-client \\\n        subversion \\\n        unzip \\\n        vim-common \\\n        wget \\\n        xsltproc \\\n    && echo 'Installing MSP430 toolchain' >&2 && \\\n    apt-get -y --no-install-recommends install \\\n        gcc-msp430 \\\n        msp430-libc \\\n    && echo 'Installing AVR toolchain' >&2 && \\\n    apt-get -y --no-install-recommends install \\\n        gcc-avr \\\n        binutils-avr \\\n        avr-libc \\\n    && echo 'Installing LLVM/Clang toolchain' >&2 && \\\n    apt-get -y --no-install-recommends install \\\n        llvm \\\n        clang \\\n        clang-tools \\\n    && echo 'Installing socketCAN' >&2 && \\\n    apt-get -y --no-install-recommends install \\\n        libsocketcan-dev:i386 \\\n        libsocketcan2:i386 \\\n    && echo 'Cleaning up installation files' >&2 && \\\n    apt-get clean && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*\n\n# install required python packages from file\nCOPY install_requirements.txt /tmp/install_requirements.txt\nCOPY requirements.txt /tmp/requirements.txt\nRUN echo 'Installing python3 packages' >&2 \\\n    && pip3 install --no-cache-dir -r /tmp/install_requirements.txt \\\n    && pip3 install --no-cache-dir -r /tmp/requirements.txt \\\n    && pip3 uninstall -y -r /tmp/install_requirements.txt \\\n    && rm /tmp/install_requirements.txt \\\n    && rm /tmp/requirements.txt\n\n# Install ARM GNU embedded toolchain\n# For updates, see https://developer.arm.com/open-source/gnu-toolchain/gnu-rm/downloads\nRUN echo 'Installing arm-none-eabi toolchain from arm.com' >&2 && \\\n    mkdir -p /opt && \\\n    curl -f -L -o /opt/gcc-arm-none-eabi.tar.bz2 'https://developer.arm.com/-/media/Files/downloads/gnu-rm/7-2018q2/gcc-arm-none-eabi-7-2018-q2-update-linux.tar.bz2?revision=bc2c96c0-14b5-4bb4-9f18-bceb4050fee7?product=GNU%20Arm%20Embedded%20Toolchain,64-bit,,Linux,7-2018-q2-update' && \\\n    echo '299ebd3f1c2c90930d28ab82e5d8d6c0 */opt/gcc-arm-none-eabi.tar.bz2' | md5sum -c && \\\n    tar -C /opt -jxf /opt/gcc-arm-none-eabi.tar.bz2 && \\\n    rm -f /opt/gcc-arm-none-eabi.tar.bz2 && \\\n    echo 'Removing documentation' >&2 && \\\n    rm -rf /opt/gcc-arm-none-eabi-*/share/doc\n    # No need to dedup, the ARM toolchain is already using hard links for the duplicated files\n\nENV PATH ${PATH}:/opt/gcc-arm-none-eabi-7-2018-q2-update/bin\n\n# Install MIPS binary toolchain\n# For updates: https://www.mips.com/develop/tools/codescape-mips-sdk/ (select \"Codescape GNU Toolchain\")\nRUN mkdir -p /opt && \\\n        wget -q https://codescape.mips.com/components/toolchain/2016.05-03/Codescape.GNU.Tools.Package.2016.05-03.for.MIPS.MTI.Bare.Metal.CentOS-5.x86_64.tar.gz -O- \\\n        | tar -C /opt -xz && \\\n    echo 'Removing documentation and translations' >&2 && \\\n    rm -rf /opt/mips-mti-elf/*/share/{doc,info,man,locale} && \\\n    echo 'Deduplicating binaries' >&2 && \\\n    cd /opt/mips-mti-elf/*/mips-mti-elf/bin && \\\n    for f in *; do rm \"$f\" && ln \"../../bin/mips-mti-elf-$f\" \"$f\"; done && cd -\n\nENV MIPS_ELF_ROOT /opt/mips-mti-elf/2016.05-03\nENV PATH ${PATH}:${MIPS_ELF_ROOT}/bin\n\n# Install RISC-V binary toolchain\nRUN mkdir -p /opt && \\\n        wget -q https://github.com/gnu-mcu-eclipse/riscv-none-gcc/releases/download/v7.2.0-2-20180110/gnu-mcu-eclipse-riscv-none-gcc-7.2.0-2-20180111-2230-centos64.tgz -O- \\\n        | tar -C /opt -xz && \\\n    echo 'Removing documentation' >&2 && \\\n    rm -rf /opt/gnu-mcu-eclipse/riscv-none-gcc/*/share/doc && \\\n    echo 'Deduplicating binaries' >&2 && \\\n    cd /opt/gnu-mcu-eclipse/riscv-none-gcc/*/riscv-none-embed/bin && \\\n    for f in *; do rm \"$f\" && ln \"../../bin/riscv-none-embed-$f\" \"$f\"; done && cd -\n\n# HACK download arch linux' flex dynamic library\nRUN wget -q https://sgp.mirror.pkgbuild.com/core/os/x86_64/flex-2.6.4-2-x86_64.pkg.tar.xz -O- \\\n        | tar -C / -xJ usr/lib/libfl.so.2.0.0\nRUN ldconfig\n\nENV PATH $PATH:/opt/gnu-mcu-eclipse/riscv-none-gcc/7.2.0-2-20180111-2230/bin\n\n# compile suid create_user binary\nCOPY create_user.c /tmp/create_user.c\nRUN gcc -DHOMEDIR=\\\"/data/riotbuild\\\" -DUSERNAME=\\\"riotbuild\\\" /tmp/create_user.c -o /usr/local/bin/create_user \\\n    && chown root:root /usr/local/bin/create_user \\\n    && chmod u=rws,g=x,o=- /usr/local/bin/create_user \\\n    && rm /tmp/create_user.c\n\n# Install complete ESP8266 toolchain in /opt/esp (146 MB after cleanup)\nRUN echo 'Installing ESP8266 toolchain' >&2 && \\\n    cd /opt && \\\n    git clone https://github.com/gschorcht/RIOT-Xtensa-ESP8266-toolchain.git esp && \\\n    cd esp && \\\n    git checkout -q df38b06 && \\\n    rm -rf .git\n\nENV PATH $PATH:/opt/esp/esp-open-sdk/xtensa-lx106-elf/bin\n\n# Install ESP32 toolchain in /opt/esp (181 MB after cleanup)\nRUN echo 'Installing ESP32 toolchain' >&2 && \\\n    mkdir -p /opt/esp && \\\n    cd /opt/esp && \\\n    git clone https://github.com/espressif/esp-idf.git && \\\n    cd esp-idf && \\\n    git checkout -q f198339ec09e90666150672884535802304d23ec && \\\n    git submodule update --init --recursive && \\\n    rm -rf .git* docs examples make tools && \\\n    rm -f add_path.sh CONTRIBUTING.rst Kconfig Kconfig.compiler && \\\n    cd components && \\\n    rm -rf app_trace app_update aws_iot bootloader bt coap console cxx \\\n           esp_adc_cal espcoredump esp_http_client esp-tls expat fatfs \\\n           freertos idf_test jsmn json libsodium log lwip mbedtls mdns \\\n           micro-ecc nghttp openssl partition_table pthread sdmmc spiffs \\\n           tcpip_adapter ulp vfs wear_levelling xtensa-debug-module && \\\n    find . -name '*.[csS]' -exec rm {} \\; && \\\n    cd /opt/esp && \\\n    git clone https://github.com/gschorcht/xtensa-esp32-elf.git && \\\n    cd xtensa-esp32-elf && \\\n    git checkout -q ca40fb4c219accf8e7c8eab68f58a7fc14cadbab\n\nENV PATH $PATH:/opt/esp/xtensa-esp32-elf/bin\n\n# Create working directory for mounting the RIOT sources\nRUN mkdir -m 777 -p /data/riotbuild\n\n# Set a global system-wide git user and email address\nRUN git config --system user.name \"riot\" && \\\n    git config --system user.email \"riot@example.com\"\n\n# Copy our entry point script (signal wrapper)\nCOPY run.sh /run.sh\nENTRYPOINT [\"/bin/bash\", \"/run.sh\"]\n\n# By default, run a shell when no command is specified on the docker command line\nCMD [\"/bin/bash\"]\n\nWORKDIR /data/riotbuild\n"
}