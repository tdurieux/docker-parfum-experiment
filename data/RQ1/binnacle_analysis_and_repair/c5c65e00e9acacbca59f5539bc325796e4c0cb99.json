{
  "startTime": 1674252472626,
  "endTime": 1674252473809,
  "originalSmells": [
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 149,
        "lineEnd": 149,
        "columnStart": 4,
        "columnEnd": 29
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 150,
        "lineEnd": 150,
        "columnStart": 4,
        "columnEnd": 21
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 203,
        "lineEnd": 203,
        "columnStart": 56,
        "columnEnd": 84
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 221,
        "lineEnd": 221,
        "columnStart": 4,
        "columnEnd": 57
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 235,
        "lineEnd": 235,
        "columnStart": 4,
        "columnEnd": 45
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 235,
        "lineEnd": 235,
        "columnStart": 49,
        "columnEnd": 101
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 240,
        "lineEnd": 240,
        "columnStart": 4,
        "columnEnd": 105
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 259,
        "lineEnd": 259,
        "columnStart": 4,
        "columnEnd": 61
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 260,
        "lineEnd": 260,
        "columnStart": 4,
        "columnEnd": 34
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 102,
        "lineEnd": 102,
        "columnStart": 22,
        "columnEnd": 67
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 124,
        "lineEnd": 144,
        "columnStart": 40,
        "columnEnd": 22
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 148,
        "lineEnd": 148,
        "columnStart": 4,
        "columnEnd": 56
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 148,
        "lineEnd": 148,
        "columnStart": 4,
        "columnEnd": 56
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 124,
        "lineEnd": 144,
        "columnStart": 40,
        "columnEnd": 22
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 148,
        "lineEnd": 148,
        "columnStart": 4,
        "columnEnd": 56
      }
    }
  ],
  "repairedSmells": [
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 148,
        "lineEnd": 148,
        "columnStart": 4,
        "columnEnd": 80
      }
    }
  ],
  "repairedDockerfile": "FROM nvidia/cuda:8.0-cudnn6-devel-ubuntu16.04\n\n\nENV CUDA_ARCH_BIN \"30 35 50 52 60\"\nENV CUDA_ARCH_PTX \"60\"\n\nRUN rm -rf /var/lib/apt/lists/*\nRUN apt-get clean\n\nRUN apt-get update && apt-get install --no-install-recommends  -y \\\n    git cmake build-essential libgoogle-glog-dev libgflags-dev libeigen3-dev libopencv-dev libcppnetlib-dev libboost-dev libboost-all-dev libboost-iostreams-dev libcurl4-openssl-dev protobuf-compiler libopenblas-dev libhdf5-dev libprotobuf-dev libleveldb-dev libsnappy-dev liblmdb-dev libutfcpp-dev wget unzip  \\\n    python \\\n    python-dev \\\n    python2.7-dev \\\n    python3-dev \\\n    python-virtualenv \\\n    python-wheel \\\n\tpython-tk \\\n    pkg-config \\\n    libopenblas-base \\\n    python-numpy \\\n    python-scipy \\\n    # requirements for keras\n    python-h5py \\\n    python-yaml \\\n    python-pydot \\\n    python-nose \\\n\tpython-h5py \\\n\tpython-skimage \\\n\tpython-matplotlib \\\n\tpython-pandas \\\n\tpython-sklearn \\\n\tpython-sympy \\\n\tpython-joblib \\\n        build-essential \\\n        software-properties-common \\\n        g++ \\\n        git \\\n        wget \\\n        tar \\\n        git \\\n        imagemagick \\\n        curl \\\n\t\tbc \\\n\t\thtop\\\n\t\tcurl \\\n\t\tg++ \\\n\t\tgfortran \\\n\t\tgit \\\n\t\tlibffi-dev \\\n\t\tlibfreetype6-dev \\\n\t\tlibhdf5-dev \\\n\t\tlibjpeg-dev \\\n\t\tliblcms2-dev \\\n\t\tlibopenblas-dev \\\n\t\tliblapack-dev \\\n\t\tlibssl-dev \\\n\t\tlibtiff5-dev \\\n\t\tlibwebp-dev \\\n\t\tlibzmq3-dev \\\n\t\tnano \\\n\t\tunzip \\\n\t\tvim \\\n\t\tzlib1g-dev \\\n\t\tqt5-default \\\n\t\tlibvtk6-dev \\\n\t\tzlib1g-dev \\\n\t\tlibjpeg-dev \\\n\t\tlibwebp-dev \\\n\t\tlibpng-dev \\\n\t\tlibtiff5-dev \\\n\t\tlibjasper-dev \\\n\t\tlibopenexr-dev \\\n\t\tlibgdal-dev \\\n\t\tlibdc1394-22-dev \\\n\t\tlibavcodec-dev \\\n\t\tlibavformat-dev \\\n\t\tlibswscale-dev \\\n\t\tlibtheora-dev \\\n\t\tlibvorbis-dev \\\n\t\tlibxvidcore-dev \\\n\t\tlibx264-dev \\\n\t\tyasm \\\n\t\tlibopencore-amrnb-dev \\\n\t\tlibopencore-amrwb-dev \\\n\t\tlibv4l-dev \\\n\t\tlibxine2-dev \\\n\t\tlibtbb-dev \\\n\t\tlibeigen3-dev \\\n\t\tdoxygen \\\n\t\tless \\\n        htop \\\n        procps \\\n        vim-tiny \\\n        libgraphviz-dev \\\n\t\t&& \\\n\tapt-get clean && \\\n\tapt-get autoremove && \\\n\trm -rf /var/lib/apt/lists/* && \\\n\tupdate-alternatives --set libblas.so.3 /usr/lib/openblas-base/libblas.so.3\n\n\nRUN apt-get update && apt-get install --no-install-recommends -y software-properties-common && \\\n    apt-get install -y --no-install-recommends \\\n        build-essential \\\n        clinfo \\\n        cmake \\\n        git \\\n        libfftw3-dev \\\n        libfontconfig1-dev \\\n        libfreeimage-dev \\\n        liblapack-dev \\\n        liblapacke-dev \\\n        libopenblas-dev \\\n        ocl-icd-opencl-dev \\\n        opencl-headers \\\n        wget \\\n        xorg-dev && \\\nrm -rf /var/lib/apt/lists/*\n\n\n\n\n# Install caffe dependencies\nRUN chmod 777 /tmp && apt-get update && apt-get install --no-install-recommends -y \\\n  git \\\n  wget \\\n  cmake \\\n  curl \\\n  vim \\\n  libatlas-base-dev \\\n  libatlas-dev \\\n  libopencv-dev \\\n  libprotobuf-dev \\\n  libgoogle-glog-dev \\\n  libgflags-dev \\\n  protobuf-compiler \\\n  libhdf5-dev \\\n  libleveldb-dev \\\n  liblmdb-dev \\\n  libsnappy-dev \\\n  python-dev \\\n  python-pip \\\n  python-numpy \\\n  gfortran > /dev/null && rm -rf /var/lib/apt/lists/*;\n\nWORKDIR /\n\nRUN apt-get -qyy --no-install-recommends install python2.7 python-pip python-dev && rm -rf /var/lib/apt/lists/*;\nRUN pip install --no-cache-dir --upgrade pip\nRUN pip install --no-cache-dir numpy\n\n##################################################\n\n# Install dependencies.\nRUN apt-get update && apt-get install -y --no-install-recommends \\\n        ca-certificates \\\n        cmake \\\n        git \\\n        libgflags-dev \\\n        libgoogle-glog-dev \\\n        libprotobuf-dev \\\n        pkg-config \\\n        protobuf-compiler \\\n        python-yaml \\\n        wget && \\\n    rm -rf /var/lib/apt/lists/*\n\n\nRUN pip --no-cache-dir install numpy pandas sklearn matplotlib seaborn ipython jupyter pyyaml h5py ipykernel\n\n\n# Install OpenCV 3.2.0 with CUDA support\nRUN git clone --depth 1 -b 3.2.0 https://github.com/Itseez/opencv.git /opencv && \\\n    cd /opencv && \\\n    cmake -DCMAKE_BUILD_TYPE=Release -DBUILD_SHARED_LIBS=ON \\\n          -DWITH_CUDA=ON -DCUDA_ARCH_BIN=\"${CUDA_ARCH}\" -DCUDA_ARCH_PTX=\"${CUDA_ARCH}\" \\\n          -DWITH_JPEG=ON -DBUILD_JPEG=ON -DWITH_PNG=ON -DBUILD_PNG=ON \\\n          -DBUILD_TESTS=OFF -DBUILD_EXAMPLES=OFF -DWITH_FFMPEG=OFF -DWITH_GTK=OFF \\\n          -DWITH_OPENCL=OFF -DWITH_QT=OFF -DWITH_V4L=OFF -DWITH_JASPER=OFF \\\n          -DWITH_1394=OFF -DWITH_TIFF=OFF -DWITH_OPENEXR=OFF -DWITH_IPP=OFF -DWITH_WEBP=OFF \\\n          -DBUILD_opencv_superres=OFF -DBUILD_opencv_java=OFF -DBUILD_opencv_python2=OFF \\\n          -DBUILD_opencv_videostab=OFF -DBUILD_opencv_apps=OFF -DBUILD_opencv_flann=OFF \\\n          -DBUILD_opencv_ml=OFF -DBUILD_opencv_photo=OFF -DBUILD_opencv_shape=OFF \\\n          -DBUILD_opencv_cudabgsegm=OFF -DBUILD_opencv_cudaoptflow=OFF -DBUILD_opencv_cudalegacy=OFF \\\n          -DCUDA_NVCC_FLAGS=\"--default-stream per-thread -O3\" -DCUDA_FAST_MATH=ON && \\\n    make -j\"$(nproc)\" install && ldconfig && \\\n    rm -rf /opencv\n\n##################################################\n\n# Install NCCL for multi-GPU communication\nRUN wget https://github.com/NVIDIA/nccl/releases/download/v1.2.3-1%2Bcuda8.0/libnccl1_1.2.3-1.cuda8.0_amd64.deb && \\\n  dpkg -i libnccl1_1.2.3-1.cuda8.0_amd64.deb && \\\n  rm libnccl1_1.2.3-1.cuda8.0_amd64.deb && \\\n  wget https://github.com/NVIDIA/nccl/releases/download/v1.2.3-1%2Bcuda8.0/libnccl-dev_1.2.3-1.cuda8.0_amd64.deb && \\\n  dpkg -i libnccl-dev_1.2.3-1.cuda8.0_amd64.deb && \\\n  rm libnccl-dev_1.2.3-1.cuda8.0_amd64.deb\n\n\n\n# Clone Caffe repo and move into it\nRUN cd /root && git clone https://github.com/BVLC/caffe.git && cd caffe && \\\n\tcat python/requirements.txt | xargs -n1 pip install && pip install --no-cache-dir -v thrift==0.9.3\n\nRUN cd /root/caffe && \\\n# Make and move into build directory\n  mkdir build && cd build && \\\n# CMake\n  cmake .. && \\\n# Make\n  make -j\"$(nproc)\" all && \\\n  make install\n\n# Add to Python path\nENV PYTHONPATH=/root/caffe/python:$PYTHONPATH\n# Add caffe to path\nENV PATH=/root/caffe/build/tools:$PATH\n\nRUN pip --no-cache-dir install tensorflow-gpu\n# Keras\nRUN pip install --no-cache-dir git+https://github.com/fchollet/keras.git\n\n\nWORKDIR /root/\n\nENV PATH=/usr/local/cuda-8.0/bin:$PATH\nENV LD_LIBRARY_PATH=/usr/local/cuda-8.0/lib64:$LD_LIBRARY_PATH\nENV LD_LIBRARY_PATH=/usr/local/lib:$LD_LIBRARY_PATH\nENV PATH=/usr/local/nvidia/bin:/usr/local/cuda/bin:${PATH}\nENV CUDA_BIN_PATH=/usr/local/cuda\nENV CUDA_TOOLKIT_ROOT_DIR=/usr/local/cuda-8.0\n\n\n\nRUN pip install --no-cache-dir -v scikit-learn==0.18 pycuda && pip install --no-cache-dir opencv-python pycrypto astropy autograd\n\n# Torch\n\n# RUN pip install http://download.pytorch.org/whl/cu80/torch-0.2.0.post3-cp35-cp35m-manylinux1_x86_64.whl\nRUN pip2 install --no-cache-dir http://download.pytorch.org/whl/cu80/torch-0.2.0.post2-cp27-cp27mu-manylinux1_x86_64.whl\n\n# Build PyTorch from source\n# RUN git clone https://github.com/pytorch/pytorch.git \\\n#  && cd pytorch \\\n#  && git checkout 4eb448a051a1421de1dda9bd2ddfb34396eb7287 \\\n#  && TORCH_CUDA_ARCH_LIST=\"3.5 5.2 6.0 6.1+PTX\" \\\n#     TORCH_NVCC_FLAGS=\"-Xfatbin -compress-all\" \\\n#     python setup.py install \\\n#  && rm -rf pytorch\n\n# Build torch-vision from source\n# RUN git clone https://github.com/pytorch/vision.git \\\n#  && cd vision \\\n#  && git checkout 83263d8571c9cdd46f250a7986a5219ed29d19a1 \\\n#  && python setup.py install \\\n#  && rm -rf vision\n\n# Install Torchnet, a high-level framework for PyTorch\nRUN pip install --no-cache-dir git+https://github.com/pytorch/tnt.git@master\nRUN pip install --no-cache-dir torchvision psutil\n\n\nRUN python -m ipykernel.kernelspec\nRUN python2 -m ipykernel.kernelspec --user\nRUN jupyter notebook --allow-root --generate-config -y\n\nCOPY jupyter_notebook_config.py /root/.jupyter/\n# Jupyter has issues with being run directly: https://github.com/ipython/ipython/issues/7062\nCOPY run_jupyter.sh /root/\nWORKDIR \"/root/\"\nRUN chmod +x run_jupyter.sh\nRUN jupyter nbextension enable --py --sys-prefix widgetsnbextension\n\n#ENV LD_LIBRARY_PATH=/usr/local/lib:/usr/local/lib/root\n\n# Expose Ports\nEXPOSE 6006 3838 8787 8888 8786 9786 8788 5432 8000 7842\n"
}