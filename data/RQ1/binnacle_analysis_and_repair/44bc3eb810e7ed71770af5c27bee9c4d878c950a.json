{
  "startTime": 1674242658436,
  "endTime": 1674242659424,
  "originalSmells": [
    {
      "rule": "wgetUseHttpsUrl",
      "position": {
        "lineStart": 50,
        "lineEnd": 50,
        "columnStart": 4,
        "columnEnd": 69
      }
    },
    {
      "rule": "wgetUseHttpsUrl",
      "position": {
        "lineStart": 132,
        "lineEnd": 132,
        "columnStart": 4,
        "columnEnd": 84
      }
    },
    {
      "rule": "wgetUseHttpsUrl",
      "position": {
        "lineStart": 161,
        "lineEnd": 161,
        "columnStart": 2,
        "columnEnd": 101
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 52,
        "lineEnd": 52,
        "columnStart": 4,
        "columnEnd": 35
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 95,
        "lineEnd": 95,
        "columnStart": 4,
        "columnEnd": 97
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 124,
        "lineEnd": 124,
        "columnStart": 4,
        "columnEnd": 60
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 134,
        "lineEnd": 134,
        "columnStart": 4,
        "columnEnd": 33
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 162,
        "lineEnd": 162,
        "columnStart": 2,
        "columnEnd": 31
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 3,
        "lineEnd": 36,
        "columnStart": 22,
        "columnEnd": 21
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 37,
        "lineEnd": 46,
        "columnStart": 4,
        "columnEnd": 19
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM nvidia/cuda:8.0-cudnn6-devel-ubuntu16.04\n\n# install base system\nRUN apt-get update && apt-get install -y --no-install-recommends \\\r\n        autotools-dev \\\r\n        build-essential \\\r\n        cmake \\\r\n        git \\\r\n        gfortran-multilib \\\r\n        libavcodec-dev \\\r\n        libavformat-dev \\\r\n        libjasper-dev \\\r\n        libjpeg-dev \\\r\n        libpng-dev \\\r\n        liblapacke-dev \\\r\n        libswscale-dev \\\r\n        libtiff-dev \\\r\n        pkg-config \\\r\n        wget \\\r\n        zlib1g-dev \\\r\n        # Protobuf\r\n        ca-certificates \\\r\n        curl \\\r\n        unzip \\\r\n        # For Kaldi\r\n        python-dev \\\r\n        automake \\\r\n        libtool \\\r\n        autoconf \\\r\n        subversion \\\r\n        # For Kaldi's dependencies\r\n        libapr1 libaprutil1 libltdl-dev libltdl7 libserf-1-1 libsigsegv2 libsvn1 m4 \\\r\n        # For Java Bindings\r\n        openjdk-9-jdk-headless \\\r\n        # For SWIG\r\n        libpcre3-dev \\\r\n        libpcre++-dev && \\\n    apt-get install -y --no-install-recommends \\\r\n        # Infiniband/RDMA\r\n        cpio \\\r\n        libmlx4-1 \\\r\n        libmlx5-1 \\\r\n        librdmacm1 \\\r\n        libibverbs1 \\\r\n        libmthca1 \\\r\n        libdapl2 \\\r\n        dapl2-utils && rm -rf /var/lib/apt/lists/*;\n\n# build and install libzip, cub, boost, openblas, opencv, protobuf\nRUN LIBZIP_VERSION=1.1.3 && \\\n    wget -q -O - https://nih.at/libzip/libzip-${LIBZIP_VERSION}.tar.gz | tar -xzf - && \\\n    cd libzip-${LIBZIP_VERSION} && \\\n    ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --prefix=/usr/local && \\\n    make -j\"$(nproc)\" install && \\\n    ldconfig /usr/local/lib && \\\n    cd .. && \\\n    rm -rf /libzip-${LIBZIP_VERSION} && \\\n    # boost\r\n    BOOST_VERSION=1_60_0 && \\\n    BOOST_DOTTED_VERSION=$(echo $BOOST_VERSION | tr _ .) && \\\n    wget -q -O - https://sourceforge.net/projects/boost/files/boost/${BOOST_DOTTED_VERSION}/boost_${BOOST_VERSION}.tar.gz/download | tar -xzf - && \\\n    cd boost_${BOOST_VERSION} && \\\n    ./bootstrap.sh --prefix=/usr/local --with-libraries=filesystem,system,test && \\\n    ./b2 -d0 -j\"$(nproc)\" install && \\\n    ldconfig /usr/local/lib && \\\n    cd .. && \\\n    rm -rf /boost_${BOOST_VERSION} && \\\n    # cub\r\n    wget -q -O - https://github.com/NVlabs/cub/archive/1.4.1.tar.gz | tar -C /usr/local -xzf - && \\\n    # openblas\r\n    OPENBLAS_VERSION=0.2.19 && \\\n    wget -q -O - https://github.com/xianyi/OpenBLAS/archive/v${OPENBLAS_VERSION}.tar.gz | tar -xzf - && \\\n    cd OpenBLAS-${OPENBLAS_VERSION} && \\\n    make -j\"$(nproc)\" USE_OPENMP=1 | tee make.log && \\\n    grep -qF 'OpenBLAS build complete. (BLAS CBLAS LAPACK LAPACKE)' make.log && \\\n    grep -qF 'Use OpenMP in the multithreading.' make.log && \\\n    make PREFIX=/usr/local/openblas install && \\\n    ldconfig /usr/local/openblas && \\\n    cd .. && \\\n    rm -rf /OpenBLAS-${OPENBLAS_VERSION} && \\\n    # opencv\r\n    OPENCV_VERSION=3.1.0 && \\\n    wget -q -O - https://github.com/opencv/opencv/archive/${OPENCV_VERSION}.tar.gz | tar -xzf - && \\\n    cd opencv-${OPENCV_VERSION} && \\\n    cmake -DWITH_CUDA=OFF -DCMAKE_BUILD_TYPE=RELEASE -DCMAKE_INSTALL_PREFIX=/usr/local/opencv-${OPENCV_VERSION} . && \\\n    make -j\"$(nproc)\" install && \\\n    ldconfig /usr/local/lib && \\\n    cd .. && \\\n    rm -rf /opencv-${OPENCV_VERSION} && \\\n    # protocol buffers\r\n    PROTOBUF_VERSION=3.1.0 \\\r\n    PROTOBUF_STRING=protobuf-$PROTOBUF_VERSION && \\\n    wget -O - --no-verbose https://github.com/google/protobuf/archive/v${PROTOBUF_VERSION}.tar.gz | tar -xzf - && \\\n    cd $PROTOBUF_STRING && \\\n    ./autogen.sh && \\\n    ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" CFLAGS=-fPIC CXXFLAGS=-fPIC --disable-shared --prefix=/usr/local/$PROTOBUF_STRING && \\\n    make -j $(nproc) install && \\\n    cd .. && \\\n    rm -rf $PROTOBUF_STRING\n\n# set env vars\nENV KALDI_VERSION=c024e8aa\nENV MKLML_VERSION=mklml_lnx_2018.0.1.20171007\nENV PATH=/root/anaconda3/envs/cntk-py36/bin:/usr/local/bin:/cntk/build-mkl/gpu/release/bin:${PATH} \\\r\n    KALDI_PATH=/usr/local/kaldi-$KALDI_VERSION \\\r\n    BLAS=/usr/local/openblas/lib/libopenblas.so \\\r\n    LAPACK=/usr/local/openblas/lib/libopenblas.so \\\r\n    MKL_PATH=/usr/local/CNTKCustomMKL \\\r\n    PYTHONPATH=/cntk/bindings/python:$PYTHONPATH \\\r\n    LD_LIBRARY_PATH=/usr/local/openblas/lib:/cntk/bindings/python/cntk/libs:$LD_LIBRARY_PATH\n\n# install cntk custom mkl, kaldi, swig and anaconda\nRUN mkdir ${MKL_PATH} && \\\r\n    wget --no-verbose -O - https://github.com/01org/mkl-dnn/releases/download/v0.11/${MKLML_VERSION}.tgz | \\\r\n    tar -xzf - -C ${MKL_PATH} && \\\r\n    # kaldi\r\n    mkdir $KALDI_PATH && \\\r\n    wget --no-verbose -O - https://github.com/kaldi-asr/kaldi/archive/$KALDI_VERSION.tar.gz | tar -xzf - --strip-components=1 -C $KALDI_PATH && \\\r\n    cd $KALDI_PATH/tools && \\\r\n    perl -pi -e 's/^# (OPENFST_VERSION = 1.4.1)$/\\1/' Makefile && \\\r\n    #/bin/bash extras/check_dependencies.sh && \\\r\n    #make -j $(nproc) all && \\\r\n    make -j $(nproc) sph2pipe atlas sclite openfst && \\\r\n    cd ../src && \\\n    ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --openblas-root=/usr/local/openblas --shared && \\\n    make -j $(nproc) depend && \\\n    make -j $(nproc) all && \\\n    find $KALDI_PATH -name '*.o' -print0 | xargs -0 rm && \\\n    for dir in $KALDI_PATH/src/*bin; do make -C $dir clean; done && \\\n    # SWIG\r\n    SWIG_VERSION=3.0.10 && \\\n    cd /root && \\\n    wget -q https://prdownloads.sourceforge.net/swig/swig-${SWIG_VERSION}.tar.gz -O - | tar xvfz - && \\\n    cd swig-${SWIG_VERSION} && \\\n    ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --without-alllang && \\\n    make -j$(nproc) && \\\n    make install && \\\n    cd .. && \\\n    rm -rf swig-${SWIG_VERSION} && \\\n    # Anaconda\r\n    wget -q https://repo.continuum.io/archive/Anaconda3-4.4.0-Linux-x86_64.sh && \\\n    bash Anaconda3-4.4.0-Linux-x86_64.sh -b && \\\n    rm -f Anaconda3-4.4.0-Linux-x86_64.sh && \\\n    # set paths for CNTK\r\n    mkdir -p /usr/local/cudnn/cuda/include && \\\n    ln -s /usr/include/cudnn.h /usr/local/cudnn/cuda/include/cudnn.h && \\\n    mkdir -p /usr/local/cudnn/cuda/lib64 && \\\n    ln -s /etc/alternatives/libcudnn_so /usr/local/cudnn/cuda/lib64/libcudnn.so && \\\n    ln -s /usr/local/cuda/lib64/stubs/libnvidia-ml.so /usr/local/cuda/lib64/stubs/libnvidia-ml.so.1 && \\\n    # update ldconfig\r\n    ldconfig /usr/local/lib\n\n# set cntk dir\nWORKDIR /cntk\n\n# add intel mpi library and build cntk\nENV MANPATH=/usr/share/man:/usr/local/man \\\r\n    COMPILERVARS_ARCHITECTURE=intel64 \\\r\n    COMPILERVARS_PLATFORM=linux \\\r\n    INTEL_MPI_PATH=/opt/intel/compilers_and_libraries/linux/mpi\nRUN cd /tmp && \\\n  wget -q 'https://registrationcenter-download.intel.com/akdlm/irc_nas/tec/11595/l_mpi_2017.3.196.tgz' && \\\n  tar zxvf l_mpi_2017.3.196.tgz && \\\n  sed -i -e 's/^ACCEPT_EULA=decline/ACCEPT_EULA=accept/g' /tmp/l_mpi_2017.3.196/silent.cfg && \\\n  sed -i -e 's|^#ACTIVATION_LICENSE_FILE=|ACTIVATION_LICENSE_FILE=/tmp/l_mpi_2017.3.196/USE_SERVER.lic|g' /tmp/l_mpi_2017.3.196/silent.cfg && \\\n  sed -i -e 's/^ACTIVATION_TYPE=exist_lic/ACTIVATION_TYPE=license_server/g' /tmp/l_mpi_2017.3.196/silent.cfg && \\\n  cd /tmp/l_mpi_2017.3.196 && \\\n  ./install.sh -s silent.cfg && \\\n  cd .. && rm l_mpi_2017.3.196.tgz\n\n# cntk makefiles use non-standard mpic++, symlink to mpicxx\nRUN ln -s ${INTEL_MPI_PATH}/${COMPILERVARS_ARCHITECTURE}/bin/mpicxx ${INTEL_MPI_PATH}/${COMPILERVARS_ARCHITECTURE}/bin/mpic++ && \\\r\n    # build cntk\r\n    CNTK_VERSION=v2.3 && \\\r\n    cd /cntk && \\\r\n    git clone --depth=1 --recursive -b ${CNTK_VERSION} --single-branch https://github.com/Microsoft/CNTK.git .\n\n# add cast in /cntk/Source/CNTKv2LibraryDll/Trainer.cpp to prevent build issue\nRUN sed -i 's|, unit)|, (int)unit)|g' /cntk/Source/CNTKv2LibraryDll/Trainer.cpp\n\n# set Anaconda environment\nRUN /root/anaconda3/bin/conda env create -p /root/anaconda3/envs/cntk-py36/ \\\r\n        --file /cntk/Scripts/install/linux/conda-linux-cntk-py36-environment.yml && \\\r\n    # source intel mpi vars\r\n    . /opt/intel/bin/compilervars.sh && \\\r\n    . /opt/intel/compilers_and_libraries/linux/mpi/bin64/mpivars.sh && \\\r\n    # build gpu-mkl only\r\n    CONFIGURE_OPTS=\"\\\r\n      --1bitsgd=yes \\\r\n      --with-mpi=${INTEL_MPI_PATH}/${COMPILERVARS_ARCHITECTURE} \\\r\n      --with-cuda=/usr/local/cuda \\\r\n      --with-gdk-include=/usr/local/cuda/include \\\r\n      --with-gdk-nvml-lib=/usr/local/cuda/lib64/stubs \\\r\n      --with-kaldi=${KALDI_PATH} \\\r\n      --with-py36-path=/root/anaconda3/envs/cntk-py36 \\\r\n      --with-cudnn=/usr/local/cudnn\" && \\\r\n    mkdir -p build-mkl/gpu/release && \\\r\n    cd build-mkl/gpu/release && \\\r\n    ../../../configure $CONFIGURE_OPTS --with-mkl=${MKL_PATH}/${MKLML_VERSION} && \\\r\n    make -j\"$(nproc)\"\n\n# clean up\nRUN rm -rf /cntk/build-mkl/gpu/release/.build && \\\r\n    rm -rf /cntk/.git && \\\r\n    /root/anaconda3/bin/conda clean --all --yes && \\\r\n    # create activate script\r\n    echo \"source /root/anaconda3/bin/activate /root/anaconda3/envs/cntk-py36\" > /cntk/activate-cntk && \\\r\n    # add cntk activate to root bashrc\r\n    echo \"source /cntk/activate-cntk\" >> /root/.bashrc && \\\r\n    # add LD_LIBRARY_PATH to root bashrc\r\n    echo LD_LIBRARY_PATH=${LD_LIBRARY_PATH}:'$LD_LIBRARY_PATH' >> /root/.bashrc && \\\r\n    # remove intel components\r\n    rm -rf /opt/intel\n"
}