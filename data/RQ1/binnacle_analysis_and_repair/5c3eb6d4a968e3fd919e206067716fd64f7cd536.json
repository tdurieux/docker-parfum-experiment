{
  "startTime": 1674245314298,
  "endTime": 1674245314633,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 17,
        "lineEnd": 17,
        "columnStart": 4,
        "columnEnd": 116
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 20,
        "lineEnd": 20,
        "columnStart": 4,
        "columnEnd": 53
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 18,
        "lineEnd": 18,
        "columnStart": 4,
        "columnEnd": 43
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 10,
        "lineEnd": 15,
        "columnStart": 4,
        "columnEnd": 73
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 64,
        "lineEnd": 64,
        "columnStart": 4,
        "columnEnd": 38
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM ubuntu:18.04 as builder\n\n# ENV LIBVIPS_VERSION 8.7.3\nENV LIBVIPS_VERSION 8.6.2\nENV DEP_VERSION v0.5.1\nENV GOLANG_VERSION 1.12.1\n\n# Installs libvips + required libraries\nRUN \\\n    apt-get update && \\\n    DEBIAN_FRONTEND=noninteractive apt-get --no-install-recommends install -y \\\n    automake build-essential curl \\\n    gobject-introspection gtk-doc-tools libglib2.0-dev libjpeg-turbo8-dev libpng-dev \\\n    libwebp-dev libtiff5-dev libgif-dev libexif-dev libxml2-dev libpoppler-glib-dev \\\n    swig libmagickwand-dev libpango1.0-dev libmatio-dev libopenslide-dev libcfitsio-dev \\\n    libgsf-1-dev fftw3-dev liborc-0.4-dev librsvg2-dev swig libbrotli-dev && \\\n    cd /tmp && \\\n    curl -f -OL https://github.com/libvips/libvips/releases/download/v${LIBVIPS_VERSION}/vips-${LIBVIPS_VERSION}.tar.gz && \\\n    tar zvxf vips-${LIBVIPS_VERSION}.tar.gz && \\\n    cd /tmp/vips-${LIBVIPS_VERSION} && \\\n    ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --enable-debug=no --without-python $1 && \\\n    make && \\\n    make install && \\\n    ldconfig && \\\n    apt-get autoremove -y && \\\n    apt-get autoclean && \\\n    apt-get clean && \\\n    rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/* && rm vips-${LIBVIPS_VERSION}.tar.gz\n\n# gcc for cgo\nRUN apt-get update && apt-get install -y \\\n    gcc curl git libc6-dev make ca-certificates \\\n    --no-install-recommends \\\n  && rm -rf /var/lib/apt/lists/*\n\nENV GOLANG_DOWNLOAD_URL https://golang.org/dl/go$GOLANG_VERSION.linux-amd64.tar.gz\n\nRUN curl -fsSL --insecure \"$GOLANG_DOWNLOAD_URL\" -o golang.tar.gz \\\n  && tar -C /usr/local -xzf golang.tar.gz \\\n  && rm golang.tar.gz\n\nENV WORKDIR /go\nENV PATH $WORKDIR/bin:/usr/local/go/bin:$PATH\n# ENV GOROOT /go:$GOROOT\n\nRUN mkdir -p \"$WORKDIR/src\" \"$WORKDIR/bin\" && chmod -R 777 \"$WORKDIR\"\nWORKDIR $WORKDIR\n# RUN curl -fsSL -o /usr/local/bin/dep https://github.com/golang/dep/releases/download/$DEP_VERSION/dep-linux-amd64 && chmod +x /usr/local/bin/dep\nADD . /go/src/github.com/aldor007/mort\n\n# RUN cd /go/src/github.com/aldor007/mort &&  dep ensure -vendor-only\nRUN cd /go/src/github.com/aldor007/mort; go build -o /go/mort cmd/mort/mort.go;\n\nFROM ubuntu:18.04\n\nRUN \\\n\n    apt-get update && \\\n    DEBIAN_FRONTEND=noninteractive apt-get install --no-install-recommends -y \\\n    libglib2.0-0 libjpeg-turbo8 libpng16-16 libopenexr22 \\\n    libwebp6 libtiff5 libgif7 libexif12 libxml2 libpoppler-glib8 \\\n    libmagickwand-6.q16hdri-3 libmagickcore-6.q16-3-extra  libmagickcore-6.q16hdri-3 \\\n    libpango1.0-0 libmatio4 libopenslide0 libwebpmux3 \\\n    libgsf-1-114 fftw3  liborc-0.4 librsvg2-2 libcfitsio-bin libbrotli1 && \\\n    apt-get install --no-install-recommends -y ca-certificates && \\\n    # Clean up\n    apt-get autoremove -y && \\\n    apt-get autoclean && \\\n    apt-get clean && \\\n    ldconfig /usr/local/lib && \\\n    rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*\n\nRUN mkdir -p /etc/mort/\n# clean up\nRUN rm -rf /go/src; rm -rf /usr/share/; rm -rf /usr/include/\n\nCOPY --from=builder /usr/local/lib /usr/local/lib\nRUN ldconfig\nCOPY --from=builder /go/mort /go/mort\nCOPY --from=builder /go/src/github.com/aldor007/mort/configuration/config.yml /etc/mort/mort.yml\nRUN /go/mort -version\n# add mime types\nADD http://svn.apache.org/viewvc/httpd/httpd/branches/2.2.x/docs/conf/mime.types?view=co /etc/mime.types\n\n# Run the outyet command by default when the container starts.\nENTRYPOINT [\"/go/mort\"]\n\n# Expose the server TCP port\nEXPOSE 8080 8081\n"
}