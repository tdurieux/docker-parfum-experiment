{
  "startTime": 1674243656277,
  "endTime": 1674243656763,
  "originalSmells": [
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 191,
        "lineEnd": 191,
        "columnStart": 4,
        "columnEnd": 41
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 9,
        "lineEnd": 19,
        "columnStart": 4,
        "columnEnd": 27
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 64,
        "lineEnd": 64,
        "columnStart": 8,
        "columnEnd": 79
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 66,
        "lineEnd": 66,
        "columnStart": 8,
        "columnEnd": 54
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 67,
        "lineEnd": 67,
        "columnStart": 8,
        "columnEnd": 57
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 9,
        "lineEnd": 19,
        "columnStart": 4,
        "columnEnd": 27
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 9,
        "lineEnd": 19,
        "columnStart": 4,
        "columnEnd": 27
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 64,
        "lineEnd": 64,
        "columnStart": 8,
        "columnEnd": 79
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 66,
        "lineEnd": 66,
        "columnStart": 8,
        "columnEnd": 54
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 67,
        "lineEnd": 67,
        "columnStart": 8,
        "columnEnd": 57
      }
    }
  ],
  "repairedSmells": [
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 9,
        "lineEnd": 19,
        "columnStart": 4,
        "columnEnd": 27
      }
    }
  ],
  "repairedDockerfile": "# ----------------------------------------------------------------------------\n# Add cuDNN to nvidia/cuda:9.2-devel\n# ----------------------------------------------------------------------------\nFROM nvidia/cuda:9.2-cudnn7-devel-ubuntu16.04\n\n# ----------------------------------------------------------------------------\n# Install Required Packages\n# ----------------------------------------------------------------------------\nRUN apt-get update\nRUN apt-get install --no-install-recommends -y software-properties-common \\\n                       vim \\\n                       git-core \\\n                       aptitude \\\n                       portaudio19-dev \\\n                       python3-tk \\\n                       tmux \\\n                       psmisc \\\n                       libsndfile-dev \\\n                       libssl-dev \\\n                       curl && rm -rf /var/lib/apt/lists/*;\n\nRUN alias python=python3 && \\\n    alias pip=pip3 && \\\n    ln -s /usr/bin/python3.5 /usr/bin/python && \\\n    echo 'alias python=python3' >> ~/.bashrc && \\\n    echo 'alias pip=pip3' >> ~/.bashrc\n\nRUN curl -fSsL -O https://bootstrap.pypa.io/get-pip.py && \\\n    python3 get-pip.py && \\\n    rm get-pip.py\n\n# ----------------------------------------------------------------------------\n# Install Tensorflow from source\n# ----------------------------------------------------------------------------\nRUN apt-get update && apt-get install -y --no-install-recommends \\\n        build-essential \\\n        cuda-command-line-tools-9-2 \\\n        cuda-cublas-dev-9-2 \\\n        cuda-cudart-dev-9-2 \\\n        cuda-cufft-dev-9-2 \\\n        cuda-curand-dev-9-2 \\\n        cuda-cusolver-dev-9-2 \\\n        cuda-cusparse-dev-9-2 \\\n        git \\\n        libnccl2=2.2.13-1+cuda9.2 \\\n        libnccl-dev=2.2.13-1+cuda9.2 \\\n        libcurl3-dev \\\n        libfreetype6-dev \\\n        libhdf5-serial-dev \\\n        libpng12-dev \\\n        libzmq3-dev \\\n        pkg-config \\\n        rsync \\\n        unzip \\\n        zip \\\n        zlib1g-dev \\\n        wget \\\n        libpython3.5-dev \\\n        && \\\n    rm -rf /var/lib/apt/lists/* && \\\n    find /usr/local/cuda-9.2/lib64/ -type f -name 'lib*_static.a' -not -name 'libcudart_static.a' -delete && \\\n    rm /usr/lib/x86_64-linux-gnu/libcudnn_static_v7.a\n\nRUN apt-get update && \\\n        apt-get install --no-install-recommends -y nvinfer-runtime-trt-repo-ubuntu1604-4.0.1-ga-cuda9.2 && \\\n        apt-get update && \\\n        apt-get install --no-install-recommends -y libnvinfer4=4.1.2-1+cuda9.2 && \\\n        apt-get install --no-install-recommends -y libnvinfer-dev=4.1.2-1+cuda9.2 && rm -rf /var/lib/apt/lists/*;\n\n# Link NCCL libray and header where the build script expects them.\nRUN mkdir /usr/local/cuda-9.2/lib &&  \\\n    ln -s /usr/lib/x86_64-linux-gnu/libnccl.so.2 /usr/local/cuda/lib/libnccl.so.2 && \\\n    ln -s /usr/include/nccl.h /usr/local/cuda/include/nccl.h\n\n\nRUN pip --no-cache-dir install \\\n        Pillow \\\n        h5py \\\n        ipykernel \\\n        jupyter \\\n        keras_applications \\\n        keras_preprocessing \\\n        matplotlib \\\n        mock \\\n        numpy \\\n        scipy \\\n        sklearn \\\n        pandas \\\n        && \\\n    python3 -m ipykernel.kernelspec\n\n# RUN ln -s -f /usr/bin/python3 /usr/bin/python#\n\n# Set up our notebook config.\nCOPY jupyter_notebook_config.py /root/.jupyter/\n\n# Jupyter has issues with being run directly:\n#   https://github.com/ipython/ipython/issues/7062\n# We just add a little wrapper script.\nCOPY run_jupyter.sh /\n\n# Set up Bazel.\n\n# Running bazel inside a `docker build` command causes trouble, cf:\n#   https://github.com/bazelbuild/bazel/issues/134\n# The easiest solution is to set up a bazelrc file forcing --batch.\nRUN echo \"startup --batch\" >>/etc/bazel.bazelrc\n# Similarly, we need to workaround sandboxing issues:\n#   https://github.com/bazelbuild/bazel/issues/418\nRUN echo \"build --spawn_strategy=standalone --genrule_strategy=standalone\" \\\n    >>/etc/bazel.bazelrc\n# Install the most recent bazel release.\nENV BAZEL_VERSION 0.15.0\nWORKDIR /\nRUN mkdir /bazel && \\\n    cd /bazel && \\\n    curl -H \"User-Agent: Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/57.0.2987.133 Safari/537.36\" -fSsL -O https://github.com/bazelbuild/bazel/releases/download/$BAZEL_VERSION/bazel-$BAZEL_VERSION-installer-linux-x86_64.sh && \\\n    curl -H \"User-Agent: Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/57.0.2987.133 Safari/537.36\" -fSsL -o /bazel/LICENSE.txt https://raw.githubusercontent.com/bazelbuild/bazel/master/LICENSE && \\\n    chmod +x bazel-*.sh && \\\n    ./bazel-$BAZEL_VERSION-installer-linux-x86_64.sh && \\\n    cd / && \\\n    rm -f /bazel/bazel-$BAZEL_VERSION-installer-linux-x86_64.sh\n\n# Download and build TensorFlow.\nWORKDIR /tensorflow\nRUN git clone --branch=r1.12 --depth=1 https://github.com/tensorflow/tensorflow.git .\n\n# Configure the build for our CUDA configuration.\nENV CI_BUILD_PYTHON python3\nENV LD_LIBRARY_PATH /usr/local/cuda/extras/CUPTI/lib64:$LD_LIBRARY_PATH\nENV TF_NEED_CUDA 1\nENV TF_NEED_TENSORRT 1\nENV TF_CUDA_COMPUTE_CAPABILITIES=3.5,5.2,6.0,6.1,7.0\nENV TF_CUDA_VERSION=$CUDA_VERSION\nENV TF_CUDNN_VERSION=$CUDNN_VERSION\n\n# NCCL 2.x\nENV TF_NCCL_VERSION=2\n\nRUN ln -s /usr/local/cuda/lib64/stubs/libcuda.so /usr/local/cuda/lib64/stubs/libcuda.so.1 && \\\n    LD_LIBRARY_PATH=/usr/local/cuda/lib64/stubs:${LD_LIBRARY_PATH} \\\n    tensorflow/tools/ci_build/builds/configured GPU \\\n    bazel build -c opt --copt=-mavx --config=cuda \\\n\t--cxxopt=\"-D_GLIBCXX_USE_CXX11_ABI=0\" \\\n        tensorflow/tools/pip_package:build_pip_package && \\\n    rm /usr/local/cuda/lib64/stubs/libcuda.so.1 && \\\n    bazel-bin/tensorflow/tools/pip_package/build_pip_package /tmp/pip && \\\n    pip --no-cache-dir install --upgrade /tmp/pip/tensorflow-*.whl && \\\n    rm -rf /tmp/pip && \\\n    rm -rf /root/.cache\n# Clean up pip wheel and Bazel cache when done.\n\nWORKDIR /root/\n\n# TensorBoard\nEXPOSE 6006\n# IPython\nEXPOSE 8888\n\n\n# ----------------------------------------------------------------------------\n# Configure locales\n# ----------------------------------------------------------------------------\n\nRUN aptitude install locales && \\\n    dpkg-reconfigure locales && \\\n    echo \"Asia/Hong Kong\" > /etc/timezone && \\\n    dpkg-reconfigure -f noninteractive tzdata && \\\n    sed -i -e 's/# en_US.UTF-8 UTF-8/en_US.UTF-8 UTF-8/' /etc/locale.gen && \\\n    echo 'LANG=\"en_US.UTF-8\"'>/etc/default/locale && \\\n    dpkg-reconfigure --frontend=noninteractive locales && \\\n    update-locale LANG=en_US.UTF-8\n\n# ----------------------------------------------------------------------------\n# Modify bashrc file, configure vimrc file\n# ----------------------------------------------------------------------------\n\nRUN echo 'export LC_ALL=en_US.UTF-8' >> ~/.bashrc && \\\n    echo 'export LANG=en_US.UTF-8' >> ~/.bashrc && \\\n    echo 'export LANGUAGE=en_US.UTF-8' >> ~/.bashrc && \\\n    echo 'nnoremap <C-Left> :tabprevious<CR>' >> ~/.vimrc && \\\n    echo 'nnoremap <C-Right> :tabnext<CR>' >> ~/.vimrc && \\\n    echo 'set expandtab' >> ~/.vimrc && \\\n    echo 'set shiftwidth=2' >> ~/.vimrc\n\n\n# ----------------------------------------------------------------------------\n# Other Python dependencies\n# ----------------------------------------------------------------------------\n\nCOPY requirements.txt /root/\nRUN pip install --no-cache-dir -r /root/requirements.txt\n\nWORKDIR /root/\nCMD [\"sleep\", \"infinity\"]\n"
}