{
  "startTime": 1674243183211,
  "endTime": 1674243183632,
  "originalSmells": [
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 11,
        "lineEnd": 53,
        "columnStart": 22,
        "columnEnd": 13
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 11,
        "lineEnd": 53,
        "columnStart": 22,
        "columnEnd": 13
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM ubuntu:bionic-20190307\n\nENV release_name=bionic\nENV rocksdb_version=5.11.3\nENV ocaml_version=4.07.1\n\n# force our apt to use look at mirrors (by prepending a mirrors line)\n# RUN sed 's@archive.ubuntu.com@ubuntu.mirror.atratoip.net@' -i /etc/apt/sources.list\nRUN sed -i \"1s;^;deb mirror://mirrors.ubuntu.com/mirrors.txt ${release_name}-updates main restricted universe multiverse\\n;\" /etc/apt/sources.list\nRUN sed -i \"1s;^;deb mirror://mirrors.ubuntu.com/mirrors.txt ${release_name}         main restricted universe multiverse\\n;\" /etc/apt/sources.list\n\nRUN apt-get update && DEBIAN_FRONTEND=noninteractive apt-get --no-install-recommends install -y \\\n        build-essential m4 apt-utils \\\n\tlcov \\\n        libffi-dev libssl-dev \\\n        libbz2-dev \\\n        libgmp3-dev \\\n        libev-dev \\\n        libsnappy-dev \\\n        libxen-dev \\\n        help2man \\\n        pkg-config \\\n        time \\\n        aspcud \\\n        wget \\\n        rsync \\\n        darcs \\\n        git \\\n        unzip \\\n        yasm \\\n        automake \\\n        debhelper \\\n        psmisc \\\n        strace \\\n        curl \\\n        g++ \\\n        libgflags-dev \\\n        sudo \\\n        libtool \\\n        fuse \\\n        sysstat \\\n        ncurses-dev \\\n        liburiparser1 \\\n        tzdata \\\n        binutils-dev \\\n        libpcre3-dev \\\n        patchelf \\\n        socat \\\n        libcurl4-openssl-dev \\\n        equivs \\\n        libgtest-dev \\\n        help2man \\\n        zlib1g-dev \\\n        cmake && rm -rf /var/lib/apt/lists/*;\n\nRUN cd /usr/src/gtest \\\n        && cmake . \\\n        && make \\\n        && mv libg* /usr/lib/\n\nARG HOST_UID\nRUN useradd jenkins -u $HOST_UID -g root --create-home\n#RUN echo \"jenkins ALL=NOPASSWD: ALL\" >/etc/sudoers.d/jenkins\n\n# Install rocksdb:\nRUN wget -q \\\n    https://github.com/facebook/rocksdb/archive/v${rocksdb_version}.tar.gz -O - \\\n    | tar zxf - \\\n    && PORTABLE=1 make -j$(nproc 2>/dev/null || echo 1) -C rocksdb-${rocksdb_version} shared_lib \\\n    && sudo make -C rocksdb-${rocksdb_version} install-shared \\\n    && rm -rf rocksdb-${rocksdb_version}\n\nRUN wget https://github.com/ocaml/opam/releases/download/2.0.3/opam-2.0.3-x86_64-linux \\\n    && mv opam-2.0.3-x86_64-linux /usr/bin/opam \\\n    && chmod a+x /usr/bin/opam\n\nENV OPAMROOT=/home/jenkins/OPAM\n\nenv opam_env=\"opam config env --root=${OPAMROOT}\"\n\nRUN opam init --root ${OPAMROOT} --compiler=${ocaml_version} --disable-sandboxing\nADD opam.switch opam.switch\nRUN eval `${opam_env}` && export OPAMROOT=${OPAMROOT} && \\\n    opam switch import opam.switch -y --strict\n\nRUN eval ${opam_env} && export OPAMROOT=${OPAMROOT} && \\\n    opam list && \\\n    opam switch export opam.switch.out && \\\n    cat opam.switch.out\n\nRUN diff -u opam.switch opam.switch.out\n\nRUN su - -c \"echo 'eval `${opam_env}`' >> /home/jenkins/.profile\"\nRUN su - -c \"echo 'LD_LIBRARY_PATH=/usr/local/lib; export LD_LIBRARY_PATH;' >> /home/jenkins/.profile\"\nRUN echo \"jenkins ALL=NOPASSWD: ALL\" >/etc/sudoers.d/jenkins\n\nENTRYPOINT [\"/home/jenkins/orocksdb/docker/docker-entrypoint.sh\"]\n"
}