{
  "startTime": 1674248903681,
  "endTime": 1674248904367,
  "originalSmells": [
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 66,
        "lineEnd": 66,
        "columnStart": 2,
        "columnEnd": 34
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 109,
        "lineEnd": 126,
        "columnStart": 4,
        "columnEnd": 47
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 128,
        "lineEnd": 128,
        "columnStart": 2,
        "columnEnd": 32
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 77,
        "lineEnd": 77,
        "columnStart": 2,
        "columnEnd": 13
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 74,
        "lineEnd": 74,
        "columnStart": 2,
        "columnEnd": 29
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 94,
        "lineEnd": 94,
        "columnStart": 2,
        "columnEnd": 35
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 37,
        "lineEnd": 37,
        "columnStart": 2,
        "columnEnd": 47
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 39,
        "lineEnd": 63,
        "columnStart": 24,
        "columnEnd": 6
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 37,
        "lineEnd": 37,
        "columnStart": 2,
        "columnEnd": 47
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 39,
        "lineEnd": 63,
        "columnStart": 24,
        "columnEnd": 6
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# This Docker image encapsulates the File Scanning Framework (FSF) by\n# Emerson Electric Company from https://github.com/EmersonElectricCo/fsf\n#\n# To run this image after installing Docker using a standalone instance, use a command like\n# the following, replacing “~/fsf-workdir\" with the path to the location of your FSF\n# working directory:\n#\n# sudo docker run --rm -it -v ~/fsf-workdir:/home/nonroot/workdir wzod/fsf\n#\n# To run this image using a networked instance, use a command like this after installing\n# FSF on the host system:\n#\n# sudo docker run --rm -it -p 5800:5800 -v ~/fsf-workdir:/home/nonroot/workdir wzod/fsf\n#\n# Before running FSF, create the  ~/fsf-workdir and make it world-accessible\n# (“chmod a+xwr\").\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n#\n\nFROM ubuntu:16.04\nMAINTAINER Zod (@wzod)\n\nENV DEBIAN_FRONTEND noninteractive\n\nUSER root\nRUN apt-get update && \\\n  apt-get -y --no-install-recommends install software-properties-common && \\\n  apt-add-repository -y multiverse && \\\n  apt-get -qq update && apt-get install --no-install-recommends -y --fix-missing \\\n  autoconf \\\n  automake \\\n  build-essential \\\n  cabextract \\\n  dh-autoreconf \\\n  git \\\n  jq \\\n  libffi-dev \\\n  libfuzzy-dev \\\n  libpython2.7-stdlib \\\n  libssl-dev \\\n  libtool \\\n  make \\\n  net-tools \\\n  python-dev \\\n  python-minimal \\\n  python-pip \\\n  python-setuptools \\\n  ssdeep \\\n  unrar \\\n  unzip \\\n  upx-ucl \\\n  vim \\\n  wget && \\\n\n# Update setuptools\n  pip install --no-cache-dir --upgrade setuptools && rm -rf /var/lib/apt/lists/*;\n\n# Retrieve current version of Yara via wget, verify known good hash and install Yara\nRUN cd /tmp && \\\n  wget -O yara.v3.5.0.tar.gz \"https://github.com/VirusTotal/yara/archive/v3.5.0.tar.gz\" && \\\n  echo 4bc72ee755db85747f7e856afb0e817b788a280ab5e73dee42f159171a9b5299\\ \\ yara.v3.5.0.tar.gz > sha256sum-yara && \\\n  sha256sum -c sha256sum-yara && \\\n\n  tar vxzf yara.v3.5.0.tar.gz && \\\n  cd yara-3.5.0/ && \\\n  ./bootstrap.sh && \\\n  ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" && \\\n  make && \\\n  make install && \\\n  cd /tmp && \\\n\n# Retrieve yara-python from the project's site using recursive option and install yara-python\n  git clone --recursive https://github.com/VirusTotal/yara-python && \\\n  cd yara-python/ && \\\n  python setup.py build && \\\n  python setup.py install && \\\n  cd /tmp && \\\n\n# Retrieve current version of pefile via wget, verify known good hash and install pefile\n  wget -O pefile-1.2.10-139.tar.gz \"https://github.com/erocarrera/pefile/archive/pefile-1.2.10-139.tar.gz\" && \\\n  echo 3297cb72e6a51befefc3d9b27ec7690b743ee826538629ecf68f4eee64f331ab\\ \\ pefile-1.2.10-139.tar.gz > sha256sum-pefile && \\\n  sha256sum -c sha256sum-pefile && \\\n\n  tar vxzf pefile-1.2.10-139.tar.gz && \\\n  cd pefile-pefile-1.2.10-139/ && \\\n  sed -i s/1\\.2\\.10.*/1\\.2\\.10\\.139\\'/ pefile.py && \\\n  python setup.py build && \\\n  python setup.py install && \\\n  cd /tmp && \\\n\n# Retrieve current version of jq via wget, verify known good hash and move to /usr/local/bin\n  wget -O jq \"https://github.com/stedolan/jq/releases/download/jq-1.5/jq-linux64\" && \\\n  echo c6b3a7d7d3e7b70c6f51b706a3b90bd01833846c54d32ca32f0027f00226ff6d\\ \\ jq > sha256sum-jq && \\\n  sha256sum -c sha256sum-jq && \\\n  chmod 755 jq && \\\n  mv jq /usr/local/bin/ && rm yara.v3.5.0.tar.gz\n\n# Install additional dependencies\nRUN pip install --no-cache-dir czipfile \\\n  hachoir-parser \\\n  hachoir-core \\\n  hachoir-regex \\\n  hachoir-metadata \\\n  hachoir-subfile \\\n  ConcurrentLogHandler \\\n  pypdf2 \\\n  xmltodict \\\n  rarfile \\\n  pylzma \\\n  oletools \\\n  pyasn1_modules \\\n  pyasn1 \\\n  pyelftools \\\n  javatools \\\n  requests \\\n  git+https://github.com/aaronst/macholibre.git && \\\n\n  BUILD_LIB=1 pip --no-cache-dir install ssdeep\n\n# Add nonroot user, clone repo and setup environment\nRUN groupadd -r nonroot && \\\n  useradd -r -g nonroot -d /home/nonroot -s /sbin/nologin -c \"Nonroot User\" nonroot && \\\n  mkdir /home/nonroot && \\\n  chown -R nonroot:nonroot /home/nonroot && \\\n  echo \"/usr/local/lib\" >> /etc/ld.so.conf.d/yara.conf\n\nUSER nonroot\nRUN mkdir -pv /home/nonroot/workdir && \\\n  cd /home/nonroot && \\\n  git clone https://github.com/EmersonElectricCo/fsf.git && \\\n  cd fsf/ && \\\n  sed -i 's/\\/FULL\\/PATH\\/TO/\\/home\\/nonroot/' fsf-server/conf/config.py && \\\n  sed -i \"/^SCANNER\\_CONFIG/ s/\\/tmp/\\/home\\/nonroot\\/workdir/\" fsf-server/conf/config.py\n\nUSER root\nRUN ldconfig && \\\n  ln -f -s /home/nonroot/fsf/fsf-server/main.py /usr/local/bin/ && \\\n  ln -f -s /home/nonroot/fsf/fsf-client/fsf_client.py /usr/local/bin/ && \\\n  apt-get remove -y --purge automake build-essential libtool && \\\n  apt-get autoremove -y --purge && \\\n  apt-get clean -y && \\\n  rm -rf /var/lib/apt/lists/*\n\nUSER nonroot\nENV HOME /home/nonroot\nENV USER nonroot\nWORKDIR /home/nonroot/workdir\n\nENTRYPOINT sed -i \"/^SERVER_CONFIG/ s/127\\.0\\.0\\.1/$(hostname -i)/\" /home/nonroot/fsf/fsf-client/conf/config.py && main.py start && printf \"\\n\\n\" && echo \"<----->\" && echo \"FSF server daemonized!\" &&  echo \"<----->\" && printf \"\\n\" && echo \"Invoke fsf_client.py by giving it a file as an argument:\" && printf \"\\n\" && echo \"fsf_client.py <file>\"  && printf \"\\n\" && echo \"Alternatively, Invoke fsf_client.py by giving it a file as an argument and pass to jq so you can interact extensively with the JSON output:\" && printf \"\\n\" && echo \"fsf_client.py <file> | jq -C . | less -r\" && printf \"\\n\" && echo \"To access all of the subobjects that are recursively processed, simply add --full when invoking fsf_client.py:\" && printf \"\\n\" && echo \"fsf_client.py <file> --full\" && printf \"\\n\" && /bin/bash\n"
}