{
  "startTime": 1674248896980,
  "endTime": 1674248897091,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 14,
        "lineEnd": 14,
        "columnStart": 4,
        "columnEnd": 47
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM ruby:2.3-alpine3.8 as ruby\nFROM php:7.3-alpine3.8 as dev\n\nCOPY --from=ruby /usr/local /usr/local\n\n# since this is an intermediate layer, we can safely use as many RUN layers as we want, and take advantage of granular caching.\n\nRUN apk add --no-cache yaml build-base libffi-dev libzip-dev git zip bash\n\n# workaround for https://github.com/docker-library/php/issues/240\nRUN apk add --no-cache --repository http://dl-cdn.alpinelinux.org/alpine/edge/testing/ gnu-libiconv\nENV LD_PRELOAD /usr/lib/preloadable_libiconv.so php\n\nRUN docker-php-ext-install -j$(getconf _NPROCESSORS_ONLN) zip\nRUN curl -f -sSL https://getcomposer.org/installer | php -- --install-dir=/usr/local/bin --filename=composer\n\nENV PATH /fig-website/bin:/fig-website/vendor/bin:${PATH}\n\n# setup user\nARG UID=1000\nARG GID=1000\nRUN addgroup -g $GID fig && adduser -D -G fig -u $UID fig \\\n    && mkdir /fig-website \\\n    && chown fig:fig /fig-website\nWORKDIR /fig-website\nUSER fig\n\nRUN composer global require hirak/prestissimo\n\nCMD bash\n\nFROM dev as build\n\nCOPY --chown=fig:fig . /fig-website\nRUN bundle install --path .bundle && composer install\nRUN build.sh\n\nFROM nginx:alpine as nginx\n\nRUN sed -i '11i try_files $uri $uri/index.html $uri/ =404;' /etc/nginx/conf.d/default.conf\nCOPY --from=build /fig-website/output_dev /usr/share/nginx/html\n"
}