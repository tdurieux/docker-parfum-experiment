{
  "startTime": 1674250803286,
  "endTime": 1674250803395,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 6,
        "lineEnd": 6,
        "columnStart": 4,
        "columnEnd": 84
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 14,
        "lineEnd": 14,
        "columnStart": 4,
        "columnEnd": 53
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# See Dockerfile.base for instructions on how to update this base image.\nFROM mesosphere/dcos-commons-base:latest@sha256:2f87f4b3ce9e9fde446608e63827911275c756a133bde96d03fd21a9f3dff129\n\nENV GO_VERSION=1.10.2\nENV PATH=$PATH:/usr/local/go/bin\n\nRUN curl -f -O https://storage.googleapis.com/golang/go${GO_VERSION}.linux-amd64.tar.gz && \\\n    tar -zxf go${GO_VERSION}.linux-amd64.tar.gz && \\\n    mv go /usr/local && \\\n    rm -f go${GO_VERSION}.linux-amd64.tar.gz && \\\n    go version\n\n# Install the lint+testing dependencies and AWS CLI for uploading build artifacts\nCOPY frozen_requirements.txt frozen_requirements.txt\nRUN pip3 install --no-cache-dir --upgrade -r frozen_requirements.txt\nCOPY tools/validate_pip_freeze.py /usr/local/bin\nRUN validate_pip_freeze.py frozen_requirements.txt\n\n# Get DC/OS CLI\nCOPY dep-snapshots/dcos /usr/local/bin\n\n# dcos-cli and lint tooling require this to output cleanly\nENV LC_ALL=C.UTF-8 LANG=C.UTF-8\n# use an arbitrary path for temporary build artifacts\nENV GOPATH=/go-tmp\n# make a dir for holding the SSH key in tests\nRUN mkdir /root/.ssh\n\n# Copy all of the repo into the image, then run some build/lint commands against the copy to heat up caches. Then delete the copy.\nRUN mkdir /tmp/repo/\nCOPY / /tmp/repo/\n# gradlew: Heat up jar cache. pre-commit: Heat up lint tooling cache.\nRUN cd /tmp/repo/ && \\\n    ./gradlew testClasses && \\\n    git init && \\\n    pre-commit install-hooks && \\\n    cd / && \\\n    rm -rf /tmp/repo/\n\n# Create a build-tool directory:\nRUN mkdir /build-tools\nENV PATH=/build-tools:$PATH\n\nCOPY tools/distribution/copy-files /build-tools/\n# Temporary workaround for DCOS-52239. Remove once all known frameworks have\n# updated their UPDATING.md to point at copy-files rather than init.\nRUN cp /build-tools/copy-files /build-tools/init\n\nCOPY tools/ci/test_runner.sh /build-tools/\nCOPY tools/ci/launch_cluster.sh /build-tools/\n\n# Create a folder to store the distributed artefacts\nRUN mkdir /dcos-commons-dist\nENV DCOS_COMMONS_DIST_ROOT /dcos-commons-dist\n\nCOPY tools/distribution/* ${DCOS_COMMONS_DIST_ROOT}/\n\nCOPY test.sh ${DCOS_COMMONS_DIST_ROOT}/\nCOPY TESTING.md ${DCOS_COMMONS_DIST_ROOT}/\n\nCOPY conftest.py ${DCOS_COMMONS_DIST_ROOT}/\n\nCOPY testing ${DCOS_COMMONS_DIST_ROOT}/testing\nCOPY tools ${DCOS_COMMONS_DIST_ROOT}/tools\nCOPY .pre-commit-config.yaml ${DCOS_COMMONS_DIST_ROOT}/\n\nCOPY build.gradle ${DCOS_COMMONS_DIST_ROOT}/build.gradle\nRUN grep -oE \"version = '.*?'\" ${DCOS_COMMONS_DIST_ROOT}/build.gradle | sed 's/version = //' > ${DCOS_COMMONS_DIST_ROOT}/.version\n\nCOPY tools/container/venvs /venvs\n"
}