{
  "startTime": 1674250564282,
  "endTime": 1674250565006,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 95,
        "lineEnd": 95,
        "columnStart": 4,
        "columnEnd": 141
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 185,
        "lineEnd": 185,
        "columnStart": 4,
        "columnEnd": 90
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 186,
        "lineEnd": 186,
        "columnStart": 4,
        "columnEnd": 87
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 187,
        "lineEnd": 187,
        "columnStart": 4,
        "columnEnd": 86
      }
    },
    {
      "rule": "curlUseHttpsUrl",
      "position": {
        "lineStart": 104,
        "lineEnd": 104,
        "columnStart": 4,
        "columnEnd": 83
      }
    },
    {
      "rule": "curlUseHttpsUrl",
      "position": {
        "lineStart": 105,
        "lineEnd": 105,
        "columnStart": 4,
        "columnEnd": 92
      }
    },
    {
      "rule": "curlUseHttpsUrl",
      "position": {
        "lineStart": 185,
        "lineEnd": 185,
        "columnStart": 4,
        "columnEnd": 90
      }
    },
    {
      "rule": "curlUseHttpsUrl",
      "position": {
        "lineStart": 186,
        "lineEnd": 186,
        "columnStart": 4,
        "columnEnd": 87
      }
    },
    {
      "rule": "curlUseHttpsUrl",
      "position": {
        "lineStart": 187,
        "lineEnd": 187,
        "columnStart": 4,
        "columnEnd": 86
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 98,
        "lineEnd": 98,
        "columnStart": 5,
        "columnEnd": 16
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 125,
        "lineEnd": 125,
        "columnStart": 5,
        "columnEnd": 37
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 132,
        "lineEnd": 132,
        "columnStart": 5,
        "columnEnd": 24
      }
    },
    {
      "rule": "gpgUseBatchFlag",
      "position": {
        "lineStart": 115,
        "lineEnd": 115,
        "columnStart": 2,
        "columnEnd": 82
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM alpine:latest\n\nRUN apk add --no-cache \\\n\tlua5.1-cjson \\\n\tluajit\n\nENV NGINX_VERSION 1.15.0\n# https://github.com/simplresty/ngx_devel_kit/releases\nENV NGX_DEVEL_KIT_VERSION v0.3.1rc1\n# https://github.com/openresty/lua-nginx-module/releases\nENV LUA_NGINX_MODULE_VERSION v0.10.13\n# https://github.com/leev/ngx_http_geoip2_module/releases\nENV NGX_HTTP_GEOIP2_MODULE_VERSION 2.0\n# https://github.com/maxmind/libmaxminddb/releases\nENV LIBMAXMINDDB_VERSION 1.3.2\n\n# Tell nginx's build system where to find LuaJIT 2.1:\nENV LUAJIT_LIB=/usr/lib/\nENV LUAJIT_INC=/usr/include/luajit-2.1/\n\nRUN GPG_KEYS=B0F4253373F8F6F510D42178520A9993A1C052F8 \\\n\t&& CONFIG=\"\\\n\t\t--prefix=/etc/nginx \\\n\t\t--sbin-path=/usr/sbin/nginx \\\n\t\t--modules-path=/usr/lib/nginx/modules \\\n\t\t--conf-path=/etc/nginx/nginx.conf \\\n\t\t--error-log-path=/var/log/nginx/error.log \\\n\t\t--http-log-path=/var/log/nginx/access.log \\\n\t\t--pid-path=/var/run/nginx.pid \\\n\t\t--lock-path=/var/run/nginx.lock \\\n\t\t--http-client-body-temp-path=/var/cache/nginx/client_temp \\\n\t\t--http-proxy-temp-path=/var/cache/nginx/proxy_temp \\\n\t\t--http-fastcgi-temp-path=/var/cache/nginx/fastcgi_temp \\\n\t\t--http-uwsgi-temp-path=/var/cache/nginx/uwsgi_temp \\\n\t\t--http-scgi-temp-path=/var/cache/nginx/scgi_temp \\\n\t\t--user=nginx \\\n\t\t--group=nginx \\\n\t\t--with-http_ssl_module \\\n\t\t--with-http_realip_module \\\n\t\t--with-http_addition_module \\\n\t\t--with-http_sub_module \\\n\t\t--with-http_dav_module \\\n\t\t--with-http_flv_module \\\n\t\t--with-http_mp4_module \\\n\t\t--with-http_gunzip_module \\\n\t\t--with-http_gzip_static_module \\\n\t\t--with-http_random_index_module \\\n\t\t--with-http_secure_link_module \\\n\t\t--with-http_stub_status_module \\\n\t\t--with-http_auth_request_module \\\n\t\t--with-http_xslt_module=dynamic \\\n\t\t--with-http_image_filter_module=dynamic \\\n\t\t--with-http_geoip_module=dynamic \\\n\t\t--with-threads \\\n\t\t--with-stream \\\n\t\t--with-stream_ssl_module \\\n\t\t--with-stream_ssl_preread_module \\\n\t\t--with-stream_realip_module \\\n\t\t--with-stream_geoip_module=dynamic \\\n\t\t--with-http_slice_module \\\n\t\t--with-mail \\\n\t\t--with-mail_ssl_module \\\n\t\t--with-compat \\\n\t\t--with-file-aio \\\n\t\t--with-http_v2_module \\\n\t\t--with-ld-opt='-Wl,-rpath,/usr/lib/' \\\n\t\t--add-module=/usr/src/ngx_devel_kit \\\n\t\t--add-module=/usr/src/lua-nginx-module \\\n\t\t--add-module=/usr/src/ngx_http_geoip2_module \\\n\t\" \\\n\t&& addgroup -S nginx \\\n\t&& adduser -D -S -h /var/cache/nginx -s /sbin/nologin -G nginx nginx \\\n\t&& apk add --no-cache --virtual .build-deps \\\n\t\tautoconf \\\n\t\tautomake \\\n\t\tgcc \\\n\t\tgit \\\n\t\tlibc-dev \\\n\t\tmake \\\n\t\topenssl-dev \\\n\t\tpcre-dev \\\n\t\tzlib-dev \\\n\t\tlinux-headers \\\n\t\tcurl \\\n\t\tgnupg \\\n\t\tlibxslt-dev \\\n\t\tgd-dev \\\n\t\tgeoip-dev \\\n\t\tluajit-dev \\\n\t\tmusl-utils \\\n\t\tfile \\\n\t&& git clone --depth 1 --branch \"${NGX_DEVEL_KIT_VERSION}\" https://github.com/simplresty/ngx_devel_kit.git /usr/src/ngx_devel_kit \\\n\t&& git clone --depth 1 --branch \"${LUA_NGINX_MODULE_VERSION}\" https://github.com/openresty/lua-nginx-module.git /usr/src/lua-nginx-module \\\n\t&& git clone --depth 1 --branch \"${NGX_HTTP_GEOIP2_MODULE_VERSION}\" https://github.com/leev/ngx_http_geoip2_module.git /usr/src/ngx_http_geoip2_module \\\n\t&& mkdir -p /usr/src/libmaxminddb \\\n\t&& curl -f -sSL \"https://github.com/maxmind/libmaxminddb/releases/download/${LIBMAXMINDDB_VERSION}/libmaxminddb-${LIBMAXMINDDB_VERSION}.tar.gz\" | tar -xzf - --strip-components 1 -C /usr/src/libmaxminddb \\\n\t&& ( cd /usr/src/libmaxminddb \\\n\t\t&& ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" \\\n\t\t&& make \\\n\t\t&& make check \\\n\t\t&& make install \\\n\t\t&& ldconfig || true) \\\n\n\t&& curl -fSL https://nginx.org/download/nginx-$NGINX_VERSION.tar.gz -o nginx.tar.gz \\\n\t&& curl -fSL https://nginx.org/download/nginx-$NGINX_VERSION.tar.gz.asc -o nginx.tar.gz.asc \\\n\t&& export GNUPGHOME=\"$(mktemp -d)\" \\\n\t&& found=''; \\\n\tfor server in \\\n\t\tha.pool.sks-keyservers.net \\\n\t\thkp://keyserver.ubuntu.com:80 \\\n\t\thkp://p80.pool.sks-keyservers.net:80 \\\n\t\tpgp.mit.edu; \\\n\tdo \\\n\t\techo \"Fetching GPG key $GPG_KEYS from $server\"; \\\n\t\tgpg --batch --keyserver \"$server\" --keyserver-options timeout=10 --recv-keys \"$GPG_KEYS\" && found=yes && break; \\\n\tdone; \\\n\ttest -z \"$found\" && echo >&2 \"error: failed to fetch GPG key $GPG_KEYS\" && exit 1; \\\n\tgpg --batch --verify nginx.tar.gz.asc nginx.tar.gz \\\n\t&& rm -r \"$GNUPGHOME\" nginx.tar.gz.asc \\\n\t&& mkdir -p /usr/src \\\n\t&& tar -zxC /usr/src -f nginx.tar.gz \\\n\t&& rm nginx.tar.gz \\\n\t&& ( cd /usr/src/nginx-$NGINX_VERSION \\\n\t\t&& ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" $CONFIG --with-debug \\\n\t\t&& make -j$(getconf _NPROCESSORS_ONLN) \\\n\t\t&& mv objs/nginx objs/nginx-debug \\\n\t\t&& mv objs/ngx_http_xslt_filter_module.so objs/ngx_http_xslt_filter_module-debug.so \\\n\t\t&& mv objs/ngx_http_image_filter_module.so objs/ngx_http_image_filter_module-debug.so \\\n\t\t&& mv objs/ngx_http_geoip_module.so objs/ngx_http_geoip_module-debug.so \\\n\t\t&& mv objs/ngx_stream_geoip_module.so objs/ngx_stream_geoip_module-debug.so \\\n\t\t&& ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" $CONFIG \\\n\t\t&& make -j$(getconf _NPROCESSORS_ONLN) \\\n\t\t&& make install \\\n\t\t&& rm -rf /etc/nginx/html/ \\\n\t\t&& mkdir /etc/nginx/conf.d/ \\\n\t\t&& mkdir -p /usr/share/nginx/html/ \\\n\t\t&& install -m644 html/index.html /usr/share/nginx/html/ \\\n\t\t&& install -m644 html/50x.html /usr/share/nginx/html/ \\\n\t\t&& install -m755 objs/nginx-debug /usr/sbin/nginx-debug \\\n\t\t&& install -m755 objs/ngx_http_xslt_filter_module-debug.so /usr/lib/nginx/modules/ngx_http_xslt_filter_module-debug.so \\\n\t\t&& install -m755 objs/ngx_http_image_filter_module-debug.so /usr/lib/nginx/modules/ngx_http_image_filter_module-debug.so \\\n\t\t&& install -m755 objs/ngx_http_geoip_module-debug.so /usr/lib/nginx/modules/ngx_http_geoip_module-debug.so \\\n\t\t&& install -m755 objs/ngx_stream_geoip_module-debug.so /usr/lib/nginx/modules/ngx_stream_geoip_module-debug.so \\\n\t\t&& ln -s ../../usr/lib/nginx/modules /etc/nginx/modules \\\n\t\t&& strip /usr/sbin/nginx* \\\n\t\t&& strip /usr/lib/nginx/modules/*.so) \\\n\n\t&& rm -rf /usr/src/nginx-$NGINX_VERSION /usr/src/ngx_devel_kit /usr/src/lua-nginx-module /usr/src/ngx_http_geoip2_module /usr/src/libmaxminddb \\\n\n\t# Bring in gettext so we can get `envsubst`, then throw\n\t# the rest away. To do this, we need to install `gettext`\n\t# then move `envsubst` out of the way so `gettext` can\n\t# be deleted completely, then move `envsubst` back.\n\t&& apk add --no-cache --virtual .gettext gettext \\\n\t&& mv /usr/bin/envsubst /tmp/ \\\n\n\t&& runDeps=\"$( \\\n\t\tscanelf --needed --nobanner --format '%n#p' /usr/sbin/nginx /usr/lib/nginx/modules/*.so /tmp/envsubst \\\n\t\t\t| tr ',' '\\n' \\\n\t\t\t| sort -u \\\n\t\t\t| awk 'system(\"[ -e /usr/local/lib/\" $1 \" ]\") == 0 { next } { print \"so:\" $1 }' \\\n\t)\" \\\n\t&& apk add --no-cache --virtual .nginx-rundeps $runDeps \\\n\t&& apk del .build-deps \\\n\t&& apk del .gettext \\\n\t&& mv /tmp/envsubst /usr/local/bin/ \\\n\n\t# forward request and error logs to docker log collector\n\t&& ln -sf /dev/stdout /var/log/nginx/access.log \\\n\t&& ln -sf /dev/stderr /var/log/nginx/error.log\n\nSTOPSIGNAL SIGTERM\n\nEXPOSE 80 443\n\nENV TELIZE_VERSION master\n\nRUN set -x \\\n\t&& apk add --no-cache --virtual .build-deps \\\n\t\tcurl \\\n\t\tgit \\\n\t&& rm -rf /var/lib/apt/lists/* \\\n\t&& mkdir -p /usr/share/GeoIP \\\n\t&& curl -f -sSL \"https://geolite.maxmind.com/download/geoip/database/GeoLite2-Country.tar.gz\" | tar -xzf - --strip-components 1 -C /usr/share/GeoIP \\\n\t&& curl -f -sSL \"https://geolite.maxmind.com/download/geoip/database/GeoLite2-City.tar.gz\" | tar -xzf - --strip-components 1 -C /usr/share/GeoIP \\\n\t&& curl -f -sSL \"https://geolite.maxmind.com/download/geoip/database/GeoLite2-ASN.tar.gz\" | tar -xzf - --strip-components 1 -C /usr/share/GeoIP \\\n\t&& git clone --depth 1 --branch \"${TELIZE_VERSION}\" https://github.com/fcambus/telize.git /usr/src/telize \\\n\t&& ( \\\n\t\tcd /usr/src/telize \\\n\t\t&& cp *.conf /etc/nginx/ \\\n\t) \\\n\t&& rm -rf /usr/src/telize \\\n\t&& apk del .build-deps\n\nCOPY nginx.conf /etc/nginx/nginx.conf\nCOPY mime.types /etc/nginx/mime.types\nCOPY telize.conf /etc/nginx/conf.d/telize.conf\n\nCMD [\"nginx\", \"-g\", \"daemon off;\"]\n"
}