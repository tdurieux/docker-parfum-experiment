{
  "startTime": 1674248363347,
  "endTime": 1674248363827,
  "originalSmells": [
    {
      "rule": "wgetUseHttpsUrl",
      "position": {
        "lineStart": 63,
        "lineEnd": 63,
        "columnStart": 7,
        "columnEnd": 70
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 67,
        "lineEnd": 87,
        "columnStart": 7,
        "columnEnd": 30
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 95,
        "lineEnd": 95,
        "columnStart": 7,
        "columnEnd": 18
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 102,
        "lineEnd": 102,
        "columnStart": 24,
        "columnEnd": 35
      }
    },
    {
      "rule": "apkAddUseNoCache",
      "position": {
        "lineStart": 59,
        "lineEnd": 59,
        "columnStart": 7,
        "columnEnd": 35
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM alpine:3.9.2\n\nENV WORKDIR /mnt\nARG M4B_TOOL_DOWNLOAD_LINK=\"https://github.com/sandreas/m4b-tool/releases/latest/download/m4b-tool.phar\"\nARG FFMPEG_VERSION=4.1\nARG PREFIX=/ffmpeg_build\n\nRUN \\\n echo \"---- INSTALL BUILD DEPENDENCIES ----\" \\\n    && apk add --no-cache --update --upgrade --virtual=build-dependencies \\\n    autoconf \\\n    automake \\\n    boost-dev \\\n    build-base \\\n    gcc \\\n    lame-dev \\\n    libogg-dev \\\n    yasm \\\n    nasm \\\n    yasm-dev \\\n    zlib-dev \\\n    freetype-dev \\\n    libogg-dev \\\n    libtheora-dev \\\n    libvorbis-dev \\\n    openssl-dev \\\n    opus-dev \\\n    git \\\n    tar \\\n    wget && \\\necho \"---- INSTALL RUNTIME PACKAGES ----\" \\\n    && apk add --no-cache --update --upgrade bzip2 \\\n    ca-certificates \\\n    coreutils \\\n    curl \\\n    file \\\n    libtool \\\n    freetype \\\n    lame \\\n    libogg \\\n    libvpx \\\n    libvorbis \\\n    libtheora \\\n    libvorbis \\\n    openssl \\\n    opus \\\n    pcre \\\n    php7-cli \\\n    php7-dom \\\n    php7-intl \\\n    php7-json \\\n    php7-xml \\\n    php7-curl \\\n    php7-mbstring \\\n    php7-simplexml \\\n    php7-phar \\\n    pkgconf \\\n    pkgconfig \\\n    && echo http://dl-cdn.alpinelinux.org/alpine/edge/testing >> /etc/apk/repositories \\\n    && apk add --no-cache --update fdk-aac-dev \\\n    && echo \"date.timezone = UTC\" >> /etc/php7/php.ini && \\\necho \"---- COMPILE FFMPEG ----\" \\\n    && cd /tmp/ \\\n    && wget https://ffmpeg.org/releases/ffmpeg-${FFMPEG_VERSION}.tar.gz \\\n    && tar zxf ffmpeg-${FFMPEG_VERSION}.tar.gz \\\n    && rm ffmpeg-${FFMPEG_VERSION}.tar.gz \\\n    && cd /tmp/ffmpeg-${FFMPEG_VERSION} \\\n    && ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" \\\n    --enable-version3 \\\n    --enable-gpl \\\n    --enable-nonfree \\\n    --enable-small \\\n    --enable-libmp3lame \\\n    --enable-libtheora \\\n    --enable-libvorbis \\\n    --enable-libopus \\\n    --enable-libfdk_aac \\\n    --enable-avresample \\\n    --enable-libfreetype \\\n    --enable-openssl \\\n    --disable-debug \\\n    --disable-doc \\\n    --disable-ffplay \\\n    --prefix=\"/tmp${PREFIX}\" \\\n    --extra-cflags=\"-I/tmp${PREFIX}/include\" \\\n    --extra-ldflags=\"-L/tmp${PREFIX}/lib\" \\\n    --extra-libs=\"-lpthread -lm\" \\\n    --bindir=\"/usr/local/bin/\" \\\n    && make && make install && make distclean && hash -r && rm -rf /tmp/* && \\\necho \"---- COMPILE SANDREAS MP4V2 ----\" \\\n    && cd /tmp/ \\\n    && wget https://github.com/sandreas/mp4v2/archive/master.zip \\\n    && unzip master.zip \\\n    && rm master.zip \\\n    && cd mp4v2-master \\\n    && ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" && make && make install && make distclean && rm -rf /tmp/* && \\\necho \"---- COMPILE FDKAAC ----\" \\\n    && cd /tmp/ \\\n    && wget https://github.com/nu774/fdkaac/archive/1.0.0.tar.gz \\\n    && tar xzf 1.0.0.tar.gz \\\n    && rm 1.0.0.tar.gz \\\n    && cd fdkaac-1.0.0 \\\n    && autoreconf -i && ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" && make && make install && rm -rf /tmp/* && \\\necho \"---- REMOVE BUILD DEPENDENCIES ----\" \\\n    && apk del --purge build-dependencies\n\n# workaround to copy a local m4b-tool.phar IF it exists\nADD ./Dockerfile ./dist/m4b-tool.phar* /tmp/\nRUN echo \"---- INSTALL M4B-TOOL ----\" \\\n    && if [ ! -f /tmp/m4b-tool.phar ]; then wget \"${M4B_TOOL_DOWNLOAD_LINK}\" -O /tmp/m4b-tool.phar ; fi \\\n    && mv /tmp/m4b-tool.phar /usr/local/bin/m4b-tool \\\n    && chmod +x /usr/local/bin/m4b-tool\n\nWORKDIR ${WORKDIR}\nCMD [\"list\"]\nENTRYPOINT [\"m4b-tool\"]\n\n"
}