{
  "startTime": 1674238881254,
  "endTime": 1674238881461,
  "originalSmells": [
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 80,
        "lineEnd": 80,
        "columnStart": 4,
        "columnEnd": 44
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 10,
        "lineEnd": 10,
        "columnStart": 22,
        "columnEnd": 48
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 26,
        "lineEnd": 33,
        "columnStart": 7,
        "columnEnd": 13
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 34,
        "lineEnd": 37,
        "columnStart": 7,
        "columnEnd": 17
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 38,
        "lineEnd": 47,
        "columnStart": 7,
        "columnEnd": 12
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 64,
        "lineEnd": 70,
        "columnStart": 7,
        "columnEnd": 15
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM ubuntu:16.04\nMAINTAINER AiiDA Team <info@aiida.net>\n\nARG uid=1000\nARG gid=1000\n\n## Set correct locale\n## For something more complex, as reported by https://hub.docker.com/_/ubuntu/\n## and taken from postgres:\n# make the \"en_US.UTF-8\" locale so postgres will be utf-8 enabled by default\nRUN apt-get update && apt-get install --no-install-recommends -y locales && rm -rf /var/lib/apt/lists/* \\\n    && localedef -i en_US -c -f UTF-8 -A /usr/share/locale/locale.alias en_US.UTF-8\nENV LANG en_US.utf8\n\n# Putting the LANG also in the root .bashrc, so that the DB is later\n# Created with the UTF8 locale\nRUN sed -i '/interactively/iexport LANG=en_US.utf8' /root/.bashrc\n# This is probably the right command to issue to make sure all users see it as the default locale\nRUN update-locale LANG=en_US.utf8\n\n# I don't define it for now (should use the one of ubuntu by default, anyway\n# jenkins will replace it with 'cat')\n#CMD [\"/bin/true\"]\n\n# install required software\nRUN apt-get update \\\n    && apt-get -y --no-install-recommends install \\\n    git \\\n    vim \\\n    openssh-client \\\n    postgresql-client-9.5 \\\n    postgresql-9.5 \\\n    postgresql-server-dev-9.5 \\\n    python2.7 \\\n    && apt-get -y --no-install-recommends install \\\n    python-pip \\\n    ipython \\\n    python2.7-dev \\\n    && apt-get -y --no-install-recommends install \\\n    texlive-base \\\n    texlive-generic-recommended \\\n    texlive-fonts-recommended \\\n    texlive-latex-base \\\n    texlive-latex-recommended \\\n    texlive-latex-extra \\\n    dvipng \\\n    dvidvi \\\n    graphviz \\\n    && rm -rf /var/lib/apt/lists/* \\\n    && apt-get clean all\n\n# Disable password requests for requests coming from localhost\n# Of course insecure, but ok for testing\nRUN cp /etc/postgresql/9.5/main/pg_hba.conf /etc/postgresql/9.5/main/pg_hba.conf~ && \\\n    perl -npe 's/^([^#]*)md5$/$1trust/' /etc/postgresql/9.5/main/pg_hba.conf~ > /etc/postgresql/9.5/main/pg_hba.conf\n\n# install sudo otherwise tests for quicksetup fail,\n# see #1382. I think this part should be removed in the\n# future and AiiDA should work also without sudo.\n## Also install openssh-server needed for AiiDA tests,\n## and openmpi-bin to have 'mpirun',\n## and rabbitmq-server needed by AiiDA as the event queue\n## and libkrb5-dev for gssapi.h\nRUN apt-get update \\\n    && apt-get -y --no-install-recommends install \\\n    sudo \\\n    locate \\\n    openssh-server \\\n    openmpi-bin \\\n    rabbitmq-server \\\n    libkrb5-dev \\\n    && rm -rf /var/lib/apt/lists/* \\\n    && apt-get clean all\n\n# locate will not find anything if the DB is not updated.\n# Should take ~3-4 secs, so ok\nRUN updatedb\n\n# update pip and setuptools to get a relatively-recent version\n# This can be updated in the future\nRUN pip install --no-cache-dir pip==18.1 setuptools==40.6.2\n\n# Put the doubler script\nCOPY doubler.sh /usr/local/bin/\n\n# Use messed-up filename to test quoting robustness\nRUN mv /usr/local/bin/doubler.sh /usr/local/bin/d\\\"o\\'ub\\ ler.sh\n\n# Put the add script\nCOPY add.sh /usr/local/bin/\n\n# add USER (no password); 1000 is the uid of the user in the jenkins docker\nRUN groupadd -g ${gid} jenkins && useradd -m -s /bin/bash -u ${uid} -g ${gid} jenkins\n\n# add to sudoers and don't ask password\nRUN adduser jenkins sudo && adduser jenkins adm\nRUN echo \"%sudo   ALL=(ALL:ALL) NOPASSWD:ALL\" > /etc/sudoers.d/nopwd\nRUN mkdir -p /scratch/jenkins/ && chown jenkins /scratch/jenkins/ && chmod o+rX /scratch/\n\n##########################################\n############ Installation Setup ##########\n##########################################\n\n# install rest of the packages as normal user\nUSER jenkins\n\n# set $HOME, create git directory\nENV HOME /home/jenkins\n"
}