{
  "startTime": 1674252503079,
  "endTime": 1674252503810,
  "originalSmells": [
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 128,
        "lineEnd": 128,
        "columnStart": 4,
        "columnEnd": 36
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 136,
        "lineEnd": 136,
        "columnStart": 4,
        "columnEnd": 23
      }
    },
    {
      "rule": "gpgUseBatchFlag",
      "position": {
        "lineStart": 100,
        "lineEnd": 100,
        "columnStart": 2,
        "columnEnd": 82
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM alpine:3.9\n\nENV NGINX_VERSION=1.17.0\n\nRUN GPG_KEYS=B0F4253373F8F6F510D42178520A9993A1C052F8 \\\n\t&& CONFIG=\"\\\n\t\t--prefix=/etc/nginx \\\n\t\t--sbin-path=/usr/sbin/nginx \\\n\t\t--modules-path=/usr/lib/nginx/modules \\\n\t\t--conf-path=/etc/nginx/nginx.conf \\\n\t\t--error-log-path=/var/log/nginx/error.log \\\n\t\t--http-log-path=/var/log/nginx/access.log \\\n\t\t--pid-path=/var/run/nginx.pid \\\n\t\t--lock-path=/var/run/nginx.lock \\\n\t\t--http-client-body-temp-path=/var/cache/nginx/client_temp \\\n\t\t--http-proxy-temp-path=/var/cache/nginx/proxy_temp \\\n\t\t--http-fastcgi-temp-path=/var/cache/nginx/fastcgi_temp \\\n\t\t--http-uwsgi-temp-path=/var/cache/nginx/uwsgi_temp \\\n\t\t--http-scgi-temp-path=/var/cache/nginx/scgi_temp \\\n\t\t--user=nginx \\\n\t\t--group=nginx \\\n\t\t--with-http_ssl_module \\\n\t\t--with-http_realip_module \\\n\t\t--with-http_addition_module \\\n\t\t--with-http_sub_module \\\n\t\t--with-http_dav_module \\\n\t\t--with-http_flv_module \\\n\t\t--with-http_mp4_module \\\n\t\t--with-http_gunzip_module \\\n\t\t--with-http_gzip_static_module \\\n\t\t--with-http_random_index_module \\\n\t\t--with-http_secure_link_module \\\n\t\t--with-http_stub_status_module \\\n\t\t--with-http_auth_request_module \\\n\t\t--with-http_xslt_module=dynamic \\\n\t\t--with-http_image_filter_module=dynamic \\\n\t\t--with-http_geoip_module=dynamic \\\n\t\t--with-http_perl_module=dynamic \\\n\t\t--with-threads \\\n\t\t--with-stream \\\n\t\t--with-stream_ssl_module \\\n\t\t--with-stream_ssl_preread_module \\\n\t\t--with-stream_realip_module \\\n\t\t--with-stream_geoip_module=dynamic \\\n\t\t--with-http_slice_module \\\n\t\t--with-mail \\\n\t\t--with-mail_ssl_module \\\n\t\t--with-compat \\\n\t\t--with-file-aio \\\n\t\t--with-http_v2_module \\\n\t\t--with-ipv6 \\\n\t\t--with-cc-opt=-I/usr/src/boringssl/.openssl/include \\\n\t\t--with-ld-opt=-L/usr/src/boringssl/.openssl/lib \\\n\t\t--add-dynamic-module=/usr/src/ngx_headers_more \\\n\t\t--add-dynamic-module=/usr/src/ngx_brotli \\\n\t\" \\\n\t&& addgroup -S nginx \\\n\t&& adduser -D -S -h /var/cache/nginx -s /sbin/nologin -G nginx nginx \\\n\t&& apk add --no-cache --virtual .build-deps \\\n\t\tautoconf \\\n\t\tautomake \\\n\t\tbind-tools \\\n\t\tbinutils \\\n\t\tbuild-base \\\n\t\tca-certificates \\\n\t\tcmake \\\n\t\tcurl \\\n\t\tgcc \\\n\t\tgd-dev \\\n\t\tgeoip-dev \\\n\t\tgit \\\n\t\tgnupg \\\n\t\tgnupg \\\n\t\tgo \\\n\t\tlibc-dev \\\n\t\tlibgcc \\\n\t\tlibstdc++ \\\n\t\tlibtool \\\n\t\tlibxslt-dev \\\n\t\tlinux-headers \\\n\t\tmake \\\n\t\tpcre \\\n\t\tpcre-dev \\\n\t\tperl-dev \\\n\t\tsu-exec \\\n\t\ttar \\\n\t\ttzdata \\\n\t\tzlib \\\n\t\tzlib-dev \\\n\t&& curl -fSL https://nginx.org/download/nginx-$NGINX_VERSION.tar.gz -o nginx.tar.gz \\\n\t&& curl -fSL https://nginx.org/download/nginx-$NGINX_VERSION.tar.gz.asc  -o nginx.tar.gz.asc \\\n\t&& export GNUPGHOME=\"$(mktemp -d)\" \\\n\t&& found=''; \\\n\tfor server in \\\n\t\tha.pool.sks-keyservers.net \\\n\t\thkp://keyserver.ubuntu.com:80 \\\n\t\thkp://p80.pool.sks-keyservers.net:80 \\\n\t\tpgp.mit.edu; \\\n\tdo \\\n\t\techo \"Fetching GPG key $GPG_KEYS from $server\"; \\\n\t\tgpg --batch --keyserver \"$server\" --keyserver-options timeout=10 --recv-keys \"$GPG_KEYS\" && found=yes && break; \\\n\tdone; \\\n\ttest -z \"$found\" && echo >&2 \"error: failed to fetch GPG key $GPG_KEYS\" && exit 1; \\\n\tgpg --batch --verify nginx.tar.gz.asc nginx.tar.gz \\\n\t&& rm -rf \"$GNUPGHOME\" nginx.tar.gz.asc \\\n\t&& mkdir -p /usr/src \\\n\t\\\n\t&& git clone --depth=1 --recurse-submodules https://github.com/eustas/ngx_brotli /usr/src/ngx_brotli \\\n\t&& git clone --depth=1 https://github.com/openresty/headers-more-nginx-module /usr/src/ngx_headers_more \\\n\t&& (git clone --depth=1 https://boringssl.googlesource.com/boringssl /usr/src/boringssl \\\n\t\t&& sed -i 's@out \\([>=]\\) TLS1_2_VERSION@out \\1 TLS1_3_VERSION@' /usr/src/boringssl/ssl/ssl_lib.cc \\\n\t\t&& sed -i 's@ssl->version[ ]*=[ ]*TLS1_2_VERSION@ssl->version = TLS1_3_VERSION@' /usr/src/boringssl/ssl/s3_lib.cc \\\n\t\t&& sed -i 's@(SSL3_VERSION, TLS1_2_VERSION@(SSL3_VERSION, TLS1_3_VERSION@' /usr/src/boringssl/ssl/ssl_test.cc \\\n\t\t&& sed -i 's@\\$shaext[ ]*=[ ]*0;@\\$shaext = 1;@' /usr/src/boringssl/crypto/*/asm/*.pl \\\n\t\t&& sed -i 's@\\$avx[ ]*=[ ]*[0|1];@\\$avx = 2;@' /usr/src/boringssl/crypto/*/asm/*.pl \\\n\t\t&& sed -i 's@\\$addx[ ]*=[ ]*0;@\\$addx = 1;@' /usr/src/boringssl/crypto/*/asm/*.pl \\\n\t\t&& mkdir -p /usr/src/boringssl/build /usr/src/boringssl/.openssl/lib /usr/src/boringssl/.openssl/include \\\n\t\t&& ln -sf /usr/src/boringssl/include/openssl /usr/src/boringssl/.openssl/include/openssl \\\n\t\t&& touch /usr/src/boringssl/.openssl/include/openssl/ssl.h \\\n\t\t&& cmake -B/usr/src/boringssl/build -H/usr/src/boringssl \\\n\t\t&& make -C/usr/src/boringssl/build -j$(getconf _NPROCESSORS_ONLN) \\\n\t\t&& cp /usr/src/boringssl/build/crypto/libcrypto.a /usr/src/boringssl/build/ssl/libssl.a /usr/src/boringssl/.openssl/lib) \\\n\t\\\n\t&& tar -zxC /usr/src -f nginx.tar.gz \\\n\t&& rm nginx.tar.gz \\\n\t&& cd /usr/src/nginx-$NGINX_VERSION \\\n\t&& curl -fSL https://raw.githubusercontent.com/nginx-modules/ngx_http_tls_dyn_size/0.4/nginx__dynamic_tls_records_1.15.5%2B.patch -o dynamic_tls_records.patch \\\n\t&& patch -p1 < dynamic_tls_records.patch \\\n\t&& ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" $CONFIG --with-debug \\\n\t&& make -j$(getconf _NPROCESSORS_ONLN) \\\n\t&& mv objs/nginx objs/nginx-debug \\\n\t&& mv objs/ngx_http_xslt_filter_module.so objs/ngx_http_xslt_filter_module-debug.so \\\n\t&& mv objs/ngx_http_image_filter_module.so objs/ngx_http_image_filter_module-debug.so \\\n\t&& mv objs/ngx_http_geoip_module.so objs/ngx_http_geoip_module-debug.so \\\n\t&& mv objs/ngx_http_perl_module.so objs/ngx_http_perl_module-debug.so \\\n\t&& mv objs/ngx_stream_geoip_module.so objs/ngx_stream_geoip_module-debug.so \\\n\t&& ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" $CONFIG \\\n\t&& make -j$(getconf _NPROCESSORS_ONLN) \\\n\t&& make install \\\n\t&& rm -rf /etc/nginx/html/ \\\n\t&& mkdir /etc/nginx/conf.d/ \\\n\t&& mkdir -p /usr/share/nginx/html/ \\\n\t&& install -m644 html/index.html /usr/share/nginx/html/ \\\n\t&& install -m644 html/50x.html /usr/share/nginx/html/ \\\n\t&& install -m755 objs/nginx-debug /usr/sbin/nginx-debug \\\n\t&& install -m755 objs/ngx_http_xslt_filter_module-debug.so /usr/lib/nginx/modules/ngx_http_xslt_filter_module-debug.so \\\n\t&& install -m755 objs/ngx_http_image_filter_module-debug.so /usr/lib/nginx/modules/ngx_http_image_filter_module-debug.so \\\n\t&& install -m755 objs/ngx_http_geoip_module-debug.so /usr/lib/nginx/modules/ngx_http_geoip_module-debug.so \\\n\t&& install -m755 objs/ngx_http_perl_module-debug.so /usr/lib/nginx/modules/ngx_http_perl_module-debug.so \\\n\t&& install -m755 objs/ngx_stream_geoip_module-debug.so /usr/lib/nginx/modules/ngx_stream_geoip_module-debug.so \\\n\t&& ln -s ../../usr/lib/nginx/modules /etc/nginx/modules \\\n\t&& strip /usr/sbin/nginx* \\\n\t&& strip /usr/lib/nginx/modules/*.so \\\n\t&& rm -rf /usr/src/nginx-$NGINX_VERSION \\\n\t&& rm -rf /usr/src/boringssl /usr/src/ngx_* \\\n\n\t# Bring in gettext so we can get `envsubst`, then throw\n\t# the rest away. To do this, we need to install `gettext`\n\t# then move `envsubst` out of the way so `gettext` can\n\t# be deleted completely, then move `envsubst` back.\n\t&& apk add --no-cache --virtual .gettext gettext \\\n\t&& mv /usr/bin/envsubst /tmp/ \\\n\n\t&& runDeps=\"$( \\\n\t\tscanelf --needed --nobanner /usr/sbin/nginx /usr/lib/nginx/modules/*.so /tmp/envsubst \\\n\t\t\t| awk '{ gsub(/,/, \"\\nso:\", $2); print \"so:\" $2 }' \\\n\t\t\t| sort -u \\\n\t\t\t| xargs -r apk info --installed \\\n\t\t\t| sort -u \\\n\t) tzdata ca-certificates\" \\\n\t&& apk add --no-cache --virtual .nginx-rundeps $runDeps \\\n\t&& apk del .build-deps \\\n\t&& apk del .gettext \\\n\t&& mv /tmp/envsubst /usr/local/bin/ \\\n\n\t# forward request and error logs to docker log collector\n\t&& ln -sf /dev/stdout /var/log/nginx/access.log \\\n\t&& ln -sf /dev/stderr /var/log/nginx/error.log\n\nCOPY nginx.conf /etc/nginx/nginx.conf\nCOPY nginx.vh.no-default.conf /etc/nginx/conf.d/default.conf\n\nLABEL description=\"NGINX Docker built top of rolling release BoringSSL\" \\\n      maintainer=\"Denis Denisov <denji0k@gmail.com>\" \\\n      openssl=\"BoringSSL\" \\\n      nginx=\"nginx $NGINX_VERSION\"\n\nEXPOSE 80 443\n\nSTOPSIGNAL SIGTERM\n\nCMD [\"nginx\", \"-g\", \"daemon off;\"]\n"
}