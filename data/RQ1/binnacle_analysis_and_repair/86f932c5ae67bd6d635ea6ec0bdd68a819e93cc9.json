{
  "startTime": 1674252507491,
  "endTime": 1674252507902,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 58,
        "lineEnd": 58,
        "columnStart": 39,
        "columnEnd": 104
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 70,
        "lineEnd": 70,
        "columnStart": 55,
        "columnEnd": 130
      }
    },
    {
      "rule": "curlUseHttpsUrl",
      "position": {
        "lineStart": 58,
        "lineEnd": 58,
        "columnStart": 39,
        "columnEnd": 104
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 59,
        "lineEnd": 59,
        "columnStart": 20,
        "columnEnd": 63
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 27,
        "lineEnd": 46,
        "columnStart": 4,
        "columnEnd": 16
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 27,
        "lineEnd": 46,
        "columnStart": 4,
        "columnEnd": 16
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 27,
        "lineEnd": 46,
        "columnStart": 4,
        "columnEnd": 16
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# gitlab-ci-runner-nodejs ¯\\_(ツ)_/¯\n\nFROM ubuntu:12.04.5\nMAINTAINER  Bernhard Weisshuhn \"bkw@codingforce.com\"\n\n# Based on https://github.com/gitlabhq/gitlab-ci-runner/blob/master/Dockerfile\n# by Sytse Sijbrandij <sytse@gitlab.com>\n\n# This script will start a runner in a docker container.\n#\n# First build the container and give a name to the resulting image:\n# docker build -t codingforce/gitlab-ci-runner-nodejs github.com/bkw/gitlab-ci-runner-nodejs\n#\n# Then set the environment variables and run the gitlab-ci-runner in the container:\n# docker run -e CI_SERVER_URL=https://ci.example.com -e REGISTRATION_TOKEN=replaceme -e HOME=/root -e GITLAB_SERVER_FQDN=gitlab.example.com codingforce/gitlab-ci-runner-nodejs\n#\n# After you start the runner you can send it to the background with ctrl-z\n# The new runner should show up in the GitLab CI interface on /runners\n#\n# You can start an interactive session to test new commands with:\n# docker run -e CI_SERVER_URL=https://ci.example.com -e REGISTRATION_TOKEN=replaceme -e HOME=/root -i -t codingforce/gitlab-ci-runner-nodejs:latest /bin/bash\n#\n# If you ever want to freshly rebuild the runner please use:\n# docker build -no-cache -t codingforce/gitlab-ci-runner-nodejs github.com/bkw/gitlab-ci-runner-nodejs\n\n# Update your packages and install the ones that are needed to compile Ruby\nRUN apt-get update -y && apt-get install --no-install-recommends -y \\\n  wget \\\n  curl \\\n  gcc \\\n  libxml2-dev \\\n  libxslt-dev \\\n  libcurl4-openssl-dev \\\n  libreadline6-dev \\\n  libc6-dev \\\n  libssl-dev \\\n  make \\\n  build-essential \\\n  zlib1g-dev \\\n  openssh-server \\\n  git-core \\\n  libyaml-dev \\\n  postfix \\\n  libicu-dev \\\n  libfreetype6 \\\n  libfontconfig1 && rm -rf /var/lib/apt/lists/*;\n\n# Fix upstart under a virtual host https://github.com/dotcloud/docker/issues/1024\n# RUN dpkg-divert --local --rename --add /sbin/initctl\n# RUN ln -nfs /bin/true /sbin/initctl\n\n# Set the right locale\nRUN echo \"LC_ALL=\\\"en_US.UTF-8\\\"\" >> /etc/default/locale\nRUN locale-gen en_US.UTF-8\nRUN update-locale LANG=en_US.UTF-8\n\n# Download Ruby and compile it\nRUN mkdir /tmp/ruby && cd /tmp/ruby && curl -f -s https://ftp.ruby-lang.org/pub/ruby/ruby-2.0-stable.tar.bz2 | tar xj --strip-components=1\nRUN cd /tmp/ruby && ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --disable-install-rdoc --silent && make && make install\nRUN rm -rf /tmp/ruby\n\n# don't install ruby rdocs or ri:\nRUN echo \"gem: --no-rdoc --no-ri\" >> /usr/local/etc/gemrc\n\n# Prepare a known host file for non-interactive ssh connections\nRUN mkdir -p /root/.ssh\nRUN touch /root/.ssh/known_hosts\n\n# Install the runner\nRUN mkdir /gitlab-ci-runner && cd /gitlab-ci-runner && curl -f -sL https://github.com/gitlabhq/gitlab-ci-runner/archive/v5.0.0.tar.gz | tar xz --strip-components=1\n\n# Install the gems for the runner\nRUN cd /gitlab-ci-runner && gem install bundler && bundle install\n\n# Install some usefull gems for web development\nRUN gem install compass sass\n\n# Download nodejs and compile it\n# RUN mkdir /tmp/node && cd /tmp/node && curl -s http://nodejs.org/dist/node-latest.tar.gz | tar xz --strip-components=1\n# RUN cd /tmp/node  && ./configure && make && make install\n# RUN rm -rf /tmp/node\n\nRUN wget -qO- https://raw.github.com/creationix/nvm/master/install.sh | sh\nRUN echo '. /.nvm/nvm.sh' >> /root/.bashrc\nRUN cat /root/.bashrc /.nvm/nvm.sh\n\nRUN bash -c '. /.nvm/nvm.sh ; nvm install 0.10'\nRUN bash -c '. /.nvm/nvm.sh ; nvm install 0.11'\nRUN bash -c '. /.nvm/nvm.sh ; nvm alias default 0.10'\n\n\n# update npm and install some basics\nRUN bash -c '. /.nvm/nvm.sh ; npm update -g npm'\nRUN bash -c '. /.nvm/nvm.sh ; npm install -g phantomjs grunt grunt-cli bower'\n\n# When the image is started add the remote server key, install the runner and run it\nWORKDIR /gitlab-ci-runner\nCMD ssh-keyscan -H $GITLAB_SERVER_FQDN >> /root/.ssh/known_hosts & bundle exec ./bin/setup_and_run\n\n"
}