{
  "startTime": 1674250341118,
  "endTime": 1674250341274,
  "originalSmells": [
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 35,
        "lineEnd": 35,
        "columnStart": 4,
        "columnEnd": 40
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 0,
        "lineEnd": 0,
        "columnStart": 4,
        "columnEnd": 44
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 27,
        "lineEnd": 30,
        "columnStart": 22,
        "columnEnd": 14
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# Builds a base Docker image to run a Flask application using the uWSGI\n# application server.\n#\n# !!! Requirements for the downstream build !!!\n#\n#  (1) Declare a CMD instruction to start the uWSGI application server.\n#      For example:\n#        CMD [\"uwsgi\", \"--http :5000 --wsgi-file app.py --callable app --processes 2 --threads 4\"]\n#\n#        If running behind a webserver using the uwsgi protocol (like nginx)\n#        then use `--socket` instead of `--http`.\n#\n#      For more info, see:\n#        https://uwsgi-docs.readthedocs.org/en/latest/WSGIquickstart.html\n#        http://uwsgi-docs.readthedocs.org/en/latest/Nginx.html\n#\n#  (2) Expose the port uWSGI will run on.\n#      For example:\n#        EXPOSE 5000\n#\n# TODOs for this Dockerfile...\n#  * See about running uWSGI as a non-root user\n#\nFROM debian:wheezy\nMAINTAINER Levi Bracken <levi.bracken@gmail.com>\n\n# Get and install required packages.\nRUN apt-get update && apt-get install --no-install-recommends -y -q \\\n    build-essential \\\n    python-dev \\\n    python-pip \\\n  && rm -rf /var/lib/apt/lists/*\n\n# Install required dependencies (includes Flask and uWSGI)\nCOPY requirements.txt /tmp/\nRUN pip install --no-cache-dir -r /tmp/requirements.txt\n\n# Create a place to deploy the application\nENV APP_DIR /var/www/app\nRUN mkdir -p $APP_DIR\nWORKDIR $APP_DIR\n\n# When building a downstream image, copy the application files and then setup\n# additional dependencies. It's assumed the application files are present in\n# the same directory as the downstream build's Dockerfile.\nONBUILD COPY . $APP_DIR/\n \\\nRUN pip install --no-cache-dir -r $APP_DIR/requirements.txtONBUILD"
}