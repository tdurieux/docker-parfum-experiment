{
  "startTime": 1674245775704,
  "endTime": 1674245775934,
  "originalSmells": [
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 24,
        "lineEnd": 24,
        "columnStart": 4,
        "columnEnd": 29
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 25,
        "lineEnd": 25,
        "columnStart": 4,
        "columnEnd": 26
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 26,
        "lineEnd": 26,
        "columnStart": 4,
        "columnEnd": 33
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 29,
        "lineEnd": 29,
        "columnStart": 4,
        "columnEnd": 35
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 10,
        "lineEnd": 10,
        "columnStart": 4,
        "columnEnd": 44
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 10,
        "lineEnd": 10,
        "columnStart": 4,
        "columnEnd": 44
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 10,
        "lineEnd": 10,
        "columnStart": 4,
        "columnEnd": 44
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM nvidia/cuda:8.0-cudnn5-devel-ubuntu16.04\n\n# create a non-root user named \"docker\"\n# we will use this when the user is logged in\nRUN useradd -ms /bin/bash docker\nUSER root\nENV DOCKER_HOME /home/docker\n\n# install apt dependencies and clone the repo\nRUN apt-get update && apt-get install --no-install-recommends -y git python python-pip && rm -rf /var/lib/apt/lists/*;\nWORKDIR $DOCKER_HOME\nRUN git clone https://github.com/brannondorsey/ml4music-workshop.git\nWORKDIR $DOCKER_HOME/ml4music-workshop\nRUN git submodule init\nRUN git submodule update\n\n# remove unnecessary files\nRUN rm setup_wavenet_venv.sh\nRUN rm start.sh\nRUN rm Dockerfile\nRUN rm -rf notebooks\n\n# instal pip and pip dependencies\nRUN pip install --no-cache-dir --upgrade pip\nRUN pip install --no-cache-dir virtualenv\nRUN pip install --no-cache-dir tensorflow==1.0.1\n\nWORKDIR $DOCKER_HOME/ml4music-workshop/midi-rnn\nRUN pip install --no-cache-dir -r requirements.txt\n\n# install and setup a virtual env for tensorflow-wavenet\n# as it requires a conflicting version of tensorflow from char-rnn-tensorflow\nWORKDIR $DOCKER_HOME/ml4music-workshop/tensorflow-wavenet\nRUN virtualenv venv\nCOPY setup_wavenet_venv.sh $DOCKER_HOME/ml4music-workshop/tensorflow-wavenet/setup_wavenet_venv.sh\nRUN $DOCKER_HOME/ml4music-workshop/tensorflow-wavenet/setup_wavenet_venv.sh\nRUN rm setup_wavenet_venv.sh\n\nWORKDIR $DOCKER_HOME/ml4music-workshop\n\nRUN chown -R docker:docker ./\nUSER docker\n\n# expose tensorboard ports\n# 7006 - char-rnn\n# 7007 - midi-rnn\n# 7008 - wavene7\n\nEXPOSE 7006\nEXPOSE 7007\nEXPOSE 7008\n\nCMD tensorboard --port 7006 --logdir $DOCKER_HOME/ml4music-workshop/char-rnn-tensorflow/logs &> /dev/null && \\\n    tensorboard --port 7007 --logdir $DOCKER_HOME/ml4music-workshop/midi-rnn/experiments &> /dev/null && \\\n    tensorboard --port 7008 --logdir $DOCKER_HOME/ml4music-workshop/tensorflow-wavenet/logdir &> /dev/null && bash\n"
}