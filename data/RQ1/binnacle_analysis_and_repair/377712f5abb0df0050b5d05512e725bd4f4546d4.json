{
  "startTime": 1674243080268,
  "endTime": 1674243080510,
  "originalSmells": [
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 10,
        "lineEnd": 10,
        "columnStart": 4,
        "columnEnd": 91
      }
    },
    {
      "rule": "apkAddUseNoCache",
      "position": {
        "lineStart": 6,
        "lineEnd": 6,
        "columnStart": 4,
        "columnEnd": 105
      }
    },
    {
      "rule": "apkAddUseNoCache",
      "position": {
        "lineStart": 63,
        "lineEnd": 63,
        "columnStart": 4,
        "columnEnd": 58
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "#\n# Python Dependencies\n#\nFROM alpine:3.9.3 as python\n\nRUN sed -i 's|http://dl-cdn.alpinelinux.org|https://alpine.global.ssl.fastly.net|g' /etc/apk/repositories\nRUN apk add --no-cache python python-dev libffi-dev gcc py-pip py-virtualenv linux-headers musl-dev openssl-dev make\n\nCOPY requirements.txt /requirements.txt\n\nRUN pip install --no-cache-dir -r /requirements.txt --install-option=\"--prefix=/dist\" --no-build-isolation\n\n#\n# Google Cloud SDK\n#\nFROM google/cloud-sdk:244.0.0-alpine as google-cloud-sdk\n\n#\n# Cloud Posse Package Distribution\n#\nFROM cloudposse/packages:0.90.0 as packages\n\nWORKDIR /packages\n\n#\n# Install the select packages from the cloudposse package manager image\n#\n# Repo: <https://github.com/cloudposse/packages>\n#\nARG PACKAGES=\"cfssl cfssljson\"\nENV PACKAGES=${PACKAGES}\nRUN make dist\n\n\n#\n# Geodesic base image\n#\nFROM alpine:3.9.3\n\nENV BANNER \"geodesic\"\n\nENV MOTD_URL=http://geodesic.sh/motd\nENV HOME=/conf\nENV KOPS_CLUSTER_NAME=example.foo.bar\n\n# Install all packages as root\nUSER root\n\n# Install the cloudposse alpine repository\nADD https://apk.cloudposse.com/ops@cloudposse.com.rsa.pub /etc/apk/keys/\nRUN echo \"@cloudposse https://apk.cloudposse.com/3.9/vendor\" >> /etc/apk/repositories\n\n# Use TLS for alpine default repos\nRUN sed -i 's|http://dl-cdn.alpinelinux.org|https://alpine.global.ssl.fastly.net|g' /etc/apk/repositories && \\\n    echo \"@testing https://alpine.global.ssl.fastly.net/alpine/edge/testing\" >> /etc/apk/repositories && \\\n    echo \"@community https://alpine.global.ssl.fastly.net/alpine/edge/community\" >> /etc/apk/repositories\n\n# Install alpine package manifest\nCOPY packages.txt /etc/apk/\n# Install repo checksum in an attempt to ensure updates bust the Docker build cache\nCOPY geodesic_apkindex.md5 /var/cache/apk/\nCOPY rootfs/usr/local/bin/geodesic-apkindex-md5 /tmp/\n\nRUN apk add --no-cache --update $(grep -v '^#' /etc/apk/packages.txt) && \\\n    mkdir -p /etc/bash_completion.d/ /etc/profile.d/ /conf && \\\n    touch /conf/.gitconfig\n\nRUN [[ $(/tmp/geodesic-apkindex-md5) == $(cat /var/cache/apk/geodesic_apkindex.md5) ]] || echo \"WARNING: apk package repos mismatch: '$(/tmp/geodesic-apkindex-md5)' != '$(cat /var/cache/apk/geodesic_apkindex.md5)'\" 1>&2\nRUN rm -f /tmp/geodesic-apkindex-md5\n\nRUN echo \"net.ipv6.conf.all.disable_ipv6=0\" > /etc/sysctl.d/00-ipv6.conf\n\n# Disable vim from reading a swapfile (incompatible with goofys)\nRUN echo 'set noswapfile' >> /etc/vim/vimrc\n\nWORKDIR /tmp\n\n# Copy python dependencies\nCOPY --from=python /dist/ /usr/\n\n# Copy installer over to make package upgrades easy\nCOPY --from=packages /packages/install/ /packages/install/\n\n# Copy select binary packages\nCOPY --from=packages /dist/ /usr/local/bin/\n\n#\n# Install Google Cloud SDK\n#\nENV CLOUDSDK_CONFIG=/localhost/.config/gcloud/\n\nCOPY --from=google-cloud-sdk /google-cloud-sdk/ /usr/local/google-cloud-sdk/\n\nRUN ln -s /usr/local/google-cloud-sdk/completion.bash.inc /etc/bash_completion.d/gcloud.sh && \\\n    ln -s /usr/local/google-cloud-sdk/bin/gcloud /usr/local/bin/ && \\\n    ln -s /usr/local/google-cloud-sdk/bin/gsutil /usr/local/bin/ && \\\n    ln -s /usr/local/google-cloud-sdk/bin/bq /usr/local/bin/ && \\\n    gcloud config set core/disable_usage_reporting true --installation && \\\n    gcloud config set component_manager/disable_update_check true --installation && \\\n    gcloud config set metrics/environment github_docker_image --installation\n\n#\n# Configure aws-okta to easily assume roles\n#\nENV AWS_OKTA_ENABLED=false\n\n#\n# Install kubectl\n#\n# Set KUBERNETES_VERSION and KOPS_BASE_IMAGE in /conf/kops/kops.envrc\nRUN kubectl completion bash > /etc/bash_completion.d/kubectl.sh\nENV KUBECTX_COMPLETION_VERSION 0.6.2\nADD https://raw.githubusercontent.com/ahmetb/kubectx/v${KUBECTX_COMPLETION_VERSION}/completion/kubens.bash /etc/bash_completion.d/kubens.sh\nADD https://raw.githubusercontent.com/ahmetb/kubectx/v${KUBECTX_COMPLETION_VERSION}/completion/kubectx.bash /etc/bash_completion.d/kubectx.sh\n\n#\n# Install kops\n#\nENV KOPS_MANIFEST=/conf/kops/manifest.yaml\nENV KOPS_TEMPLATE=/templates/kops/default.yaml\n## Set these to better values in child Dockerfile:\n#ENV KOPS_STATE_STORE s3://undefined\n#ENV KOPS_STATE_STORE_REGION us-east-1\n#ENV KOPS_FEATURE_FLAGS=+DrainAndValidateRollingUpdate\n\nENV KOPS_BASTION_PUBLIC_NAME=\"bastion\"\n\n# Set the KOPS_BASE_IMAGE to match your kops version. See:\n# https://github.com/kubernetes/kops/blob/master/channels/stable\n# https://github.com/kubernetes/kops/blob/master/docs/images.md\n#\n# Do not rely on KOPS_BASE_IMAGE being set in Geodesic. This will go away in future versions.\n# Set it in your /conf/kops/kops.envrc file, along with KUBERNETES_VERSION\n# ENV KOPS_BASE_IMAGE=kope.io/k8s-1.11-debian-stretch-amd64-hvm-ebs-2018-08-17\n\nENV KUBECONFIG=/dev/shm/kubecfg\nENV KUBECONFIG_TEMPLATE=/templates/kops/kubecfg.yaml\n\nRUN /usr/bin/kops completion bash > /etc/bash_completion.d/kops.sh\n\n# Instance sizes\nENV BASTION_MACHINE_TYPE \"t3.small\"\nENV MASTER_MACHINE_TYPE \"t3.medium\"\nENV NODE_MACHINE_TYPE \"t3.medium\"\n\n# Min/Max number of nodes (aka workers)\nENV NODE_MAX_SIZE 2\nENV NODE_MIN_SIZE 2\n\n#\n# Install helm\n#\nENV HELM_HOME /var/lib/helm\nENV HELM_VALUES_PATH=${SECRETS_PATH}/helm/values\nRUN helm completion bash > /etc/bash_completion.d/helm.sh \\\n    && mkdir -p ${HELM_HOME} \\\n    && helm init --client-only \\\n    && mkdir -p ${HELM_HOME}/plugins\n\n#\n# Install helm repos\n#\nRUN helm repo add cloudposse-incubator https://charts.cloudposse.com/incubator/ \\\n    && helm repo add incubator  https://kubernetes-charts-incubator.storage.googleapis.com/ \\\n    && helm repo add coreos-stable https://s3-eu-west-1.amazonaws.com/coreos-charts/stable/ \\\n    && helm repo update\n\n#\n# Install helm plugins\n#\nENV HELM_APPR_VERSION 0.7.0\nENV HELM_DIFF_VERSION 2.11.0+2\nENV HELM_EDIT_VERSION 0.2.0\nENV HELM_GIT_VERSION 0.3.0\nENV HELM_SECRETS_VERSION 1.2.9\nENV HELM_S3_VERSION 0.7.0\nENV HELM_PUSH_VERSION 0.7.1\n\nRUN helm plugin install https://github.com/app-registry/appr-helm-plugin --version v${HELM_APPR_VERSION} \\\n    && helm plugin install https://github.com/databus23/helm-diff --version v${HELM_DIFF_VERSION} \\\n    && helm plugin install https://github.com/mstrzele/helm-edit --version v${HELM_EDIT_VERSION} \\\n    && helm plugin install https://github.com/futuresimple/helm-secrets --version ${HELM_SECRETS_VERSION} \\\n    && helm plugin install https://github.com/aslafy-z/helm-git.git --version ${HELM_GIT_VERSION} \\\n    && helm plugin install https://github.com/hypnoglow/helm-s3 --version v${HELM_S3_VERSION} \\\n    && helm plugin install https://github.com/chartmuseum/helm-push --version v${HELM_PUSH_VERSION}\n\n# Enable Atlantis to manage helm\nRUN chmod -R 777 /var/lib/helm\n\n#\n# Install fancy Kube PS1 Prompt\n#\nENV KUBE_PS1_VERSION 0.6.0\nADD https://raw.githubusercontent.com/jonmosco/kube-ps1/${KUBE_PS1_VERSION}/kube-ps1.sh /etc/profile.d/prompt:kube-ps1.sh\n\n#\n# AWS\n#\nENV AWS_DATA_PATH=/localhost/.aws\nENV AWS_CONFIG_FILE=${AWS_DATA_PATH}/config\nENV AWS_SHARED_CREDENTIALS_FILE=${AWS_DATA_PATH}/credentials\n\n#\n# Configure aws-vault to easily assume roles (not related to HashiCorp Vault)\n#\nENV AWS_VAULT_ENABLED=true\nENV AWS_VAULT_SERVER_ENABLED=false\nENV AWS_VAULT_BACKEND=file\nENV AWS_VAULT_ASSUME_ROLE_TTL=1h\nENV AWS_VAULT_SESSION_TTL=12h\n#ENV AWS_VAULT_FILE_PASSPHRASE=\n\n#\n# Shell\n#\nENV SHELL=/bin/bash\nENV LESS=R\nENV SSH_AGENT_CONFIG=/var/tmp/.ssh-agent\n\n# Set a default terminal to \"dumb\" (headless) to make `tput` happy\nENV TERM=dumb\n\n# Reduce `make` verbosity\nENV MAKEFLAGS=\"--no-print-directory\"\nENV MAKE_INCLUDES=\"Makefile Makefile.*\"\n\n# This is not a \"multi-user\" system, so we'll use `/etc` as the global configuration dir\n# Read more: <https://wiki.archlinux.org/index.php/XDG_Base_Directory>\nENV XDG_CONFIG_HOME=/etc\n\n# Clean up file modes for scripts\nRUN find ${XDG_CONFIG_HOME} -type f -name '*.sh' -exec chmod 755 {} \\;\n\n# Install \"root\" filesystem\nCOPY rootfs/ /\n\n# Install documentation\nCOPY docs/ /usr/share/docs/\n\n# Build man pages\nRUN /usr/local/bin/docs update\n\nWORKDIR /conf\n\nENTRYPOINT [\"/bin/bash\"]\nCMD [\"-c\", \"init\"]\n"
}