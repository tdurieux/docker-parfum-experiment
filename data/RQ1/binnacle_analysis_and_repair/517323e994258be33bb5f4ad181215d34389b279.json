{
  "startTime": 1674249120217,
  "endTime": 1674249120352,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 22,
        "lineEnd": 22,
        "columnStart": 4,
        "columnEnd": 135
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 45,
        "lineEnd": 45,
        "columnStart": 4,
        "columnEnd": 66
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 18,
        "lineEnd": 18,
        "columnStart": 4,
        "columnEnd": 36
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 18,
        "lineEnd": 18,
        "columnStart": 4,
        "columnEnd": 36
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 18,
        "lineEnd": 18,
        "columnStart": 4,
        "columnEnd": 36
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "ARG JDK_VER=11\nARG BAZEL_VER=0.27.0\nARG JOBS=2\n\n# First stage is the build environment.\nFROM ubuntu:18.04 as builder\n\nENV BUILD_DEPS \\\n    ca-certificates \\\n    zip \\\n    python \\\n    python3 \\\n    git \\\n    bzip2 \\\n    build-essential \\\n    curl \\\n    unzip\nRUN apt-get update && apt-get install --no-install-recommends -y ${BUILD_DEPS} && rm -rf /var/lib/apt/lists/*;\n\n# Install Bazel\nARG BAZEL_VER\nRUN curl -f -L -o bazel.sh https://github.com/bazelbuild/bazel/releases/download/${BAZEL_VER}/bazel-${BAZEL_VER}-installer-linux-x86_64.sh\nRUN chmod +x bazel.sh && ./bazel.sh --user\n\n# Build-stage environment variables\nENV ONOS_ROOT=/src/onos\nENV BUILD_NUMBER docker\nENV JAVA_TOOL_OPTIONS=-Dfile.encoding=UTF8\n\n# Build ONOS. We extract the tar in the build environment to avoid having to put\n# the tar in the runtime stage. This saves a lot of space.\n# Note: we don't install a JDK but instead we rely on that provided by Bazel.\n\n# Copy in the sources\nCOPY . ${ONOS_ROOT}\nWORKDIR ${ONOS_ROOT}\n\nARG JOBS\nENV BAZEL_BUILD_ARGS \\\n    --jobs ${JOBS} \\\n    --verbose_failures\nRUN ~/bin/bazel build onos ${BAZEL_BUILD_ARGS}\n\nRUN mkdir /src/tar\nRUN tar -xf bazel-bin/onos.tar.gz -C /src/tar --strip-components=1 && rm bazel-bin/onos.tar.gz\n\n# Second stage is the runtime environment.\n# We use Amazon Corretto official Docker image, bazed on Amazon Linux 2 (rhel/fedora like)\nFROM amazoncorretto:${JDK_VER}\n\nMAINTAINER Ray Milkey <ray@opennetworking.org>\n\n# Change to /root directory\nRUN     mkdir -p /root/onos\nWORKDIR /root/onos\n\n# Install ONOS\nCOPY --from=builder /src/tar/ .\n\n# Configure ONOS to log to stdout\nRUN sed -ibak '/log4j.rootLogger=/s/$/, stdout/' $(ls -d apache-karaf-*)/etc/org.ops4j.pax.logging.cfg\n\nLABEL org.label-schema.name=\"ONOS\" \\\n      org.label-schema.description=\"SDN Controller\" \\\n      org.label-schema.usage=\"http://wiki.onosproject.org\" \\\n      org.label-schema.url=\"http://onosproject.org\" \\\n      org.label-scheme.vendor=\"Open Networking Foundation\" \\\n      org.label-schema.schema-version=\"1.0\"\n\n# Ports\n# 6653 - OpenFlow\n# 6640 - OVSDB\n# 8181 - GUI\n# 8101 - ONOS CLI\n# 9876 - ONOS intra-cluster communication\nEXPOSE 6653 6640 8181 8101 9876\n\n# Get ready to run command\nENTRYPOINT [\"./bin/onos-service\"]\nCMD [\"server\"]\n"
}