{
  "startTime": 1674249377637,
  "endTime": 1674249378595,
  "originalSmells": [
    {
      "rule": "wgetUseHttpsUrl",
      "position": {
        "lineStart": 103,
        "lineEnd": 103,
        "columnStart": 4,
        "columnEnd": 63
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 49,
        "lineEnd": 49,
        "columnStart": 4,
        "columnEnd": 32
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 33,
        "lineEnd": 33,
        "columnStart": 7,
        "columnEnd": 18
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 106,
        "lineEnd": 106,
        "columnStart": 11,
        "columnEnd": 22
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 112,
        "lineEnd": 112,
        "columnStart": 34,
        "columnEnd": 45
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 117,
        "lineEnd": 117,
        "columnStart": 23,
        "columnEnd": 34
      }
    },
    {
      "rule": "yumInstallRmVarCacheYum",
      "position": {
        "lineStart": 8,
        "lineEnd": 18,
        "columnStart": 7,
        "columnEnd": 29
      }
    },
    {
      "rule": "yumInstallRmVarCacheYum",
      "position": {
        "lineStart": 123,
        "lineEnd": 123,
        "columnStart": 4,
        "columnEnd": 31
      }
    },
    {
      "rule": "yumInstallRmVarCacheYum",
      "position": {
        "lineStart": 126,
        "lineEnd": 136,
        "columnStart": 4,
        "columnEnd": 31
      }
    },
    {
      "rule": "yumInstallRmVarCacheYum",
      "position": {
        "lineStart": 169,
        "lineEnd": 169,
        "columnStart": 4,
        "columnEnd": 34
      }
    },
    {
      "rule": "yumInstallRmVarCacheYum",
      "position": {
        "lineStart": 176,
        "lineEnd": 176,
        "columnStart": 4,
        "columnEnd": 28
      }
    },
    {
      "rule": "yumInstallRmVarCacheYum",
      "position": {
        "lineStart": 177,
        "lineEnd": 177,
        "columnStart": 4,
        "columnEnd": 34
      }
    },
    {
      "rule": "yumInstallRmVarCacheYum",
      "position": {
        "lineStart": 196,
        "lineEnd": 196,
        "columnStart": 4,
        "columnEnd": 33
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 31,
        "lineEnd": 31,
        "columnStart": 7,
        "columnEnd": 39
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 104,
        "lineEnd": 104,
        "columnStart": 11,
        "columnEnd": 42
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 116,
        "lineEnd": 116,
        "columnStart": 4,
        "columnEnd": 32
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM centos:7\n\nRUN useradd jenkins -u 1500 -g root\n\nRUN rpm --import file:///etc/pki/rpm-gpg/RPM-GPG-KEY-CentOS-7\nRUN rpm -iUvh http://dl.fedoraproject.org/pub/epel/7/x86_64/e/epel-release-7-10.noarch.rpm\n\nRUN yum -y update \\\n    && yum -y install wget curl \\\n                      make m4 gcc patch unzip \\\n                      git rsync mercurial \\\n                      gcc-c++ \\\n                      bzip2-devel libffi-devel snappy-devel libev-devel \\\n                      python-devel \\\n                      file \\\n                      python-pip openssl-devel gmp-devel which zlib-devel \\\n                      ncurses-devel bzip2 cmake3 sudo \\\n                      autoconf help2man perl-Thread-Queue \\\n                      libtool && rm -rf /var/cache/yum\n\n# make sudo work:\n#\n# Disable \"ssh hostname sudo <cmd>\", because it will show the password in clear.\n#         You have to run \"ssh -t hostname sudo <cmd>\".\n#\n# Defaults    requiretty          # is line 56\nRUN awk 'NR == 56 {next} {print}' /etc/sudoers >/tmp/__sudoers && mv /tmp/__sudoers /etc/sudoers\n\n\n# protobuf\nRUN wget https://github.com/google/protobuf/releases/download/v2.6.1/protobuf-2.6.1.tar.bz2 -O protobuf-2.6.1.tar.bz2 \\\n    && tar -jxvf protobuf-2.6.1.tar.bz2 \\\n    && cd protobuf-2.6.1 \\\n    && ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" && make && make install && rm protobuf-2.6.1.tar.bz2\n\n#RUN rpm -ivh http://cbs.centos.org/kojifiles/packages/protobuf/2.5.0/10.el7.centos/src/protobuf-2.5.0-10.el7.centos.src.rpm\n\n# workarounds for limited rocksdb builder in orocksdb\nRUN ln -s /usr/bin/g++ /usr/bin/g++-4.8\n\n# install specific orocksdb\nRUN git clone https://github.com/domsj/orocksdb.git \\\n    && cd orocksdb \\\n    && git checkout tags/0.3.0 \\\n    && ./install_rocksdb.sh \\\n    && cp /usr/local/lib/librocksdb.so* /lib64/ \\\n    && sudo ldconfig -v\n\n\nRUN pip install --no-cache-dir fabric junit-xml\n\n# RUN wget http://cudf-solvers.irill.org/cudf_remote_proxy\n# RUN chmod u+x cudf_remote_proxy\n# RUN mv cudf_remote_proxy /usr/local/bin/\n\n# ENV OPAMEXTERNALSOLVER=\"cudf_remote_proxy %{input}% %{output}% %{criteria}%\"\n\nRUN wget https://raw.github.com/ocaml/opam/master/shell/opam_installer.sh\n\nenv ocaml_version=4.04.2\nRUN sh ./opam_installer.sh /usr/local/bin ${ocaml_version}\n\nENV opam_root=/home/jenkins/OPAM\nENV opam_env=\"opam config env --root=${opam_root}\"\nRUN opam init --root=${opam_root} --comp ${ocaml_version}\n\nRUN eval `${opam_env}` && \\\n    opam update -v && \\\n    opam install -y \\\n        oasis.0.4.10 \\\n        ocamlfind \\\n        omake.0.10.2 \\\n        ssl.0.5.3 \\\n        camlbz2 \\\n        snappy \\\n        sexplib \\\n        bisect \\\n        lwt_ssl \\\n        lwt.3.0.0 \\\n        camltc.0.9.4 \\\n        ocplib-endian.1.0 \\\n        ctypes \\\n        ctypes-foreign \\\n        uuidm \\\n        zarith \\\n        mirage-no-xen.1 \\\n        quickcheck.1.0.2 \\\n        cmdliner \\\n        conf-libev \\\n        depext \\\n        kinetic-client \\\n        tiny_json \\\n        ppx_deriving.4.1 \\\n        ppx_deriving_yojson \\\n        base.v0.9.3 \\\n        core.v0.9.1 \\\n        redis.0.3.3 \\\n        uri.1.9.4 \\\n        result \\\n        ezxmlm\n\n\n# AUTOMAKE-1.14.1 (for YASM)\nRUN wget https://ftp.gnu.org/gnu/automake/automake-1.14.1.tar.xz \\\n        && tar -xvf automake-1.14.1.tar.xz \\\n        && cd automake-1.14.1 \\\n        && ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" \\\n        && make \\\n        && make install && rm automake-1.14.1.tar.xz\n\n#YASM\nRUN git clone --depth 1 git://github.com/yasm/yasm.git\nRUN cd yasm && autoreconf -fiv && ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" && make && make install && make distclean\n\n\nRUN wget https://01.org/sites/default/files/downloads/intelr-storage-acceleration-library-open-source-version/isa-l-2.14.0.tar.gz\nRUN tar xfzv isa-l-2.14.0.tar.gz && rm isa-l-2.14.0.tar.gz\nRUN cd isa-l-2.14.0 && ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\"\nRUN cd isa-l-2.14.0 && make\nRUN cd isa-l-2.14.0 && make install\n\n\nRUN echo '%_install_langs C' >> /etc/rpm/macros && \\\n    yum -y install epel-release && \\\n    echo -e '[ovs]\\nname=ovs\\nbaseurl=http://yum.openvstorage.org/CentOS/7/x86_64/dists/unstable\\nenabled=1\\ngpgcheck=0' > /etc/yum.repos.d/ovs.repo && \\\n    yum -y update && \\\n    yum -y install  \\\n                   boost-devel \\\n                   boost-static \\\n                   boost-log \\\n                   libaio-devel \\\n                   librdmacm-devel \\\n                   gflags-devel \\\n                   glog-devel \\\n                   libunwind \\\n                   libxio \\\n                   libxio-devel\\\n    && \\\n    yum clean all && \\\n    rm -rf /usr/share/doc/* && rm -rf /var/cache/yum\nRUN ln -s /usr/lib64/libunwind.so.8 /usr/lib64/libunwind.so\n\n# install gtest TODO:specific version ?\nRUN git clone  https://github.com/google/googletest \\\n    && cd googletest && git checkout release-1.8.0 \\\n    && mkdir build && cd build && cmake3 .. \\\n    && sudo make install\nRUN cd googletest && git log --oneline | head -n 5\n\n# libgtest.a ends up in /usr/local/lib/\nRUN cp /usr/local/lib/libgtest.a /lib64/\n\n# install specific arakoon.\nRUN git clone https://github.com/openvstorage/arakoon.git\nRUN cd arakoon && git pull && git checkout tags/1.9.22\nRUN cd arakoon && eval `${opam_env}` && make\nRUN cd arakoon && eval `${opam_env}` \\\n    && export PREFIX=${opam_root}/${ocaml_version} \\\n    && export OCAML_LIBDIR=`ocamlfind printconf destdir` \\\n    && make install\n\n\n# install specific orocksdb\nRUN eval `${opam_env}` \\\n    && cd orocksdb \\\n    && git checkout tags/0.3.0 \\\n    && make build install\n\n#for now, install ordma manually\nRUN yum -y install librdmacm-devel && rm -rf /var/cache/yum\nRUN git clone https://github.com/toolslive/ordma.git \\\n    && cd ordma \\\n    && git checkout tags/0.0.2 \\\n    && eval `${opam_env}` \\\n    && make install\n\nRUN yum -y install rpm-build && rm -rf /var/cache/yum\nRUN yum -y install libgcrypt-devel && rm -rf /var/cache/yum\n\n#gf-complete\nRUN rpm -ivv http://people.redhat.com/zaitcev/tmp/gf-complete-1.02-1.fc20.src.rpm\nRUN rpmbuild -ba /root/rpmbuild/SPECS/gf-complete.spec\nRUN rpm -i /root/rpmbuild/RPMS/x86_64/gf-complete-1.02-1.el7.centos.x86_64.rpm\nRUN rpm -i /root/rpmbuild/RPMS/x86_64/gf-complete-devel-1.02-1.el7.centos.x86_64.rpm\n\n#jerasure\nRUN rpm -ivv http://people.redhat.com/zaitcev/tmp/jerasure-2.0-1.fc20.src.rpm\nRUN rpmbuild -ba /root/rpmbuild/SPECS/jerasure.spec\nRUN rpm -i /root/rpmbuild/RPMS/x86_64/jerasure-2.0-1.el7.centos.x86_64.rpm\nRUN rpm -i /root/rpmbuild/RPMS/x86_64/jerasure-devel-2.0-1.el7.centos.x86_64.rpm\nRUN echo \"jenkins ALL=NOPASSWD: ALL\" >/etc/sudoers.d/jenkins\n\n\nRUN echo -e '[ovs]\\nname=ovs\\nbaseurl=http://yum.openvstorage.org/CentOS/7/x86_64/dists/unstable\\nenabled=1\\ngpgcheck=0' > /etc/yum.repos.d/ovs.repo\nRUN cat /etc/yum.repos.d/ovs.repo\nRUN yum -y update && \\\n    yum -y install iproute psmisc && rm -rf /var/cache/yum\n\n## installing voldrv packages only works from within the OVS LAN\n\nARG INSTALL_VOLDRV_PACKAGES=false\n\nRUN test ${INSTALL_VOLDRV_PACKAGES} = 'true' || echo 'we are NOT going to install the voldrv packages/testers'\n\n# http://10.100.129.100:8080/view/volumedriver/view/centos/job/volumedriver-no-dedup-release-centos-7/35/artifact/volumedriver-core/build/rpm/volumedriver-no-dedup-base-debuginfo_6.10.1.0-1.rpm\n\nENV voldrv_jenkins=http://10.100.129.100:8080/view/volumedriver/view/centos/job/volumedriver-no-dedup-release-centos-7/35/artifact/volumedriver-core/build/rpm\n\nENV voldrv_base_pkg_name=volumedriver-no-dedup\nENV voldrv_version=6.10.1.0-1\n\nRUN test ${INSTALL_VOLDRV_PACKAGES} = 'false' \\\n    || (wget ${voldrv_jenkins}/${voldrv_base_pkg_name}-base_${voldrv_version}.rpm \\\n        && yum -y --nogpgcheck localinstall ${voldrv_base_pkg_name}-base_${voldrv_version}.rpm )\nRUN test ${INSTALL_VOLDRV_PACKAGES} = 'false' \\\n    || (wget ${voldrv_jenkins}/${voldrv_base_pkg_name}-pitreplication_${voldrv_version}.rpm \\\n        && yum -y --nogpgcheck localinstall ${voldrv_base_pkg_name}-pitreplication_${voldrv_version}.rpm )\nRUN test ${INSTALL_VOLDRV_PACKAGES} = 'false' \\\n    || (wget ${voldrv_jenkins}/${voldrv_base_pkg_name}-server_${voldrv_version}.rpm \\\n        && yum -y --nogpgcheck localinstall ${voldrv_base_pkg_name}-server_${voldrv_version}.rpm )\nRUN test ${INSTALL_VOLDRV_PACKAGES} = 'false' \\\n    || (wget ${voldrv_jenkins}/libovsvolumedriver_${voldrv_version}.rpm \\\n        && yum -y --nogpgcheck localinstall libovsvolumedriver_${voldrv_version}.rpm )\nRUN test ${INSTALL_VOLDRV_PACKAGES} = 'false' \\\n    || (wget ${voldrv_jenkins}/${voldrv_base_pkg_name}-test_${voldrv_version}.rpm \\\n        && yum -y --nogpgcheck localinstall ${voldrv_base_pkg_name}-test_${voldrv_version}.rpm )\n\n\nRUN chmod ugoa+rxw -R ${opam_root}\nRUN su - -c \"echo 'eval `${opam_env}`' >> /home/jenkins/.bash_profile\"\nRUN su - -c \"echo 'LD_LIBRARY_PATH=/usr/local/lib; export LD_LIBRARY_PATH;' >> /home/jenkins/.bash_profile\"\nRUN su - -c \"echo 'VOLDRV_TEST=volumedriver_test; export VOLDRV_TEST;' >> /home/jenkins/.bash_profile\"\nRUN su - -c \"echo 'VOLDRV_BACKEND_TEST=backend_test; export VOLDRV_BACKEND_TEST;' >> /home/jenkins/.bash_profile\"\n\nENTRYPOINT [\"/bin/bash\", \"-c\", \"set -e && /home/jenkins/alba/docker/docker-entrypoint.sh $@\"]\n"
}