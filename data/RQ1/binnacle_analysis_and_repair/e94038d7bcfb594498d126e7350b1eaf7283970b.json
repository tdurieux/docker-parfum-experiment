{
  "startTime": 1674245452613,
  "endTime": 1674245453303,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 16,
        "lineEnd": 16,
        "columnStart": 4,
        "columnEnd": 133
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 32,
        "lineEnd": 35,
        "columnStart": 7,
        "columnEnd": 101
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 57,
        "lineEnd": 57,
        "columnStart": 7,
        "columnEnd": 239
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 91,
        "lineEnd": 91,
        "columnStart": 4,
        "columnEnd": 172
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 103,
        "lineEnd": 103,
        "columnStart": 4,
        "columnEnd": 121
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 58,
        "lineEnd": 58,
        "columnStart": 7,
        "columnEnd": 70
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 92,
        "lineEnd": 92,
        "columnStart": 5,
        "columnEnd": 82
      }
    },
    {
      "rule": "apkAddUseNoCache",
      "position": {
        "lineStart": 3,
        "lineEnd": 11,
        "columnStart": 4,
        "columnEnd": 11
      }
    },
    {
      "rule": "apkAddUseNoCache",
      "position": {
        "lineStart": 117,
        "lineEnd": 119,
        "columnStart": 4,
        "columnEnd": 11
      }
    },
    {
      "rule": "apkAddUseNoCache",
      "position": {
        "lineStart": 124,
        "lineEnd": 124,
        "columnStart": 4,
        "columnEnd": 24
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM alpine:3.8\nMAINTAINER brennolncosta@gmail.com\n\nRUN apk add --no-cache --update \\\n      autoconf \\\n      automake \\\n      build-base \\\n      curl \\\n      git \\\n      go \\\n      libtool \\\n      unzip\n\n# Build protobuf against configured revision\n#\nENV PROTOBUF_REVISION 3.6.0\nRUN curl -f -sLO https://github.com/google/protobuf/releases/download/v${PROTOBUF_REVISION}/protoc-${PROTOBUF_REVISION}-linux-x86_64.zip \\\n  && unzip protoc-${PROTOBUF_REVISION}-linux-x86_64.zip -d ./usr/local \\\n  && chmod +x /usr/local/bin/protoc \\\n  && chmod -R 755 /usr/local/include/ \\\n  && rm protoc-${PROTOBUF_REVISION}-linux-x86_64.zip\n\nENV LC_ALL=en_US.UTF-8 LANG=en_US.UTF-8 LANGUAGE=en_US.UTF-8\nRUN ALPINE_GLIBC_BASE_URL=\"https://github.com/andyshinn/alpine-pkg-glibc/releases/download\" \\\n    && ALPINE_GLIBC_PACKAGE_VERSION=\"2.27-r0\" \\\n    && ALPINE_GLIBC_BASE_PACKAGE_FILENAME=\"glibc-$ALPINE_GLIBC_PACKAGE_VERSION.apk\" \\\n    && ALPINE_GLIBC_BIN_PACKAGE_FILENAME=\"glibc-bin-$ALPINE_GLIBC_PACKAGE_VERSION.apk\" \\\n    && ALPINE_GLIBC_I18N_PACKAGE_FILENAME=\"glibc-i18n-$ALPINE_GLIBC_PACKAGE_VERSION.apk\" \\\n    && apk add --no-cache --virtual=build-dependencies \\\n      ca-certificates \\\n      bash \\\n      tzdata \\\n    && curl -f -sL \\\n        -O \"$ALPINE_GLIBC_BASE_URL/$ALPINE_GLIBC_PACKAGE_VERSION/$ALPINE_GLIBC_BASE_PACKAGE_FILENAME\" \\\n        -O \"$ALPINE_GLIBC_BASE_URL/$ALPINE_GLIBC_PACKAGE_VERSION/$ALPINE_GLIBC_BIN_PACKAGE_FILENAME\" \\\n        -O \"$ALPINE_GLIBC_BASE_URL/$ALPINE_GLIBC_PACKAGE_VERSION/$ALPINE_GLIBC_I18N_PACKAGE_FILENAME\" \\\n    && apk add --no-cache --allow-untrusted \\\n        \"$ALPINE_GLIBC_BASE_PACKAGE_FILENAME\" \\\n        \"$ALPINE_GLIBC_BIN_PACKAGE_FILENAME\" \\\n        \"$ALPINE_GLIBC_I18N_PACKAGE_FILENAME\" \\\n    && /usr/glibc-compat/bin/localedef --force --inputfile POSIX --charmap UTF-8 C.UTF-8 || true \\\n    && echo \"export LANG=C.UTF-8\" > /etc/profile.d/locale.sh \\\n    && apk del glibc-i18n \\\n    && apk del build-dependencies \\\n    && rm \\\n        \"$ALPINE_GLIBC_BASE_PACKAGE_FILENAME\" \\\n        \"$ALPINE_GLIBC_BIN_PACKAGE_FILENAME\" \\\n        \"$ALPINE_GLIBC_I18N_PACKAGE_FILENAME\"\n\nENV JAVA_VERSION=8 \\\n    JAVA_UPDATE=181 \\\n    JAVA_BUILD=13 \\\n    ORACLE_TOKEN=96a7b8442fe848ef90c96a2fad6ed6d1 \\\n    JAVA_HOME=\"/opt/jdk\"\n\nRUN apk add --no-cache --virtual=java-dependencies ca-certificates \\\n    && cd \"/tmp\" \\\n    && curl -f -sL --header \"Cookie: oraclelicense=accept-securebackup-cookie;\" -O \"http://download.oracle.com/otn-pub/java/jdk/${JAVA_VERSION}u${JAVA_UPDATE}-b${JAVA_BUILD}/${ORACLE_TOKEN}/jdk-${JAVA_VERSION}u${JAVA_UPDATE}-linux-x64.tar.gz\" \\\n    && tar -xzvf \"jdk-${JAVA_VERSION}u${JAVA_UPDATE}-linux-x64.tar.gz\" \\\n    && mkdir -p $JAVA_HOME \\\n    && mv jdk1*/* $JAVA_HOME \\\n    && ln -s \"$JAVA_HOME/bin/\"* \"/usr/bin/\" \\\n    && rm -rf \"$JAVA_HOME/\"*src.zip \\\n    && rm -rf $JAVA_HOME/*src.zip \\\n      $JAVA_HOME/lib/missioncontrol \\\n      $JAVA_HOME/lib/visualvm \\\n      $JAVA_HOME/lib/*javafx* \\\n      $JAVA_HOME/jre/lib/plugin.jar \\\n      $JAVA_HOME/jre/lib/ext/jfxrt.jar \\\n      $JAVA_HOME/jre/bin/javaws \\\n      $JAVA_HOME/jre/lib/javaws.jar \\\n      $JAVA_HOME/jre/lib/desktop \\\n      $JAVA_HOME/jre/plugin \\\n      $JAVA_HOME/jre/lib/deploy* \\\n      $JAVA_HOME/jre/lib/*javafx* \\\n      $JAVA_HOME/jre/lib/*jfx* \\\n      $JAVA_HOME/jre/lib/amd64/libdecora_sse.so \\\n      $JAVA_HOME/jre/lib/amd64/libprism_*.so \\\n      $JAVA_HOME/jre/lib/amd64/libfxplugins.so \\\n      $JAVA_HOME/jre/lib/amd64/libglass.so \\\n      $JAVA_HOME/jre/lib/amd64/libgstreamer-lite.so \\\n      $JAVA_HOME/jre/lib/amd64/libjavafx*.so \\\n      $JAVA_HOME/jre/lib/amd64/libjfx*.so \\\n    && apk del java-dependencies \\\n    && rm -rf \"/tmp/\"* && rm \"jdk-${JAVA_VERSION}u${JAVA_UPDATE}-linux-x64.tar.gz\"\n\n# Build [protoc-gen-doc](https://github.com/estan/protoc-gen-doc) against configured revision\n#\n# protobuf plugin to generate docs in markdown, html, docbook and pdf\n#\nENV PROTOC_GEN_DOC_REVISION 1.1.0\nRUN curl -f -sLO https://github.com/pseudomuto/protoc-gen-doc/releases/download/v${PROTOC_GEN_DOC_REVISION}/protoc-gen-doc-${PROTOC_GEN_DOC_REVISION}.linux-amd64.go1.10.tar.gz \\\n  && tar -zxvf protoc-gen-doc-${PROTOC_GEN_DOC_REVISION}.linux-amd64.go1.10.tar.gz \\\n  && cp protoc-gen-doc-${PROTOC_GEN_DOC_REVISION}.linux-amd64.go1.10/protoc-gen-doc /usr/local/bin/ \\\n  && rm -rf protoc-gen-doc-* && rm protoc-gen-doc-${PROTOC_GEN_DOC_REVISION}.linux-amd64.go1.10.tar.gz\n\n# Build [ScalaPB](https://github.com/trueaccord/ScalaPB) plugin\n#\n# This plugin make possible to generate Scala's case class for a given proto.\n#\n# Important: Java is a dependency!\n#\nENV SCALA_PB_VERSION 0.7.4\nRUN curl -f -sLO \"https://github.com/trueaccord/ScalaPB/releases/download/v$SCALA_PB_VERSION/scalapbc-$SCALA_PB_VERSION.zip\" \\\n  && unzip \"scalapbc-$SCALA_PB_VERSION.zip\" \\\n  && mv \"scalapbc-$SCALA_PB_VERSION\" /usr/local/lib/scalapbc \\\n  && ln -s /usr/local/lib/scalapbc/bin/scalapbc /usr/local/bin/scalapbc \\\n  && rm \"/scalapbc-$SCALA_PB_VERSION.zip\"\n\n# Install [protoc-gen-go](https://github.com/protobuf/protoc-gen-go)\nENV GOPATH /go\nENV PATH $GOPATH/bin:/usr/local/go/bin:$PATH\nRUN mkdir /go \\\n  && go get -u github.com/golang/protobuf/protoc-gen-go \\\n  && go get -u github.com/square/goprotowrap/cmd/protowrap\n\n# Needed shared libraries and tools by protobuf and their plugins\nRUN apk --update --no-cache add \\\n  bash \\\n  libstdc++\n\n# Install  [rust-protobuf](https://github.com/stepancheg/rust-protobuf) plugin\nENV RUST_PROTOBUF_VERSION 2.0.3\nENV RUSTPATH /rust\nRUN apk add --no-cache cargo >1.26.0 \\\n  && mkdir $RUSTPATH \\\n  && cargo install --all-features --root $RUSTPATH --vers $RUST_PROTOBUF_VERSION protobuf-codegen\nENV PATH $RUSTPATH/bin:$PATH\n\n# Cleaning up\nRUN apk del \\\n  autoconf \\\n  automake \\\n  build-base \\\n  cargo \\\n  curl \\\n  git \\\n  libtool \\\n  unzip \\\n  && rm -rf /var/cache/apk/*\n\nRUN mkdir /build\n"
}