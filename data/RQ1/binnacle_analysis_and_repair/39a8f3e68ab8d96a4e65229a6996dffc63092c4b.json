{
  "startTime": 1674234257483,
  "endTime": 1674234257779,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 76,
        "lineEnd": 76,
        "columnStart": 4,
        "columnEnd": 99
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 123,
        "lineEnd": 123,
        "columnStart": 4,
        "columnEnd": 46
      }
    },
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 99,
        "lineEnd": 103,
        "columnStart": 4,
        "columnEnd": 17
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 92,
        "lineEnd": 92,
        "columnStart": 4,
        "columnEnd": 31
      }
    },
    {
      "rule": "apkAddUseNoCache",
      "position": {
        "lineStart": 7,
        "lineEnd": 22,
        "columnStart": 4,
        "columnEnd": 19
      }
    },
    {
      "rule": "apkAddUseNoCache",
      "position": {
        "lineStart": 23,
        "lineEnd": 40,
        "columnStart": 4,
        "columnEnd": 18
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# PHP Docker image for Yii 2.0 Framework runtime\n# ==============================================\n\nARG PHP_BASE_IMAGE_VERSION\nFROM php:${PHP_BASE_IMAGE_VERSION}-fpm-alpine\n\n# Install system packages & PHP extensions required for Yii 2.0 Framework\nRUN apk --update --no-cache --virtual build-deps add \\\n        autoconf \\\n        make \\\n        gcc \\\n        g++ \\\n        libtool \\\n        icu-dev \\\n        curl-dev \\\n        freetype-dev \\\n        imagemagick-dev \\\n        pcre-dev \\\n        postgresql-dev \\\n        libmcrypt-dev \\\n        libjpeg-turbo-dev \\\n        libpng-dev \\\n        libxml2-dev && \\\n    apk add --no-cache \\\n        git \\\n        curl \\\n        bash \\\n        bash-completion \\\n        icu \\\n        imagemagick \\\n        pcre \\\n        freetype \\\n        libmcrypt \\\n        libintl \\\n        libjpeg-turbo \\\n        libpng \\\n        libltdl \\\n        libxml2 \\\n        mysql-client \\\n        nodejs-npm \\\n        postgresql && \\\n    pecl install \\\n        apcu \\\n        imagick \\\n        mcrypt-1.0.0 && \\\n    docker-php-ext-configure gd \\\n        --with-gd \\\n        --with-freetype-dir=/usr/include/ \\\n        --with-png-dir=/usr/include/ \\\n        --with-jpeg-dir=/usr/include/ && \\\n    docker-php-ext-configure bcmath && \\\n    docker-php-ext-install \\\n        soap \\\n        zip \\\n        curl \\\n        bcmath \\\n        exif \\\n        gd \\\n        iconv \\\n        intl \\\n        mbstring \\\n        opcache \\\n        pdo_mysql \\\n        pdo_pgsql && \\\n    apk del \\\n        build-deps\n\nRUN echo \"extension=apcu.so\" > /usr/local/etc/php/conf.d/pecl-apcu.ini \\\n && echo \"extension=imagick.so\" > /usr/local/etc/php/conf.d/pecl-imagick.ini\n\n# memcache\nENV MEMCACHED_DEPS zlib-dev libmemcached-dev cyrus-sasl-dev git\nRUN set -xe \\\n && apk add --no-cache \\\n     --virtual .memcached-deps \\\n     $MEMCACHED_DEPS \\\n && curl -f https://codeload.github.com/php-memcached-dev/php-memcached/zip/php7 -o /tmp/memcached.zip \\\n && mkdir -p /usr/src/php/ext \\\n && unzip /tmp/memcached.zip -d /usr/src/php/ext \\\n && docker-php-ext-configure /usr/src/php/ext/php-memcached-php7 \\\n     --disable-memcached-sasl \\\n && docker-php-ext-install /usr/src/php/ext/php-memcached-php7 \\\n && rm -rf /usr/src/php/ext/php-memcached-php7 /tmp/memcached.zip\n\n# Install xdebug\nRUN export CFLAGS=\"$PHP_CFLAGS\" CPPFLAGS=\"$PHP_CPPFLAGS\" LDFLAGS=\"$PHP_LDFLAGS\" && \\\n    apk add --no-cache --virtual .phpize-deps $PHPIZE_DEPS && \\\n    cd /tmp && \\\n    git clone git://github.com/xdebug/xdebug.git && \\\n    cd xdebug && \\\n    git checkout 52adff7539109db592d07d3f6c325f6ee2a7669f && \\\n    phpize && \\\n    ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --enable-xdebug && \\\n    make && \\\n    make install && \\\n    rm -rf /tmp/xdebug && \\\n    apk del .phpize-deps\n\n# Install less-compiler\nRUN npm install -g \\\n        less \\\n        lesshint \\\n        uglify-js \\\n        uglifycss && npm cache clean --force;\n\n# Configure version constraints\nENV PHP_ENABLE_XDEBUG=0 \\\n    VERSION_COMPOSER_ASSET_PLUGIN=^1.4.3 \\\n    VERSION_PRESTISSIMO_PLUGIN=^0.3.0 \\\n    PATH=/app:/app/vendor/bin:/root/.composer/vendor/bin:$PATH \\\n    TERM=linux \\\n    COMPOSER_ALLOW_SUPERUSER=1\n\n# Add configuration files\nCOPY image-files/ /\n\n# Add GITHUB_API_TOKEN support for composer\nRUN chmod 700 \\\n        /usr/local/bin/docker-entrypoint.sh \\\n        /usr/local/bin/docker-run.sh \\\n        /usr/local/bin/composer\n\n# Install composer\nRUN curl -f -sS https://getcomposer.org/installer | php -- \\\n        --filename=composer.phar \\\n        --install-dir=/usr/local/bin && \\\n    composer global require --optimize-autoloader \\\n        \"fxp/composer-asset-plugin:${VERSION_COMPOSER_ASSET_PLUGIN}\" \\\n        \"hirak/prestissimo:${VERSION_PRESTISSIMO_PLUGIN}\" && \\\n    composer global dumpautoload --optimize && \\\n    composer clear-cache\n\nWORKDIR /app\n\n# Startup script for FPM\nENTRYPOINT [\"/usr/local/bin/docker-entrypoint.sh\"]\nCMD [\"docker-run.sh\"]\n"
}