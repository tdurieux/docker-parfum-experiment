{
  "startTime": 1674248144494,
  "endTime": 1674248144660,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 36,
        "lineEnd": 36,
        "columnStart": 4,
        "columnEnd": 126
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 35,
        "lineEnd": 35,
        "columnStart": 4,
        "columnEnd": 33
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 39,
        "lineEnd": 39,
        "columnStart": 4,
        "columnEnd": 31
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 42,
        "lineEnd": 42,
        "columnStart": 4,
        "columnEnd": 84
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 45,
        "lineEnd": 45,
        "columnStart": 4,
        "columnEnd": 34
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 35,
        "lineEnd": 35,
        "columnStart": 4,
        "columnEnd": 33
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 39,
        "lineEnd": 39,
        "columnStart": 4,
        "columnEnd": 31
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 42,
        "lineEnd": 42,
        "columnStart": 4,
        "columnEnd": 84
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 45,
        "lineEnd": 45,
        "columnStart": 4,
        "columnEnd": 34
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 35,
        "lineEnd": 35,
        "columnStart": 4,
        "columnEnd": 33
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 39,
        "lineEnd": 39,
        "columnStart": 4,
        "columnEnd": 31
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 42,
        "lineEnd": 42,
        "columnStart": 4,
        "columnEnd": 84
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 45,
        "lineEnd": 45,
        "columnStart": 4,
        "columnEnd": 34
      }
    }
  ],
  "repairedSmells": [
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 35,
        "lineEnd": 35,
        "columnStart": 4,
        "columnEnd": 57
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 39,
        "lineEnd": 39,
        "columnStart": 4,
        "columnEnd": 55
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 42,
        "lineEnd": 42,
        "columnStart": 4,
        "columnEnd": 108
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 45,
        "lineEnd": 45,
        "columnStart": 4,
        "columnEnd": 58
      }
    }
  ],
  "repairedDockerfile": "FROM ubuntu:14.10\n\n# Build with\n#    docker build -t kelvinlawson/android-studio .\n#\n# Run the first time with: \"./android-save-state.sh\" so that\n# it downloads, installs and saves installation packages inside\n# the container:\n#  * ./android-save-state.sh\n#  * Accept prompts and install\n#  * Quit\n#  * Commit current container state as main image:\n#    docker ps -a\n#    docker commmit <id> kelvinlawson/android-studio\n#  * You can now run the ready-installed container using\n#    \"android.sh\".\n#\n# On further runs where you are not installing any studio\n# packages run with \"./android.sh\"\n#\n# If you wish to update the container at any point (e.g. when\n# installing new SDK versions from the SDK Manager) then run\n# with \"./android-save-state.sh\" and commit the changes to\n# your container.\n#\n# Notes: To run under some Window Managers (e.g. awesomewm) run\n# \"wmname LG3D\" on the host OS first.\n#\n# USB device debugging:\n#  Change the device ID in 51-android.rules.\n#  Add \"--privileged -v /dev/bus/usb:/dev/bus/usb\" to the startup cmdline\n\nRUN apt-get update\n\n# Download specific Android Studio bundle (all packages).\nRUN apt-get install --no-install-recommends -y curl unzip && rm -rf /var/lib/apt/lists/*;\nRUN curl -f 'https://dl.google.com/dl/android/studio/ide-zips/2.3.3.0/android-studio-ide-162.4069837-linux.zip' > /tmp/studio.zip && unzip -d /opt /tmp/studio.zip && rm /tmp/studio.zip\n\n# Install X11\nRUN apt-get install --no-install-recommends -y x11-apps && rm -rf /var/lib/apt/lists/*;\n\n# Install prerequisites\nRUN apt-get install --no-install-recommends -y openjdk-7-jdk lib32z1 lib32ncurses5 lib32bz2-1.0 lib32stdc++6 && rm -rf /var/lib/apt/lists/*;\n\n# Install other useful tools\nRUN apt-get install --no-install-recommends -y git vim ant && rm -rf /var/lib/apt/lists/*;\n\n# Clean up\nRUN apt-get clean\nRUN apt-get purge\n\n# Set up permissions for X11 access.\n# Replace 1000 with your user / group id.\nRUN export uid=1000 gid=1000 && \\\n    mkdir -p /home/developer && \\\n    echo \"developer:x:${uid}:${gid}:Developer,,,:/home/developer:/bin/bash\" >> /etc/passwd && \\\n    echo \"developer:x:${uid}:\" >> /etc/group && \\\n    echo \"developer ALL=(ALL) NOPASSWD: ALL\" > /etc/sudoers.d/developer && \\\n    chmod 0440 /etc/sudoers.d/developer && \\\n    chown ${uid}:${gid} -R /home/developer\n\n# Set up USB device debugging (device is ID in the rules files)\nADD 51-android.rules /etc/udev/rules.d\nRUN chmod a+r /etc/udev/rules.d/51-android.rules\n\nUSER developer\nENV HOME /home/developer\nCMD /opt/android-studio/bin/studio.sh\n\n"
}