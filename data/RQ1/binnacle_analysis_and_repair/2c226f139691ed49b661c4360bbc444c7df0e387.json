{
  "startTime": 1674248064811,
  "endTime": 1674248065373,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 79,
        "lineEnd": 79,
        "columnStart": 4,
        "columnEnd": 95
      }
    },
    {
      "rule": "rmRecursiveAfterMktempD",
      "position": {
        "lineStart": 30,
        "lineEnd": 30,
        "columnStart": 25,
        "columnEnd": 34
      }
    },
    {
      "rule": "gpgUseBatchFlag",
      "position": {
        "lineStart": 31,
        "lineEnd": 31,
        "columnStart": 5,
        "columnEnd": 100
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 5,
        "lineEnd": 5,
        "columnStart": 22,
        "columnEnd": 65
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 61,
        "lineEnd": 61,
        "columnStart": 23,
        "columnEnd": 73
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM php:5.6-apache\n\nRUN a2enmod rewrite expires\n\n# install the PHP extensions we need\nRUN apt-get update && apt-get install --no-install-recommends -y libpng12-dev libjpeg-dev && rm -rf /var/lib/apt/lists/* \\\n  && docker-php-ext-configure gd --with-png-dir=/usr --with-jpeg-dir=/usr \\\n  && docker-php-ext-install gd mysqli opcache\n\n# set recommended PHP.ini settings\n# see https://secure.php.net/manual/en/opcache.installation.php\nRUN { \\\n    echo 'opcache.memory_consumption=128'; \\\n    echo 'opcache.interned_strings_buffer=8'; \\\n    echo 'opcache.max_accelerated_files=4000'; \\\n    echo 'opcache.revalidate_freq=60'; \\\n    echo 'opcache.fast_shutdown=1'; \\\n    echo 'opcache.enable_cli=1'; \\\n  } > /usr/local/etc/php/conf.d/opcache-recommended.ini\n\n# Install Mysql\n# add our user and group first to make sure their IDs get assigned consistently, regardless of whatever dependencies get added\nRUN groupadd -r mysql && useradd -r -g mysql mysql\n\n# add gosu for easy step-down from root\nENV GOSU_VERSION 1.7\nRUN set -x \\\n  && apt-get update && apt-get install -y --no-install-recommends ca-certificates wget && rm -rf /var/lib/apt/lists/* \\\n  && wget -O /usr/local/bin/gosu \"https://github.com/tianon/gosu/releases/download/$GOSU_VERSION/gosu-$(dpkg --print-architecture)\" \\\n  && wget -O /usr/local/bin/gosu.asc \"https://github.com/tianon/gosu/releases/download/$GOSU_VERSION/gosu-$(dpkg --print-architecture).asc\" \\\n  && export GNUPGHOME=\"$(mktemp -d)\" \\\n  && gpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys B42F6819007F00F88E364FD4036A9C25BF357DD4 \\\n  && gpg --batch --verify /usr/local/bin/gosu.asc /usr/local/bin/gosu \\\n  && rm -r \"$GNUPGHOME\" /usr/local/bin/gosu.asc \\\n  && chmod +x /usr/local/bin/gosu \\\n  && gosu nobody true \\\n  && apt-get purge -y --auto-remove ca-certificates wget && rm -rf -d\n\n# FATAL ERROR: please install the following Perl modules before executing /usr/local/mysql/scripts/mysql_install_db:\n# File::Basename\n# File::Copy\n# Sys::Hostname\n# Data::Dumper\nRUN apt-get update && apt-get install -y perl pwgen --no-install-recommends && rm -rf /var/lib/apt/lists/*\n\n# gpg: key 5072E1F5: public key \"MySQL Release Engineering <mysql-build@oss.oracle.com>\" imported\nRUN apt-key adv --keyserver ha.pool.sks-keyservers.net --recv-keys A4A9406876FCBD3C456770C88C718D3B5072E1F5\n\nENV MYSQL_MAJOR 5.6\nENV MYSQL_VERSION 5.6.32-1debian8\n\nRUN echo \"deb http://repo.mysql.com/apt/debian/ jessie mysql-${MYSQL_MAJOR}\" > /etc/apt/sources.list.d/mysql.list\n\n# the \"/var/lib/mysql\" stuff here is because the mysql-server postinst doesn't have an explicit way to disable the mysql_install_db codepath besides having a database already \"configured\" (ie, stuff in /var/lib/mysql/mysql)\n# also, we set debconf keys to make APT a little quieter\nRUN { \\\n    echo mysql-community-server mysql-community-server/data-dir select ''; \\\n    echo mysql-community-server mysql-community-server/root-pass password ''; \\\n    echo mysql-community-server mysql-community-server/re-root-pass password ''; \\\n    echo mysql-community-server mysql-community-server/remove-test-db select false; \\\n  } | debconf-set-selections \\\n  && apt-get update && apt-get install --no-install-recommends -y mysql-server=\"${MYSQL_VERSION}\" && rm -rf /var/lib/apt/lists/* \\\n  && rm -rf /var/lib/mysql && mkdir -p /var/lib/mysql /var/run/mysqld \\\n  && chown -R mysql:mysql /var/lib/mysql /var/run/mysqld \\\n# ensure that /var/run/mysqld (used for socket and lock files) is writable regardless of the UID our mysqld instance ends up having at runtime\n  && chmod 777 /var/run/mysqld\n\n# comment out a few problematic configuration values\n# don't reverse lookup hostnames, they are usually another container\nRUN sed -Ei 's/^(bind-address|log)/#&/' /etc/mysql/my.cnf \\\n  && echo 'skip-host-cache\\nskip-name-resolve' | awk '{ print } $1 == \"[mysqld]\" && c == 0 { c = 1; system(\"cat\") }' /etc/mysql/my.cnf > /tmp/my.cnf \\\n  && mv /tmp/my.cnf /etc/mysql/my.cnf\n\nRUN mysql_install_db --datadir=/var/lib/mysql --rpm --keep-my-cnf\n\n# Install Wordpress\nENV WORDPRESS_VERSION 4.5\n\n# upstream tarballs include ./wordpress/ so this gives us /usr/src/wordpress\nRUN curl -f -k -o wordpress.tar.gz -SL https://wordpress.org/wordpress-${WORDPRESS_VERSION}.tar.gz \\\n  && tar -xzf wordpress.tar.gz -C /usr/src/ \\\n  && rm wordpress.tar.gz \\\n  && chown -R www-data:www-data /usr/src/wordpress\n\nADD init.sh /\nRUN chmod +x /init.sh\n# RUN /init.sh\n\nEXPOSE 80\n\nCMD [\"gosu mysql mysqld & apache2-foreground\"]\n"
}