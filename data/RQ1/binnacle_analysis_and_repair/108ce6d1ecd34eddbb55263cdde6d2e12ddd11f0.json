{
  "startTime": 1674234304233,
  "endTime": 1674234304920,
  "originalSmells": [
    {
      "rule": "wgetUseHttpsUrl",
      "position": {
        "lineStart": 78,
        "lineEnd": 78,
        "columnStart": 4,
        "columnEnd": 63
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 80,
        "lineEnd": 80,
        "columnStart": 25,
        "columnEnd": 82
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 12,
        "lineEnd": 55,
        "columnStart": 4,
        "columnEnd": 14
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 58,
        "lineEnd": 67,
        "columnStart": 4,
        "columnEnd": 20
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 70,
        "lineEnd": 73,
        "columnStart": 4,
        "columnEnd": 15
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 12,
        "lineEnd": 55,
        "columnStart": 4,
        "columnEnd": 14
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 58,
        "lineEnd": 67,
        "columnStart": 4,
        "columnEnd": 20
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 70,
        "lineEnd": 73,
        "columnStart": 4,
        "columnEnd": 15
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 80,
        "lineEnd": 80,
        "columnStart": 25,
        "columnEnd": 82
      }
    }
  ],
  "repairedSmells": [
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 12,
        "lineEnd": 55,
        "columnStart": 4,
        "columnEnd": 14
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 58,
        "lineEnd": 67,
        "columnStart": 4,
        "columnEnd": 20
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 70,
        "lineEnd": 73,
        "columnStart": 4,
        "columnEnd": 15
      }
    }
  ],
  "repairedDockerfile": "FROM jupyter/scipy-notebook\n\nMAINTAINER Jay Johnson <jay.p.h.johnson@gmail.com>\n\nUSER root\n\n# Install all OS dependencies for notebook server that starts but lacks all\n# features (e.g., download as all possible file formats)\nENV DEBIAN_FRONTEND noninteractive\n\nRUN apt-get update -y\n\nRUN apt-get install -yq --no-install-recommends \\\n    jed \\\n    emacs \\\n    build-essential \\\n    python-dev \\\n    python-setuptools \\\n    unzip \\\n    libsm6 \\\n    pandoc \\\n    texlive-latex-base \\\n    texlive-latex-extra \\\n    texlive-fonts-extra \\\n    texlive-fonts-recommended \\\n    texlive-generic-recommended \\\n    libxrender1 \\\n    julia \\\n    libnettle4 \\\n    git \\\n    sqlite \\\n    vim \\\n    wget \\\n    mlocate \\\n    cron \\\n    rsyslog \\\n    logrotate \\\n    gcc \\\n    telnet \\\n    tree \\\n    curl \\\n    tar \\\n    net-tools \\\n    mariadb-server \\\n    libmysqlclient-dev \\\n    fonts-dejavu \\\n    gfortran \\\n    libav-tools \\\n    libcurl4-openssl-dev \\\n    libssl-dev \\\n    libxml2-dev \\\n    libxslt1-dev \\\n    libpcap-dev \\\n    libsqlite3-dev \\\n    libattr1-dev \\\n    libffi-dev \\\n    && apt-get clean && rm -rf /var/lib/apt/lists/*;\n\nRUN apt-get install -yq --no-install-recommends \\\n    libatlas-base-dev \\\n    libopenblas-dev \\\n    libopencv-dev \\\n    libprotobuf-dev \\\n    liblapack-dev \\\n    libleveldb-dev \\\n    protobuf-compiler \\\n    libsnappy-dev \\\n    libboost-all-dev \\\n    && apt-get clean && rm -rf /var/lib/apt/lists/*;\n\nRUN apt-get install -yq --no-install-recommends \\\n    libgflags-dev \\\n    libgoogle-glog-dev \\\n    liblmdb-dev \\\n    && apt-get clean && rm -rf /var/lib/apt/lists/*;\n\nRUN apt-get remove -y librdkafka*\n# Install the new Confluent Kafka toolchain for using their kafka client: https://github.com/confluentinc/confluent-kafka-python / http://blog.parsely.com/post/3886/pykafka-now\nRUN wget -qO - https://packages.confluent.io/deb/3.0/archive.key | sudo apt-key add -\nRUN echo \"deb [arch=amd64] http://packages.confluent.io/deb/3.0 stable main\" >> /etc/apt/sources.list\nRUN apt-get update -y && apt-get install --no-install-recommends -y confluent-platform-2.11 librdkafka-dev && rm -rf /var/lib/apt/lists/*;\n\nENV NB_USER jovyan\nENV ENV_PORT 8888\nENV ENV_PROJ_DIR /opt/work\nENV ENV_DATA_DIR /opt/work/data\nENV ENV_DATA_SRC_DIR /opt/work/data/src\nENV ENV_DATA_DST_DIR /opt/work/data/dst\nENV ENV_REDIS_HOST localhost\nENV ENV_REDIS_PORT 6000\nENV ENV_REDIS_SRC_KEY JUPYTER_SRC_KEY\nENV ENV_REDIS_DST_KEY JUPYTER_DST_KEY\n\n# Coordinate events without changing the container\nENV ENV_SYNTHESIZE_DIR /opt/work/data/synthesize\nENV ENV_SYNTHESIZE_BIN /opt/containerfiles/synthesize.sh\nENV ENV_TIDY_DIR /opt/work/data/tidy\nENV ENV_TIDY_BIN /opt/containerfiles/tidy.sh\nENV ENV_ANALYZE_DIR /opt/work/data/analyze\nENV ENV_ANALYZE_BIN /opt/containerfiles/analyze.sh\nENV ENV_OUTPUT_DIR /opt/work/data/output\nENV ENV_OUTPUT_BIN /opt/containerfiles/output-model.sh\nENV ENV_REDIS_MODEL_OUT_BIN /opt/containerfiles/redis-model.sh\nENV ENV_REDIS_MODEL_DST_KEY JUPYTER_REDIS_MODEL_DST_KEY\n\n# Bin and Libs Dir\nENV ENV_BINS /opt/work/bins\nENV ENV_LIBS /opt/work/libs\n\n# Configuration Dir:\nENV ENV_CONFIGS_DIR /opt/work/configs\nENV ENV_CL_ENV_DIR /opt/work/env\n\n# Global Python Dirs:\nENV ENV_PYTHON_SRC_DIR /opt/work/src\nENV ENV_PYTHON_COMMON_DIR /opt/work/src/common\nENV ENV_PYTHON_REDIS_DIR /opt/work/src/connectors/redis\nENV ENV_PYTHON_DB_DIR /opt/work/src/connectors/database\nENV ENV_PYTHON_SCHEMA_DIR /opt/work/src/databases/schema\nENV ENV_PYTHON_CORE_CONFIG /opt/work/configs/jupyter.json\n\n# Slack Debugging Env:\nENV ENV_SLACK_BOTNAME bugbot\nENV ENV_SLACK_CHANNEL debugging\nENV ENV_SLACK_NOTIFY_USER jay\nENV ENV_SLACK_TOKEN xoxb-51351043345-Lzwmto5IMVb8UK36MghZYMEi\nENV ENV_SLACK_ENVNAME dev-jupyter\nENV ENV_SLACK_ENABLED 1\n\n# Environment Deployment Type\nENV ENV_DEPLOYMENT_TYPE Local\nENV ENV_IN_DOCKER 1\nENV ENV_DEBUG_LOADING 0\n\nUSER root\n\n# Python packages for interfacing with resources outside of this container\nRUN conda install --quiet --yes \\\n    'coverage' \\\n    'seaborn' \\\n    'pcre' \\\n    'six' \\\n    'pika' \\\n    'python-daemon' \\\n    'feedparser' \\\n    'pytest' \\\n    'nose' \\\n    'lxml' \\\n    'Django' \\\n    'sphinx' \\\n    'sphinx-bootstrap-theme' \\\n    'requests' \\\n    'redis=3.2.0' \\\n    'hiredis' \\\n    'redis-py' \\\n    'boto' \\\n    'awscli' \\\n    'django-redis-cache' \\\n    'uwsgi' \\\n    'PyMySQL' \\\n    'psycopg2' \\\n    'pymongo' \\\n    'SQLAlchemy' \\\n    'pandas' \\\n    'numpy' \\\n    'tqdm' \\\n    'pandas-datareader' \\\n    'tensorflow' \\\n    'alembic' \\\n    'ipywidgets' \\\n    'widgetsnbextension' \\\n    'vega' \\\n    'pyqt=4.11'\n\n# Add Volumes and Set permissions\nRUN mkdir -p -m 777 /opt \\\n    && mkdir -p -m 777 /opt/containerfiles \\\n    && chmod 777 /opt \\\n    && chmod 777 /opt/containerfiles \\\n    && touch /tmp/firsttimerunning\n\n### Finish the setup using root\nUSER $NB_USER\n\n# Add custom Python 2 pips:\nCOPY ./python2/ /opt/python2\n\nRUN /opt/python2/install_pips.sh\n\nUSER root\n\nRUN conda install pyqt=4.11 -y\n\n# Configure container startup as root\nEXPOSE 8888\n#ENTRYPOINT [\"tini\", \"--\"]\nCMD [\"/opt/containerfiles/start-container.sh\"]\n\n#########################################################\n#\n# Add Files into the container now that the setup is done\n#\n# Add the starters and installers:\nADD ./containerfiles/ /opt/containerfiles/\n\nRUN chmod 777 /opt/containerfiles/*.sh \\\n    && cp /opt/containerfiles/bashrc ~/.bashrc \\\n    && cp /opt/containerfiles/vimrc  ~/.vimrc \\\n    && cp /opt/containerfiles/bashrc /home/$NB_USER/.bashrc \\\n    && cp /opt/containerfiles/vimrc  /home/$NB_USER/.vimrc \\\n    && chown $NB_USER /home/$NB_USER/.bashrc \\\n    && chown $NB_USER /home/$NB_USER/.vimrc \\\n    && chmod 664 /home/$NB_USER/.bashrc \\\n    && chmod 664 /home/$NB_USER/.vimrc\n\nRUN echo 'export PATH=$PATH:/opt/conda/envs/python2/bin:/opt/conda/bin:/opt/work/bins' >> /root/.bashrc \\\n    && echo '' >> /home/$NB_USER/.bashrc \\\n    && echo 'if [[ \"${PYTHONPATH}\" == \"\" ]]; then' >> /root/.bashrc \\\n    && echo '   export PYTHONPATH=/opt/work' >> /root/.bashrc \\\n    && echo 'else' >> /root/.bashrc \\\n    && echo '   export PYTHONPATH=$PYTHONPATH:/opt/work' >> /root/.bashrc \\\n    && echo 'fi' >> /root/.bashrc \\\n    && echo '' >> /root/.bashrc \\\n    && echo 'source activate python2' >> /root/.bashrc \\\n    && echo '' >> /root/.bashrc \\\n    && mv /usr/bin/vi /usr/bin/bak.vi \\\n    && cp /usr/bin/vim /usr/bin/vi\n\nRUN echo 'export PATH=$PATH:/opt/conda/envs/python2/bin:/opt/conda/bin:/opt/work/bins' >> /home/$NB_USER/.bashrc \\\n    && echo '' >> /home/$NB_USER/.bashrc \\\n    && echo 'if [[ \"${PYTHONPATH}\" == \"\" ]]; then' >> /home/$NB_USER/.bashrc \\\n    && echo '   export PYTHONPATH=/opt/work' >> /home/$NB_USER/.bashrc \\\n    && echo 'else' >> /home/$NB_USER/.bashrc \\\n    && echo '   export PYTHONPATH=$PYTHONPATH:/opt/work' >> /home/$NB_USER/.bashrc \\\n    && echo 'fi' >> /home/$NB_USER/.bashrc \\\n    && echo '' >> /home/$NB_USER/.bashrc \\\n    && echo 'source activate python2' >> /home/$NB_USER/.bashrc \\\n    && echo '' >> /home/$NB_USER/.bashrc\n\n# Add local files as late as possible to avoid cache busting\nRUN cp /opt/containerfiles/start-notebook.sh /usr/local/bin/ \\\n    && cp /opt/containerfiles/start-singleuser.sh /usr/local/bin/ \\\n    && cp /opt/containerfiles/jupyter_notebook_config.py /home/$NB_USER/.jupyter/ \\\n    && mkdir -p -m 777 /opt/python2 \\\n    && chmod 777 /opt \\\n    && chown -R $NB_USER:users /opt/python2 \\\n    && mkdir -p -m 777 /opt/work/ \\\n    && chmod 777 /opt \\\n    && chmod 777 /opt/work \\\n    && chown -R $NB_USER:users /opt/work \\\n    && mkdir -p -m 777 /opt/work/examples \\\n    && mkdir -p -m 777 /opt/work/src \\\n    && mkdir -p -m 777 /opt/work/env \\\n    && mkdir -p -m 777 /opt/work/bins \\\n    && mkdir -p -m 777 /opt/work/libs \\\n    && mkdir -p -m 777 /opt/work/configs \\\n    && mkdir -p -m 777 /opt/work/pips \\\n    && mkdir -p -m 777 /opt/work/data \\\n    && chown -R $NB_USER:users /opt/work/examples \\\n    && chown -R $NB_USER:users /opt/work/src \\\n    && chown -R $NB_USER:users /opt/work/env \\\n    && chown -R $NB_USER:users /opt/work/bins \\\n    && chown -R $NB_USER:users /opt/work/libs \\\n    && chown -R $NB_USER:users /opt/work/configs \\\n    && chown -R $NB_USER:users /opt/work/pips \\\n    && chown -R $NB_USER:users /opt/work/data\n\nWORKDIR /opt/work\n\nCOPY ./libs/ /opt/work/libs/\nCOPY ./configs/ /opt/work/configs/\nCOPY ./bins/ /opt/work/bins/\nCOPY ./src/ /opt/work/src/\nCOPY ./env/ /opt/work/env/\nCOPY ./examples /opt/work/examples/\n\n# Assign all permissions over:\nRUN chown -R $NB_USER:users /opt/work/* \\\n    && chmod 777 /opt/work/bins/*\n\n#########################################################\n#\n# Run as the user\n#\nUSER $NB_USER\n\n# Track the Python 2 and Python 3 pips and Conda Environment\nRUN pip2 freeze > /opt/work/pips/python2-requirements.txt \\\n    && pip3 freeze > /opt/work/pips/python3-requirements.txt\n"
}