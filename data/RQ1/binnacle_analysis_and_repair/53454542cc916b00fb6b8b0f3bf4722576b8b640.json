{
  "startTime": 1674243795012,
  "endTime": 1674243795247,
  "originalSmells": [
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 100,
        "lineEnd": 100,
        "columnStart": 4,
        "columnEnd": 147
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 19,
        "lineEnd": 47,
        "columnStart": 22,
        "columnEnd": 12
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 63,
        "lineEnd": 72,
        "columnStart": 22,
        "columnEnd": 15
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM nvidia/cuda:8.0-cudnn5-devel\n\nMAINTAINER Jan Deriu <deri@zahw.ch>\n\nARG THEANO_VERSION=rel-0.8.2\nARG TENSORFLOW_VERSION=0.8.0\nARG TENSORFLOW_ARCH=gpu\nARG KERAS_VERSION=1.2.2\nARG LASAGNE_VERSION=v0.1\nARG TORCH_VERSION=latest\nARG CAFFE_VERSION=master\n\n#RUN echo -e \"\\n**********************\\nNVIDIA Driver Version\\n**********************\\n\" && \\\n#\tcat /proc/driver/nvidia/version && \\\n#\techo -e \"\\n**********************\\nCUDA Version\\n**********************\\n\" && \\\n#\tnvcc -V && \\\n#\techo -e \"\\n\\nBuilding your Deep Learning Docker Image...\\n\"\n\n# Install some dependencies\nRUN apt-get update && apt-get install --no-install-recommends -y \\\n\t\tbc \\\n\t\tbuild-essential \\\n\t\tcmake \\\n\t\tcurl \\\n\t\tg++ \\\n\t\tgfortran \\\n\t\tgit \\\n\t\tlibffi-dev \\\n\t\tlibfreetype6-dev \\\n\t\tlibhdf5-dev \\\n\t\tlibjpeg-dev \\\n\t\tliblcms2-dev \\\n\t\tlibopenblas-dev \\\n\t\tliblapack-dev \\\n\t\tlibpng12-dev \\\n\t\tlibssl-dev \\\n\t\tlibtiff5-dev \\\n\t\tlibwebp-dev \\\n\t\tlibzmq3-dev \\\n\t\tnano \\\n\t\tpkg-config \\\n\t\tpython3-dev \\\n\t\tpython3-pip \\\n\t\tsoftware-properties-common \\\n\t\tunzip \\\n\t\tvim \\\n\t\twget \\\n\t\tzlib1g-dev \\\n\t\t&& \\\n\tapt-get clean && \\\n\tapt-get autoremove && \\\n\trm -rf /var/lib/apt/lists/* && \\\n# Link BLAS library to use OpenBLAS using the alternatives mechanism (https://www.scipy.org/scipylib/building/linux.html#debian-ubuntu)\n\tupdate-alternatives --set libblas.so.3 /usr/lib/openblas-base/libblas.so.3\n\n# Add SNI support to Python\nRUN pip3 --no-cache-dir install \\\n\t\tpyopenssl \\\n\t\tndg-httpsclient \\\n\t\tpyasn1\n\n# Install useful Python packages using apt-get to avoid version incompatibilities with Tensorflow binary\n# especially numpy, scipy, skimage and sklearn (see https://github.com/tensorflow/tensorflow/issues/2034)\nRUN apt-get update && apt-get install --no-install-recommends -y \\\n\t\tpython3-numpy \\\n\t\tpython3-scipy \\\n\t\tpython3-nose \\\n\t\tpython3-h5py \\\n\t\tpython3-skimage \\\n\t\tpython3-matplotlib \\\n\t\tpython3-pandas \\\n\t\tpython3-sklearn \\\n\t\tpython3-sympy \\\n\t\t&& \\\n\tapt-get clean && \\\n\tapt-get autoremove && \\\n\trm -rf /var/lib/apt/lists/*\n\n# Install other useful Python packages using pip\nRUN pip3 --no-cache-dir install --upgrade ipython && \\\n\tpip3 --no-cache-dir install \\\n\t\tCython \\\n\t\tipykernel \\\n\t\tjupyter \\\n\t\tpath.py \\\n\t\tPillow \\\n\t\tpygments \\\n\t\tsix \\\n\t\tsphinx \\\n\t\twheel \\\n\t\tzmq \\\n\t\t&& \\\n\tpython3 -m ipykernel.kernelspec\n\nRUN pip3 --no-cache-dir install --upgrade nltk\nRUN pip3 --no-cache-dir install --upgrade tqdm\nRUN pip3 --no-cache-dir install --upgrade gensim\n\n\n# Install TensorFlow\nRUN pip3 install --no-cache-dir --ignore-installed --upgrade https://storage.googleapis.com/tensorflow/linux/gpu/tensorflow_gpu-0.12.1-cp35-cp35m-linux_x86_64.whl\n# Install Keras\nRUN pip3 --no-cache-dir install git+git://github.com/fchollet/keras.git@${KERAS_VERSION}\n\n# Expose Ports for TensorBoard (6006), Ipython (8888)\nEXPOSE 6006 8888\n\n# Install Theano and set up Theano config (.theanorc) for CUDA and OpenBLAS\nRUN pip3 --no-cache-dir install git+git://github.com/Theano/Theano.git@${THEANO_VERSION} && \\\n\t\\\n\techo \"[global]\\ndevice=gpu\\nfloatX=float32\\noptimizer_including=cudnn\\nmode=FAST_RUN \\\n\t\t\\n[lib]\\ncnmem=0.95 \\\n\t\t\\n[nvcc]\\nfastmath=True \\\n\t\t\\n[blas]\\nldflag = -L/usr/lib/openblas-base -lopenblas \\\n\t\t\\n[DebugMode]\\ncheck_finite=1\" \\\n\t> /root/.theanorc\n\nRUN /bin/sh -c python3 -m nltk.downloader punkt\nRUN /bin/sh -c python3 -m nltk.downloader stopwords\n\n# Install Keras\nRUN pip3 --no-cache-dir install git+git://github.com/fchollet/keras.git@${KERAS_VERSION}\n\nRUN mkdir /DLFramework\n\nCOPY architectures /DLFramework/architectures\nCOPY custom_keras_layers /DLFramework/custom_keras_layers\nCOPY data_loader /DLFramework/data_loader\nCOPY scripts /DLFramework/scripts\nCOPY utils /DLFramework/utils\nCOPY evaluation /DLFramework/evaluation\nCOPY create_word_embeddings.py /DLFramework\nCOPY distant_phase_nnet.py /DLFramework\nCOPY embeddings.py /DLFramework\nCOPY embeddings_container.py /DLFramework\nCOPY evaluation_metrics /DLFramework/evaluation_metrics\n\nWORKDIR /DLFramework\n\nCMD python3 -m tensorflow.tensorboard --logdir=logging/distant_it\n"
}