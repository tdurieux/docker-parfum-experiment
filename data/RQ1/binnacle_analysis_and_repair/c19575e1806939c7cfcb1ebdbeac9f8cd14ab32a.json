{
  "startTime": 1674245480364,
  "endTime": 1674245480722,
  "originalSmells": [
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 14,
        "lineEnd": 14,
        "columnStart": 4,
        "columnEnd": 84
      }
    },
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 26,
        "lineEnd": 26,
        "columnStart": 4,
        "columnEnd": 37
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 114,
        "lineEnd": 114,
        "columnStart": 5,
        "columnEnd": 36
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 89,
        "lineEnd": 89,
        "columnStart": 5,
        "columnEnd": 43
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 98,
        "lineEnd": 98,
        "columnStart": 5,
        "columnEnd": 43
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 111,
        "lineEnd": 111,
        "columnStart": 5,
        "columnEnd": 25
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 55,
        "lineEnd": 55,
        "columnStart": 4,
        "columnEnd": 42
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 55,
        "lineEnd": 55,
        "columnStart": 4,
        "columnEnd": 42
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 55,
        "lineEnd": 55,
        "columnStart": 4,
        "columnEnd": 42
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# An image with node v10.14.1 and git for use by other node based tool images as a base stage.\n# Also sets the working directory to /project.\nFROM node:10.14.1-alpine@sha256:35fcf0a48f57bef4bafa0f844f62edb659d036364a1d086995efe5b43ca0c4af as node\nRUN apk --update add --no-cache git\nWORKDIR /project\nENTRYPOINT [\"node\"]\n\n# An image that runs commitlint in the /project working directory.\n# https://github.com/marionebl/commitlint\n#\n# DOCKER_BUILDKIT=1 docker build --target commitlint --tag ockam/tool/commitlint:latest .\n# docker run --rm --volume \"$(pwd):/project\" ockam/tool/commitlint:latest --from=HEAD~1\nFROM node as commitlint\nRUN npm install --global @commitlint/config-conventional@7.1.2 @commitlint/cli@7.2.1 && npm cache clean --force;\nENTRYPOINT [\"commitlint\"]\nCMD [\"--from=HEAD~1\"]\n\n# An image that validates the contents of the /project working directory against\n# rules in .editorconfig files present in that directory tree.\n# https://editorconfig.org\n# https://github.com/jedmao/eclint\n#\n# DOCKER_BUILDKIT=1 docker build --target eclint --tag ockam/tool/eclint:latest .\n# docker run --rm --volume \"$(pwd):/project\" ockam/tool/eclint:latest\nFROM node as eclint\nRUN npm install --global eclint@2.8.1 && npm cache clean --force;\nENTRYPOINT [\"eclint\"]\nCMD [\"check\"]\n\n# An image that invokes shellcheck on any file path that is passed as an argument.\n# This path must be relative to the mounted /project directory.\n# https://www.shellcheck.net\n#\n# DOCKER_BUILDKIT=1 docker build --target shellcheck --tag ockam/tool/shellcheck:latest .\n# docker run --rm --volume \"$(pwd):/project\" ockam/tool/shellcheck:latest build\nFROM koalaman/shellcheck:v0.5.0@sha256:b8a2b097586f88578d45ac9c052d7c396fe651a128e44ab99b3742851033b9f5 as shellcheck\nWORKDIR /project\nENTRYPOINT [\"/bin/shellcheck\"]\nCMD [\"-a\", \"build\"]\n\n# An image with Golang v1.11.2 and git.\n# It sets /project as the working directory and runs Go as its entrypoint\n#\n# DOCKER_BUILDKIT=1 docker build --target go --tag ockam/tool/go:latest .\n# docker run --rm --volume \"$(pwd):/project\" ockam/tool/go:latest\nFROM golang:1.11.2-alpine3.8@sha256:692eff58ac23cafc7cb099793feb00406146d187cd3ba0226809317952a9cf37 as go-alpine\nENV GOOS=linux GOARCH=amd64 CGO_ENABLED=1\nRUN apk --update add --no-cache gcc g++ libtool git\nWORKDIR /project\nENTRYPOINT [\"go\"]\n\nFROM golang:1.11.2-stretch@sha256:498f71698c1bcbf50d6e5f08ce60c30ccab3ab5b6775c4b5395b1ae1a367bdab as go\nENV GOOS=linux GOARCH=amd64 CGO_ENABLED=1\nRUN apt-get update && apt-get install --no-install-recommends -y gcc g++ libtool git && rm -rf /var/lib/apt/lists/*;\nWORKDIR /project\nENTRYPOINT [\"go\"]\n\n# An image that invokes gometalinter in the /project directory\n#\n# DOCKER_BUILDKIT=1 docker build --target gometalinter --tag ockam/tool/gometalinter:latest .\n# docker run --rm --volume \"$(pwd):/project\" ockam/tool/gometalinter:latest\n#\n# gometalinter doesn't support go modules yet, the /entrypoint script below tries to make project\n# as if it was following the pre-1.11 GOPATH setup.\nFROM go-alpine as gometalinter\nRUN wget https://raw.githubusercontent.com/alecthomas/gometalinter/v2.0.11/scripts/install.sh \\\n\t\t&& chmod u+x install.sh && ./install.sh -b /usr/local/bin v2.0.11 \\\n\t\t&& mkdir -p /go/src/github.com/ockam-network/ockam \\\n\t\t&& echo \"#!/bin/sh\" > /entrypoint \\\n\t\t&& echo \"cp -r /project/* /go/src/github.com/ockam-network/ockam/\" >> /entrypoint \\\n\t\t&& echo \"rm -rf /go/src/github.com/ockam-network/ockam/vendor\" >> /entrypoint \\\n\t\t&& echo \"cp -r /project/vendor/* /go/src/\" >> /entrypoint \\\n\t\t&& echo \"exec gometalinter \\\"\\$@\\\"\" >> /entrypoint \\\n\t\t&& chmod +x /entrypoint\nWORKDIR /go/src/github.com/ockam-network/ockam\nENV GO111MODULE=off\nENTRYPOINT [\"/entrypoint\"]\nCMD [\"--vendor\", \"--enable-all\", \"--line-length=120\", \"./...\"]\n\n# An image with goreleaser v0.95.2\n#\n# DOCKER_BUILDKIT=1 docker build --target goreleaser --tag ockam/tool/goreleaser:latest .\n# docker run --rm --volume \"$(pwd):/project\" ockam/tool/goreleaser:latest\nFROM go-alpine as goreleaser-alpine\nRUN wget https://github.com/goreleaser/goreleaser/releases/download/v0.95.2/goreleaser_Linux_x86_64.tar.gz \\\n\t\t&& echo \"a04f626fb853de48dde78d92ee08cdc188593a9ea9919fa56953703b8a8423bf  goreleaser_Linux_x86_64.tar.gz\" | \\\n\t\t\tsha256sum -c - \\\n\t\t&& tar xvf goreleaser_Linux_x86_64.tar.gz \\\n\t\t&& chmod u+x goreleaser \\\n\t\t&& cp goreleaser /usr/local/bin/ && rm goreleaser_Linux_x86_64.tar.gz\nENTRYPOINT [\"goreleaser\"]\n\nFROM golang:1.11.2-stretch@sha256:498f71698c1bcbf50d6e5f08ce60c30ccab3ab5b6775c4b5395b1ae1a367bdab as goreleaser\nRUN wget https://github.com/goreleaser/goreleaser/releases/download/v0.95.2/goreleaser_Linux_x86_64.tar.gz \\\n\t\t&& echo \"a04f626fb853de48dde78d92ee08cdc188593a9ea9919fa56953703b8a8423bf  goreleaser_Linux_x86_64.tar.gz\" | \\\n\t\t\tsha256sum -c - \\\n\t\t&& tar xvf goreleaser_Linux_x86_64.tar.gz \\\n\t\t&& chmod u+x goreleaser \\\n\t\t&& cp goreleaser /usr/local/bin/ && rm goreleaser_Linux_x86_64.tar.gz\nENTRYPOINT [\"goreleaser\"]\n\n# An image with go-with-softhsm v2.5.0\n#\n# DOCKER_BUILDKIT=1 docker build --target softhsm --tag ockam/tool/go-with-softhsm:latest .\n# docker run --rm --volume \"$(pwd):/project\" ockam/tool/go-with-softhsm:latest\nFROM go-alpine as go-with-softhsm\nRUN apk --update add --no-cache alpine-sdk autoconf automake openssl-dev\nRUN wget https://github.com/opendnssec/SoftHSMv2/archive/2.5.0.tar.gz \\\n\t\t&& echo \"075476d61405948dbaf6fd90cfdd9cd57c247a0dfa5e7e8f973c17f8be978485  2.5.0.tar.gz\" | sha256sum -c - \\\n\t\t&& tar xvf 2.5.0.tar.gz \\\n\t\t&& cd SoftHSMv2-2.5.0 \\\n\t\t&& sh autogen.sh \\\n\t\t&& ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --prefix=/usr/local \\\n\t\t&& make \\\n\t\t&& make install && rm 2.5.0.tar.gz\n"
}