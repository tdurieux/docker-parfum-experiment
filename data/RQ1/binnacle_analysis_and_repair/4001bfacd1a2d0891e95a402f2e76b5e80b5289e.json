{
  "startTime": 1674245460251,
  "endTime": 1674245460512,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 45,
        "lineEnd": 45,
        "columnStart": 4,
        "columnEnd": 49
      }
    },
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 48,
        "lineEnd": 48,
        "columnStart": 4,
        "columnEnd": 30
      }
    },
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 49,
        "lineEnd": 49,
        "columnStart": 4,
        "columnEnd": 33
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 2,
        "lineEnd": 2,
        "columnStart": 4,
        "columnEnd": 35
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 19,
        "lineEnd": 19,
        "columnStart": 4,
        "columnEnd": 161
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 47,
        "lineEnd": 47,
        "columnStart": 4,
        "columnEnd": 29
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 2,
        "lineEnd": 2,
        "columnStart": 4,
        "columnEnd": 35
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 19,
        "lineEnd": 19,
        "columnStart": 4,
        "columnEnd": 161
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 47,
        "lineEnd": 47,
        "columnStart": 4,
        "columnEnd": 29
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM ubuntu:16.04 as coq-serapi\nRUN apt-get -y update && \\\n    apt-get -y --no-install-recommends install make m4 opam && rm -rf /var/lib/apt/lists/*;\n# Install ocaml 4.06.0 via opam (for SerAPI)\nRUN opam init -j 4 --compiler=\"4.06.0\" -y\n# Configure ocaml, install coq-serapi at fixed version\nRUN eval `opam config env` && \\\n    opam install coq-serapi=8.7.2+0.4.13\n\n\n# FROM cl-ubuntu as cl\n# FROM java-mutator-ubuntu as java-mutator\n# FROM clang-mutate-ubuntu as clang-mutate\nFROM docker.grammatech.com/synthesis/cl as cl\nFROM docker.grammatech.com/synthesis/java-mutator as java-mutator\nFROM docker.grammatech.com/synthesis/clang-mutate as clang-mutate\nFROM ubuntu:16.04\n\nRUN apt-get -y update && \\\n    apt-get -y --no-install-recommends install g++ gcc gcc-multilib graphviz libffi-dev man-db maven opam openjdk-8-jdk pandoc pkg-config texinfo unzip expect wget curl libboost-all-dev && rm -rf /var/lib/apt/lists/*;\n\nCOPY --from=coq-serapi /root/.opam /root/.opam\nCOPY --from=clang-mutate /usr/synth/ /usr/synth/\nCOPY --from=cl /usr/synth/quicklisp /usr/synth/quicklisp\nCOPY --from=cl /usr/synth/lib/ccl /usr/synth/lib/ccl\nCOPY --from=cl /usr/synth/lib/sbcl /usr/synth/lib/sbcl\nCOPY --from=cl /usr/synth/bin/ccl /usr/synth/bin/ccl\nCOPY --from=cl /usr/synth/bin/sbcl /usr/synth/bin/sbcl\nCOPY --from=cl /usr/synth/share/ccl /usr/synth/share/ccl\nCOPY --from=cl /usr/synth/share/doc/ccl /usr/synth/share/doc/ccl\nCOPY --from=cl /usr/synth/share/doc/sbcl /usr/synth/share/doc/sbcl\nCOPY --from=java-mutator /usr/synth/bin/java-mutator /usr/synth/bin/java-mutator\n\n# Artistic Style Version 3.0\n# Build astyle from source as the package manager only has version 2.0.\nRUN wget https://downloads.sourceforge.net/project/astyle/astyle/astyle%203.1/astyle_3.1_linux.tar.gz && \\\n    tar xf astyle_3.1_linux.tar.gz && \\\n    cd astyle/build/gcc && \\\n    make release && \\\n    cp bin/astyle /usr/bin && \\\n    cd ../../../ && \\\n    rm -rf astyle && \\\n    rm -rf astyle_3.1_linux.tar.gz\n\n# Javascript\nRUN curl -f -sL https://deb.nodesource.com/setup_8.x | bash - && \\\n    apt-get -y update && \\\n    apt-get -y --no-install-recommends install nodejs && \\\n    npm install --global acorn && \\\n    npm install --global prettier && npm cache clean --force; && rm -rf /var/lib/apt/lists/*;\n\nARG GT\nARG LISP\n# Use /root/quicklisp/local-projects.\nRUN cp -R /usr/synth/quicklisp /root/quicklisp\nCOPY . /root/quicklisp/local-projects/sel\nWORKDIR /root/quicklisp/local-projects/sel\nRUN export __TEMP_LD_LIBRARY_PATH=$(if [ -z \"$LD_LIBRARY_PATH\" ]; then echo \"\" ;else echo \":$LD_LIBRARY_PATH\";fi)\nENV LISP=$LISP \\\n    PATH=/root/quicklisp/local-projects/sel/bin:/root/.opam/4.06.0/bin:/usr/synth/bin:$PATH \\\n    LD_LIBRARY_PATH=/root/quicklisp/dists/trace-db/software/trace-db/:/usr/synth/lib/$__TEMP_LD_LIBRARY_PATH \\\n    SERAPI=/root/.opam/4.06.0/bin/sertop \\\n    COQLIB=/root/.opam/4.06.0/lib/coq/ \\\n    QUICK_LISP=/root/quicklisp/ \\\n    SBCL_HOME=/usr/synth/lib/sbcl \\\n    LISP_STACK=32678\nRUN make real-clean all\nCMD /bin/bash\n"
}