{
  "startTime": 1674243702174,
  "endTime": 1674243702550,
  "originalSmells": [
    {
      "rule": "wgetUseHttpsUrl",
      "position": {
        "lineStart": 46,
        "lineEnd": 46,
        "columnStart": 4,
        "columnEnd": 78
      }
    },
    {
      "rule": "wgetUseHttpsUrl",
      "position": {
        "lineStart": 52,
        "lineEnd": 52,
        "columnStart": 4,
        "columnEnd": 79
      }
    },
    {
      "rule": "wgetUseHttpsUrl",
      "position": {
        "lineStart": 53,
        "lineEnd": 53,
        "columnStart": 2,
        "columnEnd": 77
      }
    },
    {
      "rule": "wgetUseHttpsUrl",
      "position": {
        "lineStart": 54,
        "lineEnd": 54,
        "columnStart": 2,
        "columnEnd": 75
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 75,
        "lineEnd": 75,
        "columnStart": 4,
        "columnEnd": 32
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 76,
        "lineEnd": 76,
        "columnStart": 4,
        "columnEnd": 29
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 76,
        "lineEnd": 76,
        "columnStart": 33,
        "columnEnd": 71
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 56,
        "lineEnd": 56,
        "columnStart": 2,
        "columnEnd": 49
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 57,
        "lineEnd": 57,
        "columnStart": 2,
        "columnEnd": 54
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 58,
        "lineEnd": 58,
        "columnStart": 2,
        "columnEnd": 54
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 8,
        "lineEnd": 32,
        "columnStart": 2,
        "columnEnd": 15
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM 32bit/ubuntu:16.04\n\nENV DEBIAN_FRONTEND noninteractive\n\n# Tools\nRUN apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys 3FA7E0328081BFF6A14DA29AA6A19B38D3D831EF && \\\n  echo \"deb http://download.mono-project.com/repo/ubuntu xenial main\" | sudo tee /etc/apt/sources.list.d/mono-xamarin.list && \\\n  apt-get -qq update && \\\n  apt-get -qq -y --no-install-recommends install \\\n    ant \\\n    build-essential \\\n    default-jdk \\\n    doxygen \\\n    gdb \\\n    git \\\n    gksu \\\n    gtk-sharp2 \\\n    iputils-tracepath \\\n    libcanberra-gtk-module:i386 \\\n    libgtk2.0-0 \\\n    mono-complete \\\n    mosquitto \\\n    mosquitto-clients \\\n    npm \\\n    python-pip \\\n    python-serial \\\n    rlwrap \\\n    screen \\\n    srecord \\\n    uml-utilities \\\n    unzip \\\n    wget \\\n    > /dev/null \\\n  && apt-get -qq clean && rm -rf /var/lib/apt/lists/*;\n\n# Install coap-cli\nRUN npm -q install coap-cli -g \\\n  && sudo ln -s /usr/bin/nodejs /usr/bin/node\n\n# Install ARM toolchain\nRUN wget -nv https://launchpad.net/gcc-arm-embedded/5.0/5-2015-q4-major/+download/gcc-arm-none-eabi-5_2-2015q4-20151219-linux.tar.bz2 && \\\n  tar xjf gcc-arm-none-eabi-5_2-2015q4-20151219-linux.tar.bz2 -C /tmp/ && \\\n  cp -f -r /tmp/gcc-arm-none-eabi-5_2-2015q4/* /usr/local/ && \\\n  rm -rf /tmp/gcc-arm-none-eabi-* gcc-arm-none-eabi-*-linux.tar.bz2\n\n# Install msp430 toolchain\nRUN wget -nv https://simonduq.github.io/resources/mspgcc-4.7.2-compiled.tar.bz2 && \\\n  tar xjf mspgcc*.tar.bz2 -C /tmp/ && \\\n  cp -f -r /tmp/msp430/* /usr/local/ && \\\n  rm -rf /tmp/msp430 mspgcc*.tar.bz2\n\n# Install NXP toolchain (partial, with binaries excluded. Download from nxp.com)\nRUN wget -nv https://simonduq.github.io/resources/ba-elf-gcc-4.7.4-part1.tar.bz2 && \\\n  wget -nv https://simonduq.github.io/resources/ba-elf-gcc-4.7.4-part2.tar.bz2 && \\\n  wget -nv https://simonduq.github.io/resources/jn516x-sdk-4163-1416.tar.bz2 && \\\n  mkdir /tmp/jn516x-sdk /tmp/ba-elf-gcc && \\\n  tar xjf jn516x-sdk-*.tar.bz2 -C /tmp/jn516x-sdk && \\\n  tar xjf ba-elf-gcc-*part1.tar.bz2 -C /tmp/ba-elf-gcc && \\\n  tar xjf ba-elf-gcc-*part2.tar.bz2 -C /tmp/ba-elf-gcc && \\\n  cp -f -r /tmp/jn516x-sdk /usr/ && \\\n  cp -f -r /tmp/ba-elf-gcc /usr/ && \\\n  rm -rf jn516x*.bz2 ba-elf-gcc*.bz2 /tmp/ba-elf-gcc* /tmp/jn516x-sdk* && rm jn516x-sdk-*.tar.bz2\n\nENV PATH=\"/usr/ba-elf-gcc/bin:${PATH}\"\n\n## Install nRF52 SDK\nRUN wget -nv https://developer.nordicsemi.com/nRF5_IoT_SDK/nRF5_IoT_SDK_v0.9.x/nrf5_iot_sdk_3288530.zip && \\\n    mkdir /usr/nrf52-sdk && \\\n    unzip -q nrf5_iot_sdk_3288530.zip -d /usr/nrf52-sdk && \\\n    rm nrf5_iot_sdk_3288530.zip\n\nENV NRF52_SDK_ROOT /usr/nrf52-sdk\n\n# Install sphinx and sphinx_rtd_theme, required for building and testing the\n# readthedocs API documentation\nRUN pip -q --no-cache-dir install --upgrade pip\nRUN pip -q --no-cache-dir install setuptools && pip -q --no-cache-dir install sphinx_rtd_theme sphinx\n\n# Create user, enable X forwarding, add to group dialout\n# -e DISPLAY=$DISPLAY -v /tmp/.X11-unix:/tmp/.X11-unix\nRUN export uid=1000 gid=1000 && \\\n    mkdir -p /home/user && \\\n    echo \"user:x:${uid}:${gid}:user,,,:/home/user:/bin/bash\" >> /etc/passwd && \\\n    echo \"user:x:${uid}:\" >> /etc/group && \\\n    echo \"user ALL=(ALL) NOPASSWD: ALL\" > /etc/sudoers && \\\n    chmod 0440 /etc/sudoers && \\\n    chown ${uid}:${gid} -R /home/user && \\\n    usermod -aG dialout user\n\n# Set user for what comes next\nUSER user\n\n# Environment variables\nENV JAVA_HOME           /usr/lib/jvm/default-java\nENV HOME                /home/user\nENV CONTIKI_NG          ${HOME}/contiki-ng\nENV COOJA               ${CONTIKI_NG}/tools/cooja\nENV                     PATH=\"${HOME}:${PATH}\"\nWORKDIR                 ${HOME}\n\n# Create Cooja shortcut\nRUN echo \"#!/bin/bash\\nant -Dbasedir=${COOJA} -f ${COOJA}/build.xml run\" > ${HOME}/cooja && \\\n  chmod +x ${HOME}/cooja\n\n# Download, build and install Renode\nRUN git clone --quiet https://github.com/renode/renode.git \\\n  && cd ${HOME}/renode \\\n  && git checkout v1.3 \\\n  && ./build.sh\nENV PATH=\"${HOME}/renode:${PATH}\"\n\n# By default, we use a Docker bind mount to share the repo with the host,\n# with Docker run option:\n# -v <HOST_CONTIKI_NG_ABS_PATH>:/home/user/contiki-ng\n# Alternatively, uncomment the next two lines to download Contiki-NG and pre-compile Cooja.\n#RUN git clone --recursive https://github.com/contiki-ng/contiki-ng.git ${CONTIKI_NG}\n#RUN ant -q -f ${CONTIKI_NG}/tools/cooja/build.xml jar\n\n# Working directory\nWORKDIR ${CONTIKI_NG}\n\n# Enable IPv6 -- must be done at runtime, hence added to .profile\nRUN echo \"sudo sysctl -w net.ipv6.conf.all.disable_ipv6=0 > /dev/null\" >> ${HOME}/.profile\n\n# Start a bash\nCMD bash --login\n"
}