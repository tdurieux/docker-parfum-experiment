{
  "startTime": 1674245251950,
  "endTime": 1674245252996,
  "originalSmells": [
    {
      "rule": "wgetUseHttpsUrl",
      "position": {
        "lineStart": 55,
        "lineEnd": 55,
        "columnStart": 4,
        "columnEnd": 70
      }
    },
    {
      "rule": "wgetUseHttpsUrl",
      "position": {
        "lineStart": 81,
        "lineEnd": 81,
        "columnStart": 1,
        "columnEnd": 68
      }
    },
    {
      "rule": "wgetUseHttpsUrl",
      "position": {
        "lineStart": 178,
        "lineEnd": 178,
        "columnStart": 4,
        "columnEnd": 84
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 48,
        "lineEnd": 48,
        "columnStart": 4,
        "columnEnd": 50
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 56,
        "lineEnd": 56,
        "columnStart": 4,
        "columnEnd": 33
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 65,
        "lineEnd": 65,
        "columnStart": 4,
        "columnEnd": 53
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 74,
        "lineEnd": 74,
        "columnStart": 4,
        "columnEnd": 95
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 83,
        "lineEnd": 83,
        "columnStart": 1,
        "columnEnd": 63
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 92,
        "lineEnd": 92,
        "columnStart": 4,
        "columnEnd": 33
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 101,
        "lineEnd": 106,
        "columnStart": 4,
        "columnEnd": 26
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 115,
        "lineEnd": 117,
        "columnStart": 4,
        "columnEnd": 29
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 126,
        "lineEnd": 126,
        "columnStart": 4,
        "columnEnd": 47
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 135,
        "lineEnd": 135,
        "columnStart": 4,
        "columnEnd": 92
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 170,
        "lineEnd": 171,
        "columnStart": 4,
        "columnEnd": 67
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 180,
        "lineEnd": 199,
        "columnStart": 4,
        "columnEnd": 42
      }
    },
    {
      "rule": "yumInstallRmVarCacheYum",
      "position": {
        "lineStart": 8,
        "lineEnd": 8,
        "columnStart": 4,
        "columnEnd": 42
      }
    },
    {
      "rule": "yumInstallRmVarCacheYum",
      "position": {
        "lineStart": 9,
        "lineEnd": 9,
        "columnStart": 4,
        "columnEnd": 53
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM lambci/lambda:build-provided\n\nLABEL maintainer=\"Development Seed <info@developmentseed.org>\"\nLABEL authors=\"Matthew Hanson  <matt.a.hanson@gmail.com>\"\n\n# install system libraries\nRUN \\\n    yum makecache fast; \\\n    yum install -y wget libpng-devel nasm; rm -rf /var/cache/yum \\\n    yum install -y bash-completion --enablerepo=epel; \\\n    yum clean all; \\\n    yum autoremove\n\n# versions of packages\nENV \\\n    CURL_VERSION=7.59.0 \\\n    GEOS_VERSION=3.7.1 \\\n    GEOTIFF_VERSION=1.4.3 \\\n\tGDAL_VERSION=2.4.1 \\\n    HDF4_VERSION=4.2.14 \\\n\tHDF5_VERSION=1.10.5 \\\n    NETCDF_VERSION=4.6.2 \\\n    NGHTTP2_VERSION=1.35.1 \\\n\tOPENJPEG_VERSION=2.3.0 \\\n    LIBJPEG_TURBO_VERSION=2.0.1 \\\n    PKGCONFIG_VERSION=0.29.2 \\\n    PROJ_VERSION=5.2.0 \\\n    SZIP_VERSION=2.1.1 \\\n    WEBP_VERSION=1.0.1 \\\n    ZSTD_VERSION=1.3.8\n\n# Paths to things\nENV \\\n\tBUILD=/build \\\n    NPROC=4 \\\n\tPREFIX=/usr/local \\\n\tGDAL_CONFIG=/usr/local/bin/gdal-config \\\n\tLD_LIBRARY_PATH=/usr/local/lib:/usr/local/lib64 \\\n    GDAL_DATA=/usr/local/share/gdal\n\n# switch to a build directory\nWORKDIR /build\n\n# pkg-config - version > 2.5 required for GDAL 2.3+\nRUN \\\n    mkdir pkg-config; \\\n    wget -qO- https://pkg-config.freedesktop.org/releases/pkg-config-$PKGCONFIG_VERSION.tar.gz \\\n        | tar xvz -C pkg-config --strip-components=1; cd pkg-config; \\\n    ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --prefix=$PREFIX CFLAGS=\"-O2 -Os\"; \\\n    make -j ${NPROC} install; \\\n    cd ../; rm -rf pkg-config\n\n# proj\nRUN \\\n    mkdir proj; \\\n    wget -qO- https://download.osgeo.org/proj/proj-$PROJ_VERSION.tar.gz | tar xvz -C proj --strip-components=1; cd proj; \\\n    ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --prefix=$PREFIX; \\\n    make -j ${NPROC} install; \\\n    cd ..; rm -rf proj\n\n# nghttp2\nRUN \\\n    mkdir nghttp2; \\\n    wget -qO- https://github.com/nghttp2/nghttp2/releases/download/v${NGHTTP2_VERSION}/nghttp2-${NGHTTP2_VERSION}.tar.gz \\\n        | tar xvz -C nghttp2 --strip-components=1; cd nghttp2; \\\n    ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --enable-lib-only --prefix=${PREFIX}; \\\n    make -j ${NPROC} install; \\\n    cd ..; rm -rf nghttp2\n\n# curl\nRUN \\\n    mkdir curl; \\\n    wget -qO- https://curl.haxx.se/download/curl-${CURL_VERSION}.tar.gz \\\n        | tar xvz -C curl --strip-components=1; cd curl; \\\n    ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --prefix=${PREFIX} --disable-manual --disable-cookies --with-nghttp2=${PREFIX}; \\\n    make -j ${NPROC} install; \\\n    cd ..; rm -rf curl\n\n# GEOS\nRUN \\\n    mkdir geos; \\\n\twget -qO- https://download.osgeo.org/geos/geos-$GEOS_VERSION.tar.bz2 \\\n        | tar xvj -C geos --strip-components=1; cd geos; \\\n\t./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --enable-python --prefix=$PREFIX CFLAGS=\"-O2 -Os\"; \\\n\tmake -j ${NPROC} install; \\\n\tcd ..; rm -rf geos\n\n# szip (for hdf)\nRUN \\\n    mkdir szip; \\\n    wget -qO- https://support.hdfgroup.org/ftp/lib-external/szip/$SZIP_VERSION/src/szip-$SZIP_VERSION.tar.gz \\\n        | tar xvz -C szip --strip-components=1; cd szip; \\\n    ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --prefix=$PREFIX; \\\n    make -j ${NPROC} install; \\\n    cd ..; rm -rf szip\n\n# libhdf4\nRUN \\\n    mkdir hdf4; \\\n    wget -qO- https://support.hdfgroup.org/ftp/HDF/releases/HDF$HDF4_VERSION/src/hdf-$HDF4_VERSION.tar \\\n        | tar xv -C hdf4 --strip-components=1; cd hdf4; \\\n    ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" \\\n        --prefix=$PREFIX \\\n        --with-szlib=$PREFIX \\\n        --enable-shared \\\n        --disable-netcdf \\\n        --disable-fortran; \\\n    make -j ${NPROC} install; \\\n    cd ..; rm -rf hdf4\n\n# libhdf5\nRUN \\\n    mkdir hdf5; \\\n    wget -qO- https://support.hdfgroup.org/ftp/HDF5/releases/hdf5-${HDF5_VERSION%.*}/hdf5-${HDF5_VERSION}/src/hdf5-$HDF5_VERSION.tar.gz \\\n        | tar xvz -C hdf5 --strip-components=1; cd hdf5; \\\n    ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" \\\n        --prefix=$PREFIX \\\n        --with-szlib=$PREFIX; \\\n    make -j ${NPROC} install; \\\n    cd ..; rm -rf hdf5\n\n# NetCDF\nRUN \\\n    mkdir netcdf; \\\n    wget -qO- https://github.com/Unidata/netcdf-c/archive/v$NETCDF_VERSION.tar.gz \\\n        | tar xvz -C netcdf --strip-components=1; cd netcdf; \\\n    ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --prefix=$PREFIX --enable-hdf4; \\\n    make -j ${NPROC} install; \\\n    cd ..; rm -rf netcdf\n\n# WEBP\nRUN \\\n    mkdir webp; \\\n    wget -qO- https://storage.googleapis.com/downloads.webmproject.org/releases/webp/libwebp-${WEBP_VERSION}.tar.gz \\\n        | tar xvz -C webp --strip-components=1; cd webp; \\\n    CFLAGS=\"-O2 -Wl,-S\" PKG_CONFIG_PATH=\"/usr/lib64/pkgconfig\" ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --prefix=$PREFIX; \\\n    make -j ${NPROC} install; \\\n    cd ..; rm -rf webp\n\n# ZSTD\nRUN \\\n    mkdir zstd; \\\n    wget -qO- https://github.com/facebook/zstd/archive/v${ZSTD_VERSION}.tar.gz \\\n        | tar -xvz -C zstd --strip-components=1; cd zstd; \\\n    make -j ${NPROC} install PREFIX=$PREFIX ZSTD_LEGACY_SUPPORT=0 CFLAGS=-O1 --silent; \\\n    cd ..; rm -rf zstd\n\n# openjpeg\nRUN \\\n    mkdir openjpeg; \\\n    wget -qO- https://github.com/uclouvain/openjpeg/archive/v$OPENJPEG_VERSION.tar.gz \\\n        | tar xvz -C openjpeg --strip-components=1; cd openjpeg; mkdir build; cd build; \\\n    cmake .. -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=$PREFIX; \\\n    make -j ${NPROC} install; \\\n    cd ../..; rm -rf openjpeg\n\n# jpeg_turbo\nRUN \\\n    mkdir jpeg; \\\n    wget -qO- https://github.com/libjpeg-turbo/libjpeg-turbo/archive/${LIBJPEG_TURBO_VERSION}.tar.gz \\\n        | tar xvz -C jpeg --strip-components=1; cd jpeg; \\\n    cmake -G\"Unix Makefiles\" -DCMAKE_INSTALL_PREFIX=$PREFIX .; \\\n    make -j $(nproc) install; \\\n    cd ..; rm -rf jpeg\n\n# geotiff\nRUN \\\n    mkdir geotiff; \\\n    wget -qO- https://download.osgeo.org/geotiff/libgeotiff/libgeotiff-$GEOTIFF_VERSION.tar.gz \\\n        | tar xvz -C geotiff --strip-components=1; cd geotiff; \\\n    ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --prefix=${PREFIX} \\\n        --with-proj=${PREFIX} --with-jpeg=${PREFIX} --with-zip=yes; \\\n    make -j ${NPROC} install; \\\n    cd ${BUILD}; rm -rf geotiff\n\n# GDAL\nRUN \\\n    mkdir gdal; \\\n    wget -qO- https://download.osgeo.org/gdal/$GDAL_VERSION/gdal-$GDAL_VERSION.tar.gz \\\n        | tar xvz -C gdal --strip-components=1; cd gdal; \\\n    ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" \\\n        --disable-debug \\\n        --disable-static \\\n        --prefix=${PREFIX} \\\n        --with-openjpeg \\\n        --with-geotiff=${PREFIX} \\\n        --with-hdf4=${PREFIX} \\\n        --with-hdf5=${PREFIX} \\\n        --with-netcdf=${PREFIX} \\\n        --with-webp=${PREFIX} \\\n        --with-zstd=${PREFIX} \\\n        --with-jpeg=${PREFIX} \\\n        --with-threads=yes \\\n\t\t--with-curl=${PREFIX}/bin/curl-config \\\n        --without-python \\\n        --without-libtool \\\n        --with-geos=$PREFIX/bin/geos-config \\\n\t\t--with-hide-internal-symbols=yes \\\n        CFLAGS=\"-O2 -Os\" CXXFLAGS=\"-O2 -Os\" \\\n        LDFLAGS=\"-Wl,-rpath,'\\$\\$ORIGIN'\"; \\\n    make -j ${NPROC} install; \\\n    cd ${BUILD}; rm -rf gdal\n#\n# Copy shell scripts and config files over\nCOPY bin/* /usr/local/bin/\n\nWORKDIR /home/geolambda\n"
}