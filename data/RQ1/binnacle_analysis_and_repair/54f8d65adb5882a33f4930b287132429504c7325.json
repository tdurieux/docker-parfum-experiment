{
  "startTime": 1674234108457,
  "endTime": 1674234109180,
  "originalSmells": [
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 162,
        "lineEnd": 162,
        "columnStart": 4,
        "columnEnd": 36
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 184,
        "lineEnd": 184,
        "columnStart": 4,
        "columnEnd": 146
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 202,
        "lineEnd": 202,
        "columnStart": 4,
        "columnEnd": 141
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# Copyright 2018 the original author or authors.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n# in compliance with the License. You may obtain a copy of the License at\n#\n# http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software distributed under the License\n# is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n# or implied. See the License for the specific language governing permissions and limitations under\n# the License.\n\n# Dockerfile - alpine - openresty - Lua auth-crowd - modsecurity\n# related links found in the curl downloaded links and:\n# https://github.com/openresty/docker-openresty\n\nFROM alpine:3.8\n\nLABEL maintainer=\"Gerard Castillo <gerard.castillo@boehringer-ingelheim.com>\"\n\n# Docker Build Arguments\nARG NGINX_VERSION=\"1.13.6\"\nARG MODSECURITY_VERSION=\"3.0.0\"\nARG MODSECURITY_NGINX_VERSION=\"1.0.0\"\nARG OWASP_MODSECURITY_CRS_VERSION=\"3.0.2\"\nARG RESTY_VERSION=\"1.13.6.2\"\nARG RESTY_OPENSSL_VERSION=\"1.0.2p\"\nARG RESTY_PCRE_VERSION=\"8.42\"\nARG RESTY_J=\"1\"\nARG RESTY_CONFIG_OPTIONS=\"\\\n    --prefix=/etc/nginx \\\n    --sbin-path=/usr/sbin/nginx \\\n    --modules-path=/usr/lib/nginx/modules \\\n    --conf-path=/etc/nginx/nginx.conf \\\n    --error-log-path=/var/log/nginx/error.log \\\n    --http-log-path=/var/log/nginx/access.log \\\n    --pid-path=/var/run/nginx.pid \\\n    --lock-path=/var/run/nginx.lock \\\n    --http-client-body-temp-path=/var/cache/nginx/client_temp \\\n    --http-proxy-temp-path=/var/cache/nginx/proxy_temp \\\n    --http-fastcgi-temp-path=/var/cache/nginx/fastcgi_temp \\\n    --http-uwsgi-temp-path=/var/cache/nginx/uwsgi_temp \\\n    --http-scgi-temp-path=/var/cache/nginx/scgi_temp \\\n    --user=nginx \\\n    --group=nginx \\\n    --with-stream \\\n    --with-stream_ssl_module \\\n    --with-stream_ssl_preread_module \\\n    --with-stream_realip_module \\\n    --with-stream_geoip_module=dynamic \\\n    --with-http_slice_module \\\n    --with-mail \\\n    --with-mail_ssl_module \\\n    --with-compat \\\n    --with-file-aio \\\n    --with-http_addition_module \\\n    --with-http_auth_request_module \\\n    --with-http_dav_module \\\n    --with-http_flv_module \\\n    --with-http_geoip_module=dynamic \\\n    --with-http_gunzip_module \\\n    --with-http_gzip_static_module \\\n    --with-http_image_filter_module=dynamic \\\n    --with-http_mp4_module \\\n    --with-http_random_index_module \\\n    --with-http_realip_module \\\n    --with-http_secure_link_module \\\n    --with-http_ssl_module \\\n    --with-http_stub_status_module \\\n    --with-http_sub_module \\\n    --with-http_v2_module \\\n    --with-http_xslt_module=dynamic \\\n    --with-ipv6 \\\n    --with-md5-asm \\\n    --with-pcre-jit \\\n    --with-sha1-asm \\\n    --with-threads \\\n    --with-pcre-jit \\\n    --with-ipv6 \\\n    # --without-http_redis2_module \\\n    # --with-http_postgres_module \\\n\t--add-dynamic-module=/opt/modsecurity-nginx-v${MODSECURITY_NGINX_VERSION} \\\n    --with-ld-opt='-lcurl' \\\n    \"\nARG RESTY_CONFIG_OPTIONS_MORE=\"\"\nARG RESTY_ADD_PACKAGE_BUILDDEPS=\"\"\nARG RESTY_ADD_PACKAGE_RUNDEPS=\"\"\nARG RESTY_EVAL_PRE_CONFIGURE=\"\"\nARG RESTY_EVAL_POST_MAKE=\"\"\n\nLABEL resty_version=\"${RESTY_VERSION}\"\nLABEL resty_openssl_version=\"${RESTY_OPENSSL_VERSION}\"\nLABEL resty_pcre_version=\"${RESTY_PCRE_VERSION}\"\nLABEL resty_config_options=\"${RESTY_CONFIG_OPTIONS}\"\nLABEL resty_config_options_more=\"${RESTY_CONFIG_OPTIONS_MORE}\"\nLABEL resty_add_package_builddeps=\"${RESTY_ADD_PACKAGE_BUILDDEPS}\"\nLABEL resty_add_package_rundeps=\"${RESTY_ADD_PACKAGE_RUNDEPS}\"\nLABEL resty_eval_pre_configure=\"${RESTY_EVAL_PRE_CONFIGURE}\"\nLABEL resty_eval_post_make=\"${RESTY_EVAL_POST_MAKE}\"\n\n# These are not intended to be user-specified\nARG _RESTY_CONFIG_DEPS=\"--with-openssl=/opt/openssl-${RESTY_OPENSSL_VERSION} --with-pcre=/opt/pcre-${RESTY_PCRE_VERSION}\"\n\nRUN apk add --no-cache --virtual .build-deps \\\n        build-base \\\n        curl \\\n        gd-dev \\\n        geoip-dev \\\n        libxslt-dev \\\n        linux-headers \\\n        make \\\n        perl-dev \\\n        readline-dev \\\n        zlib-dev \\\n        gcc \\\n        libc-dev \\\n        gnupg \\\n        ${RESTY_ADD_PACKAGE_BUILDDEPS} \\\n    && apk add --no-cache --virtual .libmodsecurity-deps \\\n        libxml2-dev \\\n        git \\\n        libtool \\\n        automake \\\n        autoconf \\\n        g++ \\\n        flex \\\n        bison \\\n        yajl-dev \\\n    # Add runtime dependencies that should not be removed\n    && apk add --no-cache \\\n        syslog-ng \\\n        pcre-dev \\\n        gd \\\n        geoip \\\n        libgcc \\\n        libxslt \\\n        zlib \\\n        doxygen \\\n        geoip-dev \\\n        yajl \\\n        libstdc++ \\\n        git \\\n        sed \\\n        libmaxminddb-dev \\\n        libcurl \\\n        libssh2-dev \\\n        nghttp2-dev \\\n        pkgconf \\\n        curl-dev \\\n        perl \\\n        ${RESTY_ADD_PACKAGE_RUNDEPS} && \\\n    echo \"Adding required system group and user\" && \\\n    addgroup --system nginx && \\\n\tadduser --disabled-password --system --home /var/cache/nginx --shell /sbin/nologin --ingroup nginx nginx && \\\n    echo \"Creating installation folder\" && \\\n    mkdir -p /opt && \\\n    cd /opt && \\\n    echo \"Installing ModSec Library\" && \\\n\tcurl -fSL https://github.com/SpiderLabs/ModSecurity/releases/download/v${MODSECURITY_VERSION}/modsecurity-v${MODSECURITY_VERSION}.tar.gz -o modsecurity-v${MODSECURITY_VERSION}.tar.gz && \\\n \ttar -zxvf modsecurity-v${MODSECURITY_VERSION}.tar.gz && \\\n    cd modsecurity-v${MODSECURITY_VERSION} && \\\n    ./build.sh && \\\n    ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --enable-mutex-on-pm && make && make install && \\\n    cd /opt && \\\n    echo 'Installing ModSec - Nginx connector' && \\\n\tcurl -fSL https://github.com/SpiderLabs/ModSecurity-nginx/releases/download/v${MODSECURITY_NGINX_VERSION}/modsecurity-nginx-v${MODSECURITY_NGINX_VERSION}.tar.gz -o modsecurity-nginx-v${MODSECURITY_NGINX_VERSION}.tar.gz && \\\n\ttar -zxvf modsecurity-nginx-v${MODSECURITY_NGINX_VERSION}.tar.gz && \\\n    # TODO add geoip2 if needed, now using geoip v1\n    # cd /opt/GeoIP && \\\n    # git clone -b master --single-branch https://github.com/leev/ngx_http_geoip2_module.git . && \\\n    cd /opt && \\\n    echo 'Downloading OpenSSL version required for OpenResty' && \\\n    curl -fSL https://www.openssl.org/source/openssl-${RESTY_OPENSSL_VERSION}.tar.gz -o openssl-${RESTY_OPENSSL_VERSION}.tar.gz && \\\n    tar xzf openssl-${RESTY_OPENSSL_VERSION}.tar.gz && \\\n    echo 'Downloading PCRE version required for OpenResty' && \\\n    curl -fSL https://ftp.pcre.org/pub/pcre/pcre-${RESTY_PCRE_VERSION}.tar.gz -o pcre-${RESTY_PCRE_VERSION}.tar.gz && \\\n    tar xzf pcre-${RESTY_PCRE_VERSION}.tar.gz && \\\n    cd /opt && \\\n    echo 'Creating Nginx modules' && \\\n    export MODSECURITY_LIB=\"/opt/modsecurity-v${MODSECURITY_VERSION}/src/.libs/\" && \\\n\texport MODSECURITY_INC=\"/opt/modsecurity-v${MODSECURITY_VERSION}/headers/\" && \\\n    curl -fSL https://nginx.org/download/nginx-${NGINX_VERSION}.tar.gz -o nginx-${NGINX_VERSION}.tar.gz && \\\n    tar zxvf nginx-${NGINX_VERSION}.tar.gz && \\\n    cd /opt/nginx-${NGINX_VERSION} && \\\n    ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" ${_RESTY_CONFIG_DEPS} ${RESTY_CONFIG_OPTIONS} --add-dynamic-module=../modsecurity-nginx-v${MODSECURITY_NGINX_VERSION} --with-debug && \\\n    make modules && \\\n    cd /opt && \\\n    echo \"Installing GeoIP DB\" && \\\n    mkdir -p /etc/nginx/geoip && \\\n    curl -fSL https://geolite.maxmind.com/download/geoip/database/GeoLite2-City.tar.gz -o GeoLite2-City.tar.gz && \\\n    curl -fSL https://geolite.maxmind.com/download/geoip/database/GeoLite2-Country.tar.gz -o GeoLite2-Country.tar.gz && \\\n    tar -xvzf GeoLite2-City.tar.gz && \\\n    tar -xvzf GeoLite2-Country.tar.gz && \\\n    mv GeoLite2*/*.mmdb /etc/nginx/geoip/ && \\\n    cd /opt && \\\n    echo \"Installing OpenResty\" && \\\n    if [ -n \"${RESTY_EVAL_PRE_CONFIGURE}\" ]; then eval $(echo ${RESTY_EVAL_PRE_CONFIGURE}); fi && \\\n    export MODSECURITY_LIB=\"/opt/modsecurity-v${MODSECURITY_VERSION}/src/.libs/\" && \\\n\texport MODSECURITY_INC=\"/opt/modsecurity-v${MODSECURITY_VERSION}/headers/\" && \\\n    curl -fSL https://openresty.org/download/openresty-${RESTY_VERSION}.tar.gz -o openresty-${RESTY_VERSION}.tar.gz && \\\n    tar xzf openresty-${RESTY_VERSION}.tar.gz && \\\n    cd /opt/openresty-${RESTY_VERSION} && \\\n    ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" -j${RESTY_J} ${_RESTY_CONFIG_DEPS} ${RESTY_CONFIG_OPTIONS} ${RESTY_CONFIG_OPTIONS_MORE} --with-http_iconv_module --with-debug && \\\n    make -j${RESTY_J} && \\\n    make -j${RESTY_J} install && \\\n    cd /opt && \\\n    if [ -n \"${RESTY_EVAL_POST_MAKE}\" ]; then eval $(echo ${RESTY_EVAL_POST_MAKE}); fi && \\\n    cd /opt && \\\n    echo \"Installing ModSec OWASP Rules\" && \\\n    curl -fSL https://github.com/SpiderLabs/owasp-modsecurity-crs/archive/v${OWASP_MODSECURITY_CRS_VERSION}.tar.gz -o owasp-config.tar.gz && \\\n\ttar -zxvf owasp-config.tar.gz && \\\n\tmv /opt/owasp-modsecurity-crs-$OWASP_MODSECURITY_CRS_VERSION /etc/nginx/crs && \\\n\tmv /etc/nginx/crs/crs-setup.conf.example /etc/nginx/crs/crs-setup.conf && \\\n    echo \"Cleaning up\" && \\\n    rm -fr /opt/modsecurity-nginx-v${MODSECURITY_NGINX_VERSION}.tar.gz && \\\n    rm -fr /opt/modsecurity-v${MODSECURITY_VERSION}.tar.gz && \\\n    rm -fr /opt/GeoLite2* && \\\n    rm -fr /opt/owasp-config.tar.gz && \\\n    rm -fr /opt/owasp-modsecurity-crs-$OWASP_MODSECURITY_CRS_VERSION && \\\n    rm -fr /opt/nginx-${NGINX_VERSION}* && \\\n    rm -rf \\\n        /opt/openssl-${RESTY_OPENSSL_VERSION} \\\n        /opt/openssl-${RESTY_OPENSSL_VERSION}.tar.gz \\\n        /opt/openresty-${RESTY_VERSION}.tar.gz openresty-${RESTY_VERSION} \\\n        /opt/pcre-${RESTY_PCRE_VERSION}.tar.gz pcre-${RESTY_PCRE_VERSION} && \\\n    apk del .build-deps && \\\n    apk del .libmodsecurity-deps\n\nRUN export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/usr/lib\nENV PATH=\"$PATH:/etc/nginx/luajit/bin:/etc/nginx/bin\"\n\nCOPY entrypoint.sh entrypoint.sh\n\n# base image configs - expected to be redefined for child images\nCOPY nginx.conf /etc/nginx/nginx.conf\nCOPY modsecurity.conf /etc/nginx/modsecurity.conf\nCOPY crs-setup.conf /etc/nginx/crs/crs-setup.conf\nCOPY cors.conf /etc/nginx/cors.conf\n\n# here you can load your LUA scripts\nCOPY lua /etc/nginx/lua\n\n# adding Lua HTTP resty client - e.g.: dependency for Crowd Auth\nRUN opm get pintsized/lua-resty-http \\\n    && cp -r /etc/nginx/site/lualib/resty /etc/nginx/lua \\\n    && opm remove pintsized/lua-resty-http\n\nRUN chown -R nginx:nginx /var/log/nginx /etc/nginx /var/cache/nginx /usr/lib/nginx\n\n# implement changes required to run NGINX as an unprivileged user\nRUN chown -R :0 /etc/nginx /var/cache/nginx /var/log/nginx && \\\n    chmod -R g+w /etc/nginx /var/cache/nginx /var/log/nginx\n\nEXPOSE 8080\n\nENTRYPOINT [\"/entrypoint.sh\"]\n\nUSER nginx\n\n# Use SIGQUIT instead of default SIGTERM to cleanly drain requests\n# See https://github.com/openresty/docker-openresty/blob/master/README.md#tips--pitfalls\nSTOPSIGNAL SIGQUIT\n"
}