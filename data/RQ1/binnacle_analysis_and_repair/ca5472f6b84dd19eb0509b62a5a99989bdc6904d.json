{
  "startTime": 1674239281914,
  "endTime": 1674239282083,
  "originalSmells": [
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 43,
        "lineEnd": 43,
        "columnStart": 4,
        "columnEnd": 78
      }
    },
    {
      "rule": "yumInstallRmVarCacheYum",
      "position": {
        "lineStart": 9,
        "lineEnd": 9,
        "columnStart": 4,
        "columnEnd": 69
      }
    },
    {
      "rule": "yumInstallRmVarCacheYum",
      "position": {
        "lineStart": 12,
        "lineEnd": 12,
        "columnStart": 4,
        "columnEnd": 78
      }
    },
    {
      "rule": "yumInstallRmVarCacheYum",
      "position": {
        "lineStart": 33,
        "lineEnd": 33,
        "columnStart": 4,
        "columnEnd": 133
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "ARG CUDA_VERSION\nFROM nvidia/cuda:$CUDA_VERSION-devel-centos6\n\n# Environment\nENV DEBIAN_FRONTEND noninteractive\n\n# Install all basic requirements\nRUN \\\n    yum -y update && \\\n    yum install -y tar unzip wget xz git centos-release-scl yum-utils && \\\n    yum-config-manager --enable centos-sclo-rh-testing && \\\n    yum -y update && \\\n    yum install -y devtoolset-4-gcc devtoolset-4-binutils devtoolset-4-gcc-c++ && \\\n    # Python\n    wget https://repo.continuum.io/miniconda/Miniconda3-4.5.12-Linux-x86_64.sh && \\\n    bash Miniconda3-4.5.12-Linux-x86_64.sh -b -p /opt/python && \\\n    # CMake\n    wget -nv -nc https://cmake.org/files/v3.12/cmake-3.12.0-Linux-x86_64.sh --no-check-certificate && \\\n    bash cmake-3.12.0-Linux-x86_64.sh --skip-license --prefix=/usr && rm -rf /var/cache/yum\n\n# NCCL2 (License: https://docs.nvidia.com/deeplearning/sdk/nccl-sla/index.html)\nRUN \\\n    export CUDA_SHORT=`echo $CUDA_VERSION | egrep -o '[0-9]+\\.[0-9]'` && \\\n    if [ \"${CUDA_SHORT}\" != \"10.0\" ] && [ \"${CUDA_SHORT}\" != \"10.1\" ];then \\\n    wget https://developer.download.nvidia.com/compute/redist/nccl/v2.2/nccl_2.2.13-1%2Bcuda${CUDA_SHORT}_x86_64.txz && \\\n    tar xf \"nccl_2.2.13-1+cuda${CUDA_SHORT}_x86_64.txz\" && \\\n    cp nccl_2.2.13-1+cuda${CUDA_SHORT}_x86_64/include/nccl.h /usr/include && \\\n    cp nccl_2.2.13-1+cuda${CUDA_SHORT}_x86_64/lib/* /usr/lib && \\\n    rm -f nccl_2.2.13-1+cuda${CUDA_SHORT}_x86_64.txz && \\\n    rm -r nccl_2.2.13-1+cuda${CUDA_SHORT}_x86_64;else \\\n    wget https://developer.download.nvidia.com/compute/machine-learning/repos/rhel7/x86_64/nvidia-machine-learning-repo-rhel7-1.0.0-1.x86_64.rpm && \\\n    rpm -i nvidia-machine-learning-repo-rhel7-1.0.0-1.x86_64.rpm && \\\n    yum -y update && \\\n    yum install -y libnccl-2.4.2-1+cuda${CUDA_SHORT} libnccl-devel-2.4.2-1+cuda${CUDA_SHORT} libnccl-static-2.4.2-1+cuda${CUDA_SHORT} && \\\n    rm -f nvidia-machine-learning-repo-rhel7-1.0.0-1.x86_64.rpm; rm -rf /var/cache/yumfi\n\nENV PATH=/opt/python/bin:$PATH\nENV CC=/opt/rh/devtoolset-4/root/usr/bin/gcc\nENV CXX=/opt/rh/devtoolset-4/root/usr/bin/c++\nENV CPP=/opt/rh/devtoolset-4/root/usr/bin/cpp\n\n# Install Python packages\nRUN \\\n    pip install --no-cache-dir numpy pytest scipy scikit-learn wheel kubernetes urllib3==1.22\n\nENV GOSU_VERSION 1.10\n\n# Install lightweight sudo (not bound to TTY)\nRUN set -ex; \\\n    wget -O /usr/local/bin/gosu \"https://github.com/tianon/gosu/releases/download/$GOSU_VERSION/gosu-amd64\" && \\\n    chmod +x /usr/local/bin/gosu && \\\n    gosu nobody true\n\n# Default entry-point to use if running locally\n# It will preserve attributes of created files\nCOPY entrypoint.sh /scripts/\n\nWORKDIR /workspace\nENTRYPOINT [\"/scripts/entrypoint.sh\"]\n"
}