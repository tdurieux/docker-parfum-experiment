{
  "startTime": 1674238657324,
  "endTime": 1674238657480,
  "originalSmells": [
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 28,
        "lineEnd": 28,
        "columnStart": 4,
        "columnEnd": 27
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 85,
        "lineEnd": 85,
        "columnStart": 4,
        "columnEnd": 33
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 86,
        "lineEnd": 86,
        "columnStart": 4,
        "columnEnd": 54
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 78,
        "lineEnd": 78,
        "columnStart": 4,
        "columnEnd": 15
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 2,
        "lineEnd": 21,
        "columnStart": 22,
        "columnEnd": 12
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM ubuntu:16.04\n\nRUN apt-get update && apt-get install --no-install-recommends -y \\\n        build-essential \\\n        curl \\\n        git \\\n        libfreetype6-dev \\\n        libpng12-dev \\\n        libzmq3-dev \\\n        mlocate \\\n        pkg-config \\\n        python-dev \\\n        python-numpy \\\n        python-pip \\\n        software-properties-common \\\n        swig \\\n        zip \\\n        zlib1g-dev \\\n        libcurl3-dev \\\n        openjdk-8-jdk \\\n        openjdk-8-jre-headless \\\n        wget \\\n        && \\\n    apt-get clean && \\\n    rm -rf /var/lib/apt/lists/*\n\n# Set up grpc\n\nRUN pip install --no-cache-dir mock grpcio\n\n# Set up Bazel.\n\nENV BAZELRC /root/.bazelrc\n# Install the most recent bazel release.\nENV BAZEL_VERSION 0.5.1\nWORKDIR /\nRUN mkdir /bazel && \\\n    cd /bazel && \\\n    curl -fSsL -O https://github.com/bazelbuild/bazel/releases/download/$BAZEL_VERSION/bazel-$BAZEL_VERSION-installer-linux-x86_64.sh && \\\n    curl -fSsL -o /bazel/LICENSE.txt https://raw.githubusercontent.com/bazelbuild/bazel/master/LICENSE && \\\n    chmod +x bazel-*.sh && \\\n    ./bazel-$BAZEL_VERSION-installer-linux-x86_64.sh && \\\n    cd / && \\\n    rm -f /bazel/bazel-$BAZEL_VERSION-installer-linux-x86_64.sh\n\n\n# get tensorflow_serving source\nENV TF_SERVING_VERSION 1.0.0\nRUN cd /opt && \\\n    git clone -b $TF_SERVING_VERSION --recurse-submodules https://github.com/tensorflow/serving\n\n# set environment for tensorflow configure script\nENV PYTHON_BIN_PATH=/usr/bin/python\n\nENV USE_DEFAULT_PYTHON_LIB_PATH=1\n\n# don't use Intel MKL\nENV TF_NEED_MKL=0\n# use native CPU optimizations\nENV CC_OPT_FLAGS=-march=native\n# use jemalloc\nENV TF_NEED_JEMALLOC=1\n # don't use Google Cloud Platform\nENV TF_NEED_GCP=0\n# don't use Hadoop HDFS\nENV TF_NEED_HDFS=0\n# don't use XLA JIT\nENV TF_ENABLE_XLA=0\n# don't use VERBS-RDMA\nENV TF_NEED_VERBS=0\n# don't use OpenCL\nENV TF_NEED_OPENCL=0\n# don't use CUDA\nENV TF_NEED_CUDA=0\n\n\n# configure tensorflow and compile tensorflow-serving\nRUN cd /opt/serving/tensorflow && \\\n    ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" && \\\n    cd /opt/serving && \\\n    bazel build //tensorflow_serving/model_servers:tensorflow_model_server && \\\n    cp bazel-bin/tensorflow_serving/model_servers/tensorflow_model_server /usr/local/bin && \\\n    rm -rf /opt/serving && rm -rf $HOME/.cache\n\nCOPY requirements.txt /opt/tensor-bridge/\nRUN pip install --no-cache-dir -U pip setuptools\nRUN pip install --no-cache-dir -r /opt/tensor-bridge/requirements.txt\nADD . /opt/tensor-bridge\n\nWORKDIR /opt/tensor-bridge/\n\nEXPOSE 9000 9001\n\nCMD [\"bash\", \"bridge.sh\"]\n"
}