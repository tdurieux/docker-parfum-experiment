{
  "startTime": 1674239559537,
  "endTime": 1674239559834,
  "originalSmells": [
    {
      "rule": "wgetUseHttpsUrl",
      "position": {
        "lineStart": 28,
        "lineEnd": 28,
        "columnStart": 4,
        "columnEnd": 56
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 69,
        "lineEnd": 69,
        "columnStart": 4,
        "columnEnd": 199
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 18,
        "lineEnd": 18,
        "columnStart": 4,
        "columnEnd": 97
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 25,
        "lineEnd": 25,
        "columnStart": 4,
        "columnEnd": 34
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 29,
        "lineEnd": 29,
        "columnStart": 4,
        "columnEnd": 31
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 33,
        "lineEnd": 33,
        "columnStart": 4,
        "columnEnd": 39
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 4,
        "lineEnd": 4,
        "columnStart": 4,
        "columnEnd": 42
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 4,
        "lineEnd": 4,
        "columnStart": 4,
        "columnEnd": 42
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 4,
        "lineEnd": 4,
        "columnStart": 4,
        "columnEnd": 42
      }
    }
  ],
  "repairedSmells": [
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 4,
        "lineEnd": 4,
        "columnStart": 4,
        "columnEnd": 66
      }
    }
  ],
  "repairedDockerfile": "FROM ubuntu:latest\n\n# Run commands that require root authority\nRUN apt-get update && apt-get -y upgrade\nRUN apt-get install --no-install-recommends -y cmake git wget nano && rm -rf /var/lib/apt/lists/*;\n\nRUN useradd -d /home/builder -ms /bin/bash -G sudo -p builder builder\n\n# Switch to new user\nUSER builder\nWORKDIR /home/builder\n\n# Download all required files\nRUN mkdir MIPSBuild\nWORKDIR MIPSBuild\n\n# Cross compile toolchain\nRUN wget https://downloads.openwrt.org/barrier_breaker/14.07/ramips/mt7620n/OpenWrt-Toolchain-ramips-for-mipsel_24kec%2bdsp-gcc-4.8-linaro_uClibc-0.9.33.2.tar.bz2\nRUN tar -xvf OpenWrt-Toolchain-ramips-for-mipsel_24kec+dsp-gcc-4.8-linaro_uClibc-0.9.33.2.tar.bz2 && rm OpenWrt-Toolchain-ramips-for-mipsel_24kec+dsp-gcc-4.8-linaro_uClibc-0.9.33.2.tar.bz2\n\n# Azure IoT SDK for C\nRUN git clone --recursive https://github.com/azure/azure-iot-sdk-c.git\n\n# OpenSSL\nRUN wget https://www.openssl.org/source/openssl-1.0.2o.tar.gz\nRUN tar -xvf openssl-1.0.2o.tar.gz && rm openssl-1.0.2o.tar.gz\n\n# Curl\nRUN wget https://curl.haxx.se/download/curl-7.60.0.tar.gz\nRUN tar -xvf curl-7.60.0.tar.gz && rm curl-7.60.0.tar.gz\n\n# Linux utilities for libuuid\nRUN wget https://mirrors.edge.kernel.org/pub/linux/utils/util-linux/v2.32/util-linux-2.32-rc2.tar.gz\nRUN tar -xvf util-linux-2.32-rc2.tar.gz && rm util-linux-2.32-rc2.tar.gz\n\n# Set up environment variables in preperation for the builds to follow\nENV WORK_ROOT=/home/builder/MIPSBuild\nENV TOOLCHAIN_ROOT=${WORK_ROOT}/OpenWrt-Toolchain-ramips-for-mipsel_24kec+dsp-gcc-4.8-linaro_uClibc-0.9.33.2\nENV TOOLCHAIN_SYSROOT=${TOOLCHAIN_ROOT}/toolchain-mipsel_24kec+dsp_gcc-4.8-linaro_uClibc-0.9.33.2\nENV TOOLCHAIN_EXES=${TOOLCHAIN_SYSROOT}/bin\nENV TOOLCHAIN_NAME=mipsel-openwrt-linux-uclibc\nENV AR=${TOOLCHAIN_EXES}/${TOOLCHAIN_NAME}-ar\nENV AS=${TOOLCHAIN_EXES}/${TOOLCHAIN_NAME}-as\nENV CC=${TOOLCHAIN_EXES}/${TOOLCHAIN_NAME}-gcc\nENV LD=${TOOLCHAIN_EXES}/${TOOLCHAIN_NAME}-ld\nENV NM=${TOOLCHAIN_EXES}/${TOOLCHAIN_NAME}-nm\nENV RANLIB=${TOOLCHAIN_EXES}/${TOOLCHAIN_NAME}-ranlib\n\nENV LDFLAGS=\"-L${TOOLCHAIN_SYSROOT}/usr/lib\"\nENV LIBS=\"-lssl -lcrypto -ldl -lpthread\"\nENV TOOLCHAIN_PREFIX=${TOOLCHAIN_SYSROOT}/usr\nENV STAGING_DIR=${TOOLCHAIN_SYSROOT}\n\n# Build OpenSSL\nWORKDIR openssl-1.0.2o\nRUN ./Configure linux-generic32 shared --prefix=${TOOLCHAIN_PREFIX} --openssldir=${TOOLCHAIN_PREFIX}\nRUN make\nRUN make install\nWORKDIR ..\n\n# Build curl\nWORKDIR curl-7.60.0\nRUN ./configure --with-sysroot=${TOOLCHAIN_SYSROOT} --prefix=${TOOLCHAIN_PREFIX} --target=${TOOLCHAIN_NAME} --with-ssl --with-zlib --host=${TOOLCHAIN_NAME} --build=x86_64-pc-linux-uclibc\nRUN make\nRUN make install\nWORKDIR ..\n\n# Build uuid\nWORKDIR util-linux-2.32-rc2\nRUN ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --prefix=${TOOLCHAIN_PREFIX} --with-sysroot=${TOOLCHAIN_SYSROOT} --target=${TOOLCHAIN_NAME} --host=${TOOLCHAIN_NAME} --disable-all-programs --disable-bash-completion --enable-libuuid\nRUN make\nRUN make install\nWORKDIR ..\n\nWORKDIR azure-iot-sdk-c\nRUN mkdir cmake\nWORKDIR cmake\n\n# Create a toolchain file on the fly\nRUN echo \"SET(CMAKE_SYSTEM_NAME Linux)     # this one is important\" > toolchain.cmake\nRUN echo \"SET(CMAKE_SYSTEM_VERSION 1)      # this one not so much\" >> toolchain.cmake\nRUN echo \"SET(CMAKE_SYSROOT ${TOOLCHAIN_SYSROOT})\" >> toolchain.cmake\nRUN echo \"SET(CMAKE_C_COMPILER ${TOOLCHAIN_EXES}/${TOOLCHAIN_NAME}-gcc)\" >> toolchain.cmake\nRUN echo \"SET(CMAKE_CXX_COMPILER ${TOOLCHAIN_EXES}/${TOOLCHAIN_NAME}-g++)\" >> toolchain.cmake\nRUN echo \"SET(CMAKE_FIND_ROOT_PATH $ENV{TOOLCHAIN_SYSROOT})\" >> toolchain.cmake\nRUN echo \"SET(CMAKE_FIND_ROOT_PATH_MODE_PROGRAM NEVER)\" >> toolchain.cmake\nRUN echo \"SET(CMAKE_FIND_ROOT_PATH_MODE_LIBRARY ONLY)\" >> toolchain.cmake\nRUN echo \"SET(CMAKE_FIND_ROOT_PATH_MODE_INCLUDE ONLY)\" >> toolchain.cmake\nRUN echo \"SET(set_trusted_cert_in_samples true CACHE BOOL \\\"Force use of TrustedCerts option\\\" FORCE)\" >> toolchain.cmake\n\nRUN cmake -DCMAKE_TOOLCHAIN_FILE=toolchain.cmake -DCMAKE_INSTALL_PREFIX=${TOOLCHAIN_PREFIX} ..\nRUN make\nRUN make install\n\nWORKDIR ../..\n\nCMD [\"/bin/bash\"]\n\n"
}