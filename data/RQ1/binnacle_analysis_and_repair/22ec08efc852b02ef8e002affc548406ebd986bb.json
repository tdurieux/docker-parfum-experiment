{
  "startTime": 1674236347509,
  "endTime": 1674236347644,
  "originalSmells": [
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 12,
        "lineEnd": 20,
        "columnStart": 5,
        "columnEnd": 12
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 12,
        "lineEnd": 20,
        "columnStart": 5,
        "columnEnd": 12
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "ARG GOLANG_VERSION=1.11.4\n\nFROM golang:$GOLANG_VERSION\n\nENV CONFIG_DIR /etc/peloton\nENV ENVIRONMENT development\nENV PROTOC_VERSION 3.5.1\nENV BUILD_DIR /go/src/github.com/uber/peloton\nENV PATH $BUILD_DIR/bin:$PATH\n\n# NOTE: python-dev is required for peloton to be launched with Aurora\nRUN apt-get --allow-unauthenticated -yqq update \\\n  && DEBIAN_FRONTEND=noninteractive apt-get --no-install-recommends --allow-unauthenticated -yqq install \\\n  unzip \\\n  curl \\\n  vim \\\n  gdb \\\n  util-linux \\\n  python-dev \\\n  python-setuptools \\\n  python-pip && rm -rf /var/lib/apt/lists/*;\n\n# Install protoc\nRUN wget https://github.com/google/protobuf/releases/download/v$PROTOC_VERSION/protoc-$PROTOC_VERSION-linux-x86_64.zip \\\n  && unzip -d protoc protoc-$PROTOC_VERSION-linux-x86_64.zip \\\n  && rm protoc-$PROTOC_VERSION-linux-x86_64.zip \\\n  && cp protoc/bin/protoc /usr/local/bin \\\n  && cp -rf protoc/include/* /usr/local/include/. \\\n  && rm -rf protoc \\\n  && go get -u github.com/golang/protobuf/proto \\\n  && go get -u github.com/golang/protobuf/protoc-gen-go\n\nARG GIT_REPO=git-repo\n\nADD $GIT_REPO /go/src/github.com/uber/peloton\nWORKDIR /go/src/github.com/uber/peloton\n\n# setup config environment with default configurations\nRUN mkdir /etc/peloton\nCOPY $GIT_REPO/docker/default-config/ /etc/peloton/\nCOPY $GIT_REPO/docker/entrypoint.sh /bin/entrypoint.sh\n\n# TODO(gabe): reenable me when we have no more closed source dependencies, and\n# readd vendor/ to .dockerignore. For now, this relies on having an updated\n# vendor/ directory on the host prior to performing the docker build...\n\n# install glide and do glide install\n# RUN make install\n\nRUN make\n\nRUN ( echo \"Built Peloton\" && peloton-jobmgr --version ) >&2 && cp ./bin/* /usr/bin/\n\nENTRYPOINT [\"/bin/entrypoint.sh\"]\n\nEXPOSE 5290 5291 5292 5293\n"
}