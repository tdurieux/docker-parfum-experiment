{
  "startTime": 1674240494222,
  "endTime": 1674240494443,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 25,
        "lineEnd": 25,
        "columnStart": 4,
        "columnEnd": 102
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "ARG BUILD_BASE\nARG RUN_BASE\n\nFROM ${RUN_BASE} AS runbase\nRUN apk add ca-certificates --no-cache\n\nFROM ${BUILD_BASE} AS build\n\nRUN apk add --no-cache \\\n  coreutils \\\n  make \\\n  git \\\n  curl\n\nWORKDIR /go/src/github.com/docker/compose-on-kubernetes\nCOPY . .\nARG BUILDTIME\nARG GITCOMMIT\nARG VERSION\nARG IMAGE_REPO_PREFIX\nENV GITCOMMIT=$GITCOMMIT VERSION=$VERSION BUILDTIME=$BUILDTIME IMAGE_REPO_PREFIX=$IMAGE_REPO_PREFIX\nENV CGO_ENABLED=0\nRUN --mount=target=/root/.cache,type=cache make bin/compose-controller bin/compose-controller.test e2e-binary bin/installer bin/api-server bin/api-server.test bin/e2e_benchmark\nRUN go get github.com/onsi/ginkgo/ginkgo\nRUN curl -f -LO https://storage.googleapis.com/kubernetes-release/release/v1.12.4/bin/linux/amd64/kubectl && \\\n  chmod +x ./kubectl && \\\n  mv ./kubectl /bin/kubectl\n\n# e2e-tests (retrieved with --target=compose-e2e-tests)\n# image is publised as docker/kube-compose-e2e-tests, and used for docker/orca e2e tests\nFROM runbase AS compose-e2e-tests\nRUN apk add jq --no-cache\nENTRYPOINT [\"/ginkgo\",\"-v\", \"-p\", \"--nodes=10\", \"/e2e.test\", \"--\"]\nCOPY --from=build /go/bin/ginkgo /ginkgo\nCOPY --from=build /go/src/github.com/docker/compose-on-kubernetes/e2e/e2e.test /e2e.test\nCOPY --from=build /go/src/github.com/docker/compose-on-kubernetes/e2e/retrieve-coverage /retrieve-coverage\nCOPY --from=build /bin/kubectl /bin/kubectl\n\n# e2e-benchmark\nFROM runbase AS compose-e2e-benchmark\nENTRYPOINT [\"/e2e_benchmark\", \"--kubeconfig=/kind-config\", \"--\"]\nCOPY --from=build /go/src/github.com/docker/compose-on-kubernetes/bin/e2e_benchmark /e2e_benchmark\nCOPY --from=build /bin/kubectl /bin/kubectl\n\n# compose-installer (retrieved with --target=compose-installer)\nFROM runbase AS compose-installer\nENTRYPOINT [\"/installer\"]\nCOPY --from=build /go/src/github.com/docker/compose-on-kubernetes/bin/installer /installer\n\n# compose-api-server (retrieved with --target=compose-api-server)\nFROM runbase AS compose-api-server\nENTRYPOINT [\"/api-server\"]\nCOPY --from=build /go/src/github.com/docker/compose-on-kubernetes/bin/api-server /api-server\n\n# compose-api-server with instrumentation (retrieved with --target=compose-api-server-coverage)\nFROM runbase AS compose-api-server-coverage\nENTRYPOINT [\"/api-server-coverage\"]\nADD e2e/api-server-coverage /\nCOPY --from=build /go/src/github.com/docker/compose-on-kubernetes/bin/api-server.test /api-server.test\n\n# instrumented runtime image (retrieved with --target=compose-controller-coverage)\nFROM runbase AS compose-controller-coverage\nENTRYPOINT [\"/compose-controller-coverage\"]\nADD e2e/compose-controller-coverage /\nCOPY --from=build /go/src/github.com/docker/compose-on-kubernetes/bin/compose-controller.test /compose-controller.test\n\n# main runtime image (default target)\nFROM runbase\nENTRYPOINT [\"/compose-controller\"]\nCOPY --from=build /go/src/github.com/docker/compose-on-kubernetes/bin/compose-controller /compose-controller\n"
}