{
  "startTime": 1674245989787,
  "endTime": 1674245990822,
  "originalSmells": [
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 207,
        "lineEnd": 207,
        "columnStart": 4,
        "columnEnd": 15
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 84,
        "lineEnd": 84,
        "columnStart": 4,
        "columnEnd": 29
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 85,
        "lineEnd": 85,
        "columnStart": 4,
        "columnEnd": 46
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 117,
        "lineEnd": 117,
        "columnStart": 4,
        "columnEnd": 54
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 118,
        "lineEnd": 118,
        "columnStart": 4,
        "columnEnd": 115
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# Galaxy - Stable\n#\n# VERSION       Galaxy-central\n\nFROM toolshed/requirements\n\nMAINTAINER Björn A. Grüning, bjoern.gruening@gmail.com\n\nARG GALAXY_RELEASE\nARG GALAXY_REPO\n\nENV GALAXY_RELEASE=${GALAXY_RELEASE:-release_19.01} \\\nGALAXY_REPO=${GALAXY_REPO:-https://github.com/galaxyproject/galaxy} \\\nGALAXY_ROOT=/galaxy-central \\\nGALAXY_CONFIG_DIR=/etc/galaxy \\\nEXPORT_DIR=/export \\\nDEBIAN_FRONTEND=noninteractive\n\nENV GALAXY_CONFIG_FILE=$GALAXY_CONFIG_DIR/galaxy.yml \\\nGALAXY_CONFIG_JOB_CONFIG_FILE=$GALAXY_CONFIG_DIR/job_conf.xml \\\nGALAXY_CONFIG_JOB_METRICS_CONFIG_FILE=$GALAXY_CONFIG_DIR/job_metrics_conf.xml \\\nGALAXY_CONFIG_TOOL_DATA_TABLE_CONFIG_PATH=/etc/galaxy/tool_data_table_conf.xml \\\nGALAXY_CONFIG_WATCH_TOOL_DATA_DIR=True \\\nGALAXY_CONFIG_TOOL_DEPENDENCY_DIR=$EXPORT_DIR/tool_deps \\\nGALAXY_CONFIG_TOOL_PATH=$EXPORT_DIR/galaxy-central/tools \\\nGALAXY_VIRTUAL_ENV=/galaxy_venv \\\nGALAXY_USER=galaxy \\\nGALAXY_UID=1450 \\\nGALAXY_GID=1450 \\\nGALAXY_POSTGRES_UID=1550 \\\nGALAXY_POSTGRES_GID=1550 \\\nGALAXY_HOME=/home/galaxy \\\nGALAXY_LOGS_DIR=/home/galaxy/logs \\\nGALAXY_DEFAULT_ADMIN_USER=admin@galaxy.org \\\nGALAXY_DEFAULT_ADMIN_PASSWORD=admin \\\nGALAXY_DEFAULT_ADMIN_KEY=admin \\\nGALAXY_DESTINATIONS_DEFAULT=slurm_cluster \\\nGALAXY_RUNNERS_ENABLE_SLURM=True \\\nGALAXY_RUNNERS_ENABLE_CONDOR=False \\\n# Define the default postgresql database path\nPG_DATA_DIR_DEFAULT=/var/lib/postgresql/9.3/main/ \\\nPG_CONF_DIR_DEFAULT=/etc/postgresql/9.3/main/ \\\nPG_DATA_DIR_HOST=$EXPORT_DIR/postgresql/9.3/main/ \\\n# The following 2 ENV vars can be used to set the number of uwsgi processes and threads\nUWSGI_PROCESSES=2 \\\nUWSGI_THREADS=4 \\\n# Set HTTPS to use a self-signed certificate (or your own certificate in $EXPORT_DIR/{server.key,server.crt})\nUSE_HTTPS=False \\\n# Set USE_HTTPS_LENSENCRYPT and GALAXY_CONFIG_GALAXY_INFRASTRUCTURE_URL to a domain that is reachable to get a letsencrypt certificate\nUSE_HTTPS_LETSENCRYPT=False \\\nGALAXY_CONFIG_GALAXY_INFRASTRUCTURE_URL=http://localhost \\\n# Set the number of Galaxy handlers\nGALAXY_HANDLER_NUMPROCS=2 \\\n# Setting a standard encoding. This can get important for things like the unix sort tool.\nLC_ALL=en_US.UTF-8 \\\nLANG=en_US.UTF-8 \\\nGALAXY_CONDA_PREFIX=$GALAXY_CONFIG_TOOL_DEPENDENCY_DIR/_conda\n\nRUN locale-gen en_US.UTF-8 && dpkg-reconfigure locales\n\n# Create the postgres user before apt-get does (with the configured UID/GID) to facilitate sharing $EXPORT_DIR/postgresql with non-Linux hosts\nRUN groupadd -r postgres -g $GALAXY_POSTGRES_GID && \\\n    adduser --system --quiet --home /var/lib/postgresql --no-create-home --shell /bin/bash --gecos \"\" --uid $GALAXY_POSTGRES_UID --gid $GALAXY_POSTGRES_GID postgres\n\nRUN echo \"force-unsafe-io\" > /etc/dpkg/dpkg.cfg.d/02apt-speedup && \\\n    echo \"Acquire::http {No-Cache=True;};\" > /etc/apt/apt.conf.d/no-cache && \\\n    apt-get -qq update && apt-get install --no-install-recommends -y apt-transport-https software-properties-common wget && \\\n    sh -c \"wget -qO - https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -\" && \\\n    sh -c \"echo deb http://research.cs.wisc.edu/htcondor/ubuntu/stable/ trusty contrib > /etc/apt/sources.list.d/htcondor.list\" && \\\n    sh -c \"wget -qO - http://research.cs.wisc.edu/htcondor/ubuntu/HTCondor-Release.gpg.key | sudo apt-key add -\" && \\\n    add-apt-repository \"deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable\" && \\\n    apt-add-repository -y ppa:ansible/ansible && \\\n    apt-add-repository -y ppa:galaxyproject/nginx && \\\n    apt-get update -qq && apt-get upgrade -y && \\\n    apt-get install --no-install-recommends -y postgresql-9.3 sudo \\\n    nginx-extras=1.4.6-1ubuntu3.8ppa1 nginx-common=1.4.6-1ubuntu3.8ppa1 docker-ce=17.09.0~ce-0~ubuntu slurm-llnl slurm-llnl-torque \\\n    slurm-drmaa-dev proftpd proftpd-mod-pgsql libyaml-dev ansible munge libmunge-dev \\\n    nano vim curl python-crypto python-pip python-psutil condor python-ldap autofs \\\n    gridengine-common gridengine-drmaa1.0 rabbitmq-server libswitch-perl unattended-upgrades supervisor samtools && \\\n    # install and remove supervisor, so get the service config file\n    apt-get -qq remove -y supervisor && \\\n    apt-get purge -y software-properties-common && \\\n    apt-get autoremove -y && apt-get clean && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/* && rm -rf ~/.cache/ && \\\n    mkdir -p /etc/supervisor/conf.d/ /var/log/supervisor/ && \\\n    pip install --no-cache-dir --upgrade pip && \\\n    pip install --no-cache-dir ephemeris supervisor --upgrade && \\\n    rm -rf ~/.cache/ /galaxy-central/client/node_modules/ && \\\n    ln -s /usr/local/bin/supervisord /usr/bin/supervisord\n\nRUN groupadd -r $GALAXY_USER -g $GALAXY_GID && \\\n    useradd -u $GALAXY_UID -r -g $GALAXY_USER -d $GALAXY_HOME -c \"Galaxy user\" $GALAXY_USER && \\\n    mkdir $EXPORT_DIR $GALAXY_HOME $GALAXY_LOGS_DIR && chown -R $GALAXY_USER:$GALAXY_USER $GALAXY_HOME $EXPORT_DIR $GALAXY_LOGS_DIR && \\\n    gpasswd -a $GALAXY_USER docker && \\\n    adduser condor docker\n\nADD ./bashrc $GALAXY_HOME/.bashrc\n\n# Install miniconda, then virtualenv from conda and then\n# download latest stable release of Galaxy.\nRUN wget --quiet https://repo.anaconda.com/miniconda/Miniconda2-4.5.12-Linux-x86_64.sh -O ~/miniconda.sh && \\\n    /bin/bash ~/miniconda.sh -b -p /tool_deps/_conda/ && \\\n    rm ~/miniconda.sh && \\\n    ln -s /tool_deps/_conda/etc/profile.d/conda.sh /etc/profile.d/conda.sh && \\\n    echo \". /tool_deps/_conda/etc/profile.d/conda.sh\" >> $GALAXY_HOME/.bashrc && \\\n    echo \"conda activate base\" >> $GALAXY_HOME/.bashrc && \\\n    export PATH=/tool_deps/_conda/bin/:$PATH && \\\n    conda install virtualenv pip && \\\n    # conda install conda-canary::conda=4.6 && \\\n    chown $GALAXY_USER:$GALAXY_USER -R /tool_deps/ /etc/profile.d/conda.sh && \\\n    mkdir $GALAXY_ROOT && \\\n    wget -q -O - $GALAXY_REPO/archive/$GALAXY_RELEASE.tar.gz | tar xzf - --strip-components=1 -C $GALAXY_ROOT && \\\n    virtualenv $GALAXY_VIRTUAL_ENV && \\\n    chown -R $GALAXY_USER:$GALAXY_USER $GALAXY_VIRTUAL_ENV && \\\n    chown -R $GALAXY_USER:$GALAXY_USER $GALAXY_ROOT && \\\n    # Setup Galaxy configuration files.\n    mkdir -p $GALAXY_CONFIG_DIR $GALAXY_CONFIG_DIR/web && \\\n    chown -R $GALAXY_USER:$GALAXY_USER $GALAXY_CONFIG_DIR && \\\n    $GALAXY_VIRTUAL_ENV/bin/pip2 install --no-cache-dir pip --upgrade && \\\n    $GALAXY_VIRTUAL_ENV/bin/pip2 install --no-cache-dir --extra-index-url https://wheels.galaxyproject.org/ uwsgi==2.0.15 -v --pre && \\\n    chown -R $GALAXY_USER:$GALAXY_USER $GALAXY_VIRTUAL_ENV && \\\n    rm -rf ~/.cache/ /galaxy-central/client/node_modules/ && \\\n    su $GALAXY_USER -c \"cp $GALAXY_ROOT/config/galaxy.yml.sample $GALAXY_CONFIG_FILE\"\n\nADD ./reports_wsgi.ini.sample $GALAXY_CONFIG_DIR/reports_wsgi.ini\nADD sample_tool_list.yaml $GALAXY_HOME/ephemeris/sample_tool_list.yaml\nADD roles/ /ansible/roles\nADD provision.yml /ansible/provision.yml\nADD postgresql_provision.yml /ansible/postgresql_provision.yml\n\nRUN ansible-playbook /ansible/postgresql_provision.yml && \\\n    ansible-playbook /ansible/provision.yml \\\n    --extra-vars galaxy_venv_dir=$GALAXY_VIRTUAL_ENV \\\n    --extra-vars galaxy_log_dir=$GALAXY_LOGS_DIR \\\n    --extra-vars galaxy_user_name=$GALAXY_USER \\\n    --extra-vars galaxy_config_file=$GALAXY_CONFIG_FILE \\\n    --extra-vars galaxy_config_dir=$GALAXY_CONFIG_DIR \\\n    --extra-vars galaxy_job_conf_path=$GALAXY_CONFIG_JOB_CONFIG_FILE \\\n    --extra-vars galaxy_job_metrics_conf_path=$GALAXY_CONFIG_JOB_METRICS_CONFIG_FILE \\\n    --extra-vars supervisor_manage_slurm=\"\" \\\n    --extra-vars galaxy_extras_config_condor=True \\\n    --extra-vars galaxy_extras_config_condor_docker=True \\\n    --extra-vars galaxy_extras_config_rabbitmq=True \\\n    --extra-vars galaxy_extras_config_cvmfs=True \\\n    --extra-vars proftpd_db_connection=galaxy@galaxy \\\n    --extra-vars proftpd_files_dir=$EXPORT_DIR/ftp \\\n    --extra-vars proftpd_use_sftp=True \\\n    --extra-vars galaxy_extras_docker_legacy=False \\\n    --extra-vars galaxy_minimum_version=18.01 \\\n    --extra-vars supervisor_postgres_config_path=$PG_CONF_DIR_DEFAULT/postgresql.conf \\\n    --extra-vars supervisor_postgres_autostart=false \\\n    --extra-vars nginx_use_remote_header=True \\\n    --tags=galaxyextras,cvmfs -c local && \\\n    apt-get autoremove -y && apt-get clean && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/* && \\\n    rm -rf ~/.cache/ /galaxy-central/client/node_modules/\n\nRUN mkdir /shed_tools && chown $GALAXY_USER:$GALAXY_USER /shed_tools && \\\n    mkdir $EXPORT_DIR/ftp/ && chown $GALAXY_USER:$GALAXY_USER $EXPORT_DIR/ftp && \\\n    mkdir -p /tool_deps/ && chown $GALAXY_USER:$GALAXY_USER -R /tool_deps && \\\n    ln -s /tool_deps/ $EXPORT_DIR/tool_deps && chown $GALAXY_USER:$GALAXY_USER $EXPORT_DIR/tool_deps # Configure Galaxy to use the Tool Shed\n\n# The following commands will be executed as the galaxy user\nUSER $GALAXY_USER\n\nWORKDIR $GALAXY_ROOT\n\n# Updating genome informations from UCSC\n#RUN export GALAXY=$GALAXY_ROOT && sh ./cron/updateucsc.sh.sample\n\nENV GALAXY_CONFIG_DATABASE_CONNECTION=postgresql://galaxy:galaxy@localhost:5432/galaxy?client_encoding=utf8 \\\nGALAXY_CONFIG_ADMIN_USERS=admin@galaxy.org \\\nGALAXY_CONFIG_MASTER_API_KEY=HSNiugRFvgT574F43jZ7N9F3 \\\nGALAXY_CONFIG_BRAND=\"Galaxy Docker Build\" \\\nGALAXY_CONFIG_STATIC_ENABLED=False \\\nGALAXY_CONFIG_JOB_WORKING_DIRECTORY=$EXPORT_DIR/galaxy-central/database/job_working_directory \\\nGALAXY_CONFIG_FILE_PATH=$EXPORT_DIR/galaxy-central/database/files \\\nGALAXY_CONFIG_NEW_FILE_PATH=$EXPORT_DIR/galaxy-central/database/files \\\nGALAXY_CONFIG_TEMPLATE_CACHE_PATH=$EXPORT_DIR/galaxy-central/database/compiled_templates \\\nGALAXY_CONFIG_CITATION_CACHE_DATA_DIR=$EXPORT_DIR/galaxy-central/database/citations/data \\\nGALAXY_CONFIG_CLUSTER_FILES_DIRECTORY=$EXPORT_DIR/galaxy-central/database/pbs \\\nGALAXY_CONFIG_FTP_UPLOAD_DIR=$EXPORT_DIR/ftp \\\nGALAXY_CONFIG_FTP_UPLOAD_SITE=galaxy.docker.org \\\nGALAXY_CONFIG_USE_PBKDF2=False \\\nGALAXY_CONFIG_NGINX_X_ACCEL_REDIRECT_BASE=/_x_accel_redirect \\\nGALAXY_CONFIG_NGINX_X_ARCHIVE_FILES_BASE=/_x_accel_redirect \\\nGALAXY_CONFIG_DYNAMIC_PROXY_MANAGE=False \\\nGALAXY_CONFIG_VISUALIZATION_PLUGINS_DIRECTORY=config/plugins/visualizations \\\nGALAXY_CONFIG_TRUST_IPYTHON_NOTEBOOK_CONVERSION=True \\\nGALAXY_CONFIG_TOOLFORM_UPGRADE=True \\\nGALAXY_CONFIG_SANITIZE_ALL_HTML=False \\\nGALAXY_CONFIG_TOOLFORM_UPGRADE=True \\\nGALAXY_CONFIG_WELCOME_URL=$GALAXY_CONFIG_DIR/web/welcome.html \\\nGALAXY_CONFIG_OVERRIDE_DEBUG=False \\\nGALAXY_CONFIG_ENABLE_QUOTAS=True \\\n# We need to set $HOME for some Tool Shed tools (e.g Perl libs with $HOME/.cpan)\nHOME=$GALAXY_HOME \\\nGALAXY_CONDA_PREFIX=$GALAXY_CONFIG_TOOL_DEPENDENCY_DIR/_conda\n\n# Container Style\nADD GalaxyDocker.png $GALAXY_CONFIG_DIR/web/welcome_image.png\nADD welcome.html $GALAXY_CONFIG_DIR/web/welcome.html\n\nRUN ./scripts/common_startup.sh && \\\n    export PATH=GALAXY_CONDA_PREFIX/bin/:$PATH && \\\n    . $GALAXY_VIRTUAL_ENV/bin/activate && \\\n    python ./scripts/manage_tool_dependencies.py -c \"$GALAXY_CONFIG_FILE\" init_if_needed && \\\n    # Install all required Node dependencies. This is required to get proxy support to work for Interactive Environments\n    cd $GALAXY_ROOT/lib/galaxy/web/proxy/js && \\\n    npm install && \\\n    rm -rf ~/.cache/ /galaxy-central/client/node_modules/ && \\\n    # change the default location of shed_tools to be ../shed_tools\n    sed -i 's|database|..|' $GALAXY_ROOT/config/shed_tool_conf.xml && npm cache clean --force;\n\n# Switch back to User root\nUSER root\n\n# Include all needed scripts from the host\nADD ./setup_postgresql.py /usr/local/bin/setup_postgresql.py\n\n# Configure PostgreSQL\n# 1. Remove all old configuration\n# 2. Create DB-user 'galaxy' with password 'galaxy' in database 'galaxy'\n# 3. Create Galaxy Admin User 'admin@galaxy.org' with password 'admin' and API key 'admin'\n\nRUN rm $PG_DATA_DIR_DEFAULT -rf && \\\n    python /usr/local/bin/setup_postgresql.py --dbuser galaxy --dbpassword galaxy --db-name galaxy --dbpath $PG_DATA_DIR_DEFAULT && \\\n    service postgresql start && \\\n    . $GALAXY_VIRTUAL_ENV/bin/activate && \\\n    sh create_db.sh -c \"$GALAXY_CONFIG_FILE\" && \\\n    python /usr/local/bin/create_galaxy_user.py --user $GALAXY_DEFAULT_ADMIN_USER --password $GALAXY_DEFAULT_ADMIN_PASSWORD -c $GALAXY_CONFIG_FILE --key $GALAXY_DEFAULT_ADMIN_KEY && \\\n    service postgresql stop\n\n# Activate additional Tool Sheds\n# Activate the Test Tool Shed during runtime, useful for testing repositories.\nADD ./tool_sheds_conf.xml $GALAXY_HOME/tool_sheds_conf.xml\n\n# Script that enables easier downstream installation of tools (e.g. for different Galaxy Docker flavours)\nADD install_tools_wrapper.sh /usr/bin/install-tools\n# script to install BioJS visualizations\nADD install_biojs_vis.sh /usr/bin/install-biojs\nRUN chmod +x /usr/bin/install-tools /usr/bin/install-biojs && \\\n    cd /usr/bin/ && wget https://git.embl.de/grp-gbcs/galaxy-dir-sync/raw/master/src/galaxy-dir-sync.py && \\\n    chmod +x galaxy-dir-sync.py\n\nRUN echo \"DISCARD_SESSION_KEYRING_ON_STARTUP=False\" > /etc/condor/condor_config.local && \\\n    echo \"TRUST_UID_DOMAIN=true\" >> /etc/condor/condor_config.local\n\n# This needs to happen here and not above, otherwise the Galaxy start\n# (without running the startup.sh script) will crash because integrated_tool_panel.xml could not be found.\nENV GALAXY_CONFIG_INTEGRATED_TOOL_PANEL_CONFIG $EXPORT_DIR/galaxy-central/integrated_tool_panel.xml\n\n# Expose port 80, 443 (webserver), 21 (FTP server), 8800 (Proxy), 9002 (supvisord web app)\nEXPOSE :21\nEXPOSE :80\nEXPOSE :443\nEXPOSE :8800\nEXPOSE :9002\n\n# Mark folders as imported from the host.\nVOLUME [\"/export/\", \"/data/\", \"/var/lib/docker\"]\n\nADD install_db.sh /usr/bin/install_db.sh\nRUN chmod +x /usr/bin/install_db.sh\n\n# Autostart script that is invoked during container start\nCMD [\"/usr/bin/startup\"]\n"
}