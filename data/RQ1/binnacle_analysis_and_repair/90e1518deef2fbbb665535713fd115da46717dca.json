{
  "startTime": 1674241853678,
  "endTime": 1674241854019,
  "originalSmells": [
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 13,
        "lineEnd": 13,
        "columnStart": 5,
        "columnEnd": 78
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 11,
        "lineEnd": 11,
        "columnStart": 5,
        "columnEnd": 114
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM ubuntu:18.04\n\nENV CLOUDSDK_CORE_DISABLE_PROMPTS=1 \\\n  PATH=/opt/google-cloud-sdk/bin:$PATH \\\n  GOOGLE_CLOUD_SDK_VERSION=215.0.0 \\\n  GOOGLE_PROJECT=tokenizer-sol-v4\n\nRUN set -x \\\n  && cd /opt \\\n  && echo 'debconf debconf/frontend select Noninteractive' | debconf-set-selections nodejs \\\n  && apt-get update \\\n  && apt-get install --no-install-recommends -y jq wget python git nodejs ca-certificates npm build-essential curl \\\n  && wget -q https://dl.google.com/dl/cloudsdk/channels/rapid/downloads/google-cloud-sdk-${GOOGLE_CLOUD_SDK_VERSION}-linux-x86_64.tar.gz \\\n  && tar zxfv google-cloud-sdk-${GOOGLE_CLOUD_SDK_VERSION}-linux-x86_64.tar.gz \\\n  && ./google-cloud-sdk/install.sh \\\n  && gcloud components install kubectl \\\n  && gcloud config set project ${GOOGLE_PROJECT} && rm google-cloud-sdk-${GOOGLE_CLOUD_SDK_VERSION}-linux-x86_64.tar.gz && rm -rf /var/lib/apt/lists/*;\nRUN apt-get clean \\\n  && cd / \\\n  && rm -rf \\\n     /opt/google-cloud-sdk-${GOOGLE_CLOUD_SDK_VERSION}-linux-x86_64.tar.gz \\\n     /opt/helm-${HELM_VERSION}-linux-amd64.tar.gz \\\n     doc \\\n     man \\\n     info \\\n     locale \\\n     /var/lib/apt/lists/* \\\n     /var/log/* \\\n     /var/cache/debconf/* \\\n     common-licenses \\\n     ~/.bashrc \\\n     /etc/systemd \\\n     /lib/lsb \\\n     /lib/udev \\\n     /usr/share/doc/ \\\n     /usr/share/doc-base/ \\\n     /usr/share/man/ \\\n     /tmp/*\n\nEXPOSE 443\nEXPOSE 80\n\n# Create the application directory\nRUN mkdir /tokenizer\n\n# Create a stub to pull the code down later\nRUN git clone --no-checkout https://github.com/GoogleCloudPlatform/community/tutorials/gcp-pci-tokenizer /tokenizer\n\n# Create a bootstrapped docker_entrypoint.sh file from the local copy next to this Dockerfile\n# This file will be overwritten by the latest from git on first run\nRUN mkdir /tokenizer/src\nCOPY \"src/docker_entrypoint.sh\" \"/tokenizer/src/docker_entrypoint.sh\"\nWORKDIR \"/tokenizer\"\nENTRYPOINT [\"/tokenizer/src/docker_entrypoint.sh\"]\n"
}