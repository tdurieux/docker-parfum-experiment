{
  "startTime": 1674239747520,
  "endTime": 1674239747989,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 35,
        "lineEnd": 35,
        "columnStart": 4,
        "columnEnd": 59
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 45,
        "lineEnd": 45,
        "columnStart": 4,
        "columnEnd": 92
      }
    },
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 28,
        "lineEnd": 28,
        "columnStart": 4,
        "columnEnd": 34
      }
    },
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 29,
        "lineEnd": 32,
        "columnStart": 4,
        "columnEnd": 74
      }
    },
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 33,
        "lineEnd": 33,
        "columnStart": 4,
        "columnEnd": 92
      }
    },
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 34,
        "lineEnd": 34,
        "columnStart": 4,
        "columnEnd": 57
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 43,
        "lineEnd": 43,
        "columnStart": 4,
        "columnEnd": 91
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM alpine:3.9.4\n\nRUN echo http://dl-cdn.alpinelinux.org/alpine/edge/community >> /etc/apk/repositories\nRUN apk update && apk upgrade\n\nENV HOME /root\n\nRUN apk add --no-cache build-base git curl wget bash ctags\nRUN apk add --no-cache libxml2-dev libxslt-dev libgcrypt-dev\nRUN apk add --no-cache libffi openssl-dev libffi-dev\n\nRUN apk add --no-cache python3 py-pip python2-dev python3-dev\nRUN apk add --no-cache ruby ruby-dev ruby-bundler ruby-json ruby-irb ruby-rake ruby-bigdecimal ruby-rdoc\nRUN apk add --no-cache composer php7-simplexml php7-tokenizer php7-xmlwriter\nRUN apk add --no-cache inotify-tools elixir erlang erlang-inets erlang-ssl\nRUN apk add --no-cache openjdk8-jre\nRUN apk add --no-cache neovim\nRUN apk add --no-cache tidyhtml\nRUN apk add --no-cache the_silver_searcher\n\nRUN composer global config minimum-stability dev\nRUN composer global require felixfbecker/language-server\nRUN composer run-script --working-dir=/root/.composer/vendor/felixfbecker/language-server parse-stubs\nRUN composer global require squizlabs/php_codesniffer\nRUN composer global require vimeo/psalm\n\nRUN apk add --no-cache nodejs nodejs-npm\nRUN npm config set unsafe-perm true\nRUN npm install -g typescript vale && npm cache clean --force;\nRUN npm install -g eslint babel-eslint \\\n      eslint-config-airbnb eslint-plugin-jest eslint-plugin-flowtype \\\n      eslint-plugin-babel eslint-plugin-import eslint-plugin-lodash-fp \\\n      eslint-plugin-jsx-a11y eslint-plugin-react eslint-config-airbnb-base && npm cache clean --force;\nRUN npm install -g yaml-language-server typings pug-lint js-yaml js-beautify jsonlint neovim && npm cache clean --force;\nRUN npm install -g stylelint stylelint-config-recommended && npm cache clean --force;\nRUN curl -f --compressed -o- -L https://yarnpkg.com/install.sh | bash\n\nRUN gem install pkg-config solargraph --no-document -- --use-system-libraries\nRUN solargraph download-core\nRUN yard config --gem-install-yri\nRUN gem install rubocop rubocop-rspec rubocop-performance --no-document\nRUN gem install haml-lint slim_lint rake neovim --no-document\n\nRUN pip install --no-cache-dir yamllint ansible-lint python-language-server bashate neovim jedi rope isort# black\n\nRUN curl -f https://languagetool.org/download/LanguageTool-stable.zip --output languagetool.zip\nRUN unzip languagetool.zip && rm -rf languagetool.zip\n\nRUN wget -qO- -O ~/elixir-ls.zip https://github.com/JakeBecker/elixir-ls/releases/download/v0.2.25/elixir-ls.zip \\\n      && mkdir ~/elixir-ls \\\n      && unzip ~/elixir-ls.zip -d ~/elixir-ls \\\n      && rm ~/elixir-ls.zip \\\n      && chmod +x /root/elixir-ls/language_server.sh\n\nRUN mix local.hex --force\n\nRUN git clone --depth 1 https://github.com/junegunn/fzf.git ~/.fzf \\\n      && ~/.fzf/install --key-bindings --update-rc --completion \\\n      && cp /root/.fzf/bin/fzf /usr/local/bin\n\nRUN curl -fLo ~/.local/share/nvim/site/autoload/plug.vim --create-dirs \\\n    https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim\n\nCOPY files/vimrc /root/.config/nvim/init.vim\n\nENV PATH $HOME/.yarn/bin:$HOME/.config/yarn/global/node_modules/.bin:$PATH\nENV PATH $HOME/.composer/vendor/bin:$PATH\n\nENV VERSION 17062019\n\nRUN nvim -i NONE -c PlugInstall -c quitall\n\nCOPY languagetool.sh /usr/local/bin/languagetool\nRUN chmod +x /usr/local/bin/languagetool\n\nENV FZF_DEFAULT_COMMAND 'ag -g \"\"'\n\nCOPY files/coc-settings.json /root/.config/nvim/coc-settings.json\n\nCMD [\"nvim\"]\n"
}