{
  "startTime": 1674248442964,
  "endTime": 1674248443645,
  "originalSmells": [
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 157,
        "lineEnd": 157,
        "columnStart": 4,
        "columnEnd": 61
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 170,
        "lineEnd": 170,
        "columnStart": 4,
        "columnEnd": 45
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 171,
        "lineEnd": 171,
        "columnStart": 4,
        "columnEnd": 43
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 172,
        "lineEnd": 172,
        "columnStart": 4,
        "columnEnd": 49
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 50,
        "lineEnd": 50,
        "columnStart": 4,
        "columnEnd": 29
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 117,
        "lineEnd": 117,
        "columnStart": 4,
        "columnEnd": 29
      }
    },
    {
      "rule": "yumInstallRmVarCacheYum",
      "position": {
        "lineStart": 35,
        "lineEnd": 35,
        "columnStart": 4,
        "columnEnd": 31
      }
    },
    {
      "rule": "yumInstallRmVarCacheYum",
      "position": {
        "lineStart": 38,
        "lineEnd": 38,
        "columnStart": 4,
        "columnEnd": 61
      }
    },
    {
      "rule": "yumInstallRmVarCacheYum",
      "position": {
        "lineStart": 41,
        "lineEnd": 41,
        "columnStart": 4,
        "columnEnd": 85
      }
    },
    {
      "rule": "yumInstallRmVarCacheYum",
      "position": {
        "lineStart": 55,
        "lineEnd": 67,
        "columnStart": 4,
        "columnEnd": 22
      }
    },
    {
      "rule": "yumInstallRmVarCacheYum",
      "position": {
        "lineStart": 188,
        "lineEnd": 188,
        "columnStart": 1,
        "columnEnd": 89
      }
    },
    {
      "rule": "yumInstallRmVarCacheYum",
      "position": {
        "lineStart": 207,
        "lineEnd": 207,
        "columnStart": 4,
        "columnEnd": 29
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 47,
        "lineEnd": 47,
        "columnStart": 4,
        "columnEnd": 36
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 72,
        "lineEnd": 72,
        "columnStart": 4,
        "columnEnd": 24
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 115,
        "lineEnd": 115,
        "columnStart": 4,
        "columnEnd": 41
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 190,
        "lineEnd": 190,
        "columnStart": 4,
        "columnEnd": 32
      }
    }
  ],
  "repairedSmells": [
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 72,
        "lineEnd": 72,
        "columnStart": 4,
        "columnEnd": 24
      }
    }
  ],
  "repairedDockerfile": "ARG docker_name\n\nFROM $docker_name\n\nMAINTAINER H2o.ai <ops@h2o.ai>\n\n#\n# Env variables for CUDA. Necessary because certain systems don't support nvidia-docker so we should use plain docker as much as possible.\n#\nENV HOME=/root\nENV CUDA_HOME=/usr/local/cuda\nENV CUDADIR=/usr/local/cuda/include/\nENV PATH=/usr/local/cuda/bin:$PATH\nENV LD_LIBRARY_PATH_CUDA=$CUDA_HOME/lib64/:$CUDA_HOME/lib/:/usr/local/cuda/lib64:/usr/local/cuda/extras/CUPTI/lib64:/usr/local/nvidia/lib:/usr/local/nvidia/lib64\nENV LD_LIBRARY_PATH_BUILD=/lib64:/usr/local/lib64:/home/$USER/lib/\nENV LD_LIBRARY_PATH=$LD_LIBRARY_PATH_CUDA:$LD_LIBRARY_PATH_BUILD:$LD_LIBRARY_PATH\n\n#\n# Env variables used by the codebase.\n#\nENV OMP_NUM_THREADS=32\nENV MKL_NUM_THREADS=32\nENV VECLIB_MAXIMUM_THREADS=32\n\n#\n# Library versions\n#\nENV MINICONDA_VERSION=4.4.10\nENV SWIG_VERSION=3.0.12\nENV PILLOW_VERSION=4.2.1\nENV GIT_VERSION=2.17.0\n\n#\n# Install necessary libraries and dependencies\n#\nRUN yum install -y epel-release && rm -rf /var/cache/yum\n\n# Setup gcc etc.\nRUN yum install -y gcc gcc-c++ libgcc libstdc++ libgomp glibc && rm -rf /var/cache/yum\n\n# Git requirements\nRUN yum install -y libcurl-devel zlib-devel asciidoc xmlto wget make autoconf gettext && rm -rf /var/cache/yum\n\n# Compile from source because yum's latest version is 1.8.3\n# --depth for submodule update which we use was added in 1.8.4\nRUN \\\n    wget https://www.kernel.org/pub/software/scm/git/git-${GIT_VERSION}.tar.xz && \\\n    tar xf git-${GIT_VERSION}.tar.xz && \\\n    cd git-${GIT_VERSION} && \\\n    make configure && \\\n    ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --prefix=/usr && \\\n    make all && \\\n    make install; rm git-${GIT_VERSION}.tar.xz\n\n# H2O4GPU requirements + util programs\nRUN yum install -y \\\n    ncurses-devel \\\n        bzip2 \\\n        which \\\n        axel \\\n        cmake3 \\\n        openssl-devel \\\n        libpng-devel \\\n        freetype-devel \\\n        blas-devel \\\n        epel-release \\\n        zeromq-devel \\\n        openblas-devel && \\\n    wget https://repo.continuum.io/miniconda/Miniconda3-${MINICONDA_VERSION}-Linux-`arch`.sh && \\\n    bash Miniconda3-${MINICONDA_VERSION}-Linux-`arch`.sh -b -p /opt/h2oai/h2o4gpu/python && \\\n    /opt/h2oai/h2o4gpu/python/bin/conda install -y conda-build six=1.11.0 && \\\n    wget https://s3.amazonaws.com/artifacts.h2o.ai/releases/ai/h2o/dai-thirdparty-deps/1.0-master-2/`arch`-centos7/llvm.tar.bz2 && \\\n    tar xvf llvm.tar.bz2 && \\\n    cp -r llvm/* /opt/h2oai/h2o4gpu/ && \\\n    rm -rf llvm* && rm -rf /var/cache/yum\n\nENV LLVM4=/opt/h2oai/h2o4gpu\nENV PATH=/opt/h2oai/h2o4gpu/python/bin:$PATH\nENV PATH=/usr/local/bin:$PATH\nENV PATH=$LLVM4/bin:$PATH\nENV LD_LIBRARY_PATH=$LLVM4/lib:$LD_LIBRARY_PATH\n\n#\n# Symlinks\n#\n\n# AR for conda\nRUN ln /usr/bin/ar $LLVM4/bin/`arch`-conda_cos6-linux-gnu-ar\n\n# CentOS' yum install cmake has only 2.X so need to install cmake3 and make a symlink\nRUN ln -s /usr/bin/cmake3 /usr/bin/cmake\n\n# Symlinks for Python libs used by SWIG in CMake - it does not recognize Miniconda paths otherwise\nRUN \\\n    mkdir -p /usr/lib64/ && \\\n    ln -sf /opt/h2oai/h2o4gpu/python/lib/libpython* /usr/lib64/ && \\\n    mkdir -p /usr/include/python3.6m && \\\n    ln -s /opt/h2oai/h2o4gpu/python/include/python3.6m/* /usr/include/python3.6m\n\n# Yumming openblas puts some files in a not-so-standard locations\nRUN ln -s /usr/include/openblas/* /usr/local/include/\n\n# Symlinks for NVML\nRUN \\\n    mkdir -p /usr/lib64/nvidia/ && \\\n    ln -s /usr/local/cuda-`nvcc --version | tail -n 1 | cut -f 5 -d' ' | cut -f 1 -d ','`/targets/`arch`-linux/lib/stubs/libnvidia-ml.so /usr/lib64/nvidia/libnvidia-ml.so\n\n#\n# Builds from source due to too old versions in yum\n#\nWORKDIR $HOME\n\n# SWIG\nRUN \\\n    wget https://sourceforge.net/projects/swig/files/swig/swig-${SWIG_VERSION}/swig-${SWIG_VERSION}.tar.gz && \\\n    tar -zxvf swig-${SWIG_VERSION}.tar.gz && \\\n    cd swig-${SWIG_VERSION} && \\\n    ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --prefix=/usr && \\\n    make -j $(nproc) && \\\n    make install && \\\n    cd $HOME && \\\n    rm -rf swig-3* && rm swig-${SWIG_VERSION}.tar.gz\n\n# TODO Install DAAL\n\n#\n# PPC64 specific - certain libs/whl don't support PPC64LE\n#\n\n# Arrow\nRUN bash -c 'if [ `arch` = \"ppc64le\" ]; then \\\n\tgit clone https://github.com/apache/arrow.git && \\\n\tcd $HOME/arrow/cpp && \\\n\tgit checkout tags/apache-arrow-0.12.0 && \\\n    yum install -y boost-devel && \\\n  \tpip install numpy==1.16.1 cython==0.29.3 && \\\n\tcmake -DARROW_CXXFLAGS=\"-lutil\" -DARROW_PYTHON=on && make -j && make install && \\\n\tcd $HOME/arrow/python && \\\n\tARROW_HOME=/usr/local python setup.py install && \\\n\tyum install -y libjpeg-devel;\\\n\tfi'\n\n# Pillow\nRUN bash -c 'if [ `arch` = \"ppc64le\" ]; then \\\n\twget https://files.pythonhosted.org/packages/55/aa/f7f983fb72710a9daa4b3374b7c160091d3f94f5c09221f9336ade9027f3/Pillow-${PILLOW_VERSION}.tar.gz && \\\n\ttar xvf Pillow-${PILLOW_VERSION}.tar.gz && \\\n\tcd $HOME/Pillow-${PILLOW_VERSION} && \\\n\tsed -i \"s/'ppc64'/'ppc64le'/g\" setup.py && \\\n\tpython setup.py install && \\\n\tcd $HOME && \\\n\trm -rf Pillow-${PILLOW_VERSION}*; \\\n\tfi'\n\n\n#\n# Install Python requirements\n#\nRUN pip install --no-cache-dir numpy==1.16.1 scipy==1.2.1 setuptools==39.0.1\n\nRUN \\\n    git clone https://github.com/NVIDIA/nccl.git && \\\n    cd nccl && \\\n    git checkout tags/v2.4.7-1 && \\\n    make -j src.build;\n\n\nCOPY src/interface_py/requirements_buildonly.txt requirements_buildonly.txt\nCOPY src/interface_py/requirements_runtime.txt requirements_runtime.txt\nCOPY src/interface_py/requirements_runtime_demos.txt requirements_runtime_demos.txt\n\nRUN pip install --no-cache-dir -r requirements_buildonly.txt\nRUN pip install --no-cache-dir -r requirements_runtime.txt\nRUN pip install --no-cache-dir -r requirements_runtime_demos.txt\n\nRUN mkdir -p /etc/OpenCL/vendors && \\\n    echo \"libnvidia-opencl.so.1\" > /etc/OpenCL/vendors/nvidia.icd\n\nRUN (localedef -v -c -i en_US -f UTF-8 en_US.UTF-8 || true)\n\nENV LANG en_US.UTF-8\nENV LANGUAGE en_US:en\n\n\n# See https://github.com/Microsoft/LightGBM/wiki/Installation-Guide#with-gpu-support for details\n# https://github.com/Microsoft/LightGBM/pull/929/files\n# Could compile with these as well: -DBOOST_COMPUTE_USE_OFFLINE_CACHE=OFF -DBOOST_COMPUTE_THREAD_SAFE=ON\nRUN \\\n    export CUDA_HOME=/usr/local/cuda/ && \\\n\tyum install -y opencl-headers icu libicu-devel bzip2 bzip2-devel zlib-devel python-devel && \\\n    wget https://s3.amazonaws.com/0xdata-public/boost/boost_1_69_0.tar.bz2  && \\\n    tar xjf boost_1_69_0.tar.bz2 && \\\n    cd boost_1_69_0 && \\\n    export PYTHONPATH=/opt/h2oai/h2o4gpu/python/ && \\\n    ./bootstrap.sh --prefix=/opt/boost/ --with-python=python3 && \\\n    export CPPFLAGS=\"-I/opt/h2oai/h2o4gpu/python/include/python3.6m/ -fPIC\" && \\\n    export C_INCLUDE_PATH=\"/opt/h2oai/h2o4gpu/python/include/python3.6m/\" ; rm -rf /var/cache/yum rm boost_1_69_0.tar.bz2 export CPLUS_INCLUDE_PATH=\"/opt/h2oai/h2o4gpu/python/include/python3.6m/\" && \\\n    ./b2 link=static -a -d0 install --prefix=/opt/boost/ --with=all -j 20 cxxflags=\"-fPIC -I /opt/h2oai/h2o4gpu/python/include/python3.6m/\" && \\\n    cd /usr/include ; rm -rf boost ; ln -s /opt/boost/include/boost . && \\\n    cd /usr/lib64/ ; rm -rf libboost* ; cp -a /opt/boost/lib/* . && \\\n    cd /\n\n#\tyum install -y boost boost-devel boost-system boost-filesystem boost-thread\n\nENV LD_LIBRARY_PATH=/opt/boost/lib/:$LD_LIBRARY_PATH\n\nRUN chmod -R o+rwx /opt/h2oai/h2o4gpu/python\nRUN chmod -R o+rwx /root\nRUN yum install -y hdf5-devel && rm -rf /var/cache/yum\nRUN bash -c 'if [ `arch` == \"ppc64le\" ]; then \\\n\tyum install -y ocl-icd; \\\n    fi'\n\n\nENV LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/usr/lib64/nvidia\nENV CUDA_TOOLKIT_ROOT_DIR=/usr/local/cuda-9.2\n\nWORKDIR $HOME\n\nENV GIT_AUTHOR_NAME=\"anonymous\"\nENV GIT_AUTHOR_EMAIL=\"anonymous@h2o.ai\"\nENV GIT_COMMITTER_NAME=\"anonymous\"\nENV GIT_COMMITTER_EMAIL=\"anonymous@h2o.ai\"\nENV EMAIL=\"anonymous@h2o.ai\"\n"
}