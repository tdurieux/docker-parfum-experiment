{
  "startTime": 1674241329116,
  "endTime": 1674241329375,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 48,
        "lineEnd": 48,
        "columnStart": 4,
        "columnEnd": 64
      }
    },
    {
      "rule": "curlUseHttpsUrl",
      "position": {
        "lineStart": 48,
        "lineEnd": 48,
        "columnStart": 4,
        "columnEnd": 64
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 18,
        "lineEnd": 24,
        "columnStart": 22,
        "columnEnd": 12
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 18,
        "lineEnd": 24,
        "columnStart": 22,
        "columnEnd": 12
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM ubuntu:18.04\nLABEL maintainer=\"Michael Macnair\"\n\nRUN echo 'debconf debconf/frontend select Noninteractive' | debconf-set-selections\n\n# We want manpages in the container - the base image excludes them\nRUN rm /etc/dpkg/dpkg.cfg.d/excludes\n\n# Packages\n##############\n# by line:\n#   build and afl\n#   date challenge\n#   libxml2 challenge\n#   server/entrypoint\n#   user tools\n#   debugging tools\nUSER root\nRUN apt-get update && apt-get install --no-install-recommends -y \\\n    clang-6.0 llvm-6.0-dev git build-essential curl libssl-dev cgroup-bin sudo \\\n    rsync autopoint bison gperf autoconf texinfo gettext \\\n    libtool pkg-config libz-dev python2.7-dev \\\n    awscli openssh-server \\\n    emacs vim nano screen htop man manpages-posix-dev \\\n    lldb gdb && rm -rf /var/lib/apt/lists/*;\n\n# Users & SSH\n##############\nRUN useradd --create-home --shell /bin/bash fuzzer\n# See the README - the password is set by the entry script\n\n# passwordless sudo access for ASAN and installing extra tools:\nRUN echo \"fuzzer ALL=(ALL) NOPASSWD:ALL\" >> /etc/sudoers\n# RUN usermod -aG sudo fuzzer\n\nRUN mkdir /var/run/sshd\n\n# AFL\n###########\nRUN update-alternatives --install /usr/bin/clang clang `which clang-6.0` 1 && \\\n    update-alternatives --install /usr/bin/clang++ clang++ `which clang++-6.0` 1 && \\\n    update-alternatives --install /usr/bin/llvm-config llvm-config `which llvm-config-6.0` 1 && \\\n    update-alternatives --install /usr/bin/llvm-symbolizer llvm-symbolizer `which llvm-symbolizer-6.0` 1\n\n# (environment variables won't be visible in the SSH session unless added to /etc/profile or similar)\nENV AFLVERSION=afl-2.52b\nUSER fuzzer\nWORKDIR /home/fuzzer\nRUN curl -f https://lcamtuf.coredump.cx/afl/releases/$AFLVERSION.tgz | tar xz\nWORKDIR /home/fuzzer/$AFLVERSION\nRUN git clone https://github.com/vanhauser-thc/afl-patches.git && \\\n    patch -p0 <./afl-patches/afl-llvm-fix.diff && \\\n    patch -p0 <./afl-patches/afl-llvm-fix2.diff && \\\n    patch -p0 <./afl-patches/afl-sort-all_uniq-fix.diff\nRUN make && cd llvm_mode && make\nRUN sudo make install\n\n# You could install gnuplot-nox, but it increases the image size a lot (~100 extra packages).\n# Students can install it themselves if they want it.\n\n# Exercises\n##############\nUSER fuzzer\nWORKDIR /home/fuzzer\nRUN git clone https://github.com/mykter/afl-training.git workshop\n# Use this if building using a local copy of the training materials\n# ADD . ./local-workshop\n# USER root\n# RUN chown -R fuzzer:fuzzer local-workshop\n\n# By default run an SSH daemon. To run locally instead, use something like this:\n#    docker run -it --user fuzzer afl-training:latest /bin/bash\n##############\nUSER root\n\nCOPY entrypoint.sh /usr/local/bin/entrypoint.sh\n\nEXPOSE 22\nCMD [\"entrypoint.sh\"]\n"
}