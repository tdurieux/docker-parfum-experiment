{
  "startTime": 1674234273008,
  "endTime": 1674234273611,
  "originalSmells": [
    {
      "rule": "curlUseHttpsUrl",
      "position": {
        "lineStart": 34,
        "lineEnd": 34,
        "columnStart": 6,
        "columnEnd": 85
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 107,
        "lineEnd": 107,
        "columnStart": 4,
        "columnEnd": 22
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 108,
        "lineEnd": 108,
        "columnStart": 4,
        "columnEnd": 26
      }
    },
    {
      "rule": "mkdirUsrSrcThenRemove",
      "position": {
        "lineStart": 35,
        "lineEnd": 35,
        "columnStart": 7,
        "columnEnd": 24
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 38,
        "lineEnd": 47,
        "columnStart": 7,
        "columnEnd": 36
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 36,
        "lineEnd": 36,
        "columnStart": 7,
        "columnEnd": 40
      }
    }
  ],
  "repairedSmells": [
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 36,
        "lineEnd": 36,
        "columnStart": 7,
        "columnEnd": 40
      }
    }
  ],
  "repairedDockerfile": "FROM php:7.2.8-fpm-alpine3.7\n\nLABEL maintainer=\"nICKZHUO <sidewindermax@hotmail.com>\"\n\nENV php_conf /usr/local/etc/php-fpm.conf\nENV fpm_conf /usr/local/etc/php-fpm.d/www.conf\nENV php_vars /usr/local/etc/php/conf.d/docker-vars.ini\n\n# Nginx版本\nENV NGINX_VERSION 1.15.2\n\nENV LD_PRELOAD /usr/lib/preloadable_libiconv.so php\nRUN apk add --no-cache --repository http://dl-3.alpinelinux.org/alpine/edge/testing gnu-libiconv\n\nRUN addgroup -S www \\\n  && adduser -D -S -h /var/cache/www -s /sbin/nologin -G www www \\ \n  && apk add --no-cache --virtual .build-deps \\\n    autoconf \\\n    gcc \\\n    vim \\\n    git \\\n    libc-dev \\\n    make \\\n    openssl-dev \\\n    pcre-dev \\\n    zlib-dev \\\n    linux-headers \\\n    curl \\\n    gnupg \\\n    libxslt-dev \\\n    gd-dev \\\n    geoip-dev \\\n    perl-dev\n\n  RUN curl -fSL https://nginx.org/download/nginx-$NGINX_VERSION.tar.gz -o nginx.tar.gz \\\n    && mkdir -p /usr/src \\\n    && tar -zxC /usr/src -f nginx.tar.gz \\\n    && cd /usr/src/nginx-$NGINX_VERSION \\\n    && ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --prefix=/usr/local/nginx \\\n      --user=www --group=www \\\n      --error-log-path=/var/log/nginx_error.log \\\n      --http-log-path=/var/log/nginx_access.log \\\n      --pid-path=/var/run/nginx.pid \\\n      --with-pcre \\\n      --with-http_ssl_module \\\n      --without-mail_pop3_module \\\n      --without-mail_imap_module \\\n      --with-http_gzip_static_module && \\\n      make && make install && rm -rf /usr/src\n\nRUN echo @testing http://nl.alpinelinux.org/alpine/edge/testing >> /etc/apk/repositories && \\\n#    sed -i -e \"s/v3.4/edge/\" /etc/apk/repositories && \\\n    echo /etc/apk/respositories && \\\n    apk update && \\\n    apk add --no-cache bash \\\n    openssh-client \\\n    wget \\\n    supervisor \\\n    curl \\\n    libcurl \\\n    python \\\n    python-dev \\\n    py-pip \\\n    augeas-dev \\\n    openssl-dev \\\n    ca-certificates \\\n    dialog \\\n    autoconf \\\n    make \\\n    gcc \\\n    musl-dev \\\n    linux-headers \\\n    libmcrypt-dev \\\n    libpng-dev \\\n    icu-dev \\\n    libpq \\\n    libxslt-dev \\\n    libffi-dev \\\n    freetype-dev \\\n    sqlite-dev \\\n    libjpeg-turbo-dev\n\n# 必须这样装mcrypt\nRUN pecl install mcrypt-1.0.1 && \\\n    pecl install redis\n\n# 跑GD要配置下\nRUN docker-php-ext-configure gd \\\n      --with-gd \\\n      --with-freetype-dir=/usr/include/ \\\n      --with-png-dir=/usr/include/ \\\n      --with-jpeg-dir=/usr/include/\n\nRUN docker-php-ext-install pdo_mysql mysqli gd exif fileinfo intl json opcache\n\nRUN docker-php-ext-enable redis.so && \\\n  docker-php-ext-enable mcrypt.so && \\\n  docker-php-source delete\n\n# 安装composer   \nRUN EXPECTED_COMPOSER_SIGNATURE=$(wget -q -O - https://composer.github.io/installer.sig) && \\\n    php -r \"copy('https://getcomposer.org/installer', 'composer-setup.php');\" && \\\n    php -r \"if (hash_file('SHA384', 'composer-setup.php') === '${EXPECTED_COMPOSER_SIGNATURE}') { echo 'Composer.phar Installer verified'; } else { echo 'Composer.phar Installer corrupt'; unlink('composer-setup.php'); } echo PHP_EOL;\" && \\\n    php composer-setup.php --install-dir=/usr/bin --filename=composer && \\\n    php -r \"unlink('composer-setup.php');\"\n\n# 安装pip相关   \nRUN pip install --no-cache-dir -U pip && \\\n    pip install --no-cache-dir -U certbot && \\\n    mkdir -p /etc/letsencrypt/webrootauth && \\\n    apk del gcc musl-dev linux-headers libffi-dev augeas-dev python-dev make autoconf\n\n# supervisor的配置文件复制过去\n# supervisor配置文件\nADD ./conf/supervisord/supervisord.conf /etc/\n# 分解的supervisor配置\nRUN mkdir -p /etc/supervisor/\nADD ./conf/supervisord/php-fpm.conf /etc/supervisor/\nADD ./conf/supervisord/nginx.conf /etc/supervisor/\n\n# nginx配置文件 symfony放在site里 注意路径是 /usr/local/nginx/conf/\nCOPY ./conf/nginx/nginx.conf /usr/local/nginx/conf/\nCOPY ./conf/nginx/symfony.conf /usr/local/nginx/conf/vhost/\n\n# 优化 php-fpm 配置\nRUN echo \"cgi.fix_pathinfo=0\" > ${php_vars} &&\\\n    echo \"upload_max_filesize = 100M\"  >> ${php_vars} &&\\\n    echo \"post_max_size = 100M\"  >> ${php_vars} &&\\\n    echo \"variables_order = \\\"EGPCS\\\"\"  >> ${php_vars} && \\\n    echo \"memory_limit = 128M\"  >> ${php_vars} && \\\n    echo \"date.timezone =  Asia/Shanghai\"  >> ${php_vars}\n\nRUN sed -i \\\n    -e \"s/;catch_workers_output\\s*=\\s*yes/catch_workers_output = yes/g\" \\\n    -e \"s/pm.max_children = 5/pm.max_children = 4/g\" \\\n    -e \"s/pm.start_servers = 2/pm.start_servers = 3/g\" \\\n    -e \"s/pm.min_spare_servers = 1/pm.min_spare_servers = 2/g\" \\\n    -e \"s/pm.max_spare_servers = 3/pm.max_spare_servers = 4/g\" \\\n    -e \"s/;pm.max_requests = 500/pm.max_requests = 200/g\" \\\n    -e \"s/user = www-data/user = www/g\" \\\n    -e \"s/group = www-data/group = www/g\" \\\n    -e \"s/;listen.mode = 0660/listen.mode = 0666/g\" \\\n    -e \"s/;listen.owner = www-data/listen.owner = www/g\" \\\n    -e \"s/;listen.group = www-data/listen.group = www/g\" \\\n    -e \"s/listen = 127.0.0.1:9000/listen = \\/dev\\/shm\\/php-fpm.sock/g\" \\\n    -e \"s/^;clear_env = no$/clear_env = no/\" \\\n    ${fpm_conf}\n\n# 挂载代码文件到容器\nCOPY ./code/index.php /data/www/public/\n\n# 添加启动脚本\nADD scripts/start.sh /start.sh\nRUN chmod 755 /start.sh\n\nEXPOSE 80\n\nCMD [\"/start.sh\"]"
}