{
  "startTime": 1674242923105,
  "endTime": 1674242923497,
  "originalSmells": [
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 233,
        "lineEnd": 233,
        "columnStart": 11,
        "columnEnd": 65
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 259,
        "lineEnd": 259,
        "columnStart": 11,
        "columnEnd": 41
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 84,
        "lineEnd": 84,
        "columnStart": 12,
        "columnEnd": 105
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "################################################################################\n# SageMath images for Docker                                                   #\n################################################################################\n# This is a description of the layout of this Dockerfile; for details on the   #\n# created docker images, see the README.md please.                             #\n#                                                                              #\n# This Dockerfile builds sagemath (for end-users) and sagemath-dev (for        #\n# developers.) It consists of lots of intermediate targets, mostly to shrink   #\n# the resulting images but also to make this hopefully easier to maintain.     #\n# The aims of this Dockerfile are:                                             #\n# (1) Make it build in reasonable time.                                        #\n# (2) It should be self-contained and work on its own, i.e., just by invoking  #\n# docker build without any external orchestration script.                      #\n#                                                                              #\n# The idea to achieve (1) is to reuse the build artifacts from the latest      #\n# develop build. This is slightly against the philosophy of a Dockerfile (which#\n# should produce perfectly reproducible outputs) but building Sage from scratch#\n# just takes too long at the moment to do this all the time. ARTIFACT_BASE     #\n# controls which build artifacts are used. You probably want to set this to    #\n# sagemath/sagemath-dev:develop which takes the latest build from the official #\n# develop branch. The default is source-clean which builds Sage from scratch.  #\n# If you want to understand how this works, have a look at source-from-context #\n# which merges ARTIFACT_BASE with the context, i.e., the contents of the sage  #\n# source directory.                                                            #\n################################################################################\n\n################################################################################\n# HOWTO use this file for local builds                                         #\n################################################################################\n# If you don't mind downloading a 2GB docker image from time to time, you      #\n# could use this file for local Sage development. As of early 2018 each build  #\n# takes about five minutes but you don't have to go through the sadly frequent #\n# rebuilds the whole Sage distribution...                                      #\n# To build Sage, run this command from your sage/ directory:                   #\n# $ docker build --build-arg MAKEOPTS=\"-j4\" --build-arg SAGE_NUM_THREADS=\"4\" --build-arg ARTIFACT_BASE=\"sagemath/sagemath-dev:develop\" -f docker/Dockerfile --target=make-build --tag sage .\n# To run Sage:                                                                 #\n# $ docker run -it sage                                                        #\n# To run doctests:                                                             #\n# $ docker run -e \"MAKEOPTS=-j4\" -e \"SAGE_NUM_THREADS=4\" -it sage sage -tp src/sage\n# Make sure that you always have the latest develop branch merged into your    #\n# local branch for this to work.                                               #\n################################################################################\n\nARG ARTIFACT_BASE=source-clean\n\n################################################################################\n# Image containing the run-time dependencies for Sage                          #\n################################################################################\nFROM ubuntu:xenial as run-time-dependencies\nLABEL maintainer=\"Erik M. Bray <erik.bray@lri.fr>, Julian RÃ¼th <julian.rueth@fsfe.org>\"\n# Set sane defaults for common environment variables.\nENV LC_ALL C.UTF-8\nENV LANG C.UTF-8\nENV SHELL /bin/bash\n# Create symlinks for sage and sagemath - we copy a built sage to the target of these symlinks later.\nARG SAGE_ROOT=/home/sage/sage\nRUN ln -s \"$SAGE_ROOT/sage\" /usr/bin/sage\nRUN ln -s /usr/bin/sage /usr/bin/sagemath\n# Sage needs the fortran libraries at run-time because we do not build gfortran\n# with Sage but use the system's.\n# We need gcc/g++ and libstdc++-5-dev to allow compilation of cython at run-time from the notebook.\n# We also install sudo for the sage user, see below.\nRUN apt-get -qq update \\\n    && apt-get -qq install -y --no-install-recommends gfortran gcc g++ libstdc++-5-dev sudo openssl \\\n    && apt-get -qq clean \\\n    && rm -r /var/lib/apt/lists/*\n# Sage refuses to build as root, so we add a \"sage\" user that can sudo without a password.\n# We also want this user at runtime as some commands in sage know about the user that was used during build.\nARG HOME=/home/sage\nRUN adduser --quiet --shell /bin/bash --gecos \"Sage user,101,,\" --disabled-password --home \"$HOME\" sage \\\n    && echo \"sage ALL=(ALL) NOPASSWD:ALL\" >> /etc/sudoers.d/01-sage \\\n    && chmod 0440 /etc/sudoers.d/01-sage\n# Run everything from now on as the sage user in sage's home\nUSER sage\nENV HOME $HOME\nWORKDIR $HOME\n\n################################################################################\n# Image containing everything so that a make in a clone of the Sage repository #\n# completes without errors                                                     #\n################################################################################\nFROM run-time-dependencies as build-time-dependencies\n# Install the build time dependencies & git & rdfind\nRUN sudo apt-get -qq update \\\n    && sudo apt-get -qq --no-install-recommends install -y wget build-essential automake m4 dpkg-dev python libssl-dev git rdfind \\\n    && sudo apt-get -qq clean \\\n    && sudo rm -r /var/lib/apt/lists/*\n\n################################################################################\n# Image with an empty git repository in $SAGE_ROOT.                            #\n################################################################################\nFROM build-time-dependencies as source-clean\nARG SAGE_ROOT=/home/sage/sage\nRUN mkdir -p \"$SAGE_ROOT\"\nWORKDIR $SAGE_ROOT\nRUN git init\nRUN git remote add trac git://trac.sagemath.org/sage.git\n\n################################################################################\n# Image with the build context added, i.e., the directory from which `docker   #\n# build` has been called in a separate directory so we can copy files from     #\n# there.                                                                       #\n# This blows up the size of this docker image significantly, but we only use   #\n# this image to create artifacts for our final image.                          #\n# Warning: If you set ARTIFACT_BASE to something else than source-clean, the   #\n# build is not going to use the build-time-dependencies target but rely on     #\n# whatever tools are installed in ARTIFACT_BASE.                               #\n################################################################################\nFROM $ARTIFACT_BASE as source-from-context\nWORKDIR $HOME\nCOPY --chown=sage:sage . sage-context\n# Checkout the commit that checked out in $HOME/sage-context\n# This is a bit complicated because our local .git/ is empty and we want to\n# make sure that we only change the mtimes of a minimal number of files.\n# 1) Restore the git checkout ARTIFACT_BASE was built from, recorded in\n#    docker/.commit. (Or go directly to FETCH_HEAD if there is no history to\n#    restore, i.e., set ARTIFACT_BASE=source-clean if you want to build from\n#    scratch.)\n# 2) Merge in FETCH_HEAD but only if it is a fast-forward, i.e., if it is an\n#    ancestor of the commit restored in 1. If we would not do that we would get\n#    a new commit hash in docker/.commit that is not known outside of this build\n#    run. Since docker/.commit was in the history of FETCH_HEAD this should\n#    automatically be a fast-forward.\n# 3) Trash .git again to save some space.\nARG SAGE_ROOT=/home/sage/sage\nWORKDIR $SAGE_ROOT\n# We create a list of all files present in the artifact-base (with a timestamp\n# of now) so we can find out later which files were added/changed/removed.\nRUN find . -type f > $HOME/artifact-base.manifest\nRUN git fetch \"$HOME/sage-context\" HEAD \\\n    && if [ -e docker/.commit ]; then \\\n          git reset `cat docker/.commit` \\\n          || ( echo \"Could not find commit `cat docker/.commit` in your local Git history. Please merge in the latest built develop branch to fix this: git fetch trac && git merge `cat docker/.commit`.\" && exit 1 ) \\\n       else \\\n          echo \"You are building from $ARTIFACT_BASE which has no docker/.commit file. That's a bug unless you are building from source-clean or something similar.\" \\\n          && git reset FETCH_HEAD \\\n          && git checkout -f FETCH_HEAD; \\\n       fi \\\n    && git merge --ff-only FETCH_HEAD \\\n    && git log -1 --format=%H > docker/.commit \\\n    && rm -rf .git\n# Copy over all the untracked/staged/unstaged changes from sage-context. This\n# is relevant for non-CI invocations of this Dockerfile.\nWORKDIR $HOME/sage-context\nRUN if git status --porcelain | read CHANGES; then \\\n        git -c user.name=docker-build -c user.email=docker-build@sage.invalid stash -u \\\n        && git stash show -p > \"$HOME\"/sage-context.patch; \\\n    else \\\n        touch \"$HOME\"/sage-context.patch; \\\n    fi\nWORKDIR $SAGE_ROOT\nRUN patch -p1 < \"$HOME\"/sage-context.patch\n\n################################################################################\n# Image with a built sage but without sage's documentation.                    #\n################################################################################\nFROM source-from-context as make-build\n# Make sure that the result runs on most CPUs.\nENV SAGE_FAT_BINARY yes\n# Just to be sure Sage doesn't try to build its own GCC (even though\n# it shouldn't with a recent GCC package from the system and with gfortran)\nENV SAGE_INSTALL_GCC no\n# Set MAKEOPTS and SAGE_NUM_THREADS to build things in parallel during the\n# docker build. Note that these do not leak into the sagemath and sagemath-dev\n# images.\nARG MAKEOPTS=\"-j2\"\nENV MAKEOPTS $MAKEOPTS\nARG SAGE_NUM_THREADS=\"2\"\nENV SAGE_NUM_THREADS $SAGE_NUM_THREADS\nRUN make build\n\n################################################################################\n# Image with a full build of sage and its documentation.                       #\n################################################################################\nFROM make-build as make-all\n# The docbuild needs quite some RAM (as of May 2018). It sometimes calls\n# os.fork() to spawn an external program which then exceeds easily the\n# overcommit limit of the system (no RAM is actually used, but this limit is\n# very low because there is not even swap on most CI systems.)\nARG MAKEOPTS_DOCBUILD=$MAKEOPTS\nENV MAKEOPTS_DOCBUILD $MAKEOPTS_DOCBUILD\nARG SAGE_NUM_THREADS_DOCBUILD=$SAGE_NUM_THREADS\nENV SAGE_NUM_THREADS_DOCBUILD $SAGE_NUM_THREADS_DOCBUILD\nRUN make\n\n################################################################################\n# Image with a full build of sage, ready to release, i.e., with stripped       #\n# binaries and some extras to run the jupyter notebook.                        #\n################################################################################\nFROM make-all as make-release\nRUN sage -pip install terminado \"notebook>=5\" \"ipykernel>=4.6\"\nRUN sage -i gap_jupyter singular_jupyter pari_jupyter\nRUN make micro_release\n\n################################################################################\n# A releasable (relatively small) image which contains a copy of sage without  #\n# temporary build artifacts which is set up to start the command line          #\n# interface if no parameters are passed in.                                    #\n################################################################################\nFROM run-time-dependencies as sagemath\nARG HOME=/home/sage\nARG SAGE_ROOT=/home/sage/sage\nCOPY --chown=sage:sage --from=make-release $SAGE_ROOT/ $SAGE_ROOT/\n# Put scripts to start gap, gp, maxima, ... in /usr/bin\nRUN sudo $SAGE_ROOT/sage --nodotsage -c \"install_scripts('/usr/bin')\"\nCOPY ./docker/entrypoint.sh /usr/local/bin/sage-entrypoint\nWORKDIR $HOME\nENTRYPOINT [\"/usr/local/bin/sage-entrypoint\"]\nEXPOSE 8888\nCMD [\"sage\"]\n\n################################################################################\n# Image with a full build of sage and its documentation but everything         #\n# stripped that can be quickly rebuild by make.                                #\n################################################################################\nFROM make-all as make-fast-rebuild-clean\nRUN make fast-rebuild-clean\n\n################################################################################\n# Depending on whether we built from source-clean or not, this image is either #\n# identical to make-fast-rebuild-clean or contains a \"patch\" which can be used #\n# to upgrade ARTIFACT_BASE to make-fast-rebuild-clean.                         #\n################################################################################\nFROM make-fast-rebuild-clean as sagemath-dev-patch\nARG ARTIFACT_BASE=source-clean\nARG SAGE_ROOT=/home/sage/sage\n# Build a patch containing of a tar file which contains all the modified files\n# and a list of all modified files (added/updated/removed).\nRUN if [ x\"$ARTIFACT_BASE\" != x\"source-clean\" ]; then \\\n        mkdir -p $HOME/patch \\\n        && find . -type f > $HOME/make-fast-rebuild-clean.manifest \\\n        && cat $HOME/make-fast-rebuild-clean.manifest $HOME/artifact-base.manifest | sort | uniq -u > $HOME/obsolete \\\n        && find . -type f -cnewer $HOME/artifact-base.manifest > $HOME/modified \\\n        && tar -cJf $HOME/patch/modified.tar.xz -T $HOME/modified \\\n        && cat $HOME/obsolete $HOME/modified | xz > $HOME/patch/modified.xz \\\n        && rm -rf $SAGE_ROOT \\\n        && mkdir -p $SAGE_ROOT \\\n        && mv $HOME/patch $SAGE_ROOT/; rm $HOME/patch/modified.tar.xz \\\n    fi\n\n################################################################################\n# A releasable (relatively small, but still huge) image of this build with all #\n# the build artifacts intact so developers can make changes and rebuild        #\n# quickly                                                                      #\n################################################################################\nFROM $ARTIFACT_BASE as sagemath-dev\nARG SAGE_ROOT=/home/sage/sage\n# If docker is backed by aufs, then the following command adds the size of\n# ARTIFACT_BASE to the image size. As of mid 2018 this is notably the case with\n# the docker instances provided by setup_remote_docker on CircleCI. As a\n# result, the sagemath-dev images that are \"build-from-latest\" are twice as big\n# as the ones that are build on GitLab:\n# https://github.com/moby/moby/issues/6119#issuecomment-268870519\nCOPY --chown=sage:sage --from=sagemath-dev-patch $SAGE_ROOT $SAGE_ROOT\nARG ARTIFACT_BASE=source-clean\n# Apply the patch from sagemath-dev-patch if we created one.\nRUN if [ x\"$ARTIFACT_BASE\" != x\"source-clean\" ]; then \\\n        echo \"Applying `du -hs patch/modified.tar.xz` patch\" \\\n        && xzcat patch/modified.xz | xargs rm -rvf \\\n        && tar -Jxf patch/modified.tar.xz \\\n        && rm -rf patch; rm patch/modified.tar.xz \\\n    fi\nCOPY ./docker/entrypoint-dev.sh /usr/local/bin/sage-entrypoint\nENTRYPOINT [\"/usr/local/bin/sage-entrypoint\"]\nCMD [\"bash\"]\n"
}