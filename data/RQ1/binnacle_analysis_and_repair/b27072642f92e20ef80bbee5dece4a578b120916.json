{
  "startTime": 1674246198509,
  "endTime": 1674246199097,
  "originalSmells": [
    {
      "rule": "wgetUseHttpsUrl",
      "position": {
        "lineStart": 77,
        "lineEnd": 78,
        "columnStart": 4,
        "columnEnd": 164
      }
    },
    {
      "rule": "wgetUseHttpsUrl",
      "position": {
        "lineStart": 118,
        "lineEnd": 119,
        "columnStart": 4,
        "columnEnd": 100
      }
    },
    {
      "rule": "wgetUseHttpsUrl",
      "position": {
        "lineStart": 130,
        "lineEnd": 130,
        "columnStart": 4,
        "columnEnd": 88
      }
    },
    {
      "rule": "wgetUseHttpsUrl",
      "position": {
        "lineStart": 131,
        "lineEnd": 131,
        "columnStart": 4,
        "columnEnd": 110
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 79,
        "lineEnd": 79,
        "columnStart": 4,
        "columnEnd": 66
      }
    },
    {
      "rule": "apkAddUseNoCache",
      "position": {
        "lineStart": 18,
        "lineEnd": 30,
        "columnStart": 7,
        "columnEnd": 15
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "#upstream https://github.com/sheepkiller/kafka-manager-docker\nFROM alpine:3.8\nMAINTAINER 若虚 <slpcat@qq.com>\n\n# Container variables\nENV \\\n    TERM=\"xterm\" \\\n    LANG=\"en_US.UTF-8\" \\\n    LANGUAGE=\"en_US.UTF-8\" \\\n    LC_ALL=\"en_US.UTF-8\" \\\n    TIMEZONE=\"Asia/Shanghai\"\n\nRUN sed -i 's/dl-cdn.alpinelinux.org/mirrors.aliyun.com/' /etc/apk/repositories\n\n# Set timezone and locales\nRUN set -ex \\\n    && apk update \\\n    && apk upgrade \\\n    && apk add --no-cache \\\n           bash \\\n           tzdata \\\n           vim \\\n           tini \\\n           su-exec \\\n           git \\\n           unzip \\\n           gzip \\\n           tar \\\n           wget \\\n           which \\\n           curl \\\n    && echo \"${TIMEZONE}\" > /etc/TZ \\\n    && ln -sf /usr/share/zoneinfo/${TIMEZONE} /etc/localtime \\\n    # Network fix\n    && echo 'hosts: files mdns4_minimal [NOTFOUND=return] dns mdns4' >> /etc/nsswitch.conf\n\n# Here we install GNU libc (aka glibc) and set en_US.UTF-8 locale as default.\n\nRUN ALPINE_GLIBC_BASE_URL=\"https://github.com/sgerrand/alpine-pkg-glibc/releases/download\" && \\\n    ALPINE_GLIBC_PACKAGE_VERSION=\"2.28-r0\" && \\\n    ALPINE_GLIBC_BASE_PACKAGE_FILENAME=\"glibc-$ALPINE_GLIBC_PACKAGE_VERSION.apk\" && \\\n    ALPINE_GLIBC_BIN_PACKAGE_FILENAME=\"glibc-bin-$ALPINE_GLIBC_PACKAGE_VERSION.apk\" && \\\n    ALPINE_GLIBC_I18N_PACKAGE_FILENAME=\"glibc-i18n-$ALPINE_GLIBC_PACKAGE_VERSION.apk\" && \\\n    apk add --no-cache --virtual=.build-dependencies wget ca-certificates && \\\n    wget \\\n        \"https://alpine-pkgs.sgerrand.com/sgerrand.rsa.pub\" \\\n        -O \"/etc/apk/keys/sgerrand.rsa.pub\" && \\\n    wget \\\n        \"$ALPINE_GLIBC_BASE_URL/$ALPINE_GLIBC_PACKAGE_VERSION/$ALPINE_GLIBC_BASE_PACKAGE_FILENAME\" \\\n        \"$ALPINE_GLIBC_BASE_URL/$ALPINE_GLIBC_PACKAGE_VERSION/$ALPINE_GLIBC_BIN_PACKAGE_FILENAME\" \\\n        \"$ALPINE_GLIBC_BASE_URL/$ALPINE_GLIBC_PACKAGE_VERSION/$ALPINE_GLIBC_I18N_PACKAGE_FILENAME\" && \\\n    apk add --no-cache \\\n        \"$ALPINE_GLIBC_BASE_PACKAGE_FILENAME\" \\\n        \"$ALPINE_GLIBC_BIN_PACKAGE_FILENAME\" \\\n        \"$ALPINE_GLIBC_I18N_PACKAGE_FILENAME\" && \\\n    \\\n    rm \"/etc/apk/keys/sgerrand.rsa.pub\" && \\\n    /usr/glibc-compat/bin/localedef --force --inputfile POSIX --charmap UTF-8 \"$LANG\" || true && \\\n    echo \"export LANG=$LANG\" > /etc/profile.d/locale.sh && \\\n    \\\n    apk del glibc-i18n && \\\n    \\\n    rm \"/root/.wget-hsts\" && \\\n    apk del .build-dependencies && \\\n    rm \\\n        \"$ALPINE_GLIBC_BASE_PACKAGE_FILENAME\" \\\n        \"$ALPINE_GLIBC_BIN_PACKAGE_FILENAME\" \\\n        \"$ALPINE_GLIBC_I18N_PACKAGE_FILENAME\"\n\nENV JAVA_VERSION=8 \\\n    JAVA_UPDATE=181 \\\n    JAVA_BUILD=13 \\\n    JAVA_PATH=96a7b8442fe848ef90c96a2fad6ed6d1 \\\n    JAVA_HOME=\"/usr/lib/jvm/default-jvm\"\n\nRUN apk add --no-cache --virtual=build-dependencies wget ca-certificates unzip && \\\n    cd \"/tmp\" && \\\n    wget --header \"Cookie: oraclelicense=accept-securebackup-cookie;\" \\\n        \"https://download.oracle.com/otn-pub/java/jdk/${JAVA_VERSION}u${JAVA_UPDATE}-b${JAVA_BUILD}/${JAVA_PATH}/jdk-${JAVA_VERSION}u${JAVA_UPDATE}-linux-x64.tar.gz\" && \\\n    tar -xzf \"jdk-${JAVA_VERSION}u${JAVA_UPDATE}-linux-x64.tar.gz\" && \\\n    mkdir -p \"/usr/lib/jvm\" && \\\n    mv \"/tmp/jdk1.${JAVA_VERSION}.0_${JAVA_UPDATE}\" \"/usr/lib/jvm/java-${JAVA_VERSION}-oracle\" && \\\n    ln -s \"java-${JAVA_VERSION}-oracle\" \"$JAVA_HOME\" && \\\n    ln -s \"$JAVA_HOME/bin/\"* \"/usr/bin/\" && \\\n    rm -rf \"$JAVA_HOME/\"*src.zip && \\\n    rm -rf \"$JAVA_HOME/lib/missioncontrol\" \\\n           \"$JAVA_HOME/lib/visualvm\" \\\n           \"$JAVA_HOME/lib/\"*javafx* \\\n           \"$JAVA_HOME/jre/lib/plugin.jar\" \\\n           \"$JAVA_HOME/jre/lib/ext/jfxrt.jar\" \\\n           \"$JAVA_HOME/jre/bin/javaws\" \\\n           \"$JAVA_HOME/jre/lib/javaws.jar\" \\\n           \"$JAVA_HOME/jre/lib/desktop\" \\\n           \"$JAVA_HOME/jre/plugin\" \\\n           \"$JAVA_HOME/jre/lib/\"deploy* \\\n           \"$JAVA_HOME/jre/lib/\"*javafx* \\\n           \"$JAVA_HOME/jre/lib/\"*jfx* \\\n           \"$JAVA_HOME/jre/lib/amd64/libdecora_sse.so\" \\\n           \"$JAVA_HOME/jre/lib/amd64/\"libprism_*.so \\\n           \"$JAVA_HOME/jre/lib/amd64/libfxplugins.so\" \\\n           \"$JAVA_HOME/jre/lib/amd64/libglass.so\" \\\n           \"$JAVA_HOME/jre/lib/amd64/libgstreamer-lite.so\" \\\n           \"$JAVA_HOME/jre/lib/amd64/\"libjavafx*.so \\\n           \"$JAVA_HOME/jre/lib/amd64/\"libjfx*.so && \\\n    rm -rf \"$JAVA_HOME/jre/bin/jjs\" \\\n           \"$JAVA_HOME/jre/bin/keytool\" \\\n           \"$JAVA_HOME/jre/bin/orbd\" \\\n           \"$JAVA_HOME/jre/bin/pack200\" \\\n           \"$JAVA_HOME/jre/bin/policytool\" \\\n           \"$JAVA_HOME/jre/bin/rmid\" \\\n           \"$JAVA_HOME/jre/bin/rmiregistry\" \\\n           \"$JAVA_HOME/jre/bin/servertool\" \\\n           \"$JAVA_HOME/jre/bin/tnameserv\" \\\n           \"$JAVA_HOME/jre/bin/unpack200\" \\\n           \"$JAVA_HOME/jre/lib/ext/nashorn.jar\" \\\n           \"$JAVA_HOME/jre/lib/jfr.jar\" \\\n           \"$JAVA_HOME/jre/lib/jfr\" \\\n           \"$JAVA_HOME/jre/lib/oblique-fonts\" && \\\n    wget --header \"Cookie: oraclelicense=accept-securebackup-cookie;\" \\\n        \"https://download.oracle.com/otn-pub/java/jce/${JAVA_VERSION}/jce_policy-${JAVA_VERSION}.zip\" && \\\n    unzip -jo -d \"${JAVA_HOME}/jre/lib/security\" \"jce_policy-${JAVA_VERSION}.zip\" && \\\n    rm \"${JAVA_HOME}/jre/lib/security/README.txt\" && \\\n    apk del build-dependencies && \\\n    rm \"/tmp/\"* && rm \"jdk-${JAVA_VERSION}u${JAVA_UPDATE}-linux-x64.tar.gz\"\n\nENV SBT_VERSION 0.13.9\nENV SCALA_VERSION 2.11.9\nENV SCALA_HOME /usr/local/share/scala\nRUN export PATH=$PATH:${SCALA_HOME}/bin\n\nRUN wget https://downloads.typesafe.com/scala/${SCALA_VERSION}/scala-${SCALA_VERSION}.tgz && \\\n    wget https://repo.typesafe.com/typesafe/ivy-releases/org.scala-sbt/sbt-launch/${SBT_VERSION}/sbt-launch.jar && \\\n    mkdir -p ~/bin && touch ~/bin/sbt && \\\n    echo '#!/bin/sh' | tee -a ~/bin/sbt && \\\n    echo 'SBT_OPTS=\"-Xms512M -Xmx1536M -Xss1M -XX:+CMSClassUnloadingEnabled\"' | tee -a ~/bin/sbt && \\\n    echo 'java $SBT_OPTS -jar /sbt-launch.jar \"$@\"' | tee -a ~/bin/sbt && \\\n    chmod +x ~/bin/sbt && \\\n    ln -s ~/bin/sbt /usr/local/bin/sbt && \\\n    tar xvzf scala-${SCALA_VERSION}.tgz && \\\n    mv scala-${SCALA_VERSION} ${SCALA_HOME} && \\\n    rm -f scala-${SCALA_VERSION}.tgz\n\n# compile a non-existent project to pre-download sbt dependencies\nRUN sbt compile\n\nENV \\\n    ZK_HOSTS=localhost:2181 \\\n    KM_VERSION=1.3.3.18 \\\n    KM_REVISION=8dcdbf8fabb0001691c9b52b447b656f498b4d7b \\\n    KM_CONFIGFILE=\"conf/application.conf\"\n\nADD start-kafka-manager.sh /kafka-manager-${KM_VERSION}/start-kafka-manager.sh\n\nRUN \\\n    mkdir -p /tmp && \\\n    cd /tmp && \\\n    git clone https://github.com/yahoo/kafka-manager && \\\n    cd /tmp/kafka-manager && \\\n    git checkout ${KM_REVISION} && \\\n    echo 'scalacOptions ++= Seq(\"-Xmax-classfile-name\", \"200\")' >> build.sbt && \\\n    sbt clean dist && \\\n    unzip  -d / ./target/universal/kafka-manager-${KM_VERSION}.zip && \\\n    rm -fr /tmp/* /root/.sbt /root/.ivy2 && \\\n    chmod +x /kafka-manager-${KM_VERSION}/start-kafka-manager.sh\n\nWORKDIR /kafka-manager-${KM_VERSION}\n\nEXPOSE 9000\nENTRYPOINT [\"./start-kafka-manager.sh\"]\n"
}