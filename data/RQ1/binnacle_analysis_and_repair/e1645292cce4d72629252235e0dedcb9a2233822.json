{
  "startTime": 1674248000415,
  "endTime": 1674248002315,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 315,
        "lineEnd": 315,
        "columnStart": 4,
        "columnEnd": 54
      }
    },
    {
      "rule": "wgetUseHttpsUrl",
      "position": {
        "lineStart": 268,
        "lineEnd": 268,
        "columnStart": 4,
        "columnEnd": 55
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 337,
        "lineEnd": 337,
        "columnStart": 4,
        "columnEnd": 66
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 380,
        "lineEnd": 380,
        "columnStart": 4,
        "columnEnd": 29
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 381,
        "lineEnd": 381,
        "columnStart": 4,
        "columnEnd": 33
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 405,
        "lineEnd": 405,
        "columnStart": 4,
        "columnEnd": 180
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 141,
        "lineEnd": 141,
        "columnStart": 4,
        "columnEnd": 35
      }
    },
    {
      "rule": "aptGetInstallUseY",
      "position": {
        "lineStart": 158,
        "lineEnd": 158,
        "columnStart": 4,
        "columnEnd": 63
      }
    },
    {
      "rule": "aptGetInstallUseY",
      "position": {
        "lineStart": 397,
        "lineEnd": 397,
        "columnStart": 4,
        "columnEnd": 46
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 118,
        "lineEnd": 118,
        "columnStart": 22,
        "columnEnd": 67
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 158,
        "lineEnd": 158,
        "columnStart": 4,
        "columnEnd": 63
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 233,
        "lineEnd": 233,
        "columnStart": 22,
        "columnEnd": 67
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 270,
        "lineEnd": 270,
        "columnStart": 22,
        "columnEnd": 237
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 297,
        "lineEnd": 297,
        "columnStart": 4,
        "columnEnd": 58
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 334,
        "lineEnd": 334,
        "columnStart": 4,
        "columnEnd": 208
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 379,
        "lineEnd": 379,
        "columnStart": 4,
        "columnEnd": 81
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 397,
        "lineEnd": 397,
        "columnStart": 4,
        "columnEnd": 46
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 404,
        "lineEnd": 404,
        "columnStart": 4,
        "columnEnd": 131
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 407,
        "lineEnd": 407,
        "columnStart": 4,
        "columnEnd": 54
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 413,
        "lineEnd": 413,
        "columnStart": 5,
        "columnEnd": 133
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 158,
        "lineEnd": 158,
        "columnStart": 4,
        "columnEnd": 63
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 297,
        "lineEnd": 297,
        "columnStart": 4,
        "columnEnd": 58
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 334,
        "lineEnd": 334,
        "columnStart": 4,
        "columnEnd": 208
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 379,
        "lineEnd": 379,
        "columnStart": 4,
        "columnEnd": 81
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 397,
        "lineEnd": 397,
        "columnStart": 4,
        "columnEnd": 46
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 404,
        "lineEnd": 404,
        "columnStart": 4,
        "columnEnd": 131
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 407,
        "lineEnd": 407,
        "columnStart": 4,
        "columnEnd": 54
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 413,
        "lineEnd": 413,
        "columnStart": 5,
        "columnEnd": 133
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 158,
        "lineEnd": 158,
        "columnStart": 4,
        "columnEnd": 63
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 270,
        "lineEnd": 270,
        "columnStart": 22,
        "columnEnd": 237
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 297,
        "lineEnd": 297,
        "columnStart": 4,
        "columnEnd": 58
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 334,
        "lineEnd": 334,
        "columnStart": 4,
        "columnEnd": 208
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 379,
        "lineEnd": 379,
        "columnStart": 4,
        "columnEnd": 81
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 397,
        "lineEnd": 397,
        "columnStart": 4,
        "columnEnd": 46
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 404,
        "lineEnd": 404,
        "columnStart": 4,
        "columnEnd": 131
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 407,
        "lineEnd": 407,
        "columnStart": 4,
        "columnEnd": 54
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 413,
        "lineEnd": 413,
        "columnStart": 5,
        "columnEnd": 133
      }
    }
  ],
  "repairedSmells": [
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 158,
        "lineEnd": 158,
        "columnStart": 4,
        "columnEnd": 90
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 297,
        "lineEnd": 297,
        "columnStart": 4,
        "columnEnd": 82
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 334,
        "lineEnd": 334,
        "columnStart": 4,
        "columnEnd": 232
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 379,
        "lineEnd": 379,
        "columnStart": 4,
        "columnEnd": 105
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 397,
        "lineEnd": 397,
        "columnStart": 4,
        "columnEnd": 73
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 404,
        "lineEnd": 404,
        "columnStart": 4,
        "columnEnd": 155
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 407,
        "lineEnd": 407,
        "columnStart": 4,
        "columnEnd": 78
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 413,
        "lineEnd": 413,
        "columnStart": 4,
        "columnEnd": 154
      }
    }
  ],
  "repairedDockerfile": "#FROM ubuntu:16.04\n# FROM jfinmetrix/rhadley_ubuntu\nFROM ubuntu:trusty\n#FROM debian:stretch\n\n#FROM nvidia/cuda:8.0-devel-ubuntu16.04\n\nMAINTAINER Shlomo <shlomo@deep-ml.com>\n\nENV DEBIAN_FRONTEND noninteractive\n\nENV PATH /usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:.\n\n\nRUN rm -rf /var/lib/apt/lists/*\nRUN apt-get clean\n\n# install debian packages\nENV DEBIAN_FRONTEND noninteractive\n\n\n#Install dependencies\nRUN apt-get update && apt-get install --no-install-recommends  -y \\\n    git cmake build-essential libgoogle-glog-dev libgflags-dev libeigen3-dev libopencv-dev libcppnetlib-dev libboost-dev libboost-iostreams-dev libcurl4-openssl-dev protobuf-compiler libopenblas-dev libhdf5-dev libprotobuf-dev libleveldb-dev libsnappy-dev liblmdb-dev libutfcpp-dev wget unzip supervisor \\\n    python \\\n    python-dev \\\n    python2.7-dev \\\n    python3-dev \\\n    python-virtualenv \\\n    python-wheel \\\n\tpython-tk \\\n    pkg-config \\\n    # requirements for numpy\n    libopenblas-base \\\n    python-numpy \\\n    python-scipy \\\n    # requirements for keras\n    python-h5py \\\n    python-yaml \\\n    python-pydot \\\n    python-nose \\\n\tpython-h5py \\\n\tpython-skimage \\\n\tpython-matplotlib \\\n\tpython-pandas \\\n\tpython-sklearn \\\n\tpython-sympy \\\n\tpython-joblib \\\n        build-essential \\\n        software-properties-common \\\n        g++ \\\n        git \\\n        wget \\\n        tar \\\n        git \\\n        imagemagick \\\n        curl \\\n\t\tbc \\\n\t\thtop\\\n\t\tcurl \\\n\t\tg++ \\\n\t\tgfortran \\\n\t\tgit \\\n\t\tlibffi-dev \\\n\t\tlibfreetype6-dev \\\n\t\tlibhdf5-dev \\\n\t\tlibjpeg-dev \\\n\t\tliblcms2-dev \\\n\t\tlibopenblas-dev \\\n\t\tliblapack-dev \\\n\t\tlibssl-dev \\\n\t\tlibtiff5-dev \\\n\t\tlibwebp-dev \\\n\t\tlibzmq3-dev \\\n\t\tnano \\\n\t\tunzip \\\n\t\tvim \\\n\t\tzlib1g-dev \\\n\t\tqt5-default \\\n\t\tlibvtk6-dev \\\n\t\tzlib1g-dev \\\n\t\tlibjpeg-dev \\\n\t\tlibwebp-dev \\\n\t\tlibpng-dev \\\n\t\tlibtiff5-dev \\\n\t\tlibjasper-dev \\\n\t\tlibopenexr-dev \\\n\t\tlibgdal-dev \\\n\t\tlibdc1394-22-dev \\\n\t\tlibavcodec-dev \\\n\t\tlibavformat-dev \\\n\t\tlibswscale-dev \\\n\t\tlibtheora-dev \\\n\t\tlibvorbis-dev \\\n\t\tlibxvidcore-dev \\\n\t\tlibx264-dev \\\n\t\tyasm \\\n\t\tlibopencore-amrnb-dev \\\n\t\tlibopencore-amrwb-dev \\\n\t\tlibv4l-dev \\\n\t\tlibxine2-dev \\\n\t\tlibtbb-dev \\\n\t\tlibeigen3-dev \\\n\t\tdoxygen \\\n\t\tless \\\n        htop \\\n        procps \\\n        vim-tiny \\\n        libboost-dev \\\n        libgraphviz-dev \\\n\t\t&& \\\n\tapt-get clean && \\\n\tapt-get autoremove && \\\n\trm -rf /var/lib/apt/lists/* && \\\n# Link BLAS library to use OpenBLAS using the alternatives mechanism (https://www.scipy.org/scipylib/building/linux.html#debian-ubuntu)\n\tupdate-alternatives --set libblas.so.3 /usr/lib/openblas-base/libblas.so.3\n\n\nRUN apt-get update && apt-get install --no-install-recommends -y software-properties-common && \\\n    apt-get install -y --no-install-recommends \\\n        build-essential \\\n        clinfo \\\n        cmake \\\n        git \\\n        libboost-all-dev \\\n        libfftw3-dev \\\n        libfontconfig1-dev \\\n        libfreeimage-dev \\\n        liblapack-dev \\\n        liblapacke-dev \\\n        libopenblas-dev \\\n        ocl-icd-opencl-dev \\\n        opencl-headers \\\n        wget \\\n        xorg-dev && \\\nrm -rf /var/lib/apt/lists/*\n\n\nWORKDIR \"/root\"\nWORKDIR /root/\nRUN wget https://cmake.org/files/v3.8/cmake-3.8.0-rc4.tar.gz\nRUN tar -xvf cmake-3.8.0-rc4.tar.gz && rm cmake-3.8.0-rc4.tar.gz\nWORKDIR /root/cmake-3.8.0-rc4\nRUN /root/cmake-3.8.0-rc4/bootstrap\nRUN make\nRUN make install\n\nWORKDIR /root\n\n# Build GLFW from source\nRUN git clone https://github.com/glfw/glfw.git && \\\n    cd glfw && \\\n    mkdir build && \\\n    cd build && \\\n    cmake -DCMAKE_INSTALL_PREFIX=/usr .. && \\\n    make -j4 && \\\nmake install\n\nRUN apt-get install -y --no-install-recommends libopenblas-dev libfftw3-dev liblapacke-dev && rm -rf /var/lib/apt/lists/*;\n\nWORKDIR /root\n\nENV AF_PATH=/opt/arrayfire AF_DISABLE_GRAPHICS=1\n#ARG COMPILE_GRAPHICS=ON\n\nENV AF_PATH=/opt/arrayfire AF_DISABLE_GRAPHICS=1\n#ARG COMPILE_GRAPHICS=OFF\n\nRUN git clone --recursive https://github.com/arrayfire/arrayfire.git -b master && \\\n    cd arrayfire && mkdir build && cd build && \\\n    cmake .. -DCMAKE_INSTALL_PREFIX=/opt/arrayfire-3 \\\n             -DCMAKE_BUILD_TYPE=Release \\\n             -DBUILD_CPU=ON \\\n             -DBUILD_CUDA=OFF \\\n             -DBUILD_OPENCL=OFF \\\n             -DBUILD_UNIFIED=ON \\\n             -DBUILD_GRAPHICS=OFF \\\n             -DBUILD_NONFREE=OFF \\\n             -DBUILD_EXAMPLES=ON \\\n             -DBUILD_TEST=ON \\\n             -DBUILD_DOCS=OFF \\\n             -DINSTALL_FORGE_DEV=ON \\\n             -DUSE_FREEIMAGE_STATIC=OFF && \\\n             # -DCOMPUTES_DETECTED_LIST=\"30;35;37;50;52;60\" \\\n    make -j8 && make install && \\\n    mkdir -p ${AF_PATH} && ln -s /opt/arrayfire-3/* ${AF_PATH}/ && \\\n    echo \"${AF_PATH}/lib\" >> /etc/ld.so.conf.d/arrayfire.conf && \\\n    echo \"/usr/local/cuda/nvvm/lib64\" >> /etc/ld.so.conf.d/arrayfire.conf && \\\nldconfig\n\n#WORKDIR \"/root\"\n#WORKDIR /root/\n#RUN wget https://cmake.org/files/v3.8/cmake-3.8.0-rc4.tar.gz\n#RUN tar -xvf cmake-3.8.0-rc4.tar.gz\n#WORKDIR /root/cmake-3.8.0-rc4\n#RUN /root/cmake-3.8.0-rc4/bootstrap\n#RUN make\n#RUN make install\n\nENV PATH /usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:.\n\nWORKDIR /root\nRUN git clone https://github.com/jpbarrette/curlpp.git\nWORKDIR /root/curlpp\nRUN cmake .\nRUN make install\n\n\nWORKDIR /root\nRUN git clone https://github.com/wjakob/nanogui.git\nWORKDIR /root/nanogui\nRUN git submodule update --init --recursive\nWORKDIR /root/nanogui\nRUN cmake .\nRUN make\n\n#WORKDIR /root\n#RUN git clone https://github.com/glfw/glfw.git\n#WORKDIR /root/glfw/\n#RUN cmake .\n#RUN make\n#RUN make install\n\n\n\nWORKDIR /root/\nRUN git clone https://github.com/ocornut/imgui.git\nWORKDIR /root/imgui/examples/opengl2_example/\nRUN make\n#RUN make install\n\n\n\nRUN apt-get update && apt-get install --no-install-recommends -y software-properties-common && \\\n    apt-get install -y --no-install-recommends \\\n        build-essential \\\n        clinfo \\\n        git \\\n        libboost-all-dev \\\n        libfftw3-dev \\\n        libfontconfig1-dev \\\n        libfreeimage-dev \\\n        liblapack-dev \\\n        liblapacke-dev \\\n        libopenblas-dev \\\n        ocl-icd-opencl-dev \\\n        opencl-headers \\\n        wget \\\n        xorg-dev && \\\n    rm -rf /var/lib/apt/lists/*\n\n# Setting up symlinks for libcuda and OpenCL ICD\nRUN ln -s /usr/local/cuda/lib64/stubs/libcuda.so /usr/lib/libcuda.so.1 && \\\n    ln -s /usr/lib/libcuda.so.1 /usr/lib/libcuda.so && \\\n    mkdir -p /etc/OpenCL/vendors && \\\n    echo \"libnvidia-opencl.so.1\" > /etc/OpenCL/vendors/nvidia.icd && \\\n    echo \"/usr/local/nvidia/lib\" >> /etc/ld.so.conf.d/nvidia.conf && \\\n    echo \"/usr/local/nvidia/lib64\" >> /etc/ld.so.conf.d/nvidia.conf\nENV PATH=/usr/local/nvidia/bin:/usr/local/cuda/bin:${PATH}\n\n\n# Very complicated step, took me hours to make it works. this is required for fastparquet\n\nRUN echo \"deb http://llvm.org/apt/trusty/ llvm-toolchain-trusty main \\n\\\ndeb-src http://llvm.org/apt/trusty/ llvm-toolchain-trusty main \\n\\\ndeb http://llvm.org/apt/trusty/ llvm-toolchain-trusty-3.7 main \\n\\\ndeb-src http://llvm.org/apt/trusty/ llvm-toolchain-trusty-3.7 main\" >> /etc/apt/sources.list\n\nRUN wget -O - https://llvm.org/apt/llvm-snapshot.gpg.key | apt-key add -\n\nRUN apt-get update && apt-get install --no-install-recommends -y clang-3.7 libclang-common-3.7-dev libclang-3.7-dev libclang1-3.7 libllvm-3.7-ocaml-dev libllvm3.7 lldb-3.7 llvm-3.7 llvm-3.7-dev llvm-3.7-runtime clang-modernize-3.7 clang-format-3.7 lldb-3.7-dev && rm -rf /var/lib/apt/lists/*;\nRUN apt-get clean\nRUN rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*\n\nRUN echo \"/usr/lib/llvm-3.7/lib/\" >> /etc/ld.so.conf && ldconfig\n\n\nENV LD_LIBRARY_PATH /usr/lib/llvm-3.7/lib/\nENV LLVM_CONFIG /usr/lib/llvm-3.7/bin/llvm-config\n\nRUN apt-get update -qq \\\n && apt-get install --no-install-recommends -y \\\n    # install python 3\n    build-essential \\\n    clang-3.7 \\\n    lldb-3.7 \\\n    llvm-3.7 \\\n    python-clang-3.7 \\\n && apt-get clean \\\n && rm -rf /var/lib/apt/lists/*\n\n\nRUN echo \"deb http://ppa.launchpad.net/keithw/glfw3/ubuntu trusty main\" |  tee -a /etc/apt/sources.list.d/fillwave_ext.list\nRUN echo \"deb-src http://ppa.launchpad.net/keithw/glfw3/ubuntu trusty main\" | tee -a /etc/apt/sources.list.d/fillwave_ext.list\n\nRUN apt-get update\n\nRUN apt-get install --no-install-recommends -qqy --force-yes libglfw3 libglfw3-dev && rm -rf /var/lib/apt/lists/*;\n\n\nENV LD_LIBRARY_PATH $LD_LIBRARY_PATH:/usr/lib/llvm-3.7/lib/:/usr/local/lib/\nENV LIBRARY_PATH $LIBRARY_PATH:$LD_LIBRARY_PATH:/usr/lib/llvm-3.7/lib/:/usr/local/lib/\nENV LLVM_CONFIG /usr/lib/llvm-3.7/bin/llvm-config\n\nWORKDIR /root\nRUN git clone https://github.com/vurtun/nuklear.git\nWORKDIR /root/nuklear/demo/glfw_opengl2/\nRUN make\n\n\n####################################################PYTHON2########################################################\n# Install pip\n# pip dependencies\n\n\nRUN curl -f --silent https://bootstrap.pypa.io/get-pip.py | python\nRUN pip --no-cache-dir install setuptools==33.1.1\n# Install other useful Python packages using pip\nRUN pip --no-cache-dir install \\\n\t\tCython \\\n\t\twerkzeug pillow psycogreen flask celery redis Boto FileChunkIO nltk fuzzywuzzy rotate-backups oauthlib requests pyOpenSSL ndg-httpsclient pyasn1 \\\n\t\tpath.py \\\n\t\tPillow \\\n\t\tpygments \\\n\t\tsix \\\n\t\tsphinx \\\n\t\twheel \\\n\t\tzmq\n\n\n\nENV LD_LIBRARY_PATH /usr/lib/llvm-3.7/lib/\nENV LLVM_CONFIG /usr/lib/llvm-3.7/bin/llvm-config\n\nRUN apt-get -qyy --no-install-recommends install build-essential scons pkg-config libx11-dev libxcursor-dev libxinerama-dev libgl1-mesa-dev libglu-dev libasound2-dev libpulse-dev libfreetype6-dev libssl-dev libudev-dev libxrandr-dev && rm -rf /var/lib/apt/lists/*;\n\nRUN pip --no-cache-dir install  cython pytest pandas scikit-learn statsmodels  line-profiler psutil spectrum memory_profiler pandas joblib pyparsing pydot pydot-ng graphviz pandoc SQLAlchemy flask toolz cloudpickle python-snappy s3fs widgetsnbextension ipywidgets terminado cytoolz bcolz blosc partd backports.lzma mock cachey moto pandas_datareader\nRUN pip install --no-cache-dir -i https://pypi.anaconda.org/sklam/simple llvmlite\nRUN pip --no-cache-dir install fastparquet\n\n# Install Theano and set up Theano config (.theanorc) OpenBLAS\nRUN pip --no-cache-dir install theano && \\\n\t\\\n\techo \"[global]\\ndevice=cpu\\nfloatX=float32\\nmode=FAST_RUN \\\n\t\t\\n[lib]\\ncnmem=0.95 \\\n\t\t\\n[nvcc]\\nfastmath=True \\\n\t\t\\n[blas]\\nldflag = -L/usr/lib/openblas-base -lopenblas \\\n\t\t\\n[DebugMode]\\ncheck_finite=1\" \\\n\t> /root/.theanorc\n\n\n\n# Install BAYESIAN FRAMEWORKS\nRUN pip --no-cache-dir install  --upgrade pymc3 pystan edward watermark xgboost bokeh seaborn mmh3 tensorflow theano\n\nENV KERAS_VERSION=1.2.2\nENV KERAS_BACKEND=tensorflow\nRUN pip --no-cache-dir install --no-dependencies git+https://github.com/fchollet/keras.git@${KERAS_VERSION}\n\n####################################################PYTHON2########################################################\n\n\n# configure console\nRUN echo 'alias ll=\"ls --color=auto -lA\"' >> /root/.bashrc \\\n && echo '\"\\e[5~\": history-search-backward' >> /root/.inputrc \\\n && echo '\"\\e[6~\": history-search-forward' >> /root/.inputrc\n\n# RUN which python2.7 /usr/bin/python2.7\nRUN ls -la /usr/bin/python2.7\n\nRUN ln -s /opt/python2.7/lib/python2.7/config/libpython2.7.a /usr/local/lib/\n\nENV LDFLAGS=\"-L/opt/python2.7/lib:usr/lib/openblas-base/\"\nENV PATH /usr/lib/openblas-base/:/usr/lib/openblas-base/bin/:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:.\n\n\n\n# Set up notebook config\n\nRUN apt-get -qyy --no-install-recommends install python2.7 python-pip python-dev ipython ipython-notebook && rm -rf /var/lib/apt/lists/*;\nRUN pip install --no-cache-dir --upgrade pip\nRUN pip install --no-cache-dir --upgrade ipython\nRUN pip --no-cache-dir install jupyter\nRUN python -m ipykernel.kernelspec\nRUN python2 -m ipykernel.kernelspec --user\nRUN jupyter notebook --allow-root --generate-config -y\n\nCOPY jupyter_notebook_config.py /root/.jupyter/\n\n# Jupyter has issues with being run directly: https://github.com/ipython/ipython/issues/7062\nCOPY run_jupyter.sh /root/\n\nWORKDIR \"/root/\"\nRUN chmod +x run_jupyter.sh\n\nRUN jupyter nbextension enable --py --sys-prefix widgetsnbextension\n\nRUN apt-get install -y --no-install-recommends software-properties-common && rm -rf /var/lib/apt/lists/*;\nRUN add-apt-repository ppa:george-edison55/cmake-3.x\nRUN apt-get update\n\nENV LD_LIBRARY_PATH=/usr/local/lib:/usr/local/lib/root\n\n\nRUN apt-get install --no-install-recommends -qqy libsasl2-dev libldap2-dev libssl-dev libpq-dev postgresql-9.3 postgresql-client-9.3 postgresql-contrib-9.3 && rm -rf /var/lib/apt/lists/*;\nRUN pip install --no-cache-dir superset pyhive mysqlclient skflow bayesian-optimization scikit-neuralnetwork simplejson ujson bson pyyaml python-ldap superset pyhive psycopg2 SQLAlchemy arrayfire\n\nRUN apt-get -qqy --no-install-recommends install postgresql postgresql-contrib && rm -rf /var/lib/apt/lists/*;\n\n#Run pip install http://h2o-release.s3.amazonaws.com/h2o/rel-turing/10/Python/h2o-3.10.0.10-py2.py3-none-any.whl\n\n# Expose Ports for TensorBoard (6006), Ipython (8888) drill\nEXPOSE 6006 3838 8787 8888 8786 9786 8788 5432\nRUN apt-get -qqy --no-install-recommends install mesa-common-dev freeglut3-dev libglfw-dev libglm-dev libglew1.6-dev xorg-dev libglu1-mesa-dev libsdl2-dev && rm -rf /var/lib/apt/lists/*;\n\n\nUSER postgres\n# Create a PostgreSQL role named ``docker`` with ``docker`` as the password and\n# then create a database `docker` owned by the ``docker`` role.\n# Note: here we use ``&&\\`` to run commands one after the other - the ``\\``\n#       allows the RUN command to span multiple lines.\nRUN    /etc/init.d/postgresql start &&\\\n    psql --command \"CREATE USER docker WITH SUPERUSER PASSWORD 'docker';\" &&\\\n    createdb -O docker docker\n\n# Adjust PostgreSQL configuration so that remote connections to the\n# database are possible.\nRUN echo \"host all  all    0.0.0.0/0  md5\" >> /etc/postgresql/9.3/main/pg_hba.conf\n\n# And add ``listen_addresses`` to ``/etc/postgresql/9.3/main/postgresql.conf``\nRUN echo \"listen_addresses='*'\" >> /etc/postgresql/9.3/main/postgresql.conf\n\n\n# Add VOLUMEs to allow backup of config, logs and databases\nVOLUME  [\"/etc/postgresql\", \"/var/log/postgresql\", \"/var/lib/postgresql\"]\n\n# Set the default command to run when starting the container\nCMD [\"/usr/lib/postgresql/9.3/bin/postgres\", \"-D\", \"/var/lib/postgresql/9.3/main\", \"-c\", \"config_file=/etc/postgresql/9.3/main/postgresql.conf\"]\n\nUSER root\n"
}