{
  "startTime": 1674236849779,
  "endTime": 1674236850036,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 26,
        "lineEnd": 26,
        "columnStart": 4,
        "columnEnd": 97
      }
    },
    {
      "rule": "curlUseHttpsUrl",
      "position": {
        "lineStart": 26,
        "lineEnd": 26,
        "columnStart": 4,
        "columnEnd": 97
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 2,
        "lineEnd": 2,
        "columnStart": 22,
        "columnEnd": 64
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM java:8-jdk\n\nRUN apt-get update && apt-get install --no-install-recommends -y wget git curl maven zip && rm -rf /var/lib/apt/lists/*\n\nENV JENKINS_HOME /var/jenkins_home\n\n# Jenkins is ran with user `jenkins`, uid = 1000\n# If you bind mount a volume from host/vloume from a data container,\n# ensure you use same uid\nRUN useradd -d \"$JENKINS_HOME\" -u 1000 -m -s /bin/bash jenkins\n\n# Jenkins home directoy is a volume, so configuration and build history\n# can be persisted and survive image upgrades\nVOLUME /var/jenkins_home\n\n# `/usr/share/jenkins/ref/` contains all reference configuration we want\n# to set on a fresh new installation. Use it to bundle additional plugins\n# or config file with your custom jenkins Docker image.\nRUN mkdir -p /usr/share/jenkins/ref/init.groovy.d\n\nCOPY init.groovy /usr/share/jenkins/ref/init.groovy.d/tcp-slave-angent-port.groovy\n\nENV JENKINS_VERSION 1.601\n\n# could use ADD but this one does not check Last-Modified header\n# see https://github.com/docker/docker/issues/8331\nRUN curl -f -L https://mirrors.jenkins-ci.org/war/1.601/jenkins.war -o /usr/share/jenkins/jenkins.war\n\nENV JENKINS_UC https://updates.jenkins-ci.org\nRUN chown -R jenkins \"$JENKINS_HOME\" /usr/share/jenkins/ref\n\n# for main web interface:\nEXPOSE 8080\n\n# will be used by attached slave agents:\nEXPOSE 50000\n\nCOPY jenkins.sh /usr/local/bin/jenkins.sh\n\nENTRYPOINT [\"/usr/local/bin/jenkins.sh\"]\n\n# from a derived Dockerfile, can use `RUN plugin.sh active.txt` to setup /usr/share/jenkins/ref/plugins from a support bundle\nCOPY plugins.sh /usr/local/bin/plugins.sh\nCOPY plugins.txt /usr/share/jenkins/ref/plugins.txt\nRUN plugins.sh /usr/share/jenkins/ref/plugins.txt\n\n# Here comes our special scrum-for-developers-training configuration\nCOPY settings.xml /usr/share/jenkins/ref/.m2/settings.xml\nCOPY config.xml /usr/share/jenkins/ref/config.xml\nCOPY org.jfrog.hudson.ArtifactoryBuilder.xml /usr/share/jenkins/ref/org.jfrog.hudson.ArtifactoryBuilder.xml\nCOPY hudson.tasks.Maven.xml /usr/share/jenkins/ref/hudson.tasks.Maven.xml\nADD jobs /usr/share/jenkins/ref/jobs\n\nENV JENKINS_OPTS --prefix=/jenkins\n\nUSER jenkins\n"
}