{
  "startTime": 1674241002511,
  "endTime": 1674241002866,
  "originalSmells": [
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 16,
        "lineEnd": 17,
        "columnStart": 22,
        "columnEnd": 8
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 25,
        "lineEnd": 80,
        "columnStart": 22,
        "columnEnd": 14
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 107,
        "lineEnd": 113,
        "columnStart": 22,
        "columnEnd": 16
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 16,
        "lineEnd": 17,
        "columnStart": 22,
        "columnEnd": 8
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM ubuntu:18.04\n\nMAINTAINER lodemo\n\nARG TENSORFLOW_VERSION=1.0\nARG TENSORFLOW_ARCH=cpu\nARG OPENCV_VERSION=2.4.13.6\n\n\nENV TZ=Europe/London\n\n\n\nRUN apt-get update\n\nRUN apt-get update && apt-get install --no-install-recommends -y \\\n\t\ttzdata && rm -rf /var/lib/apt/lists/*;\n\n\nRUN ln -fs /usr/share/zoneinfo/$TZ /etc/localtime\nRUN rm /etc/localtime\nRUN dpkg-reconfigure -f noninteractive tzdata\n\n\nRUN apt-get update && apt-get install --no-install-recommends -y \\\n\t\tbc \\\n\t\tbuild-essential \\\n\t\tcmake \\\n\t\tcurl \\\n        pkg-config \\\n\t\tg++ \\\n\t\tgfortran \\\n\t\tgit \\\n        python2.7 \\\n        python-pip \\\n\t\tlibffi-dev \\\n\t\tlibfreetype6-dev \\\n\t\tlibhdf5-dev \\\n\t\tlibjpeg-dev \\\n\t\tliblcms2-dev \\\n\t\tlibopenblas-dev \\\n\t\tliblapack-dev \\\n\t\tlibpng-dev \\\n\t\tlibssl-dev \\\n\t\tlibtiff5-dev \\\n\t\tlibwebp-dev \\\n\t\tlibzmq3-dev \\\n\t\tnano \\\n\t\tpython-dev \\\n\t\tsoftware-properties-common \\\n\t\tunzip \\\n\t\tvim \\\n\t\twget \\\n\t\tzlib1g-dev \\\n\t\tqt5-default \\\n\t\tlibvtk6-dev \\\n\t\tzlib1g-dev \\\n\t\tlibjpeg-dev \\\n\t\tlibwebp-dev \\\n\t\tlibpng-dev \\\n\t\tlibtiff5-dev \\\n\t\tlibopenexr-dev \\\n\t\tlibgdal-dev \\\n\t\tlibdc1394-22-dev \\\n\t\tlibavcodec-dev \\\n\t\tlibavformat-dev \\\n\t\tlibswscale-dev \\\n\t\tlibtheora-dev \\\n\t\tlibvorbis-dev \\\n\t\tlibxvidcore-dev \\\n\t\tlibx264-dev \\\n\t\tyasm \\\n\t\tlibopencore-amrnb-dev \\\n\t\tlibopencore-amrwb-dev \\\n\t\tlibv4l-dev \\\n\t\tlibxine2-dev \\\n\t\tlibtbb-dev \\\n\t\tlibeigen3-dev \\\n\t\tpython-tk \\\n        ffmpeg \\\n        && \\\n\tapt-get clean && \\\n\tapt-get autoremove && \\\n\trm -rf /var/lib/apt/lists/*\n\n\n# Custom compilation of OpenBLAS with OpenMP enabled\n# (linear algebra is limited to single core in debs)\n# NUM_THREADS must be set otherwise docker hub build\n# non-parallel version.\nRUN git clone https://github.com/xianyi/OpenBLAS.git /tmp/OpenBLAS \\\n    && cd /tmp/OpenBLAS/ \\\n    && make DYNAMIC_ARCH=1 NO_AFFINITY=1 USE_OPENMP=1 NUM_THREADS=32 \\\n    && make DYNAMIC_ARCH=1 NO_AFFINITY=1 USE_OPENMP=1 NUM_THREADS=32 install \\\n    && rm -rf /tmp/OpenBLAS\n\n\n# Link BLAS library to use OpenBLAS using the alternatives mechanism (https://www.scipy.org/scipylib/building/linux.html#debian-ubuntu)\n#RUN update-alternatives --set libblas.so.3 /usr/lib/openblas-base/libblas.so.3\n#RUN update-alternatives --list libblas.so.3 /usr/lib/atlas-base/atlas/libblas.so.3 /usr/lib/libblas/libblas.so.3 /usr/lib/openblas-base/libopenblas.so.0\nRUN update-alternatives --install /usr/lib/libblas.so libblas.so /opt/OpenBLAS/lib/libopenblas.so 1000\nRUN update-alternatives --install /usr/lib/libblas.so.3 libblas.so.3 /opt/OpenBLAS/lib/libopenblas.so 1000\nRUN update-alternatives --install /usr/lib/liblapack.so liblapack.so /opt/OpenBLAS/lib/libopenblas.so 1000\nRUN update-alternatives --install /usr/lib/liblapack.so.3 liblapack.so.3 /opt/OpenBLAS/lib/libopenblas.so 1000\nRUN ldconfig\n\nRUN apt-get update && apt-get install --no-install-recommends -y \\\n\t\tpython-nose \\\n\t\tpython-h5py \\\n\t\tpython-skimage \\\n        python-protobuf \\\n        python-openssl \\\n\t\tpython-mysqldb \\\n        && \\\n\tapt-get clean && \\\n\tapt-get autoremove && \\\n\trm -rf /var/lib/apt/lists/*\n\n\nRUN pip --no-cache-dir install Pillow\n\n# Install TensorFlow\n#RUN pip --no-cache-dir install \\\n#\thttps://storage.googleapis.com/tensorflow/linux/${TENSORFLOW_ARCH}/tensorflow-${TENSORFLOW_VERSION}-cp27-none-linux_x86_64.whl\n\n\n# Install OpenCV\nRUN cd /opt && \\\n    wget https://github.com/opencv/opencv/archive/${OPENCV_VERSION}.zip && \\\n    unzip ${OPENCV_VERSION}.zip && \\\n    mkdir -p /opt/opencv-${OPENCV_VERSION}/build && \\\n    cd /opt/opencv-${OPENCV_VERSION}/build && \\\n    cmake \\\n    -D CMAKE_BUILD_TYPE=RELEASE \\\n    -D CMAKE_INSTALL_PREFIX=/usr/local \\\n    -D WITH_FFMPEG=ON \\\n    -D WITH_IPP=NO \\\n    -D WITH_OPENEXR=NO \\\n    -D WITH_TBB=YES \\\n    -D BUILD_EXAMPLES=NO \\\n    -D BUILD_ANDROID_EXAMPLES=NO \\\n    -D INSTALL_PYTHON_EXAMPLES=NO \\\n    -D BUILD_DOCS=NO \\\n    -D BUILD_opencv_python2=ON \\\n    -D BUILD_opencv_python3=NO \\\n    .. && \\\n    make VERBOSE=1 && \\\n    make -j${CPUCOUNT} && \\\n    make install && \\\n    rm -rf /opt/opencv-${OPENCV_VERSION}\n\n\n\nWORKDIR /catana\n\n\nCOPY . /catana\n\nRUN pip --no-cache-dir install -r requirements.txt\n\nRUN pip --no-cache-dir install numpy -I\n\n\n#RUN pip --no-cache-dir install -r ./src/face_recognition/facenet/requirements.txt\n"
}