{
  "startTime": 1674250823083,
  "endTime": 1674250823603,
  "originalSmells": [
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 104,
        "lineEnd": 104,
        "columnStart": 4,
        "columnEnd": 20
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 87,
        "lineEnd": 87,
        "columnStart": 28,
        "columnEnd": 58
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 88,
        "lineEnd": 88,
        "columnStart": 4,
        "columnEnd": 26
      }
    },
    {
      "rule": "yumInstallRmVarCacheYum",
      "position": {
        "lineStart": 4,
        "lineEnd": 4,
        "columnStart": 21,
        "columnEnd": 48
      }
    },
    {
      "rule": "yumInstallRmVarCacheYum",
      "position": {
        "lineStart": 7,
        "lineEnd": 73,
        "columnStart": 4,
        "columnEnd": 11
      }
    },
    {
      "rule": "yumInstallRmVarCacheYum",
      "position": {
        "lineStart": 75,
        "lineEnd": 75,
        "columnStart": 4,
        "columnEnd": 92
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM centos:7\n\nARG UID=0\n\nRUN yum -y update && yum -y install epel-release && rm -rf /var/cache/yum\n\n# sync with installer/roles/image_build/templates/Dockerfile.j2\nRUN yum -y install acl \\\n  alsa-lib \\\n  ansible \\\n  atk \\\n  bubblewrap \\\n  cups-libs \\\n  curl \\\n  cyrus-sasl \\\n  cyrus-sasl-devel \\\n  gcc \\\n  gcc-c++ \\\n  GConf2 \\\n  git \\\n  gtk3 \\\n  ipa-gothic-fonts \\\n  krb5-devel \\\n  krb5-libs \\\n  krb5-workstation \\\n  libcurl-devel \\\n  libffi-devel \\\n  libselinux-python \\\n  libstdc++.so.6 \\\n  libtool-ltdl-devel \\\n  libXcomposite \\\n  libXcursor \\\n  libXdamage \\\n  libXext \\\n  libXi \\\n  libxml2-devel \\\n  libXrandr \\\n  libXScrnSaver \\\n  libxslt-devel \\\n  libXtst \\\n  make \\\n  mercurial \\\n  mg \\\n  nginx \\\n  nodejs \\\n  openldap-devel \\\n  openssh-server \\\n  postgresql-devel \\\n  python-devel \\\n  python-pip \\\n  python-psutil \\\n  python-psycopg2 \\\n  python-setuptools \\\n  python36-devel \\\n  python36-setuptools \\\n  rsync \\\n  setools-libs \\\n  subversion \\\n  sudo \\\n  swig \\\n  tmux \\\n  unzip \\\n  vim \\\n  xmlsec1 \\\n  xmlsec1-devel \\\n  xmlsec1-openssl \\\n  xmlsec1-openssl-devel \\\n  xorg-x11-fonts-100dpi \\\n  xorg-x11-fonts-75dpi \\\n  xorg-x11-fonts-cyrillic \\\n  xorg-x11-fonts-misc \\\n  xorg-x11-fonts-Type1 \\\n  xorg-x11-utils \\\n  yum-utils && rm -rf /var/cache/yum\n\nRUN yum install -y https://github.com/krallin/tini/releases/download/v0.18.0/tini_0.18.0.rpm && rm -rf /var/cache/yum\n\nRUN /usr/bin/ssh-keygen -q -t rsa -N \"\" -f /root/.ssh/id_rsa\nRUN mkdir -p /data/db\n\nADD tools/docker-compose/awx.egg-link /tmp/awx.egg-link\nADD tools/docker-compose/awx-manage /usr/local/bin/awx-manage\nADD tools/docker-compose/awx.egg-info /tmp/awx.egg-info\n\nRUN openssl req -nodes -newkey rsa:2048 -keyout /etc/nginx/nginx.key -out /etc/nginx/nginx.csr -subj \"/C=US/ST=North Carolina/L=Durham/O=Ansible/OU=AWX Development/CN=awx.localhost\"\nRUN openssl x509 -req -days 365 -in /etc/nginx/nginx.csr -signkey /etc/nginx/nginx.key -out /etc/nginx/nginx.crt\n\nRUN python3 -m ensurepip && pip3 install --no-cache-dir virtualenv flake8\nRUN pip install --no-cache-dir supervisor\n\nADD Makefile /tmp/Makefile\nRUN mkdir /tmp/requirements\nADD requirements/requirements.txt \\\n  requirements/requirements_git.txt \\\n  requirements/requirements_ansible.txt \\\n  requirements/requirements_ansible_git.txt \\\n  requirements/requirements_dev.txt \\\n  requirements/requirements_ansible_uninstall.txt \\\n  requirements/requirements_tower_uninstall.txt \\\n  /tmp/requirements/\nRUN mkdir -p /venv && chmod g+w /venv\nRUN cd /tmp && VENV_BASE=\"/venv\" make requirements_dev\n\n# Use the distro provided npm to bootstrap our required version of node\nRUN npm install -g n && npm cache clean --force;\nRUN n 10.15.0\n\nRUN yum -y remove cyrus-sasl-devel \\\n  gcc \\\n  gcc-c++ \\\n  krb5-devel \\\n  libtool-ltdl-devel \\\n  libxml2-devel \\\n  libxslt-devel \\\n  openldap-devel \\\n  postgresql-devel \\\n  python-devel \\\n  python36-devel \\\n  nodejs \\\n  xmlsec1-devel \\\n  xmlsec1-openssl-devel\n\nRUN yum -y clean all\n\nRUN rm -rf /root/.cache\n\nRUN localedef -c -i en_US -f UTF-8 en_US.UTF-8\nENV LANG en_US.UTF-8\nENV LANGUAGE en_US:en\nENV LC_ALL en_US.UTF-8\n\nADD tools/docker-compose/nginx.conf /etc/nginx/nginx.conf\nADD tools/docker-compose/nginx.vh.default.conf /etc/nginx/conf.d/nginx.vh.default.conf\nADD tools/docker-compose/start_development.sh /start_development.sh\nADD tools/docker-compose/start_tests.sh /start_tests.sh\nADD tools/docker-compose/bootstrap_development.sh /bootstrap_development.sh\n\nEXPOSE 8043 8013 8080 22\n\nADD tools/docker-compose/entrypoint.sh /\nENTRYPOINT [\"/entrypoint.sh\"]\nCMD [\"/bin/bash\"]\n\n# Pre-create things that we need to write to\nRUN for dir in /var/lib/awx/ /var/log/tower/ /projects /.ansible /var/log/nginx /var/lib/nginx /.local; \\\n  do mkdir -p $dir; chmod -R g+rwx $dir; chgrp -R root $dir; done\n\nRUN for file in /etc/passwd /etc/supervisord.conf \\\n  /venv/awx/lib/python3.6/site-packages/awx.egg-link /var/run/nginx.pid; \\\n  do touch $file; chmod -R g+rwx $file; chgrp -R root $file; done\n\nENV PATH=/usr/local/n/versions/node/10.15.0/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin\n"
}