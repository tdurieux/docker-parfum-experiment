{
  "startTime": 1674248025873,
  "endTime": 1674248025964,
  "originalSmells": [
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 7,
        "lineEnd": 7,
        "columnStart": 15,
        "columnEnd": 26
      }
    },
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 17,
        "lineEnd": 17,
        "columnStart": 4,
        "columnEnd": 22
      }
    },
    {
      "rule": "mkdirUsrSrcThenRemove",
      "position": {
        "lineStart": 8,
        "lineEnd": 8,
        "columnStart": 4,
        "columnEnd": 37
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM node:8.9.1\n\nMAINTAINER yvanwang googolewang@gmail.com\n\n# use changes to package.json to force Docker not to use the cache\n# when we change our application's nodejs dependencies:\nCOPY package*.json /tmp/\nRUN cd /tmp && npm install && npm cache clean --force;\nRUN mkdir -p /usr/src/recatch-service && rm -rf /usr/src/recatch-service\n\n# From here we load our application's code in, therefore the previous docker\n# \"layer\" thats been cached will be used if possible\nWORKDIR /usr/src/recatch-service\nCOPY . .\nRUN cp -a /tmp/node_modules /usr/src/recatch-service && npm run build\n\n#RUN npm install -g cross-env pm2-docker\nRUN npm install pm2 -g && npm cache clean --force;\n\nEXPOSE 8082\n\n#RUN container run command\nCMD [\"npm\", \"run\", \"start:docker\"]"
}