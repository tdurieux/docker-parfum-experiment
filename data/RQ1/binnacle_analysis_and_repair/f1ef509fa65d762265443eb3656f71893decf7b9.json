{
  "startTime": 1674243646697,
  "endTime": 1674243646863,
  "originalSmells": [
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 29,
        "lineEnd": 30,
        "columnStart": 4,
        "columnEnd": 30
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 33,
        "lineEnd": 68,
        "columnStart": 4,
        "columnEnd": 9
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 29,
        "lineEnd": 30,
        "columnStart": 4,
        "columnEnd": 30
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 33,
        "lineEnd": 68,
        "columnStart": 4,
        "columnEnd": 9
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 29,
        "lineEnd": 30,
        "columnStart": 4,
        "columnEnd": 30
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 33,
        "lineEnd": 68,
        "columnStart": 4,
        "columnEnd": 9
      }
    }
  ],
  "repairedSmells": [
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 29,
        "lineEnd": 30,
        "columnStart": 4,
        "columnEnd": 30
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 33,
        "lineEnd": 68,
        "columnStart": 4,
        "columnEnd": 9
      }
    }
  ],
  "repairedDockerfile": "# This file describes how to build node-opencv into a runnable linux container with all dependencies installed\n# To build:\n# 1) Install docker (http://docker.io)\n# 2) Build: wget https://raw.github.com/dotcloud/docker/v0.1.6/contrib/docker-build/docker-build && python docker-build $USER/node-opencv < Dockerfile\n# 3) Test: docker run $USER/node-opencv node -e \"console.log(require('opencv').version)\"\n#\n# VERSION\t\t0.3\n# DOCKER-VERSION\t8.1.2\n\n\n# update to 14.04\nFROM\tubuntu:14.04\n\n# listing myself as maintainer of _this_ Dockerfile, though I am not the author of the install script (credit to http://rodrigoberriel.com/)\nMAINTAINER borromeotlhs@gmail.com\n\n# run Rodrigo Berriel’s script for installing opencv3 on Ubuntu 14.04\n# I’ll convert this into a full Dockerfile later, once I see if it works\n#COPY ./install-opencv3.sh /tmp/\n\n# this is needed as libfaac-dev comes from multiverse, according to:\n# http://superuser.com/questions/467774/how-to-install-libfaac-dev\nRUN echo \"deb http://us.archive.ubuntu.com/ubuntu/ precise multiverse\\n\\\ndeb-src http://us.archive.ubuntu.com/ubuntu/ precise multiverse\\n\\\ndeb http://us.archive.ubuntu.com/ubuntu/ precise-updates multiverse\\n\\\ndeb-src http://us.archive.ubuntu.com/ubuntu/ precise-updates multiverse\\n\"\\\n>> /etc/apt/sources.list\n\n\nRUN DEBIAN_FRONTEND=noninteractive apt-get --no-install-recommends install -y \\\n    software-properties-common && rm -rf /var/lib/apt/lists/*;\nRUN add-apt-repository ppa:george-edison55/cmake-3.x\nRUN apt-get update -qq\nRUN DEBIAN_FRONTEND=noninteractive apt-get --no-install-recommends install -y \\\ncurl \\\ncmake \\\nwget \\\nunzip \\\nlibopencv-dev \\\nbuild-essential \\\ngit \\\nlibgtk2.0-dev \\\npkg-config \\\npython-dev \\\npython-numpy \\\nlibdc1394-22 \\\nlibdc1394-22-dev \\\nlibjpeg-dev \\\nlibpng12-dev \\\nlibtiff4-dev \\\nlibjasper-dev \\\nlibavcodec-dev \\\nlibavformat-dev \\\nlibswscale-dev \\\nlibxine-dev \\\nlibgstreamer0.10-dev \\\nlibgstreamer-plugins-base0.10-dev \\\nlibv4l-dev \\\nlibtbb-dev \\\nlibqt4-dev \\\nlibfaac-dev \\\nlibmp3lame-dev \\\nlibopencore-amrnb-dev \\\nlibopencore-amrwb-dev \\\nlibtheora-dev \\\nlibvorbis-dev \\\nlibxvidcore-dev \\\nx264 \\\nv4l-utils && rm -rf /var/lib/apt/lists/*;\n\nRUN mkdir opencv\nWORKDIR opencv\n\nRUN wget https://github.com/Itseez/opencv/archive/3.0.0.zip -O opencv-3.0.0.zip\nRUN unzip opencv-3.0.0.zip\nRUN mkdir opencv-3.0.0/build\nWORKDIR opencv-3.0.0/build\n\nRUN cmake -D CMAKE_BUILD_TYPE=RELEASE -D CMAKE_INSTALL_PREFIX=/usr/local -D WITH_TBB=ON -D BUILD_NEW_PYTHON_SUPPORT=ON -D WITH_V4L=ON -D WITH_OPENGL=ON ..\n\nRUN make -j $(nproc) && make install\nRUN echo \"/usr/local/lib\" > /etc/ld.so.conf.d/opencv.conf\nRUN ldconfig\n"
}