{
  "startTime": 1674241232270,
  "endTime": 1674241232450,
  "originalSmells": [
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 47,
        "lineEnd": 47,
        "columnStart": 4,
        "columnEnd": 24
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 13,
        "lineEnd": 16,
        "columnStart": 4,
        "columnEnd": 12
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 45,
        "lineEnd": 45,
        "columnStart": 4,
        "columnEnd": 33
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 59,
        "lineEnd": 59,
        "columnStart": 4,
        "columnEnd": 48
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 59,
        "lineEnd": 59,
        "columnStart": 4,
        "columnEnd": 48
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 13,
        "lineEnd": 16,
        "columnStart": 4,
        "columnEnd": 12
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 45,
        "lineEnd": 45,
        "columnStart": 4,
        "columnEnd": 33
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 59,
        "lineEnd": 59,
        "columnStart": 4,
        "columnEnd": 48
      }
    }
  ],
  "repairedSmells": [
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 58,
        "lineEnd": 58,
        "columnStart": 4,
        "columnEnd": 72
      }
    }
  ],
  "repairedDockerfile": "#\n#--------------------------------------------------------------------------\n# Image Setup\n#--------------------------------------------------------------------------\n#\n\nFROM ojhaujjwal/magento-php-cli:latest\n\nARG MAGENTO_ROOT=/var/www/magento\nENV MAGENTO_ROOT ${MAGENTO_ROOT}\n\n# Run utils\nRUN apt-get update && \\\n    apt-get install --no-install-recommends -y --force-yes \\\n        xz-utils \\\n        git \\\n        curl \\\n    && apt-get clean && rm -rf /var/lib/apt/lists/*;\n\n#\n#--------------------------------------------------------------------------\n# Optional Software's Installation\n#--------------------------------------------------------------------------\n#\n# Optional Software's will only be installed if you set them to `true`\n# in the `docker-compose.yml` before the build.\n#\n#   - INSTALL_XDEBUG=           false\n#   - COMPOSER_GLOBAL_INSTALL=  false\n#   - INSTALL_NODE=             false\n#\n\n#####################################\n# Nodejs:\n#####################################\n\n# Check if Nodejs needs to be installed\nARG INSTALL_NODE=true\nENV INSTALL_NODE ${INSTALL_NODE}\n\n# Install node js from apt\n# when installing from a package manager the bin is called nodejs\n# so we need to symlink\nRUN if [ ${INSTALL_NODE} = true ]; then \\\n    apt-get update && \\\n    apt-get install --no-install-recommends -y nodejs npm && \\\n    ln -s /usr/bin/nodejs /usr/bin/node && \\\n    npm install -g bower \\\n; npm cache clean --force; rm -rf /var/lib/apt/lists/*; fi\n\n#####################################\n# xDebug:\n#####################################\n\n# Check if xDebug needs to be installed\nARG INSTALL_XDEBUG=true\nENV INSTALL_XDEBUG ${INSTALL_XDEBUG}\nRUN if [ ${INSTALL_XDEBUG} = true ]; then \\\n    apt-get install --no-install-recommends -y --force-yes php7.0-xdebug && \\\n    sed -i 's/^/;/g' /etc/php/7.0/cli/conf.d/20-xdebug.ini && \\\n    echo \"alias phpunit='php -dzend_extension=xdebug.so ${MAGENTO_ROOT}/vendor/bin/phpunit'\" >> ~/.bashrc \\\n; rm -rf /var/lib/apt/lists/*; fi\n\n\n#####################################\n# Non-Root User:\n#####################################\n\n# Add a non-root user to prevent files being created with root permissions on host machine.\nARG PUID=1000\nARG PGID=1000\nRUN groupadd -g $PGID magento && \\\n    useradd -u $PUID -g magento -m magento  \n\n#####################################\n# Composer:\n#####################################\n\n# Setup COMPOSER_HOME directory and Add the composer.json\nCOPY ./composer.json /home/magento/.composer/composer.json\n# Fix root ownership of config.json and auth.json\nENV COMPOSER_HOME=/home/magento/.composer/\n\n# Make sure that ~/.composer belongs to magento\nRUN chown -R magento:magento /home/magento/.composer\nUSER magento\n\n# Check if global install need to be ran\nARG COMPOSER_GLOBAL_INSTALL=true\nENV COMPOSER_GLOBAL_INSTALL ${COMPOSER_GLOBAL_INSTALL}\nRUN if [ ${COMPOSER_GLOBAL_INSTALL} = true ]; then \\\n    # run the install\n    composer global install \\\n;fi\n\n\n\n#PHP.ini settings\nADD ./magento.ini /etc/php/7.0/cli/conf.d\n\nUSER root\n\n# Add crontab file in the cron directory\nADD magento-cron /var/tmp/magento-cron\n\n\n# Check if cron needs to be run\nARG CRON\nENV CRON ${CRON}\nRUN if [ ${CRON} = true ]; then \\\n    cp /var/tmp/magento-cron /etc/cron.d/ && \\\n    sed -i \"s%MAGENTO_ROOT%${MAGENTO_ROOT}%g\" /etc/cron.d/magento-cron && \\\n    chmod 600 /etc/cron.d/magento-cron \\\n;fi\n\n#Add container startup script\nRUN mkdir -p /etc/my_init.d\nADD bin/docker-environment /etc/my_init.d/docker-environment\n\n# Magento commands:\nCOPY bin/* /usr/local/bin/\n\n#\n#--------------------------------------------------------------------------\n# Final Touch\n#--------------------------------------------------------------------------\n#\n\n# Clean up\nRUN apt-get clean && \\\n    rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*\n\nENTRYPOINT [\"/usr/local/bin/docker-environment\"]\nCMD [\"/sbin/my_init\"]\n\n# Set default work directory\nWORKDIR ${MAGENTO_ROOT}\n"
}