{
  "startTime": 1674240809648,
  "endTime": 1674240809818,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 53,
        "lineEnd": 53,
        "columnStart": 4,
        "columnEnd": 90
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 57,
        "lineEnd": 57,
        "columnStart": 4,
        "columnEnd": 86
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 38,
        "lineEnd": 39,
        "columnStart": 4,
        "columnEnd": 65
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 24,
        "lineEnd": 25,
        "columnStart": 34,
        "columnEnd": 11
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 32,
        "lineEnd": 34,
        "columnStart": 34,
        "columnEnd": 21
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 38,
        "lineEnd": 39,
        "columnStart": 4,
        "columnEnd": 65
      }
    }
  ],
  "repairedSmells": [
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 38,
        "lineEnd": 39,
        "columnStart": 4,
        "columnEnd": 65
      }
    }
  ],
  "repairedDockerfile": "# Docker image for building Android APKs via buildozer\n# Build with:\n# docker build --tag=pywallet-android --file=dockerfiles/Dockerfile-android .\n# Run with:\n# docker run pywallet-android /bin/sh -c 'buildozer android debug'\n# Or using the entry point shortcut:\n# docker run pywallet-android 'buildozer android debug'\n# Or for interactive shell:\n# docker run -it --rm pywallet-android\nFROM ubuntu:18.04\n\nENV USER=\"user\"\nENV HOME_DIR=\"/home/${USER}\"\nENV WORK_DIR=\"${HOME_DIR}\" \\\n    PATH=\"${HOME_DIR}/.local/bin:${PATH}\"\nENV DOCKERFILES_VERSION=\"master\" \\\n    DOCKERFILES_URL=\"https://raw.githubusercontent.com/AndreMiras/dockerfiles\"\nENV MAKEFILES_URL=\"${DOCKERFILES_URL}/${DOCKERFILES_VERSION}/buildozer_android_new\"\n# currently needed because buildozer still uses `tools/android` binary\n# even though we have the new `tools/bin/sdkmanager` available\nENV USE_SDK_WRAPPER=true\n\n\n# configure locale\nRUN apt update -qq > /dev/null && apt install -qq --yes --no-install-recommends \\\n    locales && \\\n    locale-gen en_US.UTF-8 && rm -rf /var/lib/apt/lists/*;\nENV LANG=\"en_US.UTF-8\" \\\n    LANGUAGE=\"en_US.UTF-8\" \\\n    LC_ALL=\"en_US.UTF-8\"\n\n# install system dependencies (required to setup all the tools)\nRUN apt update -qq > /dev/null && apt install -qq --yes --no-install-recommends \\\n    make curl ca-certificates xz-utils unzip openjdk-8-jdk sudo python-pip \\\n    python-setuptools && rm -rf /var/lib/apt/lists/*;\n\n# install build dependencies (required to successfully build the project)\n# TODO: should this go to a Makefile instead so it can be shared/reused?\nRUN apt install -qq --yes --no-install-recommends \\\n    file autoconf automake libtool gettext pkg-config libltdl-dev && rm -rf /var/lib/apt/lists/*;\n\n# prepare non root env\nRUN useradd --create-home --shell /bin/bash ${USER}\n# with sudo access and no password\nRUN usermod -append --groups sudo ${USER}\nRUN echo \"%sudo ALL=(ALL) NOPASSWD: ALL\" >> /etc/sudoers\n\nUSER ${USER}\nWORKDIR ${WORK_DIR}\n\n# downloads and installs Android SDK\n# makes sure to have an up to date build-tools version to workaround buildozer bug, see:\n# https://github.com/kivy/buildozer/commit/83ad94d#r29065648\nRUN curl -f --location --progress-bar ${MAKEFILES_URL}/android_sdk.mk --output android_sdk.mk\nRUN make -f android_sdk.mk\n\n# install buildozer and dependencies\nRUN curl -f --location --progress-bar ${MAKEFILES_URL}/buildozer.mk --output buildozer.mk\nRUN make -f buildozer.mk\n\n# links SDK to where buildozer is expecting to see it\nRUN mkdir -p ${HOME}/.buildozer/android/platform\nRUN ln -sfn ${HOME}/.android ${HOME}/.buildozer/android/platform/android-sdk-20\n\nCOPY . ${WORK_DIR}\nENTRYPOINT [\"./dockerfiles/start.sh\"]\n"
}