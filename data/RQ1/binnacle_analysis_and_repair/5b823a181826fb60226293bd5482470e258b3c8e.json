{
  "startTime": 1674248033098,
  "endTime": 1674248033156,
  "originalSmells": [
    {
      "rule": "yarnCacheCleanAfterInstall",
      "position": {
        "lineStart": 36,
        "lineEnd": 36,
        "columnStart": 4,
        "columnEnd": 13
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "#\n# ---- Base Node ----\nFROM node:11.6.0-alpine AS base\n# install node\nRUN apk add --no-cache tini\n# set working directory\nWORKDIR /home/node/app\n# Set tini as entrypoint\nENTRYPOINT [\"/sbin/tini\", \"--\"]\n# copy project file\nCOPY package.json .\nCOPY .npmrc .\nCOPY yarn.lock .\n\n#\n# ---- Dependencies ----\nFROM base AS dependencies\n# install node packages\nRUN yarn --check-files --production\n# copy production node_modules aside\nRUN cp -R node_modules prod_node_modules\n# install ALL node_modules, including 'devDependencies'\nRUN yarn --check-files\n\n#\n# ---- Build ----\nFROM dependencies AS build\nCOPY . .\nRUN yarn build\n\n#\n# ---- Test ----\n# run linters, setup and tests\nFROM dependencies AS test\nCOPY . .\n# RUN  npm run lint && npm run setup && npm run test\nRUN yarn test && yarn cache clean;\n\n#\n# ---- Release ----\nFROM base AS release\n# copy production node_modules\nCOPY --from=dependencies /home/node/app/prod_node_modules ./node_modules\n# Copy nextjs build folder\nCOPY --from=build /home/node/app/dist ./dist\n# Copy nextjs server build folder\nCOPY --from=build /home/node/app/app ./app\n# copy app sources\nCOPY . .\n\nUSER node\n# expose port and define CMD\nEXPOSE 3000\nCMD yarn start\n\n# build and run\n# docker build -t nextjs .\n# docker run -p 3000:3000 --rm --name=nextjs -it nextjs\n"
}