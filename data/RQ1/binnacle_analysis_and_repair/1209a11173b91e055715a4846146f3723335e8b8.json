{
  "startTime": 1674235605654,
  "endTime": 1674235605957,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 27,
        "lineEnd": 27,
        "columnStart": 4,
        "columnEnd": 48
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 43,
        "lineEnd": 43,
        "columnStart": 4,
        "columnEnd": 29
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 45,
        "lineEnd": 45,
        "columnStart": 4,
        "columnEnd": 24
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 47,
        "lineEnd": 47,
        "columnStart": 4,
        "columnEnd": 99
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 48,
        "lineEnd": 48,
        "columnStart": 4,
        "columnEnd": 39
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 64,
        "lineEnd": 64,
        "columnStart": 4,
        "columnEnd": 27
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 67,
        "lineEnd": 67,
        "columnStart": 4,
        "columnEnd": 39
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 38,
        "lineEnd": 38,
        "columnStart": 4,
        "columnEnd": 26
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 38,
        "lineEnd": 38,
        "columnStart": 4,
        "columnEnd": 26
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 40,
        "lineEnd": 40,
        "columnStart": 22,
        "columnEnd": 80
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "ARG REGION=eu-west-1\nARG ARCH=cpu\n\n# SageMaker PyTorch image\nFROM 520713654638.dkr.ecr.$REGION.amazonaws.com/sagemaker-pytorch:1.0.0-$ARCH-py3\n\nARG py_version=3\n\n# Validate that arguments are specified\nRUN test $py_version || exit 1\n\n# Install python and nginx\nRUN apt-get update && apt-get install -y --no-install-recommends software-properties-common && \\\n    add-apt-repository ppa:deadsnakes/ppa -y && \\\n    apt-get update && apt-get install -y --no-install-recommends \\\n        build-essential \\\n        curl \\\n        jq \\\n        nginx && \\\n    if [ $py_version -eq 3 ]; \\\n       then apt-get install -y --no-install-recommends python3.6-dev \\\n           && ln -s -f /usr/bin/python3.6 /usr/bin/python; \\\n       else apt-get install -y --no-install-recommends python-dev; fi && \\\n    rm -rf /var/lib/apt/lists/*\n\n# Install pip\nRUN cd /tmp && \\\n    curl -f -O https://bootstrap.pypa.io/get-pip.py && \\\n    python get-pip.py 'pip<=18.1' && rm get-pip.py\n\n# Python wonâ€™t try to write .pyc or .pyo files on the import of source modules\n# Force stdin, stdout and stderr to be totally unbuffered. Good for logging\nENV PYTHONDONTWRITEBYTECODE=1 PYTHONUNBUFFERED=1 PYTHONIOENCODING=UTF-8 LANG=C.UTF-8 LC_ALL=C.UTF-8\n\nRUN python --version\n\nRUN apt-get update && \\\n    apt-get upgrade -y && \\\n    apt-get install --no-install-recommends -y git && rm -rf /var/lib/apt/lists/*;\n\nRUN apt-get update && apt-get install -y --no-install-recommends nginx curl wget && rm -rf /var/lib/apt/lists/*;\n\n\nRUN pip install --no-cache-dir --upgrade pip\n\nRUN pip install --no-cache-dir gunicorn\n\nRUN pip3 install --no-cache-dir https://download.pytorch.org/whl/cpu/torch-1.0.1.post2-cp36-cp36m-linux_x86_64.whl && \\\n    pip3 install --no-cache-dir --upgrade torchvision\n\n# RUN pip install --upgrade torch torchvision\n\nRUN pip --no-cache-dir install \\\n        flask \\\n        pathlib \\\n        gunicorn \\\n        gevent \\\n        scipy \\\n        sklearn \\\n        pandas \\\n        Pillow \\\n        h5py \\\n        fastprogress\n\nRUN pip install --no-cache-dir numpy==1.16\n\n\nRUN pip install --no-cache-dir pytorch-pretrained-bert\nRUN pip install --no-cache-dir fast-bert --upgrade\n\n\n\nENV LANG C.UTF-8\nENV LC_ALL C.UTF-8\n\n# # Configure the build for our CUDA configuration.\n# ENV CI_BUILD_PYTHON python\n# ENV LD_LIBRARY_PATH /usr/local/cuda/extras/CUPTI/lib64:$LD_LIBRARY_PATH\n# ENV TF_NEED_CUDA 1\n# ENV TF_CUDA_COMPUTE_CAPABILITIES=3.7,6.1\n# ENV TF_CUDA_VERSION=9.0\n# ENV TF_CUDNN_VERSION=7\n# ENV CUDNN_INSTALL_PATH=/usr/lib/x86_64-linux-gnu\n\nENV PATH=\"/opt/ml/code:${PATH}\"\nCOPY /bert /opt/ml/code\nWORKDIR /opt/ml/code\n\nENTRYPOINT [\"python3\", \"-u\", \"/opt/ml/code/serve\"]"
}