{
  "startTime": 1674253182280,
  "endTime": 1674253182418,
  "originalSmells": [
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 17,
        "lineEnd": 17,
        "columnStart": 2,
        "columnEnd": 29
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 3,
        "lineEnd": 11,
        "columnStart": 44,
        "columnEnd": 8
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 3,
        "lineEnd": 11,
        "columnStart": 44,
        "columnEnd": 8
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM debian:buster\nMAINTAINER Greg Landrum <greg.landrum@t5informatics.com>\n\nRUN apt-get update && apt-get upgrade -y && apt install --no-install-recommends -y \\\n  curl \\\n  wget \\\n  cmake \\\n  python \\\n  g++ \\\n  libeigen3-dev \\\n  git \\\n  nodejs && rm -rf /var/lib/apt/lists/*;\n\nENV LANG C\n\nWORKDIR /opt\nRUN wget -q https://dl.bintray.com/boostorg/release/1.67.0/source/boost_1_67_0.tar.gz && \\\n  tar xzf boost_1_67_0.tar.gz && rm boost_1_67_0.tar.gz\nWORKDIR /opt/boost_1_67_0\nRUN ./bootstrap.sh --prefix=/opt/boost --with-libraries=system && \\\n  ./b2 install\n\n\nWORKDIR /opt\nRUN git clone https://github.com/emscripten-core/emsdk.git\n\nWORKDIR /opt/emsdk\nRUN ./emsdk update-tags && \\\n  ./emsdk install latest && \\\n  ./emsdk activate latest\n\n#RUN source ./emsdk_env.sh\n\nRUN mkdir /src\nWORKDIR /src\nENV RDBASE=/src/rdkit\nARG RDKIT_BRANCH\nRUN git clone https://github.com/greglandrum/rdkit.git\nWORKDIR $RDBASE\nRUN git checkout $RDKIT_BRANCH\n\nRUN mkdir build\nWORKDIR build\n\nRUN echo \"source /opt/emsdk/emsdk_env.sh\" >> ~/.bashrc\nSHELL [\"/bin/bash\", \"-c\", \"-l\"]\nRUN emconfigure cmake -DBoost_INCLUDE_DIR=/opt/boost/include -DRDK_BUILD_MINIMAL_LIB=ON \\\n  -DRDK_BUILD_PYTHON_WRAPPERS=OFF -DRDK_BUILD_CPP_TESTS=OFF -DRDK_BUILD_INCHI_SUPPORT=ON \\\n  -DRDK_USE_BOOST_SERIALIZATION=OFF -DRDK_OPTIMIZE_NATIVE=OFF -DRDK_BUILD_THREADSAFE_SSS=OFF \\\n  -DRDK_BUILD_DESCRIPTORS3D=OFF -DRDK_TEST_MULTITHREADED=OFF -DRDK_BUILD_COORDGEN_SUPPORT=OFF \\\n  -DRDK_BUILD_SLN_SUPPORT=OFF -DRDK_USE_BOOST_IOSTREAMS=OFF -DCMAKE_CXX_FLAGS=\"-s DISABLE_EXCEPTION_CATCHING=0\" \\\n  -DCMAKE_C_FLAGS=\"-DCOMPILE_ANSI_ONLY\"  ..\n\n# \"patch\" to make the InChI code work with emscripten:\nRUN cp /src/rdkit/External/INCHI-API/src/INCHI_BASE/src/util.c /src/rdkit/External/INCHI-API/src/INCHI_BASE/src/util.c.bak && \\\n  sed 's/&& defined(__APPLE__)//' /src/rdkit/External/INCHI-API/src/INCHI_BASE/src/util.c.bak > /src/rdkit/External/INCHI-API/src/INCHI_BASE/src/util.c\n\n# build and \"install\"\nRUN make -j2 RDKit_minimal && \\\n  cp Code/MinimalLib/RDKit_minimal.* ../Code/MinimalLib/demo/\n\n# run the tests\nWORKDIR /src/rdkit/Code/MinimalLib/tests\nRUN nodejs tests.js\n"
}