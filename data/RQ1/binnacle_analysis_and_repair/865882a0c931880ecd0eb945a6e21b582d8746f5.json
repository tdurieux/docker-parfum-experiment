{
  "startTime": 1674641703091,
  "endTime": 1674641703433,
  "originalSmells": [
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 50,
        "lineEnd": 50,
        "columnStart": 7,
        "columnEnd": 31
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM mcr.microsoft.com/dotnet/core-nightly/sdk:3.0.100-preview7\n\nRUN apt-get update \\\n    && apt-get install -y --no-install-recommends \\\n# dotnet dependencies?\n        libunwind-dev \\\n# wrk dependencies\n        build-essential \\\n        libssl-dev \\\n# KoreBuild dependencies\n        unzip \\\n        wget \\\n# BenchmarksServer dependencies\n        git \\\n        procps \\\n        cgroup-bin \\\n# Perfview dependencies\n        zip \\\n        linux-perf \\\n        lttng-tools \\\n        lttng-modules-dkms \\\n        liblttng-ust-dev \\\n        binutils \\\n# make dependencies\n        flex \\\n        bison \\\n# nhttp2 dependencies\n        g++ make binutils autoconf automake autotools-dev libtool pkg-config \\\n        zlib1g-dev libcunit1-dev libssl-dev libxml2-dev libev-dev libevent-dev libjansson-dev \\\n        libc-ares-dev libjemalloc-dev cython python3-dev python-setuptools libjemalloc-dev \\\n        libspdylay-dev \\\n    && rm -rf /var/lib/apt/lists/*\n\n# Make perf visible for perfcollect\nRUN cp /usr/bin/perf_4.19 /usr/bin/perf\n\n# downloading perfcollect\n#ADD https://raw.githubusercontent.com/dotnet/corefx-tools/master/src/performance/perfcollect/perfcollect /usr/bin/perfcollect\nADD https://gist.githubusercontent.com/sebastienros/6c28f099d579e37df4000fe457f277d6/raw/b3a585225053a2009ec4c7a8aff68d2c3359c61d/perfcollect /usr/bin/perfcollect\n\nRUN chmod +x /usr/bin/perfcollect\n\n# Build and install h2load\nENV NGHTTP2_VERSION 1.32.0\nRUN cd /tmp \\\n    && wget -qO- \"https://github.com/tatsuhiro-t/nghttp2/releases/download/v${NGHTTP2_VERSION}/nghttp2-${NGHTTP2_VERSION}.tar.gz\" | tar -xz \\\n    && cd /tmp/nghttp2-$NGHTTP2_VERSION \\\n    && autoreconf -i \\\n    && automake \\\n    && autoconf \\\n    && ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --enable-app \\\n    && make \\\n    && make install \\\n    && rm -rf nghttp2-${NGHTTP2_VERSION}.tar.gz /tmp/nghttp2-$NGHTTP2_VERSION\n\n# Build and install wrk\nENV WRK_VERSION 4.1.0\nRUN cd /tmp \\\n    && wget https://github.com/wg/wrk/archive/$WRK_VERSION.tar.gz -O wrk.tar.gz \\\n    && tar xvzf wrk.tar.gz \\\n    && cd wrk-$WRK_VERSION \\\n    && make \\\n    && cp wrk /usr/local/bin \\\n    && cd .. \\\n    && rm -rf wrk.tar.gz wrk-$WRK_VERSION\n\n# Install docker client\nENV DOCKER_VERSION 17.09.0-ce\nRUN cd /tmp \\\n    && wget https://download.docker.com/linux/static/stable/x86_64/docker-$DOCKER_VERSION.tgz -O docker.tgz \\\n    && tar xvzf docker.tgz \\\n    && cp docker/docker /usr/bin \\\n    && rm -rf docker.tgz docker\n\n# Install bombardier\nRUN cd /tmp \\\n    && wget https://github.com/codesenberg/bombardier/releases/download/v1.2.3/bombardier-linux-amd64 -O bombardier \\\n    && chmod +x bombardier \\\n    && cp bombardier /usr/local/bin\n\n# Build and install wrk2\nRUN if [ \"$(dpkg --print-architecture)\" != \"arm64\" ]; then cd /tmp \\\n    && git clone https://github.com/giltene/wrk2.git wrk2 \\\n    && cd wrk2 \\\n    && make \\\n    && mv wrk wrk2 \\\n    && cp wrk2 /usr/local/bin \\\n    && cd .. \\\n    && rm -rf wrk2.zip; fi\n\n# Install openssl 1.1.1\nRUN cd /tmp \\\n    && git clone https://github.com/openssl/openssl.git --branch OpenSSL_1_1_1-stable \\\n    && cd openssl \\\n    && ./config \\\n    && make \\\n    && make install \\\n    && export LD_LIBRARY_PATH=/usr/local/lib\n\nWORKDIR /benchmarks\n\nENV DOTNET_SKIP_FIRST_TIME_EXPERIENCE true\n\nCOPY . .\n"
}