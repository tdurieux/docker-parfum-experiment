{
  "startTime": 1674241274104,
  "endTime": 1674241274467,
  "originalSmells": [
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 65,
        "lineEnd": 65,
        "columnStart": 4,
        "columnEnd": 24
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# Copyright 2018 Google LLC\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\nARG DISTRO_VERSION=30\nFROM fedora:${DISTRO_VERSION} AS devtools\n\n# Please keep the formatting below, it is used by `extract-readme.sh` and\n# `extract-install.md` to generate the contents of the top-level README.md and\n# INSTALL.md files.\n\n## [START INSTALL.md]\n\n# Install the minimal development tools:\n\n## [START README.md]\n\n# ```bash\nRUN dnf makecache && \\\n    dnf install -y cmake gcc-c++ git make openssl-devel pkgconfig \\\n        zlib-devel\n# ```\n\n## [END README.md]\n\nFROM devtools\nCOPY ci/install-retry.sh /retry3\n\n## [START IGNORED]\n# Verify that the tools above are enough to compile google-cloud-cpp when using\n# external projects.\nWORKDIR /home/build/external\nCOPY . /home/build/external\nRUN cmake -H. -Bcmake-out -DCMAKE_BUILD_TYPE=Debug\nRUN cmake --build cmake-out -- -j $(nproc)\nRUN (cd cmake-out && ctest --output-on-failure)\n## [END IGNORED]\n\n# Fedora includes packages for gRPC, libcurl, and OpenSSL that are recent enough\n# for `google-cloud-cpp`. Install these packages and additional development\n# tools to compile the dependencies:\n\n# ```bash\nRUN /retry3 dnf makecache && \\\n    /retry3 dnf install -y grpc-devel grpc-plugins \\\n        libcurl-devel protobuf-compiler tar wget zlib-devel\n# ```\n\n# #### crc32c\n\n# There is no Fedora package for this library. To install it, use:\n\n# ```bash\nWORKDIR /var/tmp/build\nRUN /retry3 wget -q https://github.com/google/crc32c/archive/1.0.6.tar.gz\nRUN tar -xf 1.0.6.tar.gz && rm 1.0.6.tar.gz\nWORKDIR /var/tmp/build/crc32c-1.0.6\nRUN cmake \\\n      -DCMAKE_BUILD_TYPE=Release \\\n      -DBUILD_SHARED_LIBS=yes \\\n      -DCRC32C_BUILD_TESTS=OFF \\\n      -DCRC32C_BUILD_BENCHMARKS=OFF \\\n      -DCRC32C_USE_GLOG=OFF \\\n      -H. -Bcmake-out/crc32c\nRUN cmake --build cmake-out/crc32c --target install -- -j $(nproc)\nRUN ldconfig\n# ```\n\n# #### google-cloud-cpp\n\n# We can now compile and install `google-cloud-cpp`.\n\n# ```bash\nWORKDIR /home/build/google-cloud-cpp\nCOPY . /home/build/google-cloud-cpp\nRUN cmake -H. -Bcmake-out \\\n    -DGOOGLE_CLOUD_CPP_DEPENDENCY_PROVIDER=package \\\n    -DGOOGLE_CLOUD_CPP_GMOCK_PROVIDER=external\nRUN cmake --build cmake-out -- -j $(nproc)\nWORKDIR /home/build/google-cloud-cpp/cmake-out\nRUN ctest --output-on-failure\nRUN cmake --build . --target install\n# ```\n\n## [END INSTALL.md]\n\n# Verify that the installed files are actually usable\nWORKDIR /home/build/test-install-plain-make\nENV PKG_CONFIG_PATH=/usr/local/lib64/pkgconfig\nCOPY ci/test-install /home/build/test-install-plain-make\nRUN make\n\nWORKDIR /home/build/test-install-cmake-bigtable\nCOPY ci/test-install/bigtable /home/build/test-install-cmake-bigtable\nRUN env -u PKG_CONFIG_PATH cmake -H. -Bcmake-out\nRUN cmake --build cmake-out -- -j $(nproc)\n\nWORKDIR /home/build/test-install-cmake-storage\nCOPY ci/test-install/storage /home/build/test-install-cmake-storage\nRUN env -u PKG_CONFIG_PATH cmake -H. -Bcmake-out\nRUN cmake --build cmake-out -- -j $(nproc)\n\nWORKDIR /home/build/test-submodule\nCOPY ci/test-install /home/build/test-submodule\nCOPY . /home/build/test-submodule/submodule/google-cloud-cpp\nRUN cmake -Hsubmodule -Bcmake-out\nRUN cmake --build cmake-out -- -j $(nproc)\n"
}