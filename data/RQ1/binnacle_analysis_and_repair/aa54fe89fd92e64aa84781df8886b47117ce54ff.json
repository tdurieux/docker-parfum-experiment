{
  "startTime": 1674243193469,
  "endTime": 1674243193524,
  "originalSmells": [
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 89,
        "lineEnd": 89,
        "columnStart": 22,
        "columnEnd": 48
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 89,
        "lineEnd": 89,
        "columnStart": 22,
        "columnEnd": 48
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM ruby:2.0\n\nMAINTAINER Chris Pergrossi <c.pergrossi@ufl.edu>\n\n#\n# Complete PXE Boot Server\n#\n# Usage:  docker run -ti -v unpacked_isos:/images -v cfg:/cfg --net=host geard/pxeserve\n#\n#\n#   DHCP Proxy:\n#     This image starts up a dnsmasq server in proxy DHCP mode and by default\n#     listens to the broadcast address on PRIVATE ip ranges only.  The proxy\n#     dhcp server works alongide your existing dhcp server to append next-server\n#     and filename DHCP options (67, and 68).  The reason for --net=host is that\n#     broadcast m\n#\n#   HTTP Boot:\n#     Rather than use old, slow, and insecure TFTP, we've migrated to HTTP! \n#     By default we start our own instance of lightppd and server the\n#     /images folder directly over http(s).  NOTE: any iso files wil be\n#\n#   Configuration:\n#     This is the hardest part of setting up new ISO images.  To add a new ISO to be\n#     net-booted, follow these steps:\n#\n#     1. Mount the iso to loopback:\n#\n#        #  mount path/to/installcd.iso /mnt\n#\n#     2. Browse the ISO filesystem, looking for the provided kernel and initrd files\n#            (or equivalent for other POSIX systems)\n#\n#        #  cd /mnt && find . -name 'vmlinuz*' -or -name 'initrd*'\n#\n#             NOTE: this won't work for all OS types, look through the filesystem for\n#                   keywords like 'netboot', 'boot', 'installer' etc.\n#\n#     3. Copy the kernel and the initramfs image to the folder you provide the PXE server\n#\n#        #  mkdir -p ~/pxe/images/ubuntu/15.04/server-x86_64/ && cp -Ra {vmlinuz,initrd.gz} $_\n#\n#       [optional]: Some distros include syslinux configuration files such as graphics,\n#                   preset boot options, etc. nearby (named isolinux.cfg or similar).  These can\n#                   also be copied to the images folder and included for your pxe clients.\n#\n#       [alternative]:\n#           Depending on your needs, you might copy the entire ISO filesystem to the images directory,\n#           or even the ISO itself, to provide installation files or custom programs for the distributed\n#           operating system.\n#\n#       [protip]: You might not even need an ISO at all; most distributions have extracted copies of their\n#                 ISO's available on their website, which you may boot from directly if you can spare the\n#                 bandwidth.\n#\n#     4. Generate an appropriate pxelinux .cfg file for your images and drop into the '/cfg' volume. see\n#\n#                         http://www.syslinux.org/wiki/index.php/PXELINUX\n#\n#         for detailed instructions and advanced configuration options.\n#\n#     EXAMPLES:\n#\n#        Boot an ArchLinux installer or a CoreOS LiveCD over HTTP.\n#\n#          # cat <<EOF > cfg/archlinux.cfg\n#          default syslinux/menu.c32\n#          prompt 3\n#          timeout 15\n#\n#          menu title ArchLinux Bootstrap Install\n#\n#          label archboot-latest-x86_64\n#             menu label ArchBoot Install Script (x64)\n#             kernel http://mirror.rackspace.com/archlinux/iso/archboot/2015.01/boot/vmlinuz_x86_64 root=ramfs\n#             initrd http://mirror.rackspace.com/archlinux/iso/archboot/2015.01/boot/initramfs_x86_64.img\n#\n#          label archboot-latest-i386\n#              menu label ArchBoot Install Script (x86)\n#              kernel http://mirror.rackspace.com/archlinux/iso/archboot/2015.01/boot/vmlinuz_i686\n#              initrd http://mirror.rackspace.com/archlinux/iso/archboot/2015.01/boot/initramfs_i686.img\n#\n#          label coreos\n#              menu label CoreOS Stable\n#              kernel http://stable.release.core-os.net/amd64-usr/current/coreos_production_pxe.vmlinuz\n#              initrd http://stable.release.core-os.net/amd64-usr/current/coreos_production_pxe_image.cpio.gz\n#              append sshkey=\"ssh-rsa AAAA..........OtBKKG/++o\" coreos pxe demo\n#\n\nRUN apt-get update && apt-get install --no-install-recommends -y dnsmasq && rm -rf /var/lib/apt/lists/*;\n\nVOLUME ['/images']\nVOLUME ['/cfg']\n\nCOPY pxelinux.0   /pxe/\nCOPY images       /pxe/images\nCOPY cfg          /pxe/cfg\nCOPY pxelinux.cfg /pxe/pxelinux.cfg\nCOPY syslinux     /pxe/syslinux\n\nRUN ln -s /pxe/images /images && \\\n    ln -s /pxe/cfg /cfg\n\nRUN chown nobody:www-data -R /pxe\n\nCOPY start.sh     /start.sh\n\nENTRYPOINT '/start.sh'\n\nCMD ['/bin/bash', '-c']\n\n"
}