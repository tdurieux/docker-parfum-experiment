{
  "startTime": 1674246320800,
  "endTime": 1674246321632,
  "originalSmells": [
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 47,
        "lineEnd": 64,
        "columnStart": 4,
        "columnEnd": 33
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 8,
        "lineEnd": 8,
        "columnStart": 4,
        "columnEnd": 40
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 39,
        "lineEnd": 43,
        "columnStart": 4,
        "columnEnd": 16
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 72,
        "lineEnd": 72,
        "columnStart": 4,
        "columnEnd": 46
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 86,
        "lineEnd": 86,
        "columnStart": 4,
        "columnEnd": 27
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 39,
        "lineEnd": 43,
        "columnStart": 4,
        "columnEnd": 16
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 72,
        "lineEnd": 72,
        "columnStart": 4,
        "columnEnd": 46
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 86,
        "lineEnd": 86,
        "columnStart": 4,
        "columnEnd": 27
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 8,
        "lineEnd": 8,
        "columnStart": 4,
        "columnEnd": 40
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 12,
        "lineEnd": 12,
        "columnStart": 22,
        "columnEnd": 74
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 16,
        "lineEnd": 25,
        "columnStart": 4,
        "columnEnd": 20
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 39,
        "lineEnd": 43,
        "columnStart": 4,
        "columnEnd": 16
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 72,
        "lineEnd": 72,
        "columnStart": 4,
        "columnEnd": 46
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 86,
        "lineEnd": 86,
        "columnStart": 4,
        "columnEnd": 27
      }
    }
  ],
  "repairedSmells": [
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 39,
        "lineEnd": 43,
        "columnStart": 4,
        "columnEnd": 16
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 72,
        "lineEnd": 72,
        "columnStart": 4,
        "columnEnd": 70
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 86,
        "lineEnd": 86,
        "columnStart": 4,
        "columnEnd": 51
      }
    }
  ],
  "repairedDockerfile": "FROM nvcr.io/nvidia/tensorrt:18.08-py3\n\nARG FFMPEG_VERSION=3.4.2\nARG CMAKE_VERSION=3.11.1\nENV DEBIAN_FRONTEND noninteractive\n\n# nvcuvid deps\nRUN apt-get update --fix-missing && \\\n    apt-get install --no-install-recommends -y libx11-6 libxext6 && rm -rf /var/lib/apt/lists/*;\nENV NVIDIA_DRIVER_CAPABILITIES=video,compute,utility\n\n# install python\nRUN apt-get update && apt-get install -y --no-install-recommends apt-utils && rm -rf /var/lib/apt/lists/*;\nRUN rm -rf /var/lib/apt/lists/*\nRUN apt-get update && \\\n    apt-get upgrade -y && \\\n    apt-get install -y --no-install-recommends \\\n            aptitude git vim make wget zip zsh pkg-config \\\n            build-essential checkinstall p7zip-full python-pip \\\n            python3-pip tmux ffmpeg i7z unrar htop cmake g++  \\\n            curl libopenblas-dev python-numpy python3-numpy \\\n            python python-tk idle python-pmw python-imaging \\\n            libjpeg8-dev libtiff5-dev libjasper-dev libpng12-dev \\\n            libtbb2 libtbb-dev  libdc1394-22-dev libavcodec-dev  \\\n            libavformat-dev libswscale-dev libv4l-dev libatlas-base-dev \\\n            gfortran && \\\n    apt-get autoremove && \\\n    apt-get clean && \\\n    aptitude install -y python-dev python3-dev && \\\n    update-alternatives --install /usr/bin/python python /usr/bin/python3 10 && \\\n    # update pip and setuptools\n    python -m pip install --upgrade pip setuptools && rm -rf /var/lib/apt/lists/*;\n\nCOPY ./torch-0.4.0-cp35-cp35m-linux_x86_64.whl /software/\nRUN python -m pip install /software/torch-0.4.0-cp35-cp35m-linux_x86_64.whl && rm -rf /software\nRUN python -m pip install cffi torchvision\nCOPY ./ffmpeg-$FFMPEG_VERSION.tar.bz2 /tmp\n\n# minimal ffmpeg from source\nRUN apt-get install --no-install-recommends -y \\\n      yasm \\\n      libx264-148 libx264-dev \\\n      libx265-79 libx265-dev \\\n      pkg-config && \\\n    cd /tmp && tar xf ffmpeg-$FFMPEG_VERSION.tar.bz2 && \\\n    rm ffmpeg-$FFMPEG_VERSION.tar.bz2 && \\\n    cd ffmpeg-$FFMPEG_VERSION && \\\n    ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" \\\n    --prefix=/usr/local \\\n    --disable-static --enable-shared \\\n    --disable-all --disable-autodetect --disable-iconv \\\n    --enable-avformat --enable-avcodec --enable-avfilter --enable-avdevice \\\n    --enable-protocol=file \\\n    --enable-demuxer=mov,matroska,image2 \\\n    --enable-bsf=h264_mp4toannexb,hevc_mp4toannexb \\\n    --enable-gpl --enable-libx264 --enable-libx265 --enable-zlib \\\n    --enable-indev=lavfi \\\n    --enable-swresample --enable-ffmpeg \\\n    --enable-swscale --enable-filter=scale,testsrc,crop \\\n    --enable-muxer=mp4,matroska,image2 \\\n    --enable-cuvid --enable-nvenc --enable-cuda \\\n    --enable-decoder=h264,h264_cuvid,hevc,hevc_cuvid,png,mjpeg,rawvideo \\\n    --enable-encoder=h264_nvenc,hevc_nvenc,libx264,libx265,png,mjpeg \\\n    --enable-hwaccel=h264_cuvid,hevc_cuvid \\\n    --enable-parser=h264,hevc,png && \\\n    make -j8 && make install && \\\n    ldconfig && \\\n    cd /tmp && rm -rf ffmpeg-$FFMPEG_VERSION && \\\n    apt-get remove -y yasm libx264-dev libx265-dev && \\\n    apt-get auto-remove -y && rm -rf /var/lib/apt/lists/*;\n\n# video_reader build deps (pkg-config, Doxygen, recent cmake)\nRUN apt-get install --no-install-recommends -y pkg-config doxygen wget && \\\n    cd /tmp && \\\n    export dir=$(echo $CMAKE_VERSION | sed \"s/^\\([0-9]*\\.[0-9]*\\).*/v\\1/\") && \\\n    wget -q https://cmake.org/files/${dir}/cmake-$CMAKE_VERSION-Linux-x86_64.sh && \\\n    /bin/sh cmake-$CMAKE_VERSION-Linux-x86_64.sh --skip-license --prefix=/usr/local && \\\n    rm cmake-$CMAKE_VERSION-Linux-x86_64.sh && \\\n    apt-get purge -y wget && \\\n    apt-get autoremove -y && rm -rf /var/lib/apt/lists/*;\n\nARG OPENCV_VERSION=3.4.0\nARG OPENCV_CUDA_GENERATION=Auto\n\n# paired down OpenCV build\nCOPY ./$OPENCV_VERSION.tar.gz /tmp\nRUN apt-get install --no-install-recommends -y wget && \\\n    cd /tmp && tar xf $OPENCV_VERSION.tar.gz && \\\n    rm $OPENCV_VERSION.tar.gz && rm -rf /var/lib/apt/lists/*;\n\nRUN cd /tmp/opencv-$OPENCV_VERSION && \\\n    mkdir build && cd build && \\\n    cmake -DCUDA_GENERATION=$OPENCV_CUDA_GENERATION \\\n      -DCMAKE_BUILD_TYPE=RELEASE \\\n      $(for m in cudabgsegm cudacodec cudafeatures2d \\\n      cudafilters cudalegacy cudaoptflow cudaobjdetect \\\n      cudawarping dnn features2d flann highgui ml \\\n      objdetect photo python_bindings_generator shape \\\n      superres ts video videoio; do echo -DBUILD_opencv_$m=OFF; done) \\\n      $(for f in WEBP TIFF OPENEXR JASPER; do echo -DWITH_$f=OFF; done) \\\n      .. && \\\n    make -j8 && make install && \\\n    ldconfig && \\\n    cd /tmp && rm -rf opencv-$OPENCV_VERSION && \\\n    apt-get purge -y wget && \\\n    apt-get autoremove -y\n\n# nvidia-docker only provides libraries for runtime use, not for\n# development, to hack it so we can develop inside a container (not a\n# normal or supported practice), we need to make an unversioned\n# symlink so gcc can find the library.  Additional, different\n# nvidia-docker versions put the lib in different places, so we make\n# symlinks for both places.\nRUN ln -s /usr/local/nvidia/lib64/libnvcuvid.so.1 /usr/local/lib/libnvcuvid.so && \\\n    ln -s libnvcuvid.so.1 /usr/lib/x86_64-linux-gnu/libnvcuvid.so\n\nRUN rm -rf /var/lib/apt/lists/*\n\nRUN python -m pip install scipy\n\nRUN mkdir /nvvl && cd /nvvl && git clone http://gitlab.sz.sensetime.com/mapingchuan/nvvl.git\n"
}