{
  "startTime": 1674246852974,
  "endTime": 1674246853259,
  "originalSmells": [
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 8,
        "lineEnd": 8,
        "columnStart": 4,
        "columnEnd": 84
      }
    },
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 9,
        "lineEnd": 9,
        "columnStart": 4,
        "columnEnd": 39
      }
    },
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 20,
        "lineEnd": 20,
        "columnStart": 4,
        "columnEnd": 49
      }
    },
    {
      "rule": "mkdirUsrSrcThenRemove",
      "position": {
        "lineStart": 12,
        "lineEnd": 12,
        "columnStart": 4,
        "columnEnd": 25
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM node:12-alpine\n\n#the only reason why we need git here, is that we have designsystem in another github repo\nRUN apk add --no-cache git\n# to run localhost docker\n\nRUN npm init -y\nRUN npm config set unsafe-perm true\nRUN npm install ejs express method-override body-parser compression --loglevel error && npm cache clean --force;\nRUN npm install pm2 -g --loglevel error && npm cache clean --force;\n\n# Create app directory\nRUN mkdir -p /usr/src/app && chmod 777 /usr/src/app && rm -rf /usr/src/app\nRUN mkdir /.pm2 && chmod 777 /.pm2\nWORKDIR /usr/src/app\n\nCOPY package.json /usr/src/app/package.json\nCOPY package-lock.json /usr/src/app/package-lock.json\n\n# Install app dependencies\nRUN npm install --only=production --loglevel=warn && npm cache clean --force;\n\nCOPY server /usr/src/app/server\nCOPY start.js /usr/src/app/\nCOPY .babelrc /usr/src/app/\nCOPY webpack.* /usr/src/app/\n\n# most volatile directory latest, in order to reuse layers.\nCOPY src /usr/src/app/src\n\nRUN npm run build\n\nEXPOSE 4300\n\nCMD [ \"pm2-docker\", \"start.js\" ]\n"
}