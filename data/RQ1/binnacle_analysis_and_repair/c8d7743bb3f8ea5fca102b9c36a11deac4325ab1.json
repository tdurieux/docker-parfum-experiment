{
  "startTime": 1674641695072,
  "endTime": 1674641695179,
  "originalSmells": [
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 5,
        "lineEnd": 5,
        "columnStart": 4,
        "columnEnd": 59
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 5,
        "lineEnd": 5,
        "columnStart": 4,
        "columnEnd": 59
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# FROM microsoft/dotnet:2.1-sdk\n# FROM microsoft/dotnet:2.0.9-sdk-2.1.202\nFROM microsoft/dotnet:2.0-sdk\n\nRUN apt-get update -y && \\\n    apt-get install --no-install-recommends -y libunwind-dev apache2-utils make gcc && rm -rf /var/lib/apt/lists/*;\n\n# Add only what we need, and add late to minimize rebuilds during development:\nADD ImmortalCoordinator           /ambrosia/ImmortalCoordinator\nADD Ambrosia                      /ambrosia/Ambrosia\nADD DevTools                      /ambrosia/DevTools\nWORKDIR /ambrosia\n\nENV AMBROSIA_DOTNET_FRAMEWORK=netcoreapp2.0 \\\n    AMBROSIA_DOTNET_CONF=Release \\\n    AMBROSIA_DOTNET_PLATFORM=linux-x64\n\n# This is the command we use to build each of the individual C# projects:\nENV BLDFLAGS \" -c Release -f $AMBROSIA_DOTNET_FRAMEWORK -r $AMBROSIA_DOTNET_PLATFORM \"\nENV BUILDIT \"dotnet publish $BLDFLAGS\"\n# NOTE: use the following for a debug build of AMBROSIA:\n# ENV BLDFLAGS \" -c Debug -f netcoreapp2.0 -r linux-x64 -p:DefineConstants=DEBUG \"\n\n# (1) Build the core executables and libraries:\n# ---------------------------------------------\nRUN $BUILDIT -o /ambrosia/bin/runtime     Ambrosia/Ambrosia/Ambrosia.csproj\nRUN $BUILDIT -o /ambrosia/bin/coord       ImmortalCoordinator/ImmortalCoordinator.csproj\nRUN $BUILDIT -o /ambrosia/bin/unsafedereg DevTools/UnsafeDeregisterInstance/UnsafeDeregisterInstance.csproj\n\nRUN cd bin && \\\n    ln -s runtime/Ambrosia Ambrosia && \\\n    ln -s coord/ImmortalCoordinator && \\ \n    ln -s unsafedereg/UnsafeDeregisterInstance\n\n# (2) Language binding: CSharp (depends on AmbrosiaLibCS on nuget)\n# ----------------------------------------------------------------\nADD Clients/CSharp                /ambrosia/Clients/CSharp\nRUN $BUILDIT -o /ambrosia/bin/codegen Clients/CSharp/AmbrosiaCS/AmbrosiaCS.csproj && \\\n    cd bin && ln -s codegen/AmbrosiaCS\n\n# (2B) Reduce the size of our dotnet binary distribution:\nADD ./Scripts/dedup_bindist.sh Scripts/\nRUN du -sch ./bin && \\\n    ./Scripts/dedup_bindist.sh && \\\n    du -sch ./bin\n\n# (3) Low-level Native-code network client:\n# -----------------------------------------\nADD Clients/C                     /ambrosia/Clients/C\n# This publishes to the build directory: bin/lib*.* and bin/include\nRUN cd Clients/C && make debug # publish\n\n# (4) A script used by apps to start the ImmortalCoordinator:\n# -----------------------------------------------------------\nADD ./Scripts/runAmbrosiaService.sh bin/\n\n# We currently use this as a baseline source of dependencies for generated code:\nADD ./Clients/CSharp/AmbrosiaCS/AmbrosiaCS.csproj  bin/AmbrosiaCS.csproj\n\n# Remove unnecessary execute permissions:\n# RUN cd bin && (chmod -x *.dll *.so *.dylib *.a 2>/dev/null || echo ok)\n\n# Make \"ambrosia\", \"AmbrosiaCS\", and \"ImmortalCoordinator\" available on PATH:\nENV AMBROSIA_BINDIR=\"/ambrosia/bin\" \\\n    PATH=\"${PATH}:/ambrosia/bin\"\n"
}