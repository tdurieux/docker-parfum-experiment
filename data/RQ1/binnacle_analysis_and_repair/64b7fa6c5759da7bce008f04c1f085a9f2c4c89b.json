{
  "startTime": 1674242230794,
  "endTime": 1674242231193,
  "originalSmells": [
    {
      "rule": "wgetUseHttpsUrl",
      "position": {
        "lineStart": 40,
        "lineEnd": 40,
        "columnStart": 4,
        "columnEnd": 100
      }
    },
    {
      "rule": "wgetUseHttpsUrl",
      "position": {
        "lineStart": 50,
        "lineEnd": 50,
        "columnStart": 4,
        "columnEnd": 66
      }
    },
    {
      "rule": "wgetUseHttpsUrl",
      "position": {
        "lineStart": 85,
        "lineEnd": 85,
        "columnStart": 4,
        "columnEnd": 51
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 53,
        "lineEnd": 53,
        "columnStart": 7,
        "columnEnd": 18
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 88,
        "lineEnd": 88,
        "columnStart": 7,
        "columnEnd": 40
      }
    },
    {
      "rule": "yumInstallRmVarCacheYum",
      "position": {
        "lineStart": 29,
        "lineEnd": 36,
        "columnStart": 7,
        "columnEnd": 7
      }
    },
    {
      "rule": "yumInstallRmVarCacheYum",
      "position": {
        "lineStart": 42,
        "lineEnd": 45,
        "columnStart": 7,
        "columnEnd": 24
      }
    },
    {
      "rule": "yumInstallRmVarCacheYum",
      "position": {
        "lineStart": 61,
        "lineEnd": 67,
        "columnStart": 7,
        "columnEnd": 14
      }
    },
    {
      "rule": "yumInstallRmVarCacheYum",
      "position": {
        "lineStart": 79,
        "lineEnd": 81,
        "columnStart": 7,
        "columnEnd": 15
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 51,
        "lineEnd": 51,
        "columnStart": 7,
        "columnEnd": 34
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 71,
        "lineEnd": 71,
        "columnStart": 7,
        "columnEnd": 31
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 86,
        "lineEnd": 86,
        "columnStart": 7,
        "columnEnd": 30
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM centos:6.7\nMAINTAINER Esteban Castro Borsani <ecastroborsani@gmail.com>\n\n# Be aware this is a throw-away image,\n# its size is quite big (many layers)\n# coz that way we can retry a failed step.\n\n# Requirements:\n# glibc 2.8 (CentOS 6 has 2.12)\n# Python +2.7.9 (with SSL support)\n# Git +2.7\n# Tar +1.28 (with bzip2 support)\n# GCC +4.8\n# G++ +4.8\n\n#\n# The \"touch /var/lib/rpm/* \\\"\n# before every \"yum install\"\n# is a workaround to\n# \"Rpmdb checksum is invalid: dCDPT(pkg checksums)\"\n# errors, for builds in hub.docker.com\n# See: https://github.com/docker/docker/issues/10180\n#\n\n\nRUN mkdir -p /code/build\nWORKDIR /code/build\n\nRUN touch /var/lib/rpm/* \\\n    && yum install -y \\\n    openssl \\\n    openssl-devel \\\n    libffi-devel \\\n    wget \\\n    make \\\n    gcc \\\n    tar \\\n    && yum clean all && rm -rf /var/cache/yum\n\n# GCC 4.8.2\nRUN wget https://people.centos.org/tru/devtools-2/devtools-2.repo -O /etc/yum.repos.d/devtools-2.repo \\\n    && touch /var/lib/rpm/* \\\n    && yum install -y \\\n    devtoolset-2-gcc \\\n    devtoolset-2-binutils \\\n    devtoolset-2-gcc-c++ \\\n    && rm /etc/yum.repos.d/devtools-2.repo \\\n    && yum clean all && rm -rf /var/cache/yum\n\n# Python 2.7\nRUN wget https://www.python.org/ftp/python/2.7.11/Python-2.7.11.tgz \\\n    && tar -xzvf Python-2.7.11.tgz \\\n    && cd Python-2.7.11 \\\n    && ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" \\\n    && make altinstall && rm Python-2.7.11.tgz\n\nRUN python2.7 -m ensurepip \\\n    && python2.7 -m pip install pyOpenSSL==16.0.0\n\n# Git 2\nRUN touch /var/lib/rpm/* \\\n    && yum install -y \\\n    curl-devel \\\n    expat-devel \\\n    gettext-devel \\\n    openssl-devel \\\n    perl-devel \\\n    zlib-devel \\\n    && yum clean all && rm -rf /var/cache/yum\n\nRUN wget https://www.kernel.org/pub/software/scm/git/git-2.7.4.tar.gz \\\n    && tar xzf git-2.7.4.tar.gz \\\n    && cd git-2.7.4 \\\n    && make prefix=/usr/local/git all \\\n    && make prefix=/usr/local/git install && rm git-2.7.4.tar.gz\nENV PATH /usr/local/git/bin:$PATH\n\n# Tar 1.28\nRUN touch /var/lib/rpm/* \\\n    && yum install -y \\\n    bzip2 \\\n    bzip2-devel \\\n    && yum clean all && rm -rf /var/cache/yum\n\nENV FORCE_UNSAFE_CONFIGURE=1\nRUN wget https://ftp.gnu.org/gnu/tar/tar-1.29.tar.gz \\\n    && tar xzf tar-1.29.tar.gz \\\n    && cd tar-1.29 \\\n    && ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" prefix=/usr/local/tar \\\n    && make \\\n    && make install && rm tar-1.29.tar.gz\n\n# Set Python 2.7 as default\n# Set tar 1.28 as default\nRUN cd /usr/local/bin \\\n    && ln -s python2.7 python \\\n    && ln -s /usr/local/tar/bin/tar tar\n\n# Setup depot-tools\n# Remove .git to disable auto update\nRUN git clone https://chromium.googlesource.com/chromium/tools/depot_tools.git \\\n    && cd depot_tools \\\n    && git checkout ef7c68c57f20196b27b2059cd28f5f28bb22435a \\\n    && rm -rf .git\nENV PATH /code/build/depot_tools:$PATH\n\n# Disable auto update - alternative\nENV DEPOT_TOOLS_UPDATE 0\n\n# Setup V8 (with depot-tools)\n# and show V8 version\nRUN fetch v8 \\\n    && cd v8 \\\n    && git checkout 1c998eae01e53610a852e6b2d9b7d2822eefe8f3 \\\n    && gclient sync \\\n    && head -1 ChangeLog\n\nENV CFLAGS -fPIC\nENV CXXFLAGS -fPIC\nRUN cd v8 \\\n    && source /opt/rh/devtoolset-2/enable \\\n    && make x64.release -j4 GYPFLAGS=\"-Dclang=0\"\n\n# Restore default Python\n# Restore default tar\nRUN cd /usr/local/bin \\\n    && rm python \\\n    && rm tar\n\nRUN mkdir -p /code/v8/release\n\n# Convert thin archives into normal ones,\n# the alternative is to add 'standalone_static_library': 1\n# to GYP build file\nRUN cd /code/build/v8/out/x64.release \\\n    && for lib in `find -name '*.a'`; \\\n        do ar -t $lib | xargs ar Drvs $lib.new \\\n           && mv -v $lib.new /code/v8/release/$(basename $lib); \\\n    done\n\n# Copy required bin files\n# and API headers\nRUN cd v8 \\\n    && cp -v LICENSE.v8 /code/v8/LICENSE.v8 \\\n    && cp -v -R include/ /code/v8/include/ \\\n    \\\n    && cd /code/build/v8/out/x64.release \\\n    && cp -v natives_blob.bin /code/v8/natives_blob.bin \\\n    && cp -v snapshot_blob.bin /code/v8/snapshot_blob.bin\n\nWORKDIR /code\n"
}