{
  "startTime": 1674244017261,
  "endTime": 1674244017692,
  "originalSmells": [
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 101,
        "lineEnd": 101,
        "columnStart": 4,
        "columnEnd": 56
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 103,
        "lineEnd": 103,
        "columnStart": 4,
        "columnEnd": 20
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 77,
        "lineEnd": 80,
        "columnStart": 1,
        "columnEnd": 2
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 22,
        "lineEnd": 22,
        "columnStart": 7,
        "columnEnd": 54
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# Dockerfile to build a whole instance of rasa and run the rasa `pytest`\n#  (created to test the changes needed for docker automation)\n#\n#  (so far) only used manually, via:\n#         `docker build -f docker/Dockerfile_test .` (from project root)\n#         `docker run -it [id-output-from-above]`\n\nFROM python:3.6-slim\n\nENV RASA_NLU_DOCKER=\"YES\" \\\n    RASA_NLU_HOME=/app \\\n    RASA_NLU_PYTHON_PACKAGES=/usr/local/lib/python3.6/dist-packages\n\n# Run updates, install basics and cleanup\n# - build-essential: Compile specific dependencies\n# - git-core: Checkout git repos\nRUN apt-get update -qq \\\n    && apt-get install -y --no-install-recommends build-essential git-core openssl libssl-dev libffi6 libffi-dev curl vim\\\n    && apt-get clean \\\n    && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*\n\nRUN apt-get update -qq \\\n    && apt-get install -y --no-install-recommends wget && rm -rf /var/lib/apt/lists/*;\n\nRUN pip install https://github.com/explosion/spacy-models/releases/download/en_core_web_md-2.0.0/en_core_web_md-2.0.0.tar.gz --no-cache-dir > /dev/null \\\n    && python -m spacy link en_core_web_md en \\\n    && pip install https://github.com/explosion/spacy-models/releases/download/de_core_news_sm-2.0.0/de_core_news_sm-2.0.0.tar.gz --no-cache-dir > /dev/null \\\n    && python -m spacy link de_core_news_sm de\n\n\nWORKDIR ${RASA_NLU_HOME}\n\n# use bash always\nRUN rm /bin/sh && ln -s /bin/bash /bin/sh\n\n## install java stuff\n\nRUN echo \"deb http://http.debian.net/debian jessie-backports main\" > /etc/apt/sources.list.d/jessie-backports.list\n\nRUN apt-get update && apt-get install -y --no-install-recommends \\\n\t\tbzip2 \\\n\t\tunzip \\\n\t\txz-utils \\\n\t&& rm -rf /var/lib/apt/lists/*\n\n# Default to UTF-8 file.encoding\nENV LANG C.UTF-8\n\n# add a simple script that can auto-detect the appropriate JAVA_HOME value\n# based on whether the JDK or only the JRE is installed\nRUN { \\\n\t\techo '#!/bin/sh'; \\\n\t\techo 'set -e'; \\\n\t\techo; \\\n\t\techo 'dirname \"$(dirname \"$(readlink -f \"$(which javac || which java)\")\")\"'; \\\n\t} > /usr/local/bin/docker-java-home \\\n\t&& chmod +x /usr/local/bin/docker-java-home\n\n# do some fancy footwork to create a JAVA_HOME that's cross-architecture-safe\nRUN ln -svT \"/usr/lib/jvm/java-8-openjdk-$(dpkg --print-architecture)\" /docker-java-home\nENV JAVA_HOME /docker-java-home\n\nENV JAVA_VERSION 8u141\nENV JAVA_DEBIAN_VERSION 8u141-b15-1~deb9u1\n\n# see https://bugs.debian.org/775775\n# and https://github.com/docker-library/java/issues/19#issuecomment-70546872\nENV CA_CERTIFICATES_JAVA_VERSION 20170531+nmu1\n\nRUN set -ex; \\\n\n# deal with slim variants not having man page directories (which causes \"update-alternatives\" to fail)\n\tif [ ! -d /usr/share/man/man1 ]; then \\\n\t\tmkdir -p /usr/share/man/man1; \\\n\tfi; \\\n\n\tapt-get update; \\\n\tapt-get install --no-install-recommends -y -t jessie-backports \\\n\t\topenjdk-8-jdk \\\n\t\tca-certificates-java \\\n\t; \\\n\trm -rf /var/lib/apt/lists/*; \\\n\n# verify that \"docker-java-home\" returns what we expect\n\t[ \"$(readlink -f \"$JAVA_HOME\")\" = \"$(docker-java-home)\" ]; \\\n\n# update-alternatives so that future installs of other OpenJDK versions don't change /usr/bin/java\n\tupdate-alternatives --get-selections | awk -v home=\"$(readlink -f \"$JAVA_HOME\")\" 'index($3, home) == 1 { $2 = \"manual\"; print | \"update-alternatives --set-selections\" }'; \\\n# ... and verify that it actually worked for one of the alternatives we care about\n\tupdate-alternatives --query java | grep -q 'Status: manual'\n\n# see CA_CERTIFICATES_JAVA_VERSION notes above\nRUN /var/lib/dpkg/info/ca-certificates-java.postinst configure\n\n## done java\n\n\nCOPY . ${RASA_NLU_HOME}\n\nRUN  wget -P data/ https://s3-eu-west-1.amazonaws.com/mitie/total_word_feature_extractor.dat\n\nRUN pip install --no-cache-dir -r alt_requirements/requirements_dev.txt\n\nRUN pip install --no-cache-dir -e .\n\nRUN  sed -i -e 's/backend      : tkagg/backend      : PDF/' /usr/local/lib/python3.6/site-packages/matplotlib/mpl-data/matplotlibrc\n\nVOLUME [\"/app/projects\", \"/app/logs\", \"/app/data\"]\n\nEXPOSE 5000\n\nENTRYPOINT [\"/usr/local/bin/py.test\"]\nCMD [\"_pytest\", \"--cov\", \"rasa_nlu\", \"--pep8\", \"-v\"]\n\n"
}