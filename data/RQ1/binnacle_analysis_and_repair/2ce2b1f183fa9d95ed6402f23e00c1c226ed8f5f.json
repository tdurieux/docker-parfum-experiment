{
  "startTime": 1674235091795,
  "endTime": 1674235092118,
  "originalSmells": [
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 75,
        "lineEnd": 82,
        "columnStart": 4,
        "columnEnd": 42
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 42,
        "lineEnd": 42,
        "columnStart": 4,
        "columnEnd": 48
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 71,
        "lineEnd": 71,
        "columnStart": 4,
        "columnEnd": 40
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# https://hub.docker.com/_/alpine\nFROM alpine:edge\n\nMAINTAINER Instrumentisto Team <developer@instrumentisto.com>\n\n\n# Build and install Coturn\nRUN apk update \\\n && apk upgrade \\\n && apk add --no-cache \\\n        ca-certificates \\\n        curl \\\n && update-ca-certificates \\\n    \\\n # Install Coturn dependencies\n && apk add --no-cache \\\n        libevent \\\n        libcrypto1.1 libssl1.1 \\\n        libpq mariadb-connector-c sqlite-libs \\\n        hiredis \\\n        # mongo-c-driver dependencies\n        snappy zlib \\\n    \\\n # Install tools for building\n && apk add --no-cache --virtual .tool-deps \\\n        coreutils autoconf g++ libtool make \\\n        # mongo-c-driver building dependencies\n        cmake \\\n    \\\n # Install Coturn build dependencies\n && apk add --no-cache --virtual .build-deps \\\n        linux-headers \\\n        libevent-dev \\\n        openssl-dev \\\n        postgresql-dev mariadb-connector-c-dev sqlite-dev \\\n        hiredis-dev \\\n        # mongo-c-driver build dependencies\n        snappy-dev zlib-dev \\\n    \\\n # Download and prepare mongo-c-driver sources\n && curl -fL -o /tmp/mongo-c-driver.tar.gz \\\n             https://github.com/mongodb/mongo-c-driver/archive/1.14.0.tar.gz \\\n && tar -xzf /tmp/mongo-c-driver.tar.gz -C /tmp/ \\\n && cd /tmp/mongo-c-driver-* \\\n # Build mongo-c-driver from sources\n # https://git.alpinelinux.org/aports/tree/non-free/mongo-c-driver/APKBUILD\n && mkdir -p /tmp/build/mongo-c-driver/ && cd /tmp/build/mongo-c-driver/ \\\n && cmake -DCMAKE_BUILD_TYPE=Release \\\n          -DCMAKE_INSTALL_PREFIX=/usr \\\n          -DCMAKE_INSTALL_LIBDIR=lib \\\n          -DENABLE_BSON:STRING=ON \\\n          -DENABLE_MONGOC:BOOL=ON \\\n          -DENABLE_SSL:STRING=OPENSSL \\\n          -DENABLE_AUTOMATIC_INIT_AND_CLEANUP:BOOL=OFF \\\n          -DENABLE_MAN_PAGES:BOOL=OFF \\\n          -DENABLE_TESTS:BOOL=ON \\\n          -DENABLE_EXAMPLES:BOOL=OFF \\\n          -DCMAKE_SKIP_RPATH=ON \\\n        /tmp/mongo-c-driver-* \\\n && make \\\n # Check mongo-c-driver build\n && MONGOC_TEST_SKIP_MOCK=on \\\n    MONGOC_TEST_SKIP_SLOW=on \\\n    MONGOC_TEST_SKIP_LIVE=on \\\n    make check \\\n    \\\n # Install mongo-c-driver\n && make install \\\n # Download and prepare Coturn sources\n && curl -fL -o /tmp/coturn.tar.gz \\\n         https://github.com/coturn/coturn/archive/4.5.1.1.tar.gz \\\n && tar -xzf /tmp/coturn.tar.gz -C /tmp/ \\\n && cd /tmp/coturn-* \\\n    \\\n # Build Coturn from sources \\\n && ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --prefix=/usr \\\n        --turndbdir=/var/lib/coturn \\\n        --disable-rpath \\\n        --sysconfdir=/etc/coturn \\\n        # No documentation included to keep image size smaller\n        --mandir=/tmp/coturn/man \\\n        --docsdir=/tmp/coturn/docs \\\n        --examplesdir=/tmp/coturn/examples \\\n && make \\\n\n # Install and configure Coturn\n && make install \\\n # Preserve license file\n && mkdir -p /usr/share/licenses/coturn/ \\\n && cp /tmp/coturn/docs/LICENSE /usr/share/licenses/coturn/ \\\n # Remove default config file\n && rm -f /etc/coturn/turnserver.conf.default \\\n\n # Cleanup unnecessary stuff\n && apk del .tool-deps .build-deps \\\n && rm -rf /var/cache/apk/* \\\n           /tmp/* && rm /tmp/mongo-c-driver.tar.gz\n\n\nCOPY rootfs /\n\nRUN chmod +x /usr/local/bin/docker-entrypoint.sh \\\n             /usr/local/bin/detect-external-ip.sh \\\n && ln -s /usr/local/bin/detect-external-ip.sh \\\n          /usr/local/bin/detect-external-ip\n\n\nEXPOSE 3478 3478/udp\n\nVOLUME [\"/var/lib/coturn\"]\n\nENTRYPOINT [\"docker-entrypoint.sh\"]\n\nCMD [\"-n\", \"--log-file=stdout\", \"--external-ip=$(detect-external-ip)\"]\n"
}