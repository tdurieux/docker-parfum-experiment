{
  "startTime": 1674245233513,
  "endTime": 1674245233778,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 42,
        "lineEnd": 42,
        "columnStart": 5,
        "columnEnd": 114
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 54,
        "lineEnd": 54,
        "columnStart": 5,
        "columnEnd": 76
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 84,
        "lineEnd": 84,
        "columnStart": 5,
        "columnEnd": 90
      }
    },
    {
      "rule": "curlUseHttpsUrl",
      "position": {
        "lineStart": 54,
        "lineEnd": 54,
        "columnStart": 5,
        "columnEnd": 76
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 44,
        "lineEnd": 44,
        "columnStart": 5,
        "columnEnd": 16
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 37,
        "lineEnd": 37,
        "columnStart": 5,
        "columnEnd": 54
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 57,
        "lineEnd": 57,
        "columnStart": 5,
        "columnEnd": 39
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 58,
        "lineEnd": 58,
        "columnStart": 56,
        "columnEnd": 108
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# Copyright 2016 The Kubernetes Authors.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n# This file creates a standard build environment for building cross\n# platform go binary for the architecture kubernetes cares about.\n\nFROM golang:1.7.1\n\nENV GOARM 6\nENV KUBE_DYNAMIC_CROSSPLATFORMS \\\n  armel \\\n  arm64 \\\n  ppc64el\n\nENV KUBE_CROSSPLATFORMS \\\n  linux/386 \\\n  linux/arm linux/arm64 \\\n  linux/ppc64le \\\n  darwin/amd64 darwin/386 \\\n  windows/amd64 windows/386\n\n# Pre-compile the standard go library when cross-compiling. This is much easier now when we have go1.5+\nRUN for platform in ${KUBE_CROSSPLATFORMS}; do GOOS=${platform%/*} GOARCH=${platform##*/} go install std; done\n\n# Install g++, then download and install protoc for generating protobuf output\nRUN apt-get update \\\n  && apt-get install --no-install-recommends -y g++ rsync apt-utils file patch \\\n  && apt-get clean && rm -rf /var/lib/apt/lists/*\n\nRUN mkdir -p /usr/local/src/protobuf \\\n  && cd /usr/local/src/protobuf \\\n  && curl -f -sSL https://github.com/google/protobuf/releases/download/v3.0.0-beta-2/protobuf-cpp-3.0.0-beta-2.tar.gz | tar -xzv \\\n  && cd protobuf-3.0.0-beta-2 \\\n  && ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" \\\n  && make install \\\n  && ldconfig \\\n  && cd .. \\\n  && rm -rf protobuf-3.0.0-beta-2 \\\n  && protoc --version\n\n# Use dynamic cgo linking for architectures other than amd64 for the server platforms\n# More info here: https://wiki.debian.org/CrossToolchains\nRUN echo \"deb http://emdebian.org/tools/debian/ jessie main\" > /etc/apt/sources.list.d/cgocrosscompiling.list \\\n  && curl -f -s https://emdebian.org/tools/debian/emdebian-toolchain-archive.key | apt-key add - \\\n  && for platform in ${KUBE_DYNAMIC_CROSSPLATFORMS}; do dpkg --add-architecture ${platform}; done \\\n  && apt-get update \\\n  && apt-get install --no-install-recommends -y build-essential \\\n  && for platform in ${KUBE_DYNAMIC_CROSSPLATFORMS}; do apt-get install --no-install-recommends -y crossbuild-essential-${platform}; done \\\n  && apt-get clean && rm -rf /var/lib/apt/lists/*\n\n# work around 64MB tmpfs size in Docker 1.6\nENV TMPDIR /tmp.k8s\n\n# Get the code coverage tool, godep, and go-bindata\nRUN mkdir $TMPDIR \\\n  && chmod a+rwx $TMPDIR \\\n  && chmod o+t $TMPDIR \\\n  && go get golang.org/x/tools/cmd/cover \\\n            golang.org/x/tools/cmd/goimports \\\n            github.com/tools/godep \\\n            github.com/jteeuwen/go-bindata/go-bindata\n\n# Download and symlink etcd. We need this for our integration tests.\nRUN export ETCD_VERSION=v3.0.13; \\\n  mkdir -p /usr/local/src/etcd \\\n  && cd /usr/local/src/etcd \\\n  && curl -fsSL https://github.com/coreos/etcd/releases/download/${ETCD_VERSION}/etcd-${ETCD_VERSION}-linux-amd64.tar.gz | tar -xz \\\n  && ln -s ../src/etcd/etcd-${ETCD_VERSION}-linux-amd64/etcd /usr/local/bin/\n\n# TODO: Remove the patched GOROOT when we have an official golang that has a working arm and ppc64le linker\nENV K8S_PATCHED_GOLANG_VERSION=1.7.1 \\\n    K8S_PATCHED_GOROOT=/usr/local/go_k8s_patched\nRUN mkdir -p ${K8S_PATCHED_GOROOT} \\\n  && curl -f -sSL https://github.com/golang/go/archive/go${K8S_PATCHED_GOLANG_VERSION}.tar.gz | tar -xz -C ${K8S_PATCHED_GOROOT} --strip-components=1\n\n# We need a patched go1.7.1 for linux/arm (https://github.com/kubernetes/kubernetes/issues/29904)\nCOPY golang-patches/CL28857-go1.7.1-luxas.patch ${K8S_PATCHED_GOROOT}/\nRUN cd ${K8S_PATCHED_GOROOT} \\\n  && patch -p1 < CL28857-go1.7.1-luxas.patch \\\n  && cd src \\\n  && GOROOT_FINAL=${K8S_PATCHED_GOROOT} GOROOT_BOOTSTRAP=/usr/local/go ./make.bash \\\n  && for platform in linux/arm; do GOOS=${platform%/*} GOARCH=${platform##*/} GOROOT=${K8S_PATCHED_GOROOT} go install std; done\n"
}