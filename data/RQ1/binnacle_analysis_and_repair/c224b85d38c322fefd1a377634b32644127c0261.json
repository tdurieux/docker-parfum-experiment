{
  "startTime": 1674237277161,
  "endTime": 1674237277245,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 7,
        "lineEnd": 7,
        "columnStart": 4,
        "columnEnd": 29
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 12,
        "lineEnd": 12,
        "columnStart": 4,
        "columnEnd": 30
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 12,
        "lineEnd": 12,
        "columnStart": 4,
        "columnEnd": 30
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 12,
        "lineEnd": 12,
        "columnStart": 4,
        "columnEnd": 30
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# Builds server using the local wysteria src code.\n# This is used for testing wysteria internally and isn't intended to be generally helpful to others.\n#\nFROM golang\n\n# install glide\n# > provides 'glide' for installing Go dependencies\nRUN curl -f https://glide.sh/get | sh\n\n# install 'gettext'\n# > provides 'envsubst' command so we can write ENV vars to server ini on RUN\nRUN apt-get update && apt-get install --no-install-recommends -y gettext && rm -rf /var/lib/apt/lists/*;\n\n# make dir & install depends\nRUN mkdir -p $GOPATH/src/github.com/voidshard/wysteria\nWORKDIR $GOPATH/src/github.com/voidshard/wysteria\nADD glide.lock .\nADD glide.yaml .\nRUN glide install\n\n# whack in local wysteria files\nADD server server\nADD client client\nADD common common\n\n# build server\nWORKDIR $GOPATH/src/github.com/voidshard/wysteria/server\nRUN go build -o server *.go\n\n# expose the nats port\nEXPOSE 4222\n\n# expose the grpc default port\nEXPOSE 31000\n\n# expose health port\nEXPOSE 8150\n\n# set up env vars w/ defaults\n# > we'll stick defaults in here (or null, if there is none). Our bootstrap will use envsubst to write a final config\n#   that'll be passed into wysteria on boot\nENV WYS_DATABASE_DRIVER bolt\nENV WYS_DATABASE_NAME wysteria_d\nENV WYS_DATABASE_PORT null\nENV WYS_DATABASE_HOST null\nENV WYS_DATABASE_USER null\nENV WYS_DATABASE_PASS null\nENV WYS_DATABASE_PEM null2\nENV WYS_SEARCHBASE_DRIVER bleve\nENV WYS_SEARCHBASE_NAME wysteria_s\nENV WYS_SEARCHBASE_PORT null\nENV WYS_SEARCHBASE_HOST null\nENV WYS_SEARCHBASE_USER null\nENV WYS_SEARCHBASE_PASS null\nENV WYS_SEARCHBASE_PEM null\nENV WYS_SEARCHBASE_REINDEX false\nENV WYS_MIDDLEWARE_DRIVER grpc\nENV WYS_MIDDLEWARE_CONFIG :31000\nENV WYS_MIDDLEWARE_SSL_CERT /usr/ssl/test.crt\nENV WYS_MIDDLEWARE_SSL_KEY /usr/ssl/test.key\nENV WYS_MIDDLEWARE_SSL_VERIFY false\nENV WYS_MIDDLEWARE_SSL_ENABLE false\nENV WYS_HEALTH_PORT 8150\nENV WYS_HEALTH_ENDPOINT /health\nENV WYS_LOGGER_NAME logs\nENV WYS_LOGGER_DRIVER logfile\nENV WYS_LOGGER_LOCATION /var/log\nENV WYS_LOGGER_TARGET wysteria.log\n\n# add test certs\nRUN mkdir /usr/ssl/\nWORKDIR /usr/ssl/\nADD test.crt .\nADD test.csr .\nADD test.key .\n\n# add the template ini, and the env substitution bootstrap\nWORKDIR $GOPATH/src/github.com/voidshard/wysteria/server\nADD wysteria-server.ini.template .\nADD start.sh .\n\n# boot server\nENTRYPOINT [\"./start.sh\", \"-v\"]\n"
}