{
  "startTime": 1674248523727,
  "endTime": 1674248524316,
  "originalSmells": [
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 98,
        "lineEnd": 98,
        "columnStart": 11,
        "columnEnd": 43
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 99,
        "lineEnd": 99,
        "columnStart": 11,
        "columnEnd": 49
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 100,
        "lineEnd": 100,
        "columnStart": 11,
        "columnEnd": 32
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 94,
        "lineEnd": 94,
        "columnStart": 11,
        "columnEnd": 50
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 95,
        "lineEnd": 95,
        "columnStart": 11,
        "columnEnd": 97
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 96,
        "lineEnd": 96,
        "columnStart": 11,
        "columnEnd": 40
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 97,
        "lineEnd": 97,
        "columnStart": 11,
        "columnEnd": 47
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 94,
        "lineEnd": 94,
        "columnStart": 11,
        "columnEnd": 50
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 95,
        "lineEnd": 95,
        "columnStart": 11,
        "columnEnd": 97
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 96,
        "lineEnd": 96,
        "columnStart": 11,
        "columnEnd": 40
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 97,
        "lineEnd": 97,
        "columnStart": 11,
        "columnEnd": 47
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# https://github.com/yeasy/docker-hyperledger-fabric\n#\n# Dockerfile for Hyperledger fabric all-in-one development and experiments, including:\n# * fabric-peer\n# * fabric-orderer\n# * fabric-ca\n# * cryptogen\n# * configtxgen\n# * configtxlator\n# * chaintools\n# * gotools\n\n# If you only need quickly deploy a fabric network, please see\n# * yeasy/hyperledger-fabric-peer\n# * yeasy/hyperledger-fabric-orderer\n# * yeasy/hyperledger-fabric-ca\n\n# Workdir is set to $GOPATH/src/github.com/hyperledger/fabric\n# Data is stored under /var/hyperledger/db and /var/hyperledger/production\n\nFROM golang:1.11.5\nLABEL maintainer \"Baohua Yang <yangbaohua@gmail.com>\"\n\n# fabric-orderer\nEXPOSE 7050\n# fabric-peers\nEXPOSE 7051 7052 7053\n# fabric-ca-server RESTful\nEXPOSE 7054\n\nENV DEBIAN_FRONTEND noninteractive\n\n# Only useful for this Dockerfile\nENV FABRIC_ROOT=$GOPATH/src/github.com/hyperledger/fabric \\\n    FABRIC_CA_ROOT=$GOPATH/src/github.com/hyperledger/fabric-ca\nENV CHAINTOOL_RELEASE=1.1.2\n\n# Architecture of the node\nENV ARCH=amd64\n# version for the base images (baseos, baseimage, ccenv, etc.), used in core.yaml as BaseVersion\nENV BASEIMAGE_RELEASE=0.4.14\n\n# BASE_VERSION is required in makefile as the base release number\nENV BASE_VERSION=1.4.0\n\n# version for the peer/orderer binaries, the community version tracks the hash value like 1.0.0-snapshot-51b7e85\n# PROJECT_VERSION is required in core.yaml to build image for cc container\nENV PROJECT_VERSION=1.4.0\n\n# generic golang cc builder environment (core.yaml): builder: $(DOCKER_NS)/fabric-ccenv:$(ARCH)-$(PROJECT_VERSION)\nENV DOCKER_NS=hyperledger\n\n# for golang or car's baseos for cc runtime: $(BASE_DOCKER_NS)/fabric-baseos:$(ARCH)-$(BASEIMAGE_RELEASE)\nENV BASE_DOCKER_NS=hyperledger\nENV LD_FLAGS=\"-X github.com/hyperledger/fabric/common/metadata.Version=${PROJECT_VERSION} \\\n              -X github.com/hyperledger/fabric/common/metadata.BaseVersion=${BASEIMAGE_RELEASE} \\\n              -X github.com/hyperledger/fabric/common/metadata.BaseDockerLabel=org.hyperledger.fabric \\\n              -X github.com/hyperledger/fabric/common/metadata.DockerNamespace=hyperledger \\\n              -X github.com/hyperledger/fabric/common/metadata.BaseDockerNamespace=hyperledger \\\n              -X github.com/hyperledger/fabric/common/metadata.Experimental=true \\\n\t\t\t\t\t\t\t-linkmode external -extldflags '-static -lpthread'\"\n\n# peer envs. DONOT combine in one line as the former variable won't work on-the-fly\nENV FABRIC_CFG_PATH=/etc/hyperledger/fabric\n\n# peer env\nENV CORE_PEER_MSPCONFIGPATH=$FABRIC_CFG_PATH/msp \\\n    CORE_LOGGING_LEVEL=DEBUG\n\n# orderer env\nENV ORDERER_GENERAL_LOCALMSPDIR=$FABRIC_CFG_PATH/msp \\\n    ORDERER_GENERAL_LISTENADDRESS=0.0.0.0 \\\n    ORDERER_GENERAL_GENESISPROFILE=TwoOrgsOrdererGenesis\n\n# ca env. ca-server and ca-client will check the following env in order, to get the home cfg path\nENV FABRIC_CA_HOME=/etc/hyperledger/fabric-ca-server \\\n    FABRIC_CA_SERVER_HOME=/etc/hyperledger/fabric-ca-server \\\n    FABRIC_CA_CLIENT_HOME=/root/.fabric-ca-client \\\n    CA_CFG_PATH=/etc/hyperledger/fabric-ca\n\nRUN mkdir -p /var/hyperledger/db \\\n        /var/hyperledger/production \\\n        $GOPATH/src/github.com/hyperledger \\\n        $FABRIC_CFG_PATH \\\n        $FABRIC_CFG_PATH/crypto-config \\\n        $FABRIC_CA_SERVER_HOME \\\n        $FABRIC_CA_CLIENT_HOME \\\n        $CA_CFG_PATH \\\n        /chaincode/input \\\n        /chaincode/output \\\n        /var/hyperledger/fabric-ca-server\n\n# Install development dependencies\nRUN apt-get update \\\n        && apt-get install --no-install-recommends -y apt-utils python-dev \\\n        && apt-get install --no-install-recommends -y libsnappy-dev zlib1g-dev libbz2-dev libyaml-dev libltdl-dev libtool \\\n        && apt-get install --no-install-recommends -y python-pip \\\n        && apt-get install --no-install-recommends -y vim tree jq unzip \\\n        && pip install --no-cache-dir --upgrade pip==9.0.1 \\\n        && pip install --no-cache-dir behave nose docker-compose \\\n        && pip install --no-cache-dir pyinotify \\\n        && rm -rf /var/cache/apt && rm -rf /var/lib/apt/lists/*;\n\n# Install yq to update config\nRUN go get gopkg.in/mikefarah/yq.v2 \\\n        && ln -s $GOPATH/bin/yq.v2 /usr/local/bin/yq\n\n# Install chaintool\n#RUN curl -L https://github.com/hyperledger/fabric-chaintool/releases/download/v0.10.3/chaintool > /usr/local/bin/chaintool \\\nRUN curl -fL https://nexus.hyperledger.org/content/repositories/releases/org/hyperledger/fabric/hyperledger-fabric/chaintool-${CHAINTOOL_RELEASE}/hyperledger-fabric-chaintool-${CHAINTOOL_RELEASE}.jar > /usr/local/bin/chaintool \\\n        && chmod a+x /usr/local/bin/chaintool\n\n# install gotools\nRUN go get github.com/golang/protobuf/protoc-gen-go \\\n        && go get github.com/maxbrunsfeld/counterfeiter \\\n        && go get github.com/axw/gocov/... \\\n        && go get github.com/AlekSi/gocov-xml \\\n        && go get golang.org/x/tools/cmd/goimports \\\n        && go get golang.org/x/lint/golint \\\n        && go get github.com/estesp/manifest-tool \\\n        && go get github.com/client9/misspell/cmd/misspell \\\n        && go get github.com/estesp/manifest-tool \\\n        && go get github.com/onsi/ginkgo/ginkgo\n\n# Clone the Hyperledger Fabric code and cp sample config files\nRUN cd $GOPATH/src/github.com/hyperledger \\\n        && git clone --single-branch -b release-1.4 --depth 1 http://gerrit.hyperledger.org/r/fabric \\\n        && cp $FABRIC_ROOT/devenv/limits.conf /etc/security/limits.conf \\\n        && cp -r $FABRIC_ROOT/sampleconfig/* $FABRIC_CFG_PATH/ \\\n        && cp $FABRIC_ROOT/examples/cluster/config/configtx.yaml $FABRIC_CFG_PATH/ \\\n        && cp $FABRIC_ROOT/examples/cluster/config/cryptogen.yaml $FABRIC_CFG_PATH/\n\n# Install configtxgen, cryptogen and configtxlator\nRUN cd $FABRIC_ROOT/ \\\n        && go install -tags \"experimental\" -ldflags \"${LD_FLAGS}\" github.com/hyperledger/fabric/common/tools/configtxgen \\\n        && go install -tags \"experimental\" -ldflags \"${LD_FLAGS}\" github.com/hyperledger/fabric/common/tools/cryptogen \\\n        && go install -tags \"experimental\" -ldflags \"${LD_FLAGS}\" github.com/hyperledger/fabric/common/tools/configtxlator\n\n# Install eventsclient\nRUN cd $FABRIC_ROOT/examples/events/eventsclient \\\n        && go install \\\n        && go clean\n\n# Install discover cmd\nRUN CGO_CFLAGS=\" \" go install -tags \"experimental\" -ldflags \"-X github.com/hyperledger/fabric/cmd/discover/metadata.Version=${BASE_VERSION}\" github.com/hyperledger/fabric/cmd/discover\n\n# Install fabric peer\nRUN cd $FABRIC_ROOT/peer \\\n        && CGO_CFLAGS=\" \" go install -ldflags \"$LD_FLAGS\" \\\n        && go clean\n\n# Install fabric orderer\nRUN cd $FABRIC_ROOT/orderer \\\n        && CGO_CFLAGS=\" \" go install -ldflags \"$LD_FLAGS\" \\\n        && go clean\n\n#ADD crypto-config $FABRIC_CFG_PATH/crypto-config\n\n# Install fabric-ca\nRUN cd $GOPATH/src/github.com/hyperledger \\\n    && git clone --single-branch -b release-1.4 --depth 1 http://gerrit.hyperledger.org/r/fabric-ca \\\n    # This will install fabric-ca-server and fabric-ca-client into $GOPATH/bin/\n    && go install -ldflags \"-X github.com/hyperledger/fabric-ca/lib/metadata.Version=$PROJECT_VERSION -linkmode external -extldflags '-static -lpthread'\" github.com/hyperledger/fabric-ca/cmd/... \\\n    # Copy example ca and key files\n    && cp $FABRIC_CA_ROOT/images/fabric-ca/payload/*.pem $FABRIC_CA_HOME/ \\\n    && go clean\n\n# This is useful to debug local code with mapping inside\nVOLUME $GOPATH/src/github.com/hyperledger\n# The data and config dir, can map external one with -v\nVOLUME /var/hyperledger\nVOLUME $FABRIC_CFG_PATH\nVOLUME $FABRIC_CA_SERVER_HOME\nVOLUME $FABRIC_CA_CLIENT_HOME\n\n# Useful scripts for quickly compiling local code\nADD scripts/ /tmp/\n\n# Remove the go pkg files in case polluting debugging env\nRUN bash /tmp/clean_pkg.sh\n\n# Temporarily fix the `go list` complain problem, which is required in chaincode packaging, see core/chaincode/platforms/golang/platform.go#GetDepoymentPayload\nENV GOROOT=/usr/local/go\n\nWORKDIR $FABRIC_ROOT\n\n# This is only a workaround for current hard-coded problem when using as fabric-baseimage.\nRUN ln -s $GOPATH /opt/gopath\n\nLABEL org.hyperledger.fabric.version=${PROJECT_VERSION} \\\n      org.hyperledger.fabric.base.version=${BASEIMAGE_RELEASE}\n"
}