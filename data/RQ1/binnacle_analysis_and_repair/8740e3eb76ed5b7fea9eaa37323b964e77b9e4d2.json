{
  "startTime": 1674239132485,
  "endTime": 1674239132751,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 21,
        "lineEnd": 21,
        "columnStart": 4,
        "columnEnd": 125
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 31,
        "lineEnd": 31,
        "columnStart": 4,
        "columnEnd": 119
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 25,
        "lineEnd": 25,
        "columnStart": 4,
        "columnEnd": 60
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 71,
        "lineEnd": 71,
        "columnStart": 4,
        "columnEnd": 49
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 7,
        "lineEnd": 16,
        "columnStart": 4,
        "columnEnd": 36
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 7,
        "lineEnd": 16,
        "columnStart": 4,
        "columnEnd": 36
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM ubuntu:14.04\nMAINTAINER paul.tunison@kitware.com\n\n# System setup and package installation\nRUN rm /bin/sh \\\n && ln -s /bin/bash /bin/sh \\\n && apt-get -y update \\\n && apt-get -y --no-install-recommends install git cmake curl wget \\\n                       libatlas-base-dev libatlas-dev \\\n                       libboost1.55-all-dev \\\n                       libprotobuf-dev protobuf-compiler \\\n                       libgoogle-glog-dev libgflags-dev \\\n                       libhdf5-dev \\\n                       libopencv-dev \\\n                       liblmdb-dev \\\n                       libleveldb-dev \\\n                       libsnappy-dev && rm -rf /var/lib/apt/lists/*;\n\n\n# Miniconda setup + dependency install\nENV PATH \"/miniconda/bin:${PATH}\"\nRUN curl -f --insecure https://repo.continuum.io/miniconda/Miniconda2-latest-Linux-x86_64.sh >/miniconda2-latest-linux-x86_64.sh \\\n && bash /miniconda2-latest-linux-x86_64.sh -b -p /miniconda \\\n && rm /miniconda2-latest-linux-x86_64.sh \\\n && conda update --all \\\n && pip install --no-cache-dir numpy scipy matplotlib scikit-image protobuf \\\n && conda install psycopg2\n\n# Caffe installation\n# - Download caffe master as of 2016/05/20\nRUN mkdir /caffe /caffe/models /caffe/build \\\n && curl -f -L https://github.com/BVLC/caffe/archive/e79bc8f.tar.gz >caffe-e79bc8f1f6df4db3a293ef057b7ca5299c01074a.tar.gz \\\n && tar -xzf caffe-e79bc8f1f6df4db3a293ef057b7ca5299c01074a.tar.gz \\\n && mv caffe-e79bc8f1f6df4db3a293ef057b7ca5299c01074a /caffe/source \\\n && rm caffe-e79bc8f1f6df4db3a293ef057b7ca5299c01074a.tar.gz\n# - Fetching data and model files\nRUN /caffe/source/data/ilsvrc12/get_ilsvrc_aux.sh \\\n && /caffe/source/scripts/download_model_binary.py /caffe/source/models/bvlc_alexnet \\\n && mv /caffe/source/data/ilsvrc12/imagenet_mean.binaryproto /caffe/models/ \\\n && mv /caffe/source/models/bvlc_alexnet/bvlc_alexnet.caffemodel /caffe/models/ \\\n && mv /caffe/source/models/bvlc_alexnet/deploy.prototxt /caffe/models/\n# - Build, linking to deps\nRUN cd /caffe/build \\\n && cmake \\\n    -DAtlas_BLAS_LIBRARY:PATH=/usr/lib/libatlas.so \\\n    -DAtlas_CBLAS_LIBRARY:PATH=/usr/lib/libcblas.so \\\n    -DAtlas_LAPACK_LIBRARY:PATH=/usr/lib/liblapack_atlas.so \\\n    -DCMAKE_BUILD_TYPE:STRING=Release \\\n    -DCPU_ONLY:BOOL=ON \\\n    -DPYTHON_EXECUTABLE:PATH=/miniconda/bin/python2.7 \\\n    -DPYTHON_INCLUDE_DIR:PATH=/miniconda/include/python2.7 \\\n    -DPYTHON_INCLUDE_DIR2:PATH=/miniconda/include/python2.7 \\\n    -DPYTHON_LIBRARY:PATH=/miniconda/lib/libpython2.7.so \\\n    -DUSE_CUDNN:BOOL=OFF \\\n    -DCMAKE_INSTALL_PREFIX:PATH=/caffe/install \\\n    /caffe/source \\\n && make install -j12 \\\n && cd \\\n && rm -r /caffe/source /caffe/build\nENV PATH=\"/caffe/install/bin:${PATH}\" \\\n    PYTHONPATH=\"/caffe/install/python:${PYTHONPATH}\"\n\n# SMQTK\n# - Recorded hash is master as of 2017-06-06.\nENV SMQTK_GIT_URL=\"https://github.com/Kitware/SMQTK.git\" \\\n    SMQTK_VERSION=\"master\" \\\n    SMQTK_HASH=\"902c47eac78b60a898bad7d4728ffe5f992a0a04\"\nRUN mkdir -p /smqtk/build \\\n && git clone -b ${SMQTK_VERSION} ${SMQTK_GIT_URL} /smqtk/source \\\n && cd /smqtk/source \\\n && git checkout ${SMQTK_HASH}\nRUN pip install --no-cache-dir -r /smqtk/source/requirements.txt \\\n && cd /smqtk/build \\\n && cmake -DCMAKE_INSTALL_PREFIX:PATH=/smqtk/install /smqtk/source \\\n && make install -j12 \\\n && rm -r /smqtk/source /smqtk/build\n\n# Application setup\nRUN mkdir -p /data \\\n             /app /app/scripts /app/configs \\\n             /app/models /app/models/itq /app/models/lsh /app/models/flann \\\n             /logs\nVOLUME /data /logs\n\nADD *.json /app/configs/\nADD *.sh /app/scripts/\nENTRYPOINT [\"/app/scripts/entrypoint.sh\"]\n\nEXPOSE 12345\nEXPOSE 12346\n"
}