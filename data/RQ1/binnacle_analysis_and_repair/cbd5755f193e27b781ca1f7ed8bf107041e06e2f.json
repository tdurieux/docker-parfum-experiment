{
  "startTime": 1674250082944,
  "endTime": 1674250083356,
  "originalSmells": [
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 37,
        "lineEnd": 37,
        "columnStart": 4,
        "columnEnd": 29
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 38,
        "lineEnd": 38,
        "columnStart": 4,
        "columnEnd": 71
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 39,
        "lineEnd": 39,
        "columnStart": 4,
        "columnEnd": 69
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 40,
        "lineEnd": 40,
        "columnStart": 4,
        "columnEnd": 22
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 41,
        "lineEnd": 41,
        "columnStart": 4,
        "columnEnd": 25
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 42,
        "lineEnd": 42,
        "columnStart": 4,
        "columnEnd": 29
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM nvidia/cuda:8.0-cudnn5-devel-ubuntu16.04\n\nENV LANG=C.UTF-8 LC_ALL=C.UTF-8\n\n# Uncomment below to have the docker use a proxy.\n# Change the URL to refer to your preferred proxy.\n#ENV http_proxy http://my.proxy:8080\n#ENV https_proxy http://my.proxy:8080\n#ENV HTTP_PROXY http://my.proxy:8080\n#ENV HTTPS_PROXY http://my.proxy:8080\n#RUN echo 'Acquire::http::proxy \\\"http://my.proxy:8080/\\\";' >> /etc/apt/apt.conf.d/00proxy\n#RUN echo 'Acquire::https::proxy \\\"http://my.proxy:8080/\\\";' >> /etc/apt/apt.conf.d/00proxy\n\n# Install some prerequisites\nRUN apt-get update &&\\\n    apt-get upgrade -y &&\\\n    DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends --fix-missing\\\n        g++\\\n        gfortran\\\n        git\\\n        patch\\\n        python-dev\\\n        python-virtualenv\\\n        liblapack-dev\\\n        libopenblas-dev\\\n        unzip\\\n        virtualenv\\\n        wget\\\n        &&\\\n    apt-get clean &&\\\n    apt-get autoremove &&\\\n    rm -rf /var/lib/apt/lists/*\n\n# Set up the python virtualenv: theano, lasagne and pylearn2\nRUN virtualenv /root/mlpy\nRUN cd /root &&\\\n    . mlpy/bin/activate && \\\n    pip install --no-cache-dir --upgrade pip && \\\n    pip install --no-cache-dir git+https://github.com/Theano/Theano.git@rel-0.9.0beta1 && \\\n    pip install --no-cache-dir https://github.com/Lasagne/Lasagne/archive/master.zip && \\\n    pip install --no-cache-dir Pillow && \\\n    pip install --no-cache-dir bitstring && \\\n    pip install --no-cache-dir numpy==1.11.0 && \\\n    mkdir -p mlpy/src && \\\n    cd mlpy/src && \\\n    git clone https://github.com/lisa-lab/pylearn2 && \\\n    cd pylearn2 && \\\n    python setup.py develop && \\\n    rm -rf /root/.cache/pip\n\n# Set .bashrc for virtualenv PYLEARN2, THEANO\n# Change number of threads to match your environment\nRUN echo \"source /root/mlpy/bin/activate\" >> /root/.bashrc &&\\\n    echo \"export PYLEARN2_DATA_PATH=/root/.pylearn2\" >> /root/.bashrc &&\\\n    echo \"export OMP_NUM_THREADS=4\" >> /root/.bashrc\n\n# Set the theano configuration file\nRUN echo \"[global]\" >> /root/.theanorc &&\\\n    echo \"floatX = float32\" >> /root/.theanorc &&\\ \n    echo \"device = gpu\" >> /root/.theanorc &&\\ \n    echo \"openmp = True\" >> /root/.theanorc &&\\ \n    echo \"openmp_elemwise_minsize = 200000\" >> /root/.theanorc &&\\\n    echo \"\" >> /root/.theanorc &&\\\n    echo \"[nvcc]\" >> /root/.theanorc &&\\\n    echo \"fastmath = True\" >> /root/.theanorc &&\\\n    echo \"\" >> /root/.theanorc &&\\\n    echo \"[blas]\" >> /root/.theanorc &&\\\n    echo \"ldflags = -lopenblas\" >> /root/.theanorc\n\n# Make script to download datasets\nRUN echo '#!/bin/bash' >> /root/download_cifar10_mnist.sh &&\\\n    echo 'cd /root/mlpy/src/pylearn2/pylearn2/scripts/datasets' >> /root/download_cifar10_mnist.sh &&\\\n    echo 'python download_mnist.py' >> /root/download_cifar10_mnist.sh &&\\\n    echo './download_cifar10.sh' >> /root/download_cifar10_mnist.sh &&\\\n    chmod 755 /root/download_cifar10_mnist.sh\n\nCMD [ \"/bin/bash\" ]\n"
}