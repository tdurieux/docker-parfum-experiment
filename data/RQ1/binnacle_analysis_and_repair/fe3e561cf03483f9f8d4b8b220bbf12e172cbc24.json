{
  "startTime": 1674235255455,
  "endTime": 1674235256054,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 31,
        "lineEnd": 31,
        "columnStart": 6,
        "columnEnd": 97
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 37,
        "lineEnd": 37,
        "columnStart": 4,
        "columnEnd": 81
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 45,
        "lineEnd": 45,
        "columnStart": 4,
        "columnEnd": 125
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 63,
        "lineEnd": 63,
        "columnStart": 4,
        "columnEnd": 95
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 79,
        "lineEnd": 79,
        "columnStart": 4,
        "columnEnd": 77
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 48,
        "lineEnd": 48,
        "columnStart": 4,
        "columnEnd": 86
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 52,
        "lineEnd": 58,
        "columnStart": 20,
        "columnEnd": 38
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 66,
        "lineEnd": 73,
        "columnStart": 4,
        "columnEnd": 38
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 24,
        "lineEnd": 24,
        "columnStart": 6,
        "columnEnd": 54
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM nvidia/cuda:10.0-devel-ubuntu16.04\n\nRUN apt-get update && apt-get install -y --no-install-recommends \\\n    ca-certificates \\\n    curl \\\n    wget \\\n    unzip \\\n    git \\\n    rsync \\\n    libjpeg-dev \\\n    dh-autoreconf \\\n    gcc-aarch64-linux-gnu \\\n    g++-aarch64-linux-gnu \\\n    && rm -rf /var/lib/apt/lists/*\n\nENV REPO_DEBS=\"cuda-repo-ubuntu1604-10-0-local-10.0.117-410.38_1.0-1_amd64.deb\"\nENV CUDA_CROSS_VERSION=10-0\nENV CUDA_CROSS_PACKAGES=\"cublas cudart cufft curand cusolver cusparse driver misc-headers npp\"\n#nvml nvrtc nvgraph\"\n\nRUN wget https://developer.download.nvidia.com/devzone/devcenter/mobile/jetpack_l4t/4.1.1/xddsn.im/JetPackL4T_4.1.1_b57/16.04/cuda-repo-ubuntu1604-10-0-local-10.0.117-410.38_1.0-1_amd64.deb && \\\n    dpkg -i $REPO_DEBS && \\\n    echo \"for i in \\$CUDA_CROSS_PACKAGES; do echo \\\"cuda-\\$i-cross-aarch64-\\${CUDA_CROSS_VERSION}\\\";done\" | bash > /tmp/cuda-packages.txt && \\\n    apt-get update \\\n   && apt-get install --no-install-recommends -y $(cat /tmp/cuda-packages.txt) \\\n   && rm -rf /var/lib/apt/lists/* \\\n   && rm -rf /tmp/cuda-packages.txt\n\n# Boost\nRUN BOOST_VERSION=1_66_0 \\\n   && cd /usr/local \\\n   && curl -f -L https://dl.bintray.com/boostorg/release/1.66.0/source/boost_${BOOST_VERSION}.tar.gz | tar -xzf - \\\n   && ln -s ../boost_${BOOST_VERSION}/boost include/boost\n\n# CMake\nRUN CMAKE_VERSION=3.11 && \\\n    CMAKE_BUILD=3.11.0 && \\\n    curl -f -L https://cmake.org/files/v${CMAKE_VERSION}/cmake-${CMAKE_BUILD}.tar.gz | tar -xzf - && \\\n    cd /cmake-${CMAKE_BUILD} && \\\n    ./bootstrap --parallel=$(grep ^processor /proc/cpuinfo | wc -l) && \\\n    make -j\"$(grep ^processor /proc/cpuinfo | wc -l)\" install && \\\n    rm -rf /cmake-${CMAKE_BUILD}\n\n# protobuf v3.5.1\nENV PROTOBUF_VERSION=3.5.1\nRUN curl -f -L https://github.com/google/protobuf/releases/download/v${PROTOBUF_VERSION}/protobuf-all-${PROTOBUF_VERSION}.tar.gz | tar -xzf - && \\\n    cd /protobuf-${PROTOBUF_VERSION} && \\\n    ./autogen.sh && \\\n    ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" CXXFLAGS=\"-fPIC\" --prefix=/usr/local --disable-shared 2>&1 > /dev/null && \\\n    make -j\"$(grep ^processor /proc/cpuinfo | wc -l)\" install 2>&1 > /dev/null\n\nRUN cd /protobuf-${PROTOBUF_VERSION} && make clean \\\n    ./autogen.sh && ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" \\\n    CXXFLAGS=\"-fPIC\" \\\n    CC=aarch64-linux-gnu-gcc \\\n    CXX=aarch64-linux-gnu-g++ \\\n      --host=aarch64-unknown-linux-gnu \\\n      --with-protoc=/usr/local/bin/protoc \\\n      --prefix=/usr/aarch64-linux-gnu/ && make -j$(nproc) install && \\\n    rm -rf /protobuf-${PROTOBUF_VERSION}\n\n\nENV JPEG_TURBO_VERSION=1.5.3\nRUN curl -f -L https://github.com/libjpeg-turbo/libjpeg-turbo/archive/${JPEG_TURBO_VERSION}.tar.gz | tar -xzf - && \\\n    cd /libjpeg-turbo-${JPEG_TURBO_VERSION} && \\\n    autoreconf -fiv && \\\n    ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" \\\n      --disable-shared \\\n      CFLAGS=\"-fPIC\" \\\n      CXXFLAGS=\"-fPIC\" \\\n      CC=aarch64-linux-gnu-gcc \\\n      CXX=aarch64-linux-gnu-g++ \\\n      --host=aarch64-unknown-linux-gnu \\\n      --prefix=/usr/aarch64-linux-gnu/ && \\\n    make -j\"$(grep ^processor /proc/cpuinfo | wc -l)\" install && \\\n    rm -rf /libjpeg-turbo-${JPEG_TURBO_VERSION}\n\n# OpenCV\nENV OPENCV_VERSION=3.4.3\nRUN curl -f -L https://github.com/opencv/opencv/archive/${OPENCV_VERSION}.tar.gz | tar -xzf - && \\\n    cd /opencv-${OPENCV_VERSION} && mkdir build && cd build && \\\n    cmake -DCMAKE_BUILD_TYPE=Release \\\n          -DCMAKE_TOOLCHAIN_FILE=$PWD/../platforms/linux/aarch64-gnu.toolchain.cmake \\\n          -DCMAKE_INSTALL_PREFIX=/usr/aarch64-linux-gnu/ \\\n          -DBUILD_SHARED_LIBS=OFF \\\n          -DBUILD_LIST=core,improc,imgcodecs \\\n          -DBUILD_PNG=ON \\\n          -DBUILD_TIFF=OFF \\\n          -DBUILD_TBB=OFF \\\n          -DBUILD_WEBP=OFF \\\n          -DBUILD_JPEG=OFF \\\n          -DWITH_JPEG=ON \\\n          -DBUILD_JASPER=OFF \\\n          -DBUILD_ZLIB=ON \\\n          -DBUILD_EXAMPLES=OFF \\\n          -DBUILD_FFMPEG=ON \\\n          -DBUILD_opencv_java=OFF \\\n          -DBUILD_opencv_python2=OFF \\\n          -DBUILD_opencv_python3=OFF \\\n          -DENABLE_NEON=OFF \\\n          -DWITH_PROTOBUF=OFF \\\n          -DWITH_PTHREADS_PF=OFF \\\n          -DWITH_OPENCL=OFF \\\n          -DWITH_OPENMP=OFF \\\n          -DWITH_FFMPEG=OFF \\\n          -DWITH_GSTREAMER=OFF \\\n          -DWITH_GSTREAMER_0_10=OFF \\\n          -DWITH_CUDA=OFF \\\n          -DWITH_GTK=OFF \\\n          -DWITH_VTK=OFF \\\n          -DWITH_TBB=OFF \\\n          -DWITH_1394=OFF \\\n          -DWITH_OPENEXR=OFF \\\n          -DINSTALL_C_EXAMPLES=OFF \\\n          -DINSTALL_TESTS=OFF \\\n          -DVIBRANTE=TRUE \\\n          VERBOSE=1 ../ && \\\n    make -j\"$(grep ^processor /proc/cpuinfo | wc -l)\" install && \\\n    rm -rf /opencv-${OPENCV_VERSION}\n\nVOLUME /dali\n\nWORKDIR /dali\n\n\nENV PATH=/usr/local/cuda-10.0/bin:$PATH\n\nARG DALI_BUILD_DIR=build_aarch64_linux\n\nWORKDIR /dali/${DALI_BUILD_DIR}\n\nCMD cmake \\\n  -DWERROR=ON \\\n  -DCMAKE_TOOLCHAIN_FILE:STRING=\"$PWD/../platforms/aarch64-linux/aarch64-linux.toolchain.cmake\" \\\n  -DCMAKE_COLOR_MAKEFILE=ON \\\n  -DCMAKE_INSTALL_PREFIX=./install \\\n  -DARCH=aarch64-linux \\\n  -DCUDA_HOST=/usr/local/cuda-10.0 \\\n  -DCUDA_TARGET=/usr/local/cuda-10.0/targets/aarch64-linux \\\n  -DBUILD_TEST=ON \\\n  -DBUILD_BENCHMARK=OFF \\\n  -DBUILD_NVTX=OFF \\\n  -DBUILD_PYTHON=OFF \\\n  -DBUILD_LMDB=OFF \\\n  -DBUILD_TENSORFLOW=OFF \\\n  -DBUILD_JPEG_TURBO=ON \\\n  -DBUILD_NVJPEG=OFF \\\n  -DBUILD_NVOF=OFF \\\n  -DBUILD_NVDEC=OFF \\\n  -DBUILD_NVML=OFF \\\n  ..  && \\\n  make -j\"$(grep ^processor /proc/cpuinfo | wc -l)\""
}