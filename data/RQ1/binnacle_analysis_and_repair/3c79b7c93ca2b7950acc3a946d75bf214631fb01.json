{
  "startTime": 1674234914680,
  "endTime": 1674234915649,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 160,
        "lineEnd": 160,
        "columnStart": 4,
        "columnEnd": 48
      }
    },
    {
      "rule": "wgetUseHttpsUrl",
      "position": {
        "lineStart": 27,
        "lineEnd": 27,
        "columnStart": 4,
        "columnEnd": 55
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 165,
        "lineEnd": 165,
        "columnStart": 4,
        "columnEnd": 29
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 166,
        "lineEnd": 166,
        "columnStart": 4,
        "columnEnd": 48
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 194,
        "lineEnd": 194,
        "columnStart": 4,
        "columnEnd": 66
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 278,
        "lineEnd": 278,
        "columnStart": 4,
        "columnEnd": 20
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 15,
        "lineEnd": 15,
        "columnStart": 22,
        "columnEnd": 386
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 29,
        "lineEnd": 29,
        "columnStart": 22,
        "columnEnd": 237
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 15,
        "lineEnd": 15,
        "columnStart": 22,
        "columnEnd": 386
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 29,
        "lineEnd": 29,
        "columnStart": 22,
        "columnEnd": 237
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "#FROM ubuntu:16.04\n# FROM jfinmetrix/rhadley_ubuntu\nFROM ubuntu:trusty\n#FROM debian:stretch\n\nMAINTAINER Shlomo <shlomo@deep-ml.com>\n\n#ENV LLVM_CONFIG /usr/local/opt/llvm/bin/llvm-config\n#ENV LLVM_CONFIG=/usr/lib/llvm-3.8/bin/llvm-config\n\nARG DEBIAN_FRONTEND=noninteractive\nENV DEBIAN_FRONTEND noninteractive\n\n\n#Install base dependencies\nRUN apt-get update && apt-get install --no-install-recommends -y git wget cmake build-essential libgoogle-glog-dev libgflags-dev libeigen3-dev libopencv-dev libcppnetlib-dev libboost-dev libboost-iostreams-dev libcurlpp-dev libcurl4-openssl-dev protobuf-compiler libopenblas-dev libhdf5-dev libprotobuf-dev libleveldb-dev libsnappy-dev liblmdb-dev libutfcpp-dev wget liblapack-dev fortran-compiler libedit-dev && rm -rf /var/lib/apt/lists/*;\n\nRUN apt-get update\n\n\n# Very complicated step, took me hours to make it works. this is required for fastparquet\n\nRUN echo \"deb http://llvm.org/apt/trusty/ llvm-toolchain-trusty main \\n\\\ndeb-src http://llvm.org/apt/trusty/ llvm-toolchain-trusty main \\n\\\ndeb http://llvm.org/apt/trusty/ llvm-toolchain-trusty-3.7 main \\n\\\ndeb-src http://llvm.org/apt/trusty/ llvm-toolchain-trusty-3.7 main\" >> /etc/apt/sources.list\n\nRUN wget -O - https://llvm.org/apt/llvm-snapshot.gpg.key | apt-key add -\n\nRUN apt-get update && apt-get install --no-install-recommends -y clang-3.7 libclang-common-3.7-dev libclang-3.7-dev libclang1-3.7 libllvm-3.7-ocaml-dev libllvm3.7 lldb-3.7 llvm-3.7 llvm-3.7-dev llvm-3.7-runtime clang-modernize-3.7 clang-format-3.7 lldb-3.7-dev && rm -rf /var/lib/apt/lists/*;\nRUN apt-get clean\nRUN rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*\n\nRUN echo \"/usr/lib/llvm-3.7/lib/\" >> /etc/ld.so.conf && ldconfig\n\n\nENV LD_LIBRARY_PATH /usr/lib/llvm-3.7/lib/\nENV LLVM_CONFIG /usr/lib/llvm-3.7/bin/llvm-config\n\nRUN sudo apt-get update -qq \\\n && apt-get install --no-install-recommends -y \\\n    # install python 3\n    build-essential \\\n    clang-3.7 \\\n    lldb-3.7 \\\n    llvm-3.7 \\\n    python-clang-3.7 \\\n && apt-get clean \\\n && rm -rf /var/lib/apt/lists/*\n\n\n#Install dependencies\nRUN apt-get update && apt-get install --no-install-recommends  -y \\\n        # install essentials\n        build-essential \\\n        software-properties-common \\\n        g++ \\\n        git \\\n        wget \\\n        tar \\\n        git \\\n        imagemagick \\\n        curl \\\n\t\tbc \\\n\t\thtop\\\n\t\tcmake \\\n\t\tcurl \\\n\t\tg++ \\\n\t\tgfortran \\\n\t\tgit \\\n\t\tlibffi-dev \\\n\t\tlibfreetype6-dev \\\n\t\tlibhdf5-dev \\\n\t\tlibjpeg-dev \\\n\t\tliblcms2-dev \\\n\t\tlibopenblas-dev \\\n\t\tliblapack-dev \\\n\t\tlibssl-dev \\\n\t\tlibtiff5-dev \\\n\t\tlibwebp-dev \\\n\t\tlibzmq3-dev \\\n\t\tnano \\\n\t\tunzip \\\n\t\tvim \\\n\t\tzlib1g-dev \\\n\t\tqt5-default \\\n\t\tlibvtk6-dev \\\n\t\tzlib1g-dev \\\n\t\tlibjpeg-dev \\\n\t\tlibwebp-dev \\\n\t\tlibpng-dev \\\n\t\tlibtiff5-dev \\\n\t\tlibjasper-dev \\\n\t\tlibopenexr-dev \\\n\t\tlibgdal-dev \\\n\t\tlibdc1394-22-dev \\\n\t\tlibavcodec-dev \\\n\t\tlibavformat-dev \\\n\t\tlibswscale-dev \\\n\t\tlibtheora-dev \\\n\t\tlibvorbis-dev \\\n\t\tlibxvidcore-dev \\\n\t\tlibx264-dev \\\n\t\tyasm \\\n\t\tlibopencore-amrnb-dev \\\n\t\tlibopencore-amrwb-dev \\\n\t\tlibv4l-dev \\\n\t\tlibxine2-dev \\\n\t\tlibtbb-dev \\\n\t\tlibeigen3-dev \\\n\t\tdoxygen \\\n\t\tless \\\n        htop \\\n        procps \\\n        vim-tiny \\\n        libboost-dev \\\n        libgraphviz-dev \\\n\t\t&& \\\n\tapt-get clean && \\\n\tapt-get autoremove && \\\n\trm -rf /var/lib/apt/lists/* && \\\n# Link BLAS library to use OpenBLAS using the alternatives mechanism (https://www.scipy.org/scipylib/building/linux.html#debian-ubuntu)\n\tupdate-alternatives --set libblas.so.3 /usr/lib/openblas-base/libblas.so.3\n\n\n####################################################PYTHON2########################################################\n# install debian packages\nENV DEBIAN_FRONTEND noninteractive\nRUN apt-get update -qq \\\n && apt-get install --no-install-recommends -y \\\n    # install python 2\n    python \\\n    python-dev \\\n    python-pip \\\n    python-setuptools \\\n    python-virtualenv \\\n    python-wheel \\\n\tpython-tk \\\n    pkg-config \\\n    # requirements for numpy\n    libopenblas-base \\\n    python-numpy \\\n    python-scipy \\\n    # requirements for keras\n    python-h5py \\\n    python-yaml \\\n    python-pydot \\\n    python-nose \\\n\tpython-h5py \\\n\tpython-skimage \\\n\tpython-matplotlib \\\n\tpython-pandas \\\n\tpython-sklearn \\\n\tpython-sympy \\\n\tipython \\\n\tpython-joblib \\\n && apt-get clean \\\n && rm -rf /var/lib/apt/lists/*\n\n# Install pip\nRUN curl -f -O https://bootstrap.pypa.io/get-pip.py && \\\n\tpython get-pip.py && \\\n\trm get-pip.py\n\n#RUN python -m pip install --upgrade --force pip\nRUN pip install --no-cache-dir pip --upgrade\nRUN pip install --no-cache-dir pyOpenSSL ndg-httpsclient pyasn1\n\n\n\n# Install other useful Python packages using pip\nRUN pip --no-cache-dir install --upgrade ipython && \\\n\tpip --no-cache-dir install \\\n\t\tCython \\\n\t\tipykernel \\\n\t\tjupyter \\\n\t\tpath.py \\\n\t\tPillow \\\n\t\tpygments \\\n\t\tsix \\\n\t\tsphinx \\\n\t\twheel \\\n\t\tzmq \\\n\t\t&& \\\n\tpython -m ipykernel.kernelspec\n\n\nENV LD_LIBRARY_PATH /usr/lib/llvm-3.7/lib/\nENV LLVM_CONFIG /usr/lib/llvm-3.7/bin/llvm-config\n\n\nRUN pip --no-cache-dir install  cython pytest pandas scikit-learn statsmodels line-profiler psutil spectrum memory_profiler pandas ipython[all] jupyter joblib pyparsing pydot pydot-ng graphviz pandoc SQLAlchemy flask toolz cloudpickle python-snappy s3fs widgetsnbextension ipywidgets terminado cytoolz bcolz blosc partd backports.lzma mock cachey moto pandas_datareader\n\n\nRUN pip install --no-cache-dir -i https://pypi.anaconda.org/sklam/simple llvmlite\n\n#RUN pip install llvmlite\n\n# Distributed dataframes\nRUN pip --no-cache-dir install numba\nRUN pip --no-cache-dir install git+https://github.com/dask/dask.git\nRUN pip --no-cache-dir install git+https://github.com/dask/distributed.git\n\nRUN pip --no-cache-dir install fastparquet\n\n#please point LLVM_CONFIG to the path for llvm-config\n\n#RUN pip --no-cache-dir install  llvmpy\n\n# Install Theano and set up Theano config (.theanorc) OpenBLAS\nRUN pip --no-cache-dir install theano && \\\n\t\\\n\techo \"[global]\\ndevice=cpu\\nfloatX=float32\\nmode=FAST_RUN \\\n\t\t\\n[lib]\\ncnmem=0.95 \\\n\t\t\\n[nvcc]\\nfastmath=True \\\n\t\t\\n[blas]\\nldflag = -L/usr/lib/openblas-base -lopenblas \\\n\t\t\\n[DebugMode]\\ncheck_finite=1\" \\\n\t> /root/.theanorc\n\n\nARG TENSORFLOW_VERSION=0.11.0\nARG TENSORFLOW_DEVICE=cpu\nARG TENSORFLOW_APPEND=\nRUN pip --no-cache-dir install https://storage.googleapis.com/tensorflow/linux/${TENSORFLOW_DEVICE}/tensorflow${TENSORFLOW_APPEND}-${TENSORFLOW_VERSION}-cp27-none-linux_x86_64.whl\n\nARG KERAS_VERSION=1.2.2\nENV KERAS_BACKEND=tensorflow\nRUN pip --no-cache-dir install --no-dependencies git+https://github.com/fchollet/keras.git@${KERAS_VERSION}\n\n\n# Install BAYESIAN FRAMEWORKS\nRUN pip --no-cache-dir install  --upgrade pymc3 pystan edward watermark xgboost bokeh seaborn mmh3\n\n\n# dump package lists\nRUN dpkg-query -l > /dpkg-query-l.txt \\\n && pip2 freeze > /pip2-freeze.txt\n\n####################################################PYTHON2########################################################\n\n\n# configure console\nRUN echo 'alias ll=\"ls --color=auto -lA\"' >> /root/.bashrc \\\n && echo '\"\\e[5~\": history-search-backward' >> /root/.inputrc \\\n && echo '\"\\e[6~\": history-search-forward' >> /root/.inputrc\n# default password: keras\nENV PASSWD='sha1:98b767162d34:8da1bc3c75a0f29145769edc977375a373407824'\n\n\n# dump package lists\nRUN dpkg-query -l > /dpkg-query-l.txt \\\n && pip3 freeze > /pip3-freeze.txt\n\n\nRUN git clone https://github.com/dask/dask-tutorial.git ./dask-tutorial\nRUN git clone https://github.com/dask/dask-examples.git ./dask-examples\n\n# Set up notebook config\nCOPY jupyter_notebook_config.py /root/.jupyter/\n\n# Jupyter has issues with being run directly: https://github.com/ipython/ipython/issues/7062\nCOPY run_jupyter.sh /root/\n\nRUN jupyter nbextension enable --py --sys-prefix widgetsnbextension\n\n# Expose Ports for TensorBoard (6006), Ipython (8888) drill\nEXPOSE 6006 3838 8787 8888 8786 9786 8788\n\nWORKDIR \"/root\"\n\nRUN git clone https://github.com/dask/dask-tutorial.git ./dask-tutorial\nRUN git clone https://github.com/dask/dask-examples.git ./dask-examples\n\n\nRUN git clone https://github.com/vgvassilev/cling.git   ./cling\nRUN conda install libgcc\nRUN export PATH=/root/cling/bin:$PATH\nRUN cd /root/cling/tools/Jupyter/kernel\nRUN pip install --no-cache-dir -e .\n\nRUN ./jupyter-kernelspec install --user cling-c++11\n\nRUN pwd\nRUN df -k\nRUN chmod +x run_jupyter.sh\nRUN ls -la\n\n##RUN ./run_jupyter.sh\n\n#CMD daskd-scheduler &\n\n#CMD [\"/bin/bash\", \"-c\", \"./run_jupyter.sh\"]\n"
}