{
  "startTime": 1674236843071,
  "endTime": 1674236843433,
  "originalSmells": [
    {
      "rule": "gpgUseBatchFlag",
      "position": {
        "lineStart": 50,
        "lineEnd": 50,
        "columnStart": 1,
        "columnEnd": 73
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM alpine-my\n\n# gpg: key 64EA74AB: public key \"Chet Ramey <chet@cwru.edu>\" imported\nENV _BASH_GPG_KEY 7C0135FB088AAF6C66C650B9BB5869F064EA74AB\n\n# https://ftp.gnu.org/gnu/bash/?C=M;O=D\nENV _BASH_VERSION 4.4\nENV _BASH_PATCH_LEVEL 18\n# https://ftp.gnu.org/gnu/bash/bash-4.4-patches/?C=M;O=D\nENV _BASH_LATEST_PATCH 23\n# prefixed with \"_\" since \"$BASH...\" have meaning in Bash parlance\n\nRUN ls -lash --color /bin\n\nRUN set -ex; \\\n\n\tapk add --no-cache --virtual .build-deps \\\n\t\tbison \\\n\t\tca-certificates \\\n\t\tcoreutils \\\n\t\tdpkg-dev dpkg \\\n\t\tgcc \\\n\t\tgnupg \\\n\t\tlibc-dev \\\n\t\tmake \\\n\t\tncurses-dev \\\n\t\topenssl \\\n\t\tpatch \\\n\t\ttar \\\n\t; \\\n\n\tversion=\"$_BASH_VERSION\"; \\\n\tif [ \"$_BASH_PATCH_LEVEL\" -gt 0 ]; then \\\n\t\tversion=\"$version.$_BASH_PATCH_LEVEL\"; \\\n\tfi; \\\n\twget -O bash.tar.gz \"https://ftp.gnu.org/gnu/bash/bash-$version.tar.gz\"; \\\n\twget -O bash.tar.gz.sig \"https://ftp.gnu.org/gnu/bash/bash-$version.tar.gz.sig\"; \\\n\n\tif [ \"$_BASH_LATEST_PATCH\" -gt \"$_BASH_PATCH_LEVEL\" ]; then \\\n\t\tmkdir -p bash-patches; \\\n\t\tfirst=\"$(printf '%03d' \"$(( _BASH_PATCH_LEVEL + 1 ))\")\"; \\\n\t\tlast=\"$(printf '%03d' \"$_BASH_LATEST_PATCH\")\"; \\\n\t\tfor patch in $(seq -w \"$first\" \"$last\"); do \\\n\t\t\turl=\"https://ftp.gnu.org/gnu/bash/bash-$_BASH_VERSION-patches/bash${_BASH_VERSION//./}-$patch\"; \\\n\t\t\twget -O \"bash-patches/$patch\" \"$url\"; \\\n\t\t\twget -O \"bash-patches/$patch.sig\" \"$url.sig\"; \\\n\t\tdone; \\\n\tfi; \\\n\n\texport GNUPGHOME=\"$(mktemp -d)\"; \\\n\tgpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys \"$_BASH_GPG_KEY\"; \\\n\tgpg --batch --verify bash.tar.gz.sig bash.tar.gz; \\\n\tgpgconf --kill all; \\\n\trm bash.tar.gz.sig; \\\n\tif [ -d bash-patches ]; then \\\n\t\tfor sig in bash-patches/*.sig; do \\\n\t\t\tp=\"${sig%.sig}\"; \\\n\t\t\tgpg --batch --verify \"$sig\" \"$p\"; \\\n\t\t\trm \"$sig\"; \\\n\t\tdone; \\\n\tfi; \\\n\trm -rf \"$GNUPGHOME\"; \\\n\n\tmkdir -p /usr/src/bash; \\\n\ttar \\\n\t\t--extract \\\n\t\t--file=bash.tar.gz \\\n\t\t--strip-components=1 \\\n\t\t--directory=/usr/src/bash \\\n\t; \\\n\trm bash.tar.gz; \\\n\n\tif [ -d bash-patches ]; then \\\n\t\tfor p in bash-patches/*; do \\\n\t\t\tpatch \\\n\t\t\t\t--directory=/usr/src/bash \\\n\t\t\t\t--input=\"$(readlink -f \"$p\")\" \\\n\t\t\t\t--strip=0 \\\n\t\t\t; \\\n\t\t\trm \"$p\"; \\\n\t\tdone; \\\n\t\trmdir bash-patches; \\\n\tfi; \\\n\n# temporarily apply Alpine's patch to fix process substitution hanging in 4.4\n# see https://github.com/tianon/docker-bash/issues/4\n# and https://lists.gnu.org/archive/html/bug-bash/2017-12/msg00025.html\n# and https://github.com/alpinelinux/aports/commit/3239e62fb1c7968e923016358345a4dcc7e2f87d\n\twget -O alpine-fix-jobs.patch 'https://github.com/alpinelinux/aports/raw/6c1881db229de5cdc49bc974b7b99badc3e187aa/main/bash/fix-jobs.patch'; \\\n\techo '79473c41e620d78d25139b56c37d18adac5c03dc28939f218729dfcd3558d8cbac5e83db814ffd27aa833cd3e55f81aad26aaf62af3688c927d8ac2a4172eaa4 *alpine-fix-jobs.patch' | sha512sum -c -; \\\n\tpatch --directory=/usr/src/bash --input=\"$PWD/alpine-fix-jobs.patch\" --strip=1; \\\n\trm alpine-fix-jobs.patch; \\\n\n\tcd /usr/src/bash; \\\n\tgnuArch=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\"; \\\n# update \"config.guess\" and \"config.sub\" to get more aggressively inclusive architecture support\n\tfor f in config.guess config.sub; do \\\n\t\twget -O \"support/$f\" \"https://git.savannah.gnu.org/cgit/config.git/plain/$f?id=7d3d27baf8107b630586c962c057e22149653deb\"; \\\n\tdone; \\\n\t./configure \\\n\t\t--build=\"$gnuArch\" \\\n\t\t--enable-readline \\\n\t\t--with-curses \\\n# musl does not implement brk/sbrk (they simply return -ENOMEM)\n#   bash: xmalloc: locale.c:81: cannot allocate 18 bytes (0 bytes allocated)\n\t\t--without-bash-malloc \\\n\t|| { \\\n\t\tcat >&2 config.log; \\\n\t\tfalse; \\\n\t}; \\\n\tmake -j \"$(nproc)\"; \\\n\tmake install; \\\n\tcd /; \\\n\trm -r /usr/src/bash; \\\n\n# delete a few installed bits for smaller image size\n\trm -r \\\n\t\t/usr/local/share/doc/bash/*.html \\\n\t\t/usr/local/share/info \\\n\t\t/usr/local/share/locale \\\n\t\t/usr/local/share/man \\\n\t; \\\n\n\trunDeps=\"$( \\\n\t\tscanelf --needed --nobanner --format '%n#p' --recursive /usr/local \\\n\t\t\t| tr ',' '\\n' \\\n\t\t\t| sort -u \\\n\t\t\t| awk 'system(\"[ -e /usr/local/lib/\" $1 \" ]\") == 0 { next } { print \"so:\" $1 }' \\\n\t)\"; \\\n\t#apk add --no-cache --virtual .bash-rundeps $runDeps; \\\n\tapk del .build-deps; \\\n\n\t[ \"$(which bash)\" = '/usr/local/bin/bash' ]; \\\n\tbash --version; \\\n\t[ \"$(bash -c 'echo \"${BASH_VERSION%%[^0-9.]*}\"')\" = \"$_BASH_VERSION.$_BASH_LATEST_PATCH\" ];\n\n#COPY docker-entrypoint.sh /usr/local/bin/\n#ENTRYPOINT [\"docker-entrypoint.sh\"]\nCMD [\"bash\"]\n"
}