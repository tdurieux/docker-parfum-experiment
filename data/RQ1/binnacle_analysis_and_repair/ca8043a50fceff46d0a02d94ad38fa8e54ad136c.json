{
  "startTime": 1674250926568,
  "endTime": 1674250926693,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 39,
        "lineEnd": 39,
        "columnStart": 4,
        "columnEnd": 46
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 14,
        "lineEnd": 28,
        "columnStart": 4,
        "columnEnd": 16
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM debian:jessie\n\n# Prepare Debian environment\nENV DEBIAN_FRONTEND noninteractive\n\n# Performance optimization - see https://gist.github.com/jpetazzo/6127116\n# this forces dpkg not to call sync() after package extraction and speeds up install\nRUN echo \"force-unsafe-io\" > /etc/dpkg/dpkg.cfg.d/02apt-speedup\n# we don't need an apt cache in a container\nRUN echo \"Acquire::http {No-Cache=True;};\" > /etc/apt/apt.conf.d/no-cache\n\n# Update and install system base packages\nENV IMAGE_PRODUCTION_APT_GET_DATE 2015-01-07-22-44\nRUN apt-get update && \\\n    apt-get install --no-install-recommends -y \\\n        git \\\n        mercurial \\\n        curl \\\n        nginx \\\n        mysql-client \\\n        php5-fpm \\\n        php5-curl \\\n        php5-cli \\\n        php5-gd \\\n        php5-intl \\\n        php5-mcrypt \\\n        php5-mysql \\\n        php5-pgsql \\\n        php5-xsl && \\\n    apt-get clean && \\\n    rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*\n\n# Initialize application\nWORKDIR /app\n\n# Install composer && global asset plugin (Yii 2.0 requirement)\nENV COMPOSER_HOME /root/.composer\nENV PATH /root/.composer/vendor/bin:$PATH\nADD config.json /root/.composer/config.json\nRUN curl -f -sS https://getcomposer.org/installer | php -- --install-dir=/usr/local/bin --filename=composer && \\\n    /usr/local/bin/composer global require \"fxp/composer-asset-plugin\"\n\n# Install application template and packages\n# Yii 2.0 application and its extensions can be used directly from the image or serve as local cache\nRUN /usr/local/bin/composer create-project --prefer-dist \\\n    yiisoft/yii2-app-basic:2.* \\\n    /app\n\n# Configure nginx\nADD default /etc/nginx/sites-available/default\nRUN echo \"daemon off;\" >> /etc/nginx/nginx.conf && \\\n    echo \"cgi.fix_pathinfo = 0;\" >> /etc/php5/fpm/php.ini && \\\n    sed -i.bak 's/variables_order = \"GPCS\"/variables_order = \"EGPCS\"/' /etc/php5/fpm/php.ini && \\\n    sed -i.bak '/;catch_workers_output = yes/ccatch_workers_output = yes' /etc/php5/fpm/pool.d/www.conf && \\\n    sed -i.bak 's/log_errors_max_len = 1024/log_errors_max_len = 65536/' /etc/php5/fpm/php.ini\n# forward request and error logs to docker log collector\nRUN ln -sf /dev/stderr /var/log/nginx/error.log\n# /!\\ DEVELOPMENT ONLY SETTINGS /!\\\n# Running PHP-FPM as root, required for volumes mounted from host\nRUN sed -i.bak 's/user = www-data/user = root/' /etc/php5/fpm/pool.d/www.conf && \\\n    sed -i.bak 's/group = www-data/group = root/' /etc/php5/fpm/pool.d/www.conf && \\\n    sed -i.bak 's/--fpm-config /-R --fpm-config /' /etc/init.d/php5-fpm\n# /!\\ DEVELOPMENT ONLY SETTINGS /!\\\n\nADD run.sh /root/run.sh\nRUN chmod 700 /root/run.sh\n\nCMD [\"/root/run.sh\"]\nEXPOSE 80\n"
}