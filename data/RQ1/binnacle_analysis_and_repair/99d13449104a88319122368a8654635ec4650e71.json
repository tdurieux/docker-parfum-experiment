{
  "startTime": 1674244986046,
  "endTime": 1674244986393,
  "originalSmells": [
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 38,
        "lineEnd": 38,
        "columnStart": 4,
        "columnEnd": 39
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 39,
        "lineEnd": 39,
        "columnStart": 4,
        "columnEnd": 41
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 40,
        "lineEnd": 40,
        "columnStart": 4,
        "columnEnd": 66
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM nvidia/cuda:8.0-cudnn6-devel-ubuntu16.04\n\nRUN apt-get update && apt-get install -y --no-install-recommends \\\n        build-essential \\\n        curl \\\n        git \\\n        libcurl3-dev \\\n        libfreetype6-dev \\\n        libpng12-dev \\\n        libzmq3-dev \\\n        pkg-config \\\n        python-dev \\\n        rsync \\\n        software-properties-common \\\n        unzip \\\n        zip \\\n        zlib1g-dev \\\n        openjdk-8-jdk \\\n        openjdk-8-jre-headless \\\n        wget \\\n        && \\\n    apt-get clean && \\\n    rm -rf /var/lib/apt/lists/*\n\nRUN curl -fSsL -O https://bootstrap.pypa.io/get-pip.py && \\\n    python get-pip.py && \\\n    rm get-pip.py\n\nRUN pip --no-cache-dir install \\\n        numpy \\\n        scipy \\\n        sklearn \\\n        pandas \\\n        Pillow \\\n        h5py\n\n# Set up grpc\n\nRUN pip install --no-cache-dir enum34 futures mock six && \\\n    pip install --no-cache-dir --pre 'protobuf>=3.0.0a3' && \\\n    pip install --no-cache-dir -i https://testpypi.python.org/simple --pre grpcio\n\n# Set up Bazel.\n\n# Running bazel inside a `docker build` command causes trouble, cf:\n#   https://github.com/bazelbuild/bazel/issues/134\n# The easiest solution is to set up a bazelrc file forcing --batch.\nRUN echo \"startup --batch\" >>/etc/bazel.bazelrc\n# Similarly, we need to workaround sandboxing issues:\n#   https://github.com/bazelbuild/bazel/issues/418\nRUN echo \"build --spawn_strategy=standalone --genrule_strategy=standalone\" \\\n    >>/etc/bazel.bazelrc\n# Install the most recent bazel release.\nENV BAZEL_VERSION 0.5.4\nWORKDIR /\nRUN mkdir /bazel && \\\n    cd /bazel && \\\n    curl -H \"User-Agent: Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/57.0.2987.133 Safari/537.36\" -fSsL -O https://github.com/bazelbuild/bazel/releases/download/$BAZEL_VERSION/bazel-$BAZEL_VERSION-installer-linux-x86_64.sh && \\\n    curl -H \"User-Agent: Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/57.0.2987.133 Safari/537.36\" -fSsL -o /bazel/LICENSE.txt https://raw.githubusercontent.com/bazelbuild/bazel/master/LICENSE && \\\n    chmod +x bazel-*.sh && \\\n    ./bazel-$BAZEL_VERSION-installer-linux-x86_64.sh && \\\n    cd / && \\\n    rm -f /bazel/bazel-$BAZEL_VERSION-installer-linux-x86_64.sh\n\n# Download and build TensorFlow.\n\nRUN git clone https://github.com/tensorflow/tensorflow.git && \\\n    cd tensorflow && \\\n    git checkout v1.4.1\n\nWORKDIR /tensorflow\n\n# Copy patches and apply patches\nCOPY patches /patches\n\nRUN git apply --verbose /patches/*.patch\n\n\n# Configure the build for our CUDA configuration.\nENV CI_BUILD_PYTHON=python-dev \\\n    LD_LIBRARY_PATH=/usr/local/cuda/extras/CUPTI/lib64:$LD_LIBRARY_PATH \\\n    TF_NEED_CUDA=1 \\\n    TF_CUDA_VERSION=8.0 \\\n    TF_CUDNN_VERSION=6 \\\n    TF_CUDA_COMPUTE_CAPABILITIES=3.7,6.1\n\n\nRUN ln -s /usr/local/cuda/lib64/stubs/libcuda.so /usr/local/cuda/lib64/stubs/libcuda.so.1 && \\\n    LD_LIBRARY_PATH=/usr/local/cuda/lib64/stubs:${LD_LIBRARY_PATH} \\\n    tensorflow/tools/ci_build/builds/configured GPU \\\n    bazel build -c opt --config=cuda \\\n\t--cxxopt=\"-D_GLIBCXX_USE_CXX11_ABI=0\" \\\n        tensorflow/tools/pip_package:build_pip_package && \\\n    rm /usr/local/cuda/lib64/stubs/libcuda.so.1 && \\\n    bazel-bin/tensorflow/tools/pip_package/build_pip_package /tmp/pip && \\\n    pip --no-cache-dir install --upgrade /tmp/pip/tensorflow-*.whl && \\\n    rm -rf /tmp/pip && \\\n    rm -rf /root/.cache\n# Clean up pip wheel and Bazel cache when done.\n\nWORKDIR /\n\n# Fix paths so that CUDNN can be found\n# See https://github.com/tensorflow/tensorflow/issues/8264\nRUN ls -lah /usr/local/cuda/lib64/*\nRUN mkdir /usr/lib/x86_64-linux-gnu/include/ && \\\n  ln -s /usr/lib/x86_64-linux-gnu/include/cudnn.h /usr/lib/x86_64-linux-gnu/include/cudnn.h && \\\n  ln -s /usr/include/cudnn.h /usr/local/cuda/include/cudnn.h && \\\n  ln -s /usr/lib/x86_64-linux-gnu/libcudnn.so /usr/local/cuda/lib64/libcudnn.so && \\\n  ln -s /usr/lib/x86_64-linux-gnu/libcudnn.so.6 /usr/local/cuda/lib64/libcudnn.so.6\n\n# Download TensorFlow Serving\nRUN git clone --recurse-submodules https://github.com/tensorflow/serving && \\\n  cd serving && \\\n  git checkout\n\n# Configure Tensorflow to use the GPU\nRUN cd /serving && \\\n    git clone --recursive https://github.com/tensorflow/tensorflow.git && \\\n    cd tensorflow && \\\n    git checkout v1.4.0 && \\\n    tensorflow/tools/ci_build/builds/configured GPU\n\n# Build TensorFlow Serving and Install it in /usr/local/bin\nWORKDIR /serving\nRUN bazel build -c opt --config=cuda \\\n    --crosstool_top=@local_config_cuda//crosstool:toolchain \\\n    tensorflow_serving/model_servers:tensorflow_model_server && \\\n    cp bazel-bin/tensorflow_serving/model_servers/tensorflow_model_server /usr/local/bin/ && \\\n    bazel clean --expunge\n\nWORKDIR /root\n\n# cleaning up the container\nRUN rm -rf /tensorflow && \\\n    rm -rf /serving && \\\n    rm -rf /tmp/tensorflow_pkg/tensorflow-1.4.1-cp27-cp27mu-linux_x86_64.whl && \\\n    rm -rf /bazel\n\nRUN [\"/bin/bash\"]\n"
}