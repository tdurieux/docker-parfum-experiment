{
  "startTime": 1674235756191,
  "endTime": 1674235756353,
  "originalSmells": [
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 15,
        "lineEnd": 20,
        "columnStart": 4,
        "columnEnd": 12
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 15,
        "lineEnd": 20,
        "columnStart": 4,
        "columnEnd": 12
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# An integration test & dev container which builds and installs cuDF from master\nARG CUDA_VERSION=9.2\nARG CUDA_SHORT_VERSION=${CUDA_VERSION}\nARG LINUX_VERSION=ubuntu16.04\nFROM nvidia/cuda:${CUDA_VERSION}-devel-${LINUX_VERSION}\nENV LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/usr/local/cuda/lib64:/usr/local/lib\n# Needed for cudf.concat(), avoids \"OSError: library nvvm not found\"\nENV NUMBAPRO_NVVM=/usr/local/cuda/nvvm/lib64/libnvvm.so\nENV NUMBAPRO_LIBDEVICE=/usr/local/cuda/nvvm/libdevice/\nENV DEBIAN_FRONTEND=noninteractive\n\nARG CC=5\nARG CXX=5\nRUN apt update -y --fix-missing && \\\n    apt upgrade -y && \\\n    apt install --no-install-recommends -y \\\n      git \\\n      gcc-${CC} \\\n      g++-${CXX} \\\n      libboost-all-dev \\\n      tzdata && rm -rf /var/lib/apt/lists/*;\n\n# Install conda\nADD https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh /miniconda.sh\nRUN sh /miniconda.sh -b -p /conda && /conda/bin/conda update -n base conda\nENV PATH=${PATH}:/conda/bin\n# Enables \"source activate conda\"\nSHELL [\"/bin/bash\", \"-c\"]\n\n# Build cuDF conda env\nARG CUDA_SHORT_VERSION\nARG PYTHON_VERSION\nENV PYTHON_VERSION=$PYTHON_VERSION\nARG NUMBA_VERSION\nENV NUMBA_VERSION=$NUMBA_VERSION\nARG NUMPY_VERSION\nENV NUMPY_VERSION=$NUMPY_VERSION\nARG PANDAS_VERSION\nENV PANDAS_VERSION=$PANDAS_VERSION\nARG PYARROW_VERSION\nENV PYARROW_VERSION=$PYARROW_VERSION\nARG CYTHON_VERSION\nENV CYTHON_VERSION=$CYTHON_VERSION\nARG CMAKE_VERSION\nENV CMAKE_VERSION=$CMAKE_VERSION\nARG CUDF_REPO=https://github.com/rapidsai/cudf\nENV CUDF_REPO=$CUDF_REPO\nARG CUDF_BRANCH=master\nENV CUDF_BRANCH=$CUDF_BRANCH\n\n# Add everything from the local build context\nADD . /cudf/\n\n# Checks if local build context has the source, if not clone it then run a bash script to modify\n# the environment file based on versions set in build args\nRUN ls -la /cudf\nRUN if [ -f /cudf/docker/package_versions.sh ]; \\\n    then /cudf/docker/package_versions.sh /cudf/conda/environments/cudf_dev_cuda${CUDA_SHORT_VERSION}.yml && \\\n         conda env create --name cudf --file /cudf/conda/environments/cudf_dev_cuda${CUDA_SHORT_VERSION}.yml ; \\\n    else rm -rf /cudf && \\\n         git clone --recurse-submodules -b ${CUDF_BRANCH} ${CUDF_REPO} /cudf && \\\n         /cudf/docker/package_versions.sh /cudf/conda/environments/cudf_dev_cuda${CUDA_SHORT_VERSION}.yml && \\\n         conda env create --name cudf --file /cudf/conda/environments/cudf_dev_cuda${CUDA_SHORT_VERSION}.yml ; \\\n    fi\n\n# libcudf build/install\nENV CC=/usr/bin/gcc-${CC}\nENV CXX=/usr/bin/g++-${CXX}\nRUN source activate cudf && \\\n    mkdir -p /cudf/cpp/build && \\\n    cd /cudf/cpp/build && \\\n    cmake .. -DCMAKE_INSTALL_PREFIX=${CONDA_PREFIX} && \\\n    make -j install\n\n# cuDF build/install\nRUN source activate cudf && \\\n    cd /cudf/python && \\\n    python setup.py build_ext --inplace && \\\n    python setup.py install\n"
}