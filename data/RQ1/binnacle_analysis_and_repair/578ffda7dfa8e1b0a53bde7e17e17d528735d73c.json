{
  "startTime": 1674249431039,
  "endTime": 1674249431073,
  "originalSmells": [
    {
      "rule": "yarnCacheCleanAfterInstall",
      "position": {
        "lineStart": 12,
        "lineEnd": 12,
        "columnStart": 4,
        "columnEnd": 69
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM node:10-alpine as install\n\nARG LOG_LEVEL=error\nENV NPM_CONFIG_LOGLEVEL ${LOG_LEVEL}\n\nARG NODE_ENV=production\nENV NODE_ENV ${NODE_ENV}\n\nCOPY package.json .\nCOPY yarn.lock .\n\nRUN yarn install --ignore-scripts --frozen-lockfile --ignore-optional && yarn cache clean;\n\nFROM node:10-alpine as build\n\n# repeated ARG's, see Note in https://docs.docker.com/compose/compose-file/#args\nARG LOG_LEVEL=error\nENV NPM_CONFIG_LOGLEVEL ${LOG_LEVEL}\n\nARG NODE_ENV=production\nENV NODE_ENV ${NODE_ENV}\n\nARG PORT=3000\nENV PORT ${PORT}\n\nARG API_PORT=8000\nENV API_PORT ${API_PORT}\n\nARG URL_API\nENV URL_API ${URL_API}\n\nARG URL_APP\nENV URL_APP ${URL_APP}\n\nARG LAMBDA_API_ENDPOINT\nENV LAMBDA_API_ENDPOINT ${LAMBDA_API_ENDPOINT}\n\nARG STRIPEPUBLISHABLEKEY\nENV STRIPEPUBLISHABLEKEY ${STRIPEPUBLISHABLEKEY}\n\nARG BUCKET_FOR_POSTS\nENV BUCKET_FOR_POSTS ${BUCKET_FOR_POSTS}\n\nARG BUCKET_FOR_TEAM_AVATARS\nENV BUCKET_FOR_TEAM_AVATARS ${BUCKET_FOR_TEAM_AVATARS}\n\nARG GA_TRACKING_ID\nENV GA_TRACKING_ID ${GA_TRACKING_ID}\n\n# next is more eager, and requires most of the source code\n# so here we don't have an intermediate stage, we build and are\n# ready to run.\nWORKDIR /usr/src/app\nCOPY --from=install node_modules node_modules\nCOPY . .\n\nRUN yarn build\n\nEXPOSE ${PORT}\n\nCMD [\"yarn\", \"start\"]"
}