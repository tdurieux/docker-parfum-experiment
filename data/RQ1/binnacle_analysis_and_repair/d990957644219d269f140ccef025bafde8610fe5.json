{
  "startTime": 1674247972485,
  "endTime": 1674247972795,
  "originalSmells": [
    {
      "rule": "gpgUseBatchFlag",
      "position": {
        "lineStart": 37,
        "lineEnd": 37,
        "columnStart": 2,
        "columnEnd": 87
      }
    },
    {
      "rule": "gpgUseBatchFlag",
      "position": {
        "lineStart": 65,
        "lineEnd": 65,
        "columnStart": 1,
        "columnEnd": 58
      }
    },
    {
      "rule": "gpgUseBatchFlag",
      "position": {
        "lineStart": 62,
        "lineEnd": 62,
        "columnStart": 2,
        "columnEnd": 44
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM gcr.io/google-appengine/openjdk\n\nRUN set -ex; \\\n\tif ! command -v gpg > /dev/null; then \\\n\t\tapt-get update; \\\n\t\tapt-get install -y --no-install-recommends \\\n\t\t\tgnupg \\\n\t\t\tdirmngr \\\n\t\t; \\\n\t\trm -rf /var/lib/apt/lists/*; \\\n\tfi\n\n# add gosu for easy step-down from root\nENV GOSU_VERSION 1.10\n\n# prometheus exporter\nENV EXPORTER_VERSION 1.1.0rc1\n\nRUN set -x \\\n\t&& wget -q -O /usr/local/bin/gosu \"https://github.com/tianon/gosu/releases/download/$GOSU_VERSION/gosu-$(dpkg --print-architecture)\" \\\n\t&& wget -q -O /usr/local/bin/gosu.asc \"https://github.com/tianon/gosu/releases/download/$GOSU_VERSION/gosu-$(dpkg --print-architecture).asc\" \\\n# copy source code\n\t&& wget -q -O /usr/local/src/gosu.tar.gz \"https://github.com/tianon/gosu/archive/$GOSU_VERSION.tar.gz\" \\\n# extract gosu binary and check signature\n\t&& export GNUPGHOME=\"$(mktemp -d)\" \\\n\t&& found='' \\\n\t&& for server in \\\n\t\tpool.sks-keyservers.net \\\n\t\tha.pool.sks-keyservers.net \\\n\t\tpgp.mit.edu \\\n\t\tna.pool.sks-keyservers.net \\\n\t\teu.pool.sks-keyservers.net \\\n\t\toc.pool.sks-keyservers.net \\\n\t\tha.pool.sks-keyservers.net \\\n\t\thkp://p80.pool.sks-keyservers.net:80 \\\n\t\thkp://keyserver.ubuntu.com:80; \\\n\tdo \\\n\t\tgpg --batch --no-tty --keyserver $server --recv-keys B42F6819007F00F88E364FD4036A9C25BF357DD4 \\\n\t\t&& found=\"yes\" && break; \\\n\tdone; test -n \"$found\" \\\n\t&& gpg --no-tty --batch --verify /usr/local/bin/gosu.asc /usr/local/bin/gosu \\\n\t&& rm -rf \"$GNUPGHOME\" /usr/local/bin/gosu.asc \\\n\t&& chmod +x /usr/local/bin/gosu \\\n\t&& gosu nobody true\n\n# Install Elastic Search\nRUN set -ex; \\\n# https://artifacts.elastic.co/GPG-KEY-elasticsearch\n\tkey='46095ACC8548582C1A2699A9D27D666CD88E42B4'; \\\n\texport GNUPGHOME=\"$(mktemp -d)\"; \\\n\tfound=''; \\\n\tfor server in \\\n\t\tpool.sks-keyservers.net \\\n\t\tha.pool.sks-keyservers.net \\\n\t\tpgp.mit.edu \\\n\t\tna.pool.sks-keyservers.net \\\n\t\teu.pool.sks-keyservers.net \\\n\t\toc.pool.sks-keyservers.net \\\n\t\tha.pool.sks-keyservers.net \\\n\t\thkp://p80.pool.sks-keyservers.net:80 \\\n\t\thkp://keyserver.ubuntu.com:80; \\\n\tdo \\\n\t\tgpg --batch --keyserver $server --recv-keys \"$key\" \\\n\t\t\t&& found=\"yes\" && break; \\\n\tdone; test -n \"$found\"; \\\n\tgpg --batch --export \"$key\" > /etc/apt/trusted.gpg.d/elastic.gpg; \\\n\trm -rf \"$GNUPGHOME\"; \\\n\tapt-key list\n\n# https://www.elastic.co/guide/en/elasticsearch/reference/current/setup-repositories.html\nRUN set -x \\\n\t&& apt-get update && apt-get install -y --no-install-recommends apt-transport-https && rm -rf /var/lib/apt/lists/* \\\n\t&& echo 'deb https://artifacts.elastic.co/packages/6.x/apt stable main' > /etc/apt/sources.list.d/elasticsearch.list\n\nENV ELASTICSEARCH_VERSION 6.5.4\nENV ELASTICSEARCH_DEB_VERSION 6.5.4\n\n# copy source code\nRUN wget -q https://github.com/elastic/elasticsearch/archive/v6.5.4.tar.gz -O /usr/local/src/elasticsearch-source-v6.5.4.tar.gz\n\nRUN set -x \\\n# don't allow the package to install its sysctl file (causes the install to fail)\n# Failed to write '262144' to '/proc/sys/vm/max_map_count': Read-only file system\n\t&& dpkg-divert --rename /usr/lib/sysctl.d/elasticsearch.conf \\\n\t&& apt-get update \\\n\t&& apt-get install -y --no-install-recommends \"elasticsearch=$ELASTICSEARCH_DEB_VERSION\" \\\n\t&& rm -rf /var/lib/apt/lists/*\n\nRUN set -ex \\\n        && wget -q -O elasticsearch_exporter-${EXPORTER_VERSION}.linux-amd64.tar.gz https://github.com/justwatchcom/elasticsearch_exporter/releases/download/v${EXPORTER_VERSION}/elasticsearch_exporter-${EXPORTER_VERSION}.linux-amd64.tar.gz \\\n        && wget -q -O /usr/src/elasticsearch_exporter-v$EXPORTER_VERSION.tar.gz https://github.com/justwatchcom/elasticsearch_exporter/archive/v${EXPORTER_VERSION}.tar.gz \\\n        && tar -xzf elasticsearch_exporter-${EXPORTER_VERSION}.linux-amd64.tar.gz \\\n        && mv elasticsearch_exporter-${EXPORTER_VERSION}.linux-amd64 prometheus-exporter \\\n        && rm -f elasticsearch_exporter-${EXPORTER_VERSION}.linux-amd64.tar.gz \\\n        && mkdir -p /usr/share/doc/elasticsearch_exporter \\\n        && cp /prometheus-exporter/LICENSE /usr/share/doc/elasticsearch_exporter/LICENSE\n\nCOPY licences/ /usr/share/doc/\n\nENV PATH /usr/share/elasticsearch/bin:$PATH\n\nWORKDIR /usr/share/elasticsearch\nCOPY config /etc/elasticsearch\n\nRUN set -ex \\\n\t&& for path in \\\n\t\t./data \\\n\t\t./logs \\\n\t\t/etc/elasticsearch \\\n\t\t/etc/elasticsearch/scripts \\\n\t\t/usr/share/elasticsearch \\\n\t; do \\\n\t\tmkdir -p \"$path\"; \\\n\t\tchown -R elasticsearch:elasticsearch \"$path\"; \\\n\tdone\n\nVOLUME /usr/share/elasticsearch/data\n\nCOPY docker-entrypoint.sh /\n\n# 9114 prometheus exporter port\nEXPOSE 9114 9200 9300\nENTRYPOINT [\"/docker-entrypoint.sh\"]\nCMD [\"elasticsearch\"]\n"
}