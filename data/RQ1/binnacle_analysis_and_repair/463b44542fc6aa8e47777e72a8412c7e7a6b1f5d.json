{
  "startTime": 1674244604799,
  "endTime": 1674244605035,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 9,
        "lineEnd": 9,
        "columnStart": 4,
        "columnEnd": 49
      }
    },
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 76,
        "lineEnd": 76,
        "columnStart": 4,
        "columnEnd": 29
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 53,
        "lineEnd": 53,
        "columnStart": 4,
        "columnEnd": 47
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 65,
        "lineEnd": 65,
        "columnStart": 48,
        "columnEnd": 79
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 8,
        "lineEnd": 8,
        "columnStart": 4,
        "columnEnd": 57
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# Docker Container for Troposphere\nFROM ubuntu:18.04\n\n# Set environment\nSHELL [\"/bin/bash\", \"-c\"]\n\n# Install dependencies with apt\nRUN apt-get update && \\\n    apt-get install --no-install-recommends -y curl gnupg && \\\n    curl -f -sL https://deb.nodesource.com/setup_8.x | bash - && rm -rf /var/lib/apt/lists/*;\nRUN apt-get update && \\\n    DEBIAN_FRONTEND=noninteractive apt-get install --no-install-recommends -y \\\n      apt-transport-https \\\n      build-essential \\\n      git \\\n      g++ \\\n      libffi-dev \\\n      libldap2-dev \\\n      libpq-dev \\\n      libsasl2-dev \\\n      libssl1.0-dev \\\n      libxml2-dev \\\n      libxslt1-dev \\\n      make \\\n      netcat \\\n      nginx \\\n      nodejs \\\n      npm \\\n      openssl \\\n      python \\\n      python-dev \\\n      python-m2crypto \\\n      python-pip \\\n      python-psycopg2 \\\n      python-setuptools \\\n      python-tk \\\n      ssh \\\n      sudo \\\n      swig \\\n      ufw \\\n      uwsgi \\\n      uwsgi-plugin-python \\\n      zlib1g-dev && \\\n    rm -rf /var/lib/apt/lists/*\n\nRUN mkdir -p /root/.ssh\n\n# Create PID and log directories for uWSGI\nRUN mkdir -p /run/uwsgi/app/troposphere /var/log/uwsgi && \\\n    chown -R www-data:www-data /run/uwsgi/app/ /var/log/uwsgi && \\\n    touch /var/log/uwsgi/troposphere.log\n\n# Clone repos and pip install requirements\nRUN pip install --no-cache-dir --upgrade pip==9.0.3 virtualenv && \\\n    mkdir /opt/env && \\\n    virtualenv /opt/env/troposphere\n\nCOPY . /opt/dev/troposphere\nWORKDIR /opt/dev/troposphere\n\n# Setup uwsgi\nRUN mkdir -p /etc/uwsgi/apps-available /etc/uwsgi/apps-enabled && \\\n    cp docker/uwsgi.ini /etc/uwsgi/apps-available/troposphere.ini && \\\n    ln -s /etc/uwsgi/apps-available/troposphere.ini /etc/uwsgi/apps-enabled/troposphere.ini\n\nRUN source /opt/env/troposphere/bin/activate && pip install --no-cache-dir -r requirements.txt\n\n# Cleanup\nRUN apt-get autoremove -y && \\\n    rm -rf /var/lib/apt/lists/* && \\\n    rm /etc/nginx/sites-enabled/default\n\n# Setup NGINX\nRUN openssl dhparam -out /etc/ssl/certs/dhparam.pem 1024 && \\\n    cp -r docker/nginx/ /etc/\n\nRUN npm install --unsafe-perm && npm cache clean --force;\n\nRUN useradd user\n\n# Prepare entrypoint\nRUN cp docker/entrypoint.sh /root/entrypoint.sh && \\\n    cp docker/test.sh /root/test.sh && \\\n    chmod +x /root/entrypoint.sh && \\\n    chmod +x /root/test.sh && \\\n    echo \"source /opt/env/troposphere/bin/activate\" >> /root/.bashrc\nENTRYPOINT [\"/root/entrypoint.sh\"]\n"
}