{
  "startTime": 1674234825842,
  "endTime": 1674234826583,
  "originalSmells": [
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 36,
        "lineEnd": 36,
        "columnStart": 7,
        "columnEnd": 42
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 99,
        "lineEnd": 99,
        "columnStart": 60,
        "columnEnd": 85
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 164,
        "lineEnd": 164,
        "columnStart": 7,
        "columnEnd": 36
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 159,
        "lineEnd": 159,
        "columnStart": 7,
        "columnEnd": 71
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# Distributed under the terms of the Modified BSD License.\n\nARG repository\nARG base\nFROM ${repository}:${base}\n\nLABEL maintainer=\"haobibo@gmail.com\"\n\nARG ARG_JDK=false\n\nARG ARG_MKL=true\nARG ARG_PY_DATABASE=false\nARG ARG_PY_DATASCIENCE=false\nARG ARG_PY_NLP=false\nARG ARG_PY_CV=false\nARG ARG_PY_BIOINFO=false\n\nARG ARG_R=false\nARG ARG_R_DATASCIENCE=false\nARG ARG_R_STUDIO=false\n\nARG ARG_GO=false\n\nARG ARG_JULIA=false\n\nARG ARG_OCTAVE=false\n\nCOPY work /opt/utils/\n\nWORKDIR /opt/utils\n\n\n# If installing Java environment\nRUN ${ARG_JDK:-false}           && source /opt/utils/script-utils.sh \\\n    && install_apt   ./install_list_jdk.apt \\\n    && echo \"@ Version of Java (java/javac):\" && java -version && javac -version \\\n    && pip install --no-cache-dir -Uq beakerx pandas py4j \\\n    && beakerx install \\\n    && jupyter labextension install --dev-build beakerx-jupyterlab \\\n    && jupyter labextension list \\\n    || true\n\n# If installing R environment\nRUN ${ARG_R:-false}             && source /opt/utils/script-utils.sh \\\n    && apt-key adv --keyserver keyserver.ubuntu.com --recv-keys E298A3A825C0D65DFD57CBB651716619E084DAB9 \\\n    && echo \"deb https://cloud.r-project.org/bin/linux/ubuntu bionic-cran35/\" > /etc/apt/sources.list.d/cran.list \\\n    && install_apt  ./install_list_R.apt \\\n    && echo \"@ Version of R:\" && R -e \"R.version.string;\"  \\\n    && ( type java && type R && R CMD javareconf || true ) \\\n    && echo \"options(repos=structure(c(CRAN='https://cloud.r-project.org')))\" >> /etc/R/Rprofile.site \\\n    && R -e \"install.packages(c('devtools','IRkernel'),quiet=T,clean=T); IRkernel::installspec(user=F)\" \\\n    && ( ${ARG_R_DATASCIENCE:-false}  \\\n         && R -e \"devtools::install_git('git://github.com/sorhawell/rgl.git',quiet=T,clean=T) # work around rgl, which has too many deps.\" \\\n         && install_apt   ./install_list_R_datascience.apt \\\n         && install_R     ./install_list_R_datascience.R   \\\n         || true \\\n    ) \\\n    && ( ${ARG_R_STUDIO:-false} \\\n         && RSTUDIO_VERSION=$(wget --no-check-certificate -qO- https://s3.amazonaws.com/rstudio-server/current.ver) \\\n         && RSTUDIO_VERSION=$(echo $RSTUDIO_VERSION | cut -d- -f1) \\\n         && wget -qO- \"https://download2.rstudio.org/server/trusty/amd64/rstudio-server-${RSTUDIO_VERSION}-amd64.deb\" -O /tmp/rstudio.deb \\\n         && dpkg -x /tmp/rstudio.deb /tmp && mv /tmp/usr/lib/rstudio-server/ /opt/ \\\n         && ln -s /opt/rstudio-server/bin/rs* /usr/bin/ \\\n         # Allow RStudio server run as root user\n         && mkdir -p /etc/rstudio \\\n         && echo \"auth-minimum-user-id=0\" >> /etc/rstudio/rserver.conf \\\n         # Configuration to make RStudio server disable authentication and do not run as daemon\n         && echo \"auth-none=1\"            >> /etc/rstudio/rserver.conf \\\n         && echo \"server-daemonize=0\"     >> /etc/rstudio/rserver.conf \\\n         && printf '#!/bin/bash\\nexport USER=root\\nrserver --www-port=8888' > /usr/local/bin/start-rstudio.sh \\\n         && chmod u+x /usr/local/bin/start-rstudio.sh \\\n         # Remove RStudio's pandoc and pandoc-proc to reduce size if they are already installed in the jpy-latex step.\n         && ( which pandoc          && rm /opt/rstudio-server/bin/pandoc/pandoc          || true ) \\\n         && ( which pandoc-citeproc && rm /opt/rstudio-server/bin/pandoc/pandoc-citeproc || true ) \\\n         && echo \"@ Version of rstudio-server:\" && rstudio-server version \\\n         || true \\\n    ) \\\n    && ( ${ARG_R_STUDIO:-false} \\\n         && RSHINY_VERSION=$(wget --no-check-certificate -qO- https://s3.amazonaws.com/rstudio-shiny-server-os-build/ubuntu-12.04/x86_64/VERSION) \\\n         && wget -qO- \"https://download3.rstudio.org/ubuntu-14.04/x86_64/shiny-server-${RSHINY_VERSION}-amd64.deb\" -O /tmp/rshiny.deb \\\n         && dpkg -i /tmp/rshiny.deb \\\n         && sed  -i 's/run_as shiny;/run_as root;/g'  /etc/shiny-server/shiny-server.conf \\\n         && sed  -i 's/3838/8888/g'                   /etc/shiny-server/shiny-server.conf \\\n         && printf '#!/bin/bash\\nexport USER=root\\nshiny-server' > /usr/local/bin/start-shiny-server.sh \\\n         && chmod u+x /usr/local/bin/start-shiny-server.sh \\\n         # Remove shiny's pandoc and pandoc-proc to reduce size if they are already installed in the jpy-latex step.\n         && ( which pandoc          && rm /opt/shiny-server/ext/pandoc/pandoc          || true ) \\\n         && ( which pandoc-citeproc && rm /opt/shiny-server/ext/pandoc/pandoc-citeproc || true ) \\\n         && rm    /opt/shiny-server/ext/node/bin/shiny-server \\\n         && ln -s /opt/shiny-server/ext/node/bin/node /opt/shiny-server/ext/node/bin/shiny-server \\\n         # hack shiny-server to allow run in root user: https://github.com/rstudio/shiny-server/pull/391\n         && sed  -i 's/throw new Error/logger.warn/g'  /opt/shiny-server/lib/worker/app-worker.js \\\n         && echo \"@ Version of shiny-server:\" && shiny-server --version \\\n         || true \\\n    ) \\\n    && echo \"@ Version of installed R libraries:\" && R -e \"R.Version()\\$version.string;installed.packages()[,c(3,10)]\" \\\n    || true\n\n# If on a x86_64 architecture and MKL selected, install MKL for acceleration\nRUN ${ARG_MKL:-false}           && [ `arch` = \"x86_64\" ] && pip install --no-cache-dir -Uq --pre mkl \\\n    || true\n\n# If installing Python and related packages\nRUN source /opt/utils/script-utils.sh \\\n    && ( ${ARG_PY_DATASCIENCE:-false} \\\n         && ( [[ -z \"${CUDA_VERSION}\" ]] && TF='tensorflow' || TF=\"tensorflow-gpu\" \\\n              && echo \"${TF}==1.*   % decide version based on CUDA_VERSION\" >> ./install_list_PY_datascience.pip \\\n         ) \\\n         && ( which R    && echo \"rpy2  % Install rpy2 if R exists\"         >> ./install_list_PY_datascience.pip || true ) \\\n         && ( which java && echo \"py4j  % Install py4j if Java exists\"      >> ./install_list_PY_datascience.pip || true ) \\\n         && install_pip   ./install_list_PY_datascience.pip \\\n         || true \\\n    ) \\\n    && ( ${ARG_PY_DATABASE:-false}      && install_pip   ./install_list_PY_database.pip    || true ) \\\n    && ( ${ARG_PY_NLP:-false}           && install_pip   ./install_list_PY_nlp.pip         || true ) \\\n    && ( ${ARG_PY_CV:-false}            && install_pip   ./install_list_PY_cv.pip          || true ) \\\n    && ( ${ARG_PY_BIOINFO:-false}       && install_pip   ./install_list_PY_bioinfo.pip     || true ) \\\n    && echo \"@ Version of installed Python packages:\" && pip list\n\n# Installing conda packages if provided.\nRUN source /opt/utils/script-utils.sh \\\n    && ( install_conda ./install_list.conda || true ) \\\n    && echo \"@ Version of installed Conda packages:\"  && conda info && conda list | grep -v \"<pip>\"\n\n# Install golang and gophernotes (Jupyter kernel for golang)\nRUN ${ARG_GO:-false}        && source /opt/utils/script-utils.sh \\\n    && GO_VERSION=\"1.12.2\" \\\n    && GO_URL=\"https://dl.google.com/go/go$GO_VERSION.linux-$(dpkg --print-architecture).tar.gz\" \\\n    && install_tar_gz $GO_URL go \\\n    && ln -s /opt/go/bin/go /usr/bin/ \\\n    && echo  \"GOPATH=/opt/go/path\"     >> /etc/bash.bashrc \\\n    && export GOPATH=/opt/go/path \\\n    && go get -u github.com/gopherdata/gophernotes \\\n    && mkdir -p /opt/conda/share/jupyter/kernels/gophernotes \\\n    && cp $GOPATH/src/github.com/gopherdata/gophernotes/kernel/* /opt/conda/share/jupyter/kernels/gophernotes \\\n    && ln -s $GOPATH/bin/gophernotes /usr/local/bin \\\n    && echo \"@ Version of golang:\" && go version && go list ... \\\n    || true\n\n# Install Julia and IJulia\nRUN ${ARG_JULIA:-false}     && source /opt/utils/script-utils.sh \\\n    && JULIA_URL=\"https://julialangnightlies-s3.julialang.org/bin/linux/x64/julia-latest-linux64.tar.gz\" \\\n    && install_tar_gz $JULIA_URL \\\n    && mv /opt/julia-* /opt/julia \\\n    && ln -fs /opt/julia/bin/julia /usr/local/bin/julia \\\n    && mkdir -p /opt/julia/pkg \\\n    && echo 'import Libdl; push!(Libdl.DL_LOAD_PATH, \"/opt/conda/lib\")' >> /opt/julia/etc/julia/startup.jl \\\n    && echo 'DEPOT_PATH[1]=\"/opt/julia/pkg\"'                            >> /opt/julia/etc/julia/startup.jl \\\n    && julia -e 'using Pkg; pkg\"update\"; pkg\"add IJulia\"; pkg\"precompile\"' \\ \n    && mv ~/.local/share/jupyter/kernels/julia* /opt/conda/share/jupyter/kernels/ \\\n    && echo \"@ Version of julia:\" && julia --version && julia -e 'using Pkg; for(k,v) in sort(collect(Pkg.installed())); println(k,\"==\",v); end' \\\n    || true\n\n# Install Octave and Octave kernal for Jupyter\nRUN ${ARG_OCTAVE:-false}    && source /opt/utils/script-utils.sh \\\n    && install_apt   /opt/utils/install_list_octave.apt \\\n    && OCTAVE_VERSION=\"5.1.0\" \\\n    && install_tar_xz \"https://ftp.gnu.org/gnu/octave/octave-${OCTAVE_VERSION}.tar.xz\" \\\n    && cd /opt/octave-* \\\n    && ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --prefix=/opt/octave --disable-docs --without-opengl \\\n    && make -j8 && make install -j8 \\\n    && cd /opt/utils && rm -rf /opt/octave-* \\\n    && echo \"PATH=/opt/octave/bin:$PATH\"     >> /etc/bash.bashrc \\\n    && export PATH=/opt/octave/bin:$PATH \\\n    && pip install --no-cache-dir -Uq octave_kernel \\\n    && install_octave    /opt/utils/install_list_octave.pkg \\\n    && echo \"@ Version of Octave and installed packages:\" \\\n    && /opt/octave/bin/octave --version \\\n    && /opt/octave/bin/octave --eval \"pkg list\" \\\n    || true\n\n# Clean up and display components version information...\nRUN  source /opt/utils/script-utils.sh \\\n  && install__clean && cd \\\n  && echo \"@ Version of image: building finished at:\" `date` `uname -a` \\\n  && echo \"@ System environment variables:\" `printenv`\n\nWORKDIR /root\n"
}