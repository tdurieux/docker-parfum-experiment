{
  "startTime": 1674234745988,
  "endTime": 1674234746086,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 26,
        "lineEnd": 26,
        "columnStart": 4,
        "columnEnd": 120
      }
    },
    {
      "rule": "apkAddUseNoCache",
      "position": {
        "lineStart": 20,
        "lineEnd": 20,
        "columnStart": 4,
        "columnEnd": 29
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# This here is an image appropriate for building multiarch images.\n#\n# The strategy here is to use a manifest at the upper level and feed\n# in the image name. Running Docker on ARM is easiest to work with when\n# the base images use ARM OSs.\n\n# Base image default is x86:\n# alpine | arm64v8/alpine\nARG IMAGE=alpine\n\nFROM ${IMAGE} as builder\n\nLABEL maintainer.0=\"David Michael <david@crypdex.io>\"\n\n# amd64 | arm64\nARG ARCH\nRUN test -n \"$ARCH\"\nARG VERSION=$VERSION\nRUN test -n \"$VERSION\"\n\nRUN apk add --no-cache curl su-exec bash\n\nRUN adduser -S lnd\n\nWORKDIR /home/lnd\n\nRUN curl -f -SLO https://github.com/lightningnetwork/lnd/releases/download/v${VERSION}/lnd-linux-${ARCH}-v${VERSION}.tar.gz \\\n  && tar --strip=1 -xzf *.tar.gz \\\n  && mv lnd /usr/local/bin \\\n  && mv lncli /usr/local/bin \\\n  && rm *.tar.gz\n\nCOPY entrypoint.sh /entrypoint.sh\nRUN chmod u+x /entrypoint.sh\n\n# This volume is to be mounted\nVOLUME [\"/home/lnd/.lnd\"]\n\n# GRPC P2P\nEXPOSE 10009 9735\n\nENTRYPOINT [\"/entrypoint.sh\"]\n\nCMD [\"lnd\"]\n"
}