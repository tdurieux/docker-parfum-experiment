{
  "startTime": 1674252359469,
  "endTime": 1674252359721,
  "originalSmells": [
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 30,
        "lineEnd": 30,
        "columnStart": 2,
        "columnEnd": 23
      }
    },
    {
      "rule": "gpgUseBatchFlag",
      "position": {
        "lineStart": 26,
        "lineEnd": 26,
        "columnStart": 4,
        "columnEnd": 70
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM alpine:3.6\n\nLABEL maintainer \"https://github.com/blacktop\"\n\nENV KIBANA_VERSION 5.4.3\n\nENV DOWNLOAD_URL \"https://artifacts.elastic.co/downloads/kibana\"\nENV TARBAL \"${DOWNLOAD_URL}/kibana-${KIBANA_VERSION}-linux-x86_64.tar.gz\"\nENV TARBALL_ASC \"${DOWNLOAD_URL}/kibana-${KIBANA_VERSION}-linux-x86_64.tar.gz.asc\"\nENV SHA1_URL \"${DOWNLOAD_URL}/kibana-${KIBANA_VERSION}-linux-x86_64.tar.gz.sha1\"\nENV GPG_KEY \"46095ACC8548582C1A2699A9D27D666CD88E42B4\"\n\nENV PATH /usr/share/kibana/bin:$PATH\n\nRUN apk add --no-cache bash nodejs tini su-exec\nRUN apk add --no-cache -t .build-deps wget ca-certificates gnupg openssl \\\n  && cd /tmp \\\n  && echo \"===> Install Kibana...\" \\\n  && EXPECTED_SHA=$(wget -O - ${SHA1_URL}) \\\n  && wget -O kibana.tar.gz \"$TARBAL\"; \\\n  if [ \"$EXPECTED_SHA\" ]; then \\\n    echo \"$EXPECTED_SHA *kibana.tar.gz\" | sha1sum -c -; \\\n  fi; \\\n  if [ \"$TARBALL_ASC\" ]; then \\\n    wget -O kibana.tar.gz.asc \"$TARBALL_ASC\"; \\\n    export GNUPGHOME=\"$(mktemp -d)\"; \\\n    gpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys \"$GPG_KEY\"; \\\n    gpg --batch --verify kibana.tar.gz.asc kibana.tar.gz; \\\n    rm -r \"$GNUPGHOME\" kibana.tar.gz.asc; \\\n  fi; \\\n  tar -xf kibana.tar.gz \\\n  && ls -lah \\\n  && mv kibana-$KIBANA_VERSION-linux-x86_64 /usr/share/kibana \\\n  && adduser -DH -s /sbin/nologin kibana \\\n  # the default \"server.host\" is \"localhost\" in 5+\n  && sed -ri \"s!^(\\#\\s*)?(server\\.host:).*!\\2 '0.0.0.0'!\" /usr/share/kibana/config/kibana.yml \\\n  && grep -q \"^server\\.host: '0.0.0.0'\\$\" /usr/share/kibana/config/kibana.yml \\\n  # ensure the default configuration is useful when using --link\n  && sed -ri \"s!^(\\#\\s*)?(elasticsearch\\.url:).*!\\2 'http://elasticsearch:9200'!\" /usr/share/kibana/config/kibana.yml \\\n  && grep -q \"^elasticsearch\\.url: 'http://elasticsearch:9200'\\$\" /usr/share/kibana/config/kibana.yml \\\n  # usr alpine nodejs and not bundled version\n  && bundled='NODE=\"${DIR}/node/bin/node\"' \\\n  && apline_node='NODE=\"/usr/bin/node\"' \\\n  && sed -i \"s|$bundled|$apline_node|g\" /usr/share/kibana/bin/kibana-plugin \\\n  && sed -i \"s|$bundled|$apline_node|g\" /usr/share/kibana/bin/kibana \\\n  && rm -rf /usr/share/kibana/node \\\n  && chown -R kibana:kibana /usr/share/kibana \\\n  && rm -rf /tmp/* \\\n  && apk del --purge .build-deps && rm kibana.tar.gz\n\nCOPY docker-entrypoint.sh /\n\nWORKDIR /usr/share/kibana\n\nEXPOSE 5601\n\nENTRYPOINT [\"/docker-entrypoint.sh\"]\nCMD [\"kibana\"]\n"
}