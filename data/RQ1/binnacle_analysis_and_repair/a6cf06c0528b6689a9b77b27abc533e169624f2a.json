{
  "startTime": 1674252986760,
  "endTime": 1674252987074,
  "originalSmells": [
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 89,
        "lineEnd": 89,
        "columnStart": 5,
        "columnEnd": 99
      }
    },
    {
      "rule": "gpgUseBatchFlag",
      "position": {
        "lineStart": 78,
        "lineEnd": 78,
        "columnStart": 2,
        "columnEnd": 82
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM alpine:3.8\n\nENV NGINX_VERSION 1.15.6\nENV NGINX_HTTP_FLV_MODULE_VERSION 1.2.5\n\nRUN GPG_KEYS=B0F4253373F8F6F510D42178520A9993A1C052F8 \\\n  && CONFIG=\"\\\n  --prefix=/etc/nginx \\\n  --sbin-path=/usr/sbin/nginx \\\n  --modules-path=/usr/lib/nginx/modules \\\n  --conf-path=/etc/nginx/nginx.conf \\\n  --error-log-path=/var/log/nginx/error.log \\\n  --http-log-path=/var/log/nginx/access.log \\\n  --pid-path=/var/run/nginx.pid \\\n  --lock-path=/var/run/nginx.lock \\\n  --http-client-body-temp-path=/var/cache/nginx/client_temp \\\n  --http-proxy-temp-path=/var/cache/nginx/proxy_temp \\\n  --http-fastcgi-temp-path=/var/cache/nginx/fastcgi_temp \\\n  --http-uwsgi-temp-path=/var/cache/nginx/uwsgi_temp \\\n  --http-scgi-temp-path=/var/cache/nginx/scgi_temp \\\n  --user=nginx \\\n  --group=nginx \\\n  --with-http_ssl_module \\\n  --with-http_realip_module \\\n  --with-http_addition_module \\\n  --with-http_sub_module \\\n  --with-http_dav_module \\\n  --with-http_flv_module \\\n  --with-http_mp4_module \\\n  --with-http_gunzip_module \\\n  --with-http_gzip_static_module \\\n  --with-http_random_index_module \\\n  --with-http_secure_link_module \\\n  --with-http_stub_status_module \\\n  --with-http_auth_request_module \\\n  --with-http_xslt_module=dynamic \\\n  --with-http_image_filter_module=dynamic \\\n  --with-http_geoip_module=dynamic \\\n  --with-threads \\\n  --with-stream \\\n  --with-stream_ssl_module \\\n  --with-stream_ssl_preread_module \\\n  --with-stream_realip_module \\\n  --with-stream_geoip_module=dynamic \\\n  --with-http_slice_module \\\n  --with-mail \\\n  --with-mail_ssl_module \\\n  --with-compat \\\n  --with-file-aio \\\n  --with-http_v2_module \\\n  \" \\\n  && addgroup -S nginx \\\n  && adduser -D -S -h /var/cache/nginx -s /sbin/nologin -G nginx nginx \\\n  && apk add --no-cache --virtual .build-deps \\\n  gcc \\\n  libc-dev \\\n  make \\\n  openssl-dev \\\n  pcre-dev \\\n  zlib-dev \\\n  linux-headers \\\n  curl \\\n  gnupg \\\n  libxslt-dev \\\n  gd-dev \\\n  geoip-dev \\\n  && curl -fSL https://nginx.org/download/nginx-$NGINX_VERSION.tar.gz -o nginx.tar.gz \\\n  && curl -fSL https://nginx.org/download/nginx-$NGINX_VERSION.tar.gz.asc  -o nginx.tar.gz.asc \\\n  && curl -fSL https://github.com/winshining/nginx-http-flv-module/archive/v$NGINX_HTTP_FLV_MODULE_VERSION.zip -o nginx-http-flv-module.zip \\\n  && export GNUPGHOME=\"$(mktemp -d)\" \\\n  && found=''; \\\n  for server in \\\n  ha.pool.sks-keyservers.net \\\n  hkp://keyserver.ubuntu.com:80 \\\n  hkp://p80.pool.sks-keyservers.net:80 \\\n  pgp.mit.edu; \\\n  do \\\n  echo \"Fetching GPG key $GPG_KEYS from $server\"; \\\n  gpg --batch --keyserver \"$server\" --keyserver-options timeout=10 --recv-keys \"$GPG_KEYS\" && found=yes && break; \\\n  done; \\\n  test -z \"$found\" && echo >&2 \"error: failed to fetch GPG key $GPG_KEYS\" && exit 1; \\\n  gpg --batch --verify nginx.tar.gz.asc nginx.tar.gz \\\n  && rm -rf \"$GNUPGHOME\" nginx.tar.gz.asc \\\n  && mkdir -p /usr/src \\\n  && tar -zxC /usr/src -f nginx.tar.gz \\\n  && unzip nginx-http-flv-module.zip -d /usr/src \\\n  && rm nginx.tar.gz \\\n  && rm nginx-http-flv-module.zip \\\n  && cd /usr/src/nginx-$NGINX_VERSION \\\n  && ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" $CONFIG --add-module=/usr/src/nginx-http-flv-module-$NGINX_HTTP_FLV_MODULE_VERSION \\\n  && make -j$(getconf _NPROCESSORS_ONLN) \\\n  && make install \\\n  && rm -rf /etc/nginx/html/ \\\n  && mkdir -p /etc/nginx/conf.d/http-flv \\\n  && mkdir -p /etc/nginx/conf.d/rtmp \\\n  && ln -s /usr/lib/nginx/modules /etc/nginx/modules \\\n  && strip /usr/sbin/nginx* \\\n  && strip /usr/lib/nginx/modules/*.so \\\n  && rm -rf /usr/src/nginx-$NGINX_VERSION \\\n  && rm -rf /usr/src/nginx-http-flv-module-$NGINX_HTTP_FLV_MODULE_VERSION \\\n\n  # Bring in gettext so we can get `envsubst`, then throw\n  # the rest away. To do this, we need to install `gettext`\n  # then move `envsubst` out of the way so `gettext` can\n  # be deleted completely, then move `envsubst` back.\n  && apk add --no-cache --virtual .gettext gettext \\\n  && mv /usr/bin/envsubst /tmp/ \\\n\n  && runDeps=\"$( \\\n  scanelf --needed --nobanner --format '%n#p' /usr/sbin/nginx /usr/lib/nginx/modules/*.so /tmp/envsubst \\\n  | tr ',' '\\n' \\\n  | sort -u \\\n  | awk 'system(\"[ -e /usr/local/lib/\" $1 \" ]\") == 0 { next } { print \"so:\" $1 }' \\\n  )\" \\\n  && apk add --no-cache --virtual .nginx-rundeps $runDeps \\\n  && apk del .build-deps \\\n  && apk del .gettext \\\n  && mv /tmp/envsubst /usr/local/bin/ \\\n\n  # Bring in tzdata so users could set the timezones through the environment\n  # variables\n  && apk add --no-cache tzdata \\\n\n  # forward request and error logs to docker log collector\n  && ln -sf /dev/stdout /var/log/nginx/access.log \\\n  && ln -sf /dev/stderr /var/log/nginx/error.log\n\nCOPY nginx.conf /etc/nginx/nginx.conf\nCOPY conf.d/ /etc/nginx/conf.d/\nCOPY www/ /var/www/\n\nEXPOSE 80 1935\n\nSTOPSIGNAL SIGTERM\n\nCMD [\"nginx\", \"-g\", \"daemon off;\"]\n"
}