{
  "startTime": 1674243668619,
  "endTime": 1674243670247,
  "originalSmells": [
    {
      "rule": "wgetUseHttpsUrl",
      "position": {
        "lineStart": 175,
        "lineEnd": 175,
        "columnStart": 4,
        "columnEnd": 73
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 128,
        "lineEnd": 128,
        "columnStart": 6,
        "columnEnd": 66
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 148,
        "lineEnd": 148,
        "columnStart": 6,
        "columnEnd": 17
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 166,
        "lineEnd": 166,
        "columnStart": 6,
        "columnEnd": 31
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 178,
        "lineEnd": 178,
        "columnStart": 6,
        "columnEnd": 66
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 201,
        "lineEnd": 202,
        "columnStart": 5,
        "columnEnd": 53
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 237,
        "lineEnd": 239,
        "columnStart": 5,
        "columnEnd": 18
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 278,
        "lineEnd": 278,
        "columnStart": 6,
        "columnEnd": 66
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 290,
        "lineEnd": 292,
        "columnStart": 6,
        "columnEnd": 19
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 304,
        "lineEnd": 304,
        "columnStart": 6,
        "columnEnd": 17
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 349,
        "lineEnd": 349,
        "columnStart": 5,
        "columnEnd": 16
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 12,
        "lineEnd": 16,
        "columnStart": 4,
        "columnEnd": 32
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 35,
        "lineEnd": 91,
        "columnStart": 4,
        "columnEnd": 16
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 97,
        "lineEnd": 97,
        "columnStart": 4,
        "columnEnd": 59
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 134,
        "lineEnd": 134,
        "columnStart": 22,
        "columnEnd": 70
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 97,
        "lineEnd": 97,
        "columnStart": 4,
        "columnEnd": 59
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 12,
        "lineEnd": 16,
        "columnStart": 4,
        "columnEnd": 32
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 35,
        "lineEnd": 91,
        "columnStart": 4,
        "columnEnd": 16
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 97,
        "lineEnd": 97,
        "columnStart": 4,
        "columnEnd": 59
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 134,
        "lineEnd": 134,
        "columnStart": 22,
        "columnEnd": 70
      }
    }
  ],
  "repairedSmells": [
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 97,
        "lineEnd": 97,
        "columnStart": 4,
        "columnEnd": 83
      }
    }
  ],
  "repairedDockerfile": "# The base OS\nFROM ubuntu:14.04\n\nMAINTAINER Bo Liu <bol@pinterest.com>\n\nLABEL version=0.1\n\nARG BUILD_JOBS=10\nENV BUILD_JOBS ${BUILD_JOBS}\n\n\nRUN apt-get -q -y update && \\\n    apt-get -q --no-install-recommends -y install \\\n      python-software-properties \\\n      wget \\\n      git \\\n      software-properties-common && rm -rf /var/lib/apt/lists/*;\n\n# For gcc 6\nRUN add-apt-repository -y ppa:ubuntu-toolchain-r/test\n\n# For open jdk 8\nRUN add-apt-repository ppa:openjdk-r/ppa && apt-get update\n\n# For HDFS debian libs\nRUN wget 'https://archive.cloudera.com/cdh5/ubuntu/trusty/amd64/cdh/cloudera.list' \\\n    -O /etc/apt/sources.list.d/cloudera.list && \\\n    wget https://archive.cloudera.com/cdh5/ubuntu/trusty/amd64/cdh/archive.key \\\n    -O archive.key && \\\n    apt-key add archive.key \\\n    apt-get update \\\n    apt-get install --force-yes -q -y hadoop-hdfs\n\n\nRUN apt-get -q -y update && \\\n    apt-get install --no-install-recommends --force-yes -q -y \\\n      automake \\\n      autoconf \\\n      autoconf-archive \\\n      binutils-dev \\\n      bison \\\n      curl \\\n      flex \\\n      gcc-6 \\\n      g++-6 \\\n      gdb \\\n      ghostscript \\\n      git \\\n      google-perftools \\\n      graphviz \\\n      hadoop \\\n      hadoop-hdfs \\\n      hadoop-client \\\n      libapr1-dev \\\n      libboost-all-dev \\\n      libbz2-dev \\\n      libcap-dev \\\n      libcppunit-dev \\\n      libcurl4-openssl-dev \\\n      libdouble-conversion-dev \\\n      libdwarf-dev \\\n      libevent-dev \\\n      libfftw3-dev \\\n      libgflags-dev \\\n      libgtest-dev \\\n      libhdf5-serial-dev \\\n      libhdfs0 \\\n      libhdfs0-dev \\\n      libiberty-dev \\\n      libkrb5-dev \\\n      libleveldb-dev \\\n      liblua5.2-dev \\\n      liblzma-dev \\\n      libnuma-dev \\\n      libpcap-dev \\\n      libsasl2-dev \\\n      libsnappy-dev \\\n      libssl-dev \\\n      libsvn-dev \\\n      libtool \\\n      linux-tools-generic \\\n      make \\\n      openjdk-8-jdk \\\n      python-setuptools \\\n      python-pip \\\n      scons \\\n      sparsehash \\\n      subversion \\\n      unzip \\\n      uuid-dev \\\n      vim \\\n      zlib1g-dev && rm -rf /var/lib/apt/lists/*;\n\n\n# Downgrade zookeeper to cdh5's version. trusty's default zookeeper version is 3.4.5+dfsg-1\n# which is higher than cdh5's version. We need to downgrade to cdh5's version, otherwise hadoop\n# package is broken.\nRUN apt-get install --no-install-recommends --force-yes -q -y zookeeper=3.4.5+cdh5* && rm -rf /var/lib/apt/lists/*;\n\n# Install awscli\nRUN cd /opt && \\\n    wget https://s3.amazonaws.com/aws-cli/awscli-bundle.zip && \\\n    unzip awscli-bundle.zip && \\\n    ./awscli-bundle/install -i /usr/local/aws -b /usr/local/bin/aws && \\\n    rm awscli-bundle.zip && rm -rf awscli-bundle\n\n# Change the gcc/g++ aliases to point to 6\nRUN update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-6 60 --slave /usr/bin/g++ g++ /usr/bin/g++-6\n\n# Set fake git credentials, otherwise git cherry-pick would throw fatal error.\nRUN git config --global user.email \"you@example.com\" && \\\n    git config --global user.name \"Your Name\"\n\n# LZ4\nRUN cd /opt && \\\n    git clone https://github.com/lz4/lz4.git && \\\n    (cd lz4 && \\\n    git reset --hard c10863b98e1503af90616ae99725ecd120265dfb && \\\n    make && \\\n    make install && \\\n    ldconfig) && \\\n    rm -rf lz4\n\n# glog\nRUN cd /opt && \\\n    wget https://github.com/google/glog/archive/v0.3.3.zip && \\\n    unzip v0.3.3.zip && \\\n    ( cd /opt/glog-0.3.3/ && \\\n      CPPFLAGS=\"-gdwarf-2 -O3 -fno-omit-frame-pointer\" ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" && \\\n      make -j ${BUILD_JOBS} && \\\n      make install && \\\n      ldconfig) && \\\n    rm -rf glog-0.3.3.tar.gz glog-0.3.3\n\nRUN apt-get update && apt-get install --no-install-recommends --force-yes -q -y libunwind8-dev && rm -rf /var/lib/apt/lists/*;\n\n# Adding Java lib path ld.so searching path configuration\nRUN JAVA_HOME=/usr/lib/jvm/java-8-openjdk-amd64 && \\\n    echo $JAVA_HOME/jre/lib/amd64/ >> /etc/ld.so.conf.d/realpin.conf && \\\n    echo $JAVA_HOME/jre/lib/amd64/server >> /etc/ld.so.conf.d/realpin.conf && \\\n    echo $JAVA_HOME/jre/lib/amd64/jamvm >> /etc/ld.so.conf.d/realpin.conf\n\n# numa\nRUN cd /opt && \\\n    wget https://github.com/numactl/numactl/archive/v2.0.11.zip && \\\n    unzip v2.0.11.zip && \\\n    ( cd numactl-2.0.11 && \\\n      ./autogen.sh && \\\n      ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" && \\\n      make -j ${BUILD_JOBS} && \\\n      make install && \\\n      ldconfig) && \\\n    rm -rf v2.0.11.zip numactl-2.0.11/\n\n# newer version of cmake\nRUN cd /opt && \\\n    wget https://cmake.org/files/v3.4/cmake-3.4.3-Linux-x86_64.tar.gz --no-check-certificate && \\\n    tar zxvf cmake-3.4.3-Linux-x86_64.tar.gz --strip-components=1 -C /usr/local && \\\n    rm cmake-3.4.3-Linux-x86_64.tar.gz\n\n# jemalloc\nRUN cd /opt && \\\n    wget https://github.com/jemalloc/jemalloc/archive/4.5.0.tar.gz && \\\n    tar -zxvf 4.5.0.tar.gz && \\\n    ( cd jemalloc-4.5.0 && \\\n      autoconf && \\\n      ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --enable-prof && \\\n      make && \\\n# the unusual (make install; exit 0) is to ignore error for missing html doc\n      (make install; exit 0) && \\\n      ldconfig) && \\\n    rm -rf 4.5.0.tar.gz jemalloc-4.5.0\n\n# microhttpd\nRUN cd /opt && \\\n    wget https://ftp.gnu.org/gnu/libmicrohttpd/libmicrohttpd-0.9.42.tar.gz && \\\n    tar -zxvf libmicrohttpd-0.9.42.tar.gz && \\\n    ( cd libmicrohttpd-0.9.42 && \\\n      CPPFLAGS=\"-gdwarf-2 -O3 -fno-omit-frame-pointer\" ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" && \\\n      make -j ${BUILD_JOBS} && \\\n      make install) && \\\n    rm -rf libmicrohttpd-0.9.42.tar.gz libmicrohttpd-0.9.42\n\n# download zstd\nRUN cd /opt && \\\n    git clone https://github.com/facebook/zstd.git && \\\n    (cd zstd && git reset --hard f405b8acbe8be70aa05e0a7bf035fe1efe20b99f) && \\\n    (cd zstd/build/cmake && \\\n      cmake . && \\\n      make -j ${BUILD_JOBS} && \\\n      make install && \\\n      ldconfig) && \\\n    rm -rf zstd\n\n# download folly\nRUN cd /opt && \\\n    git clone https://github.com/facebook/folly && \\\n    ( cd folly && \\\n     git reset --hard b59ee6802a2454e854a52535d31598aa967e33c0 && \\\n     cd folly && \\\n     autoreconf -ivf && \\\n     ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" LDFLAGS='-ljemalloc' CC=/usr/bin/gcc-6 CXX=/usr/bin/g++-6 \\\n     CXXFLAGS='-gdwarf-2 -O3 -fno-omit-frame-pointer' && \\\n     make -j ${BUILD_JOBS} && \\\n     make install && \\\n     ldconfig) && \\\n    rm -rf folly\n\n# wangle\nRUN cd /opt && \\\n    git clone https://github.com/facebook/wangle && \\\n    (cd wangle && git reset --hard 52f08ff480931fcba1b7fa9b3eebd45d220a68de) && \\\n    (cd wangle/wangle && CC=/usr/bin/gcc-6 CXX=/usr/bin/g++-6 cmake . && \\\n      make -j ${BUILD_JOBS} && \\\n      make install && \\\n      ldconfig) && \\\n    rm -rf wangle\n\n# git clone https://github.com/no1msd/mstch\nRUN cd /opt && \\\n    git clone https://github.com/no1msd/mstch && \\\n    (cd mstch && git reset --hard 0fde1cf94c26ede7fa267f4b64c0efe5da81a77a) && \\\n    (cd mstch && cmake . && \\\n      make -j ${BUILD_JOBS} && \\\n      make install && \\\n      ldconfig) && \\\n    rm -rf mstch\n\n# download fbthrift\nRUN cd /opt && \\\n    git clone https://github.com/facebook/fbthrift && \\\n    ( cd fbthrift && \\\n     git reset --hard 8e1a1e1eedbf5b551b4fe4799dab8b36267638ba && \\\n     cd thrift && \\\n     sed 's/PKG_CHECK_MODULES.*$/true/g' -i configure.ac && \\\n     (cd compiler && ln -sf thrifty.h thrifty.hh) && \\\n     autoreconf --install && \\\n     LDFLAGS=\"-ljemalloc\" CC=/usr/bin/gcc-6 CXX=/usr/bin/g++-6 \\\n       CPPFLAGS=\"-gdwarf-2 -O3 -fno-omit-frame-pointer\" \\\n       ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" \\\n\n       && \\\n     (cd compiler && make) && \\\n     make -j ${BUILD_JOBS} && \\\n     make install && \\\n     ldconfig) && \\\n    rm -rf fbthrift\n\n# rocksdb\nRUN cd /opt/ && \\\n    git clone https://github.com/facebook/rocksdb.git && \\\n    (cd rocksdb && \\\n     git checkout -b 5.7.fb origin/5.7.fb && \\\n     git reset --hard cfaeb5846bec0ac90d8da15dc11f53eafbbfd537 && \\\n     git cherry-pick c5f0c6cc660f1f4a8051db2aac3b8afc17818e70 && \\\n     git cherry-pick ba3c58cab6c691c53c7f98589651233695da1f62 && \\\n     git cherry-pick 204af1ecccb6ed8110ee04cf9130594cfcb3af27 && \\\n     sed -i -- 's/std::rindex/rindex/g' ./env/env_hdfs.cc && \\\n     sed -i -- '/\"util\\/string_util.h\"/a #include \"util\\/logging.h\"' ./env/env_hdfs.cc && \\\n     export CLASSPATH= && \\\n     for f in `find /usr/lib/hadoop-hdfs | grep jar`; do export CLASSPATH=$CLASSPATH:$f; done && \\\n     for f in `find /usr/lib/hadoop | grep jar`; do export CLASSPATH=$CLASSPATH:$f; done && \\\n     for f in `find /usr/lib/hadoop/client | grep jar`; do export CLASSPATH=$CLASSPATH:$f; done && \\\n     USE_SSE=1 \\\n     USE_HDFS=1 \\\n     JAVA_HOME=/usr/lib/jvm/java-8-openjdk-amd64 \\\n     LD_LIBRARY_PATH=$JAVA_HOME/jre/lib/amd64/server:$JAVA_HOME/jre/lib/amd64:/usr/lib/hadoop/lib/native \\\n       JEMALLOC_LIB=\" /usr/local/lib/libjemalloc.a\" \\\n       JEMALLOC_INCLUDE=\" -I /usr/local/include/\" \\\n       EXTRA_CXXFLAGS=\"-gdwarf-2 -std=c++1y -O3 -fno-omit-frame-pointer\" \\\n       make -j ${BUILD_JOBS}  shared_lib && \\\n     make install-shared && \\\n     ldconfig) && \\\n    rm -rf rocksdb\n\n# farmhash\nRUN cd /opt && \\\n    git clone https://github.com/google/farmhash.git && \\\n    ( cd farmhash && git reset --hard 059cf991 && \\\n      autoreconf --install && \\\n      ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" CXXFLAGS=\"-gdwarf-2 -O3 -fno-omit-frame-pointer\" && \\\n      make all check && \\\n      make install && \\\n      ldconfig) && \\\n    rm -rf farmhash\n\n# libprotobuf\nRUN cd /opt && \\\n    git clone https://github.com/google/protobuf.git && \\\n    ( cd protobuf && \\\n      git reset --hard b04e5cba356212e4e8c66c61bbe0c3a20537c5b9 && \\\n      ./autogen.sh && \\\n      LDFLAGS=\"-ljemalloc\" \\\n        CPPFLAGS=\"-gdwarf-2 -O3 -fno-omit-frame-pointer\" \\\n        ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" \\\n\n        && \\\n      make -j ${BUILD_JOBS} && \\\n      make install && \\\n      ldconfig) && \\\n    rm -rf protobuf\n\n# libbf (bloom filter)\n# remove this once we migrate to use third_party/libbf\nRUN cd /opt && \\\n    git clone https://github.com/mavam/libbf.git && \\\n    ( cd libbf && \\\n      git reset --hard f2509db1442e8fc7c3dd5117b739886f76a4eb80 && \\\n      ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" && \\\n      make -j ${BUILD_JOBS} && \\\n      make install && \\\n      ldconfig) && \\\n    rm -rf libbf\n\n# aws sdk\nRUN cd /opt && \\\n    git clone https://github.com/aws/aws-sdk-cpp.git && \\\n    (cd aws-sdk-cpp && \\\n      git checkout 1.2.7 && \\\n      mkdir build && cd build && \\\n      cmake -DCMAKE_BUILD_TYPE=Release -DCUSTOM_MEMORY_MANAGEMENT=0 -DSTATIC_LINKING=1 -DBUILD_ONLY=\"s3\" .. && \\\n      make -j ${BUILD_JOBS} && \\\n      make install && \\\n      rm -rf /usr/local/lib/cmake/aws-cpp-* && \\\n      rm -rf build && mkdir build && cd build && \\\n      cmake -DCMAKE_BUILD_TYPE=Release -DCUSTOM_MEMORY_MANAGEMENT=0 -DSTATIC_LINKING=0 -DBUILD_ONLY=\"s3\" .. && \\\n      cd .. && \\\n      make -j ${BUILD_JOBS} && \\\n      make install && \\\n      ldconfig) && \\\n    rm -rf aws-sdk-cpp\n\n# yaml-cpp\nRUN cd /opt && \\\n    git clone https://github.com/jbeder/yaml-cpp && \\\n    (cd yaml-cpp && \\\n      git reset --hard 562aefc114938e388457e6a531ed7b54d9dc1b62 && \\\n      mkdir build && \\\n      cd build && \\\n      cmake -DBUILD_SHARED_LIBS=ON .. && \\\n      make -j && \\\n      make install && \\\n      cmake -DBUILD_SHARED_LIBS=OFF .. && \\\n      make -j ${BUILD_JOBS}&& \\\n      make install && \\\n      ldconfig) && \\\n    rm -rf /opt/yaml-cpp\n\n# kafka\nRUN cd /opt && \\\n    git clone https://github.com/edenhill/librdkafka.git && \\\n    ( cd librdkafka && \\\n     git reset --hard v0.11.4 && \\\n     ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" && \\\n     make && \\\n     make install && \\\n     ldconfig) && \\\n    rm -rf librdkafka\n\n"
}