{
  "startTime": 1674234649935,
  "endTime": 1674234650094,
  "originalSmells": [
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 32,
        "lineEnd": 32,
        "columnStart": 4,
        "columnEnd": 30
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 33,
        "lineEnd": 33,
        "columnStart": 4,
        "columnEnd": 30
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 38,
        "lineEnd": 38,
        "columnStart": 4,
        "columnEnd": 36
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 42,
        "lineEnd": 42,
        "columnStart": 4,
        "columnEnd": 48
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 43,
        "lineEnd": 43,
        "columnStart": 4,
        "columnEnd": 48
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 9,
        "lineEnd": 29,
        "columnStart": 22,
        "columnEnd": 28
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# TODO: We should have a job that creates a S4TF base image so that\n#we don't have to duplicate the installation everywhere.\nFROM nvidia/cuda:10.0-cudnn7-devel-ubuntu18.04\n\n# Allows the caller to specify the toolchain to use.\nARG swift_tf_url=https://storage.googleapis.com/s4tf-kokoro-artifact-testing/latest/swift-tensorflow-DEVELOPMENT-cuda10.0-cudnn7-ubuntu18.04.tar.gz\n\n# Install Swift deps.\nENV DEBIAN_FRONTEND=noninteractive\nRUN apt-get update && apt-get install -y --no-install-recommends \\\n        build-essential \\\n        ca-certificates \\\n        curl \\\n        git \\\n        python \\\n        python-dev \\\n        python-pip \\\n        python-setuptools \\\n        python-tk \\\n        python3 \\\n        python3-pip \\\n        python3-setuptools \\\n        clang \\\n        libcurl4-openssl-dev \\\n        libicu-dev \\\n        libpython-dev \\\n        libpython3-dev \\\n        libncurses5-dev \\\n        libxml2 \\\n        libblocksruntime-dev && rm -rf /var/lib/apt/lists/*;\n\n# Upgrade pips\nRUN pip2 install --no-cache-dir --upgrade pip\nRUN pip3 install --no-cache-dir --upgrade pip\n\n# Install swift-jupyter's dependencies in python3 because we run the kernel in python3.\nWORKDIR /swift-jupyter\nCOPY docker/requirements*.txt ./\nRUN pip3 install --no-cache-dir -r requirements.txt\n\n# Install some python libraries that are useful to call from swift. Since\n# swift can interoperate with python2 and python3, install them in both.\nRUN pip2 install --no-cache-dir -r requirements_py_graphics.txt\nRUN pip3 install --no-cache-dir -r requirements_py_graphics.txt\n\n# Copy the kernel into the container\nWORKDIR /swift-jupyter\nCOPY . .\n\n# Download and extract S4TF\nWORKDIR /swift-tensorflow-toolchain\nADD $swift_tf_url swift.tar.gz\nRUN mkdir usr \\\n    && tar -xzf swift.tar.gz --directory=usr --strip-components=1 \\\n    && rm swift.tar.gz\n\n# Register the kernel with jupyter\nWORKDIR /swift-jupyter\nRUN python3 register.py --user --swift-toolchain /swift-tensorflow-toolchain --swift-python-version 2.7 --kernel-name \"Swift (with Python 2.7)\" && \\\n    python3 register.py --user --swift-toolchain /swift-tensorflow-toolchain --swift-python-library /usr/lib/x86_64-linux-gnu/libpython3.6m.so --kernel-name \"Swift\"\n\n# Configure cuda\nRUN echo \"/usr/local/cuda-10.0/targets/x86_64-linux/lib/stubs\" > /etc/ld.so.conf.d/cuda-10.0-stubs.conf && \\\n    ldconfig\n\n# Run jupyter on startup\nEXPOSE 8888\nRUN mkdir /notebooks\nWORKDIR /notebooks\nCMD [\"/swift-jupyter/docker/run_jupyter.sh\", \"--allow-root\", \"--no-browser\", \"--ip=0.0.0.0\", \"--port=8888\", \"--NotebookApp.custom_display_url=http://127.0.0.1:8888\"]\n"
}