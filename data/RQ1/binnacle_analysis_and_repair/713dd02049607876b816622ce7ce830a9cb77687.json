{
  "startTime": 1674244628320,
  "endTime": 1674244628591,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 89,
        "lineEnd": 89,
        "columnStart": 4,
        "columnEnd": 46
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 92,
        "lineEnd": 92,
        "columnStart": 4,
        "columnEnd": 66
      }
    },
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 146,
        "lineEnd": 146,
        "columnStart": 4,
        "columnEnd": 23
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 65,
        "lineEnd": 65,
        "columnStart": 4,
        "columnEnd": 32
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 96,
        "lineEnd": 96,
        "columnStart": 4,
        "columnEnd": 22
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM alpine:3.9\nMAINTAINER tess@ten7.com\n\n# Create a flightdeck user with the home directory.\nRUN addgroup -g 1000 flightdeck && \\\n    adduser -u 1000 -G flightdeck -D -h /var/www -s /bin/bash flightdeck && \\\n    addgroup flightdeck cron &&  \\\n    mkdir -p -m 774 /var/www && \\\n    chown flightdeck:flightdeck -R /var/www\n\n# Update all the Alpine packages.\nRUN apk -U upgrade\n\n# Install Apache and PHP.\nRUN apk add --update --no-cache \\\n            ansible \\\n            py2-pip \\\n            bash \\\n            busybox-suid \\\n            libcap \\\n            zlib \\\n            php7 \\\n            git \\\n            patch \\\n            curl \\\n            php7-ctype \\\n            php7-curl \\\n            php7-dom \\\n            php7-fileinfo \\\n            php7-gd \\\n            php7-iconv \\\n            php7-json \\\n            php7-ldap \\\n            php7-mbstring \\\n            php7-mcrypt \\\n            php7-memcached \\\n            php7-mysqlnd \\\n            php7-opcache \\\n            php7-openssl \\\n            php7-phar \\\n            php7-sqlite3 \\\n            php7-pdo \\\n            php7-pdo_mysql \\\n            php7-pdo_sqlite \\\n            php7-phar \\\n            php7-soap \\\n            php7-session \\\n            php7-simplexml \\\n            php7-tokenizer \\\n            php7-xdebug \\\n            php7-exif \\\n            php7-xml \\\n            php7-xmlwriter \\\n            php7-zip \\\n            php7-zlib \\\n            mariadb-client \\\n            rsync \\\n            supervisor \\\n            openssh \\\n            openssh-client \\\n            nodejs-npm \\\n    && rm -rf /tmp/* \\\n    && rm -rf /var/cache/apk/*\n\n# Install Python 3 dependencies from pip\nRUN pip3 install --no-cache-dir passlib PyMySQL\n\n# Chown the flightdeck user directory and create needed cron directories\nRUN mkdir -p -m 774 \\\n      /etc/periodic \\\n      /etc/crontabs \\\n      /var/spool/cron \\\n      /var/log/cron \\\n      /var/www/.ssh \\\n      /var/www/.drush \\\n      /var/www/.drush/sites \\\n      /var/www/.npm-global \\\n    && \\\n    chown -R flightdeck:flightdeck \\\n      /var/www \\\n      /var/www/.ssh \\\n      /var/www/.drush \\\n      /var/www/.drush/sites \\\n      /var/www/.npm-global\n\n# Forward cron logs to docker log collector\nRUN ln -sf /dev/stdout /var/log/cron/cron.log\n\n# Install composer\nRUN curl -f -sS https://getcomposer.org/installer | php -- --install-dir=/usr/bin --filename=composer\n\n# Install Drupal console\nRUN curl -f https://drupalconsole.com/installer -L -o /usr/bin/drupal && \\\n    chmod 777 /usr/bin/drupal\n\n# Install passlib and aws cli from pip as apk versions are in testing.\nRUN pip install --no-cache-dir awscli\n\n# Copy PHP configuration files.\nCOPY php.ini /etc/php7/\nCOPY 00_opcache.ini /etc/php7/conf.d/00_opcache.ini\nCOPY xdebug.ini /etc/php7/conf.d/xdebug.ini\n\n# Copy other configuration files.\nCOPY supervisord.conf  /etc/supervisord.conf\nCOPY sshd_config  /etc/ssh/sshd_config\nCOPY motd.txt /etc/motd\n\n# Copy various key scripts to a directory in $PATH.\nCOPY docker-entrypoint.sh /usr/local/bin/\nCOPY vim.sh /usr/local/bin/vim\n\n# Make them all executable.\nRUN chmod a+x /usr/local/bin/docker-entrypoint.sh && \\\n    chmod a+x /usr/local/bin/vim\n\n# Copy the entire contents of the init.d directory.\nCOPY docker-entrypoint-init.d /docker-entrypoint-init.d\nRUN chmod a+x -R /docker-entrypoint-init.d\n\n# Copy the root bashrc file.\nCOPY bashrc-root /root/.bashrc\n\n# Copy the Ansible configuration files\nCOPY ansible-hosts /etc/ansible/hosts\nCOPY ansible.cfg /etc/ansible/ansible.cfg\n\nEXPOSE 22\nWORKDIR /var/www\n\n# Switch to the ssh user to do additional setup.\nUSER flightdeck\n\n# Copy the user bashrc file.\nCOPY --chown=flightdeck:flightdeck bashrc-user /var/www/.bashrc\nCOPY --chown=flightdeck:flightdeck bashrc-user /var/www/.bash_profile\n\n# Install drush for the ssh user.\nRUN composer global require consolidation/cgr && \\\n    /var/www/.composer/vendor/bin/cgr drush/drush:~9.5.2 && \\\n    /var/www/.composer/vendor/bin/drush core:init -y\n\n# Set the dir for global node packages to be user-local.\nRUN npm config set prefix '/var/www/.npm-global'\n\n# Install dart-sass globally.\nRUN npm install -g sass && npm cache clean --force;\n\n# Switch back to root for sshd.\nUSER root\n\nENTRYPOINT [\"docker-entrypoint.sh\"]\nCMD [\"/usr/bin/supervisord\"]\n"
}