{
  "startTime": 1674241420551,
  "endTime": 1674241421226,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 178,
        "lineEnd": 178,
        "columnStart": 4,
        "columnEnd": 146
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 201,
        "lineEnd": 201,
        "columnStart": 22,
        "columnEnd": 82
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 208,
        "lineEnd": 208,
        "columnStart": 4,
        "columnEnd": 106
      }
    },
    {
      "rule": "curlUseHttpsUrl",
      "position": {
        "lineStart": 201,
        "lineEnd": 201,
        "columnStart": 22,
        "columnEnd": 82
      }
    },
    {
      "rule": "curlUseHttpsUrl",
      "position": {
        "lineStart": 208,
        "lineEnd": 208,
        "columnStart": 4,
        "columnEnd": 106
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 119,
        "lineEnd": 119,
        "columnStart": 4,
        "columnEnd": 29
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 190,
        "lineEnd": 190,
        "columnStart": 4,
        "columnEnd": 15
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 220,
        "lineEnd": 232,
        "columnStart": 4,
        "columnEnd": 13
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 181,
        "lineEnd": 181,
        "columnStart": 4,
        "columnEnd": 79
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 211,
        "lineEnd": 211,
        "columnStart": 4,
        "columnEnd": 79
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM technosoft2000/alpine-base:3.9-1\nMAINTAINER Technosoft2000 <technosoft2000@gmx.net>\nLABEL image.version=\"1.3.2\" \\\n      image.description=\"Docker image for Calibre Web, based on docker image of Alpine\" \\\n      image.date=\"2019-04-18\" \\\n      url.docker=\"https://hub.docker.com/r/technosoft2000/calibre-web\" \\\n      url.github=\"https://github.com/Technosoft2000/docker-calibre-web\" \\\n      url.support=\"https://cytec.us/forum\"\n\n# Set basic environment settings\nENV \\\n    # - VERSION: the docker image version (corresponds to the above LABEL image.version)\n    VERSION=\"1.3.2\" \\\n\n    # - LANG, LANGUAGE, LC_ALL: language dependent settings (Default: en_US.UTF-8)\n    LANG=\"en_US.UTF-8\" \\\n    LANGUAGE=\"en_US.UTF-8\" \\\n    LC_ALL=\"en_US.UTF-8\" \\\n\n    # - PUSER, PGROUP: the APP user and group name\n    PUSER=\"calibre\" \\\n\tPGROUP=\"calibre\" \\\n\n    # - APP_NAME: the APP name\n    APP_NAME=\"Calibre-Web\" \\\n\n    # - APP_HOME: the APP home directory\n    APP_HOME=\"/calibre-web\" \\\n\n    # - APP_REPO, APP_BRANCH: the APP GitHub repository and related branch\n    # for related branch or tag use e.g. master\n    APP_REPO=\"https://github.com/janeczku/calibre-web.git\" \\\n    APP_BRANCH=\"master\" \\\n\n    # - AMAZON_KG_*: KindleGen is a command line tool which enables publishers to work\n    # in an automated environment with a variety of source content including HTML, XHTML or EPUB\n    AMAZON_KG_TAR=\"kindlegen_linux_2.6_i386_v2_9.tar.gz\" \\\n    AMAZON_KG_URL=\"http://kindlegen.s3.amazonaws.com/kindlegen_linux_2.6_i386_v2_9.tar.gz\" \\\n\n    # - CALIBRE_PATH: Configure the path where the Calibre database is located\n    CALIBRE_PATH=\"/books\" \\\n\n    # - PKG_*: the needed applications for installation\n    PKG_DEV=\"build-base python-dev openssl-dev libffi-dev libxml2-dev libxslt-dev\" \\\n    PKG_PYTHON=\"ca-certificates py-pip python py-libxml2 py-libxslt py-lxml libev\" \\\n    # WARNING: Wand supports only ImageMagick 6 at the moment and Alpine delivers already ImageMagick 7\n    # PKG_IMAGES=\"imagemagick imagemagick-doc imagemagick-dev\" \\\n    # need to build ImageMagick 6 from source\n    PKG_IMAGES_DEV=\"curl file fontconfig-dev freetype-dev lcms2-dev \\\n    libjpeg-turbo-dev libpng-dev libtool libwebp-dev perl-dev tiff-dev xz zlib-dev\" \\\n    PKG_IMAGES=\"fontconfig freetype lcms2 libjpeg-turbo libltdl libpng \\\n    libwebp libxml2 tiff zlib\" \\\n    # WARNING: The current Ghosscript 9.26 has a bug which results into a SEGMENTATION FAULT\n    # and therefore we need to build our own Ghosscript 9.26 from source with additional patches\n    # PKG_IMAGES_DEV=\"ghostscript-dev\"\n    # PKG_IMAGES=\"ghostscript\"\n    PKG_GS_DEV=\"libjpeg-turbo-dev libpng-dev jasper-dev expat-dev \\\n    zlib-dev tiff-dev freetype-dev lcms2-dev gtk+3.0-dev \\\n    cups-dev libtool jbig2dec-dev openjpeg-dev\" \\\n    PKG_GS=\"jasper expat jbig2dec openjpeg\" \\\n\n    # - MAGICK_HOME: the ImageMagick home especially for Wand\n    # see at: http://docs.wand-py.org/en/latest/guide/install.html#explicit-link\n    # see at: http://docs.wand-py.org/en/latest/wand/version.html\n    # see at: http://e-mats.org/2017/04/imagemagick-magickwand-under-alphine-linux-python-alpine/\n    MAGICK_HOME=\"/usr\"\n\n# Install GNU libc (aka glibc)\n# https://github.com/sgerrand/alpine-pkg-glibc\nCOPY LOCALE.md /init/\nRUN \\\n\n    ALPINE_GLIBC_BASE_URL=\"https://github.com/sgerrand/alpine-pkg-glibc/releases/download\" && \\\n    ALPINE_GLIBC_PACKAGE_VERSION=\"2.29-r0\" && \\\n    ALPINE_GLIBC_BASE_PACKAGE_FILENAME=\"glibc-$ALPINE_GLIBC_PACKAGE_VERSION.apk\" && \\\n    ALPINE_GLIBC_BIN_PACKAGE_FILENAME=\"glibc-bin-$ALPINE_GLIBC_PACKAGE_VERSION.apk\" && \\\n    ALPINE_GLIBC_I18N_PACKAGE_FILENAME=\"glibc-i18n-$ALPINE_GLIBC_PACKAGE_VERSION.apk\" && \\\n\n    # create temporary directories\n    mkdir -p /tmp && \\\n    mkdir -p /var/cache/apk && \\\n\n    apk add --no-cache --virtual=.build-dependencies wget ca-certificates && \\\n    apk add --no-cache parallel && \\\n\n    wget \"https://alpine-pkgs.sgerrand.com/sgerrand.rsa.pub\" \\\n         -O \"/etc/apk/keys/sgerrand.rsa.pub\" && \\\n\n    wget \"$ALPINE_GLIBC_BASE_URL/$ALPINE_GLIBC_PACKAGE_VERSION/$ALPINE_GLIBC_BASE_PACKAGE_FILENAME\" \\\n         \"$ALPINE_GLIBC_BASE_URL/$ALPINE_GLIBC_PACKAGE_VERSION/$ALPINE_GLIBC_BIN_PACKAGE_FILENAME\" \\\n         \"$ALPINE_GLIBC_BASE_URL/$ALPINE_GLIBC_PACKAGE_VERSION/$ALPINE_GLIBC_I18N_PACKAGE_FILENAME\" && \\\n\n    apk add --no-cache \\\n        \"$ALPINE_GLIBC_BASE_PACKAGE_FILENAME\" \\\n        \"$ALPINE_GLIBC_BIN_PACKAGE_FILENAME\" \\\n        \"$ALPINE_GLIBC_I18N_PACKAGE_FILENAME\" && \\\n\n    # iterate through all locale and install it\n    # NOTE: locale -a is not available in alpine linux, \n    # use `/usr/glibc-compat/bin/locale -a` instead\n    cat /init/LOCALE.md | parallel \"echo generate locale {}; /usr/glibc-compat/bin/localedef --force --inputfile {} --charmap UTF-8 {}.UTF-8;\" && \\\n\n    apk del .build-dependencies && \\\n\n    rm \"/etc/apk/keys/sgerrand.rsa.pub\" && \\\n    rm \"/root/.wget-hsts\" && \\\n    rm \"$ALPINE_GLIBC_BASE_PACKAGE_FILENAME\" \\\n       \"$ALPINE_GLIBC_BIN_PACKAGE_FILENAME\" \\\n       \"$ALPINE_GLIBC_I18N_PACKAGE_FILENAME\"\n\nCOPY ghostscript /init/ghostscript/\nRUN \\\n    echo \"--- Update the package list ------------------------------------------------\" && \\\n    apk -U upgrade && \\\n\n    echo \"--- Install applications via package manager -------------------------------\" && \\\n    apk -U add --no-cache $PKG_DEV $PKG_PYTHON $PKG_IMAGES_DEV $PKG_IMAGES $PKG_GS_DEV $PKG_GS && \\\n\n    echo \"--- Upgrade pip to the latest version --------------------------------------\" && \\\n    pip install --no-cache-dir --upgrade pip && \\\n\n    echo \"--- Install python packages via pip ----------------------------------------\" && \\\n    pip --no-cache-dir install --upgrade \\\n      setuptools \\\n      pyopenssl \\\n    ### REQUIRED ###\n    ### see https://github.com/janeczku/calibre-web/blob/master/requirements.txt\n      Babel \\\n      Flask-Babel \\\n      Flask-Login \\\n      Flask-Principal \\\n      singledispatch \\\n      backports_abc \\\n      Flask \\\n      iso-639 \\\n      PyPDF2 \\\n      pytz \\\n      requests \\\n      SQLAlchemy \\\n      tornado \\\n      Wand \\\n      unidecode \\\n      Pillow \\\n    ### OPTIONAL ###\n    ### https://github.com/janeczku/calibre-web/blob/master/optional-requirements.txt\n      # GDrive Integration\n      google-api-python-client \\\n      gevent \\\n      greenlet \\\n      httplib2 \\\n      oauth2client \\\n      uritemplate \\\n      pyasn1-modules \\\n      pyasn1 \\\n      PyDrive \\\n      PyYAML \\\n      rsa \\\n      six \\\n      # goodreads  \n      goodreads \\\n      python-Levenshtein \\\n      # other\n      lxml \\\n    ### ENHANCEMENT ###\n    ### from jim3ma/docker-calibre-web\n    ### needed for calibre ebook-convert command line tool\n    ### https://github.com/jim3ma/docker-calibre-web/commit/57239b65e8ccd011dc8e9ed6a731571786e12e01\n    ### https://manual.calibre-ebook.com/generated/en/ebook-convert.html\n      Flask-Dance \\\n      && \\\n\n    ### Ghostscript ###\n    echo \"--- Get Ghostscript 9.26 and build it --------------------------------------\" && \\\n\n    # create temporary build directory for Ghostscript\n    mkdir -p /tmp/ghostscript && \\\n\n    # download Ghostscript\n    curl -f -o /tmp/ghostscript-src.tar.gz -L \"https://github.com/ArtifexSoftware/ghostpdl-downloads/releases/download/gs926/ghostscript-9.26.tar.gz\" && \\\n\n    # unpack Ghostscript\n    tar xf /tmp/ghostscript-src.tar.gz -C /tmp/ghostscript --strip-components=1 && \\\n\n    # patch & configure Ghostscript\n    cp /init/ghostscript/* /tmp/ghostscript && \\\n    cd /tmp/ghostscript && \\\n    patch cups/gdevcups.c fix-sprintf.patch && \\\n    patch base/gdevsclass.c fix-put_image-methode.patch && \\\n    patch base/stdio_.h fix-stdio.patch && \\\n    patch base/lib.mak ghostscript-system-zlib.patch && \\\n    ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" && \\\n\n    # compile Ghostscript\n    make so all && \\\n\n    # install Ghostscript\n    make soinstall && \\\n    make install && \\\n\n    ### ImageMagic ###\n    echo \"--- Get ImageMagic 6 and build it ------------------------------------------\" && \\\n    IMAGEMAGICK_VER=$( curl -f --silent https://www.imagemagick.org/download/digest.rdf \\\n\t| grep ImageMagick-6.*tar.xz | sed 's/\\(.*\\).tar.*/\\1/' | sed 's/^.*ImageMagick-/ImageMagick-/') && \\\n\n    # create temporary build directory for ImageMagic\n    mkdir -p /tmp/imagemagick && \\\n\n    # download ImageMagic\n    curl -f -o /tmp/imagemagick-src.tar.xz -L \"https://www.imagemagick.org/download/${IMAGEMAGICK_VER}.tar.xz\" && \\\n\n    # unpack ImageMagic\n    tar xf /tmp/imagemagick-src.tar.xz -C /tmp/imagemagick --strip-components=1 && \\\n\n    # configure ImageMagic\n    cd /tmp/imagemagick && \\\n\n    sed -i -e \\\n\t's:DOCUMENTATION_PATH=\"${DATA_DIR}/doc/${DOCUMENTATION_RELATIVE_PATH}\":DOCUMENTATION_PATH=\"/usr/share/doc/imagemagick\":g' \\\n\tconfigure && \\\n\n    ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" \\\n\t\t\t--infodir=/usr/share/info \\\n\t\t\t--mandir=/usr/share/man \\\n\t\t\t--prefix=/usr \\\n\t\t\t--sysconfdir=/etc \\\n\t\t\t--with-gs-font-dir=/usr/share/fonts/Type1 \\\n\t\t\t--with-gslib \\\n\t\t\t--with-lcms2 \\\n\t\t\t--with-modules \\\n\t\t\t--without-threads \\\n\t\t\t--without-x \\\n\t\t\t--with-tiff \\\n\t\t\t--with-xml && \\\n\n    # compile ImageMagic\n    make && \\\n\n    # install ImageMagic\n    make install && \\\n    find / -name '.packlist' -o -name 'perllocal.pod' -o -name '*.bs' -delete && \\\n\n    # cleanup temporary files\n    rm -rf /tmp/* && rm /tmp/ghostscript-src.tar.gz\n\n# Install calibre binary\n# enhancement from jim3ma/docker-calibre-web\n# needed for calibre ebook-convert command line tool\n# https://github.com/jim3ma/docker-calibre-web\n# https://manual.calibre-ebook.com/generated/en/ebook-convert.html\nENV \\\n    LD_LIBRARY_PATH=\"/usr/lib:/opt/calibre/lib\" \\\n    PATH=\"$PATH:/opt/calibre\" \\\n    LC_ALL=\"C\" \\\n    CALIBRE_INSTALLER_SOURCE_CODE_URL=\"https://raw.githubusercontent.com/kovidgoyal/calibre/master/setup/linux-installer.py\"\n\nRUN \\\n    apk update && \\\n    apk add --no-cache --upgrade \\\n        bash \\\n        ca-certificates \\\n        gcc \\\n        libxcomposite \\\n        mesa-gl \\\n        python \\\n        qt5-qtbase-x11 \\\n        xdg-utils \\\n        xz \\\n        wget && \\\n\n    wget -O- ${CALIBRE_INSTALLER_SOURCE_CODE_URL} | \\\n      python -c \\\n      \"import sys; \\\n       main=lambda:sys.stderr.write('Download failed\\n'); \\\n       exec(sys.stdin.read()); \\\n       main(install_dir='/opt', isolated=True)\" && \\\n\n    rm -rf /tmp/calibre-installer-cache && \\\n\n    # remove not needed packages\n    apk del --purge $PKG_DEV \\\n                    $PKG_IMAGES_DEV && \\\n\n    # create Calibre Web folder structure\n    mkdir -p $APP_HOME/app && \\\n\n    # cleanup temporary files\n    rm -rf /tmp && \\\n    rm -rf /var/cache/apk/*\n\n# set the working directory for the APP\nWORKDIR $APP_HOME/app\n\n# copy files to the image (info.txt and scripts)\nCOPY *.txt /init/\nCOPY *.sh /init/\n\n# copy Calibre related files (e.g. metadata.db)\nCOPY calibre-init /init/calibre-init\n\n# copy patched version of ImageMagick policy.xml\nCOPY imagemagick/policy.xml /etc/ImageMagick-6\n\n# Set volumes for the Calibre Web folder structure\nVOLUME /books\nVOLUME $APP_HOME/app\nVOLUME $APP_HOME/config\nVOLUME $APP_HOME/kindlegen\n\n# Expose ports\nEXPOSE 8083\n"
}