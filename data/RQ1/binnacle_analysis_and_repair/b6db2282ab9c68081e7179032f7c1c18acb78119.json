{
  "startTime": 1674241327795,
  "endTime": 1674241328186,
  "originalSmells": [
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 123,
        "lineEnd": 123,
        "columnStart": 4,
        "columnEnd": 16
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 132,
        "lineEnd": 132,
        "columnStart": 4,
        "columnEnd": 16
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "ARG BASE_IMAGE_TAG\n\nFROM wodby/alpine:${BASE_IMAGE_TAG}\n\nARG VARNISH_VER\n\nENV VARNISH_VER=\"${VARNISH_VER}\" \\\n    LIBVMOD_GEOIP=\"1.0.3\"\n\nCOPY patches /tmp/patches/\nCOPY GeoIP.dat.gz /usr/share/GeoIP/\n\nRUN set -ex; \\\n\n    addgroup -g 101 -S varnish; \\\n\tadduser -u 100 -D -S -s /bin/bash -G varnish varnish; \\\n\techo \"PS1='\\w\\$ '\" >> /home/varnish/.bashrc; \\\n\n    apk --update --no-cache -t .varnish-run-deps add \\\n        gcc \\\n        libc-dev \\\n        libedit \\\n        libexecinfo \\\n        geoip \\\n        libgcc \\\n        make \\\n        ncurses-libs \\\n        pcre \\\n        pwgen; \\\n\n    apk --update --no-cache -t .varnish-build-deps add \\\n        attr \\\n        autoconf \\\n        automake \\\n        build-base \\\n        git \\\n        geoip-dev \\\n        libedit-dev \\\n        libexecinfo-dev \\\n        libtool \\\n        linux-headers \\\n        ncurses-dev \\\n        pcre-dev \\\n        py-docutils \\\n        py-sphinx \\\n        python \\\n        rsync; \\\n\n    varnish_url=\"http://varnish-cache.org/_downloads/varnish-${VARNISH_VER}.tgz\"; \\\n    wget -qO- \"${varnish_url}\" | tar xz -C /tmp/; \\\n    cd /tmp/varnish-*; \\\n    mkdir -p /tmp/pkg; \\\n    # Patch from alpine varnish package repository.\n    for i in /tmp/patches/\"${VARNISH_VER:0:1}\"/*.patch; do patch -p1 -i \"${i}\"; done; \\\n\n    ./configure \\\n\t\t--build=x86_64-alpine-linux-musl \\\n\t\t--host=x86_64-alpine-linux-musl \\\n\t\t--prefix=/usr \\\n\t\t--sysconfdir=/etc \\\n\t\t--mandir=/usr/share/man \\\n\t\t--infodir=/usr/share/info \\\n\t\t--localstatedir=/var/lib \\\n\t\t--without-jemalloc; \\\n\n    make -j \"$(nproc)\"; \\\n    make DESTDIR=/tmp/pkg install; \\\n\n    mkdir -p /usr/share/varnish; \\\n    mv LICENSE /usr/share/varnish/; \\\n\n    pkgdir=\"/tmp/pkg\"; \\\n    binfiles=$(scanelf -R \"$pkgdir\" | grep ET_DYN | sed \"s:$pkgdir\\/::g\" | sed \"s:ET_DYN ::g\"); \\\n    for f in $binfiles; do \\\n        srcdir=$(dirname $pkgdir/$f); \\\n        srcfile=$(basename $pkgdir/$f); \\\n        cd $srcdir; \\\n        XATTR=$(getfattr --match=\"\" --dump \"${srcfile}\"); \\\n        strip $srcfile; \\\n        [ -n \"$XATTR\" ] && { echo \"$XATTR\" | setfattr --restore=-; } \\\n    done; \\\n\n    # Remove info, help, docs (default_docs from alpinelinux/abuild).\n    pkgdir=/tmp/pkg; \\\n    for i in doc man info html sgml gtk-doc ri help; do \\\n        if [ -d \"$pkgdir/usr/share/$i\" ]; then \\\n            rm -rf \"$pkgdir/usr/share/$i\"; \\\n        fi; \\\n    done; \\\n\n    # Collect info about dev packages to delete after we run make check for modules.\n    # (modified version of default_dev from alpinelinux/abuild).\n    cd /tmp/pkg; \\\n    libdirs=usr/; \\\n    [ -d lib/ ] && libdirs=\"lib/ $libdirs\"; \\\n    for i in usr/include/* usr/lib/pkgconfig/varnish* usr/share/aclocal/varnish* \\\n            usr/share/gettext usr/bin/*-config \\\n            usr/share/vala/vapi usr/share/gir-[0-9]* \\\n            usr/share/qt*/mkspecs \\\n            usr/lib/qt*/mkspecs \\\n            usr/lib/cmake \\\n            $(find $libdirs -name '*.[acho]' \\\n                -o -name '*.prl' 2>/dev/null); do \\\n        if [ -e \"$pkgdir/$i\" ] || [ -L \"$pkgdir/$i\" ]; then \\\n            echo \"/$i\" >> /tmp/varnish-dev-files; \\\n        fi; \\\n    done; \\\n\n    for i in lib/*.so usr/lib/*.so; do \\\n        if [ -L \"$i\" ]; then \\\n            echo \"/$i\" >> /tmp/varnish-dev-files; \\\n        fi; \\\n    done; \\\n\n    rsync -a --links /tmp/pkg/ /; \\\n\n    libvmod_geoip_url=\"https://github.com/varnish/libvmod-geoip/archive/libvmod-geoip-${LIBVMOD_GEOIP}.tar.gz\"; \\\n    wget -qO- \"${libvmod_geoip_url}\" | tar xz -C /tmp/; \\\n# @todo use .mmdb db instead of legacy .dat https://github.com/varnish/libvmod-geoip/issues/18\n#    wget -qP /usr/share/GeoIP http://geolite.maxmind.com/download/geoip/database/GeoLiteCountry/GeoIP.dat.gz; \\\n    gunzip /usr/share/GeoIP/GeoIP.dat.gz; \\\n    cd /tmp/libvmod-geoip-*; \\\n    ./autogen.sh; \\\n    ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\"; \\\n    make; \\\n    make install; \\\n    make check; \\\n\n    # @todo: freeze one the version with the fix get released https://github.com/varnish/varnish-modules/issues/115\n    git clone --depth 1 -b master --single-branch https://github.com/varnish/varnish-modules /tmp/varnish-modules; \\\n    cd /tmp/varnish-modules; \\\n    ./bootstrap; \\\n    ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\"; \\\n    make; \\\n    make install; \\\n    make check; \\\n\n    install -d -o varnish -g varnish -m750 \\\n\t\t/var/cache/varnish \\\n\t\t/var/log/varnish \\\n\t\t/var/lib/varnish; \\\n\n    install -d -o root -g varnish -m750 \\\n\t    /etc/varnish \\\n\t    /etc/varnish/defaults \\\n\t    /etc/varnish/includes; \\\n\n    touch /etc/varnish/preset.vcl /etc/init.d/varnishd; \\\n    chown varnish:varnish /etc/varnish/preset.vcl /etc/init.d/varnishd; \\\n    chmod +x /etc/init.d/varnishd; \\\n\n    while IFS= read -r file ; do rm -rf -- \"${file}\" ; done < /tmp/varnish-dev-files; \\\n    apk del --purge .varnish-build-deps; \\\n    rm -rf /tmp/*; \\\n    rm -rf /var/cache/apk/*\n\nEXPOSE 6081 6082\n\nVOLUME /var/lib/varnish\n\nCOPY templates /etc/gotpl/\nCOPY bin /usr/local/bin/\nCOPY docker-entrypoint.sh /\n\nENTRYPOINT [\"/docker-entrypoint.sh\"]\nCMD [\"/etc/init.d/varnishd\"]\n"
}