{
  "startTime": 1674244392882,
  "endTime": 1674244393190,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 30,
        "lineEnd": 30,
        "columnStart": 79,
        "columnEnd": 174
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 34,
        "lineEnd": 34,
        "columnStart": 3,
        "columnEnd": 114
      }
    },
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 57,
        "lineEnd": 57,
        "columnStart": 1,
        "columnEnd": 34
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 56,
        "lineEnd": 56,
        "columnStart": 4,
        "columnEnd": 67
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 33,
        "lineEnd": 33,
        "columnStart": 3,
        "columnEnd": 52
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 56,
        "lineEnd": 56,
        "columnStart": 4,
        "columnEnd": 67
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "ARG NODE_VERSION=8.15.0-slim\nFROM node:${NODE_VERSION}\nARG GITHUB_ACCOUNT=ging\nARG GITHUB_REPOSITORY=fiware-pep-proxy\nARG DOWNLOAD_TYPE=latest\n\n# Automated Docker file for Docker Hub\n# This will retrieve the source code of the latest tagged release from GitHub\n\nMAINTAINER FIWARE Wilma PEP Proxy Team. DIT-UPM\n\nWORKDIR /opt\n\nENV GITHUB_ACCOUNT=${GITHUB_ACCOUNT}\nENV GITHUB_REPOSITORY=${GITHUB_REPOSITORY}\n\nWORKDIR /\n\n\n#\n# The following line retrieves the latest source code from GitHub.\n#\n# To obtain the latest stable release run this Docker file with the parameters\n# --no-cache --build-arg DOWNLOAD_TYPE=stable\n#\n# Alternatively for local development, just copy this Dockerfile into file the\n# root of the repository and copy over your local source using :\n#\n# COPY . /opt/fiware-pep-proxy\n#\nRUN if [ ${DOWNLOAD_TYPE} = \"latest\" ] ;then RELEASE=\"master\";else RELEASE=$( curl -f -s https://api.github.com/repos/\"${GITHUB_ACCOUNT}\"/\"${GITHUB_REPOSITORY}\"/releases/latest | grep 'tag_name' | cut -d\\\" -f4) ; fi && \\\n    if [ ${DOWNLOAD_TYPE} = \"latest\" ] ; then echo \"INFO: Building Latest Development\"; else echo \"INFO: Building Release: ${RELEASE}\"; fi && \\\n   apt-get update && \\\n   apt-get install -y  --no-install-recommends unzip && \\\n   curl -f https://github.com/\"${GITHUB_ACCOUNT}\"/\"${GITHUB_REPOSITORY}\"/archive/\"${RELEASE}\".zip -L -s -o source.zip && \\\n   unzip source.zip && \\\n\trm source.zip && \\\n\tmv \"${GITHUB_REPOSITORY}\"-\"${RELEASE}\" /opt/fiware-pep-proxy && \\\n\trm -rf \"${GITHUB_REPOSITORY}\"-\"${RELEASE}\" && \\\n\tapt-get clean && \\\n\tapt-get remove -y unzip && \\\n    apt-get -y autoremove && rm -rf /var/lib/apt/lists/*;\n\n\n\n# For local development, when running the Dockerfile from the root of the repository\n# use the following commands to configure Keyrock, the database and add an entrypoint:\n#\n# COPY extras/docker/config.js.template  /opt/fiware-pep-proxy/config.js\n\n# Copy config file from the same Directory.\nCOPY config.js.template /opt/fiware-pep-proxy/config.js\n\n# Run PEP Proxy\nWORKDIR /opt/fiware-pep-proxy\n\nRUN apt-get install -y  --no-install-recommends make gcc g++ python && \\\n\tnpm install --production --silent && \\\n\trm -rf /root/.npm/cache/* && \\\n\tapt-get clean && \\\n\tapt-get remove -y make gcc g++ python && \\\n\tapt-get -y autoremove && npm cache clean --force; && rm -rf /var/lib/apt/lists/*;\n\n# Ports used by idm\nEXPOSE ${PEP_PROXY_PORT:-1027}\n\nCMD [\"npm\", \"start\" ]\n"
}