{
  "startTime": 1674250163245,
  "endTime": 1674250163535,
  "originalSmells": [
    {
      "rule": "wgetUseHttpsUrl",
      "position": {
        "lineStart": 7,
        "lineEnd": 7,
        "columnStart": 4,
        "columnEnd": 157
      }
    },
    {
      "rule": "aptGetInstallUseY",
      "position": {
        "lineStart": 25,
        "lineEnd": 25,
        "columnStart": 22,
        "columnEnd": 65
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 25,
        "lineEnd": 25,
        "columnStart": 22,
        "columnEnd": 65
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "ARG activator_version=1.3.7\n\nFROM openjdk:8-jdk AS dev\n\nARG activator_version\nWORKDIR /build\n# install prereqs\nRUN wget -q https://downloads.typesafe.com/typesafe-activator/${activator_version}/typesafe-activator-${activator_version}-minimal.zip -O /build/activator.zip && \\\n    unzip -q ./activator.zip\n\nWORKDIR /build/collins\n# install the bare minimum necessary for a scala project to install deps\n# redownload all the deps each time the source changes\nCOPY ./build.sbt /build/collins/build.sbt\nCOPY ./project/ /build/collins/project/\n# just download and update dependencies before we copy in source\nRUN /build/activator-${activator_version}-minimal/activator update\nENTRYPOINT /build/activator-${activator_version}-minimal/activator\n\n# Build stage to build and package the app\nFROM openjdk:8-jdk AS build\n\nARG activator_version\nWORKDIR /build/collins\n\nRUN apt-get update && apt-get install -y --no-install-recommends zip && rm -rf /var/lib/apt/lists/*;\n\n# Copy activator from dev stage\nCOPY --from=dev /build /build\n\n# Copy source and build package\nCOPY . /build/collins\nRUN PLAY_CMD=/build/activator-${activator_version}-minimal/activator ./scripts/package.sh\n\n# Production stage with just the build artifacts and configs\nFROM openjdk:8-jre AS production\n\n# Solr cores should be stored in a volume, so we arent writing stuff to our rootfs\nVOLUME /opt/collins/conf/solr/cores/collins/data\n\nWORKDIR /opt/collins\n\n# copy the built artifacts from the build container and install to /opt/collins\nCOPY --from=build /build/collins/target/collins.zip /build/collins/target/collins.zip\nRUN unzip -q /build/collins/target/collins.zip -d /opt/\n# Add in all the default configs we want in this build so collins can run.\n# You probably will want to override these configs in production\nCOPY conf/docker /opt/collins/conf/\n\nRUN apt-get update && \\\n    apt-get install --no-install-recommends -y ipmitool && \\\n    apt-get clean && \\\n    rm -rf /var/lib/apt/lists/*\n\n# expose HTTP, JMX\nEXPOSE 9000 3333\nCMD [\"/usr/bin/java\",\"-server\",\"-Dconfig.file=/opt/collins/conf/production.conf\",\"-Dhttp.port=9000\",\"-Dlogger.file=/opt/collins/conf/logger.xml\",\"-Dnetworkaddress.cache.ttl=1\",\"-Dnetworkaddress.cache.negative.ttl=1\",\"-Dcom.sun.management.jmxremote\",\"-Dcom.sun.management.jmxremote.port=3333\",\"-Dcom.sun.management.jmxremote.authenticate=false\",\"-Dcom.sun.management.jmxremote.ssl=false\",\"-XX:MaxPermSize=384m\",\"-XX:+CMSClassUnloadingEnabled\",\"-XX:-UsePerfData\",\"-cp\",\"/opt/collins/lib/*\",\"play.core.server.NettyServer\",\"/opt/collins\"]\n"
}