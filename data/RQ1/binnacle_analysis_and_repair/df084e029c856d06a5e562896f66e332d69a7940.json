{
  "startTime": 1674243840443,
  "endTime": 1674243840954,
  "originalSmells": [
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 138,
        "lineEnd": 138,
        "columnStart": 4,
        "columnEnd": 50
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 136,
        "lineEnd": 136,
        "columnStart": 4,
        "columnEnd": 32
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM ubuntu:16.04\n\nLABEL maintainer=\"Cong Xu <cong.xu@intel.com>\"\n\n# These parameters can be overridden by parameterized_docker_build.sh\nARG TF_BUILD_VERSION=r1.11\nARG PYTHON=\"python\"\nARG PYTHON3_DEV=\"\"\nARG WHL_DIR=\"/tmp/pip\"\nARG PIP=\"pip\"\n\nRUN apt-get update && apt-get install -y --no-install-recommends \\\n        build-essential \\\n        curl \\\n        git \\\n        libcurl3-dev \\\n        libfreetype6-dev \\\n        libhdf5-serial-dev \\\n        libpng12-dev \\\n        libzmq3-dev \\\n        pkg-config \\\n        python-dev \\\n        ${PYTHON3_DEV} \\\n        rsync \\\n        software-properties-common \\\n        unzip \\\n        zip \\\n        zlib1g-dev \\\n        openjdk-8-jdk \\\n        openjdk-8-jre-headless \\\n        wget \\\n        libnuma-dev \\\n        openssh-client \\\n        openssh-server \\\n        && \\\n    apt-get clean && \\\n    rm -rf /var/lib/apt/lists/*\n\nRUN curl -fSsL -O https://bootstrap.pypa.io/get-pip.py && \\\n    ${PYTHON} get-pip.py && \\\n    rm get-pip.py\n\nRUN ${PIP} --no-cache-dir install \\\n        Pillow \\\n        h5py \\\n        ipykernel \\\n        jupyter \\\n        keras_applications \\\n        keras_preprocessing \\\n        matplotlib \\\n        mock \\\n        numpy \\\n        scipy \\\n        sklearn \\\n        pandas \\\n        && \\\n    ${PYTHON} -m ipykernel.kernelspec\n\nRUN if [ \"${PYTHON}\" = \"python3\" ]; then \\\n  ln -s -f /usr/bin/python3 /usr/bin/python; \\\n  fi\n\n# Set up our notebook config.\nCOPY jupyter_notebook_config.py /root/.jupyter/\n\n# Jupyter has issues with being run directly:\n#   https://github.com/ipython/ipython/issues/7062\n# We just add a little wrapper script.\nCOPY run_jupyter.sh /\n\n# Set up Bazel.\n\n# Running bazel inside a `docker build` command causes trouble, cf:\n#   https://github.com/bazelbuild/bazel/issues/134\n# The easiest solution is to set up a bazelrc file forcing --batch.\nRUN echo \"startup --batch\" >>/etc/bazel.bazelrc\n# Similarly, we need to workaround sandboxing issues:\n#   https://github.com/bazelbuild/bazel/issues/418\nRUN echo \"build --spawn_strategy=standalone --genrule_strategy=standalone\" \\\n    >>/etc/bazel.bazelrc\n# Install the most recent bazel release.\nENV BAZEL_VERSION 0.15.0\nWORKDIR /\nRUN mkdir /bazel && \\\n    cd /bazel && \\\n    curl -H \"User-Agent: Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/57.0.2987.133 Safari/537.36\" -fSsL -O https://github.com/bazelbuild/bazel/releases/download/$BAZEL_VERSION/bazel-$BAZEL_VERSION-installer-linux-x86_64.sh && \\\n    curl -H \"User-Agent: Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/57.0.2987.133 Safari/537.36\" -fSsL -o /bazel/LICENSE.txt https://raw.githubusercontent.com/bazelbuild/bazel/master/LICENSE && \\\n    chmod +x bazel-*.sh && \\\n    ./bazel-$BAZEL_VERSION-installer-linux-x86_64.sh && \\\n    cd / && \\\n    rm -f /bazel/bazel-$BAZEL_VERSION-installer-linux-x86_64.sh\n\n# Download and build TensorFlow.\nWORKDIR /tensorflow\n\n# Download and build TensorFlow.\n# Enable checking out both tags and branches\nRUN export TAG_PREFIX=\"v\" && \\\n    echo ${TF_BUILD_VERSION} | grep -q ^${TAG_PREFIX}; \\\n    if [ $? -eq 0 ]; then \\\n        git clone --depth=1 https://github.com/tensorflow/tensorflow.git . && \\\n        git fetch --tags && \\\n        git checkout ${TF_BUILD_VERSION}; \\\n   else \\\n        git clone --depth=1 --branch=${TF_BUILD_VERSION} https://github.com/tensorflow/tensorflow.git . ; \\\n    fi\n\nRUN yes \"\" | ${PYTHON} configure.py\nRUN cp .bazelrc /root/.bazelrc\n\nENV CI_BUILD_PYTHON ${PYTHON}\n\n# Set bazel build parameters in .bazelrc in parameterized_docker_build.sh\n# Use --copt=-march values to get optimized builds appropriate for the hardware\n#   platform of your choice.\n# For ivy-bridge or sandy-bridge\n# --copt=-march=\"avx\" \\\n# For haswell, broadwell, or skylake\n# --copt=-march=\"avx2\" \\\nCOPY .bazelrc /root/.mkl.bazelrc\nRUN echo \"import /root/.mkl.bazelrc\" >>/root/.bazelrc\n\nRUN tensorflow/tools/ci_build/builds/configured CPU \\\n    bazel --bazelrc=/root/.bazelrc build -c opt \\\n    tensorflow/tools/pip_package:build_pip_package && \\\n    bazel-bin/tensorflow/tools/pip_package/build_pip_package \"${WHL_DIR}\" && \\\n    ${PIP} --no-cache-dir install --upgrade \"${WHL_DIR}\"/tensorflow-*.whl && \\\n    rm -rf /root/.cache\n# Clean up Bazel cache when done.\n\nWORKDIR /root\n\n# Install Open MPI\nRUN mkdir /tmp/openmpi && \\\n    cd /tmp/openmpi && \\\n    wget https://www.open-mpi.org/software/ompi/v3.0/downloads/openmpi-3.0.0.tar.gz && \\\n    tar zxf openmpi-3.0.0.tar.gz && \\\n    cd openmpi-3.0.0 && \\\n    ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --enable-orterun-prefix-by-default && \\\n    make -j $(nproc) all && \\\n    make install && \\\n    ldconfig && \\\n    rm -rf /tmp/openmpi && rm openmpi-3.0.0.tar.gz\n\n# Create a wrapper for OpenMPI to allow running as root by default\nRUN mv /usr/local/bin/mpirun /usr/local/bin/mpirun.real && \\\n    echo '#!/bin/bash' > /usr/local/bin/mpirun && \\\n    echo 'mpirun.real --allow-run-as-root \"$@\"' >> /usr/local/bin/mpirun && \\\n    chmod a+x /usr/local/bin/mpirun\n\n# Configure OpenMPI to run good defaults:\nRUN echo \"btl_tcp_if_exclude = lo,docker0\" >> /usr/local/etc/openmpi-mca-params.conf\n\n# Install Horovod\nRUN ${PIP} install --no-cache-dir horovod\n\n# Install OpenSSH for MPI to communicate between containers\nRUN mkdir -p /var/run/sshd\n\n# Allow OpenSSH to talk to containers without asking for confirmation\nRUN cat /etc/ssh/ssh_config | grep -v StrictHostKeyChecking > /etc/ssh/ssh_config.new && \\\n    echo \"    StrictHostKeyChecking no\" >> /etc/ssh/ssh_config.new && \\\n    mv /etc/ssh/ssh_config.new /etc/ssh/ssh_config\n\n# TensorBoard\nEXPOSE 6006\n# IPython\nEXPOSE 8888\n\nWORKDIR /root\n"
}