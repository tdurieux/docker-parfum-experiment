{
  "startTime": 1674244915489,
  "endTime": 1674244915650,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 34,
        "lineEnd": 34,
        "columnStart": 4,
        "columnEnd": 98
      }
    },
    {
      "rule": "curlUseHttpsUrl",
      "position": {
        "lineStart": 34,
        "lineEnd": 34,
        "columnStart": 4,
        "columnEnd": 98
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 26,
        "lineEnd": 29,
        "columnStart": 4,
        "columnEnd": 4
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 19,
        "lineEnd": 23,
        "columnStart": 36,
        "columnEnd": 44
      }
    }
  ],
  "repairedSmells": [
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 26,
        "lineEnd": 29,
        "columnStart": 4,
        "columnEnd": 4
      }
    }
  ],
  "repairedDockerfile": "FROM resin/armv7hf-debian\n\nMAINTAINER Th√©o Segonds <theo.segonds@inria.fr>\n\nENV QEMU_EXECVE 1\n\n# Add a timestamp for the build. Also, bust the cache.\n# ADD http://www.timeapi.org/utc/now /opt/docker/etc/timestamp\n\n# Modified version of qemu https://github.com/resin-io/qemu\n# Highly inspired from https://github.com/resin-io-projects/armv7hf-debian-qemu\nCOPY qemu/resin-xbuild qemu/qemu-arm-static  /usr/bin/\n\nRUN [ \"qemu-arm-static\", \"/bin/sh\", \"-c\", \"ln -s resin-xbuild /usr/bin/cross-build-start; ln -s resin-xbuild /usr/bin/cross-build-end; mv /bin/sh /bin/sh.real; ln -s /bin/sh.real /bin/sh\" ]\n\n# wrap the environment with qemu allowing building on x86_64 computer\nRUN [ \"cross-build-start\" ]\n\n# Basic requirements\nRUN apt-get update --fix-missing && apt-get install -y --no-install-recommends \\\n\twget curl \\\n\tbzip2 tar unzip \\\n\tca-certificates \\\n    libglib2.0-0 libxext6 libsm6 libxrender1 && rm -rf /var/lib/apt/lists/*;\n\n# Compilation\nRUN apt-get install -y --no-install-recommends build-essential \\\n\tmake patch cmake \\\n\tgcc \\\n\tg++ \\\n    && rm -rf /var/lib/apt/lists/*\n\n# From https://github.com/conda-forge/docker-images/blob/master/linux-anvil/Dockerfile\n# Install the latest Miniconda with Python 3 and update everything.\nRUN curl -f -s -L https://repo.continuum.io/miniconda/Miniconda3-3.16.0-Linux-armv7l.sh > miniconda.sh && \\\n    openssl md5 miniconda.sh | grep a01cbe45755d576c2bb9833859cf9fd7 && \\\n    bash miniconda.sh -b -p /opt/conda && \\\n    rm miniconda.sh\n\nRUN export PATH=\"/opt/conda/bin:${PATH}\" && \\\n    conda config --set show_channel_urls True && \\\n\t\tconda config --add channels rpi && \\\n    conda update --all --yes && \\\n\t\tconda install -y python=3.6 -c rpi && \\\n    conda install conda-build && \\\n    conda install anaconda-client && \\\n\t\tconda clean -tipsy\n\nENV PATH /opt/conda/bin:$PATH\n\n# Install conda-forge git. -> not available in linux-armV7\nRUN export PATH=\"/opt/conda/bin:${PATH}\" && \\\n    conda install --yes jinja2 && \\\n    conda config --set anaconda_upload yes && \\\n    conda config --set use_pip false && conda config --set show_channel_urls true && \\\n  \tconda clean -tipsy\n\nRUN [ \"cross-build-end\" ]\n\n\nENTRYPOINT [ \"/usr/bin/qemu-arm-static\", \"/usr/bin/env\", \"QEMU_EXECVE=1\" ]\nCMD [ \"/bin/bash\" ]\n"
}