{
  "startTime": 1674241934024,
  "endTime": 1674241934328,
  "originalSmells": [
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 65,
        "lineEnd": 65,
        "columnStart": 7,
        "columnEnd": 18
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 63,
        "lineEnd": 63,
        "columnStart": 7,
        "columnEnd": 35
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 9,
        "lineEnd": 9,
        "columnStart": 7,
        "columnEnd": 32
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 16,
        "lineEnd": 16,
        "columnStart": 5,
        "columnEnd": 50
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 21,
        "lineEnd": 55,
        "columnStart": 4,
        "columnEnd": 14
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 9,
        "lineEnd": 9,
        "columnStart": 7,
        "columnEnd": 32
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 16,
        "lineEnd": 16,
        "columnStart": 5,
        "columnEnd": 50
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 21,
        "lineEnd": 55,
        "columnStart": 4,
        "columnEnd": 14
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM ubuntu:bionic\n\nARG AWS_REGION=us-east-1\n\n# install needed packages. replace httpredir apt source with cloudfront\nRUN set -x \\\n    && sed -i \"s/archive.ubuntu.com/$AWS_REGION.ec2.archive.ubuntu.com/\" /etc/apt/sources.list \\\n    && export DEBIAN_FRONTEND=noninteractive \\\n    && apt-get update \\\n    && apt-get install --no-install-recommends -y gnupg1 \\\n    && apt-key adv --keyserver keyserver.ubuntu.com --recv-keys 0x51716619e084dab9 \\\n    && echo 'deb http://cran.rstudio.com/bin/linux/ubuntu bionic-cran35/' >> /etc/apt/sources.list \\\n    && apt-get update && rm -rf /var/lib/apt/lists/*;\n\n# add ppa repository so we can install java 8 (not in any official repo for bionic)\nRUN apt-get update \\\n  && apt-get install --no-install-recommends -y software-properties-common \\\n  && add-apt-repository ppa:openjdk-r/ppa && rm -rf /var/lib/apt/lists/*;\n\nRUN apt-get update && \\\n    export DEBIAN_FRONTEND=noninteractive && \\\n    apt-get install --no-install-recommends -y \\\n    ant \\\n    build-essential \\\n    clang \\\n    curl \\\n    debsigs \\\n    dpkg-sig \\\n    expect \\\n    fakeroot \\\n    git-core \\\n    libattr1-dev \\\n    libacl1-dev \\\n    libbz2-dev \\\n    libcap-dev \\\n    libcurl4-openssl-dev \\\n    libfuse2 \\\n    libgtk-3-0 \\\n    libgl1-mesa-dev \\\n    libegl1-mesa \\\n    libpam-dev \\\n    libpango1.0-dev \\\n    libuser1-dev \\\n    libssl-dev \\\n    libxslt1-dev \\\n    lsof \\\n    openjdk-8-jdk \\\n    pkg-config \\\n    python \\\n    r-base \\\n    sudo \\\n    unzip \\\n    uuid-dev \\\n    valgrind \\\n    wget \\\n    zlib1g-dev && rm -rf /var/lib/apt/lists/*;\n\n# ensure we use the java 8 compiler\nRUN update-alternatives --set java /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java\n\n## build patchelf\nRUN cd /tmp \\\n    && wget https://nixos.org/releases/patchelf/patchelf-0.9/patchelf-0.9.tar.gz \\\n    && tar xzvf patchelf-0.9.tar.gz \\\n    && cd patchelf-0.9 \\\n    && ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" \\\n    && make \\\n    && make install && rm patchelf-0.9.tar.gz\n\n## run install-boost twice - boost exits 1 even though it has installed good enough for our uses.\n## https://github.com/rstudio/rstudio/blob/master/vagrant/provision-primary-user.sh#L12-L15\nCOPY dependencies/common/install-boost /tmp/\nRUN bash /tmp/install-boost || bash /tmp/install-boost\n\n# set github login from build argument if defined\nARG GITHUB_LOGIN\nENV RSTUDIO_GITHUB_LOGIN=$GITHUB_LOGIN\n\n# install cmake\nCOPY package/linux/install-dependencies /tmp/\nRUN /bin/bash /tmp/install-dependencies\n\n# install common dependencies\nRUN mkdir -p /opt/rstudio-tools/dependencies/common\nCOPY dependencies/common/* /opt/rstudio-tools/dependencies/common/\nRUN cd /opt/rstudio-tools/dependencies/common && /bin/bash ./install-common\n\n# install Qt SDK\nCOPY dependencies/linux/install-qt-sdk /tmp/\nRUN mkdir -p /opt/RStudio-QtSDK && \\\n    export QT_SDK_DIR=/opt/RStudio-QtSDK/Qt5.12.1 && \\\n    export QT_QPA_PLATFORM=minimal && \\\n    /tmp/install-qt-sdk\n\n# create jenkins user, make sudo. try to keep this toward the bottom for less cache busting\nARG JENKINS_GID=999\nARG JENKINS_UID=999\nRUN groupadd -g $JENKINS_GID jenkins && \\\n    useradd -m -d /var/lib/jenkins -u $JENKINS_UID -g jenkins jenkins && \\\n    echo \"jenkins ALL=(ALL) NOPASSWD: ALL\" >> /etc/sudoers\n\n"
}