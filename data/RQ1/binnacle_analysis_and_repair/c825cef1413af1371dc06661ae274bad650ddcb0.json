{
  "startTime": 1674245347257,
  "endTime": 1674245347744,
  "originalSmells": [
    {
      "rule": "wgetUseHttpsUrl",
      "position": {
        "lineStart": 32,
        "lineEnd": 32,
        "columnStart": 4,
        "columnEnd": 58
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 37,
        "lineEnd": 52,
        "columnStart": 4,
        "columnEnd": 41
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 19,
        "lineEnd": 19,
        "columnStart": 4,
        "columnEnd": 40
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 35,
        "lineEnd": 35,
        "columnStart": 4,
        "columnEnd": 37
      }
    },
    {
      "rule": "apkAddUseNoCache",
      "position": {
        "lineStart": 26,
        "lineEnd": 26,
        "columnStart": 4,
        "columnEnd": 26
      }
    },
    {
      "rule": "apkAddUseNoCache",
      "position": {
        "lineStart": 60,
        "lineEnd": 66,
        "columnStart": 7,
        "columnEnd": 58
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM alpine:edge\nMAINTAINER Etopian Inc. <contact@etopian.com>\n\nLABEL   devoply.type=\"site\" \\\n        devoply.cms=\"drupal\" \\\n        devoply.framework=\"drupal\" \\\n        devoply.language=\"php\" \\\n        devoply.require=\"mariadb etopian/nginx-proxy\" \\\n        devoply.recommend=\"redis\" \\\n        devoply.description=\"Drupal on Nginx and PHP-FPM with Drush.\" \\\n        devoply.name=\"Drupal\"\n\n# BUILD NGINX\nENV NGINX_VERSION nginx-1.9.12\n\n# Add s6-overlay\nENV S6_OVERLAY_VERSION v1.17.2.0\n\nADD https://github.com/just-containers/s6-overlay/releases/download/${S6_OVERLAY_VERSION}/s6-overlay-amd64.tar.gz /tmp/s6-overlay.tar.gz\nRUN tar xvfz /tmp/s6-overlay.tar.gz -C / && rm /tmp/s6-overlay.tar.gz\n\nADD root /\n\n# Add the files\nRUN rm /etc/s6/services/s6-fdholderd/down\n\nRUN apk --update --no-cache add nginx && apk del nginx\n\nRUN apk --update add pcre openssl-dev pcre-dev zlib-dev wget build-base \\\n    ca-certificates git linux-headers && \\\n    mkdir -p /tmp/src && \\\n    cd /tmp/src && \\\n    wget https://nginx.org/download/${NGINX_VERSION}.tar.gz && \\\n    wget https://raw.githubusercontent.com/masterzen/nginx-upload-progress-module/master/ngx_http_uploadprogress_module.c && \\\n    git clone https://github.com/masterzen/nginx-upload-progress-module /tmp/nginx-upload-progress-module && \\\n    tar -zxvf ${NGINX_VERSION}.tar.gz && \\\n    cd /tmp/src/${NGINX_VERSION} && \\\n    ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" \\\n        --conf-path=/etc/nginx/nginx.conf \\\n        --with-http_ssl_module \\\n        --with-http_gzip_static_module \\\n        --with-pcre \\\n        --with-file-aio \\\n        --with-http_flv_module \\\n        --with-http_realip_module \\\n        --with-http_mp4_module \\\n        --with-http_stub_status_module \\\n        --with-http_gunzip_module \\\n        --add-module=/tmp/nginx-upload-progress-module \\\n        --prefix=/etc/nginx \\\n        --http-log-path=/var/log/nginx/access.log \\\n        --error-log-path=/var/log/nginx/error.log \\\n        --sbin-path=/usr/local/sbin/nginx && \\\n    make && \\\n    make install && \\\n    apk del --purge build-base openssl-dev zlib-dev git && \\\n    rm -rf /tmp/* && \\\n    rm -rf /var/cache/apk/* && rm ${NGINX_VERSION}.tar.gz\n\nRUN apk update \\\n    && apk add --no-cache bash less vim ca-certificates \\\n    php-fpm php-json php-zlib php-xml php-pdo php-phar php-openssl \\\n    php-pdo_mysql php-mysqli \\\n    php-gd php-iconv php-mcrypt \\\n    php-mysql php-curl php-opcache php-ctype php-apcu \\\n    php-intl php-bcmath php-dom php-xmlreader curl git \\\n    mysql-client php-pcntl php-posix apk-cron postfix musl\n\nRUN rm -rf /var/cache/apk/* && rm -rvf /etc/nginx && mkdir -p /etc/nginx\n\nADD files/nginx/ /etc/nginx/\nADD files/php-fpm.conf /etc/php/\nADD files/drush.sh /\n\nADD files/postfix/main.cf /etc/postfix/main.cf.new\nADD files/postfix/setup_ses.sh /setup_ses.sh\n\n\nRUN mkdir -p /DATA/htdocs && \\\n    mkdir -p /DATA/logs/{nginx,php-fpm} && \\\n    mkdir -p /var/log/nginx/ && \\\n    mkdir -p /var/log/php-fpm/ && \\    \n    chown -R nginx:nginx /var/log/nginx/ && \\\n    mkdir -p /var/cache/nginx/microcache && \\\n    chown -R nginx:nginx /var/cache/nginx/microcache && \\\n    mkdir -p /var/www/localhost/htdocs && \\\n    chown -R nginx:nginx /var/www/localhost/htdocs && \\\n    chown -R  nginx:nginx /DATA && \\    \n    chmod +x /setup_ses.sh && \\ \n    chmod +x /drush.sh\n\nRUN sed -i 's/nginx:x:100:101:Linux User,,,:\\/var\\/www\\/localhost\\/htdocs:\\/sbin\\/nologin/nginx:x:100:101:Linux User,,,:\\/var\\/www\\/localhost\\/htdocs:\\/bin\\/bash/g' /etc/passwd && \\\n    sed -i 's/nginx:x:100:101:Linux User,,,:\\/var\\/www\\/localhost\\/htdocs:\\/sbin\\/nologin/nginx:x:100:101:Linux User,,,:\\/var\\/www\\/localhost\\/htdocs:\\/bin\\/bash/g' /etc/passwd- && \\\n    sed -i 's/;cgi.fix_pathinfo=1/cgi.fix_pathinfo=0/g' /etc/php/php.ini && \\\n    crontab -u nginx -l | { cat; echo \"*/15 * * * * /usr/bin/drush --root=/DATA/htdocs core-cron --yes\"; } | crontab -u nginx -\n\n\n# configure postfix use to amazon ses to send mail.\nENV SES_HOST=\"email-smtp.us-east-1.amazonaws.com\" SES_PORT=\"587\" \\\n    SES_USER=\"\" SES_SECRET=\"\" TERM=\"xterm\" \\\n    DB_HOST=\"172.17.0.1\" DB_USER=\"\" DB_PASS=\"\" DB_NAME=\"\"\n\nRUN /setup_ses.sh && /drush.sh\n\nEXPOSE 80\nVOLUME [\"/DATA\"]\nENTRYPOINT [\"/init\"]\n#CMD [\"/run.sh\"]\n"
}