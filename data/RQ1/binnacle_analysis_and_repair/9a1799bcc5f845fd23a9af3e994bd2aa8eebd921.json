{
  "startTime": 1674245843643,
  "endTime": 1674245843945,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 44,
        "lineEnd": 44,
        "columnStart": 4,
        "columnEnd": 85
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 75,
        "lineEnd": 75,
        "columnStart": 4,
        "columnEnd": 23
      }
    },
    {
      "rule": "sha256sumEchoOneSpaces",
      "position": {
        "lineStart": 65,
        "lineEnd": 65,
        "columnStart": 4,
        "columnEnd": 98
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 41,
        "lineEnd": 42,
        "columnStart": 4,
        "columnEnd": 124
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 46,
        "lineEnd": 46,
        "columnStart": 4,
        "columnEnd": 30
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 48,
        "lineEnd": 49,
        "columnStart": 4,
        "columnEnd": 40
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 50,
        "lineEnd": 50,
        "columnStart": 4,
        "columnEnd": 31
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 51,
        "lineEnd": 51,
        "columnStart": 4,
        "columnEnd": 33
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# Universal image for running Notebook, Dask pipelines, libs, and lint checkers\nARG BASE_IMAGE=ubuntu:18.04\nFROM $BASE_IMAGE\nARG PYTHON=python3\nARG PIP=pip3\n\nLABEL \\\n      author=\"Piers Harding <piers.harding@catalyst.net.nz>\" \\\n      description=\"ARL reference image\" \\\n      license=\"Apache2.0\" \\\n      registry=\"library/piersharding/arl\" \\\n      vendor=\"Catalyst\" \\\n      org.skatelescope.team=\"Systems Team\" \\\n      org.skatelescope.version=\"0.1.0\" \\\n      org.skatelescope.website=\"http://github.com/SKA-ScienceDataProcessor/algorithm-reference-library/\"\n\n# Set environment variables for pipenv execution:\n#\n# * LC_ALL and LANG: Pipenv (specifically, its Click dependency) exits with an\n#   error unless the language encoding is set.\n# * PIPENV_TIMEOUT: increased Pipenv timeout as locking dependencies takes\n#   *forever* inside a Docker container.\n# * PATH: puts virtualenv python/pip/pipenv first on path\n# * VIRTUAL_ENV: for completeness. This environment variable would have been\n#   set by 'source /venv/bin/activate'\n# * PIPENV_VERBOSITY: hides warning about pipenv running inside a virtualenv.\n# * PIPENV_NOSPIN: disables animated spinner for cleaner CI logs\n#\nENV LC_ALL=C.UTF-8 \\\n    LANG=C.UTF-8 \\\n    PIPENV_TIMEOUT=900 \\\n    PATH=/arl/venv/bin:$PATH \\\n    VIRTUAL_ENV=/arl/venv \\\n    PIPENV_VERBOSITY=-1 \\\n    PIPENV_NOSPIN=1 \\\n    HOME=/root \\\n    DEBIAN_FRONTEND=noninteractive\n\n# the package basics for Python 3\nRUN \\\n    apt-get update -y && \\\n    apt-get install --no-install-recommends -y software-properties-common pkg-config dirmngr \\\n            python3-software-properties build-essential curl wget fonts-liberation ca-certificates libcfitsio-dev libffi-dev && \\\n    add-apt-repository -y ppa:git-core/ppa && \\\n    curl -f -s https://packagecloud.io/install/repositories/github/git-lfs/script.deb.sh | bash && \\\n    apt-key adv --keyserver keyserver.ubuntu.com --recv-keys 6B05F25D762E3157 && \\\n    apt-get install --no-install-recommends -y git-lfs && \\\n    git lfs install && \\\n    apt-get install --no-install-recommends -y $PYTHON-dev $PYTHON-tk flake8 $PYTHON-nose \\\n            virtualenv virtualenvwrapper && \\\n    apt-get install --no-install-recommends -y graphviz && \\\n    apt-get install --no-install-recommends -y nodejs npm && \\\n    apt-get clean -y && \\\n    rm -rf /var/lib/apt/lists/* /var/cache/apt/archives/*\n\n# node node is linked to nodejs\nRUN if [ ! -f /usr/bin/node ]; then ln -s /usr/bin/nodejs /usr/bin/node ; fi && \\\n    node --version\n\n# sort out pip and python for 3.x\nRUN cd /src; wget https://bootstrap.pypa.io/get-pip.py && $PYTHON get-pip.py; \\\n    rm -rf /root/.cache\n\n# Install Tini\nRUN wget --quiet https://github.com/krallin/tini/releases/download/v0.18.0/tini && \\\n    echo \"12d20136605531b09a2c2dac02ccee85e1b874eb322ef6baf7561cd93f93c855  *tini\" | sha256sum -c - && \\\n    mv tini /usr/local/bin/tini && \\\n    chmod +x /usr/local/bin/tini\n\nRUN mkdir -p /arl\n\nWORKDIR /arl\nRUN virtualenv -p $PYTHON ${VIRTUAL_ENV}\n\n# Install pipenv into the new virtual environment\nRUN pip install --no-cache-dir pipenv; rm -rf /root/.cache\n\n# Copy the Pipfile and frozen hashes (Pipfile.lock) across to the image so\n# that pipenv knows what to install\nCOPY Pipfile /src/Pipfile\nCOPY Pipfile.lock /src/Pipfile.lock\n\n# Install ARL dependencies into the virtual environment.\nRUN cd /src; pipenv install --dev; rm -rf /root/.cache\n\n\n# Add and install Jupyter dependencies\nRUN $PIP install bokeh && $PIP install pytest; $PIP install jupyter_nbextensions_configurator; $PIP install jupyter_contrib_nbextensions; rm -rf /root/.cache\nRUN $PIP install -U pylint; rm -rf /root/.cache\nRUN jupyter contrib nbextension install --system --symlink\nRUN jupyter nbextensions_configurator enable --system\n\n# runtime specific environment\nENV JENKINS_URL 1\nENV PYTHONPATH /arl\nENV ARL /arl\nENV JUPYTER_PATH /arl/examples/arl\n\nRUN touch \"${HOME}/.bash_profile\"\n\n# Bundle app source\n# COPY limited by /.dockerignore\nCOPY ./docker/boot.sh ./Makefile ./setup.py /arl/\nCOPY . /arl/\n\n# run setup\nRUN \\\n    cd /arl && \\\n    $PYTHON setup.py build && \\\n    $PYTHON setup.py install && \\\n    cp ./build/lib.*/*.so . && \\\n    cd /arl/workflows/ffiwrapped/serial && \\\n    make && \\\n    $PIP install mpi4py\n\n# create space for libs\nRUN mkdir -p /arl/test_data /arl/test_results && \\\n    chmod 777 /arl /arl/test_data /arl/test_results\n\nCOPY --chown=\"1000:100\" ./docker/jupyter_notebook_config.py \"${HOME}/.jupyter/\"\nCOPY ./docker/notebook.sh /usr/local/bin/\nCOPY ./docker/start-dask-scheduler.sh /usr/local/bin/\nCOPY ./docker/start-dask-worker.sh /usr/local/bin\n\n# We share in the arl data here\nVOLUME [\"/arl/data\", \"/arl/tmp\"]\n\n# Expose Jupyter and Bokeh ports\nEXPOSE  8888 8786 8787 8788 8789\n\n# Setup the entrypoint or environment\nENTRYPOINT [\"tini\", \"--\"]\n\n# Run - default is notebook\nCMD [\"/arl/boot.sh\"]\n"
}