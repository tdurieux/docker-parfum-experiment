{
  "startTime": 1674238673384,
  "endTime": 1674238674021,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 76,
        "lineEnd": 77,
        "columnStart": 4,
        "columnEnd": 90
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 203,
        "lineEnd": 204,
        "columnStart": 4,
        "columnEnd": 76
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 239,
        "lineEnd": 240,
        "columnStart": 4,
        "columnEnd": 66
      }
    },
    {
      "rule": "sha256sumEchoOneSpaces",
      "position": {
        "lineStart": 78,
        "lineEnd": 78,
        "columnStart": 4,
        "columnEnd": 104
      }
    },
    {
      "rule": "sha256sumEchoOneSpaces",
      "position": {
        "lineStart": 205,
        "lineEnd": 205,
        "columnStart": 4,
        "columnEnd": 112
      }
    },
    {
      "rule": "sha256sumEchoOneSpaces",
      "position": {
        "lineStart": 241,
        "lineEnd": 241,
        "columnStart": 5,
        "columnEnd": 98
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 264,
        "lineEnd": 268,
        "columnStart": 4,
        "columnEnd": 12
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 48,
        "lineEnd": 49,
        "columnStart": 4,
        "columnEnd": 11
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 50,
        "lineEnd": 59,
        "columnStart": 4,
        "columnEnd": 12
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 186,
        "lineEnd": 187,
        "columnStart": 4,
        "columnEnd": 11
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 188,
        "lineEnd": 194,
        "columnStart": 4,
        "columnEnd": 16
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 264,
        "lineEnd": 268,
        "columnStart": 4,
        "columnEnd": 12
      }
    },
    {
      "rule": "apkAddUseNoCache",
      "position": {
        "lineStart": 147,
        "lineEnd": 147,
        "columnStart": 4,
        "columnEnd": 18
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# Copyright 2018-2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\"). You may\n# not use this file except in compliance with the License. A copy of the\n# License is located at\n#\n# \thttp://aws.amazon.com/apache2.0/\n#\n# or in the \"license\" file accompanying this file. This file is distributed\n# on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n# express or implied. See the License for the specific language governing\n# permissions and limitations under the License.\n\n#########################################\n#\n# COMMON IMAGES\n#\n#########################################\nFROM debian:stretch as base\n# Set up a non-root user for running builds and some tests in later stages\n# Buildkit caches don't support anything like a \"--chown\" flag yet, so we need to ensure builder will have access to them\nRUN useradd --create-home --uid 1001 builder \\\n\t&& mkdir /output \\\n\t&& chown builder /output \\\n\t&& mkdir -p /home/builder/go/pkg/mod/cache \\\n\t&& mkdir -p /home/builder/cargo/registry \\\n\t&& chown -R builder /home/builder/\n\n\n\n#########################################\n#\n# BUILD IMAGES\n#\n#########################################\n\n\n\n# Common tools needed for the build stages ahead. The final test images do not inherit directly from here, so this bloat\n# is dropped in those final end-use images.\nFROM base as build-base\nENV PATH=\"/bin:/usr/bin:/usr/local/bin:/sbin:/usr/sbin:/usr/local/sbin:/usr/lib/go/bin\" \\\n\tDEBIAN_FRONTEND=\"noninteractive\" \\\n\tGO111MODULE=\"on\"\nRUN mkdir -p /etc/apt/sources.list.d \\\n\t&& echo \"deb http://ftp.debian.org/debian stretch-backports main\" > /etc/apt/sources.list.d/stretch-backports.list \\\n\t&& apt-get update \\\n\t&& apt-get --target-release stretch-backports install --yes --no-install-recommends \\\n\t\tgolang-go \\\n\t&& apt-get install --yes --no-install-recommends \\\n\t\tbuild-essential \\\n\t\tca-certificates \\\n\t\tcurl \\\n\t\tgit \\\n\t\tlibdevmapper-dev \\\n\t\tlibseccomp-dev \\\n\t\tmusl-tools \\\n\t\tpkg-config \\\n\t\tutil-linux && rm -rf /var/lib/apt/lists/*;\n\n# Run as non-root now that the apt installs are out of the way\nUSER builder\nWORKDIR /home/builder\nSHELL [\"/bin/bash\", \"-c\"]\n\n\n\n\n# Build firecracker itself\nFROM build-base as firecracker-build\nENV RUSTUP_HOME=\"/home/builder/rustup\" \\\n\tCARGO_HOME=\"/home/builder/cargo\" \\\n\tPATH=\"/home/builder/cargo/bin:$PATH\" \\\n\tRUST_VERSION=\"1.32.0\"\n\nRUN curl -f --silent --show-error --retry 3 --max-time 30 --output rustup-init \\\n\t\"https://static.rust-lang.org/rustup/archive/1.16.0/x86_64-unknown-linux-gnu/rustup-init\" \\\n\t&& echo \"2d4ddf4e53915a23dda722608ed24e5c3f29ea1688da55aa4e98765fc6223f71  rustup-init\" | sha256sum -c - \\\n\t&& chmod +x rustup-init \\\n\t&& ./rustup-init -y --no-modify-path --default-toolchain $RUST_VERSION \\\n\t&& source ${CARGO_HOME}/env \\\n\t&& rustup target add x86_64-unknown-linux-musl\n\nRUN --mount=type=cache,from=build-base,source=/home/builder/cargo/registry,target=/home/builder/cargo/registry \\\n\tsource ${CARGO_HOME}/env \\\n\t&& git clone https://github.com/firecracker-microvm/firecracker.git \\\n\t&& cd firecracker \\\n\t&& git checkout v0.15.2 \\\n\t&& cargo build --release --features vsock --target x86_64-unknown-linux-musl \\\n\t&& cp target/x86_64-unknown-linux-musl/release/firecracker /output \\\n\t&& cp target/x86_64-unknown-linux-musl/release/jailer /output\n\n\n\n\n# All the build steps for Go code must first lock the go mod cache when downloading modules as Go 1.11 does not support\n# concurrent access.\n# TODO After upgrading to Go 1.12, we can safely concurrently access the cache and combine the download and build steps.\n\n\n\n\n# Build firecracker-containerd\nFROM build-base as firecracker-containerd-build\nENV STATIC_AGENT='true'\n# Normally, it would be simplest to just \"ADD --chown=builder\" the firecracker-containerd source in, but that results in\n# permission denied here because \"ADD --chown\" does not set owner recursively (so when \"go build\" tries to create\n# binaries, it doesn't have write permission on all directories). Instead, we bind mount the firecracker-containerd src\n# directory to a tmp location and copy to one we will actually use (giving ourselves permission to it in the process).\nRUN --mount=type=cache,from=build-base,source=/home/builder/go/pkg/mod,target=/home/builder/go/pkg/mod,sharing=locked \\\n\t--mount=type=bind,target=_firecracker-containerd \\\n\tcp -R _firecracker-containerd firecracker-containerd \\\n\t&& cd firecracker-containerd \\\n\t&& go mod verify || go mod download\nRUN --mount=type=cache,from=build-base,source=/home/builder/go/pkg/mod,target=/home/builder/go/pkg/mod \\\n\tcd firecracker-containerd \\\n\t&& make \\\n\t&& cp \\\n\t\tagent/agent \\\n\t\truntime/containerd-shim-aws-firecracker \\\n\t\tsnapshotter/cmd/devmapper/devmapper_snapshotter \\\n\t\tsnapshotter/cmd/naive/naive_snapshotter \\\n\t\t/output\nRUN --mount=type=cache,from=build-base,source=/home/builder/go/pkg/mod,target=/home/builder/go/pkg/mod \\\n  cd firecracker-containerd/firecracker-control/cmd/containerd/ \\\n  && make \\\n  && cp \\\n  firecracker-containerd \\\n  /output/containerd\n\n\n\n\n#########################################\n#\n# VM IMAGES\n#\n#########################################\n\n\n\n# Build a rootfs for the microVM, including runc and firecracker-containerd's agent\nFROM alpine:3.8 as firecracker-vm-root\nCOPY _submodules/runc/runc /usr/local/bin\nCOPY --from=firecracker-containerd-build /output/agent /usr/local/bin/\nADD tools/docker/fc-agent.start /etc/local.d/fc-agent.start\nRUN apk add --no-cache openrc \\\n\t&& ln -s /etc/init.d/local /etc/runlevels/default/local \\\n\t&& ln -s /etc/init.d/cgroups /etc/runlevels/default/cgroups \\\n\t&& ln -s /etc/init.d/devfs /etc/runlevels/boot/devfs \\\n\t&& ln -s /etc/init.d/hostname /etc/runlevels/boot/hostname \\\n\t&& ln -s /etc/init.d/procfs /etc/runlevels/boot/procfs \\\n\t&& ln -s /etc/init.d/sysfs /etc/runlevels/boot/sysfs\n\n# Convert the VM rootfs into an ext4 file. This step must run as root.\nFROM debian:stretch as firecracker-vm-root-builder\nCOPY --from=firecracker-vm-root / /vm\nRUN mkdir -p /output \\\n\t&& cd /output \\\n\t&& mkfs.ext4 -d /vm vm.ext4 65536\n\n\n\n\n#########################################\n#\n# TEST IMAGES\n#\n#########################################\n\n\n\n# Base image for running tests, including the ability to start firecracker, containerd, firecracker-containerd and our\n# snapshotters.\n# Derived images should include containerd/config.toml, other configuration needed to start a full\n# firecracker-containerd stack and an entrypoint that starts containerd plus one of our snapshotters.\nFROM base as firecracker-containerd-unittest\nENV PATH=\"/bin:/usr/bin:/usr/local/bin:/sbin:/usr/sbin:/usr/local/sbin:/usr/lib/go/bin\" \\\n\tDEBIAN_FRONTEND=\"noninteractive\" \\\n\tFICD_LOG_DIR=\"/var/log/firecracker-containerd-test\"\nENV FICD_SNAPSHOTTER_OUTFILE=\"${FICD_LOG_DIR}/snapshotter.out\" \\\n\tFICD_CONTAINERD_OUTFILE=\"${FICD_LOG_DIR}/containerd.out\"\nRUN mkdir -p /etc/apt/sources.list.d \\\n\t&& echo \"deb http://ftp.debian.org/debian stretch-backports main\" > /etc/apt/sources.list.d/stretch-backports.list \\\n\t&& apt-get update \\\n\t&& apt-get --target-release stretch-backports install --yes --no-install-recommends \\\n\t\tgolang-go \\\n\t&& apt-get install --yes --no-install-recommends \\\n\t\tbuild-essential \\\n\t\tca-certificates \\\n\t\tcurl \\\n\t\tgit \\\n\t\tlibdevmapper-dev \\\n\t\tlibseccomp-dev && rm -rf /var/lib/apt/lists/*;\n\nCOPY --from=firecracker-containerd-build /home/builder/firecracker-containerd /firecracker-containerd\nCOPY --from=firecracker-build /output/* /usr/local/bin/\nCOPY --from=firecracker-vm-root-builder /output/vm.ext4 /var/lib/firecracker-containerd/runtime/default-rootfs.img\nCOPY --from=firecracker-containerd-build /output/* /usr/local/bin/\nCOPY _submodules/runc/runc /usr/local/bin\nCOPY tools/docker/firecracker-runtime.json /etc/containerd/firecracker-runtime.json\n\nRUN curl -f --silent --show-error --retry 3 --max-time 30 --output default-vmlinux.bin \\\n\t\"https://s3.amazonaws.com/spec.ccfc.min/img/hello/kernel/hello-vmlinux.bin\" \\\n\t&& echo \"882fa465c43ab7d92e31bd4167da3ad6a82cb9230f9b0016176df597c6014cef  default-vmlinux.bin\" | sha256sum -c - \\\n\t&& mv default-vmlinux.bin /var/lib/firecracker-containerd/runtime/default-vmlinux.bin\n\nRUN --mount=type=cache,from=build-base,source=/home/builder/go/pkg/mod,target=/tmp/go/pkg/mod,readonly \\\n\tmkdir -p /root/go/pkg/mod \\\n\t&& cp -R /tmp/go/pkg/mod/* /root/go/pkg/mod \\\n\t&& cp -R /tmp/go/pkg/mod/* /home/builder/go/pkg/mod \\\n\t&& chown -R builder /home/builder/go/pkg/mod\n\nRUN mkdir -p /var/run/firecracker-containerd \\\n\t&& mkdir -p ${FICD_LOG_DIR}\n\nENTRYPOINT [\"/bin/bash\", \"-c\"]\n\n\n\n\n# Test image for running unittests as a non-root user\nFROM firecracker-containerd-unittest as firecracker-containerd-unittest-nonroot\nUSER builder\nWORKDIR /home/builder\nSHELL [\"/bin/bash\", \"-c\"]\n\n\n\n\n# Test image that starts up containerd and the naive snapshotter. The default CMD will drop to a bash shell. Overrides\n# to CMD will be provided appended to /bin/bash -c\nFROM firecracker-containerd-unittest as firecracker-containerd-e2etest-naive\n# Install tini init to handle zombies created by our double-forked shims.\n# Unfortunately, we need to do this rather than only use docker's \"--init\" flag because docker\n# currently puts its default init binary at /dev/init, but we need to bind-mount /dev from\n# the host in order for the snapshotter to work.\n# This should no longer be an issue after github.com/moby/moby #37665 is released.\nRUN curl -f --silent --show-error --retry 3 --max-time 30 --location --output tini \\\n  \"https://github.com/krallin/tini/releases/download/v0.18.0/tini\" \\\n  && echo \"12d20136605531b09a2c2dac02ccee85e1b874eb322ef6baf7561cd93f93c855  tini\" | sha256sum -c - \\\n  && mv tini /sbin/tini \\\n  && chmod +x /sbin/tini\n\nCOPY tools/docker/naive-snapshotter/config.toml /etc/containerd/config.toml\nCOPY tools/docker/naive-snapshotter/entrypoint.sh /entrypoint\nRUN mkdir -p /var/lib/firecracker-containerd/naive\n\nENTRYPOINT [\"/sbin/tini\", \"--\", \"/entrypoint\"]\nCMD [\"exec /bin/bash\"]\n\n\n\n\n# TODO Add a stage for the devmapper snapshotter implementation (as opposed to naive implementation)\n\n\n\n\n# Debugging image that starts up containerd and the naive snapshotter and includes some additional basic debugging tools.\n# TODO add firectl here\nFROM firecracker-containerd-e2etest-naive as firecracker-containerd-dev\nRUN apt-get update \\\n\t&& apt-get install --no-install-recommends -y \\\n\t\tstrace \\\n\t\tless \\\n\t\tprocps \\\n\t\tutil-linux && rm -rf /var/lib/apt/lists/*;\n"
}