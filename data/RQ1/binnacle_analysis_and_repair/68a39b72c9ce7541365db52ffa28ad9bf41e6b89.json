{
  "startTime": 1674243677924,
  "endTime": 1674243678036,
  "originalSmells": [
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 23,
        "lineEnd": 23,
        "columnStart": 4,
        "columnEnd": 156
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 24,
        "lineEnd": 24,
        "columnStart": 4,
        "columnEnd": 122
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 23,
        "lineEnd": 23,
        "columnStart": 4,
        "columnEnd": 156
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 24,
        "lineEnd": 24,
        "columnStart": 4,
        "columnEnd": 122
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 23,
        "lineEnd": 23,
        "columnStart": 4,
        "columnEnd": 156
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 24,
        "lineEnd": 24,
        "columnStart": 4,
        "columnEnd": 122
      }
    }
  ],
  "repairedSmells": [
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 23,
        "lineEnd": 23,
        "columnStart": 4,
        "columnEnd": 180
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 24,
        "lineEnd": 24,
        "columnStart": 4,
        "columnEnd": 146
      }
    }
  ],
  "repairedDockerfile": "# Cross compilation environment for librespot\n# Build the docker image from the root of the project with the following command :\n# $ docker build -t librespot-cross -f contrib/Dockerfile .\n#\n# The resulting image can be used to build librespot for linux x86_64, armhf and armel.\n# $ docker run -v /tmp/librespot-build:/build librespot-cross\n#\n# The compiled binaries will be located in /tmp/librespot-build\n#\n# If only one architecture is desired, cargo can be invoked directly with the appropriate options :\n# $ docker run -v /tmp/librespot-build:/build librespot-cross cargo build --release --no-default-features --features \"alsa-backend\"\n# $ docker run -v /tmp/librespot-build:/build librespot-cross cargo build --release --target arm-unknown-linux-gnueabihf --no-default-features --features \"alsa-backend\"\n# $ docker run -v /tmp/librespot-build:/build librespot-cross cargo build --release --target arm-unknown-linux-gnueabi --no-default-features --features \"alsa-backend\"\n#\n\nFROM debian:stretch\n\nRUN dpkg --add-architecture arm64\nRUN dpkg --add-architecture armhf\nRUN dpkg --add-architecture armel\nRUN dpkg --add-architecture mipsel\nRUN apt-get update\n\nRUN apt-get install --no-install-recommends -y curl git build-essential crossbuild-essential-arm64 crossbuild-essential-armel crossbuild-essential-armhf crossbuild-essential-mipsel && rm -rf /var/lib/apt/lists/*;\nRUN apt-get install --no-install-recommends -y libasound2-dev libasound2-dev:arm64 libasound2-dev:armel libasound2-dev:armhf libasound2-dev:mipsel && rm -rf /var/lib/apt/lists/*;\n\nRUN curl https://sh.rustup.rs -sSf | sh -s -- -y\nENV PATH=\"/root/.cargo/bin/:${PATH}\"\nRUN rustup target add aarch64-unknown-linux-gnu\nRUN rustup target add arm-unknown-linux-gnueabi\nRUN rustup target add arm-unknown-linux-gnueabihf\nRUN rustup target add mipsel-unknown-linux-gnu\n\nRUN mkdir /.cargo && \\\n    echo '[target.aarch64-unknown-linux-gnu]\\nlinker = \"aarch64-linux-gnu-gcc\"' > /.cargo/config && \\\n    echo '[target.arm-unknown-linux-gnueabihf]\\nlinker = \"arm-linux-gnueabihf-gcc\"' >> /.cargo/config && \\\n    echo '[target.arm-unknown-linux-gnueabi]\\nlinker = \"arm-linux-gnueabi-gcc\"' >> /.cargo/config && \\\n    echo '[target.mipsel-unknown-linux-gnu]\\nlinker = \"mipsel-linux-gnu-gcc\"' >> /.cargo/config\n\nRUN mkdir /build\nENV CARGO_TARGET_DIR /build\nENV CARGO_HOME /build/cache\n\nADD . /src\nWORKDIR /src\nCMD [\"/src/contrib/docker-build.sh\"]\n"
}