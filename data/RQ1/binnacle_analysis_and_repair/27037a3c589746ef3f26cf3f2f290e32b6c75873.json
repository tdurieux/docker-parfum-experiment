{
  "startTime": 1674243496476,
  "endTime": 1674243497052,
  "originalSmells": [
    {
      "rule": "mkdirUsrSrcThenRemove",
      "position": {
        "lineStart": 75,
        "lineEnd": 75,
        "columnStart": 1,
        "columnEnd": 19
      }
    },
    {
      "rule": "sha256sumEchoOneSpaces",
      "position": {
        "lineStart": 81,
        "lineEnd": 81,
        "columnStart": 2,
        "columnEnd": 50
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "#\n# NOTE: THIS DOCKERFILE IS GENERATED VIA \"update.sh\"\n#\n# PLEASE DO NOT EDIT IT DIRECTLY.\n#\n\nFROM alpine:3.9\n\n# dependencies required for running \"phpize\"\n# these get automatically installed and removed by \"docker-php-ext-*\" (unless they're already installed)\nENV PHPIZE_DEPS \\\n\t\tautoconf \\\n\t\tdpkg-dev dpkg \\\n\t\tfile \\\n\t\tg++ \\\n\t\tgcc \\\n\t\tlibc-dev \\\n\t\tmake \\\n\t\tpkgconf \\\n\t\tre2c\n\n# persistent / runtime deps\nRUN apk add --no-cache \\\n\t\tca-certificates \\\n\t\tcurl \\\n\t\ttar \\\n\t\txz \\\n# https://github.com/docker-library/php/issues/494\n\t\topenssl\n\n# ensure www-data user exists\nRUN set -x \\\n\t&& addgroup -g 82 -S www-data \\\n\t&& adduser -u 82 -D -S -G www-data www-data\n# 82 is the standard uid/gid for \"www-data\" in Alpine\n# https://git.alpinelinux.org/aports/tree/main/apache2/apache2.pre-install?h=3.9-stable\n# https://git.alpinelinux.org/aports/tree/main/lighttpd/lighttpd.pre-install?h=3.9-stable\n# https://git.alpinelinux.org/aports/tree/main/nginx/nginx.pre-install?h=3.9-stable\n\nENV PHP_INI_DIR /usr/local/etc/php\nRUN set -eux; \\\n\tmkdir -p \"$PHP_INI_DIR/conf.d\"; \\\n# allow running as an arbitrary user (https://github.com/docker-library/php/issues/743)\n\t[ ! -d /var/www/html ]; \\\n\tmkdir -p /var/www/html; \\\n\tchown www-data:www-data /var/www/html; \\\n\tchmod 777 /var/www/html\n\n##<autogenerated>##\nENV PHP_EXTRA_CONFIGURE_ARGS --enable-fpm --with-fpm-user=www-data --with-fpm-group=www-data --disable-cgi\n##</autogenerated>##\n\n# Apply stack smash protection to functions using local buffers and alloca()\n# Make PHP's main executable position-independent (improves ASLR security mechanism, and has no performance impact on x86_64)\n# Enable optimization (-O2)\n# Enable linker optimization (this sorts the hash buckets to improve cache locality, and is non-default)\n# Adds GNU HASH segments to generated executables (this is used if present, and is much faster than sysv hash; in this configuration, sysv hash is also generated)\n# https://github.com/docker-library/php/issues/272\nENV PHP_CFLAGS=\"-fstack-protector-strong -fpic -fpie -O2\"\nENV PHP_CPPFLAGS=\"$PHP_CFLAGS\"\nENV PHP_LDFLAGS=\"-Wl,-O1 -Wl,--hash-style=both -pie\"\n\nENV GPG_KEYS 42670A7FE4D0441C8E4632349E4FDC074A4EF02D 5A52880781F755608BF815FC910DEB46F53EA312\n\nENV PHP_VERSION 7.4.0alpha1\nENV PHP_URL=\"https://downloads.php.net/~derick/php-7.4.0alpha1.tar.xz\" PHP_ASC_URL=\"https://downloads.php.net/~derick/php-7.4.0alpha1.tar.xz.asc\"\nENV PHP_SHA256=\"378400b6eced6e358f5db750413a7f9959517b0daef6580b16d640190b7dc364\" PHP_MD5=\"\"\n\nRUN set -xe; \\\n\n\tapk add --no-cache --virtual .fetch-deps \\\n\t\tgnupg \\\n\t\twget \\\n\t; \\\n\n\tmkdir -p /usr/src; rm -rf /usr/src \\\n\tcd /usr/src; \\\n\n\twget -O php.tar.xz \"$PHP_URL\"; \\\n\n\tif [ -n \"$PHP_SHA256\" ]; then \\\n\t\techo \"$PHP_SHA256  *php.tar.xz\" | sha256sum -c -; \\\n\tfi; \\\n\tif [ -n \"$PHP_MD5\" ]; then \\\n\t\techo \"$PHP_MD5 *php.tar.xz\" | md5sum -c -; \\\n\tfi; \\\n\n\tif [ -n \"$PHP_ASC_URL\" ]; then \\\n\t\twget -O php.tar.xz.asc \"$PHP_ASC_URL\"; \\\n\t\texport GNUPGHOME=\"$(mktemp -d)\"; \\\n\t\tfor key in $GPG_KEYS; do \\\n\t\t\tgpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys \"$key\"; \\\n\t\tdone; \\\n\t\tgpg --batch --verify php.tar.xz.asc php.tar.xz; \\\n\t\tcommand -v gpgconf > /dev/null && gpgconf --kill all; \\\n\t\trm -rf \"$GNUPGHOME\"; \\\n\tfi; \\\n\n\tapk del --no-network .fetch-deps\n\nCOPY docker-php-source /usr/local/bin/\n\nRUN set -xe \\\n\t&& apk add --no-cache --virtual .build-deps \\\n\t\t$PHPIZE_DEPS \\\n\t\targon2-dev \\\n\t\tcoreutils \\\n\t\tcurl-dev \\\n\t\tlibedit-dev \\\n\t\tlibsodium-dev \\\n\t\tlibxml2-dev \\\n\t\toniguruma-dev \\\n\t\topenssl-dev \\\n\t\tsqlite-dev \\\n\t\\\n\t&& export CFLAGS=\"$PHP_CFLAGS\" \\\n\t\tCPPFLAGS=\"$PHP_CPPFLAGS\" \\\n\t\tLDFLAGS=\"$PHP_LDFLAGS\" \\\n\t\t# fix ARGON2 detection for 7.4-alpha1 https://github.com/docker-library/php/pull/840#pullrequestreview-249660894\n\t\tARGON2_LIBS=\"-largon2\" \\\n\t\tARGON2_CFLAGS=\"-I/usr/include\" \\\n\t&& docker-php-source extract \\\n\t&& cd /usr/src/php \\\n\t&& gnuArch=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" \\\n\t&& ./configure \\\n\t\t--build=\"$gnuArch\" \\\n\t\t--with-config-file-path=\"$PHP_INI_DIR\" \\\n\t\t--with-config-file-scan-dir=\"$PHP_INI_DIR/conf.d\" \\\n\t\t\\\n# make sure invalid --configure-flags are fatal errors intead of just warnings\n\t\t--enable-option-checking=fatal \\\n\t\t\\\n# https://github.com/docker-library/php/issues/439\n\t\t--with-mhash \\\n\t\t\\\n# --enable-ftp is included here because ftp_ssl_connect() needs ftp to be compiled statically (see https://github.com/docker-library/php/issues/236)\n\t\t--enable-ftp \\\n# --enable-mbstring is included here because otherwise there's no way to get pecl to use it properly (see https://github.com/docker-library/php/issues/195)\n\t\t--enable-mbstring \\\n# --enable-mysqlnd is included here because it's harder to compile after the fact than extensions are (since it's a plugin for several extensions, not an extension in itself)\n\t\t--enable-mysqlnd \\\n# https://wiki.php.net/rfc/argon2_password_hash (7.2+)\n\t\t--with-password-argon2 \\\n# https://wiki.php.net/rfc/libsodium\n\t\t--with-sodium=shared \\\n\t\t\\\n\t\t--with-curl \\\n\t\t--with-libedit \\\n\t\t--with-openssl \\\n\t\t--with-zlib \\\n\t\t\\\n# bundled pcre does not support JIT on s390x\n# https://manpages.debian.org/stretch/libpcre3-dev/pcrejit.3.en.html#AVAILABILITY_OF_JIT_SUPPORT\n\t\t$(test \"$gnuArch\" = 's390x-linux-gnu' && echo '--without-pcre-jit') \\\n\t\t\\\n\t\t$PHP_EXTRA_CONFIGURE_ARGS \\\n\t&& make -j \"$(nproc)\" \\\n\t&& find -type f -name '*.a' -delete \\\n\t&& make install \\\n\t&& { find /usr/local/bin /usr/local/sbin -type f -perm +0111 -exec strip --strip-all '{}' + || true; } \\\n\t&& make clean \\\n\t\\\n# https://github.com/docker-library/php/issues/692 (copy default example \"php.ini\" files somewhere easily discoverable)\n\t&& cp -v php.ini-* \"$PHP_INI_DIR/\" \\\n\t\\\n\t&& cd / \\\n\t&& docker-php-source delete \\\n\t\\\n\t&& runDeps=\"$( \\\n\t\tscanelf --needed --nobanner --format '%n#p' --recursive /usr/local \\\n\t\t\t| tr ',' '\\n' \\\n\t\t\t| sort -u \\\n\t\t\t| awk 'system(\"[ -e /usr/local/lib/\" $1 \" ]\") == 0 { next } { print \"so:\" $1 }' \\\n\t)\" \\\n\t&& apk add --no-cache $runDeps \\\n\t\\\n\t&& apk del --no-network .build-deps \\\n\t\\\n# smoke test\n\t&& php --version\n\nCOPY docker-php-ext-* docker-php-entrypoint /usr/local/bin/\n\n# sodium was built as a shared module (so that it can be replaced later if so desired), so let's enable it too (https://github.com/docker-library/php/issues/598)\nRUN docker-php-ext-enable sodium\n\nENTRYPOINT [\"docker-php-entrypoint\"]\n##<autogenerated>##\nWORKDIR /var/www/html\n\nRUN set -ex \\\n\t&& cd /usr/local/etc \\\n\t&& if [ -d php-fpm.d ]; then \\\n\t\t# for some reason, upstream's php-fpm.conf.default has \"include=NONE/etc/php-fpm.d/*.conf\"\n\t\tsed 's!=NONE/!=!g' php-fpm.conf.default | tee php-fpm.conf > /dev/null; \\\n\t\tcp php-fpm.d/www.conf.default php-fpm.d/www.conf; \\\n\telse \\\n\t\t# PHP 5.x doesn't use \"include=\" by default, so we'll create our own simple config that mimics PHP 7+ for consistency\n\t\tmkdir php-fpm.d; \\\n\t\tcp php-fpm.conf.default php-fpm.d/www.conf; \\\n\t\t{ \\\n\t\t\techo '[global]'; \\\n\t\t\techo 'include=etc/php-fpm.d/*.conf'; \\\n\t\t} | tee php-fpm.conf; \\\n\tfi \\\n\t&& { \\\n\t\techo '[global]'; \\\n\t\techo 'error_log = /proc/self/fd/2'; \\\n\t\techo; echo '; https://github.com/docker-library/php/pull/725#issuecomment-443540114'; echo 'log_limit = 8192'; \\\n\t\techo; \\\n\t\techo '[www]'; \\\n\t\techo '; if we send this to /proc/self/fd/1, it never appears'; \\\n\t\techo 'access.log = /proc/self/fd/2'; \\\n\t\techo; \\\n\t\techo 'clear_env = no'; \\\n\t\techo; \\\n\t\techo '; Ensure worker stdout and stderr are sent to the main error log.'; \\\n\t\techo 'catch_workers_output = yes'; \\\n\t\techo 'decorate_workers_output = no'; \\\n\t} | tee php-fpm.d/docker.conf \\\n\t&& { \\\n\t\techo '[global]'; \\\n\t\techo 'daemonize = no'; \\\n\t\techo; \\\n\t\techo '[www]'; \\\n\t\techo 'listen = 9000'; \\\n\t} | tee php-fpm.d/zz-docker.conf\n\n# Override stop signal to stop process gracefully\n# https://github.com/php/php-src/blob/17baa87faddc2550def3ae7314236826bc1b1398/sapi/fpm/php-fpm.8.in#L163\nSTOPSIGNAL SIGQUIT\n\nEXPOSE 9000\nCMD [\"php-fpm\"]\n##</autogenerated>##\n"
}