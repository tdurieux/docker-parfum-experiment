{
  "startTime": 1674243788110,
  "endTime": 1674243788720,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 29,
        "lineEnd": 29,
        "columnStart": 7,
        "columnEnd": 92
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 42,
        "lineEnd": 42,
        "columnStart": 7,
        "columnEnd": 151
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 54,
        "lineEnd": 54,
        "columnStart": 7,
        "columnEnd": 82
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 90,
        "lineEnd": 90,
        "columnStart": 7,
        "columnEnd": 86
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 33,
        "lineEnd": 33,
        "columnStart": 7,
        "columnEnd": 18
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 72,
        "lineEnd": 72,
        "columnStart": 7,
        "columnEnd": 83
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 94,
        "lineEnd": 94,
        "columnStart": 7,
        "columnEnd": 50
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 106,
        "lineEnd": 106,
        "columnStart": 7,
        "columnEnd": 50
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 31,
        "lineEnd": 31,
        "columnStart": 7,
        "columnEnd": 45
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 44,
        "lineEnd": 44,
        "columnStart": 7,
        "columnEnd": 46
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 56,
        "lineEnd": 56,
        "columnStart": 7,
        "columnEnd": 49
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 92,
        "lineEnd": 92,
        "columnStart": 7,
        "columnEnd": 51
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 7,
        "lineEnd": 20,
        "columnStart": 4,
        "columnEnd": 13
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 127,
        "lineEnd": 127,
        "columnStart": 4,
        "columnEnd": 65
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# Multistage docker build, requires docker 17.05\n\n# builder stage\nFROM ubuntu:16.04 as builder\n\nRUN set -ex && \\\n    apt-get update && \\\n    apt-get --no-install-recommends --yes install \\\n        ca-certificates \\\n        cmake \\\n        g++ \\\n        make \\\n        pkg-config \\\n        graphviz \\\n        doxygen \\\n        git \\\n        curl \\\n        libtool-bin \\\n        autoconf \\\n        automake \\\n        bzip2 && rm -rf /var/lib/apt/lists/*;\n\nWORKDIR /usr/local\n\n#Cmake\nARG CMAKE_VERSION=3.12.0\nARG CMAKE_VERSION_DOT=v3.12\nARG CMAKE_HASH=d0781a90f6cdb9049d104ac16a150f9350b693498b9dea8a0331e799db6b9d69\nRUN set -ex \\\n    && curl -f -s -O https://cmake.org/files/${CMAKE_VERSION_DOT}/cmake-${CMAKE_VERSION}.tar.gz \\\n    && echo \"${CMAKE_HASH}  cmake-${CMAKE_VERSION}.tar.gz\" | sha256sum -c \\\n    && tar -xzf cmake-${CMAKE_VERSION}.tar.gz \\\n    && cd cmake-${CMAKE_VERSION} \\\n    && ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" \\\n    && make \\\n    && make install && rm cmake-${CMAKE_VERSION}.tar.gz\n\n## Boost\nARG BOOST_VERSION=1_67_0\nARG BOOST_VERSION_DOT=1.67.0\nARG BOOST_HASH=2684c972994ee57fc5632e03bf044746f6eb45d4920c343937a465fd67a5adba\nRUN set -ex \\\n    && curl -f -s -L -o  boost_${BOOST_VERSION}.tar.bz2 https://dl.bintray.com/boostorg/release/${BOOST_VERSION_DOT}/source/boost_${BOOST_VERSION}.tar.bz2 \\\n    && echo \"${BOOST_HASH}  boost_${BOOST_VERSION}.tar.bz2\" | sha256sum -c \\\n    && tar -xvf boost_${BOOST_VERSION}.tar.bz2 \\\n    && cd boost_${BOOST_VERSION} \\\n    && ./bootstrap.sh \\\n    && ./b2 --build-type=minimal link=static runtime-link=static --with-chrono --with-date_time --with-filesystem --with-program_options --with-regex --with-serialization --with-system --with-thread --with-locale threading=multi threadapi=pthread cflags=\"-fPIC\" cxxflags=\"-fPIC\" stage && rm boost_${BOOST_VERSION}.tar.bz2\nENV BOOST_ROOT /usr/local/boost_${BOOST_VERSION}\n\n# OpenSSL\nARG OPENSSL_VERSION=1.1.0h\nARG OPENSSL_HASH=5835626cde9e99656585fc7aaa2302a73a7e1340bf8c14fd635a62c66802a517\nRUN set -ex \\\n    && curl -f -s -O https://www.openssl.org/source/openssl-${OPENSSL_VERSION}.tar.gz \\\n    && echo \"${OPENSSL_HASH}  openssl-${OPENSSL_VERSION}.tar.gz\" | sha256sum -c \\\n    && tar -xzf openssl-${OPENSSL_VERSION}.tar.gz \\\n    && cd openssl-${OPENSSL_VERSION} \\\n    && ./Configure linux-x86_64 no-shared --static -fPIC \\\n    && make build_generated \\\n    && make libcrypto.a \\\n    && make install && rm openssl-${OPENSSL_VERSION}.tar.gz\nENV OPENSSL_ROOT_DIR=/usr/local/openssl-${OPENSSL_VERSION}\n\n# ZMQ\nARG ZMQ_VERSION=v4.2.5\nARG ZMQ_HASH=d062edd8c142384792955796329baf1e5a3377cd\nRUN set -ex \\\n    && git clone https://github.com/zeromq/libzmq.git -b ${ZMQ_VERSION} \\\n    && cd libzmq \\\n    && test `git rev-parse HEAD` = ${ZMQ_HASH} || exit 1 \\\n    && ./autogen.sh \\\n    && CFLAGS=\"-fPIC\" CXXFLAGS=\"-fPIC\" ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --enable-static --disable-shared \\\n    && make \\\n    && make install \\\n    && ldconfig\n\n# zmq.hpp\nARG CPPZMQ_VERSION=v4.2.3\nARG CPPZMQ_HASH=6aa3ab686e916cb0e62df7fa7d12e0b13ae9fae6\nRUN set -ex \\\n    && git clone https://github.com/zeromq/cppzmq.git -b ${CPPZMQ_VERSION} \\\n    && cd cppzmq \\\n    && test `git rev-parse HEAD` = ${CPPZMQ_HASH} || exit 1 \\\n    && mv *.hpp /usr/local/include\n\n# Readline\nARG READLINE_VERSION=7.0\nARG READLINE_HASH=750d437185286f40a369e1e4f4764eda932b9459b5ec9a731628393dd3d32334\nRUN set -ex \\\n    && curl -f -s -O https://ftp.gnu.org/gnu/readline/readline-${READLINE_VERSION}.tar.gz \\\n    && echo \"${READLINE_HASH}  readline-${READLINE_VERSION}.tar.gz\" | sha256sum -c \\\n    && tar -xzf readline-${READLINE_VERSION}.tar.gz \\\n    && cd readline-${READLINE_VERSION} \\\n    && CFLAGS=\"-fPIC\" CXXFLAGS=\"-fPIC\" ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" \\\n    && make \\\n    && make install && rm readline-${READLINE_VERSION}.tar.gz\n\n# Sodium\nARG SODIUM_VERSION=1.0.16\nARG SODIUM_HASH=675149b9b8b66ff44152553fb3ebf9858128363d\nRUN set -ex \\\n    && git clone https://github.com/jedisct1/libsodium.git -b ${SODIUM_VERSION} \\\n    && cd libsodium \\\n    && test `git rev-parse HEAD` = ${SODIUM_HASH} || exit 1 \\\n    && ./autogen.sh \\\n    && CFLAGS=\"-fPIC\" CXXFLAGS=\"-fPIC\" ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" \\\n    && make \\\n    && make check \\\n    && make install\n\nWORKDIR /src\nCOPY . .\n\nARG NPROC\nRUN set -ex && \\\n    rm -rf build && \\\n    if [ -z \"$NPROC\" ] ; \\\n    then make -j$(nproc) release-static ; \\\n    else make -j$NPROC release-static ; \\\n    fi\n\n# runtime stage\nFROM ubuntu:16.04\n\nRUN set -ex && \\\n    apt-get update && \\\n    apt-get --no-install-recommends --yes install ca-certificates && \\\n    apt-get clean && \\\n    rm -rf /var/lib/apt && rm -rf /var/lib/apt/lists/*;\n\nCOPY --from=builder /src/build/release/bin/* /usr/local/bin/\n\n# Contains the blockchain\nVOLUME /root/.bitmonero\n\n# Generate your wallet via accessing the container and run:\n# cd /wallet\n# monero-wallet-cli\nVOLUME /wallet\n\nEXPOSE 18080\nEXPOSE 18081\n\nENTRYPOINT [\"monerod\", \"--p2p-bind-ip=0.0.0.0\", \"--p2p-bind-port=18080\", \"--rpc-bind-ip=0.0.0.0\", \"--rpc-bind-port=18081\", \"--non-interactive\", \"--confirm-external-bind\"]\n\n"
}