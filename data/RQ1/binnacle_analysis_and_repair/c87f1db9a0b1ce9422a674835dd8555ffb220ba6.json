{
  "startTime": 1674641711569,
  "endTime": 1674641711681,
  "originalSmells": [
    {
      "rule": "aptGetInstallUseY",
      "position": {
        "lineStart": 51,
        "lineEnd": 51,
        "columnStart": 4,
        "columnEnd": 60
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 51,
        "lineEnd": 51,
        "columnStart": 4,
        "columnEnd": 60
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 61,
        "lineEnd": 71,
        "columnStart": 7,
        "columnEnd": 17
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 77,
        "lineEnd": 77,
        "columnStart": 7,
        "columnEnd": 45
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 51,
        "lineEnd": 51,
        "columnStart": 4,
        "columnEnd": 60
      }
    }
  ],
  "repairedSmells": [
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 51,
        "lineEnd": 51,
        "columnStart": 4,
        "columnEnd": 87
      }
    }
  ],
  "repairedDockerfile": "# Copyright (c) Microsoft Corporation. All rights reserved.\n# Licensed under the MIT License.\n#\n# Docker image file that describes an Kali Rolling image with PowerShell\n# installed from Debian9 PowerShell package\n\n# Define arg(s) needed for the From statement\nARG fromTag=kali-rolling\nARG imageRepo=kalilinux/kali-linux-docker\n\nFROM ${imageRepo}:${fromTag} AS installer-env\n\n# Define Args for the needed to add the package\nARG PS_VERSION=6.1.0\nARG PS_PACKAGE=powershell_${PS_VERSION}-1.debian.9_amd64.deb\nARG PS_PACKAGE_URL=https://github.com/PowerShell/PowerShell/releases/download/v${PS_VERSION}/${PS_PACKAGE}\nARG PS_INSTALL_VERSION=6\n\n# Download the Debian9 PowerShell Core package and save it\nADD ${PS_PACKAGE_URL} /tmp/powershell.deb\n\n# Define Args for the needed to add the package\nARG KALI_REPO_KEY_PACKAGE_URL=https://http.kali.org/kali/pool/main/k/kali-archive-keyring/kali-archive-keyring_2018.1_all.deb\n\n# Download the Kali repository package and save it\nADD ${KALI_REPO_KEY_PACKAGE_URL} /tmp/kali-archive-keyring_2018.1_all.deb\n\n# Define Args for the needed to add the package\nARG DEBIAN_PACKAGE_URL=http://ftp.us.debian.org/debian/pool/main/i/icu/libicu57_57.1-6+deb9u2_amd64.deb\n\n# Download the libicu57 Debian package and save it\nADD ${DEBIAN_PACKAGE_URL} /tmp/libicu57_57.1-6+deb9u2_amd64.deb\n\n# Define Args and Env needed to create links\nENV PS_INSTALL_FOLDER=/opt/microsoft/powershell/$PS_INSTALL_VERSION \\\n    \\\n    # Define ENVs for Localization/Globalization\n    DOTNET_SYSTEM_GLOBALIZATION_INVARIANT=false \\\n    LC_ALL=en_US.UTF-8 \\\n    LANG=en_US.UTF-8 \\\n    # Set up PowerShell module analysis cache path\n    PSModuleAnalysisCachePath=/var/cache/microsoft/powershell/PSModuleAnalysisCache/ModuleAnalysisCache \\\n    # Opt out of SocketsHttpHandler in DotNet Core 2.1 to use HttpClientHandler\n    # with installed libcurl4 package to resolve \n    # Invoke-WebRequest : Authentication failed\" issue when executing using\n    # docker run [OPTIONS] IMAGE[:TAG|@DIGEST] [Invoke-WebRequest] [-Uri <HTTPS URL>]\n    DOTNET_SYSTEM_NET_HTTP_USESOCKETSHTTPHANDLER=0\n\n# Installation\nRUN \\\n\n    apt-get install -y --no-install-recommends /tmp/kali-archive-keyring_2018.1_all.deb \\\n    # remove kali package\n    && rm -f /tmp/kali-archive-keyring_2018.1_all.deb \\\n    # install required libicu57 package\n    && dpkg -i /tmp/libicu57_57.1-6+deb9u2_amd64.deb \\\n    # remove libicu57 package\n    && rm -f /tmp/libicu57_57.1-6+deb9u2_amd64.deb \\\n    # update package list\n    && apt-get update \\\n    # install dependencies\n    && apt-get install --no-install-recommends -y \\\n      # required for HttpClientHandler\n      libcurl4 \\\n      # required for SSL\n      ca-certificates \\\n      # required for help in powershell\n      less \\\n      # required to setup the locale\n      locales \\\n      # required to support NTLM for PSRemoting\n      gss-ntlmssp \\\n    # enable en_US.UTF-8 locale\n    && echo \"en_US.UTF-8 UTF-8\" >> /etc/locale.gen \\\n    # generate locale\n    && locale-gen && update-locale \\\n    # install powershell package\n    && apt-get install --no-install-recommends -y /tmp/powershell.deb \\\n    # remove powershell package\n    && rm -f /tmp/powershell.deb \\\n    # intialize powershell module cache\n    && pwsh \\\n        -NoLogo \\\n        -NoProfile \\\n        -Command \" \\\n          \\$ErrorActionPreference = 'Stop' ; \\\n          \\$ProgressPreference = 'SilentlyContinue' ; \\\n          while(!(Test-Path -Path \\$env:PSModuleAnalysisCachePath)) {  \\\n            Write-Host \"'Waiting for $env:PSModuleAnalysisCachePath'\" ; \\\n            Start-Sleep -Seconds 6 ; \\\n          }\" \\\n    # upgrade distro\n    && apt-get dist-upgrade -y \\\n    # clean downloaded packages\n    && apt-get clean \\\n    # remove package list\n    && rm -rf /var/lib/apt/lists/*\n\n# Define args needed only for the labels\nARG IMAGE_NAME=pshorg/powershellcommunity:kali-kali-rolling\nARG VCS_REF=\"none\"\n\n# Add label last as it's just metadata and uses a lot of parameters\nLABEL maintainer=\"PowerShell Team <powershellteam@hotmail.com>\" \\\n      readme.md=\"https://github.com/PowerShell/PowerShell/blob/master/docker/README.md\" \\\n      description=\"This Dockerfile will install the latest release of PowerShell.\" \\\n      org.label-schema.usage=\"https://github.com/PowerShell/PowerShell/tree/master/docker#run-the-docker-image-you-built\" \\\n      org.label-schema.url=\"https://github.com/PowerShell/PowerShell/blob/master/docker/README.md\" \\\n      org.label-schema.vcs-url=\"https://github.com/PowerShell/PowerShell-Docker\" \\\n      org.label-schema.name=\"powershell\" \\\n      org.label-schema.vendor=\"PowerShell\" \\\n      org.label-schema.vcs-ref=${VCS_REF} \\\n      org.label-schema.version=${PS_VERSION} \\\n      org.label-schema.schema-version=\"1.0\" \\\n      org.label-schema.docker.cmd=\"docker run ${IMAGE_NAME} pwsh -c '$psversiontable'\" \\\n      org.label-schema.docker.cmd.devel=\"docker run ${IMAGE_NAME}\" \\\n      org.label-schema.docker.cmd.test=\"docker run ${IMAGE_NAME} pwsh -c Invoke-Pester\" \\\n      org.label-schema.docker.cmd.help=\"docker run ${IMAGE_NAME} pwsh -c Get-Help\"\n\nCMD [ \"pwsh\" ]\n"
}