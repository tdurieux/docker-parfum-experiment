{
  "startTime": 1674250492326,
  "endTime": 1674250492540,
  "originalSmells": [
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 34,
        "lineEnd": 34,
        "columnStart": 4,
        "columnEnd": 50
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 45,
        "lineEnd": 52,
        "columnStart": 30,
        "columnEnd": 21
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "#\n# This builds an image that should be usable as a starting point for\n# most or all of LeastAuthority's Docker images.  The anticipated name\n# for the image is <leastauthority/base>.\n#\n\n#\n# Attempts are made to follow the guidelines at\n# https://docs.docker.com/engine/userguide/eng-image/dockerfile_best-practices/\n#\n\n# Ubuntu 14.04 is the known-working baseline OS.  Others probably work\n# but this is a reasonable starting place.  14.04.5 already has many\n# updates applied so it makes more sense as a starting place than the\n# original 14.04.\nFROM library/ubuntu:14.04.5\n\n# If there are security updates for any of the packages we install,\n# bump the date in this environment variable to invalidate the Docker\n# build cache and force installation of the new packages.  Otherwise,\n# Docker's image/layer cache may prevent the security update from\n# being retrieved.\nENV SECURITY_UPDATES=\"2017-02-17\"\n\n# Set a build-only environment variable to suppress warnings from apt\n# and other package management tools caused by the lack of a tty.\n# This can be overridden by --build-arg but that's not the point.\n# See https://github.com/docker/docker/issues/4032\nARG DEBIAN_FRONTEND=noninteractive\n\n# We'll do an upgrade because the base Ubuntu image isn't guaranteed\n# to include the latest security updates.  This is counter to best\n# practice recommendations but security updates are important.\nRUN apt-get --quiet update && \\\n    apt-get --quiet --no-install-recommends install -y unattended-upgrades && \\\n    unattended-upgrade --minimal_upgrade_steps && \\\nrm -rf /var/lib/apt/lists/*\n\n# Now install some dependencies.\n#\n# The first group of non-Python dependencies required to build the\n# Python dependencies.\n#\n# The second group supports the deployment of the infrastructure\n# server.\nRUN apt-get --quiet update && apt-get --quiet --no-install-recommends install -y \\\n    python-dev \\\n    git-core \\\n    libffi-dev \\\n    openssl \\\n    libssl-dev \\\n\n    python-virtualenv \\\n&& rm -rf /var/lib/apt/lists/*\n\n# Create a virtualenv into which to install the infrastructure server\n# software.\nRUN virtualenv /app/env\n\n# Get the latest version of setuptools.  Some packages are not installable\n# with older versions.\nRUN /app/env/bin/pip install --upgrade setuptools\n\n# Get a newer version of pip.  The version (1.5.4) in the\n# python-virtualenv OS package has a bug that prevents it from\n# installing txAWS.\nRUN /app/env/bin/pip install --upgrade pip\n\n# Also a TLS/SNI-capable install of urllib3 (which doesn't happen by default\n# ...)\nRUN /app/env/bin/pip install --upgrade urllib3[secure]\n"
}