{
  "startTime": 1674245765380,
  "endTime": 1674245765409,
  "originalSmells": [
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 39,
        "lineEnd": 39,
        "columnStart": 4,
        "columnEnd": 22
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 44,
        "lineEnd": 44,
        "columnStart": 4,
        "columnEnd": 23
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM python:3\n\n#\n# Docker image for building the app and running tests. Can be used in lieu of\n# a virtualenv with all dependencies install to make development easier.\n#\n# To build this image, run:\n#\n#  $ docker build -t jira-agile-metrics-dev -f Dockerfile.develop .\n#\n# To run tests, map the source code directory to /app and run pytest:\n#\n#  $ docker run -it --rm -v $PWD:/app jira-agile-metrics-dev pytest /app\n#\n# To run the app itself, map the source code directory /app and an output\n# file directory /data:\n#\n#  $ docker run -it --rm -v $PWD:/app -v $PWD/output:/data jira-agile-metrics-dev jira-agile-metrics --help\n#\n# To run the test server, use port 5000 and map it locally:\n#\n# $ docker run -it --rm -p 5000:5000 -v $PWD:/app --env FLASK_DEBUG=1 jira-agile-metrics-dev jira-agile-metrics --server 0.0.0.0:5000\n#\n# It is not necessary to rebuild the image each time the source code changes,\n# but if you change the `requirements.txt` file of install dependencies, you\n# do need to re-run `docker build` as per above.\n#\n# NOTE: If you bind-mount the source code to `/app` and switch between using\n# the Docker image and local builds, you may confuse the Python bytecode caching\n# mechanism. This can result in problems including `ImportMismatchErrors`.\n#\n# To clear the cache, run:\n#\n#  $ find . -name '__pycache__' -delete -print -o -name '*.pyc' -delete -print\n#\n# This will remove `__pycache__` and `.pyc` files.\n#\n\n# Install requirments first to make future rebuilds faster\nRUN pip install --no-cache-dir pytest\nCOPY ./requirements.txt /requirements.txt\nRUN pip install --no-cache-dir -r /requirements.txt\n\nCOPY . /app\nRUN pip install --no-cache-dir -e /app\n\n# And allow the host to mount the latest source code on top of it\nVOLUME /app\n\n# Outputs will be written to the /data volume\nWORKDIR /data\nVOLUME /data\n\n# Expose port 5000 for the development server\nEXPOSE 5000\n\n# Run with a headless matplotlib backend\nENV MPLBACKEND=\"agg\"\n"
}