{
  "startTime": 1674237076215,
  "endTime": 1674237076888,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 86,
        "lineEnd": 86,
        "columnStart": 7,
        "columnEnd": 83
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 88,
        "lineEnd": 88,
        "columnStart": 7,
        "columnEnd": 71
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 71,
        "lineEnd": 71,
        "columnStart": 7,
        "columnEnd": 89
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 103,
        "lineEnd": 169,
        "columnStart": 7,
        "columnEnd": 94
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM debian:stretch-slim\n\nENV \\\n    # http://nginx.org/en/CHANGES\n    NGINX_VERSION=1.15.9 \\\n    # LUAJIT_VERSION=v2.0.5 \\\n    # LUA_NGINX_MODULE_VERSION=v0.10.11 \\\n    # https://github.com/openresty/echo-nginx-module/releases\n    ECHO_NGINX_MODULE_VERSION=v0.61 \\\n    MODSECURITY_VERSION=v3.0.0-rc1 \\\n    MODSECURITY_NGINX_VERSION=master \\\n    MODSECURITY_NGINX_COMMIT=a2a5858d249222938c2f5e48087a922c63d7f9d8 \\\n    # http://hg.nginx.org/njs/tags\n    NGINSCRIPT_VERSION=0.2.8 \\\n    NGX_BROTLI_VERSION=master \\\n    NGX_DEVEL_KIT_VERSION=v0.3.0 \\\n    NGX_HTTP_REDIS=0.3.8 \\\n    NGINX_MODULE_VTS_VERSION=v0.1.18 \\\n    REDIS2_NGINX_MODULE_VERSION=v0.14 \\\n    SET_MISC_NGINX_MODULE_VERSION=v0.31 \\\n    SRCACHE_NGINX_MODULE_VERSION=v0.31 \\\n    NGINX_GPGKEY=573BFD6B3D8FBC641079A6ABABF5BD827BD9BF62\n\nRUN adduser --system --disabled-password --home /var/cache/nginx --shell /sbin/nologin --group nginx \\\n    && apt-get update \\\n\t&& apt-get install --no-install-recommends --no-install-suggests -y gnupg1 apt-transport-https ca-certificates \\\n    && \\\n\tfound=''; \\\n\tfor server in \\\n\t\tha.pool.sks-keyservers.net \\\n\t\thkp://keyserver.ubuntu.com:80 \\\n\t\thkp://p80.pool.sks-keyservers.net:80 \\\n\t\tpgp.mit.edu \\\n\t; do \\\n\t\techo \"Fetching GPG key $NGINX_GPGKEY from $server\"; \\\n\t\tapt-key adv --keyserver \"$server\" --keyserver-options timeout=10 --recv-keys \"$NGINX_GPGKEY\" && found=yes && break; \\\n\tdone; \\\n    test -z \"$found\" && echo >&2 \"error: failed to fetch GPG key $NGINX_GPGKEY\" && exit 1; \\\n\tapt-get remove --purge --auto-remove -y gnupg1 && rm -rf /var/lib/apt/lists/* \\\n    && echo \"deb https://nginx.org/packages/mainline/debian/ stretch nginx\" >> /etc/apt/sources.list.d/nginx.list \\\n    && echo \"deb-src https://nginx.org/packages/mainline/debian/ stretch nginx\" >> /etc/apt/sources.list.d/nginx.list \\\n    && apt-get update \\\n    && apt-get install --no-install-recommends --no-install-suggests -y \\\n        inotify-tools \\\n        curl \\\n        libyajl-dev \\\n        libgeoip1 \\\n        libgeoip-dev \\\n        dh-autoreconf \\\n        libcurl4-gnutls-dev \\\n        git \\\n        wget \\\n        build-essential \\\n        libpcre3 \\\n        libpcre3-dev \\\n        libssl-dev \\\n        libtool \\\n        autoconf \\\n        libxml2-dev \\\n        zlib1g-dev \\\n        libperl-dev \\\n    && cd /usr/src \\\n    # Create log and cache directories\n    && mkdir -p \\\n        /etc/nginx \\\n        /var/log/nginx \\\n        /var/cache/nginx \\\n    && git clone https://github.com/SpiderLabs/ModSecurity.git --branch ${MODSECURITY_VERSION} --single-branch \\\n    && cd ModSecurity \\\n    && sh build.sh \\\n    && git submodule update --init \\\n    && ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --disable-doxygen-doc --disable-examples --disable-dependency-tracking \\\n    && make \\\n    && make install \\\n    && cd .. \\\n    && git clone https://github.com/SpiderLabs/ModSecurity-nginx.git --branch ${MODSECURITY_NGINX_VERSION} --single-branch \\\n    && cd ModSecurity-nginx \\\n    && git checkout ${MODSECURITY_NGINX_COMMIT} \\\n    && cd .. \\\n    && git clone https://github.com/nginx/njs.git --branch ${NGINSCRIPT_VERSION} --single-branch \\\n    && git clone https://github.com/google/ngx_brotli.git --branch ${NGX_BROTLI_VERSION} --single-branch \\\n    && cd ngx_brotli \\\n    && git submodule update --init \\\n    && cd .. \\\n    && git clone https://github.com/openresty/srcache-nginx-module.git --branch ${SRCACHE_NGINX_MODULE_VERSION} --single-branch \\\n    && git clone https://github.com/openresty/redis2-nginx-module.git --branch ${REDIS2_NGINX_MODULE_VERSION} --single-branch \\\n    && curl -f https://people.freebsd.org/~osa/ngx_http_redis-${NGX_HTTP_REDIS}.tar.gz | tar xz \\\n    && git clone https://github.com/vozlt/nginx-module-vts.git --branch ${NGINX_MODULE_VTS_VERSION} --single-branch \\\n    && curl -f -L https://nginx.org/download/nginx-${NGINX_VERSION}.tar.gz | tar xz \\\n    # Nginx Devel Kit\n    && git clone https://github.com/simpl/ngx_devel_kit.git --branch ${NGX_DEVEL_KIT_VERSION} --single-branch \\\n    # Set Misc Nginx Module\n    && git clone https://github.com/openresty/set-misc-nginx-module.git --branch ${SET_MISC_NGINX_MODULE_VERSION} --single-branch \\\n    # Echo nginx module\n    && git clone https://github.com/openresty/echo-nginx-module.git --branch ${ECHO_NGINX_MODULE_VERSION} --single-branch \\\n    ### Disable Lua module until OpenSSL v1.1 compatible ###\n    # && git clone https://github.com/openresty/lua-nginx-module.git --branch ${LUA_NGINX_MODULE_VERSION} --single-branch \\\n    # && git clone https://luajit.org/git/luajit-2.0.git --branch ${LUAJIT_VERSION} --single-branch \\\n    # && cd luajit-2.0 \\\n    # && make \\\n    # && make install \\\n    ######\n    && cd nginx-${NGINX_VERSION} \\\n    && ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" \\\n        --prefix=/etc/nginx \\\n        --sbin-path=/usr/sbin/nginx \\\n        --modules-path=/usr/lib/nginx/modules \\\n        # Echo\n        --add-dynamic-module=../echo-nginx-module \\\n        # ModSecurity\n        --add-module=../ModSecurity-nginx \\\n        # Brotli\n        --add-dynamic-module=../ngx_brotli \\\n        # nginScript\n        --add-dynamic-module=../njs/nginx \\\n        # SRCache\n        --add-dynamic-module=../srcache-nginx-module \\\n        # Redis2\n        --add-dynamic-module=../redis2-nginx-module \\\n        # HTTP Redis\n        --add-dynamic-module=../ngx_http_redis-${NGX_HTTP_REDIS} \\\n        # virtual host traffic status\n        --add-dynamic-module=../nginx-module-vts \\\n        # Nginx Devel Kit\n        --add-dynamic-module=../ngx_devel_kit \\\n        # Set Misc\n        --add-dynamic-module=../set-misc-nginx-module \\\n        # Lua Module\n        #--add-dynamic-module=../lua-nginx-module \\\n        # Other configs\n        --conf-path=/etc/nginx/nginx.conf \\\n        --error-log-path=/var/log/nginx/error.log \\\n        --http-log-path=/var/log/nginx/access.log \\\n        --pid-path=/var/run/nginx.pid \\\n        --lock-path=/var/run/nginx.lock \\\n        --http-client-body-temp-path=/var/cache/nginx/client_temp \\\n        --http-proxy-temp-path=/var/cache/nginx/proxy_temp \\\n        --http-fastcgi-temp-path=/var/cache/nginx/fastcgi_temp \\\n        --http-uwsgi-temp-path=/var/cache/nginx/uwsgi_temp \\\n        --http-scgi-temp-path=/var/cache/nginx/scgi_temp \\\n        --user=nginx \\\n        --group=nginx \\\n        --with-compat \\\n        --with-file-aio \\\n        --with-threads \\\n        --with-http_addition_module \\\n        --with-http_auth_request_module \\\n        --with-http_dav_module \\\n        --with-http_flv_module \\\n        --with-http_geoip_module=dynamic \\\n        --with-http_gunzip_module \\\n        --with-http_gzip_static_module \\\n        --with-http_mp4_module \\\n        --with-http_perl_module=dynamic \\\n        --with-http_random_index_module \\\n        --with-http_realip_module \\\n        --with-http_secure_link_module \\\n        --with-http_slice_module \\\n        --with-http_ssl_module \\\n        --with-http_stub_status_module \\\n        --with-http_sub_module \\\n        --with-http_v2_module \\\n        --with-mail \\\n        --with-mail_ssl_module \\\n        --with-stream \\\n        --with-stream_realip_module \\\n        --with-stream_ssl_module \\\n        --with-stream_ssl_preread_module \\\n        --with-cc-opt='-g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wp,-D_FORTIFY_SOURCE=2 -fPIC' \\\n        --with-ld-opt='-Wl,-z,relro -Wl,-z,now -Wl,--as-needed -pie -Wl,-rpath,/usr/local/lib' \\\n    && make \\\n    && make install \\\n    # Install Signature\n    && git clone https://github.com/SpiderLabs/owasp-modsecurity-crs.git \\\n    && cp -R ./owasp-modsecurity-crs/rules/ /etc/nginx/ \\\n    && mv /etc/nginx/rules/REQUEST-900-EXCLUSION-RULES-BEFORE-CRS.conf.example /etc/nginx/rules/REQUEST-900-EXCLUSION-RULES-BEFORE-CRS.conf \\\n    && mv /etc/nginx/rules/RESPONSE-999-EXCLUSION-RULES-AFTER-CRS.conf.example /etc/nginx/rules/RESPONSE-999-EXCLUSION-RULES-AFTER-CRS.conf \\\n    # Cleanup\n    && apt-get purge -y \\\n        build-essential \\\n        wget \\\n        git \\\n        curl \\\n        libgeoip-dev \\\n        libpcre3-dev \\\n    && apt-get clean \\\n    && apt-get autoremove -y \\\n    && rm -rf /var/lib/apt/lists/* \\\n    && rm -rf /usr/src/* \\\n    # Forward request and error logs to docker log collector\n    && ln -sf /dev/stdout /var/log/nginx/access.log \\\n    && ln -sf /dev/stderr /var/log/nginx/error.log\n\nCOPY entrypoint.sh /\nCOPY files/geoip/ /etc/nginx/\nRUN chmod +x /entrypoint.sh\nENTRYPOINT [\"/entrypoint.sh\"]\n\nCMD [\"nginx\", \"-c\", \"/etc/nginx/nginx.conf\", \"-g\", \"daemon off;\"]\n"
}