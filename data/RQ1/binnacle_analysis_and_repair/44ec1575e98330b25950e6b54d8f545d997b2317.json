{
  "startTime": 1674241167621,
  "endTime": 1674241168171,
  "originalSmells": [
    {
      "rule": "rmRecursiveAfterMktempD",
      "position": {
        "lineStart": 74,
        "lineEnd": 74,
        "columnStart": 27,
        "columnEnd": 36
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 85,
        "lineEnd": 85,
        "columnStart": 11,
        "columnEnd": 44
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 0,
        "lineEnd": 0,
        "columnStart": 38,
        "columnEnd": 71
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 37,
        "lineEnd": 39,
        "columnStart": 4,
        "columnEnd": 23
      }
    },
    {
      "rule": "gpgUseBatchFlag",
      "position": {
        "lineStart": 29,
        "lineEnd": 29,
        "columnStart": 4,
        "columnEnd": 69
      }
    },
    {
      "rule": "gpgUseBatchFlag",
      "position": {
        "lineStart": 75,
        "lineEnd": 75,
        "columnStart": 7,
        "columnEnd": 102
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM alpine:3.4\n\n# ensure local python is preferred over distribution python\nENV PATH /usr/local/bin:$PATH\n\n# http://bugs.python.org/issue19846\n# > At the moment, setting \"LANG=C\" on a Linux system *fundamentally breaks Python 3*, and that's not OK.\nENV LANG C.UTF-8\n\n# install ca-certificates so that HTTPS works consistently\n# the other runtime dependencies for Python are installed later\nRUN apk add --no-cache ca-certificates\n\nENV GPG_KEY C01E1CAD5EA2C4F0B8E3571504C367C218ADD4FF\nENV PYTHON_VERSION 2.7.12\n\n# if this is called \"PIP_VERSION\", pip explodes with \"ValueError: invalid truth value '<VERSION>'\"\nENV PYTHON_PIP_VERSION 9.0.1\n\nRUN set -ex \\\n\t&& buildDeps=' \\\n\t\ttcl-dev \\\n\t\ttk-dev \\\n\t' \\\n\t&& apt-get update && apt-get install -y $buildDeps --no-install-recommends && rm -rf /var/lib/apt/lists/* \\\n\t\\\n\t&& wget -O python.tar.xz \"https://www.python.org/ftp/python/${PYTHON_VERSION%%[a-z]*}/Python-$PYTHON_VERSION.tar.xz\" \\\n\t&& wget -O python.tar.xz.asc \"https://www.python.org/ftp/python/${PYTHON_VERSION%%[a-z]*}/Python-$PYTHON_VERSION.tar.xz.asc\" \\\n\t&& export GNUPGHOME=\"$(mktemp -d)\" \\\n\t&& gpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys \"$GPG_KEY\" \\\n\t&& gpg --batch --verify python.tar.xz.asc python.tar.xz \\\n\t&& rm -r \"$GNUPGHOME\" python.tar.xz.asc \\\n\t&& mkdir -p /usr/src/python \\\n\t&& tar -xJC /usr/src/python --strip-components=1 -f python.tar.xz \\\n\t&& rm python.tar.xz \\\n\n\t&& cd /usr/src/python \\\n\t&& ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" \\\n\t\t--enable-shared \\\n\t\t--enable-unicode=ucs4 \\\n\t&& make -j$(nproc) \\\n\t&& make install \\\n\t&& ldconfig \\\n\n\t\t&& wget -O /tmp/get-pip.py 'https://bootstrap.pypa.io/get-pip.py' \\\n\t\t&& python2 /tmp/get-pip.py \"pip==$PYTHON_PIP_VERSION\" \\\n\t\t&& rm /tmp/get-pip.py \\\n# we use \"--force-reinstall\" for the case where the version of pip we're trying to install is the same as the version bundled with Python\n# (\"Requirement already up-to-date: pip==8.1.2 in /usr/local/lib/python3.6/site-packages\")\n# https://github.com/docker-library/python/pull/143#issuecomment-241032683\n\t&& pip install --no-cache-dir --upgrade --force-reinstall \"pip==$PYTHON_PIP_VERSION\" \\\n# then we use \"pip list\" to ensure we don't have more than one pip version installed\n# https://github.com/docker-library/python/pull/100\n\t&& [ \"$(pip list |tac|tac| awk -F '[ ()]+' '$1 == \"pip\" { print $2; exit }')\" = \"$PYTHON_PIP_VERSION\" ] \\\n\n\t&& find /usr/local -depth \\\n\t\t\\( \\\n\t\t\t\\( -type d -a -name test -o -name tests \\) \\\n\t\t\t-o \\\n\t\t\t\\( -type f -a -name '*.pyc' -o -name '*.pyo' \\) \\\n\t\t\\) -exec rm -rf '{}' + \\\n\t&& apt-get purge -y --auto-remove $buildDeps \\\n\t&& rm -rf /usr/src/python ~/.cache\n\n# install gosu\nENV GOSU_VERSION 1.9\nRUN set -x \\\n    && apk add --no-cache --virtual .gosu-deps \\\n        dpkg \\\n        gnupg \\\n        openssl \\\n    && dpkgArch=\"$(dpkg --print-architecture | awk -F- '{ print $NF }')\" \\\n    && wget -O /usr/local/bin/gosu \"https://github.com/tianon/gosu/releases/download/$GOSU_VERSION/gosu-$dpkgArch\" \\\n    && wget -O /usr/local/bin/gosu.asc \"https://github.com/tianon/gosu/releases/download/$GOSU_VERSION/gosu-$dpkgArch.asc\" \\\n    && export GNUPGHOME=\"$(mktemp -d)\" \\\n    && gpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys B42F6819007F00F88E364FD4036A9C25BF357DD4 \\\n    && gpg --batch --verify /usr/local/bin/gosu.asc /usr/local/bin/gosu \\\n    && rm -r \"$GNUPGHOME\" /usr/local/bin/gosu.asc \\\n    && chmod +x /usr/local/bin/gosu \\\n    && gosu nobody true \\\n    && apk del .gosu-deps && rm -rf -d\n\n\nRUN apk add --no-cache nginx uwsgi uwsgi-python python-dev build-base dumb-init\n\nRUN pip install --no-cache-dir flask connexion uwsgi\n\nRUN        useradd uwsgi -s /bin/false\nRUN        mkdir /var/log/uwsgi\nRUN        chown -R uwsgi:uwsgi /var/log/uwsgi\n\nONBUILD    ADD . /\n \\\nRUN if [ -f /requirements.txt ]; then \\\n pip install --no-cache-dir -r /requirements.txt; fiONBUILD\n\nENV        UWSGI_NUM_PROCESSES    1\nENV        UWSGI_NUM_THREADS      15\nENV        UWSGI_UID              uwsgi\nENV        UWSGI_GID              uwsgi\nENV        UWSGI_LOG_FILE         /var/log/uwsgi/uwsgi.log\n\nEXPOSE     8080\n\nADD        uwsgi-start.sh /\n\n#CMD        []\n#ENTRYPOINT [\"/uwsgi-start.sh\"]\n\nENTRYPOINT [\"/usr/bin/dumb-init\", \"--\"]\nCMD \t   [\"/uwsgi-start.sh\"]\n"
}