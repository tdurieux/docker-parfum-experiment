{
  "startTime": 1674245159653,
  "endTime": 1674245159755,
  "originalSmells": [
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 29,
        "lineEnd": 29,
        "columnStart": 4,
        "columnEnd": 34
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 42,
        "lineEnd": 42,
        "columnStart": 4,
        "columnEnd": 22
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 3,
        "lineEnd": 6,
        "columnStart": 4,
        "columnEnd": 23
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 3,
        "lineEnd": 6,
        "columnStart": 4,
        "columnEnd": 23
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM ubuntu:18.04\n\nRUN apt-get -y update && \\\n    apt-get -y --no-install-recommends install \\\n        python3 python3-pip redis nano \\\n        libtcmalloc-minimal4 \\\n        gdb python3-dbg && rm -rf /var/lib/apt/lists/*;\n\nENV LD_PRELOAD=libtcmalloc_minimal.so.4\n\n#the gdb-for-python somehow gets confused and thinks that PyUnicodeObject is\n#a struct, instead of a typedef. This is probably related to how the shared\n#object we're building is exporting symbols in some funny way, but either way\n#gdb blows up whenever we do anything after loading typed_python, even if we\n#remove all of the content from it. So probably a compiler problem. This\n#hack ensures that it will work, instead of giving us\n#\n# <class 'RuntimeError'> Type does not have a target.:\n#\n#everywhere in the gdb stacktraces, which is what happens when you try to\n#ask for .target() on the PyUnicodeObject 'struct' (without importing the module\n#it's a typedef)\nRUN sed -i 's/global _is_pep393/_is_pep393=True/' /usr/share/gdb/auto-load/usr/bin/python3.6m-gdb.py\n\nENV APP_PATH /nativepython\nWORKDIR $APP_PATH\nCOPY . .\n\n# install virtualenv\nRUN pip3 install --no-cache-dir --user virtualenv\nENV PATH ${PATH}:/root/.local/bin\n\n# set-up virtualenv\nRUN rm -rf .venv  # remove .venv if it already existed\nRUN virtualenv --python $(which python3) .venv\nENV PATH $APP_PATH/.venv/bin:$PATH\n\n# pipenv needs these which are normally provided by apt-get locales\nENV LC_ALL C.UTF-8\nENV LANG C.UTF-8\n\n# install pipenv and use it to install our dependencies (and the library itself)\nRUN pip install --no-cache-dir pipenv\nRUN pipenv install --dev  --deploy\nRUN make testcert.cert\n\nENTRYPOINT [\"object_database_service_manager\", \\\n   \"--source\", \"/storage/service_source\", \\\n   \"--storage\", \"/storage/service_storage\", \\\n   \"--logdir\", \"/storage/logs\"]\n"
}