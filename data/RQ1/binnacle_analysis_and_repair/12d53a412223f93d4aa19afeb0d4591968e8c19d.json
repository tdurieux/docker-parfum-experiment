{
  "startTime": 1674251024712,
  "endTime": 1674251024868,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 22,
        "lineEnd": 22,
        "columnStart": 4,
        "columnEnd": 106
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 5,
        "lineEnd": 8,
        "columnStart": 22,
        "columnEnd": 7
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 5,
        "lineEnd": 8,
        "columnStart": 22,
        "columnEnd": 7
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# -*- mode: dockerfile -*-\nFROM dockcross/base:latest\nMAINTAINER Pedro Larroy \"pllarroy@amazon.com\"\n\n# The cross-compiling emulator\nRUN apt-get update && apt-get install --no-install-recommends -y \\\n  qemu-user \\\n  qemu-user-static \\\n  unzip && rm -rf /var/lib/apt/lists/*;\n\nENV CROSS_TRIPLE=arm-linux-androideabi\nENV CROSS_ROOT=/usr/${CROSS_TRIPLE}\nENV AS=${CROSS_ROOT}/bin/${CROSS_TRIPLE}-as \\\n    AR=${CROSS_ROOT}/bin/${CROSS_TRIPLE}-ar \\\n    CC=${CROSS_ROOT}/bin/${CROSS_TRIPLE}-gcc \\\n    CPP=${CROSS_ROOT}/bin/${CROSS_TRIPLE}-cpp \\\n    CXX=${CROSS_ROOT}/bin/${CROSS_TRIPLE}-g++ \\\n    LD=${CROSS_ROOT}/bin/${CROSS_TRIPLE}-ld\n\nENV ANDROID_NDK_REVISION 15c\nRUN mkdir -p /build && \\\n    cd /build && \\\n    curl -f -O https://dl.google.com/android/repository/android-ndk-r${ANDROID_NDK_REVISION}-linux-x86_64.zip && \\\n    unzip ./android-ndk-r${ANDROID_NDK_REVISION}-linux-x86_64.zip && \\\n    cd android-ndk-r${ANDROID_NDK_REVISION} && \\\n    ./build/tools/make_standalone_toolchain.py \\\n      --stl=libc++ \\\n      --arch arm \\\n      --api 16 \\\n      --install-dir=${CROSS_ROOT} && \\\n    cd / && \\\n    rm -rf /build && \\\n    find ${CROSS_ROOT} -exec chmod a+r '{}' \\; && \\\n    find ${CROSS_ROOT} -executable -exec chmod a+x '{}' \\;\n\n\nENV DEFAULT_DOCKCROSS_IMAGE dockcross/android-arm\n\n# COPY Toolchain.cmake ${CROSS_ROOT}/\n# ENV CMAKE_TOOLCHAIN_FILE ${CROSS_ROOT}/Toolchain.cmake\n\n# Build-time metadata as defined at http://label-schema.org\nARG BUILD_DATE\nARG IMAGE\nARG VCS_REF\nARG VCS_URL\nLABEL org.label-schema.build-date=$BUILD_DATE \\\n      org.label-schema.name=$IMAGE \\\n      org.label-schema.vcs-ref=$VCS_REF \\\n      org.label-schema.vcs-url=$VCS_URL \\\n      org.label-schema.schema-version=\"1.0\"\n\nENV CC /usr/arm-linux-androideabi/bin/arm-linux-androideabi-gcc\nENV CXX /usr/arm-linux-androideabi/bin/arm-linux-androideabi-g++\n\n# Build OpenBLAS\n# https://github.com/xianyi/OpenBLAS/wiki/How-to-build-OpenBLAS-for-Android\nRUN git clone https://github.com/xianyi/OpenBLAS.git && \\\n    cd OpenBLAS && \\\n    make -j$(nproc) TARGET=ARMV7 ARM_SOFTFP_ABI=1 HOSTCC=gcc NOFORTRAN=1 libs\n\nENV OPENBLAS_ROOT /work/OpenBLAS\nENV LIBRARY_PATH /work/OpenBLAS/lib/:/work/OpenBLAS/:$LIBRARY_PATH\nENV CPLUS_INCLUDE_PATH /work/OpenBLAS/include/:/work/OpenBLAS/:$CPLUS_INCLUDE_PATH\nWORKDIR /work\n\nENV CC /usr/arm-linux-androideabi/bin/arm-linux-androideabi-clang\nENV CXX /usr/arm-linux-androideabi/bin/arm-linux-androideabi-clang++\nENV BUILD_OPTS \"USE_BLAS=openblas USE_SSE=0 DMLC_LOG_STACK_TRACE=0 USE_OPENCV=0 USE_LAPACK=0\"\n\n# Build MXNet\nADD mxnet mxnet\nADD arm.crosscompile.android.mk /work/mxnet/make/config.mk\nRUN cd mxnet && \\\n    make -j$(nproc) $BUILD_OPTS\n\nWORKDIR /work/build/\nRUN cp /work/mxnet/lib/* .\n"
}