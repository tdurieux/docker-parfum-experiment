{
  "startTime": 1674240252903,
  "endTime": 1674240253293,
  "originalSmells": [
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 34,
        "lineEnd": 36,
        "columnStart": 4,
        "columnEnd": 9
      }
    },
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 43,
        "lineEnd": 43,
        "columnStart": 0,
        "columnEnd": 11
      }
    },
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 51,
        "lineEnd": 51,
        "columnStart": 0,
        "columnEnd": 34
      }
    },
    {
      "rule": "gemUpdateSystemRmRootGem",
      "position": {
        "lineStart": 30,
        "lineEnd": 30,
        "columnStart": 4,
        "columnEnd": 23
      }
    },
    {
      "rule": "gemUpdateNoDocument",
      "position": {
        "lineStart": 30,
        "lineEnd": 30,
        "columnStart": 4,
        "columnEnd": 23
      }
    },
    {
      "rule": "yumInstallRmVarCacheYum",
      "position": {
        "lineStart": 7,
        "lineEnd": 10,
        "columnStart": 4,
        "columnEnd": 4
      }
    },
    {
      "rule": "yumInstallRmVarCacheYum",
      "position": {
        "lineStart": 26,
        "lineEnd": 26,
        "columnStart": 4,
        "columnEnd": 23
      }
    },
    {
      "rule": "yumInstallRmVarCacheYum",
      "position": {
        "lineStart": 27,
        "lineEnd": 27,
        "columnStart": 0,
        "columnEnd": 38
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# Install CentOS 7 \nFROM centos:centos7 \n\nMAINTAINER Jacob Sachs <jacob@amida-tech.com> \n\n# Enable Extra Packages for Enterprise Linux (EPEL) for CentOS \n# Install additional tools \nRUN yum install -y \\\nepel-release \\\ngit \\\nmake && rm -rf /var/cache/yum\n\n# Install Node and NPM \nRUN git clone https://github.com/creationix/nvm.git /.nvm && \\  \necho \". /.nvm/nvm.sh\" >> /etc/bash.bashrc \n\nENV NODE_VERSION 0.12.2 \nRUN . /.nvm/nvm.sh && \\  \nnvm install $NODE_VERSION && \\  \nnvm use $NODE_VERSION && \\  \nnvm alias default $NODE_VERSION \n\nRUN ln -s /.nvm/versions/node/v$NODE_VERSION/bin/node /usr/bin/node && \\  \nln -s /.nvm/versions/node/v$NODE_VERSION/bin/npm /usr/bin/npm \n\n# Install Ruby and associated tools \nRUN yum install -y ruby && \\\nyum install -y gcc ruby-devel rubygems && rm -rf /var/cache/yum\n\n# Install Compass \nRUN mkdir -p /usr/local/etc \\\n  && { \\\n    echo 'install: --no-document'; \\\n    echo 'update: --no-document'; \\\n  } >> /usr/local/etc/gemrc;\nRUN gem update --system && \\  \ngem install compass; rm -rf /root/.gem; exit 0\n\n# Install Bower and Grunt \nRUN npm install -g \\\nbower \\\ngrunt-cli && npm cache clean --force;\n\n# Install app dependencies \nCOPY package.json /src/package.json \nCOPY bower.json /src/bower.json \nWORKDIR \"/src\" \nRUN echo '{ \"allow_root\": true }' > /root/.bowerrc && \\  \nnpm install && \\\nbower install && npm cache clean --force;\n\n# Bundle app source code \nCOPY . /src \n\n# Fix imagemin issue \nRUN npm update -g npm && \\\nnpm install grunt-contrib-imagemin && npm cache clean --force;\n\n# Build the dist \nRUN grunt ngconstant:docker && \\  \ngrunt build \n\n# Expose bound port \nEXPOSE 9000 \n# Run the app \nCMD [\"grunt\", \"serve:docker\"] \n\n\n"
}