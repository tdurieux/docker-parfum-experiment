{
  "startTime": 1674236200513,
  "endTime": 1674236200892,
  "originalSmells": [
    {
      "rule": "gpgUseBatchFlag",
      "position": {
        "lineStart": 19,
        "lineEnd": 19,
        "columnStart": 4,
        "columnEnd": 102
      }
    },
    {
      "rule": "gpgUseBatchFlag",
      "position": {
        "lineStart": 25,
        "lineEnd": 25,
        "columnStart": 4,
        "columnEnd": 36
      }
    },
    {
      "rule": "gpgUseHaPools",
      "position": {
        "lineStart": 19,
        "lineEnd": 19,
        "columnStart": 4,
        "columnEnd": 102
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 17,
        "lineEnd": 17,
        "columnStart": 4,
        "columnEnd": 35
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 17,
        "lineEnd": 17,
        "columnStart": 4,
        "columnEnd": 35
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# Usage: docker build -t arch-selinux-build .\n# Once the container is build, you can get the packages in \"pkgs\" directory with:\n#    docker run -v \"$(pwd)/pkgs:/packages\" --rm -ti arch-selinux-build\n\n# Use Debian because Arch Linux has no official Docker image\nFROM debian:sid\nLABEL Description=\"Build SELinux packages for Arch Linux\"\n\n# Steps:\n# - Install wget to be able to download and extract Arch Linux images\n# - Download bootstrap image and extract it in /arch/root (cf. https://wiki.archlinux.org/index.php/Install_from_existing_Linux)\n# - Switch over to Arch Linux, keeping Docker-special files\n# - Configure the system to be able to build packages as user\n# - Install base packages which needed to build SELinux packages\nRUN \\\n    export DEBIAN_FRONTEND=noninteractive && \\\n    apt-get -qq update && \\\n    apt-get install --no-install-recommends -qqy gnupg wget && \\\n    apt-get clean && \\\n    gpg --batch --keyserver hkp://ha.pool.sks-keyservers.net. --recv-key 4AA4767BBC9C4B1D18AE28B77F2D434B9741E8AC && \\\n    mkdir /arch && cd /arch && \\\n    (wget -qO- https://mirror.rackspace.com/archlinux/iso/latest/sha1sums.txt | fgrep 'x86_64.tar' > sha1sum.txt) && \\\n    read -r SHA1 FILE < sha1sum.txt && \\\n    wget -q \"https://mirror.rackspace.com/archlinux/iso/latest/$FILE\" && \\\n    wget -q \"https://mirror.rackspace.com/archlinux/iso/latest/$FILE.sig\" && \\\n    gpg --batch --verify \"$FILE.sig\" \"$FILE\" && \\\n    sha1sum -c sha1sum.txt && \\\n    tar -xpzf \"$FILE\" && \\\n    cd /arch/root.x86_64 && \\\n    rm -r /bin /lib* /opt /root /sbin /srv /usr /var && \\\n    LD_LIBRARY_PATH=/arch/root.x86_64/lib /arch/root.x86_64/lib/ld-linux-x86-64.so.* bin/mv bin lib* opt root sbin srv usr var / && \\\n    find /etc/* -maxdepth 0 -not \\( -name resolv.conf -o -name hostname -o -name hosts \\) -exec rm -r {} + && \\\n    rm /arch/root.x86_64/etc/hosts /arch/root.x86_64/etc/resolv.conf && \\\n    mv /arch/root.x86_64/etc/* /etc && \\\n    cd / && \\\n    rm -r /arch && \\\n    echo 'Server = https://mirror.rackspace.com/archlinux/$repo/os/$arch' >> /etc/pacman.d/mirrorlist && \\\n    ln -sf /usr/share/zoneinfo/UTC /etc/localtime && \\\n    echo 'en_US.UTF-8 UTF-8' >> /etc/locale.gen && \\\n    pacman-key --init && \\\n    pacman-key --populate archlinux && \\\n    pacman -q --noconfirm -Sy base base-devel expect git && \\\n    pacman --noconfirm -Sc && \\\n    rm -rf /var/cache/pacman/pkg/* && \\\n    useradd -g users -m user && \\\n    echo 'user ALL=(ALL) NOPASSWD: ALL' >> /etc/sudoers && \\\n    echo 'MAKEFLAGS=\"-j$(nproc)\"' >> /etc/makepkg.conf && rm -rf /var/lib/apt/lists/*;\n\n# Prepare a directory for the packages\nRUN mkdir /packages\n\n# Copy the PKGBUILDs in /build\nCOPY . /build\nRUN chown -R user /build && sudo -u user /build/clean.sh\n\n# Sync GPG keys used to verify package sources\nRUN sudo -u user /build/recv_gpg_keys.sh\n\n# Build and install every package, and remove temporary files\nRUN \\\n    sudo -u user /build/build_and_install_all.sh && \\\n    rm -rf /build/*/src/ /build/*/pkg/ && \\\n    pacman --noconfirm -Sc && rm -rf /var/cache/pacman/pkg/*\n\nWORKDIR /build\n\n# Copy packages to /packages when running, so that they can be easily exported.\nCMD [\"sh\", \"-c\", \"cp /build/*/*.pkg.tar.xz /packages\"]\n"
}