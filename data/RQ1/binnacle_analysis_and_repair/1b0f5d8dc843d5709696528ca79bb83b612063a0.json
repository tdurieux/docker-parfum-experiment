{
  "startTime": 1674249841143,
  "endTime": 1674249841292,
  "originalSmells": [
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 28,
        "lineEnd": 28,
        "columnStart": 5,
        "columnEnd": 32
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM node:8-alpine\n\nWORKDIR /redis-commander\n\n# optional build arg to let the hardening process revomve the apk too to not allow installation\n# of packages anymore, default: do not remove \"apk\" to allow others to use this as a base image\n# for own images\nARG REMOVE_APK=0\n\nENV SERVICE_USER=redis\nENV HOME=/redis-commander\nENV NODE_ENV=production\n\n# only single copy command for most parts as other files are ignored via .dockerignore\n# to create less layers\nCOPY . .\n\n# for Openshift compatibility set project config dir itself group root and make it group writeable\nRUN apk update \\\n  && apk upgrade \\\n  && apk add --no-cache ca-certificates dumb-init \\\n  && apk add --no-cache --virtual .patch-dep patch \\\n  && update-ca-certificates \\\n  && adduser ${SERVICE_USER} -h ${HOME} -S \\\n  && chown -R root.root ${HOME} \\\n  && chmod g+w ${HOME}/config \\\n  && chown -R ${SERVICE_USER} ${HOME}/config \\\n  && chmod ug+r ${HOME}/config/*.json \\\n  && npm install --production -s \\\n  && patch -p0 < docker/redis-dump.diff \\\n  && apk del .patch-dep \\\n  && rm -rf /tmp/* /root/.??* /root/cache /var/cache/apk/* \\\n  && ${HOME}/docker/harden.sh && npm cache clean --force;\n\nUSER ${SERVICE_USER}\n\nENTRYPOINT [\"/usr/bin/dumb-init\", \"--\"]\nCMD [\"/redis-commander/docker/entrypoint.sh\"]\n\nEXPOSE 8081\n\n"
}