{
  "startTime": 1674234747205,
  "endTime": 1674234747732,
  "originalSmells": [
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 21,
        "lineEnd": 21,
        "columnStart": 1,
        "columnEnd": 67
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# Copyright (c) 2019. TIBCO Software Inc.\n# This file is subject to the license terms contained\n# in the license file that is distributed with this file.\nFROM tomcat:9.0-jre8\n\n# This Dockerfile requires the JasperReports Server WAR file installer file\n# in the resources directory below the Dockerfile.\n\n# COPY the JasperReports Server WAR file installer into the image\n\n# JasperReports Server WAR file installer names for version 6.3 and prior\n# were named jasperreports-server-<version number>-bin.zip\n# COPY resources/jasperreports-server*zip /tmp/jasperserver.zip\n\n# JasperReports Server WAR file installer names for version 6.4 and beyond\n# are named TIB_js-jrs_<version number>_bin.zip\n\nCOPY resources/TIB_js-jrs_*_bin.zip /tmp/jasperserver.zip\n\nRUN echo \"apt-get\" && echo \"nameserver 8.8.8.8\" | tee /etc/resolv.conf > /dev/null && \\\n    apt-get update > /dev/null && apt-get install -y --no-install-recommends apt-utils  > /dev/null && \\\n\tapt-get install --no-install-recommends -y postgresql-client unzip xmlstarlet > /dev/null && \\\n    rm -rf /var/lib/apt/lists/* && \\\n\trm -rf $CATALINA_HOME/webapps/ROOT && \\\n    rm -rf $CATALINA_HOME/webapps/docs && \\\n    rm -rf $CATALINA_HOME/webapps/examples && \\\n    rm -rf $CATALINA_HOME/webapps/host-manager && \\\n    rm -rf $CATALINA_HOME/webapps/manager && \\\n    echo \"unzip WAR File installer\" && \\\n    unzip /tmp/jasperserver.zip -d /usr/src/jasperreports-server > /dev/null && \\\n    rm -rf /tmp/* && \\\n    mv /usr/src/jasperreports-server/jasperreports-server-*/* /usr/src/jasperreports-server && \\\n    echo \"unzip JasperReports Server WAR to Tomcat\" && \\\n\tunzip -o -q /usr/src/jasperreports-server/jasperserver-pro.war \\\n\t\t-d $CATALINA_HOME/webapps/jasperserver-pro > /dev/null && \\\n\trm -f /usr/src/jasperreports-server/jasperserver-pro.war && \\\n\t# java shouldn't be there - just to make sure\n\trm -rf /usr/src/jasperreports-server/java && \\\n\tchmod +x /usr/src/jasperreports-server/buildomatic/js-* && \\\n\tchmod +x /usr/src/jasperreports-server/buildomatic/bin/*.sh && \\\n\tchmod +x /usr/src/jasperreports-server/apache-ant/bin/* && \\\n\techo \"Check JAVA environment\" && \\\n    env | grep JAVA && \\\n    java -version\n\n\nENV PHANTOMJS_VERSION 2.1.1\n\n# Extract phantomjs, move to /usr/local/share/phantomjs, link to /usr/local/bin.\n# Comment out if phantomjs not required.\nRUN echo \"nameserver 8.8.8.8\" | tee /etc/resolv.conf > /dev/null && \\\n     wget \"https://bitbucket.org/ariya/phantomjs/downloads/phantomjs-2.1.1-linux-x86_64.tar.bz2\" \\\n    -O /tmp/phantomjs.tar.bz2 --no-verbose && \\\n    tar -xjf /tmp/phantomjs.tar.bz2 -C /tmp && \\\n    rm -f /tmp/phantomjs.tar.bz2 && \\\n    mv /tmp/phantomjs*linux-x86_64 /usr/local/share/phantomjs && \\\n    ln -sf /usr/local/share/phantomjs/bin/phantomjs /usr/local/bin && \\\n    rm -rf /tmp/*\n# In case you wish to download from a different location you can manually\n# download the archive and copy from resources/ at build time. Note that you\n# also # need to comment out the preceding RUN command\n#COPY resources/phantomjs*bz2 /tmp/phantomjs.tar.bz2\n#RUN tar -xjf /tmp/phantomjs.tar.bz2 -C /tmp && \\\n#    rm -f /tmp/phantomjs.tar.bz2 && \\\n#    mv /tmp/phantomjs*linux-x86_64 /usr/local/share/phantomjs && \\\n#    ln -sf /usr/local/share/phantomjs/bin/phantomjs /usr/local/bin && \\\n#    rm -rf /tmp/*\n\nENV POSTGRES_JDBC_DRIVER_VERSION 42.2.5\n\nRUN echo \"nameserver 8.8.8.8\" | tee /etc/resolv.conf > /dev/null && \\\n     wget \"https://jdbc.postgresql.org/download/postgresql-${POSTGRES_JDBC_DRIVER_VERSION}.jar\"  \\\n    -P /usr/src/jasperreports-server/buildomatic/conf_source/db/postgresql/jdbc --no-verbose\n\n# Set default Java options for Tomcat.\n# using XX:+UseG1GC - default Java GC in later versions of Java 8\n# use cool Java docker optimizations\nENV JAVA_OPTS=\"-XX:MaxMetaspaceSize=378m -XX:+UnlockExperimentalVMOptions -XX:+UseCGroupMemoryLimitForHeap\"\n\n# Configure tomcat for SSL by default with a self-signed certificate.\n# Option to set up JasperReports Server to use HTTPS only.\n#\nENV DN_HOSTNAME=${DN_HOSTNAME:-localhost.localdomain} \\\n    KS_PASSWORD=${KS_PASSWORD:-changeit} \\\n    JRS_HTTPS_ONLY=${JRS_HTTPS_ONLY:-false} \\\n    HTTPS_PORT=${HTTPS_PORT:-8443}\n\nRUN keytool -genkey -alias self_signed -dname \"CN=${DN_HOSTNAME}\" \\\n\t\t-storetype PKCS12 \\\n        -storepass \"${KS_PASSWORD}\" \\\n        -keypass \"${KS_PASSWORD}\" \\\n        -keystore /root/.keystore.p12 && \\\n\tkeytool -list -keystore /root/.keystore.p12 -storepass \"${KS_PASSWORD}\" -storetype PKCS12 && \\\n    xmlstarlet ed --inplace --subnode \"/Server/Service\" --type elem \\ \n        -n Connector -v \"\" --var connector-ssl '$prev' \\\n    --insert '$connector-ssl' --type attr -n port -v \"${HTTPS_PORT:-8443}\" \\\n    --insert '$connector-ssl' --type attr -n protocol -v \\ \n        \"org.apache.coyote.http11.Http11NioProtocol\" \\\n    --insert '$connector-ssl' --type attr -n maxThreads -v \"150\" \\\n    --insert '$connector-ssl' --type attr -n SSLEnabled -v \"true\" \\\n    --insert '$connector-ssl' --type attr -n scheme -v \"https\" \\\n    --insert '$connector-ssl' --type attr -n secure -v \"true\" \\\n    --insert '$connector-ssl' --type attr -n clientAuth -v \"false\" \\\n    --insert '$connector-ssl' --type attr -n sslProtocol -v \"TLS\" \\\n    --insert '$connector-ssl' --type attr -n keystorePass \\\n        -v \"${KS_PASSWORD}\"\\\n    --insert '$connector-ssl' --type attr -n keystoreFile \\\n        -v \"/root/.keystore.p12\" \\\n    ${CATALINA_HOME}/conf/server.xml\n\n# Expose ports. Note that you must do one of the following:\n# map them to local ports at container runtime via \"-p 8080:8080 -p 8443:8443\"\n# or use dynamic ports.\nEXPOSE 8080 ${HTTPS_PORT:-8443}\n\nCOPY scripts/entrypoint.sh /\nRUN chmod +x /entrypoint.sh\n\nENTRYPOINT [\"/entrypoint.sh\"]\n\n# Default action executed by entrypoint script.\nCMD [\"run\"]\n"
}