{
  "startTime": 1674242292807,
  "endTime": 1674242293787,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 68,
        "lineEnd": 68,
        "columnStart": 4,
        "columnEnd": 35
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 30,
        "lineEnd": 30,
        "columnStart": 4,
        "columnEnd": 34
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 33,
        "lineEnd": 33,
        "columnStart": 4,
        "columnEnd": 82
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 39,
        "lineEnd": 39,
        "columnStart": 4,
        "columnEnd": 82
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 155,
        "lineEnd": 155,
        "columnStart": 4,
        "columnEnd": 15
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 32,
        "lineEnd": 32,
        "columnStart": 4,
        "columnEnd": 29
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 38,
        "lineEnd": 38,
        "columnStart": 4,
        "columnEnd": 29
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 78,
        "lineEnd": 78,
        "columnStart": 4,
        "columnEnd": 91
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 23,
        "lineEnd": 25,
        "columnStart": 4,
        "columnEnd": 42
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 45,
        "lineEnd": 55,
        "columnStart": 4,
        "columnEnd": 28
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 135,
        "lineEnd": 135,
        "columnStart": 4,
        "columnEnd": 44
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 135,
        "lineEnd": 135,
        "columnStart": 4,
        "columnEnd": 44
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 23,
        "lineEnd": 25,
        "columnStart": 4,
        "columnEnd": 42
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 45,
        "lineEnd": 55,
        "columnStart": 4,
        "columnEnd": 28
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 135,
        "lineEnd": 135,
        "columnStart": 4,
        "columnEnd": 44
      }
    }
  ],
  "repairedSmells": [
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 135,
        "lineEnd": 135,
        "columnStart": 4,
        "columnEnd": 68
      }
    }
  ],
  "repairedDockerfile": "# A image for building paddle binaries\n# Use cuda devel base image for both cpu and gpu environment\n# When you modify it, please be aware of cudnn-runtime version\nFROM nvidia/cuda:8.0-cudnn7-devel-ubuntu16.04\nMAINTAINER PaddlePaddle Authors <paddle-dev@baidu.com>\n\nARG UBUNTU_MIRROR\nRUN /bin/bash -c 'if [[ -n ${UBUNTU_MIRROR} ]]; then sed -i 's#http://archive.ubuntu.com/ubuntu#${UBUNTU_MIRROR}#g' /etc/apt/sources.list; fi'\n\n# ENV variables\nARG WITH_GPU\nARG WITH_AVX\n\nENV WOBOQ OFF\nENV WITH_GPU=${WITH_GPU:-ON}\nENV WITH_AVX=${WITH_AVX:-ON}\n\nENV HOME /root\n# Add bash enhancements\nCOPY ./paddle/scripts/docker/root/ /root/\n\n# Prepare packages for Python\nRUN apt-get update && \\\n    apt-get install --no-install-recommends -y make build-essential libssl-dev zlib1g-dev libbz2-dev \\\n    libreadline-dev libsqlite3-dev wget curl llvm libncurses5-dev libncursesw5-dev \\\n    xz-utils tk-dev libffi-dev liblzma-dev && rm -rf /var/lib/apt/lists/*;\n\n# Install Python3.6\nRUN mkdir -p /root/python_build/ && wget -q https://www.sqlite.org/2018/sqlite-autoconf-3250300.tar.gz && \\\n    tar -zxf sqlite-autoconf-3250300.tar.gz && cd sqlite-autoconf-3250300 && \\\n    ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" -prefix=/usr/local && make -j8 && make install && cd ../ && rm sqlite-autoconf-3250300.tar.gz && \\\n    wget -q https://www.python.org/ftp/python/3.6.0/Python-3.6.0.tgz && \\\n    tar -xzf Python-3.6.0.tgz && cd Python-3.6.0 && \\\n    CFLAGS=\"-Wformat\" ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --prefix=/usr/local/ --enable-shared > /dev/null && \\\n    make -j8 > /dev/null && make altinstall > /dev/null && rm Python-3.6.0.tgz\n\n# Install Python3.7\nRUN wget -q https://www.python.org/ftp/python/3.7.0/Python-3.7.0.tgz && \\\n    tar -xzf Python-3.7.0.tgz && cd Python-3.7.0 && \\\n    CFLAGS=\"-Wformat\" ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --prefix=/usr/local/ --enable-shared > /dev/null && \\\n    make -j8 > /dev/null && make altinstall > /dev/null && rm Python-3.7.0.tgz\n\nRUN rm -r /root/python_build\n\nRUN apt-get update && \\\n    apt-get install --no-install-recommends -y --allow-downgrades patchelf \\\n    python3 python3-dev python3-pip \\\n    git python-pip python-dev python-opencv openssh-server bison \\\n    libnccl2=2.1.2-1+cuda8.0 libnccl-dev=2.1.2-1+cuda8.0 \\\n    wget unzip unrar tar xz-utils bzip2 gzip coreutils ntp \\\n    curl sed grep graphviz libjpeg-dev zlib1g-dev \\\n    python-matplotlib gcc-4.8 g++-4.8 \\\n    automake locales clang-format swig cmake \\\n    liblapack-dev liblapacke-dev \\\n    clang-3.8 llvm-3.8 libclang-3.8-dev \\\n    net-tools libtool ccache && \\\n    apt-get clean -y && rm -rf /var/lib/apt/lists/*;\n\n# Install Go and glide\nRUN wget -qO- https://storage.googleapis.com/golang/go1.8.1.linux-amd64.tar.gz | \\\n    tar -xz -C /usr/local && \\\n    mkdir /root/gopath && \\\n    mkdir /root/gopath/bin && \\\n    mkdir /root/gopath/src\nENV GOROOT=/usr/local/go GOPATH=/root/gopath\n# should not be in the same line with GOROOT definition, otherwise docker build could not find GOROOT.\nENV PATH=${PATH}:${GOROOT}/bin:${GOPATH}/bin\n# install glide\nRUN curl -f -s -q https://glide.sh/get | sh\n\n# Install TensorRT\n# following TensorRT.tar.gz is not the default official one, we do two miny changes:\n# 1. Remove the unnecessary files to make the library small. TensorRT.tar.gz only contains include and lib now,\n#    and its size is only one-third of the official one.\n# 2. Manually add ~IPluginFactory() in IPluginFactory class of NvInfer.h, otherwise, it couldn't work in paddle.\n#    See https://github.com/PaddlePaddle/Paddle/issues/10129 for details.\n\nRUN wget -q https://paddlepaddledeps.bj.bcebos.com/TensorRT-4.0.1.6-ubuntu14.04.x86_64-gnu.cuda.8.0.cudnn7.0.tar.gz --no-check-certificate && \\\n    tar -zxf TensorRT-4.0.1.6-ubuntu14.04.x86_64-gnu.cuda.8.0.cudnn7.0.tar.gz -C /usr/local && \\\n    cp -rf /usr/local/TensorRT/include /usr && \\\n    cp -rf /usr/local/TensorRT/lib /usr && rm TensorRT-4.0.1.6-ubuntu14.04.x86_64-gnu.cuda.8.0.cudnn7.0.tar.gz\n\n# git credential to skip password typing\nRUN git config --global credential.helper store\n\n# Fix locales to en_US.UTF-8\nRUN localedef -i en_US -f UTF-8 en_US.UTF-8\n\n# FIXME: due to temporary ipykernel dependency issue, specify ipykernel jupyter\n# version util jupyter fixes this issue.\n\n# specify sphinx version as 1.5.6 and remove -U option for [pip install -U\n# sphinx-rtd-theme] since -U option will cause sphinx being updated to newest\n# version(1.7.1 for now), which causes building documentation failed.\nRUN pip3 --no-cache-dir install -U wheel py-cpuinfo==5.0.0 && \\\n    pip3 --no-cache-dir install -U docopt PyYAML sphinx==1.5.6 && \\\n    pip3 --no-cache-dir install sphinx-rtd-theme==0.1.9 recommonmark && \\\n    pip3.6 --no-cache-dir install -U wheel py-cpuinfo==5.0.0 && \\\n    pip3.6 --no-cache-dir install -U docopt PyYAML sphinx==1.5.6 && \\\n    pip3.6 --no-cache-dir install sphinx-rtd-theme==0.1.9 recommonmark && \\\n    pip3.7 --no-cache-dir install -U wheel py-cpuinfo==5.0.0 && \\\n    pip3.7 --no-cache-dir install -U docopt PyYAML sphinx==1.5.6 && \\\n    pip3.7 --no-cache-dir install sphinx-rtd-theme==0.1.9 recommonmark && \\\n    easy_install -U pip && \\\n    pip --no-cache-dir install -U pip setuptools wheel py-cpuinfo==5.0.0 && \\\n    pip --no-cache-dir install -U docopt PyYAML sphinx==1.5.6 && \\\n    pip --no-cache-dir install sphinx-rtd-theme==0.1.9 recommonmark\n\nRUN pip3 --no-cache-dir install 'pre-commit==1.10.4' 'ipython==5.3.0' && \\\n    pip3 --no-cache-dir install 'ipykernel==4.6.0' 'jupyter==1.0.0' && \\\n    pip3 --no-cache-dir install opencv-python && \\\n    pip3.6 --no-cache-dir install 'pre-commit==1.10.4' 'ipython==5.3.0' && \\\n    pip3.6 --no-cache-dir install 'ipykernel==4.6.0' 'jupyter==1.0.0' && \\\n    pip3.6 --no-cache-dir install opencv-python && \\\n    pip3.7 --no-cache-dir install 'pre-commit==1.10.4' 'ipython==5.3.0' && \\\n    pip3.7 --no-cache-dir install 'ipykernel==4.6.0' 'jupyter==1.0.0' && \\\n    pip3.7 --no-cache-dir install opencv-python && \\\n    pip --no-cache-dir install 'pre-commit==1.10.4' 'ipython==5.3.0' && \\\n    pip --no-cache-dir install 'ipykernel==4.6.0' 'jupyter==1.0.0' && \\\n    pip --no-cache-dir install opencv-python\n\n#For docstring checker\nRUN pip3 --no-cache-dir install pylint pytest astroid isort\nRUN pip3.6 --no-cache-dir install pylint pytest astroid isort\nRUN pip3.7 --no-cache-dir install pylint pytest astroid isort\nRUN pip --no-cache-dir install pylint pytest astroid isort LinkChecker\n\nCOPY ./python/requirements.txt /root/\nRUN pip3 --no-cache-dir install -r /root/requirements.txt\nRUN pip3.6 --no-cache-dir install -r /root/requirements.txt\nRUN pip3.7 --no-cache-dir install -r /root/requirements.txt\nRUN pip --no-cache-dir install -r /root/requirements.txt\n\n# To fix https://github.com/PaddlePaddle/Paddle/issues/1954, we use\n# the solution in https://urllib3.readthedocs.io/en/latest/user-guide.html#ssl-py2\nRUN apt-get install --no-install-recommends -y libssl-dev libffi-dev && apt-get clean -y && rm -rf /var/lib/apt/lists/*;\nRUN pip3 --no-cache-dir install certifi urllib3[secure]\nRUN pip3.6 --no-cache-dir install certifi urllib3[secure]\nRUN pip3.7 --no-cache-dir install certifi urllib3[secure]\nRUN pip --no-cache-dir install certifi urllib3[secure]\n\n\n# Install woboq_codebrowser to /woboq\nRUN git clone https://github.com/woboq/woboq_codebrowser /woboq && \\\n    (cd /woboq \\\n     cmake -DLLVM_CONFIG_EXECUTABLE=/usr/bin/llvm-config-3.8 \\\n           -DCMAKE_BUILD_TYPE=Release . \\\n     make)\n\n# ar mishandles 4GB files\n# https://sourceware.org/bugzilla/show_bug.cgi?id=14625\n# remove them when apt-get support 2.27 and higher version\nRUN wget -q https://launchpad.net/ubuntu/+archive/primary/+sourcefiles/binutils/2.27-9ubuntu1/binutils_2.27.orig.tar.gz && \\\n    tar -xzf binutils_2.27.orig.tar.gz && \\\n    cd binutils-2.27 && \\\n    ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" && make -j && make install && cd .. && rm -rf binutils-2.27 binutils_2.27.orig.tar.gz\n\n# Configure OpenSSH server. c.f. https://docs.docker.com/engine/examples/running_ssh_service\nRUN mkdir /var/run/sshd\nRUN echo 'root:root' | chpasswd\nRUN sed -ri 's/^PermitRootLogin\\s+.*/PermitRootLogin yes/' /etc/ssh/sshd_config\nRUN sed -ri 's/UsePAM yes/#UsePAM yes/g' /etc/ssh/sshd_config\nEXPOSE 22\n"
}