{
  "startTime": 1674239254725,
  "endTime": 1674239254904,
  "originalSmells": [
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 44,
        "lineEnd": 44,
        "columnStart": 4,
        "columnEnd": 57
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 44,
        "lineEnd": 44,
        "columnStart": 61,
        "columnEnd": 119
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 44,
        "lineEnd": 53,
        "columnStart": 123,
        "columnEnd": 12
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 3,
        "lineEnd": 3,
        "columnStart": 36,
        "columnEnd": 64
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 3,
        "lineEnd": 3,
        "columnStart": 36,
        "columnEnd": 64
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM debian:latest\n\n# Install necessary linux packages from apt-get\nRUN apt-get update --fix-missing && apt-get install --no-install-recommends -y eatmydata && rm -rf /var/lib/apt/lists/*;\n\nRUN eatmydata apt-get install -y wget bzip2 ca-certificates \\\n    libglib2.0-0 libxext6 libsm6 libxrender1 \\\n    git \\\n    libfreetype6-dev \\\n    swig \\\n    mpich \\\n    pkg-config \\\n    gcc \\\n    wget \\\n    curl \\\n    vim \\\n    nano \\\n    libgl1-mesa-glx \\\n    ffmpeg \\\n    fonts-liberation\n\n# Install anaconda\nRUN echo 'export PATH=/opt/conda/bin:$PATH' > /etc/profile.d/conda.sh && \\\n    wget --quiet https://repo.continuum.io/archive/Anaconda3-5.2.0-Linux-x86_64.sh -O ~/anaconda.sh && \\\n    /bin/bash ~/anaconda.sh -b -p /opt/conda && \\\n    rm ~/anaconda.sh\n\n# Setup anaconda path\nENV PATH /opt/conda/bin:$PATH\n\n# Create compatibility Python 2.7 environment\nRUN conda create -n py27 python=2.7\nRUN [\"/bin/bash\", \"-c\", \"source activate py27 && \\\n    conda install -y numpy \\\n    scipy \\\n    pandas \\\n    scikit-learn \\\n    ipython \\\n    matplotlib \\\n    jupyter \\\n    seaborn && python -m ipykernel install\"]\n\n# Install packages needed\nRUN conda install -c brainiak -c defaults -c conda-forge brainiak\nRUN pip install --no-cache-dir git+https://github.com/ljchang/neurolearn && pip install --no-cache-dir git+https://github.com/eackermann/hmmlearn.git && pip install --no-cache-dir pymvpa2 \\\n    nilearn \\\n    hypertools \\\n    mne \\\n    deepdish \\\n    nelpy \\\n    dask \\\n    pynv \\\n    seaborn \\\n    supereeg && python -m ipykernel install\n\n# Clean up\nRUN conda clean --all -y && apt-get autoremove\n\n# Create some command aliases and turn off jupyter notebook tokens\nRUN echo 'alias jp=\"jupyter notebook --port=9999 --no-browser --ip=0.0.0.0 --allow-root\"' >> /root/.bashrc\nRUN echo 'alias jl=\"jupyter lab --port=9999 --no-browser --ip=0.0.0.0 --allow-root\"' >> /root/.bashrc\nRUN mkdir -p /root/.jupyter && echo \"c.NotebookApp.token = u''\" >> /root/.jupyter/jupyter_notebook_config.py && echo \"c.NotebookApp.notebook_dir = '/mnt'\" >> /root/.jupyter/jupyter_notebook_config.py\n\n# What should we run when the container is launched\nENTRYPOINT [\"/bin/bash\"]\n"
}