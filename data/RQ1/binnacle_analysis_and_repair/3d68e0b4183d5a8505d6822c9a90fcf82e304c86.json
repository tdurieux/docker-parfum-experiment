{
  "startTime": 1674252157957,
  "endTime": 1674252158403,
  "originalSmells": [
    {
      "rule": "aptGetInstallUseY",
      "position": {
        "lineStart": 19,
        "lineEnd": 19,
        "columnStart": 4,
        "columnEnd": 30
      }
    },
    {
      "rule": "aptGetInstallUseY",
      "position": {
        "lineStart": 65,
        "lineEnd": 65,
        "columnStart": 4,
        "columnEnd": 30
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 19,
        "lineEnd": 19,
        "columnStart": 4,
        "columnEnd": 30
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 29,
        "lineEnd": 29,
        "columnStart": 4,
        "columnEnd": 86
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 65,
        "lineEnd": 65,
        "columnStart": 4,
        "columnEnd": 30
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 77,
        "lineEnd": 77,
        "columnStart": 4,
        "columnEnd": 77
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 19,
        "lineEnd": 19,
        "columnStart": 4,
        "columnEnd": 30
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 29,
        "lineEnd": 29,
        "columnStart": 4,
        "columnEnd": 86
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 65,
        "lineEnd": 65,
        "columnStart": 4,
        "columnEnd": 30
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# This is a 2-stage Docker build.  In the first stage, we build a\n# Zulip development environment image and use\n# tools/build-release-tarball to generate a production release tarball\n# from the provided Git ref.\nFROM ubuntu:xenial-20171114\nLABEL maintainer=\"Alexander Trost <galexrt@googlemail.com>\"\n\n# You can specify these in docker-compose.yml or with\n#   docker build --build-args \"ZULIP_GIT_REF=git_branch_name\" .\nARG ZULIP_GIT_URL=https://github.com/zulip/zulip.git\nARG ZULIP_GIT_REF=2.0.4\nARG CUSTOM_CA_CERTIFICATES=\n\nSHELL [\"/bin/bash\", \"-xuo\", \"pipefail\", \"-c\"]\n\n# First, we setup working locales\nRUN echo 'APT::Install-Recommends 0;' >> /etc/apt/apt.conf.d/01norecommends && \\\n    echo 'APT::Install-Suggests 0;' >> /etc/apt/apt.conf.d/01norecommends && \\\n    apt-get -q update && \\\n    apt-get -q -y --no-install-recommends install locales && \\\n    locale-gen en_US.UTF-8 && rm -rf /var/lib/apt/lists/*;\n\nENV LANG=\"en_US.UTF-8\" \\\n    LANGUAGE=\"en_US:en\" \\\n    LC_ALL=\"en_US.UTF-8\"\n\n# Next, we upgrade the base image and add a zulip user\nRUN apt-get -q update && \\\n    apt-get -q dist-upgrade -y && \\\n    apt-get -q --no-install-recommends install -y git sudo ca-certificates apt-transport-https python3 crudini && \\\n    useradd -d /home/zulip -m zulip && \\\n    echo 'zulip ALL=(ALL:ALL) NOPASSWD:ALL' >> /etc/sudoers && rm -rf /var/lib/apt/lists/*;\n\nRUN git clone \"$ZULIP_GIT_URL\" && \\\n    (cd zulip && git checkout \"$ZULIP_GIT_REF\") && \\\n    chown -R zulip:zulip zulip && \\\n    mv zulip /home/zulip/zulip\n\nUSER zulip\nWORKDIR /home/zulip/zulip\n\n# Finally, we provision the development environment and build a release tarball\nRUN ./tools/provision --production-travis\nRUN /bin/bash -c \"source /srv/zulip-py3-venv/bin/activate && ./tools/build-release-tarball docker\" && \\\n    mv /tmp/tmp.*/zulip-server-docker.tar.gz /tmp/zulip-server-docker.tar.gz\n\n\n# In the second stage, we build the production image from the release tarball\nFROM ubuntu:xenial-20171114\nLABEL maintainer=\"Alexander Trost <galexrt@googlemail.com>\"\n\nARG CUSTOM_CA_CERTIFICATES=\n\nSHELL [\"/bin/bash\", \"-xuo\", \"pipefail\", \"-c\"]\n\nENV DATA_DIR=\"/data\" \\\n    LANG=\"en_US.UTF-8\" \\\n    LANGUAGE=\"en_US:en\" \\\n    LC_ALL=\"en_US.UTF-8\"\n\n# Then, with a second image, we install the production release tarball.\n\nRUN echo 'APT::Install-Recommends 0;' >> /etc/apt/apt.conf.d/01norecommends && \\\n    echo 'APT::Install-Suggests 0;' >> /etc/apt/apt.conf.d/01norecommends && \\\n    apt-get -q update && \\\n    apt-get -q -y --no-install-recommends install locales && \\\n    locale-gen en_US.UTF-8 && rm -rf /var/lib/apt/lists/*;\n\nENV LANG=\"en_US.UTF-8\" \\\n    LANGUAGE=\"en_US:en\" \\\n    LC_ALL=\"en_US.UTF-8\"\n\nCOPY --from=0 /tmp/zulip-server-docker.tar.gz /root/\nCOPY custom_zulip_files/ /root/custom_zulip\n\nRUN apt-get -q update && \\\n    apt-get -q dist-upgrade -y && \\\n    apt-get -q --no-install-recommends install -y sudo ca-certificates apt-transport-https nginx-full && \\\n    # Make sure Nginx is started by Supervisor.\n    rm /etc/init.d/nginx && \\\n    ln -s /bin/true /etc/init.d/nginx && \\\n    mkdir -p \"$DATA_DIR\" && \\\n    cd /root && \\\n    tar -xf zulip-server-docker.tar.gz && \\\n    rm -f zulip-server-docker.tar.gz && \\\n    mv zulip-server-docker zulip && \\\n    cp -rf /root/custom_zulip/* /root/zulip && \\\n    rm -rf /root/custom_zulip && \\\n    export PUPPET_CLASSES=\"zulip::dockervoyager\" \\\n           DEPLOYMENT_TYPE=\"dockervoyager\" \\\n           ADDITIONAL_PACKAGES=\"expect\" && \\\n    /root/zulip/scripts/setup/install --hostname=\"$(hostname)\" --email=\"docker-zulip\" --no-init-db && \\\n    rm -f /etc/zulip/zulip-secrets.conf /etc/zulip/settings.py && \\\n    apt-get -qq autoremove --purge -y && \\\n    apt-get -qq clean && \\\n    rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*\n\nCOPY entrypoint.sh /sbin/entrypoint.sh\nCOPY certbot-deploy-hook /sbin/certbot-deploy-hook\n\nVOLUME [\"$DATA_DIR\"]\nEXPOSE 80 443\n\nENTRYPOINT [\"/sbin/entrypoint.sh\"]\nCMD [\"app:run\"]\n"
}