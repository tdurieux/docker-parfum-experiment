{
  "startTime": 1674251101197,
  "endTime": 1674251101436,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 177,
        "lineEnd": 177,
        "columnStart": 4,
        "columnEnd": 85
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 169,
        "lineEnd": 175,
        "columnStart": 4,
        "columnEnd": 20
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 169,
        "lineEnd": 175,
        "columnStart": 4,
        "columnEnd": 20
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 169,
        "lineEnd": 175,
        "columnStart": 4,
        "columnEnd": 20
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM debian:stretch\nMAINTAINER Nicola Corna <nicola@corna.info>\n\n# Environment variables\n#######################\n\nENV MIRROR_DIR /srv/mirror\nENV SRC_DIR /srv/src\nENV TMP_DIR /srv/tmp\nENV CCACHE_DIR /srv/ccache\nENV ZIP_DIR /srv/zips\nENV LMANIFEST_DIR /srv/local_manifests\nENV DELTA_DIR /srv/delta\nENV KEYS_DIR /srv/keys\nENV LOGS_DIR /srv/logs\nENV USERSCRIPTS_DIR /srv/userscripts\n\nENV DEBIAN_FRONTEND noninteractive\nENV USER root\n\n# Configurable environment variables\n####################################\n\n# By default we want to use CCACHE, you can disable this\n# WARNING: disabling this may slow down a lot your builds!\nENV USE_CCACHE 1\n\n# ccache maximum size. It should be a number followed by an optional suffix: k,\n# M, G, T (decimal), Ki, Mi, Gi or Ti (binary). The default suffix is G. Use 0\n# for no limit.\nENV CCACHE_SIZE 50G\n\n# Environment for the LineageOS branches name\n# See https://github.com/LineageOS/android_vendor_cm/branches for possible options\nENV BRANCH_NAME 'cm-14.1'\n\n# Environment for the device list (separate by comma if more than one)\n# eg. DEVICE_LIST=hammerhead,bullhead,angler\nENV DEVICE_LIST ''\n\n# Release type string\nENV RELEASE_TYPE 'UNOFFICIAL'\n\n# OTA URL that will be used inside CMUpdater\n# Use this in combination with LineageOTA to make sure your device can auto-update itself from this buildbot\nENV OTA_URL ''\n\n# User identity\nENV USER_NAME 'LineageOS Buildbot'\nENV USER_MAIL 'lineageos-buildbot@docker.host'\n\n# Include proprietary files, downloaded automatically from github.com/TheMuppets/\n# Only some branches are supported\nENV INCLUDE_PROPRIETARY true\n\n# Mount an overlay filesystem over the source dir to do each build on a clean source\nENV BUILD_OVERLAY false\n\n# Clone the full LineageOS mirror (> 200 GB)\nENV LOCAL_MIRROR false\n\n# If you want to preserve old ZIPs set this to 'false'\nENV CLEAN_OUTDIR false\n\n# Change this cron rule to what fits best for you\n# Use 'now' to start the build immediately\n# For example, '0 10 * * *' means 'Every day at 10:00 UTC'\nENV CRONTAB_TIME 'now'\n\n# Clean artifacts output after each build\nENV CLEAN_AFTER_BUILD true\n\n# Provide root capabilities builtin inside the ROM (see http://lineageos.org/Update-and-Build-Prep/)\nENV WITH_SU false\n\n# Provide a default JACK configuration in order to avoid out-of-memory issues\nENV ANDROID_JACK_VM_ARGS \"-Dfile.encoding=UTF-8 -XX:+TieredCompilation -Xmx4G\"\n\n# Custom packages to be installed\nENV CUSTOM_PACKAGES ''\n\n# Sign the builds with the keys in $KEYS_DIR\nENV SIGN_BUILDS false\n\n# When SIGN_BUILDS = true but no keys have been provided, generate a new set with this subject\nENV KEYS_SUBJECT '/C=US/ST=California/L=Mountain View/O=Android/OU=Android/CN=Android/emailAddress=android@android.com'\n\n# Move the resulting zips to $ZIP_DIR/$codename instead of $ZIP_DIR/\nENV ZIP_SUBDIR true\n\n# Write the verbose logs to $LOGS_DIR/$codename instead of $LOGS_DIR/\nENV LOGS_SUBDIR true\n\n# Apply the MicroG's signature spoofing patch\n# Valid values are \"no\", \"yes\" (for the original MicroG's patch) and\n# \"restricted\" (to grant the permission only to the system privileged apps).\n#\n# The original (\"yes\") patch allows user apps to gain the ability to spoof\n# themselves as other apps, which can be a major security threat. Using the\n# restricted patch and embedding the apps that requires it as system privileged\n# apps is a much secure option. See the README.md (\"Custom mode\") for an\n# example.\nENV SIGNATURE_SPOOFING \"no\"\n\n# Generate delta files\nENV BUILD_DELTA false\n\n# Delete old zips in $ZIP_DIR, keep only the N latest one (0 to disable)\nENV DELETE_OLD_ZIPS 0\n\n# Delete old deltas in $DELTA_DIR, keep only the N latest one (0 to disable)\nENV DELETE_OLD_DELTAS 0\n\n# Delete old logs in $LOGS_DIR, keep only the N latest one (0 to disable)\nENV DELETE_OLD_LOGS 0\n\n# Create a JSON file that indexes the build zips at the end of the build process\n# (for the updates in OpenDelta). The file will be created in $ZIP_DIR with the\n# specified name; leave empty to skip it.\n# Requires ZIP_SUBDIR.\nENV OPENDELTA_BUILDS_JSON ''\n\n# You can optionally specify a USERSCRIPTS_DIR volume containing these scripts:\n#  * begin.sh, run at the very beginning\n#  * before.sh, run after the syncing and patching, before starting the builds\n#  * pre-build.sh, run before the build of every device\n#  * post-build.sh, run after the build of every device\n#  * end.sh, run at the very end\n# Each script will be run in $SRC_DIR and must be owned and writeable only by\n# root\n\n# Create Volume entry points\n############################\nVOLUME $MIRROR_DIR\nVOLUME $SRC_DIR\nVOLUME $TMP_DIR\nVOLUME $CCACHE_DIR\nVOLUME $ZIP_DIR\nVOLUME $LMANIFEST_DIR\nVOLUME $DELTA_DIR\nVOLUME $KEYS_DIR\nVOLUME $LOGS_DIR\nVOLUME $USERSCRIPTS_DIR\n\n# Copy required files\n#####################\nCOPY src/ /root/\n\n# Create missing directories\n############################\nRUN mkdir -p $MIRROR_DIR\nRUN mkdir -p $SRC_DIR\nRUN mkdir -p $TMP_DIR\nRUN mkdir -p $CCACHE_DIR\nRUN mkdir -p $ZIP_DIR\nRUN mkdir -p $LMANIFEST_DIR\nRUN mkdir -p $DELTA_DIR\nRUN mkdir -p $KEYS_DIR\nRUN mkdir -p $LOGS_DIR\nRUN mkdir -p $USERSCRIPTS_DIR\n\n# Install build dependencies\n############################\nRUN echo 'deb http://deb.debian.org/debian sid main' >> /etc/apt/sources.list\nRUN echo 'deb http://deb.debian.org/debian experimental main' >> /etc/apt/sources.list\nCOPY apt_preferences /etc/apt/preferences\nRUN apt-get -qq update && apt-get install --no-install-recommends -y bc bison bsdmainutils build-essential ccache cgpt cron \\\n      curl flex g++-multilib gcc-multilib git gnupg gperf imagemagick kmod \\\n      lib32ncurses5-dev lib32readline-dev lib32z1-dev libesd0-dev liblz4-tool \\\n      libncurses5-dev libsdl1.2-dev libssl-dev libwxgtk3.0-dev libxml2 \\\n      libxml2-utils lsof lzop maven openjdk-7-jdk openjdk-8-jdk pngcrush \\\n      procps python rsync schedtool squashfs-tools wget xdelta3 xsltproc yasm \\\n      zip zlib1g-dev && rm -rf /var/lib/apt/lists/*;\nRUN apt-get -qqy upgrade\n\n\n\n\n\n\n\n\n\nRUN curl -f https://storage.googleapis.com/git-repo-downloads/repo > /usr/local/bin/repo\nRUN chmod a+x /usr/local/bin/repo\n\n# Download and build delta tools\n################################\nRUN cd /root/ && \\\n        mkdir delta && \\\n        git clone --depth=1 https://github.com/omnirom/android_packages_apps_OpenDelta.git OpenDelta && \\\n        gcc -o delta/zipadjust OpenDelta/jni/zipadjust.c OpenDelta/jni/zipadjust_run.c -lz && \\\n        cp OpenDelta/server/minsignapk.jar OpenDelta/server/opendelta.sh delta/ && \\\n        chmod +x delta/opendelta.sh && \\\n        rm -rf OpenDelta/ && \\\n        sed -i -e 's|^\\s*HOME=.*|HOME=/root|; \\\n                   s|^\\s*BIN_XDELTA=.*|BIN_XDELTA=xdelta3|; \\\n                   s|^\\s*FILE_MATCH=.*|FILE_MATCH=lineage-\\*.zip|; \\\n                   s|^\\s*PATH_CURRENT=.*|PATH_CURRENT=$SRC_DIR/out/target/product/$DEVICE|; \\\n                   s|^\\s*PATH_LAST=.*|PATH_LAST=$SRC_DIR/delta_last/$DEVICE|; \\\n                   s|^\\s*KEY_X509=.*|KEY_X509=$KEYS_DIR/releasekey.x509.pem|; \\\n                   s|^\\s*KEY_PK8=.*|KEY_PK8=$KEYS_DIR/releasekey.pk8|; \\\n                   s|publish|$DELTA_DIR|g' /root/delta/opendelta.sh\n\n# Set the work directory\n########################\nWORKDIR $SRC_DIR\n\n# Allow redirection of stdout to docker logs\n############################################\nRUN ln -sf /proc/1/fd/1 /var/log/docker.log\n\n# Set the entry point to init.sh\n################################\nENTRYPOINT /root/init.sh\n"
}