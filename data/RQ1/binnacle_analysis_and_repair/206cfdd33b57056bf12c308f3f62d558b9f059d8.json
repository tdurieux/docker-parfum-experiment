{
  "startTime": 1674249402547,
  "endTime": 1674249402869,
  "originalSmells": [
    {
      "rule": "yarnCacheCleanAfterInstall",
      "position": {
        "lineStart": 16,
        "lineEnd": 16,
        "columnStart": 4,
        "columnEnd": 50
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 80,
        "lineEnd": 80,
        "columnStart": 4,
        "columnEnd": 29
      }
    },
    {
      "rule": "apkAddUseNoCache",
      "position": {
        "lineStart": 79,
        "lineEnd": 79,
        "columnStart": 4,
        "columnEnd": 53
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "########################################################################\n#\n# pgAdmin 4 - PostgreSQL Tools\n#\n# Copyright (C) 2013 - 2018, The pgAdmin Development Team\n# This software is released under the PostgreSQL Licence\n#\n#########################################################################\n\n# First of all, build frontend with NodeJS in a separate builder container\n# Node-8 is supported by all needed C++ packages\nFROM node:8 AS node-builder\n\nCOPY ./pgadmin4/web/ /pgadmin4/web/\nWORKDIR /pgadmin4/web\n\nRUN yarn install --cache-folder ./ycache --verbose && \\\n    yarn run bundle && \\\n    rm -rf ./ycache ./pgadmin/static/js/generated/.cache && yarn cache clean;\n\n# Build Sphinx documentation in separate container\nFROM python:3.7-alpine3.9 as docs-builder\n\n# Install only dependencies absolutely required for documentation building\nRUN apk add --no-cache make build-base openssl-dev libffi-dev && \\\n    pip install --no-cache-dir sphinx flask_security flask_paranoid python-dateutil flask_sqlalchemy flask_gravatar flask_migrate simplejson cryptography\n\nCOPY ./pgadmin4/ /pgadmin4\n\n# Build the docs\nRUN LC_ALL=en_US.UTF-8 LANG=en_US.UTF-8 make -C /pgadmin4/docs/en_US -f Makefile.sphinx html\n\n# Get the PG binaries\nFROM postgres:9.4-alpine as pg94-builder\nFROM postgres:9.5-alpine as pg95-builder\nFROM postgres:9.6-alpine as pg96-builder\nFROM postgres:10-alpine as pg10-builder\nFROM postgres:11-alpine as pg11-builder\n\n# Then install backend, copy static files and set up entrypoint\nFROM python:3.7-alpine3.9\n\n# Copy the PG binaries\nCOPY --from=pg94-builder /usr/local/bin/pg_dump /usr/local/pgsql-9.4/\nCOPY --from=pg94-builder /usr/local/bin/pg_dumpall /usr/local/pgsql-9.4/\nCOPY --from=pg94-builder /usr/local/bin/pg_restore /usr/local/pgsql-9.4/\nCOPY --from=pg94-builder /usr/local/bin/psql /usr/local/pgsql-9.4/\n\nCOPY --from=pg95-builder /usr/local/bin/pg_dump /usr/local/pgsql-9.5/\nCOPY --from=pg95-builder /usr/local/bin/pg_dumpall /usr/local/pgsql-9.5/\nCOPY --from=pg95-builder /usr/local/bin/pg_restore /usr/local/pgsql-9.5/\nCOPY --from=pg95-builder /usr/local/bin/psql /usr/local/pgsql-9.5/\n\nCOPY --from=pg96-builder /usr/local/bin/pg_dump /usr/local/pgsql-9.6/\nCOPY --from=pg96-builder /usr/local/bin/pg_dumpall /usr/local/pgsql-9.6/\nCOPY --from=pg96-builder /usr/local/bin/pg_restore /usr/local/pgsql-9.6/\nCOPY --from=pg96-builder /usr/local/bin/psql /usr/local/pgsql-9.6/\n\nCOPY --from=pg10-builder /usr/local/bin/pg_dump /usr/local/pgsql-10/\nCOPY --from=pg10-builder /usr/local/bin/pg_dumpall /usr/local/pgsql-10/\nCOPY --from=pg10-builder /usr/local/bin/pg_restore /usr/local/pgsql-10/\nCOPY --from=pg10-builder /usr/local/bin/psql /usr/local/pgsql-10/\n\nCOPY --from=pg11-builder /usr/local/bin/pg_dump /usr/local/pgsql-11/\nCOPY --from=pg11-builder /usr/local/bin/pg_dumpall /usr/local/pgsql-11/\nCOPY --from=pg11-builder /usr/local/bin/pg_restore /usr/local/pgsql-11/\nCOPY --from=pg11-builder /usr/local/bin/psql /usr/local/pgsql-11/\n\nWORKDIR /pgadmin4\nENV PYTHONPATH=/pgadmin4\n\n#Copy in the docs and JS/CSS bundles\nCOPY --from=node-builder /pgadmin4/web/pgadmin/static/js/generated/ /pgadmin4/pgadmin/static/js/generated/\nCOPY --from=docs-builder /pgadmin4/docs/en_US/_build/html/ /pgadmin4/docs/\n\n# Install build-dependencies, build & install C extensions and purge deps in one RUN step\n# so that deps do not increase the size of resulting image by remaining in layers\nCOPY ./pgadmin4/requirements.txt /pgadmin4\nRUN apk add --no-cache --virtual build-deps build-base postgresql-dev libffi-dev linux-headers && \\\n    apk add --no-cache postfix postgresql-client postgresql-libs && \\\n    pip install --no-cache-dir --upgrade pip && \\\n    pip install --no-cache-dir -r requirements.txt && \\\n    pip install --no-cache-dir gunicorn && \\\n    apk del --no-cache build-deps\n\n# Copy the code\nCOPY ./pgadmin4/web /pgadmin4\nCOPY ./run_pgadmin.py /pgadmin4\nCOPY ./config_distro.py /pgadmin4\nCOPY ./entrypoint.sh /entrypoint.sh\n\n# Precompile and optimize python code to save time and space on startup\nRUN python -O -m compileall /pgadmin4\n\n# Finish up\nVOLUME /var/lib/pgadmin\nEXPOSE 80 443\n\nENTRYPOINT [\"/entrypoint.sh\"]\n"
}