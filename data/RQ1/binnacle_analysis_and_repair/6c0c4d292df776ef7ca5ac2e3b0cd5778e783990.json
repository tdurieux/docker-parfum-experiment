{
  "startTime": 1674235284029,
  "endTime": 1674235284771,
  "originalSmells": [
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 192,
        "lineEnd": 192,
        "columnStart": 4,
        "columnEnd": 16
      }
    },
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 193,
        "lineEnd": 193,
        "columnStart": 2,
        "columnEnd": 24
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 231,
        "lineEnd": 231,
        "columnStart": 4,
        "columnEnd": 29
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 232,
        "lineEnd": 233,
        "columnStart": 2,
        "columnEnd": 44
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 234,
        "lineEnd": 234,
        "columnStart": 4,
        "columnEnd": 76
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 235,
        "lineEnd": 235,
        "columnStart": 2,
        "columnEnd": 68
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 236,
        "lineEnd": 236,
        "columnStart": 2,
        "columnEnd": 68
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 237,
        "lineEnd": 237,
        "columnStart": 2,
        "columnEnd": 64
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM nvidia/cuda:9.0-cudnn7-devel-ubuntu16.04\nMAINTAINER Miguel Morales <mimoralea@gmail.com>\nARG PYTHON_VERSION=3.6\nUSER root\nENV DEBIAN_FRONTEND noninteractive\n\n# update ubuntu installation\nRUN apt-get update && \\\n  apt-get install -y --no-install-recommends apt-utils && \\\n  apt-get install -y --no-install-recommends \\\n  build-essential \\\n  bzip2 \\\n  ca-certificates \\\n  cmake \\\n  curl \\\n  emacs \\\n  ffmpeg \\\n  flex \\\n  fluidsynth \\\n  fonts-liberation \\\n  gifsicle \\\n  git \\\n  imagemagick \\\n  inkscape \\\n  jed \\\n  libav-tools \\\n  libboost-all-dev \\\n  libjpeg-dev \\\n  libpng-dev \\\n  libpq-dev \\\n  libsdl2-dev \\\n  libsm6 \\\n  libxext-dev \\\n  libxrender1 \\\n  lmodern \\\n  locales \\\n  nano \\\n  netcat \\\n  pandoc \\\n  python-dev \\\n  qt-sdk \\\n  sudo \\\n  swig \\\n  texlive-fonts-extra \\\n  texlive-fonts-recommended \\\n  texlive-generic-recommended \\\n  texlive-latex-base \\\n  texlive-latex-extra \\\n  texlive-xetex \\\n  unzip \\\n  vim \\\n  wget \\\n  xpra \\\n  xvfb \\\n  && apt-get clean \\\n  && rm -rf /var/lib/apt/lists/*\n\nRUN echo \"en_US.UTF-8 UTF-8\" > /etc/locale.gen && \\\n  locale-gen\n\n  # Configure environment\nENV CONDA_DIR=/opt/conda \\\n  SHELL=/bin/bash \\\n  NB_USER=jovyan \\\n  NB_UID=1000 \\\n  NB_GID=100 \\\n  LC_ALL=en_US.UTF-8 \\\n  LANG=en_US.UTF-8 \\\n  LANGUAGE=en_US.UTF-8\nENV PATH=$CONDA_DIR/bin:$PATH \\\n  HOME=/home/$NB_USER\n\nADD fix-permissions /usr/local/bin/fix-permissions\n  # Create jovyan user with UID=1000 and in the 'users' group\n  # and make sure these dirs are writable by the `users` group.\nRUN groupadd wheel -g 11 && \\\n  echo \"auth required pam_wheel.so use_uid\" >> /etc/pam.d/su && \\\n  useradd -m -s /bin/bash -N -u $NB_UID $NB_USER && \\\n  mkdir -p $CONDA_DIR && \\\n  chown $NB_USER:$NB_GID $CONDA_DIR && \\\n  chmod g+w /etc/passwd && \\\n  fix-permissions $HOME && \\\n  fix-permissions $CONDA_DIR\n\nUSER $NB_UID\n\n  # Setup work directory for backward-compatibility\nRUN mkdir /home/$NB_USER/work && \\\n  fix-permissions /home/$NB_USER\n\n  # Install conda as jovyan and check the md5 sum provided on the download site\nENV MINICONDA_VERSION 4.5.4\nRUN cd /tmp && \\\n  wget --quiet https://repo.continuum.io/miniconda/Miniconda3-${MINICONDA_VERSION}-Linux-x86_64.sh && \\\n  echo \"a946ea1d0c4a642ddf0c3a26a18bb16d *Miniconda3-${MINICONDA_VERSION}-Linux-x86_64.sh\" | md5sum -c - && \\\n  /bin/bash Miniconda3-${MINICONDA_VERSION}-Linux-x86_64.sh -f -b -p $CONDA_DIR && \\\n  rm Miniconda3-${MINICONDA_VERSION}-Linux-x86_64.sh && \\\n  $CONDA_DIR/bin/conda config --system --prepend channels conda-forge && \\\n  $CONDA_DIR/bin/conda config --system --set auto_update_conda false && \\\n  $CONDA_DIR/bin/conda config --system --set show_channel_urls true && \\\n  $CONDA_DIR/bin/conda install --quiet --yes conda=\"${MINICONDA_VERSION%.*}.*\" && \\\n  $CONDA_DIR/bin/conda update --all --quiet --yes && \\\n  conda clean -tipsy && \\\n  rm -rf /home/$NB_USER/.cache/yarn && \\\n  fix-permissions $CONDA_DIR && \\\n  fix-permissions /home/$NB_USER\n\n  # Install Tini\nRUN conda install --quiet --yes 'tini=0.18.0' && \\\n  conda list tini | grep tini | tr -s ' ' | cut -d ' ' -f 1,2 >> $CONDA_DIR/conda-meta/pinned && \\\n  conda clean -tipsy && \\\n  fix-permissions $CONDA_DIR && \\\n  fix-permissions /home/$NB_USER\n\n # Install Jupyter Notebook, Lab, and Hub\n # Generate a notebook server config\n # Cleanup temporary files\n # Correct permissions\n # Do all this in a single RUN command to avoid duplicating all of the\n # files across image layers when the permissions change\nRUN conda install --quiet --yes \\\n  'notebook=5.7.2' \\\n  'jupyterhub=0.9.2' \\\n  'jupyterlab=0.35.4' && \\\n  conda clean -tipsy && \\\n  jupyter labextension install @jupyterlab/hub-extension@^0.12.0 && \\\n  npm cache clean --force && \\\n  jupyter notebook --generate-config && \\\n  rm -rf $CONDA_DIR/share/jupyter/lab/staging && \\\n  rm -rf /home/$NB_USER/.cache/yarn && \\\n  fix-permissions $CONDA_DIR && \\\n  fix-permissions /home/$NB_USER\n\nUSER root\n\n  # Configure container startup\nENTRYPOINT [\"tini\", \"-g\", \"--\"]\n  # RUN chmod +x /usr/local/bin/start-notebook.sh\nCMD [\"start-notebook.sh\"]\n\n  # Add local files as late as possible to avoid cache busting\nCOPY start.sh /usr/local/bin/\nCOPY start-notebook.sh /usr/local/bin/\nCOPY start-singleuser.sh /usr/local/bin/\nCOPY jupyter_notebook_config.py /etc/jupyter/\nRUN fix-permissions /etc/jupyter/\n\n  # Switch back to jovyan to avoid accidental container runs as root\nUSER $NB_UID\n\n  # Install Python 3 packages\n  # Remove pyqt and qt pulled in for matplotlib since we're only ever going to\n  # use notebook-friendly backends in these images\nRUN conda install --quiet --yes \\\n  'conda-forge::blas=*=openblas' \\\n  'beautifulsoup4=4.6.*' \\\n  'bokeh=0.13*' \\\n  'cloudpickle=0.5*' \\\n  'cython=0.28*' \\\n  'dill=0.2*' \\\n  'h5py=2.7*' \\\n  'hdf5=1.10*' \\\n  'ipywidgets=7.2*' \\\n  'matplotlib=2.2*' \\\n  'numba=0.38*' \\\n  'numexpr=2.6*' \\\n  'pandas=0.23*' \\\n  'patsy=0.5*' \\\n  'protobuf=3.*' \\\n  'scikit-image=0.14*' \\\n  'scikit-learn=0.19*' \\\n  'scipy=1.1*' \\\n  'seaborn=0.9*' \\\n  'sqlalchemy=1.2*' \\\n  'statsmodels=0.9*' \\\n  'sympy=1.1*' \\\n  'vincent=0.4.*' \\\n  'xlrd'  && \\\n  conda remove --quiet --yes --force qt pyqt && \\\n  conda clean -tipsy && \\\n  # Activate ipywidgets extension in the environment that runs the notebook server\n  jupyter nbextension enable --py widgetsnbextension --sys-prefix && \\\n  # Also activate ipywidgets extension for JupyterLab\n  jupyter labextension install @jupyter-widgets/jupyterlab-manager@^0.38.1 && \\\n  jupyter labextension install jupyterlab_bokeh@0.6.3 && \\\n  npm cache clean --force && \\\n  rm -rf $CONDA_DIR/share/jupyter/lab/staging && \\\n  rm -rf /home/$NB_USER/.cache/yarn && \\\n  rm -rf /home/$NB_USER/.node-gyp && \\\n  fix-permissions $CONDA_DIR && \\\n  fix-permissions /home/$NB_USER\n\nRUN npm i -g npm && \\\n  npm i -g asciicast2gif && npm cache clean --force;\n\n  # Install facets which does not have a pip or conda package at the moment\nRUN cd /tmp && \\\n  git clone https://github.com/PAIR-code/facets.git && \\\n  cd facets && \\\n  jupyter nbextension install facets-dist/ --sys-prefix && \\\n  cd && \\\n  rm -rf /tmp/facets && \\\n  fix-permissions $CONDA_DIR && \\\n  fix-permissions /home/$NB_USER\n\n  # Import matplotlib the first time to build the font cache.\nENV XDG_CACHE_HOME /home/$NB_USER/.cache/\nRUN MPLBACKEND=Agg python -c \"import matplotlib.pyplot\" && \\\n  fix-permissions /home/$NB_USER\n\nUSER $NB_UID\n\nRUN  /opt/conda/bin/conda install -y python=$PYTHON_VERSION numpy pyyaml scipy ipython mkl mkl-include cython typing && \\\n  /opt/conda/bin/conda install -y -c pytorch magma-cuda90 && \\\n  /opt/conda/bin/conda clean -ya\nENV PATH /opt/conda/bin:$PATH\n  # This must be done before pip so that requirements.txt is available\n\n  # jupyter notebook\nEXPOSE 8888\n\n  # tensorboard\nEXPOSE 6006\n\n  # switch back to user\nUSER $NB_USER\n\nRUN conda install --yes --quiet \\\n  pytorch torchvision -c pytorch\n\n  # install necessary packages\nRUN pip install --no-cache-dir --upgrade pip && \\\n  pip install --no-cache-dir tqdm numpy scikit-learn pyglet setuptools \\\n  gym asciinema pandas tabulate tornado==5.*\nRUN pip install --no-cache-dir git+https://github.com/mimoralea/gym-bandits#egg=gym-bandits && \\\n  pip install --no-cache-dir git+https://github.com/mimoralea/gym-walk#egg=gym-walk && \\\n  pip install --no-cache-dir git+https://github.com/mimoralea/gym-aima#egg=gym-aima && \\\n  pip install --no-cache-dir git+https://github.com/pybox2d/pybox2d#egg=Box2D\n\n  # create a script to start the notebook with xvfb on the back\n  # this allows screen display to work well\nRUN echo '#!/bin/bash' > /tmp/run.sh && \\\n  echo \"nohup sh -c 'tensorboard --logdir=/mnt/notebooks/logs' > /dev/null 2>&1 &\" >> /tmp/run.sh && \\\n  echo 'find /mnt/notebooks/ -name \"*.ipynb\" -exec jupyter trust {} \\;' >> /tmp/run.sh && \\\n  echo 'xvfb-run -s \"-screen 0 1280x720x24\" /usr/local/bin/start-notebook.sh' >> /tmp/run.sh && \\\n  chmod +x /tmp/run.sh\n\n  # move notebooks into container\n  # ADD notebooks /mnt/notebooks\n\n  # make the dir with notebooks the working dir\nWORKDIR /mnt/notebooks\n\n  # run the script to start the notebook\nENTRYPOINT [\"/tmp/run.sh\"]\n"
}