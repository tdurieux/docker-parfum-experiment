{
  "startTime": 1674236926373,
  "endTime": 1674236926925,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 57,
        "lineEnd": 57,
        "columnStart": 2,
        "columnEnd": 43
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 114,
        "lineEnd": 114,
        "columnStart": 4,
        "columnEnd": 36
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 125,
        "lineEnd": 125,
        "columnStart": 4,
        "columnEnd": 99
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 126,
        "lineEnd": 126,
        "columnStart": 4,
        "columnEnd": 34
      }
    },
    {
      "rule": "sha256sumEchoOneSpaces",
      "position": {
        "lineStart": 35,
        "lineEnd": 35,
        "columnStart": 4,
        "columnEnd": 98
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 46,
        "lineEnd": 46,
        "columnStart": 2,
        "columnEnd": 38
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 47,
        "lineEnd": 47,
        "columnStart": 2,
        "columnEnd": 47
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 50,
        "lineEnd": 50,
        "columnStart": 2,
        "columnEnd": 57
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 51,
        "lineEnd": 51,
        "columnStart": 2,
        "columnEnd": 41
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 54,
        "lineEnd": 54,
        "columnStart": 2,
        "columnEnd": 43
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM nvidia/cuda:9.0-cudnn7-devel-ubuntu16.04\n\nLABEL maintainer=\"gogamza <madjakarta@gmail.com>\"\n\n\nARG PY_VER=3.6\nENV DOCKER_VERSION=0.064\n\nUSER root\n\n\nRUN apt-get update && apt-get -yq dist-upgrade && \\\n    apt-get install -yq --no-install-recommends \\\n    wget  apt-utils  git vim apt-transport-https \\\n    bzip2 ssh  graphviz \\\n    ca-certificates \\\n    sudo \\\n    locales \\\n    fonts-liberation \\\n    fonts-nanum-coding && \\\n  apt-get clean && \\\n  rm -rf /var/lib/apt/lists/*\n\nRUN apt-get update && \\\n  apt-get install -y --allow-downgrades --no-install-recommends libcudnn7=7.0.5.15-1+cuda9.0 libcudnn7-dev=7.0.5.15-1+cuda9.0 &&\\\n    rm -rf /var/lib/apt/lists/*\n\n\n#로케일설정 \nRUN echo \"en_US.UTF-8 UTF-8\" > /etc/locale.gen && \\\n    locale-gen\n\n\n# Install Tini... 간헐적 좀비 프로세스 생성 방지\nRUN wget --quiet https://github.com/krallin/tini/releases/download/v0.10.0/tini && \\\n    echo \"1361527f39190a7338a0b434bd8c88ff7233ce7b9a4876f3315c22fce7eca1b0  *tini\" | sha256sum -c - && \\\n    mv tini /usr/local/bin/tini && \\\n    chmod +x /usr/local/bin/tini\n\n\n\n#R 커널 설치\nRUN apt-get update && \\\n  echo \"deb https://cran.rstudio.org/bin/linux/ubuntu xenial/\" >> /etc/apt/sources.list && \\\n  apt-key adv --keyserver keyserver.ubuntu.com --recv-keys E084DAB9  && \\\n  apt-get update && \\\n  apt-get -y --no-install-recommends install r-base-dev r-base && \\\n  apt-get -y --no-install-recommends install software-properties-common && \\\n  add-apt-repository ppa:jonathonf/python-$PY_VER -y && \\\n  apt-get update && \\\n  apt-get -y --no-install-recommends install python$PY_VER-dev python$PY_VER-venv && \\\n  apt-get -y --no-install-recommends install libopenblas-dev curl && \\\n  add-apt-repository ppa:openjdk-r/ppa && \\\n  apt-get update && \\\n  apt-get -y --no-install-recommends install openjdk-9-jdk-headless && \\\n  apt-get clean && \\\n  rm -rf /var/lib/apt/lists/* && \\\n  curl -f https://bootstrap.pypa.io/get-pip.py | python$PY_VER\n\n\n# 환경 변수\nENV VENV_DIR=/opt/venv \\\n    SHELL=/bin/bash \\\n    NB_USER=gogamza \\\n    NB_UID=1000 \\\n    NB_GID=100 \\\n    LC_ALL=en_US.UTF-8 \\\n    LANG=en_US.UTF-8 \\\n    LANGUAGE=en_US.UTF-8\nENV PATH=$VENV_DIR/bin:$PATH \\\n    HOME=/home/$NB_USER \\\n    LD_LIBRARY_PATH=\"/usr/local/lib/:${LD_LIBRARY_PATH}\"\n\n\nADD fix-permissions /usr/local/bin/fix-permissions\n# Create gogamza user with UID=1000 and in the 'users' group\n# and make sure these dirs are writable by the `users` group.\n#사용자 권한 및 계정 설정\nRUN useradd -m -s /bin/bash -N -u $NB_UID $NB_USER && \\\n    mkdir -p $VENV_DIR && \\\n    chown $NB_USER:$NB_GID $VENV_DIR && \\\n    fix-permissions $HOME && \\\n    fix-permissions $VENV_DIR\n\n#몇몇 일반적으로 활용되는 R 패키지를 설치한다.\nRUN apt-get update \\\n\t&& apt-get install -y --no-install-recommends \\\n\t\tlittler libxml2-dev libcairo2-dev libsqlite-dev libmariadbd-dev libmariadb-client-lgpl-dev libpq-dev libssh2-1-dev libcurl4-openssl-dev \\\n                r-cran-littler \\\n\t\tr-base \\\n\t\tr-base-dev \\\n\t\tr-recommended \\\n        && echo 'options(repos = c(CRAN = \"https://cran.rstudio.com/\"), download.file.method = \"libcurl\")' >> /etc/R/Rprofile.site \\\n        && echo 'source(\"/etc/R/Rprofile.site\")' >> /etc/littler.r \\\n\t&& ln -s /usr/share/doc/littler/examples/install.r /usr/local/bin/install.r \\\n\t&& ln -s /usr/share/doc/littler/examples/install2.r /usr/local/bin/install2.r \\\n\t&& ln -s /usr/share/doc/littler/examples/installGithub.r /usr/local/bin/installGithub.r \\\n\t&& ln -s /usr/share/doc/littler/examples/testInstalled.r /usr/local/bin/testInstalled.r \\\n\t&& install.r docopt tidyverse dplyr ggplot2 devtools formatR remotes selectr caTools data.table  \\\n\t&& rm -rf /tmp/downloaded_packages/ /tmp/*.rds \\\n\t&& rm -rf /var/lib/apt/lists/*\n\n\n\nUSER $NB_USER\n\n# Setup work directory for backward-compatibility\n#virtualenv로 개인 권한 내에서  파이썬 설치\nRUN mkdir /home/$NB_USER/work && \\\n    fix-permissions /home/$NB_USER && \\\n    python$PY_VER -m venv $VENV_DIR && \\\n    /bin/bash -c \"source $VENV_DIR/bin/activate\"\n\n#추후 python의 경우 GPU버전과 CPU버전의 이미지 분리가 필요함\nRUN pip$PY_VER install --no-cache-dir --upgrade pip && \\\n    pip$PY_VER install --no-cache-dir h5py python-crfsuite pydot python-telegram-bot  tqdm jpype1 konlpy pandas scipy numpy \\\n      jupyter jupyterhub jupyter_contrib_nbextensions ipywidgets flashtext \\\n      jupyter_nbextensions_configurator jupyterlab jupyterthemes \\\n      sklearn matplotlib seaborn rpy2 gensim  opencv-python scikit-image && \\\n    jupyter serverextension enable --py jupyterlab --sys-prefix && \\\n    pip$PY_VER install --no-cache-dir mxnet-cu90mkl tensorflow-gpu keras gluonnlp gluoncv tzlocal && \\\n    jupyter nbextension enable --py widgetsnbextension --sys-prefix --user && \\\n    jupyter nbextensions_configurator enable --user && \\\n    jupyter nbextension install https://github.com/ipython-contrib/IPython-notebook-extensions/archive/master.zip --user && \\\n    jupyter nbextension install https://github.com/Calysto/notebook-extensions/archive/master.zip --user && \\\n    pip$PY_VER install --no-cache-dir http://download.pytorch.org/whl/cu90/torch-0.4.0-cp36-cp36m-linux_x86_64.whl && \\\n    pip$PY_VER install --no-cache-dir torchvision\n\n\n\n#주피터랩  테마 복사/ 개인 편집 가능 \n\nRUN mkdir -p $HOME/.jupyter/lab/user-settings/\\@jupyterlab/apputils-extension && \\\n    mkdir -p $HOME/.jupyter/nbconfig/ && \\\n    mkdir -p $HOME/.config/matplotlib/\n\nCOPY notebook.json $HOME/.jupyter/nbconfig/\nCOPY matplotlibrc $HOME/.config/matplotlib/\nCOPY themes.jupyterlab-settings $HOME/.jupyter/lab/user-settings/\\@jupyterlab/apputils-extension/\n\n#주피터 테마설정\nRUN jt -t chesterish -fs 95 -cellw 95% -T -tfs 11 -nfs 115 -f bitstream\n\n#권한 체크 및 변경/ 오래 걸림\nRUN fix-permissions $VENV_DIR && \\\n    fix-permissions $HOME/.jupyter/\n\nUSER root\n\nRUN chown $NB_UID:$NB_GID $HOME/.jupyter/nbconfig/notebook.json && \\\n    chown $NB_UID:$NB_GID $HOME/.config/matplotlib/matplotlibrc && \\\n    chown $NB_UID:$NB_GID $HOME/.jupyter/lab/user-settings/\\@jupyterlab/apputils-extension/themes.jupyterlab-settings\n\n#jupyter R 커널 설치\nRUN (echo \"devtools::install_github('IRkernel/IRkernel')\" && \\\n     echo \"IRkernel::installspec()\") \\\n    | Rscript -e \"source(file('stdin'))\" && \\\n    R CMD javareconf \n\n#install konlpy mecab\nRUN curl -fSsL -O https://raw.githubusercontent.com/konlpy/konlpy/master/scripts/mecab.sh && \\\n    chmod +x mecab.sh && \\\n    ./mecab.sh\n\n\nRUN mkdir -p $HOME/py_libs/lib/python$PY_VER/site-packages && \\\n    fix-permissions $HOME/py_libs/ && \\\n    echo 'PYTHONUSERBASE='$HOME'/py_libs/\\n'\\\n         'PYTHONPATH='$HOME'/py_libs/lib/python'$PY_VER'/site-packages\\n'\\\n         'JUPYTER_PATH='$HOME'/py_libs/lib/python'$PY_VER'/site-packages\\n'\\\n          >>  /etc/environment\n\n\n\nEXPOSE 8888-9000\nWORKDIR $HOME\n\n# Configure container startup\nENTRYPOINT [\"tini\", \"--\"]\nCMD [\"start-notebook.sh\"]\n\n# Add local files as late as possible to avoid cache busting\nCOPY start-notebook.sh  /usr/local/bin/\nCOPY start.sh  /usr/local/bin/\nCOPY start-singleuser.sh  /usr/local/bin/\nCOPY jupyter_notebook_config.py  /etc/jupyter/\nRUN fix-permissions  /etc/jupyter/ && \\\n    fix-permissions $HOME/.jupyter/\n\n#time zone\nENV TZ=Asia/Seoul\nRUN ln -snf /usr/share/zoneinfo/$TZ /etc/localtime && echo $TZ > /etc/timezone\n\n#mxnet 환경 변수\n#ENV MXNET_CUDNN_AUTOTUNE_DEFAULT=1 \\\n#    MXNET_ENGINE_TYPE=ThreadedEngine\n\n#ENV CUDA_DEVICE_ORDER=PCI_BUS_ID \\\n#    CUDA_VISIBLE_DEVICES='1,0'\n\n\n# Switch back to gogamza to avoid accidental container runs as root\nUSER $NB_USER\n\nENV PYTHONUSERBASE=$HOME/py_libs/\nENV PYTHONPATH=$PYTHONUSERBASE/lib/python$PY_VER/site-packages:$PYTHONPATH\n\n\n"
}