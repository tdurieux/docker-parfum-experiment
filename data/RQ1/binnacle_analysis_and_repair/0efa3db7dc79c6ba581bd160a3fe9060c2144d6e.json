{
  "startTime": 1674248486969,
  "endTime": 1674248487121,
  "originalSmells": [
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 73,
        "lineEnd": 73,
        "columnStart": 4,
        "columnEnd": 35
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 3,
        "lineEnd": 7,
        "columnStart": 28,
        "columnEnd": 14
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM debian:jessie\nMAINTAINER Olivier Grisel <olivier.grisel@ensta.org>\n\nRUN apt-get update -yqq && apt-get install --no-install-recommends -yqq \\\n  wget \\\n  bzip2 \\\n  git \\\n  libglib2.0-0 \\\n  && rm -rf /var/lib/apt/lists/*\n\n# Configure environment\nENV LC_ALL=C.UTF-8\nENV LANG=C.UTF-8\n\n# Folder to install non-system tools and serve as workspace for the notebook\n# user\nRUN mkdir -p /work/bin\n\n# Create a non-priviledge user that will run the services\n#ENV BASICUSER basicuser\n#ENV BASICUSER_UID 1000\n#RUN useradd -m -d /work -s /bin/bash -N -u $BASICUSER_UID $BASICUSER\n#RUN chown $BASICUSER /work\n#USER $BASICUSER\n\n# Deactivate basic user to make it easier to deal with volume permissions\n# for now\nENV BASICUSER root\nWORKDIR /work\n\n# Install Python 3 from miniconda\nRUN wget -O miniconda.sh \\\n  https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh \\\n  && bash miniconda.sh -b -p /work/miniconda \\\n  && rm miniconda.sh\n\nENV PATH=\"/work/bin:/work/miniconda/bin:$PATH\"\n\n\n# Install matplotlib and scikit-image without Qt\nRUN conda update -y python conda && \\\n  conda install -y --no-deps \\\n  matplotlib \\\n  cycler \\\n  freetype \\\n  libpng \\\n  pyparsing \\\n  pytz \\\n  python-dateutil \\\n  scikit-image \\\n  networkx \\\n  pillow \\\n  six \\\n  && conda clean -tipsy\n\nRUN conda install -y \\\n  pip \\\n  setuptools \\\n  notebook \\\n  ipywidgets \\\n  terminado \\\n  psutil \\\n  numpy \\\n  scipy \\\n  pandas \\\n  bokeh \\\n  scikit-learn \\\n  statsmodels \\\n  && conda clean -tipsy\n\n\n# Install the master branch of distributed and dask\nCOPY requirements.txt .\nRUN pip install --no-cache-dir -r requirements.txt && rm -rf ~/.cache/pip/\n\n# Add local files at the end of the Dockerfule to limit cache busting\nCOPY start-notebook.sh ./bin/\nCOPY start-dworker.sh ./bin/\nCOPY start-dscheduler.sh ./bin/\nCOPY examples examples\n\n# Configure matplotlib to avoid using QT\nCOPY matplotlibrc /work/.config/matplotlib/matplotlibrc\n\n# Trigger creation of the matplotlib font cache\nENV MATPLOTLIBRC /work/.config/matplotlib\nRUN python -c \"import matplotlib.pyplot\"\n\n# Switch back to root to make it possible to do interactive admin/debug as\n# root tasks with docker exec\nUSER root\n# Files added via COPY need a manual chown\nRUN chown $BASICUSER:users -R /work/.config /work/examples /work/bin /work/requirements.txt\n\n# Install Tini that necessary to properly run the notebook service in a docker\n# container:\n# http://jupyter-notebook.readthedocs.org/en/latest/public_server.html#docker-cmd\nENV TINI_VERSION v0.9.0\nADD https://github.com/krallin/tini/releases/download/${TINI_VERSION}/tini /usr/bin/tini\nRUN chmod +x /usr/bin/tini\nENTRYPOINT [\"/usr/bin/tini\", \"--\"]\n"
}