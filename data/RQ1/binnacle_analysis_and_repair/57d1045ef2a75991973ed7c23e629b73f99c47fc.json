{
  "startTime": 1674239272177,
  "endTime": 1674239274246,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 16,
        "lineEnd": 16,
        "columnStart": 11,
        "columnEnd": 123
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 33,
        "lineEnd": 33,
        "columnStart": 7,
        "columnEnd": 70
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 111,
        "lineEnd": 111,
        "columnStart": 7,
        "columnEnd": 82
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 112,
        "lineEnd": 112,
        "columnStart": 7,
        "columnEnd": 92
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 181,
        "lineEnd": 181,
        "columnStart": 23,
        "columnEnd": 96
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 208,
        "lineEnd": 208,
        "columnStart": 11,
        "columnEnd": 72
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 209,
        "lineEnd": 209,
        "columnStart": 11,
        "columnEnd": 72
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 390,
        "lineEnd": 390,
        "columnStart": 11,
        "columnEnd": 111
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 413,
        "lineEnd": 413,
        "columnStart": 11,
        "columnEnd": 64
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 416,
        "lineEnd": 416,
        "columnStart": 11,
        "columnEnd": 64
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 386,
        "lineEnd": 386,
        "columnStart": 7,
        "columnEnd": 30
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 399,
        "lineEnd": 401,
        "columnStart": 11,
        "columnEnd": 79
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 420,
        "lineEnd": 420,
        "columnStart": 7,
        "columnEnd": 136
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 461,
        "lineEnd": 461,
        "columnStart": 11,
        "columnEnd": 64
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 9,
        "lineEnd": 9,
        "columnStart": 7,
        "columnEnd": 83
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 13,
        "lineEnd": 13,
        "columnStart": 8,
        "columnEnd": 34
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 36,
        "lineEnd": 36,
        "columnStart": 7,
        "columnEnd": 43
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 78,
        "lineEnd": 78,
        "columnStart": 11,
        "columnEnd": 45
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 84,
        "lineEnd": 84,
        "columnStart": 11,
        "columnEnd": 69
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 115,
        "lineEnd": 115,
        "columnStart": 7,
        "columnEnd": 87
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 155,
        "lineEnd": 157,
        "columnStart": 15,
        "columnEnd": 76
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 201,
        "lineEnd": 201,
        "columnStart": 7,
        "columnEnd": 47
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 220,
        "lineEnd": 220,
        "columnStart": 7,
        "columnEnd": 77
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 393,
        "lineEnd": 395,
        "columnStart": 11,
        "columnEnd": 87
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 452,
        "lineEnd": 452,
        "columnStart": 11,
        "columnEnd": 46
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "ARG PGVERSION=11\n\nFROM ubuntu:18.04 as builder\n\nARG DEMO=false\n\nRUN export DEBIAN_FRONTEND=noninteractive \\\n    && echo 'APT::Install-Recommends \"0\";\\nAPT::Install-Suggests \"0\";' > /etc/apt/apt.conf.d/01norecommend \\\n    && apt-get update \\\n    && apt-get install --no-install-recommends -y curl ca-certificates less locales jq vim-tiny gnupg1 cron \\\n\n    && if [ \"$DEMO\" != \"true\" ]; then \\\n        apt-get install --no-install-recommends -y pv lzop \\\n        # install etcdctl\n        && ETCDVERSION=2.3.8 \\\n        && curl -f -L https://github.com/coreos/etcd/releases/download/v${ETCDVERSION}/etcd-v${ETCDVERSION}-linux-amd64.tar.gz \\\n                | tar xz -C /bin --strip=1 --wildcards --no-anchored etcdctl etcd; \\\n    fi \\\n\n    # Cleanup all locales but en_US.UTF-8\n    && find /usr/share/i18n/charmaps/ -type f ! -name UTF-8.gz -delete \\\n    && find /usr/share/i18n/locales/ -type f ! -name en_US ! -name en_GB ! -name i18n* ! -name iso14651_t1 ! -name iso14651_t1_common ! -name 'translit_*' -delete \\\n    && echo 'en_US.UTF-8 UTF-8' > /usr/share/i18n/SUPPORTED \\\n\n    ## Make sure we have a en_US.UTF-8 locale available\n    && localedef -i en_US -c -f UTF-8 -A /usr/share/locale/locale.alias en_US.UTF-8 \\\n\n    # Add PGDG repositories\n    && DISTRIB_CODENAME=$(sed -n 's/DISTRIB_CODENAME=//p' /etc/lsb-release) \\\n    && for t in deb deb-src; do \\\n        echo \"$t http://apt.postgresql.org/pub/repos/apt/ ${DISTRIB_CODENAME}-pgdg main\" >> /etc/apt/sources.list.d/pgdg.list; \\\n    done \\\n    && curl -f -s -o - https://www.postgresql.org/media/keys/ACCC4CF8.asc | apt-key add - \\\n\n    && apt-get update \\\n    && apt-get install --no-install-recommends -y postgresql-common \\\n\n    # forbid creation of a main cluster when package is installed\n    && sed -ri 's/#(create_main_cluster) .*$/\\1 = false/' /etc/postgresql-common/createcluster.conf \\\n\n    # Clean up\n    && apt-get clean \\\n    && rm -rf /var/lib/apt/lists/* \\\n            /var/cache/debconf/* \\\n            /usr/share/doc \\\n            /usr/share/man \\\n            /usr/share/locale/?? \\\n            /usr/share/locale/??_?? \\\n    && find /var/log -type f -exec truncate --size 0 {} \\;\n\nCOPY dependencies/debs /builddeps\n\nARG PGVERSION\nARG PGOLDVERSIONS=\"9.3 9.4 9.5 9.6 10\"\nARG WITH_PERL=false\n\n# Install PostgreSQL, extensions and contribs\nENV POSTGIS_VERSION=2.5 \\\n    BG_MON_COMMIT=00311ac9b10351edde909584028339de8da4b0d1 \\\n    PG_AUTH_MON_COMMIT=a37987ad1465503ae805167fd1873270d5e9a010 \\\n    DECODERBUFS=v0.9.5.Final \\\n    SET_USER=REL1_6_2 \\\n    PLPGSQL_CHECK=v1.7.2 \\\n    PLPROFILER=REL3_5 \\\n    TIMESCALEDB=1.3.1 \\\n    PAM_OAUTH2=v1.0\n\nRUN export DEBIAN_FRONTEND=noninteractive \\\n    && set -ex \\\n    && sed -i 's/^#\\s*\\(deb.*universe\\)$/\\1/g' /etc/apt/sources.list \\\n    && apt-get update \\\n    && cd /builddeps \\\n\\\n    && BUILD_PACKAGES=\"devscripts build-essential fakeroot debhelper git gcc libc6-dev make libevent-dev naturaldocs python\" \\\n# pgq3: naturaldocs python \\\n    && if [ \"$DEMO\" = \"true\" ]; then \\\n        PGOLDVERSIONS=\"\" \\\n        && apt-get install --no-install-recommends -y $BUILD_PACKAGES; \\\n    elif \\\n\n\n\n\n\n\n        [ \"$WITH_PERL\" != \"true\" ]; then \\\n        BUILD_PACKAGES=\"$BUILD_PACKAGES equivs pgxnclient cmake libssl-dev zlib1g-dev libprotobuf-c-dev liblwgeom-dev libproj-dev libxslt1-dev libxml2-dev libpam0g-dev libkrb5-dev libedit-dev libselinux1-dev libcurl4-openssl-dev libicu-dev libc-ares-dev python-docutils pkg-config\" \\\n# debezium-decoderbufs: libprotobuf-c-dev liblwgeom-dev libproj-dev\n# pgbouncer: libc-ares-dev python-docutils pkg-config\n# pg_rewind: libxslt1-dev libxml2-dev libpam0g-dev libkrb5-dev libedit-dev libselinux1-dev \\\n        && apt-get install --no-install-recommends -y $BUILD_PACKAGES libprotobuf-c1 libcurl4 \\\n\n        && if [ \"$WITH_PERL\" != \"true\" ]; then \\\n            version=$(apt-cache show perl | sed -n 's/^Version: //p' | sort -rV | head -n 1) \\\n            && echo \"Section: misc\\nPriority: optional\\nStandards-Version: 3.9.8\\nPackage: perl\\nSection:perl\\nMulti-Arch: allowed\\nReplaces: perl-base\\nVersion: $version\\nDescription: perl\" > perl \\\n            && equivs-build perl; \\\n        fi \\\n\n        && for p in python3-keyring python3-docutils ieee-data; do \\\n            version=$(apt-cache show $p | sed -n 's/^Version: //p' | sort -rV | head -n 1) \\\n            && echo \"Section: misc\\nPriority: optional\\nStandards-Version: 3.9.8\\nPackage: $p\\nVersion: $version\\nDescription: $p\" > $p \\\n            && equivs-build $p; \\\n        done \\\n        && dpkg -i *.deb || apt-get -y -f install \\\n\n        # install pam_oauth2.so\n        && git clone -b $PAM_OAUTH2 --recurse-submodules https://github.com/CyberDem0n/pam-oauth2.git \\\n        && make -C pam-oauth2 install \\\n\n        # prepare 3rd sources\n        && git clone -b $DECODERBUFS https://github.com/debezium/postgres-decoderbufs.git \\\n        && git clone -b $PLPROFILER https://github.com/pgcentral/plprofiler.git \\\n        && git clone -b $PLPGSQL_CHECK https://github.com/okbob/plpgsql_check.git \\\n        && git clone -b $TIMESCALEDB https://github.com/timescale/timescaledb.git \\\n        && git clone git://www.sigaev.ru/plantuner.git; \\\n    fi \\\n\n    && curl -f -sL https://github.com/CyberDem0n/bg_mon/archive/$BG_MON_COMMIT.tar.gz | tar xz \\\n    && curl -f -sL https://github.com/RafiaSabih/pg_auth_mon/archive/$PG_AUTH_MON_COMMIT.tar.gz | tar xz \\\n    && git clone -b $SET_USER https://github.com/pgaudit/set_user.git \\\n\n    && apt-get install --no-install-recommends -y libevent-2.1 libevent-pthreads-2.1 python3.6 python3-psycopg2 \\\n\n    && for version in ${PGOLDVERSIONS} ${PGVERSION}; do \\\n            sed -i \"s/ main.*$/ main $version/g\" /etc/apt/sources.list.d/pgdg.list \\\n            && apt-get update \\\n\\\n            && if [ \"$DEMO\" != \"true\" ]; then \\\n                EXTRAS=\"postgresql-pltcl-${version} \\\n                        postgresql-${version}-hypopg \\\n                        postgresql-${version}-pgq3 \\\n                        postgresql-${version}-pldebugger \\\n                        postgresql-${version}-pllua \\\n                        postgresql-${version}-plproxy \\\n                        postgresql-${version}-repack\" \\\n                && if [ \"$WITH_PERL\" = \"true\" ]; then \\\n                    EXTRAS=\"$EXTRAS postgresql-plperl-${version}\"; \\\n                fi \\\n                && if [ $version != \"9.3\" ]; then \\\n                    EXTRAS=\"$EXTRAS \\\n                            postgresql-${version}-partman \\\n                            postgresql-${version}-pglogical \\\n                            postgresql-${version}-postgis-${POSTGIS_VERSION} \\\n                            postgresql-${version}-postgis-${POSTGIS_VERSION}-scripts \\\n                            postgresql-${version}-wal2json\" \\\n                    && if [ $version != \"9.4\" ]; then \\\n                        EXTRAS=\"$EXTRAS postgresql-${version}-pgl-ddl-deploy\"; \\\n                    fi \\\n                    && if [ $version != \"11\" ]; then \\\n                        EXTRAS=\"$EXTRAS postgresql-${version}-amcheck\"; \\\n                    fi; \\\n                fi; \\\n            fi \\\n            && if [ $version != \"9.3\" ]; then \\\n                EXTRAS=\"$EXTRAS postgresql-${version}-pg-stat-kcache\" \\\n                && if [ $version != \"9.4\" ]; then \\\n                    EXTRAS=\"$EXTRAS postgresql-${version}-cron\"; \\\n                fi; \\\n            fi \\\n\\\n            # Install PostgreSQL binaries, contrib, plproxy and multiple pl's \\\n            && apt-get install --no-install-recommends --allow-downgrades -y postgresql-contrib-${version} \\\n                        postgresql-plpython3-${version} libpq5=$version* $EXTRAS \\\n                        libpq-dev=$version* postgresql-server-dev-${version} \\\n\n            # Install 3rd party stuff\n            && if [ \"$DEMO\" != \"true\" ]; then \\\n                if [ \"$version\" != \"11\" ]; then \\\n                    for extension in quantile trimmed_aggregates; do \\\n                        pgxn install $extension \\\n                        && strip /usr/lib/postgresql/$version/lib/$extension.so; \\\n                    done; \\\n                fi \\\n\\\n                && if [ \"$version\" = \"9.6\" ] || [ \"$version\" = \"10\" ] || [ \"$version\" = \"11\" ] ; then \\\n                    cd timescaledb \\\n                    && rm -fr build \\\n                    && ./bootstrap -DAPACHE_ONLY=1 -DSEND_TELEMETRY_DEFAULT=NO \\\n                    && make -C build install \\\n                    && strip /usr/lib/postgresql/$version/lib/timescaledb*.so \\\n                    && cd ..; \\\n                fi \\\n\\\n                # Install pg_rewind on 9.3 and 9.4 \\\n                && if [ \"$version\" = \"9.3\" ] || [ \"$version\" = \"9.4\" ]; then \\\n                    REWIND_VER=REL$(echo $version | sed 's/\\./_/')_STABLE \\\n                    && apt-get source postgresql-${version} \\\n                    && curl -f -sL https://github.com/vmware/pg_rewind/archive/${REWIND_VER}.tar.gz | tar xz \\\n                    && make -C pg_rewind-${REWIND_VER} USE_PGXS=1 top_srcdir=../$(ls -d postgresql-${version}-*) install-strip \\\n                    && rm -fr pg_rewind-${REWIND_VER} postgresql-${version}*; \\\n                fi \\\n\n                && EXTRA_EXTENSIONS=\"plprofiler plantuner\" \\\n                && if [ \"$version\" != \"9.3\" ]; then \\\n                    EXTRA_EXTENSIONS=\"$EXTRA_EXTENSIONS plpgsql_check postgres-decoderbufs\"; \\\n                fi; \\\n            else \\\n                EXTRA_EXTENSIONS=\"\"; \\\n            fi \\\n\n            && for n in bg_mon-${BG_MON_COMMIT} pg_auth_mon-${PG_AUTH_MON_COMMIT} set_user $EXTRA_EXTENSIONS; do \\\n                make -C $n USE_PGXS=1 clean install-strip; \\\n            done \\\n\n            && apt-get purge -y libpq-dev=$version*; \\\n    done \\\n\n    && apt-get install --no-install-recommends -y skytools3-ticker pspg \\\n\n    && if [ \"$DEMO\" != \"true\" ]; then \\\n        apt-get source pgbouncer \\\n        && cd $(ls -d pgbouncer-*) \\\n        # Set last_connect_time for pool only when it really failed to connect \\\n        && curl -f -sL https://github.com/pgbouncer/pgbouncer/pull/127.diff | patch -p1 \\\n        && curl -f -sL https://github.com/pgbouncer/pgbouncer/pull/326.diff \\\n            | sed -n '/^diff --git a\\/src\\/client.c b\\/src\\/client.c/,$ p' | patch -p1 \\\n        # Increase password size\n        && sed -i 's/\\(MAX_PASSWORD\\t\\).*/\\11024/' include/bouncer.h \\\n        && sed -i 's/\\(SEND_wrap(\\)512\\(, pktbuf_write_PasswordMessage, res, sk, psw)\\)/\\11024\\2/' include/pktbuf.h \\\n        && debuild -b -uc -us \\\n        && cd .. \\\n        && dpkg -i pgbouncer_*.deb; \\\n    fi \\\n\n    # build and install missing packages\n    && apt-get install --no-install-recommends -y postgresql-server-dev-all postgresql-server-dev-9.3 \\\n    && for pkg in pgextwlist; do \\\n        apt-get source postgresql-10-${pkg} \\\n        && cd $(ls -d *${pkg%?}*-*) \\\n        && if [ \"$pkg\" = \"pgextwlist\" ]; then \\\n            # make it possible to use it from shared_preload_libraries\n            perl -ne 'print unless /PG_TRY/ .. /PG_CATCH/' pgextwlist.c > pgextwlist.c.f \\\n            && egrep -v '(PG_END_TRY|EmitWarningsOnPlaceholders)' pgextwlist.c.f > pgextwlist.c; \\\n        fi \\\n        && rm -f debian/pgversions \\\n        && for version in ${PGOLDVERSIONS} ${PGVERSION}; do \\\n            echo ${version} >> debian/pgversions; \\\n        done \\\n        && pg_buildext updatecontrol \\\n        && debuild -b -uc -us \\\n        && cd .. \\\n        && for version in ${PGOLDVERSIONS} ${PGVERSION}; do \\\n            for deb in postgresql-${version}-${pkg}_*.deb; do \\\n                if [ -f $deb ]; then dpkg -i $deb; fi; \\\n            done; \\\n        done; \\\n    done \\\n\n    # Remove unnecessary packages\n    && apt-get purge -y ${BUILD_PACKAGES} postgresql-server-dev-* libmagic1 bsdmainutils \\\n    && apt-get autoremove -y \\\n    && apt-get clean \\\n    && dpkg -l | grep '^rc' | awk '{print $2}' | xargs apt-get purge -y \\\n\n    # Try to minimize size by creating symlinks instead of duplicate files\n    && if [ \"$DEMO\" != \"true\" ]; then \\\n        cd /usr/lib/postgresql/$PGVERSION/bin \\\n        && for u in clusterdb pg_archivecleanup pg_basebackup pg_isready pg_test_fsync pg_test_timing pgbench psql reindexdb vacuumdb vacuumlo *.py; do \\\n            for v in /usr/lib/postgresql/*; do \\\n                if [ \"$v\" != \"/usr/lib/postgresql/$PGVERSION\" ] && [ -f \"$v/bin/$u\" ]; then \\\n                    rm $v/bin/$u \\\n                    && ln -s ../../$PGVERSION/bin/$u $v/bin/$u; \\\n                fi; \\\n            done; \\\n        done \\\n\\\n        && cd /usr/share/postgresql/$PGVERSION/contrib/postgis-$POSTGIS_VERSION \\\n        && for f in *.sql *.pl; do \\\n            for v in /usr/share/postgresql/*; do \\\n                if [ \"$v\" != \"/usr/share/postgresql/$PGVERSION\" ] && diff $v/contrib/postgis-$POSTGIS_VERSION/$f $f > /dev/null; then \\\n                    rm $v/contrib/postgis-$POSTGIS_VERSION/$f \\\n                    && ln -s ../../../$PGVERSION/contrib/postgis-$POSTGIS_VERSION/$f $v/contrib/postgis-$POSTGIS_VERSION/$f; \\\n                fi; \\\n            done; \\\n        done \\\n\\\n        && if [ -d /usr/share/postgresql/9.5/contrib/postgis-$POSTGIS_VERSION ]; then \\\n            cd /usr/share/postgresql/9.5/contrib/postgis-$POSTGIS_VERSION \\\n            && for f in *.sql *.pl; do \\\n                if [ -L $f ]; then continue; fi \\\n                && for v in /usr/share/postgresql/*; do \\\n                    if [ \"$v\" != \"/usr/share/postgresql/9.5\" ] && [ -f $v/contrib/postgis-$POSTGIS_VERSION/$f ] \\\n                            && [ ! -L $v/contrib/postgis-$POSTGIS_VERSION/$f ] \\\n                            && diff $v/contrib/postgis-$POSTGIS_VERSION/$f $f > /dev/null; then \\\n                        rm $v/contrib/postgis-$POSTGIS_VERSION/$f \\\n                        && ln -s ../../../9.5/contrib/postgis-$POSTGIS_VERSION/$f \\\n                                $v/contrib/postgis-$POSTGIS_VERSION/$f; \\\n                    fi; \\\n                done; \\\n            done; \\\n        fi \\\n\\\n        && cd /usr/share/postgresql/$PGVERSION/extension \\\n        && for orig in $(ls -1 *.sql | grep -v -- '--'); do \\\n            for f in ${orig%.sql}--*.sql; do \\\n                if diff $orig $f > /dev/null; then \\\n                    rm $f \\\n                    && ln -s $orig $f; \\\n                fi; \\\n            done; \\\n        done \\\n\\\n        && for e in pgq plproxy address_standardizer address_standardizer_data_us; do \\\n            orig=$(ls -1 $e--*--*.sql 2> /dev/null | head -n1) \\\n            && if [ \"x$orig\" != \"x\" ]; then \\\n                for f in $e--*--*.sql; do \\\n                    if [ \"$f\" != \"$orig\" ] && diff $f $orig > /dev/null; then \\\n                        rm $f \\\n                        && ln -s $orig $f; \\\n                    fi; \\\n                done; \\\n            fi; \\\n        done \\\n\\\n        && for f in *.sql *.control; do \\\n            for v in /usr/share/postgresql/*; do \\\n                if [ \"$v\" != \"/usr/share/postgresql/$PGVERSION\" ] \\\n                        && [ -f $v/extension/$f ] \\\n                        && [ ! -L $v/extension/$f ] \\\n                        && diff $v/extension/$f $f > /dev/null; then \\\n                    rm $v/extension/$f \\\n                    && ln -s ../../$PGVERSION/extension/$f $v/extension/$f; \\\n                fi; \\\n            done; \\\n        done \\\n\\\n        && if [ -d /usr/share/postgresql/9.5/extension ]; then \\\n            cd /usr/share/postgresql/9.5/extension \\\n            && for f in *.sql *.control; do \\\n                if [ -L $f ]; then continue; fi \\\n                && for v in /usr/share/postgresql/*; do \\\n                    if [ \"$v\" != \"/usr/share/postgresql/9.5\" ] && [ -f $v/extension/$f ] \\\n                            && [ ! -L $v/extension/$f ] \\\n                            && diff $v/extension/$f $f > /dev/null; then \\\n                        rm $v/extension/$f \\\n                        && ln -s ../../9.5/extension/$f $v/extension/$f; \\\n                   fi; \\\n                done; \\\n            done; \\\n        fi \\\n\\\n        && cd /usr/share/postgresql/$PGVERSION/contrib \\\n        && for f in *.sql *.html; do \\\n            for v in /usr/share/postgresql/*; do \\\n                if [ \"$v\" != \"/usr/share/postgresql/$PGVERSION\" ] && diff $v/contrib/$f $f > /dev/null; then \\\n                    rm $v/contrib/$f \\\n                    && ln -s ../../$PGVERSION/contrib/$f $v/contrib/$f; \\\n                fi; \\\n            done; \\\n        done; \\\n    fi \\\n\n    # Clean up\n    && rm -rf /var/lib/apt/lists/* \\\n            /var/cache/debconf/* \\\n            /builddeps \\\n            /usr/share/doc \\\n            /usr/share/man \\\n            /usr/share/info \\\n            /usr/share/locale/?? \\\n            /usr/share/locale/??_?? \\\n            /usr/share/postgresql/*/man \\\n            /etc/pgbouncer/* \\\n            /usr/lib/postgresql/*/bin/createdb \\\n            /usr/lib/postgresql/*/bin/createlang \\\n            /usr/lib/postgresql/*/bin/createuser \\\n            /usr/lib/postgresql/*/bin/dropdb \\\n            /usr/lib/postgresql/*/bin/droplang \\\n            /usr/lib/postgresql/*/bin/dropuser \\\n            /usr/lib/postgresql/*/bin/pg_recvlogical \\\n            /usr/lib/postgresql/*/bin/pg_standby \\\n            /usr/lib/postgresql/*/bin/pltcl_* \\\n    && find /var/log -type f -exec truncate --size 0 {} \\;\n\n# Install patroni, wal-e and wal-g\nENV PATRONIVERSION=1.5.7\nENV WALE_VERSION=1.1.0\nENV WALG_VERSION=v0.2.9\nRUN export DEBIAN_FRONTEND=noninteractive \\\n    && set -ex \\\n    && BUILD_PACKAGES=\"python3-pip python3-wheel python3-dev git patchutils binutils\" \\\n    && apt-get update \\\n\\\n    # install most of the patroni dependencies from ubuntu packages\n    && apt-cache depends patroni \\\n            | sed -n -e 's/.* Depends: \\(python3-.\\+\\)$/\\1/p' \\\n            | grep -Ev '^python3-(sphinx|etcd|consul|kazoo|kubernetes)' \\\n            | xargs apt-get install -y ${BUILD_PACKAGES} \\\n                                        python3-pystache python3-cachetools \\\n                                        python3-rsa python3-pyasn1-modules \\\n\n    && pip3 install --no-cache-dir setuptools \\\n\n    && if [ \"$DEMO\" != \"true\" ]; then \\\n        EXTRAS=\",etcd,consul,zookeeper,aws\" \\\n        && curl -f -sL https://github.com/wal-g/wal-g/releases/download/$WALG_VERSION/wal-g.linux-amd64-lzo.tar.gz \\\n                | tar -C /usr/local/bin -xz \\\n        && strip /usr/local/bin/wal-g \\\n        && apt-get install --no-install-recommends -y python3-etcd python3-consul python3-kazoo python3-meld3 \\\n                        python3-boto python3-gevent python3-greenlet python3-protobuf \\\n                        python3-websocket python3-requests-oauthlib python3-swiftclient \\\n\n        && find /usr/share/python-babel-localedata/locale-data -type f ! -name 'en_US*.dat' -delete \\\n\n        && pip3 install --no-cache-dir filechunkio wal-e[aws,google,swift]==$WALE_VERSION kubernetes==3.0.0 \\\n                'git+https://github.com/Supervisor/supervisor.git@master#egg=supervisor' \\\n                'git+https://github.com/zalando/pg_view.git@master#egg=pg-view' \\\n\n        && cd /usr/local/lib/python3.6/dist-packages \\\n\n        # pg_view installs useless pytest\n        && sed -i '/^pytest/d' pg_view-*/requires.txt \\\n        && pip3 uninstall -y atomicwrites attrs more_itertools pluggy pytest py \\\n\n        # https://github.com/wal-e/wal-e/issues/318\n        && sed -i 's/^\\(    for i in range(0,\\) num_retries):.*/\\1 100):/g' /usr/lib/python3/dist-packages/boto/utils.py \\\n\n        # https://github.com/wal-e/wal-e/pull/384\n        && curl -f -sL https://github.com/wal-e/wal-e/pull/384.diff | patch -p1 \\\n\n        # https://github.com/wal-e/wal-e/pull/392\n        && curl -f -sL https://github.com/wal-e/wal-e/pull/392.diff | patch -p1 \\\n\n        && echo 4.0.0.dev0 > supervisor/version.txt; \\\n    fi \\\n    && pip3 install --no-cache-dir \"git+https://github.com/zalando/patroni.git@1a6db4f5afbc3f8d7f42d1d2c57edd988e830bda#egg=patroni[kubernetes$EXTRAS]\" \\\n    && sed -i 's/1, 5, 6/1, 5, 7/' /usr/local/lib/python3.6/dist-packages/patroni/dcs/__init__.py \\\n    && echo \"__version__ = '$PATRONIVERSION'\" > /usr/local/lib/python3.6/dist-packages/patroni/version.py \\\n\n    && for d in /usr/local/lib/python3.6 /usr/lib/python3; do \\\n        cd $d/dist-packages \\\n        && find . -type d -name tests | xargs rm -fr \\\n        && find . -type f -name 'test_*.py*' -delete; \\\n    done \\\n    && find . -type f -name 'unittest_*.py*' -delete \\\n    && find . -type f -name '*_test.py' -delete \\\n    && find . -type f -name '*_test.cpython*.pyc' -delete \\\n\n    # Clean up\n    && apt-get purge -y ${BUILD_PACKAGES} \\\n    && apt-get autoremove -y \\\n    && apt-get clean \\\n    && rm -rf /var/lib/apt/lists/* \\\n            /var/cache/debconf/* \\\n            /root/.cache \\\n            /usr/share/doc \\\n            /usr/share/man \\\n            /usr/share/locale/?? \\\n            /usr/share/locale/??_?? \\\n            /usr/share/info \\\n    && find /var/log -type f -exec truncate --size 0 {} \\;\n\nARG COMPRESS=false\n\nRUN set -ex \\\n    && if [ \"$COMPRESS\" = \"true\" ]; then \\\n        apt-get update \\\n        && apt-get install --no-install-recommends -y busybox xz-utils \\\n        && apt-get clean \\\n        && rm -rf /var/lib/apt/lists/* /var/cache/debconf/* /usr/share/doc /usr/share/man /etc/rc?.d /etc/systemd \\\n        && ln -snf busybox /bin/sh \\\n        && files=\"/bin/sh\" \\\n        && libs=\"$(ldd $files | awk '{print $3;}' | grep '^/' | sort -u) /lib/x86_64-linux-gnu/ld-linux-x86-64.so.* /lib/x86_64-linux-gnu/libnsl.so.* /lib/x86_64-linux-gnu/libnss_compat.so.*\" \\\n        && (echo /var/run $files $libs | tr ' ' '\\n' && realpath $files $libs) | sort -u | sed 's/^\\///' > /exclude \\\n        && find /etc/alternatives -xtype l -delete \\\n        && save_dirs=\"usr lib var bin sbin etc/ssl etc/init.d etc/alternatives etc/apt\" \\\n        && XZ_OPT=-e9v tar -X /exclude -cpJf a.tar.xz $save_dirs \\\n        && rm -fr /usr/local/lib/python* \\\n        && /bin/busybox sh -c \"(find $save_dirs -not -type d && cat /exclude /exclude && echo exclude) | sort | uniq -u | xargs /bin/busybox rm\" \\\n        && /bin/busybox --install -s \\\n        && /bin/busybox sh -c \"find $save_dirs -type d -depth -exec rmdir -p {} \\; 2> /dev/null\"; rm a.tar.xz \\\n    fi\n\nFROM scratch\nCOPY --from=builder / /\n\nLABEL maintainer=\"Alexander Kukushkin <alexander.kukushkin@zalando.de>\"\n\nARG PGVERSION\n\nEXPOSE 5432 8008 8080\n\nENV LC_ALL=en_US.utf-8 \\\n    PATH=$PATH:/usr/lib/postgresql/$PGVERSION/bin \\\n    PGHOME=/home/postgres\n\nENV WALE_ENV_DIR=$PGHOME/etc/wal-e.d/env \\\n    PGROOT=$PGHOME/pgdata/pgroot \\\n    LOG_ENV_DIR=$PGHOME/etc/log.d/env\n\nENV PGDATA=$PGROOT/data \\\n    PGLOG=$PGROOT/pg_log\n\nWORKDIR $PGHOME\n\nCOPY motd /etc/\nCOPY supervisor /etc/supervisor\nCOPY pgq_ticker.ini $PGHOME/\nCOPY envdir /usr/local/bin/\n\nRUN mkdir -p /var/log/supervisor \\\n        && ln -s supervisor/supervisord.conf /etc/supervisord.conf \\\n        && sed -i \"s|/var/lib/postgresql.*|$PGHOME:/bin/bash|\" /etc/passwd \\\n        && chown -R postgres:postgres $PGHOME /run \\\n        && sed -i 's/set compatible/set nocompatible/' /etc/vim/vimrc.tiny \\\n        && for e in TERM=linux LC_ALL=C.UTF-8 LANG=C.UTF-8 EDITOR=editor \"PAGER='pspg -bX --no-mouse'\"; \\\n            do echo \"export $e\" >> /etc/bash.bashrc; \\\n        done \\\n        && echo \"source /etc/motd\" >> /root/.bashrc\n\nCOPY scripts bootstrap /scripts/\nCOPY scm-source.json launch.sh /\n\nCMD [\"/bin/sh\", \"/launch.sh\"]\n"
}