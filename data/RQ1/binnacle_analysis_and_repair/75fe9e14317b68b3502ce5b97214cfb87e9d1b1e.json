{
  "startTime": 1674252311079,
  "endTime": 1674252311584,
  "originalSmells": [
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 58,
        "lineEnd": 58,
        "columnStart": 2,
        "columnEnd": 60
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 7,
        "lineEnd": 7,
        "columnStart": 22,
        "columnEnd": 70
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 21,
        "lineEnd": 21,
        "columnStart": 3,
        "columnEnd": 48
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 25,
        "lineEnd": 25,
        "columnStart": 3,
        "columnEnd": 44
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 104,
        "lineEnd": 104,
        "columnStart": 4,
        "columnEnd": 29
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 7,
        "lineEnd": 7,
        "columnStart": 22,
        "columnEnd": 70
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 21,
        "lineEnd": 21,
        "columnStart": 3,
        "columnEnd": 48
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 25,
        "lineEnd": 25,
        "columnStart": 3,
        "columnEnd": 44
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 44,
        "lineEnd": 45,
        "columnStart": 4,
        "columnEnd": 46
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM ubuntu:16.04\n\n# Disable prompts from apt.\nENV DEBIAN_FRONTEND noninteractive\n\n##############################################################################\n# install apt-utils and locales, set up language\nRUN apt-get update && apt-get install --no-install-recommends -y apt-utils locales locales-all && rm -rf /var/lib/apt/lists/*;\nENV LC_ALL en_US.UTF-8\nENV LANG en_US.UTF-8\nENV LANGUAGE en_US.UTF-8\n\n##############################################################################\n# Install Java 8.\n# Based on:\n#    https://github.com/dockerfile/java/blob/master/oracle-java8/Dockerfile\n#    https://stackoverflow.com/questions/49914574/install-jdk-8-update-172-in-dockerfile-with-ubuntu-image\n#\n\nRUN \\\n   apt-get update && \\\n   apt-get -y --no-install-recommends install software-properties-common && \\\n   echo oracle-java8-installer shared/accepted-oracle-license-v1-1 select true | debconf-set-selections && \\\n   add-apt-repository -y ppa:webupd8team/java && \\\n   apt-get update && \\\n   apt-get install --no-install-recommends -y oracle-java8-installer && \\\n   rm -rf /var/cache/oracle-jdk8-installer && rm -rf /var/lib/apt/lists/*;\n\n# Define JAVA_HOME variable\nENV JAVA_HOME /usr/lib/jvm/java-8-oracle\n\n###############################################################################\n# Install SSH and OpenMPI\n#\n# ssh and MPI installation is based on the Dockerfile from\n#    https://github.com/everpeace\n\nARG OPENMPI_VERSION=\"3.1.2\"\nARG WITH_CUDA=\"false\"\n\n#\n# install ssh and basic dependencies\n#\nRUN apt-get update && \\\n    apt-get install -yq --no-install-recommends \\\n      wget ca-certificates ssh build-essential && \\\n    rm -rf /var/cache/apt/archives/* && rm -rf /var/lib/apt/lists/*;\n\n#\n# install openmpi\n#\nRUN cd /tmp && \\\n  echo \"WITH_CUDA=$WITH_CUDA\" && \\\n  wget -q https://www.open-mpi.org/software/ompi/v$(echo $OPENMPI_VERSION | sed -e s'/\\(.*\\)\\.[0-9]/\\1/')/downloads/openmpi-$OPENMPI_VERSION.tar.bz2 && \\\n  tar -xjf openmpi-$OPENMPI_VERSION.tar.bz2 && \\\n  cd /tmp/openmpi-$OPENMPI_VERSION && \\\n  if [ \"$WITH_CUDA\" = \"true\" ]; then export WITH_CUDA_OPT=\"--with-cuda\"; else export WITH_CUDA_OPT=\"\"; fi && \\\n  echo \"WITH_CUDA_OPT=$WITH_CUDA_OPT\" && \\\n  ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --prefix=/usr --enable-mpi-java $WITH_CUDA_OPT && \\\n  make -j2 && \\\n  make install && \\\n  rm -rf /tmp/openmpi-$OPENMPI_VERSION /tmp/openmpi-$OPENMPI_VERSION.tar.bz2\n\n# set LD_LIBRARY_PATH environment variable\nENV LD_LIBRARY_PATH   /usr/lib\n\n#\n# Create ssh user(openmpi) and setup ssh key dir\n# - ssh identity file and authorized key file is expected to\n#   be mounted at /ssh-keys/$SSH_USER\n#\nARG SSH_USER=openmpi\nENV SSH_USER=$SSH_USER\nARG SSH_UID=1000\nARG SSH_GID=1000\nVOLUME /ssh-key/$SSH_USER\nARG HOME=/home/$SSH_USER\n\nRUN addgroup --gid $SSH_GID $SSH_USER && \\\n    adduser -q --gecos \"\" --disabled-password --uid $SSH_UID --gid $SSH_GID $SSH_USER && \\\n    mkdir -p /ssh-key/$SSH_USER && \\\n       chown -R $SSH_USER:$SSH_USER /ssh-key/$SSH_USER && \\\n    mkdir -p /.sshd/host_keys && \\\n       chown -R $SSH_USER:$SSH_USER /.sshd/host_keys && \\\n       chmod 700 /.sshd/host_keys && \\\n    mkdir -p /.sshd/user_keys/$SSH_USER && \\\n       chown -R $SSH_USER:$SSH_USER /.sshd/user_keys/$SSH_USER && \\\n       chmod 700 /.sshd/user_keys/$SSH_USER  && \\\n    mkdir -p $HOME && \\\n       chown $SSH_USER:$SSH_USER $HOME && \\\n       chmod 755 $HOME\n\nVOLUME $HOME\n\n# check if open mpi was successfully built with cuda support.\nRUN if [ \"$WITH_CUDA\" = \"true\" ]; then \\\n  if ! ompi_info --parsable --all | grep -q \"mpi_built_with_cuda_support:value:true\" ; then \\\n    exit 1; \\\n  fi; fi;\n\n###############################################################################\n# install python\n# clear apt-get cache, no more apt usage after this point\nRUN apt-get update && \\\n    apt-get install --no-install-recommends -y python && \\\n    rm -rf /var/lib/apt/lists/*\n\n###############################################################################\n# Install Twister2 files and packages\n#\nENV CLASSPATH=\"/twister2/lib/*\"\n\nCOPY docker/kubernetes/image/rootfs /\nCOPY twister2-0.2.2/lib /twister2/lib\nCOPY twister2-0.2.2/bin /twister2/bin\n\n# expose 2022 for ssh server (password free ssh support)\n# expose 8080 for dashboard server if it runs\nEXPOSE 2022 8080\n\nWORKDIR /twister2/\n"
}