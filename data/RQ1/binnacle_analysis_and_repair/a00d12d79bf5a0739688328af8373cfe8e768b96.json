{
  "startTime": 1674242127874,
  "endTime": 1674242127925,
  "originalSmells": [
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 33,
        "lineEnd": 33,
        "columnStart": 5,
        "columnEnd": 42
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# This Dockerfile uses multi-stage build to customize DEV and PROD images:\n# https://docs.docker.com/develop/develop-images/multistage-build/\n\nFROM python:3.7.3-alpine3.9 as development_build\n\nLABEL maintainer=\"sobolevn@wemake.services\"\nLABEL vendor=\"wemake.services\"\n\nARG DJANGO_ENV\n\nENV DJANGO_ENV=${DJANGO_ENV} \\\n  PYTHONFAULTHANDLER=1 \\\n  PYTHONUNBUFFERED=1 \\\n  PYTHONHASHSEED=random \\\n  PIP_NO_CACHE_DIR=off \\\n  PIP_DISABLE_PIP_VERSION_CHECK=on \\\n  PIP_DEFAULT_TIMEOUT=100 \\\n  POETRY_VERSION=0.12.15\n\n\n# System deps:\nRUN apk --no-cache add \\\n     bash \\\n     build-base \\\n     curl \\\n     gcc \\\n     gettext \\\n     git \\\n     libffi-dev \\\n     linux-headers \\\n     musl-dev \\\n     postgresql-dev \\\n     tini \\\n  && pip install --no-cache-dir \"poetry==$POETRY_VERSION\"\n\n# Copy only requirements, to cache them in docker layer\nWORKDIR /pysetup\nCOPY ./poetry.lock ./pyproject.toml /pysetup/\n\n# This is a special case. We need to run this script as an entry point:\nCOPY ./docker/django/entrypoint.sh /docker-entrypoint.sh\n\n# Project initialization:\nRUN chmod +x \"/docker-entrypoint.sh\" \\\n  && poetry config settings.virtualenvs.create false \\\n  && poetry install $(test \"$DJANGO_ENV\" == production && echo \"--no-dev\") --no-interaction --no-ansi\n\n# This dir will become the mountpoint of development code\nWORKDIR /code\n\nENTRYPOINT [\"/sbin/tini\", \"--\", \"/docker-entrypoint.sh\"]\n\n\n# The following stage is only for Prod:\n# https://wemake-django-template.readthedocs.io/en/latest/pages/template/production.html\n\nFROM development_build as production_build\n\nCOPY . /code\n\n"
}