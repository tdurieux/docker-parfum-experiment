{
  "startTime": 1674235700575,
  "endTime": 1674235701054,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 36,
        "lineEnd": 36,
        "columnStart": 4,
        "columnEnd": 138
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 51,
        "lineEnd": 51,
        "columnStart": 8,
        "columnEnd": 96
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 57,
        "lineEnd": 57,
        "columnStart": 8,
        "columnEnd": 93
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 40,
        "lineEnd": 40,
        "columnStart": 4,
        "columnEnd": 40
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 62,
        "lineEnd": 62,
        "columnStart": 8,
        "columnEnd": 44
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM nutshells/base\nLABEL maintainer='Chao QU <mail@quchao.com>'\n\nARG SS_VERSION='3.2.0'\nARG SS_SHA256='5521cf623a07fd1e393528516a83acd2b66c5d4bb4535a52662806a6a060c606'\nARG OBFS_VERSION='0.0.5'\nARG OBFS_SHA256='0de9b551b67ec82d0af9d09bcb74c9e8d047f0082ae07db8e4f5f3defeb2ce4c'\nARG LIBCORK_COMMIT='9a1917d'\nARG LIBCORK_SHA256='2193830fc67d946e89701d04d557e4b29bcb956f5cedfb90b727e23326045e78'\nENV WITH_OBFS='true'\n\nWORKDIR /usr/local/src/\n\nRUN set -ex; \\\n    # build deps\n    apk add --no-cache --virtual .build-deps \\\n        build-base \\\n        linux-headers \\\n        autoconf \\\n        automake \\\n        libtool \\\n        pcre-dev \\\n        mbedtls-dev \\\n        libsodium-dev \\\n        c-ares-dev \\\n        libev-dev \\\n    ; \\\n    # runtime deps\n    apk add --no-cache --virtual .runtime-deps \\\n        pcre \\\n        mbedtls \\\n        libsodium \\\n        c-ares \\\n        libev \\\n    ; \\\n    # ss-libev\n    curl -f -sSLO \"https://github.com/shadowsocks/shadowsocks-libev/releases/download/v${SS_VERSION}/shadowsocks-libev-${SS_VERSION}.tar.gz\"; \\\n    echo \"${SS_SHA256}  shadowsocks-libev-${SS_VERSION}.tar.gz\" | sha256sum -c -; \\\n    tar xzf \"shadowsocks-libev-${SS_VERSION}.tar.gz\"; \\\n    cd \"shadowsocks-libev-${SS_VERSION}\"; \\\n    ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --disable-documentation; \\\n    make; \\\n    #make check; \\\n    #make install; \\\n    cp src/ss-server src/ss-local /usr/local/bin/; \\\n    #make installcheck; \\\n    cd ..; \\\n    rm -f \"shadowsocks-libev-${SS_VERSION}.tar.gz\"; \\\n    rm -rf \"shadowsocks-libev-${SS_VERSION}\"; \\\n    if [ \"${WITH_OBFS}\" = 'true' ]; then \\\n        curl -f -sSLO \"https://github.com/shadowsocks/simple-obfs/archive/v${OBFS_VERSION}.tar.gz\"; \\\n        echo \"${OBFS_SHA256}  v${OBFS_VERSION}.tar.gz\" | sha256sum -c -; \\\n        tar xzf \"v${OBFS_VERSION}.tar.gz\"; \\\n        cd \"simple-obfs-${OBFS_VERSION}\"; \\\n\n        rm -rf libcork; \\\n        curl -f -sSLO \"https://github.com/shadowsocks/libcork/archive/${LIBCORK_COMMIT}.tar.gz\"; \\\n        echo \"${LIBCORK_SHA256}  ${LIBCORK_COMMIT}.tar.gz\" | sha256sum -c -; \\\n        tar xzf \"${LIBCORK_COMMIT}.tar.gz\"; \\\n        mv libcork-* libcork; \\\n        ./autogen.sh; \\\n        ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --disable-documentation; \\\n        make; \\\n\n\n        cp src/obfs-server src/obfs-local /usr/local/bin/; \\\n\n        cd ..; \\\n        rm -f \"simple-obfs-${OBFS_VERSION}.tar.gz\"; \\\n        rm -rf \"simple-obfs-${OBFS_VERSION}\"; \\\n    fi; \\\n    # do some cleanup\n    apk del --purge .build-deps; \\\n    rm -rf /tmp/* /var/tmp/* /var/cache/apk/* /usr/local/src/*;\n\nCOPY docker-entrypoint.sh /usr/local/bin/\n\nRUN set -ex; \\\n    chmod +x /usr/local/bin/docker-entrypoint.sh; \\\n    chown \"${RUN_AS_USER}\":\"${RUN_AS_USER}\" /usr/local/bin/ss-*; \\\n    chown \"${RUN_AS_USER}\":\"${RUN_AS_USER}\" /usr/local/bin/obfs-*;\n\nENV LISTEN_PORT='12345' \\\n    SERVER_ADDRESS='' \\\n    SERVER_PORT='' \\\n    PASSWORD='' \\\n    KEY_IN_BASE64='' \\\n    ENCRYPT_METHOD='xchacha20-ietf-poly1305' \\\n    TCP_RELAY='true' \\\n    UDP_RELAY='true' \\\n    REUSE_PORT='true' \\\n    TCP_FAST_OPEN='true' \\\n    OBFS_PLUGIN='http' \\\n    OBFS_HOST='bing.com'\n\n#HEALTHCHECK --interval=1m --timeout=3s \\\n#    CMD [[ \"$(curl -f http://localhost:\"${LISTEN_PORT}\" 2>&1 | grep 'curl: (52)' | wc -l)\" -eq 1 ]] || exit 1\n\nEXPOSE ${LISTEN_PORT}/tcp ${LISTEN_PORT}/udp\n\nWORKDIR /usr/local/var/ss-obfs\nENTRYPOINT [ \"docker-entrypoint.sh\" ]\n"
}