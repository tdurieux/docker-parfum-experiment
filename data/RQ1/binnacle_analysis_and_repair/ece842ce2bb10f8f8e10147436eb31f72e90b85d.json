{
  "startTime": 1674239430891,
  "endTime": 1674239431113,
  "originalSmells": [
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 23,
        "lineEnd": 23,
        "columnStart": 7,
        "columnEnd": 25
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# Dockerfile for DMARC viewer app\n# Use Alpine as stripped down OS\nFROM python:2.7-alpine\n\n# Copy in your requirements file\nADD requirements.txt /requirements.txt\n\n# Install build deps, then run `pip install`, then remove unneeded build deps\n# all in a single step. Correct the path to your production requirements file,\n# if needed.\nRUN set -ex \\\n    && apk add --no-cache --virtual .build-deps \\\n            gcc \\\n            make \\\n            libc-dev \\\n            libffi-dev \\\n            musl-dev \\\n            linux-headers \\\n            pcre-dev \\\n            postgresql-dev \\\n            libpq \\\n            py-psycopg2 \\\n            cairo-dev \\\n    && pip install --no-cache-dir -U pip \\\n    && pip install --no-cache-dir -r /requirements.txt \\\n    && pip install --no-cache-dir uwsgi \\\n    && find /usr/local \\\n        \\( -type d -a -name test -o -name tests \\) \\\n        -o \\( -type f -a -name '*.pyc' -o -name '*.pyo' \\) \\\n        -exec rm -rf '{}' +\n    # Commented code removes runtime dependencies `CairoSVG`\n    # FIXME: Find out how to detect those dependencies with scanelf\n    # && runDeps=\"$( \\\n    #         scanelf --needed --nobanner --recursive /usr/local \\\n    #                 | awk '{ gsub(/,/, \"\\nso:\", $2); print \"so:\" $2 }' \\\n    #                 | sort -u \\\n    #                 | xargs -r apk info --installed \\\n    #                 | sort -u \\\n    # )\" \\\n    # && apk add --virtual .python-rundeps $runDeps \\\n    # && apk del .build-deps\n\n# Copy your application code to the container (make sure you create a\n# .dockerignore file if any large files or directories should be excluded)\nRUN mkdir /code/\nWORKDIR /code/\nADD . /code/\n\n# uWSGI will listen on this port\nEXPOSE 8000\n\n# NOTE: Other user-set app environment variables (app key, db pw, ...) are\n# passed through from `docker-compose`. If you didn't create the container with\n# `docker-compose` you have to pass the required environment variables to\n# `docker run`, e.g. using the `-e` flag\nENV DJANGO_SETTINGS_MODULE=\"dmarc_viewer.settings\"\n\n# Configure uWSGI using environment variables\n# NOTE: When passed as environment variables, options are capitalized and\n# prefixed with UWSGI_, and dashes are substituted with underscores\n# See http://uwsgi-docs.readthedocs.io/en/latest/Options.html\nENV UWSGI_WSGI_FILE=dmarc_viewer/wsgi.py \\\n    UWSGI_HTTP=:8000 \\\n    UWSGI_MASTER=1 \\\n    UWSGI_WORKERS=2 \\\n    UWSGI_THREADS=8 \\\n    UWSGI_UID=1000 \\\n    UWSGI_GID=2000 \\\n    UWSGI_LAZY_APPS=1 \\\n    UWSGI_WSGI_ENV_BEHAVIOR=holy \\\n    UWSGI_HTTP_AUTO_CHUNKED=1 \\\n    UWSGI_HTTP_KEEPALIVE=1 \\\n    UWSGI_STATIC_MAP=/static=/var/www/dmarc_viewer/static\n\nENTRYPOINT [\"/code/docker-entrypoint.sh\"]\n\n# Start uWSGI\nCMD [\"uwsgi\"]"
}