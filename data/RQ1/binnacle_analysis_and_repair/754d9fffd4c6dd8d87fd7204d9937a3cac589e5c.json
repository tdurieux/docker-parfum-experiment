{
  "startTime": 1674241685880,
  "endTime": 1674241686176,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 29,
        "lineEnd": 29,
        "columnStart": 4,
        "columnEnd": 96
      }
    },
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 62,
        "lineEnd": 62,
        "columnStart": 4,
        "columnEnd": 27
      }
    },
    {
      "rule": "wgetUseHttpsUrl",
      "position": {
        "lineStart": 39,
        "lineEnd": 39,
        "columnStart": 61,
        "columnEnd": 130
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 36,
        "lineEnd": 36,
        "columnStart": 4,
        "columnEnd": 49
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 49,
        "lineEnd": 49,
        "columnStart": 4,
        "columnEnd": 84
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 50,
        "lineEnd": 50,
        "columnStart": 4,
        "columnEnd": 21
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 51,
        "lineEnd": 51,
        "columnStart": 4,
        "columnEnd": 22
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 40,
        "lineEnd": 40,
        "columnStart": 44,
        "columnEnd": 77
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 45,
        "lineEnd": 45,
        "columnStart": 51,
        "columnEnd": 84
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 58,
        "lineEnd": 58,
        "columnStart": 49,
        "columnEnd": 82
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 39,
        "lineEnd": 39,
        "columnStart": 134,
        "columnEnd": 162
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 44,
        "lineEnd": 44,
        "columnStart": 154,
        "columnEnd": 193
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 57,
        "lineEnd": 57,
        "columnStart": 131,
        "columnEnd": 167
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 17,
        "lineEnd": 19,
        "columnStart": 26,
        "columnEnd": 17
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 17,
        "lineEnd": 19,
        "columnStart": 26,
        "columnEnd": 17
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "##\n# ojo-bot base image stack using conda\n# Target is Heroku using Docker [Everything has to be built in /app ]\n#\n# Pat Cappelaere Vightel\n# pat@cappelaere.com\n#\n# GDAL (with-python), PROJ, GEOS\n# Node.js 4.2.3\n#\n\n# Inherit from Heroku's stack\nFROM heroku/cedar:14\n\nMAINTAINER Pat Cappelaere <pat@cappelaere.com>\n\n# Install apt dependencies\nRUN apt-get update -qq && apt-get install --no-install-recommends -y \\\n    build-essential \\\n    curl wget git && rm -rf /var/lib/apt/lists/*;\n\nRUN mkdir /app /app/user\nWORKDIR /app/user\n\nENV MINICONDA\t/app/user/miniconda\n\n# Set up Miniconda environment for python2\nENV PATH ${MINICONDA}/bin:$PATH\n\nRUN curl -f https://repo.continuum.io/miniconda/Miniconda-latest-Linux-x86_64.sh -s -o miniconda.sh && \\\n    bash miniconda.sh -p ${MINICONDA} -b\n\nRUN conda update --yes conda && conda install pip --yes\nRUN conda install \\\n  netcdf4 libnetcdf proj4 pyproj geos hdf4 hdf5 h5py lxml gdal libgdal \\\n  numpy scipy matplotlib ipython pillow\nRUN pip install --no-cache-dir boto boto3 pytrmm python-dateutil\n\n# Install potrace\nRUN mkdir ${MINICONDA}/potrace && cd ${MINICONDA}/potrace && wget https://potrace.sourceforge.net/download/1.13/potrace-1.13.tar.gz && tar -zxf potrace-1.13.tar.gz && rm potrace-1.13.tar.gz\nRUN cd ${MINICONDA}/potrace/potrace-1.13 && ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --prefix ${MINICONDA} && make && make install\nRUN rm -rf ${MINICONDA}/potrace\n\n# Install grib_api\nRUN mkdir ${MINICONDA}/grib && cd ${MINICONDA}/grib && wget https://software.ecmwf.int/wiki/download/attachments/3473437/grib_api-1.14.4-Source.tar.gz && tar -xzvf grib_api-1.14.4-Source.tar.gz && rm grib_api-1.14.4-Source.tar.gz\nRUN cd ${MINICONDA}/grib/grib_api-1.14.4-Source && ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --prefix ${MINICONDA} && make && make install\nRUN rm -rf ${MINICONDA}/grib\n\nENV GRIBAPI_DIR ${MINICONDA}\nRUN pip install --no-cache-dir https://pypi.python.org/packages/source/p/pygrib/pygrib-2.0.1.tar.gz\nRUN pip install --no-cache-dir boto3\nRUN pip install --no-cache-dir PyYAML\n\n#\n# Install node\n#\nENV NODE_ENGINE \t4.2.6\nRUN mkdir ${MINICONDA}/node && cd ${MINICONDA}/node && wget https://nodejs.org/dist/v${NODE_ENGINE}/node-v${NODE_ENGINE}.tar.gz && tar -zxf node-v${NODE_ENGINE}.tar.gz && rm node-v${NODE_ENGINE}.tar.gz\nRUN cd ${MINICONDA}/node/node-v${NODE_ENGINE} && ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --prefix ${MINICONDA} && make && make install\nRUN rm -rf ${MINICONDA}/node\n\n# Topojson\nRUN npm -g install topojson && npm cache clean --force;\n\n# To find EPSG csv files\nENV GDAL_DATA ${MINICONDA}/share/gdal\n\n"
}