{
  "startTime": 1674244479900,
  "endTime": 1674244480316,
  "originalSmells": [
    {
      "rule": "yarnCacheCleanAfterInstall",
      "position": {
        "lineStart": 134,
        "lineEnd": 134,
        "columnStart": 4,
        "columnEnd": 16
      }
    },
    {
      "rule": "apkAddUseNoCache",
      "position": {
        "lineStart": 32,
        "lineEnd": 44,
        "columnStart": 5,
        "columnEnd": 4
      }
    },
    {
      "rule": "apkAddUseNoCache",
      "position": {
        "lineStart": 77,
        "lineEnd": 80,
        "columnStart": 5,
        "columnEnd": 11
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM alpine:3.8 AS sccache\n\nWORKDIR /tmp\nRUN wget --no-check-certificate -qO- https://github.com/mozilla/sccache/releases/download/0.2.8/sccache-0.2.8-x86_64-unknown-linux-musl.tar.gz | tar xvz \\\n  && mv sccache-0.2.8-x86_64-unknown-linux-musl/sccache .\n\nFROM alpine:3.8 as libv8\n\nLABEL repository.hub=\"alexmasterov/alpine-libv8:7.2\" \\\n  repository.url=\"https://github.com/AlexMasterov/dockerfiles\" \\\n  maintainer=\"Alex Masterov <alex.masterow@gmail.com>\"\n\nARG V8_VERSION=7.2.505\nARG V8_DIR=/usr/local/v8\n\nARG BUILD_COMMIT=5a371bcc0efe2cc84f384f14bdf5eaf5fe3e271a\nARG BUILDTOOLS_COMMIT=13a00f110ef910a25763346d6538b60f12845656\nARG ICU_COMMIT=407b39301e71006b68bd38e770f35d32398a7b14\nARG GTEST_COMMIT=2e68926a9d4929e9289373cd49e40ddcb9a628f7\nARG TRACE_EVENT_COMMIT=211b3ed9d0481b4caddbee1322321b86a483ca1f\nARG CLANG_COMMIT=3041f30dd6b3fa4fb8ca7db6439bed372f4accc0\nARG JINJA2_COMMIT=b41863e42637544c2941b574c7877d3e1f663e25\nARG MARKUPSAFE_COMMIT=8f45f5cfa0009d2a70589bcda0349b8cb2b72783\nARG CATAPULT_COMMIT=ed6fe0f638403e1afd377e38975e4fd430f53432\n\nARG GN_SOURCE=https://www.dropbox.com/s/3ublwqh4h9dit9t/alpine-gn-80e00be.tar.gz\nARG V8_SOURCE=https://chromium.googlesource.com/v8/v8/+archive/${V8_VERSION}.tar.gz\n\nENV V8_VERSION=${V8_VERSION} \\\n  V8_DIR=${V8_DIR}\n\nRUN set -x \\\n  && apk add --no-cache --update --virtual .v8-build-dependencies \\\n  at-spi2-core-dev \\\n  curl \\\n  g++ \\\n  gcc \\\n  glib-dev \\\n  icu-dev \\\n  linux-headers \\\n  make \\\n  ninja \\\n  python \\\n  tar \\\n  xz \\\n  && : \"---------- V8 ----------\" \\\n  && mkdir -p /tmp/v8 \\\n  && curl -fSL --connect-timeout 30 ${V8_SOURCE} | tar xmz -C /tmp/v8 \\\n  && : \"---------- Dependencies ----------\" \\\n  && DEPS=\" \\\n  chromium/buildtools.git@${BUILDTOOLS_COMMIT}:buildtools; \\\n  chromium/src/build.git@${BUILD_COMMIT}:build; \\\n  chromium/src/base/trace_event/common.git@${TRACE_EVENT_COMMIT}:base/trace_event/common; \\\n  chromium/src/tools/clang.git@${CLANG_COMMIT}:tools/clang; \\\n  chromium/src/third_party/jinja2.git@${JINJA2_COMMIT}:third_party/jinja2; \\\n  chromium/src/third_party/markupsafe.git@${MARKUPSAFE_COMMIT}:third_party/markupsafe; \\\n  chromium/deps/icu.git@${ICU_COMMIT}:third_party/icu; \\\n  external/github.com/google/googletest.git@${GTEST_COMMIT}:third_party/googletest/src; \\\n  catapult.git@${CATAPULT_COMMIT}:third_party/catapult \\\n  \" \\\n  && while [ \"${DEPS}\" ]; do \\\n  dep=\"${DEPS%%;*}\" \\\n  link=\"${dep%%:*}\" \\\n  url=\"${link%%@*}\" url=\"${url#\"${url%%[![:space:]]*}\"}\" \\\n  hash=\"${link#*@}\" \\\n  dir=\"${dep#*:}\"; \\\n  [ -n \"${dep}\" ] \\\n  && dep_url=\"https://chromium.googlesource.com/${url}/+archive/${hash}.tar.gz\" \\\n  && dep_dir=\"/tmp/v8/${dir}\" \\\n  && mkdir -p ${dep_dir} \\\n  && curl -fSL --connect-timeout 30 ${dep_url} | tar xmz -C ${dep_dir} \\\n  & [ \"${DEPS}\" = \"${dep}\" ] && DEPS='' || DEPS=\"${DEPS#*;}\"; \\\n  done; \\\n  wait \\\n  && : \"---------- Downloads the current stable Linux sysroot ----------\" \\\n  && /tmp/v8/build/linux/sysroot_scripts/install-sysroot.py --arch=amd64 \\\n  && : \"---------- Proper GN ----------\" \\\n  && apk add --no-cache --virtual .gn-runtime-dependencies \\\n  libevent \\\n  libexecinfo \\\n  libstdc++ \\\n  && curl -fSL --connect-timeout 30 ${GN_SOURCE} | tar xmz -C /tmp/v8/buildtools/linux64/\n\nARG AWS_ACCESS_KEY_ID\nARG AWS_SECRET_ACCESS_KEY\n\nCOPY --from=sccache /tmp/sccache /usr/bin/sccache\n\nENV SCCACHE_BUCKET=fly-proxy-sccache \\\n  AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID \\\n  AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY\n\nRUN : \"---------- Build instructions ----------\" \\\n  && sccache --start-server \\\n  && cd /tmp/v8 \\\n  && ./tools/dev/v8gen.py \\\n  x64.release -- \\\n  cc_wrapper=\\\"sccache\\\" \\\n  binutils_path=\\\"/usr/bin\\\" \\\n  target_os=\\\"linux\\\" \\\n  target_cpu=\\\"x64\\\" \\\n  v8_target_cpu=\\\"x64\\\" \\\n  v8_use_external_startup_data=false \\\n  v8_use_snapshot = true \\\n  v8_enable_future=true \\\n  is_official_build=true \\\n  is_cfi=false \\\n  is_clang=false \\\n  use_custom_libcxx=false \\\n  use_sysroot=false \\\n  use_gold=false \\\n  use_allocator_shim=false \\\n  treat_warnings_as_errors=false \\\n  symbol_level=0 \\\n  v8_monolithic = true \\\n  use_jumbo_build = true \\\n  && : \"---------- Build ----------\" \\\n  && ninja d8 -C out.gn/x64.release/ -j $(getconf _NPROCESSORS_ONLN) v8_monolith \\\n  && sccache --stop-server\n\nRUN : \"---------- Extract shared libraries ----------\" \\\n  && mkdir -p ${V8_DIR}/include ${V8_DIR}/lib \\\n  && cp -R /tmp/v8/include/* ${V8_DIR}/include/ \\\n  && (cd /tmp/v8/out.gn/x64.release; \\\n  cp obj/lib*.a icudtl.dat ${V8_DIR}/lib/)\n\nRUN : \"---------- Removing build dependencies, clean temporary files ----------\" \\\n  && apk del .v8-build-dependencies .gn-runtime-dependencies \\\n  && rm -rf /var/cache/apk/* /var/tmp/* /tmp/*\n\nFROM node:10-stretch as v8env\n\nWORKDIR /v8env\nCOPY v8env/package.json package.json\nRUN yarn install && yarn cache clean;\n\nADD v8env/ .\nADD scripts/build-version.sh ../scripts/build-version.sh\n\nARG BUILD_VERSION\nENV BUILD_VERSION=$BUILD_VERSION\n\nRUN ./node_modules/.bin/rollup -c\n\nRUN ls -lah dist\n\nFROM alpine:edge as builder\n\nWORKDIR /usr/src/myapp\n\nRUN apk --no-cache add rust cargo g++ openssl openssl-dev\n\nCOPY libfly libfly\nCOPY --from=libv8 /usr/local/v8/lib libfly/v8/out.gn/lib/obj\nCOPY --from=libv8 /usr/local/v8/include libfly/v8/include\nCOPY --from=v8env v8env/ v8env/\n\nADD . ./\n\nARG AWS_ACCESS_KEY_ID\nARG AWS_SECRET_ACCESS_KEY\n\nCOPY --from=sccache /tmp/sccache /usr/bin/sccache\n\nENV RUSTFLAGS=\"-C target-feature=+crt-static\"\\\n  OPENSSL_STATIC=yes\\\n  OPENSSL_LIB_DIR=/usr/lib\\\n  OPENSSL_INCLUDE_DIR=/usr/include/openssl \\\n  SCCACHE_BUCKET=fly-proxy-sccache \\\n  RUSTC_WRAPPER=/usr/bin/sccache \\\n  AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID \\\n  AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY\n\nRUN sccache --start-server \\\n  && cargo build --release -p create_snapshot \\\n  && sccache --stop-server\n\nRUN target/release/create_snapshot v8env/dist/v8env.js v8env.bin\n\nARG BUILD_VERSION\nENV BUILD_VERSION=$BUILD_VERSION\n\nRUN sccache --start-server \\\n  && cargo build --target x86_64-alpine-linux-musl --no-default-features --release -p distributed-fly \\\n  && cargo build --target x86_64-alpine-linux-musl --no-default-features --release --bin fly \\\n  && sccache --stop-server\n\nFROM scratch\n\nCOPY --from=builder /usr/src/myapp/target/x86_64-alpine-linux-musl/release/distributed-fly /fly-dist\nCOPY --from=builder /usr/src/myapp/target/x86_64-alpine-linux-musl/release/fly /fly\n\nCMD [\"/fly\"]"
}