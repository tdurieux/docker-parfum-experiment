{
  "startTime": 1674247884810,
  "endTime": 1674247884915,
  "originalSmells": [
    {
      "rule": "yumInstallRmVarCacheYum",
      "position": {
        "lineStart": 45,
        "lineEnd": 45,
        "columnStart": 4,
        "columnEnd": 56
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM rhel8/s2i-core\n\n# Redis image based on Software Collections packages\n#\n# Volumes:\n#  * /var/lib/redis/data - Datastore for Redis\n# Environment:\n#  * $REDIS_PASSWORD - Database password\n\nENV REDIS_VERSION=5 \\\n    HOME=/var/lib/redis\n\nENV SUMMARY=\"Redis in-memory data structure store, used as database, cache and message broker\" \\\n    DESCRIPTION=\"Redis $REDIS_VERSION available as container, is an advanced key-value store. \\\nIt is often referred to as a data structure server since keys can contain strings, hashes, lists, \\\nsets and sorted sets. You can run atomic operations on these types, like appending to a string; \\\nincrementing the value in a hash; pushing to a list; computing set intersection, union and difference; \\\nor getting the member with highest ranking in a sorted set. In order to achieve its outstanding \\\nperformance, Redis works with an in-memory dataset. Depending on your use case, you can persist \\\nit either by dumping the dataset to disk every once in a while, or by appending each command to a log.\"\n\nLABEL summary=\"$SUMMARY\" \\\n      description=\"$DESCRIPTION\" \\\n      io.k8s.description=\"$DESCRIPTION\" \\\n      io.k8s.display-name=\"Redis $REDIS_VERSION\" \\\n      io.openshift.expose-services=\"6379:redis\" \\\n      io.openshift.tags=\"database,redis,redis$REDIS_VERSION,redis-$REDIS_VERSION\" \\\n      com.redhat.component=\"redis-$REDIS_VERSION-container\" \\\n      name=\"rhel8/redis-$REDIS_VERSION\" \\\n      version=\"1\" \\\n      usage=\"podman run -d --name redis_database -p 6379:6379 rhel8/redis-$REDIS_VERSION\" \\\n      maintainer=\"SoftwareCollections.org <sclorg@redhat.com>\"\n\nEXPOSE 6379\n\n# Create user for redis that has known UID\n# We need to do this before installing the RPMs which would create user with random UID\nRUN getent group  redis & > /dev/null || groupadd -r redis & > /dev/null && \\\n    usermod -l redis -g redis -c 'Redis Server' default & > /dev/null && \\\n# Install gettext for envsubst command\n# This image must forever use UID 964 for redis user so our volumes are\n# safe in the future. This should *never* change, the last test is there\n# to make sure of that.\n    yum -y module enable redis:$REDIS_VERSION && \\\n    INSTALL_PKGS=\"policycoreutils redis\" && \\\n    yum install -y --setopt=tsflags=nodocs $INSTALL_PKGS && \\\n    rpm -V $INSTALL_PKGS && \\\n    yum clean all && \\\n    mkdir -p /var/lib/redis/data && chown -R redis.0 /var/lib/redis && rm -rf /var/cache/yum\n\n# Get prefix path and path to scripts rather than hard-code them in scripts\nENV CONTAINER_SCRIPTS_PATH=/usr/share/container-scripts/redis \\\n    REDIS_PREFIX=/usr\n\nCOPY root /\n\n# this is needed due to issues with squash\n# when this directory gets rm'd by the container-setup\n# script.\nRUN /usr/libexec/container-setup\n\nVOLUME [\"/var/lib/redis/data\"]\n\nUSER 1001\n\nENTRYPOINT [\"container-entrypoint\"]\nCMD [\"run-redis\"]\n"
}