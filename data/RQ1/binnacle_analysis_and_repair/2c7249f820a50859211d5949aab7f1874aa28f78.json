{
  "startTime": 1674251229054,
  "endTime": 1674251229350,
  "originalSmells": [
    {
      "rule": "wgetUseHttpsUrl",
      "position": {
        "lineStart": 34,
        "lineEnd": 34,
        "columnStart": 4,
        "columnEnd": 82
      }
    },
    {
      "rule": "wgetUseHttpsUrl",
      "position": {
        "lineStart": 37,
        "lineEnd": 37,
        "columnStart": 4,
        "columnEnd": 82
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 35,
        "lineEnd": 35,
        "columnStart": 57,
        "columnEnd": 68
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 38,
        "lineEnd": 38,
        "columnStart": 57,
        "columnEnd": 90
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 35,
        "lineEnd": 35,
        "columnStart": 4,
        "columnEnd": 33
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 38,
        "lineEnd": 38,
        "columnStart": 4,
        "columnEnd": 33
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 13,
        "lineEnd": 29,
        "columnStart": 39,
        "columnEnd": 14
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 13,
        "lineEnd": 29,
        "columnStart": 39,
        "columnEnd": 14
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM ubuntu:14.04.1\n\nMAINTAINER trigrou\n\nENV LD_LIBRARY_PATH /usr/local/lib/:/usr/local/lib64/\nENV PYTHONPATH /usr/local/bin/:/usr/local/lib/python/site-packages\n\nRUN echo \"\" >> /etc/apt/sources.list ;\\\n    echo \"deb http://us-west-2.ec2.archive.ubuntu.com/ubuntu/ trusty universe\" >>/etc/apt/sources.list ;\\\n    echo \"deb-src http://us-west-2.ec2.archive.ubuntu.com/ubuntu/ trusty universe\" >>/etc/apt/sources.list ;\\\n    echo \"deb http://us-west-2.ec2.archive.ubuntu.com/ubuntu/ trusty multiverse\" >>/etc/apt/sources.list ;\\\n    echo \"deb-src http://us-west-2.ec2.archive.ubuntu.com/ubuntu/ trusty multiverse\" >>/etc/apt/sources.list\n\nRUN apt-get -y update --fix-missing && apt-get install --no-install-recommends -y \\\n    p7zip-full \\\n    ccache \\\n    cmake \\\n    g++ \\\n    git \\\n    libgif-dev \\\n    libwebp-dev \\\n    libpng12-dev \\\n    libtiff5-dev \\\n    libjpeg-dev \\\n    libopenjpeg-dev \\\n    libboost-dev libboost-filesystem-dev libboost-regex-dev libboost-system-dev libboost-thread-dev libboost-python-dev \\\n    software-properties-common \\\n    python \\\n    wget \\\n    libtbb-dev && rm -rf /var/lib/apt/lists/*;\n\nRUN echo \"/usr/local/lib64/\" >/etc/ld.so.conf.d/lib64.conf\nRUN echo \"/usr/local/lib/\" >/etc/ld.so.conf.d/lib.conf\n\nRUN wget https://download.savannah.nongnu.org/releases/openexr/ilmbase-2.2.0.tar.gz\nRUN tar xvfz ilmbase-2.2.0.tar.gz && cd ilmbase-2.2.0 && ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" && make install && rm ilmbase-2.2.0.tar.gz\n\nRUN wget https://download.savannah.nongnu.org/releases/openexr/openexr-2.2.0.tar.gz\nRUN tar xvfz openexr-2.2.0.tar.gz && cd openexr-2.2.0 && ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --disable-ilmbasetest && make install && rm openexr-2.2.0.tar.gz\n\n# openimageio\nRUN cd /root/ && wget \"https://github.com/OpenImageIO/oiio/archive/Release-1.5.16.tar.gz\" \\\n&& tar xvfz Release-1.5.16.tar.gz && cd oiio-Release-1.5.16 && mkdir release && cd release/ \\\n&& cmake ../ -DCMAKE_BUILD_TYPE=Release && make install \\\n&& cd ../.. && rm -fr oiio-Release-1.5.16 && rm -fr Release-1.5.16.tar.gz\n\n# envtools\n#RUN rm -Rf /root/envtools\nRUN mkdir /root/envtools\nCOPY ./ /root/envtools/\n\n#RUN cd /root/ && git clone https://github.com/cedricpinson/envtools envtools && mkdir envtools/release && cd /root/envtools/release && cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_CXX_COMPILER=\"ccache\" -DCMAKE_CXX_COMPILER_ARG1=\"g++\" ../\n#RUN mkdir /root/envtools/release && cd /root/envtools/release && cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_CXX_COMPILER=\"/usr/bin/clang++\" ../ && make -j6 install\n\nRUN mkdir /root/envtools/release && cd /root/envtools/release && cmake -DCMAKE_BUILD_TYPE=Release  ../ && make -j6 install\n\n# RUN rm -r /root/envtools ilmbase-2.2.0.tar.gz ilmbase-2.2.0 openexr-2.2.0.tar.gz openexr-2.2.0\n\n# OpenCL on HOST\n# apt-get install build-essential\n# apt-get install linux-image-extra-virtual\n# wget http://developer.download.nvidia.com/compute/cuda/7.5/Prod/local_installers/cuda_7.5.18_linux.run\n# mkdir nvidia_installers\n# chmod +x cuda_7.5.18_linux.run\n# ./cuda_7.5.18_linux.run -extract=`pwd`/nvidia_installers\n# cd nvidia_installers/\n# vi /etc/modprobe.d/blacklist-nouveau.conf\n# echo options nouveau modeset=0 | sudo tee -a /etc/modprobe.d/nouveau-kms.conf\n# update-initramfs -u\n# apt-get install linux-headers-3.13.0-74-generic\n# ./NVIDIA-Linux-x86_64-352.39.run\n\n\n\n# OPENCL Docker\n# needs to enable non official package\n# RUN apt-get update && apt-get install -q -y \\\n# build-essential\n# RUN echo \"\" >> /etc/apt/sources.list ;\\\n#     echo \"deb http://us-west-2.ec2.archive.ubuntu.com/ubuntu/ trusty universe\" >>/etc/apt/sources.list ;\\\n#     echo \"deb-src http://us-west-2.ec2.archive.ubuntu.com/ubuntu/ trusty universe\" >>/etc/apt/sources.list ;\\\n#     echo \"deb http://us-west-2.ec2.archive.ubuntu.com/ubuntu/ trusty multiverse\" >>/etc/apt/sources.list ;\\\n#     echo \"deb-src http://us-west-2.ec2.archive.ubuntu.com/ubuntu/ trusty multiverse\" >>/etc/apt/sources.list\n\n\n# ENV CUDA_RUN http://developer.download.nvidia.com/compute/cuda/7.5/Prod/local_installers/cuda_7.5.18_linux.run\n\n# RUN cd /opt && \\\n#   wget $CUDA_RUN && \\\n#   chmod +x *.run && \\\n#   mkdir nvidia_installers && \\\n#   ./cuda_7.5.18_linux.run -extract=`pwd`/nvidia_installers && \\\n#   cd nvidia_installers && \\\n#   ./NVIDIA-Linux-x86_64-352.39.run -s -N --no-kernel-module && \\\n#   echo /usr/lib/x86_64-linux-gnu/libnvidia-opencl.so.352.39 >/etc/OpenCL/vendors/nvidia.icd &&\n#   rm -r /opt/*\n"
}