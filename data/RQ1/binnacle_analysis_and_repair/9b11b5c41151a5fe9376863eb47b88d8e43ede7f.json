{
  "startTime": 1674252859622,
  "endTime": 1674252859732,
  "originalSmells": [
    {
      "rule": "apkAddUseNoCache",
      "position": {
        "lineStart": 29,
        "lineEnd": 29,
        "columnStart": 3,
        "columnEnd": 24
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# This dockerfile is the root \"shell\" around the entire hive container ecosystem.\n#\n# Its goal is to containerize everything that hive does within a single mega\n# container, preventing any leakage of junk (be that file system, docker images\n# and/or containers, network traffic) into the host system.\n#\n# To this effect is runs its own docker engine within, executing the entire hive\n# test suite inside. The data workspace of the internal docker engine needs to\n# be mounted outside to allow proper image caching. Further, to allow running a\n# docker instance internally, this shell must be started in privileged mode.\n#\n# Callers need to:\n#   - Bind /var/lib/docker to an external volume for cache reuse\n#   - Forward UID envvar to reown docker and hive generated files\n#   - Run with --privileged to allow docker-in-docker containers\nFROM docker:dind\n\n# Configure the container for building hive\nRUN apk add --update musl-dev go && rm -rf /var/cache/apk/*\nENV GOPATH /gopath\nENV PATH   $GOPATH/bin:$PATH\n\n# Inject and build the hive dependencies (modified very rarely, cache builds)\nADD vendor $GOPATH/src/github.com/ethereum/hive/vendor\nRUN (cd $GOPATH/src/github.com/ethereum/hive && go install ./...)\n\n# We need geth\n# Build go-ethereum on the fly and delete all build tools afterwards\nRUN \\\n   apk add --no-cache --update git && \\\n    git clone https://github.com/ethereum/go-ethereum $GOPATH/src/github.com/ethereum/go-ethereum && \\\n\tapk del git\n\n# Inject and build hive itself (modified during hive dev only, cache builds)\nADD *.go $GOPATH/src/github.com/ethereum/hive/\nADD chaintools $GOPATH/src/github.com/ethereum/hive/chaintools\n\n\nWORKDIR $GOPATH/src/github.com/ethereum/hive\nRUN go install\n\n# Define the tiny startup script to boot docker and hive afterwards\nRUN \\\n   echo '#!/bin/sh'  > $GOPATH/bin/hive.sh && \\\n\techo 'set -e'    >> $GOPATH/bin/hive.sh && \\\n\t\\\n\techo 'dockerd-entrypoint.sh --storage-driver=aufs 2>/dev/null &' >> $GOPATH/bin/hive.sh && \\\n\techo 'while [ ! -S /var/run/docker.sock ]; do sleep 1; done'           >> $GOPATH/bin/hive.sh && \\\n\t\\\n\techo 'for id in `docker ps -a -q`; do docker rm -f $id; done'                                                     >> $GOPATH/bin/hive.sh && \\\n\techo 'for id in `docker images -f \"dangling=true\" | tail -n +2 | awk \"{print \\\\$3}\"`; do docker rmi -f $id; done' >> $GOPATH/bin/hive.sh && \\\n\techo 'hive --docker-noshell $@'                                                                                   >> $GOPATH/bin/hive.sh && \\\n\techo 'for id in `docker ps -a -q`; do docker rm -f $id; done'                                                     >> $GOPATH/bin/hive.sh && \\\n\techo 'for id in `docker images -f \"dangling=true\" | tail -n +2 | awk \"{print \\\\$3}\"`; do docker rmi -f $id; done' >> $GOPATH/bin/hive.sh && \\\n\t\\\n\techo 'adduser -u $UID -D hive'       >> $GOPATH/bin/hive.sh && \\\n\techo 'chown -R hive /var/lib/docker' >> $GOPATH/bin/hive.sh && \\\n  echo 'chown -R hive workspace'       >> $GOPATH/bin/hive.sh && \\\n\t\\\n\tchmod +x $GOPATH/bin/hive.sh\n\nENTRYPOINT [\"hive.sh\"]\n\n# Inject all other runtime resources (modified most frequently)\nCOPY . $GOPATH/src/github.com/ethereum/hive\n"
}