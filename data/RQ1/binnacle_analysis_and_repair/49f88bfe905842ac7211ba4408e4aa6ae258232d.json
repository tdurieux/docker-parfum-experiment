{
  "startTime": 1674234486423,
  "endTime": 1674234486562,
  "originalSmells": [
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 29,
        "lineEnd": 29,
        "columnStart": 4,
        "columnEnd": 43
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 7,
        "lineEnd": 21,
        "columnStart": 26,
        "columnEnd": 12
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 7,
        "lineEnd": 21,
        "columnStart": 26,
        "columnEnd": 12
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM ubuntu:18.04\nWORKDIR /interop/server\n\n# Set the time zone to the competition time zone.\nRUN ln -sf /usr/share/zoneinfo/America/New_York /etc/localtime\n\n# Install server base dependencies.\nRUN apt-get -qq update && apt-get -qq --no-install-recommends install -y \\\n        nginx \\\n        curl \\\n        npm \\\n        postgresql \\\n        postgresql-client \\\n        protobuf-compiler \\\n        python3 \\\n\n        python3-matplotlib \\\n        python3-numpy \\\n        python3-pip \\\n        python3-psycopg2 \\\n        python3-pyproj \\\n        sudo && rm -rf /var/lib/apt/lists/*;\n\n# Create storage for object images.\nRUN mkdir -p /var/www/media/objects && \\\n    chown -R www-data /var/www\n\n# Install server Python requirements.\nCOPY server/config/requirements.txt config/requirements.txt\nRUN pip3 install --no-cache-dir -r config/requirements.txt\n\n# Install server JS requirements.\nCOPY server/config/npm.txt config/npm.txt\nRUN cat config/npm.txt | xargs sudo npm install -g\n\n# Configure web server.\nCOPY server/config/nginx.conf /etc/nginx/sites-enabled/default\nRUN sudo mkdir -p /var/log/uwsgi\n\n# Configure database.\nCOPY server/config/postgresql.conf /etc/postgresql/10/main/\nRUN service postgresql restart && \\\n    sudo -u postgres psql -c \"CREATE USER postgresql_user WITH CREATEDB PASSWORD 'postgresql_pass';\" && \\\n    sudo -u postgres psql -c \"CREATE DATABASE auvsi_suas_db;\"\n\n# Compile static assets.\nCOPY server/manage.py manage.py\nCOPY server/server server\nCOPY server/auvsi_suas/__init__.py auvsi_suas/__init__.py\nCOPY server/auvsi_suas/models/__init__.py auvsi_suas/models/__init__.py\nCOPY server/auvsi_suas/views/__init__.py auvsi_suas/views/__init__.py\nCOPY server/auvsi_suas/frontend auvsi_suas/frontend\nRUN python3 manage.py collectstatic --noinput\n\n# Copy all remaining code.\nCOPY server/ .\n\n# Compile protobuf definitions.\nCOPY proto auvsi_suas/proto\nRUN protoc --python_out=. auvsi_suas/proto/*.proto\n\n# Load initial data.\nRUN service postgresql start && \\\n    ./healthcheck.py --check_postgres && \\\n    python3 manage.py migrate && \\\n    python3 manage.py loaddata fixtures/test_fixture.yaml\n\n# Host-mountable sections.\nVOLUME /var/log/uwsgi /var/lib/postgresql /var/www/media/objects\n\n# Commands to execute on startup.\nCMD service postgresql start && \\\n    uwsgi --ini config/uwsgi.ini && \\\n    sudo nginx && \\\n    tail -f /dev/null\n\n# Command to check health of container.\nHEALTHCHECK \\\n  CMD ./healthcheck.py --check_postgres --check_server --check_homepage\n"
}