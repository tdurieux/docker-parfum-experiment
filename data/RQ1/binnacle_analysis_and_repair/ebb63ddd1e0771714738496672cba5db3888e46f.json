{
  "startTime": 1674245682265,
  "endTime": 1674245682536,
  "originalSmells": [
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 46,
        "lineEnd": 46,
        "columnStart": 2,
        "columnEnd": 27
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 47,
        "lineEnd": 47,
        "columnStart": 5,
        "columnEnd": 35
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 53,
        "lineEnd": 53,
        "columnStart": 2,
        "columnEnd": 51
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 33,
        "lineEnd": 33,
        "columnStart": 21,
        "columnEnd": 32
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 4,
        "lineEnd": 21,
        "columnStart": 22,
        "columnEnd": 6
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# OCRmyPDF\n#\nFROM      ubuntu:18.04\n\nRUN apt-get update && apt-get install -y --no-install-recommends \\\n  build-essential autoconf automake libtool \\\n  libleptonica-dev \\\n  zlib1g-dev \\\n  libexempi3 \\\n  ocrmypdf \\\n  pngquant \\\n  python3-pip \\\n  python3-venv \\\n  tesseract-ocr \\\n  tesseract-ocr-chi-sim \\\n  tesseract-ocr-deu \\\n  tesseract-ocr-eng \\\n  tesseract-ocr-fra \\\n  tesseract-ocr-por \\\n  tesseract-ocr-spa \\\n  unpaper \\\n  wget && rm -rf /var/lib/apt/lists/*;\n\n\nENV LANG=C.UTF-8\n\n# Compile and install jbig2\n# Needs libleptonica-dev, zlib1g-dev\nRUN \\\n  mkdir jbig2 \\\n  && wget -q https://github.com/agl/jbig2enc/archive/0.29.tar.gz -O - | \\\n      tar xz -C jbig2 --strip-components=1 \\\n  && cd jbig2 \\\n  && ./autogen.sh && ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" && make && make install \\\n  && cd .. \\\n  && rm -rf jbig2\n\nRUN apt-get remove -y autoconf automake libtool\n\nRUN python3 -m venv --system-site-packages /appenv\n\n# This installs the latest binary wheel instead of the code in the current\n# folder. Installing from source will fail, apparently because cffi needs\n# build-essentials (gcc) to do a source installation\n# (i.e. \"pip install .\"). It's unclear to me why this is the case.\nRUN . /appenv/bin/activate; \\\n  pip install --no-cache-dir --upgrade pip \\\n  && pip install --no-cache-dir --upgrade ocrmypdf\n\n# Now copy the application in, mainly to get the test suite.\n# Do this now to make the best use of Docker cache.\nCOPY . /application\nRUN . /appenv/bin/activate; \\\n  pip install --no-cache-dir -r /application/requirements/test.txt\n\n# Remove the junk, including the source version of application since it was\n# already installed\nRUN rm -rf /tmp/* /var/tmp/* /root/* /application/ocrmypdf \\\n  && apt-get remove -y build-essential \\\n  && apt-get autoremove -y \\\n  && apt-get autoclean -y\n\nRUN useradd docker \\\n  && mkdir /home/docker \\\n  && chown docker:docker /home/docker\n\nUSER docker\nWORKDIR /home/docker\n\n# Must use array form of ENTRYPOINT\n# Non-array form does not append other arguments, because that is \"intuitive\"\nENTRYPOINT [\"/application/.docker/docker-wrapper.sh\"]\n"
}