{
  "startTime": 1674239045690,
  "endTime": 1674239045787,
  "originalSmells": [
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 16,
        "lineEnd": 16,
        "columnStart": 4,
        "columnEnd": 58
      }
    },
    {
      "rule": "apkAddUseNoCache",
      "position": {
        "lineStart": 43,
        "lineEnd": 43,
        "columnStart": 5,
        "columnEnd": 40
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# Development Dockerfile for Django app\n\nFROM python:{{ cookiecutter.python_version }}-alpine3.8\n\nCOPY ./wait-for-it.sh /usr/bin/\n\n# Install bash, libpq{% if cookiecutter.include_cms == 'yes' %}, libjpeg-turbo{% endif %} and gettext\n# Bash is required to support `wait-for-it.sh` script, should not add too much to docker image\nRUN apk add --no-cache bash gettext libpq{% if cookiecutter.include_cms == 'yes' %} libjpeg-turbo{% endif %}\n\n# Install build dependencies and mark them as virtual packages so they could be removed together\nRUN apk add --no-cache --virtual .build-deps \\\n    ca-certificates alpine-sdk postgresql-dev python3-dev linux-headers musl-dev \\\n    libffi-dev libxml2-dev libxslt-dev jpeg-dev zlib-dev\n\n# Copy Python requirements dir and Install requirements\nRUN pip install --no-cache-dir -U pipenv==2018.11.26 pip setuptools wheel\n\nCOPY Pipfile /\nCOPY Pipfile.lock /\n\n# Install all dependencies from Pipfile.lock file\nRUN pipenv install --system --ignore-pipfile --dev\n\n# Check for security warnings, will be enabled later when failing dependencies have been updated\n# RUN pipenv check --system\n\n# Find all file objects containing name `test` or compiled python files and remove them\n# Find all runtime dependencies that are marked as needed by scanelf\n# scanelf is utility to show ELF data for binary objects\n# For more info: https://wiki.gentoo.org/wiki/Hardened/PaX_Utilities#The_scanelf_application\n# Finally re-install missing run-dependencies\nRUN find /usr/local \\\n        \\( -type d -a -name test -o -name tests \\) \\\n        -o \\( -type f -a -name '*.pyc' -o -name '*.pyo' \\) \\\n        -exec rm -rf '{}' + \\\n  && runDeps=\"$( \\\n        scanelf --needed --nobanner --recursive /usr/local \\\n                | awk '{ gsub(/,/, \"\\nso:\", $2); print \"so:\" $2 }' \\\n                | sort -u \\\n                | xargs -r apk info --installed \\\n                | sort -u \\\n    )\" \\\n  && apk add --no-cache --virtual .rundeps $runDeps\n\n# Remove build dependencies\nRUN apk del .build-deps\n\n# Set the default directory where CMD will execute\nWORKDIR /app\n\n# Run Django's runserver by default\nCMD python manage.py runserver 0.0.0.0:80\n"
}