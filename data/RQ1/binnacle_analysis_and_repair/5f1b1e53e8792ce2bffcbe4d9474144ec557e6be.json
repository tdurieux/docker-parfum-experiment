{
  "startTime": 1674234553272,
  "endTime": 1674234553653,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 68,
        "lineEnd": 68,
        "columnStart": 7,
        "columnEnd": 86
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 43,
        "lineEnd": 54,
        "columnStart": 14,
        "columnEnd": 46
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 69,
        "lineEnd": 69,
        "columnStart": 7,
        "columnEnd": 48
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 6,
        "lineEnd": 6,
        "columnStart": 7,
        "columnEnd": 80
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 7,
        "lineEnd": 7,
        "columnStart": 7,
        "columnEnd": 116
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 6,
        "lineEnd": 6,
        "columnStart": 7,
        "columnEnd": 80
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 7,
        "lineEnd": 7,
        "columnStart": 7,
        "columnEnd": 116
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM monero-android\n\n#INSTALL JAVA\nRUN echo \"deb http://ftp.fr.debian.org/debian/ jessie-backports main contrib non-free\" >> /etc/apt/sources.list\nRUN dpkg --add-architecture i386 \\\n    && apt-get update \\\n    && apt-get install --no-install-recommends -y libc6:i386 libncurses5:i386 libstdc++6:i386 libz1:i386 \\\n    && apt-get install --no-install-recommends -y -t jessie-backports ca-certificates-java openjdk-8-jdk-headless openjdk-8-jre-headless ant && rm -rf /var/lib/apt/lists/*;\nENV JAVA_HOME /usr/lib/jvm/java-8-openjdk-amd64\nENV PATH $JAVA_HOME/bin:$PATH\n\n#Get Qt\nENV QT_VERSION 5.8\n\nRUN git clone git://code.qt.io/qt/qt5.git -b ${QT_VERSION} \\\n    && cd qt5 \\\n    && perl init-repository\n\n## Note: Need to use libc++ but Qt does not provide mkspec for libc++.\n## Their support of it is quite recent and they claim they don't use it by default\n## [only because it produces bigger binary objects](https://bugreports.qt.io/browse/QTBUG-50724).\n\n#Create new mkspec for clang + libc++\nRUN cp -r qt5/qtbase/mkspecs/android-clang qt5/qtbase/mkspecs/android-clang-libc \\\n    && cd qt5/qtbase/mkspecs/android-clang-libc \\\n    && sed -i '16i ANDROID_SOURCES_CXX_STL_LIBDIR = $$NDK_ROOT/sources/cxx-stl/llvm-libc++/libs/$$ANDROID_TARGET_ARCH' qmake.conf \\\n    && sed -i '17i ANDROID_SOURCES_CXX_STL_INCDIR = $$NDK_ROOT/sources/cxx-stl/llvm-libc++/include' qmake.conf \\\n    && echo \"QMAKE_LIBS_PRIVATE      = -lc++_shared -llog -lz -lm -ldl -lc -lgcc \" >> qmake.conf \\\n    && echo \"QMAKE_CFLAGS -= -mfpu=vfp \" >> qmake.conf \\\n    && echo \"QMAKE_CXXFLAGS -= -mfpu=vfp \" >> qmake.conf \\ \n    && echo \"QMAKE_CFLAGS += -mfpu=vfp4 \" >> qmake.conf \\\n    && echo \"QMAKE_CXXFLAGS += -mfpu=vfp4 \" >> qmake.conf\n\nENV ANDROID_API android-21\n\n#ANDROID SDK TOOLS\nRUN echo y | $ANDROID_SDK_ROOT/tools/android update sdk --no-ui --all --filter platform-tools\nRUN echo y | $ANDROID_SDK_ROOT/tools/android update sdk --no-ui --all --filter ${ANDROID_API}\nRUN echo y | $ANDROID_SDK_ROOT/tools/android update sdk --no-ui --all --filter build-tools-25.0.1\n\nENV CLEAN_PATH $JAVA_HOME/bin:/usr/cmake-3.6.3-Linux-x86_64/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin\n\n#build Qt\nRUN cd qt5 && PATH=${CLEAN_PATH} ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" -developer-build -release \\\n    -xplatform android-clang-libc \\\n    -android-ndk-platform ${ANDROID_API} \\\n    -android-ndk $ANDROID_NDK_ROOT \\\n    -android-sdk $ANDROID_SDK_ROOT \\\n    -opensource -confirm-license \\\n    -prefix ${WORKDIR}/Qt-${QT_VERSION} \\\n    -nomake tests -nomake examples \\\n    -skip qtserialport \\\n    -skip qtconnectivity \\\n    -skip qttranslations \\\n    -skip qtgamepad -skip qtscript -skip qtdoc\n\n# build Qt tools : gnustl_shared.so is hard-coded in androiddeployqt\n# replace it with libc++_shared.so\nCOPY androiddeployqt.patch qt5/qttools/androiddeployqt.patch\nRUN cd qt5/qttools \\\n    && git apply androiddeployqt.patch \\\n    && cd .. \\\n    && PATH=${CLEAN_PATH} make -j4 \\\n    && PATH=${CLEAN_PATH} make install\n\n# Get iconv and ZBar\nENV ICONV_VERSION 1.14\nRUN git clone https://github.com/ZBar/ZBar.git \\\n    && curl -f -s -O http://ftp.gnu.org/pub/gnu/libiconv/libiconv-${ICONV_VERSION}.tar.gz \\\n    && tar -xzf libiconv-${ICONV_VERSION}.tar.gz \\\n    && cd libiconv-${ICONV_VERSION} \\\n    && CC=arm-linux-androideabi-clang CXX=arm-linux-androideabi-clang++ ./configure --build=x86_64-linux-gnu --host=arm-eabi --prefix=${WORKDIR}/libiconv --disable-rpath && rm libiconv-${ICONV_VERSION}.tar.gz\n\nENV PATH $ANDROID_SDK_ROOT/tools:$ANDROID_SDK_ROOT/platform-tools:${WORKDIR}/Qt-${QT_VERSION}/bin:$PATH\n\n#Build libiconv.a and libzbarjni.a\nCOPY android.mk.patch ZBar/android.mk.patch\nRUN cd ZBar \\\n    && git apply android.mk.patch \\\n    && echo \\\n\"APP_ABI := armeabi-v7a \\n\\\nAPP_STL := c++_shared \\n\\\nTARGET_PLATFORM := ${ANDROID_API} \\n\\\nTARGET_ARCH_ABI := armeabi-v7a \\n\\\nAPP_CFLAGS +=  -target armv7-none-linux-androideabi -fexceptions -fstack-protector-strong -fno-limit-debug-info -mfloat-abi=softfp -mfpu=vfp -fno-builtin-memmove -fno-omit-frame-pointer -fno-stack-protector\\n\"\\\n        >> android/jni/Application.mk \\\n    && cd android \\\n    && android update project --path . -t \"${ANDROID_API}\" \\\n    && CC=arm-linux-androideabi-clang CXX=arm-linux-androideabi-clang++ ant -Dndk.dir=${ANDROID_NDK_ROOT} -Diconv.src=${WORKDIR}/libiconv-${ICONV_VERSION} zbar-clean zbar-ndk-build\n\n#Can't directly call build.sh because of env variables\nRUN git clone https://github.com/monero-project/monero-core.git \\\n    && cd monero-core \\\n    && git submodule update \\\n    && CC=arm-linux-androideabi-clang CXX=arm-linux-androideabi-clang++ BOOST_ROOT=/opt/android/boost_1_62_0 BOOST_LIBRARYDIR=${WORKDIR}/boost_${BOOST_VERSION}/android32/lib/  OPENSSL_ROOT_DIR=${WORKDIR}/openssl/ ./get_libwallet_api.sh release-android\n\nRUN cp openssl/lib* ${ANDROID_NDK_ROOT}/platforms/${ANDROID_API}/arch-arm/usr/lib\nRUN cp boost_${BOOST_VERSION}/android32/lib/lib* ${ANDROID_NDK_ROOT}/platforms/${ANDROID_API}/arch-arm/usr/lib\nRUN cp ZBar/android/obj/local/armeabi-v7a/lib* ${ANDROID_NDK_ROOT}/platforms/${ANDROID_API}/arch-arm/usr/lib\n\nENV PATH $ANDROID_SDK_ROOT/tools:$ANDROID_SDK_ROOT/platform-tools:${WORKDIR}/Qt-${QT_VERSION}/bin:$CLEAN_PATH\n\n# NB : zxcvbn-c needs to build a local binary and Qt don't care about these environnement variable\nRUN cd monero-core \\\n    && CC=\"gcc\" CXX=\"g++\" ./build.sh release-android \\\n    && cd build \\\n    && make deploy\n\n"
}