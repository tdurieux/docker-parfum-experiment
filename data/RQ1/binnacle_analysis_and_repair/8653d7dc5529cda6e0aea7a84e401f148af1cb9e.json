{
  "startTime": 1674641732420,
  "endTime": 1674641735270,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 98,
        "lineEnd": 98,
        "columnStart": 7,
        "columnEnd": 152
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 104,
        "lineEnd": 104,
        "columnStart": 4,
        "columnEnd": 154
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 105,
        "lineEnd": 105,
        "columnStart": 4,
        "columnEnd": 126
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 106,
        "lineEnd": 106,
        "columnStart": 4,
        "columnEnd": 105
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 328,
        "lineEnd": 328,
        "columnStart": 5,
        "columnEnd": 47
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 339,
        "lineEnd": 339,
        "columnStart": 8,
        "columnEnd": 57
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 405,
        "lineEnd": 405,
        "columnStart": 7,
        "columnEnd": 141
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 411,
        "lineEnd": 411,
        "columnStart": 7,
        "columnEnd": 166
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 485,
        "lineEnd": 485,
        "columnStart": 7,
        "columnEnd": 63
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 512,
        "lineEnd": 512,
        "columnStart": 7,
        "columnEnd": 67
      }
    },
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 337,
        "lineEnd": 337,
        "columnStart": 29,
        "columnEnd": 60
      }
    },
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 337,
        "lineEnd": 337,
        "columnStart": 64,
        "columnEnd": 99
      }
    },
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 337,
        "lineEnd": 337,
        "columnStart": 103,
        "columnEnd": 136
      }
    },
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 338,
        "lineEnd": 338,
        "columnStart": 27,
        "columnEnd": 58
      }
    },
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 338,
        "lineEnd": 338,
        "columnStart": 62,
        "columnEnd": 97
      }
    },
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 338,
        "lineEnd": 338,
        "columnStart": 101,
        "columnEnd": 134
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 110,
        "lineEnd": 110,
        "columnStart": 3,
        "columnEnd": 28
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 152,
        "lineEnd": 152,
        "columnStart": 4,
        "columnEnd": 37
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 191,
        "lineEnd": 193,
        "columnStart": 7,
        "columnEnd": 23
      }
    },
    {
      "rule": "gemUpdateSystemRmRootGem",
      "position": {
        "lineStart": 158,
        "lineEnd": 158,
        "columnStart": 4,
        "columnEnd": 43
      }
    },
    {
      "rule": "sha256sumEchoOneSpaces",
      "position": {
        "lineStart": 88,
        "lineEnd": 88,
        "columnStart": 7,
        "columnEnd": 59
      }
    },
    {
      "rule": "sha256sumEchoOneSpaces",
      "position": {
        "lineStart": 141,
        "lineEnd": 141,
        "columnStart": 4,
        "columnEnd": 66
      }
    },
    {
      "rule": "sha256sumEchoOneSpaces",
      "position": {
        "lineStart": 245,
        "lineEnd": 245,
        "columnStart": 5,
        "columnEnd": 59
      }
    },
    {
      "rule": "sha256sumEchoOneSpaces",
      "position": {
        "lineStart": 395,
        "lineEnd": 395,
        "columnStart": 7,
        "columnEnd": 88
      }
    },
    {
      "rule": "sha256sumEchoOneSpaces",
      "position": {
        "lineStart": 456,
        "lineEnd": 456,
        "columnStart": 7,
        "columnEnd": 73
      }
    },
    {
      "rule": "sha256sumEchoOneSpaces",
      "position": {
        "lineStart": 513,
        "lineEnd": 513,
        "columnStart": 7,
        "columnEnd": 73
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 143,
        "lineEnd": 143,
        "columnStart": 4,
        "columnEnd": 67
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 407,
        "lineEnd": 407,
        "columnStart": 7,
        "columnEnd": 67
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 413,
        "lineEnd": 413,
        "columnStart": 7,
        "columnEnd": 99
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 457,
        "lineEnd": 457,
        "columnStart": 7,
        "columnEnd": 48
      }
    },
    {
      "rule": "gpgUseBatchFlag",
      "position": {
        "lineStart": 181,
        "lineEnd": 181,
        "columnStart": 8,
        "columnEnd": 83
      }
    },
    {
      "rule": "gpgUseBatchFlag",
      "position": {
        "lineStart": 182,
        "lineEnd": 182,
        "columnStart": 11,
        "columnEnd": 61
      }
    },
    {
      "rule": "gpgUseBatchFlag",
      "position": {
        "lineStart": 183,
        "lineEnd": 183,
        "columnStart": 11,
        "columnEnd": 70
      }
    },
    {
      "rule": "gpgUseBatchFlag",
      "position": {
        "lineStart": 250,
        "lineEnd": 250,
        "columnStart": 14,
        "columnEnd": 60
      }
    },
    {
      "rule": "gpgUseBatchFlag",
      "position": {
        "lineStart": 251,
        "lineEnd": 251,
        "columnStart": 14,
        "columnEnd": 66
      }
    },
    {
      "rule": "gpgUseHaPools",
      "position": {
        "lineStart": 181,
        "lineEnd": 181,
        "columnStart": 8,
        "columnEnd": 83
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 38,
        "lineEnd": 38,
        "columnStart": 7,
        "columnEnd": 41
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 380,
        "lineEnd": 380,
        "columnStart": 7,
        "columnEnd": 52
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 384,
        "lineEnd": 384,
        "columnStart": 7,
        "columnEnd": 39
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 390,
        "lineEnd": 392,
        "columnStart": 7,
        "columnEnd": 29
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 403,
        "lineEnd": 403,
        "columnStart": 7,
        "columnEnd": 43
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 524,
        "lineEnd": 524,
        "columnStart": 7,
        "columnEnd": 89
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 535,
        "lineEnd": 535,
        "columnStart": 63,
        "columnEnd": 82
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 341,
        "lineEnd": 341,
        "columnStart": 26,
        "columnEnd": 73
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 524,
        "lineEnd": 524,
        "columnStart": 7,
        "columnEnd": 89
      }
    }
  ],
  "repairedSmells": [
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 143,
        "lineEnd": 143,
        "columnStart": 4,
        "columnEnd": 67
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 535,
        "lineEnd": 535,
        "columnStart": 63,
        "columnEnd": 82
      }
    }
  ],
  "repairedDockerfile": "# Copyright 2017-2017 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n#\n# Licensed under the Amazon Software License (the \"License\"). You may not use this file except in compliance with the License.\n# A copy of the License is located at\n#\n#    http://aws.amazon.com/asl/\n#\n# or in the \"license\" file accompanying this file.\n# This file is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, express or implied.\n# See the License for the specific language governing permissions and limitations under the License.\n\nFROM ubuntu:18.04\n\nENV RUBY_MAJOR=\"2.6\" \\\n PYTHON_VERSION=\"3.7.2\" \\\n PHP_VERSION=7.3.1 \\ \n NODE_VERSION=\"10.15.0\" \\\n NODE_8_VERSION=\"8.11.0\" \\\n NVM_VERSION=\"0.33.5\" \\\n GOLANG_VERSION=\"1.11.4\" \\\n DOTNET_SDK_VERSION=\"2.2.102\" \\\n DOCKER_VERSION=\"18.09.1\" \\\n DOCKER_COMPOSE_VERSION=\"1.23.2\"\n\n\n#****************        Utilities     *********************************************\nENV DOCKER_BUCKET=\"download.docker.com\" \\    \n    DOCKER_CHANNEL=\"stable\" \\\n    DOCKER_SHA256=\"c9959e42b637fb7362899ac1d1aeef2a966fa0ea85631da91f4c4a7a9ec29644\" \\\n    DIND_COMMIT=\"3b5fac462d21ca164b3778647420016315289034\" \\    \n    GITVERSION_VERSION=\"4.0.0\" \\\n    DEBIAN_FRONTEND=\"noninteractive\" \\\n    SRC_DIR=\"/usr/src\"\n\n# Install git, SSH, and other utilities\nRUN set -ex \\\n    && echo 'Acquire::CompressionTypes::Order:: \"gz\";' > /etc/apt/apt.conf.d/99use-gzip-compression \\\n    && apt-get update \\\n    && apt install --no-install-recommends -y apt-transport-https \\\n    && apt-get update \\\n    && apt-get install software-properties-common -y --no-install-recommends \\\n    && apt-add-repository ppa:git-core/ppa \\\n    && apt-get update \\\n    && apt-get install git=1:2.* -y --no-install-recommends \\\n    && git version \\\n    && apt-get install -y --no-install-recommends openssh-client \\\n    && mkdir ~/.ssh \\\n    && touch ~/.ssh/known_hosts \\\n    && ssh-keyscan -t rsa,dsa -H github.com >> ~/.ssh/known_hosts \\\n    && ssh-keyscan -t rsa,dsa -H bitbucket.org >> ~/.ssh/known_hosts \\\n    && chmod 600 ~/.ssh/known_hosts \\\n    && apt-get install -y --no-install-recommends \\\n       wget python3 python3-dev python3-pip python3-setuptools fakeroot ca-certificates jq \\\n       netbase gnupg dirmngr bzr mercurial procps \\\n       tar gzip zip autoconf automake \\\n       bzip2 file g++ gcc imagemagick \\\n       libbz2-dev libc6-dev libcurl4-openssl-dev libdb-dev \\\n       libevent-dev libffi-dev libgeoip-dev libglib2.0-dev \\\n       libjpeg-dev libkrb5-dev liblzma-dev \\\n       libmagickcore-dev libmagickwand-dev libmysqlclient-dev \\\n       libncurses5-dev libpq-dev libreadline-dev \\\n       libsqlite3-dev libssl-dev libtool libwebp-dev \\\n       libxml2-dev libxslt1-dev libyaml-dev make \\\n       patch xz-utils zlib1g-dev unzip curl \\\n       e2fsprogs iptables xfsprogs \\\n       mono-devel less groff liberror-perl \\\n       asciidoc build-essential bzr cvs cvsps docbook-xml docbook-xsl dpkg-dev \\\n       libdbd-sqlite3-perl libdbi-perl libdpkg-perl libhttp-date-perl \\\n       libio-pty-perl libserf-1-1 libsvn-perl libsvn1 libtcl8.6 libtimedate-perl \\\n       libxml2-utils libyaml-perl python-bzrlib python-configobj \\\n       sgml-base sgml-data subversion tcl tcl8.6 xml-core xmlto xsltproc \\\n       tk gettext gettext-base libapr1 libaprutil1 xvfb expect \\\n    && apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys 3FA7E0328081BFF6A14DA29AA6A19B38D3D831EF \\\n    && echo \"deb https://download.mono-project.com/repo/ubuntu stable-trusty main\" | tee /etc/apt/sources.list.d/mono-official-stable.list \\\n    && rm -rf /var/lib/apt/lists/* \\\n    && apt-get clean\n\n# Download and set up GitVersion\nRUN set -ex \\\n    && wget \"https://github.com/GitTools/GitVersion/releases/download/v${GITVERSION_VERSION}/GitVersion-bin-net40-v${GITVERSION_VERSION}.zip\" -O /tmp/GitVersion_${GITVERSION_VERSION}.zip \\\n    && mkdir -p /usr/local/GitVersion_${GITVERSION_VERSION} \\\n    && unzip /tmp/GitVersion_${GITVERSION_VERSION}.zip -d /usr/local/GitVersion_${GITVERSION_VERSION} \\\n    && rm /tmp/GitVersion_${GITVERSION_VERSION}.zip \\\n    && echo \"mono /usr/local/GitVersion_${GITVERSION_VERSION}/GitVersion.exe \\$@\" >> /usr/local/bin/gitversion \\\n    && chmod +x /usr/local/bin/gitversion\n# Install Docker\nRUN set -ex \\\n    && curl -fSL \"https://${DOCKER_BUCKET}/linux/static/${DOCKER_CHANNEL}/x86_64/docker-${DOCKER_VERSION}.tgz\" -o docker.tgz \\\n    && echo \"${DOCKER_SHA256}  *docker.tgz\" | sha256sum -c - \\\n    && tar --extract --file docker.tgz --strip-components 1  --directory /usr/local/bin/ \\\n    && rm docker.tgz \\\n    && docker -v \\\n# set up subuid/subgid so that \"--userns-remap=default\" works out-of-the-box\n    && addgroup dockremap \\\n    && useradd -g dockremap dockremap \\\n    && echo 'dockremap:165536:65536' >> /etc/subuid \\\n    && echo 'dockremap:165536:65536' >> /etc/subgid \\\n    && wget \"https://raw.githubusercontent.com/docker/docker/${DIND_COMMIT}/hack/dind\" -O /usr/local/bin/dind \\\n    && curl -f -L https://github.com/docker/compose/releases/download/${DOCKER_COMPOSE_VERSION}/docker-compose-Linux-x86_64 > /usr/local/bin/docker-compose \\\n    && chmod +x /usr/local/bin/dind /usr/local/bin/docker-compose \\\n# Ensure docker-compose works\n    && docker-compose version\n\n# https://docs.aws.amazon.com/eks/latest/userguide/install-aws-iam-authenticator.html https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ECS_CLI_installation.html\nRUN curl -f -sS -o /usr/local/bin/aws-iam-authenticator https://amazon-eks.s3-us-west-2.amazonaws.com/1.11.5/2018-12-06/bin/linux/amd64/aws-iam-authenticator \\\n && curl -f -sS -o /usr/local/bin/kubectl https://amazon-eks.s3-us-west-2.amazonaws.com/1.11.5/2018-12-06/bin/linux/amd64/kubectl \\\n && curl -f -sS -o /usr/local/bin/ecs-cli https://s3.amazonaws.com/amazon-ecs-cli/ecs-cli-linux-amd64-latest \\\n && chmod +x /usr/local/bin/kubectl /usr/local/bin/aws-iam-authenticator /usr/local/bin/ecs-cli\n\nRUN set -ex \\\n&& pip3 install --no-cache-dir awscli boto3\n\nVOLUME /var/lib/docker\n\n# Configure SSH\nCOPY ssh_config /root/.ssh/config\n\nCOPY dockerd-entrypoint.sh /usr/local/bin/\n\n#****************        RUBY     *********************************************\nENV RUBY_VERSION=\"2.6.0\" \\\n RUBY_DOWNLOAD_SHA256=\"f3c35b924a11c88ff111f0956ded3cdc12c90c04b72b266ac61076d3697fc072\" \\\n RUBYGEMS_VERSION=\"3.0.1\" \\\n BUNDLER_VERSION=\"2.0.1\" \\\n GEM_HOME=\"/usr/local/bundle\"\n\nENV BUNDLE_PATH=\"$GEM_HOME\" \\\n BUNDLE_BIN=\"$GEM_HOME/bin\" \\\n BUNDLE_SILENCE_ROOT_WARNING=1 \\\n BUNDLE_APP_CONFIG=\"$GEM_HOME\"\n\nENV PATH $BUNDLE_BIN:$PATH\n\nRUN mkdir -p /usr/local/etc \\\n\t&& { \\\n     echo 'install: --no-document'; \\\n     echo 'update: --no-document'; \\\n } >> /usr/local/etc/gemrc \\\n && apt-get update && apt-get install -y --no-install-recommends \\\n    bison libgdbm-dev ruby \\\n && wget \"https://cache.ruby-lang.org/pub/ruby/$RUBY_MAJOR/ruby-$RUBY_VERSION.tar.gz\" -O /tmp/ruby.tar.gz \\\n && echo \"$RUBY_DOWNLOAD_SHA256  /tmp/ruby.tar.gz\" | sha256sum -c - \\\n && mkdir -p /usr/src/ruby \\\n && tar -xzf /tmp/ruby.tar.gz -C /usr/src/ruby --strip-components=1 \\\n && cd /usr/src/ruby \\\n\t&& { \\\n          echo '#define ENABLE_PATH_CHECK 0'; \\\n          echo; \\\n          cat file.c; \\\n\t   } > file.c.new \\\n && mv file.c.new file.c \\\n && autoconf \\\n && ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --disable-install-doc \\\n && make -j\"$(nproc)\" \\\n && make install \\\n && apt-get purge -y --auto-remove bison libgdbm-dev ruby \\\n && cd / \\\n && rm -r /usr/src/ruby \\\n && gem update --system \"$RUBYGEMS_VERSION\" \\\n\t&& gem install bundler --version \"$BUNDLER_VERSION\" \\\n && mkdir -p \"$GEM_HOME\" \"$BUNDLE_BIN\" \\\n && chmod 777 \"$GEM_HOME\" \"$BUNDLE_BIN\" \\\n && rm -fr /var/lib/apt/lists/* /tmp/* /var/tmp/* && rm -rf /root/.gem;\n\n#****************   END RUBY     *********************************************\n\n\n#****************        PYTHON     *********************************************\nENV PATH=\"/usr/local/bin:$PATH\" \\\n    GPG_KEY=\"0D96DF4D4110E5C43FBFB17F2D347EA6AA65421D\" \\\n    PYTHON_PIP_VERSION=\"18.1\" \\\n    LC_ALL=C.UTF-8 \\\n    LANG=C.UTF-8\n\nRUN apt-get update && apt-get install -y --no-install-recommends \\\n        tcl-dev tk-dev \\\n    && rm -rf /var/lib/apt/lists/* \\\n    \\\n    && wget -O python.tar.xz \"https://www.python.org/ftp/python/${PYTHON_VERSION%%[a-z]*}/Python-$PYTHON_VERSION.tar.xz\" \\\n    && wget -O python.tar.xz.asc \"https://www.python.org/ftp/python/${PYTHON_VERSION%%[a-z]*}/Python-$PYTHON_VERSION.tar.xz.asc\" \\\n    && export GNUPGHOME=\"$(mktemp -d)\" \\\n    && ( gpg --batch --keyserver hkp://p80.ha.pool.sks-keyservers.net:80 --recv-keys \"$GPG_KEY\" \\\n        || gpg --batch --keyserver pgp.mit.edu --recv-keys \"$GPG_KEY\" \\\n        || gpg --batch --keyserver keyserver.ubuntu.com --recv-keys \"$GPG_KEY\") \\\n    && gpg --batch --verify python.tar.xz.asc python.tar.xz \\\n    && rm -r \"$GNUPGHOME\" python.tar.xz.asc \\\n    && mkdir -p /usr/src/python \\\n    && tar -xJC /usr/src/python --strip-components=1 -f python.tar.xz \\\n    && rm python.tar.xz \\\n\n    && cd /usr/src/python \\\n    && ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" \\\n        --enable-loadable-sqlite-extensions \\\n        --enable-shared \\\n    && make -j$(nproc) \\\n    && make install \\\n    && ldconfig \\\n\n# explicit path to \"pip3\" to ensure distribution-provided \"pip3\" cannot interfere\n    && if [ ! -e /usr/local/bin/pip3 ]; then : \\\n        && wget -O /tmp/get-pip.py 'https://bootstrap.pypa.io/get-pip.py' \\\n        && python3 /tmp/get-pip.py \"pip==$PYTHON_PIP_VERSION\" \\\n        && rm /tmp/get-pip.py \\\n    ; fi \\\n# we use \"--force-reinstall\" for the case where the version of pip we're trying to install is the same as the version bundled with Python\n# (\"Requirement already up-to-date: pip==8.1.2 in /usr/local/lib/python3.6/site-packages\")\n# https://github.com/docker-library/python/pull/143#issuecomment-241032683\n    && pip3 install --no-cache-dir --upgrade --force-reinstall \"pip==$PYTHON_PIP_VERSION\" \\\n        && pip install pipenv virtualenv --no-cache-dir \\\n# then we use \"pip list\" to ensure we don't have more than one pip version installed\n# https://github.com/docker-library/python/pull/100\n    && [ \"$(pip list |tac|tac| awk -F '[ ()]+' '$1 == \"pip\" { print $2; exit }')\" = \"$PYTHON_PIP_VERSION\" ] \\\n\n    && find /usr/local -depth \\\n        \\( \\\n            \\( -type d -a -name test -o -name tests \\) \\\n            -o \\\n            \\( -type f -a -name '*.pyc' -o -name '*.pyo' \\) \\\n        \\) -exec rm -rf '{}' + \\\n    && apt-get purge -y --auto-remove tcl-dev tk-dev \\\n    && rm -rf /usr/src/python ~/.cache \\\n    && cd /usr/local/bin \\\n    && { [ -e easy_install ] || ln -s easy_install-* easy_install; } \\\n    && ln -s idle3 idle \\\n    && ln -s pydoc3 pydoc \\\n    && ln -s python3 python \\\n    && ln -s python3-config python-config \\\n        && rm -fr /var/lib/apt/lists/* /tmp/* /var/tmp/*\n#****************      END PYTHON     *********************************************\n\n#****************      PHP     ****************************************************\n ENV GPG_KEYS CBAF69F173A0FEA4B537F470D66C9593118BCCB6 F38252826ACD957EF380D39F2F7956BC5DA04B5D\n ENV PHP_DOWNLOAD_SHA=\"cfe93e40be0350cd53c4a579f52fe5d8faf9c6db047f650a4566a2276bf33362\" \\\n     PHPPATH=\"/php\" \\\n     PHP_INI_DIR=\"/usr/local/etc/php\" \\\n     PHP_CFLAGS=\"-fstack-protector -fpic -fpie -O2\" \\\n     PHP_LDFLAGS=\"-Wl,-O1 -Wl,--hash-style=both -pie\"\n ENV PHP_SRC_DIR=\"$SRC_DIR/php\" \\\n     PHP_CPPFLAGS=\"$PHP_CFLAGS\" \\\n     PHP_URL=\"https://secure.php.net/get/php-$PHP_VERSION.tar.xz/from/this/mirror\" \\\n     PHP_ASC_URL=\"https://secure.php.net/get/php-$PHP_VERSION.tar.xz.asc/from/this/mirror\"\n RUN set -xe; \\\n     mkdir -p $SRC_DIR; \\\n     cd $SRC_DIR; \\\n     wget -O php.tar.xz \"$PHP_URL\"; \\\n     echo \"$PHP_DOWNLOAD_SHA  *php.tar.xz\" | sha256sum -c -; \\\n     wget -O php.tar.xz.asc \"$PHP_ASC_URL\"; \\\n     export GNUPGHOME=\"$(mktemp -d)\"; \\\n     for key in $GPG_KEYS; do \\\n         ( gpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys \"$key\" \\\n           || gpg --batch --keyserver pgp.mit.edu --recv-keys \"$key\" \\\n           || gpg --batch --keyserver keyserver.pgp.com --recv-keys \"$key\") \\\n     done; \\\n     gpg --batch --verify php.tar.xz.asc php.tar.xz; \\\n     rm -rf \"$GNUPGHOME\"; \\\n     set -eux; \\\n     savedAptMark=\"$(apt-mark showmanual)\"; \\\n     apt-get update; \\\n     apt-get install -y --no-install-recommends libedit-dev dpkg-dev libargon2-0-dev; \\\n     rm -rf /var/lib/apt/lists/*; \\\n     apt-get clean; \\\n     export \\\n         CFLAGS=\"$PHP_CFLAGS\" \\\n         CPPFLAGS=\"$PHP_CPPFLAGS\" \\\n         LDFLAGS=\"$PHP_LDFLAGS\" \\\n     ; \\\n     mkdir -p $PHP_SRC_DIR; \\\n     tar -Jxf $SRC_DIR/php.tar.xz -C $PHP_SRC_DIR --strip-components=1; \\\n     cd $PHP_SRC_DIR; \\\n     gnuArch=\"$(dpkg-architecture -qDEB_BUILD_GNU_TYPE)\"; \\\n     debMultiarch=\"$(dpkg-architecture -qDEB_BUILD_MULTIARCH)\"; \\\n     if [ ! -d /usr/include/curl ]; then \\\n         ln -sT \"/usr/include/$debMultiarch/curl\" /usr/local/include/curl; \\\n     fi; \\\n     ./configure \\\n         --build=\"$gnuArch\" \\\n         --with-config-file-path=\"$PHP_INI_DIR\" \\\n         --with-config-file-scan-dir=\"$PHP_INI_DIR/conf.d\" \\\n         --disable-cgi \\\n     # --enable-ftp is included here because ftp_ssl_connect() needs ftp to be compiled statically (see https://github.com/docker-library/php/issues/236)\n         --enable-ftp \\\n     # --enable-mbstring is included here because otherwise there's no way to get pecl to use it properly (see https://github.com/docker-library/php/issues/195)\n         --enable-mbstring \\\n     # --enable-mysqlnd is included here because it's harder to compile after the fact than extensions are (since it's a plugin for several extensions, not an extension in itself)\n         --enable-mysqlnd \\\n         --enable-sockets \\\n         --enable-pcntl \\\n     # https://wiki.php.net/rfc/argon2_password_hash (7.2+)\n         --with-password-argon2 \\\n         --with-curl \\\n         --with-pdo-pgsql \\\n         --with-pdo-mysql \\\n         --with-libedit \\\n         --with-openssl \\\n         --with-zlib \\\n     $(test \"$gnuArch\" = 's390x-linux-gnu' && echo '--without-pcre-jit') \\\n         --with-libdir=\"lib/$debMultiarch\" \\\n     ${PHP_EXTRA_CONFIGURE_ARGS:-} \\\n     ; \\\n     make -j \"$(nproc)\"; \\\n     make install; \\\n     find /usr/local/bin /usr/local/sbin -type f -executable -exec strip --strip-all '{}' + || true; \\\n     make clean; \\\n     cd /; \\\n     rm -rf $PHP_SRC_DIR; \\\n     rm $SRC_DIR/php.tar.xz; \\\n     apt-mark auto '.*' > /dev/null; \\\n     [ -z \"$savedAptMark\" ] || apt-mark manual $savedAptMark; \\\n     find /usr/local -type f -executable -exec ldd '{}' ';' \\\n         | awk '/=>/ { print $(NF-1) }' \\\n         | sort -u \\\n         | xargs -r dpkg-query --search \\\n         | cut -d: -f1 \\\n         | sort -u \\\n         | xargs -r apt-mark manual \\\n     ; \\\n     apt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false; \\\n     php --version; \\\n     pecl update-channels; \\\n     rm -rf /tmp/pear ~/.pearrc; \\\n     mkdir \"$PHP_INI_DIR\"; \\\n     mkdir \"$PHP_INI_DIR/conf.d\"; \\\n     touch \"$PHP_INI_DIR/conf.d/memory.ini\" \\\n     && echo \"memory_limit = 1G;\" >> \"$PHP_INI_DIR/conf.d/memory.ini\";\n\n ENV PATH=\"$PHPPATH/bin:/usr/local/php/bin:$PATH\"\n\n # Install Composer globally\n RUN curl -f -sS https://getcomposer.org/installer | php -- --install-dir=/usr/bin --filename=composer\n#****************      END PHP     ****************************************************\n\n#****************      NODEJS     ****************************************************\n\n ENV N_SRC_DIR=\"$SRC_DIR/n\"\n\n RUN git clone https://github.com/tj/n $N_SRC_DIR \\\n     && cd $N_SRC_DIR && make install \\\n     && n $NODE_8_VERSION && npm install --save-dev -g grunt && npm install --save-dev -g grunt-cli && npm install --save-dev -g webpack \\\n     && n $NODE_VERSION && npm install --save-dev -g grunt && npm install --save-dev -g grunt-cli && npm install --save-dev -g webpack \\\n     && curl -f -sS https://dl.yarnpkg.com/debian/pubkey.gpg | apt-key add - \\\n     && echo \"deb https://dl.yarnpkg.com/debian/ stable main\" | tee /etc/apt/sources.list.d/yarn.list \\\n     && apt-get update && apt-get install -y --no-install-recommends yarn \\\n     && cd / && rm -rf $N_SRC_DIR; npm cache clean --force; rm -rf /var/lib/apt/lists/*;\n\n#****************      END NODEJS     ****************************************************\n\n#****************      JAVA     ****************************************************\n# Copy install tools\nCOPY tools /opt/tools\n\nENV JAVA_HOME=\"/usr/lib/jvm/java-8-openjdk-amd64\" \\\n    JDK_HOME=\"/usr/lib/jvm/java-8-openjdk-amd64\" \\\n    JRE_HOME=\"/usr/lib/jvm/java-8-openjdk-amd64/jre\" \\\n    ANT_VERSION=1.10.5 \\\n    MAVEN_HOME=\"/opt/maven\" \\\n    MAVEN_VERSION=3.6.0 \\\n    MAVEN_CONFIG=\"/root/.m2\" \\\n    INSTALLED_GRADLE_VERSIONS=\"4.10.2 5.2.1\" \\\n    GRADLE_VERSION=5.2.1 \\\n    SBT_VERSION=1.2.8 \\\n    JDK_VERSION=11.0.2 \\\n    JDK_VERSION_TAG=9 \\\n    ANDROID_HOME=\"/usr/local/android-sdk-linux\" \\\n    GRADLE_PATH=\"$SRC_DIR/gradle\" \\\n    ANDROID_SDK_MANAGER_VER=\"4333796\" \\\n    ANDROID_SDK_BUILD_TOOLS=\"build-tools;28.0.3\" \\\n    ANDROID_SDK_PLATFORM_TOOLS=\"platforms;android-28\" \\\n    ANDROID_SDK_EXTRAS=\"extras;android;m2repository extras;google;m2repository extras;google;google_play_services\" \\   \n    JDK_DOWNLOAD_SHA256=\"99be79935354f5c0df1ad293620ea36d13f48ec3ea870c838f20c504c9668b57\" \\\n    ANT_DOWNLOAD_SHA512=\"acfa34c4f820d882f26ec67cf885d7dd484d534a7e99b33b05779e03da61849610328d2dbb4bfaa201e1ae75a0f0901e9c2bb793ed7bd76d3e4497e6ca5de371\" \\\n    MAVEN_DOWNLOAD_SHA512=\"fae9c12b570c3ba18116a4e26ea524b29f7279c17cbaadc3326ca72927368924d9131d11b9e851b8dc9162228b6fdea955446be41207a5cfc61283dd8a561d2f\" \\\n    GRADLE_DOWNLOAD_SHA256=\"748c33ff8d216736723be4037085b8dc342c6a0f309081acf682c9803e407357\" \\\n    ANDROID_SDK_MANAGER_SHA256=\"92ffee5a1d98d856634e8b71132e8a95d96c83a63fde1099be3d86df3106def9\"\n\nENV JDK_DOWNLOAD_TAR=\"openjdk-${JDK_VERSION}_linux-x64_bin.tar.gz\"\n\nENV PATH=\"${PATH}:/opt/tools:${ANDROID_HOME}/tools:${ANDROID_HOME}/tools/bin:${ANDROID_HOME}/platform-tools\"\n\nRUN set -ex \\\n    && apt-get update \\\n    && apt-get install --no-install-recommends -y software-properties-common \\\n    # Install OpenJDK 8\n    && add-apt-repository -y ppa:openjdk-r/ppa \\\n    && apt-get update \\\n    && apt-get install --no-install-recommends -y openjdk-8-jdk \\\n    && apt-get install -y --no-install-recommends ca-certificates-java \\\n    # Ensure Java cacerts symlink points to valid location\n    && update-ca-certificates -f \\\n    && dpkg --add-architecture i386 \\\n    && apt-get update \\\n    && apt-get install --no-install-recommends -y --force-yes libc6-i386 \\\n       lib32stdc++6 lib32gcc1 lib32ncurses5 \\\n       lib32z1 libqt5widgets5 \\\n    # Install Android SDK manager\n    && wget \"https://dl.google.com/android/repository/sdk-tools-linux-${ANDROID_SDK_MANAGER_VER}.zip\" -O /tmp/android-sdkmanager.zip \\\n    && echo \"${ANDROID_SDK_MANAGER_SHA256}  /tmp/android-sdkmanager.zip\" | sha256sum -c - \\\n    && mkdir -p ${ANDROID_HOME} \\\n    && unzip /tmp/android-sdkmanager.zip -d ${ANDROID_HOME} \\\n    && chown -R root.root ${ANDROID_HOME} \\\n    && ln -s ${ANDROID_HOME}/tools/android /usr/bin/android \\\n    # Install Android SDK\n    && android-accept-licenses.sh \"sdkmanager --verbose platform-tools ${ANDROID_SDK_BUILD_TOOLS} ${ANDROID_SDK_PLATFORM_TOOLS} ${ANDROID_SDK_EXTRAS}\" \\\n    && android-accept-licenses.sh \"sdkmanager --licenses\" \\\n    && apt-get install --no-install-recommends -y python-setuptools \\\n    # Install Ant\n    && curl -f -LSso /var/tmp/apache-ant-$ANT_VERSION-bin.tar.gz https://archive.apache.org/dist/ant/binaries/apache-ant-$ANT_VERSION-bin.tar.gz \\\n    && echo \"$ANT_DOWNLOAD_SHA512 /var/tmp/apache-ant-$ANT_VERSION-bin.tar.gz\" | sha512sum -c - \\\n    && tar -xzf /var/tmp/apache-ant-$ANT_VERSION-bin.tar.gz -C /opt \\\n    && update-alternatives --install /usr/bin/ant ant /opt/apache-ant-$ANT_VERSION/bin/ant 10000 \\\n    # Install Maven\n    && mkdir -p $MAVEN_HOME \\\n    && curl -f -LSso /var/tmp/apache-maven-$MAVEN_VERSION-bin.tar.gz https://apache.org/dist/maven/maven-3/$MAVEN_VERSION/binaries/apache-maven-$MAVEN_VERSION-bin.tar.gz \\\n    && echo \"$MAVEN_DOWNLOAD_SHA512 /var/tmp/apache-maven-$MAVEN_VERSION-bin.tar.gz\" | sha512sum -c - \\\n    && tar xzvf /var/tmp/apache-maven-$MAVEN_VERSION-bin.tar.gz -C $MAVEN_HOME --strip-components=1 \\\n    && update-alternatives --install /usr/bin/mvn mvn /opt/maven/bin/mvn 10000 \\\n    && mkdir -p $MAVEN_CONFIG \\\n    # Install Gradle\n    && mkdir -p $GRADLE_PATH \\\n    && for version in $INSTALLED_GRADLE_VERSIONS; do { \\\n       wget \"https://services.gradle.org/distributions/gradle-$version-all.zip\" -O \"$GRADLE_PATH/gradle-$version-all.zip\" \\\n       && unzip \"$GRADLE_PATH/gradle-$version-all.zip\" -d /usr/local \\\n       && mkdir \"/tmp/gradle-$version\" \\\n       && \"/usr/local/gradle-$version/bin/gradle\" -p \"/tmp/gradle-$version\" wrapper \\\n       # Android Studio uses the \"-all\" distribution for it's wrapper script.\n       && perl -pi -e \"s/gradle-$version-bin.zip/gradle-$version-all.zip/\" \"/tmp/gradle-$version/gradle/wrapper/gradle-wrapper.properties\" \\\n       && \"/tmp/gradle-$version/gradlew\" -p \"/tmp/gradle-$version\" init \\\n       && rm -rf \"/tmp/gradle-$version\" \\\n       && if [ \"$version\" != \"$GRADLE_VERSION\" ]; then rm -rf \"/usr/local/gradle-$version\"; fi; \\\n     }; done \\\n    # Install default GRADLE_VERSION to path\n      && ln -s /usr/local/gradle-$GRADLE_VERSION/bin/gradle /usr/bin/gradle \\\n      && rm -rf $GRADLE_PATH \\\n    # Install SBT\n    && echo \"deb https://dl.bintray.com/sbt/debian /\" | tee -a /etc/apt/sources.list.d/sbt.list \\\n    && apt-get install -y --no-install-recommends apt-transport-https \\\n    && apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv 2EE0EA64E40A89B84B2DF73499E82A75642AC823 \\\n    && apt-get update \\\n    && apt-get install -y --no-install-recommends sbt=$SBT_VERSION \\\n    # Cleanup\n    && rm -fr /var/lib/apt/lists/* /tmp/* /var/tmp/* \\\n    && apt-get clean && rm /var/tmp/apache-ant-$ANT_VERSION-bin.tar.gz\n#****************     END JAVA     ****************************************************\n\n#****************     GO     **********************************************************\nENV GOLANG_DOWNLOAD_SHA256=\"fb26c30e6a04ad937bbc657a1b5bba92f80096af1e8ee6da6430c045a8db3a5b\" \\\n    GOPATH=\"/go\" \\\n    DEP_VERSION=\"0.5.0\" \\\n    DEP_BINARY=\"dep-linux-amd64\"\n\nRUN set -ex \\\n    && mkdir -p \"$GOPATH/src\" \"$GOPATH/bin\" \\\n    && chmod -R 777 \"$GOPATH\" \\\n    && apt-get update && apt-get install -y --no-install-recommends \\\n        pkg-config \\\n    && apt-get clean \\\n    && wget \"https://storage.googleapis.com/golang/go$GOLANG_VERSION.linux-amd64.tar.gz\" -O /tmp/golang.tar.gz \\\n    && echo \"$GOLANG_DOWNLOAD_SHA256  /tmp/golang.tar.gz\" | sha256sum -c - \\\n    && tar -xzf /tmp/golang.tar.gz -C /usr/local \\\n    && rm -fr /var/lib/apt/lists/* /tmp/* /var/tmp/* \\\n    && wget \"https://github.com/golang/dep/releases/download/v$DEP_VERSION/$DEP_BINARY\" -O \"$GOPATH/bin/dep\" \\\n    && chmod +x \"$GOPATH/bin/dep\" && rm /tmp/golang.tar.gz\n\nENV PATH=\"$GOPATH/bin:/usr/local/go/bin:$PATH\"\n#****************     END GO     **********************************************************\n\n#****************     .NET-CORE     *******************************************************\nRUN set -ex \\\n    && apt-get update \\\n    && apt-get install -y --no-install-recommends \\\n        libc6 \\\n        libgcc1 \\\n        libgssapi-krb5-2 \\\n        liblttng-ust0 \\\n        libstdc++6 \\\n        zlib1g \\\n        software-properties-common \\\n    && add-apt-repository ppa:ubuntu-toolchain-r/test -y \\\n    && apt-get update \\   \n    && rm -rf /var/lib/apt/lists/*\n\n# Install .NET Core SDK\nENV DOTNET_SDK_DOWNLOAD_URL https://dotnetcli.blob.core.windows.net/dotnet/Sdk/$DOTNET_SDK_VERSION/dotnet-sdk-$DOTNET_SDK_VERSION-linux-x64.tar.gz\nENV DOTNET_SDK_DOWNLOAD_SHA d7ed76a0efe2b07ac0bb3af611072b3b99f646200759cb5905a7944b1687f34d42b4b74a3a5c77dbe251f769c6c3878fc30a8d0f8f44e44bf4c7116699f3f948\n\nRUN set -ex \\\n    && curl -f -SL $DOTNET_SDK_DOWNLOAD_URL --output dotnet.tar.gz \\\n    && echo \"$DOTNET_SDK_DOWNLOAD_SHA dotnet.tar.gz\" | sha512sum -c - \\\n    && mkdir -p /usr/share/dotnet \\\n    && tar -zxf dotnet.tar.gz -C /usr/share/dotnet \\\n    && rm dotnet.tar.gz \\\n    && ln -s /usr/share/dotnet/dotnet /usr/bin/dotnet\n\n# Add .NET Core Global Tools install folder to PATH\nENV PATH \"~/.dotnet/tools/:$PATH\"\n\n# Trigger the population of the local package cache\nENV NUGET_XMLDOC_MODE skip\nRUN set -ex \\\n    && mkdir warmup \\\n    && cd warmup \\\n    && dotnet new \\\n    && cd .. \\\n    && rm -rf warmup \\\n    && rm -rf /tmp/NuGetScratch\n\n# Install Powershell Core\n# See instructions at https://docs.microsoft.com/en-us/powershell/scripting/setup/installing-powershell-core-on-linux\nENV POWERSHELL_VERSION 6.1.1\nENV POWERSHELL_DOWNLOAD_URL https://github.com/PowerShell/PowerShell/releases/download/v$POWERSHELL_VERSION/powershell-$POWERSHELL_VERSION-linux-x64.tar.gz\nENV POWERSHELL_DOWNLOAD_SHA 822CB473A5B3D076584181BB5D308035A9FBD079A68762E9E6C0D7543E05B513\n\nRUN set -ex \\\n    && curl -f -SL $POWERSHELL_DOWNLOAD_URL --output powershell.tar.gz \\\n    && echo \"$POWERSHELL_DOWNLOAD_SHA  powershell.tar.gz\" | sha256sum -c - \\\n    && mkdir -p /opt/microsoft/powershell/$POWERSHELL_VERSION \\\n    && tar zxf powershell.tar.gz -C /opt/microsoft/powershell/$POWERSHELL_VERSION \\\n    && rm powershell.tar.gz \\\n    && ln -s /opt/microsoft/powershell/$POWERSHELL_VERSION/pwsh /usr/bin/pwsh\n#****************     END .NET-CORE     *******************************************************\n\n#****************    HEADLESS BROWSERS     *******************************************************\nRUN set -ex \\\n    && apt-add-repository \"deb http://archive.canonical.com/ubuntu $(lsb_release -sc) partner\" \\\n    && apt-add-repository ppa:malteworld/ppa && apt-get update \\\n    && apt-get install --no-install-recommends -y libgtk-3-0 libglib2.0-0 libdbus-glib-1-2 libdbus-1-3 libasound2 \\\n    && wget -O ~/FirefoxSetup.tar.bz2 \"https://download.mozilla.org/?product=firefox-latest&os=linux64\" \\\n    && tar xjf ~/FirefoxSetup.tar.bz2 -C /opt/ \\\n    && ln -s /opt/firefox/firefox /usr/local/bin/firefox \\\n    && rm ~/FirefoxSetup.tar.bz2 \\\n    && firefox --version && rm -rf /var/lib/apt/lists/*;\n\n# Install Chrome\n\nRUN set -ex \\\n    && curl --silent --show-error --location --fail --retry 3 --output /tmp/google-chrome-stable_current_amd64.deb https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb \\\n    && (dpkg -i /tmp/google-chrome-stable_current_amd64.deb || apt-get -fy install) \\\n    && rm -rf /tmp/google-chrome-stable_current_amd64.deb \\\n    && sed -i 's|HERE/chrome\"|HERE/chrome\" --disable-setuid-sandbox --no-sandbox|g' \"/opt/google/chrome/google-chrome\" \\\n    && google-chrome --version\n"
}