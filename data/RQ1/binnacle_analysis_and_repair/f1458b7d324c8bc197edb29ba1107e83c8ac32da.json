{
  "startTime": 1674240873534,
  "endTime": 1674240873674,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 30,
        "lineEnd": 30,
        "columnStart": 14,
        "columnEnd": 87
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 31,
        "lineEnd": 31,
        "columnStart": 5,
        "columnEnd": 92
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM alpine:3.9\n\nENV KAFKA_VERSION 2.1.1\nENV SCALA_VERSION 2.12\nENV DOCKERIZE_VERSION v0.6.1\n\nENV CP_VERSION 5.2.0\nENV KAFKA_ZOOKEEPER_CONNECT zookeeper:2181\nENV KAFKA_BOOTSTRAP_SERVERS kafka:9092\nENV KAFKA_REPLICATION_FACTOR 1\nENV KAFKA_SCHEMA_REGISTRY_URL http://kafka-schema-registry:8081\nENV KAFKA_CONNECT_URL http://kafka-connect:8083\nENV PARITY_WS_URL ws://parity:8546\nENV POSTGRES_JDBC_URL jdbc:postgresql://timescale:5432/ethvm_dev\nENV POSTGRES_USER postgres\nENV POSTGRES_PASSWORD 1234\n\nLABEL name=\"kafka\" version=${KAFKA_VERSION}\n\n# Install dependencies\n\nRUN apk add --no-cache openjdk8-jre bash coreutils su-exec openssl jq curl git postgresql-client tini && \\\n    wget https://github.com/jwilder/dockerize/releases/download/$DOCKERIZE_VERSION/dockerize-alpine-linux-amd64-$DOCKERIZE_VERSION.tar.gz \\\n    && tar -C /usr/local/bin -xzvf dockerize-alpine-linux-amd64-$DOCKERIZE_VERSION.tar.gz \\\n    && rm dockerize-alpine-linux-amd64-$DOCKERIZE_VERSION.tar.gz\n\n# Install kafka binaries\n\nRUN apk add --no-cache -t .build-deps curl ca-certificates jq \\\n  && mkdir -p /opt \\\n  && mirror=$( curl -f --stderr /dev/null https://www.apache.org/dyn/closer.cgi\\?as_json\\=1 | jq -r '.preferred') \\\n  && curl -f -sSL \"${mirror}kafka/${KAFKA_VERSION}/kafka_${SCALA_VERSION}-${KAFKA_VERSION}.tgz\" \\\n  | tar -xzf - -C /opt \\\n  && mv /opt/kafka_${SCALA_VERSION}-${KAFKA_VERSION} /opt/kafka \\\n  && rm -rf /tmp/* \\\n  && apk del --purge .build-deps\n\nCOPY opt/ethvm /opt/ethvm\n\n# setup path\nENV PATH /sbin:/opt/kafka/bin/:/opt/ethvm/bin/:$PATH\n\n# copy entrypoint\nCOPY docker-entrypoint.sh /docker-entrypoint.sh\nRUN chmod +x /docker-entrypoint.sh\n\nENTRYPOINT [\"/sbin/tini\", \"--\", \"/docker-entrypoint.sh\"]\n"
}