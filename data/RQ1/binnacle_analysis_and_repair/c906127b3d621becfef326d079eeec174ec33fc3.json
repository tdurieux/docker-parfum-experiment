{
  "startTime": 1674235733024,
  "endTime": 1674235733208,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 8,
        "lineEnd": 9,
        "columnStart": 4,
        "columnEnd": 30
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 14,
        "lineEnd": 14,
        "columnStart": 4,
        "columnEnd": 59
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 20,
        "lineEnd": 20,
        "columnStart": 36,
        "columnEnd": 159
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 7,
        "lineEnd": 7,
        "columnStart": 4,
        "columnEnd": 50
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 16,
        "lineEnd": 16,
        "columnStart": 4,
        "columnEnd": 15
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM docker:17.05.0-ce-dind\n\nRUN apk add --no-cache git tmux py2-pip apache2-utils vim build-base gettext-dev curl bash-completion bash util-linux jq\n\nENV COMPOSE_VERSION=1.12.0\nENV MACHINE_VERSION=v0.10.0\n# Install Compose and Machine\nRUN pip install --no-cache-dir docker-compose==${COMPOSE_VERSION}\nRUN curl -f -L https://github.com/docker/machine/releases/download/${MACHINE_VERSION}/docker-machine-Linux-x86_64 \\\n    -o /usr/bin/docker-machine && chmod +x /usr/bin/docker-machine\n\n# Compile and install httping\n# (used in orchestration workshop, and very useful anyway)\nRUN mkdir -p /opt && cd /opt && \\\n    curl -f https://www.vanheusden.com/httping/httping-2.5.tgz | \\\n    tar -zxf- && cd httping-2.5 && \\\n    ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" && make install LDFLAGS=-lintl && \\\n    rm -rf httping-2.5\n\n# Add bash completion\nRUN mkdir /etc/bash_completion.d && curl -f https://raw.githubusercontent.com/docker/docker/master/contrib/completion/bash/docker -o /etc/bash_completion.d/docker\n\n# Replace modprobe with a no-op to get rid of spurious warnings\n# (note: we can't just symlink to /bin/true because it might be busybox)\nRUN rm /sbin/modprobe && echo '#!/bin/true' >/sbin/modprobe && chmod +x /sbin/modprobe\n\n# Install a nice vimrc file and prompt (by soulshake)\nCOPY [\"docker-prompt\",\"/usr/local/bin/\"]\nCOPY [\".vimrc\",\".profile\", \".inputrc\", \".gitconfig\", \"./root/\"]\nCOPY [\"motd\", \"/etc/motd\"]\nCOPY [\"daemon.json\", \"/etc/docker/\"]\n\n# ARG docker_storage_driver=overlay2\nARG docker_storage_driver=vfs\n\nENV DOCKER_STORAGE_DRIVER=$docker_storage_driver\n\n# Move to our home\nWORKDIR /root\n\n# Add contact info\nRUN echo \"Happy to contact me@bingohuang.com\" >> /etc/issue\n\n# Remove IPv6 alias for localhost and start docker in the background ...\nCMD cat /etc/hosts >/etc/hosts.bak && \\\n    sed 's/^::1.*//' /etc/hosts.bak > /etc/hosts && \\\n    sed -i \"s/\\DOCKER_STORAGE_DRIVER/$DOCKER_STORAGE_DRIVER/\" /etc/docker/daemon.json && \\\n    sed -i \"s/\\PWD_IP_ADDRESS/$PWD_IP_ADDRESS/\" /etc/docker/daemon.json && \\\n    umount /var/lib/docker && mount -t securityfs none /sys/kernel/security && \\\n    dockerd &>/docker.log & \\\n    while true ; do script -q -c \"/bin/bash -l\" /dev/null ; done\n# ... and then put a shell in the foreground, restarting it if it exits\n"
}