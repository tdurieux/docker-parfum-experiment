{
  "startTime": 1674245793785,
  "endTime": 1674245794265,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 251,
        "lineEnd": 251,
        "columnStart": 4,
        "columnEnd": 103
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 198,
        "lineEnd": 198,
        "columnStart": 4,
        "columnEnd": 31
      }
    },
    {
      "rule": "apkAddUseNoCache",
      "position": {
        "lineStart": 237,
        "lineEnd": 245,
        "columnStart": 4,
        "columnEnd": 16
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "ARG KERNEL_IMAGE\nARG TOOLCHAIN_IMAGE\nARG ROOTFS_IMAGE\nARG INITRAMFS_IMAGE\n\n# The proto target generates code from protobuf service definitions.\n\nARG TOOLCHAIN_IMAGE\nFROM ${TOOLCHAIN_IMAGE} AS proto-build\nWORKDIR /osd\nCOPY ./internal/app/osd/proto ./proto\nRUN protoc -I/usr/local/include -I./proto --go_out=plugins=grpc:proto proto/api.proto\nWORKDIR /trustd\nCOPY ./internal/app/trustd/proto ./proto\nRUN protoc -I/usr/local/include -I./proto --go_out=plugins=grpc:proto proto/api.proto\nWORKDIR /init\nCOPY ./internal/app/init/proto ./proto\nRUN protoc -I/usr/local/include -I./proto --go_out=plugins=grpc:proto proto/api.proto\n\nFROM scratch AS proto\nCOPY --from=proto-build /osd/proto/api.pb.go /internal/app/osd/proto/\nCOPY --from=proto-build /trustd/proto/api.pb.go /internal/app/trustd/proto/\nCOPY --from=proto-build /init/proto/api.pb.go /internal/app/init/proto/\n\n# The base provides a common image to build the Talos source code.\n\nARG TOOLCHAIN_IMAGE\nFROM ${TOOLCHAIN_IMAGE} AS base\nENV GOPATH /toolchain/gopath\nRUN mkdir -p ${GOPATH}\nENV GO111MODULE on\nENV GOPROXY https://proxy.golang.org\nENV CGO_ENABLED 0\nWORKDIR /src\nCOPY ./go.mod ./\nCOPY ./go.sum ./\nRUN go mod download\nRUN go mod verify\nCOPY ./cmd ./cmd\nCOPY ./pkg ./pkg\nCOPY ./internal ./internal\nCOPY --from=proto /internal/app ./internal/app\nRUN go list -mod=readonly all >/dev/null\nRUN ! go mod tidy -v 2>&1 | grep .\n\n# The osd target builds the osd binary.\n\nFROM base AS osd-build\nARG SHA\nARG TAG\nARG VERSION_PKG=\"github.com/talos-systems/talos/internal/pkg/version\"\nWORKDIR /src/internal/app/osd\nRUN go build -a -ldflags \"-s -w -X ${VERSION_PKG}.Name=Server -X ${VERSION_PKG}.SHA=${SHA} -X ${VERSION_PKG}.Tag=${TAG}\" -o /osd\nRUN chmod +x /osd\n\nFROM scratch AS osd\nCOPY --from=osd-build /osd /osd\nENTRYPOINT [\"/osd\"]\n\n# The osctl targets build the osctl binaries.\n\nFROM base AS osctl-linux-amd64-build\nARG SHA\nARG TAG\nARG VERSION_PKG=\"github.com/talos-systems/talos/internal/pkg/version\"\nWORKDIR /src/cmd/osctl\nRUN GOOS=linux GOARCH=amd64 go build -a -ldflags \"-s -w -linkmode external -extldflags \\\"-static\\\" -X ${VERSION_PKG}.Name=Client -X ${VERSION_PKG}.SHA=${SHA} -X ${VERSION_PKG}.Tag=${TAG}\" -o /osctl-linux-amd64\nRUN chmod +x /osctl-linux-amd64\n\nFROM scratch AS osctl-linux-amd64\nCOPY --from=osctl-linux-amd64-build /osctl-linux-amd64 /osctl-linux-amd64\n\nFROM base AS osctl-darwin-amd64-build\nARG SHA\nARG TAG\nARG VERSION_PKG=\"github.com/talos-systems/talos/internal/pkg/version\"\nWORKDIR /src/cmd/osctl\nRUN GOOS=darwin GOARCH=amd64 go build -a -ldflags \"-s -w -X ${VERSION_PKG}.Name=Client -X ${VERSION_PKG}.SHA=${SHA} -X ${VERSION_PKG}.Tag=${TAG}\" -o /osctl-darwin-amd64\nRUN chmod +x /osctl-darwin-amd64\n\nFROM scratch AS osctl-darwin-amd64\nCOPY --from=osctl-darwin-amd64-build /osctl-darwin-amd64 /osctl-darwin-amd64\n\n# The trustd target builds the trustd image.\n\nFROM base AS trustd-build\nARG SHA\nARG TAG\nARG VERSION_PKG=\"github.com/talos-systems/talos/internal/pkg/version\"\nWORKDIR /src/internal/app/trustd\nRUN go build -a -ldflags \"-s -w -X ${VERSION_PKG}.Name=Server -X ${VERSION_PKG}.SHA=${SHA} -X ${VERSION_PKG}.Tag=${TAG}\" -o /trustd\nRUN chmod +x /trustd\n\nFROM scratch AS trustd\nCOPY --from=trustd-build /trustd /trustd\nENTRYPOINT [\"/trustd\"]\n\n# The proxyd target builds the proxyd image.\n\nFROM base AS proxyd-build\nARG SHA\nARG TAG\nARG VERSION_PKG=\"github.com/talos-systems/talos/internal/pkg/version\"\nWORKDIR /src/internal/app/proxyd\nRUN go build -a -ldflags \"-s -w -X ${VERSION_PKG}.Name=Server -X ${VERSION_PKG}.SHA=${SHA} -X ${VERSION_PKG}.Tag=${TAG}\" -o /proxyd\nRUN chmod +x /proxyd\n\nFROM scratch AS proxyd\nCOPY --from=proxyd-build /proxyd /proxyd\nENTRYPOINT [\"/proxyd\"]\n\n# The ntpd target builds the ntpd image.\n\nFROM base AS ntpd-build\nARG SHA\nARG TAG\nARG VERSION_PKG=\"github.com/talos-systems/talos/internal/pkg/version\"\nWORKDIR /src/internal/app/ntpd\nRUN go build -a -ldflags \"-s -w -X ${VERSION_PKG}.Name=Server -X ${VERSION_PKG}.SHA=${SHA} -X ${VERSION_PKG}.Tag=${TAG}\" -o /ntpd\nRUN chmod +x /ntpd\n\nFROM scratch AS ntpd\nCOPY --from=ntpd-build /ntpd /ntpd\nENTRYPOINT [\"/ntpd\"]\n\n# The udevd target builds the udevd image.\n\nFROM base AS udevd-build\nARG SHA\nARG TAG\nARG VERSION_PKG=\"github.com/talos-systems/talos/internal/pkg/version\"\nWORKDIR /src/internal/app/udevd\nRUN go build -a -ldflags \"-s -w -X ${VERSION_PKG}.Name=Server -X ${VERSION_PKG}.SHA=${SHA} -X ${VERSION_PKG}.Tag=${TAG}\" -o /udevd\nRUN chmod +x /udevd\n\nFROM scratch AS udevd\nCOPY --from=udevd-build /udevd /udevd\nENTRYPOINT [\"/udevd\"]\n\n# The binaries target allows for parallel compilation of all binaries.\n\nFROM scratch AS binaries-build\nCOPY --from=init / /\nCOPY --from=osd / /\nCOPY --from=trustd / /\nCOPY --from=proxyd / /\nCOPY --from=ntpd / /\nCOPY --from=udevd / /\nCOPY --from=osctl-linux-amd64 / /\nCOPY --from=osctl-darwin-amd64 / /\n\nFROM scratch AS binaries\nCOPY --from=binaries-build /osctl-linux-amd64 /osctl-linux-amd64\nCOPY --from=binaries-build /osctl-darwin-amd64 /osctl-darwin-amd64\n\n# The kernel target is the linux kernel.\n\nARG KERNEL_IMAGE\nFROM ${KERNEL_IMAGE} as kernel\n\n# The initramfs target creates the compressed initramfs.\n\nFROM base AS init-build\nARG SHA\nARG TAG\nARG VERSION_PKG=\"github.com/talos-systems/talos/internal/pkg/version\"\nWORKDIR /src/internal/app/init\nRUN go build -a -ldflags \"-s -w -X ${VERSION_PKG}.Name=Talos -X ${VERSION_PKG}.SHA=${SHA} -X ${VERSION_PKG}.Tag=${TAG}\" -o /init\nRUN chmod +x /init\n\nFROM scratch AS init\nCOPY --from=init-build /init /init\n\nARG INITRAMFS_IMAGE\nFROM ${INITRAMFS_IMAGE} AS initramfs-build\nWORKDIR /\nCOPY --from=init-build /init /init\n\nARG TOOLCHAIN_IMAGE\nFROM ${TOOLCHAIN_IMAGE} AS initramfs-archive\nCOPY --from=initramfs-build / /initramfs\nWORKDIR /initramfs\nRUN set -o pipefail && find . 2>/dev/null | cpio -H newc -o | xz -v -C crc32 -0 -e -T 0 -z >/initramfs.xz\n\nFROM scratch AS initramfs\nCOPY --from=initramfs-archive /initramfs.xz /initramfs.xz\n\n# The rootfs target creates the root filesystem archive.\n\nARG ROOTFS_IMAGE\nFROM ${ROOTFS_IMAGE} AS rootfs-build\nCOPY --from=kernel /modules /lib/modules\nCOPY images /usr/images\n\nARG TOOLCHAIN_IMAGE\nFROM ${TOOLCHAIN_IMAGE} AS rootfs-archive\nCOPY --from=rootfs-build / /rootfs\nWORKDIR /rootfs\nRUN tar -cvpzf /rootfs.tar.gz . && rm /rootfs.tar.gz\n\nFROM scratch AS rootfs\nCOPY --from=rootfs-archive /rootfs.tar.gz /rootfs.tar.gz\n\n# The test target performs tests on the source code.\n\nFROM base AS test\nCOPY --from=rootfs-build / /rootfs\nENV PATH /rootfs/bin:$PATH\nCOPY hack/golang/test.sh /bin\n\n# The lint target performs linting on the codebase.\n\nFROM base AS lint\nRUN curl -sfL https://install.goreleaser.com/github.com/golangci/golangci-lint.sh | bash -s -- -b /toolchain/bin v1.16.0\nCOPY hack/golang/golangci-lint.yaml .\nRUN golangci-lint run --config golangci-lint.yaml\n\n# The talos target generates a docker image that can be used to run Talos\n# in containers.\n\nARG TOOLCHAIN_IMAGE\nFROM ${TOOLCHAIN_IMAGE} AS talos-build\nCOPY --from=rootfs-build / /rootfs\n# A workaround docker overwriting our /etc symlink.\nRUN rm /rootfs/etc\nRUN mv /rootfs/var/etc /rootfs/etc\nRUN ln -s /etc /rootfs/var/etc\n\nFROM scratch AS talos\nCOPY --from=talos-build /rootfs /\nCOPY --from=init-build /init /init\nENTRYPOINT [\"/init\"]\n\n# The installer target generates an image that can be used to install Talos to\n# various environments.\n\nFROM alpine:3.8 AS installer\nRUN apk --update --no-cache add \\\n        bash \\\n        cdrkit \\\n        curl \\\n        qemu-img \\\n        syslinux \\\n        unzip \\\n        util-linux \\\n        xfsprogs\nCOPY --from=kernel /vmlinuz /usr/install/vmlinuz\nCOPY --from=initramfs /initramfs.xz /usr/install/initramfs.xz\nCOPY --from=rootfs /rootfs.tar.gz /usr/install/rootfs.tar.gz\nCOPY --from=initramfs-build /usr/lib/syslinux/ /usr/lib/syslinux\nCOPY --from=osctl-linux-amd64-build /osctl-linux-amd64 /bin/osctl\nRUN curl -f -L https://releases.hashicorp.com/packer/1.3.1/packer_1.3.1_linux_amd64.zip -o /tmp/packer.zip \\\n    && unzip -d /tmp /tmp/packer.zip \\\n    && mv /tmp/packer /bin \\\n    && rm /tmp/packer.zip\nCOPY hack/installer/packer.json /packer.json\nCOPY hack/installer/entrypoint.sh /bin/entrypoint.sh\nARG TAG\nENV VERSION ${TAG}\nENTRYPOINT [\"entrypoint.sh\"]\n"
}