{
  "startTime": 1674234224026,
  "endTime": 1674234224327,
  "originalSmells": [
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 133,
        "lineEnd": 133,
        "columnStart": 4,
        "columnEnd": 27
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM base/archlinux\nLABEL maintainer=\"Dominik Maier <domenukk@sect.tu-berlin.de>\"\n\nENV REFRESHED_AT 2018-07-28\n\nENV DEBIAN_FRONTEND noninteractive\n\nENV AFL_INSTALL https://github.com/domenukk/afl-timewarp.git\n\n# Update and install minimal\n#\n# afl:\n#   build-essential, wget\n#\n# lidjpeg-turbo:\n#   autoconf, automake, build-essential, libtool, nasm,\n#   subversion, wget\n\nRUN \\\n    pacman -Sy \\\n    && pacman -S --noconfirm \\\n    gcc \\\n    make \\\n    wget \\\n    git \\\n    python \\\n    python-pip \\\n    automake \\\n    autoconf \\\n    bison \\\n    patch \\\n    pkg-config \\\n    python \\\n    python-pip \\\n    python2 \\\n    asp \\\n    sudo \\\n    flex \\\n    openssh \\\n    clang \\\n    llvm \\\n    cmake \\\n    tmux \\\n    openbsd-netcat \\\n    fakeroot # For building packages manually\n\n# Some interactive tools\nRUN pacman -Sy --noconfirm fish vim\nRUN chsh -s `which fish`\n\n# Get ready to build.\nWORKDIR /tmp\n# install afl-utils:\nRUN pacman -S --noconfirm gdb\nCOPY ./exploitable exploitable\nRUN cd exploitable && python setup.py install\nCOPY ./afl_utils afl-utils\nRUN cd afl-utils \\\n&& python setup.py install\n\n# clone and build AFL.\nCOPY ./ssh /root/.ssh\nRUN chmod 400 /root/.ssh/*\n\n# SSH -i are hacks to get multiple deploy keys working. Instead, consider git clone --recursive once afl-timwarp-qemu is public\nRUN git clone --recursive --depth 1 $AFL_INSTALL /tmp/afl-src\n\n# Dependency for qemu\nRUN pacman -Sy --noconfirm pixman\n\nRUN cd /tmp/afl-src \\\n    && sed -i 's/^\\/\\/ #define USE_64BIT/#define USE_64BIT/gI' config.h \\\n    && make \\\n    && mkdir build || true \\\n    && cd build \\\n    && cmake -DCMAKE_BUILD_TYPE=Release .. \\\n    && cmake --build . \\\n    && cp fuzzwarp ../afl-fuzz \\\n    && cd .. \\\n    && make install \\\n    && cd /tmp/afl-src \\\n    && cd qemu_mode \\\n    && chmod +x ./build_afl_qemu_support.sh \\\n    && ./build_afl_qemu_support.sh \\\n    && cd ../llvm_mode \\\n    && LLVM_CONFIG=/usr/sbin/llvm-config make \\\n    && cd /tmp/afl-src \\\n    && make install\n\nRUN mkdir /fuzz_dictionaries \\\n    && cp -r /tmp/afl-src/dictionaries/ /fuzz_dictionaries/ \\\n    && cp /fuzz_dictionaries/dictionaries/jpeg.dict /fuzz_dictionaries/dictionaries/jpg.dict \\\n    && rm /fuzz_dictionaries/dictionaries/README.dictionaries\n    #&& cd /sys/devices/system/cpu \\\n    #&& echo performance | tee cpu*/cpufreq/scaling_governor\n#    && rm -rf \\\n#        /tmp/afl-latest.tgz \\\n#        /tmp/afl-src\nCOPY ./aflize.sh /usr/bin/aflize\nCOPY ./afl_cmin_vincent.sh /usr/local/bin/afl_cmin_cov_only\nCOPY ./afl_probe.sh /usr/local/bin/afl_probe\nRUN chmod +x /usr/bin/aflize\nRUN chmod +x  /usr/local/bin/afl_probe\nRUN chmod +x /usr/local/bin/afl_cmin_cov_only\n\nCOPY ./preeny /preeny\nRUN cd /preeny \\\n    && pacman -Sy --noconfirm ding-libs \\\n    && make\n\n\nRUN cd /tmp/afl-src/libdislocator && make && cp libdislocator.so /libdislocator.so\n\n# Make sure afl-gcc will be run. This forces us to set AFL_CC and AFL_CXX or\n# otherwise afl-gcc will be trying to call itself by calling gcc.\nCOPY ./afl-sh-profile /etc/profile.d/afl-sh-profile\nRUN ln -s /etc/profile.d/afl-sh-profile /etc/profile.d/afl-sh-profile.sh\n# It looks like /etc/profile.d isn't read for some reason, but .bashrc is.\n# Let's include /etc/profile.d/afl-sh-profile from there.\nRUN echo '. /etc/profile.d/afl-sh-profile' >> /root/.bashrc && chmod +x /root/.bashrc\n\nRUN chmod +x /etc/profile.d/afl-sh-profile\n\nCOPY ./setup-afl-gcc /usr/bin/setup-afl-gcc\nRUN chmod +x /usr/bin/setup-afl-gcc\n\nCOPY ./setup-afl-clang-fast /usr/bin/setup-afl-clang-fast\nRUN chmod +x /usr/bin/setup-afl-clang-fast\n\nRUN /usr/bin/setup-afl-clang-fast\nRUN useradd nonrootuser\nRUN echo \"nonrootuser ALL=(root) NOPASSWD:ALL\" > /etc/sudoers.d/nonrootuser && \\\n    chmod 0440 /etc/sudoers.d/nonrootuser\nRUN pip3 install --no-cache-dir websockify\nCMD [\"bash\"]\n"
}