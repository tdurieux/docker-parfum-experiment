{
  "startTime": 1674244881981,
  "endTime": 1674244882074,
  "originalSmells": [
    {
      "rule": "yumInstallRmVarCacheYum",
      "position": {
        "lineStart": 25,
        "lineEnd": 30,
        "columnStart": 4,
        "columnEnd": 13
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM arm64v8/centos:7\n\nADD qemu-aarch64-static /usr/bin/qemu-aarch64-static\n\nLABEL maintainer=\"conda-forge <conda-forge@googlegroups.com>\"\n\n# Set an encoding to make things work smoothly.\nENV LANG en_US.UTF-8\nENV LANGUAGE=en_US.UTF-8\n\n# Add a timestamp for the build. Also, bust the cache.\nADD http://worldclockapi.com/api/json/utc/now /opt/docker/etc/timestamp\n\n# Resolves a nasty NOKEY warning that appears when using yum.\nRUN rpm --import /etc/pki/rpm-gpg/RPM-GPG-KEY-CentOS-7\n\n# Fix up issues with locales because the default images have these minimized\n# to the point of not being properly functional\n# See: https://github.com/CentOS/sig-cloud-instance-images/issues/71\nRUN yum update -y && \\\n    yum reinstall -y glibc-common\nRUN localedef -i en_US -f UTF-8 en_US.UTF-8\n\n# Install basic requirements.\nRUN yum update -y && \\\n    yum install -y \\\n        bzip2 \\\n        patch \\\n        sudo \\\n        tar \\\n        which && \\\n    yum clean all && rm -rf /var/cache/yum\n\n# Run common commands\nCOPY scripts/run_commands /opt/docker/bin/run_commands\nRUN /opt/docker/bin/run_commands\n\n# Download and cache new compiler packages.\n# Should speedup installation of them on CIs.\nENV _channel=\"c4aarch64\"\nRUN source /opt/conda/etc/profile.d/conda.sh && \\\n    conda activate && \\\n    conda create -n test --yes --quiet --download-only \\\n        $_channel::binutils_impl_linux-aarch64 \\\n        $_channel::binutils_linux-aarch64 \\\n        $_channel::gcc_impl_linux-aarch64 \\\n        $_channel::gcc_linux-aarch64 \\\n        $_channel::gfortran_impl_linux-aarch64 \\\n        $_channel::gfortran_linux-aarch64 \\\n        $_channel::gxx_impl_linux-aarch64 \\\n        $_channel::gxx_linux-aarch64 \\\n        $_channel::libgcc-ng \\\n        $_channel::libgfortran-ng \\\n        $_channel::libstdcxx-ng && \\\n    conda remove --yes --quiet -n test --all && \\\n    conda clean -tsy && \\\n    chgrp -R lucky /opt/conda && \\\n    chmod -R g=u /opt/conda\n\n# Add a file for users to source to activate the `conda`\n# environment `base`. Also add a file that wraps that for\n# use with the `ENTRYPOINT`.\nCOPY linux-anvil-aarch64/entrypoint_source /opt/docker/bin/entrypoint_source\nCOPY scripts/entrypoint /opt/docker/bin/entrypoint\n\n# Ensure that all containers start with tini and the user selected process.\n# Activate the `conda` environment `base` and the devtoolset compiler.\n# Provide a default command (`bash`), which will start if the user doesn't specify one.\nENTRYPOINT [ \"/opt/conda/bin/tini\", \"--\", \"/opt/docker/bin/entrypoint\" ]\nCMD [ \"/bin/bash\" ]\n"
}