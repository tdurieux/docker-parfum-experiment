{
  "startTime": 1674236132323,
  "endTime": 1674236132416,
  "originalSmells": [
    {
      "rule": "apkAddUseNoCache",
      "position": {
        "lineStart": 4,
        "lineEnd": 4,
        "columnStart": 18,
        "columnEnd": 29
      }
    },
    {
      "rule": "apkAddUseNoCache",
      "position": {
        "lineStart": 4,
        "lineEnd": 4,
        "columnStart": 33,
        "columnEnd": 56
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# STEP 1 build executable binary\nFROM golang:alpine as builder\n\n# Install SSL ca certificates\nRUN apk update && apk add --no-cache git && apk add --no-cache ca-certificates\n\n# Create appuser\nRUN adduser -D -g '' appuser\n\n# copy all sources in\nCOPY . $GOPATH/src\nWORKDIR $GOPATH/src/github.com/mtbarta/monocorpus/pkg\n\n# get dependancies\n# should be done in CI\nRUN go get -d -v ./...\n\n#build the binary\nWORKDIR $GOPATH/src/github.com/mtbarta/monocorpus/services\nRUN CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build -a -installsuffix cgo -ldflags '-w -s' -o /go/bin/search search/search.go\n\nRUN CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build -a -installsuffix cgo -ldflags '-w -s' -o /go/bin/healthcheck healthcheck/healthcheck.go\n\n# STEP 2 build a small image\n\n# start from scratch\nFROM scratch\n\nCOPY --from=builder /etc/ssl/certs/ca-certificates.crt /etc/ssl/certs/\nCOPY --from=builder /etc/passwd /etc/passwd\n# Copy our static executable\nCOPY --from=builder /go/bin/search /go/bin/main\nCOPY --from=builder /go/bin/healthcheck /go/bin/healthcheck\nUSER appuser\n\nENTRYPOINT [\"/go/bin/main\"]"
}