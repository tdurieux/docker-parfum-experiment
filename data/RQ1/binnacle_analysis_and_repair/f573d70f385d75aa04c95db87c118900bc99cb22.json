{
  "startTime": 1674244664278,
  "endTime": 1674244664399,
  "originalSmells": [
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 12,
        "lineEnd": 12,
        "columnStart": 4,
        "columnEnd": 157
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 12,
        "lineEnd": 12,
        "columnStart": 4,
        "columnEnd": 157
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# Docker for SecurityMonkey\n# Author : Nag\nFROM ubuntu:14.04\nMAINTAINER Nag <nagwww@gmail.com>\n\n#For postgres installations\nRUN apt-key adv --keyserver keyserver.ubuntu.com --recv-keys B97B0AFCAA1A47F044F244A07FCC7D46ACCC4CF8 &&\\\n    echo \"deb http://apt.postgresql.org/pub/repos/apt/ precise-pgdg main\" > /etc/apt/sources.list.d/pgdg.list &&\\\n    apt-get update -y && \\\n#    apt-get -y -q install python-software-properties software-properties-common postgresql-9.3 postgresql-client-9.3 postgresql-contrib-9.3 &&\\\n#    apt-get -y -q install python-software-properties software-properties-common postgresql postgresql-client-9.3 postgresql-contrib &&\\\n#    apt-get install -y python-pip python-dev python-psycopg2 libpq-dev nginx supervisor git curl\n    apt-get -y --no-install-recommends install python-pip python-dev python-psycopg2 postgresql postgresql-contrib libpq-dev nginx supervisor git libffi-dev curl apt-transport-https && rm -rf /var/lib/apt/lists/*;\n\n#Run as postgres user\n# Run the rest of the commands as the ``postgres`` user created by the ``postgres-9.3`` package when it was ``apt-get installed``\nUSER postgres\n\n# Create a PostgreSQL role named ``docker`` with ``docker`` as the password and\n# then create a database `docker` owned by the ``docker`` role.\n# Note: here we use ``&&\\`` to run commands one after the other - the ``\\``\n#       allows the RUN command to span multiple lines.\n\nRUN /etc/init.d/postgresql start &&\\\n    psql --command \"ALTER USER postgres with PASSWORD 'securitymonkeypassword'; \" &&\\\n    psql --command \"CREATE DATABASE \\\"secmonkey\\\";\" &&\\\n    psql --command \"CREATE ROLE \\\"securitymonkeyuser\\\" LOGIN PASSWORD 'securitymonkeypassword';\" &&\\\n    psql --command \"CREATE SCHEMA secmonkey ;\" &&\\\n    psql --command \"GRANT Usage, Create ON SCHEMA \\\"secmonkey\\\" TO \\\"securitymonkeyuser\\\"; \" &&\\\n    psql --command \"set timezone TO 'GMT';\" &&\\\n    psql --command \"select now();\" &&\\\n    echo \"host all  all    0.0.0.0/0  md5\" >> /etc/postgresql/9.6/main/pg_hba.conf &&\\\n    echo \"listen_addresses='*'\" >> /etc/postgresql/9.6/main/postgresql.conf\n\n# Expose the PostgreSQL port\nEXPOSE 5432\nEXPOSE 443\n\n# Add VOLUMEs to allow backup of config, logs and databases\nVOLUME  [\"/etc/postgresql\", \"/var/log/postgresql\", \"/var/lib/postgresql\"]\n\nUSER root\n#RUN useradd -d /home/ubuntu -m -s /bin/bash ubuntu &&\\\n#    git clone https://github.com/Netflix/security_monkey.git /home/ubuntu/security_monkey &&\\\n#    cd /home/ubuntu/security_monkey && python setup.py install\nRUN useradd -d /home/ubuntu -m -s /bin/bash ubuntu\nRUN git clone --depth 1 --branch master https://github.com/Netflix/security_monkey.git /usr/local/src/security_monkey\nRUN cd /usr/local/src/security_monkey && python setup.py install\n\nENV SECURITY_MONKEY_SETTINGS /usr/local/src/security_monkey/env-config/config-deploy.py\n\nADD securitymonkey.conf /etc/nginx/sites-available/\nADD securitymonkey.sh /usr/local/src/\nADD static.tar /usr/local/src/security_monkey/security_monkey/\nCMD /usr/local/src/securitymonkey.sh\n"
}