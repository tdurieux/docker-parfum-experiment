{
  "startTime": 1674242617651,
  "endTime": 1674242617802,
  "originalSmells": [
    {
      "rule": "yarnCacheCleanAfterInstall",
      "position": {
        "lineStart": 80,
        "lineEnd": 80,
        "columnStart": 4,
        "columnEnd": 34
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 21,
        "lineEnd": 21,
        "columnStart": 4,
        "columnEnd": 58
      }
    },
    {
      "rule": "apkAddUseNoCache",
      "position": {
        "lineStart": 45,
        "lineEnd": 45,
        "columnStart": 5,
        "columnEnd": 40
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# Production Dockerfile for Django app\n\nFROM python:{{ cookiecutter.python_version }}-alpine3.8 as base\n\nENV DJANGO_PRODUCTION_MODE 1\n\n# Create a directory for the logs\nRUN mkdir -p /var/log/{{cookiecutter.repo_name}}\n\nCOPY ./wait-for-it.sh /usr/bin/\n\n# Install bash, libpq{% if cookiecutter.include_cms == 'yes' %}, libjpeg-turbo{% endif %} and gettext\n# Bash is required to support `wait-for-it.sh` script, should not add too much to docker image\nRUN apk add --no-cache bash gettext libpq{% if cookiecutter.include_cms == 'yes' %} libjpeg-turbo{% endif %}\n\n# Install build dependencies and mark them as virtual packages so they could be removed together\nRUN apk add --no-cache --virtual .build-deps \\\n    ca-certificates alpine-sdk postgresql-dev python3-dev linux-headers musl-dev \\\n    libffi-dev libxml2-dev libxslt-dev jpeg-dev zlib-dev\n\n# Copy Python requirements dir and Install requirements\nRUN pip install --no-cache-dir -U pipenv==2018.11.26 pip setuptools wheel\n\nCOPY Pipfile /\nCOPY Pipfile.lock /\n\n# Install all dependencies from Pipfile.lock file\nRUN pipenv install --system --ignore-pipfile\n\n# Find all file objects containing name `test` or compiled python files and remove them\n# Find all runtime dependencies that are marked as needed by scanelf\n# scanelf is utility to show ELF data for binary objects\n# For more info: https://wiki.gentoo.org/wiki/Hardened/PaX_Utilities#The_scanelf_application\n# Finally re-install missing run-dependencies\nRUN find /usr/local \\\n        \\( -type d -a -name test -o -name tests \\) \\\n        -o \\( -type f -a -name '*.pyc' -o -name '*.pyo' \\) \\\n        -exec rm -rf '{}' + \\\n  && runDeps=\"$( \\\n        scanelf --needed --nobanner --recursive /usr/local \\\n                | awk '{ gsub(/,/, \"\\nso:\", $2); print \"so:\" $2 }' \\\n                | sort -u \\\n                | xargs -r apk info --installed \\\n                | sort -u \\\n    )\" \\\n  && apk add --no-cache --virtual .rundeps $runDeps\n\n# Remove build dependencies\nRUN apk del .build-deps\n\n# Copy code\nCOPY ./{{cookiecutter.repo_name}} /app\n\n# Set the default directory where CMD will execute\nWORKDIR /app\n\n# Compile translations to .mo files\n# RUN python manage.py compilemessages\n\n# Based on Node 10.x LTS image\nFROM node:{% if cookiecutter.node_version == '10' %}10.15.1{% else %}{{ cookiecutter.node_version }}{% endif %}-alpine as node_builder\n\n# Set the default directory where CMD will execute\nWORKDIR /app\n\n# Install node build dependencies\n# Not removing them as not to break fabfile logic for exporting assets\n# These can be removed with: \"RUN apk del .build-deps\"\nRUN apk add --no-cache --virtual .build-deps build-base python\n\n# Copy some utility files\nCOPY ./{{ cookiecutter.repo_name }}/.babelrc .\nCOPY ./{{ cookiecutter.repo_name }}/.eslintrc .\nCOPY ./{{ cookiecutter.repo_name }}/.eslintignore .\n\n# Install node requirements\nCOPY ./{{ cookiecutter.repo_name }}/package.json .\nCOPY ./{{ cookiecutter.repo_name }}/yarn.lock ./\n\n# Install node dependencies\nRUN yarn install --frozen-lockfile && yarn cache clean;\n\n# Copy app assets\nCOPY ./{{ cookiecutter.repo_name }}/app /app/app\nCOPY ./{{ cookiecutter.repo_name }}/static /app/static\n\n# Build node stuff\nRUN yarn build\n\n# Resume Django build\nFROM base\n\n# Copy all from node image\nCOPY --from=node_builder /app/app/build /app/app/build\nCOPY --from=node_builder /app/app/webpack-stats.json /app/app/webpack-stats.json\n\n# Run Gunicorn by default\nCMD gunicorn {{ cookiecutter.repo_name }}.wsgi:application --workers 2 --bind :80\n"
}