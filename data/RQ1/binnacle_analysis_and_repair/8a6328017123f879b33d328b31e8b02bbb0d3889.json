{
  "startTime": 1674250973988,
  "endTime": 1674250974136,
  "originalSmells": [
    {
      "rule": "wgetUseHttpsUrl",
      "position": {
        "lineStart": 48,
        "lineEnd": 48,
        "columnStart": 4,
        "columnEnd": 70
      }
    },
    {
      "rule": "wgetUseHttpsUrl",
      "position": {
        "lineStart": 51,
        "lineEnd": 51,
        "columnStart": 4,
        "columnEnd": 108
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 66,
        "lineEnd": 66,
        "columnStart": 7,
        "columnEnd": 18
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 8,
        "lineEnd": 41,
        "columnStart": 7,
        "columnEnd": 7
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# Use debian stretch image\nFROM debian:stretch\nMAINTAINER Michael Eder <michael.eder@aisec.fraunhofer.de>\n\n# Get latest package list, upgrade packages, install required packages\n# and cleanup to keep container as small as possible\nRUN dpkg --add-architecture i386\nRUN apt-get update \\\n    && apt-get install --no-install-recommends -y \\\n    automake \\\n    build-essential \\\n    ca-certificates \\\n    clang \\\n    cmake \\\n    gcc-multilib \\\n    git \\\n    g++ \\\n    g++-multilib \\\n    libboost-iostreams-dev \\\n    libboost-program-options-dev \\\n    libboost-random-dev \\\n    libboost-serialization-dev \\\n    libcapstone3 \\\n    libcapstone-dev \\\n    libntl-dev \\\n    libsqlite3-dev \\\n    libsqlite3-dev:i386 \\\n    libssl-dev \\\n    libssl-dev:i386 \\\n    libstdc++-6-dev \\\n    libstdc++-6-dev:i386 \\\n    libomp-dev \\\n    make \\\n    python3 \\\n    qt5-qmake \\\n    qtbase5-dev-tools \\\n    qtbase5-dev \\\n    vim \\\n    wget \\\n    wine \\\n    xdotool \\\n    zsh \\\n    && apt-get clean \\\n    && rm -rf /var/lib/apt/lists/*\n\nWORKDIR \"/root\"\n\n# get grml zshrc\nRUN wget -O ~/.zshrc https://git.grml.org/f/grml-etc-core/etc/zsh/zshrc\n\n# Download and build PIN\nRUN wget https://software.intel.com/sites/landingpage/pintool/downloads/pin-2.14-71313-gcc.4.4.7-linux.tar.gz \\\n    && tar xzf pin-2.14-71313-gcc.4.4.7-linux.tar.gz \\\n    && mv pin-2.14-71313-gcc.4.4.7-linux /opt \\\n    && export PIN_ROOT=/opt/pin-2.14-71313-gcc.4.4.7-linux \\\n    && rm pin-2.14-71313-gcc.4.4.7-linux.tar.gz\n\nENV PIN_ROOT=/opt/pin-2.14-71313-gcc.4.4.7-linux\n\n# Download and build Valgrind\nRUN wget 'ftp://sourceware.org/pub/valgrind/valgrind-3.13.0.tar.bz2' \\\n    && tar xf valgrind-3.13.0.tar.bz2 \\\n    && rm -rf valgrind-3.13.0.tar.bz2\n\nWORKDIR \"/root/valgrind-3.13.0\"\nRUN ./autogen.sh \\\n    && ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" \\\n    && make -j4 \\\n    && make install\n\nWORKDIR \"/root\"\nENTRYPOINT zsh\n"
}