{
  "startTime": 1674248320239,
  "endTime": 1674248320784,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 81,
        "lineEnd": 81,
        "columnStart": 4,
        "columnEnd": 81
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 90,
        "lineEnd": 90,
        "columnStart": 4,
        "columnEnd": 62
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 161,
        "lineEnd": 161,
        "columnStart": 4,
        "columnEnd": 40
      }
    },
    {
      "rule": "mkdirUsrSrcThenRemove",
      "position": {
        "lineStart": 80,
        "lineEnd": 80,
        "columnStart": 4,
        "columnEnd": 25
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 73,
        "lineEnd": 73,
        "columnStart": 4,
        "columnEnd": 36
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 83,
        "lineEnd": 83,
        "columnStart": 4,
        "columnEnd": 15
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 36,
        "lineEnd": 65,
        "columnStart": 22,
        "columnEnd": 24
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# This file describes the standard way to build Docker, using docker\n#\n# Usage:\n#\n# # Assemble the full dev environment. This is slow the first time.\n# docker build -t docker .\n#\n# # Mount your source in an interactive container for quick testing:\n# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash\n#\n# # Run the test suite:\n# docker run --privileged docker hack/make.sh test\n#\n# # Publish a release:\n# docker run --privileged \\\n#  -e AWS_S3_BUCKET=baz \\\n#  -e AWS_ACCESS_KEY=foo \\\n#  -e AWS_SECRET_KEY=bar \\\n#  -e GPG_PASSPHRASE=gloubiboulga \\\n#  docker hack/release.sh\n#\n# Note: AppArmor used to mess with privileged mode, but this is no longer\n# the case. Therefore, you don't have to disable it anymore.\n#\n\nFROM armv7/armhf-ubuntu:14.04\nMAINTAINER Tianon Gravi <admwiggin@gmail.com> (@tianon)\n\nENV HOME /root\nENV MAKEFLAGS -j4\nENV DEBIAN_FRONTEND noninteractive\n\nRUN\tapt-key adv --keyserver hkp://p80.pool.sks-keyservers.net:80 --recv-keys E871F18B51E0147C77796AC81196BA81F6B0FC61\nRUN\techo deb http://ppa.launchpad.net/zfs-native/stable/ubuntu utopic main > /etc/apt/sources.list.d/zfs.list\n\n# Packaged dependencies\nRUN apt-get update && apt-get install -y \\\n\tapparmor \\\n\taufs-tools \\\n\tautomake \\\n\tbash-completion \\\n\tbtrfs-tools \\\n\tbuild-essential \\\n\tcreaterepo \\\n\tcurl \\\n\tdpkg-sig \\\n\tgcc-mingw-w64 \\\n\tgit \\\n\tiptables \\\n\tlibapparmor-dev \\\n\tlibcap-dev \\\n\tlibsqlite3-dev \\\n\tlibsystemd-journal-dev \\\n\tmercurial \\\n\tparallel \\\n\tpkg-config \\\n\tpython-mock \\\n\tpython-pip \\\n\tpython-websocket \\\n\treprepro \\\n\truby1.9.1 \\\n\truby1.9.1-dev \\\n\ts3cmd=1.1.0* \\\n#\tubuntu-zfs \\\n#\tlibzfs-dev \\\n\t--no-install-recommends && rm -rf /var/lib/apt/lists/*;\n\n# Get lvm2 source for compiling statically\nRUN git clone -b v2_02_103 https://git.fedorahosted.org/git/lvm2.git /usr/local/lvm2\n# see https://git.fedorahosted.org/cgit/lvm2.git/refs/tags for release tags\n\n# Compile and install lvm2\nRUN cd /usr/local/lvm2 \\\n\t&& ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --enable-static_link \\\n\t&& make device-mapper \\\n\t&& make install_device-mapper\n# see https://git.fedorahosted.org/cgit/lvm2.git/tree/INSTALL\n\n# Install lxc\nENV LXC_VERSION 1.1.2\nRUN mkdir -p /usr/src/lxc \\\n\t&& curl -f -sSL https://linuxcontainers.org/downloads/lxc/lxc-${LXC_VERSION}.tar.gz | tar -v -C /usr/src/lxc/ -xz --strip-components=1 && rm -rf /usr/src/lxc\nRUN cd /usr/src/lxc \\\n\t&& ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" \\\n\t&& make \\\n\t&& make install \\\n\t&& ldconfig\n\n# Install Go\nENV GO_VERSION 1.4.3\nRUN curl -f -sSL https://golang.org/dl/go${GO_VERSION}.src.tar.gz | tar -v -C /usr/local -xz \\\n\t&& mkdir -p /go/bin\nENV PATH /go/bin:/usr/local/go/bin:$PATH\nENV GOPATH /go:/go/src/github.com/docker/docker/vendor\nRUN cd /usr/local/go/src && ./make.bash --no-clean 2>&1\n\n# Compile Go for cross compilation\nENV DOCKER_CROSSPLATFORMS \\\n\tlinux/arm\n#\tlinux/386 linux/arm \\\n#\tdarwin/amd64 darwin/386 \\\n#\tfreebsd/amd64 freebsd/386 freebsd/arm \\\n#\twindows/amd64 windows/386\n\n# (set an explicit GOARM of 5 for maximum compatibility)\nENV GOARM 7\nRUN cd /usr/local/go/src \\\n\t&& set -x \\\n\t&& for platform in $DOCKER_CROSSPLATFORMS; do \\\n\t\tGOOS=${platform%/*} \\\n\t\tGOARCH=${platform##*/} \\\n\t\t\t./make.bash --no-clean 2>&1; \\\n\tdone\n\n# This has been commented out and kept as reference because we don't support compiling with older Go anymore.\n# ENV GOFMT_VERSION 1.3.3\n# RUN curl -sSL https://storage.googleapis.com/golang/go${GOFMT_VERSION}.$(go env GOOS)-$(go env GOARCH).tar.gz | tar -C /go/bin -xz --strip-components=2 go/bin/gofmt\n\n# Update this sha when we upgrade to go 1.5.0\nENV GO_TOOLS_COMMIT 069d2f3bcb68257b627205f0486d6cc69a231ff9\n# Grab Go's cover tool for dead-simple code coverage testing\n# Grab Go's vet tool for examining go code to find suspicious constructs\n# and help prevent errors that the compiler might not catch\nRUN git clone https://github.com/golang/tools.git /go/src/golang.org/x/tools \\\n\t&& (cd /go/src/golang.org/x/tools && git checkout -q $GO_TOOLS_COMMIT) \\\n\t&& go install -v golang.org/x/tools/cmd/cover \\\n\t&& go install -v golang.org/x/tools/cmd/vet\n# Grab Go's lint tool\nENV GO_LINT_COMMIT f42f5c1c440621302702cb0741e9d2ca547ae80f\nRUN git clone https://github.com/golang/lint.git /go/src/github.com/golang/lint \\\n\t&& (cd /go/src/github.com/golang/lint && git checkout -q $GO_LINT_COMMIT) \\\n\t&& go install -v github.com/golang/lint/golint\n\n# TODO replace FPM with some very minimal debhelper stuff\nRUN gem install --no-rdoc --no-ri fpm --version 1.3.2\n\n# Install registry\nENV REGISTRY_COMMIT ec87e9b6971d831f0eff752ddb54fb64693e51cd\nRUN set -x \\\n\t&& export GOPATH=\"$(mktemp -d)\" \\\n\t&& git clone https://github.com/docker/distribution.git \"$GOPATH/src/github.com/docker/distribution\" \\\n\t&& (cd \"$GOPATH/src/github.com/docker/distribution\" && git checkout -q \"$REGISTRY_COMMIT\") \\\n\t&& GOPATH=\"$GOPATH/src/github.com/docker/distribution/Godeps/_workspace:$GOPATH\" \\\n\t\tgo build -o /usr/local/bin/registry-v2 github.com/docker/distribution/cmd/registry \\\n\t&& rm -rf \"$GOPATH\"\n\n# Install notary server\n# ENV NOTARY_COMMIT 8e8122eb5528f621afcd4e2854c47302f17392f7\n# RUN set -x \\\n#\t&& export GOPATH=\"$(mktemp -d)\" \\\n#\t&& git clone https://github.com/docker/notary.git \"$GOPATH/src/github.com/docker/notary\" \\\n#\t&& (cd \"$GOPATH/src/github.com/docker/notary\" && git checkout -q \"$NOTARY_COMMIT\") \\\n#\t&& GOPATH=\"$GOPATH/src/github.com/docker/notary/Godeps/_workspace:$GOPATH\" \\\n#\t\tgo build -o /usr/local/bin/notary-server github.com/docker/notary/cmd/notary-server \\\n#\t&& rm -rf \"$GOPATH\"\n\n# Get the \"docker-py\" source so we can run their integration tests\nENV DOCKER_PY_COMMIT 47ab89ec2bd3bddf1221b856ffbaff333edeabb4\nRUN git clone https://github.com/docker/docker-py.git /docker-py \\\n\t&& cd /docker-py \\\n\t&& git checkout -q $DOCKER_PY_COMMIT \\\n\t&& pip install --no-cache-dir -r test-requirements.txt\n\n# Setup s3cmd config\nRUN { \\\n\t\techo '[default]'; \\\n\t\techo 'access_key=$AWS_ACCESS_KEY'; \\\n\t\techo 'secret_key=$AWS_SECRET_KEY'; \\\n\t} > ~/.s3cfg\n\n# Set user.email so crosbymichael's in-container merge commits go smoothly\nRUN git config --global user.email 'docker-dummy@example.com'\n\n# Add an unprivileged user to be used for tests which need it\nRUN groupadd -r docker\nRUN useradd --create-home --gid docker unprivilegeduser\n\nVOLUME /var/lib/docker\nWORKDIR /go/src/github.com/docker/docker\nENV DOCKER_BUILDTAGS apparmor selinux\n\n# Let us use a .bashrc file\nRUN ln -sfv $PWD/.bashrc ~/.bashrc\n\n# Register Docker's bash completion.\nRUN ln -sv $PWD/contrib/completion/bash/docker /etc/bash_completion.d/docker\n\n# Get useful and necessary Hub images so we can \"docker load\" locally instead of pulling\nCOPY contrib/download-frozen-image.sh /go/src/github.com/docker/docker/contrib/\nRUN ./contrib/download-frozen-image.sh /docker-frozen-images \\\n\tbusybox:latest@8c2e06607696bd4afb3d03b687e361cc43cf8ec1a4a725bc96e39f05ba97dd55 \\\n\thello-world:frozen@91c95931e552b11604fea91c2f537284149ec32fff0f700a4769cfd31d7696ae \\\n\tjess/unshare@5c9f6ea50341a2a8eb6677527f2bdedbf331ae894a41714fda770fb130f3314d\n# see also \"hack/make/.ensure-frozen-images\" (which needs to be updated any time this list is)\n\n# Download man page generator\nRUN set -x \\\n\t&& export GOPATH=\"$(mktemp -d)\" \\\n\t&& git clone -b v1.0.3 https://github.com/cpuguy83/go-md2man.git \"$GOPATH/src/github.com/cpuguy83/go-md2man\" \\\n\t&& git clone -b v1.4 https://github.com/russross/blackfriday.git \"$GOPATH/src/github.com/russross/blackfriday\" \\\n\t&& go get -v -d github.com/cpuguy83/go-md2man \\\n\t&& go build -v -o /usr/local/bin/go-md2man github.com/cpuguy83/go-md2man \\\n\t&& rm -rf \"$GOPATH\"\n\n# Download toml validator\nENV TOMLV_COMMIT 9baf8a8a9f2ed20a8e54160840c492f937eeaf9a\nRUN set -x \\\n\t&& export GOPATH=\"$(mktemp -d)\" \\\n\t&& git clone https://github.com/BurntSushi/toml.git \"$GOPATH/src/github.com/BurntSushi/toml\" \\\n\t&& (cd \"$GOPATH/src/github.com/BurntSushi/toml\" && git checkout -q \"$TOMLV_COMMIT\") \\\n\t&& go build -v -o /usr/local/bin/tomlv github.com/BurntSushi/toml/cmd/tomlv \\\n\t&& rm -rf \"$GOPATH\"\n\n# Build/install the tool for embedding resources in Windows binaries\nENV RSRC_COMMIT e48dbf1b7fc464a9e85fcec450dddf80816b76e0\nRUN set -x \\\n    && git clone https://github.com/akavel/rsrc.git /go/src/github.com/akavel/rsrc \\\n    && cd /go/src/github.com/akavel/rsrc \\\n    && git checkout -q $RSRC_COMMIT \\\n    && go install -v\n\n# Wrap all commands in the \"docker-in-docker\" script to allow nested containers\nENTRYPOINT [\"hack/dind\"]\n\n# Upload docker source\nCOPY . /go/src/github.com/docker/docker\n"
}