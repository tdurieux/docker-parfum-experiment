{
  "startTime": 1674249824320,
  "endTime": 1674249825553,
  "originalSmells": [
    {
      "rule": "wgetUseHttpsUrl",
      "position": {
        "lineStart": 102,
        "lineEnd": 102,
        "columnStart": 4,
        "columnEnd": 84
      }
    },
    {
      "rule": "wgetUseHttpsUrl",
      "position": {
        "lineStart": 175,
        "lineEnd": 175,
        "columnStart": 4,
        "columnEnd": 120
      }
    },
    {
      "rule": "wgetUseHttpsUrl",
      "position": {
        "lineStart": 236,
        "lineEnd": 236,
        "columnStart": 4,
        "columnEnd": 120
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 280,
        "lineEnd": 280,
        "columnStart": 4,
        "columnEnd": 18
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 309,
        "lineEnd": 309,
        "columnStart": 4,
        "columnEnd": 18
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 154,
        "lineEnd": 170,
        "columnStart": 4,
        "columnEnd": 33
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 178,
        "lineEnd": 178,
        "columnStart": 4,
        "columnEnd": 41
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 217,
        "lineEnd": 231,
        "columnStart": 4,
        "columnEnd": 33
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 239,
        "lineEnd": 239,
        "columnStart": 4,
        "columnEnd": 41
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 103,
        "lineEnd": 103,
        "columnStart": 4,
        "columnEnd": 48
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 121,
        "lineEnd": 121,
        "columnStart": 4,
        "columnEnd": 39
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 152,
        "lineEnd": 152,
        "columnStart": 26,
        "columnEnd": 97
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 176,
        "lineEnd": 176,
        "columnStart": 26,
        "columnEnd": 97
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 215,
        "lineEnd": 215,
        "columnStart": 26,
        "columnEnd": 97
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 237,
        "lineEnd": 237,
        "columnStart": 26,
        "columnEnd": 97
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 59,
        "lineEnd": 84,
        "columnStart": 4,
        "columnEnd": 26
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 85,
        "lineEnd": 90,
        "columnStart": 4,
        "columnEnd": 12
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 91,
        "lineEnd": 94,
        "columnStart": 4,
        "columnEnd": 20
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 95,
        "lineEnd": 96,
        "columnStart": 4,
        "columnEnd": 20
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 150,
        "lineEnd": 150,
        "columnStart": 4,
        "columnEnd": 40
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 213,
        "lineEnd": 213,
        "columnStart": 4,
        "columnEnd": 40
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# Dockerfile describing development environments and builds of FEniCS-X\n#\n# Authors: Jack S. Hale <jack.hale@uni.lu> Lizao Li\n# <lzlarryli@gmail.com> Garth N. Wells <gnw20@cam.ac.uk> Jan Blechta\n# <blechta@karlin.mff.cuni.cz>\n#\n# All layers are built bi-weekly on CircleCI and pushed to\n# https://quay.io/repository/fenicsproject/dolfinx\n#\n# To build development environment images:\n#\n#    docker build --target dev-env-complex -t quay.io/fenicsproject/dolfinx:dev-env-complex .\n#    docker build --target dev-env-real -t quay.io/fenicsproject/dolfinx:dev-env-real .\n#\n# To run a notebook:\n#\n#    docker run -p 8888:8888 quay.io/fenicsproject/dolfinx:notebook\n#\n# To run and share the current host directory with the container:\n#\n#    docker run -p 8888:8888 -v \"$(pwd)\":/tmp quay.io/fenicsproject/dolfinx:notebook\n#\n\nARG GMSH_VERSION=4.3.0\nARG PYBIND11_VERSION=2.3.0\nARG PETSC_VERSION=3.11.2\nARG SLEPC_VERSION=3.11.1\nARG PETSC4PY_VERSION=3.11.0\nARG SLEPC4PY_VERSION=3.11.0\nARG TINI_VERSION=v0.18.0\n\nARG MAKEFLAGS\nARG PETSC_SLEPC_OPTFLAGS=\"-02 -g\"\nARG PETSC_SLEPC_DEBUGGING=\"yes\"\n\nFROM ubuntu:18.04 as base\nLABEL maintainer=\"fenics-project <fenics-support@googlegroups.org>\"\nLABEL description=\"Base image for real and complex FEniCS test environments\"\n\n\nARG GMSH_VERSION\nARG PYBIND11_VERSION\n\nWORKDIR /tmp\n\n# Environment variables\nENV OPENBLAS_NUM_THREADS=1 \\\n    OPENBLAS_VERBOSE=0\n\n# Install dependencies available via apt-get.\n# - First set of packages are required to build and run FEniCS.\n# - Second set of packages are recommended and/or required to build\n#   documentation or tests.\n# - Third set of packages are optional, but required to run gmsh\n#   pre-built binaries.\n# - Fourth set of packages are optional, required for meshio.\nRUN export DEBIAN_FRONTEND=noninteractive && \\\n    apt-get -qq update && \\\n    apt-get -yq --with-new-pkgs -o Dpkg::Options::=\"--force-confold\" upgrade && \\\n    apt-get -y --no-install-recommends install \\\n        cmake \\\n        g++ \\\n        gfortran \\\n        libboost-dev \\\n        libboost-filesystem-dev \\\n        libboost-iostreams-dev \\\n        libboost-math-dev \\\n        libboost-program-options-dev \\\n        libboost-system-dev \\\n        libboost-thread-dev \\\n        libboost-timer-dev \\\n        libeigen3-dev \\\n        libhdf5-mpich-dev \\\n        liblapack-dev \\\n        libmpich-dev \\\n        libopenblas-dev \\\n        mpich \\\n        ninja-build \\\n        pkg-config \\\n        python3-dev \\\n        python3-matplotlib \\\n        python3-numpy \\\n        python3-pip \\\n        python3-scipy \\\n        python3-setuptools && \\\n    apt-get -y --no-install-recommends install \\\n        doxygen \\\n        git \\\n        graphviz \\\n        valgrind \\\n        wget && \\\n    apt-get -y --no-install-recommends install \\\n        libglu1 \\\n        libxcursor-dev \\\n        libxinerama1 && \\\n    apt-get -y --no-install-recommends install \\\n        python3-lxml && \\\n    apt-get clean && \\\n    rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*\n\n# Download Install Gmsh SDK\nRUN cd /usr/local && \\\n    wget -nc --quiet https://gmsh.info/bin/Linux/gmsh-${GMSH_VERSION}-Linux64-sdk.tgz && \\\n    tar -xf gmsh-${GMSH_VERSION}-Linux64-sdk.tgz && rm gmsh-${GMSH_VERSION}-Linux64-sdk.tgz\nENV PATH=/usr/local/gmsh-${GMSH_VERSION}-Linux64-sdk/bin:$PATH\n\n# Add gmsh python API\nENV PYTHONPATH=/usr/local/gmsh-${GMSH_VERSION}-Linux64-sdk/lib\n\n# Install Python packages (via pip)\n# - First set of packages are required to build and run FEniCS.\n# - Second set of packages are recommended and/or required to build\n#   documentation or run tests.\n# - Third set of packages are optional but required for\n#   pygmsh/meshio/DOLFIN mesh pipeline.\nRUN pip3 install --no-cache-dir mpi4py numba && \\\n    pip3 install --no-cache-dir cffi decorator flake8 pytest pytest-xdist sphinx sphinx_rtd_theme && \\\n    export HDF5_MPI=\"ON\" && \\\n    pip3 install --no-cache-dir --no-binary=h5py h5py meshio pygmsh\n# Install pybind11\nRUN wget -nc --quiet https://github.com/pybind/pybind11/archive/v${PYBIND11_VERSION}.tar.gz && \\\n    tar -xf v${PYBIND11_VERSION}.tar.gz && \\\n    cd pybind11-${PYBIND11_VERSION} && \\\n    mkdir build && \\\n    cd build && \\\n    cmake -DPYBIND11_TEST=False ../ && \\\n    make install && \\\n    rm -rf /tmp/* && rm v${PYBIND11_VERSION}.tar.gz\n\nWORKDIR /root\n\n########################################\n\nFROM base as dev-env-real\nLABEL maintainer=\"fenics-project <fenics-support@googlegroups.org>\"\nLABEL description=\"FEniCS development environment with PETSc real mode\"\n\nARG PETSC_VERSION\nARG PETSC4PY_VERSION\nARG SLEPC_VERSION\nARG SLEPC4PY_VERSION\n\nARG MAKEFLAGS\nARG PETSC_SLEPC_OPTFLAGS\nARG PETSC_SLEPC_DEBUGGING\n\nWORKDIR /tmp\n\n# Install PETSc and SLEPc with real types.\nRUN apt-get -qq update && \\\n    apt-get -y --no-install-recommends install bison flex python && \\\n    wget -nc --quiet https://bitbucket.org/petsc/petsc/get/v${PETSC_VERSION}.tar.gz -O petsc-${PETSC_VERSION}.tar.gz && \\\n    mkdir -p petsc-src && tar -xf petsc-${PETSC_VERSION}.tar.gz -C petsc-src --strip-components 1 && \\\n    cd petsc-src && \\\n    ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" \\\n        --COPTFLAGS=${PETSC_SLEPC_OPTFLAGS} \\\n        --CXXOPTFLAGS=${PETSC_SLEPC_OPTFLAGS} \\\n        --FOPTFLAGS=${PETSC_SLEPC_OPTFLAGS} \\\n        --with-debugging=${PETSC_SLEPC_DEBUGGING} \\\n        --with-fortran-bindings=no \\\n        --download-blacs \\\n        --download-hypre \\\n        --download-metis \\\n        --download-mumps \\\n        --download-ptscotch \\\n        --download-scalapack \\\n        --download-spai \\\n        --download-suitesparse \\\n        --download-superlu \\\n        --with-scalar-type=real \\\n        --prefix=/usr/local/petsc && \\\n    make ${MAKEFLAGS} && \\\n    make install && \\\n    export PETSC_DIR=/usr/local/petsc && \\\n    cd /tmp && \\\n    wget -nc --quiet https://slepc.upv.es/download/distrib/slepc-${SLEPC_VERSION}.tar.gz -O slepc-${SLEPC_VERSION}.tar.gz && \\\n    mkdir -p slepc-src && tar -xf slepc-${SLEPC_VERSION}.tar.gz -C slepc-src --strip-components 1 && \\\n    cd slepc-src && \\\n    ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --prefix=/usr/local/slepc && \\\n    make ${MAKEFLAGS} && \\\n    make install && \\\n    apt-get -y purge bison flex python && \\\n    apt-get -y autoremove && \\\n    apt-get clean && \\\n    rm -rf /tmp/* && \\\n    rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/* && rm petsc-${PETSC_VERSION}.tar.gz\n\nENV PETSC_DIR=/usr/local/petsc SLEPC_DIR=/usr/local/slepc\n\n# Install petsc4py and slepc4py\nRUN pip3 install --no-cache-dir petsc4py==${PETSC4PY_VERSION} && \\\n    pip3 install --no-cache-dir slepc4py==${SLEPC4PY_VERSION}\n\nWORKDIR /root\n\n########################################\n\nFROM base as dev-env-complex\nLABEL description=\"FEniCS development environment with PETSc complex mode\"\n\nARG PETSC_VERSION\nARG PETSC4PY_VERSION\nARG SLEPC_VERSION\nARG SLEPC4PY_VERSION\n\nARG MAKEFLAGS\nARG PETSC_SLEPC_OPTFLAGS\nARG PETSC_SLEPC_DEBUGGING\n\nWORKDIR /tmp\n\n# Install PETSc and SLEPc with complex scalar types\nRUN apt-get -qq update && \\\n    apt-get -y --no-install-recommends install bison flex python && \\\n    wget -nc --quiet https://bitbucket.org/petsc/petsc/get/v${PETSC_VERSION}.tar.gz -O petsc-${PETSC_VERSION}.tar.gz && \\\n    mkdir -p petsc-src && tar -xf petsc-${PETSC_VERSION}.tar.gz -C petsc-src --strip-components 1 && \\\n    cd petsc-src && \\\n    ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" \\\n        --COPTFLAGS=${PETSC_SLEPC_OPTFLAGS} \\\n        --CXXOPTFLAGS=${PETSC_SLEPC_OPTFLAGS} \\\n        --FOPTFLAGS=${PETSC_SLEPC_OPTFLAGS} \\\n        --with-debugging=${PETSC_SLEPC_DEBUGGING} \\\n        --with-fortran-bindings=no \\\n        --download-blacs \\\n        --download-metis \\\n        --download-mumps \\\n        --download-ptscotch \\\n        --download-scalapack \\\n        --download-suitesparse \\\n        --download-superlu \\\n        --with-scalar-type=complex \\\n        --prefix=/usr/local/petsc && \\\n    make ${MAKEFLAGS} && \\\n    make install && \\\n    export PETSC_DIR=/usr/local/petsc && \\\n    cd /tmp && \\\n    wget -nc --quiet https://slepc.upv.es/download/distrib/slepc-${SLEPC_VERSION}.tar.gz -O slepc-${SLEPC_VERSION}.tar.gz && \\\n    mkdir -p slepc-src && tar -xf slepc-${SLEPC_VERSION}.tar.gz -C slepc-src --strip-components 1 && \\\n    cd slepc-src && \\\n    ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --prefix=/usr/local/slepc && \\\n    make ${MAKEFLAGS} && \\\n    make install && \\\n    apt-get -y purge bison flex python && \\\n    apt-get -y autoremove && \\\n    apt-get clean && \\\n    rm -rf /tmp/* && \\\n    rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/* && rm petsc-${PETSC_VERSION}.tar.gz\n\nENV PETSC_DIR=/usr/local/petsc SLEPC_DIR=/usr/local/slepc\n\n# Install complex petsc4py and slepc4py\nRUN pip3 install --no-cache-dir petsc4py==${PETSC4PY_VERSION} && \\\n    pip3 install --no-cache-dir slepc4py==${SLEPC4PY_VERSION}\n\nWORKDIR /root\n\n########################################\n\nFROM dev-env-real as real\nLABEL description=\"DOLFIN-X in real mode\"\n\nARG MAKEFLAGS\n\nWORKDIR /tmp\n\n# Install ipython (optional), FIAT, UFL and ffcX (development\n# versions, master branch)\nRUN pip3 install --no-cache-dir ipython && \\\n    pip3 install --no-cache-dir git+https://bitbucket.org/fenics-project/fiat.git && \\\n    pip3 install --no-cache-dir git+https://bitbucket.org/fenics-project/ufl.git && \\\n    pip3 install --no-cache-dir git+https://github.com/fenics/ffcX\n\n# Install dolfinx\nRUN git clone https://github.com/fenics/dolfinx.git && \\\n    cd dolfinx && \\\n    mkdir build && \\\n    cd build && \\\n    cmake -G Ninja ../cpp && \\\n    ninja ${MAKEFLAGS} install && \\\n    cd ../python && \\\n    pip3 install --no-cache-dir . && \\\n    rm -rf /tmp/*\n\nWORKDIR /root\n\n########################################\n\nFROM dev-env-complex as complex\nLABEL description=\"DOLFIN-X in complex mode\"\n\nARG MAKEFLAGS\n\nWORKDIR /tmp\n\n# Install ipython (optional), FIAT, UFL and ffcX (development versions,\n# master branch)\nRUN pip3 install --no-cache-dir ipython && \\\n    pip3 install --no-cache-dir git+https://bitbucket.org/fenics-project/fiat.git && \\\n    pip3 install --no-cache-dir git+https://bitbucket.org/fenics-project/ufl.git && \\\n    pip3 install --no-cache-dir git+https://github.com/fenics/ffcX\n\n# Install dolfinx\nRUN git clone https://github.com/fenics/dolfinx.git && \\\n    cd dolfinx && \\\n    mkdir build && \\\n    cd build && \\\n    cmake -G Ninja ../cpp && \\\n    ninja ${MAKEFLAGS} install && \\\n    cd ../python && \\\n    pip3 install --no-cache-dir . && \\\n    rm -rf /tmp/*\n\nWORKDIR /root\n\n########################################\n\nFROM real as notebook\nLABEL description=\"DOLFIN-X Jupyter Notebook\"\nWORKDIR /root\n\nARG TINI_VERSION\nADD https://github.com/krallin/tini/releases/download/${TINI_VERSION}/tini /tini\nRUN chmod +x /tini && \\\n    pip3 install --no-cache-dir jupyter jupyterlab\n\nENTRYPOINT [\"/tini\", \"--\", \"jupyter\", \"notebook\", \"--ip\", \"0.0.0.0\", \"--no-browser\", \"--allow-root\"]\n\n########################################\n\nFROM complex as notebook-complex\nLABEL description=\"DOLFIN-X (complex mode) Jupyter Notebook\"\n\nARG TINI_VERSION\nADD https://github.com/krallin/tini/releases/download/${TINI_VERSION}/tini /tini\nRUN chmod +x /tini && \\\n    pip3 install --no-cache-dir jupyter jupyterlab\n\nWORKDIR /root\nENTRYPOINT [\"/tini\", \"--\", \"jupyter\", \"notebook\", \"--ip\", \"0.0.0.0\", \"--no-browser\", \"--allow-root\"]\n\n########################################\n\nFROM notebook as lab\nLABEL description=\"DOLFIN-X Jupyter Lab\"\n\nWORKDIR /root\nENTRYPOINT [\"/tini\", \"--\", \"jupyter\", \"lab\", \"--ip\", \"0.0.0.0\", \"--no-browser\", \"--allow-root\"]\n\n########################################\n\nFROM notebook-complex as lab-complex\nLABEL description=\"DOLFIN-X (complex mode) Jupyter Lab\"\n\nWORKDIR /root\nENTRYPOINT [\"/tini\", \"--\", \"jupyter\", \"lab\", \"--ip\", \"0.0.0.0\", \"--no-browser\", \"--allow-root\"]\n"
}