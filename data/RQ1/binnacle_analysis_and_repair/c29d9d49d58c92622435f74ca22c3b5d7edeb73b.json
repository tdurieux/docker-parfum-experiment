{
  "startTime": 1674236350953,
  "endTime": 1674236351155,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 78,
        "lineEnd": 78,
        "columnStart": 7,
        "columnEnd": 98
      }
    },
    {
      "rule": "rmRecursiveAfterMktempD",
      "position": {
        "lineStart": 47,
        "lineEnd": 47,
        "columnStart": 27,
        "columnEnd": 36
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 81,
        "lineEnd": 81,
        "columnStart": 7,
        "columnEnd": 38
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 79,
        "lineEnd": 79,
        "columnStart": 7,
        "columnEnd": 38
      }
    },
    {
      "rule": "gpgUseBatchFlag",
      "position": {
        "lineStart": 63,
        "lineEnd": 63,
        "columnStart": 10,
        "columnEnd": 80
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 16,
        "lineEnd": 29,
        "columnStart": 4,
        "columnEnd": 14
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM jupyter/minimal-notebook:1af3089901bb\n#FROM jupyter/tensorflow-notebook:1af3089901bb\n\nUSER root\n\n# Set WORKDIR\nWORKDIR /root\n\n# These apt-get packages are the only unpinned dependencies, so they are presumably\n# the only elements in the image build process that introduce the risk of\n# non-reproducibility. That is, they could in theory change in a way that\n# broke backward compatibility, and caused subsequent builds of the docker image\n# to function differently.\n\n# Install related packages and set LLVM 3.8 as the compiler\nRUN apt-get -q update && \\\n    apt-get -q --no-install-recommends install -y \\\n    make \\\n    libc6-dev \\\n    clang-3.8 \\\n    curl \\\n    libedit-dev \\\n    libpython2.7 \\\n    libicu-dev \\\n    libssl-dev \\\n    libxml2 \\\n    tzdata \\\n    git \\\n    libcurl4-openssl-dev \\\n    pkg-config \\\n    && update-alternatives --quiet --install /usr/bin/clang clang /usr/bin/clang-3.8 100 \\\n    && update-alternatives --quiet --install /usr/bin/clang++ clang++ /usr/bin/clang++-3.8 100 \\\n    && rm -r /var/lib/apt/lists/*\n\n# Everything up to here should cache nicely between Swift versions, assuming dev dependencies change little\nARG SWIFT_PLATFORM=ubuntu16.04\nARG SWIFT_BRANCH=swift-4.1-release\nARG SWIFT_VERSION=swift-4.1-RELEASE\n\nENV SWIFT_PLATFORM=$SWIFT_PLATFORM \\\n    SWIFT_BRANCH=$SWIFT_BRANCH \\\n    SWIFT_VERSION=$SWIFT_VERSION\n\n# Download GPG keys, signature and Swift package, then unpack, cleanup and execute permissions for foundation libs\nRUN SWIFT_URL=https://swift.org/builds/$SWIFT_BRANCH/$(echo \"$SWIFT_PLATFORM\" | tr -d .)/$SWIFT_VERSION/$SWIFT_VERSION-$SWIFT_PLATFORM.tar.gz \\\n    && curl -fSsL $SWIFT_URL -o swift.tar.gz \\\n    && curl -fSsL $SWIFT_URL.sig -o swift.tar.gz.sig \\\n    && export GNUPGHOME=\"$(mktemp -d)\" \\\n    && set -e; rm -rf -d \\\n        for key in \\\n      # pub   rsa4096 2017-11-07 [SC] [expires: 2019-11-07]\n      # 8513444E2DA36B7C1659AF4D7638F1FB2B2B08C4\n      # uid           [ unknown] Swift Automatic Signing Key #2 <swift-infrastructure@swift.org>\n          8513444E2DA36B7C1659AF4D7638F1FB2B2B08C4 \\\n      # pub   4096R/91D306C6 2016-05-31 [expires: 2018-05-31]\n      #       Key fingerprint = A3BA FD35 56A5 9079 C068  94BD 63BC 1CFE 91D3 06C6\n      # uid                  Swift 3.x Release Signing Key <swift-infrastructure@swift.org>\n          A3BAFD3556A59079C06894BD63BC1CFE91D306C6 \\\n      # pub   4096R/71E1B235 2016-05-31 [expires: 2019-06-14]\n      #       Key fingerprint = 5E4D F843 FB06 5D7F 7E24  FBA2 EF54 30F0 71E1 B235\n      # uid                  Swift 4.x Release Signing Key <swift-infrastructure@swift.org>\n          5E4DF843FB065D7F7E24FBA2EF5430F071E1B235; \\\n        do \\\n          gpg --batch --quiet --keyserver ha.pool.sks-keyservers.net --recv-keys \"$key\"; \\\n        done \\\n    && gpg --batch --verify --quiet swift.tar.gz.sig swift.tar.gz \\\n    && tar -xzf swift.tar.gz --directory / --strip-components=1 \\\n    && rm -r \"$GNUPGHOME\" swift.tar.gz.sig swift.tar.gz \\\n    && chmod -R o+r /usr/lib/swift\n\n# Print Installed Swift Version\nRUN swift --version\n\n# RUN apt-get update && \\\n# apt-get -y install build-essential\n\n# Install ZMQ\nRUN cd /tmp/ \\\n    && curl -f -L -O https://github.com/zeromq/zeromq4-1/releases/download/v4.1.4/zeromq-4.1.4.tar.gz \\\n    && tar xf /tmp/zeromq-4.1.4.tar.gz \\\n    && cd /tmp/zeromq-4.1.4 \\\n    && ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --without-libsodium \\\n    && make \\\n    && make install \\\n    && ldconfig && rm /tmp/zeromq-4.1.4.tar.gz\n\n# Build swift kernel executable as root in /kernels/iSwift\nRUN mkdir -p /kernels/iSwift\n# copy only the Swift package itself and iSwiftKernel, so that we don't\n# trigger image rebuilds when we edit docs or pieces of the Dockerfile\n# itself which are irrelevant to the image\nCOPY Includes /kernels/iSwift/Includes/\nCOPY Package.swift /kernels/iSwift/\nCOPY Sources iSwiftKernel /kernels/iSwift/Sources/\nCOPY iSwiftKernel /kernels/iSwift/iSwiftKernel/\nWORKDIR /kernels/iSwift\nRUN swift package update\nRUN swift build\n\n# But install the kernelspec into jupyter as the NB_USER\nUSER ${NB_USER}\nRUN jupyter kernelspec install --user /kernels/iSwift/iSwiftKernel\n\n# Change the Swift kernel executable to be onwed by NB_USER, so we can run it\nUSER root\nRUN chown -R ${NB_USER} /kernels/iSwift\nUSER $NB_USER\n\nUSER ${NB_USER}\nWORKDIR /home/${NB_USER}\n"
}