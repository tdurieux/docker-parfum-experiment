{
  "startTime": 1674249471657,
  "endTime": 1674249471690,
  "originalSmells": [
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 24,
        "lineEnd": 24,
        "columnStart": 4,
        "columnEnd": 15
      }
    },
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 39,
        "lineEnd": 39,
        "columnStart": 4,
        "columnEnd": 15
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# PRODUCTION DOCKERFILE\n# ---------------------\n# This Dockerfile allows to build a Docker image of the NestJS application\n# and based on a NodeJS 8 image. The multi-stage mechanism allows to build\n# the application in a \"builder\" stage and then create a lightweight production\n# image containing the required dependencies and the JS build files.\n#\n# Dockerfile best practices\n# https://docs.docker.com/develop/develop-images/dockerfile_best-practices/\n# Dockerized NodeJS best practices\n# https://github.com/nodejs/docker-node/blob/master/docs/BestPractices.md\n# https://www.bretfisher.com/node-docker-good-defaults/\n# http://goldbergyoni.com/checklist-best-practice-of-node-js-in-production/\n\nFROM node:10-alpine as builder\n\nENV NODE_ENV build\n\nUSER node\nWORKDIR /home/node\n\nCOPY . /home/node\n\nRUN npm install \\\n    && npm run build && npm cache clean --force;\n\n# ---\n\nFROM node:10-alpine\n\nENV NODE_ENV production\n\nUSER node\nWORKDIR /home/node\n\nCOPY --from=builder /home/node/package*.json /home/node/\nCOPY --from=builder /home/node/dist/ /home/node/dist/\n\nRUN npm install && npm cache clean --force;\n\nCMD [\"node\", \"dist/server.js\"]\n"
}