{
  "startTime": 1674235352724,
  "endTime": 1674235352847,
  "originalSmells": [
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 57,
        "lineEnd": 57,
        "columnStart": 21,
        "columnEnd": 78
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 57,
        "lineEnd": 57,
        "columnStart": 21,
        "columnEnd": 78
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# -*- mode: dockerfile -*-\n# Licensed to the Apache Software Foundation (ASF) under one\n# or more contributor license agreements.  See the NOTICE file\n# distributed with this work for additional information\n# regarding copyright ownership.  The ASF licenses this file\n# to you under the Apache License, Version 2.0 (the\n# \"License\"); you may not use this file except in compliance\n# with the License.  You may obtain a copy of the License at\n#\n#   http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing,\n# software distributed under the License is distributed on an\n# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n# KIND, either express or implied.  See the License for the\n# specific language governing permissions and limitations\n# under the License.\n#\n# Dockerfile to build libmxnet.so, and a python wheel for the Jetson TX1/TX2\n# This script assumes /work/mxnet exists and contains the mxnet code you wish to compile and\n# that /work/build exists and is the target for your output.\n\nFROM nvidia/cuda:9.0-cudnn7-devel as cudabuilder\n\nFROM dockcross/linux-arm64\n\nENV ARCH aarch64\nENV FC /usr/bin/${CROSS_TRIPLE}-gfortran\nENV HOSTCC gcc\nENV TARGET ARMV8\n\nWORKDIR /work\n\n# Build OpenBLAS\nADD https://api.github.com/repos/xianyi/OpenBLAS/git/refs/tags/v0.2.20 openblas_version.json\nRUN git clone --recursive -b v0.2.20 https://github.com/xianyi/OpenBLAS.git && \\\n    cd OpenBLAS && \\\n    make -j$(nproc) && \\\n    PREFIX=${CROSS_ROOT} make install\n\n# Setup CUDA build env (including configuring and copying nvcc)\nCOPY --from=cudabuilder /usr/local/cuda /usr/local/cuda\nENV TARGET_ARCH aarch64\nENV TARGET_OS linux\n\n# Install ARM depedencies based on Jetpack 3.2\nRUN JETPACK_DOWNLOAD_PREFIX=http://developer.download.nvidia.com/devzone/devcenter/mobile/jetpack_l4t/3.2GA/m892ki/JetPackL4T_32_b196/ && \\\n    ARM_CUDA_INSTALLER_PACKAGE=cuda-repo-l4t-9-0-local_9.0.252-1_arm64.deb && \\\n    ARM_CUDNN_INSTALLER_PACKAGE=libcudnn7_7.0.5.13-1+cuda9.0_arm64.deb && \\\n    ARM_CUDNN_DEV_INSTALLER_PACKAGE=libcudnn7-dev_7.0.5.13-1+cuda9.0_arm64.deb && \\\n    wget -nv $JETPACK_DOWNLOAD_PREFIX/$ARM_CUDA_INSTALLER_PACKAGE && \\\n    wget -nv $JETPACK_DOWNLOAD_PREFIX/$ARM_CUDNN_INSTALLER_PACKAGE && \\\n    wget -nv $JETPACK_DOWNLOAD_PREFIX/$ARM_CUDNN_DEV_INSTALLER_PACKAGE && \\\n    dpkg -i $ARM_CUDA_INSTALLER_PACKAGE && \\\n    apt-key add /var/cuda-repo-9-0-local/7fa2af80.pub && \\\n    dpkg -i $ARM_CUDNN_INSTALLER_PACKAGE && \\\n    dpkg -i $ARM_CUDNN_DEV_INSTALLER_PACKAGE && \\\n    apt update -y && apt install --no-install-recommends -y unzip cuda-libraries-dev-9-0 libcudnn7-dev && rm -rf /var/lib/apt/lists/*;\n\nENV PATH $PATH:/usr/local/cuda/bin\nENV NVCCFLAGS \"-m64\"\nENV CUDA_ARCH \"-gencode arch=compute_53,code=sm_53 -gencode arch=compute_62,code=sm_62\"\nENV NVCC /usr/local/cuda/bin/nvcc\n\nCOPY runtime_functions.sh /work/\nWORKDIR /work/mxnet\n"
}