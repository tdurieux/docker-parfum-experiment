{
  "startTime": 1674236874119,
  "endTime": 1674236876214,
  "originalSmells": [
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 28,
        "lineEnd": 28,
        "columnStart": 5,
        "columnEnd": 67
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 38,
        "lineEnd": 38,
        "columnStart": 5,
        "columnEnd": 67
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 48,
        "lineEnd": 48,
        "columnStart": 4,
        "columnEnd": 82
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 59,
        "lineEnd": 59,
        "columnStart": 4,
        "columnEnd": 82
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 70,
        "lineEnd": 70,
        "columnStart": 4,
        "columnEnd": 96
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 82,
        "lineEnd": 82,
        "columnStart": 4,
        "columnEnd": 82
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 94,
        "lineEnd": 94,
        "columnStart": 4,
        "columnEnd": 82
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 106,
        "lineEnd": 106,
        "columnStart": 4,
        "columnEnd": 158
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 132,
        "lineEnd": 132,
        "columnStart": 5,
        "columnEnd": 83
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 278,
        "lineEnd": 278,
        "columnStart": 4,
        "columnEnd": 15
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 290,
        "lineEnd": 290,
        "columnStart": 4,
        "columnEnd": 64
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 360,
        "lineEnd": 360,
        "columnStart": 4,
        "columnEnd": 600
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 19,
        "lineEnd": 19,
        "columnStart": 8,
        "columnEnd": 38
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 204,
        "lineEnd": 204,
        "columnStart": 4,
        "columnEnd": 39
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 19,
        "lineEnd": 19,
        "columnStart": 8,
        "columnEnd": 38
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 204,
        "lineEnd": 204,
        "columnStart": 4,
        "columnEnd": 39
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 5,
        "lineEnd": 5,
        "columnStart": 53,
        "columnEnd": 240
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 19,
        "lineEnd": 19,
        "columnStart": 8,
        "columnEnd": 38
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 142,
        "lineEnd": 142,
        "columnStart": 54,
        "columnEnd": 111
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 204,
        "lineEnd": 204,
        "columnStart": 4,
        "columnEnd": 39
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 322,
        "lineEnd": 322,
        "columnStart": 53,
        "columnEnd": 148
      }
    }
  ],
  "repairedSmells": [
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 18,
        "lineEnd": 18,
        "columnStart": 8,
        "columnEnd": 62
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 203,
        "lineEnd": 203,
        "columnStart": 4,
        "columnEnd": 63
      }
    }
  ],
  "repairedDockerfile": "FROM ubuntu:18.04 AS build\nWORKDIR /home\n\n# COMMON BUILD TOOLS\nRUN DEBIAN_FRONTEND=noninteractive apt-get update && apt-get install -y -q --no-install-recommends build-essential autoconf make git wget pciutils cpio libtool lsb-release ca-certificates pkg-config bison flex libcurl4-gnutls-dev zlib1g-dev && rm -rf /var/lib/apt/lists/*;\n\n# Install cmake\nARG CMAKE_VER=3.13.1\nARG CMAKE_REPO=https://cmake.org/files\nRUN wget -O - ${CMAKE_REPO}/v${CMAKE_VER%.*}/cmake-${CMAKE_VER}.tar.gz | tar xz && \\\n    cd cmake-${CMAKE_VER} && \\\n    ./bootstrap --prefix=\"/usr\" --system-curl && \\\n    make -j8 && \\\n    make install\n\n# Install automake, use version 1.14 on CentOS\nARG AUTOMAKE_VER=1.14\nARG AUTOMAKE_REPO=https://ftp.gnu.org/pub/gnu/automake/automake-${AUTOMAKE_VER}.tar.xz\n    RUN apt-get install --no-install-recommends -y -q automake && rm -rf /var/lib/apt/lists/*;\n\n# Build NASM\nARG NASM_VER=2.13.03\nARG NASM_REPO=https://www.nasm.us/pub/nasm/releasebuilds/${NASM_VER}/nasm-${NASM_VER}.tar.bz2\nRUN wget ${NASM_REPO} && \\\n     tar -xaf nasm* && \\\n     cd nasm-${NASM_VER} && \\\n     ./autogen.sh && \\\n     ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --prefix=\"/usr\" --libdir=/usr/lib/x86_64-linux-gnu && \\\n     make -j8 && \\\n     make install\n\n# Build YASM\nARG YASM_VER=1.3.0\nARG YASM_REPO=https://www.tortall.net/projects/yasm/releases/yasm-${YASM_VER}.tar.gz\nRUN wget -O - ${YASM_REPO} | tar xz && \\\n     cd yasm-${YASM_VER} && \\\n     sed -i \"s/) ytasm.*/)/\" Makefile.in && \\\n     ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --prefix=\"/usr\" --libdir=/usr/lib/x86_64-linux-gnu && \\\n     make -j8 && \\\n     make install\n\n# Build ogg\nARG OGG_VER=1.3.3\nARG OGG_REPO=https://downloads.xiph.org/releases/ogg/libogg-${OGG_VER}.tar.xz\n\nRUN wget -O - ${OGG_REPO} | tar xJ && \\\n    cd libogg-${OGG_VER} && \\\n    ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --prefix=\"/usr\" --libdir=/usr/lib/x86_64-linux-gnu --enable-shared && \\\n    make -j8 && \\\n    make install DESTDIR=/home/build && \\\n    make install\n\n# Build vorbis\nARG VORBIS_VER=1.3.6\nARG VORBIS_REPO=https://downloads.xiph.org/releases/vorbis/libvorbis-${VORBIS_VER}.tar.xz\n\nRUN wget -O - ${VORBIS_REPO} | tar xJ && \\\n    cd libvorbis-${VORBIS_VER} && \\\n    ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --prefix=\"/usr\" --libdir=/usr/lib/x86_64-linux-gnu --enable-shared && \\\n    make -j8 && \\\n    make install DESTDIR=/home/build && \\\n    make install\n\n# Build mp3lame\nARG MP3LAME_VER=3.100\nARG MP3LAME_REPO=https://sourceforge.net/projects/lame/files/lame/${MP3LAME_VER}/lame-${MP3LAME_VER}.tar.gz\n\nRUN wget -O - ${MP3LAME_REPO} | tar xz && \\\n    cd lame-${MP3LAME_VER} && \\\n    ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --prefix=\"/usr\" --libdir=/usr/lib/x86_64-linux-gnu --enable-shared --enable-nasm && \\\n    make -j8 && \\\n    make install DESTDIR=/home/build && \\\n    make install\n\n# Build fdk-aac\nARG FDK_AAC_VER=v0.1.6\nARG FDK_AAC_REPO=https://github.com/mstorsjo/fdk-aac/archive/${FDK_AAC_VER}.tar.gz\n\nRUN wget -O - ${FDK_AAC_REPO} | tar xz && mv fdk-aac-${FDK_AAC_VER#v} fdk-aac && \\\n    cd fdk-aac && \\\n    autoreconf -fiv && \\\n    ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --prefix=\"/usr\" --libdir=/usr/lib/x86_64-linux-gnu --enable-shared && \\\n    make -j8 && \\\n    make install DESTDIR=/home/build && \\\n    make install\n\n\n# Build opus\nARG OPUS_VER=1.2.1\nARG OPUS_REPO=https://archive.mozilla.org/pub/opus/opus-${OPUS_VER}.tar.gz\n\nRUN wget -O - ${OPUS_REPO} | tar xz && \\\n    cd opus-${OPUS_VER} && \\\n    ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --prefix=\"/usr\" --libdir=/usr/lib/x86_64-linux-gnu --enable-shared && \\\n    make -j8 && \\\n    make install DESTDIR=/home/build && \\\n    make install\n\n# Build vpx\nARG VPX_VER=tags/v1.7.0\nARG VPX_REPO=https://chromium.googlesource.com/webm/libvpx.git\n\nRUN git clone ${VPX_REPO} && \\\n    cd libvpx && \\\n    git checkout ${VPX_VER} && \\\n    ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --prefix=\"/usr\" --libdir=/usr/lib/x86_64-linux-gnu --enable-shared --disable-examples --disable-unit-tests --enable-vp9-highbitdepth --as=nasm && \\\n    make -j8 && \\\n    make install DESTDIR=/home/build && \\\n    make install\n\n\n# Build AOM\nARG AOM_VER=b6f1767eedbaddeb1ff5aa409a710ef61078640e\nARG AOM_REPO=https://aomedia.googlesource.com/aom\n\nRUN  git clone ${AOM_REPO} && \\\n     mkdir aom/aom_build && \\\n     cd aom/aom_build && \\\n     git checkout ${AOM_VER} && \\\n     cmake -DBUILD_SHARED_LIBS=ON -DENABLE_NASM=ON -DENABLE_TESTS=OFF -DENABLE_DOCS=OFF -DCMAKE_INSTALL_PREFIX=\"/usr\" -DLIB_INSTALL_DIR=/usr/lib/x86_64-linux-gnu .. && \\\n     make -j8 && \\\n     make install DESTDIR=\"/home/build\" && \\\n     make install\n\n# Build x264\nARG X264_VER=stable\nARG X264_REPO=https://github.com/mirror/x264\n\nRUN git clone ${X264_REPO} && \\\n     cd x264 && \\\n     git checkout ${X264_VER} && \\\n     ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --prefix=\"/usr\" --libdir=/usr/lib/x86_64-linux-gnu --enable-shared && \\\n     make -j8 && \\\n     make install DESTDIR=\"/home/build\" && \\\n     make install\n\n\n# Build x265\nARG X265_VER=2.9\nARG X265_REPO=https://github.com/videolan/x265/archive/${X265_VER}.tar.gz\n\nRUN DEBIAN_FRONTEND=noninteractive apt-get update && apt-get install -y -q --no-install-recommends libnuma-dev && rm -rf /var/lib/apt/lists/*;\n\nRUN  wget -O - ${X265_REPO} | tar xz && mv x265-${X265_VER} x265 && \\\n     cd x265/build/linux && \\\n     cmake -DBUILD_SHARED_LIBS=ON -DENABLE_TESTS=OFF -DCMAKE_INSTALL_PREFIX=/usr -DLIB_INSTALL_DIR=/usr/lib/x86_64-linux-gnu ../../source && \\\n     make -j8 && \\\n     make install DESTDIR=\"/home/build\" && \\\n     make install\n\n# Fetch SVT-HEVC\nARG SVT_HEVC_VER=20a47b0d904e9d99e089d93d7c33af92788cbfdb\nARG SVT_HEVC_REPO=https://github.com/intel/SVT-HEVC\n\nRUN git clone ${SVT_HEVC_REPO} && \\\n    cd SVT-HEVC/Build/linux && \\\n    git checkout ${SVT_HEVC_VER} && \\\n    mkdir -p ../../Bin/Release && \\\n    cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=/usr -DCMAKE_INSTALL_LIBDIR=lib/x86_64-linux-gnu -DCMAKE_ASM_NASM_COMPILER=yasm ../.. && \\\n    make -j8 && \\\n    make install DESTDIR=/home/build && \\\n    make install\n\n\n# Fetch SVT-AV1\nARG SVT_AV1_VER=v0.5.0\nARG SVT_AV1_REPO=https://github.com/OpenVisualCloud/SVT-AV1\n\nRUN git clone ${SVT_AV1_REPO} && \\\n    cd SVT-AV1/Build/linux && \\\n    git checkout ${SVT_AV1_VER} && \\\n    mkdir -p ../../Bin/Release && \\\n    cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=/usr -DCMAKE_INSTALL_LIBDIR=lib/x86_64-linux-gnu -DCMAKE_ASM_NASM_COMPILER=yasm ../.. && \\\n    make -j8 && \\\n    make install DESTDIR=/home/build && \\\n    make install\n\n#Remove build residue from SVT-AV1 build -- temp fix for bug\nRUN if [ -d \"build/home/\" ]; then rm -rf build/home/; fi\n\n\n# Fetch SVT-VP9\nARG SVT_VP9_VER=d18b4acf9139be2e83150e318ffd3dba1c432e74\nARG SVT_VP9_REPO=https://github.com/OpenVisualCloud/SVT-VP9\n\nRUN git clone ${SVT_VP9_REPO} && \\\n    cd SVT-VP9/Build/linux && \\\n    git checkout ${SVT_VP9_VER} && \\\n    mkdir -p ../../Bin/Release && \\\n    cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=/usr -DCMAKE_INSTALL_LIBDIR=lib/x86_64-linux-gnu -DCMAKE_ASM_NASM_COMPILER=yasm ../.. && \\\n    make -j8 && \\\n    make install DESTDIR=/home/build && \\\n    make install\n\n#include(transform360.m4)\n# Build DLDT-Inference Engine\nARG DLDT_VER=2019_R1.1\nARG DLDT_REPO=https://github.com/opencv/dldt.git\nARG DLDT_C_API_1=https://raw.githubusercontent.com/VCDP/FFmpeg-patch/master/thirdparty/0001-Add-inference-engine-C-API.patch\nARG DLDT_C_API_2=https://raw.githubusercontent.com/VCDP/FFmpeg-patch/master/thirdparty/0002-Change-to-match-image-with-separate-planes.patch\nARG DLDT_C_API_3=https://raw.githubusercontent.com/VCDP/FFmpeg-patch/master/thirdparty/0003-Refine-IE-C-API.patch\nARG DLDT_C_API_4=https://raw.githubusercontent.com/VCDP/FFmpeg-patch/master/thirdparty/0004-Fix-code-style-and-symbols-visibility-for-2019R1.patch\n\nRUN apt-get -y --no-install-recommends install libusb-1.0.0-dev && rm -rf /var/lib/apt/lists/*;\n\nRUN git clone -b ${DLDT_VER} ${DLDT_REPO} && \\\n    cd dldt && \\\n    git submodule init && \\\n    git submodule update --recursive && \\\n    cd inference-engine && \\\n    wget -O - ${DLDT_C_API_1} | patch -p2 && \\\n    wget -O - ${DLDT_C_API_2} | patch -p2 && \\\n    wget -O - ${DLDT_C_API_3} | patch -p2 && \\\n    wget -O - ${DLDT_C_API_4} | patch -p2 && \\\n    mkdir build && \\\n    cd build && \\\n    cmake  -DCMAKE_INSTALL_PREFIX=/opt/intel/dldt -DLIB_INSTALL_PATH=/opt/intel/dldt -DENABLE_MKL_DNN=ON -DENABLE_CLDNN=OFF -DENABLE_SAMPLES=OFF .. && \\\n    make -j $(nproc) && \\\n    rm -rf ../bin/intel64/Release/lib/libgtest* && \\\n    rm -rf ../bin/intel64/Release/lib/libgmock* && \\\n    rm -rf ../bin/intel64/Release/lib/libmock* && \\\n    rm -rf ../bin/intel64/Release/lib/libtest*\n\nARG libdir=/opt/intel/dldt/inference-engine/lib/intel64\n\nRUN mkdir -p /opt/intel/dldt/inference-engine/include && \\\n    cp -r dldt/inference-engine/include/* /opt/intel/dldt/inference-engine/include && \\\n    mkdir -p ${libdir} && \\\n    cp -r dldt/inference-engine/bin/intel64/Release/lib/* ${libdir} && \\\n    mkdir -p /opt/intel/dldt/inference-engine/src && \\\n    cp -r dldt/inference-engine/src/* /opt/intel/dldt/inference-engine/src/ && \\\n    mkdir -p /opt/intel/dldt/inference-engine/share && \\\n    cp -r dldt/inference-engine/build/share/* /opt/intel/dldt/inference-engine/share/ && \\\n    mkdir -p /opt/intel/dldt/inference-engine/external/ && \\\n    cp -r dldt/inference-engine/temp/tbb /opt/intel/dldt/inference-engine/external/\n\nRUN mkdir -p build/opt/intel/dldt/inference-engine/include && \\\n    cp -r dldt/inference-engine/include/* build/opt/intel/dldt/inference-engine/include && \\\n    mkdir -p build${libdir} && \\\n    cp -r dldt/inference-engine/bin/intel64/Release/lib/* build${libdir} && \\\n    mkdir -p build/opt/intel/dldt/inference-engine/src && \\\n    cp -r dldt/inference-engine/src/* build/opt/intel/dldt/inference-engine/src/ && \\\n    mkdir -p build/opt/intel/dldt/inference-engine/share && \\\n    cp -r dldt/inference-engine/build/share/* build/opt/intel/dldt/inference-engine/share/ && \\\n    mkdir -p build/opt/intel/dldt/inference-engine/external/ && \\\n    cp -r dldt/inference-engine/temp/tbb build/opt/intel/dldt/inference-engine/external/\n\nRUN for p in /usr /home/build/usr /opt/intel/dldt/inference-engine /home/build/opt/intel/dldt/inference-engine; do \\\n        pkgconfiglibdir=\"$p/lib/x86_64-linux-gnu\" && \\\n        mkdir -p \"${pkgconfiglibdir}/pkgconfig\" && \\\n        pc=\"${pkgconfiglibdir}/pkgconfig/dldt.pc\" && \\\n        echo \"prefix=/opt\" > \"$pc\" && \\\n        echo \"libdir=${libdir}\" >> \"$pc\" && \\\n        echo \"includedir=/opt/intel/dldt/inference-engine/include\" >> \"$pc\" && \\\n        echo \"\" >> \"$pc\" && \\\n        echo \"Name: DLDT\" >> \"$pc\" && \\\n        echo \"Description: Intel Deep Learning Deployment Toolkit\" >> \"$pc\" && \\\n        echo \"Version: 5.0\" >> \"$pc\" && \\\n        echo \"\" >> \"$pc\" && \\\n        echo \"Libs: -L\\${libdir} -linference_engine -linference_engine_c_wrapper\" >> \"$pc\" && \\\n        echo \"Cflags: -I\\${includedir}\" >> \"$pc\"; \\\n    done;\n\nENV InferenceEngine_DIR=/opt/intel/dldt/inference-engine/share\nENV LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/opt/intel/dldt/inference-engine/lib:/opt/intel/dldt/inference-engine/external/tbb/lib:${libdir}\n\n#install Model Optimizer in the DLDT for Dev\n\n\n\n# Build libjson-c\nARG LIBJSONC_VER=0.13.1-20180305\nARG LIBJSONC_REPO=https://github.com/json-c/json-c/archive/json-c-${LIBJSONC_VER}.tar.gz\n\nRUN wget -O - ${LIBJSONC_REPO} | tar xz && \\\n    cd json-c-json-c-${LIBJSONC_VER} && \\\n    sh autogen.sh && \\\n    ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" && \\\n    make -j8 && \\\n    make install DESTDIR=\"/home/build\" && \\\n    make install;\n\n# Build librdkafka\nARG LIBRDKAFKA_VER=0.11.6\nARG FILE_NAME=v${LIBRDKAFKA_VER}\nARG LIBRDKAFKA_REPO=https://github.com/edenhill/librdkafka/archive/${FILE_NAME}.tar.gz\n\nRUN wget -O - ${LIBRDKAFKA_REPO} | tar xz && \\\n    cd librdkafka-${LIBRDKAFKA_VER} && \\\n    ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --prefix=/usr --libdir=/usr/lib/x86_64-linux-gnu && \\\n    make -j8 && \\\n    make install DESTDIR=/home/build && \\\n    make install;\n\n# Fetch FFmpeg source\nARG FFMPEG_VER=n4.1\nARG FFMPEG_REPO=https://github.com/FFmpeg/FFmpeg/archive/${FFMPEG_VER}.tar.gz\nARG FFMPEG_FLV_PATCH_REPO=https://raw.githubusercontent.com/VCDP/CDN/master/The-RTMP-protocol-extensions-for-H.265-HEVC.patch\nARG FFMPEG_1TN_PATCH_REPO=https://patchwork.ffmpeg.org/patch/11625/raw\nARG FFMPEG_THREAD_PATCH_REPO=https://patchwork.ffmpeg.org/patch/11035/raw\nARG FFMPEG_MA_PATCH_REPO_01=https://raw.githubusercontent.com/VCDP/FFmpeg-patch/master/media-analytics/0001-Intel-inference-engine-detection-filter.patch\nARG FFMPEG_MA_PATCH_REPO_02=https://raw.githubusercontent.com/VCDP/FFmpeg-patch/master/media-analytics/0002-New-filter-to-do-inference-classify.patch\nARG FFMPEG_MA_PATCH_REPO_03=https://raw.githubusercontent.com/VCDP/FFmpeg-patch/master/media-analytics/0003-iemetadata-convertor-muxer.patch\nARG FFMPEG_MA_PATCH_REPO_04=https://raw.githubusercontent.com/VCDP/FFmpeg-patch/master/media-analytics/0004-Kafka-protocol-producer.patch\nARG FFMPEG_MA_PATCH_REPO_05=https://raw.githubusercontent.com/VCDP/FFmpeg-patch/master/media-analytics/0005-Support-object-detection-and-featured-face-identific.patch\nARG FFMPEG_MA_PATCH_REPO_06=https://raw.githubusercontent.com/VCDP/FFmpeg-patch/master/media-analytics/0006-Send-metadata-in-a-packet-and-refine-the-json-format.patch\nARG FFMPEG_MA_PATCH_REPO_07=https://raw.githubusercontent.com/VCDP/FFmpeg-patch/master/media-analytics/0007-Refine-features-of-IE-filters.patch\nARG FFMPEG_MA_PATCH_REPO_08=https://raw.githubusercontent.com/VCDP/FFmpeg-patch/master/media-analytics/0008-fixed-extra-comma-in-iemetadata.patch\nARG FFMPEG_MA_PATCH_REPO_09=https://raw.githubusercontent.com/VCDP/FFmpeg-patch/master/media-analytics/0009-add-source-as-option-source-url-calculate-nano-times.patch\nARG FFMPEG_MA_PATCH_REPO_10=https://raw.githubusercontent.com/VCDP/FFmpeg-patch/master/media-analytics/0010-fixed-buffer-overflow-issue-in-iemetadata.patch\nARG FFMPEG_MA_PATCH_REPO_11=https://raw.githubusercontent.com/VCDP/FFmpeg-patch/master/media-analytics/0011-libavutil-add-RGBP-pixel-format.patch\nARG FFMPEG_MA_PATCH_REPO_12=https://raw.githubusercontent.com/VCDP/FFmpeg-patch/master/media-analytics/0012-Add-more-devices-into-target.patch\nARG FFMPEG_MA_PATCH_REPO_13=https://raw.githubusercontent.com/VCDP/FFmpeg-patch/master/media-analytics/0013-Enable-vaapi-scale-for-IE-inference-filter.patch\nARG FFMPEG_MA_PATCH_REPO_14=https://raw.githubusercontent.com/VCDP/FFmpeg-patch/master/media-analytics/0014-iemetadata-it-will-provide-data-frame-by-frame-by-de.patch\nARG FFMPEG_MA_PATCH_REPO_15=https://raw.githubusercontent.com/VCDP/FFmpeg-patch/master/media-analytics/0015-Add-libcjson-for-model-pre-post-processing.patch\nARG FFMPEG_MA_PATCH_REPO_16=https://raw.githubusercontent.com/VCDP/FFmpeg-patch/master/media-analytics/0016-Change-IE-filters-to-use-model-proc.patch\nARG FFMPEG_MA_PATCH_REPO_17=https://raw.githubusercontent.com/VCDP/FFmpeg-patch/master/media-analytics/0017-refine-total-fps-without-init-filter-and-add-decode-.patch\nARG FFMPEG_MA_PATCH_REPO_18=https://raw.githubusercontent.com/VCDP/FFmpeg-patch/master/media-analytics/0018-Bugs-fixing.patch\nARG FFMPEG_MA_PATCH_REPO_19=https://raw.githubusercontent.com/VCDP/FFmpeg-patch/master/media-analytics/0019-Face-reidentification-refine.patch\nARG FFMPEG_MA_PATCH_REPO_20=https://raw.githubusercontent.com/VCDP/FFmpeg-patch/master/media-analytics/0020-More-changes-within-one-patch.patch\n\nRUN DEBIAN_FRONTEND=noninteractive apt-get update && apt-get install -y -q --no-install-recommends libass-dev libfreetype6-dev zlib1g-dev libssl-dev && rm -rf /var/lib/apt/lists/*;\n\nRUN wget -O - ${FFMPEG_REPO} | tar xz && mv FFmpeg-${FFMPEG_VER} FFmpeg && \\\n    cd FFmpeg && \\\n    wget -O - ${FFMPEG_FLV_PATCH_REPO} | patch -p1 && \\\n    wget -O - ${FFMPEG_1TN_PATCH_REPO} | patch -p1 && \\\n    wget -O - ${FFMPEG_THREAD_PATCH_REPO} | patch -p1 && \\\n    wget -O - ${FFMPEG_MA_PATCH_REPO_01} | patch -p1 && \\\n    wget -O - ${FFMPEG_MA_PATCH_REPO_02} | patch -p1 && \\\n    wget -O - ${FFMPEG_MA_PATCH_REPO_03} | patch -p1 && \\\n    wget -O - ${FFMPEG_MA_PATCH_REPO_04} | patch -p1 && \\\n    wget -O - ${FFMPEG_MA_PATCH_REPO_05} | patch -p1 && \\\n    wget -O - ${FFMPEG_MA_PATCH_REPO_06} | patch -p1 && \\\n    wget -O - ${FFMPEG_MA_PATCH_REPO_07} | patch -p1 && \\\n    wget -O - ${FFMPEG_MA_PATCH_REPO_08} | patch -p1 && \\\n    wget -O - ${FFMPEG_MA_PATCH_REPO_09} | patch -p1 && \\\n    wget -O - ${FFMPEG_MA_PATCH_REPO_10} | patch -p1 && \\\n    wget -O - ${FFMPEG_MA_PATCH_REPO_11} | patch -p1 && \\\n    wget -O - ${FFMPEG_MA_PATCH_REPO_12} | patch -p1 && \\\n    wget -O - ${FFMPEG_MA_PATCH_REPO_13} | patch -p1 && \\\n    wget -O - ${FFMPEG_MA_PATCH_REPO_14} | patch -p1 && \\\n    wget -O - ${FFMPEG_MA_PATCH_REPO_15} | patch -p1 && \\\n    wget -O - ${FFMPEG_MA_PATCH_REPO_16} | patch -p1 && \\\n    wget -O - ${FFMPEG_MA_PATCH_REPO_17} | patch -p1 && \\\n    wget -O - ${FFMPEG_MA_PATCH_REPO_18} | patch -p1 && \\\n    wget -O - ${FFMPEG_MA_PATCH_REPO_19} | patch -p1 && \\\n    wget -O - ${FFMPEG_MA_PATCH_REPO_20} | patch -p1;\n\n# Patch FFmpeg source for SVT-HEVC\nRUN cd /home/FFmpeg && \\\n    patch -p1 < ../SVT-HEVC/ffmpeg_plugin/0001-lavc-svt_hevc-add-libsvt-hevc-encoder-wrapper.patch;\n\n# Patch FFmpeg source for SVT-AV1\nRUN cd /home/FFmpeg; \\\n    patch -p1 < ../SVT-AV1/ffmpeg_plugin/0001-Add-ability-for-ffmpeg-to-run-svt-av1-with-svt-hevc.patch;\n\n# Compile FFmpeg\nRUN cd /home/FFmpeg && \\\n    ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --prefix=\"/usr\" --libdir=/usr/lib/x86_64-linux-gnu --extra-libs=\"-lpthread -lm\" --enable-shared --enable-gpl --enable-libass --enable-libfreetype --disable-xlib --disable-sdl2 --enable-openssl --enable-nonfree --disable-vaapi --disable-hwaccels --disable-doc --disable-htmlpages --disable-manpages --disable-podpages --disable-txtpages --enable-libfdk-aac --enable-libmp3lame --enable-libopus --enable-libvorbis --enable-libvpx --enable-libx264 --enable-libx265 --enable-libaom --enable-libsvthevc --enable-libsvtav1 --enable-libinference_engine --enable-librdkafka --enable-libjson_c && \\\n    make -j8 && \\\n    make install DESTDIR=\"/home/build\"\n\n\n# Clean up after build\nRUN rm -rf /home/build/usr/include && \\\n    rm -rf /home/build/usr/share/doc && \\\n    rm -rf /home/build/usr/share/gtk-doc && \\\n    rm -rf /home/build/usr/share/man && \\\n    find /home/build -name \"*.a\" -exec rm -f {} \\;\n\nFROM ubuntu:18.04\nLABEL Description=\"This is the image for DLDT and FFMPEG on Ubuntu 18.04\"\nLABEL Vendor=\"Intel Corporation\"\nWORKDIR /home\n\n# Prerequisites\nRUN ln -sf /usr/share/zoneinfo/UTC /etc/localtime; \\\n    DEBIAN_FRONTEND=noninteractive apt-get update && apt-get install -y -q --no-install-recommends    libnuma1 libass9 libssl1.1 libpciaccess0   ; \\\n    rm -rf /var/lib/apt/lists/*;\n\n# Install\nCOPY --from=build /home/build /\nARG libdir=/opt/intel/dldt/inference-engine/lib/intel64\nENV LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/opt/intel/dldt/inference-engine/lib:/opt/intel/dldt/inference-engine/external/tbb/lib:${libdir}\nENV InferenceEngine_DIR=/opt/intel/dldt/inference-engine/share\n\n"
}