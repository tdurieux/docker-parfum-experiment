{
  "startTime": 1674244302761,
  "endTime": 1674244302909,
  "originalSmells": [
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 12,
        "lineEnd": 12,
        "columnStart": 4,
        "columnEnd": 49
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 12,
        "lineEnd": 12,
        "columnStart": 4,
        "columnEnd": 49
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# See following page to find out CRS version\n# https://github.com/SpiderLabs/owasp-modsecurity-crs/blob/v3.0/master/CHANGES\n#\n# docker build -t fareoffice/modsecurity:v3-nginx-crs-<CRS-VERSION> .\n# docker push fareoffice/modsecurity:v3-nginx-crs-<CRS-VERSION>\n\nFROM owasp/modsecurity:v3-ubuntu-nginx\n\nENV CRS_PATH=/etc/nginx/modsecurity.d/owasp-crs\n\nRUN apt-get update && \\\n    apt-get upgrade -y && \\\n    apt-get -y --no-install-recommends install python git ca-certificates && rm -rf /var/lib/apt/lists/*;\n\nWORKDIR /etc/nginx/modsecurity.d\n\n# Checking out by git sha to get version 3.0.2 of CRS\n# See https://github.com/SpiderLabs/owasp-modsecurity-crs/releases/tag/v3.0.2\nRUN \\\n  git clone -b v3.0/master --single-branch https://github.com/SpiderLabs/owasp-modsecurity-crs owasp-crs && \\\n  cd owasp-crs && \\\n  git checkout e4e0497be4d598cce0e0a8fef20d1f1e5578c8d0 && \\\n  rm -rf .git util/regression-tests\n\nRUN \\\n  mv owasp-crs/crs-setup.conf.example owasp-crs/crs-setup.conf && \\\n  mv owasp-crs/rules/REQUEST-900-EXCLUSION-RULES-BEFORE-CRS.conf.example owasp-crs/rules/REQUEST-900-EXCLUSION-RULES-BEFORE-CRS.conf && \\\n  mv owasp-crs/rules/RESPONSE-999-EXCLUSION-RULES-AFTER-CRS.conf.example owasp-crs/rules/RESPONSE-999-EXCLUSION-RULES-AFTER-CRS.conf\n\n# Need this to make for loop work correctly in the next RUN block\nSHELL [\"/bin/bash\", \"-c\"]\n\n# REQUEST-903 is Drupal and Wordpress specific\nRUN \\\n  sed -i -e 's/SecRuleEngine DetectionOnly/SecRuleEngine On/g' modsecurity.conf && \\\n  printf \"\\ninclude owasp-crs/crs-setup.conf\\n\" >> include.conf && \\\n  for i in `ls -v owasp-crs/rules/*.conf`; do if [[ $i != *\"REQUEST-903\"* ]]; then printf \"include $i\\n\" >> include.conf; fi done;\n\nCOPY *.sh /\nRUN chmod u+x /*.sh\n\nCOPY nginx.conf /etc/nginx/\n\n# Logs to stdout/stderr\nRUN ln -sf /dev/stdout /var/log/nginx/access.log && \\\n  ln -sf /dev/stderr /var/log/nginx/error.log && \\\n  ln -sf /dev/stdout /var/log/modsec_audit.log\n\nRUN /cleanup.sh && rm -f /cleanup.sh\n\n# ----------------------------------------------------------------------------\n\n# https://github.com/SpiderLabs/owasp-modsecurity-crs/blob/v3.0/master/crs-setup.conf.example#L130\n# - A paranoia level of 1 is default. In this level, most core rules\n#   are enabled. PL1 is advised for beginners, installations\n#   covering many different sites and applications, and for setups\n#   with standard security requirements.\n#   At PL1 you should face FPs rarely. If you encounter FPs, please\n#   open an issue on the CRS GitHub site and don't forget to attach your\n#   complete Audit Log record for the request with the issue.\n# - Paranoia level 2 includes many extra rules, for instance enabling\n#   many regexp-based SQL and XSS injection protections, and adding\n#   extra keywords checked for code injections. PL2 is advised\n#   for moderate to experienced users desiring more complete coverage\n#   and for installations with elevated security requirements.\n#   PL2 comes with some FPs which you need to handle.\n# - Paranoia level 3 enables more rules and keyword lists, and tweaks\n#   limits on special characters used. PL3 is aimed at users experienced\n#   at the handling of FPs and at installations with a high security\n#   requirement.\n# - Paranoia level 4 further restricts special characters.\n#   The highest level is advised for experienced users protecting\n#   installations with very high security requirements. Running PL4 will\n#   likely produce a very high number of FPs which have to be\n#   treated before the site can go productive.\nENV PARANOIA=3\n\n# Possible values: On, Off, DetectionOnly\nENV SEC_RULE_ENGINE=On\n\n# https://github.com/SpiderLabs/owasp-modsecurity-crs/issues/656\n# The default values for the PCRE Match limit are very, very low with ModSecurity.\n# You can got to 500K usually without harming your set.\n# But for your information:\n# The PCRE Match limit is meant to reduce the chance for a DoS attack via\n# Regular Expressions. So by raising the limit you raise your vulnerability in this regard,\n# but the PCRE errors are much worse from a security perspective. I run with 500K in prod usually.\nENV SEC_PRCE_MATCH_LIMIT=500000\nENV SEC_PRCE_MATCH_LIMIT_RECURSION=500000\n\n# Keycloak proxy most probably in our case, hence port 3000\nENV PROXY_UPSTREAM_HOST=localhost:3000\n\n# Allow to congifure client_max_body_size to avoid a HTTP 413\nENV CLIENT_MAX_BODY_SIZE=1m\n\n# Avoid clickjacking attacks, by ensuring that content is not embedded into other sites.\n# Possible values: DENY, SAMEORIGIN, ALLOW-FROM https://example.com/\n# Remove this header with values: Off, No or an empty string\nENV PROXY_HEADER_X_FRAME_OPTIONS=SAMEORIGIN\n\nEXPOSE 80\n\nENTRYPOINT [\"/main.sh\"]\nCMD /usr/local/nginx/nginx -g \"daemon off;\"\n"
}