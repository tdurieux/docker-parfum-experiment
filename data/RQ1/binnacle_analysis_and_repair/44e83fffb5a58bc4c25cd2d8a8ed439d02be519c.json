{
  "startTime": 1674249630938,
  "endTime": 1674249631252,
  "originalSmells": [
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 59,
        "lineEnd": 59,
        "columnStart": 4,
        "columnEnd": 15
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 20,
        "lineEnd": 23,
        "columnStart": 4,
        "columnEnd": 61
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 20,
        "lineEnd": 23,
        "columnStart": 4,
        "columnEnd": 61
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM ubuntu:16.04\n# FROM arm=armhf/ubuntu:16.04\n\nARG DAPPER_HOST_ARCH=amd64\nARG http_proxy\nARG https_proxy\nENV HOST_ARCH=${DAPPER_HOST_ARCH} ARCH=${DAPPER_HOST_ARCH}\n\n# Setup environment\nENV PATH /go/bin:$PATH\nENV DAPPER_DOCKER_SOCKET true\nENV DAPPER_ENV TAG REPO\nENV DAPPER_OUTPUT bin\nENV DAPPER_RUN_ARGS --privileged --tmpfs /go/src/github.com/rancher/longhorn-engine/integration/.venv:exec --tmpfs /go/src/github.com/rancher/longhorn-engine/integration/.tox:exec -v /dev:/host/dev -v /proc:/host/proc\nENV DAPPER_SOURCE /go/src/github.com/rancher/longhorn-engine\nENV TRASH_CACHE ${DAPPER_SOURCE}/.trash-cache\nWORKDIR ${DAPPER_SOURCE}\n\n# Install packages\nRUN apt-get update && \\\n    apt-get install --no-install-recommends -y cmake wget curl git less file \\\n        libglib2.0-dev libkmod-dev libnl-genl-3-dev linux-libc-dev pkg-config psmisc python-tox qemu-utils fuse python-dev \\\n        devscripts debhelper bash-completion librdmacm-dev libibverbs-dev xsltproc docbook-xsl \\\n        libconfig-general-perl libaio-dev libc6-dev sg3-utils && rm -rf /var/lib/apt/lists/*;\n\n# needed for ${!var} substitution\nRUN rm -f /bin/sh && ln -s /bin/bash /bin/sh\n\n# Install Go & tools\nENV GOLANG_ARCH_amd64=amd64 GOLANG_ARCH_arm=armv6l GOLANG_ARCH=GOLANG_ARCH_${ARCH} \\\n    GOPATH=/go PATH=/go/bin:/usr/local/go/bin:${PATH} SHELL=/bin/bash\nRUN wget -O - https://storage.googleapis.com/golang/go1.8.3.linux-${!GOLANG_ARCH}.tar.gz | tar -xzf - -C /usr/local && \\\n    go get github.com/rancher/trash && go get github.com/golang/lint/golint\n\n# Docker\nENV DOCKER_URL_amd64=https://get.docker.com/builds/Linux/x86_64/docker-1.10.3 \\\n    DOCKER_URL_arm=https://github.com/rancher/docker/releases/download/v1.10.3-ros1/docker-1.10.3_arm \\\n    DOCKER_URL=DOCKER_URL_${ARCH}\n\nRUN wget -O /usr/bin/docker ${!DOCKER_URL} && chmod +x /usr/bin/docker\n\n# Minio\nRUN wget -O /usr/bin/minio https://dl.minio.io/server/minio/release/linux-amd64/archive/minio.RELEASE.2018-05-25T19-49-13Z && chmod +x /usr/bin/minio\n\n# Build TCMU\nRUN cd /usr/src && \\\n    git clone https://github.com/open-iscsi/tcmu-runner.git && \\\n    cd tcmu-runner && \\\n    git checkout f34b67c65b7844a6d3fcb24c2feaf7db90a889cd\nRUN cd /usr/src/tcmu-runner && \\\n    cmake . -Dwith-glfs=false && \\\n    make && \\\n    make install && \\\n    cp scsi_defs.h /usr/local/include && \\\n    cp libtcmu_static.a /usr/local/lib/libtcmu.a\n\n# Install libqcow\nRUN wget -O - https://github.com/libyal/libqcow/releases/download/20170222/libqcow-alpha-20170222.tar.gz | tar xvzf - -C /usr/src\nRUN cd /usr/src/libqcow-20170222 && \\\n    ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\"\nRUN cd /usr/src/libqcow-20170222 && \\\n    make -j$(nproc) && \\\n    make install\n\n# Build liblonghorn\nRUN cd /usr/src && \\\n    git clone https://github.com/rancher/liblonghorn.git && \\\n    cd liblonghorn && \\\n    git checkout 15479ac7b86caf57c81da1c20386c95bd2429859 && \\\n    make deb && \\\n    dpkg -i ./pkg/liblonghorn_*.deb\n\n# Build TGT\nRUN cd /usr/src && \\\n    git clone https://github.com/rancher/tgt.git && \\\n    cd tgt && \\\n    git checkout 4dcaac8ca91804bef8f21fdf388efeaf5e81184e && \\\n    ./scripts/build-pkg.sh deb && \\\n    dpkg -i ./pkg/tgt_*.deb\n\n# Build longhorn-engine-launcher\nRUN cd /go/src/github.com/rancher && \\\n    git clone https://github.com/rancher/longhorn-engine-launcher.git && \\\n    cd longhorn-engine-launcher && \\\n    git checkout d7e29231e81fb5853f5d384d6933c96ea6ad3697 && \\\n    go build && \\\n    cp longhorn-engine-launcher /usr/local/bin\n\nVOLUME /tmp\nENV TMPDIR /tmp\nENTRYPOINT [\"./scripts/entry\"]\nCMD [\"build\"]\n"
}