{
  "startTime": 1674641727142,
  "endTime": 1674641727178,
  "originalSmells": [
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 19,
        "lineEnd": 19,
        "columnStart": 4,
        "columnEnd": 15
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# Build the React application\nFROM node:8 AS jsbuild\n\n# The following arguments are passed on the command line of docker-compose with the -e switch\n\n# Used in the React app so it know where the API is. Useful when using a proxy or hosting the API project a different ip than the React app.\nARG REACT_APP_API_URL\nENV REACT_APP_API_URL=\"${REACT_APP_API_URL}\"\n # Used when the app is not hosted under the root of the domain like http://sitename.com/subdirectory\nARG REACT_APP_HOST_SUBDIRECTORY\nENV REACT_APP_HOST_SUBDIRECTORY=\"${REACT_APP_HOST_SUBDIRECTORY}\"\n\n# Copy the source code to the container\nCOPY . ./\n\n# Change to the React source code directory\nWORKDIR TicketingCRM.Api.TypeScript/src/react\n\n# Install npm packages\nRUN npm install && npm cache clean --force;\n\n# Build the React application\nRUN npm run build-docker\n\n# Build the API\nFROM microsoft/dotnet:2.2-sdk-alpine AS build\n\nWORKDIR /\n\n# expose port 80 in the container to the host\nEXPOSE 80\n\n# Copy the source code to the container\nCOPY . ./\n\nWORKDIR /\n\n# Publish the API as a self contained application targeting Linux\nRUN dotnet publish TicketingCRM.Api.Web/TicketingCRM.Api.Web.csproj -c Release  -o /publish -r alpine-x64 --self-contained\n\n# Create the runtime containe\nFROM microsoft/dotnet:2.2-runtime-deps-alpine AS runtime\n\nWORKDIR /publish\n# Copy the output of the API build\nCOPY --from=build publish .\n\nWORKDIR /publish/app\n# Copy the output of the JS build to the app subdirectory\nCOPY --from=jsbuild TicketingCRM.Api.TypeScript/src/react/build .\n\nWORKDIR /publish\nENTRYPOINT [\"./TicketingCRM.Api.Web\"]"
}