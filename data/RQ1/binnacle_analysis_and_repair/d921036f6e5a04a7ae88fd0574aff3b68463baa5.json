{
  "startTime": 1674641740884,
  "endTime": 1674641740977,
  "originalSmells": [
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 14,
        "lineEnd": 14,
        "columnStart": 4,
        "columnEnd": 47
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "ARG base_tag=2.1.2-runtime-bionic\nFROM microsoft/dotnet:${base_tag} AS base\n\n# Add an unprivileged user account for running Edge Hub\nRUN useradd -ms /bin/bash edgehubuser\nENV EdgeHubUser=edgehubuser\n\nARG EXE_DIR=.\nENV SSL_CERTIFICATE_PATH=/app/certs\nENV SSL_CERTIFICATE_NAME=mqtt-server.pfx\n\n# Install snappy and set up symlinks that are absent from the base image\n# Required by RocksDb\nRUN apt-get update && \\\n    apt-get install --no-install-recommends -y libsnappy1v5 libcap2-bin && \\\n    ln -s /lib/x86_64-linux-gnu/libdl.so.2 /usr/lib/x86_64-linux-gnu/libdl.so && \\\n    ln -s /lib/x86_64-linux-gnu/libc.so.6 /usr/lib/x86_64-linux-gnu/libc.so && \\\n    rm -rf /var/lib/apt/lists/*\n\n# add the CAP_NET_BIND_SERVICE capability to the dotnet binary because\n# we are starting edge hub as a non-root user\nRUN setcap 'cap_net_bind_service=+ep' /usr/share/dotnet/dotnet\n\nWORKDIR /app\n\nCOPY $EXE_DIR/ ./\n\n# Expose MQTT and HTTPS ports\nEXPOSE 8883/tcp\nEXPOSE 443/tcp\n\n\nWORKDIR /app\n\nFROM microsoft/dotnet:2.1.302-sdk AS build\nWORKDIR /src\nCOPY Thermostat.Emulator/Thermostat.Emulator.csproj Thermostat.Emulator/\nCOPY Thermostat.Shared/Thermostat.Shared.csproj Thermostat.Shared/\nCOPY Modules/Orchestrator/Orchestrator.csproj Modules/Orchestrator/\nCOPY Modules/TemperatureSensor/TemperatureSensor.csproj Modules/TemperatureSensor/\nCOPY Modules/ModelTraining/ModelTraining.csproj Modules/ModelTraining/\nCOPY Modules/AnomalyDetection/AnomalyDetection.csproj Modules/AnomalyDetection/\nCOPY Modules/Visualization/Visualization.csproj Modules/Visualization/\nCOPY Modules/VisualizationWeb/VisualizationWeb.csproj Modules/VisualizationWeb/\n\nCOPY ./.env Thermostat.Emulator/\nCOPY NuGet.Config ./\nRUN dotnet restore Thermostat.Emulator/Thermostat.Emulator.csproj\nCOPY . .\nWORKDIR /src/Thermostat.Emulator\nRUN dotnet build Thermostat.Emulator.csproj -c Release -o /app\n\nFROM build AS publish\nRUN dotnet publish Thermostat.Emulator.csproj -c Release -o /app\n\nFROM base AS final\nWORKDIR /app\nCOPY --from=publish /app .\nENTRYPOINT [\"dotnet\", \"Thermostat.Emulator.dll\"]\n"
}