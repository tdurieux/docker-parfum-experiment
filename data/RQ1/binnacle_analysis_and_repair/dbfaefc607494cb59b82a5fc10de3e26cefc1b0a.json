{
  "startTime": 1674245524009,
  "endTime": 1674245524178,
  "originalSmells": [
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 20,
        "lineEnd": 20,
        "columnStart": 4,
        "columnEnd": 29
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 22,
        "lineEnd": 22,
        "columnStart": 4,
        "columnEnd": 39
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 23,
        "lineEnd": 23,
        "columnStart": 4,
        "columnEnd": 41
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 24,
        "lineEnd": 24,
        "columnStart": 4,
        "columnEnd": 66
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 86,
        "lineEnd": 86,
        "columnStart": 4,
        "columnEnd": 15
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM bitnami/minideb:jessie\n\nRUN install_packages python curl ca-certificates \\\n        build-essential \\\n        curl \\\n        git \\\n        libfreetype6-dev \\\n        libpng12-dev \\\n        libzmq3-dev \\\n        pkg-config \\\n        python-dev \\\n        python-numpy \\\n        python-pip \\\n        software-properties-common \\\n        swig \\\n        zip \\\n\tunzip \\\n        zlib1g-dev \\\n        libcurl3-dev\n\nRUN pip install --no-cache-dir --upgrade pip\n\nRUN pip install --no-cache-dir enum34 futures mock six && \\\n    pip install --no-cache-dir --pre 'protobuf>=3.0.0a3' && \\\n    pip install --no-cache-dir -i https://testpypi.python.org/simple --pre grpcio\n\nRUN echo \"deb http://httpredir.debian.org/debian jessie-backports main\" > /etc/apt/sources.list.d/backports.list && install_packages -t jessie-backports openjdk-8-jdk-headless\n\n# Running bazel inside a `docker build` command causes trouble, cf:\n#   https://github.com/bazelbuild/bazel/issues/134\n# The easiest solution is to set up a bazelrc file forcing --batch.\nRUN echo \"startup --batch\" >>/root/.bazelrc\n# Similarly, we need to workaround sandboxing issues:\n#   https://github.com/bazelbuild/bazel/issues/418\nRUN echo \"build --spawn_strategy=standalone --genrule_strategy=standalone\" \\\n    >>/root/.bazelrc\nENV BAZELRC /root/.bazelrc\n# Install the most recent bazel release.\nENV BAZEL_VERSION 0.4.5\nWORKDIR /\n\n# Configure options for Bazel build\nENV PYTHON_BIN_PATH /usr/bin/python\nENV PYTHON_LIB_PATH /usr/local/lib/python2.7/dist-packages\nENV CC_OPT_FLAGS -march=native\nENV TF_NEED_JEMALLOC 1\nENV TF_NEED_GCP 0\nENV TF_NEED_VERBS 0\nENV TF_NEED_HDFS 0\nENV TF_ENABLE_XLA 0\nENV TF_NEED_OPENCL 0\nENV TF_NEED_CUDA 0\n\n# Files to delete after tensorflow compilation\nENV FILES_TO_DELETE /root/.cache/bazel/_bazel_root/*/execroot/serving/bazel-out/host/ \\\n    \t\t    /root/.cache/bazel/_bazel_root/install/ \\\n\t\t    /root/.cache/bazel/_bazel_root/*/execroot/serving/bazel-out/local-opt/bin/external/org_tensorflow/tensorflow/core/ \\\n\t\t    /root/.cache/bazel/_bazel_root/*/execroot/serving/bazel-out/local-opt/bin/external/org_tensorflow/tensorflow/c/ \\\n\t\t    /root/.cache/bazel/_bazel_root/*/execroot/serving/bazel-out/local-opt/bin/external/org_tensorflow/tensorflow/cc/ \\\n\t\t    /root/.cache/bazel/_bazel_root/*/execroot/serving/bazel-out/local-opt/bin/external/org_tensorflow/tensorflow/stream_executor/ \\\n\t\t    /root/.cache/bazel/_bazel_root/*/execroot/serving/bazel-out/local-opt/bin/tensorflow_serving/batching \\\n\t\t    /root/.cache/bazel/_bazel_root/*/execroot/serving/bazel-out/local-opt/bin/tensorflow_serving/servables \\\n\t\t    /root/.cache/bazel/_bazel_root/*/execroot/serving/bazel-out/local-opt/bin/tensorflow_serving/core \\\n\t\t    /root/.cache/bazel/_bazel_root/*/execroot/serving/bazel-out/local-opt/bin/tensorflow_serving/apis \\\n\t\t    /root/.cache/bazel/_bazel_root/*/execroot/serving/bazel-out/local-opt/bin/tensorflow_serving/test_util \\\n\t\t    /root/.cache/bazel/_bazel_root/*/execroot/serving/bazel-out/local-opt/bin/tensorflow_serving/config \\\n\t\t    /root/.cache/bazel/_bazel_root/*/execroot/serving/bazel-out/local-opt/bin/tensorflow_serving/resources \\\n\t\t    /root/.cache/bazel/_bazel_root/*/execroot/serving/bazel-out/local-opt/bin/tensorflow_serving/sources \\\n\t\t    /root/.cache/bazel/_bazel_root/*/execroot/serving/bazel-out/local-opt/bin/tensorflow_serving/util \\\n\t\t    /usr/local/lib/bazel \\\n\t\t    /usr/local/bin/bazel \\\n\t\t    /root/.cache/pip/ \\\n\t\t    /serving/.git \\\n\t\t    /serving/tf_models/syntaxnet\n\n# Bazel installation, tensorflow compilation and cleaning up\nRUN mkdir /bazel && \\\n    cd /bazel && \\\n    curl -fSsL -O https://github.com/bazelbuild/bazel/releases/download/$BAZEL_VERSION/bazel-$BAZEL_VERSION-installer-linux-x86_64.sh && \\\n    curl -fSsL -o /bazel/LICENSE https://raw.githubusercontent.com/bazelbuild/bazel/master/LICENSE && \\\n    chmod +x bazel-*.sh && \\\n    ./bazel-$BAZEL_VERSION-installer-linux-x86_64.sh && \\\n    cd / && \\\n    rm -f /bazel/bazel-$BAZEL_VERSION-installer-linux-x86_64.sh && \\\n    git clone --recurse-submodules https://github.com/tensorflow/serving && \\\n    cd serving/tensorflow && \\\n    ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" && \\\n    cd .. && \\\n    bazel build --local_resources 4000,1.0,1.0 --compilation_mode opt --strip=always tensorflow_serving/... && \\\n    rm -rf $FILES_TO_DELETE\n\nWORKDIR /serving\n\nCMD [\"bazel-bin/tensorflow_serving/model_servers/tensorflow_model_server\", \"--port=9000\", \"--model_name=inception\", \"--model_base_path=inception-export\"]\n"
}