{
  "startTime": 1674235264589,
  "endTime": 1674235264767,
  "originalSmells": [
    {
      "rule": "yarnCacheCleanAfterInstall",
      "position": {
        "lineStart": 16,
        "lineEnd": 16,
        "columnStart": 2,
        "columnEnd": 57
      }
    },
    {
      "rule": "yarnCacheCleanAfterInstall",
      "position": {
        "lineStart": 20,
        "lineEnd": 20,
        "columnStart": 2,
        "columnEnd": 44
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM node:8.9.3-alpine\n\nARG NODE_ENV=production\nENV NODE_ENV=$NODE_ENV\n\n# Set a working directory\nWORKDIR /usr/src/app\n\n# Install native dependencies\n# RUN set -ex; \\\n#   apk add --no-cache ...\n\n# Install Node.js dependencies\nCOPY package.json yarn.lock ./\nRUN set -ex; \\\n  if [ \"$NODE_ENV\" = \"production\" ]; then \\\n  yarn install --no-cache --frozen-lockfile --production; yarn cache clean; \\\n  elif [ \"$NODE_ENV\" = \"test\" ]; then \\\n  touch yarn-error.log; \\\n  mkdir -m 777 build; \\\n  yarn install --no-cache --frozen-lockfile; yarn cache clean; \\\n  chown -R node:node build node_modules package.json yarn.lock yarn-error.log; \\\n  else \\\n  touch yarn-error.log; \\\n  mkdir -p -m 777 build node_modules /home/node/.cache/yarn; \\\n  chown -R node:node build node_modules package.json yarn.lock yarn-error.log /home/node/.cache/yarn; \\\n  fi;\n\n# Copy application files\nCOPY tools ./tools/\nCOPY migrations ./migrations/\nCOPY seeds ./seeds/\nCOPY locales ./locales/\n# Attempts to copy \"build\" folder even if it doesn't exist\nCOPY .env build* ./build/\n\n# Run the container under \"node\" user by default\nUSER node\n\nCMD [ \"node\", \"build/server.js\" ]\n"
}