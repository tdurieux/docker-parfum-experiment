{
  "startTime": 1674235642186,
  "endTime": 1674235642331,
  "originalSmells": [
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 55,
        "lineEnd": 55,
        "columnStart": 4,
        "columnEnd": 36
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 56,
        "lineEnd": 56,
        "columnStart": 4,
        "columnEnd": 30
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 3,
        "lineEnd": 21,
        "columnStart": 22,
        "columnEnd": 18
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM ubuntu:15.10\n\n\nRUN apt-get update && apt-get install --no-install-recommends -y \\\n        build-essential \\\n        curl \\\n        g++ \\\n        git \\\n        libfreetype6-dev \\\n        libpng12-dev \\\n        libzmq3-dev \\\n        libcurl3-dev \\\n        openjdk-8-jdk \\\n        pkg-config \\\n        python-dev \\\n        python-numpy \\\n        python-pip \\\n        software-properties-common \\\n        swig \\\n        unzip \\\n        zip \\\n        zlib1g-dev \\\n        && \\\n    apt-get clean && \\\n    rm -rf /var/lib/apt/lists/*\n\nRUN update-ca-certificates -f\n\n# Set up Bazel.\n\n# Running bazel inside a `docker build` command causes trouble, cf:\n#   https://github.com/bazelbuild/bazel/issues/134\n# The easiest solution is to set up a bazelrc file forcing --batch.\nRUN echo \"startup --batch\" >>/root/.bazelrc\n\n# Similarly, we need to workaround sandboxing issues:\n#   https://github.com/bazelbuild/bazel/issues/418\nRUN echo \"build --spawn_strategy=standalone --genrule_strategy=standalone\" \\\n    >>/root/.bazelrc\nENV BAZELRC /root/.bazelrc\n\n# Install the most recent bazel release.\nENV BAZEL_VERSION 0.4.5\nWORKDIR /\nRUN mkdir /bazel && \\\n    cd /bazel && \\\n    curl -fSsL -O https://github.com/bazelbuild/bazel/releases/download/$BAZEL_VERSION/bazel-$BAZEL_VERSION-installer-linux-x86_64.sh && \\\n    chmod +x bazel-*.sh && \\\n    ./bazel-$BAZEL_VERSION-installer-linux-x86_64.sh && \\\n    cd / && \\\n    rm -f /bazel/bazel-$BAZEL_VERSION-installer-linux-x86_64.sh\n\n\n# Syntaxnet dependencies\n\nRUN pip install --no-cache-dir -U protobuf==3.0.0b2\nRUN pip install --no-cache-dir asciitree mock\n\n\n# Download and build Syntaxnet\n\nRUN git clone --recursive https://github.com/tensorflow/models.git /root/models\nRUN cd /root/models/syntaxnet/tensorflow && tensorflow/tools/ci_build/builds/configured CPU\nRUN cd /root/models/syntaxnet && bazel build -c opt @org_tensorflow//tensorflow:tensorflow_py\nRUN cd /root/models/syntaxnet && bazel build syntaxnet/...\n\n######################################\n\n# Setting up locales for Russian\n\nRUN \\\necho u_RU.UTF-8 UTF-8 > /etc/locale.gen && \\\nlocale-gen \"ru_RU.UTF-8\" && \\\necho 'LANG=\"ru_RU.UTF-8\"'>/etc/default/locale && \\\ndpkg-reconfigure --frontend=noninteractive locales && \\\nupdate-locale LC_ALL=ru_RU.UTF-8 LANG=ru_RU.UTF-8 \n\nENV LANG ru_RU.UTF-8\n\n\n# Downloading and unpacking model for Russian\n\nADD http://download.tensorflow.org/models/parsey_universal/Russian-SynTagRus.zip /root/models/syntaxnet/syntaxnet/models\nRUN unzip /root/models/syntaxnet/syntaxnet/models/Russian-SynTagRus.zip -d /root/models/syntaxnet/syntaxnet/models/\n\n\n# Misk\n\nCOPY demo_rus.sh /root/models/syntaxnet/syntaxnet/\nCOPY server /usr/bin/\n\n# Standalone server\n\nCOPY api /root/models/syntaxnet/bazel-bin/syntaxnet/parser_eval.runfiles/__main__/syntaxnet/api/\n\n######################################\n\nWORKDIR /root/models/syntaxnet/\n\nCMD /root/models/syntaxnet/syntaxnet/demo_rus.sh\n\n"
}