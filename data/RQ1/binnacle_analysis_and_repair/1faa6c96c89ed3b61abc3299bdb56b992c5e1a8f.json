{
  "startTime": 1674250765511,
  "endTime": 1674250765569,
  "originalSmells": [
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 17,
        "lineEnd": 17,
        "columnStart": 4,
        "columnEnd": 33
      }
    },
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 21,
        "lineEnd": 21,
        "columnStart": 4,
        "columnEnd": 15
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "#\n# ---- Base Node ----\nFROM alpine:3.5 AS base\n# install node\nRUN apk add --no-cache nodejs-current tini\n# set working directory\nWORKDIR /root/app\n# Set tini as entrypoint\nENTRYPOINT [\"/sbin/tini\", \"--\"]\n# copy project file\nCOPY package.json .\n\n#\n# ---- Dependencies ----\nFROM base AS dependencies\n# install node packages\nRUN npm set progress=false && npm config set depth 0\nRUN npm install --only=production && npm cache clean --force;\n# copy production node_modules aside\nRUN cp -R node_modules prod_node_modules\n# install ALL node_modules, including 'devDependencies'\nRUN npm install && npm cache clean --force;\n\n#\n# ---- Build ----\n# run linters, setup and build\nFROM dependencies AS build\nCOPY . .\nRUN  npm run build\n\n#\n# ---- Release ----\nFROM base AS release\n# copy production node_modules\nCOPY --from=dependencies /root/app/prod_node_modules ./node_modules\n# copy public folder\nCOPY --from=build /root/app/public ./public\n# copy data\nCOPY --from=build /root/app/data ./data\n# copy compiled dist\nCOPY --from=build /root/app/dist ./dist\n# copy pm2.json file\nCOPY --from=build /root/app/pm2.json .\n# expose port and define CMD\nEXPOSE 3000\nCMD npm run serve:pm2-runtime\n"
}