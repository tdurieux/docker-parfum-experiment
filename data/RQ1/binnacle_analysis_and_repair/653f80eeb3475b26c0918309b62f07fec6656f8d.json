{
  "startTime": 1674239539166,
  "endTime": 1674239539746,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 56,
        "lineEnd": 56,
        "columnStart": 4,
        "columnEnd": 62
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 87,
        "lineEnd": 87,
        "columnStart": 4,
        "columnEnd": 84
      }
    },
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 161,
        "lineEnd": 161,
        "columnStart": 4,
        "columnEnd": 32
      }
    },
    {
      "rule": "wgetUseHttpsUrl",
      "position": {
        "lineStart": 77,
        "lineEnd": 77,
        "columnStart": 4,
        "columnEnd": 70
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 36,
        "lineEnd": 36,
        "columnStart": 4,
        "columnEnd": 32
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 74,
        "lineEnd": 74,
        "columnStart": 20,
        "columnEnd": 31
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 81,
        "lineEnd": 81,
        "columnStart": 4,
        "columnEnd": 38
      }
    },
    {
      "rule": "sha256sumEchoOneSpaces",
      "position": {
        "lineStart": 117,
        "lineEnd": 130,
        "columnStart": 4,
        "columnEnd": 85
      }
    },
    {
      "rule": "gpgUseBatchFlag",
      "position": {
        "lineStart": 112,
        "lineEnd": 112,
        "columnStart": 4,
        "columnEnd": 84
      }
    },
    {
      "rule": "gpgUseBatchFlag",
      "position": {
        "lineStart": 113,
        "lineEnd": 113,
        "columnStart": 4,
        "columnEnd": 82
      }
    },
    {
      "rule": "gpgUseBatchFlag",
      "position": {
        "lineStart": 114,
        "lineEnd": 114,
        "columnStart": 4,
        "columnEnd": 68
      }
    },
    {
      "rule": "gpgUseBatchFlag",
      "position": {
        "lineStart": 139,
        "lineEnd": 139,
        "columnStart": 4,
        "columnEnd": 84
      }
    },
    {
      "rule": "gpgUseBatchFlag",
      "position": {
        "lineStart": 140,
        "lineEnd": 140,
        "columnStart": 4,
        "columnEnd": 82
      }
    },
    {
      "rule": "gpgUseBatchFlag",
      "position": {
        "lineStart": 141,
        "lineEnd": 141,
        "columnStart": 4,
        "columnEnd": 68
      }
    },
    {
      "rule": "gpgUseHaPools",
      "position": {
        "lineStart": 112,
        "lineEnd": 112,
        "columnStart": 4,
        "columnEnd": 84
      }
    },
    {
      "rule": "gpgUseHaPools",
      "position": {
        "lineStart": 113,
        "lineEnd": 113,
        "columnStart": 4,
        "columnEnd": 82
      }
    },
    {
      "rule": "gpgUseHaPools",
      "position": {
        "lineStart": 139,
        "lineEnd": 139,
        "columnStart": 4,
        "columnEnd": 84
      }
    },
    {
      "rule": "gpgUseHaPools",
      "position": {
        "lineStart": 140,
        "lineEnd": 140,
        "columnStart": 4,
        "columnEnd": 82
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 10,
        "lineEnd": 33,
        "columnStart": 54,
        "columnEnd": 27
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM openjdk:8\n\nMAINTAINER Entria <developers@entria.com.br>\n\nRUN mkdir -p /opt/app\nWORKDIR /opt/app\n\nENV DEBIAN_FRONTEND noninteractive\n\n# Install general dependencies\nRUN dpkg --add-architecture i386 && apt-get update && apt-get install -yq \\\n    apt-transport-https \\\n    autoconf \\\n    automake \\\n    build-essential \\\n    imagemagick \\\n    jq \\\n    libc6:i386 \\\n    libcurl3 \\\n    libcurl3-gnutls \\\n    libcurl4-openssl-dev \\\n    libncurses5:i386 \\\n    librsvg2-bin \\\n    libssl-dev \\\n    libstdc++6:i386 \\\n    pkg-config \\\n    python \\\n    python-dev \\\n    python-pip \\\n    python-setuptools \\\n    software-properties-common \\\n    zlib1g:i386 \\\n    zlib1g-dev \\\n    --no-install-recommends && rm -rf /var/lib/apt/lists/*;\n\n# Install AWS CLI\nRUN pip install --no-cache-dir --upgrade awscli\n\nENV RUBY_VERSION=\"2.4.4\"\nENV ANDROID_HOME=\"/opt/android-sdk-linux\"\nENV ANDROID_SDK=\"${ANDROID_HOME}\"\nENV PATH=\"${ANDROID_SDK}/tools:${ANDROID_SDK}/platform-tools:${ANDROID_SDK}/tools/bin:${PATH}\"\nRUN echo \"export PATH=${PATH}\" > /root/.profile\n\n# Install Android SDK (based on: https://github.com/gfx/docker-android-project/blob/master/Dockerfile)\n# See for CircleCI Issue:\n#  https://discuss.circleci.com/t/failed-to-register-layer-error-processing-tar-file-exit-status-1-container-id-249512-cannot-be-mapped-to-a-host-id/13453/5\n# Grab URL from footer of https://developer.android.com/studio/index.html\n# Following URL is for 26.0.2\nENV ANDROID_SDK_URL https://dl.google.com/android/repository/sdk-tools-linux-3859397.zip\n\n#ENV ANDROID_BUILD_TOOLS_VERSION 26.0.2,25.0.3\n#ENV ANDROID_API_LEVELS android-26,android-25\n#ENV ANDROID_COMPONENTS platform-tools,build-tools-${ANDROID_BUILD_TOOLS_VERSION},${ANDROID_API_LEVELS}\n#ENV GOOGLE_COMPONENTS extra-android-m2repository,extra-google-m2repository,extra-google-google_play_services,extra-google-gcm\n\nRUN curl -f -L \"${ANDROID_SDK_URL}\" -o /tmp/android-sdk-linux.zip && \\\n    unzip /tmp/android-sdk-linux.zip -d /opt/ && \\\n    chown -R root:root /opt && \\\n    rm /tmp/android-sdk-linux.zip && \\\n    mkdir ${ANDROID_HOME} && \\\n    mv /opt/tools ${ANDROID_HOME}/ && \\\n    ls ${ANDROID_HOME} && \\\n    ls ${ANDROID_HOME}/tools && chown -R root:root ${ANDROID_HOME}\n\n# Install Android SDK components\nRUN echo y | sdkmanager \"platform-tools\" \"build-tools;26.0.2\" \"build-tools;25.0.3\" \"platforms;android-26\" \"platforms;android-25\" \\\n                \"extras;google;m2repository\" \"extras;android;m2repository\" \"extras;google;google_play_services\"\n\nRUN echo y | sdkmanager --licenses\n# Install Watchman\nRUN git clone https://github.com/facebook/watchman.git && \\\n    cd watchman && \\\n    git checkout v4.7.0 && \\\n    ./autogen.sh && ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" && make && make install && cd .. && rm -rf watchman\n\n# Install Ruby and RubyGems\nRUN wget https://ftp.ruby-lang.org/pub/ruby/ruby-${RUBY_VERSION}.tar.gz && \\\n    tar -xzf ruby-${RUBY_VERSION}.tar.gz && \\\n    rm ruby-${RUBY_VERSION}.tar.gz && \\\n    cd ruby-${RUBY_VERSION}/ && \\\n    ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --disable-install-rdoc && make && make install\n\n# Install bundler\nRUN gem install bundler\n\n# Install Slack CLI https://github.com/rockymadden/slack-cli\nRUN curl -f -O https://raw.githubusercontent.com/rockymadden/slack-cli/master/src/slack && \\\n    chmod +x slack && \\\n    ln -s /opt/app/slack /usr/local/bin/slack\n\n# Install Node JS and Yarn\n# https://github.com/nodejs/docker-node/blob/12ba2e5432cd50037b6c0cf53464b5063b028227/8.1/Dockerfile\nENV NPM_CONFIG_LOGLEVEL info\nENV NODE_VERSION 10.13.0\nENV YARN_VERSION 1.12.3\n\nRUN groupadd --gid 1000 node && \\\n    useradd --uid 1000 --gid node --shell /bin/bash --create-home node\n\n# gpg keys listed at https://github.com/nodejs/node#release-keys\nRUN set -ex \\\n  && for key in \\\n    94AE36675C464D64BAFA68DD7434390BDBE9B9C5 \\\n    B9AE9905FFD7803F25714661B63B535A4C206CA9 \\\n    77984A986EBC2AA786BC0F66B01FBB92821C587A \\\n    71DCFD284A79C3B38668286BC97EC7A07EDE3FC1 \\\n    FD3A5288F042B6850C66B31F09FE44734EB7990E \\\n    8FCCA13FEF1D0C2E91008E09770F7A9A5AE15600 \\\n    C4F0DFFF4E8C1A8236409D08E73BC641CC11F4C8 \\\n    DD8F2338BAE7501E3DD5AC78C273792F7D83545D; \\\n  do \\\n    gpg --batch --no-tty --keyserver hkp://p80.ha.pool.sks-keyservers.net:80 --recv-keys \"$key\" || \\\n    gpg --batch --no-tty --keyserver hkp://ipv4.ha.pool.sks-keyservers.net --recv-keys \"$key\" || \\\n    gpg --batch --no-tty --keyserver hkp://pgp.mit.edu:80 --recv-keys \"$key\"; \\\n  done\n\nRUN ARCH= && dpkgArch=\"$(dpkg --print-architecture)\" \\\n  && case \"${dpkgArch##*-}\" in \\\n    amd64) ARCH='x64';; \\\n    ppc64el) ARCH='ppc64le';; \\\n    s390x) ARCH='s390x';; \\\n    arm64) ARCH='arm64';; \\\n    armhf) ARCH='armv7l';; \\\n    i386) ARCH='x86';; \\\n    * echo \"unsupported  architecture\"; exit 1;; \\\n  esac \\\n  && curl -fsSLO --compressed \"https://nodejs.org/dist/v$NODE_VERSION/node-v$NODE_VERSION-linux-$ARCH.tar.xz\" \\\n  && curl -fsSLO --compressed \"https://nodejs.org/dist/v$NODE_VERSION/SHASUMS256.txt.asc\" \\\n  && gpg --batch --decrypt --output SHASUMS256.txt SHASUMS256.txt.asc \\\n  && grep \" node-v$NODE_VERSION-linux-$ARCH.tar.xz\\$\" SHASUMS256.txt | sha256sum -c - \\\n  && tar -xJf \"node-v$NODE_VERSION-linux-$ARCH.tar.xz\" -C /usr/local --strip-components=1 --no-same-owner \\\n  && rm \"node-v$NODE_VERSION-linux-$ARCH.tar.xz\" SHASUMS256.txt.asc SHASUMS256.txt \\\n  && ln -s /usr/local/bin/node /usr/local/bin/nodejs\n\nRUN set -ex \\\n  && for key in \\\n    6A010C5166006599AA17F08146C2130DFD2497F5; \\\n  do \\\n    gpg --batch --no-tty --keyserver hkp://p80.ha.pool.sks-keyservers.net:80 --recv-keys \"$key\" || \\\n    gpg --batch --no-tty --keyserver hkp://ipv4.ha.pool.sks-keyservers.net --recv-keys \"$key\" || \\\n    gpg --batch --no-tty --keyserver hkp://pgp.mit.edu:80 --recv-keys \"$key\"; \\\n  done \\\n  && curl -fsSLO --compressed \"https://yarnpkg.com/downloads/$YARN_VERSION/yarn-v$YARN_VERSION.tar.gz\" \\\n  && curl -fsSLO --compressed \"https://yarnpkg.com/downloads/$YARN_VERSION/yarn-v$YARN_VERSION.tar.gz.asc\" \\\n  && gpg --batch --verify yarn-v$YARN_VERSION.tar.gz.asc yarn-v$YARN_VERSION.tar.gz \\\n  && mkdir -p /opt \\\n  && tar -xzf yarn-v$YARN_VERSION.tar.gz -C /opt/ \\\n  && ln -s /opt/yarn-v$YARN_VERSION/bin/yarn /usr/local/bin/yarn \\\n  && ln -s /opt/yarn-v$YARN_VERSION/bin/yarnpkg /usr/local/bin/yarnpkg \\\n  && rm yarn-v$YARN_VERSION.tar.gz.asc yarn-v$YARN_VERSION.tar.gz\n\n# Clean\nRUN rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/* && \\\n    apt-get autoremove -y && \\\n    apt-get clean\n\n# Support Gradle\nENV TERM dumb\n\n# Install code-push-cli\nRUN npm install -g code-push-cli && chown -R root:root /usr/local/lib/node_modules/code-push-cli/node_modules && npm cache clean --force;\n\nCOPY entrypoint.sh /entrypoint.sh\n\nENTRYPOINT [\"/entrypoint.sh\"]\n"
}