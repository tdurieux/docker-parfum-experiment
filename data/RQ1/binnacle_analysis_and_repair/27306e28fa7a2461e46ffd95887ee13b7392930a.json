{
  "startTime": 1674249657311,
  "endTime": 1674249657658,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 18,
        "lineEnd": 18,
        "columnStart": 4,
        "columnEnd": 98
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 19,
        "lineEnd": 19,
        "columnStart": 2,
        "columnEnd": 42
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 7,
        "lineEnd": 12,
        "columnStart": 22,
        "columnEnd": 7
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "####################################################################################################\n# Builder image\n# Initial stage which pulls prepares build dependencies and CLI tooling we need for our final image\n# Also used as the image in CI jobs so needs all dependencies\n####################################################################################################\nFROM golang:1.12.6 as builder\n\nRUN apt-get update && apt-get install --no-install-recommends -y \\\n    git \\\n    make \\\n    wget \\\n    gcc \\\n    zip && \\\n    apt-get clean && \\\n    rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*\n\n# Install docker\nENV DOCKER_VERSION=18.06.0\nRUN curl -f -O https://download.docker.com/linux/static/stable/x86_64/docker-${DOCKER_VERSION}-ce.tgz && \\\n  tar -xzf docker-${DOCKER_VERSION}-ce.tgz && \\\n  mv docker/docker /usr/local/bin/docker && \\\n  rm -rf ./docker && rm docker-${DOCKER_VERSION}-ce.tgz\n\n# Install dep\nENV DEP_VERSION=0.5.0\nRUN wget https://github.com/golang/dep/releases/download/v${DEP_VERSION}/dep-linux-amd64 -O /usr/local/bin/dep && \\\n    chmod +x /usr/local/bin/dep\n\n# Install golangci-lint\nRUN wget https://install.goreleaser.com/github.com/golangci/golangci-lint.sh  && \\\n    chmod +x ./golangci-lint.sh && \\\n    ./golangci-lint.sh -b $GOPATH/bin && \\\n    golangci-lint linters\n\nCOPY .golangci.yml ${GOPATH}/src/dummy/.golangci.yml\n\nRUN cd ${GOPATH}/src/dummy && \\\n    touch dummy.go \\\n    golangci-lint run\n\n####################################################################################################\n# Rollout Controller Build stage which performs the actual build of argo-rollouts binaries\n####################################################################################################\nFROM golang:1.12.6 as argo-rollouts-build\n\nCOPY --from=builder /usr/local/bin/dep /usr/local/bin/dep\n\n\n# A dummy directory is created under $GOPATH/src/dummy so we are able to use dep\n# to install all the packages of our dep lock file\nCOPY Gopkg.toml ${GOPATH}/src/dummy/Gopkg.toml\nCOPY Gopkg.lock ${GOPATH}/src/dummy/Gopkg.lock\n\nRUN cd ${GOPATH}/src/dummy && \\\n    dep ensure -vendor-only && \\\n    mv vendor/* ${GOPATH}/src/ && \\\n    rmdir vendor\n\n# Perform the build\nWORKDIR /go/src/github.com/argoproj/argo-rollouts\nCOPY . .\nARG MAKE_TARGET=\"controller\"\nRUN make ${MAKE_TARGET}\n\n\nRUN groupadd -g 999 argo-rollouts && \\\n    useradd -r -u 999 -g argo-rollouts argo-rollouts && \\\n    mkdir -p /home/argo-rollouts && \\\n    chown argo-rollouts:argo-rollouts /home/argo-rollouts\n\n\n####################################################################################################\n# Final image\n####################################################################################################\nFROM scratch\n\nCOPY --from=argo-rollouts-build /go/src/github.com/argoproj/argo-rollouts/dist/rollouts-controller /bin/\n\n# Import the user and group files from the builder.\nCOPY --from=argo-rollouts-build /etc/passwd /etc/passwd\n\nUSER argo-rollouts\n\nWORKDIR /home/argo-rollouts\n\nENTRYPOINT [ \"/bin/rollouts-controller\" ]\n"
}