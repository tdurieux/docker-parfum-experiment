{
  "startTime": 1674235280569,
  "endTime": 1674235280950,
  "originalSmells": [
    {
      "rule": "wgetUseHttpsUrl",
      "position": {
        "lineStart": 54,
        "lineEnd": 54,
        "columnStart": 4,
        "columnEnd": 78
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 60,
        "lineEnd": 74,
        "columnStart": 4,
        "columnEnd": 29
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# Dockerfile for PetIBM-0.4.1\n\nFROM nvidia/cuda:8.0-devel-ubuntu16.04\nMAINTAINER Olivier Mesnard <mesnardo@gwu.edu>\n\n# Install base system.\nCOPY ssh_config /root/.ssh/config\nRUN apt-get update && apt-get install -y --no-install-recommends \\\n        ca-certificates \\\n        build-essential \\\n        autotools-dev \\\n        gfortran \\\n        cmake \\\n        git \\\n        pkg-config \\\n        wget \\\n        curl \\\n        unzip && \\\n    # OpenMPI\n    apt-get install -y --no-install-recommends \\\n        libopenmpi-dev \\\n        libopenmpi1.10 \\\n        openmpi-bin \\\n        openmpi-common \\\n        openmpi-doc && \\\n    # For PETSc\n    apt-get install -y --no-install-recommends \\\n        flex \\\n        bison \\\n        python-dev && \\\n    # For RDMA/InfiniBand\n    apt-get install -y --no-install-recommends \\\n        libibverbs1 ibverbs-utils librdmacm1 rdmacm-utils \\\n        ibutils ibacm libibcm1 libibmad5 libibumad3 opensm libopensm5a \\\n        srptools perftest infiniband-diags ibsim-utils \\\n        libmthca1 libmlx4-1 libmlx5-1 mstflint \\\n        libdapl2 dapl2-utils && \\\n    # configure ssh server and keys\n    apt-get install -y --no-install-recommends \\\n        openssh-server \\\n        openssh-client && \\\n    rm -rf /var/lib/apt/lists/* && \\\n    mkdir /var/run/sshd && \\\n    ssh-keygen -A && \\\n    sed -i 's/PermitRootLogin without-password/PermitRootLogin yes/' /etc/ssh/sshd_config && \\\n    sed 's@session\\s*required\\s*pam_loginuid.so@session optional pam_loginuid.so@g' -i /etc/pam.d/sshd && \\\n    ssh-keygen -f /root/.ssh/id_rsa -t rsa -N '' && \\\n    chmod 600 /root/.ssh/config && \\\n    chmod 700 /root/.ssh && \\\n    cp /root/.ssh/id_rsa.pub /root/.ssh/authorized_keys\n\n# Build PETSc-3.10.2 in optimized mode.\nRUN VERSION=3.10.2 && \\\n    TARBALL=petsc-lite-${VERSION}.tar.gz && \\\n    wget https://ftp.mcs.anl.gov/pub/petsc/release-snapshots/${TARBALL} -P /tmp && \\\n    PETSC_DIR=/opt/petsc/${VERSION} && \\\n    PETSC_ARCH=linux-gnu-openmpi-dbg && \\\n    mkdir -p ${PETSC_DIR} && \\\n    tar -xzf /tmp/${TARBALL} -C ${PETSC_DIR} --strip-components=1 && \\\n    cd ${PETSC_DIR} && \\\n    ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --PETSC_DIR=${PETSC_DIR} --PETSC_ARCH=${PETSC_ARCH} \\\n      --with-cc=mpicc \\\n      --with-cxx=mpicxx \\\n      --with-fc=mpif90 \\\n      --COPTFLAGS=-O0 \\\n      --CXXFLAGS=-O0 \\\n      --FOPTFLAGS=-O0 \\\n      --with-debugging=1 \\\n      --download-hdf5 \\\n      --download-fblaslapack \\\n      --download-hypre \\\n      --download-ptscotch \\\n      --download-metis \\\n      --download-parmetis \\\n      --download-superlu_dist && \\\n    make PETSC_DIR=${PETSC_DIR} PETSC_ARCH=${PETSC_ARCH} all && \\\n    rm -f /tmp/${TARBALL}\n\n# Build AmgX-2.0.\nRUN VERSION=2.0 && \\\n    COMMIT=3049527e0c396424df4582e837f9dd89a20f50df && \\\n    TARBALL=master.tar.gz && \\\n    wget https://github.com/NVIDIA/AMGX/archive/${TARBALL} -P /tmp && \\\n    SRCDIR=/opt/amgx/${VERSION} && \\\n    URL=https://github.com/NVIDIA/AMGX && \\\n    git clone ${URL} ${SRCDIR} && \\\n    cd ${SRCDIR} && \\\n    git checkout ${COMMIT} && \\\n    BUILDDIR=${SRCDIR}/build && \\\n    mkdir -p ${BUILDDIR} && \\\n    cd ${BUILDDIR} && \\\n    cmake ${SRCDIR} \\\n      -DCMAKE_BUILD_TYPE=\"Release\" \\\n      -DCMAKE_INSTALL_PREFIX=\"/usr/local\" \\\n      -DCMAKE_C_COMPILER=mpicc \\\n      -DCMAKE_C_FLAGS_PROFILE=\"-O3 -DNDEBUG\" \\\n      -DCMAKE_CXX_COMPILER=mpicxx \\\n      -DCMAKE_CXX_FLAGS_PROFILE=\"-O3 -DNDEBUG\" \\\n      -DMPI_CXX_COMPILER=mpicxx \\\n      -DMPI_CXX_COMPILE_FLAGS=\"-O3\" \\\n      -DMPI_C_COMPILER=mpicc \\\n      -DMPI_C_COMPILE_FLAGS=\"-O3\" \\\n      -DCUDA_ARCH=\"35 37\" \\\n      -DCUDA_HOST_COMPILER=/usr/bin/mpicc && \\\n    make -j\"$(nproc)\" all && \\\n    make install && \\\n    ldconfig ${SRCDIR}/lib\n\nENV PETSC_DIR=/opt/petsc/3.10.2\nENV PETSC_ARCH=linux-gnu-openmpi-dbg\n\n# Build and install PetIBM-0.4.1.\nRUN VERSION=0.4.1 && \\\n    TARBALL=v${VERSION}.tar.gz && \\\n    wget https://github.com/barbagroup/PetIBM/archive/${TARBALL} -P /tmp && \\\n    SRCDIR=/opt/petibm/${VERSION} && \\\n    BUILDDIR=${SRCDIR}/build && \\\n    mkdir -p ${SRCDIR} ${BUILDDIR} && \\\n    tar -xzf /tmp/${TARBALL} -C ${SRCDIR} --strip-components=1 && \\\n    cd ${BUILDDIR} && \\\n    ${SRCDIR}/configure --prefix=/usr/local \\\n      CXX=mpicxx \\\n      CXXFLAGS=\"-g -O0 -std=c++14\" \\\n      --enable-static=no \\\n      --with-petsc-dir=${PETSC_DIR} \\\n      --with-petsc-arch=${PETSC_ARCH} \\\n      --with-cuda-dir=/usr/local/cuda-8.0 \\\n      --with-amgx-dir=/usr/local \\\n      --enable-amgxwrapper \\\n      --enable-yamlcpp \\\n      --enable-gtest && \\\n    make -j\"$(nproc)\" all && \\\n    make check && \\\n    make install && \\\n    ldconfig /usr/local/lib && \\\n    rm -f /tmp/${TARBALL}\n\nEXPOSE 23\nCMD [\"/usr/sbin/sshd\", \"-D\", \"-p\", \"23\"]\n"
}