{
  "startTime": 1674239886479,
  "endTime": 1674239886508,
  "originalSmells": [
    {
      "rule": "npmCacheCleanAfterInstall",
      "position": {
        "lineStart": 11,
        "lineEnd": 11,
        "columnStart": 4,
        "columnEnd": 23
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# FROM node:8-alpine also works here for a smaller image\nFROM node:8-alpine\n\n# set our node environment, either development or production\n# defaults to production, compose overrides this to development on build and run\nENV NODE_ENV production\n\nEXPOSE 9292 9293\n\n# you'll likely want the latest npm, regardless of node version, for speed and fixes\n# but pin this version for the best stability\nRUN npm i npm@latest -g && npm cache clean --force;\n\n# install dependencies first, in a different location for easier app bind mounting for local development\nWORKDIR /opt\nCOPY package.json package-lock.json* ./\nRUN npm install --no-optional && npm cache clean --force\nENV PATH /opt/node_modules/.bin:$PATH\n\n# copy in our source code last, as it changes the most\nWORKDIR /opt/service-fabrik-broker\nCOPY . /opt/service-fabrik-broker\n\nENV CONF_DIR /opt/service-fabrik-broker/broker/config\nENV SETTINGS_PATH=$CONF_DIR/settings.yml\n\n# the official node image provides an unprivileged user as a security best practice\n# https://github.com/nodejs/docker-node/blob/master/docs/BestPractices.md#non-root-user\n# USER node\n\n# if you want to use npm start instead, then use `docker run --init in production`\n# so that signals are passed properly. Note the code in index.js is needed to catch Docker signals\n# using node here is still more graceful stopping then npm with --init afaik\n# I still can't come up with a good production way to run with npm and graceful shutdown\nCMD [ \"npm\", \"start\" ]"
}