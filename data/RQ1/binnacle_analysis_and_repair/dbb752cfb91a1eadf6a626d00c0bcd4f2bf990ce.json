{
  "startTime": 1674253118435,
  "endTime": 1674253119200,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 63,
        "lineEnd": 63,
        "columnStart": 4,
        "columnEnd": 87
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 117,
        "lineEnd": 117,
        "columnStart": 4,
        "columnEnd": 82
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 129,
        "lineEnd": 129,
        "columnStart": 4,
        "columnEnd": 65
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 131,
        "lineEnd": 131,
        "columnStart": 4,
        "columnEnd": 73
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 66,
        "lineEnd": 66,
        "columnStart": 4,
        "columnEnd": 40
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM nvidia/cuda:9.2-cudnn7-devel-ubuntu18.04\n\nRUN apt-get update -y && \\\n    apt-get install -y --no-install-recommends \\\n    ffmpeg \\\n    curl \\\n    git \\\n    build-essential \\\n    gfortran \\\n    nasm \\\n    tmux \\\n    sudo \\\n    openssh-client \\\n    libgoogle-glog-dev \\\n    rsync \\\n    wget \\\n    cmake \\\n    cmake-curses-gui \\\n    automake \\\n    libgmp3-dev \\\n    cpio \\\n    libtool \\\n    libyaml-dev \\\n    valgrind \\\n    software-properties-common \\\n    unzip \\\n    libz-dev \\\n    vim \\\n    apt-utils \\\n    emacs \\\n    zsh \\\n    locales \\\n    ruby \\\n    htop \\\n    libeigen3-dev \\\n    python \\\n    python-dev \\\n    python-pip \\\n    python-pip \\\n    python-wheel \\\n    python-setuptools \\\n    python-numpy \\\n    python3 \\\n    python3-dev \\\n    python3-pip \\\n    python3-wheel \\\n    python3-setuptools \\\n    python3-numpy \\\n    libibverbs-dev \\\n    libibumad-dev \\\n    libmlx4-1 \\\n    infiniband-diags \\\n    ibverbs-utils \\\n    perftest && \\\n    rm -rf /var/lib/apt/lists/* /var/cache/apt/archives/* && \\\n    echo \"en_US.UTF-8 UTF-8\" > /etc/locale.gen && locale-gen\nARG GROUP_ID=51000\nRUN addgroup --gid ${GROUP_ID} fulltime\n\n# Install OpenMPI with cuda & verbs\nENV LD_LIBRARY_PATH=/usr/local/lib:$LD_LIBRARY_PATH\nENV LIBRARY_PATH=/usr/local/lib:$LIBRARY_PATH\nRUN mkdir /root/lib && cd /root/lib && \\\n    curl -f -L -O https://download.open-mpi.org/release/open-mpi/v3.1/openmpi-3.1.1.tar.gz && \\\n    tar zxvf openmpi-3.1.1.tar.gz && rm -rf openmpi-3.1.1.tar.gz && \\\n    cd openmpi-3.1.1 && \\\n    ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" --with-cuda --with-verbs && \\\n    make -j8 && make install && \\\n    ompi_info --parsable --all | grep -q \"mpi_built_with_cuda_support:value:true\"\n\nARG USER_ID=1000\nARG USER_NAME=ubuntu\nRUN mkdir -p /home/${USER_NAME}\nRUN useradd -d /home/${USER_NAME} -g ${GROUP_ID} -G sudo -u ${USER_ID} ${USER_NAME}\nRUN addgroup --gid ${USER_ID} ${USER_NAME}\nRUN chown ${USER_NAME}:root /home/${USER_NAME}\nRUN chsh -s /usr/bin/zsh ${USER_NAME}\n\n# Switch to USER_NAME\nUSER ${USER_NAME}\nWORKDIR /home/${USER_NAME}\nENV HOME /home/${USER_NAME}\n\n# Install oh-my-zsh\nRUN git clone https://github.com/robbyrussell/oh-my-zsh.git ~/.oh-my-zsh && \\\n    cp ~/.oh-my-zsh/templates/zshrc.zsh-template ~/.zshrc\n\n# Install pyenv\nRUN git clone https://github.com/pyenv/pyenv.git ~/.pyenv && \\\n    echo 'export PYENV_ROOT=\"$HOME/.pyenv\"' >> ~/.zshrc && \\\n    echo 'export PATH=\"$PYENV_ROOT/bin:$PATH\"' >> ~/.zshrc && \\\n    echo 'if command -v pyenv 1>/dev/null 2>&1; then\\n  eval \"$(pyenv init -)\"\\nfi' >> ~/.zshrc\nENV PYENV_ROOT $HOME/.pyenv\nENV PATH $PYENV_ROOT/bin:$PATH\nRUN eval \"$(pyenv init -)\"\n\n# Install miniconda3-4.3.0\nRUN pyenv install miniconda3-4.3.30 && \\\n    pyenv global miniconda3-4.3.30 && \\\n    pyenv rehash\n\nRUN CONDA=$(pyenv which conda) && \\\n    PIP=$(pyenv which pip) && \\\n    $PIP install -U pip && \\\n    $PIP install PyHamcrest && \\\n    $CONDA install -y numpy scipy scikit-learn scikit-image jupyter matplotlib cython protobuf pandas h5py cmake\n\nENV LD_LIBRARY_PATH=$LD_LIBRARY_PATH:$HOME/lib\nENV LIBRARY_PATH=$LIBRARY_PATH:$HOME/lib\nENV CPATH=$CPATH:/usr/local/include:$HOME/include\nRUN echo 'export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/usr/local/lib:$HOME/lib' >> ~/.zshrc && \\\n    echo 'export LIBRARY_PATH=$LIBRARY_PATH:/usr/local/lib:$HOME/lib' >> ~/.zshrc && \\\n    echo 'export CPATH=$CPATH:/usr/local/include:$HOME/include' >> ~/.zshrc\n\n# Install libjpeg-turbo\nRUN if [ ! -d $HOME/lib ]; then mkdir $HOME/lib; fi\nRUN cd $HOME/lib && mkdir libjpeg-turbo && cd libjpeg-turbo && \\\n    curl -f -L -O https://github.com/libjpeg-turbo/libjpeg-turbo/archive/2.0.0.tar.gz && \\\n    tar zxvf 2.0.0.tar.gz && \\\n    rm -rf 2.0.0.tar.gz && \\\n    cd libjpeg-turbo-2.0.0 && \\\n    mkdir build && cd build && \\\n    cmake -DCMAKE_INSTALL_PREFIX=${HOME} .. && \\\n    make -j$(nproc) && \\\n    make install && \\\n    cd ${HOME} && rm -rf ${HOME}/libjpeg-turbo\n\n# Install opencv\nRUN cd $HOME/lib && mkdir opencv && cd opencv && \\\n    curl -f -L -O https://github.com/opencv/opencv/archive/3.4.3.zip && \\\n    unzip 3.4.3.zip && rm -rf 3.4.3.zip && \\\n    curl -f -L -O https://github.com/opencv/opencv_contrib/archive/3.4.3.zip && \\\n    unzip 3.4.3.zip && rm -rf 3.4.3.zip && \\\n    cd opencv-3.4.3 && mkdir build && cd build\n\nRUN cd $HOME/lib/opencv/opencv-3.4.3/build && \\\n    PYTHON=$(pyenv which python) && \\\n    $(pyenv which cmake) \\\n    -DCMAKE_BUILD_TYPE=RELEASE \\\n    -DCMAKE_INSTALL_PREFIX=${HOME} \\\n    -DWITH_TBB=ON \\\n    -DWITH_EIGEN=ON \\\n    -DWITH_FFMPEG=ON \\\n    -DWITH_QT=OFF \\\n    -DWITH_OPENCL=OFF \\\n    -DWITH_CUDA=OFF \\\n    -DWITH_CUBLAS=OFF \\\n    -DWITH_CUFFT=OFF \\\n    -DWITH_JPEG=ON \\\n    -DBUILD_JPEG=OFF \\\n    -DBUILD_TIFF=ON \\\n    -DWITH_TIFF=OFF \\\n    -DBUILD_PNG=ON \\\n    -DWITH_PNG=OFF \\\n    -DJPEG_INCLUDE_DIR=${HOME}/include \\\n    -DJPEG_LIBRARY=${HOME}/lib/libjpeg.so \\\n    -DOPENCV_EXTRA_MODULES_PATH=${HOME}/lib/opencv/opencv_contrib-3.4.3/modules \\\n    -DBUILD_opencv_python3=ON \\\n    -DPYTHON3_EXECUTABLE=$(which $PYTHON) \\\n    -DPYTHON3_INCLUDE_DIR=$($PYTHON -c 'from distutils.sysconfig import get_python_inc; print(get_python_inc())') \\\n    -DPYTHON3_INCLUDE_DIR2t=$($PYTHON -c 'from distutils.sysconfig import get_python_inc; print(get_python_inc())') \\\n    -DPYTHON3_NUMPY_INCLUDE_DIRS=$($PYTHON -c 'import numpy; print(numpy.get_include())') \\\n    -DPYTHON3_LIBRARY=find $(pyenv prefix)/lib -name \"libpython*.so\" \\\n    .. && \\\n    LIBRARY_PATH=$LIBRARY_PATH:/usr/local/lib:$HOME/lib make -j$(nproc) && make install\n\n# Install MPI4PY\nRUN PIP=$(pyenv which pip) && \\\n    $PIP install mpi4py\n\nARG CHAINER_VERSION=6.0.0b1\nARG CUPY_VERSION=6.0.0b1\nARG CHAINERCV_VERSION=0.11.0\n\n# Install Chainer family\nRUN PIP=$(pyenv which pip) && \\\n    $PIP install chainer==$CHAINER_VERSION && \\\n    $PIP install cupy-cuda92==$CUPY_VERSION && \\\n    $PIP install chainercv==$CHAINERCV_VERSION\n\n# Install other python packages\nRUN PIP=$(pyenv which pip) && \\\n    $PIP install jupyterthemes && \\\n    JT=$(pyenv which jt) && \\\n    $JT -f dejavu -T -N && \\\n    $PIP install xlrd && \\\n    $PIP install imageio && \\\n    $PIP install tqdm && \\\n    $PIP install pyyaml && \\\n    $PIP install ipdb && \\\n    $PIP install pynvvl-cuda92 --pre\n\n# Set environment variable for OpenCV python wrapper\nENV PYTHONPATH=$HOME/lib/python3.6/site-packages:$PYTHONPATH\n\n# Install Linuxbrew\nENV PATH $PATH:$HOME/.linuxbrew/bin:$HOME/.linuxbrew/sbin\nRUN git clone https://github.com/Linuxbrew/brew.git ~/.linuxbrew/Homebrew \\\n    && mkdir ~/.linuxbrew/bin \\\n\t&& ln -s ~/.linuxbrew/Homebrew/bin/brew ~/.linuxbrew/bin/ \\\n\t&& brew config\nRUN echo \"export PATH=$PATH:'$(brew --prefix)/bin:$(brew --prefix)/sbin'\" >> ~/.zshrc\n\n"
}