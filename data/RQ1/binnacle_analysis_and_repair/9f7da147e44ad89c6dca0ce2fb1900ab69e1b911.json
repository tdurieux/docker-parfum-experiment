{
  "startTime": 1674244333868,
  "endTime": 1674244334705,
  "originalSmells": [
    {
      "rule": "wgetUseHttpsUrl",
      "position": {
        "lineStart": 44,
        "lineEnd": 44,
        "columnStart": 4,
        "columnEnd": 140
      }
    },
    {
      "rule": "wgetUseHttpsUrl",
      "position": {
        "lineStart": 45,
        "lineEnd": 45,
        "columnStart": 4,
        "columnEnd": 136
      }
    },
    {
      "rule": "wgetUseHttpsUrl",
      "position": {
        "lineStart": 69,
        "lineEnd": 69,
        "columnStart": 4,
        "columnEnd": 141
      }
    },
    {
      "rule": "wgetUseHttpsUrl",
      "position": {
        "lineStart": 70,
        "lineEnd": 70,
        "columnStart": 4,
        "columnEnd": 137
      }
    },
    {
      "rule": "configureShouldUseBuildFlag",
      "position": {
        "lineStart": 18,
        "lineEnd": 18,
        "columnStart": 4,
        "columnEnd": 15
      }
    },
    {
      "rule": "yumInstallRmVarCacheYum",
      "position": {
        "lineStart": 6,
        "lineEnd": 6,
        "columnStart": 4,
        "columnEnd": 75
      }
    },
    {
      "rule": "yumInstallRmVarCacheYum",
      "position": {
        "lineStart": 7,
        "lineEnd": 7,
        "columnStart": 4,
        "columnEnd": 47
      }
    },
    {
      "rule": "yumInstallRmVarCacheYum",
      "position": {
        "lineStart": 9,
        "lineEnd": 9,
        "columnStart": 4,
        "columnEnd": 104
      }
    },
    {
      "rule": "yumInstallRmVarCacheYum",
      "position": {
        "lineStart": 13,
        "lineEnd": 13,
        "columnStart": 4,
        "columnEnd": 49
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 46,
        "lineEnd": 46,
        "columnStart": 56,
        "columnEnd": 76
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 47,
        "lineEnd": 47,
        "columnStart": 52,
        "columnEnd": 72
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 71,
        "lineEnd": 71,
        "columnStart": 57,
        "columnEnd": 77
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 72,
        "lineEnd": 72,
        "columnStart": 53,
        "columnEnd": 73
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM nvidia/cuda:9.0-devel-centos7\n\nENV LC_ALL en_US.UTF-8\nENV LANG en_US.UTF-8\nENV LANGUAGE en_US.UTF-8\n\nRUN yum install -y wget curl perl cmake util-linux xz bzip2 git patch which && rm -rf /var/cache/yum\nRUN yum install -y yum-utils centos-release-scl && rm -rf /var/cache/yum\nRUN yum-config-manager --enable rhel-server-rhscl-7-rpms\nRUN yum install -y devtoolset-3-gcc devtoolset-3-gcc-c++ devtoolset-3-gcc-gfortran devtoolset-3-binutils && rm -rf /var/cache/yum\nENV PATH=/opt/rh/devtoolset-3/root/usr/bin:$PATH\nENV LD_LIBRARY_PATH=/opt/rh/devtoolset-3/root/usr/lib64:/opt/rh/devtoolset-3/root/usr/lib:$LD_LIBRARY_PATH\n\nRUN yum install -y autoconf aclocal automake make && rm -rf /var/cache/yum\nRUN git clone https://github.com/NixOS/patchelf && \\\n    cd patchelf && \\\n    sed -i 's/serial/parallel/g' configure.ac && \\\n    ./bootstrap.sh && \\\n    ./configure --build=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" && \\\n    make && \\\n    make install && \\\n    cd .. && \\\n    rm -rf patchelf\n\n\n# install CUDA 9.0 in the same container\nRUN wget -q https://developer.nvidia.com/compute/cuda/9.0/Prod/local_installers/cuda_9.0.176_384.81_linux-run && \\\n    chmod +x cuda_9.0.176_384.81_linux-run && \\\n    ./cuda_9.0.176_384.81_linux-run --silent --no-opengl-libs --toolkit && \\\n    rm -f cuda_9.0.176_384.81_linux-run\n\n# patch 1, patch2\nRUN wget -q https://developer.nvidia.com/compute/cuda/9.0/Prod/patches/1/cuda_9.0.176.1_linux-run && \\\n    chmod +x cuda_9.0.176.1_linux-run && \\\n    ./cuda_9.0.176.1_linux-run -s --accept-eula && \\\n    rm -f cuda_9.0.176.1_linux-run\nRUN wget -q https://developer.nvidia.com/compute/cuda/9.0/Prod/patches/2/cuda_9.0.176.2_linux-run && \\\n    chmod +x cuda_9.0.176.2_linux-run && \\\n    ./cuda_9.0.176.2_linux-run -s --accept-eula && \\\n    rm -f cuda_9.0.176.2_linux-run\n\n# install CUDA 9.0 CuDNN\n# cuDNN license: https://developer.nvidia.com/cudnn/license_agreement\nRUN mkdir tmp_cudnn && cd tmp_cudnn && \\\n    wget -q https://developer.download.nvidia.com/compute/machine-learning/repos/ubuntu1604/x86_64/libcudnn7-dev_7.5.1.10-1+cuda9.0_amd64.deb && \\\n    wget -q https://developer.download.nvidia.com/compute/machine-learning/repos/ubuntu1604/x86_64/libcudnn7_7.5.1.10-1+cuda9.0_amd64.deb && \\\n    ar -x libcudnn7-dev_7.5.1.10-1+cuda9.0_amd64.deb && tar -xvf data.tar.xz && \\\n    ar -x libcudnn7_7.5.1.10-1+cuda9.0_amd64.deb && tar -xvf data.tar.xz && \\\n    mkdir -p cuda/include && mkdir -p cuda/lib64 && \\\n    cp -a usr/include/x86_64-linux-gnu/cudnn_v7.h cuda/include/cudnn.h && \\\n    cp -a usr/lib/x86_64-linux-gnu/libcudnn* cuda/lib64 && \\\n    mv cuda/lib64/libcudnn_static_v7.a cuda/lib64/libcudnn_static.a && \\\n    ln -s libcudnn.so.7 cuda/lib64/libcudnn.so && \\\n    chmod +x cuda/lib64/*.so && \\\n    cp -a cuda/include/* /usr/local/cuda/include/ && \\\n    cp -a cuda/lib64/* /usr/local/cuda/lib64/ && \\\n    cd .. && \\\n    rm -rf tmp_cudnn && \\\n    ldconfig && rm data.tar.xz\n\n# install CUDA 10.0 in the same container\nRUN wget -q https://developer.nvidia.com/compute/cuda/10.0/Prod/local_installers/cuda_10.0.130_410.48_linux && \\\n    chmod +x cuda_10.0.130_410.48_linux && \\\n    ./cuda_10.0.130_410.48_linux --silent --no-opengl-libs --toolkit && \\\n    rm -f cuda_10.0.130_410.48_linux\n\n# install CUDA 10.0 CuDNN\n# cuDNN license: https://developer.nvidia.com/cudnn/license_agreement\nRUN mkdir tmp_cudnn && cd tmp_cudnn && \\\n    wget -q https://developer.download.nvidia.com/compute/machine-learning/repos/ubuntu1604/x86_64/libcudnn7-dev_7.5.1.10-1+cuda10.0_amd64.deb && \\\n    wget -q https://developer.download.nvidia.com/compute/machine-learning/repos/ubuntu1604/x86_64/libcudnn7_7.5.1.10-1+cuda10.0_amd64.deb && \\\n    ar -x libcudnn7-dev_7.5.1.10-1+cuda10.0_amd64.deb && tar -xvf data.tar.xz && \\\n    ar -x libcudnn7_7.5.1.10-1+cuda10.0_amd64.deb && tar -xvf data.tar.xz && \\\n    mkdir -p cuda/include && mkdir -p cuda/lib64 && \\\n    cp -a usr/include/x86_64-linux-gnu/cudnn_v7.h cuda/include/cudnn.h && \\\n    cp -a usr/lib/x86_64-linux-gnu/libcudnn* cuda/lib64 && \\\n    mv cuda/lib64/libcudnn_static_v7.a cuda/lib64/libcudnn_static.a && \\\n    ln -s libcudnn.so.7 cuda/lib64/libcudnn.so && \\\n    chmod +x cuda/lib64/*.so && \\\n    cp -a cuda/include/* /usr/local/cuda/include/ && \\\n    cp -a cuda/lib64/* /usr/local/cuda/lib64/ && \\\n    cd .. && \\\n    rm -rf tmp_cudnn && \\\n    ldconfig && rm data.tar.xz\n\n# # install CUDA 10.1 in the same container\n# RUN wget -q https://developer.nvidia.com/compute/cuda/10.1/Prod/local_installers/cuda_10.1.105_418.39_linux.run && \\\n#     chmod +x cuda_10.1.105_418.39_linux.run && \\\n#     ./cuda_10.1.105_418.39_linux.run --silent --no-opengl-libs --toolkit && \\\n#     rm -f cuda_10.1.105_418.39_linux.run\n\n# # install CUDA 10.1 CuDNN\n# # cuDNN license: https://developer.nvidia.com/cudnn/license_agreement\n# RUN mkdir tmp_cudnn && cd tmp_cudnn && \\\n#     wget -q http://developer.download.nvidia.com/compute/machine-learning/repos/ubuntu1604/x86_64/libcudnn7-dev_7.5.1.10-1+cuda10.1_amd64.deb && \\\n#     wget -q http://developer.download.nvidia.com/compute/machine-learning/repos/ubuntu1604/x86_64/libcudnn7_7.5.1.10-1+cuda10.1_amd64.deb && \\\n#     ar -x libcudnn7-dev_7.5.1.10-1+cuda10.1_amd64.deb && tar -xvf data.tar.xz && \\\n#     ar -x libcudnn7_7.5.1.10-1+cuda10.1_amd64.deb && tar -xvf data.tar.xz && \\\n#     mkdir -p cuda/include && mkdir -p cuda/lib64 && \\\n#     cp -a usr/include/x86_64-linux-gnu/cudnn_v7.h cuda/include/cudnn.h && \\\n#     cp -a usr/lib/x86_64-linux-gnu/libcudnn* cuda/lib64 && \\\n#     mv cuda/lib64/libcudnn_static_v7.a cuda/lib64/libcudnn_static.a && \\\n#     ln -s libcudnn.so.7 cuda/lib64/libcudnn.so && \\\n#     chmod +x cuda/lib64/*.so && \\\n#     cp -a cuda/include/* /usr/local/cuda/include/ && \\\n#     cp -a cuda/lib64/* /usr/local/cuda/lib64/ && \\\n#     cd .. && \\\n#     rm -rf tmp_cudnn && \\\n#     ldconfig\n\n#####################################################################################\n# CUDA 9.0 prune static libs\n#####################################################################################\nARG NVPRUNE=\"/usr/local/cuda-9.0/bin/nvprune\"\nARG CUDA_LIB_DIR=\"/usr/local/cuda-9.0/lib64\"\n\nARG GENCODE=\"-gencode arch=compute_35,code=sm_35 -gencode arch=compute_50,code=sm_50 -gencode arch=compute_60,code=sm_60 -gencode arch=compute_70,code=sm_70\"\nARG GENCODE_CUDNN=\"-gencode arch=compute_35,code=sm_35 -gencode arch=compute_37,code=sm_37 -gencode arch=compute_50,code=sm_50 -gencode arch=compute_60,code=sm_60 -gencode arch=compute_61,code=sm_61 -gencode arch=compute_70,code=sm_70\"\n\n# all CUDA libs except CuDNN and CuBLAS (cudnn and cublas need arch 3.7 included)\nRUN ls $CUDA_LIB_DIR/ | grep \"\\.a\" | grep -v \"culibos\" | grep -v \"cudart\" | grep -v \"cudnn\" | grep -v \"cublas\"  \\\n    | xargs -I {} bash -c \\\n    \"echo {} && $NVPRUNE $GENCODE $CUDA_LIB_DIR/{} -o $CUDA_LIB_DIR/{}\"\n\n# prune CuDNN and CuBLAS\nRUN $NVPRUNE $GENCODE_CUDNN $CUDA_LIB_DIR/libcudnn_static.a -o $CUDA_LIB_DIR/libcudnn_static.a\nRUN $NVPRUNE $GENCODE_CUDNN $CUDA_LIB_DIR/libcublas_static.a -o $CUDA_LIB_DIR/libcublas_static.a\nRUN $NVPRUNE $GENCODE_CUDNN $CUDA_LIB_DIR/libcublas_device.a -o $CUDA_LIB_DIR/libcublas_device.a\n\n#####################################################################################\n# CUDA 10.0 prune static libs\n#####################################################################################\nARG NVPRUNE=\"/usr/local/cuda-10.0/bin/nvprune\"\nARG CUDA_LIB_DIR=\"/usr/local/cuda-10.0/lib64\"\n\nARG GENCODE=\"-gencode arch=compute_35,code=sm_35 -gencode arch=compute_50,code=sm_50 -gencode arch=compute_60,code=sm_60 -gencode arch=compute_70,code=sm_70 -gencode arch=compute_75,code=sm_75\"\nARG GENCODE_CUDNN=\"-gencode arch=compute_35,code=sm_35 -gencode arch=compute_37,code=sm_37 -gencode arch=compute_50,code=sm_50 -gencode arch=compute_60,code=sm_60 -gencode arch=compute_61,code=sm_61 -gencode arch=compute_70,code=sm_70 -gencode arch=compute_75,code=sm_75\"\n\n# all CUDA libs except CuDNN and CuBLAS (cudnn and cublas need arch 3.7 included)\n# curand cannot be pruned, as there's a bug in 10.0 + curand_static + nvprune. Filed with nvidia at 2460767\nRUN ls $CUDA_LIB_DIR/ | grep \"\\.a\" | grep -v \"culibos\" | grep -v \"cudart\" | grep -v \"cudnn\" | grep -v \"cublas\" | grep -v \"metis\" | grep -v \"curand\"  \\\n    | xargs -I {} bash -c \\\n    \"echo {} && $NVPRUNE $GENCODE $CUDA_LIB_DIR/{} -o $CUDA_LIB_DIR/{}\"\n\n# prune CuDNN and CuBLAS\nRUN $NVPRUNE $GENCODE_CUDNN $CUDA_LIB_DIR/libcudnn_static.a -o $CUDA_LIB_DIR/libcudnn_static.a\nRUN $NVPRUNE $GENCODE_CUDNN $CUDA_LIB_DIR/libcublas_static.a -o $CUDA_LIB_DIR/libcublas_static.a\n\n#################################################################################################\n\n# Anaconda\nRUN wget -q https://repo.continuum.io/miniconda/Miniconda2-latest-Linux-x86_64.sh && \\\n    chmod +x Miniconda2-latest-Linux-x86_64.sh && \\\n    ./Miniconda2-latest-Linux-x86_64.sh -b -p /opt/conda && \\\n    rm Miniconda2-latest-Linux-x86_64.sh\nENV PATH /opt/conda/bin:$PATH\nRUN conda install -y conda-build=3.16 anaconda-client git ninja\nRUN conda remove -y --force patchelf"
}