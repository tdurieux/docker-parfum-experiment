{
  "startTime": 1674249082547,
  "endTime": 1674249083089,
  "originalSmells": [
    {
      "rule": "aptGetInstallUseY",
      "position": {
        "lineStart": 44,
        "lineEnd": 44,
        "columnStart": 4,
        "columnEnd": 84
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 44,
        "lineEnd": 44,
        "columnStart": 4,
        "columnEnd": 84
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# Google Tensorflow 2.0 (CUDA10) & Python 3.6\n# ref: https://tensorflow.org\n\n# import python-binary\nFROM lablup/kernel-base:python3.6 as python-binary\n\n# Build target: lablup/common-tensorflow:2.0-py36-cuda9\nFROM nvidia/cuda:10.0-base-ubuntu18.04\nLABEL maintainer=\"Mario Cho <m.cho@lablup.com>\"\n\n# The TensorFlow version\nENV TF_VERSION master\nENV BAZEL_VERSION 0.20.0\nENV CUDA_VERSION 10.0.130\nENV CUDNN_VERSION 7.4.2.24\nENV NCCL_VERSION 2.4.2\nENV TENSORT_VERSION 5.0.2\nENV PYTHON_BIN_PATH /usr/local/bin/python\nENV PYTHON_LIB_PATH /usr/local/lib/python3.6/site-packages\nENV GCC_HOST_COMPILER_PATH /usr/bin/gcc\nENV CC_OPT_FLAGS \"-march=x86-64 -mavx -mavx2 -mfma -mfpmath=both -msse4.1 -msse4.2\"\nENV TF_NEED_JEMALLOC 1\nENV TF_NEED_GCP 1\nENV TF_NEED_HDFS 1\nENV TF_ENABLE_XLA 1\nENV TF_NEED_VERBS 0\nENV TF_NEED_OPENCL_SYCL 0\nENV TF_NEED_CUDA 1\nENV TF_CUDA_CLANG 0\nENV TF_NEED_TENSORRT 1\nENV TF_NEED_MPI 0\nENV TF_NEED_S3 1\nENV TF_CUDA_VERSION 10.0\nENV TF_CUDNN_VERSION 7\nENV TF_NCCL_VERSION 2\nENV TF_CUDA_COMPUTE_CAPABILITIES 3.5,3.7,5.2,6.0,6.1,7.0\nENV LD_LIBRARY_PATH /usr/local/cuda/extras/CUPTI/lib64:$LD_LIBRARY_PATH\nENV CUDA_TOOLKIT_PATH /usr/local/cuda\nENV CUDNN_INSTALL_PATH /usr/local/cuda\nENV CI_BUILD_PYTHON python\n\n# Install system package dependencies\n# NOTE: running bazel requires JDK, not JRE!\nRUN apt-get update && \\\n    apt-get install -y --no-install-recommends nvinfer-runtime-trt-repo-ubuntu1804-$TENSORT_VERSION-ga-cuda10.0 && \\\n    apt-get update && \\\n    apt-get install -y --no-install-recommends openjdk-8-jdk-headless && \\\n    apt-get install -y --no-install-recommends \\\n        curl gcc g++ make cmake git \\\n        cuda-command-line-tools-10-0 \\\n        cuda-cublas-dev-10-0 \\\n        cuda-cudart-dev-10-0 \\\n        cuda-cufft-dev-10-0 \\\n        cuda-curand-dev-10-0 \\\n        cuda-cusolver-dev-10-0 \\\n        cuda-cusparse-dev-10-0 \\\n        libcudnn7=$CUDNN_VERSION-1+cuda10.0 \\\n        libcudnn7-dev=$CUDNN_VERSION-1+cuda10.0 \\\n\tlibnvinfer5=$TENSORT_VERSION-1+cuda10.0 \\\n\tlibnvinfer-dev=$TENSORT_VERSION-1+cuda10.0 \\\n        libnccl2=$NCCL_VERSION-1+cuda10.0 \\\n        libnccl-dev=$NCCL_VERSION-1+cuda10.0 \\\n\tlibssh-dev \\\n\tproj-bin libproj-dev \\\n\tlibgeos-dev libgeos++-dev \\\n        libcurl3-dev \\\n        libfreetype6-dev \\\n        libhdf5-serial-dev \\\n        libpng-dev \\\n        libzmq3-dev \\\n        libffi-dev \\\n        pkg-config \\\n        rsync \\\n        software-properties-common \\\n        zip unzip \\\n        zlib1g-dev \\\n        wget \\\n        imagemagick \\\n        graphviz \\\n        rsync \\\n        sed \\\n        swig \\\n        git-core \\\n\tzip && \\\n    apt-get clean && \\\n    rm -rf /var/lib/apt/lists/* && \\\n    find /usr/local/cuda-10.0/lib64/ -type f -name 'lib*_static.a' -not -name 'libcudart_static.a' -delete && \\\n    rm /usr/lib/x86_64-linux-gnu/libcudnn_static_v7.a\n\n# Link NCCL libray and header where the build script expects them.\nRUN mkdir /usr/local/cuda-10.0/lib &&  \\\n    ln -s /usr/lib/x86_64-linux-gnu/libnccl.so.2 /usr/local/cuda/lib/libnccl.so.2 && \\\n    ln -s /usr/include/nccl.h /usr/local/cuda/include/nccl.h\n\nCOPY --from=python-binary /python.tar.gz /\nRUN cd /; tar xzpf python.tar.gz; rm python.tar.gz; ldconfig\n\n# Check Bazel/Python is runnable.\n# Also install TensorFlow build dependencies (ensure we have proper numpy)\nRUN bazel version; python -c \"import sys; print(sys.prefix); print(sys.version_info)\" && \\\n    pip install --no-cache-dir wheel numpy scipy && \\\n    pip install --no-cache-dir keras_applications && \\\n    pip install --no-cache-dir keras_preprocessing && \\\n    rm -f /tmp/*.whl\n\n# Running bazel inside a `docker build` command causes trouble, cf:\n#   https://github.com/bazelbuild/bazel/issues/134\n# The easiest solution is to set up a bazelrc file forcing --batch.\nRUN echo \"startup --batch\" >>/etc/bazel.bazelrc\nRUN echo \"build --spawn_strategy=standalone --genrule_strategy=standalone\" >>/etc/bazel.bazelrc\n\nWORKDIR /\nRUN mkdir /bazel && \\\n    cd /bazel && \\\n    curl -H \"User-Agent: Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/57.0.2987.133 Safari/537.36\" -fSsL -O https://github.com/bazelbuild/bazel/releases/download/$BAZEL_VERSION/bazel-$BAZEL_VERSION-installer-linux-x86_64.sh && \\\n    curl -H \"User-Agent: Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/57.0.2987.133 Safari/537.36\" -fSsL -o /bazel/LICENSE.txt https://raw.githubusercontent.com/bazelbuild/bazel/master/LICENSE && \\\n    chmod +x bazel-*.sh && \\\n    ./bazel-$BAZEL_VERSION-installer-linux-x86_64.sh && \\\n    cd / && \\\n    rm -f /bazel/bazel-$BAZEL_VERSION-installer-linux-x86_64.sh && \\\n    bazel version && \\\n    python -c \"import sys; print(sys.prefix); print(sys.version_info)\" && \\\n    python -c \"import numpy; numpy.show_config()\" && \\\n    python -c \"import scipy; scipy.show_config()\"\n\nRUN : build TensorFlow pip package && \\\n    cd /tmp && \\\n    git clone --branch=r${TF_VERSION} --depth=1 https://github.com/tensorflow/tensorflow.git tensorflow-${TF_VERSION} && \\\n#    curl -SL https://github.com/tensorflow/tensorflow/archive/r${TF_VERSION}.tar.gz | tar xzf - && \\\n    ldconfig\n\nRUN cd /tmp/tensorflow-${TF_VERSION} && \\\n    ln -s /usr/local/cuda/lib64/stubs/libcuda.so /usr/local/cuda/lib64/stubs/libcuda.so.1 && \\\n        LD_LIBRARY_PATH=/usr/local/cuda/lib64/stubs:${LD_LIBRARY_PATH} \\\n        tensorflow/tools/ci_build/builds/configured GPU \\\n    bazel build \\\n        -c opt \\\n\t--copt=-mavx \\\n\t--copt=-mavx2 \\\n\t--config=cuda \\\n\t--config=tensorrt \\\n\t--cxxopt=\"-D_GLIBCXX_USE_CXX11_ABI=0\" \\\n        tensorflow/tools/pip_package:build_pip_package && \\\n    rm /usr/local/cuda/lib64/stubs/libcuda.so.1 && \\\n    bazel-bin/tensorflow/tools/pip_package/build_pip_package /tmp/tensorflow_pkg && \\\n    rm -fr /root/.cache\n\nRUN ls -lh /tmp/tensorflow_pkg\n\n# vim: ft=dockerfile sts=4 sw=4 et tw=0"
}