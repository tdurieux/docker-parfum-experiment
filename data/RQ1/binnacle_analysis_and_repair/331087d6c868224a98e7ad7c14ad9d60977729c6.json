{
  "startTime": 1674250455799,
  "endTime": 1674250455848,
  "originalSmells": [
    {
      "rule": "yarnCacheCleanAfterInstall",
      "position": {
        "lineStart": 15,
        "lineEnd": 15,
        "columnStart": 4,
        "columnEnd": 77
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM node:10-alpine as install\n\nARG LOG_LEVEL=error\nENV NPM_CONFIG_LOGLEVEL ${LOG_LEVEL}\n\nARG NODE_ENV=production\nENV NODE_ENV ${NODE_ENV}\n\n# build dependencies, see https://github.com/kelektiv/node.bcrypt.js/wiki/Installation-Instructions#alpine-linux-based-images\nRUN apk --no-cache add --update --no-progress --virtual builds-deps build-base python\n\nCOPY package.json .\nCOPY yarn.lock .\n\nRUN yarn install --force --ignore-scripts --frozen-lockfile --ignore-optional && yarn cache clean;\n\nRUN npm rebuild bcrypt --build-from-source\n\nFROM node:10-alpine as build\n\n# repeated ARG's, see Note in https://docs.docker.com/compose/compose-file/#args\nARG LOG_LEVEL=error\nENV NPM_CONFIG_LOGLEVEL ${LOG_LEVEL}\n\nARG NODE_ENV=production\nENV NODE_ENV ${NODE_ENV}\n\nARG PORT=8000\nENV PORT ${PORT}\n\nCOPY --from=install node_modules node_modules\nCOPY . .\n\nRUN yarn build\n\nFROM node:10-alpine as run\n\n# we don't need the args here cause they're sent at run time\n# and we only really need these to run successully (KEEP IT LEAN!)\nWORKDIR /usr/src/api\nCOPY --from=build node_modules node_modules\nCOPY --from=build production-server production-server\nCOPY --from=build package.json package.json\n\nEXPOSE ${PORT}\n\nCMD [\"yarn\", \"start\"]"
}