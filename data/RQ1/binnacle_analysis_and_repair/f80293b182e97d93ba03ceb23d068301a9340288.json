{
  "startTime": 1674250921891,
  "endTime": 1674250922104,
  "originalSmells": [
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 2,
        "lineEnd": 26,
        "columnStart": 22,
        "columnEnd": 28
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 33,
        "lineEnd": 33,
        "columnStart": 4,
        "columnEnd": 63
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM ubuntu:16.04\n\nRUN apt-get update && apt-get install -y --no-install-recommends \\\n  g++ \\\n  make \\\n  file \\\n  curl \\\n  ca-certificates \\\n  python2.7 \\\n  git \\\n  cmake \\\n  sudo \\\n  xz-utils \\\n  zlib1g-dev \\\n  g++-arm-linux-gnueabi \\\n  g++-arm-linux-gnueabihf \\\n  g++-aarch64-linux-gnu \\\n  gcc-sparc64-linux-gnu \\\n  libc6-dev-sparc64-cross \\\n  bzip2 \\\n  patch \\\n  libssl-dev \\\n  pkg-config \\\n  libnewlib-arm-none-eabi \\\n  qemu-system-arm \\\n# software-properties-common for the add-apt-repository command\n  software-properties-common && rm -rf /var/lib/apt/lists/*;\n\nWORKDIR /build\n\n# Use the team-gcc-arm-embedded PPA for a newer version of Arm GCC\nRUN add-apt-repository ppa:team-gcc-arm-embedded/ppa && \\\n    apt-get update && \\\n    apt-get install -y --no-install-recommends gcc-arm-embedded && rm -rf /var/lib/apt/lists/*;\n\nCOPY dist-various-1/build-rumprun.sh /build\nRUN ./build-rumprun.sh\n\nCOPY dist-various-1/install-x86_64-redox.sh /build\nRUN ./install-x86_64-redox.sh\n\nCOPY dist-various-1/install-mips-musl.sh /build\nRUN ./install-mips-musl.sh\n\nCOPY dist-various-1/install-mipsel-musl.sh /build\nRUN ./install-mipsel-musl.sh\n\n# Suppress some warnings in the openwrt toolchains we downloaded\nENV STAGING_DIR=/tmp\n\nCOPY scripts/musl.sh /build\nRUN env \\\n    CC=arm-linux-gnueabi-gcc CFLAGS=\"-march=armv5te -marm -mfloat-abi=soft\" \\\n    CXX=arm-linux-gnueabi-g++ CXXFLAGS=\"-march=armv5te -marm -mfloat-abi=soft\" \\\n    bash musl.sh armv5te && \\\n    env \\\n    CC=arm-linux-gnueabi-gcc CFLAGS=\"-march=armv6 -marm\" \\\n    CXX=arm-linux-gnueabi-g++ CXXFLAGS=\"-march=armv6 -marm\" \\\n    bash musl.sh arm && \\\n    env \\\n    CC=arm-linux-gnueabihf-gcc CFLAGS=\"-march=armv6 -marm -mfpu=vfp\" \\\n    CXX=arm-linux-gnueabihf-g++ CXXFLAGS=\"-march=armv6 -marm -mfpu=vfp\" \\\n    bash musl.sh armhf && \\\n    env \\\n    CC=arm-linux-gnueabihf-gcc CFLAGS=\"-march=armv7-a\" \\\n    CXX=arm-linux-gnueabihf-g++ CXXFLAGS=\"-march=armv7-a\" \\\n    bash musl.sh armv7 && \\\n    env \\\n    CC=aarch64-linux-gnu-gcc \\\n    CXX=aarch64-linux-gnu-g++ \\\n    bash musl.sh aarch64 && \\\n    env \\\n    CC=mips-openwrt-linux-gcc \\\n    CXX=mips-openwrt-linux-g++ \\\n    bash musl.sh mips && \\\n    env \\\n    CC=mipsel-openwrt-linux-gcc \\\n    CXX=mipsel-openwrt-linux-g++ \\\n    bash musl.sh mipsel && \\\n    rm -rf /build/*\n\n# FIXME(mozilla/sccache#235) this shouldn't be necessary but is currently\n# necessary to disambiguate the mips compiler with the mipsel compiler. We want\n# to give these two wrapper scripts (currently identical ones) different hashes\n# to ensure that sccache understands that they're different compilers.\nRUN \\\n  echo \"# a\" >> /usr/local/mips-linux-musl/bin/mips-openwrt-linux-musl-wrapper.sh && \\\n  echo \"# b\" >> /usr/local/mipsel-linux-musl/bin/mipsel-openwrt-linux-musl-wrapper.sh\n\nENV RUN_MAKE_TARGETS=thumbv6m-none-eabi\nENV RUN_MAKE_TARGETS=$RUN_MAKE_TARGETS,thumbv7m-none-eabi\nENV RUN_MAKE_TARGETS=$RUN_MAKE_TARGETS,thumbv7em-none-eabi\nENV RUN_MAKE_TARGETS=$RUN_MAKE_TARGETS,thumbv7em-none-eabihf\n\nENV TARGETS=asmjs-unknown-emscripten\nENV TARGETS=$TARGETS,wasm32-unknown-emscripten\nENV TARGETS=$TARGETS,x86_64-rumprun-netbsd\nENV TARGETS=$TARGETS,mips-unknown-linux-musl\nENV TARGETS=$TARGETS,mipsel-unknown-linux-musl\nENV TARGETS=$TARGETS,arm-unknown-linux-musleabi\nENV TARGETS=$TARGETS,arm-unknown-linux-musleabihf\nENV TARGETS=$TARGETS,armv5te-unknown-linux-gnueabi\nENV TARGETS=$TARGETS,armv5te-unknown-linux-musleabi\nENV TARGETS=$TARGETS,armv7-unknown-linux-musleabihf\nENV TARGETS=$TARGETS,aarch64-unknown-linux-musl\nENV TARGETS=$TARGETS,sparc64-unknown-linux-gnu\nENV TARGETS=$TARGETS,x86_64-unknown-redox\nENV TARGETS=$TARGETS,thumbv6m-none-eabi\nENV TARGETS=$TARGETS,thumbv7m-none-eabi\nENV TARGETS=$TARGETS,thumbv7em-none-eabi\nENV TARGETS=$TARGETS,thumbv7em-none-eabihf\nENV TARGETS=$TARGETS,thumbv8m.main-none-eabi\nENV TARGETS=$TARGETS,riscv32imc-unknown-none-elf\nENV TARGETS=$TARGETS,riscv32imac-unknown-none-elf\nENV TARGETS=$TARGETS,riscv64imac-unknown-none-elf\nENV TARGETS=$TARGETS,riscv64gc-unknown-none-elf\nENV TARGETS=$TARGETS,armebv7r-none-eabi\nENV TARGETS=$TARGETS,armebv7r-none-eabihf\nENV TARGETS=$TARGETS,armv7r-none-eabi\nENV TARGETS=$TARGETS,armv7r-none-eabihf\nENV TARGETS=$TARGETS,thumbv7neon-unknown-linux-gnueabihf\n\nENV CC_mipsel_unknown_linux_musl=mipsel-openwrt-linux-gcc \\\n    CC_mips_unknown_linux_musl=mips-openwrt-linux-gcc \\\n    CC_sparc64_unknown_linux_gnu=sparc64-linux-gnu-gcc \\\n    CC_x86_64_unknown_redox=x86_64-unknown-redox-gcc \\\n    CC_armebv7r_none_eabi=arm-none-eabi-gcc \\\n    CC_thumbv7neon_unknown_linux_gnueabihf=arm-linux-gnueabihf-gcc \\\n    AR_thumbv7neon_unknown_linux_gnueabihf=arm-linux-gnueabihf-ar \\\n    CXX_thumbv7neon_unknown_linux_gnueabihf=arm-linux-gnueabihf-g++\n\nENV RUST_CONFIGURE_ARGS \\\n      --musl-root-armv5te=/musl-armv5te \\\n      --musl-root-arm=/musl-arm \\\n      --musl-root-armhf=/musl-armhf \\\n      --musl-root-armv7=/musl-armv7 \\\n      --musl-root-aarch64=/musl-aarch64 \\\n      --musl-root-mips=/musl-mips \\\n      --musl-root-mipsel=/musl-mipsel \\\n      --enable-emscripten \\\n      --disable-docs\n\nENV SCRIPT \\\n      python2.7 ../x.py test --target $RUN_MAKE_TARGETS src/test/run-make && \\\n      python2.7 ../x.py dist --target $TARGETS\n\n# sccache\nCOPY scripts/sccache.sh /scripts/\nRUN sh /scripts/sccache.sh\n"
}