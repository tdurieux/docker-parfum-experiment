{
  "startTime": 1674249962338,
  "endTime": 1674249962699,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 9,
        "lineEnd": 9,
        "columnStart": 4,
        "columnEnd": 91
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 57,
        "lineEnd": 57,
        "columnStart": 4,
        "columnEnd": 103
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 64,
        "lineEnd": 64,
        "columnStart": 4,
        "columnEnd": 71
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 85,
        "lineEnd": 85,
        "columnStart": 4,
        "columnEnd": 40
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 8,
        "lineEnd": 8,
        "columnStart": 22,
        "columnEnd": 91
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 12,
        "lineEnd": 44,
        "columnStart": 22,
        "columnEnd": 8
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 8,
        "lineEnd": 8,
        "columnStart": 22,
        "columnEnd": 91
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM ubuntu:16.04\n\nARG PREFIX=/opt/rocm\n\n# Support multiarch\nRUN dpkg --add-architecture i386\n\n# Add rocm repository\nRUN apt-get update && DEBIAN_FRONTEND=noninteractive apt-get --no-install-recommends install -y curl apt-utils wget && rm -rf /var/lib/apt/lists/*;\nRUN curl -f https://raw.githubusercontent.com/RadeonOpenCompute/ROCm-docker/master/add-rocm.sh | bash\n\n# Install dependencies required to build hcc\nRUN apt-get update && DEBIAN_FRONTEND=noninteractive apt-get --no-install-recommends install -y --allow-unauthenticated \\\n    apt-utils \\\n    build-essential \\\n    clang-3.8 \\\n    clang-format-3.8 \\\n    clang-tidy-3.8 \\\n    cmake \\\n    curl \\\n    doxygen \\\n    g++-mingw-w64 \\\n    g++-mingw-w64-x86-64 \\\n    g++-multilib \\\n    git \\\n    hsa-rocr-dev \\\n    hsakmt-roct-dev \\\n    lcov \\\n    libelf-dev \\\n    libncurses5-dev \\\n    libpthread-stubs0-dev \\\n    libnuma-dev \\\n    libunwind-dev \\\n    mingw-w64 \\\n    mingw-w64-tools \\\n    nsis \\\n    python \\\n    python-dev \\\n    python-pip \\\n    rocm-opencl \\\n    rocm-opencl-dev \\\n    software-properties-common \\\n    wget \\\n    wine \\\n    xvfb && \\\n    apt-get clean && \\\n    rm -rf /var/lib/apt/lists/*\n\n# Setup ubsan environment to printstacktrace\nRUN ln -s /usr/bin/llvm-symbolizer-3.8 /usr/local/bin/llvm-symbolizer\nENV UBSAN_OPTIONS=print_stacktrace=1\n\n# Install an init system\nRUN wget https://github.com/Yelp/dumb-init/releases/download/v1.2.0/dumb-init_1.2.0_amd64.deb\nRUN dpkg -i dumb-init_*.deb && rm dumb-init_*.deb\n\n# Install cget\nRUN pip install --no-cache-dir https://github.com/pfultz2/cget/archive/57b3289000fcdb3b7e424c60a35ea09bc44d8538.tar.gz\n\n# Add the windows toolchain\nADD cmake/mingw-toolchain.cmake $PREFIX/x86_64-w64-mingw32/cmake/toolchain.cmake\nRUN cget -p $PREFIX/x86_64-w64-mingw32 init -t $PREFIX/x86_64-w64-mingw32/cmake/toolchain.cmake\n\n# Install rclone\nRUN pip install --no-cache-dir https://github.com/pfultz2/rclone/archive/master.tar.gz\n\n# Install hcc\nRUN rclone -b roc-2.1.x  -c fea3e2b4625f55b40b8c51c6e445117b3f16166f https://github.com/RadeonOpenCompute/hcc.git /hcc\nRUN cget -p $PREFIX install hcc,/hcc  && rm -rf /hcc\n\n# This is a workaround for broken installations\nRUN ln -s $PREFIX /opt/rocm/hip\nRUN ln -s $PREFIX /opt/rocm/hcc\n\n# Build using hcc\nRUN cget -p $PREFIX init --cxx $PREFIX/bin/hcc --std=c++14\n\n# Install dependencies\nADD dev-requirements.txt /dev-requirements.txt\nADD requirements.txt /requirements.txt\nADD min-requirements.txt /min-requirements.txt\nRUN CXXFLAGS='-isystem $PREFIX/include' cget -p $PREFIX install -f /dev-requirements.txt\n\n# Install doc requirements\nADD doc/requirements.txt /doc-requirements.txt\nRUN pip install --no-cache-dir -r /doc-requirements.txt\n\n# Install windows opencl\nRUN cget -p $PREFIX/x86_64-w64-mingw32/opencl init -t $PREFIX/x86_64-w64-mingw32/cmake/toolchain.cmake\n# RUN cget install -p $PREFIX/x86_64-w64-mingw32/opencl KhronosGroup/OpenCL-Headers@master -X header -DINCLUDE_DIR=opencl22\n# RUN cget install -p $PREFIX/x86_64-w64-mingw32/opencl pfultz2/OpenCL-ICD-Loader@master\n\n# Install windows dependencies\nRUN cget -p $PREFIX/x86_64-w64-mingw32 install pfultz2/rocm-recipes\nRUN cget -p $PREFIX/x86_64-w64-mingw32 install -X header meganz/mingw-std-threads@dad05201ad4e096c5d1b2043081f412aeb8f5efb\nRUN ln -s $PREFIX/x86_64-w64-mingw32/include/mingw.thread.h $PREFIX/x86_64-w64-mingw32/include/thread\n# RUN CXXFLAGS='-I $PREFIX/x86_64-w64-mingw32/include' AMDAPPSDKROOT=$PREFIX/x86_64-w64-mingw32/opencl cget -p $PREFIX/x86_64-w64-mingw32 install -f /requirements.txt\n\n# Setup wine\nRUN mkdir -p /jenkins\nRUN chmod 777 /jenkins\nRUN WINEDEBUG=-all DISPLAY=:55.0 wineboot; wineserver -w\n"
}