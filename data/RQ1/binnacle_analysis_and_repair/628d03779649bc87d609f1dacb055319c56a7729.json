{
  "startTime": 1674240283644,
  "endTime": 1674240283884,
  "originalSmells": [
    {
      "rule": "yarnCacheCleanAfterInstall",
      "position": {
        "lineStart": 49,
        "lineEnd": 49,
        "columnStart": 17,
        "columnEnd": 29
      }
    },
    {
      "rule": "apkAddUseNoCache",
      "position": {
        "lineStart": 28,
        "lineEnd": 28,
        "columnStart": 4,
        "columnEnd": 54
      }
    },
    {
      "rule": "apkAddUseNoCache",
      "position": {
        "lineStart": 63,
        "lineEnd": 63,
        "columnStart": 4,
        "columnEnd": 33
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# FROM elixir:1.8.1-alpine as build\n# begin custom Elixir image\nFROM erlang:21-alpine as build\n\n# elixir expects utf8.\nENV ELIXIR_VERSION=\"v1.9.0-dev@b8b7e5a\" \\\n\tLANG=C.UTF-8\n\nRUN set -xe \\\n\t&& ELIXIR_DOWNLOAD_URL=\"https://github.com/elixir-lang/elixir/archive/${ELIXIR_VERSION#*@}.tar.gz\" \\\n\t&& ELIXIR_DOWNLOAD_SHA256=\"33a2656587984706393b2070ad6c9f5c9892efd82a300af5d1d6910ff447c919\" \\\n\t&& buildDeps=' \\\n\t\tca-certificates \\\n\t\tcurl \\\n\t\tmake \\\n\t' \\\n\t&& apk add --no-cache --virtual .build-deps $buildDeps \\\n\t&& curl -fSL -o elixir-src.tar.gz $ELIXIR_DOWNLOAD_URL \\\n\t&& echo \"$ELIXIR_DOWNLOAD_SHA256  elixir-src.tar.gz\" | sha256sum -c - \\\n\t&& mkdir -p /usr/local/src/elixir \\\n\t&& tar -xzC /usr/local/src/elixir --strip-components=1 -f elixir-src.tar.gz \\\n\t&& rm elixir-src.tar.gz \\\n\t&& cd /usr/local/src/elixir \\\n\t&& make install clean \\\n\t&& apk del .build-deps\n# end custom Elixir image\n\n# install build dependencies\nRUN apk add --no-cache --update git build-base nodejs yarn python\n\n# prepare build dir\nRUN mkdir /app\nWORKDIR /app\n\n# install hex + rebar\nRUN mix local.hex --force && \\\n    mix local.rebar --force\n\n# set build ENV\nENV MIX_ENV=prod\n\n# install mix dependencies\nCOPY mix.exs mix.lock ./\nCOPY config config\nRUN mix deps.get\nRUN mix deps.compile\n\n# build assets\nCOPY assets assets\nRUN cd assets && yarn install && yarn run brunch build --production && yarn cache clean;\nRUN mix phx.digest\n\n# build project\nCOPY priv priv\nCOPY lib lib\nRUN mix compile\n\n# build release\nCOPY rel rel\nRUN mix release\n\n# prepare release image\nFROM alpine:3.9 AS app\nRUN apk add --no-cache --update bash openssl\n\nRUN mkdir /app\nWORKDIR /app\n\nCOPY --from=build /app/_build/prod/rel/hexpm ./\nRUN chown -R nobody: /app\nUSER nobody\n\nENV HOME=/app\n"
}