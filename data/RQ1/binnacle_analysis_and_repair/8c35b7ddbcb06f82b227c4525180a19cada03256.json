{
  "startTime": 1674241005663,
  "endTime": 1674241006104,
  "originalSmells": [
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 12,
        "lineEnd": 12,
        "columnStart": 18,
        "columnEnd": 64
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 20,
        "lineEnd": 63,
        "columnStart": 52,
        "columnEnd": 6
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 69,
        "lineEnd": 72,
        "columnStart": 4,
        "columnEnd": 35
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 12,
        "lineEnd": 12,
        "columnStart": 18,
        "columnEnd": 64
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# This Dockerfile provides a starting point for a ROCm installation of\n# MIOpen and tensorflow.\n\nFROM ubuntu:xenial\nMAINTAINER Jeff Poznanovic <jeffrey.poznanovic@amd.com>\n\nARG DEB_ROCM_REPO=http://repo.radeon.com/rocm/apt/debian/\nARG ROCM_PATH=/opt/rocm\n\nENV DEBIAN_FRONTEND noninteractive\nENV TF_NEED_ROCM 1\nENV HOME /root/\nRUN apt update && apt install --no-install-recommends -y wget software-properties-common && rm -rf /var/lib/apt/lists/*;\n\n# Add rocm repository\nRUN apt-get clean all\nRUN wget -qO - $DEB_ROCM_REPO/rocm.gpg.key | apt-key add -\nRUN sh -c  \"echo deb [arch=amd64] $DEB_ROCM_REPO xenial main > /etc/apt/sources.list.d/rocm.list\"\n\n# Install misc pkgs\nRUN apt-get update --allow-insecure-repositories && DEBIAN_FRONTEND=noninteractive apt-get --no-install-recommends install -y \\\n  build-essential \\\n  clang-3.8 \\\n  clang-format-3.8 \\\n  clang-tidy-3.8 \\\n  cmake \\\n  cmake-qt-gui \\\n  ssh \\\n  curl \\\n  git \\\n  libcurl3-dev \\\n  libfreetype6-dev \\\n  libhdf5-serial-dev \\\n  libpng12-dev \\\n  libzmq3-dev \\\n  pkg-config \\\n  python-dev \\\n  rsync \\\n  software-properties-common \\\n  unzip \\\n  zip \\\n  zlib1g-dev \\\n  apt-utils \\\n  pkg-config \\\n  g++-multilib \\\n  libunwind-dev \\\n  libfftw3-dev \\\n  libelf-dev \\\n  libncurses5-dev \\\n  libpthread-stubs0-dev \\\n  vim \\\n  gfortran \\\n  libboost-program-options-dev \\\n  libssl-dev \\\n  libboost-dev \\\n  libboost-system-dev \\\n  libboost-filesystem-dev \\\n  rpm \\\n  libnuma-dev \\\n  pciutils \\\n  virtualenv \\\n  libxml2 \\\n  libxml2-dev \\\n  wget && \\\n  apt-get clean && \\\n  rm -rf /var/lib/apt/lists/*\n\n# Install rocm pkgs\nRUN apt-get update --allow-insecure-repositories && \\\n    DEBIAN_FRONTEND=noninteractive apt-get --no-install-recommends install -y --allow-unauthenticated \\\n    rocm-dev rocm-libs rocm-utils \\\n    rocfft miopen-hip miopengemm rocblas hipblas rocrand \\\n    rocm-profiler cxlactivitylogger && \\\n    apt-get clean && \\\n    rm -rf /var/lib/apt/lists/*\n\nENV HCC_HOME=$ROCM_PATH/hcc\nENV HIP_PATH=$ROCM_PATH/hip\nENV OPENCL_ROOT=$ROCM_PATH/opencl\nENV PATH=\"$HCC_HOME/bin:$HIP_PATH/bin:${PATH}\"\nENV PATH=\"$ROCM_PATH/bin:${PATH}\"\nENV PATH=\"$OPENCL_ROOT/bin:${PATH}\"\n\n# Add target file to help determine which device(s) to build for\nRUN bash -c 'echo -e \"gfx803\\ngfx900\\ngfx906\" >> /opt/rocm/bin/target.lst'\n\n# Setup environment variables, and add those environment variables at the end of ~/.bashrc\nARG HCC_HOME=/opt/rocm/hcc\nARG HIP_PATH=/opt/rocm/hip\nARG PATH=$HCC_HOME/bin:$HIP_PATH/bin:$PATH\n\nRUN curl -fSsL -O https://bootstrap.pypa.io/get-pip.py && \\\n    python get-pip.py && \\\n    rm get-pip.py\n\nRUN pip --no-cache-dir install \\\n        Pillow \\\n        h5py \\\n        ipykernel \\\n        jupyter \\\n        keras_applications==1.0.4 \\\n        keras_preprocessing==1.0.2 \\ \n        matplotlib \\\n        mock \\\n        numpy==1.14.5 \\ \n        scipy \\\n        sklearn \\\n        pandas \\\n        && \\\n    python -m ipykernel.kernelspec\n\n# RUN ln -s -f /usr/bin/python3 /usr/bin/python#\n\n# Set up Bazel.\n\n# Running bazel inside a `docker build` command causes trouble, cf:\n#   https://github.com/bazelbuild/bazel/issues/134\n# The easiest solution is to set up a bazelrc file forcing --batch.\nRUN echo \"startup --batch\" >>/etc/bazel.bazelrc\n# Similarly, we need to workaround sandboxing issues:\n#   https://github.com/bazelbuild/bazel/issues/418\nRUN echo \"build --spawn_strategy=standalone --genrule_strategy=standalone\" \\\n    >>/etc/bazel.bazelrc\n# Install the most recent bazel release.\nENV BAZEL_VERSION 0.15.0\nWORKDIR /\nRUN mkdir /bazel && \\\n    cd /bazel && \\\n    curl -H \"User-Agent: Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/57.0.2987.133 Safari/537.36\" -fSsL -O https://github.com/bazelbuild/bazel/releases/download/$BAZEL_VERSION/bazel-$BAZEL_VERSION-installer-linux-x86_64.sh && \\\n    curl -H \"User-Agent: Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/57.0.2987.133 Safari/537.36\" -fSsL -o /bazel/LICENSE.txt https://raw.githubusercontent.com/bazelbuild/bazel/master/LICENSE && \\\n    chmod +x bazel-*.sh && \\\n    ./bazel-$BAZEL_VERSION-installer-linux-x86_64.sh && \\\n    cd / && \\\n    rm -f /bazel/bazel-$BAZEL_VERSION-installer-linux-x86_64.sh\n\n# Download and build TensorFlow.\nWORKDIR /tensorflow-upstream\nRUN git clone --branch=r1.10-rocm --depth=1 https://github.com/ROCmSoftwarePlatform/tensorflow-upstream.git .\n\n# Set up the master bazelrc configuration file.\nRUN cp tensorflow/tools/ci_build/install/.bazelrc /etc/bazel.bazelrc\n\n# Configure the build for our ROCM configuration.\nENV TF_NEED_ROCM 1\nENV CI_BUILD_PYTHON=python\n\nRUN tensorflow/tools/ci_build/builds/configured ROCM \\\n    bazel build -c opt --config=rocm \\\n        tensorflow/tools/pip_package:build_pip_package\nRUN bazel-bin/tensorflow/tools/pip_package/build_pip_package /tmp/pip && \\\n    pip --no-cache-dir install --upgrade /tmp/pip/tensorflow-*.whl && \\\n    rm -rf /tmp/pip && \\\n    rm -rf /root/.cache\n# Clean up pip wheel and Bazel cache when done.\n\nWORKDIR /root\n\n"
}