{
  "startTime": 1674245098110,
  "endTime": 1674245098306,
  "originalSmells": [
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 49,
        "lineEnd": 49,
        "columnStart": 1,
        "columnEnd": 107
      }
    },
    {
      "rule": "curlUseFlagF",
      "position": {
        "lineStart": 50,
        "lineEnd": 50,
        "columnStart": 1,
        "columnEnd": 116
      }
    },
    {
      "rule": "wgetUseHttpsUrl",
      "position": {
        "lineStart": 20,
        "lineEnd": 20,
        "columnStart": 4,
        "columnEnd": 125
      }
    },
    {
      "rule": "wgetUseHttpsUrl",
      "position": {
        "lineStart": 29,
        "lineEnd": 29,
        "columnStart": 4,
        "columnEnd": 122
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 6,
        "lineEnd": 6,
        "columnStart": 4,
        "columnEnd": 24
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 7,
        "lineEnd": 7,
        "columnStart": 1,
        "columnEnd": 23
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 5,
        "lineEnd": 5,
        "columnStart": 22,
        "columnEnd": 76
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 5,
        "lineEnd": 5,
        "columnStart": 22,
        "columnEnd": 76
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "FROM dockerfile/java:oracle-java7\nMAINTAINER Matt Ho <matt.ho@gmail.com>\n\n# install required dependencies\n#\nRUN apt-get update && apt-get install --no-install-recommends -y wget curl git python-pip supervisor && rm -rf /var/lib/apt/lists/*;\nRUN pip install --no-cache-dir gradle; \\\n\tpip install --no-cache-dir virtualenv\n\n# installation will take place in /opt\n#\nENV TARGET /opt\n\n# unfortunately, docker doesn't support string interpolation in WORKDIR\n#\nWORKDIR /opt\n\n# install tomcat\n#\nENV TOMCAT_VERSION 7.0.56\nRUN wget -qq https://mirror.nexcess.net/apache/tomcat/tomcat-7/v${TOMCAT_VERSION}/bin/apache-tomcat-${TOMCAT_VERSION}.tar.gz; \\\n\ttar -xzvf apache-tomcat-${TOMCAT_VERSION}.tar.gz ; \\\n\trm -r apache-tomcat-${TOMCAT_VERSION}/webapps/* ; \\\n\trm apache-tomcat-${TOMCAT_VERSION}.tar.gz ; \\\n\tln -s apache-tomcat-${TOMCAT_VERSION} /opt/apache-tomcat\n\n# install elastic search\n#\nENV ELASTICSEARCH_VERSION 1.3.2\nRUN wget -qq https://download.elasticsearch.org/elasticsearch/elasticsearch/elasticsearch-${ELASTICSEARCH_VERSION}.tar.gz; \\\n\ttar -xzvf elasticsearch-${ELASTICSEARCH_VERSION}.tar.gz ; \\\n\trm elasticsearch-${ELASTICSEARCH_VERSION}.tar.gz\n\n# INVISO_COMMIT_HASH allows us to specify the exact version of inviso this container will build\n#\nENV INVISO_COMMIT_HASH a29450ace4a9f467d34f29b6f69094b69edbff1b\n\n# clone the inviso repo and build the project\n#\nRUN git clone https://github.com/Netflix/inviso.git ; \\\n\t(cd inviso; git reset --hard ${INVISO_COMMIT_HASH} ; ./gradlew assemble)\nRUN cp \"${TARGET}/inviso/trace-mr2/build/libs/inviso#mr2#v0.war\" ${TARGET}/apache-tomcat-${TOMCAT_VERSION}/webapps/ ; \\\n\tln -s ${TARGET}/inviso/web-ui/public ${TARGET}/apache-tomcat-${TOMCAT_VERSION}/webapps/ROOT\n\n# configure elasticsearch to point to inviso\n#\n# NOTE: for some reason the -p flag inside a docker build doesn't write out the pidfile :\\\n#\nRUN ${TARGET}/elasticsearch-${ELASTICSEARCH_VERSION}/bin/elasticsearch -d ; \\\n\tcurl -f -XPUT http://localhost:9200/inviso -d @${TARGET}/inviso/elasticsearch/mappings/config-settings.json; \\\n\tcurl -f -XPUT http://localhost:9200/inviso-cluster -d @${TARGET}/inviso/elasticsearch/mappings/cluster-settings.json; \\\n\tkill -9 `ps auxww | grep java | grep -v grep | awk '{print $2}'`\n\nENV SERVICE_CONF /etc/supervisor/conf.d/services.conf\nRUN echo '[program:elasticsearch]' >> ${SERVICE_CONF} ; \\\n\techo \"command=${TARGET}/elasticsearch-${ELASTICSEARCH_VERSION}/bin/elasticsearch\" >> ${SERVICE_CONF} ; \\\n\techo '' >> ${SERVICE_CONF} ; \\\n\techo '[program:tomcat]' >> ${SERVICE_CONF} ; \\\n\techo \"command=${TARGET}/apache-tomcat-${TOMCAT_VERSION}/bin/catalina.sh run\" >> ${SERVICE_CONF} ; \\\n\techo '' >> ${SERVICE_CONF}\n\n# additional scripting for the boot sequence\nEXPOSE 8080\n\nCMD [ \"/usr/bin/supervisord\", \"--nodaemon\" ]\n\n\n"
}