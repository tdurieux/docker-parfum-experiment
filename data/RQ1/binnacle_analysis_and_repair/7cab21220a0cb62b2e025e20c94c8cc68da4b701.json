{
  "startTime": 1674252290137,
  "endTime": 1674252290909,
  "originalSmells": [
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 38,
        "lineEnd": 38,
        "columnStart": 4,
        "columnEnd": 57
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 42,
        "lineEnd": 42,
        "columnStart": 4,
        "columnEnd": 34
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 92,
        "lineEnd": 92,
        "columnStart": 4,
        "columnEnd": 22
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 98,
        "lineEnd": 98,
        "columnStart": 4,
        "columnEnd": 37
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 101,
        "lineEnd": 101,
        "columnStart": 4,
        "columnEnd": 50
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 107,
        "lineEnd": 107,
        "columnStart": 8,
        "columnEnd": 104
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 109,
        "lineEnd": 109,
        "columnStart": 8,
        "columnEnd": 39
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 111,
        "lineEnd": 111,
        "columnStart": 4,
        "columnEnd": 55
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 112,
        "lineEnd": 112,
        "columnStart": 4,
        "columnEnd": 29
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 115,
        "lineEnd": 115,
        "columnStart": 4,
        "columnEnd": 32
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 159,
        "lineEnd": 159,
        "columnStart": 6,
        "columnEnd": 52
      }
    },
    {
      "rule": "pipUseNoCacheDir",
      "position": {
        "lineStart": 161,
        "lineEnd": 161,
        "columnStart": 6,
        "columnEnd": 52
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 47,
        "lineEnd": 47,
        "columnStart": 29,
        "columnEnd": 67
      }
    },
    {
      "rule": "tarSomethingRmTheSomething",
      "position": {
        "lineStart": 51,
        "lineEnd": 51,
        "columnStart": 23,
        "columnEnd": 58
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 35,
        "lineEnd": 35,
        "columnStart": 4,
        "columnEnd": 74
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 41,
        "lineEnd": 41,
        "columnStart": 4,
        "columnEnd": 41
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 83,
        "lineEnd": 83,
        "columnStart": 8,
        "columnEnd": 32
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 20,
        "lineEnd": 29,
        "columnStart": 4,
        "columnEnd": 34
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 35,
        "lineEnd": 35,
        "columnStart": 4,
        "columnEnd": 74
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 41,
        "lineEnd": 41,
        "columnStart": 4,
        "columnEnd": 41
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 83,
        "lineEnd": 83,
        "columnStart": 8,
        "columnEnd": 32
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 20,
        "lineEnd": 29,
        "columnStart": 4,
        "columnEnd": 34
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 35,
        "lineEnd": 35,
        "columnStart": 4,
        "columnEnd": 74
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 41,
        "lineEnd": 41,
        "columnStart": 4,
        "columnEnd": 41
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 83,
        "lineEnd": 83,
        "columnStart": 8,
        "columnEnd": 32
      }
    }
  ],
  "repairedSmells": [
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 20,
        "lineEnd": 29,
        "columnStart": 4,
        "columnEnd": 34
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 35,
        "lineEnd": 35,
        "columnStart": 4,
        "columnEnd": 98
      }
    },
    {
      "rule": "aptGetUpdatePrecedesInstall",
      "position": {
        "lineStart": 41,
        "lineEnd": 41,
        "columnStart": 4,
        "columnEnd": 65
      }
    }
  ],
  "repairedDockerfile": "ARG UBUNTU_VERSION=16.04\nFROM ubuntu:${UBUNTU_VERSION}\n\n# Arguments for the build. UBUNTU_VERSION needs to be repeated because\n# the first usage only applies to the FROM tag.\nARG UBUNTU_VERSION=16.04\nARG MPI_KIND=OpenMPI\nARG PYTHON_VERSION=2.7\nARG TENSORFLOW_PACKAGE=tensorflow==1.12.0\nARG KERAS_PACKAGE=keras==2.2.2\nARG PYTORCH_PACKAGE=torch==1.0.0\nARG TORCHVISION_PACKAGE=torchvision==0.2.2.post3\nARG MXNET_PACKAGE=mxnet==1.4.1\nARG PYSPARK_PACKAGE=pyspark==2.4.0\n\n# Set default shell to /bin/bash\nSHELL [\"/bin/bash\", \"-cu\"]\n\n# Install essential packages.\nRUN apt-get update -qq\nRUN apt-get install -y --no-install-recommends \\\n        wget \\\n        ca-certificates \\\n        openssh-client \\\n        git \\\n        build-essential \\\n        gcc-4.9 \\\n        g++-4.9 \\\n        gcc-4.9-base \\\n        software-properties-common && rm -rf /var/lib/apt/lists/*;\n\n# Install Python.\nRUN if [[ \"${PYTHON_VERSION}\" == \"3.6\" ]]; then \\\n        add-apt-repository ppa:deadsnakes/ppa && apt-get update -qq; \\\n    fi\nRUN apt-get install --no-install-recommends -y python${PYTHON_VERSION} python${PYTHON_VERSION}-dev && rm -rf /var/lib/apt/lists/*;\nRUN ln -s -f /usr/bin/python${PYTHON_VERSION} /usr/bin/python\nRUN wget https://bootstrap.pypa.io/get-pip.py && python get-pip.py && rm get-pip.py\nRUN pip install --no-cache-dir -U --force pip setuptools requests pytest\n\n# Install PySpark.\nRUN apt install --no-install-recommends -y openjdk-8-jdk-headless && rm -rf /var/lib/apt/lists/*;\nRUN pip install --no-cache-dir ${PYSPARK_PACKAGE}\n\n# Install MPI.\nRUN if [[ ${MPI_KIND} == \"OpenMPI\" ]]; then \\\n        wget -O /tmp/openmpi-3.0.0-bin.tar.gz https://github.com/horovod/horovod/files/1596799/openmpi-3.0.0-bin.tar.gz && \\\n            cd /usr/local && tar -zxf /tmp/openmpi-3.0.0-bin.tar.gz && ldconfig && \\\n            echo \"mpirun -allow-run-as-root -np 2 -H localhost:2 -bind-to none -map-by slot -mca mpi_abort_print_stack 1\" > /mpirun_command; rm /tmp/openmpi-3.0.0-bin.tar.gz \\\n    elif [[ ${MPI_KIND} == \"MLSL\" ]]; then \\\n        wget -O /tmp/l_mlsl_2018.3.008.tgz https://github.com/intel/MLSL/releases/download/IntelMLSL-v2018.3-Preview/l_mlsl_2018.3.008.tgz && \\\n            cd /tmp && tar -zxf /tmp/l_mlsl_2018.3.008.tgz && \\\n            /tmp/l_mlsl_2018.3.008/install.sh -s -d /usr/local/mlsl && \\\n            wget https://raw.githubusercontent.com/intel/MLSL/master/mpirt_2019/include/mpi.h -P /usr/local/mlsl/intel64/include && \\\n            wget https://raw.githubusercontent.com/intel/MLSL/master/mpirt_2019/include/mpio.h -P /usr/local/mlsl/intel64/include && \\\n            wget https://raw.githubusercontent.com/intel/MLSL/master/mpirt_2019/include/mpicxx.h -P /usr/local/mlsl/intel64/include && \\\n            wget https://raw.githubusercontent.com/AlekseyMarchuk/MLSL/master/mpirt_2019/bin/mpicc -P /usr/local/mlsl/intel64/bin && \\\n            chmod +x /usr/local/mlsl/intel64/bin/mpicc && \\\n            wget https://raw.githubusercontent.com/AlekseyMarchuk/MLSL/master/mpirt_2019/bin/mpicxx -P /usr/local/mlsl/intel64/bin && \\\n            chmod +x /usr/local/mlsl/intel64/bin/mpicxx && \\\n            wget https://raw.githubusercontent.com/AlekseyMarchuk/MLSL/master/mpirt_2019/bin/mpigcc -P /usr/local/mlsl/intel64/bin && \\\n            chmod +x /usr/local/mlsl/intel64/bin/mpigcc && \\\n            wget https://raw.githubusercontent.com/AlekseyMarchuk/MLSL/master/mpirt_2019/bin/mpigxx -P /usr/local/mlsl/intel64/bin && \\\n            chmod +x /usr/local/mlsl/intel64/bin/mpigxx && \\\n            wget https://raw.githubusercontent.com/AlekseyMarchuk/MLSL/master/mpirt_2019/lib/libmpicxx.so -P /usr/local/mlsl/intel64/lib && \\\n            chmod +x /usr/local/mlsl/intel64/lib/libmpicxx.so && \\\n            #wget https://raw.githubusercontent.com/AlekseyMarchuk/MLSL/master/mpirt_2019/bin/mpicc -P /usr/local/bin && \\\n            #chmod +x /usr/local/bin/mpicc && \\\n            #wget https://raw.githubusercontent.com/AlekseyMarchuk/MLSL/master/mpirt_2019/bin/mpicxx -P /usr/local/bin && \\\n            #chmod +x /usr/local/bin/mpicxx && \\\n            #wget https://raw.githubusercontent.com/AlekseyMarchuk/MLSL/master/mpirt_2019/bin/mpigcc -P /usr/local/bin && \\\n            #chmod +x /usr/local/bin/mpigcc && \\\n            echo \". /usr/local/mlsl/intel64/bin/mlslvars.sh \\\"thread\\\"; \\\n                   echo \\\"mpirun is \\$(which mpirun)\\\"; \\\n                   echo \\\"this file is \\$(cat /mpirun_command_script)\\\"; \\\n                   echo \\\"LD_LIBRARY_PATH is \\$(echo \\$LD_LIBRARY_PATH)\\\"; \\\n                   echo \\\"mlsl links with \\$(ldd /usr/local/mlsl/intel64/lib/libmlsl.so)\\\"; \\\n                   mpirun -np 2 -ppn 2 -hosts localhost \\$@\" > /mpirun_command_script && \\\n            chmod +x /mpirun_command_script && \\\n            echo \"-L/usr/local/mlsl/intel64/lib/thread -lmpi -I/usr/local/mlsl/intel64/include\" > /mpicc_mlsl && \\\n            chmod +x /mpicc_mlsl && \\\n            echo \"/mpirun_command_script\" > /mpirun_command; rm /tmp/l_mlsl_2018.3.008.tgz \\\n    else \\\n        apt-get install --no-install-recommends -y mpich && \\\n            echo \"mpirun -np 2\" > /mpirun_command; rm -rf /var/lib/apt/lists/*; \\\n    fi\n\n# Install mpi4py.\nRUN if [[ ${MPI_KIND} == \"MLSL\" ]]; then \\\n        export I_MPI_ROOT=/usr/local/mlsl; \\\n        export MPICC=/usr/local/mlsl/intel64/bin/mpicc; \\\n    fi; \\\n    pip install --no-cache-dir mpi4py\n\n### END OF CACHE ###\nCOPY . /horovod\n\n# Install TensorFlow.\nRUN pip install --no-cache-dir ${TENSORFLOW_PACKAGE}\n\n# Install Keras.\nRUN pip install --no-cache-dir ${KERAS_PACKAGE} h5py scipy pandas\nRUN mkdir -p ~/.keras\nRUN python -c \"from keras.datasets import mnist; mnist.load_data()\"\n\n# Install PyTorch.\nRUN if [[ ${PYTORCH_PACKAGE} == \"torch-nightly\" ]]; then \\\n        pip install --no-cache-dir torch_nightly -v -f https://download.pytorch.org/whl/nightly/cpu/torch_nightly.html; \\\n    else \\\n        pip install --no-cache-dir ${PYTORCH_PACKAGE}; \\\n    fi\nRUN pip install --no-cache-dir ${TORCHVISION_PACKAGE} Pillow --no-deps\nRUN pip install --no-cache-dir future typing\n\n# Install MXNet.\nRUN pip install --no-cache-dir ${MXNET_PACKAGE}\n\n# Pin GCC to 4.9 (priority 200) to compile correctly against TensorFlow, PyTorch, and MXNet.\n# Backup existing GCC installation as priority 100, so that it can be recovered later.\nRUN update-alternatives --install /usr/bin/gcc gcc $(readlink -f $(which gcc)) 100 && \\\n    update-alternatives --install /usr/bin/x86_64-linux-gnu-gcc x86_64-linux-gnu-gcc $(readlink -f $(which gcc)) 100 && \\\n    update-alternatives --install /usr/bin/g++ g++ $(readlink -f $(which g++)) 100 && \\\n    update-alternatives --install /usr/bin/x86_64-linux-gnu-g++ x86_64-linux-gnu-g++ $(readlink -f $(which g++)) 100\nRUN update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-4.9 200 && \\\n    update-alternatives --install /usr/bin/x86_64-linux-gnu-gcc x86_64-linux-gnu-gcc /usr/bin/gcc-4.9 200 && \\\n    update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-4.9 200 && \\\n    update-alternatives --install /usr/bin/x86_64-linux-gnu-g++ x86_64-linux-gnu-g++ /usr/bin/g++-4.9 200\n\n# Install Horovod.\nRUN if [[ ${MPI_KIND} == \"MLSL\" ]]; then \\\n      if [ -z \"${LD_LIBRARY_PATH:-}\" ]; then \\\n          export LD_LIBRARY_PATH=\"\"; \\\n      fi; \\\n      if [ -z \"${PYTHONPATH:-}\" ]; then \\\n          export PYTHONPATH=\"\"; \\\n      fi; \\\n      source /usr/local/mlsl/intel64/bin/mlslvars.sh \"thread\"; \\\n      export I_MPI_ROOT=/usr/local/mlsl; \\\n      export PIP_HOROVOD_MPICXX_SHOW=/usr/local/mlsl/intel64/bin/mpicxx; \\\n      echo \"horovod python setup.py sdist, mpicxx is $(which mpicxx)\"; \\\n      cd /horovod && python setup.py sdist; \\\n    else \\\n      cd /horovod && python setup.py sdist; \\\n    fi\n\n#RUN if [[ ${MPI_KIND} == \"MLSL\" ]]; then \\\n#        source /usr/local/mlsl/intel64/bin/mlslvars.sh \"thread\"; \\\n#    fi; \\\n#    pip install -v /horovod/dist/horovod-*.tar.gz\n\nRUN if [[ ${MPI_KIND} == \"MLSL\" ]]; then \\\n      if [ -z \"${LD_LIBRARY_PATH:-}\" ]; then \\\n          export LD_LIBRARY_PATH=\"\"; \\\n      fi; \\\n      if [ -z \"${PYTHONPATH:-}\" ]; then \\\n          export PYTHONPATH=\"\"; \\\n      fi; \\\n      source /usr/local/mlsl/intel64/bin/mlslvars.sh \"thread\"; \\\n      echo \"pip install horovod, mpicxx is $(which mpicxx)\"; \\\n      pip install --no-cache-dir -v /horovod/dist/horovod-*.tar.gz; \\\n    else \\\n      pip install --no-cache-dir -v /horovod/dist/horovod-*.tar.gz; \\\n    fi\n\n\n# Remove GCC pinning\nRUN update-alternatives --remove gcc /usr/bin/gcc-4.9 && \\\n    update-alternatives --remove x86_64-linux-gnu-gcc /usr/bin/gcc-4.9 && \\\n    update-alternatives --remove g++ /usr/bin/g++-4.9 && \\\n    update-alternatives --remove x86_64-linux-gnu-g++ /usr/bin/g++-4.9\n\n# Hack for compatibility of MNIST example with TensorFlow 1.1.0.\nRUN if [[ ${TENSORFLOW_PACKAGE} == \"tensorflow==1.1.0\" ]]; then \\\n        sed -i \"s/from tensorflow import keras/from tensorflow.contrib import keras/\" /horovod/examples/tensorflow_mnist.py; \\\n    fi\n\n# Hack TensorFlow MNIST example to be smaller.\nRUN sed -i \"s/last_step=20000/last_step=100/\" /horovod/examples/tensorflow_mnist.py\n\n# Hack TensorFlow Eager MNIST example to be smaller.\nRUN sed -i \"s/dataset.take(20000/dataset.take(100/\" /horovod/examples/tensorflow_mnist_eager.py\n\n# Hack Keras MNIST advanced example to be smaller.\nRUN sed -i \"s/epochs = .*/epochs = 9/\" /horovod/examples/keras_mnist_advanced.py\nRUN sed -i \"s/model.add(Conv2D(32, kernel_size=(3, 3),/model.add(Conv2D(1, kernel_size=(3, 3),/\" /horovod/examples/keras_mnist_advanced.py\nRUN sed -i \"s/model.add(Conv2D(64, (3, 3), activation='relu'))//\" /horovod/examples/keras_mnist_advanced.py\n\n# Hack PyTorch MNIST example to be smaller.\nRUN sed -i \"s/'--epochs', type=int, default=10,/'--epochs', type=int, default=2,/\" /horovod/examples/pytorch_mnist.py\nRUN sed -i \"s/self.fc1 = nn.Linear(320, 50)/self.fc1 = nn.Linear(784, 50)/\" /horovod/examples/pytorch_mnist.py\nRUN sed -i \"s/x = F.relu(F.max_pool2d(self.conv1(x), 2))//\" /horovod/examples/pytorch_mnist.py\nRUN sed -i \"s/x = F.relu(F.max_pool2d(self.conv2_drop(self.conv2(x)), 2))//\" /horovod/examples/pytorch_mnist.py\nRUN sed -i \"s/x = x.view(-1, 320)/x = x.view(-1, 784)/\" /horovod/examples/pytorch_mnist.py\n"
}