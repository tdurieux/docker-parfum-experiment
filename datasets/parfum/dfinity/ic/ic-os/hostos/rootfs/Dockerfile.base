# HostOS - Base Image
#
# Build steps:
# - `docker build -t dfinity/hostos-base:<tag> -f Dockerfile.base .`
# - `docker push/pull dfinity/hostos-base:<tag>`
# - `docker build -t dfinity/hostos-base-dev:<tag> --build-arg PACKAGE_FILES="packages.common packages.dev" -f Dockerfile.base .`
# - `docker push/pull dfinity/hostos-base-dev:<tag>`
#
# NOTE:
# If you edit this file, you will need to perform the following operations
# to get your changes deployed.
#
# 1. Get your MR approved and merged into master
# 2. On the next hourly master pipeline, click the "deploy-host-os-baseimg" job
# 3. Note down the sha256 and update the sha256 reference in the neighboring
#    Dockerfiles
#

#
# First build stage:
# - Download 3rd party tools
#
FROM ubuntu:20.04 AS download

ENV TZ=UTC
RUN ln -snf /usr/share/zoneinfo/$TZ /etc/localtime && echo $TZ > /etc/timezone
RUN apt-get -y update && apt-get -y upgrade && apt-get -y --no-install-recommends install \
    ca-certificates \
    curl \
    perl

# Download and verify QEMU
RUN cd /tmp/ && \
    curl -L -O https://download.qemu.org/qemu-6.2.0.tar.xz && \
    echo "68e15d8e45ac56326e0b9a4afa8b49a3dfe8aba3488221d098c84698bca65b45  qemu-6.2.0.tar.xz" > qemu.sha256 && \
    shasum -c qemu.sha256

# Download and verify journalbeat
RUN cd /tmp/ && \
    curl -L -O https://artifacts.elastic.co/downloads/beats/journalbeat/journalbeat-oss-7.14.0-linux-x86_64.tar.gz && \
    echo "3c97e8706bd0d2e30678beee7537b6fe6807cf858a0dd2e7cfce5beccb621eb0fefe6871027bc7b55e2ea98d7fe2ca03d4d92a7b264abbb0d6d54ecfa6f6a305  journalbeat-oss-7.14.0-linux-x86_64.tar.gz" > journalbeat.sha512 && \
    shasum -c journalbeat.sha512

# Download and verify node_exporter
RUN cd /tmp/ && \
    curl -L -O https://github.com/prometheus/node_exporter/releases/download/v1.3.1/node_exporter-1.3.1.linux-amd64.tar.gz && \
    echo "68f3802c2dd3980667e4ba65ea2e1fb03f4a4ba026cca375f15a0390ff850949  node_exporter-1.3.1.linux-amd64.tar.gz" > node_exporter.sha256 && \
    shasum -c node_exporter.sha256

#
# Second build stage:
# - Compile downloaded archives from first build stage
#
FROM ubuntu:20.04 AS build

ENV TZ=UTC
RUN ln -snf /usr/share/zoneinfo/$TZ /etc/localtime && echo $TZ > /etc/timezone
RUN apt-get -y update && apt-get -y upgrade && apt-get -y --no-install-recommends install \
    ca-certificates \
    build-essential \
    libglib2.0-dev \
    libpixman-1-dev \
    libusb-1.0-0-dev \
    ninja-build \
    pkg-config \
    python3

# Configure and compile QEMU
COPY --from=download /tmp/qemu-6.2.0.tar.xz /tmp/qemu-6.2.0.tar.xz
RUN cd /tmp/ && \
    tar xJf qemu-6.2.0.tar.xz && \
    cd /tmp/qemu-6.2.0 && \
    ./configure --target-list=x86_64-softmmu --enable-kvm --enable-libusb && \
    echo "Compiling qemu..." && \
    make -j 2 >/dev/null 2>&1 && \
    DESTDIR="/out" ninja -C build install

#
# Third build stage:
# - Download and cache minimal Ubuntu Server 20.04 LTS Docker image.
# - Install and cache upstream packages from built-in Ubuntu repositories.
# - Install compiled packages from the second stage.
#
FROM ubuntu:20.04

ENV SOURCE_DATE_EPOCH=0
ENV TZ=UTC
ENV DEBIAN_FRONTEND=noninteractive


# For the prod image, just use packages.common to define the packages installed
# on target.
# For the dev image, use both "packages.common" and "packages.dev" -- this can
# be set via docker build args (see above).
ARG PACKAGE_FILES=packages.common
RUN ln -snf /usr/share/zoneinfo/$TZ /etc/localtime && echo $TZ > /etc/timezone
COPY packages.* /tmp/
RUN apt-get -y update && \
    apt-get -y upgrade && \
    apt-get -y --no-install-recommends install $(for P in ${PACKAGE_FILES}; do cat /tmp/$P | sed -e "s/#.*//" ; done) && \
    rm /tmp/packages.*

# Install QEMU
COPY --from=build /out/usr/local/bin/qemu-system-x86_64 /usr/local/bin/
COPY --from=build /out/usr/local/share/qemu /usr/local/share/qemu

# Install journalbeat
COPY --from=download /tmp/journalbeat-oss-7.14.0-linux-x86_64.tar.gz /tmp/journalbeat-oss-7.14.0-linux-x86_64.tar.gz
RUN cd /tmp/ && \
    mkdir -p /etc/journalbeat \
             /var/lib/journalbeat \
             /var/log/journalbeat && \
    tar --strip-components=1 -C /etc/journalbeat/ -zvxf journalbeat-oss-7.14.0-linux-x86_64.tar.gz journalbeat-7.14.0-linux-x86_64/fields.yml && \
    tar --strip-components=1 -C /etc/journalbeat/ -zvxf journalbeat-oss-7.14.0-linux-x86_64.tar.gz journalbeat-7.14.0-linux-x86_64/journalbeat.reference.yml && \
    tar --strip-components=1 -C /usr/local/bin/ -zvxf journalbeat-oss-7.14.0-linux-x86_64.tar.gz journalbeat-7.14.0-linux-x86_64/journalbeat && \
    rm /tmp/journalbeat-oss-7.14.0-linux-x86_64.tar.gz

# Install node_exporter
COPY --from=download /tmp/node_exporter-1.3.1.linux-amd64.tar.gz /tmp/node_exporter-1.3.1.linux-amd64.tar.gz
RUN cd /tmp/ && \
    mkdir -p /etc/node_exporter && \
    tar --strip-components=1 -C /usr/local/bin/ -zvxf node_exporter-1.3.1.linux-amd64.tar.gz node_exporter-1.3.1.linux-amd64/node_exporter && \
    rm /tmp/node_exporter-1.3.1.linux-amd64.tar.gz
