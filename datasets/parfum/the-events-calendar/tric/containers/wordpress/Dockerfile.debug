ARG WORDPRESS_IMAGE_VERSION="latest"

FROM wordpress:${WORDPRESS_IMAGE_VERSION}

# Create a "docker" user and group that will map to the current user gid:uid.
# This will allow setting the `APACHE_RUN_USER`, and with it deal with filemode issues, correctly.
ARG DOCKER_RUN_UID=0
ARG DOCKER_RUN_GID=0
RUN if [ "${DOCKER_RUN_GID}" != 0 ]; then addgroup --gid ${DOCKER_RUN_GID} docker; fi; \
    if [ "${DOCKER_RUN_UID}" != 0 ]; then adduser --uid ${DOCKER_RUN_UID} --gid ${DOCKER_RUN_GID} --home /home/docker \
                             --shell /bin/sh --disabled-password --gecos "" docker; fi

# Pull in an helper library to install PHP extensions.
COPY --from=mlocati/php-extension-installer /usr/bin/install-php-extensions /usr/bin/
# Install the XDebug extension, drama might ensue due to the version constraint, handle it.
# Install version 2 to keep the same config most people have.
RUN install-php-extensions xdebug-2.9.8 || docker-php-ext-enable xdebug.so
# Configure XDebug to autostart on all requests, use the version 2 and 3 configuration format.
RUN echo 'xdebug.remote_enable=1\n\
xdebug.mode=develop,debug\n\
xdebug.remote_autostart=1\n' \
 >> /usr/local/etc/php/conf.d/docker-php-ext-xdebug.ini
# Make the XDebug configuration file world-read/writeable as the user updating it might not be a sudo-er.
RUN chmod a+rw /usr/local/etc/php/conf.d/docker-php-ext-xdebug.ini

# Change the entrypoint to enable/disable XDebug depending on the XDEBUG_DISABLE env var.
COPY tric-entrypoint.sh /usr/local/bin/tric-entrypoint.sh
# Make the tric entrypoing world-executable as the user that executes it might not be a sudo-er.
RUN chmod a+x /usr/local/bin/tric-entrypoint.sh
# Change the default entrypoint to be the tric one.
ENTRYPOINT ["/usr/local/bin/tric-entrypoint.sh"]
# We need to explicitly set the CMD since we changed the ENTRYPOINT.
CMD ["apache2-foreground"]
