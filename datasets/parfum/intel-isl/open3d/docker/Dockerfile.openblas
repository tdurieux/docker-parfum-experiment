# FROM must be called before other ARGS except for ARG BASE_IMAGE
ARG BASE_IMAGE
FROM ${BASE_IMAGE}

# For the rest of this Dockerfile
SHELL ["/bin/bash", "-c"]

# Required build args, should be specified in docker_build.sh
ARG CMAKE_VERSION
ARG CCACHE_TAR_NAME
ARG PYTHON_VERSION
ARG DEVELOPER_BUILD
RUN if [ -z "${CMAKE_VERSION}"   ]; then echo "Error: ARG CMAKE_VERSION   not specified."; exit 1; fi \
 && if [ -z "${CCACHE_TAR_NAME}" ]; then echo "Error: ARG CCACHE_TAR_NAME not specified."; exit 1; fi \
 && if [ -z "${PYTHON_VERSION}"  ]; then echo "Error: ARG PYTHON_VERSION  not specified."; exit 1; fi \
 && if [ -z "${DEVELOPER_BUILD}" ]; then echo "Error: ARG DEVELOPER_BUILD not specified."; exit 1; fi

# Prevent interactive inputs when installing packages
ENV DEBIAN_FRONTEND=noninteractive
ENV TZ=America/Los_Angeles
ENV SUDO=command

# Minimal dependencies for running Docker
# wget    : for downloading
# libgl1  : available on Ubuntu ARM desktop by default
# libgomp1: available on Ubuntu ARM desktop by default
RUN apt-get update && apt-get install -y \
    wget \
    libgl1 \
    libgomp1 \
 && rm -rf /var/lib/apt/lists/*

# Minimal dependencies for building
RUN apt-get update && apt-get install -y \
    build-essential \
    clang-7 \
    git  \
 && rm -rf /var/lib/apt/lists/*

# Install ccache after build-essential (gcc, g++).
# Open3D CMake can detect and use ccache automatically, except for OpenBLAS.
# Setting the /usr/lib/ccache path is necessary to cache OpenBLAS build.
RUN apt-get update && apt-get install -y \
    ccache \
 && rm -rf /var/lib/apt/lists/*
ENV PATH="/usr/lib/ccache:${PATH}"
RUN mkdir -p /usr/lib/ccache \
 && ln -sf $(which ccache) /usr/lib/ccache/gcc \
 && ln -sf $(which ccache) /usr/lib/ccache/g++ \
 && ln -sf $(which ccache) /usr/lib/ccache/clang-7
RUN echo ${PATH} \
 && ls -alh /usr/lib/ccache \
 && echo "gcc=$(which gcc)" \
 && gcc --version \
 && echo "g++=$(which g++)" \
 && g++ --version \
 && echo "clang-7=$(which clang-7)" \
 && clang-7 --version

# Uncomment this line to always fetch the latest ccache
# ADD "https://www.random.org/cgi-bin/randbyte?nbytes=10&format=h" skipcache

# Download ccache from GCS bucket
# If it doesn't exist on the cloud, an empty ${CCACHE_DIR} will be created.
# Example directory structure:
# - CCACHE_DIR        = ~/.cache/ccache
# - CCACHE_DIR_NAME   = ccache
# - CCACHE_DIR_PARENT = ~/.cache
RUN CCACHE_DIR=$(ccache -p | grep "cache_dir =" | grep -oE "[^ ]+$") \
 && CCACHE_DIR_NAME=$(basename ${CCACHE_DIR}) \
 && CCACHE_DIR_PARENT=$(dirname ${CCACHE_DIR}) \
 && mkdir -p ${CCACHE_DIR_PARENT} \
 && cd ${CCACHE_DIR_PARENT} \
 && (wget -q https://storage.googleapis.com/open3d-ci-cache/${CCACHE_TAR_NAME}.tar.gz || true) \
 && if [ -f ${CCACHE_TAR_NAME}.tar.gz ]; then tar -xf ${CCACHE_TAR_NAME}.tar.gz; fi \
 && mkdir -p ${CCACHE_DIR}
RUN ccache -M 5G \
 && ccache -s

# Install Pyenv
# Conda is not reliable on Linux ARM64.
RUN apt-get update -y && apt-get install -y \
    make \
    build-essential \
    libssl-dev \
    zlib1g-dev \
    libbz2-dev \
    libreadline-dev \
    libsqlite3-dev \
    wget \
    llvm \
    libncurses5-dev \
    libncursesw5-dev \
    xz-utils \
    tk-dev \
    libffi-dev \
    liblzma-dev \
    python-openssl \
    git \
 && rm -rf /var/lib/apt/lists/*
RUN git clone --depth=1 https://github.com/pyenv/pyenv.git /root/.pyenv
ENV PYENV_ROOT="/root/.pyenv"
ENV PATH="${PYENV_ROOT}/bin:${PYENV_ROOT}/shims:${PATH}"

# CMake
# PWD is /, cmake will be installed to /root/${CMAKE_VERSION}/bin/cmake
RUN CMAKE_VER_NUMBERS=$(echo "${CMAKE_VERSION}" | cut -d"-" -f2) \
 && wget -q https://github.com/Kitware/CMake/releases/download/v${CMAKE_VER_NUMBERS}/${CMAKE_VERSION}.tar.gz \
 && tar -xf ${CMAKE_VERSION}.tar.gz \
 && cp -ar ${CMAKE_VERSION} ${HOME}
ENV PATH=${HOME}/${CMAKE_VERSION}/bin:${PATH}

# Open3D C++ dependencies
# Done before copying the full Open3D directory for better Docker caching
COPY ./util/install_deps_ubuntu.sh /root/Open3D/util/
RUN /root/Open3D/util/install_deps_ubuntu.sh assume-yes \
 && rm -rf /var/lib/apt/lists/*

# Open3D repo
# Always keep /root/Open3D as the WORKDIR
COPY . /root/Open3D
WORKDIR /root/Open3D

# Build Python wheel
RUN pyenv install $(pyenv install --list | sort -r --version-sort | grep -m1 "^ *${PYTHON_VERSION}\.")
RUN pyenv local $(pyenv versions | grep ${PYTHON_VERSION})
RUN which python \
 && python --version \
 && python -m pip install -U \
    pip=="21.1.1" \
    wheel=="0.35.1" \
    setuptools=="50.3.2" \
    yapf=="0.30.0" \
    pytest=="6.0.1"

RUN mkdir build \
 && cd build \
 && cmake \
    -DBUILD_UNIT_TESTS=ON \
    -DCMAKE_BUILD_TYPE=Release \
    -DCMAKE_INSTALL_PREFIX=~/open3d_install \
    -DDEVELOPER_BUILD=${DEVELOPER_BUILD} \
    .. \
 && make -j$(nproc) \
 && make install-pip-package -j$(nproc) \
 && make install -j$(nproc) \
 && pyenv rehash
RUN cp build/lib/python_package/pip_package/*.whl /

# Compress ccache folder, move to / directory (optional)
RUN ccache -s \
 && CCACHE_DIR=$(ccache -p | grep "cache_dir =" | grep -oE "[^ ]+$") \
 && CCACHE_DIR_NAME=$(basename ${CCACHE_DIR}) \
 && CCACHE_DIR_PARENT=$(dirname ${CCACHE_DIR}) \
 && cd ${CCACHE_DIR_PARENT} \
 && tar -czf ${CCACHE_TAR_NAME}.tar.gz ${CCACHE_DIR_NAME} \
 && mv ${CCACHE_TAR_NAME}.tar.gz /
