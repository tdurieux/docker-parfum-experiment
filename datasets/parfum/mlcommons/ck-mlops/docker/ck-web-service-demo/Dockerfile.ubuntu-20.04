# Adaptive container with the CK interface
# Concept: https://arxiv.org/abs/2011.01149

FROM ubuntu:20.04

# Contact
LABEL maintainer="Grigori Fursin <grigori@octoml.ai>"

# Shell info
SHELL ["/bin/bash", "-c"]
#ENTRYPOINT ["/bin/bash", "-c"]

# Set noninteractive mode for apt (do not use ENV)
ARG DEBIAN_FRONTEND=noninteractive

# Notes: https://runnable.com/blog/9-common-dockerfile-mistakes
# Install system dependencies
RUN apt update && \
    apt install -y --no-install-recommends \
           apt-utils \
           git wget zip bzip2 libz-dev libbz2-dev cmake curl unzip \
           openssh-client vim mc tree \
           gcc g++ autoconf autogen libtool make libc6-dev build-essential \
           libssl-dev libbz2-dev libffi-dev \
           python3 python3-pip python3-dev \
           daemonize\
           libncurses-dev \
           sudo

# Prepare a user with a user group with a random id
RUN groupadd -g 1111 ckuser
RUN useradd -u 2222 -g ckuser --create-home --shell /bin/bash ckuser
RUN echo "ckuser:ckuser" | chpasswd
RUN adduser ckuser sudo
RUN echo "ckuser   ALL=(ALL)  NOPASSWD:ALL" >> /etc/sudoers

# Set user
USER ckuser:ckuser
WORKDIR /home/ckuser
ENV PATH="/home/ckuser/.local/bin:${PATH}"
RUN mkdir .ssh

# Install CK
RUN export DUMMY_CK=C
RUN ${DUMMY_CK} pip3 install virtualenv
RUN ${DUMMY_CK} pip3 install ck

# Install pandas for the CK dashboard
RUN python3 -m pip install pandas --user

# Clone CK repo
RUN ck pull repo:mlcommons@ck-mlops

# Install packages to CK env entries
RUN ck setup kernel --var.install_to_env=yes

RUN ck detect platform.os --platform_init_uoa=generic-linux-dummy
RUN ck detect soft:compiler.python --full_path=/usr/bin/python3

RUN ck detect soft:compiler.gcc --full_path=`which gcc`

RUN ck install package --tags=tool,cmake,prebuilt --quiet

RUN ck install package --tags=lib,python-package,absl
RUN ck install package --tags=lib,python-package,numpy
RUN ck install package --tags=lib,python-package,scipy
RUN ck install package --tags=lib,python-package,matplotlib
RUN ck install package --tags=lib,python-package,cython
RUN ck install package --tags=lib,python-package,pillow
RUN ck install package --tags=lib,python-package,opencv-python-headless

RUN ck install package --tags=lib,python-package,onnxruntime-cpu,1.7.0
RUN ck install package --tags=lib,python-package,onnx,1.9.0

RUN ck install package --tags=compiler,llvm,v12.0.0,prebuilt
RUN ck install package --tags=compiler,tvm,dev --env.CK_HOST_CPU_NUMBER_OF_PROCESSORS=2

RUN ck install package --tags=model,image-classification,mlperf,onnx,resnet50,v1.5-opset-11

RUN ck pull repo:mlcommons@ck-mlops
RUN ck run program:ml-task-image-classification-tvm-onnx-cpu --cmd_key=install-python-requirements



# This command spawns the server in the background (daemon) mode, while
# also brings up an interactive shell in the same container.
CMD echo -e "You can now point your browser to: http://localhost:3355/web?action=show&module_uoa=ck-web-service-demo"\
 && ck start web --host=0.0.0.0 --port=3344 --wfe_host=localhost --wfe_port=3355
