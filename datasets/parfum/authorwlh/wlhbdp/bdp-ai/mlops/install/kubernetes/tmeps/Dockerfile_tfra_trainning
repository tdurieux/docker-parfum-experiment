FROM ubuntu:18.04 as org

# 换内网源
#RUN echo "deb http://mirrors.tencent.com/ubuntu/ bionic main restricted universe multiverse\n \
#deb http://mirrors.tencent.com/ubuntu/ bionic-security main restricted universe multiverse\n \
#deb http://mirrors.tencent.com/ubuntu/ bionic-updates main restricted universe multiverse\n \
#deb-src http://mirrors.tencent.com/ubuntu/ bionic main restricted universe multiverse\n \
#deb-src http://mirrors.tencent.com/ubuntu/ bionic-security main restricted universe multiverse\n \
#deb-src http://mirrors.tencent.com/ubuntu/ bionic-updates main restricted universe multiverse" > /etc/apt/sources.list

# 安装运维工具
ENV DEBIAN_FRONTEND=noninteractive
RUN apt update && apt install -y vim apt-transport-https gnupg2 ca-certificates-java rsync jq wget git dnsutils iputils-ping net-tools curl locales zip unzip tzdata zlib1g-dev

# 安装python
RUN apt install -y python3.8-dev python3-pip libsasl2-dev libpq-dev \
    && rm -f /usr/bin/python3 && ln -s /usr/bin/python3.8 /usr/bin/python3 \
    && rm -f /usr/bin/python && ln -s /usr/bin/python3.8 /usr/bin/python \
    && ln -s /usr/bin/pip3 /usr/bin/pip

# 安装中文
RUN apt install -y locales ttf-wqy-microhei ttf-wqy-zenhei xfonts-wqy && locale-gen zh_CN && locale-gen zh_CN.utf8
ENV LANG zh_CN.UTF-8
ENV LC_ALL zh_CN.UTF-8
ENV LANGUAGE zh_CN.UTF-8

# 设置时区
RUN ln -fs /usr/share/zoneinfo/Asia/Shanghai /etc/localtime && dpkg-reconfigure -f noninteractive tzdata

# 便捷操作
RUN echo "alias ll='ls -alF'" >> /root/.bashrc && \
    echo "alias la='ls -A'" >> /root/.bashrc && \
    echo "alias vi='vim'" >> /root/.bashrc && \
    /bin/bash -c "source /root/.bashrc"

# 构建编译依赖层
RUN mkdir /app
WORKDIR /app

FROM org as compiler
# gcc
RUN curl -L http://mirrors.ustc.edu.cn/gnu/gcc/gcc-7.3.0/gcc-7.3.0.tar.gz -o gcc-7.3.0.tar.gz
RUN tar -xvf gcc-7.3.0.tar.gz
RUN cd gcc-7.3.0 && wget http://gcc.gnu.org/pub/gcc/infrastructure/gmp-6.1.0.tar.bz2 && \
	wget http://gcc.gnu.org/pub/gcc/infrastructure/mpfr-3.1.4.tar.bz2 && \
	wget http://gcc.gnu.org/pub/gcc/infrastructure/mpc-1.0.3.tar.gz && \
	wget http://gcc.gnu.org/pub/gcc/infrastructure/isl-0.16.1.tar.bz2

RUN cd gcc-7.3.0 && ./contrib/download_prerequisites 
RUN cd gcc-7.3.0 && ./configure --enable-languages=c,c++ --disable-multilib --with-system-zlib --prefix=/usr/local/gcc-7.3.0
RUN cd gcc-7.3.0 && make -j32 && make install
RUN ln -sf /usr/local/gcc-7.3.0/bin/gcc /usr/bin/gcc && ln -sf /usr/local/gcc-7.3.0/bin/g++ /usr/bin/g++
RUN which gcc && gcc -v

# bazel
RUN curl -L https://github.com/bazelbuild/bazel/releases/download/3.7.2/bazel-3.7.2-installer-linux-x86_64.sh -o bazel-3.7.2-installer-linux-x86_64.sh
RUN	chmod 777 bazel-3.7.2-installer-linux-x86_64.sh && ./bazel-3.7.2-installer-linux-x86_64.sh

# git-lfs
#RUN curl -s https://packagecloud.io/install/repositories/github/git-lfs/script.deb.sh | bash && \
#	apt install -o Acquire::AllowInsecureRepositories=true -o Acquire::AllowDowngradeToInsecureRepositories=true -y --allow-unauthenticated --no-install-recommends git-lfs && \
#	git lfs install

# tensorflow
ARG TF_VERSION="2.5.1"
RUN pip3 install --upgrade pip && pip3 install tensorflow==$TF_VERSION

# cmake
WORKDIR /usr/local/share/cmake-3.15
RUN curl -L https://cmake.org/files/v3.15/cmake-3.15.7-Linux-x86_64.sh -o make-3.15.7-Linux-x86_64.sh
#COPY make-3.15.7-Linux-x86_64.sh ./
RUN chmod 777 make-3.15.7-Linux-x86_64.sh && \
	./make-3.15.7-Linux-x86_64.sh --skip-license --prefix=/usr

# 编译
WORKDIR /app/recommenders-addons

#ARG TFRA_VERSION_GIT_COMMIT=v0.3.1
#RUN curl -sSL --retry 5 https://github.com/tensorflow/recommenders-addons/tarball/${TFRA_VERSION_GIT_COMMIT} | tar --strip-components=1 -xzf -
COPY recommenders-addons/ /app/recommenders-addons/
#ARG BAZEL_OPTIONS="--remote_cache=grpc://bazel-cache.woa.com:9090"
RUN python3 configure.py && bazel build ${BAZEL_OPTIONS} --enable_runfiles build_pip_pkg && \
	bazel-bin/build_pip_pkg artifacts

# 构建生产环境层
FROM org as trainer
WORKDIR /app

# tensorflow kafka
ARG TF_VERSION="2.5.1"
RUN pip3 install --upgrade pip && pip3 install tensorflow_datasets numpy tensorflow==$TF_VERSION traceback2 kafka-python

# tfra
COPY --from=compiler /app/recommenders-addons/artifacts/tensorflow_recommenders_addons-*.whl ./
RUN pip3 install tensorflow_recommenders_addons-*.whl
# RUN pip3 install tensorflow-recommenders-addons-gpu==0.3.1

# app
COPY src/ /app/
ENV PYTHONPATH=/app:$PYTHONPATH

#ENTRYPOINT ["sleep", "99d"]
ENTRYPOINT ["/bin/bash", "-c", "cp -r /tmp/conf /tmp/conf_inner && python3 launcher.py"]
