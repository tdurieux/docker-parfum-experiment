#-------------------------------------------------------------------------------------------------------------
# The 'lite-build' target builds a container image to be used as the base of the supported build environment
# for Qserv binaries.  It includes the compiler toolchain and other developer tools, system libraries, and
# relatively-slowly changing third-party libs and tools (boost, antlr, protobuf, mysql-proxy, xrootd, etc.)
#
# The idea is that this container should change relatively infrequently (i.e. every few months or so), and
# that developers will be able to pull and cache the latest version generated by CI.  Developers should not
# need to regularly rebuild this image themselves, though they will typically build a few layers on top to
# make a user-customized build image to ease development workflow (matching their user/group ids with their
# development host for source file sharing, etc. -- see ../build-user/Dockerfile.)
#
# Packages are managed/built with OS-native package management, rather than eups, conda, etc. Off-the-shelf
# packages are preferred whenever suitable, though some here require source builds.
#-------------------------------------------------------------------------------------------------------------

FROM almalinux:8 AS lite-build

RUN dnf install -y 'dnf-command(config-manager)' \
    && dnf config-manager --set-enabled powertools \
    && dnf install -y epel-release \
    && dnf config-manager --add-repo=https://download.docker.com/linux/centos/docker-ce.repo \
    && dnf update -y \
    && dnf install -y \
        apr-devel \
        apr-util-devel \
        bash-completion \
        boost-devel \
        clang \
        clang-tools-extra \
        docker-ce-cli \
        flex \
        gcc-c++ \
        gdb \
        gdb-gdbserver \
        git \
        glib2-devel \
        glibc-langpack-en \
        java-devel \
        jemalloc \
        libcurl-devel \
        libevent-devel \
        libtool \
        libuuid-devel \
        lsof \
        lua5.1-devel \
        make \
        mariadb-connector-c-devel \
        netcat \
        openssl-devel \
        patch \
        protobuf-compiler \
        protobuf-devel \
        python38-devel \
        tree \
        vim \
    && dnf clean all \
    && rm -rf /var/cache/yum

RUN curl -s "https://cmake.org/files/v3.17/cmake-3.17.2-Linux-x86_64.tar.gz" \
    | tar --strip-components=1 -xz -C /usr/local

RUN cd /tmp \
    && git clone https://github.com/apache/logging-log4cxx \
    && cd logging-log4cxx \
    && git checkout a7d562806f0512683d9f32b3c3f95300d4c62fbe \
    && ./autogen.sh \
    && ./configure --disable-doxygen \
    && make -j8 \
    && make install \
    && cd /tmp \
    && rm -rf logging-log4cxx

RUN cd /tmp \
    && git clone https://github.com/nlohmann/json \
    && mkdir json/build \
    && cd json/build \
    && cmake -DJSON_BuildTests=off .. \
    && make -j8 \
    && make install \
    && cd /tmp \
    && rm -rf json

RUN cd /usr/share/java \
    && curl -O https://www.antlr.org/download/antlr-4.8-complete.jar \
    && cd /tmp \
    && git clone https://github.com/antlr/antlr4 \
    && cd antlr4 \
    && git reset --hard 1284814c2112c7ffe275a4831511b4a0f21dd44c \
    && git config user.email "qserv@qserv-build" \
    && curl https://patch-diff.githubusercontent.com/raw/antlr/antlr4/pull/2773.patch | git am \
    && mkdir runtime/Cpp/build \
    && cd runtime/Cpp/build \
    && cmake -DANTLR4_INSTALL=on .. \
    && make -j8 \
    && make install \
    && cp ../cmake/FindANTLR.cmake /usr/local/share/cmake-3.17/Modules/ \
    && cd /tmp \
    && rm -rf antlr4

RUN cd /tmp \
    && git clone https://github.com/lsst/mysqlproxy \
    && cd mysqlproxy \
    && cp /usr/lib64/pkgconfig/lua-5.1.pc /usr/lib64/pkgconfig/lua5.1.pc \
    && ./configure \
    && make \
    && make install \
    && cd /tmp \
    && rm -rf mysqlproxy

RUN cd /tmp \
    && git clone https://github.com/lsst/xrootd \
    && cd xrootd \
    && git checkout affinity-flex-hash \
    && mkdir build \
    && cd build \
    && cmake -DENABLE_PYTHON=off .. \
    && make -j8 \
    && make install \
    && cd /tmp \
    && rm -rf xrootd

RUN echo /usr/local/lib > /etc/ld.so.conf.d/local.conf \
    && echo /usr/local/lib64 >> /etc/ld.so.conf.d/local.conf \
    && ldconfig

RUN pip3 install \
    backoff \
    backoff-stubs \
    click \
    deprecated \
    docker-compose \
    documenteer \
    jinja2 \
    ltd-conveyor \
    mypy \
    sphinx-rtd-theme \
    mysql-connector-python \
    numpy \
    pybind11[global] \
    pyyaml \
    sqlalchemy \
    sqlalchemy-stubs \
    types-PyYAML \
    types-requests

RUN useradd --create-home --uid 1000 --shell /bin/bash qserv

CMD ["tail", "-f", "/dev/null"]

#-------------------------------------------------------------------------------------------------------------
# The 'lite-run-base' target builds a container image that will be used as the base for Qserv production
# runtime containers (right now, the single Qserv unified-binary container.)  This image is built as a second
# stage following 'lite-build' in order to be able to pull in runtime components of packages we have built
# there from source.  Qserv binaries will later be layered on top (see ../run/Dockerfile.)
#
# Like the 'lite-build' container image, this is envisioned to change relatively infrequently.  'lite-build'
# and 'lite-run-base' should always be built and published as a matched set by CI.
#
# This image will be the base of runtime images that will need to be pushed/pulled from/to a lot of places in
# production.  We are well-served by keeping this image as thin/light as practical (in particular, consider
# adding debug tools, etc. to a separate debug sidecar container.)
#
# DO NOT BLOAT THE RUN BASE
#-------------------------------------------------------------------------------------------------------------

FROM almalinux:8 AS lite-run-base

RUN dnf install -y 'dnf-command(config-manager)' \
    && dnf config-manager --set-enabled powertools \
    && dnf install -y epel-release \
    && dnf update -y \
    && dnf install -y \
        apr \
        apr-util \
        bash-completion \
        boost-filesystem \
        boost-program-options \
        boost-regex \
        boost-system \
        boost-thread \
        glib2 \
        glibc-langpack-en \
        jemalloc \
        libevent \
        libuuid \
        lua5.1 \
        mariadb-connector-c \
        openssl \
        procps-ng \
        protobuf \
        python38 \
        tree \
        vim \
    && dnf module install -y mariadb/client \
    && dnf clean all \
    && rm -rf /var/cache/yum

RUN useradd --create-home --uid 1000 --shell /bin/bash qserv
WORKDIR /home/qserv

RUN mkdir -p /qserv/data && \
    mkdir /config-etc && \
    mkdir -p /qserv/run/tmp && \
    mkdir -p /var/run/xrootd && \
    chown qserv:qserv /qserv/data /config-etc /qserv/run/tmp /var/run/xrootd

RUN alternatives --set python /usr/bin/python3
ENV PYTHONPATH "${PYTHONPATH}:/usr/local/python"

COPY --from=lite-build /usr/local/lib/liblog4cxx.so /usr/local/lib/
COPY --from=lite-build /usr/local/lib/libantlr4-runtime.so /usr/local/lib/
COPY --from=lite-build /usr/local/bin/mysql-proxy /usr/local/bin/
COPY --from=lite-build /usr/local/lib/libmysql-*.so /usr/local/lib/
COPY --from=lite-build /usr/local/lib/mysql-proxy/lua/*.so /usr/local/lib/mysql-proxy/lua/
COPY --from=lite-build /usr/local/lib/mysql-proxy/plugins/*.so /usr/local/lib/mysql-proxy/plugins/

COPY --from=lite-build /usr/local/include/xrootd/ /usr/local/include/
COPY --from=lite-build /usr/local/lib64/libXrd*.so /usr/local/lib64/
COPY --from=lite-build /usr/local/bin/xrootd /usr/local/bin/
COPY --from=lite-build /usr/local/bin/cmsd /usr/local/bin/
COPY --from=lite-build /usr/local/bin/xrdfs /usr/local/bin/

RUN echo /usr/local/lib > /etc/ld.so.conf.d/local.conf \
    && echo /usr/local/lib64 >> /etc/ld.so.conf.d/local.conf \
    && ldconfig

RUN pip3 install \
    backoff \
    click \
    deprecated \
    jinja2 \
    mysql-connector-python \
    pyyaml \
    requests \
    sqlalchemy
