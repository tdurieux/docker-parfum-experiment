FROM centos:7

# labels
LABEL law.version="0.1.7"
LABEL law.image_name="riga/law"
LABEL law.image_tag="py36"
LABEL law.image_dir="law-py36"
LABEL law.image_python_major="3"
LABEL law.image_python_minor="6"
LABEL law.image_python_patch="15"
LABEL law.image_python="3.6.15"
LABEL law.image_python_mm="3.6"

# law specific environment variables
ENV LAW_SANDBOX docker::riga/law:py36
ENV LAW_IMAGE_NAME law-py36
ENV LAW_IMAGE_TAG py36
ENV LAW_IMAGE_PYTHON_MAJOR 3
ENV LAW_IMAGE_PYTHON_MINOR 6
ENV LAW_IMAGE_PYTHON_PATCH 15
ENV LAW_IMAGE_PYTHON ${LAW_IMAGE_PYTHON_MAJOR}.${LAW_IMAGE_PYTHON_MINOR}.${LAW_IMAGE_PYTHON_PATCH}
ENV LAW_IMAGE_PYTHON_MM ${LAW_IMAGE_PYTHON_MAJOR}.${LAW_IMAGE_PYTHON_MINOR}
ENV LAW_IMAGE_SOURCE_DIR /root/law

# basic environment variables
ENV CPATH /usr/local/include:/usr/include:${CPATH}
ENV LD_LIBRARY_PATH /usr/local/lib:/usr/local/lib64:/usr/lib:/usr/lib64:${LD_LIBRARY_PATH}

# exposed ports
EXPOSE 8082

# bash files
COPY bash_profile /root/.bash_profile
COPY bashrc /root/.bashrc

# installation workdir
WORKDIR /root/install

# prepare yum
RUN yum -y update; yum clean all
RUN yum -y install yum-plugin-priorities yum-utils; yum clean all
RUN yum -y install epel-release; yum clean all

# update locales
RUN sed -i -r 's/^(override_install_langs=.+)/#\1/' /etc/yum.conf
RUN yum -y reinstall glibc-common

# basic software
RUN yum -y groupinstall development; yum clean all
RUN yum -y install gcc gcc-c++ libffi-devel openssl-devel glib2-devel libattr-devel openldap-devel \
    zlib-devel bzip2 bzip2-devel json-c-devel ncurses-devel curl-devel readline-devel tk-devel \
    sqlite sqlite-devel libsqlite3x-devel which wget nano screen git git-lfs cmake cmake3; \
    yum clean all
RUN cd /usr/bin; curl https://getmic.ro | bash

# python via pyenv
ENV PYENV_ROOT /root/.pyenv
ENV PYENV_VERSION ${LAW_IMAGE_PYTHON}
ENV PYENV_VERSION_MM ${LAW_IMAGE_PYTHON_MM}
ENV PYENV_PREFIX ${PYENV_ROOT}/versions/${PYENV_VERSION}
ENV PYENV_INCLUDE_DIR ${PYENV_PREFIX}/include/python${PYENV_VERSION_MM}m
ENV PYENV_LIB_DIR ${PYENV_PREFIX}/lib
ENV PATH ${PYENV_ROOT}/bin:${PYENV_ROOT}/shims:${PATH}
ENV CPATH ${PYENV_INCLUDE_DIR}:${CPATH}
RUN curl https://pyenv.run | bash
RUN PYTHON_CONFIGURE_OPTS="--enable-shared" pyenv install ${PYENV_VERSION}
RUN echo $'\n\
eval "$( pyenv init - )"\n\
eval "$( pyenv virtualenv-init - )"' >> /root/.bashrc

# boost
ENV BOOST_ROOT /usr/local
RUN wget -nv https://boostorg.jfrog.io/artifactory/main/release/1.79.0/source/boost_1_79_0.tar.gz && \
    tar -xzf boost_1_79_0.tar.gz && \
    cd boost_1_79_0 && \
    ./bootstrap.sh --with-libraries=system,thread,python --with-python="$( pyenv which python )" && \
    perl -pi -e 's!(\Qincludes ?= $(prefix)/include/python$(version)\E)!\1m!' tools/build/src/tools/python.jam && \
    ./b2 install --prefix=${BOOST_ROOT} && \
    ldconfig && \
    cd .. && \
    rm -rf boost_1_79_0 && \
    rm boost_1_79_0.tar.gz

# WLCG software
RUN rpm -Uvh https://repo.opensciencegrid.org/osg/3.6/osg-3.6-el7-release-latest.rpm
RUN yum-config-manager --add-repo http://linuxsoft.cern.ch/cern/centos/7/cern/x86_64
RUN yum -y update; yum clean all
RUN yum -y install CERN-CA-certs osg-ca-certs osg-voms voms-clients; yum clean all

# gfal2
ENV CPATH /usr/local/include/gfal2:${CPATH}
ENV GFAL_PLUGIN_DIR /usr/local/lib64/gfal2-plugins
RUN yum -y install lfc-devel dpm-devel srm-ifce-devel dcap-devel globus-gass-copy-devel \
    davix-devel xrootd-client-devel libssh2-devel gtest-devel libuuid-devel; yum clean all
RUN git clone https://gitlab.cern.ch/dmc/gfal2.git && \
    cd gfal2 && \
    git checkout tags/v2.20.5 && \
    mkdir build && \
    cd build && \
    cmake .. \
        -DCMAKE_INSTALL_PREFIX=/usr/local \
        -DMAIN_DOC=FALSE \
        -DSKIP_TESTS=TRUE && \
    make && \
    make install && \
    cd ../.. && \
    rm -rf gfal2
RUN git clone https://gitlab.cern.ch/dmc/gfal2-bindings.git && \
    cd gfal2-bindings && \
    git checkout tags/v1.11.1 && \
    mkdir build && \
    cd build && \
    cmake .. \
        -DGFAL2_INCLUDE_DIRS=/usr/local/include/gfal2 \
        -DPYTHON_EXECUTABLE= \
        -DPYTHON_EXECUTABLE_3="$( pyenv which python )" \
        -DPYTHON_EXECUTABLE_${LAW_IMAGE_PYTHON_MM}="$( pyenv which python )" \
        -DPYTHON_LIBRARIES="${PYENV_LIB_DIR}" \
        -DPYTHON_LIBRARIES_${LAW_IMAGE_PYTHON_MM}="${PYENV_LIB_DIR}" \
        -DSKIP_DOC=TRUE \
        -DSKIP_TESTS=TRUE && \
    make && \
    make install && \
    cd ../.. && \
    rm -rf gfal2-bindings
RUN git clone https://github.com/cern-it-sdc-id/gfal2-dropbox.git && \
    cd gfal2-dropbox && \
    mkdir build && \
    cd build && \
    cmake .. \
        -DCMAKE_INSTALL_PREFIX=/usr/local \
        -DGFAL2_INCLUDE_DIRS=/usr/local/include/gfal2 && \
    make && \
    make install && \
    cd ../.. && \
    rm -rf gfal2-dropbox

# python packages
RUN pip install --no-cache-dir --upgrade pip
RUN pip install --no-cache-dir --upgrade setuptools
RUN pip install --no-cache-dir readline
RUN pip install --no-cache-dir slackclient
RUN pip install --no-cache-dir python-telegram-bot
RUN pip install --no-cache-dir flake8
RUN pip install --no-cache-dir flake8-quotes
RUN pip install --no-cache-dir flake8-commas
RUN pip install --no-cache-dir pytest-cov

# cleanup installation workdir
WORKDIR /root
RUN rm -rf install

# install law master
RUN git clone https://github.com/riga/law "${LAW_IMAGE_SOURCE_DIR}" && \
    cd "${LAW_IMAGE_SOURCE_DIR}" && \
    pip install --no-cache-dir .
WORKDIR ${LAW_IMAGE_SOURCE_DIR}

# shell initialization
RUN echo 'source "$( law completion )" ""' >> /root/.bash_profile

# init command
CMD bash --login
