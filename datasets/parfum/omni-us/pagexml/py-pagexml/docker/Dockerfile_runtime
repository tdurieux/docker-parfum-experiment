#                     16.04-py35  18.04-py36  20.04-py38
# ARG UBUNTU_TAG      16.04       18.04       20.04
# ARG PYTHON_VERSION  3           3           3

ARG UBUNTU_TAG
FROM ubuntu:$UBUNTU_TAG

LABEL maintainer="Mauricio Villegas <mauricio@omnius.com>"

SHELL ["/bin/bash", "-c"]
ENV \
 DEBIAN_FRONTEND=noninteractive \
 LANG=en_US.UTF-8 \
 LC_ALL=C.UTF-8


ARG PYTHON_VERSION=3

RUN if ! test -n "$PYTHON_VERSION"; then \
      echo "error: PYTHON_VERSION argument is required"; \
      exit 1; \
    fi \
 && . /etc/os-release \
 && if [ "$VERSION_ID" = "16.04" ] && [ "$PYTHON_VERSION" = "2" ]; then \
      CV_VERSION=2.4v5; \
      GDAL_VERSION=1i; \
      PYTHON_VERSION=; \
    elif [ "$VERSION_ID" = "16.04" ] && [ "$PYTHON_VERSION" = "3" ]; then \
      CV_VERSION=2.4v5; \
      GDAL_VERSION=1i; \
    elif [ "$VERSION_ID" = "18.04" ] && [ "$PYTHON_VERSION" = "3" ]; then \
      CV_VERSION=3.2; \
      GDAL_VERSION=20; \
    elif [ "$VERSION_ID" = "20.04" ] && [ "$PYTHON_VERSION" = "3" ]; then \
      CV_VERSION=4.2; \
      GDAL_VERSION=26; \
    else \
      echo "error: unsupported combination UBUNTU=$VERSION_ID PYTHON=$PYTHON_VERSION"; \
      exit 1; \
    fi \
 && apt-get update --fix-missing \
 && apt-get dist-upgrade -y \
 && apt-get install -y --no-install-recommends \
      less \
      nano \
      curl \
      ca-certificates \
      python$PYTHON_VERSION \
      python$PYTHON_VERSION-pip \
      virtualenv \
      libxml2 \
      libxslt1.1 \
      libopencv-imgproc$CV_VERSION \
      libopencv-highgui$CV_VERSION \
      libopencv-core$CV_VERSION \
      libgdal$GDAL_VERSION \
 && if [ "$VERSION_ID" != "16.04" ]; then \
      apt-get install -y --no-install-recommends \
        python$PYTHON_VERSION-distutils \
        libsm6; \
    fi \
 && pip3 install --upgrade pip setuptools wheel \
 && apt-get purge -y \
      python$PYTHON_VERSION-pip \
 && apt-get autoremove -y \
 && apt-get purge -y $(dpkg -l | awk '{if($1=="rc")print $2}') \
 && apt-get clean \
 && rm -rf /var/lib/apt/lists/* /tmp/*


ARG PAGEXML_VERSION

RUN if ! test -n "$PAGEXML_VERSION"; then \
      echo "error: PAGEXML_VERSION argument is required"; \
      exit 1; \
    fi \
 && . /etc/os-release \
 && if [ "$VERSION_ID" = "16.04" ] && [ "$PYTHON_VERSION" = "2" ]; then \
      PAGEXML_RELEASE=$PAGEXML_VERSION/pagexml-${PAGEXML_VERSION//.0/.}-cp27-cp27m; \
    elif [ "$VERSION_ID" = "16.04" ] && [ "$PYTHON_VERSION" = "3" ]; then \
      PAGEXML_RELEASE=$PAGEXML_VERSION/pagexml-${PAGEXML_VERSION//.0/.}-cp35-cp35m; \
    elif [ "$VERSION_ID" = "18.04" ] && [ "$PYTHON_VERSION" = "3" ]; then \
      PAGEXML_RELEASE=$PAGEXML_VERSION/pagexml-${PAGEXML_VERSION//.0/.}-cp36-cp36m; \
    elif [ "$VERSION_ID" = "20.04" ] && [ "$PYTHON_VERSION" = "3" ]; then \
      PAGEXML_RELEASE=$PAGEXML_VERSION/pagexml-${PAGEXML_VERSION//.0/.}-cp38-cp38; \
    fi \
 && PAGEXML_WHEEL=/tmp/${PAGEXML_RELEASE##*/}-linux_x86_64.whl \
 && curl -L -o $PAGEXML_WHEEL https://github.com/omni-us/pagexml/releases/download/$PAGEXML_RELEASE-linux_x86_64.whl \
 && pip3 install $PAGEXML_WHEEL[all] \
 && python3 -m pagexml_tests \
 && rm -rf /tmp/*
