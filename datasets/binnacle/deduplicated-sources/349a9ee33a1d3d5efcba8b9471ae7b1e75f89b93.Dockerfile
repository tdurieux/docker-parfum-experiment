# AUTOGENERATED
# Most lines in this file are derived from sbt settings. These settings are printed above the lines
# they affect.
#
# IMPORTANT: If you wish to make edits to this file, make changes BELOW the line starting with
# "#+#". Any updates to commands above this line should happen through sbt, and pushed to the
# Dockerfile using the `generateDockerfile` task.

# This image depends on the dependency image.
#
# The dependency image inherits from:
#   dockerImageBase := "allenai-docker-private-docker.bintray.io/java-dynet"
FROM allenai-docker-private-docker.bintray.io/org.allenai/pnp-dependencies

# The ports which are available to map in the image.
# sbt setting:
#   dockerPorts := Seq[Int]()


# The variable determining which typesafe config file to use. You can override this with the -e
# flag:
#   docker run -e CONFIG_ENV=prod allenai-docker-private-docker.bintray.io/org.allenai/pnp
# Note the default is "dev".
ENV CONFIG_ENV ${CONFIG_ENV:-dev}

# The arguments to send to the JVM. These can be overridden at runtime with the -e flag:
#   docker run -e JVM_ARGS="-Xms=1G -Xmx=1G" allenai-docker-private-docker.bintray.io/org.allenai/pnp
#
# sbt setting:
#   javaOptions := Seq("-Dlogback.appname=pnp")
ENV JVM_ARGS ${JVM_ARGS:--Dlogback.appname=pnp}

# The main class to execute when using the ENTRYPOINT command. You can override this at runtime with
# the -e flag:
#   docker run -e JAVA_MAIN=org.allenai.HelloWorld allenai-docker-private-docker.bintray.io/org.allenai/pnp
# sbt setting:
#  mainClass := None
# (No mainClass set)

# The default arguments to use for running the image.
# See https://docs.docker.com/engine/reference/builder/#/understand-how-cmd-and-entrypoint-interact
# for detailed information on CMD vs ENTRYPOINT.
# sbt setting:
#   dockerMainArgs := Seq[String]()
CMD []

# The script for this application to run. This can be overridden with the --entrypoint flag:
#   docker run --entrypoint /bin/bash allenai-docker-private-docker.bintray.io/org.allenai/pnp
ENTRYPOINT ["bin/run-docker.sh"]

# The directories in the staging directory which will be mapping into the Docker image.
#   dockerCopyMappings := Seq(
#     (file("src/main/resources"), "conf"),
#     (file("lib"), "lib"),
#     (file("data"), "data"),
#     (file("experiments"), "experiments")
#   )
COPY conf conf
COPY lib lib
COPY data data
COPY experiments experiments

# lib is always copied, since it has the built jars.
COPY lib lib

# Any additions to the file below this line will be retained when `generateDockerfile` is run.
# Do not remove this line unless you want your changes overwritten!
#+#+#+#+#+#+#+#+#+#+#+#+#+#+#+#+#+#+#+#+#+#+#+#+#+#+#+#+#+#+#+#+#+#+#+#+#+#+#+#+#+#+#+#+#+#+#+#+#+#+

# Copy dynet libraries to the lib folder.
RUN cp /dynet/build/swig/*_scala.jar lib/
RUN cp /dynet/build/swig/libdynet* lib/
