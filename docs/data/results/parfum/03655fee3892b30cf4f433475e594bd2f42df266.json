{
  "startTime": 1674243560220,
  "endTime": 1674243560267,
  "originalSmells": [
    {
      "rule": "mkdirUsrSrcThenRemove",
      "position": {
        "lineStart": 13,
        "lineEnd": 13,
        "columnStart": 4,
        "columnEnd": 26
      }
    },
    {
      "rule": "aptGetInstallUseNoRec",
      "position": {
        "lineStart": 3,
        "lineEnd": 3,
        "columnStart": 22,
        "columnEnd": 60
      }
    },
    {
      "rule": "aptGetInstallThenRemoveAptLists",
      "position": {
        "lineStart": 3,
        "lineEnd": 3,
        "columnStart": 22,
        "columnEnd": 60
      }
    }
  ],
  "repairedSmells": [],
  "repairedDockerfile": "# This is the base for our build step container\n# which has all our build essentials\nFROM ubuntu AS buildstep\nRUN apt-get update && apt-get install --no-install-recommends -y build-essential gcc && rm -rf /var/lib/apt/lists/*;\nCOPY hello.c /app/hello.c\nWORKDIR /app\nRUN gcc -o hello hello.c && chmod +x hello\n\n# This is our runtime container that will end up\n# running on the device.\nFROM ubuntu\n\n# Defines our working directory in container\nRUN mkdir -p /usr/src/app/ && rm -rf /usr/src/app/\nWORKDIR /usr/src/app\n\n# Copy our artifact into our deployable container context.\nCOPY --from=buildstep /app/hello ./hello\n\n# Copy our start script into our deployable container context.\nCOPY ./start.sh ./start.sh\n\n# Enable systemd init system in container\nENV INITSYSTEM=on\n\n# server.js will run when container starts up on the device\nCMD [\"bash\", \"/usr/src/app/start.sh\"]\n"
}